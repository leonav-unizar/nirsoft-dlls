{
  "aaaamon.dll": [
    "InitHelperDll"
  ],
  "aaclient.dll": [
    "OpenKeyReader",
    "OpenKeyReaderWriter",
    "LoadClientAdapter",
    "g_fnStartTransport"
  ],
  "acctres.dll": "No exports",
  "acledit.dll": [
    "DllMain",
    "EditOwnerInfo",
    "SedTakeOwnership",
    "EditPermissionInfo",
    "SedSystemAclEditor",
    "SedDiscretionaryAclEditor",
    "EditAuditInfo",
    "FMExtensionProcW"
  ],
  "aclui.dll": [
    "EditSecurity",
    "IID_ISecurityInformation",
    "CreateSecurityPage"
  ],
  "activeds.dll": [
    "ADsGetLastError",
    "ADsBuildEnumerator",
    "ADsGetObject",
    "ADsOpenObject",
    "SecurityDescriptorToBinarySD",
    "AdsTypeToPropVariant2",
    "ADsDecodeBinaryData",
    "PropVariantToAdsType",
    "AdsFreeAdsValues",
    "ADsBuildVarArrayInt",
    "ReallocADsStr",
    "DllRegisterServer",
    "PropVariantToAdsType2",
    "AllocADsMem",
    "ADsEncodeBinaryData",
    "ReallocADsMem",
    "BinarySDToSecurityDescriptor",
    "AdsTypeToPropVariant",
    "DllGetClassObject",
    "ConvertSecurityDescriptorToSecDes",
    "ConvertSecDescriptorToVariant",
    "FreeADsMem",
    "ADsSetLastError",
    "ADsBuildVarArrayStr",
    "DllCanUnloadNow",
    "AllocADsStr",
    "FreeADsStr",
    "ADsEnumerateNext",
    "DllUnregisterServer",
    "ADsFreeEnumerator"
  ],
  "actxprxy.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "admparse.dll": [
    "CheckDuplicateKeys",
    "AdmClose",
    "CreateAdmUi",
    "GetAdmCategories",
    "AdmInit",
    "AdmReset",
    "DllMain",
    "IsAdmDirty",
    "AdmSaveData",
    "ResetAdmDirtyFlag",
    "AdmFinished",
    "GetFontInfo"
  ],
  "adptif.dll": [
    "IpxPostQueuedCompletionStatus",
    "FwStart",
    "IpxWanCreateAdapterConfigurationPort",
    "FwConnectionRequestFailed",
    "IpxGetQueuedCompletionStatus",
    "IpxDoesRouteExist",
    "FwCreateInterface",
    "CreateSocketPort",
    "IpxRecvPacket",
    "SetFilters",
    "FwGetNotificationResult",
    "FwUnbindFwInterfaceFromAdapter",
    "FwStop",
    "FwIsStarted",
    "IpxGetAdapterConfig",
    "FwDisableFwInterface",
    "GetAdapterNameW",
    "GetAdapterNameFromMacAddrW",
    "IpxWanSetAdapterConfiguration",
    "FwBindFwInterfaceToAdapter",
    "IpxWanQueryInactivityTimer",
    "IpxDeleteAdapterConfigurationPort",
    "IpxGetQueuedAdapterConfigurationStatus",
    "IpxAdjustIoCompletionParams",
    "IpxGetOverlappedResult",
    "FwSetInterface",
    "DeleteSocketPort",
    "GetFilters",
    "FwDeleteInterface",
    "FwUpdateRouteTable",
    "FwGetStaticNetbiosNames",
    "FwSetStaticNetbiosNames",
    "FwUpdateConfig",
    "FwGetInterface",
    "IpxSendPacket",
    "FwEnableFwInterface",
    "IpxGetAdapterList",
    "FwNotifyConnectionRequest",
    "ServiceMain",
    "IpxCreateAdapterConfigurationPort"
  ],
  "adsldp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "adsldpc.dll": [
    "MapLDAPTypeToADSType",
    "ADSIGetObjectAttributes",
    "LdapAddS",
    "LdapTypeToAdsTypeDNWithBinary",
    "LdapGetSchemaObjectCount",
    "BuildLDAPPathFromADsPath2",
    "ConvertSidToU2Trustee",
    "LdapCountEntries",
    "AdsTypeToLdapTypeCopyDNWithString",
    "LdapIsClassNameValidOnServer",
    "SchemaGetPropertyInfoByIndex",
    "Component",
    "ADsGetObjectAttributes",
    "SortAndRemoveDuplicateOIDs",
    "LdapAddExtS",
    "LdapRenameExtS",
    "SchemaIsClassAContainer",
    "BerBvFree",
    "ADsObject",
    "AdsTypeToLdapTypeCopyDNWithBinary",
    "public: void __thiscall CLexer::SetAtDisabler(int)",
    "ADSIGetPreviousRow",
    "ADsEncodeBinaryData",
    "LdapAttributeFree",
    "ConvertU2TrusteeToSid",
    "AdsTypeToLdapTypeCopyTime",
    "UnMarshallLDAPToLDAPSynID",
    "LdapcKeepHandleAround",
    "ADsGetFirstRow",
    "ADsHelperGetCurrentRowMessage",
    "IsGCNamespace",
    "LdapTypeBinaryToString",
    "LdapGetNextPageS",
    "ADsWriteAttributeDefinition",
    "ADsCreateClassDefinition",
    "FreeADsStr",
    "AllocADsStr",
    "LdapFirstEntry",
    "SchemaGetSyntaxOfAttribute",
    "LdapSearchInitPage",
    "LdapCreatePageControl",
    "ADsGetLastError",
    "GetDefaultServer",
    "SchemaAddRef",
    "LdapCrackUserDNtoNTLMUser2",
    "LdapOpenObject2",
    "LdapResult",
    "public: void __thiscall CLexer::SetFSlashDisabler(int)",
    "LdapReadAttribute",
    "LdapSearchS",
    "FindSearchTableIndex",
    "LdapMakeSchemaCacheObsolete",
    "InitObjectInfo",
    "ADsDeleteClassDefinition",
    "ADSIGetNextRow",
    "LdapTypeCopyConstruct",
    "ADSIGetNextColumnName",
    "ADSIAbandonSearch",
    "LdapGetValues",
    "ADSICloseDSObject",
    "LdapDeleteS",
    "ADSIDeleteDSObject",
    "ADSICloseSearchHandle",
    "GetDisplayName",
    "ChangeSeparator",
    "MapADSTypeToLDAPType",
    "ReadSecurityDescriptorControlType",
    "LdapFirstAttribute",
    "LdapSearchExtS",
    "LdapTypeFreeLdapModList",
    "ADsCloseSearchHandle",
    "LdapGetSyntaxIdOfAttribute",
    "LdapTypeToAdsTypeGeneralizedTime",
    "BuildADsPathFromLDAPPath",
    "public: long __thiscall CLexer::GetNextToken(unsigned short *,unsigned long *)",
    "ADsAbandonSearch",
    "ADsEnumAttributes",
    "LdapControlFree",
    "ReadPagingSupportedAttr",
    "LdapReadAttribute2",
    "LdapTypeToAdsTypeUTCTime",
    "FindEntryInSearchTable",
    "ADSIFreeColumn",
    "ADsWriteClassDefinition",
    "LdapSearch",
    "ReadServerSupportsIsADControl",
    "ADsSetObjectAttributes",
    "BuildADsPathFromParent",
    "ADSIOpenDSObject",
    "LdapCloseObject",
    "LdapCacheAddRef",
    "LdapReadAttributeFast",
    "BuildADsPathFromLDAPPath2",
    "ADsExecuteSearch",
    "LdapGetSubSchemaSubEntryPath",
    "LdapcSetStickyServer",
    "ADSIGetFirstRow",
    "ReallocADsStr",
    "intcmp",
    "LdapTypeToAdsTypeDNWithString",
    "AdsTypeToLdapTypeCopyGeneralizedTime",
    "SchemaGetStringsFromStringTable",
    "PathName",
    "ADsGetPreviousRow",
    "AllocADsMem",
    "ADsDeleteDSObject",
    "GetLDAPTypeName",
    "LdapNextAttribute",
    "LdapModDnS",
    "LdapParseResult",
    "ReallocADsMem",
    "GetSyntaxOfAttribute",
    "ADSISetObjectAttributes",
    "LdapInitializeSearchPreferences",
    "LdapSearchAbandonPage",
    "LdapOpenObject",
    "AdsTypeFreeAdsObjects",
    "ConvertSidToString",
    "LdapControlsFree",
    "SchemaGetClassInfoByIndex",
    "ADsCreateDSObjectExt",
    "ADsFreeColumn",
    "LdapTypeFreeLdapObjects",
    "BuildADsParentPath",
    "LdapNextEntry",
    "ADsGetNextRow",
    "ADsSetLastError",
    "ADsDeleteAttributeDefinition",
    "LdapValueFreeLen",
    "AdsTypeToLdapTypeCopyConstruct",
    "ADSISetSearchPreference",
    "LdapCrackUserDNtoNTLMUser",
    "LdapTypeFreeLdapModObject",
    "LdapCompareExt",
    "SchemaOpen",
    "ADsSetSearchPreference",
    "ADSIModifyRdn",
    "ADSICreateDSObject",
    "LdapModifyS",
    "ADsDecodeBinaryData",
    "BuildADsParentPathFromObjectInfo",
    "public: __thiscall CLexer::CLexer(unsigned short *)",
    "FreeObjectInfo",
    "LdapGetDn",
    "LdapModifyExtS",
    "LdapValueFree",
    "ADSIGetColumn",
    "ADsEnumClasses",
    "ADsGetColumn",
    "SchemaGetClassInfo",
    "LdapDeleteExtS",
    "LdapParsePageControl",
    "LdapTypeToAdsTypeCopyConstruct",
    "SchemaClose",
    "public: __thiscall CLexer::~CLexer(void)",
    "ADSIExecuteSearch",
    "LdapGetSyntaxOfAttributeOnServer",
    "ADsCreateAttributeDefinition",
    "ADsCreateDSObject",
    "BuildADsParentPathFromObjectInfo2",
    "LdapMsgFree",
    "FreeADsMem",
    "LdapGetValuesLen",
    "LdapSearchST",
    "GetDomainDNSNameForDomain",
    "ADsGetNextColumnName",
    "SchemaGetPropertyInfo",
    "BuildLDAPPathFromADsPath",
    "public: void __thiscall CLexer::SetExclaimnationDisabler(int)",
    "LdapMemFree",
    "SchemaGetObjectCount"
  ],
  "adsmsext.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "adsnds.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "adsnt.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "adsnw.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "advapi32.dll": [
    "SystemFunction016",
    "SetNamedSecurityInfoA",
    "LsaFreeMemory",
    "SystemFunction010",
    "RegQueryValueW",
    "RegOpenKeyW",
    "GetAce",
    "GetTrusteeNameA",
    "LsaEnumerateAccountsWithUserRight",
    "RegOpenKeyExW",
    "NotifyBootConfigStatus",
    "ConvertStringSecurityDescriptorToSecurityDescriptorA",
    "GetAuditedPermissionsFromAclA",
    "QueryServiceStatus",
    "WmiReceiveNotificationsA",
    "IsValidAcl",
    "OpenTraceW",
    "CredRenameW",
    "PrivilegedServiceAuditAlarmA",
    "ElfChangeNotify",
    "DecryptFileA",
    "ConvertSecurityDescriptorToAccessNamedW",
    "RegOpenKeyExA",
    "UnregisterIdleTask",
    "ElfDeregisterEventSource",
    "SystemFunction032",
    "UnlockServiceDatabase",
    "LsaICLookupNamesWithCreds",
    "ConvertStringSidToSidW",
    "GetPrivateObjectSecurity",
    "CryptDestroyHash",
    "LsaStorePrivateData",
    "GetNamedSecurityInfoExA",
    "LsaOpenAccount",
    "SystemFunction027",
    "BuildExplicitAccessWithNameA",
    "GetWindowsAccountDomainSid",
    "CredWriteW",
    "LsaGetSystemAccessAccount",
    "ConvertSidToStringSidW",
    "RegOverridePredefKey",
    "LsaDeleteTrustedDomain",
    "ConvertSDToStringSDRootDomainA",
    "CreatePrivateObjectSecurityWithMultipleInheritance",
    "SystemFunction022",
    "ConvertSecurityDescriptorToStringSecurityDescriptorA",
    "CreateTraceInstanceId",
    "OpenEventLogA",
    "GetInheritanceSourceW",
    "GetLengthSid",
    "SaferRecordEventLogEntry",
    "LsaGetRemoteUserName",
    "IdentifyCodeAuthzLevelW",
    "IsWellKnownSid",
    "CryptGetKeyParam",
    "CryptSignHashW",
    "LsaLookupPrivilegeDisplayName",
    "SystemFunction009",
    "GetExplicitEntriesFromAclA",
    "MakeAbsoluteSD",
    "A_SHAFinal",
    "AreAllAccessesGranted",
    "I_ScSetServiceBitsA",
    "CryptSetKeyParam",
    "ImpersonateAnonymousToken",
    "CredProfileLoaded",
    "ElfRegisterEventSourceA",
    "GetInformationCodeAuthzLevelW",
    "RegDeleteValueW",
    "RegisterEventSourceA",
    "AddUsersToEncryptedFile",
    "ChangeServiceConfig2W",
    "LsaDelete",
    "AccessCheckAndAuditAlarmW",
    "CryptGenKey",
    "EnumServicesStatusExA",
    "InitiateSystemShutdownW",
    "ElfOldestRecord",
    "InitiateSystemShutdownExA",
    "SystemFunction019",
    "AddAuditAccessObjectAce",
    "SystemFunction034",
    "ConvertStringSidToSidA",
    "WmiDevInstToInstanceNameA",
    "GetUserNameW",
    "InitializeSid",
    "CredGetTargetInfoW",
    "IsValidSid",
    "A_SHAUpdate",
    "GetSecurityDescriptorGroup",
    "GetSidSubAuthority",
    "SystemFunction005",
    "SetThreadToken",
    "QueryServiceConfig2A",
    "SetPrivateObjectSecurityEx",
    "ConvertToAutoInheritPrivateObjectSecurity",
    "GetEffectiveRightsFromAclA",
    "BuildTrusteeWithObjectsAndSidW",
    "ElfOpenEventLogW",
    "WmiExecuteMethodW",
    "SetUserFileEncryptionKey",
    "GetSecurityInfoExA",
    "LsaLookupNames",
    "ElfReadEventLogW",
    "CryptSetHashParam",
    "EnumServiceGroupW",
    "SystemFunction025",
    "RegQueryInfoKeyW",
    "LsaEnumeratePrivilegesOfAccount",
    "ChangeServiceConfigA",
    "EnumerateTraceGuids",
    "RegCreateKeyExW",
    "CredReadDomainCredentialsA",
    "CryptEnumProviderTypesA",
    "GetServiceKeyNameW",
    "SaferCloseLevel",
    "ConvertSidToStringSidA",
    "GetManagedApplications",
    "CryptReleaseContext",
    "GetMultipleTrusteeA",
    "WmiFileHandleToInstanceNameA",
    "StartServiceCtrlDispatcherW",
    "StartServiceW",
    "InitiateSystemShutdownExW",
    "GetUserNameA",
    "RegUnLoadKeyW",
    "WmiMofEnumerateResourcesW",
    "I_ScIsSecurityProcess",
    "LsaQueryInfoTrustedDomain",
    "SaferiRecordEventLogEntry",
    "CredpEncodeCredential",
    "SystemFunction024",
    "LsaSetSecurityObject",
    "LogonUserExW",
    "BackupEventLogA",
    "LsaGetQuotasForAccount",
    "CredFree",
    "RegCloseKey",
    "QueryAllTracesA",
    "LsaSetQuotasForAccount",
    "CloseTrace",
    "UpdateTraceW",
    "A_SHAInit",
    "SaferiReplaceProcessThreadTokens",
    "DuplicateEncryptionInfoFile",
    "SaferiChangeRegistryScope",
    "RegOpenCurrentUser",
    "LsaClose",
    "OpenThreadToken",
    "GetSecurityDescriptorDacl",
    "BuildExplicitAccessWithNameW",
    "LookupSecurityDescriptorPartsA",
    "AllocateLocallyUniqueId",
    "WmiReceiveNotificationsW",
    "RegLoadKeyW",
    "GetAccessPermissionsForObjectA",
    "LookupPrivilegeNameW",
    "CryptSetProviderExA",
    "RegSaveKeyW",
    "WdmWmiServiceMain",
    "WmiGetTraceHeader",
    "OpenServiceA",
    "RegSetKeySecurity",
    "SystemFunction041",
    "CreateProcessAsUserW",
    "SetEntriesInAuditListW",
    "ObjectOpenAuditAlarmA",
    "LsaEnumerateTrustedDomainsEx",
    "SaferiIsExecutableFileType",
    "BuildTrusteeWithNameW",
    "GetOverlappedAccessResults",
    "WmiNotificationRegistrationW",
    "LsaLookupNames2",
    "CreatePrivateObjectSecurityEx",
    "OpenSCManagerA",
    "SetSecurityInfoExW",
    "GetFileSecurityA",
    "CredWriteDomainCredentialsA",
    "CredEnumerateW",
    "I_ScPnPGetServiceName",
    "LookupPrivilegeValueA",
    "RemoveUsersFromEncryptedFile",
    "DuplicateTokenEx",
    "LsaEnumeratePrivileges",
    "ChangeServiceConfigW",
    "WmiFileHandleToInstanceNameW",
    "DestroyPrivateObjectSecurity",
    "AddAccessAllowedObjectAce",
    "MD4Final",
    "RegCreateKeyExA",
    "SystemFunction018",
    "BuildTrusteeWithObjectsAndNameW",
    "CryptGenRandom",
    "CommandLineFromMsiDescriptor",
    "CloseCodeAuthzLevel",
    "CredGetTargetInfoA",
    "CryptSetProviderExW",
    "LsaQuerySecret",
    "SystemFunction031",
    "SystemFunction007",
    "AccessCheck",
    "ReadEventLogW",
    "GetManagedApplicationCategories",
    "QueryServiceConfigA",
    "LookupAccountSidA",
    "GetEffectiveRightsFromAclW",
    "SystemFunction030",
    "WmiOpenTraceWithCursor",
    "RegQueryMultipleValuesW",
    "ElfOpenBackupEventLogA",
    "FreeSid",
    "AccessCheckByTypeResultListAndAuditAlarmByHandleA",
    "CloseEventLog",
    "QueryServiceObjectSecurity",
    "AddAccessDeniedObjectAce",
    "InitiateSystemShutdownA",
    "QueryServiceStatusEx",
    "TraceEvent",
    "LsaSetInformationPolicy",
    "FreeEncryptedFileKeyInfo",
    "LsaLookupPrivilegeName",
    "AdjustTokenPrivileges",
    "MSChapSrvChangePassword2",
    "WmiQueryAllDataMultipleA",
    "GetSecurityDescriptorSacl",
    "ConvertSecurityDescriptorToAccessA",
    "SaferSetLevelInformation",
    "ElfReadEventLogA",
    "WmiGetFirstTraceOffset",
    "SetNamedSecurityInfoW",
    "RegisterServiceCtrlHandlerA",
    "AddAccessAllowedAceEx",
    "StopTraceW",
    "WmiSetSingleItemA",
    "LsaEnumerateAccountRights",
    "CreateWellKnownSid",
    "CredMarshalCredentialA",
    "CryptSetProviderW",
    "LsaLookupSids",
    "IsTextUnicode",
    "LsaOpenTrustedDomain",
    "LsaSetSecret",
    "RegEnumKeyExA",
    "RegisterEventSourceW",
    "MD4Init",
    "ConvertSecurityDescriptorToStringSecurityDescriptorW",
    "CreateProcessAsUserSecure",
    "BuildTrusteeWithObjectsAndSidA",
    "CryptGetProvParam",
    "PrivilegedServiceAuditAlarmW",
    "GetSecurityDescriptorLength",
    "WmiParseTraceEvent",
    "GetAclInformation",
    "RegQueryValueA",
    "SetSecurityInfo",
    "CreateProcessAsUserA",
    "MakeAbsoluteSD2",
    "AllocateAndInitializeSid",
    "SetEntriesInAccessListA",
    "WmiSetSingleItemW",
    "RegQueryValueExW",
    "CloseEncryptedFileRaw",
    "LogonUserA",
    "LsaRemovePrivilegesFromAccount",
    "MD5Init",
    "CryptAcquireContextA",
    "LsaCreateSecret",
    "CancelOverlappedAccess",
    "MSChapSrvChangePassword",
    "CopySid",
    "ObjectCloseAuditAlarmW",
    "SetServiceStatus",
    "WriteEncryptedFileRaw",
    "LsaCreateTrustedDomain",
    "RegisterIdleTask",
    "SynchronizeWindows31FilesAndWindowsNTRegistry",
    "GetNamedSecurityInfoW",
    "RegisterServiceCtrlHandlerExW",
    "SystemFunction020",
    "I_ScSendTSMessage",
    "WmiQueryGuidInformation",
    "EnableTrace",
    "LsaICLookupSidsWithCreds",
    "CreateProcessWithLogonW",
    "ObjectDeleteAuditAlarmA",
    "RegisterServiceCtrlHandlerW",
    "DecryptFileW",
    "AreAnyAccessesGranted",
    "CryptEncrypt",
    "SystemFunction002",
    "SetPrivateObjectSecurity",
    "EnumServicesStatusA",
    "BuildImpersonateTrusteeW",
    "LsaEnumerateTrustedDomains",
    "IsValidSecurityDescriptor",
    "RegQueryInfoKeyA",
    "LsaLookupPrivilegeValue",
    "SaferSetPolicyInformation",
    "CredWriteDomainCredentialsW",
    "RegQueryValueExA",
    "ObjectOpenAuditAlarmW",
    "SystemFunction035",
    "MD4Update",
    "SetFileSecurityW",
    "GetSecurityDescriptorOwner",
    "RegisterTraceGuidsA",
    "CryptDestroyKey",
    "RegSaveKeyExW",
    "LsaSetDomainInformationPolicy",
    "ObjectPrivilegeAuditAlarmW",
    "OpenBackupEventLogW",
    "RegDisablePredefinedCache",
    "WmiQueryAllDataA",
    "EnumDependentServicesA",
    "EnumServicesStatusW",
    "EncryptFileW",
    "BuildTrusteeWithSidW",
    "GetSecurityDescriptorControl",
    "WmiExecuteMethodA",
    "TreeResetNamedSecurityInfoA",
    "SystemFunction012",
    "CredReadDomainCredentialsW",
    "SystemFunction028",
    "ElfCloseEventLog",
    "FlushTraceA",
    "LockServiceDatabase",
    "GetSidLengthRequired",
    "BuildSecurityDescriptorW",
    "FindFirstFreeAce",
    "CryptDuplicateHash",
    "QueryServiceConfig2W",
    "RegConnectRegistryA",
    "SystemFunction006",
    "LsaAddPrivilegesToAccount",
    "AddAuditAccessAce",
    "BuildImpersonateTrusteeA",
    "ConvertAccessToSecurityDescriptorW",
    "GetLocalManagedApplicationData",
    "RegNotifyChangeKeyValue",
    "WmiQuerySingleInstanceMultipleA",
    "MakeSelfRelativeSD",
    "CryptGetHashParam",
    "GetServiceDisplayNameA",
    "UnregisterTraceGuids",
    "SaferCreateLevel",
    "I_ScSetServiceBitsW",
    "ConvertAccessToSecurityDescriptorA",
    "WmiEnumerateGuids",
    "CryptHashSessionKey",
    "CryptVerifySignatureW",
    "ConvertSDToStringSDRootDomainW",
    "GetTrusteeFormA",
    "CryptSetProviderA",
    "AccessCheckByTypeAndAuditAlarmA",
    "CryptGetUserKey",
    "MapGenericMask",
    "WmiQuerySingleInstanceA",
    "AccessCheckAndAuditAlarmA",
    "ElfReportEventA",
    "GetSidIdentifierAuthority",
    "LsaGetUserName",
    "SetNamedSecurityInfoExA",
    "RegUnLoadKeyA",
    "LsaAddAccountRights",
    "StartTraceA",
    "CredpDecodeCredential",
    "WmiCloseTraceWithCursor",
    "InitializeSecurityDescriptor",
    "AccessCheckByTypeResultList",
    "StopTraceA",
    "CredIsMarshaledCredentialW",
    "WmiSetSingleInstanceW",
    "GetMultipleTrusteeW",
    "OpenBackupEventLogA",
    "RevertToSelf",
    "SetEntriesInAccessListW",
    "GetMultipleTrusteeOperationA",
    "GetNamedSecurityInfoA",
    "CredDeleteW",
    "WmiNotificationRegistrationA",
    "LogonUserExA",
    "SetInformationCodeAuthzLevelW",
    "EncryptFileA",
    "SystemFunction014",
    "BuildTrusteeWithObjectsAndNameA",
    "LsaQueryInformationPolicy",
    "RegDisablePredefinedCacheEx",
    "CreatePrivateObjectSecurity",
    "ClearEventLogW",
    "FlushTraceW",
    "WmiFreeBuffer",
    "ChangeServiceConfig2A",
    "CryptCreateHash",
    "SetSecurityDescriptorGroup",
    "OpenProcessToken",
    "SystemFunction011",
    "RegCreateKeyW",
    "QueryServiceLockStatusA",
    "QueryTraceW",
    "SetSecurityDescriptorControl",
    "GetTrusteeTypeA",
    "SystemFunction023",
    "GetLocalManagedApplications",
    "CryptAcquireContextW",
    "RegReplaceKeyW",
    "SystemFunction004",
    "QueryServiceLockStatusW",
    "SetAclInformation",
    "AddAccessAllowedAce",
    "EncryptedFileKeyInfo",
    "SaferGetLevelInformation",
    "WmiOpenBlock",
    "RegReplaceKeyA",
    "LsaOpenSecret",
    "CryptGetDefaultProviderW",
    "ConvertStringSecurityDescriptorToSecurityDescriptorW",
    "EqualDomainSid",
    "QueryAllTracesW",
    "PrivilegeCheck",
    "DeleteAce",
    "SaferiCompareTokenLevels",
    "CryptDeriveKey",
    "OpenEventLogW",
    "BuildImpersonateExplicitAccessWithNameW",
    "TraceMessageVa",
    "EncryptionDisable",
    "LookupAccountNameA",
    "FileEncryptionStatusA",
    "LsaSetInformationTrustedDomain",
    "RegDeleteKeyA",
    "RegEnumKeyExW",
    "OpenServiceW",
    "SetTokenInformation",
    "CredRenameA",
    "RegEnumKeyW",
    "LsaOpenTrustedDomainByName",
    "GetAuditedPermissionsFromAclW",
    "BuildSecurityDescriptorA",
    "CredpConvertCredential",
    "GetNamedSecurityInfoExW",
    "LsaOpenPolicy",
    "CredUnmarshalCredentialA",
    "GetInheritanceSourceA",
    "CryptDuplicateKey",
    "IsTokenRestricted",
    "ReadEventLogA",
    "ElfNumberOfRecords",
    "SystemFunction021",
    "AccessCheckByTypeResultListAndAuditAlarmA",
    "GetTrusteeNameW",
    "RegOpenKeyA",
    "RegQueryMultipleValuesA",
    "LsaCreateTrustedDomainEx",
    "CryptExportKey",
    "LsaNtStatusToWinError",
    "LsaSetSystemAccessAccount",
    "WmiGetNextEvent",
    "OpenTraceA",
    "TrusteeAccessToObjectA",
    "CredMarshalCredentialW",
    "LsaOpenPolicySce",
    "LsaQueryTrustedDomainInfo",
    "CreateCodeAuthzLevel",
    "RegEnumKeyA",
    "CredUnmarshalCredentialW",
    "GetSecurityInfoExW",
    "RegSetValueW",
    "WmiQuerySingleInstanceMultipleW",
    "SetServiceBits",
    "SetEntriesInAuditListA",
    "LsaEnumerateAccounts",
    "WmiSetSingleInstanceA",
    "ElfOpenBackupEventLogW",
    "OpenEncryptedFileRawA",
    "SetEntriesInAclA",
    "BuildImpersonateExplicitAccessWithNameA",
    "GetCurrentHwProfileA",
    "LookupPrivilegeDisplayNameW",
    "BuildTrusteeWithNameA",
    "RegConnectRegistryW",
    "SystemFunction013",
    "AddAuditAccessAceEx",
    "SetSecurityInfoExA",
    "GetSecurityInfo",
    "AddAccessDeniedAceEx",
    "SystemFunction026",
    "LsaICLookupNames",
    "ClearEventLogA",
    "DuplicateToken",
    "QueryServiceConfigW",
    "ObjectCloseAuditAlarmA",
    "RegDeleteValueA",
    "RegisterServiceCtrlHandlerExA",
    "SaferGetPolicyInformation",
    "SystemFunction033",
    "GetAccessPermissionsForObjectW",
    "LsaQuerySecurityObject",
    "ComputeAccessTokenFromCodeAuthzLevel",
    "AccessCheckByTypeResultListAndAuditAlarmW",
    "CryptEnumProvidersA",
    "GetTraceEnableFlags",
    "ElfRegisterEventSourceW",
    "RegDeleteKeyW",
    "SaferiSearchMatchingHashRules",
    "OpenEncryptedFileRawW",
    "TraceEventInstance",
    "GetCurrentHwProfileW",
    "ControlService",
    "ObjectDeleteAuditAlarmW",
    "ElfBackupEventLogFileW",
    "ReportEventW",
    "ProcessTrace",
    "EqualSid",
    "SetInformationCodeAuthzPolicyW",
    "SetEntriesInAclW",
    "CheckTokenMembership",
    "LsaRetrievePrivateData",
    "RegGetKeySecurity",
    "CredIsMarshaledCredentialA",
    "RegRestoreKeyA",
    "CreateRestrictedToken",
    "CryptSignHashA",
    "LsaSetTrustedDomainInfoByName",
    "RegSetValueA",
    "TraceMessage",
    "MD5Update",
    "WmiDevInstToInstanceNameW",
    "RegEnumValueA",
    "RegRestoreKeyW",
    "WmiQuerySingleInstanceW",
    "ReadEncryptedFileRaw",
    "LsaQueryTrustedDomainInfoByName",
    "LookupPrivilegeDisplayNameA",
    "LsaSetTrustedDomainInformation",
    "NotifyChangeEventLog",
    "CredpConvertTargetInfo",
    "GetMultipleTrusteeOperationW",
    "LsaQueryForestTrustInformation",
    "StartServiceCtrlDispatcherA",
    "ControlTraceA",
    "LookupPrivilegeValueW",
    "SetKernelObjectSecurity",
    "CredGetSessionTypes",
    "InitializeAcl",
    "SystemFunction040",
    "GetSidSubAuthorityCount",
    "SystemFunction003",
    "CryptVerifySignatureA",
    "SetServiceObjectSecurity",
    "LsaClearAuditLog",
    "LsaQueryDomainInformationPolicy",
    "AccessCheckByTypeResultListAndAuditAlarmByHandleW",
    "SetSecurityDescriptorSacl",
    "GetInformationCodeAuthzPolicyW",
    "CryptImportKey",
    "CryptEnumProvidersW",
    "ElfFlushEventLog",
    "RegisterTraceGuidsW",
    "CryptContextAddRef",
    "LsaRemoveAccountRights",
    "CreateServiceA",
    "RegSetValueExW",
    "RegSetValueExA",
    "WmiCloseBlock",
    "RegOpenUserClassesRoot",
    "StartServiceA",
    "ReportEventA",
    "GetNumberOfEventLogRecords",
    "AddAce",
    "ConvertSecurityDescriptorToAccessNamedA",
    "ConvertStringSDToSDRootDomainA",
    "EnumServicesStatusExW",
    "ImpersonateSelf",
    "ElfClearEventLogFileW",
    "WmiConvertTimestamp",
    "ObjectPrivilegeAuditAlarmA",
    "SystemFunction017",
    "LookupAccountNameW",
    "BackupEventLogW",
    "BuildTrusteeWithSidA",
    "ConvertSecurityDescriptorToAccessW",
    "GetEventLogInformation",
    "CredReadA",
    "MD5Final",
    "WmiQueryAllDataMultipleW",
    "SetSecurityDescriptorOwner",
    "ControlTraceW",
    "GetExplicitEntriesFromAclW",
    "DeregisterEventSource",
    "UpdateTraceA",
    "GetTraceEnableLevel",
    "QueryTraceA",
    "ProcessIdleTasks",
    "CloseServiceHandle",
    "GetTrusteeTypeW",
    "TrusteeAccessToObjectW",
    "SaferiPopulateDefaultsInRegistry",
    "LookupSecurityDescriptorPartsW",
    "AdjustTokenGroups",
    "SetSecurityDescriptorRMControl",
    "CryptSetProvParam",
    "FileEncryptionStatusW",
    "WmiQueryAllDataW",
    "GetKernelObjectSecurity",
    "QueryRecoveryAgentsOnEncryptedFile",
    "FreeEncryptionCertificateHashList",
    "SystemFunction008",
    "CreateServiceW",
    "SaferComputeTokenFromLevel",
    "ElfOpenEventLogA",
    "RegLoadKeyA",
    "LsaSetForestTrustInformation",
    "CredReadW",
    "CredDeleteA",
    "SetFileSecurityA",
    "SystemFunction036",
    "AddAccessDeniedAce",
    "LogonUserW",
    "GetTraceLoggerHandle",
    "AbortSystemShutdownA",
    "SetNamedSecurityInfoExW",
    "StartTraceW",
    "CryptDecrypt",
    "Wow64Win32ApiEntry",
    "LsaICLookupSids",
    "RegSaveKeyA",
    "AccessCheckByTypeAndAuditAlarmW",
    "UninstallApplication",
    "ConvertStringSDToSDRootDomainW",
    "RegFlushKey",
    "GetFileSecurityW",
    "ElfClearEventLogFileA",
    "EqualPrefixSid",
    "ElfReportEventW",
    "ImpersonateNamedPipeClient",
    "GetTokenInformation",
    "QueryUsersOnEncryptedFile",
    "SystemFunction001",
    "RemoveTraceCallback",
    "CredEnumerateA",
    "AbortSystemShutdownW",
    "QueryWindows31FilesMigration",
    "IsTokenUntrusted",
    "CryptGetDefaultProviderA",
    "RegEnumValueW",
    "SetTraceCallback",
    "SaferIdentifyLevel",
    "SystemFunction015",
    "AccessCheckByType",
    "ConvertStringSDToSDDomainA",
    "OpenSCManagerW",
    "I_ScGetCurrentGroupStateW",
    "RegSaveKeyExA",
    "EnumDependentServicesW",
    "GetServiceKeyNameA",
    "LookupPrivilegeNameA",
    "GetTrusteeFormW",
    "LsaCreateAccount",
    "GetOldestEventLogRecord",
    "TreeResetNamedSecurityInfoW",
    "DeleteService",
    "RegCreateKeyA",
    "SystemFunction029",
    "CredWriteA",
    "GetSecurityDescriptorRMControl",
    "ImpersonateLoggedOnUser",
    "ElfBackupEventLogFileA",
    "CryptEnumProviderTypesW",
    "ConvertStringSDToSDDomainW",
    "InstallApplication",
    "GetServiceDisplayNameW",
    "FreeInheritedFromArray",
    "LookupAccountSidW",
    "CryptHashData",
    "WmiMofEnumerateResourcesA",
    "SetSecurityDescriptorDacl"
  ],
  "advpack.dll": [
    "LaunchINFSectionW",
    "LaunchINFSectionExW",
    "RegRestoreAllA",
    "TranslateInfStringA",
    "RegisterOCXW",
    "DelNodeRunDLL32",
    "DelNode",
    "GetVersionFromFileEx",
    "UserUnInstStubWrapper",
    "RunSetupCommand",
    "UserInstStubWrapper",
    "ExtractFilesA",
    "ExecuteCabA",
    "AddDelBackupEntry",
    "RunSetupCommandW",
    "GetVersionFromFileExA",
    "OpenINFEngineA",
    "TranslateInfStringExA",
    "RebootCheckOnInstall",
    "OpenINFEngineW",
    "AdvInstallFileW",
    "GetVersionFromFileA",
    "ExtractFilesW",
    "UserInstStubWrapperW",
    "LaunchINFSectionA",
    "GetVersionFromFileW",
    "DelNodeW",
    "RunSetupCommandA",
    "RegSaveRestoreOnINFW",
    "RebootCheckOnInstallA",
    "FileSaveRestoreOnINFA",
    "RegRestoreAllW",
    "RebootCheckOnInstallW",
    "CloseINFEngine",
    "RegSaveRestoreA",
    "UserUnInstStubWrapperA",
    "FileSaveMarkNotExistW",
    "SetPerUserSecValuesA",
    "DoInfInstallA",
    "LaunchINFSection",
    "LaunchINFSectionEx",
    "FileSaveMarkNotExist",
    "AdvInstallFile",
    "UserUnInstStubWrapperW",
    "FileSaveRestoreA",
    "RegSaveRestoreW",
    "FileSaveRestoreOnINF",
    "DelNodeRunDLL32A",
    "DoInfInstallW",
    "RegRestoreAll",
    "GetVersionFromFileExW",
    "RegInstall",
    "TranslateInfStringEx",
    "NeedRebootInit",
    "RegSaveRestoreOnINFA",
    "ExecuteCabW",
    "RegInstallW",
    "TranslateInfStringExW",
    "DelNodeRunDLL32W",
    "UserInstStubWrapperA",
    "DelNodeA",
    "AddDelBackupEntryW",
    "TranslateInfStringW",
    "LaunchINFSectionExA",
    "RegInstallA",
    "SetPerUserSecValues",
    "ExtractFiles",
    "FileSaveRestoreOnINFW",
    "IsNTAdmin",
    "ExecuteCab",
    "AdvInstallFileA",
    "SetPerUserSecValuesW",
    "AddDelBackupEntryA",
    "FileSaveRestore",
    "NeedReboot",
    "FileSaveMarkNotExistA",
    "RegSaveRestore",
    "DoInfInstall",
    "RegisterOCX",
    "OpenINFEngine",
    "GetVersionFromFile",
    "TranslateInfString",
    "RegSaveRestoreOnINF",
    "FileSaveRestoreW"
  ],
  "alrsvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "amstream.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "apcups.dll": [
    "UPSTurnOff",
    "UPSInit",
    "UPSCancelWait",
    "UPSWaitForStateChange",
    "UPSGetState",
    "UPSStop"
  ],
  "apphelp.dll": [
    "ApphelpFixMsiPackageExe",
    "SdbReadDWORDTagRef",
    "SdbQueryDataEx",
    "ApphelpCheckIME",
    "ApphelpCheckShellObject",
    "SdbReadWORDTag",
    "SdbResolveDatabase",
    "SdbGetTagFromTagID",
    "SdbCloseApphelpInformation",
    "SdbReadQWORDTag",
    "AllowPermLayer",
    "SdbReadBYTETag",
    "SdbFindFirstMsiPackage_Str",
    "SdbEnumMsiTransforms",
    "SdbOpenApphelpDetailsDatabaseSP",
    "SdbUnregisterDatabase",
    "SdbReadDWORDTag",
    "SdbGetTagDataSize",
    "SdbQueryApphelpInformation",
    "SdbInitDatabase",
    "ApphelpShowUI",
    "SdbReadBYTETagRef",
    "SdbGetEntryFlags",
    "SdbFindNextMsiPackage",
    "SdbQueryData",
    "SdbGetMsiPackageInformation",
    "SdbTagIDToTagRef",
    "SdbGetStringTagPtr",
    "SdbReleaseDatabase",
    "SdbGetPermLayerKeys",
    "SdbTagRefToTagID",
    "SdbGetBinaryTagData",
    "SdbSetPermLayerKeys",
    "ApphelpShowDialog",
    "SdbDeletePermLayerKeys",
    "SdbGetFirstChild",
    "SdbOpenDatabase",
    "SdbGetNextChild",
    "ApphelpCheckInstallShieldPackage",
    "SdbFindNextTagRef",
    "SdbFreeFlagInfo",
    "SdbReadStringTag",
    "ApphelpFreeFileAttributes",
    "SdbReadBinaryTag",
    "SdbCloseDatabase",
    "SdbGetDatabaseID",
    "SdbFindFirstNamedTag",
    "SdbReadEntryInformation",
    "SdbGrabMatchingInfoEx",
    "SdbTagToString",
    "ShimDumpCache",
    "ApphelpCheckMsiPackage",
    "ShimFlushCache",
    "SdbOpenApphelpDetailsDatabase",
    "SdbFindFirstTagRef",
    "ApphelpCheckRunApp",
    "ApphelpGetFileAttributes",
    "ApphelpGetNTVDMInfo",
    "SdbReadStringTagRef",
    "SdbGetStandardDatabaseGUID",
    "SdbRegisterDatabase",
    "SdbRegisterDatabaseEx",
    "ApphelpUpdateCacheEntry",
    "SdbGetDatabaseVersion",
    "SdbQueryFlagInfo",
    "SdbGetDatabaseMatch",
    "SdbReadQWORDTagRef",
    "SdbReadWORDTagRef",
    "SdbReadMsiTransformInfo",
    "SdbFindNextTag",
    "SdbFindFirstMsiPackage",
    "ApphelpFixMsiPackage",
    "ApphelpCheckExe",
    "GetPermLayers",
    "SdbFindFirstTag",
    "SdbGrabMatchingInfo",
    "SetPermLayers",
    "SdbCreateMsiTransformFile",
    "ApphelpQueryModuleData",
    "SdbOpenApphelpInformation"
  ],
  "appmgmts.dll": [
    "CsGetClassAccess",
    "IID_IClassAdmin",
    "CsEnumApps",
    "ReleasePackageInfo",
    "CsGetClassStorePath",
    "CsGetAppCategories",
    "ReleasePackageDetail",
    "ReleaseAppCategoryInfoList",
    "CsCreateClassStore",
    "CsRegisterAppCategory",
    "ProcessGroupPolicyObjectsEx",
    "CsUnregisterAppCategory",
    "ServiceMain",
    "CsGetClassStore",
    "GenerateGroupPolicy"
  ],
  "appmgr.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "asferror.dll": "No exports",
  "asycfilt.dll": [
    "DllCanUnloadNow",
    "FilterCreateInstance"
  ],
  "atkctrs.dll": [
    "OpenAtkPerformanceData",
    "CloseAtkPerformanceData",
    "CollectAtkPerformanceData"
  ],
  "atl.dll": [
    "AtlModuleRegisterTypeLib",
    "AtlAxCreateDialogA",
    "AtlGetObjectSourceInterface",
    "AtlAdvise",
    "AtlIPersistStreamInit_Load",
    "AtlComQIPtrAssign",
    "AtlWaitWithMessageLoop",
    "AtlModuleLoadTypeLib",
    "AtlHiMetricToPixel",
    "AtlAxCreateControl",
    "AtlModuleAddCreateWndData",
    "AtlModuleRegisterServer",
    "AtlSetErrorInfo",
    "AtlAxGetControl",
    "AtlIPersistStreamInit_Save",
    "AtlModuleExtractCreateWndData",
    "AtlModuleRegisterWndClassInfoA",
    "AtlGetVersion",
    "AtlModuleUnregisterServerEx",
    "DllRegisterServer",
    "AtlInternalQueryInterface",
    "AtlIPersistPropertyBag_Load",
    "AtlModuleTerm",
    "DllUnregisterServer",
    "AtlAxWinInit",
    "AtlModuleInit",
    "AtlModuleAddTermFunc",
    "AtlModuleGetClassObject",
    "AtlAxGetHost",
    "DllGetClassObject",
    "AtlUnmarshalPtr",
    "AtlModuleUnregisterServer",
    "AtlAxCreateDialogW",
    "AtlModuleRegisterClassObjects",
    "AtlModuleUpdateRegistryFromResourceD",
    "AtlDevModeW2A",
    "AtlAxDialogBoxA",
    "AtlUnadvise",
    "AtlFreeMarshalStream",
    "AtlComPtrAssign",
    "AtlModuleUnRegisterTypeLib",
    "DllCanUnloadNow",
    "AtlMarshalPtrInProc",
    "AtlAxCreateControlEx",
    "AtlAxAttachControl",
    "AtlIPersistPropertyBag_Save",
    "AtlModuleRegisterWndClassInfoW",
    "AtlRegisterClassCategoriesHelper",
    "AtlModuleRevokeClassObjects",
    "AtlPixelToHiMetric",
    "AtlAxDialogBoxW",
    "AtlCreateTargetDC"
  ],
  "atmpvcno.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "atrace.dll": [
    "INTERNAL__DebugAssert",
    "INTERNAL__FlushAsyncTrace",
    "INTERNAL__AsyncStringTrace",
    "INTERNAL__InitAsyncTrace",
    "INTERNAL__TermAsyncTrace",
    "INTERNAL__AsyncBinaryTrace",
    "INTERNAL__SetAsyncTraceParams"
  ],
  "audiosrv.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "authz.dll": [
    "AuthzAddSidsToContext",
    "AuthzFreeResourceManager",
    "AuthzFreeHandle",
    "AuthzInitializeContextFromToken",
    "AuthzAccessCheck",
    "AuthzInstallSecurityEventSource",
    "AuthziSourceAudit",
    "AuthziInitializeAuditParams",
    "AuthziFreeAuditEventType",
    "AuthzReportSecurityEvent",
    "AuthzUnregisterSecurityEventSource",
    "AuthziModifyAuditQueue",
    "AuthziSetAuditPolicy",
    "AuthzFreeContext",
    "AuthziModifyAuditEventType",
    "AuthzInitializeContextFromSid",
    "AuthzReportSecurityEventFromParams",
    "AuthziModifyAuditEvent",
    "AuthziAllocateAuditParams",
    "AuthzGetInformationFromContext",
    "AuthziInitializeAuditParamsWithRM",
    "AuthzInitializeResourceManager",
    "AuthzUninstallSecurityEventSource",
    "AuthziInitializeAuditQueue",
    "AuthziLogAuditEvent",
    "AuthzEnumerateSecurityEventSources",
    "AuthzFreeAuditEvent",
    "AuthzInitializeContextFromAuthzContext",
    "AuthziFreeAuditQueue",
    "AuthziQueryAuditPolicy",
    "AuthziInitializeAuditEventType",
    "AuthzOpenObjectAudit",
    "AuthzCachedAccessCheck",
    "AuthzRegisterSecurityEventSource",
    "AuthziInitializeAuditEvent",
    "AuthziFreeAuditParams",
    "AuthzInitializeObjectAccessAuditEvent",
    "AuthziInitializeAuditParamsFromArray"
  ],
  "autodisc.dll": [
    "AddEmailToAutoComplete",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllInstall",
    "DllRegisterServer",
    "AutoDiscoverAndOpenEmail",
    "DllUnregisterServer"
  ],
  "avicap32.dll": [
    "capCreateCaptureWindowA",
    "AppCleanup",
    "capCreateCaptureWindowW",
    "capGetDriverDescriptionA",
    "capGetDriverDescriptionW",
    "videoThunk32"
  ],
  "avifil32.dll": [
    "AVIFileOpenW",
    "AVIStreamCreate",
    "AVIFileCreateStream",
    "AVIStreamBeginStreaming",
    "AVIStreamReadData",
    "AVIMakeFileFromStreams",
    "AVISave",
    "AVIStreamGetFrameOpen",
    "AVIFileInfoW",
    "AVIStreamTimeToSample",
    "AVIFileEndRecord",
    "EditStreamSetInfoA",
    "EditStreamSetNameA",
    "AVIMakeCompressedStream",
    "AVIStreamGetFrame",
    "AVIStreamOpenFromFileW",
    "AVISaveVW",
    "EditStreamSetNameW",
    "EditStreamPaste",
    "AVIFileOpenA",
    "AVIBuildFilterW",
    "IID_IAVIEditStream",
    "AVIStreamSetFormat",
    "AVIGetFromClipboard",
    "AVIFileCreateStreamW",
    "AVIStreamWriteData",
    "AVIStreamInfoW",
    "AVIStreamWrite",
    "AVISaveV",
    "IID_IGetFrame",
    "AVIFileRelease",
    "AVIFileInfoA",
    "AVISaveW",
    "AVIStreamGetFrameClose",
    "AVIStreamLength",
    "AVIStreamFindSample",
    "AVIStreamRelease",
    "AVIFileAddRef",
    "AVIMakeStreamFromClipboard",
    "AVIStreamStart",
    "CreateEditableStream",
    "EditStreamCopy",
    "AVISaveVA",
    "AVIFileOpen",
    "AVIClearClipboard",
    "AVIStreamEndStreaming",
    "AVIStreamOpenFromFile",
    "AVIStreamOpenFromFileA",
    "AVIBuildFilter",
    "AVIFileReadData",
    "AVIPutFileOnClipboard",
    "AVIFileWriteData",
    "AVIBuildFilterA",
    "IID_IAVIStream",
    "AVISaveOptions",
    "DllGetClassObject",
    "EditStreamCut",
    "AVIStreamReadFormat",
    "AVIStreamInfoA",
    "AVIFileInit",
    "EditStreamClone",
    "AVIFileCreateStreamA",
    "AVIStreamInfo",
    "AVIFileGetStream",
    "EditStreamSetInfo",
    "AVIStreamAddRef",
    "DllCanUnloadNow",
    "AVIStreamRead",
    "IID_IAVIFile",
    "AVIFileExit",
    "AVIFileInfo",
    "EditStreamSetName",
    "EditStreamSetInfoW",
    "AVIStreamSampleToTime",
    "AVISaveOptionsFree",
    "AVISaveA"
  ],
  "avmeter.dll": [
    "_CustomControlInfoA@4",
    "_TrackMeter_WndProc@16",
    "_TrackMeter_Style@8",
    "_TrackMeter_SizeToText@16"
  ],
  "avtapi.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "avwav.dll": [
    "_AcmConvertGetSizeSrc@8",
    "_AcmDriverUnload@8",
    "_AcmFormatGetSizeMax@4",
    "_WavFormatBytesToMilleseconds@8",
    "_WavInCallback@16",
    "_WavOutSetVolume@12",
    "_WavFormatSpeedAdjust@12",
    "WavMixerGetLevel",
    "_WavCopy@28",
    "WavMixerSupportsLevel",
    "_AcmDriverLoad@24",
    "WavInGetIdByName",
    "_AcmTerm@4",
    "_WavOutSetPitch@8",
    "_WavOutSupportsSpeed@8",
    "_WavFormatIsValid@4",
    "_WavInGetName@16",
    "WavClose",
    "_AWavSetVolume@16",
    "_WavSetSpeed@16",
    "_AWavGetOutputDevice@4",
    "_WavGetFormat@8",
    "WavMixerGetVolume",
    "_WavOutStop@8",
    "_WavOutSupportsPitch@8",
    "_WavOutGetSpeed@4",
    "_WavInRecord@12",
    "_WavWriteFormatRecord@12",
    "_WavGetVolume@12",
    "_AcmInit@12",
    "_WavOutTerm@8",
    "_AWavSupportsVolume@16",
    "_AWavStop@4",
    "_WavFormatGetSize@4",
    "WavMixerTerm",
    "_WavOutGetName@16",
    "_WavOutSupportsFormat@12",
    "_StreamIOProc@16",
    "WavMixerSetVolume",
    "_WavRead@12",
    "_WavOutGetId@4",
    "_WavGetOutputDevice@4",
    "_WavOutFormatSuggest@16",
    "_WavOutGetState@4",
    "_WavSetVolume@16",
    "_WavInDeviceIsOpen@4",
    "WavInit",
    "_WavInGetId@4",
    "WavOutGetIdByName",
    "WavRecord",
    "_WavOutPause@4",
    "_AWavGetSpeed@12",
    "_AcmConvert@24",
    "_WavOutSetSpeed@8",
    "_WavOutResume@4",
    "_WavInOpen@32",
    "_AWavGetState@4",
    "_WavNotify@16",
    "_AWavGetPosition@4",
    "_WavOutIsSynchronous@8",
    "_AWavOpen@20",
    "_AWavGetLength@4",
    "_AWavSetPosition@8",
    "_WavPlayEx@24",
    "_AcmConvertInit@20",
    "_WavGetLength@4",
    "_WavOutClose@8",
    "_WavSupportsSpeed@16",
    "_WavInGetPosition@4",
    "_WavOutCallback@16",
    "_WavPlaySound@32",
    "_WavGetPosition@4",
    "_WavOutPlay@12",
    "_AWavPlayEx@24",
    "_AcmFormatGetText@20",
    "_WavFormatAlloc@4",
    "WavMixerSupportsVolume",
    "_WavInSupportsFormat@12",
    "_WavFormatDup@4",
    "_WavFormatVoxadpcm@8",
    "_WavInGetDeviceCount@0",
    "_WavFormatMillesecondsToBytes@8",
    "_WavOutSupportsVolume@8",
    "_WavOutGetVolume@8",
    "_WavSetChunks@16",
    "_WavReadFormatPlay@12",
    "_AWavCopy@28",
    "_WavGetState@4",
    "_WavSetLength@8",
    "_WavOutDeviceIsOpen@4",
    "_AWavGetChunks@16",
    "_AWavSupportsSpeed@16",
    "_AcmFormatChooseEx@20",
    "_WavGetInputDevice@4",
    "_WavOutGetDeviceCount@0",
    "_AcmConvertTerm@4",
    "_AWavGetFormat@8",
    "_WavFormatCmp@8",
    "_WavFormatFree@4",
    "_WavOutOpen@32",
    "_WavSendMessage@16",
    "_AWavSetChunks@16",
    "_WavSetFormat@12",
    "_WavFormatCopy@8",
    "WavMixerInit",
    "_AWavClose@4",
    "WavStop",
    "_AWavGetInputDevice@4",
    "_WavInGetState@4",
    "_WavInFormatSuggest@16",
    "_WavCalcChunkSize@12",
    "_WavFormatMulaw@8",
    "_WavSeek@12",
    "_WavFormatDump@4",
    "_AWavChooseFormat@16",
    "_AWavSetSpeed@16",
    "_AWavGetVolume@12",
    "_WavChooseFormat@16",
    "WavPlay",
    "_WavInTerm@8",
    "_WavOutGetPosition@4",
    "_WavWrite@12",
    "WavOpen",
    "_WavFormatAlaw@8",
    "_WavSupportsVolume@16",
    "_WavRecordEx@24",
    "_WavGetChunks@16",
    "_AcmConvertGetSizeDst@8",
    "_WavOutGetPitch@4",
    "_WavGetSpeed@12",
    "_AWavSetFormat@12",
    "_AcmFormatSuggestEx@28",
    "_WavInClose@8",
    "_WavInStop@8",
    "_WavSetPosition@8",
    "WavTerm",
    "_WavFormatPcm@16"
  ],
  "azroles.dll": [
    "AzApplicationClose",
    "AzOperationDelete",
    "AzInitializeContextFromToken",
    "AzScopeCreate",
    "AzRoleOpen",
    "AzSetProperty",
    "AzRemovePropertyItem",
    "AzFreeMemory",
    "AzApplicationOpen",
    "AzScopeOpen",
    "AzTaskEnum",
    "AzApplicationDelete",
    "AzGroupEnum",
    "AzOperationOpen",
    "AzContextGetAssignedScopesPage",
    "DllRegisterServer",
    "AzOperationCreate",
    "AzRoleCreate",
    "AzAddPropertyItem",
    "AzUpdateCache",
    "AzInitializeContextFromName",
    "AzTaskCreate",
    "AzAuthorizationStoreDelete",
    "AzTaskDelete",
    "AzApplicationEnum",
    "AzCloseHandle",
    "AzGroupCreate",
    "AzGroupDelete",
    "AzOperationEnum",
    "AzApplicationCreate",
    "AzContextGetRoles",
    "AzGetProperty",
    "DllGetClassObject",
    "AzRoleEnum",
    "AzGroupOpen",
    "AzScopeEnum",
    "AzScopeDelete",
    "AzSubmit",
    "AzContextAccessCheck",
    "AzTaskOpen",
    "DllCanUnloadNow",
    "AzRoleDelete",
    "DllUnregisterServer",
    "AzInitialize"
  ],
  "basesrv.dll": [
    "BaseSetProcessCreateNotify",
    "BaseSrvNlsLogon",
    "BaseSrvNlsUpdateRegistryCache",
    "BaseSrvNewObDirAcls",
    "ServerDllInitialization"
  ],
  "batmeter.dll": [
    "CreateBatMeter",
    "PowerCapabilities",
    "DestroyBatMeter",
    "BatMeterCapabilities",
    "UpdateBatMeter"
  ],
  "batt.dll": [
    "BatteryClassCoInstaller",
    "BatteryClassInstall"
  ],
  "bidispl.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "bitsprx2.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "bitsprx3.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "bitsprx4.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "blackbox.dll": [
    "GetHWID",
    "const IBlackBox::`vftable'",
    "protected: virtual __thiscall IBlackBox::~IBlackBox(void)",
    "IBlackBox_CreateInstance",
    "protected: __thiscall IBlackBox::IBlackBox(void)",
    "DllRegisterServer",
    "DllMain",
    "DllUnregisterServer",
    "IBlackBox_CreateInstance2",
    "protected: __thiscall IBlackBox::IBlackBox(class IBlackBox const &)"
  ],
  "bootvid.dll": [
    "VidScreenToBufferBlt",
    "VidBufferToScreenBlt",
    "VidSetTextColor",
    "VidSetScrollRegion",
    "VidBitBlt",
    "VidCleanUp",
    "VidDisplayStringXY",
    "VidDisplayString",
    "VidResetDisplay",
    "VidInitialize",
    "VidSolidColorFill"
  ],
  "browselc.dll": "No exports",
  "browser.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals",
    "I_BrowserServerEnumForXactsrv"
  ],
  "browseui.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllInstall",
    "DllRegisterServer",
    "DllGetVersion",
    "DllUnregisterServer"
  ],
  "browsewm.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "bthci.dll": [
    "DllMain",
    "BluetoothClassInstaller"
  ],
  "bthserv.dll": [
    "ServiceMain"
  ],
  "btpanui.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "c_g18030.dll": [
    "BytesToUnicode",
    "NlsDllCodePageTranslation",
    "UnicodeToBytes"
  ],
  "c_is2022.dll": [
    "NlsDllCodePageTranslation"
  ],
  "c_iscii.dll": [
    "NlsDllCodePageTranslation"
  ],
  "cabinet.dll": [
    "FDICopy",
    "FDICreate",
    "FCIFlushCabinet",
    "FCIDestroy",
    "FCIAddFile",
    "DeleteExtractedFiles",
    "FCICreate",
    "FDITruncateCabinet",
    "FDIDestroy",
    "FDIIsCabinet",
    "DllGetVersion",
    "GetDllVersion",
    "Extract",
    "FCIFlushFolder"
  ],
  "cabview.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "Uninstall",
    "DllUnregisterServer"
  ],
  "camocx.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "capesnpn.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "cards.dll": [
    "cdtDraw",
    "cdtTerm",
    "cdtAnimate",
    "WEP",
    "cdtInit",
    "cdtDrawExt"
  ],
  "catsrv.dll": [
    "long __stdcall CancelWriteICR(struct IComponentRecords * *)",
    "void __stdcall ReleaseReadICR(struct IComponentRecords * *)",
    "CreateComponentLibraryTS",
    "long __stdcall GetReadICR(struct IComponentRecords * *)",
    "long __stdcall GetWriteICR(struct IComponentRecords * *)",
    "OpenComponentLibraryTS",
    "DllCanUnloadNow",
    "GetCatalogCRMClerk",
    "DllGetClassObject",
    "DllRegisterServer",
    "long __stdcall SaveWriteICR(struct IComponentRecords * *)",
    "DllUnregisterServer"
  ],
  "catsrvps.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "catsrvut.dll": [
    "FindAssemblyModulesW",
    "public: class CCom98Component & __thiscall CCom98Component::operator=(class CCom98Component const &)",
    "const CCom98Component::`vftable'",
    "RunMTSToCom",
    "public: class CComPlusMethod & __thiscall CComPlusMethod::operator=(class CComPlusMethod const &)",
    "public: virtual __thiscall CComPlusComponent::~CComPlusComponent(void)",
    "ManagedRequestW",
    "public: class CComPlusInterface & __thiscall CComPlusInterface::operator=(class CComPlusInterface const &)",
    "public: class CComPlusTypelib & __thiscall CComPlusTypelib::operator=(class CComPlusTypelib const &)",
    "public: class CCom98Dll & __thiscall CCom98Dll::operator=(class CCom98Dll const &)",
    "public: __thiscall CCom98Component::CCom98Component(class CCom98Component const &)",
    "EntryPointDllRegSvrW",
    "public: __thiscall CCom98Interface::CCom98Interface(class CCom98Interface const &)",
    "const CCom98Object::`vftable'",
    "public: __thiscall CComPlusMethod::CComPlusMethod(class CComPlusMethod const &)",
    "public: class CCom98Method & __thiscall CCom98Method::operator=(class CCom98Method const &)",
    "const CComPlusMethod::`vftable'",
    "StartMTSTOCOM",
    "DllRegisterServer",
    "public: __thiscall CCom98Object::CCom98Object(class CCom98Object const &)",
    "const CComPlusInterface::`vftable'",
    "RegDBBackup",
    "public: class CCom98Interface & __thiscall CCom98Interface::operator=(class CCom98Interface const &)",
    "const CComPlusComponent::`vftable'",
    "public: class CCom98Object & __thiscall CCom98Object::operator=(class CCom98Object const &)",
    "public: __thiscall CComPlusComponent::CComPlusComponent(class CComPlusComponent const &)",
    "DllGetClassObject",
    "CGMIsAdministrator",
    "RegDBRestore",
    "const CCom98Interface::`vftable'",
    "public: class CComPlusComponent & __thiscall CComPlusComponent::operator=(class CComPlusComponent const &)",
    "const CCom98Method::`vftable'",
    "LoadLibraryOnUserDllW",
    "public: __thiscall CCom98Method::CCom98Method(class CCom98Method const &)",
    "RegisterUserDllW",
    "public: __thiscall CComPlusObject::CComPlusObject(class CComPlusObject const &)",
    "public: virtual __thiscall CComPlusInterface::~CComPlusInterface(void)",
    "SysprepComplus2",
    "public: struct ITypeLib * __thiscall CComPlusTypelib::GetITypeLib(void)",
    "EntryPointDllGetClassObjW",
    "EntryPointDllUnRegSvrW",
    "public: class CComPlusObject & __thiscall CComPlusObject::operator=(class CComPlusObject const &)",
    "SysprepComplus",
    "DllCanUnloadNow",
    "public: __thiscall CComPlusInterface::CComPlusInterface(class CComPlusInterface const &)",
    "WinlogonHandlePendingInfOperations",
    "COMPlusUninstallActionW",
    "QueryUserDllW",
    "const CComPlusObject::`vftable'",
    "DllUnregisterServer"
  ],
  "ccfgnt.dll": [
    "IcfgNeedModem",
    "IcfgRemoveGlobalDNS",
    "InetSetAutodialAddress",
    "IcfgIsFileSharingTurnedOn",
    "IcfgStartServices",
    "IcfgTurnOffFileSharing",
    "IcfgIsGlobalDNS",
    "InetGetAutodial",
    "IcfgNeedInetComponents",
    "InetSetAutodial",
    "IcfgSetInstallSourcePath",
    "IcfgInstallModem",
    "IcfgGetLastInstallErrorText",
    "InetGetSupportedPlatform",
    "IcfgInstallInetComponents"
  ],
  "cdfview.dll": [
    "OpenChannel",
    "ParseDesktopComponent",
    "SubscribeToCDF",
    "DllCanUnloadNow",
    "Subscribe",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "cdm.dll": [
    "OpenCDMContext",
    "DownloadGetUpdatedFiles",
    "FindMatchingDriver",
    "DownloadUpdatedFiles",
    "DetFilesDownloaded",
    "QueryDetectionFiles",
    "DownloadIsInternetAvailable",
    "CloseCDMContext",
    "LogDriverNotFound",
    "OpenCDMContextEx",
    "CancelCDMOperation"
  ],
  "cdmodem.dll": [
    "CdOpen",
    "CdIoControl",
    "CdClose"
  ],
  "cdosys.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "certcli.dll": [
    "CAGetCertTypeExpiration",
    "CAEnumFirstCA",
    "CAOIDGetProperty",
    "CAGetCASecurity",
    "CAInstallDefaultCertType",
    "CAUpdateCertType",
    "CACloseCA",
    "CACertTypeSetSecurity",
    "CAGetCertTypeKeySpec",
    "CASetCertTypeProperty",
    "CASetCAFlags",
    "GetProxyDllInfo",
    "CAEnumNextCA",
    "CACountCertTypes",
    "CAOIDFreeLdapURL",
    "CASetCertTypeFlags",
    "CACertTypeRegisterQuery",
    "CASetCertTypeExpiration",
    "CAGetCertTypeFlagsEx",
    "CAFreeCertTypeProperty",
    "CASetCAProperty",
    "DllCanUnloadNow",
    "CACreateAutoEnrollmentObjectEx",
    "CACloneCertType",
    "CASetCertTypePropertyEx",
    "CAEnumCertTypesForCA",
    "CAEnumCertTypesForCAEx",
    "CASetCertTypeFlagsEx",
    "CAFindByName",
    "CAFindByIssuerDN",
    "CAGetCAFlags",
    "CACertTypeQuery",
    "CAIsCertTypeCurrent",
    "CAOIDFreeProperty",
    "CAGetCertTypeExtensionsEx",
    "CADeleteCA",
    "CACertTypeAccessCheck",
    "DllGetClassObject",
    "CASetCACertificate",
    "CACertTypeAccessCheckEx",
    "CAGetCertTypeProperty",
    "CAGetCertTypePropertyEx",
    "CAAccessCheck",
    "DllInstall",
    "CAGetCACertificate",
    "CAOIDDelete",
    "DllUnregisterServer",
    "CAGetCertTypeExtensions",
    "CAGetDN",
    "CACreateLocalAutoEnrollmentObject",
    "CASetCertTypeKeySpec",
    "CASetCASecurity",
    "CADeleteCertType",
    "CACreateNewCA",
    "CACertTypeUnregisterQuery",
    "CAOIDSetProperty",
    "CACertTypeGetSecurity",
    "CARemoveCACertificateType",
    "CAEnumNextCertType",
    "CAGetCAExpiration",
    "CAGetCAProperty",
    "CAGetCertTypeFlags",
    "CACloseCertType",
    "CASetCAExpiration",
    "CADeleteLocalAutoEnrollmentObject",
    "CAOIDAdd",
    "CAFreeCAProperty",
    "CASetCertTypeExtension",
    "CACreateCertType",
    "CAFindCertTypeByName",
    "CAEnumCertTypesEx",
    "CAAccessCheckEx",
    "CAFreeCertTypeExtensions",
    "DllRegisterServer",
    "CAAddCACertificateType",
    "CAUpdateCA",
    "CACountCAs",
    "CAOIDCreateNew",
    "CAOIDGetLdapURL",
    "CAEnumCertTypes",
    "CAFindByCertType"
  ],
  "certmgr.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllInstall",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "cewmdm.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "cfgbkend.dll": [
    "IID_ICfgComp",
    "IID_ISettingsComp",
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "CLSID_CfgComp",
    "DllUnregisterServer"
  ],
  "cfgmgr32.dll": [
    "CM_Get_DevNode_Registry_PropertyA",
    "CM_Invert_Range_List",
    "CM_Remove_SubTree_Ex",
    "CM_Move_DevNode",
    "CMP_WaitServicesAvailable",
    "CM_Find_Range",
    "CM_Set_HW_Prof_FlagsA",
    "CM_Get_Resource_Conflict_DetailsW",
    "CM_Get_Device_Interface_AliasW",
    "CM_Get_Device_Interface_List_ExW",
    "CM_Get_DevNode_Status_Ex",
    "CM_Enable_DevNode_Ex",
    "CMP_UnregisterNotification",
    "CM_Set_DevNode_Registry_Property_ExW",
    "CM_Free_Resource_Conflict_Handle",
    "CM_Get_Class_Key_Name_ExW",
    "CM_Merge_Range_List",
    "CM_Get_HW_Prof_FlagsW",
    "CM_Intersect_Range_List",
    "CM_Modify_Res_Des",
    "CM_Free_Log_Conf_Handle",
    "CM_Get_Sibling",
    "CM_Create_DevNodeA",
    "CM_Get_Device_ID_List_Size_ExW",
    "CM_Disable_DevNode_Ex",
    "CM_First_Range",
    "CM_Open_DevNode_Key_Ex",
    "CM_Get_Class_NameA",
    "CM_Get_Device_ID_List_Size_ExA",
    "CM_Locate_DevNode_ExA",
    "CM_Run_Detection",
    "CM_Add_ID_ExW",
    "CM_Get_Sibling_Ex",
    "CM_Set_DevNode_Registry_PropertyW",
    "CM_Delete_Range",
    "CM_Get_Log_Conf_Priority_Ex",
    "CM_Add_Res_Des_Ex",
    "CM_Run_Detection_Ex",
    "CM_Connect_MachineW",
    "CM_Query_Remove_SubTree",
    "CM_Setup_DevNode_Ex",
    "CM_Create_DevNodeW",
    "CM_Create_Range_List",
    "CM_Locate_DevNodeW",
    "CM_Get_Res_Des_Data_Size",
    "CM_Get_Device_IDA",
    "CM_Request_Eject_PC",
    "CM_Reenumerate_DevNode",
    "CM_Get_Hardware_Profile_Info_ExA",
    "CM_Get_Child_Ex",
    "CM_Get_Device_ID_ExW",
    "CM_Free_Range_List",
    "CM_Get_Device_ID_ListW",
    "CM_Set_HW_Prof_Flags_ExA",
    "CM_Get_Next_Log_Conf",
    "CM_Query_Remove_SubTree_Ex",
    "CM_Set_Class_Registry_PropertyA",
    "CM_Get_Depth",
    "CM_Get_Next_Log_Conf_Ex",
    "CM_Set_DevNode_Problem",
    "CM_Unregister_Device_InterfaceW",
    "CM_Get_First_Log_Conf",
    "CM_Delete_Class_Key",
    "CM_Get_Log_Conf_Priority",
    "CM_Get_Device_Interface_List_Size_ExA",
    "CM_Set_HW_Prof_FlagsW",
    "CM_Create_DevNode_ExW",
    "CM_Get_Class_NameW",
    "CM_Set_DevNode_Registry_Property_ExA",
    "CM_Unregister_Device_InterfaceA",
    "CM_Get_Device_ID_List_ExW",
    "CM_Get_Class_Key_Name_ExA",
    "CM_Register_Device_InterfaceW",
    "CM_Register_Device_Driver_Ex",
    "CM_Set_Class_Registry_PropertyW",
    "CM_Set_DevNode_Registry_PropertyA",
    "CM_Get_Class_Key_NameW",
    "CM_Get_Device_ID_ListA",
    "CM_Remove_SubTree",
    "CM_Set_HW_Prof_Flags_ExW",
    "CM_Get_Next_Res_Des",
    "CM_Free_Res_Des_Ex",
    "CM_Get_Device_ID_Size_Ex",
    "CM_Get_Device_IDW",
    "CM_Set_DevNode_Problem_Ex",
    "CM_Get_Hardware_Profile_InfoA",
    "CM_Open_Class_Key_ExW",
    "CM_Is_Dock_Station_Present",
    "CM_Reenumerate_DevNode_Ex",
    "CM_Free_Res_Des",
    "CM_Get_Device_Interface_ListA",
    "CM_Get_Version",
    "CM_Unregister_Device_Interface_ExA",
    "CM_Disable_DevNode",
    "CM_Get_HW_Prof_FlagsA",
    "CM_Get_Class_Name_ExA",
    "CM_Enable_DevNode",
    "CM_Create_DevNode_ExA",
    "CM_Is_Dock_Station_Present_Ex",
    "CM_Get_Class_Registry_PropertyA",
    "CM_Get_Hardware_Profile_InfoW",
    "CM_Set_HW_Prof",
    "CM_Delete_DevNode_Key",
    "CM_Register_Device_Driver",
    "CM_Register_Device_Interface_ExA",
    "CM_Open_Class_KeyW",
    "CM_Get_Child",
    "CM_Get_Global_State_Ex",
    "CM_Disconnect_Machine",
    "CM_Query_And_Remove_SubTreeA",
    "CM_Add_IDA",
    "CM_Add_Res_Des",
    "CMP_Report_LogOn",
    "CM_Delete_DevNode_Key_Ex",
    "CM_Get_DevNode_Registry_PropertyW",
    "CM_Get_Parent_Ex",
    "CM_Query_Arbitrator_Free_Data_Ex",
    "CM_Setup_DevNode",
    "CM_Get_Hardware_Profile_Info_ExW",
    "CM_Get_Depth_Ex",
    "CM_Query_Resource_Conflict_List",
    "CM_Query_Arbitrator_Free_Data",
    "CM_Dup_Range_List",
    "CM_Get_Next_Res_Des_Ex",
    "CM_Get_Device_Interface_AliasA",
    "CM_Detect_Resource_Conflict_Ex",
    "CM_Locate_DevNodeA",
    "CM_Enumerate_Enumerators_ExA",
    "CM_Query_And_Remove_SubTree_ExA",
    "CM_Get_Device_Interface_Alias_ExA",
    "CM_Open_Class_Key_ExA",
    "CM_Free_Res_Des_Handle",
    "CM_Get_DevNode_Registry_Property_ExA",
    "CM_Get_DevNode_Registry_Property_ExW",
    "CM_Get_DevNode_Status",
    "CMP_Init_Detection",
    "CM_Add_Empty_Log_Conf_Ex",
    "CM_Get_Device_Interface_Alias_ExW",
    "CM_Get_Class_Key_NameA",
    "CM_Unregister_Device_Interface_ExW",
    "CM_Get_Device_Interface_List_Size_ExW",
    "CMP_WaitNoPendingInstallEvents",
    "CM_Get_Resource_Conflict_Count",
    "CM_Uninstall_DevNode_Ex",
    "CM_Enumerate_Classes",
    "CM_Get_Device_ID_ExA",
    "CM_Free_Log_Conf",
    "CMP_RegisterNotification",
    "CM_Request_Eject_PC_Ex",
    "CM_Open_Class_KeyA",
    "CM_Get_Resource_Conflict_DetailsA",
    "CM_Add_Range",
    "CM_Get_Device_Interface_ListW",
    "CM_Next_Range",
    "CM_Get_Device_ID_List_ExA",
    "CM_Enumerate_EnumeratorsA",
    "CM_Get_Res_Des_Data_Ex",
    "CM_Enumerate_Classes_Ex",
    "CM_Delete_Class_Key_Ex",
    "CM_Get_HW_Prof_Flags_ExA",
    "CM_Add_IDW",
    "CM_Enumerate_EnumeratorsW",
    "CM_Test_Range_Available",
    "CM_Set_HW_Prof_Ex",
    "CM_Move_DevNode_Ex",
    "CM_Get_Class_Registry_PropertyW",
    "CM_Get_Device_ID_Size",
    "CM_Get_Version_Ex",
    "CM_Connect_MachineA",
    "CM_Get_HW_Prof_Flags_ExW",
    "CM_Enumerate_Enumerators_ExW",
    "CM_Query_Arbitrator_Free_Size",
    "CM_Detect_Resource_Conflict",
    "CM_Get_First_Log_Conf_Ex",
    "CM_Add_Empty_Log_Conf",
    "CM_Get_Device_ID_List_SizeW",
    "CM_Get_Res_Des_Data",
    "CM_Query_And_Remove_SubTreeW",
    "CM_Get_Device_Interface_List_ExA",
    "CM_Get_Res_Des_Data_Size_Ex",
    "CM_Get_Class_Name_ExW",
    "CM_Free_Log_Conf_Ex",
    "CM_Get_Device_Interface_List_SizeA",
    "CM_Uninstall_DevNode",
    "CM_Get_Parent",
    "CM_Get_Device_Interface_List_SizeW",
    "CM_Locate_DevNode_ExW",
    "CM_Register_Device_Interface_ExW",
    "CM_Get_Global_State",
    "CM_Query_And_Remove_SubTree_ExW",
    "CM_Add_ID_ExA",
    "CM_Query_Arbitrator_Free_Size_Ex",
    "CM_Get_Device_ID_List_SizeA",
    "CM_Modify_Res_Des_Ex",
    "CM_Open_DevNode_Key",
    "CM_Register_Device_InterfaceA"
  ],
  "chsbrkr.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "chtbrkr.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "ciadmin.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "cic.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "ciodm.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "clb.dll": [
    "ClbStyleW",
    "ClbSetColumnWidths",
    "CustomControlInfoW",
    "ClbAddData",
    "ClbWndProc"
  ],
  "clbcatex.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "clbcatq.dll": [
    "long __stdcall OpenComponentLibraryTS(unsigned short const *,long,struct IComponentRecords * *)",
    "UpdateFromAppChange",
    "CreateComponentLibraryEx",
    "GetCatalogObject",
    "OpenComponentLibraryOnMemEx",
    "SetSetupOpen",
    "GetComputerObject",
    "CLSIDFromStringByBitness",
    "long __stdcall GetStgDatabase(class StgDatabase * *)",
    "InprocServer32FromString",
    "GetCatalogObject2",
    "ActivatorUpdateForIsRouterChanges",
    "DeleteAllActivatorsForClsid",
    "DllRegisterServer",
    "CheckMemoryGates",
    "ServerGetApplicationType",
    "CoRegCleanup",
    "GetSimpleTableDispenser",
    "OpenComponentLibraryEx",
    "DllUnregisterServer",
    "ComPlusMigrate",
    "GetGlobalBabyJITEnabled",
    "UpdateFromComponentChange",
    "long __cdecl PostError(long,...)",
    "long __stdcall DataConvert(unsigned short,unsigned short,unsigned long,unsigned long *,void *,void *,unsigned long,unsigned long,unsigned long *,unsigned char,unsigned char,unsigned long)",
    "void __stdcall InitErrors(unsigned long *)",
    "DllGetClassObject",
    "DowngradeAPL",
    "SetSetupSave",
    "void __stdcall ShutDownDataConversion(void)",
    "long __stdcall GetDataConversion(struct IDataConvert * *)",
    "class CGetDataConversion * __stdcall GetDataConvertObject(void)",
    "void __stdcall DestroyStgDatabase(class StgDatabase *)",
    "DllCanUnloadNow",
    "long __stdcall CreateComponentLibraryTS(unsigned short const *,long,struct IComponentRecords * *)",
    "long __stdcall GetPropValue(unsigned short,long *,void *,int,int *,struct tagDBPROP &)",
    "OpenComponentLibraryOnStreamEx",
    "SetupOpen",
    "GetDllType",
    "SetupSave",
    "void __stdcall ClearList(class CStructArray *)"
  ],
  "cliconfg.dll": [
    "OnInitDialogMain",
    "ClientConfigureAddEdit",
    "CPlApplet"
  ],
  "clusapi.dll": [
    "CloseClusterNotifyPort",
    "ClusterNetworkEnum",
    "MoveClusterGroup",
    "SetClusterName",
    "OfflineClusterResource",
    "ClusterRegCloseKey",
    "ClusterNetworkGetEnumCount",
    "CloseClusterNetwork",
    "ClusterResourceGetEnumCount",
    "ClusterResourceCloseEnum",
    "ClusterControl",
    "CreateClusterNotifyPort",
    "ClusterRegEnumValue",
    "EvictClusterNode",
    "CreateClusterGroup",
    "CloseCluster",
    "OfflineClusterGroup",
    "ClusterCloseEnum",
    "GetClusterNetworkKey",
    "GetClusterNodeKey",
    "CreateClusterResource",
    "GetClusterNetworkId",
    "GetClusterNotify",
    "ResumeClusterNode",
    "ClusterRegDeleteKey",
    "OpenClusterGroup",
    "GetClusterGroupState",
    "OnlineClusterGroup",
    "GetClusterKey",
    "OpenClusterNetwork",
    "ClusterNetworkCloseEnum",
    "ClusterResourceTypeControl",
    "ClusterNetworkOpenEnum",
    "ClusterRegQueryValue",
    "OpenClusterResource",
    "ClusterResourceTypeEnum",
    "CloseClusterResource",
    "SetClusterServiceAccountPassword",
    "DeleteClusterResource",
    "GetClusterNodeId",
    "AddClusterResourceDependency",
    "ClusterRegSetKeySecurity",
    "DeleteClusterResourceType",
    "RegisterClusterNotify",
    "RemoveClusterResourceDependency",
    "RemoveClusterResourceNode",
    "ClusterResourceControl",
    "GetClusterResourceKey",
    "ChangeClusterResourceGroup",
    "GetClusterQuorumResource",
    "SetClusterGroupName",
    "ClusterEnum",
    "SetClusterNetworkPriorityOrder",
    "GetClusterResourceTypeKey",
    "GetClusterNetInterfaceState",
    "GetClusterFromResource",
    "ClusterGroupControl",
    "ClusterRegCreateKey",
    "ClusterResourceOpenEnum",
    "ClusterNodeControl",
    "ClusterResourceTypeCloseEnum",
    "ClusterRegOpenKey",
    "ClusterOpenEnum",
    "ClusterNodeGetEnumCount",
    "ClusterRegGetKeySecurity",
    "ClusterRegQueryInfoKey",
    "GetClusterInformation",
    "DeleteClusterGroup",
    "GetClusterResourceNetworkName",
    "SetClusterNetworkName",
    "ClusterRegDeleteValue",
    "ClusterNetworkControl",
    "ClusterNetInterfaceControl",
    "ClusterResourceTypeGetEnumCount",
    "BackupClusterDatabase",
    "ClusterGroupGetEnumCount",
    "AddClusterResourceNode",
    "ClusterGroupEnum",
    "GetClusterGroupKey",
    "GetClusterNodeState",
    "ClusterRegSetValue",
    "EvictClusterNodeEx",
    "OpenClusterNetInterface",
    "OnlineClusterResource",
    "GetClusterFromNetwork",
    "ClusterNodeEnum",
    "ClusterRegEnumKey",
    "GetClusterResourceState",
    "RestoreClusterDatabase",
    "OpenCluster",
    "SetClusterGroupNodeList",
    "CreateClusterResourceType",
    "PauseClusterNode",
    "CloseClusterGroup",
    "ClusterGetEnumCount",
    "GetNodeClusterState",
    "SetClusterQuorumResource",
    "ClusterResourceTypeOpenEnum",
    "CloseClusterNode",
    "GetClusterNetInterfaceKey",
    "CloseClusterNetInterface",
    "ClusterNodeCloseEnum",
    "CanResourceBeDependent",
    "ClusterNodeOpenEnum",
    "GetClusterNetworkState",
    "OpenClusterNode",
    "GetClusterFromNode",
    "ClusterResourceEnum",
    "GetClusterNetInterface",
    "ClusterGroupCloseEnum",
    "ClusterGroupOpenEnum",
    "GetClusterFromGroup",
    "GetClusterFromNetInterface",
    "SetClusterResourceName",
    "FailClusterResource"
  ],
  "cmcfg32.dll": [
    "CMConfigEx",
    "CMConfig",
    "_CMConfig@8",
    "CmstpExtensionProc"
  ],
  "cmdial32.dll": [
    "_AutoDialFunc@16",
    "RasCustomDialDlg",
    "RasCustomDeleteEntryNotify",
    "RasCustomDial",
    "CmCustomHangUp",
    "CmReConnect",
    "InetDialHandler",
    "CmCustomDialDlg",
    "_InetDialHandler@16",
    "RasCustomHangUp",
    "AutoDialFunc",
    "RasCustomEntryDlg"
  ],
  "cmpbk32.dll": [
    "PhoneBookGetPhoneDispA",
    "PhoneBookUnload",
    "PhoneBookGetRegionNameA",
    "PhoneBookMergeChanges",
    "PhoneBookGetCountryNameW",
    "PhoneBookGetPhoneType",
    "PhoneBookEnumNumbersWithRegionsZero",
    "PhoneBookMatchFilter",
    "PhoneBookCopyFilter",
    "PhoneBookGetPhoneDescA",
    "PhoneBookGetPhoneCanonicalA",
    "PhoneBookParseInfoA",
    "PhoneBookGetCountryId",
    "PhoneBookGetPhoneDUNA",
    "PhoneBookEnumRegions",
    "PhoneBookEnumCountries",
    "PhoneBookGetCountryNameA",
    "PhoneBookHasPhoneType",
    "PhoneBookGetCurrentCountryId",
    "PhoneBookFreeFilter",
    "PhoneBookLoad",
    "PhoneBookGetPhoneNonCanonicalA",
    "PhoneBookEnumNumbers"
  ],
  "cmprops.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "cmsetacl.dll": [
    "DllUnregisterServer",
    "DllRegisterServer"
  ],
  "cmutil.dll": [
    "CmLoadIconW",
    "public: char * __thiscall CIniA::GPPS(char const *,char const *,char const *)const",
    "protected: int __thiscall CIniW::CIniW_WriteEntryToReg(struct HKEY__ *,unsigned short const *,unsigned short const *,unsigned char const *,unsigned long,unsigned long)const",
    "public: unsigned short const * __thiscall CmLogFile::GetLogFilePath(void)",
    "CmEndOfStrA",
    "CmWinHelp",
    "UpdateFont",
    "CmIsSpaceA",
    "public: struct HINSTANCE__ * __thiscall CIniA::GetHInst(void)const",
    "CmAtolA",
    "CmStrStrA",
    "CmStrrchrW",
    "CmMoveMemory",
    "public: void __thiscall CIniW::SetPrimaryFile(unsigned short const *)",
    "CmLoadStringW",
    "public: int __thiscall CRandom::Generate(void)",
    "MakeBold",
    "public: unsigned short * __thiscall CIniW::LoadSection(unsigned short const *)const",
    "public: void __thiscall CmLogFile::Banner(void)",
    "CmLoadSmallIconA",
    "CmStrchrW",
    "CmStripPathAndExtA",
    "CmConvertRelativePathA",
    "CmLoadImage",
    "CmLoadImageW",
    "public: void __thiscall CIniW::Clear(void)",
    "public: void __thiscall CIniW::WPPS(unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: class CRandom & __thiscall CRandom::operator=(class CRandom const &)",
    "CmStrCatAllocA",
    "CmConvertRelativePathW",
    "public: long __thiscall CmLogFile::Init(struct HINSTANCE__ *,int,char const *)",
    "public: void __thiscall CIniA::SetReadICSData(int)",
    "public: void __thiscall CIniA::SetICSDataPath(char const *)",
    "CmStrCpyAllocA",
    "SzToWz",
    "CmStrchrA",
    "WzToSz",
    "public: char const * __thiscall CIniA::GetPrimaryRegPath(void)const",
    "public: void __thiscall CIniA::SetEntry(char const *)",
    "private: long __thiscall CmLogFile::Write(unsigned short *)",
    "public: unsigned short const * __thiscall CIniW::GetFile(void)const",
    "CmLoadIconA",
    "CmStrCatAllocW",
    "public: __thiscall CmLogFile::CmLogFile(void)",
    "protected: unsigned char * __thiscall CIniW::CIniW_GetEntryFromReg(struct HKEY__ *,unsigned short const *,unsigned short const *,unsigned long,unsigned long)const",
    "public: void __thiscall CIniA::SetFile(char const *)",
    "public: void __thiscall CmLogFile::Clear(int)",
    "public: long __thiscall CmLogFile::Init(struct HINSTANCE__ *,int,unsigned short const *)",
    "public: unsigned short const * __thiscall CIniW::GetRegPath(void)const",
    "protected: static void __stdcall CIniW::CIni_SetFile(unsigned short * *,unsigned short const *)",
    "CmParsePathA",
    "CmStripFileNameW",
    "CmLoadImageA",
    "CmFmtMsgW",
    "CmEndOfStrW",
    "public: void __thiscall CIniW::WPPI(unsigned short const *,unsigned short const *,unsigned long)",
    "public: __thiscall CIniA::CIniA(struct HINSTANCE__ *,char const *,char const *,char const *,char const *)",
    "GetOSVersion",
    "public: void __thiscall CIniW::SetWriteICSData(int)",
    "public: __thiscall CIniW::~CIniW(void)",
    "protected: char * __thiscall CIniA::LoadEntry(char const *)const",
    "CmStripPathAndExtW",
    "public: void __thiscall CIniW::SetICSDataPath(unsigned short const *)",
    "CmRealloc",
    "protected: int __thiscall CIniW::CIniW_DeleteEntryFromReg(struct HKEY__ *,unsigned short const *,unsigned short const *)const",
    "public: void __thiscall CIniW::SetEntryFromIdx(unsigned long)",
    "CmAtolW",
    "CmBuildFullPathFromRelativeA",
    "SzToWzWithAlloc",
    "public: void __thiscall CIniA::SetPrimaryRegPath(char const *)",
    "CmStrtokA",
    "public: void __thiscall CIniA::SetHInst(struct HINSTANCE__ *)",
    "CmStrtokW",
    "public: void __thiscall CIniW::SetReadICSData(int)",
    "public: void __thiscall CIniA::WPPB(char const *,char const *,int)",
    "public: void __thiscall CIniW::`default constructor closure'(void)",
    "protected: unsigned short * __thiscall CIniW::LoadEntry(unsigned short const *)const",
    "private: void __thiscall CmLogFile::FormatWrite(enum _CMLOG_ITEM,unsigned short *)",
    "public: void __thiscall CIniA::SetRegPath(char const *)",
    "public: __thiscall CIniW::CIniW(struct HINSTANCE__ *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: class CIniW & __thiscall CIniW::operator=(class CIniW const &)",
    "public: void __thiscall CIniA::SetSection(char const *)",
    "public: void __thiscall CIniW::SetRegPath(unsigned short const *)",
    "public: void __thiscall CIniW::WPPB(unsigned short const *,unsigned short const *,int)",
    "CmFmtMsgA",
    "CmStrCpyAllocW",
    "public: unsigned short const * __thiscall CIniW::GetPrimaryFile(void)const",
    "public: char * __thiscall CIniA::LoadSection(char const *)const",
    "public: char const * __thiscall CIniA::GetPrimaryFile(void)const",
    "public: long __thiscall CmLogFile::SetParams(int,unsigned long,unsigned short const *)",
    "GetOSBuildNumber",
    "public: void __thiscall CIniW::SetEntry(unsigned short const *)",
    "CmIsDigitA",
    "public: long __thiscall CmLogFile::DeInit(void)",
    "public: __thiscall CRandom::CRandom(void)",
    "CmLoadSmallIconW",
    "private: long __thiscall CmLogFile::CloseFile(void)",
    "public: char const * __thiscall CIniA::GetSection(void)const",
    "private: long __thiscall CmLogFile::OpenFile(void)",
    "protected: static void __stdcall CIniA::CIni_SetFile(char * *,char const *)",
    "public: void __thiscall CIniW::SetHInst(struct HINSTANCE__ *)",
    "CmStrrchrA",
    "CmStrTrimA",
    "public: unsigned short const * __thiscall CIniW::GetSection(void)const",
    "public: void __thiscall CRandom::Init(unsigned long)",
    "public: __thiscall CRandom::CRandom(unsigned int)",
    "protected: unsigned char * __thiscall CIniA::CIniA_GetEntryFromReg(struct HKEY__ *,char const *,char const *,unsigned long,unsigned long)const",
    "GetOSMajorVersion",
    "public: void __thiscall CIniA::WPPI(char const *,char const *,unsigned long)",
    "public: long __thiscall CmLogFile::Stop(void)",
    "public: void __thiscall CIniW::SetPrimaryRegPath(unsigned short const *)",
    "IsLogonAsSystem",
    "WzToSzWithAlloc",
    "public: int __thiscall CIniA::GPPB(char const *,char const *,int)const",
    "CmBuildFullPathFromRelativeW",
    "public: void __cdecl CmLogFile::Log(enum _CMLOG_ITEM,...)",
    "ReleaseBold",
    "IsFarEastNonOSR2Win95",
    "CmStrTrimW",
    "CmStripFileNameA",
    "protected: int __thiscall CIniA::CIniA_DeleteEntryFromReg(struct HKEY__ *,char const *,char const *)const",
    "public: void __thiscall CIniA::SetPrimaryFile(char const *)",
    "public: void __thiscall CIniA::SetWriteICSData(int)",
    "public: unsigned short * __thiscall CIniW::GPPS(unsigned short const *,unsigned short const *,unsigned short const *)const",
    "public: unsigned short const * __thiscall CIniW::GetPrimaryRegPath(void)const",
    "public: long __thiscall CmLogFile::Start(int)",
    "CmParsePathW",
    "public: int __thiscall CmLogFile::IsEnabled(void)",
    "public: __thiscall CIniA::~CIniA(void)",
    "public: void __thiscall CIniA::`default constructor closure'(void)",
    "CmStrStrW",
    "public: long __thiscall CmLogFile::SetParams(int,unsigned long,char const *)",
    "public: unsigned long __thiscall CIniW::GPPI(unsigned short const *,unsigned short const *,unsigned long)const",
    "public: char const * __thiscall CIniA::GetFile(void)const",
    "public: void __thiscall CIniA::SetEntryFromIdx(unsigned long)",
    "CmIsSpaceW",
    "CmFree",
    "CmIsDigitW",
    "public: __thiscall CmLogFile::~CmLogFile(void)",
    "public: void __thiscall CIniW::SetFile(unsigned short const *)",
    "CmMalloc",
    "protected: int __thiscall CIniA::CIniA_WriteEntryToReg(struct HKEY__ *,char const *,char const *,unsigned char const *,unsigned long,unsigned long)const",
    "public: void __thiscall CIniA::WPPS(char const *,char const *,char const *)",
    "public: struct HINSTANCE__ * __thiscall CIniW::GetHInst(void)const",
    "public: void __thiscall CIniA::Clear(void)",
    "public: unsigned long __thiscall CIniA::GPPI(char const *,char const *,unsigned long)const",
    "public: class CIniA & __thiscall CIniA::operator=(class CIniA const &)",
    "public: void __thiscall CIniW::SetSection(unsigned short const *)",
    "public: char const * __thiscall CIniA::GetRegPath(void)const",
    "public: class CmLogFile & __thiscall CmLogFile::operator=(class CmLogFile const &)",
    "CmLoadStringA",
    "public: int __thiscall CIniW::GPPB(unsigned short const *,unsigned short const *,int)const"
  ],
  "cnbjmon.dll": [
    "InitializePrintMonitor"
  ],
  "cnetcfg.dll": [
    "InetNeedModem",
    "InetNeedSystemComponents",
    "InetConfigSystem",
    "InetStartServices"
  ],
  "cnvfat.dll": [
    "ConvertFAT",
    "IsConversionAvailable"
  ],
  "colbact.dll": [
    "GetClassInfoForCurrentUser",
    "GetDefaultPartitionForCurrentUser",
    "PartitionAccessCheck",
    "DllGetClassObject",
    "DllRegisterServer",
    "GetDefaultPartitionForSid",
    "DllUnregisterServer"
  ],
  "comaddin.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "comcat.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "comctl32.dll": [
    "ImageList_DragEnter",
    "ImageList_GetImageCount",
    "MakeDragList",
    "ImageList_Draw",
    "ImageList_GetBkColor",
    "UninitializeFlatSB",
    "ImageList_GetDragImage",
    "DSA_DestroyCallback",
    "ImageList_GetImageRect",
    "ImageList_DragMove",
    "ImageList_Read",
    "ImageList_Remove",
    "DPA_DeletePtr",
    "ImageList_SetIconSize",
    "_TrackMouseEvent",
    "ImageList_GetImageInfo",
    "ImageList_ReplaceIcon",
    "ImageList_SetFilter",
    "DPA_Destroy",
    "ImageList_GetIconSize",
    "CreateToolbarEx",
    "CreateStatusWindow",
    "DSA_Create",
    "ImageList_AddIcon",
    "DPA_Sort",
    "CreateUpDownControl",
    "FlatSB_SetScrollProp",
    "AddMRUStringW",
    "FlatSB_ShowScrollBar",
    "CreatePropertySheetPage",
    "DPA_GetPtr",
    "ImageList_Write",
    "FlatSB_GetScrollProp",
    "DestroyPropertySheetPage",
    "InitCommonControlsEx",
    "ImageList_SetFlags",
    "ImageList_GetIcon",
    "CreatePropertySheetPageW",
    "ImageList_DrawEx",
    "Str_SetPtrW",
    "DPA_DestroyCallback",
    "InitializeFlatSB",
    "RemoveWindowSubclass",
    "InitCommonControls",
    "DrawStatusTextW",
    "ImageList_Add",
    "DSA_InsertItem",
    "ImageList_LoadImage",
    "DSA_DeleteAllItems",
    "FlatSB_EnableScrollBar",
    "ImageList_BeginDrag",
    "FlatSB_GetScrollRange",
    "ImageList_EndDrag",
    "ImageList_SetOverlayImage",
    "DrawInsert",
    "SetWindowSubclass",
    "DllInstall",
    "DPA_Search",
    "DSA_Destroy",
    "ImageList_Duplicate",
    "PropertySheet",
    "InitMUILanguage",
    "EnumMRUListW",
    "CreateToolbar",
    "DPA_SetPtr",
    "DPA_EnumCallback",
    "FreeMRUList",
    "CreateMRUListW",
    "CreateStatusWindowW",
    "DPA_Create",
    "DefSubclassProc",
    "FlatSB_GetScrollInfo",
    "FlatSB_SetScrollInfo",
    "PropertySheetW",
    "DPA_InsertPtr",
    "MenuHelp",
    "CreateMappedBitmap",
    "ImageList_GetFlags",
    "DPA_DeleteAllPtrs",
    "ImageList_SetImageCount",
    "ImageList_DrawIndirect",
    "DrawStatusText",
    "PropertySheetA",
    "ImageList_DragLeave",
    "ImageList_SetDragCursorImage",
    "FlatSB_GetScrollPos",
    "ImageList_LoadImageW",
    "ImageList_Merge",
    "ImageList_SetBkColor",
    "FlatSB_SetScrollPos",
    "DSA_GetItemPtr",
    "GetEffectiveClientRect",
    "ImageList_LoadImageA",
    "CreatePropertySheetPageA",
    "ImageList_AddMasked",
    "GetMUILanguage",
    "ImageList_Destroy",
    "CreateStatusWindowA",
    "ShowHideMenuCtl",
    "DllGetVersion",
    "ImageList_Replace",
    "ImageList_Create",
    "ImageList_DragShowNolock",
    "LBItemFromPt",
    "DrawStatusTextA",
    "ImageList_Copy",
    "FlatSB_SetScrollRange"
  ],
  "comdlg32.dll": [
    "PageSetupDlgW",
    "dwLBSubclass",
    "FindTextA",
    "ChooseColorA",
    "dwOKSubclass",
    "ReplaceTextA",
    "PrintDlgA",
    "GetOpenFileNameA",
    "ChooseColorW",
    "GetFileTitleW",
    "ChooseFontW",
    "PrintDlgExA",
    "WantArrows",
    "GetOpenFileNameW",
    "FindTextW",
    "GetFileTitleA",
    "CommDlgExtendedError",
    "GetSaveFileNameW",
    "Ssync_ANSI_UNICODE_Struct_For_WOW",
    "ChooseFontA",
    "LoadAlterBitmap",
    "PrintDlgW",
    "GetSaveFileNameA",
    "PrintDlgExW",
    "ReplaceTextW",
    "PageSetupDlgA"
  ],
  "compstui.dll": [
    "GetCPSUIUserData",
    "SetCPSUIUserData",
    "CommonPropertySheetUIW",
    "CommonPropertySheetUIA"
  ],
  "comrepl.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "comres.dll": [
    "COMResModuleInstance"
  ],
  "comsnap.dll": [
    "InstallDsExtension",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "comsvcs.dll": [
    "ComSvcsExceptionFilter",
    "CoEnterServiceDomain",
    "CoVerifyTrust",
    "GetObjectContext",
    "CoCreateActivity",
    "RegisterComEvents",
    "SafeRef",
    "CoLeaveServiceDomain",
    "DllRegisterServer",
    "DispManGetContext",
    "MTSCreateActivity",
    "MiniDumpW",
    "DllGetClassObject",
    "CoCreateStdTrustable",
    "ComSvcsLogError",
    "DllCanUnloadNow",
    "GetTrkSvrObject",
    "CosGetCallContext",
    "RecycleSurrogate",
    "DllUnregisterServer",
    "GetMTAThreadPoolMetrics",
    "CoLoadServices"
  ],
  "comuid.dll": [
    "DllCanUnloadNow",
    "CreateDCOMSecurityUIPage",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "confmsp.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "console.dll": [
    "CPlApplet"
  ],
  "corpol.dll": [
    "CORPolicyProvider",
    "GetUnsignedPermissions",
    "CORLockDownProvider",
    "DllCanUnloadNow",
    "DllRegisterServer",
    "GetPublisher",
    "DllUnregisterServer",
    "CORPolicyEE"
  ],
  "credssp.dll": [
    "SpDecryptMessage",
    "SpEnumerateSecurityPackagesW",
    "SpApplyControlToken",
    "SpEncryptMessage",
    "SpQuerySecurityPackageInfoW",
    "SpAcquireCredentialsHandleW",
    "SpAcceptSecurityContext",
    "SpImportSecurityContextW",
    "SpQueryContextAttributesW",
    "InitSecurityInterfaceW",
    "SpDeleteSecurityContext",
    "SpQuerySecurityContextToken",
    "SpMakeSignature",
    "SpQueryCredentialsAttributesW",
    "SpRevertSecurityContext",
    "SpSetContextAttributesW",
    "SpImpersonateSecurityContext",
    "SpCompleteAuthToken",
    "SpExportSecurityContext",
    "SpFreeCredentialsHandle",
    "SpFreeContextBuffer",
    "SpAddCredentialsW",
    "SpInitializeSecurityContextW",
    "DllInstall",
    "SpVerifySignature"
  ],
  "credui.dll": [
    "CredUIStoreSSOCredA",
    "CredUIConfirmCredentialsA",
    "CredUIReadSSOCredW",
    "CredUIParseUserNameA",
    "CredUIConfirmCredentialsW",
    "CredUIParseUserNameW",
    "DllCanUnloadNow",
    "CredUICmdLinePromptForCredentialsA",
    "CredUICmdLinePromptForCredentialsW",
    "CredUIPromptForCredentialsW",
    "DllGetClassObject",
    "DllRegisterServer",
    "CredUIStoreSSOCredW",
    "CredUIReadSSOCredA",
    "CredUIPromptForCredentialsA",
    "DllUnregisterServer",
    "CredUIInitControls"
  ],
  "crtdll.dll": [
    "wcsxfrm",
    "__dllonexit",
    "iswprint",
    "_ismbblead",
    "exit",
    "fwscanf",
    "__doserrno",
    "fmod",
    "_exit",
    "isprint",
    "_mbsnicmp",
    "strncpy",
    "toupper",
    "_getdllprocaddr",
    "atof",
    "fseek",
    "tmpnam",
    "_ismbcl2",
    "sscanf",
    "rename",
    "_chdrive",
    "void __cdecl operator delete(void *)",
    "_ismbcsymbol",
    "setvbuf",
    "raise",
    "_putw",
    "__threadid",
    "vfprintf",
    "_timezone_dll",
    "qsort",
    "_osver_dll",
    "_nextafter",
    "printf",
    "vswprintf",
    "_mbctolower",
    "_purecall",
    "_fpieee_flt",
    "memset",
    "fgetpos",
    "_finite",
    "_cwait",
    "acos",
    "_findnext",
    "tolower",
    "_aexit_rtn_dll",
    "_beginthread",
    "_eof",
    "_mbctombb",
    "_winmajor_dll",
    "_expand",
    "fwprintf",
    "_CIexp",
    "_copysign",
    "tmpfile",
    "fprintf",
    "towlower",
    "_cscanf",
    "putchar",
    "_strset",
    "_execve",
    "_filelength",
    "asctime",
    "isspace",
    "_open_osfhandle",
    "_locking",
    "_wcsnset",
    "_makepath",
    "_lrotl",
    "_mbctokata",
    "_flushall",
    "_execl",
    "_execvp",
    "_seterrormode",
    "_ismbbkana",
    "_mbctype",
    "fgetwc",
    "_flsbuf",
    "isxdigit",
    "difftime",
    "fscanf",
    "_ismbslead",
    "scanf",
    "mbstowcs",
    "int (__cdecl*__cdecl _set_new_handler(int (__cdecl*)(unsigned int)))(unsigned int)",
    "_cgets",
    "_mbsbtype",
    "_popen",
    "_pgmptr_dll",
    "islower",
    "_chdir",
    "_getsystime",
    "wcspbrk",
    "_getdrive",
    "_logb",
    "_strnset",
    "_mbslen",
    "log",
    "_execv",
    "_ftime",
    "is_wctype",
    "_lseek",
    "_fileinfo_dll",
    "_CIatan2",
    "_ismbbalpha",
    "_toupper",
    "ftell",
    "_CItanh",
    "_itoa",
    "_mbsncpy",
    "_strcmpi",
    "_mbctohira",
    "_XcptFilter",
    "_sys_errlist",
    "fputs",
    "_msize",
    "_mbsnextc",
    "iswxdigit",
    "fread",
    "strlen",
    "_CIpow",
    "getenv",
    "strerror",
    "fflush",
    "_spawnv",
    "abs",
    "_kbhit",
    "_yn",
    "_mbsnccnt",
    "signal",
    "_osversion_dll",
    "_vsnprintf",
    "_CIasin",
    "_j1",
    "atan2",
    "_searchenv",
    "_fputwchar",
    "wcsspn",
    "swprintf",
    "perror",
    "_strdec",
    "_mbsset",
    "_open",
    "abort",
    "wcscpy",
    "tan",
    "_execvpe",
    "strcspn",
    "__fpecode",
    "_lsearch",
    "_mbctoupper",
    "_strupr",
    "_ultow",
    "_HUGE_dll",
    "vprintf",
    "_chgsign",
    "strcat",
    "__pxcptinfoptrs",
    "isalnum",
    "_matherr",
    "_stricoll",
    "wcschr",
    "_cputs",
    "wcsftime",
    "_getdcwd",
    "_isnan",
    "sinh",
    "_vsnwprintf",
    "_wcsset",
    "sin",
    "strtoul",
    "_strspnp",
    "atexit",
    "_wtol",
    "wcstombs",
    "_j0",
    "_putenv",
    "fputc",
    "_fcvt",
    "malloc",
    "iswdigit",
    "_isctype",
    "_ismbcupper",
    "strxfrm",
    "_amsg_exit",
    "_fgetchar",
    "_loaddll",
    "_snprintf",
    "system",
    "wscanf",
    "_hypot",
    "_wcsicmp",
    "_unlink",
    "wcsncpy",
    "_rmdir",
    "_clearfp",
    "_lrotr",
    "_CIcos",
    "ferror",
    "mbtowc",
    "_ismbchira",
    "_statusfp",
    "_umask",
    "_baseversion_dll",
    "_tzset",
    "bsearch",
    "_assert",
    "_CIsqrt",
    "_errno",
    "cos",
    "void * __cdecl operator new(unsigned int)",
    "_spawnlp",
    "wcsncmp",
    "_futime",
    "_sopen",
    "_mbstrlen",
    "_ismbbgraph",
    "wcstod",
    "__isascii",
    "__argv_dll",
    "_strnicmp",
    "clock",
    "_rotl",
    "mktime",
    "_CIfmod",
    "_endthread",
    "_chmod",
    "_pclose",
    "_ismbbtrail",
    "gmtime",
    "_CIcosh",
    "wctomb",
    "mblen",
    "_getche",
    "_setsystime",
    "setlocale",
    "localeconv",
    "_mbscspn",
    "_getdiskfree",
    "_putch",
    "_beep",
    "_splitpath",
    "vsprintf",
    "cosh",
    "atoi",
    "_ismbbkalnum",
    "_utime",
    "_wtoi",
    "_swab",
    "_mbschr",
    "exp",
    "ungetwc",
    "_c_exit",
    "_mbscpy",
    "_mbcjmstojis",
    "fclose",
    "_cexit",
    "_ismbcprint",
    "strtol",
    "isgraph",
    "_mbsrev",
    "_ungetch",
    "strcmp",
    "_cpumode_dll",
    "fopen",
    "iswctype",
    "_execlp",
    "fputwc",
    "strpbrk",
    "_sys_nerr_dll",
    "_CItan",
    "wcsncat",
    "_mbstok",
    "_strncnt",
    "_except_handler2",
    "_tolower",
    "memmove",
    "realloc",
    "_CIlog10",
    "_write",
    "getchar",
    "pow",
    "wcscat",
    "_fcloseall",
    "_onexit",
    "rand",
    "_spawnlpe",
    "_spawnl",
    "_mbsupr",
    "wcscspn",
    "_wcsnicmp",
    "ldiv",
    "fwrite",
    "_ismbcl1",
    "_CIsin",
    "time",
    "srand",
    "_strlwr",
    "strchr",
    "_ismbcspace",
    "_ismbclegal",
    "_mbsrchr",
    "fabs",
    "_creat",
    "_heapchk",
    "_read",
    "_setmode",
    "strcpy",
    "_fmode_dll",
    "__threadhandle",
    "_wcsrev",
    "_pwctype_dll",
    "wprintf",
    "_environ_dll",
    "_winminor_dll",
    "iswalnum",
    "_lfind",
    "vwprintf",
    "_mbslwr",
    "_stricmp",
    "_osmode_dll",
    "_strrev",
    "iswascii",
    "_execle",
    "iscntrl",
    "_gcvt",
    "rewind",
    "_close",
    "_osminor_dll",
    "_strnextc",
    "_strdup",
    "_control87",
    "wcstol",
    "_cabs",
    "_fputchar",
    "_getw",
    "_mbspbrk",
    "iswalpha",
    "remove",
    "_strdate",
    "_findfirst",
    "vfwprintf",
    "_ismbcl0",
    "_pipe",
    "_mbsstr",
    "_pctype_dll",
    "_mbsnbcpy",
    "_stat",
    "_memicmp",
    "_heapmin",
    "_CIacos",
    "_mbbtype",
    "_ismbbpunct",
    "_ismbbkpunct",
    "feof",
    "tanh",
    "_fullpath",
    "div",
    "_spawnvp",
    "gets",
    "_ltoa",
    "swscanf",
    "_tempnam",
    "_tzname",
    "_getcwd",
    "__argc_dll",
    "_spawnvpe",
    "_getpid",
    "_cprintf",
    "_ismbckata",
    "ctime",
    "__toascii",
    "ldexp",
    "_getch",
    "freopen",
    "strtod",
    "atan",
    "_findclose",
    "_mbsncat",
    "strcoll",
    "wcsrchr",
    "_get_osfhandle",
    "wcscoll",
    "_fpclass",
    "floor",
    "_fileno",
    "_tell",
    "_setjmp",
    "_mbsnbcmp",
    "_mkdir",
    "fsetpos",
    "_ismbbalnum",
    "__iscsym",
    "_mbsnbcat",
    "isdigit",
    "iswspace",
    "_commit",
    "_CIatan",
    "_access",
    "_ftol",
    "_heapset",
    "iswupper",
    "isalpha",
    "strftime",
    "fgetc",
    "_ismbcalpha",
    "iswpunct",
    "strtok",
    "iswcntrl",
    "ungetc",
    "_unloaddll",
    "memcpy",
    "putc",
    "getc",
    "_ultoa",
    "wcstok",
    "_ismbclower",
    "_sleep",
    "_wcsdup",
    "_rotr",
    "_itow",
    "sqrt",
    "_wcslwr",
    "_execlpe",
    "_mktemp",
    "_daylight_dll",
    "_osmajor_dll",
    "_CIsinh",
    "_mbsnbcnt",
    "_filbuf",
    "_initterm",
    "longjmp",
    "puts",
    "_fgetwchar",
    "_wcsicoll",
    "clearerr",
    "wcstoul",
    "strrchr",
    "_iob",
    "_mbsninc",
    "_acmdln_dll",
    "_fdopen",
    "_mbsicmp",
    "_mbsdup",
    "_strtime",
    "_winver_dll",
    "_mbbtombc",
    "isupper",
    "_commode_dll",
    "_global_unwind2",
    "_spawnle",
    "_baseminor_dll",
    "_ctype",
    "_abnormal_termination",
    "atol",
    "_fpreset",
    "_spawnve",
    "_y0",
    "_mbclen",
    "_y1",
    "_ismbstrail",
    "memcmp",
    "_mbsnbset",
    "_memccpy",
    "_mbsnset",
    "iswlower",
    "_controlfp",
    "localtime",
    "_mbscat",
    "iswgraph",
    "_rmtmp",
    "_mbsspn",
    "_chsize",
    "_mbsinc",
    "_getdrives",
    "free",
    "_fstat",
    "__GetMainArgs",
    "_isatty",
    "_snwprintf",
    "wcscmp",
    "_fsopen",
    "strstr",
    "_ltow",
    "_ismbbprint",
    "_strninc",
    "ispunct",
    "asin",
    "_scalb",
    "_basemajor_dll",
    "sprintf",
    "strspn",
    "__mb_cur_max_dll",
    "_ecvt",
    "_heapwalk",
    "_mbsspnp",
    "_dup2",
    "_wcsupr",
    "modf",
    "ceil",
    "__iscsymf",
    "_mbsncmp",
    "_strerror",
    "_strinc",
    "frexp",
    "strncmp",
    "_mbccpy",
    "wcsstr",
    "_jn",
    "_mbcjistojms",
    "_mbsnbicmp",
    "isleadbyte",
    "_mbscmp",
    "memchr",
    "_mbsdec",
    "calloc",
    "fgets",
    "wcslen",
    "setbuf",
    "log10",
    "_local_unwind2",
    "strncat",
    "_ismbcdigit",
    "_CIlog",
    "towupper",
    "labs",
    "_dup"
  ],
  "crypt32.dll": [
    "CertControlStore",
    "CryptHashPublicKeyInfo",
    "CertOIDToAlgId",
    "CryptBinaryToStringA",
    "CryptExportPublicKeyInfo",
    "CertFindExtension",
    "I_CryptAddRefLruEntry",
    "RegCreateKeyExU",
    "CryptFormatObject",
    "CertGetIssuerCertificateFromStore",
    "CertFindSubjectInSortedCTL",
    "CryptFindCertificateKeyProvInfo",
    "CryptVerifyDetachedMessageSignature",
    "CryptDecodeObject",
    "CryptExportPublicKeyInfoEx",
    "I_CryptGetFileVersion",
    "I_CryptFindSmartCardCertInStore",
    "RegOpenKeyExU",
    "CertDuplicateCRLContext",
    "I_CryptUninstallAsn1Module",
    "CryptCreateKeyIdentifierFromCSP",
    "CertGetCTLContextProperty",
    "CertSerializeCTLStoreElement",
    "CertVerifyCTLUsage",
    "CertCreateCertificateChainEngine",
    "CryptSignMessage",
    "I_CertSrvProtectFunction",
    "CertRemoveEnhancedKeyUsageIdentifier",
    "CertAddEncodedCertificateToSystemStoreA",
    "CertGetCertificateChain",
    "CryptMemRealloc",
    "CryptMsgVerifyCountersignatureEncoded",
    "I_CryptGetAsn1Encoder",
    "CertGetIntendedKeyUsage",
    "CertFreeCertificateChainEngine",
    "CryptAcquireCertificatePrivateKey",
    "CryptUnregisterOIDFunction",
    "I_CryptEnumMatchingLruEntries",
    "CryptStringToBinaryA",
    "I_CryptGetLruEntryIdentifier",
    "CryptSignAndEncryptMessage",
    "CertSerializeCertificateStoreElement",
    "CryptSetAsyncParam",
    "I_CryptAddSmartCardCertToStore",
    "CertGetCRLFromStore",
    "CryptMemAlloc",
    "PFXIsPFXBlob",
    "I_CryptFreeLruCache",
    "CertAddStoreToCollection",
    "CertUnregisterSystemStore",
    "CloseCertPerformanceData",
    "CryptDecryptAndVerifyMessageSignature",
    "CryptAcquireContextU",
    "CryptVerifyCertificateSignatureEx",
    "I_CryptGetDefaultCryptProv",
    "CertRegisterPhysicalStore",
    "CertSetCTLContextProperty",
    "CertEnumSubjectInSortedCTL",
    "RegQueryInfoKeyU",
    "CertCreateCRLContext",
    "CertCompareCertificateName",
    "CertFindAttribute",
    "CryptSIPLoad",
    "I_CryptFindLruEntryData",
    "I_CryptReadTrustedPublisherDWORDValueFromRegistry",
    "CertAddCTLContextToStore",
    "CryptSIPPutSignedDataMsg",
    "I_CryptTouchLruEntry",
    "CertVerifyCertificateChainPolicy",
    "RegDeleteValueU",
    "CertVerifyValidityNesting",
    "I_CryptFlushLruCache",
    "CertVerifySubjectCertificateContext",
    "CertEnumCRLContextProperties",
    "CryptSignHashU",
    "CertFindRDNAttr",
    "CertGetPublicKeyLength",
    "CertGetValidUsages",
    "CertOpenStore",
    "CryptInitOIDFunctionSet",
    "CryptVerifyMessageSignature",
    "CryptHashToBeSigned",
    "I_CryptGetLruEntryData",
    "CertStrToNameA",
    "CryptMsgDuplicate",
    "CertGetSubjectCertificateFromStore",
    "I_CryptInsertLruEntry",
    "CryptQueryObject",
    "CertAddCRLLinkToStore",
    "CryptGetKeyIdentifierProperty",
    "CryptGetOIDFunctionAddress",
    "I_CryptInstallAsn1Module",
    "CryptBinaryToStringW",
    "CertDeleteCRLFromStore",
    "CertAddCRLContextToStore",
    "CertAddCTLLinkToStore",
    "CertEnumCRLsInStore",
    "CertEnumSystemStoreLocation",
    "I_CryptGetTls",
    "CryptUnregisterDefaultOIDFunction",
    "I_CryptRegisterSmartCardStore",
    "CryptGetAsyncParam",
    "CryptVerifySignatureU",
    "I_CryptCreateLruEntry",
    "CertRDNValueToStrW",
    "CertGetStoreProperty",
    "CertCreateCertificateContext",
    "CryptFindLocalizedName",
    "CertVerifyTimeValidity",
    "CertAddEncodedCRLToStore",
    "CryptSIPRetrieveSubjectGuidForCatalogFile",
    "I_CryptGetAsn1Decoder",
    "CollectCertPerformanceData",
    "CryptEncryptMessage",
    "CryptMsgOpenToEncode",
    "CryptImportPublicKeyInfo",
    "CertDeleteCTLFromStore",
    "I_CryptUninstallOssGlobal",
    "RegEnumValueU",
    "CertFindChainInStore",
    "CertAddEncodedCertificateToSystemStoreW",
    "CertCloseStore",
    "CryptEnumProvidersU",
    "CertDuplicateStore",
    "CertFreeCRLContext",
    "CertOpenSystemStoreA",
    "CryptProtectData",
    "CertAddCertificateLinkToStore",
    "CryptGetDefaultOIDFunctionAddress",
    "CryptSIPAddProvider",
    "I_CryptCreateLruCache",
    "RegOpenHKCUKeyExU",
    "CertAddSerializedElementToStore",
    "CryptHashCertificate",
    "CertAlgIdToOID",
    "OpenCertPerformanceData",
    "CryptInstallDefaultContext",
    "CryptEnumOIDInfo",
    "CryptSIPCreateIndirectData",
    "I_CertSyncStore",
    "CertFindSubjectInCTL",
    "I_CryptUnregisterSmartCardStore",
    "I_CryptFindLruEntry",
    "CreateFileU",
    "CryptMsgControl",
    "CryptRegisterOIDInfo",
    "CryptDecodeObjectEx",
    "CryptSetOIDFunctionValue",
    "CertAddEncodedCertificateToStore",
    "CryptUninstallDefaultContext",
    "CryptVerifyMessageHash",
    "CertCreateCTLEntryFromCertificateContextProperties",
    "CryptMsgOpenToDecode",
    "CertSetCertificateContextPropertiesFromCTLEntry",
    "CryptMsgVerifyCountersignatureEncodedEx",
    "CryptGetDefaultOIDDllList",
    "CryptMsgGetAndVerifySigner",
    "CryptSIPRemoveProvider",
    "I_CryptDisableLruOfEntries",
    "CertAddEnhancedKeyUsageIdentifier",
    "CertIsRDNAttrsInCertificateName",
    "CertEnumPhysicalStore",
    "CryptVerifyCertificateSignature",
    "CryptLoadSip",
    "CertGetCertificateContextProperty",
    "I_CryptFreeTls",
    "CryptCloseAsyncHandle",
    "CryptGetMessageCertificates",
    "CryptDecodeMessage",
    "CryptHashMessage",
    "CryptMsgCalculateEncodedLength",
    "CryptMsgSignCTL",
    "I_CryptGetOssGlobal",
    "CertFreeCTLContext",
    "CertEnumCTLsInStore",
    "CertNameToStrA",
    "CryptMsgUpdate",
    "I_CertProtectFunction",
    "CertCreateContext",
    "RegQueryValueExU",
    "CryptMsgCountersign",
    "RegSetValueExU",
    "CertRegisterSystemStore",
    "CryptStringToBinaryW",
    "CertEnumCertificatesInStore",
    "CryptGetOIDFunctionValue",
    "CryptImportPKCS8",
    "CryptRegisterDefaultOIDFunction",
    "CryptMsgGetParam",
    "CryptEnumOIDFunction",
    "CryptSignMessageWithKey",
    "CertDuplicateCTLContext",
    "I_CryptAllocTls",
    "CryptGetMessageSignerCount",
    "I_CryptDetachTls",
    "I_CryptRemoveLruEntry",
    "CertStrToNameW",
    "CertEnumCertificateContextProperties",
    "CryptVerifyDetachedMessageHash",
    "CertRemoveStoreFromCollection",
    "CertIsValidCRLForCertificate",
    "CryptMsgEncodeAndSignCTL",
    "CertGetEnhancedKeyUsage",
    "CertDuplicateCertificateContext",
    "RegCreateHKCUKeyExU",
    "I_CryptEnableLruOfEntries",
    "CertGetNameStringW",
    "CryptFindOIDInfo",
    "CertVerifyRevocation",
    "CertEnumCTLContextProperties",
    "CertSetStoreProperty",
    "CertGetCRLContextProperty",
    "CryptSIPVerifyIndirectData",
    "CertSerializeCRLStoreElement",
    "CertFindCRLInStore",
    "CertFindCertificateInStore",
    "CertRDNValueToStrA",
    "CryptEncodeObjectEx",
    "CryptMsgClose",
    "CryptSignCertificate",
    "CertCompareIntegerBlob",
    "CertResyncCertificateChainEngine",
    "CertFreeCertificateChain",
    "CertFreeCertificateContext",
    "CryptMemFree",
    "PFXVerifyPassword",
    "CertFindCertificateInCRL",
    "CertCreateSelfSignCertificate",
    "I_CertUpdateStore",
    "CryptSIPRemoveSignedDataMsg",
    "CertComparePublicKeyInfo",
    "CertDuplicateCertificateChain",
    "CertVerifyCRLTimeValidity",
    "CryptEncodeObject",
    "I_CryptInstallOssGlobal",
    "CryptSIPGetSignedDataMsg",
    "CryptCreateAsyncHandle",
    "PFXImportCertStore",
    "CryptSetProviderU",
    "CertCreateCTLContext",
    "ChainWlxLogoffEvent",
    "CryptUnregisterOIDInfo",
    "CryptSIPRetrieveSubjectGuid",
    "CertAddCertificateContextToStore",
    "CertCompareCertificate",
    "CertSetCertificateContextProperty",
    "CryptFreeOIDFunctionAddress",
    "CertAddEncodedCTLToStore",
    "CryptDecryptMessage",
    "CryptMsgCountersignEncoded",
    "CertFindCTLInStore",
    "CertSaveStore",
    "CryptVerifyMessageSignatureWithKey",
    "PFXExportCertStore",
    "I_CryptWalkAllLruCacheEntries",
    "CertUnregisterPhysicalStore",
    "CertDeleteCertificateFromStore",
    "CryptSetKeyIdentifierProperty",
    "CertVerifyCRLRevocation",
    "CertNameToStrW",
    "CertSetCRLContextProperty",
    "CryptExportPKCS8",
    "CertOpenSystemStoreW",
    "CryptSignAndEncodeCertificate",
    "CryptUnprotectData",
    "I_CryptGetDefaultCryptProvForEncrypt",
    "CryptEnumKeyIdentifierProperties",
    "I_CryptReleaseLruEntry",
    "CryptInstallOIDFunctionAddress",
    "CertEnumSystemStore",
    "CertGetNameStringA",
    "CryptImportPublicKeyInfoEx",
    "CryptRegisterOIDFunction",
    "CertSetEnhancedKeyUsage",
    "PFXExportCertStoreEx",
    "I_CryptSetTls"
  ],
  "cryptdlg.dll": [
    "FormatPKIXEmailProtection",
    "FormatVerisignExtension",
    "CertTrustInit",
    "GetFriendlyNameOfCertW",
    "CertModifyCertificatesToTrust",
    "CertConfigureTrustA",
    "EncodeRecipientID",
    "CertTrustCertPolicy",
    "CertTrustCleanup",
    "CertTrustFinalPolicy",
    "DllRegisterServer",
    "DecodeRecipientID",
    "CertViewPropertiesA",
    "CertViewPropertiesW",
    "CertSelectCertificateA",
    "CertConfigureTrustW",
    "CertSelectCertificateW",
    "EncodeAttrSequence",
    "GetFriendlyNameOfCertA",
    "DllUnregisterServer",
    "DecodeAttrSequence"
  ],
  "cryptdll.dll": [
    "CDFindCommonCSystemWithKey",
    "CDLocateCSystem",
    "MD5Update",
    "MD5Final",
    "CDBuildIntegrityVect",
    "CDFindCommonCSystem",
    "CDLocateCheckSum",
    "CDRegisterCheckSum",
    "CDBuildVect",
    "CDRegisterRng",
    "MD5Init",
    "CDGenerateRandomBits",
    "CDLocateRng",
    "CDRegisterCSystem"
  ],
  "cryptext.dll": [
    "CryptExtAddCRLW",
    "CryptExtAddPFX",
    "CryptExtOpenCTL",
    "CryptExtAddSPCW",
    "CryptExtOpenP7R",
    "CryptExtOpenPKCS7",
    "CryptExtAddCERW",
    "CryptExtAddSPC",
    "CryptExtOpenCRL",
    "CryptExtAddP7RW",
    "CryptExtOpenCATW",
    "CryptExtAddP7R",
    "DllRegisterServer",
    "CryptExtOpenCTLW",
    "CryptExtAddCRL",
    "CryptExtOpenSTR",
    "CryptExtOpenP10W",
    "CryptExtAddCER",
    "CryptExtOpenCAT",
    "CryptExtOpenCERW",
    "CryptExtOpenPKCS7W",
    "CryptExtOpenCRLW",
    "CryptExtAddCTLW",
    "DllGetClassObject",
    "CryptExtAddCTL",
    "DllCanUnloadNow",
    "CryptExtOpenCER",
    "CryptExtAddPFXW",
    "CryptExtOpenP7RW",
    "DllUnregisterServer",
    "CryptExtOpenSTRW",
    "CryptExtOpenP10"
  ],
  "cryptnet.dll": [
    "CryptGetTimeValidObject",
    "LdapProvOpenStore",
    "CryptFlushTimeValidObject",
    "CertDllVerifyRevocation",
    "CryptRetrieveObjectByUrlA",
    "CryptGetObjectUrl",
    "CryptRetrieveObjectByUrlW",
    "I_CryptNetEnumUrlCacheEntry",
    "CertDllVerifyCTLUsage",
    "I_CryptNetGetHostNameFromUrl",
    "I_CryptNetGetUserDsStoreUrl",
    "CryptInstallCancelRetrieval",
    "I_CryptNetIsConnected",
    "CryptCancelAsyncRetrieval",
    "CryptUninstallCancelRetrieval",
    "DllRegisterServer",
    "CryptnetWlxLogoffEvent",
    "DllUnregisterServer"
  ],
  "cryptsvc.dll": [
    "CryptServiceMain"
  ],
  "cryptui.dll": [
    "CryptUIGetCertificatePropertiesPagesA",
    "CryptUIDlgViewSignerInfoA",
    "CryptUIWizSubmitCertRequestNoDS",
    "RetrievePKCS7FromCA",
    "CryptUIGetViewSignaturesPagesA",
    "CryptUIStartCertMgr",
    "CryptUIDlgViewCRLA",
    "CryptUIFreeViewSignaturesPagesW",
    "CryptUIDlgViewCertificateA",
    "CryptUIFreeCertificatePropertiesPagesA",
    "CryptUIWizFreeDigitalSignContext",
    "CryptUIWizExport",
    "WizardFree",
    "CryptUIDlgSelectCertificateA",
    "EnrollmentCOMObjectFactory_getInstance",
    "I_CryptUIProtectFailure",
    "CryptUIDlgSelectStoreA",
    "LocalEnrollNoDS",
    "CryptUIDlgViewSignerInfoW",
    "CryptUIWizQueryCertRequestNoDS",
    "DllRegisterServer",
    "I_CryptUIProtect",
    "CryptUIGetViewSignaturesPagesW",
    "CryptUIDlgViewCRLW",
    "CryptUIDlgViewCTLA",
    "CryptUIGetCertificatePropertiesPagesW",
    "CryptUIWizCertRequest",
    "CryptUIDlgCertMgr",
    "CryptUIDlgFreeCAContext",
    "CryptUIDlgSelectCertificateW",
    "CryptUIDlgSelectCA",
    "CryptUIDlgSelectCertificateFromStore",
    "CryptUIFreeViewSignaturesPagesA",
    "CryptUIWizDigitalSign",
    "CryptUIWizImport",
    "CryptUIWizFreeCertRequestNoDS",
    "CryptUIWizCreateCertRequestNoDS",
    "ACUIProviderInvokeUI",
    "CryptUIDlgSelectStoreW",
    "CryptUIWizBuildCTL",
    "CryptUIDlgViewCTLW",
    "CryptUIDlgViewCertificateW",
    "CryptUIDlgViewContext",
    "CryptUIFreeCertificatePropertiesPagesW",
    "LocalEnroll",
    "CryptUIDlgViewCertificatePropertiesW",
    "DllUnregisterServer",
    "CryptUIDlgViewCertificatePropertiesA"
  ],
  "cscdll.dll": [
    "CSCIsCSCEnabled",
    "CheckCSCEx",
    "LogoffHappened",
    "CSCShareIdToShareName",
    "CSCQueryShareStatusW",
    "CSCEndSynchronizationW",
    "CSCDoLocalRenameExW",
    "WinlogonScreenSaverEvent",
    "CSCDoLocalRenameA",
    "CSCFindFirstFileW",
    "WinlogonStartupEvent",
    "WinlogonLogonEvent",
    "CSCCheckShareOnlineW",
    "CSCEnumForStatsExW",
    "CSCMergeShareA",
    "CSCGetSpaceUsageA",
    "CSCQueryFileStatusExW",
    "CSCFillSparseFilesW",
    "CSCFillSparseFilesA",
    "CSCQueryFileStatusExA",
    "CSCQueryShareStatusA",
    "CSCMergeShareW",
    "CSCBeginSynchronizationW",
    "CSCPinFileW",
    "CSCDoLocalRenameW",
    "CSCUnpinFileA",
    "WinlogonStartShellEvent",
    "CSCEnumForStatsW",
    "CSCFindClose",
    "CSCFindFirstFileForSidA",
    "CSCQueryDatabaseStatus",
    "CSCCheckShareOnlineA",
    "CSCFindFirstFileForSidW",
    "CSCIsServerOfflineA",
    "CSCDeleteA",
    "CSCCopyReplicaA",
    "CSCCopyReplicaW",
    "LogonHappened",
    "CSCEnumForStatsExA",
    "WinlogonLockEvent",
    "CSCFindFirstFileA",
    "CSCEncryptDecryptDatabase",
    "WinlogonShutdownEvent",
    "WinlogonUnlockEvent",
    "ReInt_WndProc",
    "CSCFindNextFileA",
    "CSCTransitionServerOnlineW",
    "CheckCSC",
    "CSCSetMaxSpace",
    "BreakConnections",
    "CSCQueryFileStatusA",
    "CSCPurgeUnpinnedFiles",
    "CSCPinFileA",
    "CSCDoEnableDisable",
    "CSCDeleteW",
    "CSCGetSpaceUsageW",
    "CSCIsServerOfflineW",
    "CSCEnumForStatsA",
    "CSCTransitionServerOnlineA",
    "CSCUnpinFileW",
    "MprServiceProc",
    "RefreshConnections",
    "CSCFindNextFileW",
    "Update",
    "CSCFreeSpace",
    "CSCCheckShareOnlineExW",
    "WinlogonLogoffEvent",
    "CSCQueryFileStatusW"
  ],
  "cscui.dll": [
    "CSCUIRemoveFolderFromCache",
    "CSCOptions_RunDLLA",
    "CSCOptions_RunDLLW",
    "CSCUIOptionsPropertySheet",
    "DllCanUnloadNow",
    "CSCUISetState",
    "CSCUIMsgProcess",
    "CSCUIInitialize",
    "DllGetClassObject",
    "DllRegisterServer",
    "ProcessGroupPolicy",
    "DllUnregisterServer",
    "CSCOptions_RunDLL",
    "CscPolicyProcessing_RunDLLW"
  ],
  "csrsrv.dll": [
    "CsrCreateThread",
    "CsrSetCallingSpooler",
    "CsrCreateProcess",
    "CsrDestroyThread",
    "CsrAddStaticServerThread",
    "CsrPopulateDosDevices",
    "CsrCallServerFromServer",
    "CsrValidateMessageBuffer",
    "CsrServerInitialization",
    "CsrNotifyWait",
    "CsrGetProcessLuid",
    "CsrUnhandledExceptionFilter",
    "CsrDereferenceWait",
    "CsrUnlockThread",
    "CsrLockProcessByClientId",
    "CsrShutdownProcesses",
    "CsrDereferenceThread",
    "CsrConnectToUser",
    "CsrDereferenceProcess",
    "CsrLockThreadByClientId",
    "CsrQueryApiPort",
    "CsrSetBackgroundPriority",
    "CsrSetForegroundPriority",
    "CsrReferenceThread",
    "CsrUnlockProcess",
    "CsrExecServerThread",
    "CsrValidateMessageString",
    "CsrDestroyProcess",
    "CsrImpersonateClient",
    "CsrMoveSatisfiedWait",
    "CsrCreateWait",
    "CsrRevertToSelf",
    "CsrDebugProcess",
    "CsrDebugProcessStop",
    "CsrCreateRemoteThread"
  ],
  "csseqchk.dll": [
    "ISCGetCurrentState",
    "ISCDestroyObject",
    "ISCDecodeCommandEx",
    "ISCCheckSequence",
    "ISCCreateObject",
    "ISCMacroSequenceCheck",
    "ISCDecodeCommand",
    "DllCanUnloadNow",
    "ISCGetContext",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer",
    "ISCSetCurrentState"
  ],
  "ctl3d32.dll": [
    "Ctl3dUnregister",
    "Ctl3dCtlColorEx",
    "Ctl3dIsAutoSubclass",
    "EditWndProc3d",
    "BtnWndProc3d",
    "Ctl3dUnAutoSubclass",
    "Ctl3dGetVer",
    "StaticWndProc3d",
    "Ctl3dColorChange",
    "ComboWndProc3d",
    "Ctl3dCtlColor",
    "Ctl3dSubclassCtlEx",
    "Ctl3dSubclassCtl",
    "Ctl3dSetStyle",
    "Ctl3dUnsubclassCtl",
    "Ctl3dSubclassDlgEx",
    "Ctl3dAutoSubclassEx",
    "Ctl3dAutoSubclass",
    "Ctl3dDlgFramePaint",
    "Ctl3dSubclassDlg",
    "Ctl3dDlgProc",
    "Ctl3dRegister",
    "Ctl3dEnabled",
    "ListWndProc3d",
    "Ctl3dWinIniChange"
  ],
  "d3d8.dll": [
    "Direct3DCreate8",
    "ValidateVertexShader",
    "DebugSetMute",
    "CheckFullscreen",
    "ValidatePixelShader"
  ],
  "d3d8thk.dll": [
    "OsThunkDdReenableDirectDrawObject",
    "OsThunkDdCreateSurfaceObject",
    "OsThunkDdFlipToGDISurface",
    "OsThunkDdCreateDirectDrawObject",
    "OsThunkDdCanCreateSurface",
    "OsThunkDdGetDriverInfo",
    "OsThunkDdSetOverlayPosition",
    "OsThunkDdGetFlipStatus",
    "OsThunkDdGetDriverState",
    "OsThunkDdUnlockD3D",
    "OsThunkDdAlphaBlt",
    "OsThunkD3dContextDestroyAll",
    "OsThunkDdEndMoCompFrame",
    "OsThunkDdUpdateOverlay",
    "OsThunkDdDestroyMoComp",
    "OsThunkDdLock",
    "OsThunkDdDeleteSurfaceObject",
    "OsThunkDdCanCreateD3DBuffer",
    "OsThunkDdCreateSurface",
    "OsThunkDdCreateD3DBuffer",
    "OsThunkDdDestroySurface",
    "OsThunkDdGetMoCompBuffInfo",
    "OsThunkDdBeginMoCompFrame",
    "OsThunkDdGetMoCompGuids",
    "OsThunkDdLockD3D",
    "OsThunkDdGetScanLine",
    "OsThunkDdAttachSurface",
    "OsThunkDdCreateMoComp",
    "OsThunkDdGetDC",
    "OsThunkDdSetColorKey",
    "OsThunkDdGetAvailDriverMemory",
    "OsThunkDdAddAttachedSurface",
    "OsThunkDdDeleteDirectDrawObject",
    "OsThunkDdQueryDirectDrawObject",
    "OsThunkDdColorControl",
    "OsThunkDdReleaseDC",
    "OsThunkDdFlip",
    "OsThunkDdCreateSurfaceEx",
    "OsThunkDdUnlock",
    "OsThunkDdGetInternalMoCompInfo",
    "OsThunkDdGetDxHandle",
    "OsThunkDdDestroyD3DBuffer",
    "OsThunkD3dValidateTextureStageState",
    "OsThunkD3dContextCreate",
    "OsThunkD3dDrawPrimitives2",
    "OsThunkD3dContextDestroy",
    "OsThunkDdRenderMoComp",
    "OsThunkDdResetVisrgn",
    "OsThunkDdWaitForVerticalBlank",
    "OsThunkDdSetExclusiveMode",
    "OsThunkDdBlt",
    "OsThunkDdSetGammaRamp",
    "OsThunkDdGetBltStatus",
    "OsThunkDdQueryMoCompStatus",
    "OsThunkDdUnattachSurface",
    "OsThunkDdGetMoCompFormats"
  ],
  "d3d9.dll": [
    "D3DPERF_SetOptions",
    "D3DPERF_GetStatus",
    "Direct3DCreate9",
    "DebugSetMute",
    "D3DPERF_EndEvent",
    "PSGPError",
    "D3DPERF_QueryRepeatFrame",
    "D3DPERF_SetMarker",
    "PSGPSampleTexture",
    "Direct3DShaderValidatorCreate9",
    "CheckFullscreen",
    "DebugSetLevel",
    "D3DPERF_SetRegion",
    "D3DPERF_BeginEvent"
  ],
  "d3dim.dll": [
    "Direct3DGetSWRastZPixFmts",
    "FlushD3DDevices",
    "Direct3D_HALCleanUp",
    "Direct3DCreate",
    "D3DFree",
    "PaletteAssociateNotify",
    "FlushD3DDevices2",
    "PaletteUpdateNotify",
    "SurfaceFlipNotify",
    "D3DRealloc",
    "Direct3DCreateDevice",
    "D3DMalloc",
    "Direct3DCreateTexture"
  ],
  "d3dim700.dll": [
    "SetLOD",
    "FlushD3DDevices",
    "Direct3DCreate",
    "Direct3D_HALCleanUp",
    "D3DFree",
    "SetPriority",
    "DestroyTexture",
    "PaletteAssociateNotify",
    "PaletteUpdateNotify",
    "CreateTexture",
    "GetLOD",
    "SurfaceFlipNotify",
    "D3DTextureUpdate",
    "D3DRealloc",
    "Direct3DCreateDevice",
    "GetPriority",
    "D3DMalloc",
    "D3DBreakVBLock"
  ],
  "d3dpmesh.dll": [
    "CreateD3DRMPMeshVisual"
  ],
  "d3dramp.dll": [
    "RampOldTri",
    "g_RampOld_BeadTbl"
  ],
  "d3drm.dll": [
    "D3DRMVectorNormalize",
    "D3DRMColorGetRed",
    "D3DRMQuaternionSlerp",
    "D3DRMQuaternionMultiply",
    "D3DRMQuaternionFromRotation",
    "D3DRMVectorAdd",
    "D3DRMCreateColorRGB",
    "D3DRMCreateColorRGBA",
    "D3DRMVectorCrossProduct",
    "D3DRMColorGetBlue",
    "D3DRMVectorModulus",
    "D3DRMVectorSubtract",
    "D3DRMVectorScale",
    "D3DRMVectorRandom",
    "DllGetClassObject",
    "D3DRMMatrixFromQuaternion",
    "D3DRMColorGetGreen",
    "D3DRMVectorReflect",
    "D3DRMColorGetAlpha",
    "D3DRMVectorDotProduct",
    "DllCanUnloadNow",
    "D3DRMVectorRotate",
    "Direct3DRMCreate"
  ],
  "d3dxof.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DirectXFileCreate"
  ],
  "danim.dll": [
    "class CRNumber * __stdcall CRSphericalCoordLength(class CRPoint3 *)",
    "class CRTransform2 * __stdcall CRIdentityTransform2(void)",
    "class CRFontStyle * __stdcall CRAntiAliasing(class CRFontStyle *,double)",
    "class CREvent * __stdcall CRLeftButtonDown(void)",
    "class CRVector2 * __stdcall CRIntegral(class CRVector2 *)",
    "class CRBoolean * __stdcall CRLT(class CRNumber *,class CRNumber *)",
    "class CRTuple * __stdcall CRUninitializedTuple(class CRTuple *)",
    "class CRVector3 * __stdcall CRNeg(class CRVector3 *)",
    "class CRPath2 * __stdcall CRPolydrawPath(class CRArray *,class CRArray *)",
    "class CRPath2 * __stdcall CRPieRadians(double,double,double,double)",
    "class CRSound * __stdcall CRPan(class CRSound *,double)",
    "class CRBvr * __stdcall CRUntil(class CRBvr *,class CREvent *,class CRBvr *)",
    "class CRNumber * __stdcall CRGlobalTime(void)",
    "class CRNumber * __stdcall CRGetZ(class CRVector3 *)",
    "class CRTransform2 * __stdcall CRScale2Uniform(class CRNumber *)",
    "class CREndStyle * __stdcall CREndStyleFlat(void)",
    "class CRNumber * __stdcall CRGetDuration(class CRImportationResult *)",
    "class CRImage * __stdcall CRRadialGradientMulticolor(class CRArray *,class CRArray *)",
    "class CRVector2 * __stdcall CRSub(class CRVector2 *,class CRVector2 *)",
    "class CRPoint3 * __stdcall CRMax(class CRBbox3 *)",
    "class CREvent * __stdcall CRRightButtonDown(void)",
    "class CRImage * __stdcall CRHatchCross(class CRColor *,double)",
    "class CRNumber * __stdcall CRCos(class CRNumber *)",
    "class CRLineStyle * __stdcall CRWidth(class CRLineStyle *,class CRNumber *)",
    "class CRFontStyle * __stdcall CRDefaultFont(void)",
    "class CRFontStyle * __stdcall CRUnderline(class CRFontStyle *)",
    "bool __stdcall CROnMouseLeave(class CRView *,double)",
    "class CREvent * __stdcall CRAttachData(class CREvent *,class CRBvr *)",
    "class CRNumber * __stdcall CRAtan2(class CRNumber *,class CRNumber *)",
    "class CRImage * __stdcall CRHatchBackwardDiagonal(class CRColor *,double)",
    "class CRPath2 * __stdcall CRConcat(class CRArray *)",
    "class CRColor * __stdcall CRBlack(void)",
    "class CREvent * __stdcall CRKeyDown(long)",
    "class CRVector2 * __stdcall CRCreateVector2(double,double)",
    "class CRGeometry * __stdcall CRGetGeometry(class CRImportationResult *)",
    "class CRVector3 * __stdcall CRCreateVector3(double,double,double)",
    "void __stdcall CRSetLastError(long,unsigned short const *)",
    "class CRTransform3 * __stdcall CRYShear3(class CRNumber *,class CRNumber *)",
    "class CRPickableResult * __stdcall CRPickableOccluded(class CRImage *)",
    "class CRTransform3 * __stdcall CRTranslate3(class CRPoint3 *)",
    "class CRLineStyle * __stdcall CRAntiAliasing(class CRLineStyle *,double)",
    "class CRTransform2 * __stdcall CRRotate2(class CRNumber *)",
    "class CRNumber * __stdcall CRGetY(class CRVector2 *)",
    "class CRNumber * __stdcall CRPolarCoordLength(class CRPoint2 *)",
    "class CRGeometry * __stdcall CRSpecularExponentAnim(class CRGeometry *,class CRNumber *)",
    "class CRImage * __stdcall CRRadialGradientSquare(class CRColor *,class CRColor *,class CRNumber *)",
    "class CRPickableResult * __stdcall CRPickable(class CRImage *)",
    "class CRNumber * __stdcall CRSeededRandom(double)",
    "class CRColor * __stdcall CRYellow(void)",
    "class CRNumber * __stdcall CRGetGreen(class CRColor *)",
    "class CRSound * __stdcall CRGain(class CRSound *,double)",
    "class CREvent * __stdcall CRThenEvent(class CREvent *,class CREvent *)",
    "class CRImage * __stdcall CRDraw(class CRPath2 *,class CRLineStyle *)",
    "bool __stdcall CRReleaseGC(void *)",
    "class CRTransform3 * __stdcall CRScale3(class CRVector3 *)",
    "class CRColor * __stdcall CRSilver(void)",
    "bool __stdcall CRExtract(class CRBoolean *)",
    "class CRImage * __stdcall CRDetectableEmptyImage(void)",
    "class CRCamera * __stdcall CRDepth(class CRCamera *,class CRNumber *)",
    "class CRTransform3 * __stdcall CRRotate3(class CRVector3 *,class CRNumber *)",
    "long __stdcall CRGetInvalidatedRects(class CRView *,unsigned long,long,struct tagRECT *)",
    "class CRSound * __stdcall CRRate(class CRSound *,class CRNumber *)",
    "bool __stdcall CRSetSite(class CRView *,class CRViewSite *)",
    "long __stdcall CRQueryHitPointEx(class CRView *,long,unsigned long *,double *,struct tagRECT const *,struct tagPOINT)",
    "class CRBvr * __stdcall CRHook(class CRBvr *,class CRBvrHook *)",
    "class CRSound * __stdcall CRPhase(class CRSound *,double)",
    "class CRNumber * __stdcall CRDerivative(class CRNumber *)",
    "class CRNumber * __stdcall CRAdd(class CRNumber *,class CRNumber *)",
    "class CRGeometry * __stdcall CREmptyGeometry(void)",
    "class CRNumber * __stdcall CRPolarCoordAngle(class CRPoint2 *)",
    "class CRGeometry * __stdcall CRLightRange(class CRGeometry *,double)",
    "class CRImage * __stdcall CRRender(class CRMontage *)",
    "class CRGeometry * __stdcall CRTexture(class CRGeometry *,class CRImage *)",
    "class CRBvr * __stdcall CRBvrApplyPreference(class CRBvr *,unsigned short *,struct tagVARIANT)",
    "class CRSound * __stdcall CRSinSynth(void)",
    "class CRNumber * __stdcall CRExp(class CRNumber *)",
    "class CRBoolean * __stdcall CRNE(class CRNumber *,class CRNumber *)",
    "class CRGeometry * __stdcall CRLightAttenuation(class CRGeometry *,double,double,double)",
    "class CRVector3 * __stdcall CRDerivative(class CRVector3 *)",
    "class CRGeometry * __stdcall CRLightAttenuation(class CRGeometry *,class CRNumber *,class CRNumber *,class CRNumber *)",
    "bool __stdcall CRSetWindow(class CRView *,struct HWND__ *)",
    "class CRImage * __stdcall CRAddPickData(class CRImage *,struct IUnknown *,bool)",
    "class CRMicrophone * __stdcall CRDefaultMicrophone(void)",
    "class CRGeometry * __stdcall CRUnionGeometry(class CRArray *)",
    "double __stdcall CRExtract(class CRNumber *)",
    "class CRTransform3 * __stdcall CRScale3(class CRNumber *,class CRNumber *,class CRNumber *)",
    "bool __stdcall CRSetViewport(class CRView *,long,long,long,long)",
    "bool __stdcall CRDisconnect(struct HINSTANCE__ *)",
    "class CRColor * __stdcall CRCyan(void)",
    "class CRGeometry * __stdcall CRSoundSource(class CRSound *)",
    "bool __stdcall CRSetServiceProvider(class CRView *,struct IServiceProvider *)",
    "class CRGeometry * __stdcall CRGetGeometry(class CRPickableResult *)",
    "class CRVector2 * __stdcall CRNeg(class CRVector2 *)",
    "class CRSound * __stdcall CRPan(class CRSound *,class CRNumber *)",
    "class CRPoint2 * __stdcall CRPoint2Polar(double,double)",
    "class CRTransform2 * __stdcall CRYShear2(double)",
    "class CRVector2 * __stdcall CRNormalize(class CRVector2 *)",
    "class CRPath2 * __stdcall CRRay(class CRPoint2 *)",
    "class CRFontStyle * __stdcall CRFont(class CRString *,class CRNumber *,class CRColor *)",
    "class CRMatte * __stdcall CRFillMatte(class CRPath2 *)",
    "class CRBvr * __stdcall CRCond(class CRBoolean *,class CRBvr *,class CRBvr *)",
    "class CRVector2 * __stdcall CRAdd(class CRVector2 *,class CRVector2 *)",
    "class CRVector3 * __stdcall CRDiv(class CRVector3 *,double)",
    "class CRVector3 * __stdcall CRZVector3(void)",
    "class CRColor * __stdcall CRColorRgb255(short,short,short)",
    "class CRNumber * __stdcall CRGetY(class CRPoint3 *)",
    "class CRFontStyle * __stdcall CRTransformCharacters(class CRFontStyle *,class CRTransform2 *)",
    "class CREvent * __stdcall CRAppTriggeredEvent(void)",
    "class CRSound * __stdcall CRGetSound(class CRImportationResult *)",
    "class CRTransform3 * __stdcall CRTranslate3(double,double,double)",
    "enum CR_BVR_TYPEID __stdcall CRGetTypeId(class CRBvr *)",
    "class CRPath2 * __stdcall CRArc(double,double,double,double)",
    "class CRSound * __stdcall CRRate(class CRSound *,double)",
    "class CRTransform2 * __stdcall CRFollowPathEval(class CRPath2 *,class CRNumber *)",
    "class CRArray * __stdcall CRUninitializedArray(class CRArray *)",
    "class CRGeometry * __stdcall CRSpecularColor(class CRGeometry *,class CRColor *)",
    "class CRBvr * __stdcall CRBSpline(int,long,class CRNumber * * const,long,class CRBvr * * const,long,class CRNumber * * const,class CRNumber *,enum CR_BVR_TYPEID)",
    "class CRSound * __stdcall CRGain(class CRSound *,class CRNumber *)",
    "class CRNumber * __stdcall CRGetY(class CRPoint2 *)",
    "class CRBoolean * __stdcall CRIsSingular(class CRTransform2 *)",
    "class CRImage * __stdcall CRGradientSquare(class CRColor *,class CRColor *,class CRColor *,class CRColor *)",
    "bool __stdcall CRSwitchToBool(class CRBoolean *,bool)",
    "class CRNumber * __stdcall CRToRadians(class CRNumber *)",
    "class CRPoint2 * __stdcall CRAdd(class CRPoint2 *,class CRVector2 *)",
    "class CRSound * __stdcall CRSilence(void)",
    "class CRColor * __stdcall CROlive(void)",
    "class CRImage * __stdcall CRHatchDiagonalCross(class CRColor *,class CRNumber *)",
    "class CRNumber * __stdcall CRSlowInSlowOut(class CRNumber *,class CRNumber *,class CRNumber *,class CRNumber *)",
    "class CRNumber * __stdcall CRPow(class CRNumber *,class CRNumber *)",
    "class CRBvr * __stdcall CRFirst(class CRPair *)",
    "class CRBvr * __stdcall CRRepeatForever(class CRBvr *)",
    "bool __stdcall CRRemoveElement(class CRArray *,long)",
    "bool __stdcall CRStartModel(class CRView *,class CRImage *,class CRSound *,double,unsigned long,bool *)",
    "struct IUnknown * __stdcall CRGetTransform(class CRDXTransformResult *)",
    "class CRImage * __stdcall CRFill(class CRPath2 *,class CRLineStyle *,class CRImage *)",
    "class CRNumber * __stdcall CRCeiling(class CRNumber *)",
    "class CRVector2 * __stdcall CRDiv(class CRVector2 *,double)",
    "class CREvent * __stdcall CRGetCompletionEvent(class CRImportationResult *)",
    "class CRBvr * __stdcall CRGetModifiableBvr(class CRBvr *)",
    "class CRGeometry * __stdcall CRBillboard(class CRGeometry *,class CRVector3 *)",
    "bool __stdcall CRBvrToCOM(class CRBvr *,struct _GUID const &,void * *)",
    "class CRBvr * __stdcall CRModifiableBvr(class CRBvr *,unsigned long)",
    "class CRImage * __stdcall CRRadialGradientSquare(class CRColor *,class CRColor *,double)",
    "class CRGeometry * __stdcall CRLighting(class CRGeometry *,class CRBoolean *)",
    "class CRGeometry * __stdcall CREmissiveColor(class CRGeometry *,class CRColor *)",
    "class CRTransform2 * __stdcall CRInverse(class CRTransform2 *)",
    "class CRNumber * __stdcall CRLength(class CRArray *)",
    "class CRImage * __stdcall CRRadialGradientPolygon(class CRColor *,class CRColor *,class CRArray *,class CRNumber *)",
    "class CRPoint3 * __stdcall CRCreatePoint3(class CRNumber *,class CRNumber *,class CRNumber *)",
    "class CRVector2 * __stdcall CRXVector2(void)",
    "bool __stdcall CROnMouseButton(class CRView *,double,long,long,unsigned char,bool,unsigned char)",
    "class CRMatte * __stdcall CRIntersectMatte(class CRMatte *,class CRMatte *)",
    "class CRUserData * __stdcall CRCreateUserData(struct IUnknown *)",
    "class CRLineStyle * __stdcall CRMiterLimit(class CRLineStyle *,double)",
    "class CRImage * __stdcall CROpacity(class CRImage *,class CRNumber *)",
    "class CRNumber * __stdcall CRSphericalCoordXYAngle(class CRVector3 *)",
    "struct HDC__ * __stdcall CRGetDC(class CRView *)",
    "class CRGeometry * __stdcall CRLightColor(class CRGeometry *,class CRColor *)",
    "bool __stdcall CRSetCompositeDirectlyToTarget(class CRView *,bool)",
    "class CRCamera * __stdcall CRTransform(class CRCamera *,class CRTransform3 *)",
    "class CRFontStyle * __stdcall CRBold(class CRFontStyle *)",
    "class CRVector2 * __stdcall CRDerivative(class CRVector2 *)",
    "DllCanUnloadNow",
    "class CRImage * __stdcall CRRenderResolution(class CRImage *,long,long)",
    "class CRNumber * __stdcall CRSphericalCoordLength(class CRVector3 *)",
    "class CREvent * __stdcall CRTimer(double)",
    "bool __stdcall CRResumeModel(class CRView *)",
    "class CRNumber * __stdcall CRAbs(class CRNumber *)",
    "class CRTransform3 * __stdcall CRCompose3(class CRArray *)",
    "class CRGeometry * __stdcall CRDiffuseColor(class CRGeometry *,class CRColor *)",
    "class CRPath2 * __stdcall CRPieRadians(class CRNumber *,class CRNumber *,class CRNumber *,class CRNumber *)",
    "class CRImage * __stdcall CRHatchVertical(class CRColor *,class CRNumber *)",
    "class CRTransform2 * __stdcall CRParallelTransform2(class CRTransform3 *)",
    "class CRTransform3 * __stdcall CRZShear3(double,double)",
    "class CRImage * __stdcall CROverlay(class CRImage *,class CRImage *)",
    "class CRString * __stdcall CRToString(class CRNumber *,double)",
    "bool __stdcall CRTriggerEvent(class CREvent *,class CRBvr *)",
    "class CRImage * __stdcall CRHatchCross(class CRColor *,class CRNumber *)",
    "class CRTransform2 * __stdcall CRScale2Uniform(double)",
    "bool __stdcall CRReleaseGCLock(void)",
    "class CRGeometry * __stdcall CRShadow(class CRGeometry *,class CRGeometry *,class CRPoint3 *,class CRVector3 *)",
    "class CRColor * __stdcall CRGray(void)",
    "class CRLineStyle * __stdcall CRDetail(class CRLineStyle *)",
    "class CRBvr * __stdcall CRSequence(class CRBvr *,class CRBvr *)",
    "class CRImage * __stdcall CRTextImage(class CRString *,class CRFontStyle *)",
    "class CRBvr * __stdcall CRGetOutputBvr(class CRDXTransformResult *)",
    "void __stdcall CRDestroyView(class CRView *)",
    "class CRImage * __stdcall CRStringImage(unsigned short *,class CRFontStyle *)",
    "class CRMontage * __stdcall CRImageMontage(class CRImage *,double)",
    "class CRNumber * __stdcall CRInterpolate(class CRNumber *,class CRNumber *,class CRNumber *)",
    "class CRImage * __stdcall CROpacity(class CRImage *,double)",
    "class CRImage * __stdcall CRHatchDiagonalCross(class CRColor *,double)",
    "class CRPoint3 * __stdcall CRCreatePoint3(double,double,double)",
    "class CRColor * __stdcall CRNavy(void)",
    "class CRNumber * __stdcall CRGetHue(class CRColor *)",
    "class CRTransform2 * __stdcall CRTranslate2(class CRPoint2 *)",
    "bool __stdcall CRIsModifiableBvr(class CRBvr *)",
    "class CRString * __stdcall CRConcatString(class CRString *,class CRString *)",
    "class CRPickableResult * __stdcall CRPickable(class CRGeometry *)",
    "class CRGeometry * __stdcall CRBlendTextureDiffuse(class CRGeometry *,class CRBoolean *)",
    "class CRNumber * __stdcall CRIntegral(class CRNumber *)",
    "DllUnregisterServer",
    "class CRCamera * __stdcall CRParallelCameraAnim(class CRNumber *)",
    "bool __stdcall CRRemoveSite(class CRSite *)",
    "class CRPath2 * __stdcall CRRect(class CRNumber *,class CRNumber *)",
    "class CRNumber * __stdcall CRToDegrees(class CRNumber *)",
    "class CRColor * __stdcall CRAqua(void)",
    "bool __stdcall CRSetElement(class CRArray *,long,class CRBvr *,long)",
    "class CRVector2 * __stdcall CRZeroVector2(void)",
    "unsigned long __stdcall CRImportGeometry(unsigned short const *,unsigned short const *,class CRImportSite *,struct IBindHost *,class CRGeometry *,class CRGeometry * *,class CREvent * *,class CRNumber * *,class CRNumber * *)",
    "class CRTransform2 * __stdcall CRRotate2Degrees(double)",
    "class CRPath2 * __stdcall CRPie(double,double,double,double)",
    "bool __stdcall CRTick(class CRView *,double,bool *)",
    "class CRMontage * __stdcall CREmptyMontage(void)",
    "struct IServiceProvider * __stdcall CRGetServiceProvider(class CRView *)",
    "class CRImage * __stdcall CRHatchHorizontal(class CRColor *,class CRNumber *)",
    "class CRImage * __stdcall CRHatchVertical(class CRColor *,double)",
    "class CRTransform3 * __stdcall CRZShear3(class CRNumber *,class CRNumber *)",
    "class CRGeometry * __stdcall CRSpotLight(class CRNumber *,class CRNumber *)",
    "class CRTransform2 * __stdcall CRTranslate2(class CRVector2 *)",
    "class CRImage * __stdcall CRStringImage(class CRString *,class CRFontStyle *)",
    "class CRTransform3 * __stdcall CRTranslate3(class CRVector3 *)",
    "class CRNumber * __stdcall CRPolarCoordAngle(class CRVector2 *)",
    "bool __stdcall CRSetDC(class CRView *,struct HDC__ *)",
    "class CRColor * __stdcall CRMaroon(void)",
    "class CRNumber * __stdcall CRSlowInSlowOut(double,double,double,double)",
    "class CRNumber * __stdcall CRDot(class CRVector2 *,class CRVector2 *)",
    "unsigned long __stdcall CRQueryHitPoint(class CRView *,unsigned long,struct tagRECT const *,struct tagPOINT,long)",
    "bool __stdcall CRAddBvrToRun(class CRView *,class CRBvr *,bool,long *)",
    "class CRGeometry * __stdcall CRPointLight(void)",
    "class CRVector3 * __stdcall CRTransform(class CRVector3 *,class CRTransform3 *)",
    "class CRColor * __stdcall CRLime(void)",
    "class CREvent * __stdcall CRTimer(class CRNumber *)",
    "class CRColor * __stdcall CRColorHsl(double,double,double)",
    "class CRCamera * __stdcall CRDepthResolution(class CRCamera *,double)",
    "class CRVector3 * __stdcall CRSub(class CRVector3 *,class CRVector3 *)",
    "class CRGeometry * __stdcall CRAddPickData(class CRGeometry *,struct IUnknown *,bool)",
    "class CRJoinStyle * __stdcall CRJoinStyleBevel(void)",
    "class CRPoint3 * __stdcall CRMin(class CRBbox3 *)",
    "class CREvent * __stdcall CRAndEvent(class CREvent *,class CREvent *)",
    "class CRBoolean * __stdcall CROr(class CRBoolean *,class CRBoolean *)",
    "class CRSound * __stdcall CRMix(class CRArray *)",
    "class CRBvr * __stdcall CRUntilNotify(class CRBvr *,class CREvent *,class CRUntilNotifier *)",
    "double __stdcall CRGetSimulationTime(class CRView *)",
    "unsigned long __stdcall CRImportSound(unsigned short const *,unsigned short const *,class CRImportSite *,struct IBindHost *,bool,class CRSound *,class CRSound * *,class CRNumber * *,class CREvent * *,class CRNumber * *,class CRNumber * *)",
    "class CRTransform2 * __stdcall CRScale2(class CRVector2 *)",
    "bool __stdcall CRDoGC(void)",
    "class CRImage * __stdcall CRGetImage(class CRImportationResult *)",
    "class CRNumber * __stdcall CRCreateNumber(double)",
    "class CRBvr * __stdcall CRSequenceArray(long,class CRBvr * * const)",
    "class CRCamera * __stdcall CRPerspectiveCamera(double,double)",
    "class CRNumber * __stdcall CRDistance(class CRPoint3 *,class CRPoint3 *)",
    "class CRImage * __stdcall CRHatchForwardDiagonal(class CRColor *,double)",
    "class CRVector2 * __stdcall CRYVector2(void)",
    "class CRNumber * __stdcall CRLocalTime(void)",
    "class CRPath2 * __stdcall CRArcRadians(class CRNumber *,class CRNumber *,class CRNumber *,class CRNumber *)",
    "class CRCamera * __stdcall CRDepth(class CRCamera *,double)",
    "class CREvent * __stdcall CRNever(void)",
    "class CRVector2 * __stdcall CRCreateVector2(class CRNumber *,class CRNumber *)",
    "class CRMicrophone * __stdcall CRTransform(class CRMicrophone *,class CRTransform3 *)",
    "class CRTransform2 * __stdcall CRXShear2(class CRNumber *)",
    "class CRImage * __stdcall CRTextImage(unsigned short *,class CRFontStyle *)",
    "long __stdcall CRAddElement(class CRArray *,class CRBvr *,unsigned long)",
    "class CRColor * __stdcall CRBlue(void)",
    "class CRPoint2 * __stdcall CRProject(class CRPoint3 *,class CRCamera *)",
    "class CRFontStyle * __stdcall CRItalic(class CRFontStyle *)",
    "class CRGeometry * __stdcall CRUnionGeometry(class CRGeometry *,class CRGeometry *)",
    "class CRCamera * __stdcall CRParallelCamera(double)",
    "bool __stdcall CRIsConnected(struct HINSTANCE__ *)",
    "class CRBvr * __stdcall CRNth(class CRTuple *,long)",
    "class CRNumber * __stdcall CRMul(class CRNumber *,class CRNumber *)",
    "long __stdcall CRGetLastError(void)",
    "class CRSound * __stdcall CRMix(class CRSound *,class CRSound *)",
    "bool __stdcall CRPauseModel(class CRView *)",
    "class CRImage * __stdcall CRCrop(class CRImage *,class CRPoint2 *,class CRPoint2 *)",
    "bool __stdcall CROnMouseMove(class CRView *,double,long,long,unsigned char)",
    "class CRColor * __stdcall CRMagenta(void)",
    "class CRString * __stdcall CRToString(class CRNumber *,class CRNumber *)",
    "class CRTransform2 * __stdcall CRCompose2(class CRArray *)",
    "float __stdcall CRGetImportPriority(class CRBvr *)",
    "class CRImage * __stdcall CRColorKey(class CRImage *,class CRColor *)",
    "class CRNumber * __stdcall CRLengthSquared(class CRVector2 *)",
    "class CRPath2 * __stdcall CRCubicBSplinePath(class CRArray *,class CRArray *)",
    "class CRTransform3 * __stdcall CRScale3Uniform(class CRNumber *)",
    "class CRGeometry * __stdcall CROpacity(class CRGeometry *,class CRNumber *)",
    "class CRPoint2 * __stdcall CRPoint2Polar(class CRNumber *,class CRNumber *)",
    "class CRTransform3 * __stdcall CRScale3Uniform(double)",
    "bool __stdcall CRSwitchToString(class CRString *,unsigned short *)",
    "class CRFontStyle * __stdcall CRSize(class CRFontStyle *,class CRNumber *)",
    "class CRBvr * __stdcall CRGetElement(class CRArray *,long)",
    "class CRTransform3 * __stdcall CRXShear3(class CRNumber *,class CRNumber *)",
    "class CRBvr * __stdcall CRSampleAtLocalTime(class CRBvr *,double)",
    "class CRVector2 * __stdcall CRMul(class CRVector2 *,class CRNumber *)",
    "class CREvent * __stdcall CRPredicate(class CRBoolean *)",
    "class CRNumber * __stdcall CRGetProgress(class CRImportationResult *)",
    "class CRImage * __stdcall CRHatchBackwardDiagonal(class CRColor *,class CRNumber *)",
    "bool __stdcall CRGetPreference(class CRView *,unsigned short *,struct tagVARIANT *)",
    "class CREvent * __stdcall CRNotify(class CREvent *,class CRUntilNotifier *)",
    "class CRImage * __stdcall CRTransformColorRGB(class CRImage *,class CRTransform3 *)",
    "class CRGeometry * __stdcall CRUndetectable(class CRGeometry *)",
    "class CRNumber * __stdcall CRGetRed(class CRColor *)",
    "class CRTransform2 * __stdcall CRFollowPathAngleUprightEval(class CRPath2 *,class CRNumber *)",
    "unsigned short const * __stdcall CRGetLastErrorString(void)",
    "class CRNumber * __stdcall CRLength(class CRVector2 *)",
    "class CRNumber * __stdcall CRGetX(class CRPoint3 *)",
    "class CRGeometry * __stdcall CRImportDirect3DRMVisualWrapped(struct IUnknown *,long,double,double,double,double,double,double,double,double,double,double,double,double,double,unsigned long)",
    "class CRVector2 * __stdcall CRDerivative(class CRPoint2 *)",
    "class CRLineStyle * __stdcall CRDefaultLineStyle(void)",
    "class CRImage * __stdcall CRRadialGradientPolygon(class CRColor *,class CRColor *,class CRArray *,double)",
    "class CRMatte * __stdcall CRClearMatte(void)",
    "class CRColor * __stdcall CRColorHsl(class CRNumber *,class CRNumber *,class CRNumber *)",
    "class CRMatte * __stdcall CRUnionMatte(class CRMatte *,class CRMatte *)",
    "class CRTransform2 * __stdcall CRYShear2(class CRNumber *)",
    "class CRPoint2 * __stdcall CRMin(class CRBbox2 *)",
    "class CRBvr * __stdcall CRDuration(class CRBvr *,class CRNumber *)",
    "bool __stdcall CRSetDirectDrawSurface(class CRView *,struct IUnknown *)",
    "class CRBoolean * __stdcall CREQ(class CRNumber *,class CRNumber *)",
    "class CRImage * __stdcall CRTransform(class CRImage *,class CRTransform2 *)",
    "unsigned long __stdcall CRImportGeometryWrapped(unsigned short const *,unsigned short const *,class CRImportSite *,struct IBindHost *,class CRGeometry *,class CRGeometry * *,class CREvent * *,class CRNumber * *,class CRNumber * *,long,double,double,double,double,double,double,double,double,double,double,double,double,double,unsigned long)",
    "class CRNumber * __stdcall CRDistanceSquared(class CRPoint3 *,class CRPoint3 *)",
    "class CRFontStyle * __stdcall CRStrikethrough(class CRFontStyle *)",
    "class CRBvr * __stdcall CRUntilEx(class CRBvr *,class CREvent *)",
    "class CRFontStyle * __stdcall CRFamily(class CRFontStyle *,class CRString *)",
    "class CRMatte * __stdcall CROpaqueMatte(void)",
    "class CRArray * __stdcall CRCreateArray(long,class CRBvr * * const,unsigned long)",
    "class CRTransform3 * __stdcall CRRotate3(class CRVector3 *,double)",
    "class CRBoolean * __stdcall CRIsSingular(class CRTransform3 *)",
    "class CRLineStyle * __stdcall CRLineColor(class CRLineStyle *,class CRColor *)",
    "class CRNumber * __stdcall CRLog10(class CRNumber *)",
    "class CRLineStyle * __stdcall CREndEx(class CRLineStyle *,unsigned long)",
    "class CRNumber * __stdcall CRViewTimeDelta(void)",
    "unsigned long __stdcall CRImportImage(unsigned short const *,unsigned short const *,class CRImportSite *,struct IBindHost *,bool,unsigned char,unsigned char,unsigned char,class CRImage *,class CRImage * *,class CREvent * *,class CRNumber * *,class CRNumber * *)",
    "class CRFontStyle * __stdcall CRSize(class CRFontStyle *,double)",
    "class CRVector3 * __stdcall CRYVector3(void)",
    "class CRNumber * __stdcall CRViewFrameRate(void)",
    "class CRColor * __stdcall CRColorRgb(double,double,double)",
    "class CRGeometry * __stdcall CRLightRange(class CRGeometry *,class CRNumber *)",
    "class CRImage * __stdcall CRLinearGradientMulticolor(class CRArray *,class CRArray *)",
    "class CRPoint2 * __stdcall CRCreatePoint2(class CRNumber *,class CRNumber *)",
    "class CRTransform3 * __stdcall CRIdentityTransform3(void)",
    "class CRVector3 * __stdcall CRSub(class CRPoint3 *,class CRPoint3 *)",
    "class CRImage * __stdcall CRUndetectable(class CRImage *)",
    "class CRColor * __stdcall CRTeal(void)",
    "class CRBoolean * __stdcall CRGTE(class CRNumber *,class CRNumber *)",
    "class CRArray * __stdcall CRCreateArray(long,double * const,enum CR_BVR_TYPEID)",
    "class CRMatte * __stdcall CRTransform(class CRMatte *,class CRTransform2 *)",
    "class CRViewSite * __stdcall CRGetSite(class CRView *)",
    "class CRPoint2 * __stdcall CRMax(class CRBbox2 *)",
    "DllGetClassObject",
    "bool __stdcall CRRender(class CRView *)",
    "struct IUnknown * __stdcall CRGetData(class CRUserData *)",
    "class CRNumber * __stdcall CRGetBlue(class CRColor *)",
    "class CRSound * __stdcall CRLoop(class CRSound *)",
    "class CRTransform3 * __stdcall CRYShear3(double,double)",
    "class CRColor * __stdcall CRPurple(void)",
    "class CRColor * __stdcall CRFuchsia(void)",
    "bool __stdcall CRPutPreference(class CRView *,unsigned short *,struct tagVARIANT)",
    "class CRPath2 * __stdcall CRLine(class CRPoint2 *,class CRPoint2 *)",
    "class CRPoint2 * __stdcall CRSub(class CRPoint2 *,class CRVector2 *)",
    "class CRJoinStyle * __stdcall CRJoinStyleMiter(void)",
    "class CRTransform3 * __stdcall CRLookAtFrom(class CRPoint3 *,class CRPoint3 *,class CRVector3 *)",
    "class CRPickableResult * __stdcall CRPickableOccluded(class CRGeometry *)",
    "class CRBoolean * __stdcall CRNot(class CRBoolean *)",
    "class CRBoolean * __stdcall CRTrue(void)",
    "class CRGeometry * __stdcall CRAmbientLight(void)",
    "class CRTransform2 * __stdcall CRXShear2(double)",
    "class CRMontage * __stdcall CRImageMontageAnim(class CRImage *,class CRNumber *)",
    "class CRPoint2 * __stdcall CROrigin2(void)",
    "class CRImage * __stdcall CRGetImage(class CRPickableResult *)",
    "class CRVector3 * __stdcall CRVector3Spherical(double,double,double)",
    "bool __stdcall CRSwitchToNumber(class CRNumber *,double)",
    "class CRDashStyle * __stdcall CRDashStyleSolid(void)",
    "class CRTransform2 * __stdcall CRFollowPathAngleUpright(class CRPath2 *,class CRNumber *)",
    "class CREndStyle * __stdcall CREndStyleRound(void)",
    "class CRBvr * __stdcall CRSecond(class CRPair *)",
    "class CRNumber * __stdcall CRLn(class CRNumber *)",
    "class CRGeometry * __stdcall CRTriMesh(class TriMeshData &)",
    "class CRPath2 * __stdcall CRRoundRect(class CRNumber *,class CRNumber *,class CRNumber *,class CRNumber *)",
    "class CRTransform2 * __stdcall CRFollowPathAngleEval(class CRPath2 *,class CRNumber *)",
    "class CRLineStyle * __stdcall CRDashEx(class CRLineStyle *,unsigned long)",
    "struct IUnknown * __stdcall CRGetDirectDrawSurface(class CRView *)",
    "void __stdcall CRClearLastError(void)",
    "class CRNumber * __stdcall CRAcos(class CRNumber *)",
    "bool __stdcall CRGetDDD3DRM(class CRView *,struct IUnknown * *,struct IUnknown * *)",
    "class CRPoint3 * __stdcall CRSub(class CRPoint3 *,class CRVector3 *)",
    "class CRPoint2 * __stdcall CRMousePosition(void)",
    "class CRMontage * __stdcall CRUnionMontageArray(class CRArray *)",
    "class CRNumber * __stdcall CRTan(class CRNumber *)",
    "class CRFontStyle * __stdcall CRWeight(class CRFontStyle *,class CRNumber *)",
    "class CRPath2 * __stdcall CRPolyline(class CRArray *)",
    "class CRBbox2 * __stdcall CRBoundingBox(class CRPath2 *,class CRLineStyle *)",
    "class CRDXTransformResult * __stdcall CRApplyDXTransform(struct IUnknown *,long,class CRBvr * *,class CRBvr *)",
    "bool __stdcall CROnFocus(class CRView *,bool)",
    "class CRImage * __stdcall CRHatchForwardDiagonal(class CRColor *,class CRNumber *)",
    "class CRImage * __stdcall CRHatchHorizontal(class CRColor *,double)",
    "class CRNumber * __stdcall CRAsin(class CRNumber *)",
    "class CRNumber * __stdcall CRSin(class CRNumber *)",
    "class CRBoolean * __stdcall CRKeyState(class CRNumber *)",
    "class CRFontStyle * __stdcall CRTextColor(class CRFontStyle *,class CRColor *)",
    "class CRLineStyle * __stdcall CRJoin(class CRLineStyle *,class CRJoinStyle *)",
    "class CRTransform3 * __stdcall CRCompose3(class CRTransform3 *,class CRTransform3 *)",
    "class CRLineStyle * __stdcall CREmptyLineStyle(void)",
    "class CRTuple * __stdcall CRCreateTuple(long,class CRBvr * * const)",
    "double __stdcall CRGetConstDuration(class CREvent *)",
    "class CREndStyle * __stdcall CREndStyleSquare(void)",
    "class CRNumber * __stdcall CRGetSize(class CRImportationResult *)",
    "class CRGeometry * __stdcall CRSpotLight(class CRNumber *,double)",
    "class CRBoolean * __stdcall CRRightButtonState(void)",
    "bool __stdcall CROnKey(class CRView *,double,long,bool,unsigned char)",
    "class CRNumber * __stdcall CRDot(class CRVector3 *,class CRVector3 *)",
    "class CREvent * __stdcall CRNotEvent(class CREvent *)",
    "class CRNumber * __stdcall CRGetZ(class CRPoint3 *)",
    "class CRDashStyle * __stdcall CRDashStyleDashed(void)",
    "class CRNumber * __stdcall CRGetX(class CRVector3 *)",
    "class CRBvr * __stdcall CRSubstituteTime(class CRBvr *,class CRNumber *)",
    "bool __stdcall CRSetBvrAsProperty(class CRDXTransformResult *,unsigned short const *,class CRBvr *)",
    "class CRBvr * __stdcall CRImportance(class CRBvr *,double)",
    "unsigned short const * __stdcall CRVersionString(void)",
    "class CRVector2 * __stdcall CRDiv(class CRVector2 *,class CRNumber *)",
    "class CRString * __stdcall CRModifiableString(unsigned short *)",
    "class CRPath2 * __stdcall CRRoundRect(double,double,double,double)",
    "class CRColor * __stdcall CREmptyColor(void)",
    "class CRPath2 * __stdcall CRTextPath(class CRString *,class CRFontStyle *)",
    "class CRNumber * __stdcall CRGetX(class CRVector2 *)",
    "class CRImage * __stdcall CROverlay(class CRArray *)",
    "class CREvent * __stdcall CRKeyUp(long)",
    "class CRMatte * __stdcall CRDifferenceMatte(class CRMatte *,class CRMatte *)",
    "class CRNumber * __stdcall CRGetSaturation(class CRColor *)",
    "class CRTransform2 * __stdcall CRScale2(double,double)",
    "class CRLineStyle * __stdcall CRJoinEx(class CRLineStyle *,unsigned long)",
    "class CRTransform3 * __stdcall CRInverse(class CRTransform3 *)",
    "class CRVector2 * __stdcall CRVector2Polar(double,double)",
    "class CRImage * __stdcall CREmptyImage(void)",
    "class CRTransform3 * __stdcall CRTransform4x4(class CRArray *)",
    "class CRBvr * __stdcall CRNth(class CRArray *,class CRNumber *)",
    "class CRFontStyle * __stdcall CRFont(unsigned short *,double,class CRColor *)",
    "class CRNumber * __stdcall CRLengthSquared(class CRVector3 *)",
    "class CRGeometry * __stdcall CRModelClip(class CRGeometry *,class CRPoint3 *,class CRVector3 *)",
    "class CRSound * __stdcall CRPhase(class CRSound *,class CRNumber *)",
    "enum CR_BVR_TYPEID __stdcall CRGetArrayTypeId(class CRBvr *)",
    "class CRGeometry * __stdcall CRTextureImage(class CRGeometry *,class CRImage *)",
    "class CRTransform2 * __stdcall CRTransform3x2(double *,unsigned int)",
    "class CRBvr * __stdcall CRUninitializedBvr(enum CR_BVR_TYPEID)",
    "class CRImage * __stdcall CRTile(class CRImage *)",
    "class CRPoint3 * __stdcall CRAdd(class CRPoint3 *,class CRVector3 *)",
    "class CRPoint3 * __stdcall CRTransform(class CRPoint3 *,class CRTransform3 *)",
    "long __stdcall CRImportStatus(class CRBvr *)",
    "class CRImage * __stdcall CRMapToUnitSquare(class CRImage *)",
    "class CRBoolean * __stdcall CRGT(class CRNumber *,class CRNumber *)",
    "class CRColor * __stdcall CRGreen(void)",
    "class CRBvr * __stdcall CRRepeat(class CRBvr *,long)",
    "class CRVector3 * __stdcall CRCross(class CRVector3 *,class CRVector3 *)",
    "class CRTransform2 * __stdcall CRRotate2(double)",
    "class CRPath2 * __stdcall CROval(class CRNumber *,class CRNumber *)",
    "class CRImage * __stdcall CRGradientPolygon(class CRArray *,class CRArray *)",
    "class CRImage * __stdcall CRRadialGradientRegularPoly(class CRColor *,class CRColor *,class CRNumber *,class CRNumber *)",
    "bool __stdcall CRAddRefGC(void *)",
    "bool __stdcall CRPropagate(class CRView *)",
    "class CRPoint3 * __stdcall CROrigin3(void)",
    "class CRString * __stdcall CRCreateString(unsigned short *)",
    "bool __stdcall CRIsConstantBvr(class CRBvr *)",
    "class CRTransform3 * __stdcall CRXShear3(double,double)",
    "class CRVector3 * __stdcall CRVector3Spherical(class CRNumber *,class CRNumber *,class CRNumber *)",
    "bool __stdcall CRRemoveRunningBvr(class CRView *,long)",
    "class CRBvr * __stdcall COMToCRBvr(struct IUnknown *)",
    "class CRTransform2 * __stdcall CRFollowPathAngle(class CRPath2 *,double)",
    "class CRPath2 * __stdcall CRTransform(class CRPath2 *,class CRTransform2 *)",
    "class CRTransform3 * __stdcall CRTranslate3(class CRNumber *,class CRNumber *,class CRNumber *)",
    "unsigned long __stdcall CRImportMovie(unsigned short const *,unsigned short const *,class CRImportSite *,struct IBindHost *,bool,class CRImage *,class CRSound *,class CRImage * *,class CRSound * *,class CRNumber * *,class CREvent * *,class CRNumber * *,class CRNumber * *)",
    "unsigned short * __stdcall CRExtract(class CRString *)",
    "class CRNumber * __stdcall CRSphericalCoordXYAngle(class CRPoint3 *)",
    "bool __stdcall CRImportCancel(class CRBvr *)",
    "class CRImage * __stdcall CRRadialGradientRegularPoly(class CRColor *,class CRColor *,double,double)",
    "class CRVector3 * __stdcall CRZeroVector3(void)",
    "class CRSound * __stdcall CRRenderSound(class CRGeometry *,class CRMicrophone *)",
    "class CRBoolean * __stdcall CRAnd(class CRBoolean *,class CRBoolean *)",
    "class CRImage * __stdcall CRGradientHorizontal(class CRColor *,class CRColor *,class CRNumber *)",
    "class CRBbox2 * __stdcall CRBoundingBox(class CRImage *)",
    "class CRPath2 * __stdcall CRRect(double,double)",
    "class CREvent * __stdcall CRSnapshot(class CREvent *,class CRBvr *)",
    "bool __stdcall CRInit(class CRBvr *,class CRBvr *)",
    "class CRTransform2 * __stdcall CRFollowPath(class CRPath2 *,double)",
    "class CRNumber * __stdcall CRSqrt(class CRNumber *)",
    "bool __stdcall CRStopModel(class CRView *)",
    "class CRNumber * __stdcall CRLength(class CRVector3 *)",
    "class CRNumber * __stdcall CRNeg(class CRNumber *)",
    "class CRImage * __stdcall CRImportDirectDrawSurface(struct IUnknown *,class CREvent *)",
    "class CRVector3 * __stdcall CRNormalize(class CRVector3 *)",
    "bool __stdcall CRSetImportPriority(class CRBvr *,float)",
    "class CRLineStyle * __stdcall CRMiterLimit(class CRLineStyle *,class CRNumber *)",
    "bool __stdcall CRConnect(struct HINSTANCE__ *)",
    "bool __stdcall CRAcquireGCLock(void)",
    "class CRPoint2 * __stdcall CRTransform(class CRPoint2 *,class CRTransform2 *)",
    "class CRPath2 * __stdcall CRConcat(class CRPath2 *,class CRPath2 *)",
    "class CRImage * __stdcall CRGradientHorizontal(class CRColor *,class CRColor *,double)",
    "class CRPath2 * __stdcall CRStringPath(unsigned short *,class CRFontStyle *)",
    "class CRImportationResult * __stdcall CRImportMedia(unsigned short *,void *,enum CR_MEDIA_SOURCE,void * * const,unsigned long,class CRImportSite *)",
    "class CRPath2 * __stdcall CRPolydrawPath(double *,unsigned int,double *,unsigned int)",
    "class CRPoint2 * __stdcall CRCreatePoint2(double,double)",
    "class CRMontage * __stdcall CRUnionMontage(class CRMontage *,class CRMontage *)",
    "bool __stdcall CRAddSite(class CRSite *)",
    "class CRTransform2 * __stdcall CRFollowPathAngleUpright(class CRPath2 *,double)",
    "class CRGeometry * __stdcall CRAmbientColor(class CRGeometry *,class CRColor *)",
    "class CRVector3 * __stdcall CRAdd(class CRVector3 *,class CRVector3 *)",
    "class CRVector3 * __stdcall CRMul(class CRVector3 *,double)",
    "class CRImage * __stdcall CRImageQuality(class CRImage *,unsigned long)",
    "class CRGeometry * __stdcall CRDirectionalLight(void)",
    "class CRBoolean * __stdcall CRLeftButtonState(void)",
    "class CRImage * __stdcall CRClipPolygonImage(class CRImage *,class CRArray *)",
    "class CRBoolean * __stdcall CRFalse(void)",
    "class CRPoint3 * __stdcall CRPoint3Spherical(class CRNumber *,class CRNumber *,class CRNumber *)",
    "class CRLineStyle * __stdcall CRDash(class CRLineStyle *,class CRDashStyle *)",
    "class CRColor * __stdcall CRRed(void)",
    "class CRGeometry * __stdcall CRSpecularExponent(class CRGeometry *,double)",
    "class CRNumber * __stdcall CRSub(class CRNumber *,class CRNumber *)",
    "long __stdcall CRLength(class CRTuple *)",
    "class CRTransform2 * __stdcall CRTranslate2(double,double)",
    "class CRVector3 * __stdcall CRDiv(class CRVector3 *,class CRNumber *)",
    "class CRView * __stdcall CRCreateView(void)",
    "bool __stdcall CRGetCompositeDirectlyToTarget(class CRView *)",
    "class CRBvr * __stdcall CREndEvent(class CRBvr *)",
    "class CRTransform2 * __stdcall CRFollowPathAngle(class CRPath2 *,class CRNumber *)",
    "class CRNumber * __stdcall CRPixel(void)",
    "class CRGeometry * __stdcall CRTransform(class CRGeometry *,class CRTransform3 *)",
    "class CRTransform3 * __stdcall CRScale3(double,double,double)",
    "class CRNumber * __stdcall CRRound(class CRNumber *)",
    "class CREvent * __stdcall CRLeftButtonUp(void)",
    "class CREvent * __stdcall CRGetEvent(class CRPickableResult *)",
    "class CRGeometry * __stdcall CRD3DRMTexture(class CRGeometry *,struct IUnknown *)",
    "class CRPath2 * __stdcall CROval(double,double)",
    "bool __stdcall CRIsImport(class CRBvr *)",
    "class CRMatte * __stdcall CRTextMatte(class CRString *,class CRFontStyle *)",
    "class CRBvr * __stdcall CRDuration(class CRBvr *,double)",
    "class CRLineStyle * __stdcall CRWidth(class CRLineStyle *,double)",
    "class CRNumber * __stdcall CRInterpolate(double,double,double)",
    "class CRBoolean * __stdcall CRCreateBoolean(bool)",
    "class CRVector2 * __stdcall CRSub(class CRPoint2 *,class CRPoint2 *)",
    "class CRTransform2 * __stdcall CRTransform3x2(class CRArray *)",
    "class CRNumber * __stdcall CRGetLightness(class CRColor *)",
    "struct HWND__ * __stdcall CRGetWindow(class CRView *)",
    "class CRTransform2 * __stdcall CRCompose2(class CRTransform2 *,class CRTransform2 *)",
    "class CRNumber * __stdcall CRPolarCoordLength(class CRVector2 *)",
    "class CRColor * __stdcall CRColorRgb(class CRNumber *,class CRNumber *,class CRNumber *)",
    "class CRVector3 * __stdcall CRCreateVector3(class CRNumber *,class CRNumber *,class CRNumber *)",
    "class CRVector3 * __stdcall CRIntegral(class CRVector3 *)",
    "class CRBbox3 * __stdcall CRBoundingBox(class CRGeometry *)",
    "class CRImage * __stdcall CRRender(class CRGeometry *,class CRCamera *)",
    "class CRBvr * __stdcall CRRunOnce(class CRBvr *)",
    "class CRJoinStyle * __stdcall CRJoinStyleRound(void)",
    "bool __stdcall CRSetClipRect(class CRView *,long,long,long,long)",
    "class CRNumber * __stdcall CRDistanceSquared(class CRPoint2 *,class CRPoint2 *)",
    "class CRBvr * __stdcall CRExtendedAttrib(class CRBvr *,unsigned short *,struct tagVARIANT)",
    "class CRGeometry * __stdcall CROpacity(class CRGeometry *,double)",
    "class CRNumber * __stdcall CRGetX(class CRPoint2 *)",
    "class CRImage * __stdcall CRSolidColorImage(class CRColor *)",
    "class CRFontStyle * __stdcall CRWeight(class CRFontStyle *,double)",
    "class CRPath2 * __stdcall CRStringPath(class CRString *,class CRFontStyle *)",
    "class CRBoolean * __stdcall CRLTE(class CRNumber *,class CRNumber *)",
    "class CREvent * __stdcall CRRightButtonUp(void)",
    "class CRVector2 * __stdcall CRVector2Polar(class CRNumber *,class CRNumber *)",
    "class CRTransform2 * __stdcall CRFollowPath(class CRPath2 *,class CRNumber *)",
    "class CRNumber * __stdcall CRModifiableNumber(double)",
    "class CRPath2 * __stdcall CRArcRadians(double,double,double,double)",
    "class CRVector3 * __stdcall CRMul(class CRVector3 *,class CRNumber *)",
    "class CRNumber * __stdcall CRFloor(class CRNumber *)",
    "class CRNumber * __stdcall CRGetY(class CRVector3 *)",
    "class CRVector2 * __stdcall CRMul(class CRVector2 *,double)",
    "class CREvent * __stdcall CROrEvent(class CREvent *,class CREvent *)",
    "class CRCamera * __stdcall CRDepthResolution(class CRCamera *,class CRNumber *)",
    "bool __stdcall CRSwitchTo(class CRBvr *,class CRBvr *,bool,unsigned long,double)",
    "class CRVector3 * __stdcall CRXVector3(void)",
    "class CRImage * __stdcall CRClip(class CRImage *,class CRMatte *)",
    "DllRegisterServer",
    "class CRGeometry * __stdcall CRImportDirect3DRMVisual(struct IUnknown *)",
    "class CRPoint3 * __stdcall CRPoint3Spherical(double,double,double)",
    "class CRNumber * __stdcall CRDiv(class CRNumber *,class CRNumber *)",
    "class CRNumber * __stdcall CRMod(class CRNumber *,class CRNumber *)",
    "class CRNumber * __stdcall CRSphericalCoordYZAngle(class CRPoint3 *)",
    "class CRVector3 * __stdcall CRDerivative(class CRPoint3 *)",
    "class CRPath2 * __stdcall CRClose(class CRPath2 *)",
    "class CRColor * __stdcall CRWhite(void)",
    "bool __stdcall CRGetRMDevice(class CRView *,struct IUnknown * *,unsigned long *)",
    "class CRTransform2 * __stdcall CRScale2(class CRNumber *,class CRNumber *)",
    "class CRTransform2 * __stdcall CRTranslate2(class CRNumber *,class CRNumber *)",
    "class CRNumber * __stdcall CRDistance(class CRPoint2 *,class CRPoint2 *)",
    "class CRNumber * __stdcall CRAtan(class CRNumber *)",
    "class CRVector2 * __stdcall CRTransform(class CRVector2 *,class CRTransform2 *)",
    "bool __stdcall CRRepaint(class CRView *,long,long,long,long)",
    "class CRFontStyle * __stdcall CRFamily(class CRFontStyle *,unsigned short *)",
    "class CRLineStyle * __stdcall CREnd(class CRLineStyle *,class CREndStyle *)",
    "class CRCamera * __stdcall CRPerspectiveCameraAnim(class CRNumber *,class CRNumber *)",
    "bool __stdcall CRIsReady(class CRBvr *,bool)",
    "class CRNumber * __stdcall CRSphericalCoordYZAngle(class CRVector3 *)",
    "class CREvent * __stdcall CRAlways(void)"
  ],
  "dataclen.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "datime.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "davclnt.dll": [
    "DavFreeUsedDiskSpace",
    "NPGetUniversalName",
    "NPCancelConnection",
    "NPGetConnection",
    "NPFormatNetworkName",
    "NPAddConnection3",
    "NPGetResourceParent",
    "DllCanUnloadNow",
    "NPOpenEnum",
    "NPCloseEnum",
    "DllGetClassObject",
    "NPAddConnection",
    "DllMain",
    "NPGetUser",
    "DavGetDiskSpaceUsage",
    "NPGetCaps",
    "NPEnumResource",
    "NPGetResourceInformation"
  ],
  "dbgeng.dll": [
    "DebugCreate",
    "DebugConnect"
  ],
  "dbghelp.dll": [
    "SymGetModuleInfo",
    "ImageDirectoryEntryToData",
    "SymFromName",
    "DbgHelpCreateUserDump",
    "SymEnumerateModules64",
    "StackWalk",
    "FindFileInSearchPath",
    "SymLoadModuleEx",
    "MakeSureDirectoryPathExists",
    "dh",
    "SymFunctionTableAccess",
    "SymGetLineNext",
    "SymGetSymFromAddr",
    "SymUnDName64",
    "SymGetLineFromAddr",
    "MapDebugInformation",
    "SymGetLineNext64",
    "SymSetSearchPath",
    "GetTimestampForLoadedLibrary",
    "SymGetOptions",
    "UnmapDebugInformation",
    "SymFindFileInPath",
    "SymGetLinePrev64",
    "EnumerateLoadedModules",
    "SymLoadModule",
    "SymGetModuleInfo64",
    "MiniDumpWriteDump",
    "dbghelp",
    "sym",
    "FindExecutableImageEx",
    "SymFunctionTableAccess64",
    "SymCleanup",
    "ImageDirectoryEntryToDataEx",
    "SymEnumSym",
    "SymGetModuleBase",
    "SymGetSymFromAddr64",
    "SymGetModuleBase64",
    "SymRegisterCallback64",
    "SymEnumerateModules",
    "SearchTreeForFile",
    "SymRegisterFunctionEntryCallback",
    "lmi",
    "SymSetOptions",
    "lm",
    "SymEnumerateSymbolsW64",
    "StackWalk64",
    "SymRegisterFunctionEntryCallback64",
    "SymGetLineFromAddr64",
    "SymUnloadModule",
    "omap",
    "SymGetSearchPath",
    "SymEnumerateSymbols",
    "SymGetSymFromName",
    "SymGetLineFromName",
    "SymGetLineFromName64",
    "SymGetTypeInfo",
    "SymGetModuleInfoW",
    "SymSetContext",
    "ImageRvaToVa",
    "SymEnumSymbols",
    "SymInitialize",
    "SymGetSymPrev64",
    "FindFileInPath",
    "ImagehlpApiVersion",
    "MiniDumpReadDumpStream",
    "FindDebugInfoFile",
    "ImageNtHeader",
    "SymUnDName",
    "SymMatchFileName",
    "SymLoadModule64",
    "SymEnumerateSymbols64",
    "FindDebugInfoFileEx",
    "WinDbgExtensionDllInit",
    "SymFromAddr",
    "ExtensionApiVersion",
    "SymSetSymWithAddr64",
    "SymGetSymPrev",
    "SymUnloadModule64",
    "ImagehlpApiVersionEx",
    "ImageRvaToSection",
    "SymGetSymNext64",
    "SymGetLinePrev",
    "DbgHelpCreateUserDumpW",
    "SymEnumSourceFiles",
    "SymEnumTypes",
    "SymGetFileLineOffsets64",
    "SymGetSymNext",
    "vc7fpo",
    "EnumerateLoadedModules64",
    "SymGetSymFromName64",
    "UnDecorateSymbolName",
    "SymEnumerateSymbolsW",
    "SymGetTypeFromName",
    "FindExecutableImage",
    "SymRegisterCallback",
    "SymGetModuleInfoW64",
    "srcfiles",
    "SymMatchString"
  ],
  "dbmsrpcn.dll": [
    "ConnectionOpen",
    "ConnectionOpenW",
    "ConnectionRead",
    "ConnectionMode",
    "ConnectionObjectSize",
    "ConnectionWrite",
    "ConnectionCheckForData",
    "ConnectionVer",
    "ConnectionServerEnumW",
    "ConnectionErrorW",
    "ConnectionTransact",
    "ConnectionWriteOOB",
    "ConnectionError",
    "ConnectionClose",
    "ConnectionServerEnum",
    "ConnectionStatus"
  ],
  "dbnetlib.dll": [
    "TermSession",
    "CloseEnumServers",
    "GenClientContext",
    "ConnectionOpenW",
    "GetNextEnumeration",
    "ConnectionMode",
    "TermSSPIPackage",
    "InitEnumServers",
    "ConnectionWrite",
    "ConnectionErrorW",
    "ConnectionRead",
    "ConnectionObjectSize",
    "ConnectionFlushCache",
    "ConnectionVer",
    "ConnectionOption",
    "ConnectionTransact",
    "ConnectionWriteOOB",
    "InitSession",
    "ConnectionError",
    "ConnectionCheckForData",
    "ConnectionServerEnum",
    "ConnectionClose",
    "ConnectionStatus",
    "InitSSPIPackage",
    "ConnectionOpen",
    "ConnectionSqlVer",
    "ConnectionServerEnumW",
    "ConnectionGetSvrUser"
  ],
  "dbnmpntw.dll": [
    "ConnectionOpen",
    "ConnectionOpenW",
    "ConnectionRead",
    "ConnectionMode",
    "ConnectionObjectSize",
    "ConnectionWrite",
    "ConnectionCheckForData",
    "ConnectionVer",
    "ConnectionServerEnumW",
    "ConnectionErrorW",
    "ConnectionTransact",
    "ConnectionWriteOOB",
    "ConnectionError",
    "ConnectionClose",
    "ConnectionServerEnum",
    "ConnectionStatus"
  ],
  "dciman32.dll": [
    "WinWatchGetClipList",
    "DCICreateOverlay",
    "DCIDraw",
    "DCIBeginAccess",
    "DCICreateOffscreen",
    "DCIDestroy",
    "WinWatchNotify",
    "DCISetClipList",
    "DCICloseProvider",
    "WinWatchClose",
    "DCISetSrcDestClip",
    "DCICreatePrimary",
    "DCIEnum",
    "DCIOpenProvider",
    "DCIEndAccess",
    "WinWatchDidStatusChange",
    "GetWindowRegionData",
    "WinWatchOpen",
    "GetDCRegionData",
    "DCISetDestination"
  ],
  "ddraw.dll": [
    "DirectDrawCreate",
    "GetSurfaceFromDC",
    "GetDDSurfaceLocal",
    "DirectDrawCreateEx",
    "DirectDrawEnumerateA",
    "DDInternalUnlock",
    "GetOLEThunkData",
    "RegisterSpecialCase",
    "ReleaseDDThreadLock",
    "CompleteCreateSysmemSurface",
    "DirectDrawEnumerateExW",
    "AcquireDDThreadLock",
    "D3DParseUnknownCommand",
    "DllGetClassObject",
    "CheckFullscreen",
    "DirectDrawCreateClipper",
    "DSoundHelp",
    "DDInternalLock",
    "DirectDrawEnumerateW",
    "DirectDrawEnumerateExA",
    "DllCanUnloadNow",
    "DDGetAttachedSurfaceLcl"
  ],
  "ddrawex.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "deskadp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "deskmon.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "deskperf.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "devenum.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "devmgr.dll": [
    "DeviceManager_ExecuteW",
    "DeviceProblenWizard_RunDLLW",
    "DeviceCreateHardwarePageEx",
    "DeviceProblemWizardA",
    "DeviceProblemWizardW",
    "DeviceCreateHardwarePage",
    "DeviceAdvancedPropertiesW",
    "DllRegisterServer",
    "DeviceProperties_RunDLLW",
    "DeviceManager_ExecuteA",
    "DeviceManagerPrintW",
    "DevicePropertiesExA",
    "DllGetClassObject",
    "DevicePropertiesW",
    "DeviceProblemTextW",
    "DeviceProblemTextA",
    "DevicePropertiesA",
    "DeviceAdvancedPropertiesA",
    "DevicePropertiesExW",
    "DeviceProblenWizard_RunDLLA",
    "DllCanUnloadNow",
    "DeviceProperties_RunDLLA",
    "DllUnregisterServer",
    "DeviceManagerPrintA"
  ],
  "dfrgres.dll": "No exports",
  "dfrgsnap.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dfrgui.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dfsshlex.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dgnet.dll": [
    "InitHelperDll",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dhcpcsvc.dll": [
    "DhcpQueryHWInfo",
    "DhcpReleaseParameters",
    "DhcpCApiCleanup",
    "McastGenUID",
    "DhcpDeRegisterOptions",
    "DhcpReleaseIpAddressLease",
    "DhcpCApiInitialize",
    "DhcpNotifyMediaReconnected",
    "McastRenewAddress",
    "DhcpRequestCachedParams",
    "DhcpDelPersistentRequestParams",
    "DhcpGetDhcpServicedConnections",
    "DhcpRequestOptions",
    "DhcpOpenGlobalEvent",
    "DhcpRegisterConnectionStateNotification",
    "DhcpNotifyConfigChange",
    "DhcpFreeMem",
    "DhcpRenewIpAddressLease",
    "DhcpGetNotificationStatus",
    "DhcpUndoRequestParams",
    "DhcpLeaseIpAddress",
    "DhcpFallbackRefreshParams",
    "DhcpDeRegisterConnectionStateNotification",
    "DhcpPersistentRequestParams",
    "DhcpReleaseIpAddressLeaseEx",
    "DhcpRegisterOptions",
    "DhcpEnumClasses",
    "DhcpStaticRefreshParams",
    "McastEnumerateScopes",
    "DhcpNotifyConfigChangeEx",
    "McastApiStartup",
    "DhcpDeRegisterParamChange",
    "DhcpRegisterParamChange",
    "DhcpAcquireParameters",
    "DhcpLeaseIpAddressEx",
    "DhcpRemoveDNSRegistrations",
    "DhcpSetMSFTVendorSpecificOptions",
    "DhcpRequestParams",
    "DhcpRenewIpAddressLeaseEx",
    "DhcpAcquireParametersByBroadcast",
    "DhcpHandlePnPEvent",
    "ServiceMain",
    "McastApiCleanup",
    "McastRequestAddress",
    "McastReleaseAddress"
  ],
  "dhcpmon.dll": [
    "InitHelperDll"
  ],
  "dhcpqec.dll": [
    "InitializeQec",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "UninitializeQec",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dhcpsapi.dll": [
    "DhcpGetSuperScopeInfoV4",
    "DhcpServerSetConfigV4",
    "DhcpGetAllOptionValues",
    "DhcpEnumSubnetElementsV5",
    "DhcpRemoveSubnetElementV5",
    "DhcpAuditLogSetParams",
    "DhcpDeleteMClientInfo",
    "DhcpCreateClientInfo",
    "DhcpDeleteClass",
    "DhcpRemoveOptionValue",
    "DhcpGetOptionValueV5",
    "DhcpAddSubnetElement",
    "DhcpServerGetConfigV4",
    "DhcpSetOptionValue",
    "DhcpServerRestoreDatabase",
    "DhcpScanMDatabase",
    "DhcpRemoveOptionValueV5",
    "DhcpCreateClientInfoV4",
    "DhcpEnumSubnetClients",
    "DhcpEnumMScopeClients",
    "DhcpSetMScopeInfo",
    "DhcpSetOptionInfoV5",
    "DhcpEnumSubnetElementsV4",
    "DhcpGetOptionInfoV5",
    "DhcpCreateClass",
    "DhcpSetSubnetInfo",
    "DhcpGetOptionInfo",
    "DhcpEnumSubnetClientsV5",
    "DhcpSetThreadOptions",
    "DhcpEnumOptions",
    "DhcpGetMibInfo",
    "DhcpCreateSubnet",
    "DhcpSetServerBindingInfo",
    "DhcpGetThreadOptions",
    "DhcpGetVersion",
    "DhcpRemoveSubnetElement",
    "DhcpSetOptionInfo",
    "DhcpGetClientInfo",
    "DhcpEnumClasses",
    "DhcpDeleteServer",
    "DhcpDeleteSubnet",
    "DhcpGetClientInfoV4",
    "DhcpDsInit",
    "DhcpEnumOptionsV5",
    "DhcpGetClientOptions",
    "DhcpRpcFreeMemory",
    "DhcpModifyClass",
    "DhcpEnumOptionValuesV5",
    "DhcpAddSubnetElementV5",
    "DhcpSetClientInfo",
    "DhcpDeleteSuperScopeV4",
    "DhcpEnumSubnetElements",
    "DhcpGetMCastMibInfo",
    "DhcpGetAllOptions",
    "DhcpAddServer",
    "DhcpServerRedoAuthorization",
    "DhcpRemoveOption",
    "DhcpDeleteClientInfo",
    "DhcpSetClientInfoV4",
    "DhcpEnumServers",
    "DhcpAuditLogGetParams",
    "DhcpDsCleanup",
    "DhcpEnumMScopeElements",
    "DhcpDeleteMScope",
    "DhcpSetSuperScopeV4",
    "DhcpAddSubnetElementV4",
    "DhcpCreateOption",
    "DhcpDsClearHostServerEntries",
    "DhcpEnumSubnetClientsV4",
    "DhcpRemoveSubnetElementV4",
    "DhcpGetSubnetInfo",
    "DhcpServerQueryAttributes",
    "DhcpSetOptionValues",
    "DhcpServerQueryDnsRegCredentials",
    "DhcpServerGetConfig",
    "DhcpEnumMScopes",
    "DhcpAddMScopeElement",
    "DhcpEnumSubnets",
    "DhcpRemoveMScopeElement",
    "DhcpSetOptionValuesV5",
    "DhcpServerSetConfig",
    "DhcpEnumOptionValues",
    "DhcpScanDatabase",
    "DhcpServerBackupDatabase",
    "DhcpGetServerBindingInfo",
    "DhcpGetClassInfo",
    "DhcpGetMScopeInfo",
    "DhcpCreateOptionV5",
    "DhcpRemoveOptionV5",
    "DhcpGetOptionValue",
    "DhcpServerSetDnsRegCredentials",
    "DhcpServerQueryAttribute",
    "DhcpSetOptionValueV5"
  ],
  "diactfrm.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "digest.dll": [
    "MakeSignature",
    "FreeContextBuffer",
    "InitSecurityInterfaceA",
    "ImpersonateSecurityContext",
    "QuerySecurityPackageInfoA",
    "FreeCredentialsHandle",
    "VerifySignature",
    "AcquireCredentialsHandleA",
    "DeleteSecurityContext",
    "InitSecurityInterfaceW",
    "AcquireCredentialsHandleW",
    "RevertSecurityContext",
    "ApplyControlToken",
    "AcceptSecurityContext",
    "InitializeSecurityContextA",
    "QueryContextAttributesW",
    "QueryContextAttributesA",
    "EnumerateSecurityPackagesW",
    "InitializeSecurityContextW",
    "QuerySecurityPackageInfoW",
    "EnumerateSecurityPackagesA",
    "DllInstall",
    "CompleteAuthToken"
  ],
  "dimap.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "dimsntfy.dll": [
    "WlDimsLock",
    "WlDimsLogoff",
    "WlDimsStartup",
    "WlDimsLogon",
    "WlDimsStartShell",
    "WlDimsShutdown",
    "WlDimsUnlock"
  ],
  "dimsroam.dll": [
    "DimsRoamEntry"
  ],
  "dinput.dll": [
    "DllCanUnloadNow",
    "DirectInputCreateW",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer",
    "DirectInputCreateA",
    "DirectInputCreateEx"
  ],
  "dinput8.dll": [
    "DirectInput8Create",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "diskcopy.dll": [
    "DiskCopyRunDll",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DiskCopyRunDllW"
  ],
  "dispex.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dmband.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dmcompos.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dmconfig.dll": [
    "DllMain",
    "cs_get_api_calls"
  ],
  "dmdlgs.dll": [
    "public: void __thiscall CTaskData::GetRegionColorStructPtr(struct _REGION_COLORS * *,int &)",
    "public: class CString __thiscall CDataCache::GetServerName(void)",
    "public: __int64 __thiscall CDMNodeObj::GetLdmObjectId(void)",
    "DllCanUnloadNow",
    "public: class CWnd * __thiscall CTaskData::GetOcxFrameCWndPtr(void)",
    "DllGetClassObject",
    "DllRegisterServer",
    "public: unsigned long __thiscall CDMNodeObj::GetNumMembers(void)"
  ],
  "dmdskmgr.dll": [
    "public: void __thiscall CTaskData::SetUIState(unsigned long)",
    "public: int __thiscall CDMNodeObj::ContainsBootIniPartition(void)",
    "public: __int64 __thiscall CDMNodeObj::GetUnallocSpace(int)",
    "IsRequestPending",
    "public: int __thiscall CTaskData::IsIA64Client(void)",
    "public: int __thiscall CDMSnapin::GetRegionScaling(void)",
    "public: int __thiscall CDMNodeObj::IsCurrBootVolume(void)",
    "public: int __thiscall CDMSnapin::GetBottomViewStyle(void)",
    "public: void __thiscall CDMNodeObj::GetFileSystemSize(long &)",
    "public: int __thiscall CDMNodeObj::ContainsSystemInformation(void)",
    "public: void __thiscall CDMNodeObj::EnumVolumeMembers(long * *,long &)",
    "__int64 __stdcall ConvertMBToBytes(__int64)",
    "public: short __thiscall CTaskData::GetIVolumeClientVersion(void)",
    "public: int __thiscall CDMNodeObj::IsFirstFreeRegion(void)",
    "public: long __thiscall CDMNodeObj::GetFlags(void)",
    "public: __int64 __thiscall CDMNodeObj::GetLdmObjectId(void)",
    "public: int __thiscall CDMNodeObj::IsOemPartition(void)",
    "public: void __thiscall CDMNodeObj::GetShortName(class CString &)",
    "public: int __thiscall CDMNodeObj::IsUnknownPartition(void)",
    "public: void __thiscall CDMNodeObj::GetDiskTypeName(class CString &)",
    "public: int __thiscall CDMNodeObj::CanHaveGPT(void)",
    "public: int __thiscall CDMSnapin::GetDiskScaling(void)",
    "public: void __thiscall CDMSnapin::SetDescriptionBarText(void)",
    "public: int __thiscall CDMNodeObj::IsMember(class CDMNodeObj *)",
    "public: void __thiscall CDataCache::EnumNTFSwithDriveLetter(int *,unsigned short * *)",
    "public: int __thiscall CDMNodeObj::IsUpgradeable(void)",
    "public: unsigned long __thiscall CDMNodeObj::GetLogicalDriveCount(void)",
    "public: int __thiscall CDMNodeObj::IsFTVolume(void)",
    "DllCanUnloadNow",
    "public: unsigned long __thiscall CTaskData::GetUIState(void)",
    "public: void __thiscall CDMSnapin::UpDateConsoleView(void)",
    "public: void __thiscall CTaskData::GetDiskCookiesForUpgrade(unsigned long &,long * *)",
    "public: int __thiscall CDMNodeObj::ContainsBootVolumesNumberChange(__int64,int *)",
    "public: void __thiscall CTaskData::GetFileSystemTypes(unsigned long &,struct ifilesysteminfo * *)",
    "public: int __thiscall CDMNodeObj::EnhancedIsUpgradeable(class CTaskData *)",
    "public: void __thiscall CDMNodeObj::EnumFirstVolumeMember(long &,long &)",
    "public: int __thiscall CDMNodeObj::IsMbrEEPartition(void)",
    "public: int __thiscall CDMNodeObj::GetVolumeStatus(class CString &)",
    "public: int __thiscall CTaskData::IsIA64Server(void)",
    "public: void __thiscall CTaskData::GetDiskCookiesForSig(unsigned long &,long * *)",
    "public: int __thiscall CDMNodeObj::IsHiddenRegion(void)",
    "unsigned long __stdcall ConvertBytesToMB(__int64)",
    "public: void __thiscall CTaskData::FilterCookiesBigEnoughForRAID5Repair(unsigned long &,long *,long * *,long,class CDMNodeObj *)",
    "public: int __thiscall CDMNodeObj::IsRevertable(void)",
    "public: int __thiscall CDMNodeObj::GetPatternRef(void)",
    "public: void __thiscall CTaskData::FilterCookiesBigEnoughForFTRepair(unsigned long &,long *,long * *,long,class CDMNodeObj *)",
    "public: unsigned long __thiscall CDMNodeObj::GetColorRef(void)",
    "public: int __thiscall CDMNodeObj::IsDiskEmpty(void)",
    "public: int __thiscall CDMNodeObj::ContainsSystemPartition(void)",
    "public: int __thiscall CTaskData::IsNTServer(void)",
    "public: unsigned long __thiscall CDMNodeObj::GetDeviceState(void)",
    "public: void __thiscall CContextMenu::PopUpInit(class CDMNodeObj *,int &,int)",
    "public: int __thiscall CDMSnapin::GetListBehavior(void)",
    "void __stdcall CookieSort(long *,long,long,int (__stdcall*)(long,long))",
    "public: void __thiscall CDMNodeObj::GetMaxAdjustedFreeSize(__int64 &)",
    "public: void __thiscall CDMNodeObj::GetPartitionStyleString(class CString &,int)",
    "public: int __thiscall CDMNodeObj::VolumeContainsActiveRegion(void)",
    "public: int __thiscall CDataCache::HasNTFSwithDriveLetter(void)",
    "public: unsigned int __thiscall CDMNodeObj::GetIconId(int)",
    "DllGetClassObject",
    "int __stdcall CompareDiskNames(long,long)",
    "public: int __thiscall CDMNodeObj::GetRegionInfo(struct regioninfoex &)",
    "public: int __thiscall CTaskData::IsAlpha(void)",
    "public: void __thiscall CDMNodeObj::GetSize(long &)",
    "LoadPropertyPageData",
    "public: int __thiscall CTaskData::GetAssignedDriveLetter(long,unsigned short &)",
    "public: int __thiscall CDMNodeObj::GetVolumeInfo(struct volumeinfo &)",
    "public: enum _PARTITIONSTYLE __thiscall CDMNodeObj::GetPartitionStyle(void)",
    "public: class CWnd * __thiscall CTaskData::GetOcxFrameCWndPtr(void)",
    "public: int __thiscall CDMNodeObj::IsEECoveredGPTDisk(void)",
    "public: int __thiscall CDMNodeObj::IsNEC_98Disk(void)",
    "public: int __thiscall CTaskData::FindFileSystem(__int64,struct filesysteminfo &)",
    "public: void __thiscall CTaskData::FindDriveLetter(__int64,unsigned short &)",
    "public: void __thiscall CDMNodeObj::SetFSId(__int64)",
    "public: int __thiscall CDMSnapin::GetWaitCursor(void)",
    "public: long __thiscall CContextMenu::Command(long,struct IDataObject *,long)",
    "public: int __thiscall CDMNodeObj::ContainsLogicalDrvBootPartition(void)",
    "public: int __thiscall CDMNodeObj::GetDiskStatus(class CString &)",
    "public: int __thiscall CDMNodeObj::GetStatus(void)",
    "public: void __thiscall CTaskData::GetDriveLetters(short &,unsigned short * *,unsigned short)",
    "public: void __thiscall CDMNodeObj::GetObjectId(__int64 &)",
    "GetPropertyPageData",
    "public: unsigned long __thiscall CDMNodeObj::GetMaxPartitionCount(void)",
    "public: void __thiscall CContextMenu::DoDelete(long)",
    "public: void __thiscall CDMNodeObj::GetName(class CString &)",
    "public: unsigned long __thiscall CDMNodeObj::GetDeviceType(void)",
    "public: int __thiscall CDMNodeObj::GetDiskSpec(struct diskspec &)",
    "public: void __thiscall CDMNodeObj::GetFileSystemName(class CString &)",
    "public: int __thiscall CTaskData::FindRegionPtrFromRegionId(__int64,class CDMNodeObj * *)",
    "int __stdcall namecmp(unsigned short const *,unsigned short const *)",
    "public: enum _STORAGE_TYPES __thiscall CDMNodeObj::GetStorageType(void)",
    "public: void __thiscall CTaskData::GetDiskInfoFromVolCookie(long,int &,unsigned long &,long * *,unsigned long,int)",
    "public: void __thiscall CTaskData::GetMinMaxPartitionSizes(long,unsigned long &,unsigned long &)",
    "public: int __thiscall CDMNodeObj::ContainsSubDiskNeedResync(void)",
    "public: int __thiscall CDMNodeObj::GetResultStringArray(class CStringArray &)",
    "public: unsigned long __thiscall CDMNodeObj::GetNumRegions(void)",
    "public: void __thiscall CTaskData::EnumDisks(unsigned long &,long * *)",
    "public: void __thiscall CTaskData::GetDiskCookies(unsigned long &,long * *,int,unsigned long,int)",
    "public: int __thiscall CTaskData::IsWolfpack(void)",
    "public: int __thiscall CTaskData::IsSecureSystemPartition(void)",
    "public: int __thiscall CDMNodeObj::ContainsESPPartition(void)",
    "public: int __thiscall CDMNodeObj::GetImageNum(void)",
    "public: unsigned long __thiscall CDMNodeObj::GetExtendedRegionColor(void)",
    "public: int __thiscall CDMNodeObj::GetExtraRegionStatus(class CString &,int)",
    "public: class CDMNodeObj * __thiscall CTaskData::GetDMDataObjPtrFromId(__int64)",
    "public: enum _LAYOUT_TYPES __thiscall CDMNodeObj::GetLayoutType(void)",
    "void __stdcall FreeArrayOfStrings(struct arrayOfStrings *)",
    "public: int __thiscall CDMNodeObj::ContainsActivePartition(void)",
    "public: int __thiscall CTaskData::IsNEC_98Server(void)",
    "public: void __thiscall CDMNodeObj::EnumDiskRegions(long * *,long &)",
    "public: int __thiscall CDMNodeObj::GetDiskInfo(struct diskinfoex &)",
    "public: int __thiscall CDMNodeObj::ContainsBootIniPartitionForWolfpack(void)",
    "public: unsigned long __thiscall CDMNodeObj::GetPrimaryPartitionCount(void)",
    "public: int __thiscall CDMNodeObj::IsESPPartition(void)",
    "public: long __thiscall CContextMenu::ShowContextMenu(class CWnd *,long,long,long)",
    "public: void __thiscall CDMNodeObj::GetLongName(class CString &,int)",
    "public: void __thiscall CTaskData::GetServerName(class CString &)",
    "public: int __thiscall CDMNodeObj::IsCurrSystemVolume(void)",
    "public: int __thiscall CDMNodeObj::IsInFlux(void)",
    "public: void __thiscall CDMNodeObj::GetDriveLetter(unsigned short &)",
    "public: class CDMNodeObj * __thiscall CDMNodeObj::GetParentVolumePtr(void)",
    "public: int __thiscall CDMSnapin::GetTopViewStyle(void)",
    "public: void __thiscall CDMNodeObj::GetSize(__int64 &,int)",
    "public: void __thiscall CDMNodeObj::GetSizeString(class CString &)",
    "DllRegisterServer",
    "public: int __thiscall CDMNodeObj::ContainsRealSystemPartition(void)",
    "public: class CDMNodeObj * __thiscall CDMNodeObj::GetParentDiskPtr(void)",
    "public: int __thiscall CDMNodeObj::IsFakeVolume(void)",
    "public: int __thiscall CTaskData::GetBootPort(void)",
    "public: class CString __thiscall CDataCache::GetServerName(void)",
    "public: void __thiscall CDMNodeObj::RecalculateSpace(void)",
    "public: int __thiscall CDMNodeObj::ContainsPageFile(void)",
    "public: short __thiscall CDMNodeObj::GetIVolumeClientVersion(void)",
    "public: void __thiscall CTaskData::GetDiskCookiesToEncap(unsigned long &,long * *)",
    "public: int __thiscall CDMNodeObj::IsActive(void)",
    "public: void __thiscall CTaskData::EnumVolumes(unsigned long &,long * *)",
    "public: void __thiscall CTaskData::GetRegionColorStructPtr(struct _REGION_COLORS * *,int &)",
    "public: int __thiscall CDMNodeObj::GetPort(void)",
    "public: int __thiscall CTaskData::IsLocalMachine(void)",
    "public: void __thiscall CDMNodeObj::GetStorageType(class CString &,int)",
    "public: int __thiscall CDMSnapin::GetFilterToggle(void)",
    "public: void __thiscall CContextMenu::RefreshFileSys(long)",
    "public: int __thiscall CDMNodeObj::HasExtendedPartition(void)",
    "public: int __thiscall CDMNodeObj::GetFileSystemType(void)",
    "public: unsigned long __thiscall CDMNodeObj::GetNumMembers(void)",
    "public: void __thiscall CDMNodeObj::GetFileSystemLabel(class CString &)"
  ],
  "dmdskres.dll": "No exports",
  "dmime.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dmintf.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo"
  ],
  "dmloader.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dmocx.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dmscript.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dmserver.dll": [
    "ServiceMain"
  ],
  "dmstyle.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dmsynth.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dmusic.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dmutil.dll": [
    "IsPersonalSKU",
    "RgszwDupRgszw",
    "RgszwFromValist",
    "FTrace",
    "DllMain",
    "LowNtReadFile",
    "LowGetPartitionInfo",
    "AddEntryBootFileMbr",
    "GetErrorData",
    "FTraceValist",
    "DisplayError",
    "CoDisableDynamicVolumes",
    "LowNtAddBootEntry",
    "FreeRgszw",
    "AddEntryBootFileGpt",
    "LowAcquirePrivilege",
    "ShowMessageValist",
    "RgszwFromArgs",
    "GetInstallDirectoryPath",
    "TranslateError",
    "LowNtReadOnlyAttributeOff",
    "GetSystemVolume",
    "SzwFromSza",
    "DynamicSupport",
    "DisplayErrorRgszw",
    "DmCommonNtOpenFile",
    "SzwDupSzw",
    "LowNtWriteFile",
    "ShowMessage"
  ],
  "dnsapi.dll": [
    "Dns_ReadPacketName",
    "DnsNameCopy",
    "Dns_GetRandomXid",
    "DnsNotifyResolverClusterIp",
    "Dns_WriteQuestionToMessage",
    "DnsValidateName_A",
    "DnsNameCompareEx_UTF8",
    "DnsUpdateTest_W",
    "DnsQuery_W",
    "DnsFindAuthoritativeZone",
    "Dns_SetRecordDatalength",
    "DnsValidateName_UTF8",
    "DnsDhcpSrvRegisterTerm",
    "DnsQuery_UTF8",
    "DnsSetConfigDword",
    "DnsRecordStringForType",
    "DnsRecordStringForWritableType",
    "Dns_CacheSocketCleanup",
    "Dns_CloseSocket",
    "DnsAddRecordSet_A",
    "NetInfo_IsForUpdate",
    "DnsAcquireContextHandle_W",
    "DnsUpdate",
    "Dns_OpenTcpConnectionAndSend",
    "DnsGetCacheDataTable",
    "NetInfo_Free",
    "DnsRecordBuild_UTF8",
    "DnsNameCompare_A",
    "DnsCreateStandardDnsNameCopy",
    "Dns_CreateMulticastSocket",
    "Dns_ParseMessage",
    "Dns_RecvTcp",
    "Dns_CreateSocket",
    "DnsAddRecordSet_W",
    "DnsAllocateRecord",
    "DnsDhcpSrvRegisterInit",
    "DnsApiRealloc",
    "Dns_CreateSocketEx",
    "DnsMapRcodeToStatus",
    "DnsNameCompareEx_A",
    "DnsGlobals",
    "DnsUpdateTest_UTF8",
    "Dns_GetLocalIpAddressArray",
    "GetCurrentTimeInSeconds",
    "DnsIsAMailboxType",
    "DnsGetLastFailedUpdateInfo",
    "Dns_FindAuthoritativeZoneLib",
    "DnsCopyStringEx",
    "DnsGetDnsServerList",
    "DnsReplaceRecordSetW",
    "DnsRecordListFree",
    "Dns_CloseConnection",
    "Dns_ReadPacketNameAllocate",
    "DnsUpdateTest_A",
    "DnsStatusString",
    "DnsModifyRecordsInSet_W",
    "Dns_WriteDottedNameToPacket",
    "DnsValidateName_W",
    "DnsQueryExUTF8",
    "Dns_SendEx",
    "DnsRecordSetCompare",
    "Dns_WriteRecordStructureToPacketEx",
    "DnsDowncaseDnsNameLabel",
    "Dns_ResetNetworkInfo",
    "NetInfo_Copy",
    "Dns_GetIpAddresses",
    "Dns_BuildPacket",
    "DnsApiAlloc",
    "DnsRecordCompare",
    "DnsModifyRecordSet_A",
    "Dns_ReadHostFileLine",
    "Dns_SendAndRecvUdp",
    "DnsStringCopyAllocateEx",
    "DnsAcquireContextHandle_A",
    "DnsGetIpAddressInfoList",
    "DnsRemoveRegistrations",
    "DnsDhcpSrvRegisterInitialize",
    "Dns_CacheSocketInit",
    "DnsIsStringCountValidForTextType",
    "NetInfo_ResetServerPriorities",
    "DnsAddRecordSet_UTF8",
    "DnsReplaceRecordSetUTF8",
    "Dns_SkipPacketName",
    "Dns_CloseHostFile",
    "DnsGetDomainName",
    "Dns_AddRecordsToMessage",
    "DnsAsyncRegisterHostAddrs",
    "DnsGetLocalAddrArrayDirect",
    "DnsNameCompare_W",
    "Query_Main",
    "DnsRecordSetDetach",
    "DnsDhcpSrvRegisterHostName",
    "DnsNameCompare_UTF8",
    "DnsQueryExW",
    "Dns_InitializeWinsock",
    "QueryDirectEx",
    "DnsQueryConfigDword",
    "DnsNameCompareEx_W",
    "DnsFlushResolverCacheEntry_UTF8",
    "Reg_ReadGlobalsEx",
    "DnsNameCopyAllocate",
    "Dns_OpenHostFile",
    "DnsCreateStringCopy",
    "DnsExtractRecordsFromMessage_W",
    "GetRecordsForLocalName",
    "NetInfo_Build",
    "DnsAsyncRegisterInit",
    "DnsCreateReverseNameStringForIpAddress",
    "DnsApiHeapReset",
    "DnsFlushResolverCacheEntry_W",
    "DnsWriteQuestionToBuffer_W",
    "DnsExtractRecordsFromMessage_UTF8",
    "DnsReplaceRecordSetA",
    "BreakRecordsIntoBlob",
    "Dns_InitializeMsgRemoteSockaddr",
    "DnsFreeConfigStructure",
    "DnsGetBufferLengthForStringCopy",
    "DnsWriteReverseNameStringForIpAddress",
    "DnsFree",
    "DnsFlushResolverCache",
    "CombineRecordsInBlob",
    "DnsFlushResolverCacheEntry_A",
    "DnsModifyRecordsInSet_A",
    "Dns_AllocateMsgBuf",
    "DnsModifyRecordSet_UTF8",
    "DnsIpv6AddressToString",
    "DnsValidateUtf8Byte",
    "DnsQueryConfig",
    "DnsGetPrimaryDomainName_A",
    "DnsRecordCopyEx",
    "Dns_ReadRecordStructureFromPacket",
    "DnsApiFree",
    "Dns_InitQueryTimeouts",
    "Dns_PingAdapterServers",
    "DnsUnicodeToUtf8",
    "DnsGetLocalAddrArray",
    "DnsRecordBuild_W",
    "Dns_CleanupWinsock",
    "Dns_UpdateLib",
    "NetInfo_Clean",
    "DnsIsStatusRcode",
    "DnsModifyRecordsInSet_UTF8",
    "DnsModifyRecordSet_W",
    "DnsNotifyResolver",
    "Dns_ParsePacketRecord",
    "DnsIpv6StringToAddress",
    "DnsApiSetDebugGlobals",
    "DnsUtf8ToUnicode",
    "Dns_SkipToRecord",
    "DnsQueryExA",
    "DnsQueryConfigAllocEx",
    "DnsRegisterClusterAddress",
    "Dns_UpdateLibEx",
    "DnsQuery_A",
    "DnsRecordSetCopyEx",
    "DnsWriteQuestionToBuffer_UTF8",
    "DnsRecordTypeForName",
    "DnsNotifyResolverEx",
    "DnsAsyncRegisterTerm",
    "DnsReleaseContextHandle"
  ],
  "dnsrslvr.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "docprop.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "docprop2.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dot3api.dll": [
    "Dot3UIResponse",
    "Dot3EnumInterfaces",
    "Dot3QueryUIRequest",
    "Dot3RegisterNotification",
    "Dot3QueryGUIDNCSState",
    "Dot3ReConnect",
    "Dot3SetProfile",
    "Dot3FreeMemory",
    "Dot3GetCurrentProfile",
    "Dot3GetInterfaceState",
    "Dot3GetProfile",
    "Dot3CloseHandle",
    "Dot3OpenHandle",
    "Dot3SetInterface",
    "Dot3SetProfileEapUserData",
    "Dot3DeleteProfile",
    "QueryNetconStatus"
  ],
  "dot3cfg.dll": [
    "InitHelperDll",
    "GetResourceString"
  ],
  "dot3dlg.dll": [
    "Dot3ACCanShowBalloon",
    "Dot3ACOnBalloonClick"
  ],
  "dot3gpclnt.dll": [
    "LANGPADeInit",
    "ProcessLANPolicyEx",
    "LANGPAInit",
    "GenerateLANPolicy"
  ],
  "dot3msm.dll": [
    "Dot3MsmDisconnect",
    "Dot3MsmIndicateSessionChange",
    "Dot3MsmCreateDefaultProfile",
    "Dot3MsmConnect",
    "Dot3MsmFreeMemory",
    "Dot3MsmInit",
    "Dot3MsmFreeProfile",
    "Dot3MsmValidateProfile",
    "Dot3ReasonCodeMsmToString",
    "Dot3MsmUIResponse",
    "Dot3MsmQueryPendingUIRequest",
    "Dot3MsmDeInit",
    "Dot3MsmInitAdapter",
    "Dot3MsmDeInitAdapter",
    "DllMain",
    "Dot3MsmQueryState",
    "Dot3SetPortAuthenticationState"
  ],
  "dot3svc.dll": [
    "Dot3SvcMain",
    "SvchostPushServiceGlobals"
  ],
  "dot3ui.dll": [
    "LanInvokeProfileUI",
    "LanFreeProfile",
    "LanInvokeProfileUIXml",
    "Dot3CreatePsPage"
  ],
  "dpcdll.dll": "No exports",
  "dplay.dll": [
    "DirectPlayEnumerate",
    "DirectPlayCreate"
  ],
  "dplayx.dll": [
    "DirectPlayEnumerateW",
    "DirectPlayLobbyCreateA",
    "DirectPlayEnumerateA",
    "DirectPlayEnumerate",
    "DirectPlayLobbyCreateW",
    "DllCanUnloadNow",
    "gdwDPlaySPRefCount",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer",
    "DirectPlayCreate"
  ],
  "dpmodemx.dll": [
    "SPInit"
  ],
  "dpnaddr.dll": [
    "DirectPlay8AddressCreate"
  ],
  "dpnet.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer",
    "DirectPlay8Create"
  ],
  "dpnhpast.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DirectPlayNATHelpCreate",
    "DllUnregisterServer"
  ],
  "dpnhupnp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DirectPlayNATHelpCreate",
    "DllUnregisterServer"
  ],
  "dpnlobby.dll": [
    "DirectPlay8LobbyCreate"
  ],
  "dpnmodem.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dpnwsock.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dpserial.dll": [
    "CreateNewDirectPlay"
  ],
  "dpvacm.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dpvoice.dll": [
    "DllCanUnloadNow",
    "DirectPlayVoiceCreate",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dpvvox.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dpwsock.dll": [
    "CreateNewDirectPlay"
  ],
  "dpwsockx.dll": [
    "DPWS_GetEnumPort",
    "DPWS_BuildIPMessageHeader",
    "SPInit"
  ],
  "drmclien.dll": [
    "public: long __thiscall CDRMLiteCrypto::GenerateNewLicenseEx(unsigned long,unsigned char *,unsigned char *,unsigned char *,char * *,char * *,unsigned char *)",
    "Decrypt",
    "BindEx",
    "public: long __thiscall CDRMLiteCrypto::BackupLicenses(unsigned long,unsigned short *,struct IUnknown *,int *,void *)",
    "DllMain",
    "public: long __thiscall CDRMLiteCrypto::EncryptIndirectFast(char const *,unsigned long,unsigned char *,unsigned char *)",
    "RequestLicense",
    "KeyExchange",
    "GetPMLicenseFileName",
    "DllRegisterServer",
    "GetVersion",
    "ProcessResponse",
    "GetPMLicenseSize",
    "public: long __thiscall CDRMLiteCrypto::EncryptFast(char const *,unsigned long,unsigned char *,unsigned char *)",
    "QueryXferToPM",
    "public: long __thiscall CDRMLiteCrypto::GetPublicKey(struct PKCERT *)",
    "public: long __thiscall CDRMLiteCrypto::RestoreLicenses(unsigned long,unsigned char *,unsigned short *,struct IUnknown *,int *,void *)",
    "CanDecrypt",
    "Bind",
    "CreatePMLicense",
    "Encrypt",
    "public: long __thiscall CDRMLiteCrypto::QueryXferToPMEx(char const *,unsigned long,unsigned long *,unsigned char *,unsigned long,unsigned char *,unsigned long,unsigned long *,unsigned char *)",
    "SetLicenseStore",
    "GenerateNewLicense",
    "SetAppSec",
    "public: __thiscall CDRMLiteCrypto::CDRMLiteCrypto(void)",
    "public: __thiscall CDRMLiteCrypto::~CDRMLiteCrypto(void)",
    "public: long __thiscall CDRMLiteCrypto::GetLicenses(char const *,struct PMLICENSE *,unsigned long *,unsigned long,void *,unsigned long *,unsigned char *)",
    "InitAppCerts",
    "CanDecryptEx",
    "DllUnregisterServer"
  ],
  "drmstor.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "drmv2clt.dll": [
    "CreateDRMRightsManager",
    "LaunchURL",
    "DllRegisterServer",
    "DllUnregisterServer",
    "MakeEscapedURL"
  ],
  "drprov.dll": [
    "NPGetUniversalName",
    "NPEnumResource",
    "NPCancelConnection",
    "NPGetConnection",
    "NPGetResourceParent",
    "NPOpenEnum",
    "NPCloseEnum",
    "NPAddConnection",
    "NPGetCaps",
    "NPAddConnection3",
    "NPGetResourceInformation"
  ],
  "ds32gt.dll": [
    "Dispatch"
  ],
  "dsauth.dll": [
    "DhcpEnumServersDS",
    "StoreSetSearchOneLevel",
    "DhcpCreateOptionV5DS",
    "DhcpDsCreateClass",
    "DhcpDsInitDS",
    "DhcpModifyClassDS",
    "DhcpDsSubnetDelRangeOrExcl",
    "DhcpDsModifyOptionDef",
    "StoreCreateObjectVA",
    "StoreCollectAttributes",
    "DhcpSetSubnetInfoDS",
    "DhcpDsGetLists",
    "DhcpCreateOptionDS",
    "DhcpDsServerEnumSubnets",
    "DhcpDsGetServers",
    "DhcpEnumSubnetElementsDS",
    "DhcpDeleteClassDS",
    "DhcpSetOptionValueV5DS",
    "DhcpEnumClassesDS",
    "DhcpRemoveSubnetElementDS",
    "DhcpAddSubnetElementV4DS",
    "StoreSetAttributesVA",
    "DhcpDsSetSScope",
    "DhcpRemoveOptionDS",
    "DhcpDsDelServer",
    "DhcpSetOptionValuesDS",
    "DhcpDsCleanupDS",
    "StoreInitHandle",
    "StoreBeginSearch",
    "DhcpDsGetEnterpriseServers",
    "DhcpDsRemoveOptionValue",
    "DhcpDsSetLists",
    "StoreCleanupHandle",
    "DhcpDsDeleteOptionDef",
    "DhcpDsDelSScope",
    "DhcpDsEnumRangesOrExcl",
    "DhcpRemoveOptionV5DS",
    "DhcpDsSubnetDelReservation",
    "DhcpGetClientInfoV4DS",
    "DhcpDsGetAttribs",
    "DhcpDsGetOptionValue",
    "DhcpDsEnumServers",
    "DhcpDsGetSScopeInfo",
    "DhcpDsSubnetAddReservation",
    "DhcpSetOptionValuesV5DS",
    "DhcpRemoveSubnetElementV4DS",
    "DhcpDsGetClassInfo",
    "StoreEndSearch",
    "DhcpGetAllOptionValuesDS",
    "DhcpAddSubnetElementDS",
    "DhcpCreateSubnetDS",
    "DhcpRemoveOptionValueV5DS",
    "StoreSearchGetNext",
    "DhcpEnumOptionsDS",
    "DhcpSetClientInfoV4DS",
    "DhcpEnumOptionValuesDS",
    "DhcpDsAddServer",
    "DhcpEnumSubnetsDS",
    "DhcpGetOptionInfoDS",
    "DhcpDsSetAttribs",
    "DhcpDsSubnetAddRangeOrExcl",
    "DhcpGetAllOptionsDS",
    "DhcpGetClassInfoDS",
    "DhcpSetSuperScopeV4DS",
    "DhcpDeleteServerDS",
    "DhcpDsValidateService",
    "DhcpGetSubnetInfoDS",
    "StoreSetAttributesL",
    "DhcpRemoveOptionValueDS",
    "StoreCreateObjectL",
    "DhcpDsEnumReservations",
    "DhcpDsGetLastUpdateTime",
    "DhcpEnumOptionsV5DS",
    "DhcpDeleteSuperScopeV4DS",
    "DhcpDsDeleteClass",
    "DhcpDsServerDelSubnet",
    "StoreGetHandle",
    "DhcpDsEnumOptionValues",
    "DhcpEnumOptionValuesV5DS",
    "StoreDeleteObject",
    "DhcpGetOptionInfoV5DS",
    "DhcpDsServerGetSubnetInfo",
    "DhcpGetClientInfoDS",
    "DhcpSetOptionInfoV5DS",
    "DhcpDsServerModifySubnet",
    "DhcpDsEnumOptionDefs",
    "DhcpDsGetRoot",
    "DhcpDsCreateOptionDef",
    "DhcpDeleteSubnetDS",
    "StoreSetSearchSubTree",
    "DhcpAddServerDS",
    "DhcpGetOptionValueDS",
    "DhcpSetOptionInfoDS",
    "DhcpCreateClassDS",
    "DhcpDsServerAddSubnet",
    "DhcpSetClientInfoDS",
    "DhcpEnumSubnetElementsV4DS",
    "DhcpDsEnumClasses",
    "DhcpDsSetOptionValue",
    "DhcpGetSuperScopeInfoV4DS",
    "DhcpGetOptionValueV5DS",
    "DhcpSetOptionValueDS"
  ],
  "dsdmo.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dsdmoprp.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dskquota.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "ProcessGroupPolicy",
    "DllUnregisterServer"
  ],
  "dskquoui.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dsound.dll": [
    "DirectSoundEnumerateA",
    "DirectSoundCaptureEnumerateA",
    "DirectSoundCreate8",
    "DllCanUnloadNow",
    "DirectSoundCaptureCreate8",
    "DirectSoundFullDuplexCreate",
    "DllGetClassObject",
    "DirectSoundEnumerateW",
    "DirectSoundCreate",
    "GetDeviceID",
    "DirectSoundCaptureEnumerateW",
    "DirectSoundCaptureCreate"
  ],
  "dsound3d.dll": [
    "CafBiquadCoeffs"
  ],
  "dsprop.dll": [
    "CrackName",
    "ADsPropCheckIfWritable",
    "ADsPropSetHwndWithTitle",
    "ADsPropShowErrorDialog",
    "ReportError",
    "ADsPropSendErrorMessage",
    "ADsPropSetHwnd",
    "ErrMsg",
    "BringSheetToForeground",
    "MsgBox",
    "CheckADsError",
    "DllRegisterServer",
    "DSPROP_GetGCSearchOnDomain",
    "IsSheetAlreadyUp",
    "ErrMsgParam",
    "Smart_PADS_ATTR_INFO__Empty",
    "DllGetClassObject",
    "FindSheet",
    "ADsPropCreateNotifyObj",
    "ADsPropGetInitInfo",
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "PostADsPropSheet"
  ],
  "dsprpres.dll": "No exports",
  "dsquery.dll": [
    "OpenSavedDsQueryW",
    "OpenSavedDsQuery",
    "OpenQueryWindow",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllInstall",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dssec.dll": [
    "DSCreateISecurityInfoObject",
    "DSEditSecurity",
    "DSCreateSecurityPage",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DSCreateISecurityInfoObjectEx"
  ],
  "dssenh.dll": [
    "CPExportKey",
    "CPGetKeyParam",
    "CPGenKey",
    "CPGetHashParam",
    "CPAcquireContext",
    "CPDecrypt",
    "CPDeriveKey",
    "CPDuplicateHash",
    "CPDuplicateKey",
    "DllRegisterServer",
    "CPSetKeyParam",
    "CPSetHashParam",
    "CPHashSessionKey",
    "CPImportKey",
    "CPGetUserKey",
    "CPVerifySignature",
    "CPCreateHash",
    "CPEncrypt",
    "CPDestroyHash",
    "CPGetProvParam",
    "CPHashData",
    "CPDestroyKey",
    "CPSetProvParam",
    "CPGenRandom",
    "CPReleaseContext",
    "DllUnregisterServer",
    "CPSignHash"
  ],
  "dsuiext.dll": [
    "DsGetIcon",
    "DllCanUnloadNow",
    "DsGetFriendlyClassName",
    "DsBrowseForContainerW",
    "DllGetClassObject",
    "DllInstall",
    "DllRegisterServer",
    "DsBrowseForContainerA",
    "DllUnregisterServer"
  ],
  "dswave.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "duser.dll": [
    "SetGadgetBufferInfo",
    "DUserRegisterSuper",
    "DUserCastClass",
    "DllMain",
    "FindGadgetMessages",
    "GetGadgetStyle",
    "SetGadgetProperty",
    "AttachWndProcA",
    "CreateTransition",
    "FireGadgetMessages",
    "BuildInterpolation",
    "SetGadgetRootInfo",
    "DUserFindClass",
    "PlayTransition",
    "DUserGetAlphaPRID",
    "IsInsideContext",
    "UninitGadgetComponent",
    "DUserCastDirect",
    "DUserPostEvent",
    "DUserRegisterGuts",
    "EndTransition",
    "DUserGetRectPRID",
    "UnregisterGadgetMessageString",
    "GetGadgetFocus",
    "GetStdColorName",
    "GetStdColorPenI",
    "SetGadgetFillI",
    "DUserSendEvent",
    "GetTransitionInterface",
    "RemoveGadgetMessageHandler",
    "InitGadgets",
    "UtilDrawBlendRect",
    "GetGadgetSize",
    "SetGadgetOrder",
    "GetGadgetScale",
    "InitGadgetComponent",
    "UtilGetColor",
    "UnregisterGadgetProperty",
    "LookupGadgetTicket",
    "UtilSetBackground",
    "SetGadgetScale",
    "GetGadgetTicket",
    "EnumGadgets",
    "DUserStopAnimation",
    "InvalidateGadget",
    "SetGadgetRect",
    "GetStdColorBrushI",
    "UnregisterGadgetMessage",
    "AttachWndProcW",
    "GetGadgetAnimation",
    "RemoveGadgetProperty",
    "WaitMessageEx",
    "BeginTransition",
    "RegisterGadgetMessageString",
    "AddGadgetMessageHandler",
    "SetGadgetFillF",
    "DUserBuildGadget",
    "GetDebug",
    "GetGadgetRootInfo",
    "PeekMessageExA",
    "GetActionTimeslice",
    "BuildAnimation",
    "GetMessageExW",
    "GetGadgetRotation",
    "SetGadgetCenterPoint",
    "SetGadgetMessageFilter",
    "SetGadgetRotation",
    "FindStdColor",
    "DUserGetGutsData",
    "DUserGetScalePRID",
    "CreateAction",
    "UtilBuildFont",
    "GetGadgetMessageFilter",
    "IsGadgetParentChainStyle",
    "DetachWndProc",
    "ForwardGadgetMessage",
    "CreateGadget",
    "DUserInstanceOf",
    "FindGadgetFromPoint",
    "DUserCastHandle",
    "GetStdColorBrushF",
    "GetGadgetCenterPoint",
    "PeekMessageExW",
    "GetMessageExA",
    "GetGadgetRect",
    "RegisterGadgetProperty",
    "GetGadget",
    "GetGadgetBufferInfo",
    "DUserRegisterStub",
    "DUserSendMethod",
    "AutoTrace",
    "BuildDropTarget",
    "SetGadgetFocus",
    "RegisterGadgetMessage",
    "DUserDeleteGadget",
    "GetStdColorPenF",
    "DUserPostMethod",
    "SetGadgetParent",
    "DeleteHandle",
    "GetStdPalette",
    "UtilDrawOutlineRect",
    "SetActionTimeslice",
    "GetStdColorF",
    "PrintTransition",
    "DUserGetRotatePRID",
    "GetGadgetRgn",
    "GetGadgetProperty",
    "SetGadgetStyle",
    "MapGadgetPoints",
    "DrawGadgetTree",
    "GetStdColorI",
    "IsStartDelete"
  ],
  "dx7vb.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dx8vb.dll": [
    "VB_D3DXVec3Length",
    "VB_D3DXVec3Normalize",
    "VB_GetStringFromBuffer",
    "D3DXMeshVertexBuffer8SetData",
    "VB_D3DXQuaternionExp",
    "VB_D3DXColorScale",
    "VB_D3DXMatrixTransformation",
    "VB_D3DXVec2Add",
    "VB_D3DXVec2Scale",
    "VB_D3DXVec3Hermite",
    "D3DXMeshIndexBuffer8GetData",
    "VB_D3DXMatrixPerspectiveFovRH",
    "VB_AddStringToBuffer",
    "VB_D3DXVec3CatmullRom",
    "VB_D3DXVec3Scale",
    "VB_D3DXMatrixReflect",
    "VB_D3DXPlaneTransform",
    "VB_D3DXVec3Add",
    "VB_D3DXVec3Dot",
    "VB_D3DXQuaternionRotationAxis",
    "VB_D3DColorARGB",
    "VB_D3DXVec3Cross",
    "DXUnlockArray8",
    "VB_D3DXQuaternionSlerp",
    "DllCanUnloadNow",
    "VB_D3DXMatrixOrthoRH",
    "VB_D3DXVec2Normalize",
    "VB_D3DXVec3Subtract",
    "VB_D3DXMatrixTranspose",
    "VB_D3DXVec3Project",
    "VB_AddDataToBuffer",
    "VB_D3DXVec3Lerp",
    "VB_D3DXVec2Length",
    "VB_D3DXVec4Scale",
    "VB_D3DXVec2Hermite",
    "VB_D3DXVec2CatmullRom",
    "VB_D3DXVec4BaryCentric",
    "VB_D3DXPlaneDot",
    "VB_D3DXQuaternionIdentity",
    "VB_D3DXVec2Minimize",
    "VB_D3DXMatrixPerspectiveLH",
    "VB_D3DXMatrixAffineTransformation",
    "D3DXMeshIndexBuffer8SetData",
    "VB_D3DXColorNegative",
    "D3DIndexBuffer8SetData",
    "VB_D3DXMatrixMultiply",
    "VB_D3DXQuaternionLn",
    "VB_D3DXVec4Subtract",
    "VB_D3DXVec2TransformCoord",
    "VB_D3DColorXRGB",
    "VB_D3DXVec2Maximize",
    "VB_D3DXMatrixRotationYawPitchRoll",
    "VB_D3DXVec3TransformNormal",
    "VB_D3DXQuaternionToAxisAngle",
    "D3DVertexBuffer8SetData",
    "DllGetClassObject",
    "VB_D3DXMatrixRotationAxis",
    "D3DXMeshVertexBuffer8GetData",
    "VB_D3DXColorLerp",
    "VB_D3DXVec4Cross",
    "VB_D3DXVec4CatmullRom",
    "VB_D3DColorRGBA",
    "VB_D3DXQuaternionLength",
    "VB_D3DXPlaneDotNormal",
    "VB_D3DXColorAdjustSaturation",
    "VB_D3DXVec4Length",
    "VB_D3DXColorAdd",
    "VB_D3DXColorModulate",
    "VB_D3DXVec2TransformNormal",
    "DllUnregisterServer",
    "VB_D3DXPlaneFromPointNormal",
    "VB_D3DXMatrixPerspectiveRH",
    "VB_D3DXMatrixfDeterminant",
    "VB_GetDataFromBuffer",
    "VB_D3DXQuaternionRotationYawPitchRoll",
    "VB_D3DXVec4Lerp",
    "VB_D3DXVec2Dot",
    "VB_D3DXPlaneFromPoints",
    "VB_D3DXQuaternionRotationMatrix",
    "VB_D3DXMatrixRotationY",
    "VB_D3DXQuaternionLengthSq",
    "VB_D3DXMatrixInverse",
    "DXLockArray8",
    "VB_D3DXVec4Add",
    "VB_D3DXVec3Maximize",
    "VB_D3DXMatrixPerspectiveOffCenterLH",
    "VB_D3DXPlaneDotCoord",
    "VB_D3DXVec2Subtract",
    "VB_D3DXVec2BaryCentric",
    "VB_D3DXPlaneIntersectLine",
    "VB_D3DXVec2CCW",
    "VB_D3DXMatrixLookAtLH",
    "VB_D3DXVec4Dot",
    "VB_D3DXMatrixPerspectiveOffCenterRH",
    "VB_D3DXQuaternionMultiply",
    "VB_D3DXVec3LengthSq",
    "VB_D3DXMatrixScaling",
    "VB_D3DXVec4Hermite",
    "VB_D3DXQuaternionSquad",
    "VB_D3DXMatrixLookAtRH",
    "VB_D3DXVec2Lerp",
    "VB_D3DXMatrixRotationX",
    "VB_D3DXMatrixOrthoOffCenterRH",
    "VB_D3DXVec4LengthSq",
    "VB_D3DXVec3Minimize",
    "VB_D3DXVec2Transform",
    "VB_D3DXMatrixRotationQuaternion",
    "VB_D3DXQuaternionIsIdentity",
    "VB_D3DXQuaternionInverse",
    "VB_D3DXVec2LengthSq",
    "VB_D3DXVec3Transform",
    "VB_D3DXQuaternionNormalize",
    "VB_D3DXColorSubtract",
    "VB_D3DXVec4Minimize",
    "VB_D3DXMatrixPerspectiveFovLH",
    "VB_D3DXMatrixIsIdentity",
    "D3DVertexBuffer8GetData",
    "VB_D3DXVec4Normalize",
    "VB_D3DXVec3BaryCentric",
    "DllRegisterServer",
    "VB_D3DXVec4Maximize",
    "VB_D3DXMatrixIdentity",
    "VB_D3DXVec4Transform",
    "VB_D3DXQuaternionDot",
    "VB_D3DXMatrixRotationZ",
    "VB_D3DXColorAdjustContrast",
    "VB_D3DXMatrixOrthoOffCenterLH",
    "D3DIndexBuffer8GetData",
    "DXCopyMemory",
    "VB_D3DXMatrixShadow",
    "VB_D3DXQuaternionBaryCentric",
    "VB_D3DXMatrixTranslation",
    "VB_D3DXVec3TransformCoord",
    "VB_NewBuffer",
    "VB_D3DColorMake",
    "VB_D3DXQuaternionConjugate",
    "VB_D3DXMatrixOrthoLH",
    "VB_D3DXVec3Unproject",
    "VB_D3DXPlaneNormalize"
  ],
  "dxdiagn.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dxmasf.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer",
    "UtilLoadImage"
  ],
  "dxtmsft.dll": [
    "DllEnumClassObjects",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dxtrans.dll": [
    "void __stdcall DXDitherArray(struct DXDITHERDESC const *)",
    "void __stdcall DXLinearInterpolateArray(class DXBASESAMPLE const *,struct DXLIMAPINFO *,class DXBASESAMPLE *,unsigned long)",
    "DllEnumClassObjects",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "void __stdcall DXConstOverArray(class DXPMSAMPLE *,class DXPMSAMPLE const &,unsigned long)",
    "DllUnregisterServer",
    "void __stdcall DXOverArray(class DXPMSAMPLE *,class DXPMSAMPLE const *,unsigned long)",
    "void __stdcall DXOverArrayMMX(class DXPMSAMPLE *,class DXPMSAMPLE const *,unsigned long)",
    "void __stdcall DXConstUnderArray(class DXPMSAMPLE *,class DXPMSAMPLE const &,unsigned long)"
  ],
  "eapolqec.dll": [
    "EapolQecUninitialize",
    "EapolQecIndicateSoHResponseList",
    "EapolQecDeleteConnection",
    "EapolQecInitialize",
    "DllCanUnloadNow",
    "EapolQecSetQuarantineEnabled",
    "DllGetClassObject",
    "DllRegisterServer",
    "EapolQecCreateConnection",
    "DllUnregisterServer",
    "EapolQecGetSoH"
  ],
  "eapp3hst.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "eappcfg.dll": [
    "EapHostPeerGetMethods",
    "EapHostPeerQueryInteractiveUIInputFields",
    "EapHostPeerConfigBlob2Xml",
    "EapHostPeerInvokeInteractiveUI",
    "EapHostPeerFreeMemory",
    "EapHostPeerQueryCredentialInputFields",
    "EapHostPeerQueryUserBlobFromCredentialInputFields",
    "EapHostPeerCredentialsXml2Blob",
    "EapHostPeerQueryUIBlobFromInteractiveUIInputFields",
    "EapHostPeerInvokeConfigUI",
    "EapHostPeerConfigXml2Blob",
    "EapHostPeerFreeErrorMemory"
  ],
  "eappgnui.dll": [
    "EapPeerFreeErrorMemory",
    "EapPeerInvokeIdentityUI",
    "DllCanUnloadNow",
    "EapPeerFreeMemory",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "eapphost.dll": [
    "UninitializeEapHost",
    "InitializeEapHost",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "eappprxy.dll": [
    "EapHostPeerFreeEapError",
    "EapHostPeerEndSession",
    "EapHostPeerGetResult",
    "EapHostPeerInitialize",
    "EapHostPeerGetUIContext",
    "EapHostPeerProcessReceivedPacket",
    "EapHostPeerGetSendPacket",
    "EapHostPeerSetResponseAttributes",
    "EapHostPeerSetUIContext",
    "EapHostPeerBeginSession",
    "EapHostPeerGetAuthStatus",
    "EapHostPeerUninitialize",
    "EapHostPeerGetResponseAttributes",
    "EapHostPeerClearConnection"
  ],
  "eapqec.dll": [
    "InitializeQec",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "UninitializeQec",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "eapsvc.dll": [
    "ServiceMain"
  ],
  "efsadu.dll": [
    "EfsDetail"
  ],
  "els.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "encapi.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "encdec.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "ersvc.dll": [
    "ServiceMain"
  ],
  "es.dll": [
    "RegisterTheEventServiceAfterSetup",
    "NotifyLogoffUser",
    "DllCanUnloadNow",
    "NotifyLogonUser",
    "RegisterTheEventServiceDuringSetup",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer",
    "ServiceMain",
    "LCEControlServer"
  ],
  "esent.dll": [
    "JetDetachDatabase@8",
    "JetOpenFileInstance",
    "JetTerm",
    "JetGetTableInfo",
    "JetResetSessionContext",
    "JetCreateIndex",
    "JetOpenDatabase",
    "JetStopService",
    "JetBeginTransaction@4",
    "JetCommitTransaction@8",
    "JetDeleteColumn2",
    "JetAttachDatabaseWithStreaming",
    "JetRenameColumn",
    "JetGetSecondaryIndexBookmark",
    "JetEscrowUpdate",
    "JetRenameTable",
    "JetDeleteTable",
    "JetEndSession@8",
    "JetCloseFileInstance",
    "JetBeginTransaction2",
    "JetCloseTable@8",
    "JetRetrieveColumns",
    "JetEnumerateColumns",
    "JetSnapshotStop",
    "JetReadFileInstance",
    "JetStopBackupInstance",
    "JetBeginTransaction",
    "JetGetColumnInfo",
    "JetRestore",
    "JetSetSystemParameter@20",
    "JetTruncateLog",
    "JetGetLock",
    "ese",
    "JetBeginExternalBackup",
    "JetOpenDatabase@20",
    "JetUpdate",
    "JetRestore2@12",
    "JetSetDatabaseSize",
    "JetIdle",
    "JetOSSnapshotFreeze",
    "JetExternalRestore2",
    "JetDelete@8",
    "JetGetLogInfoInstance",
    "JetTerm@4",
    "JetGetCounter",
    "JetDefragment",
    "JetSetCurrentIndex2",
    "JetGotoBookmark",
    "JetSetSystemParameter",
    "JetOpenFile",
    "JetDetachDatabase",
    "JetGrowDatabase",
    "JetGetTableColumnInfo",
    "JetMakeKey",
    "JetSetColumn@28",
    "JetCreateDatabaseWithStreaming",
    "JetDelete",
    "JetOpenFileSectionInstance",
    "JetIndexRecordCount",
    "JetRestoreInstance",
    "JetSetColumns",
    "JetDeleteIndex",
    "JetCreateDatabase@20",
    "JetTerm2",
    "JetGetIndexInfo",
    "JetDetachDatabase2",
    "JetCompact",
    "JetGetCurrentIndex",
    "JetSnapshotStart",
    "JetGetAttachInfo",
    "JetGetRecordPosition",
    "JetPrepareToCommitTransaction",
    "JetEndExternalBackupInstance",
    "JetSetColumnDefaultValue",
    "JetBeginSession",
    "JetReadFile",
    "JetMove",
    "JetGetLS",
    "JetAttachDatabase2",
    "JetCommitTransaction",
    "JetGetDatabaseFileInfo",
    "JetRetrieveTaggedColumnList",
    "JetUnregisterCallback",
    "JetDefragment2",
    "JetSetColumn",
    "JetMakeKey@20",
    "JetEndExternalBackupInstance2",
    "JetBackupInstance",
    "JetRetrieveKey",
    "JetRestore2",
    "JetAddColumn",
    "JetGetTableIndexInfo",
    "JetSetCurrentIndex3",
    "JetEndSession",
    "JetInit2",
    "JetGetTruncateLogInfoInstance",
    "JetInit@4",
    "JetInit",
    "JetConvertDDL",
    "JetOSSnapshotThaw",
    "JetCloseDatabase@12",
    "JetPrepareUpdate",
    "JetRollback@8",
    "JetIntersectIndexes",
    "JetResetCounter",
    "JetSetCurrentIndex",
    "JetBackup",
    "JetRetrieveColumn@32",
    "JetCreateDatabase2",
    "JetGetDatabaseInfo",
    "JetGetLogInfo",
    "JetRollback",
    "JetOpenTable",
    "JetUpgradeDatabase",
    "JetSetTableSequential",
    "JetGetObjectInfo",
    "JetCreateTableColumnIndex",
    "JetGetBookmark",
    "JetGetSystemParameter",
    "JetBeginSession@16",
    "JetCloseDatabase",
    "JetCreateInstance",
    "JetBeginExternalBackupInstance",
    "JetGetVersion",
    "JetCreateInstance2",
    "JetGetColumnInfo@28",
    "JetOpenTempTable",
    "JetSetCurrentIndex@12",
    "JetExternalRestore",
    "JetSeek",
    "JetOSSnapshotPrepare",
    "JetResetTableSequential",
    "JetCreateTableColumnIndex@12",
    "JetSetSessionContext",
    "JetAttachDatabase@12",
    "JetMove@16",
    "JetGotoSecondaryIndexBookmark",
    "JetGetAttachInfoInstance",
    "JetGetCursorInfo",
    "JetAttachDatabase",
    "JetGotoPosition",
    "JetCreateTableColumnIndex2",
    "JetSeek@12",
    "JetGetLogInfoInstance2",
    "JetStopBackup",
    "JetComputeStats",
    "JetStopServiceInstance",
    "JetEndExternalBackup",
    "JetDupSession",
    "JetRetrieveColumn",
    "JetOpenTable@28",
    "JetOpenTempTable3",
    "JetUpdate@20",
    "JetSetCurrentIndex4",
    "JetDupCursor",
    "JetCloseTable",
    "JetCreateTable",
    "JetBackup@12",
    "JetTruncateLogInstance",
    "JetCreateIndex2",
    "JetDeleteColumn",
    "JetDBUtilities",
    "JetCloseFile",
    "JetEnableMultiInstance",
    "JetPrepareUpdate@12",
    "JetGetInstanceInfo",
    "JetSetIndexRange",
    "JetFreeBuffer",
    "JetSetLS",
    "JetOpenTempTable2",
    "JetRegisterCallback",
    "JetInit3",
    "JetCreateDatabase"
  ],
  "esent97.dll": [
    "JetConvertDDL@20",
    "JetDetachDatabase@8",
    "JetTerm",
    "JetGetTableInfo",
    "JetGetAttachInfo@12",
    "JetCreateIndex",
    "JetOpenDatabase",
    "JetResetSessionContext",
    "JetRetrieveColumns@16",
    "JetStopService",
    "JetBeginTransaction@4",
    "JetCommitTransaction@8",
    "JetCreateIndex2@16",
    "JetOpenTempTable@24",
    "JetGetIndexInfo@28",
    "JetEscrowUpdate",
    "JetGetCurrentIndex@16",
    "JetRenameTable",
    "JetDeleteTable",
    "JetDeleteIndex@12",
    "JetEndSession@8",
    "JetCloseTable@8",
    "JetRetrieveColumns",
    "JetStopBackup@0",
    "JetBeginTransaction",
    "JetGetColumnInfo",
    "JetRestore",
    "JetSetSystemParameter@20",
    "JetTruncateLog",
    "JetGetLock",
    "JetIntersectIndexes@20",
    "JetGetObjidFromName@20",
    "JetSetSessionContext@8",
    "JetGrowDatabase@16",
    "ese",
    "JetBeginExternalBackup",
    "JetIndexRecordCount@16",
    "JetOpenDatabase@20",
    "JetResetCounter@8",
    "JetUpdate",
    "JetRestore2@12",
    "JetSetDatabaseSize",
    "JetSetCurrentIndex2@16",
    "JetIdle",
    "JetGetLogInfo@12",
    "JetComputeStats@8",
    "JetDelete@8",
    "JetTerm@4",
    "JetIdle@8",
    "JetGetCounter",
    "JetDefragment",
    "JetOpenFile@16",
    "JetSetCurrentIndex2",
    "JetGotoBookmark",
    "JetGetTableColumnInfo@24",
    "JetAddColumn@28",
    "JetOpenFile",
    "JetSetCurrentIndex3@20",
    "JetSetSystemParameter",
    "JetGetCounter@12",
    "JetDetachDatabase",
    "JetGrowDatabase",
    "JetGetTableColumnInfo",
    "JetSetColumns@16",
    "JetGotoBookmark@16",
    "JetMakeKey",
    "JetSetColumn@28",
    "JetDupSession@8",
    "JetDelete",
    "JetCloseFile@4",
    "JetIndexRecordCount",
    "JetSetColumns",
    "JetDeleteIndex",
    "JetExternalRestore@32",
    "JetCreateDatabase@20",
    "JetGetChecksum",
    "JetTerm2",
    "JetGetIndexInfo",
    "JetTruncateLog@0",
    "JetCompact",
    "JetGetChecksum@12",
    "JetGetCurrentIndex",
    "JetSetColumnDefaultValue@28",
    "JetGetTableInfo@20",
    "JetGetAttachInfo",
    "JetGetRecordPosition",
    "JetSetColumnDefaultValue",
    "JetBeginSession",
    "JetReadFile",
    "JetMove",
    "JetCreateDatabase2@20",
    "JetDeleteTable@12",
    "JetAttachDatabase2",
    "JetGetObjidFromName",
    "ese@20",
    "JetCommitTransaction",
    "JetGetDatabaseFileInfo",
    "JetGetVersion@8",
    "JetRetrieveTaggedColumnList",
    "JetGetDatabaseInfo@20",
    "JetSetColumn",
    "JetMakeKey@20",
    "JetGetDatabaseFileInfo@16",
    "JetRetrieveKey",
    "JetRestore@8",
    "JetRestore2",
    "JetCreateIndex@28",
    "JetDefragment@24",
    "JetRetrieveKey@24",
    "JetGetLock@12",
    "JetAddColumn",
    "JetGetTableIndexInfo",
    "JetSetCurrentIndex3",
    "JetEndSession",
    "JetInit@4",
    "JetInit",
    "JetConvertDDL",
    "JetReadFile@16",
    "JetCloseDatabase@12",
    "JetPrepareUpdate",
    "JetRollback@8",
    "JetIntersectIndexes",
    "JetResetCounter",
    "JetSetCurrentIndex",
    "JetBackup",
    "JetRetrieveColumn@32",
    "JetCompact@24",
    "JetOpenTempTable2@28",
    "JetCreateDatabase2",
    "JetGetDatabaseInfo",
    "JetGetLogInfo",
    "JetRollback",
    "JetOpenTable",
    "JetGetObjectInfo",
    "JetCreateTableColumnIndex",
    "JetCreateTable@24",
    "JetTerm2@8",
    "JetGetBookmark",
    "JetEndExternalBackup@0",
    "JetGetSystemParameter",
    "JetBeginSession@16",
    "JetCloseDatabase",
    "JetGetObjectInfo@32",
    "JetGetVersion",
    "JetGotoPosition@12",
    "JetGetColumnInfo@28",
    "JetOpenTempTable",
    "JetSetCurrentIndex@12",
    "JetStopService@0",
    "JetExternalRestore",
    "JetResetSessionContext@4",
    "JetSeek",
    "JetCreateTableColumnIndex@12",
    "JetSetSessionContext",
    "JetSetCurrentIndex4@24",
    "JetAttachDatabase@12",
    "JetMove@16",
    "JetGetCursorInfo@20",
    "JetGetCursorInfo",
    "JetAttachDatabase",
    "JetGotoPosition",
    "JetSeek@12",
    "JetStopBackup",
    "JetRenameTable@16",
    "JetComputeStats",
    "JetGetBookmark@20",
    "JetEndExternalBackup",
    "JetDupSession",
    "JetRetrieveColumn",
    "JetOpenTable@28",
    "JetOpenTempTable3",
    "JetUpdate@20",
    "JetGetSystemParameter@24",
    "JetDupCursor@16",
    "JetSetCurrentIndex4",
    "JetSetIndexRange@12",
    "JetGetRecordPosition@16",
    "JetAttachDatabase2@16",
    "JetDupCursor",
    "JetEscrowUpdate@36",
    "JetSetDatabaseSize@16",
    "JetCloseTable",
    "JetRetrieveTaggedColumnList@28",
    "JetCreateTable",
    "JetBackup@12",
    "JetCreateIndex2",
    "JetDeleteColumn",
    "JetDBUtilities",
    "JetCloseFile",
    "JetPrepareUpdate@12",
    "JetBeginExternalBackup@4",
    "JetGetTableIndexInfo@24",
    "JetSetIndexRange",
    "JetDeleteColumn@12",
    "JetOpenTempTable2",
    "JetDBUtilities@4",
    "JetOpenTempTable3@28",
    "JetCreateDatabase"
  ],
  "esentprf.dll": [
    "ClosePerformanceData",
    "CollectPerformanceData",
    "OpenPerformanceData"
  ],
  "eventcls.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllInstall",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "eventlog.dll": [
    "SvcEntry_Eventlog"
  ],
  "expsrv.dll": [
    "__vbaVarLateMemCallSt",
    "EbIsProjectOnStack",
    "__vbaR4ForNextCheck",
    "__vbaPut3",
    "Zombie_GetIDsOfNames",
    "rtcTypeName",
    "__vbaHresultCheck",
    "rtcChangeDir",
    "EbGetObjConnectionCounts",
    "__vbaLateMemNamedCall",
    "GetMemObj",
    "__vbaStrAryToAnsi",
    "rtcEndOfFile",
    "rtcVarStrFromVar",
    "rtcStrConvVar2",
    "__vbaStrDate",
    "__vbaCastObjVar",
    "__vbaLineInputVar",
    "__vbaVarPow",
    "EbLoadRunTime",
    "rtcFileAttributes",
    "EVENT_SINK_AddRef",
    "__vbaVarInt",
    "__vbaMidStmtVarB",
    "__vbaGetOwner3",
    "TipSetOption",
    "__vbaFailedFriend",
    "__vbaFreeStrList",
    "rtcSplit",
    "__vbaLateIdCall",
    "__vbaLateIdNamedCall",
    "__vbaGetFxStr4",
    "__vbaOnGoCheck",
    "__vbaR8ForNextCheck",
    "__vbaCyStr",
    "Zombie_Release",
    "__vbaCastObj",
    "__vbaFpI4",
    "__vbaVarTextCmpNe",
    "__vbaForEachVar",
    "__vbaExitProc",
    "SetMemNewObj",
    "__vbaPrintFile",
    "__vbaObjSetAddref",
    "rtcGetErl",
    "__vbaBoolStr",
    "rtcLeftCharVar",
    "rtcInputBox",
    "rtcCos",
    "__vbaMidStmtVar",
    "EbResetProject",
    "rtcStrConvVar",
    "rtcFV",
    "BASIC_CLASS_Release",
    "__vbaLateIdCallLd",
    "rtcInputCharCountVar",
    "_CIexp",
    "__vbaVarZero",
    "__vbaI2I4",
    "__vbaStrVarMove",
    "TipGetAddressOfPredeclaredInstance",
    "__vbaLenVar",
    "__vbaVarTextTstEq",
    "rtcDDB",
    "__vbaWriteFile",
    "rtcTan",
    "__vbaStrCat",
    "rtcAppActivate",
    "__vbaEraseKeepData",
    "__vbaVarSetUnkAddref",
    "rtcJoin",
    "rtcChoose",
    "_adj_fdiv_m16i",
    "rtcFileReset",
    "__vbaStrCompVar",
    "rtcBstrFromAnsi",
    "__vbaVarSetVar",
    "rtcPV",
    "rtcReplace",
    "__vbaStrTextLike",
    "__vbaGet4",
    "_adj_fpatan",
    "__vbaDerefAry",
    "__vbaR8Var",
    "__vbaStrLike",
    "__vbaVarTextTstGt",
    "__vbaVargUnkAddref",
    "rtcCharValueBstr",
    "__vbaLbound",
    "SetMemObj",
    "__vbaErase",
    "EbSetContextWorkerThread",
    "__vbaVarIndexStoreObj",
    "__vbaFpCSngR4",
    "rtcGetDateValue",
    "__vbaCheckTypeVar",
    "__vbaR8IntI2",
    "__vbaExceptHandler",
    "__vbaI2Sgn",
    "__vbaFpCy",
    "EVENT_SINK2_Release",
    "__vbaVarDup",
    "__vbaLateMemCall",
    "__vbaExitEachAry",
    "rtcStringBstr",
    "__vbaStrCmp",
    "__vbaFreeObjList",
    "BASIC_CLASS_Invoke",
    "__vbaRecAnsiToUni",
    "__vbaUdtVar",
    "rtcDir",
    "__vbaAryDestruct",
    "rtcSgnVar",
    "rtcBstrFromChar",
    "__vbaPrintObj",
    "__vbaVarTstEq",
    "__vbaVarIndexLoad",
    "_allmul",
    "__vbaDateR4",
    "__vbaVarFix",
    "rtcWeekdayName",
    "__vbaForEachCollAd",
    "__vbaSetSystemError",
    "rtcDatePart",
    "rtcPPMT",
    "rtcRightVar",
    "__vbaCyErrVar",
    "PutMem4",
    "__vbaRedimPreserveVar",
    "__vbaAryCopy",
    "__vbaVarLateMemCallLd",
    "__vbaI4Sgn",
    "__vbaCyI4",
    "__vbaFpCSngR8",
    "EbLibraryLoad",
    "rtcRandomNext",
    "__vbaVarCmpLt",
    "rtcIsError",
    "rtcBeep",
    "rtcMakeDir",
    "__vbaStrToAnsi",
    "__vbaFpR8",
    "rtcGetDayOfMonth",
    "rtcHexVarFromVar",
    "__vbaLateMemCallLd",
    "GetMem8",
    "__vbaGosubFree",
    "PutMemEvent",
    "_adj_fdiv_m32i",
    "__vbaVarImp",
    "__vbaStrUI1",
    "rtcSpaceBstr",
    "__vbaRecDestruct",
    "_adj_fdivr_m16i",
    "__vbaCyFix",
    "_adj_fprem1",
    "__vbaCyUI1",
    "rtcFilter",
    "__vbaR4Str",
    "__vbaLateIdNamedStAd",
    "rtcInStr",
    "__vbaDateStr",
    "rtUI1FromErrVar",
    "__vbaCyForInit",
    "PutMemStr",
    "__vbaLateIdSt",
    "__vbaVargVarRef",
    "__vbaI2Var",
    "rtcLeftTrimVar",
    "rtcFileDateTime",
    "__vbaLateIdNamedCallSt",
    "__vbaFpCmpCy",
    "rtcMsgBox",
    "__vbaCyI2",
    "rtcIPMT",
    "_adj_fdiv_r",
    "rtcRgb",
    "rtcGetSecondOfMinute",
    "__vbaBoolErrVar",
    "rtcR8ValFromBstr",
    "__vbaFpR4",
    "rtcFileLength",
    "rtcIsArray",
    "__vbaVarTextTstNe",
    "rtcPartition",
    "rtcAtn",
    "__vbaInStrVarB",
    "Zombie_QueryInterface",
    "__vbaVarCat",
    "rtcFormatNumber",
    "__vbaI4Abs",
    "rtcErrObj",
    "rtcAppleScript",
    "rtcFileWidth",
    "__vbaExitEachColl",
    "__vbaCyAdd",
    "__vbaObjIs",
    "rtcNPer",
    "__vbaFPFix",
    "__vbaVarTextCmpLt",
    "__vbaStrR8",
    "rtcVarFromError",
    "rtcFormatPercent",
    "rtcFreeFile",
    "__vbaVarMul",
    "TipInvokeMethod2",
    "__vbaR8Str",
    "EbGetErrorInfo",
    "__vbaVargVar",
    "__vbaPutOwner3",
    "rtcIRR",
    "PutMemVar",
    "GetMem2",
    "_adj_fdivr_m32",
    "__vbaRedimVar",
    "EbGetHandleOfExecutingProject",
    "__vbaVargObj",
    "rtcBstrFromError",
    "rtcIsEmpty",
    "__vbaLateMemNamedCallLd",
    "__vbaI4Var",
    "rtcGetMonthOfYear",
    "rtcLeftCharBstr",
    "__vbaInStrVar",
    "__vbaVarCmpEq",
    "rtcFormatCurrency",
    "rtcGetDateBstr",
    "rtcNPV",
    "rtcSYD",
    "__vbaGenerateBoundsError",
    "BASIC_DISPINTERFACE_GetTICount",
    "__vbaVarSetUnk",
    "_adj_fdiv_m32",
    "__vbaVarAnd",
    "rtcRightCharBstr",
    "__vbaNextEachVar",
    "__vbaVarSetVarAddref",
    "__vbaPut4",
    "rtcFileLen",
    "__vbaVarTextCmpEq",
    "__vbaUnkVar",
    "__vbaStrComp",
    "__vbaCyForNext",
    "__vbaLsetFixstrFree",
    "__vbaVarIndexLoadRef",
    "rtcRightTrimBstr",
    "__vbaI4ForNextCheck",
    "__vbaFpCDblR4",
    "_CIcos",
    "__vbaVargParmRef",
    "rtcCompareBstr",
    "_adj_fptan",
    "BASIC_CLASS_AddRef",
    "__vbaR4Var",
    "__vbaR8FixI2",
    "BASIC_CLASS_QueryInterface",
    "__vbaStrToUnicode",
    "_CIsqrt",
    "__vbaCyInt",
    "rtcGetFileAttr",
    "SetMemEvent",
    "IID_IVbaHost",
    "rtcInputCount",
    "__vbaFpCDblR8",
    "__vbaStrI4",
    "_adj_fdiv_m64",
    "__vbaR4Sgn",
    "rtcByteValueBstr",
    "__vbaPutFxStr3",
    "__vbaFreeStr",
    "rtcMidVar",
    "__vbaLateMemCallSt",
    "rtI2FromErrVar",
    "rtcFileCopy",
    "__vbaVarMove",
    "__vbaI4Cy",
    "rtcChangeDrive",
    "__vbaInStr",
    "__vbaNew",
    "VarPtr",
    "__vbaVarCmpNe",
    "rtcTrimVar",
    "__vbaI2ForNextCheck",
    "rtcGetYear",
    "__vbaFpUI1",
    "rtcCreateObject2",
    "__vbaCyAbs",
    "__vbaVarLateMemStAd",
    "_adj_fprem",
    "__vbaLateIdStAd",
    "__vbaVargObjAddref",
    "CopyRecord",
    "__vbaVarLikeVar",
    "__vbaPutFxStr4",
    "TipUnloadProject",
    "__vbaNextEachAry",
    "__vbaVarAbs",
    "__vbaVarCopy",
    "rtcBstrFromFormatVar",
    "__vbaVarTextTstLe",
    "rtcInStrRev",
    "__vbaCyMul",
    "__vbaI2Cy",
    "rtcStringVar",
    "__vbaInStrB",
    "__vbaLateIdCallSt",
    "rtcRandomize",
    "__vbaStrI2",
    "__vbaVargUnk",
    "__vbaVarIndexStore",
    "rtcVarFromVar",
    "rtBoolFromErrVar",
    "EVENT_SINK_Release",
    "__vbaVarAdd",
    "rtcUpperCaseBstr",
    "rtcInputCountVar",
    "__vbaStrR4",
    "__vbaVarOr",
    "__vbaAryRebase1Var",
    "EVENT_SINK2_AddRef",
    "__vbaPutOwner4",
    "EbLibraryUnload",
    "rtcDoEvents",
    "__vbaLateMemNamedStAd",
    "__vbaLineInputStr",
    "rtcSLN",
    "TipInvokeMethod",
    "rtcEnvironVar",
    "__vbaRedimPreserve",
    "__vbaVarTextCmpGe",
    "__vbaDerefAry1",
    "rtcVarDateFromVar",
    "rtcGetHourOfDay",
    "__vbaCySub",
    "PutMem2",
    "__vbaStrAryToUnicode",
    "__vbaLateMemStAd",
    "rtcIMEStatus",
    "EbResetProjectNormal",
    "rtcRightCharVar",
    "TipCreateInstanceProject2",
    "__vbaGetOwner4",
    "__vbaVarTextCmpLe",
    "__vbaCyMulI2",
    "_CItan",
    "__vbaVarTextTstGe",
    "__vbaVarTextCmpGt",
    "__vbaFileLock",
    "Zombie_GetTypeInfoCount",
    "rtcExp",
    "__vbaAryMove",
    "rtcCurrentDir",
    "rtcGetSetting",
    "__vbaI4Str",
    "__vbaFileOpen",
    "__vbaUI1I2",
    "__vbaAryRecMove",
    "rtcGetTimeVar",
    "__vbaRecAssign",
    "__vbaHresultCheckNonvirt",
    "__vbaUI1Sgn",
    "__vbaR8FixI4",
    "__vbaVarForNext",
    "__vbaUI1Cy",
    "_CIsin",
    "rtcSpaceVar",
    "__vbaVarLateMemSt",
    "rtCyFromErrVar",
    "rtcDateAdd",
    "__vbaBoolVar",
    "rtcGetDateVar",
    "__vbaCySgn",
    "__vbaAryConstruct",
    "__vbaFpI2",
    "__vbaErrorOverflow",
    "__vbaVarTextTstLt",
    "__vbaUI1I4",
    "TipCreateInstanceEx",
    "__vbaLsetFixstr",
    "__vbaLateMemNamedCallSt",
    "__vbaI2Abs",
    "rtcLenCharVar",
    "__vbaInputFile",
    "__vbaAryConstruct2",
    "__vbaR8IntI4",
    "ProcCallEngine",
    "__vbaCheckType",
    "__vbaI2Str",
    "rtcGetHostLCID",
    "EbDestroyContext",
    "__vbaAryVar",
    "rtcAnsiValueBstr",
    "__vbaVarTstGt",
    "__vbaStrBool",
    "rtcGetTimeBstr",
    "rtBstrFromErrVar",
    "__vbaVarVargNofree",
    "rtcOctBstrFromVar",
    "__vbaAryUnlock",
    "__vbaI4ErrVar",
    "SetMemVar",
    "rtcRightBstr",
    "__vbaNextEachCollVar",
    "__vbaCopyBytes",
    "rtcSetDateVar",
    "__vbaStrMove",
    "__vbaGosub",
    "__vbaMidStmtBstr",
    "__vbaStrErrVarCopy",
    "rtcIsObject",
    "GetMem4",
    "__vbaAryRecCopy",
    "__vbaVarTstLe",
    "__vbaNextEachCollAd",
    "__vbaFixstrConstruct",
    "rtcIsNull",
    "__vbaR8Cy",
    "rtcSqr",
    "__vbaFileCloseAll",
    "rtcGetCurrentCalendar",
    "__vbaCyVar",
    "__vbaStopExe",
    "rtcInputCharCount",
    "__vbaRecUniToAnsi",
    "rtcLeftTrimBstr",
    "__vbaNextEachCollObj",
    "__vbaStrVarVal",
    "rtcCommandVar",
    "__vbaVarSetObjAddref",
    "__vbaI2ErrVar",
    "rtDecFromVar",
    "__vbaForEachCollVar",
    "__vbaNew2",
    "__vbaObjSet",
    "Zombie_AddRef",
    "rtcLenVar",
    "__vbaCopyBytesZero",
    "GetMemEvent",
    "EbGetVBAObject",
    "PutMemObj",
    "__vbaOnError",
    "__vbaError",
    "__vbaGet3",
    "rtcGetObject",
    "__vbaVarLateMemCallLdRf",
    "__vbaFreeVar",
    "rtcPackDate",
    "rtcQBColor",
    "rtcVarBstrFromChar",
    "__vbaVarMod",
    "rtcStrReverse",
    "__vbaObjAddref",
    "__vbaCVarAryUdt",
    "__vbaLdZeroAry",
    "__vbaRedim",
    "__vbaVarTstNe",
    "__vbaRsetFixstr",
    "__vbaVarErrI4",
    "rtcRemoveDir",
    "__vbaNameFile",
    "__vbaRsetFixstrFree",
    "__vbaVarSetObj",
    "__vbaVarCmpGe",
    "PutMemNewObj",
    "rtcVarFromFormatVar",
    "rtcBstrFromByte",
    "__vbaVarLike",
    "__vbaExitEachVar",
    "rtcDateFromVar",
    "PutMem1",
    "__vbaVarCmpGt",
    "rtcImmediateIf",
    "rtcGetDayOfWeek",
    "rtcSetFileAttr",
    "__vbaFreeVarg",
    "rtcKillFiles",
    "__vbaStr2Vec",
    "GetMemVar",
    "rtcMacId",
    "rtcMidBstr",
    "__vbaRefVarAry",
    "__vbaLenVarB",
    "__vbaEnd",
    "PutMem8",
    "rtcMIRR",
    "__vbaLenBstrB",
    "rtcSetTimeVar",
    "rtcSin",
    "__vbaRecDestructAnsi",
    "__vbaHresultCheckObj",
    "__vbaVarTextLike",
    "rtcLeftVar",
    "_adj_fdivr_m64",
    "Zombie_GetTypeInfo",
    "_CIatan",
    "rtcUpperCaseVar",
    "__vbaFileSeek",
    "_adj_fdivr_m32i",
    "rtcIsNumeric",
    "rtcSetDateBstr",
    "DllFunctionCall",
    "rtcCVErrFromVar",
    "__vbaVarForInit",
    "__vbaVarIndexLoadRefLock",
    "__vbaVarSub",
    "__vbaForEachAry",
    "__vbaVarCmpLe",
    "rtcMonthName",
    "__vbaUI1Var",
    "GetMemStr",
    "CreateIExprSrvObj",
    "__vbaFreeObj",
    "rtcIntVar",
    "rtcCallByName",
    "rtcSwitch",
    "__vbaPowerR8",
    "rtcSaveSetting",
    "__vbaForEachCollObj",
    "__vbaVarTstLt",
    "EVENT_SINK_Invoke",
    "__vbaAryVarVarg",
    "rtcSendKeys",
    "__vbaVar2Vec",
    "rtcOctVarFromVar",
    "GetMem1",
    "rtR8FromErrVar",
    "__vbaVarTstGe",
    "rtcMidCharBstr",
    "__vbaStrCopy",
    "rtcIsMissing",
    "__vbaVerifyVarObj",
    "__vbaAryLock",
    "__vbaR4ErrVar",
    "__vbaStrTextCmp",
    "__vbaUI1ErrVar",
    "__vbaVarDateVar",
    "rtcGetMinuteOfHour",
    "__vbaUI1Str",
    "__vbaR8Sgn",
    "rtcPMT",
    "Zombie_Invoke",
    "EbCreateContext",
    "__vbaFileClose",
    "__vbaR8ErrVar",
    "__vbaVarXor",
    "MethCallEngine",
    "rtR4FromErrVar",
    "rtcGetTimer",
    "__vbaChkstk",
    "__vbaVarNeg",
    "rtcMidCharVar",
    "__vbaDateVar",
    "rtcSetTimeBstr",
    "__vbaObjVar",
    "EVENT_SINK_GetIDsOfNames",
    "__vbaVarIdiv",
    "__vbaEraseNoPop",
    "rtcAbsVar",
    "__vbaFreeVarList",
    "rtcVarBstrFromByte",
    "rtcLeftBstr",
    "__vbaUbound",
    "__vbaResume",
    "rtcFileSeek",
    "rtcSetCurrentCalendar",
    "rtcHexBstrFromVar",
    "rtcEnvironBstr",
    "rtcPackTime",
    "__vbaStrFixstr",
    "rtcCreateObject",
    "rtcCommandBstr",
    "__vbaRedimVar2",
    "__vbaFPInt",
    "BASIC_CLASS_GetIDsOfNames",
    "__vbaMidStmtBstrB",
    "rtcShell",
    "rtI4FromErrVar",
    "__vbaGetFxStr3",
    "EVENT_SINK_QueryInterface",
    "__vbaLateIdNamedCallLd",
    "__vbaVargVarMove",
    "__vbaGosubReturn",
    "__vbaVargVarCopy",
    "TipUnloadInstance",
    "rtcTrimBstr",
    "__vbaR4Cy",
    "__vbaLateMemSt",
    "__vbaVarDiv",
    "__vbaStrCy",
    "__vbaDateR8",
    "rtcLowerCaseVar",
    "__vbaVarTextLikeVar",
    "rtcRound",
    "rtcGetPresentDate",
    "rtcFixVar",
    "rtcGetAllSettings",
    "rtcVarType",
    "rtcInStrChar",
    "__vbaLenBstr",
    "rtcRate",
    "__vbaRedimPreserveVar2",
    "rtcDateDiff",
    "rtcFormatDateTime",
    "rtcVarBstrFromAnsi",
    "rtcArray",
    "rtcIsDate",
    "__vbaRaiseEvent",
    "__vbaFPException",
    "rtcDeleteSetting",
    "rtcLowerCaseBstr",
    "rtcRightTrimVar",
    "rtcGetTimeValue",
    "rtcStrFromVar",
    "__vbaStrVarCopy",
    "GetMemNewObj",
    "_CIlog",
    "__vbaVarNot",
    "rtcFileLocation",
    "__vbaVarEqv",
    "__vbaBoolVarNull",
    "rtcCurrentDirBstr",
    "rtcLog",
    "BASIC_DISPINTERFACE_GetTypeInfo"
  ],
  "extmgr.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "exts.dll": [
    "dlls",
    "help",
    "DebugExtensionNotify",
    "DebugExtensionInitialize",
    "psr",
    "teb",
    "ustr",
    "cs",
    "obja",
    "exr",
    "str",
    "analyzeexcep",
    "heap",
    "acl",
    "sd",
    "avrf",
    "sid",
    "gflag",
    "DebugExtensionUninitialize",
    "cxr",
    "list",
    "kuser",
    "atom",
    "peb"
  ],
  "f3ahvoas.dll": [
    "KbdLayerDescriptor",
    "FujitsuOyayubiControl",
    "KbdNlsLayerDescriptor"
  ],
  "faultrep.dll": [
    "ReportEREventDW",
    "CreateMinidumpA",
    "ReportFault",
    "CreateMinidumpW",
    "ReportEREvent",
    "ReportHang",
    "ReportFaultDWM",
    "ReportFaultToQueue",
    "AddERExcludedApplicationA",
    "AddERExcludedApplicationW",
    "ReportFaultFromQueue",
    "ReportKernelFaultDWW",
    "ReportKernelFaultW",
    "ReportKernelFaultA"
  ],
  "fde.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "fdeploy.dll": [
    "ProcessGroupPolicyEx",
    "DllRegisterServer",
    "DllUnregisterServer",
    "GenerateGroupPolicy"
  ],
  "feclient.dll": [
    "FeClientInitialize"
  ],
  "filemgmt.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "CacheSettingsDlg",
    "DllUnregisterServer"
  ],
  "fldrclnr.dll": [
    "DllMain",
    "Wizard_RunDLL",
    "DllInstall",
    "DllRegisterServer"
  ],
  "fltlib.dll": [
    "FilterClose",
    "FilterDetach",
    "FilterGetMessage",
    "FilterInstanceClose",
    "FilterUnload",
    "FilterVolumeFindNext",
    "FilterVolumeInstanceFindNext",
    "FilterGetInformation",
    "FilterGetDosName",
    "FilterFindClose",
    "FilterFindNext",
    "FilterInstanceFindFirst",
    "FilterInstanceGetInformation",
    "FilterSendMessage",
    "FilterVolumeClose",
    "FilterAttach",
    "FilterVolumeInstanceFindClose",
    "FilterReplyMessage",
    "FilterInstanceFindNext",
    "FilterVolumeFindFirst",
    "FilterCreate",
    "FilterConnectCommunicationPort",
    "FilterVolumeFindClose",
    "FilterFindFirst",
    "FilterLoad",
    "FilterVolumeInstanceFindFirst",
    "FilterInstanceCreate",
    "FilterAttachAtAltitude",
    "FilterInstanceFindClose"
  ],
  "fmifs.dll": [
    "SetLabel",
    "EnableVolumeCompression",
    "Extend",
    "ChkdskEx",
    "FormatEx",
    "QueryDeviceInformationByHandle",
    "DiskCopy",
    "Chkdsk",
    "FormatEx2",
    "ComputeFmMediaType",
    "QueryDeviceInformation",
    "InitializeFmIfs",
    "QueryFileSystemName",
    "Format",
    "QuerySupportedMedia",
    "QueryAvailableFileSystemFormat",
    "QueryLatestFileSystemVersion"
  ],
  "fontext.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "fontsub.dll": [
    "MergeFontPackage",
    "CreateFontPackage"
  ],
  "framebuf.dll": "No exports",
  "fsusd.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "_DllEntryPoint@12"
  ],
  "ftlx041e.dll": [
    "FindThaiWordBreakW",
    "FTSWordBreakA",
    "FindThaiWordBreak",
    "FTSWordBreakW"
  ],
  "ftsrch.dll": [
    "SetPhraseTable",
    "OpenTabDialog",
    "ClearDisplayText",
    "OpenBiDiTabDialog",
    "NewHiliter",
    "NewSearcher",
    "DiscardIndex",
    "DllMain",
    "GetPhraseTable",
    "SaveIndex",
    "NewCompressor",
    "ScanText",
    "ScanTopicText",
    "CompressText",
    "DeleteHiliter",
    "QueryOptions",
    "ScanDisplayText",
    "SaveGroup",
    "QueryHilites",
    "DeleteSearcher",
    "ScanTopicTitle",
    "SetDirectoryLocator",
    "OpenIndex",
    "NewIndex",
    "DeleteCompressor",
    "OpenDialog",
    "RegisterAnimator",
    "DecompressText",
    "LoadGroup",
    "IsValidIndex",
    "DeleteIndex",
    "CountHilites"
  ],
  "fwcfg.dll": [
    "InitHelperDll",
    "GetResourceString"
  ],
  "gcdef.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "gdi32.dll": [
    "EngAcquireSemaphore",
    "GetMiterLimit",
    "GetBkMode",
    "GetMetaFileA",
    "EngUnicodeToMultiByteN",
    "GetNearestPaletteIndex",
    "GetEnhMetaFileDescriptionW",
    "PolyPolyline",
    "DdEntry48",
    "DdEntry27",
    "GetFontData",
    "LineDDA",
    "GetCharWidth32A",
    "CLIPOBJ_bEnum",
    "AddFontResourceExA",
    "SetColorSpace",
    "SetBitmapAttributes",
    "GetMetaFileW",
    "GetCharABCWidthsFloatA",
    "DdEntry10",
    "GetCharWidthFloatW",
    "GetOutlineTextMetricsA",
    "PolyPatBlt",
    "UpdateColors",
    "CloseEnhMetaFile",
    "GdiCreateLocalMetaFilePict",
    "SetViewportOrgEx",
    "GdiPlayPrivatePageEMF",
    "GetDCPenColor",
    "FixBrushOrgEx",
    "bInitSystemAndFontsDirectoriesW",
    "FONTOBJ_cGetAllGlyphHandles",
    "EqualRgn",
    "FillRgn",
    "EngCreateDeviceSurface",
    "DdEntry44",
    "GdiFullscreenControl",
    "DeviceCapabilitiesExW",
    "DdEntry46",
    "SetDCPenColor",
    "DdEntry40",
    "SelectClipPath",
    "DdEntry17",
    "EngStretchBlt",
    "TranslateCharsetInfo",
    "GdiGradientFill",
    "GdiGetLocalBrush",
    "FloodFill",
    "GetWorldTransform",
    "EngCreateDeviceBitmap",
    "GetViewportExtEx",
    "SetBitmapDimensionEx",
    "GetPixelFormat",
    "UpdateICMRegKeyW",
    "GetLayout",
    "CreateDIBPatternBrushPt",
    "STROBJ_bGetAdvanceWidths",
    "DdEntry24",
    "GdiReleaseLocalDC",
    "EngAssociateSurface",
    "OffsetRgn",
    "AddFontResourceExW",
    "PolyPolygon",
    "FONTOBJ_pvTrueTypeFontFile",
    "GetClipBox",
    "ExtTextOutA",
    "EngGetPrinterDataFileName",
    "SetLayoutWidth",
    "BitBlt",
    "SetWinMetaFileBits",
    "SetSystemPaletteUse",
    "CopyEnhMetaFileA",
    "DdEntry23",
    "GdiGetPageCount",
    "SelectPalette",
    "SetBrushOrgEx",
    "GdiEntry15",
    "GetGlyphOutline",
    "EnumFontFamiliesExW",
    "EngWideCharToMultiByte",
    "DdEntry55",
    "SetStretchBltMode",
    "EngPlgBlt",
    "CloseMetaFile",
    "EngFindResource",
    "GetArcDirection",
    "GdiCreateLocalEnhMetaFile",
    "EnableEUDC",
    "CreateCompatibleBitmap",
    "GdiSetServerAttr",
    "GdiConvertToDevmodeW",
    "EngMultiByteToWideChar",
    "GetStretchBltMode",
    "GdiEntry13",
    "GdiConvertAndCheckDC",
    "GetFontLanguageInfo",
    "RemoveFontResourceTracking",
    "GdiInitializeLanguagePack",
    "GetCharABCWidthsW",
    "GdiEndDocEMF",
    "Polyline",
    "PtInRegion",
    "StretchDIBits",
    "GetCharacterPlacementW",
    "FONTOBJ_pifi",
    "GetLogColorSpaceA",
    "GetDeviceGammaRamp",
    "CreatePenIndirect",
    "CopyMetaFileW",
    "CreateEnhMetaFileW",
    "DdEntry53",
    "GdiConvertBitmapV5",
    "GdiIsMetaFileDC",
    "CreatePen",
    "GdiGetCodePage",
    "CreateHatchBrush",
    "CreateColorSpaceA",
    "EngComputeGlyphSet",
    "GetEnhMetaFilePaletteEntries",
    "EngCreateSemaphore",
    "HT_Get8BPPFormatPalette",
    "GetCharABCWidthsFloatW",
    "EngFillPath",
    "GdiGetDevmodeForPage",
    "HT_Get8BPPMaskPalette",
    "QueryFontAssocStatus",
    "GdiAddGlsBounds",
    "AngleArc",
    "TextOutA",
    "CreateCompatibleDC",
    "GdiSwapBuffers",
    "GetCharWidthA",
    "GdiAlphaBlend",
    "GdiSetBatchLimit",
    "DdEntry29",
    "CreateICW",
    "DdEntry42",
    "GetCharacterPlacementA",
    "SetTextCharacterExtra",
    "GetRegionData",
    "ScaleWindowExtEx",
    "Ellipse",
    "GdiEntry16",
    "SetWorldTransform",
    "GetKerningPairsW",
    "DeleteColorSpace",
    "GetPaletteEntries",
    "StretchBlt",
    "EnumFontFamiliesExA",
    "EndPage",
    "GdiAddGlsRecord",
    "GetTextExtentExPointWPri",
    "STROBJ_vEnumStart",
    "GetDIBColorTable",
    "GdiGetBatchLimit",
    "CreateBitmap",
    "GetStringBitmapA",
    "GetTextAlign",
    "StrokePath",
    "EngStrokePath",
    "EngTextOut",
    "DdEntry0",
    "PolyBezierTo",
    "GetICMProfileA",
    "RemoveFontMemResourceEx",
    "GdiEntry3",
    "ExtTextOutW",
    "EngDeleteClip",
    "CancelDC",
    "DdEntry8",
    "GetEnhMetaFileA",
    "DdEntry37",
    "GetETM",
    "CheckColorsInGamut",
    "GdiConvertRegion",
    "DdEntry30",
    "GdiConvertDC",
    "RestoreDC",
    "GetCharWidthFloatA",
    "EngLineTo",
    "RoundRect",
    "SetMagicColors",
    "DdEntry41",
    "CreateEllipticRgnIndirect",
    "SetMapMode",
    "DdEntry12",
    "SetBrushAttributes",
    "GdiPlayJournal",
    "GetTextExtentPoint32W",
    "ArcTo",
    "FontIsLinked",
    "GdiEntry12",
    "CreateScalableFontResourceA",
    "XLATEOBJ_piVector",
    "EngPaint",
    "EngQueryLocalTime",
    "DdEntry54",
    "GdiStartDocEMF",
    "CreateRoundRectRgn",
    "GetMetaRgn",
    "GdiConvertBrush",
    "SetDIBitsToDevice",
    "StartDocW",
    "EngAlphaBlend",
    "CreateEllipticRgn",
    "GetEnhMetaFilePixelFormat",
    "PATHOBJ_vEnumStart",
    "GetKerningPairs",
    "DdEntry1",
    "EngReleaseSemaphore",
    "MaskBlt",
    "SetGraphicsMode",
    "SetBoundsRect",
    "CreateRectRgn",
    "IntersectClipRect",
    "PATHOBJ_vEnumStartClipLines",
    "SetMetaRgn",
    "GdiValidateHandle",
    "ResizePalette",
    "DeleteObject",
    "GetMapMode",
    "DdEntry21",
    "GdiConsoleTextOut",
    "GetSystemPaletteUse",
    "DdEntry2",
    "EngDeleteSurface",
    "CreateICA",
    "RemoveFontResourceW",
    "GdiDllInitialize",
    "EndDoc",
    "AddFontResourceTracking",
    "GdiSetLastError",
    "GdiArtificialDecrementDriver",
    "EngUnlockSurface",
    "GdiStartPageEMF",
    "ChoosePixelFormat",
    "GetBitmapDimensionEx",
    "EnumICMProfilesW",
    "RectVisible",
    "GdiGetLocalFont",
    "PolyTextOutA",
    "DdEntry11",
    "EngCheckAbort",
    "MoveToEx",
    "DdEntry4",
    "GetDIBits",
    "CombineTransform",
    "EngDeletePath",
    "WidenPath",
    "EngGetDriverName",
    "CreatePalette",
    "EngMarkBandingSurface",
    "DdEntry56",
    "ClearBrushAttributes",
    "BRUSHOBJ_ulGetBrushColor",
    "CreateSolidBrush",
    "EngCreatePalette",
    "DdEntry19",
    "GetWindowOrgEx",
    "UnloadNetworkFonts",
    "GdiComment",
    "GdiGetSpoolMessage",
    "CreateEnhMetaFileA",
    "EngCopyBits",
    "FONTOBJ_cGetGlyphs",
    "ResetDCW",
    "DeleteDC",
    "DescribePixelFormat",
    "GdiResetDCEMF",
    "AnyLinkedFonts",
    "GdiEntry10",
    "SetBkMode",
    "GetTextFaceA",
    "GdiCleanCacheDC",
    "GdiConvertEnhMetaFile",
    "SetLayout",
    "CombineRgn",
    "GetCharWidthW",
    "GetSystemPaletteEntries",
    "GdiSetPixelFormat",
    "DdEntry45",
    "EngMultiByteToUnicodeN",
    "GdiEntry2",
    "EngLoadModule",
    "GetStringBitmapW",
    "GdiConvertPalette",
    "GdiGetDC",
    "bMakePathNameW",
    "StartDocA",
    "CLIPOBJ_ppoGetPath",
    "XLATEOBJ_cGetPalette",
    "ClearBitmapAttributes",
    "GdiGetCharDimensions",
    "GdiConvertBitmap",
    "GetTextCharsetInfo",
    "GetBrushOrgEx",
    "CloseFigure",
    "EngLockSurface",
    "SetPixelFormat",
    "EngStrokeAndFillPath",
    "CreateFontIndirectA",
    "PATHOBJ_bEnumClipLines",
    "GdiRealizationInfo",
    "Polygon",
    "SetTextAlign",
    "GetTextExtentExPointW",
    "DdEntry47",
    "PlayMetaFileRecord",
    "GetDCBrushColor",
    "EngGradientFill",
    "GdiPrinterThunk",
    "GetCharABCWidthsA",
    "SetDIBColorTable",
    "GetFontUnicodeRanges",
    "GetTextCharacterExtra",
    "CreateDIBSection",
    "SetFontEnumeration",
    "GdiEntry8",
    "CreatePolygonRgn",
    "SetBkColor",
    "AddFontMemResourceEx",
    "SetICMProfileA",
    "EngCreateClip",
    "PATHOBJ_vGetBounds",
    "GdiIsPlayMetafileDC",
    "GetEUDCTimeStamp",
    "GdiEntry11",
    "FONTOBJ_pfdg",
    "DPtoLP",
    "GetTextExtentExPointI",
    "MirrorRgn",
    "CreatePolyPolygonRgn",
    "DdEntry6",
    "GetColorSpace",
    "GetBitmapBits",
    "CreateDCW",
    "DdEntry43",
    "EndFormPage",
    "DdEntry52",
    "GetPixel",
    "GdiQueryFonts",
    "GetBitmapAttributes",
    "ExtCreatePen",
    "GetTransform",
    "GetDCOrgEx",
    "GdiGetSpoolFileHandle",
    "GdiPlayScript",
    "GdiEntry4",
    "GetBoundsRect",
    "FONTOBJ_pxoGetXform",
    "CreateBrushIndirect",
    "CreateColorSpaceW",
    "GetObjectA",
    "GetTextExtentPoint32A",
    "GdiEntry9",
    "EnumObjects",
    "GetClipRgn",
    "GetColorAdjustment",
    "DeleteMetaFile",
    "GdiEntry7",
    "DdEntry13",
    "SetRectRgn",
    "GetLogColorSpaceW",
    "TextOutW",
    "GetPath",
    "DdEntry25",
    "DdEntry28",
    "PolyBezier",
    "SetPolyFillMode",
    "SetRelAbs",
    "EngGetCurrentCodePage",
    "GdiGetLocalDC",
    "GetBrushAttributes",
    "SetROP2",
    "ExcludeClipRect",
    "GetTextExtentExPointA",
    "GetRasterizerCaps",
    "GetEnhMetaFileBits",
    "GdiDeleteLocalDC",
    "EudcUnloadLinkW",
    "DdEntry3",
    "EnumFontFamiliesW",
    "GetTextMetricsW",
    "GetWindowExtEx",
    "DdEntry31",
    "GetWinMetaFileBits",
    "GetCurrentObject",
    "EnumFontsA",
    "RemoveFontResourceExA",
    "CreateDiscardableBitmap",
    "GdiPlayPageEMF",
    "GetStockObject",
    "SetTextColor",
    "GdiGetPageHandle",
    "ScaleViewportExtEx",
    "GetICMProfileW",
    "GetPolyFillMode",
    "GetRgnBox",
    "CreateRectRgnIndirect",
    "DdEntry14",
    "ExtFloodFill",
    "AbortPath",
    "EngFreeModule",
    "GetGlyphOutlineA",
    "SetMiterLimit",
    "GdiFlush",
    "SelectBrushLocal",
    "DdEntry35",
    "GetGlyphOutlineWow",
    "CreateFontW",
    "GetTextFaceW",
    "SetArcDirection",
    "SetBitmapBits",
    "SetPixelV",
    "PatBlt",
    "DeviceCapabilitiesExA",
    "SetViewportExtEx",
    "AnimatePalette",
    "GetCharWidthInfo",
    "DdEntry16",
    "GetTextCharset",
    "SetMapperFlags",
    "Escape",
    "DdEntry51",
    "EngBitBlt",
    "GetTextMetricsA",
    "ResetDCA",
    "SaveDC",
    "SetICMMode",
    "GdiEntry14",
    "CreateHalftonePalette",
    "DdEntry7",
    "GetEnhMetaFileDescriptionA",
    "CreateScalableFontResourceW",
    "PlayMetaFile",
    "LPtoDP",
    "XFORMOBJ_iGetXform",
    "EngStretchBltROP",
    "IsValidEnhMetaRecord",
    "GdiQueryTable",
    "FONTOBJ_vGetInfo",
    "PolylineTo",
    "StartPage",
    "SetWindowOrgEx",
    "GetKerningPairsA",
    "GetOutlineTextMetricsW",
    "SelectClipRgn",
    "UpdateICMRegKeyA",
    "CreateFontIndirectExA",
    "EngDeletePalette",
    "CreateFontA",
    "IsValidEnhMetaRecordOffExt",
    "CreateFontIndirectW",
    "SetPixel",
    "StartFormPage",
    "EnumFontFamiliesA",
    "DdEntry26",
    "GdiProcessSetup",
    "GetTextFaceAliasW",
    "BeginPath",
    "PtVisible",
    "SetWindowExtEx",
    "OffsetWindowOrgEx",
    "DdEntry49",
    "ModifyWorldTransform",
    "GdiEntry1",
    "DdEntry36",
    "DdEntry22",
    "GdiGetBitmapBitsSize",
    "EngTransparentBlt",
    "FillPath",
    "GetTextColor",
    "EnumMetaFile",
    "GetCharWidth32W",
    "EudcLoadLinkW",
    "GdiAddFontResourceW",
    "GdiConvertMetaFilePict",
    "Arc",
    "EndPath",
    "XFORMOBJ_bApplyXform",
    "DdEntry34",
    "GdiFixUpHandle",
    "RealizePalette",
    "SetEnhMetaFileBits",
    "GdiEndPageEMF",
    "SetPaletteEntries",
    "GdiEntry6",
    "DdEntry5",
    "ExtSelectClipRgn",
    "GdiPlayEMF",
    "ExtEscape",
    "OffsetViewportOrgEx",
    "SetAbortProc",
    "FrameRgn",
    "PolyDraw",
    "GdiReleaseDC",
    "BRUSHOBJ_pvAllocRbrush",
    "GetTextExtentPointI",
    "BRUSHOBJ_hGetColorTransform",
    "AbortDoc",
    "EngQueryEMFInfo",
    "AddFontResourceA",
    "PolyTextOutW",
    "STROBJ_bEnumPositionsOnly",
    "FONTOBJ_pQueryGlyphAttrs",
    "GetTextExtentPointW",
    "NamedEscape",
    "CopyMetaFileA",
    "CreateMetaFileA",
    "GetCurrentPositionEx",
    "SetTextJustification",
    "InvertRgn",
    "SwapBuffers",
    "EngCreateBitmap",
    "DrawEscape",
    "GetEUDCTimeStampExW",
    "RemoveFontResourceExW",
    "STROBJ_dwGetCodePage",
    "XLATEOBJ_iXlate",
    "GetNearestColor",
    "cGetTTFFromFOT",
    "GetRelAbs",
    "EnumFontsW",
    "GetTextExtentPointA",
    "GetBkColor",
    "CLIPOBJ_cEnumStart",
    "DdEntry50",
    "AddFontResourceW",
    "PaintRgn",
    "SetDIBits",
    "GdiInitSpool",
    "CreateDIBitmap",
    "ColorCorrectPalette",
    "PlayEnhMetaFileRecord",
    "SetVirtualResolution",
    "GdiDeleteSpoolFileHandle",
    "GdiIsMetaPrintDC",
    "SelectFontLocal",
    "StrokeAndFillPath",
    "STROBJ_bEnum",
    "GetFontResourceInfoW",
    "GetGlyphIndicesW",
    "PlgBlt",
    "CopyEnhMetaFileW",
    "Chord",
    "Pie",
    "GetCharABCWidthsI",
    "GetGraphicsMode",
    "GdiSetAttrs",
    "GetGlyphIndicesA",
    "GetEnhMetaFileHeader",
    "CreateDCA",
    "GetFontAssocStatus",
    "DdEntry39",
    "SetDCBrushColor",
    "SetICMProfileW",
    "GetHFONT",
    "GetGlyphOutlineW",
    "DdEntry32",
    "DdEntry33",
    "BRUSHOBJ_pvGetRbrush",
    "DdEntry18",
    "DeleteEnhMetaFile",
    "SelectObject",
    "DdEntry9",
    "CreateMetaFileW",
    "ExtCreateRegion",
    "PlayEnhMetaFile",
    "GdiDrawStream",
    "GetMetaFileBitsEx",
    "CreateBitmapIndirect",
    "EnumEnhMetaFile",
    "GetObjectW",
    "ColorMatchToTarget",
    "OffsetClipRgn",
    "Rectangle",
    "GetObjectType",
    "CreateFontIndirectExW",
    "RectInRegion",
    "SetDeviceGammaRamp",
    "FlattenPath",
    "EngEraseSurface",
    "LineTo",
    "DdEntry20",
    "EngDeleteSemaphore",
    "UnrealizeObject",
    "GetRandomRgn",
    "GetAspectRatioFilterEx",
    "GdiEntry5",
    "DdEntry38",
    "GdiPlayDCScript",
    "XLATEOBJ_hGetColorTransform",
    "SetColorAdjustment",
    "CreatePatternBrush",
    "DdEntry15",
    "RemoveFontResourceA",
    "gdiPlaySpoolStream",
    "GdiDescribePixelFormat",
    "GetROP2",
    "GetEnhMetaFileW",
    "PATHOBJ_bEnum",
    "GetDeviceCaps",
    "SetMetaFileBitsEx",
    "GetViewportOrgEx",
    "CreateDIBPatternBrush",
    "GetCharWidthI",
    "PathToRegion",
    "GdiTransparentBlt",
    "EnumICMProfilesA",
    "GdiConvertFont"
  ],
  "getuname.dll": [
    "GetUName"
  ],
  "glmf32.dll": [
    "glsBeginCapture",
    "glsAppRef",
    "glsNumbv",
    "glsEndObj",
    "glsUpdateCaptureExecTable",
    "glsGetContextubz",
    "glsNumd",
    "glsHeaderfv",
    "glsGetAllContexts",
    "glsSwapBuffers",
    "glsULongHigh",
    "__glsString_init",
    "glsDataPointer",
    "glsHeaderLayerf",
    "glsGetHeaderiv",
    "glsNumiv",
    "glsULong",
    "glsGetHeaderfv",
    "glsNumub",
    "glsNumi",
    "glsDeleteStream",
    "glsUCS2toUTF8z",
    "glsIsExtensionSupported",
    "glsULongLow",
    "glsHeaderi",
    "glsGetLayerf",
    "glsEndGLS",
    "glsGetStreamType",
    "glsNumubv",
    "glsUnsupportedCommand",
    "glsCallArrayInContext",
    "glsGetConsti",
    "glsNuml",
    "glsReadFunc",
    "glsContext",
    "glsAbortCall",
    "glsNumsv",
    "glsGLRC",
    "glsGetError",
    "glsNumulv",
    "glsNumul",
    "glsGetHeaderubz",
    "glsUTF8toUCS2z",
    "glsCaptureFunc",
    "glsIsContextStream",
    "glsError",
    "glsDisplayMapfv",
    "glsCommandString",
    "glsCopyStream",
    "glsEnumString",
    "glsGetCaptureExecTable",
    "glsGetContextListubz",
    "glsGetStreamReadName",
    "glsGetCommandFunc",
    "glsIsUTF8String",
    "glsNumfv",
    "glsFlush",
    "glsComment",
    "glsNumdv",
    "glsNumus",
    "glsGetContextPointer",
    "glsGetOpcodeCount",
    "glsUnreadFunc",
    "glsUCS4toUTF8z",
    "__glsString_appendChar",
    "glsGetHeaderi",
    "glsLong",
    "glsGLRCLayer",
    "glsNumb",
    "glsGetCommandAlignment",
    "glsIsContext",
    "glsGetLayeri",
    "glsUCStoUTF8z",
    "glsCharubz",
    "glsHeaderGLRCi",
    "glsNums",
    "glsEndCapture",
    "glsGetOpcodes",
    "glsWriteFunc",
    "__glsString_assign",
    "glsNullCommandFunc",
    "glsReadPrefix",
    "__glsParser_print",
    "glsGetHeaderf",
    "__glsParser_create",
    "glsHeaderiv",
    "glsGetStreamAttrib",
    "glsPixelSetupGen",
    "glsGetCaptureFlags",
    "glsUTF8toUCS1z",
    "glsCallStream",
    "glsWritePrefix",
    "glsCallArray",
    "glsGetContexti",
    "glsCaptureFlags",
    "glsGetConstiv",
    "glsBlock",
    "glsNumf",
    "glsPad",
    "glsGetCaptureDispatchTable",
    "glsChannel",
    "glsGetConstubz",
    "glsUCS4toUTF8",
    "glsGetContextFunc",
    "glsHeaderLayeri",
    "glsHeaderf",
    "glsBeginObj",
    "glsUCS1toUTF8z",
    "glsUTF8toUCS4z",
    "glsLongHigh",
    "glsLongLow",
    "glsBeginGLS",
    "glsGenContext",
    "glsHeaderubz",
    "glsCommandAPI",
    "glsNumlv",
    "glsUTF8toUCS4",
    "glsGetCurrentContext",
    "glsDeleteContext",
    "glsGetCommandAttrib",
    "glsNumusv",
    "glsCommandFunc",
    "glsGetStreamCRC32",
    "glsGetCurrentTime",
    "glsRequireExtension",
    "glsDeleteReadPrefix",
    "glsGetStreamSize",
    "glsUTF8toUCSz",
    "glsGetGLRCi",
    "glsGetContextListl",
    "glsNumuiv",
    "glsNumui",
    "glsBinary",
    "glsPixelSetup"
  ],
  "glu32.dll": [
    "gluNewNurbsRenderer",
    "gluNurbsProperty",
    "gluTessProperty",
    "gluQuadricOrientation",
    "gluOrtho2D",
    "gluQuadricNormals",
    "gluNurbsCallback",
    "gluTessBeginPolygon",
    "gluScaleImage",
    "gluPerspective",
    "gluProject",
    "gluUnProject",
    "gluNextContour",
    "gluGetNurbsProperty",
    "gluTessEndPolygon",
    "gluTessBeginContour",
    "gluLoadSamplingMatrices",
    "gluNewQuadric",
    "gluEndSurface",
    "gluGetTessProperty",
    "gluPartialDisk",
    "gluQuadricCallback",
    "gluDisk",
    "gluErrorString",
    "gluBeginTrim",
    "gluTessEndContour",
    "gluTessNormal",
    "gluNurbsSurface",
    "gluEndCurve",
    "gluErrorUnicodeStringEXT",
    "gluBeginPolygon",
    "gluNurbsCurve",
    "gluQuadricDrawStyle",
    "gluGetString",
    "gluBuild1DMipmaps",
    "gluEndTrim",
    "gluDeleteNurbsRenderer",
    "gluQuadricTexture",
    "gluCylinder",
    "gluPwlCurve",
    "gluBeginCurve",
    "gluTessVertex",
    "gluNewTess",
    "gluPickMatrix",
    "gluBuild2DMipmaps",
    "gluLookAt",
    "gluEndPolygon",
    "gluBeginSurface",
    "gluSphere",
    "gluDeleteTess",
    "gluDeleteQuadric",
    "gluTessCallback"
  ],
  "gpedit.dll": [
    "BrowseForGPO",
    "DeleteGPOLink",
    "DeleteAllGPOLinks",
    "ExportRSoPData",
    "DllCanUnloadNow",
    "ImportRSoPData",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer",
    "CreateGPOLink"
  ],
  "gpkcsp.dll": [
    "CPExportKey",
    "CPGetKeyParam",
    "CPGenKey",
    "CPGetHashParam",
    "CPAcquireContext",
    "DllMain",
    "CPDecrypt",
    "CPDeriveKey",
    "DllRegisterServer",
    "CPSetKeyParam",
    "CPSetHashParam",
    "CPHashSessionKey",
    "CPImportKey",
    "CPGetUserKey",
    "CPVerifySignature",
    "CPCreateHash",
    "CPEncrypt",
    "CPDestroyHash",
    "CPGetProvParam",
    "CPHashData",
    "CPDestroyKey",
    "CPSetProvParam",
    "CPGenRandom",
    "CPReleaseContext",
    "DllUnregisterServer",
    "CPSignHash"
  ],
  "gpkrsrc.dll": "No exports",
  "gptext.dll": [
    "GenerateScriptsGroupPolicy",
    "ProcessIPSECPolicy",
    "ProcessScriptsGroupPolicyEx",
    "ProcessPSCHEDPolicy",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "ScrRegGPOListToWbem",
    "DllRegisterServer",
    "ProcessScriptsGroupPolicy",
    "DllUnregisterServer",
    "ProcessWIRELESSPolicy"
  ],
  "HAL.DLL": [
    "HalSetTimeIncrement",
    "HalSetEnvironmentVariable",
    "HalBeginSystemInterrupt",
    "HalSetBusData",
    "WRITE_PORT_ULONG",
    "HalSetBusDataByOffset",
    "HalGetBusDataByOffset",
    "HalStopProfileInterrupt",
    "HalSetDisplayParameters",
    "HalFreeCommonBuffer",
    "HalAcquireDisplayOwnership",
    "WRITE_PORT_BUFFER_USHORT",
    "HalSystemVectorDispatchEntry",
    "HalReportResourceUsage",
    "WRITE_PORT_BUFFER_ULONG",
    "ExReleaseFastMutex",
    "HalQueryDisplayParameters",
    "KeAcquireSpinLock",
    "KeAcquireInStackQueuedSpinLock",
    "HalAssignSlotResources",
    "HalAllocateCommonBuffer",
    "HalStartNextProcessor",
    "KeTryToAcquireQueuedSpinLockRaiseToSynch",
    "HalEnableSystemInterrupt",
    "HalMakeBeep",
    "HalTranslateBusAddress",
    "KeReleaseQueuedSpinLock",
    "HalStartProfileInterrupt",
    "KeRaiseIrqlToDpcLevel",
    "HalHandleNMI",
    "HalSetRealTimeClock",
    "KeAcquireQueuedSpinLock",
    "IoFreeMapRegisters",
    "HalAllProcessorsStarted",
    "HalGetInterruptVector",
    "KeFlushWriteBuffer",
    "READ_PORT_USHORT",
    "KeAcquireQueuedSpinLockRaiseToSynch",
    "HalAllocateCrashDumpRegisters",
    "WRITE_PORT_UCHAR",
    "HalSetProfileInterval",
    "KfLowerIrql",
    "KfReleaseSpinLock",
    "READ_PORT_BUFFER_UCHAR",
    "KeLowerIrql",
    "IoWritePartitionTable",
    "ExTryToAcquireFastMutex",
    "KeReleaseInStackQueuedSpinLock",
    "IoMapTransfer",
    "READ_PORT_BUFFER_USHORT",
    "HalRequestIpi",
    "IoSetPartitionInformation",
    "HalReadDmaCounter",
    "KeAcquireSpinLockRaiseToSynch",
    "IoReadPartitionTable",
    "HalClearSoftwareInterrupt",
    "IoFlushAdapterBuffers",
    "HalGetAdapter",
    "HalReturnToFirmware",
    "KeRaiseIrqlToSynchLevel",
    "IoFreeAdapterChannel",
    "KeAcquireInStackQueuedSpinLockRaiseToSynch",
    "KeReleaseSpinLock",
    "HalProcessorIdle",
    "ExAcquireFastMutex",
    "HalQueryRealTimeClock",
    "HalDisplayString",
    "KfRaiseIrql",
    "HalFlushCommonBuffer",
    "HalInitializeProcessor",
    "KdComPortInUse",
    "HalCalibratePerformanceCounter",
    "IoAssignDriveLetters",
    "HalInitSystem",
    "READ_PORT_BUFFER_ULONG",
    "WRITE_PORT_BUFFER_UCHAR",
    "READ_PORT_UCHAR",
    "HalEndSystemInterrupt",
    "HalAllocateAdapterChannel",
    "HalAdjustResourceList",
    "HalRequestSoftwareInterrupt",
    "KeGetCurrentIrql",
    "KeTryToAcquireQueuedSpinLock",
    "WRITE_PORT_USHORT",
    "HalDisableSystemInterrupt",
    "HalGetBusData",
    "KeRaiseIrql",
    "HalGetEnvironmentVariable",
    "KfAcquireSpinLock",
    "READ_PORT_ULONG",
    "KeQueryPerformanceCounter",
    "KeStallExecutionProcessor"
  ],
  "h323msp.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "hccoin.dll": [
    "HCCOIN_Entry"
  ],
  "hhsetup.dll": [
    "public: __thiscall CFIFOString::CFIFOString(void)",
    "public: unsigned long __thiscall CCollection::Close(void)",
    "public: unsigned long __thiscall CTitle::AddLocationHistory(unsigned long,unsigned short const *,unsigned short const *,unsigned short const *,class CLocation const *,unsigned short const *,unsigned short const *,int)",
    "private: int __thiscall CCollection::WriteFolders(class CFolder * *)",
    "public: void __thiscall CCollection::SetMasterCHM(char const *,unsigned short)",
    "public: void __thiscall CFolder::SetOrder(unsigned long)",
    "public: void __thiscall CLocation::SetId(char const *)",
    "public: class CTitle & __thiscall CTitle::operator=(class CTitle const &)",
    "public: __thiscall CCollection::CCollection(void)",
    "public: unsigned short const * __thiscall CTitle::GetIdW(void)",
    "public: void __thiscall CPointerList::RemoveAll(void)",
    "public: __thiscall CTitle::~CTitle(void)",
    "public: class CLocation * __thiscall CCollection::FindLocation(char const *,unsigned int *)",
    "public: unsigned long __thiscall CCollection::RemoveCollection(int)",
    "private: unsigned long __thiscall CCollection::AllocCopyValue(class CParseXML *,char *,char * *)",
    "public: void __thiscall CCollection::DecrementRefTitleCount(void)",
    "public: struct LocationHistory * __thiscall CTitle::GetLocation(unsigned long)",
    "private: int __thiscall CCollection::WriteFolder(class CFolder * *)",
    "public: class CTitle * __thiscall CCollection::AddTitle(char const *,char const *,char const *,char const *,char const *,unsigned short,unsigned int,class CLocation *,unsigned long *,int,char const *)",
    "public: unsigned short const * __thiscall CLocation::GetTitleW(void)",
    "public: class CTitle * __thiscall CCollection::AddTitle(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short,unsigned int,class CLocation *,unsigned long *,int,unsigned short const *)",
    "public: class CFIFOString & __thiscall CFIFOString::operator=(class CFIFOString const &)",
    "public: class CPointerList & __thiscall CPointerList::operator=(class CPointerList const &)",
    "public: unsigned short const * __thiscall CLocation::GetPathW(void)",
    "public: class CTitle * __thiscall CTitle::GetNextTitle(void)",
    "public: __thiscall CLocation::CLocation(void)",
    "public: class CFolder * __thiscall CFolder::AddChildFolder(char const *,unsigned long,unsigned long *,unsigned short)",
    "private: unsigned long __thiscall CCollection::DeleteTitle(class CTitle *)",
    "public: void __thiscall CLocation::SetPath(char const *)",
    "public: void __thiscall CLocation::SetVolume(unsigned short const *)",
    "public: void __thiscall CTitle::SetNextTitle(class CTitle *)",
    "public: class CFolder * __thiscall CCollection::AddFolder(char const *,unsigned long,unsigned long *,unsigned short)",
    "public: class CFolder * __thiscall CFolder::GetNextFolder(void)",
    "public: void __thiscall CTitle::SetLanguage(unsigned short)",
    "public: class CLocation * __thiscall CCollection::AddLocation(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned long *)",
    "private: unsigned long __thiscall CCollection::HandleCollectionEntry(class CParseXML *,char *)",
    "public: class CLocation * __thiscall CCollection::FindLocation(unsigned short const *,unsigned int *)",
    "public: int __thiscall CCollection::GetMasterCHM(char * *,unsigned short *)",
    "public: class CColList * __thiscall CCollection::AddCollection(void)",
    "public: char * __thiscall CLocation::GetId(void)const",
    "public: void __thiscall CFolder::SetTitle(char const *)",
    "public: unsigned long __thiscall CFIFOString::GetTail(char * *)",
    "public: unsigned short const * __thiscall CCollection::GetCollectionFileNameW(void)",
    "public: void __thiscall CCollection::SetVersion(unsigned long)",
    "public: void __thiscall CTitle::SetId(char const *)",
    "public: class CLocation * __thiscall CLocation::GetNextLocation(void)",
    "public: __thiscall CCollection::~CCollection(void)",
    "public: unsigned short __thiscall CCollection::GetLangId(unsigned short const *)",
    "public: class CFolder & __thiscall CFolder::operator=(class CFolder const &)",
    "public: void __thiscall CCollection::SetMasterCHM(unsigned short const *,unsigned short)",
    "public: unsigned short const * __thiscall CCollection::GetSampleLocationW(void)",
    "public: unsigned long __thiscall CCollection::Open(char const *)",
    "public: void __thiscall CCollection::ConfirmTitles(void)",
    "public: unsigned long __thiscall CTitle::AddLocationHistory(unsigned long,char const *,char const *,char const *,class CLocation const *,char const *,char const *,int)",
    "public: class CLocation & __thiscall CLocation::operator=(class CLocation const &)",
    "public: void __thiscall CCollection::RemoveCollectionEntry(char *)",
    "public: unsigned short __thiscall CCollection::GetLangId(char const *)",
    "public: __thiscall CLocation::~CLocation(void)",
    "public: class CFolder * __thiscall CCollection::GetVisableRootFolder(void)",
    "public: void __thiscall CCollection::SetSampleLocation(unsigned short const *)",
    "public: void __thiscall CFolder::SetTitle(unsigned short const *)",
    "public: void __thiscall CLocation::SetPath(unsigned short const *)",
    "private: void __thiscall CCollection::DeleteFolders(class CFolder * *)",
    "public: __thiscall CFolder::CFolder(void)",
    "public: unsigned long __thiscall CFIFOString::AddTail(char *)",
    "public: unsigned long __thiscall CCollection::Open(unsigned short const *)",
    "public: __thiscall CTitle::CTitle(void)",
    "public: class CTitle * __thiscall CCollection::FindTitle(char const *,unsigned short)",
    "public: class CColList * __thiscall CCollection::FindCollection(char *)",
    "public: __thiscall CPointerList::~CPointerList(void)",
    "private: unsigned long __thiscall CCollection::ParseFile(char const *)",
    "public: char * __thiscall CFolder::GetTitle(void)",
    "private: unsigned long __thiscall CCollection::HandleLocation(class CParseXML *,char *)",
    "private: void __thiscall CCollection::wssResetNextColNum(void)",
    "public: int __thiscall CCollection::GetMasterCHM(unsigned short * *,unsigned short *)",
    "public: struct ListItem * __thiscall CPointerList::First(void)",
    "public: class CLocation * __thiscall CCollection::FirstLocation(void)",
    "public: char * __thiscall CTitle::GetId(void)",
    "public: unsigned long __thiscall CFolder::GetOrder(void)",
    "private: class CTitle * __thiscall CCollection::NewTitle(void)",
    "private: void __thiscall CCollection::DeleteChildren(class CFolder * *)",
    "private: unsigned long __thiscall CCollection::Release(void)",
    "public: void __thiscall CCollection::AddRef(void)",
    "public: void __thiscall CCollection::Dirty(void)",
    "public: unsigned short const * __thiscall CFolder::GetTitleW(void)",
    "public: void __thiscall CFolder::SetExTitlePtr(class CExTitle *)",
    "public: int __thiscall CFolder::bIsVisable(void)",
    "public: void __thiscall CLocation::SetVolume(char const *)",
    "private: unsigned long __thiscall CCollection::HandleCollection(class CParseXML *,char *)",
    "public: unsigned long __thiscall CFolder::AddChildFolder(class CFolder *)",
    "public: __thiscall CFIFOString::~CFIFOString(void)",
    "public: class CFolder * __thiscall CFolder::GetFirstChildFolder(void)",
    "private: void __thiscall CCollection::DeleteLocalFiles(struct LocationHistory *,class CTitle *)",
    "public: class CFolder * __thiscall CFolder::AddChildFolder(unsigned short const *,unsigned long,unsigned long *,unsigned short)",
    "public: void __thiscall CFolder::SetLanguage(unsigned short)",
    "private: unsigned long __thiscall CCollection::AddRefedTitle(class CFolder *)",
    "public: char * __thiscall CLocation::GetTitle(void)",
    "public: unsigned long __thiscall CCollection::GetColNo(void)",
    "public: unsigned short __thiscall CTitle::GetLanguage(void)",
    "public: void __thiscall CLocation::SetNextLocation(class CLocation *)",
    "public: void __thiscall CCollection::IncrementRefTitleCount(void)",
    "public: class CFolder * __thiscall CCollection::AddFolder(unsigned short const *,unsigned long,unsigned long *,unsigned short)",
    "public: int __thiscall CCollection::MergeKeywords(unsigned short *)",
    "public: void __thiscall CTitle::SetId(unsigned short const *)",
    "public: void __thiscall CLocation::SetTitle(unsigned short const *)",
    "public: class CTitle * __thiscall CCollection::GetFirstTitle(void)",
    "public: class CFolder * __thiscall CCollection::GetRootFolder(void)",
    "public: char * __thiscall CLocation::GetVolume(void)",
    "public: unsigned long __thiscall CCollection::Save(void)",
    "public: void __thiscall CCollection::SetSampleLocation(char const *)",
    "public: int __thiscall CCollection::IsDirty(void)",
    "public: struct LocationHistory * __thiscall CTitle::NewLocationHistory(void)",
    "public: unsigned long __thiscall CCollection::GetVersion(void)",
    "public: unsigned short __thiscall CFolder::GetLanguage(void)",
    "public: void __thiscall CFolder::SetNextFolder(class CFolder *)",
    "private: unsigned long __thiscall CCollection::CheckTitleRef(char const *,unsigned short)",
    "public: struct ListItem * __thiscall CPointerList::Add(void *)",
    "public: void __thiscall CFolder::SetFirstChildFolder(class CFolder *)",
    "public: class CTitle * __thiscall CCollection::FindTitle(unsigned short const *,unsigned short)",
    "public: void __thiscall CFIFOString::RemoveAll(void)",
    "public: void __thiscall CLocation::SetId(unsigned short const *)",
    "public: void __thiscall CLocation::SetTitle(char const *)",
    "public: void __thiscall CFolder::SetParent(class CFolder *)",
    "private: class CLocation * __thiscall CCollection::NewLocation(void)",
    "public: char const * __thiscall CCollection::GetCollectionFileName(void)",
    "public: class CFolder * __thiscall CFolder::GetParent(void)",
    "unsigned long __stdcall AllocSetValue(char const *,char * *)",
    "public: int __thiscall CCollection::MergeKeywords(char *)",
    "private: unsigned long __thiscall CCollection::HandleTitle(class CParseXML *,char *)",
    "public: void __thiscall CCollection::SetFindMergedCHMS(int)",
    "public: unsigned long __thiscall CCollection::GetRefTitleCount(void)",
    "public: class CCollection & __thiscall CCollection::operator=(class CCollection const &)",
    "public: unsigned short const * __thiscall CLocation::GetVolumeW(void)",
    "private: unsigned long __thiscall CCollection::DeleteLocation(class CLocation *)",
    "public: char * __thiscall CLocation::GetPath(void)",
    "public: __thiscall CFolder::~CFolder(void)",
    "public: __thiscall CPointerList::CPointerList(void)",
    "public: char * __thiscall CCollection::GetSampleLocation(void)",
    "private: unsigned long __thiscall CCollection::CheckTitleRef(unsigned short const *,unsigned short)",
    "public: unsigned long __thiscall CCollection::DeleteFolder(class CFolder *)",
    "public: struct ListItem * __thiscall CPointerList::Next(struct ListItem *)",
    "private: unsigned long __thiscall CCollection::HandleFolder(class CParseXML *,char *)",
    "public: class CLocation * __thiscall CCollection::AddLocation(char const *,char const *,char const *,char const *,unsigned long *)",
    "public: int __thiscall CCollection::GetFindMergedCHMS(void)",
    "public: unsigned short const * __thiscall CLocation::GetIdW(void)"
  ],
  "hid.dll": [
    "HidP_UsageListDifference",
    "HidD_Hello",
    "HidP_UnsetUsages",
    "HidP_GetUsageValueArray",
    "HidD_FlushQueue",
    "HidP_SetScaledUsageValue",
    "HidD_GetNumInputBuffers",
    "HidP_SetUsageValueArray",
    "HidD_SetOutputReport",
    "HidP_SetData",
    "HidD_GetFeature",
    "HidD_GetInputReport",
    "HidD_GetPreparsedData",
    "HidD_GetSerialNumberString",
    "HidP_GetUsages",
    "HidP_GetExtendedAttributes",
    "HidD_SetConfiguration",
    "HidP_GetButtonCaps",
    "HidP_SetUsageValue",
    "HidD_GetAttributes",
    "HidP_GetData",
    "HidP_GetScaledUsageValue",
    "HidD_FreePreparsedData",
    "HidD_GetIndexedString",
    "HidD_GetMsGenreDescriptor",
    "HidP_GetLinkCollectionNodes",
    "HidP_SetUsages",
    "HidD_SetNumInputBuffers",
    "HidP_GetSpecificButtonCaps",
    "HidP_MaxDataListLength",
    "HidP_InitializeReportForID",
    "HidP_GetCaps",
    "HidP_GetSpecificValueCaps",
    "HidP_TranslateUsagesToI8042ScanCodes",
    "HidD_GetManufacturerString",
    "HidD_GetHidGuid",
    "HidD_GetProductString",
    "HidP_MaxUsageListLength",
    "HidP_GetUsageValue",
    "HidD_GetPhysicalDescriptor",
    "HidP_GetUsagesEx",
    "HidP_GetValueCaps",
    "HidD_GetConfiguration",
    "HidservInstaller",
    "HidD_SetFeature"
  ],
  "hlink.dll": [
    "HlinkParseDisplayName",
    "HlinkCreateExtensionServices",
    "HlinkClone",
    "OleSaveToStreamEx",
    "HlinkResolveShortcutToString",
    "HlinkGetValueFromParams",
    "HlinkResolveShortcut",
    "HlinkTranslateURL",
    "HlinkNavigate",
    "HlinkCreateFromMoniker",
    "HlinkCreateFromString",
    "HlinkOnNavigate",
    "HlinkCreateBrowseContext",
    "HlinkGetSpecialReference",
    "DllRegisterServer",
    "HlinkCreateShortcut",
    "HlinkNavigateToStringReference",
    "HlinkCreateShortcutFromMoniker",
    "HlinkCreateShortcutFromString",
    "HlinkPreprocessMoniker",
    "HlinkOnRenameDocument",
    "DllGetClassObject",
    "HlinkCreateFromData",
    "HlinkResolveMonikerForData",
    "HlinkResolveStringForData",
    "HlinkResolveShortcutToMoniker",
    "HlinkQueryCreateFromData",
    "HlinkUpdateStackItem",
    "DllCanUnloadNow",
    "HlinkIsShortcut",
    "HlinkSetSpecialReference",
    "DllUnregisterServer"
  ],
  "hnetcfg.dll": [
    "IcfFreeString",
    "IcfFreeAdapters",
    "IcfFreeProfile",
    "IcfChangeNotificationDestroy",
    "IcfCheckAppAuthorization",
    "IcfFreeDynamicFwPorts",
    "HNetFreeSharingServicesPage",
    "IcfConnect",
    "HNetGetShareAndBridgeSettings",
    "IcfRefreshPolicy",
    "IcfGetOperationalMode",
    "WinBomConfigureWindowsFirewall",
    "IcfGetDynamicFwPorts",
    "IcfRemoveDisabledAuthorizedApp",
    "DllRegisterServer",
    "IcfCloseDynamicFwPort",
    "DllUnregisterServer",
    "HNetDeleteRasConnection",
    "HNetSharingAndFirewallSettingsDlg",
    "IcfSubNetsIsStringValid",
    "IcfIsIcmpTypeAllowed",
    "IcfSetServicePermission",
    "IcfSubNetsToString",
    "IcfChangeNotificationCreate",
    "HNetGetSharingServicesPage",
    "HNetSetShareAndBridgeSettings",
    "DllGetClassObject",
    "IcfSubNetsGetScope",
    "IcfGetTickets",
    "HNetSharedAccessSettingsDlg",
    "IcfOpenDynamicFwPortWithoutSocket",
    "IcfGetAdapters",
    "IcfGetCurrentProfileType",
    "HNetFreeFirewallLoggingSettings",
    "IcfDisconnect",
    "DllCanUnloadNow",
    "IcfFreeTickets",
    "IcfOpenFileSharingPorts",
    "HNetGetFirewallSettingsPage",
    "IcfOpenDynamicFwPort",
    "IcfIsPortAllowed",
    "IcfGetProfile"
  ],
  "hnetmon.dll": [
    "InitHelperDll"
  ],
  "hnetwiz.dll": [
    "HomeNetWizardRunDll",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllMain",
    "DllUnregisterServer"
  ],
  "hotplug.dll": [
    "HotPlugRemovalVetoedW",
    "HotPlugStandbyVetoedW",
    "HotPlugEjectDevice",
    "HotPlugDriverBlockedW",
    "HotPlugWarmEjectVetoedW",
    "DllCanUnloadNow",
    "HotPlugDeviceTree",
    "DllRegisterServer",
    "DllGetClassObject",
    "HotPlugSafeRemovalNotificationW",
    "CPlApplet",
    "HotPlugHibernateVetoedW",
    "DllUnregisterServer",
    "CreateLocalServerW",
    "HotPlugEjectVetoedW"
  ],
  "httpapi.dll": [
    "HttpQueryConfigGroupInformation",
    "HttpSetConfigGroupInformation",
    "HttpFilterAppRead",
    "HttpSetControlChannelInformation",
    "HttpSetAppPoolInformation",
    "HttpWaitForDemandStart",
    "HttpRemoveUrl",
    "HttpQueryServiceConfiguration",
    "HttpReceiveClientCertificate",
    "HttpOpenControlChannel",
    "HttpRemoveUrlFromConfigGroup",
    "HttpFilterAccept",
    "HttpCreateHttpHandle",
    "HttpReadFragmentFromCache",
    "HttpInitialize",
    "HttpSendResponseEntityBody",
    "HttpFilterRawWriteAndAppRead",
    "HttpWaitForDisconnect",
    "HttpFilterAppWriteAndRawRead",
    "HttpShutdownAppPool",
    "HttpFilterClose",
    "HttpCreateFilter",
    "HttpAddUrl",
    "HttpQueryControlChannelInformation",
    "HttpReceiveHttpRequest",
    "HttpOpenFilter",
    "HttpDeleteServiceConfiguration",
    "HttpQueryAppPoolInformation",
    "HttpFilterRawRead",
    "HttpShutdownFilter",
    "HttpRemoveAllUrlsFromConfigGroup",
    "HttpFlushResponseCache",
    "HttpSetServiceConfiguration",
    "HttpGetCounters",
    "HttpCreateAppPool",
    "HttpAddUrlToConfigGroup",
    "HttpFilterAppWrite",
    "HttpCreateConfigGroup",
    "HttpOpenAppPool",
    "HttpReceiveRequestEntityBody",
    "HttpTerminate",
    "HttpAddFragmentToCache",
    "HttpDeleteConfigGroup",
    "HttpSendHttpResponse",
    "HttpFilterRawWrite"
  ],
  "htui.dll": [
    "HTUI_DeviceColorAdjustmentW",
    "HTUI_ColorAdjustmentW",
    "HTUI_ColorAdjustmentA",
    "HalftoneUI_DLLInit",
    "HTUI_ColorAdjustment",
    "HTUI_DeviceColorAdjustment",
    "HTUI_DeviceColorAdjustmentA"
  ],
  "iasacct.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "iasads.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "iashlpr.dll": [
    "ConfigureIas",
    "DoRequest",
    "MemFreeIas",
    "FreeAttributes",
    "InitializeIas",
    "MemReallocIas",
    "DllCanUnloadNow",
    "ShutdownIas",
    "DllGetClassObject",
    "DllRegisterServer",
    "AllocateAttributes",
    "DllUnregisterServer",
    "MemAllocIas"
  ],
  "iasnap.dll": [
    "IASParseExpression",
    "IASEvaluateExpression",
    "IASParseExpressionEx",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "IASEvaluateTimeOfDay",
    "DllUnregisterServer"
  ],
  "iaspolcy.dll": [
    "IASAttributeAlloc",
    "IASAttributeAddRef",
    "IASAttributeAnsiAlloc",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "IASAttributeRelease",
    "DllUnregisterServer",
    "IASAttributeUnicodeAlloc"
  ],
  "iasrad.dll": [
    "public: long __thiscall VSAFilter::radiusFromIAS(struct IAttributesRaw *)const",
    "public: long __thiscall VSAFilter::radiusToIAS(struct IAttributesRaw *)const",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer",
    "public: long __thiscall VSAFilter::shutdown(void)",
    "public: long __thiscall VSAFilter::initialize(void)"
  ],
  "iasrecst.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer",
    "ServiceMain"
  ],
  "iassam.dll": [
    "IASParmsSetRasUser0",
    "IASParmsFreeUserParms",
    "IASParmsQueryRasUser0",
    "IASParmsQueryUserProperty",
    "DllCanUnloadNow",
    "IASParmsSetUserProperty",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "iassdo.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "iassvcs.dll": [
    "IASVariantChangeType",
    "IASUninitialize",
    "IASSetMaxThreadIdle",
    "IASRequestThread",
    "IASAdler32",
    "IASAllocateUniqueID",
    "IASGetHostByName",
    "IASInitialize",
    "IASGetLocalDictionary",
    "IASRegisterComponent",
    "DllCanUnloadNow",
    "IASGetDictionary",
    "DllRegisterServer",
    "DllGetClassObject",
    "IASSetMaxNumberOfThreads",
    "IASReportEvent",
    "DllUnregisterServer",
    "IASRadiusCrypt"
  ],
  "icaapi.dll": [
    "IcaChannelIoControl",
    "IcaClose",
    "IcaStackTerminate",
    "IcaChannelClose",
    "_IcaStackIoControl",
    "IcaStackConnectionAccept",
    "IcaStackQueryState",
    "IcaChannelOpen",
    "IcaIoControl",
    "IcaStackOpen",
    "IcaTrace",
    "IcaMemoryAllocate",
    "IcaStackUnlock",
    "IcaCdCreateThread",
    "IcaStackConnectionWait",
    "IcaStackIoControl",
    "IcaStackCallback",
    "IcaStackTrace",
    "IcaPushConsoleStack",
    "IcaCdIoControl",
    "IcaStackConnectionRequest",
    "IcaCdWaitForSingleObject",
    "IcaSystemTrace",
    "IcaStackCreateShadowEndpoint",
    "IcaStackDisconnect",
    "IcaStackReconnect",
    "IcaCdWaitForMultipleObjects",
    "IcaMemoryFree",
    "IcaChannelTrace",
    "IcaStackClose",
    "IcaOpen",
    "IcaStackConnectionClose"
  ],
  "icardie.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "icfgnt5.dll": [
    "IcfgNeedModem",
    "IcfgRemoveGlobalDNS",
    "InetSetAutodialAddress",
    "IcfgIsFileSharingTurnedOn",
    "IcfgStartServices",
    "IcfgTurnOffFileSharing",
    "IcfgIsGlobalDNS",
    "InetGetAutodial",
    "IcfgNeedInetComponents",
    "InetSetAutodial",
    "IcfgSetInstallSourcePath",
    "IcfgInstallModem",
    "IcfgGetLastInstallErrorText",
    "InetGetSupportedPlatform",
    "IcfgInstallInetComponents"
  ],
  "icm32.dll": [
    "CMCreateProfile",
    "CMCreateProfileW",
    "CMCreateTransformW",
    "CMTranslateRGBsExt",
    "CMConvertColorNameToIndex",
    "CMCreateTransform",
    "CMCreateDeviceLinkProfile",
    "CMConvertIndexToColorName",
    "CMCheckRGBs",
    "CMTranslateColors",
    "CMGetInfo",
    "CMIsProfileValid",
    "CMTranslateRGB",
    "CMGetNamedProfileInfo",
    "CMCreateTransformExt",
    "CMTranslateRGBs",
    "CMCreateTransformExtW",
    "CMCheckColorsInGamut",
    "CMCheckColors",
    "CMCreateMultiProfileTransform",
    "CMDeleteTransform"
  ],
  "icmp.dll": [
    "IcmpCreateFile",
    "IcmpParseReplies",
    "do_echo_req",
    "IcmpCloseHandle",
    "IcmpSendEcho",
    "IcmpSendEcho2",
    "register_icmp",
    "do_echo_rep"
  ],
  "icmui.dll": [
    "DllCanUnloadNow",
    "SetupColorMatchingW",
    "DllGetClassObject",
    "SetupColorMatchingA"
  ],
  "icwdial.dll": [
    "AutoDialInit",
    "ICWGetRasEntry",
    "AutoDialHandler",
    "RasSetEntryPropertiesScriptPatch",
    "DialingErrorDialog",
    "DialingDownloadDialog"
  ],
  "icwphbk.dll": [
    "PhoneBookLoad",
    "GetSupportNumbers",
    "PhoneBookGetCanonical",
    "PhoneBookUnload",
    "PhoneBookDisplaySignUpNumbers",
    "PhoneBookMergeChanges",
    "PhoneBookSuggestNumbers",
    "_PhbkGenericDlgProc@16"
  ],
  "idndl.dll": [
    "DownlevelGetLocaleScripts",
    "DownlevelGetStringScripts",
    "DownlevelVerifyScripts"
  ],
  "idq.dll": [
    "GetExtensionVersion",
    "TerminateExtension",
    "HttpExtensionProc"
  ],
  "ieakeng.dll": [
    "GetFavoritesNumber",
    "CopyLogoBmp",
    "GetAdmWindowHandle",
    "BToolbar_Edit",
    "BrowseForFolder",
    "ShowADMWindow",
    "ModifyRatings",
    "CreateADMWindow",
    "ResetAdmFiles",
    "MoveDownFavorite",
    "ImportRSSFeeds",
    "IsFavoriteItem",
    "ShowInetcpl",
    "ExportRSSFeeds",
    "CheckForDupKeys",
    "SaveAndCleanupSearch",
    "InitializeSearch",
    "ExportRegValue2Inf",
    "IsADMFileVisible",
    "SetGlobalInt",
    "MoveUpFavorite",
    "ErrorMessageBox",
    "DoReboot",
    "ImportFavoritesCmd",
    "GetFavoriteUrl",
    "SaveAdmFiles",
    "IsAnimBitmapFileValid",
    "SelectADMItem",
    "GetBaseFileName",
    "DeleteFavorite",
    "ExportRegTree2Inf",
    "BToolbar_Init",
    "IsBitmapFileValid",
    "GetURLLinkType",
    "MoveADMWindow",
    "SetDefaultSearchProv",
    "BuildPalette",
    "ImportHomePage",
    "LoadADMFiles",
    "NewFolder",
    "ImportZones",
    "ImportAuthCode",
    "ImportADMFile",
    "GetProxyDlg",
    "CopyAnimBmp",
    "GetGlobalInt",
    "DestroyADMWindow",
    "ModifyAuthCode",
    "ImportFavorites",
    "ImportQuickLinks",
    "BrowseForFile",
    "BToolbar_Save",
    "DisplayADMItem",
    "InitializeHomePage",
    "SetProxyDlg",
    "ExportRegKey2Inf",
    "CheckVer",
    "DeleteADMItems",
    "MigrateToOldFavorites",
    "SetOrClearVersionInfo",
    "GenerateNewVersionStr",
    "CheckField",
    "SetADMWindowText",
    "GetFavoritesMaxNumber",
    "GetAdmFileList",
    "NewUrl",
    "ImportRatings",
    "ModifyFavorite",
    "MigrateFavorites",
    "RemoveSearchProv",
    "SaveADMItem",
    "ImportPrograms",
    "AddADMItem",
    "ModifyZones",
    "ImportConnectSet",
    "BToolbar_Remove",
    "AddEditSearchProvider",
    "ExportQuickLinks",
    "CleanupSearch",
    "DeleteADMItem",
    "CanDeleteADM",
    "ProcessFavSelChange",
    "TestURL",
    "ExportFavorites",
    "ImportSearchProviders",
    "GetFavoritesInfoTip",
    "SaveHomePage"
  ],
  "ieaksie.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "ieakui.dll": "No exports",
  "ieapfltr.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "iedkcs32.dll": [
    "BrandExternal",
    "BrandICW",
    "BrandICW2",
    "ProcessGroupPolicyEx",
    "ProcessGroupPolicyForActivities",
    "BrandIntra",
    "DllRegisterServer",
    "CallInternetInitializeAutoProxyDll",
    "ProcessGroupPolicyForActivitiesEx",
    "BrandIEActiveSetup",
    "ProcessGroupPolicyForZoneMap",
    "BrandCleanInstallStubs",
    "Clear",
    "BrandIE4",
    "GenerateGroupPolicy",
    "CloseRASConnections",
    "ProcessGroupPolicy",
    "DllUnregisterServer",
    "BrandInternetExplorer",
    "InternetInitializeAutoProxyDll",
    "BrandMe"
  ],
  "ieframe.dll": [
    "IECreateDirectory",
    "ImportPrivacySettings",
    "URLQualifyA",
    "DoOrganizeFavDlgW",
    "SoftwareUpdateMessageBox",
    "IEIsInPrivateBrowsing",
    "HlinkFindFrame",
    "IESaveFile",
    "OpenURL",
    "IERegCreateKeyEx",
    "DoPrivacyDlg",
    "IEMoveFileEx",
    "IEShowSaveFileDialog",
    "IEGetFileAttributesEx",
    "ExportCookieFileByProcessW",
    "IERegisterWritableRegistryValue",
    "AddUrlToFavorites",
    "IELaunchManageAddOnsUI",
    "DllRegisterServer",
    "DllUnregisterServer",
    "IERemoveDirectory",
    "HlinkFrameNavigateNHL",
    "IEGetProtectedModeCookie",
    "ImportCookieFileByProcessW",
    "IEInPrivateFilteringEnabled",
    "DoFileDownload",
    "HlinkFrameNavigate",
    "IEDisassociateThreadWithTab",
    "IESetProtectedModeCookie",
    "IECancelSaveFile",
    "IECreateFile",
    "SetQueryNetSessionCount",
    "DllGetClassObject",
    "IEIsProtectedModeProcess",
    "IEAssociateThreadWithTab",
    "IEIsProtectedModeURL",
    "IEGetWriteableFolderPath",
    "DllGetVersion",
    "DoAddToFavDlgW",
    "IEDeleteFile",
    "SHAddSubscribeFavorite",
    "DoAddToFavDlg",
    "DoOrganizeFavDlg",
    "IEGetWriteableHKCU",
    "DllCanUnloadNow",
    "IERegSetValueEx",
    "IERegisterWritableRegistryKey",
    "DllInstall",
    "IEFindFirstFile",
    "URLQualifyW",
    "IELaunchURL",
    "IEUnregisterWritableRegistry",
    "IERefreshElevationPolicy"
  ],
  "iepeers.dll": [
    "DllEnumClassObjects",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "iernonce.dll": [
    "RunOnceExProcess",
    "InitCallback"
  ],
  "iertutil.dll": [
    "IERT_DelayLoadFailureHook",
    "IEGetTabWindowExports",
    "IEGetFrameUtilExports",
    "ResetIEExtensibility",
    "DllCanUnloadNow",
    "IEGetProcessModule",
    "DllGetClassObject",
    "ResetIERegistrySettings",
    "RevertImpersonate",
    "ImpersonateUser"
  ],
  "iesetup.dll": [
    "IEApplyCurrentHardening",
    "IEHardenMachineNow",
    "IEHardenUser",
    "IEHardenAdminNow",
    "IEShowHardeningDialog",
    "IEHardenLMSettings",
    "IEHardenAdmin"
  ],
  "ieui.dll": [
    "SetGadgetBufferInfo",
    "GetGadgetAnimation",
    "DUserFlushDeferredMessages",
    "WaitMessageEx",
    "AutoTrace",
    "InitGadgets",
    "UtilDrawBlendRect",
    "GetGadgetSize",
    "DllMain",
    "GetDebug",
    "PeekMessageExA",
    "SetGadgetFocus",
    "AttachWndProcA",
    "BuildAnimation",
    "GetMessageExW",
    "SetGadgetFocusEx",
    "SetGadgetMessageFilter",
    "SetGadgetParent",
    "FindStdColor",
    "DeleteHandle",
    "BuildInterpolation",
    "SetGadgetRootInfo",
    "CreateAction",
    "DUserFlushMessages",
    "DUserPostEvent",
    "LookupGadgetTicket",
    "DetachWndProc",
    "ForwardGadgetMessage",
    "CreateGadget",
    "GetGadgetFocus",
    "GetStdColorF",
    "GetGadgetTicket",
    "FindGadgetFromPoint",
    "GetStdColorBrushF",
    "GetGadgetRgn",
    "InvalidateGadget",
    "PeekMessageExW",
    "SetGadgetRect",
    "GetMessageExA",
    "SetGadgetStyle",
    "MapGadgetPoints",
    "GetGadgetRect",
    "GetStdColorBrushI",
    "GetStdColorI",
    "AttachWndProcW",
    "DUserSendEvent"
  ],
  "ifmon.dll": [
    "InitHelperDll",
    "GetResourceString"
  ],
  "ifsutil.dll": [
    "public: __thiscall SECRUN::SECRUN(void)",
    "unsigned long __stdcall QueryMachineUniqueToken(void)",
    "protected: __thiscall VOL_LIODPDRV::VOL_LIODPDRV(void)",
    "public: unsigned char __thiscall MOUNT_POINT_MAP::QueryVolumeName(class WSTRING *,class WSTRING *)",
    "public: static unsigned char __stdcall AUTOREG::PushEntry(class WSTRING const *)",
    "public: static unsigned char __stdcall AUTOREG::IsFrontEndPresent(class WSTRING const *,class WSTRING const *)",
    "public: void __thiscall NUMBER_SET::QueryDisjointRange(unsigned long,class BIG_INT *,class BIG_INT *)const",
    "public: static unsigned char __stdcall IFS_SYSTEM::NtDriveNameToDosDriveName(class WSTRING const *,class WSTRING *)",
    "public: unsigned char __thiscall TLINK::Initialize(unsigned short)",
    "public: unsigned short __thiscall TLINK::QueryMemberCount(void)const",
    "public: class BIG_INT & __thiscall TLINK::GetData(unsigned short)",
    "public: static unsigned char __stdcall AUTOREG::IsEntryPresent(class WSTRING const *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::IsArcSystemPartition(class WSTRING const *,unsigned char *)",
    "public: class IO_DP_DRIVE * __thiscall SUPERAREA::GetDrive(void)",
    "public: unsigned char __thiscall NUMBER_SET::CheckAndAdd(class BIG_INT,unsigned char *)",
    "public: static long __stdcall SUPERAREA::GenerateLabelNotification(class WSTRING const *,class WSTRING *,struct _FILE_FS_SIZE_INFORMATION *,struct _FILE_FS_VOLUME_INFORMATION *)",
    "public: unsigned char __thiscall NUMBER_SET::Add(class BIG_INT,class BIG_INT)",
    "public: static unsigned char __stdcall AUTOREG::DeleteEntry(class WSTRING const *,unsigned char)",
    "public: unsigned char __thiscall DP_DRIVE::SendSonyMSModeSenseCmd(struct SONY_MS_MODE_SENSE_DATA *)",
    "public: unsigned char __thiscall LOG_IO_DP_DRIVE::Write(class BIG_INT,unsigned long,void *)",
    "public: __thiscall NUMBER_SET::NUMBER_SET(void)",
    "public: class MESSAGE * __thiscall IO_DP_DRIVE::GetMessageW(void)",
    "public: __thiscall DIGRAPH_EDGE::DIGRAPH_EDGE(void)",
    "public: static void __stdcall IFS_SYSTEM::QueryNtfsTime(union _LARGE_INTEGER *)",
    "public: unsigned char __thiscall IO_DP_DRIVE::InvalidateVolume(void)",
    "public: unsigned char __thiscall NUMBER_SET::Remove(class BIG_INT,class BIG_INT)",
    "public: unsigned char __thiscall NUMBER_SET::AddNext(class BIG_INT)",
    "public: unsigned char __thiscall READ_CACHE::Initialize(class IO_DP_DRIVE *,unsigned long)",
    "public: class MESSAGE * __thiscall SUPERAREA::GetMessageW(void)",
    "public: unsigned char __thiscall INTSTACK::Push(class BIG_INT)",
    "public: __thiscall SPARSE_SET::SPARSE_SET(void)",
    "public: virtual __thiscall SECRUN::~SECRUN(void)",
    "public: static unsigned char __stdcall AUTOREG::DeleteEntry(class WSTRING const *,class WSTRING const *)",
    "public: static unsigned char __stdcall AUTOREG::IsEntryPresent(class WSTRING const *,class WSTRING const *)",
    "public: unsigned char __thiscall READ_WRITE_CACHE::Initialize(class IO_DP_DRIVE *,unsigned long)",
    "public: unsigned char __thiscall NUMBER_SET::QueryContainingRange(class BIG_INT,class BIG_INT *,class BIG_INT *)const",
    "public: void __thiscall TLINK::ShellSort(void)",
    "public: __thiscall DP_DRIVE::DP_DRIVE(void)",
    "public: static unsigned char __stdcall VOL_LIODPDRV::SetAutochkTimeOut(unsigned long)",
    "public: unsigned char __thiscall SPARSE_SET::CheckAndRemove(class BIG_INT,unsigned char *)",
    "public: unsigned char __thiscall DP_DRIVE::SendSonyMSRequestSenseCmd(struct _SENSE_DATA *)",
    "public: virtual __thiscall SPARSE_SET::~SPARSE_SET(void)",
    "public: unsigned char __thiscall SPARSE_SET::Initialize(void)",
    "public: void * __thiscall CANNED_SECURITY::GetCannedSecurityDescriptor(enum _CANNED_SECURITY_TYPE,unsigned long *)",
    "public: unsigned char __thiscall DIGRAPH::AddEdge(unsigned long,unsigned long)",
    "public: unsigned char __thiscall IO_DP_DRIVE::Read(class BIG_INT,unsigned long,void *)",
    "public: unsigned char __thiscall LOG_IO_DP_DRIVE::Read(class BIG_INT,unsigned long,void *)",
    "public: unsigned char __thiscall DIGRAPH::RemoveEdge(unsigned long,unsigned long)",
    "public: unsigned char __thiscall NUMBER_SET::Remove(class NUMBER_SET const *)",
    "public: unsigned char __thiscall MOUNT_POINT_MAP::AddVolumeName(class WSTRING *,class WSTRING *)",
    "public: enum FORMAT_ERROR_CODE __thiscall VOL_LIODPDRV::Format(class WSTRING const *,class MESSAGE *,unsigned long,unsigned long,unsigned long)",
    "public: unsigned char __thiscall DIGRAPH::QueryParentsWithChildren(class NUMBER_SET *,unsigned long)const",
    "public: virtual __thiscall VOL_LIODPDRV::~VOL_LIODPDRV(void)",
    "public: void * __thiscall TLINK::GetBuffer(void *)",
    "public: unsigned char __thiscall NUMBER_SET::DoesIntersectSet(class BIG_INT,class BIG_INT)const",
    "public: unsigned char __thiscall DP_DRIVE::IsATformat(void)const",
    "public: virtual __thiscall MOUNT_POINT_MAP::~MOUNT_POINT_MAP(void)",
    "public: void __thiscall BIG_INT::QueryCompressedInteger(unsigned char *,unsigned char *)const",
    "public: unsigned char __thiscall SECRUN::Initialize(class MEM *,class IO_DP_DRIVE *,class BIG_INT,unsigned long)",
    "public: static unsigned char __stdcall VOL_LIODPDRV::QueryAutochkTimeOut(unsigned long *)",
    "public: unsigned char __thiscall MOUNT_POINT_MAP::QueryDriveName(class WSTRING *,class WSTRING *)",
    "public: static unsigned long __stdcall IFS_SYSTEM::QueryPageSize(void)",
    "public: virtual __thiscall NUMBER_SET::~NUMBER_SET(void)",
    "public: __thiscall INTSTACK::INTSTACK(void)",
    "public: void * __thiscall TLINK::GetSortedFirst(void)",
    "public: __thiscall TLINK::TLINK(void)",
    "public: unsigned char __thiscall VOL_LIODPDRV::Recover(class WSTRING const *,class MESSAGE *)",
    "public: unsigned char __thiscall NUMBER_SET::Initialize(void)",
    "public: virtual unsigned long __thiscall DP_DRIVE::QuerySectorSize(void)const",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryCanonicalNtDriveName(class WSTRING const *,class WSTRING *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::DosDriveNameToNtDriveName(class WSTRING const *,class WSTRING *)",
    "public: unsigned char __thiscall DIGRAPH::QueryChildren(unsigned long,class NUMBER_SET *)const",
    "public: unsigned char __thiscall SPARSE_SET::RemoveAll(void)",
    "public: unsigned long __thiscall DP_DRIVE::QueryPhysicalSectorSize(void)const",
    "public: virtual __thiscall DP_DRIVE::~DP_DRIVE(void)",
    "public: unsigned char __thiscall IO_DP_DRIVE::FlushCache(void)",
    "public: __thiscall LOG_IO_DP_DRIVE::LOG_IO_DP_DRIVE(void)",
    "public: unsigned char __thiscall INTSTACK::Initialize(void)",
    "public: unsigned char __thiscall IO_DP_DRIVE::Verify(class BIG_INT,class BIG_INT)",
    "public: enum _MEDIA_TYPE __thiscall DP_DRIVE::QueryRecommendedMediaType(void)const",
    "public: unsigned char __thiscall SPARSE_SET::CheckAndAdd(class BIG_INT,unsigned char *)",
    "public: __thiscall MOUNT_POINT_MAP::MOUNT_POINT_MAP(void)",
    "public: unsigned char __thiscall DP_DRIVE::QueryMediaByte(void)const",
    "public: static unsigned char __stdcall IFS_SYSTEM::CheckValidSecurityDescriptor(unsigned long,struct _SECURITY_DESCRIPTOR *)",
    "public: __thiscall READ_WRITE_CACHE::READ_WRITE_CACHE(void)",
    "public: unsigned char __thiscall NUMBER_SET::Add(class BIG_INT)",
    "public: class BIG_INT __thiscall INTSTACK::Look(unsigned long)const",
    "public: static long __stdcall DP_DRIVE::QueryNtfsSupportInfo(void *,unsigned char *)",
    "public: unsigned char __thiscall DP_DRIVE::Initialize(class WSTRING const *,class WSTRING const *,class MESSAGE *,unsigned char,unsigned char)",
    "public: unsigned char __thiscall DIGRAPH::Initialize(unsigned long)",
    "public: static unsigned long __stdcall SUPERAREA::ComputeVolId(unsigned long)",
    "public: void * __thiscall TLINK::GetNext(void *)",
    "public: virtual unsigned char __thiscall SECRUN::Write(void)",
    "int __stdcall DiskCopyMainLoop(class WSTRING const *,class WSTRING const *,class WSTRING const *,class WSTRING const *,unsigned char,class MESSAGE *,class MESSAGE *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::FileSetAttributes(class WSTRING const *,unsigned long,unsigned long *)",
    "public: unsigned char __thiscall MOUNT_POINT_MAP::AddDriveName(class WSTRING *,class WSTRING *)",
    "public: class BIG_INT & __thiscall TLINK::GetData(void *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::IsFileSystemEnabled(class WSTRING const *,unsigned char *)",
    "public: class BIG_INT & __thiscall TLINK::GetNextDataSlot(void)",
    "public: unsigned char __thiscall DP_DRIVE::SendSonyMSInquiryCmd(struct SONY_MS_INQUIRY_DATA *)",
    "public: unsigned char __thiscall LOG_IO_DP_DRIVE::Initialize(class WSTRING const *,class MESSAGE *,unsigned char,unsigned short)",
    "public: static unsigned char __stdcall IFS_SYSTEM::IsVolumeDirty(class WSTRING *,unsigned char *)",
    "public: unsigned char __thiscall LOG_IO_DP_DRIVE::Initialize(class WSTRING const *,class WSTRING const *,class MESSAGE *,unsigned char)",
    "public: unsigned char __thiscall NUMBER_SET::AddStart(class BIG_INT)",
    "public: static unsigned char __stdcall IFS_SYSTEM::WriteToFile(class WSTRING const *,void *,unsigned long,unsigned char)",
    "public: unsigned char __thiscall NUMBER_SET::Remove(class BIG_INT)",
    "public: unsigned char __thiscall IO_DP_DRIVE::Write(class BIG_INT,unsigned long,void *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::IsThisNtfs(class BIG_INT,unsigned long,void *)",
    "public: unsigned char __thiscall NUMBER_SET::Add(class NUMBER_SET const *)",
    "public: __thiscall CANNED_SECURITY::CANNED_SECURITY(void)",
    "public: unsigned char __thiscall VOL_LIODPDRV::ForceAutochk(unsigned char,unsigned long,unsigned long,unsigned short,class WSTRING const *)",
    "public: virtual __thiscall INTSTACK::~INTSTACK(void)",
    "public: virtual __thiscall LOG_IO_DP_DRIVE::~LOG_IO_DP_DRIVE(void)",
    "protected: enum FORMAT_ERROR_CODE __thiscall VOL_LIODPDRV::Initialize(class WSTRING const *,class SUPERAREA *,class MESSAGE *,unsigned char,unsigned char,enum _MEDIA_TYPE,unsigned short)",
    "public: unsigned char __thiscall DP_DRIVE::SendSonyMSFormatCmd(void)",
    "public: unsigned char __thiscall DIGRAPH::EliminateCycles(class CONTAINER *)",
    "public: unsigned char __thiscall MOUNT_POINT_MAP::Initialize(void)",
    "public: virtual unsigned char __thiscall SECRUN::Read(void)",
    "protected: __thiscall SUPERAREA::SUPERAREA(void)",
    "public: unsigned char __thiscall IO_DP_DRIVE::Verify(class BIG_INT,class BIG_INT,class NUMBER_SET *)",
    "public: unsigned char __thiscall NUMBER_SET::RemoveAll(void)",
    "public: unsigned char __thiscall MOUNT_POINT_MAP::GetAt(unsigned long,class WSTRING *,class WSTRING *)",
    "public: virtual __thiscall DIGRAPH::~DIGRAPH(void)",
    "public: void __thiscall BIG_INT::Set(unsigned char,unsigned char const *)",
    "void __stdcall RestoreThreadExecutionState(long,unsigned long)",
    "public: __thiscall DIGRAPH::DIGRAPH(void)",
    "public: virtual __thiscall CANNED_SECURITY::~CANNED_SECURITY(void)",
    "public: void * __thiscall TLINK::GetSortedNext(void *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::EnableFileSystem(class WSTRING const *)",
    "public: unsigned char __thiscall VOL_LIODPDRV::SetVolumeLabelAndPrintFormatReport(class WSTRING const *,class MESSAGE *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::EnableVolumeCompression(class WSTRING const *)",
    "public: unsigned char __thiscall NUMBER_SET::CheckAndRemove(class BIG_INT,unsigned char *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryFileSystemName(class WSTRING const *,class WSTRING *,long *,class WSTRING *)",
    "public: unsigned short __thiscall TLINK::QuerySize(void)const",
    "public: virtual class BIG_INT __thiscall DP_DRIVE::QuerySectors(void)const",
    "public: void __thiscall DP_DRIVE::CloseDriveHandle(void)",
    "public: void __thiscall TLINK::Sort(void)",
    "public: virtual __thiscall SUPERAREA::~SUPERAREA(void)",
    "public: virtual __thiscall TLINK::~TLINK(void)",
    "public: unsigned char __thiscall LOG_IO_DP_DRIVE::SetSystemId(unsigned char)",
    "public: void __thiscall INTSTACK::Pop(unsigned long)",
    "public: class IO_DP_DRIVE * __thiscall SECRUN::GetDrive(void)",
    "public: unsigned char __thiscall IO_DP_DRIVE::Lock(void)",
    "public: void __thiscall IO_DP_DRIVE::SetCache(class DRIVE_CACHE *)",
    "public: void * __thiscall DP_DRIVE::QueryDriveHandle(void)const",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryFreeDiskSpace(class WSTRING const *,class BIG_INT *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryNtfsVersion(unsigned char *,unsigned char *,class LOG_IO_DP_DRIVE *,void *)",
    "public: unsigned char __thiscall DP_DRIVE::Initialize(class WSTRING const *,class MESSAGE *,unsigned char,unsigned char,unsigned short)",
    "public: static unsigned char __stdcall IFS_SYSTEM::EnableVolumeUpgrade(class WSTRING const *)",
    "public: __thiscall READ_CACHE::READ_CACHE(void)",
    "protected: unsigned char __thiscall SUPERAREA::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,unsigned long,class MESSAGE *)",
    "_InitializeIfsUtil@12",
    "public: __thiscall MOUNT_POINT_TUPLE::MOUNT_POINT_TUPLE(void)",
    "public: static unsigned char __stdcall AUTOREG::AddEntry(class WSTRING const *)",
    "public: unsigned char __thiscall CANNED_SECURITY::Initialize(void)",
    "public: unsigned char __thiscall DIGRAPH::QueryParents(unsigned long,class NUMBER_SET *)const",
    "public: unsigned char __thiscall VOL_LIODPDRV::ChkDsk(enum FIX_LEVEL,class MESSAGE *,unsigned long,unsigned long,unsigned short,unsigned long *,class WSTRING const *)",
    "public: static class CANNED_SECURITY * __stdcall IFS_SYSTEM::GetCannedSecurity(void)",
    "public: unsigned char __thiscall INTSTACK::ReverseCopy(class INTSTACK *)",
    "public: void __thiscall SPARSE_SET::DumpHashTable(void)",
    "protected: unsigned char __thiscall VOL_LIODPDRV::Initialize(class WSTRING const *,class WSTRING const *,class SUPERAREA *,class MESSAGE *,unsigned char)",
    "public: void * __thiscall TLINK::GetFirst(void)",
    "public: class BIG_INT __thiscall NUMBER_SET::QueryNumber(class BIG_INT)const",
    "public: static unsigned char __stdcall IFS_SYSTEM::DismountVolume(class WSTRING const *)",
    "public: unsigned char __thiscall DP_DRIVE::SendSonyMSTestUnitReadyCmd(struct _SENSE_DATA *)",
    "public: void * __thiscall TLINK::QueryDisjointRangeAndAssignBuffer(class BIG_INT *,unsigned short *,unsigned short *,void *,unsigned long,void *)"
  ],
  "igmpagnt.dll": [
    "SnmpExtensionQuery",
    "SnmpExtensionTrap",
    "SnmpExtensionInit",
    "SnmpExtensionClose"
  ],
  "iissuba.dll": [
    "Msv1_0SubAuthenticationRoutineEx"
  ],
  "ils.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "imagehlp.dll": [
    "SymGetModuleInfo",
    "ImageDirectoryEntryToData",
    "SymFromName",
    "SymEnumerateModules64",
    "StackWalk",
    "FindFileInSearchPath",
    "MakeSureDirectoryPathExists",
    "SymFunctionTableAccess",
    "SymGetLineNext",
    "SymGetSymFromAddr",
    "SymUnDName64",
    "SymGetLineFromAddr",
    "MapDebugInformation",
    "SymGetLineNext64",
    "SymSetSearchPath",
    "UpdateDebugInfoFile",
    "ImageAddCertificate",
    "GetTimestampForLoadedLibrary",
    "SymGetOptions",
    "ImageGetCertificateHeader",
    "SymFindFileInPath",
    "UnmapDebugInformation",
    "ImageLoad",
    "SymGetLinePrev64",
    "EnumerateLoadedModules",
    "SymLoadModule",
    "ReBaseImage",
    "SymGetModuleInfo64",
    "GetImageConfigInformation",
    "TouchFileTimes",
    "FindExecutableImageEx",
    "MapFileAndCheckSumW",
    "SymFunctionTableAccess64",
    "SymCleanup",
    "ImageGetCertificateData",
    "ImageDirectoryEntryToDataEx",
    "SymEnumSym",
    "SymGetModuleBase",
    "SymGetSymFromAddr64",
    "SymGetModuleBase64",
    "ImageGetDigestStream",
    "SymRegisterCallback64",
    "SymEnumerateModules",
    "SearchTreeForFile",
    "SetImageConfigInformation",
    "SymRegisterFunctionEntryCallback",
    "SymSetOptions",
    "RemovePrivateCvSymbolic",
    "SymEnumerateSymbolsW64",
    "StackWalk64",
    "SymRegisterFunctionEntryCallback64",
    "SymGetLineFromAddr64",
    "SymUnloadModule",
    "MapAndLoad",
    "SymGetSearchPath",
    "SplitSymbols",
    "SymEnumerateSymbols",
    "SymGetSymFromName",
    "GetImageUnusedHeaderBytes",
    "SymGetLineFromName",
    "SymGetLineFromName64",
    "SymGetTypeInfo",
    "SymGetModuleInfoW",
    "SymSetContext",
    "ImageRvaToVa",
    "CheckSumMappedFile",
    "BindImage",
    "SymEnumSymbols",
    "SymInitialize",
    "SymGetSymPrev64",
    "FindFileInPath",
    "ImagehlpApiVersion",
    "FindDebugInfoFile",
    "ImageNtHeader",
    "SymUnDName",
    "SymMatchFileName",
    "SymLoadModule64",
    "SymEnumerateSymbols64",
    "FindDebugInfoFileEx",
    "ReBaseImage64",
    "SymFromAddr",
    "ImageRemoveCertificate",
    "UpdateDebugInfoFileEx",
    "SymGetSymPrev",
    "ImageUnload",
    "SymUnloadModule64",
    "ImagehlpApiVersionEx",
    "UnMapAndLoad",
    "ImageRvaToSection",
    "SymGetSymNext64",
    "SymGetLinePrev",
    "SymEnumSourceFiles",
    "SymEnumTypes",
    "RemovePrivateCvSymbolicEx",
    "SymGetSymNext",
    "EnumerateLoadedModules64",
    "SymGetSymFromName64",
    "UnDecorateSymbolName",
    "RemoveRelocations",
    "SymEnumerateSymbolsW",
    "SymGetTypeFromName",
    "FindExecutableImage",
    "MapFileAndCheckSumA",
    "SymRegisterCallback",
    "SymGetModuleInfoW64",
    "BindImageEx",
    "ImageEnumerateCertificates",
    "SymMatchString"
  ],
  "imeshare.dll": [
    "IdFundamentalFromIMEColorStyle",
    "FSupportSty",
    "FRefreshStyle",
    "DllMain",
    "FSpecialIMEColorStyle",
    "FGetIMEStyleAttr",
    "FWinIMEColorStyle",
    "PIMEShareCreate",
    "PIMEStyleFromAttr",
    "CustomizeIMEShare",
    "IdSpecialFromIMEColorStyle",
    "GrfStyIMEStyle",
    "FRGBIMEColorStyle",
    "FUlIMEStyle",
    "FSpecialTextIMEColorStyle",
    "PColorStyleBackFromIMEStyle",
    "FSetIMEStyleAttr",
    "FSetIMEColorStyle",
    "FItalicIMEStyle",
    "IdUlIMEStyle",
    "RGBFromIMEColorStyle",
    "IdWinFromIMEColorStyle",
    "FBoldIMEStyle",
    "PColorStyleTextFromIMEStyle",
    "FSaveIMEShareSetting",
    "FInitIMEShare",
    "FSpecialWindowIMEColorStyle",
    "FSetIMEStyle",
    "FFundamentalIMEColorStyle",
    "EndIMEShare"
  ],
  "imgutil.dll": [
    "SniffStream",
    "GetMaxMIMEIDBytes",
    "CreateDDrawSurfaceOnDIB",
    "IdentifyMIMEType",
    "DllCanUnloadNow",
    "CreateMIMEMap",
    "DllGetClassObject",
    "DecodeImage",
    "ComputeInvCMAP",
    "DitherTo8",
    "DecodeImageEx"
  ],
  "imjp81k.dll": [
    "CreateIImeKbdInstance",
    "CreateIRegManInstance",
    "OurCoTaskMemRealloc",
    "DllCanUnloadNowDone",
    "OurCoTaskMemAlloc",
    "RgSetGakusyuu",
    "OurStringFromGUID2",
    "OurCoCreateInstance",
    "CreateIFEDictionaryInstance",
    "KnlClose",
    "KnlTerm",
    "reload_config",
    "CreateIImeIPointInstance",
    "CreateIImeKnlDictInstance",
    "DllRegisterServer",
    "CreateIFEDictionary2Instance",
    "DllGetClassObject",
    "LoadTipConfig",
    "KnlOpen",
    "CreateIFELanguageInstance",
    "ShutdownKnlDll",
    "CleanDicThreadFunc",
    "OurCoTaskMemFree",
    "CheckFileType",
    "CreateIFECommonInstance",
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "UnLoadOurOle32",
    "KnlInit"
  ],
  "imm32.dll": [
    "ImmGetCompositionStringA",
    "ImmGetCompositionWindow",
    "ImmUnlockIMC",
    "ImmDisableIme",
    "ImmUnregisterWordW",
    "ImmIMPGetIMEW",
    "ImmDestroyContext",
    "CtfImmDispatchDefImeMessage",
    "ImmLockImeDpi",
    "ImmAssociateContextEx",
    "ImmGetCompositionStringW",
    "ImmGetProperty",
    "ImmGetAppCompatFlags",
    "ImmEscapeW",
    "ImmSendIMEMessageExW",
    "ImmActivateLayout",
    "ImmCreateIMCC",
    "ImmShowSoftKeyboard",
    "ImmSetConversionStatus",
    "ImmGetImeMenuItemsW",
    "CtfImmRestoreToolbarWnd",
    "ImmGetCandidateWindow",
    "CtfImmLastEnabledWndDestroy",
    "ImmIMPSetIMEW",
    "ImmDestroySoftKeyboard",
    "ImmSetCompositionStringW",
    "CtfAImmActivate",
    "ImmEnumRegisterWordA",
    "ImmGetCandidateListW",
    "ImmRequestMessageA",
    "ImmWINNLSEnableIME",
    "CtfImmGenerateMessage",
    "ImmIsUIMessageW",
    "ImmGetHotKey",
    "ImmGetContext",
    "ImmCallImeConsoleIME",
    "ImmSetCompositionFontW",
    "ImmSetCompositionWindow",
    "ImmReSizeIMCC",
    "ImmLoadLayout",
    "ImmConfigureIMEA",
    "CtfImmSetAppCompatFlags",
    "ImmRegisterClient",
    "ImmIMPGetIMEA",
    "ImmIsIME",
    "ImmGetCompositionFontA",
    "CtfImmTIMActivate",
    "ImmGetRegisterWordStyleW",
    "CtfImmCoUninitialize",
    "ImmIMPQueryIMEA",
    "ImmLockIMCC",
    "ImmWINNLSGetEnableStatus",
    "ImmProcessKey",
    "ImmSetCompositionStringA",
    "ImmGetImeMenuItemsA",
    "ImmGetVirtualKey",
    "ImmSendIMEMessageExA",
    "CtfImmIsGuidMapEnable",
    "ImmRequestMessageW",
    "ImmDestroyIMCC",
    "ImmGetConversionListW",
    "CtfImmEnterCoInitCountSkipMode",
    "ImmReleaseContext",
    "ImmSetActiveContext",
    "CtfAImmDeactivate",
    "ImmTranslateMessage",
    "ImmEnumInputContext",
    "ImmGetGuideLineA",
    "ImmEnumRegisterWordW",
    "CtfImmIsCiceroEnabled",
    "ImmGetDefaultIMEWnd",
    "ImmGetOpenStatus",
    "ImmAssociateContext",
    "ImmLoadIME",
    "ImmGetIMCCSize",
    "ImmSetCompositionFontA",
    "ImmGetRegisterWordStyleA",
    "ImmIsUIMessageA",
    "ImmSetActiveContextConsoleIME",
    "ImmUnlockIMCC",
    "ImmSetCandidateWindow",
    "ImmCreateSoftKeyboard",
    "CtfImmIsCiceroStartedInThread",
    "CtfImmGetGuidAtom",
    "ImmGetGuideLineW",
    "ImmGetDescriptionA",
    "ImmSimulateHotKey",
    "ImmCreateContext",
    "ImmSetOpenStatus",
    "ImmLockClientImc",
    "ImmConfigureIMEW",
    "ImmIMPSetIMEA",
    "ImmGetCandidateListCountW",
    "ImmGetCandidateListA",
    "CtfImmHideToolbarWnd",
    "ImmGetConversionListA",
    "GetKeyboardLayoutCP",
    "ImmGetDescriptionW",
    "ImmSetHotKey",
    "ImmIMPQueryIMEW",
    "ImmSystemHandler",
    "ImmPenAuxInput",
    "CtfImmSetCiceroStartInThread",
    "ImmGetCandidateListCountA",
    "ImmGetCompositionFontW",
    "ImmSetStatusWindowPos",
    "ImmGetConversionStatus",
    "ImmDisableIME",
    "CtfAImmIsIME",
    "ImmWINNLSGetIMEHotkey",
    "ImmNotifyIME",
    "ImmEscapeA",
    "CtfImmIsTextFrameServiceDisabled",
    "ImmUnlockClientImc",
    "ImmInstallIMEW",
    "ImmFreeLayout",
    "ImmGetStatusWindowPos",
    "ImmPutImeMenuItemsIntoMappedFile",
    "ImmDisableTextFrameService",
    "ImmRegisterWordW",
    "ImmUnregisterWordA",
    "ImmSendMessageToActiveDefImeWndW",
    "ImmGetIMCLockCount",
    "ImmGetImeInfoEx",
    "CtfImmLeaveCoInitCountSkipMode",
    "ImmGetIMCCLockCount",
    "ImmRegisterWordA",
    "ImmGetIMEFileNameW",
    "ImmGetIMEFileNameA",
    "ImmGenerateMessage",
    "ImmLockIMC",
    "ImmUnlockImeDpi",
    "ImmInstallIMEA"
  ],
  "inetcfg.dll": [
    "SetShellNextW",
    "InetSetProxyExW",
    "ConfigureSystemForInternetA",
    "InetGetAutodial",
    "InetConfigSystem",
    "ConfigureSystemForInternetW",
    "InetConfigClientW",
    "InetConfigSystemFromPathW",
    "_LaunchSignupWizard",
    "SetInternetPhoneNumberA",
    "InetSetClientInfo",
    "InetConfigClientA",
    "InetSetProxy",
    "InetSetProxyEx",
    "InetSetProxyW",
    "SetShellNext",
    "_LaunchSignupWizardEx",
    "InetSetAutoProxy",
    "InetPerformSecurityCheck",
    "InetSetClientInfoA",
    "InetGetProxyW",
    "CheckConnectionWizard",
    "FreeSignupWizard",
    "DllRegisterServer",
    "InetGetProxyA",
    "InetNeedSystemComponents",
    "InetSetClientInfoW",
    "SetShellNextA",
    "DllUnregisterServer",
    "IsSmartStartEx",
    "InetSetAutoProxyW",
    "InetNeedModem",
    "IsSmartStart",
    "SetInternetPhoneNumber",
    "InetGetProxy",
    "InetGetClientInfoA",
    "DllGetClassObject",
    "_LaunchSignupWizard@12",
    "InetGetAutodialW",
    "InetSetAutodialA",
    "InetConfigClient",
    "ConfigureSystemForInternet",
    "_CheckConnectionWizard@8",
    "SetAutoProxyConnectoid",
    "InetGetAutodialA",
    "InetConfigSystemFromPath",
    "InetSetAutodialW",
    "SetInternetPhoneNumberW",
    "InetGetClientInfo",
    "_LaunchSignupWizardEx@12",
    "InetSetAutodial",
    "DllCanUnloadNow",
    "InetConfigSystemFromPathA",
    "InetSetProxyA",
    "InetGetClientInfoW",
    "InetSetAutoProxyA",
    "InetStartServices",
    "InetSetProxyExA"
  ],
  "inetcomm.dll": [
    "MimeOleGetFileInfo",
    "MimeOleSMimeCapsFull",
    "MimeOleGetRelatedSection",
    "MimeEditDocumentFromStream",
    "EssReceiptDecodeEx",
    "MimeOleAlgStrengthFromSMimeCap",
    "EssReceiptRequestDecodeEx",
    "MimeOleConvertEnrichedToHTML",
    "MimeOleSMimeCapsToDlg",
    "MimeOleGetBodyPropW",
    "MimeOleSMimeCapRelease",
    "EssSecurityLabelDecodeEx",
    "HrFreeAttachData",
    "EssContentHintEncodeEx",
    "MimeOleGetPropertySchema",
    "MimeGetAddressFormatW",
    "CreateIMAPTransport2",
    "EssReceiptEncodeEx",
    "MimeOleCreatePropertySet",
    "MimeEditViewSource",
    "MimeOleCreateSecurity",
    "MimeOleCreateBody",
    "MimeOleGenerateCID",
    "HrGetAttachIconByFile",
    "MimeOleAlgNameFromSMimeCap",
    "MimeOleSMimeCapAddCert",
    "RichMimeEdit_CreateInstance",
    "DllCanUnloadNow",
    "MimeOleSetDefaultCharset",
    "CreatePOP3Transport",
    "MimeOleObjectFromMoniker",
    "EssMLHistoryDecodeEx",
    "MimeOleGetExtContentType",
    "CreateNNTPTransport",
    "MimeEditIsSafeToRun",
    "MimeOleInetDateToFileTime",
    "EssMLHistoryEncodeEx",
    "MimeOleEncodeHeader",
    "MimeOleGetCodePageInfo",
    "EssContentHintDecodeEx",
    "MimeOleGetPropA",
    "MimeOleGetCodePageCharset",
    "MimeOleSetCompatMode",
    "MimeOleFindCharset",
    "MimeOleSetPropA",
    "EssReceiptRequestEncodeEx",
    "MimeOleGetFileExtension",
    "HrAttachDataFromBodyPart",
    "DllGetClassObject",
    "CreateRangeList",
    "MimeOleDecodeHeader",
    "MimeOleGetPropW",
    "MimeOleParseMhtmlUrl",
    "MimeOleSMimeCapGetHashAlg",
    "HrAthGetFileNameW",
    "MimeOleFileTimeToInetDate",
    "MimeOleStripHeaders",
    "CreateRASTransport",
    "MimeOleCreateMessageParts",
    "EssKeyExchPreferenceDecodeEx",
    "HrGetLastOpenFileDirectoryW",
    "GetDllMajorVersion",
    "DllUnregisterServer",
    "MimeOleGetInternat",
    "MimeOleSetPropW",
    "MimeOleGenerateFileName",
    "MimeOleUnEscapeStringInPlace",
    "HrGetAttachIcon",
    "HrGetDisplayNameWithSizeForFile",
    "MimeOleGetContentTypeExt",
    "MimeOleClearDirtyTree",
    "MimeOleGetFileInfoW",
    "MimeOleOpenFileStream",
    "CreateIMAPTransport",
    "MimeOleCreateHashTable",
    "EssSignCertificateDecodeEx",
    "MimeOleSetBodyPropA",
    "MimeOleGenerateMID",
    "MimeOleGetBodyPropA",
    "MimeEditCreateMimeDocument",
    "EssKeyExchPreferenceEncodeEx",
    "MimeOleGetAllocator",
    "MimeEditGetBackgroundImageUrl",
    "MimeOleGetDefaultCharset",
    "HrGetLastOpenFileDirectory",
    "MimeOleSetBodyPropW",
    "MimeOleSMimeCapAddSMimeCap",
    "HrSaveAttachToFile",
    "HrDoAttachmentVerb",
    "EssSignCertificateEncodeEx",
    "HrSaveAttachmentAs",
    "MimeOleGetCharsetInfo",
    "EssSecurityLabelEncodeEx",
    "DllRegisterServer",
    "MimeOleSMimeCapsFromDlg",
    "MimeOleCreateVirtualStream",
    "MimeOleSMimeCapGetEncAlg",
    "MimeOleCreateMessage",
    "MimeOleParseRfc822AddressW",
    "MimeOleCreateByteStream",
    "MimeOleCreateHeaderTable",
    "MimeOleGetCertsFromThumbprints",
    "HrAthGetFileName",
    "HrAttachDataFromFile",
    "CreateSMTPTransport",
    "MimeOleSMimeCapInit",
    "MimeOleParseRfc822Address"
  ],
  "inetcplc.dll": "No exports",
  "inetmib1.dll": [
    "Mib2DLLEntry",
    "SnmpExtensionInitEx",
    "SnmpExtensionTrap",
    "SnmpExtensionInit",
    "SnmpExtensionQuery"
  ],
  "inetpp.dll": [
    "InitializePrintProvidor"
  ],
  "inetppui.dll": [
    "InitializePrintMonitorUI"
  ],
  "inetres.dll": "No exports",
  "infosoft.dll": [
    "_IIword@8",
    "_IIbuf@8",
    "_NTFMSetLength@8",
    "_IIdiagoff@4",
    "_NTFMDestruct@4",
    "_NTFMGetPosition@4",
    "_IIbuf_mem@12",
    "_NTFMSeek@12",
    "_NTFMGetDirtyBit@8",
    "_NTFMSetName@8",
    "_NTFMDelete@4",
    "_NTFMClose@4",
    "_NTFMCreate@4",
    "_IIapp@8",
    "_NTFMLockMapping@8",
    "_NTFMFlushMapping@8",
    "_NTFMGetName@12",
    "_NTFMRead@12",
    "_IIdiagon@4",
    "DllRegisterServer",
    "_IIdb_mem@12",
    "_NTFMCompare@8",
    "_NTFMGetMapping@20",
    "_NTFMGetLength@4",
    "_NTFMSetDirtyBit@12",
    "_IIGetAppElem@4",
    "_NTFMSetMutexProc@8",
    "_NTFMGetMapHandle@8",
    "DllGetClassObject",
    "_IIapp_mem@8",
    "_IIdb@8",
    "_NTFMWrite@12",
    "_NTFMSetMapping@20",
    "_IIGetFM@0",
    "_NTFMUnlockMapping@8",
    "_NTFMGetStatus@4",
    "DllCanUnloadNow",
    "_NTFMReleaseMapHandle@8",
    "DllUnregisterServer",
    "_NTFMCopy@4",
    "_NTFMOpen@8"
  ],
  "initpki.dll": [
    "InitializePKI",
    "DllUnregisterServer",
    "DllInstall",
    "DllRegisterServer"
  ],
  "input.dll": [
    "CPlApplet"
  ],
  "inseng.dll": [
    "GetICifRWFileFromFile",
    "CheckTrust",
    "DllCanUnloadNow",
    "PurgeDownloadDirectory",
    "CheckForVersionConflict",
    "GetICifFileFromFile",
    "CheckTrustEx",
    "DllGetClassObject",
    "DownloadFile"
  ],
  "iologmsg.dll": "No exports",
  "iphlpapi.dll": [
    "SetIfEntry",
    "GetUniDirectionalAdapterInfo",
    "SetIpStatsToStack",
    "GetUdpStatsFromStack",
    "SendARP",
    "_PfCreateInterface@24",
    "GetUdpStatistics",
    "AllocateAndGetUdpTableFromStack",
    "GetOwnerModuleFromUdp6Entry",
    "GetAdaptersAddresses",
    "SetBlockRoutes",
    "GetAdaptersInfo",
    "GetAdapterOrderMap",
    "SetProxyArpEntryToStack",
    "GetExtendedTcpTable",
    "GetTcpStatsFromStackEx",
    "GetIpStatsFromStackEx",
    "SetTcpEntryToStack",
    "IcmpCloseHandle",
    "IcmpSendEcho2",
    "NTTimeToNTPTime",
    "GetRTTAndHopCount",
    "GetBestInterfaceEx",
    "GetIcmpStatistics",
    "GetIcmpStatsFromStackEx",
    "SetIpMultihopRouteEntryToStack",
    "AllocateAndGetArpEntTableFromStack",
    "InternalSetIpStats",
    "GetUdpTable",
    "GetIpStatistics",
    "register_icmp",
    "SetTcpEntry",
    "NhpGetInterfaceIndexFromStack",
    "AllocateAndGetIfTableFromStack",
    "_PfAddFiltersToInterface@24",
    "InternalGetIpAddrTable",
    "DeleteIpForwardEntry",
    "GetUdpStatisticsEx",
    "GetTcpTableFromStack",
    "InternalGetIfTable",
    "SetIpTTL",
    "GetNumberOfInterfaces",
    "AllocateAndGetIpNetTableFromStack",
    "DeleteProxyArpEntry",
    "_PfRebindFilters@8",
    "_PfGetInterfaceStatistics@16",
    "DisableMediaSense",
    "GetOwnerModuleFromUdpEntry",
    "InternalGetTcpTable",
    "InternalGetUdpTable",
    "do_echo_req",
    "GetUdpTableFromStack",
    "AllocateAndGetUdpExTable2FromStack",
    "SetIpNetEntry",
    "AllocateAndGetTcpExTable2FromStack",
    "GetInterfaceInfo",
    "CreateIpForwardEntry",
    "GetIpStatisticsEx",
    "InternalSetIfEntry",
    "AddIPAddress",
    "FlushIpNetTableFromStack",
    "Icmp6SendEcho2",
    "InternalSetIpForwardEntry",
    "NotifyRouteChange",
    "AllocateAndGetTcpExTableFromStack",
    "GetTcpStatsFromStack",
    "CreateIpNetEntry",
    "GetIpStatsFromStack",
    "AllocateAndGetUdpExTableFromStack",
    "_PfRemoveGlobalFilterFromInterface@8",
    "_PfUnBindInterface@4",
    "DeleteIPAddress",
    "SetIfEntryToStack",
    "GetIpNetTableFromStack",
    "AllocateAndGetTcpTableFromStack",
    "GetBestRouteFromStack",
    "IsLocalAddress",
    "GetUdpStatsFromStackEx",
    "GetBestInterfaceFromStack",
    "GetTcpTable",
    "IcmpSendEcho",
    "GetIfEntry",
    "GetOwnerModuleFromTcpEntry",
    "EnableRouter",
    "SetIpNetEntryToStack",
    "do_echo_rep",
    "GetFriendlyIfIndex",
    "_PfRemoveFilterHandles@12",
    "GetTcpStatisticsEx",
    "IcmpParseReplies",
    "SetRouteWithRef",
    "GetIfTable",
    "GetIcmpStatsFromStack",
    "SetAdapterIpAddress",
    "GetIfEntryFromStack",
    "GetAdapterIndex",
    "GetIpAddrTable",
    "GetUdpExTable2FromStack",
    "GetExtendedUdpTable",
    "DeleteIpNetEntry",
    "GetIpForwardTable",
    "GetOwnerModuleFromTcp6Entry",
    "IpRenewAddress",
    "GetIgmpList",
    "SetIpRouteEntryToStack",
    "NhpAllocateAndGetInterfaceInfoFromStack",
    "CreateProxyArpEntry",
    "_PfDeleteInterface@4",
    "NotifyRouteChangeEx",
    "InternalGetIpNetTable",
    "GetPerAdapterInfo",
    "GetTcpStatistics",
    "CancelIPChangeNotify",
    "AllocateAndGetIpAddrTableFromStack",
    "InternalGetIpForwardTable",
    "_PfTestPacket@20",
    "NhGetGuidFromInterfaceName",
    "_PfBindInterfaceToIndex@16",
    "_PfSetLogBuffer@28",
    "NhGetInterfaceNameFromGuid",
    "SetIpStatistics",
    "NotifyAddrChange",
    "UnenableRouter",
    "InternalCreateIpNetEntry",
    "InternalSetIpNetEntry",
    "FlushIpNetTable",
    "Icmp6ParseReplies",
    "_PfAddGlobalFilterToInterface@8",
    "GetBestRoute",
    "_PfRemoveFiltersFromInterface@20",
    "IpReleaseAddress",
    "GetNetworkParams",
    "SetIpForwardEntryToStack",
    "GetBestInterface",
    "SetIpForwardEntry",
    "GetIpErrorString",
    "InternalDeleteIpNetEntry",
    "AllocateAndGetIpForwardTableFromStack",
    "RestoreMediaSense",
    "IcmpCreateFile",
    "_PfDeleteLog@0",
    "NTPTimeToNTFileTime",
    "NhGetInterfaceNameFromDeviceGuid",
    "_PfBindInterfaceToIPAddress@12",
    "GetIpNetTable",
    "InternalCreateIpForwardEntry",
    "GetIpForwardTableFromStack",
    "GetIcmpStatisticsEx",
    "GetTcpExTable2FromStack",
    "InternalDeleteIpForwardEntry",
    "InternalSetTcpEntry",
    "GetIpAddrTableFromStack",
    "_PfMakeLog@4",
    "Icmp6CreateFile",
    "GetIfTableFromStack"
  ],
  "ipmontr.dll": [
    "IpmontrSetInfoBlockInInterfaceInfo",
    "IpmontrCreateInterface",
    "IpmontrDeleteInterface",
    "IpmontrGetFriendlyNameFromIfName",
    "IpmontrDeleteProtocol",
    "IpmontrGetInfoBlockFromGlobalInfo",
    "InitHelperDll",
    "IpmontrSetInfoBlockInGlobalInfo",
    "IpmontrGetInfoBlockFromInterfaceInfo",
    "IpmontrGetInterfaceType",
    "IpmontrInterfaceEnum",
    "IpmontrGetIfIndexFromFriendlyName",
    "IpmontrGetIfNameFromFriendlyName",
    "IpmontrDeleteInfoBlockFromInterfaceInfo",
    "IpmontrGetFriendlyNameFromIfIndex"
  ],
  "ipnathlp.dll": [
    "NatCreateRedirect",
    "NhAcquireFixedLengthBuffer",
    "NatCancelRedirect",
    "NhAcceptStreamSocket",
    "NhDeleteSocket",
    "NhReleaseBuffer",
    "NatCancelDynamicRedirect",
    "NhInitializeTraceManagement",
    "NatCreateRedirectEx",
    "NatReleasePortReservation",
    "NatCreateDynamicRedirectEx",
    "NhReadStreamSocket",
    "NatInitializePortReservation",
    "RegisterProtocol",
    "NatLookupAndQueryInformationSessionMapping",
    "NhInitializeBufferManagement",
    "NatShutdownPortReservation",
    "NhReadDatagramSocket",
    "NhWriteStreamSocket",
    "NatAcquirePortReservation",
    "NatQueryInformationRedirect",
    "NatShutdownTranslator",
    "NatInitializeTranslator",
    "NhWriteDatagramSocket",
    "NhCreateDatagramSocket",
    "NatQueryInformationRedirectHandle",
    "NhCreateStreamSocket",
    "NatCreateDynamicRedirect",
    "NhAcquireVariableLengthBuffer",
    "NatCreateDynamicFullRedirect",
    "ServiceMain"
  ],
  "ippromon.dll": [
    "InitHelperDll"
  ],
  "iprop.dll": [
    "StgCreatePropStg",
    "PropStgNameToFmtId",
    "PropVariantClear",
    "FreePropVariantArray",
    "StgCreatePropSetStg",
    "FmtIdToPropStgName",
    "StgOpenPropStg",
    "PropVariantCopy"
  ],
  "iprtprio.dll": [
    "ComputeRouteMetric",
    "GetPriorityInfo",
    "SetPriorityInfo"
  ],
  "iprtrmgr.dll": [
    "MapAddressToAdapter",
    "MapInterfaceToAdapter",
    "StartRouter",
    "MapInterfaceToRouterIfType"
  ],
  "ipsecsnp.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "ipsecsvc.dll": [
    "SPDServiceMain"
  ],
  "ipsmsnap.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "ipv6mon.dll": [
    "InitHelperDll",
    "GetResourceString"
  ],
  "ipxmontr.dll": [
    "InitHelperDll"
  ],
  "ipxpromn.dll": [
    "InitHelperDll"
  ],
  "ipxrip.dll": [
    "RegisterProtocol"
  ],
  "ipxrtmgr.dll": [
    "StartRouter"
  ],
  "ipxsap.dll": [
    "DllMain",
    "ServiceMain",
    "RegisterProtocol"
  ],
  "ipxwan.dll": [
    "IpxwanUnbind",
    "IpxwanBind"
  ],
  "irclass.dll": [
    "IrSIRPortPropPageProvider",
    "IrSIRClassCoInstaller",
    "LibMain"
  ],
  "isign32.dll": [
    "IEAKProcessISPA",
    "IEAKProcessISP",
    "AutoDialSignup",
    "AutoDialLogonW",
    "AutoDialLogonA",
    "AutoDialSignupA",
    "AutoDialSignupW",
    "Signup",
    "IEAKProcessISPW",
    "AutoDialLogon"
  ],
  "itircl.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "itss.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllMain",
    "DllUnregisterServer"
  ],
  "iuengine.dll": [
    "DeleteEngUpdateInstance",
    "EngGetManifest",
    "EngDownloadAsync",
    "InternalFindMatchingDriver",
    "CompleteSelfUpdateProcess",
    "DllMain",
    "EngGetHistory",
    "EngDetect",
    "EngGetOperationMode",
    "PingIUEngineUpdateStatus",
    "InternalLogDriverNotFound",
    "EngSetOperationMode",
    "InternalDetFilesDownloaded",
    "AsyncExtraWorkUponEngineLoad",
    "ShutdownThreads",
    "EngGetSystemSpec",
    "CreateEngUpdateInstance",
    "EngBrowseForFolder",
    "InternalDownloadGetUpdatedFiles",
    "InternalQueryDetectionFiles",
    "EngInstallAsync",
    "InternalSetGlobalOfflineFlag",
    "EngInstall",
    "EngDownload",
    "InternalDownloadUpdatedFiles",
    "EngRebootMachine",
    "ShutdownGlobalThreads"
  ],
  "ixsso.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "iyuv_32.dll": [
    "DllMain",
    "DriverDialogProc",
    "AboutDialogProc",
    "DriverProc"
  ],
  "jet500.dll": [
    "JetTerm",
    "JetGetTableInfo",
    "JetCreateIndex",
    "JetOpenDatabase",
    "JetExecuteSql",
    "JetDeleteTable",
    "JetRetrieveColumns",
    "JetBeginTransaction",
    "JetGetColumnInfo",
    "JetRestore",
    "JetTruncateLog",
    "JetBeginExternalBackup",
    "JetUpdate",
    "JetIdle",
    "JetGetCounter",
    "JetSetCurrentIndex2",
    "JetGotoBookmark",
    "JetSetSystemParameter",
    "JetOpenFile",
    "JetDetachDatabase",
    "JetGetTableColumnInfo",
    "JetMakeKey",
    "JetDelete",
    "JetIndexRecordCount",
    "JetSetColumns",
    "JetDeleteIndex",
    "JetGetChecksum",
    "JetTerm2",
    "JetGetIndexInfo",
    "JetRetrieveQoSql",
    "JetCompact",
    "JetGetCurrentIndex",
    "JetCreateLink",
    "JetGetAttachInfo",
    "JetGetRecordPosition",
    "JetCreateQuery",
    "JetBeginSession",
    "JetReadFile",
    "JetMove",
    "JetGetObjidFromName",
    "JetCommitTransaction",
    "JetSetColumn",
    "JetRetrieveKey",
    "JetRestore2",
    "JetAddColumn",
    "JetGetQueryParameterInfo",
    "JetGetTableIndexInfo",
    "JetEndSession",
    "JetInit",
    "JetSetAccess",
    "JetPrepareUpdate",
    "JetResetCounter",
    "JetSetCurrentIndex",
    "JetBackup",
    "JetGetDatabaseInfo",
    "JetGetLogInfo",
    "JetRollback",
    "JetOpenTable",
    "JetGetObjectInfo",
    "JetCreateTableColumnIndex",
    "JetGetBookmark",
    "JetGetSystemParameter",
    "JetCloseDatabase",
    "JetGetVersion",
    "JetOpenTempTable",
    "JetExternalRestore",
    "JetSeek",
    "JetGetCursorInfo",
    "JetOpenQueryDef",
    "JetAttachDatabase",
    "JetGotoPosition",
    "JetComputeStats",
    "JetEndExternalBackup",
    "JetDupSession",
    "JetRetrieveColumn",
    "JetDupCursor",
    "JetCloseTable",
    "JetCreateTable",
    "JetSetQoSql",
    "JetDeleteColumn",
    "JetDBUtilities",
    "JetCloseFile",
    "JetSetIndexRange",
    "JetOpenTempTable2",
    "JetCreateDatabase"
  ],
  "jobexec.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "jscript.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "jsproxy.dll": [
    "InternetDeInitializeExAutoProxyDll",
    "InternetInitializeExAutoProxyDll",
    "InternetGetProxyInfo",
    "InternetInitializeAutoProxyDll",
    "InternetDeInitializeAutoProxyDll"
  ],
  "KBDAL.DLL": [
    "KbdLayerDescriptor"
  ],
  "kbd101.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbd101a.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbd101b.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbd101c.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbd103.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbd106.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbd106n.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbda1.dll": [
    "KbdLayerDescriptor"
  ],
  "kbda2.dll": [
    "KbdLayerDescriptor"
  ],
  "kbda3.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdarme.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdarmw.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdax2.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdaze.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdazel.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdbe.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdbene.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdbhc.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdblr.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdbr.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdbu.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdca.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdcan.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdcr.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdcz.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdcz1.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdcz2.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdda.dll": [
    "KbdLayerDescriptor"
  ],
  "kbddiv1.dll": [
    "KbdLayerDescriptor"
  ],
  "kbddiv2.dll": [
    "KbdLayerDescriptor"
  ],
  "kbddv.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdes.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdest.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdfa.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdfc.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdfi.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdfi1.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdfo.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdfr.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdgae.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdgeo.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdgkl.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdgr.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdgr1.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdhe.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdhe220.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdhe319.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdheb.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdhela2.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdhela3.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdhept.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdhu.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdhu1.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdibm02.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdic.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdinbe1.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdinben.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdindev.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdinguj.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdinhin.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdinkan.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdinmal.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdinmar.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdinpun.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdintam.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdintel.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdir.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdit.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdit142.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdiultn.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdjpn.dll": [
    "KbdLayerMultiDescriptor",
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor",
    "KbdLayerRealDllFile",
    "KbdLayerRealDllFileNT4"
  ],
  "kbdkaz.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdkor.dll": [
    "KbdLayerMultiDescriptor",
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor",
    "KbdLayerRealDllFile",
    "KbdLayerRealDllFileNT4"
  ],
  "kbdkyr.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdla.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdlk41a.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdlk41j.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdlt.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdlt1.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdlv.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdlv1.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdmac.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdmaori.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdmlt47.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdmlt48.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdmon.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdne.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdnec.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdnec95.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdnecAT.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdnecNT.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdnepr.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdno.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdno1.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdpash.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdpl.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdpl1.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdpo.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdro.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdru.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdru1.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdsf.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdsg.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdsl.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdsl1.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdsmsfi.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdsmsno.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdsp.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdsw.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdsyr1.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdsyr2.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdtat.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdth0.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdth1.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdth2.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdth3.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdtuf.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdtuq.dll": [
    "KbdLayerDescriptor"
  ],
  "kbduk.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdukx.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdur.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdurdu.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdus.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdusa.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdusl.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdusr.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdusx.dll": [
    "KbdLayerDescriptor"
  ],
  "kbduzb.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdvntc.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdycc.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdycl.dll": [
    "KbdLayerDescriptor"
  ],
  "kd1394.dll": [
    "KdSendPacket",
    "KdD0Transition",
    "KdRestore",
    "KdDebuggerInitialize1",
    "KdSave",
    "KdReceivePacket",
    "KdD3Transition",
    "KdDebuggerInitialize0"
  ],
  "kdcom.dll": [
    "KdSendPacket",
    "KdD0Transition",
    "KdRestore",
    "KdDebuggerInitialize1",
    "KdSave",
    "KdReceivePacket",
    "KdD3Transition",
    "KdDebuggerInitialize0"
  ],
  "kerberos.dll": [
    "KerbKdcCallBack",
    "KerbFree",
    "KerbDomainChangeCallback",
    "SpInstanceInit",
    "KerbMakeKdcCall",
    "SpLsaModeInitialize",
    "SpUserModeInitialize",
    "SpInitialize",
    "KerbCreateTokenFromTicket",
    "KerbIsInitialized"
  ],
  "kernel32.dll": [
    "SetCurrentDirectoryA",
    "CreateProcessA",
    "GetCPFileNameFromRegistry",
    "SetPriorityClass",
    "CreateConsoleScreenBuffer",
    "OpenJobObjectW",
    "CreateActCtxA",
    "GetNamedPipeHandleStateA",
    "HeapCreateTagsW",
    "HeapWalk",
    "SetConsoleNumberOfCommandsW",
    "WriteProfileStringW",
    "FindFirstChangeNotificationA",
    "RegisterWaitForSingleObjectEx",
    "GetSystemDEPPolicy",
    "FormatMessageW",
    "EnumSystemCodePagesA",
    "GetThreadSelectorEntry",
    "HeapSetInformation",
    "RtlMoveMemory",
    "SetFileShortNameW",
    "OpenEventA",
    "GetConsoleInputExeNameW",
    "GetPrivateProfileIntA",
    "SetFileValidData",
    "ReadConsoleA",
    "SetTimeZoneInformation",
    "GetNumaHighestNodeNumber",
    "GetNamedPipeHandleStateW",
    "CreateToolhelp32Snapshot",
    "GetExitCodeThread",
    "GetLogicalDriveStringsW",
    "GlobalAddAtomA",
    "QueryMemoryResourceNotification",
    "GetConsoleInputWaitHandle",
    "FlushInstructionCache",
    "InitializeCriticalSectionAndSpinCount",
    "IsDBCSLeadByte",
    "SystemTimeToTzSpecificLocalTime",
    "PeekConsoleInputW",
    "HeapQueryTagW",
    "FindFirstFileExA",
    "SetConsoleMaximumWindowSize",
    "GetComputerNameW",
    "GetSystemTimeAsFileTime",
    "FindFirstVolumeMountPointA",
    "VirtualLock",
    "WritePrivateProfileStructA",
    "CreateJobSet",
    "CompareFileTime",
    "GetConsoleNlsMode",
    "GetPrivateProfileIntW",
    "lstrlenW",
    "AddConsoleAliasW",
    "ExpandEnvironmentStringsW",
    "LZDone",
    "SetClientTimeZoneInformation",
    "EndUpdateResourceW",
    "SetVolumeMountPointA",
    "GetPrivateProfileSectionW",
    "DeleteTimerQueueTimer",
    "_llseek",
    "SetEnvironmentVariableW",
    "SetLocalPrimaryComputerNameW",
    "CreateSemaphoreW",
    "EnumResourceNamesW",
    "GetDllDirectoryA",
    "GetDriveTypeA",
    "RaiseException",
    "SwitchToThread",
    "RegisterConsoleIME",
    "lstrcpy",
    "GetProfileSectionA",
    "ReadConsoleOutputA",
    "LZClose",
    "DecodeSystemPointer",
    "GetTickCount",
    "GetProfileIntW",
    "LocalFlags",
    "OutputDebugStringW",
    "WriteConsoleW",
    "OpenJobObjectA",
    "GetStringTypeExW",
    "GetVolumeNameForVolumeMountPointA",
    "IsDBCSLeadByteEx",
    "VirtualProtect",
    "GetProcessId",
    "GetThreadContext",
    "GetProfileSectionW",
    "OpenFileMappingW",
    "InterlockedFlushSList",
    "FindResourceExW",
    "QueueUserWorkItem",
    "CreateMailslotA",
    "SetConsoleKeyShortcuts",
    "CreateJobObjectA",
    "GetCommandLineW",
    "SetComputerNameW",
    "LocalHandle",
    "GetDiskFreeSpaceExW",
    "GetVersionExW",
    "SetConsoleCursorInfo",
    "EnumTimeFormatsA",
    "CreateFiberEx",
    "GetConsoleFontSize",
    "GetNumberOfConsoleFonts",
    "OpenConsoleW",
    "WaitForDebugEvent",
    "FreeEnvironmentStringsA",
    "RemoveVectoredExceptionHandler",
    "HeapExtend",
    "lstrcpynW",
    "Heap32Next",
    "CancelIo",
    "InterlockedPopEntrySList",
    "AllocConsole",
    "VirtualAlloc",
    "GetConsoleKeyboardLayoutNameA",
    "GetCurrentConsoleFont",
    "RegisterWaitForSingleObject",
    "GetPrivateProfileStringA",
    "GlobalWire",
    "GetEnvironmentStrings",
    "GetWindowsDirectoryA",
    "GetConsoleKeyboardLayoutNameW",
    "Beep",
    "IsBadStringPtrW",
    "OpenMutexW",
    "FreeUserPhysicalPages",
    "GetNextVDMCommand",
    "SetConsoleMode",
    "GetNumaAvailableMemoryNode",
    "FoldStringA",
    "Sleep",
    "DeleteFiber",
    "SetConsoleCP",
    "DeleteTimerQueue",
    "GetModuleFileNameA",
    "GetConsoleAliasExesA",
    "FindNextFileW",
    "AddAtomA",
    "FindActCtxSectionStringW",
    "SetLocalPrimaryComputerNameA",
    "GetModuleFileNameW",
    "EncodePointer",
    "InterlockedExchange",
    "SetComPlusPackageInstallStatus",
    "ExpungeConsoleCommandHistoryW",
    "CreateFiber",
    "BeginUpdateResourceW",
    "GetConsoleInputExeNameA",
    "InitializeCriticalSection",
    "EnumCalendarInfoA",
    "GetConsoleSelectionInfo",
    "GetGeoInfoW",
    "LockFileEx",
    "GetNativeSystemInfo",
    "CreateHardLinkW",
    "SetThreadPriority",
    "SetFirmwareEnvironmentVariableA",
    "SetProcessAffinityMask",
    "WriteTapemark",
    "GetPriorityClass",
    "GlobalAddAtomW",
    "GetSystemWow64DirectoryW",
    "HeapQueryInformation",
    "GetUserGeoID",
    "SetUnhandledExceptionFilter",
    "DosDateTimeToFileTime",
    "CreateRemoteThread",
    "DosPathToSessionPathA",
    "EnumDateFormatsA",
    "GetConsoleAliasExesLengthW",
    "lstrcpyn",
    "RemoveDirectoryW",
    "ValidateLCType",
    "SetEnvironmentVariableA",
    "FatalAppExitA",
    "Heap32ListNext",
    "DebugActiveProcessStop",
    "FatalExit",
    "IsBadReadPtr",
    "SetDefaultCommConfigA",
    "BackupRead",
    "EnumSystemLocalesA",
    "QueryPerformanceFrequency",
    "GetSystemDefaultUILanguage",
    "GetAtomNameA",
    "IsBadCodePtr",
    "FindClose",
    "CancelDeviceWakeupRequest",
    "SetStdHandle",
    "QueryDosDeviceW",
    "SetFileApisToOEM",
    "SetErrorMode",
    "SetProcessShutdownParameters",
    "GetConsoleCommandHistoryLengthA",
    "GetTempPathA",
    "GetVolumeInformationW",
    "SetConsoleActiveScreenBuffer",
    "GetCPInfoExA",
    "lstrcmpA",
    "BaseInitAppcompatCache",
    "SetLocaleInfoW",
    "GetProcessWorkingSetSize",
    "ContinueDebugEvent",
    "GetNlsSectionName",
    "SetUserGeoID",
    "GetModuleHandleA",
    "SetSystemTimeAdjustment",
    "GlobalGetAtomNameW",
    "SetConsoleFont",
    "SetLastConsoleEventActive",
    "GetVDMCurrentDirectories",
    "GetStartupInfoA",
    "FindFirstVolumeMountPointW",
    "EnumResourceTypesA",
    "FileTimeToDosDateTime",
    "SetConsoleOutputCP",
    "GetFileAttributesA",
    "ReadConsoleW",
    "SetConsoleScreenBufferSize",
    "FlushFileBuffers",
    "GetDefaultSortkeySize",
    "GetWriteWatch",
    "SetEndOfFile",
    "SetProcessWorkingSetSize",
    "WaitForMultipleObjectsEx",
    "FindNextChangeNotification",
    "SetCommTimeouts",
    "lstrcpyA",
    "ReleaseMutex",
    "GetExitCodeProcess",
    "GetCalendarInfoA",
    "PulseEvent",
    "GetNamedPipeInfo",
    "BaseCleanupAppcompatCacheSupport",
    "WideCharToMultiByte",
    "DeleteCriticalSection",
    "RestoreLastError",
    "GetNumaProcessorNode",
    "VirtualFree",
    "GlobalFindAtomW",
    "TlsSetValue",
    "LZCloseFile",
    "lstrcatA",
    "GetComputerNameExA",
    "GetShortPathNameA",
    "VerifyVersionInfoW",
    "SetConsoleWindowInfo",
    "SetVolumeLabelA",
    "Module32First",
    "SetConsoleInputExeNameW",
    "BuildCommDCBA",
    "ConsoleMenuControl",
    "LockResource",
    "QueueUserAPC",
    "SystemTimeToFileTime",
    "TlsFree",
    "GetFirmwareEnvironmentVariableA",
    "GetCurrentActCtx",
    "EnumResourceNamesA",
    "GetEnvironmentStringsA",
    "CreateProcessInternalA",
    "CopyFileA",
    "HeapUnlock",
    "IsValidCodePage",
    "LoadModule",
    "OpenFile",
    "SetEvent",
    "CancelTimerQueueTimer",
    "BaseCheckAppcompatCache",
    "GetGeoInfoA",
    "CreateProcessInternalWSecure",
    "HeapSize",
    "ConnectNamedPipe",
    "SetConsoleInputExeNameA",
    "FindFirstChangeNotificationW",
    "ConvertFiberToThread",
    "InitializeSListHead",
    "CreateMemoryResourceNotification",
    "EnumResourceTypesW",
    "GetPrivateProfileSectionNamesW",
    "VerLanguageNameW",
    "WritePrivateProfileStructW",
    "InterlockedExchangeAdd",
    "CreateFileMappingA",
    "GetWindowsDirectoryW",
    "QueryPerformanceCounter",
    "SetConsoleCtrlHandler",
    "GetCommMask",
    "ReadFileEx",
    "AddAtomW",
    "CreateNlsSecurityDescriptor",
    "GetProcessHandleCount",
    "IsProcessInJob",
    "GetLastError",
    "GetSystemRegistryQuota",
    "CallNamedPipeW",
    "RegisterWaitForInputIdle",
    "GetUserDefaultUILanguage",
    "QueryInformationJobObject",
    "GetConsoleAliasesLengthW",
    "SetCommBreak",
    "GetHandleContext",
    "CreateNamedPipeW",
    "SetVDMCurrentDirectories",
    "FindActCtxSectionStringA",
    "_lwrite",
    "CheckNameLegalDOS8Dot3W",
    "GetSystemDefaultLangID",
    "EnumLanguageGroupLocalesA",
    "FreeLibrary",
    "GetPrivateProfileSectionNamesA",
    "LZCreateFileW",
    "AddRefActCtx",
    "SetCommState",
    "BackupSeek",
    "SetFilePointer",
    "SetupComm",
    "OpenProfileUserMapping",
    "MapUserPhysicalPages",
    "FoldStringW",
    "Module32NextW",
    "GlobalMemoryStatusEx",
    "CreateSocketHandle",
    "GetFileInformationByHandle",
    "RegisterConsoleOS2",
    "SetCommMask",
    "GetCurrentProcess",
    "GetConsoleAliasesLengthA",
    "FlushViewOfFile",
    "GetNumberOfConsoleMouseButtons",
    "VirtualAllocEx",
    "GetDateFormatA",
    "GetTempFileNameA",
    "CreateVirtualBuffer",
    "OpenProcess",
    "GetProcessShutdownParameters",
    "GetCompressedFileSizeW",
    "IsDebuggerPresent",
    "IsValidUILanguage",
    "DeactivateActCtx",
    "CreateIoCompletionPort",
    "GetSystemWindowsDirectoryW",
    "GlobalReAlloc",
    "SetConsoleHardwareState",
    "lstrcmpW",
    "GetNumberFormatW",
    "CreateDirectoryW",
    "MoveFileW",
    "CreateEventW",
    "ValidateLocale",
    "CommConfigDialogW",
    "WriteConsoleInputW",
    "CreateDirectoryExW",
    "ReadConsoleOutputW",
    "InterlockedPushEntrySList",
    "IsBadHugeReadPtr",
    "SetConsoleOS2OemFormat",
    "TlsGetValue",
    "ExpandEnvironmentStringsA",
    "UnmapViewOfFile",
    "BaseDumpAppcompatCache",
    "GetProcessIoCounters",
    "EnumCalendarInfoExW",
    "CreateFileMappingW",
    "GenerateConsoleCtrlEvent",
    "OutputDebugStringA",
    "DebugSetProcessKillOnExit",
    "PrivCopyFileExW",
    "DefineDosDeviceA",
    "EnumDateFormatsExW",
    "GetConsoleMode",
    "DeleteFileA",
    "OpenSemaphoreW",
    "DuplicateConsoleHandle",
    "FatalAppExitW",
    "DeleteVolumeMountPointA",
    "FindNextFileA",
    "GlobalDeleteAtom",
    "GetSystemInfo",
    "GetVolumeNameForVolumeMountPointW",
    "LZRead",
    "GetPrivateProfileStructA",
    "HeapValidate",
    "DnsHostnameToComputerNameA",
    "AddConsoleAliasA",
    "CreateMutexW",
    "EnumerateLocalComputerNamesA",
    "CreatePipe",
    "SetCriticalSectionSpinCount",
    "MapUserPhysicalPagesScatter",
    "SetThreadLocale",
    "GetStdHandle",
    "FindFirstFileW",
    "GetSystemTimeAdjustment",
    "BaseProcessInitPostImport",
    "UnregisterConsoleIME",
    "CompareStringA",
    "GetConsoleCommandHistoryLengthW",
    "BaseUpdateAppcompatCache",
    "GetVolumePathNameW",
    "Process32FirstW",
    "SetLastError",
    "GlobalFree",
    "FindActCtxSectionGuid",
    "GetUserDefaultLCID",
    "RtlCaptureContext",
    "WritePrivateProfileStringA",
    "BuildCommDCBAndTimeoutsA",
    "DosPathToSessionPathW",
    "CreateDirectoryA",
    "GetCurrentDirectoryA",
    "Process32Next",
    "GetVersion",
    "ReadDirectoryChangesW",
    "WaitForMultipleObjects",
    "GetConsoleTitleW",
    "PrivMoveFileIdentityW",
    "SetConsoleCursorPosition",
    "Heap32First",
    "OpenSemaphoreA",
    "CreateTapePartition",
    "RegisterWowExec",
    "GetConsoleAliasExesLengthA",
    "LoadResource",
    "WriteFile",
    "LoadLibraryW",
    "GetVolumePathNamesForVolumeNameA",
    "GetStringTypeExA",
    "ExitProcess",
    "SetFirmwareEnvironmentVariableW",
    "CompareStringW",
    "DebugBreak",
    "GetPrivateProfileSectionA",
    "RtlUnwind",
    "SetThreadExecutionState",
    "WaitNamedPipeA",
    "DeleteFileW",
    "SetConsoleTitleA",
    "TlsAlloc",
    "DebugBreakProcess",
    "BackupWrite",
    "GetVolumePathNamesForVolumeNameW",
    "ChangeTimerQueueTimer",
    "EncodeSystemPointer",
    "EnumUILanguagesA",
    "GetProcessVersion",
    "GetCPInfo",
    "GetStringTypeA",
    "GetVersionExA",
    "FindVolumeClose",
    "WriteConsoleA",
    "CreateHardLinkA",
    "FindAtomW",
    "ReplaceFileW",
    "SetFilePointerEx",
    "GetProcessAffinityMask",
    "GetHandleInformation",
    "Thread32First",
    "InvalidateConsoleDIBits",
    "CreateMutexA",
    "HeapUsage",
    "MoveFileExW",
    "DebugActiveProcess",
    "FindNextVolumeMountPointA",
    "GetConsoleDisplayMode",
    "ReadConsoleOutputAttribute",
    "lstrcmpiW",
    "EndUpdateResourceA",
    "SetTapeParameters",
    "InterlockedDecrement",
    "GetDefaultCommConfigW",
    "GetProfileStringW",
    "WriteConsoleOutputAttribute",
    "UnlockFileEx",
    "GetConsoleCP",
    "GetLocaleInfoA",
    "EnumTimeFormatsW",
    "SetCurrentDirectoryW",
    "CmdBatNotification",
    "SetConsoleLocalEUDC",
    "HeapReAlloc",
    "GetAtomNameW",
    "NumaVirtualQueryNode",
    "SetHandleInformation",
    "DisconnectNamedPipe",
    "GetTimeFormatW",
    "LoadLibraryExA",
    "SetConsolePalette",
    "FreeConsole",
    "GetConsoleCursorMode",
    "LZSeek",
    "AllocateUserPhysicalPages",
    "HeapLock",
    "WriteConsoleOutputA",
    "DeleteTimerQueueEx",
    "FindFirstFileA",
    "LocalCompact",
    "SetCalendarInfoW",
    "IsBadStringPtrA",
    "GetStringTypeW",
    "ReadConsoleOutputCharacterA",
    "TerminateProcess",
    "GetLogicalProcessorInformation",
    "WritePrivateProfileSectionA",
    "WriteProfileStringA",
    "CreateNamedPipeA",
    "GetCurrencyFormatW",
    "ExitVDM",
    "SetConsoleTextAttribute",
    "SetDefaultCommConfigW",
    "GetProcessPriorityBoost",
    "GetThreadTimes",
    "ReadConsoleInputExW",
    "CallNamedPipeA",
    "SetConsoleNumberOfCommandsA",
    "_lcreat",
    "FlushConsoleInputBuffer",
    "GetCurrentThread",
    "GetThreadPriorityBoost",
    "EnumSystemLocalesW",
    "DefineDosDeviceW",
    "GetFullPathNameA",
    "AttachConsole",
    "HeapFree",
    "IsValidLanguageGroup",
    "SetConsoleTitleW",
    "GlobalAlloc",
    "SetProcessDEPPolicy",
    "UnlockFile",
    "GetConsoleCommandHistoryW",
    "WriteProcessMemory",
    "PrepareTape",
    "GetOEMCP",
    "GetPrivateProfileStructW",
    "GetProcAddress",
    "Module32FirstW",
    "lstrcpynA",
    "GetTempFileNameW",
    "OpenMutexA",
    "GetExpandedNameW",
    "GetPrivateProfileStringW",
    "ReadProcessMemory",
    "SetTermsrvAppInstallMode",
    "SetLocalTime",
    "SetThreadUILanguage",
    "WritePrivateProfileSectionW",
    "CloseProfileUserMapping",
    "SearchPathW",
    "VerifyConsoleIoHandle",
    "Toolhelp32ReadProcessMemory",
    "ResetEvent",
    "SetCalendarInfoA",
    "FileTimeToSystemTime",
    "CreateProcessW",
    "GetFileSizeEx",
    "EnumSystemLanguageGroupsA",
    "SetThreadPriorityBoost",
    "VirtualBufferExceptionHandler",
    "CreateSemaphoreA",
    "CreateThread",
    "CreateWaitableTimerW",
    "lstrcpyW",
    "GetUserDefaultLangID",
    "ScrollConsoleScreenBufferA",
    "GetConsoleScreenBufferInfo",
    "CreateFileW",
    "GetDiskFreeSpaceW",
    "GetLocalTime",
    "ReadConsoleInputW",
    "SetThreadContext",
    "TerminateJobObject",
    "HeapDestroy",
    "AddLocalAlternateComputerNameW",
    "HeapCreate",
    "LZOpenFileA",
    "MoveFileWithProgressW",
    "CheckRemoteDebuggerPresent",
    "GetDefaultCommConfigA",
    "GetLongPathNameA",
    "EnumSystemLanguageGroupsW",
    "MoveFileA",
    "UpdateResourceA",
    "GetSystemPowerStatus",
    "GetConsoleCursorInfo",
    "SetWaitableTimer",
    "lstrcat",
    "ResumeThread",
    "FindNextVolumeA",
    "LCMapStringA",
    "ReadConsoleInputA",
    "VerLanguageNameA",
    "WaitNamedPipeW",
    "FindResourceW",
    "CloseConsoleHandle",
    "BaseCleanupAppcompatCache",
    "GetSystemDirectoryW",
    "SetHandleContext",
    "UTUnRegister",
    "SetLocaleInfoA",
    "WriteConsoleOutputCharacterW",
    "SetCPGlobal",
    "VerifyVersionInfoA",
    "WriteProfileSectionW",
    "_hwrite",
    "GetDllDirectoryW",
    "_lopen",
    "FreeEnvironmentStringsW",
    "EnumerateLocalComputerNamesW",
    "OpenFileMappingA",
    "DuplicateHandle",
    "GetTapePosition",
    "OpenThread",
    "LocalFree",
    "ReadFile",
    "GetComputerNameExW",
    "LZCopy",
    "EnumLanguageGroupLocalesW",
    "OpenDataFile",
    "FindNextVolumeMountPointW",
    "GetACP",
    "GetNumaProcessorMap",
    "EnumCalendarInfoExA",
    "GlobalCompact",
    "FindCloseChangeNotification",
    "GetModuleHandleW",
    "SetMessageWaitingIndicator",
    "SetNamedPipeHandleState",
    "SetConsoleNlsMode",
    "UnhandledExceptionFilter",
    "QueryWin31IniFilesMappedToRegistry",
    "HeapCompact",
    "LocalLock",
    "GetTapeStatus",
    "CancelWaitableTimer",
    "GetQueuedCompletionStatus",
    "lstrcmpiA",
    "SetConsoleCursorMode",
    "DisableThreadLibraryCalls",
    "MultiByteToWideChar",
    "CreateProcessInternalW",
    "ReplaceFile",
    "GlobalFix",
    "GetOverlappedResult",
    "WriteConsoleOutputW",
    "MulDiv",
    "IsBadWritePtr",
    "LZInit",
    "OpenWaitableTimerW",
    "SetConsoleDisplayMode",
    "VerSetConditionMask",
    "DnsHostnameToComputerNameW",
    "SetDllDirectoryA",
    "TerminateThread",
    "GetProcessDEPPolicy",
    "QueryActCtxW",
    "SetVolumeLabelW",
    "DecodePointer",
    "ActivateActCtx",
    "ReleaseSemaphore",
    "GetConsoleAliasW",
    "WriteConsoleInputVDMA",
    "GlobalFindAtomA",
    "GetDiskFreeSpaceExA",
    "RemoveLocalAlternateComputerNameW",
    "EnumCalendarInfoW",
    "UTRegister",
    "GetVolumePathNameA",
    "GetFileAttributesExW",
    "EnterCriticalSection",
    "LocalAlloc",
    "Process32NextW",
    "CreateMailslotW",
    "LocalFileTimeToFileTime",
    "FindNextVolumeW",
    "UnregisterWait",
    "UpdateResourceW",
    "SwitchToFiber",
    "NlsGetCacheUpdateCount",
    "SetFileApisToANSI",
    "_lread",
    "EnumResourceLanguagesA",
    "GetFileTime",
    "GetDiskFreeSpaceA",
    "LocalSize",
    "CopyFileW",
    "RtlCaptureStackBackTrace",
    "GetCPInfoExW",
    "GetThreadPriority",
    "InterlockedIncrement",
    "SetFileTime",
    "GetProfileIntA",
    "GetConsoleCommandHistoryA",
    "GetLogicalDriveStringsA",
    "GetComputerNameA",
    "GetNumberFormatA",
    "FreeResource",
    "GetFileAttributesExA",
    "VDMOperationStarted",
    "FillConsoleOutputAttribute",
    "CloseHandle",
    "OpenWaitableTimerA",
    "CheckNameLegalDOS8Dot3A",
    "BaseInitAppcompatCacheSupport",
    "GetSystemDirectoryA",
    "SetDllDirectoryW",
    "GetCommConfig",
    "lstrlen",
    "_hread",
    "SetCommConfig",
    "SetComputerNameA",
    "VirtualUnlock",
    "WriteFileGather",
    "SetConsoleCommandHistoryMode",
    "IsBadHugeWritePtr",
    "GetExpandedNameA",
    "SleepEx",
    "FillConsoleOutputCharacterW",
    "GetCurrentDirectoryW",
    "CreateTimerQueue",
    "GetFileAttributesW",
    "WriteConsoleInputVDMW",
    "MoveFileExA",
    "FreeVirtualBuffer",
    "GetLocaleInfoW",
    "ConvertDefaultLocale",
    "AssignProcessToJobObject",
    "ReadConsoleOutputCharacterW",
    "TransactNamedPipe",
    "FormatMessageA",
    "GlobalUnlock",
    "SetMailslotInfo",
    "Thread32Next",
    "FreeLibraryAndExitThread",
    "FindResourceA",
    "TrimVirtualBuffer",
    "GetProcessTimes",
    "WinExec",
    "FindResourceExA",
    "LeaveCriticalSection",
    "DeleteVolumeMountPointW",
    "GetFileSize",
    "CreateJobObjectW",
    "VirtualQuery",
    "FindFirstFileExW",
    "GetConsoleTitleA",
    "LCMapStringW",
    "BindIoCompletionCallback",
    "WTSGetActiveConsoleSessionId",
    "NlsResetProcessLocale",
    "GetBinaryTypeW",
    "EscapeCommFunction",
    "GetEnvironmentVariableW",
    "GetFullPathNameW",
    "LoadLibraryA",
    "ShowConsoleCursor",
    "RemoveDirectoryA",
    "CreateFileA",
    "GetNumberOfConsoleInputEvents",
    "VirtualProtectEx",
    "GetConsoleCharType",
    "lstrcatW",
    "GetSystemWow64DirectoryA",
    "GlobalMemoryStatus",
    "PurgeComm",
    "GlobalLock",
    "GetCalendarInfoW",
    "FindFirstVolumeA",
    "GetEnvironmentStringsW",
    "NlsConvertIntegerToString",
    "SetComputerNameExW",
    "WaitForSingleObject",
    "SetFileAttributesW",
    "GetComPlusPackageInstallStatus",
    "lstrlenA",
    "PostQueuedCompletionStatus",
    "SetInformationJobObject",
    "GetConsoleOutputCP",
    "ReplaceFileA",
    "GetEnvironmentVariableA",
    "LocalShrink",
    "EnumUILanguagesW",
    "SearchPathA",
    "LocalUnlock",
    "CopyLZFile",
    "GetCurrentThreadId",
    "SetSystemPowerState",
    "GetConsoleAliasExesW",
    "lstrcmpi",
    "RequestWakeupLatency",
    "FindFirstVolumeW",
    "ResetWriteWatch",
    "GetSystemTimes",
    "MoveFileWithProgressA",
    "BaseQueryModuleData",
    "SetConsoleIcon",
    "WriteProfileSectionA",
    "CreateEventA",
    "GlobalSize",
    "FindAtomA",
    "ExtendVirtualBuffer",
    "GetConsoleFontInfo",
    "GetTimeFormatA",
    "BaseFlushAppcompatCache",
    "WriteFileEx",
    "ExitThread",
    "GetCommandLineA",
    "_lclose",
    "GetTempPathW",
    "ScrollConsoleScreenBufferW",
    "SetConsoleCursor",
    "GetDateFormatW",
    "GetLongPathNameW",
    "BuildCommDCBAndTimeoutsW",
    "GetCurrentProcessId",
    "GetDriveTypeW",
    "GlobalUnfix",
    "GetConsoleAliasA",
    "CreateDirectoryExA",
    "EnumResourceLanguagesW",
    "SetThreadAffinityMask",
    "GetCommState",
    "GetTimeZoneInformation",
    "SetProcessPriorityBoost",
    "SetFileShortNameA",
    "GetThreadLocale",
    "IsWow64Process",
    "RemoveLocalAlternateComputerNameA",
    "ClearCommError",
    "GetProcessHeaps",
    "GetSystemWindowsDirectoryA",
    "GetNumaNodeProcessorMask",
    "GetStartupInfoW",
    "WaitForSingleObjectEx",
    "LZStart",
    "UnregisterWaitEx",
    "CreateWaitableTimerA",
    "EnumSystemCodePagesW",
    "PeekNamedPipe",
    "GlobalGetAtomNameA",
    "LoadLibraryExW",
    "GetBinaryType",
    "GetCommModemStatus",
    "HeapSummary",
    "GetDevicePowerState",
    "SizeofResource",
    "CreateTimerQueueTimer",
    "GetCommTimeouts",
    "DeleteAtom",
    "FileTimeToLocalFileTime",
    "GetThreadIOPendingFlag",
    "GlobalHandle",
    "VirtualQueryEx",
    "GetConsoleAliasesW",
    "GetCommProperties",
    "GetModuleHandleExA",
    "IsProcessorFeaturePresent",
    "GlobalFlags",
    "GetConsoleAliasesA",
    "WaitCommEvent",
    "CreateActCtxW",
    "GetSystemDefaultLCID",
    "SetFileAttributesA",
    "SetHandleCount",
    "BuildCommDCBW",
    "PeekConsoleInputA",
    "RequestDeviceWakeup",
    "SetComputerNameExA",
    "GetNumaAvailableMemory",
    "BeginUpdateResourceA",
    "EnumSystemGeoID",
    "InitAtomTable",
    "ConvertThreadToFiber",
    "Module32Next",
    "DeviceIoControl",
    "RegisterWowBaseHandlers",
    "QueryDepthSList",
    "GetProfileStringA",
    "Heap32ListFirst",
    "LockFile",
    "RtlZeroMemory",
    "SetTimerQueueTimer",
    "SuspendThread",
    "EnumDateFormatsW",
    "SetVolumeMountPointW",
    "CommConfigDialogA",
    "HeapAlloc",
    "WriteConsoleInputA",
    "GetProcessHeap",
    "AddLocalAlternateComputerNameA",
    "QueryDosDeviceA",
    "FillConsoleOutputCharacterA",
    "SetTapePosition",
    "GetFileType",
    "ClearCommBreak",
    "GetConsoleHardwareState",
    "BasepCheckWinSaferRestrictions",
    "ReadConsoleInputExA",
    "GetConsoleWindow",
    "WriteConsoleOutputCharacterA",
    "GetCurrencyFormatA",
    "SetConsoleMenuClose",
    "RtlFillMemory",
    "SignalObjectAndWait",
    "TransmitCommChar",
    "ExpungeConsoleCommandHistoryA",
    "VirtualFreeEx",
    "GetCompressedFileSizeA",
    "ProcessIdToSessionId",
    "MapViewOfFile",
    "ZombifyActCtx",
    "WritePrivateProfileStringW",
    "CopyFileExW",
    "GetSystemTime",
    "FindVolumeMountPointClose",
    "GlobalUnWire",
    "IsSystemResumeAutomatic",
    "lstrcmp",
    "SetThreadIdealProcessor",
    "GetLinguistLangSize",
    "SetSystemTime",
    "IsValidLocale",
    "GetBinaryTypeA",
    "MapViewOfFileEx",
    "TzSpecificLocalTimeToSystemTime",
    "OpenEventW",
    "GetShortPathNameW",
    "AreFileApisANSI",
    "EraseTape",
    "GetMailslotInfo",
    "GetConsoleProcessList",
    "GetTapeParameters",
    "Process32First",
    "GetVolumeInformationA",
    "InterlockedCompareExchange",
    "TermsrvAppInstallMode",
    "LocalReAlloc",
    "RegisterConsoleVDM",
    "DelayLoadFailureHook",
    "ReleaseActCtx",
    "GetFirmwareEnvironmentVariableW",
    "EnumDateFormatsExA",
    "GetLogicalDrives",
    "ReadFileScatter",
    "CopyFileExA",
    "AddVectoredExceptionHandler",
    "LZOpenFileW",
    "GetModuleHandleExW",
    "VDMConsoleOperation",
    "GetLargestConsoleWindowSize",
    "TryEnterCriticalSection"
  ],
  "keymgr.dll": [
    "PRShowSaveWizardExW",
    "PRShowRestoreWizardExW",
    "CPlApplet",
    "PRShowSaveFromMsginaW",
    "KRShowKeyMgr",
    "PRShowRestoreFromMsginaW",
    "PRShowRestoreWizardW",
    "DllMain"
  ],
  "kmsvc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer",
    "ServiceMain"
  ],
  "korwbrkr.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "ksuser.dll": [
    "KsCreatePin",
    "KsCreateClock",
    "KsCreateTopologyNode",
    "KsCreateAllocator"
  ],
  "l2gpstore.dll": [
    "L2GPPolicyDataWrite",
    "L2GPPolicyFreeMem",
    "L2GPPolicyDataDeleteAll",
    "L2GPPolicyDataRead",
    "L2GPPolicyStoreOpen",
    "L2GPPolicyDataDelete",
    "L2GPPolicyStoreClose"
  ],
  "langwrbk.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "laprxy.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "licdll.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "licmgr10.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "licwmi.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "linkinfo.dll": [
    "ResolveLinkInfo",
    "GetCanonicalPathInfoA",
    "CreateLinkInfoW",
    "CompareLinkInfoReferents",
    "ResolveLinkInfoA",
    "DestroyLinkInfo",
    "CompareLinkInfoVolumes",
    "ResolveLinkInfoW",
    "CreateLinkInfoA",
    "GetLinkInfoData",
    "DisconnectLinkInfo",
    "GetCanonicalPathInfo",
    "IsValidLinkInfo",
    "CreateLinkInfo",
    "GetCanonicalPathInfoW"
  ],
  "lmhsvc.dll": [
    "ServiceMain"
  ],
  "lmrt.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "loadperf.dll": [
    "RestorePerfRegistryFromFileW",
    "InstallPerfDllA",
    "LoadMofFromInstalledServiceA",
    "LoadPerfCounterTextStringsW",
    "SetServiceAsTrustedA",
    "UnloadPerfCounterTextStringsW",
    "UnloadPerfCounterTextStringsA",
    "UpdatePerfNameFilesA",
    "SetServiceAsTrustedW",
    "UpdatePerfNameFilesW",
    "BackupPerfRegistryToFileW",
    "InstallPerfDllW",
    "LoadPerfCounterTextStringsA",
    "LoadMofFromInstalledServiceW"
  ],
  "localsec.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "localspl.dll": [
    "SplDeleteForm",
    "SplSetPrinter",
    "SplGetPrinter",
    "SplGetPrinterData",
    "SplDeletePrinterDriverEx",
    "PrintProcLogEvent",
    "SplAddPrinterDriverEx",
    "SplAddPortEx",
    "SplDeleteMonitor",
    "SplXcvData",
    "SplAddMonitor",
    "ClosePrintProcessor",
    "DllMain",
    "ControlPrintProcessor",
    "SplResetPrinter",
    "SplGetDriverDir",
    "SplDeletePort",
    "InitializePrintProvidor",
    "SplSetPrinterExtra",
    "EnumPrintProcessorDatatypesW",
    "SplLoadLibraryTheCopyFileModule",
    "SplConfigChange",
    "InitializePrintMonitor",
    "SplAddPort",
    "SplGetForm",
    "SplGetPrintProcessorDirectory",
    "SplDeleteSpooler",
    "SplDeletePrinter",
    "SplEnumMonitors",
    "SplEnumPrintProcCacheData",
    "SplGetPrinterExtraEx",
    "SplCreateSpooler",
    "SplGetPrinterDataEx",
    "SplReenumeratePorts",
    "SplEnumPorts",
    "SplEnumPrinterKey",
    "SplSetPrintProcCacheData",
    "SplDeletePrinterKey",
    "SplGetPrinterDriverDirectory",
    "SplMonitorIsInstalled",
    "SplPowerEvent",
    "SplClosePrinter",
    "SplSetPrinterExtraEx",
    "LclIsSessionZero",
    "SplGetPrintProcCacheData",
    "SplGetPrinterDriver",
    "SplEnumPrintProcessorDatatypes",
    "SplSetForm",
    "SplEnumPrintProcessors",
    "SplSetPrinterDataEx",
    "SplAddForm",
    "GetPrintProcessorCapabilities",
    "SplEnumPrinters",
    "OpenPrintProcessor",
    "SplCopyFileEvent",
    "SplOpenPrinter",
    "SplDriverEvent",
    "LclPromptUIPerSessionUser",
    "SplBroadcastChange",
    "SplDeletePrintProcCacheData",
    "PrintDocumentOnPrintProcessor",
    "SplCopyNumberOfFiles",
    "SplAddPrinter",
    "SplGetPrinterDriverEx",
    "SplAddPrintProcessor",
    "SplDeletePrintProcessor",
    "SplLogEventExternal",
    "SplGetPrinterExtra",
    "SplCloseSpooler",
    "SplSetPrinterData",
    "SplEnumForms",
    "SplEnumPrinterDataEx"
  ],
  "localui.dll": [
    "InitializePrintMonitorUI"
  ],
  "loghours.dll": [
    "ConnectionScheduleDialogEx",
    "LogonScheduleDialog",
    "DirSyncScheduleDialogEx",
    "LogonScheduleDialogEx",
    "DirSyncScheduleDialog",
    "ConnectionScheduleDialog",
    "DialinHoursDialogEx",
    "ReplicationScheduleDialog",
    "ReplicationScheduleDialogEx",
    "DialinHoursDialog"
  ],
  "lpk.dll": [
    "LpkTabbedTextOut",
    "LpkPSMTextOut",
    "LpkGetTextExtentExPoint",
    "LpkUseGDIWidthCache",
    "ftsWordBreak",
    "LpkGetCharacterPlacement",
    "LpkDrawTextEx",
    "LpkDllInitialize",
    "LpkExtTextOut",
    "LpkEditControl",
    "LpkInitialize"
  ],
  "lprhelp.dll": [
    "OpenLPR",
    "CloseLPR",
    "SetLPRTimeouts",
    "InitiateConnection",
    "CancelJob",
    "PrintWaitingJobs",
    "GetLongQueue",
    "GetShortQueue",
    "WriteJobData",
    "StartJob",
    "EndJob"
  ],
  "lprmonui.dll": [
    "InitializePrintMonitorUI"
  ],
  "lsasrv.dll": [
    "LsaIFree_LSA_FOREST_TRUST_COLLISION_INFORMATION",
    "LsaIKerberosRegisterTrustNotification",
    "LsarLookupPrivilegeName",
    "LsaIFree_LSAPR_UNICODE_STRING",
    "LsaIAuditLogonUsingExplicitCreds",
    "LsaIAuditNotifyPackageLoad",
    "LsarQueryTrustedDomainInfoByName",
    "LsaINotifyPasswordChanged",
    "LsarOpenTrustedDomain",
    "LsaINotifyNetlogonParametersChangeW",
    "LsaISafeMode",
    "LsaICryptProtectData",
    "LsaIFree_LSAI_PRIVATE_DATA",
    "LsaIFree_LSAPR_ACCOUNT_ENUM_BUFFER",
    "LsaIDsNotifiedObjectChange",
    "LsaIAuditPasswordAccessEvent",
    "LsaICryptUnprotectData",
    "LsaISetClientDnsHostName",
    "LsarEnumerateTrustedDomains",
    "LsarSetTrustedDomainInfoByName",
    "LsarAddPrivilegesToAccount",
    "LsarOpenTrustedDomainByName",
    "LsaILookupWellKnownName",
    "LsaIAuditAccountLogon",
    "LsarEnumeratePrivileges",
    "LsaIFree_LSAP_SITE_INFO",
    "LsarEnumerateTrustedDomainsEx",
    "LsaISetSerialNumberPolicy",
    "LsarQueryDomainInformationPolicy",
    "LsaIAuditKdcEvent",
    "LsaIGetNbAndDnsDomainNames",
    "LsaIFree_LSAP_UPN_SUFFIXES",
    "LsapDsInitializePromoteInterface",
    "LsaIFree_LSAPR_PRIVILEGE_ENUM_BUFFER",
    "LsaIQuerySubnetInfo",
    "LsaIQueryUpnSuffixes",
    "LsaIFree_LSAP_SITENAME_INFO",
    "LsaIFree_LSAPR_SR_SECURITY_DESCRIPTOR",
    "LsaIAuditSamEvent",
    "LsarSetForestTrustInformation",
    "LsaIUpdateForestTrustInformation",
    "DsRolerDcAsDc",
    "LsaIUnregisterPolicyChangeNotificationCallback",
    "LsarCreateTrustedDomain",
    "LsapInitLsa",
    "LsarQueryInformationPolicy",
    "LsaIGetLogonGuid",
    "LsaIImpersonateClient",
    "LsaIFree_LSAPR_UNICODE_STRING_BUFFER",
    "LsaIAddNameToLogonSession",
    "LsaIFree_LSAPR_TRUSTED_ENUM_BUFFER_EX",
    "LsarCreateSecret",
    "LsaIFreeHeap",
    "LsaIFree_LSAP_SUBNET_INFO",
    "LsaIQuerySiteInfo",
    "LsarEnumeratePrivilegesAccount",
    "LsaIHealthCheck",
    "LsarSetDomainInformationPolicy",
    "LsarSetQuotasForAccount",
    "LsarDelete",
    "LsaIQueryInformationPolicyTrusted",
    "LsaIEventNotify",
    "LsaIFree_LSAPR_POLICY_INFORMATION",
    "LsaIChangeSecretCipherKey",
    "LsaIForestTrustFindMatch",
    "LsaISetLogonGuidInLogonSession",
    "ServiceInit",
    "LsapCheckBootMode",
    "LsaIAuditAccountLogonEx",
    "LsaIGetSiteName",
    "LsaIFree_LSAI_SECRET_ENUM_BUFFER",
    "LsaIFree_LSAPR_POLICY_DOMAIN_INFORMATION",
    "LsarLookupSids2",
    "LsaIFree_LSAPR_PRIVILEGE_SET",
    "LsaIIsDsPaused",
    "LsarOpenPolicySce",
    "LsaIFree_LSAPR_TRUSTED_ENUM_BUFFER",
    "LsaICallPackagePassthrough",
    "LsaIOpenPolicyTrusted",
    "LsarLookupNames",
    "LsarQueryForestTrustInformation",
    "LsapDsInitializeDsStateInfo",
    "LsaIGetBootOption",
    "LsaIAuditKerberosLogon",
    "LsaIGetSerialNumberPolicy",
    "LsarQuerySecret",
    "LsarGetQuotasForAccount",
    "LsaIQueryForestTrustInfo",
    "LsarRemovePrivilegesFromAccount",
    "LsaICancelNotification",
    "LsaIFreeForestTrustInfo",
    "LsarEnumerateAccounts",
    "DsRolerGetDcOperationResults",
    "LsarSetInformationPolicy",
    "LsaIGetPrivateData",
    "LsaIInitializeWellKnownSids",
    "LsaISetPrivateData",
    "LsaINotifyChangeNotification",
    "LsaITestCall",
    "LsaIFree_LSA_FOREST_TRUST_INFORMATION",
    "LsarSetSecurityObject",
    "LsapDsDebugInitialize",
    "LsaIGetSerialNumberPolicy2",
    "LsarLookupPrivilegeValue",
    "LsaIFree_LSAPR_TRANSLATED_NAMES",
    "LsarLookupSids",
    "LsarGetSystemAccessAccount",
    "LsarLookupPrivilegeDisplayName",
    "LsarCreateTrustedDomainEx",
    "LsaIUnregisterAllPolicyChangeNotificationCallback",
    "LsarClose",
    "DsRolerGetDcOperationProgress",
    "LsaIFree_LSAPR_TRUST_INFORMATION",
    "LsaIFree_LSAPR_TRUSTED_DOMAIN_INFO",
    "LsaIFree_LSAPR_TRANSLATED_SIDS",
    "LsaIAllocateHeap",
    "LsaIWriteAuditEvent",
    "LsarQuerySecurityObject",
    "LsaIFilterSids",
    "LsarQueryTrustedDomainInfo",
    "LsaIAllocateHeapZero",
    "LsapAuOpenSam",
    "LsaIRegisterNotification",
    "LsaISamIndicatedDsStarted",
    "LsaISetupWasRun",
    "LsaIIsClassIdLsaClass",
    "LsaIEnumerateSecrets",
    "LsarSetInformationTrustedDomain",
    "LsarSetSecret",
    "LsaIRegisterPolicyChangeNotificationCallback",
    "LsaICallPackageEx",
    "LsarQueryInfoTrustedDomain",
    "LsaIGetForestTrustInformation",
    "LsarCreateAccount",
    "LsaIFree_LSAPR_CR_CIPHER_VALUE",
    "LsaISetBootOption",
    "LsarOpenPolicy",
    "LsaISetTimesSecret",
    "LsaIFree_LSAPR_REFERENCED_DOMAIN_LIST",
    "LsarOpenAccount",
    "LsarSetSystemAccessAccount",
    "DsRolerDemoteDc",
    "DsRolerDcAsReplica",
    "LsarOpenSecret",
    "LsaIFreeReturnBuffer",
    "LsaICallPackage",
    "LsaIGetCallInfo"
  ],
  "lz32.dll": [
    "GetExpandedNameW",
    "LZClose",
    "LZRead",
    "LZStart",
    "LZCloseFile",
    "LZOpenFileA",
    "LZCreateFileW",
    "LZInit",
    "LZOpenFileW",
    "LZDone",
    "CopyLZFile",
    "LZSeek",
    "GetExpandedNameA",
    "LZCopy"
  ],
  "mag_hook.dll": [
    "_InstallEventHook@4",
    "_GetPopupInfo@4",
    "_FakeCursorMove@8",
    "_GetCursorHack@0",
    "_SetZoomRect@8"
  ],
  "mapi32.dll": [
    "FBadPropTag@4",
    "UlPropSize@4",
    "RTFSync",
    "WrapProgress@20",
    "CloseIMsgSession@4",
    "HrEntryIDFromSz@12",
    "FixMAPI@0",
    "HrGetOneProp@12",
    "LaunchWizard@20",
    "GetTnefStreamCodepage",
    "UNKOBJ_COFree@8",
    "UFromSz@4",
    "HexFromBin@12",
    "BMAPIGetReadMail",
    "MAPIAllocateBuffer@8",
    "cmc_list",
    "FBadRglpszA@8",
    "LpValFindProp@12",
    "MAPIFreeBuffer@4",
    "EnableIdleRoutine@8",
    "ScGenerateMuid@4",
    "SwapPlong@8",
    "MNLS_CompareStringW@24",
    "ScCopyNotifications@16",
    "MAPILogoff",
    "CbOfEncoded@4",
    "MAPIAllocateBuffer",
    "MNLS_IsBadStringPtrW@8",
    "FPropContainsProp@12",
    "PpropFindProp@12",
    "HrThisThreadAdviseSink@8",
    "cmc_send_documents",
    "LPropCompareProp@8",
    "FtAddFt@16",
    "MAPILogonEx@20",
    "MAPIAllocateMore@12",
    "HrIStorageFromStream@16",
    "ScBinFromHexBounded@12",
    "DllCanUnloadNow",
    "MAPIInitIdle@4",
    "UlFromSzHex@4",
    "ScLocalPathFromUNC@12",
    "BMAPIReadMail",
    "BMAPIGetAddress",
    "ScCreateConversationIndex@16",
    "MAPIDeinitIdle@0",
    "MAPIInitialize@4",
    "UNKOBJ_ScSzFromIdsAlloc@20",
    "MNLS_MultiByteToWideChar@24",
    "__CPPValidateParameters@8",
    "GetOutlookVersion",
    "MNLS_lstrcmpW@8",
    "SwapPword@8",
    "CreateIProp@24",
    "HrValidateParameters@8",
    "OpenTnefStream",
    "ScRelocProps@20",
    "WrapCompressedRTFStream@12",
    "UNKOBJ_ScCOAllocate@12",
    "FGetComponentPath@20",
    "OpenStreamOnFile",
    "cmc_query_configuration",
    "ScCountNotifications@12",
    "RTFSync@12",
    "OpenTnefStreamEx@32",
    "ScMAPIXFromCMC",
    "UNKOBJ_ScCOReallocate@12",
    "HrValidateIPMSubtree@20",
    "cmc_free",
    "InstallFilterHook@4",
    "HrSzFromEntryID@12",
    "OpenIMsgOnIStg@44",
    "FtMulDwDw@8",
    "ScCountProps@12",
    "HrDecomposeMsgID@24",
    "DllGetClassObject",
    "HrSetOmiProvidersFlagsInvalid@4",
    "MAPIOpenFormMgr@8",
    "cmc_look_up",
    "PropCopyMore@16",
    "MAPISaveMail",
    "FixMAPI",
    "BMAPIDetails",
    "ScUNCFromLocalPath@12",
    "UlAddRef@4",
    "MAPIAdminProfiles@8",
    "OpenIMsgSession@12",
    "__ValidateParameters@8",
    "FBadProp@4",
    "FDecodeID@12",
    "FtSubFt@16",
    "MNLS_WideCharToMultiByte@32",
    "OpenTnefStreamEx",
    "FPropExists@8",
    "DeregisterIdleRoutine@4",
    "MAPIFindNext",
    "HrDecomposeEID@28",
    "GetAttribIMsgOnIStg@12",
    "WrapStoreEntryID@24",
    "FBadColumnSet@4",
    "ChangeIdleRoutine@28",
    "IsBadBoundedStringPtr@8",
    "GetTnefStreamCodepage@12",
    "FBadRowSet@4",
    "SzFindCh@8",
    "UNKOBJ_ScAllocateMore@16",
    "EncodeID@12",
    "MAPIInitialize",
    "FBadSortOrderSet@4",
    "MAPISendDocuments",
    "FGetComponentPath",
    "MAPIResolveName",
    "DeinitMapiUtil@0",
    "CchOfEncoding@4",
    "OpenStreamOnFile@24",
    "BMAPISaveMail",
    "cmc_send",
    "MNLS_lstrlenW@4",
    "UNKOBJ_Free@8",
    "MAPIAdminProfiles",
    "MAPIOpenFormMgr",
    "BMAPISendMail",
    "HrComposeEID@28",
    "MapStorageSCode@4",
    "UlRelease@4",
    "FBadRow@4",
    "SzFindSz@8",
    "MAPIUninitialize@0",
    "cmc_logoff",
    "FtgRegisterIdleRoutine@20",
    "MAPIOpenLocalFormContainer@4",
    "HrDispatchNotifications@4",
    "MAPIAllocateMore",
    "FtMulDw@12",
    "FBinFromHex@8",
    "FtNegFt@8",
    "UNKOBJ_ScAllocate@12",
    "ScInitMapiUtil@4",
    "FreeProws@4",
    "BMAPIFindNext",
    "SetAttribIMsgOnIStg@16",
    "FBadRglpNameID@8",
    "ScRelocNotifications@20",
    "SzFindLastCh@8",
    "UNKOBJ_FreeRows@8",
    "MAPIReadMail",
    "FreePadrlist@4",
    "MNLS_lstrcpyW@8",
    "ScMAPIXFromSMAPI",
    "MAPILogon",
    "ScCopyProps@16",
    "BuildDisplayTable@40",
    "GetOutlookVersion@0",
    "HrComposeMsgID@24",
    "HrAddColumns@16",
    "cmc_logon",
    "MAPIDetails",
    "FBadEntryList@4",
    "FBadRestriction@4",
    "FEqualNames@8",
    "cmc_read",
    "cmc_act_on",
    "PRProviderInit",
    "MAPIDeleteMail",
    "MAPILogonEx",
    "MAPIFreeBuffer",
    "CreateTable@36",
    "HrSetOmiProvidersFlagsInvalid",
    "HrGetOmiProvidersFlags@8",
    "HrSetOneProp@8",
    "FtDivFtBogus@20",
    "HrAllocAdviseSink@12",
    "MAPISendMail",
    "MAPIOpenLocalFormContainer",
    "HrGetOmiProvidersFlags",
    "FBadRglpszW@8",
    "BMAPIAddress",
    "MAPIUninitialize",
    "BMAPIResolveName",
    "MAPIAddress",
    "FtAdcFt@20",
    "MAPIGetDefaultMalloc@0",
    "HrQueryAllRows@24",
    "ScDupPropset@16",
    "OpenTnefStream@28",
    "FPropCompareProp@12",
    "HrAddColumnsEx@20",
    "WrapCompressedRTFStream",
    "LAUNCHWIZARD"
  ],
  "mapistub.dll": [
    "FBadPropTag@4",
    "UlPropSize@4",
    "RTFSync",
    "WrapProgress@20",
    "CloseIMsgSession@4",
    "HrEntryIDFromSz@12",
    "FixMAPI@0",
    "HrGetOneProp@12",
    "LaunchWizard@20",
    "GetTnefStreamCodepage",
    "UNKOBJ_COFree@8",
    "UFromSz@4",
    "HexFromBin@12",
    "BMAPIGetReadMail",
    "MAPIAllocateBuffer@8",
    "cmc_list",
    "FBadRglpszA@8",
    "LpValFindProp@12",
    "MAPIFreeBuffer@4",
    "EnableIdleRoutine@8",
    "ScGenerateMuid@4",
    "SwapPlong@8",
    "MNLS_CompareStringW@24",
    "ScCopyNotifications@16",
    "MAPILogoff",
    "CbOfEncoded@4",
    "MAPIAllocateBuffer",
    "MNLS_IsBadStringPtrW@8",
    "FPropContainsProp@12",
    "PpropFindProp@12",
    "HrThisThreadAdviseSink@8",
    "cmc_send_documents",
    "LPropCompareProp@8",
    "FtAddFt@16",
    "MAPILogonEx@20",
    "MAPIAllocateMore@12",
    "HrIStorageFromStream@16",
    "ScBinFromHexBounded@12",
    "DllCanUnloadNow",
    "MAPIInitIdle@4",
    "UlFromSzHex@4",
    "ScLocalPathFromUNC@12",
    "BMAPIReadMail",
    "BMAPIGetAddress",
    "ScCreateConversationIndex@16",
    "MAPIDeinitIdle@0",
    "MAPIInitialize@4",
    "UNKOBJ_ScSzFromIdsAlloc@20",
    "MNLS_MultiByteToWideChar@24",
    "__CPPValidateParameters@8",
    "GetOutlookVersion",
    "MNLS_lstrcmpW@8",
    "SwapPword@8",
    "CreateIProp@24",
    "HrValidateParameters@8",
    "OpenTnefStream",
    "ScRelocProps@20",
    "WrapCompressedRTFStream@12",
    "UNKOBJ_ScCOAllocate@12",
    "FGetComponentPath@20",
    "OpenStreamOnFile",
    "cmc_query_configuration",
    "ScCountNotifications@12",
    "RTFSync@12",
    "OpenTnefStreamEx@32",
    "ScMAPIXFromCMC",
    "UNKOBJ_ScCOReallocate@12",
    "HrValidateIPMSubtree@20",
    "cmc_free",
    "InstallFilterHook@4",
    "HrSzFromEntryID@12",
    "OpenIMsgOnIStg@44",
    "FtMulDwDw@8",
    "ScCountProps@12",
    "HrDecomposeMsgID@24",
    "DllGetClassObject",
    "HrSetOmiProvidersFlagsInvalid@4",
    "MAPIOpenFormMgr@8",
    "cmc_look_up",
    "PropCopyMore@16",
    "MAPISaveMail",
    "FixMAPI",
    "BMAPIDetails",
    "ScUNCFromLocalPath@12",
    "UlAddRef@4",
    "MAPIAdminProfiles@8",
    "OpenIMsgSession@12",
    "__ValidateParameters@8",
    "FBadProp@4",
    "FDecodeID@12",
    "FtSubFt@16",
    "MNLS_WideCharToMultiByte@32",
    "OpenTnefStreamEx",
    "FPropExists@8",
    "DeregisterIdleRoutine@4",
    "MAPIFindNext",
    "HrDecomposeEID@28",
    "GetAttribIMsgOnIStg@12",
    "WrapStoreEntryID@24",
    "FBadColumnSet@4",
    "ChangeIdleRoutine@28",
    "IsBadBoundedStringPtr@8",
    "GetTnefStreamCodepage@12",
    "FBadRowSet@4",
    "SzFindCh@8",
    "UNKOBJ_ScAllocateMore@16",
    "EncodeID@12",
    "MAPIInitialize",
    "FBadSortOrderSet@4",
    "MAPISendDocuments",
    "FGetComponentPath",
    "MAPIResolveName",
    "DeinitMapiUtil@0",
    "CchOfEncoding@4",
    "OpenStreamOnFile@24",
    "BMAPISaveMail",
    "cmc_send",
    "MNLS_lstrlenW@4",
    "UNKOBJ_Free@8",
    "MAPIAdminProfiles",
    "MAPIOpenFormMgr",
    "BMAPISendMail",
    "HrComposeEID@28",
    "MapStorageSCode@4",
    "UlRelease@4",
    "FBadRow@4",
    "SzFindSz@8",
    "MAPIUninitialize@0",
    "cmc_logoff",
    "FtgRegisterIdleRoutine@20",
    "MAPIOpenLocalFormContainer@4",
    "HrDispatchNotifications@4",
    "MAPIAllocateMore",
    "FtMulDw@12",
    "FBinFromHex@8",
    "FtNegFt@8",
    "UNKOBJ_ScAllocate@12",
    "ScInitMapiUtil@4",
    "FreeProws@4",
    "BMAPIFindNext",
    "SetAttribIMsgOnIStg@16",
    "FBadRglpNameID@8",
    "ScRelocNotifications@20",
    "SzFindLastCh@8",
    "UNKOBJ_FreeRows@8",
    "MAPIReadMail",
    "FreePadrlist@4",
    "MNLS_lstrcpyW@8",
    "ScMAPIXFromSMAPI",
    "MAPILogon",
    "ScCopyProps@16",
    "BuildDisplayTable@40",
    "GetOutlookVersion@0",
    "HrComposeMsgID@24",
    "HrAddColumns@16",
    "cmc_logon",
    "MAPIDetails",
    "FBadEntryList@4",
    "FBadRestriction@4",
    "FEqualNames@8",
    "cmc_read",
    "cmc_act_on",
    "PRProviderInit",
    "MAPIDeleteMail",
    "MAPILogonEx",
    "MAPIFreeBuffer",
    "CreateTable@36",
    "HrSetOmiProvidersFlagsInvalid",
    "HrGetOmiProvidersFlags@8",
    "HrSetOneProp@8",
    "FtDivFtBogus@20",
    "HrAllocAdviseSink@12",
    "MAPISendMail",
    "MAPIOpenLocalFormContainer",
    "HrGetOmiProvidersFlags",
    "FBadRglpszW@8",
    "BMAPIAddress",
    "MAPIUninitialize",
    "BMAPIResolveName",
    "MAPIAddress",
    "FtAdcFt@20",
    "MAPIGetDefaultMalloc@0",
    "HrQueryAllRows@24",
    "ScDupPropset@16",
    "OpenTnefStream@28",
    "FPropCompareProp@12",
    "HrAddColumnsEx@20",
    "WrapCompressedRTFStream",
    "LAUNCHWIZARD"
  ],
  "mcastmib.dll": [
    "SnmpExtensionQuery",
    "SnmpExtensionTrap",
    "SnmpExtensionInit"
  ],
  "mcd32.dll": [
    "MCDBeginState",
    "MCDGetDriverInfo",
    "MCDDescribeLayerPlane",
    "MCDReadSpan",
    "MCDAddState",
    "MCDUnlock",
    "MCDSetLayerPalette",
    "MCDAlloc",
    "MCDLock",
    "MCDDescribeMcdPixelFormat",
    "MCDAllocBuffers",
    "MCDReadPixels",
    "MCDGetTextureFormats",
    "MCDSetScissorRect",
    "MCDProcessBatch2",
    "MCDCreateContext",
    "MCDSwap",
    "MCDTextureKey",
    "MCDUpdateTextureState",
    "MCDUpdateTexturePriority",
    "MCDQueryMemStatus",
    "MCDProcessBatch",
    "MCDDescribePixelFormat",
    "MCDCreateTexture",
    "MCDSwapMultiple",
    "MCDAddStateStruct",
    "MCDCopyPixels",
    "MCDDescribeMcdLayerPlane",
    "MCDTextureStatus",
    "MCDFlushState",
    "MCDFree",
    "MCDGetBuffers",
    "MCDSync",
    "MCDDeleteContext",
    "MCDDestroyWindow",
    "MCDUpdateTexturePalette",
    "MCDBindContext",
    "MCDSetViewport",
    "MCDPixelMap",
    "MCDWriteSpan",
    "MCDClear",
    "MCDUpdateSubTexture",
    "MCDDrawPixels",
    "MCDDeleteTexture"
  ],
  "mcdsrv32.dll": [
    "MCDEngSetMemStatus",
    "MCDEngInit",
    "MCDEngEscFilter",
    "MCDEngUninit",
    "MCDEngInitEx"
  ],
  "mchgrcoi.dll": [
    "MchgrClassCoInstaller"
  ],
  "mciavi32.dll": [
    "DriverProc",
    "KeyboardHookProc"
  ],
  "mcicda.dll": [
    "DriverProc"
  ],
  "mciole32.dll": [
    "InstallHook",
    "OleQueryObjPos",
    "DllCreateFromTemplate",
    "DllCreateLinkFromFile",
    "RemoveHook",
    "DllCreateFromClip",
    "DllCreateFromFile",
    "DllCreateLinkFromClip",
    "DllCreate",
    "GetMessageHook",
    "DllLoadFromStream"
  ],
  "mciqtz32.dll": [
    "DriverProc",
    "MCIEntry32"
  ],
  "mciseq.dll": [
    "DriverProc"
  ],
  "mciwave.dll": [
    "DriverProc"
  ],
  "mdhcp.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "mdminst.dll": [
    "ClassInstall32"
  ],
  "mf3216.dll": [
    "ConvertEmfToWmf",
    "Mf3216DllInitialize"
  ],
  "mfc40.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "mfc40u.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "mfc42.dll": [
    "public: static struct CRuntimeClass const CDataPathProperty::classCDataPathProperty",
    "public: static struct CRuntimeClass const CCachedDataPathProperty::classCCachedDataPathProperty",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mfc42u.dll": [
    "public: static struct CRuntimeClass const CDataPathProperty::classCDataPathProperty",
    "public: static struct CRuntimeClass const CCachedDataPathProperty::classCCachedDataPathProperty",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mfcsubs.dll": [
    "bool __stdcall operator<=(class CString const &,unsigned short const *)",
    "??$CopyElements@VCString@@@@YGXPAVCString@@PBV0@H@Z",
    "protected: void __thiscall CString::ConcatInPlace(int,unsigned short const *)",
    "public: __thiscall CSyncObject::CSyncObject(unsigned short const *)",
    "public: class CString & __thiscall CStringArray::ElementAt(int)",
    "public: unsigned short * __thiscall CString::LockBuffer(void)",
    "bool __stdcall operator>(unsigned short const *,class CString const &)",
    "protected: void __thiscall CString::Release(void)",
    "bool __stdcall operator<(class CString const &,class CString const &)",
    "public: void __thiscall CStringArray::RemoveAll(void)",
    "class CString __stdcall operator+(unsigned short,class CString const &)",
    "class CString __stdcall operator+(unsigned short const *,class CString const &)",
    "const CObject::`vftable'",
    "char * __stdcall AfxW2AHelper(char *,unsigned short const *,int)",
    "const CStringArray::`vftable'",
    "??$HashKey@PBG@@YGIPBG@Z",
    "unsigned short * __stdcall AfxA2WHelper(unsigned short *,char const *,int)",
    "public: unsigned int __thiscall CMapStringToPtr::HashKey(unsigned short const *)const",
    "bool __stdcall operator>=(class CString const &,unsigned short const *)",
    "public: void __thiscall CStringArray::InsertAt(int,unsigned short const *,int)",
    "public: __thiscall CString::CString(unsigned short,int)",
    "public: class CString __thiscall CString::Mid(int)const",
    "public: int __thiscall CString::GetLength(void)const",
    "bool __stdcall operator!=(unsigned short const *,class CString const &)",
    "public: int __thiscall CString::Find(unsigned short const *)const",
    "public: void __cdecl CString::FormatMessageW(unsigned int,...)",
    "public: __thiscall CString::CString(unsigned short const *,int)",
    "public: class CString const & __thiscall CString::operator+=(class CString const &)",
    "public: void __thiscall CString::FreeExtra(void)",
    "public: void __thiscall CString::TrimLeft(void)",
    "public: class CString __thiscall CString::Right(int)const",
    "bool __stdcall operator>(class CString const &,unsigned short const *)",
    "public: unsigned short * __thiscall CString::GetBuffer(int)",
    "const CSyncObject::`vftable'",
    "public: int __thiscall CStringArray::Add(unsigned short const *)",
    "class CString __stdcall operator+(class CString const &,class CString const &)",
    "public: class CString const & __thiscall CString::operator=(unsigned short)",
    "bool __stdcall operator!=(class CString const &,class CString const &)",
    "public: void __thiscall CStringArray::SetSize(int,int)",
    "bool __stdcall operator>=(unsigned short const *,class CString const &)",
    "protected: void __thiscall CString::Init(void)",
    "public: __thiscall CString::operator unsigned short const *(void)const",
    "public: int __thiscall CStringArray::Append(class CStringArray const &)",
    "public: virtual __thiscall CMapStringToPtr::~CMapStringToPtr(void)",
    "public: virtual __thiscall CSyncObject::~CSyncObject(void)",
    "public: void __thiscall CString::ReleaseBuffer(int)",
    "public: void __thiscall CString::MakeUpper(void)",
    "public: __thiscall CSyncObject::operator void *(void)const",
    "public: static struct CPlex * __stdcall CPlex::Create(struct CPlex * &,unsigned int,unsigned int)",
    "public: void __thiscall CString::MakeLower(void)",
    "public: __thiscall CString::CString(void)",
    "class CString const & __stdcall AfxGetEmptyString(void)",
    "protected: static void __stdcall CString::Release(struct CStringData *)",
    "public: class CString __thiscall CString::SpanExcluding(unsigned short const *)const",
    "public: class CString __thiscall CString::Left(int)const",
    "public: void __thiscall CString::Empty(void)",
    "public: int __thiscall CMapStringToPtr::IsEmpty(void)const",
    "public: void __thiscall CMapStringToPtr::RemoveAll(void)",
    "public: int __thiscall CString::FindOneOf(unsigned short const *)const",
    "public: void __thiscall CString::TrimRight(void)",
    "protected: void __thiscall CMapStringToPtr::FreeAssoc(struct CMapStringToPtr::CAssoc *)",
    "public: void __thiscall CMapStringToPtr::`default constructor closure'(void)",
    "public: class CString const & __thiscall CString::operator=(class CString const &)",
    "public: void __thiscall CString::MakeReverse(void)",
    "public: __thiscall CString::CString(char const *)",
    "int __stdcall AfxExtractSubString(class CString &,unsigned short const *,int,unsigned short)",
    "public: class CString const & __thiscall CString::operator=(unsigned char const *)",
    "public: class CString const & __thiscall CString::operator+=(unsigned short)",
    "protected: struct CStringData * __thiscall CString::GetData(void)const",
    "public: class CString const & __thiscall CString::operator+=(unsigned short const *)",
    "public: void __thiscall CMapStringToPtr::GetNextAssoc(struct __POSITION * &,class CString &,void * &)const",
    "public: void __thiscall CStringArray::SetAtGrow(int,unsigned short const *)",
    "public: class CString const & __thiscall CString::operator=(char)",
    "const CMapStringToPtr::`vftable'",
    "public: class CString __thiscall CString::Mid(int,int)const",
    "public: int __thiscall CStringArray::GetSize(void)const",
    "int __stdcall AfxLoadString(unsigned int,unsigned short *,unsigned int)",
    "public: void __cdecl CString::Format(unsigned int,...)",
    "public: unsigned short __thiscall CString::GetAt(int)const",
    "public: __thiscall CString::CString(unsigned char const *)",
    "public: int __thiscall CStringArray::GetUpperBound(void)const",
    "public: int __thiscall CMapStringToPtr::Lookup(unsigned short const *,void * &)const",
    "public: void __thiscall CStringArray::FreeExtra(void)",
    "public: int __thiscall CString::GetAllocLength(void)const",
    "public: void __thiscall CStringArray::Copy(class CStringArray const &)",
    "public: __thiscall CString::CString(class CString const &)",
    "public: __thiscall CString::~CString(void)",
    "protected: __thiscall CObject::CObject(void)",
    "bool __stdcall operator==(class CString const &,unsigned short const *)",
    "public: class CString __thiscall CStringArray::GetAt(int)const",
    "class CString __stdcall operator+(char,class CString const &)",
    "public: __thiscall CMapStringToPtr::CMapStringToPtr(int)",
    "public: class CString __thiscall CStringArray::operator[](int)const",
    "bool __stdcall operator>=(class CString const &,class CString const &)",
    "public: int __thiscall CCriticalSection::Lock(void)",
    "protected: void __thiscall CString::AssignCopy(int,unsigned short const *)",
    "public: __thiscall CString::CString(unsigned short const *)",
    "public: unsigned int __thiscall CMapStringToPtr::GetHashTableSize(void)const",
    "bool __stdcall operator!=(class CString const &,unsigned short const *)",
    "public: int __thiscall CString::Collate(unsigned short const *)const",
    "public: virtual int __thiscall CCriticalSection::Lock(unsigned long)",
    "public: virtual __thiscall CStringArray::~CStringArray(void)",
    "public: void __thiscall CStringArray::RemoveAt(int,int)",
    "public: void __thiscall CString::SetAt(int,unsigned short)",
    "public: int __thiscall CString::CompareNoCase(unsigned short const *)const",
    "public: class CString const & __thiscall CString::operator+=(char)",
    "bool __stdcall operator<(unsigned short const *,class CString const &)",
    "public: void __cdecl CString::FormatMessageW(unsigned short const *,...)",
    "??$HashKey@AAU_GUID@@@@YGIAAU_GUID@@@Z",
    "public: __thiscall CCriticalSection::CCriticalSection(void)",
    "public: virtual __thiscall CObject::~CObject(void)",
    "??$HashKey@ABU_GUID@@@@YGIABU_GUID@@@Z",
    "protected: void __thiscall CString::AllocBuffer(int)",
    "protected: struct CMapStringToPtr::CAssoc * __thiscall CMapStringToPtr::GetAssocAt(unsigned short const *,unsigned int &)const",
    "public: void * __thiscall CPlex::data(void)",
    "public: struct CPlex & __thiscall CPlex::operator=(struct CPlex const &)",
    "class CString __stdcall operator+(class CString const &,unsigned short)",
    "public: int __thiscall CMapStringToPtr::GetCount(void)const",
    "public: int __thiscall CString::LoadStringW(unsigned int)",
    "public: __thiscall CCriticalSection::operator struct _RTL_CRITICAL_SECTION *(void)",
    "public: void * & __thiscall CMapStringToPtr::operator[](unsigned short const *)",
    "protected: void __thiscall CString::FormatV(unsigned short const *,char *)",
    "public: __thiscall CStringArray::CStringArray(void)",
    "public: void __thiscall CMapStringToPtr::SetAt(unsigned short const *,void *)",
    "public: int __thiscall CString::ReverseFind(unsigned short)const",
    "protected: void __thiscall CString::ConcatCopy(int,unsigned short const *,int,unsigned short const *)",
    "??$DestructElements@VCString@@@@YGXPAVCString@@H@Z",
    "const CCriticalSection::`vftable'",
    "void __stdcall ConstructElements(class CString *,int)",
    "bool __stdcall operator==(class CString const &,class CString const &)",
    "public: virtual int __thiscall CCriticalSection::Unlock(void)",
    "public: virtual int __thiscall CSyncObject::Lock(unsigned long)",
    "public: void __thiscall CStringArray::SetAt(int,unsigned short const *)",
    "bool __stdcall operator<=(class CString const &,class CString const &)",
    "protected: void __thiscall CString::AllocCopy(class CString &,int,int,int)const",
    "public: virtual int __thiscall CSyncObject::Unlock(long,long *)",
    "public: void __thiscall CPlex::FreeDataChain(void)",
    "public: class CString const & __thiscall CString::operator=(char const *)",
    "protected: void __thiscall CString::CopyBeforeWrite(void)",
    "bool __stdcall operator>(class CString const &,class CString const &)",
    "bool __stdcall operator<=(unsigned short const *,class CString const &)",
    "public: class CString const * __thiscall CStringArray::GetData(void)const",
    "public: int __thiscall CString::Compare(unsigned short const *)const",
    "public: void __thiscall CStringArray::InsertAt(int,class CStringArray *)",
    "public: struct __POSITION * __thiscall CMapStringToPtr::GetStartPosition(void)const",
    "public: class CString const & __thiscall CString::operator=(unsigned short const *)",
    "public: void __cdecl CString::Format(unsigned short const *,...)",
    "bool __stdcall operator<(class CString const &,unsigned short const *)",
    "public: unsigned short * __thiscall CString::GetBufferSetLength(int)",
    "public: int __thiscall CMapStringToPtr::LookupKey(unsigned short const *,unsigned short const * &)const",
    "public: int __thiscall CString::Find(unsigned short)const",
    "public: class CString & __thiscall CStringArray::operator[](int)",
    "protected: void __thiscall CString::AllocBeforeWrite(int)",
    "public: class CString * __thiscall CStringArray::GetData(void)",
    "protected: static int __stdcall CString::SafeStrlen(unsigned short const *)",
    "public: unsigned short __thiscall CString::operator[](int)const",
    "public: void __thiscall CMapStringToPtr::InitHashTable(unsigned int,int)",
    "??$HashKey@PBD@@YGIPBD@Z",
    "public: virtual __thiscall CCriticalSection::~CCriticalSection(void)",
    "class CString __stdcall operator+(class CString const &,char)",
    "public: class CString __thiscall CString::SpanIncluding(unsigned short const *)const",
    "public: void __thiscall CString::UnlockBuffer(void)",
    "bool __stdcall operator==(unsigned short const *,class CString const &)",
    "protected: struct CMapStringToPtr::CAssoc * __thiscall CMapStringToPtr::NewAssoc(void)",
    "public: int __thiscall CString::IsEmpty(void)const",
    "public: int __thiscall CMapStringToPtr::RemoveKey(unsigned short const *)",
    "class CString __stdcall operator+(class CString const &,unsigned short const *)"
  ],
  "mgmtapi.dll": [
    "SnmpMgrOidToStr",
    "SnmpMgrCtl",
    "SnmpMgrGetTrap",
    "SnmpMgrGetTrapEx",
    "SnmpMgrRequest",
    "SnmpMgrClose",
    "SnmpMgrStrToOid",
    "SnmpMgrTrapListen",
    "SnmpMgrOpen"
  ],
  "microsoft.managementconsole.dll": "No exports",
  "midimap.dll": [
    "DriverProc",
    "modMessage",
    "modmCallback"
  ],
  "miglibnt.dll": [
    "MigDllCloseW",
    "MigDllInitializeDstW",
    "MigDllFreeList",
    "MigDllEnumFirstW",
    "MigDllCreateList",
    "MigDllOpenW",
    "MigDllAddDllToListW",
    "MigDllShutdown",
    "MigDllApplySystemSettingsW",
    "MigDllInit",
    "MigDllEnumNextW"
  ],
  "mimefilt.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "mlang.dll": [
    "ConvertINetString",
    "Rfc1766ToLcidA",
    "Rfc1766ToLcidW",
    "GetGlobalFontLinkObject",
    "ConvertINetMultiByteToUnicode",
    "ConvertINetUnicodeToMultiByte",
    "LcidToRfc1766W",
    "DllCanUnloadNow",
    "ConvertINetReset",
    "DllGetClassObject",
    "IsConvertINetStringAvailable",
    "DllRegisterServer",
    "DllUnregisterServer",
    "LcidToRfc1766A"
  ],
  "mll_hp.dll": [
    "MaxMediaLabel",
    "ClaimMediaLabel"
  ],
  "mll_mtf.dll": [
    "MaxMediaLabel",
    "ClaimMediaLabel"
  ],
  "mll_qic.dll": [
    "MaxMediaLabel",
    "ClaimMediaLabel"
  ],
  "mmcbase.dll": [
    "public: static void __stdcall mmcerror::SC::SetHWnd(struct HWND__ *)",
    "public: __thiscall CEventBuffer::~CEventBuffer(void)",
    "public: static void __stdcall BookKeeping::InterfaceFailure(int,unsigned short const *,unsigned short const *)",
    "public: static void __stdcall BookKeeping::MMCInterfaceLeak(int,unsigned short const *)",
    "class mmcerror::SC __stdcall ScFromMMC(long)",
    "public: static void __stdcall CMMCWatsonAPI::ForceException(int)",
    "public: static struct HWND__ * __stdcall mmcerror::SC::SetModalHWND(struct HWND__ *)",
    "public: static long __stdcall BookKeeping::UnregisterThread(int,unsigned long)",
    "public: static void __stdcall BookKeeping::MMCNullInterface(int,unsigned short const *,unsigned short const *)",
    "private: static class CConsoleEventDispatcher * CConsoleEventDispatcherProvider::s_pDispatcher",
    "public: class mmcerror::SC & __thiscall mmcerror::SC::FromLastError(void)",
    "long __stdcall SCODEFromSc(class mmcerror::SC const &)",
    "void __stdcall FormatErrorString(unsigned short const *,class mmcerror::SC,unsigned int,unsigned short *,int)",
    "public: static class SnapinBookkeepingInfo const & __stdcall BookKeeping::FindSnapin(struct IUnknown *)",
    "public: bool __thiscall mmcerror::SC::operator==(long)const",
    "public: static unsigned long __stdcall mmcerror::SC::GetMainThreadID(void)",
    "public: void __thiscall mmcerror::SC::SetFunctionName(unsigned short const *)",
    "private: static unsigned long mmcerror::SC::s_dwMainThreadID",
    "private: static class CMMCStrongReferences & __stdcall CMMCStrongReferences::GetSingletonObject(void)",
    "public: static long __stdcall BookKeeping::DumpWatsonTables(void *,unsigned short const *,int)",
    "public: static long __stdcall BookKeeping::UnregisterAllSnapinInstanceThreads(int)",
    "public: void __thiscall mmcerror::SC::Trace_(void)const",
    "public: static long __stdcall CMMCWatsonAPI::ExceptionFilter(struct _EXCEPTION_POINTERS *,int)",
    "public: static void __stdcall BookKeeping::InvalidMMCInterfaceRelease(int,unsigned short const *,unsigned short const *)",
    "private: bool __thiscall CMMCStrongReferences::InternalLastRefReleased(void)",
    "class CEventBuffer & __stdcall GetEventBuffer(void)",
    "public: void __thiscall mmcerror::SC::TraceAndClear(void)",
    "public: bool __thiscall mmcerror::SC::operator!=(long)const",
    "int __stdcall MMCErrorBox(unsigned short const *,unsigned int)",
    "public: static int __stdcall BookKeeping::GetNewSnapinInstanceId(void)",
    "public: long __thiscall mmcerror::SC::GetCode(void)const",
    "public: static class ItemHandle * __stdcall BookKeeping::FindItem(void *)",
    "public: void __thiscall CEventBuffer::Unlock(void)",
    "public: class mmcerror::SC & __thiscall mmcerror::SC::operator=(long)",
    "public: bool __thiscall CEventBuffer::IsLocked(void)",
    "public: class mmcerror::SC & __thiscall mmcerror::SC::FromMMC(long)",
    "public: static void __stdcall BookKeeping::InvalidMMCInterface(int,unsigned short const *,unsigned short const *)",
    "public: static bool __stdcall BookKeeping::FxSnapinException(int,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,int)",
    "public: static bool (__stdcall*__stdcall BookKeeping::RegisterSnapinInterfaceErrorHandler(bool (__stdcall*)(class SnapinBookkeepingInfo &,enum BookKeeping::_SnapinError,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,struct _EXCEPTION_POINTERS *)))(class SnapinBookkeepingInfo &,enum BookKeeping::_SnapinError,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,struct _EXCEPTION_POINTERS *)",
    "public: class mmcerror::SC & __thiscall mmcerror::SC::FromWin32(long)",
    "private: static unsigned int mmcerror::SC::s_CallDepth",
    "public: static long __stdcall BookKeeping::RegisterThread(int,int,unsigned long,enum BookKeeping::SnapinThreadFlags)",
    "public: class mmcerror::SC __thiscall CEventBuffer::ScEmitOrPostpone(struct IDispatch *,long,class ATL::CComVariant *,int)",
    "private: unsigned long __thiscall CMMCStrongReferences::InternalAddRef(void)",
    "private: __thiscall CMMCStrongReferences::CMMCStrongReferences(void)",
    "public: static unsigned short const * __stdcall BookKeeping::GetSnapinName(int)",
    "public: long __thiscall mmcerror::SC::ToHr(void)const",
    "public: void __thiscall mmcerror::SC::SetSnapinName(unsigned short const *)",
    "public: __thiscall CEventLock::~CEventLock(void)",
    "public: unsigned long __thiscall mmcerror::SC::GetHelpID(void)",
    "public: static unsigned long __stdcall CMMCStrongReferences::AddRef(void)",
    "public: static struct HWND__ * __stdcall mmcerror::SC::GetHWnd(void)",
    "public: void __thiscall mmcerror::SC::Throw(long)",
    "long __stdcall HrFromSc(class mmcerror::SC const &)",
    "int __stdcall MMCErrorBox(unsigned int,unsigned int)",
    "long __stdcall MMCUpdateRegistry(int,class CObjectRegParams const *,class CControlRegParams const *)",
    "private: unsigned long __thiscall CMMCStrongReferences::InternalRelease(void)",
    "private: static struct HINSTANCE__ * mmcerror::SC::s_hInst",
    "public: bool __thiscall mmcerror::SC::operator!=(class mmcerror::SC const &)const",
    "public: class CEventBuffer & __thiscall CEventBuffer::operator=(class CEventBuffer const &)",
    "public: static unsigned short const * __stdcall mmcerror::SC::GetHelpFile(void)",
    "public: __thiscall CEventBuffer::CEventBuffer(class CEventBuffer const &)",
    "int __stdcall MMCErrorBox(unsigned short const *,class mmcerror::SC,unsigned int)",
    "public: __thiscall mmcerror::SC::operator bool(void)const",
    "public: __thiscall CEventBuffer::CEventBuffer(void)",
    "public: static void __stdcall BookKeeping::MMCInterfaceError(int,unsigned short const *,unsigned short const *)",
    "public: static class SnapinBookkeepingInfo const & __stdcall BookKeeping::FindSnapin(unsigned short const *)",
    "void __stdcall FormatErrorShort(class mmcerror::SC,unsigned int,unsigned short *)",
    "public: static struct HWND__ * __stdcall mmcerror::SC::GetModalHWND(void)",
    "public: __thiscall mmcerror::SC::~SC(void)",
    "public: static class SnapinBookkeepingInfo const & __stdcall BookKeeping::FindSnapin(int)",
    "public: class mmcerror::SC & __thiscall mmcerror::SC::operator=(class mmcerror::SC const &)",
    "public: static long __stdcall BookKeeping::AddItem(class ItemHandle &)",
    "public: void __thiscall mmcerror::SC::GetErrorMessage(unsigned int,unsigned short *)const",
    "int __stdcall MMCErrorBox(unsigned int,class mmcerror::SC,unsigned int)",
    "public: static bool __stdcall BookKeeping::EnableDiagnosticMessageBox(bool)",
    "public: bool __thiscall mmcerror::SC::IsError(void)const",
    "public: static void __stdcall BookKeeping::InterfaceNotFound(int,unsigned short const *)",
    "public: static long __stdcall BookKeeping::FindAllSnapinUIThreads(int,unsigned long * *,unsigned long *)",
    "public: static long __stdcall BookKeeping::LKResult2HRESULT(long)",
    "private: void __thiscall mmcerror::SC::MakeSc(enum mmcerror::SC::facility_type,long)",
    "public: static class mmcerror::SC __stdcall CConsoleEventDispatcherProvider::ScGetConsoleEventDispatcher(class CConsoleEventDispatcher * &)",
    "public: static unsigned long __stdcall CMMCStrongReferences::Release(void)",
    "void __stdcall TraceSnapinError(unsigned short const *,class mmcerror::SC const &)",
    "public: static void __stdcall BookKeeping::InvalidInterface(int,unsigned short const *,unsigned short const *)",
    "public: static bool __stdcall BookKeeping::AddSnapinInterface(struct IUnknown *,unsigned short const *,int &)",
    "public: static class mmcerror::SC __stdcall CConsoleEventDispatcherProvider::ScSetConsoleEventDispatcher(class CConsoleEventDispatcher *)",
    "public: static long __stdcall BookKeeping::RemoveItem(void *)",
    "public: void __thiscall mmcerror::SC::Clear(void)",
    "public: void __thiscall CEventBuffer::Lock(void)",
    "public: static bool __stdcall ItemHandle::IsValid(class ItemHandle const *)",
    "private: static struct HWND__ * mmcerror::SC::s_hWndModal",
    "public: static long __stdcall BookKeeping::InitInstance(void)",
    "void __stdcall FormatErrorIds(unsigned int,class mmcerror::SC,unsigned int,unsigned short *)",
    "public: static bool __stdcall CMMCStrongReferences::LastRefReleased(void)",
    "public: static void __stdcall mmcerror::SC::SetMainThreadID(unsigned long)",
    "public: static struct HINSTANCE__ * __stdcall mmcerror::SC::GetHinst(void)",
    "_GetAllocCounters@0",
    "struct HINSTANCE__ * __stdcall GetStringModule(void)",
    "public: static unsigned short const * __stdcall BookKeeping::GetSnapinModuleName(int)",
    "public: static long __stdcall BookKeeping::ReleaseSnapinInterface(struct IUnknown *,int)",
    "public: static void __stdcall mmcerror::SC::SetHinst(struct HINSTANCE__ *)",
    "public: __thiscall mmcerror::SC::SC(class mmcerror::SC const &)",
    "public: void __thiscall mmcerror::SC::FatalError(void)const",
    "public: void __thiscall mmcerror::SC::`default constructor closure'(void)",
    "private: enum mmcerror::SC::facility_type __thiscall mmcerror::SC::GetFacility(void)const",
    "int __stdcall MMC_PickIconDlg(struct HWND__ *,unsigned short *,unsigned int,int *)",
    "public: static long __stdcall BookKeeping::FindAllSnapinUIThreads(unsigned long * *,unsigned long *)",
    "private: static struct HWND__ * mmcerror::SC::s_hWnd",
    "public: bool __thiscall mmcerror::SC::operator==(class mmcerror::SC const &)const",
    "public: static long __stdcall BookKeeping::AddSnapin(unsigned short const *,int &)",
    "int __stdcall MMCErrorBox(class mmcerror::SC,unsigned int)",
    "public: void __thiscall mmcerror::SC::Throw(void)",
    "ReportFxSnapinException",
    "public: int __thiscall mmcerror::SC::operator!(void)const",
    "private: class mmcerror::SC __thiscall CEventBuffer::ScFlushPostponed(void)",
    "public: unsigned short const * __thiscall mmcerror::SC::GetSnapinName(void)const",
    "public: static void __stdcall BookKeeping::InterfaceMethodException(int,unsigned short const *,unsigned short const *,unsigned long,struct _EXCEPTION_POINTERS *)",
    "public: static void __stdcall BookKeeping::WrongThreadCall(int,unsigned short const *,unsigned short const *)",
    "public: __thiscall mmcerror::SC::SC(long)",
    "public: class CEventLock & __thiscall CEventLock::operator=(class CEventLock const &)",
    "public: class CMMCStrongReferences & __thiscall CMMCStrongReferences::operator=(class CMMCStrongReferences const &)",
    "long __stdcall LoadStandardOverlays(struct _IMAGELIST *,int,int *,int *)",
    "public: __thiscall CEventLock::CEventLock(void)",
    "public: void __thiscall mmcerror::SC::CheckCallingThreadID(void)",
    "void __stdcall TraceError(unsigned short const *,class mmcerror::SC const &)",
    "public: static void __stdcall BookKeeping::MMCInterfaceMethodException(int,unsigned short const *,unsigned short const *,unsigned long,struct _EXCEPTION_POINTERS *,enum BookKeeping::_SnapinError)",
    "public: unsigned short const * __thiscall mmcerror::SC::GetFunctionName(void)const",
    "class CEventSource & __stdcall GetComObjectEventSource(void)"
  ],
  "mmcex.dll": "No exports",
  "mmcfxcommon.dll": "No exports",
  "mmcndmgr.dll": [
    "CreateExecutivePlatform",
    "_GetAllocCounters@0",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mmcshext.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "mmdrv.dll": [
    "widMessage",
    "wodMessage",
    "modMessage",
    "DriverProc",
    "midMessage",
    "auxMessage"
  ],
  "mmfutil.dll": [
    "_ErrorStringEx@16",
    "int __stdcall DisplayUserMessage(struct HWND__ *,struct HINSTANCE__ *,unsigned int,unsigned int,enum ERROR_SRC,long,unsigned int)",
    "DllCanUnloadNow",
    "int __stdcall DisplayUserMessage(struct HWND__ *,unsigned short const *,unsigned short const *,enum ERROR_SRC,long,unsigned int)",
    "DllGetClassObject",
    "int __stdcall DisplayAVIBox(struct HWND__ *,unsigned short const *,unsigned short const *,struct HWND__ * *)",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mmutilse.dll": [
    "public: void __thiscall CMemUser::UnLockBuffer(struct MEMBLOCK_tag *)",
    "public: int __thiscall CTStr::SetStringPointer(char *,int)",
    "public: void * __thiscall CMemUser::LockBuffer(struct MEMBLOCK_tag *)",
    "strlen",
    "long __cdecl ReadLongFromPropBag(struct IPropertyBag *,struct IErrorLog *,char *,long *)",
    "public: static char * __cdecl CStringWrapper::Strtok(char *,char const *)",
    "public: static void __cdecl CMemManager::DumpAllocationsGlb(char *)",
    "public: __thiscall CTStr::~CTStr(void)",
    "unsigned long __cdecl GetSigBitsFrom16BPP(struct HDC__ *)",
    "public: static void * __cdecl CStringWrapper::Memcpy(void *,void const *,unsigned int)",
    "public: virtual __thiscall CMemManager::~CMemManager(void)",
    "public: virtual __thiscall CURLArchive::~CURLArchive(void)",
    "public: virtual void * __stdcall CNonCollapsingDrg::GetNext(void)",
    "public: void __thiscall CMemManager::DumpAllocations(char *)",
    "public: static int __cdecl CStringWrapper::Strcmp(char const *,char const *)",
    "public: virtual void * __stdcall CNonCollapsingDrg::GetFirst(void)",
    "public: virtual void __stdcall CNonCollapsingDrg::SetArray(unsigned char *,long,unsigned int)",
    "public: static int __cdecl CStringWrapper::Sscanf2(char const *,char const *,void *,void *)",
    "long __cdecl BitCountFromDDPIXELFORMAT(struct _DDPIXELFORMAT const &)",
    "long __cdecl WriteBstrToPropBag(struct IPropertyBag *,char *,unsigned short *)",
    "swprintf",
    "public: static unsigned short * __cdecl CStringWrapper::WStrncpy(unsigned short *,unsigned short const *,unsigned int)",
    "public: static char * __cdecl CStringWrapper::Strrchr(char const *,char)",
    "public: static float __fastcall CMathWrapper::SinDegWrap(long)",
    "public: void __thiscall CMemUser::FreeBuffer(struct MEMBLOCK_tag *)",
    "public: static char * __cdecl CStringWrapper::Strcat(char *,char const *)",
    "public: __thiscall CTStr::CTStr(char *)",
    "public: void __thiscall CMemManager::FreeBufferMemBlock(struct MEMBLOCK_tag *)",
    "rand",
    "public: static char * __cdecl CStringWrapper::Ltoa(long,char *,int)",
    "public: float __fastcall OTrig::Sin(long)",
    "public: float __fastcall OTrig::CosWrap(long)",
    "public: static char * __cdecl CStringWrapper::Itoa(int,char *,int)",
    "public: static int __cdecl CStringWrapper::Sprintf(char *,char const *,...)",
    "public: static int __cdecl CStringWrapper::LoadStringW(struct HINSTANCE__ *,unsigned int,unsigned short *,int)",
    "public: static int __cdecl CStringWrapper::Strnicmp(char const *,char const *,unsigned int)",
    "public: static double __fastcall CMathWrapper::CosRad(double)",
    "memset",
    "public: __thiscall IHammer::CDirectDrawSurface::CDirectDrawSurface(struct HPALETTE__ *,unsigned long,struct tagSIZE const *,long *)",
    "public: virtual long __thiscall CURLArchive::CopyLocal(char *,int)",
    "public: virtual unsigned long __thiscall CURLArchive::Read(unsigned char *,unsigned long)",
    "public: void __thiscall CMemManager::FreeBuffer(void *)",
    "public: int __thiscall CTStr::SetString(unsigned short *)",
    "public: int __thiscall CMemManager::RegisterMemUser(class CMemUser *)",
    "public: static char * __cdecl CStringWrapper::Strcpy(char *,char const *)",
    "srand",
    "public: unsigned long __thiscall CMemManager::SizeBuffer(void *)",
    "public: virtual int __stdcall CNonCollapsingDrg::Remove(void *,long)",
    "public: __thiscall CTStr::CTStr(unsigned short *)",
    "public: static int __cdecl CStringWrapper::Strncmp(char const *,char const *,unsigned int)",
    "public: static int __cdecl CStringWrapper::WStrCmpin(unsigned short const *,unsigned short const *,unsigned int)",
    "public: __thiscall CHalftone::CHalftone(struct HPALETTE__ *)",
    "public: char * __thiscall CTStr::psz(void)",
    "public: int __thiscall CTStr::AllocBuffer(int,int)",
    "public: static void * __cdecl CMemManager::ReAllocBufferGlb(void *,unsigned long,unsigned short)",
    "public: static unsigned short * __cdecl CStringWrapper::WStrcat(unsigned short *,unsigned short const *)",
    "public: __thiscall CHalftonePalette::CHalftonePalette(void)",
    "strcpy",
    "public: static void * __cdecl CMemManager::AllocBufferGlb(unsigned long,unsigned short)",
    "private: void __thiscall CMemManager::DumpMemBlock(struct MEMBLOCK_tag *,struct _iobuf *)",
    "public: void __thiscall CTStr::`default constructor closure'(void)",
    "public: virtual long __thiscall CURLArchive::Seek(long,enum CURLArchive::origin)",
    "public: static int __cdecl CStringWrapper::Atoi(char const *)",
    "public: virtual struct IStream * __thiscall CURLArchive::GetStreamInterface(void)const",
    "public: __thiscall CTStr::CTStr(class CTStr &)",
    "public: static float __fastcall CMathWrapper::CosDegWrap(float)",
    "public: int __thiscall CTStr::Len(void)",
    "void __cdecl RetailEcho(char *,...)",
    "public: virtual int __thiscall CMemUser::NotifyMemUser(struct MEMNOTIFY_tag *)",
    "public: static void * __cdecl CStringWrapper::Memset(void *,int,unsigned int)",
    "public: static int __cdecl CStringWrapper::Sscanf1(char const *,char const *,void *)",
    "long __cdecl ReadBstrFromPropBag(struct IPropertyBag *,struct IErrorLog *,char *,unsigned short * *)",
    "public: static float __fastcall CMathWrapper::CosDegWrap(long)",
    "int __cdecl IsMMXCpu(void)",
    "public: __thiscall CURLArchive::CURLArchive(struct IUnknown *)",
    "_wcsicmp",
    "public: __thiscall CTStr::CTStr(int)",
    "public: static int __cdecl CStringWrapper::Sscanf3(char const *,char const *,void *,void *,void *)",
    "public: unsigned short * __thiscall CTStr::SysAllocString(void)",
    "wcsncpy",
    "memcmp",
    "public: __thiscall CMemManager::CMemManager(void)",
    "public: static char * __cdecl CStringWrapper::Strncpy(char *,char const *,unsigned int)",
    "public: struct MEMBLOCK_tag * __thiscall CMemUser::AllocBuffer(unsigned long,unsigned short)",
    "public: virtual long __thiscall CURLArchive::CopyLocal(unsigned short *,int)",
    "public: virtual int __stdcall CNonCollapsingDrg::CopyFrom(class CDrg *)",
    "public: static char * __cdecl CStringWrapper::Strinc(char const *)",
    "public: virtual void * __stdcall CNonCollapsingDrg::GetAt(long)",
    "private: void __thiscall CMemManager::DumpHeapHeader(struct HEAPHEADER_tag *,struct _iobuf *)",
    "public: __thiscall OTrig::OTrig(void)",
    "public: static float __fastcall CMathWrapper::SinDeg(long)",
    "public: static void __cdecl CMemManager::FreeBufferGlb(void *)",
    "public: float __fastcall OTrig::Cos(float)",
    "public: unsigned short * __thiscall CTStr::pszW(void)",
    "public: static long __cdecl CStringWrapper::Atol(char const *)",
    "int __stdcall CreateIDispatchCollection(struct IUnknown * *)",
    "public: static int __cdecl CStringWrapper::Stricmp(char const *,char const *)",
    "public: void __thiscall CURLArchive::`default constructor closure'(void)",
    "public: char * __thiscall CTStr::pszA(void)",
    "public: static int __cdecl CStringWrapper::Iswspace(unsigned short)",
    "public: float __fastcall OTrig::SinWrap(long)",
    "public: static char * __cdecl CStringWrapper::Gcvt(double,int,char *)",
    "public: __thiscall CHalftonePalette::CHalftonePalette(struct HPALETTE__ *)",
    "public: int __thiscall CMemManager::UnRegisterMemUser(class CMemUser *)",
    "public: float __fastcall OTrig::CosWrap(float)",
    "public: static int __cdecl CStringWrapper::Memcmp(void const *,void const *,unsigned int)",
    "public: void __thiscall CTStr::FreeBuffer(void)",
    "public: static char * __cdecl CStringWrapper::Strchr(char const *,char)",
    "_chkstk",
    "public: static float __fastcall CMathWrapper::CosDeg(float)",
    "public: static float __fastcall CMathWrapper::Sqrt(float)",
    "public: static int __cdecl CStringWrapper::WStrlen(unsigned short const *)",
    "_CIfmod",
    "public: virtual unsigned long __thiscall CURLArchive::Write(unsigned char *,unsigned long)",
    "unsigned long __cdecl OverheadOfSavePtrDrg(void)",
    "public: virtual int __stdcall CDrg::Remove(void *,long)",
    "public: virtual void __stdcall CDrg::SetNonDefaultSizes(unsigned int,unsigned int)",
    "public: static int __cdecl CStringWrapper::Strlen(char const *)",
    "public: virtual long __thiscall CURLArchive::Create(unsigned short const *)",
    "public: static float __fastcall CMathWrapper::SinDegWrap(float)",
    "public: static float __cdecl CMathWrapper::Pow(double,double)",
    "public: static float __fastcall CMathWrapper::CosDeg(long)",
    "public: static double __fastcall CMathWrapper::SinRad(double)",
    "setlocale",
    "public: static unsigned short * __cdecl CStringWrapper::WStrcpy(unsigned short *,unsigned short const *)",
    "public: float __fastcall OTrig::SinWrap(float)",
    "public: virtual long __thiscall CURLArchive::GetFileSize(long &)",
    "public: static int __cdecl CMemManager::RegisterMemUserGlb(class CMemUser *)",
    "public: __thiscall CMemUser::CMemUser(void)",
    "public: static float __fastcall CMathWrapper::SinDeg(float)",
    "public: virtual unsigned long __thiscall CURLArchive::ReadLine(unsigned short *,unsigned long)",
    "public: virtual long __thiscall CURLArchive::Create(char const *)",
    "public: static unsigned long __cdecl CMemManager::SizeBufferGlb(void *)",
    "public: virtual int __stdcall CDrg::Insert(void *,long)",
    "public: static char * __cdecl CStringWrapper::Strstr(char const *,char const *)",
    "public: static unsigned int __cdecl CStringWrapper::Wcstombs(char *,unsigned short const *,unsigned int)",
    "public: virtual int __stdcall CNonCollapsingDrg::SetAt(void *,long)",
    "public: virtual unsigned long __thiscall CURLArchive::ReadLine(char *,unsigned long)",
    "public: void * __thiscall CMemManager::ReAllocBuffer(void *,unsigned long,unsigned short)",
    "public: void __thiscall CTStr::ResetLength(void)",
    "wcslen",
    "public: static unsigned int __cdecl CStringWrapper::Mbstowcs(unsigned short *,char const *,unsigned int)",
    "private: void __thiscall CMemManager::DumpMemUserInfo(struct MEMUSERINFO_tag *,struct _iobuf *)",
    "public: static int __cdecl CMemManager::UnRegisterMemUserGlb(class CMemUser *)",
    "_wtoi",
    "public: virtual long __thiscall CURLArchive::Close(void)",
    "public: float __fastcall OTrig::Cos(long)",
    "public: void * __thiscall CMemManager::AllocBuffer(unsigned long,unsigned short)",
    "void __stdcall ExternalDumpAllocations(char *)",
    "public: virtual __thiscall CMemUser::~CMemUser(void)",
    "long __cdecl WriteLongToPropBag(struct IPropertyBag *,char *,long)",
    "public: float __fastcall OTrig::Sin(float)",
    "public: int __thiscall CTStr::SetString(char *)"
  ],
  "mnmdd.dll": "No exports",
  "mobsync.dll": [
    "RegGetSchedConnectionName",
    "RunDllRegister",
    "RegRemoveManualSyncSettings",
    "RegSetProgressDetailsState",
    "DisplayOptions",
    "RegGetSchedSyncSettings",
    "RegGetSyncItemSettings",
    "RegGetHandlerTopLevelKey",
    "DllRegisterServer",
    "SyncMgrRasProc",
    "RegGetProgressDetailsState",
    "MobsyncGetClassObject",
    "RegQueryLoadHandlerOnEvent",
    "RegSchedHandlerItemsChecked",
    "DllGetClassObject",
    "RegGetSyncSettings",
    "RegGetHandlerRegistrationInfo",
    "RegSetSyncItemSettings",
    "DllCanUnloadNow",
    "SyncMgrResolveConflictA",
    "SyncMgrResolveConflictW",
    "DllUnregisterServer",
    "RegSetUserDefaults"
  ],
  "modemui.dll": [
    "drvCommConfigDialogA",
    "drvSetDefaultCommConfigW",
    "UnimodemGetExtendedCaps",
    "CountryRunOnce",
    "QueryModemForCountrySettings",
    "drvCommConfigDialogW",
    "drvSetDefaultCommConfigA",
    "UnimodemGetDefaultCommConfig",
    "ModemPropPagesProvider",
    "drvGetDefaultCommConfigW",
    "UnimodemDevConfigDialog",
    "ModemCplDlgProc",
    "drvGetDefaultCommConfigA",
    "InvokeControlPanel"
  ],
  "modex.dll": "No exports",
  "moricons.dll": "No exports",
  "mp43dmod.dll": [
    "CreateInstance",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mp4sdmod.dll": [
    "CreateInstance",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mpg4dmod.dll": [
    "CreateInstance",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mpr.dll": [
    "WNetGetPropertyTextW",
    "WNetCancelConnectionW",
    "WNetFormatNetworkNameW",
    "WNetFMXGetPermCaps",
    "WNetConnectionDialog2",
    "WNetPropertyDialogA",
    "WNetSetLastErrorW",
    "WNetDisconnectDialog1A",
    "WNetDirectoryNotifyA",
    "WNetAddConnectionW",
    "WNetEnumResourceW",
    "I_MprSaveConn",
    "MultinetGetConnectionPerformanceW",
    "WNetPasswordChangeNotify",
    "WNetGetProviderNameA",
    "MultinetGetErrorTextW",
    "WNetGetConnection2W",
    "WNetGetProviderTypeW",
    "WNetSetConnectionA",
    "WNetGetUserA",
    "WNetGetConnection3A",
    "WNetPropertyDialogW",
    "WNetCloseEnum",
    "WNetGetUniversalNameA",
    "WNetConnectionDialog",
    "WNetGetLastErrorW",
    "WNetDisconnectDialog2",
    "WNetGetDirectoryTypeW",
    "MultinetGetConnectionPerformanceA",
    "WNetGetHomeDirectoryW",
    "WNetCancelConnection2A",
    "WNetRestoreConnectionW",
    "WNetFormatNetworkNameA",
    "WNetDirectoryNotifyW",
    "WNetAddConnection2W",
    "WNetAddConnection3W",
    "WNetGetProviderNameW",
    "WNetClearConnections",
    "WNetUseConnectionW",
    "WNetAddConnection3A",
    "WNetGetConnectionW",
    "WNetGetNetworkInformationW",
    "WNetDisconnectDialog",
    "WNetCancelConnectionA",
    "RestoreConnectionA0",
    "WNetOpenEnumA",
    "WNetGetUserW",
    "WNetUseConnectionA",
    "WNetGetResourceInformationA",
    "WNetGetDirectoryTypeA",
    "WNetGetConnection2A",
    "WNetOpenEnumW",
    "WNetGetConnection3W",
    "WNetFMXEditPerm",
    "WNetGetSearchDialog",
    "MultinetGetErrorTextA",
    "WNetGetProviderTypeA",
    "WNetRestoreConnection2W",
    "WNetDisconnectDialog1W",
    "WNetGetUniversalNameW",
    "WNetGetLastErrorA",
    "WNetSetConnectionW",
    "WNetAddConnection2A",
    "WNetFMXGetPermHelp",
    "WNetAddConnectionA",
    "WNetGetResourceParentW",
    "WNetGetResourceParentA",
    "WNetGetResourceInformationW",
    "WNetSetLastErrorA",
    "WNetLogonNotify",
    "WNetEnumResourceA",
    "WNetGetPropertyTextA",
    "WNetSupportGlobalEnum",
    "WNetConnectionDialog1A",
    "WNetConnectionDialog1W",
    "WNetGetNetworkInformationA",
    "WNetCancelConnection2W",
    "WNetGetConnectionA"
  ],
  "mprapi.dll": [
    "MprAdminUserOpen",
    "RasAdminPortReset",
    "MprAdminInterfaceDeviceSetInfo",
    "MprAdminDeviceEnum",
    "MprAdminBufferFree",
    "MprConfigInterfaceDelete",
    "MprAdminInterfaceCreate",
    "MprAdminInterfaceSetCredentials",
    "MprAdminTransportGetInfo",
    "RasAdminServerDisconnect",
    "MprAdminUpgradeUsers",
    "MprAdminUserClose",
    "MprAdminServerGetInfo",
    "MprAdminInterfaceGetCredentials",
    "MprConfigTransportEnum",
    "MprConfigServerConnect",
    "MprConfigBufferFree",
    "MprConfigInterfaceTransportSetInfo",
    "MprConfigInterfaceTransportGetInfo",
    "MprAdminServerDisconnect",
    "MprSetupIpInIpInterfaceFriendlyNameCreate",
    "MprAdminMIBEntryGetNext",
    "MprConfigTransportGetHandle",
    "MprAdminInterfaceGetHandle",
    "MprAdminMIBEntryGetFirst",
    "MprSetupIpInIpInterfaceFriendlyNameFree",
    "MprAdminConnectionEnum",
    "MprAdminInterfaceGetInfo",
    "MprConfigTransportSetInfo",
    "MprAdminInterfaceTransportSetInfo",
    "MprAdminTransportCreate",
    "MprSetupIpInIpInterfaceFriendlyNameDelete",
    "RasAdminPortClearStats",
    "MprConfigTransportDelete",
    "MprAdminInterfaceDeviceGetInfo",
    "RasAdminIsServiceRunning",
    "MprAdminMIBEntrySet",
    "MprConfigInterfaceGetHandle",
    "MprAdminInterfaceConnect",
    "MprAdminGetPDCServer",
    "MprSetupIpInIpInterfaceFriendlyNameEnum",
    "MprConfigServerDisconnect",
    "MprConfigTransportCreate",
    "MprAdminMIBServerConnect",
    "MprAdminServerGetCredentials",
    "MprAdminMIBEntryGet",
    "MprAdminSendUserMessage",
    "MprAdminPortGetInfo",
    "RasAdminUserSetInfo",
    "MprInfoDelete",
    "MprAdminUserWrite",
    "MprDomainQueryAccess",
    "MprInfoBlockSet",
    "MprAdminInterfaceTransportAdd",
    "MprAdminUserServerDisconnect",
    "RasAdminGetErrorString",
    "MprInfoDuplicate",
    "MprPortSetUsage",
    "MprAdminUserReadProfFlags",
    "MprAdminUserWriteProfFlags",
    "MprAdminInterfaceUpdatePhonebookInfo",
    "MprAdminConnectionGetInfo",
    "MprAdminConnectionClearStats",
    "MprGetUsrParams",
    "MprAdminUserServerConnect",
    "MprConfigTransportGetInfo",
    "MprConfigInterfaceCreate",
    "MprConfigGetGuidName",
    "MprDomainQueryRasServer",
    "MprAdminInterfaceTransportRemove",
    "MprAdminPortDisconnect",
    "MprAdminUserSetInfo",
    "MprConfigServerRefresh",
    "RasAdminPortEnum",
    "MprConfigInterfaceTransportRemove",
    "RasAdminUserGetInfo",
    "MprAdminMIBServerDisconnect",
    "MprConfigInterfaceTransportEnum",
    "RasAdminPortGetInfo",
    "MprAdminInterfaceUpdateRoutes",
    "MprAdminDeregisterConnectionNotification",
    "MprAdminInterfaceDelete",
    "MprInfoBlockAdd",
    "CompressPhoneNumber",
    "MprInfoBlockFind",
    "MprConfigGetFriendlyName",
    "MprAdminRegisterConnectionNotification",
    "MprInfoBlockQuerySize",
    "MprAdminEstablishDomainRasServer",
    "MprAdminInterfaceGetCredentialsEx",
    "MprAdminGetErrorString",
    "MprConfigInterfaceTransportAdd",
    "MprConfigServerGetInfo",
    "MprAdminInterfaceEnum",
    "MprAdminIsServiceRunning",
    "RasAdminGetPDCServer",
    "MprAdminMIBBufferFree",
    "MprAdminMIBEntryCreate",
    "MprAdminUserGetInfo",
    "MprConfigInterfaceEnum",
    "RasAdminConnectionGetInfo",
    "RasAdminBufferFree",
    "MprAdminInterfaceQueryUpdateResult",
    "MprConfigServerBackup",
    "RasAdminServerConnect",
    "MprInfoCreate",
    "MprAdminInterfaceSetInfo",
    "MprConfigInterfaceGetInfo",
    "MprAdminIsDomainRasServer",
    "MprInfoBlockRemove",
    "MprConfigInterfaceSetInfo",
    "MprAdminServerSetCredentials",
    "RasAdminPortDisconnect",
    "MprAdminInterfaceDisconnect",
    "MprDomainRegisterRasServer",
    "MprAdminInterfaceSetCredentialsEx",
    "MprAdminPortReset",
    "MprAdminServerConnect",
    "MprAdminPortClearStats",
    "MprAdminTransportSetInfo",
    "RasAdminConnectionClearStats",
    "RasPrivilegeAndCallBackNumber",
    "MprAdminInterfaceTransportGetInfo",
    "MprConfigServerRestore",
    "MprAdminUserRead",
    "MprAdminMIBEntryDelete",
    "MprConfigInterfaceTransportGetHandle",
    "MprDomainSetAccess",
    "MprConfigServerInstall",
    "MprAdminPortEnum",
    "RasAdminConnectionEnum",
    "MprInfoRemoveAll"
  ],
  "mprddm.dll": [
    "RasAcctProviderStopAccounting",
    "DDMAdminConnectionClearStats",
    "DDMAdminPortReset",
    "RasAuthConfigChangeNotification",
    "RasAuthProviderAuthenticateUser",
    "IfObjectInitiatePersistentConnections",
    "DDMAdminInterfaceDisconnect",
    "DDMServiceInitialize",
    "DDMAdminConnectionEnum",
    "RasAcctProviderInitialize",
    "DDMAdminPortClearStats",
    "DDMTransportCreate",
    "RasAcctProviderFreeAttributes",
    "IfObjectNotifyOfReachabilityChange",
    "DDMAdminInterfaceConnect",
    "DDMAdminPortEnum",
    "DDMConnectInterface",
    "RasAcctProviderStartAccounting",
    "DDMServicePostListens",
    "DDMAdminPortGetInfo",
    "RasAuthProviderTerminate",
    "DDMAdminServerGetInfo",
    "DDMSendUserMessage",
    "IfObjectSetDialoutHoursRestriction",
    "RasAuthProviderFreeAttributes",
    "IfObjectLoadPhonebookInfo",
    "DDMAdminPortDisconnect",
    "DDMDisconnectInterface",
    "DDMGetIdentityAttributes",
    "RasAcctProviderTerminate",
    "RasAcctProviderInterimAccounting",
    "RasAcctConfigChangeNotification",
    "DDMAdminConnectionGetInfo",
    "RasAuthProviderInitialize",
    "DDMRegisterConnectionNotification"
  ],
  "mprdim.dll": [
    "ServiceMain"
  ],
  "mprmsg.dll": [
    "GetEventIds"
  ],
  "mprui.dll": [
    "MPRUI_WNetConnectionDialog1W",
    "MPRUI_WNetDisconnectDialog1A",
    "WNetBrowseDialog",
    "BrowseDialogA0",
    "MPRUI_WNetDisconnectDialog1W",
    "MPRUI_WNetClearConnections",
    "WNetBrowsePrinterDialog",
    "MPRUI_WNetConnectionDialog",
    "MPRUI_DoPasswordDialog",
    "MPRUI_WNetConnectionDialog1A",
    "MPRUI_DoProfileErrorDialog",
    "MPRUI_ShowReconnectDialog",
    "MPRUI_WNetDisconnectDialog"
  ],
  "mqad.dll": [
    "MQADInit",
    "MQADQueryForeignSites",
    "MQADQueryAllLinks",
    "MQADSetObjectSecurityGuid",
    "MQADSetObjectSecurity",
    "MQADQueryAllSites",
    "MQADGetComputerVersion",
    "MQADQueryResults",
    "MQADCreateObject",
    "MQADQMGetObjectSecurity",
    "MQADQMSetMachineProperties",
    "MQADGetObjectPropertiesGuid",
    "MQADQueryQueues",
    "MQADQueryLinks",
    "MQADQueryUserCert",
    "MQADDeleteObject",
    "MQADQueryConnectors",
    "MQADGetObjectProperties",
    "MQADNotifyDelete",
    "MQADBeginDeleteNotification",
    "MQADGetADsPathInfo",
    "MQADSetObjectProperties",
    "MQADGetObjectSecurityGuid",
    "MQADGetObjectSecurity",
    "MQADEndDeleteNotification",
    "MQADQueryMachineQueues",
    "MQADQueryNT4MQISServers",
    "MQADGetComputerSites",
    "MQADQuerySiteServers",
    "MQADFreeMemory",
    "MQADSetObjectPropertiesGuid",
    "MQADEndQuery",
    "MQADDeleteObjectGuid",
    "MQADSetupInit"
  ],
  "mqcertui.dll": [
    "CaConfig",
    "SelectPersonalCertificateForRegister",
    "SelectPersonalCertificateForRemoval",
    "ShowPersonalCertificates",
    "ShowCertificate"
  ],
  "mqdscli.dll": [
    "DSGetUserParams",
    "DSSetObjectSecurity",
    "DSGetObjectSecurityGuid",
    "DSLookupNext",
    "DSGetComputerSites",
    "DSTerminate",
    "DSBeginDeleteNotification",
    "DSQMSetMachineProperties",
    "DSSetObjectProperties",
    "DSGetObjectPropertiesGuid",
    "DSSetObjectPropertiesGuid",
    "DSQMGetObjectSecurity",
    "DSGetObjectPropertiesEx",
    "DSInit",
    "DSGetObjectSecurity",
    "DSDeleteObject",
    "DSSetObjectSecurityGuid",
    "DSFreeMemory",
    "DSDeleteObjectGuid",
    "DSGetObjectPropertiesGuidEx",
    "DSCreateObject",
    "DSCreateServersCache",
    "DSGetObjectProperties",
    "DSLookupEnd",
    "DSNotifyDelete",
    "DSLookupBegin",
    "DSEndDeleteNotification"
  ],
  "mqgentr.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "mqise.dll": [
    "GetExtensionVersion",
    "TerminateExtension",
    "HttpExtensionProc"
  ],
  "mqlogmgr.dll": [
    "public: static long __stdcall CLogMgr::CreateInstance(class CLogMgr * *,struct IUnknown *)",
    "DllGetDTCLOG2",
    "int __stdcall DllGetDTCLOG(struct _GUID const &,struct _GUID const &,void * *)",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mqoa.dll": [
    "DLLGetDocumentation",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mqperf.dll": [
    "PerfClose",
    "PerfOpen",
    "PerfCollect"
  ],
  "mqqm.dll": [
    "public: __thiscall CPerf::CPerf(struct _PerfObjectDef *,unsigned long)",
    "public: __thiscall CPerf::~CPerf(void)",
    "public: void __thiscall CPerf::EnableUpdate(void *,unsigned long,int)",
    "public: int __thiscall CPerf::InValidateObject(unsigned short *)",
    "public: __thiscall CPerfUnLockMem::~CPerfUnLockMem(void)",
    "class CPerf PerfApp",
    "public: int __thiscall CPerf::RemoveInstance(unsigned short *,void *)",
    "private: int __thiscall CPerf::FindObject(unsigned short const *)",
    "public: int __thiscall CPerf::ValidateObject(unsigned short *)",
    "public: __thiscall CPerfUnLockMem::CPerfUnLockMem(void *,unsigned long)",
    "public: int __thiscall CPerf::InitPerf(void)",
    "public: void * __thiscall CPerf::GetCounters(unsigned short *)",
    "public: int __thiscall CPerf::SetInstanceName(void const *,unsigned short const *)",
    "public: int __thiscall CPerf::IsDummyInstance(void *)",
    "public: class CPerf & __thiscall CPerf::operator=(class CPerf const &)",
    "int __stdcall QMMain(int,unsigned short const * * const)",
    "public: class CPerfUnLockMem & __thiscall CPerfUnLockMem::operator=(class CPerfUnLockMem const &)",
    "public: void * __thiscall CPerf::AddInstance(unsigned short const *,unsigned short const *)"
  ],
  "mqrt.dll": [
    "RTRegisterUserCert",
    "MQRegisterCertificate",
    "MQMgmtAction",
    "MQDeleteQueue",
    "MQGetSecurityContext",
    "MQCloseQueue",
    "MQFreeSecurityContext",
    "MQGetPrivateComputerInformation",
    "MQGetQueueProperties",
    "RTOpenInternalCertStore",
    "MQLocateBegin",
    "MQSetQueueProperties",
    "MQBeginTransaction",
    "MQFreeMemory",
    "MQADsPathToFormatName",
    "MQGetSecurityContextEx",
    "MQMgmtGetInfo",
    "MQGetMachineProperties",
    "MQHandleToFormatName",
    "RTDeleteInternalCert",
    "DllRegisterServer",
    "MQPathNameToFormatName",
    "RTGetUserCerts",
    "MQSendMessage",
    "MQGetOverlappedResult",
    "MQOpenQueue",
    "MQReceiveMessageByLookupId",
    "MQCloseCursor",
    "RTXactGetDTC",
    "MQCreateQueue",
    "MQSetQueueSecurity",
    "MQLocateNext",
    "MQGetQueueSecurity",
    "MQAllocateMemory",
    "RTCreateInternalCertificate",
    "MQLogHR",
    "MQCreateCursor",
    "MQLocateEnd",
    "MQPurgeQueue",
    "MQReceiveMessage",
    "RTGetInternalCert",
    "RTRemoveUserCert",
    "MQInstanceToFormatName",
    "RTIsDependentClient"
  ],
  "mqrtdep.dll": [
    "DepMgmtGetInfo",
    "DepPathNameToFormatName",
    "DepCreateInternalCertificate",
    "DepGetOverlappedResult",
    "DepReceiveMessage",
    "DepPurgeQueue",
    "DepGetQueueSecurity",
    "DepOpenInternalCertStore",
    "DepBeginTransaction",
    "DepFreeSecurityContext",
    "DepLocateEnd",
    "DepGetPrivateComputerInformation",
    "DepGetSecurityContext",
    "DepCreateQueue",
    "DepGetUserCerts",
    "DepGetMachineProperties",
    "DepSetQueueSecurity",
    "DepOpenQueue",
    "DepRegisterCertificate",
    "DepFreeMemory",
    "DepGetSecurityContextEx",
    "DepCloseQueue",
    "DllRegisterServer",
    "DepRemoveUserCert",
    "DepSendMessage",
    "DepDeleteQueue",
    "DepMgmtAction",
    "DepRegisterUserCert",
    "DepGetInternalCert",
    "long __stdcall RTXactGetDTC(struct IUnknown * *)",
    "DepLocateNext",
    "DepLocateBegin",
    "DepSetQueueProperties",
    "DepHandleToFormatName",
    "DepCloseCursor",
    "DepGetQueueProperties",
    "DepCreateCursor",
    "DepDeleteInternalCert",
    "long __stdcall DepGetTmWhereabouts(unsigned long,unsigned char *,unsigned long *)",
    "DepInstanceToFormatName"
  ],
  "mqsec.dll": [
    "MQSec_GetImpersonationObject",
    "MQSec_SetPrivilegeInThread",
    "MQSigCreateCertificate",
    "MQsspi_SetSecuredServerConn",
    "MQSec_MakeAbsoluteSD",
    "MQSec_GetProcessUserSid",
    "MQSec_StorePubKeysInDS",
    "ServerAcceptSecCtx",
    "MQSec_SetSecurityDescriptorDacl",
    "GetSizes",
    "MQSec_MergeSecurityDescriptors",
    "MQSec_AccessCheck",
    "MQSec_GetProcessSid",
    "MQsspi_InitServerAuthntication",
    "MQsspi_MigrateSecureCommFlag",
    "GetClientCredHandleAndInitSecCtx",
    "MQSec_IsUnAuthenticatedUser",
    "MQSec_GetWorldSid",
    "MQSec_GetLocalSystemSid",
    "GetCertificateNames",
    "MQSec_GetUserType",
    "MQSec_IsGuestSid",
    "MQSigHashMessageProperties",
    "MQSec_MakeSelfRelative",
    "MQSec_GetPubKeysFromDS",
    "MQSec_AccessCheckForSelf",
    "MQSec_GetDefaultSecDescriptor",
    "MQSealBuffer",
    "MQSigOpenUserCertStore",
    "MQsspi_GetCaCert",
    "ClientInitSecCtx",
    "MQSec_ConvertSDToNT4Format",
    "MQSec_GetCryptoProvProperty",
    "GetSchannelCaCert",
    "MQSec_PackPublicKey",
    "CheckContextCredStatus",
    "MQSec_StorePubKeys",
    "MQSigCloneCertFromSysStore",
    "MQSec_GetLocalMachineSid",
    "MQSigCloneCertFromReg",
    "MQSec_UnpackPublicKey",
    "MQSec_GetThreadUserSid",
    "FreeContextHandle",
    "MQSec_ConvertSDToNT5Format",
    "MQSec_CopySecurityDescriptor",
    "MQSec_IsAnonymusSid",
    "MQsspi_GetNames",
    "MQUnsealBuffer",
    "MQsspi_UpdateCaConfig",
    "MQSec_GetAnonymousSid",
    "MQSec_CanGenerateAudit",
    "MQSec_IsSystemSid",
    "MQsspi_IsSecuredServerConn",
    "MQSec_AcquireCryptoProvider"
  ],
  "mqsnap.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "mqtrig.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "mqupgrd.dll": [
    "MqCreateMsmqObj",
    "CleanupOnCluster"
  ],
  "mqutil.dll": [
    "public: __thiscall CSort::CSort(unsigned int)",
    "long __stdcall mqrpcUnbindQMService(void * *,unsigned short * *)",
    "MSMQGetQMTypeString",
    "public: void __thiscall CCancelRpc::Init(void)",
    "public: __thiscall COutputReport::~COutputReport(void)",
    "public: __thiscall CCancelRpc::CCancelRpc(class CCancelRpc const &)",
    "public: __thiscall CCancelRpc::~CCancelRpc(void)",
    "public: class CSeqNum const & __thiscall CDSBaseUpdate::GetPrevSeqNum(void)const",
    "public: __thiscall CSort::CSort(class CSort const &)",
    "private: void __thiscall CDSBaseUpdate::DeleteProperty(struct tagPROPVARIANT &)",
    "long __stdcall GetThreadUserSid(unsigned char * *,unsigned long *)",
    "SetFalconServiceName",
    "public: void __thiscall CCancelRpc::CancelRequests(long)",
    "public: void __thiscall CSort::Remove(unsigned int)",
    "public: unsigned long const & __thiscall CColumns::Get(unsigned int)const",
    "public: void __thiscall CRestriction::AddRestriction(unsigned short *,unsigned long,unsigned long,unsigned int)",
    "public: void __thiscall CRestriction::AddRestriction(struct _GUID *,unsigned long,unsigned long,unsigned int)",
    "long __stdcall MQGetCaConfig(unsigned long *,class MQ_CA_CONFIG * *)",
    "long __stdcall MQSetCaConfig(unsigned long,class MQ_CA_CONFIG *)",
    "public: struct tagMQSORTSET * __thiscall CSort::CastToStruct(void)",
    "class CCriticalSection * __stdcall GetRegCS(void)",
    "long __stdcall GetThisServerIpPort(unsigned short *,unsigned long)",
    "public: void __thiscall CColumns::Remove(unsigned int)",
    "public: void __thiscall CDSBaseUpdate::SetPrevSeqNum(class CSeqNum &)",
    "MSMQGetOperatingSystem",
    "public: unsigned long const & __thiscall CSortKey::GetProperty(void)const",
    "GetFalconKeyValue",
    "public: unsigned int __thiscall CColumns::Count(void)const",
    "private: static unsigned long __stdcall CCancelRpc::CancelThread(void *)",
    "public: void __thiscall CSort::`default constructor closure'(void)",
    "long __stdcall HashMessageProperties(unsigned long,unsigned char const *,unsigned long,unsigned long,unsigned char const *,unsigned long,unsigned short const *,unsigned long,struct QUEUE_FORMAT const *,struct QUEUE_FORMAT const *)",
    "long __stdcall HashProperties(unsigned long,unsigned long,unsigned long *,struct tagPROPVARIANT *)",
    "public: unsigned char __thiscall CDSBaseUpdate::GetCommand(void)",
    "long __stdcall DeleteFalconKeyValue(unsigned short const *)",
    "public: class CSortKey const & __thiscall CSort::Get(unsigned int)const",
    "public: void __thiscall CRestriction::AddRestriction(class CMQVariant const &,unsigned long,unsigned long,unsigned int)",
    "public: __thiscall CDSBaseUpdate::CDSBaseUpdate(void)",
    "public: void __thiscall COutputReport::KeepErrorHistory(enum enumLogComponents,unsigned short const *,unsigned short,long)",
    "private: unsigned short __thiscall COutputReport::GetSeverityCode(unsigned long)",
    "public: void __thiscall CColumns::`default constructor closure'(void)",
    "mqrpcSetLocalRpcMutualAuth",
    "MQUInitGlobalScurityVars",
    "private: long __thiscall CDSBaseUpdate::CopyProperty(struct tagPROPVARIANT &,struct tagPROPVARIANT *)",
    "public: void __thiscall COutputReport::SetDbgInst(struct HINSTANCE__ *)",
    "void __stdcall MQFreeCaConfig(class MQ_CA_CONFIG *)",
    "public: void __thiscall CRestriction::AddRestriction(struct tagCALPWSTR *,unsigned long,unsigned long,unsigned int)",
    "public: void __thiscall CCancelRpc::Remove(void *)",
    "public: void __thiscall CRestriction::SetChild(class CPropertyRestriction const &,unsigned int)",
    "public: void __thiscall CRestriction::AddRestriction(unsigned long,unsigned long,unsigned long,unsigned int)",
    "public: long __thiscall CDSBaseUpdate::Init(unsigned char const *,unsigned long *,int)",
    "public: void __thiscall CRestriction::AddChild(class CPropertyRestriction const &)",
    "public: __thiscall CDSBaseUpdate::CDSBaseUpdate(class CDSBaseUpdate const &)",
    "class COutputReport Report",
    "public: long __thiscall CDSBaseUpdate::Init(struct _GUID const *,class CSeqNum const &,class CSeqNum const &,class CSeqNum const &,int,unsigned char,unsigned long,struct _GUID const *,unsigned long,unsigned long *,struct tagPROPVARIANT *)",
    "long __stdcall mqrpcBindQMService(unsigned short *,unsigned long,unsigned short *,enum _tagMQRPC_AUTHENTICATION_LEVEL *,int *,void * *,unsigned long,unsigned long (__stdcall*)(void *,unsigned long),int *,unsigned long)",
    "public: void __thiscall CSortKey::SetProperty(unsigned long const &)",
    "public: unsigned int __thiscall CRestriction::Count(void)const",
    "public: void __thiscall CRestriction::AddRestriction(struct tagBLOB &,unsigned long,unsigned long,unsigned int)",
    "public: __thiscall COutputReport::COutputReport(void)",
    "SetFalconKeyValue",
    "unsigned long __stdcall mqrpcGetLocalCallPID(void *)",
    "long __stdcall XactGetDTC(struct IUnknown * *,unsigned long *,unsigned char * *)",
    "class CCancelRpc g_CancelRpc",
    "private: void __thiscall COutputReport::UpdateRegistry(unsigned short const *)",
    "public: void __thiscall CRestriction::AddRestriction(long,unsigned long,unsigned long,unsigned int)",
    "public: void __thiscall CSortKey::SetOrder(unsigned long const &)",
    "public: __thiscall CRestriction::~CRestriction(void)",
    "public: struct tagMQRESTRICTION * __thiscall CRestriction::CastToStruct(void)",
    "public: __thiscall CSortKey::CSortKey(void)",
    "public: long __thiscall CDSBaseUpdate::Serialize(unsigned char *,unsigned long *,int)",
    "public: __thiscall CColumns::CColumns(unsigned int)",
    "public: unsigned int __thiscall CSort::Count(void)const",
    "public: unsigned long __thiscall CDSBaseUpdate::GetObjectType(void)",
    "public: struct tagMQCOLUMNSET * __thiscall CColumns::CastToStruct(void)",
    "public: void __thiscall CCancelRpc::Add(void *,long)",
    "SetupIsLocalSystemCluster",
    "GetFalconSectionName",
    "bool __stdcall IsLocalSystemCluster(void)",
    "public: void __thiscall CSort::Add(unsigned long const &,unsigned long)",
    "long __stdcall GetComputerDnsNameInternal(unsigned short *,unsigned long *)",
    "public: void __thiscall CRestriction::AddRestriction(short,unsigned long,unsigned long,unsigned int)",
    "unsigned long __stdcall GetFalconServiceName(unsigned short *,unsigned long)",
    "public: void __thiscall CSort::Add(class CSortKey const &)",
    "public: void __thiscall CRestriction::AddRestriction(unsigned char,unsigned long,unsigned long,unsigned int)",
    "public: __thiscall CRestriction::CRestriction(unsigned int)",
    "long __stdcall MQUGetAcName(unsigned short *)",
    "public: class CCancelRpc & __thiscall CCancelRpc::operator=(class CCancelRpc const &)",
    "private: long __thiscall CDSBaseUpdate::InitProperty(unsigned char const *,unsigned long *,unsigned long,struct tagPROPVARIANT &)",
    "public: void __cdecl COutputReport::ReportStringMsg(unsigned short,unsigned long,unsigned short,...)",
    "public: __thiscall CSortKey::CSortKey(unsigned long const &,unsigned long)",
    "public: struct _GUID * __thiscall CDSBaseUpdate::GetGuidIdentifier(void)",
    "public: struct tagPROPVARIANT * __thiscall CDSBaseUpdate::GetVars(void)",
    "void __stdcall ComposeLocalEndPoint(unsigned short const *,unsigned short * *)",
    "public: unsigned long __thiscall CSortKey::GetOrder(void)const",
    "int __stdcall mqrpcIsLocalCall(void *)",
    "public: class CDSBaseUpdate & __thiscall CDSBaseUpdate::operator=(class CDSBaseUpdate const &)",
    "public: void __thiscall CRestriction::`default constructor closure'(void)",
    "private: void __thiscall CCancelRpc::ProcessEvents(void)",
    "public: void __thiscall CCancelRpc::ShutDownCancelThread(void)",
    "public: class COutputReport & __thiscall COutputReport::operator=(class COutputReport const &)",
    "ShutDownDebugWindow",
    "private: void __thiscall CRestriction::Grow(void)",
    "public: __thiscall CColumns::CColumns(class CColumns const &)",
    "public: __thiscall CColumns::~CColumns(void)",
    "public: struct _GUID const * __thiscall CDSBaseUpdate::GetMasterId(void)",
    "public: class CSortKey & __thiscall CSortKey::operator=(class CSortKey const &)",
    "public: unsigned long * __thiscall CDSBaseUpdate::GetProps(void)",
    "private: long __thiscall CDSBaseUpdate::SerializeProperty(struct tagPROPVARIANT &,unsigned char *,unsigned long *)",
    "public: void __thiscall CRestriction::AddRestriction(struct tagCACLSID *,unsigned long,unsigned long,unsigned int)",
    "public: __thiscall CCancelRpc::CCancelRpc(void)",
    "public: __thiscall CRestriction::CRestriction(class CRestriction const &)",
    "long __stdcall GetComputerNameInternal(unsigned short *,unsigned long *)",
    "void * g_pWorldSid",
    "public: unsigned short * __thiscall CDSBaseUpdate::GetPathName(void)",
    "public: class CPropertyRestriction const & __thiscall CRestriction::GetChild(unsigned int)const",
    "public: unsigned char __thiscall CDSBaseUpdate::getNumOfProps(void)",
    "public: void __thiscall CColumns::Add(unsigned long const &)",
    "public: class CRestriction & __thiscall CRestriction::operator=(class CRestriction const &)",
    "unsigned int __stdcall UnalignedWcslen(unsigned short const *)",
    "long __stdcall GetFalconKey(unsigned short const *,struct HKEY__ * *)",
    "public: class CSeqNum const & __thiscall CDSBaseUpdate::GetPurgeSeqNum(void)const",
    "public: class CSeqNum const & __thiscall CDSBaseUpdate::GetSeqNum(void)const",
    "public: void __thiscall COutputReport::KeepEventHistory(unsigned long)",
    "public: long __thiscall CDSBaseUpdate::GetSerializeSize(unsigned long *)",
    "public: void __thiscall COutputReport::ReportMsg(unsigned long,unsigned long,void *,unsigned short,unsigned short const * *,unsigned short)",
    "class CHCryptProv g_hProvVer",
    "public: long __thiscall CDSBaseUpdate::Init(struct _GUID const *,class CSeqNum const &,class CSeqNum const &,class CSeqNum const &,int,unsigned char,unsigned long,unsigned short *,unsigned long,unsigned long *,struct tagPROPVARIANT *)",
    "public: __thiscall CSortKey::~CSortKey(void)",
    "public: __thiscall CDSBaseUpdate::~CDSBaseUpdate(void)",
    "int __stdcall mqrpcIsAuthenticatedCall(void *)",
    "public: __thiscall CSort::~CSort(void)",
    "MQGetResourceHandle"
  ],
  "msaatext.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "msacm32.dll": [
    "acmFormatTagDetailsW",
    "acmStreamUnprepareHeader",
    "XRegThunkEntry",
    "acmFilterTagEnumA",
    "acmDriverRemove",
    "acmFilterTagDetailsW",
    "acmFilterTagEnumW",
    "acmGetVersion",
    "acmDriverDetailsW",
    "acmDriverClose",
    "acmDriverEnum",
    "acmDriverPriority",
    "acmStreamPrepareHeader",
    "acmFilterDetailsA",
    "acmStreamReset",
    "acmFormatEnumA",
    "acmDriverMessage",
    "acmFilterChooseA",
    "acmFilterEnumA",
    "acmFormatTagEnumA",
    "acmDriverAddW",
    "acmFilterChooseW",
    "acmDriverDetailsA",
    "acmFilterTagDetailsA",
    "acmFormatTagDetailsA",
    "acmDriverOpen",
    "acmFormatChooseW",
    "acmFormatChooseA",
    "acmMetrics",
    "acmMessage32",
    "acmFilterEnumW",
    "acmStreamOpen",
    "acmStreamSize",
    "acmStreamMessage",
    "acmFormatTagEnumW",
    "acmFilterDetailsW",
    "acmFormatDetailsA",
    "acmStreamConvert",
    "acmFormatSuggest",
    "acmDriverAddA",
    "acmDriverID",
    "acmFormatDetailsW",
    "acmFormatEnumW",
    "acmStreamClose"
  ],
  "msafd.dll": [
    "WSPStartup"
  ],
  "msapsspc.dll": [
    "MakeSignature",
    "SspcCreateSspiReg",
    "FreeContextBuffer",
    "InitSecurityInterfaceA",
    "QuerySecurityPackageInfoA",
    "UnsealMessage",
    "SealMessage",
    "FreeCredentialsHandle",
    "VerifySignature",
    "AcquireCredentialsHandleA",
    "DeleteSecurityContext",
    "InitSecurityInterfaceW",
    "AcquireCredentialsHandleW",
    "CleanupCredentialCache",
    "ApplyControlToken",
    "InitializeSecurityContextA",
    "QueryContextAttributesW",
    "QueryContextAttributesA",
    "EnumerateSecurityPackagesW",
    "InitializeSecurityContextW",
    "QuerySecurityPackageInfoW",
    "EnumerateSecurityPackagesA",
    "CompleteAuthToken"
  ],
  "msasn1.dll": [
    "ASN1PERDecUnsignedShort",
    "ASN1BEREncEndOfContents",
    "ASN1BEREncGeneralizedTime",
    "ASN1PERDecSimpleChoiceEx",
    "ASN1_GetEncoderOption",
    "ASN1BERDecGeneralizedTime",
    "ASN1PERDecZeroChar16String",
    "ASN1BERDecS16Val",
    "ASN1BERDecZeroChar32String",
    "ASN1PERDecFragmentedZeroCharString",
    "ASN1PERDecU32Val",
    "ASN1PEREncZero",
    "ASN1BEREoid_free",
    "ASN1_CloseModule",
    "ASN1PERDecSkipNormallySmallExtensionFragmented",
    "ASN1_FreeEncoded",
    "ASN1PERDecAlignment",
    "ASN1PERDecSkipNormallySmallExtension",
    "ASN1PEREncNormallySmall",
    "ASN1BERDecS32Val",
    "ASN1PERDecNormallySmallExtension",
    "ASN1BEREncBool",
    "ASN1_SetEncoderOption",
    "ASN1BERDecCharString",
    "ASN1PERDecFragmentedZeroTableChar32String",
    "ASN1objectidentifier_cmp",
    "ASN1PEREncFragmentedTableCharString",
    "ASN1char32string_free",
    "ASN1Free",
    "ASN1PERDecFragmentedUIntx",
    "ASN1PERDecZeroTableChar16String",
    "ASN1BEREncEoid",
    "ASN1EncSetError",
    "ASN1PERDecN32Val",
    "ASN1bitstring_free",
    "ASN1PERDecChar16String",
    "ASN1PEREncOctetString_NoSize",
    "ASN1BERDecObjectIdentifier2",
    "ASN1BERDecTag",
    "ASN1CEREncGeneralizedTime",
    "ASN1PEREncBit",
    "ASN1PEREncUTCTime",
    "ASN1PERDecSkipNormallySmall",
    "ASN1PERFreeSeqOf",
    "ASN1intx_uoctets",
    "ASN1PERDecU8Val",
    "ASN1PEREncOctets",
    "ASN1BEREncDouble",
    "ASN1PERDecZeroTableCharString",
    "ASN1_GetDecoderOption",
    "ASN1BEREncCheck",
    "ASN1BEREncBitString",
    "ASN1CEREncChar32String",
    "ASN1PERDecExtension",
    "ASN1DecDone",
    "ASN1PEREncAlignment",
    "ASN1PEREncExtensionBitSet",
    "ASN1PERDecCharString",
    "ASN1PEREncInteger",
    "ASN1CEREncNewBlkElement",
    "ASN1BERDecExplicitTag",
    "ASN1PEREncSeqOf_NoSize",
    "ASN1CEREncChar16String",
    "ASN1PERDecFragmentedTableChar32String",
    "ASN1PEREncFragmentedChar32String",
    "ASN1PEREncBitVal",
    "ASN1bitstring_cmp",
    "ASN1char32string_cmp",
    "ASN1BEREncUTCTime",
    "ASN1PERDecTableCharString",
    "ASN1BERDecZeroChar16String",
    "ASN1PERDecSkipFragmented",
    "ASN1PEREncFragmentedCharString",
    "ASN1BEREncNull",
    "ASN1PERDecObjectIdentifier",
    "ASN1PERDecInteger",
    "ASN1PERDecComplexChoice",
    "ASN1PERDecS32Val",
    "ASN1BEREncOpenType",
    "ASN1PERDecSXVal",
    "ASN1PERDecZeroTableChar32String",
    "ASN1PEREncFragmented",
    "ASN1PEREncFragmentedTableChar32String",
    "ASN1PERDecOctetString_VarSize",
    "ASN1PEREncBits",
    "ASN1utf8string_free",
    "ASN1CEREncOctetString",
    "ASN1PEREncBoolean",
    "ASN1PEREncFragmentedTableChar16String",
    "ASN1PERDecS16Val",
    "ASN1PERDecFragmentedChar16String",
    "ASN1PERDecFragmentedZeroTableChar16String",
    "ASN1CEREncBeginBlk",
    "ASN1CEREncBitString",
    "ASN1BEREncSX",
    "ASN1CEREncMultibyteString",
    "ASN1PERDecSimpleChoice",
    "ASN1PERDecOctetString_FixedSizeEx",
    "ASN1BEREncRemoveZeroBits",
    "ASN1PEREncNormallySmallBits",
    "ASN1PERDecZeroChar32String",
    "ASN1PEREncSeqOf_VarSize",
    "ASN1ztcharstring_cmp",
    "ASN1PERDecFragmentedCharString",
    "ASN1_Encode",
    "ASN1PEREncRemoveZeroBits",
    "ASN1BEREncOctetString",
    "ASN1PERDecFlush",
    "ASN1BERDecEndOfContents",
    "ASN1PEREncOctetString_FixedSizeEx",
    "ASN1PERDecDouble",
    "ASN1_CreateEncoder",
    "ASN1PEREncTableChar16String",
    "ASN1_Decode",
    "ASN1intx_setuint32",
    "ASN1PERDecCharStringNoAlloc",
    "ASN1BEREncTag",
    "ASN1ztchar16string_free",
    "ASN1CEREncCharString",
    "ASN1BEREncExplicitTag",
    "ASN1BERDecUTF8String",
    "ASN1BERDotVal2Eoid",
    "ASN1PERDecS8Val",
    "ASN1PERDecSeqOf_VarSize",
    "ASN1PERDecZeroTableCharStringNoAlloc",
    "ASN1charstring_cmp",
    "ASN1BERDecMultibyteString",
    "ASN1PERDecTableCharStringNoAlloc",
    "ASN1utctime_cmp",
    "ASN1PEREncChar32String",
    "ASN1DecAlloc",
    "ASN1PERDecFragmentedTableChar16String",
    "ASN1PERDecFragmentedZeroTableCharString",
    "ASN1objectidentifier_free",
    "ASN1BEREncObjectIdentifier2",
    "ASN1CEREncZeroMultibyteString",
    "ASN1PERDecN16Val",
    "ASN1PERDecUnsignedInteger",
    "ASN1DecRealloc",
    "ASN1BERDecBitString",
    "ASN1PERDecBits",
    "ASN1BERDecChar32String",
    "ASN1PERDecFragmented",
    "ASN1BERDecPeekTag",
    "ASN1CEREncEndBlk",
    "ASN1PERDecOctetString_NoSize",
    "ASN1PEREncCharString",
    "ASN1_CloseEncoder2",
    "ASN1BERDecSXVal",
    "ASN1PERDecBit",
    "ASN1PERDecFragmentedTableCharString",
    "ASN1PEREncFragmentedChar16String",
    "ASN1intx2int32",
    "ASN1PEREncSimpleChoiceEx",
    "ASN1PEREncChar16String",
    "ASN1PEREncUnsignedShort",
    "ASN1PEREncTableChar32String",
    "ASN1intx2uint32",
    "ASN1CEREncUTCTime",
    "ASN1PERDecMultibyteString",
    "ASN1BERDecOpenType2",
    "ASN1CEREncFlushBlkElement",
    "ASN1PERDecFragmentedZeroChar32String",
    "ASN1PEREncCheckExtensions",
    "ASN1BERDecOpenType",
    "ASN1PEREncOctetString_VarSizeEx",
    "ASN1BERDecU8Val",
    "ASN1PERDecU16Val",
    "ASN1PEREncSimpleChoice",
    "ASN1intx_sub",
    "ASN1uint32_uoctets",
    "ASN1PEREncTableCharString",
    "ASN1BEREncFlush",
    "ASN1PEREncFlush",
    "ASN1_SetDecoderOption",
    "ASN1objectidentifier2_cmp",
    "ASN1octetstring_cmp",
    "ASN1BERDecBool",
    "ASN1PERDecOctetString_VarSizeEx",
    "ASN1BERDecOctetString2",
    "ASN1BERDecOctetString",
    "ASN1PERDecObjectIdentifier2",
    "ASN1char16string_cmp",
    "ASN1PERDecGeneralizedTime",
    "ASN1BEREncChar16String",
    "ASN1BERDecObjectIdentifier",
    "ASN1PEREncDouble",
    "ASN1intx_free",
    "ASN1BERDecU32Val",
    "ASN1PEREncFragmentedIntx",
    "ASN1_CreateDecoderEx",
    "ASN1_CreateModule",
    "ASN1PERDecBoolean",
    "ASN1PERDecTableChar32String",
    "ASN1DecSetError",
    "ASN1BERDecS8Val",
    "ASN1PERDecFragmentedChar32String",
    "ASN1BEREncObjectIdentifier",
    "ASN1PERDecUTCTime",
    "ASN1_CloseDecoder",
    "ASN1charstring_free",
    "ASN1intx_add",
    "ASN1PERDecChar32String",
    "ASN1PEREncComplexChoice",
    "ASN1ztchar32string_free",
    "ASN1PERDecFragmentedExtension",
    "ASN1BERDecChar16String",
    "ASN1PERDecZeroCharStringNoAlloc",
    "ASN1BEREncZeroMultibyteString",
    "ASN1BERDecLength",
    "ASN1EncDone",
    "ASN1PERDecUXVal",
    "ASN1BERDecNull",
    "ASN1_FreeDecoded",
    "ASN1PEREncObjectIdentifier2",
    "ASN1BERDecEoid",
    "ASN1PEREncFlushFragmentedToParent",
    "ASN1BERDecBitString2",
    "ASN1_CreateDecoder",
    "ASN1octetstring_free",
    "ASN1open_cmp",
    "ASN1BERDecZeroCharString",
    "ASN1PEREncOctetString_VarSize",
    "ASN1BEREncChar32String",
    "ASN1ztcharstring_free",
    "ASN1PERDecSeqOf_NoSize",
    "ASN1PERDecSkipBits",
    "ASN1PERDecTableChar16String",
    "ASN1PEREncFragmentedUIntx",
    "ASN1ztchar16string_cmp",
    "ASN1char16string_free",
    "ASN1BERDecDouble",
    "ASN1PERDecFragmentedLength",
    "ASN1PEREncUnsignedInteger",
    "ASN1BEREncLength",
    "ASN1PEREncExtensionBitClear",
    "ASN1DecAbort",
    "ASN1BERDecU16Val",
    "ASN1BERDecCheck",
    "ASN1PERDecFragmentedZeroChar16String",
    "ASN1PEREncFragmentedLength",
    "ASN1BERDecNotEndOfContents",
    "ASN1PEREncMultibyteString",
    "ASN1PERDecN8Val",
    "ASN1PEREncBitIntx",
    "ASN1BEREncCharString",
    "ASN1PEREncOctetString_FixedSize",
    "ASN1BEREoid2DotVal",
    "ASN1BEREncU32",
    "ASN1generalizedtime_cmp",
    "ASN1intxisuint32",
    "ASN1PEREncGeneralizedTime",
    "ASN1PERDecOctetString_FixedSize",
    "ASN1BERDecUTCTime",
    "ASN1EncAbort",
    "ASN1PEREncObjectIdentifier",
    "ASN1_CloseEncoder",
    "ASN1PERDecFragmentedIntx",
    "ASN1open_free",
    "ASN1BERDecFlush",
    "ASN1BERDecZeroMultibyteString",
    "ASN1BERDecSkip",
    "ASN1BEREncMultibyteString",
    "ASN1BEREncS32",
    "ASN1BEREncUTF8String",
    "ASN1PERDecZeroCharString"
  ],
  "msaudite.dll": "No exports",
  "mscat32.dll": [
    "CryptCATGetMemberInfo",
    "CryptCATGetCatAttrInfo",
    "CryptCATCDFEnumMembers",
    "CryptCATAdminCalcHashFromFileHandle",
    "CryptCATCDFEnumAttributes",
    "CryptCATEnumerateCatAttr",
    "CryptCATPersistStore",
    "CryptCATPutMemberInfo",
    "CryptCATEnumerateAttr",
    "CryptCATGetAttrInfo",
    "CryptCATVerifyMember",
    "MsCatFreeHashTag",
    "CryptCATAdminAcquireContext",
    "IsCatalogFile",
    "DllRegisterServer",
    "CryptCATClose",
    "CryptCATPutCatAttrInfo",
    "MsCatConstructHashTag",
    "CryptCATCDFEnumAttributesWithCDFTag",
    "CryptCATAdminAddCatalog",
    "CryptCATStoreFromHandle",
    "CryptCATEnumerateMember",
    "CryptCATOpen",
    "CryptCATCDFEnumCatAttributes",
    "CryptCATAdminReleaseContext",
    "CryptCATAdminReleaseCatalogContext",
    "CryptCATHandleFromStore",
    "CryptCATCDFClose",
    "CryptCATCDFEnumMembersByCDFTag",
    "CryptCATCDFEnumMembersByCDFTagEx",
    "CryptCATCDFOpen",
    "CryptCATPutAttrInfo",
    "CryptCATCatalogInfoFromContext",
    "CryptCATAdminEnumCatalogFromHash",
    "DllUnregisterServer",
    "CatalogCompactHashDatabase"
  ],
  "mscms.dll": [
    "SetColorProfileElement",
    "RegisterCMMA",
    "UnregisterCMMW",
    "SetColorProfileElementReference",
    "OpenColorProfileW",
    "CreateMultiProfileTransform",
    "CreateProfileFromLogColorSpaceA",
    "SetStandardColorSpaceProfileW",
    "ConvertIndexToColorName",
    "TranslateColors",
    "CreateProfileFromLogColorSpaceW",
    "SetColorProfileElementSize",
    "SetColorProfileHeader",
    "GetCountColorProfileElements",
    "GetStandardColorSpaceProfileW",
    "CreateColorTransformW",
    "AssociateColorProfileWithDeviceA",
    "GetStandardColorSpaceProfileA",
    "IsColorProfileTagPresent",
    "CheckColors",
    "GetColorProfileFromHandle",
    "OpenColorProfileA",
    "InternalGetPS2CSAFromLCS",
    "InternalGetPS2PreviewCRD",
    "GetCMMInfo",
    "GetPS2ColorSpaceArray",
    "AssociateColorProfileWithDeviceW",
    "RegisterCMMW",
    "CheckBitmapBits",
    "SetStandardColorSpaceProfileA",
    "GetColorProfileElement",
    "GetPS2ColorRenderingDictionary",
    "InstallColorProfileW",
    "InstallColorProfileA",
    "DeleteColorTransform",
    "TranslateBitmapBits",
    "InternalGetPS2ColorRenderingDictionary",
    "CloseColorProfile",
    "GetColorProfileHeader",
    "CreateDeviceLinkProfile",
    "InternalGetDeviceConfig",
    "UnregisterCMMA",
    "SpoolerCopyFileEvent",
    "UninstallColorProfileA",
    "ConvertColorNameToIndex",
    "EnumColorProfilesW",
    "CreateColorTransformA",
    "GenerateCopyFilePaths",
    "DisassociateColorProfileFromDeviceW",
    "InternalSetDeviceConfig",
    "EnumColorProfilesA",
    "SelectCMM",
    "InternalGetPS2ColorSpaceArray",
    "GetColorDirectoryA",
    "UninstallColorProfileW",
    "GetPS2ColorRenderingIntent",
    "IsColorProfileValid",
    "DisassociateColorProfileFromDeviceA",
    "GetColorDirectoryW",
    "GetNamedProfileInfo",
    "GetColorProfileElementTag"
  ],
  "msconf.dll": [
    "NewMediaPhone",
    "CleanupNetMeetingDispDriverW",
    "CallToProtocolHandler",
    "VerifyUserInfo",
    "DllCanUnloadNow",
    "OpenConfLink",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllGetVersion",
    "DllUnregisterServer"
  ],
  "mscpx32r.dll": "No exports",
  "mscpxl32.dll": [
    "ConfigTranslator",
    "SQLDriverToDataSource",
    "SQLDataSourceToDriver",
    "ConfigureDlgProc"
  ],
  "msctf.dll": [
    "TF_IsCtfmonRunning",
    "TF_UnregisterLangBarAddIn",
    "TF_GetInputScope",
    "TF_GetMlngIconIndex",
    "TF_ClearLangBarAddIns",
    "SetInputScopeXML",
    "TF_RegisterLangBarAddIn",
    "TF_DllDetachInOther",
    "TF_CreateThreadMgr",
    "TF_GetLangIcon",
    "TF_CreateCategoryMgr",
    "TF_RunInputCPL",
    "SetInputScope",
    "TF_CUASAppFix",
    "TF_IsFullScreenWindowAcitvated",
    "DllRegisterServer",
    "TF_UninitSystem",
    "TF_GetGlobalCompartment",
    "SetInputScopes",
    "TF_CheckThreadInputIdle",
    "TF_GetMlngHKL",
    "TF_InvalidAssemblyListCache",
    "DllGetClassObject",
    "TF_InitSystem",
    "TF_CreateDisplayAttributeMgr",
    "TF_GetThreadMgr",
    "TF_InatExtractIcon",
    "TF_InvalidAssemblyListCacheIfExist",
    "TF_IsInMarshaling",
    "TF_InitMlngInfo",
    "TF_GetThreadFlags",
    "TF_CreateInputProcessorProfiles",
    "TF_MlngInfoCount",
    "TF_CreateLangBarMgr",
    "DllCanUnloadNow",
    "TF_CreateLangBarItemMgr",
    "DllUnregisterServer",
    "TF_PostAllThreadMsg",
    "TF_CreateCicLoadMutex"
  ],
  "msctfp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msdadiag.dll": [
    "DllBidEntryPoint"
  ],
  "msdart.dll": [
    "private: void __thiscall CLKRLinearHashTable::_InsertThisIntoGlobalList(void)",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<4,1,1,2,3,3>::LockType(void)",
    "public: void __thiscall CCritSec::ReadOrWriteUnlock(bool)",
    "public: unsigned long __thiscall CLKRHashTable::DeleteIf(enum LK_PREDICATE (__stdcall*)(void const *,void *),void *)",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::InsertRecord(void const *,bool)",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<1,1,3,1,3,2>::Recursion(void)",
    "public: static void __stdcall CFakeLock::SetDefaultSpinCount(unsigned short)",
    "public: void __thiscall CReaderWriterLock::ConvertSharedToExclusive(void)",
    "public: bool __thiscall CLKRHashTable::IsWriteLocked(void)const",
    "public: bool __thiscall CFakeLock::SetSpinCount(unsigned short)",
    "public: static void __stdcall CReaderWriterLock3::SetDefaultSpinAdjustmentFactor(double)",
    "private: bool __thiscall CReaderWriterLock::_TryWriteLock(void)",
    "mpMalloc",
    "GetTextExtentPointIX",
    "private: static bool __stdcall CLKRHashTable::_FreeSubTable(class CLKRLinearHashTable *)",
    "public: bool __thiscall CReaderWriterLock3::ReadOrWriteLock(void)",
    "public: bool __thiscall CCritSec::IsWriteUnlocked(void)const",
    "private: void __thiscall CReaderWriterLock3::_ReadLockSpin(enum CReaderWriterLock3::SPIN_TYPE)",
    "public: void __thiscall CReaderWriterLock3::WriteLock(void)",
    "public: void __thiscall CReaderWriterLock3::ReadUnlock(void)",
    "SetDlgItemTextI",
    "protected: static double CReaderWriterLock2::sm_dblDfltSpinAdjFctr",
    "public: static long __stdcall CLKRHashTableStats::BucketSize(long)",
    "public: void __thiscall CSpinLock::WriteLock(void)",
    "private: static long __stdcall CSmallSpinLock::_CurrentThreadId(void)",
    "public: void __thiscall CReaderWriterLock::ReadLock(void)",
    "_IsValidString@8",
    "public: int __thiscall CEXAutoBackupFile::fHaveBackup(void)",
    "public: __thiscall CFakeLock::~CFakeLock(void)",
    "public: static int __cdecl CMdVersionInfo::IsWin98(void)",
    "public: static double __stdcall CCritSec::GetDefaultSpinAdjustmentFactor(void)",
    "public: void __thiscall CReaderWriterLock2::ConvertSharedToExclusive(void)",
    "public: class CListEntry * __thiscall CLockedDoubleList::First(void)",
    "private: bool __thiscall CReaderWriterLock3::_TryWriteLock(long)",
    "public: void __thiscall CLKRLinearHashTable::Print(void)const",
    "public: bool __thiscall CCritSec::SetSpinCount(unsigned short)",
    "LoadCursorI",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<3,1,1,1,1,1>::MutexType(void)",
    "PostMessageI",
    "public: void __thiscall CLKRLinearHashTable::SetTableLockSpinCount(unsigned short)",
    "public: void __thiscall CFakeLock::ReadLock(void)",
    "public: static int __cdecl CMdVersionInfo::IsWin95(void)",
    "public: static char const * __stdcall CLKRLinearHashTable::ClassName(void)",
    "public: __thiscall CReaderWriterLock3::~CReaderWriterLock3(void)",
    "public: bool __thiscall CFakeLock::IsWriteUnlocked(void)const",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<1,1,3,1,3,2>::MutexType(void)",
    "public: bool __thiscall CCritSec::IsReadLocked(void)const",
    "public: long __thiscall CEXAutoBackupFile::UndoBackup(void)",
    "private: bool __thiscall CLKRLinearHashTable::_DeleteNode(class CLKRLinearHashTable::CBucket *,class CLKRLinearHashTable::CNodeClump * &,class CLKRLinearHashTable::CNodeClump * &,int &)",
    "CreateFileI",
    "public: __thiscall CCritSec::CCritSec(void)",
    "public: void __thiscall CLockedDoubleList::Unlock(void)",
    "public: void __thiscall CSpinLock::WriteUnlock(void)",
    "public: bool __thiscall CReaderWriterLock2::IsWriteUnlocked(void)const",
    "public: unsigned short __thiscall CSpinLock::GetSpinCount(void)const",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_InitializeIterator(class CLKRLinearHashTable::CIterator *)",
    "private: unsigned long __thiscall CLKRLinearHashTable::_BucketAddress(unsigned long)const",
    "public: class CSingleListEntry * __thiscall CSingleList::Pop(void)",
    "public: bool __thiscall CFakeLock::ReadOrWriteLock(void)",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<7,2,1,1,3,2>::LockType(void)",
    "public: bool __thiscall CSpinLock::IsWriteLocked(void)const",
    "long const * const `public: static long const * __stdcall CLKRHashTableStats::BucketSizes(void)'::`2'::s_aBucketSizes",
    "public: unsigned long __thiscall CLKRLinearHashTable::DeleteIf(enum LK_PREDICATE (__stdcall*)(void const *,void *),void *)",
    "private: unsigned long __thiscall CLKRLinearHashTable::_DeleteIf(enum LK_PREDICATE (__stdcall*)(void const *,void *),void *,enum LK_PREDICATE &)",
    "private: static bool __stdcall CLKRLinearHashTable::_FreeSegmentDirectory(class CLKRLinearHashTable::CDirEntry *)",
    "public: class CReaderWriterLock3 & __thiscall CReaderWriterLock3::operator=(class CReaderWriterLock3 const &)",
    "public: static int __cdecl CMdVersionInfo::IsWinNT4(void)",
    "public: bool __thiscall CSpinLock::IsReadLocked(void)const",
    "public: bool __thiscall CSmallSpinLock::IsWriteLocked(void)const",
    "public: unsigned long __thiscall CLKRLinearHashTable::MaxSize(void)const",
    "public: void __thiscall CLockedDoubleList::RemoveEntry(class CListEntry * const)",
    "private: void __thiscall CReaderWriterLock::_WriteLockSpin(void)",
    "public: static unsigned short __stdcall CFakeLock::GetDefaultSpinCount(void)",
    "public: void __thiscall CLKRLinearHashTable::Clear(void)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_Contract(void)",
    "private: static class CLKRLinearHashTable::CNodeClump * __stdcall CLKRLinearHashTable::_AllocateNodeClump(void)",
    "public: bool __thiscall CLKRHashTable::IsUsable(void)const",
    "public: void __thiscall CFakeLock::WriteUnlock(void)",
    "public: void __thiscall CSpinLock::ConvertSharedToExclusive(void)",
    "public: bool __thiscall CCritSec::TryReadLock(void)",
    "public: void __thiscall CReaderWriterLock2::ReadUnlock(void)",
    "PropertySheetI",
    "GetDiskFreeSpaceExI",
    "GetDlgItemTextI",
    "private: void __thiscall CReaderWriterLock::_ReadLockSpin(void)",
    "GetTempFileNameI",
    "public: static char const * __stdcall CReaderWriterLock2::ClassName(void)",
    "public: static int __cdecl CMdVersionInfo::IsWin9x(void)",
    "public: void __thiscall CReaderWriterLock3::ReadLock(void)",
    "public: static void __stdcall CReaderWriterLock::SetDefaultSpinAdjustmentFactor(double)",
    "public: static double __stdcall CReaderWriterLock3::GetDefaultSpinAdjustmentFactor(void)",
    "_OnUnicodeSystem@0",
    "private: void __thiscall CReaderWriterLock3::_LockSpin(enum CReaderWriterLock3::SPIN_TYPE)",
    "char * __stdcall DslW2OHelper(unsigned short const *,char *,int)",
    "public: bool __thiscall CLKRHashTable::IsValid(void)const",
    "public: class CListEntry * __thiscall CDoubleList::RemoveHead(void)",
    "public: static double __stdcall CSpinLock::GetDefaultSpinAdjustmentFactor(void)",
    "private: bool __thiscall CReaderWriterLock2::_TryReadLock(void)",
    "public: long __thiscall CEXAutoBackupFile::BackupFile(unsigned short const *)",
    "private: bool __thiscall CReaderWriterLock3::_TryReadLockRecursive(void)",
    "CreateWindowExI",
    "public: bool __thiscall CReaderWriterLock3::IsWriteUnlocked(void)const",
    "SetIUMS",
    "public: void __thiscall CLKRHashTable::SetTableLockSpinCount(unsigned short)",
    "GetVersionExI",
    "public: class CListEntry * __thiscall CLockedDoubleList::RemoveTail(void)",
    "public: int __thiscall CLKRLinearHashTable::NumSubTables(void)const",
    "private: static unsigned long __stdcall CLKRLinearHashTable::_H1(unsigned long,unsigned long)",
    "public: __thiscall CLKRLinearHashTable::~CLKRLinearHashTable(void)",
    "public: void __thiscall CLKRLinearHashTable::WriteUnlock(void)const",
    "public: bool __thiscall CReaderWriterLock2::IsReadLocked(void)const",
    "CreateDirectoryI",
    "public: bool __thiscall CSpinLock::TryReadLock(void)",
    "public: bool __thiscall CSmallSpinLock::TryReadLock(void)",
    "protected: static double CSmallSpinLock::sm_dblDfltSpinAdjFctr",
    "public: bool __thiscall CReaderWriterLock3::IsWriteLocked(void)const",
    "public: bool __thiscall CReaderWriterLock::TryWriteLock(void)",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::IncrementIterator(class CLKRLinearHashTable::CIterator *)",
    "public: __thiscall CLockedSingleList::CLockedSingleList(void)",
    "protected: static double CFakeLock::sm_dblDfltSpinAdjFctr",
    "GetOpenFileNameI",
    "public: static void __stdcall CReaderWriterLock3::SetDefaultSpinCount(unsigned short)",
    "public: static void __stdcall CFakeLock::SetDefaultSpinAdjustmentFactor(double)",
    "public: void __thiscall CSmallSpinLock::ReadLock(void)",
    "LoadLibraryI",
    "public: bool __thiscall CReaderWriterLock2::SetSpinCount(unsigned short)",
    "public: bool __thiscall CSmallSpinLock::SetSpinCount(unsigned short)",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::InitializeIterator(class CLKRLinearHashTable::CIterator *)",
    "MpGetHeapHandle",
    "public: __thiscall CExFileOperation::CExFileOperation(void)",
    "public: void __thiscall CLKRHashTable::WriteLock(void)",
    "DlgDirListI",
    "public: bool __thiscall CLKRHashTable::IsWriteUnlocked(void)const",
    "public: void __thiscall CLockedDoubleList::InsertHead(class CListEntry * const)",
    "LoadLibraryExI",
    "private: void __thiscall CLKRLinearHashTable::_RemoveThisFromGlobalList(void)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_Expand(void)",
    "char * __stdcall DslW2AHelper(unsigned short const *,char *,int)",
    "lstrcmpiI",
    "GetSystemDirectoryI",
    "SendMessageI",
    "public: static int __cdecl CMdVersionInfo::IsWin98orLater(void)",
    "public: __thiscall CSmallSpinLock::CSmallSpinLock(void)",
    "public: int __thiscall CLKRLinearHashTable::CheckTable(void)const",
    "public: static long const * __stdcall CLKRHashTableStats::BucketSizes(void)",
    "public: void __thiscall CLKRLinearHashTable::ReadLock(void)const",
    "private: unsigned long __thiscall CLKRLinearHashTable::_H0(unsigned long)const",
    "LookupPrivilegeValueI",
    "public: unsigned long __thiscall CLKRHashTable::Apply(enum LK_ACTION (__stdcall*)(void const *,void *),void *,enum LK_LOCKTYPE)",
    "public: class CListEntry const * __thiscall CLockedDoubleList::HeadNode(void)const",
    "public: static char const * __stdcall CSpinLock::ClassName(void)",
    "SetFileAttributesI",
    "RegCreateKeyExI",
    "public: static unsigned short __stdcall CSpinLock::GetDefaultSpinCount(void)",
    "public: static char const * __stdcall CFakeLock::ClassName(void)",
    "public: void __thiscall CFakeLock::ReadUnlock(void)",
    "MPCSUninitialize",
    "private: void __thiscall CLKRLinearHashTable::_Clear(bool)",
    "public: __thiscall CReaderWriterLock2::CReaderWriterLock2(void)",
    "public: bool __thiscall CSpinLock::IsWriteUnlocked(void)const",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<5,2,2,1,3,2>::WaitType(void)",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<2,1,1,1,3,2>::QueueType(void)",
    "public: static void __stdcall CCritSec::SetDefaultSpinAdjustmentFactor(double)",
    "public: static int __cdecl CMdVersionInfo::IsWin2korLater(void)",
    "public: bool __thiscall CSpinLock::ReadOrWriteLock(void)",
    "SendDlgItemMessageI",
    "GetWindowLongPtrI",
    "FindResourceI",
    "public: bool __thiscall CReaderWriterLock3::SetSpinCount(unsigned short)",
    "public: class CReaderWriterLock2 & __thiscall CReaderWriterLock2::operator=(class CReaderWriterLock2 const &)",
    "public: class CSingleListEntry * __thiscall CLockedSingleList::Pop(void)",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<2,1,1,1,3,2>::PerLockSpin(void)",
    "public: bool __thiscall CLockedSingleList::IsLocked(void)const",
    "public: bool __thiscall CLKRLinearHashTable::IsValid(void)const",
    "public: bool __thiscall CSmallSpinLock::IsReadLocked(void)const",
    "public: class CLKRHashTableStats & __thiscall CLKRHashTableStats::operator=(class CLKRHashTableStats const &)",
    "private: __thiscall CLKRHashTable::CLKRHashTable(class CLKRHashTable const &)",
    "unsigned short * __stdcall DslO2WHelper(char const *,unsigned short *,int)",
    "public: int __thiscall CLKRHashTable::CheckTable(void)const",
    "public: __thiscall CEXAutoBackupFile::~CEXAutoBackupFile(void)",
    "private: void __thiscall CLKRLinearHashTable::_SetSegVars(enum LK_TABLESIZE)",
    "private: void __thiscall CReaderWriterLock3::_WriteLockSpin(void)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_FindKey(unsigned long,unsigned long,void const * *)const",
    "protected: static unsigned short CFakeLock::sm_wDefaultSpinCount",
    "private: class CLKRLinearHashTable::CBucket * __thiscall CLKRLinearHashTable::_FindBucket(unsigned long,bool)const",
    "RegSetValueExI",
    "public: bool __thiscall CLockedSingleList::IsEmpty(void)const",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<1,1,3,1,3,2>::PerLockSpin(void)",
    "public: class CLockedDoubleList & __thiscall CLockedDoubleList::operator=(class CLockedDoubleList const &)",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::CloseIterator(class CLKRHashTable::CIterator *)",
    "public: void __thiscall CLKRHashTable::SetBucketLockSpinCount(unsigned short)",
    "GetClassInfoExI",
    "public: __thiscall CSmallSpinLock::~CSmallSpinLock(void)",
    "public: static int __cdecl CMdVersionInfo::IsWinNt4orLater(void)",
    "public: __thiscall CSingleList::CSingleList(void)",
    "private: static bool __stdcall CLKRHashTable::_FreeSubTableArray(class CLKRLinearHashTable * *)",
    "public: bool __thiscall CReaderWriterLock::IsWriteLocked(void)const",
    "public: static int __cdecl CMdVersionInfo::IsMillnm(void)",
    "SetWindowLongI",
    "public: void __thiscall CSmallSpinLock::ConvertSharedToExclusive(void)",
    "public: static void __cdecl CMdVersionInfo::ReleaseVersionInfo(void)",
    "public: bool __thiscall CReaderWriterLock2::IsWriteLocked(void)const",
    "public: bool __thiscall CReaderWriterLock3::IsReadLocked(void)const",
    "RegDeleteKeyI",
    "private: static long __stdcall CSpinLock::_CurrentThreadId(void)",
    "CharNextI",
    "private: static class CLockedDoubleList CLKRLinearHashTable::sm_llGlobalList",
    "public: unsigned short __thiscall CReaderWriterLock2::GetSpinCount(void)const",
    "lstrcatI",
    "private: class CLKRHashTable & __thiscall CLKRHashTable::operator=(class CLKRHashTable const &)",
    "private: void __thiscall CSpinLock::_Lock(void)",
    "private: unsigned long __thiscall CLKRLinearHashTable::_Apply(enum LK_ACTION (__stdcall*)(void const *,void *),void *,enum LK_LOCKTYPE,enum LK_PREDICATE &)",
    "public: long __thiscall CExFileOperation::FOCopyFileDACLS(unsigned short const *,unsigned short const *)",
    "public: void __thiscall CCritSec::ReadUnlock(void)",
    "public: static char const * __stdcall CReaderWriterLock::ClassName(void)",
    "private: bool __thiscall CReaderWriterLock3::_TryReadLock(void)",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<2,1,1,1,3,2>::Recursion(void)",
    "RegOpenKeyExI",
    "public: class CDoubleList & __thiscall CDoubleList::operator=(class CDoubleList const &)",
    "RegQueryInfoKeyI",
    "private: static int __cdecl CMdVersionInfo::InitializeVersionInfo(void)",
    "private: bool __thiscall CSpinLock::_IsLocked(void)const",
    "public: __thiscall CExFileOperation::~CExFileOperation(void)",
    "ExpandEnvironmentStringsI",
    "public: __thiscall CReaderWriterLock3::CReaderWriterLock3(void)",
    "public: class CListEntry * __thiscall CDoubleList::First(void)const",
    "WinHelpI",
    "public: void __thiscall CLKRHashTable::WriteUnlock(void)const",
    "IrtlTrace",
    "RegQueryValueExI",
    "private: class CLKRLinearHashTable & __thiscall CLKRLinearHashTable::operator=(class CLKRLinearHashTable const &)",
    "public: static unsigned short __stdcall CReaderWriterLock3::GetDefaultSpinCount(void)",
    "_DllMain@12",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::IncrementIterator(class CLKRHashTable::CIterator *)",
    "public: long __thiscall CExFileOperation::FOMoveFile(unsigned short const *,unsigned short const *)",
    "public: void __thiscall CLKRLinearHashTable::ReadUnlock(void)const",
    "public: bool __thiscall CLKRLinearHashTable::IsReadUnlocked(void)const",
    "public: static unsigned long __stdcall CCritSec::SetSpinCount(class CCriticalSection * *,unsigned long)",
    "public: void __thiscall CReaderWriterLock2::WriteLock(void)",
    "public: static double __stdcall CReaderWriterLock::GetDefaultSpinAdjustmentFactor(void)",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<5,2,2,1,3,2>::QueueType(void)",
    "GetWindowLongI",
    "RegSetValueI",
    "public: bool __thiscall CFakeLock::TryReadLock(void)",
    "public: void __thiscall CLockedSingleList::Lock(void)",
    "public: class CCritSec & __thiscall CCritSec::operator=(class CCritSec const &)",
    "private: class CLKRLinearHashTable::CSegment * & __thiscall CLKRLinearHashTable::_Segment(unsigned long)const",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<2,1,1,1,3,2>::MutexType(void)",
    "UMSEnterCSWraper",
    "private: static class CLKRLinearHashTable::CDirEntry * __stdcall CLKRLinearHashTable::_AllocateSegmentDirectory(unsigned int)",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<6,2,2,1,3,2>::PerLockSpin(void)",
    "public: void __thiscall CSmallSpinLock::ConvertExclusiveToShared(void)",
    "public: unsigned long __thiscall CLKRHashTable::ApplyIf(enum LK_PREDICATE (__stdcall*)(void const *,void *),enum LK_ACTION (__stdcall*)(void const *,void *),void *,enum LK_LOCKTYPE)",
    "public: void __thiscall CLKRHashTable::ConvertExclusiveToShared(void)const",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<6,2,2,1,3,2>::LockType(void)",
    "public: class CMdVersionInfo & __thiscall CMdVersionInfo::operator=(class CMdVersionInfo const &)",
    "GetIUMS",
    "public: class CListEntry * __thiscall CLockedDoubleList::Last(void)",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::IncrementIterator(class CLKRHashTable::CConstIterator *)const",
    "public: void __thiscall CReaderWriterLock::ConvertExclusiveToShared(void)",
    "private: unsigned long __thiscall CLKRLinearHashTable::_SegIndex(unsigned long)const",
    "FindFirstFileI",
    "private: __thiscall CLKRLinearHashTable::CLKRLinearHashTable(class CLKRLinearHashTable const &)",
    "MpHeapFree",
    "private: long __thiscall CExFileOperation::_getFileSecurity(unsigned short const *)",
    "public: bool __thiscall CCritSec::IsWriteLocked(void)const",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_MergeRecordSets(class CLKRLinearHashTable::CBucket *,class CLKRLinearHashTable::CNodeClump *,class CLKRLinearHashTable::CNodeClump *)",
    "public: void __thiscall CDoubleList::InsertTail(class CListEntry * const)",
    "private: static class CLKRLinearHashTable * __stdcall CLKRHashTable::_AllocateSubTable(char const *,unsigned long const (__stdcall*)(void const *),unsigned long (__stdcall*)(unsigned long),bool (__stdcall*)(unsigned long,unsigned long),void (__stdcall*)(void const *,int),double,unsigned long,class CLKRHashTable *)",
    "RemoveDirectoryI",
    "private: static class CLockedDoubleList CLKRHashTable::sm_llGlobalList",
    "GetWindowTextLengthI",
    "public: bool __thiscall CReaderWriterLock2::TryWriteLock(void)",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<3,1,1,1,1,1>::LockType(void)",
    "public: bool __thiscall CReaderWriterLock::IsWriteUnlocked(void)const",
    "public: bool __thiscall CFakeLock::IsReadLocked(void)const",
    "public: class CListEntry * __thiscall CDoubleList::Last(void)const",
    "public: bool __thiscall CReaderWriterLock::IsReadLocked(void)const",
    "private: void __thiscall CReaderWriterLock::_LockSpin(bool)",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<6,2,2,1,3,2>::WaitType(void)",
    "public: void __thiscall CLKRHashTable::Clear(void)",
    "public: void __thiscall CReaderWriterLock2::ConvertExclusiveToShared(void)",
    "long __stdcall CreateHolder(struct IGPDispenser *,int,unsigned int,struct IGPHolder * *)",
    "public: unsigned short __thiscall CLKRLinearHashTable::GetBucketLockSpinCount(void)",
    "LookupAccountNameI",
    "private: void __thiscall CReaderWriterLock2::_LockSpin(bool)",
    "public: void __thiscall CReaderWriterLock2::WriteUnlock(void)",
    "CreateSemaphoreI",
    "MpHeapSize",
    "VerQueryValueI",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::IncrementIterator(class CLKRLinearHashTable::CConstIterator *)const",
    "DlgDirSelectExI",
    "public: unsigned short __thiscall CReaderWriterLock::GetSpinCount(void)const",
    "public: bool __thiscall CReaderWriterLock2::TryReadLock(void)",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::InitializeIterator(class CLKRLinearHashTable::CConstIterator *)const",
    "LoadIconI",
    "public: __thiscall CLKRHashTable::CLKRHashTable(char const *,unsigned long const (__stdcall*)(void const *),unsigned long (__stdcall*)(unsigned long),bool (__stdcall*)(unsigned long,unsigned long),void (__stdcall*)(void const *,int),double,unsigned long,unsigned long)",
    "CallWindowProcI",
    "public: __thiscall CSingleList::~CSingleList(void)",
    "protected: static unsigned short CCritSec::sm_wDefaultSpinCount",
    "public: class CLKRHashTableStats __thiscall CLKRHashTable::GetStatistics(void)const",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<6,2,2,1,3,2>::QueueType(void)",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<7,2,1,1,3,2>::WaitType(void)",
    "private: bool __thiscall CReaderWriterLock2::_CmpExch(long,long)",
    "public: bool __thiscall CSpinLock::SetSpinCount(unsigned short)",
    "GetMessageI",
    "GetWindowTextI",
    "MPInitializeCriticalSection",
    "private: void __thiscall CLKRHashTable::_InsertThisIntoGlobalList(void)",
    "private: static bool __stdcall CLKRLinearHashTable::_FreeNodeClump(class CLKRLinearHashTable::CNodeClump *)",
    "private: bool __thiscall CLKRLinearHashTable::_FreeSegment(class CLKRLinearHashTable::CSegment *)const",
    "DlgDirListComboBoxI",
    "GetTempPathI",
    "public: void __thiscall CLockedSingleList::Unlock(void)",
    "public: bool __thiscall CReaderWriterLock::SetSpinCount(unsigned short)",
    "public: static void __stdcall CCritSec::SetDefaultSpinCount(unsigned short)",
    "public: unsigned long __thiscall CLKRHashTable::MaxSize(void)const",
    "CreateEventI",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<1,1,3,1,3,2>::LockType(void)",
    "public: class CLKRHashTableStats __thiscall CLKRLinearHashTable::GetStatistics(void)const",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::InitializeIterator(class CLKRHashTable::CConstIterator *)const",
    "private: unsigned long const __thiscall CLKRHashTable::_ExtractKey(void const *)const",
    "public: __thiscall CReaderWriterLock2::~CReaderWriterLock2(void)",
    "SetFileSecurityI",
    "public: static void __stdcall CSpinLock::SetDefaultSpinAdjustmentFactor(double)",
    "ReportEventI",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::FindKey(unsigned long,void const * *)const",
    "private: void __thiscall CLKRLinearHashTable::_AddRefRecord(void const *,int)const",
    "public: static double __stdcall CFakeLock::GetDefaultSpinAdjustmentFactor(void)",
    "MpHeapCreate",
    "RegisterEventSourceI",
    "public: static enum LK_TABLESIZE __stdcall CLKRLinearHashTable::NumSubTables(unsigned long &,unsigned long &)",
    "public: unsigned long __thiscall CLKRHashTable::Size(void)const",
    "public: bool __thiscall CCritSec::IsReadUnlocked(void)const",
    "public: void __thiscall CFakeLock::ReadOrWriteUnlock(bool)",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::FindKey(unsigned long,void const * *)const",
    "DefWindowProcI",
    "GetModuleHandleI",
    "private: bool __thiscall CReaderWriterLock3::_TryWriteLock2(void)",
    "public: bool __thiscall CLockedSingleList::IsUnlocked(void)const",
    "public: __thiscall CLKRHashTable::~CLKRHashTable(void)",
    "public: unsigned long __thiscall CLKRLinearHashTable::Size(void)const",
    "CreatePropertySheetPageI",
    "DragQueryFileI",
    "private: int __thiscall CLKRLinearHashTable::_IsNodeCompact(class CLKRLinearHashTable::CBucket * const)const",
    "public: class CReaderWriterLock & __thiscall CReaderWriterLock::operator=(class CReaderWriterLock const &)",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<1,1,3,1,3,2>::QueueType(void)",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::FindRecord(void const *)const",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::CloseIterator(class CLKRLinearHashTable::CConstIterator *)const",
    "public: bool __thiscall CFakeLock::TryWriteLock(void)",
    "public: void __thiscall CLKRHashTable::ConvertSharedToExclusive(void)const",
    "GetTextMetricsI",
    "public: __thiscall CLKRHashTableStats::CLKRHashTableStats(void)",
    "FormatMessageI",
    "mpCalloc",
    "public: void __thiscall CLockedSingleList::Push(class CSingleListEntry * const)",
    "private: void __thiscall CReaderWriterLock2::_WriteLockSpin(void)",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<4,1,1,2,3,3>::QueueType(void)",
    "public: class CLockBase<4,1,1,2,3,3> & __thiscall CLockBase<4,1,1,2,3,3>::operator=(class CLockBase<4,1,1,2,3,3> const &)",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<3,1,1,1,1,1>::WaitType(void)",
    "public: void __thiscall CLKRHashTable::ReadUnlock(void)const",
    "public: bool __thiscall CLKRLinearHashTable::IsWriteUnlocked(void)const",
    "public: void __thiscall CFakeLock::ConvertExclusiveToShared(void)",
    "public: __thiscall CEXAutoBackupFile::CEXAutoBackupFile(void)",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::InsertRecord(void const *,bool)",
    "GetComputerNameI",
    "public: long __thiscall CExFileOperation::FODeleteFile(unsigned short const *)",
    "public: bool __thiscall CLockedDoubleList::IsLocked(void)const",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<5,2,2,1,3,2>::PerLockSpin(void)",
    "public: bool __thiscall CReaderWriterLock2::IsReadUnlocked(void)const",
    "public: bool __thiscall CSingleList::IsEmpty(void)const",
    "DlgDirSelectComboBoxExI",
    "public: unsigned short __thiscall CFakeLock::GetSpinCount(void)const",
    "public: unsigned short __thiscall CLKRHashTable::GetTableLockSpinCount(void)",
    "GetWindowsDirectoryI",
    "public: static int __cdecl CMdVersionInfo::IsWin2k(void)",
    "public: void __thiscall CLKRLinearHashTable::ConvertExclusiveToShared(void)const",
    "private: void __thiscall CReaderWriterLock2::_ReadLockSpin(void)",
    "GetPrivateProfileIntI",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_DeleteRecord(void const *,unsigned long)",
    "protected: static double CReaderWriterLock3::sm_dblDfltSpinAdjFctr",
    "public: int __thiscall CLKRHashTable::NumSubTables(void)const",
    "private: unsigned long const __thiscall CLKRLinearHashTable::_ExtractKey(void const *)const",
    "DispatchMessageI",
    "unsigned short * __stdcall DslA2WHelper(char const *,unsigned short *,int)",
    "GetUserNameI",
    "public: unsigned long __thiscall CLKRLinearHashTable::ApplyIf(enum LK_PREDICATE (__stdcall*)(void const *,void *),enum LK_ACTION (__stdcall*)(void const *,void *),void *,enum LK_LOCKTYPE)",
    "private: void __thiscall CSpinLock::_LockSpin(void)",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<7,2,1,1,3,2>::QueueType(void)",
    "private: bool __thiscall CSpinLock::_TryLock(void)",
    "_LoadVersionedResourceEx@16",
    "public: bool __thiscall CSpinLock::TryWriteLock(void)",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<3,1,1,1,1,1>::QueueType(void)",
    "RegEnumKeyExI",
    "protected: static unsigned short CReaderWriterLock3::sm_wDefaultSpinCount",
    "public: static void __stdcall CSmallSpinLock::SetDefaultSpinCount(unsigned short)",
    "private: static class CLKRLinearHashTable * * __stdcall CLKRHashTable::_AllocateSubTableArray(unsigned int)",
    "public: void __thiscall CReaderWriterLock3::ConvertSharedToExclusive(void)",
    "lstrlenI",
    "public: void __thiscall CReaderWriterLock::WriteUnlock(void)",
    "private: class CLKRLinearHashTable * __thiscall CLKRHashTable::_SubTable(unsigned long)const",
    "public: class CEXAutoBackupFile & __thiscall CEXAutoBackupFile::operator=(class CEXAutoBackupFile const &)",
    "public: void __thiscall CFakeLock::ConvertSharedToExclusive(void)",
    "public: void __thiscall CLKRLinearHashTable::ConvertSharedToExclusive(void)const",
    "public: __thiscall CLockedSingleList::~CLockedSingleList(void)",
    "RegCreateKeyI",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<3,1,1,1,1,1>::PerLockSpin(void)",
    "public: unsigned long __thiscall CLKRLinearHashTable::Apply(enum LK_ACTION (__stdcall*)(void const *,void *),void *,enum LK_LOCKTYPE)",
    "public: class CLockBase<6,2,2,1,3,2> & __thiscall CLockBase<6,2,2,1,3,2>::operator=(class CLockBase<6,2,2,1,3,2> const &)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_InsertRecord(void const *,unsigned long,bool)",
    "SystemParametersInfoI",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::InitializeIterator(class CLKRHashTable::CIterator *)",
    "public: long __thiscall CExFileOperation::FOCopyFile(unsigned short const *,unsigned short const *,int)",
    "private: unsigned long __thiscall CLKRLinearHashTable::_ApplyIf(enum LK_PREDICATE (__stdcall*)(void const *,void *),enum LK_ACTION (__stdcall*)(void const *,void *),void *,enum LK_LOCKTYPE,enum LK_PREDICATE &)",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::DeleteRecord(void const *)",
    "public: int __thiscall CEXAutoBackupFile::GetBackupFile(unsigned short * *)",
    "public: void __thiscall CLKRHashTable::ReadLock(void)const",
    "FindResourceExI",
    "public: static unsigned short __stdcall CSmallSpinLock::GetDefaultSpinCount(void)",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::DeleteKey(unsigned long)",
    "public: bool __thiscall CLockedDoubleList::IsUnlocked(void)const",
    "public: bool __thiscall CLockedDoubleList::IsEmpty(void)const",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<6,2,2,1,3,2>::Recursion(void)",
    "private: unsigned long __thiscall CLKRHashTable::_CalcKeyHash(unsigned long)const",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_CloseIterator(class CLKRLinearHashTable::CIterator *)",
    "public: void __thiscall CLKRHashTable::Print(void)const",
    "public: long __thiscall CEXAutoBackupFile::RestoreFile(void)",
    "public: void __thiscall CReaderWriterLock::ReadUnlock(void)",
    "FXMemAttach",
    "MoveFileExI",
    "MessageBoxI",
    "private: class CLKRLinearHashTable::CBucket * __thiscall CLKRLinearHashTable::_Bucket(unsigned long)const",
    "private: unsigned long __thiscall CLKRLinearHashTable::_CalcKeyHash(unsigned long)const",
    "public: unsigned short __thiscall CReaderWriterLock3::GetSpinCount(void)const",
    "MPCSInitialize",
    "private: bool __thiscall CReaderWriterLock2::_TryWriteLock(long)",
    "CreateMutexI",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_DeleteKey(unsigned long,unsigned long)",
    "unsigned long __cdecl MpHeapCompact(void *)",
    "protected: static double CSpinLock::sm_dblDfltSpinAdjFctr",
    "protected: static double CReaderWriterLock::sm_dblDfltSpinAdjFctr",
    "public: bool __thiscall CCritSec::ReadOrWriteLock(void)",
    "protected: static unsigned short CReaderWriterLock::sm_wDefaultSpinCount",
    "public: void __thiscall CReaderWriterLock::WriteLock(void)",
    "DialogBoxParamI",
    "public: bool __thiscall CCritSec::TryWriteLock(void)",
    "public: __thiscall CLockedDoubleList::~CLockedDoubleList(void)",
    "CreateFontIndirectI",
    "public: void __thiscall CSingleList::Push(class CSingleListEntry * const)",
    "LoadStringI",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<5,2,2,1,3,2>::MutexType(void)",
    "mpFree",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_FindRecord(void const *,unsigned long)const",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::CloseIterator(class CLKRLinearHashTable::CIterator *)",
    "GetShortPathNameI",
    "public: bool __thiscall CFakeLock::IsReadUnlocked(void)const",
    "private: long __thiscall CExFileOperation::_setFileSecurity(unsigned short const *)",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<6,2,2,1,3,2>::MutexType(void)",
    "private: bool __thiscall CLKRLinearHashTable::_ReadOrWriteLock(void)const",
    "protected: static unsigned short CSmallSpinLock::sm_wDefaultSpinCount",
    "public: static double __stdcall CReaderWriterLock2::GetDefaultSpinAdjustmentFactor(void)",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::DeleteKey(unsigned long)",
    "public: __thiscall CLockedDoubleList::CLockedDoubleList(void)",
    "public: void __thiscall CSpinLock::ConvertExclusiveToShared(void)",
    "public: bool __thiscall CSmallSpinLock::IsWriteUnlocked(void)const",
    "GetModuleFileNameI",
    "public: bool __thiscall CDoubleList::IsEmpty(void)const",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<2,1,1,1,3,2>::WaitType(void)",
    "public: void __thiscall CCritSec::ReadLock(void)",
    "public: void __thiscall CLockedDoubleList::Lock(void)",
    "public: static int __cdecl CMdVersionInfo::IsWinNT(void)",
    "_IsValidAddress@12",
    "private: void __thiscall CSpinLock::_Unlock(void)",
    "public: bool __thiscall CLKRHashTable::IsReadUnlocked(void)const",
    "public: __thiscall CDoubleList::CDoubleList(void)",
    "public: void __thiscall CSmallSpinLock::ReadUnlock(void)",
    "MpHeapAlloc",
    "GetFileVersionInfoI",
    "RegEnumValueI",
    "private: static unsigned long (__stdcall* CCriticalSection::sm_pfnSetCriticalSectionSpinCount)(struct _RTL_CRITICAL_SECTION *,unsigned long)",
    "private: bool __thiscall CSmallSpinLock::_TryLock(void)",
    "public: static char const * __stdcall CCritSec::ClassName(void)",
    "RegOpenKeyI",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<4,1,1,2,3,3>::WaitType(void)",
    "public: void __thiscall CFakeLock::WriteLock(void)",
    "public: static char const * __stdcall CSmallSpinLock::ClassName(void)",
    "GetPrivateProfileStringI",
    "public: __thiscall CReaderWriterLock::~CReaderWriterLock(void)",
    "GetFullPathNameI",
    "SetMemHook",
    "private: __thiscall CLKRLinearHashTable::CLKRLinearHashTable(char const *,unsigned long const (__stdcall*)(void const *),unsigned long (__stdcall*)(unsigned long),bool (__stdcall*)(unsigned long,unsigned long),void (__stdcall*)(void const *,int),double,unsigned long,class CLKRHashTable *)",
    "public: unsigned short __thiscall CLKRLinearHashTable::GetTableLockSpinCount(void)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_Initialize(unsigned long const (__stdcall*)(void const *),unsigned long (__stdcall*)(unsigned long),bool (__stdcall*)(unsigned long,unsigned long),void (__stdcall*)(void const *,int),char const *,double,unsigned long)",
    "public: void __thiscall CCritSec::WriteLock(void)",
    "public: static enum LK_TABLESIZE __stdcall CLKRHashTable::NumSubTables(unsigned long &,unsigned long &)",
    "CreateDCI",
    "public: __thiscall CSpinLock::CSpinLock(void)",
    "public: bool __thiscall CSmallSpinLock::TryWriteLock(void)",
    "RegisterClassI",
    "public: __thiscall CReaderWriterLock::CReaderWriterLock(void)",
    "protected: static unsigned short CReaderWriterLock2::sm_wDefaultSpinCount",
    "public: void __thiscall CCritSec::ConvertSharedToExclusive(void)",
    "CreateFileMappingI",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::DeleteRecord(void const *)",
    "private: void __thiscall CLKRHashTable::_RemoveThisFromGlobalList(void)",
    "public: void __thiscall CSpinLock::ReadUnlock(void)",
    "GetFileSecurityI",
    "public: class CLockBase<7,2,1,1,3,2> & __thiscall CLockBase<7,2,1,1,3,2>::operator=(class CLockBase<7,2,1,1,3,2> const &)",
    "MpHeapValidate",
    "public: bool __thiscall CLKRLinearHashTable::IsUsable(void)const",
    "public: static unsigned short __stdcall CReaderWriterLock::GetDefaultSpinCount(void)",
    "public: class CLockBase<5,2,2,1,3,2> & __thiscall CLockBase<5,2,2,1,3,2>::operator=(class CLockBase<5,2,2,1,3,2> const &)",
    "DllBidEntryPoint",
    "public: void __thiscall CReaderWriterLock3::ReadOrWriteUnlock(bool)",
    "public: void __thiscall CReaderWriterLock3::WriteUnlock(void)",
    "public: class CFakeLock & __thiscall CFakeLock::operator=(class CFakeLock const &)",
    "public: void __thiscall CReaderWriterLock2::ReadLock(void)",
    "lstrcpynI",
    "public: void __thiscall CDoubleList::InsertHead(class CListEntry * const)",
    "private: unsigned long __thiscall CLKRLinearHashTable::_H1(unsigned long)const",
    "public: bool __thiscall CSmallSpinLock::IsReadUnlocked(void)const",
    "public: class CLockBase<1,1,3,1,3,2> & __thiscall CLockBase<1,1,3,1,3,2>::operator=(class CLockBase<1,1,3,1,3,2> const &)",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::FindRecord(void const *)const",
    "public: bool __thiscall CLKRLinearHashTable::IsReadLocked(void)const",
    "public: bool __thiscall CLKRLinearHashTable::IsWriteLocked(void)const",
    "CharPrevI",
    "public: bool __thiscall CReaderWriterLock3::IsReadUnlocked(void)const",
    "public: unsigned short __thiscall CSmallSpinLock::GetSpinCount(void)const",
    "public: bool __thiscall CLKRHashTable::IsReadLocked(void)const",
    "public: class CLockBase<3,1,1,1,1,1> & __thiscall CLockBase<3,1,1,1,1,1>::operator=(class CLockBase<3,1,1,1,1,1> const &)",
    "RegisterClassExI",
    "private: static enum LK_PREDICATE __stdcall CLKRLinearHashTable::_PredTrue(void const *,void *)",
    "GetEnvironmentVariableI",
    "public: static void __stdcall CSmallSpinLock::SetDefaultSpinAdjustmentFactor(double)",
    "public: __thiscall CDoubleList::~CDoubleList(void)",
    "private: bool __thiscall CLKRLinearHashTable::_EqualKeys(unsigned long,unsigned long)const",
    "public: static double __stdcall CSmallSpinLock::GetDefaultSpinAdjustmentFactor(void)",
    "public: class CLockBase<2,1,1,1,3,2> & __thiscall CLockBase<2,1,1,1,3,2>::operator=(class CLockBase<2,1,1,1,3,2> const &)",
    "public: void __thiscall CSpinLock::ReadLock(void)",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<5,2,2,1,3,2>::Recursion(void)",
    "public: void __thiscall CSmallSpinLock::WriteUnlock(void)",
    "HtmlHelpI",
    "private: void __thiscall CLKRLinearHashTable::_ReadOrWriteUnlock(bool)const",
    "public: class CSpinLock & __thiscall CSpinLock::operator=(class CSpinLock const &)",
    "FXMemDetach",
    "MPInitializeCriticalSectionAndSpinCount",
    "public: bool __thiscall CFakeLock::IsWriteLocked(void)const",
    "public: static void __stdcall CReaderWriterLock2::SetDefaultSpinCount(unsigned short)",
    "protected: static double CCritSec::sm_dblDfltSpinAdjFctr",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<2,1,1,1,3,2>::LockType(void)",
    "DeleteFileI",
    "public: bool __thiscall CSpinLock::IsReadUnlocked(void)const",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<4,1,1,2,3,3>::MutexType(void)",
    "public: bool __thiscall CLKRLinearHashTable::ValidSignature(void)const",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<7,2,1,1,3,2>::PerLockSpin(void)",
    "public: void __thiscall CLKRLinearHashTable::SetBucketLockSpinCount(unsigned short)",
    "public: class CExFileOperation & __thiscall CExFileOperation::operator=(class CExFileOperation const &)",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<3,1,1,1,1,1>::Recursion(void)",
    "public: bool __thiscall CReaderWriterLock::TryReadLock(void)",
    "MpHeapReAlloc",
    "public: bool __thiscall CReaderWriterLock3::TryWriteLock(void)",
    "public: void __thiscall CSmallSpinLock::WriteLock(void)",
    "public: __thiscall CSpinLock::~CSpinLock(void)",
    "public: class CListEntry * __thiscall CLockedDoubleList::RemoveHead(void)",
    "lstrcpyI",
    "public: class CListEntry const * __thiscall CDoubleList::HeadNode(void)const",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<4,1,1,2,3,3>::Recursion(void)",
    "SendNotifyMessageI",
    "public: static unsigned short __stdcall CCritSec::GetDefaultSpinCount(void)",
    "protected: static unsigned short CSpinLock::sm_wDefaultSpinCount",
    "SetWindowTextI",
    "public: static long __stdcall CLKRHashTableStats::BucketIndex(long)",
    "public: class CSingleList & __thiscall CSingleList::operator=(class CSingleList const &)",
    "MpHeapDestroy",
    "public: class CListEntry * __thiscall CDoubleList::RemoveTail(void)",
    "public: bool __thiscall CReaderWriterLock3::TryReadLock(void)",
    "public: __thiscall CCritSec::~CCritSec(void)",
    "ImageList_LoadImageI",
    "public: class CLockedSingleList & __thiscall CLockedSingleList::operator=(class CLockedSingleList const &)",
    "public: static void __stdcall CReaderWriterLock2::SetDefaultSpinAdjustmentFactor(double)",
    "public: void __thiscall CSpinLock::ReadOrWriteUnlock(bool)",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<7,2,1,1,3,2>::MutexType(void)",
    "public: void __thiscall CReaderWriterLock3::ConvertExclusiveToShared(void)",
    "MPDeleteCriticalSection",
    "public: void __thiscall CCritSec::ConvertExclusiveToShared(void)",
    "public: class CSmallSpinLock & __thiscall CSmallSpinLock::operator=(class CSmallSpinLock const &)",
    "public: __thiscall CLKRLinearHashTable::CLKRLinearHashTable(char const *,unsigned long const (__stdcall*)(void const *),unsigned long (__stdcall*)(unsigned long),bool (__stdcall*)(unsigned long,unsigned long),void (__stdcall*)(void const *,int),double,unsigned long,unsigned long)",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<1,1,3,1,3,2>::WaitType(void)",
    "public: __thiscall CFakeLock::CFakeLock(void)",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<5,2,2,1,3,2>::LockType(void)",
    "DialogBoxIndirectParamI",
    "private: bool __thiscall CReaderWriterLock::_CmpExch(long,long)",
    "RegDeleteValueI",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<4,1,1,2,3,3>::PerLockSpin(void)",
    "private: static long __stdcall CReaderWriterLock3::_CurrentThreadId(void)",
    "mpRealloc",
    "public: bool __thiscall CReaderWriterLock::IsReadUnlocked(void)const",
    "public: void __thiscall CCritSec::WriteUnlock(void)",
    "public: static void __stdcall CDoubleList::RemoveEntry(class CListEntry * const)",
    "private: static int (__stdcall* CCriticalSection::sm_pfnTryEnterCriticalSection)(struct _RTL_CRITICAL_SECTION *)",
    "FindNextFileI",
    "public: __thiscall CEXAutoBackupFile::CEXAutoBackupFile(unsigned short const *)",
    "public: unsigned short __thiscall CLKRHashTable::GetBucketLockSpinCount(void)",
    "public: void __thiscall CLockedDoubleList::InsertTail(class CListEntry * const)",
    "public: static char const * __stdcall CReaderWriterLock3::ClassName(void)",
    "OutputDebugStringI",
    "private: static unsigned long __stdcall CLKRLinearHashTable::_H0(unsigned long,unsigned long)",
    "private: void __thiscall CSmallSpinLock::_LockSpin(void)",
    "private: bool __thiscall CReaderWriterLock3::_CmpExch(long,long)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_SplitRecordSet(class CLKRLinearHashTable::CNodeClump *,class CLKRLinearHashTable::CNodeClump *,unsigned long,unsigned long,unsigned long,class CLKRLinearHashTable::CNodeClump *)",
    "public: long __thiscall CExFileOperation::FOReplaceFile(unsigned short const *,unsigned short const *)",
    "public: static char const * __stdcall CLKRHashTable::ClassName(void)",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<7,2,1,1,3,2>::Recursion(void)",
    "public: bool __thiscall CLKRHashTable::ValidSignature(void)const",
    "public: static void __stdcall CReaderWriterLock::SetDefaultSpinCount(unsigned short)",
    "PeekMessageI",
    "public: unsigned short __thiscall CCritSec::GetSpinCount(void)const",
    "public: void __thiscall CLKRLinearHashTable::WriteLock(void)",
    "private: static struct _OSVERSIONINFOW * CMdVersionInfo::sm_lpOSVERSIONINFO",
    "private: class CLKRLinearHashTable::CSegment * __thiscall CLKRLinearHashTable::_AllocateSegment(void)const",
    "private: bool __thiscall CReaderWriterLock::_TryReadLock(void)",
    "UnregisterClassI",
    "public: static void __stdcall CSpinLock::SetDefaultSpinCount(unsigned short)",
    "GetFileVersionInfoSizeI",
    "public: static int __cdecl CMdVersionInfo::GetVersionExI(struct _OSVERSIONINFOW *)",
    "public: static unsigned short __stdcall CReaderWriterLock2::GetDefaultSpinCount(void)",
    "SetWindowLongPtrI",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::CloseIterator(class CLKRHashTable::CConstIterator *)const"
  ],
  "msdbg2.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "msdmo.dll": [
    "DMOGuidToStrW",
    "MoCopyMediaType",
    "MoFreeMediaType",
    "MoDeleteMediaType",
    "DMOGetName",
    "DMOGuidToStrA",
    "DMOStrToGuidA",
    "DMOUnregister",
    "MoCreateMediaType",
    "MoDuplicateMediaType",
    "DMOEnum",
    "DMOStrToGuidW",
    "DMOGetTypes",
    "MoInitMediaType",
    "DMORegister"
  ],
  "msdtclog.dll": [
    "public: static long __stdcall CLogMgr::CreateInstance(class CLogMgr * *,struct IUnknown *)",
    "DllGetDTCLOG2",
    "int __stdcall DllGetDTCLOG(struct _GUID const &,struct _GUID const &,void * *)",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msdtcprx.dll": [
    "public: long __thiscall CSecurityDescriptor::GetNamedInfo(unsigned short *,enum _SE_OBJECT_TYPE)",
    "long __stdcall GetSecurityConfigurationOptions(unsigned short *,unsigned long *,unsigned long *)",
    "public: static long __stdcall CServiceControlManager::Create(class CServiceControlManager * *,unsigned long,unsigned short *,unsigned short *)",
    "long __stdcall ApplyNamedSecurityChange(unsigned short *,enum _SE_OBJECT_TYPE,void *,void *,unsigned long)",
    "long __stdcall MirrorXaTmSecurityKey(unsigned short *)",
    "public: long __thiscall CSecurityDescriptor::RemoveSid(void *)",
    "long __stdcall UpgradeDtc(int)",
    "unsigned long __stdcall GetDefaultLogSize(void)",
    "int __stdcall GetDtcPath(unsigned long,unsigned short *)",
    "long __stdcall GetAccountSid(unsigned short *,unsigned short *,void * *)",
    "long __stdcall SetDtcClient(unsigned short *,char *,unsigned short *)",
    "public: static long __stdcall CConnectionManager::Create(class CConnectionManager * *)",
    "public: long __thiscall CSecurityDescriptor::ClearInMemoryAcl(void)",
    "public: long __thiscall CService::GetHandle(struct SC_HANDLE__ * &)",
    "long __stdcall InstallTipGw(unsigned short *)",
    "long __stdcall DtcWriteToEventLoggerEx(unsigned short,unsigned short,unsigned long,void *,unsigned short,unsigned long,char const * *,void *)",
    "long __stdcall InstallDtcClient(unsigned short *,unsigned long,unsigned long)",
    "unsigned short * __stdcall GetDefaultServicePath(void)",
    "public: unsigned long __thiscall CService::AddRef(void)",
    "long __cdecl GetTmContactA(char *,char *,struct IProperties * *)",
    "public: static long __stdcall CTmProxyCore::CreateInstance(class CTmProxyCore * *,struct IUnknown *)",
    "struct _SPECIAL_ACCOUNT_ * g_aSpecialAccounts",
    "_DecryptAccountInformation@24",
    "public: long __thiscall CSecurityDescriptor::ClearAcl(void)",
    "long __stdcall GetDefaultSecurityConfigurationOptions(unsigned short *,unsigned long *,unsigned long *)",
    "long __stdcall GetXATmSecurityKey(unsigned short *,unsigned short *,unsigned long *)",
    "long __stdcall ApplyAccountSettings(int,unsigned short *,unsigned long,unsigned short *,unsigned short *,unsigned short *,int)",
    "protected: __thiscall CServiceControlManager::~CServiceControlManager(void)",
    "public: long __thiscall CService::GetAccount(unsigned short *,unsigned long *)",
    "int __stdcall SetDtcCIDProps(struct _LOG_PROPERTIES &,struct _DAC_PROPERTIES &)",
    "long __stdcall SetDomainControllerState(unsigned short *)",
    "public: unsigned long __thiscall CServiceControlManager::Release(void)",
    "long __stdcall JoinDtcEx(unsigned short *)",
    "ContactToNameObject",
    "public: long __thiscall CSecurityDescriptor::QueryServiceObjectSecurity(struct SC_HANDLE__ *,unsigned long)",
    "SysPrepDtcReinstall",
    "long __stdcall CreateNewContact(struct IProperties * *)",
    "public: class CSecurityDescriptor & __thiscall CSecurityDescriptor::operator=(class CSecurityDescriptor const &)",
    "DllGetTransactionManagerCore",
    "public: class CService & __thiscall CService::operator=(class CService const &)",
    "long __stdcall GetMsDtcSPN(unsigned short *,unsigned short * *)",
    "long __stdcall InstallXaTm(unsigned short *)",
    "DTC_XaStart",
    "long __stdcall GetSecurityRegValueW(unsigned short *,unsigned short const *,unsigned char *,unsigned long *)",
    "long __stdcall InstallDtc(unsigned short *,unsigned short *,unsigned short *,unsigned short *,unsigned short *,int,unsigned short *,int)",
    "long __stdcall SetSecurityRegValueNonClusterW(unsigned short *,unsigned short const *,unsigned long,unsigned char *,unsigned long)",
    "long __stdcall GetLastKnownDomainControllerState(unsigned short *,unsigned long *)",
    "public: unsigned long __thiscall CService::Release(void)",
    "public: unsigned long __thiscall CServiceControlManager::AddRef(void)",
    "long __stdcall LookupSpecialAccount(unsigned short *,struct _SPECIAL_ACCOUNT_ * *)",
    "public: long __thiscall CSecurityDescriptor::AddSid(unsigned short *,unsigned long,unsigned long)",
    "_EncryptAccountInformation@16",
    "unsigned short * __stdcall GetOldDefaultLogPath(void)",
    "public: __thiscall CSecurityDescriptor::~CSecurityDescriptor(void)",
    "protected: __thiscall CServiceControlManager::CServiceControlManager(void)",
    "public: static long __stdcall CNameService::Create(class CNameService * *)",
    "long __stdcall StringToSid(unsigned short *,void * *)",
    "DllGetClassObject",
    "DTC_XaComplete",
    "long __stdcall PopulateLocalRegistry(void)",
    "public: __thiscall CSecurityDescriptor::CSecurityDescriptor(void)",
    "protected: long __thiscall CService::InternalInit(unsigned short *,class CServiceControlManager *,unsigned long,unsigned short *)",
    "DTC_XaClose",
    "long __cdecl GetTmUIContactW(unsigned short *,unsigned short *,struct IProperties * *)",
    "public: long __thiscall CSecurityDescriptor::SetOwner(unsigned short *,int)",
    "int __stdcall GetDtcCIDProps(struct _LOG_PROPERTIES &,struct _DAC_PROPERTIES &)",
    "long __stdcall RidToSid(unsigned long,void * *)",
    "public: long __thiscall CSecurityDescriptor::RemoveSid(unsigned short *)",
    "unsigned short * __stdcall GetDefaultLogPath(void)",
    "protected: void __thiscall CSecurityDescriptor::Reset(void)",
    "DllGetDTCUtilObject",
    "long __stdcall UpdateTmNameObject(struct INameObject *,struct INameObject * *)",
    "DllUnregisterServer",
    "public: long __thiscall CSecurityDescriptor::SetOwner(void *,int)",
    "unsigned short * __stdcall GetEventLogSource(void)",
    "public: class CServiceControlManager & __thiscall CServiceControlManager::operator=(class CServiceControlManager const &)",
    "DllGetDTCProxy",
    "protected: long __thiscall CSecurityDescriptor::Alloc(unsigned long)",
    "_ClusterUpdateAccountInformation@12",
    "long __cdecl GetTmContactW(unsigned short *,unsigned short *,struct IProperties * *)",
    "public: long __thiscall CSecurityDescriptor::GetControl(unsigned short *)",
    "public: long __thiscall CSecurityDescriptor::AddSid(void *,unsigned long,unsigned long)",
    "long __stdcall DtcWriteToEventLogger(unsigned long,unsigned long,unsigned long,unsigned long,void *,char *)",
    "unsigned short * __cdecl GetDefaultServiceNameW(void)",
    "public: long __thiscall CServiceControlManager::OpenServiceA(class CService * *,unsigned short *,unsigned long)",
    "DTC_XaRecover",
    "ShutDownCM",
    "long __stdcall VerifyAccountInfo(void)",
    "long __stdcall JoinDtc(void)",
    "DTC_XaForget",
    "protected: __thiscall CService::~CService(void)",
    "long __stdcall CheckForDCPromotionDemotion(unsigned short *)",
    "public: long __thiscall CSecurityDescriptor::SetControl(unsigned short,unsigned short)",
    "int __stdcall IsNtVersion5OrMore(void)",
    "void __stdcall DeleteExistingContacts(unsigned short *,struct IContactPool *,unsigned short *)",
    "DTC_XaOpen",
    "DTC_XaCommit",
    "long __cdecl GetTmUIContactA(char *,char *,struct IProperties * *)",
    "long __stdcall EraseDtcClient(unsigned short *)",
    "public: static long __stdcall CService::Create(class CService * *,unsigned short *,class CServiceControlManager *,unsigned long,unsigned short *)",
    "ax_reg",
    "long __stdcall GetDtcRpcSecurityLevel(unsigned short *,enum _DTC_SECURITY_LEVEL *)",
    "protected: long __thiscall CSecurityDescriptor::SetNewAcl(struct _ACL *,unsigned long,int,int)",
    "void __stdcall SetEventLogSourceToMsdtcCore(void)",
    "DTC_XaRollback",
    "public: long __thiscall CService::SetAccount(unsigned short *,unsigned short *)",
    "long __stdcall SetSecurityConfigurationOptions(unsigned short *,unsigned long,unsigned long)",
    "long __stdcall GetLocalDtcClusteringVersion(unsigned long *)",
    "long __stdcall SetDtcServerProtocol(char *,char *)",
    "protected: long __thiscall CSecurityDescriptor::MakeAbsolute(void)",
    "int __stdcall DllGetDTCAdmin(struct _GUID const &,struct _GUID const &,void * *)",
    "public: long __thiscall CSecurityDescriptor::SetServiceObjectSecurity(struct SC_HANDLE__ *,unsigned long)",
    "protected: long __thiscall CServiceControlManager::InternalInit(unsigned long,unsigned short *,unsigned short *)",
    "long __stdcall GetSharedDtcClusteringVersion(unsigned long *)",
    "_ClusterCryptoContainerCreate@12",
    "long __stdcall RemoveDtc(unsigned short *,unsigned short *,unsigned short *)",
    "DTC_XaPrepare",
    "DllRegisterServer",
    "DTC_AxUnReg",
    "long __stdcall SetAccountInfoInRegistryW(unsigned short *)",
    "protected: __thiscall CService::CService(void)",
    "DTC_AxReg",
    "_ClusterChangeDtcUserAccount@4",
    "int __stdcall Win95Present(void)",
    "public: long __thiscall CSecurityDescriptor::SetSpecialAccounts(unsigned long)",
    "public: long __thiscall CServiceControlManager::GetHandle(struct SC_HANDLE__ * &)",
    "long __stdcall PopulateSharedClusterRegistryWithContacts(void)",
    "char * __cdecl GetDefaultServiceNameA(void)",
    "long __stdcall MsDtcSPNFree(unsigned short * *)",
    "DTC_XaEnd",
    "int __stdcall GetDtcLogPath(unsigned long,unsigned short *)",
    "DllGetDTCConnectionManager",
    "long __stdcall GetSecurityRegValueNonClusterW(unsigned short *,unsigned short const *,unsigned char *,unsigned long *)",
    "long __stdcall PopulateSharedClusterRegistryWithLogInfo(void)",
    "ax_unreg",
    "public: long __thiscall CSecurityDescriptor::GetSecurityDescriptor(void * *)",
    "public: long __thiscall CSecurityDescriptor::SetNamedInfo(unsigned short *,enum _SE_OBJECT_TYPE,unsigned long)"
  ],
  "msdtctm.dll": [
    "_SetTipFunctionalityWorking@4",
    "ASCDefer",
    "public: static long __stdcall CTm::CreateInstance(class CTm * *,struct IUnknown *)",
    "ASCWrapObject",
    "ASCGetSafeReference",
    "long __stdcall DllGetMapper_ITxBeginFactory(struct _GUID const &,void * *)",
    "public: static long __stdcall CUISCore::Create(class CUISCore * *,struct IUnknown *)",
    "public: static long __stdcall CXaTmCore::CreateInstance(class CXaTmCore * *,struct IUnknown *)",
    "long __stdcall CreateThreadPool(void)",
    "long __stdcall DllGetMapper_IGatewayTxFactory(struct _GUID const &,void * *)",
    "DtcMainExt",
    "DllGetClassObject",
    "DllRegisterServer",
    "ASCDeliverDeferred",
    "_GetTipFunctionalityWorking@0",
    "DllUnregisterServer",
    "ASCWrapClassFactory"
  ],
  "msdtcuiu.dll": [
    "public: void __thiscall CDac::SetHostNameA(char *)",
    "public: unsigned long __thiscall CDac::GetAdminAccess(void)",
    "public: struct HWND__ * __thiscall CDac::GetOwnerHwnd(void)",
    "public: long __thiscall CDac::Init(unsigned short *)",
    "DllGetDTCUIC",
    "public: __thiscall CDac::CDac(unsigned long)",
    "ShutDownUIC",
    "GetDACStatsMinMaxInfo",
    "DtcPerfOpen",
    "public: __thiscall CDac::~CDac(void)",
    "public: int __thiscall CDac::ErrorMessage(unsigned long,unsigned int)",
    "DoDACAdvanced",
    "DllRegisterServer",
    "public: int __thiscall CDac::Connect(struct HWND__ *,struct INTServiceControl *)",
    "public: static long __stdcall CUicCore::Create(class CUicCore * *)",
    "public: int __thiscall CDac::IsConnected(void)",
    "DoDACPropSheet",
    "public: void __thiscall CDac::SetHostNameW(unsigned short *)",
    "RunDACExe",
    "PerfDllRegisterServer",
    "public: unsigned short * __thiscall CDac::GetHostNameW(void)",
    "DllGetClassObject",
    "public: char * __thiscall CDac::GetHostNameA(void)",
    "public: class CDialog * __thiscall CDac::CreateAdvancedPropertySheet(class CWnd *)",
    "void __stdcall RegisterErrorSink(struct IDacErrorSink *)",
    "public: int __thiscall CDac::ProcessCommand(unsigned int,long)",
    "ServerEnumDialogW",
    "public: unsigned short * __thiscall CDac::GetVirtualHostName(void)",
    "public: void __thiscall CDac::SetOwnerWnd(class CWnd *)",
    "InitDACDLL",
    "DtcPerfClose",
    "public: __thiscall CDac::CDac(class CDac const &)",
    "DtcPerfCollect",
    "TermDACDLL",
    "ServerEnumDialogA",
    "class CDac * __stdcall ValidateDACInstance(void * *,unsigned short *)",
    "public: class CDac & __thiscall CDac::operator=(class CDac const &)",
    "public: long __thiscall CDac::ServiceRequest(unsigned long,void *,unsigned long,bool)",
    "TermDACInstance",
    "DllUnregisterServer"
  ],
  "msdxmlc.dll": "No exports",
  "msencode.dll": [
    "CceIsAvailableEncoding",
    "CceStreamUnicodeToMultiByte",
    "CceStreamMultiByteToUnicode",
    "CceGetAvailableEncodings",
    "FetchMsEncodeDllVersion",
    "CceStringMultiByteToUnicode",
    "CceDetectInputCode",
    "DllMain",
    "CceStringUnicodeToMultiByte"
  ],
  "msexch40.dll": [
    "DllUnregisterServer",
    "DllRegisterServer"
  ],
  "msexcl40.dll": [
    "DllUnregisterServer",
    "DllRegisterServer"
  ],
  "msfeeds.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "MsfeedsCreateInstance"
  ],
  "msfeedsbs.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "msftedit.dll": [
    "RichEditWndProc",
    "SetCustomTextOutHandlerEx",
    "RichListBoxWndProc",
    "RichEdit10ANSIWndProc",
    "RichComboBoxWndProc",
    "REExtendedRegisterClass",
    "IID_IRichEditOle",
    "IID_ITextServices",
    "CreateTextServices",
    "IID_ITextHost2",
    "DllGetVersion",
    "IID_ITextHost",
    "RichEditANSIWndProc",
    "IID_IRichEditOleCallback"
  ],
  "msgina.dll": [
    "WlxIsLogoffOk",
    "WlxNetworkProviderLoad",
    "WlxLoggedOutSAS",
    "WlxDisplaySASNotice",
    "WlxScreenSaverNotify",
    "WlxStartApplication",
    "WlxDisplayStatusMessage",
    "WlxGetConsoleSwitchCredentials",
    "WlxLogoff",
    "WlxDisplayLockedNotice",
    "WlxShutdown",
    "WlxReconnectNotify",
    "WlxRemoveStatusMessage",
    "WlxLoggedOnSAS",
    "ShellShutdownDialog",
    "WlxActivateUserShell",
    "WlxInitialize",
    "WlxGetStatusMessage",
    "WlxWkstaLockedSAS",
    "WlxIsLockOk",
    "WlxNegotiate",
    "WlxDisconnectNotify"
  ],
  "msgsvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "mshtml.dll": [
    "IEIsXMLNSRegistered",
    "ShowHTMLDialogEx",
    "IERegisterXMLNS",
    "ClearPhishingFilterData",
    "PrintHTML",
    "ShowModelessHTMLDialog",
    "ConvertAndEscapePostData",
    "DllEnumClassObjects",
    "DllCanUnloadNow",
    "RunHTMLApplication",
    "CreateHTMLPropertyPage",
    "DllGetClassObject",
    "ShowModalDialog",
    "MatchExactGetIDsOfNames",
    "ShowHTMLDialog"
  ],
  "mshtmled.dll": [
    "DllEnumClassObjects",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mshtmler.dll": "No exports",
  "msi.dll": [
    "MsiGetProductCodeFromPackageCodeW",
    "MsiGetSummaryInformationA",
    "MsiGetSummaryInformationW",
    "MsiConfigureProductExW",
    "MsiGetShortcutTargetA",
    "MsiExtractPatchXMLDataW",
    "MsiGetProductInfoFromScriptW",
    "MsiOpenProductW",
    "MsiGetFeatureValidStatesA",
    "MsiPreviewDialogW",
    "MsiSetFeatureAttributesA",
    "MsiQueryFeatureStateFromDescriptorW",
    "MsiDeterminePatchSequenceW",
    "MsiMessageBoxW",
    "MsiOpenPackageExA",
    "MsiRecordGetStringA",
    "MsiSourceListForceResolutionExW",
    "MsiDatabaseCommit",
    "MsiDatabaseOpenViewW",
    "Migrate10CachedPackagesW",
    "MsiSourceListForceResolutionExA",
    "MsiEnumFeaturesA",
    "MsiExtractPatchXMLDataA",
    "MsiDatabaseIsTablePersistentA",
    "MsiOpenPackageA",
    "MsiSourceListAddSourceW",
    "MsiEnableLogA",
    "MsiDecomposeDescriptorA",
    "MsiGetPropertyW",
    "MsiDatabaseGenerateTransformA",
    "MsiReinstallFeatureW",
    "MsiOpenPackageW",
    "MsiGetActiveDatabase",
    "MsiRecordDataSize",
    "MsiSetTargetPathW",
    "MsiMessageBoxExW",
    "MsiCollectUserInfoA",
    "MsiSetFeatureAttributesW",
    "MsiSourceListClearAllExA",
    "MsiSourceListClearMediaDiskW",
    "MsiDatabaseImportA",
    "MsiGetUserInfoW",
    "MsiSetPropertyA",
    "MsiQueryProductStateW",
    "MsiRecordSetStringW",
    "Migrate10CachedPackagesA",
    "MsiCollectUserInfoW",
    "MsiGetFeatureValidStatesW",
    "MsiDatabaseGetPrimaryKeysA",
    "MsiSetFeatureStateW",
    "MsiUseFeatureExA",
    "MsiVerifyPackageA",
    "MsiAdvertiseProductA",
    "MsiEnumPatchesExA",
    "MsiOpenPackageExW",
    "MsiProvideComponentW",
    "MsiRecordGetStringW",
    "MsiGetProductInfoExA",
    "MsiConfigureFeatureA",
    "MsiAdvertiseProductW",
    "MsiCreateTransformSummaryInfoA",
    "MsiProvideQualifiedComponentW",
    "MsiProvideComponentFromDescriptorW",
    "MsiGetProductInfoFromScriptA",
    "MsiProvideComponentFromDescriptorA",
    "DllCanUnloadNow",
    "MsiGetFeatureStateA",
    "MsiGetFeatureStateW",
    "MsiEnumComponentCostsA",
    "MsiGetProductPropertyW",
    "MsiProvideQualifiedComponentExA",
    "MsiCloseAllHandles",
    "MsiRecordIsNull",
    "MsiEnableUIPreview",
    "MsiSourceListClearMediaDiskA",
    "MsiReinstallProductW",
    "MsiReinstallFeatureA",
    "MsiViewModify",
    "MsiDatabaseApplyTransformA",
    "MsiDatabaseApplyTransformW",
    "MsiPreviewBillboardW",
    "MsiGetPatchInfoW",
    "MsiGetFileSignatureInformationA",
    "MsiAdvertiseScriptA",
    "MsiGetComponentStateA",
    "MsiGetFeatureUsageW",
    "MsiGetPatchInfoA",
    "MsiEnumClientsW",
    "MsiIsProductElevatedA",
    "MsiProvideQualifiedComponentA",
    "MsiNotifySidChangeW",
    "MsiGetComponentStateW",
    "MsiEvaluateConditionW",
    "MsiPreviewBillboardA",
    "MsiGetFileHashA",
    "MsiDatabaseImportW",
    "MsiGetPropertyA",
    "MsiViewGetErrorW",
    "MsiApplyPatchW",
    "MsiSetExternalUIW",
    "MsiEnumRelatedProductsA",
    "MsiSetComponentStateW",
    "MsiEnumRelatedProductsW",
    "MsiDeterminePatchSequenceA",
    "MsiDatabaseExportA",
    "MsiApplyMultiplePatchesW",
    "MsiInstallMissingComponentA",
    "MsiEnumComponentCostsW",
    "MsiSummaryInfoSetPropertyA",
    "MsiGetProductPropertyA",
    "MsiProvideQualifiedComponentExW",
    "MsiRecordSetStringA",
    "MsiPreviewDialogA",
    "MsiGetProductCodeW",
    "MsiGetTargetPathW",
    "MsiViewFetch",
    "MsiEnableLogW",
    "MsiGetFeatureCostW",
    "MsiGetUserInfoA",
    "DllGetClassObject",
    "MsiSourceListEnumMediaDisksW",
    "MsiAdvertiseProductExW",
    "MsiEnumComponentQualifiersW",
    "MsiGetLastErrorRecord",
    "MsiDoActionW",
    "MsiApplyMultiplePatchesA",
    "MsiUseFeatureW",
    "MsiGetFeatureInfoA",
    "MsiLocateComponentA",
    "MsiProvideAssemblyW",
    "MsiSummaryInfoSetPropertyW",
    "MsiGetMode",
    "MsiSetExternalUIRecord",
    "MsiRecordGetInteger",
    "MsiFormatRecordA",
    "MsiConfigureProductW",
    "MsiSourceListClearSourceW",
    "MsiSourceListGetInfoA",
    "DllUnregisterServer",
    "MsiGetShortcutTargetW",
    "MsiGetProductCodeA",
    "MsiRecordSetStreamW",
    "MsiOpenDatabaseA",
    "MsiViewGetColumnInfo",
    "MsiSourceListEnumSourcesW",
    "MsiSourceListClearSourceA",
    "MsiFormatRecordW",
    "MsiEnumProductsExA",
    "MsiEnumPatchesExW",
    "MsiGetTargetPathA",
    "MsiEnumPatchesA",
    "MsiEnumComponentsW",
    "MsiGetProductCodeFromPackageCodeA",
    "MsiDatabaseMergeW",
    "MsiProvideComponentA",
    "MsiLoadStringA",
    "MsiGetProductInfoExW",
    "MsiConfigureProductA",
    "MsiDoActionA",
    "MsiSourceListSetInfoA",
    "MsiDetermineApplicablePatchesA",
    "MsiSummaryInfoGetPropertyA",
    "MsiQueryFeatureStateW",
    "MsiMessageBoxExA",
    "MsiSummaryInfoGetPropertyW",
    "MsiDatabaseIsTablePersistentW",
    "MsiQueryProductStateA",
    "MsiUseFeatureExW",
    "MsiSetTargetPathA",
    "MsiDatabaseGetPrimaryKeysW",
    "MsiGetFeatureCostA",
    "MsiEnumProductsExW",
    "MsiEnumProductsA",
    "MsiGetSourcePathA",
    "MsiInstallProductA",
    "MsiSummaryInfoGetPropertyCount",
    "MsiSourceListAddSourceExA",
    "MsiQueryComponentStateA",
    "MsiConfigureFeatureW",
    "MsiGetDatabaseState",
    "MsiEnumPatchesW",
    "MsiEnumProductsW",
    "MsiSequenceW",
    "MsiSourceListAddSourceExW",
    "MsiVerifyDiskSpace",
    "MsiViewClose",
    "MsiCreateTransformSummaryInfoW",
    "MsiDeleteUserDataW",
    "MsiSourceListSetInfoW",
    "MsiGetPatchInfoExW",
    "MsiSourceListEnumSourcesA",
    "MsiRecordClearData",
    "MsiReinstallProductA",
    "MsiRecordGetFieldCount",
    "MsiInstallMissingFileW",
    "MsiSourceListAddSourceA",
    "MsiLoadStringW",
    "MsiConfigureProductExA",
    "MsiDeleteUserDataA",
    "MsiProcessAdvertiseScriptA",
    "MsiProcessMessage",
    "MsiRemovePatchesW",
    "MsiSummaryInfoPersist",
    "MsiViewGetErrorA",
    "MsiApplyPatchA",
    "MsiSetInternalUI",
    "MsiDatabaseGenerateTransformW",
    "MsiSetPropertyW",
    "MsiLocateComponentW",
    "MsiOpenDatabaseW",
    "MsiDatabaseExportW",
    "MsiGetFileSignatureInformationW",
    "MsiQueryFeatureStateFromDescriptorA",
    "MsiRemovePatchesA",
    "MsiGetFeatureUsageA",
    "MsiGetLanguage",
    "MsiSequenceA",
    "MsiGetProductInfoW",
    "MsiDetermineApplicablePatchesW",
    "MsiNotifySidChangeA",
    "MsiSourceListClearAllA",
    "MsiVerifyPackageW",
    "MsiQueryFeatureStateExW",
    "MsiGetPatchInfoExA",
    "MsiInstallMissingFileA",
    "MsiIsProductElevatedW",
    "MsiSourceListForceResolutionA",
    "MsiGetFeatureInfoW",
    "MsiGetSourcePathW",
    "MsiSetInstallLevel",
    "MsiProvideAssemblyA",
    "MsiSourceListAddMediaDiskA",
    "MsiViewExecute",
    "MsiQueryComponentStateW",
    "MsiReinstallFeatureFromDescriptorW",
    "MsiGetComponentPathW",
    "MsiEnumFeaturesW",
    "MsiEnumComponentQualifiersA",
    "MsiEvaluateConditionA",
    "MsiAdvertiseScriptW",
    "MsiSetExternalUIA",
    "MsiGetFileVersionW",
    "MsiRecordSetInteger",
    "MsiOpenProductA",
    "MsiSourceListClearAllExW",
    "MsiSourceListAddMediaDiskW",
    "DllRegisterServer",
    "MsiCreateRecord",
    "MsiDatabaseOpenViewA",
    "MsiProcessAdvertiseScriptW",
    "MsiQueryFeatureStateExA",
    "MsiAdvertiseProductExA",
    "MsiRecordReadStream",
    "MsiGetFileHashW",
    "MsiInstallProductW",
    "MsiEnumClientsA",
    "MsiSetMode",
    "MsiEnumComponentsA",
    "MsiSourceListEnumMediaDisksA",
    "MsiGetFileVersionA",
    "MsiUseFeatureA",
    "MsiReinstallFeatureFromDescriptorA",
    "MsiRecordSetStreamA",
    "DllGetVersion",
    "MsiGetComponentPathA",
    "MsiSetComponentStateA",
    "MsiDecomposeDescriptorW",
    "MsiConfigureFeatureFromDescriptorA",
    "MsiConfigureFeatureFromDescriptorW",
    "MsiGetProductInfoA",
    "MsiSourceListGetInfoW",
    "MsiInstallMissingComponentW",
    "MsiMessageBoxA",
    "MsiDatabaseMergeA",
    "MsiSetFeatureStateA",
    "MsiSourceListForceResolutionW",
    "MsiCloseHandle",
    "MsiCreateAndVerifyInstallerDirectory",
    "MsiQueryFeatureStateA",
    "MsiInvalidateFeatureCache",
    "MsiSourceListClearAllW"
  ],
  "msident.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "msidle.dll": "No exports",
  "msidntld.dll": "No exports",
  "msieftp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllInstall",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msihnd.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "msimg32.dll": [
    "DllInitialize",
    "GradientFill",
    "TransparentBlt",
    "vSetDdrawflag",
    "AlphaBlend"
  ],
  "msimsg.dll": "No exports",
  "msimtf.dll": [
    "MsimtfIsGuidMapEnable",
    "MsimtfIsWindowFiltered",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msir3jp.dll": [
    "EnumStemInfo",
    "EnumSelectionOffsets",
    "EnumSentenceOffsets",
    "EnumPhrases",
    "WordBreakInitEx",
    "DllGetClassObject",
    "DllRegisterServer",
    "EnumSummarizationOffsetsEx",
    "DllUnregisterServer",
    "EnumSummarizationOffsets",
    "EnumStemOffsets",
    "WordBreakInit"
  ],
  "msisip.dll": [
    "MsiSIPCreateIndirectData",
    "MsiSIPRemoveSignedDataMsg",
    "MsiSIPVerifyIndirectData",
    "MsiSIPPutSignedDataMsg",
    "MsiSIPGetSignedDataMsg",
    "MsiSIPIsMyTypeOfFile",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msjet40.dll": [
    "DllUnregisterServer",
    "DllRegisterServer"
  ],
  "msjetoledb40.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllMain",
    "DllUnregisterServer"
  ],
  "msjint40.dll": [
    "CchLszOfId2"
  ],
  "msjter40.dll": [
    "JetErrFormattedMessage",
    "JetErrIDARawMessage",
    "JetErrIDAForError",
    "JetErrRawMessage"
  ],
  "msjtes40.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllMain",
    "DllUnregisterServer"
  ],
  "mslbui.dll": [
    "CTFGetLangBarAddIn"
  ],
  "msls31.dll": [
    "LsLwMultDivR",
    "LsdnSubmitSublines",
    "LsSetExpansion",
    "LsFindPrevBreakSubline",
    "LssbFDonePresSubline",
    "LsQueryLineCpPpoint",
    "LsdnFinishRegularAddAdvancePen",
    "LsdnFinishRegular",
    "LsSqueezeSubline",
    "LsCompressSubline",
    "LsFetchAppendToCurrentSublineResume",
    "LsFindNextBreakSubline",
    "LssbFIsSublineEmpty",
    "LsSetModWidthPairs",
    "LsSetBreakSubline",
    "LsGetMinDurBreaks",
    "LsdnFinishBySubline",
    "LssbGetDupSubline",
    "LsForceBreakSubline",
    "LssbGetNumberDnodesInSubline",
    "LsEnumLine",
    "LssbGetDurTrailInSubline",
    "LsQueryFLineEmpty",
    "LsdnModifyParaEnding",
    "LsGetTatenakayokoLsimethods",
    "LsMatchPresSubline",
    "LsFetchAppendToCurrentSubline",
    "LsdnQueryObjDimRange",
    "LsPointXYFromPointUV",
    "LsCreateLine",
    "LsGetReverseLsimethods",
    "LsGetHihLsimethods",
    "LsExpandSubline",
    "LsdnResetPenNode",
    "LsGetLineDur",
    "LsQueryCpPpointSubline",
    "LsDestroyContext",
    "LssbGetVisibleDcpInSubline",
    "LsSetDoc",
    "LsResetRMInCurrentSubline",
    "LsdnResetObjDim",
    "LssbFDoneDisplay",
    "LsdnGetDup",
    "LsdnGetFormatDepth",
    "LsDestroyLine",
    "LsTruncateSubline",
    "LsdnFinishByOneChar",
    "LsdnSkipCurTab",
    "LsdnSetAbsBaseLine",
    "LsCreateContext",
    "LssbGetObjDimSubline",
    "LsdnResolvePrevTab",
    "LsGetWarichuLsimethods",
    "LsQueryLineDup",
    "LsGetSpecialEffectsSubline",
    "LsdnSetRigidDup",
    "LsdnFinishDelete",
    "LsEnumSubline",
    "LsDisplayLine",
    "LssbGetPlsrunsFromSubline",
    "LsDisplaySubline",
    "LsSetCompression",
    "LsQueryLinePointPcp",
    "LsAppendRunToCurrentSubline",
    "LsGetRubyLsimethods",
    "LsPointUV2FromPointUV1",
    "LssbGetDurTrailWithPensInSubline",
    "LsQueryPointPcpSubline",
    "LsdnFinishByPen",
    "LsFinishCurrentSubline",
    "LsQueryTextCellDetails",
    "LsdnDistribute",
    "LsdnGetCurTabInfo",
    "LsSetBreaking",
    "LsdnFinishDeleteAll",
    "LsdnQueryPenNode",
    "LsModifyLineHeight",
    "LsCreateSubline",
    "LsDestroySubline"
  ],
  "msltus40.dll": [
    "DllUnregisterServer",
    "DllRegisterServer"
  ],
  "msnetobj.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "msnsspc.dll": [
    "MakeSignature",
    "SspcCreateSspiReg",
    "FreeContextBuffer",
    "InitSecurityInterfaceA",
    "QuerySecurityPackageInfoA",
    "UnsealMessage",
    "SealMessage",
    "FreeCredentialsHandle",
    "VerifySignature",
    "AcquireCredentialsHandleA",
    "DeleteSecurityContext",
    "InitSecurityInterfaceW",
    "AcquireCredentialsHandleW",
    "CleanupCredentialCache",
    "ApplyControlToken",
    "InitializeSecurityContextA",
    "QueryContextAttributesW",
    "QueryContextAttributesA",
    "SetMSNAccountInfo",
    "EnumerateSecurityPackagesW",
    "InitializeSecurityContextW",
    "QuerySecurityPackageInfoW",
    "EnumerateSecurityPackagesA",
    "CompleteAuthToken"
  ],
  "msobjs.dll": "No exports",
  "msoeacct.dll": [
    "DllCanUnloadNow",
    "CreateAccountsFromFile",
    "GetDllMajorVersion",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer",
    "CreateAccountsFromFileEx",
    "ValidEmailAddress",
    "HrCreateAccountManager"
  ],
  "msoert2.dll": [
    "HrLPSZCPToBSTR",
    "PszSkipWhiteA",
    "GetRichEdClassStringW",
    "BrowseForFolder",
    "HrBSTRToLPSZ",
    "LoadMappedToolbarBitmap",
    "CleanupFileNameInPlaceW",
    "SzGetCertificateEmailAddress",
    "CreateDataObject",
    "PSTCreateTypeSubType_NoUI",
    "FIsSpaceA",
    "CrackNotificationPackage",
    "HrStreamSeekEnd",
    "StreamSubStringMatch",
    "PVGetMsgParam",
    "CreateStreamOnHFileW",
    "HrCreatePhonebookEntry",
    "PszFromANSIStreamA",
    "PszDupLenA",
    "HrByteToStream",
    "PszScanToCharA",
    "StripCRLF",
    "FInitializeRichEdit",
    "CreateSystemHandleName",
    "HrFindInetTimeZone",
    "WszGenerateNameFromBlob",
    "ChConvertFromHex",
    "BuildNotificationPackage",
    "HrIsStreamUnicode",
    "MessageBoxInst",
    "IsPlatformWinNT",
    "CenterDialog",
    "HrFillRasCombo",
    "PSTGetData",
    "HrStreamSeekSet",
    "DeleteTempFileOnShutdown",
    "PSTFreeHandle",
    "FIsValidFileNameCharW",
    "HrIStreamToBSTR",
    "FIsValidFileNameCharA",
    "StrTokEx",
    "HrIndexOfMonth",
    "AppendTempFileList",
    "FBuildTempPathW",
    "CreateLogFile",
    "FBuildTempPath",
    "OpenFileStreamShare",
    "HrCopyStreamToByte",
    "IUnknownList_CreateInstance",
    "OpenFileStreamWithFlags",
    "HrGetStreamPos",
    "HrGetStreamSize",
    "IsHttpUrlA",
    "IDrawText",
    "HrRewindStream",
    "PszToUnicode",
    "GetExePath",
    "CreateInfoWindow",
    "ReplaceCharsW",
    "HrCopyStream",
    "HrCheckTridentMenu",
    "CchFileTimeToDateTimeSz",
    "StrToUintA",
    "PVDecodeObject",
    "CreateTempFileStream",
    "UlStripWhitespaceW",
    "HrGetStyleSheet",
    "HrGetBodyElement",
    "WriteStreamToFileHandle",
    "fGetBrowserUrlEncoding",
    "MessageBoxInstW",
    "GetDllMajorVersion",
    "PszEscapeMenuStringA",
    "UpdateRebarBandColors",
    "GenerateUniqueFileName",
    "StrToUintW",
    "HrIStreamWToBSTR",
    "IsDigit",
    "FreeTempFileList",
    "PszDupW",
    "SetFontOnRichEd",
    "GetHtmlCharset",
    "HrSetDirtyFlagImpl",
    "CopyRegistry",
    "IsValidFileIfFileUrlW",
    "PszSkipWhiteW",
    "HrGetCertKeyUsage",
    "FMissingCert",
    "IsValidFileIfFileUrl",
    "_MSG",
    "HrSafeGetStreamSize",
    "WriteStreamToFile",
    "HrIndexOfWeek",
    "HrCopyLockBytesToStream",
    "CryptAllocFunc",
    "HrEditPhonebookEntry",
    "OpenFileStreamW",
    "PVGetCertificateParam",
    "UlStripWhitespace",
    "FIsSpaceW",
    "AthwsprintfW",
    "PszToANSI",
    "HrStreamToByte",
    "CryptFreeFunc",
    "HrStreamSeekBegin",
    "OpenFileStream",
    "WriteStreamToFileW",
    "PszDayFromIndex",
    "BrowseForFolderW",
    "SetWindowLongPtrAthW",
    "OpenFileStreamShareW",
    "PszScanToWhiteA",
    "FIsEmptyW",
    "strtrim",
    "DeleteTempFileOnShutdownEx",
    "HrDecodeObject",
    "CreateEnumFormatEtc",
    "HrGetElementImpl",
    "HrVerifyCertEnhKeyUsage",
    "RicheditStreamOut",
    "IsPrint",
    "PszAllocA",
    "strtrimW",
    "PszMonthFromIndex",
    "HrStreamSeekCur",
    "IsUpper",
    "HrGetMsgParam",
    "HrGetCertificateParam",
    "CleanupGlobalTempFiles",
    "CreateNotify",
    "PSTSetNewData",
    "CchFileTimeToDateTimeW",
    "CleanupFileNameInPlaceA",
    "ReplaceChars",
    "DoHotMailWizard",
    "CreateStreamOnHFile",
    "IVoidPtrList_CreateInstance",
    "HrCreateTridentMenu",
    "FIsHTMLFile",
    "HrLPSZToBSTR",
    "OpenFileStreamWithFlagsW",
    "PszAllocW",
    "PszDupA",
    "UnlocStrEqNW",
    "HrCopyStreamCBEndOnCRLF",
    "CreateTempFile",
    "StrChrExA",
    "DeleteTempFile",
    "ShellUtil_GetSpecialFolderPath",
    "FIsEmptyA",
    "SetIntlFont",
    "FIsHTMLFileW",
    "RicheditStreamIn",
    "HrCopyStreamCB"
  ],
  "msorc32r.dll": "No exports",
  "msorcl32.dll": [
    "SQLTransact",
    "SQLPutData",
    "SQLBindCol",
    "SQLSetConnectOption",
    "SQLBrowseConnect",
    "SQLAllocStmt",
    "SQLColAttributes",
    "DllMain",
    "SQLMoreResults",
    "SQLPrimaryKeys",
    "ConfigDSN",
    "SQLGetData",
    "SQLTables",
    "SQLGetConnectOption",
    "SQLGetTypeInfo",
    "SQLFreeEnv",
    "SQLBindParameter",
    "SQLGetStmtOption",
    "SQLNativeSql",
    "SQLPrepare",
    "SQLNumParams",
    "SQLRowCount",
    "DllRegisterServer",
    "SQLAllocEnv",
    "SQLProcedureColumns",
    "SQLNumResultCols",
    "SQLForeignKeys",
    "SQLDescribeParam",
    "SQLFetch",
    "SQLFreeStmt",
    "SQLSetPos",
    "SQLGetCursorName",
    "SQLParamData",
    "SQLStatistics",
    "SQLSpecialColumns",
    "SQLCancel",
    "SQLSetCursorName",
    "SQLGetInfo",
    "SQLExtendedFetch",
    "SQLFreeConnect",
    "SQLExecute",
    "SQLAllocConnect",
    "SQLExecDirect",
    "SQLColumns",
    "SQLDriverConnect",
    "SQLDescribeCol",
    "SQLSetScrollOptions",
    "LoadByOrdinal",
    "SQLDisconnect",
    "SQLError",
    "SQLSetStmtOption",
    "SQLConnect",
    "DllUnregisterServer",
    "SQLProcedures"
  ],
  "mspatcha.dll": [
    "GetFilePatchSignatureW",
    "TestApplyPatchToFileW",
    "GetFilePatchSignatureA",
    "GetFilePatchSignatureByHandle",
    "TestApplyPatchToFileA",
    "ApplyPatchToFileA",
    "ApplyPatchToFileByHandles",
    "ApplyPatchToFileW",
    "ApplyPatchToFileByHandlesEx",
    "ApplyPatchToFileExA",
    "TestApplyPatchToFileByHandles",
    "ApplyPatchToFileExW"
  ],
  "mspbde40.dll": [
    "DllUnregisterServer",
    "DllRegisterServer"
  ],
  "mspmsnsv.dll": [
    "DllMain",
    "DllUnregisterServer",
    "ServiceMain",
    "DllRegisterServer"
  ],
  "mspmsp.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "msports.dll": [
    "PortsClassInstaller",
    "SerialDisplayAdvancedSettings",
    "ComDBReleasePort",
    "ComDBOpen",
    "ComDBGetCurrentPortUsage",
    "ComDBClaimPort",
    "ParallelPortPropPageProvider",
    "ComDBResizeDatabase",
    "ComDBClaimNextFreePort",
    "ComDBClose",
    "SerialPortPropPageProvider",
    "LibMain"
  ],
  "msprivs.dll": "No exports",
  "msr2c.dll": [
    "VDGetICursorFromIRowset",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllMain",
    "DllUnregisterServer"
  ],
  "msr2cenu.dll": "No exports",
  "msratelc.dll": "No exports",
  "msrating.dll": [
    "RatingCheckUserAccessW",
    "RatingAccessDeniedDialog2W",
    "RatingCustomInit",
    "RatingClickedOnRATInternal",
    "ClickedOnPRF",
    "RatingObtainCancel",
    "RatingCustomDeleteCrackedData",
    "RatingSetupUIW",
    "RatingAccessDeniedDialogW",
    "RatingEnable",
    "RatingCustomAddRatingSystem",
    "ClickedOnRAT",
    "RatingCustomRemoveRatingHelper",
    "RatingAccessDeniedDialog2",
    "ChangeSupervisorPassword",
    "RatingObtainQuery",
    "RatingCustomCrackData",
    "RatingAccessDeniedDialog",
    "RatingAddPropertyPages",
    "RatingEnabledQuery",
    "RatingEnableW",
    "RatingCustomAddRatingHelper",
    "RatingInit",
    "RatingCustomSetUserOptions",
    "DllGetClassObject",
    "RatingCustomSetDefaultBureau",
    "RatingSetupUI",
    "RatingFreeDetails",
    "RatingObtainQueryW",
    "RatingClickedOnPRFInternal",
    "DllCanUnloadNow",
    "RatingAddToApprovedSites",
    "RatingCheckUserAccess",
    "VerifySupervisorPassword"
  ],
  "msrclr40.dll": [
    "GetDlgTitle",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msrd2x40.dll": [
    "DllUnregisterServer",
    "DllRegisterServer"
  ],
  "msrd3x40.dll": [
    "DllUnregisterServer",
    "DllRegisterServer"
  ],
  "msrecr40.dll": "No exports",
  "msrepl40.dll": "No exports",
  "msrle32.dll": [
    "DriverProc"
  ],
  "mssap.dll": [
    "SapCreateInstance"
  ],
  "msscp.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "mssha.dll": [
    "DllCanUnloadNow",
    "MsShaUnInitialize",
    "DllGetClassObject",
    "MsShaInitialize"
  ],
  "msshavmsg.dll": "No exports",
  "mssign32.dll": [
    "SignerAddTimeStampResponseEx",
    "SignerAddTimeStampResponse",
    "SignerTimeStampEx",
    "SignerSignEx",
    "GetCryptProvFromCert",
    "PvkPrivateKeyLoadFromMemoryA",
    "PvkPrivateKeySaveToMemory",
    "PvkPrivateKeyReleaseContextA",
    "SignerTimeStamp",
    "PvkFreeCryptProv",
    "PvkPrivateKeySaveToMemoryA",
    "SignError",
    "SpcGetCertFromKey",
    "PvkGetCryptProv",
    "FreeCryptProvFromCert",
    "PvkPrivateKeySave",
    "PvkPrivateKeyAcquireContextFromMemoryA",
    "DllRegisterServer",
    "SignerSign",
    "PvkPrivateKeyAcquireContext",
    "PvkPrivateKeyLoadA",
    "PvkPrivateKeyAcquireContextFromMemory",
    "PvkPrivateKeyReleaseContext",
    "PvkPrivateKeyLoad",
    "SignerFreeSignerContext",
    "PvkPrivateKeyAcquireContextA",
    "SignerCreateTimeStampRequest",
    "DllUnregisterServer",
    "PvkPrivateKeySaveA",
    "PvkPrivateKeyLoadFromMemory"
  ],
  "mssip32.dll": [
    "CryptSIPVerifyIndirectData",
    "CryptSIPCreateIndirectData",
    "DllUnregisterServer",
    "CryptSIPRemoveSignedDataMsg",
    "DllRegisterServer",
    "CryptSIPGetInfo",
    "CryptSIPPutSignedDataMsg",
    "CryptSIPGetSignedDataMsg",
    "CryptSIPGetRegWorkingFlags"
  ],
  "msswch.dll": "No exports",
  "mstask.dll": [
    "_SAGetAccountInformation@16",
    "SASetAccountInformation",
    "_SASetNSAccountInformation@12",
    "_SAGetNSAccountInformation@12",
    "_ConvertAtJobsToTasks@0",
    "_NetrJobEnum@20",
    "_DllCanUnloadNow@0",
    "SAGetAccountInformation",
    "_NetrJobGetInfo@12",
    "_NetrJobAdd@12",
    "SAGetNSAccountInformation",
    "_NetrJobDel@12",
    "_SetNetScheduleAccountInformation@12",
    "SetNetScheduleAccountInformation",
    "_DllGetClassObject@12",
    "DllGetClassObject",
    "NetrJobDel",
    "NetrJobGetInfo",
    "ConvertAtJobsToTasks",
    "NetrJobAdd",
    "_GetNetScheduleAccountInformation@12",
    "NetrJobEnum",
    "SASetNSAccountInformation",
    "DllCanUnloadNow",
    "GetNetScheduleAccountInformation",
    "_SASetAccountInformation@20"
  ],
  "mstext40.dll": [
    "DllUnregisterServer",
    "DllRegisterServer"
  ],
  "mstime.dll": [
    "DllEnumClassObjects",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mstlsapi.dll": [
    "TLSTelephoneRegisterLKP",
    "LsCsp_EncryptHwid",
    "TLSKeyPackEnumNext",
    "TLSFreeTSCertificate",
    "EnumerateTlsServer",
    "TLSLicenseEnumNext",
    "TLSAllocateInternetLicenseEx",
    "TLSMarkLicense",
    "TLSStopDiscovery",
    "TLSRequestTermServCert",
    "TLSGetServerNameEx",
    "LsCsp_DecryptEnvelopedData",
    "TLSGetSupportFlags",
    "TLSInDomain",
    "LsCsp_StoreSecret",
    "TLSInstallCertificate",
    "TLSKeyPackEnumBegin",
    "TLSIsLicenseEnforceEnable",
    "TLSSendServerCertificate",
    "MIDL_user_allocate",
    "TLSAnnounceLicensePack",
    "TLSLicenseEnumEnd",
    "TLSLicenseEnumNextEx",
    "TLSInit",
    "TLSDepositeServerSPK",
    "TLSIssueNewLicenseExEx",
    "TLSResponseServerChallenge",
    "TLSDisconnectFromServer",
    "TLSGetTlsPrivateData",
    "TLSConnectToAnyLsServer",
    "TLSAnnounceServer",
    "TLSKeyPackAdd",
    "TLSReturnLicensedProduct",
    "TLSGetServerName",
    "FindEnterpriseServer",
    "TLSLicenseEnumBegin",
    "TLSLookupServer",
    "TLSRegisterLicenseKeyPack",
    "TLSCheckLicenseMark",
    "TLSUpgradeLicense",
    "RequestToTlsRequest",
    "TLSKeyPackEnumEnd",
    "MIDL_user_free",
    "TLSUpgradeLicenseEx",
    "TLSGetServerCertificate",
    "TLSChallengeServer",
    "TLSRetrieveTermServCert",
    "TLSStartDiscovery",
    "TLSReturnLicense",
    "TLSGetTSCertificate",
    "TLSGetVersion",
    "TLSGetLSPKCS10CertRequest",
    "GetAllEnterpriseServers",
    "TLSIssueNewLicense",
    "LsCsp_RetrieveSecret",
    "TLSShutdown",
    "TLSReturnInternetLicenseEx",
    "TLSGetLastError",
    "TLSIssueNewLicenseEx",
    "TLSGetAvailableLicenses",
    "TLSGetServerSPK",
    "TLSConnectToLsServer",
    "TLSIssuePlatformChallenge",
    "TLSIsBetaNTServer",
    "TLSKeyPackSetStatus",
    "TLSTriggerReGenKey",
    "TLSAllocateConcurrentLicense",
    "TLSGetServerScope",
    "TLSGetServerPID",
    "LsCsp_GetServerData"
  ],
  "mstscax.dll": [
    "RegisterTransportExtDll",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer",
    "DllGetTscCtlVer"
  ],
  "msutb.dll": [
    "GetLibTls",
    "GetPopupTipbar",
    "SetRegisterLangBand",
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "ClosePopupTipbar",
    "DllUnregisterServer"
  ],
  "msv1_0.dll": [
    "MsvIsLocalhostAliases",
    "LsaApLogonUserEx2",
    "MsvValidateTarget",
    "MsvSamValidate",
    "SpInstanceInit",
    "SpLsaModeInitialize",
    "SpUserModeInitialize",
    "LsaApCallPackagePassthrough",
    "SpInitialize",
    "LsaApInitializePackage",
    "LsaApCallPackage",
    "MsvSamLogoff",
    "Msv1_0SubAuthenticationPresent",
    "Msv1_0ExportSubAuthenticationRoutine",
    "LsaApLogonTerminated",
    "MsvGetLogonAttemptCount",
    "LsaApCallPackageUntrusted"
  ],
  "msvbvm50.dll": [
    "EbIsProjectOnStack",
    "__vbaR4ForNextCheck",
    "__vbaPut3",
    "Zombie_GetIDsOfNames",
    "rtcTypeName",
    "__vbaHresultCheck",
    "rtcChangeDir",
    "EbGetObjConnectionCounts",
    "__vbaLateMemNamedCall",
    "GetMemObj",
    "__vbaStrAryToAnsi",
    "rtcEndOfFile",
    "rtcVarStrFromVar",
    "__vbaStrDate",
    "__vbaCastObjVar",
    "__vbaLineInputVar",
    "__vbaVarPow",
    "rtcFileAttributes",
    "EbLoadRunTime",
    "EVENT_SINK_AddRef",
    "__vbaVarInt",
    "__vbaMidStmtVarB",
    "__vbaGetOwner3",
    "TipSetOption",
    "__vbaFailedFriend",
    "__vbaFreeStrList",
    "__vbaLateIdCall",
    "__vbaLateIdNamedCall",
    "__vbaGetFxStr4",
    "__vbaOnGoCheck",
    "__vbaR8ForNextCheck",
    "__vbaCyStr",
    "Zombie_Release",
    "__vbaCastObj",
    "__vbaFpI4",
    "__vbaVarTextCmpNe",
    "__vbaForEachVar",
    "__vbaExitProc",
    "SetMemNewObj",
    "__vbaPrintFile",
    "__vbaObjSetAddref",
    "rtcGetErl",
    "__vbaBoolStr",
    "rtcLeftCharVar",
    "rtcInputBox",
    "rtcCos",
    "__vbaMidStmtVar",
    "EbResetProject",
    "rtcStrConvVar",
    "rtcFV",
    "VBDllCanUnloadNow",
    "BASIC_CLASS_Release",
    "__vbaLateIdCallLd",
    "rtcInputCharCountVar",
    "_CIexp",
    "__vbaI2I4",
    "__vbaStrVarMove",
    "TipGetAddressOfPredeclaredInstance",
    "__vbaLenVar",
    "__vbaVarTextTstEq",
    "rtcDDB",
    "__vbaWriteFile",
    "rtcTan",
    "__vbaStrCat",
    "rtcAppActivate",
    "__vbaEraseKeepData",
    "__vbaVarSetUnkAddref",
    "rtcChoose",
    "_adj_fdiv_m16i",
    "ThunRTMain",
    "rtcFileReset",
    "__vbaStrCompVar",
    "rtcBstrFromAnsi",
    "__vbaVarSetVar",
    "rtcPV",
    "__vbaStrTextLike",
    "__vbaGet4",
    "_adj_fpatan",
    "__vbaDerefAry",
    "__vbaR8Var",
    "__vbaStrLike",
    "__vbaVarTextTstGt",
    "__vbaVargUnkAddref",
    "rtcCharValueBstr",
    "__vbaLbound",
    "SetMemObj",
    "__vbaErase",
    "EbSetContextWorkerThread",
    "__vbaVarIndexStoreObj",
    "__vbaFpCSngR4",
    "rtcGetDateValue",
    "__vbaCheckTypeVar",
    "__vbaR8IntI2",
    "__vbaExceptHandler",
    "__vbaI2Sgn",
    "__vbaFpCy",
    "EVENT_SINK2_Release",
    "__vbaVarDup",
    "__vbaLateMemCall",
    "__vbaExitEachAry",
    "rtcStringBstr",
    "__vbaStrCmp",
    "__vbaFreeObjList",
    "BASIC_CLASS_Invoke",
    "__vbaRecAnsiToUni",
    "rtcDir",
    "__vbaAryDestruct",
    "rtcSgnVar",
    "rtcBstrFromChar",
    "__vbaPrintObj",
    "__vbaVarTstEq",
    "__vbaVarIndexLoad",
    "_allmul",
    "__vbaDateR4",
    "__vbaVarFix",
    "__vbaForEachCollAd",
    "__vbaSetSystemError",
    "rtcDatePart",
    "rtcPPMT",
    "rtcRightVar",
    "__vbaCyErrVar",
    "PutMem4",
    "__vbaRedimPreserveVar",
    "__vbaAryCopy",
    "__vbaI4Sgn",
    "__vbaCyI4",
    "__vbaFpCSngR8",
    "EbLibraryLoad",
    "rtcRandomNext",
    "__vbaVarCmpLt",
    "rtcIsError",
    "rtcBeep",
    "rtcMakeDir",
    "__vbaStrToAnsi",
    "__vbaFpR8",
    "rtcGetDayOfMonth",
    "rtcHexVarFromVar",
    "__vbaLateMemCallLd",
    "GetMem8",
    "__vbaGosubFree",
    "PutMemEvent",
    "_adj_fdiv_m32i",
    "__vbaVarImp",
    "__vbaStrUI1",
    "rtcSpaceBstr",
    "__vbaRecDestruct",
    "_adj_fdivr_m16i",
    "__vbaCyFix",
    "_adj_fprem1",
    "__vbaCyUI1",
    "VBDllUnRegisterServer",
    "__vbaLateIdNamedStAd",
    "__vbaR4Str",
    "__vbaDateStr",
    "rtcInStr",
    "rtUI1FromErrVar",
    "__vbaCyForInit",
    "PutMemStr",
    "__vbaLateIdSt",
    "__vbaVargVarRef",
    "__vbaI2Var",
    "rtcLeftTrimVar",
    "rtcFileDateTime",
    "__vbaLateIdNamedCallSt",
    "__vbaFpCmpCy",
    "rtcMsgBox",
    "__vbaCyI2",
    "rtcIPMT",
    "_adj_fdiv_r",
    "rtcRgb",
    "rtcGetSecondOfMinute",
    "__vbaBoolErrVar",
    "rtcR8ValFromBstr",
    "__vbaFpR4",
    "rtcFileLength",
    "rtcIsArray",
    "__vbaVarTextTstNe",
    "rtcPartition",
    "rtcAtn",
    "__vbaInStrVarB",
    "Zombie_QueryInterface",
    "__vbaVarCat",
    "__vbaI4Abs",
    "rtcErrObj",
    "rtcAppleScript",
    "rtcFileWidth",
    "__vbaExitEachColl",
    "__vbaCyAdd",
    "__vbaObjIs",
    "rtcNPer",
    "__vbaFPFix",
    "TipCreateInstanceProject",
    "__vbaVarTextCmpLt",
    "__vbaStrR8",
    "rtcVarFromError",
    "rtcFreeFile",
    "__vbaVarMul",
    "TipInvokeMethod2",
    "__vbaR8Str",
    "__vbaVargVar",
    "__vbaPutOwner3",
    "rtcIRR",
    "PutMemVar",
    "GetMem2",
    "_adj_fdivr_m32",
    "__vbaRedimVar",
    "EbGetHandleOfExecutingProject",
    "__vbaVargObj",
    "rtcBstrFromError",
    "rtcIsEmpty",
    "__vbaLateMemNamedCallLd",
    "__vbaI4Var",
    "rtcGetMonthOfYear",
    "rtcLeftCharBstr",
    "VBDllRegisterServer",
    "__vbaInStrVar",
    "__vbaVarCmpEq",
    "rtcGetDateBstr",
    "rtcNPV",
    "rtcSYD",
    "__vbaGenerateBoundsError",
    "BASIC_DISPINTERFACE_GetTICount",
    "__vbaVarSetUnk",
    "_adj_fdiv_m32",
    "__vbaVarAnd",
    "rtcRightCharBstr",
    "DllUnregisterServer",
    "__vbaNextEachVar",
    "__vbaVarSetVarAddref",
    "__vbaPut4",
    "rtcFileLen",
    "__vbaVarTextCmpEq",
    "__vbaUnkVar",
    "__vbaStrComp",
    "__vbaCyForNext",
    "__vbaLsetFixstrFree",
    "__vbaVarIndexLoadRef",
    "rtcRightTrimBstr",
    "__vbaI4ForNextCheck",
    "__vbaFpCDblR4",
    "_CIcos",
    "__vbaVargParmRef",
    "rtcCompareBstr",
    "_adj_fptan",
    "BASIC_CLASS_AddRef",
    "__vbaR4Var",
    "__vbaR8FixI2",
    "BASIC_CLASS_QueryInterface",
    "__vbaStrToUnicode",
    "_CIsqrt",
    "__vbaCyInt",
    "rtcGetFileAttr",
    "DLLGetDocumentation",
    "IID_IVbaHost",
    "SetMemEvent",
    "rtcInputCount",
    "__vbaFpCDblR8",
    "__vbaStrI4",
    "_adj_fdiv_m64",
    "__vbaR4Sgn",
    "rtcByteValueBstr",
    "__vbaPutFxStr3",
    "__vbaFreeStr",
    "rtcMidVar",
    "__vbaLateMemCallSt",
    "rtI2FromErrVar",
    "rtcFileCopy",
    "__vbaVarMove",
    "__vbaI4Cy",
    "rtcChangeDrive",
    "__vbaInStr",
    "__vbaNew",
    "VarPtr",
    "__vbaVarCmpNe",
    "rtcTrimVar",
    "__vbaI2ForNextCheck",
    "rtcGetYear",
    "__vbaFpUI1",
    "__vbaCyAbs",
    "_adj_fprem",
    "__vbaLateIdStAd",
    "__vbaVargObjAddref",
    "CopyRecord",
    "__vbaVarLikeVar",
    "__vbaPutFxStr4",
    "TipUnloadProject",
    "__vbaNextEachAry",
    "__vbaVarAbs",
    "__vbaVarCopy",
    "rtcBstrFromFormatVar",
    "__vbaVarTextTstLe",
    "__vbaCyMul",
    "__vbaI2Cy",
    "rtcStringVar",
    "__vbaInStrB",
    "__vbaLateIdCallSt",
    "rtcRandomize",
    "__vbaStrI2",
    "__vbaVargUnk",
    "__vbaVarIndexStore",
    "rtcVarFromVar",
    "rtBoolFromErrVar",
    "EVENT_SINK_Release",
    "__vbaVarAdd",
    "rtcUpperCaseBstr",
    "rtcInputCountVar",
    "__vbaStrR4",
    "__vbaVarOr",
    "__vbaAryRebase1Var",
    "EVENT_SINK2_AddRef",
    "__vbaPutOwner4",
    "EbLibraryUnload",
    "rtcDoEvents",
    "__vbaLateMemNamedStAd",
    "__vbaLineInputStr",
    "rtcSLN",
    "TipInvokeMethod",
    "rtcEnvironVar",
    "__vbaRedimPreserve",
    "__vbaVarTextCmpGe",
    "__vbaDerefAry1",
    "rtcVarDateFromVar",
    "rtcGetHourOfDay",
    "__vbaCySub",
    "PutMem2",
    "__vbaStrAryToUnicode",
    "__vbaLateMemStAd",
    "rtcIMEStatus",
    "EbResetProjectNormal",
    "rtcRightCharVar",
    "__vbaGetOwner4",
    "__vbaVarTextCmpLe",
    "__vbaCyMulI2",
    "_CItan",
    "__vbaVarTextTstGe",
    "__vbaVarTextCmpGt",
    "__vbaFileLock",
    "Zombie_GetTypeInfoCount",
    "rtcExp",
    "__vbaAryMove",
    "rtcCurrentDir",
    "VBDllGetClassObject",
    "rtcGetSetting",
    "__vbaI4Str",
    "__vbaFileOpen",
    "__vbaUI1I2",
    "rtcGetTimeVar",
    "__vbaRecAssign",
    "__vbaHresultCheckNonvirt",
    "__vbaUI1Sgn",
    "__vbaR8FixI4",
    "__vbaVarForNext",
    "__vbaUI1Cy",
    "UserDllMain",
    "_CIsin",
    "rtcSpaceVar",
    "rtCyFromErrVar",
    "rtcDateAdd",
    "__vbaBoolVar",
    "rtcGetDateVar",
    "__vbaCySgn",
    "__vbaAryConstruct",
    "__vbaFpI2",
    "__vbaErrorOverflow",
    "__vbaVarTextTstLt",
    "__vbaUI1I4",
    "TipCreateInstanceEx",
    "__vbaLsetFixstr",
    "__vbaLateMemNamedCallSt",
    "__vbaI2Abs",
    "rtcLenCharVar",
    "__vbaInputFile",
    "__vbaR8IntI4",
    "ProcCallEngine",
    "__vbaCheckType",
    "__vbaI2Str",
    "rtcGetHostLCID",
    "EbDestroyContext",
    "rtcAnsiValueBstr",
    "__vbaVarTstGt",
    "__vbaStrBool",
    "rtcGetTimeBstr",
    "rtBstrFromErrVar",
    "__vbaVarVargNofree",
    "rtcOctBstrFromVar",
    "__vbaAryUnlock",
    "__vbaI4ErrVar",
    "SetMemVar",
    "rtcRightBstr",
    "__vbaNextEachCollVar",
    "__vbaCopyBytes",
    "rtcSetDateVar",
    "__vbaStrMove",
    "__vbaGosub",
    "__vbaMidStmtBstr",
    "__vbaStrErrVarCopy",
    "rtcIsObject",
    "GetMem4",
    "__vbaVarTstLe",
    "__vbaNextEachCollAd",
    "__vbaFixstrConstruct",
    "rtcIsNull",
    "__vbaR8Cy",
    "rtcSqr",
    "__vbaFileCloseAll",
    "rtcGetCurrentCalendar",
    "__vbaCyVar",
    "__vbaStopExe",
    "rtcInputCharCount",
    "__vbaRecUniToAnsi",
    "rtcLeftTrimBstr",
    "__vbaNextEachCollObj",
    "__vbaStrVarVal",
    "rtcCommandVar",
    "__vbaVarSetObjAddref",
    "__vbaI2ErrVar",
    "rtDecFromVar",
    "__vbaForEachCollVar",
    "__vbaNew2",
    "__vbaObjSet",
    "Zombie_AddRef",
    "rtcLenVar",
    "GetMemEvent",
    "EbGetVBAObject",
    "PutMemObj",
    "__vbaOnError",
    "__vbaError",
    "__vbaGet3",
    "rtcGetObject",
    "__vbaFreeVar",
    "rtcPackDate",
    "rtcQBColor",
    "__vbaAptOffset",
    "rtcVarBstrFromChar",
    "__vbaVarMod",
    "__vbaObjAddref",
    "__vbaRedim",
    "__vbaVarTstNe",
    "__vbaRsetFixstr",
    "__vbaVarErrI4",
    "rtcRemoveDir",
    "__vbaNameFile",
    "__vbaRsetFixstrFree",
    "__vbaVarSetObj",
    "__vbaVarCmpGe",
    "PutMemNewObj",
    "rtcVarFromFormatVar",
    "rtcBstrFromByte",
    "__vbaVarLike",
    "__vbaExitEachVar",
    "rtcDateFromVar",
    "PutMem1",
    "__vbaVarCmpGt",
    "rtcImmediateIf",
    "rtcGetDayOfWeek",
    "rtcSetFileAttr",
    "__vbaFreeVarg",
    "rtcKillFiles",
    "__vbaStr2Vec",
    "GetMemVar",
    "rtcMacId",
    "rtcMidBstr",
    "__vbaRefVarAry",
    "__vbaLenVarB",
    "__vbaEnd",
    "PutMem8",
    "rtcMIRR",
    "__vbaLenBstrB",
    "rtcSetTimeVar",
    "rtcSin",
    "__vbaRecDestructAnsi",
    "__vbaHresultCheckObj",
    "__vbaVarTextLike",
    "rtcLeftVar",
    "_adj_fdivr_m64",
    "Zombie_GetTypeInfo",
    "_CIatan",
    "rtcUpperCaseVar",
    "__vbaFileSeek",
    "_adj_fdivr_m32i",
    "rtcIsNumeric",
    "rtcSetDateBstr",
    "DllFunctionCall",
    "rtcCVErrFromVar",
    "__vbaVarForInit",
    "__vbaVarIndexLoadRefLock",
    "__vbaVarSub",
    "__vbaForEachAry",
    "__vbaVarCmpLe",
    "__vbaUI1Var",
    "GetMemStr",
    "CreateIExprSrvObj",
    "__vbaFreeObj",
    "rtcIntVar",
    "rtcSwitch",
    "__vbaPowerR8",
    "rtcSaveSetting",
    "__vbaForEachCollObj",
    "__vbaVarTstLt",
    "EVENT_SINK_Invoke",
    "__vbaAryVarVarg",
    "rtcSendKeys",
    "__vbaVar2Vec",
    "rtcOctVarFromVar",
    "GetMem1",
    "rtR8FromErrVar",
    "__vbaVarTstGe",
    "rtcMidCharBstr",
    "__vbaStrCopy",
    "rtcIsMissing",
    "__vbaVerifyVarObj",
    "__vbaAryLock",
    "__vbaR4ErrVar",
    "__vbaStrTextCmp",
    "__vbaUI1ErrVar",
    "__vbaVarDateVar",
    "rtcGetMinuteOfHour",
    "__vbaUI1Str",
    "__vbaR8Sgn",
    "rtcPMT",
    "Zombie_Invoke",
    "EbCreateContext",
    "__vbaFileClose",
    "__vbaR8ErrVar",
    "__vbaVarXor",
    "MethCallEngine",
    "rtR4FromErrVar",
    "rtcGetTimer",
    "__vbaChkstk",
    "__vbaVarNeg",
    "rtcMidCharVar",
    "__vbaDateVar",
    "rtcSetTimeBstr",
    "__vbaObjVar",
    "EVENT_SINK_GetIDsOfNames",
    "__vbaVarIdiv",
    "__vbaEraseNoPop",
    "rtcAbsVar",
    "__vbaFreeVarList",
    "rtcVarBstrFromByte",
    "rtcLeftBstr",
    "__vbaUbound",
    "__vbaResume",
    "rtcFileSeek",
    "rtcSetCurrentCalendar",
    "rtcHexBstrFromVar",
    "rtcEnvironBstr",
    "rtcPackTime",
    "__vbaStrFixstr",
    "rtcCreateObject",
    "rtcCommandBstr",
    "__vbaFPInt",
    "BASIC_CLASS_GetIDsOfNames",
    "__vbaMidStmtBstrB",
    "rtcShell",
    "rtI4FromErrVar",
    "__vbaGetFxStr3",
    "EVENT_SINK_QueryInterface",
    "__vbaLateIdNamedCallLd",
    "__vbaVargVarMove",
    "__vbaGosubReturn",
    "__vbaVargVarCopy",
    "TipUnloadInstance",
    "rtcTrimBstr",
    "__vbaR4Cy",
    "__vbaLateMemSt",
    "__vbaVarDiv",
    "__vbaStrCy",
    "__vbaDateR8",
    "rtcLowerCaseVar",
    "__vbaVarTextLikeVar",
    "rtcGetPresentDate",
    "rtcFixVar",
    "rtcGetAllSettings",
    "rtcVarType",
    "rtcInStrChar",
    "__vbaLenBstr",
    "rtcRate",
    "DllRegisterServer",
    "rtcDateDiff",
    "rtcVarBstrFromAnsi",
    "rtcArray",
    "rtcIsDate",
    "__vbaRaiseEvent",
    "__vbaFPException",
    "rtcDeleteSetting",
    "rtcLowerCaseBstr",
    "rtcRightTrimVar",
    "rtcGetTimeValue",
    "rtcStrFromVar",
    "__vbaStrVarCopy",
    "GetMemNewObj",
    "_CIlog",
    "__vbaVarNot",
    "rtcFileLocation",
    "__vbaVarEqv",
    "__vbaBoolVarNull",
    "rtcCurrentDirBstr",
    "rtcLog",
    "BASIC_DISPINTERFACE_GetTypeInfo"
  ],
  "msvbvm60.dll": [
    "__vbaVarLateMemCallSt",
    "EbIsProjectOnStack",
    "__vbaR4ForNextCheck",
    "__vbaPut3",
    "Zombie_GetIDsOfNames",
    "rtcTypeName",
    "__vbaHresultCheck",
    "rtcChangeDir",
    "EbGetObjConnectionCounts",
    "__vbaLateMemNamedCall",
    "GetMemObj",
    "__vbaStrAryToAnsi",
    "rtcEndOfFile",
    "rtcVarStrFromVar",
    "rtcStrConvVar2",
    "__vbaStrDate",
    "__vbaCastObjVar",
    "__vbaLineInputVar",
    "__vbaVarPow",
    "EbLoadRunTime",
    "rtcFileAttributes",
    "EVENT_SINK_AddRef",
    "__vbaVarInt",
    "__vbaMidStmtVarB",
    "__vbaGetOwner3",
    "TipSetOption",
    "__vbaFailedFriend",
    "__vbaFreeStrList",
    "rtcSplit",
    "__vbaLateIdCall",
    "__vbaLateIdNamedCall",
    "__vbaGetFxStr4",
    "__vbaOnGoCheck",
    "__vbaR8ForNextCheck",
    "__vbaCyStr",
    "Zombie_Release",
    "__vbaCastObj",
    "__vbaFpI4",
    "__vbaVarTextCmpNe",
    "__vbaForEachVar",
    "__vbaExitProc",
    "SetMemNewObj",
    "__vbaPrintFile",
    "__vbaObjSetAddref",
    "rtcGetErl",
    "__vbaBoolStr",
    "rtcLeftCharVar",
    "rtcInputBox",
    "rtcCos",
    "__vbaMidStmtVar",
    "EbResetProject",
    "rtcStrConvVar",
    "rtcFV",
    "VBDllCanUnloadNow",
    "BASIC_CLASS_Release",
    "__vbaLateIdCallLd",
    "rtcInputCharCountVar",
    "_CIexp",
    "__vbaVarZero",
    "__vbaI2I4",
    "__vbaStrVarMove",
    "TipGetAddressOfPredeclaredInstance",
    "__vbaLenVar",
    "__vbaVarTextTstEq",
    "rtcDDB",
    "__vbaWriteFile",
    "rtcTan",
    "__vbaStrCat",
    "rtcAppActivate",
    "__vbaEraseKeepData",
    "__vbaVarSetUnkAddref",
    "rtcJoin",
    "rtcChoose",
    "_adj_fdiv_m16i",
    "ThunRTMain",
    "rtcFileReset",
    "__vbaStrCompVar",
    "rtcBstrFromAnsi",
    "__vbaVarSetVar",
    "rtcPV",
    "rtcReplace",
    "__vbaStrTextLike",
    "__vbaGet4",
    "_adj_fpatan",
    "__vbaDerefAry",
    "__vbaR8Var",
    "__vbaStrLike",
    "__vbaVarTextTstGt",
    "__vbaVargUnkAddref",
    "rtcCharValueBstr",
    "__vbaLbound",
    "SetMemObj",
    "__vbaErase",
    "EbSetContextWorkerThread",
    "__vbaVarIndexStoreObj",
    "__vbaFpCSngR4",
    "rtcGetDateValue",
    "__vbaCheckTypeVar",
    "__vbaR8IntI2",
    "__vbaExceptHandler",
    "__vbaI2Sgn",
    "__vbaFpCy",
    "EVENT_SINK2_Release",
    "__vbaVarDup",
    "__vbaLateMemCall",
    "__vbaExitEachAry",
    "rtcStringBstr",
    "__vbaStrCmp",
    "__vbaFreeObjList",
    "BASIC_CLASS_Invoke",
    "__vbaRecAnsiToUni",
    "__vbaUdtVar",
    "rtcDir",
    "__vbaAryDestruct",
    "rtcSgnVar",
    "rtcBstrFromChar",
    "__vbaPrintObj",
    "__vbaVarTstEq",
    "__vbaVarIndexLoad",
    "_allmul",
    "__vbaDateR4",
    "__vbaVarFix",
    "rtcWeekdayName",
    "__vbaForEachCollAd",
    "__vbaSetSystemError",
    "rtcDatePart",
    "rtcPPMT",
    "rtcRightVar",
    "__vbaCyErrVar",
    "PutMem4",
    "__vbaRedimPreserveVar",
    "__vbaAryCopy",
    "__vbaVarLateMemCallLd",
    "__vbaI4Sgn",
    "__vbaCyI4",
    "__vbaFpCSngR8",
    "EbLibraryLoad",
    "rtcRandomNext",
    "__vbaVarCmpLt",
    "rtcIsError",
    "rtcBeep",
    "rtcMakeDir",
    "__vbaStrToAnsi",
    "__vbaFpR8",
    "rtcGetDayOfMonth",
    "rtcHexVarFromVar",
    "__vbaLateMemCallLd",
    "GetMem8",
    "__vbaGosubFree",
    "PutMemEvent",
    "_adj_fdiv_m32i",
    "__vbaVarImp",
    "__vbaStrUI1",
    "rtcSpaceBstr",
    "__vbaRecDestruct",
    "_adj_fdivr_m16i",
    "__vbaCyFix",
    "_adj_fprem1",
    "__vbaCyUI1",
    "rtcFilter",
    "VBDllUnRegisterServer",
    "__vbaLateIdNamedStAd",
    "__vbaR4Str",
    "__vbaDateStr",
    "rtcInStr",
    "rtUI1FromErrVar",
    "__vbaCyForInit",
    "PutMemStr",
    "__vbaLateIdSt",
    "__vbaVargVarRef",
    "__vbaI2Var",
    "rtcLeftTrimVar",
    "rtcFileDateTime",
    "__vbaLateIdNamedCallSt",
    "__vbaFpCmpCy",
    "rtcMsgBox",
    "__vbaCyI2",
    "rtcIPMT",
    "_adj_fdiv_r",
    "rtcRgb",
    "rtcGetSecondOfMinute",
    "__vbaBoolErrVar",
    "rtcR8ValFromBstr",
    "__vbaFpR4",
    "rtcFileLength",
    "rtcIsArray",
    "__vbaVarTextTstNe",
    "rtcPartition",
    "rtcAtn",
    "__vbaInStrVarB",
    "Zombie_QueryInterface",
    "DllCanUnloadNow",
    "__vbaVarCat",
    "rtcFormatNumber",
    "__vbaI4Abs",
    "rtcErrObj",
    "rtcAppleScript",
    "rtcFileWidth",
    "__vbaExitEachColl",
    "__vbaCyAdd",
    "__vbaObjIs",
    "rtcNPer",
    "__vbaFPFix",
    "__vbaVarTextCmpLt",
    "__vbaStrR8",
    "rtcVarFromError",
    "rtcFormatPercent",
    "rtcFreeFile",
    "__vbaVarMul",
    "TipInvokeMethod2",
    "__vbaR8Str",
    "EbGetErrorInfo",
    "__vbaVargVar",
    "__vbaPutOwner3",
    "rtcIRR",
    "PutMemVar",
    "GetMem2",
    "_adj_fdivr_m32",
    "__vbaRedimVar",
    "EbGetHandleOfExecutingProject",
    "__vbaVargObj",
    "rtcBstrFromError",
    "rtcIsEmpty",
    "__vbaLateMemNamedCallLd",
    "__vbaI4Var",
    "rtcGetMonthOfYear",
    "rtcLeftCharBstr",
    "VBDllRegisterServer",
    "__vbaInStrVar",
    "__vbaVarCmpEq",
    "rtcFormatCurrency",
    "rtcGetDateBstr",
    "rtcNPV",
    "rtcSYD",
    "__vbaGenerateBoundsError",
    "BASIC_DISPINTERFACE_GetTICount",
    "__vbaVarSetUnk",
    "_adj_fdiv_m32",
    "__vbaVarAnd",
    "rtcRightCharBstr",
    "DllUnregisterServer",
    "__vbaNextEachVar",
    "__vbaVarSetVarAddref",
    "__vbaPut4",
    "rtcFileLen",
    "__vbaVarTextCmpEq",
    "__vbaUnkVar",
    "__vbaStrComp",
    "__vbaCyForNext",
    "__vbaLsetFixstrFree",
    "__vbaVarIndexLoadRef",
    "rtcRightTrimBstr",
    "__vbaI4ForNextCheck",
    "__vbaFpCDblR4",
    "_CIcos",
    "__vbaVargParmRef",
    "rtcCompareBstr",
    "_adj_fptan",
    "BASIC_CLASS_AddRef",
    "__vbaR4Var",
    "__vbaR8FixI2",
    "BASIC_CLASS_QueryInterface",
    "__vbaStrToUnicode",
    "_CIsqrt",
    "__vbaCyInt",
    "rtcGetFileAttr",
    "DLLGetDocumentation",
    "IID_IVbaHost",
    "SetMemEvent",
    "rtcInputCount",
    "__vbaFpCDblR8",
    "__vbaStrI4",
    "_adj_fdiv_m64",
    "__vbaR4Sgn",
    "rtcByteValueBstr",
    "__vbaPutFxStr3",
    "__vbaFreeStr",
    "rtcMidVar",
    "__vbaLateMemCallSt",
    "rtI2FromErrVar",
    "rtcFileCopy",
    "__vbaVarMove",
    "__vbaI4Cy",
    "rtcChangeDrive",
    "__vbaInStr",
    "__vbaNew",
    "VarPtr",
    "__vbaVarCmpNe",
    "rtcTrimVar",
    "__vbaI2ForNextCheck",
    "rtcGetYear",
    "__vbaFpUI1",
    "rtcCreateObject2",
    "__vbaCyAbs",
    "__vbaVarLateMemStAd",
    "_adj_fprem",
    "__vbaLateIdStAd",
    "__vbaVargObjAddref",
    "CopyRecord",
    "__vbaVarLikeVar",
    "__vbaPutFxStr4",
    "TipUnloadProject",
    "__vbaNextEachAry",
    "__vbaVarAbs",
    "__vbaVarCopy",
    "rtcBstrFromFormatVar",
    "__vbaVarTextTstLe",
    "rtcInStrRev",
    "__vbaCyMul",
    "__vbaI2Cy",
    "rtcStringVar",
    "__vbaInStrB",
    "__vbaLateIdCallSt",
    "rtcRandomize",
    "__vbaStrI2",
    "__vbaVargUnk",
    "__vbaVarIndexStore",
    "rtcVarFromVar",
    "rtBoolFromErrVar",
    "EVENT_SINK_Release",
    "__vbaVarAdd",
    "rtcUpperCaseBstr",
    "rtcInputCountVar",
    "__vbaStrR4",
    "__vbaVarOr",
    "__vbaAryRebase1Var",
    "EVENT_SINK2_AddRef",
    "__vbaPutOwner4",
    "EbLibraryUnload",
    "rtcDoEvents",
    "__vbaLateMemNamedStAd",
    "__vbaLineInputStr",
    "rtcSLN",
    "TipInvokeMethod",
    "rtcEnvironVar",
    "__vbaRedimPreserve",
    "__vbaVarTextCmpGe",
    "__vbaDerefAry1",
    "rtcVarDateFromVar",
    "rtcGetHourOfDay",
    "__vbaCySub",
    "PutMem2",
    "__vbaStrAryToUnicode",
    "__vbaLateMemStAd",
    "rtcIMEStatus",
    "EbResetProjectNormal",
    "rtcRightCharVar",
    "TipCreateInstanceProject2",
    "__vbaGetOwner4",
    "__vbaVarTextCmpLe",
    "__vbaCyMulI2",
    "_CItan",
    "__vbaVarTextTstGe",
    "__vbaVarTextCmpGt",
    "__vbaFileLock",
    "Zombie_GetTypeInfoCount",
    "rtcExp",
    "__vbaAryMove",
    "rtcCurrentDir",
    "VBDllGetClassObject",
    "rtcGetSetting",
    "__vbaI4Str",
    "__vbaFileOpen",
    "__vbaUI1I2",
    "__vbaAryRecMove",
    "rtcGetTimeVar",
    "__vbaRecAssign",
    "__vbaHresultCheckNonvirt",
    "__vbaUI1Sgn",
    "__vbaR8FixI4",
    "__vbaVarForNext",
    "__vbaUI1Cy",
    "UserDllMain",
    "_CIsin",
    "rtcSpaceVar",
    "__vbaVarLateMemSt",
    "rtCyFromErrVar",
    "rtcDateAdd",
    "__vbaBoolVar",
    "rtcGetDateVar",
    "__vbaCySgn",
    "__vbaAryConstruct",
    "__vbaFpI2",
    "__vbaErrorOverflow",
    "__vbaVarTextTstLt",
    "__vbaUI1I4",
    "TipCreateInstanceEx",
    "__vbaLsetFixstr",
    "__vbaLateMemNamedCallSt",
    "__vbaI2Abs",
    "rtcLenCharVar",
    "__vbaInputFile",
    "__vbaAryConstruct2",
    "__vbaR8IntI4",
    "DllGetClassObject",
    "ProcCallEngine",
    "__vbaCheckType",
    "__vbaI2Str",
    "rtcGetHostLCID",
    "EbDestroyContext",
    "__vbaAryVar",
    "rtcAnsiValueBstr",
    "__vbaVarTstGt",
    "__vbaStrBool",
    "rtcGetTimeBstr",
    "rtBstrFromErrVar",
    "__vbaVarVargNofree",
    "rtcOctBstrFromVar",
    "__vbaAryUnlock",
    "__vbaI4ErrVar",
    "SetMemVar",
    "rtcRightBstr",
    "__vbaNextEachCollVar",
    "__vbaCopyBytes",
    "rtcSetDateVar",
    "__vbaStrMove",
    "__vbaGosub",
    "__vbaMidStmtBstr",
    "__vbaStrErrVarCopy",
    "rtcIsObject",
    "GetMem4",
    "__vbaAryRecCopy",
    "__vbaVarTstLe",
    "__vbaNextEachCollAd",
    "__vbaFixstrConstruct",
    "rtcIsNull",
    "__vbaR8Cy",
    "rtcSqr",
    "__vbaFileCloseAll",
    "rtcGetCurrentCalendar",
    "__vbaCyVar",
    "__vbaStopExe",
    "rtcInputCharCount",
    "__vbaRecUniToAnsi",
    "rtcLeftTrimBstr",
    "__vbaNextEachCollObj",
    "__vbaStrVarVal",
    "rtcCommandVar",
    "__vbaVarSetObjAddref",
    "__vbaI2ErrVar",
    "rtDecFromVar",
    "__vbaForEachCollVar",
    "__vbaNew2",
    "__vbaObjSet",
    "Zombie_AddRef",
    "rtcLenVar",
    "__vbaCopyBytesZero",
    "GetMemEvent",
    "EbGetVBAObject",
    "PutMemObj",
    "__vbaOnError",
    "__vbaError",
    "__vbaGet3",
    "rtcGetObject",
    "__vbaVarLateMemCallLdRf",
    "__vbaFreeVar",
    "rtcPackDate",
    "rtcQBColor",
    "__vbaAptOffset",
    "rtcVarBstrFromChar",
    "__vbaVarMod",
    "rtcStrReverse",
    "__vbaObjAddref",
    "__vbaCVarAryUdt",
    "__vbaLdZeroAry",
    "__vbaRedim",
    "__vbaVarTstNe",
    "__vbaRsetFixstr",
    "__vbaVarErrI4",
    "rtcRemoveDir",
    "__vbaNameFile",
    "__vbaRsetFixstrFree",
    "__vbaVarSetObj",
    "__vbaVarCmpGe",
    "PutMemNewObj",
    "rtcVarFromFormatVar",
    "rtcBstrFromByte",
    "__vbaVarLike",
    "__vbaExitEachVar",
    "rtcDateFromVar",
    "PutMem1",
    "__vbaVarCmpGt",
    "rtcImmediateIf",
    "rtcGetDayOfWeek",
    "rtcSetFileAttr",
    "__vbaFreeVarg",
    "rtcKillFiles",
    "__vbaStr2Vec",
    "GetMemVar",
    "rtcMacId",
    "rtcMidBstr",
    "__vbaRefVarAry",
    "__vbaLenVarB",
    "__vbaEnd",
    "PutMem8",
    "rtcMIRR",
    "__vbaLenBstrB",
    "rtcSetTimeVar",
    "rtcSin",
    "__vbaRecDestructAnsi",
    "__vbaHresultCheckObj",
    "__vbaVarTextLike",
    "rtcLeftVar",
    "_adj_fdivr_m64",
    "Zombie_GetTypeInfo",
    "_CIatan",
    "rtcUpperCaseVar",
    "__vbaFileSeek",
    "_adj_fdivr_m32i",
    "rtcIsNumeric",
    "rtcSetDateBstr",
    "DllFunctionCall",
    "rtcCVErrFromVar",
    "__vbaVarForInit",
    "__vbaVarIndexLoadRefLock",
    "__vbaVarSub",
    "__vbaForEachAry",
    "__vbaVarCmpLe",
    "rtcMonthName",
    "__vbaUI1Var",
    "GetMemStr",
    "CreateIExprSrvObj",
    "__vbaFreeObj",
    "rtcIntVar",
    "rtcCallByName",
    "rtcSwitch",
    "__vbaPowerR8",
    "rtcSaveSetting",
    "__vbaForEachCollObj",
    "__vbaVarTstLt",
    "EVENT_SINK_Invoke",
    "__vbaAryVarVarg",
    "rtcSendKeys",
    "__vbaVar2Vec",
    "rtcOctVarFromVar",
    "GetMem1",
    "rtR8FromErrVar",
    "__vbaVarTstGe",
    "rtcMidCharBstr",
    "__vbaStrCopy",
    "rtcIsMissing",
    "__vbaVerifyVarObj",
    "__vbaAryLock",
    "__vbaR4ErrVar",
    "__vbaStrTextCmp",
    "__vbaUI1ErrVar",
    "__vbaVarDateVar",
    "rtcGetMinuteOfHour",
    "__vbaUI1Str",
    "__vbaR8Sgn",
    "rtcPMT",
    "Zombie_Invoke",
    "EbCreateContext",
    "__vbaFileClose",
    "__vbaR8ErrVar",
    "__vbaVarXor",
    "MethCallEngine",
    "rtR4FromErrVar",
    "rtcGetTimer",
    "__vbaChkstk",
    "__vbaVarNeg",
    "rtcMidCharVar",
    "__vbaDateVar",
    "rtcSetTimeBstr",
    "__vbaObjVar",
    "EVENT_SINK_GetIDsOfNames",
    "__vbaVarIdiv",
    "__vbaEraseNoPop",
    "rtcAbsVar",
    "__vbaFreeVarList",
    "rtcVarBstrFromByte",
    "rtcLeftBstr",
    "__vbaUbound",
    "__vbaResume",
    "rtcFileSeek",
    "rtcSetCurrentCalendar",
    "rtcHexBstrFromVar",
    "rtcEnvironBstr",
    "rtcPackTime",
    "__vbaStrFixstr",
    "rtcCreateObject",
    "rtcCommandBstr",
    "__vbaRedimVar2",
    "__vbaFPInt",
    "BASIC_CLASS_GetIDsOfNames",
    "__vbaMidStmtBstrB",
    "rtcShell",
    "rtI4FromErrVar",
    "__vbaGetFxStr3",
    "EVENT_SINK_QueryInterface",
    "__vbaLateIdNamedCallLd",
    "__vbaVargVarMove",
    "__vbaGosubReturn",
    "__vbaVargVarCopy",
    "TipUnloadInstance",
    "rtcTrimBstr",
    "__vbaR4Cy",
    "__vbaLateMemSt",
    "__vbaVarDiv",
    "__vbaStrCy",
    "__vbaDateR8",
    "rtcLowerCaseVar",
    "__vbaVarTextLikeVar",
    "rtcRound",
    "rtcGetPresentDate",
    "rtcFixVar",
    "rtcGetAllSettings",
    "rtcVarType",
    "rtcInStrChar",
    "__vbaLenBstr",
    "rtcRate",
    "__vbaRedimPreserveVar2",
    "DllRegisterServer",
    "rtcDateDiff",
    "rtcFormatDateTime",
    "rtcVarBstrFromAnsi",
    "rtcArray",
    "rtcIsDate",
    "__vbaRaiseEvent",
    "__vbaFPException",
    "rtcDeleteSetting",
    "rtcLowerCaseBstr",
    "rtcRightTrimVar",
    "rtcGetTimeValue",
    "rtcStrFromVar",
    "__vbaStrVarCopy",
    "GetMemNewObj",
    "_CIlog",
    "__vbaVarNot",
    "rtcFileLocation",
    "__vbaVarEqv",
    "__vbaBoolVarNull",
    "rtcCurrentDirBstr",
    "rtcLog",
    "BASIC_DISPINTERFACE_GetTypeInfo"
  ],
  "msvcirt.dll": [
    "public: int __thiscall ios::width(void)const",
    "public: class ostream & __thiscall ostream_withassign::operator=(class ostream const &)",
    "_mtlock",
    "public: __thiscall ofstream::ofstream(int)",
    "public: class streambuf * __thiscall fstream::setbuf(char *,int)",
    "public: __thiscall Iostream_init::Iostream_init(class ios &,int)",
    "public: class ostream & __thiscall ostream::operator<<(long double)",
    "public: virtual __thiscall ofstream::~ofstream(void)",
    "public: class istream & __thiscall istream::get(signed char &)",
    "public: __thiscall istrstream::istrstream(char *)",
    "public: class ostream & __thiscall ostream::operator<<(long)",
    "public: virtual void * __thiscall stdiostream::`scalar deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall exception::`vector deleting destructor'(unsigned int)",
    "public: class logic_error & __thiscall logic_error::operator=(class logic_error const &)",
    "public: void __thiscall streambuf::unlock(void)",
    "public: __thiscall streambuf::streambuf(class streambuf const &)",
    "public: virtual void * __thiscall filebuf::`vector deleting destructor'(unsigned int)",
    "const istream::`vbtable'",
    "public: virtual void * __thiscall strstreambuf::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall ostream::`vector deleting destructor'(unsigned int)",
    "const ostrstream::`vftable'",
    "protected: struct _CRT_CRITICAL_SECTION * __thiscall ios::lockptr(void)",
    "public: __thiscall ofstream::ofstream(int,char *,int)",
    "public: int __thiscall ios::good(void)const",
    "public: virtual void * __thiscall strstream::`vector deleting destructor'(unsigned int)",
    "public: void __thiscall ofstream::close(void)",
    "class ostream & __cdecl flush(class ostream &)",
    "protected: int __thiscall streambuf::allocate(void)",
    "public: __thiscall fstream::fstream(class fstream const &)",
    "protected: class ios & __thiscall ios::operator=(class ios const &)",
    "public: virtual void * __thiscall istream_withassign::`scalar deleting destructor'(unsigned int)",
    "public: virtual class streambuf * __thiscall filebuf::setbuf(char *,int)",
    "public: virtual void * __thiscall ostream_withassign::`vector deleting destructor'(unsigned int)",
    "public: void __cdecl ios::unlockbuf(void)",
    "public: virtual __thiscall strstream::~strstream(void)",
    "public: void __thiscall fstream::close(void)",
    "private: int __thiscall istream::getdouble(char *,int)",
    "public: virtual class streambuf * __thiscall strstreambuf::setbuf(char *,int)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned int)",
    "public: int __thiscall streambuf::out_waiting(void)const",
    "protected: void __thiscall streambuf::setg(char *,char *,char *)",
    "public: long __thiscall ios::flags(void)const",
    "const ios::`vftable'",
    "public: __thiscall stdiostream::stdiostream(struct _iobuf *)",
    "public: void __thiscall ifstream::close(void)",
    "public: void __thiscall streambuf::lock(void)",
    "const streambuf::`vftable'",
    "public: void __thiscall fstream::attach(int)",
    "public: static int const filebuf::openprot",
    "public: __thiscall exception::exception(void)",
    "public: int __thiscall streambuf::snextc(void)",
    "public: __thiscall iostream::iostream(class streambuf *)",
    "public: class istream & __thiscall istream::operator>>(long double &)",
    "public: virtual long __thiscall streambuf::seekpos(long,int)",
    "public: void __thiscall ios::delbuf(int)",
    "public: int __thiscall ios::delbuf(void)const",
    "const iostream::`vftable'",
    "public: virtual void * __thiscall ostream::`scalar deleting destructor'(unsigned int)",
    "public: long __thiscall ios::setf(long,long)",
    "public: int __thiscall ifstream::setmode(int)",
    "public: class streambuf * __thiscall ios::rdbuf(void)const",
    "public: int __thiscall ios::bad(void)const",
    "public: virtual void * __thiscall istream::`vector deleting destructor'(unsigned int)",
    "public: virtual int __thiscall filebuf::underflow(void)",
    "public: int __thiscall streambuf::sbumpc(void)",
    "public: __thiscall ofstream::ofstream(char const *,int,int)",
    "public: virtual int __thiscall filebuf::sync(void)",
    "public: virtual void * __thiscall istream_withassign::`vector deleting destructor'(unsigned int)",
    "public: virtual int __thiscall strstreambuf::sync(void)",
    "protected: char * __thiscall streambuf::base(void)const",
    "public: class istream_withassign & __thiscall istream_withassign::operator=(class istream_withassign const &)",
    "public: int __thiscall filebuf::is_open(void)const",
    "public: static void __cdecl ios::sync_with_stdio(void)",
    "public: int __thiscall streambuf::sputbackc(char)",
    "protected: __thiscall iostream::iostream(class iostream const &)",
    "const ofstream::`vftable'",
    "const ostream_withassign::`vbtable'",
    "public: class ostream & __thiscall ostream::write(char const *,int)",
    "class ostream & __cdecl ends(class ostream &)",
    "public: __thiscall istrstream::istrstream(class istrstream const &)",
    "public: void __thiscall ifstream::open(char const *,int,int)",
    "protected: __thiscall ios::ios(class ios const &)",
    "public: int __thiscall istream::ipfx(int)",
    "public: int __thiscall istream::gcount(void)const",
    "public: virtual void * __thiscall ofstream::`scalar deleting destructor'(unsigned int)",
    "public: class istream & __thiscall istream::seekg(long)",
    "public: virtual int __thiscall strstreambuf::underflow(void)",
    "protected: class istream & __thiscall istream::get(char *,int,int)",
    "public: class ostrstream & __thiscall ostrstream::operator=(class ostrstream const &)",
    "public: virtual void * __thiscall istream::`scalar deleting destructor'(unsigned int)",
    "public: void __thiscall ifstream::attach(int)",
    "public: static int const filebuf::text",
    "public: int __thiscall ofstream::setmode(int)",
    "public: int __thiscall streambuf::sgetn(char *,int)",
    "public: class ostream & __thiscall ostream_withassign::operator=(class streambuf *)",
    "public: __thiscall istream_withassign::istream_withassign(class streambuf *)",
    "public: virtual void * __thiscall ios::`scalar deleting destructor'(unsigned int)",
    "const ostream::`vftable'",
    "public: long __thiscall ios::setf(long)",
    "public: class istream & __thiscall istream_withassign::operator=(class streambuf *)",
    "public: virtual __thiscall strstreambuf::~strstreambuf(void)",
    "public: virtual __thiscall filebuf::~filebuf(void)",
    "public: __thiscall exception::exception(char const * const &)",
    "public: class istream & __thiscall istream::operator>>(signed char &)",
    "public: int __thiscall streambuf::sputc(int)",
    "public: class filebuf * __thiscall filebuf::open(char const *,int,int)",
    "public: class ostream & __thiscall ostream::operator<<(class ostream & (__cdecl*)(class ostream &))",
    "public: virtual void * __thiscall stdiobuf::`scalar deleting destructor'(unsigned int)",
    "protected: void __thiscall streambuf::unbuffered(int)",
    "public: __thiscall Iostream_init::~Iostream_init(void)",
    "public: virtual void * __thiscall ifstream::`vector deleting destructor'(unsigned int)",
    "protected: class iostream & __thiscall iostream::operator=(class iostream &)",
    "public: class istream & __thiscall istream::get(class streambuf &,char)",
    "public: class istream & __thiscall istream::getline(char *,int,char)",
    "public: class ostream & __thiscall ostream::put(unsigned char)",
    "public: char * __thiscall ostrstream::str(void)",
    "public: __thiscall fstream::fstream(char const *,int,int)",
    "public: virtual void * __thiscall streambuf::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall ifstream::`scalar deleting destructor'(unsigned int)",
    "public: int __thiscall streambuf::in_avail(void)const",
    "public: void __thiscall ofstream::`vbase destructor'(void)",
    "public: __thiscall ostrstream::ostrstream(void)",
    "const logic_error::`vftable'",
    "public: class istream & __thiscall istream::operator>>(long &)",
    "protected: class iostream & __thiscall iostream::operator=(class streambuf *)",
    "protected: virtual int __thiscall strstreambuf::doallocate(void)",
    "public: long & __thiscall ios::iword(int)const",
    "public: virtual int __thiscall stdiobuf::underflow(void)",
    "const strstreambuf::`vftable'",
    "public: __thiscall ostream_withassign::ostream_withassign(void)",
    "public: __thiscall strstream::strstream(void)",
    "public: void __thiscall streambuf::stossc(void)",
    "public: class filebuf & __thiscall filebuf::operator=(class filebuf const &)",
    "public: class ostream & __thiscall ostream::put(signed char)",
    "public: class ostream & __thiscall ostream::operator<<(int)",
    "public: __thiscall stdiostream::stdiostream(class stdiostream const &)",
    "public: virtual void * __thiscall istrstream::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall strstream::`scalar deleting destructor'(unsigned int)",
    "public: __thiscall istream::istream(class streambuf *)",
    "public: __thiscall ostrstream::ostrstream(char *,int,int)",
    "public: void __thiscall streambuf::dbp(void)",
    "public: void __thiscall iostream::`vbase destructor'(void)",
    "public: class streambuf & __thiscall streambuf::operator=(class streambuf const &)",
    "const fstream::`vbtable'{for `ostream'}",
    "public: static int const filebuf::sh_read",
    "protected: __thiscall istream::istream(class istream const &)",
    "public: class ifstream & __thiscall ifstream::operator=(class ifstream const &)",
    "const ostrstream::`vbtable'",
    "const ostream_withassign::`vftable'",
    "public: virtual void * __thiscall logic_error::`scalar deleting destructor'(unsigned int)",
    "public: static long const ios::adjustfield",
    "const istrstream::`vbtable'",
    "public: class filebuf * __thiscall filebuf::close(void)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned long)",
    "public: class stdiostream & __thiscall stdiostream::operator=(class stdiostream &)",
    "public: int __thiscall streambuf::sgetc(void)",
    "protected: char * __thiscall streambuf::ebuf(void)const",
    "public: class istream & __thiscall istream::get(char *,int,char)",
    "private: static long * ios::x_statebuf",
    "protected: class ostream & __thiscall ostream::operator=(class ostream const &)",
    "public: class ostream & __thiscall ostream::operator<<(class ios & (__cdecl*)(class ios &))",
    "public: __thiscall strstreambuf::strstreambuf(int)",
    "public: int __thiscall stdiobuf::setrwbuf(int,int)",
    "protected: static void __cdecl ios::unlockc(void)",
    "public: __thiscall ios::ios(class streambuf *)",
    "public: int __thiscall filebuf::setmode(int)",
    "public: class ostream & __thiscall ostream::operator<<(signed char const *)",
    "public: class ostream * __thiscall ios::tie(class ostream *)",
    "public: void __thiscall ostrstream::`vbase destructor'(void)",
    "public: virtual long __thiscall streambuf::seekoff(long,enum ios::seek_dir,int)",
    "public: void __cdecl ios::setlock(void)",
    "protected: char * __thiscall streambuf::pptr(void)const",
    "protected: __thiscall iostream::iostream(void)",
    "public: virtual __thiscall ios::~ios(void)",
    "public: __thiscall fstream::fstream(int,char *,int)",
    "public: virtual void * __thiscall exception::`scalar deleting destructor'(unsigned int)",
    "public: int __thiscall ios::fail(void)const",
    "public: char * __thiscall strstream::str(void)",
    "const stdiobuf::`vftable'",
    "public: virtual void * __thiscall iostream::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall ostrstream::`vector deleting destructor'(unsigned int)",
    "public: virtual char const * __thiscall exception::what(void)const",
    "public: __thiscall ifstream::ifstream(char const *,int,int)",
    "public: class istream & __thiscall istream::operator>>(class ios & (__cdecl*)(class ios &))",
    "public: void __thiscall ofstream::attach(int)",
    "public: virtual __thiscall ostrstream::~ostrstream(void)",
    "public: virtual void * __thiscall ostream_withassign::`scalar deleting destructor'(unsigned int)",
    "protected: void __thiscall streambuf::setb(char *,char *,int)",
    "protected: void __thiscall streambuf::setp(char *,char *)",
    "protected: static void __cdecl ios::lockc(void)",
    "public: class strstream & __thiscall strstream::operator=(class strstream &)",
    "public: class istream & __thiscall istream::read(char *,int)",
    "const iostream::`vbtable'{for `istream'}",
    "public: virtual __thiscall istrstream::~istrstream(void)",
    "protected: class istream & __thiscall istream::operator=(class streambuf *)",
    "public: __thiscall ofstream::ofstream(class ofstream const &)",
    "public: int __thiscall ofstream::is_open(void)const",
    "public: int __thiscall istream::peek(void)",
    "public: class ostream * __thiscall ios::tie(void)const",
    "public: class ostream & __thiscall ostream::seekp(long)",
    "public: class ostream & __thiscall ostream::write(unsigned char const *,int)",
    "protected: void __thiscall streambuf::gbump(int)",
    "protected: char * __thiscall streambuf::egptr(void)const",
    "public: class istream & __thiscall istream::operator>>(float &)",
    "public: class ostream & __thiscall ostream::operator<<(char)",
    "public: static int const filebuf::sh_none",
    "public: void __cdecl ios::lock(void)",
    "const ifstream::`vftable'",
    "public: void __thiscall stdiostream::`vbase destructor'(void)",
    "public: virtual void * __thiscall stdiostream::`vector deleting destructor'(unsigned int)",
    "public: int __thiscall fstream::setmode(int)",
    "public: virtual long __thiscall filebuf::seekoff(long,enum ios::seek_dir,int)",
    "public: class istream & __thiscall istream::operator>>(unsigned int &)",
    "public: class istream & __thiscall istream::ignore(int,int)",
    "public: int __thiscall istream::get(void)",
    "public: int __thiscall ios::operator!(void)const",
    "public: void __thiscall ostream::osfx(void)",
    "protected: __thiscall streambuf::streambuf(char *,int)",
    "public: __thiscall istrstream::istrstream(char *,int)",
    "public: __thiscall exception::exception(class exception const &)",
    "public: class filebuf * __thiscall filebuf::attach(int)",
    "public: long __thiscall ostream::tellp(void)",
    "public: class istream & __thiscall istream::get(unsigned char &)",
    "public: int __thiscall fstream::is_open(void)const",
    "public: class stdiobuf & __thiscall stdiobuf::operator=(class stdiobuf const &)",
    "public: char __thiscall ios::fill(char)",
    "public: class fstream & __thiscall fstream::operator=(class fstream &)",
    "const fstream::`vbtable'{for `istream'}",
    "public: virtual void * __thiscall filebuf::`scalar deleting destructor'(unsigned int)",
    "public: void __thiscall fstream::`vbase destructor'(void)",
    "public: class istream & __thiscall istream::putback(char)",
    "public: void __thiscall fstream::open(char const *,int,int)",
    "private: int __thiscall istream::getint(char *)",
    "public: void __thiscall streambuf::clrlock(void)",
    "protected: char * __thiscall streambuf::epptr(void)const",
    "protected: int __thiscall streambuf::blen(void)const",
    "public: class istream & __thiscall istream::operator>>(char *)",
    "public: static int __cdecl ios::xalloc(void)",
    "private: static struct _CRT_CRITICAL_SECTION ios::x_lockc",
    "public: class ostream & __thiscall ostream::operator<<(unsigned short)",
    "public: void __thiscall streambuf::setlock(void)",
    "const stdiostream::`vftable'",
    "public: virtual void * __thiscall streambuf::`scalar deleting destructor'(unsigned int)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned char)",
    "public: virtual class streambuf * __thiscall streambuf::setbuf(char *,int)",
    "public: void __thiscall strstreambuf::freeze(int)",
    "public: class istream & __thiscall istream::operator>>(unsigned char &)",
    "const istrstream::`vftable'",
    "public: virtual void * __thiscall strstreambuf::`scalar deleting destructor'(unsigned int)",
    "public: class strstreambuf * __thiscall istrstream::rdbuf(void)const",
    "const iostream::`vbtable'{for `ostream'}",
    "public: virtual __thiscall ostream_withassign::~ostream_withassign(void)",
    "public: virtual void * __thiscall ios::`vector deleting destructor'(unsigned int)",
    "const filebuf::`vftable'",
    "public: class Iostream_init & __thiscall Iostream_init::operator=(class Iostream_init const &)",
    "public: class istream & __thiscall istream::operator>>(class streambuf *)",
    "public: void __thiscall istream_withassign::`vbase destructor'(void)",
    "public: static int const filebuf::binary",
    "public: class exception & __thiscall exception::operator=(class exception const &)",
    "public: void __thiscall istream::`vbase destructor'(void)",
    "public: virtual __thiscall exception::~exception(void)",
    "protected: class istream & __thiscall istream::operator=(class istream const &)",
    "public: class ostream & __thiscall ostream::seekp(long,enum ios::seek_dir)",
    "public: static long __cdecl ios::bitalloc(void)",
    "const exception::`vftable'",
    "public: class ofstream & __thiscall ofstream::operator=(class ofstream const &)",
    "public: __thiscall istream_withassign::istream_withassign(void)",
    "protected: __thiscall istream::istream(void)",
    "public: __thiscall fstream::fstream(int)",
    "public: class istream & __thiscall istream::operator>>(unsigned short &)",
    "public: class istream & __thiscall istream::getline(signed char *,int,char)",
    "public: void __cdecl ios::clrlock(void)",
    "public: class istream & __thiscall istream::read(unsigned char *,int)",
    "public: virtual long __thiscall strstreambuf::seekoff(long,enum ios::seek_dir,int)",
    "public: class strstreambuf * __thiscall strstream::rdbuf(void)const",
    "_mtunlock",
    "public: class istream & __thiscall istream::getline(unsigned char *,int,char)",
    "public: virtual __thiscall istream::~istream(void)",
    "public: __thiscall strstreambuf::strstreambuf(unsigned char *,int,unsigned char *)",
    "public: __thiscall ostream::ostream(class streambuf *)",
    "public: int __thiscall ios::eof(void)const",
    "public: long __thiscall ios::flags(long)",
    "public: int __thiscall fstream::fd(void)const",
    "const stdiostream::`vbtable'{for `ostream'}",
    "private: static int ios::sunk_with_stdio",
    "public: class istream & __thiscall istream::get(unsigned char *,int,char)",
    "public: __thiscall ios::operator void *(void)const",
    "class ios & __cdecl oct(class ios &)",
    "public: void __thiscall istream::eatwhite(void)",
    "const ifstream::`vbtable'",
    "public: __thiscall ifstream::ifstream(int)",
    "public: __thiscall ifstream::ifstream(int,char *,int)",
    "public: class ostream & __thiscall ostream::operator<<(double)",
    "public: class ostream_withassign & __thiscall ostream_withassign::operator=(class ostream_withassign const &)",
    "class ostream_withassign clog",
    "public: class ostream & __thiscall ostream::operator<<(short)",
    "public: class istream & __thiscall istream::operator>>(class istream & (__cdecl*)(class istream &))",
    "public: __thiscall strstreambuf::strstreambuf(void * (__cdecl*)(long),void (__cdecl*)(void *))",
    "public: __thiscall filebuf::filebuf(void)",
    "public: class stdiobuf * __thiscall stdiostream::rdbuf(void)const",
    "public: class ostream & __thiscall ostream::write(signed char const *,int)",
    "public: char * __thiscall strstreambuf::str(void)",
    "public: class ostream & __thiscall ostream::operator<<(signed char)",
    "public: virtual int __thiscall filebuf::overflow(int)",
    "public: virtual int __thiscall streambuf::xsputn(char const *,int)",
    "public: __thiscall ostrstream::ostrstream(class ostrstream const &)",
    "public: virtual __thiscall fstream::~fstream(void)",
    "public: class istream & __thiscall istream::operator>>(double &)",
    "public: int __thiscall streambuf::sputn(char const *,int)",
    "public: __thiscall ostream_withassign::ostream_withassign(class ostream_withassign const &)",
    "public: class streambuf * __thiscall ofstream::setbuf(char *,int)",
    "public: static long const ios::basefield",
    "public: void __thiscall istream::isfx(void)",
    "public: __thiscall logic_error::logic_error(class logic_error const &)",
    "public: __thiscall strstreambuf::strstreambuf(void)",
    "public: class istream & __thiscall istream::operator>>(char &)",
    "public: class istream & __thiscall istream_withassign::operator=(class istream const &)",
    "public: int __thiscall ostream::opfx(void)",
    "public: virtual __thiscall streambuf::~streambuf(void)",
    "protected: void __thiscall ios::init(class streambuf *)",
    "public: virtual long __thiscall stdiobuf::seekoff(long,enum ios::seek_dir,int)",
    "public: __thiscall istream_withassign::istream_withassign(class istream_withassign const &)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned char const *)",
    "const stdiostream::`vbtable'{for `istream'}",
    "public: static int const filebuf::sh_write",
    "public: virtual void * __thiscall logic_error::`vector deleting destructor'(unsigned int)",
    "public: __thiscall filebuf::filebuf(int)",
    "public: void * & __thiscall ios::pword(int)const",
    "const strstream::`vbtable'{for `ostream'}",
    "public: int __thiscall strstream::pcount(void)const",
    "public: virtual int __thiscall streambuf::xsgetn(char *,int)",
    "public: class filebuf * __thiscall ofstream::rdbuf(void)const",
    "public: class istream & __thiscall istream::operator>>(unsigned long &)",
    "public: int __thiscall ostrstream::pcount(void)const",
    "public: static long const ios::floatfield",
    "const ostream::`vbtable'",
    "public: __thiscall ifstream::ifstream(void)",
    "public: class istream & __thiscall istream::read(signed char *,int)",
    "public: int __thiscall ios::rdstate(void)const",
    "public: __thiscall stdiobuf::stdiobuf(class stdiobuf const &)",
    "class istream & __cdecl ws(class istream &)",
    "class ostream & __cdecl endl(class ostream &)",
    "private: class ostream & __thiscall ostream::writepad(char const *,char const *)",
    "public: __thiscall stdiobuf::stdiobuf(struct _iobuf *)",
    "public: class istrstream & __thiscall istrstream::operator=(class istrstream const &)",
    "public: int __thiscall ios::width(int)",
    "const strstream::`vbtable'{for `istream'}",
    "public: int __thiscall ios::precision(int)",
    "const istream_withassign::`vftable'",
    "public: __thiscall logic_error::logic_error(char const * const &)",
    "public: void __thiscall ostream::`vbase destructor'(void)",
    "public: virtual int __thiscall streambuf::pbackfail(int)",
    "protected: __thiscall ostream::ostream(class ostream const &)",
    "private: static long ios::x_maxbit",
    "public: __thiscall ostream_withassign::ostream_withassign(class streambuf *)",
    "protected: __thiscall streambuf::streambuf(void)",
    "public: class filebuf * __thiscall fstream::rdbuf(void)const",
    "public: class istream & __thiscall istream::get(char &)",
    "public: void __thiscall ofstream::open(char const *,int,int)",
    "public: int __thiscall ifstream::is_open(void)const",
    "public: class ostream & __thiscall ostream::operator<<(char const *)",
    "public: int __thiscall ofstream::fd(void)const",
    "protected: int __thiscall streambuf::unbuffered(void)const",
    "public: class istream & __thiscall istream::operator>>(short &)",
    "protected: char * __thiscall streambuf::pbase(void)const",
    "public: class ostream & __thiscall ostream::operator<<(float)",
    "public: void __cdecl ios::unlock(void)",
    "public: class ostream & __thiscall ostream::operator<<(class streambuf *)",
    "public: class strstreambuf & __thiscall strstreambuf::operator=(class strstreambuf const &)",
    "class ostream_withassign cout",
    "public: virtual __thiscall ifstream::~ifstream(void)",
    "protected: class ostream & __thiscall ostream::operator=(class streambuf *)",
    "public: __thiscall strstream::strstream(char *,int,int)",
    "public: long __thiscall istream::tellg(void)",
    "public: virtual int __thiscall stdiobuf::pbackfail(int)",
    "public: char __thiscall ios::fill(void)const",
    "public: class ostream & __thiscall ostream::flush(void)",
    "protected: struct _CRT_CRITICAL_SECTION * __thiscall streambuf::lockptr(void)",
    "protected: char * __thiscall streambuf::eback(void)const",
    "public: __thiscall ifstream::ifstream(class ifstream const &)",
    "public: virtual void * __thiscall fstream::`vector deleting destructor'(unsigned int)",
    "protected: void __thiscall streambuf::pbump(int)",
    "__dummy_export",
    "class ostream_withassign cerr",
    "public: class istream & __thiscall istream::operator>>(signed char *)",
    "public: virtual __thiscall ostream::~ostream(void)",
    "public: void __thiscall ostream_withassign::`vbase destructor'(void)",
    "private: static int ios::fLockcInit",
    "public: class strstreambuf * __thiscall ostrstream::rdbuf(void)const",
    "public: class streambuf * __thiscall ifstream::setbuf(char *,int)",
    "public: virtual __thiscall stdiostream::~stdiostream(void)",
    "const istream::`vftable'",
    "public: char * __thiscall istrstream::str(void)",
    "public: __thiscall filebuf::filebuf(class filebuf const &)",
    "public: int __thiscall filebuf::fd(void)const",
    "class ios & __cdecl dec(class ios &)",
    "public: long __thiscall ios::unsetf(long)",
    "public: class filebuf * __thiscall ifstream::rdbuf(void)const",
    "const ofstream::`vbtable'",
    "public: void __thiscall ios::clear(int)",
    "public: __thiscall filebuf::filebuf(int,char *,int)",
    "public: virtual void * __thiscall ostrstream::`scalar deleting destructor'(unsigned int)",
    "public: void __cdecl ios::lockbuf(void)",
    "protected: __thiscall ios::ios(void)",
    "public: __thiscall strstreambuf::strstreambuf(char *,int,char *)",
    "public: class ostream & __thiscall ostream::put(char)",
    "public: virtual int __thiscall stdiobuf::sync(void)",
    "public: virtual void * __thiscall iostream::`scalar deleting destructor'(unsigned int)",
    "public: virtual __thiscall iostream::~iostream(void)",
    "public: virtual int __thiscall streambuf::sync(void)",
    "public: __thiscall strstreambuf::strstreambuf(class strstreambuf const &)",
    "public: class istream & __thiscall istream::operator>>(unsigned char *)",
    "class istream_withassign cin",
    "public: class istream & __thiscall istream::get(signed char *,int,char)",
    "public: void __thiscall strstream::`vbase destructor'(void)",
    "private: static int ios::x_curindex",
    "public: __thiscall ofstream::ofstream(void)",
    "public: virtual void * __thiscall fstream::`scalar deleting destructor'(unsigned int)",
    "const strstream::`vftable'",
    "public: virtual int __thiscall strstreambuf::overflow(int)",
    "protected: __thiscall ostream::ostream(void)",
    "protected: char * __thiscall streambuf::gptr(void)const",
    "public: virtual __thiscall logic_error::~logic_error(void)",
    "public: int __thiscall ifstream::fd(void)const",
    "protected: virtual int __thiscall streambuf::doallocate(void)",
    "public: __thiscall fstream::fstream(void)",
    "public: void __thiscall istrstream::`vbase destructor'(void)",
    "public: virtual void * __thiscall ofstream::`vector deleting destructor'(unsigned int)",
    "class ios & __cdecl hex(class ios &)",
    "public: void __thiscall ifstream::`vbase destructor'(void)",
    "public: __thiscall strstream::strstream(class strstream const &)",
    "public: virtual void * __thiscall stdiobuf::`vector deleting destructor'(unsigned int)",
    "public: class istream & __thiscall istream::operator>>(int &)",
    "public: int __thiscall ios::precision(void)const",
    "public: virtual __thiscall stdiobuf::~stdiobuf(void)",
    "public: virtual __thiscall istream_withassign::~istream_withassign(void)",
    "public: class istream & __thiscall istream::seekg(long,enum ios::seek_dir)",
    "public: struct _iobuf * __thiscall stdiobuf::stdiofile(void)",
    "public: virtual void * __thiscall istrstream::`scalar deleting destructor'(unsigned int)",
    "public: virtual int __thiscall stdiobuf::overflow(int)",
    "public: __thiscall Iostream_init::Iostream_init(void)",
    "const fstream::`vftable'",
    "public: int __thiscall istream::sync(void)",
    "public: class ostream & __thiscall ostream::operator<<(void const *)",
    "const istream_withassign::`vbtable'"
  ],
  "msvcp50.dll": [
    "protected: virtual unsigned short const * __thiscall std::ctype::do_tolower(unsigned short *,unsigned short const *)const",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned short const *,unsigned short const *,class std::allocator const &)",
    "public: static unsigned long __cdecl std::numeric_limits::infinity(void)",
    "public: void __thiscall std::locale::facet::`default constructor closure'(void)",
    "public: static unsigned int __cdecl std::numeric_limits::min(void)",
    "public: void __thiscall std::basic_string,class std::allocator >::reserve(unsigned int)",
    "public: static unsigned char __cdecl std::numeric_limits::infinity(void)",
    "public: virtual __thiscall std::underflow_error::~underflow_error(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(int &)",
    "public: int __thiscall std::codecvt::in(int &,char const *,char const *,char const * &,unsigned short *,unsigned short *,unsigned short * &)const",
    "class std::complex __cdecl std::operator+(long double const &,class std::complex const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(unsigned short const *,unsigned int)const",
    "public: static double __cdecl std::_Ctr::cos(double)",
    "void __cdecl std::_Xran(void)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned short const *,class std::allocator const &)",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::underflow(void)",
    "public: class std::ostreambuf_iterator > __thiscall std::time_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,struct tm const *,unsigned short const *,unsigned short const *)const",
    "_Getctype",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(double &)",
    "protected: static char * __cdecl std::num_put > >::_Ifmt(char *,char,int)",
    "public: __thiscall std::complex::complex(double const &,double const &)",
    "public: virtual __thiscall std::money_get > >::~money_get > >(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::basic_streambuf > *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,char const *,unsigned int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(char const *,unsigned int)const",
    "long double const `long double __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_Xh",
    "bool __cdecl std::operator>=(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(unsigned short *,int,unsigned short)",
    "public: void __thiscall std::time_base::`default constructor closure'(void)",
    "bool __cdecl std::uncaught_exception(void)",
    "const std::range_error::`vftable'",
    "public: virtual char const * __thiscall std::logic_error::what(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(class std::basic_string,class std::allocator > const &)",
    "public: void __thiscall std::_Locinfo::`default constructor closure'(void)",
    "public: void __thiscall std::basic_streambuf >::stossc(void)",
    "public: __thiscall std::messages::messages(class std::_Locinfo const &,unsigned int)",
    "public: void __thiscall std::basic_istringstream,class std::allocator >::`vbase destructor'(void)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::money_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,bool,class std::ios_base &,int &,long double &)const",
    "public: static short __cdecl std::_Ctr::_Exp(double *,double,short)",
    "public: static long __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: __thiscall std::_Winit::~_Winit(void)",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_time(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_streambuf >::setbuf(char *,int)",
    "public: __thiscall std::basic_istream >::basic_istream >(class std::basic_istream > const &)",
    "public: static unsigned char __cdecl std::numeric_limits::round_error(void)",
    "public: virtual __thiscall std::collate::~collate(void)",
    "long double const `long double __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_R2",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,unsigned short const *,unsigned int)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_year(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(class std::basic_string,class std::allocator > const &)",
    "public: class std::ostreambuf_iterator > __thiscall std::money_put > >::put(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,class std::basic_string,class std::allocator > const &)const",
    "protected: virtual void __thiscall std::runtime_error::_Doraise(void)const",
    "public: virtual __thiscall std::length_error::~length_error(void)",
    "class std::complex __cdecl std::operator-(class std::complex const &,float const &)",
    "public: virtual __thiscall std::codecvt::~codecvt(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(char const *)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,class std::complex const &)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,unsigned char)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,unsigned char const *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(char const *,char const *)",
    "public: virtual __thiscall std::overflow_error::~overflow_error(void)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator+=(long double const &)",
    "public: static unsigned int __cdecl std::time_put > >::_Getcat(void)",
    "protected: char * __thiscall std::basic_streambuf >::pptr(void)const",
    "const std::basic_stringstream,class std::allocator >::`vftable'",
    "public: __thiscall std::_Complex_base::_Complex_base(long double const &,long double const &)",
    "public: static class std::locale::id std::num_get > >::id",
    "protected: char * __thiscall std::basic_streambuf >::epptr(void)const",
    "public: class std::fpos __thiscall std::basic_istream >::tellg(void)",
    "public: static unsigned short __cdecl std::char_traits::not_eof(unsigned short const &)",
    "public: __thiscall std::basic_filebuf >::basic_filebuf >(enum std::_Uninitialized)",
    "protected: void __thiscall std::basic_streambuf >::_Init(unsigned short * *,unsigned short * *,int *,unsigned short * *,unsigned short * *,int *)",
    "const std::basic_istringstream,class std::allocator >::`vbtable'",
    "private: class std::ostreambuf_iterator > __thiscall std::money_put > >::_Putmfld(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,bool,class std::basic_string,class std::allocator >)const",
    "public: char __thiscall std::ctype::toupper(char)const",
    "public: static unsigned long __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: static unsigned long __cdecl std::numeric_limits::min(void)",
    "public: class std::_Locinfo & __thiscall std::_Locinfo::_Addcats(int,char const *)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(bool)",
    "public: void __thiscall std::basic_ostringstream,class std::allocator >::`vbase destructor'(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(class std::basic_streambuf > &,char)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(unsigned short,unsigned int)const",
    "const std::basic_ifstream >::`vbtable'",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,void const *)const",
    "public: __thiscall std::overflow_error::overflow_error(class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::out_of_range::out_of_range(class std::basic_string,class std::allocator > const &)",
    "private: struct std::ios_base::_Iosarray & __thiscall std::ios_base::_Findarr(int)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Put(class std::ostreambuf_iterator >,char const *,unsigned int)",
    "public: __thiscall std::bad_alloc::bad_alloc(class std::bad_alloc const &)",
    "public: int __thiscall std::collate::compare(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)const",
    "public: int __thiscall std::basic_streambuf >::sgetn(char *,int)",
    "private: __thiscall std::locale::locale(class std::locale::_Locimp *)",
    "_FRteps",
    "public: static int __cdecl std::numeric_limits::round_error(void)",
    "protected: virtual unsigned short __thiscall std::ctype::do_toupper(unsigned short)const",
    "class std::complex __cdecl std::pow(long double const &,class std::complex const &)",
    "protected: virtual unsigned short __thiscall std::numpunct::do_decimal_point(void)const",
    "public: virtual __thiscall std::basic_istringstream,class std::allocator >::~basic_istringstream,class std::allocator >(void)",
    "public: unsigned short __thiscall std::basic_streambuf >::sungetc(void)",
    "public: __thiscall std::collate::collate(class std::_Locinfo const &,unsigned int)",
    "public: static class std::locale::id std::num_put > >::id",
    "private: static class std::locale::_Locimp * __cdecl std::locale::_Init(void)",
    "public: class std::basic_stringbuf,class std::allocator > * __thiscall std::basic_ostringstream,class std::allocator >::rdbuf(void)const",
    "public: static bool __cdecl std::numeric_limits::infinity(void)",
    "const std::out_of_range::`vftable'",
    "class std::basic_ostream > & __cdecl std::flush(class std::basic_ostream > &)",
    "class std::complex __cdecl std::sinh(class std::complex const &)",
    "public: char const * __thiscall std::ctype::widen(char const *,char const *,char *)const",
    "public: static char __cdecl std::numeric_limits::ignaling_NaN(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(char const *,unsigned int)const",
    "const std::basic_ostringstream,class std::allocator >::`vftable'",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(unsigned short *,int)",
    "public: __thiscall std::num_put > >::num_put > >(class std::_Locinfo const &,unsigned int)",
    "public: void __thiscall std::time_get > >::`default constructor closure'(void)",
    "protected: virtual unsigned short __thiscall std::numpunct::do_thousands_sep(void)const",
    "public: char __thiscall std::basic_ios >::fill(void)const",
    "public: __thiscall std::domain_error::domain_error(class std::domain_error const &)",
    "public: static float __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(char const *,unsigned int)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(char const *)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_string,class std::allocator >::substr(unsigned int,unsigned int)const",
    "public: static int __cdecl std::char_traits::compare(char const *,char const *,unsigned int)",
    "private: static unsigned short const * __cdecl std::basic_string,class std::allocator >::_Psum(unsigned short const *,unsigned int)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,unsigned short const *)const",
    "bool __cdecl std::operator==(long double const &,class std::complex const &)",
    "public: void __thiscall std::basic_fstream >::open(char const *,short)",
    "public: __thiscall std::num_get > >::num_get > >(unsigned int)",
    "private: static unsigned int __cdecl std::basic_string,class std::allocator >::_Pdif(unsigned short const *,unsigned short const *)",
    "public: __thiscall std::messages_base::messages_base(unsigned int)",
    "public: __thiscall std::complex::complex(class std::complex const &)",
    "private: void __thiscall std::basic_string,class std::allocator >::_Copy(unsigned int)",
    "private: void __thiscall std::basic_string,class std::allocator >::_Tidy(bool)",
    "private: void __thiscall std::basic_string,class std::allocator >::_Split(void)",
    "_FExp",
    "public: static void __cdecl std::char_traits::assign(unsigned short &,unsigned short const &)",
    "const std::runtime_error::`vftable'",
    "public: __thiscall std::basic_stringstream,class std::allocator >::basic_stringstream,class std::allocator >(int)",
    "private: static bool std::ios_base::_Sync",
    "public: static long __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::write(char const *,int)",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_year(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: void __thiscall std::basic_string,class std::allocator >::swap(class std::basic_string,class std::allocator > &)",
    "public: class std::_Locinfo & __thiscall std::_Locinfo::operator=(class std::_Locinfo const &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,void const *)const",
    "public: static signed char __cdecl std::numeric_limits::min(void)",
    "_Nan",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(unsigned short const *,unsigned int)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(class std::basic_streambuf > &,unsigned short)",
    "public: double __thiscall std::_Complex_base::imag(void)const",
    "class std::complex __cdecl std::polar(double const &,double const &)",
    "protected: virtual int __thiscall std::basic_filebuf >::pbackfail(int)",
    "private: static class std::locale::_Locimp * std::locale::_Locimp::_Clocptr",
    "class std::complex __cdecl std::operator/(class std::complex const &,class std::complex const &)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::_Gndec(void)",
    "public: int __thiscall std::ios_base::precision(void)const",
    "const std::basic_ios >::`vftable'",
    "class std::basic_ostream > std::wcout",
    "bool __cdecl std::operator!=(class std::complex const &,double const &)",
    "public: class std::bad_exception & __thiscall std::bad_exception::operator=(class std::bad_exception const &)",
    "public: class std::basic_streambuf > * __thiscall std::basic_ios >::rdbuf(class std::basic_streambuf > *)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned int,unsigned int,class std::allocator const &)",
    "public: __thiscall std::underflow_error::underflow_error(class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::basic_ios >::basic_ios >(class std::basic_streambuf > *)",
    "protected: virtual char const * __thiscall std::ctype::do_toupper(char *,char const *)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::messages::get(int,int,int,class std::basic_string,class std::allocator > const &)const",
    "public: unsigned short const * __thiscall std::basic_string,class std::allocator >::c_str(void)const",
    "protected: virtual class std::fpos __thiscall std::basic_streambuf >::seekoff(long,enum std::ios_base::seekdir,int)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(long &)",
    "public: __thiscall std::basic_fstream >::basic_fstream >(char const *,int)",
    "protected: virtual void __thiscall std::overflow_error::_Doraise(void)const",
    "protected: __thiscall std::ios_base::ios_base(void)",
    "public: void __thiscall std::basic_iostream >::`vbase destructor'(void)",
    "struct std::_Smanip __cdecl std::resetiosflags(int)",
    "protected: virtual int __thiscall std::codecvt::do_out(int &,unsigned short const *,unsigned short const *,unsigned short const * &,char *,char *,char * &)const",
    "public: static unsigned char __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: void __thiscall std::ios_base::setstate(int,bool)",
    "public: class std::basic_filebuf > * __thiscall std::basic_filebuf >::open(char const *,short)",
    "public: class std::out_of_range & __thiscall std::out_of_range::operator=(class std::out_of_range const &)",
    "protected: virtual int __thiscall std::basic_streambuf >::uflow(void)",
    "class std::complex __cdecl std::exp(class std::complex const &)",
    "protected: void __thiscall std::basic_filebuf >::_Initcvt(void)",
    "protected: virtual int __thiscall std::basic_streambuf >::underflow(void)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned long &)const",
    "public: float __thiscall std::_Complex_base::imag(float const &)",
    "public: int __thiscall std::basic_istream >::gcount(void)const",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,void * &)const",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,signed char &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::read(char *,int)",
    "public: class std::ostreambuf_iterator > __thiscall std::time_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,struct tm const *,char,char)const",
    "public: __thiscall std::basic_stringbuf,class std::allocator >::basic_stringbuf,class std::allocator >(int)",
    "class std::complex __cdecl std::polar(long double const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::ignore(int,int)",
    "protected: virtual int __thiscall std::codecvt::do_length(int &,unsigned short const *,unsigned short const *,unsigned int)const",
    "public: static int __cdecl std::numeric_limits::min(void)",
    "const std::basic_ofstream >::`vftable'",
    "public: int __thiscall std::codecvt::out(int &,unsigned short const *,unsigned short const *,unsigned short const * &,char *,char *,char * &)const",
    "_Tolower",
    "public: __thiscall std::logic_error::logic_error(class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::basic_ofstream >::basic_ofstream >(void)",
    "class std::complex __cdecl std::sqrt(class std::complex const &)",
    "public: static double __cdecl std::_Ctr::log(double)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(class std::basic_streambuf > &)",
    "public: class std::locale::id & __thiscall std::locale::id::operator=(class std::locale::id const &)",
    "const std::ctype::`vftable'",
    "public: static double __cdecl std::_Ctr::sqrt(double)",
    "protected: virtual int __thiscall std::basic_streambuf >::xsputn(unsigned short const *,int)",
    "public: static unsigned int __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: static long __cdecl std::numeric_limits::max(void)",
    "const std::underflow_error::`vftable'",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(char const *)",
    "public: void __thiscall std::bad_alloc::`default constructor closure'(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(unsigned long &)",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::uflow(void)",
    "double __cdecl std::real(class std::complex const &)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,short *)",
    "protected: virtual int __thiscall std::codecvt::do_encoding(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(unsigned short)",
    "protected: virtual int __thiscall std::codecvt::do_in(int &,char const *,char const *,char const * &,unsigned short *,unsigned short *,unsigned short * &)const",
    "public: __thiscall std::collate::collate(unsigned int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(char const *,unsigned int,unsigned int)const",
    "public: void __thiscall std::basic_ofstream >::open(char const *,short)",
    "class std::basic_ostream > & __cdecl std::endl(class std::basic_ostream > &)",
    "public: static signed char __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: unsigned short const * __thiscall std::basic_string,class std::allocator >::end(void)const",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,bool)const",
    "_Wcrtomb",
    "protected: static short const * __cdecl std::ctype::classic_table(void)",
    "public: static unsigned short __cdecl std::numeric_limits::denorm_min(void)",
    "protected: virtual int __thiscall std::basic_filebuf >::uflow(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(char,unsigned int)const",
    "public: static float __cdecl std::_Ctr::atan2(float,float)",
    "public: static int __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: static unsigned short __cdecl std::char_traits::to_char_type(unsigned short const &)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(short)",
    "protected: void __thiscall std::basic_streambuf >::_Init(char * *,char * *,int *,char * *,char * *,int *)",
    "public: __thiscall std::locale::locale(char const *,int)",
    "public: __thiscall std::ios_base::Init::~Init(void)",
    "class std::basic_ostream > & __cdecl std::ends(class std::basic_ostream > &)",
    "public: static float __cdecl std::_Ctr::pow(float,float)",
    "public: virtual __thiscall std::range_error::~range_error(void)",
    "public: static bool __cdecl std::numeric_limits::min(void)",
    "public: static char * __cdecl std::char_traits::move(char *,char const *,unsigned int)",
    "public: void __thiscall std::num_put > >::`default constructor closure'(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(unsigned short const *,unsigned int)const",
    "public: __thiscall std::complex::complex(float const &,float const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::seekg(long,enum std::ios_base::seekdir)",
    "public: __thiscall std::_Complex_base::_Complex_base(float const &,float const &)",
    "public: virtual __thiscall std::istrstream::~istrstream(void)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::money_put > >::do_put(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,long double)const",
    "public: class std::basic_filebuf > * __thiscall std::basic_filebuf >::open(char const *,int)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,class std::complex &)",
    "protected: virtual int __thiscall std::basic_filebuf >::sync(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::ios_base & (__cdecl*)(class std::ios_base &))",
    "public: void __thiscall std::basic_ifstream >::open(char const *,short)",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Locinfo::_Getname(void)const",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Rep(class std::ostreambuf_iterator >,char,unsigned int)",
    "protected: void __thiscall std::basic_streambuf >::pbump(int)",
    "public: virtual __thiscall std::logic_error::~logic_error(void)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,char *)",
    "public: static long double __cdecl std::_Ctr::_Cosh(long double,long double)",
    "public: __thiscall std::complex::complex(long double const &,long double const &)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,char const *)",
    "public: __thiscall std::basic_istringstream,class std::allocator >::basic_istringstream,class std::allocator >(class std::basic_string,class std::allocator > const &,int)",
    "public: static int __cdecl std::char_traits::to_int_type(char const &)",
    "public: virtual char const * __thiscall std::runtime_error::what(void)const",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,unsigned long)const",
    "protected: __thiscall std::locale::facet::facet(unsigned int)",
    "const std::time_get > >::`vftable'",
    "public: static unsigned short * __cdecl std::char_traits::move(unsigned short *,unsigned short const *,unsigned int)",
    "public: class std::underflow_error & __thiscall std::underflow_error::operator=(class std::underflow_error const &)",
    "public: static float __cdecl std::_Ctr::sqrt(float)",
    "public: static bool __cdecl std::char_traits::lt(char const &,char const &)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator-=(long double const &)",
    "float const `float __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_R2",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(unsigned short &)",
    "public: unsigned short __thiscall std::basic_istream >::peek(void)",
    "private: bool __thiscall std::basic_string,class std::allocator >::_Grow(unsigned int,bool)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(char const *)",
    "protected: char * __thiscall std::basic_streambuf >::gptr(void)const",
    "class std::complex __cdecl std::pow(class std::complex const &,float const &)",
    "public: char const & __thiscall std::basic_string,class std::allocator >::operator[](unsigned int)const",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Rep(class std::ostreambuf_iterator >,unsigned short,unsigned int)",
    "class std::complex __cdecl std::pow(float const &,class std::complex const &)",
    "public: bool __thiscall std::ctype::is(short,unsigned short)const",
    "public: class std::reverse_iterator __thiscall std::basic_string,class std::allocator >::rend(void)",
    "public: int __thiscall std::basic_istream >::readsome(unsigned short *,int)",
    "const std::time_base::`vftable'",
    "protected: virtual class std::fpos __thiscall std::strstreambuf::seekpos(class std::fpos,int)",
    "_FCosh",
    "protected: virtual int __thiscall std::basic_streambuf >::xsgetn(unsigned short *,int)",
    "public: long double __thiscall std::_Complex_base::real(void)const",
    "towctrans",
    "bool __cdecl std::operator!=(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "_FNan",
    "public: char * __thiscall std::basic_string,class std::allocator >::end(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,unsigned int,unsigned short)",
    "public: void __thiscall std::basic_ostream >::`vbase destructor'(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::putback(unsigned short)",
    "protected: virtual int __thiscall std::strstreambuf::pbackfail(int)",
    "public: static unsigned int __cdecl std::numeric_limits::infinity(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(unsigned short const *,unsigned int)const",
    "public: __thiscall std::basic_iostream >::basic_iostream >(class std::basic_streambuf > *)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(short &)",
    "public: static class std::locale __cdecl std::locale::global(class std::locale const &)",
    "public: static signed char __cdecl std::numeric_limits::max(void)",
    "protected: virtual void __thiscall std::bad_exception::_Doraise(void)const",
    "public: class std::complex & __thiscall std::complex::operator=(long double const &)",
    "const std::basic_iostream >::`vftable'",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,char const *)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,class std::basic_string,class std::allocator > const &)",
    "public: static unsigned int __cdecl std::numeric_limits::max(void)",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_date(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,signed char)",
    "public: static double __cdecl std::numeric_limits::epsilon(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(char,unsigned int)const",
    "public: __thiscall std::_Locinfo::_Locinfo(int,char const *)",
    "public: void __thiscall std::basic_fstream >::`vbase destructor'(void)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator=(class std::_Complex_base const &)",
    "struct std::_Smanip __cdecl std::setprecision(int)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(class std::allocator const &)",
    "public: bool __thiscall std::basic_ofstream >::is_open(void)const",
    "const std::num_get > >::`vftable'",
    "public: __thiscall std::bad_alloc::bad_alloc(char const *)",
    "public: static unsigned char __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: __thiscall std::basic_iostream >::basic_iostream >(class std::basic_iostream > const &)",
    "_LDscale",
    "double const `class std::complex __cdecl std::log(class std::complex const &)'::`6'::_Cm",
    "public: static signed char __cdecl std::numeric_limits::infinity(void)",
    "float __cdecl std::norm(class std::complex const &)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::_Pninc(void)",
    "public: char __thiscall std::_Mpunct::decimal_point(void)const",
    "long double __cdecl std::arg(class std::complex const &)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,void * &)const",
    "public: __thiscall std::_Lockit::_Lockit(void)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::put(char)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)",
    "const std::basic_stringbuf,class std::allocator >::`vftable'",
    "protected: __thiscall std::basic_ios >::basic_ios >(void)",
    "public: __thiscall std::locale::id::operator unsigned int(void)",
    "public: void __thiscall std::locale::facet::_Incref(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(unsigned short const *,unsigned int,unsigned int)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::numpunct::falsename(void)const",
    "long double __cdecl std::_Fabs(class std::complex const &,int *)",
    "public: void __thiscall std::basic_ios >::setstate(int,bool)",
    "public: __thiscall std::time_get > >::time_get > >(unsigned int)",
    "const std::basic_fstream >::`vbtable'{for `std::basic_ostream >'}",
    "public: static long __cdecl std::numeric_limits::min(void)",
    "protected: virtual int __thiscall std::basic_stringbuf,class std::allocator >::underflow(void)",
    "public: static unsigned int __cdecl std::time_get > >::_Getcat(void)",
    "public: bool __thiscall std::locale::_Iscloc(void)const",
    "public: static unsigned short __cdecl std::numeric_limits::signaling_NaN(void)",
    "class std::complex & __cdecl std::operator*=(class std::complex &,class std::complex const &)",
    "_Snan",
    "float __cdecl std::_Fabs(class std::complex const &,int *)",
    "public: unsigned short __thiscall std::basic_streambuf >::sbumpc(void)",
    "public: char __thiscall std::ctype::widen(char)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(long double)",
    "_FSinh",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekoff(long,short,short)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,float &)const",
    "bool __cdecl std::operator!=(char const *,class std::basic_string,class std::allocator > const &)",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::overflow(unsigned short)",
    "class std::complex __cdecl std::operator+(class std::complex const &,double const &)",
    "wcsrtombs",
    "protected: virtual class std::fpos __thiscall std::strstreambuf::seekoff(long,enum std::ios_base::seekdir,int)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(char const *,unsigned int,class std::allocator const &)",
    "public: static float __cdecl std::_Ctr::_Sinh(float,float)",
    "bool __cdecl std::operator<(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(char const *,unsigned int,unsigned int)const",
    "private: static void __cdecl std::locale::_Tidy(void)",
    "protected: virtual unsigned short __thiscall std::_Mpunct::do_decimal_point(void)const",
    "public: class std::basic_ios > & __thiscall std::basic_ios >::copyfmt(class std::basic_ios > const &)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::eback(void)const",
    "_Strxfrm",
    "public: static float __cdecl std::numeric_limits::round_error(void)",
    "public: class std::ostreambuf_iterator > __thiscall std::money_put > >::put(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,class std::basic_string,class std::allocator > const &)const",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)const",
    "public: class std::locale __thiscall std::ios_base::imbue(class std::locale const &)",
    "const std::codecvt::`vftable'",
    "protected: virtual int __thiscall std::collate::do_compare(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)const",
    "public: static unsigned long __cdecl std::numeric_limits::round_error(void)",
    "public: long __thiscall std::collate::hash(char const *,char const *)const",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,long)const",
    "public: bool __thiscall std::basic_fstream >::is_open(void)const",
    "public: static bool __cdecl std::numeric_limits::max(void)",
    "public: __thiscall std::basic_filebuf >::basic_filebuf >(struct _iobuf *)",
    "public: __thiscall std::time_base::time_base(unsigned int)",
    "_LNan",
    "public: __thiscall std::locale::locale(class std::locale const &,char const *,int)",
    "public: int __thiscall std::time_get > >::date_order(void)const",
    "unsigned short const `private: static unsigned short const * __cdecl std::basic_string,class std::allocator >::_Nullstr(void)'::`2'::_C",
    "public: static void __cdecl std::char_traits::assign(char &,char const &)",
    "class std::complex & __cdecl std::operator-=(class std::complex &,class std::complex const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(long double &)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::_Mpunct::do_positive_sign(void)const",
    "public: static long __cdecl std::numeric_limits::epsilon(void)",
    "float __cdecl std::real(class std::complex const &)",
    "public: static char __cdecl std::char_traits::to_char_type(int const &)",
    "public: class std::locale & __thiscall std::locale::_Addfac(class std::locale::facet *,unsigned int,unsigned int)",
    "public: static long double __cdecl std::numeric_limits::signaling_NaN(void)",
    "long double __cdecl std::imag(class std::complex const &)",
    "public: long __thiscall std::collate::hash(unsigned short const *,unsigned short const *)const",
    "public: static short __cdecl std::numeric_limits::denorm_min(void)",
    "public: __thiscall std::_Winit::_Winit(void)",
    "public: __thiscall std::bad_exception::bad_exception(char const *)",
    "protected: virtual class std::fpos __thiscall std::basic_streambuf >::seekpos(class std::fpos,int)",
    "protected: void __thiscall std::num_put > >::_Init(class std::_Locinfo const &)",
    "const std::basic_ostringstream,class std::allocator >::`vbtable'",
    "protected: virtual char __thiscall std::numpunct::do_decimal_point(void)const",
    "const std::basic_fstream >::`vbtable'{for `std::basic_istream >'}",
    "public: static bool __cdecl std::char_traits::eq_int_type(unsigned short const &,unsigned short const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::unget(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(unsigned short const *)",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekpos(class std::fpos,short)",
    "__int64 const std::_Fpz",
    "class std::complex __cdecl std::operator/(class std::complex const &,float const &)",
    "public: __thiscall std::range_error::range_error(class std::range_error const &)",
    "public: unsigned short __thiscall std::basic_ios >::fill(unsigned short)",
    "protected: virtual int __thiscall std::basic_filebuf >::underflow(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(unsigned short const *,unsigned int)const",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,unsigned long)const",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned short const *,unsigned int,class std::allocator const &)",
    "public: struct std::money_base::pattern __thiscall std::_Mpunct::neg_format(void)const",
    "public: __thiscall std::ostrstream::ostrstream(char *,int,int)",
    "public: class std::locale::facet * __thiscall std::locale::facet::_Decref(void)",
    "protected: void __thiscall std::basic_ios >::init(class std::basic_streambuf > *,bool)",
    "bool __cdecl std::operator==(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::pbackfail(unsigned short)",
    "const std::basic_iostream >::`vbtable'{for `std::basic_ostream >'}",
    "public: __thiscall std::basic_fstream >::basic_fstream >(void)",
    "public: static class std::locale::id std::numpunct::id",
    "public: void __thiscall std::ios_base::clear(int,bool)",
    "public: __thiscall std::ios_base::Init::Init(void)",
    "const std::basic_filebuf >::`vftable'",
    "public: int __thiscall std::ios_base::flags(int)",
    "bool __cdecl std::operator!=(class std::complex const &,float const &)",
    "public: class std::basic_string,class std::allocator > __thiscall std::numpunct::truename(void)const",
    "public: static double __cdecl std::_Ctr::pow(double,double)",
    "public: void __thiscall std::basic_stringbuf,class std::allocator >::`default constructor closure'(void)",
    "_Eps",
    "public: void __thiscall std::ios_base::exceptions(short)",
    "class std::basic_ostream > std::wclog",
    "class std::complex __cdecl std::pow(class std::complex const &,int)",
    "public: virtual __thiscall std::moneypunct::~moneypunct(void)",
    "public: float __thiscall std::_Complex_base::real(void)const",
    "const std::basic_ostream >::`vbtable'",
    "public: static unsigned int __cdecl std::num_get > >::_Getcat(void)",
    "public: void __thiscall std::messages::`default constructor closure'(void)",
    "long double __cdecl std::abs(class std::complex const &)",
    "private: void __thiscall std::ios_base::_Tidy(void)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator*=(long double const &)",
    "public: long double __thiscall std::_Complex_base::imag(long double const &)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::messages::do_get(int,int,int,class std::basic_string,class std::allocator > const &)const",
    "public: char __thiscall std::_Mpunct::thousands_sep(void)const",
    "protected: virtual unsigned short __thiscall std::basic_stringbuf,class std::allocator >::pbackfail(unsigned short)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(char const *,unsigned int)const",
    "class std::complex __cdecl std::operator/(float const &,class std::complex const &)",
    "public: unsigned short __thiscall std::_Mpunct::decimal_point(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,unsigned short const *)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,bool)const",
    "_LXbig",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::collate::do_transform(unsigned short const *,unsigned short const *)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,unsigned int,unsigned short)",
    "public: static class std::locale::id std::time_put > >::id",
    "public: __thiscall std::ctype::ctype(short const *,bool,unsigned int)",
    "public: static short __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: static long double __cdecl std::numeric_limits::epsilon(void)",
    "public: class std::fpos __thiscall std::basic_ostream >::tellp(void)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,class std::basic_string,class std::allocator > const &)const",
    "public: __thiscall std::basic_ifstream >::basic_ifstream >(char const *,int)",
    "private: static int __cdecl std::num_get > >::_Getffld(char *,class std::istreambuf_iterator > &,class std::istreambuf_iterator > &,class std::locale const &)",
    "private: static struct _iobuf * __cdecl std::basic_filebuf >::_Fiopen(char const *,int)",
    "public: bool __thiscall std::locale::operator()(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)const",
    "public: unsigned short __thiscall std::ctype::toupper(unsigned short)const",
    "protected: void __thiscall std::time_get > >::_Init(class std::_Locinfo const &)",
    "const std::num_put > >::`vftable'",
    "public: double __thiscall std::_Complex_base::real(void)const",
    "double const `double __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_R2",
    "public: float __thiscall std::_Complex_base::real(float const &)",
    "_LInf",
    "public: class std::domain_error & __thiscall std::domain_error::operator=(class std::domain_error const &)",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::erase(unsigned short *,unsigned short *)",
    "bool __cdecl std::operator!=(long double const &,class std::complex const &)",
    "public: virtual __thiscall std::runtime_error::~runtime_error(void)",
    "public: void __thiscall std::ios_base::register_callback(void (__cdecl*)(enum std::ios_base::event,class std::ios_base &,int),int)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(class std::basic_string,class std::allocator > const &)const",
    "protected: virtual bool __thiscall std::codecvt::do_always_noconv(void)const",
    "protected: virtual unsigned short __thiscall std::basic_filebuf >::pbackfail(unsigned short)",
    "public: class std::basic_iostream > & __thiscall std::basic_iostream >::operator=(class std::basic_iostream > const &)",
    "`string'",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned short const *,unsigned int)",
    "public: __thiscall std::_Timevec::_Timevec(class std::_Timevec const &)",
    "bool __cdecl std::operator!=(class std::complex const &,class std::complex const &)",
    "double __cdecl std::norm(class std::complex const &)",
    "class std::complex __cdecl std::polar(float const &,float const &)",
    "public: virtual __thiscall std::basic_iostream >::~basic_iostream >(void)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned int,unsigned short,class std::allocator const &)",
    "public: virtual __thiscall std::basic_fstream >::~basic_fstream >(void)",
    "long double __cdecl std::norm(class std::complex const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(char *,int)",
    "public: static unsigned int __cdecl std::ctype::_Getcat(void)",
    "public: void __thiscall std::basic_istringstream,class std::allocator >::str(class std::basic_string,class std::allocator > const &)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned long &)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned short const *)",
    "bool __cdecl std::operator<=(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(unsigned short,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::strstream::strstream(char *,int,int)",
    "public: char const * __thiscall std::ctype::scan_is(short,char const *,char const *)const",
    "protected: virtual unsigned short __thiscall std::basic_stringbuf,class std::allocator >::overflow(unsigned short)",
    "public: static unsigned int const std::basic_string,class std::allocator >::npos",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Mpunct::positive_sign(void)const",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,class std::basic_string,class std::allocator > &)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(unsigned int)",
    "public: void __thiscall std::basic_stringstream,class std::allocator >::`vbase destructor'(void)",
    "public: static class std::locale __cdecl std::locale::empty(void)",
    "public: static char __cdecl std::numeric_limits::round_error(void)",
    "_FXbig",
    "private: static int std::_Winit::_Init_cnt",
    "public: virtual __thiscall std::domain_error::~domain_error(void)",
    "public: __thiscall std::locale::locale(class std::locale const &,class std::locale const &,int)",
    "public: static char const * __cdecl std::char_traits::find(char const *,unsigned int,char const &)",
    "public: __thiscall std::length_error::length_error(class std::length_error const &)",
    "public: bool __thiscall std::basic_string,class std::allocator >::empty(void)const",
    "public: char __thiscall std::ctype::tolower(char)const",
    "protected: unsigned short * __thiscall std::basic_streambuf >::gptr(void)const",
    "bool __cdecl std::operator==(class std::basic_string,class std::allocator > const &,char const *)",
    "public: class std::ios_base & __thiscall std::ios_base::copyfmt(class std::ios_base const &)",
    "bool __cdecl std::operator==(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "const std::basic_stringstream,class std::allocator >::`vbtable'{for `std::basic_ostream >'}",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,long &)const",
    "public: virtual __thiscall std::ostrstream::~ostrstream(void)",
    "public: static long double __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: int __thiscall std::ios_base::rdstate(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,char const *,char const *)",
    "public: __thiscall std::ctype_base::ctype_base(unsigned int)",
    "public: class std::_Ctr & __thiscall std::_Ctr::operator=(class std::_Ctr const &)",
    "_Dtest",
    "public: static class std::locale::id std::time_get > >::id",
    "public: virtual __thiscall std::ctype_base::~ctype_base(void)",
    "public: virtual __thiscall std::basic_istream >::~basic_istream >(void)",
    "public: char __thiscall std::numpunct::thousands_sep(void)const",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_scan_is(short,unsigned short const *,unsigned short const *)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned int,unsigned short)",
    "public: static int __cdecl std::numeric_limits::denorm_min(void)",
    "bool __cdecl std::operator==(class std::complex const &,double const &)",
    "protected: virtual int __thiscall std::codecvt::do_length(int &,char const *,char const *,unsigned int)const",
    "public: void __thiscall std::moneypunct::`default constructor closure'(void)",
    "const std::moneypunct::`vftable'",
    "public: __thiscall std::ios_base::operator void *(void)const",
    "public: int __thiscall std::basic_streambuf >::sbumpc(void)",
    "class std::complex __cdecl std::operator+(class std::complex const &,class std::complex const &)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(char const *,class std::allocator const &)",
    "public: int __thiscall std::basic_streambuf >::sputc(char)",
    "private: static unsigned short * __cdecl std::basic_string,class std::allocator >::_Psum(unsigned short *,unsigned int)",
    "public: class std::numeric_limits & __thiscall std::numeric_limits::operator=(class std::numeric_limits const &)",
    "public: __thiscall std::basic_ostream >::basic_ostream >(enum std::_Uninitialized)",
    "bool __cdecl std::operator==(double const &,class std::complex const &)",
    "public: static long double __cdecl std::_Ctr::cos(long double)",
    "public: static unsigned long __cdecl std::numeric_limits::quiet_NaN(void)",
    "protected: virtual unsigned short __thiscall std::basic_filebuf >::underflow(void)",
    "protected: void __thiscall std::collate::_Init(class std::_Locinfo const &)",
    "public: static double __cdecl std::numeric_limits::round_error(void)",
    "public: void __thiscall std::basic_ifstream >::`vbase destructor'(void)",
    "bool __cdecl std::operator==(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,char)",
    "public: static bool __cdecl std::_Ctr::_Isinf(long double)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(char const *,char const *,class std::allocator const &)",
    "private: unsigned char & __thiscall std::basic_string,class std::allocator >::_Refcnt(char const *)",
    "public: static unsigned int __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(void const *)",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_filebuf >::setbuf(char *,int)",
    "private: static unsigned int __cdecl std::basic_string,class std::allocator >::_Pdif(char const *,char const *)",
    "public: __thiscall std::out_of_range::out_of_range(class std::out_of_range const &)",
    "public: int __thiscall std::ios_base::precision(int)",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::erase(unsigned short *)",
    "public: __thiscall std::locale::locale(class std::locale const &)",
    "_Hugeval",
    "protected: void __thiscall std::strstreambuf::_Init(int,char *,char *,int)",
    "_Getcoll",
    "public: static double __cdecl std::_Ctr::_Infv(double)",
    "public: static double __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::seekp(class std::fpos)",
    "public: void __thiscall std::basic_stringstream,class std::allocator >::`default constructor closure'(void)",
    "long double __cdecl std::real(class std::complex const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned short const *)",
    "_Dnorm",
    "public: class std::basic_filebuf > * __thiscall std::basic_filebuf >::close(void)",
    "public: static unsigned int __cdecl std::money_put > >::_Getcat(void)",
    "public: __thiscall std::locale::~locale(void)",
    "public: unsigned short & __thiscall std::basic_string,class std::allocator >::at(unsigned int)",
    "public: virtual __thiscall std::messages_base::~messages_base(void)",
    "const std::basic_stringstream,class std::allocator >::`vbtable'{for `std::basic_istream >'}",
    "class std::complex __cdecl std::pow(class std::complex const &,class std::complex const &)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,long double)const",
    "class std::basic_ostream > std::wcerr",
    "const std::bad_exception::`vftable'",
    "public: unsigned short const * __thiscall std::ctype::scan_not(short,unsigned short const *,unsigned short const *)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(char const *,unsigned int,unsigned int)const",
    "public: static bool __cdecl std::_Ctr::_Isnan(float)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,unsigned short)",
    "public: class std::basic_stringbuf,class std::allocator > * __thiscall std::basic_istringstream,class std::allocator >::rdbuf(void)const",
    "protected: virtual unsigned short __thiscall std::basic_stringbuf,class std::allocator >::underflow(void)",
    "public: static int __cdecl std::numeric_limits::max(void)",
    "protected: char * __thiscall std::basic_streambuf >::_Gndec(void)",
    "public: class std::bad_alloc & __thiscall std::bad_alloc::operator=(class std::bad_alloc const &)",
    "protected: void __thiscall std::basic_stringbuf,class std::allocator >::_Tidy(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::capacity(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,unsigned short const *,unsigned int)",
    "_LDtest",
    "_FDenorm",
    "private: class std::ostreambuf_iterator > __thiscall std::money_put > >::_Putmfld(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,bool,class std::basic_string,class std::allocator >)const",
    "public: static signed char __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: int __thiscall std::codecvt::out(int &,char const *,char const *,char const * &,char *,char *,char * &)const",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,long double &)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(unsigned long)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,double)const",
    "public: class std::complex & __thiscall std::complex::operator=(double const &)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(char,class std::basic_string,class std::allocator > const &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,bool)const",
    "public: static float __cdecl std::numeric_limits::min(void)",
    "protected: void __thiscall std::ios_base::_Addstd(void)",
    "public: void __thiscall std::codecvt_base::`default constructor closure'(void)",
    "public: char & __thiscall std::basic_string,class std::allocator >::at(unsigned int)",
    "public: static int __cdecl std::char_traits::eof(void)",
    "public: void * __thiscall std::_Timevec::_Getptr(void)const",
    "public: virtual __thiscall std::num_get > >::~num_get > >(void)",
    "public: char const * __thiscall std::_Locinfo::_Getdays(void)const",
    "protected: char * __thiscall std::basic_streambuf >::pbase(void)const",
    "public: class std::locale __thiscall std::basic_streambuf >::getloc(void)",
    "public: __thiscall std::_Mpunct::_Mpunct(unsigned int,bool)",
    "public: class std::reverse_iterator __thiscall std::basic_string,class std::allocator >::rend(void)const",
    "public: virtual __thiscall std::time_put > >::~time_put > >(void)",
    "protected: virtual int __thiscall std::strstreambuf::overflow(int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned int,unsigned short)",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_monthname(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "private: static class std::ostreambuf_iterator > __cdecl std::money_put > >::_Put(class std::ostreambuf_iterator >,unsigned short const *,unsigned int)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::put(unsigned short)",
    "public: static unsigned long __cdecl std::numeric_limits::epsilon(void)",
    "class std::complex __cdecl std::operator-(class std::complex const &)",
    "protected: void __thiscall std::numpunct::_Init(class std::_Locinfo const &)",
    "public: void __thiscall std::basic_ostringstream,class std::allocator >::`default constructor closure'(void)",
    "class std::basic_istream > & __cdecl std::ws(class std::basic_istream > &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(char const *,unsigned int,unsigned int)const",
    "public: void __thiscall std::basic_string,class std::allocator >::insert(char *,unsigned int,char)",
    "float const `class std::complex __cdecl std::log(class std::complex const &)'::`6'::_Cm",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::basic_ios > & (__cdecl*)(class std::basic_ios > &))",
    "const std::basic_ofstream >::`vbtable'",
    "const std::logic_error::`vftable'",
    "public: class std::complex & __thiscall std::complex::operator=(float const &)",
    "public: int __thiscall std::basic_streambuf >::pubsync(void)",
    "public: static double __cdecl std::numeric_limits::max(void)",
    "public: __thiscall std::locale::locale(enum std::_Uninitialized)",
    "bool __cdecl std::operator!=(class std::basic_string,class std::allocator > const &,char const *)",
    "public: class std::ostreambuf_iterator > __thiscall std::money_put > >::put(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,long double)const",
    "public: __thiscall std::basic_ostringstream,class std::allocator >::basic_ostringstream,class std::allocator >(int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned int,char)",
    "public: void __thiscall std::basic_string,class std::allocator >::resize(unsigned int,char)",
    "mbrlen",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::insert(unsigned short *,unsigned short)",
    "public: bool __thiscall std::basic_ostream >::opfx(void)",
    "public: double __thiscall std::_Complex_base::real(double const &)",
    "public: int __thiscall std::codecvt::in(int &,char const *,char const *,char const * &,char *,char *,char * &)const",
    "public: bool __thiscall std::ios_base::fail(void)const",
    "public: bool __thiscall std::ios_base::bad(void)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(unsigned short,unsigned int)const",
    "protected: virtual char __thiscall std::ctype::do_narrow(unsigned short,char)const",
    "public: static bool __cdecl std::char_traits::eq(unsigned short const &,unsigned short const &)",
    "protected: virtual long __thiscall std::collate::do_hash(unsigned short const *,unsigned short const *)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(void * &)",
    "public: unsigned short __thiscall std::basic_istream >::get(void)",
    "public: int __thiscall std::codecvt_base::max_length(void)const",
    "class std::complex __cdecl std::operator*(class std::complex const &,float const &)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,class std::basic_string,class std::allocator > const &)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,char const *,unsigned int)const",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_filebuf >::setbuf(unsigned short *,int)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(double)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::time_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,struct tm const *,char,char)const",
    "public: static char __cdecl std::numeric_limits::max(void)",
    "protected: virtual int __thiscall std::basic_streambuf >::overflow(int)",
    "public: static float __cdecl std::_Ctr::_Infv(float)",
    "public: static unsigned short __cdecl std::numeric_limits::infinity(void)",
    "_FInf",
    "protected: virtual char __thiscall std::ctype::do_toupper(char)const",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,unsigned short *)",
    "public: int __thiscall std::basic_istream >::get(void)",
    "public: __thiscall std::basic_ifstream >::basic_ifstream >(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(unsigned short &)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,bool &)const",
    "const std::_Mpunct::`vftable'",
    "public: class std::istreambuf_iterator > __thiscall std::money_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,bool,class std::ios_base &,int &,class std::basic_string,class std::allocator > &)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_istringstream,class std::allocator >::str(void)const",
    "_Stold",
    "private: void __thiscall std::ios_base::_Callfns(enum std::ios_base::event)",
    "_FDnorm",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,long)const",
    "public: static short __cdecl std::numeric_limits::signaling_NaN(void)",
    "float __cdecl std::abs(class std::complex const &)",
    "public: static signed char __cdecl std::numeric_limits::denorm_min(void)",
    "public: void __thiscall std::basic_string,class std::allocator >::resize(unsigned int,unsigned short)",
    "public: __thiscall std::money_put > >::money_put > >(unsigned int)",
    "public: static bool __cdecl std::_Ctr::_Isnan(double)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Fput(class std::ostreambuf_iterator >,class std::ios_base &,char,char const *,unsigned int,unsigned int)",
    "public: virtual __thiscall std::ctype::~ctype(void)",
    "public: unsigned short const * __thiscall std::basic_string,class std::allocator >::data(void)const",
    "public: int __thiscall std::basic_streambuf >::sungetc(void)",
    "public: class std::ios_base & __thiscall std::ios_base::operator=(class std::ios_base const &)",
    "public: static unsigned int __cdecl std::numeric_limits::denorm_min(void)",
    "class std::complex __cdecl std::operator*(double const &,class std::complex const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,char const *)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(unsigned short const *,unsigned int,unsigned int)const",
    "_LExp",
    "public: virtual __thiscall std::_Mpunct::~_Mpunct(void)",
    "public: unsigned short __thiscall std::_Mpunct::thousands_sep(void)const",
    "bool __cdecl std::operator!=(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: virtual __thiscall std::basic_ostringstream,class std::allocator >::~basic_ostringstream,class std::allocator >(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(unsigned short,unsigned int)const",
    "public: static class std::locale::id std::messages::id",
    "public: __thiscall std::range_error::range_error(class std::basic_string,class std::allocator > const &)",
    "private: static char const * __cdecl std::basic_string,class std::allocator >::_Nullstr(void)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,long)const",
    "public: struct lconv const * __thiscall std::_Locinfo::_Getlconv(void)const",
    "public: virtual __thiscall std::out_of_range::~out_of_range(void)",
    "public: static float __cdecl std::_Ctr::ldexp(float,int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,class std::basic_string,class std::allocator > const &)",
    "public: unsigned short __thiscall std::basic_streambuf >::sputbackc(unsigned short)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,unsigned short const *,unsigned int)",
    "public: int __thiscall std::ios_base::width(void)const",
    "public: __thiscall std::bad_cast::bad_cast(class std::bad_cast const &)",
    "public: class std::logic_error & __thiscall std::logic_error::operator=(class std::logic_error const &)",
    "public: void __thiscall std::strstreambuf::freeze(bool)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_weekday(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: int __thiscall std::basic_streambuf >::sputn(char const *,int)",
    "public: void __thiscall std::basic_istream >::`vbase destructor'(void)",
    "public: unsigned short __thiscall std::numpunct::decimal_point(void)const",
    "public: __thiscall std::money_base::money_base(unsigned int)",
    "protected: virtual struct std::money_base::pattern __thiscall std::_Mpunct::do_pos_format(void)const",
    "protected: virtual void __thiscall std::out_of_range::_Doraise(void)const",
    "_Mbrtowc",
    "public: class std::reverse_iterator __thiscall std::basic_string,class std::allocator >::rbegin(void)const",
    "private: static class std::ostreambuf_iterator > __cdecl std::money_put > >::_Put(class std::ostreambuf_iterator >,char const *,unsigned int)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned int,char,class std::allocator const &)",
    "public: virtual __thiscall std::basic_ofstream >::~basic_ofstream >(void)",
    "public: void __thiscall std::bad_exception::`default constructor closure'(void)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,unsigned char *)",
    "public: static int __cdecl std::numeric_limits::epsilon(void)",
    "public: class std::length_error & __thiscall std::length_error::operator=(class std::length_error const &)",
    "public: int __thiscall std::basic_streambuf >::sgetc(void)",
    "public: int __thiscall std::basic_istream >::peek(void)",
    "public: virtual __thiscall std::time_get > >::~time_get > >(void)",
    "public: static float __cdecl std::numeric_limits::infinity(void)",
    "protected: virtual int __thiscall std::basic_streambuf >::sync(void)",
    "public: class std::basic_streambuf > * __thiscall std::basic_streambuf >::pubsetbuf(unsigned short *,int)",
    "public: long double __thiscall std::_Complex_base::real(long double const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)",
    "public: int __thiscall std::basic_streambuf >::sputn(unsigned short const *,int)",
    "public: char * __thiscall std::basic_string,class std::allocator >::erase(char *,char *)",
    "public: char __thiscall std::basic_ios >::narrow(unsigned short,char)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,unsigned short const *,unsigned short const *)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,long &)const",
    "public: bool __thiscall std::locale::operator==(class std::locale const &)const",
    "public: void __thiscall std::basic_ofstream >::close(void)",
    "bool __cdecl std::operator!=(double const &,class std::complex const &)",
    "protected: void __thiscall std::messages::_Init(class std::_Locinfo const &)",
    "public: void __thiscall std::basic_ios >::clear(int,bool)",
    "private: static int std::ios_base::Init::_Init_cnt",
    "public: static char __cdecl std::numeric_limits::denorm_min(void)",
    "protected: void __thiscall std::ios_base::_Init(void)",
    "public: int __thiscall std::messages::open(class std::basic_string,class std::allocator > const &,class std::locale const &)const",
    "public: static long double __cdecl std::_Ctr::log(long double)",
    "public: void __thiscall std::basic_istream >::isfx(void)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,unsigned short const *)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,double &)const",
    "public: bool __thiscall std::codecvt_base::always_noconv(void)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(char,unsigned int)const",
    "private: static class std::locale::_Locimp * std::locale::_Locimp::_Global",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::basic_istream > & (__cdecl*)(class std::basic_istream > &))",
    "public: char const * __thiscall std::_Locinfo::_Getyes(void)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(char const *,unsigned int)const",
    "const std::bad_alloc::`vftable'",
    "private: static int std::ios_base::_Index",
    "private: int __thiscall std::basic_stringbuf,class std::allocator >::_Mode(int)",
    "_Sinh",
    "public: virtual __thiscall std::money_put > >::~money_put > >(void)",
    "bool __cdecl std::operator>=(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "class std::complex & __cdecl std::operator+=(class std::complex &,class std::complex const &)",
    "protected: virtual struct std::money_base::pattern __thiscall std::_Mpunct::do_neg_format(void)const",
    "public: static unsigned short __cdecl std::numeric_limits::min(void)",
    "public: int __thiscall std::codecvt::length(int &,unsigned short const *,unsigned short const *,unsigned int)const",
    "public: static long double __cdecl std::_Ctr::pow(long double,long double)",
    "public: __thiscall std::codecvt::codecvt(unsigned int)",
    "public: virtual __thiscall std::basic_filebuf >::~basic_filebuf >(void)",
    "public: virtual __thiscall std::basic_stringbuf,class std::allocator >::~basic_stringbuf,class std::allocator >(void)",
    "class std::complex __cdecl std::operator-(class std::complex const &,class std::complex const &)",
    "public: class std::range_error & __thiscall std::range_error::operator=(class std::range_error const &)",
    "public: class std::allocator __thiscall std::basic_string,class std::allocator >::get_allocator(void)const",
    "public: int __thiscall std::_Mpunct::frac_digits(void)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::flush(void)",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::end(void)",
    "public: static bool __cdecl std::_Ctr::_Isinf(double)",
    "public: unsigned short const & __thiscall std::basic_string,class std::allocator >::at(unsigned int)const",
    "const std::codecvt_base::`vftable'",
    "public: __thiscall std::messages::messages(unsigned int)",
    "public: class std::basic_string,class std::allocator > __thiscall std::collate::transform(char const *,char const *)const",
    "public: __thiscall std::basic_stringbuf,class std::allocator >::basic_stringbuf,class std::allocator >(class std::basic_string,class std::allocator > const &,int)",
    "const std::money_put > >::`vftable'",
    "struct std::_Smanip __cdecl std::setiosflags(int)",
    "protected: void __thiscall std::num_get > >::_Init(class std::_Locinfo const &)",
    "public: char __thiscall std::basic_ios >::narrow(char,char)const",
    "public: static long double __cdecl std::numeric_limits::max(void)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,double &)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::basic_ostream > & (__cdecl*)(class std::basic_ostream > &))",
    "public: static short __cdecl std::_Ctr::_Exp(long double *,long double,short)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(char const *,char const *)",
    "public: static int __cdecl std::char_traits::compare(unsigned short const *,unsigned short const *,unsigned int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(unsigned short const *)",
    "public: void __thiscall std::bad_cast::`default constructor closure'(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(char const *,unsigned int)const",
    "float const `class std::complex __cdecl std::log(class std::complex const &)'::`6'::_Cl",
    "class std::complex __cdecl std::operator-(float const &,class std::complex const &)",
    "public: void __thiscall std::codecvt::`default constructor closure'(void)",
    "public: virtual __thiscall std::strstreambuf::~strstreambuf(void)",
    "class std::complex __cdecl std::operator/(class std::complex const &,long double const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned int,char)",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekpos(class std::fpos,int)",
    "protected: virtual void __thiscall std::messages::do_close(int)const",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,void const *)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,unsigned short const *)",
    "public: static double __cdecl std::_Ctr::atan2(double,double)",
    "protected: void __thiscall std::basic_stringbuf,class std::allocator >::_Init(char const *,unsigned int,int)",
    "long double const `class std::complex __cdecl std::log(class std::complex const &)'::`6'::_Cm",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::erase(unsigned int,unsigned int)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned short const *)const",
    "bool __cdecl std::operator==(float const &,class std::complex const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,class std::basic_string,class std::allocator > const &)",
    "protected: void __thiscall std::money_get > >::_Init(class std::_Locinfo const &)",
    "public: __thiscall std::basic_ostream >::basic_ostream >(class std::basic_streambuf > *,bool,bool)",
    "private: static char * __cdecl std::basic_string,class std::allocator >::_Psum(char *,unsigned int)",
    "public: static unsigned int __cdecl std::numeric_limits::round_error(void)",
    "protected: virtual int __thiscall std::codecvt_base::do_max_length(void)const",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_monthname(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: class std::basic_ios > & __thiscall std::basic_ios >::operator=(class std::basic_ios > const &)",
    "public: int __thiscall std::codecvt::length(int &,char const *,char const *,unsigned int)const",
    "public: void __thiscall std::basic_fstream >::close(void)",
    "public: virtual __thiscall std::numpunct::~numpunct(void)",
    "_Cosh",
    "public: void __thiscall std::complex::`default constructor closure'(void)",
    "bool __cdecl std::operator<=(char const *,class std::basic_string,class std::allocator > const &)",
    "public: static bool __cdecl std::numeric_limits::round_error(void)",
    "public: bool __thiscall std::ios_base::operator!(void)const",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,unsigned char &)",
    "protected: void __thiscall std::ctype::_Init(class std::_Locinfo const &)",
    "public: char __thiscall std::ctype::narrow(unsigned short,char)const",
    "protected: virtual bool __thiscall std::ctype::do_is(short,unsigned short)const",
    "public: unsigned short const & __thiscall std::basic_string,class std::allocator >::operator[](unsigned int)const",
    "private: static unsigned short const * __cdecl std::basic_string,class std::allocator >::_Nullstr(void)",
    "public: unsigned short const * __thiscall std::ctype::is(unsigned short const *,unsigned short const *,short *)const",
    "public: static unsigned short __cdecl std::numeric_limits::round_error(void)",
    "public: static long double __cdecl std::_Ctr::sqrt(long double)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "_FEps",
    "struct _iobuf * __cdecl std::__Fiopen(char const *,int)",
    "public: int __thiscall std::ios_base::width(int)",
    "bool __cdecl std::operator>=(char const *,class std::basic_string,class std::allocator > const &)",
    "public: char const * __thiscall std::_Locinfo::_Getfalse(void)const",
    "double __cdecl std::abs(class std::complex const &)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator+=(float const &)",
    "public: static short __cdecl std::numeric_limits::max(void)",
    "const std::money_base::`vftable'",
    "_LSnan",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "public: void __thiscall std::basic_ifstream >::open(char const *,int)",
    "protected: void __thiscall std::_Mpunct::_Init(class std::_Locinfo const &)",
    "private: static class std::ostreambuf_iterator > __cdecl std::money_put > >::_Rep(class std::ostreambuf_iterator >,char,unsigned int)",
    "public: virtual __thiscall std::basic_ostream >::~basic_ostream >(void)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator*=(float const &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,long double)const",
    "public: virtual __thiscall std::time_base::~time_base(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(float &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,char const *)",
    "mbsrtowcs",
    "double __cdecl std::imag(class std::complex const &)",
    "public: static unsigned int __cdecl std::numpunct::_Getcat(void)",
    "protected: void __thiscall std::basic_streambuf >::setg(char *,char *,char *)",
    "public: __thiscall std::moneypunct::moneypunct(class std::_Locinfo const &,unsigned int)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(bool &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,unsigned long)const",
    "public: void __thiscall std::ios_base::exceptions(int)",
    "public: static float __cdecl std::numeric_limits::signaling_NaN(void)",
    "protected: void __thiscall std::basic_streambuf >::_Init(void)",
    "_Denorm",
    "class std::basic_ostream > std::cout",
    "class std::complex __cdecl std::operator+(float const &,class std::complex const &)",
    "public: static class std::locale::id std::collate::id",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator+=(double const &)",
    "public: static long double __cdecl std::_Ctr::_Sinh(long double,long double)",
    "public: static unsigned short * __cdecl std::char_traits::assign(unsigned short *,unsigned int,unsigned short const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(unsigned short const *,unsigned int)const",
    "_Poly",
    "public: __thiscall std::time_put > >::time_put > >(unsigned int)",
    "int `protected: void __thiscall std::basic_filebuf >::_Init(struct _iobuf *,enum std::basic_filebuf >::_Initfl)'::`2'::_Stinit",
    "double const `double __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_Xl",
    "protected: void __thiscall std::time_put > >::_Init(class std::_Locinfo const &)",
    "public: int __thiscall std::basic_streambuf >::sputbackc(char)",
    "protected: void __thiscall std::basic_streambuf >::setp(unsigned short *,unsigned short *,unsigned short *)",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_streambuf >::setbuf(unsigned short *,int)",
    "public: static unsigned int __cdecl std::money_get > >::_Getcat(void)",
    "public: virtual __thiscall std::codecvt_base::~codecvt_base(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::size(void)const",
    "const std::money_get > >::`vftable'",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_time(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "protected: virtual class std::fpos __thiscall std::basic_stringbuf,class std::allocator >::seekoff(long,enum std::ios_base::seekdir,int)",
    "wctrans",
    "public: struct std::char_traits & __thiscall std::char_traits::operator=(struct std::char_traits const &)",
    "public: static double __cdecl std::numeric_limits::quiet_NaN(void)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::money_put > >::do_put(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,long double)const",
    "_FDtest",
    "public: __thiscall std::underflow_error::underflow_error(class std::underflow_error const &)",
    "public: __thiscall std::logic_error::logic_error(class std::logic_error const &)",
    "_Stod",
    "public: static unsigned short __cdecl std::numeric_limits::epsilon(void)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,double)const",
    "public: int __thiscall std::ios_base::setf(int,int)",
    "public: __thiscall std::_Mpunct::_Mpunct(class std::_Locinfo const &,unsigned int,bool)",
    "class std::complex __cdecl std::pow(class std::complex const &,double const &)",
    "public: int __thiscall std::basic_streambuf >::in_avail(void)",
    "bool __cdecl std::operator<(char const *,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::money_put > >::money_put > >(class std::_Locinfo const &,unsigned int)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator/=(long double const &)",
    "class std::complex __cdecl std::operator*(class std::complex const &,double const &)",
    "bool __cdecl std::operator<=(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: bool __thiscall std::ctype::is(short,char)const",
    "bool __cdecl std::operator>=(class std::basic_string,class std::allocator > const &,char const *)",
    "class std::complex __cdecl std::operator/(class std::complex const &,double const &)",
    "public: static class std::locale const & __cdecl std::locale::classic(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(char const *,unsigned int,unsigned int)const",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,char)",
    "public: static int __cdecl std::char_traits::not_eof(int const &)",
    "protected: virtual char const * __thiscall std::ctype::do_widen(char const *,char const *,unsigned short *)const",
    "public: static long double __cdecl std::numeric_limits::min(void)",
    "float const `float __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_Xl",
    "protected: short const * __thiscall std::ctype::table(void)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(unsigned short const *,unsigned int,unsigned int)const",
    "class std::complex __cdecl std::operator*(float const &,class std::complex const &)",
    "public: static double __cdecl std::_Ctr::_Sinh(double,double)",
    "protected: virtual int __thiscall std::codecvt::do_max_length(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned short const *,unsigned short const *)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Iput(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,char *,unsigned int)",
    "public: char __thiscall std::basic_ios >::widen(char)const",
    "public: virtual __thiscall std::bad_cast::~bad_cast(void)",
    "public: static unsigned short __cdecl std::char_traits::eof(void)",
    "class std::complex __cdecl std::polar(long double const &,long double const &)",
    "public: char * __thiscall std::basic_string,class std::allocator >::insert(char *,char)",
    "public: __thiscall std::num_get > >::num_get > >(class std::_Locinfo const &,unsigned int)",
    "public: struct std::money_base::pattern __thiscall std::_Mpunct::pos_format(void)const",
    "public: void __thiscall std::basic_ostringstream,class std::allocator >::str(class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned short const *,unsigned int)",
    "public: int __thiscall std::basic_streambuf >::snextc(void)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned int &)const",
    "public: static long double __cdecl std::_Ctr::atan2(long double,long double)",
    "public: class std::_Timevec & __thiscall std::_Timevec::operator=(class std::_Timevec const &)",
    "public: static bool __cdecl std::char_traits::eq_int_type(int const &,int const &)",
    "protected: void __thiscall std::basic_stringbuf,class std::allocator >::_Init(unsigned short const *,unsigned int,int)",
    "double const `class std::complex __cdecl std::log(class std::complex const &)'::`6'::_Cl",
    "_LPoly",
    "public: class std::runtime_error & __thiscall std::runtime_error::operator=(class std::runtime_error const &)",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Mpunct::grouping(void)const",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_scan_not(short,unsigned short const *,unsigned short const *)const",
    "class std::complex __cdecl std::operator-(class std::complex const &,long double const &)",
    "class std::complex __cdecl std::log(class std::complex const &)",
    "public: __thiscall std::_Complex_base::_Complex_base(double const &,double const &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::money_put > >::do_put(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,class std::basic_string,class std::allocator > const &)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::write(unsigned short const *,int)",
    "public: unsigned short const * __thiscall std::ctype::scan_is(short,unsigned short const *,unsigned short const *)const",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekoff(long,enum std::ios_base::seekdir,int)",
    "public: int __thiscall std::collate::compare(char const *,char const *,char const *,char const *)const",
    "public: virtual __thiscall std::messages::~messages(void)",
    "public: void __thiscall std::time_put > >::`default constructor closure'(void)",
    "public: char const * __thiscall std::ctype::is(char const *,char const *,short *)const",
    "const std::basic_istream >::`vftable'",
    "protected: virtual void __thiscall std::bad_alloc::_Doraise(void)const",
    "public: void __thiscall std::ctype::`default constructor closure'(void)",
    "const std::basic_fstream >::`vftable'",
    "public: static short __cdecl std::numeric_limits::min(void)",
    "public: class std::basic_filebuf > * __thiscall std::basic_fstream >::rdbuf(void)const",
    "public: virtual __thiscall std::basic_ifstream >::~basic_ifstream >(void)",
    "protected: virtual int __thiscall std::basic_filebuf >::overflow(int)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator=(class std::basic_ostream > const &)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,unsigned short &)",
    "class std::complex __cdecl std::cosh(class std::complex const &)",
    "public: static short __cdecl std::numeric_limits::epsilon(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,char const *,unsigned int)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,long double &)const",
    "public: __thiscall std::ctype::ctype(unsigned int)",
    "public: char const * __thiscall std::ctype::narrow(char const *,char const *,char,char *)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,char const *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,char const *,unsigned int)",
    "public: char const * __thiscall std::_Locinfo::_Getmonths(void)const",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,char const *)",
    "public: __thiscall std::basic_istream >::basic_istream >(class std::basic_streambuf > *,bool)",
    "public: void __thiscall std::basic_ofstream >::open(char const *,int)",
    "public: class std::basic_ostream > * __thiscall std::basic_ios >::tie(void)const",
    "public: __thiscall std::ios_base::ios_base(class std::ios_base const &)",
    "public: unsigned short & __thiscall std::basic_string,class std::allocator >::operator[](unsigned int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(char,unsigned int)const",
    "protected: virtual int __thiscall std::messages::do_open(class std::basic_string,class std::allocator > const &,class std::locale const &)const",
    "public: virtual __thiscall std::ios_base::~ios_base(void)",
    "protected: virtual void __thiscall std::underflow_error::_Doraise(void)const",
    "_Dscale",
    "long double const `long double __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_Xl",
    "public: unsigned short const * __thiscall std::ctype::narrow(unsigned short const *,unsigned short const *,char,char *)const",
    "const std::basic_ifstream >::`vftable'",
    "public: char const * __thiscall std::ctype::widen(char const *,char const *,unsigned short *)const",
    "protected: virtual bool __thiscall std::codecvt_base::do_always_noconv(void)const",
    "const std::overflow_error::`vftable'",
    "public: static char __cdecl std::numeric_limits::quiet_NaN(void)",
    "class std::complex __cdecl std::pow(double const &,class std::complex const &)",
    "class std::complex & __cdecl std::operator/=(class std::complex &,class std::complex const &)",
    "const std::locale::facet::`vftable'",
    "public: static long double __cdecl std::_Ctr::exp(long double)",
    "public: class std::basic_filebuf > * __thiscall std::basic_ifstream >::rdbuf(void)const",
    "public: __thiscall std::bad_exception::bad_exception(class std::bad_exception const &)",
    "public: __thiscall std::codecvt::codecvt(class std::_Locinfo const &,unsigned int)",
    "public: static bool __cdecl std::char_traits::eq(char const &,char const &)",
    "protected: virtual unsigned short __thiscall std::_Mpunct::do_thousands_sep(void)const",
    "public: static unsigned int __cdecl std::messages::_Getcat(void)",
    "struct std::_Smanip __cdecl std::setw(int)",
    "public: static class std::locale::id std::ctype::id",
    "_Exp",
    "const std::messages_base::`vftable'",
    "bool __cdecl std::operator>(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::numpunct::do_grouping(void)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::seekp(long,enum std::ios_base::seekdir)",
    "public: __thiscall std::basic_ostringstream,class std::allocator >::basic_ostringstream,class std::allocator >(class std::basic_string,class std::allocator > const &,int)",
    "protected: __thiscall std::basic_streambuf >::basic_streambuf >(enum std::_Uninitialized)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator/=(float const &)",
    "_Xbig",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,signed char *)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(unsigned short,unsigned int)const",
    "protected: unsigned short * __thiscall std::basic_streambuf >::_Gninc(void)",
    "public: static char __cdecl std::numeric_limits::infinity(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(char,unsigned int)const",
    "protected: char * __thiscall std::basic_streambuf >::egptr(void)const",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(class std::basic_string,class std::allocator > const &)",
    "public: static double __cdecl std::_Ctr::_Cosh(double,double)",
    "public: char const * __thiscall std::basic_string,class std::allocator >::data(void)const",
    "bool __cdecl std::operator>(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: long & __thiscall std::ios_base::iword(int)",
    "protected: static char * __cdecl std::num_put > >::_Ffmt(char *,char,int)",
    "public: static float __cdecl std::_Ctr::sin(float)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "public: class std::_Winit & __thiscall std::_Winit::operator=(class std::_Winit const &)",
    "mbrtowc",
    "__Wcrtomb_lk",
    "private: unsigned char & __thiscall std::basic_string,class std::allocator >::_Refcnt(unsigned short const *)",
    "protected: virtual int __thiscall std::basic_stringbuf,class std::allocator >::pbackfail(int)",
    "float __cdecl std::imag(class std::complex const &)",
    "public: static double __cdecl std::_Ctr::ldexp(double,int)",
    "class std::complex __cdecl std::operator+(double const &,class std::complex const &)",
    "public: virtual __thiscall std::basic_streambuf >::~basic_streambuf >(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::seekg(class std::fpos)",
    "public: __thiscall std::basic_ofstream >::basic_ofstream >(char const *,int)",
    "public: char & __thiscall std::basic_string,class std::allocator >::operator[](unsigned int)",
    "public: unsigned short __thiscall std::basic_streambuf >::snextc(void)",
    "class std::complex __cdecl std::sin(class std::complex const &)",
    "public: char const * __thiscall std::_Locinfo::_Gettrue(void)const",
    "protected: char * __thiscall std::basic_streambuf >::_Gninc(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "public: void __thiscall std::basic_string,class std::allocator >::insert(char *,char const *,char const *)",
    "const std::domain_error::`vftable'",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(unsigned short,unsigned int)const",
    "public: unsigned short const * __thiscall std::ctype::toupper(unsigned short *,unsigned short const *)const",
    "protected: virtual unsigned short __thiscall std::ctype::do_widen(char)const",
    "protected: void __thiscall std::basic_streambuf >::gbump(int)",
    "private: void __thiscall std::_Mpunct::_Makpat(struct std::money_base::pattern &,char,char,char)",
    "const std::numpunct::`vftable'",
    "public: __thiscall std::time_put > >::time_put > >(class std::_Locinfo const &,unsigned int)",
    "public: unsigned short __thiscall std::numpunct::thousands_sep(void)const",
    "protected: void __thiscall std::codecvt::_Init(class std::_Locinfo const &)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::money_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,bool,class std::ios_base &,int &,class std::basic_string,class std::allocator > &)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::length(void)const",
    "public: static bool __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: class std::_Lockit & __thiscall std::_Lockit::operator=(class std::_Lockit const &)",
    "public: void __thiscall std::ios_base::clear(short)",
    "class std::complex __cdecl std::conj(class std::complex const &)",
    "public: unsigned short const * __thiscall std::basic_string,class std::allocator >::begin(void)const",
    "protected: virtual unsigned short __thiscall std::ctype::do_tolower(unsigned short)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_ostringstream,class std::allocator >::str(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned short const *,unsigned short const *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(class std::basic_string,class std::allocator > const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(unsigned short const *,unsigned int,unsigned int)const",
    "protected: virtual int __thiscall std::basic_stringbuf,class std::allocator >::overflow(int)",
    "public: static char * __cdecl std::char_traits::copy(char *,char const *,unsigned int)",
    "_Inf",
    "_LDenorm",
    "protected: virtual class std::fpos __thiscall std::basic_stringbuf,class std::allocator >::seekpos(class std::fpos,int)",
    "public: void __thiscall std::_Timevec::`default constructor closure'(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(char const *,unsigned int,unsigned int)const",
    "public: void __thiscall std::basic_string,class std::allocator >::resize(unsigned int)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned short &)const",
    "class std::basic_istream > std::wcin",
    "public: struct std::_Num_int_base & __thiscall std::_Num_int_base::operator=(struct std::_Num_int_base const &)",
    "bool __cdecl std::operator<=(class std::basic_string,class std::allocator > const &,char const *)",
    "public: void __thiscall std::money_put > >::`default constructor closure'(void)",
    "public: __thiscall std::runtime_error::runtime_error(class std::runtime_error const &)",
    "public: class std::reverse_iterator __thiscall std::basic_string,class std::allocator >::rbegin(void)",
    "public: __thiscall std::basic_istream >::basic_istream >(enum std::_Uninitialized)",
    "public: static float __cdecl std::_Ctr::cos(float)",
    "protected: virtual class std::fpos __thiscall std::basic_filebuf >::seekoff(long,enum std::ios_base::seekdir,int)",
    "public: __thiscall std::moneypunct::moneypunct(unsigned int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,unsigned int,unsigned short)",
    "protected: virtual int __thiscall std::time_get > >::do_date_order(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(unsigned short)",
    "const std::time_put > >::`vftable'",
    "class std::complex __cdecl std::polar(float const &)",
    "public: static unsigned short __cdecl std::char_traits::to_int_type(unsigned short const &)",
    "public: static signed char __cdecl std::numeric_limits::round_error(void)",
    "public: class std::ostreambuf_iterator > __thiscall std::money_put > >::put(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,long double)const",
    "bool __cdecl std::operator==(char const *,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::_Locinfo::_Locinfo(char const *)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(char *,int)",
    "public: virtual __thiscall std::basic_ios >::~basic_ios >(void)",
    "_FSnan",
    "public: static double __cdecl std::numeric_limits::denorm_min(void)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,signed char const *)",
    "public: float __thiscall std::_Complex_base::imag(void)const",
    "public: bool __thiscall std::ios_base::eof(void)const",
    "_Rteps",
    "class std::complex __cdecl std::operator+(class std::complex const &,long double const &)",
    "float const `float __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_Xh",
    "public: struct std::_Num_base & __thiscall std::_Num_base::operator=(struct std::_Num_base const &)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator*=(double const &)",
    "public: static double __cdecl std::numeric_limits::infinity(void)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(char const *,class std::basic_string,class std::allocator > const &)",
    "private: static short const * const std::ctype::_Cltab",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(unsigned short const *,unsigned int,unsigned int)const",
    "public: unsigned short __thiscall std::basic_ios >::widen(char)const",
    "public: void __thiscall std::basic_string,class std::allocator >::insert(unsigned short *,unsigned short const *,unsigned short const *)",
    "class std::complex __cdecl std::operator-(class std::complex const &,double const &)",
    "public: static bool __cdecl std::ios_base::sync_with_stdio(bool)",
    "public: static unsigned int const std::ctype::table_size",
    "class std::basic_istream > std::cin",
    "public: char __thiscall std::numpunct::decimal_point(void)const",
    "public: class std::basic_streambuf > * __thiscall std::basic_ios >::rdbuf(void)const",
    "public: char * __thiscall std::basic_string,class std::allocator >::begin(void)",
    "public: static bool __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: void * & __thiscall std::ios_base::pword(int)",
    "public: void __thiscall std::basic_ostream >::osfx(void)",
    "const std::bad_cast::`vftable'",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(unsigned short *,int,unsigned short)",
    "public: static float __cdecl std::_Ctr::_Nanv(float)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(char *,int,char)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::_Mpunct::do_negative_sign(void)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(char &)",
    "public: static double __cdecl std::_Ctr::exp(double)",
    "public: __thiscall std::_Timevec::~_Timevec(void)",
    "const std::collate::`vftable'",
    "public: static char __cdecl std::numeric_limits::epsilon(void)",
    "protected: virtual void __thiscall std::logic_error::_Doraise(void)const",
    "_LRteps",
    "public: static unsigned int __cdecl std::num_put > >::_Getcat(void)",
    "public: static unsigned char __cdecl std::numeric_limits::max(void)",
    "private: static int __cdecl std::time_get > >::_Getint(class std::istreambuf_iterator > &,class std::istreambuf_iterator > &,int,int,int &)",
    "public: static double __cdecl std::_Ctr::_Nanv(double)",
    "const std::basic_iostream >::`vbtable'{for `std::basic_istream >'}",
    "class std::complex __cdecl std::operator/(double const &,class std::complex const &)",
    "public: int __thiscall std::codecvt_base::encoding(void)const",
    "char const `private: static char const * __cdecl std::basic_string,class std::allocator >::_Nullstr(void)'::`2'::_C",
    "public: static float __cdecl std::numeric_limits::denorm_min(void)",
    "public: static unsigned short * __cdecl std::char_traits::copy(unsigned short *,unsigned short const *,unsigned int)",
    "const std::messages::`vftable'",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,unsigned short const *,unsigned int)const",
    "public: class std::overflow_error & __thiscall std::overflow_error::operator=(class std::overflow_error const &)",
    "public: void __thiscall std::basic_filebuf >::`default constructor closure'(void)",
    "class std::complex __cdecl std::log10(class std::complex const &)",
    "wcrtomb",
    "public: int __thiscall std::basic_streambuf >::sgetn(unsigned short *,int)",
    "public: __thiscall std::_Locinfo::_Locinfo(class std::_Locinfo const &)",
    "void __cdecl std::_Xlen(void)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::egptr(void)const",
    "public: __thiscall std::bad_cast::bad_cast(char const *)",
    "private: void __thiscall std::basic_string,class std::allocator >::_Freeze(void)",
    "public: char const * __thiscall std::_Locinfo::_Getno(void)const",
    "public: struct std::_Num_float_base & __thiscall std::_Num_float_base::operator=(struct std::_Num_float_base const &)",
    "protected: virtual int __thiscall std::codecvt_base::do_encoding(void)const",
    "public: static unsigned long __cdecl std::numeric_limits::max(void)",
    "public: virtual __thiscall std::num_put > >::~num_put > >(void)",
    "public: void __thiscall std::money_base::`default constructor closure'(void)",
    "protected: virtual int __thiscall std::codecvt::do_in(int &,char const *,char const *,char const * &,char *,char *,char * &)const",
    "public: class std::basic_streambuf > * __thiscall std::basic_streambuf >::pubsetbuf(char *,int)",
    "public: __thiscall std::length_error::length_error(class std::basic_string,class std::allocator > const &)",
    "public: static unsigned int __cdecl std::numeric_limits::epsilon(void)",
    "public: static unsigned short __cdecl std::numeric_limits::max(void)",
    "public: class std::_Timevec __thiscall std::_Locinfo::_Gettnames(void)const",
    "public: char * __thiscall std::basic_string,class std::allocator >::erase(char *)",
    "private: void __thiscall std::basic_string,class std::allocator >::_Eos(unsigned int)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::epptr(void)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator=(class std::basic_istream > const &)",
    "public: __thiscall std::basic_string,class std::allocator >::~basic_string,class std::allocator >(void)",
    "public: __thiscall std::domain_error::domain_error(class std::basic_string,class std::allocator > const &)",
    "public: void __thiscall std::basic_ifstream >::close(void)",
    "private: static int __cdecl std::num_get > >::_Getifld(char *,class std::istreambuf_iterator > &,class std::istreambuf_iterator > &,int,class std::locale const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(unsigned short *,int)",
    "public: void __thiscall std::numpunct::`default constructor closure'(void)",
    "public: static long double __cdecl std::numeric_limits::denorm_min(void)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned short &)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::basic_streambuf > *)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(unsigned short)",
    "public: bool __thiscall std::basic_ifstream >::is_open(void)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::collate::transform(unsigned short const *,unsigned short const *)const",
    "btowc",
    "public: virtual __thiscall std::strstream::~strstream(void)",
    "bool __cdecl std::operator>(char const *,class std::basic_string,class std::allocator > const &)",
    "const std::basic_streambuf >::`vftable'",
    "public: unsigned short const * __thiscall std::ctype::tolower(unsigned short *,unsigned short const *)const",
    "public: __thiscall std::money_get > >::money_get > >(class std::_Locinfo const &,unsigned int)",
    "public: void __thiscall std::basic_string,class std::allocator >::insert(unsigned short *,unsigned int,unsigned short)",
    "class std::basic_istream > & __cdecl std::getline(class std::basic_istream > &,class std::basic_string,class std::allocator > &,char)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator-=(double const &)",
    "public: void __thiscall std::basic_fstream >::open(char const *,int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(char,unsigned int)const",
    "public: static signed char __cdecl std::numeric_limits::epsilon(void)",
    "bool __cdecl std::operator==(class std::complex const &,class std::complex const &)",
    "protected: char * __thiscall std::basic_streambuf >::_Pninc(void)",
    "public: char const * __thiscall std::ctype::scan_not(short,char const *,char const *)const",
    "public: static long double __cdecl std::_Ctr::_Nanv(long double)",
    "public: __thiscall std::basic_istringstream,class std::allocator >::basic_istringstream,class std::allocator >(int)",
    "protected: static void __cdecl std::ctype::_Term(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "public: static unsigned int __cdecl std::locale::facet::_Getcat(void)",
    "public: void __thiscall std::num_get > >::`default constructor closure'(void)",
    "_Stof",
    "public: __thiscall std::num_put > >::num_put > >(unsigned int)",
    "public: bool __thiscall std::basic_istream >::ipfx(bool)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,unsigned short const *)",
    "public: class std::basic_stringbuf,class std::allocator > * __thiscall std::basic_stringstream,class std::allocator >::rdbuf(void)const",
    "public: static double __cdecl std::numeric_limits::min(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::copy(unsigned short *,unsigned int,unsigned int)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(unsigned short const *,unsigned int,unsigned int)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(char const *,unsigned int)",
    "private: static int std::locale::id::_Id_cnt",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::ignore(int,unsigned short)",
    "class std::basic_ostream > std::cerr",
    "public: char __thiscall std::ctype::narrow(char,char)const",
    "const std::basic_istringstream,class std::allocator >::`vftable'",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,unsigned long)const",
    "public: class std::locale __thiscall std::basic_ios >::imbue(class std::locale const &)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::numpunct::do_truename(void)const",
    "protected: virtual char __thiscall std::_Mpunct::do_thousands_sep(void)const",
    "public: __thiscall std::basic_ostream >::basic_ostream >(class std::basic_ostream > const &)",
    "protected: virtual void __thiscall std::range_error::_Doraise(void)const",
    "protected: void __thiscall std::basic_streambuf >::setp(char *,char *)",
    "struct std::nothrow_t const std::nothrow",
    "protected: virtual void __thiscall std::length_error::_Doraise(void)const",
    "public: static unsigned short const * __cdecl std::char_traits::find(unsigned short const *,unsigned int,unsigned short const &)",
    "public: static unsigned int __cdecl std::char_traits::length(unsigned short const *)",
    "protected: virtual int __thiscall std::basic_streambuf >::xsgetn(char *,int)",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_toupper(unsigned short *,unsigned short const *)const",
    "public: virtual __thiscall std::locale::facet::~facet(void)",
    "class std::complex __cdecl std::cos(class std::complex const &)",
    "bool __cdecl std::operator>(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::runtime_error::runtime_error(class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,class std::basic_string,class std::allocator > const &)",
    "public: unsigned short __thiscall std::ctype::widen(char)const",
    "protected: void __thiscall std::money_put > >::_Init(class std::_Locinfo const &)",
    "public: static bool __cdecl std::_Ctr::_Isinf(float)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(unsigned int &)",
    "class std::complex __cdecl std::operator+(class std::complex const &,float const &)",
    "class std::complex __cdecl std::operator*(class std::complex const &,long double const &)",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_narrow(unsigned short const *,unsigned short const *,char,char *)const",
    "double const `double __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_Xh",
    "bool __cdecl std::operator<(class std::basic_string,class std::allocator > const &,char const *)",
    "public: void __thiscall std::basic_ios >::clear(short)",
    "protected: virtual int __thiscall std::basic_streambuf >::pbackfail(int)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,double)const",
    "public: __thiscall std::basic_ios >::basic_ios >(class std::basic_ios > const &)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::_Mpunct::do_grouping(void)const",
    "bool __cdecl std::operator==(class std::complex const &,float const &)",
    "public: void __thiscall std::collate::`default constructor closure'(void)",
    "public: __thiscall std::_Lockit::~_Lockit(void)",
    "protected: virtual void __thiscall std::basic_streambuf >::imbue(class std::locale const &)",
    "double __cdecl std::_Fabs(class std::complex const &,int *)",
    "protected: virtual int __thiscall std::collate::do_compare(char const *,char const *,char const *,char const *)const",
    "public: static long double __cdecl std::_Ctr::_Infv(long double)",
    "public: virtual __thiscall std::basic_stringstream,class std::allocator >::~basic_stringstream,class std::allocator >(void)",
    "bool __cdecl std::operator<=(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(unsigned short,unsigned int)const",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Iput(class std::ostreambuf_iterator >,class std::ios_base &,char,char *,unsigned int)",
    "double __cdecl std::arg(class std::complex const &)",
    "public: static bool __cdecl std::_Ctr::_Isnan(long double)",
    "protected: virtual long __thiscall std::collate::do_hash(char const *,char const *)const",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned int &)const",
    "public: __thiscall std::basic_stringstream,class std::allocator >::basic_stringstream,class std::allocator >(class std::basic_string,class std::allocator > const &,int)",
    "public: static int __cdecl std::ios_base::xalloc(void)",
    "protected: virtual int __thiscall std::basic_streambuf >::xsputn(char const *,int)",
    "public: static long double __cdecl std::numeric_limits::infinity(void)",
    "public: void __thiscall std::ctype_base::`default constructor closure'(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "class std::complex __cdecl std::operator+(class std::complex const &)",
    "public: char __thiscall std::basic_ios >::fill(char)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::copy(char *,unsigned int,unsigned int)const",
    "public: static unsigned char __cdecl std::numeric_limits::denorm_min(void)",
    "float __cdecl std::arg(class std::complex const &)",
    "public: static unsigned int __cdecl std::_Mpunct::_Getcat(void)",
    "public: class std::locale & __thiscall std::locale::operator=(class std::locale const &)",
    "public: virtual __thiscall std::money_base::~money_base(void)",
    "const std::ios_base::`vftable'",
    "_LEps",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(char *,int,char)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "void __cdecl std::_Nomemory(void)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator/=(double const &)",
    "public: void __thiscall std::messages::close(int)const",
    "public: virtual __thiscall std::bad_alloc::~bad_alloc(void)",
    "bool __cdecl std::operator!=(float const &,class std::complex const &)",
    "public: unsigned short __thiscall std::ctype::tolower(unsigned short)const",
    "bool __cdecl std::operator<(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: static short __cdecl std::_Ctr::_Exp(float *,float,short)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,float &)const",
    "public: static double __cdecl std::_Ctr::sin(double)",
    "long double const `class std::complex __cdecl std::log(class std::complex const &)'::`6'::_Cl",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,unsigned int,char)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Fput(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,char const *,unsigned int,unsigned int)",
    "struct std::_Smanip __cdecl std::setbase(int)",
    "public: static float __cdecl std::numeric_limits::max(void)",
    "class std::basic_ostream > std::clog",
    "protected: void __thiscall std::basic_filebuf >::_Init(struct _iobuf *,enum std::basic_filebuf >::_Initfl)",
    "public: __thiscall std::money_get > >::money_get > >(unsigned int)",
    "public: static short __cdecl std::numeric_limits::round_error(void)",
    "class std::complex __cdecl std::operator/(long double const &,class std::complex const &)",
    "public: int __thiscall std::ios_base::setf(int)",
    "public: __thiscall std::ctype::ctype(class std::_Locinfo const &,unsigned int)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Put(class std::ostreambuf_iterator >,unsigned short const *,unsigned int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(char)",
    "protected: virtual void __thiscall std::bad_cast::_Doraise(void)const",
    "public: int __thiscall std::ios_base::exceptions(void)const",
    "protected: virtual int __thiscall std::codecvt::do_out(int &,char const *,char const *,char const * &,char *,char *,char * &)const",
    "public: static class std::locale::id std::money_put > >::id",
    "wctob",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,unsigned short)",
    "public: void __thiscall std::basic_stringstream,class std::allocator >::str(class std::basic_string,class std::allocator > const &)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_date(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "bool __cdecl std::operator==(class std::complex const &,long double const &)",
    "public: static unsigned int __cdecl std::codecvt::_Getcat(void)",
    "protected: virtual void __thiscall std::domain_error::_Doraise(void)const",
    "public: class std::locale __thiscall std::ios_base::getloc(void)const",
    "public: __thiscall std::codecvt_base::codecvt_base(unsigned int)",
    "_FDscale",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)",
    "public: static unsigned long __cdecl std::numeric_limits::denorm_min(void)",
    "public: static unsigned char __cdecl std::numeric_limits::min(void)",
    "public: static bool __cdecl std::char_traits::lt(unsigned short const &,unsigned short const &)",
    "public: void __thiscall std::messages_base::`default constructor closure'(void)",
    "const std::length_error::`vftable'",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator-=(float const &)",
    "protected: virtual char __thiscall std::ctype::do_tolower(char)const",
    "public: bool __thiscall std::ios_base::good(void)const",
    "public: static char __cdecl std::numeric_limits::min(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(char const *)",
    "private: static class std::ostreambuf_iterator > __cdecl std::money_put > >::_Rep(class std::ostreambuf_iterator >,unsigned short,unsigned int)",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Mpunct::negative_sign(void)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::basic_ios > & (__cdecl*)(class std::basic_ios > &))",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(long)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(char)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(char const *,unsigned int)const",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,long double)const",
    "const std::basic_istream >::`vbtable'",
    "protected: void __thiscall std::basic_streambuf >::setg(unsigned short *,unsigned short *,unsigned short *)",
    "public: class std::ostreambuf_iterator > __thiscall std::time_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,struct tm const *,char const *,char const *)const",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_weekday(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: void __thiscall std::basic_istringstream,class std::allocator >::`default constructor closure'(void)",
    "protected: virtual int __thiscall std::basic_streambuf >::showmanyc(void)",
    "public: char const * __thiscall std::basic_string,class std::allocator >::end(void)const",
    "class std::complex __cdecl std::polar(double const &)",
    "protected: virtual int __thiscall std::_Mpunct::do_frac_digits(void)const",
    "protected: virtual int __thiscall std::strstreambuf::underflow(void)",
    "protected: virtual char const * __thiscall std::ctype::do_tolower(char *,char const *)const",
    "public: bool __thiscall std::locale::operator!=(class std::locale const &)const",
    "class std::complex __cdecl std::operator*(class std::complex const &,class std::complex const &)",
    "public: static long __cdecl std::numeric_limits::round_error(void)",
    "public: double __thiscall std::_Complex_base::imag(double const &)",
    "public: static bool __cdecl std::numeric_limits::epsilon(void)",
    "_LSinh",
    "public: static float __cdecl std::_Ctr::_Cosh(float,float)",
    "public: void __thiscall std::ios_base::unsetf(int)",
    "public: static unsigned char __cdecl std::numeric_limits::epsilon(void)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,char &)",
    "public: int __thiscall std::basic_istream >::sync(void)",
    "wctype",
    "public: char const * __thiscall std::ctype::tolower(char *,char const *)const",
    "const std::ctype_base::`vftable'",
    "class std::complex __cdecl std::pow(class std::complex const &,long double const &)",
    "_Toupper",
    "public: class std::locale __thiscall std::basic_streambuf >::pubimbue(class std::locale const &)",
    "public: static unsigned int __cdecl std::collate::_Getcat(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::putback(char)",
    "public: unsigned short __thiscall std::basic_ios >::fill(void)const",
    "public: static unsigned int __cdecl std::moneypunct::_Getcat(void)",
    "public: class std::istreambuf_iterator > __thiscall std::money_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,bool,class std::ios_base &,int &,long double &)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,unsigned int,char)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::collate::do_transform(char const *,char const *)const",
    "public: void __thiscall std::basic_string,class std::allocator >::`default constructor closure'(void)",
    "bool __cdecl std::operator!=(class std::complex const &,long double const &)",
    "public: __thiscall std::_Timevec::_Timevec(void *)",
    "protected: virtual char __thiscall std::_Mpunct::do_decimal_point(void)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::numpunct::grouping(void)const",
    "protected: virtual unsigned short __thiscall std::basic_filebuf >::uflow(void)",
    "public: void __thiscall std::ios_base::setstate(short)",
    "bool __cdecl std::operator>=(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,bool &)const",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,long double)const",
    "public: static class std::locale::id std::moneypunct::id",
    "private: class std::basic_string,class std::allocator > __thiscall std::money_get > >::_Getmfld(class std::istreambuf_iterator > &,class std::istreambuf_iterator > &,bool,class std::ios_base &)const",
    "public: char const * __thiscall std::basic_string,class std::allocator >::c_str(void)const",
    "public: struct _Ctypevec __thiscall std::_Locinfo::_Getctype(void)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::ios_base & (__cdecl*)(class std::ios_base &))",
    "bool __cdecl std::operator!=(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: static long __cdecl std::numeric_limits::infinity(void)",
    "public: void __thiscall std::basic_ofstream >::`vbase destructor'(void)",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_stringbuf,class std::allocator >::str(void)const",
    "_Getcvt",
    "class std::complex __cdecl std::operator-(double const &,class std::complex const &)",
    "class std::complex __cdecl std::operator*(long double const &,class std::complex const &)",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::begin(void)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::pbase(void)const",
    "bool __cdecl std::operator>(class std::basic_string,class std::allocator > const &,char const *)",
    "protected: void __thiscall std::basic_streambuf >::setp(char *,char *,char *)",
    "public: unsigned short __thiscall std::basic_streambuf >::sgetc(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)",
    "public: int __thiscall std::ios_base::flags(void)const",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::numpunct::do_falsename(void)const",
    "public: static short __cdecl std::numeric_limits::infinity(void)",
    "public: char const * __thiscall std::ctype::toupper(char *,char const *)const",
    "public: static char * __cdecl std::char_traits::assign(char *,unsigned int,char const &)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::pptr(void)const",
    "public: class std::bad_cast & __thiscall std::bad_cast::operator=(class std::bad_cast const &)",
    "public: class std::allocator & __thiscall std::allocator::operator=(class std::allocator const &)",
    "public: static int __cdecl std::numeric_limits::infinity(void)",
    "public: static float __cdecl std::_Ctr::exp(float)",
    "_Strcoll",
    "public: __thiscall std::overflow_error::overflow_error(class std::overflow_error const &)",
    "public: class std::basic_ostream > * __thiscall std::basic_ios >::tie(class std::basic_ostream > *)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,double)const",
    "public: int __thiscall std::basic_istream >::readsome(char *,int)",
    "public: virtual __thiscall std::bad_exception::~bad_exception(void)",
    "public: struct _Collvec __thiscall std::_Locinfo::_Getcoll(void)const",
    "public: void __thiscall std::money_get > >::`default constructor closure'(void)",
    "const std::basic_ostream >::`vftable'",
    "public: static class std::locale::id std::money_get > >::id",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,void const *)const",
    "public: void __thiscall std::basic_stringbuf,class std::allocator >::str(class std::basic_string,class std::allocator > const &)",
    "public: static class std::locale::id std::codecvt::id",
    "public: bool __thiscall std::basic_filebuf >::is_open(void)const",
    "class std::basic_istream > & __cdecl std::getline(class std::basic_istream > &,class std::basic_string,class std::allocator > &)",
    "_LCosh",
    "public: unsigned short __thiscall std::basic_streambuf >::sputc(unsigned short)",
    "public: __thiscall std::numpunct::numpunct(unsigned int)",
    "protected: virtual class std::fpos __thiscall std::basic_filebuf >::seekpos(class std::fpos,int)",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Mpunct::curr_symbol(void)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::locale::name(void)const",
    "public: static long double __cdecl std::numeric_limits::round_error(void)",
    "public: static unsigned int __cdecl std::char_traits::length(char const *)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,bool)const",
    "public: long double __thiscall std::_Complex_base::imag(void)const",
    "public: class std::ios_base::Init & __thiscall std::ios_base::Init::operator=(class std::ios_base::Init const &)",
    "protected: virtual char __thiscall std::numpunct::do_thousands_sep(void)const",
    "public: __thiscall std::time_get > >::time_get > >(class std::_Locinfo const &,unsigned int)",
    "protected: void __thiscall std::basic_streambuf >::setp(unsigned short *,unsigned short *)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::money_put > >::do_put(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,class std::basic_string,class std::allocator > const &)const",
    "public: static long double __cdecl std::_Ctr::sin(long double)",
    "public: __thiscall std::_Locinfo::~_Locinfo(void)",
    "protected: char * __thiscall std::basic_streambuf >::eback(void)const",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_is(unsigned short const *,unsigned short const *,short *)const",
    "public: static long __cdecl std::numeric_limits::denorm_min(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,unsigned int,char)",
    "private: static char const * __cdecl std::basic_string,class std::allocator >::_Psum(char const *,unsigned int)",
    "class std::basic_istream > & __cdecl std::getline(class std::basic_istream > &,class std::basic_string,class std::allocator > &,unsigned short)",
    "bool __cdecl std::operator<(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::locale::locale(void)",
    "public: class std::basic_filebuf > * __thiscall std::basic_ofstream >::rdbuf(void)const",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,short const *)",
    "public: char const & __thiscall std::basic_string,class std::allocator >::at(unsigned int)const",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Putc(class std::ostreambuf_iterator >,char const *,unsigned int)",
    "public: static unsigned short __cdecl std::numeric_limits::quiet_NaN(void)",
    "protected: __thiscall std::basic_streambuf >::basic_streambuf >(void)",
    "public: char const * __thiscall std::basic_string,class std::allocator >::begin(void)const",
    "public: class std::locale::facet const * __thiscall std::locale::_Getfacet(unsigned int,bool)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(float)",
    "public: class std::complex & __thiscall std::complex::operator=(class std::complex const &)",
    "public: static int __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: void __thiscall std::basic_ios >::setstate(short)",
    "public: static long double __cdecl std::_Ctr::ldexp(long double,int)",
    "public: struct _Cvtvec __thiscall std::_Locinfo::_Getcvt(void)const",
    "protected: virtual unsigned short __thiscall std::basic_filebuf >::overflow(unsigned short)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::read(unsigned short *,int)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::_Mpunct::do_curr_symbol(void)const",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,long)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_stringstream,class std::allocator >::str(void)const",
    "public: __thiscall std::numpunct::numpunct(class std::_Locinfo const &,unsigned int)",
    "public: static bool __cdecl std::numeric_limits::denorm_min(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::max_size(void)const",
    "protected: void __thiscall std::strstreambuf::_Tidy(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(class std::basic_string,class std::allocator > const &)",
    "public: static float __cdecl std::numeric_limits::epsilon(void)",
    "class std::complex __cdecl std::operator-(long double const &,class std::complex const &)",
    "public: static float __cdecl std::_Ctr::log(float)"
  ],
  "msvcp60.dll": [
    "protected: virtual unsigned short const * __thiscall std::ctype::do_tolower(unsigned short *,unsigned short const *)const",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned short const *,unsigned short const *,class std::allocator const &)",
    "public: static unsigned long __cdecl std::numeric_limits::infinity(void)",
    "public: __thiscall std::basic_streambuf >::basic_streambuf >(class std::basic_streambuf > const &)",
    "public: void __thiscall std::locale::facet::`default constructor closure'(void)",
    "public: static unsigned int __cdecl std::numeric_limits::min(void)",
    "public: void __thiscall std::basic_string,class std::allocator >::reserve(unsigned int)",
    "public: static unsigned char __cdecl std::numeric_limits::infinity(void)",
    "public: virtual __thiscall std::underflow_error::~underflow_error(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(int &)",
    "public: int __thiscall std::codecvt::in(int &,char const *,char const *,char const * &,unsigned short *,unsigned short *,unsigned short * &)const",
    "class std::complex __cdecl std::operator+(long double const &,class std::complex const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(unsigned short const *,unsigned int)const",
    "public: static double __cdecl std::_Ctr::cos(double)",
    "void __cdecl std::_Xran(void)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned short const *,class std::allocator const &)",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::underflow(void)",
    "public: class std::ostreambuf_iterator > __thiscall std::time_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,struct tm const *,unsigned short const *,unsigned short const *)const",
    "_Getctype",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(double &)",
    "??$arg@O@std@@YAOABV?$complex@O@0@@Z",
    "protected: static char * __cdecl std::num_put > >::_Ifmt(char *,char,int)",
    "public: __thiscall std::complex::complex(double const &,double const &)",
    "public: virtual __thiscall std::money_get > >::~money_get > >(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::basic_streambuf > *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,char const *,unsigned int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(char const *,unsigned int)const",
    "??$cos@O@std@@YA?AV?$complex@O@0@ABV10@@Z",
    "bool __cdecl std::operator>=(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(unsigned short *,int,unsigned short)",
    "public: void __thiscall std::time_base::`default constructor closure'(void)",
    "??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z",
    "??$?_0NN@std@@YAAAV?$complex@N@0@AAV10@ABV10@@Z",
    "bool __cdecl std::uncaught_exception(void)",
    "const std::range_error::`vftable'",
    "public: virtual char const * __thiscall std::logic_error::what(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(class std::basic_string,class std::allocator > const &)",
    "public: void __thiscall std::_Locinfo::`default constructor closure'(void)",
    "public: void __thiscall std::basic_streambuf >::stossc(void)",
    "public: __thiscall std::messages::messages(class std::_Locinfo const &,unsigned int)",
    "public: static char __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: void __thiscall std::basic_istringstream,class std::allocator >::`vbase destructor'(void)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::money_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,bool,class std::ios_base &,int &,long double &)const",
    "public: static short __cdecl std::_Ctr::_Exp(double *,double,short)",
    "public: static long __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: __thiscall std::_Winit::~_Winit(void)",
    "public: __thiscall std::basic_ifstream >::basic_ifstream >(class std::basic_ifstream > const &)",
    "??$cos@N@std@@YA?AV?$complex@N@0@ABV10@@Z",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_time(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_streambuf >::setbuf(char *,int)",
    "public: __thiscall std::basic_istream >::basic_istream >(class std::basic_istream > const &)",
    "public: static unsigned char __cdecl std::numeric_limits::round_error(void)",
    "public: virtual __thiscall std::collate::~collate(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,unsigned short const *,unsigned int)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_year(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(class std::basic_string,class std::allocator > const &)",
    "public: class std::ostreambuf_iterator > __thiscall std::money_put > >::put(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,class std::basic_string,class std::allocator > const &)const",
    "??$?GO@std@@YA?AV?$complex@O@0@ABOABV10@@Z",
    "protected: virtual void __thiscall std::runtime_error::_Doraise(void)const",
    "public: virtual __thiscall std::length_error::~length_error(void)",
    "??$pow@N@std@@YA?AV?$complex@N@0@ABV10@0@Z",
    "class std::complex __cdecl std::operator-(class std::complex const &,float const &)",
    "public: virtual __thiscall std::codecvt::~codecvt(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(char const *)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,class std::complex const &)",
    "??$?9M@std@@YA_NABMABV?$complex@M@0@@Z",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,unsigned char)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,unsigned char const *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(char const *,char const *)",
    "public: virtual __thiscall std::overflow_error::~overflow_error(void)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator+=(long double const &)",
    "public: static unsigned int __cdecl std::time_put > >::_Getcat(void)",
    "??$exp@N@std@@YA?AV?$complex@N@0@ABV10@@Z",
    "protected: char * __thiscall std::basic_streambuf >::pptr(void)const",
    "const std::basic_stringstream,class std::allocator >::`vftable'",
    "public: __thiscall std::_Complex_base::_Complex_base(long double const &,long double const &)",
    "public: static class std::locale::id std::num_get > >::id",
    "protected: char * __thiscall std::basic_streambuf >::epptr(void)const",
    "public: class std::fpos __thiscall std::basic_istream >::tellg(void)",
    "??$?8O@std@@YA_NABV?$complex@O@0@0@Z",
    "public: static unsigned short __cdecl std::char_traits::not_eof(unsigned short const &)",
    "public: __thiscall std::basic_filebuf >::basic_filebuf >(enum std::_Uninitialized)",
    "??$?8O@std@@YA_NABOABV?$complex@O@0@@Z",
    "??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z",
    "protected: void __thiscall std::basic_streambuf >::_Init(unsigned short * *,unsigned short * *,int *,unsigned short * *,unsigned short * *,int *)",
    "const std::basic_istringstream,class std::allocator >::`vbtable'",
    "private: class std::ostreambuf_iterator > __thiscall std::money_put > >::_Putmfld(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,bool,class std::basic_string,class std::allocator >)const",
    "??$?NDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z",
    "public: char __thiscall std::ctype::toupper(char)const",
    "public: static unsigned long __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: static unsigned long __cdecl std::numeric_limits::min(void)",
    "??$?GM@std@@YA?AV?$complex@M@0@ABV10@0@Z",
    "??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBE@Z",
    "??$_Fabs@N@std@@YANABV?$complex@N@0@PAH@Z",
    "public: class std::_Locinfo & __thiscall std::_Locinfo::_Addcats(int,char const *)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(bool)",
    "??$?DO@std@@YA?AV?$complex@O@0@ABV10@ABO@Z",
    "public: void __thiscall std::basic_ostringstream,class std::allocator >::`vbase destructor'(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(class std::basic_streambuf > &,char)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(unsigned short,unsigned int)const",
    "const std::basic_ifstream >::`vbtable'",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,void const *)const",
    "public: __thiscall std::overflow_error::overflow_error(class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::out_of_range::out_of_range(class std::basic_string,class std::allocator > const &)",
    "private: struct std::ios_base::_Iosarray & __thiscall std::ios_base::_Findarr(int)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Put(class std::ostreambuf_iterator >,char const *,unsigned int)",
    "public: __thiscall std::bad_alloc::bad_alloc(class std::bad_alloc const &)",
    "public: int __thiscall std::collate::compare(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)const",
    "??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z",
    "public: int __thiscall std::basic_streambuf >::sgetn(char *,int)",
    "??$?MGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA_NPBGABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@@Z",
    "private: __thiscall std::locale::locale(class std::locale::_Locimp *)",
    "_FRteps",
    "public: static int __cdecl std::numeric_limits::round_error(void)",
    "??$?GN@std@@YA?AV?$complex@N@0@ABV10@@Z",
    "protected: virtual unsigned short __thiscall std::ctype::do_toupper(unsigned short)const",
    "class std::complex __cdecl std::pow(long double const &,class std::complex const &)",
    "protected: virtual unsigned short __thiscall std::numpunct::do_decimal_point(void)const",
    "public: virtual __thiscall std::basic_istringstream,class std::allocator >::~basic_istringstream,class std::allocator >(void)",
    "public: unsigned short __thiscall std::basic_streambuf >::sungetc(void)",
    "public: __thiscall std::collate::collate(class std::_Locinfo const &,unsigned int)",
    "public: static class std::locale::id std::num_put > >::id",
    "private: static class std::locale::_Locimp * __cdecl std::locale::_Init(void)",
    "public: class std::basic_stringbuf,class std::allocator > * __thiscall std::basic_ostringstream,class std::allocator >::rdbuf(void)const",
    "public: static bool __cdecl std::numeric_limits::infinity(void)",
    "const std::out_of_range::`vftable'",
    "class std::basic_ostream > & __cdecl std::flush(class std::basic_ostream > &)",
    "class std::complex __cdecl std::sinh(class std::complex const &)",
    "public: char const * __thiscall std::ctype::widen(char const *,char const *,char *)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(char const *,unsigned int)const",
    "const std::basic_ostringstream,class std::allocator >::`vftable'",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(unsigned short *,int)",
    "public: __thiscall std::num_put > >::num_put > >(class std::_Locinfo const &,unsigned int)",
    "public: void __thiscall std::time_get > >::`default constructor closure'(void)",
    "protected: virtual unsigned short __thiscall std::numpunct::do_thousands_sep(void)const",
    "public: char __thiscall std::basic_ios >::fill(void)const",
    "public: __thiscall std::domain_error::domain_error(class std::domain_error const &)",
    "public: static float __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(char const *,unsigned int)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(char const *)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_string,class std::allocator >::substr(unsigned int,unsigned int)const",
    "public: static int __cdecl std::char_traits::compare(char const *,char const *,unsigned int)",
    "private: static unsigned short const * __cdecl std::basic_string,class std::allocator >::_Psum(unsigned short const *,unsigned int)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,unsigned short const *)const",
    "bool __cdecl std::operator==(long double const &,class std::complex const &)",
    "public: void __thiscall std::basic_fstream >::open(char const *,short)",
    "public: __thiscall std::num_get > >::num_get > >(unsigned int)",
    "private: static unsigned int __cdecl std::basic_string,class std::allocator >::_Pdif(unsigned short const *,unsigned short const *)",
    "public: __thiscall std::messages_base::messages_base(unsigned int)",
    "public: __thiscall std::complex::complex(class std::complex const &)",
    "private: void __thiscall std::basic_string,class std::allocator >::_Copy(unsigned int)",
    "private: void __thiscall std::basic_string,class std::allocator >::_Tidy(bool)",
    "??$?6DU?$char_traits@D@std@@O@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$complex@O@0@@Z",
    "private: void __thiscall std::basic_string,class std::allocator >::_Split(void)",
    "??$sqrt@M@std@@YA?AV?$complex@M@0@ABV10@@Z",
    "_FExp",
    "??$?XMM@std@@YAAAV?$complex@M@0@AAV10@ABV10@@Z",
    "public: static void __cdecl std::char_traits::assign(unsigned short &,unsigned short const &)",
    "const std::runtime_error::`vftable'",
    "public: __thiscall std::basic_stringstream,class std::allocator >::basic_stringstream,class std::allocator >(int)",
    "??$real@M@std@@YAMABV?$complex@M@0@@Z",
    "private: static bool std::ios_base::_Sync",
    "public: static long __cdecl std::numeric_limits::signaling_NaN(void)",
    "??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::write(char const *,int)",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_year(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: void __thiscall std::basic_string,class std::allocator >::swap(class std::basic_string,class std::allocator > &)",
    "public: class std::_Locinfo & __thiscall std::_Locinfo::operator=(class std::_Locinfo const &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,void const *)const",
    "public: static signed char __cdecl std::numeric_limits::min(void)",
    "_Nan",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(unsigned short const *,unsigned int)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(class std::basic_streambuf > &,unsigned short)",
    "public: double __thiscall std::_Complex_base::imag(void)const",
    "class std::complex __cdecl std::polar(double const &,double const &)",
    "protected: virtual int __thiscall std::basic_filebuf >::pbackfail(int)",
    "private: static class std::locale::_Locimp * std::locale::_Locimp::_Clocptr",
    "??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z",
    "class std::complex __cdecl std::operator/(class std::complex const &,class std::complex const &)",
    "??$?KN@std@@YA?AV?$complex@N@0@ABV10@ABN@Z",
    "protected: unsigned short * __thiscall std::basic_streambuf >::_Gndec(void)",
    "public: __thiscall std::basic_filebuf >::basic_filebuf >(class std::basic_filebuf > const &)",
    "public: int __thiscall std::ios_base::precision(void)const",
    "const std::basic_ios >::`vftable'",
    "class std::basic_ostream > std::wcout",
    "bool __cdecl std::operator!=(class std::complex const &,double const &)",
    "public: class std::bad_exception & __thiscall std::bad_exception::operator=(class std::bad_exception const &)",
    "public: class std::basic_streambuf > * __thiscall std::basic_ios >::rdbuf(class std::basic_streambuf > *)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned int,unsigned int,class std::allocator const &)",
    "public: __thiscall std::underflow_error::underflow_error(class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::basic_ios >::basic_ios >(class std::basic_streambuf > *)",
    "protected: virtual char const * __thiscall std::ctype::do_toupper(char *,char const *)const",
    "??$?5DU?$char_traits@D@std@@N@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$complex@N@0@@Z",
    "public: class std::basic_string,class std::allocator > __thiscall std::messages::get(int,int,int,class std::basic_string,class std::allocator > const &)const",
    "public: unsigned short const * __thiscall std::basic_string,class std::allocator >::c_str(void)const",
    "protected: virtual class std::fpos __thiscall std::basic_streambuf >::seekoff(long,enum std::ios_base::seekdir,int)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(long &)",
    "??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@PAD@Z",
    "public: __thiscall std::basic_fstream >::basic_fstream >(char const *,int)",
    "protected: virtual void __thiscall std::overflow_error::_Doraise(void)const",
    "protected: __thiscall std::ios_base::ios_base(void)",
    "public: void __thiscall std::basic_iostream >::`vbase destructor'(void)",
    "struct std::_Smanip __cdecl std::resetiosflags(int)",
    "??$?HM@std@@YA?AV?$complex@M@0@ABV10@ABM@Z",
    "protected: virtual int __thiscall std::codecvt::do_out(int &,unsigned short const *,unsigned short const *,unsigned short const * &,char *,char *,char * &)const",
    "public: static unsigned char __cdecl std::numeric_limits::signaling_NaN(void)",
    "??$pow@M@std@@YA?AV?$complex@M@0@ABV10@0@Z",
    "public: void __thiscall std::ios_base::setstate(int,bool)",
    "public: class std::basic_filebuf > * __thiscall std::basic_filebuf >::open(char const *,short)",
    "public: class std::out_of_range & __thiscall std::out_of_range::operator=(class std::out_of_range const &)",
    "??$?6DU?$char_traits@D@std@@N@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$complex@N@0@@Z",
    "protected: virtual int __thiscall std::basic_streambuf >::uflow(void)",
    "class std::complex __cdecl std::exp(class std::complex const &)",
    "protected: void __thiscall std::basic_filebuf >::_Initcvt(void)",
    "protected: virtual int __thiscall std::basic_streambuf >::underflow(void)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned long &)const",
    "public: float __thiscall std::_Complex_base::imag(float const &)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,void * &)const",
    "public: int __thiscall std::basic_istream >::gcount(void)const",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,signed char &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::read(char *,int)",
    "public: class std::ostreambuf_iterator > __thiscall std::time_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,struct tm const *,char,char)const",
    "public: __thiscall std::basic_stringbuf,class std::allocator >::basic_stringbuf,class std::allocator >(int)",
    "class std::complex __cdecl std::polar(long double const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::ignore(int,int)",
    "protected: virtual int __thiscall std::codecvt::do_length(int &,unsigned short const *,unsigned short const *,unsigned int)const",
    "public: static int __cdecl std::numeric_limits::min(void)",
    "const std::basic_ofstream >::`vftable'",
    "public: int __thiscall std::codecvt::out(int &,unsigned short const *,unsigned short const *,unsigned short const * &,char *,char *,char * &)const",
    "_Tolower",
    "public: __thiscall std::logic_error::logic_error(class std::basic_string,class std::allocator > const &)",
    "??$log10@O@std@@YA?AV?$complex@O@0@ABV10@@Z",
    "??$sinh@N@std@@YA?AV?$complex@N@0@ABV10@@Z",
    "public: __thiscall std::basic_ofstream >::basic_ofstream >(void)",
    "class std::complex __cdecl std::sqrt(class std::complex const &)",
    "public: static double __cdecl std::_Ctr::log(double)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(class std::basic_streambuf > &)",
    "public: class std::locale::id & __thiscall std::locale::id::operator=(class std::locale::id const &)",
    "const std::ctype::`vftable'",
    "public: static double __cdecl std::_Ctr::sqrt(double)",
    "protected: virtual int __thiscall std::basic_streambuf >::xsputn(unsigned short const *,int)",
    "public: static unsigned int __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: static long __cdecl std::numeric_limits::max(void)",
    "??$?5GU?$char_traits@G@std@@M@std@@YAAAV?$basic_istream@GU?$char_traits@G@std@@@0@AAV10@AAV?$complex@M@0@@Z",
    "??$?OGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA_NPBGABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@@Z",
    "const std::underflow_error::`vftable'",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(char const *)",
    "public: void __thiscall std::bad_alloc::`default constructor closure'(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(unsigned long &)",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::uflow(void)",
    "double __cdecl std::real(class std::complex const &)",
    "??$?PDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,short *)",
    "protected: virtual int __thiscall std::codecvt::do_encoding(void)const",
    "??$?ZOO@std@@YAAAV?$complex@O@0@AAV10@ABV10@@Z",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(unsigned short)",
    "protected: virtual int __thiscall std::codecvt::do_in(int &,char const *,char const *,char const * &,unsigned short *,unsigned short *,unsigned short * &)const",
    "??$conj@M@std@@YA?AV?$complex@M@0@ABV10@@Z",
    "public: __thiscall std::collate::collate(unsigned int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(char const *,unsigned int,unsigned int)const",
    "public: void __thiscall std::basic_ofstream >::open(char const *,short)",
    "class std::basic_ostream > & __cdecl std::endl(class std::basic_ostream > &)",
    "??$polar@N@std@@YA?AV?$complex@N@0@ABN@Z",
    "public: static signed char __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: unsigned short const * __thiscall std::basic_string,class std::allocator >::end(void)const",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,bool)const",
    "public: class std::basic_stringstream,class std::allocator > & __thiscall std::basic_stringstream,class std::allocator >::operator=(class std::basic_stringstream,class std::allocator > const &)",
    "_Wcrtomb",
    "??$norm@N@std@@YANABV?$complex@N@0@@Z",
    "protected: static short const * __cdecl std::ctype::classic_table(void)",
    "public: static unsigned short __cdecl std::numeric_limits::denorm_min(void)",
    "protected: virtual int __thiscall std::basic_filebuf >::uflow(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(char,unsigned int)const",
    "public: static float __cdecl std::_Ctr::atan2(float,float)",
    "public: static int __cdecl std::numeric_limits::quiet_NaN(void)",
    "??$?XOO@std@@YAAAV?$complex@O@0@AAV10@ABV10@@Z",
    "public: static unsigned short __cdecl std::char_traits::to_char_type(unsigned short const &)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(short)",
    "protected: void __thiscall std::basic_streambuf >::_Init(char * *,char * *,int *,char * *,char * *,int *)",
    "public: __thiscall std::locale::locale(char const *,int)",
    "public: __thiscall std::ios_base::Init::~Init(void)",
    "class std::basic_ostream > & __cdecl std::ends(class std::basic_ostream > &)",
    "public: static float __cdecl std::_Ctr::pow(float,float)",
    "public: virtual __thiscall std::range_error::~range_error(void)",
    "public: static bool __cdecl std::numeric_limits::min(void)",
    "public: static char * __cdecl std::char_traits::move(char *,char const *,unsigned int)",
    "public: void __thiscall std::num_put > >::`default constructor closure'(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(unsigned short const *,unsigned int)const",
    "public: __thiscall std::complex::complex(float const &,float const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::seekg(long,enum std::ios_base::seekdir)",
    "public: __thiscall std::_Complex_base::_Complex_base(float const &,float const &)",
    "public: virtual __thiscall std::istrstream::~istrstream(void)",
    "??$?8GU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA_NABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@0@Z",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::money_put > >::do_put(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,long double)const",
    "public: class std::basic_filebuf > * __thiscall std::basic_filebuf >::open(char const *,int)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,class std::complex &)",
    "protected: virtual int __thiscall std::basic_filebuf >::sync(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::ios_base & (__cdecl*)(class std::ios_base &))",
    "public: void __thiscall std::basic_ifstream >::open(char const *,short)",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Locinfo::_Getname(void)const",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Rep(class std::ostreambuf_iterator >,char,unsigned int)",
    "??$?DM@std@@YA?AV?$complex@M@0@ABV10@ABM@Z",
    "??$?8N@std@@YA_NABNABV?$complex@N@0@@Z",
    "protected: void __thiscall std::basic_streambuf >::pbump(int)",
    "public: virtual __thiscall std::logic_error::~logic_error(void)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,char *)",
    "public: static long double __cdecl std::_Ctr::_Cosh(long double,long double)",
    "public: __thiscall std::basic_stringstream,class std::allocator >::basic_stringstream,class std::allocator >(class std::basic_stringstream,class std::allocator > const &)",
    "public: __thiscall std::complex::complex(long double const &,long double const &)",
    "??$?6GU?$char_traits@G@std@@@std@@YAAAV?$basic_ostream@GU?$char_traits@G@std@@@0@AAV10@PBG@Z",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,char const *)",
    "public: __thiscall std::basic_istringstream,class std::allocator >::basic_istringstream,class std::allocator >(class std::basic_string,class std::allocator > const &,int)",
    "public: static int __cdecl std::char_traits::to_int_type(char const &)",
    "??$?9GU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA_NPBGABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@@Z",
    "??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z",
    "public: virtual char const * __thiscall std::runtime_error::what(void)const",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,unsigned long)const",
    "protected: __thiscall std::locale::facet::facet(unsigned int)",
    "const std::time_get > >::`vftable'",
    "public: static unsigned short * __cdecl std::char_traits::move(unsigned short *,unsigned short const *,unsigned int)",
    "public: class std::underflow_error & __thiscall std::underflow_error::operator=(class std::underflow_error const &)",
    "public: static float __cdecl std::_Ctr::sqrt(float)",
    "public: static bool __cdecl std::char_traits::lt(char const &,char const &)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator-=(long double const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(unsigned short &)",
    "public: unsigned short __thiscall std::basic_istream >::peek(void)",
    "private: bool __thiscall std::basic_string,class std::allocator >::_Grow(unsigned int,bool)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(char const *)",
    "protected: char * __thiscall std::basic_streambuf >::gptr(void)const",
    "class std::complex __cdecl std::pow(class std::complex const &,float const &)",
    "public: class std::basic_streambuf > & __thiscall std::basic_streambuf >::operator=(class std::basic_streambuf > const &)",
    "public: char const & __thiscall std::basic_string,class std::allocator >::operator[](unsigned int)const",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Rep(class std::ostreambuf_iterator >,unsigned short,unsigned int)",
    "class std::complex __cdecl std::pow(float const &,class std::complex const &)",
    "??$?9M@std@@YA_NABV?$complex@M@0@ABM@Z",
    "public: bool __thiscall std::ctype::is(short,unsigned short)const",
    "public: class std::reverse_iterator __thiscall std::basic_string,class std::allocator >::rend(void)",
    "public: int __thiscall std::basic_istream >::readsome(unsigned short *,int)",
    "const std::time_base::`vftable'",
    "??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@C@Z",
    "protected: virtual class std::fpos __thiscall std::strstreambuf::seekpos(class std::fpos,int)",
    "_FCosh",
    "public: class std::basic_filebuf > & __thiscall std::basic_filebuf >::operator=(class std::basic_filebuf > const &)",
    "protected: virtual int __thiscall std::basic_streambuf >::xsgetn(unsigned short *,int)",
    "public: long double __thiscall std::_Complex_base::real(void)const",
    "towctrans",
    "bool __cdecl std::operator!=(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "_FNan",
    "public: char * __thiscall std::basic_string,class std::allocator >::end(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,unsigned int,unsigned short)",
    "public: void __thiscall std::basic_ostream >::`vbase destructor'(void)",
    "??$_Fabs@M@std@@YAMABV?$complex@M@0@PAH@Z",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::putback(unsigned short)",
    "??$real@O@std@@YAOABV?$complex@O@0@@Z",
    "protected: virtual int __thiscall std::strstreambuf::pbackfail(int)",
    "public: static unsigned int __cdecl std::numeric_limits::infinity(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(unsigned short const *,unsigned int)const",
    "public: __thiscall std::basic_iostream >::basic_iostream >(class std::basic_streambuf > *)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(short &)",
    "public: static class std::locale __cdecl std::locale::global(class std::locale const &)",
    "protected: virtual void __thiscall std::bad_exception::_Doraise(void)const",
    "public: class std::complex & __thiscall std::complex::operator=(long double const &)",
    "public: static signed char __cdecl std::numeric_limits::max(void)",
    "const std::basic_iostream >::`vftable'",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,char const *)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,class std::basic_string,class std::allocator > const &)",
    "public: static unsigned int __cdecl std::numeric_limits::max(void)",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_date(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,signed char)",
    "public: static double __cdecl std::numeric_limits::epsilon(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(char,unsigned int)const",
    "public: __thiscall std::_Locinfo::_Locinfo(int,char const *)",
    "public: void __thiscall std::basic_fstream >::`vbase destructor'(void)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator=(class std::_Complex_base const &)",
    "struct std::_Smanip __cdecl std::setprecision(int)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(class std::allocator const &)",
    "??$?9GU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA_NABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@0@Z",
    "public: bool __thiscall std::basic_ofstream >::is_open(void)const",
    "const std::num_get > >::`vftable'",
    "public: __thiscall std::bad_alloc::bad_alloc(char const *)",
    "??$?5GU?$char_traits@G@std@@@std@@YAAAV?$basic_istream@GU?$char_traits@G@std@@@0@AAV10@PAF@Z",
    "public: static unsigned char __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: __thiscall std::basic_iostream >::basic_iostream >(class std::basic_iostream > const &)",
    "??$?GO@std@@YA?AV?$complex@O@0@ABV10@0@Z",
    "_LDscale",
    "??$?GM@std@@YA?AV?$complex@M@0@ABV10@@Z",
    "public: static signed char __cdecl std::numeric_limits::infinity(void)",
    "float __cdecl std::norm(class std::complex const &)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::_Pninc(void)",
    "public: char __thiscall std::_Mpunct::decimal_point(void)const",
    "long double __cdecl std::arg(class std::complex const &)",
    "??$pow@M@std@@YA?AV?$complex@M@0@ABMABV10@@Z",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,void * &)const",
    "public: __thiscall std::_Lockit::_Lockit(void)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::put(char)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)",
    "const std::basic_stringbuf,class std::allocator >::`vftable'",
    "protected: __thiscall std::basic_ios >::basic_ios >(void)",
    "public: __thiscall std::locale::id::operator unsigned int(void)",
    "??$?MGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA_NABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@0@Z",
    "public: void __thiscall std::locale::facet::_Incref(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(unsigned short const *,unsigned int,unsigned int)const",
    "??$?KO@std@@YA?AV?$complex@O@0@ABOABV10@@Z",
    "??$norm@O@std@@YAOABV?$complex@O@0@@Z",
    "public: class std::basic_string,class std::allocator > __thiscall std::numpunct::falsename(void)const",
    "long double __cdecl std::_Fabs(class std::complex const &,int *)",
    "public: void __thiscall std::basic_ios >::setstate(int,bool)",
    "public: __thiscall std::time_get > >::time_get > >(unsigned int)",
    "const std::__non_rtti_object::`vftable'",
    "const std::basic_fstream >::`vbtable'{for `std::basic_ostream >'}",
    "public: static long __cdecl std::numeric_limits::min(void)",
    "protected: virtual int __thiscall std::basic_stringbuf,class std::allocator >::underflow(void)",
    "public: static unsigned int __cdecl std::time_get > >::_Getcat(void)",
    "public: bool __thiscall std::locale::_Iscloc(void)const",
    "public: static unsigned short __cdecl std::numeric_limits::signaling_NaN(void)",
    "class std::complex & __cdecl std::operator*=(class std::complex &,class std::complex const &)",
    "_Snan",
    "float __cdecl std::_Fabs(class std::complex const &,int *)",
    "public: unsigned short __thiscall std::basic_streambuf >::sbumpc(void)",
    "public: char __thiscall std::ctype::widen(char)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(long double)",
    "??$?5DU?$char_traits@D@std@@M@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$complex@M@0@@Z",
    "_FSinh",
    "??$?5GU?$char_traits@G@std@@N@std@@YAAAV?$basic_istream@GU?$char_traits@G@std@@@0@AAV10@AAV?$complex@N@0@@Z",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekoff(long,short,short)",
    "??$pow@O@std@@YA?AV?$complex@O@0@ABV10@H@Z",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,float &)const",
    "bool __cdecl std::operator!=(char const *,class std::basic_string,class std::allocator > const &)",
    "??$imag@N@std@@YANABV?$complex@N@0@@Z",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::overflow(unsigned short)",
    "class std::complex __cdecl std::operator+(class std::complex const &,double const &)",
    "wcsrtombs",
    "protected: virtual class std::fpos __thiscall std::strstreambuf::seekoff(long,enum std::ios_base::seekdir,int)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(char const *,unsigned int,class std::allocator const &)",
    "public: static float __cdecl std::_Ctr::_Sinh(float,float)",
    "bool __cdecl std::operator<(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(char const *,unsigned int,unsigned int)const",
    "private: static void __cdecl std::locale::_Tidy(void)",
    "protected: virtual unsigned short __thiscall std::_Mpunct::do_decimal_point(void)const",
    "public: class std::basic_ios > & __thiscall std::basic_ios >::copyfmt(class std::basic_ios > const &)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::eback(void)const",
    "_Strxfrm",
    "public: static float __cdecl std::numeric_limits::round_error(void)",
    "??$getline@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@YAAAV?$basic_istream@GU?$char_traits@G@std@@@0@AAV10@AAV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@G@Z",
    "public: class std::ostreambuf_iterator > __thiscall std::money_put > >::put(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,class std::basic_string,class std::allocator > const &)const",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)const",
    "??$?DN@std@@YA?AV?$complex@N@0@ABV10@ABN@Z",
    "public: class std::locale __thiscall std::ios_base::imbue(class std::locale const &)",
    "const std::codecvt::`vftable'",
    "protected: virtual int __thiscall std::collate::do_compare(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)const",
    "public: static unsigned long __cdecl std::numeric_limits::round_error(void)",
    "public: long __thiscall std::collate::hash(char const *,char const *)const",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,long)const",
    "public: bool __thiscall std::basic_fstream >::is_open(void)const",
    "??$?HN@std@@YA?AV?$complex@N@0@ABV10@@Z",
    "public: static bool __cdecl std::numeric_limits::max(void)",
    "public: __thiscall std::basic_filebuf >::basic_filebuf >(struct _iobuf *)",
    "public: __thiscall std::time_base::time_base(unsigned int)",
    "??$?5GU?$char_traits@G@std@@V?$allocator@G@1@@std@@YAAAV?$basic_istream@GU?$char_traits@G@std@@@0@AAV10@AAV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@@Z",
    "_LNan",
    "??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z",
    "public: __thiscall std::locale::locale(class std::locale const &,char const *,int)",
    "public: int __thiscall std::time_get > >::date_order(void)const",
    "??$?5GU?$char_traits@G@std@@@std@@YAAAV?$basic_istream@GU?$char_traits@G@std@@@0@AAV10@PAG@Z",
    "unsigned short const `private: static unsigned short const * __cdecl std::basic_string,class std::allocator >::_Nullstr(void)'::`2'::_C",
    "public: static void __cdecl std::char_traits::assign(char &,char const &)",
    "class std::complex & __cdecl std::operator-=(class std::complex &,class std::complex const &)",
    "?_R2@?BN@???$_Fabs@M@std@@YAMABV?$complex@M@1@PAH@Z@4MB",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(long double &)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::_Mpunct::do_positive_sign(void)const",
    "??$?GO@std@@YA?AV?$complex@O@0@ABV10@@Z",
    "public: static long __cdecl std::numeric_limits::epsilon(void)",
    "float __cdecl std::real(class std::complex const &)",
    "public: static char __cdecl std::char_traits::to_char_type(int const &)",
    "public: class std::locale & __thiscall std::locale::_Addfac(class std::locale::facet *,unsigned int,unsigned int)",
    "public: static long double __cdecl std::numeric_limits::signaling_NaN(void)",
    "long double __cdecl std::imag(class std::complex const &)",
    "public: long __thiscall std::collate::hash(unsigned short const *,unsigned short const *)const",
    "public: static short __cdecl std::numeric_limits::denorm_min(void)",
    "public: __thiscall std::_Winit::_Winit(void)",
    "public: virtual __thiscall std::__non_rtti_object::~__non_rtti_object(void)",
    "??$?HN@std@@YA?AV?$complex@N@0@ABNABV10@@Z",
    "public: __thiscall std::bad_exception::bad_exception(char const *)",
    "??$?DO@std@@YA?AV?$complex@O@0@ABOABV10@@Z",
    "protected: virtual class std::fpos __thiscall std::basic_streambuf >::seekpos(class std::fpos,int)",
    "protected: void __thiscall std::num_put > >::_Init(class std::_Locinfo const &)",
    "const std::basic_ostringstream,class std::allocator >::`vbtable'",
    "protected: virtual char __thiscall std::numpunct::do_decimal_point(void)const",
    "const std::basic_fstream >::`vbtable'{for `std::basic_istream >'}",
    "public: static bool __cdecl std::char_traits::eq_int_type(unsigned short const &,unsigned short const &)",
    "public: __thiscall std::bad_typeid::bad_typeid(class std::bad_typeid const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::unget(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(unsigned short const *)",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekpos(class std::fpos,short)",
    "__int64 const std::_Fpz",
    "class std::complex __cdecl std::operator/(class std::complex const &,float const &)",
    "public: __thiscall std::range_error::range_error(class std::range_error const &)",
    "public: unsigned short __thiscall std::basic_ios >::fill(unsigned short)",
    "protected: virtual int __thiscall std::basic_filebuf >::underflow(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(unsigned short const *,unsigned int)const",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,unsigned long)const",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned short const *,unsigned int,class std::allocator const &)",
    "public: struct std::money_base::pattern __thiscall std::_Mpunct::neg_format(void)const",
    "public: __thiscall std::ostrstream::ostrstream(char *,int,int)",
    "public: class std::locale::facet * __thiscall std::locale::facet::_Decref(void)",
    "protected: void __thiscall std::basic_ios >::init(class std::basic_streambuf > *,bool)",
    "??$?HN@std@@YA?AV?$complex@N@0@ABV10@ABN@Z",
    "bool __cdecl std::operator==(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::pbackfail(unsigned short)",
    "const std::basic_iostream >::`vbtable'{for `std::basic_ostream >'}",
    "public: __thiscall std::basic_fstream >::basic_fstream >(void)",
    "public: static class std::locale::id std::numpunct::id",
    "public: void __thiscall std::ios_base::clear(int,bool)",
    "??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z",
    "public: __thiscall std::ios_base::Init::Init(void)",
    "const std::basic_filebuf >::`vftable'",
    "public: int __thiscall std::ios_base::flags(int)",
    "bool __cdecl std::operator!=(class std::complex const &,float const &)",
    "public: class std::basic_string,class std::allocator > __thiscall std::numpunct::truename(void)const",
    "public: static double __cdecl std::_Ctr::pow(double,double)",
    "public: void __thiscall std::basic_stringbuf,class std::allocator >::`default constructor closure'(void)",
    "_Eps",
    "public: void __thiscall std::ios_base::exceptions(short)",
    "class std::basic_ostream > std::wclog",
    "class std::complex __cdecl std::pow(class std::complex const &,int)",
    "public: virtual __thiscall std::moneypunct::~moneypunct(void)",
    "public: float __thiscall std::_Complex_base::real(void)const",
    "const std::basic_ostream >::`vbtable'",
    "public: static unsigned int __cdecl std::num_get > >::_Getcat(void)",
    "public: void __thiscall std::messages::`default constructor closure'(void)",
    "long double __cdecl std::abs(class std::complex const &)",
    "private: void __thiscall std::ios_base::_Tidy(void)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator*=(long double const &)",
    "public: long double __thiscall std::_Complex_base::imag(long double const &)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::messages::do_get(int,int,int,class std::basic_string,class std::allocator > const &)const",
    "public: char __thiscall std::_Mpunct::thousands_sep(void)const",
    "protected: virtual unsigned short __thiscall std::basic_stringbuf,class std::allocator >::pbackfail(unsigned short)",
    "??$?9N@std@@YA_NABV?$complex@N@0@0@Z",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(char const *,unsigned int)const",
    "class std::complex __cdecl std::operator/(float const &,class std::complex const &)",
    "public: unsigned short __thiscall std::_Mpunct::decimal_point(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,unsigned short const *)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,bool)const",
    "_LXbig",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::collate::do_transform(unsigned short const *,unsigned short const *)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,unsigned int,unsigned short)",
    "public: static class std::locale::id std::time_put > >::id",
    "public: __thiscall std::ctype::ctype(short const *,bool,unsigned int)",
    "public: static short __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: static long double __cdecl std::numeric_limits::epsilon(void)",
    "public: class std::fpos __thiscall std::basic_ostream >::tellp(void)",
    "??$polar@O@std@@YA?AV?$complex@O@0@ABO0@Z",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,class std::basic_string,class std::allocator > const &)const",
    "??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@PAC@Z",
    "public: __thiscall std::basic_ifstream >::basic_ifstream >(char const *,int)",
    "private: static int __cdecl std::num_get > >::_Getffld(char *,class std::istreambuf_iterator > &,class std::istreambuf_iterator > &,class std::locale const &)",
    "??$?DO@std@@YA?AV?$complex@O@0@ABV10@0@Z",
    "public: bool __thiscall std::locale::operator()(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)const",
    "public: unsigned short __thiscall std::ctype::toupper(unsigned short)const",
    "protected: void __thiscall std::time_get > >::_Init(class std::_Locinfo const &)",
    "??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z",
    "const std::num_put > >::`vftable'",
    "public: double __thiscall std::_Complex_base::real(void)const",
    "public: float __thiscall std::_Complex_base::real(float const &)",
    "_LInf",
    "public: class std::domain_error & __thiscall std::domain_error::operator=(class std::domain_error const &)",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::erase(unsigned short *,unsigned short *)",
    "bool __cdecl std::operator!=(long double const &,class std::complex const &)",
    "public: virtual __thiscall std::runtime_error::~runtime_error(void)",
    "public: void __thiscall std::ios_base::register_callback(void (__cdecl*)(enum std::ios_base::event,class std::ios_base &,int),int)",
    "??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBC@Z",
    "??$polar@O@std@@YA?AV?$complex@O@0@ABO@Z",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(class std::basic_string,class std::allocator > const &)const",
    "??$?ODU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z",
    "protected: virtual bool __thiscall std::codecvt::do_always_noconv(void)const",
    "??$?8M@std@@YA_NABV?$complex@M@0@ABM@Z",
    "protected: virtual unsigned short __thiscall std::basic_filebuf >::pbackfail(unsigned short)",
    "??$?HM@std@@YA?AV?$complex@M@0@ABV10@@Z",
    "public: class std::basic_iostream > & __thiscall std::basic_iostream >::operator=(class std::basic_iostream > const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned short const *,unsigned int)",
    "public: __thiscall std::_Timevec::_Timevec(class std::_Timevec const &)",
    "bool __cdecl std::operator!=(class std::complex const &,class std::complex const &)",
    "double __cdecl std::norm(class std::complex const &)",
    "??$?PGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA_NABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@0@Z",
    "??$pow@N@std@@YA?AV?$complex@N@0@ABV10@ABN@Z",
    "class std::complex __cdecl std::polar(float const &,float const &)",
    "public: virtual __thiscall std::basic_iostream >::~basic_iostream >(void)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned int,unsigned short,class std::allocator const &)",
    "public: virtual __thiscall std::basic_fstream >::~basic_fstream >(void)",
    "long double __cdecl std::norm(class std::complex const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(char *,int)",
    "public: static unsigned int __cdecl std::ctype::_Getcat(void)",
    "public: void __thiscall std::basic_istringstream,class std::allocator >::str(class std::basic_string,class std::allocator > const &)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned long &)const",
    "??$sin@O@std@@YA?AV?$complex@O@0@ABV10@@Z",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned short const *)",
    "bool __cdecl std::operator<=(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(unsigned short,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::strstream::strstream(char *,int,int)",
    "public: char const * __thiscall std::ctype::scan_is(short,char const *,char const *)const",
    "public: class std::basic_ifstream > & __thiscall std::basic_ifstream >::operator=(class std::basic_ifstream > const &)",
    "protected: virtual unsigned short __thiscall std::basic_stringbuf,class std::allocator >::overflow(unsigned short)",
    "public: static unsigned int const std::basic_string,class std::allocator >::npos",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Mpunct::positive_sign(void)const",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,class std::basic_string,class std::allocator > &)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(unsigned int)",
    "public: void __thiscall std::basic_stringstream,class std::allocator >::`vbase destructor'(void)",
    "public: static class std::locale __cdecl std::locale::empty(void)",
    "public: static char __cdecl std::numeric_limits::round_error(void)",
    "protected: virtual void __thiscall std::bad_typeid::_Doraise(void)const",
    "_FXbig",
    "private: static int std::_Winit::_Init_cnt",
    "public: virtual __thiscall std::domain_error::~domain_error(void)",
    "??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z",
    "public: __thiscall std::locale::locale(class std::locale const &,class std::locale const &,int)",
    "??$?NGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA_NABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@PBG@Z",
    "public: static char const * __cdecl std::char_traits::find(char const *,unsigned int,char const &)",
    "public: __thiscall std::length_error::length_error(class std::length_error const &)",
    "public: bool __thiscall std::basic_string,class std::allocator >::empty(void)const",
    "public: char __thiscall std::ctype::tolower(char)const",
    "??$?8M@std@@YA_NABV?$complex@M@0@0@Z",
    "??$sinh@M@std@@YA?AV?$complex@M@0@ABV10@@Z",
    "protected: unsigned short * __thiscall std::basic_streambuf >::gptr(void)const",
    "bool __cdecl std::operator==(class std::basic_string,class std::allocator > const &,char const *)",
    "public: class std::ios_base & __thiscall std::ios_base::copyfmt(class std::ios_base const &)",
    "bool __cdecl std::operator==(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "const std::basic_stringstream,class std::allocator >::`vbtable'{for `std::basic_ostream >'}",
    "??$pow@N@std@@YA?AV?$complex@N@0@ABNABV10@@Z",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,long &)const",
    "public: virtual __thiscall std::ostrstream::~ostrstream(void)",
    "public: static long double __cdecl std::numeric_limits::quiet_NaN(void)",
    "??$?KO@std@@YA?AV?$complex@O@0@ABV10@0@Z",
    "public: int __thiscall std::ios_base::rdstate(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,char const *,char const *)",
    "??$?HM@std@@YA?AV?$complex@M@0@ABMABV10@@Z",
    "public: __thiscall std::ctype_base::ctype_base(unsigned int)",
    "public: class std::_Ctr & __thiscall std::_Ctr::operator=(class std::_Ctr const &)",
    "??$?5DU?$char_traits@D@std@@O@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$complex@O@0@@Z",
    "_Dtest",
    "public: static class std::locale::id std::time_get > >::id",
    "public: virtual __thiscall std::ctype_base::~ctype_base(void)",
    "public: virtual __thiscall std::basic_istream >::~basic_istream >(void)",
    "public: char __thiscall std::numpunct::thousands_sep(void)const",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_scan_is(short,unsigned short const *,unsigned short const *)const",
    "??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@PAE@Z",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned int,unsigned short)",
    "public: static int __cdecl std::numeric_limits::denorm_min(void)",
    "??$?OGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA_NABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@0@Z",
    "??$pow@N@std@@YA?AV?$complex@N@0@ABV10@H@Z",
    "bool __cdecl std::operator==(class std::complex const &,double const &)",
    "protected: virtual int __thiscall std::codecvt::do_length(int &,char const *,char const *,unsigned int)const",
    "public: void __thiscall std::moneypunct::`default constructor closure'(void)",
    "const std::moneypunct::`vftable'",
    "public: __thiscall std::ios_base::operator void *(void)const",
    "public: int __thiscall std::basic_streambuf >::sbumpc(void)",
    "class std::complex __cdecl std::operator+(class std::complex const &,class std::complex const &)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(char const *,class std::allocator const &)",
    "public: int __thiscall std::basic_streambuf >::sputc(char)",
    "private: static unsigned short * __cdecl std::basic_string,class std::allocator >::_Psum(unsigned short *,unsigned int)",
    "public: class std::numeric_limits & __thiscall std::numeric_limits::operator=(class std::numeric_limits const &)",
    "public: __thiscall std::basic_ostream >::basic_ostream >(enum std::_Uninitialized)",
    "bool __cdecl std::operator==(double const &,class std::complex const &)",
    "public: static long double __cdecl std::_Ctr::cos(long double)",
    "public: static unsigned long __cdecl std::numeric_limits::quiet_NaN(void)",
    "protected: virtual unsigned short __thiscall std::basic_filebuf >::underflow(void)",
    "??$?_0OO@std@@YAAAV?$complex@O@0@AAV10@ABV10@@Z",
    "protected: void __thiscall std::collate::_Init(class std::_Locinfo const &)",
    "public: static double __cdecl std::numeric_limits::round_error(void)",
    "public: void __thiscall std::basic_ifstream >::`vbase destructor'(void)",
    "bool __cdecl std::operator==(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,char)",
    "public: static bool __cdecl std::_Ctr::_Isinf(long double)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(char const *,char const *,class std::allocator const &)",
    "??$?6DU?$char_traits@D@std@@M@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$complex@M@0@@Z",
    "private: unsigned char & __thiscall std::basic_string,class std::allocator >::_Refcnt(char const *)",
    "public: static unsigned int __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(void const *)",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_filebuf >::setbuf(char *,int)",
    "private: static unsigned int __cdecl std::basic_string,class std::allocator >::_Pdif(char const *,char const *)",
    "public: __thiscall std::out_of_range::out_of_range(class std::out_of_range const &)",
    "public: int __thiscall std::ios_base::precision(int)",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::erase(unsigned short *)",
    "public: __thiscall std::locale::locale(class std::locale const &)",
    "_Hugeval",
    "protected: void __thiscall std::strstreambuf::_Init(int,char *,char *,int)",
    "_Getcoll",
    "public: static double __cdecl std::_Ctr::_Infv(double)",
    "public: static double __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::seekp(class std::fpos)",
    "public: void __thiscall std::basic_stringstream,class std::allocator >::`default constructor closure'(void)",
    "long double __cdecl std::real(class std::complex const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned short const *)",
    "_Dnorm",
    "public: class std::basic_filebuf > * __thiscall std::basic_filebuf >::close(void)",
    "public: static unsigned int __cdecl std::money_put > >::_Getcat(void)",
    "public: __thiscall std::locale::~locale(void)",
    "public: unsigned short & __thiscall std::basic_string,class std::allocator >::at(unsigned int)",
    "public: virtual __thiscall std::messages_base::~messages_base(void)",
    "const std::basic_stringstream,class std::allocator >::`vbtable'{for `std::basic_istream >'}",
    "class std::complex __cdecl std::pow(class std::complex const &,class std::complex const &)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,long double)const",
    "class std::basic_ostream > std::wcerr",
    "const std::bad_exception::`vftable'",
    "public: unsigned short const * __thiscall std::ctype::scan_not(short,unsigned short const *,unsigned short const *)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(char const *,unsigned int,unsigned int)const",
    "public: static bool __cdecl std::_Ctr::_Isnan(float)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,unsigned short)",
    "public: class std::basic_stringbuf,class std::allocator > * __thiscall std::basic_istringstream,class std::allocator >::rdbuf(void)const",
    "protected: virtual unsigned short __thiscall std::basic_stringbuf,class std::allocator >::underflow(void)",
    "public: static int __cdecl std::numeric_limits::max(void)",
    "protected: char * __thiscall std::basic_streambuf >::_Gndec(void)",
    "public: class std::bad_alloc & __thiscall std::bad_alloc::operator=(class std::bad_alloc const &)",
    "protected: void __thiscall std::basic_stringbuf,class std::allocator >::_Tidy(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::capacity(void)const",
    "??$?GN@std@@YA?AV?$complex@N@0@ABV10@ABN@Z",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,unsigned short const *,unsigned int)",
    "_LDtest",
    "_FDenorm",
    "private: class std::ostreambuf_iterator > __thiscall std::money_put > >::_Putmfld(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,bool,class std::basic_string,class std::allocator >)const",
    "public: static signed char __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: int __thiscall std::codecvt::out(int &,char const *,char const *,char const * &,char *,char *,char * &)const",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,long double &)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(unsigned long)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,double)const",
    "public: class std::complex & __thiscall std::complex::operator=(double const &)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(char,class std::basic_string,class std::allocator > const &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,bool)const",
    "public: static float __cdecl std::numeric_limits::min(void)",
    "protected: void __thiscall std::ios_base::_Addstd(void)",
    "public: void __thiscall std::codecvt_base::`default constructor closure'(void)",
    "public: char & __thiscall std::basic_string,class std::allocator >::at(unsigned int)",
    "public: static int __cdecl std::char_traits::eof(void)",
    "public: void * __thiscall std::_Timevec::_Getptr(void)const",
    "??$cosh@O@std@@YA?AV?$complex@O@0@ABV10@@Z",
    "public: virtual __thiscall std::num_get > >::~num_get > >(void)",
    "public: char const * __thiscall std::_Locinfo::_Getdays(void)const",
    "protected: char * __thiscall std::basic_streambuf >::pbase(void)const",
    "??$pow@O@std@@YA?AV?$complex@O@0@ABV10@ABO@Z",
    "public: class std::locale __thiscall std::basic_streambuf >::getloc(void)",
    "public: __thiscall std::_Mpunct::_Mpunct(unsigned int,bool)",
    "public: class std::reverse_iterator __thiscall std::basic_string,class std::allocator >::rend(void)const",
    "??$abs@O@std@@YAOABV?$complex@O@0@@Z",
    "public: virtual __thiscall std::time_put > >::~time_put > >(void)",
    "protected: virtual int __thiscall std::strstreambuf::overflow(int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned int,unsigned short)",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_monthname(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "private: static class std::ostreambuf_iterator > __cdecl std::money_put > >::_Put(class std::ostreambuf_iterator >,unsigned short const *,unsigned int)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::put(unsigned short)",
    "public: static unsigned long __cdecl std::numeric_limits::epsilon(void)",
    "class std::complex __cdecl std::operator-(class std::complex const &)",
    "protected: void __thiscall std::numpunct::_Init(class std::_Locinfo const &)",
    "??$?PGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA_NABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@PBG@Z",
    "public: void __thiscall std::basic_ostringstream,class std::allocator >::`default constructor closure'(void)",
    "class std::basic_istream > & __cdecl std::ws(class std::basic_istream > &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(char const *,unsigned int,unsigned int)const",
    "public: void __thiscall std::basic_string,class std::allocator >::insert(char *,unsigned int,char)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::basic_ios > & (__cdecl*)(class std::basic_ios > &))",
    "const std::basic_ofstream >::`vbtable'",
    "const std::logic_error::`vftable'",
    "public: class std::complex & __thiscall std::complex::operator=(float const &)",
    "public: int __thiscall std::basic_streambuf >::pubsync(void)",
    "public: static double __cdecl std::numeric_limits::max(void)",
    "public: __thiscall std::locale::locale(enum std::_Uninitialized)",
    "bool __cdecl std::operator!=(class std::basic_string,class std::allocator > const &,char const *)",
    "public: class std::ostreambuf_iterator > __thiscall std::money_put > >::put(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,long double)const",
    "public: __thiscall std::basic_ostringstream,class std::allocator >::basic_ostringstream,class std::allocator >(int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned int,char)",
    "public: void __thiscall std::basic_string,class std::allocator >::resize(unsigned int,char)",
    "mbrlen",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::insert(unsigned short *,unsigned short)",
    "public: bool __thiscall std::basic_ostream >::opfx(void)",
    "public: double __thiscall std::_Complex_base::real(double const &)",
    "public: int __thiscall std::codecvt::in(int &,char const *,char const *,char const * &,char *,char *,char * &)const",
    "??$?GM@std@@YA?AV?$complex@M@0@ABV10@ABM@Z",
    "public: bool __thiscall std::ios_base::fail(void)const",
    "??$abs@M@std@@YAMABV?$complex@M@0@@Z",
    "public: bool __thiscall std::ios_base::bad(void)const",
    "??$?KM@std@@YA?AV?$complex@M@0@ABMABV10@@Z",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(unsigned short,unsigned int)const",
    "protected: virtual char __thiscall std::ctype::do_narrow(unsigned short,char)const",
    "public: static bool __cdecl std::char_traits::eq(unsigned short const &,unsigned short const &)",
    "??$pow@O@std@@YA?AV?$complex@O@0@ABOABV10@@Z",
    "protected: virtual long __thiscall std::collate::do_hash(unsigned short const *,unsigned short const *)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(void * &)",
    "public: unsigned short __thiscall std::basic_istream >::get(void)",
    "public: int __thiscall std::codecvt_base::max_length(void)const",
    "class std::complex __cdecl std::operator*(class std::complex const &,float const &)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,class std::basic_string,class std::allocator > const &)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,char const *,unsigned int)const",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_filebuf >::setbuf(unsigned short *,int)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(double)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::time_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,struct tm const *,char,char)const",
    "public: static char __cdecl std::numeric_limits::max(void)",
    "protected: virtual int __thiscall std::basic_streambuf >::overflow(int)",
    "public: static float __cdecl std::_Ctr::_Infv(float)",
    "public: static unsigned short __cdecl std::numeric_limits::infinity(void)",
    "_FInf",
    "protected: virtual char __thiscall std::ctype::do_toupper(char)const",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,unsigned short *)",
    "??$pow@M@std@@YA?AV?$complex@M@0@ABV10@ABM@Z",
    "public: int __thiscall std::basic_istream >::get(void)",
    "public: __thiscall std::basic_ifstream >::basic_ifstream >(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(unsigned short &)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,bool &)const",
    "const std::_Mpunct::`vftable'",
    "??$?HO@std@@YA?AV?$complex@O@0@ABV10@@Z",
    "public: class std::istreambuf_iterator > __thiscall std::money_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,bool,class std::ios_base &,int &,class std::basic_string,class std::allocator > &)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_istringstream,class std::allocator >::str(void)const",
    "_Stold",
    "public: __thiscall std::basic_ostringstream,class std::allocator >::basic_ostringstream,class std::allocator >(class std::basic_ostringstream,class std::allocator > const &)",
    "??$cosh@M@std@@YA?AV?$complex@M@0@ABV10@@Z",
    "private: void __thiscall std::ios_base::_Callfns(enum std::ios_base::event)",
    "_FDnorm",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,long)const",
    "public: static short __cdecl std::numeric_limits::signaling_NaN(void)",
    "float __cdecl std::abs(class std::complex const &)",
    "public: static signed char __cdecl std::numeric_limits::denorm_min(void)",
    "public: void __thiscall std::basic_string,class std::allocator >::resize(unsigned int,unsigned short)",
    "public: __thiscall std::money_put > >::money_put > >(unsigned int)",
    "??$?HGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA?AV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@PBGABV10@@Z",
    "public: static bool __cdecl std::_Ctr::_Isnan(double)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Fput(class std::ostreambuf_iterator >,class std::ios_base &,char,char const *,unsigned int,unsigned int)",
    "public: virtual __thiscall std::ctype::~ctype(void)",
    "??$?HN@std@@YA?AV?$complex@N@0@ABV10@0@Z",
    "public: int __thiscall std::basic_streambuf >::sungetc(void)",
    "public: unsigned short const * __thiscall std::basic_string,class std::allocator >::data(void)const",
    "public: class std::ios_base & __thiscall std::ios_base::operator=(class std::ios_base const &)",
    "public: static unsigned int __cdecl std::numeric_limits::denorm_min(void)",
    "class std::complex __cdecl std::operator*(double const &,class std::complex const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,char const *)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(unsigned short const *,unsigned int,unsigned int)const",
    "_LExp",
    "public: virtual __thiscall std::_Mpunct::~_Mpunct(void)",
    "public: void __thiscall std::bad_typeid::`default constructor closure'(void)",
    "public: unsigned short __thiscall std::_Mpunct::thousands_sep(void)const",
    "bool __cdecl std::operator!=(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: virtual __thiscall std::basic_ostringstream,class std::allocator >::~basic_ostringstream,class std::allocator >(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(unsigned short,unsigned int)const",
    "public: virtual __thiscall std::bad_typeid::~bad_typeid(void)",
    "??$polar@N@std@@YA?AV?$complex@N@0@ABN0@Z",
    "public: static class std::locale::id std::messages::id",
    "public: __thiscall std::range_error::range_error(class std::basic_string,class std::allocator > const &)",
    "private: static char const * __cdecl std::basic_string,class std::allocator >::_Nullstr(void)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,long)const",
    "public: struct lconv const * __thiscall std::_Locinfo::_Getlconv(void)const",
    "public: virtual __thiscall std::out_of_range::~out_of_range(void)",
    "public: static float __cdecl std::_Ctr::ldexp(float,int)",
    "??$?9N@std@@YA_NABNABV?$complex@N@0@@Z",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,class std::basic_string,class std::allocator > const &)",
    "public: unsigned short __thiscall std::basic_streambuf >::sputbackc(unsigned short)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,unsigned short const *,unsigned int)",
    "public: int __thiscall std::ios_base::width(void)const",
    "public: __thiscall std::bad_cast::bad_cast(class std::bad_cast const &)",
    "??$?6GU?$char_traits@G@std@@@std@@YAAAV?$basic_ostream@GU?$char_traits@G@std@@@0@AAV10@G@Z",
    "public: class std::logic_error & __thiscall std::logic_error::operator=(class std::logic_error const &)",
    "public: void __thiscall std::strstreambuf::freeze(bool)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_weekday(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: int __thiscall std::basic_streambuf >::sputn(char const *,int)",
    "public: void __thiscall std::basic_istream >::`vbase destructor'(void)",
    "public: unsigned short __thiscall std::numpunct::decimal_point(void)const",
    "public: __thiscall std::money_base::money_base(unsigned int)",
    "??$?HO@std@@YA?AV?$complex@O@0@ABOABV10@@Z",
    "protected: virtual struct std::money_base::pattern __thiscall std::_Mpunct::do_pos_format(void)const",
    "protected: virtual void __thiscall std::out_of_range::_Doraise(void)const",
    "_Mbrtowc",
    "public: class std::reverse_iterator __thiscall std::basic_string,class std::allocator >::rbegin(void)const",
    "private: static class std::ostreambuf_iterator > __cdecl std::money_put > >::_Put(class std::ostreambuf_iterator >,char const *,unsigned int)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned int,char,class std::allocator const &)",
    "public: virtual __thiscall std::basic_ofstream >::~basic_ofstream >(void)",
    "public: void __thiscall std::bad_exception::`default constructor closure'(void)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,unsigned char *)",
    "public: static int __cdecl std::numeric_limits::epsilon(void)",
    "public: class std::length_error & __thiscall std::length_error::operator=(class std::length_error const &)",
    "public: int __thiscall std::basic_streambuf >::sgetc(void)",
    "??$?DN@std@@YA?AV?$complex@N@0@ABNABV10@@Z",
    "public: int __thiscall std::basic_istream >::peek(void)",
    "public: virtual __thiscall std::time_get > >::~time_get > >(void)",
    "public: static float __cdecl std::numeric_limits::infinity(void)",
    "??$polar@M@std@@YA?AV?$complex@M@0@ABM0@Z",
    "protected: virtual int __thiscall std::basic_streambuf >::sync(void)",
    "public: class std::basic_streambuf > * __thiscall std::basic_streambuf >::pubsetbuf(unsigned short *,int)",
    "??$?5GU?$char_traits@G@std@@O@std@@YAAAV?$basic_istream@GU?$char_traits@G@std@@@0@AAV10@AAV?$complex@O@0@@Z",
    "public: long double __thiscall std::_Complex_base::real(long double const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)",
    "public: int __thiscall std::basic_streambuf >::sputn(unsigned short const *,int)",
    "public: char * __thiscall std::basic_string,class std::allocator >::erase(char *,char *)",
    "??$?ZMM@std@@YAAAV?$complex@M@0@AAV10@ABV10@@Z",
    "public: char __thiscall std::basic_ios >::narrow(unsigned short,char)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,unsigned short const *,unsigned short const *)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,long &)const",
    "public: bool __thiscall std::locale::operator==(class std::locale const &)const",
    "public: void __thiscall std::basic_ofstream >::close(void)",
    "bool __cdecl std::operator!=(double const &,class std::complex const &)",
    "protected: void __thiscall std::messages::_Init(class std::_Locinfo const &)",
    "public: void __thiscall std::basic_ios >::clear(int,bool)",
    "private: static int std::ios_base::Init::_Init_cnt",
    "??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAE@Z",
    "protected: void __thiscall std::ios_base::_Init(void)",
    "public: int __thiscall std::messages::open(class std::basic_string,class std::allocator > const &,class std::locale const &)const",
    "public: static char __cdecl std::numeric_limits::denorm_min(void)",
    "public: static long double __cdecl std::_Ctr::log(long double)",
    "public: void __thiscall std::basic_istream >::isfx(void)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,unsigned short const *)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,double &)const",
    "??$?HO@std@@YA?AV?$complex@O@0@ABV10@0@Z",
    "public: bool __thiscall std::codecvt_base::always_noconv(void)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(char,unsigned int)const",
    "private: static class std::locale::_Locimp * std::locale::_Locimp::_Global",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::basic_istream > & (__cdecl*)(class std::basic_istream > &))",
    "public: char const * __thiscall std::_Locinfo::_Getyes(void)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(char const *,unsigned int)const",
    "const std::bad_alloc::`vftable'",
    "private: static int std::ios_base::_Index",
    "private: int __thiscall std::basic_stringbuf,class std::allocator >::_Mode(int)",
    "_Sinh",
    "public: virtual __thiscall std::money_put > >::~money_put > >(void)",
    "??$?6GU?$char_traits@G@std@@M@std@@YAAAV?$basic_ostream@GU?$char_traits@G@std@@@0@AAV10@ABV?$complex@M@0@@Z",
    "bool __cdecl std::operator>=(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "class std::complex & __cdecl std::operator+=(class std::complex &,class std::complex const &)",
    "protected: virtual struct std::money_base::pattern __thiscall std::_Mpunct::do_neg_format(void)const",
    "public: static unsigned short __cdecl std::numeric_limits::min(void)",
    "public: int __thiscall std::codecvt::length(int &,unsigned short const *,unsigned short const *,unsigned int)const",
    "public: static long double __cdecl std::_Ctr::pow(long double,long double)",
    "public: __thiscall std::codecvt::codecvt(unsigned int)",
    "public: virtual __thiscall std::basic_filebuf >::~basic_filebuf >(void)",
    "public: virtual __thiscall std::basic_stringbuf,class std::allocator >::~basic_stringbuf,class std::allocator >(void)",
    "class std::complex __cdecl std::operator-(class std::complex const &,class std::complex const &)",
    "public: class std::range_error & __thiscall std::range_error::operator=(class std::range_error const &)",
    "public: class std::allocator __thiscall std::basic_string,class std::allocator >::get_allocator(void)const",
    "public: int __thiscall std::_Mpunct::frac_digits(void)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::flush(void)",
    "??$?KM@std@@YA?AV?$complex@M@0@ABV10@0@Z",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::end(void)",
    "public: static bool __cdecl std::_Ctr::_Isinf(double)",
    "??$?OGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA_NABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@PBG@Z",
    "??$?ODU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z",
    "public: unsigned short const & __thiscall std::basic_string,class std::allocator >::at(unsigned int)const",
    "const std::codecvt_base::`vftable'",
    "public: __thiscall std::messages::messages(unsigned int)",
    "??$?ZNN@std@@YAAAV?$complex@N@0@AAV10@ABV10@@Z",
    "public: class std::basic_string,class std::allocator > __thiscall std::collate::transform(char const *,char const *)const",
    "public: __thiscall std::basic_stringbuf,class std::allocator >::basic_stringbuf,class std::allocator >(class std::basic_string,class std::allocator > const &,int)",
    "public: __thiscall std::bad_typeid::bad_typeid(char const *)",
    "??$?9O@std@@YA_NABOABV?$complex@O@0@@Z",
    "const std::money_put > >::`vftable'",
    "struct std::_Smanip __cdecl std::setiosflags(int)",
    "protected: void __thiscall std::num_get > >::_Init(class std::_Locinfo const &)",
    "public: char __thiscall std::basic_ios >::narrow(char,char)const",
    "public: static long double __cdecl std::numeric_limits::max(void)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,double &)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::basic_ostream > & (__cdecl*)(class std::basic_ostream > &))",
    "public: static short __cdecl std::_Ctr::_Exp(long double *,long double,short)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(char const *,char const *)",
    "public: static int __cdecl std::char_traits::compare(unsigned short const *,unsigned short const *,unsigned int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(unsigned short const *)",
    "public: void __thiscall std::bad_cast::`default constructor closure'(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(char const *,unsigned int)const",
    "public: __thiscall std::basic_fstream >::basic_fstream >(class std::basic_fstream > const &)",
    "public: class std::__non_rtti_object & __thiscall std::__non_rtti_object::operator=(class std::__non_rtti_object const &)",
    "const std::bad_typeid::`vftable'",
    "class std::complex __cdecl std::operator-(float const &,class std::complex const &)",
    "??$cosh@N@std@@YA?AV?$complex@N@0@ABV10@@Z",
    "public: void __thiscall std::codecvt::`default constructor closure'(void)",
    "public: virtual __thiscall std::strstreambuf::~strstreambuf(void)",
    "class std::complex __cdecl std::operator/(class std::complex const &,long double const &)",
    "??$log@N@std@@YA?AV?$complex@N@0@ABV10@@Z",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned int,char)",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekpos(class std::fpos,int)",
    "protected: virtual void __thiscall std::messages::do_close(int)const",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,void const *)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,unsigned short const *)",
    "public: static double __cdecl std::_Ctr::atan2(double,double)",
    "protected: void __thiscall std::basic_stringbuf,class std::allocator >::_Init(char const *,unsigned int,int)",
    "??$log@M@std@@YA?AV?$complex@M@0@ABV10@@Z",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::erase(unsigned int,unsigned int)",
    "??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned short const *)const",
    "bool __cdecl std::operator==(float const &,class std::complex const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,class std::basic_string,class std::allocator > const &)",
    "protected: void __thiscall std::money_get > >::_Init(class std::_Locinfo const &)",
    "public: __thiscall std::basic_ostream >::basic_ostream >(class std::basic_streambuf > *,bool,bool)",
    "private: static char * __cdecl std::basic_string,class std::allocator >::_Psum(char *,unsigned int)",
    "public: static unsigned int __cdecl std::numeric_limits::round_error(void)",
    "protected: virtual int __thiscall std::codecvt_base::do_max_length(void)const",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_monthname(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: class std::basic_ios > & __thiscall std::basic_ios >::operator=(class std::basic_ios > const &)",
    "public: int __thiscall std::codecvt::length(int &,char const *,char const *,unsigned int)const",
    "public: void __thiscall std::basic_fstream >::close(void)",
    "public: virtual __thiscall std::numpunct::~numpunct(void)",
    "_Cosh",
    "public: void __thiscall std::complex::`default constructor closure'(void)",
    "??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAC@Z",
    "bool __cdecl std::operator<=(char const *,class std::basic_string,class std::allocator > const &)",
    "public: static bool __cdecl std::numeric_limits::round_error(void)",
    "public: bool __thiscall std::ios_base::operator!(void)const",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,unsigned char &)",
    "protected: void __thiscall std::ctype::_Init(class std::_Locinfo const &)",
    "public: char __thiscall std::ctype::narrow(unsigned short,char)const",
    "protected: virtual bool __thiscall std::ctype::do_is(short,unsigned short)const",
    "public: unsigned short const & __thiscall std::basic_string,class std::allocator >::operator[](unsigned int)const",
    "private: static unsigned short const * __cdecl std::basic_string,class std::allocator >::_Nullstr(void)",
    "public: unsigned short const * __thiscall std::ctype::is(unsigned short const *,unsigned short const *,short *)const",
    "public: static unsigned short __cdecl std::numeric_limits::round_error(void)",
    "public: static long double __cdecl std::_Ctr::sqrt(long double)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "_FEps",
    "struct _iobuf * __cdecl std::__Fiopen(char const *,int)",
    "public: int __thiscall std::ios_base::width(int)",
    "bool __cdecl std::operator>=(char const *,class std::basic_string,class std::allocator > const &)",
    "public: char const * __thiscall std::_Locinfo::_Getfalse(void)const",
    "double __cdecl std::abs(class std::complex const &)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator+=(float const &)",
    "public: static short __cdecl std::numeric_limits::max(void)",
    "const std::money_base::`vftable'",
    "_LSnan",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "public: void __thiscall std::basic_ifstream >::open(char const *,int)",
    "protected: void __thiscall std::_Mpunct::_Init(class std::_Locinfo const &)",
    "private: static class std::ostreambuf_iterator > __cdecl std::money_put > >::_Rep(class std::ostreambuf_iterator >,char,unsigned int)",
    "public: virtual __thiscall std::basic_ostream >::~basic_ostream >(void)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator*=(float const &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,long double)const",
    "public: virtual __thiscall std::time_base::~time_base(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(float &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,char const *)",
    "mbsrtowcs",
    "double __cdecl std::imag(class std::complex const &)",
    "public: static unsigned int __cdecl std::numpunct::_Getcat(void)",
    "protected: void __thiscall std::basic_streambuf >::setg(char *,char *,char *)",
    "public: __thiscall std::moneypunct::moneypunct(class std::_Locinfo const &,unsigned int)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(bool &)",
    "??$sinh@O@std@@YA?AV?$complex@O@0@ABV10@@Z",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,unsigned long)const",
    "public: void __thiscall std::ios_base::exceptions(int)",
    "public: static float __cdecl std::numeric_limits::signaling_NaN(void)",
    "protected: void __thiscall std::basic_streambuf >::_Init(void)",
    "_Denorm",
    "class std::basic_ostream > std::cout",
    "??$?9GU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA_NABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@PBG@Z",
    "??$exp@O@std@@YA?AV?$complex@O@0@ABV10@@Z",
    "class std::complex __cdecl std::operator+(float const &,class std::complex const &)",
    "public: static class std::locale::id std::collate::id",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator+=(double const &)",
    "public: static long double __cdecl std::_Ctr::_Sinh(long double,long double)",
    "public: static unsigned short * __cdecl std::char_traits::assign(unsigned short *,unsigned int,unsigned short const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(unsigned short const *,unsigned int)const",
    "_Poly",
    "public: __thiscall std::time_put > >::time_put > >(unsigned int)",
    "int `protected: void __thiscall std::basic_filebuf >::_Init(struct _iobuf *,enum std::basic_filebuf >::_Initfl)'::`2'::_Stinit",
    "protected: void __thiscall std::time_put > >::_Init(class std::_Locinfo const &)",
    "public: int __thiscall std::basic_streambuf >::sputbackc(char)",
    "protected: void __thiscall std::basic_streambuf >::setp(unsigned short *,unsigned short *,unsigned short *)",
    "??$?YOO@std@@YAAAV?$complex@O@0@AAV10@ABV10@@Z",
    "??$?HM@std@@YA?AV?$complex@M@0@ABV10@0@Z",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_streambuf >::setbuf(unsigned short *,int)",
    "public: static unsigned int __cdecl std::money_get > >::_Getcat(void)",
    "public: virtual __thiscall std::codecvt_base::~codecvt_base(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::size(void)const",
    "const std::money_get > >::`vftable'",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_time(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "protected: virtual class std::fpos __thiscall std::basic_stringbuf,class std::allocator >::seekoff(long,enum std::ios_base::seekdir,int)",
    "wctrans",
    "public: struct std::char_traits & __thiscall std::char_traits::operator=(struct std::char_traits const &)",
    "??$?8GU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA_NABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@PBG@Z",
    "public: static double __cdecl std::numeric_limits::quiet_NaN(void)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::money_put > >::do_put(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,long double)const",
    "_FDtest",
    "??$pow@O@std@@YA?AV?$complex@O@0@ABV10@0@Z",
    "public: __thiscall std::underflow_error::underflow_error(class std::underflow_error const &)",
    "public: __thiscall std::logic_error::logic_error(class std::logic_error const &)",
    "_Stod",
    "public: static unsigned short __cdecl std::numeric_limits::epsilon(void)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,double)const",
    "public: int __thiscall std::ios_base::setf(int,int)",
    "public: __thiscall std::_Mpunct::_Mpunct(class std::_Locinfo const &,unsigned int,bool)",
    "class std::complex __cdecl std::pow(class std::complex const &,double const &)",
    "public: int __thiscall std::basic_streambuf >::in_avail(void)",
    "bool __cdecl std::operator<(char const *,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::money_put > >::money_put > >(class std::_Locinfo const &,unsigned int)",
    "??$?5GU?$char_traits@G@std@@@std@@YAAAV?$basic_istream@GU?$char_traits@G@std@@@0@AAV10@AAG@Z",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator/=(long double const &)",
    "class std::complex __cdecl std::operator*(class std::complex const &,double const &)",
    "bool __cdecl std::operator<=(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::__non_rtti_object::__non_rtti_object(class std::__non_rtti_object const &)",
    "public: bool __thiscall std::ctype::is(short,char)const",
    "??$?6GU?$char_traits@G@std@@N@std@@YAAAV?$basic_ostream@GU?$char_traits@G@std@@@0@AAV10@ABV?$complex@N@0@@Z",
    "bool __cdecl std::operator>=(class std::basic_string,class std::allocator > const &,char const *)",
    "class std::complex __cdecl std::operator/(class std::complex const &,double const &)",
    "public: static class std::locale const & __cdecl std::locale::classic(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(char const *,unsigned int,unsigned int)const",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,char)",
    "public: static int __cdecl std::char_traits::not_eof(int const &)",
    "protected: virtual char const * __thiscall std::ctype::do_widen(char const *,char const *,unsigned short *)const",
    "??$imag@M@std@@YAMABV?$complex@M@0@@Z",
    "public: static long double __cdecl std::numeric_limits::min(void)",
    "??$?HGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA?AV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@ABV10@0@Z",
    "protected: short const * __thiscall std::ctype::table(void)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(unsigned short const *,unsigned int,unsigned int)const",
    "class std::complex __cdecl std::operator*(float const &,class std::complex const &)",
    "public: static double __cdecl std::_Ctr::_Sinh(double,double)",
    "??$?9N@std@@YA_NABV?$complex@N@0@ABN@Z",
    "??$sqrt@O@std@@YA?AV?$complex@O@0@ABV10@@Z",
    "??$?NDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z",
    "??$?GN@std@@YA?AV?$complex@N@0@ABV10@0@Z",
    "protected: virtual int __thiscall std::codecvt::do_max_length(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned short const *,unsigned short const *)",
    "??$log10@M@std@@YA?AV?$complex@M@0@ABV10@@Z",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Iput(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,char *,unsigned int)",
    "public: char __thiscall std::basic_ios >::widen(char)const",
    "??$arg@N@std@@YANABV?$complex@N@0@@Z",
    "public: virtual __thiscall std::bad_cast::~bad_cast(void)",
    "public: static unsigned short __cdecl std::char_traits::eof(void)",
    "class std::complex __cdecl std::polar(long double const &,long double const &)",
    "public: char * __thiscall std::basic_string,class std::allocator >::insert(char *,char)",
    "public: __thiscall std::num_get > >::num_get > >(class std::_Locinfo const &,unsigned int)",
    "??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z",
    "public: struct std::money_base::pattern __thiscall std::_Mpunct::pos_format(void)const",
    "public: void __thiscall std::basic_ostringstream,class std::allocator >::str(class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned short const *,unsigned int)",
    "public: int __thiscall std::basic_streambuf >::snextc(void)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned int &)const",
    "public: static long double __cdecl std::_Ctr::atan2(long double,long double)",
    "public: class std::_Timevec & __thiscall std::_Timevec::operator=(class std::_Timevec const &)",
    "??$?DM@std@@YA?AV?$complex@M@0@ABV10@0@Z",
    "public: static bool __cdecl std::char_traits::eq_int_type(int const &,int const &)",
    "protected: void __thiscall std::basic_stringbuf,class std::allocator >::_Init(unsigned short const *,unsigned int,int)",
    "_LPoly",
    "public: class std::runtime_error & __thiscall std::runtime_error::operator=(class std::runtime_error const &)",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Mpunct::grouping(void)const",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_scan_not(short,unsigned short const *,unsigned short const *)const",
    "class std::complex __cdecl std::operator-(class std::complex const &,long double const &)",
    "class std::complex __cdecl std::log(class std::complex const &)",
    "public: __thiscall std::_Complex_base::_Complex_base(double const &,double const &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::money_put > >::do_put(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,class std::basic_string,class std::allocator > const &)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::write(unsigned short const *,int)",
    "public: unsigned short const * __thiscall std::ctype::scan_is(short,unsigned short const *,unsigned short const *)const",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_stringbuf,class std::allocator > & __thiscall std::basic_stringbuf,class std::allocator >::operator=(class std::basic_stringbuf,class std::allocator > const &)",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekoff(long,enum std::ios_base::seekdir,int)",
    "public: __thiscall std::basic_stringbuf,class std::allocator >::basic_stringbuf,class std::allocator >(class std::basic_stringbuf,class std::allocator > const &)",
    "public: int __thiscall std::collate::compare(char const *,char const *,char const *,char const *)const",
    "public: virtual __thiscall std::messages::~messages(void)",
    "public: void __thiscall std::time_put > >::`default constructor closure'(void)",
    "public: char const * __thiscall std::ctype::is(char const *,char const *,short *)const",
    "const std::basic_istream >::`vftable'",
    "protected: virtual void __thiscall std::bad_alloc::_Doraise(void)const",
    "public: void __thiscall std::ctype::`default constructor closure'(void)",
    "const std::basic_fstream >::`vftable'",
    "public: static short __cdecl std::numeric_limits::min(void)",
    "public: class std::basic_filebuf > * __thiscall std::basic_fstream >::rdbuf(void)const",
    "public: virtual __thiscall std::basic_ifstream >::~basic_ifstream >(void)",
    "protected: virtual int __thiscall std::basic_filebuf >::overflow(int)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator=(class std::basic_ostream > const &)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,unsigned short &)",
    "class std::complex __cdecl std::cosh(class std::complex const &)",
    "public: static short __cdecl std::numeric_limits::epsilon(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,char const *,unsigned int)",
    "??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,long double &)const",
    "public: __thiscall std::ctype::ctype(unsigned int)",
    "public: char const * __thiscall std::ctype::narrow(char const *,char const *,char,char *)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,char const *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,char const *,unsigned int)",
    "public: char const * __thiscall std::_Locinfo::_Getmonths(void)const",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,char const *)",
    "public: __thiscall std::basic_istream >::basic_istream >(class std::basic_streambuf > *,bool)",
    "public: void __thiscall std::basic_ofstream >::open(char const *,int)",
    "public: class std::basic_ostream > * __thiscall std::basic_ios >::tie(void)const",
    "public: __thiscall std::ios_base::ios_base(class std::ios_base const &)",
    "public: unsigned short & __thiscall std::basic_string,class std::allocator >::operator[](unsigned int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(char,unsigned int)const",
    "protected: virtual int __thiscall std::messages::do_open(class std::basic_string,class std::allocator > const &,class std::locale const &)const",
    "public: virtual __thiscall std::ios_base::~ios_base(void)",
    "protected: virtual void __thiscall std::underflow_error::_Doraise(void)const",
    "_Dscale",
    "public: unsigned short const * __thiscall std::ctype::narrow(unsigned short const *,unsigned short const *,char,char *)const",
    "const std::basic_ifstream >::`vftable'",
    "public: char const * __thiscall std::ctype::widen(char const *,char const *,unsigned short *)const",
    "protected: virtual bool __thiscall std::codecvt_base::do_always_noconv(void)const",
    "const std::overflow_error::`vftable'",
    "public: static char __cdecl std::numeric_limits::quiet_NaN(void)",
    "class std::complex __cdecl std::pow(double const &,class std::complex const &)",
    "class std::complex & __cdecl std::operator/=(class std::complex &,class std::complex const &)",
    "const std::locale::facet::`vftable'",
    "public: static long double __cdecl std::_Ctr::exp(long double)",
    "public: class std::basic_filebuf > * __thiscall std::basic_ifstream >::rdbuf(void)const",
    "public: __thiscall std::bad_exception::bad_exception(class std::bad_exception const &)",
    "??$?NDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z",
    "public: __thiscall std::codecvt::codecvt(class std::_Locinfo const &,unsigned int)",
    "protected: virtual unsigned short __thiscall std::_Mpunct::do_thousands_sep(void)const",
    "public: static bool __cdecl std::char_traits::eq(char const &,char const &)",
    "public: static unsigned int __cdecl std::messages::_Getcat(void)",
    "struct std::_Smanip __cdecl std::setw(int)",
    "??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z",
    "public: static class std::locale::id std::ctype::id",
    "??$_Fabs@O@std@@YAOABV?$complex@O@0@PAH@Z",
    "_Exp",
    "const std::messages_base::`vftable'",
    "bool __cdecl std::operator>(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::numpunct::do_grouping(void)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::seekp(long,enum std::ios_base::seekdir)",
    "public: __thiscall std::basic_ostringstream,class std::allocator >::basic_ostringstream,class std::allocator >(class std::basic_string,class std::allocator > const &,int)",
    "protected: __thiscall std::basic_streambuf >::basic_streambuf >(enum std::_Uninitialized)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator/=(float const &)",
    "_Xbig",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,signed char *)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(unsigned short,unsigned int)const",
    "protected: unsigned short * __thiscall std::basic_streambuf >::_Gninc(void)",
    "??$?HO@std@@YA?AV?$complex@O@0@ABV10@ABO@Z",
    "public: static char __cdecl std::numeric_limits::infinity(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(char,unsigned int)const",
    "protected: char * __thiscall std::basic_streambuf >::egptr(void)const",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(class std::basic_string,class std::allocator > const &)",
    "public: static double __cdecl std::_Ctr::_Cosh(double,double)",
    "public: char const * __thiscall std::basic_string,class std::allocator >::data(void)const",
    "bool __cdecl std::operator>(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: long & __thiscall std::ios_base::iword(int)",
    "protected: static char * __cdecl std::num_put > >::_Ffmt(char *,char,int)",
    "public: static float __cdecl std::_Ctr::sin(float)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "public: class std::_Winit & __thiscall std::_Winit::operator=(class std::_Winit const &)",
    "mbrtowc",
    "__Wcrtomb_lk",
    "private: unsigned char & __thiscall std::basic_string,class std::allocator >::_Refcnt(unsigned short const *)",
    "protected: virtual int __thiscall std::basic_stringbuf,class std::allocator >::pbackfail(int)",
    "float __cdecl std::imag(class std::complex const &)",
    "public: static double __cdecl std::_Ctr::ldexp(double,int)",
    "class std::complex __cdecl std::operator+(double const &,class std::complex const &)",
    "public: virtual __thiscall std::basic_streambuf >::~basic_streambuf >(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::seekg(class std::fpos)",
    "public: __thiscall std::basic_ofstream >::basic_ofstream >(char const *,int)",
    "public: char & __thiscall std::basic_string,class std::allocator >::operator[](unsigned int)",
    "public: unsigned short __thiscall std::basic_streambuf >::snextc(void)",
    "class std::complex __cdecl std::sin(class std::complex const &)",
    "public: char const * __thiscall std::_Locinfo::_Gettrue(void)const",
    "protected: char * __thiscall std::basic_streambuf >::_Gninc(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "public: void __thiscall std::basic_string,class std::allocator >::insert(char *,char const *,char const *)",
    "const std::domain_error::`vftable'",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(unsigned short,unsigned int)const",
    "public: unsigned short const * __thiscall std::ctype::toupper(unsigned short *,unsigned short const *)const",
    "protected: virtual unsigned short __thiscall std::ctype::do_widen(char)const",
    "protected: void __thiscall std::basic_streambuf >::gbump(int)",
    "private: void __thiscall std::_Mpunct::_Makpat(struct std::money_base::pattern &,char,char,char)",
    "const std::numpunct::`vftable'",
    "public: __thiscall std::time_put > >::time_put > >(class std::_Locinfo const &,unsigned int)",
    "public: unsigned short __thiscall std::numpunct::thousands_sep(void)const",
    "??$?PGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA_NPBGABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@@Z",
    "protected: void __thiscall std::codecvt::_Init(class std::_Locinfo const &)",
    "??$?9O@std@@YA_NABV?$complex@O@0@ABO@Z",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::money_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,bool,class std::ios_base &,int &,class std::basic_string,class std::allocator > &)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::length(void)const",
    "public: static bool __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: class std::_Lockit & __thiscall std::_Lockit::operator=(class std::_Lockit const &)",
    "public: void __thiscall std::ios_base::clear(short)",
    "class std::complex __cdecl std::conj(class std::complex const &)",
    "public: unsigned short const * __thiscall std::basic_string,class std::allocator >::begin(void)const",
    "protected: virtual unsigned short __thiscall std::ctype::do_tolower(unsigned short)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_ostringstream,class std::allocator >::str(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned short const *,unsigned short const *)",
    "public: __thiscall std::basic_istringstream,class std::allocator >::basic_istringstream,class std::allocator >(class std::basic_istringstream,class std::allocator > const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(class std::basic_string,class std::allocator > const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(unsigned short const *,unsigned int,unsigned int)const",
    "protected: virtual int __thiscall std::basic_stringbuf,class std::allocator >::overflow(int)",
    "public: static char * __cdecl std::char_traits::copy(char *,char const *,unsigned int)",
    "_Inf",
    "_LDenorm",
    "protected: virtual class std::fpos __thiscall std::basic_stringbuf,class std::allocator >::seekpos(class std::fpos,int)",
    "public: void __thiscall std::_Timevec::`default constructor closure'(void)",
    "??$?MGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA_NABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@PBG@Z",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(char const *,unsigned int,unsigned int)const",
    "public: void __thiscall std::basic_string,class std::allocator >::resize(unsigned int)",
    "??$conj@N@std@@YA?AV?$complex@N@0@ABV10@@Z",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned short &)const",
    "class std::basic_istream > std::wcin",
    "public: struct std::_Num_int_base & __thiscall std::_Num_int_base::operator=(struct std::_Num_int_base const &)",
    "bool __cdecl std::operator<=(class std::basic_string,class std::allocator > const &,char const *)",
    "public: void __thiscall std::money_put > >::`default constructor closure'(void)",
    "??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z",
    "public: __thiscall std::runtime_error::runtime_error(class std::runtime_error const &)",
    "public: class std::reverse_iterator __thiscall std::basic_string,class std::allocator >::rbegin(void)",
    "public: __thiscall std::basic_istream >::basic_istream >(enum std::_Uninitialized)",
    "public: static float __cdecl std::_Ctr::cos(float)",
    "??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z",
    "??$?GO@std@@YA?AV?$complex@O@0@ABV10@ABO@Z",
    "??$?KM@std@@YA?AV?$complex@M@0@ABV10@ABM@Z",
    "protected: virtual class std::fpos __thiscall std::basic_filebuf >::seekoff(long,enum std::ios_base::seekdir,int)",
    "public: __thiscall std::moneypunct::moneypunct(unsigned int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,unsigned int,unsigned short)",
    "protected: virtual int __thiscall std::time_get > >::do_date_order(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(unsigned short)",
    "const std::time_put > >::`vftable'",
    "class std::complex __cdecl std::polar(float const &)",
    "public: static unsigned short __cdecl std::char_traits::to_int_type(unsigned short const &)",
    "public: static signed char __cdecl std::numeric_limits::round_error(void)",
    "public: class std::ostreambuf_iterator > __thiscall std::money_put > >::put(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,long double)const",
    "bool __cdecl std::operator==(char const *,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::_Locinfo::_Locinfo(char const *)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(char *,int)",
    "public: virtual __thiscall std::basic_ios >::~basic_ios >(void)",
    "_FSnan",
    "public: static double __cdecl std::numeric_limits::denorm_min(void)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,signed char const *)",
    "public: float __thiscall std::_Complex_base::imag(void)const",
    "public: bool __thiscall std::ios_base::eof(void)const",
    "_Rteps",
    "public: class std::basic_ostringstream,class std::allocator > & __thiscall std::basic_ostringstream,class std::allocator >::operator=(class std::basic_ostringstream,class std::allocator > const &)",
    "class std::complex __cdecl std::operator+(class std::complex const &,long double const &)",
    "??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@E@Z",
    "public: struct std::_Num_base & __thiscall std::_Num_base::operator=(struct std::_Num_base const &)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator*=(double const &)",
    "public: static double __cdecl std::numeric_limits::infinity(void)",
    "??$?9M@std@@YA_NABV?$complex@M@0@0@Z",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(char const *,class std::basic_string,class std::allocator > const &)",
    "private: static short const * const std::ctype::_Cltab",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(unsigned short const *,unsigned int,unsigned int)const",
    "public: unsigned short __thiscall std::basic_ios >::widen(char)const",
    "public: void __thiscall std::basic_string,class std::allocator >::insert(unsigned short *,unsigned short const *,unsigned short const *)",
    "class std::complex __cdecl std::operator-(class std::complex const &,double const &)",
    "public: static bool __cdecl std::ios_base::sync_with_stdio(bool)",
    "public: static unsigned int const std::ctype::table_size",
    "class std::basic_istream > std::cin",
    "public: char __thiscall std::numpunct::decimal_point(void)const",
    "public: class std::basic_streambuf > * __thiscall std::basic_ios >::rdbuf(void)const",
    "public: char * __thiscall std::basic_string,class std::allocator >::begin(void)",
    "public: static bool __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: void * & __thiscall std::ios_base::pword(int)",
    "public: void __thiscall std::basic_ostream >::osfx(void)",
    "const std::bad_cast::`vftable'",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(unsigned short *,int,unsigned short)",
    "??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z",
    "public: static float __cdecl std::_Ctr::_Nanv(float)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(char *,int,char)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::_Mpunct::do_negative_sign(void)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(char &)",
    "public: static double __cdecl std::_Ctr::exp(double)",
    "public: __thiscall std::_Timevec::~_Timevec(void)",
    "const std::collate::`vftable'",
    "public: static char __cdecl std::numeric_limits::epsilon(void)",
    "protected: virtual void __thiscall std::logic_error::_Doraise(void)const",
    "_LRteps",
    "public: static unsigned int __cdecl std::num_put > >::_Getcat(void)",
    "public: static unsigned char __cdecl std::numeric_limits::max(void)",
    "private: static int __cdecl std::time_get > >::_Getint(class std::istreambuf_iterator > &,class std::istreambuf_iterator > &,int,int,int &)",
    "public: static double __cdecl std::_Ctr::_Nanv(double)",
    "const std::basic_iostream >::`vbtable'{for `std::basic_istream >'}",
    "class std::complex __cdecl std::operator/(double const &,class std::complex const &)",
    "public: int __thiscall std::codecvt_base::encoding(void)const",
    "??$?KO@std@@YA?AV?$complex@O@0@ABV10@ABO@Z",
    "char const `private: static char const * __cdecl std::basic_string,class std::allocator >::_Nullstr(void)'::`2'::_C",
    "public: static float __cdecl std::numeric_limits::denorm_min(void)",
    "public: static unsigned short * __cdecl std::char_traits::copy(unsigned short *,unsigned short const *,unsigned int)",
    "??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z",
    "??$?HGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA?AV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@ABV10@PBG@Z",
    "const std::messages::`vftable'",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,unsigned short const *,unsigned int)const",
    "public: class std::overflow_error & __thiscall std::overflow_error::operator=(class std::overflow_error const &)",
    "public: void __thiscall std::basic_filebuf >::`default constructor closure'(void)",
    "class std::complex __cdecl std::log10(class std::complex const &)",
    "wcrtomb",
    "public: int __thiscall std::basic_streambuf >::sgetn(unsigned short *,int)",
    "public: __thiscall std::_Locinfo::_Locinfo(class std::_Locinfo const &)",
    "??$log@O@std@@YA?AV?$complex@O@0@ABV10@@Z",
    "void __cdecl std::_Xlen(void)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::egptr(void)const",
    "public: __thiscall std::bad_cast::bad_cast(char const *)",
    "private: void __thiscall std::basic_string,class std::allocator >::_Freeze(void)",
    "public: char const * __thiscall std::_Locinfo::_Getno(void)const",
    "public: struct std::_Num_float_base & __thiscall std::_Num_float_base::operator=(struct std::_Num_float_base const &)",
    "protected: virtual int __thiscall std::codecvt_base::do_encoding(void)const",
    "public: static unsigned long __cdecl std::numeric_limits::max(void)",
    "??$?6GU?$char_traits@G@std@@V?$allocator@G@1@@std@@YAAAV?$basic_ostream@GU?$char_traits@G@std@@@0@AAV10@ABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@@Z",
    "public: virtual __thiscall std::num_put > >::~num_put > >(void)",
    "public: void __thiscall std::money_base::`default constructor closure'(void)",
    "protected: virtual int __thiscall std::codecvt::do_in(int &,char const *,char const *,char const * &,char *,char *,char * &)const",
    "public: class std::basic_streambuf > * __thiscall std::basic_streambuf >::pubsetbuf(char *,int)",
    "public: class std::basic_ofstream > & __thiscall std::basic_ofstream >::operator=(class std::basic_ofstream > const &)",
    "public: __thiscall std::length_error::length_error(class std::basic_string,class std::allocator > const &)",
    "public: static unsigned int __cdecl std::numeric_limits::epsilon(void)",
    "public: static unsigned short __cdecl std::numeric_limits::max(void)",
    "public: class std::_Timevec __thiscall std::_Locinfo::_Gettnames(void)const",
    "public: char * __thiscall std::basic_string,class std::allocator >::erase(char *)",
    "private: void __thiscall std::basic_string,class std::allocator >::_Eos(unsigned int)",
    "??$sin@M@std@@YA?AV?$complex@M@0@ABV10@@Z",
    "protected: unsigned short * __thiscall std::basic_streambuf >::epptr(void)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator=(class std::basic_istream > const &)",
    "public: __thiscall std::basic_string,class std::allocator >::~basic_string,class std::allocator >(void)",
    "public: __thiscall std::domain_error::domain_error(class std::basic_string,class std::allocator > const &)",
    "public: void __thiscall std::basic_ifstream >::close(void)",
    "private: static int __cdecl std::num_get > >::_Getifld(char *,class std::istreambuf_iterator > &,class std::istreambuf_iterator > &,int,class std::locale const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(unsigned short *,int)",
    "??$?DM@std@@YA?AV?$complex@M@0@ABMABV10@@Z",
    "public: void __thiscall std::numpunct::`default constructor closure'(void)",
    "public: static long double __cdecl std::numeric_limits::denorm_min(void)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned short &)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::basic_streambuf > *)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(unsigned short)",
    "public: bool __thiscall std::basic_ifstream >::is_open(void)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::collate::transform(unsigned short const *,unsigned short const *)const",
    "btowc",
    "public: virtual __thiscall std::strstream::~strstream(void)",
    "bool __cdecl std::operator>(char const *,class std::basic_string,class std::allocator > const &)",
    "const std::basic_streambuf >::`vftable'",
    "public: unsigned short const * __thiscall std::ctype::tolower(unsigned short *,unsigned short const *)const",
    "public: __thiscall std::money_get > >::money_get > >(class std::_Locinfo const &,unsigned int)",
    "public: void __thiscall std::basic_string,class std::allocator >::insert(unsigned short *,unsigned int,unsigned short)",
    "class std::basic_istream > & __cdecl std::getline(class std::basic_istream > &,class std::basic_string,class std::allocator > &,char)",
    "??$exp@M@std@@YA?AV?$complex@M@0@ABV10@@Z",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator-=(double const &)",
    "??$?NGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA_NABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@0@Z",
    "public: void __thiscall std::basic_fstream >::open(char const *,int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(char,unsigned int)const",
    "public: static signed char __cdecl std::numeric_limits::epsilon(void)",
    "bool __cdecl std::operator==(class std::complex const &,class std::complex const &)",
    "protected: char * __thiscall std::basic_streambuf >::_Pninc(void)",
    "public: char const * __thiscall std::ctype::scan_not(short,char const *,char const *)const",
    "public: static long double __cdecl std::_Ctr::_Nanv(long double)",
    "public: __thiscall std::basic_istringstream,class std::allocator >::basic_istringstream,class std::allocator >(int)",
    "protected: static void __cdecl std::ctype::_Term(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "public: static unsigned int __cdecl std::locale::facet::_Getcat(void)",
    "public: void __thiscall std::num_get > >::`default constructor closure'(void)",
    "_Stof",
    "public: __thiscall std::num_put > >::num_put > >(unsigned int)",
    "public: bool __thiscall std::basic_istream >::ipfx(bool)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,unsigned short const *)",
    "public: class std::basic_stringbuf,class std::allocator > * __thiscall std::basic_stringstream,class std::allocator >::rdbuf(void)const",
    "public: static double __cdecl std::numeric_limits::min(void)",
    "??$?PDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::copy(unsigned short *,unsigned int,unsigned int)const",
    "??$?6GU?$char_traits@G@std@@@std@@YAAAV?$basic_ostream@GU?$char_traits@G@std@@@0@AAV10@PBF@Z",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(unsigned short const *,unsigned int,unsigned int)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(char const *,unsigned int)",
    "private: static int std::locale::id::_Id_cnt",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::ignore(int,unsigned short)",
    "class std::basic_ostream > std::cerr",
    "public: char __thiscall std::ctype::narrow(char,char)const",
    "const std::basic_istringstream,class std::allocator >::`vftable'",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,unsigned long)const",
    "public: class std::locale __thiscall std::basic_ios >::imbue(class std::locale const &)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::numpunct::do_truename(void)const",
    "protected: virtual char __thiscall std::_Mpunct::do_thousands_sep(void)const",
    "public: __thiscall std::basic_ostream >::basic_ostream >(class std::basic_ostream > const &)",
    "protected: virtual void __thiscall std::range_error::_Doraise(void)const",
    "protected: void __thiscall std::basic_streambuf >::setp(char *,char *)",
    "struct std::nothrow_t const std::nothrow",
    "protected: virtual void __thiscall std::length_error::_Doraise(void)const",
    "??$?8GU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA_NPBGABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@@Z",
    "public: static unsigned short const * __cdecl std::char_traits::find(unsigned short const *,unsigned int,unsigned short const &)",
    "public: static unsigned int __cdecl std::char_traits::length(unsigned short const *)",
    "protected: virtual int __thiscall std::basic_streambuf >::xsgetn(char *,int)",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_toupper(unsigned short *,unsigned short const *)const",
    "public: virtual __thiscall std::locale::facet::~facet(void)",
    "??$cos@M@std@@YA?AV?$complex@M@0@ABV10@@Z",
    "class std::complex __cdecl std::cos(class std::complex const &)",
    "bool __cdecl std::operator>(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::runtime_error::runtime_error(class std::basic_string,class std::allocator > const &)",
    "??$polar@M@std@@YA?AV?$complex@M@0@ABM@Z",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,class std::basic_string,class std::allocator > const &)",
    "public: unsigned short __thiscall std::ctype::widen(char)const",
    "protected: void __thiscall std::money_put > >::_Init(class std::_Locinfo const &)",
    "public: static bool __cdecl std::_Ctr::_Isinf(float)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(unsigned int &)",
    "class std::complex __cdecl std::operator+(class std::complex const &,float const &)",
    "class std::complex __cdecl std::operator*(class std::complex const &,long double const &)",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_narrow(unsigned short const *,unsigned short const *,char,char *)const",
    "??$sqrt@N@std@@YA?AV?$complex@N@0@ABV10@@Z",
    "bool __cdecl std::operator<(class std::basic_string,class std::allocator > const &,char const *)",
    "public: void __thiscall std::basic_ios >::clear(short)",
    "protected: virtual int __thiscall std::basic_streambuf >::pbackfail(int)",
    "??$?KN@std@@YA?AV?$complex@N@0@ABV10@0@Z",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,double)const",
    "public: __thiscall std::basic_ios >::basic_ios >(class std::basic_ios > const &)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::_Mpunct::do_grouping(void)const",
    "bool __cdecl std::operator==(class std::complex const &,float const &)",
    "public: void __thiscall std::collate::`default constructor closure'(void)",
    "public: __thiscall std::_Lockit::~_Lockit(void)",
    "protected: virtual void __thiscall std::basic_streambuf >::imbue(class std::locale const &)",
    "double __cdecl std::_Fabs(class std::complex const &,int *)",
    "protected: virtual int __thiscall std::collate::do_compare(char const *,char const *,char const *,char const *)const",
    "??$?KN@std@@YA?AV?$complex@N@0@ABNABV10@@Z",
    "public: static long double __cdecl std::_Ctr::_Infv(long double)",
    "public: virtual __thiscall std::basic_stringstream,class std::allocator >::~basic_stringstream,class std::allocator >(void)",
    "bool __cdecl std::operator<=(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(unsigned short,unsigned int)const",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Iput(class std::ostreambuf_iterator >,class std::ios_base &,char,char *,unsigned int)",
    "double __cdecl std::arg(class std::complex const &)",
    "public: static bool __cdecl std::_Ctr::_Isnan(long double)",
    "??$imag@O@std@@YAOABV?$complex@O@0@@Z",
    "protected: virtual long __thiscall std::collate::do_hash(char const *,char const *)const",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned int &)const",
    "public: __thiscall std::basic_stringstream,class std::allocator >::basic_stringstream,class std::allocator >(class std::basic_string,class std::allocator > const &,int)",
    "public: static int __cdecl std::ios_base::xalloc(void)",
    "protected: virtual int __thiscall std::basic_streambuf >::xsputn(char const *,int)",
    "public: static long double __cdecl std::numeric_limits::infinity(void)",
    "public: void __thiscall std::ctype_base::`default constructor closure'(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "class std::complex __cdecl std::operator+(class std::complex const &)",
    "public: char __thiscall std::basic_ios >::fill(char)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::copy(char *,unsigned int,unsigned int)const",
    "public: static unsigned char __cdecl std::numeric_limits::denorm_min(void)",
    "float __cdecl std::arg(class std::complex const &)",
    "public: static unsigned int __cdecl std::_Mpunct::_Getcat(void)",
    "public: class std::locale & __thiscall std::locale::operator=(class std::locale const &)",
    "public: virtual __thiscall std::money_base::~money_base(void)",
    "??$log10@N@std@@YA?AV?$complex@N@0@ABV10@@Z",
    "const std::ios_base::`vftable'",
    "??$?HGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA?AV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@ABV10@G@Z",
    "_LEps",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(char *,int,char)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "void __cdecl std::_Nomemory(void)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator/=(double const &)",
    "??$?YMM@std@@YAAAV?$complex@M@0@AAV10@ABV10@@Z",
    "public: void __thiscall std::messages::close(int)const",
    "??$conj@O@std@@YA?AV?$complex@O@0@ABV10@@Z",
    "public: virtual __thiscall std::bad_alloc::~bad_alloc(void)",
    "bool __cdecl std::operator!=(float const &,class std::complex const &)",
    "public: unsigned short __thiscall std::ctype::tolower(unsigned short)const",
    "bool __cdecl std::operator<(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: static short __cdecl std::_Ctr::_Exp(float *,float,short)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,float &)const",
    "public: static double __cdecl std::_Ctr::sin(double)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,unsigned int,char)",
    "??$?8N@std@@YA_NABV?$complex@N@0@0@Z",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Fput(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,char const *,unsigned int,unsigned int)",
    "struct std::_Smanip __cdecl std::setbase(int)",
    "public: static float __cdecl std::numeric_limits::max(void)",
    "??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z",
    "class std::basic_ostream > std::clog",
    "public: class std::basic_istringstream,class std::allocator > & __thiscall std::basic_istringstream,class std::allocator >::operator=(class std::basic_istringstream,class std::allocator > const &)",
    "protected: void __thiscall std::basic_filebuf >::_Init(struct _iobuf *,enum std::basic_filebuf >::_Initfl)",
    "public: __thiscall std::money_get > >::money_get > >(unsigned int)",
    "public: static short __cdecl std::numeric_limits::round_error(void)",
    "class std::complex __cdecl std::operator/(long double const &,class std::complex const &)",
    "public: int __thiscall std::ios_base::setf(int)",
    "public: __thiscall std::ctype::ctype(class std::_Locinfo const &,unsigned int)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Put(class std::ostreambuf_iterator >,unsigned short const *,unsigned int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(char)",
    "protected: virtual void __thiscall std::bad_cast::_Doraise(void)const",
    "public: int __thiscall std::ios_base::exceptions(void)const",
    "protected: virtual int __thiscall std::codecvt::do_out(int &,char const *,char const *,char const * &,char *,char *,char * &)const",
    "public: static class std::locale::id std::money_put > >::id",
    "??$getline@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@YAAAV?$basic_istream@GU?$char_traits@G@std@@@0@AAV10@AAV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@@Z",
    "wctob",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,unsigned short)",
    "public: void __thiscall std::basic_stringstream,class std::allocator >::str(class std::basic_string,class std::allocator > const &)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_date(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "bool __cdecl std::operator==(class std::complex const &,long double const &)",
    "public: static unsigned int __cdecl std::codecvt::_Getcat(void)",
    "protected: virtual void __thiscall std::domain_error::_Doraise(void)const",
    "public: class std::locale __thiscall std::ios_base::getloc(void)const",
    "public: class std::basic_fstream > & __thiscall std::basic_fstream >::operator=(class std::basic_fstream > const &)",
    "public: __thiscall std::codecvt_base::codecvt_base(unsigned int)",
    "_FDscale",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)",
    "??$?XNN@std@@YAAAV?$complex@N@0@AAV10@ABV10@@Z",
    "public: static unsigned long __cdecl std::numeric_limits::denorm_min(void)",
    "public: static unsigned char __cdecl std::numeric_limits::min(void)",
    "public: static bool __cdecl std::char_traits::lt(unsigned short const &,unsigned short const &)",
    "??$?DN@std@@YA?AV?$complex@N@0@ABV10@0@Z",
    "public: void __thiscall std::messages_base::`default constructor closure'(void)",
    "const std::length_error::`vftable'",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator-=(float const &)",
    "protected: virtual char __thiscall std::ctype::do_tolower(char)const",
    "public: bool __thiscall std::ios_base::good(void)const",
    "public: static char __cdecl std::numeric_limits::min(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(char const *)",
    "private: static class std::ostreambuf_iterator > __cdecl std::money_put > >::_Rep(class std::ostreambuf_iterator >,unsigned short,unsigned int)",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Mpunct::negative_sign(void)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::basic_ios > & (__cdecl*)(class std::basic_ios > &))",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(long)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(char)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(char const *,unsigned int)const",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,long double)const",
    "const std::basic_istream >::`vbtable'",
    "protected: void __thiscall std::basic_streambuf >::setg(unsigned short *,unsigned short *,unsigned short *)",
    "public: __thiscall std::__non_rtti_object::__non_rtti_object(char const *)",
    "public: class std::ostreambuf_iterator > __thiscall std::time_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,struct tm const *,char const *,char const *)const",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_weekday(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: void __thiscall std::basic_istringstream,class std::allocator >::`default constructor closure'(void)",
    "protected: virtual int __thiscall std::basic_streambuf >::showmanyc(void)",
    "??$?8M@std@@YA_NABMABV?$complex@M@0@@Z",
    "??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z",
    "public: char const * __thiscall std::basic_string,class std::allocator >::end(void)const",
    "class std::complex __cdecl std::polar(double const &)",
    "protected: virtual int __thiscall std::_Mpunct::do_frac_digits(void)const",
    "protected: virtual int __thiscall std::strstreambuf::underflow(void)",
    "protected: virtual char const * __thiscall std::ctype::do_tolower(char *,char const *)const",
    "public: bool __thiscall std::locale::operator!=(class std::locale const &)const",
    "class std::complex __cdecl std::operator*(class std::complex const &,class std::complex const &)",
    "public: static long __cdecl std::numeric_limits::round_error(void)",
    "public: double __thiscall std::_Complex_base::imag(double const &)",
    "public: static bool __cdecl std::numeric_limits::epsilon(void)",
    "_LSinh",
    "public: static float __cdecl std::_Ctr::_Cosh(float,float)",
    "??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z",
    "public: void __thiscall std::ios_base::unsetf(int)",
    "public: static unsigned char __cdecl std::numeric_limits::epsilon(void)",
    "??$?NGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA_NPBGABV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@@Z",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,char &)",
    "public: int __thiscall std::basic_istream >::sync(void)",
    "wctype",
    "public: char const * __thiscall std::ctype::tolower(char *,char const *)const",
    "public: static bool const std::moneypunct::intl",
    "const std::ctype_base::`vftable'",
    "??$?GM@std@@YA?AV?$complex@M@0@ABMABV10@@Z",
    "?_R2@?BN@???$_Fabs@N@std@@YANABV?$complex@N@1@PAH@Z@4NB",
    "class std::complex __cdecl std::pow(class std::complex const &,long double const &)",
    "_Toupper",
    "public: class std::locale __thiscall std::basic_streambuf >::pubimbue(class std::locale const &)",
    "public: static unsigned int __cdecl std::collate::_Getcat(void)",
    "??$real@N@std@@YANABV?$complex@N@0@@Z",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::putback(char)",
    "public: unsigned short __thiscall std::basic_ios >::fill(void)const",
    "??$?YNN@std@@YAAAV?$complex@N@0@AAV10@ABV10@@Z",
    "public: static unsigned int __cdecl std::moneypunct::_Getcat(void)",
    "??$?_0MM@std@@YAAAV?$complex@M@0@AAV10@ABV10@@Z",
    "??$?8N@std@@YA_NABV?$complex@N@0@ABN@Z",
    "public: class std::istreambuf_iterator > __thiscall std::money_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,bool,class std::ios_base &,int &,long double &)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,unsigned int,char)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::collate::do_transform(char const *,char const *)const",
    "public: void __thiscall std::basic_string,class std::allocator >::`default constructor closure'(void)",
    "bool __cdecl std::operator!=(class std::complex const &,long double const &)",
    "public: __thiscall std::basic_ofstream >::basic_ofstream >(class std::basic_ofstream > const &)",
    "public: __thiscall std::_Timevec::_Timevec(void *)",
    "protected: virtual char __thiscall std::_Mpunct::do_decimal_point(void)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::numpunct::grouping(void)const",
    "protected: virtual unsigned short __thiscall std::basic_filebuf >::uflow(void)",
    "public: void __thiscall std::ios_base::setstate(short)",
    "bool __cdecl std::operator>=(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,bool &)const",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,long double)const",
    "public: static class std::locale::id std::moneypunct::id",
    "private: class std::basic_string,class std::allocator > __thiscall std::money_get > >::_Getmfld(class std::istreambuf_iterator > &,class std::istreambuf_iterator > &,bool,class std::ios_base &)const",
    "public: char const * __thiscall std::basic_string,class std::allocator >::c_str(void)const",
    "public: struct _Ctypevec __thiscall std::_Locinfo::_Getctype(void)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::ios_base & (__cdecl*)(class std::ios_base &))",
    "bool __cdecl std::operator!=(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: static long __cdecl std::numeric_limits::infinity(void)",
    "public: void __thiscall std::basic_ofstream >::`vbase destructor'(void)",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_stringbuf,class std::allocator >::str(void)const",
    "_Getcvt",
    "class std::complex __cdecl std::operator-(double const &,class std::complex const &)",
    "class std::complex __cdecl std::operator*(long double const &,class std::complex const &)",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::begin(void)",
    "??$norm@M@std@@YAMABV?$complex@M@0@@Z",
    "protected: unsigned short * __thiscall std::basic_streambuf >::pbase(void)const",
    "bool __cdecl std::operator>(class std::basic_string,class std::allocator > const &,char const *)",
    "protected: void __thiscall std::basic_streambuf >::setp(char *,char *,char *)",
    "public: unsigned short __thiscall std::basic_streambuf >::sgetc(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)",
    "public: int __thiscall std::ios_base::flags(void)const",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::numpunct::do_falsename(void)const",
    "??$abs@N@std@@YANABV?$complex@N@0@@Z",
    "public: static short __cdecl std::numeric_limits::infinity(void)",
    "public: char const * __thiscall std::ctype::toupper(char *,char const *)const",
    "public: static char * __cdecl std::char_traits::assign(char *,unsigned int,char const &)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::pptr(void)const",
    "public: class std::bad_cast & __thiscall std::bad_cast::operator=(class std::bad_cast const &)",
    "public: class std::allocator & __thiscall std::allocator::operator=(class std::allocator const &)",
    "public: static int __cdecl std::numeric_limits::infinity(void)",
    "public: static float __cdecl std::_Ctr::exp(float)",
    "??$?HGU?$char_traits@G@std@@V?$allocator@G@1@@std@@YA?AV?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@0@GABV10@@Z",
    "_Strcoll",
    "public: __thiscall std::overflow_error::overflow_error(class std::overflow_error const &)",
    "public: class std::basic_ostream > * __thiscall std::basic_ios >::tie(class std::basic_ostream > *)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,double)const",
    "??$?8O@std@@YA_NABV?$complex@O@0@ABO@Z",
    "public: int __thiscall std::basic_istream >::readsome(char *,int)",
    "public: virtual __thiscall std::bad_exception::~bad_exception(void)",
    "public: struct _Collvec __thiscall std::_Locinfo::_Getcoll(void)const",
    "public: void __thiscall std::money_get > >::`default constructor closure'(void)",
    "const std::basic_ostream >::`vftable'",
    "??$?6GU?$char_traits@G@std@@O@std@@YAAAV?$basic_ostream@GU?$char_traits@G@std@@@0@AAV10@ABV?$complex@O@0@@Z",
    "??$?GN@std@@YA?AV?$complex@N@0@ABNABV10@@Z",
    "public: static class std::locale::id std::money_get > >::id",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,void const *)const",
    "public: void __thiscall std::basic_stringbuf,class std::allocator >::str(class std::basic_string,class std::allocator > const &)",
    "public: static class std::locale::id std::codecvt::id",
    "??$arg@M@std@@YAMABV?$complex@M@0@@Z",
    "public: bool __thiscall std::basic_filebuf >::is_open(void)const",
    "class std::basic_istream > & __cdecl std::getline(class std::basic_istream > &,class std::basic_string,class std::allocator > &)",
    "_LCosh",
    "public: unsigned short __thiscall std::basic_streambuf >::sputc(unsigned short)",
    "public: __thiscall std::numpunct::numpunct(unsigned int)",
    "protected: virtual class std::fpos __thiscall std::basic_filebuf >::seekpos(class std::fpos,int)",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Mpunct::curr_symbol(void)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::locale::name(void)const",
    "public: static long double __cdecl std::numeric_limits::round_error(void)",
    "public: static unsigned int __cdecl std::char_traits::length(char const *)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,bool)const",
    "public: long double __thiscall std::_Complex_base::imag(void)const",
    "public: class std::ios_base::Init & __thiscall std::ios_base::Init::operator=(class std::ios_base::Init const &)",
    "??$?9O@std@@YA_NABV?$complex@O@0@0@Z",
    "protected: virtual char __thiscall std::numpunct::do_thousands_sep(void)const",
    "public: __thiscall std::time_get > >::time_get > >(class std::_Locinfo const &,unsigned int)",
    "protected: void __thiscall std::basic_streambuf >::setp(unsigned short *,unsigned short *)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::money_put > >::do_put(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,class std::basic_string,class std::allocator > const &)const",
    "public: static long double __cdecl std::_Ctr::sin(long double)",
    "public: __thiscall std::_Locinfo::~_Locinfo(void)",
    "protected: char * __thiscall std::basic_streambuf >::eback(void)const",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_is(unsigned short const *,unsigned short const *,short *)const",
    "public: static long __cdecl std::numeric_limits::denorm_min(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,unsigned int,char)",
    "private: static char const * __cdecl std::basic_string,class std::allocator >::_Psum(char const *,unsigned int)",
    "class std::basic_istream > & __cdecl std::getline(class std::basic_istream > &,class std::basic_string,class std::allocator > &,unsigned short)",
    "bool __cdecl std::operator<(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::locale::locale(void)",
    "public: class std::basic_filebuf > * __thiscall std::basic_ofstream >::rdbuf(void)const",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,short const *)",
    "public: char const & __thiscall std::basic_string,class std::allocator >::at(unsigned int)const",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Putc(class std::ostreambuf_iterator >,char const *,unsigned int)",
    "public: static unsigned short __cdecl std::numeric_limits::quiet_NaN(void)",
    "protected: __thiscall std::basic_streambuf >::basic_streambuf >(void)",
    "public: char const * __thiscall std::basic_string,class std::allocator >::begin(void)const",
    "public: class std::locale::facet const * __thiscall std::locale::_Getfacet(unsigned int,bool)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(float)",
    "public: class std::complex & __thiscall std::complex::operator=(class std::complex const &)",
    "public: static int __cdecl std::numeric_limits::signaling_NaN(void)",
    "??$pow@M@std@@YA?AV?$complex@M@0@ABV10@H@Z",
    "public: void __thiscall std::basic_ios >::setstate(short)",
    "??$?ODU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z",
    "??$sin@N@std@@YA?AV?$complex@N@0@ABV10@@Z",
    "public: static long double __cdecl std::_Ctr::ldexp(long double,int)",
    "public: struct _Cvtvec __thiscall std::_Locinfo::_Getcvt(void)const",
    "protected: virtual unsigned short __thiscall std::basic_filebuf >::overflow(unsigned short)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::read(unsigned short *,int)",
    "public: class std::bad_typeid & __thiscall std::bad_typeid::operator=(class std::bad_typeid const &)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::_Mpunct::do_curr_symbol(void)const",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,long)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_stringstream,class std::allocator >::str(void)const",
    "public: __thiscall std::numpunct::numpunct(class std::_Locinfo const &,unsigned int)",
    "public: static bool __cdecl std::numeric_limits::denorm_min(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::max_size(void)const",
    "??$?PDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z",
    "protected: void __thiscall std::strstreambuf::_Tidy(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(class std::basic_string,class std::allocator > const &)",
    "public: static float __cdecl std::numeric_limits::epsilon(void)",
    "class std::complex __cdecl std::operator-(long double const &,class std::complex const &)",
    "public: static float __cdecl std::_Ctr::log(float)"
  ],
  "msvcrt.dll": [
    "wcsxfrm",
    "__dllonexit",
    "iswprint",
    "_ismbblead",
    "exit",
    "fwscanf",
    "__p___wargv",
    "__p__wenviron",
    "_safe_fprem",
    "_outpd",
    "__doserrno",
    "__crtCompareStringA",
    "fmod",
    "_exit",
    "getwc",
    "isprint",
    "_mbsnicmp",
    "_safe_fdiv",
    "_wfullpath",
    "strncpy",
    "toupper",
    "_getdllprocaddr",
    "__p___initenv",
    "_telli64",
    "_aligned_malloc",
    "_wchmod",
    "_wfindnext64",
    "atof",
    "fseek",
    "tmpnam",
    "__p__tzname",
    "__STRINGTOLD",
    "_ismbcl2",
    "sscanf",
    "rename",
    "_setjmp3",
    "_wfindfirst",
    "__p__mbcasemap",
    "public: virtual void * __thiscall exception::`vector deleting destructor'(unsigned int)",
    "_chdrive",
    "__wargv",
    "_ismbcsymbol",
    "void __cdecl operator delete(void *)",
    "setvbuf",
    "_putwch",
    "public: char const * __thiscall type_info::raw_name(void)const",
    "_fstat64",
    "raise",
    "_putw",
    "_wexecl",
    "__threadid",
    "vfprintf",
    "___unguarded_readlc_active_add_func",
    "_sys_nerr",
    "public: class __non_rtti_object & __thiscall __non_rtti_object::operator=(class __non_rtti_object const &)",
    "qsort",
    "_nextafter",
    "printf",
    "vswprintf",
    "__setlc_active",
    "__argc",
    "__pctype_func",
    "_mbctolower",
    "_purecall",
    "_fpieee_flt",
    "memset",
    "fgetpos",
    "_Getdays",
    "_finite",
    "_stat64",
    "_winmajor",
    "_cwait",
    "_wmkdir",
    "_HUGE",
    "_findnext",
    "acos",
    "tolower",
    "_beginthread",
    "_eof",
    "_mbctombb",
    "_expand",
    "fwprintf",
    "_CIexp",
    "_copysign",
    "tmpfile",
    "fprintf",
    "towlower",
    "_cscanf",
    "putchar",
    "_strset",
    "_wexeclpe",
    "_stati64",
    "_execve",
    "_filelength",
    "asctime",
    "isspace",
    "__p___argv",
    "_open_osfhandle",
    "_locking",
    "_pctype",
    "_adj_fdiv_m16i",
    "_pwctype",
    "_wcsnset",
    "_time64",
    "_makepath",
    "___lc_handle_func",
    "__mb_cur_max",
    "__p__fileinfo",
    "_lrotl",
    "public: __thiscall exception::exception(void)",
    "_adj_fpatan",
    "_longjmpex",
    "__setusermatherr",
    "_mbctokata",
    "_ui64tow",
    "_flushall",
    "_putws",
    "_execl",
    "_mbscoll",
    "_execvp",
    "_seterrormode",
    "_inp",
    "_ismbbkana",
    "_mbctype",
    "fgetwc",
    "_Gettnames",
    "__p__iob",
    "_flsbuf",
    "_strtoui64",
    "isxdigit",
    "difftime",
    "__CxxCallUnwindDtor",
    "_i64tow",
    "fscanf",
    "_ismbslead",
    "scanf",
    "mbstowcs",
    "int (__cdecl*__cdecl _set_new_handler(int (__cdecl*)(unsigned int)))(unsigned int)",
    "_cgets",
    "_wspawnv",
    "_mbsbtype",
    "_popen",
    "_wchdir",
    "islower",
    "_wexecve",
    "_snscanf",
    "_chdir",
    "public: __thiscall __non_rtti_object::__non_rtti_object(char const *)",
    "_commode",
    "void __cdecl terminate(void)",
    "_getsystime",
    "_aligned_offset_malloc",
    "_aligned_realloc",
    "_strncoll",
    "wcspbrk",
    "_getdrive",
    "_logb",
    "__badioinfo",
    "_strnset",
    "_wspawnlpe",
    "_mbslen",
    "log",
    "_wspawnl",
    "_execv",
    "_ftime",
    "_wpopen",
    "_wfopen",
    "is_wctype",
    "__p__daylight",
    "_lseek",
    "_wrename",
    "_cputws",
    "void (__cdecl*__cdecl _set_se_translator(void (__cdecl*)(unsigned int,struct _EXCEPTION_POINTERS *)))(unsigned int,struct _EXCEPTION_POINTERS *)",
    "_CIatan2",
    "_outp",
    "_ismbbalpha",
    "_toupper",
    "ftell",
    "public: __thiscall bad_cast::bad_cast(class bad_cast const &)",
    "__unDName",
    "_wstrtime",
    "_CItanh",
    "_itoa",
    "_wremove",
    "_mbsncpy",
    "public: char const * __thiscall type_info::name(void)const",
    "_strcmpi",
    "_mbctohira",
    "___setlc_active_func",
    "_XcptFilter",
    "_sys_errlist",
    "_dstbias",
    "fputs",
    "_adj_fdiv_m32i",
    "_msize",
    "_localtime64",
    "_mbsnextc",
    "iswxdigit",
    "_adj_fdivr_m16i",
    "_Getmonths",
    "fread",
    "public: __thiscall exception::exception(char const * const &)",
    "strlen",
    "_adj_fprem1",
    "_findfirst64",
    "_CIpow",
    "getenv",
    "_fmode",
    "__CxxExceptionFilter",
    "fflush",
    "_waccess",
    "_ismbbkprint",
    "_spawnv",
    "abs",
    "strerror",
    "_kbhit",
    "_yn",
    "_mbsnccnt",
    "const bad_cast::`vftable'",
    "signal",
    "_EH_prolog",
    "_wenviron",
    "_vsnprintf",
    "__RTCastToVoid",
    "_CIasin",
    "__p__dstbias",
    "_getmaxstdio",
    "_wexecv",
    "_wunlink",
    "__RTtypeid",
    "_j1",
    "getwchar",
    "atan2",
    "_searchenv",
    "_adj_fdiv_r",
    "_fputwchar",
    "wcsspn",
    "swprintf",
    "__wgetmainargs",
    "__CxxFrameHandler",
    "public: __thiscall bad_typeid::bad_typeid(class bad_typeid const &)",
    "_wsopen",
    "perror",
    "__p__fmode",
    "_mbsset",
    "_open",
    "abort",
    "_fileinfo",
    "wcscpy",
    "__p__commode",
    "tan",
    "_winver",
    "_execvpe",
    "_wopen",
    "_wrmdir",
    "__pioinfo",
    "strcspn",
    "__fpecode",
    "_lsearch",
    "_mbsicoll",
    "_wtempnam",
    "__p__pgmptr",
    "__p___mb_cur_max",
    "_mbctoupper",
    "_strupr",
    "_ultow",
    "vprintf",
    "_chgsign",
    "_timezone",
    "strcat",
    "__pxcptinfoptrs",
    "isalnum",
    "_wfindfirst64",
    "_stricoll",
    "wcschr",
    "_cputs",
    "_wgetdcwd",
    "__winitenv",
    "wcsftime",
    "public: void __thiscall bad_typeid::`default constructor closure'(void)",
    "_getdcwd",
    "_isnan",
    "sinh",
    "_vsnwprintf",
    "_wcsset",
    "sin",
    "_wtmpnam",
    "strtoul",
    "__p__wcmdln",
    "_adj_fdivr_m32",
    "atexit",
    "_wtol",
    "wcstombs",
    "_j0",
    "_putenv",
    "fputc",
    "_fcvt",
    "malloc",
    "iswdigit",
    "_isctype",
    "_ismbcupper",
    "const __non_rtti_object::`vftable'",
    "int __cdecl _set_new_mode(int)",
    "_adj_fdiv_m32",
    "__DestructExceptionObject",
    "_scwprintf",
    "_vscwprintf",
    "_wctime64",
    "strxfrm",
    "_set_sbh_threshold",
    "_amsg_exit",
    "_fgetchar",
    "_loaddll",
    "_snprintf",
    "system",
    "wscanf",
    "_hypot",
    "_mbsnbicoll",
    "_resetstkoflw",
    "_wcreat",
    "_wcsicmp",
    "_unlink",
    "void (__cdecl*__cdecl set_terminate(void (__cdecl*)(void)))(void)",
    "wcsncpy",
    "_rmdir",
    "_clearfp",
    "_lrotr",
    "_wtof",
    "_ungetwch",
    "_CIcos",
    "void __cdecl operator delete[](void *)",
    "__crtGetLocaleInfoW",
    "ferror",
    "public: __thiscall bad_cast::bad_cast(char const * const &)",
    "mbtowc",
    "_ismbchira",
    "_adj_fptan",
    "_statusfp",
    "_callnewh",
    "_umask",
    "_tzset",
    "_set_error_mode",
    "_wfindfirsti64",
    "public: virtual __thiscall type_info::~type_info(void)",
    "bsearch",
    "_assert",
    "_CIsqrt",
    "_errno",
    "cos",
    "void * __cdecl operator new(unsigned int)",
    "__p___winitenv",
    "_spawnlp",
    "_wstat",
    "_futime",
    "wcsncmp",
    "_sopen",
    "_adj_fdiv_m64",
    "_mbstrlen",
    "$I10_OUTPUT",
    "__lconv_init",
    "_ismbbgraph",
    "wcstod",
    "__isascii",
    "_wctime",
    "__RTDynamicCast",
    "_strnicmp",
    "clock",
    "_rotl",
    "_get_heap_handle",
    "mktime",
    "_CIfmod",
    "public: int __thiscall type_info::operator!=(class type_info const &)const",
    "public: virtual void * __thiscall exception::`scalar deleting destructor'(unsigned int)",
    "_osplatform",
    "putwc",
    "_endthread",
    "_osver",
    "_chmod",
    "public: void __thiscall bad_cast::`default constructor closure'(void)",
    "_pclose",
    "_ismbbtrail",
    "gmtime",
    "_wmakepath",
    "__crtLCMapStringW",
    "public: virtual char const * __thiscall exception::what(void)const",
    "_CIcosh",
    "wctomb",
    "mblen",
    "_getche",
    "_adj_fprem",
    "_setsystime",
    "_wcsncoll",
    "public: virtual void * __thiscall bad_typeid::`scalar deleting destructor'(unsigned int)",
    "setlocale",
    "_wperror",
    "localeconv",
    "void (__cdecl*__cdecl set_unexpected(void (__cdecl*)(void)))(void)",
    "_mbscspn",
    "_getdiskfree",
    "___mb_cur_max_func",
    "void (__cdecl*__cdecl set_new_handler(void (__cdecl*)(void)))(void)",
    "_putch",
    "_beep",
    "_splitpath",
    "__p__mbctype",
    "_endthreadex",
    "vsprintf",
    "cosh",
    "atoi",
    "__initenv",
    "_ismbbkalnum",
    "_utime",
    "_wtoi",
    "_swab",
    "_mbschr",
    "exp",
    "_getwch",
    "ungetwc",
    "_c_exit",
    "__p__wpgmptr",
    "_wmktemp",
    "_mbsnicoll",
    "_pgmptr",
    "_wsearchenv",
    "_wsetlocale",
    "_mbscpy",
    "_mbcjmstojis",
    "_seh_longjmp_unwind",
    "fclose",
    "__p__amblksiz",
    "_getmbcp",
    "_cexit",
    "public: virtual void * __thiscall bad_typeid::`vector deleting destructor'(unsigned int)",
    "_ismbcprint",
    "strtol",
    "_winminor",
    "isgraph",
    "_vscprintf",
    "_mbsrev",
    "_wsplitpath",
    "_ungetch",
    "_mktime64",
    "strcmp",
    "_setmaxstdio",
    "_set_SSE2_enable",
    "fopen",
    "iswctype",
    "__CxxRegisterExceptionObject",
    "_execlp",
    "fputwc",
    "strpbrk",
    "_wstati64",
    "_wutime",
    "_CItan",
    "__unDNameEx",
    "public: __thiscall exception::exception(class exception const &)",
    "_mbstok",
    "wcsncat",
    "__unguarded_readlc_active",
    "_except_handler2",
    "void * __cdecl operator new[](unsigned int)",
    "_tolower",
    "memmove",
    "__CxxUnregisterExceptionObject",
    "_mbsncoll",
    "fputws",
    "realloc",
    "_CIlog10",
    "_write",
    "__crtLCMapStringA",
    "getchar",
    "pow",
    "_wcstoui64",
    "wcscat",
    "__wcserror",
    "_cgetws",
    "_daylight",
    "__uncaught_exception",
    "_fcloseall",
    "_onexit",
    "putwchar",
    "rand",
    "_inpd",
    "_spawnl",
    "_spawnlpe",
    "_mbsupr",
    "__CxxQueryExceptionSize",
    "wcscspn",
    "__p__pwctype",
    "_wcsnicmp",
    "ldiv",
    "fwrite",
    "_wspawnlp",
    "_ismbcl1",
    "_ismbcalnum",
    "_CIsin",
    "time",
    "srand",
    "_strlwr",
    "__CxxLongjmpUnwind",
    "strchr",
    "_ismbcspace",
    "_ismbclegal",
    "_mbsrchr",
    "fabs",
    "_wfreopen",
    "_creat",
    "_CxxThrowException",
    "_heapchk",
    "_read",
    "_setmode",
    "strcpy",
    "_wfdopen",
    "__threadhandle",
    "public: class exception & __thiscall exception::operator=(class exception const &)",
    "_wcsrev",
    "_wasctime",
    "public: virtual __thiscall exception::~exception(void)",
    "wprintf",
    "_lock",
    "const exception::`vftable'",
    "__p__winver",
    "_wspawnve",
    "_heapused",
    "iswalnum",
    "_wtoi64",
    "_wcmdln",
    "private: __thiscall bad_cast::bad_cast(char const * const *)",
    "_lfind",
    "_wcsnicoll",
    "vwprintf",
    "_wspawnvp",
    "_mbslwr",
    "_strnicoll",
    "_stricmp",
    "public: int __thiscall type_info::before(class type_info const &)const",
    "_strrev",
    "iswascii",
    "_execle",
    "iscntrl",
    "public: class bad_cast & __thiscall bad_cast::operator=(class bad_cast const &)",
    "_gcvt",
    "rewind",
    "_close",
    "_unlock",
    "_strdup",
    "_control87",
    "wcstol",
    "_cabs",
    "_outpw",
    "_findnext64",
    "_fputchar",
    "_getw",
    "_mbspbrk",
    "iswalpha",
    "remove",
    "_strdate",
    "_findfirst",
    "vfwprintf",
    "_ismbcl0",
    "_pipe",
    "_wexecvp",
    "_mbsstr",
    "_cwscanf",
    "__CxxDetectRethrow",
    "__crtGetStringTypeW",
    "_mbsnbcpy",
    "_memicmp",
    "_heapmin",
    "_CIacos",
    "_stat",
    "_wutime64",
    "_mbbtype",
    "_wstat64",
    "__set_app_type",
    "_ismbbpunct",
    "_ismbbkpunct",
    "feof",
    "tanh",
    "_fullpath",
    "__p__pctype",
    "_findfirsti64",
    "div",
    "public: virtual void * __thiscall bad_cast::`scalar deleting destructor'(unsigned int)",
    "_ctime64",
    "_inpw",
    "public: class bad_typeid & __thiscall bad_typeid::operator=(class bad_typeid const &)",
    "public: __thiscall __non_rtti_object::__non_rtti_object(class __non_rtti_object const &)",
    "_spawnvp",
    "_wspawnvpe",
    "gets",
    "_ltoa",
    "swscanf",
    "_tempnam",
    "__iob_func",
    "_tzname",
    "_getcwd",
    "_spawnvpe",
    "_wfindnext",
    "_getpid",
    "_cprintf",
    "_ismbckata",
    "_setmbcp",
    "public: virtual __thiscall bad_cast::~bad_cast(void)",
    "ctime",
    "__toascii",
    "ldexp",
    "_getch",
    "freopen",
    "_ismbcgraph",
    "strtod",
    "atan",
    "_utime64",
    "_findclose",
    "_snwscanf",
    "_mbsncat",
    "strcoll",
    "wcsrchr",
    "_get_osfhandle",
    "_atoi64",
    "wcscoll",
    "_fstati64",
    "_fpclass",
    "floor",
    "__p___argc",
    "_fileno",
    "_aligned_offset_realloc",
    "_tell",
    "_setjmp",
    "_mbsnbcmp",
    "_mkdir",
    "fsetpos",
    "_ismbbalnum",
    "_wgetenv",
    "__iscsym",
    "_mbsnbcat",
    "isdigit",
    "iswspace",
    "_adj_fdivr_m64",
    "_adjust_fdiv",
    "__p__winmajor",
    "_CIatan",
    "_commit",
    "_ui64toa",
    "_access",
    "_ftol",
    "_gmtime64",
    "_heapset",
    "iswupper",
    "isalpha",
    "strftime",
    "_adj_fdivr_m32i",
    "fgetc",
    "_ismbcalpha",
    "iswpunct",
    "strtok",
    "iswcntrl",
    "ungetc",
    "_unloaddll",
    "memcpy",
    "_cwprintf",
    "public: virtual __thiscall __non_rtti_object::~__non_rtti_object(void)",
    "putc",
    "getc",
    "_ultoa",
    "wcstok",
    "_ismbclower",
    "public: __thiscall bad_cast::bad_cast(char const *)",
    "_sleep",
    "_lseeki64",
    "_wcsdup",
    "_ismbcpunct",
    "_rotr",
    "_itow",
    "sqrt",
    "_wcslwr",
    "_filelengthi64",
    "_strtoi64",
    "_acmdln",
    "_execlpe",
    "void __cdecl unexpected(void)",
    "_environ",
    "_mktemp",
    "_wstrdate",
    "_CIsinh",
    "_mbsnbcnt",
    "fgetws",
    "_wcserror",
    "_filbuf",
    "_initterm",
    "_ftime64",
    "longjmp",
    "__p__timezone",
    "_fgetwchar",
    "__argv",
    "_wfsopen",
    "puts",
    "_wcsicoll",
    "clearerr",
    "__lc_codepage",
    "_getwche",
    "strrchr",
    "_iob",
    "_mbsninc",
    "_wpgmptr",
    "wcstoul",
    "_wexeclp",
    "_fdopen",
    "_mbsicmp",
    "_mbsdup",
    "_safe_fdivr",
    "_strtime",
    "_safe_fprem1",
    "_mbbtombc",
    "isupper",
    "public: virtual void * __thiscall __non_rtti_object::`vector deleting destructor'(unsigned int)",
    "_global_unwind2",
    "_spawnle",
    "_getws",
    "_ctype",
    "_aexit_rtn",
    "_futime64",
    "_abnormal_termination",
    "atol",
    "__p__environ",
    "_fpreset",
    "_spawnve",
    "_y0",
    "_mbclen",
    "__p__winminor",
    "_wfindnexti64",
    "_y1",
    "_ismbstrail",
    "memcmp",
    "_mbsnbset",
    "_memccpy",
    "public: int __thiscall type_info::operator==(class type_info const &)const",
    "__crtCompareStringW",
    "_mbsnset",
    "_scprintf",
    "iswlower",
    "_controlfp",
    "localtime",
    "_mbscat",
    "iswgraph",
    "_rmtmp",
    "_mbsspn",
    "_atodbl",
    "_chsize",
    "_mbsinc",
    "_getdrives",
    "free",
    "_fstat",
    "_isatty",
    "_aligned_free",
    "_snwprintf",
    "_fsopen",
    "wcscmp",
    "_Strftime",
    "strstr",
    "_ltow",
    "_ismbbprint",
    "_atoldbl",
    "ispunct",
    "_wexecle",
    "asin",
    "_beginthreadex",
    "_wspawnle",
    "_scalb",
    "sprintf",
    "strspn",
    "_i64toa",
    "_mbcasemap",
    "_ecvt",
    "__lc_handle",
    "__p__acmdln",
    "__getmainargs",
    "_wgetcwd",
    "_except_handler3",
    "_heapwalk",
    "_mbsspnp",
    "_dup2",
    "_wexecvpe",
    "_wsystem",
    "___lc_codepage_func",
    "__lc_collate_cp",
    "_wcsupr",
    "modf",
    "_wcstoi64",
    "ceil",
    "const bad_typeid::`vftable'",
    "__iscsymf",
    "_mbsncmp",
    "_strerror",
    "_findnexti64",
    "frexp",
    "_wputenv",
    "strncmp",
    "int (__cdecl*__cdecl _query_new_handler(void))(unsigned int)",
    "_mbccpy",
    "int __cdecl _query_new_mode(void)",
    "wcsstr",
    "public: virtual void * __thiscall bad_cast::`vector deleting destructor'(unsigned int)",
    "_jn",
    "_mbcjistojms",
    "_mbsnbicmp",
    "isleadbyte",
    "_mbscmp",
    "memchr",
    "_heapadd",
    "public: virtual void * __thiscall __non_rtti_object::`scalar deleting destructor'(unsigned int)",
    "_mbsdec",
    "calloc",
    "fgets",
    "wcslen",
    "setbuf",
    "log10",
    "public: __thiscall bad_typeid::bad_typeid(char const *)",
    "_local_unwind2",
    "strncat",
    "_ismbcdigit",
    "_CIlog",
    "_get_sbh_threshold",
    "_mbsnbcoll",
    "public: virtual __thiscall bad_typeid::~bad_typeid(void)",
    "towupper",
    "__p__osver",
    "_chkesp",
    "labs",
    "_dup"
  ],
  "msvcrt20.dll": [
    "_tcschr",
    "__dllonexit",
    "wcsxfrm",
    "iswprint",
    "public: int __thiscall ios::width(void)const",
    "_ismbblead",
    "exit",
    "fwscanf",
    "__p___wargv",
    "__p__wenviron",
    "_safe_fprem",
    "public: class ostream & __thiscall ostream_withassign::operator=(class ostream const &)",
    "__doserrno",
    "fmod",
    "_exit",
    "getwc",
    "isprint",
    "_mbsnicmp",
    "_mtlock",
    "_safe_fdiv",
    "public: __thiscall ofstream::ofstream(int)",
    "_wfullpath",
    "_tcsnccpy",
    "strncpy",
    "toupper",
    "_getdllprocaddr",
    "__p___initenv",
    "public: class streambuf * __thiscall fstream::setbuf(char *,int)",
    "_wchmod",
    "atof",
    "fseek",
    "tmpnam",
    "__p__tzname",
    "public: __thiscall Iostream_init::Iostream_init(class ios &,int)",
    "public: class ostream & __thiscall ostream::operator<<(long double)",
    "__STRINGTOLD",
    "public: virtual __thiscall ofstream::~ofstream(void)",
    "_ismbcl2",
    "public: class istream & __thiscall istream::get(signed char &)",
    "public: __thiscall istrstream::istrstream(char *)",
    "sscanf",
    "_tcsinc",
    "rename",
    "public: class ostream & __thiscall ostream::operator<<(long)",
    "_setjmp3",
    "public: virtual void * __thiscall stdiostream::`scalar deleting destructor'(unsigned int)",
    "_wfindfirst",
    "_chdrive",
    "__wargv",
    "_ismbcsymbol",
    "void __cdecl operator delete(void *)",
    "setvbuf",
    "public: void __thiscall streambuf::unlock(void)",
    "public: __thiscall streambuf::streambuf(class streambuf const &)",
    "public: virtual void * __thiscall filebuf::`vector deleting destructor'(unsigned int)",
    "const istream::`vbtable'",
    "raise",
    "_putw",
    "_wexecl",
    "__threadid",
    "vfprintf",
    "_sys_nerr",
    "public: virtual void * __thiscall strstreambuf::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall ostream::`vector deleting destructor'(unsigned int)",
    "const ostrstream::`vftable'",
    "qsort",
    "_nextafter",
    "printf",
    "vswprintf",
    "__argc",
    "_mbctolower",
    "_purecall",
    "_fpieee_flt",
    "memset",
    "fgetpos",
    "_finite",
    "_winmajor",
    "public: __thiscall ofstream::ofstream(int,char *,int)",
    "public: int __thiscall ios::good(void)const",
    "_cwait",
    "public: virtual void * __thiscall strstream::`vector deleting destructor'(unsigned int)",
    "_wmkdir",
    "_HUGE",
    "_findnext",
    "acos",
    "public: void __thiscall ofstream::close(void)",
    "tolower",
    "_beginthread",
    "class ostream & __cdecl flush(class ostream &)",
    "protected: int __thiscall streambuf::allocate(void)",
    "public: __thiscall fstream::fstream(class fstream const &)",
    "_eof",
    "protected: class ios & __thiscall ios::operator=(class ios const &)",
    "_mbctombb",
    "public: virtual void * __thiscall istream_withassign::`scalar deleting destructor'(unsigned int)",
    "public: virtual class streambuf * __thiscall filebuf::setbuf(char *,int)",
    "_expand",
    "protected: struct _RTL_CRITICAL_SECTION * __thiscall streambuf::lockptr(void)",
    "fwprintf",
    "_CIexp",
    "public: virtual void * __thiscall ostream_withassign::`vector deleting destructor'(unsigned int)",
    "public: virtual __thiscall strstream::~strstream(void)",
    "public: void __cdecl ios::unlockbuf(void)",
    "_copysign",
    "_tcstok",
    "_tcsnccmp",
    "tmpfile",
    "public: void __thiscall fstream::close(void)",
    "private: int __thiscall istream::getdouble(char *,int)",
    "public: virtual class streambuf * __thiscall strstreambuf::setbuf(char *,int)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned int)",
    "public: int __thiscall streambuf::out_waiting(void)const",
    "protected: void __thiscall streambuf::setg(char *,char *,char *)",
    "public: long __thiscall ios::flags(void)const",
    "fprintf",
    "towlower",
    "_cscanf",
    "putchar",
    "_tcsncmp",
    "const ios::`vftable'",
    "_strset",
    "_wexeclpe",
    "public: __thiscall stdiostream::stdiostream(struct _iobuf *)",
    "_execve",
    "_filelength",
    "asctime",
    "isspace",
    "__p___argv",
    "_open_osfhandle",
    "_locking",
    "_pctype",
    "public: void __thiscall ifstream::close(void)",
    "public: void __thiscall streambuf::lock(void)",
    "_adj_fdiv_m16i",
    "_pwctype",
    "_wcsnset",
    "const streambuf::`vftable'",
    "public: void __thiscall fstream::attach(int)",
    "_makepath",
    "public: static int const filebuf::openprot",
    "__mb_cur_max",
    "_lrotl",
    "_adj_fpatan",
    "public: int __thiscall streambuf::snextc(void)",
    "_longjmpex",
    "_tcsnset",
    "public: __thiscall iostream::iostream(class streambuf *)",
    "public: class istream & __thiscall istream::operator>>(long double &)",
    "public: virtual long __thiscall streambuf::seekpos(long,int)",
    "public: void __thiscall ios::delbuf(int)",
    "_mbctokata",
    "_tcsstr",
    "_flushall",
    "_putws",
    "_execl",
    "_mbscoll",
    "public: int __thiscall ios::delbuf(void)const",
    "_execvp",
    "_seterrormode",
    "_tcsset",
    "_ismbbkana",
    "_mbctype",
    "fgetwc",
    "const iostream::`vftable'",
    "public: virtual void * __thiscall ostream::`scalar deleting destructor'(unsigned int)",
    "__p__iob",
    "_flsbuf",
    "public: long __thiscall ios::setf(long,long)",
    "public: int __thiscall ifstream::setmode(int)",
    "public: class streambuf * __thiscall ios::rdbuf(void)const",
    "isxdigit",
    "_tcsnicmp",
    "public: int __thiscall ios::bad(void)const",
    "difftime",
    "public: virtual void * __thiscall istream::`vector deleting destructor'(unsigned int)",
    "fscanf",
    "public: virtual int __thiscall filebuf::underflow(void)",
    "_ismbslead",
    "public: int __thiscall streambuf::sbumpc(void)",
    "scanf",
    "mbstowcs",
    "int (__cdecl*__cdecl _set_new_handler(int (__cdecl*)(unsigned int)))(unsigned int)",
    "_cgets",
    "_wspawnv",
    "_mbsbtype",
    "_popen",
    "_tcsncset",
    "public: __thiscall ofstream::ofstream(char const *,int,int)",
    "_wchdir",
    "islower",
    "public: virtual int __thiscall filebuf::sync(void)",
    "public: virtual void * __thiscall istream_withassign::`vector deleting destructor'(unsigned int)",
    "_wexecve",
    "_chdir",
    "public: virtual int __thiscall strstreambuf::sync(void)",
    "_commode",
    "protected: char * __thiscall streambuf::base(void)const",
    "void __cdecl terminate(void)",
    "_getsystime",
    "_strncoll",
    "public: class istream_withassign & __thiscall istream_withassign::operator=(class istream_withassign const &)",
    "wcspbrk",
    "private: static struct _RTL_CRITICAL_SECTION ios::x_lockc",
    "_getdrive",
    "_logb",
    "_strnset",
    "public: int __thiscall filebuf::is_open(void)const",
    "_wspawnlpe",
    "_mbslen",
    "public: static void __cdecl ios::sync_with_stdio(void)",
    "log",
    "protected: __thiscall iostream::iostream(class iostream const &)",
    "public: int __thiscall streambuf::sputbackc(char)",
    "_wspawnl",
    "const ofstream::`vftable'",
    "const ostream_withassign::`vbtable'",
    "_execv",
    "public: class ostream & __thiscall ostream::write(char const *,int)",
    "class ostream & __cdecl ends(class ostream &)",
    "public: __thiscall istrstream::istrstream(class istrstream const &)",
    "_ftime",
    "_wpopen",
    "public: void __thiscall ifstream::open(char const *,int,int)",
    "protected: __thiscall ios::ios(class ios const &)",
    "public: int __thiscall istream::gcount(void)const",
    "_wfopen",
    "is_wctype",
    "public: int __thiscall istream::ipfx(int)",
    "public: class istream & __thiscall istream::seekg(long)",
    "public: virtual void * __thiscall ofstream::`scalar deleting destructor'(unsigned int)",
    "public: virtual int __thiscall strstreambuf::underflow(void)",
    "__p__daylight",
    "_lseek",
    "public: class ostrstream & __thiscall ostrstream::operator=(class ostrstream const &)",
    "_wrename",
    "public: virtual void * __thiscall istream::`scalar deleting destructor'(unsigned int)",
    "public: void __thiscall ifstream::attach(int)",
    "void (__cdecl*__cdecl _set_se_translator(void (__cdecl*)(unsigned int,struct _EXCEPTION_POINTERS *)))(unsigned int,struct _EXCEPTION_POINTERS *)",
    "_CIatan2",
    "_ismbbalpha",
    "_toupper",
    "ftell",
    "public: static int const filebuf::text",
    "public: int __thiscall ofstream::setmode(int)",
    "_wstrtime",
    "public: int __thiscall streambuf::sgetn(char *,int)",
    "public: void __cdecl ios::lockbuf(void)",
    "_CItanh",
    "_itoa",
    "_wremove",
    "_mbsncpy",
    "_strcmpi",
    "_tcsnccat",
    "public: class ostream & __thiscall ostream_withassign::operator=(class streambuf *)",
    "_mbctohira",
    "_XcptFilter",
    "public: __thiscall istream_withassign::istream_withassign(class streambuf *)",
    "_sys_errlist",
    "fputs",
    "public: virtual void * __thiscall ios::`scalar deleting destructor'(unsigned int)",
    "_adj_fdiv_m32i",
    "_msize",
    "const ostream::`vftable'",
    "public: long __thiscall ios::setf(long)",
    "_mbsnextc",
    "iswxdigit",
    "public: class istream & __thiscall istream_withassign::operator=(class streambuf *)",
    "public: virtual __thiscall filebuf::~filebuf(void)",
    "_adj_fdivr_m16i",
    "public: virtual __thiscall strstreambuf::~strstreambuf(void)",
    "fread",
    "strlen",
    "public: class istream & __thiscall istream::operator>>(signed char &)",
    "_adj_fprem1",
    "public: int __thiscall streambuf::sputc(int)",
    "_CIpow",
    "getenv",
    "_fmode",
    "strerror",
    "_waccess",
    "_ismbbkprint",
    "fflush",
    "_spawnv",
    "abs",
    "public: class ostream & __thiscall ostream::operator<<(class ostream & (__cdecl*)(class ostream &))",
    "_kbhit",
    "_yn",
    "_mbsnccnt",
    "signal",
    "public: virtual void * __thiscall stdiobuf::`scalar deleting destructor'(unsigned int)",
    "_wenviron",
    "protected: void __thiscall streambuf::unbuffered(int)",
    "_vsnprintf",
    "public: virtual void * __thiscall ifstream::`vector deleting destructor'(unsigned int)",
    "public: __thiscall Iostream_init::~Iostream_init(void)",
    "_CIasin",
    "_wexecv",
    "_wunlink",
    "_j1",
    "protected: class iostream & __thiscall iostream::operator=(class iostream &)",
    "getwchar",
    "atan2",
    "public: class istream & __thiscall istream::get(class streambuf &,char)",
    "_searchenv",
    "public: class istream & __thiscall istream::getline(char *,int,char)",
    "_adj_fdiv_r",
    "_fputwchar",
    "wcsspn",
    "public: class ostream & __thiscall ostream::put(unsigned char)",
    "swprintf",
    "public: char * __thiscall ostrstream::str(void)",
    "__wgetmainargs",
    "__CxxFrameHandler",
    "_wsopen",
    "perror",
    "public: __thiscall fstream::fstream(char const *,int,int)",
    "public: virtual void * __thiscall streambuf::`vector deleting destructor'(unsigned int)",
    "__p__fmode",
    "_mbsset",
    "_open",
    "public: int __thiscall streambuf::in_avail(void)const",
    "abort",
    "_fileinfo",
    "public: virtual void * __thiscall ifstream::`scalar deleting destructor'(unsigned int)",
    "__p__commode",
    "public: void __thiscall ofstream::`vbase destructor'(void)",
    "_winver",
    "tan",
    "wcscpy",
    "_execvpe",
    "_wopen",
    "_wrmdir",
    "strcspn",
    "__seh_longjmp_unwind@4",
    "public: __thiscall ostrstream::ostrstream(void)",
    "__fpecode",
    "_lsearch",
    "_mbsicoll",
    "_wtempnam",
    "__p__pgmptr",
    "__p___mb_cur_max",
    "_mbctoupper",
    "_strupr",
    "_ultow",
    "public: void * __thiscall Iostream_init::`scalar deleting destructor'(unsigned int)",
    "vprintf",
    "_chgsign",
    "protected: class iostream & __thiscall iostream::operator=(class streambuf *)",
    "_timezone",
    "protected: virtual int __thiscall strstreambuf::doallocate(void)",
    "public: class istream & __thiscall istream::operator>>(long &)",
    "public: long & __thiscall ios::iword(int)const",
    "public: virtual int __thiscall stdiobuf::underflow(void)",
    "strcat",
    "const strstreambuf::`vftable'",
    "__pxcptinfoptrs",
    "_tcscmp",
    "isalnum",
    "_matherr",
    "_stricoll",
    "public: __thiscall ostream_withassign::ostream_withassign(void)",
    "wcschr",
    "public: __thiscall strstream::strstream(void)",
    "public: void __thiscall streambuf::stossc(void)",
    "_cputs",
    "public: class filebuf & __thiscall filebuf::operator=(class filebuf const &)",
    "_wgetdcwd",
    "_tcscspn",
    "public: class ostream & __thiscall ostream::operator<<(int)",
    "__winitenv",
    "public: __thiscall stdiostream::stdiostream(class stdiostream const &)",
    "public: class ostream & __thiscall ostream::put(signed char)",
    "public: virtual void * __thiscall istrstream::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall strstream::`scalar deleting destructor'(unsigned int)",
    "wcsftime",
    "_getdcwd",
    "_isnan",
    "sinh",
    "public: __thiscall istream::istream(class streambuf *)",
    "_vsnwprintf",
    "_wcsset",
    "public: __thiscall ostrstream::ostrstream(char *,int,int)",
    "sin",
    "_wtmpnam",
    "strtoul",
    "__p__wcmdln",
    "_adj_fdivr_m32",
    "public: void __thiscall streambuf::dbp(void)",
    "public: void __thiscall iostream::`vbase destructor'(void)",
    "atexit",
    "_wtol",
    "wcstombs",
    "_j0",
    "_putenv",
    "fputc",
    "const fstream::`vbtable'{for `ostream'}",
    "public: class streambuf & __thiscall streambuf::operator=(class streambuf const &)",
    "public: static int const filebuf::sh_read",
    "protected: __thiscall istream::istream(class istream const &)",
    "public: class ifstream & __thiscall ifstream::operator=(class ifstream const &)",
    "const ostrstream::`vbtable'",
    "_fcvt",
    "const ostream_withassign::`vftable'",
    "iswdigit",
    "malloc",
    "_isctype",
    "_ismbcupper",
    "public: static long const ios::adjustfield",
    "int __cdecl _set_new_mode(int)",
    "_adj_fdiv_m32",
    "const istrstream::`vbtable'",
    "strxfrm",
    "public: class filebuf * __thiscall filebuf::close(void)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned long)",
    "public: class stdiostream & __thiscall stdiostream::operator=(class stdiostream &)",
    "_amsg_exit",
    "_fgetchar",
    "_loaddll",
    "_snprintf",
    "protected: char * __thiscall streambuf::ebuf(void)const",
    "public: class istream & __thiscall istream::get(char *,int,char)",
    "public: int __thiscall streambuf::sgetc(void)",
    "system",
    "_hypot",
    "_mbsnbicoll",
    "wscanf",
    "_wcreat",
    "_wcsicmp",
    "_unlink",
    "void (__cdecl*__cdecl set_terminate(void (__cdecl*)(void)))(void)",
    "wcsncpy",
    "private: static long * ios::x_statebuf",
    "protected: class ostream & __thiscall ostream::operator=(class ostream const &)",
    "_rmdir",
    "_clearfp",
    "public: class ostream & __thiscall ostream::operator<<(class ios & (__cdecl*)(class ios &))",
    "_lrotr",
    "_CIcos",
    "public: __thiscall strstreambuf::strstreambuf(int)",
    "public: int __thiscall stdiobuf::setrwbuf(int,int)",
    "ferror",
    "mbtowc",
    "protected: static void __cdecl ios::unlockc(void)",
    "public: __thiscall ios::ios(class streambuf *)",
    "_ismbchira",
    "_adj_fptan",
    "_statusfp",
    "_umask",
    "_tcsclen",
    "_tzset",
    "public: class ostream & __thiscall ostream::operator<<(signed char const *)",
    "public: int __thiscall filebuf::setmode(int)",
    "public: class ostream * __thiscall ios::tie(class ostream *)",
    "public: void __thiscall ostrstream::`vbase destructor'(void)",
    "bsearch",
    "_assert",
    "_CIsqrt",
    "_errno",
    "cos",
    "public: virtual long __thiscall streambuf::seekoff(long,enum ios::seek_dir,int)",
    "__p___winitenv",
    "void * __cdecl operator new(unsigned int)",
    "_spawnlp",
    "_wstat",
    "_futime",
    "wcsncmp",
    "_sopen",
    "_adj_fdiv_m64",
    "public: void __cdecl ios::setlock(void)",
    "_tcsicmp",
    "protected: char * __thiscall streambuf::pptr(void)const",
    "_mbstrlen",
    "$I10_OUTPUT",
    "__lconv_init",
    "_ismbbgraph",
    "protected: __thiscall iostream::iostream(void)",
    "wcstod",
    "__isascii",
    "_wctime",
    "public: virtual __thiscall ios::~ios(void)",
    "_strnicmp",
    "clock",
    "_rotl",
    "mktime",
    "public: __thiscall fstream::fstream(int,char *,int)",
    "_CIfmod",
    "putwc",
    "_endthread",
    "_osver",
    "_chmod",
    "public: int __thiscall ios::fail(void)const",
    "_pclose",
    "_ismbbtrail",
    "gmtime",
    "const stdiobuf::`vftable'",
    "_wmakepath",
    "public: char * __thiscall strstream::str(void)",
    "public: virtual void * __thiscall iostream::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall ostrstream::`vector deleting destructor'(unsigned int)",
    "_CIcosh",
    "wctomb",
    "mblen",
    "public: __thiscall ifstream::ifstream(char const *,int,int)",
    "_getche",
    "_adj_fprem",
    "_setsystime",
    "_wcsncoll",
    "setlocale",
    "_wperror",
    "localeconv",
    "void (__cdecl*__cdecl set_unexpected(void (__cdecl*)(void)))(void)",
    "public: class istream & __thiscall istream::operator>>(class ios & (__cdecl*)(class ios &))",
    "public: void __thiscall ofstream::attach(int)",
    "_mbscspn",
    "_getdiskfree",
    "public: virtual __thiscall ostrstream::~ostrstream(void)",
    "public: virtual void * __thiscall ostream_withassign::`scalar deleting destructor'(unsigned int)",
    "protected: void __thiscall streambuf::setb(char *,char *,int)",
    "protected: void __thiscall streambuf::setp(char *,char *)",
    "_putch",
    "protected: static void __cdecl ios::lockc(void)",
    "_beep",
    "_splitpath",
    "public: class strstream & __thiscall strstream::operator=(class strstream &)",
    "public: class istream & __thiscall istream::read(char *,int)",
    "__p__mbctype",
    "_endthreadex",
    "const iostream::`vbtable'{for `istream'}",
    "public: virtual __thiscall istrstream::~istrstream(void)",
    "vsprintf",
    "protected: class istream & __thiscall istream::operator=(class streambuf *)",
    "cosh",
    "public: __thiscall ofstream::ofstream(class ofstream const &)",
    "atoi",
    "__initenv",
    "_ismbbkalnum",
    "_utime",
    "_wtoi",
    "public: int __thiscall istream::peek(void)",
    "_swab",
    "_mbschr",
    "public: int __thiscall ofstream::is_open(void)const",
    "exp",
    "public: class ostream * __thiscall ios::tie(void)const",
    "ungetwc",
    "_c_exit",
    "__p__wpgmptr",
    "_wmktemp",
    "public: class ostream & __thiscall ostream::seekp(long)",
    "_mbsnicoll",
    "_pgmptr",
    "_wsearchenv",
    "public: class ostream & __thiscall ostream::write(unsigned char const *,int)",
    "protected: void __thiscall streambuf::gbump(int)",
    "_wsetlocale",
    "_mbscpy",
    "_mbcjmstojis",
    "fclose",
    "_tcsnbcnt",
    "__p__amblksiz",
    "_getmbcp",
    "_cexit",
    "_tcsnccnt",
    "protected: char * __thiscall streambuf::egptr(void)const",
    "_ismbcprint",
    "public: class istream & __thiscall istream::operator>>(float &)",
    "public: class ostream & __thiscall ostream::operator<<(char)",
    "strtol",
    "public: static int const filebuf::sh_none",
    "_winminor",
    "public: void __cdecl ios::lock(void)",
    "isgraph",
    "const ifstream::`vftable'",
    "_mbsrev",
    "public: void __thiscall stdiostream::`vbase destructor'(void)",
    "_wsplitpath",
    "_ungetch",
    "public: virtual void * __thiscall stdiostream::`vector deleting destructor'(unsigned int)",
    "public: int __thiscall fstream::setmode(int)",
    "strcmp",
    "public: virtual long __thiscall filebuf::seekoff(long,enum ios::seek_dir,int)",
    "public: class istream & __thiscall istream::operator>>(unsigned int &)",
    "public: class istream & __thiscall istream::ignore(int,int)",
    "public: int __thiscall istream::get(void)",
    "fopen",
    "iswctype",
    "_execlp",
    "fputwc",
    "strpbrk",
    "public: int __thiscall ios::operator!(void)const",
    "public: void __thiscall ostream::osfx(void)",
    "_wutime",
    "_CItan",
    "protected: __thiscall streambuf::streambuf(char *,int)",
    "public: __thiscall istrstream::istrstream(char *,int)",
    "public: class filebuf * __thiscall filebuf::attach(int)",
    "_mbstok",
    "public: long __thiscall ostream::tellp(void)",
    "public: class istream & __thiscall istream::get(unsigned char &)",
    "public: int __thiscall fstream::is_open(void)const",
    "_except_handler2",
    "wcsncat",
    "public: class stdiobuf & __thiscall stdiobuf::operator=(class stdiobuf const &)",
    "public: char __thiscall ios::fill(char)",
    "public: class fstream & __thiscall fstream::operator=(class fstream &)",
    "protected: struct _RTL_CRITICAL_SECTION * __thiscall ios::lockptr(void)",
    "const fstream::`vbtable'{for `istream'}",
    "public: virtual void * __thiscall filebuf::`scalar deleting destructor'(unsigned int)",
    "_tolower",
    "memmove",
    "_mbsncoll",
    "fputws",
    "public: class istream & __thiscall istream::putback(char)",
    "public: void __thiscall fstream::`vbase destructor'(void)",
    "_CIlog10",
    "_write",
    "public: void __thiscall fstream::open(char const *,int,int)",
    "private: int __thiscall istream::getint(char *)",
    "realloc",
    "getchar",
    "pow",
    "protected: char * __thiscall streambuf::epptr(void)const",
    "public: void __thiscall streambuf::clrlock(void)",
    "wcscat",
    "protected: int __thiscall streambuf::blen(void)const",
    "_daylight",
    "_fcloseall",
    "_onexit",
    "public: class istream & __thiscall istream::operator>>(char *)",
    "putwchar",
    "rand",
    "public: static int __cdecl ios::xalloc(void)",
    "_spawnlpe",
    "_spawnl",
    "_tcsrev",
    "public: class ostream & __thiscall ostream::operator<<(unsigned short)",
    "public: void __thiscall streambuf::setlock(void)",
    "_mbsupr",
    "wcscspn",
    "const stdiostream::`vftable'",
    "__p__pwctype",
    "public: virtual void * __thiscall streambuf::`scalar deleting destructor'(unsigned int)",
    "_wcsnicmp",
    "public: class ostream & __thiscall ostream::operator<<(unsigned char)",
    "public: virtual class streambuf * __thiscall streambuf::setbuf(char *,int)",
    "public: void __thiscall strstreambuf::freeze(int)",
    "_tcsspnp",
    "ldiv",
    "fwrite",
    "_wspawnlp",
    "public: class istream & __thiscall istream::operator>>(unsigned char &)",
    "_ismbcl1",
    "_ismbcalnum",
    "_CIsin",
    "const istrstream::`vftable'",
    "public: virtual void * __thiscall strstreambuf::`scalar deleting destructor'(unsigned int)",
    "srand",
    "_strlwr",
    "time",
    "public: class strstreambuf * __thiscall istrstream::rdbuf(void)const",
    "__CxxLongjmpUnwind",
    "strchr",
    "_ismbcspace",
    "const iostream::`vbtable'{for `ostream'}",
    "_ismbclegal",
    "public: virtual __thiscall ostream_withassign::~ostream_withassign(void)",
    "_mbsrchr",
    "fabs",
    "_wfreopen",
    "_creat",
    "_CxxThrowException",
    "const filebuf::`vftable'",
    "_heapchk",
    "public: virtual void * __thiscall ios::`vector deleting destructor'(unsigned int)",
    "_read",
    "public: class Iostream_init & __thiscall Iostream_init::operator=(class Iostream_init const &)",
    "_setmode",
    "_tcslwr",
    "public: class istream & __thiscall istream::operator>>(class streambuf *)",
    "public: void __thiscall istream_withassign::`vbase destructor'(void)",
    "strcpy",
    "_wfdopen",
    "__threadhandle",
    "public: static int const filebuf::binary",
    "_wcsrev",
    "_wasctime",
    "public: void __thiscall istream::`vbase destructor'(void)",
    "wprintf",
    "protected: class istream & __thiscall istream::operator=(class istream const &)",
    "public: class ostream & __thiscall ostream::seekp(long,enum ios::seek_dir)",
    "public: static long __cdecl ios::bitalloc(void)",
    "public: class ofstream & __thiscall ofstream::operator=(class ofstream const &)",
    "__p__winver",
    "_wspawnve",
    "public: __thiscall istream_withassign::istream_withassign(void)",
    "_heapused",
    "protected: __thiscall istream::istream(void)",
    "iswalnum",
    "_wcmdln",
    "public: __thiscall fstream::fstream(int)",
    "_lfind",
    "_wcsnicoll",
    "vwprintf",
    "_wspawnvp",
    "_mbslwr",
    "_strnicoll",
    "_stricmp",
    "public: class istream & __thiscall istream::operator>>(unsigned short &)",
    "_strrev",
    "public: class istream & __thiscall istream::getline(signed char *,int,char)",
    "public: void __cdecl ios::clrlock(void)",
    "iswascii",
    "_execle",
    "iscntrl",
    "public: class istream & __thiscall istream::read(unsigned char *,int)",
    "_gcvt",
    "_tcsncat",
    "public: virtual long __thiscall strstreambuf::seekoff(long,enum ios::seek_dir,int)",
    "public: class strstreambuf * __thiscall strstream::rdbuf(void)const",
    "rewind",
    "_mtunlock",
    "_close",
    "public: class istream & __thiscall istream::getline(unsigned char *,int,char)",
    "public: virtual __thiscall istream::~istream(void)",
    "public: __thiscall ostream::ostream(class streambuf *)",
    "_strdup",
    "_control87",
    "wcstol",
    "_cabs",
    "public: int __thiscall ios::eof(void)const",
    "_fputchar",
    "public: long __thiscall ios::flags(long)",
    "_getw",
    "public: int __thiscall fstream::fd(void)const",
    "_mbspbrk",
    "iswalpha",
    "remove",
    "const stdiostream::`vbtable'{for `ostream'}",
    "_strdate",
    "private: static int ios::sunk_with_stdio",
    "public: class istream & __thiscall istream::get(unsigned char *,int,char)",
    "public: __thiscall ios::operator void *(void)const",
    "_findfirst",
    "vfwprintf",
    "_ismbcl0",
    "_pipe",
    "_wexecvp",
    "class ios & __cdecl oct(class ios &)",
    "_mbsstr",
    "public: void __thiscall istream::eatwhite(void)",
    "const ifstream::`vbtable'",
    "_mbsnbcpy",
    "_stat",
    "public: __thiscall ifstream::ifstream(int)",
    "_memicmp",
    "_heapmin",
    "_CIacos",
    "_mbbtype",
    "public: __thiscall ifstream::ifstream(int,char *,int)",
    "public: class ostream & __thiscall ostream::operator<<(double)",
    "public: class ostream_withassign & __thiscall ostream_withassign::operator=(class ostream_withassign const &)",
    "_ismbbpunct",
    "_ismbbkpunct",
    "feof",
    "tanh",
    "_fullpath",
    "class ostream_withassign clog",
    "__p__pctype",
    "public: class ostream & __thiscall ostream::operator<<(short)",
    "div",
    "public: class istream & __thiscall istream::operator>>(class istream & (__cdecl*)(class istream &))",
    "public: __thiscall strstreambuf::strstreambuf(void * (__cdecl*)(long),void (__cdecl*)(void *))",
    "public: __thiscall filebuf::filebuf(void)",
    "public: class stdiobuf * __thiscall stdiostream::rdbuf(void)const",
    "public: class ostream & __thiscall ostream::write(signed char const *,int)",
    "public: char * __thiscall strstreambuf::str(void)",
    "public: class ostream & __thiscall ostream::operator<<(signed char)",
    "public: virtual int __thiscall filebuf::overflow(int)",
    "_spawnvp",
    "_wspawnvpe",
    "gets",
    "public: __thiscall ostrstream::ostrstream(class ostrstream const &)",
    "public: virtual __thiscall fstream::~fstream(void)",
    "_ltoa",
    "public: virtual int __thiscall streambuf::xsputn(char const *,int)",
    "swscanf",
    "_tempnam",
    "_tcsninc",
    "public: class istream & __thiscall istream::operator>>(double &)",
    "_tzname",
    "public: int __thiscall streambuf::sputn(char const *,int)",
    "_getcwd",
    "_spawnvpe",
    "_wfindnext",
    "_getpid",
    "_cprintf",
    "_ismbckata",
    "_setmbcp",
    "public: __thiscall ostream_withassign::ostream_withassign(class ostream_withassign const &)",
    "ctime",
    "public: class streambuf * __thiscall ofstream::setbuf(char *,int)",
    "public: static long const ios::basefield",
    "__toascii",
    "ldexp",
    "_getch",
    "public: void __thiscall istream::isfx(void)",
    "freopen",
    "public: __thiscall strstreambuf::strstreambuf(void)",
    "public: class istream & __thiscall istream::operator>>(char &)",
    "public: class istream & __thiscall istream_withassign::operator=(class istream const &)",
    "public: int __thiscall ostream::opfx(void)",
    "public: virtual __thiscall streambuf::~streambuf(void)",
    "_ismbcgraph",
    "strtod",
    "atan",
    "_findclose",
    "_mbsncat",
    "_tcsncpy",
    "strcoll",
    "protected: void __thiscall ios::init(class streambuf *)",
    "wcsrchr",
    "_get_osfhandle",
    "public: virtual long __thiscall stdiobuf::seekoff(long,enum ios::seek_dir,int)",
    "public: __thiscall istream_withassign::istream_withassign(class istream_withassign const &)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned char const *)",
    "public: class filebuf * __thiscall filebuf::open(char const *,int,int)",
    "const stdiostream::`vbtable'{for `istream'}",
    "wcscoll",
    "_fpclass",
    "floor",
    "public: static int const filebuf::sh_write",
    "__p___argc",
    "public: __thiscall filebuf::filebuf(int)",
    "_fileno",
    "public: void * & __thiscall ios::pword(int)const",
    "_tell",
    "_setjmp",
    "_mbsnbcmp",
    "_mkdir",
    "const strstream::`vbtable'{for `ostream'}",
    "_ismbbalnum",
    "_wgetenv",
    "__iscsym",
    "fsetpos",
    "public: int __thiscall strstream::pcount(void)const",
    "public: virtual int __thiscall streambuf::xsgetn(char *,int)",
    "_mbsnbcat",
    "isdigit",
    "iswspace",
    "_adj_fdivr_m64",
    "public: class filebuf * __thiscall ofstream::rdbuf(void)const",
    "_adjust_fdiv",
    "__p__winmajor",
    "_CIatan",
    "_commit",
    "public: class istream & __thiscall istream::operator>>(unsigned long &)",
    "public: int __thiscall ostrstream::pcount(void)const",
    "_access",
    "_ftol",
    "_heapset",
    "const ostream::`vbtable'",
    "public: __thiscall ifstream::ifstream(void)",
    "iswupper",
    "isalpha",
    "public: class istream & __thiscall istream::read(signed char *,int)",
    "public: static long const ios::floatfield",
    "strftime",
    "_adj_fdivr_m32i",
    "fgetc",
    "public: int __thiscall ios::rdstate(void)const",
    "public: __thiscall stdiobuf::stdiobuf(class stdiobuf const &)",
    "class istream & __cdecl ws(class istream &)",
    "_ismbcalpha",
    "class ostream & __cdecl endl(class ostream &)",
    "private: class ostream & __thiscall ostream::writepad(char const *,char const *)",
    "iswpunct",
    "public: __thiscall stdiobuf::stdiobuf(struct _iobuf *)",
    "public: class istrstream & __thiscall istrstream::operator=(class istrstream const &)",
    "strtok",
    "iswcntrl",
    "ungetc",
    "_unloaddll",
    "public: int __thiscall ios::width(int)",
    "const strstream::`vbtable'{for `istream'}",
    "memcpy",
    "putc",
    "public: int __thiscall ios::precision(int)",
    "getc",
    "_ultoa",
    "wcstok",
    "_ismbclower",
    "_sleep",
    "const istream_withassign::`vftable'",
    "_wcsdup",
    "_ismbcpunct",
    "public: void __thiscall ostream::`vbase destructor'(void)",
    "_rotr",
    "_itow",
    "sqrt",
    "_wcslwr",
    "public: virtual int __thiscall streambuf::pbackfail(int)",
    "protected: __thiscall ostream::ostream(class ostream const &)",
    "_acmdln",
    "_execlpe",
    "void __cdecl unexpected(void)",
    "_environ",
    "_mktemp",
    "_wstrdate",
    "private: static long ios::x_maxbit",
    "public: __thiscall ostream_withassign::ostream_withassign(class streambuf *)",
    "_CIsinh",
    "protected: __thiscall streambuf::streambuf(void)",
    "_mbsnbcnt",
    "fgetws",
    "public: class filebuf * __thiscall fstream::rdbuf(void)const",
    "public: class istream & __thiscall istream::get(char &)",
    "public: void __thiscall ofstream::open(char const *,int,int)",
    "public: int __thiscall ifstream::is_open(void)const",
    "_filbuf",
    "public: class ostream & __thiscall ostream::operator<<(char const *)",
    "_initterm",
    "public: int __thiscall ofstream::fd(void)const",
    "longjmp",
    "protected: int __thiscall streambuf::unbuffered(void)const",
    "public: class istream & __thiscall istream::operator>>(short &)",
    "puts",
    "__p__timezone",
    "_fgetwchar",
    "__argv",
    "_wfsopen",
    "protected: char * __thiscall streambuf::pbase(void)const",
    "public: class ostream & __thiscall ostream::operator<<(float)",
    "public: void __cdecl ios::unlock(void)",
    "_wcsicoll",
    "clearerr",
    "_tcsupr",
    "_tcspbrk",
    "public: class ostream & __thiscall ostream::operator<<(class streambuf *)",
    "public: class strstreambuf & __thiscall strstreambuf::operator=(class strstreambuf const &)",
    "wcstoul",
    "class ostream_withassign cout",
    "_iob",
    "_mbsninc",
    "_wpgmptr",
    "protected: class ostream & __thiscall ostream::operator=(class streambuf *)",
    "public: __thiscall strstream::strstream(char *,int,int)",
    "public: virtual __thiscall ifstream::~ifstream(void)",
    "_wexeclp",
    "strrchr",
    "public: long __thiscall istream::tellg(void)",
    "public: virtual int __thiscall stdiobuf::pbackfail(int)",
    "_fdopen",
    "_mbsicmp",
    "_mbsdup",
    "_safe_fdivr",
    "public: char __thiscall ios::fill(void)const",
    "_strtime",
    "public: class ostream & __thiscall ostream::flush(void)",
    "_safe_fprem1",
    "protected: char * __thiscall streambuf::eback(void)const",
    "public: __thiscall ifstream::ifstream(class ifstream const &)",
    "public: virtual void * __thiscall fstream::`vector deleting destructor'(unsigned int)",
    "protected: void __thiscall streambuf::pbump(int)",
    "_mbbtombc",
    "isupper",
    "class ostream_withassign cerr",
    "public: class istream & __thiscall istream::operator>>(signed char *)",
    "public: virtual __thiscall ostream::~ostream(void)",
    "_global_unwind2",
    "_spawnle",
    "_getws",
    "public: void __thiscall ostream_withassign::`vbase destructor'(void)",
    "private: static int ios::fLockcInit",
    "_ctype",
    "_aexit_rtn",
    "_abnormal_termination",
    "atol",
    "__p__environ",
    "public: class strstreambuf * __thiscall ostrstream::rdbuf(void)const",
    "public: class streambuf * __thiscall ifstream::setbuf(char *,int)",
    "_fpreset",
    "public: virtual __thiscall stdiostream::~stdiostream(void)",
    "_spawnve",
    "_y0",
    "_mbclen",
    "__p__winminor",
    "const istream::`vftable'",
    "_tccpy",
    "public: char * __thiscall istrstream::str(void)",
    "_y1",
    "_ismbstrail",
    "memcmp",
    "_mbsnbset",
    "_memccpy",
    "public: __thiscall filebuf::filebuf(class filebuf const &)",
    "public: int __thiscall filebuf::fd(void)const",
    "_mbsnset",
    "class ios & __cdecl dec(class ios &)",
    "iswlower",
    "_controlfp",
    "localtime",
    "_mbscat",
    "_tcsncicmp",
    "public: long __thiscall ios::unsetf(long)",
    "iswgraph",
    "_rmtmp",
    "_mbsspn",
    "_atodbl",
    "_chsize",
    "public: class filebuf * __thiscall ifstream::rdbuf(void)const",
    "_mbsinc",
    "_getdrives",
    "free",
    "_fstat",
    "const ofstream::`vbtable'",
    "public: void __thiscall ios::clear(int)",
    "_isatty",
    "wcscmp",
    "_snwprintf",
    "public: __thiscall filebuf::filebuf(int,char *,int)",
    "_fsopen",
    "public: virtual void * __thiscall ostrstream::`scalar deleting destructor'(unsigned int)",
    "protected: __thiscall ios::ios(void)",
    "_tcsspn",
    "public: __thiscall strstreambuf::strstreambuf(char *,int,char *)",
    "public: class ostream & __thiscall ostream::put(char)",
    "public: virtual int __thiscall stdiobuf::sync(void)",
    "strstr",
    "_ltow",
    "_ismbbprint",
    "public: virtual __thiscall iostream::~iostream(void)",
    "public: virtual void * __thiscall iostream::`scalar deleting destructor'(unsigned int)",
    "_tcsnextc",
    "_atoldbl",
    "_tclen",
    "ispunct",
    "_wexecle",
    "asin",
    "public: virtual int __thiscall streambuf::sync(void)",
    "_beginthreadex",
    "_wspawnle",
    "_scalb",
    "public: __thiscall strstreambuf::strstreambuf(class strstreambuf const &)",
    "sprintf",
    "public: class istream & __thiscall istream::operator>>(unsigned char *)",
    "class istream_withassign cin",
    "strspn",
    "public: class istream & __thiscall istream::get(signed char *,int,char)",
    "public: void __thiscall strstream::`vbase destructor'(void)",
    "private: static int ios::x_curindex",
    "public: void * __thiscall Iostream_init::`vector deleting destructor'(unsigned int)",
    "_ecvt",
    "public: __thiscall ofstream::ofstream(void)",
    "public: virtual void * __thiscall fstream::`scalar deleting destructor'(unsigned int)",
    "__p__acmdln",
    "__getmainargs",
    "_wgetcwd",
    "const strstream::`vftable'",
    "_except_handler3",
    "_heapwalk",
    "_mbsspnp",
    "_dup2",
    "public: virtual int __thiscall strstreambuf::overflow(int)",
    "_wexecvpe",
    "_wsystem",
    "_wcsupr",
    "_tcsrchr",
    "modf",
    "ceil",
    "protected: __thiscall ostream::ostream(void)",
    "__iscsymf",
    "_mbsncmp",
    "_strerror",
    "protected: char * __thiscall streambuf::gptr(void)const",
    "public: int __thiscall ifstream::fd(void)const",
    "frexp",
    "protected: virtual int __thiscall streambuf::doallocate(void)",
    "_tcsdec",
    "_wputenv",
    "public: __thiscall fstream::fstream(void)",
    "public: virtual void * __thiscall ofstream::`vector deleting destructor'(unsigned int)",
    "int (__cdecl*__cdecl _query_new_handler(void))(unsigned int)",
    "_mbccpy",
    "int __cdecl _query_new_mode(void)",
    "public: void __thiscall istrstream::`vbase destructor'(void)",
    "strncmp",
    "wcsstr",
    "_jn",
    "_mbcjistojms",
    "_mbsnbicmp",
    "isleadbyte",
    "_mbscmp",
    "memchr",
    "_heapadd",
    "_mbsdec",
    "class ios & __cdecl hex(class ios &)",
    "public: void __thiscall ifstream::`vbase destructor'(void)",
    "calloc",
    "fgets",
    "wcslen",
    "setbuf",
    "log10",
    "public: __thiscall strstream::strstream(class strstream const &)",
    "public: virtual void * __thiscall stdiobuf::`vector deleting destructor'(unsigned int)",
    "public: class istream & __thiscall istream::operator>>(int &)",
    "_local_unwind2",
    "strncat",
    "_ismbcdigit",
    "public: int __thiscall ios::precision(void)const",
    "_CIlog",
    "_mbsnbcoll",
    "public: virtual __thiscall istream_withassign::~istream_withassign(void)",
    "public: virtual __thiscall stdiobuf::~stdiobuf(void)",
    "public: class istream & __thiscall istream::seekg(long,enum ios::seek_dir)",
    "public: struct _iobuf * __thiscall stdiobuf::stdiofile(void)",
    "public: virtual void * __thiscall istrstream::`scalar deleting destructor'(unsigned int)",
    "towupper",
    "public: virtual int __thiscall stdiobuf::overflow(int)",
    "public: __thiscall Iostream_init::Iostream_init(void)",
    "__p__osver",
    "const fstream::`vftable'",
    "labs",
    "_dup",
    "public: int __thiscall istream::sync(void)",
    "public: class ostream & __thiscall ostream::operator<<(void const *)",
    "const istream_withassign::`vbtable'"
  ],
  "msvcrt40.dll": [
    "wcsxfrm",
    "__dllonexit",
    "iswprint",
    "public: int __thiscall ios::width(void)const",
    "_ismbblead",
    "exit",
    "fwscanf",
    "__p___wargv",
    "__p__wenviron",
    "_safe_fprem",
    "public: class ostream & __thiscall ostream_withassign::operator=(class ostream const &)",
    "_outpd",
    "__doserrno",
    "fmod",
    "_exit",
    "getwc",
    "isprint",
    "_mbsnicmp",
    "_mtlock",
    "_safe_fdiv",
    "public: __thiscall ofstream::ofstream(int)",
    "_wfullpath",
    "strncpy",
    "toupper",
    "_getdllprocaddr",
    "__p___initenv",
    "public: class streambuf * __thiscall fstream::setbuf(char *,int)",
    "_telli64",
    "_wchmod",
    "atof",
    "fseek",
    "tmpnam",
    "__p__tzname",
    "public: __thiscall Iostream_init::Iostream_init(class ios &,int)",
    "public: class ostream & __thiscall ostream::operator<<(long double)",
    "__STRINGTOLD",
    "public: virtual __thiscall ofstream::~ofstream(void)",
    "_ismbcl2",
    "public: class istream & __thiscall istream::get(signed char &)",
    "public: __thiscall istrstream::istrstream(char *)",
    "sscanf",
    "rename",
    "public: class ostream & __thiscall ostream::operator<<(long)",
    "_setjmp3",
    "public: virtual void * __thiscall stdiostream::`scalar deleting destructor'(unsigned int)",
    "_wfindfirst",
    "public: virtual void * __thiscall exception::`vector deleting destructor'(unsigned int)",
    "public: class logic_error & __thiscall logic_error::operator=(class logic_error const &)",
    "_chdrive",
    "__wargv",
    "_ismbcsymbol",
    "void __cdecl operator delete(void *)",
    "setvbuf",
    "public: void __thiscall streambuf::unlock(void)",
    "public: __thiscall streambuf::streambuf(class streambuf const &)",
    "public: virtual void * __thiscall filebuf::`vector deleting destructor'(unsigned int)",
    "public: char const * __thiscall type_info::raw_name(void)const",
    "const istream::`vbtable'",
    "raise",
    "_putw",
    "_wexecl",
    "__threadid",
    "vfprintf",
    "_sys_nerr",
    "public: class __non_rtti_object & __thiscall __non_rtti_object::operator=(class __non_rtti_object const &)",
    "public: virtual void * __thiscall ostream::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall strstreambuf::`vector deleting destructor'(unsigned int)",
    "qsort",
    "const ostrstream::`vftable'",
    "_nextafter",
    "printf",
    "vswprintf",
    "__argc",
    "_mbctolower",
    "_purecall",
    "_fpieee_flt",
    "protected: struct _CRT_CRITICAL_SECTION * __thiscall ios::lockptr(void)",
    "memset",
    "fgetpos",
    "_finite",
    "_winmajor",
    "public: __thiscall ofstream::ofstream(int,char *,int)",
    "public: int __thiscall ios::good(void)const",
    "_cwait",
    "public: virtual void * __thiscall strstream::`vector deleting destructor'(unsigned int)",
    "_wmkdir",
    "_HUGE",
    "_findnext",
    "acos",
    "public: void __thiscall ofstream::close(void)",
    "tolower",
    "_beginthread",
    "class ostream & __cdecl flush(class ostream &)",
    "protected: int __thiscall streambuf::allocate(void)",
    "public: __thiscall fstream::fstream(class fstream const &)",
    "_eof",
    "protected: class ios & __thiscall ios::operator=(class ios const &)",
    "_mbctombb",
    "public: virtual void * __thiscall istream_withassign::`scalar deleting destructor'(unsigned int)",
    "public: virtual class streambuf * __thiscall filebuf::setbuf(char *,int)",
    "_expand",
    "fwprintf",
    "_CIexp",
    "public: virtual void * __thiscall ostream_withassign::`vector deleting destructor'(unsigned int)",
    "public: virtual __thiscall strstream::~strstream(void)",
    "public: void __cdecl ios::unlockbuf(void)",
    "_copysign",
    "tmpfile",
    "public: void __thiscall fstream::close(void)",
    "private: int __thiscall istream::getdouble(char *,int)",
    "public: virtual class streambuf * __thiscall strstreambuf::setbuf(char *,int)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned int)",
    "public: int __thiscall streambuf::out_waiting(void)const",
    "protected: void __thiscall streambuf::setg(char *,char *,char *)",
    "public: long __thiscall ios::flags(void)const",
    "fprintf",
    "towlower",
    "_cscanf",
    "putchar",
    "const ios::`vftable'",
    "_strset",
    "_wexeclpe",
    "_stati64",
    "public: __thiscall stdiostream::stdiostream(struct _iobuf *)",
    "_execve",
    "_filelength",
    "asctime",
    "isspace",
    "__p___argv",
    "_open_osfhandle",
    "_locking",
    "_pctype",
    "public: void __thiscall ifstream::close(void)",
    "public: void __thiscall streambuf::lock(void)",
    "_adj_fdiv_m16i",
    "_pwctype",
    "_wcsnset",
    "const streambuf::`vftable'",
    "public: void __thiscall fstream::attach(int)",
    "_makepath",
    "public: static int const filebuf::openprot",
    "__mb_cur_max",
    "_lrotl",
    "public: __thiscall exception::exception(void)",
    "_adj_fpatan",
    "public: int __thiscall streambuf::snextc(void)",
    "_longjmpex",
    "public: __thiscall iostream::iostream(class streambuf *)",
    "public: class istream & __thiscall istream::operator>>(long double &)",
    "public: virtual long __thiscall streambuf::seekpos(long,int)",
    "public: void __thiscall ios::delbuf(int)",
    "__setusermatherr",
    "_mbctokata",
    "_flushall",
    "_putws",
    "_execl",
    "_mbscoll",
    "public: int __thiscall ios::delbuf(void)const",
    "_execvp",
    "_seterrormode",
    "_inp",
    "_ismbbkana",
    "_mbctype",
    "fgetwc",
    "public: __thiscall exception::exception(char const * const &)",
    "const iostream::`vftable'",
    "public: virtual void * __thiscall ostream::`scalar deleting destructor'(unsigned int)",
    "__p__iob",
    "_flsbuf",
    "public: long __thiscall ios::setf(long,long)",
    "public: int __thiscall ifstream::setmode(int)",
    "public: class streambuf * __thiscall ios::rdbuf(void)const",
    "isxdigit",
    "public: int __thiscall ios::bad(void)const",
    "difftime",
    "public: virtual void * __thiscall istream::`vector deleting destructor'(unsigned int)",
    "fscanf",
    "public: virtual int __thiscall filebuf::underflow(void)",
    "_ismbslead",
    "public: int __thiscall streambuf::sbumpc(void)",
    "scanf",
    "mbstowcs",
    "int (__cdecl*__cdecl _set_new_handler(int (__cdecl*)(unsigned int)))(unsigned int)",
    "_cgets",
    "_wspawnv",
    "_mbsbtype",
    "_popen",
    "public: __thiscall ofstream::ofstream(char const *,int,int)",
    "_wchdir",
    "islower",
    "public: virtual int __thiscall filebuf::sync(void)",
    "public: virtual void * __thiscall istream_withassign::`vector deleting destructor'(unsigned int)",
    "_wexecve",
    "_chdir",
    "public: __thiscall __non_rtti_object::__non_rtti_object(char const *)",
    "public: virtual int __thiscall strstreambuf::sync(void)",
    "_commode",
    "protected: char * __thiscall streambuf::base(void)const",
    "void __cdecl terminate(void)",
    "_getsystime",
    "_strncoll",
    "public: class istream_withassign & __thiscall istream_withassign::operator=(class istream_withassign const &)",
    "wcspbrk",
    "_getdrive",
    "_logb",
    "_strnset",
    "public: int __thiscall filebuf::is_open(void)const",
    "_wspawnlpe",
    "_mbslen",
    "public: static void __cdecl ios::sync_with_stdio(void)",
    "log",
    "protected: __thiscall iostream::iostream(class iostream const &)",
    "public: int __thiscall streambuf::sputbackc(char)",
    "_wspawnl",
    "const ofstream::`vftable'",
    "const ostream_withassign::`vbtable'",
    "_execv",
    "public: class ostream & __thiscall ostream::write(char const *,int)",
    "class ostream & __cdecl ends(class ostream &)",
    "public: __thiscall istrstream::istrstream(class istrstream const &)",
    "_ftime",
    "_wpopen",
    "public: void __thiscall ifstream::open(char const *,int,int)",
    "protected: __thiscall ios::ios(class ios const &)",
    "public: int __thiscall istream::gcount(void)const",
    "_wfopen",
    "is_wctype",
    "public: int __thiscall istream::ipfx(int)",
    "public: class istream & __thiscall istream::seekg(long)",
    "public: virtual void * __thiscall ofstream::`scalar deleting destructor'(unsigned int)",
    "public: virtual int __thiscall strstreambuf::underflow(void)",
    "__p__daylight",
    "_lseek",
    "protected: class istream & __thiscall istream::get(char *,int,int)",
    "public: class ostrstream & __thiscall ostrstream::operator=(class ostrstream const &)",
    "_wrename",
    "public: virtual void * __thiscall istream::`scalar deleting destructor'(unsigned int)",
    "public: void __thiscall ifstream::attach(int)",
    "void (__cdecl*__cdecl _set_se_translator(void (__cdecl*)(unsigned int,struct _EXCEPTION_POINTERS *)))(unsigned int,struct _EXCEPTION_POINTERS *)",
    "_CIatan2",
    "_outp",
    "_ismbbalpha",
    "_toupper",
    "ftell",
    "public: __thiscall bad_cast::bad_cast(class bad_cast const &)",
    "public: static int const filebuf::text",
    "__unDName",
    "public: int __thiscall ofstream::setmode(int)",
    "_wstrtime",
    "public: int __thiscall streambuf::sgetn(char *,int)",
    "_CItanh",
    "_itoa",
    "_wremove",
    "_mbsncpy",
    "public: char const * __thiscall type_info::name(void)const",
    "_strcmpi",
    "public: class ostream & __thiscall ostream_withassign::operator=(class streambuf *)",
    "_mbctohira",
    "_XcptFilter",
    "_sys_errlist",
    "public: __thiscall istream_withassign::istream_withassign(class streambuf *)",
    "fputs",
    "public: virtual void * __thiscall ios::`scalar deleting destructor'(unsigned int)",
    "_dstbias",
    "_adj_fdiv_m32i",
    "_msize",
    "const ostream::`vftable'",
    "public: long __thiscall ios::setf(long)",
    "_mbsnextc",
    "iswxdigit",
    "public: class istream & __thiscall istream_withassign::operator=(class streambuf *)",
    "public: virtual __thiscall filebuf::~filebuf(void)",
    "_adj_fdivr_m16i",
    "public: virtual __thiscall strstreambuf::~strstreambuf(void)",
    "fread",
    "strlen",
    "public: class istream & __thiscall istream::operator>>(signed char &)",
    "_adj_fprem1",
    "public: int __thiscall streambuf::sputc(int)",
    "_CIpow",
    "getenv",
    "_fmode",
    "strerror",
    "_waccess",
    "_ismbbkprint",
    "fflush",
    "_spawnv",
    "abs",
    "public: class ostream & __thiscall ostream::operator<<(class ostream & (__cdecl*)(class ostream &))",
    "_kbhit",
    "_yn",
    "_mbsnccnt",
    "const bad_cast::`vftable'",
    "signal",
    "public: virtual void * __thiscall stdiobuf::`scalar deleting destructor'(unsigned int)",
    "_EH_prolog",
    "_wenviron",
    "protected: void __thiscall streambuf::unbuffered(int)",
    "_vsnprintf",
    "__RTCastToVoid",
    "public: __thiscall Iostream_init::~Iostream_init(void)",
    "_CIasin",
    "__p__dstbias",
    "_wexecv",
    "_getmaxstdio",
    "_wunlink",
    "public: virtual void * __thiscall ifstream::`vector deleting destructor'(unsigned int)",
    "__RTtypeid",
    "_j1",
    "protected: class iostream & __thiscall iostream::operator=(class iostream &)",
    "getwchar",
    "atan2",
    "public: class istream & __thiscall istream::get(class streambuf &,char)",
    "_searchenv",
    "public: class istream & __thiscall istream::getline(char *,int,char)",
    "_adj_fdiv_r",
    "_fputwchar",
    "wcsspn",
    "public: class ostream & __thiscall ostream::put(unsigned char)",
    "swprintf",
    "public: char * __thiscall ostrstream::str(void)",
    "__wgetmainargs",
    "__CxxFrameHandler",
    "public: __thiscall bad_typeid::bad_typeid(class bad_typeid const &)",
    "_wsopen",
    "perror",
    "public: __thiscall fstream::fstream(char const *,int,int)",
    "public: virtual void * __thiscall streambuf::`vector deleting destructor'(unsigned int)",
    "__p__fmode",
    "_mbsset",
    "_open",
    "public: int __thiscall streambuf::in_avail(void)const",
    "abort",
    "_fileinfo",
    "public: virtual void * __thiscall ifstream::`scalar deleting destructor'(unsigned int)",
    "__p__commode",
    "public: void __thiscall ofstream::`vbase destructor'(void)",
    "_winver",
    "tan",
    "wcscpy",
    "_execvpe",
    "_wopen",
    "_wrmdir",
    "strcspn",
    "public: __thiscall ostrstream::ostrstream(void)",
    "__fpecode",
    "_lsearch",
    "_mbsicoll",
    "_wtempnam",
    "__p__pgmptr",
    "__p___mb_cur_max",
    "_mbctoupper",
    "_strupr",
    "_ultow",
    "public: void * __thiscall Iostream_init::`scalar deleting destructor'(unsigned int)",
    "const logic_error::`vftable'",
    "vprintf",
    "_chgsign",
    "protected: class iostream & __thiscall iostream::operator=(class streambuf *)",
    "_timezone",
    "protected: virtual int __thiscall strstreambuf::doallocate(void)",
    "public: class istream & __thiscall istream::operator>>(long &)",
    "public: long & __thiscall ios::iword(int)const",
    "public: virtual int __thiscall stdiobuf::underflow(void)",
    "strcat",
    "const strstreambuf::`vftable'",
    "__pxcptinfoptrs",
    "isalnum",
    "_stricoll",
    "public: __thiscall ostream_withassign::ostream_withassign(void)",
    "wcschr",
    "public: __thiscall strstream::strstream(void)",
    "public: void __thiscall streambuf::stossc(void)",
    "_cputs",
    "public: class filebuf & __thiscall filebuf::operator=(class filebuf const &)",
    "_wgetdcwd",
    "public: class ostream & __thiscall ostream::operator<<(int)",
    "public: class ostream & __thiscall ostream::put(signed char)",
    "__winitenv",
    "public: __thiscall stdiostream::stdiostream(class stdiostream const &)",
    "public: virtual void * __thiscall istrstream::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall strstream::`scalar deleting destructor'(unsigned int)",
    "wcsftime",
    "_getdcwd",
    "_isnan",
    "sinh",
    "public: __thiscall istream::istream(class streambuf *)",
    "_vsnwprintf",
    "_wcsset",
    "public: __thiscall ostrstream::ostrstream(char *,int,int)",
    "sin",
    "_wtmpnam",
    "strtoul",
    "__p__wcmdln",
    "_adj_fdivr_m32",
    "public: void __thiscall streambuf::dbp(void)",
    "public: void __thiscall iostream::`vbase destructor'(void)",
    "atexit",
    "_wtol",
    "wcstombs",
    "_j0",
    "_putenv",
    "fputc",
    "const fstream::`vbtable'{for `ostream'}",
    "public: class streambuf & __thiscall streambuf::operator=(class streambuf const &)",
    "public: static int const filebuf::sh_read",
    "protected: __thiscall istream::istream(class istream const &)",
    "public: class ifstream & __thiscall ifstream::operator=(class ifstream const &)",
    "const ostrstream::`vbtable'",
    "public: virtual void * __thiscall logic_error::`scalar deleting destructor'(unsigned int)",
    "_fcvt",
    "const ostream_withassign::`vftable'",
    "iswdigit",
    "malloc",
    "_isctype",
    "_ismbcupper",
    "const __non_rtti_object::`vftable'",
    "int __cdecl _set_new_mode(int)",
    "_adj_fdiv_m32",
    "public: static long const ios::adjustfield",
    "const istrstream::`vbtable'",
    "strxfrm",
    "public: class filebuf * __thiscall filebuf::close(void)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned long)",
    "public: class stdiostream & __thiscall stdiostream::operator=(class stdiostream &)",
    "_amsg_exit",
    "_fgetchar",
    "_loaddll",
    "_snprintf",
    "protected: char * __thiscall streambuf::ebuf(void)const",
    "public: class istream & __thiscall istream::get(char *,int,char)",
    "public: int __thiscall streambuf::sgetc(void)",
    "system",
    "_hypot",
    "_mbsnbicoll",
    "wscanf",
    "_wcreat",
    "_wcsicmp",
    "_unlink",
    "void (__cdecl*__cdecl set_terminate(void (__cdecl*)(void)))(void)",
    "wcsncpy",
    "private: static long * ios::x_statebuf",
    "protected: class ostream & __thiscall ostream::operator=(class ostream const &)",
    "_rmdir",
    "_clearfp",
    "public: class ostream & __thiscall ostream::operator<<(class ios & (__cdecl*)(class ios &))",
    "_lrotr",
    "_CIcos",
    "public: __thiscall strstreambuf::strstreambuf(int)",
    "public: int __thiscall stdiobuf::setrwbuf(int,int)",
    "ferror",
    "public: __thiscall bad_cast::bad_cast(char const * const &)",
    "mbtowc",
    "protected: static void __cdecl ios::unlockc(void)",
    "public: __thiscall ios::ios(class streambuf *)",
    "_ismbchira",
    "_adj_fptan",
    "_statusfp",
    "_umask",
    "_tzset",
    "public: class ostream & __thiscall ostream::operator<<(signed char const *)",
    "public: int __thiscall filebuf::setmode(int)",
    "_set_error_mode",
    "_wfindfirsti64",
    "public: class ostream * __thiscall ios::tie(class ostream *)",
    "public: virtual __thiscall type_info::~type_info(void)",
    "bsearch",
    "_assert",
    "_CIsqrt",
    "_errno",
    "cos",
    "public: virtual long __thiscall streambuf::seekoff(long,enum ios::seek_dir,int)",
    "__p___winitenv",
    "void * __cdecl operator new(unsigned int)",
    "_spawnlp",
    "_wstat",
    "_futime",
    "wcsncmp",
    "_sopen",
    "_adj_fdiv_m64",
    "public: void __cdecl ios::setlock(void)",
    "protected: char * __thiscall streambuf::pptr(void)const",
    "_mbstrlen",
    "$I10_OUTPUT",
    "__lconv_init",
    "_ismbbgraph",
    "protected: __thiscall iostream::iostream(void)",
    "wcstod",
    "__isascii",
    "_wctime",
    "public: virtual __thiscall ios::~ios(void)",
    "__RTDynamicCast",
    "_strnicmp",
    "clock",
    "_rotl",
    "mktime",
    "public: __thiscall fstream::fstream(int,char *,int)",
    "_CIfmod",
    "public: int __thiscall type_info::operator!=(class type_info const &)const",
    "public: virtual void * __thiscall exception::`scalar deleting destructor'(unsigned int)",
    "putwc",
    "_endthread",
    "_osver",
    "_chmod",
    "public: int __thiscall ios::fail(void)const",
    "_pclose",
    "_ismbbtrail",
    "gmtime",
    "const stdiobuf::`vftable'",
    "_wmakepath",
    "public: char * __thiscall strstream::str(void)",
    "public: virtual void * __thiscall iostream::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall ostrstream::`vector deleting destructor'(unsigned int)",
    "public: virtual char const * __thiscall exception::what(void)const",
    "_CIcosh",
    "wctomb",
    "mblen",
    "public: __thiscall ifstream::ifstream(char const *,int,int)",
    "_getche",
    "_adj_fprem",
    "_setsystime",
    "_wcsncoll",
    "public: virtual void * __thiscall bad_typeid::`scalar deleting destructor'(unsigned int)",
    "setlocale",
    "_wperror",
    "localeconv",
    "void (__cdecl*__cdecl set_unexpected(void (__cdecl*)(void)))(void)",
    "public: class istream & __thiscall istream::operator>>(class ios & (__cdecl*)(class ios &))",
    "public: void __thiscall ofstream::attach(int)",
    "_mbscspn",
    "_getdiskfree",
    "public: virtual __thiscall ostrstream::~ostrstream(void)",
    "public: virtual void * __thiscall ostream_withassign::`scalar deleting destructor'(unsigned int)",
    "protected: void __thiscall streambuf::setb(char *,char *,int)",
    "protected: void __thiscall streambuf::setp(char *,char *)",
    "void (__cdecl*__cdecl set_new_handler(void (__cdecl*)(void)))(void)",
    "_putch",
    "protected: static void __cdecl ios::lockc(void)",
    "_beep",
    "_splitpath",
    "public: class strstream & __thiscall strstream::operator=(class strstream &)",
    "public: class istream & __thiscall istream::read(char *,int)",
    "__p__mbctype",
    "_endthreadex",
    "const iostream::`vbtable'{for `istream'}",
    "public: virtual __thiscall istrstream::~istrstream(void)",
    "vsprintf",
    "protected: class istream & __thiscall istream::operator=(class streambuf *)",
    "cosh",
    "public: __thiscall ofstream::ofstream(class ofstream const &)",
    "atoi",
    "__initenv",
    "_ismbbkalnum",
    "_utime",
    "_wtoi",
    "public: int __thiscall istream::peek(void)",
    "_swab",
    "_mbschr",
    "public: int __thiscall ofstream::is_open(void)const",
    "exp",
    "public: class ostream * __thiscall ios::tie(void)const",
    "ungetwc",
    "_c_exit",
    "__p__wpgmptr",
    "_wmktemp",
    "public: class ostream & __thiscall ostream::seekp(long)",
    "_mbsnicoll",
    "_pgmptr",
    "_wsearchenv",
    "public: class ostream & __thiscall ostream::write(unsigned char const *,int)",
    "protected: void __thiscall streambuf::gbump(int)",
    "_wsetlocale",
    "_mbscpy",
    "_mbcjmstojis",
    "_seh_longjmp_unwind",
    "fclose",
    "__p__amblksiz",
    "_getmbcp",
    "_cexit",
    "public: virtual void * __thiscall bad_typeid::`vector deleting destructor'(unsigned int)",
    "protected: char * __thiscall streambuf::egptr(void)const",
    "_ismbcprint",
    "public: class istream & __thiscall istream::operator>>(float &)",
    "public: class ostream & __thiscall ostream::operator<<(char)",
    "strtol",
    "public: static int const filebuf::sh_none",
    "_winminor",
    "public: void __cdecl ios::lock(void)",
    "isgraph",
    "const ifstream::`vftable'",
    "_mbsrev",
    "public: void __thiscall stdiostream::`vbase destructor'(void)",
    "_wsplitpath",
    "_ungetch",
    "public: virtual void * __thiscall stdiostream::`vector deleting destructor'(unsigned int)",
    "public: int __thiscall fstream::setmode(int)",
    "strcmp",
    "public: virtual long __thiscall filebuf::seekoff(long,enum ios::seek_dir,int)",
    "_setmaxstdio",
    "public: class istream & __thiscall istream::operator>>(unsigned int &)",
    "public: class istream & __thiscall istream::ignore(int,int)",
    "public: int __thiscall istream::get(void)",
    "fopen",
    "iswctype",
    "_execlp",
    "fputwc",
    "strpbrk",
    "public: int __thiscall ios::operator!(void)const",
    "public: void __thiscall ostream::osfx(void)",
    "_wstati64",
    "_wutime",
    "_CItan",
    "protected: __thiscall streambuf::streambuf(char *,int)",
    "public: __thiscall istrstream::istrstream(char *,int)",
    "public: __thiscall exception::exception(class exception const &)",
    "_mbstok",
    "public: class filebuf * __thiscall filebuf::attach(int)",
    "public: class istream & __thiscall istream::get(unsigned char &)",
    "public: int __thiscall fstream::is_open(void)const",
    "_except_handler2",
    "public: long __thiscall ostream::tellp(void)",
    "public: class stdiobuf & __thiscall stdiobuf::operator=(class stdiobuf const &)",
    "public: char __thiscall ios::fill(char)",
    "public: class fstream & __thiscall fstream::operator=(class fstream &)",
    "const fstream::`vbtable'{for `istream'}",
    "public: virtual void * __thiscall filebuf::`scalar deleting destructor'(unsigned int)",
    "_tolower",
    "memmove",
    "_mbsncoll",
    "fputws",
    "public: class istream & __thiscall istream::putback(char)",
    "public: void __thiscall fstream::`vbase destructor'(void)",
    "_CIlog10",
    "_write",
    "public: void __thiscall fstream::open(char const *,int,int)",
    "private: int __thiscall istream::getint(char *)",
    "realloc",
    "getchar",
    "pow",
    "protected: char * __thiscall streambuf::epptr(void)const",
    "public: void __thiscall streambuf::clrlock(void)",
    "wcscat",
    "protected: int __thiscall streambuf::blen(void)const",
    "_daylight",
    "_fcloseall",
    "_onexit",
    "public: class istream & __thiscall istream::operator>>(char *)",
    "putwchar",
    "rand",
    "public: static int __cdecl ios::xalloc(void)",
    "_inpd",
    "_spawnl",
    "_spawnlpe",
    "private: static struct _CRT_CRITICAL_SECTION ios::x_lockc",
    "public: class ostream & __thiscall ostream::operator<<(unsigned short)",
    "_mbsupr",
    "public: void __thiscall streambuf::setlock(void)",
    "wcscspn",
    "const stdiostream::`vftable'",
    "__p__pwctype",
    "public: virtual void * __thiscall streambuf::`scalar deleting destructor'(unsigned int)",
    "_wcsnicmp",
    "public: class ostream & __thiscall ostream::operator<<(unsigned char)",
    "public: virtual class streambuf * __thiscall streambuf::setbuf(char *,int)",
    "public: void __thiscall strstreambuf::freeze(int)",
    "ldiv",
    "fwrite",
    "_wspawnlp",
    "public: class istream & __thiscall istream::operator>>(unsigned char &)",
    "_ismbcl1",
    "_ismbcalnum",
    "_CIsin",
    "const istrstream::`vftable'",
    "public: virtual void * __thiscall strstreambuf::`scalar deleting destructor'(unsigned int)",
    "srand",
    "_strlwr",
    "time",
    "public: class strstreambuf * __thiscall istrstream::rdbuf(void)const",
    "__CxxLongjmpUnwind",
    "strchr",
    "_ismbcspace",
    "const iostream::`vbtable'{for `ostream'}",
    "_ismbclegal",
    "public: virtual __thiscall ostream_withassign::~ostream_withassign(void)",
    "_mbsrchr",
    "fabs",
    "_wfreopen",
    "_creat",
    "_CxxThrowException",
    "const filebuf::`vftable'",
    "_heapchk",
    "public: virtual void * __thiscall ios::`vector deleting destructor'(unsigned int)",
    "_read",
    "public: class Iostream_init & __thiscall Iostream_init::operator=(class Iostream_init const &)",
    "_setmode",
    "public: class istream & __thiscall istream::operator>>(class streambuf *)",
    "public: void __thiscall istream_withassign::`vbase destructor'(void)",
    "strcpy",
    "_wfdopen",
    "__threadhandle",
    "public: static int const filebuf::binary",
    "public: class exception & __thiscall exception::operator=(class exception const &)",
    "_wcsrev",
    "_wasctime",
    "public: void __thiscall istream::`vbase destructor'(void)",
    "public: virtual __thiscall exception::~exception(void)",
    "wprintf",
    "protected: class istream & __thiscall istream::operator=(class istream const &)",
    "public: class ostream & __thiscall ostream::seekp(long,enum ios::seek_dir)",
    "public: static long __cdecl ios::bitalloc(void)",
    "const exception::`vftable'",
    "public: void __thiscall ostrstream::`vbase destructor'(void)",
    "public: class ofstream & __thiscall ofstream::operator=(class ofstream const &)",
    "__p__winver",
    "_wspawnve",
    "public: __thiscall istream_withassign::istream_withassign(void)",
    "_heapused",
    "protected: __thiscall istream::istream(void)",
    "iswalnum",
    "_wcmdln",
    "public: __thiscall fstream::fstream(int)",
    "_lfind",
    "_wcsnicoll",
    "vwprintf",
    "_wspawnvp",
    "_mbslwr",
    "_strnicoll",
    "_stricmp",
    "public: class istream & __thiscall istream::operator>>(unsigned short &)",
    "public: int __thiscall type_info::before(class type_info const &)const",
    "_strrev",
    "public: class istream & __thiscall istream::getline(signed char *,int,char)",
    "public: void __cdecl ios::clrlock(void)",
    "iswascii",
    "_execle",
    "iscntrl",
    "public: class bad_cast & __thiscall bad_cast::operator=(class bad_cast const &)",
    "_gcvt",
    "public: class istream & __thiscall istream::read(unsigned char *,int)",
    "public: virtual long __thiscall strstreambuf::seekoff(long,enum ios::seek_dir,int)",
    "public: class strstreambuf * __thiscall strstream::rdbuf(void)const",
    "rewind",
    "_mtunlock",
    "_close",
    "public: class istream & __thiscall istream::getline(unsigned char *,int,char)",
    "public: virtual __thiscall istream::~istream(void)",
    "public: __thiscall ostream::ostream(class streambuf *)",
    "_strdup",
    "_control87",
    "wcstol",
    "_cabs",
    "_outpw",
    "public: int __thiscall ios::eof(void)const",
    "_fputchar",
    "public: long __thiscall ios::flags(long)",
    "_getw",
    "public: int __thiscall fstream::fd(void)const",
    "_mbspbrk",
    "iswalpha",
    "remove",
    "const stdiostream::`vbtable'{for `ostream'}",
    "_strdate",
    "private: static int ios::sunk_with_stdio",
    "public: class istream & __thiscall istream::get(unsigned char *,int,char)",
    "public: __thiscall ios::operator void *(void)const",
    "_findfirst",
    "vfwprintf",
    "_ismbcl0",
    "_pipe",
    "_wexecvp",
    "class ios & __cdecl oct(class ios &)",
    "_mbsstr",
    "public: void __thiscall istream::eatwhite(void)",
    "const ifstream::`vbtable'",
    "_mbsnbcpy",
    "_stat",
    "public: __thiscall ifstream::ifstream(int)",
    "_memicmp",
    "_heapmin",
    "_CIacos",
    "_mbbtype",
    "public: __thiscall ifstream::ifstream(int,char *,int)",
    "public: class ostream & __thiscall ostream::operator<<(double)",
    "public: class ostream_withassign & __thiscall ostream_withassign::operator=(class ostream_withassign const &)",
    "__set_app_type",
    "_ismbbpunct",
    "_ismbbkpunct",
    "feof",
    "tanh",
    "_fullpath",
    "class ostream_withassign clog",
    "__p__pctype",
    "public: class ostream & __thiscall ostream::operator<<(short)",
    "_findfirsti64",
    "div",
    "public: class istream & __thiscall istream::operator>>(class istream & (__cdecl*)(class istream &))",
    "public: virtual void * __thiscall bad_cast::`scalar deleting destructor'(unsigned int)",
    "public: __thiscall strstreambuf::strstreambuf(void * (__cdecl*)(long),void (__cdecl*)(void *))",
    "public: __thiscall filebuf::filebuf(void)",
    "public: class stdiobuf * __thiscall stdiostream::rdbuf(void)const",
    "public: class ostream & __thiscall ostream::write(signed char const *,int)",
    "public: char * __thiscall strstreambuf::str(void)",
    "public: class ostream & __thiscall ostream::operator<<(signed char)",
    "_inpw",
    "public: virtual int __thiscall filebuf::overflow(int)",
    "public: class bad_typeid & __thiscall bad_typeid::operator=(class bad_typeid const &)",
    "public: __thiscall __non_rtti_object::__non_rtti_object(class __non_rtti_object const &)",
    "_spawnvp",
    "_wspawnvpe",
    "gets",
    "public: __thiscall ostrstream::ostrstream(class ostrstream const &)",
    "public: virtual __thiscall fstream::~fstream(void)",
    "_ltoa",
    "public: virtual int __thiscall streambuf::xsputn(char const *,int)",
    "swscanf",
    "_tempnam",
    "public: class istream & __thiscall istream::operator>>(double &)",
    "public: int __thiscall streambuf::sputn(char const *,int)",
    "_tzname",
    "_getcwd",
    "_spawnvpe",
    "_wfindnext",
    "_getpid",
    "_cprintf",
    "_ismbckata",
    "_setmbcp",
    "public: __thiscall ostream_withassign::ostream_withassign(class ostream_withassign const &)",
    "public: virtual __thiscall bad_cast::~bad_cast(void)",
    "ctime",
    "public: class streambuf * __thiscall ofstream::setbuf(char *,int)",
    "public: static long const ios::basefield",
    "__toascii",
    "ldexp",
    "_getch",
    "public: void __thiscall istream::isfx(void)",
    "freopen",
    "public: __thiscall logic_error::logic_error(class logic_error const &)",
    "public: __thiscall strstreambuf::strstreambuf(void)",
    "public: class istream & __thiscall istream::operator>>(char &)",
    "public: class istream & __thiscall istream_withassign::operator=(class istream const &)",
    "public: int __thiscall ostream::opfx(void)",
    "public: virtual __thiscall streambuf::~streambuf(void)",
    "_ismbcgraph",
    "strtod",
    "atan",
    "_findclose",
    "_mbsncat",
    "strcoll",
    "wcsrchr",
    "protected: void __thiscall ios::init(class streambuf *)",
    "_get_osfhandle",
    "public: virtual long __thiscall stdiobuf::seekoff(long,enum ios::seek_dir,int)",
    "public: __thiscall istream_withassign::istream_withassign(class istream_withassign const &)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned char const *)",
    "public: class filebuf * __thiscall filebuf::open(char const *,int,int)",
    "const stdiostream::`vbtable'{for `istream'}",
    "wcscoll",
    "_fstati64",
    "_fpclass",
    "floor",
    "public: static int const filebuf::sh_write",
    "__p___argc",
    "public: __thiscall filebuf::filebuf(int)",
    "_fileno",
    "public: virtual void * __thiscall logic_error::`vector deleting destructor'(unsigned int)",
    "public: void * & __thiscall ios::pword(int)const",
    "_tell",
    "_setjmp",
    "_mbsnbcmp",
    "_mkdir",
    "const strstream::`vbtable'{for `ostream'}",
    "_ismbbalnum",
    "_wgetenv",
    "__iscsym",
    "fsetpos",
    "public: int __thiscall strstream::pcount(void)const",
    "public: virtual int __thiscall streambuf::xsgetn(char *,int)",
    "_mbsnbcat",
    "isdigit",
    "iswspace",
    "_adj_fdivr_m64",
    "public: class filebuf * __thiscall ofstream::rdbuf(void)const",
    "_adjust_fdiv",
    "__p__winmajor",
    "_CIatan",
    "_commit",
    "public: class istream & __thiscall istream::operator>>(unsigned long &)",
    "public: int __thiscall ostrstream::pcount(void)const",
    "_access",
    "_ftol",
    "_heapset",
    "const ostream::`vbtable'",
    "public: __thiscall ifstream::ifstream(void)",
    "iswupper",
    "isalpha",
    "public: class istream & __thiscall istream::read(signed char *,int)",
    "public: static long const ios::floatfield",
    "strftime",
    "_adj_fdivr_m32i",
    "fgetc",
    "public: int __thiscall ios::rdstate(void)const",
    "public: __thiscall stdiobuf::stdiobuf(class stdiobuf const &)",
    "class istream & __cdecl ws(class istream &)",
    "_ismbcalpha",
    "class ostream & __cdecl endl(class ostream &)",
    "private: class ostream & __thiscall ostream::writepad(char const *,char const *)",
    "iswpunct",
    "public: __thiscall stdiobuf::stdiobuf(struct _iobuf *)",
    "public: class istrstream & __thiscall istrstream::operator=(class istrstream const &)",
    "strtok",
    "iswcntrl",
    "ungetc",
    "_unloaddll",
    "public: int __thiscall ios::width(int)",
    "const strstream::`vbtable'{for `istream'}",
    "memcpy",
    "public: virtual __thiscall __non_rtti_object::~__non_rtti_object(void)",
    "putc",
    "public: int __thiscall ios::precision(int)",
    "getc",
    "_ultoa",
    "wcstok",
    "_ismbclower",
    "_sleep",
    "const istream_withassign::`vftable'",
    "_lseeki64",
    "_wcsdup",
    "_ismbcpunct",
    "public: __thiscall logic_error::logic_error(char const * const &)",
    "_rotr",
    "_itow",
    "public: void __thiscall ostream::`vbase destructor'(void)",
    "sqrt",
    "_wcslwr",
    "_filelengthi64",
    "public: virtual int __thiscall streambuf::pbackfail(int)",
    "protected: __thiscall ostream::ostream(class ostream const &)",
    "_acmdln",
    "_execlpe",
    "void __cdecl unexpected(void)",
    "_environ",
    "_mktemp",
    "_wstrdate",
    "private: static long ios::x_maxbit",
    "public: __thiscall ostream_withassign::ostream_withassign(class streambuf *)",
    "_CIsinh",
    "protected: __thiscall streambuf::streambuf(void)",
    "_mbsnbcnt",
    "fgetws",
    "public: class filebuf * __thiscall fstream::rdbuf(void)const",
    "public: class istream & __thiscall istream::get(char &)",
    "public: void __thiscall ofstream::open(char const *,int,int)",
    "public: int __thiscall ifstream::is_open(void)const",
    "_filbuf",
    "public: class ostream & __thiscall ostream::operator<<(char const *)",
    "_initterm",
    "public: int __thiscall ofstream::fd(void)const",
    "longjmp",
    "protected: int __thiscall streambuf::unbuffered(void)const",
    "public: class istream & __thiscall istream::operator>>(short &)",
    "puts",
    "__p__timezone",
    "_fgetwchar",
    "__argv",
    "_wfsopen",
    "protected: char * __thiscall streambuf::pbase(void)const",
    "public: class ostream & __thiscall ostream::operator<<(float)",
    "public: void __cdecl ios::unlock(void)",
    "_wcsicoll",
    "clearerr",
    "public: class ostream & __thiscall ostream::operator<<(class streambuf *)",
    "public: class strstreambuf & __thiscall strstreambuf::operator=(class strstreambuf const &)",
    "wcstoul",
    "class ostream_withassign cout",
    "_iob",
    "_mbsninc",
    "_wpgmptr",
    "protected: class ostream & __thiscall ostream::operator=(class streambuf *)",
    "public: __thiscall strstream::strstream(char *,int,int)",
    "public: virtual __thiscall ifstream::~ifstream(void)",
    "_wexeclp",
    "strrchr",
    "public: long __thiscall istream::tellg(void)",
    "public: virtual int __thiscall stdiobuf::pbackfail(int)",
    "wcsncat",
    "_fdopen",
    "_mbsicmp",
    "_mbsdup",
    "_safe_fdivr",
    "public: char __thiscall ios::fill(void)const",
    "_strtime",
    "public: class ostream & __thiscall ostream::flush(void)",
    "_safe_fprem1",
    "protected: struct _CRT_CRITICAL_SECTION * __thiscall streambuf::lockptr(void)",
    "protected: char * __thiscall streambuf::eback(void)const",
    "public: __thiscall ifstream::ifstream(class ifstream const &)",
    "public: virtual void * __thiscall fstream::`vector deleting destructor'(unsigned int)",
    "protected: void __thiscall streambuf::pbump(int)",
    "_mbbtombc",
    "isupper",
    "class ostream_withassign cerr",
    "public: class istream & __thiscall istream::operator>>(signed char *)",
    "public: virtual __thiscall ostream::~ostream(void)",
    "public: virtual void * __thiscall __non_rtti_object::`vector deleting destructor'(unsigned int)",
    "_global_unwind2",
    "_spawnle",
    "_getws",
    "public: void __thiscall ostream_withassign::`vbase destructor'(void)",
    "private: static int ios::fLockcInit",
    "_ctype",
    "_aexit_rtn",
    "_abnormal_termination",
    "atol",
    "__p__environ",
    "public: class strstreambuf * __thiscall ostrstream::rdbuf(void)const",
    "public: class streambuf * __thiscall ifstream::setbuf(char *,int)",
    "_fpreset",
    "public: virtual __thiscall stdiostream::~stdiostream(void)",
    "_spawnve",
    "_y0",
    "_mbclen",
    "__p__winminor",
    "const istream::`vftable'",
    "public: char * __thiscall istrstream::str(void)",
    "_wfindnexti64",
    "_y1",
    "_ismbstrail",
    "memcmp",
    "_mbsnbset",
    "_memccpy",
    "public: __thiscall filebuf::filebuf(class filebuf const &)",
    "public: int __thiscall filebuf::fd(void)const",
    "public: int __thiscall type_info::operator==(class type_info const &)const",
    "_mbsnset",
    "class ios & __cdecl dec(class ios &)",
    "iswlower",
    "_controlfp",
    "localtime",
    "_mbscat",
    "public: long __thiscall ios::unsetf(long)",
    "iswgraph",
    "_rmtmp",
    "_mbsspn",
    "_atodbl",
    "_chsize",
    "public: class filebuf * __thiscall ifstream::rdbuf(void)const",
    "_mbsinc",
    "_getdrives",
    "free",
    "_fstat",
    "const ofstream::`vbtable'",
    "public: void __thiscall ios::clear(int)",
    "_isatty",
    "_snwprintf",
    "public: __thiscall filebuf::filebuf(int,char *,int)",
    "_fsopen",
    "public: virtual void * __thiscall ostrstream::`scalar deleting destructor'(unsigned int)",
    "protected: __thiscall ios::ios(void)",
    "public: __thiscall strstreambuf::strstreambuf(char *,int,char *)",
    "public: class ostream & __thiscall ostream::put(char)",
    "public: virtual int __thiscall stdiobuf::sync(void)",
    "public: void __cdecl ios::lockbuf(void)",
    "wcscmp",
    "strstr",
    "_ltow",
    "_ismbbprint",
    "public: virtual __thiscall iostream::~iostream(void)",
    "public: virtual void * __thiscall iostream::`scalar deleting destructor'(unsigned int)",
    "_atoldbl",
    "ispunct",
    "_wexecle",
    "asin",
    "public: virtual int __thiscall streambuf::sync(void)",
    "_beginthreadex",
    "_wspawnle",
    "_scalb",
    "public: __thiscall strstreambuf::strstreambuf(class strstreambuf const &)",
    "sprintf",
    "public: class istream & __thiscall istream::operator>>(unsigned char *)",
    "class istream_withassign cin",
    "strspn",
    "public: class istream & __thiscall istream::get(signed char *,int,char)",
    "public: void __thiscall strstream::`vbase destructor'(void)",
    "private: static int ios::x_curindex",
    "public: void * __thiscall Iostream_init::`vector deleting destructor'(unsigned int)",
    "_ecvt",
    "public: __thiscall ofstream::ofstream(void)",
    "public: virtual void * __thiscall fstream::`scalar deleting destructor'(unsigned int)",
    "__p__acmdln",
    "__getmainargs",
    "_wgetcwd",
    "const strstream::`vftable'",
    "_except_handler3",
    "_heapwalk",
    "_mbsspnp",
    "_dup2",
    "public: virtual int __thiscall strstreambuf::overflow(int)",
    "_wexecvpe",
    "_wsystem",
    "_wcsupr",
    "modf",
    "ceil",
    "const bad_typeid::`vftable'",
    "__iscsymf",
    "_mbsncmp",
    "_strerror",
    "protected: __thiscall ostream::ostream(void)",
    "protected: char * __thiscall streambuf::gptr(void)const",
    "public: virtual __thiscall logic_error::~logic_error(void)",
    "_findnexti64",
    "public: int __thiscall ifstream::fd(void)const",
    "frexp",
    "protected: virtual int __thiscall streambuf::doallocate(void)",
    "public: __thiscall fstream::fstream(void)",
    "_wputenv",
    "public: virtual void * __thiscall ofstream::`vector deleting destructor'(unsigned int)",
    "public: void __thiscall istrstream::`vbase destructor'(void)",
    "int (__cdecl*__cdecl _query_new_handler(void))(unsigned int)",
    "_mbccpy",
    "int __cdecl _query_new_mode(void)",
    "strncmp",
    "wcsstr",
    "public: virtual void * __thiscall bad_cast::`vector deleting destructor'(unsigned int)",
    "_jn",
    "_mbcjistojms",
    "_mbsnbicmp",
    "isleadbyte",
    "_mbscmp",
    "memchr",
    "_heapadd",
    "public: virtual void * __thiscall __non_rtti_object::`scalar deleting destructor'(unsigned int)",
    "_mbsdec",
    "class ios & __cdecl hex(class ios &)",
    "public: void __thiscall ifstream::`vbase destructor'(void)",
    "calloc",
    "fgets",
    "wcslen",
    "setbuf",
    "log10",
    "public: __thiscall bad_typeid::bad_typeid(char const *)",
    "public: __thiscall strstream::strstream(class strstream const &)",
    "public: virtual void * __thiscall stdiobuf::`vector deleting destructor'(unsigned int)",
    "public: class istream & __thiscall istream::operator>>(int &)",
    "_local_unwind2",
    "strncat",
    "_ismbcdigit",
    "public: int __thiscall ios::precision(void)const",
    "_CIlog",
    "_mbsnbcoll",
    "public: virtual __thiscall istream_withassign::~istream_withassign(void)",
    "public: virtual __thiscall stdiobuf::~stdiobuf(void)",
    "public: class istream & __thiscall istream::seekg(long,enum ios::seek_dir)",
    "public: struct _iobuf * __thiscall stdiobuf::stdiofile(void)",
    "public: virtual void * __thiscall istrstream::`scalar deleting destructor'(unsigned int)",
    "public: virtual __thiscall bad_typeid::~bad_typeid(void)",
    "towupper",
    "public: virtual int __thiscall stdiobuf::overflow(int)",
    "public: __thiscall Iostream_init::Iostream_init(void)",
    "__p__osver",
    "const fstream::`vftable'",
    "labs",
    "_dup",
    "public: int __thiscall istream::sync(void)",
    "public: class ostream & __thiscall ostream::operator<<(void const *)",
    "const istream_withassign::`vbtable'"
  ],
  "msvfw32.dll": [
    "ICOpen",
    "DrawDibChangePalette",
    "GetOpenFileNamePreviewW",
    "ICCompressorChoose",
    "GetOpenFileNamePreview",
    "DrawDibClose",
    "ICCompress",
    "ICMThunk32",
    "ICSeqCompressFrame",
    "ICDraw",
    "ICRemove",
    "DrawDibStart",
    "MCIWndCreateA",
    "VideoForWindowsVersion",
    "DrawDibDraw",
    "GetSaveFileNamePreviewA",
    "DrawDibGetBuffer",
    "StretchDIB",
    "ICSendMessage",
    "DrawDibProfileDisplay",
    "DrawDibTime",
    "ICGetDisplayFormat",
    "DrawDibSetPalette",
    "ICInfo",
    "MCIWndRegisterClass",
    "GetOpenFileNamePreviewA",
    "DrawDibGetPalette",
    "ICSeqCompressFrameEnd",
    "MCIWndCreate",
    "DrawDibStop",
    "ICDecompress",
    "MCIWndCreateW",
    "ICImageDecompress",
    "ICOpenFunction",
    "DrawDibEnd",
    "DrawDibRealize",
    "ICLocate",
    "ICDrawBegin",
    "ICCompressorFree",
    "GetSaveFileNamePreviewW",
    "DrawDibOpen",
    "DrawDibBegin",
    "ICGetInfo",
    "ICInstall",
    "ICSeqCompressFrameStart",
    "ICClose",
    "ICImageCompress"
  ],
  "msvidc32.dll": [
    "DriverProc"
  ],
  "msvidctl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msw3prt.dll": [
    "GetExtensionVersion",
    "HttpExtensionProc"
  ],
  "mswdat10.dll": "No exports",
  "mswebdvd.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "mswmdm.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "mswsock.dll": [
    "dn_expand",
    "rresvport",
    "NSPStartup",
    "rcmd",
    "SetServiceA",
    "GetNameByTypeA",
    "GetServiceA",
    "GetTypeByNameW",
    "WSPStartup",
    "AcceptEx",
    "GetTypeByNameA",
    "StopWsdpService",
    "GetAddressByNameW",
    "StartWsdpService",
    "NPLoadNameSpaces",
    "inet_network",
    "EnumProtocolsA",
    "SetServiceW",
    "WSARecvEx",
    "GetNameByTypeW",
    "GetAddressByNameA",
    "rexec",
    "SvchostPushServiceGlobals",
    "GetAcceptExSockaddrs",
    "EnumProtocolsW",
    "s_perror",
    "GetServiceW",
    "MigrateWinsockConfiguration",
    "sethostname",
    "getnetbyname",
    "ServiceMain",
    "TransmitFile"
  ],
  "mswstr10.dll": "No exports",
  "msxbde40.dll": [
    "DllUnregisterServer",
    "DllRegisterServer"
  ],
  "msxml.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "msxml2.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllMain",
    "DllUnregisterServer"
  ],
  "msxml2r.dll": [
    "DllMain"
  ],
  "msxml3.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllMain",
    "DllUnregisterServer"
  ],
  "msxml3r.dll": "No exports",
  "msxml6.dll": [
    "DllSetProperty",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msxml6r.dll": "No exports",
  "msxmlr.dll": "No exports",
  "msyuv.dll": [
    "DriverProc"
  ],
  "mtxclu.dll": [
    "MtxCluGetDTCLogSizeW",
    "MtxCluListNodesA",
    "MtxCluGetListOfVirtualServersA",
    "MtxCluGetListOfSharedDisksOnVirtualServerW",
    "MtxCluQueryDtcResourceValueW",
    "MtxCluIsSharedDiskA",
    "MtxCluInitialize",
    "MtxCluGetDTCStatusW",
    "DllMain",
    "MtxCluGetDTCVirtualServerNameA",
    "MtxCluGetDTCLogPathA",
    "MtxCluRemoveAllRegistryCheckpoints",
    "MtxCluBringOnlineDTC2W",
    "MtxCluCheckIfOkToStartDtc",
    "MtxCluTakeOfflineDTCW",
    "MtxCluIsNetworkNameInLocalClusterW",
    "MtxCluCheckpointRegistryW",
    "MtxCluGetDtcUserInfo",
    "MtxCluDeleteDtcResourceKeyW",
    "MtxCluGetJoinMasterW",
    "MtxCluRegisterDTCResourceA",
    "MtxCluIsVirtualServerInLocalClusterW",
    "MtxCluIsClusterPresentExW",
    "MtxCluIsClusterPresent",
    "MtxCluCreateRecommendedLogInfo",
    "MtxCluCheckpointRegistryA",
    "MtxCluGetDTCLogSizeA",
    "MtxCluIsSameNodeA",
    "MtxCluDoesDTCResourceExistW",
    "MtxCluBringOnlineDTCA",
    "MtxCluGetDTCIpAddressW",
    "MtxCluRegisterDTCResourceW",
    "MtxCluBringOnlineDTC2A",
    "MtxCluSetDtcUserInfo",
    "MtxCluGetComputerNameW",
    "MtxCluGetListOfSharedDisksOnVirtualServerA",
    "MtxCluMoveDTCGroupW",
    "MtxCluGetSecurityRegValue",
    "MtxCluIsSameNodeW",
    "MtxCluGetListOfSharedDisksW",
    "MtxCluDoesDTCResourceExistA",
    "MtxCluIsVirtualServerInLocalClusterA",
    "MtxCluGetDTCVirtualServerNameW",
    "MtxCluUninitialize",
    "MtxCluGetListOfVirtualServersW",
    "MtxCluGetListOfSharedDisksA",
    "Startup",
    "MtxCluSetDTCLogSizeA",
    "MtxCluNodeNotifyA",
    "MtxCluSetDTCLogSizeW",
    "MtxCluListNodesW",
    "MtxCluCreateDtcResourceW",
    "MtxCluCheckPointCryptoW",
    "MtxCluBringOnlineDTCW",
    "MtxCluDeleteDtcResourceValueW",
    "MtxCluSetDTCLogPathA",
    "MtxCluGetDTCLogPathW",
    "MtxCluRemoveCheckpointRegistryW",
    "MtxCluIsClusterPresentExA",
    "MtxCluGetDTCStatusA",
    "MtxCluMoveDTCGroupA",
    "MtxCluGetDTCInstallVersion",
    "MtxCluUpgradeDtcResourceW",
    "MtxCluSetSecurityRegValue",
    "MtxCluGetDTCIpAddressA",
    "MtxCluTakeOfflineDTCA",
    "WasDTCInstalledBySQL",
    "MtxCluCloseNodeNotify",
    "MtxCluNodeNotifyW",
    "MtxCluSetDTCLogPathW",
    "MtxCluGetDTCInstallState",
    "MtxCluCreateDtcResourceKeyW",
    "MtxCluGetDTCOwnerW",
    "MtxCluGetJoinMasterA",
    "MtxCluIsSameClusterW",
    "MtxCluJoinDTCResource",
    "MtxCluCreateDtcResourceValueW",
    "MtxCluGetNodeClusterStateW",
    "MtxCluRemoveCheckpointRegistryA",
    "MtxCluGetDTCOwnerA",
    "MtxCluIsSharedDiskW",
    "MtxCluTakeOfflineDTC2W",
    "MtxCluGetComputerNameA"
  ],
  "mtxdm.dll": [
    "GetDispenserManager"
  ],
  "mtxex.dll": [
    "SafeRef",
    "GetObjectContext",
    "DllGetClassObject",
    "MTSCreateActivity"
  ],
  "mtxlegih.dll": [
    "TryLegInterfaceFirst"
  ],
  "mtxoci.dll": [
    "osetpi",
    "oerhms",
    "oparse",
    "orol",
    "obndrn",
    "ocan",
    "odescr",
    "oexec",
    "GetXaSwitch",
    "oexfet",
    "oermsg",
    "odefin",
    "ocon",
    "oexn",
    "ologTransacted",
    "ofen",
    "DllRegisterServer",
    "MTxolog",
    "odefinps",
    "ocom",
    "MTxOciRegisterCursor",
    "Enlist",
    "obreak",
    "olog",
    "oclose",
    "ocof",
    "ologof",
    "opinit",
    "obndrv",
    "ofetch",
    "ogetpi",
    "oopen",
    "oopt",
    "obndra",
    "oflng",
    "MTxOciGetVersion",
    "obindps",
    "MTxOciInit",
    "odessp",
    "DllUnregisterServer"
  ],
  "mycomput.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "mydocs.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllInstall",
    "DllRegisterServer",
    "DllUnregisterServer",
    "PerUserInit"
  ],
  "napipsec.dll": [
    "UninitializeNapIpsecRp",
    "InitializeNapIpsecRp"
  ],
  "napmontr.dll": [
    "DllMain",
    "InitHelperDll"
  ],
  "narrhook.dll": [
    "int __stdcall UninitKeys(void)",
    "int __stdcall GetReviewStyle(void)",
    "int __stdcall GetAnnounceWindow(void)",
    "void __stdcall SetReviewStyle(int)",
    "int __stdcall GetTrackCaret(void)",
    "int __stdcall InitMSAA(void)",
    "int __stdcall GetAnnounceToolTips(void)",
    "int __stdcall GetReviewLevel(void)",
    "int __stdcall GetTrackSecondary(void)",
    "void __stdcall SetAnnounceMenu(int)",
    "int __stdcall GetAnnounceMenu(void)",
    "void __stdcall SetTrackInputFocus(int)",
    "int __stdcall GetEchoChars(void)",
    "int __stdcall UnInitMSAA(void)",
    "void __stdcall SetAnnouncePopup(int)",
    "void __stdcall GetCurrentText(unsigned short *,int)",
    "unsigned short * __stdcall lstrcatn(unsigned short *,unsigned short *,int)",
    "void __stdcall SetEchoChars(int)",
    "void __stdcall BackToApplication(void)",
    "void __stdcall SetAnnounceToolTips(int)",
    "void __stdcall SetReviewLevel(int)",
    "int __stdcall GetAnnouncePopup(void)",
    "void __stdcall SetTrackCaret(int)",
    "void __stdcall SetCurrentText(unsigned short const *)",
    "void __stdcall SetTrackSecondary(int)",
    "void __stdcall SetAnnounceWindow(int)",
    "int __stdcall InitKeys(struct HWND__ *)",
    "int __stdcall GetTrackInputFocus(void)"
  ],
  "ncobjapi.dll": [
    "WmiCreateObject",
    "WmiIsObjectActive",
    "WmiEventSourceDisconnect",
    "WmiEventSourceConnect",
    "WmiCreateObjectWithFormat",
    "WmiCommitObject",
    "WmiAddObjectProp",
    "WmiCreateObjectWithProps",
    "WmiDestroyObject",
    "WmiSetAndCommitObject"
  ],
  "ncxpnt.dll": [
    "EnumMatchingNetBindings",
    "IsMSClientInstalled",
    "RestartNetAdapter",
    "TestRunDll",
    "IsAutodialEnabled",
    "NetConnFree",
    "HrWideCharToMultiByte",
    "IsSharingInstalled",
    "IsAccessControlUserLevel",
    "NetConnAlloc",
    "InstallTCPIP",
    "IsClientInstalled",
    "EnableAutodial",
    "IsProtocolInstalled",
    "EnumNetAdapters",
    "IsAdapterDisconnected",
    "GetDefaultDialupConnection",
    "InstallSharing",
    "HrFromLastWin32Error",
    "InstallMSClient",
    "DisableUserLevelAccessControl",
    "HrEnableDhcp",
    "SetDefaultDialupConnection"
  ],
  "nddeapi.dll": [
    "NDdeIsValidAppTopicListW",
    "NDdeShareDelA",
    "NDdeShareEnumW",
    "NDdeIsValidShareNameA",
    "NDdeGetShareSecurityW",
    "NDdeShareEnumA",
    "NDdeShareGetInfoA",
    "NDdeTrustedShareEnumW",
    "NDdeIsValidAppTopicListA",
    "NDdeGetErrorStringW",
    "NDdeGetTrustedShareW",
    "NDdeSetShareSecurityW",
    "NDdeGetErrorStringA",
    "NDdeShareSetInfoA",
    "NDdeShareSetInfoW",
    "NDdeShareDelW",
    "NDdeIsValidShareNameW",
    "NDdeShareAddA",
    "NDdeSetTrustedShareW",
    "NDdeShareAddW",
    "NDdeSpecialCommandA",
    "NDdeGetTrustedShareA",
    "NDdeSetTrustedShareA",
    "NDdeTrustedShareEnumA",
    "NDdeGetShareSecurityA",
    "NDdeShareGetInfoW",
    "NDdeSpecialCommandW",
    "NDdeSetShareSecurityA"
  ],
  "nddenb32.dll": [
    "NDDEGetNewConnection",
    "NDDEShutdown",
    "Configure",
    "NDDEGetCAPS",
    "ConfigureDlgProc",
    "NDDEXmtPacket",
    "NDDEDeleteConnection",
    "LogDebugInfo",
    "NDDESetConnectionConfig",
    "NDDEGetConnectionConfig",
    "NDDEGetConnectionStatus",
    "NDDERcvPacket",
    "NDDEInit",
    "NDDEAddConnection",
    "NDDETimeSlice"
  ],
  "netapi32.dll": [
    "NetGetJoinableOUs",
    "NetFileGetInfo",
    "DsDeregisterDnsHostRecordsA",
    "I_NetServerTrustPasswordsGet",
    "NetShareDel",
    "NetSetPrimaryComputerName",
    "NetWkstaUserEnum",
    "NetShareGetInfo",
    "NetShareCheck",
    "I_NetDatabaseSync",
    "DsValidateSubnetNameA",
    "NetLocalGroupGetInfo",
    "RxNetUserPasswordSet",
    "DsRoleDnsNameToFlatName",
    "NetConfigGet",
    "NetSessionGetInfo",
    "NetWkstaSetInfo",
    "NetpAllocConfigName",
    "NetGroupEnum",
    "NetReplExportDirDel",
    "DsGetDcSiteCoverageA",
    "I_NetDatabaseDeltas",
    "NlBindingSetAuthInfo",
    "NetpNetBiosReceive",
    "NetUseDel",
    "NetpNtStatusToApiStatus",
    "I_BrowserResetStatistics",
    "NetReplExportDirEnum",
    "NetUseEnum",
    "NetpParmsQueryUserProperty",
    "NetUserGetLocalGroups",
    "NetpHexDump",
    "NetJoinDomain",
    "RxNetAccessGetInfo",
    "Netbios",
    "DsRoleAbortDownlevelServerUpgrade",
    "NetAddAlternateComputerName",
    "NetDfsSetSecurity",
    "I_NetNameCompare",
    "NetErrorLogWrite",
    "NetConfigSet",
    "I_NetDfsCreateLocalPartition",
    "NetEnumerateComputerNames",
    "NetReplExportDirUnlock",
    "I_NetAccountDeltas",
    "DsGetDcNameWithAccountA",
    "NetUserEnum",
    "NetDfsRemoveFtRootForced",
    "NetServiceEnum",
    "NetpParmsQueryUserPropertyWithLength",
    "I_BrowserResetNetlogonState",
    "NetpStringToNetBiosName",
    "NetUserSetGroups",
    "NetServerDiskEnum",
    "I_NetDfsSetLocalVolumeState",
    "I_NetDfsDeleteLocalPartition",
    "NetServerTransportDel",
    "NetDfsSetClientInfo",
    "NetSessionEnum",
    "NetWkstaTransportAdd",
    "I_NetDfsIsThisADomainName",
    "NetAuditRead",
    "I_NetServerReqChallenge",
    "DsRoleGetDcOperationResults",
    "NetpOpenConfigData",
    "I_NetGetForestTrustInformation",
    "NetDfsSetStdContainerSecurity",
    "NetReplImportDirEnum",
    "NetRemoveAlternateComputerName",
    "DsRoleGetPrimaryDomainInformation",
    "NetDfsManagerInitialize",
    "NetpInitOemString",
    "DsGetDcCloseW",
    "NetpNetBiosCall",
    "NetapipBufferAllocate",
    "DsMergeForestTrustInformationW",
    "NetServerEnumEx",
    "NetDfsAddStdRoot",
    "DsValidateSubnetNameW",
    "NetWkstaUserSetInfo",
    "NetReplExportDirSetInfo",
    "NetDfsGetStdContainerSecurity",
    "NetApiBufferSize",
    "RxNetAccessDel",
    "I_NetlogonComputeServerDigest",
    "DsAddressToSiteNamesExW",
    "NetpGetConfigValue",
    "I_NetServerPasswordGet",
    "NetBrowserStatisticsGet",
    "NetRegisterDomainNameChangeNotification",
    "I_NetServerSetServiceBits",
    "I_NetServerSetServiceBitsEx",
    "I_NetGetDCList",
    "NetReplImportDirGetInfo",
    "DsAddressToSiteNamesW",
    "NetpUpgradePreNT5JoinInfo",
    "I_NetPathCanonicalize",
    "NetDfsSetFtContainerSecurity",
    "I_BrowserQueryOtherDomains",
    "DsRoleDcAsReplica",
    "NetpAllocWStrFromStr",
    "NetDfsRemoveStdRoot",
    "NetLocalGroupAdd",
    "NetLocalGroupEnum",
    "NetServerComputerNameDel",
    "NetServerComputerNameAdd",
    "NetLocalGroupAddMember",
    "NetUserSetInfo",
    "NetSessionDel",
    "NetGroupSetUsers",
    "NetLocalGroupSetMembers",
    "NetApiBufferFree",
    "NetShareEnumSticky",
    "DsRoleUpgradeDownlevelServer",
    "NetRenameMachineInDomain",
    "NetMessageNameAdd",
    "NetConfigGetAll",
    "NetDfsManagerGetConfigInfo",
    "NetServerTransportEnum",
    "NetpDbgPrint",
    "NetAlertRaise",
    "NetpwPathCanonicalize",
    "I_NetLogonControl",
    "NetMessageBufferSend",
    "NetReplExportDirAdd",
    "NetpParmsSetUserProperty",
    "NetLogonGetTimeServiceParentDomain",
    "NetLocalGroupSetInfo",
    "NetDfsRemoveFtRoot",
    "I_NetNameValidate",
    "I_NetLogonUasLogon",
    "DsGetDcSiteCoverageW",
    "DsRoleServerSaveStateForUpgrade",
    "NetMessageNameEnum",
    "NetpwNameCompare",
    "DsRoleFreeMemory",
    "NetpLogonPutUnicodeString",
    "NetLocalGroupGetMembers",
    "NetpNetBiosGetAdapterNumbers",
    "NetpCreateSecurityObject",
    "NetpSmbCheck",
    "I_NetAccountSync",
    "NetpAccessCheckAndAudit",
    "I_NetLogonSendToSam",
    "DsGetDcNextW",
    "NetGroupAddUser",
    "NetUseAdd",
    "NetApiBufferAllocate",
    "I_BrowserQueryEmulatedDomains",
    "I_NetPathCompare",
    "NetRemoteTOD",
    "I_NetServerPasswordSet",
    "DsRoleDcAsDc",
    "NetpCloseConfigData",
    "NetReplSetInfo",
    "NetpAddTlnFtinfoEntry",
    "DsGetForestTrustInformationW",
    "I_NetPathType",
    "I_NetLogonSamLogoff",
    "DsAddressToSiteNamesA",
    "I_BrowserQueryStatistics",
    "NetLocalGroupDelMember",
    "NetpwPathCompare",
    "NetpAssertFailed",
    "I_BrowserSetNetlogonState",
    "I_NetDfsGetFtServers",
    "I_NetLogonControl2",
    "NetDfsGetInfo",
    "NetReplExportDirGetInfo",
    "I_NetServerAuthenticate2",
    "NetStatisticsGet",
    "DsDeregisterDnsHostRecordsW",
    "NetpIsUncComputerNameValid",
    "NetLogonSetServiceBits",
    "DsRoleGetDatabaseFacts",
    "NetpPackString",
    "NetpReleasePrivilege",
    "NetDfsGetSecurity",
    "NetServerGetInfo",
    "NetScheduleJobEnum",
    "NetDfsRemove",
    "NetReplImportDirDel",
    "NetpDeleteSecurityObject",
    "RxNetAccessEnum",
    "I_NetListCanonicalize",
    "NetpCopyStringToBuffer",
    "RxRemoteApi",
    "NetWkstaUserGetInfo",
    "NetUserModalsSet",
    "NetServerSetInfo",
    "NetpwPathType",
    "NetLocalGroupDelMembers",
    "NetUnregisterDomainNameChangeNotification",
    "NetUnjoinDomain",
    "DsRoleGetDcOperationProgress",
    "DsGetDcOpenA",
    "NetAuditWrite",
    "DsGetDcNameWithAccountW",
    "NetRemoteComputerSupports",
    "I_NetDatabaseSync2",
    "I_NetWkstaResetDfsCache",
    "NetpNetBiosDelName",
    "I_NetDfsModifyPrefix",
    "DsGetDcNameW",
    "I_NetNameCanonicalize",
    "NetpNetBiosReset",
    "NetScheduleJobDel",
    "I_BrowserDebugTrace",
    "NetShareAdd",
    "NetEnumerateTrustedDomains",
    "NetUserModalsGet",
    "DsRoleCancel",
    "NetReplExportDirLock",
    "NetDfsGetDcAddress",
    "NetpGetConfigBool",
    "NetGroupGetUsers",
    "NetQueryDisplayInformation",
    "NetDfsAddStdRootForced",
    "NetGetAnyDCName",
    "NetGroupDelUser",
    "NetDfsSetInfo",
    "NetpwNameValidate",
    "NetReplImportDirLock",
    "NetUseGetInfo",
    "NetLocalGroupDel",
    "NetWkstaTransportDel",
    "I_NetServerAuthenticate",
    "NetDfsMove",
    "NlBindingAddServerToCache",
    "NetpGetComputerName",
    "NetpInitFtinfoContext",
    "NetApiBufferReallocate",
    "NetpwNameCanonicalize",
    "I_NetDfsManagerReportSiteInfo",
    "NetServerTransportAddEx",
    "NetShareEnum",
    "NetpApiStatusToNtStatus",
    "NetpCleanFtinfoContext",
    "NetReplGetInfo",
    "RxNetServerEnum",
    "NetFileEnum",
    "NetpLocalTimeZoneOffset",
    "DsRoleDemoteDc",
    "NetAuditClear",
    "NetLocalGroupAddMembers",
    "NetValidateName",
    "DsGetDcOpenW",
    "DsGetSiteNameA",
    "I_NetlogonGetTrustRid",
    "RxNetAccessGetUserPerms",
    "NetpParmsUserPropertyFree",
    "NetpIsRemote",
    "I_NetDfsGetVersion",
    "NetUserChangePassword",
    "I_NetLogonSamLogon",
    "I_NetDfsDeleteExitPoint",
    "NetUserDel",
    "I_NetDfsCreateExitPoint",
    "NetGetDisplayInformationIndex",
    "NetDfsAdd",
    "NetpStoreIntialDcRecord",
    "I_NetDfsSetServerInfo",
    "I_NetLogonGetDomainInfo",
    "NetGroupDel",
    "NetDfsGetFtContainerSecurity",
    "I_NetDatabaseRedo",
    "NetConnectionEnum",
    "DsEnumerateDomainTrustsA",
    "NetpNetBiosStatusToApiStatus",
    "NetServiceControl",
    "NetpSetFileSecurity",
    "NetpAllocStrFromWStr",
    "NetScheduleJobAdd",
    "NetpGetConfigDword",
    "NetUserAdd",
    "I_NetLogonSamLogonWithFlags",
    "NetServerTransportAdd",
    "NetpNetBiosSend",
    "RxNetAccessSetInfo",
    "I_NetServerAuthenticate3",
    "NetServiceInstall",
    "NetpTStrArrayEntryCount",
    "I_NetLogonUasLogoff",
    "NetMessageNameGetInfo",
    "I_BrowserServerEnum",
    "NetDfsGetClientInfo",
    "NetGetDCName",
    "NetpAllocFtinfoEntry",
    "NetpMergeFtinfo",
    "NetGroupSetInfo",
    "NetServerEnum",
    "DsGetDcNextA",
    "NetGroupAdd",
    "NetpAccessCheck",
    "NetDfsRename",
    "NetErrorLogRead",
    "NetWkstaTransportEnum",
    "I_NetListTraverse",
    "NetDfsEnum",
    "NetpNetBiosAddName",
    "I_BrowserDebugCall",
    "NetMessageNameDel",
    "DsGetSiteNameW",
    "NetpAllocWStrFromWStr",
    "NetpGetConfigTStrArray",
    "NetpGetPrivilege",
    "DsAddressToSiteNamesExA",
    "CredpValidateTargetName",
    "I_NetlogonComputeClientDigest",
    "NetGetJoinInformation",
    "NetpCopyFtinfoContext",
    "DsEnumerateDomainTrustsW",
    "NetServiceGetInfo",
    "NetpGetFileSecurity",
    "NetErrorLogClear",
    "RxNetAccessAdd",
    "NetReplImportDirUnlock",
    "NetGroupGetInfo",
    "NetScheduleJobGetInfo",
    "NetWkstaGetInfo",
    "NlBindingRemoveServerFromCache",
    "NetpGetDomainName",
    "I_NetDfsFixLocalVolume",
    "NetReplImportDirAdd",
    "NetFileClose",
    "I_NetServerPasswordSet2",
    "NetShareDelSticky",
    "NetpNetBiosHangup",
    "NetUserGetGroups",
    "NetDfsAddFtRoot",
    "NetAlertRaiseEx",
    "NetUserGetInfo",
    "NetDfsManagerSendSiteInfo",
    "NetShareSetInfo",
    "I_NetServerGetTrustInfo",
    "NetpParmsSetUserPropertyWithLength",
    "DsGetDcNameA",
    "I_NetLogonSamLogonEx"
  ],
  "netcfgx.dll": [
    "UpdateLanaConfigUsingAnswerfile",
    "RasRemoveBindings",
    "NetCfgDiagFromCommandArgs",
    "public: struct WLBS_REG_PARAMS & __thiscall WLBS_REG_PARAMS::operator=(struct WLBS_REG_PARAMS const &)",
    "SvchostChangeSvchostGroup",
    "HrDiAddComponentToINetCfg",
    "DllCanUnloadNow",
    "LanaCfgFromCommandArgs",
    "RasCountBindings",
    "RasAddBindings",
    "DllGetClassObject",
    "NetClassInstaller",
    "DllRegisterServer",
    "ModemClassCoInstaller",
    "NetPropPageProvider",
    "DllUnregisterServer",
    "NetCfgDiagRepairRegistryBindings"
  ],
  "netevent.dll": "No exports",
  "neth.dll": "No exports",
  "netid.dll": [
    "CreateNetIDPropertyPage",
    "ShowDcNotFoundErrorDialog"
  ],
  "netlogon.dll": [
    "I_NetNotifyNetlogonDllHandle",
    "I_NetLogonAddressToSiteName",
    "I_NetLogonCloseChangeLog",
    "I_NetLogonGetIpAddresses",
    "I_NetNotifyDsChange",
    "I_NetLogonGetSerialNumber",
    "I_NetLogonNewChangeLog",
    "InitSecurityInterfaceW",
    "I_NetLogonGetAuthDataEx",
    "I_NetLogonGetDirectDomain",
    "I_NetNotifyNtdsDsaDeletion",
    "I_NetLogonReadChangeLog",
    "I_NetNotifyDelta",
    "I_NetNotifyRole",
    "I_NetLogonSetServiceBits",
    "DsrGetDcName",
    "I_NetLogonLdapLookup",
    "NlNetlogonMain",
    "NetrLogonSamLogon",
    "I_DsGetDcCache",
    "I_NetNotifyMachineAccount",
    "NetrLogonSamLogoff",
    "I_NetLogonMixedDomain",
    "I_NetLogonAppendChangeLog",
    "I_NetLogonSendToSamOnPdc",
    "DsrGetDcNameEx2",
    "I_NetLogonLdapLookupEx",
    "I_NetNotifyTrustedDomain",
    "I_NetLogonFree"
  ],
  "netman.dll": [
    "RasEventNotify",
    "HrRasConnectionNameFromGuid",
    "HrPnpInstanceIdFromGuid",
    "HrGetPnpDeviceStatus",
    "HrLanConnectionNameFromGuidOrPath",
    "ProcessQueue",
    "HrQueryLanMediaState",
    "DllRegisterServer",
    "GetClientAdvises",
    "DllUnregisterServer",
    "ServiceMain",
    "NetManDiagFromCommandArgs"
  ],
  "netmsg.dll": "No exports",
  "netplwiz.dll": [
    "NetPlacesWizardDoModal",
    "ClearAutoLogon",
    "PassportWizardRunDll",
    "AddNetPlaceRunDll",
    "DllCanUnloadNow",
    "UsersRunDll",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllInstall",
    "PublishRunDll",
    "DllMain",
    "SHDisconnectNetDrives",
    "DllUnregisterServer",
    "NetAccessWizard"
  ],
  "netrap.dll": [
    "RapLastPointerOffset",
    "RapStructureSize",
    "RapGetFieldSize",
    "RapAuxDataCountOffset",
    "RapAuxDataCount",
    "RapArrayLength",
    "RapIsValidDescriptorSmb",
    "RapParmNumDescriptor",
    "RapTotalSize",
    "RapConvertSingleEntry",
    "RapStructureAlignment",
    "RapExamineDescriptor",
    "RapAsciiToDecimal",
    "RapConvertSingleEntryEx"
  ],
  "netshell.dll": [
    "HrLaunchConnectionEx",
    "HrGetInstanceGuidOfPreNT5NetCardInstance",
    "NetSetupInstallSoftware",
    "NetSetupRequestWizardPages",
    "NcIsValidConnectionName",
    "NormalizeExtendedStatus",
    "HrOemUpgrade",
    "HrGetAnswerFileParametersForNetCard",
    "NetSetupSetProgressCallback",
    "HrGetStatusStringFromNetConExtendedStatus",
    "NetSetupPrepareSysPrep",
    "RepairConnection",
    "DllRegisterServer",
    "DllUnregisterServer",
    "NetSetupFinishInstall",
    "NcFreeNetconProperties",
    "HrIsIpStateCheckingEnabled",
    "NetSetupAddRasConnection",
    "HrGetExtendedStatusFromNCS",
    "HrLaunchConnection",
    "HrGetNetConExtendedStatusFromINetConnection",
    "RaiseSupportDialog",
    "DllGetClassObject",
    "HrRenameConnection",
    "HrCreateDesktopIcon",
    "HrLaunchNetworkOptionalComponents",
    "HrGetNetConExtendedStatusFromGuid",
    "HrGetIconFromMediaType",
    "DllCanUnloadNow",
    "InvokeDunFile",
    "StartNCW",
    "DoInitialCleanup",
    "HrRunWizard"
  ],
  "netui0.dll": [
    "public: __thiscall ONE_SHOT_HEAP::ONE_SHOT_HEAP(unsigned int,int)",
    "public: int __thiscall INTL_PROFILE::IsDayLZero(void)const",
    "public: long __thiscall INTL_PROFILE::QueryDateSeparator(class NLS_STR *)const",
    "public: long __thiscall INTL_PROFILE::QueryShortDateString(class WIN_TIME const &,class NLS_STR *)const",
    "public: void __thiscall SLIST::_DebugPrint(void)const",
    "public: int __thiscall ISTR::operator==(class ISTR const &)const",
    "protected: void __thiscall SLIST::SetIters(class SL_NODE *)",
    "protected: void __thiscall DLIST::SetIters(class DL_NODE *)",
    "protected: long __thiscall FS_ENUM::PopDir(void)",
    "public: virtual void __thiscall OUTPUT_TO_STDERR::Render(unsigned short const *)",
    "public: long __thiscall REG_ENUM::NextSubKey(class REG_KEY_INFO_STRUCT *)",
    "public: int __thiscall ISTR::operator>(class ISTR const &)const",
    "protected: void __thiscall TREE::Unlink(void)",
    "public: void __thiscall BITFIELD::operator&=(unsigned long)",
    "protected: int __thiscall SLIST::CheckIter(class ITER_SL *)",
    "protected: __thiscall BASE::BASE(void)",
    "protected: unsigned char * __thiscall BITFIELD::QueryBitPos(unsigned int,unsigned int)const",
    "private: virtual void __thiscall OUTPUT_TO_NUL::EndOfLine(void)",
    "public: __thiscall FMX::FMX(struct HWND__ *)",
    "private: int __thiscall NLS_STR::Realloc(unsigned int)",
    "public: __thiscall WIN_TIME::WIN_TIME(unsigned long,int)",
    "public: class NLS_STR const * __thiscall HUATOM::QueryNls(void)const",
    "public: unsigned char * __thiscall LOGON_HOURS_SETTING::QueryHoursBlock(void)const",
    "public: unsigned int __thiscall NLS_STR::_QueryTextLength(void)const",
    "public: __thiscall TCHAR_STR_IMPL::TCHAR_STR_IMPL(unsigned short)",
    "public: int __thiscall LOGON_HOURS_SETTING::ConvertFromGMT(void)",
    "UserPreferenceQueryBool",
    "public: unsigned int __thiscall LOGON_HOURS_SETTING::QueryByteCount(void)const",
    "public: static void * __stdcall ALLOC_BASE::operator new(unsigned int)",
    "public: void __thiscall DLIST::_DebugPrint(void)const",
    "public: long __thiscall DLIST::Append(void *)",
    "public: virtual __thiscall W32_DIR_BLOCK::~W32_DIR_BLOCK(void)",
    "public: unsigned char * __thiscall ONE_SHOT_HEAP::Alloc(unsigned int)",
    "protected: int __thiscall BITFIELD::IsAllocated(void)const",
    "public: class ITER_STRLIST * __thiscall DIR_BLOCK::QueryDirsIter(void)",
    "public: __thiscall NLS_STR::NLS_STR(unsigned int)",
    "public: long __thiscall NLS_STR::MapCopyFrom(char const *,unsigned int)",
    "public: class NLS_STR * __thiscall NLS_STR::QuerySubStr(class ISTR const &,class ISTR const &)const",
    "public: __thiscall BITFIELD::BITFIELD(unsigned long)",
    "public: class ALIAS_STR const & __thiscall ALIAS_STR::operator=(class NLS_STR const &)",
    "public: virtual void __thiscall OUTPUT_TO_AUX::Render(unsigned short const *,unsigned int)",
    "public: __thiscall REG_KEY_CREATE_STRUCT::REG_KEY_CREATE_STRUCT(void)",
    "public: __thiscall NLS_STR::~NLS_STR(void)",
    "private: void __thiscall TREE::SetParent(class TREE *)",
    "public: class DBGSTREAM & __thiscall DBGSTREAM::operator<<(__int64)",
    "public: unsigned int __thiscall BITFIELD::QueryCount(void)const",
    "public: __thiscall REG_KEY_INFO_STRUCT::~REG_KEY_INFO_STRUCT(void)",
    "public: unsigned long __thiscall NLS_STR::atoul(void)const",
    "public: __thiscall ITER_SL::~ITER_SL(void)",
    "public: __thiscall W32_FS_ENUM::W32_FS_ENUM(unsigned short const *,unsigned short const *,enum FILE_TYPE,int,unsigned int)",
    "public: int __thiscall NLS_STR::atoi(void)const",
    "private: long __thiscall REG_KEY::QueryKeyValueString(unsigned short const *,unsigned short * *,class NLS_STR *,unsigned long *,long,long *,unsigned long)",
    "public: __thiscall REG_KEY::REG_KEY(struct HKEY__ *,unsigned short const *,unsigned long)",
    "public: __thiscall WIN_TIME::WIN_TIME(struct _FILETIME,int)",
    "public: int __thiscall NLS_STR::_strnicmp(class NLS_STR const &,class ISTR const &,class ISTR const &)const",
    "public: int __thiscall NLS_STR::strcmp(class NLS_STR const &)const",
    "public: class UATOM * __thiscall UATOM_LINKAGE::Fwd(void)",
    "public: long __thiscall INTL_PROFILE::Refresh(void)",
    "public: __thiscall DBGSTREAM::~DBGSTREAM(void)",
    "public: int __thiscall NLS_STR::InsertStr(class NLS_STR const &,class ISTR &)",
    "public: __thiscall DEC_STR::~DEC_STR(void)",
    "public: __thiscall WCHAR_STRING::WCHAR_STRING(char const *,unsigned int)",
    "public: class STRLIST * __thiscall DIR_BLOCK::QueryDirs(void)",
    "UserProfileFree",
    "public: int __thiscall NLS_STR::operator==(class NLS_STR const &)const",
    "public: int __thiscall WIN_TIME::QueryDayOfWeek(void)const",
    "public: int __thiscall NLS_STR::_stricmp(class NLS_STR const &,class ISTR const &)const",
    "public: __thiscall STRLIST::~STRLIST(void)",
    "public: long __thiscall SLIST::Insert(void *,class ITER_SL &)",
    "public: int __thiscall DIR_BLOCK::IsDir(void)",
    "private: class NLS_STR * __thiscall NLS_STR::QuerySubStr(class ISTR const &,unsigned int)const",
    "public: int __thiscall NLS_STR::strcspn(class ISTR *,class NLS_STR const &)const",
    "public: virtual void __thiscall OUTPUT_TO_STDOUT::Render(unsigned short const *)",
    "public: int __thiscall INTL_PROFILE::QueryMonthPos(void)const",
    "public: long __thiscall INTL_PROFILE::QueryPMStr(class NLS_STR *)const",
    "public: __thiscall UATOM_REGION::~UATOM_REGION(void)",
    "public: int __thiscall NLS_STR::strcmp(class NLS_STR const &,class ISTR const &,class ISTR const &)const",
    "public: void __thiscall TREE::JoinSiblingRight(class TREE *)",
    "protected: virtual class DIR_BLOCK * __thiscall W32_FS_ENUM::CreateDirBlock(void)",
    "public: unsigned int __thiscall BUFFER::QuerySize(void)const",
    "private: void __thiscall ISTR::SetIch(int)",
    "public: long __thiscall WIN_TIME::SetTime(struct _FILETIME)",
    "public: unsigned int __thiscall SLIST::QueryNumElem(void)",
    "public: class ISTR & __thiscall ISTR::operator=(class ISTR const &)",
    "long __stdcall CheckLocalComm(unsigned short const *)",
    "public: __thiscall BITFIELD::~BITFIELD(void)",
    "public: __thiscall WCHAR_STRING::~WCHAR_STRING(void)",
    "public: int __thiscall NLS_STR::IsOwnerAlloc(void)const",
    "public: int __thiscall NLS_STR::strspn(class ISTR *,class NLS_STR const &,class ISTR const &)const",
    "public: __thiscall NLS_STR::operator unsigned short const *(void)const",
    "private: class UATOM * __thiscall UATOM_MANAGER::Tokenize(unsigned short const *,int)",
    "public: unsigned short const * __thiscall NLS_STR::_QueryPch(void)const",
    "public: static long __stdcall UATOM_MANAGER::Initialize(void)",
    "public: class DBGSTREAM & __thiscall DBGSTREAM::operator<<(char)",
    "unsigned long __stdcall QueryCurrentTimeStamp(void)",
    "public: __thiscall DIR_BLOCK::DIR_BLOCK(void)",
    "public: void __thiscall BITFIELD::SetAllBits(enum BITVALUES)",
    "public: void __thiscall BUFFER::FillOut(void)",
    "public: void * __thiscall TREE::QueryProp(void)const",
    "private: void __thiscall DFSITER_TREE::SetStartNode(class TREE const *)",
    "UserProfileSet",
    "public: void * __thiscall DFSITER_TREE::Next(void)",
    "public: __thiscall NUM_NLS_STR::NUM_NLS_STR(unsigned long)",
    "public: class TREE * __thiscall TREE::QueryLeft(void)const",
    "public: void __thiscall UATOM_LINKAGE::Link(class UATOM_LINKAGE *)",
    "UserProfileQuery",
    "public: __thiscall REG_ENUM::REG_ENUM(class REG_KEY &)",
    "public: int __thiscall LOGON_HOURS_SETTING::QueryHourInDay(unsigned int,unsigned int)const",
    "protected: void * __thiscall DLIST::Unlink(class DL_NODE *)",
    "public: class TREE * __thiscall TREE::QueryParent(void)const",
    "public: long __thiscall REG_KEY::SetValue(unsigned short const *,class STRLIST const *,unsigned long const *)",
    "public: long __thiscall REG_KEY::QueryValue(unsigned short const *,class NLS_STR *,unsigned long,unsigned long *,int)",
    "public: int __thiscall NLS_STR::_stricmp(class NLS_STR const &)const",
    "public: int __thiscall WIN_TIME::QueryDay(void)const",
    "public: class DBGSTREAM & __thiscall DBGSTREAM::operator<<(int)",
    "public: static long __stdcall ERRMAP::MapNTStatus(long,int *,long)",
    "public: long __thiscall HUATOM::QueryError(void)const",
    "protected: void __thiscall BASE::ResetError(void)",
    "public: class DBGSTREAM & __thiscall DBGSTREAM::operator<<(enum DBGSTR_SPECIAL)",
    "public: long __thiscall NLS_STR::MapCopyTo(unsigned short *,unsigned int)const",
    "public: long __thiscall REG_KEY::QueryKeyName(class NLS_STR *)const",
    "long __stdcall CheckUnavailDevice(unsigned short const *,unsigned short *,int *)",
    "public: __thiscall ITER_STRLIST::~ITER_STRLIST(void)",
    "public: __thiscall REG_ENUM::~REG_ENUM(void)",
    "public: long __thiscall DLIST::Insert(void *,class ITER_DL &)",
    "public: __thiscall UATOM::~UATOM(void)",
    "public: long __thiscall SLIST_OF_NLS_STR::Add(class NLS_STR const *)",
    "public: int __thiscall NLS_STR::_strnicmp(class NLS_STR const &,class ISTR const &,class ISTR const &,class ISTR const &)const",
    "public: long __thiscall WIN_TIME::SetTimeLocal(unsigned long)",
    "public: __thiscall UATOM_LINKAGE::~UATOM_LINKAGE(void)",
    "public: long __thiscall REG_KEY::SetValue(unsigned short const *,unsigned long,unsigned long const *)",
    "public: __thiscall ITER_SL_NLS_STR::ITER_SL_NLS_STR(class SLIST &)",
    "private: long __thiscall REG_KEY::QueryKeyValueLong(unsigned short const *,long *,unsigned long *)",
    "protected: class SL_NODE * __thiscall SLIST::FindPrev(class SL_NODE *)",
    "UserProfileEnum",
    "public: virtual void * __thiscall ITER_DL::vNext(void)",
    "public: int __thiscall BITFIELD::IsBitSet(unsigned int)const",
    "public: unsigned int __thiscall FS_ENUM::QueryMaxDepth(void)",
    "public: int __thiscall WIN_TIME::QueryMinute(void)const",
    "public: long __cdecl NLS_STR::InsertParams(unsigned int,class NLS_STR const *,...)",
    "public: void __thiscall SLIST_OF_DIR_BLOCK::Clear(void)",
    "unsigned short * __stdcall strcpy(unsigned short *,class NLS_STR const &)",
    "public: long __thiscall REG_KEY::QueryValue(unsigned short const *,unsigned long *,unsigned long *)",
    "public: void * __thiscall DLIST::Remove(class RITER_DL &)",
    "long __stdcall CheckLocalDrive(unsigned short const *)",
    "public: virtual unsigned int __thiscall W32_DIR_BLOCK::QueryAttr(void)",
    "public: void * __thiscall DLIST::Remove(class ITER_DL &)",
    "long __stdcall CheckLocalLpt(unsigned short const *)",
    "public: __thiscall ALIAS_STR::ALIAS_STR(unsigned short const *)",
    "public: void __thiscall BUFFER::Trim(void)",
    "public: unsigned int __thiscall BITFIELD::QueryAllocSize(void)const",
    "protected: __thiscall HEAP_BASE::HEAP_BASE(int,int)",
    "public: long __thiscall FORWARDING_BASE::QueryError(void)const",
    "private: int __thiscall NLS_STR::Alloc(unsigned int)",
    "public: int __thiscall INTL_PROFILE::IsYrCentury(void)const",
    "protected: unsigned int __thiscall DFSITER_TREE::QueryMaxDepth(void)const",
    "public: class DBGSTREAM & __thiscall DBGSTREAM::operator<<(unsigned short const *)",
    "public: __thiscall REG_VALUE_INFO_STRUCT::~REG_VALUE_INFO_STRUCT(void)",
    "public: __thiscall TCHAR_STR::TCHAR_STR(unsigned short)",
    "public: static void * __stdcall ALLOC_BASE::operator new(unsigned int,void *)",
    "NETUI_IsDBCS",
    "public: long __thiscall NLS_STR::InsertParams(class NLS_STR const * *)",
    "public: unsigned int __thiscall NLS_STR::strlen(void)const",
    "protected: void __thiscall HEAP_BASE::SetItem(int,void *)",
    "public: long __thiscall LOGON_HOURS_SETTING::SetFromBits(unsigned char const *,unsigned int)",
    "public: __thiscall BITFIELD::BITFIELD(unsigned char const *,unsigned int,unsigned int)",
    "public: __thiscall BITFIELD::BITFIELD(class BITFIELD const &)",
    "public: long __thiscall REG_KEY::SetValue(class REG_VALUE_INFO_STRUCT *)",
    "public: class NLS_STR & __thiscall NLS_STR::operator+=(class NLS_STR const &)",
    "private: void __thiscall NLS_STR::UpdateIstr(class ISTR *)const",
    "public: class NLS_STR & __thiscall NLS_STR::operator=(class NLS_STR const &)",
    "public: unsigned int __thiscall BITFIELD::QueryOffset(unsigned int)const",
    "private: static unsigned int __stdcall LOGON_HOURS_SETTING::QueryByteCount(unsigned int)",
    "long __stdcall GetSelItem(struct HWND__ *,class NLS_STR *,int,int *)",
    "public: int __thiscall BITFIELD::operator==(class BITFIELD &)",
    "protected: class TREE const * __thiscall DFSITER_TREE::QueryNode(void)const",
    "NETUI_strnicmp2",
    "public: __thiscall DFSITER_TREE::DFSITER_TREE(class TREE const *,unsigned int)",
    "public: int __thiscall NLS_STR::strrchr(class ISTR *,unsigned short)const",
    "public: long __thiscall WIN_TIME::QueryFileTime(struct _FILETIME *)const",
    "public: int __thiscall BITFIELD::operator==(unsigned short)const",
    "void __stdcall `vector constructor iterator'(void *,unsigned int,int,void * (__thiscall*)(void *))",
    "UserProfileInit",
    "public: long __thiscall DLIST::Add(void *)",
    "public: int __thiscall INTL_PROFILE::IsTimePrefix(void)const",
    "public: void __thiscall BITFIELD::operator&=(unsigned short)",
    "public: __thiscall STRLIST::STRLIST(class NLS_STR const &,class NLS_STR const &,int)",
    "public: void __thiscall DIR_BLOCK::SetDoBreadthFirstDirs(int)",
    "public: long __thiscall REG_KEY::SetValue(unsigned short const *,class NLS_STR const *,unsigned long const *,int)",
    "public: int __thiscall LOGON_HOURS_SETTING::IsIdenticalToBits(unsigned char const *,unsigned int)const",
    "private: class REG_KEY * __thiscall REG_KEY::OpenParent(unsigned long)",
    "public: long __thiscall REG_KEY::Copy(class REG_KEY &)",
    "public: long __thiscall SLIST_OF_NLS_STR::Append(class NLS_STR const *)",
    "public: long __thiscall BUFFER::Resize(unsigned int)",
    "NETUI_strnicmp",
    "protected: void __thiscall SLIST::Deregister(class ITER_SL *)",
    "public: __thiscall CHAR_STRING::CHAR_STRING(unsigned short const *,unsigned int)",
    "public: class TREE * __thiscall TREE::BreakOut(void)",
    "public: __thiscall BUFFER::BUFFER(unsigned int)",
    "public: __thiscall REG_KEY::REG_KEY(class REG_KEY &)",
    "void __stdcall `vector vbase constructor iterator'(void *,unsigned int,int,void * (__thiscall*)(void *))",
    "public: int __thiscall INTL_PROFILE::QueryYearPos(void)const",
    "public: int __thiscall LOGON_HOURS_SETTING::ConvertToGMT(void)",
    "public: int __thiscall NLS_STR::strrchr(class ISTR *,unsigned short,class ISTR const &)const",
    "public: unsigned int __thiscall DLIST::QueryNumElem(void)",
    "public: long __thiscall WIN_TIME::SetTimeLocal(struct _FILETIME)",
    "public: void __thiscall DFSITER_TREE::Reset(void)",
    "public: void __thiscall BITFIELD::Not(void)",
    "protected: void __thiscall DLIST::BumpIters(class DL_NODE *)",
    "public: __thiscall SL_NODE::SL_NODE(class SL_NODE *,void *)",
    "private: long __thiscall REG_KEY::NameChild(class REG_KEY *,class NLS_STR const &)const",
    "public: int __thiscall NLS_STR::strcmp(class NLS_STR const &,class ISTR const &)const",
    "public: int __thiscall NLS_STR::_stricmp(class NLS_STR const &,class ISTR const &,class ISTR const &)const",
    "public: void __thiscall UATOM_LINKAGE::Init(void)",
    "public: void __thiscall BITFIELD::operator&=(class BITFIELD const &)",
    "public: class NLS_STR & __thiscall NLS_STR::operator=(unsigned short const *)",
    "public: int __thiscall INTL_PROFILE::QueryDayPos(void)const",
    "public: class TREE * __thiscall TREE::QueryFirstSubtree(void)const",
    "public: int __thiscall INTL_PROFILE::Is24Hour(void)const",
    "public: class TREE * __thiscall TREE::QueryRight(void)const",
    "public: long __thiscall LOGON_HOURS_SETTING::ConvertToHoursPerWeek(void)",
    "public: long __thiscall REG_KEY::DeleteTree(void)",
    "public: virtual __thiscall W32_FS_ENUM::~W32_FS_ENUM(void)",
    "protected: int __thiscall FS_ENUM::ShouldThisFileBeIncluded(unsigned int)const",
    "public: long __thiscall SLIST::Add(void *)",
    "public: unsigned short const * __thiscall NLS_STR::QueryPch(void)const",
    "private: void __thiscall STRLIST::CreateList(unsigned short const *,unsigned short const *)",
    "protected: long __thiscall FS_ENUM::PushDir(unsigned short const *)",
    "protected: void __thiscall FS_ENUM::ReportLastError(long)",
    "public: void __thiscall RITER_DL::Reset(void)",
    "protected: unsigned int __thiscall BITFIELD::QueryMaxNonAllocBitCount(void)const",
    "public: void __thiscall FMX::Reload(void)",
    "public: __thiscall WIN_TIME::WIN_TIME(int)",
    "public: long __thiscall REG_KEY::Delete(void)",
    "public: void __thiscall DL_NODE::Set(class DL_NODE *,class DL_NODE *,void *)",
    "NETUI_strncmp2",
    "public: int __cdecl NLS_STR::Compare(class NLS_STR const *)const",
    "private: long __thiscall REG_KEY::CreateChild(class REG_KEY *,class NLS_STR const &,class REG_KEY_CREATE_STRUCT *)const",
    "public: static void __stdcall NUM_NLS_STR::Init(void)",
    "public: long __thiscall LOGON_HOURS_SETTING::PermitAll(void)",
    "public: long __thiscall SLIST::Append(void *)",
    "public: class BITFIELD & __thiscall BITFIELD::operator=(unsigned short)",
    "public: static class REG_KEY * __stdcall REG_KEY::QueryLocalMachine(unsigned long)",
    "public: unsigned int __thiscall FS_ENUM::QueryCurrentDepth(void)",
    "private: virtual void __thiscall OUTPUT_TO_NUL::Render(unsigned short const *)",
    "public: int __thiscall LOGON_HOURS_SETTING::QueryHourInWeek(unsigned int)const",
    "public: long __thiscall FMX::QuerySelection(int,struct _FMS_GETFILESELW *,int)",
    "public: unsigned int __thiscall NLS_STR::QueryAnsiTextLength(void)const",
    "void __stdcall UIAssertHlp(char const *,unsigned int)",
    "public: int __thiscall STRLIST::QueryBufferSize(unsigned short *)",
    "public: long __thiscall NLS_STR::CopyFrom(unsigned short const *,unsigned int)",
    "public: static class REG_KEY * __stdcall REG_KEY::QueryCurrentUser(unsigned long)",
    "public: __thiscall DLIST::DLIST(void)",
    "public: __thiscall ITER_L::ITER_L(void)",
    "public: class NLS_STR & __thiscall NLS_STR::strcat(class NLS_STR const &)",
    "private: unsigned long __thiscall FMX::Command(unsigned int,unsigned int,long)const",
    "public: long __thiscall WIN_TIME::QueryFileTimeLocal(struct _FILETIME *)const",
    "public: int __thiscall NLS_STR::_IsOwnerAlloc(void)const",
    "private: long __thiscall REG_KEY::SetKeyValueString(unsigned short const *,unsigned short const *,unsigned long,long,unsigned long)",
    "protected: void __thiscall BASE::_ReportError(long)",
    "public: void __thiscall TREE::_DebugPrint(void)const",
    "public: long __thiscall BASE::QueryError(void)const",
    "private: virtual void __thiscall OUTPUT_TO_NUL::Render(unsigned short const *,unsigned int)",
    "public: void __thiscall REG_ENUM::Reset(void)",
    "public: long __thiscall NLS_STR::LoadSystem(long)",
    "public: __thiscall REG_KEY_CREATE_STRUCT::~REG_KEY_CREATE_STRUCT(void)",
    "public: unsigned short const * __thiscall HUATOM::QueryText(void)const",
    "protected: void __thiscall NLS_STR::IncVers(void)",
    "public: int __thiscall FS_ENUM::Next(void)",
    "public: __thiscall REG_KEY::operator struct HKEY__ *(void)const",
    "private: void __thiscall TREE::SetLeft(class TREE *)",
    "public: long __thiscall LOGON_HOURS_SETTING::SetHourInWeek(int,unsigned int)",
    "void __stdcall UIAssertCommand(char const *)",
    "public: void __thiscall NLS_STR::DelSubStr(class ISTR &,class ISTR const &)",
    "public: __thiscall ITER_DL::ITER_DL(class DLIST *)",
    "public: long __thiscall REG_KEY::QueryName(class NLS_STR *,int)const",
    "public: __thiscall REG_VALUE_INFO_STRUCT::REG_VALUE_INFO_STRUCT(void)",
    "private: __thiscall UATOM_MANAGER::~UATOM_MANAGER(void)",
    "public: __thiscall DBGSTREAM::DBGSTREAM(class OUTPUTSINK *)",
    "public: __thiscall NLS_STR::NLS_STR(unsigned short const *,unsigned short)",
    "public: static void __stdcall ALLOC_BASE::operator delete(void *)",
    "public: int __thiscall SLIST_OF_NLS_STR::IsMember(class NLS_STR const &)",
    "protected: void __thiscall BASE::ReportError(long)",
    "public: unsigned int __thiscall TREE::QueryNumElem(void)const",
    "public: __thiscall RITER_DL::RITER_DL(class RITER_DL const &)",
    "public: void __thiscall NLS_STR::ReplSubStr(class NLS_STR const &,class ISTR &)",
    "public: class ALIAS_STR const & __thiscall ALIAS_STR::operator=(unsigned short const *)",
    "public: int __thiscall NLS_STR::Reset(void)",
    "protected: long __thiscall HEAP_BASE::I_AddItem(void *)",
    "public: unsigned short const * __thiscall NLS_STR::QueryPch(class ISTR const &)const",
    "public: long __thiscall NLS_STR::atol(void)const",
    "NETUI_strncmp",
    "public: virtual unsigned short const * __thiscall W32_DIR_BLOCK::QueryFileName(void)",
    "public: long __thiscall INTL_PROFILE::QueryTimeString(class WIN_TIME const &,class NLS_STR *)const",
    "public: __thiscall DL_NODE::DL_NODE(class DL_NODE *,class DL_NODE *,void *)",
    "private: long __thiscall INTL_PROFILE::ScanLongDate(class NLS_STR *)const",
    "public: __thiscall DFSITER_TREE::DFSITER_TREE(class DFSITER_TREE const *)",
    "public: long __thiscall INTL_PROFILE::QueryLongDateString(class WIN_TIME const &,class NLS_STR *)const",
    "public: unsigned int __thiscall NLS_STR::QueryAllocSize(void)const",
    "private: unsigned int __thiscall BUFFER::QueryActualSize(void)",
    "public: __thiscall ITER_SL::ITER_SL(class ITER_SL const &)",
    "public: void __thiscall BITFIELD::operator|=(unsigned long)",
    "public: __thiscall REG_KEY::REG_KEY(class NLS_STR const &,unsigned long)",
    "private: void __thiscall NLS_STR::ReplSubStr(class NLS_STR const &,class ISTR &,unsigned int)",
    "public: class BITFIELD & __thiscall BITFIELD::operator=(unsigned long)",
    "public: long __thiscall REG_KEY::DeleteValue(class NLS_STR const &)",
    "public: __thiscall SLIST_OF_DIR_BLOCK::SLIST_OF_DIR_BLOCK(int)",
    "public: unsigned long __thiscall NLS_STR::atoul(class ISTR const &)const",
    "public: __thiscall RITER_DL::~RITER_DL(void)",
    "public: char const * __thiscall CHAR_STRING::QueryData(void)const",
    "QueryStdCompareParam",
    "public: long __thiscall REG_KEY::QueryInfo(class REG_KEY_INFO_STRUCT *)",
    "public: int __thiscall INTL_PROFILE::IsHourLZero(void)const",
    "public: int __thiscall NLS_STR::strncmp(class NLS_STR const &,class ISTR const &,class ISTR const &,class ISTR const &)const",
    "public: long __thiscall NLS_STR::MapCopyFrom(unsigned short const *,unsigned int)",
    "public: void __thiscall ITER_DL::Reset(void)",
    "public: long __thiscall REG_KEY::SetValue(unsigned short const *,unsigned char const *,long,unsigned long const *)",
    "public: class DBGSTREAM & __thiscall DBGSTREAM::operator<<(unsigned long)",
    "public: long __thiscall REG_KEY::SetValue(unsigned short const *,unsigned short const *,unsigned long,unsigned long const *,int)",
    "private: long __thiscall BUFFER::ReallocStorage(unsigned int)",
    "private: void __thiscall TREE::SetFirstSubtree(class TREE *)",
    "public: __thiscall ALIAS_STR::~ALIAS_STR(void)",
    "public: __thiscall BITFIELD::BITFIELD(unsigned short)",
    "public: int __thiscall STRLIST::WriteToBuffer(unsigned short *,int,unsigned short *)",
    "public: int __thiscall NLS_STR::strcspn(class ISTR *,class NLS_STR const &,class ISTR const &)const",
    "void __stdcall HeapResidueIter(unsigned int,int)",
    "public: void __thiscall TREE::SetProp(void * const)",
    "protected: __thiscall FS_ENUM::FS_ENUM(unsigned short const *,unsigned short const *,enum FILE_TYPE,int,unsigned int)",
    "public: __thiscall SLIST::~SLIST(void)",
    "public: __thiscall ITER_DL::~ITER_DL(void)",
    "public: long __thiscall LOGON_HOURS_SETTING::Set(class LOGON_HOURS_SETTING const &)",
    "protected: void __thiscall SLIST::BumpIters(class SL_NODE *)",
    "public: __thiscall NLS_STR::NLS_STR(unsigned short const *)",
    "public: int __thiscall FMX::IsHeterogeneousSelection(int *)",
    "private: void __thiscall NLS_STR::DelSubStr(class ISTR &,unsigned int)",
    "public: class DBGSTREAM & __thiscall DBGSTREAM::operator<<(unsigned int)",
    "public: __thiscall CHAR_STRING::~CHAR_STRING(void)",
    "public: int __thiscall WIN_TIME::QueryYear(void)const",
    "public: int __thiscall NLS_STR::_strnicmp(class NLS_STR const &,class ISTR const &)const",
    "private: int __thiscall ISTR::QueryIch(void)const",
    "public: void __thiscall TREE::JoinSubtreeLeft(class TREE *)",
    "protected: long __thiscall BITFIELD::AllocBitfield(unsigned int)",
    "public: static void __stdcall DBGSTREAM::SetCurrent(class DBGSTREAM *)",
    "public: __thiscall ITER_DL::ITER_DL(class ITER_DL const &)",
    "public: __thiscall ISTR::ISTR(class ISTR const &)",
    "public: unsigned int __thiscall NLS_STR::QueryTextSize(void)const",
    "private: void __thiscall DFSITER_TREE::SetNode(class TREE const *)",
    "public: void __thiscall UATOM_LINKAGE::Unlink(void)",
    "public: long __thiscall INTL_PROFILE::QueryAMStr(class NLS_STR *)const",
    "public: void __thiscall DIR_BLOCK::SetFindFirstFlag(int)",
    "public: long __thiscall HEAP_BASE::SetAllocCount(int)",
    "public: int __thiscall INTL_PROFILE::IsMonthLZero(void)const",
    "UserProfileWrite",
    "public: __thiscall STRLIST::STRLIST(unsigned short const *,unsigned short const *,int)",
    "public: __thiscall SLIST::SLIST(void)",
    "public: unsigned int __thiscall NLS_STR::_QueryAllocSize(void)const",
    "public: virtual void __thiscall OUTPUT_TO_STDOUT::Render(unsigned short const *,unsigned int)",
    "InitCompareParam",
    "public: long __thiscall REG_KEY::QueryValue(class REG_VALUE_INFO_STRUCT *)",
    "public: virtual __thiscall DIR_BLOCK::~DIR_BLOCK(void)",
    "public: int __thiscall NLS_STR::strncmp(class NLS_STR const &,class ISTR const &)const",
    "public: long __thiscall DLIST::Insert(void *,class RITER_DL &)",
    "public: long __thiscall REG_ENUM::NextValue(class REG_VALUE_INFO_STRUCT *)",
    "public: void __thiscall FMX::Refresh(void)",
    "public: int __thiscall WIN_TIME::QueryHour(void)const",
    "public: long __thiscall SLIST_OF_DIR_BLOCK::Add(class DIR_BLOCK const *)",
    "public: class BITFIELD & __thiscall BITFIELD::operator=(class BITFIELD const &)",
    "protected: unsigned int __thiscall FS_ENUM::QuerySearchAttr(void)const",
    "QueryNocaseCompareParam",
    "NETUI_strcmp",
    "protected: void __thiscall NLS_STR::InitializeVers(void)",
    "public: int __thiscall NLS_STR::strstr(class ISTR *,class NLS_STR const &,class ISTR const &)const",
    "public: long __thiscall WIN_TIME::Normalize(void)",
    "long __stdcall GetSelItem(struct HWND__ *,unsigned int,class NLS_STR *,int *)",
    "public: long __thiscall WIN_TIME::SetGMT(int)",
    "protected: int __thiscall DLIST::CheckIter(class ITER_L *)",
    "public: void __thiscall SLIST_OF_NLS_STR::Clear(void)",
    "protected: void __thiscall FS_ENUM::SetCurrentDirBlock(class DIR_BLOCK *)",
    "public: long __thiscall NLS_STR::CopyTo(unsigned short *,unsigned int)const",
    "public: class ISTR & __thiscall ISTR::operator++(void)",
    "public: int __thiscall DIR_BLOCK::DoBreadthFirstDirs(void)const",
    "public: void __thiscall SL_NODE::Set(class SL_NODE *,void *)",
    "protected: class TREE const * __thiscall DFSITER_TREE::QueryStartNode(void)const",
    "public: unsigned int __thiscall FMX::QuerySelCount(void)const",
    "private: long __thiscall REG_KEY::Close(void)",
    "public: __thiscall LOGON_HOURS_SETTING::~LOGON_HOURS_SETTING(void)",
    "public: __thiscall TCHAR_STR::operator class ALIAS_STR const &(void)",
    "protected: void __thiscall DLIST::Register(class ITER_L *)",
    "public: long __thiscall WIN_TIME::SetCurrentTime(void)",
    "protected: void __thiscall SLIST::SetIters(class SL_NODE *,class SL_NODE *)",
    "public: class ALLOC_STR & __thiscall ALLOC_STR::operator=(unsigned short const *)",
    "public: __thiscall LOGON_HOURS_SETTING::LOGON_HOURS_SETTING(class LOGON_HOURS_SETTING const &)",
    "public: virtual void __thiscall OUTPUT_TO_STDERR::EndOfLine(void)",
    "public: __thiscall TREE::TREE(void *)",
    "public: class TREE * __thiscall TREE::QueryLastSubtree(void)const",
    "public: virtual void __thiscall OUTPUT_TO_AUX::EndOfLine(void)",
    "public: long __thiscall REG_KEY::QueryValue(unsigned short const *,class STRLIST * *,unsigned long *)",
    "public: __thiscall SLIST_OF_DIR_BLOCK::~SLIST_OF_DIR_BLOCK(void)",
    "NETUI_stricmp",
    "public: __thiscall BITFIELD::operator unsigned long(void)",
    "public: long __thiscall FMX::QueryDriveInfo(struct _FMS_GETDRIVEINFOW *)",
    "public: long __thiscall LOGON_HOURS_SETTING::MakeDefault(void)",
    "public: __thiscall UATOM::UATOM(class NLS_STR &)",
    "public: long __thiscall REG_KEY::QueryValue(unsigned short const *,unsigned char * *,long *,long,unsigned long *)",
    "public: __thiscall DFSITER_TREE::~DFSITER_TREE(void)",
    "public: void __thiscall TREE::JoinSiblingLeft(class TREE *)",
    "protected: int __thiscall FS_ENUM::NextDepthFirst(void)",
    "public: __thiscall ALLOC_STR::ALLOC_STR(unsigned short *,unsigned int,unsigned short const *)",
    "public: long __thiscall INTL_PROFILE::QueryTimeSeparator(class NLS_STR *)const",
    "public: void __thiscall BITFIELD::operator|=(class BITFIELD const &)",
    "public: __thiscall TREE::~TREE(void)",
    "public: void __thiscall NLS_STR::DelSubStr(class ISTR &)",
    "public: class NLS_STR * __thiscall ITER_SL_NLS_STR::operator()(void)",
    "public: void __thiscall DBGSTREAM::SetSink(class OUTPUTSINK *)",
    "public: __thiscall REG_KEY::REG_KEY(class REG_KEY &,class NLS_STR const &,unsigned long)",
    "public: __thiscall W32_DIR_BLOCK::W32_DIR_BLOCK(void)",
    "public: __thiscall ELAPSED_TIME_STR::~ELAPSED_TIME_STR(void)",
    "public: int __thiscall NLS_STR::strncmp(class NLS_STR const &,class ISTR const &,class ISTR const &)const",
    "public: long __thiscall NLS_STR::InsertParams(class NLS_STR const &,class NLS_STR const &,class NLS_STR const &)",
    "public: long __thiscall INTL_PROFILE::QueryDurationStr(int,int,int,int,class NLS_STR *)const",
    "protected: void __thiscall SLIST::Register(class ITER_SL *)",
    "public: __thiscall REG_KEY::~REG_KEY(void)",
    "public: void __thiscall BITFIELD::SetBit(unsigned int,enum BITVALUES)",
    "private: unsigned short const * __thiscall REG_KEY::LeafKeyName(void)const",
    "public: __thiscall UATOM_REGION::UATOM_REGION(void)",
    "public: int __thiscall NLS_STR::strchr(class ISTR *,unsigned short,class ISTR const &)const",
    "private: class NLS_STR const * __thiscall ISTR::QueryString(void)const",
    "public: class DIR_BLOCK * __thiscall FS_ENUM::QueryCurrentDirBlock(void)const",
    "public: int __thiscall UATOM_LINKAGE::QueryLinked(void)",
    "public: int __thiscall NLS_STR::operator!=(class NLS_STR const &)const",
    "public: long __thiscall NLS_STR::Append(class NLS_STR const &)",
    "public: unsigned char * __thiscall BUFFER::QueryPtr(void)const",
    "public: unsigned int __thiscall FMX::QueryFocus(void)const",
    "public: __thiscall TCHAR_STR::~TCHAR_STR(void)",
    "private: long __thiscall NLS_STR::InsertParamsAux(class NLS_STR const * *,unsigned int,int,unsigned int *)",
    "public: __thiscall ITER_SL::ITER_SL(class SLIST *)",
    "public: virtual void __thiscall OUTPUT_TO_STDERR::Render(unsigned short const *,unsigned int)",
    "public: virtual void __thiscall OUTPUT_TO_AUX::Render(unsigned short const *)",
    "public: int __thiscall NLS_STR::strspn(class ISTR *,class NLS_STR const &)const",
    "public: int __thiscall NLS_STR::strstr(class ISTR *,class NLS_STR const &)const",
    "public: long __thiscall BITFIELD::Resize(unsigned int)",
    "public: __thiscall UATOM_LINKAGE::UATOM_LINKAGE(void)",
    "public: __thiscall LOGON_HOURS_SETTING::LOGON_HOURS_SETTING(unsigned char const *,unsigned int)",
    "public: void * __thiscall SLIST::Remove(class ITER_SL &)",
    "UserPreferenceQuery",
    "public: long __thiscall NLS_STR::Load(long,struct HINSTANCE__ *)",
    "public: virtual __thiscall FS_ENUM::~FS_ENUM(void)",
    "public: void __thiscall ISTR::Reset(void)",
    "private: long __thiscall BUFFER::GetNewStorage(unsigned int)",
    "UserPreferenceSetBool",
    "public: int __thiscall BITFIELD::operator==(unsigned long)const",
    "UserPreferenceSet",
    "protected: __thiscall FORWARDING_BASE::FORWARDING_BASE(class BASE *)",
    "public: static class DBGSTREAM & __stdcall DBGSTREAM::QueryCurrent(void)",
    "public: __thiscall NLS_STR::NLS_STR(void)",
    "public: long __thiscall WIN_TIME::QueryTime(unsigned long *)const",
    "public: void * __thiscall ITER_SL::Next(void)",
    "public: unsigned int __thiscall NLS_STR::QueryTextLength(void)const",
    "public: int __thiscall NLS_STR::atoi(class ISTR const &)const",
    "public: void __thiscall HEAP_BASE::Trim(void)",
    "protected: virtual long __thiscall W32_FS_ENUM::FindNext(class DIR_BLOCK *,unsigned int)",
    "public: __thiscall SLIST_OF_NLS_STR::SLIST_OF_NLS_STR(int)",
    "public: int __thiscall ISTR::operator<(class ISTR const &)const",
    "public: class NLS_STR * __thiscall SLIST_OF_NLS_STR::Remove(class NLS_STR &)",
    "protected: virtual long __thiscall W32_FS_ENUM::FindFirst(class DIR_BLOCK *,class NLS_STR const &,unsigned int)",
    "public: void __thiscall NLS_STR::ReplSubStr(class NLS_STR const &,class ISTR &,class ISTR const &)",
    "public: __thiscall INTL_PROFILE::INTL_PROFILE(void)",
    "void __stdcall `vector destructor iterator'(void *,unsigned int,int,void (__thiscall*)(void *))",
    "private: void __thiscall DFSITER_TREE::SetCurDepth(unsigned int)",
    "public: int __thiscall BITFIELD::operator&(class BITFIELD const &)",
    "public: void * __thiscall ITER_SL::QueryProp(void)",
    "public: void __thiscall TREE::JoinSubtreeRight(class TREE *)",
    "public: int __thiscall BASE::operator!(void)const",
    "public: class DBGSTREAM & __thiscall DBGSTREAM::operator<<(short)",
    "protected: void __thiscall DLIST::Deregister(class ITER_L *)",
    "public: int __thiscall WIN_TIME::QuerySecond(void)const",
    "public: class NLS_STR * __thiscall NLS_STR::QuerySubStr(class ISTR const &)const",
    "private: long __thiscall REG_KEY::QueryKeyValueBinary(unsigned short const *,unsigned char * *,long *,long,unsigned long *,unsigned long)",
    "public: __thiscall HEX_STR::HEX_STR(unsigned long,unsigned int)",
    "public: int __thiscall ISTR::operator-(class ISTR const &)const",
    "public: long __thiscall NLS_STR::atol(class ISTR const &)const",
    "public: __thiscall SLIST_OF_NLS_STR::~SLIST_OF_NLS_STR(void)",
    "private: void __thiscall TREE::SetRight(class TREE *)",
    "public: __thiscall REG_KEY_INFO_STRUCT::REG_KEY_INFO_STRUCT(void)",
    "public: __thiscall ISTR::ISTR(class NLS_STR const &)",
    "public: class NLS_STR * __thiscall ITER_SL_NLS_STR::Next(void)",
    "protected: unsigned int __thiscall DFSITER_TREE::QueryCurDepth(void)const",
    "public: __thiscall RITER_DL::RITER_DL(class DLIST *)",
    "public: class DIR_BLOCK * __thiscall SLIST_OF_DIR_BLOCK::Remove(class ITER_SL_DIR_BLOCK &)",
    "public: class DBGSTREAM & __thiscall DBGSTREAM::operator<<(unsigned __int64)",
    "protected: __thiscall HEAP_BASE::~HEAP_BASE(void)",
    "public: long __thiscall NLS_STR::MapCopyTo(char *,unsigned int)const",
    "public: void __thiscall ITER_SL::Reset(void)",
    "private: __thiscall UATOM_MANAGER::UATOM_MANAGER(void)",
    "public: __thiscall ITER_STRLIST::ITER_STRLIST(class ITER_STRLIST const &)",
    "public: __thiscall ITER_SL_NLS_STR::ITER_SL_NLS_STR(class ITER_SL_NLS_STR const &)",
    "public: int __thiscall WIN_TIME::QueryMonth(void)const",
    "public: __thiscall ITER_SL_NLS_STR::~ITER_SL_NLS_STR(void)",
    "public: __thiscall HUATOM::HUATOM(unsigned short const *,int)",
    "public: virtual void __thiscall OUTPUT_TO_STDOUT::EndOfLine(void)",
    "protected: __thiscall NLS_STR::NLS_STR(unsigned short *,unsigned int,int)",
    "private: static int __stdcall REG_KEY::HandlePrefix(class NLS_STR const &,struct HKEY__ * *,class NLS_STR *,class NLS_STR *)",
    "public: __thiscall STRLIST::STRLIST(int)",
    "QueryUserDefaultLCID",
    "public: int __thiscall DIR_BLOCK::HasFindFirstBeenCalled(void)",
    "public: long __thiscall REG_KEY::QueryValue(unsigned short const *,unsigned short * *,unsigned long,unsigned long *,int)",
    "public: long __thiscall REG_KEY::Flush(void)",
    "public: class DBGSTREAM & __thiscall DBGSTREAM::operator<<(char const *)",
    "public: long __thiscall NLS_STR::CopyFrom(class NLS_STR const &)",
    "private: long __thiscall REG_KEY::OpenChild(class REG_KEY *,class NLS_STR const &,unsigned long,unsigned long)",
    "private: long __thiscall REG_KEY::OpenByName(class NLS_STR const &,unsigned long)",
    "public: __thiscall ITER_STRLIST::ITER_STRLIST(class STRLIST &)",
    "private: long __thiscall REG_KEY::ParentName(class NLS_STR *)const",
    "public: long __thiscall NLS_STR::RtlOemUpcase(void)",
    "public: __thiscall REG_KEY::REG_KEY(struct HKEY__ *,unsigned long)",
    "public: __thiscall ITER_SL_DIR_BLOCK::ITER_SL_DIR_BLOCK(class SLIST &)",
    "public: long __thiscall WIN_TIME::QueryTimeLocal(unsigned long *)const",
    "public: __thiscall ELAPSED_TIME_STR::ELAPSED_TIME_STR(unsigned long,unsigned short,int)",
    "public: __thiscall RESOURCE_STR::RESOURCE_STR(long,struct HINSTANCE__ *)",
    "public: unsigned short const * __thiscall WCHAR_STRING::QueryData(void)const",
    "protected: int __thiscall FS_ENUM::NextBreadthFirst(void)",
    "public: class DBGSTREAM & __thiscall DBGSTREAM::operator<<(unsigned short)",
    "public: void __thiscall ISTR::operator+=(int)",
    "public: __thiscall BUFFER::~BUFFER(void)",
    "public: long __thiscall LOGON_HOURS_SETTING::SetHourInDay(int,unsigned int,unsigned int)",
    "public: __thiscall DLIST::~DLIST(void)",
    "public: long __thiscall WIN_TIME::SetTime(unsigned long)",
    "private: void __thiscall DFSITER_TREE::SetMaxDepth(unsigned int)",
    "public: unsigned short __thiscall NLS_STR::QueryChar(class ISTR const &)const",
    "public: void __thiscall BITFIELD::operator|=(unsigned short)",
    "public: class DIR_BLOCK * __thiscall ITER_SL_DIR_BLOCK::Next(void)",
    "public: unsigned int __thiscall LOGON_HOURS_SETTING::QueryUnitsPerWeek(void)const",
    "public: __thiscall DEC_STR::DEC_STR(unsigned long,unsigned int)",
    "public: unsigned int __thiscall NLS_STR::QueryNumChar(void)const",
    "private: long __thiscall REG_KEY::SetKeyValueLong(unsigned short const *,long,unsigned long)",
    "public: int __thiscall ISTR::IsLastPos(void)const",
    "public: __thiscall BITFIELD::BITFIELD(unsigned int,enum BITVALUES)",
    "public: __thiscall NLS_STR::NLS_STR(class NLS_STR const &)",
    "void __stdcall UIAssertHlp(char const *,char const *,unsigned int)",
    "public: __thiscall ITER_SL_DIR_BLOCK::~ITER_SL_DIR_BLOCK(void)",
    "private: void __thiscall NLS_STR::CheckIstr(class ISTR const &)const",
    "public: long __thiscall NLS_STR::AppendChar(unsigned short)",
    "public: class DBGSTREAM & __thiscall DBGSTREAM::operator<<(long)",
    "NETUI_InitIsDBCS",
    "public: class NLS_STR & __thiscall NLS_STR::_strupr(void)",
    "private: long __thiscall REG_KEY::SetKeyValueBinary(unsigned short const *,unsigned char const *,long,unsigned long,unsigned long)",
    "public: long __thiscall FS_ENUM::QueryName(class NLS_STR *)const",
    "public: int __thiscall NLS_STR::strchr(class ISTR *,unsigned short)const",
    "UserProfileRead",
    "protected: void * __thiscall HEAP_BASE::PeekItem(int)const",
    "public: __thiscall BITFIELD::operator unsigned short(void)",
    "public: virtual void * __thiscall RITER_DL::vNext(void)",
    "public: __thiscall REG_KEY::REG_KEY(class REG_KEY &,class NLS_STR const &,class REG_KEY_CREATE_STRUCT *)",
    "protected: void * __thiscall HEAP_BASE::I_RemoveTopItem(void)",
    "public: static long __stdcall UATOM_MANAGER::Terminate(void)"
  ],
  "netui1.dll": [
    "public: __thiscall LM_SESSION_2::LM_SESSION_2(unsigned short const *,unsigned short const *)",
    "public: __thiscall SESSION_ENUM::~SESSION_ENUM(void)",
    "public: __thiscall DLL_HANDLE_CACHE_ARRAY::DLL_HANDLE_CACHE_ARRAY(unsigned int)",
    "public: __thiscall LOC_LM_OBJ::LOC_LM_OBJ(class LOCATION const &,int)",
    "MNetUserGetGroups",
    "public: long __thiscall SLIST_OF_ADMIN_AUTHORITY::Append(class ADMIN_AUTHORITY const *)",
    "public: virtual __thiscall LM_AUDIT_LOG::~LM_AUDIT_LOG(void)",
    "public: __thiscall GROUP_MEMB::GROUP_MEMB(class LOCATION const &,unsigned short const *)",
    "public: long __thiscall SAM_ALIAS::RemoveMember(void *)",
    "public: void __thiscall EVENT_LOG::SetOpenFlag(int)",
    "public: virtual unsigned short const * __thiscall USER_MODALS_3::QueryName(void)const",
    "protected: long __thiscall REPL_EDIR_BASE::W_AdjustLocks(void)",
    "public: long __thiscall SC_MANAGER::Lock(void)",
    "public: void __thiscall SERVER1_ENUM_OBJ::SetBufferPtr(struct _SERVER_INFO_101 const *)",
    "protected: virtual long __thiscall LM_EVENT_LOG::I_Open(void)",
    "protected: long __thiscall REPL_IDIR_BASE::W_AdjustLocks(void)",
    "public: __thiscall NEW_LM_OBJ::~NEW_LM_OBJ(void)",
    "public: __thiscall REPLICATOR_0::~REPLICATOR_0(void)",
    "public: long __thiscall EVENT_LOG::Open(void)",
    "public: virtual int __thiscall OS_DACL_SUBJECT_ITER::Next(long *)",
    "public: __thiscall TRUSTED_DOMAIN_ENUM_OBJ::~TRUSTED_DOMAIN_ENUM_OBJ(void)",
    "public: __thiscall SOURCE_INFO_ITEM::SOURCE_INFO_ITEM(unsigned short const *,unsigned short,unsigned short const *,unsigned short,class STRLIST *,unsigned short const *)",
    "public: __thiscall SC_MANAGER::SC_MANAGER(struct SC_HANDLE__ *)",
    "public: unsigned short const * __thiscall DEVICE::QueryRemoteName(void)const",
    "public: unsigned char __thiscall OS_ACE::QueryAceFlags(void)const",
    "private: void __thiscall OS_PRIVILEGE_SET::InitializeMemory(void)",
    "public: __thiscall MEMBERSHIP_LM_OBJ::~MEMBERSHIP_LM_OBJ(void)",
    "public: __thiscall SERVICE_ENUM_OBJ::~SERVICE_ENUM_OBJ(void)",
    "protected: virtual long __thiscall REPL_EDIR_BASE::I_Delete(unsigned int)",
    "protected: virtual long __thiscall SHARE_1::I_WriteInfo(void)",
    "public: int __thiscall OS_LUID::operator==(class OS_LUID const &)const",
    "public: __thiscall USER10_ENUM_OBJ::~USER10_ENUM_OBJ(void)",
    "public: __thiscall GROUP1_ENUM::GROUP1_ENUM(enum LOCATION_TYPE)",
    "public: unsigned short const * __thiscall USER_11::QueryParms(void)const",
    "long __stdcall FillUnicodeString(struct _UNICODE_STRING *,class NLS_STR const &)",
    "public: long __thiscall REPLICATOR_0::SetExportPath(unsigned short const *)",
    "protected: __thiscall LM_ENUM::LM_ENUM(unsigned int)",
    "public: unsigned short const * __thiscall LM_SERVICE::QueryName(void)const",
    "private: struct _ACCESS_LIST * __thiscall NET_ACCESS_1::FindACE(unsigned short const *,enum PERMNAME_TYPE)const",
    "unsigned long __stdcall EnumNetDrives(void)",
    "private: virtual long __thiscall USER_ENUM::CallAPI(int,unsigned char * *,unsigned int *)",
    "public: virtual long __thiscall NT_EVENT_LOG::QueryNumberOfEntries(unsigned long *)",
    "MNetUserSetGroups",
    "public: __thiscall NET_ACCESS_1::NET_ACCESS_1(unsigned short const *,unsigned short const *)",
    "public: virtual unsigned short const * __thiscall REPLICATOR_0::QueryName(void)const",
    "DestroySession",
    "protected: virtual void __thiscall NT_EVENT_LOG::SetPos(class LOG_ENTRY_NUMBER const &,int)",
    "public: long __thiscall OS_ACL::QueryACE(unsigned long,class OS_ACE *)const",
    "public: static long __stdcall NT_ACCOUNTS_UTILITY::BuildAndCopySysSid(class OS_SID *,struct _SID_IDENTIFIER_AUTHORITY *,unsigned char,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long)",
    "public: void __thiscall SESSION1_ENUM_OBJ::SetBufferPtr(struct _SESSION_INFO_1 const *)",
    "protected: long __thiscall USER_2::W_Write(void)",
    "private: virtual long __thiscall ENUM_CALLER_LM_OBJ::EC_SetBufferPtr(unsigned char *)",
    "public: long __thiscall SAM_GROUP::AddMember(unsigned long)",
    "private: virtual long __thiscall LM_ENUM::EC_SetBufferPtr(unsigned char *)",
    "public: __thiscall SESSION0_ENUM_OBJ::~SESSION0_ENUM_OBJ(void)",
    "public: __thiscall LSA_POLICY::~LSA_POLICY(void)",
    "public: __thiscall SAM_ALIAS::~SAM_ALIAS(void)",
    "public: __thiscall LM_SESSION_0::~LM_SESSION_0(void)",
    "public: void __thiscall ARRAY_LIST_SOURCE_INFO_ITEM_PTR::Clear(void)",
    "private: virtual long __thiscall GROUP_ENUM::CallAPI(unsigned char * *,unsigned int *)",
    "public: long __thiscall OS_ACL::FindACE(class OS_SID const &,int *,class OS_ACE *,unsigned long *,unsigned long)const",
    "public: unsigned short const * __thiscall DEVICE::QueryServer(void)const",
    "public: class CONTEXT_ENUM_OBJ const * __thiscall CONTEXT_ENUM_ITER::operator()(void)",
    "public: class USER0_ENUM_OBJ const * __thiscall USER0_ENUM_ITER::operator()(long *,int)",
    "public: long __thiscall ADMIN_AUTHORITY::UpgradeLSAPolicy(unsigned long)",
    "public: int __thiscall SHARE2_ENUM_ITER::Backup(void)",
    "protected: int __thiscall LM_OBJ::IsValid(void)const",
    "public: __thiscall CONN0_ENUM_ITER::CONN0_ENUM_ITER(class CONN0_ENUM &)",
    "private: void __thiscall LM_ENUM::_RegisterIter(void)",
    "private: long __thiscall NET_NAME::SetUNCPath(unsigned short const *)",
    "public: int __thiscall OS_SACL_SUBJECT_ITER::HasNewContainerAuditAce_S(void)const",
    "public: __thiscall OS_SID::operator void *(void)const",
    "protected: virtual void __thiscall NT_ACCOUNT_ENUM::FreeBuffer(unsigned char * *)",
    "public: __thiscall LM_SERVICE::LM_SERVICE(unsigned short const *,unsigned short const *)",
    "public: __thiscall SESSION0_ENUM::SESSION0_ENUM(unsigned short const *)",
    "public: int __thiscall USER_2::QueryNoPasswordExpire(void)const",
    "MNetUserEnum",
    "public: long __thiscall LOCATION::QueryDisplayName(class NLS_STR *)const",
    "public: long __thiscall SLIST_OF_API_SESSION::Append(class API_SESSION const *)",
    "protected: __thiscall FILE_ENUM::~FILE_ENUM(void)",
    "public: __thiscall REPL_EDIR0_ENUM::REPL_EDIR0_ENUM(unsigned short const *)",
    "public: unsigned int __thiscall NT_MACHINE_ENUM_OBJ::QueryAccountCtrl(void)const",
    "public: __thiscall NT_GROUP_ENUM_ITER::NT_GROUP_ENUM_ITER(class NT_GROUP_ENUM &)",
    "protected: __thiscall NET_ACCESS::~NET_ACCESS(void)",
    "public: unsigned long __thiscall OS_PRIVILEGE_SET::QueryNumberOfPrivileges(void)const",
    "public: virtual long __thiscall DOMAIN::WriteInfo(void)",
    "unsigned long __stdcall MapComm(unsigned short const *)",
    "public: unsigned short const * __thiscall USER_11::QueryFullName(void)const",
    "protected: void * __thiscall OS_ACE::QuerySIDMemory(void)const",
    "public: long __thiscall OS_SID::TrimLastSubAuthority(unsigned long *)",
    "public: long __thiscall NET_ACCESS_1::CopyAccessPerms(class NET_ACCESS_1 const &)",
    "MNetGroupGetInfo",
    "public: class NT_MACHINE_ENUM_OBJ const * __thiscall NT_MACHINE_ENUM_ITER::Next(long *,int)",
    "public: static long __stdcall DOMAIN::GetAnyValidDC(unsigned short const *,unsigned short const *,class NLS_STR *)",
    "private: unsigned short const * __thiscall ITER_DEVICE::EnumComms(void)",
    "protected: virtual long __thiscall LSA_ACCOUNT::W_CreateNew(void)",
    "public: unsigned int __thiscall LM_RESUME_ENUM::QueryTotalItemCount(void)const",
    "public: long __thiscall LOG_REGISTRY_INFO::MapEventIDToString(unsigned short const *,unsigned long,class NLS_STR *)",
    "public: int __thiscall CONTEXT_ENUM_ITER::Backup(void)",
    "public: long __thiscall EVENT_FILTER_PATTERN::CheckForMatch(int *,class RAW_LOG_ENTRY *)const",
    "protected: long __thiscall NEW_LM_OBJ::ResizeBuffer(unsigned int)",
    "public: __thiscall SHARE_1::SHARE_1(unsigned short const *,unsigned short const *,int)",
    "public: class NLS_STR const * __thiscall SOURCE_INFO_ARRAY::QuerySource(int)const",
    "public: __thiscall NT_MACHINE_ENUM_OBJ::NT_MACHINE_ENUM_OBJ(void)",
    "protected: void __thiscall REPL_IDIR_1::SetLockCount(unsigned long)",
    "long __stdcall I_AppendToSTRLIST(class STRLIST *,class NLS_STR &)",
    "public: unsigned long __thiscall REPLICATOR_0::QueryInterval(void)const",
    "MxMapClientBuffer",
    "public: __thiscall WKSTA_10::~WKSTA_10(void)",
    "public: long __thiscall LSA_TRUSTED_DOMAIN::SetControllerList(class LSA_REF_DOMAIN_MEM *)",
    "public: class STRLIST * __thiscall LOG_REGISTRY_INFO::GetSourceList(void)",
    "public: class ARRAY_SOURCE_INFO_ITEM_PTR & __thiscall ARRAY_SOURCE_INFO_ITEM_PTR::operator=(class ARRAY_SOURCE_INFO_ITEM_PTR &)",
    "public: __thiscall LSA_TRUSTED_DC_LIST::~LSA_TRUSTED_DC_LIST(void)",
    "protected: __thiscall COMPUTER::~COMPUTER(void)",
    "public: virtual long __thiscall NT_EVENT_LOG::SeekNewestLogEntry(void)",
    "protected: void __thiscall REPL_EDIR_2::SetLockCount(unsigned long)",
    "private: void __thiscall LSA_TRUSTED_DC_LIST::FreeBuffer(void)",
    "public: class NLS_STR const * __thiscall SOURCE_INFO_ARRAY::QueryCategoryDllName(int)const",
    "MNetCharDevQPurge",
    "public: long __thiscall LSA_POLICY::DistrustDomain(void * const,class NLS_STR const &,int)",
    "protected: long __thiscall USER_2::SetUserFlag(int,unsigned int)",
    "protected: virtual long __thiscall LM_ERROR_LOG::CreateCurrentRawEntry(class RAW_LOG_ENTRY *)",
    "public: long __thiscall LSA_POLICY::VerifyLsa(class LSA_PRIMARY_DOM_INFO_MEM *,class NLS_STR const *)const",
    "unsigned long __stdcall EnumLocalLPTs(void)",
    "long __stdcall GetW32UserName(class NLS_STR &)",
    "public: __thiscall LSA_TRUSTED_DOMAIN::LSA_TRUSTED_DOMAIN(class LSA_POLICY const &,class NLS_STR const &,void * const,unsigned long)",
    "public: long __thiscall FORMATTED_LOG_ENTRY::Set(unsigned long,unsigned long,unsigned short,unsigned short const *,unsigned short const *,unsigned long,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,class EVENT_LOG *)",
    "public: __thiscall ALIAS_ENUM_ITER::ALIAS_ENUM_ITER(class ALIAS_ENUM &)",
    "public: __thiscall REPL_IDIR0_ENUM_OBJ::~REPL_IDIR0_ENUM_OBJ(void)",
    "public: virtual unsigned short const * __thiscall GROUP_MEMB::QueryName(void)const",
    "public: __thiscall OS_SECURITY_DESCRIPTOR::~OS_SECURITY_DESCRIPTOR(void)",
    "public: virtual class NLS_STR * __thiscall RAW_LOG_ENTRY::QueryComputer(void)",
    "private: struct _LSA_TRUST_INFORMATION const * __thiscall LSA_REF_DOMAIN_MEM::QueryPtr(void)const",
    "void __stdcall `vector constructor iterator'(void *,unsigned int,int,void * (__thiscall*)(void *))",
    "public: long __thiscall SAM_DOMAIN::SetPasswordInfo(class SAM_PSWD_DOM_INFO_MEM const *)",
    "protected: virtual long __thiscall DEVICE2::CallAPI(void)",
    "public: int __thiscall OS_ACL_SUBJECT_ITER::IsContainer(void)const",
    "public: virtual long __thiscall EVENT_LOG::QuerySrcSupportedTypeMask(class NLS_STR const &,unsigned short *)",
    "public: long __thiscall FORMATTED_LOG_ENTRY::SetDescription(unsigned short const *)",
    "public: struct _UNICODE_STRING const * __thiscall LSA_TRUST_INFO_MEM::QueryUnicodeName(unsigned long)const",
    "public: long __thiscall SHARE_2::SetPermissions(unsigned int)",
    "protected: __thiscall SHARE_ENUM::SHARE_ENUM(unsigned short const *,unsigned int,int)",
    "public: __thiscall LM_SESSION_1::~LM_SESSION_1(void)",
    "public: static unsigned long __stdcall OS_ACE::QueryRevision(void)",
    "public: unsigned short const * __thiscall WKSTA_USER_1::QueryOtherDomains(void)const",
    "MNetReplImportDirAdd",
    "public: __thiscall SAM_RID_MEM::~SAM_RID_MEM(void)",
    "public: int __thiscall OS_SECURITY_DESCRIPTOR_CONTROL::IsDACLDefaulted(void)const",
    "public: __thiscall SLIST_OF_ADMIN_AUTHORITY::~SLIST_OF_ADMIN_AUTHORITY(void)",
    "public: __thiscall SLIST_OF_API_SESSION::~SLIST_OF_API_SESSION(void)",
    "public: long __thiscall ADMIN_AUTHORITY::ReplaceBuiltinDomain(unsigned long)",
    "public: virtual unsigned long __thiscall NT_EVENT_LOG::QueryCurrentEntryData(unsigned char * *)",
    "public: __thiscall GROUP_0::GROUP_0(unsigned short const *,unsigned short const *)",
    "public: void __thiscall ALIAS_ENUM_OBJ::SetBufferPtr(struct _SAM_RID_ENUMERATION const *)",
    "protected: virtual long __thiscall NEW_LM_OBJ::I_WriteInfo(void)",
    "public: __thiscall SAM_USER_ENUM_ITER::~SAM_USER_ENUM_ITER(void)",
    "protected: void __thiscall LSA_OBJECT::SetHandle(void *)",
    "public: struct _UNICODE_STRING const * __thiscall SAM_USER_ENUM_OBJ::QueryUnicodeUserName(void)const",
    "public: long __thiscall ALIAS_ENUM_OBJ::GetComment(class SAM_DOMAIN const &,class NLS_STR *)",
    "RegGetMachineIdentifierValue",
    "I_MNetPathCanonicalize",
    "public: long __thiscall USER_3::SetPrimaryGroupId(unsigned long)",
    "public: class BROWSE_DOMAIN_INFO const * __thiscall BROWSE_DOMAIN_ENUM::FindFirst(unsigned long)",
    "public: unsigned long __thiscall NT_MEMORY::QueryCount(void)const",
    "public: long __thiscall DLL_NAME_HANDLE_PAIR::Set(unsigned short const *,struct HINSTANCE__ *)",
    "public: __thiscall GROUP0_ENUM_ITER::GROUP0_ENUM_ITER(class GROUP0_ENUM &)",
    "private: void __thiscall LM_SERVICE::W_ComputeOtherStatus(struct LM_SERVICE_OTHER_STATUS *)",
    "protected: __thiscall NT_MEMORY::NT_MEMORY(void)",
    "public: virtual unsigned short const * __thiscall USER_MEMB::QueryName(void)const",
    "private: long __thiscall LOG_REGISTRY_INFO::InitCategoryList(int)",
    "public: long __thiscall ADMIN_AUTHORITY::ReplaceSamServer(unsigned long)",
    "public: __thiscall GROUP_1::GROUP_1(unsigned short const *,class LOCATION const &)",
    "public: long __thiscall NET_ACCESS::Delete(void)",
    "public: virtual long __thiscall WKSTA_1::I_GetInfo(void)",
    "public: __thiscall DOMAIN0_ENUM_ITER::DOMAIN0_ENUM_ITER(class DOMAIN0_ENUM &)",
    "public: __thiscall SLIST_OF_API_SESSION::SLIST_OF_API_SESSION(int)",
    "public: long __thiscall GROUP::SetName(unsigned short const *)",
    "public: virtual long __thiscall DOMAIN_WITH_DC_CACHE::GetInfo(void)",
    "MNetReplExportDirGetInfo",
    "protected: virtual long __thiscall SHARE::W_CreateNew(void)",
    "public: class USER2_ENUM_OBJ const * __thiscall USER2_ENUM_ITER::Next(long *,int)",
    "protected: __thiscall FILE_ENUM::FILE_ENUM(unsigned short const *,unsigned short const *,unsigned short const *,unsigned int)",
    "public: long __thiscall BASE::QueryError(void)const",
    "public: static long __stdcall NT_ACCOUNTS_UTILITY::BuildQualifiedAccountName(class NLS_STR *,class NLS_STR const &,class NLS_STR const &,class NLS_STR const *,class NLS_STR const *,enum _SID_NAME_USE)",
    "public: struct _SERVER_INFO_100 const * __thiscall DOMAIN0_ENUM_OBJ::QueryBufferPtr(void)const",
    "public: __thiscall ARRAY_DLL_NAME_HANDLE_PAIR::ARRAY_DLL_NAME_HANDLE_PAIR(unsigned int)",
    "protected: __thiscall SESSION_ENUM::SESSION_ENUM(unsigned short const *,unsigned int)",
    "public: struct _UNICODE_STRING const * __thiscall LSA_PRIMARY_DOM_INFO_MEM::QueryUnicodeName(void)const",
    "protected: long __thiscall NT_EVENT_LOG::QueryCurrentEntryTypeString(class NLS_STR *)",
    "protected: virtual long __thiscall NET_ACCESS_1::I_CreateNew(void)",
    "protected: __thiscall LM_SESSION::LM_SESSION(unsigned short const *,unsigned short const *)",
    "public: unsigned long __thiscall REPL_EDIR_2::QueryLockTime(void)const",
    "private: virtual long __thiscall REPL_IDIR_1::W_Write(void)",
    "protected: long __thiscall REPL_IDIR_1::SetMasterName(unsigned short const *)",
    "public: virtual unsigned long __thiscall LM_AUDIT_LOG::QueryCurrentEntryTime(void)",
    "public: __thiscall SAM_GROUP::~SAM_GROUP(void)",
    "public: class SERVICE_ENUM_OBJ const * __thiscall SERVICE_ENUM_ITER::operator()(void)",
    "public: unsigned short const * __thiscall WKSTA_USER_1::QueryUserName(void)const",
    "public: int __thiscall REPL_EDIR0_ENUM_ITER::Backup(void)",
    "public: void __thiscall DOMAIN0_ENUM::Sort(void)",
    "private: void __thiscall TRIPLE_SERVER_ENUM::MapKnownToTriple(struct _KNOWN_SERVER_INFO const *,struct _TRIPLE_SERVER_INFO *)",
    "protected: long __thiscall LM_SESSION_10::SetUsername(unsigned short const *)",
    "protected: void __thiscall LM_OBJ::MakeUnconstructed(void)",
    "public: __thiscall DOMAIN0_ENUM::~DOMAIN0_ENUM(void)",
    "public: unsigned short const * __thiscall REPL_IDIR_1::QueryMasterName(void)const",
    "protected: __thiscall LM_RESUME_ENUM::LM_RESUME_ENUM(unsigned int,int)",
    "MNetReplGetInfo",
    "protected: void __thiscall BASE::ReportError(long)",
    "public: void __thiscall OS_ACE::SetAccessMask(unsigned long)",
    "private: struct _UNICODE_STRING const * __thiscall LSA_REF_DOMAIN_MEM::QueryUnicodeName(unsigned long)const",
    "public: static long __stdcall NT_ACCOUNTS_UTILITY::BuildQualifiedAccountName(class NLS_STR *,class NLS_STR const &,void *,class NLS_STR const &,class NLS_STR const *,void *,enum _SID_NAME_USE)",
    "public: __thiscall LM_MESSAGE::LM_MESSAGE(class LOCATION &)",
    "public: void __thiscall REPL_EDIR1_ENUM_OBJ::SetBufferPtr(struct _REPL_EDIR_INFO_1 const *)",
    "public: __thiscall LSA_TRUSTED_DOMAIN::LSA_TRUSTED_DOMAIN(class LSA_POLICY const &,void * const,unsigned long)",
    "public: class BROWSE_DOMAIN_INFO const * __thiscall BROWSE_DOMAIN_ENUM::FindNext(unsigned long)",
    "protected: virtual void __thiscall SAM_MEMORY::FreeBuffer(void)",
    "public: long __thiscall USER_MODALS_3::SetThreshold(unsigned long)",
    "public: __thiscall SAM_SID_MEM::SAM_SID_MEM(int)",
    "public: long __thiscall LM_MESSAGE::SendBuffer(unsigned short const *,class BUFFER const &)",
    "public: __thiscall NT_GROUP_ENUM_OBJ::~NT_GROUP_ENUM_OBJ(void)",
    "public: class NT_USER_ENUM_OBJ const * __thiscall NT_USER_ENUM_ITER::Next(long *,int)",
    "public: long __thiscall OS_ACE::SetPtr(void *)",
    "public: int __thiscall CONN1_ENUM_ITER::Backup(void)",
    "unsigned long __stdcall EnumNetComms(void)",
    "public: static long __stdcall NT_ACCOUNTS_UTILITY::GetQualifiedAccountNames(class LSA_POLICY &,void * const,void * const *,unsigned long,int,class STRLIST *,unsigned long *,enum _SID_NAME_USE *,long *,unsigned short const *,class STRLIST *,class STRLIST *,class STRLIST *,class STRLIST *)",
    "public: class DLL_NAME_HANDLE_PAIR & __thiscall DLL_NAME_HANDLE_PAIR::operator=(class DLL_NAME_HANDLE_PAIR const &)",
    "enum LMO_DEVICE __stdcall NetTypeToLMOType(unsigned long)",
    "public: __thiscall ALIAS_STR::~ALIAS_STR(void)",
    "public: long __thiscall REPL_DIR_BASE::LockDirectory(void)",
    "public: __thiscall USER2_ENUM_OBJ::~USER2_ENUM_OBJ(void)",
    "public: class TRUSTED_DOMAIN_ENUM_OBJ const * __thiscall TRUSTED_DOMAIN_ENUM_ITER::Next(long *,int)",
    "public: unsigned long __thiscall LOG_ENTRY_BASE::QueryDisplayEventID(void)const",
    "MNetUseDel",
    "public: unsigned long __thiscall USER_3::QueryUserId(void)const",
    "public: __thiscall API_SESSION::~API_SESSION(void)",
    "public: __thiscall FILE2_ENUM::FILE2_ENUM(unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: long __thiscall USER_11::SetHomeDir(unsigned short const *)",
    "public: long __thiscall OS_SID::SetPtr(void *)",
    "public: long __thiscall NET_ACCESS_1::ClearPerms(void)",
    "private: long __thiscall GROUP_1::W_Write(void)",
    "public: __thiscall LM_SESSION_10::LM_SESSION_10(unsigned short const *,class LOCATION const &)",
    "public: long __thiscall USER_2::SetUserFlags(unsigned int)",
    "protected: void __thiscall LM_OBJ::MakeValid(void)",
    "public: __thiscall SAM_SID_NAME_USE_MEM::SAM_SID_NAME_USE_MEM(int)",
    "I_MNetComputerNameCompare",
    "private: void __thiscall DOMAIN::CtAux(unsigned short const *,unsigned short const *)",
    "public: virtual unsigned int __thiscall USER_11::QueryPriv(void)const",
    "public: __thiscall SHARE1_ENUM::SHARE1_ENUM(unsigned short const *,int)",
    "MNetReplImportDirGetInfo",
    "protected: unsigned int __thiscall OS_OBJECT_WITH_DATA::QueryAllocSize(void)const",
    "public: __thiscall GROUP0_ENUM::~GROUP0_ENUM(void)",
    "public: long __thiscall LSA_SECRET::Create(class LSA_POLICY const &,unsigned long)",
    "MxMapStringsToTStrings",
    "public: int __thiscall DLL_HANDLE_CACHE_ARRAY::QueryCount(void)const",
    "public: __thiscall OS_ACL::~OS_ACL(void)",
    "protected: long __thiscall LM_SERVICE::SetName(unsigned short const *)",
    "public: __thiscall FORMATTED_LOG_ENTRY::~FORMATTED_LOG_ENTRY(void)",
    "MNetGroupSetUsers",
    "public: long __thiscall SHARE_2::SetMaxUses(unsigned int)",
    "private: struct _UNICODE_STRING const * __thiscall LSA_TRANSLATED_NAME_MEM::QueryUnicodeName(unsigned long)const",
    "public: void * __thiscall SAM_OBJECT::QueryHandle(void)const",
    "public: void * __thiscall LSA_ACCT_DOM_INFO_MEM::QueryPSID(void)const",
    "public: unsigned short const * __thiscall MEMBERSHIP_LM_OBJ::QueryAssocName(unsigned int)const",
    "public: unsigned int __thiscall ARRAY_DLL_NAME_HANDLE_PAIR::QueryCount(void)const",
    "public: unsigned short const * __thiscall LM_SERVICE::QueryServerName(void)const",
    "public: __thiscall USER2_ENUM_OBJ::USER2_ENUM_OBJ(void)",
    "private: virtual long __thiscall REPL_EDIR_ENUM::CallAPI(unsigned char * *,unsigned int *)",
    "MxMapSetinfoBuffer",
    "protected: long __thiscall ENUM_CALLER_LM_OBJ::W_CloneFrom(class ENUM_CALLER_LM_OBJ const &)",
    "private: void __thiscall LM_OBJ_BASE::MakeUnconstructed(void)",
    "public: struct _DOMAIN_DISPLAY_MACHINE const * __thiscall NT_MACHINE_ENUM_OBJ::QueryBufferPtr(void)const",
    "protected: virtual long __thiscall USER::I_Delete(unsigned int)",
    "public: unsigned short const * __thiscall NLS_STR::operator[](class ISTR const &)const",
    "public: class DLL_NAME_HANDLE_PAIR & __thiscall DLL_HANDLE_CACHE_ARRAY::operator[](int)const",
    "protected: virtual long __thiscall LM_SESSION_2::I_GetInfo(void)",
    "private: virtual long __thiscall FILE_ENUM::CallAPI(int,unsigned char * *,unsigned int *)",
    "public: class NT_MACHINE_ENUM_OBJ const * __thiscall NT_MACHINE_ENUM_ITER::operator()(long *,int)",
    "protected: virtual long __thiscall SERVER_1::I_WriteInfo(void)",
    "public: long __thiscall NET_NAME::QueryLastComponent(class NLS_STR *)",
    "public: long __thiscall NEW_LM_OBJ::Write(void)",
    "MNetShareCheck",
    "protected: virtual long __thiscall USER_3::I_WriteNew(void)",
    "public: __thiscall LOCAL_USER::LOCAL_USER(enum LOCATION_TYPE)",
    "protected: __thiscall NT_MEMORY::~NT_MEMORY(void)",
    "public: long __thiscall OS_ACL_SUBJECT_ITER::MapSpecificToGeneric(unsigned long *,int)",
    "public: long __thiscall LSA_REF_DOMAIN_MEM::QueryName(unsigned long,class NLS_STR *)const",
    "public: long __thiscall OS_SECURITY_DESCRIPTOR::SetGroup(class OS_SID const &,int)",
    "public: __thiscall GROUP::~GROUP(void)",
    "public: class ALLOC_STR & __thiscall ALLOC_STR::operator=(unsigned short const *)",
    "public: long __thiscall LOCATION::Set(class LOCATION const &)",
    "public: long __thiscall REPLICATOR_0::SetExportList(unsigned short const *)",
    "public: __thiscall NET_NAME::NET_NAME(unsigned short const *,enum NETNAME_TYPE)",
    "public: void __thiscall REPLICATOR_0::SetPulse(unsigned long)",
    "private: void __thiscall TRIPLE_SERVER_ENUM::CombineIntoTriple(struct _SERVER_INFO_101 const *,struct _KNOWN_SERVER_INFO const *,struct _TRIPLE_SERVER_INFO *)",
    "protected: long __thiscall USER::HandleNullAccount(void)",
    "public: __thiscall LM_AUDIT_LOG::LM_AUDIT_LOG(unsigned short const *,enum EVLOG_DIRECTION,unsigned short const *)",
    "protected: __thiscall OS_OBJECT_WITH_DATA::~OS_OBJECT_WITH_DATA(void)",
    "public: __thiscall FILE3_ENUM::FILE3_ENUM(unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: void * __thiscall LSA_DOMAIN_INFO::QueryPSID(void)const",
    "public: void __thiscall SHARE1_ENUM_OBJ::SetBufferPtr(struct _SHARE_INFO_1 const *)",
    "public: long __thiscall USER_11::SetComment(unsigned short const *)",
    "public: unsigned int __thiscall ENUM_CALLER::QueryCount(void)const",
    "private: long __thiscall LM_SERVICE::W_QueryStatus(enum LM_SERVICE_STATUS *,struct LM_SERVICE_OTHER_STATUS *)",
    "MNetGroupAdd",
    "public: static void __stdcall OS_SID::InitializeMemory(void *)",
    "public: unsigned short const * __thiscall GROUP0_ENUM_OBJ::QueryName(void)const",
    "public: __thiscall LOC_LM_ENUM::~LOC_LM_ENUM(void)",
    "private: virtual long __thiscall TRIPLE_SERVER_ENUM::CallAPI(unsigned char * *,unsigned int *)",
    "protected: virtual long __thiscall DEVICE::ValidateName(void)",
    "public: __thiscall LOC_LM_OBJ::~LOC_LM_OBJ(void)",
    "public: unsigned short const * __thiscall REPL_DIR_BASE::QueryDirName(void)const",
    "public: virtual __thiscall USER_2::~USER_2(void)",
    "MNetAccessAdd",
    "public: __thiscall REPL_IDIR0_ENUM_ITER::REPL_IDIR0_ENUM_ITER(class REPL_IDIR0_ENUM &)",
    "public: class LSA_ACCOUNTS_ENUM_OBJ const * __thiscall LSA_ACCOUNTS_ENUM_ITER::Next(long *,int)",
    "public: __thiscall BROWSE_DOMAIN_ENUM::BROWSE_DOMAIN_ENUM(unsigned long,unsigned long *)",
    "public: __thiscall GROUP1_ENUM_OBJ::GROUP1_ENUM_OBJ(void)",
    "public: void __thiscall EVENT_LOG::SetDirection(enum EVLOG_DIRECTION)",
    "public: __thiscall REPL_EDIR1_ENUM_OBJ::REPL_EDIR1_ENUM_OBJ(void)",
    "public: virtual long __thiscall USER_MODALS_3::GetInfo(void)",
    "private: virtual long __thiscall SAM_USER_ENUM::CallAPI(int,unsigned char * *,unsigned int *)",
    "public: long __thiscall LM_SERVICE::Stop(unsigned int,unsigned int)",
    "private: virtual long __thiscall ALIAS_ENUM::CallAPI(int,unsigned char * *,unsigned int *)",
    "protected: unsigned long __thiscall OS_ACL_SUBJECT_ITER::QueryTotalAceCount(void)const",
    "public: class REPL_EDIR0_ENUM_OBJ const * __thiscall REPL_EDIR0_ENUM_ITER::operator()(void)",
    "public: struct _TRUSTED_CONTROLLERS_INFO const & __thiscall LSA_TRUSTED_DC_LIST::QueryControllerList(void)const",
    "public: void __thiscall OS_ACL::_DbgPrint(void)const",
    "public: void __thiscall USE1_ENUM_OBJ::SetBufferPtr(struct _USE_INFO_1 const *)",
    "protected: virtual long __thiscall SERVER_2::I_WriteInfo(void)",
    "MxAsciifyRpcBufferAux",
    "public: void __thiscall SHARE2_ENUM_OBJ::SetBufferPtr(struct _SHARE_INFO_2 const *)",
    "public: class BASE & __thiscall BASE::operator=(class BASE const &)",
    "protected: static long __stdcall DOMAIN_WITH_DC_CACHE::GetAnyDCWorker(unsigned short const *,unsigned short const *,class NLS_STR *,int)",
    "public: int __thiscall LSA_TRUSTED_DC_LIST::QueryCount(void)",
    "protected: virtual long __thiscall SHARE_2::I_CreateNew(void)",
    "public: __thiscall ALIAS_ENUM_OBJ::ALIAS_ENUM_OBJ(void)",
    "public: __thiscall LSA_REF_DOMAIN_MEM::~LSA_REF_DOMAIN_MEM(void)",
    "public: long __thiscall SAM_USER::SetPassword(class NLS_STR const &,class NLS_STR const &)",
    "public: unsigned short const * __thiscall WKSTA_10::QueryLogonDomain(void)const",
    "unsigned long __stdcall EnumNetDevices(int)",
    "private: int __thiscall NEW_LM_OBJ::IsNew(void)const",
    "public: void __thiscall LOG_ENTRY_NUMBER::SetDirection(enum EVLOG_DIRECTION)",
    "public: long __thiscall LSA_POLICY::GetPrimaryDomain(class LSA_PRIMARY_DOM_INFO_MEM *)const",
    "public: virtual long __thiscall LM_ERROR_LOG::CreateCurrentFormatEntry(class FORMATTED_LOG_ENTRY * *)",
    "protected: virtual long __thiscall LSA_ACCOUNT::I_GetInfo(void)",
    "public: long __thiscall REPL_DIR_BASE::UnlockDirectory(void)",
    "public: __thiscall NT_GROUP_ENUM::NT_GROUP_ENUM(class SAM_DOMAIN const *)",
    "public: class ALLOC_STR & __thiscall ALLOC_STR::operator=(class ALLOC_STR const &)",
    "public: unsigned long __thiscall REPLICATOR_0::QueryRandom(void)const",
    "public: void __thiscall REPL_EDIR0_ENUM_OBJ::SetBufferPtr(struct _REPL_EDIR_INFO_0 const *)",
    "public: long __thiscall OS_SECURITY_DESCRIPTOR::SetOwner(class OS_SID const &,int)",
    "public: long __thiscall USER::Rename(unsigned short const *)",
    "public: __thiscall LSA_ACCOUNT_PRIVILEGE_ENUM_ITER::~LSA_ACCOUNT_PRIVILEGE_ENUM_ITER(void)",
    "public: int __thiscall OS_DACL_SUBJECT_ITER::IsNewObjectDenyAll(void)const",
    "public: long __thiscall NLS_STR::InsertParams(class NLS_STR const &,class NLS_STR const &)",
    "public: long __thiscall SLIST_OF_BROWSE_DOMAIN_INFO::Append(class BROWSE_DOMAIN_INFO const *)",
    "protected: __thiscall LM_FILE::~LM_FILE(void)",
    "protected: __thiscall REPL_EDIR_ENUM::REPL_EDIR_ENUM(unsigned short const *,unsigned int)",
    "public: long __thiscall LM_FILE::CloseFile(void)",
    "public: unsigned long __thiscall REPLICATOR_0::QueryGuardTime(void)const",
    "private: static long __stdcall DOMAIN_WITH_DC_CACHE::EnterCriticalSection(void)",
    "protected: virtual long __thiscall REPL_IDIR_0::W_CreateNew(void)",
    "public: int __thiscall LOCATION::IsServer(void)const",
    "public: long __thiscall SAM_DOMAIN::EnumerateGroups(class SAM_RID_ENUMERATION_MEM *,unsigned long *,unsigned long)const",
    "public: __thiscall TRUSTED_DOMAIN_ENUM::~TRUSTED_DOMAIN_ENUM(void)",
    "MNetShareDel",
    "public: unsigned int __thiscall LM_SESSION_1::QueryNumOpens(void)const",
    "protected: void __thiscall ENUM_CALLER::SetCount(unsigned int)",
    "public: __thiscall CONN0_ENUM::CONN0_ENUM(unsigned short const *,unsigned short const *)",
    "public: long __thiscall SC_SERVICE::Control(unsigned int,struct _SERVICE_STATUS *)",
    "public: __thiscall OS_ACL_SUBJECT_ITER::OS_ACL_SUBJECT_ITER(class OS_ACL const *,struct _GENERIC_MAPPING *,struct _GENERIC_MAPPING *,int,int)",
    "public: void __thiscall REPLICATOR_0::SetInterval(unsigned long)",
    "public: __thiscall LSA_ENUM::~LSA_ENUM(void)",
    "public: void * __thiscall SAM_DOMAIN::QueryPSID(void)const",
    "protected: __thiscall REPL_DIR_BASE::REPL_DIR_BASE(unsigned short const *,unsigned short const *)",
    "private: long __thiscall LM_SERVICE::W_ServiceStart(unsigned short const *)",
    "public: long __thiscall LM_CONFIG::SetValue(class NLS_STR *)",
    "public: long __thiscall USER_MODALS_3::SetDuration(unsigned long)",
    "public: unsigned short const * __thiscall LOCATION::QueryServer(void)const",
    "public: virtual unsigned short const * __thiscall LSA_ACCOUNT::QueryName(void)const",
    "public: int __thiscall REPL_DIR_BASE::QueryLockBias(void)const",
    "public: unsigned short const * __thiscall SHARE_2::QueryPath(void)const",
    "public: void __thiscall TRIPLE_SERVER_ENUM_OBJ::SetBufferPtr(struct _TRIPLE_SERVER_INFO const *)",
    "MNetServiceInstall",
    "private: void __thiscall USER_3::CtAux(void)",
    "protected: unsigned char * __thiscall DEVICE::QueryBufPtr(void)",
    "public: long __thiscall SAM_GROUP::GetComment(class NLS_STR *)",
    "public: virtual long __thiscall NT_EVENT_LOG::SeekOldestLogEntry(void)",
    "protected: virtual long __thiscall REPL_IDIR_BASE::I_Delete(unsigned int)",
    "public: int __thiscall LSA_OBJECT::IsHandleValid(void)const",
    "public: long __thiscall LSA_TRANSLATED_NAME_MEM::QueryDomainIndex(unsigned long)const",
    "protected: long __thiscall ENUM_CALLER::W_GetInfo(void)",
    "public: __thiscall CONTEXT_ENUM_ITER::CONTEXT_ENUM_ITER(class CONTEXT_ENUM &)",
    "MNetUseGetInfo",
    "public: unsigned int __thiscall DEVICE::QueryType(void)const",
    "public: __thiscall ALIAS_ENUM::~ALIAS_ENUM(void)",
    "public: class OS_LUID_AND_ATTRIBUTES const * __thiscall LSA_ACCOUNT_PRIVILEGE_ENUM_ITER::operator()(void)",
    "public: long __thiscall NET_NAME::QueryServerShare(class NLS_STR *)",
    "public: __thiscall RAW_LOG_ENTRY::RAW_LOG_ENTRY(void)",
    "public: long __thiscall DEVICE::Disconnect(unsigned short const *,unsigned int)",
    "protected: void __thiscall LSA_OBJECT::ResetHandle(void)",
    "protected: __thiscall ENUM_OBJ_BASE::ENUM_OBJ_BASE(void)",
    "protected: virtual long __thiscall USER_MEMB::I_CreateNew(void)",
    "protected: virtual void __thiscall TRUSTED_DOMAIN_ENUM::FreeBuffer(unsigned char * *)",
    "public: long __thiscall USER_3::SetProfile(unsigned short const *)",
    "private: int __thiscall LM_OBJ_BASE::IsValid(void)const",
    "public: virtual long __thiscall LM_ERROR_LOG::WriteTextEntry(unsigned long,class INTL_PROFILE &,unsigned short)",
    "public: __thiscall USER10_ENUM_OBJ::USER10_ENUM_OBJ(void)",
    "protected: virtual long __thiscall REPLICATOR_0::I_GetInfo(void)",
    "protected: virtual long __thiscall REPL_EDIR_BASE::I_WriteInfo(void)",
    "public: long __thiscall SC_MANAGER::QueryServiceDisplayName(unsigned short const *,class NLS_STR *)",
    "public: __thiscall SAM_SID_NAME_USE_MEM::~SAM_SID_NAME_USE_MEM(void)",
    "public: unsigned long __thiscall REPL_IDIR_1::QueryState(void)const",
    "public: __thiscall SERVICE_ENUM_ITER::SERVICE_ENUM_ITER(class SERVICE_ENUM &)",
    "protected: static long __stdcall NT_ACCOUNT_ENUM::QueryCountPreferences2(unsigned long *,unsigned long *,unsigned int,unsigned long,unsigned long,unsigned long)",
    "public: struct _UNICODE_STRING const * __thiscall NT_MACHINE_ENUM_OBJ::QueryUnicodeMachine(void)const",
    "MNetReplImportDirDel",
    "public: int __thiscall USER_11::IsCommOperator(void)const",
    "protected: virtual long __thiscall NET_ACCESS_1::I_WriteNew(void)",
    "public: __thiscall FILE3_ENUM::~FILE3_ENUM(void)",
    "public: long __thiscall USER_MODALS_3::SetObservation(unsigned long)",
    "public: __thiscall WKSTA_10::WKSTA_10(unsigned short const *)",
    "protected: virtual long __thiscall REPL_EDIR_BASE::I_GetInfo(void)",
    "public: __thiscall LM_SESSION_2::LM_SESSION_2(unsigned short const *,class LOCATION const &)",
    "protected: virtual long __thiscall LM_SESSION_10::I_GetInfo(void)",
    "long __stdcall I_FetchGroupFields(class NLS_STR *,class NLS_STR const &,class NLS_STR const *,long *)",
    "public: long __thiscall SAM_ALIAS::Delete(void)",
    "public: virtual __thiscall EVENT_LOG::~EVENT_LOG(void)",
    "public: __thiscall SLIST_OF_LM_RESUME_BUFFER::SLIST_OF_LM_RESUME_BUFFER(int)",
    "public: unsigned long __thiscall SERVER_1::QueryServerType(void)const",
    "public: virtual long __thiscall NT_EVENT_LOG::QuerySrcSupportedCategoryList(class NLS_STR const &,class STRLIST * *)",
    "protected: virtual long __thiscall USER_3::I_CreateNew(void)",
    "public: __thiscall SERVICE_ENUM::SERVICE_ENUM(unsigned short const *,int,unsigned int,unsigned short const *)",
    "protected: __thiscall SERVER_ENUM::SERVER_ENUM(unsigned short const *,unsigned int,unsigned short const *,unsigned long)",
    "public: long __thiscall USER_MODALS::SetMinPasswdAge(unsigned long)",
    "public: class REPL_EDIR1_ENUM_OBJ const * __thiscall REPL_EDIR1_ENUM_ITER::operator()(void)",
    "public: __thiscall REPLICATOR_0::REPLICATOR_0(unsigned short const *)",
    "public: long __thiscall SERVICE_CONTROL::Close(void)",
    "private: static long __stdcall NT_ACCOUNTS_UTILITY::W_BuildQualifiedAccountName(class NLS_STR *,class NLS_STR const &,class NLS_STR const *,enum _SID_NAME_USE)",
    "public: __thiscall LSA_TRANSLATED_SID_MEM::LSA_TRANSLATED_SID_MEM(int)",
    "private: long __thiscall COMPUTER::ValidateName(unsigned short const *)",
    "public: __thiscall USER_11::USER_11(unsigned short const *,class LOCATION const &)",
    "public: long __thiscall SHARE_2::SetPath(unsigned short const *)",
    "public: __thiscall LM_SESSION_1::LM_SESSION_1(unsigned short const *,class LOCATION const &)",
    "public: __thiscall SAM_RID_ENUMERATION_MEM::~SAM_RID_ENUMERATION_MEM(void)",
    "public: unsigned short const * __thiscall USER_11::QueryWorkstations(void)const",
    "public: __thiscall GROUP_1::GROUP_1(unsigned short const *,unsigned short const *)",
    "private: int __thiscall LM_OBJ_BASE::IsUnconstructed(void)const",
    "public: __thiscall LM_SERVICE::~LM_SERVICE(void)",
    "public: __thiscall USER::~USER(void)",
    "public: unsigned char * __thiscall LOGON_HOURS_SETTING::QueryHoursBlock(void)const",
    "protected: long __thiscall OS_OBJECT_WITH_DATA::Resize(unsigned int)",
    "public: __thiscall FILE3_ENUM_OBJ::FILE3_ENUM_OBJ(void)",
    "public: __thiscall OS_ACE::OS_ACE(void *)",
    "private: void __thiscall USER::CtAux(unsigned short const *)",
    "public: __thiscall NT_EVENT_LOG::NT_EVENT_LOG(unsigned short const *,enum EVLOG_DIRECTION,unsigned short const *,unsigned short const *)",
    "protected: long __thiscall EVENT_LOG_SOURCE::Create(unsigned short const *,unsigned short const *,unsigned long,unsigned short const *)",
    "public: __thiscall LSA_ACCT_DOM_INFO_MEM::~LSA_ACCT_DOM_INFO_MEM(void)",
    "public: long __thiscall OS_SECURITY_DESCRIPTOR::SetGroup(int,class OS_SID const *,int)",
    "private: virtual long __thiscall NT_ACCOUNT_ENUM::CallAPI(int,unsigned char * *,unsigned int *)",
    "public: __thiscall CONN1_ENUM::CONN1_ENUM(unsigned short const *,unsigned short const *)",
    "public: void __thiscall DOMAIN0_ENUM_OBJ::SetBufferPtr(struct _SERVER_INFO_100 const *)",
    "public: __thiscall TRIPLE_SERVER_ENUM_ITER::TRIPLE_SERVER_ENUM_ITER(class TRIPLE_SERVER_ENUM &)",
    "public: static int __stdcall DOMAIN::IsValidDC(unsigned short const *,unsigned short const *)",
    "public: __thiscall FILE2_ENUM_OBJ::FILE2_ENUM_OBJ(void)",
    "public: __thiscall NT_USER_ENUM_OBJ::~NT_USER_ENUM_OBJ(void)",
    "protected: long __thiscall LM_FILE::SetFileId(unsigned long)",
    "public: __thiscall GROUP::GROUP(unsigned short const *,enum LOCATION_TYPE)",
    "public: int __thiscall SESSION0_ENUM_ITER::Backup(void)",
    "public: virtual long __thiscall DEVICE::WriteInfo(void)",
    "public: long __thiscall LM_SERVICE::QueryFullStatus(enum LM_SERVICE_STATUS *,struct LM_SERVICE_OTHER_STATUS *)",
    "public: __thiscall REG_KEY_INFO_STRUCT::~REG_KEY_INFO_STRUCT(void)",
    "public: class NLS_STR const * __thiscall SOURCE_INFO_ITEM::QueryParameterMessageDllName(void)const",
    "private: virtual long __thiscall REPL_EDIR_0::W_Write(void)",
    "public: __thiscall LOCAL_USER::~LOCAL_USER(void)",
    "protected: virtual void __thiscall SAM_USER_ENUM::FreeBuffer(unsigned char * *)",
    "protected: virtual long __thiscall LM_AUDIT_LOG::I_Next(int *,unsigned long)",
    "public: __thiscall LM_SRVRES::~LM_SRVRES(void)",
    "public: unsigned short const * __thiscall SERVER_1::QueryComment(void)const",
    "public: virtual long __thiscall DOMAIN::GetInfo(void)",
    "public: long __thiscall OS_SID::QueryName(class NLS_STR *,unsigned short const *,void *)const",
    "MNetShareDelSticky",
    "protected: void __thiscall DEVICE::SetDevState(enum LMO_DEV_STATE)",
    "long __stdcall ConnectToNullSession(class NLS_STR const &)",
    "public: virtual long __thiscall LM_EVENT_LOG::QueryPos(class LOG_ENTRY_NUMBER *)",
    "protected: virtual void __thiscall LM_AUDIT_LOG::SetPos(class LOG_ENTRY_NUMBER const &,int)",
    "public: long __thiscall OS_ACL_SUBJECT_ITER::Compare(int *,class OS_ACL_SUBJECT_ITER *)",
    "MNetRemoteTOD",
    "public: class SESSION1_ENUM_OBJ const * __thiscall SESSION1_ENUM_ITER::operator()(void)",
    "public: long __thiscall LM_CONFIG::QueryValue(class NLS_STR *,unsigned short const *)",
    "private: void __thiscall LM_RESUME_ENUM::_DeregisterIter(void)",
    "public: __thiscall DEC_STR::~DEC_STR(void)",
    "protected: void __thiscall SAM_OBJECT::ResetHandle(void)",
    "public: __thiscall SHARE1_ENUM_OBJ::~SHARE1_ENUM_OBJ(void)",
    "public: unsigned short const * __thiscall USER_3::QueryHomedirDrive(void)const",
    "protected: __thiscall SAM_OBJECT::SAM_OBJECT(void)",
    "public: unsigned long __thiscall REPL_EDIR_1::QueryIntegrity(void)const",
    "public: __thiscall LM_SESSION_1::LM_SESSION_1(unsigned short const *,enum LOCATION_TYPE)",
    "protected: virtual long __thiscall USER_11::W_CreateNew(void)",
    "public: long __thiscall USER_2::SetAccountDisabled(int)",
    "protected: virtual long __thiscall MEMBERSHIP_LM_OBJ::I_GetInfo(void)",
    "public: virtual unsigned short const * __thiscall SERVER_0::QueryName(void)const",
    "public: long __thiscall OS_PRIVILEGE_SET::AddPrivilege(struct _LUID,unsigned long)",
    "public: __thiscall CONN_ENUM::~CONN_ENUM(void)",
    "public: __thiscall REPL_IDIR1_ENUM_ITER::REPL_IDIR1_ENUM_ITER(class REPL_IDIR1_ENUM &)",
    "public: virtual long __thiscall LM_ERROR_LOG::Clear(unsigned short const *)",
    "protected: long __thiscall USER_11::W_CloneFrom(class USER_11 const &)",
    "public: long __thiscall SAM_USER_ENUM_OBJ::QueryUserName(class NLS_STR *)const",
    "protected: __thiscall COMPUTER::COMPUTER(unsigned short const *)",
    "public: class LSA_PRIVILEGES_ENUM_OBJ const * __thiscall LSA_PRIVILEGES_ENUM_ITER::Next(long *,int)",
    "public: long __thiscall LSA_SECRET::SetInfo(class NLS_STR const *,class NLS_STR const *)",
    "public: unsigned short const * __thiscall REPLICATOR_0::QueryImportPath(void)const",
    "protected: long __thiscall LM_FILE::SetServer(unsigned short const *)",
    "public: long __thiscall LOG_ENTRY_BASE::Set(unsigned long,unsigned long,unsigned short,unsigned short const *,unsigned long,class EVENT_LOG *)",
    "MNetShareAdd",
    "public: __thiscall SAM_ALIAS::SAM_ALIAS(class SAM_DOMAIN const &,unsigned short const *,unsigned long)",
    "public: __thiscall GROUP_1::GROUP_1(unsigned short const *,enum LOCATION_TYPE)",
    "private: struct _DOMAIN_PASSWORD_INFORMATION * __thiscall SAM_PSWD_DOM_INFO_MEM::QueryUpdatePtr(void)const",
    "public: int __thiscall OS_DACL_SUBJECT_ITER::HasThisAce(void)const",
    "public: long __thiscall USER_2::SetLockout(int)",
    "public: unsigned long __thiscall REPL_EDIR_1::QueryExtent(void)const",
    "protected: long __thiscall USER_3::W_CloneFrom(class USER_3 const &)",
    "public: __thiscall OS_ACL_SUBJECT_ITER::~OS_ACL_SUBJECT_ITER(void)",
    "public: __thiscall OS_SID::~OS_SID(void)",
    "public: void __thiscall SLIST_OF_BROWSE_DOMAIN_INFO::Clear(void)",
    "public: virtual class NLS_STR * __thiscall FORMATTED_LOG_ENTRY::QueryComputer(void)",
    "protected: virtual long __thiscall LM_SESSION::I_Delete(unsigned int)",
    "public: unsigned short const * __thiscall WKSTA_10::QueryLogonUser(void)const",
    "protected: virtual void __thiscall DEVICE::SetInfo(void)",
    "public: long __thiscall SAM_DOMAIN::EnumerateAliases(class SAM_RID_ENUMERATION_MEM *,unsigned long *,unsigned long)const",
    "public: unsigned long __thiscall OS_DACL_SUBJECT_ITER::QueryNewContainerAccessMask(void)const",
    "public: virtual class NLS_STR * __thiscall RAW_LOG_ENTRY::QueryUser(void)",
    "public: long __thiscall SC_SERVICE::QueryStatus(struct _SERVICE_STATUS *)",
    "protected: virtual long __thiscall USER_2::I_WriteInfo(void)",
    "unsigned long __stdcall EnumNetLPTs(void)",
    "public: virtual unsigned long __thiscall LOCAL_USER::QueryAuthFlags(void)const",
    "public: unsigned short __thiscall SOURCE_INFO_ITEM::QueryCategoryCount(void)const",
    "MNetErrorLogRead",
    "public: __thiscall TRIPLE_SERVER_ENUM::~TRIPLE_SERVER_ENUM(void)",
    "unsigned long __stdcall MapDrive(unsigned short const *)",
    "public: long __thiscall LSA_TRANSLATED_NAME_MEM::QueryName(unsigned long,class NLS_STR *)const",
    "public: virtual long __thiscall EVENT_LOG::Backup(unsigned short const *)",
    "protected: long __thiscall OS_SECURITY_DESCRIPTOR::UpdateControl(void)",
    "public: void __thiscall CONN1_ENUM_OBJ::SetBufferPtr(struct _CONNECTION_INFO_1 const *)",
    "public: long __thiscall SLIST_OF_BROWSE_DOMAIN_INFO::Insert(class BROWSE_DOMAIN_INFO const *,class ITER_SL_BROWSE_DOMAIN_INFO &)",
    "protected: virtual long __thiscall REPL_IDIR_1::W_CreateNew(void)",
    "MNetConfigGetAll",
    "MNetApiBufferAlloc",
    "public: long __thiscall LSA_ACCOUNT::QueryPrivilegeEnumIter(class LSA_ACCOUNT_PRIVILEGE_ENUM_ITER * *)",
    "public: virtual unsigned long __thiscall LM_AUDIT_LOG::QueryCurrentEntryData(unsigned char * *)",
    "public: class USER1_ENUM_OBJ const * __thiscall USER1_ENUM_ITER::Next(long *,int)",
    "public: __thiscall LOG_REGISTRY_INFO::~LOG_REGISTRY_INFO(void)",
    "public: __thiscall LOCATION::LOCATION(class LOCATION const &)",
    "public: class STRLIST * __thiscall SOURCE_INFO_ARRAY::QueryEventDllList(int)const",
    "public: unsigned int __thiscall SERVER1_ENUM_OBJ::QueryMinorVer(void)const",
    "public: __thiscall CHARDEVQ1_ENUM_ITER::CHARDEVQ1_ENUM_ITER(class CHARDEVQ1_ENUM &)",
    "public: unsigned long __thiscall LOG_ENTRY_BASE::QueryRecordNum(void)const",
    "protected: virtual long __thiscall LSA_ACCOUNT::I_WriteInfo(void)",
    "private: static void __stdcall LSA_POLICY::InitObjectAttributes(struct _OBJECT_ATTRIBUTES *,struct _SECURITY_QUALITY_OF_SERVICE *)",
    "public: __thiscall BROWSE_DOMAIN_INFO::BROWSE_DOMAIN_INFO(unsigned short const *,unsigned long)",
    "public: class CHARDEVQ1_ENUM_OBJ const * __thiscall CHARDEVQ1_ENUM_ITER::operator()(void)",
    "public: void __thiscall CHARDEVQ1_ENUM_OBJ::SetBufferPtr(struct _CHARDEVQ_INFO_1 const *)",
    "public: unsigned short __thiscall OS_ACE::QuerySize(void)const",
    "public: virtual unsigned short const * __thiscall USER_MODALS::QueryName(void)const",
    "public: __thiscall NET_NAME::~NET_NAME(void)",
    "FreeArgv",
    "private: void __thiscall LM_OBJ_BASE::MakeInvalid(void)",
    "public: __thiscall NT_USER_ENUM::NT_USER_ENUM(class SAM_DOMAIN const *)",
    "private: void __thiscall LM_RESUME_ENUM::DeregisterIter(void)",
    "protected: void __thiscall SERVICE_ENUM_OBJ::SetBufferPtr(struct _ENUM_SVC_STATUS const *)",
    "public: __thiscall SAM_PSWD_DOM_INFO_MEM::SAM_PSWD_DOM_INFO_MEM(int)",
    "public: __thiscall SHARE_1::~SHARE_1(void)",
    "public: long __thiscall USER_11::SetLogonHours(unsigned char const *,unsigned int)",
    "public: class REPL_EDIR2_ENUM_OBJ const * __thiscall REPL_EDIR2_ENUM_ITER::operator()(void)",
    "protected: __thiscall LOC_LM_ENUM::LOC_LM_ENUM(class LOCATION const &,unsigned int)",
    "protected: __thiscall USER_ENUM::USER_ENUM(enum LOCATION_TYPE,unsigned int,unsigned short const *,int)",
    "public: long __thiscall SLIST_OF_LM_RESUME_BUFFER::Append(class LM_RESUME_BUFFER const *)",
    "public: __thiscall NET_ACCESS_1::~NET_ACCESS_1(void)",
    "public: long __thiscall LSA_POLICY::TranslateSidsToNames(void * const *,unsigned long,class LSA_TRANSLATED_NAME_MEM *,class LSA_REF_DOMAIN_MEM *)",
    "public: __thiscall REPL_IDIR0_ENUM_OBJ::REPL_IDIR0_ENUM_OBJ(void)",
    "public: __thiscall DEVICE2::DEVICE2(unsigned short const *)",
    "public: int __thiscall LM_FILE_3::IsPermCreate(void)const",
    "public: void __thiscall REPL_EDIR_1::SetIntegrity(unsigned long)",
    "protected: virtual long __thiscall SHARE_1::W_CreateNew(void)",
    "public: int __thiscall OS_ACE::IsInheritOnly(void)const",
    "public: void __thiscall OS_PRIVILEGE_SET::SetPtr(struct _PRIVILEGE_SET *)",
    "public: virtual class STRLIST * __thiscall EVENT_LOG::QuerySourceList(void)",
    "public: class LOGON_HOURS_SETTING const & __thiscall USER_11::QueryLogonHours(void)const",
    "MNetApiBufferSize",
    "public: unsigned long const __thiscall ALIAS_ENUM_OBJ::QueryRid(void)const",
    "public: __thiscall DOMAIN_WITH_DC_CACHE::DOMAIN_WITH_DC_CACHE(unsigned short const *,unsigned short const *,int)",
    "public: __thiscall LSA_PRIMARY_DOM_INFO_MEM::~LSA_PRIMARY_DOM_INFO_MEM(void)",
    "MNetWkstaUserGetInfo",
    "protected: virtual long __thiscall GROUP_1::I_GetInfo(void)",
    "private: virtual unsigned int __thiscall ENUM_CALLER_LM_OBJ::EC_QueryBufferSize(void)const",
    "public: __thiscall USER_MEMB::USER_MEMB(class LOCATION const &,unsigned short const *)",
    "MNetAccessDel",
    "public: __thiscall DLL_HANDLE_CACHE_ARRAY::~DLL_HANDLE_CACHE_ARRAY(void)",
    "public: virtual long __thiscall WKSTA_10::I_GetInfo(void)",
    "public: __thiscall LSA_PRIVILEGES_ENUM::LSA_PRIVILEGES_ENUM(class LSA_POLICY const *)",
    "protected: virtual long __thiscall ENUM_CALLER_LM_OBJ::W_CreateNew(void)",
    "public: __thiscall CHARDEVQ1_ENUM::CHARDEVQ1_ENUM(unsigned short const *,unsigned short const *)",
    "public: class ALIAS_ENUM_OBJ const * __thiscall ALIAS_ENUM_ITER::Next(long *,int)",
    "public: virtual unsigned short const * __thiscall DOMAIN::QueryName(void)const",
    "public: __thiscall SC_SERVICE::SC_SERVICE(class SC_MANAGER const &,unsigned short const *,unsigned int)",
    "protected: void __thiscall REPL_EDIR_2::SetLockTime(unsigned long)",
    "public: class SESSION0_ENUM_OBJ const * __thiscall SESSION0_ENUM_ITER::operator()(void)",
    "public: virtual void __thiscall SAM_MEMORY::Set(void *,unsigned long)",
    "public: int __thiscall OS_SECURITY_DESCRIPTOR_CONTROL::IsSACLDefaulted(void)const",
    "public: virtual long __thiscall LM_AUDIT_LOG::QuerySrcSupportedCategoryList(class NLS_STR const &,class STRLIST * *)",
    "MxCalcNewInfoFromOldParm",
    "MNetCharDevQPurgeSelf",
    "public: __thiscall EVENT_LOG::EVENT_LOG(unsigned short const *,enum EVLOG_DIRECTION,unsigned short const *)",
    "public: __thiscall SOURCE_INFO_ARRAY::~SOURCE_INFO_ARRAY(void)",
    "protected: virtual long __thiscall LM_ERROR_LOG::I_Next(int *,unsigned long)",
    "protected: void __thiscall NEW_LM_OBJ::FixupPointer(unsigned short * *,class NEW_LM_OBJ const *)",
    "private: virtual long __thiscall SERVICE_ENUM::CallAPI(unsigned char * *,unsigned int *)",
    "public: __thiscall CONN0_ENUM_OBJ::CONN0_ENUM_OBJ(void)",
    "public: long __thiscall GROUP_1::SetComment(unsigned short const *)",
    "public: unsigned long __thiscall USER_MODALS::QueryMinPasswdAge(void)const",
    "public: class USER10_ENUM_OBJ const * __thiscall USER10_ENUM_ITER::Next(long *,int)",
    "public: long __thiscall OS_ACL::QueryBytesInUse(unsigned long *)const",
    "public: unsigned short const * __thiscall GROUP_1::QueryComment(void)const",
    "public: long __thiscall SHARE_1::SetComment(unsigned short const *)",
    "public: int __thiscall ARRAY_LIST_SOURCE_INFO_ITEM_PTR::Add(class SOURCE_INFO_ITEM_PTR const &)",
    "public: long __thiscall SHARE_2::CloneFrom(class SHARE_2 const &)",
    "public: long __thiscall SOURCE_INFO_ITEM::Set(unsigned short,unsigned short const *,unsigned short,class STRLIST *,unsigned short const *)",
    "private: void __thiscall NEW_LM_OBJ::MakeNew(void)",
    "private: void __thiscall LM_RESUME_ENUM::RegisterIter(void)",
    "public: __thiscall LOCATION::LOCATION(unsigned short const *,int)",
    "public: long __thiscall SAM_ALIAS::AddMember(void *)",
    "MNetServerGetInfo",
    "protected: void __thiscall DEVICE::SetRemoteType(unsigned int)",
    "public: __thiscall LM_CONFIG::~LM_CONFIG(void)",
    "public: void __thiscall TRUSTED_DOMAIN_ENUM_OBJ::SetBufferPtr(struct _LSA_TRUST_INFORMATION const *)",
    "protected: virtual long __thiscall NEW_LM_OBJ::I_ChangeToNew(void)",
    "public: long __thiscall REPLICATOR_0::SetImportList(unsigned short const *)",
    "public: unsigned int __thiscall USER_MODALS::QueryPasswdHistLen(void)const",
    "public: unsigned short const * __thiscall ITER_DEVICE::Next(void)",
    "public: struct _PRIVILEGE_SET * __thiscall OS_PRIVILEGE_SET::QueryPrivSet(void)const",
    "protected: long __thiscall NT_EVENT_LOG::QueryCurrentEntryUser(class NLS_STR *)",
    "private: long __thiscall REPLICATOR_0::W_Write(void)",
    "private: long __thiscall BROWSE_DOMAIN_ENUM::GetTrustingDomains(void)",
    "IsSlowTransport",
    "public: unsigned short const * __thiscall WKSTA_1::QueryLogonServer(void)const",
    "protected: __thiscall LSA_MEMORY::LSA_MEMORY(int)",
    "public: unsigned long __thiscall REPLICATOR_0::QueryRole(void)const",
    "public: __thiscall LM_SESSION_10::LM_SESSION_10(unsigned short const *,unsigned short const *)",
    "public: unsigned long __thiscall OS_SACL_SUBJECT_ITER::QueryNewContainerAuditAccessMask_S(void)const",
    "protected: long __thiscall LOC_LM_OBJ::W_CloneFrom(class LOC_LM_OBJ const &)",
    "private: int __thiscall LM_SERVICE::W_IsWellKnownService(void)const",
    "public: long __thiscall SC_SERVICE::QuerySecurity(unsigned long,void * *)",
    "public: long __thiscall LOG_REGISTRY_INFO::GetSrcSupportedTypeMask(unsigned short const *,unsigned short *)",
    "public: long __thiscall WKSTA_USER_1::SetLogonDomain(unsigned short const *)",
    "protected: void __thiscall LM_SESSION_10::SetTime(unsigned long)",
    "MNetCharDevGetInfo",
    "private: long __thiscall SERVER_2::W_Write(void)",
    "public: unsigned long __thiscall USER_MODALS::QueryForceLogoff(void)const",
    "public: int __thiscall MEMBERSHIP_LM_OBJ::FindAssocName(unsigned short const *,unsigned int *)",
    "public: long __thiscall LSA_POLICY::SetAccountDomain(class LSA_ACCT_DOM_INFO_MEM const *)",
    "MNetReplExportDirUnlock",
    "public: class SAM_DOMAIN * __thiscall ADMIN_AUTHORITY::QueryAccountDomain(void)const",
    "public: int __thiscall OS_ACL_SUBJECT_ITER::MapGenericAllOnly(void)const",
    "public: class BUFFER const & __thiscall SERVICE_CONTROL::QueryBuffer(void)const",
    "protected: long __thiscall USER_3::SetUserId(unsigned long)",
    "public: __thiscall EVENT_FILTER_PATTERN::EVENT_FILTER_PATTERN(unsigned short,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned long)",
    "public: long __thiscall USER_2::QueryAccountExpires(void)const",
    "public: enum EVLOG_DIRECTION __thiscall EVENT_LOG::QueryDirection(void)const",
    "MxUnicodeBufferSizeDBCS",
    "public: __thiscall DOMAIN0_ENUM::DOMAIN0_ENUM(unsigned short const *)",
    "public: __thiscall SESSION1_ENUM_OBJ::~SESSION1_ENUM_OBJ(void)",
    "public: unsigned short const * __thiscall REPLICATOR_0::QueryExportPath(void)const",
    "MNetLogonEnum",
    "public: __thiscall SERVER1_ENUM_OBJ::SERVER1_ENUM_OBJ(void)",
    "public: __thiscall LOCATION::LOCATION(enum LOCATION_TYPE,int)",
    "public: __thiscall SESSION1_ENUM::SESSION1_ENUM(unsigned short const *)",
    "private: void __thiscall USER_2::CtAux(void)",
    "public: long __thiscall LSA_TRUSTED_DOMAIN::QueryPosixOffset(unsigned long *)const",
    "protected: virtual long __thiscall GROUP_MEMB::CallAPI(unsigned char * *,unsigned int *)",
    "public: long __thiscall USER_11::SetFullName(unsigned short const *)",
    "protected: unsigned int __thiscall NEW_LM_OBJ::QueryBufferSize(void)const",
    "public: __thiscall LM_SESSION_0::LM_SESSION_0(unsigned short const *,enum LOCATION_TYPE)",
    "MNetReplExportDirEnum",
    "public: unsigned int __thiscall SHARE_2::QueryCurrentUses(void)const",
    "private: long __thiscall SAM_DOMAIN::OpenDomain(class SAM_SERVER const &,void *,unsigned long)",
    "public: __thiscall ENUM_CALLER::ENUM_CALLER(void)",
    "private: long __thiscall LOG_REGISTRY_INFO::InitSource(int)",
    "public: __thiscall SERVICE_CONTROL::SERVICE_CONTROL(void)",
    "public: int __thiscall SOURCE_INFO_ITEM_PTR::Compare(class SOURCE_INFO_ITEM_PTR const *)const",
    "public: virtual long __thiscall USER_MODALS::GetInfo(void)",
    "private: long __thiscall LOG_REGISTRY_INFO::GetLibHandle(unsigned short const *,struct HINSTANCE__ * *)",
    "MNetGroupAddUser",
    "protected: virtual long __thiscall SHARE_2::I_WriteNew(void)",
    "public: long __thiscall NEW_LM_OBJ::CreateNew(void)",
    "public: unsigned short const * __thiscall LM_FILE_3::QueryPathname(void)const",
    "public: __thiscall SOURCE_INFO_ARRAY::SOURCE_INFO_ARRAY(unsigned int)",
    "protected: void __thiscall REPL_IDIR_1::SetLastUpdateTime(unsigned long)",
    "public: __thiscall USER_MODALS_3::USER_MODALS_3(unsigned short const *)",
    "public: __thiscall CONTEXT_ENUM::CONTEXT_ENUM(unsigned long)",
    "protected: __thiscall LOC_LM_RESUME_ENUM::LOC_LM_RESUME_ENUM(enum LOCATION_TYPE,unsigned int,int)",
    "public: long __thiscall SERVER_1::SetComment(unsigned short const *)",
    "public: class USE1_ENUM_OBJ const * __thiscall USE1_ENUM_ITER::operator()(void)",
    "public: int __thiscall LM_SERVICE::IsPaused(long *)",
    "private: long __thiscall WKSTA_USER_1::W_Write(void)",
    "protected: __thiscall LM_SESSION::LM_SESSION(unsigned short const *,class LOCATION const &)",
    "public: long __thiscall USER_11::SetPriv(unsigned int)",
    "protected: __thiscall LM_EVENT_LOG::LM_EVENT_LOG(unsigned short const *,enum EVLOG_DIRECTION,unsigned short const *)",
    "public: void __thiscall FILE2_ENUM_OBJ::SetBufferPtr(struct _FILE_INFO_2 const *)",
    "public: int __thiscall OS_SACL_SUBJECT_ITER::HasThisAuditAce_F(void)const",
    "public: __thiscall TIME_OF_DAY::TIME_OF_DAY(unsigned short const *)",
    "public: int __thiscall LSA_TRANSLATED_SID_MEM::QueryFailingNameIndex(unsigned long *)",
    "public: struct _POLICY_ACCOUNT_DOMAIN_INFO const * __thiscall LSA_ACCT_DOM_INFO_MEM::QueryPtr(void)const",
    "public: __thiscall LSA_PRIVILEGES_ENUM_OBJ::LSA_PRIVILEGES_ENUM_OBJ(void)",
    "public: __thiscall LOCATION::~LOCATION(void)",
    "public: __thiscall OS_ACL::OS_ACL(struct _ACL *,int,class OS_SECURITY_DESCRIPTOR *)",
    "public: long __thiscall EVENT_LOG::Next(int *)",
    "public: __thiscall SAM_DOMAIN::SAM_DOMAIN(class SAM_SERVER const &,void *,unsigned long)",
    "public: long __thiscall SHARE_2::SetPassword(unsigned short const *)",
    "protected: void __thiscall REPL_IDIR_1::SetState(unsigned long)",
    "public: long __thiscall LM_SERVICE::Poll(int *)",
    "public: __thiscall USE1_ENUM_OBJ::~USE1_ENUM_OBJ(void)",
    "public: void __thiscall REPLICATOR_0::SetRandom(unsigned long)",
    "public: __thiscall DOMAIN::DOMAIN(unsigned short const *,unsigned short const *,int)",
    "protected: virtual long __thiscall SHARE::I_Delete(unsigned int)",
    "public: unsigned long __thiscall USER_MODALS_3::QueryThreshold(void)const",
    "protected: virtual long __thiscall NEW_LM_OBJ::I_GetInfo(void)",
    "public: unsigned short const * __thiscall USER_2::QueryScriptPath(void)const",
    "protected: void __thiscall ENUM_OBJ_BASE::SetBufferPtr(unsigned char const *)",
    "public: __thiscall DOMAIN_WITH_DC_CACHE::DOMAIN_WITH_DC_CACHE(unsigned short const *,int)",
    "private: virtual unsigned char * __thiscall LM_ENUM::EC_QueryBufferPtr(void)const",
    "I_MNetPathCompare",
    "public: unsigned short const * __thiscall DOMAIN::QueryAnyDC(void)const",
    "public: int __thiscall USER_2::QueryAccountDisabled(void)const",
    "public: __thiscall SAM_PSWD_DOM_INFO_MEM::~SAM_PSWD_DOM_INFO_MEM(void)",
    "public: unsigned long __thiscall FILE3_ENUM_OBJ::QueryNumLocks(void)const",
    "public: long __thiscall LSA_ACCOUNT::InsertPrivilege(struct _LUID,unsigned long)",
    "protected: virtual unsigned long __thiscall LM_AUDIT_LOG::QueryEntriesInBuffer(void)",
    "public: long __thiscall SC_SERVICE::EnumDependent(unsigned int,struct _ENUM_SERVICE_STATUSW * *,unsigned long *)",
    "public: __thiscall ARRAY_SOURCE_INFO_ITEM_PTR::~ARRAY_SOURCE_INFO_ITEM_PTR(void)",
    "public: __thiscall SHARE2_ENUM_OBJ::~SHARE2_ENUM_OBJ(void)",
    "public: __thiscall RAW_LOG_ENTRY::~RAW_LOG_ENTRY(void)",
    "private: virtual long __thiscall CHARDEVQ_ENUM::CallAPI(unsigned char * *,unsigned int *)",
    "public: long __thiscall OS_SECURITY_DESCRIPTOR::QueryGroup(int *,class OS_SID * *,int *)const",
    "public: unsigned int __thiscall SERVER_2::QueryMaxUsers(void)const",
    "protected: virtual long __thiscall USER_MEMB::I_ChangeToNew(void)",
    "private: void __thiscall LOC_LM_OBJ::CtAux(void)",
    "protected: virtual long __thiscall SHARE_2::I_WriteInfo(void)",
    "public: __thiscall SHARE2_ENUM::SHARE2_ENUM(unsigned short const *,int)",
    "MNetReplExportDirDel",
    "protected: long __thiscall EVENT_LOG_SOURCE::Close(void)",
    "public: long __thiscall LSA_POLICY::TrustDomain(class NLS_STR const &,void * const,class NLS_STR const &,int,unsigned short const *,int)",
    "public: long __thiscall LSA_ACCOUNT::DeletePrivilege(struct _LUID)",
    "MNetUserModalsGet",
    "public: long __thiscall SAM_ALIAS::RemoveMembers(void * *,unsigned int)",
    "protected: virtual void __thiscall LOC_LM_RESUME_ENUM::FreeBuffer(unsigned char * *)",
    "public: static long __stdcall LM_SRVRES::NukeUsersSession(unsigned short const *,unsigned short const *,unsigned short const *)",
    "protected: __thiscall OS_OBJECT_WITH_DATA::OS_OBJECT_WITH_DATA(unsigned int)",
    "MNetShareGetInfo",
    "public: class LM_RESUME_BUFFER * __thiscall ITER_SL_LM_RESUME_BUFFER::Next(void)",
    "protected: virtual long __thiscall NT_EVENT_LOG::I_Next(int *,unsigned long)",
    "public: unsigned short const * __thiscall LM_SESSION_2::QueryClientType(void)const",
    "public: __thiscall DOMAIN0_ENUM_OBJ::DOMAIN0_ENUM_OBJ(void)",
    "unsigned long __stdcall EnumUnavailDrives(void)",
    "public: __thiscall DOMAIN::DOMAIN(unsigned short const *,int)",
    "public: long __thiscall OS_SECURITY_DESCRIPTOR::SetOwner(int,class OS_SID const *,int)",
    "MxAllocUnicode",
    "public: long __thiscall LSA_POLICY::SetShutDownOnFull(int)",
    "public: __thiscall WKSTA_USER_1::WKSTA_USER_1(void)",
    "SlowTransportWorkerThread",
    "public: unsigned int __thiscall SERVER_1::QueryMinorVer(void)const",
    "MNetGroupDelUser",
    "public: __thiscall TRUSTED_DOMAIN_ENUM::TRUSTED_DOMAIN_ENUM(class LSA_POLICY const *,int)",
    "public: virtual unsigned int __thiscall LOCAL_USER::QueryPriv(void)const",
    "protected: virtual long __thiscall LM_FILE_2::I_GetInfo(void)",
    "public: int __thiscall OS_ACE::IsInheritancePropagated(void)const",
    "I_MNetLogonControl",
    "public: int __thiscall USER_11::IsAccountsOperator(void)const",
    "public: virtual long __thiscall LM_EVENT_LOG::SeekNewestLogEntry(void)",
    "protected: virtual void __thiscall DEVICE2::SetInfo(void)",
    "public: int __thiscall OS_SACL_SUBJECT_ITER::HasNewObjectAuditAce_F(void)const",
    "public: __thiscall SAM_USER_ENUM::~SAM_USER_ENUM(void)",
    "public: __thiscall NT_USER_ENUM_ITER::NT_USER_ENUM_ITER(class NT_USER_ENUM &)",
    "unsigned long __stdcall EnumUnavailLPTs(void)",
    "MNetReplSetInfo",
    "MxAsciifyRpcBuffer",
    "public: long __thiscall SHARE_2::SetResourceType(unsigned int)",
    "private: long __thiscall LOCATION::W_Set(unsigned short const *,enum LOCATION_TYPE,int)",
    "public: __thiscall REPL_IDIR1_ENUM_OBJ::REPL_IDIR1_ENUM_OBJ(void)",
    "protected: virtual long __thiscall USER_3::I_GetInfo(void)",
    "MNetGroupEnum",
    "public: long __thiscall LSA_TRUSTED_DOMAIN::Delete(void)",
    "MNetMessageBufferSend",
    "public: __thiscall DOMAIN::~DOMAIN(void)",
    "public: __thiscall USER10_ENUM_ITER::USER10_ENUM_ITER(class USER10_ENUM &)",
    "public: long __thiscall LSA_SECRET::Open(class LSA_POLICY const &,unsigned long)",
    "public: void __thiscall OS_LUID_AND_ATTRIBUTES::SetLuidAndAttrib(struct _LUID_AND_ATTRIBUTES)",
    "protected: virtual long __thiscall LSA_ACCOUNT::I_Delete(unsigned int)",
    "public: unsigned long __thiscall OS_SACL_SUBJECT_ITER::QueryNewObjectAuditAccessMask_S(void)const",
    "public: __thiscall OS_DACL_SUBJECT_ITER::~OS_DACL_SUBJECT_ITER(void)",
    "protected: __thiscall REPL_EDIR_BASE::REPL_EDIR_BASE(unsigned short const *,unsigned short const *)",
    "public: void __thiscall REPL_EDIR_1::SetExtent(unsigned long)",
    "protected: long __thiscall SHARE_2::SetWriteBuffer(int)",
    "protected: class OS_ACL const * __thiscall OS_ACL_SUBJECT_ITER::QueryACL(void)const",
    "protected: void __thiscall REPL_DIR_BASE::SetReplInfoLevel(unsigned int)",
    "private: void __thiscall SERVICE_ENUM::CountServices(unsigned char *,unsigned int *,unsigned int *)",
    "public: __thiscall LSA_TRUSTED_DOMAIN::~LSA_TRUSTED_DOMAIN(void)",
    "protected: virtual long __thiscall REPL_EDIR_BASE::I_WriteNew(void)",
    "public: class EVENT_FILTER_PATTERN * __thiscall EVENT_LOG::QueryFilter(void)const",
    "protected: virtual long __thiscall GROUP_1::I_WriteInfo(void)",
    "public: int __thiscall OS_SACL_SUBJECT_ITER::HasThisAuditAce_S(void)const",
    "public: virtual void __thiscall LM_EVENT_LOG::Reset(void)",
    "MFreeMem",
    "public: __thiscall DOMAIN_WITH_DC_CACHE::~DOMAIN_WITH_DC_CACHE(void)",
    "public: __thiscall REPL_EDIR2_ENUM_OBJ::~REPL_EDIR2_ENUM_OBJ(void)",
    "protected: virtual long __thiscall NT_EVENT_LOG::I_Open(void)",
    "public: __thiscall USER0_ENUM_OBJ::USER0_ENUM_OBJ(void)",
    "MNetUserGetInfo",
    "public: __thiscall WKSTA_USER_1::~WKSTA_USER_1(void)",
    "public: long __thiscall OS_SECURITY_DESCRIPTOR::SetSACL(int,class OS_ACL const *,int)",
    "public: __thiscall ITER_SL_LM_RESUME_BUFFER::~ITER_SL_LM_RESUME_BUFFER(void)",
    "public: int __thiscall LM_SESSION_1::IsEncrypted(void)const",
    "public: unsigned long __thiscall OS_SACL_SUBJECT_ITER::QueryInheritOnlyAuditAccessMask_S(void)const",
    "public: struct HINSTANCE__ * __thiscall DLL_NAME_HANDLE_PAIR::QueryHandle(void)",
    "public: virtual unsigned short const * __thiscall LM_SESSION::QueryName(void)const",
    "public: __thiscall GROUP_0::GROUP_0(unsigned short const *,class LOCATION const &)",
    "public: long __thiscall LSA_POLICY::SetPrimaryDomainName(class NLS_STR const *,void * const *)",
    "public: __thiscall LM_MESSAGE::LM_MESSAGE(enum LOCATION_TYPE)",
    "public: __thiscall USE1_ENUM_OBJ::USE1_ENUM_OBJ(void)",
    "public: int __thiscall ARRAY_LIST_SOURCE_INFO_ITEM_PTR::BinarySearch(class SOURCE_INFO_ITEM_PTR const &)const",
    "public: __thiscall USER0_ENUM_OBJ::~USER0_ENUM_OBJ(void)",
    "protected: void __thiscall DEVICE::SetServerName(unsigned short const *)",
    "public: __thiscall GROUP1_ENUM_ITER::GROUP1_ENUM_ITER(class GROUP1_ENUM &)",
    "public: int __thiscall LOCATION::IsDomain(void)const",
    "public: struct _POLICY_LSA_SERVER_ROLE_INFO const * __thiscall LSA_SERVER_ROLE_INFO_MEM::QueryPtr(void)const",
    "public: __thiscall CONTEXT_ENUM_OBJ::~CONTEXT_ENUM_OBJ(void)",
    "public: long __thiscall SAM_DOMAIN::EnumerateAliasesForUser(void *,class SAM_RID_MEM *)const",
    "protected: virtual long __thiscall GROUP_MEMB::I_CreateNew(void)",
    "protected: virtual long __thiscall SERVER_2::I_GetInfo(void)",
    "public: __thiscall NT_GROUP_ENUM_OBJ::NT_GROUP_ENUM_OBJ(void)",
    "public: unsigned short const * __thiscall WKSTA_USER_1::QueryLogonDomain(void)const",
    "public: __thiscall SERVER1_ENUM::~SERVER1_ENUM(void)",
    "public: long __thiscall DEVICE::Disconnect(unsigned int)",
    "public: __thiscall LM_SESSION_0::LM_SESSION_0(unsigned short const *,class LOCATION const &)",
    "public: __thiscall REPL_IDIR_0::REPL_IDIR_0(unsigned short const *,unsigned short const *)",
    "public: long __thiscall WKSTA_USER_1::SetOtherDomains(unsigned short const *)",
    "public: void __thiscall EVENT_LOG::SetSeekFlag(int)",
    "protected: virtual long __thiscall REPL_EDIR_1::W_CacheApiData(unsigned char const *)",
    "protected: void __thiscall LM_SESSION_1::SetNumOpens(unsigned int)",
    "public: long __thiscall OS_ACE::SetSID(class OS_SID const &)",
    "public: class NLS_STR * __thiscall ITER_SL_NLS_STR::QueryProp(void)",
    "protected: virtual long __thiscall GROUP_MEMB::I_ChangeToNew(void)",
    "public: long __cdecl EVENT_LOG_SOURCE::Log(unsigned short,unsigned short,unsigned long,unsigned short const *,...)",
    "public: long __thiscall NEW_LM_OBJ::Delete(unsigned int)",
    "public: __thiscall LSA_ACCOUNTS_ENUM_ITER::LSA_ACCOUNTS_ENUM_ITER(class LSA_ACCOUNTS_ENUM &)",
    "MxMapParameters",
    "MakeArgvArgc",
    "public: long __thiscall USER_MODALS::SetMinPasswdLen(unsigned int)",
    "public: __thiscall SLIST_OF_BROWSE_DOMAIN_INFO::~SLIST_OF_BROWSE_DOMAIN_INFO(void)",
    "private: virtual long __thiscall REPL_IDIR_ENUM::CallAPI(unsigned char * *,unsigned int *)",
    "private: void __thiscall LM_OBJ_BASE::MakeConstructed(void)",
    "public: void * __thiscall OS_ACE::QueryACE(void)const",
    "protected: long __thiscall SHARE_2::W_CloneFrom(class SHARE_2 const &)",
    "public: __thiscall USER::USER(unsigned short const *,enum LOCATION_TYPE)",
    "public: unsigned int __thiscall DEVICE::QueryStatus(void)const",
    "public: __thiscall SESSION0_ENUM::~SESSION0_ENUM(void)",
    "public: int __thiscall GROUP1_ENUM_ITER::Backup(void)",
    "public: long __thiscall USER_11::SetWorkstations(unsigned short const *)",
    "protected: void __thiscall SERVER_2::SetMaxUsers(unsigned int)",
    "protected: virtual long __thiscall GROUP_1::I_WriteNew(void)",
    "public: __thiscall LOC_LM_OBJ::LOC_LM_OBJ(unsigned short const *,int)",
    "public: unsigned short __thiscall SOURCE_INFO_ITEM::QueryTypeMask(void)const",
    "public: __thiscall FILE2_ENUM_ITER::FILE2_ENUM_ITER(class FILE2_ENUM &)",
    "public: __thiscall SERVER_ENUM::~SERVER_ENUM(void)",
    "public: __thiscall SHARE1_ENUM_OBJ::SHARE1_ENUM_OBJ(void)",
    "public: class SERVER1_ENUM_OBJ const * __thiscall SERVER1_ENUM_ITER::operator()(void)",
    "public: struct _UNICODE_STRING const * __thiscall LSA_ACCT_DOM_INFO_MEM::QueryUnicodeName(void)const",
    "public: virtual unsigned long __thiscall LM_ERROR_LOG::QueryCurrentEntryData(unsigned char * *)",
    "public: class NLS_STR * __thiscall ITER_SL_NLS_STR::Next(void)",
    "public: long __thiscall OS_SECURITY_DESCRIPTOR::QueryOwner(int *,class OS_SID * *,int *)const",
    "public: __thiscall DEVICE::DEVICE(unsigned short const *)",
    "private: virtual long __thiscall REPL_IDIR_0::W_Write(void)",
    "public: class NLS_STR const * __thiscall SOURCE_INFO_ITEM::QuerySource(void)const",
    "public: __thiscall TRUSTED_DOMAIN_ENUM_ITER::TRUSTED_DOMAIN_ENUM_ITER(class TRUSTED_DOMAIN_ENUM &)",
    "public: class OS_SID const * __thiscall OS_ACL_SUBJECT_ITER::QuerySID(void)const",
    "public: __thiscall CHARDEVQ1_ENUM_OBJ::CHARDEVQ1_ENUM_OBJ(void)",
    "protected: long __thiscall SHARE_2::SetCurrentUses(unsigned int)",
    "public: __thiscall NT_GROUP_ENUM::~NT_GROUP_ENUM(void)",
    "public: __thiscall NT_MACHINE_ENUM_ITER::NT_MACHINE_ENUM_ITER(class NT_MACHINE_ENUM &)",
    "public: class STRLIST * __thiscall SOURCE_INFO_ITEM::QueryEventDllList(void)",
    "int __stdcall LMOTypeToNetType(enum LMO_DEVICE)",
    "public: class NLS_STR const * __thiscall SOURCE_INFO_ITEM::QueryCategoryDllName(void)const",
    "public: unsigned long __thiscall OS_SACL_SUBJECT_ITER::QueryInheritOnlyAuditAccessMask_F(void)const",
    "MNetUserDel",
    "MNetUseAdd",
    "MNetWkstaSetInfo",
    "private: long __thiscall LOG_REGISTRY_INFO::GetRemoteSystemRoot(class NLS_STR *)",
    "protected: __thiscall LM_FILE::LM_FILE(unsigned short const *,unsigned long)",
    "public: __thiscall LM_SESSION_2::LM_SESSION_2(unsigned short const *,enum LOCATION_TYPE)",
    "public: class BROWSE_DOMAIN_INFO * __thiscall ITER_SL_BROWSE_DOMAIN_INFO::Next(void)",
    "public: class USER0_ENUM_OBJ const * __thiscall USER0_ENUM_ITER::Next(long *,int)",
    "public: __thiscall REPL_EDIR_2::~REPL_EDIR_2(void)",
    "public: void __thiscall OS_ACE::SetInheritOnly(int)",
    "MNetAccessGetUserPerms",
    "public: __thiscall SERVICE_CONTROL::~SERVICE_CONTROL(void)",
    "MNetConnectionEnum",
    "MNetApiBufferReAlloc",
    "protected: virtual unsigned int __thiscall MEMBERSHIP_LM_OBJ::QueryItemSize(void)const",
    "public: class CONN1_ENUM_OBJ const * __thiscall CONN1_ENUM_ITER::operator()(void)",
    "public: class SOURCE_INFO_ITEM_PTR & __thiscall SOURCE_INFO_ITEM_PTR::operator=(class SOURCE_INFO_ITEM_PTR const &)",
    "protected: virtual long __thiscall DEVICE::CallAPI(void)",
    "public: unsigned int __thiscall LM_FILE_3::QueryNumLock(void)const",
    "public: __thiscall GROUP_ENUM::~GROUP_ENUM(void)",
    "private: virtual long __thiscall SERVER_ENUM::CallAPI(unsigned char * *,unsigned int *)",
    "public: long __thiscall NET_NAME::QueryComputerName(class NLS_STR *)",
    "public: long __thiscall SAM_ALIAS::AddMembers(void * *,unsigned int)",
    "public: int __thiscall EVENT_LOG::IsFilterOn(void)",
    "public: class BROWSE_DOMAIN_INFO const * __thiscall BROWSE_DOMAIN_ENUM::Next(void)",
    "protected: long __thiscall SHARE_1::W_CloneFrom(class SHARE_1 const &)",
    "public: int __thiscall OS_ACE::IsInherittedByNewObjects(void)const",
    "private: virtual unsigned char * __thiscall ENUM_CALLER_LM_OBJ::EC_QueryBufferPtr(void)const",
    "public: long __thiscall EVENT_FIND_PATTERN::CheckForMatch(int *,class RAW_LOG_ENTRY *)const",
    "public: long __thiscall LOG_REGISTRY_INFO::Init(void)",
    "public: __thiscall REPL_IDIR_1::~REPL_IDIR_1(void)",
    "public: struct SC_HANDLE__ * __thiscall SERVICE_CONTROL::QueryHandle(void)const",
    "public: unsigned int __thiscall LOGON_HOURS_SETTING::QueryUnitsPerWeek(void)const",
    "public: long __thiscall LM_MESSAGE::SendBuffer(unsigned short const *,unsigned short const *,unsigned int)",
    "protected: void __thiscall OS_ACL_SUBJECT_ITER::SetCurrentACE(unsigned long)",
    "public: unsigned long __thiscall ADMIN_AUTHORITY::QueryAccessLSAPolicy(void)const",
    "public: unsigned short const * __thiscall DOMAIN::QueryPDC(void)const",
    "protected: virtual long __thiscall USER_3::I_WriteInfo(void)",
    "public: __thiscall DOMAIN0_ENUM_OBJ::~DOMAIN0_ENUM_OBJ(void)",
    "public: __thiscall SAM_USER::SAM_USER(class SAM_DOMAIN const &,unsigned long,unsigned long)",
    "public: __thiscall CHARDEVQ1_ENUM_OBJ::~CHARDEVQ1_ENUM_OBJ(void)",
    "public: int __thiscall OS_ACE::IsKnownACE(void)const",
    "public: unsigned short const * __thiscall LM_SESSION_10::QueryUsername(void)const",
    "protected: __thiscall LSA_OBJECT::~LSA_OBJECT(void)",
    "public: long __thiscall OS_SID::QueryLastSubAuthority(unsigned long * *)const",
    "protected: virtual long __thiscall USER_MEMB::I_WriteInfo(void)",
    "public: class ARRAY_DLL_NAME_HANDLE_PAIR & __thiscall ARRAY_DLL_NAME_HANDLE_PAIR::operator=(class ARRAY_DLL_NAME_HANDLE_PAIR &)",
    "protected: unsigned int __thiscall REPL_DIR_BASE::QueryReplInfoLevel(void)const",
    "public: __thiscall USER_11::~USER_11(void)",
    "public: virtual unsigned short const * __thiscall SHARE::QueryName(void)const",
    "public: __thiscall SC_MANAGER::SC_MANAGER(unsigned short const *,unsigned int,enum SERVICE_DATABASE)",
    "public: int __thiscall DLL_HANDLE_CACHE_ARRAY::QuerySize(void)const",
    "public: __thiscall SAM_GROUP::SAM_GROUP(class SAM_DOMAIN const &,unsigned long,unsigned long)",
    "public: class TRIPLE_SERVER_ENUM_OBJ const * __thiscall TRIPLE_SERVER_ENUM_ITER::operator()(void)",
    "protected: __thiscall SAM_OBJECT::~SAM_OBJECT(void)",
    "public: static long __stdcall NT_ACCOUNTS_UTILITY::QuerySystemSid(enum UI_SystemSid,class OS_SID *,unsigned short const *)",
    "protected: long __thiscall DEVICE2::SetUsername(unsigned short const *)",
    "public: __thiscall USER2_ENUM::USER2_ENUM(class LOCATION const &,int)",
    "public: __thiscall LM_ERROR_LOG::LM_ERROR_LOG(unsigned short const *,enum EVLOG_DIRECTION,unsigned short const *)",
    "MNetShareEnum",
    "public: __thiscall LSA_ACCOUNTS_ENUM::LSA_ACCOUNTS_ENUM(class LSA_POLICY const *)",
    "public: __thiscall USER_3::USER_3(unsigned short const *,unsigned short const *)",
    "public: unsigned long __thiscall LOG_ENTRY_NUMBER::QueryRecordNum(void)const",
    "public: virtual __thiscall LM_ERROR_LOG::~LM_ERROR_LOG(void)",
    "public: __thiscall TIME_OF_DAY::TIME_OF_DAY(class LOCATION &)",
    "public: __thiscall SESSION1_ENUM_OBJ::SESSION1_ENUM_OBJ(void)",
    "private: long __thiscall BROWSE_DOMAIN_ENUM::GetLanmanDomains(unsigned long)",
    "public: long __thiscall OS_PRIVILEGE_SET::RemovePrivilege(long)",
    "public: int __thiscall CONN0_ENUM_ITER::Backup(void)",
    "MNetReplImportDirUnlock",
    "public: enum EVLOG_DIRECTION __thiscall LOG_ENTRY_NUMBER::QueryDirection(void)const",
    "public: long __thiscall LOCATION::QueryNOSVersion(unsigned int *,unsigned int *)",
    "public: enum _SID_NAME_USE __thiscall LSA_TRANSLATED_NAME_MEM::QueryUse(unsigned long)const",
    "public: __thiscall LM_MESSAGE::LM_MESSAGE(unsigned short const *)",
    "protected: long __thiscall EVENT_LOG_SOURCE::Open(unsigned short const *,unsigned short const *)",
    "public: __thiscall REPL_DIR_BASE::~REPL_DIR_BASE(void)",
    "protected: __thiscall BASE::BASE(void)",
    "public: long __thiscall SAM_GROUP::SetGroupname(class NLS_STR const *)",
    "public: long __thiscall USER_MODALS::SetPasswdHistLen(unsigned int)",
    "private: virtual long __thiscall REPL_EDIR_1::W_Write(void)",
    "public: __thiscall NT_MACHINE_ENUM_ITER::~NT_MACHINE_ENUM_ITER(void)",
    "public: class FILE3_ENUM_OBJ const * __thiscall FILE3_ENUM_ITER::operator()(long *,int)",
    "public: long __thiscall LSA_POLICY::CheckIfShutDownOnFull(int *)",
    "public: __thiscall EVENT_LOG_SOURCE::EVENT_LOG_SOURCE(unsigned short const *,unsigned short const *)",
    "public: __thiscall DOMAIN_ENUM::~DOMAIN_ENUM(void)",
    "public: int __thiscall ARRAY_LIST_SOURCE_INFO_ITEM_PTR::AddIdemp(class SOURCE_INFO_ITEM_PTR const &)",
    "protected: virtual long __thiscall GROUP_MEMB::W_CreateNew(void)",
    "public: __thiscall SERVICE_ENUM::~SERVICE_ENUM(void)",
    "public: unsigned long __thiscall USER_3::QueryPrimaryGroupId(void)const",
    "public: long __thiscall LSA_POLICY::LeaveDomain(void)",
    "protected: long __thiscall NT_EVENT_LOG::QueryCurrentEntryCategory(class NLS_STR *)",
    "public: __thiscall USER_2::USER_2(unsigned short const *,class LOCATION const &)",
    "public: int __thiscall ARRAY_LIST_SOURCE_INFO_ITEM_PTR::Remove(class SOURCE_INFO_ITEM_PTR const &)",
    "public: class SOURCE_INFO_ITEM * __thiscall SOURCE_INFO_ITEM_PTR::QuerySourceItem(void)const",
    "public: long __thiscall USER_MODALS::SetForceLogoff(unsigned long)",
    "public: __thiscall ADMIN_AUTHORITY::ADMIN_AUTHORITY(unsigned short const *,unsigned long,unsigned long,unsigned long,unsigned long,int)",
    "protected: virtual long __thiscall REPL_EDIR_1::W_CreateNew(void)",
    "protected: virtual long __thiscall REPL_IDIR_BASE::I_WriteInfo(void)",
    "public: int __thiscall LM_SERVICE::IsContinuing(long *)",
    "public: long __thiscall ADMIN_AUTHORITY::ReplaceLSAPolicy(unsigned long)",
    "public: __thiscall SERVER1_ENUM_ITER::~SERVER1_ENUM_ITER(void)",
    "protected: __thiscall ENUM_OBJ_BASE::~ENUM_OBJ_BASE(void)",
    "public: class SAM_USER_ENUM_OBJ const * __thiscall SAM_USER_ENUM_ITER::Next(long *,int)",
    "protected: virtual void __thiscall FILE_ENUM::FreeBuffer(unsigned char * *)",
    "MNetReplImportDirEnum",
    "public: class SAM_SERVER * __thiscall ADMIN_AUTHORITY::QuerySamServer(void)const",
    "MNetAuditRead",
    "public: long __thiscall SC_MANAGER::EnumServiceStatus(unsigned int,unsigned int,struct _ENUM_SERVICE_STATUSW * *,unsigned long *,unsigned short const *)",
    "public: class SHARE2_ENUM_OBJ const * __thiscall SHARE2_ENUM_ITER::operator()(void)",
    "public: struct _FILE_INFO_3 const * __thiscall FILE3_ENUM_OBJ::QueryBufferPtr(void)const",
    "public: static long __stdcall LM_SRVRES::GetSessionsCount(unsigned short const *,unsigned long *)",
    "protected: virtual long __thiscall LM_EVENT_LOG::I_Close(void)",
    "protected: virtual long __thiscall REPLICATOR_0::I_WriteInfo(void)",
    "long __stdcall I_FetchUserFields(class NLS_STR *,class NLS_STR *,unsigned long *,class NLS_STR const &,class NLS_STR const *,long *)",
    "public: unsigned long __thiscall OS_SACL_SUBJECT_ITER::QueryAuditAccessMask_S(void)const",
    "public: __thiscall REPL_EDIR_0::REPL_EDIR_0(unsigned short const *,unsigned short const *)",
    "MNetWkstaGetInfo",
    "public: __thiscall LSA_ACCT_DOM_INFO_MEM::LSA_ACCT_DOM_INFO_MEM(int)",
    "public: int __thiscall USER_11::IsPrintOperator(void)const",
    "MNetShareEnumSticky",
    "public: __thiscall LSA_POLICY::LSA_POLICY(unsigned short const *,unsigned long)",
    "public: __thiscall SAM_DOMAIN::~SAM_DOMAIN(void)",
    "public: long __thiscall SC_MANAGER::Unlock(void)",
    "protected: virtual void __thiscall ALIAS_ENUM::FreeBuffer(unsigned char * *)",
    "protected: __thiscall LM_OBJ_BASE::LM_OBJ_BASE(int)",
    "public: __thiscall USER1_ENUM::USER1_ENUM(unsigned short const *,int)",
    "public: unsigned short const * __thiscall USER0_ENUM_OBJ::QueryName(void)const",
    "protected: void __thiscall DEVICE::SetRemoteName(unsigned short const *)",
    "public: int __thiscall LM_SERVICE::IsStopping(long *)",
    "public: long __thiscall NET_NAME::QueryLocalPath(class NLS_STR *)",
    "MNetConfigGet",
    "public: __thiscall LSA_ACCOUNT::LSA_ACCOUNT(class LSA_POLICY *,void *,unsigned long,unsigned short const *,void *)",
    "MDosPrintQEnum",
    "public: virtual long __thiscall NT_EVENT_LOG::WriteTextEntry(unsigned long,class INTL_PROFILE &,unsigned short)",
    "public: long __thiscall LSA_POLICY::TranslateNamesToSids(unsigned short const * const *,unsigned long,class LSA_TRANSLATED_SID_MEM *,class LSA_REF_DOMAIN_MEM *)",
    "protected: __thiscall USER_ENUM::USER_ENUM(class LOCATION const &,unsigned int,unsigned short const *,int)",
    "public: unsigned int __thiscall LM_RESUME_BUFFER::QueryItemCount(void)const",
    "public: unsigned short const * __thiscall LOCATION::QueryDomain(void)const",
    "public: int __thiscall LM_SERVICE::IsStopped(long *)",
    "public: virtual long __thiscall LM_ERROR_LOG::QueryCurrentEntryDesc(class NLS_STR *)",
    "protected: unsigned short const * __thiscall LOC_LM_OBJ::QueryServer(void)const",
    "public: __thiscall ARRAY_LIST_SOURCE_INFO_ITEM_PTR::ARRAY_LIST_SOURCE_INFO_ITEM_PTR(unsigned int)",
    "public: long __thiscall LSA_PRIMARY_DOM_INFO_MEM::QueryName(class NLS_STR *)const",
    "public: __thiscall NLS_STR::operator unsigned short const *(void)const",
    "public: __thiscall OS_LUID::OS_LUID(struct _LUID)",
    "protected: __thiscall SAM_MEMORY::SAM_MEMORY(int)",
    "I_MNetNameCompare",
    "public: class NLS_STR * __thiscall FORMATTED_LOG_ENTRY::QueryDescription(void)",
    "public: long __thiscall NET_ACCESS_1::SetPerm(unsigned short const *,enum PERMNAME_TYPE,unsigned int)",
    "public: __thiscall USER_3::USER_3(unsigned short const *,enum LOCATION_TYPE)",
    "SetupNullSession",
    "public: __thiscall OS_SACL_SUBJECT_ITER::OS_SACL_SUBJECT_ITER(class OS_ACL *,struct _GENERIC_MAPPING *,struct _GENERIC_MAPPING *,int,int)",
    "protected: unsigned char * __thiscall LM_ENUM::QueryPtr(void)const",
    "public: long __thiscall NET_NAME::QueryRelativePath(class NLS_STR *)",
    "public: long __thiscall SC_MANAGER::QueryLockStatus(struct _QUERY_SERVICE_LOCK_STATUSW * *)",
    "protected: __thiscall REPL_IDIR_BASE::REPL_IDIR_BASE(unsigned short const *,unsigned short const *)",
    "public: long __thiscall OS_SECURITY_DESCRIPTOR::QuerySACL(int *,class OS_ACL * *,int *)const",
    "public: __thiscall SC_MANAGER::~SC_MANAGER(void)",
    "public: __thiscall LM_SRVRES::LM_SRVRES(void)",
    "public: struct _POLICY_PRIVILEGE_DEFINITION const * __thiscall LSA_PRIVILEGES_ENUM_OBJ::QueryBufferPtr(void)const",
    "protected: virtual long __thiscall REPL_IDIR_BASE::I_GetInfo(void)",
    "public: __thiscall USE1_ENUM_ITER::USE1_ENUM_ITER(class USE1_ENUM &)",
    "public: int __thiscall SOURCE_INFO_ITEM::IsInitialized(void)const",
    "public: long __thiscall SC_SERVICE::ChangeConfig(unsigned int,unsigned int,unsigned int,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: int __thiscall OS_DACL_SUBJECT_ITER::IsInheritOnlyDenyAll(void)const",
    "public: __thiscall LM_FILE_3::LM_FILE_3(unsigned short const *,unsigned long)",
    "public: virtual unsigned short const * __thiscall USER::QueryName(void)const",
    "public: __thiscall USER1_ENUM_OBJ::USER1_ENUM_OBJ(void)",
    "protected: long __thiscall LM_RESUME_ENUM_ITER::NextGetInfo(void)",
    "MNetCharDevQSetInfo",
    "public: unsigned long __thiscall SERVER1_ENUM_OBJ::QueryServerType(void)const",
    "protected: void __thiscall LM_OBJ::MakeInvalid(void)",
    "protected: virtual long __thiscall GROUP_1::I_ChangeToNew(void)",
    "public: int __thiscall OS_SACL_SUBJECT_ITER::HasNewContainerAuditAce_F(void)const",
    "public: long __thiscall OS_ACL_SUBJECT_ITER::FindNextSubject(int *,class OS_SID *,class OS_ACE *)",
    "protected: virtual long __thiscall LM_OBJ::ValidateName(void)",
    "public: int __thiscall OS_DACL_SUBJECT_ITER::IsNewContainerDenyAll(void)const",
    "public: __thiscall TRIPLE_SERVER_ENUM_OBJ::TRIPLE_SERVER_ENUM_OBJ(void)",
    "public: virtual void __thiscall LM_AUDIT_LOG::Reset(void)",
    "MNetAccessCheck",
    "public: __thiscall SAM_SERVER::~SAM_SERVER(void)",
    "public: __thiscall EVENT_PATTERN_BASE::EVENT_PATTERN_BASE(unsigned short,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned long)",
    "public: __thiscall LM_SESSION::~LM_SESSION(void)",
    "public: long __thiscall LSA_POLICY::GetAccountDomain(class LSA_ACCT_DOM_INFO_MEM *)const",
    "public: long __thiscall EVENT_LOG::SeekLogEntry(class LOG_ENTRY_NUMBER const &,int)",
    "public: virtual unsigned short const * __thiscall COMPUTER::QueryName(void)const",
    "public: virtual void __thiscall NT_MEMORY::Set(void *,unsigned long)",
    "MAllocMem",
    "protected: virtual long __thiscall LM_SESSION_0::I_GetInfo(void)",
    "public: unsigned int __thiscall SERVER_1::QueryMajorVer(void)const",
    "MxAsciifyRpcEnumBufferAux",
    "public: __thiscall USER_2::USER_2(unsigned short const *,unsigned short const *)",
    "protected: long __thiscall LSA_POLICY::DeleteAllTrustedDomains(void)",
    "public: long __thiscall SAM_GROUP::RemoveMembers(unsigned long *,unsigned int)",
    "protected: void __thiscall LM_RESUME_ENUM::NukeBuffers(void)",
    "protected: virtual long __thiscall SERVER_1::I_GetInfo(void)",
    "protected: __thiscall LSA_MEMORY::~LSA_MEMORY(void)",
    "public: __thiscall SC_SERVICE::SC_SERVICE(class SC_MANAGER const &,unsigned short const *,unsigned short const *,unsigned int,unsigned int,unsigned int,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned int)",
    "public: long __thiscall USER_2::SetUserCantChangePass(int)",
    "public: unsigned short const * __thiscall LOC_LM_ENUM::QueryServer(void)const",
    "public: unsigned long __thiscall OS_ACE::QueryAccessMask(void)const",
    "public: class STRLIST * __thiscall SOURCE_INFO_ARRAY::QueryCategoryList(int)const",
    "protected: virtual long __thiscall WKSTA_USER_1::I_WriteInfo(void)",
    "protected: virtual long __thiscall NEW_LM_OBJ::W_CreateNew(void)",
    "protected: __thiscall GROUP_ENUM::GROUP_ENUM(enum LOCATION_TYPE,unsigned int,unsigned short const *)",
    "public: long __thiscall OS_PRIVILEGE_SET::FindPrivilege(struct _LUID)const",
    "public: __thiscall USER1_ENUM_OBJ::~USER1_ENUM_OBJ(void)",
    "public: __thiscall USER_ENUM::~USER_ENUM(void)",
    "public: unsigned short const * __thiscall FILE3_ENUM_OBJ::QueryPathName(void)const",
    "public: __thiscall LSA_ACCOUNT_PRIVILEGE_ENUM_ITER::LSA_ACCOUNT_PRIVILEGE_ENUM_ITER(class OS_PRIVILEGE_SET *)",
    "public: int __thiscall LM_RESUME_ENUM::DoesKeepBuffers(void)const",
    "public: unsigned long __thiscall LM_SESSION_10::QueryIdleTime(void)const",
    "public: long __thiscall SC_SERVICE::Delete(void)",
    "private: int __thiscall LOG_REGISTRY_INFO::QuerySourceIndex(unsigned short const *)",
    "public: __thiscall SAM_SERVER::SAM_SERVER(unsigned short const *,unsigned long)",
    "public: void __thiscall GROUP1_ENUM_OBJ::SetBufferPtr(struct _GROUP_INFO_1 const *)",
    "public: long __thiscall LSA_SECRET::QueryInfo(class NLS_STR *,class NLS_STR *,union _LARGE_INTEGER *,union _LARGE_INTEGER *)const",
    "public: long __thiscall OS_ACL::Copy(class OS_ACL const &,int)",
    "public: __thiscall GROUP_0::~GROUP_0(void)",
    "public: __thiscall ITER_DEVICE::ITER_DEVICE(enum LMO_DEVICE,enum LMO_DEV_USAGE)",
    "protected: void __thiscall REPL_DIR_BASE::SetReplBufferSize(unsigned int)",
    "private: long __thiscall LOG_REGISTRY_INFO::RetrieveMessage(struct HINSTANCE__ *,unsigned long,class NLS_STR *)",
    "public: __thiscall FILE2_ENUM_OBJ::~FILE2_ENUM_OBJ(void)",
    "public: int __thiscall OS_SECURITY_DESCRIPTOR::IsDACLPresent(void)const",
    "private: int __thiscall LM_OBJ_BASE::IsInvalid(void)const",
    "protected: long __thiscall LM_AUDIT_LOG::PermMap(unsigned int,class NLS_STR *)",
    "public: unsigned long __thiscall USER_MODALS::QueryMaxPasswdAge(void)const",
    "public: __thiscall USE_ENUM::~USE_ENUM(void)",
    "public: __thiscall GROUP_1::~GROUP_1(void)",
    "public: unsigned short const * __thiscall LM_FILE_3::QueryUsername(void)const",
    "public: virtual long __thiscall LM_AUDIT_LOG::Clear(unsigned short const *)",
    "private: static long __stdcall DOMAIN_WITH_DC_CACHE::ClearDcCache(struct _DC_CACHE_ENTRY *)",
    "public: __thiscall ALIAS_ENUM::ALIAS_ENUM(class SAM_DOMAIN &,unsigned int)",
    "public: void __thiscall NT_GROUP_ENUM_OBJ::SetBufferPtr(struct _DOMAIN_DISPLAY_GROUP const *)",
    "MNetApiBufferFree",
    "private: long __thiscall LOG_REGISTRY_INFO::GetRegKeyModule(unsigned short const *,class REG_KEY * *)",
    "public: enum LM_SERVICE_STATUS __thiscall LM_SERVICE::QueryStatus(long *)",
    "protected: virtual long __thiscall REPL_EDIR_0::W_CreateNew(void)",
    "public: __thiscall ITER_SL_BROWSE_DOMAIN_INFO::ITER_SL_BROWSE_DOMAIN_INFO(class SLIST &)",
    "protected: unsigned int __thiscall LM_ENUM_ITER::QueryCount(void)const",
    "public: long __thiscall SLIST_OF_NLS_STR::Append(class NLS_STR const *)",
    "public: struct HINSTANCE__ * __thiscall DLL_HANDLE_CACHE_ARRAY::QueryHandle(class NLS_STR const &)",
    "public: unsigned short const * __thiscall SHARE_2::QueryPassword(void)const",
    "private: long __thiscall LM_SERVICE::W_ServiceControl(unsigned int,unsigned int)",
    "public: __thiscall LSA_TRUST_INFO_MEM::LSA_TRUST_INFO_MEM(int)",
    "public: int __thiscall LM_FILE_3::IsPermWrite(void)const",
    "public: __thiscall GROUP0_ENUM_OBJ::GROUP0_ENUM_OBJ(void)",
    "public: int __thiscall ARRAY_DLL_NAME_HANDLE_PAIR::Resize(unsigned int,int)",
    "public: void __thiscall SLIST_OF_LM_RESUME_BUFFER::Clear(void)",
    "private: enum _SERVER_ROLE __thiscall TRIPLE_SERVER_ENUM::MapTypeMaskToRole(unsigned long)const",
    "private: long __thiscall BROWSE_DOMAIN_ENUM::AddDomainToList(unsigned short const *,unsigned long,int)",
    "public: long __thiscall NET_ACCESS::SetName(unsigned short const *)",
    "protected: unsigned long __thiscall OS_ACL_SUBJECT_ITER::QueryCurrentACE(void)const",
    "public: __thiscall LM_FILE_2::~LM_FILE_2(void)",
    "protected: virtual long __thiscall SHARE_1::I_GetInfo(void)",
    "public: __thiscall OS_PRIVILEGE_SET::OS_PRIVILEGE_SET(struct _PRIVILEGE_SET *)",
    "protected: __thiscall NT_ACCOUNT_ENUM::~NT_ACCOUNT_ENUM(void)",
    "public: __thiscall NT_USER_ENUM::~NT_USER_ENUM(void)",
    "protected: void __thiscall DEVICE::SetBufPtr(unsigned char *)",
    "public: __thiscall USER1_ENUM_ITER::USER1_ENUM_ITER(class USER1_ENUM &)",
    "public: long __thiscall USER_MEMB::CloneFrom(class USER_MEMB const &)",
    "protected: __thiscall NT_ACCOUNT_ENUM::NT_ACCOUNT_ENUM(class SAM_DOMAIN const *,enum _DOMAIN_DISPLAY_INFORMATION,int)",
    "public: __thiscall USER0_ENUM::USER0_ENUM(class LOCATION const &,unsigned short const *,int)",
    "public: __thiscall USER::USER(unsigned short const *,class LOCATION const &)",
    "public: virtual __thiscall USER_3::~USER_3(void)",
    "protected: virtual long __thiscall REPL_IDIR_0::W_CacheApiData(unsigned char const *)",
    "public: void __thiscall FILE3_ENUM_OBJ::SetBufferPtr(struct _FILE_INFO_3 const *)",
    "public: long __thiscall SAM_OBJECT::CloseHandle(void)",
    "public: virtual long __thiscall LM_AUDIT_LOG::WriteTextEntry(unsigned long,class INTL_PROFILE &,unsigned short)",
    "protected: int __thiscall LM_OBJ::IsInvalid(void)const",
    "public: __thiscall RESOURCE_STR::~RESOURCE_STR(void)",
    "public: long __thiscall OS_ACE::SetSize(unsigned int)",
    "public: unsigned long __thiscall LM_SESSION_10::QueryTime(void)const",
    "public: __thiscall SESSION1_ENUM_ITER::SESSION1_ENUM_ITER(class SESSION1_ENUM &)",
    "public: void __thiscall OS_SACL_SUBJECT_DESCRIPTOR::InitToZero(void)",
    "protected: virtual long __thiscall NEW_LM_OBJ::I_CreateNew(void)",
    "protected: virtual void __thiscall LM_ERROR_LOG::SetPos(class LOG_ENTRY_NUMBER const &,int)",
    "public: __thiscall GROUP1_ENUM_OBJ::~GROUP1_ENUM_OBJ(void)",
    "public: unsigned long __thiscall LM_FILE::QueryFileId(void)const",
    "public: long __thiscall DLL_HANDLE_CACHE_ARRAY::Cache(class NLS_STR const &,struct HINSTANCE__ *)",
    "private: void __thiscall SERVICE_ENUM::MapLmStatusToNtState(unsigned long,unsigned long *,unsigned long *)",
    "MNetUseEnum",
    "private: virtual long __thiscall CONN_ENUM::CallAPI(unsigned char * *,unsigned int *)",
    "public: __thiscall ENUM_CALLER_LM_OBJ::ENUM_CALLER_LM_OBJ(class LOCATION const &)",
    "public: long __thiscall SC_MANAGER::QueryServiceKeyName(unsigned short const *,class NLS_STR *)",
    "public: long __thiscall NEW_LM_OBJ::WriteInfo(void)",
    "public: long __thiscall LSA_PRIVILEGES_ENUM_OBJ::QueryDisplayName(class NLS_STR *,class LSA_POLICY const *)const",
    "protected: virtual long __thiscall USER_3::W_CreateNew(void)",
    "public: long __thiscall DEVICE::Connect(unsigned short const *,unsigned short const *)",
    "private: long __thiscall SERVICE_ENUM::EnumNtServices(unsigned char * *,unsigned int *)",
    "private: static long __stdcall DOMAIN_WITH_DC_CACHE::AddDcCache(struct _DC_CACHE_ENTRY * *,unsigned short const *,unsigned short const *)",
    "public: __thiscall OS_ACE::~OS_ACE(void)",
    "public: __thiscall SHARE2_ENUM_ITER::SHARE2_ENUM_ITER(class SHARE2_ENUM &)",
    "public: long __thiscall OS_SID::QueryRawID(class NLS_STR *)const",
    "public: __thiscall REPL_EDIR_2::REPL_EDIR_2(unsigned short const *,unsigned short const *)",
    "public: __thiscall LM_CONFIG::LM_CONFIG(unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: __thiscall LM_SESSION_10::LM_SESSION_10(unsigned short const *,enum LOCATION_TYPE)",
    "public: __thiscall REG_KEY_CREATE_STRUCT::~REG_KEY_CREATE_STRUCT(void)",
    "public: __thiscall ARRAY_SOURCE_INFO_ITEM_PTR::ARRAY_SOURCE_INFO_ITEM_PTR(unsigned int)",
    "public: __thiscall GROUP::GROUP(unsigned short const *,unsigned short const *)",
    "public: __thiscall LM_SESSION_0::LM_SESSION_0(unsigned short const *,unsigned short const *)",
    "public: unsigned char const * __thiscall LM_RESUME_BUFFER::QueryBufferPtr(void)const",
    "public: long __thiscall NET_NAME::QueryLocalDrive(class NLS_STR *)",
    "public: __thiscall OS_SECURITY_DESCRIPTOR_CONTROL::OS_SECURITY_DESCRIPTOR_CONTROL(unsigned short *)",
    "public: int __thiscall REPL_EDIR2_ENUM_ITER::Backup(void)",
    "protected: virtual long __thiscall USER_2::I_WriteNew(void)",
    "protected: void __thiscall LM_SESSION_1::SetUserFlags(unsigned long)",
    "public: __thiscall LSA_SERVER_ROLE_INFO_MEM::~LSA_SERVER_ROLE_INFO_MEM(void)",
    "public: int __thiscall OS_ACL::IsValid(void)const",
    "private: long __thiscall LSA_TRUSTED_DC_LIST::QueryInfo(class NLS_STR const &,unsigned short const *)",
    "MxMapClientBufferAux",
    "public: unsigned long __thiscall OS_DACL_SUBJECT_ITER::QueryNewObjectAccessMask(void)const",
    "public: int __thiscall OS_SACL_SUBJECT_ITER::HasInheritOnlyAuditAce_F(void)const",
    "public: static long __stdcall NT_ACCOUNTS_UTILITY::ValidateQualifiedAccountName(class NLS_STR const &,int *)",
    "protected: long __thiscall SHARE::SetName(unsigned short const *)",
    "protected: long __thiscall OS_SECURITY_DESCRIPTOR::UpdateReferencedSecurityObject(class OS_OBJECT_WITH_DATA *)",
    "protected: long __thiscall MEMBERSHIP_LM_OBJ::W_CloneFrom(class MEMBERSHIP_LM_OBJ const &)",
    "public: void __thiscall REPLICATOR_0::SetGuardTime(unsigned long)",
    "public: int __thiscall LM_SERVICE::IsPausing(long *)",
    "protected: virtual long __thiscall REPL_DIR_BASE::I_CreateNew(void)",
    "public: __thiscall ALIAS_ENUM_OBJ::~ALIAS_ENUM_OBJ(void)",
    "public: virtual int __thiscall OS_SACL_SUBJECT_ITER::Next(long *)",
    "public: static int __cdecl ARRAY_LIST_SOURCE_INFO_ITEM_PTR::SortFunc(void const *,void const *)",
    "protected: virtual long __thiscall USER_11::I_GetInfo(void)",
    "private: static int __cdecl TRIPLE_SERVER_ENUM::CompareBrowserServers(void const *,void const *)",
    "public: long __thiscall DEVICE2::Connect(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned long)",
    "public: __thiscall RAW_LOG_ENTRY::RAW_LOG_ENTRY(unsigned long,unsigned long,unsigned short,unsigned short const *,unsigned long,unsigned short const *,unsigned short const *,unsigned short const *,class EVENT_LOG *)",
    "public: void __thiscall OS_SECURITY_DESCRIPTOR::_DbgPrint(void)const",
    "public: unsigned short const * __thiscall USER_11::QueryComment(void)const",
    "protected: __thiscall USE_ENUM::USE_ENUM(unsigned short const *,unsigned int)",
    "public: long __thiscall SAM_USER::SetUsername(class NLS_STR const *)",
    "protected: virtual long __thiscall WKSTA_USER_1::I_GetInfo(void)",
    "public: static long __stdcall LM_SRVRES::GetResourceCount(unsigned short const *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *)",
    "public: static long __stdcall NT_ACCOUNTS_UTILITY::CrackQualifiedAccountName(class NLS_STR const &,class NLS_STR *,class NLS_STR *)",
    "public: __thiscall LM_OBJ::LM_OBJ(void)",
    "protected: long __thiscall LM_SERVICE::SetServerName(unsigned short const *)",
    "MxFreeUnicode",
    "public: __thiscall GROUP0_ENUM_OBJ::~GROUP0_ENUM_OBJ(void)",
    "public: long __thiscall OS_SID::QuerySubAuthority(unsigned char,unsigned long * *)const",
    "public: __thiscall LSA_ACCOUNTS_ENUM_OBJ::LSA_ACCOUNTS_ENUM_OBJ(void)",
    "private: int __thiscall LOG_REGISTRY_INFO::IsPrimarySource(int)",
    "protected: __thiscall LM_ENUM_ITER::LM_ENUM_ITER(class LM_ENUM &)",
    "public: __thiscall USER1_ENUM::USER1_ENUM(enum LOCATION_TYPE,int)",
    "public: __thiscall SAM_USER_ENUM::SAM_USER_ENUM(class SAM_DOMAIN const *,unsigned long,int)",
    "public: unsigned long __thiscall BROWSE_DOMAIN_INFO::QueryDomainSources(void)const",
    "MNetReplImportDirLock",
    "public: int __thiscall LSA_ACCOUNT::IsDefaultSettings(void)",
    "public: void __thiscall BROWSE_DOMAIN_ENUM::Reset(void)",
    "public: __thiscall USER0_ENUM::USER0_ENUM(unsigned short const *,unsigned short const *,int)",
    "public: unsigned int __thiscall SHARE_2::QueryPermissions(void)const",
    "public: class NT_GROUP_ENUM_OBJ const * __thiscall NT_GROUP_ENUM_ITER::Next(long *,int)",
    "protected: virtual long __thiscall LM_FILE_3::I_GetInfo(void)",
    "protected: void __thiscall SHARE_1::SetAdminOnly(int)",
    "public: __thiscall BROWSE_DOMAIN_ENUM::~BROWSE_DOMAIN_ENUM(void)",
    "public: void __thiscall CONTEXT_ENUM_OBJ::SetBufferPtr(struct _SERVER_INFO_101 const *)",
    "public: void __thiscall OS_PRIVILEGE_SET::Clear(void)",
    "public: void __thiscall CONN0_ENUM_OBJ::SetBufferPtr(struct _CONNECTION_INFO_0 const *)",
    "protected: void * __thiscall NT_MEMORY::QueryBuffer(void)const",
    "public: unsigned int __thiscall WKSTA_10::QueryMajorVer(void)const",
    "public: __thiscall LOG_ENTRY_BASE::LOG_ENTRY_BASE(void)",
    "public: __thiscall OS_ACL::operator struct _ACL *(void)const",
    "public: unsigned long __thiscall REPL_IDIR_1::QueryLockCount(void)const",
    "MNetCharDevQGetInfo",
    "MxAsciifyInplace",
    "private: struct _LSA_TRANSLATED_NAME const * __thiscall LSA_TRANSLATED_NAME_MEM::QueryPtr(void)const",
    "public: __thiscall GROUP::GROUP(unsigned short const *,class LOCATION const &)",
    "protected: void __thiscall LSA_ACCOUNT::PrintInfo(unsigned short const *)",
    "public: virtual long __thiscall DEVICE::GetInfo(void)",
    "MNetReplExportDirSetInfo",
    "protected: void __thiscall LM_SESSION_10::SetIdleTime(unsigned long)",
    "public: __thiscall REPL_EDIR_0::~REPL_EDIR_0(void)",
    "public: virtual long __thiscall LM_AUDIT_LOG::CreateCurrentFormatEntry(class FORMATTED_LOG_ENTRY * *)",
    "private: void __thiscall LM_ENUM::_DeregisterIter(void)",
    "public: virtual unsigned long __thiscall NT_EVENT_LOG::QueryCurrentEntryTime(void)",
    "protected: virtual long __thiscall SHARE_2::W_CreateNew(void)",
    "public: __thiscall EVENT_LOG_SOURCE::EVENT_LOG_SOURCE(unsigned short const *,unsigned short const *,unsigned long,unsigned short const *)",
    "public: __thiscall SAM_RID_MEM::SAM_RID_MEM(int)",
    "public: int __thiscall USER_11::IsServerOperator(void)const",
    "public: __thiscall SAM_USER_ENUM_OBJ::~SAM_USER_ENUM_OBJ(void)",
    "public: long __thiscall SAM_GROUP::AddMembers(unsigned long *,unsigned int)",
    "unsigned long __stdcall EnumAllComms(void)",
    "public: __thiscall LSA_TRANSLATED_NAME_MEM::LSA_TRANSLATED_NAME_MEM(int)",
    "private: void __thiscall LM_ENUM::DeregisterIter(void)",
    "public: __thiscall FORMATTED_LOG_ENTRY::FORMATTED_LOG_ENTRY(unsigned long,unsigned long,unsigned short,unsigned short const *,unsigned short const *,unsigned long,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,class EVENT_LOG *)",
    "public: long __thiscall SAM_GROUP::GetMembers(class SAM_RID_MEM *)",
    "public: enum _ACCOUNT_TYPE __thiscall USER_3::QueryAccountType(void)const",
    "public: unsigned short const * __thiscall WKSTA_USER_1::QueryLogonServer(void)const",
    "public: virtual unsigned short const * __thiscall REPL_DIR_BASE::QueryName(void)const",
    "public: __thiscall ITER_SL_BROWSE_DOMAIN_INFO::~ITER_SL_BROWSE_DOMAIN_INFO(void)",
    "public: __thiscall REPL_EDIR_1::REPL_EDIR_1(unsigned short const *,unsigned short const *)",
    "public: int __thiscall OS_DACL_SUBJECT_ITER::HasNewObjectAce(void)const",
    "public: virtual class NLS_STR * __thiscall RAW_LOG_ENTRY::QuerySource(void)",
    "protected: __thiscall LOC_LM_RESUME_ENUM::LOC_LM_RESUME_ENUM(unsigned short const *,unsigned int,int)",
    "public: long __thiscall NET_NAME::QueryShare(class NLS_STR *)",
    "protected: static long __stdcall DOMAIN::GetAnyDCWorker(unsigned short const *,unsigned short const *,class NLS_STR *,int)",
    "public: class DLL_NAME_HANDLE_PAIR & __thiscall ARRAY_DLL_NAME_HANDLE_PAIR::operator[](unsigned int)const",
    "public: int __thiscall OS_DACL_SUBJECT_ITER::HasInheritOnlyAce(void)const",
    "public: __thiscall LOG_ENTRY_BASE::~LOG_ENTRY_BASE(void)",
    "public: long __thiscall OS_PRIVILEGE_SET::RemovePrivilege(struct _LUID)",
    "protected: long __thiscall SHARE_1::SetResourceType(unsigned int)",
    "public: __thiscall SHARE_2::~SHARE_2(void)",
    "public: long __thiscall LSA_POLICY::QueryPrimaryBrowserGroup(class NLS_STR *)const",
    "protected: long __thiscall LM_AUDIT_LOG::QueryCurrentEntryCategory(void)",
    "private: long __thiscall BROWSE_DOMAIN_ENUM::GetLogonDomainDC(class NLS_STR *)",
    "public: __thiscall OS_LUID_AND_ATTRIBUTES::OS_LUID_AND_ATTRIBUTES(void)",
    "public: __thiscall REPL_IDIR0_ENUM::REPL_IDIR0_ENUM(unsigned short const *)",
    "public: unsigned long __thiscall OS_SACL_SUBJECT_ITER::QueryNewContainerAuditAccessMask_F(void)const",
    "MxAllocUnicodeVector",
    "MNetServerDiskEnum",
    "public: __thiscall USER10_ENUM::USER10_ENUM(enum LOCATION_TYPE,int)",
    "public: __thiscall REPL_IDIR_0::~REPL_IDIR_0(void)",
    "public: __thiscall CONN0_ENUM_OBJ::~CONN0_ENUM_OBJ(void)",
    "public: long __thiscall LSA_DOMAIN_INFO::QueryDcName(class NLS_STR *)",
    "protected: __thiscall LM_RESUME_ENUM_ITER::~LM_RESUME_ENUM_ITER(void)",
    "private: void __thiscall GROUP::CtAux(unsigned short const *)",
    "public: __thiscall USER1_ENUM::USER1_ENUM(class LOCATION const &,int)",
    "public: __thiscall ITER_DEVICE::~ITER_DEVICE(void)",
    "public: long __thiscall LSA_POLICY::QueryPrimaryDomainName(class NLS_STR *)const",
    "public: class SAM_DOMAIN * __thiscall ADMIN_AUTHORITY::QueryBuiltinDomain(void)const",
    "public: __thiscall FILE3_ENUM_OBJ::~FILE3_ENUM_OBJ(void)",
    "public: __thiscall USER2_ENUM::USER2_ENUM(enum LOCATION_TYPE,int)",
    "public: __thiscall OS_SACL_SUBJECT_ITER::~OS_SACL_SUBJECT_ITER(void)",
    "public: __thiscall USER_3::USER_3(unsigned short const *,class LOCATION const &)",
    "public: __thiscall TIME_OF_DAY::~TIME_OF_DAY(void)",
    "public: __thiscall EVENT_FIND_PATTERN::EVENT_FIND_PATTERN(unsigned short,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,unsigned short const *,enum EVLOG_DIRECTION)",
    "public: class FILE3_ENUM_OBJ const * __thiscall FILE3_ENUM_ITER::Next(long *,int)",
    "public: int __thiscall REPL_IDIR0_ENUM_ITER::Backup(void)",
    "protected: long __thiscall GROUP_1::W_CloneFrom(class GROUP_1 const &)",
    "protected: __thiscall LSA_ENUM::LSA_ENUM(class LSA_POLICY const *)",
    "MNetFileGetInfo",
    "public: void __thiscall GROUP0_ENUM_OBJ::SetBufferPtr(struct _GROUP_INFO_0 const *)",
    "private: int __thiscall LOG_REGISTRY_INFO::PrimarySourceExist(void)",
    "public: virtual unsigned short const * __thiscall DEVICE::QueryName(void)const",
    "public: long __thiscall LSA_POLICY::EnumerateTrustedDomains(class LSA_TRUST_INFO_MEM *,unsigned long *,unsigned long)",
    "protected: __thiscall LM_SESSION::LM_SESSION(unsigned short const *,enum LOCATION_TYPE)",
    "public: long __thiscall LM_SERVICE::Continue(unsigned int,unsigned int)",
    "unsigned long __stdcall EnumLocalComms(void)",
    "protected: void __thiscall NEW_LM_OBJ::SetBufferPtr(unsigned char *)",
    "MxAllocUnicodeBuffer",
    "public: int __thiscall NT_EVENT_LOG::IsBackup(void)",
    "public: long __thiscall ADMIN_AUTHORITY::UpgradeSamServer(unsigned long)",
    "public: long __thiscall MEMBERSHIP_LM_OBJ::AddAssocName(unsigned short const *)",
    "public: __thiscall EVENT_PATTERN_BASE::~EVENT_PATTERN_BASE(void)",
    "private: virtual long __thiscall SHARE_ENUM::CallAPI(unsigned char * *,unsigned int *)",
    "protected: virtual long __thiscall TIME_OF_DAY::I_GetInfo(void)",
    "public: long __thiscall SHARE_1::CloneFrom(class SHARE_1 const &)",
    "protected: __thiscall LOC_LM_RESUME_ENUM::LOC_LM_RESUME_ENUM(class LOCATION const &,unsigned int,int)",
    "public: __thiscall LSA_AUDIT_EVENT_INFO_MEM::~LSA_AUDIT_EVENT_INFO_MEM(void)",
    "public: unsigned long __thiscall ADMIN_AUTHORITY::QueryAccessAccountDomain(void)const",
    "public: class FILE2_ENUM_OBJ const * __thiscall FILE2_ENUM_ITER::Next(long *,int)",
    "private: virtual long __thiscall SESSION_ENUM::CallAPI(unsigned char * *,unsigned int *)",
    "SetupNormalSession",
    "public: __thiscall SESSION0_ENUM_ITER::~SESSION0_ENUM_ITER(void)",
    "public: long __thiscall OS_SECURITY_DESCRIPTOR::Compare(class OS_SECURITY_DESCRIPTOR *,int *,int *,int *,int *,struct _GENERIC_MAPPING *,struct _GENERIC_MAPPING *,int,int)",
    "protected: virtual long __thiscall NT_EVENT_LOG::I_Close(void)",
    "public: unsigned long __thiscall REPL_EDIR_2::QueryLockCount(void)const",
    "public: __thiscall LSA_SERVER_ROLE_INFO_MEM::LSA_SERVER_ROLE_INFO_MEM(int,int)",
    "public: int __thiscall OS_SECURITY_DESCRIPTOR::IsValid(void)const",
    "public: long __thiscall USER::SetName(unsigned short const *)",
    "protected: long __thiscall USER::W_CloneFrom(class USER const &)",
    "public: int __thiscall OS_SACL_SUBJECT_ITER::HasNewObjectAuditAce_S(void)const",
    "MNetServiceEnum",
    "public: static long __stdcall NT_ACCOUNTS_UTILITY::GetQualifiedAccountNames(class LSA_POLICY &,class SAM_DOMAIN const &,void * const *,unsigned long,int,class STRLIST *,unsigned long *,enum _SID_NAME_USE *,long *,unsigned short const *,class STRLIST *,class STRLIST *,class STRLIST *,class STRLIST *)",
    "public: long __thiscall LSA_ACCT_DOM_INFO_MEM::QueryName(class NLS_STR *)const",
    "public: unsigned long __thiscall USER_MODALS_3::QueryObservation(void)const",
    "long __stdcall LsaxGetComputerName(class NLS_STR *)",
    "public: __thiscall ITER_SL_LM_RESUME_BUFFER::ITER_SL_LM_RESUME_BUFFER(class SLIST &)",
    "public: long __thiscall LM_SERVICE::QueryExitCode(void)const",
    "public: unsigned long __thiscall SAM_ALIAS::QueryRID(void)",
    "void __stdcall `vector destructor iterator'(void *,unsigned int,int,void (__thiscall*)(void *))",
    "private: long __thiscall NET_ACCESS_1::I_WriteInfoAux(void)",
    "protected: virtual long __thiscall USER_MEMB::CallAPI(unsigned char * *,unsigned int *)",
    "public: __thiscall SLIST_OF_BROWSE_DOMAIN_INFO::SLIST_OF_BROWSE_DOMAIN_INFO(int)",
    "public: __thiscall NT_USER_ENUM_OBJ::NT_USER_ENUM_OBJ(void)",
    "protected: virtual void __thiscall LSA_ENUM::FreeBuffer(unsigned char * *)",
    "private: static int __cdecl TRIPLE_SERVER_ENUM::CompareLmServers(void const *,void const *)",
    "protected: long __thiscall LSA_POLICY::TcharArrayToUnistrArray(unsigned short const * const *,struct _UNICODE_STRING *,unsigned long)",
    "protected: __thiscall LM_RESUME_ENUM_ITER::LM_RESUME_ENUM_ITER(class LM_RESUME_ENUM &)",
    "public: int __thiscall BASE::operator!(void)const",
    "public: __thiscall LSA_TRUST_INFO_MEM::~LSA_TRUST_INFO_MEM(void)",
    "public: __thiscall OS_PRIVILEGE_SET::~OS_PRIVILEGE_SET(void)",
    "public: long __thiscall GROUP_MEMB::CloneFrom(class GROUP_MEMB const &)",
    "unsigned long __stdcall EnumUnavailDevices(int)",
    "public: unsigned int __thiscall SHARE_2::QueryMaxUses(void)const",
    "public: __thiscall DLL_NAME_HANDLE_PAIR::DLL_NAME_HANDLE_PAIR(unsigned short const *,struct HINSTANCE__ *)",
    "public: class SOURCE_INFO_ITEM_PTR & __thiscall ARRAY_SOURCE_INFO_ITEM_PTR::operator[](unsigned int)const",
    "public: __thiscall LOG_ENTRY_BASE::LOG_ENTRY_BASE(unsigned long,unsigned long,unsigned short,unsigned short const *,unsigned long,class EVENT_LOG *)",
    "public: __thiscall REPL_IDIR_ENUM::~REPL_IDIR_ENUM(void)",
    "public: virtual __thiscall NT_EVENT_LOG::~NT_EVENT_LOG(void)",
    "public: enum LMO_DEV_STATE __thiscall DEVICE::QueryState(void)const",
    "protected: unsigned int __thiscall REPL_DIR_BASE::QueryReplBufferSize(void)const",
    "public: __thiscall SLIST_OF_LM_RESUME_BUFFER::~SLIST_OF_LM_RESUME_BUFFER(void)",
    "public: void __thiscall REPL_IDIR1_ENUM_OBJ::SetBufferPtr(struct _REPL_IDIR_INFO_1 const *)",
    "MxFreeSaveargs",
    "protected: __thiscall NET_ACCESS::NET_ACCESS(unsigned short const *,unsigned short const *)",
    "public: __thiscall LM_RESUME_BUFFER::LM_RESUME_BUFFER(class LM_RESUME_ENUM *,unsigned int,unsigned char *)",
    "public: long __thiscall GROUP_1::CloneFrom(class GROUP_1 const &)",
    "public: static long __stdcall DOMAIN_WITH_DC_CACHE::GetAnyDC(unsigned short const *,unsigned short const *,class NLS_STR *)",
    "public: __thiscall OS_SID::OS_SID(void *,int,class OS_SECURITY_DESCRIPTOR *)",
    "private: virtual long __thiscall LSA_ACCOUNTS_ENUM::CallAPI(int,unsigned char * *,unsigned int *)",
    "public: long __thiscall LSA_OBJECT::CloseHandle(int)",
    "public: __thiscall LM_RESUME_BUFFER::~LM_RESUME_BUFFER(void)",
    "public: __thiscall USER_11::USER_11(unsigned short const *,unsigned short const *)",
    "public: unsigned long __thiscall OS_DACL_SUBJECT_ITER::QueryInheritOnlyAccessMask(void)const",
    "public: long __thiscall USER_11::SetUserComment(unsigned short const *)",
    "MNetUserSetInfo",
    "public: unsigned short const * __thiscall NET_ACCESS::QueryServerName(void)const",
    "public: int __thiscall LM_OBJ_BASE::IsValidationOn(void)",
    "protected: int __thiscall OS_ACL::IsOwnerAlloc(void)const",
    "public: long __thiscall RAW_LOG_ENTRY::Set(unsigned long,unsigned long,unsigned short,unsigned short const *,unsigned long,unsigned short const *,unsigned short const *,unsigned short const *,class EVENT_LOG *)",
    "public: long __thiscall OS_SECURITY_DESCRIPTOR::QueryDACL(int *,class OS_ACL * *,int *)const",
    "private: long __thiscall NET_NAME::SetABSPath(unsigned short const *)",
    "public: long __thiscall NET_ACCESS_1::QueryFailingName(class NLS_STR *,enum PERMNAME_TYPE *)const",
    "MNetServerSetInfo",
    "public: __thiscall GROUP0_ENUM::GROUP0_ENUM(unsigned short const *,unsigned short const *)",
    "public: int __thiscall SAM_PSWD_DOM_INFO_MEM::QueryNoAnonChange(void)",
    "public: long __thiscall SAM_DOMAIN::RemoveMemberFromAliases(void *)",
    "public: __thiscall SERVER_2::~SERVER_2(void)",
    "protected: __thiscall LOC_LM_ENUM::LOC_LM_ENUM(enum LOCATION_TYPE,unsigned int)",
    "private: virtual long __thiscall DOMAIN_ENUM::CallAPI(unsigned char * *,unsigned int *)",
    "public: int __thiscall TRIPLE_SERVER_ENUM_ITER::Backup(void)",
    "public: int __thiscall ARRAY_LIST_SOURCE_INFO_ITEM_PTR::Find(class SOURCE_INFO_ITEM_PTR const &)const",
    "public: __thiscall GROUP0_ENUM::GROUP0_ENUM(enum LOCATION_TYPE,unsigned short const *)",
    "public: virtual long __thiscall NT_EVENT_LOG::CreateCurrentFormatEntry(class FORMATTED_LOG_ENTRY * *)",
    "public: long __thiscall LSA_POLICY::SetAuditEventInfo(class LSA_AUDIT_EVENT_INFO_MEM *)",
    "public: __thiscall REPL_EDIR1_ENUM_ITER::REPL_EDIR1_ENUM_ITER(class REPL_EDIR1_ENUM &)",
    "public: __thiscall USER2_ENUM_ITER::USER2_ENUM_ITER(class USER2_ENUM &)",
    "public: long __thiscall SC_SERVICE::Start(unsigned int,unsigned short const * *)",
    "protected: int __thiscall USER_2::QueryUserFlag(unsigned int)const",
    "public: __thiscall LSA_TRANSLATED_SID_MEM::~LSA_TRANSLATED_SID_MEM(void)",
    "public: __thiscall USER10_ENUM::USER10_ENUM(unsigned short const *,int)",
    "public: void __thiscall SLIST_OF_ADMIN_AUTHORITY::Clear(void)",
    "protected: long __thiscall NEW_LM_OBJ::ClearBuffer(void)",
    "public: long __thiscall OS_SID::QuerySubAuthorityCount(unsigned char * *)const",
    "public: long __thiscall LSA_POLICY::TrustDomain(class LSA_POLICY &,class NLS_STR const &,int,unsigned short const *)",
    "public: virtual int __thiscall OS_DACL_SUBJECT_ITER::CompareCurrentSubject(class OS_ACL_SUBJECT_ITER *)",
    "public: long __thiscall USER_11::SetLogonHours(class LOGON_HOURS_SETTING const &)",
    "public: unsigned short const * __thiscall USER_11::QueryHomeDir(void)const",
    "public: long __thiscall LSA_POLICY::SetAccountDomainName(class NLS_STR const *,void * const *)",
    "protected: long __thiscall NT_EVENT_LOG::GetProcAddressOfAlertFuctions(void)",
    "MNetLocalGroupAddMember",
    "public: __thiscall USER_2::USER_2(unsigned short const *,enum LOCATION_TYPE)",
    "protected: __thiscall CONN_ENUM::CONN_ENUM(unsigned short const *,unsigned short const *,unsigned int)",
    "MNetFileClose",
    "public: long __thiscall USER_2::CloneFrom(class USER_2 const &)",
    "public: void * __thiscall LSA_TRUST_INFO_MEM::QueryPSID(unsigned long)const",
    "public: __thiscall TRIPLE_SERVER_ENUM_OBJ::~TRIPLE_SERVER_ENUM_OBJ(void)",
    "public: int __thiscall OS_DACL_SUBJECT_ITER::HasNewContainerAce(void)const",
    "public: __thiscall EVENT_LOG_SOURCE::~EVENT_LOG_SOURCE(void)",
    "public: struct _SERVER_INFO_101 const * __thiscall SERVER1_ENUM_OBJ::QueryBufferPtr(void)const",
    "public: int __thiscall OS_SECURITY_DESCRIPTOR_CONTROL::IsOwnerDefaulted(void)const",
    "public: long __thiscall OS_ACL::AddACE(unsigned long,class OS_ACE const &)",
    "public: __thiscall LSA_ACCOUNT::~LSA_ACCOUNT(void)",
    "public: unsigned int __thiscall USER_MODALS::QueryMinPasswdLen(void)const",
    "protected: unsigned char * __thiscall LM_ENUM_ITER::QueryBasePtr(void)const",
    "public: unsigned short const * __thiscall BROWSE_DOMAIN_INFO::QueryDomainName(void)const",
    "public: __thiscall LSA_TRANSLATED_NAME_MEM::~LSA_TRANSLATED_NAME_MEM(void)",
    "protected: long __thiscall LM_ERROR_LOG::NextString(int *,class NLS_STR * *)",
    "public: long __thiscall USER_3::SetPasswordExpired(unsigned long)",
    "public: void __thiscall USER2_ENUM_OBJ::SetBufferPtr(struct _USER_INFO_2 const *)",
    "unsigned long __stdcall EnumAllLPTs(void)",
    "MNetAuditWrite",
    "protected: virtual long __thiscall USER_2::W_CreateNew(void)",
    "public: int __thiscall SERVER1_ENUM_ITER::Backup(void)",
    "public: unsigned int __thiscall WKSTA_10::QueryMinorVer(void)const",
    "private: virtual long __thiscall TRUSTED_DOMAIN_ENUM::CallAPI(int,unsigned char * *,unsigned int *)",
    "MNetUserPasswordSet",
    "protected: virtual long __thiscall GROUP_1::W_CreateNew(void)",
    "public: __thiscall USER2_ENUM::USER2_ENUM(unsigned short const *,int)",
    "public: __thiscall SAM_RID_ENUMERATION_MEM::SAM_RID_ENUMERATION_MEM(int)",
    "public: void * __thiscall LSA_OBJECT::QueryHandle(void)const",
    "private: long __thiscall BROWSE_DOMAIN_ENUM::DetermineIfDomainMember(int *)",
    "public: __thiscall REPL_EDIR2_ENUM_ITER::REPL_EDIR2_ENUM_ITER(class REPL_EDIR2_ENUM &)",
    "public: __thiscall USER_MEMB::~USER_MEMB(void)",
    "public: unsigned long __thiscall ADMIN_AUTHORITY::QueryAccessBuiltinDomain(void)const",
    "MNetWkstaUserEnum",
    "public: __thiscall ARRAY_DLL_NAME_HANDLE_PAIR::ARRAY_DLL_NAME_HANDLE_PAIR(class DLL_NAME_HANDLE_PAIR *,unsigned int,int)",
    "public: void __thiscall LOG_ENTRY_NUMBER::SetRecordNum(unsigned long)",
    "protected: virtual long __thiscall NT_ACCOUNT_ENUM::QueryCountPreferences(unsigned long *,unsigned long *,unsigned int,unsigned long,unsigned long,unsigned long)",
    "public: unsigned int __thiscall SERVER1_ENUM_OBJ::QueryMajorVer(void)const",
    "public: class DOMAIN0_ENUM_OBJ const * __thiscall DOMAIN0_ENUM_ITER::operator()(void)",
    "public: int __thiscall SHARE1_ENUM_ITER::Backup(void)",
    "protected: virtual long __thiscall USER_MEMB::W_CreateNew(void)",
    "public: unsigned long __thiscall USER_3::QueryPasswordExpired(void)const",
    "public: __thiscall SERVER_1::~SERVER_1(void)",
    "protected: virtual long __thiscall REPL_EDIR_2::W_CacheApiData(unsigned char const *)",
    "public: __thiscall OS_SID::OS_SID(void *,unsigned long,class OS_SECURITY_DESCRIPTOR *)",
    "public: long __thiscall LOCATION::CheckIfNT(int *)",
    "public: __thiscall SAM_MEMORY::~SAM_MEMORY(void)",
    "public: long __thiscall COMPUTER::SetName(unsigned short const *)",
    "public: __thiscall CONN1_ENUM_ITER::CONN1_ENUM_ITER(class CONN1_ENUM &)",
    "protected: unsigned char const * __thiscall LM_RESUME_ENUM_ITER::QueryBasePtr(void)const",
    "protected: long __thiscall NT_EVENT_LOG::NextString(int *,class NLS_STR * *)",
    "long __stdcall I_FetchAliasFields(class NLS_STR *,class ADMIN_AUTHORITY * *,class SLIST_OF_ADMIN_AUTHORITY *,unsigned long,int,class NLS_STR const &,class NLS_STR const *,long *)",
    "MxJoinSaveargs",
    "public: long __thiscall MEMBERSHIP_LM_OBJ::DeleteAssocName(unsigned short const *)",
    "public: __thiscall API_SESSION::API_SESSION(unsigned short const *,int)",
    "public: struct _SAM_RID_ENUMERATION const * __thiscall SAM_RID_ENUMERATION_MEM::QueryPtr(void)const",
    "public: void __thiscall REPL_IDIR0_ENUM_OBJ::SetBufferPtr(struct _REPL_IDIR_INFO_0 const *)",
    "protected: __thiscall REPL_IDIR_ENUM::REPL_IDIR_ENUM(unsigned short const *,unsigned int)",
    "public: int __thiscall OS_DACL_SUBJECT_ITER::IsDenyAll(void)const",
    "public: __thiscall SHARE::~SHARE(void)",
    "public: long __thiscall LOG_REGISTRY_INFO::SubstituteParameterID(unsigned short const *,class NLS_STR *)",
    "public: long __thiscall SC_SERVICE::QueryConfig(struct _QUERY_SERVICE_CONFIGW * *)",
    "public: struct _LSA_TRUST_INFORMATION const * __thiscall LSA_TRUST_INFO_MEM::QueryPtr(void)const",
    "public: __thiscall GROUP0_ENUM_ITER::~GROUP0_ENUM_ITER(void)",
    "public: int __thiscall OS_SACL_SUBJECT_ITER::HasInheritOnlyAuditAce_S(void)const",
    "public: class EVENT_LOG * __thiscall LOG_ENTRY_BASE::QueryEventLog(void)const",
    "public: unsigned int __thiscall SERVER_2::QuerySecurity(void)const",
    "public: __thiscall CONTEXT_ENUM_OBJ::CONTEXT_ENUM_OBJ(void)",
    "public: __thiscall SAM_SID_MEM::~SAM_SID_MEM(void)",
    "public: long __thiscall LSA_POLICY::SetPrimaryBrowserGroup(class NLS_STR const &)",
    "protected: unsigned int __thiscall LM_RESUME_ENUM_ITER::QueryCount(void)const",
    "public: static long __stdcall DOMAIN_WITH_DC_CACHE::GetAnyValidDC(unsigned short const *,unsigned short const *,class NLS_STR *)",
    "private: int __thiscall ARRAY_SOURCE_INFO_ITEM_PTR::WithinRange(unsigned int)const",
    "protected: virtual long __thiscall CONTEXT_ENUM::CallAPI(unsigned char * *,unsigned int *)",
    "public: long __thiscall USER_3::SetHomedirDrive(unsigned short const *)",
    "private: void __thiscall TRIPLE_SERVER_ENUM::MapNtToKnown(struct _DOMAIN_DISPLAY_MACHINE const *,struct _KNOWN_SERVER_INFO *)",
    "public: __thiscall SERVER1_ENUM_OBJ::~SERVER1_ENUM_OBJ(void)",
    "private: static int __cdecl TRIPLE_SERVER_ENUM::CompareNtServers(void const *,void const *)",
    "protected: virtual long __thiscall MEMBERSHIP_LM_OBJ::I_WriteNew(void)",
    "public: __thiscall SAM_USER::~SAM_USER(void)",
    "public: __thiscall REPL_EDIR1_ENUM::REPL_EDIR1_ENUM(unsigned short const *)",
    "public: __thiscall WKSTA_1::WKSTA_1(unsigned short const *)",
    "public: __thiscall ARRAY_DLL_NAME_HANDLE_PAIR::~ARRAY_DLL_NAME_HANDLE_PAIR(void)",
    "public: __thiscall DLL_NAME_HANDLE_PAIR::~DLL_NAME_HANDLE_PAIR(void)",
    "public: int __thiscall CHARDEVQ1_ENUM_ITER::Backup(void)",
    "public: long __thiscall OS_ACL::QueryACECount(unsigned long *)const",
    "public: struct _POLICY_AUDIT_EVENTS_INFO * __thiscall LSA_AUDIT_EVENT_INFO_MEM::QueryPtr(void)const",
    "public: __thiscall SHARE_2::SHARE_2(unsigned short const *,unsigned short const *,int)",
    "public: unsigned short const * __thiscall LM_FILE::QueryServer(void)const",
    "public: unsigned int __thiscall NET_ACCESS_1::QueryACECount(void)const",
    "private: static void __stdcall DOMAIN_WITH_DC_CACHE::LeaveCriticalSection(void)",
    "public: int __thiscall LM_SERVICE::IsStarting(long *)",
    "protected: virtual long __thiscall LM_AUDIT_LOG::CreateCurrentRawEntry(class RAW_LOG_ENTRY *)",
    "protected: long __thiscall DEVICE2::SetDomainName(unsigned short const *)",
    "protected: long __thiscall OS_ACL::SetSize(unsigned int,int)",
    "private: long __thiscall NET_NAME::GetDeviceInfo(void)",
    "public: int __thiscall OS_SECURITY_DESCRIPTOR::IsSACLPresent(void)const",
    "public: __thiscall DEVICE::~DEVICE(void)",
    "private: long __thiscall SERVICE_ENUM::EnumLmServices(unsigned char * *,unsigned int *)",
    "private: static long __stdcall LSA_POLICY::MakeSecretName(class NLS_STR const &,int,class NLS_STR *)",
    "public: virtual class NLS_STR * __thiscall FORMATTED_LOG_ENTRY::QueryUser(void)",
    "public: unsigned short const * __thiscall DOMAIN0_ENUM_OBJ::QueryName(void)const",
    "public: void __thiscall ARRAY_LIST_SOURCE_INFO_ITEM_PTR::Sort(void)",
    "private: long __thiscall LOG_REGISTRY_INFO::MapParameterToString(unsigned short const *,unsigned long,class NLS_STR *)",
    "protected: long __thiscall USER_3::W_Write(void)",
    "unsigned long __stdcall MakeNullNull(unsigned short const *,unsigned short * *)",
    "public: unsigned long __thiscall LOG_ENTRY_BASE::QueryTime(void)const",
    "public: long __thiscall SAM_ALIAS::SetComment(class NLS_STR const *)",
    "MNetAccessEnum",
    "public: __thiscall OS_SECURITY_DESCRIPTOR::OS_SECURITY_DESCRIPTOR(void *,int)",
    "public: virtual long __thiscall LM_EVENT_LOG::QueryNumberOfEntries(unsigned long *)",
    "public: __thiscall SESSION0_ENUM_OBJ::SESSION0_ENUM_OBJ(void)",
    "MNetFileEnum",
    "public: __thiscall SAM_USER_ENUM_ITER::SAM_USER_ENUM_ITER(class SAM_USER_ENUM &)",
    "public: __thiscall GROUP_0::GROUP_0(unsigned short const *,enum LOCATION_TYPE)",
    "public: unsigned short const * __thiscall SHARE_1::QueryComment(void)const",
    "public: long __thiscall SAM_ALIAS::GetComment(class NLS_STR *)",
    "public: void __thiscall SAM_USER_ENUM_OBJ::SetBufferPtr(struct _SAM_RID_ENUMERATION const *)",
    "public: long __thiscall OS_SID::Copy(class OS_SID const &)",
    "protected: __thiscall GROUP_ENUM::GROUP_ENUM(class LOCATION const &,unsigned int,unsigned short const *)",
    "public: __thiscall REPL_IDIR1_ENUM::REPL_IDIR1_ENUM(unsigned short const *)",
    "MNetServiceGetInfo",
    "public: __thiscall LM_SESSION_10::~LM_SESSION_10(void)",
    "public: long __thiscall ADMIN_AUTHORITY::UpgradeBuiltinDomain(unsigned long)",
    "protected: int __thiscall LM_RESUME_ENUM_ITER::HasMoreData(void)const",
    "protected: virtual long __thiscall NET_ACCESS_1::I_GetInfo(void)",
    "public: long __thiscall SAM_GROUP::RemoveMember(unsigned long)",
    "protected: void * __thiscall OS_OBJECT_WITH_DATA::QueryPtr(void)const",
    "public: long __thiscall LSA_POLICY::Open(unsigned short const *,unsigned long)",
    "MxRestoreSetinfoBuffer",
    "public: long __thiscall LSA_POLICY::SetServerRole(class LSA_SERVER_ROLE_INFO_MEM const *)",
    "public: virtual long __thiscall USER_MODALS::WriteInfo(void)",
    "public: int __thiscall EVENT_LOG::IsSeek(void)const",
    "public: static long __stdcall LSA_POLICY::QueryProductType(enum LSPL_PROD_TYPE *)",
    "int __stdcall IsWhiteSpace(unsigned short)",
    "public: long __thiscall NEW_LM_OBJ::GetInfo(void)",
    "public: virtual void __thiscall LSA_MEMORY::Set(void *,unsigned long)",
    "public: virtual long __thiscall EVENT_LOG::QuerySrcSupportedCategoryList(class NLS_STR const &,class STRLIST * *)",
    "unsigned long __stdcall EnumAllDrives(void)",
    "protected: virtual long __thiscall LSA_ACCOUNT::I_WriteNew(void)",
    "void __stdcall SkipWhiteSpace(unsigned short * *)",
    "public: long __thiscall SLIST_OF_NLS_STR::Add(class NLS_STR const *)",
    "MNetGroupDel",
    "public: void __thiscall OS_ACL_SUBJECT_ITER::Reset(void)",
    "public: unsigned short const * __thiscall LOCATION::QueryName(void)const",
    "public: __thiscall LSA_PRIVILEGES_ENUM_ITER::LSA_PRIVILEGES_ENUM_ITER(class LSA_PRIVILEGES_ENUM &)",
    "private: void __thiscall USER_11::CtAux(void)",
    "public: __thiscall ALLOC_STR::~ALLOC_STR(void)",
    "public: void __thiscall NT_USER_ENUM_OBJ::SetBufferPtr(struct _DOMAIN_DISPLAY_USER const *)",
    "public: virtual void __thiscall NT_EVENT_LOG::Reset(void)",
    "public: virtual unsigned long __thiscall USER_11::QueryAuthFlags(void)const",
    "public: int __thiscall LM_SESSION_1::IsGuest(void)const",
    "public: struct _ACCESS_LIST * __thiscall NET_ACCESS_1::QueryACE(unsigned int)const",
    "public: long __thiscall LM_RESUME_ENUM::GetInfo(int)",
    "public: int __thiscall OS_SECURITY_DESCRIPTOR_CONTROL::IsDACLPresent(void)const",
    "public: unsigned int __thiscall LM_RESUME_ENUM::QueryInfoLevel(void)const",
    "private: int __thiscall OS_PRIVILEGE_SET::IsOwnerAlloc(void)const",
    "public: int __thiscall REPL_IDIR1_ENUM_ITER::Backup(void)",
    "protected: virtual long __thiscall NEW_LM_OBJ::W_ChangeToNew(void)",
    "public: long __thiscall USER_2::SetScriptPath(unsigned short const *)",
    "public: void __thiscall SOURCE_INFO_ITEM::SetCategoryList(class STRLIST *)",
    "public: __thiscall SOURCE_INFO_ITEM::~SOURCE_INFO_ITEM(void)",
    "public: __thiscall ALIAS_STR::ALIAS_STR(unsigned short const *)",
    "public: long __thiscall NET_NAME::QueryUNCPath(class NLS_STR *)",
    "protected: virtual long __thiscall GROUP_1::I_CreateNew(void)",
    "public: __thiscall LSA_ACCOUNTS_ENUM_OBJ::~LSA_ACCOUNTS_ENUM_OBJ(void)",
    "public: __thiscall CONN1_ENUM_OBJ::~CONN1_ENUM_OBJ(void)",
    "public: struct _SAM_RID_ENUMERATION const * __thiscall ALIAS_ENUM_OBJ::QueryBufferPtr(void)const",
    "public: __thiscall DOMAIN0_ENUM_ITER::~DOMAIN0_ENUM_ITER(void)",
    "private: long __thiscall LOG_REGISTRY_INFO::ExpandSystemRoot(unsigned short const *,class NLS_STR *)",
    "public: unsigned long __thiscall OS_SID::QueryLength(void)const",
    "public: __thiscall REG_VALUE_INFO_STRUCT::~REG_VALUE_INFO_STRUCT(void)",
    "private: void __thiscall LM_RESUME_ENUM::_RegisterIter(void)",
    "public: __thiscall SHARE1_ENUM_ITER::SHARE1_ENUM_ITER(class SHARE1_ENUM &)",
    "public: virtual unsigned long __thiscall LM_ERROR_LOG::QueryCurrentEntryTime(void)",
    "public: __thiscall USER::USER(unsigned short const *,unsigned short const *)",
    "protected: virtual long __thiscall DOMAIN::ValidateName(void)",
    "public: class SOURCE_INFO_ITEM * __thiscall SOURCE_INFO_ITEM_PTR::operator->(void)",
    "public: long __thiscall NET_ACCESS_1::SetAuditFlags(short)",
    "public: unsigned short const * __thiscall USER_3::QueryProfile(void)const",
    "MNetUserModalsSet",
    "private: enum _SERVER_TYPE __thiscall TRIPLE_SERVER_ENUM::MapTypeMaskToType(unsigned long)const",
    "public: struct _ACL * __thiscall OS_ACL::QueryAcl(void)const",
    "public: long __thiscall EVENT_FIND_PATTERN::CheckForMatch(int *,class FORMATTED_LOG_ENTRY *)const",
    "public: virtual unsigned short const * __thiscall NEW_LM_OBJ::QueryName(void)const",
    "MNetSessionEnum",
    "protected: virtual long __thiscall NET_ACCESS_1::I_WriteInfo(void)",
    "public: struct _SAM_RID_ENUMERATION const * __thiscall SAM_USER_ENUM_OBJ::QueryBufferPtr(void)const",
    "protected: void __thiscall DEVICE::SetStatus(unsigned int)",
    "public: __thiscall REPL_EDIR0_ENUM_ITER::REPL_EDIR0_ENUM_ITER(class REPL_EDIR0_ENUM &)",
    "public: unsigned long __thiscall OS_DACL_SUBJECT_ITER::QueryAccessMask(void)const",
    "public: __thiscall SERVER1_ENUM::SERVER1_ENUM(unsigned short const *,unsigned short const *,unsigned long)",
    "public: class REPL_IDIR1_ENUM_OBJ const * __thiscall REPL_IDIR1_ENUM_ITER::operator()(void)",
    "public: long __thiscall USER_11::TrimParams(void)",
    "public: __thiscall REPL_EDIR1_ENUM_OBJ::~REPL_EDIR1_ENUM_OBJ(void)",
    "private: void __thiscall OS_SACL_SUBJECT_ITER::InitToZero(void)",
    "protected: virtual long __thiscall LM_SESSION_1::I_GetInfo(void)",
    "public: class OS_LUID_AND_ATTRIBUTES const * __thiscall OS_PRIVILEGE_SET::QueryPrivilege(long)",
    "I_MNetNameCanonicalize",
    "public: int __thiscall USER_2::QueryLockout(void)const",
    "void __stdcall `vector vbase constructor iterator'(void *,unsigned int,int,void * (__thiscall*)(void *))",
    "public: __thiscall LOG_ENTRY_NUMBER::LOG_ENTRY_NUMBER(unsigned long,enum EVLOG_DIRECTION)",
    "public: struct _USER_INFO_0 const * __thiscall USER0_ENUM_OBJ::QueryBufferPtr(void)const",
    "public: virtual long __thiscall NT_EVENT_LOG::QueryCurrentEntryDesc(class NLS_STR *)",
    "public: __thiscall LM_ENUM::~LM_ENUM(void)",
    "public: __thiscall ALLOC_STR::ALLOC_STR(unsigned short *,unsigned int)",
    "MNetReplExportDirLock",
    "protected: virtual long __thiscall SERVER_0::I_GetInfo(void)",
    "public: long __thiscall OS_SECURITY_DESCRIPTOR::SetDACL(int,class OS_ACL const *,int)",
    "public: unsigned long __thiscall OS_SACL_SUBJECT_ITER::QueryNewObjectAuditAccessMask_F(void)const",
    "public: __thiscall LSA_SECRET::LSA_SECRET(class NLS_STR const &)",
    "public: __thiscall ARRAY_SOURCE_INFO_ITEM_PTR::ARRAY_SOURCE_INFO_ITEM_PTR(class SOURCE_INFO_ITEM_PTR *,unsigned int,int)",
    "public: void __thiscall USER1_ENUM_OBJ::SetBufferPtr(struct _USER_INFO_1 const *)",
    "public: class GROUP1_ENUM_OBJ const * __thiscall GROUP1_ENUM_ITER::operator()(void)",
    "protected: long __thiscall USER_2::W_CloneFrom(class USER_2 const &)",
    "public: __thiscall FILE3_ENUM_ITER::~FILE3_ENUM_ITER(void)",
    "public: __thiscall REPL_EDIR0_ENUM_OBJ::REPL_EDIR0_ENUM_OBJ(void)",
    "protected: virtual long __thiscall NEW_LM_OBJ::I_WriteNew(void)",
    "public: __thiscall LSA_TRUSTED_DOMAIN::LSA_TRUSTED_DOMAIN(class LSA_POLICY const &,struct _LSA_TRUST_INFORMATION const &,unsigned long)",
    "public: unsigned short const * __thiscall NLS_STR::QueryPch(void)const",
    "public: int __thiscall NET_NAME::IsLocal(long *)",
    "public: unsigned short __thiscall LOG_ENTRY_BASE::QueryType(void)const",
    "public: long __thiscall SAM_DOMAIN::TranslateNamesToRids(unsigned short const * const *,unsigned long,class SAM_RID_MEM *,class SAM_SID_NAME_USE_MEM *)const",
    "public: __thiscall USER0_ENUM::~USER0_ENUM(void)",
    "public: long __thiscall USER_2::SetNoPasswordExpire(int)",
    "public: __thiscall LM_RESUME_ENUM::~LM_RESUME_ENUM(void)",
    "protected: void __thiscall LM_OBJ::MakeConstructed(void)",
    "public: unsigned int __thiscall LM_FILE_3::QueryPermission(void)const",
    "MNetErrorLogClear",
    "public: unsigned short const * __thiscall SERVER1_ENUM_OBJ::QueryComment(void)const",
    "private: void __thiscall LM_SERVICE::W_InterpretStatus(struct _SERVICE_INFO_2 const *,enum LM_SERVICE_STATUS *,struct LM_SERVICE_OTHER_STATUS *)",
    "MNetSessionDel",
    "private: long __thiscall BROWSE_DOMAIN_ENUM::GetWorkgroupDomains(void)",
    "public: __thiscall LSA_DOMAIN_INFO::~LSA_DOMAIN_INFO(void)",
    "public: int __thiscall ARRAY_SOURCE_INFO_ITEM_PTR::Resize(unsigned int,int)",
    "public: void __thiscall NT_MACHINE_ENUM_OBJ::SetBufferPtr(struct _DOMAIN_DISPLAY_MACHINE const *)",
    "public: unsigned long __thiscall ADMIN_AUTHORITY::QueryAccessSamServer(void)const",
    "private: long __thiscall LM_RESUME_ENUM::GetInfoSingle(int)",
    "public: __thiscall OS_LUID::OS_LUID(void)",
    "public: __thiscall LOCAL_USER::LOCAL_USER(unsigned short const *,unsigned short const *)",
    "public: unsigned short const * __thiscall WKSTA_10::QueryWkstaDomain(void)const",
    "protected: virtual long __thiscall NEW_LM_OBJ::I_Delete(unsigned int)",
    "public: int __thiscall NET_NAME::IsSharable(long *)",
    "public: struct _POLICY_PRIMARY_DOMAIN_INFO const * __thiscall LSA_PRIMARY_DOM_INFO_MEM::QueryPtr(void)const",
    "MNetCharDevControl",
    "MNetSessionGetInfo",
    "public: long __thiscall LOCATION::CheckIfNT(int *,enum LOCATION_NT_TYPE *)",
    "MNetAccessGetInfo",
    "public: long __thiscall OS_ACL::QuerySizeInformation(struct _ACL_SIZE_INFORMATION *)const",
    "public: long __thiscall LSA_POLICY::JoinDomain(class NLS_STR const &,class NLS_STR const &,int,class NLS_STR const *,unsigned short const *)",
    "public: struct _DOMAIN_PASSWORD_INFORMATION const * __thiscall SAM_PSWD_DOM_INFO_MEM::QueryPtr(void)const",
    "protected: virtual long __thiscall REPL_IDIR_BASE::I_WriteNew(void)",
    "public: long __thiscall LSA_TRUSTED_DOMAIN::QueryControllerList(class LSA_REF_DOMAIN_MEM *)const",
    "protected: enum LMO_DEVICE __thiscall DEVICE::QueryDevType(void)const",
    "protected: void __thiscall SERVICE_CONTROL::SetHandle(struct SC_HANDLE__ *)",
    "public: __thiscall LSA_PRIMARY_DOM_INFO_MEM::LSA_PRIMARY_DOM_INFO_MEM(int)",
    "protected: void __thiscall SERVER_1::SetServerType(unsigned long)",
    "MNetGetDCName",
    "public: long __thiscall LSA_TRUSTED_DOMAIN::SetControllerList(struct _TRUSTED_CONTROLLERS_INFO const &)",
    "public: long __thiscall LSA_TRUSTED_DOMAIN::SetPosixOffset(unsigned long)",
    "private: unsigned short const * __thiscall ITER_DEVICE::EnumDrives(void)",
    "public: unsigned short const * __thiscall LOC_LM_RESUME_ENUM::QueryServer(void)const",
    "protected: virtual long __thiscall USER_2::I_GetInfo(void)",
    "public: virtual class NLS_STR * __thiscall FORMATTED_LOG_ENTRY::QuerySource(void)",
    "I_MNetPathType",
    "public: __thiscall SERVER_0::~SERVER_0(void)",
    "public: int __thiscall USE1_ENUM_ITER::Backup(void)",
    "protected: int __thiscall OS_ACE::IsOwnerAlloc(void)const",
    "protected: long __thiscall SHARE::W_CloneFrom(class SHARE const &)",
    "public: unsigned int __thiscall LM_ENUM::QueryInfoLevel(void)const",
    "public: __thiscall SERVER_0::SERVER_0(unsigned short const *)",
    "public: long __thiscall WKSTA_USER_1::SetUserName(unsigned short const *)",
    "public: __thiscall REPL_EDIR0_ENUM_OBJ::~REPL_EDIR0_ENUM_OBJ(void)",
    "public: class GROUP0_ENUM_OBJ const * __thiscall GROUP0_ENUM_ITER::operator()(void)",
    "protected: virtual long __thiscall GROUP::I_Delete(unsigned int)",
    "public: long __thiscall LSA_POLICY::GetAuditEventInfo(class LSA_AUDIT_EVENT_INFO_MEM *)",
    "MNetErrorLogWrite",
    "public: int __thiscall SESSION1_ENUM_ITER::Backup(void)",
    "protected: __thiscall CHARDEVQ_ENUM::CHARDEVQ_ENUM(unsigned short const *,unsigned short const *,unsigned int)",
    "protected: virtual long __thiscall LOCAL_USER::I_GetInfo(void)",
    "public: __thiscall REPL_EDIR_BASE::~REPL_EDIR_BASE(void)",
    "public: __thiscall LOC_LM_OBJ::LOC_LM_OBJ(enum LOCATION_TYPE,int)",
    "public: struct _GROUP_INFO_0 const * __thiscall GROUP0_ENUM_OBJ::QueryBufferPtr(void)const",
    "public: unsigned long __thiscall LM_SESSION_1::QueryUserFlags(void)const",
    "MxAllocSaveargs",
    "public: long __thiscall LSA_POLICY::SetPrimaryDomain(class LSA_PRIMARY_DOM_INFO_MEM const *)",
    "protected: unsigned char * __thiscall NEW_LM_OBJ::QueryBufferPtr(void)const",
    "public: long __thiscall ADMIN_AUTHORITY::ReplaceAccountDomain(unsigned long)",
    "MNetGroupGetUsers",
    "public: unsigned int __thiscall SHARE_1::QueryResourceType(void)const",
    "public: __thiscall SC_SERVICE::~SC_SERVICE(void)",
    "long __stdcall I_FetchDCList(class LSA_TRANSLATED_NAME_MEM const &,class LSA_REF_DOMAIN_MEM const &,void *,void *,class NLS_STR * *,class STRLIST *,int *,long *,unsigned short const *,int,int,int)",
    "private: struct _LSA_TRANSLATED_SID const * __thiscall LSA_TRANSLATED_SID_MEM::QueryPtr(void)const",
    "public: __thiscall ADMIN_AUTHORITY::~ADMIN_AUTHORITY(void)",
    "public: void __thiscall LSA_PRIVILEGES_ENUM_OBJ::SetBufferPtr(struct _POLICY_PRIVILEGE_DEFINITION const *)",
    "public: int __thiscall OS_SID::operator==(class OS_SID const &)const",
    "public: long __thiscall NEW_LM_OBJ::WriteNew(void)",
    "public: long __thiscall SAM_USER::SetPassword(class NLS_STR const &,int)",
    "public: long __thiscall NET_ACCESS::SetServerName(unsigned short const *)",
    "public: __thiscall BROWSE_DOMAIN_INFO::~BROWSE_DOMAIN_INFO(void)",
    "private: virtual long __thiscall ENUM_CALLER_LM_OBJ::EC_ResizeBuffer(unsigned int)",
    "public: unsigned short const * __thiscall USER_2::QueryPassword(void)const",
    "public: __thiscall SOURCE_INFO_ITEM_PTR::SOURCE_INFO_ITEM_PTR(void)",
    "public: __thiscall SOURCE_INFO_ITEM_PTR::~SOURCE_INFO_ITEM_PTR(void)",
    "public: class STRLIST * __thiscall SOURCE_INFO_ITEM::QueryCategoryList(void)",
    "protected: void __thiscall REPL_IDIR_1::SetLockTime(unsigned long)",
    "public: class NLS_STR * __thiscall SLIST_OF_NLS_STR::Remove(class ITER_SL_NLS_STR &)",
    "public: unsigned long __thiscall USER_MODALS_3::QueryDuration(void)const",
    "public: long __thiscall LM_SERVICE::Pause(unsigned int,unsigned int)",
    "public: virtual long __thiscall NT_EVENT_LOG::Clear(unsigned short const *)",
    "public: virtual long __thiscall NT_EVENT_LOG::QuerySrcSupportedTypeMask(class NLS_STR const &,unsigned short *)",
    "protected: int __thiscall LM_OBJ::IsUnconstructed(void)const",
    "public: long __thiscall MEMBERSHIP_LM_OBJ::DeleteAssocName(unsigned int)",
    "public: __thiscall SLIST_OF_ADMIN_AUTHORITY::SLIST_OF_ADMIN_AUTHORITY(int)",
    "public: unsigned short const * __thiscall SHARE::QueryServer(void)const",
    "public: long __thiscall WKSTA_USER_1::SetLogonServer(unsigned short const *)",
    "public: long __cdecl EVENT_LOG_SOURCE::Log(unsigned short,unsigned short,unsigned long,void *,unsigned long,void *,unsigned short const *,...)",
    "public: __thiscall REPL_EDIR_ENUM::~REPL_EDIR_ENUM(void)",
    "public: long __thiscall USER_2::SetUserPassRequired(int)",
    "public: __thiscall SAM_ALIAS::SAM_ALIAS(class SAM_DOMAIN const &,unsigned long,unsigned long)",
    "public: int __thiscall OS_ACE::IsInherittedByNewContainers(void)const",
    "public: __thiscall SHARE2_ENUM_OBJ::SHARE2_ENUM_OBJ(void)",
    "protected: virtual long __thiscall GROUP_MEMB::I_WriteInfo(void)",
    "private: unsigned short const * __thiscall ITER_DEVICE::EnumLPTs(void)",
    "public: void __thiscall SAM_PSWD_DOM_INFO_MEM::SetNoAnonChange(int)",
    "public: virtual unsigned short const * __thiscall GROUP::QueryName(void)const",
    "public: __thiscall LSA_REF_DOMAIN_MEM::LSA_REF_DOMAIN_MEM(int)",
    "MxFreeTStrings",
    "public: __thiscall LM_SESSION_1::LM_SESSION_1(unsigned short const *,unsigned short const *)",
    "protected: void __thiscall SERVER_2::SetSecurity(unsigned int)",
    "public: __thiscall USER10_ENUM::USER10_ENUM(class LOCATION const &,int)",
    "public: long __thiscall SC_SERVICE::SetSecurity(unsigned long,void * const)",
    "public: virtual void __thiscall LM_ERROR_LOG::Reset(void)",
    "public: long __thiscall REPLICATOR_0::SetImportPath(unsigned short const *)",
    "protected: int __thiscall OS_SID::IsOwnerAlloc(void)const",
    "public: __thiscall SAM_USER_ENUM_OBJ::SAM_USER_ENUM_OBJ(void)",
    "public: int __thiscall OS_SECURITY_DESCRIPTOR_CONTROL::IsSACLPresent(void)const",
    "protected: virtual long __thiscall USER_3::I_ChangeToNew(void)",
    "public: void __thiscall USER0_ENUM_OBJ::SetBufferPtr(struct _USER_INFO_0 const *)",
    "public: __thiscall GROUP1_ENUM::GROUP1_ENUM(unsigned short const *)",
    "protected: virtual long __thiscall REPL_EDIR_2::W_CreateNew(void)",
    "private: long __thiscall SERVER_1::W_Write(void)",
    "protected: unsigned char const * __thiscall ENUM_OBJ_BASE::QueryBufferPtr(void)const",
    "public: __thiscall USER0_ENUM_ITER::~USER0_ENUM_ITER(void)",
    "public: long __thiscall LOG_REGISTRY_INFO::MapCategoryToString(unsigned short const *,unsigned short,class NLS_STR *)",
    "public: virtual long __thiscall LM_EVENT_LOG::SeekOldestLogEntry(void)",
    "public: __thiscall LM_FILE_2::LM_FILE_2(unsigned short const *,unsigned long)",
    "public: virtual class STRLIST * __thiscall NT_EVENT_LOG::QuerySourceList(void)",
    "public: __thiscall SOURCE_INFO_ITEM_PTR::SOURCE_INFO_ITEM_PTR(class SOURCE_INFO_ITEM *,int)",
    "protected: void __thiscall SAM_OBJECT::SetHandle(void *)",
    "MxRestoreClientBuffer",
    "public: int __thiscall OS_SECURITY_DESCRIPTOR_CONTROL::IsGroupDefaulted(void)const",
    "public: void __thiscall SESSION0_ENUM_OBJ::SetBufferPtr(struct _SESSION_INFO_0 const *)",
    "public: long __thiscall OS_SECURITY_DESCRIPTOR::Copy(class OS_SECURITY_DESCRIPTOR const &)",
    "protected: virtual void __thiscall LSA_MEMORY::FreeBuffer(void)",
    "unsigned long __stdcall EnumLocalDrives(void)",
    "public: long __thiscall LSA_POLICY::GetServerRole(class LSA_SERVER_ROLE_INFO_MEM *)const",
    "public: void __thiscall LSA_ACCOUNTS_ENUM_OBJ::SetBufferPtr(void * const *)",
    "public: long __thiscall USER_11::SetParms(unsigned short const *)",
    "public: __thiscall REPL_IDIR_BASE::~REPL_IDIR_BASE(void)",
    "MNetShareSetInfo",
    "public: unsigned long __thiscall REPL_IDIR_1::QueryLockTime(void)const",
    "public: long __thiscall NET_NAME::QueryDrive(class NLS_STR *)",
    "MNetCharDevQEnum",
    "SetupSession",
    "protected: long __thiscall LM_SESSION_2::SetClientType(unsigned short const *)",
    "public: __thiscall NT_MACHINE_ENUM_OBJ::~NT_MACHINE_ENUM_OBJ(void)",
    "public: __thiscall DLL_NAME_HANDLE_PAIR::DLL_NAME_HANDLE_PAIR(void)",
    "public: class CONN0_ENUM_OBJ const * __thiscall CONN0_ENUM_ITER::operator()(void)",
    "private: static int __cdecl DOMAIN0_ENUM::CompareDomains0(void const *,void const *)",
    "public: unsigned short const * __thiscall USER_11::QueryUserComment(void)const",
    "public: __thiscall CONN1_ENUM_OBJ::CONN1_ENUM_OBJ(void)",
    "protected: long __thiscall REPL_DIR_BASE::SetDirName(unsigned short const *)",
    "private: void __thiscall LM_ENUM::RegisterIter(void)",
    "public: class SHARE1_ENUM_OBJ const * __thiscall SHARE1_ENUM_ITER::operator()(void)",
    "public: long __thiscall EVENT_PATTERN_BASE::CheckForMatch(int *,class LOG_ENTRY_BASE *)const",
    "public: __thiscall LSA_DOMAIN_INFO::LSA_DOMAIN_INFO(class NLS_STR const &,class NLS_STR const *,class NLS_STR const *)",
    "public: unsigned char __thiscall OS_ACE::QueryType(void)const",
    "public: class STRLIST * __thiscall WKSTA_10::QueryOtherDomains(void)const",
    "public: unsigned int __thiscall ARRAY_SOURCE_INFO_ITEM_PTR::QueryCount(void)const",
    "public: int __thiscall USER_2::QueryUserPassRequired(void)const",
    "public: struct _UNICODE_STRING const & __thiscall LSA_TRUSTED_DC_LIST::operator[](int)const",
    "public: __thiscall NT_MACHINE_ENUM::NT_MACHINE_ENUM(class SAM_DOMAIN const *)",
    "MNetConfigSet",
    "private: static unsigned short const * __stdcall DOMAIN_WITH_DC_CACHE::FindDcCache(struct _DC_CACHE_ENTRY const *,unsigned short const *)",
    "public: class OS_SECURITY_DESCRIPTOR_CONTROL const * __thiscall OS_SECURITY_DESCRIPTOR::QueryControl(void)const",
    "public: long __thiscall LOG_REGISTRY_INFO::GetSrcSupportedCategoryList(unsigned short const *,class STRLIST * *)",
    "protected: virtual long __thiscall REPL_IDIR_1::W_CacheApiData(unsigned char const *)",
    "public: unsigned long __thiscall REPL_IDIR_1::QueryLastUpdateTime(void)const",
    "protected: __thiscall LM_ENUM_ITER::~LM_ENUM_ITER(void)",
    "public: __thiscall LOC_LM_RESUME_ENUM::~LOC_LM_RESUME_ENUM(void)",
    "protected: __thiscall LOC_LM_ENUM::LOC_LM_ENUM(unsigned short const *,unsigned int)",
    "private: void __thiscall BROWSE_DOMAIN_INFO::AddDomainSource(unsigned long)",
    "private: long __thiscall LM_RESUME_ENUM::GetInfoMulti(void)",
    "I_MNetNameValidate",
    "public: void __thiscall REPL_EDIR2_ENUM_OBJ::SetBufferPtr(struct _REPL_EDIR_INFO_2 const *)",
    "public: __thiscall USER_11::USER_11(unsigned short const *,enum LOCATION_TYPE)",
    "public: int __thiscall REPL_EDIR1_ENUM_ITER::Backup(void)",
    "public: int __thiscall LM_SERVICE::IsStarted(long *)",
    "public: class LSA_POLICY * __thiscall ADMIN_AUTHORITY::QueryLSAPolicy(void)const",
    "public: void __thiscall USER10_ENUM_OBJ::SetBufferPtr(struct _USER_INFO_10 const *)",
    "public: void * __thiscall LSA_REF_DOMAIN_MEM::QueryPSID(unsigned long)const",
    "public: long __thiscall USER_11::SetAuthFlags(unsigned long)",
    "public: long __thiscall USER_3::CloneFrom(class USER_3 const &)",
    "public: void __thiscall OS_ACE::_DbgPrint(void)const",
    "MNetServerEnum",
    "public: __thiscall WKSTA_1::~WKSTA_1(void)",
    "private: void __thiscall GROUP_1::CtAux(void)",
    "public: __thiscall USE1_ENUM::USE1_ENUM(unsigned short const *)",
    "public: long __thiscall SAM_DOMAIN::GetPasswordInfo(class SAM_PSWD_DOM_INFO_MEM *)const",
    "public: int __thiscall LM_FILE_3::IsPermRead(void)const",
    "public: unsigned short const * __thiscall REPLICATOR_0::QueryLogonUserName(void)const",
    "public: __thiscall GROUP1_ENUM::GROUP1_ENUM(class LOCATION const &)",
    "public: __thiscall GROUP0_ENUM::GROUP0_ENUM(class LOCATION const &,unsigned short const *)",
    "public: class NLS_STR * __thiscall DLL_NAME_HANDLE_PAIR::QueryName(void)",
    "public: long __thiscall SAM_ALIAS::GetMembers(class SAM_SID_MEM *)",
    "public: __thiscall ARRAY_LIST_SOURCE_INFO_ITEM_PTR::~ARRAY_LIST_SOURCE_INFO_ITEM_PTR(void)",
    "public: virtual long __thiscall LM_AUDIT_LOG::QueryCurrentEntryDesc(class NLS_STR *)",
    "public: long __thiscall USER_2::SetAccountExpires(long)",
    "public: __thiscall LSA_PRIVILEGES_ENUM_OBJ::~LSA_PRIVILEGES_ENUM_OBJ(void)",
    "public: unsigned short const * __thiscall WKSTA_1::QueryLMRoot(void)const",
    "public: void __thiscall REPLICATOR_0::SetRole(unsigned long)",
    "public: long __thiscall NEW_LM_OBJ::ChangeToNew(void)",
    "public: unsigned long __thiscall REPLICATOR_0::QueryPulse(void)const",
    "public: long __thiscall SAM_DOMAIN::EnumerateUsers(class SAM_RID_ENUMERATION_MEM *,unsigned long *,unsigned long,unsigned long)const",
    "public: __thiscall NEW_LM_OBJ::NEW_LM_OBJ(int)",
    "MNetReplExportDirAdd",
    "public: long __thiscall USER_MODALS::SetMaxPasswdAge(unsigned long)",
    "public: virtual __thiscall LM_EVENT_LOG::~LM_EVENT_LOG(void)",
    "public: void __thiscall SLIST_OF_API_SESSION::Clear(void)",
    "protected: long __thiscall GROUP::W_CloneFrom(class GROUP const &)",
    "public: __thiscall LOG_REGISTRY_INFO::LOG_REGISTRY_INFO(class NLS_STR const &,class NLS_STR const &)",
    "public: void __thiscall OS_SID::_DbgPrint(void)const",
    "public: long __thiscall OS_ACE::QuerySID(class OS_SID * *)const",
    "public: __thiscall REPL_EDIR_1::~REPL_EDIR_1(void)",
    "public: struct _LUID __thiscall OS_LUID::QueryLuid(void)const",
    "public: virtual long __thiscall NT_EVENT_LOG::Backup(unsigned short const *)",
    "unsigned long __stdcall EnumUnavailComms(void)",
    "public: long __thiscall USER_MEMB::SetName(unsigned short const *)",
    "public: __thiscall USER_MODALS::USER_MODALS(unsigned short const *)",
    "protected: __thiscall GROUP_ENUM::GROUP_ENUM(unsigned short const *,unsigned int,unsigned short const *)",
    "protected: virtual long __thiscall SHARE_2::I_GetInfo(void)",
    "protected: void __thiscall DEVICE::SetDevType(enum LMO_DEVICE)",
    "public: static long __stdcall DOMAIN::GetAnyDC(unsigned short const *,unsigned short const *,class NLS_STR *)",
    "MNetUserAdd",
    "public: unsigned int __thiscall NLS_STR::QueryTextLength(void)const",
    "protected: virtual long __thiscall LSA_ACCOUNT::I_CreateNew(void)",
    "long __stdcall GetW32ComputerName(class NLS_STR &)",
    "protected: virtual long __thiscall USER_2::I_ChangeToNew(void)",
    "public: unsigned short __thiscall SOURCE_INFO_ARRAY::QueryTypeMask(int)const",
    "public: virtual int __thiscall OS_SACL_SUBJECT_ITER::CompareCurrentSubject(class OS_ACL_SUBJECT_ITER *)",
    "public: __thiscall REPL_IDIR_1::REPL_IDIR_1(unsigned short const *,unsigned short const *)",
    "public: virtual unsigned short const * __thiscall NET_ACCESS::QueryName(void)const",
    "protected: virtual long __thiscall REPL_EDIR_0::W_CacheApiData(unsigned char const *)",
    "public: __thiscall MEMBERSHIP_LM_OBJ::MEMBERSHIP_LM_OBJ(class LOCATION const &,unsigned int)",
    "public: class NLS_STR * __thiscall LOG_ENTRY_BASE::QueryCategory(void)",
    "public: virtual long __thiscall NT_EVENT_LOG::QueryPos(class LOG_ENTRY_NUMBER *)",
    "public: __thiscall LSA_TRUSTED_DC_LIST::LSA_TRUSTED_DC_LIST(class NLS_STR const &,unsigned short const *)",
    "public: unsigned short const * __thiscall SERVER1_ENUM_OBJ::QueryName(void)const",
    "public: __thiscall SERVER1_ENUM_ITER::SERVER1_ENUM_ITER(class SERVER1_ENUM &)",
    "public: __thiscall TRUSTED_DOMAIN_ENUM_OBJ::TRUSTED_DOMAIN_ENUM_OBJ(void)",
    "public: long __thiscall LSA_POLICY::QueryCurrentUser(class NLS_STR *)const",
    "public: __thiscall REPL_IDIR1_ENUM_OBJ::~REPL_IDIR1_ENUM_OBJ(void)",
    "private: void __thiscall TRIPLE_SERVER_ENUM::MapBrowserToTriple(struct _SERVER_INFO_101 const *,struct _TRIPLE_SERVER_INFO *)",
    "private: virtual long __thiscall USE_ENUM::CallAPI(unsigned char * *,unsigned int *)",
    "MNetServiceControl",
    "MNetWkstaSetUID",
    "public: int __thiscall OS_SID::IsValid(void)const",
    "public: __thiscall REPL_EDIR2_ENUM::REPL_EDIR2_ENUM(unsigned short const *)",
    "public: virtual long __thiscall USER_MODALS_3::WriteInfo(void)",
    "public: int __thiscall NET_ACCESS_1::CompareACL(class NET_ACCESS_1 *)",
    "protected: virtual long __thiscall LSA_PRIVILEGES_ENUM::CallAPI(int,unsigned char * *,unsigned int *)",
    "public: __thiscall REPL_EDIR2_ENUM_OBJ::REPL_EDIR2_ENUM_OBJ(void)",
    "public: __thiscall SERVICE_ENUM_OBJ::SERVICE_ENUM_OBJ(void)",
    "public: unsigned short const * __thiscall LM_SESSION::QueryServer(void)const",
    "public: __thiscall CHARDEVQ_ENUM::~CHARDEVQ_ENUM(void)",
    "public: long __thiscall USER_2::SetPassword(unsigned short const *)",
    "public: __thiscall OS_DACL_SUBJECT_ITER::OS_DACL_SUBJECT_ITER(class OS_ACL *,struct _GENERIC_MAPPING *,struct _GENERIC_MAPPING *,int,int)",
    "long __stdcall GetW32UserAndDomainName(class NLS_STR &,class NLS_STR &)",
    "public: __thiscall SESSION0_ENUM_ITER::SESSION0_ENUM_ITER(class SESSION0_ENUM &)",
    "public: __thiscall GROUP_MEMB::~GROUP_MEMB(void)",
    "public: __thiscall SHARE_ENUM::~SHARE_ENUM(void)",
    "public: long __thiscall LSA_TRUST_INFO_MEM::QueryName(unsigned long,class NLS_STR *)const",
    "private: int __thiscall ARRAY_DLL_NAME_HANDLE_PAIR::WithinRange(unsigned int)const",
    "MNetAccessSetInfo",
    "public: int __thiscall GROUP0_ENUM_ITER::Backup(void)",
    "public: long __thiscall GROUP_MEMB::SetName(unsigned short const *)",
    "public: long __thiscall USER_3::SetAccountType(enum _ACCOUNT_TYPE)",
    "protected: virtual unsigned long __thiscall LM_ERROR_LOG::QueryEntriesInBuffer(void)",
    "MNetGroupSetInfo",
    "public: __thiscall LSA_SECRET::~LSA_SECRET(void)",
    "public: long __thiscall OS_ACL::DeleteACE(unsigned long)",
    "public: void * __thiscall OS_SID::QueryPSID(void)const",
    "protected: __thiscall LSA_OBJECT::LSA_OBJECT(void)",
    "public: unsigned long __thiscall OS_SACL_SUBJECT_ITER::QueryAuditAccessMask_F(void)const",
    "public: __thiscall LSA_AUDIT_EVENT_INFO_MEM::LSA_AUDIT_EVENT_INFO_MEM(int)",
    "public: __thiscall SHARE::SHARE(unsigned short const *,unsigned short const *,int)",
    "public: int __thiscall DOMAIN0_ENUM_ITER::Backup(void)",
    "public: __thiscall FILE3_ENUM_ITER::FILE3_ENUM_ITER(class FILE3_ENUM &)",
    "unsigned long __stdcall MapLPT(unsigned short const *)",
    "void __stdcall FreeUnicodeString(struct _UNICODE_STRING *)",
    "public: __thiscall USER0_ENUM_ITER::USER0_ENUM_ITER(class USER0_ENUM &)",
    "public: long __thiscall ADMIN_AUTHORITY::UpgradeAccountDomain(unsigned long)",
    "public: void * __thiscall LSA_PRIMARY_DOM_INFO_MEM::QueryPSID(void)const",
    "MNetAuditClear",
    "public: __thiscall TRIPLE_SERVER_ENUM::TRIPLE_SERVER_ENUM(unsigned short const *,unsigned short const *,int,int,int,int)",
    "public: __thiscall SERVER_1::SERVER_1(unsigned short const *)",
    "public: class REPL_IDIR0_ENUM_OBJ const * __thiscall REPL_IDIR0_ENUM_ITER::operator()(void)",
    "public: unsigned int __thiscall DEVICE::QueryRemoteType(void)const",
    "protected: virtual long __thiscall USER_2::I_CreateNew(void)",
    "public: long __thiscall EVENT_LOG::Close(void)",
    "public: __thiscall USER0_ENUM::USER0_ENUM(enum LOCATION_TYPE,unsigned short const *,int)",
    "protected: long __thiscall NEW_LM_OBJ::W_CloneFrom(class NEW_LM_OBJ const &)",
    "public: __thiscall ENUM_CALLER_LM_OBJ::~ENUM_CALLER_LM_OBJ(void)",
    "public: unsigned int __thiscall USER_2::QueryUserFlags(void)const",
    "private: void __thiscall LM_OBJ_BASE::MakeValid(void)",
    "protected: __thiscall DOMAIN_ENUM::DOMAIN_ENUM(unsigned short const *,unsigned int)",
    "MxFreeUnicodeVector",
    "protected: void __thiscall SERVER_1::SetMajorMinorVer(unsigned int,unsigned int)",
    "protected: void __thiscall LSA_POLICY::CleanupUnistrArray(struct _UNICODE_STRING *,unsigned long)",
    "private: virtual long __thiscall REPL_EDIR_2::W_Write(void)",
    "public: __thiscall SERVER_2::SERVER_2(unsigned short const *)",
    "public: long __thiscall LM_SERVICE::Start(unsigned short const *,unsigned int,unsigned int)",
    "public: __thiscall TIME_OF_DAY::TIME_OF_DAY(enum LOCATION_TYPE)",
    "public: void * __thiscall OS_SID::QuerySid(void)const",
    "protected: void __thiscall NEW_LM_OBJ::ReportError(long)",
    "protected: int __thiscall NEW_LM_OBJ::IsOKState(void)const",
    "public: unsigned int __thiscall NET_ACCESS_1::QueryPerm(unsigned short const *,enum PERMNAME_TYPE)const",
    "private: unsigned int __thiscall NET_ACCESS_1::QueryRequiredSpace(unsigned int)const",
    "public: int __thiscall USER_2::QueryUserCantChangePass(void)const",
    "private: void __thiscall TRIPLE_SERVER_ENUM::MapLmToKnown(struct _USER_INFO_0 const *,struct _KNOWN_SERVER_INFO *)",
    "public: long __thiscall LM_ENUM::GetInfo(void)",
    "protected: virtual long __thiscall NT_EVENT_LOG::CreateCurrentRawEntry(class RAW_LOG_ENTRY *)",
    "public: __thiscall NT_MACHINE_ENUM::~NT_MACHINE_ENUM(void)",
    "protected: __thiscall USER_ENUM::USER_ENUM(unsigned short const *,unsigned int,unsigned short const *,int)",
    "public: class NLS_STR const * __thiscall SOURCE_INFO_ARRAY::QueryParameterMessageDllName(int)const",
    "public: long __thiscall REPLICATOR_0::SetLogonUserName(unsigned short const *)",
    "public: virtual void __thiscall EVENT_LOG::Reset(void)",
    "public: int __thiscall SERVICE_ENUM_ITER::Backup(void)",
    "protected: long __thiscall LM_SESSION::SetName(unsigned short const *)"
  ],
  "netui2.dll": [
    "public: __thiscall SLT_FONT::SLT_FONT(class OWNER_WINDOW *,unsigned int,enum FontType)",
    "public: class BROWSER_DOMAIN * __thiscall NT_USER_BROWSER_DIALOG::FindDomain(class OS_SID const *)",
    "private: unsigned int __thiscall MAGIC_GROUP::FindAssocRadioButton(class CONTROL_VALUE *)",
    "protected: virtual long __thiscall BLT_SET_CONTROL::MoveItems(class LISTBOX *,class LISTBOX *)",
    "public: virtual long __thiscall CHANGEABLE_SPIN_ITEM::SaveCurrentData(void)",
    "protected: virtual int __thiscall CONSOLE_ELLIPSIS::QueryMaxCharWidth(void)",
    "protected: virtual void __thiscall DIALOG_WINDOW::OnValidationError(unsigned int,long)",
    "public: class BITFIELD * __thiscall STRING_BITSET_PAIR::QueryBitfield(void)",
    "public: void __thiscall DEVICE_COMBO::DeleteCurrentDeviceName(void)",
    "protected: __thiscall UI_EXT_MGR_IF::UI_EXT_MGR_IF(void)",
    "protected: class PUSH_BUTTON * __thiscall SLE_STRLB_GROUP::QueryAddButton(void)const",
    "public: void __thiscall XYRECT::ConvertClientToScreen(struct HWND__ *)",
    "public: __thiscall SET_CONTROL::SET_CONTROL(class OWNER_WINDOW *,unsigned int,unsigned int,struct HICON__ *,struct HICON__ *,class LISTBOX *,class LISTBOX *,unsigned int)",
    "protected: virtual int __thiscall SPIN_SLE_STR::OnChar(class CHAR_EVENT const &)",
    "public: __thiscall POPUP::POPUP(struct HWND__ *,long,enum MSG_SEVERITY,unsigned long,unsigned int,class NLS_STR const * *,unsigned int)",
    "protected: virtual void __thiscall SPIN_SLE_NUM_VALID::DisplayErrorMsg(void)",
    "public: void __thiscall DEVICE_CONTEXT::DrawFocusRect(struct tagRECT const *)const",
    "protected: virtual int __thiscall NT_USER_BROWSER_DIALOG::OnDlgDeactivation(class ACTIVATION_EVENT const &)",
    "protected: int __thiscall USER_LBI_CACHE::QueryULCEntrySize(void)",
    "public: int __thiscall BLT_LISTBOX::AddItemIdemp(class LBI *)",
    "public: int __thiscall CHANGEABLE_SPIN_ITEM::QueryWrap(void)const",
    "public: unsigned long __thiscall CHANGEABLE_SPIN_ITEM::QueryMax(void)const",
    "protected: virtual void __thiscall EXPANDABLE_DIALOG::OnExpand(void)",
    "BltDlgProc",
    "protected: void __thiscall SET_CONTROL::EnableButtons(void)",
    "public: long __thiscall DIALOG_WINDOW::Process(unsigned int *)",
    "public: void __thiscall HIER_LISTBOX::AddSortedItems(class HIER_LBI * *,int,class HIER_LBI *,int)",
    "public: void __thiscall AUDIT_CHECKBOXES::CheckSuccess(int)",
    "public: unsigned short const * __thiscall BROWSER_SUBJECT::QueryDomainName(void)const",
    "public: __thiscall ASSOCHWNDPWND::ASSOCHWNDPWND(struct HWND__ *,class CLIENT_WINDOW const *)",
    "public: __thiscall PROMPT_AND_CONNECT::~PROMPT_AND_CONNECT(void)",
    "public: int __thiscall SET_CONTROL::HandleOnLMouseButtonUp(class LISTBOX *,class CUSTOM_CONTROL *,class MOUSE_EVENT const &)",
    "protected: static int __cdecl USER_LBI_CACHE::CompareLogonNames(void const *,void const *)",
    "public: int __thiscall LIST_CONTROL::QueryCurrentItem(void)const",
    "protected: __thiscall STATE_BUTTON_CONTROL::STATE_BUTTON_CONTROL(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long)",
    "public: long __thiscall SLT_ELLIPSIS::SetText(class NLS_STR const &)",
    "protected: long __thiscall NT_FIND_ACCOUNT_DIALOG::DoSearch(void)",
    "protected: static unsigned short const * __stdcall CONTROL_WINDOW::QueryEditClassName(void)",
    "public: void __thiscall OUTLINE_LISTBOX::SetDomainExpanded(int,int)",
    "protected: __thiscall UI_MENU_EXT::UI_MENU_EXT(unsigned short const *,unsigned long)",
    "public: struct HBITMAP__ * __thiscall DISPLAY_MAP::QueryMaskHandle(void)const",
    "public: long __thiscall SET_OF_AUDIT_CATEGORIES::QueryUserSelectedBits(class BITFIELD *,class BITFIELD *)",
    "public: void __thiscall SPIN_SLE_NUM::SetMin(unsigned long)",
    "public: struct HMENU__ * __thiscall MENU_BASE::QuerySubMenu(int)const",
    "public: unsigned int __thiscall CONTROL_TABLE::QueryCount(void)const",
    "public: static long __stdcall CLIENT_WINDOW::WndProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: __thiscall ASSOCHWNDTHIS::~ASSOCHWNDTHIS(void)",
    "public: long __thiscall OPEN_LBOX_BASE::Fill(void)",
    "public: __thiscall AUDIT_CHECKBOXES::AUDIT_CHECKBOXES(class OWNER_WINDOW *,unsigned int,unsigned int,unsigned int,class NLS_STR const &,class BITFIELD const &)",
    "public: __thiscall DISPLAY_CONTEXT::DISPLAY_CONTEXT(class WINDOW *)",
    "public: long __thiscall BROWSER_DOMAIN::QueryErrorLoadingAuthority(void)const",
    "public: static int __stdcall WINDOW::IsClientGeneratedMessage(void)",
    "protected: virtual void __thiscall MAGIC_GROUP::SaveValue(int)",
    "protected: virtual int __thiscall SPIN_SLE_NUM::OnKeyDown(class VKEY_EVENT const &)",
    "public: unsigned long __thiscall CHANGEABLE_SPIN_ITEM::QueryValue(void)const",
    "protected: virtual int __thiscall BLT_LISTBOX_HAW::CD_Char(unsigned short,unsigned short)",
    "public: __thiscall UI_DOMAIN::UI_DOMAIN(class PWND2HWND &,unsigned long,unsigned short const *,int)",
    "public: unsigned short const * __thiscall OPEN_LBI_BASE::QueryPath(void)const",
    "protected: __thiscall CLIENT_WINDOW::CLIENT_WINDOW(unsigned long,class WINDOW const *,unsigned short const *)",
    "protected: long __thiscall NT_USER_BROWSER_DIALOG::OnMembers(void)",
    "public: __thiscall LM_OLLB::~LM_OLLB(void)",
    "public: virtual __thiscall UI_MENU_EXT::~UI_MENU_EXT(void)",
    "protected: __thiscall STRING_LIST_CONTROL::STRING_LIST_CONTROL(class OWNER_WINDOW *,unsigned int,int)",
    "private: long __thiscall DEVICE_COMBO::FillDevices(void)",
    "public: void __thiscall DEVICE_CONTEXT::DrawRect(struct tagRECT const *)const",
    "public: __thiscall NT_FIND_ACCOUNT_DIALOG::NT_FIND_ACCOUNT_DIALOG(struct HWND__ *,class NT_USER_BROWSER_DIALOG *,class BROWSER_DOMAIN_CB *,unsigned short const *,unsigned long)",
    "protected: virtual int __thiscall MSGPOPUP_DIALOG::OnCancel(void)",
    "public: class CONTROL_WINDOW * __thiscall CONTROL_ENTRY::QueryCtrlPtr(void)const",
    "protected: virtual void __thiscall LIST_CONTROL::RestoreValue(int)",
    "public: int __thiscall ASSOCHWNDDISP::operator!(void)const",
    "public: __thiscall OS_SID::operator void *(void)const",
    "public: void __thiscall SCROLLBAR::SetPos(unsigned int)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnDropDown(class CONTROL_EVENT const &)",
    "protected: virtual long __thiscall CANCEL_TASK_DIALOG::QueryObjectName(class NLS_STR *)",
    "public: __thiscall POPUP::~POPUP(void)",
    "public: virtual long __thiscall LB_COL_WIDTHS::ReloadColumnWidths(struct HWND__ *,struct HINSTANCE__ *,class IDRESOURCE const &)",
    "protected: virtual int __thiscall DISPATCHER::OnQMouseCursor(class QMOUSEACT_EVENT const &)",
    "public: void __thiscall LISTBOX::SetScrollPos(unsigned int)",
    "private: static int __stdcall POPUP::CalcDefButton(unsigned int,unsigned int)",
    "public: __thiscall CHANGEABLE_SPIN_ITEM::~CHANGEABLE_SPIN_ITEM(void)",
    "protected: virtual int __thiscall USER_BROWSER_LB::CD_VKey(unsigned short,unsigned short)",
    "public: long __thiscall MENU_BASE::Append(unsigned short const *,struct HMENU__ *,unsigned int)const",
    "private: long __thiscall LM_OLLB::FillDomains(unsigned long,unsigned short const *)",
    "public: virtual unsigned int __thiscall CONTROL_VALUE::QueryEventEffects(class CONTROL_EVENT const &)",
    "private: void __thiscall LOGON_HOURS_CONTROL::CalcRectForCell(class XYRECT *,int)const",
    "public: __thiscall FONT::FONT(unsigned short const *,unsigned char,int,enum FontAttributes)",
    "public: unsigned int __thiscall DEVICE_CONTEXT::SetTextAlign(unsigned int)",
    "public: struct HBRUSH__ * __thiscall DEVICE_CONTEXT::SelectBrush(struct HBRUSH__ *)",
    "public: virtual struct HWND__ * __thiscall CLIENT_WINDOW::QueryRobustHwnd(void)const",
    "public: unsigned int __thiscall CONTROL_WINDOW::QueryCid(void)const",
    "public: __thiscall ITER_SL_USER_BROWSER_LBI::ITER_SL_USER_BROWSER_LBI(class SLIST &)",
    "public: __thiscall SPIN_SLE_STR::SPIN_SLE_STR(class OWNER_WINDOW *,unsigned int,unsigned short const * * const,long,int,unsigned int)",
    "public: int __thiscall WIN32_THREAD::IsRunnable(void)const",
    "public: unsigned long __thiscall GET_FNAME_BASE_DLG::QueryHelpContext(void)",
    "public: virtual __thiscall BROWSER_DOMAIN_LBI::~BROWSER_DOMAIN_LBI(void)",
    "public: __thiscall CONTROL_VALUE::CONTROL_VALUE(class CONTROL_GROUP *)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnDeactivation(class ACTIVATION_EVENT const &)",
    "public: virtual long __thiscall SPIN_SLE_NUM::Validate(void)",
    "public: __thiscall SCROLLBAR::SCROLLBAR(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long)",
    "public: long __thiscall BASE_SET_FOCUS_DLG::Process(int *)",
    "protected: void __thiscall STATE_BUTTON_CONTROL::SetState(unsigned int)",
    "public: __thiscall BLT_LISTBOX_HAW::BLT_LISTBOX_HAW(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,int,enum FontType,int)",
    "public: int __thiscall ASSOCHCFILE::IsAssociatedHC(unsigned long)const",
    "public: __thiscall ACCELTABLE::ACCELTABLE(class IDRESOURCE const &)",
    "protected: long __thiscall NT_LOCALGROUP_BROWSER_DIALOG::OnMembers(void)",
    "public: virtual unsigned long __thiscall CHANGEABLE_SPIN_ITEM::QuerySmallIncValue(void)const",
    "public: unsigned short const * __thiscall UI_EXT::QueryDllName(void)const",
    "public: long __thiscall BASE_ELLIPSIS::SetOriginalStr(unsigned short const *)",
    "public: __thiscall WIN32_SEMAPHORE::~WIN32_SEMAPHORE(void)",
    "public: static void __stdcall BLTIMP::LeaveBLTCritSect(void)",
    "public: int __thiscall SPIN_GROUP::DoChar(class CHAR_EVENT const &)",
    "public: long __thiscall HIER_LISTBOX::ExpandItem(class HIER_LBI *)",
    "public: static unsigned short const * __stdcall SLE_STRIP::QueryWhiteSpace(void)",
    "public: __thiscall XYRECT::XYRECT(class WINDOW const *,int)",
    "public: long __thiscall MENU_BASE::Modify(unsigned short const *,unsigned int,unsigned int,unsigned int)const",
    "public: struct CLIENTDATA * __thiscall ITER_SL_CLIENTDATA::Next(void)",
    "public: __thiscall HIER_LBI::HIER_LBI(int)",
    "public: long __thiscall LM_OLLB::CollapseDomain(int)",
    "public: void __thiscall PUSH_BUTTON::MakeDefault(void)",
    "public: int __thiscall WIN_TIME::QueryMinute(void)const",
    "int __stdcall min(int,int)",
    "public: long __thiscall ACCOUNT_NAMES_MLE::SetTargetDomain(unsigned short const *)",
    "protected: virtual void __thiscall SLT::SaveValue(int)",
    "public: long __thiscall NLS_STR::Load(long)",
    "public: __thiscall STLBITEM::STLBITEM(class STATELBGRP *)",
    "protected: virtual int __thiscall DIALOG_WINDOW::OnDlgActivation(class ACTIVATION_EVENT const &)",
    "public: class TIMER_BASE * __thiscall BLT_MASTER_TIMER::NextTimer(void)",
    "public: long __thiscall USER_BROWSER_LBI_CACHE::Fill(class ADMIN_AUTHORITY *,unsigned short const *,unsigned long,int,int,int *)",
    "protected: virtual int __thiscall FOCUS_CHECKBOX::OnPaintReq(void)",
    "public: __thiscall H_SPLITTER_BAR::H_SPLITTER_BAR(class OWNER_WINDOW *,unsigned int)",
    "public: virtual void __thiscall OWNER_DRAW_DMID_DTE::Paint(struct HDC__ *,struct tagRECT const *)const",
    "protected: static long __stdcall BLT_COMBOBOX::CBSubclassProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: int __thiscall INTL_PROFILE::IsYrCentury(void)const",
    "public: void __thiscall ELAPSED_TIME_CONTROL::SetSecondMin(long)",
    "public: long __thiscall SLE_STRLB_GROUP::Init(class STRLIST *)",
    "public: void __thiscall RADIO_GROUP::Enable(int)",
    "public: int __thiscall CONTROL_TABLE::RemoveControl(class CONTROL_WINDOW *)",
    "protected: virtual int __thiscall FOCUS_CHECKBOX::OnDefocus(class FOCUS_EVENT const &)",
    "protected: virtual int __thiscall SPIN_SLE_NUM::OnDefocus(class FOCUS_EVENT const &)",
    "private: void __thiscall HIER_LBI::AdjustDescendantCount(int)",
    "private: void __thiscall BASE_SET_FOCUS_DLG::SelectNetPathString(void)",
    "public: __thiscall CHANGEABLE_SPIN_ITEM::CHANGEABLE_SPIN_ITEM(class CONTROL_WINDOW *,unsigned long,unsigned long,unsigned long,int)",
    "public: long __thiscall UI_DOMAIN::GetInfo(void)",
    "public: unsigned int __thiscall MENU_BASE::CheckItem(unsigned int,int,unsigned int)const",
    "public: int __thiscall HIER_LISTBOX::AddItem(class HIER_LBI *,class HIER_LBI *,int)",
    "public: long __thiscall GET_FNAME_BASE_DLG::SetText(class NLS_STR const &)",
    "public: void __thiscall CHANGEABLE_SPIN_ITEM::SetValue(unsigned long)",
    "public: __thiscall DIALOG_WINDOW::~DIALOG_WINDOW(void)",
    "public: void __thiscall HIER_LBI::SetExpanded(int)",
    "public: __thiscall SPIN_SLT_SEPARATOR::SPIN_SLT_SEPARATOR(class OWNER_WINDOW *,unsigned int)",
    "protected: int __thiscall ACCOUNT_NAMES_MLE::IsWellKnownAccount(class NLS_STR const &)",
    "public: void __thiscall ORDER_GROUP::SetButton(void)",
    "public: unsigned int __thiscall BROWSE_DOMAIN_ENUM::QueryDomainCount(void)",
    "private: struct _LSA_TRUST_INFORMATION const * __thiscall LSA_REF_DOMAIN_MEM::QueryPtr(void)const",
    "void __stdcall `vector constructor iterator'(void *,unsigned int,int,void * (__thiscall*)(void *))",
    "public: void __thiscall METER::SetComplete(int)",
    "public: class XYDIMENSION __thiscall SPIN_GROUP::QuerySize(void)",
    "public: __thiscall SLIST_OF_USER_BROWSER_LBI::~SLIST_OF_USER_BROWSER_LBI(void)",
    "protected: virtual int __thiscall H_SPLITTER_BAR::OnLMouseButtonUp(class MOUSE_EVENT const &)",
    "public: int __thiscall XYRECT::CalcWidth(void)const",
    "public: virtual unsigned long __thiscall SPIN_SLE_VALID_SECOND::QuerySmallIncValue(void)const",
    "public: virtual unsigned long __thiscall CHANGEABLE_SPIN_ITEM::QuerySmallDecValue(void)const",
    "public: long __thiscall WIN32_EVENT::Pulse(void)",
    "public: long __thiscall LM_OLLB::ExpandDomain(void)",
    "public: struct _UNICODE_STRING const * __thiscall LSA_TRUST_INFO_MEM::QueryUnicodeName(unsigned long)const",
    "public: void __thiscall CUSTOM_CONTROL::CVSaveValue(int)",
    "public: virtual long __thiscall STR_DTE::AppendDataTo(class NLS_STR *)const",
    "public: virtual void __thiscall CONTROL_WINDOW::IndicateError(long)",
    "protected: virtual unsigned short const * __thiscall BASE_SET_FOCUS_DLG::QueryHelpFile(unsigned long)",
    "public: class OS_SID const * __thiscall USER_BROWSER_LBI::QueryOSSID(void)const",
    "public: int __thiscall PROMPT_AND_CONNECT::IsConnected(void)",
    "public: void __thiscall LIST_CONTROL::SetCaretIndex(int,int)",
    "protected: virtual int __thiscall H_SPLITTER_BAR::Dispatch(class EVENT const &,unsigned long *)",
    "protected: virtual unsigned long __thiscall NT_LOCALGROUP_BROWSER_DIALOG::QueryHelpContext(void)",
    "public: __thiscall SET_CONTROL::~SET_CONTROL(void)",
    "private: virtual unsigned short __thiscall GLOBAL_ATOM::W_AddAtom(unsigned short const *)const",
    "public: __thiscall WIN32_HANDLE::WIN32_HANDLE(void *)",
    "public: virtual void __thiscall CHANGEABLE_SPIN_ITEM::operator+=(unsigned long)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnTimer(class TIMER_EVENT const &)",
    "protected: virtual int __thiscall APP_WINDOW::OnSystemChange(class SYSCHANGE_EVENT const &)",
    "public: long __thiscall STRING_LIST_CONTROL::QueryItemText(class NLS_STR *)const",
    "public: int __thiscall WINDOW::Show(int)",
    "public: unsigned short const * __thiscall OPEN_LBI_BASE::QueryAccessName(void)const",
    "protected: virtual int __thiscall H_SPLITTER_BAR::OnLMouseButtonDown(class MOUSE_EVENT const &)",
    "public: long __thiscall SET_OF_AUDIT_CATEGORIES::SetCheckBoxNames(class MASK_MAP *)",
    "public: int __thiscall GRAPHICAL_BUTTON_WITH_DISABLE::QuerySelected(void)const",
    "int __cdecl ComparepLBIs(class USER_BROWSER_LBI * const *,class USER_BROWSER_LBI * const *)",
    "public: virtual class LBI * __thiscall USER_BROWSER_LBI_CACHE::RemoveItem(int)",
    "public: int __thiscall SET_OF_AUDIT_CATEGORIES::QueryCount(void)",
    "public: __thiscall CONTROL_GROUP::CONTROL_GROUP(class CONTROL_GROUP *)",
    "protected: class SPIN_ITEM * __thiscall SPIN_GROUP::QueryCurrentField(void)const",
    "public: __thiscall SCROLL_EVENT::SCROLL_EVENT(unsigned int,unsigned int,long)",
    "public: __thiscall SLE_STRLB_GROUP::~SLE_STRLB_GROUP(void)",
    "public: virtual int __thiscall CHANGEABLE_SPIN_ITEM::IsStatic(void)const",
    "public: long __thiscall MASK_MAP::Add(class BITFIELD const &,class NLS_STR const &,int)",
    "public: __thiscall DLGLOAD::~DLGLOAD(void)",
    "public: void __thiscall DEVICE_CONTEXT::MoveTo(int,int)const",
    "protected: virtual unsigned short const * __thiscall NT_FIND_ACCOUNT_DIALOG::QueryHelpFile(unsigned long)",
    "public: static long __stdcall BLT::RegisterHelpFile(struct HINSTANCE__ *,long,unsigned long,unsigned long)",
    "protected: int __thiscall LIST_CONTROL::InsertItemData(int,void *)",
    "public: unsigned long __thiscall NT_MEMORY::QueryCount(void)const",
    "public: __thiscall LBITREE::~LBITREE(void)",
    "public: __thiscall ASSOCHCFILE::~ASSOCHCFILE(void)",
    "public: static long __stdcall WIN32_FONT_PICKER::Process(class OWNER_WINDOW *,int *,class FONT *,struct tagLOGFONTW *,struct tagCHOOSEFONTW *)",
    "public: __thiscall ASSOCHWNDPWND::~ASSOCHWNDPWND(void)",
    "public: enum SCROLL_EVENT::SCROLL_COMMAND __thiscall SCROLL_EVENT::QueryCommand(void)const",
    "protected: void __thiscall SLT_ELLIPSIS::ResetError(void)",
    "public: __thiscall WIN32_THREAD::WIN32_THREAD(int,unsigned int,unsigned short const *)",
    "public: class LSA_POLICY * __thiscall BROWSER_DOMAIN::QueryLSAPolicy(void)const",
    "public: __thiscall PAINT_DISPLAY_CONTEXT::PAINT_DISPLAY_CONTEXT(class WINDOW *)",
    "public: void __thiscall DEC_SLT::SetValue(unsigned long)",
    "protected: virtual int __thiscall SPIN_SLE_STR::OnFocus(class FOCUS_EVENT const &)",
    "public: int __thiscall APP_WINDOW::SetMenu(class IDRESOURCE const &)",
    "private: void __thiscall SPIN_SLE_NUM::SetMaxInput(void)",
    "public: __thiscall SPIN_SLE_STR::SPIN_SLE_STR(class OWNER_WINDOW *,unsigned int,unsigned short const * * const,long,class XYPOINT,class XYDIMENSION,unsigned long,int,unsigned int)",
    "private: void __thiscall LOGON_HOURS_CONTROL::DrawFocusOnDayButton(class DISPLAY_CONTEXT const &,int)const",
    "public: class DISPLAY_MAP * const * __thiscall STATELB::QueryMapArray(void)const",
    "public: virtual __thiscall USER_BROWSER_LBI_CACHE::~USER_BROWSER_LBI_CACHE(void)",
    "public: __thiscall ARRAY_CONTROLVAL_CID_PAIR::ARRAY_CONTROLVAL_CID_PAIR(unsigned int)",
    "public: void __thiscall BLT_LISTBOX::RemoveAllItems(void)",
    "public: __thiscall BLT_LISTBOX::BLT_LISTBOX(class OWNER_WINDOW *,unsigned int,int,enum FontType,int)",
    "public: __thiscall XYDIMENSION::XYDIMENSION(struct tagSIZE const &)",
    "private: void __thiscall LOGON_HOURS_CONTROL::DrawFocusSomewhere(class DISPLAY_CONTEXT const &,int)const",
    "public: long __thiscall BASE::QueryError(void)const",
    "public: long __thiscall BROWSER_DOMAIN::RequestAndWaitForUsers(void)",
    "public: long __thiscall SLIST_OF_CLIENTDATA::Add(struct CLIENTDATA const *)",
    "private: void __thiscall HIER_LBI::AbandonAllChildren(void)",
    "protected: __thiscall CLIENT_WINDOW::CLIENT_WINDOW(void)",
    "public: __thiscall STATE_BUTTON_CONTROL::~STATE_BUTTON_CONTROL(void)",
    "public: struct _UNICODE_STRING const * __thiscall LSA_PRIMARY_DOM_INFO_MEM::QueryUnicodeName(void)const",
    "public: void __thiscall LIST_CONTROL::SetTopIndex(int)",
    "int __stdcall max(int,int)",
    "public: __thiscall WIN32_MUTEX::WIN32_MUTEX(unsigned short const *,int)",
    "public: void __thiscall LAZY_LISTBOX::SetCount(unsigned int)",
    "private: void __thiscall H_SPLITTER_BAR::CtAux(void)",
    "public: unsigned int __thiscall BIT_MAP::QueryHeight(void)const",
    "public: __thiscall PAINT_DISPLAY_CONTEXT::~PAINT_DISPLAY_CONTEXT(void)",
    "protected: virtual int __thiscall CONSOLE_ELLIPSIS::QueryStrLen(unsigned short const *,int)",
    "public: static void __stdcall HWND_DLGPTR_CACHE::Add(struct HWND__ *,class DIALOG_WINDOW *)",
    "public: unsigned long __thiscall UI_EXT_MGR::QueryDeltaDelta(void)const",
    "public: unsigned int __thiscall MAGIC_GROUP::QuerySelection(void)const",
    "protected: virtual unsigned long __thiscall DISPATCHER::OnQDlgCode(void)",
    "public: long __thiscall EVENT::QueryLParam(void)const",
    "public: virtual long __thiscall GET_SAVE_FILENAME_DLG::Process(int *)",
    "public: __thiscall CLIENT_WINDOW::~CLIENT_WINDOW(void)",
    "public: long __thiscall SPIN_SLE_STR::QueryContent(class NLS_STR *)const",
    "protected: long __thiscall UI_MENU_EXT::BiasMenuIds(unsigned long)",
    "protected: void __thiscall BASE::ReportError(long)",
    "private: void __thiscall LOGON_HOURS_CONTROL::DrawFocusOnCornerButton(class DISPLAY_CONTEXT const &)const",
    "public: __thiscall LOGON_HOURS_CONTROL::LOGON_HOURS_CONTROL(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION)",
    "public: __thiscall ARRAY_CONTROLVAL_CID_PAIR::~ARRAY_CONTROLVAL_CID_PAIR(void)",
    "private: struct _UNICODE_STRING const * __thiscall LSA_REF_DOMAIN_MEM::QueryUnicodeName(unsigned long)const",
    "public: static void __stdcall POPUP::SetMsgMapTable(struct _MSGMAPENTRY *)",
    "private: long __thiscall SPIN_SLE_STR::Initialize(unsigned short const * * const,class OWNER_WINDOW *,unsigned int)",
    "public: class CONTROL_GROUP * __thiscall CONTROL_VALUE::QueryGroup(void)const",
    "public: __thiscall XYRECT::XYRECT(int,int,int,int)",
    "protected: virtual unsigned long __thiscall NT_FIND_ACCOUNT_DIALOG::QueryHelpContext(void)",
    "public: __thiscall DISPLAY_CONTEXT::DISPLAY_CONTEXT(class WINDOW *,struct HDC__ *)",
    "public: __thiscall EDIT_CONTROL::EDIT_CONTROL(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *,unsigned int)",
    "public: __thiscall SLIST_OF_ULC_API_BUFFER::~SLIST_OF_ULC_API_BUFFER(void)",
    "protected: virtual int __thiscall LB_COLUMN_HEADER::Dispatch(class EVENT const &,unsigned long *)",
    "protected: __thiscall APP_WINDOW::APP_WINDOW(class XYPOINT,class XYDIMENSION,class NLS_STR const &,class IDRESOURCE const &,class IDRESOURCE const &)",
    "public: void __thiscall CONTROL_VALUE::SetGroup(class CONTROL_GROUP *)",
    "public: long __thiscall MASK_MAP::BitsToString(class BITFIELD const &,class NLS_STR *,int,unsigned int *)",
    "private: void __thiscall LOGON_HOURS_CONTROL::MoveFocusUp(void)",
    "public: __thiscall NT_GROUP_ENUM_OBJ::~NT_GROUP_ENUM_OBJ(void)",
    "public: void __thiscall TIMER_BASE::TriggerNow(void)",
    "public: long __thiscall PROMPT_AND_CONNECT::Connect(void)",
    "public: class NLS_STR * __thiscall GET_FNAME_BASE_DLG::QueryHelpFile(void)",
    "protected: __thiscall BASE_ELLIPSIS::BASE_ELLIPSIS(enum ELLIPSIS_STYLE)",
    "public: __thiscall STRING_BITSET_PAIR::STRING_BITSET_PAIR(class NLS_STR const &,class BITFIELD const &,int)",
    "public: virtual __thiscall UI_EXT::~UI_EXT(void)",
    "public: __thiscall HIER_LBI_ITERATOR::HIER_LBI_ITERATOR(class HIER_LBI *,int)",
    "protected: virtual int __thiscall NT_USER_BROWSER_DIALOG::OnUserMessage(class EVENT const &)",
    "public: struct HFONT__ * __thiscall CONTROL_WINDOW::QueryFont(void)const",
    "private: int __thiscall MRU_COMBO::IsOldUNC(class NLS_STR const &)",
    "public: __thiscall ALIAS_STR::~ALIAS_STR(void)",
    "private: void __thiscall BASE_SET_FOCUS_DLG::OnDomainLBChange(void)",
    "protected: void __thiscall CANCEL_TASK_DIALOG::SetInTimer(int)",
    "protected: virtual unsigned long __thiscall BASE_SET_FOCUS_DLG::QueryHelpContext(void)",
    "public: __thiscall NT_USER_BROWSER_DIALOG::NT_USER_BROWSER_DIALOG(unsigned short const *,struct HWND__ *,unsigned short const *,unsigned long,unsigned long,unsigned short const *,unsigned long,unsigned long,unsigned long,class ADMIN_AUTHORITY const *)",
    "public: __thiscall WIN_ELLIPSIS::WIN_ELLIPSIS(class WINDOW *,enum ELLIPSIS_STYLE)",
    "public: __thiscall DEC_SLT::DEC_SLT(class OWNER_WINDOW *,unsigned int,unsigned int)",
    "public: struct _DOMAIN_DISPLAY_GROUP const * __thiscall NT_GROUP_ENUM_OBJ::QueryBufferPtr(void)const",
    "public: long __thiscall DOMAIN_FILL_THREAD::ExitThread(void)",
    "public: int __thiscall COMBOBOX::IsUserEdittable(void)const",
    "protected: __thiscall MENUITEM::MENUITEM(struct HMENU__ *,unsigned int)",
    "public: int __thiscall RADIO_GROUP::QueryCount(void)",
    "public: virtual void __thiscall SPIN_SLE_STR::Update(void)",
    "protected: virtual int __thiscall NT_FIND_ACCOUNT_DIALOG::OnCommand(class CONTROL_EVENT const &)",
    "public: int __thiscall WIN_TIME::QueryYear(void)const",
    "public: virtual int __thiscall STATIC_SPIN_ITEM::IsStatic(void)const",
    "public: __thiscall OWNINGWND::OWNINGWND(class OWNER_WINDOW const *)",
    "private: static class CLIENT_WINDOW * __stdcall CLIENT_WINDOW::HwndToPwnd(struct HWND__ *)",
    "public: __thiscall BROWSER_SUBJECT::~BROWSER_SUBJECT(void)",
    "public: virtual void __thiscall UI_EXT_MGR::RefreshExtensions(struct HWND__ *)",
    "private: int __thiscall SET_CONTROL::IsWithinHitZone(class LISTBOX *,class LISTBOX *,class XYPOINT const &)const",
    "public: __thiscall LISTBOX::LISTBOX(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,int,enum FontType,int)",
    "public: __thiscall ACTIVATION_EVENT::ACTIVATION_EVENT(unsigned int,unsigned int,long)",
    "public: void __thiscall WINDOW::SetSize(int,int,int)",
    "public: __thiscall MLT::~MLT(void)",
    "private: struct HICON__ * __thiscall SET_CONTROL::CalcAppropriateCursor(class LISTBOX *,class LISTBOX *,class XYPOINT const &)const",
    "public: int __thiscall AUDIT_CHECKBOXES::IsFailedChecked(void)",
    "public: virtual void __thiscall DM_DTE::Paint(struct HDC__ *,struct tagRECT const *)const",
    "public: int __thiscall INTL_PROFILE::IsMonthLZero(void)const",
    "public: void __thiscall EDIT_CONTROL::SetMaxLength(unsigned int)",
    "public: virtual unsigned long __thiscall SPIN_SLE_VALID_SECOND::QueryBigDecValue(void)const",
    "public: unsigned int __thiscall DM_DTE::QueryDisplayWidth(void)const",
    "public: __thiscall BLT_COMBOBOX::BLT_COMBOBOX(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,int,enum FontType)",
    "private: struct _UNICODE_STRING const * __thiscall LSA_TRANSLATED_NAME_MEM::QueryUnicodeName(unsigned long)const",
    "private: long __thiscall LB_COL_WIDTHS::StretchForFonts(struct HWND__ *,unsigned short const *)",
    "public: long __thiscall BASE_ELLIPSIS::QueryText(class NLS_STR *)const",
    "public: virtual unsigned short __thiscall LBI::QueryLeadingChar(void)const",
    "public: int __thiscall ARRAY_LIST_CONTROLVAL_CID_PAIR::Add(class CONTROLVAL_CID_PAIR const &)",
    "public: void * __thiscall SAM_OBJECT::QueryHandle(void)const",
    "public: static long __stdcall BLTIMP::AddHelpAssoc(struct HINSTANCE__ *,long,unsigned long,unsigned long)",
    "protected: virtual long __thiscall WIN32_THREAD::Main(void)",
    "public: __thiscall BROWSER_DOMAIN::BROWSER_DOMAIN(unsigned short const *,void *,int,int)",
    "public: void * __thiscall LSA_ACCT_DOM_INFO_MEM::QueryPSID(void)const",
    "protected: unsigned short const * __thiscall ATOM_BASE::AssignAux(unsigned short const *)",
    "public: long __thiscall ASSOCHWNDPDLG::QueryError(void)const",
    "public: long __thiscall GET_FNAME_BASE_DLG::SetFilter(class STRLIST &,unsigned long)",
    "protected: void __thiscall WIN32_HANDLE::SetHandle(void *)",
    "public: long __thiscall EVENT::SendTo(struct HWND__ *)const",
    "public: int __thiscall WIN_TIME::QueryHour(void)const",
    "public: int __thiscall COMBOBOX::IsDropDownList(void)const",
    "public: void __thiscall WINDOW::QuerySize(int *,int *)const",
    "protected: virtual unsigned long __thiscall DISPATCHER::OnQHitTest(class XYPOINT const &)",
    "public: unsigned long __thiscall NT_USER_BROWSER_DIALOG::QueryHelpContextGlobalMembership(void)",
    "public: __thiscall SYSTEM_MENU::SYSTEM_MENU(class PWND2HWND const &)",
    "public: __thiscall RESOURCE_PASSWORD_DIALOG::RESOURCE_PASSWORD_DIALOG(struct HWND__ *,unsigned short const *,unsigned int,unsigned long)",
    "public: long __thiscall BASE_ELLIPSIS::QueryText(unsigned short *,unsigned int)const",
    "public: class XYRECT & __thiscall XYRECT::Offset(int,int)",
    "public: int __thiscall BLT_TIME_SPIN_GROUP::QueryMin(void)const",
    "public: __thiscall HAS_MESSAGE_PUMP::HAS_MESSAGE_PUMP(void)",
    "protected: virtual void __thiscall BLT_TIME_SPIN_GROUP::RestoreValue(int)",
    "public: int __thiscall COMBOBOX::IsDropDown(void)const",
    "public: unsigned short const * __thiscall UI_DOMAIN::QueryName(void)const",
    "public: class SPIN_ITEM * __thiscall ITER_DL_SPIN_ITEM::Next(void)",
    "public: long __thiscall LSA_REF_DOMAIN_MEM::QueryName(unsigned long,class NLS_STR *)const",
    "public: long __thiscall LM_OLLB::CollapseDomain(void)",
    "protected: long __thiscall BASE_ELLIPSIS::SetEllipsisRight(class NLS_STR *)",
    "protected: virtual long __thiscall MAGIC_GROUP::OnGroupAction(class CONTROL_GROUP *)",
    "public: long __thiscall SET_OF_AUDIT_CATEGORIES::ApplyPermissionsToCheckBoxes(class BITFIELD *,class BITFIELD *)",
    "public: void __thiscall WINDOW::RepaintNow(void)",
    "private: class PUSH_BUTTON * __thiscall MSGPOPUP_DIALOG::QueryButton(unsigned int)",
    "protected: virtual void __thiscall CONTROL_VALUE::RestoreValue(int)",
    "public: class ARRAY_CONTROLVAL_CID_PAIR & __thiscall ARRAY_CONTROLVAL_CID_PAIR::operator=(class ARRAY_CONTROLVAL_CID_PAIR &)",
    "private: int __thiscall OPEN_DIALOG_BASE::WarnCloseMulti(void)",
    "public: __thiscall STATELBGRP::STATELBGRP(class STATELB *)",
    "public: long __thiscall DIALOG_WINDOW::Process(int *)",
    "public: long __thiscall NT_GROUP_BROWSER_LB::FillGlobalGroupMembers(class OS_SID const *,class SAM_DOMAIN const *,class SAM_DOMAIN const *,class LSA_POLICY *,unsigned short const *)",
    "public: void __thiscall SPIN_SLE_NUM::SetRange(unsigned long)",
    "protected: virtual long __thiscall FOCUSDLG_DATA_THREAD::PostMain(void)",
    "public: __thiscall MEMORY_DC::MEMORY_DC(class DEVICE_CONTEXT &)",
    "public: class OPEN_LBI_BASE * __thiscall OPEN_LBOX_BASE::QueryItem(void)const",
    "public: unsigned short const * __thiscall USER_BROWSER_LBI::QueryComment(void)const",
    "public: long __thiscall BROWSER_DOMAIN::RequestAccountData(void)",
    "protected: long __thiscall GET_FNAME_BASE_DLG::QueryErrorCode(void)const",
    "public: __thiscall EXPANDABLE_DIALOG::EXPANDABLE_DIALOG(unsigned short const *,struct HWND__ *,unsigned int,unsigned int,int)",
    "public: int __thiscall H_SPLITTER_BAR::QueryDesiredHeight(void)",
    "public: __thiscall IDRESOURCE::IDRESOURCE(unsigned short const *)",
    "private: void __thiscall DIALOG_WINDOW::LaunchHelp(void)",
    "public: __thiscall LOCAL_ATOM::LOCAL_ATOM(unsigned short const *)",
    "public: virtual int __thiscall LBI::Compare(class LBI const *)const",
    "protected: void __thiscall CONTROL_WINDOW::ReportError(long)",
    "public: class CONTROL_WINDOW * __thiscall CUSTOM_CONTROL::QueryControlWin(void)const",
    "public: long __thiscall WIN32_EVENT::Reset(void)",
    "private: virtual void __thiscall LAZY_LISTBOX::ReleaseLBI(class LBI *)",
    "public: __thiscall FOCUSDLG_DATA_THREAD::FOCUSDLG_DATA_THREAD(struct HWND__ *,unsigned long,enum SELECTION_TYPE,unsigned short const *,unsigned long)",
    "protected: int __thiscall LIST_CONTROL::AddItemData(void *)",
    "protected: long __thiscall SLE_STRLB_GROUP::OnRemove(void)",
    "private: void __thiscall MRU_COMBO::FillList(void)",
    "protected: virtual void __thiscall TIMER_CALLOUT::OnTimerNotification(unsigned int)",
    "public: __thiscall BASE_SET_FOCUS_DLG::BASE_SET_FOCUS_DLG(struct HWND__ * const,enum SELECTION_TYPE,unsigned long,unsigned short const *,unsigned long,unsigned short const *,unsigned long)",
    "public: __thiscall STATIC_SPIN_ITEM::~STATIC_SPIN_ITEM(void)",
    "protected: virtual int __thiscall DIALOG_WINDOW::IsPumpFinished(void)",
    "public: __thiscall LOC_LM_OBJ::~LOC_LM_OBJ(void)",
    "public: void __thiscall MAGIC_GROUP::SetSelection(unsigned int)",
    "public: class NT_GROUP_ENUM_OBJ const * __thiscall NT_GROUP_ENUM_ITER::operator()(long *,int)",
    "public: __thiscall BROWSER_SUBJECT_ITER::BROWSER_SUBJECT_ITER(class NT_USER_BROWSER_DIALOG *)",
    "public: virtual int __thiscall CHANGEABLE_SPIN_ITEM::CheckValid(void)",
    "public: unsigned long (__stdcall*__thiscall GET_FNAME_BASE_DLG::pfExtendedError(void)const )(void)",
    "protected: virtual int __thiscall DISPATCHER::Dispatch(class EVENT const &,unsigned long *)",
    "public: __thiscall DEC_SLT::~DEC_SLT(void)",
    "protected: struct _ULC_ENTRY * __thiscall USER_LBI_CACHE::QueryULCEntryPtr(int)",
    "protected: long __thiscall BASE_ELLIPSIS::SetEllipsisPath(class NLS_STR *)",
    "public: void __thiscall XYDIMENSION::SetWidth(unsigned int)",
    "public: class DISPLAY_MAP * __thiscall USER_BROWSER_LB::QueryDisplayMap(class USER_BROWSER_LBI const *)",
    "public: int __thiscall STATE2_BUTTON_CONTROL::QueryCheck(void)const",
    "protected: __thiscall STATE_BUTTON_CONTROL::STATE_BUTTON_CONTROL(class OWNER_WINDOW *,unsigned int)",
    "public: class OS_SID const * __thiscall SAM_DOMAIN::QueryOSSID(void)const",
    "public: virtual void __thiscall RADIO_GROUP::SetControlValueFocus(void)",
    "public: __thiscall MLT::MLT(class OWNER_WINDOW *,unsigned int)",
    "public: static void __stdcall HWND_DLGPTR_CACHE::Remove(struct HWND__ *)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnLMouseButtonDown(class MOUSE_EVENT const &)",
    "protected: virtual long __thiscall MAGIC_GROUP::OnUserAction(class CONTROL_WINDOW *,class CONTROL_EVENT const &)",
    "public: unsigned long __thiscall NT_USER_BROWSER_DIALOG::QueryFlags(void)const",
    "private: long __thiscall ELAPSED_TIME_CONTROL::SetSpinItemAccKey(class SPIN_ITEM *,class SLT &,int)",
    "public: __thiscall BIT_MAP::BIT_MAP(class IDRESOURCE const &)",
    "public: __thiscall SLIST_OF_ASSOCHCFILE::~SLIST_OF_ASSOCHCFILE(void)",
    "public: __thiscall ITER_SL_CLIENTDATA::ITER_SL_CLIENTDATA(class SLIST &)",
    "protected: class PUSH_BUTTON * __thiscall SLE_STRLB_GROUP::QueryRemoveButton(void)const",
    "public: unsigned short const * __thiscall OPEN_DIALOG_BASE::QueryServer(void)const",
    "public: __thiscall SPIN_SLE_STR::SPIN_SLE_STR(class OWNER_WINDOW *,unsigned int,long,long,class XYPOINT,class XYDIMENSION,unsigned long,int,unsigned int)",
    "public: class USER_BROWSER_LBI * __thiscall ITER_SL_USER_BROWSER_LBI::QueryProp(void)",
    "protected: virtual int __thiscall HAS_MESSAGE_PUMP::IsPumpFinished(void)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnOther(class EVENT const &)",
    "public: static long __stdcall BLT_MASTER_TIMER::QueryMasterTimer(class BLT_MASTER_TIMER * *)",
    "public: __thiscall SLIST_OF_STRING_BITSET_PAIR::SLIST_OF_STRING_BITSET_PAIR(int)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnCommand(class CONTROL_EVENT const &)",
    "public: __thiscall ITER_SL_UI_EXT::~ITER_SL_UI_EXT(void)",
    "public: int __thiscall USER_LBI_CACHE::BinarySearch(struct _DOMAIN_DISPLAY_USER *)",
    "public: class LBI * __thiscall BLT_LISTBOX::QueryItem(int)const",
    "public: unsigned long __thiscall CHANGEABLE_SPIN_ITEM::QueryLimit(void)const",
    "public: void __thiscall CONTROL_WINDOW::SetFont(struct HFONT__ *,int)",
    "protected: virtual long __thiscall BASE_SET_FOCUS_DLG::SetNetworkFocus(struct HWND__ *,unsigned short const *,enum FOCUS_CACHE_SETTING)",
    "public: __thiscall ITER_DL_SPIN_ITEM::ITER_DL_SPIN_ITEM(class DLIST &)",
    "public: class ASSOCHCFILE * __thiscall ITER_SL_ASSOCHCFILE::Next(void)",
    "long __stdcall TrimLeading(class NLS_STR *,unsigned short const *)",
    "protected: virtual int __thiscall CONTROL_WINDOW::CD_Measure(struct tagMEASUREITEMSTRUCT *)",
    "private: virtual int __thiscall MSG_DIALOG_BASE::OnOK(void)",
    "public: void __thiscall BLT_TIME_SPIN_GROUP::SetSecond(int)",
    "protected: virtual int __thiscall CANCEL_TASK_DIALOG::MayRun(void)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnEnter(class CONTROL_EVENT const &)",
    "protected: virtual int __thiscall LOGON_HOURS_CONTROL::OnMouseMove(class MOUSE_EVENT const &)",
    "public: __thiscall SLT_ELLIPSIS::~SLT_ELLIPSIS(void)",
    "public: struct HWND__ * __thiscall PWND2HWND::QueryHwnd(void)const",
    "protected: long __thiscall USER_BROWSER_LBI_CACHE::AddAliases(class SAM_DOMAIN *,unsigned short const *,int *)",
    "protected: void __thiscall DIALOG_WINDOW::Dismiss(unsigned int)",
    "public: __thiscall HIER_LISTBOX::HIER_LISTBOX(class OWNER_WINDOW *,unsigned int,int,enum FontType,int)",
    "protected: int __thiscall SPIN_GROUP::IsValidField(void)",
    "public: class USER_BROWSER_LBI * __thiscall ITER_SL_USER_BROWSER_LBI::Next(void)",
    "public: virtual void __thiscall CONTROL_WINDOW::SetControlValueFocus(void)",
    "public: __thiscall SUBJECT_BITMAP_BLOCK::SUBJECT_BITMAP_BLOCK(void)",
    "public: int __thiscall WIN_TIME::QuerySecond(void)const",
    "public: void __thiscall DISPLAY_TABLE::Paint(class LISTBOX *,struct HDC__ *,struct tagRECT const *)const",
    "public: static int __stdcall MENUITEM::ItemExists(struct HMENU__ *,unsigned int)",
    "public: int __thiscall BLT_LISTBOX::AddItem(class LBI *)",
    "public: __thiscall SLIST_OF_ASSOCHCFILE::SLIST_OF_ASSOCHCFILE(int)",
    "protected: struct tagOFNW * __thiscall GET_FNAME_BASE_DLG::QueryOFN(void)",
    "public: __thiscall ITER_CTRL::ITER_CTRL(class OWNER_WINDOW const *)",
    "public: __thiscall AUDIT_CHECKBOXES::~AUDIT_CHECKBOXES(void)",
    "public: void __thiscall USER_BROWSER_LB::SetCurrentCache(class USER_BROWSER_LBI_CACHE *)",
    "public: virtual void __thiscall OLLB_ENTRY::Paint(class LISTBOX *,struct HDC__ *,struct tagRECT const *,struct GUILTT_INFO *)const",
    "public: __thiscall CONTROL_TABLE::~CONTROL_TABLE(void)",
    "public: __thiscall STRING_LISTBOX::STRING_LISTBOX(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *,enum FontType)",
    "private: void __thiscall LOGON_HOURS_CONTROL::MoveFocusTo(int)",
    "protected: virtual void __thiscall LIST_CONTROL::SaveValue(int)",
    "public: __thiscall MENUITEM::MENUITEM(class APP_WINDOW *,unsigned int)",
    "public: void * __thiscall SAM_DOMAIN::QueryPSID(void)const",
    "public: void __thiscall ELAPSED_TIME_CONTROL::SetMinuteMin(long)",
    "protected: long __thiscall ACCOUNT_NAMES_MLE::ReplaceDomainIfBuiltIn(class NLS_STR *,int *)",
    "public: __thiscall LBI::LBI(void)",
    "public: void __thiscall ARRAY_LIST_CONTROLVAL_CID_PAIR::Clear(void)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnCloseReq(void)",
    "public: int __thiscall BLT_TIME_SPIN_GROUP::QueryHour(void)const",
    "public: virtual int __thiscall OLLB_ENTRY::Compare(class LBI const *)const",
    "public: virtual void __thiscall HIER_LBI::SetPelIndent(unsigned int)",
    "protected: virtual int __thiscall APP_WINDOW::OnQMinMax(class QMINMAX_EVENT &)",
    "public: int __thiscall STRING_LIST_CONTROL::AddItemIdemp(unsigned short const *)",
    "public: unsigned short const * __thiscall USER_BROWSER_LBI::QueryAccountName(void)const",
    "protected: long __thiscall BASE_ELLIPSIS::SetEllipsisCenter(class NLS_STR *)",
    "public: __thiscall CANCEL_TASK_DIALOG::CANCEL_TASK_DIALOG(unsigned int,struct HWND__ *,unsigned short const *,unsigned long,long,enum ELLIPSIS_STYLE)",
    "public: static class CLIENT_WINDOW * __stdcall ASSOCHWNDPWND::HwndToPwnd(struct HWND__ *)",
    "public: static void __stdcall LBI::OnDeleteItem(unsigned int,long)",
    "public: virtual int __thiscall USER_LBI_CACHE::IsItemAvailable(int)",
    "public: __thiscall SLIST_OF_CLIENTDATA::~SLIST_OF_CLIENTDATA(void)",
    "protected: __thiscall DIALOG_WINDOW::DIALOG_WINDOW(unsigned char const *,unsigned int,struct HWND__ *,int)",
    "public: long __thiscall LSA_TRANSLATED_NAME_MEM::QueryDomainIndex(unsigned long)const",
    "public: __thiscall STATIC_TEXT_CONTROL::STATIC_TEXT_CONTROL(class OWNER_WINDOW *,unsigned int)",
    "public: static long __stdcall BASE_ELLIPSIS::Init(void)",
    "protected: __thiscall APPLICATION::~APPLICATION(void)",
    "protected: virtual int __thiscall BASE_SET_FOCUS_DLG::OnCommand(class CONTROL_EVENT const &)",
    "public: void __thiscall USER_BROWSER_LBI::AliasUnicodeStrToDisplayName(struct _UNICODE_STRING *)",
    "public: long __thiscall BLT_LISTBOX::Resort(void)",
    "public: void __thiscall WIN_ELLIPSIS::SetSize(int,int)",
    "protected: __thiscall GET_FNAME_BASE_DLG::~GET_FNAME_BASE_DLG(void)",
    "public: __thiscall RITER_DL_SPIN_ITEM::RITER_DL_SPIN_ITEM(class DLIST &)",
    "public: static void __stdcall BLT_MASTER_TIMER::Term(void)",
    "public: class SLIST_OF_USER_BROWSER_LBI * __thiscall NT_USER_BROWSER_DIALOG::QuerySelectionList(void)",
    "public: unsigned int __thiscall EVENT::QueryMessage(void)const",
    "private: int __thiscall DISPLAY_MAP::GetTransColorIndex(unsigned long *,int)const",
    "protected: virtual int __thiscall SPIN_SLE_NUM::OnEnter(class CONTROL_EVENT const &)",
    "public: unsigned int __thiscall MENU_BASE::EnableItem(unsigned int,int,unsigned int)const",
    "protected: virtual int __thiscall LOGON_HOURS_CONTROL::OnKeyUp(class VKEY_EVENT const &)",
    "public: virtual long __thiscall SPIN_SLE_NUM::SaveCurrentData(void)",
    "public: int __thiscall LISTBOX::IsReadOnly(void)const",
    "public: unsigned short const * __thiscall NT_USER_BROWSER_DIALOG::QueryDCofPrimaryDomain(void)",
    "public: __thiscall CUSTOM_CONTROL::~CUSTOM_CONTROL(void)",
    "public: __thiscall SLIST_OF_TIMER_BASE::~SLIST_OF_TIMER_BASE(void)",
    "public: int __thiscall DEVICE_CONTEXT::ExtTextOutW(int,int,unsigned int,struct tagRECT const *,class NLS_STR const &,int *)",
    "public: int (__stdcall*__thiscall GET_FNAME_BASE_DLG::pfGetSaveFileName(void)const )(struct tagOFNW *)",
    "public: __thiscall HIER_LISTBOX::~HIER_LISTBOX(void)",
    "private: void __thiscall LOGON_HOURS_CONTROL::CalcRectForDay(class XYRECT *,int)const",
    "protected: virtual int __thiscall CONTROL_WINDOW::CD_Char(unsigned short,unsigned short)",
    "public: class STRING_LISTBOX * __thiscall SLE_STRLB_GROUP::QueryStrLB(void)const",
    "public: int __thiscall BLT_TIME_SPIN_GROUP::QuerySec(void)const",
    "public: long __thiscall SLE_STRIP::QueryText(class NLS_STR *,unsigned short const *,unsigned short const *)const",
    "protected: virtual void __thiscall H_SPLITTER_BAR::OnDragRelease(class XYPOINT const &)",
    "public: unsigned short const * __thiscall ADMIN_AUTHORITY::QueryServer(void)const",
    "private: int __thiscall HIER_LISTBOX::ExpandChildren(int,class HIER_LBI *)",
    "protected: virtual int (__cdecl*__thiscall USER_LBI_CACHE::QueryCompareMethod(void)const )(void const *,void const *)",
    "protected: virtual void __thiscall WINDOW_TIMER::DispatchTimer(void)",
    "public: class ADMIN_AUTHORITY * __thiscall BROWSER_DOMAIN::QueryAdminAuthority(void)const",
    "public: unsigned short const * __thiscall OLLB_ENTRY::QueryDomain(void)const",
    "public: long __thiscall WIN32_HANDLE::Close(void)",
    "public: int (__stdcall*__thiscall GET_FNAME_BASE_DLG::pfGetOpenFileName(void)const )(struct tagOFNW *)",
    "public: void __thiscall WINDOW::QueryClientRect(class XYRECT *)const",
    "public: class CONTROL_WINDOW * __thiscall ITER_CTRL::operator()(void)",
    "public: __thiscall FILE3_ENUM::~FILE3_ENUM(void)",
    "public: long __thiscall MASK_MAP::Add(struct US_IDS_PAIRS * const,unsigned short)",
    "public: __thiscall ELAPSED_TIME_CONTROL::ELAPSED_TIME_CONTROL(class OWNER_WINDOW *,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,class SLT &,long,long,long,class SLT &,class SLT &,long,long,long,long,int)",
    "public: void __thiscall XYPOINT::ScreenToClient(struct HWND__ *)",
    "public: __thiscall SPIN_SLT_SEPARATOR::~SPIN_SLT_SEPARATOR(void)",
    "public: class XYRECT & __thiscall XYRECT::CalcUnion(class XYRECT const &,class XYRECT const &)",
    "public: static long __stdcall BLT_MASTER_TIMER::Init(void)",
    "public: void __thiscall LOGON_HOURS_CONTROL::DoBanButton(void)",
    "public: long __thiscall EXPANDABLE_DIALOG::Process(unsigned int *)",
    "public: __thiscall OPEN_LBOX_BASE::~OPEN_LBOX_BASE(void)",
    "protected: int __thiscall CANCEL_TASK_DIALOG::IsFinished(void)const",
    "protected: void __thiscall EXPANDABLE_DIALOG::ShowArea(int)",
    "protected: virtual int __thiscall MSGPOPUP_DIALOG::OnOK(void)",
    "public: int __thiscall STLBITEM::NextState(void)",
    "public: unsigned int __thiscall RADIO_GROUP::QuerySelection(void)const",
    "public: int __thiscall INTL_PROFILE::IsDayLZero(void)const",
    "public: __thiscall PROGRESS_CONTROL::PROGRESS_CONTROL(class OWNER_WINDOW *,unsigned int,unsigned int,unsigned int)",
    "private: int __thiscall BLT_DATE_SPIN_GROUP::IsConstructionFail(class CONTROL_WINDOW *)",
    "protected: int __thiscall LIST_CONTROL::SetItemData(int,void *)",
    "public: __thiscall POPUP_MENU::POPUP_MENU(void)",
    "protected: long __thiscall NT_USER_BROWSER_DIALOG::OnAdd(void)",
    "public: virtual long __thiscall CONTROL_WINDOW::Validate(void)",
    "public: int __thiscall OUTLINE_LISTBOX::AddServer(unsigned short const *,unsigned short const *,unsigned short const *)",
    "protected: long __thiscall CUSTOM_CONTROL::SubClassWndProc(class EVENT const &)",
    "public: __thiscall SLIST_OF_USER_BROWSER_LBI::SLIST_OF_USER_BROWSER_LBI(int)",
    "public: long __thiscall WINDOW::QueryText(class NLS_STR *)const",
    "protected: virtual int __thiscall SPIN_SLE_STR::OnKeyDown(class VKEY_EVENT const &)",
    "public: long __thiscall ICON_CONTROL::SetPredefinedIcon(class IDRESOURCE const &)",
    "public: void __thiscall AUTO_CURSOR::TurnOn(void)",
    "public: int __thiscall LIST_CONTROL::IsCombo(void)const",
    "public: __thiscall USER_BROWSER_LBI::USER_BROWSER_LBI(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,void * const,enum UI_SystemSid,enum _SID_NAME_USE,unsigned long)",
    "public: void __thiscall BLT_TIME_SPIN_GROUP::SetHour(int)",
    "protected: virtual int __thiscall DIALOG_WINDOW::MayRun(void)",
    "public: __thiscall MRU_COMBO::MRU_COMBO(class OWNER_WINDOW *,unsigned int,unsigned short const *,unsigned short const *,int,unsigned int)",
    "public: __thiscall SLE_FONT::~SLE_FONT(void)",
    "public: enum OUTLINE_LB_LEVEL __thiscall OLLB_ENTRY::QueryType(void)const",
    "BltCCWndProc",
    "public: class NLS_STR __thiscall BASE_ELLIPSIS::QueryOriginalStr(void)const",
    "public: __thiscall WINDOW::WINDOW(unsigned short const *,unsigned long,class WINDOW const *,unsigned int)",
    "public: enum ELLIPSIS_STYLE __thiscall BASE_ELLIPSIS::QueryStyle(void)const",
    "public: long __thiscall BROWSER_DOMAIN::SetAsTargetDomain(void)",
    "protected: virtual long __thiscall SPIN_GROUP::OnUserAction(class CONTROL_WINDOW *,class CONTROL_EVENT const &)",
    "public: __thiscall XYRECT::XYRECT(class XYPOINT,class XYDIMENSION)",
    "public: __thiscall TEXT_CONTROL::TEXT_CONTROL(class OWNER_WINDOW *,unsigned int)",
    "public: long __thiscall MENU_BASE::AppendSeparator(void)const",
    "public: class UI_EXT * __thiscall UI_EXT_MGR::FindExtensionByName(unsigned short const *)",
    "protected: virtual void __thiscall LAZY_LISTBOX::OnDeleteItem(class LBI *)",
    "private: int __thiscall LOGON_HOURS_CONTROL::CalcButtonFromPoint(class XYPOINT)const",
    "public: void __thiscall MAGIC_GROUP::Enable(int)",
    "private: int __thiscall LOGON_HOURS_CONTROL::DrawOneDayBar(class PAINT_DISPLAY_CONTEXT &,int,int,int,struct HBRUSH__ *)const",
    "protected: int __thiscall USER_BROWSER_LB::CD_Char_HAWforHawaii(unsigned short,unsigned short,class HAW_FOR_HAWAII_INFO *)",
    "unsigned int __stdcall DisplayGenericError(class OWNINGWND const &,long,long,unsigned short const *,enum MSG_SEVERITY)",
    "private: void __thiscall DISPLAY_MAP::SetBitmapBits(unsigned char *,int,int,unsigned int)",
    "public: static struct HICON__ * __stdcall CURSOR::Set(struct HICON__ *)",
    "public: void __thiscall WINDOW::ClearText(void)",
    "public: unsigned int __thiscall BITFIELD::QueryCount(void)const",
    "public: __thiscall ARRAY_LIST_CONTROLVAL_CID_PAIR::ARRAY_LIST_CONTROLVAL_CID_PAIR(unsigned int)",
    "public: __thiscall USRLB_NT_GROUP_ENUM::USRLB_NT_GROUP_ENUM(class SAM_DOMAIN const *)",
    "private: virtual long __thiscall SPIN_SLE_STR::GetAccKey(class NLS_STR *)",
    "public: virtual struct HBRUSH__ * __thiscall CONTROL_WINDOW::OnCtlColor(struct HDC__ *,struct HWND__ *,unsigned int *)",
    "public: class DMID_DTE * __thiscall SUBJECT_BITMAP_BLOCK::QueryDmDte(int,int,int)",
    "public: static long __stdcall BLT::MapLastError(long)",
    "public: __thiscall ICON_CONTROL::ICON_CONTROL(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,class IDRESOURCE const &,unsigned long,unsigned short const *)",
    "private: void __thiscall H_SPLITTER_BAR::InvertDragBar(class XYPOINT const &)",
    "public: __thiscall DEC_STR::~DEC_STR(void)",
    "protected: virtual int __thiscall ARROW_BUTTON::OnLMouseButtonDown(class MOUSE_EVENT const &)",
    "public: int __thiscall LIST_CONTROL::IsItemSelected(unsigned int)const",
    "public: long __thiscall WIN32_SYNC_BASE::Wait(unsigned int)",
    "protected: virtual int __thiscall CONTROL_WINDOW::CD_VKey(unsigned short,unsigned short)",
    "public: __thiscall DEC_SLT::DEC_SLT(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *,unsigned int)",
    "protected: virtual int __thiscall CONTROL_WINDOW::CD_Draw(struct tagDRAWITEMSTRUCT *)",
    "public: long __thiscall BLT_TIME_SPIN_GROUP::SetCurrentTime(void)",
    "public: void __thiscall WINDOW::ShowFirst(void)",
    "EnumUserBrowserSelection",
    "protected: virtual int __thiscall LOGON_HOURS_CONTROL::OnLMouseButtonUp(class MOUSE_EVENT const &)",
    "public: __thiscall COMBOBOX::COMBOBOX(class OWNER_WINDOW *,unsigned int,unsigned int)",
    "protected: unsigned short const * __thiscall BASE_SET_FOCUS_DLG::QuerySuppliedHelpFile(void)",
    "public: class XYPOINT __thiscall SPIN_GROUP::QueryPos(void)",
    "public: virtual __thiscall NT_LOCALGROUP_BROWSER_DIALOG::~NT_LOCALGROUP_BROWSER_DIALOG(void)",
    "public: long __thiscall NT_USER_BROWSER_DIALOG::AddSelectedUserBrowserLBIs(class USER_BROWSER_LB *,int,int)",
    "public: class XYRECT & __thiscall XYRECT::operator=(class XYRECT const &)",
    "public: static long __stdcall BLTIMP::AddClient(struct HINSTANCE__ *,unsigned int,unsigned int,unsigned int,unsigned int)",
    "public: int __thiscall STLBITEM::SetState(int)",
    "public: int __thiscall ACCELTABLE::Translate(class WINDOW const *,struct tagMSG *)const",
    "private: virtual unsigned short __thiscall LOCAL_ATOM::W_AddAtom(unsigned short const *)const",
    "public: unsigned long __thiscall DEVICE_CONTEXT::GetTextColor(void)const",
    "protected: static int __cdecl USER_BROWSER_LBI_CACHE::CompareCacheLBIs(struct _ULC_ENTRY_BASE const *,struct _ULC_ENTRY_BASE const *)",
    "protected: virtual int __thiscall SPIN_ITEM::OnChar(class CHAR_EVENT const &)",
    "public: struct HINSTANCE__ * __thiscall ASSOCHCFILE::QueryModule(void)const",
    "public: int __thiscall COMBOBOX::IsSimple(void)const",
    "public: unsigned short __thiscall ATOM_BASE::QueryHandle(void)const",
    "public: void __thiscall HIER_LISTBOX::CollapseItem(int,int)",
    "private: void __thiscall LOGON_HOURS_CONTROL::DoButtonClick(int)",
    "public: virtual int __thiscall USER_BROWSER_LBI_CACHE::AddItem(class LBI *)",
    "protected: virtual int __thiscall DIALOG_WINDOW::OnOK(void)",
    "private: long __thiscall POPUP_MENU::CtAux(struct HMENU__ *)",
    "protected: virtual int __thiscall USER_BROWSER_LB::CD_Char(unsigned short,unsigned short)",
    "protected: virtual int __thiscall DIALOG_WINDOW::IsValid(void)",
    "protected: virtual unsigned int __thiscall EDIT_CONTROL::QueryEventEffects(class CONTROL_EVENT const &)",
    "protected: virtual int __thiscall SPIN_ITEM::OnFocus(class FOCUS_EVENT const &)",
    "protected: virtual int __thiscall NT_GROUP_BROWSER_DIALOG::OnCommand(class CONTROL_EVENT const &)",
    "public: int __thiscall LIST_CONTROL::DeleteItem(int)",
    "public: void __thiscall GRAPHICAL_BUTTON_WITH_DISABLE::SetSelected(int)",
    "protected: void __thiscall RADIO_GROUP::SetSelectionDontNotifyGroups(unsigned int)",
    "protected: virtual int __thiscall LM_OLLB::CD_Char(unsigned short,unsigned short)",
    "public: virtual void __thiscall STR_DTE_ELLIPSIS::Paint(struct HDC__ *,struct tagRECT const *)const",
    "public: void __thiscall BLT_TIME_SPIN_GROUP::SetMinute(int)",
    "protected: virtual int __thiscall STATELB::CD_Char(unsigned short,unsigned short)",
    "public: __thiscall MEMORY_DC::~MEMORY_DC(void)",
    "public: __thiscall NT_FIND_ACCOUNT_DIALOG::~NT_FIND_ACCOUNT_DIALOG(void)",
    "public: long __thiscall SPIN_ITEM::SetAccKey(long)",
    "public: unsigned long __thiscall ACCOUNT_NAMES_MLE::QueryFlags(void)const",
    "public: int __thiscall STRING_LIST_CONTROL::InsertItem(int,unsigned short const *)",
    "public: long __thiscall LSA_TRANSLATED_NAME_MEM::QueryName(unsigned long,class NLS_STR *)const",
    "public: int __thiscall WINDOW::QueryTextSize(void)const",
    "public: long __thiscall LOGON_HOURS_CONTROL::SetHours(class LOGON_HOURS_SETTING const *)",
    "public: void __thiscall WINDOW::Enable(int)",
    "public: __thiscall BUTTON_CONTROL::~BUTTON_CONTROL(void)",
    "public: void __thiscall DISPATCHER::ReleaseMouse(void)",
    "public: __thiscall DISPLAY_MAP::~DISPLAY_MAP(void)",
    "public: virtual void __thiscall CHANGEABLE_SPIN_ITEM::Update(void)",
    "protected: void __thiscall CONTROL_GROUP::CVRestoreValue(class CONTROL_VALUE *,int)",
    "public: __thiscall CONTROLVAL_CID_PAIR::CONTROLVAL_CID_PAIR(void)",
    "public: int __thiscall ACTIVATION_EVENT::IsActivating(void)const",
    "public: __thiscall ITER_SL_TIMER_BASE::~ITER_SL_TIMER_BASE(void)",
    "public: class CONTROL_GROUP * __thiscall SPIN_ITEM::QueryGroup(void)",
    "private: void __thiscall LOGON_HOURS_CONTROL::CalcRectForCorner(class XYRECT *)const",
    "public: class SLIST_OF_USER_BROWSER_LBI * __thiscall NT_USER_BROWSER_DIALOG::QuerySelectionCache(void)",
    "public: __thiscall BROWSER_DOMAIN_CB::BROWSER_DOMAIN_CB(class OWNER_WINDOW *,unsigned int)",
    "public: class USER_BROWSER_LBI * __thiscall USER_BROWSER_LB::QueryItem(void)const",
    "public: struct HWND__ * __thiscall WINDOW::QueryOwnerHwnd(void)const",
    "protected: void __thiscall ACCOUNT_NAMES_MLE::RemoveDuplicateAccountNames(class STRLIST *)",
    "public: __thiscall COMBOBOX::~COMBOBOX(void)",
    "public: __thiscall LB_COL_WIDTHS::LB_COL_WIDTHS(struct HWND__ *,struct HINSTANCE__ *,class IDRESOURCE const &,unsigned int,unsigned int)",
    "protected: virtual long __thiscall ORDER_GROUP::OnUserAction(class CONTROL_WINDOW *,class CONTROL_EVENT const &)",
    "protected: virtual long __thiscall CLIENT_WINDOW::DispatchMessageW(class EVENT const &)",
    "public: __thiscall STANDALONE_SET_FOCUS_DLG::STANDALONE_SET_FOCUS_DLG(struct HWND__ *,class NLS_STR *,unsigned long,enum SELECTION_TYPE,unsigned long,unsigned short const *,unsigned short const *,unsigned long)",
    "public: class DTE * & __thiscall DISPLAY_TABLE::operator[](unsigned int)",
    "public: static class DIALOG_WINDOW * __stdcall ASSOCHWNDPDLG::HwndToPdlg(struct HWND__ *)",
    "public: struct HDC__ * __thiscall DEVICE_CONTEXT::QueryHdc(void)const",
    "public: long __thiscall STRING_LIST_CONTROL::QueryItemText(unsigned short *,int,int)const",
    "public: class ADMIN_AUTHORITY * __thiscall DOMAIN_FILL_THREAD::QueryAdminAuthority(void)const",
    "public: long __thiscall BASE_ELLIPSIS::SetEllipsis(unsigned short *)",
    "protected: void __thiscall DIALOG_WINDOW::DismissMsg(long,unsigned int)",
    "public: unsigned long __thiscall DEVICE_CONTEXT::SetTextColor(unsigned long)",
    "public: unsigned long __thiscall PROC_INSTANCE::QueryProc(void)const",
    "protected: int __thiscall CANCEL_TASK_DIALOG::IsInTimer(void)const",
    "public: virtual void __thiscall UI_EXT_MGR::ActivateExtension(struct HWND__ *,unsigned long)",
    "public: void __thiscall CONSOLE_ELLIPSIS::SetSize(int)",
    "public: int __thiscall MENUITEM::IsEnabled(void)const",
    "public: static unsigned long __stdcall POPUP::SetHelpContextBase(unsigned long)",
    "protected: __thiscall BUTTON_CONTROL::BUTTON_CONTROL(class OWNER_WINDOW *,unsigned int)",
    "private: void __thiscall PROGRESS_CONTROL::CtAux(void)",
    "public: __thiscall MENU_BASE::~MENU_BASE(void)",
    "public: long __thiscall SPIN_ITEM::QueryAccKey(class NLS_STR *)",
    "public: int __thiscall OWNER_WINDOW::QueryAttribute(unsigned long)",
    "public: __thiscall BLT_BACKGROUND_EDIT::~BLT_BACKGROUND_EDIT(void)",
    "protected: long __thiscall USER_BROWSER_LBI_CACHE::AddWellKnownSids(class ADMIN_AUTHORITY *,unsigned long,int *)",
    "public: long __thiscall DEVICE_COMBO::QueryDevice(class NLS_STR *)const",
    "protected: virtual unsigned int __thiscall BUTTON_CONTROL::QueryEventEffects(class CONTROL_EVENT const &)",
    "public: long __thiscall LM_OLLB::ExpandDomain(int)",
    "protected: __thiscall MENU_BASE::MENU_BASE(struct HMENU__ *)",
    "public: unsigned int const * __thiscall BROWSER_DOMAIN_CB::QueryColWidthArray(void)const",
    "public: class XYRECT & __thiscall XYRECT::Inflate(int,int)",
    "private: void __thiscall TIMER_BASE::SetNewTimeDue(void)",
    "public: class CONTROL_ENTRY * __thiscall CONTROL_TABLE::QueryItem(unsigned int)const",
    "public: int __thiscall WINDOW::IsEnabled(void)const",
    "public: long __thiscall DOMAIN_FILL_THREAD::UnRequestAccountData(void)",
    "public: void __thiscall LIST_CONTROL::RemoveSelection(void)",
    "protected: void __thiscall FOCUS_CHECKBOX::EraseFocusRect(class DEVICE_CONTEXT *,struct tagRECT *)",
    "protected: long __thiscall SLE_STRLB_GROUP::OnAdd(void)",
    "public: __thiscall POPUP_MENU::POPUP_MENU(struct HMENU__ *)",
    "public: class USER_BROWSER_LBI * __thiscall USER_BROWSER_LB::QueryItem(int)const",
    "protected: class CONTROL_WINDOW * __thiscall OWNER_WINDOW::CidToCtrlPtr(unsigned int)const",
    "public: unsigned short const * __thiscall ASSOCHCFILE::QueryHelpFile(void)const",
    "public: int __thiscall DEVICE_CONTEXT::ExtTextOutW(int,int,unsigned int,struct tagRECT const *,unsigned short const *,int,int *)",
    "public: __thiscall ITER_SL_ASSOCHCFILE::ITER_SL_ASSOCHCFILE(class SLIST &)",
    "public: class OLLB_ENTRY * __thiscall OUTLINE_LISTBOX::QueryItem(int)const",
    "public: class SPIN_ITEM * __thiscall RITER_DL_SPIN_ITEM::Next(void)",
    "public: long __thiscall SPIN_GROUP::AddAssociation(class SPIN_ITEM *)",
    "public: virtual void __thiscall MULTILINE_STR_DTE::Paint(struct HDC__ *,struct tagRECT const *)const",
    "public: long __thiscall POPUP_MENU::Attach(class PWND2HWND const &)",
    "public: void __thiscall CLIENT_WINDOW::CaptureMouse(void)",
    "protected: __thiscall APP_WINDOW::~APP_WINDOW(void)",
    "protected: virtual int __thiscall USER_BROWSER_LBI_CACHE::Compare(class LBI const *,class LBI const *)const",
    "private: long __thiscall LM_OLLB::FillServers(unsigned short const *,unsigned int *)",
    "public: unsigned int const * __thiscall USER_BROWSER_LB::QueryColWidthArray(void)const",
    "public: virtual class LBI * __thiscall USER_LBI_CACHE::QueryItem(int)",
    "protected: virtual long __thiscall HIER_LISTBOX::AddChildren(class HIER_LBI *)",
    "public: struct HWND__ * __thiscall WINDOW::QueryHwnd(void)const",
    "public: virtual __thiscall NT_GLOBALGROUP_BROWSER_DIALOG::~NT_GLOBALGROUP_BROWSER_DIALOG(void)",
    "protected: virtual unsigned long __thiscall MSGPOPUP_DIALOG::QueryHelpContext(void)",
    "protected: virtual int __thiscall DISPATCHER::OnCloseReq(void)",
    "public: int __thiscall XYRECT::CalcHeight(void)const",
    "long __stdcall QueryWinIni(class NLS_STR const &,unsigned short const *,class NLS_STR *,class NLS_STR const &)",
    "public: long __thiscall MASK_MAP::EnumBits(class BITFIELD *,int *,int *,int)",
    "protected: virtual int __thiscall LISTBOX::CD_Draw(struct tagDRAWITEMSTRUCT *)",
    "protected: void __thiscall FORWARDING_BASE::ReportError(long)",
    "private: void __thiscall H_SPLITTER_BAR::ShowSpecialCursor(int)",
    "public: static class DISPATCHER * __stdcall ASSOCHWNDDISP::HwndToPdispatch(struct HWND__ *)",
    "public: void __thiscall BLT_DATE_SPIN_GROUP::SetMonth(int)",
    "private: long __thiscall SET_CONTROL::DoAddOrRemove(class LISTBOX *,class LISTBOX *)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnChange(class CONTROL_EVENT const &)",
    "public: __thiscall TIMER_WINDOW::~TIMER_WINDOW(void)",
    "public: long __thiscall SPIN_ITEM::SetAccKey(class NLS_STR const &)",
    "public: __thiscall PUSH_BUTTON::PUSH_BUTTON(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long)",
    "public: class DISPLAY_MAP * __thiscall DM_DTE::QueryDisplayMap(void)const",
    "public: long __thiscall BLT_LISTBOX::CalcSingleLineHeight(void)",
    "public: long __thiscall MENU_BASE::Delete(unsigned int,unsigned int)const",
    "public: __thiscall BROWSER_DOMAIN::~BROWSER_DOMAIN(void)",
    "public: long __thiscall NT_GROUP_BROWSER_LB::Fill(void * const *,unsigned long,class SAM_DOMAIN const *,class LSA_POLICY *,unsigned short const *)",
    "protected: virtual void __thiscall CONTROL_WINDOW::SetTabStop(int)",
    "public: __thiscall DISPLAY_MAP::DISPLAY_MAP(unsigned int)",
    "protected: __thiscall GET_FNAME_BASE_DLG::GET_FNAME_BASE_DLG(class OWNER_WINDOW *,unsigned short const *,unsigned long)",
    "public: __thiscall SLIST_OF_UI_EXT::SLIST_OF_UI_EXT(int)",
    "void __stdcall WriteWinIni(class NLS_STR const &,unsigned short const *,class NLS_STR const &,class NLS_STR const &)",
    "public: long __thiscall OPEN_LBOX_BASE::Refresh(void)",
    "public: static struct HINSTANCE__ * __stdcall BLT::CalcHmodString(long)",
    "public: __thiscall LM_OLLB::LM_OLLB(class OWNER_WINDOW *,unsigned int,enum SELECTION_TYPE,unsigned long)",
    "public: virtual int __thiscall LBI::Compare_HAWforHawaii(class NLS_STR const &)const",
    "private: long __thiscall LOGON_HOURS_CONTROL::CalcSizes(class XYDIMENSION)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnKeyUp(class VKEY_EVENT const &)",
    "protected: virtual int __thiscall H_SPLITTER_BAR::OnResize(class SIZE_EVENT const &)",
    "public: virtual __thiscall FOCUSDLG_DATA_THREAD::~FOCUSDLG_DATA_THREAD(void)",
    "protected: int __thiscall OUTLINE_LISTBOX::AddItem(enum OUTLINE_LB_LEVEL,int,unsigned short const *,unsigned short const *,unsigned short const *)",
    "void __stdcall MLTextPaint(struct HDC__ *,unsigned short const *,struct tagRECT const *)",
    "protected: virtual int __thiscall SPIN_SLE_NUM::OnFocus(class FOCUS_EVENT const &)",
    "public: int __thiscall POPUP::Show(void)",
    "public: __thiscall SPIN_SLE_STR::~SPIN_SLE_STR(void)",
    "public: static void __stdcall POPUP::ResetCaption(void)",
    "public: virtual unsigned int __thiscall METALLIC_STR_DTE::QueryLeftMargin(void)const",
    "private: void __thiscall LOGON_HOURS_CONTROL::DoButtonUpVisuals(int)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnPaintReq(void)",
    "protected: virtual long __thiscall LAZY_LISTBOX::CD_Guiltt(int,class NLS_STR *)",
    "private: void __thiscall GRAPHICAL_BUTTON::CtAux(unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: __thiscall SCREEN_DC::SCREEN_DC(void)",
    "public: long __thiscall BROWSER_DOMAIN_LBI_PB::GetQualifiedDomainName(class NLS_STR *)",
    "public: __thiscall ASSOCHWNDDISP::ASSOCHWNDDISP(struct HWND__ *,class DISPATCHER const *)",
    "public: __thiscall CONTROL_EVENT::CONTROL_EVENT(unsigned int,unsigned int,long)",
    "private: void __thiscall MAGIC_GROUP::ActivateAssocControls(unsigned int,unsigned int,class CONTROL_VALUE *)",
    "public: int __thiscall COMBOBOX::SetMaxLength(unsigned int)",
    "public: void __thiscall XYRECT::ConvertScreenToClient(struct HWND__ *)",
    "public: virtual void __thiscall OWNER_DRAW_STR_DTE::Paint(struct HDC__ *,struct tagRECT const *)const",
    "private: class LISTBOX * __thiscall SET_CONTROL::OtherListbox(class LISTBOX *)const",
    "public: int __thiscall STRING_LIST_CONTROL::FindItem(unsigned short const *,int)const",
    "public: __thiscall DM_DTE::DM_DTE(class DISPLAY_MAP *)",
    "public: void __thiscall XYDIMENSION::SetHeight(unsigned int)",
    "public: long __thiscall DOMAIN_FILL_THREAD::RequestAccountData(void)",
    "private: void __thiscall LOGON_HOURS_CONTROL::DrawSelectionOnCells(class DISPLAY_CONTEXT const &,int,int)const",
    "protected: virtual int __thiscall NT_FIND_ACCOUNT_DIALOG::OnOK(void)",
    "public: long __thiscall BLT_MASTER_TIMER::InsertTimer(class TIMER_BASE *)",
    "public: void __thiscall WINDOW::SetPos(class XYPOINT,int,class WINDOW *)",
    "public: int __thiscall WINDOW::IsChild(void)const",
    "public: unsigned int __thiscall LOGON_HOURS_CONTROL::QueryXForRow(int)",
    "public: long __thiscall SPIN_SLE_NUM::SetSaveValue(unsigned long)",
    "protected: __thiscall ATOM_BASE::~ATOM_BASE(void)",
    "public: struct HBITMAP__ * __thiscall GRAPHICAL_BUTTON_WITH_DISABLE::QueryMain(void)const",
    "public: int __thiscall DEVICE_CONTEXT::TextOutW(unsigned short const *,int,int,int,struct tagRECT const *)const",
    "public: __thiscall LM_MESSAGE::~LM_MESSAGE(void)",
    "protected: virtual long __thiscall CONTROL_WINDOW::OnUserAction(class CONTROL_EVENT const &)",
    "public: long __thiscall ELAPSED_TIME_CONTROL::QuerySecondValue(void)const",
    "public: class TIMER_BASE * __thiscall ITER_SL_TIMER_BASE::Next(void)",
    "public: long __thiscall DOMAIN_FILL_THREAD::WaitForAdminAuthority(unsigned long,int *)const",
    "public: __thiscall SET_OF_AUDIT_CATEGORIES::SET_OF_AUDIT_CATEGORIES(class OWNER_WINDOW *,unsigned int,unsigned int,unsigned int,class MASK_MAP *,class BITFIELD *,class BITFIELD *,int)",
    "public: __thiscall CUSTOM_CONTROL::CUSTOM_CONTROL(class CONTROL_WINDOW *)",
    "protected: void __thiscall FOCUS_CHECKBOX::DrawFocusRect(class DEVICE_CONTEXT *,struct tagRECT *,int)",
    "public: static void __stdcall BLTIMP::Term(void)",
    "public: __thiscall HIER_LBI_ITERATOR::~HIER_LBI_ITERATOR(void)",
    "protected: virtual long __thiscall STANDALONE_SET_FOCUS_DLG::SetNetworkFocus(struct HWND__ *,unsigned short const *,enum FOCUS_CACHE_SETTING)",
    "public: __thiscall GRAPHICAL_BUTTON_WITH_DISABLE::GRAPHICAL_BUTTON_WITH_DISABLE(class OWNER_WINDOW *,unsigned int,unsigned int,unsigned int,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long)",
    "public: struct _POLICY_ACCOUNT_DOMAIN_INFO const * __thiscall LSA_ACCT_DOM_INFO_MEM::QueryPtr(void)const",
    "public: long __thiscall EDIT_CONTROL::SetSaveValue(unsigned short const *)",
    "protected: virtual int __thiscall DIALOG_WINDOW::OnDlgDeactivation(class ACTIVATION_EVENT const &)",
    "public: unsigned int __thiscall NLS_STR::QueryAllocSize(void)const",
    "protected: virtual int __thiscall APP_WINDOW::MayShutdown(void)",
    "protected: long __thiscall MENU_BASE::W_Modify(void const *,unsigned int,unsigned int,unsigned int)const",
    "public: int __thiscall AUDIT_CHECKBOXES::IsSuccessChecked(void)",
    "public: virtual void __thiscall SPIN_GROUP::RestoreValue(int)",
    "protected: long __thiscall MENU_BASE::W_Append(void const *,unsigned int,unsigned int)const",
    "public: __thiscall ITER_SL_UI_EXT::ITER_SL_UI_EXT(class SLIST &)",
    "public: virtual void __thiscall COUNTED_STR_DTE::Paint(struct HDC__ *,struct tagRECT const *)const",
    "public: __thiscall POPUP_MENU::POPUP_MENU(class PWND2HWND const &)",
    "public: int __thiscall ACCOUNT_NAMES_MLE::IsSingleSelect(void)const",
    "public: long __thiscall MENU_BASE::QueryItemText(unsigned short *,unsigned int,unsigned int,unsigned int)const",
    "protected: virtual void __thiscall DIALOG_WINDOW::OnSysColorChange(void)",
    "public: __thiscall CANCEL_TASK_DIALOG::~CANCEL_TASK_DIALOG(void)",
    "protected: virtual int __thiscall WIN_ELLIPSIS::QueryMaxCharWidth(void)",
    "protected: int __thiscall NT_USER_BROWSER_DIALOG::IsDomainComboDropped(void)const",
    "public: long __thiscall MASK_MAP::EnumStrings(class NLS_STR *,int *,int *,int)",
    "protected: void __thiscall ENUM_OBJ_BASE::SetBufferPtr(unsigned char const *)",
    "public: unsigned int const * __thiscall STATELB::QueryColData(void)",
    "public: virtual long __thiscall SET_CONTROL::DoRemove(void)",
    "public: __thiscall XYRECT::operator struct tagRECT const *(void)const",
    "public: __thiscall SPIN_SLE_NUM::~SPIN_SLE_NUM(void)",
    "public: int __thiscall BLT_LISTBOX::FindItem(class LBI const &)const",
    "public: int __thiscall BLT_TIME_SPIN_GROUP::IsValid(void)",
    "public: int __thiscall BASE_SET_FOCUS_DLG::InRasMode(void)const",
    "public: long __thiscall NLS_STR::InsertParams(class NLS_STR const &)",
    "public: __thiscall MLT_FONT::MLT_FONT(class OWNER_WINDOW *,unsigned int,enum FontType)",
    "public: __thiscall PASSWORD_CONTROL::PASSWORD_CONTROL(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *,unsigned int)",
    "public: void __thiscall DISPLAY_TABLE::Paint(class LISTBOX *,struct HDC__ *,struct tagRECT const *,struct GUILTT_INFO *)const",
    "public: __thiscall ITER_DL_SPIN_ITEM::~ITER_DL_SPIN_ITEM(void)",
    "public: __thiscall CONSOLE_ELLIPSIS::CONSOLE_ELLIPSIS(enum ELLIPSIS_STYLE,int)",
    "public: unsigned int __thiscall SET_OF_AUDIT_CATEGORIES::QuerySLTBaseCID(void)",
    "public: __thiscall USRLB_NT_GROUP_ENUM::~USRLB_NT_GROUP_ENUM(void)",
    "private: unsigned short const * __thiscall MSGPOPUP_DIALOG::QueryIcon(enum MSG_SEVERITY)",
    "public: long __thiscall SLIST_OF_USER_BROWSER_LBI::Append(class USER_BROWSER_LBI const *)",
    "protected: void __thiscall MENU_BASE::SetHandle(struct HMENU__ *)",
    "protected: virtual unsigned int __thiscall LIST_CONTROL::QueryEventEffects(class CONTROL_EVENT const &)",
    "public: struct HMENU__ * __thiscall UI_MENU_EXT::QueryMenuHandle(void)const",
    "protected: virtual long __thiscall CANCEL_TASK_DIALOG::DoOneItem(unsigned long,int *,int *,long *)",
    "public: unsigned long __thiscall OPEN_LBI_BASE::QueryPermissions(void)const",
    "public: __thiscall SLIST_OF_ULC_API_BUFFER::SLIST_OF_ULC_API_BUFFER(int)",
    "protected: virtual void __thiscall STATE_BUTTON_CONTROL::RestoreValue(int)",
    "public: __thiscall PROC_INSTANCE::~PROC_INSTANCE(void)",
    "protected: virtual int __thiscall USER_BROWSER_LBI_CACHE::Compare(class LBI const *,struct _DOMAIN_DISPLAY_USER const *)const",
    "public: int __thiscall SPIN_GROUP::IsActive(void)const",
    "public: __thiscall ICON_CONTROL::~ICON_CONTROL(void)",
    "public: class CONTROL_WINDOW * __thiscall CONTROL_TABLE::CidToCtrlPtr(unsigned int)const",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnDblClick(class CONTROL_EVENT const &)",
    "protected: virtual int __thiscall DIALOG_WINDOW::OnCommand(class CONTROL_EVENT const &)",
    "public: class XYRECT & __thiscall XYRECT::operator+=(class XYRECT const &)",
    "protected: __thiscall LIST_CONTROL::LIST_CONTROL(class OWNER_WINDOW *,unsigned int,int)",
    "public: __thiscall OWNER_WINDOW::OWNER_WINDOW(unsigned short const *,unsigned long,class WINDOW const *)",
    "public: void __thiscall WINDOW::SetRedraw(int)",
    "private: int __thiscall LOGON_HOURS_CONTROL::DrawAllButtons(class PAINT_DISPLAY_CONTEXT &)const",
    "protected: virtual long __thiscall STATELBGRP::OnUserAction(class CONTROL_WINDOW *,class CONTROL_EVENT const &)",
    "public: __thiscall CONTROL_WINDOW::CONTROL_WINDOW(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *)",
    "public: unsigned int __thiscall BLT_SCRATCH::QuerySize(void)const",
    "public: virtual void __thiscall USER_BROWSER_LBI::Paint(class LISTBOX *,struct HDC__ *,struct tagRECT const *,struct GUILTT_INFO *)const",
    "public: __thiscall OLLB_ENTRY::OLLB_ENTRY(enum OUTLINE_LB_LEVEL,int,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: __thiscall BLT_BACKGROUND_EDIT::BLT_BACKGROUND_EDIT(class OWNER_WINDOW *,unsigned int)",
    "private: long __thiscall STRING_LIST_CONTROL::QueryItemTextAux(unsigned short *,int)const",
    "public: static void __stdcall CURSOR::SetPos(class XYPOINT const &)",
    "protected: virtual int __thiscall NT_USER_BROWSER_DIALOG::OnCommand(class CONTROL_EVENT const &)",
    "public: __thiscall BLT_LISTBOX::BLT_LISTBOX(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,int,enum FontType,int)",
    "public: int __thiscall OUTLINE_LISTBOX::AddDomain(unsigned short const *,unsigned short const *,int)",
    "private: void __thiscall SPIN_SLE_NUM::DisplayNum(unsigned long)",
    "public: int __thiscall BROWSER_DOMAIN::IsTargetDomain(void)const",
    "public: __thiscall OUTLINE_LISTBOX::~OUTLINE_LISTBOX(void)",
    "public: int __thiscall HEAP_BASE::QueryCount(void)const",
    "public: int __thiscall HIER_LBI::QueryExpanded(void)const",
    "protected: virtual int __thiscall EXPANDABLE_DIALOG::OnCommand(class CONTROL_EVENT const &)",
    "public: struct _UNICODE_STRING const * __thiscall NT_GROUP_ENUM_OBJ::QueryUnicodeGroup(void)const",
    "public: int __thiscall DISPLAY_CONTEXT::QueryTextWidth(class NLS_STR const &)const",
    "public: __thiscall ICANON_SLE::~ICANON_SLE(void)",
    "public: virtual unsigned short const * __thiscall NT_USER_BROWSER_DIALOG::QueryHelpFile(unsigned long)",
    "protected: virtual unsigned long __thiscall DIALOG_WINDOW::QueryHelpContext(void)",
    "public: virtual unsigned short __thiscall BROWSER_DOMAIN_LBI::QueryLeadingChar(void)const",
    "public: static void __stdcall BLT::TermDLL(void)",
    "int __stdcall MsgPopup(class OWNINGWND const &,long,enum MSG_SEVERITY,unsigned int,unsigned short const *,unsigned int)",
    "BltWndProc",
    "public: static void __stdcall BLTIMP::RemoveHelpAssoc(struct HINSTANCE__ *,unsigned long)",
    "public: int __thiscall XYRECT::operator==(class XYRECT const &)const",
    "public: virtual struct HWND__ * __thiscall DISPATCHER::QueryRobustHwnd(void)const",
    "public: __thiscall ACCOUNT_NAMES_MLE::ACCOUNT_NAMES_MLE(class OWNER_WINDOW *,unsigned int,unsigned short const *,class NT_USER_BROWSER_DIALOG *,int,unsigned long,enum FontType)",
    "public: long __thiscall BASE_SET_FOCUS_DLG::Process(unsigned int *)",
    "protected: virtual int __thiscall HAS_MESSAGE_PUMP::FilterMessage(struct tagMSG *)",
    "public: struct HFONT__ * __thiscall FONT::QueryHandle(void)const",
    "protected: int __thiscall HEAP_BASE::QueryParent(int)const",
    "public: class NLS_STR * __thiscall ITER_SL_NLS_STR::operator()(void)",
    "private: static int __stdcall MSGPOPUP_DIALOG::Msg2HC(long,unsigned long *)",
    "public: void __thiscall DLIST_OF_SPIN_ITEM::Clear(void)",
    "public: virtual int __thiscall BROWSER_DOMAIN_LBI::Compare(class LBI const *)const",
    "public: class USER_BROWSER_LB * __thiscall NT_FIND_ACCOUNT_DIALOG::QuerySourceListbox(void)",
    "public: __thiscall ULC_API_BUFFER::ULC_API_BUFFER(struct _DOMAIN_DISPLAY_USER *,unsigned long)",
    "public: __thiscall HIER_LISTBOX::HIER_LISTBOX(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,int,enum FontType,int)",
    "public: long __thiscall BASE_ELLIPSIS::SetEllipsis(class NLS_STR *)",
    "public: unsigned long __thiscall WINDOW::Command(unsigned int,unsigned int,long)const",
    "public: void __thiscall AUDIT_CHECKBOXES::Enable(int,int)",
    "protected: virtual void __thiscall APP_WINDOW::OnShutdown(void)",
    "protected: void * __thiscall DEVICE_CONTEXT::SelectObject(void *)",
    "public: long __thiscall GET_FNAME_BASE_DLG::QueryFilename(class NLS_STR *)const",
    "private: void __thiscall WIN32_THREAD::SetState(enum _THREAD_STATE)",
    "public: long __thiscall BROWSER_DOMAIN::GetQualifiedDomainName(class NLS_STR *)",
    "public: long __thiscall DLIST_OF_SPIN_ITEM::Append(class SPIN_ITEM * const)",
    "protected: virtual int __thiscall ARROW_BUTTON::OnTimer(class TIMER_EVENT const &)",
    "public: static int __stdcall LBI::OnCompareItem(unsigned int,long)",
    "protected: virtual long __thiscall SET_CONTROL::BLTMoveItems(class BLT_LISTBOX *,class BLT_LISTBOX *)",
    "public: __thiscall ICON_CONTROL::ICON_CONTROL(class OWNER_WINDOW *,unsigned int)",
    "protected: virtual int __thiscall SPIN_SLE_NUM_VALID::IsValid(void)",
    "private: virtual long __thiscall LOCAL_ATOM::W_QueryString(unsigned short *,unsigned int)const",
    "public: void __thiscall AUTO_CURSOR::TurnOff(void)",
    "public: void __thiscall MLE::SetFmtLines(int)",
    "public: long __thiscall MENU_BASE::Modify(unsigned short const *,unsigned int,struct HMENU__ *,unsigned int)const",
    "public: int __thiscall STRING_LIST_CONTROL::AddItem(unsigned short const *)",
    "public: int __thiscall HIER_LISTBOX::DeleteItem(int,int)",
    "public: void __thiscall SLIST_OF_TIMER_BASE::Clear(void)",
    "protected: virtual int __thiscall APPLICATION::Run(void)",
    "protected: virtual long __thiscall BLT_LISTBOX::CD_Guiltt(int,class NLS_STR *)",
    "long __stdcall TrimTrailing(class NLS_STR *,unsigned short const *)",
    "protected: long __thiscall USER_BROWSER_LBI_CACHE::AddAliases(class ADMIN_AUTHORITY *,unsigned short const *,int *)",
    "protected: virtual int __thiscall LOGON_HOURS_CONTROL::OnLMouseButtonDown(class MOUSE_EVENT const &)",
    "public: struct _UNICODE_STRING const * __thiscall NT_GROUP_ENUM_OBJ::QueryUnicodeComment(void)const",
    "private: unsigned long const * __thiscall SAM_RID_MEM::QueryPtr(void)const",
    "public: __thiscall METER::METER(class OWNER_WINDOW *,unsigned int,unsigned long)",
    "protected: virtual long __thiscall RADIO_GROUP::OnUserAction(class CONTROL_WINDOW *,class CONTROL_EVENT const &)",
    "public: int __thiscall NT_USER_BROWSER_DIALOG::AreUsersShown(void)const",
    "protected: __thiscall APP_WINDOW::APP_WINDOW(class NLS_STR const &,class IDRESOURCE const &,class IDRESOURCE const &)",
    "private: int __thiscall LOGON_HOURS_CONTROL::DrawGridSetting(class PAINT_DISPLAY_CONTEXT &)const",
    "public: __thiscall MLE::MLE(class OWNER_WINDOW *,unsigned int,unsigned int)",
    "protected: virtual int __thiscall DISPATCHER::OnChar(class CHAR_EVENT const &)",
    "public: void __thiscall ITER_CTRL::Reset(void)",
    "public: unsigned int __thiscall MENU_BASE::QueryItemState(unsigned int,unsigned int)const",
    "public: virtual void __thiscall SLE::IndicateError(long)",
    "public: __thiscall SERVER1_ENUM::~SERVER1_ENUM(void)",
    "protected: unsigned int __thiscall HAS_MESSAGE_PUMP::RunMessagePump(void)",
    "public: __thiscall MLE::MLE(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *,unsigned int)",
    "protected: __thiscall FORWARDING_BASE::FORWARDING_BASE(class BASE *)",
    "int __stdcall MsgPopup(class OWNINGWND const &,long,enum MSG_SEVERITY)",
    "public: class NLS_STR * __thiscall ITER_SL_NLS_STR::QueryProp(void)",
    "public: class UI_EXT * __thiscall UI_EXT_MGR::FindExtensionByDelta(unsigned long)",
    "public: long __thiscall BROWSER_SUBJECT::QueryQualifiedName(class NLS_STR *,class NLS_STR const *,int)const",
    "protected: class NT_USER_BROWSER_DIALOG * __thiscall NT_GROUP_BROWSER_DIALOG::QueryUserBrowserDialog(void)",
    "public: long __thiscall POPUP_MENU::Destroy(void)",
    "public: class XYRECT & __thiscall XYRECT::AdjustBottom(int)",
    "private: static class DIALOG_WINDOW * __stdcall DIALOG_WINDOW::HwndToPwnd(struct HWND__ *)",
    "protected: void __thiscall FORWARDING_BASE::ResetError(void)",
    "private: class LBI * __thiscall USER_LBI_CACHE::W_GetLBI(int)",
    "public: __thiscall SYSMENUITEM::SYSMENUITEM(class OWNER_WINDOW *,unsigned int)",
    "public: void __thiscall PROGRESS_CONTROL::Advance(int)",
    "public: __thiscall STRING_BITSET_PAIR::~STRING_BITSET_PAIR(void)",
    "private: void __thiscall BLT_LISTBOX::SetItem(int,class LBI *)",
    "public: class OPEN_LBI_BASE * __thiscall OPEN_LBOX_BASE::QueryItem(int)const",
    "public: __thiscall SLE::SLE(class OWNER_WINDOW *,unsigned int,unsigned int)",
    "public: int __thiscall LIST_CONTROL::QueryCaretIndex(void)const",
    "public: static void __stdcall BLT::DeregisterHelpFile(struct HINSTANCE__ *,unsigned long)",
    "public: static long __stdcall BLTIMP::Init(void)",
    "public: long __thiscall BROWSER_SUBJECT::SetUserBrowserLBI(class USER_BROWSER_LBI *)",
    "public: static long __stdcall DISPLAY_TABLE::CalcColumnWidths(unsigned int *,unsigned int,class OWNER_WINDOW *,unsigned int,int)",
    "public: __thiscall SERVER_ENUM::~SERVER_ENUM(void)",
    "public: __thiscall WINDOW::WINDOW(struct HWND__ *)",
    "public: long __thiscall SLIST_OF_STRING_BITSET_PAIR::Append(class STRING_BITSET_PAIR const *)",
    "public: class NLS_STR * __thiscall ITER_SL_NLS_STR::Next(void)",
    "public: __thiscall BROWSER_DOMAIN_LB::~BROWSER_DOMAIN_LB(void)",
    "private: enum _THREAD_STATE __thiscall WIN32_THREAD::QueryState(void)const",
    "private: class NLS_STR * __thiscall POPUP::LoadMessage(long,int)",
    "public: long __thiscall MASK_MAP::StringToBits(class NLS_STR const &,class BITFIELD *,int,unsigned int *)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnDefocus(class FOCUS_EVENT const &)",
    "public: __thiscall H_SPLITTER_BAR::~H_SPLITTER_BAR(void)",
    "private: void __thiscall LOGON_HOURS_CONTROL::MoveFocusLeft(void)",
    "public: int __thiscall DEVICE_CONTEXT::TextOutW(unsigned short const *,int,int,int)const",
    "public: __thiscall OWNINGWND::OWNINGWND(struct HWND__ *)",
    "public: __thiscall SET_OF_AUDIT_CATEGORIES::~SET_OF_AUDIT_CATEGORIES(void)",
    "public: void __thiscall WINDOW::Invalidate(int)",
    "public: int __thiscall SET_CONTROL::HandleOnLMouseButtonDown(class LISTBOX *,class CUSTOM_CONTROL *,class MOUSE_EVENT const &)",
    "public: void __thiscall XYPOINT::ClientToScreen(struct HWND__ *)",
    "public: long __thiscall SPIN_SLE_NUM_VALID::SetFieldName(long)",
    "public: unsigned int __thiscall CONTROLVAL_CID_PAIR::QueryRBCID(void)const",
    "public: void __thiscall SLIST_OF_CLIENTDATA::Clear(void)",
    "public: void __thiscall LBI_HEAP::Adjust(void)",
    "public: unsigned short const * __thiscall IDRESOURCE::QueryPsz(void)const",
    "public: int __thiscall XYRECT::IsEmpty(void)const",
    "public: void __thiscall DEVICE_CONTEXT::LineTo(int,int)const",
    "public: long __thiscall LSA_TRANSLATED_SID_MEM::QueryDomainIndex(unsigned long)const",
    "public: long __thiscall LOGON_HOURS_CONTROL::QueryHours(class LOGON_HOURS_SETTING *)const",
    "public: __thiscall HEX_STR::~HEX_STR(void)",
    "public: class BROWSE_DOMAIN_INFO * __thiscall ITER_SL_BROWSE_DOMAIN_INFO::Next(void)",
    "public: long __thiscall APP_WINDOW::GetPlacement(struct tagWINDOWPLACEMENT *)const",
    "protected: virtual void __thiscall BLT_TIME_SPIN_GROUP::SetControlValueFocus(void)",
    "public: int __thiscall DEVICE_CONTEXT::TextOutW(class NLS_STR const &,class XYPOINT,struct tagRECT const *)const",
    "public: __thiscall USER_BROWSER_LBI_CACHE::USER_BROWSER_LBI_CACHE(void)",
    "public: __thiscall SPIN_SLE_NUM_VALID::SPIN_SLE_NUM_VALID(class OWNER_WINDOW *,unsigned int,unsigned long,unsigned long,unsigned long,int)",
    "public: virtual void __thiscall BROWSER_DOMAIN_LBI_PB::Paint(class LISTBOX *,struct HDC__ *,struct tagRECT const *,struct GUILTT_INFO *)const",
    "public: struct HBITMAP__ * __thiscall GRAPHICAL_BUTTON_WITH_DISABLE::QueryMainInvert(void)const",
    "public: __thiscall HAW_FOR_HAWAII_INFO::~HAW_FOR_HAWAII_INFO(void)",
    "public: long __thiscall NT_USER_BROWSER_DIALOG::SetAndFillErrorText(long,int)",
    "public: unsigned short const * __thiscall NT_USER_BROWSER_DIALOG::QueryServerResourceLivesOn(void)const",
    "protected: void __thiscall CONTROL_GROUP::CVSaveValue(class CONTROL_VALUE *,int)",
    "public: long __thiscall BLT_LISTBOX::ReplaceItem(int,class LBI *,class LBI * *)",
    "protected: long __thiscall NT_USER_BROWSER_DIALOG::OnSearch(void)",
    "protected: virtual long __thiscall CONTROL_GROUP::OnGroupAction(class CONTROL_GROUP *)",
    "public: __thiscall SLT::SLT(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *)",
    "protected: int __thiscall HEAP_BASE::IsRoot(int)const",
    "public: __thiscall SPIN_SLE_NUM_VALID::SPIN_SLE_NUM_VALID(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned long,unsigned long,unsigned long,int)",
    "public: class BROWSE_DOMAIN_INFO const * __thiscall BROWSE_DOMAIN_ENUM::Next(void)",
    "public: static struct HICON__ * __stdcall CURSOR::Query(void)",
    "public: static unsigned int __stdcall METALLIC_STR_DTE::QueryVerticalMargins(void)",
    "public: void __thiscall APP_WINDOW::Close(void)",
    "public: unsigned long __thiscall NT_USER_BROWSER_DIALOG::QueryHelpContextSearch(void)",
    "public: __thiscall LBI_HEAP::LBI_HEAP(int,int)",
    "public: long __thiscall BROWSER_SUBJECT_ITER::Next(class BROWSER_SUBJECT * *)",
    "public: void __thiscall SPIN_GROUP::SetModified(int)",
    "public: int __thiscall WIN32_THREAD::QueryPriority(void)",
    "protected: void __thiscall GET_FNAME_BASE_DLG::SetEnableHook(int)",
    "public: __thiscall GRAPHICAL_BUTTON::GRAPHICAL_BUTTON(class OWNER_WINDOW *,unsigned int,unsigned short const *,unsigned short const *,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *)",
    "public: unsigned int __thiscall KEY_EVENT::QueryRepeat(void)const",
    "public: unsigned int __thiscall LISTBOX::QueryHorizontalExtent(void)const",
    "protected: virtual int __thiscall ARROW_BUTTON::OnLMouseButtonUp(class MOUSE_EVENT const &)",
    "public: long __thiscall USER_BROWSER_LBI_CACHE::AddUsers(class ADMIN_AUTHORITY *,unsigned short const *,int,int *)",
    "public: class STATELB * __thiscall STATELBGRP::QueryLb(void)",
    "public: __thiscall DISPLAY_CONTEXT::DISPLAY_CONTEXT(struct HWND__ *)",
    "long __stdcall CreateLBIsFromSids(void * const *,unsigned long,void * const,class LSA_POLICY *,unsigned short const *,class USER_BROWSER_LB *,class SLIST_OF_USER_BROWSER_LBI *)",
    "public: __thiscall SPIN_SLE_VALID_SECOND::~SPIN_SLE_VALID_SECOND(void)",
    "protected: int __thiscall HEAP_BASE::QueryRightSibling(int)const",
    "public: int __thiscall BROWSER_DOMAIN::IsWinNTMachine(void)const",
    "protected: virtual int __thiscall WIN_ELLIPSIS::QueryStrLen(unsigned short const *,int)",
    "public: __thiscall RADIO_BUTTON::~RADIO_BUTTON(void)",
    "public: static void __stdcall BLT::Term(struct HINSTANCE__ *)",
    "public: long __thiscall STRING_LIST_CONTROL::QueryItemText(class NLS_STR *,int)const",
    "public: virtual void __thiscall CHANGEABLE_SPIN_ITEM::operator-=(unsigned long)",
    "public: unsigned int __thiscall XYDIMENSION::QueryHeight(void)const",
    "public: __thiscall RESOURCE_STR::RESOURCE_STR(long)",
    "public: __thiscall SLE::~SLE(void)",
    "protected: virtual void __thiscall NT_LOCALGROUP_BROWSER_DIALOG::UpdateButtonState(void)",
    "public: __thiscall CONTROLVAL_CID_PAIR::CONTROLVAL_CID_PAIR(unsigned int,class CONTROL_VALUE *)",
    "public: void __thiscall HIER_LISTBOX::CollapseItem(class HIER_LBI *,int)",
    "public: struct HWND__ * __thiscall DLGLOAD::QueryHwnd(void)const",
    "private: void __thiscall LOGON_HOURS_CONTROL::MoveFocusRight(void)",
    "public: virtual int __thiscall USER_LBI_CACHE::AddItem(class LBI *)",
    "public: int __thiscall ARRAY_LIST_CONTROLVAL_CID_PAIR::Find(class CONTROLVAL_CID_PAIR const &)const",
    "public: virtual long __thiscall SET_CONTROL::DoAdd(void)",
    "public: virtual __thiscall OPEN_LBI_BASE::~OPEN_LBI_BASE(void)",
    "public: void __thiscall SLIST_OF_STRING_BITSET_PAIR::Clear(void)",
    "public: long __thiscall WIN32_EVENT::Set(void)",
    "public: __thiscall OPEN_DIALOG_BASE::OPEN_DIALOG_BASE(struct HWND__ *,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned short const *,unsigned short const *,class OPEN_LBOX_BASE *)",
    "public: int __thiscall LBITREE::AddNode(class HIER_LBI *,class HIER_LBI *,int)",
    "protected: virtual int __thiscall DISPATCHER::OnLMouseButtonDown(class MOUSE_EVENT const &)",
    "public: __thiscall SCREEN_DC::~SCREEN_DC(void)",
    "public: unsigned int __thiscall QMOUSEACT_EVENT::QueryHitTest(void)const",
    "public: unsigned short const * __thiscall BROWSER_DOMAIN::QueryDisplayName(void)const",
    "private: int __thiscall OPEN_DIALOG_BASE::WarnCloseSingle(class OPEN_LBI_BASE *)",
    "protected: static int __stdcall OWNER_WINDOW::OnLBIMessages(unsigned int,unsigned int,long)",
    "public: enum _SID_NAME_USE __thiscall LSA_TRANSLATED_NAME_MEM::QueryUse(unsigned long)const",
    "public: struct HMENU__ * __thiscall MENU_BASE::QueryHandle(void)const",
    "protected: long __thiscall ACCOUNT_NAMES_MLE::CheckLookedUpNames(unsigned short * *,class LSA_TRANSLATED_SID_MEM *,class STRLIST *,class NLS_STR *,unsigned short const *,long *)",
    "public: __thiscall LBI_HEAP::~LBI_HEAP(void)",
    "protected: void __thiscall NT_USER_BROWSER_DIALOG::SetDomainComboDropFlag(int)",
    "protected: __thiscall BASE::BASE(void)",
    "public: void __thiscall SLT_ELLIPSIS::ResetStyle(enum ELLIPSIS_STYLE)",
    "public: class SLIST_OF_UI_EXT * __thiscall UI_EXT_MGR::QueryExtensions(void)",
    "public: int __thiscall APP_WINDOW::SetIcon(class IDRESOURCE const &)",
    "public: int __thiscall DEVICE_CONTEXT::DrawTextW(class NLS_STR const &,struct tagRECT *,unsigned int)",
    "public: class FILE3_ENUM_OBJ const * __thiscall FILE3_ENUM_ITER::operator()(long *,int)",
    "public: long __thiscall LIST_CONTROL::QuerySelItems(int *,int)const",
    "public: long __thiscall SLE_STRIP::QueryText(unsigned short *,unsigned int,unsigned short const *,unsigned short const *)const",
    "public: unsigned int __thiscall LISTBOX::QueryScrollPos(void)const",
    "public: unsigned short const * __thiscall USER_BROWSER_LBI::QueryFullName(void)const",
    "protected: virtual int __thiscall BASE_SET_FOCUS_DLG::OnOK(void)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnSelect(class CONTROL_EVENT const &)",
    "public: __thiscall WIN32_HANDLE::~WIN32_HANDLE(void)",
    "public: class XYPOINT __thiscall WINDOW::QueryPos(void)const",
    "public: __thiscall LOGON_HOURS_CONTROL::LOGON_HOURS_CONTROL(class OWNER_WINDOW *,unsigned int)",
    "private: void __thiscall MSGPOPUP_DIALOG::PlaceButtons(void)",
    "public: __thiscall UI_EXT_MGR::~UI_EXT_MGR(void)",
    "protected: int __thiscall HEAP_BASE::QueryFirstLeaf(void)const",
    "public: class OS_SID const * __thiscall BROWSER_SUBJECT::QueryDomainSid(void)const",
    "protected: void __thiscall OPEN_DIALOG_BASE::Refresh(void)",
    "public: __thiscall ICON_CONTROL::ICON_CONTROL(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *)",
    "public: __thiscall SPIN_SLE_NUM::SPIN_SLE_NUM(class OWNER_WINDOW *,unsigned int,unsigned long,unsigned long,unsigned long,int,unsigned int)",
    "public: void __thiscall RADIO_GROUP::SetSelection(unsigned int)",
    "public: __thiscall PROMPT_FOR_ANY_DC_DLG::PROMPT_FOR_ANY_DC_DLG(class PWND2HWND &,unsigned long,class NLS_STR const *,class NLS_STR *)",
    "public: __thiscall SERVER1_ENUM_ITER::~SERVER1_ENUM_ITER(void)",
    "protected: __thiscall ENUM_OBJ_BASE::~ENUM_OBJ_BASE(void)",
    "public: void __thiscall WINDOW::SetText(class NLS_STR const &)",
    "public: __thiscall STATELB::~STATELB(void)",
    "protected: virtual int __thiscall WIN_ELLIPSIS::QueryStrLen(class NLS_STR)",
    "public: unsigned short const * __thiscall UI_DOMAIN::QueryPDC(void)const",
    "public: __thiscall PUSH_BUTTON::PUSH_BUTTON(class OWNER_WINDOW *,unsigned int)",
    "protected: virtual long __thiscall SLE_STRLB_GROUP::OnUserAction(class CONTROL_WINDOW *,class CONTROL_EVENT const &)",
    "private: void __thiscall SPIN_SLE_STR::SetStr(long)",
    "public: int __thiscall STRING_LIST_CONTROL::FindItemExact(class NLS_STR const &)const",
    "public: void __thiscall XYPOINT::SetY(int)",
    "public: class OLLB_ENTRY * __thiscall OUTLINE_LISTBOX::QueryItem(void)const",
    "public: long __thiscall MAGIC_GROUP::AddAssociation(unsigned int,class CONTROL_VALUE *)",
    "public: unsigned long __thiscall NT_USER_BROWSER_DIALOG::QueryHelpContextLocalMembership(void)",
    "private: long __thiscall ICON_CONTROL::W_SetIcon(class IDRESOURCE const &,int)",
    "protected: __thiscall ATOM_BASE::ATOM_BASE(void)",
    "public: int __thiscall DISPATCHER::DoChar(class CHAR_EVENT const &)",
    "public: int __thiscall OLLB_ENTRY::QueryLevel(void)const",
    "protected: void __thiscall NT_USER_BROWSER_DIALOG::EnableBrowsing(int)",
    "public: __thiscall TIMER_EVENT::TIMER_EVENT(unsigned int,unsigned int,long)",
    "public: int __thiscall DISPLAY_CONTEXT::QueryTextWidth(unsigned short const *,unsigned int)const",
    "protected: void __thiscall CONTROL_TABLE::ReportError(void)",
    "public: void __thiscall WINDOW::Center(struct HWND__ *)",
    "public: int __thiscall COUNTED_STR_DTE::QueryCount(void)const",
    "public: int __thiscall INTL_PROFILE::QueryMonthPos(void)const",
    "public: virtual int __thiscall USER_BROWSER_LBI::Compare_HAWforHawaii(class NLS_STR const &)const",
    "public: __thiscall BLT_TIME_SPIN_GROUP::BLT_TIME_SPIN_GROUP(class OWNER_WINDOW *,class INTL_PROFILE const &,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int)",
    "protected: static unsigned short const * __stdcall CONTROL_WINDOW::QueryStaticClassName(void)",
    "protected: void __thiscall WINDOW::SetHwnd(struct HWND__ *)",
    "public: class AUDIT_CHECKBOXES * __thiscall SET_OF_AUDIT_CATEGORIES::QueryAuditCheckBox(int)",
    "public: unsigned short const * __thiscall BROWSER_DOMAIN::QueryLsaLookupName(void)const",
    "public: long __thiscall ASSOCHWNDPWND::QueryError(void)const",
    "protected: virtual void __thiscall EDIT_CONTROL::SaveValue(int)",
    "public: __thiscall GRAPHICAL_BUTTON_WITH_DISABLE::GRAPHICAL_BUTTON_WITH_DISABLE(class OWNER_WINDOW *,unsigned int,unsigned int,unsigned int,unsigned int)",
    "public: __thiscall BLT_DATE_SPIN_GROUP::~BLT_DATE_SPIN_GROUP(void)",
    "public: unsigned int __thiscall CONTROL_EVENT::QueryCode(void)const",
    "public: void __thiscall ELAPSED_TIME_CONTROL::SetSecondFieldName(long)",
    "public: __thiscall PWND2HWND::PWND2HWND(struct HWND__ *)",
    "public: long __thiscall LM_OLLB::ToggleDomain(int)",
    "public: int __thiscall USER_BROWSER_LBI::CompareAux(class LBI const *)const",
    "public: long __thiscall MENU_BASE::QueryItemText(class NLS_STR *,unsigned int,unsigned int)const",
    "public: long __thiscall LSA_PRIMARY_DOM_INFO_MEM::QueryName(class NLS_STR *)const",
    "public: virtual unsigned short const * __thiscall LOCAL_ATOM::operator=(unsigned short const *)",
    "public: void __thiscall BLT_MASTER_TIMER::RemoveTimer(class TIMER_BASE *)",
    "public: __thiscall NLS_STR::operator unsigned short const *(void)const",
    "private: long __thiscall MSG_DIALOG_BASE::GetAndSendText(void)",
    "private: static int __stdcall POPUP::MapButton(unsigned int)",
    "protected: virtual unsigned long __thiscall H_SPLITTER_BAR::OnQHitTest(class XYPOINT const &)",
    "public: unsigned int __thiscall SCROLLBAR::QueryPos(void)const",
    "public: class LBI * __thiscall LBI_HEAP::RemoveTopItem(void)",
    "public: class XYPOINT __thiscall MOUSE_EVENT::QueryPos(void)const",
    "private: int __thiscall USER_LBI_CACHE::W_GrowCache(int)",
    "public: void __thiscall MRU_COMBO::SaveText(void)",
    "protected: virtual int __thiscall LOGON_HOURS_CONTROL::OnPaintReq(void)",
    "public: __thiscall TIMER_WINDOW::TIMER_WINDOW(class BLT_MASTER_TIMER *)",
    "public: void __thiscall GRAPHICAL_BUTTON::SetStatus(struct HBITMAP__ *)",
    "public: __thiscall WIN32_SYNC_BASE::~WIN32_SYNC_BASE(void)",
    "public: virtual unsigned int __thiscall UI_EXT_MGR::LoadExtensions(void)",
    "public: void __thiscall LM_OLLB::FillAllInfo(class BROWSE_DOMAIN_ENUM *,class SERVER1_ENUM *,unsigned short const *)",
    "public: static class XYPOINT __stdcall CURSOR::QueryPos(void)",
    "public: __thiscall BASE_ELLIPSIS::~BASE_ELLIPSIS(void)",
    "public: void __thiscall COMBOBOX::SelectString(void)",
    "public: int __thiscall WIN_TIME::QueryDay(void)const",
    "public: __thiscall BROWSER_SUBJECT::BROWSER_SUBJECT(void)",
    "protected: void __thiscall BASE::ResetError(void)",
    "protected: virtual void __thiscall STATE_BUTTON_CONTROL::SaveValue(int)",
    "public: __thiscall EXPANDABLE_DIALOG::~EXPANDABLE_DIALOG(void)",
    "private: void __thiscall H_SPLITTER_BAR::ShowDragBar(class XYPOINT const &)",
    "protected: virtual int __thiscall GRAPHICAL_BUTTON::CD_Draw(struct tagDRAWITEMSTRUCT *)",
    "public: __thiscall XYPOINT::XYPOINT(int,int)",
    "public: unsigned int __thiscall VKEY_EVENT::QueryVKey(void)const",
    "public: virtual long __thiscall SPIN_SLE_STR::SaveCurrentData(void)",
    "protected: virtual void __thiscall BLT_DATE_SPIN_GROUP::RestoreValue(int)",
    "public: int __thiscall ASSOCHWNDPWND::operator!(void)const",
    "protected: virtual int __thiscall DISPATCHER::OnMouseMove(class MOUSE_EVENT const &)",
    "public: void __thiscall DEC_SLT::SetValue(long)",
    "private: unsigned int __thiscall HIER_LBI::QueryDescendants(void)",
    "public: virtual __thiscall HIER_LBI::~HIER_LBI(void)",
    "public: int __thiscall USER_BROWSER_LB::IsSelectionExpandableGroup(void)const",
    "public: class SAM_DOMAIN * __thiscall BROWSER_DOMAIN::QueryBuiltinDomain(void)const",
    "protected: virtual int __thiscall NT_USER_BROWSER_DIALOG::OnOK(void)",
    "private: virtual long __thiscall GLOBAL_ATOM::W_QueryString(unsigned short *,unsigned int)const",
    "public: __thiscall WINDOW::WINDOW(void)",
    "public: void __thiscall CHANGEABLE_SPIN_ITEM::SetMin(unsigned long)",
    "public: __thiscall DMID_DTE::~DMID_DTE(void)",
    "public: unsigned short const * __thiscall BROWSER_SUBJECT::QueryFullName(void)const",
    "public: __thiscall MAGIC_GROUP::~MAGIC_GROUP(void)",
    "public: int __thiscall STATELB::QueryMapCount(void)const",
    "public: __thiscall OWNER_WINDOW::OWNER_WINDOW(void)",
    "public: __thiscall RADIO_BUTTON::RADIO_BUTTON(class OWNER_WINDOW *,unsigned int)",
    "public: long __thiscall FORWARDING_BASE::QueryError(void)const",
    "public: __thiscall NT_GLOBALGROUP_BROWSER_DIALOG::NT_GLOBALGROUP_BROWSER_DIALOG(struct HWND__ *,class NT_USER_BROWSER_DIALOG *,unsigned short const *,unsigned short const *,class OS_SID const *,class SAM_DOMAIN const *,class LSA_POLICY *,unsigned short const *)",
    "public: static void __stdcall BLTIMP::RemoveClient(struct HINSTANCE__ *)",
    "protected: virtual int __thiscall APP_WINDOW::OnMenuCommand(unsigned int)",
    "public: int __thiscall STRING_LIST_CONTROL::FindItemExact(unsigned short const *,int)const",
    "public: __thiscall MLE_FONT::~MLE_FONT(void)",
    "public: void __thiscall BLT_DATE_SPIN_GROUP::SetYear(int)",
    "protected: virtual class LBI * __thiscall USER_BROWSER_LBI_CACHE::CreateLBI(struct _DOMAIN_DISPLAY_USER const *)",
    "public: void __thiscall SLIST_OF_UI_EXT::Clear(void)",
    "public: long __thiscall USER_LBI_CACHE::ReadUsers(class ADMIN_AUTHORITY *,unsigned int,unsigned int,int,int *)",
    "public: struct HBRUSH__ * __thiscall SOLID_BRUSH::QueryHandle(void)const",
    "public: int __thiscall CONTROLVAL_CID_PAIR::Compare(class CONTROLVAL_CID_PAIR const *)const",
    "public: void __thiscall ELAPSED_TIME_CONTROL::SetSecondRange(long)",
    "public: __thiscall BROWSER_DOMAIN_LB::BROWSER_DOMAIN_LB(class OWNER_WINDOW *,unsigned int,class BROWSER_DOMAIN_CB *)",
    "public: __thiscall USER_BROWSER_LB::~USER_BROWSER_LB(void)",
    "public: void __thiscall ELAPSED_TIME_CONTROL::SetMinuteRange(long)",
    "private: virtual int __thiscall HIER_LBI::IsDestroyable(void)",
    "protected: __thiscall DISPATCHER::DISPATCHER(class WINDOW *)",
    "public: __thiscall ASSOCHWNDDISP::~ASSOCHWNDDISP(void)",
    "public: unsigned int __thiscall SIZE_EVENT::QueryHeight(void)const",
    "protected: virtual int __thiscall TIMER_WINDOW::OnTimer(class TIMER_EVENT const &)",
    "public: __thiscall CONTROL_EVENT::CONTROL_EVENT(unsigned int,unsigned int)",
    "protected: virtual void __thiscall USER_LBI_CACHE::UnlockCache(void)",
    "public: class ASSOCHCFILE * __thiscall SLIST_OF_ASSOCHCFILE::Remove(class ITER_SL_ASSOCHCFILE &)",
    "public: int __thiscall INTL_PROFILE::IsTimePrefix(void)const",
    "public: static struct HINSTANCE__ * __stdcall BLT::CalcHmodRsrc(class IDRESOURCE const &)",
    "protected: int __thiscall BASE_SET_FOCUS_DLG::IsExpanded(void)const",
    "private: void __thiscall H_SPLITTER_BAR::ClearDragBar(void)",
    "public: __thiscall LAZY_LISTBOX::LAZY_LISTBOX(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,int,enum FontType)",
    "public: __thiscall RESOURCE_PASSWORD_DIALOG::~RESOURCE_PASSWORD_DIALOG(void)",
    "protected: __thiscall ATOM_BASE::ATOM_BASE(unsigned short)",
    "protected: virtual void __thiscall NT_GROUP_BROWSER_DIALOG::UpdateButtonState(void)",
    "protected: void __thiscall WINDOW::ResetCreator(void)",
    "public: __thiscall ITER_SL_CLIENTDATA::~ITER_SL_CLIENTDATA(void)",
    "public: __thiscall GLOBAL_ATOM::~GLOBAL_ATOM(void)",
    "public: int __thiscall MENU_BASE::IsPopup(int)const",
    "public: int __thiscall SPIN_GROUP::IsModified(void)const",
    "public: __thiscall ARROW_BUTTON::~ARROW_BUTTON(void)",
    "public: class XYRECT & __thiscall XYRECT::Offset(class XYDIMENSION)",
    "public: __thiscall DISPLAY_CONTEXT::~DISPLAY_CONTEXT(void)",
    "public: long __thiscall SLIST_OF_NLS_STR::Append(class NLS_STR const *)",
    "protected: __thiscall DTE::DTE(void)",
    "public: virtual long __thiscall ICANON_SLE::Validate(void)",
    "public: __thiscall SPIN_SLT_SEPARATOR::SPIN_SLT_SEPARATOR(class OWNER_WINDOW *,unsigned int,unsigned short const *,class XYPOINT,class XYDIMENSION,unsigned long)",
    "public: long __thiscall SLIST_OF_TIMER_BASE::Add(class TIMER_BASE const *)",
    "public: class BROWSER_DOMAIN * __thiscall BROWSER_DOMAIN_LBI::QueryBrowserDomain(void)const",
    "public: int __thiscall DEVICE_CONTEXT::QueryFontHeight(void)const",
    "public: long __thiscall MENU_BASE::Remove(unsigned int,unsigned int)const",
    "protected: virtual int __thiscall BASE_SET_FOCUS_DLG::OnUserMessage(class EVENT const &)",
    "protected: virtual int __thiscall STATELB::CD_VKey(unsigned short,unsigned short)",
    "public: __thiscall POPUP::POPUP(struct HWND__ *,long,enum MSG_SEVERITY,unsigned int,unsigned int,int)",
    "public: unsigned long __thiscall SAM_RID_MEM::QueryRID(unsigned long)const",
    "public: __thiscall PROC_TIMER::PROC_TIMER(struct HWND__ *,unsigned long,unsigned long,int)",
    "public: __thiscall STATELBGRP::STATELBGRP(int * const,class OWNER_WINDOW *,unsigned int,int,int,enum FontType)",
    "public: unsigned long __thiscall USER_BROWSER_LBI_CACHE::QueryCount(void)const",
    "public: class LBI * __thiscall BLT_LISTBOX::RemoveItem(int)",
    "public: unsigned short const * __thiscall OPEN_LBI_BASE::QueryUserName(void)const",
    "public: void __thiscall CHANGEABLE_SPIN_ITEM::SetBigDecValue(unsigned long)",
    "public: __thiscall LM_FILE_2::~LM_FILE_2(void)",
    "protected: virtual int __thiscall ARROW_BUTTON::OnLMouseButtonDblClick(class MOUSE_EVENT const &)",
    "public: __thiscall SPIN_SLE_NUM_VALID::~SPIN_SLE_NUM_VALID(void)",
    "public: virtual unsigned long __thiscall NT_USER_BROWSER_DIALOG::QueryHelpContext(void)",
    "public: __thiscall XYRECT::XYRECT(struct tagRECT const &)",
    "public: int __thiscall CHANGEABLE_SPIN_ITEM::CheckRange(unsigned long)const",
    "public: int __thiscall DEVICE_CONTEXT::SetMapMode(int)",
    "public: int __thiscall INTL_PROFILE::Is24Hour(void)const",
    "public: int __thiscall LB_COLUMN_HEADER::QueryHeight(void)",
    "public: class SLE * __thiscall SLE_STRLB_GROUP::QueryInputSLE(void)const",
    "public: long __thiscall BROWSER_DOMAIN::UnRequestAccountData(void)",
    "public: __thiscall ITER_SL_ASSOCHCFILE::~ITER_SL_ASSOCHCFILE(void)",
    "private: void __thiscall LOGON_HOURS_CONTROL::UnloadLabels(void)",
    "public: int __thiscall BROWSER_DOMAIN_LBI::IsTargetDomain(void)const",
    "protected: virtual int __thiscall DIALOG_WINDOW::OnScrollBar(class SCROLL_EVENT const &)",
    "public: __thiscall HAW_FOR_HAWAII_INFO::HAW_FOR_HAWAII_INFO(void)",
    "public: class DM_DTE * __thiscall OUTLINE_LISTBOX::QueryDmDte(enum OUTLINE_LB_LEVEL,int)const",
    "public: long __thiscall SAM_RID_ENUMERATION_MEM::QueryName(unsigned long,class NLS_STR *)const",
    "public: __thiscall XYRECT::XYRECT(struct HWND__ *,int)",
    "private: static unsigned int __stdcall METALLIC_STR_DTE::CalcTopTextMargin(void)",
    "public: __thiscall RESOURCE_STR::~RESOURCE_STR(void)",
    "public: __thiscall SLE_STRIP::SLE_STRIP(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *,unsigned int,int)",
    "public: int __thiscall BLT_DATE_SPIN_GROUP::QueryYear(void)const",
    "protected: virtual int __thiscall BLT_LISTBOX::CD_Measure(struct tagMEASUREITEMSTRUCT *)",
    "public: void __thiscall USER_BROWSER_LBI_CACHE::SetIncludeUsers(int)",
    "private: int __thiscall HIER_LBI::IsParent(class HIER_LBI *)",
    "protected: virtual unsigned short const * __thiscall NT_GROUP_BROWSER_DIALOG::QueryHelpFile(unsigned long)",
    "public: virtual __thiscall OLLB_ENTRY::~OLLB_ENTRY(void)",
    "public: virtual __thiscall USER_LBI_CACHE::~USER_LBI_CACHE(void)",
    "public: void __thiscall WINDOW::SetStyle(unsigned long)",
    "protected: __thiscall APPLICATION::APPLICATION(struct HINSTANCE__ *,int,unsigned int,unsigned int,unsigned int,unsigned int)",
    "public: __thiscall SLIST_OF_STRING_BITSET_PAIR::~SLIST_OF_STRING_BITSET_PAIR(void)",
    "private: void __thiscall LOGON_HOURS_CONTROL::DrawOneCornerButton(class PAINT_DISPLAY_CONTEXT &,class XYRECT const &,int,struct HBRUSH__ *,struct HPEN__ *,struct HPEN__ *)const",
    "public: long __thiscall SLIST_OF_ASSOCHCFILE::Add(class ASSOCHCFILE const *)",
    "public: void __thiscall ELAPSED_TIME_CONTROL::SetMinuteValue(long)",
    "public: __thiscall POPUP_MENU::POPUP_MENU(class IDRESOURCE &)",
    "public: unsigned long __thiscall LSA_TRANSLATED_SID_MEM::QueryRID(unsigned long)const",
    "protected: virtual int __thiscall APP_WINDOW::OnMenuSelect(class MENUITEM_EVENT const &)",
    "protected: virtual long __thiscall LM_OLLB::OnUserAction(class CONTROL_EVENT const &)",
    "public: __thiscall PASSWORD_CONTROL::PASSWORD_CONTROL(class OWNER_WINDOW *,unsigned int,unsigned int)",
    "public: class TIMER_BASE * __thiscall SLIST_OF_TIMER_BASE::Remove(class ITER_SL_TIMER_BASE &)",
    "public: __thiscall STATIC_SPIN_ITEM::STATIC_SPIN_ITEM(class CONTROL_WINDOW *)",
    "public: virtual void __thiscall METALLIC_STR_DTE::Paint(struct HDC__ *,struct tagRECT const *)const",
    "public: void __thiscall GET_FNAME_BASE_DLG::OnHelp(struct HWND__ *)",
    "public: __thiscall GRAPHICAL_BUTTON_WITH_DISABLE::~GRAPHICAL_BUTTON_WITH_DISABLE(void)",
    "public: static int __stdcall MENUITEM::ItemExists(class APP_WINDOW *,unsigned int)",
    "public: unsigned short const * __thiscall BROWSER_DOMAIN::QueryDomainName(void)const",
    "public: __thiscall ITER_SL_STRING_BITSET_PAIR::ITER_SL_STRING_BITSET_PAIR(class SLIST &)",
    "public: long __thiscall FONT::SetFont(struct tagLOGFONTW const &)",
    "private: void __thiscall DISPLAY_MAP::SetMaskBits(unsigned char *,int,int,unsigned int)",
    "public: virtual unsigned long __thiscall CHANGEABLE_SPIN_ITEM::QueryBigDecValue(void)const",
    "protected: virtual int __thiscall SPIN_SLE_NUM_VALID::OnDefocus(class FOCUS_EVENT const &)",
    "public: void __thiscall DISPATCHER::CaptureMouse(void)",
    "public: __thiscall ULC_API_BUFFER::~ULC_API_BUFFER(void)",
    "private: void __thiscall LOGON_HOURS_CONTROL::MoveFocusDown(void)",
    "protected: virtual int __thiscall APP_WINDOW::OnPaintReq(void)",
    "public: __thiscall BLT_TIME_SPIN_GROUP::~BLT_TIME_SPIN_GROUP(void)",
    "public: int __thiscall XYRECT::QueryRight(void)const",
    "private: long __thiscall LOGON_HOURS_CONTROL::LoadLabels(long)",
    "public: __thiscall NT_GROUP_BROWSER_LB::NT_GROUP_BROWSER_LB(class OWNER_WINDOW *,unsigned int)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnResize(class SIZE_EVENT const &)",
    "public: __thiscall MLE_FONT::MLE_FONT(class OWNER_WINDOW *,unsigned int,enum FontType)",
    "public: unsigned int __thiscall DISPLAY_MAP::QueryHeight(void)const",
    "public: void __thiscall EDIT_CONTROL::SelectString(void)",
    "public: int __thiscall STRING_LIST_CONTROL::FindItemExact(unsigned short const *)const",
    "protected: virtual int __thiscall DIALOG_WINDOW::OnScrollBarThumb(class SCROLL_THUMB_EVENT const &)",
    "public: void __thiscall BASE_ELLIPSIS::SetStyle(enum ELLIPSIS_STYLE)",
    "public: struct _ULC_ENTRY_BASE * __thiscall USER_BROWSER_LBI_CACHE::QueryEntryPtr(int)",
    "public: __thiscall DLGLOAD::DLGLOAD(unsigned char const *,unsigned int,struct HWND__ *,class PROC_INSTANCE const &,int)",
    "public: long __thiscall NT_GROUP_BROWSER_LB::FillLocalGroupMembers(class OS_SID const *,class SAM_DOMAIN const *,class SAM_DOMAIN const *,class LSA_POLICY *,unsigned short const *)",
    "public: void __thiscall SLT_ELLIPSIS::SetSize(int,int,int)",
    "public: __thiscall PUSH_BUTTON::~PUSH_BUTTON(void)",
    "public: virtual unsigned long __thiscall SPIN_SLE_VALID_SECOND::QueryBigIncValue(void)const",
    "public: static int __stdcall APPLICATION::IsSystemInitialized(void)",
    "public: static void __stdcall CLIENT_WINDOW::Term(void)",
    "public: unsigned int __thiscall SET_OF_AUDIT_CATEGORIES::QueryFailedBaseCID(void)",
    "public: __thiscall SLT::~SLT(void)",
    "public: int __thiscall XYRECT::QueryTop(void)const",
    "protected: virtual int __thiscall H_SPLITTER_BAR::OnMouseMove(class MOUSE_EVENT const &)",
    "private: static unsigned long __stdcall WIN32_THREAD::StartThread(void *)",
    "public: void __thiscall WINDOW::QueryWindowRect(struct tagRECT *)const",
    "public: int __thiscall XYPOINT::InRect(class XYRECT const &)const",
    "public: void __thiscall LISTBOX::InvalidateItem(int,int)",
    "protected: int __thiscall OWNER_WINDOW::OnCDMessages(unsigned int,unsigned int,long)",
    "public: int __thiscall ARRAY_LIST_CONTROLVAL_CID_PAIR::AddIdemp(class CONTROLVAL_CID_PAIR const &)",
    "public: void __thiscall ELAPSED_TIME_CONTROL::SetMinuteFieldName(long)",
    "protected: virtual int __thiscall DISPATCHER::OnLMouseButtonDblClick(class MOUSE_EVENT const &)",
    "protected: long __thiscall NT_USER_BROWSER_DIALOG::GetTrustedDomainList(unsigned short const *,class BROWSER_DOMAIN * *,class BROWSER_DOMAIN_CB *,class ADMIN_AUTHORITY const *)",
    "private: void __thiscall LOGON_HOURS_CONTROL::CalcRectForHour(class XYRECT *,int)const",
    "public: __thiscall DISPLAY_TABLE::DISPLAY_TABLE(unsigned int,unsigned int const *)",
    "public: int __thiscall DEVICE_CONTEXT::TextOutW(class NLS_STR const &,class XYPOINT)const",
    "public: void __thiscall BROWSE_DOMAIN_ENUM::Reset(void)",
    "public: unsigned short const * __thiscall BROWSER_SUBJECT::QueryComment(void)const",
    "public: int __thiscall BLT_LISTBOX::InsertItem(int,class LBI *)",
    "public: int __thiscall XYPOINT::QueryX(void)const",
    "public: __thiscall MASK_MAP::MASK_MAP(void)",
    "public: unsigned int __thiscall EVENT::QueryWParam(void)const",
    "protected: virtual int __thiscall DISPATCHER::OnTimer(class TIMER_EVENT const &)",
    "public: __thiscall DOMAIN_FILL_THREAD::DOMAIN_FILL_THREAD(class NT_USER_BROWSER_DIALOG *,class BROWSER_DOMAIN *,class ADMIN_AUTHORITY const *)",
    "protected: void * __thiscall NT_MEMORY::QueryBuffer(void)const",
    "public: virtual struct HBRUSH__ * __thiscall BLT_BACKGROUND_EDIT::OnCtlColor(struct HDC__ *,struct HWND__ *,unsigned int *)",
    "public: __thiscall XYRECT::XYRECT(void)",
    "public: __thiscall MLT::MLT(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *)",
    "public: __thiscall SPIN_SLE_NUM::SPIN_SLE_NUM(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned long,unsigned long,unsigned long,int,unsigned int)",
    "public: virtual unsigned short const * __thiscall GLOBAL_ATOM::operator=(unsigned short const *)",
    "protected: __thiscall DISPATCHER::~DISPATCHER(void)",
    "public: struct tagPOINT __thiscall XYPOINT::QueryPoint(void)const",
    "private: struct _LSA_TRANSLATED_NAME const * __thiscall LSA_TRANSLATED_NAME_MEM::QueryPtr(void)const",
    "protected: virtual struct HBRUSH__ * __thiscall DIALOG_WINDOW::OnCtlColor(struct HDC__ *,struct HWND__ *,unsigned int *)",
    "protected: virtual int __thiscall DIALOG_WINDOW::FilterMessage(struct tagMSG *)",
    "public: __thiscall NT_LOCALGROUP_BROWSER_DIALOG::NT_LOCALGROUP_BROWSER_DIALOG(struct HWND__ *,class NT_USER_BROWSER_DIALOG *,unsigned short const *,unsigned short const *,class OS_SID const *,class SAM_DOMAIN const *,class SAM_DOMAIN const *,class LSA_POLICY *,unsigned short const *)",
    "public: __thiscall ACCOUNT_NAMES_MLE::~ACCOUNT_NAMES_MLE(void)",
    "public: __thiscall TEXT_CONTROL::TEXT_CONTROL(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *)",
    "public: class LBI * __thiscall BLT_LISTBOX::QueryItem(void)const",
    "public: long __thiscall APP_WINDOW::DrawMenuBar(void)const",
    "long __stdcall BLTDoubleChar(class NLS_STR *,unsigned short)",
    "public: class BITFIELD * __thiscall AUDIT_CHECKBOXES::QueryMask(void)",
    "public: __thiscall WIN32_EVENT::WIN32_EVENT(unsigned short const *,int,int)",
    "public: __thiscall UI_MENU_EXT_MGR::UI_MENU_EXT_MGR(class UI_EXT_MGR_IF *,unsigned long,unsigned long)",
    "public: __thiscall LISTBOX::LISTBOX(class OWNER_WINDOW *,unsigned int,int,enum FontType,int)",
    "private: void __thiscall LOGON_HOURS_CONTROL::InvalidateButton(int)",
    "public: __thiscall XYDIMENSION::XYDIMENSION(unsigned int,unsigned int)",
    "public: long __thiscall BROWSER_DOMAIN::WaitForAdminAuthority(unsigned long,int *)const",
    "public: unsigned int __thiscall CONTROL_EVENT::QueryCid(void)const",
    "public: unsigned int __thiscall NT_GROUP_ENUM_OBJ::QueryRID(void)const",
    "public: __thiscall TIMER::TIMER(class TIMER_CALLOUT *,unsigned long,int)",
    "protected: virtual void __thiscall USER_BROWSER_LB::OnDeleteItem(class LBI *)",
    "protected: __thiscall BUTTON_CONTROL::BUTTON_CONTROL(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long)",
    "public: static long __stdcall BLTIMP::EnterResourceCritSect(void)",
    "public: __thiscall BLT_MASTER_TIMER::~BLT_MASTER_TIMER(void)",
    "public: __thiscall HIDDEN_CONTROL::HIDDEN_CONTROL(class OWNER_WINDOW *,unsigned int)",
    "public: virtual unsigned int __thiscall DTE::QueryLeftMargin(void)const",
    "public: long __thiscall MASK_MAP::QueryBits(unsigned int,class BITFIELD *,class NLS_STR *,int *)",
    "public: __thiscall GLOBAL_ATOM::GLOBAL_ATOM(unsigned short const *)",
    "public: long __thiscall DOMAIN_FILL_THREAD::QueryErrorLoadingAuthority(void)const",
    "int __stdcall BLTPoints2LogUnits(int)",
    "protected: virtual int __thiscall STLBITEM::Compare(class LBI const *)const",
    "public: void __thiscall BIT_MAP::SetBitmap(struct HBITMAP__ *)",
    "private: virtual class LBI * __thiscall LAZY_LISTBOX::RequestLBI(struct tagDRAWITEMSTRUCT const *)",
    "public: __thiscall EDIT_CONTROL::EDIT_CONTROL(class OWNER_WINDOW *,unsigned int,unsigned int)",
    "public: virtual int __thiscall USER_BROWSER_LBI::Compare(class LBI const *)const",
    "public: __thiscall BROWSER_DOMAIN_LBI::BROWSER_DOMAIN_LBI(class BROWSER_DOMAIN *)",
    "public: virtual unsigned int __thiscall LBI::CalcHeight(unsigned int)",
    "private: virtual void __thiscall BLT_LISTBOX::ReleaseLBI(class LBI *)",
    "protected: virtual int __thiscall NT_LOCALGROUP_BROWSER_DIALOG::OnCommand(class CONTROL_EVENT const &)",
    "private: int __thiscall SET_CONTROL::IsOverTarget(class LISTBOX *,class LISTBOX *,class XYPOINT const &)const",
    "public: __thiscall BLT_LISTBOX_HAW::BLT_LISTBOX_HAW(class OWNER_WINDOW *,unsigned int,int,enum FontType,int)",
    "public: int __thiscall ARRAY_CONTROLVAL_CID_PAIR::Resize(unsigned int,int)",
    "public: __thiscall WINDOW::~WINDOW(void)",
    "public: struct CLIENTDATA * __thiscall SLIST_OF_CLIENTDATA::Remove(class ITER_SL_CLIENTDATA &)",
    "public: int __thiscall NT_USER_BROWSER_DIALOG::IsSingleSelection(void)const",
    "public: __thiscall STRING_LISTBOX::STRING_LISTBOX(class OWNER_WINDOW *,unsigned int,enum FontType)",
    "public: __thiscall EVENT::EVENT(unsigned int,unsigned int,long)",
    "public: int __thiscall BLT_COMBOBOX::IsDropped(void)const",
    "public: void __thiscall HIER_LISTBOX::DeleteChildren(class HIER_LBI *)",
    "public: struct HBITMAP__ * __thiscall GRAPHICAL_BUTTON_WITH_DISABLE::QueryDisable(void)const",
    "protected: virtual int __thiscall DISPATCHER::OnFocus(class FOCUS_EVENT const &)",
    "public: __thiscall FOCUS_CHECKBOX::FOCUS_CHECKBOX(class OWNER_WINDOW *,unsigned int)",
    "public: __thiscall BROWSER_SUBJECT_ITER::~BROWSER_SUBJECT_ITER(void)",
    "public: __thiscall FILE3_ENUM_OBJ::~FILE3_ENUM_OBJ(void)",
    "protected: __thiscall UI_EXT::UI_EXT(unsigned short const *,unsigned long)",
    "public: __thiscall TEXT_CONTROL::~TEXT_CONTROL(void)",
    "public: __thiscall BLT_SCRATCH::BLT_SCRATCH(unsigned int)",
    "public: long __thiscall NT_GROUP_ENUM_OBJ::QueryGroup(class NLS_STR *)const",
    "public: long __thiscall WIN32_MUTEX::Release(void)",
    "public: long __thiscall FOCUSDLG_DATA_THREAD::ExitThread(void)",
    "public: int __thiscall STRING_LIST_CONTROL::InsertItem(int,class NLS_STR const &)",
    "private: void __thiscall LBI_HEAP::AdjustUpwards(int)",
    "private: void __thiscall LOGON_HOURS_CONTROL::SetSelection(int,int)",
    "public: virtual void __thiscall SPIN_GROUP::SetControlValueFocus(void)",
    "public: long __thiscall BLT_DATE_SPIN_GROUP::SetCurrentDay(void)",
    "public: int __thiscall XYRECT::ContainsXY(class XYPOINT)const",
    "protected: __thiscall MSG_DIALOG_BASE::~MSG_DIALOG_BASE(void)",
    "int __stdcall MsgPopup(class OWNINGWND const &,long,enum MSG_SEVERITY,unsigned int,unsigned short const *,unsigned short const *,unsigned int)",
    "public: __thiscall MSGPOPUP_DIALOG::~MSGPOPUP_DIALOG(void)",
    "public: virtual struct HBRUSH__ * __thiscall SPIN_SLT_SEPARATOR::OnCtlColor(struct HDC__ *,struct HWND__ *,unsigned int *)",
    "protected: virtual void __thiscall BLT_DATE_SPIN_GROUP::SaveValue(int)",
    "public: int __thiscall WINDOW::HasFocus(void)const",
    "public: __thiscall OWNER_WINDOW::~OWNER_WINDOW(void)",
    "int __stdcall MsgPopup(class OWNINGWND const &,long,long,enum MSG_SEVERITY,unsigned long,unsigned int,class NLS_STR * * const,unsigned int)",
    "public: long __thiscall MENU_BASE::InsertSeparator(unsigned int,unsigned int)const",
    "protected: virtual int __thiscall FOCUS_CHECKBOX::OnFocus(class FOCUS_EVENT const &)",
    "public: static int __stdcall DIALOG_WINDOW::DlgProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: void * * __thiscall SAM_SID_MEM::QueryPtr(void)const",
    "protected: virtual int __thiscall LOGON_HOURS_CONTROL::OnDefocus(class FOCUS_EVENT const &)",
    "protected: virtual unsigned long __thiscall LOGON_HOURS_CONTROL::OnQDlgCode(void)",
    "public: struct HWND__ * __thiscall OWNINGWND::QueryHwnd(void)const",
    "public: int __thiscall STRING_BITSET_PAIR::QueryID(void)",
    "public: __thiscall GRAPHICAL_BUTTON::GRAPHICAL_BUTTON(class OWNER_WINDOW *,unsigned int,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: void __thiscall TRISTATE::EnableThirdState(int)",
    "public: int __thiscall SPIN_GROUP::DoNewFocus(class SPIN_ITEM *)",
    "public: static struct HICON__ * __stdcall CURSOR::Load(class IDRESOURCE const &)",
    "protected: virtual void __thiscall COMBOBOX::SaveValue(int)",
    "protected: virtual int __thiscall WIN_ELLIPSIS::QueryLimit(void)",
    "public: int __thiscall BASE_ELLIPSIS::QueryTextLength(void)const",
    "public: int __thiscall DEVICE_CONTEXT::BitBlt(int,int,int,int,class DEVICE_CONTEXT const &,int,int,unsigned long)",
    "protected: void __thiscall WIN32_THREAD::DeleteAndExit(unsigned int)",
    "public: __thiscall DEVICE_CONTEXT::DEVICE_CONTEXT(struct HDC__ *)",
    "private: void __thiscall RADIO_BUTTON::SetCheck(int)",
    "public: __thiscall STATELBGRP::~STATELBGRP(void)",
    "protected: virtual int __thiscall DIALOG_WINDOW::OnTimer(class TIMER_EVENT const &)",
    "protected: virtual int __thiscall STATIC_SPIN_ITEM::OnFocus(class FOCUS_EVENT const &)",
    "private: static void __stdcall BLTIMP::Unwind(enum BLT_CTOR_STATE)",
    "public: struct HBITMAP__ * __thiscall DISPLAY_MAP::QueryBitmapHandle(void)const",
    "public: class OS_SID const * __thiscall BROWSER_SUBJECT::QuerySid(void)const",
    "public: void __thiscall CHANGEABLE_SPIN_ITEM::SetSmallIncValue(unsigned long)",
    "public: enum _SID_NAME_USE __thiscall LSA_TRANSLATED_SID_MEM::QueryUse(unsigned long)const",
    "public: void __thiscall SPIN_SLE_STR::SetRange(long)",
    "public: class USER_BROWSER_LBI * __thiscall USER_BROWSER_LB::QueryErrorLBI(void)const",
    "public: long __thiscall WIN32_SEMAPHORE::Release(long,long *)",
    "public: void __thiscall XYPOINT::SetX(int)",
    "protected: void __thiscall SLT_ELLIPSIS::ReportError(long)",
    "public: int __thiscall BASE_ELLIPSIS::QueryTextSize(void)const",
    "private: int __thiscall BLT_TIME_SPIN_GROUP::IsConstructionFail(class CONTROL_WINDOW *)",
    "private: long __thiscall SPIN_SLE_STR::QueryStrNum(class NLS_STR const &,long)",
    "protected: virtual int __thiscall MSGPOPUP_DIALOG::OnCommand(class CONTROL_EVENT const &)",
    "public: __thiscall LAZY_LISTBOX::~LAZY_LISTBOX(void)",
    "public: virtual __thiscall LBI::~LBI(void)",
    "public: __thiscall LBITREE::LBITREE(void)",
    "public: int __thiscall SPIN_GROUP::DoArrowCommand(unsigned int,unsigned short)",
    "public: __thiscall BLT_MASTER_TIMER::BLT_MASTER_TIMER(void)",
    "public: long __thiscall LBI_HEAP::AddItem(class LBI *)",
    "protected: virtual void __thiscall SLT::RestoreValue(int)",
    "void __stdcall `vector destructor iterator'(void *,unsigned int,int,void (__thiscall*)(void *))",
    "private: void __thiscall BASE_SET_FOCUS_DLG::UpdateRasMode(void)",
    "public: int __thiscall USER_BROWSER_LB::AddItem(class LBI *)",
    "private: int __thiscall SET_CONTROL::IsOnSelectedItem(class LISTBOX *,class LISTBOX *,class XYPOINT const &)const",
    "public: int __thiscall STRING_LIST_CONTROL::QueryItemSize(int)const",
    "public: struct HWND__ * __thiscall DISPATCHER::QueryHwnd(void)const",
    "protected: long __thiscall ACCOUNT_NAMES_MLE::BuildNameListFromStrList(class NLS_STR *,class STRLIST *)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnChar(class CHAR_EVENT const &)",
    "protected: void __thiscall SPIN_GROUP::SetArrowButtonStatus(void)",
    "public: __thiscall BLT_COMBOBOX::~BLT_COMBOBOX(void)",
    "private: void __thiscall LOGON_HOURS_CONTROL::DoButtonDownVisuals(void)",
    "public: __thiscall BASE_SET_FOCUS_DLG::~BASE_SET_FOCUS_DLG(void)",
    "public: int __thiscall BASE::operator!(void)const",
    "public: long __thiscall ACCOUNT_NAMES_MLE::CreateLBIListFromNames(unsigned short const *,unsigned short const *,class SLIST_OF_USER_BROWSER_LBI *,class SLIST_OF_USER_BROWSER_LBI *,long *,class NLS_STR *)",
    "protected: static int __stdcall USER_LBI_CACHE::CmpUniStrs(struct _UNICODE_STRING const *,struct _UNICODE_STRING const *)",
    "protected: virtual void __thiscall BLT_DATE_SPIN_GROUP::SetControlValueFocus(void)",
    "public: class CONTROLVAL_CID_PAIR & __thiscall ARRAY_CONTROLVAL_CID_PAIR::operator[](unsigned int)const",
    "private: void __thiscall OLLB_ENTRY::SetExpanded(int)",
    "public: unsigned long __thiscall WINDOW::QueryStyle(void)const",
    "protected: long __thiscall MENU_BASE::W_Insert(void const *,unsigned int,unsigned int,unsigned int)const",
    "public: void __thiscall MENUITEM::Enable(int)",
    "public: class USER_BROWSER_LBI * __thiscall SLIST_OF_USER_BROWSER_LBI::Remove(class ITER_SL_USER_BROWSER_LBI &)",
    "private: static unsigned int __stdcall METALLIC_STR_DTE::CalcBottomTextMargin(void)",
    "public: int __thiscall USER_LBI_CACHE::QueryCount(void)const",
    "protected: virtual int __thiscall LOGON_HOURS_CONTROL::OnKeyDown(class VKEY_EVENT const &)",
    "unsigned int __stdcall DisplayGenericError(class OWNINGWND const &,long,long,unsigned short const *,unsigned short const *,enum MSG_SEVERITY)",
    "public: static long __stdcall CUSTOM_CONTROL::WndProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: int __thiscall TIMER_BASE::IsEnabled(void)const",
    "public: unsigned int __thiscall DISPLAY_MAP::QueryWidth(void)const",
    "public: void __thiscall BLT_DATE_SPIN_GROUP::SetDay(int)",
    "public: void __thiscall AUDIT_CHECKBOXES::CheckFailed(int)",
    "public: __thiscall SLE_STRLB_GROUP::SLE_STRLB_GROUP(class OWNER_WINDOW *,class SLE *,class STRING_LISTBOX *,class PUSH_BUTTON *,class PUSH_BUTTON *)",
    "public: class BROWSER_DOMAIN * __thiscall BROWSER_DOMAIN_LBI_PB::QueryBrowserDomain(void)const",
    "public: class OS_SID const * __thiscall BROWSER_DOMAIN::QueryDomainSid(void)const",
    "private: int __thiscall LOGON_HOURS_CONTROL::DrawGridWires(class PAINT_DISPLAY_CONTEXT &)const",
    "public: __thiscall CHECKBOX::CHECKBOX(class OWNER_WINDOW *,unsigned int)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnKeyDown(class VKEY_EVENT const &)",
    "public: __thiscall DMID_DTE::DMID_DTE(unsigned int)",
    "public: long __thiscall WIN32_THREAD::Resume(void)",
    "public: long __thiscall ATOM_BASE::QueryString(unsigned short *,unsigned int)const",
    "public: long __thiscall DOMAIN_FILL_THREAD::RequestAndWaitForUsers(void)",
    "public: void __thiscall SET_OF_AUDIT_CATEGORIES::Enable(int,int)",
    "public: __thiscall EDIT_CONTROL::~EDIT_CONTROL(void)",
    "public: virtual __thiscall UI_MENU_EXT_MGR::~UI_MENU_EXT_MGR(void)",
    "public: void __thiscall LIST_CONTROL::SelectItems(int *,int,int)",
    "public: __thiscall LB_COLUMN_HEADER::LB_COLUMN_HEADER(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION)",
    "protected: long __thiscall ACCOUNT_NAMES_MLE::StripDomainIfWellKnown(class NLS_STR *)",
    "public: virtual unsigned short __thiscall USER_BROWSER_LBI::QueryLeadingChar(void)const",
    "protected: unsigned int __thiscall STATE_BUTTON_CONTROL::QueryState(void)const",
    "public: long __thiscall WIN32_THREAD::Suspend(void)",
    "protected: int __thiscall NT_USER_BROWSER_DIALOG::IsShowUsersButtonUsed(void)const",
    "protected: struct HWND__ * __thiscall DISPLAY_CONTEXT::QueryHwnd(void)",
    "public: int __thiscall DEVICE_CONTEXT::QueryTextMetrics(struct tagTEXTMETRICW *)const",
    "public: __thiscall OPEN_LBI_BASE::OPEN_LBI_BASE(unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned long)",
    "public: void __thiscall LISTBOX::SetHorizontalExtent(unsigned int)",
    "private: void __thiscall HIER_LBI::Adopt(class HIER_LBI *,int)",
    "public: virtual void __thiscall BROWSER_DOMAIN_LBI::Paint(class LISTBOX *,struct HDC__ *,struct tagRECT const *,struct GUILTT_INFO *)const",
    "public: int __thiscall GET_FNAME_BASE_DLG::IsHelpActive(void)",
    "public: int __thiscall MENUITEM::SetText(unsigned short const *)",
    "protected: long __thiscall USER_BROWSER_LBI_CACHE::BuildAndAddLBI(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,void * const,enum UI_SystemSid,enum _SID_NAME_USE,unsigned long)",
    "public: void __thiscall USER_LBI_CACHE::Sort(void)",
    "public: __thiscall PROMPT_AND_CONNECT::PROMPT_AND_CONNECT(struct HWND__ *,unsigned short const *,unsigned long,unsigned int,unsigned short const *)",
    "protected: int __thiscall HEAP_BASE::QueryLeftChild(int)const",
    "public: void __thiscall WINDOW::SetText(unsigned short const *)",
    "public: class UI_EXT * __thiscall ITER_SL_UI_EXT::Next(void)",
    "protected: virtual long __thiscall USRLB_NT_GROUP_ENUM::QueryCountPreferences(unsigned long *,unsigned long *,unsigned int,unsigned long,unsigned long,unsigned long)",
    "public: unsigned long __thiscall SAM_RID_ENUMERATION_MEM::QueryRID(unsigned long)const",
    "protected: virtual long __thiscall DOMAIN_FILL_THREAD::PostMain(void)",
    "public: int __thiscall XYRECT::QueryLeft(void)const",
    "public: __thiscall SLE_STRIP::SLE_STRIP(class OWNER_WINDOW *,unsigned int,unsigned int,int)",
    "public: void __thiscall OWNER_WINDOW::SetDialogFocus(class CONTROL_WINDOW &)",
    "public: __thiscall WIN32_SEMAPHORE::WIN32_SEMAPHORE(unsigned short const *,long,long)",
    "private: void __thiscall LOGON_HOURS_CONTROL::DrawFocusOnCell(class DISPLAY_CONTEXT const &,int)const",
    "public: virtual int __thiscall SPIN_SLE_NUM_VALID::CheckValid(void)",
    "public: class XYRECT & __thiscall XYRECT::CalcIntersect(class XYRECT const &,class XYRECT const &)",
    "public: void __thiscall CUSTOM_CONTROL::CVRestoreValue(int)",
    "public: long __thiscall USER_BROWSER_LBI::QualifyDisplayName(void)",
    "public: void * __thiscall LSA_TRUST_INFO_MEM::QueryPSID(unsigned long)const",
    "public: long __thiscall MENU_BASE::Append(unsigned short const *,unsigned int,unsigned int)const",
    "public: struct _SERVER_INFO_101 const * __thiscall SERVER1_ENUM_OBJ::QueryBufferPtr(void)const",
    "protected: void __thiscall CONTROL_WINDOW::ResetError(void)",
    "public: void __thiscall LIST_CONTROL::SelectItem(int,int)",
    "public: void __thiscall SPIN_SLE_NUM::QueryContent(class NLS_STR *)const",
    "protected: virtual void __thiscall CONTROL_GROUP::AfterGroupActions(void)",
    "public: __thiscall UI_EXT_MGR_IF::~UI_EXT_MGR_IF(void)",
    "public: static struct HICON__ * __stdcall CURSOR::LoadSystem(class IDRESOURCE const &)",
    "public: __thiscall NT_USER_BROWSER_DIALOG::~NT_USER_BROWSER_DIALOG(void)",
    "public: void __thiscall TIMER_BASE::Enable(int)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnDestroy(void)",
    "public: __thiscall ACCELTABLE::~ACCELTABLE(void)",
    "public: __thiscall UI_DOMAIN::~UI_DOMAIN(void)",
    "public: unsigned long __thiscall UI_EXT::QueryDelta(void)const",
    "public: __thiscall NT_GROUP_BROWSER_LB::~NT_GROUP_BROWSER_LB(void)",
    "public: unsigned int __thiscall XYDIMENSION::QueryWidth(void)const",
    "protected: virtual int __thiscall OPEN_DIALOG_BASE::OnCommand(class CONTROL_EVENT const &)",
    "protected: virtual int (__cdecl*__thiscall USER_BROWSER_LBI_CACHE::QueryCompareMethod(void)const )(void const *,void const *)",
    "public: virtual unsigned long __thiscall SPIN_SLE_VALID_SECOND::QuerySmallDecValue(void)const",
    "public: long __thiscall CONTROL_WINDOW::NotifyGroups(class CONTROL_EVENT const &)",
    "public: unsigned short const * __thiscall BROWSE_DOMAIN_INFO::QueryDomainName(void)const",
    "public: class DISPLAY_MAP * __thiscall SUBJECT_BITMAP_BLOCK::QueryDisplayMap(int,int,int)",
    "private: void __thiscall LOGON_HOURS_CONTROL::SetSelectedCells(int)",
    "protected: virtual int __thiscall SPIN_SLE_NUM::OnChar(class CHAR_EVENT const &)",
    "protected: virtual int __thiscall DIALOG_WINDOW::OnCancel(void)",
    "public: struct HBITMAP__ * __thiscall BIT_MAP::QueryHandle(void)const",
    "public: void __thiscall HIER_LISTBOX::OnDoubleClick(class HIER_LBI *)",
    "public: class HIER_LBI * __thiscall HIER_LBI_ITERATOR::operator()(void)",
    "public: __thiscall ASSOCHCFILE::ASSOCHCFILE(struct HINSTANCE__ *,long,unsigned long,unsigned long)",
    "public: __thiscall GET_OPEN_FILENAME_DLG::GET_OPEN_FILENAME_DLG(class OWNER_WINDOW *,unsigned short const *,unsigned long)",
    "public: int __thiscall STLBITEM::QueryState(void)const",
    "public: void __thiscall CONTROL_WINDOW::ClaimFocus(void)",
    "protected: void __thiscall BASE_SET_FOCUS_DLG::ShowArea(int)",
    "public: __thiscall WIN_ELLIPSIS::WIN_ELLIPSIS(class WINDOW *,struct HDC__ *,struct tagRECT const *,enum ELLIPSIS_STYLE)",
    "public: int __thiscall STRING_LIST_CONTROL::AddItemIdemp(class NLS_STR const &)",
    "public: __thiscall PROMPT_FOR_ANY_DC_DLG::~PROMPT_FOR_ANY_DC_DLG(void)",
    "private: long __thiscall BLT_DATE_SPIN_GROUP::PlaceControl(int,class OWNER_WINDOW *,class INTL_PROFILE const &,class XYPOINT const &,class XYDIMENSION const &,class XYPOINT const &,class XYDIMENSION const &,class XYPOINT const &,class XYDIMENSION const &)",
    "public: static void __stdcall CURSOR::Show(int)",
    "public: __thiscall SLIST_OF_OS_SID::~SLIST_OF_OS_SID(void)",
    "protected: long __thiscall USER_BROWSER_LBI_CACHE::AddGroups(class ADMIN_AUTHORITY *,unsigned short const *,int *)",
    "public: int __thiscall CHECKBOX::Toggle(void)",
    "protected: static unsigned short const * __stdcall CONTROL_WINDOW::QueryListboxClassName(void)",
    "private: int __thiscall LOGON_HOURS_CONTROL::IsButtonACell(int)const",
    "public: static unsigned short const * __stdcall BLT::CalcHelpFileHC(unsigned long)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnMouseMove(class MOUSE_EVENT const &)",
    "public: int __thiscall SPIN_GROUP::SetFieldMinMax(unsigned short)",
    "private: int __thiscall POPUP::Emergency(void)const",
    "public: void __thiscall SPIN_SLE_NUM::QueryContent(unsigned long *)const",
    "public: __thiscall RADIO_GROUP::~RADIO_GROUP(void)",
    "public: unsigned int __thiscall SET_OF_AUDIT_CATEGORIES::QuerySuccessBaseCID(void)",
    "public: class XYDIMENSION __thiscall DEVICE_CONTEXT::QueryTextExtent(class NLS_STR const &)const",
    "public: long __thiscall MENU_BASE::Insert(unsigned short const *,unsigned int,struct HMENU__ *,unsigned int)const",
    "public: virtual void __thiscall MAGIC_GROUP::SetControlValueFocus(void)",
    "protected: virtual long __thiscall SLE_STRLB_GROUP::W_Add(unsigned short const *)",
    "public: int __thiscall BROWSER_DOMAIN::IsInitialized(void)const",
    "public: __thiscall STR_DTE::STR_DTE(unsigned short const *)",
    "public: long __thiscall SLT_ELLIPSIS::SetText(unsigned short const *)",
    "public: long __thiscall GET_FNAME_BASE_DLG::SetFileExtension(class NLS_STR const &)",
    "protected: virtual int __thiscall H_SPLITTER_BAR::OnQMouseCursor(class QMOUSEACT_EVENT const &)",
    "public: virtual long __thiscall GET_OPEN_FILENAME_DLG::Process(int *)",
    "protected: virtual int __thiscall DISPATCHER::OnCommand(class CONTROL_EVENT const &)",
    "public: static void * __stdcall ASSOCHWNDTHIS::HwndToThis(struct HWND__ *)",
    "public: int __thiscall XYPOINT::QueryY(void)const",
    "private: void __thiscall HIER_LBI::Abandon(void)",
    "private: int __thiscall DIALOG_WINDOW::OnHelp(void)",
    "public: unsigned short const * __thiscall STR_DTE::QueryPch(void)const",
    "public: __thiscall XYPOINT::XYPOINT(long)",
    "public: long __thiscall MENU_BASE::Insert(unsigned short const *,unsigned int,unsigned int,unsigned int)const",
    "public: struct HMENU__ * __thiscall APP_WINDOW::QueryMenu(void)const",
    "protected: virtual unsigned int __thiscall COMBOBOX::QueryEventEffects(class CONTROL_EVENT const &)",
    "public: __thiscall DEVICE_COMBO::DEVICE_COMBO(class OWNER_WINDOW *,unsigned int,enum LMO_DEVICE,enum LMO_DEV_USAGE)",
    "protected: virtual int __thiscall DISPATCHER::OnDeactivation(class ACTIVATION_EVENT const &)",
    "public: int __thiscall DEVICE_CONTEXT::SetBkMode(int)",
    "public: __thiscall SLIST_OF_TIMER_BASE::SLIST_OF_TIMER_BASE(int)",
    "protected: long __thiscall ACCOUNT_NAMES_MLE::ParseUserNameList(class STRLIST *,unsigned short const *)",
    "public: __thiscall PROC_INSTANCE::PROC_INSTANCE(unsigned long)",
    "public: struct _SAM_RID_ENUMERATION const * __thiscall SAM_RID_ENUMERATION_MEM::QueryPtr(void)const",
    "private: long __thiscall SPIN_SLE_STR::Initialize(long,class OWNER_WINDOW *,unsigned int)",
    "public: class DISPLAY_MAP * __thiscall BROWSER_DOMAIN_CB::QueryDisplayMap(class BROWSER_DOMAIN_LBI const *)",
    "public: __thiscall IDRESOURCE::IDRESOURCE(unsigned int)",
    "public: __thiscall DLIST_OF_SPIN_ITEM::DLIST_OF_SPIN_ITEM(int)",
    "public: virtual unsigned short __thiscall BROWSER_DOMAIN_LBI_PB::QueryLeadingChar(void)const",
    "protected: long __thiscall SLT_ELLIPSIS::ConvertAndSetStr(void)",
    "protected: virtual long __thiscall SET_CONTROL::OnUserAction(class CONTROL_WINDOW *,class CONTROL_EVENT const &)",
    "public: __thiscall CONTROL_TABLE::CONTROL_TABLE(void)",
    "protected: virtual int __thiscall METER::OnPaintReq(void)",
    "public: long __thiscall SLT_ELLIPSIS::QueryError(void)const",
    "public: __thiscall FOCUS_CHECKBOX::~FOCUS_CHECKBOX(void)",
    "public: struct _LSA_TRUST_INFORMATION const * __thiscall LSA_TRUST_INFO_MEM::QueryPtr(void)const",
    "public: unsigned int __thiscall SIZE_EVENT::QueryWidth(void)const",
    "public: __thiscall METER::METER(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned long)",
    "protected: virtual int __thiscall OWNER_WINDOW::OnUserMessage(class EVENT const &)",
    "private: int __thiscall APP_WINDOW::DrawIcon(void)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnMove(class MOVE_EVENT const &)",
    "public: long __thiscall FONT::SetFont(struct HFONT__ *)",
    "public: __thiscall CONTROL_WINDOW::~CONTROL_WINDOW(void)",
    "protected: virtual int __thiscall LOGON_HOURS_CONTROL::OnQMouseCursor(class QMOUSEACT_EVENT const &)",
    "public: __thiscall SERVER1_ENUM_OBJ::~SERVER1_ENUM_OBJ(void)",
    "private: long __thiscall UI_MENU_EXT::W_BiasMenuIds(struct HMENU__ *,unsigned long)",
    "public: enum _SID_NAME_USE __thiscall BROWSER_SUBJECT::QueryType(void)const",
    "protected: long __thiscall NT_USER_BROWSER_DIALOG::OnShowUsers(void)",
    "public: static long __stdcall POPUP::MapMessage(long)",
    "protected: virtual void __thiscall BLT_TIME_SPIN_GROUP::SaveValue(int)",
    "private: void __thiscall LOGON_HOURS_CONTROL::DrawCurrentSelection(class DISPLAY_CONTEXT const &)const",
    "private: void __thiscall LOGON_HOURS_CONTROL::DrawSelectionOnCell(class DISPLAY_CONTEXT const &,int)const",
    "public: long __thiscall SLT_ELLIPSIS::QueryText(class NLS_STR *)const",
    "protected: static class DISPATCHER * __stdcall DISPATCHER::HwndToPwnd(struct HWND__ *)",
    "public: int __thiscall STRING_LIST_CONTROL::FindItem(unsigned short const *)const",
    "public: __thiscall DIALOG_WINDOW::DIALOG_WINDOW(class IDRESOURCE const &,class PWND2HWND const &,int)",
    "public: long __thiscall SLT_ELLIPSIS::QueryText(unsigned short *,unsigned int)const",
    "public: int __thiscall OLLB_ENTRY::IsExpanded(void)const",
    "private: void __thiscall LOGON_HOURS_CONTROL::SetSelection(int)",
    "public: __thiscall ICON_CONTROL::ICON_CONTROL(class OWNER_WINDOW *,unsigned int,class IDRESOURCE const &)",
    "public: int __thiscall CONTROL_TABLE::AddControl(class CONTROL_WINDOW *)",
    "public: virtual __thiscall USER_BROWSER_LBI::~USER_BROWSER_LBI(void)",
    "protected: virtual unsigned long __thiscall BASE_PASSWORD_DIALOG::QueryHelpContext(void)",
    "public: int __thiscall CONTROL_WINDOW::operator!(void)const",
    "protected: virtual void __thiscall TIMER_BASE::DispatchTimer(void)",
    "public: void __thiscall SET_CONTROL::EnableMoves(int)",
    "public: __thiscall WINDOW_TIMER::WINDOW_TIMER(struct HWND__ *,unsigned long,int,int)",
    "public: int __thiscall HIER_LBI::QueryIndentLevel(void)",
    "public: class OWNER_WINDOW * __thiscall SET_OF_AUDIT_CATEGORIES::QueryOwnerWindow(void)",
    "protected: virtual int __thiscall LOGON_HOURS_CONTROL::OnFocus(class FOCUS_EVENT const &)",
    "protected: virtual void __thiscall CONTROL_VALUE::SetTabStop(int)",
    "public: __thiscall ASSOCHWNDTHIS::ASSOCHWNDTHIS(struct HWND__ *,void const *)",
    "public: class XYDIMENSION __thiscall WINDOW::QuerySize(void)const",
    "public: virtual class LBI * __thiscall USER_LBI_CACHE::RemoveItem(int)",
    "public: void __thiscall SLIST_OF_USER_BROWSER_LBI::Clear(void)",
    "public: class LBI * __thiscall USER_BROWSER_LB::RemoveItem(int)",
    "protected: int __thiscall BASE_ELLIPSIS::IsValidStyle(enum ELLIPSIS_STYLE)const",
    "protected: virtual int __thiscall PROMPT_FOR_ANY_DC_DLG::OnOK(void)",
    "protected: int __thiscall MENU_BASE::W_QueryItemText(unsigned short *,unsigned int,unsigned int,unsigned int)const",
    "public: unsigned short const * __thiscall BROWSER_SUBJECT::QueryAccountName(void)const",
    "protected: void __thiscall DM_DTE::SetPdm(class DISPLAY_MAP *)",
    "protected: virtual unsigned long __thiscall LOGON_HOURS_CONTROL::OnQHitTest(class XYPOINT const &)",
    "public: unsigned int __thiscall SCROLLBAR::QueryMax(void)const",
    "public: __thiscall GRAPHICAL_BUTTON::~GRAPHICAL_BUTTON(void)",
    "public: __thiscall NT_GROUP_BROWSER_DIALOG::NT_GROUP_BROWSER_DIALOG(unsigned short const *,struct HWND__ *,class NT_USER_BROWSER_DIALOG *,unsigned short const *,unsigned short const *)",
    "public: int __thiscall XYRECT::QueryBottom(void)const",
    "protected: virtual int __thiscall OUTLINE_LISTBOX::CD_Char(unsigned short,unsigned short)",
    "public: void __thiscall OWNER_WINDOW::SetFocus(unsigned int)",
    "private: int __thiscall ARRAY_CONTROLVAL_CID_PAIR::WithinRange(unsigned int)const",
    "public: virtual void __thiscall LBI::Paint(class LISTBOX *,struct HDC__ *,struct tagRECT const *,struct GUILTT_INFO *)const",
    "public: __thiscall MSGPOPUP_DIALOG::MSGPOPUP_DIALOG(struct HWND__ *,class NLS_STR const &,long,enum MSG_SEVERITY,unsigned long,unsigned int,unsigned int,long,unsigned long)",
    "public: void __thiscall LIST_CONTROL::DeleteAllItems(void)",
    "public: struct HFONT__ * __thiscall DEVICE_CONTEXT::SelectFont(struct HFONT__ *)",
    "protected: virtual class LBI * __thiscall USER_BROWSER_LB::OnNewItem(unsigned int)",
    "protected: __thiscall LIST_CONTROL::~LIST_CONTROL(void)",
    "public: static void __stdcall POPUP::SetCaption(long)",
    "public: class CONTROL_VALUE * __thiscall CONTROLVAL_CID_PAIR::QueryContVal(void)const",
    "private: __thiscall CONTROL_ENTRY::CONTROL_ENTRY(class CONTROL_WINDOW *)",
    "public: __thiscall ARROW_BUTTON::ARROW_BUTTON(class OWNER_WINDOW *,unsigned int,unsigned int,unsigned int,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long)",
    "public: unsigned short const * __thiscall ITER_DEVICE::operator()(void)",
    "protected: virtual unsigned long __thiscall LOGON_HOURS_CONTROL::OnQMouseActivate(class QMOUSEACT_EVENT const &)",
    "public: void __thiscall WINDOW::QueryWindowRect(class XYRECT *)const",
    "protected: virtual int __thiscall DISPATCHER::OnMove(class MOVE_EVENT const &)",
    "public: __thiscall LOGON_HOURS_CONTROL::~LOGON_HOURS_CONTROL(void)",
    "public: __thiscall UI_EXT_MGR::UI_EXT_MGR(class UI_EXT_MGR_IF *,unsigned long,unsigned long)",
    "public: long __thiscall SLIST_OF_NLS_STR::Add(class NLS_STR const *)",
    "public: void __thiscall ELAPSED_TIME_CONTROL::SetSecondValue(long)",
    "public: __thiscall OPEN_LBOX_BASE::OPEN_LBOX_BASE(class OWNER_WINDOW *,unsigned int,class NLS_STR const &,class NLS_STR const &)",
    "public: __thiscall ALLOC_STR::~ALLOC_STR(void)",
    "protected: static int __stdcall WINDOW::CalcFixedHeight(struct HWND__ *,unsigned int *)",
    "public: __thiscall SLIST_OF_OS_SID::SLIST_OF_OS_SID(int)",
    "protected: virtual void __thiscall RADIO_GROUP::SaveValue(int)",
    "protected: int __thiscall H_SPLITTER_BAR::IsWithinHitZone(class XYPOINT const &)",
    "public: int __thiscall MENU_BASE::QueryItemCount(void)const",
    "public: int __thiscall LIST_CONTROL::QuerySelCount(void)const",
    "protected: virtual unsigned long __thiscall PROMPT_FOR_ANY_DC_DLG::QueryHelpContext(void)",
    "protected: virtual int __thiscall LBI::IsDestroyable(void)",
    "protected: __thiscall STRING_LIST_CONTROL::STRING_LIST_CONTROL(class OWNER_WINDOW *,unsigned int,int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *)",
    "protected: virtual void __thiscall PROC_TIMER::DispatchTimer(void)",
    "public: __thiscall ALIAS_STR::ALIAS_STR(unsigned short const *)",
    "protected: virtual void __thiscall DIALOG_WINDOW::OnControlError(unsigned int,long)",
    "protected: virtual void __thiscall CONTROL_VALUE::SaveValue(int)",
    "protected: void __thiscall NT_USER_BROWSER_DIALOG::UpdateButtonState(void)",
    "public: __thiscall MAGIC_GROUP::MAGIC_GROUP(class OWNER_WINDOW *,unsigned int,int,unsigned int,class CONTROL_GROUP *)",
    "public: void __thiscall GET_FNAME_BASE_DLG::SetHookProc(unsigned long)",
    "protected: virtual int __thiscall LISTBOX::CD_VKey(unsigned short,unsigned short)",
    "public: struct HICON__ * __thiscall APP_WINDOW::QueryIcon(void)const",
    "public: long __thiscall ELAPSED_TIME_CONTROL::QueryMinuteValue(void)const",
    "public: long __thiscall WINDOW::QueryText(unsigned short *,unsigned int)const",
    "public: void __thiscall WINDOW::Invalidate(class XYRECT const &)",
    "public: __thiscall SPIN_SLE_VALID_SECOND::SPIN_SLE_VALID_SECOND(class OWNER_WINDOW *,unsigned int,long,long,long,long,int)",
    "protected: __thiscall MSG_DIALOG_BASE::MSG_DIALOG_BASE(struct HWND__ *,unsigned short const *,unsigned int)",
    "protected: int __thiscall USER_BROWSER_LB::IsSelectionExpandableGroup(class USER_BROWSER_LBI const *,int)const",
    "private: int __thiscall OWNER_WINDOW::AddControl(class CONTROL_WINDOW *)",
    "public: void __thiscall CHANGEABLE_SPIN_ITEM::SetRange(unsigned long)",
    "public: class STLBITEM * __thiscall STATELB::QueryItem(void)const",
    "protected: virtual void __thiscall MAGIC_GROUP::RestoreValue(int)",
    "protected: virtual int __thiscall APP_WINDOW::MayRestore(void)",
    "protected: void __thiscall OPEN_DIALOG_BASE::CloseFile(class OPEN_LBI_BASE *)",
    "protected: virtual long __thiscall APP_WINDOW::DispatchMessageW(class EVENT const &)",
    "public: struct HACCEL__ * __thiscall ACCELTABLE::QueryHandle(void)const",
    "protected: virtual int __thiscall CONSOLE_ELLIPSIS::QueryStrLen(class NLS_STR)",
    "private: void __thiscall LOGON_HOURS_CONTROL::Beep(void)const",
    "public: void __thiscall WINDOW::QueryClientRect(struct tagRECT *)const",
    "public: long __thiscall BROWSER_DOMAIN_CB::AddItem(class BROWSER_DOMAIN *)",
    "protected: long __thiscall BASE_ELLIPSIS::SetEllipsisLeft(class NLS_STR *)",
    "public: void __thiscall DEVICE_CONTEXT::FrameRect(struct tagRECT const *,struct HBRUSH__ *)const",
    "protected: virtual int __thiscall APP_WINDOW::OnCloseReq(void)",
    "public: virtual unsigned short __thiscall OLLB_ENTRY::QueryLeadingChar(void)const",
    "public: int __thiscall WINDOW::QueryTextLength(void)const",
    "public: __thiscall BLT_LISTBOX::~BLT_LISTBOX(void)",
    "public: __thiscall ARRAY_CONTROLVAL_CID_PAIR::ARRAY_CONTROLVAL_CID_PAIR(class CONTROLVAL_CID_PAIR *,unsigned int,int)",
    "public: void __thiscall NT_USER_BROWSER_DIALOG::SetCurrentDomainFocus(class BROWSER_DOMAIN *)",
    "public: __thiscall SLT_ELLIPSIS::SLT_ELLIPSIS(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *,enum ELLIPSIS_STYLE)",
    "protected: virtual long __thiscall WIN32_THREAD::PreMain(void)",
    "protected: void __thiscall GET_FNAME_BASE_DLG::InitialOFN(void)",
    "public: __thiscall POPUP_MENU::~POPUP_MENU(void)",
    "public: enum _SID_NAME_USE __thiscall USER_BROWSER_LBI::QueryType(void)const",
    "public: virtual void __thiscall UI_MENU_EXT_MGR::MenuInitExtensions(void)",
    "protected: virtual int __thiscall GRAPHICAL_BUTTON_WITH_DISABLE::CD_Draw(struct tagDRAWITEMSTRUCT *)",
    "public: virtual void __thiscall SPIN_SLE_NUM::Update(void)",
    "public: __thiscall DLGLOAD::DLGLOAD(class IDRESOURCE const &,struct HWND__ *,class PROC_INSTANCE const &,int)",
    "protected: void __thiscall SPIN_GROUP::SetCurrentField(class SPIN_ITEM *)",
    "public: __thiscall SPIN_ITEM::SPIN_ITEM(class CONTROL_WINDOW *)",
    "void __stdcall `vector vbase constructor iterator'(void *,unsigned int,int,void * (__thiscall*)(void *))",
    "public: int __thiscall BROWSER_DOMAIN_LBI_PB::IsTargetDomain(void)const",
    "public: static unsigned long __stdcall BLT_MASTER_TIMER::ClearMasterTimerHotkey(void)",
    "public: int __thiscall INTL_PROFILE::QueryYearPos(void)const",
    "int __stdcall MsgPopup(class OWNINGWND const &,long,enum MSG_SEVERITY,unsigned long,unsigned int,class NLS_STR * * const,unsigned int)",
    "protected: virtual class UI_EXT * __thiscall UI_EXT_MGR::W_LoadExtension(unsigned short const *,unsigned long)",
    "private: int __thiscall LOGON_HOURS_CONTROL::DrawBackground(class PAINT_DISPLAY_CONTEXT &)const",
    "protected: __thiscall LIST_CONTROL::LIST_CONTROL(class OWNER_WINDOW *,unsigned int,int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *)",
    "public: void __thiscall DEVICE_CONTEXT::InvertRect(struct tagRECT const *)const",
    "private: void __thiscall HIER_LBI::SetIndentLevel(void)",
    "public: void __thiscall STATE2_BUTTON_CONTROL::SetCheck(int)",
    "public: virtual long __thiscall DM_DTE::AppendDataTo(class NLS_STR *)const",
    "public: struct HPEN__ * __thiscall DEVICE_CONTEXT::SelectPen(struct HPEN__ *)",
    "public: __thiscall ALLOC_STR::ALLOC_STR(unsigned short *,unsigned int)",
    "protected: static void __stdcall WINDOW::SetClientGeneratedMsgFlag(int)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnClick(class CONTROL_EVENT const &)",
    "public: void __thiscall SCROLLBAR::SetRange(unsigned int,unsigned int)",
    "CloseUserBrowser",
    "public: unsigned long __thiscall OPEN_LBI_BASE::QueryFileID(void)const",
    "public: int __thiscall INTL_PROFILE::QueryDayPos(void)const",
    "public: __thiscall USER_LBI_CACHE::USER_LBI_CACHE(int)",
    "protected: virtual long __thiscall CONTROL_WINDOW::CD_Guiltt(int,class NLS_STR *)",
    "public: __thiscall FILE3_ENUM_ITER::~FILE3_ENUM_ITER(void)",
    "public: virtual __thiscall DOMAIN_FILL_THREAD::~DOMAIN_FILL_THREAD(void)",
    "public: void * __thiscall WIN32_HANDLE::QueryHandle(void)const",
    "public: void __thiscall SLT_ELLIPSIS::ClearText(void)",
    "protected: __thiscall DM_DTE::DM_DTE(void)",
    "protected: int __thiscall NT_USER_BROWSER_DIALOG::IsBrowsingEnabled(void)const",
    "public: unsigned short const * __thiscall NLS_STR::QueryPch(void)const",
    "protected: virtual int __thiscall BLT_LISTBOX::CD_Char(unsigned short,unsigned short)",
    "public: static long __stdcall POPUP::Init(void)",
    "public: class XYRECT & __thiscall XYRECT::Inflate(class XYDIMENSION)",
    "public: class RADIO_BUTTON * __thiscall RADIO_GROUP::operator[](unsigned int)",
    "public: __thiscall LB_COL_WIDTHS::~LB_COL_WIDTHS(void)",
    "public: class XYRECT & __thiscall XYRECT::AdjustRight(int)",
    "public: unsigned int __thiscall DISPLAY_MAP::QueryID(void)const",
    "protected: virtual unsigned long __thiscall DISPATCHER::OnQMouseActivate(class QMOUSEACT_EVENT const &)",
    "public: long __thiscall ACCOUNT_NAMES_MLE::CanonicalizeNames(unsigned short const *,class STRLIST *)",
    "public: static void __stdcall WIN32_FONT_PICKER::InitCHOOSEFONT(struct tagCHOOSEFONTW *,struct tagLOGFONTW *,struct HWND__ *)",
    "public: unsigned short const * __thiscall SERVER1_ENUM_OBJ::QueryComment(void)const",
    "public: __thiscall WIN32_EVENT::~WIN32_EVENT(void)",
    "protected: virtual void __thiscall HIER_LISTBOX::RefreshChildren(class HIER_LBI *)",
    "public: __thiscall DOMAIN_COMBO::DOMAIN_COMBO(class OWNER_WINDOW *,unsigned int,unsigned int,unsigned int)",
    "public: unsigned int __thiscall MENU_BASE::QueryItemID(int)const",
    "public: int __thiscall BLT_DATE_SPIN_GROUP::QueryDay(void)const",
    "public: unsigned short const * __thiscall USER_BROWSER_LBI::QueryDomainName(void)const",
    "protected: virtual int __thiscall DISPATCHER::OnDestroy(void)",
    "public: __thiscall STRING_LIST_CONTROL::~STRING_LIST_CONTROL(void)",
    "public: __thiscall BROWSER_DOMAIN_LBI_PB::BROWSER_DOMAIN_LBI_PB(class BROWSER_DOMAIN_LBI *)",
    "public: static long __stdcall BLT::Init(struct HINSTANCE__ *,unsigned int,unsigned int,unsigned int,unsigned int)",
    "public: __thiscall SPIN_GROUP::SPIN_GROUP(class OWNER_WINDOW *,unsigned int,unsigned int,unsigned int,int)",
    "public: int __thiscall SPIN_GROUP::JumpPrevField(void)",
    "public: __thiscall WIN32_MUTEX::~WIN32_MUTEX(void)",
    "public: long __thiscall HIER_LISTBOX::ExpandItem(int)",
    "long __stdcall QueryWinIni(class NLS_STR const &,unsigned short,class NLS_STR *,class NLS_STR const &)",
    "public: struct _POLICY_PRIMARY_DOMAIN_INFO const * __thiscall LSA_PRIMARY_DOM_INFO_MEM::QueryPtr(void)const",
    "protected: virtual unsigned long __thiscall NT_GLOBALGROUP_BROWSER_DIALOG::QueryHelpContext(void)",
    "public: __thiscall LISTBOX::~LISTBOX(void)",
    "public: __thiscall ARROW_BUTTON::ARROW_BUTTON(class OWNER_WINDOW *,unsigned int,unsigned int,unsigned int,unsigned int)",
    "private: void __thiscall LBI_HEAP::AdjustDownwards(int)",
    "public: long __thiscall BROWSER_DOMAIN::GetDomainInfo(class NT_USER_BROWSER_DIALOG *,class ADMIN_AUTHORITY const *)",
    "public: int __thiscall ARRAY_LIST_CONTROLVAL_CID_PAIR::Remove(class CONTROLVAL_CID_PAIR const &)",
    "public: long __thiscall GET_FNAME_BASE_DLG::SetInitialDir(class NLS_STR const &)",
    "public: __thiscall SUBJECT_BITMAP_BLOCK::~SUBJECT_BITMAP_BLOCK(void)",
    "public: long __thiscall SLIST_OF_USER_BROWSER_LBI::Add(class USER_BROWSER_LBI const *)",
    "public: virtual struct HWND__ * __thiscall DIALOG_WINDOW::QueryRobustHwnd(void)const",
    "private: static void __stdcall HIER_LBI::SetDestroyable(int)",
    "public: long __thiscall NLS_STR::LoadSystem(long)",
    "public: __thiscall LOCAL_ATOM::~LOCAL_ATOM(void)",
    "protected: virtual void __thiscall TIMER::DispatchTimer(void)",
    "protected: virtual int __thiscall DISPATCHER::OnResize(class SIZE_EVENT const &)",
    "public: __thiscall BLT_DATE_SPIN_GROUP::BLT_DATE_SPIN_GROUP(class OWNER_WINDOW *,class INTL_PROFILE const &,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int)",
    "protected: virtual unsigned short const * __thiscall DIALOG_WINDOW::QueryHelpFile(unsigned long)",
    "public: virtual void __thiscall CONTROL_VALUE::SetControlValueFocus(void)",
    "protected: static unsigned short const * __stdcall CONTROL_WINDOW::QueryComboboxClassName(void)",
    "public: int __thiscall HIER_LBI::HasChildren(void)",
    "public: virtual unsigned long __thiscall CHANGEABLE_SPIN_ITEM::QueryBigIncValue(void)const",
    "protected: virtual int __thiscall H_SPLITTER_BAR::OnPaintReq(void)",
    "protected: void __thiscall NT_GROUP_BROWSER_DIALOG::SetSourceDialog(class NT_GROUP_BROWSER_DIALOG *)",
    "public: class USER_BROWSER_LB * __thiscall NT_GROUP_BROWSER_DIALOG::QuerySourceListbox(void)",
    "protected: virtual void __thiscall RADIO_GROUP::RestoreValue(int)",
    "public: int __thiscall SPIN_GROUP::JumpNextField(void)",
    "protected: virtual int __thiscall H_SPLITTER_BAR::QueryActiveArea(void)",
    "public: __thiscall ITER_SL_USER_BROWSER_LBI::~ITER_SL_USER_BROWSER_LBI(void)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnFocus(class FOCUS_EVENT const &)",
    "public: unsigned int __thiscall BIT_MAP::QueryWidth(void)const",
    "public: __thiscall MOUSE_EVENT::MOUSE_EVENT(unsigned int,unsigned int,long)",
    "public: struct HBITMAP__ * __thiscall DEVICE_CONTEXT::SelectBitmap(struct HBITMAP__ *)",
    "public: long __thiscall GET_FNAME_BASE_DLG::QueryFileTitle(class NLS_STR *)const",
    "OpenUserBrowser",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnActivation(class ACTIVATION_EVENT const &)",
    "private: struct _LSA_TRANSLATED_SID const * __thiscall LSA_TRANSLATED_SID_MEM::QueryPtr(void)const",
    "private: long __thiscall SPIN_SLT_SEPARATOR::Initialize(void)",
    "public: __thiscall DLIST_OF_SPIN_ITEM::~DLIST_OF_SPIN_ITEM(void)",
    "public: virtual __thiscall STLBITEM::~STLBITEM(void)",
    "protected: unsigned long __thiscall BASE_SET_FOCUS_DLG::QuerySuppliedHelpContext(void)",
    "public: virtual void __thiscall SPIN_GROUP::SaveValue(int)",
    "protected: virtual int __thiscall MSG_DIALOG_BASE::ActionOnError(long)",
    "public: __thiscall SPIN_GROUP::~SPIN_GROUP(void)",
    "public: __thiscall USER_BROWSER_LB::USER_BROWSER_LB(class OWNER_WINDOW *,unsigned int)",
    "public: class NLS_STR * __thiscall SLIST_OF_NLS_STR::Remove(class ITER_SL_NLS_STR &)",
    "public: __thiscall BIT_MAP::~BIT_MAP(void)",
    "public: void __thiscall SLIST_OF_ULC_API_BUFFER::Clear(void)",
    "protected: virtual void __thiscall EDIT_CONTROL::SetControlValueFocus(void)",
    "ShellDlgProc",
    "int __stdcall MsgPopup(class OWNINGWND const &,long,enum MSG_SEVERITY,unsigned int,unsigned int)",
    "public: static class DIALOG_WINDOW * __stdcall HWND_DLGPTR_CACHE::Find(struct HWND__ *)",
    "public: int __thiscall INTL_PROFILE::IsHourLZero(void)const",
    "public: long __thiscall DEVICE_COMBO::Refresh(void)",
    "public: int __thiscall DISPLAY_MAP::Paint(struct HDC__ *,int,int)const",
    "public: __thiscall FONT::FONT(struct tagLOGFONTW const &)",
    "public: __thiscall NT_GROUP_ENUM_ITER::~NT_GROUP_ENUM_ITER(void)",
    "public: long __thiscall SLIST_OF_UI_EXT::Append(class UI_EXT const *)",
    "public: __thiscall OUTLINE_LISTBOX::OUTLINE_LISTBOX(class OWNER_WINDOW *,unsigned int,int)",
    "public: long __thiscall EXPANDABLE_DIALOG::Process(int *)",
    "public: void __thiscall BLT_MASTER_TIMER::ResetIterator(void)",
    "public: __thiscall BASE_PASSWORD_DIALOG::BASE_PASSWORD_DIALOG(struct HWND__ *,unsigned short const *,unsigned int,unsigned int,unsigned long,unsigned short const *,unsigned int,unsigned int,unsigned short const *,unsigned int,unsigned short const *)",
    "public: __thiscall BASE::BASE(class BASE const &)",
    "public: long __thiscall WIN32_THREAD::SetPriority(int)",
    "public: __thiscall STATIC_TEXT_CONTROL::STATIC_TEXT_CONTROL(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *)",
    "int __stdcall CommDlgHookProc(struct HWND__ *,unsigned short,unsigned int,long)",
    "public: unsigned int __thiscall SCROLLBAR::QueryMin(void)const",
    "public: void __thiscall BROWSER_DOMAIN_LBI::W_Paint(class BROWSER_DOMAIN_CB *,class LISTBOX *,struct HDC__ *,struct tagRECT const *,struct GUILTT_INFO *)const",
    "public: virtual long __thiscall SPIN_ITEM::QueryAccCharPos(unsigned short)",
    "protected: virtual long __thiscall WIN32_THREAD::PostMain(void)",
    "public: int __thiscall DEVICE_CONTEXT::BitBlt(class XYPOINT const &,class XYDIMENSION,class DEVICE_CONTEXT const &,class XYPOINT const &,unsigned long)",
    "public: unsigned char * __thiscall BLT_SCRATCH::QueryPtr(void)const",
    "protected: __thiscall STATE2_BUTTON_CONTROL::STATE2_BUTTON_CONTROL(class OWNER_WINDOW *,unsigned int)",
    "private: long __thiscall DIALOG_WINDOW::Validate(void)",
    "public: __thiscall SOLID_BRUSH::SOLID_BRUSH(int)",
    "public: __thiscall SPIN_SLE_STR::SPIN_SLE_STR(class OWNER_WINDOW *,unsigned int,long,long,int,unsigned int)",
    "public: virtual void __thiscall OWNER_DRAW_MULTILINE_STR_DTE::Paint(struct HDC__ *,struct tagRECT const *)const",
    "protected: virtual int __thiscall CONSOLE_ELLIPSIS::QueryLimit(void)",
    "public: unsigned long __thiscall USER_BROWSER_LBI::QueryUserAccountFlags(void)const",
    "public: __thiscall XYPOINT::XYPOINT(struct tagPOINT const &)",
    "protected: __thiscall WIN32_SYNC_BASE::WIN32_SYNC_BASE(void *)",
    "public: __thiscall OPEN_DIALOG_BASE::~OPEN_DIALOG_BASE(void)",
    "public: __thiscall COMBOBOX::COMBOBOX(class OWNER_WINDOW *,unsigned int,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *)",
    "public: unsigned int __thiscall BLT_LISTBOX::QuerySingleLineHeight(void)",
    "public: int __thiscall MENU_BASE::IsSeparator(int)const",
    "protected: unsigned char const * __thiscall ENUM_OBJ_BASE::QueryBufferPtr(void)const",
    "public: __thiscall MLE::~MLE(void)",
    "public: virtual int __thiscall BROWSER_DOMAIN_LBI_PB::Compare(class LBI const *)const",
    "protected: virtual void __thiscall STLBITEM::Paint(class LISTBOX *,struct HDC__ *,struct tagRECT const *,struct GUILTT_INFO *)const",
    "public: virtual void __thiscall STR_DTE::Paint(struct HDC__ *,struct tagRECT const *)const",
    "public: long __thiscall NT_GROUP_ENUM_OBJ::QueryComment(class NLS_STR *)const",
    "public: void __thiscall GRAPHICAL_BUTTON::SetStatus(unsigned int)",
    "private: void __thiscall LOGON_HOURS_CONTROL::CalcGridRect(class XYRECT *)const",
    "public: void __thiscall DISK_SPACE_SUBCLASS::SetDSFieldName(long)",
    "public: unsigned short const * __thiscall OLLB_ENTRY::QueryServer(void)const",
    "public: void __thiscall LOGON_HOURS_CONTROL::DoPermitButton(void)",
    "protected: virtual int __thiscall DISPATCHER::OnUserMessage(class EVENT const &)",
    "protected: virtual unsigned int __thiscall ARROW_BUTTON::QueryEventEffects(class CONTROL_EVENT const &)",
    "public: __thiscall SLIST_OF_UI_EXT::~SLIST_OF_UI_EXT(void)",
    "public: long __thiscall SLIST_OF_OS_SID::Add(class OS_SID const *)",
    "public: __thiscall PROGRESS_CONTROL::~PROGRESS_CONTROL(void)",
    "protected: static int __stdcall OWNER_WINDOW::CalcFixedCDMeasure(struct HWND__ *,struct tagMEASUREITEMSTRUCT *)",
    "protected: virtual enum FOCUS_CACHE_SETTING __thiscall BASE_SET_FOCUS_DLG::ReadFocusCache(unsigned short const *)const",
    "protected: virtual long __thiscall SPIN_SLT_SEPARATOR::GetAccKey(class NLS_STR *)",
    "public: class SAM_DOMAIN * __thiscall BROWSER_DOMAIN::QueryAccountDomain(void)const",
    "public: static long __stdcall ACCOUNT_NAMES_MLE::CheckNameType(enum _SID_NAME_USE,unsigned long)",
    "public: __thiscall AUTO_CURSOR::~AUTO_CURSOR(void)",
    "public: __thiscall ITER_SL_STRING_BITSET_PAIR::~ITER_SL_STRING_BITSET_PAIR(void)",
    "public: __thiscall RADIO_GROUP::RADIO_GROUP(class OWNER_WINDOW *,unsigned int,int,unsigned int,class CONTROL_GROUP *)",
    "public: __thiscall CONTROL_WINDOW::CONTROL_WINDOW(class OWNER_WINDOW *,unsigned int)",
    "public: __thiscall BROWSER_DOMAIN_CB::~BROWSER_DOMAIN_CB(void)",
    "public: __thiscall WIN_ELLIPSIS::~WIN_ELLIPSIS(void)",
    "public: __thiscall TIMER_BASE::~TIMER_BASE(void)",
    "public: int __thiscall OUTLINE_LISTBOX::FindItem(unsigned short const *,unsigned short const *)const",
    "public: __thiscall SPIN_ITEM::~SPIN_ITEM(void)",
    "protected: void __thiscall HEAP_BASE::SetAutoReadjust(int)",
    "public: class BROWSER_DOMAIN * __thiscall NT_USER_BROWSER_DIALOG::QueryCurrentDomainFocus(void)const",
    "public: __thiscall TIMER_BASE::TIMER_BASE(unsigned long,int)",
    "public: unsigned long __thiscall CHANGEABLE_SPIN_ITEM::QueryRange(void)const",
    "public: __thiscall STATELB::STATELB(int * const,class OWNER_WINDOW *,unsigned int,int,int,enum FontType)",
    "public: long __thiscall SLIST_OF_ULC_API_BUFFER::Append(class ULC_API_BUFFER const *)",
    "public: __thiscall BASE_PASSWORD_DIALOG::~BASE_PASSWORD_DIALOG(void)",
    "public: int __thiscall LIST_CONTROL::QueryTopIndex(void)const",
    "public: __thiscall XYRECT::XYRECT(class XYPOINT,class XYPOINT)",
    "public: static void __stdcall BLTIMP::LeaveResourceCritSect(void)",
    "protected: virtual int __thiscall APP_WINDOW::OnMenuInit(class MENU_EVENT const &)",
    "public: __thiscall STATE2_BUTTON_CONTROL::~STATE2_BUTTON_CONTROL(void)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnLMouseButtonUp(class MOUSE_EVENT const &)",
    "protected: virtual int __thiscall SPIN_SLE_NUM_VALID::OnEnter(class CONTROL_EVENT const &)",
    "public: class XYRECT const & __thiscall PAINT_DISPLAY_CONTEXT::QueryInvalidRect(void)const",
    "public: __thiscall LAZY_LISTBOX::LAZY_LISTBOX(class OWNER_WINDOW *,unsigned int,int,enum FontType)",
    "public: __thiscall H_SPLITTER_BAR::H_SPLITTER_BAR(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long)",
    "public: long __thiscall POPUP_MENU::Track(class PWND2HWND const &,unsigned int,int,int,struct tagRECT const *)const",
    "public: __thiscall BIT_MAP::BIT_MAP(struct HBITMAP__ *)",
    "protected: long __thiscall NT_USER_BROWSER_DIALOG::OnDomainChange(class BROWSER_DOMAIN *,class ADMIN_AUTHORITY const *)",
    "protected: void __thiscall NT_FIND_ACCOUNT_DIALOG::UpdateButtonState(void)",
    "public: __thiscall SLE::SLE(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *,unsigned int)",
    "public: void * __thiscall LSA_REF_DOMAIN_MEM::QueryPSID(unsigned long)const",
    "public: __thiscall STATIC_TEXT_CONTROL::~STATIC_TEXT_CONTROL(void)",
    "public: __thiscall SLE_FONT::SLE_FONT(class OWNER_WINDOW *,unsigned int,enum FontType)",
    "public: unsigned int __thiscall LIST_CONTROL::QueryItemHeight(unsigned int)const",
    "public: unsigned int __thiscall TIMER_BASE::QueryID(void)const",
    "public: static long __stdcall CLIENT_WINDOW::Init(void)",
    "private: long __thiscall BASE_SET_FOCUS_DLG::ProcessNetPath(class NLS_STR *,long *)",
    "public: __thiscall BLT_SCRATCH::~BLT_SCRATCH(void)",
    "public: virtual void __thiscall UI_EXT_MGR::UnloadExtensions(void)",
    "public: void __thiscall BROWSER_DOMAIN_CB::SelectItem(class BROWSER_DOMAIN *)",
    "protected: long __thiscall GET_FNAME_BASE_DLG::SetBuffer(class BUFFER *,class STRLIST &)",
    "public: __thiscall ICANON_SLE::ICANON_SLE(class OWNER_WINDOW *,unsigned int,unsigned int,int)",
    "public: long __thiscall CONTROL_WINDOW::QueryError(void)const",
    "public: void * __thiscall USER_BROWSER_LBI::QueryPSID(void)const",
    "public: class XYRECT & __thiscall XYRECT::AdjustTop(int)",
    "public: struct _UNICODE_STRING const * __thiscall SAM_RID_ENUMERATION_MEM::QueryUnicodeName(unsigned long)const",
    "public: __thiscall AUTO_CURSOR::AUTO_CURSOR(unsigned short const *)",
    "protected: virtual void __thiscall USER_LBI_CACHE::LockCache(void)",
    "public: enum UI_SystemSid __thiscall USER_BROWSER_LBI::QueryUISysSid(void)const",
    "public: void __thiscall GET_FNAME_BASE_DLG::SetHelpActive(int)",
    "protected: virtual int __thiscall DISPATCHER::OnKeyDown(class VKEY_EVENT const &)",
    "protected: virtual int __thiscall DISPATCHER::OnActivation(class ACTIVATION_EVENT const &)",
    "public: long __thiscall APP_WINDOW::SetPlacement(struct tagWINDOWPLACEMENT const *)const",
    "public: __thiscall SLT::SLT(class OWNER_WINDOW *,unsigned int)",
    "public: long __thiscall BASE_PASSWORD_DIALOG::QueryPassword(class NLS_STR *)",
    "protected: int __thiscall HEAP_BASE::IsAutoReadjusting(void)const",
    "public: __thiscall FONT::FONT(enum FontType)",
    "public: unsigned int __thiscall NLS_STR::QueryTextLength(void)const",
    "protected: virtual long __thiscall FOCUSDLG_DATA_THREAD::Main(void)",
    "protected: class NT_GROUP_BROWSER_DIALOG * __thiscall NT_GROUP_BROWSER_DIALOG::QuerySourceDialog(void)",
    "public: __thiscall SPIN_GROUP::SPIN_GROUP(class OWNER_WINDOW *,unsigned int,unsigned int,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,int)",
    "protected: int __thiscall BLT_LISTBOX::CD_Char_HAWforHawaii(unsigned short,unsigned short,class HAW_FOR_HAWAII_INFO *)",
    "public: static long __stdcall BLT::InitDLL(void)",
    "public: class USER_BROWSER_LBI_CACHE * __thiscall USER_BROWSER_LB::QueryCurrentCache(void)const",
    "public: class CONTROL_WINDOW * __thiscall ITER_CTRL::Next(void)",
    "private: virtual class LBI * __thiscall BLT_LISTBOX::RequestLBI(struct tagDRAWITEMSTRUCT const *)",
    "public: __thiscall RITER_DL_SPIN_ITEM::~RITER_DL_SPIN_ITEM(void)",
    "private: void __thiscall APPLICATION::DisplayCtError(long)",
    "public: unsigned int __thiscall CONTROL_ENTRY::QueryCid(void)const",
    "public: unsigned short const * __thiscall SERVER1_ENUM_OBJ::QueryName(void)const",
    "public: int __thiscall STRING_LIST_CONTROL::QueryItemLength(int)const",
    "private: void __thiscall LOGON_HOURS_CONTROL::EraseSelection(class DISPLAY_CONTEXT const &)",
    "private: int __thiscall HIER_LBI::QueryLBIndex(void)",
    "protected: virtual int __thiscall DISPATCHER::OnPaintReq(void)",
    "public: __thiscall GET_SAVE_FILENAME_DLG::GET_SAVE_FILENAME_DLG(class OWNER_WINDOW *,unsigned short const *,unsigned long)",
    "public: virtual __thiscall BROWSER_DOMAIN_LBI_PB::~BROWSER_DOMAIN_LBI_PB(void)",
    "public: static long __stdcall BLTIMP::EnterBLTCritSect(void)",
    "public: unsigned long __thiscall DEVICE_CONTEXT::GetBkColor(void)const",
    "private: void __thiscall MSGPOPUP_DIALOG::FillButtonArray(unsigned int,int *,int *)",
    "public: unsigned long __thiscall DEVICE_CONTEXT::SetBkColor(unsigned long)",
    "public: __thiscall ARRAY_LIST_CONTROLVAL_CID_PAIR::~ARRAY_LIST_CONTROLVAL_CID_PAIR(void)",
    "protected: virtual long __thiscall DOMAIN_FILL_THREAD::Main(void)",
    "public: __thiscall ASSOCHWNDPDLG::~ASSOCHWNDPDLG(void)",
    "protected: virtual unsigned short __thiscall STLBITEM::QueryLeadingChar(void)const",
    "public: __thiscall CHECKBOX::~CHECKBOX(void)",
    "public: int __thiscall SPIN_GROUP::ChangeFieldValue(unsigned short,int)",
    "public: int __thiscall SET_CONTROL::HandleOnMouseMove(class LISTBOX *,class MOUSE_EVENT const &)",
    "protected: virtual int __thiscall DISPATCHER::OnKeyUp(class VKEY_EVENT const &)",
    "public: __thiscall FONT::~FONT(void)",
    "public: __thiscall BLT_COMBOBOX::BLT_COMBOBOX(class OWNER_WINDOW *,unsigned int,int,enum FontType)",
    "public: __thiscall PASSWORD_CONTROL::~PASSWORD_CONTROL(void)",
    "public: unsigned short const * __thiscall USER_BROWSER_LBI::QueryDisplayName(void)const",
    "protected: virtual void __thiscall COMBOBOX::RestoreValue(int)",
    "public: long __thiscall WIN32_THREAD::Terminate(unsigned int)",
    "public: long __thiscall LSA_TRUST_INFO_MEM::QueryName(unsigned long,class NLS_STR *)const",
    "private: void __thiscall LOGON_HOURS_CONTROL::DrawOneFlatButton(class PAINT_DISPLAY_CONTEXT &,class XYRECT const &,int,struct HBRUSH__ *,struct HPEN__ *,struct HPEN__ *)const",
    "public: class XYDIMENSION __thiscall DEVICE_CONTEXT::QueryTextExtent(unsigned short const *,unsigned int)const",
    "public: void __thiscall CHANGEABLE_SPIN_ITEM::SetBigIncValue(unsigned long)",
    "public: __thiscall ASSOCHWNDPDLG::ASSOCHWNDPDLG(struct HWND__ *,class DIALOG_WINDOW const *)",
    "public: int __thiscall WIN_TIME::QueryMonth(void)const",
    "public: __thiscall SYSTEM_MENU::~SYSTEM_MENU(void)",
    "public: class XYRECT & __thiscall XYRECT::AdjustLeft(int)",
    "public: void __thiscall CLIENT_WINDOW::ReleaseMouse(void)",
    "public: void __thiscall CHANGEABLE_SPIN_ITEM::SetSmallDecValue(unsigned long)",
    "public: int __thiscall RADIO_GROUP::IsMember(unsigned int)",
    "public: int __thiscall BLT_DATE_SPIN_GROUP::QueryMonth(void)const",
    "public: void __thiscall WIN32_THREAD::Sleep(unsigned int)",
    "public: void * __thiscall OS_SID::QueryPSID(void)const",
    "public: unsigned short const * __thiscall UI_DOMAIN::QueryAnyDC(void)const",
    "public: __thiscall STR_DTE_ELLIPSIS::STR_DTE_ELLIPSIS(unsigned short const *,class LISTBOX *,enum ELLIPSIS_STYLE)",
    "public: __thiscall ICANON_SLE::ICANON_SLE(class OWNER_WINDOW *,unsigned int,class XYPOINT,class XYDIMENSION,unsigned long,unsigned short const *,unsigned int,int)",
    "public: int __thiscall DEVICE_CONTEXT::QueryAveCharWidth(void)const",
    "protected: virtual int __thiscall CANCEL_TASK_DIALOG::OnTimer(class TIMER_EVENT const &)",
    "public: __thiscall LM_OLLB::LM_OLLB(class OWNER_WINDOW *,unsigned int,enum SELECTION_TYPE,unsigned short const *,unsigned long,unsigned long)",
    "public: __thiscall MASK_MAP::~MASK_MAP(void)",
    "public: int __thiscall LIST_CONTROL::IsMultSel(void)const",
    "public: unsigned short __thiscall CHAR_EVENT::QueryChar(void)const",
    "public: int __thiscall CLIENT_WINDOW::IsMinimized(void)const",
    "public: static void __stdcall BASE_ELLIPSIS::Term(void)",
    "private: int __thiscall SET_CONTROL::IsOnDragStart(class LISTBOX *,class LISTBOX *,class XYPOINT const &)const",
    "public: void * __thiscall LSA_PRIMARY_DOM_INFO_MEM::QueryPSID(void)const",
    "public: struct HWND__ * __thiscall CONTROL_EVENT::QueryHwnd(void)const",
    "protected: virtual unsigned long __thiscall OPEN_DIALOG_BASE::QueryHelpContext(void)",
    "public: long __thiscall ICON_CONTROL::SetIcon(class IDRESOURCE const &)",
    "public: __thiscall WINDOW::WINDOW(class WINDOW const &)",
    "protected: void __thiscall SLE_STRLB_GROUP::SetState(void)const",
    "public: unsigned short const * __thiscall BROWSER_DOMAIN_LBI::QueryDisplayName(void)const",
    "protected: virtual int __thiscall DISPATCHER::OnLMouseButtonUp(class MOUSE_EVENT const &)",
    "public: unsigned int __thiscall ARRAY_CONTROLVAL_CID_PAIR::QueryCount(void)const",
    "long __stdcall QueryLoggedOnDomainInfo(class NLS_STR *,class NLS_STR *)",
    "protected: virtual int __thiscall DISPATCHER::OnDefocus(class FOCUS_EVENT const &)",
    "public: int __thiscall LIST_CONTROL::QueryCount(void)const",
    "public: class NLS_STR * __thiscall STRING_BITSET_PAIR::QueryString(void)",
    "public: __thiscall ITER_SL_TIMER_BASE::ITER_SL_TIMER_BASE(class SLIST &)",
    "public: int __thiscall BLT_DATE_SPIN_GROUP::IsValid(void)",
    "protected: virtual int __thiscall CLIENT_WINDOW::OnLMouseButtonDblClick(class MOUSE_EVENT const &)",
    "public: void __thiscall SLIST_OF_OS_SID::Clear(void)",
    "protected: virtual long __thiscall CONTROL_GROUP::OnUserAction(class CONTROL_WINDOW *,class CONTROL_EVENT const &)",
    "public: __thiscall XYRECT::XYRECT(class XYRECT const &)",
    "public: unsigned long __thiscall CHANGEABLE_SPIN_ITEM::QueryMin(void)const",
    "public: __thiscall SOLID_BRUSH::~SOLID_BRUSH(void)",
    "public: int __thiscall MENUITEM::IsChecked(void)const",
    "public: __thiscall DISK_SPACE_SUBCLASS::DISK_SPACE_SUBCLASS(class OWNER_WINDOW *,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,long,long,long,long,long,int)",
    "protected: void __thiscall WIN32_THREAD::Exit(unsigned int)",
    "public: int __thiscall DISPATCHER::DoUserMessage(class EVENT const &)",
    "public: void * __thiscall OS_SID::QuerySid(void)const",
    "public: int __thiscall USER_LBI_CACHE::BinarySearch(class LBI *)",
    "public: __thiscall ORDER_GROUP::ORDER_GROUP(class STRING_LISTBOX *,class BUTTON_CONTROL *,class BUTTON_CONTROL *,class CONTROL_GROUP *)",
    "private: void __thiscall LOGON_HOURS_CONTROL::DrawFocusOnHourButton(class DISPLAY_CONTEXT const &,int)const",
    "public: long __thiscall GET_FNAME_BASE_DLG::SetCustomFilter(class STRLIST &,unsigned long)",
    "protected: virtual unsigned short __thiscall OPEN_LBI_BASE::QueryLeadingChar(void)const",
    "public: __thiscall SLT_ELLIPSIS::SLT_ELLIPSIS(class OWNER_WINDOW *,unsigned int,enum ELLIPSIS_STYLE)",
    "public: void __thiscall SLIST_OF_ASSOCHCFILE::Clear(void)",
    "public: int __thiscall MASK_MAP::IsPresent(class BITFIELD *)",
    "public: virtual __thiscall NT_GROUP_BROWSER_DIALOG::~NT_GROUP_BROWSER_DIALOG(void)",
    "public: __thiscall SLIST_OF_CLIENTDATA::SLIST_OF_CLIENTDATA(int)",
    "public: virtual __thiscall WIN32_THREAD::~WIN32_THREAD(void)",
    "public: static void __stdcall POPUP::Term(void)",
    "public: class STRING_BITSET_PAIR * __thiscall ITER_SL_STRING_BITSET_PAIR::Next(void)",
    "public: void __thiscall MENUITEM::SetCheck(int)",
    "public: unsigned int __thiscall MASK_MAP::QueryCount(void)",
    "public: void __thiscall WINDOW::SetSize(class XYDIMENSION,int)",
    "private: long __thiscall GET_FNAME_BASE_DLG::SetStringField(unsigned short * *,class NLS_STR const &)",
    "protected: virtual void __thiscall EDIT_CONTROL::RestoreValue(int)",
    "public: virtual long __thiscall SPIN_SLE_STR::QueryAccCharPos(unsigned short)"
  ],
  "newdev.dll": [
    "InstallNewDevice",
    "ClientSideInstallW",
    "InstallSelectedDevice",
    "WindowsUpdateDriverSearchingPolicyUi",
    "InstallDevInstEx",
    "UpdateDriverForPlugAndPlayDevicesW",
    "InstallDevInst",
    "DevInstallW",
    "RollbackDriver",
    "InstallWindowsUpdateDriver",
    "InstallSelectedDriver",
    "UpdateDriverForPlugAndPlayDevicesA"
  ],
  "nlhtml.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "nlsdl.dll": [
    "DownlevelGetParentLocaleName",
    "DownlevelLocaleNameToLCID",
    "DownlevelGetParentLocaleLCID",
    "DownlevelLCIDToLocaleName"
  ],
  "nmevtmsg.dll": "No exports",
  "nmmkcert.dll": [
    "NmMakeCertCleanup",
    "NmMakeCert"
  ],
  "normaliz.dll": [
    "IdnToNameprepUnicode",
    "IsNormalizedString",
    "IdnToAscii",
    "IdnToUnicode",
    "NormalizeString"
  ],
  "npptools.dll": [
    "GetClassIDFromBlob",
    "FindUnknownBlobCategories",
    "MarshalBlob",
    "SetDwordInBlob",
    "SetClassIDInBlob",
    "RegCreateBlobKey",
    "SetNetworkInfoInBlob",
    "NmRemoveUsedEntry",
    "SetNPPPatternFilterInBlob",
    "SetStringInBlob",
    "NmHeapSize",
    "recursiveDeleteKey",
    "GetNPPBlobFromUI",
    "DestroyNPPBlobTable",
    "LockBlob",
    "NmAddUsedEntry",
    "SelectNPPBlobFromTable",
    "MergeBlob",
    "setKeyAndValue",
    "NmHeapSetMaxSize",
    "SendEvent",
    "GetStringsFromBlob",
    "SetNPPAddressFilterInBlob",
    "GetNPPAddressFilterFromBlob",
    "GetNetworkInfoFromBlob",
    "GetDwordFromBlob",
    "CreateBlob",
    "DestroyBlob",
    "FindOneOf",
    "RaiseNMEvent",
    "GetNPPMacTypeAsNumber",
    "NmHeapFree",
    "GetStringFromBlob",
    "WriteCrackedBlobToFile",
    "CreateNPPInterface",
    "ReadBlobFromFile",
    "GetMacAddressFromBlob",
    "SubkeyExists",
    "NmHeapReallocate",
    "SetNPPTriggerInBlob",
    "WriteBlobToFile",
    "RegOpenBlobKey",
    "UnlockBlob",
    "SetNPPEtypeSapFilter",
    "RemoveFromBlob",
    "SetBoolInBlob",
    "GetNPPEtypeSapFilter",
    "GetNPPPatternFilterFromBlob",
    "GetNPPTriggerFromBlob",
    "DuplicateBlob",
    "SetMacAddressInBlob",
    "FindUnknownBlobTags",
    "GetBoolFromBlob",
    "IsRemoteNPP",
    "NmHeapAllocate",
    "GetNPPBlobTable",
    "UnMarshalBlob",
    "ClearEventData",
    "FilterNPPBlob",
    "ReleaseEventSystem"
  ],
  "ntdll.dll": [
    "ZwCompareTokens",
    "RtlNormalizeProcessParams",
    "ZwVdmControl",
    "RtlMultiByteToUnicodeN",
    "ZwLoadKey2",
    "RtlDecompressBuffer",
    "NtAcceptConnectPort",
    "RtlEqualSid",
    "RtlMultiAppendUnicodeStringBuffer",
    "RtlpNtEnumerateSubKey",
    "LdrInitializeThunk",
    "RtlAppendUnicodeStringToString",
    "NtCreateEvent",
    "NtFilterToken",
    "RtlGetSetBootStatusData",
    "ZwPrivilegeObjectAuditAlarm",
    "ZwTerminateJobObject",
    "RtlAddActionToRXact",
    "KiUserApcDispatcher",
    "NtDelayExecution",
    "RtlUsageHeap",
    "RtlEncodeSystemPointer",
    "RtlGetNextRange",
    "RtlFormatMessage",
    "RtlUnlockHeap",
    "tolower",
    "RtlQueryTimeZoneInformation",
    "ZwQueryEaFile",
    "NtEnumerateKey",
    "RtlProtectHeap",
    "NtDisplayString",
    "RtlExtendedLargeIntegerDivide",
    "RtlUlongByteSwap",
    "RtlGetElementGenericTableAvl",
    "RtlAppendUnicodeToString",
    "NtResumeThread",
    "NtRemoveProcessDebug",
    "NtUnlockVirtualMemory",
    "ZwQueryTimerResolution",
    "isspace",
    "RtlGUIDFromString",
    "NtSetInformationToken",
    "RtlCopyMemoryStreamTo",
    "ZwQueryFullAttributesFile",
    "ZwTerminateProcess",
    "ZwSetInformationJobObject",
    "ZwOpenProcessToken",
    "ZwCreateToken",
    "NtSetTimer",
    "NtListenPort",
    "DbgUiIssueRemoteBreakin",
    "ZwOpenKey",
    "CsrFreeCaptureBuffer",
    "RtlLargeIntegerDivide",
    "NtOpenDirectoryObject",
    "NtOpenProcessToken",
    "RtlCopyLuidAndAttributesArray",
    "RtlGetProcessHeaps",
    "NtMakePermanentObject",
    "ZwWriteVirtualMemory",
    "NtQueryObject",
    "NtResetEvent",
    "NtImpersonateThread",
    "LdrUnlockLoaderLock",
    "RtlInt64ToUnicodeString",
    "ZwFilterToken",
    "PfxRemovePrefix",
    "RtlDeleteRegistryValue",
    "RtlEmptyAtomTable",
    "NtOpenEvent",
    "ZwReplyWaitReplyPort",
    "ZwWaitLowEventPair",
    "RtlAreBitsSet",
    "RtlSubAuthorityCountSid",
    "RtlFreeUnicodeString",
    "NtCreateToken",
    "ZwRequestWaitReplyPort",
    "ZwCreateProcessEx",
    "ZwQueryTimer",
    "NtNotifyChangeMultipleKeys",
    "RtlCreateActivationContext",
    "_strcmpi",
    "RtlQueryInformationActiveActivationContext",
    "LdrEnumResources",
    "LdrInitShimEngineDynamic",
    "RtlDestroyEnvironment",
    "RtlGetNativeSystemInformation",
    "ZwAcceptConnectPort",
    "NtWaitHighEventPair",
    "ZwCreateDebugObject",
    "wcsspn",
    "RtlSetMemoryStreamSize",
    "NtUnloadKeyEx",
    "_strupr",
    "NtAccessCheckByTypeResultList",
    "ZwQueryInformationJobObject",
    "RtlUnicodeStringToOemString",
    "RtlCompareMemoryUlong",
    "ZwCreateDirectoryObject",
    "RtlUnicodeToMultiByteSize",
    "ZwOpenThreadTokenEx",
    "ZwReadRequestData",
    "RtlDeregisterWaitEx",
    "RtlInitMemoryStream",
    "ZwCreateKeyedEvent",
    "iswdigit",
    "NtLoadKey2",
    "NtSetDefaultLocale",
    "ZwCreateJobSet",
    "RtlGetLastWin32Error",
    "RtlSetCriticalSectionSpinCount",
    "RtlIpv4StringToAddressExW",
    "ZwFreeVirtualMemory",
    "NtQuerySystemTime",
    "NtCreateThread",
    "RtlGetDaclSecurityDescriptor",
    "RtlDeleteTimer",
    "ZwSetInformationDebugObject",
    "NtImpersonateAnonymousToken",
    "NtPrivilegeObjectAuditAlarm",
    "ZwOpenDirectoryObject",
    "NtSystemDebugControl",
    "NtQueryTimerResolution",
    "RtlGetGroupSecurityDescriptor",
    "ZwTerminateThread",
    "ZwAccessCheckByTypeAndAuditAlarm",
    "ZwQuerySecurityObject",
    "ZwReplyPort",
    "NtQueryBootOptions",
    "RtlIpv4StringToAddressW",
    "NtCreateNamedPipeFile",
    "NtLoadKey",
    "RtlInitializeHandleTable",
    "RtlFindRange",
    "RtlDeleteAce",
    "RtlFlushSecureMemoryCache",
    "RtlStringFromGUID",
    "ZwLockRegistryKey",
    "RtlEnumProcessHeaps",
    "ZwOpenMutant",
    "KiUserCallbackDispatcher",
    "NtSetEventBoostPriority",
    "ZwDeleteKey",
    "_wtoi",
    "NtQueryDefaultUILanguage",
    "ZwAccessCheckByType",
    "RtlValidSid",
    "NtSuspendThread",
    "RtlGenerate8dot3Name",
    "NtSetSystemPowerState",
    "RtlCheckForOrphanedCriticalSections",
    "CsrIdentifyAlertableThread",
    "NtOpenSymbolicLinkObject",
    "NtPowerInformation",
    "isgraph",
    "NtAreMappedFilesTheSame",
    "RtlGetCallersAddress",
    "NtMakeTemporaryObject",
    "RtlAddAuditAccessObjectAce",
    "RtlExitUserThread",
    "RtlFreeSid",
    "wcsncat",
    "memmove",
    "ZwPrivilegedServiceAuditAlarm",
    "ZwQueryObject",
    "NtTerminateThread",
    "RtlResetRtlTranslations",
    "RtlFindNextForwardRunClear",
    "ZwQueryInformationAtom",
    "DbgUiConnectToDbg",
    "RtlCreateUserThread",
    "ZwEnumerateSystemEnvironmentValuesEx",
    "NtSetInformationFile",
    "RtlIpv6AddressToStringA",
    "RtlValidRelativeSecurityDescriptor",
    "RtlRevertMemoryStream",
    "NtInitiatePowerAction",
    "RtlpNtQueryValueKey",
    "LdrQueryImageFileExecutionOptions",
    "NtSaveKey",
    "_strlwr",
    "ZwImpersonateThread",
    "ZwPowerInformation",
    "ZwWriteRequestData",
    "LdrAlternateResourcesEnabled",
    "RtlTimeToSecondsSince1970",
    "RtlAcquireResourceShared",
    "ZwSetEvent",
    "RtlSubtreePredecessor",
    "RtlCopySidAndAttributesArray",
    "RtlDeregisterWait",
    "RtlComputeCrc32",
    "RtlStatMemoryStream",
    "ZwCreateWaitablePort",
    "ZwCloseObjectAuditAlarm",
    "LdrCreateOutOfProcessImage",
    "NtEnumerateSystemEnvironmentValuesEx",
    "RtlIsRangeAvailable",
    "RtlEnumerateGenericTableWithoutSplaying",
    "ZwUnloadKeyEx",
    "ZwDuplicateToken",
    "ZwRemoveProcessDebug",
    "ZwDisplayString",
    "NtWriteVirtualMemory",
    "RtlUnicodeStringToAnsiString",
    "RtlCreateSecurityDescriptor",
    "ZwDeleteAtom",
    "NtSetInformationObject",
    "NtSetInformationProcess",
    "LdrGetDllHandle",
    "ZwOpenKeyedEvent",
    "RtlUpcaseUnicodeChar",
    "ZwRequestPort",
    "RtlPrefixUnicodeString",
    "ZwQuerySemaphore",
    "KiFastSystemCallRet",
    "RtlFindClearBits",
    "NtOpenIoCompletion",
    "RtlInsertElementGenericTableAvl",
    "NtCreateSymbolicLinkObject",
    "NtQueryInstallUILanguage",
    "NtResumeProcess",
    "_ltoa",
    "RtlRemoteCall",
    "DbgUserBreakPoint",
    "NtQueryInformationToken",
    "RtlNewSecurityGrantedAccess",
    "ZwSetEventBoostPriority",
    "RtlAnsiStringToUnicodeSize",
    "RtlFindSetBits",
    "RtlQueryHeapInformation",
    "_atoi64",
    "ZwSuspendProcess",
    "NtQueryEvent",
    "floor",
    "RtlGetAce",
    "ZwRemoveIoCompletion",
    "NtDeleteObjectAuditAlarm",
    "RtlUnlockMemoryStreamRegion",
    "isdigit",
    "iswspace",
    "RtlIpv6StringToAddressW",
    "_ui64toa",
    "RtlIsNameLegalDOS8Dot3",
    "RtlNtStatusToDosError",
    "RtlNewSecurityObject",
    "NtQueryInformationFile",
    "RtlUpdateTimer",
    "ZwCreateSymbolicLinkObject",
    "RtlCompareMemory",
    "_ultoa",
    "RtlQueryProcessHeapInformation",
    "NtLockFile",
    "RtlCompactHeap",
    "ZwQueryDebugFilterState",
    "KiRaiseUserExceptionDispatcher",
    "sqrt",
    "NtSetVolumeInformationFile",
    "_wcslwr",
    "ZwRaiseException",
    "RtlGetSaclSecurityDescriptor",
    "NtAccessCheckByType",
    "RtlCompareUnicodeString",
    "NtCreateSection",
    "RtlEqualPrefixSid",
    "RtlSetInformationAcl",
    "ZwCancelTimer",
    "RtlInterlockedFlushSList",
    "RtlExpandEnvironmentStrings_U",
    "RtlAddAccessDeniedAce",
    "RtlMergeRangeLists",
    "RtlCreateAtomTable",
    "NtReadFileScatter",
    "NtQueryInformationProcess",
    "wcstoul",
    "strrchr",
    "ZwAccessCheckByTypeResultListAndAuditAlarm",
    "RtlGetCurrentPeb",
    "NtReplyWaitReceivePort",
    "NtCreateMailslotFile",
    "ZwQueryValueKey",
    "isupper",
    "ZwMapUserPhysicalPagesScatter",
    "RtlUnlockBootStatusData",
    "ZwTestAlert",
    "CsrCaptureTimeout",
    "RtlInitNlsTables",
    "NtSetSystemEnvironmentValue",
    "RtlConvertUiListToApiList",
    "RtlEnlargedUnsignedDivide",
    "ZwQuerySection",
    "NtExtendSection",
    "NtSetUuidSeed",
    "CsrCaptureMessageMultiUnicodeStringsInPlace",
    "CsrClientCallServer",
    "RtlQueryDepthSList",
    "CsrCaptureMessageString",
    "RtlGetElementGenericTable",
    "strstr",
    "NtClose",
    "RtlLargeIntegerShiftRight",
    "NtAccessCheckByTypeResultListAndAuditAlarmByHandle",
    "NtSetInformationThread",
    "RtlLockMemoryStreamRegion",
    "RtlDestroyAtomTable",
    "NlsAnsiCodePage",
    "RtlSetCurrentDirectory_U",
    "NtLockProductActivationKeys",
    "RtlCustomCPToUnicodeN",
    "_wcsupr",
    "RtlDeleteCriticalSection",
    "ZwQueryAttributesFile",
    "LdrAddRefDll",
    "__iscsymf",
    "NtQuerySystemEnvironmentValueEx",
    "ZwNotifyChangeDirectoryFile",
    "RtlGetLengthWithoutLastFullDosOrNtPathElement",
    "RtlDeleteResource",
    "memchr",
    "LdrShutdownThread",
    "NtQueryAttributesFile",
    "wcslen",
    "NtPlugPlayControl",
    "RtlInitializeResource",
    "RtlActivateActivationContext",
    "ZwImpersonateAnonymousToken",
    "ZwWaitForDebugEvent",
    "RtlUpcaseUnicodeString",
    "RtlAcquireResourceExclusive",
    "RtlInitializeSListHead",
    "NtDeleteAtom",
    "NtPrivilegedServiceAuditAlarm",
    "RtlDosApplyFileIsolationRedirection_Ustr",
    "RtlQueryEnvironmentVariable_U",
    "RtlAnsiStringToUnicodeString",
    "NtCreateJobObject",
    "RtlCreateAndSetSD",
    "RtlpApplyLengthFunction",
    "isprint",
    "ZwQueryBootOptions",
    "RtlImpersonateSelf",
    "NtCreateWaitablePort",
    "RtlDeactivateActivationContext",
    "RtlAreBitsClear",
    "RtlPushFrame",
    "RtlExtendedIntegerMultiply",
    "RtlDeNormalizeProcessParams",
    "NtCompressKey",
    "RtlUnicodeToCustomCPN",
    "ZwCreateNamedPipeFile",
    "DbgPrint",
    "RtlQueryRegistryValues",
    "RtlConvertPropertyToVariant",
    "qsort",
    "RtlxUnicodeStringToAnsiSize",
    "RtlSetLastWin32ErrorAndNtStatusFromNtStatus",
    "RtlCreateUnicodeStringFromAsciiz",
    "RtlPcToFileHeader",
    "ZwSignalAndWaitForSingleObject",
    "DbgUiGetThreadDebugObject",
    "ZwCreateMutant",
    "NtRequestDeviceWakeup",
    "RtlMakeSelfRelativeSD",
    "ZwQueryInformationPort",
    "NtCreateMutant",
    "ZwRenameKey",
    "NtOpenSemaphore",
    "RtlSetSecurityObjectEx",
    "towlower",
    "ZwQueryDirectoryObject",
    "RtlxAnsiStringToUnicodeSize",
    "RtlSecondsSince1980ToTime",
    "ZwQueryVirtualMemory",
    "ZwRestoreKey",
    "ZwQueueApcThread",
    "NtAllocateUuids",
    "ZwSuspendThread",
    "RtlSetEnvironmentVariable",
    "ZwUnlockFile",
    "DbgBreakPoint",
    "NtRequestWaitReplyPort",
    "CsrClientConnectToServer",
    "NtQuerySystemInformation",
    "NtTestAlert",
    "ZwWaitForSingleObject",
    "NtOpenMutant",
    "ZwAreMappedFilesTheSame",
    "NtQueryDefaultLocale",
    "ZwQueryMutant",
    "RtlSelfRelativeToAbsoluteSD2",
    "RtlAppendStringToString",
    "_chkstk",
    "_i64tow",
    "mbstowcs",
    "NtFindAtom",
    "RtlGetCurrentDirectory_U",
    "RtlInterlockedPopEntrySList",
    "RtlComputePrivatizedDllName_U",
    "ZwCompleteConnectPort",
    "_allshl",
    "ZwDeleteBootEntry",
    "NtReadVirtualMemory",
    "RtlRegisterSecureMemoryCacheCallback",
    "NtReleaseMutant",
    "wcspbrk",
    "_allmul",
    "log",
    "ZwSystemDebugControl",
    "RtlGetVersion",
    "ZwCreatePort",
    "RtlDosPathNameToNtPathName_U",
    "ZwAllocateUuids",
    "ZwCreateProcess",
    "NtOpenProcess",
    "RtlCreateEnvironment",
    "RtlIsDosDeviceName_U",
    "RtlHashUnicodeString",
    "RtlUpcaseUnicodeStringToAnsiString",
    "_toupper",
    "RtlFreeThreadActivationContextStack",
    "_itoa",
    "RtlpNotOwnerCriticalSection",
    "NtCreatePagingFile",
    "RtlCopyString",
    "ZwCreateKey",
    "CsrGetProcessId",
    "ZwRaiseHardError",
    "_CIpow",
    "ZwQuerySystemInformation",
    "RtlStartRXact",
    "_vsnprintf",
    "NtRenameKey",
    "NtWaitLowEventPair",
    "NtQueryMultipleValueKey",
    "RtlEnumerateGenericTable",
    "swprintf",
    "ZwConnectPort",
    "RtlGetUnloadEventTrace",
    "RtlAcquirePebLock",
    "RtlInitializeGenericTable",
    "RtlCreateTimer",
    "RtlIpv4AddressToStringW",
    "ZwOpenThreadToken",
    "strcat",
    "RtlFinalReleaseOutOfProcessMemoryStream",
    "ZwSetInformationFile",
    "NtLoadDriver",
    "wcschr",
    "ZwWaitForKeyedEvent",
    "_vsnwprintf",
    "sin",
    "strtoul",
    "NtAccessCheck",
    "_wtol",
    "ZwQuerySymbolicLinkObject",
    "RtlQueryAtomInAtomTable",
    "ZwQueryDefaultUILanguage",
    "RtlInitializeRangeList",
    "RtlDnsHostNameToComputerName",
    "RtlFindActivationContextSectionString",
    "RtlLargeIntegerArithmeticShift",
    "_allrem",
    "NtQuerySection",
    "NtConnectPort",
    "NtDeleteValueKey",
    "RtlCreateUnicodeString",
    "RtlUpperChar",
    "_wcsicmp",
    "RtlAllocateHeap",
    "ZwAdjustPrivilegesToken",
    "RtlUnhandledExceptionFilter2",
    "RtlZombifyActivationContext",
    "RtlDumpResource",
    "RtlFreeOemString",
    "ZwListenPort",
    "NtQueryEaFile",
    "RtlReadOutOfProcessMemoryStream",
    "_CIsqrt",
    "RtlCreateUserSecurityObject",
    "KiUserExceptionDispatcher",
    "NtQueueApcThread",
    "_strnicmp",
    "ZwTranslateFilePath",
    "RtlDestroyProcessParameters",
    "RtlValidateUnicodeString",
    "RtlFirstEntrySList",
    "CsrProbeForWrite",
    "ZwResetWriteWatch",
    "NtCreateEventPair",
    "ZwSetSystemTime",
    "NtSetThreadExecutionState",
    "NtVdmControl",
    "RtlInvertRangeList",
    "RtlTimeToTimeFields",
    "RtlQueryProcessLockInformation",
    "_splitpath",
    "RtlGetLongestNtPathLength",
    "ZwMakePermanentObject",
    "NtQueryPerformanceCounter",
    "ZwSetInformationProcess",
    "ZwIsProcessInJob",
    "atoi",
    "NtImpersonateClientOfPort",
    "ZwReadFileScatter",
    "DbgUiWaitStateChange",
    "RtlGetUserInfoHeap",
    "RtlEnumerateGenericTableWithoutSplayingAvl",
    "NtFsControlFile",
    "RtlConvertLongToLargeInteger",
    "NtCreateSemaphore",
    "ZwQueryEvent",
    "strtol",
    "NtQueryPortInformationProcess",
    "ZwOpenEvent",
    "RtlLargeIntegerToChar",
    "RtlValidSecurityDescriptor",
    "strcmp",
    "ZwSetTimer",
    "RtlCopyRangeList",
    "iswctype",
    "ZwReadVirtualMemory",
    "RtlReAllocateHeap",
    "RtlDeleteElementGenericTable",
    "RtlEnterCriticalSection",
    "RtlComputeImportTableHash",
    "NtShutdownSystem",
    "RtlUnicodeStringToAnsiSize",
    "ZwSetDebugFilterState",
    "ZwSetHighWaitLowEventPair",
    "ZwStartProfile",
    "ZwSaveMergedKeys",
    "NtCompleteConnectPort",
    "RtlDeleteTimerQueue",
    "fabs",
    "RtlInitString",
    "ZwRegisterThreadTerminatePort",
    "strcpy",
    "CsrCaptureMessageBuffer",
    "RtlInitializeAtomPackage",
    "DbgUiContinue",
    "RtlLargeIntegerNegate",
    "RtlInterlockedPushListSList",
    "iscntrl",
    "RtlIpv6StringToAddressExW",
    "ZwSetDefaultUILanguage",
    "wcstol",
    "ZwMapUserPhysicalPages",
    "iswalpha",
    "NtModifyBootEntry",
    "RtlIpv6StringToAddressExA",
    "RtlFirstFreeAce",
    "NtQueryDebugFilterState",
    "RtlQueueApcWow64Thread",
    "RtlCreateBootStatusDataFile",
    "ZwOpenObjectAuditAlarm",
    "_memicmp",
    "CsrProbeForRead",
    "RtlCaptureStackContext",
    "NtReadRequestData",
    "RtlSelfRelativeToAbsoluteSD",
    "NtQuerySymbolicLinkObject",
    "VerSetConditionMask",
    "CsrAllocateMessagePointer",
    "RtlReleaseMemoryStream",
    "NtSecureConnectPort",
    "RtlCancelTimer",
    "NtNotifyChangeKey",
    "RtlCaptureStackBackTrace",
    "RtlInitAnsiString",
    "atan",
    "NtReleaseKeyedEvent",
    "RtlAddRange",
    "NlsMbOemCodePageTag",
    "ZwQueryKey",
    "NtCancelDeviceWakeupRequest",
    "RtlQueryInformationActivationContext",
    "__iscsym",
    "RtlGetFirstRange",
    "LdrDisableThreadCalloutsForDll",
    "ZwCreateSemaphore",
    "RtlIpv4AddressToStringExA",
    "RtlxUnicodeStringToOemSize",
    "memcpy",
    "RtlSetAttributesSecurityDescriptor",
    "NtAllocateVirtualMemory",
    "ZwSetSystemPowerState",
    "NtPrivilegeCheck",
    "_itow",
    "ZwQueryIoCompletion",
    "ZwSetQuotaInformationFile",
    "NtProtectVirtualMemory",
    "RtlInitializeRXact",
    "vDbgPrintExWithPrefix",
    "RtlUnicodeStringToCountedOemString",
    "NtNotifyChangeDirectoryFile",
    "NtAccessCheckByTypeResultListAndAuditAlarm",
    "KiIntSystemCall",
    "NtSetInformationKey",
    "RtlSetAllBits",
    "NtSetBootEntryOrder",
    "ZwAllocateLocallyUniqueId",
    "NtSetTimerResolution",
    "ZwDeviceIoControlFile",
    "DbgPrintEx",
    "NtRaiseException",
    "RtlCheckProcessParameters",
    "ZwLoadKey",
    "LdrFlushAlternateResourceModules",
    "ZwCreateFile",
    "NtSaveKeyEx",
    "RtlGetControlSecurityDescriptor",
    "ZwSetSecurityObject",
    "NtCreateIoCompletion",
    "RtlAddCompoundAce",
    "RtlDestroyHeap",
    "RtlSetCurrentEnvironment",
    "_allshr",
    "RtlAllocateAndInitializeSid",
    "RtlNtStatusToDosErrorNoTeb",
    "ZwQueryDefaultLocale",
    "RtlSetSaclSecurityDescriptor",
    "ZwQueryInstallUILanguage",
    "RtlIntegerToChar",
    "NtRemoveIoCompletion",
    "RtlFindMostSignificantBit",
    "RtlNewInstanceSecurityObject",
    "wcscmp",
    "ZwSetThreadExecutionState",
    "ZwSetLowEventPair",
    "RtlFindClearRuns",
    "NtContinue",
    "sprintf",
    "_i64toa",
    "RtlUpcaseUnicodeToOemN",
    "RtlFillMemory",
    "LdrFindCreateProcessManifest",
    "RtlIpv6StringToAddressA",
    "RtlCopyOutOfProcessMemoryStreamTo",
    "RtlCopySid",
    "NtQueryBootEntryOrder",
    "NtAllocateUserPhysicalPages",
    "ZwClose",
    "ZwSetSystemEnvironmentValue",
    "wcsstr",
    "DbgUiConvertStateChangeStructure",
    "RtlLookupElementGenericTableAvl",
    "RtlFindCharInUnicodeString",
    "RtlAppendAsciizToString",
    "ZwCompactKeys",
    "ZwSetDefaultLocale",
    "towupper",
    "RtlAddAtomToAtomTable",
    "NtReadFile",
    "ZwSetContextThread",
    "RtlConvertSidToUnicodeString",
    "NtDuplicateToken",
    "NtMapUserPhysicalPages",
    "RtlConvertUlongToLargeInteger",
    "labs",
    "NtReplyWaitReceivePortEx",
    "ZwIsSystemResumeAutomatic",
    "LdrGetDllHandleEx",
    "RtlDestroyHandleTable",
    "ZwAddAtom",
    "ZwOpenSemaphore",
    "NtSetIoCompletion",
    "NtQueryValueKey",
    "RtlMoveMemory",
    "RtlUlonglongByteSwap",
    "RtlDowncaseUnicodeChar",
    "ZwSetVolumeInformationFile",
    "toupper",
    "ZwSetSystemInformation",
    "RtlLockBootStatusData",
    "_alldvrm",
    "ZwSetDefaultHardErrorPort",
    "RtlSetOwnerSecurityDescriptor",
    "ZwPrivilegeCheck",
    "NtSignalAndWaitForSingleObject",
    "RtlGetOwnerSecurityDescriptor",
    "NtSetValueKey",
    "LdrFindResourceEx_U",
    "RtlPrefixString",
    "RtlReleaseActivationContext",
    "RtlCopySecurityDescriptor",
    "NtOpenKeyedEvent",
    "NtSetSystemTime",
    "NtRaiseHardError",
    "NtOpenEventPair",
    "RtlSetLastWin32Error",
    "RtlDeactivateActivationContextUnsafeFast",
    "ZwReplyWaitReceivePort",
    "ZwReleaseSemaphore",
    "RtlInitOutOfProcessMemoryStream",
    "NtUnlockFile",
    "RtlCreateTagHeap",
    "ZwQueryOpenSubKeys",
    "NtOpenThread",
    "NtSetDefaultHardErrorPort",
    "NtCreateKey",
    "ZwOpenThread",
    "NtWaitForMultipleObjects",
    "ZwFsControlFile",
    "NtTerminateProcess",
    "RtlIdentifierAuthoritySid",
    "NtCreateDirectoryObject",
    "ZwFindAtom",
    "NtSetQuotaInformationFile",
    "ZwSecureConnectPort",
    "RtlConvertExclusiveToShared",
    "NtSetHighEventPair",
    "NtQueryInformationPort",
    "NtCreateProcess",
    "RtlFindSetBitsAndClear",
    "ZwFlushBuffersFile",
    "RtlGetLengthWithoutTrailingPathSeperators",
    "ZwLockFile",
    "LdrAccessResource",
    "NtGetContextThread",
    "RtlQueryProcessDebugInformation",
    "ZwEnumerateValueKey",
    "NtSetContextThread",
    "ZwWaitForMultipleObjects",
    "ZwCancelDeviceWakeupRequest",
    "_aullshr",
    "RtlIpv4AddressToStringA",
    "RtlFormatCurrentUserKeyPath",
    "RtlIpv6AddressToStringExW",
    "NtEnumerateValueKey",
    "RtlFreeHandle",
    "NtQueryInformationThread",
    "islower",
    "NtLockVirtualMemory",
    "RtlImageRvaToSection",
    "ZwSetValueKey",
    "RtlQueryProcessBackTraceInformation",
    "RtlValidateHeap",
    "RtlSetBits",
    "RtlInitializeBitMap",
    "ZwOpenIoCompletion",
    "ZwResumeThread",
    "ZwOpenSymbolicLinkObject",
    "ZwAlertResumeThread",
    "ZwOpenJobObject",
    "RtlDeleteNoSplay",
    "RtlDosSearchPath_U",
    "_fltused",
    "RtlExtendHeap",
    "NtCreateProcessEx",
    "RtlAddAttributeActionToRXact",
    "abs",
    "RtlCloneMemoryStream",
    "ZwQuerySystemTime",
    "ZwLockVirtualMemory",
    "ZwReplaceKey",
    "ZwContinue",
    "RtlSubtreeSuccessor",
    "ZwDebugActiveProcess",
    "NtQueryQuotaInformationFile",
    "RtlDelete",
    "tan",
    "NtRegisterThreadTerminatePort",
    "RtlIsTextUnicode",
    "_ultow",
    "RtlInterlockedPushEntrySList",
    "RtlCommitMemoryStream",
    "RtlUpcaseUnicodeStringToOemString",
    "ZwTraceEvent",
    "isalnum",
    "NtQueryIoCompletion",
    "RtlUnicodeStringToInteger",
    "NtCreateJobSet",
    "ZwUnlockVirtualMemory",
    "DbgPrompt",
    "NtLockRegistryKey",
    "_alldiv",
    "ZwAllocateUserPhysicalPages",
    "RtlGetNtProductType",
    "RtlOemToUnicodeN",
    "RtlReleaseResource",
    "RtlpNtMakeTemporaryKey",
    "wcstombs",
    "NtMapViewOfSection",
    "ZwAccessCheckByTypeResultList",
    "ZwProtectVirtualMemory",
    "RtlpEnsureBufferSize",
    "RtlLengthRequiredSid",
    "DbgQueryDebugFilterState",
    "ZwQueryBootEntryOrder",
    "RtlIsGenericTableEmptyAvl",
    "NtFreeUserPhysicalPages",
    "ZwQueryMultipleValueKey",
    "RtlRestoreLastWin32Error",
    "RtlInitializeCriticalSectionAndSpinCount",
    "NtWaitForKeyedEvent",
    "wcsncpy",
    "ZwCreateTimer",
    "NtQuerySecurityObject",
    "RtlFreeRangeList",
    "RtlDecompressFragment",
    "RtlActivateActivationContextUnsafeFast",
    "RtlIpv4StringToAddressExA",
    "ZwCompressKey",
    "DbgSetDebugFilterState",
    "DbgUiSetThreadDebugObject",
    "RtlQuerySecurityObject",
    "RtlDetermineDosPathNameType_U",
    "NtCreateDebugObject",
    "wcsncmp",
    "RtlCreateSystemVolumeInformationFolder",
    "RtlSplay",
    "ZwEnumerateBootEntries",
    "RtlDefaultNpAcl",
    "LdrHotPatchRoutine",
    "RtlNumberOfClearBits",
    "LdrSetAppCompatDllRedirectionCallback",
    "ZwFlushWriteBuffer",
    "LdrQueryProcessModuleInformation",
    "RtlUnhandledExceptionFilter",
    "RtlCaptureContext",
    "NtSetHighWaitLowEventPair",
    "NtOpenTimer",
    "NtQueryMutant",
    "RtlAddAuditAccessAce",
    "RtlQueueWorkItem",
    "vsprintf",
    "NtEnumerateBootEntries",
    "RtlDecodeSystemPointer",
    "NtOpenFile",
    "RtlIpv6AddressToStringW",
    "LdrVerifyImageMatchesChecksum",
    "RtlUnwind",
    "RtlTraceDatabaseDestroy",
    "RtlSystemTimeToLocalTime",
    "RtlCreateRegistryKey",
    "ZwOpenEventPair",
    "ZwQueryPerformanceCounter",
    "ZwAccessCheck",
    "ZwAddBootEntry",
    "LdrLoadAlternateResourceModule",
    "RtlAllocateHandle",
    "RtlLargeIntegerShiftLeft",
    "RtlInitUnicodeStringEx",
    "ZwDebugContinue",
    "ZwSetBootEntryOrder",
    "strpbrk",
    "LdrUnloadDll",
    "ZwInitializeRegistry",
    "NtSetSystemInformation",
    "_tolower",
    "RtlAreAnyAccessesGranted",
    "NtOpenThreadTokenEx",
    "wcscat",
    "wcscspn",
    "DbgUiStopDebugging",
    "_wcsnicmp",
    "RtlReadMemoryStream",
    "RtlCheckRegistryKey",
    "RtlDeleteTimerQueueEx",
    "ZwCancelIoFile",
    "NtAlertThread",
    "RtlRemoveVectoredExceptionHandler",
    "NtOpenProcessTokenEx",
    "RtlConvertVariantToProperty",
    "NtWaitForDebugEvent",
    "RtlEqualLuid",
    "RtlDowncaseUnicodeString",
    "ZwResetEvent",
    "ZwSetHighEventPair",
    "RtlSetControlSecurityDescriptor",
    "ZwOpenSection",
    "NtReplaceKey",
    "RtlCreateUserProcess",
    "RtlDosSearchPath_Ustr",
    "RtlTraceDatabaseCreate",
    "RtlLogStackBackTrace",
    "RtlLargeIntegerAdd",
    "ZwReplyWaitReceivePortEx",
    "NtAccessCheckAndAuditAlarm",
    "NtCancelIoFile",
    "RtlpNtSetValueKey",
    "ZwWaitHighEventPair",
    "RtlCreateHeap",
    "NtQueryIntervalProfile",
    "ZwDeleteValueKey",
    "RtlGetLastNtStatus",
    "ZwOpenProcess",
    "ZwSetEaFile",
    "NlsMbCodePageTag",
    "NtDeviceIoControlFile",
    "RtlValidAcl",
    "RtlFindLongestRunClear",
    "RtlFreeHeap",
    "ZwRequestDeviceWakeup",
    "RtlAddVectoredExceptionHandler",
    "ZwCreateIoCompletion",
    "RtlUniform",
    "ZwGetPlugPlayEvent",
    "RtlRandom",
    "NtResetWriteWatch",
    "NtFlushVirtualMemory",
    "NtCloseObjectAuditAlarm",
    "CsrAllocateCaptureBuffer",
    "RtlRealPredecessor",
    "RtlAddressInSectionTable",
    "DbgUiRemoteBreakin",
    "RtlIsValidIndexHandle",
    "LdrUnloadAlternateResourceModule",
    "ZwModifyBootEntry",
    "NtOpenSection",
    "NtCallbackReturn",
    "RtlpNtOpenKey",
    "RtlFreeUserThreadStack",
    "RtlEncodePointer",
    "RtlActivateActivationContextEx",
    "_aulldiv",
    "_aulldvrm",
    "NtCreateTimer",
    "RtlNtPathNameToDosPathName",
    "ZwCreateJobObject",
    "RtlGetFrame",
    "NtSetDefaultUILanguage",
    "ZwUnmapViewOfSection",
    "NtDuplicateObject",
    "LdrSetDllManifestProber",
    "RtlSetGroupSecurityDescriptor",
    "RtlWriteMemoryStream",
    "NtCreateFile",
    "NtCurrentTeb",
    "RtlTraceDatabaseUnlock",
    "RtlIntegerToUnicodeString",
    "RtlRealSuccessor",
    "RtlSetIoCompletionCallback",
    "ZwFreeUserPhysicalPages",
    "ZwAlertThread",
    "RtlAddAuditAccessAceEx",
    "NtFlushInstructionCache",
    "ZwSetInformationThread",
    "RtlpUnWaitCriticalSection",
    "_memccpy",
    "RtlxOemStringToUnicodeSize",
    "RtlAddRefActivationContext",
    "ZwDeleteObjectAuditAlarm",
    "DbgPrintReturnControlC",
    "ZwAssignProcessToJobObject",
    "RtlConvertSharedToExclusive",
    "NtSetLowWaitHighEventPair",
    "_ltow",
    "ispunct",
    "NtCreateProfile",
    "NtQueryVirtualMemory",
    "RtlGetNtGlobalFlags",
    "ZwResumeProcess",
    "ZwEnumerateKey",
    "ZwDeleteFile",
    "RtlDllShutdownInProgress",
    "RtlRegisterWait",
    "RtlAbortRXact",
    "RtlSizeHeap",
    "RtlWriteRegistryValue",
    "ZwSaveKey",
    "RtlSetDaclSecurityDescriptor",
    "RtlIsActivationContextActive",
    "NtSetDebugFilterState",
    "RtlDeleteSecurityObject",
    "RtlTraceDatabaseAdd",
    "RtlReleasePebLock",
    "ZwCreateMailslotFile",
    "RtlEqualComputerName",
    "ZwReadFile",
    "NtMapUserPhysicalPagesScatter",
    "RtlInitCodePageTable",
    "NtQueryVolumeInformationFile",
    "RtlMapGenericMask",
    "NtSetEvent",
    "ZwPulseEvent",
    "ZwDuplicateObject",
    "ZwNotifyChangeKey",
    "RtlSetThreadPoolStartFunc",
    "NtFlushKey",
    "RtlDeleteElementGenericTableAvl",
    "ZwReleaseMutant",
    "RtlSubAuthoritySid",
    "RtlExtendedMagicDivide",
    "ZwSetIntervalProfile",
    "NtIsSystemResumeAutomatic",
    "strncpy",
    "NtWaitForSingleObject",
    "RtlClearBits",
    "ZwSetLdtEntries",
    "NtDeleteFile",
    "LdrAccessOutOfProcessResource",
    "ZwCreatePagingFile",
    "sscanf",
    "LdrProcessRelocationBlock",
    "ZwSetTimerResolution",
    "NtFlushBuffersFile",
    "RtlGetSecurityDescriptorRMControl",
    "NtSetLdtEntries",
    "RtlUpcaseUnicodeToCustomCPN",
    "RtlTraceDatabaseLock",
    "RtlAddAccessAllowedObjectAce",
    "RtlCreateQueryDebugBuffer",
    "PfxInitialize",
    "ZwPlugPlayControl",
    "RtlFindLastBackwardRunClear",
    "RtlDeleteAtomFromAtomTable",
    "ZwReleaseKeyedEvent",
    "memset",
    "NtIsProcessInJob",
    "NtQuerySemaphore",
    "RtlEnableEarlyCriticalSectionEventCreation",
    "NtAccessCheckByTypeAndAuditAlarm",
    "NtAlertResumeThread",
    "NtAddBootEntry",
    "RtlTraceDatabaseEnumerate",
    "RtlSetHeapInformation",
    "LdrFindResource_U",
    "_aullrem",
    "NtAssignProcessToJobObject",
    "RtlEnlargedUnsignedMultiply",
    "RtlUnicodeStringToOemSize",
    "RtlNumberOfSetBits",
    "RtlImageDirectoryEntryToData",
    "RtlAddAccessAllowedAceEx",
    "RtlAddAccessDeniedAceEx",
    "RtlVerifyVersionInfo",
    "RtlAnsiCharToUnicodeChar",
    "RtlSetThreadIsCritical",
    "ZwQueryInformationThread",
    "NtPulseEvent",
    "_ui64tow",
    "ZwCreateEventPair",
    "ZwQueryQuotaInformationFile",
    "RtlCreateTimerQueue",
    "RtlOemStringToUnicodeString",
    "RtlFindLeastSignificantBit",
    "RtlDestroyQueryDebugBuffer",
    "ZwAccessCheckByTypeResultListAndAuditAlarmByHandle",
    "NtStartProfile",
    "isxdigit",
    "ZwClearEvent",
    "ZwGetContextThread",
    "RtlEqualString",
    "ZwAccessCheckAndAuditAlarm",
    "RtlUshortByteSwap",
    "RtlEqualUnicodeString",
    "RtlSetTimeZoneInformation",
    "ZwCallbackReturn",
    "NtQueryOpenSubKeys",
    "NtAllocateLocallyUniqueId",
    "NtGetPlugPlayEvent",
    "NtWriteFileGather",
    "RtlRaiseStatus",
    "RtlInitializeStackTraceDataBase",
    "KiFastSystemCall",
    "RtlPopFrame",
    "RtlDebugPrintTimes",
    "CsrSetPriorityClass",
    "RtlUnicodeToOemN",
    "ZwSaveKeyEx",
    "ZwCreateEvent",
    "NtRequestWakeupLatency",
    "ZwImpersonateClientOfPort",
    "ZwQueryPortInformationProcess",
    "iswxdigit",
    "RtlClearAllBits",
    "strlen",
    "ZwUnloadKey",
    "RtlSetUnicodeCallouts",
    "RtlCreateProcessParameters",
    "ZwWriteFileGather",
    "RtlOemStringToUnicodeSize",
    "RtlCopyLuid",
    "ZwQueryDirectoryFile",
    "NtCancelTimer",
    "ZwCreateThread",
    "RtlZeroHeap",
    "RtlEnumerateGenericTableLikeADirectory",
    "NtQueryDirectoryObject",
    "vDbgPrintEx",
    "NtQuerySystemEnvironmentValue",
    "ZwQuerySystemEnvironmentValueEx",
    "wcscpy",
    "NtQueryFullAttributesFile",
    "strcspn",
    "ZwOpenFile",
    "ZwSetIoCompletion",
    "RtlUpcaseUnicodeToMultiByteN",
    "RtlUnicodeToMultiByteN",
    "RtlApplyRXactNoFlush",
    "RtlConvertToAutoInheritSecurityObject",
    "ZwQueryInformationFile",
    "RtlApplyRXact",
    "RtlAssert2",
    "RtlLookupAtomInAtomTable",
    "ZwRequestWakeupLatency",
    "RtlQueryInformationAcl",
    "ZwDelayExecution",
    "ZwMakeTemporaryObject",
    "NtAddAtom",
    "RtlNewSecurityObjectEx",
    "RtlAddRefMemoryStream",
    "NtRequestPort",
    "_snprintf",
    "RtlImageNtHeader",
    "NtDebugContinue",
    "LdrLockLoaderLock",
    "_CIcos",
    "NtOpenKey",
    "NtQueryTimer",
    "NtQueryInformationJobObject",
    "RtlGetActiveActivationContext",
    "RtlDuplicateUnicodeString",
    "bsearch",
    "cos",
    "NtInitializeRegistry",
    "RtlPinAtomInAtomTable",
    "NtUnloadKey",
    "__isascii",
    "RtlSetUserValueHeap",
    "ZwGetWriteWatch",
    "NtGetDevicePowerState",
    "NtUnmapViewOfSection",
    "ZwSetInformationToken",
    "RtlLargeIntegerSubtract",
    "NtSetSystemEnvironmentValueEx",
    "NtSaveMergedKeys",
    "ZwStopProfile",
    "DbgUiDebugActiveProcess",
    "NtFreeVirtualMemory",
    "NtSetLowEventPair",
    "RtlGetNtVersionNumbers",
    "RtlTimeToElapsedTimeFields",
    "ZwCreateProfile",
    "NtAdjustGroupsToken",
    "ZwSetLowWaitHighEventPair",
    "RtlFindActivationContextSectionGuid",
    "NtOpenObjectAuditAlarm",
    "NtCompactKeys",
    "RtlIpv6AddressToStringExA",
    "ZwLoadDriver",
    "ZwAllocateVirtualMemory",
    "RtlRunDecodeUnicodeString",
    "RtlFindMessage",
    "NtWriteRequestData",
    "RtlTryEnterCriticalSection",
    "LdrGetProcedureAddress",
    "NtTerminateJobObject",
    "RtlAddAce",
    "RtlAbsoluteToSelfRelativeSD",
    "RtlEnlargedIntegerMultiply",
    "NtOpenJobObject",
    "RtlAdjustPrivilege",
    "ZwAdjustGroupsToken",
    "NtUnloadDriver",
    "NtCompareTokens",
    "RtlSeekMemoryStream",
    "RtlQueryTagHeap",
    "RtlCompressBuffer",
    "RtlFindClearBitsAndSet",
    "pow",
    "RtlCompareString",
    "RtlpWaitForCriticalSection",
    "RtlSecondsSince1970ToTime",
    "RtlRunEncodeUnicodeString",
    "RtlUpcaseUnicodeStringToCountedOemString",
    "RtlCopyUnicodeString",
    "ZwYieldExecution",
    "PropertyLengthAsVariant",
    "NtYieldExecution",
    "RtlOpenCurrentUser",
    "RtlSetUserFlagsHeap",
    "_CIsin",
    "RtlFreeAnsiString",
    "strchr",
    "RtlQueryInterfaceMemoryStream",
    "NtDebugActiveProcess",
    "RtlLeaveCriticalSection",
    "RtlpNtCreateKey",
    "RtlInitializeSid",
    "RtlMultiByteToUnicodeSize",
    "NtQueryKey",
    "RtlDeleteOwnersRanges",
    "_wtoi64",
    "_lfind",
    "NtTraceEvent",
    "NtSetInformationJobObject",
    "_stricmp",
    "RtlDecodePointer",
    "RtlEnumerateGenericTableAvl",
    "ZwOpenProcessTokenEx",
    "LdrFindEntryForAddress",
    "NtRestoreKey",
    "_alloca_probe",
    "NtQueryInformationAtom",
    "RtlNewSecurityObjectWithMultipleInheritance",
    "RtlRandomEx",
    "ZwSetSystemEnvironmentValueEx",
    "NtDeleteBootEntry",
    "LdrEnumerateLoadedModules",
    "ZwQueryVolumeInformationFile",
    "RtlTimeFieldsToTime",
    "RtlConsoleMultiByteToUnicodeN",
    "ZwFlushKey",
    "NtFlushWriteBuffer",
    "NtWriteFile",
    "RtlIsThreadWithinLoaderCallout",
    "NtOpenThreadToken",
    "RtlUpperString",
    "RtlImageRvaToVa",
    "RtlAssert",
    "PfxInsertPrefix",
    "RtlMapSecurityErrorToNtStatus",
    "ZwNotifyChangeMultipleKeys",
    "RtlTraceDatabaseValidate",
    "RtlEqualDomainName",
    "ZwUnloadDriver",
    "ZwExtendSection",
    "RtlCreateAcl",
    "RtlEraseUnicodeString",
    "RtlValidateProcessHeaps",
    "RtlWalkFrameChain",
    "RtlSetSecurityObject",
    "ZwQueryIntervalProfile",
    "RtlTimeToSecondsSince1980",
    "RtlFillMemoryUlong",
    "PfxFindPrefix",
    "RtlLockHeap",
    "__toascii",
    "RtlIsGenericTableEmpty",
    "NtQueryDirectoryFile",
    "NtCreateKeyedEvent",
    "RtlInitializeGenericTableAvl",
    "ZwSetInformationObject",
    "wcsrchr",
    "NtSetBootOptions",
    "NtSetSecurityObject",
    "ZwMapViewOfSection",
    "NtSetEaFile",
    "NtSetIntervalProfile",
    "NtAdjustPrivilegesToken",
    "RtlDeleteRange",
    "LdrFindResourceDirectory_U",
    "LdrLoadDll",
    "_ftol",
    "ZwQueryInformationToken",
    "isalpha",
    "RtlAppendPathElement",
    "NtReleaseSemaphore",
    "RtlLookupElementGenericTable",
    "ZwSetUuidSeed",
    "RtlCutoverTimeToSystemTime",
    "ZwSetInformationKey",
    "ZwInitiatePowerAction",
    "NtStopProfile",
    "ZwGetDevicePowerState",
    "RtlTraceDatabaseFind",
    "RtlAddAccessAllowedAce",
    "NtSetInformationDebugObject",
    "RtlWalkHeap",
    "LdrShutdownProcess",
    "ZwQueryInformationProcess",
    "RtlCharToInteger",
    "NtGetWriteWatch",
    "RtlRaiseException",
    "ZwFlushInstructionCache",
    "NtReplyWaitReplyPort",
    "RtlNumberGenericTableElementsAvl",
    "NtTranslateFilePath",
    "ZwWriteFile",
    "RtlInitializeContext",
    "RtlLocalTimeToSystemTime",
    "atol",
    "ZwCreateSection",
    "ZwFlushVirtualMemory",
    "NtReplyPort",
    "memcmp",
    "NtCreatePort",
    "RtlGetFullPathName_U",
    "iswlower",
    "ZwQuerySystemEnvironmentValue",
    "NtClearEvent",
    "RtlLengthSecurityDescriptor",
    "RtlSetTimer",
    "_snwprintf",
    "NtSuspendProcess",
    "RtlLengthSid",
    "ZwSetBootOptions",
    "RtlZeroMemory",
    "RtlInsertElementGenericTable",
    "CsrNewThread",
    "strspn",
    "ZwShutdownSystem",
    "RtlGetCompressionWorkSpaceSize",
    "RtlSetProcessIsCritical",
    "ceil",
    "strncmp",
    "RtlNumberGenericTableElements",
    "NtDeleteKey",
    "ZwOpenTimer",
    "RtlIpv4AddressToStringExW",
    "RtlIsValidHandle",
    "LdrDestroyOutOfProcessImage",
    "RtlAddAccessDeniedObjectAce",
    "RtlDoesFileExists_U",
    "strncat",
    "ZwLockProductActivationKeys",
    "_CIlog",
    "RtlIpv4StringToAddressA",
    "RtlInitUnicodeString",
    "RtlInitializeCriticalSection",
    "RtlSetSecurityDescriptorRMControl",
    "RtlApplicationVerifierStop",
    "RtlAreAllAccessesGranted"
  ],
  "ntdsapi.dll": [
    "DsReplicaAddW",
    "DsListSitesA",
    "DsQuoteRdnValueA",
    "DsClientMakeSpnForTargetServerA",
    "DsListRolesW",
    "DsMakePasswordCredentialsW",
    "DsReplicaVerifyObjectsW",
    "DsReplicaFreeInfo",
    "DsListSitesW",
    "DsaopBindWithSpn",
    "DsFreeNameResultW",
    "DsBindWithCredW",
    "DsCrackSpn3W",
    "DsFreeSchemaGuidMapW",
    "DsListServersForDomainInSiteW",
    "DsCrackUnquotedMangledRdnW",
    "DsMakePasswordCredentialsA",
    "DsFreeSpnArrayA",
    "DsWriteAccountSpnA",
    "DsBindWithSpnA",
    "DsReplicaDelA",
    "DsAddSidHistoryW",
    "DsMakeSpnA",
    "DsMakeSpnW",
    "DsFreeDomainControllerInfoW",
    "DsListDomainsInSiteA",
    "DsAddSidHistoryA",
    "DsLogEntry",
    "DsCrackSpn2W",
    "DsMapSchemaGuidsW",
    "DsaopPrepareScript",
    "DsReplicaSyncAllA",
    "DsGetSpnA",
    "DsaopUnBind",
    "DsInheritSecurityIdentityA",
    "DsReplicaGetInfo2W",
    "DsRemoveDsServerW",
    "DsServerRegisterSpnA",
    "DsFreeDomainControllerInfoA",
    "DsIsMangledDnA",
    "DsIsMangledRdnValueW",
    "DsListServersInSiteW",
    "DsGetSpnW",
    "DsaopBind",
    "DsCrackNamesW",
    "DsListInfoForServerW",
    "DsListRolesA",
    "DsReplicaUpdateRefsA",
    "DsUnquoteRdnValueW",
    "DsCrackSpnW",
    "DsFreeSchemaGuidMapA",
    "DsQuoteRdnValueW",
    "DsGetDomainControllerInfoA",
    "DsCrackNamesA",
    "DsReplicaSyncW",
    "DsGetRdnW",
    "DsReplicaVerifyObjectsA",
    "DsListServersForDomainInSiteA",
    "DsClientMakeSpnForTargetServerW",
    "DsInheritSecurityIdentityW",
    "DsReplicaAddA",
    "DsReplicaGetInfoW",
    "DsListServersInSiteA",
    "DsUnBindW",
    "DsReplicaSyncAllW",
    "DsIsMangledRdnValueA",
    "DsReplicaUpdateRefsW",
    "DsFreeNameResultA",
    "DsReplicaModifyA",
    "DsFreeSpnArrayW",
    "DsCrackSpn2A",
    "DsCrackUnquotedMangledRdnA",
    "DsBindWithCredA",
    "DsIsMangledDnW",
    "DsReplicaConsistencyCheck",
    "DsWriteAccountSpnW",
    "DsBindWithSpnW",
    "DsListDomainsInSiteW",
    "DsListInfoForServerA",
    "DsaopExecuteScript",
    "DsaopBindWithCred",
    "DsRemoveDsDomainA",
    "DsReplicaSyncA",
    "DsCrackSpnA",
    "DsMapSchemaGuidsA",
    "DsServerRegisterSpnW",
    "DsRemoveDsServerA",
    "DsGetDomainControllerInfoW",
    "DsBindA",
    "DsFreePasswordCredentials",
    "DsReplicaModifyW",
    "DsReplicaDelW",
    "DsUnquoteRdnValueA",
    "DsUnBindA",
    "DsBindW",
    "DsRemoveDsDomainW"
  ],
  "ntdsbcli.dll": [
    "DsRestoreEnd",
    "DsRestorePrepareA",
    "DsIsNTDSOnlineW",
    "DsBackupOpenFileA",
    "DsBackupRead",
    "I_DsRestoreW",
    "DsBackupOpenFileW",
    "DsBackupClose",
    "DsBackupFree",
    "DsRestoreGetDatabaseLocationsW",
    "DsRestoreRegisterComplete",
    "DsSetAuthIdentityA",
    "DsSetCurrentBackupLogW",
    "DsBackupPrepareW",
    "I_DsCheckBackupLogs",
    "DsRestoreRegisterA",
    "DsBackupGetBackupLogsW",
    "DsSetAuthIdentityW",
    "DsRestoreGetDatabaseLocationsA",
    "DsRestoreRegisterW",
    "DsSetCurrentBackupLogA",
    "DsBackupTruncateLogs",
    "DsIsNTDSOnlineA",
    "DsRestoreCheckExpiryToken",
    "DsBackupGetDatabaseNamesA",
    "DsBackupEnd",
    "DsBackupPrepareA",
    "DllEntryPoint",
    "DsBackupGetBackupLogsA",
    "DsBackupGetDatabaseNamesW",
    "DsRestorePrepareW"
  ],
  "ntlanman.dll": [
    "ServerBrowseDialogA0",
    "NPGetUniversalName",
    "NPEnumResource",
    "NPOpenEnum",
    "ShareCreate",
    "StopShareDialogA0",
    "NPAddConnection",
    "DllMain",
    "NPAddConnection3",
    "NPGetResourceInformation",
    "ShareStop",
    "NPCancelConnection",
    "ShareAsDialogA0",
    "IsDfsPathEx",
    "NPAddConnection3ForCSCAgent",
    "I_SystemFocusDialog",
    "NPGetReconnectFlags",
    "NPGetConnection",
    "NPDirectoryNotify",
    "NPGetPropertyText",
    "NPGetConnectionPerformance",
    "NPCloseEnum",
    "NPFormatNetworkName",
    "NPCancelConnectionForCSCAgent",
    "NPGetDirectoryType",
    "ShareManage",
    "NPGetResourceParent",
    "NPGetConnection3",
    "NPGetUser",
    "NPGetCaps",
    "NPPropertyDialog"
  ],
  "ntlanui.dll": [
    "ShareManage",
    "ServerBrowseDialogA0",
    "ShareStop",
    "ShareAsDialogA0",
    "ShareCreate",
    "StopShareDialogA0",
    "DllMain",
    "NPGetPropertyText",
    "NPPropertyDialog",
    "I_SystemFocusDialog"
  ],
  "ntlanui2.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "ntlsapi.dll": [
    "NtLSFreeHandle",
    "NtLicenseRequestW",
    "NtLicenseRequestA"
  ],
  "ntmarta.dll": [
    "EventGuidToName",
    "AccRewriteSetEntriesInAcl",
    "AccConvertAclToAccess",
    "AccProvRevokeAccessRights",
    "AccConvertAccessToSecurityDescriptor",
    "AccProvGetAccessInfoPerObjectType",
    "AccProvGrantAccessRights",
    "AccProvGetTrusteesAccess",
    "AccConvertSDToAccess",
    "AccProvHandleRevokeAccessRights",
    "AccRewriteGetExplicitEntriesFromAcl",
    "AccLookupAccountName",
    "AccSetEntriesInAList",
    "AccProvHandleRevokeAuditRights",
    "AccFreeIndexArray",
    "AccProvHandleSetAccessRights",
    "AccLookupAccountSid",
    "AccLookupAccountTrustee",
    "AccProvCancelOperation",
    "AccProvGetOperationResults",
    "AccProvIsObjectAccessible",
    "AccProvHandleIsAccessAudited",
    "AccConvertAccessMaskToActrlAccess",
    "AccProvHandleGetAccessInfoPerObjectType",
    "EventNameFree",
    "AccRewriteSetHandleRights",
    "AccRewriteGetNamedRights",
    "AccProvRevokeAuditRights",
    "AccProvGetAllRights",
    "AccProvIsAccessAudited",
    "AccGetExplicitEntries",
    "AccProvGetCapabilities",
    "AccProvSetAccessRights",
    "AccTreeResetNamedSecurityInfo",
    "AccRewriteSetNamedRights",
    "AccProvHandleGetAllRights",
    "AccRewriteGetHandleRights",
    "AccConvertAccessToSD",
    "AccGetInheritanceSource",
    "AccGetAccessForTrustee",
    "AccProvHandleGrantAccessRights",
    "AccProvHandleIsObjectAccessible",
    "AccProvHandleGetTrusteesAccess"
  ],
  "ntmsapi.dll": [
    "CreateNtmsMediaPoolA",
    "DismountNtmsMedia",
    "SetNtmsObjectInformationA",
    "SetNtmsUIOptionsW",
    "DoEjectFromSADriveW",
    "GetNtmsUIOptionsA",
    "ChangeNtmsMediaType",
    "WaitForNtmsOperatorRequest",
    "GetNtmsObjectSecurity",
    "DeleteNtmsMediaType",
    "SubmitNtmsOperatorRequestW",
    "AddNtmsMediaType",
    "EjectNtmsMedia",
    "WaitForNtmsNotification",
    "BeginNtmsDeviceChangeDetection",
    "GetNtmsUIOptionsW",
    "AllocateNtmsMedia",
    "DismountNtmsDrive",
    "CancelNtmsOperatorRequest",
    "GetVolumesFromDriveW",
    "DeleteNtmsLibrary",
    "GetNtmsMediaPoolNameW",
    "OpenNtmsNotification",
    "GetNtmsObjectInformationW",
    "SetNtmsObjectAttributeW",
    "SubmitNtmsOperatorRequestA",
    "DecommissionNtmsMedia",
    "ReleaseNtmsCleanerSlot",
    "SetNtmsMediaComplete",
    "SetNtmsRequestOrder",
    "CreateNtmsMediaW",
    "InventoryNtmsLibrary",
    "SwapNtmsMedia",
    "DeleteNtmsDrive",
    "EnableNtmsObject",
    "ImportNtmsDatabase",
    "GetNtmsObjectAttributeA",
    "CreateNtmsMediaA",
    "CloseNtmsNotification",
    "EnumerateNtmsObject",
    "SatisfyNtmsOperatorRequest",
    "GetNtmsMediaPoolNameA",
    "SetNtmsDeviceChangeDetection",
    "OpenNtmsSessionW",
    "CloseNtmsSession",
    "InjectNtmsMedia",
    "OpenNtmsSessionA",
    "CancelNtmsLibraryRequest",
    "EjectDiskFromSADriveA",
    "SetNtmsObjectSecurity",
    "CleanNtmsDrive",
    "GetNtmsObjectInformationA",
    "DeallocateNtmsMedia",
    "DeleteNtmsMedia",
    "DeleteNtmsRequests",
    "ExportNtmsDatabase",
    "GetVolumesFromDriveA",
    "EjectDiskFromSADriveW",
    "GetNtmsRequestOrder",
    "CreateNtmsMediaPoolW",
    "InjectNtmsCleaner",
    "MountNtmsMedia",
    "DisableNtmsObject",
    "GetNtmsObjectAttributeW",
    "MoveToNtmsMediaPool",
    "EndNtmsDeviceChangeDetection",
    "AccessNtmsLibraryDoor",
    "SetNtmsUIOptionsA",
    "SetNtmsObjectAttributeA",
    "DeleteNtmsMediaPool",
    "UpdateNtmsOmidInfo",
    "SetNtmsObjectInformationW",
    "ReserveNtmsCleanerSlot",
    "IdentifyNtmsSlot",
    "EjectNtmsCleaner"
  ],
  "ntmsdba.dll": [
    "public: virtual __thiscall NtmsDbStorageSlot::~NtmsDbStorageSlot(void)",
    "public: __thiscall NtmsDbLinkedGuid::NtmsDbLinkedGuid(class NtmsDbLinkedGuid const &)",
    "public: void __thiscall NtmsDbPropLargeInt::ConvertToString(char *)const",
    "public: int __thiscall NtmsDbRecordProp::IsModified(void)const",
    "public: class NtmsDbDriveType & __thiscall NtmsDbDriveType::operator=(class NtmsDbDriveType &)",
    "private: static class NtmsDbRecordType NtmsDbUIDestination::m_Type",
    "protected: virtual void __thiscall NtmsDbObject::DeleteDbObject(class NtmsDbDataCtxt *)",
    "public: __thiscall NtmsDbString::NtmsDbString(unsigned int)",
    "protected: virtual void __thiscall NtmsDbMediaPool::InitDbObject(class NtmsDbDataCtxt *)",
    "const NtmsDbDriveType::`vftable'",
    "protected: void __thiscall NtmsDbObject::ReadObjectRecord(class NtmsDbDataCtxt *,class NtmsDbRecordKey &,class NtmsDbRecordRev &,class NtmsDbRecordPropList *)",
    "public: unsigned long __thiscall NtmsDbLibrary::Changers(class NtmsDbDataCtxt *,class NtmsDbSelectionSet &)",
    "public: virtual unsigned long __thiscall NtmsDbObject::Refresh(class NtmsDbDataCtxt *)",
    "public: void __thiscall NtmsDbPartition::GetOmidLabelTypeA(char *,int)const",
    "public: __thiscall NtmsDbGuid::NtmsDbGuid(void)",
    "public: void __thiscall NtmsDbSelectionSet::operator<<(class NtmsDbRecordUniqueKey const &)",
    "public: char const * __thiscall NtmsDbTypeGuid::id(void)const",
    "protected: virtual void __thiscall NtmsDbOpRequest::GetDbObject(class NtmsDbDataCtxt *)",
    "protected: virtual void __thiscall NtmsDbMediaType::InitDbObject(class NtmsDbDataCtxt *)",
    "public: unsigned long __thiscall NtmsDbDrive::SetScsiLun(unsigned short)",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::SetSlotId(class NtmsDbGuid const &)",
    "public: long __thiscall NtmsDbDrive::ScsiTarget_IsNotNull(void)",
    "public: __thiscall NtmsDbRecordPropList::~NtmsDbRecordPropList(void)",
    "public: unsigned long __thiscall NtmsDbLibrary::SetFixedOffline(short)",
    "public: unsigned long __thiscall NtmsDbMediaPool::SetDeallocationPolicy(unsigned long)",
    "public: unsigned short const * __thiscall NtmsDbOpRequest::User(void)const",
    "public: long __thiscall NtmsDbChanger::SerialNumber_IsNotNull(void)",
    "public: void __thiscall NtmsDbPhysicalMedia::SetLibCurrentMedia_Null(void)",
    "public: void __thiscall NtmsDbChangerType::GetVendorA(char *,int)",
    "public: class NtmsDbLibWorkItem & __thiscall NtmsDbLibWorkItem::operator=(class NtmsDbLibWorkItem const &)",
    "public: void __thiscall NtmsDbRecordProp::Init(short,short *,int,int)",
    "public: long __thiscall NtmsDbObject::Name_IsNotNull(void)",
    "public: unsigned long __thiscall NtmsDbPropertyValue::LastStatus(void)",
    "public: class NtmsDbError const & __thiscall NtmsDbDataCtxt::Error(void)const",
    "public: class NtmsDbRecordProp const & __thiscall NtmsDbRecordProp::operator=(unsigned long)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbDrive::DriveType(void)const",
    "public: class NtmsDbRecordUniqueKey const & __thiscall NtmsDbRecordUniqueKey::operator=(class NtmsDbRecordUniqueKey const &)",
    "public: void __thiscall NtmsDbIEDoor::SetLibrary_Null(void)",
    "public: class NtmsDbError & __thiscall NtmsDbError::operator=(unsigned long)",
    "protected: virtual class NtmsDbRecordProp * __thiscall NtmsDbOpRequest::GetDbProperty(long)const",
    "public: union _LARGE_INTEGER & __thiscall NtmsDbPartition::Capacity(void)",
    "unsigned long __stdcall NtmsDbInstall(void)",
    "private: void __thiscall NtmsDbChanger::BuildPropertyList(void)",
    "protected: virtual void __thiscall NtmsDbPhysicalMedia::SetDbObject(class NtmsDbDataCtxt *)",
    "public: class NtmsDbGuid & __thiscall NtmsDbPropGuid::PreviousRelationGuid(void)",
    "protected: virtual void __thiscall NtmsDbChangerType::GetDbObject(class NtmsDbDataCtxt *)",
    "public: unsigned long __thiscall NtmsDbDrive::SetRevision(char const *)",
    "public: unsigned long const __thiscall NtmsDbPartition::OmidLabelIdLength(void)const",
    "public: unsigned short const * __thiscall NtmsDbObject::DescriptionW(void)",
    "public: void __thiscall NtmsDbDrive::GetPathNameW(unsigned short *,int)",
    "public: void __thiscall NtmsDbOpRequest::GetApplicationA(char *,int)",
    "public: unsigned short const __thiscall NtmsDbChanger::ScsiTarget_n(void)const",
    "private: static class NtmsDbRecordType NtmsDbMediaType::m_Type",
    "public: unsigned long __thiscall NtmsDbObject::LastError(void)const",
    "public: void __thiscall NtmsDbLibWorkItem::GetUserW(unsigned short *,int)",
    "public: unsigned long const __thiscall NtmsDbLibrary::FirstSlotNumber(void)const",
    "protected: virtual void __thiscall NtmsDbLibWorkItem::InitDbObject(class NtmsDbDataCtxt *)",
    "public: class NtmsDbPropRecordClass & __thiscall NtmsDbPropRecordClass::operator=(class NtmsDbPropRecordClass const &)",
    "public: __thiscall NtmsDbPropDataType::operator short(void)const",
    "protected: virtual void __thiscall NtmsDbDriveType::DeleteDbObject(class NtmsDbDataCtxt *)",
    "public: void __thiscall NtmsDbRecordProp::Init(short,class NtmsDbGuid &,int)",
    "public: unsigned long __thiscall NtmsDbDrive::SetSavedPartitionId(class NtmsDbGuid const &)",
    "const NtmsDbIEPort::`vftable'",
    "public: unsigned long __thiscall NtmsDbDrive::SetUseCount(unsigned long)",
    "public: int __thiscall NtmsDbGuid::operator==(class NtmsDbGuid const &)const",
    "public: unsigned long __thiscall NtmsDbIEPort::SetIEPortNumber(unsigned long)",
    "public: virtual void __thiscall NtmsDbSelectionSet::Reset(void)",
    "protected: virtual void __thiscall NtmsDbIEDoor::InitDbObject(class NtmsDbDataCtxt *)",
    "public: class NtmsDbGuid & __thiscall NtmsDbGuid::operator=(char const *)",
    "public: static class NtmsDbRecordProp & __stdcall NtmsDbRecordPropList::GetNull(void)",
    "public: __thiscall NtmsDbOpRequest::NtmsDbOpRequest(void)",
    "public: void __thiscall NtmsDbRecordPropList::NewPropGuid(long,class NtmsDbLinkedGuid &,class NtmsDbRecordType *,long)",
    "public: void __thiscall NtmsDbRecordPropList::operator>>(class NtmsDbPropShort * &)",
    "public: virtual __thiscall NtmsDbLogicalMedia::~NtmsDbLogicalMedia(void)",
    "public: virtual __thiscall NtmsDbChangerType::~NtmsDbChangerType(void)",
    "public: void __thiscall NtmsDbSelectionSet::Select(class NtmsDbDataCtxt *,unsigned long)",
    "protected: virtual unsigned long __thiscall NtmsDbObject::InitializeObject(unsigned long)",
    "public: unsigned long __thiscall NtmsDbObject::GetSecurityDescriptor(void *,unsigned long &)",
    "public: unsigned long __thiscall NtmsDbOpRequest::SetRequest(unsigned long)",
    "protected: virtual void __thiscall NtmsDbLibrary::GetDbObject(class NtmsDbDataCtxt *)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbOpRequest::Arg2(void)const",
    "const NtmsDatabase::`vftable'",
    "public: __thiscall NtmsDatabase::NtmsDatabase(class NtmsDatabase const &)",
    "public: void __thiscall NtmsDbObject::GetDescriptionA(char *,int)",
    "private: static class NtmsDbRecordType NtmsDbPartition::m_Type",
    "const NtmsDbPhysicalMedia::`vftable'",
    "private: unsigned long __thiscall NtmsDatabase::FilePosition(unsigned long)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbLibrary::Computer_n(void)const",
    "public: unsigned long __thiscall NtmsDbChanger::SetSerialNumberW(unsigned short const *)",
    "public: unsigned long const __thiscall NtmsDbChangerType::DeviceType(void)const",
    "public: __thiscall NtmsDbGuid::NtmsDbGuid(struct _GUID const *)",
    "public: unsigned long __thiscall NtmsDbMediaPool::SetParent(class NtmsDbGuid const &)",
    "public: unsigned short const __thiscall NtmsDbPartition::Side(void)const",
    "public: void __thiscall NtmsDbObjTypeDef::Register(void)",
    "public: void __thiscall NtmsDbRecordPropList::NewPropTimeDate(long,struct _SYSTEMTIME *)",
    "protected: virtual void __thiscall NtmsDbIEPort::SetDbObject(class NtmsDbDataCtxt *)",
    "public: class NtmsDbRecordProp const & __thiscall NtmsDbRecordProp::operator=(long)",
    "public: __thiscall NtmsDbIEDoor::NtmsDbIEDoor(void)",
    "public: unsigned long __thiscall NtmsDbObject::ExplicitAddRelation(long,short,class NtmsDbGuid const &)",
    "protected: virtual class NtmsDbRecordProp * __thiscall NtmsDbMediaType::GetDbProperty(long)const",
    "public: virtual __thiscall NtmsDbPhysicalMedia::~NtmsDbPhysicalMedia(void)",
    "private: static class NtmsDbRecordType NtmsDbComputer::m_Type",
    "private: void __thiscall NtmsDbDrive::BuildPropertyList(void)",
    "public: class NtmsDbOpRequest & __thiscall NtmsDbOpRequest::operator=(class NtmsDbOpRequest const &)",
    "public: long __thiscall NtmsDbChanger::Library_IsNotNull(void)const",
    "public: __thiscall NtmsDbDrive::NtmsDbDrive(class NtmsDbDataCtxt *,class NtmsDbGuid const &)",
    "public: class NtmsDbPropGuid & __thiscall NtmsDbPropGuid::operator=(class NtmsDbPropGuid const &)",
    "public: long __thiscall NtmsDbPhysicalMedia::PhysLocId_IsNotNull(void)",
    "public: unsigned long const __thiscall NtmsDbStorageSlot::SlotState(void)const",
    "public: __thiscall NtmsDbObjTypeDef::NtmsDbObjTypeDef(char *,char *,unsigned long,unsigned long,class NtmsDbRecordType *,class NtmsPropInfo *)",
    "public: struct _SYSTEMTIME const __thiscall NtmsDbLibWorkItem::TimeCompleted_n(void)const",
    "public: unsigned long __thiscall NtmsDbObject::getRelatedObjects(class NtmsDbDataCtxt *,class NtmsDbSelectionSet &,long)",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::SetOperationCode(unsigned long)",
    "public: void __thiscall NtmsDbDrive::SetDriveLetter_Null(void)",
    "public: void __thiscall NtmsDbLibWorkItem::GetApplicationA(char *,int)",
    "public: void __thiscall NtmsDbRecordPropList::operator>>(class NtmsDbPropChar * &)",
    "public: void __thiscall NtmsDbRecordProp::SetDefault(void)",
    "private: void __thiscall NtmsDbMediaPool::InitDefaults(void)",
    "protected: virtual void __thiscall NtmsDbLibWorkItem::DeleteDbObject(class NtmsDbDataCtxt *)",
    "public: __thiscall NtmsDbPropGuid::~NtmsDbPropGuid(void)",
    "public: unsigned long const __thiscall NtmsDbPartition::LifeCycleState(void)const",
    "public: unsigned short const * __thiscall NtmsDbDrive::InstanceNameW(void)const",
    "public: void __thiscall NtmsDbLibWorkItem::SetPartitionId_Null(void)",
    "public: void __thiscall NtmsDbList::Map::SetNext(class NtmsDbList::Map *)",
    "public: void __thiscall NtmsDbPhysicalMedia::SetHomeSlotId_Null(void)",
    "public: void __thiscall NtmsDbRecordProp::Init(short,struct _SYSTEMTIME *,int)",
    "protected: virtual void __thiscall NtmsDbDrive::InitDbObject(class NtmsDbDataCtxt *)",
    "public: int __thiscall NtmsDbObject::SetModified(long)",
    "public: unsigned long const __thiscall NtmsDbDrive::UseCount(void)const",
    "public: unsigned long __thiscall NtmsDbLibrary::SetCleanerSlot(class NtmsDbGuid const &)",
    "public: virtual void __thiscall NtmsDbObject::ComputeProps(enum NtmsDbObject::ObjectOperationType)",
    "protected: virtual void __thiscall NtmsDbIEDoor::SetDbObject(class NtmsDbDataCtxt *)",
    "public: void __thiscall NtmsDbOpRequest::GetComputerW(unsigned short *,int)",
    "private: void __thiscall NtmsDbLibWorkItem::BuildPropertyList(void)",
    "protected: virtual void __thiscall NtmsDbStorageSlot::DeleteDbObject(class NtmsDbDataCtxt *)",
    "public: char const * __thiscall NtmsDbDrive::PathName_n(void)",
    "private: void __thiscall NtmsDbDriveType::BuildPropertyList(void)",
    "public: int __thiscall NtmsDbRecordProp::Dynamic(void)const",
    "public: unsigned long __thiscall NtmsDbChanger::SetNumber(unsigned long)",
    "public: void __thiscall NtmsDbList::Map::SetSize(long)",
    "public: void __thiscall NtmsDbRecordPropList::NewPropLong(long,long *,int)",
    "public: unsigned short const * __thiscall NtmsDbChanger::SerialNumberW(void)const",
    "public: __thiscall NtmsDbError::operator unsigned long(void)const",
    "public: class NtmsDbRecordRev & __thiscall NtmsDbRecordRev::operator=(class NtmsDbRecordRev const &)",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::SetLibCurrentMedia(class NtmsDbGuid const &)",
    "public: __thiscall NtmsDbRecordRev::NtmsDbRecordRev(void)",
    "public: __thiscall NtmsDbOpRequest::NtmsDbOpRequest(class NtmsDbDataCtxt *,class NtmsDbGuid const &)",
    "public: class NtmsDatabase * __thiscall NtmsDbDataCtxt::Handle(void)const",
    "public: static void __stdcall NtmsDbDataCtxt::BumpActivityCounter(void)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbPartition::Logicalmedia_n(void)const",
    "public: long __thiscall NtmsDbList::Map::Get(long,class NtmsDbListItem * &)const",
    "public: unsigned long __thiscall NtmsDbDataCtxt::LastErrorCode(void)const",
    "public: __thiscall NtmsDbUIDestination::NtmsDbUIDestination(void)",
    "private: void __thiscall NtmsDbMediaType::BuildPropertyList(void)",
    "private: class NtmsDbRecordKeyList * __thiscall NtmsDbSelectionSet::List(void)",
    "const NtmsDbOpRequest::`vftable'",
    "public: __thiscall NtmsDbPropTimeDate::NtmsDbPropTimeDate(void)",
    "public: __thiscall NtmsDbMediaPool::NtmsDbMediaPool(void)",
    "protected: virtual void __thiscall NtmsDbDriveType::SetDbObject(class NtmsDbDataCtxt *)",
    "protected: virtual void __thiscall NtmsDbObject::ModifyValueToNull(long)",
    "protected: virtual void __thiscall NtmsDbStorageSlot::GetDbObject(class NtmsDbDataCtxt *)",
    "public: __thiscall NtmsDbPropBinary::NtmsDbPropBinary(void)",
    "protected: void __thiscall NtmsDbObject::RegisterObjectRecord(class NtmsDbDataCtxt *,class NtmsDbRecordType &,char *)",
    "public: __thiscall NtmsDbGuid::NtmsDbGuid(class NtmsDbGuid const &)",
    "public: __thiscall NtmsDbIEPort::NtmsDbIEPort(void)",
    "public: __thiscall NtmsDbRecordProp::operator unsigned short *(void)const",
    "public: class NtmsDbString & __thiscall NtmsDbString::operator+=(char const *)",
    "public: unsigned long __thiscall NtmsDbComputer::RemoveUIDestination(unsigned long,class NtmsDbGuid const &)",
    "public: class NtmsDbList & __thiscall NtmsDbList::operator-=(class NtmsDbListItem &)",
    "public: unsigned long __thiscall NtmsDbMediaPool::Folders(class NtmsDbDataCtxt *,class NtmsDbSelectionSet &)",
    "public: unsigned long __thiscall NtmsDbPartition::SetSide(unsigned short)",
    "public: virtual __thiscall NtmsDbRecordKeyList::~NtmsDbRecordKeyList(void)",
    "public: void __thiscall NtmsDbList::Map::Set(long,class NtmsDbListItem *)",
    "public: unsigned long __thiscall NtmsDbLibrary::SetLibraryType(unsigned long)",
    "public: void __thiscall NtmsDbPartition::SetPhysicalmedia_Null(void)",
    "public: void __thiscall NtmsDbRecordProp::SetNull(void)",
    "public: void __thiscall NtmsDbSelectionSet::SetDynamic(int)",
    "public: class NtmsDbRecordKeyList & __thiscall NtmsDbRecordKeyList::operator=(class NtmsDbRecordKeyList const &)",
    "public: void __thiscall NtmsDbDriveType::GetVendorA(char *,int)",
    "public: void __thiscall NtmsDbRecordPropList::NewPropRelation(long,class NtmsDbRecordKeyList *)",
    "public: virtual void __thiscall NtmsDbObject::ComputeProps(enum NtmsDbObject::ObjectOperationType,long)",
    "public: void __thiscall NtmsDbObject::SetName_Null(void)",
    "public: __thiscall NtmsDbRecordKeyList::NtmsDbRecordKeyList(class NtmsDbRecordKeyList const &)",
    "public: __thiscall NtmsDbRecordProp::operator long(void)const",
    "protected: virtual class NtmsDbRecordProp * __thiscall NtmsDbIEDoor::GetDbProperty(long)const",
    "public: unsigned long __thiscall NtmsDbStorageSlot::SetSlotNumber(unsigned long)",
    "public: unsigned long const __thiscall NtmsDbLibrary::LibraryType(void)const",
    "public: void * __thiscall NtmsDbRecordProp::GetData(int *)const",
    "public: unsigned long __thiscall NtmsDbOpRequest::SetComputer(unsigned short const *)",
    "public: __thiscall NtmsDbRecordUniqueKey::operator class NtmsDbRecordKey *(void)",
    "public: void __thiscall NtmsDatabase::SetNotificationHandler(void (__stdcall*)(int,short,class NtmsDbGuid const &,int))",
    "public: char const * __thiscall NtmsDbObjTypeDef::TypeName(void)const",
    "private: void __thiscall NtmsDbComputer::InitDefaults(void)",
    "protected: virtual void __thiscall NtmsDbObject::InitDbObject(class NtmsDbDataCtxt *)",
    "public: class NtmsPropMetaInfo & __thiscall NtmsPropMetaInfo::operator=(class NtmsPropMetaInfo const &)",
    "public: unsigned int __thiscall NtmsDbRecordProp::Store(unsigned char *)",
    "public: void __thiscall NtmsDbUIDestination::GetComputer(unsigned short *,int)",
    "public: __thiscall NtmsDbLogicalMedia::NtmsDbLogicalMedia(class NtmsDbDataCtxt *,class NtmsDbGuid const &)",
    "public: __thiscall NtmsDbRecordUniqueKey::NtmsDbRecordUniqueKey(void)",
    "public: __thiscall NtmsDbPropShort::NtmsDbPropShort(void)",
    "public: static unsigned long __stdcall NtmsDbDataCtxt::AcquireChangeMutex(unsigned long)",
    "public: unsigned char * __thiscall NtmsDbGuid::StrGuid(unsigned char *)const",
    "public: class NtmsDbList & __thiscall NtmsDbList::operator+=(class NtmsDbListItem &)",
    "public: void __thiscall NtmsDbRecordRev::operator++(void)",
    "private: void __thiscall NtmsDbDrive::InitDefaults(void)",
    "public: static class NtmsDbRecordProp NtmsDbRecordProp::NullProp",
    "public: unsigned long __thiscall NtmsDbMediaPool::LogicalPoolMember(class NtmsDbDataCtxt *,class NtmsDbSelectionSet &)",
    "public: long __thiscall NtmsDbComputer::OpReqCleanTime(void)const",
    "public: void __thiscall NtmsDbRecordProp::Init(short,class NtmsDbRecordKeyList *,int)",
    "public: void __thiscall NtmsDbChanger::SetScsiBus_Null(void)",
    "public: long __thiscall NtmsDbObject::Description_IsNotNull(void)",
    "public: void __thiscall NtmsDbList::operator<<(class NtmsDbListItem &)",
    "private: static class NtmsDbRecordType NtmsDbDrive::m_Type",
    "public: unsigned long __thiscall NtmsDbChanger::SetSerialNumber(char const *)",
    "public: short const __thiscall NtmsDbDrive::NeedsCleaning(void)const",
    "public: void __thiscall NtmsDbRecordType::operator=(short)",
    "public: class NtmsDbRecordProp const & __thiscall NtmsDbRecordProp::operator=(int)",
    "public: class NtmsDbPropShort & __thiscall NtmsDbPropShort::operator=(class NtmsDbPropShort const &)",
    "public: class NtmsDbPropertyValue const & __thiscall NtmsDbPropertyValue::operator=(long)",
    "public: void * __thiscall NtmsDbDataCtxt::ExtensionPrivateData(void)",
    "public: unsigned long __thiscall NtmsDbPartition::SetPhysicalmedia(class NtmsDbGuid const &)",
    "public: void __thiscall NtmsDbPropHeader::SetPropCode(short)",
    "public: unsigned short const * __thiscall NtmsDbDrive::SerialNumberW(void)const",
    "public: void __thiscall NtmsDbRecordKeyList::operator<<(class NtmsDbRecordUniqueKey const &)",
    "public: unsigned long const __thiscall NtmsDbIEPort::FullState(void)const",
    "public: unsigned long const __thiscall NtmsDbChanger::Number(void)const",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::Partitions(class NtmsDbDataCtxt *,class NtmsDbSelectionSet &)",
    "public: void __thiscall NtmsDbFile::SetFileStatus(unsigned long)",
    "public: class NtmsDbPropDouble & __thiscall NtmsDbPropDouble::operator=(class NtmsDbPropDouble const &)",
    "public: unsigned long __thiscall NtmsDbOpRequest::SetUser(unsigned short const *)",
    "public: unsigned long __thiscall NtmsDbLibrary::SetFirstChangerNumber(unsigned long)",
    "public: unsigned long __thiscall NtmsDbLibrary::SetFlags(unsigned long)",
    "protected: virtual void __thiscall NtmsDbPartition::GetDbObject(class NtmsDbDataCtxt *)",
    "public: __thiscall NtmsDbLibWorkItem::NtmsDbLibWorkItem(void)",
    "public: void __thiscall NtmsDbPartition::GetOmidLabelInfoA(char *,int)const",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::SetPhysLocType(unsigned long)",
    "public: unsigned long __thiscall NtmsDbRecordProp::DataSize(void)const",
    "public: static class ChangeRegistration * NtmsDbDataCtxt::m_ChangeTable",
    "public: unsigned long __thiscall NtmsDbMediaPool::NumFolders(void)",
    "public: void __thiscall NtmsDbList::Map::Remove(long)",
    "public: class NtmsDbSelectionSet & __thiscall NtmsDbSelectionSet::operator=(class NtmsDbSelectionSet const &)",
    "public: unsigned long __thiscall NtmsDbLibrary::SetFirstDriveNumber(unsigned long)",
    "public: unsigned int __thiscall NtmsDbRecordProp::Load(unsigned char *,unsigned long &)",
    "public: __thiscall NtmsDbStorageSlot::NtmsDbStorageSlot(void)",
    "public: __thiscall NtmsDbChangerType::NtmsDbChangerType(class NtmsDbDataCtxt *,class NtmsDbGuid const &)",
    "public: __thiscall NtmsDbSelectionSet::NtmsDbSelectionSet(class NtmsDbDataCtxt *,unsigned long)",
    "protected: virtual class NtmsDbRecordProp * __thiscall NtmsDbIEPort::GetDbProperty(long)const",
    "public: class NtmsDbString & __thiscall NtmsDbString::operator=(unsigned short const *)",
    "public: unsigned short const * __thiscall NtmsDbObject::NameW(void)",
    "public: class NtmsDbStorageSlot & __thiscall NtmsDbStorageSlot::operator=(class NtmsDbStorageSlot const &)",
    "const NtmsDbLibrary::`vftable'",
    "public: void __thiscall NtmsDbPhysicalMedia::GetBarcodeW(unsigned short *,int)",
    "public: char const * __thiscall NtmsDbObject::LastErrorString(void)const",
    "public: __thiscall NtmsDbLibrary::NtmsDbLibrary(void)",
    "public: void __thiscall NtmsDbRecordProp::CopyData(void *,long)",
    "private: void __thiscall NtmsDbTypeGuid::Fill(struct _GUID &,char *)",
    "public: class NtmsDbList & __thiscall NtmsDbList::operator-(class NtmsDbListItem *)",
    "public: unsigned long __thiscall NtmsDbChanger::SetScsiTarget(unsigned short)",
    "public: class NtmsDbPropertyValue const & __thiscall NtmsDbPropertyValue::operator=(char const *)",
    "public: __thiscall NtmsDbProperty::NtmsDbProperty(void)",
    "public: __thiscall NtmsDbRecordPropList::NtmsDbRecordPropList(class NtmsDbRecordPropList const &)",
    "public: long __thiscall NtmsDbChanger::PathName_IsNotNull(void)",
    "public: unsigned long __thiscall NtmsDbPartition::SetOmidLabelType(unsigned short const *)",
    "const NtmsDbLogicalMedia::`vftable'",
    "protected: virtual void __thiscall NtmsDbPhysicalMedia::InitDbObject(class NtmsDbDataCtxt *)",
    "protected: virtual void __thiscall NtmsDbIEPort::GetDbObject(class NtmsDbDataCtxt *)",
    "public: unsigned long __thiscall NtmsDbPropertyValue::Type(void)",
    "public: unsigned long __thiscall NtmsDbRecordProp::Size(void)const",
    "private: void __thiscall NtmsDbLogicalMedia::InitDefaults(void)",
    "public: class NtmsDbGuid & __thiscall NtmsDbGuid::operator=(struct _GUID const &)",
    "public: long __thiscall NtmsDbLibWorkItem::PhysMediaId_IsNotNull(void)",
    "public: long __thiscall NtmsDbStorageSlot::Library_IsNotNull(void)const",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::SetPriority(unsigned long)",
    "public: long __thiscall NtmsDbComputer::LibReqCleanTime(void)const",
    "public: unsigned long __thiscall NtmsDbLibrary::AddMediaType(class NtmsDbGuid const &)",
    "public: unsigned short const * __thiscall NtmsDbLibWorkItem::Computer(void)const",
    "public: __thiscall NtmsDbString::operator char const *(void)const",
    "protected: virtual void __thiscall NtmsDbLibrary::SetDbObject(class NtmsDbDataCtxt *)",
    "public: void __thiscall NtmsDbDriveType::GetProductW(unsigned short *,int)",
    "public: unsigned long __thiscall NtmsDbMediaType::SetDeviceType(unsigned long)",
    "private: static class NtmsDbRecordType NtmsDbChangerType::m_Type",
    "public: class NtmsDbPropBinary & __thiscall NtmsDbPropBinary::operator=(class NtmsDbPropBinary const &)",
    "public: __thiscall NtmsDbPropLong::NtmsDbPropLong(void)",
    "public: class NtmsDbPropHeader const & __thiscall NtmsDbPropHeader::operator=(class NtmsDbPropHeader const &)",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::SetBarcodeState(unsigned long)",
    "public: void __thiscall NtmsDbDrive::GetPathNameA(char *,int)",
    "public: long __thiscall NtmsDbDrive::Library_IsNotNull(void)const",
    "public: __thiscall NtmsDbDrive::NtmsDbDrive(void)",
    "public: unsigned long __thiscall NtmsDbDataCtxt::Connect(unsigned short const *,unsigned short const *)",
    "public: unsigned long __thiscall NtmsDbFile::State(void)",
    "public: long __thiscall NtmsDbChanger::ScsiLun_IsNotNull(void)",
    "public: __thiscall NtmsDbList::Map::~Map(void)",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::SetBarcode(char const *)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbLibWorkItem::PhysMediaId_n(void)const",
    "public: long __thiscall NtmsDbDrive::SavedPartitionId_IsNotNull(void)",
    "public: __thiscall NtmsDbRecordKey::NtmsDbRecordKey(class NtmsDbRecordType const &)",
    "public: void __thiscall NtmsDbLibWorkItem::GetUserA(char *,int)",
    "public: unsigned long __thiscall NtmsDbChanger::SetRevisionW(unsigned short const *)",
    "public: long const __thiscall NtmsDbMediaType::NextSequence(void)const",
    "public: long __thiscall NtmsDbLibWorkItem::DriveId_IsNotNull(void)",
    "public: void __thiscall NtmsDbChanger::SetSerialNumber_Null(void)",
    "public: char const * __thiscall NtmsDbChanger::PathName_n(void)",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::SetPhysLocId(class NtmsDbGuid const &)",
    "public: int __thiscall NtmsDbRecordKey::operator==(class NtmsDbRecordKey const &)const",
    "public: short __thiscall NtmsDbPropHeader::PropCode(void)const",
    "public: void __thiscall NtmsDbRecordPropList::NewPropShort(long,unsigned short *,int)",
    "public: unsigned long __thiscall NtmsDbLibrary::IEDoors(class NtmsDbDataCtxt *,class NtmsDbSelectionSet &)",
    "public: void __thiscall NtmsDbChangerType::GetProductA(char *,int)",
    "public: unsigned short const * __thiscall NtmsDbChangerType::VendorW(void)const",
    "public: __thiscall NtmsDbRecordRev::NtmsDbRecordRev(unsigned long)",
    "public: long __thiscall NtmsDbIEPort::Library_IsNotNull(void)const",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::SetApplication(unsigned short const *)",
    "public: __thiscall NtmsDbRecordUniqueKey::operator class NtmsDbGuid *(void)",
    "public: short __thiscall NtmsDbGuid::GenerateHash(void)",
    "public: __thiscall NtmsDbPhysicalMedia::NtmsDbPhysicalMedia(class NtmsDbDataCtxt *,class NtmsDbGuid const &)",
    "public: class NtmsDbRecordProp const & __thiscall NtmsDbRecordProp::operator=(double)",
    "public: int __thiscall NtmsDbGuid::operator!=(struct _GUID const &)const",
    "public: unsigned long const __thiscall NtmsDbLibWorkItem::OperationCode(void)const",
    "protected: virtual void __thiscall NtmsDbStorageSlot::InitDbObject(class NtmsDbDataCtxt *)",
    "public: class NtmsDbRecordProp const & __thiscall NtmsDbRecordProp::operator=(float)",
    "public: void __thiscall NtmsDbChanger::GetRevisionW(unsigned short *,int)",
    "protected: virtual void __thiscall NtmsDbMediaPool::GetDbObject(class NtmsDbDataCtxt *)",
    "protected: virtual void __thiscall NtmsDbLibrary::InitDbObject(class NtmsDbDataCtxt *)",
    "public: long __thiscall NtmsDbLibWorkItem::Library_IsNotNull(void)const",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::SetAssocWorkItem(class NtmsDbGuid const &)",
    "public: class NtmsPropInfo * __thiscall NtmsDbObjTypeDef::PropInfo(void)const",
    "public: void __thiscall NtmsDbObject::GetNameA(char *,int)",
    "public: __thiscall NtmsDbList::NtmsDbList(int)",
    "public: unsigned long __thiscall NtmsDbMediaPool::SetAllocationPolicy(unsigned long)",
    "public: class NtmsTransaction * __thiscall NtmsDbDataCtxt::Transaction(void)",
    "public: unsigned long __thiscall NtmsDbComputer::SetOpReqFlags(unsigned long)",
    "public: unsigned long __thiscall NtmsDbSelectionSet::Status(void)const",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::SetPartitionId(class NtmsDbGuid const &)",
    "public: unsigned long __thiscall NtmsDbLibrary::NumLibWorkItems(void)",
    "public: virtual unsigned long __thiscall NtmsDbObject::UpdateRegardless(class NtmsDbDataCtxt *)",
    "public: struct _SYSTEMTIME __thiscall NtmsDbObject::CreateTs(void)const",
    "public: void __thiscall NtmsDbDrive::SetScsiTarget_Null(void)",
    "protected: virtual void __thiscall NtmsDbLibrary::DeleteDbObject(class NtmsDbDataCtxt *)",
    "public: int __thiscall NtmsDbGuid::Null(void)const",
    "public: unsigned long __thiscall NtmsDbLibrary::RemoveMediaType(class NtmsDbGuid const &)",
    "public: unsigned long __thiscall NtmsDbOpRequest::Request(void)const",
    "public: static class NtmsDbObjTypeDef * NtmsDbObjTypeDef::ObjectTypes",
    "public: long __thiscall NtmsDbChanger::ScsiTarget_IsNotNull(void)",
    "const NtmsDbIEDoor::`vftable'",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::SetPoolMember(class NtmsDbGuid const &)",
    "unsigned long __stdcall NtmsDbShutdown(void)",
    "public: unsigned short const __thiscall NtmsDbDrive::ScsiLun_n(void)const",
    "public: __thiscall NtmsDbPropLong::~NtmsDbPropLong(void)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbOpRequest::Arg1(void)const",
    "public: void __thiscall NtmsDbRecordProp::Init(short,unsigned short *,int,int)",
    "public: unsigned long __thiscall NtmsDbOpRequest::SetArg2Type(unsigned long)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbLibWorkItem::PartitionId_n(void)const",
    "public: long __thiscall NtmsDbPropHeader::Count(void)const",
    "protected: virtual void __thiscall NtmsDbMediaType::GetDbObject(class NtmsDbDataCtxt *)",
    "public: void __thiscall NtmsDbChanger::GetSerialNumberW(unsigned short *,int)",
    "public: __thiscall NtmsDbObject::NtmsDbObject(class NtmsDbDataCtxt *,unsigned long,class NtmsDbGuid const &)",
    "public: void __thiscall NtmsDbGuid::Print(void)const",
    "protected: virtual void __thiscall NtmsDbPartition::InitDbObject(class NtmsDbDataCtxt *)",
    "public: void __thiscall NtmsDbDrive::SetScsiPort_Null(void)",
    "protected: virtual void __thiscall NtmsDbComputer::InitDbObject(class NtmsDbDataCtxt *)",
    "public: void __thiscall NtmsDbChanger::SetScsiTarget_Null(void)",
    "public: virtual __thiscall NtmsDbMediaPool::~NtmsDbMediaPool(void)",
    "protected: virtual class NtmsDbRecordProp * __thiscall NtmsDbObject::GetDbProperty(long)const",
    "public: void __thiscall NtmsDbList::Clear(void)",
    "public: unsigned short const * __thiscall NtmsDbObject::DescriptionW(void)const",
    "public: void __thiscall NtmsDbRecordPropList::NewPropChar(long,unsigned char *,int)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbSelectionSet::ObjectGuid(long)const",
    "public: class NtmsDbPropDataType const & __thiscall NtmsDbPropHeader::Type(void)const",
    "public: unsigned long __thiscall NtmsDbChanger::SetChangerType(class NtmsDbGuid const &)",
    "public: void __thiscall NtmsDbDrive::SetPathName_Null(void)",
    "public: class NtmsDbRecordProp const & __thiscall NtmsDbRecordProp::operator=(unsigned short)",
    "public: long __thiscall NtmsDbPartition::Logicalmedia_IsNotNull(void)const",
    "public: unsigned long __thiscall NtmsDbDataCtxt::MinimizeResources(void)",
    "public: unsigned long __thiscall NtmsDbMediaPool::SetMediaType(class NtmsDbGuid)",
    "public: void __thiscall NtmsDbChanger::GetPathNameW(unsigned short *,int)",
    "protected: virtual void __thiscall NtmsDbIEPort::DeleteDbObject(class NtmsDbDataCtxt *)",
    "private: void __thiscall NtmsDbPhysicalMedia::BuildPropertyList(void)",
    "public: __thiscall NtmsDbComputer::NtmsDbComputer(void)",
    "public: __thiscall NtmsDbObject::NtmsDbObject(void)",
    "public: long __thiscall NtmsDbUIDestination::IncReference(void)",
    "public: class NtmsDbProperty & __thiscall NtmsDbProperty::operator=(class NtmsDbProperty const &)",
    "public: void __thiscall NtmsDbRecordProp::SetModified(void)",
    "protected: virtual void __thiscall NtmsDbChangerType::DeleteDbObject(class NtmsDbDataCtxt *)",
    "public: __thiscall NtmsDbRecordUniqueKey::operator class NtmsDbGuid &(void)",
    "public: char const * __thiscall NtmsDbChanger::Revision(void)",
    "public: class NtmsDbPropDataType & __thiscall NtmsDbPropDataType::operator=(short)",
    "public: int __thiscall NtmsDbPropDataType::operator!=(class NtmsDbPropDataType &)",
    "protected: virtual void __thiscall NtmsDbLogicalMedia::GetDbObject(class NtmsDbDataCtxt *)",
    "public: int __thiscall NtmsDbList::Dynamic(void)const",
    "public: unsigned long __thiscall NtmsDbMediaPool::NumLogicalMedia(void)",
    "public: short const __thiscall NtmsDbLibrary::AutoRecovery(void)const",
    "public: void __thiscall NtmsDbList::operator>>(class NtmsDbListItem * &)",
    "public: long __thiscall NtmsDbDrive::ScsiLun_IsNotNull(void)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbPartition::Physicalmedia_n(void)const",
    "public: unsigned long __thiscall NtmsDbChanger::SetLibrary(class NtmsDbGuid const &)",
    "protected: virtual void __thiscall NtmsDbUIDestination::GetDbObject(class NtmsDbDataCtxt *)",
    "public: void __thiscall NtmsDbLogicalMedia::SetMediaPoolId_Null(void)",
    "public: unsigned long __thiscall NtmsDbRecordPropList::PropertySpace(void)",
    "public: class NtmsPropInfo & __thiscall NtmsPropInfo::operator=(class NtmsPropInfo const &)",
    "public: __thiscall NtmsDbRecordPropList::NtmsDbRecordPropList(void)",
    "public: unsigned long const __thiscall NtmsDbLibrary::FirstChangerNumber(void)const",
    "private: void __thiscall NtmsDbLibWorkItem::InitDefaults(void)",
    "public: unsigned short const __thiscall NtmsDbDrive::ScsiTarget_n(void)const",
    "private: void __thiscall NtmsDbObject::InitDefaults(void)",
    "public: unsigned long __thiscall NtmsDbOpRequest::SetArg1(class NtmsDbGuid const &)",
    "const NtmsDbMediaPool::`vftable'",
    "private: static class NtmsDbRecordType NtmsDbIEPort::m_Type",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::SetDensityCode(unsigned long)",
    "public: void __thiscall NtmsDbRecordPropList::operator>>(class NtmsDbPropLong * &)",
    "public: void __thiscall NtmsDbRecordProp::Init(short,void *,int,int)",
    "public: unsigned long __thiscall NtmsDbChanger::SetScsiPort(unsigned short)",
    "public: void __thiscall NtmsDbRecordPropList::NewPropLargeInt(long,union _LARGE_INTEGER *,int)",
    "protected: virtual void __thiscall NtmsDbLogicalMedia::SetDbObject(class NtmsDbDataCtxt *)",
    "public: __thiscall NtmsDbRecordProp::operator double(void)const",
    "public: __thiscall NtmsDbPropGuid::NtmsDbPropGuid(void)",
    "public: unsigned long __thiscall NtmsDbLibrary::LibCurrentMedia(class NtmsDbDataCtxt *,class NtmsDbSelectionSet &)",
    "public: unsigned long const __thiscall NtmsDbDrive::DriveNumber(void)const",
    "public: unsigned short * __thiscall NtmsDbFile::Filename(void)",
    "public: unsigned long __thiscall NtmsDbOpRequest::SetArg1Type(unsigned long)",
    "public: __thiscall NtmsDbRecordKey::NtmsDbRecordKey(void)",
    "protected: virtual void __thiscall NtmsDbChanger::SetDbObject(class NtmsDbDataCtxt *)",
    "public: __thiscall NtmsDbRecordType::NtmsDbRecordType(void)",
    "public: class NtmsDbLibrary & __thiscall NtmsDbLibrary::operator=(class NtmsDbLibrary const &)",
    "private: void __thiscall NtmsDbIEDoor::InitDefaults(void)",
    "public: unsigned long const __thiscall NtmsDbMediaPool::DeallocationPolicy(void)const",
    "public: long __thiscall NtmsDbObject::Count(void)const",
    "public: short const __thiscall NtmsDbLibrary::BarCodeReader(void)const",
    "public: virtual __thiscall NtmsDbPartition::~NtmsDbPartition(void)",
    "public: unsigned long __thiscall NtmsDbObject::ReportSpecificError(unsigned long)const",
    "public: class NtmsDbGuid const & __thiscall NtmsDbDrive::Library_n(void)const",
    "public: class NtmsDbList & __thiscall NtmsDbList::operator=(class NtmsDbList const &)",
    "protected: virtual void __thiscall NtmsDbPhysicalMedia::GetDbObject(class NtmsDbDataCtxt *)",
    "public: char * __thiscall NtmsDbGuid::StrGuid(char *)const",
    "public: class NtmsDbTypeGuid & __thiscall NtmsDbTypeGuid::operator=(class NtmsDbTypeGuid const &)",
    "protected: virtual class NtmsDbRecordProp * __thiscall NtmsDbStorageSlot::GetDbProperty(long)const",
    "public: void __thiscall NtmsDbDriveType::GetProductA(char *,int)",
    "void __stdcall ObjectChange(int,short,class NtmsDbGuid const &,int)",
    "public: unsigned long __thiscall NtmsDbComputer::NumUIDestinations(unsigned long)",
    "public: void __thiscall NtmsDbRecordPropList::NewPropChar(long,char *,int)",
    "public: char const * __thiscall NtmsDbError::messageString(void)const",
    "public: unsigned long __thiscall NtmsDbComputer::SetOpReqCleanTime(long)",
    "public: unsigned long __thiscall NtmsDbDriveType::SetProduct(char const *)",
    "public: long __thiscall NtmsDbLibWorkItem::TimeCompleted_IsNotNull(void)",
    "public: void __thiscall NtmsDbPropRecordClass::SetKey(class NtmsDbRecordKey &)",
    "public: unsigned long const __thiscall NtmsDbPartition::AllocateCount(void)const",
    "public: class NtmsDbRecordKey & __thiscall NtmsDbRecordKey::operator=(short)",
    "public: void __thiscall NtmsDbPropHeader::DecCount(void)",
    "public: unsigned long __thiscall NtmsDbOpRequest::SetApplication(unsigned short const *)",
    "public: long __thiscall NtmsDbPropGuid::RelationProperty(void)const",
    "public: void __thiscall NtmsDbList::Reset(void)",
    "public: class NtmsDbGuid & __thiscall NtmsDbLinkedGuid::operator=(class NtmsDbGuid const &)",
    "public: unsigned long __thiscall NtmsDbIEPort::SetExtendState(unsigned long)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbLibWorkItem::AssocWorkItem_n(void)const",
    "public: void __thiscall NtmsDbStorageSlot::SetLibrary_Null(void)",
    "public: long __thiscall NtmsDbList::Map::Find(class NtmsDbListItem *)const",
    "public: unsigned long __thiscall NtmsDbLogicalMedia::SetMediaPoolId(class NtmsDbGuid const &)",
    "public: void __thiscall NtmsDbRecordProp::Init(short,char *,int,int)",
    "const NtmsDbChangerType::`vftable'",
    "public: class NtmsDbGuid const & __thiscall NtmsDbChanger::Library_n(void)const",
    "public: virtual unsigned long __thiscall NtmsDbObject::Update(class NtmsDbDataCtxt *)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbDrive::SavedPartitionId_n(void)const",
    "public: long __thiscall NtmsDbLibWorkItem::PartitionId_IsNotNull(void)",
    "public: class NtmsDbLinkedGuid & __thiscall NtmsDbLinkedGuid::operator=(class NtmsDbLinkedGuid const &)",
    "public: struct _GUID const & __thiscall NtmsDbGuid::_id(void)const",
    "public: virtual unsigned long __thiscall NtmsDbObject::Insert(class NtmsDbDataCtxt *)",
    "private: void __thiscall NtmsDbMediaType::InitDefaults(void)",
    "public: __thiscall NtmsDbChangerType::NtmsDbChangerType(void)",
    "public: unsigned short const __thiscall NtmsDbChanger::ScsiPort_n(void)const",
    "public: virtual class NtmsDbRecordProp const & __thiscall NtmsDbPropertyValue::operator=(class NtmsDbGuid const &)",
    "private: static class NtmsDbRecordType NtmsDbChanger::m_Type",
    "public: class NtmsDbGuid const & __thiscall NtmsDbLibWorkItem::DriveId_n(void)const",
    "public: void __thiscall NtmsDbPropRelation::operator<<(class NtmsDbRecordUniqueKey &)",
    "public: void __thiscall NtmsDbDrive::GetDriveLetterA(char *,int)",
    "public: unsigned long __thiscall NtmsDbDataCtxt::StartTransaction(void)",
    "public: void __thiscall NtmsDbPropGuid::ConvertToString(char *)const",
    "protected: virtual class NtmsDbRecordProp * __thiscall NtmsDbDrive::GetDbProperty(long)const",
    "public: short const __thiscall NtmsDbObject::Enabled(void)const",
    "public: void __thiscall NtmsDbObject::GetDescriptionW(unsigned short *,int)",
    "public: class NtmsDbRecordProp * __thiscall NtmsDbRecordPropList::operator[](long)",
    "protected: virtual void __thiscall NtmsDbIEDoor::GetDbObject(class NtmsDbDataCtxt *)",
    "protected: virtual void __thiscall NtmsDbLogicalMedia::InitDbObject(class NtmsDbDataCtxt *)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbLogicalMedia::Partition(void)const",
    "public: static class ChangeRegistration * __stdcall NtmsDbDataCtxt::EnableNotification(void (__stdcall*)(int,class NtmsDbGuid const &,int,void *),void *)",
    "public: unsigned long __thiscall NtmsDbObject::SetOperational(unsigned long)",
    "public: int __thiscall NtmsDbPropHeader::operator!=(class NtmsDbPropHeader const &)const",
    "const NtmsDbUIDestination::`vftable'",
    "public: __thiscall NtmsDbMediaType::NtmsDbMediaType(class NtmsDbDataCtxt *,class NtmsDbGuid const &)",
    "public: __thiscall NtmsDbRecordProp::NtmsDbRecordProp(void)",
    "public: class NtmsDbDataCtxt const & __thiscall NtmsDbDataCtxt::operator=(class NtmsDbDataCtxt const &)",
    "public: unsigned long __thiscall NtmsDbLibrary::NumPorts(void)",
    "public: __thiscall NtmsDbProperty::NtmsDbProperty(class NtmsDbRecordProp *)",
    "public: class NtmsDbPhysicalMedia & __thiscall NtmsDbPhysicalMedia::operator=(class NtmsDbPhysicalMedia &)",
    "public: long __thiscall NtmsDbLibWorkItem::TimeQueued_IsNotNull(void)",
    "public: class NtmsDbPropDataType const & __thiscall NtmsDbRecordPropList::PropertyType(void)",
    "public: unsigned short const * __thiscall NtmsDbOpRequest::Message(void)const",
    "public: unsigned long __thiscall NtmsDbObject::SetAttribute(class NtmsDbDataCtxt *,char const *,void *,unsigned long)",
    "protected: virtual void __thiscall NtmsDbChangerType::SetDbObject(class NtmsDbDataCtxt *)",
    "protected: virtual void __thiscall NtmsDbUIDestination::InitDbObject(class NtmsDbDataCtxt *)",
    "public: unsigned long __thiscall NtmsDbComputer::SetMediaPoolPolicy(unsigned long)",
    "public: __thiscall NtmsDbPropertyValue::NtmsDbPropertyValue(long)",
    "public: unsigned long const __thiscall NtmsDbMediaType::MediaType(void)const",
    "public: long const __thiscall NtmsDbPhysicalMedia::PhysMediaErrorCode_n(void)const",
    "public: unsigned short const * __thiscall NtmsDbLibWorkItem::Application(void)const",
    "public: unsigned long __thiscall NtmsDbMediaPool::SetMpoolType(unsigned long)",
    "public: unsigned long const __thiscall NtmsDbIEDoor::IEDoorNumber(void)const",
    "public: virtual __thiscall NtmsDbDrive::~NtmsDbDrive(void)",
    "public: void __thiscall NtmsDbLibWorkItem::GetComputerW(unsigned short *,int)",
    "public: class NtmsDbIEPort & __thiscall NtmsDbIEPort::operator=(class NtmsDbIEPort const &)",
    "public: int __thiscall NtmsDbRecordRev::operator==(class NtmsDbRecordRev const &)",
    "public: unsigned long __thiscall NtmsDbDataCtxt::RollbackTransaction(void)",
    "public: __thiscall NtmsDbPropRelation::~NtmsDbPropRelation(void)",
    "private: static int NtmsDbDataCtxt::m_locked",
    "public: __thiscall NtmsDbSelectionSet::NtmsDbSelectionSet(class NtmsDbSelectionSet const &)",
    "public: class NtmsDbPropTimeDate & __thiscall NtmsDbPropTimeDate::operator=(class NtmsDbPropTimeDate const &)",
    "public: void __thiscall NtmsDbPropHeader::SetSize(short)",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::SetDriveId(class NtmsDbGuid const &)",
    "public: unsigned long __thiscall NtmsDbPartition::SetPartitionNumber(short)",
    "public: unsigned long __thiscall NtmsDbComputer::Drives(class NtmsDbDataCtxt *,class NtmsDbSelectionSet &)",
    "const NtmsDbMediaType::`vftable'",
    "public: class NtmsDbPropertyValue const & __thiscall NtmsDbPropertyValue::operator=(unsigned int)",
    "public: unsigned short const * __thiscall NtmsDbDrive::RevisionW(void)const",
    "public: class NtmsDatabase * __thiscall NtmsDbDataCtxt::Database(void)",
    "public: unsigned long __thiscall NtmsDbChanger::SetRevision(char const *)",
    "public: int __thiscall NtmsDbGuid::operator!=(class NtmsDbGuid const &)const",
    "private: void __thiscall NtmsDbObject::BuildPropertyList(void)",
    "public: int __thiscall NtmsDbRecordUniqueKey::operator!=(class NtmsDbGuid const &)const",
    "public: void __thiscall NtmsDbDrive::SetLastCleanedTs_Null(void)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbPhysicalMedia::LibCurrentMedia_n(void)const",
    "public: class NtmsDbPropertyValue const & __thiscall NtmsDbPropertyValue::operator=(short)",
    "public: unsigned long __thiscall NtmsDbLibrary::IEPorts(class NtmsDbDataCtxt *,class NtmsDbSelectionSet &)",
    "public: void __thiscall NtmsDbRecordProp::SetDynamic(void)",
    "public: __thiscall NtmsDbLibWorkItem::NtmsDbLibWorkItem(class NtmsDbDataCtxt *,class NtmsDbGuid const &)",
    "public: __thiscall NtmsDbTypeGuid::NtmsDbTypeGuid(void)",
    "public: class NtmsDbListItem & __thiscall NtmsDbListItem::operator=(class NtmsDbListItem const &)",
    "public: class NtmsDbObject & __thiscall NtmsDbObject::operator=(class NtmsDbObject const &)",
    "public: unsigned long const __thiscall NtmsDbDriveType::NumberOfHeads(void)const",
    "public: unsigned long const __thiscall NtmsDbIEDoor::IEDoorState(void)const",
    "public: __thiscall NtmsDbRecordProp::operator class NtmsDbGuid(void)const",
    "public: unsigned long __thiscall NtmsDbDriveType::SetProductW(unsigned short const *)",
    "protected: virtual void __thiscall NtmsDbMediaType::SetDbObject(class NtmsDbDataCtxt *)",
    "public: unsigned long const __thiscall NtmsDbMediaType::DeviceType(void)const",
    "public: unsigned long const __thiscall NtmsDbPhysicalMedia::PhysLocType(void)const",
    "protected: virtual void __thiscall NtmsDbComputer::GetDbObject(class NtmsDbDataCtxt *)",
    "public: long __thiscall NtmsDbLibrary::Computer_IsNotNull(void)const",
    "public: void __thiscall NtmsDbPropTimeDate::ConvertToString(char *)const",
    "public: unsigned long __thiscall NtmsDbOpRequest::SetState(unsigned long)",
    "public: __thiscall NtmsDbRecordKeyList::NtmsDbRecordKeyList(void)",
    "public: __thiscall NtmsDbString::~NtmsDbString(void)",
    "public: long __thiscall NtmsDbUIDestination::DecReference(void)",
    "public: unsigned long __thiscall NtmsDbDrive::SetDriveType(class NtmsDbGuid const &)",
    "public: void __thiscall NtmsDbOpRequest::GetUserW(unsigned short *,int)",
    "public: unsigned long __thiscall NtmsDbObject::SetDescription(char const *)",
    "private: void __thiscall NtmsDbLibrary::BuildPropertyList(void)",
    "public: void __thiscall NtmsDbDrive::GetSerialNumberW(unsigned short *,int)",
    "public: __thiscall NtmsDbDataCtxt::~NtmsDbDataCtxt(void)",
    "public: unsigned short const * __thiscall NtmsDbOpRequest::Computer(void)const",
    "public: void __thiscall NtmsDbPropDouble::ConvertToString(char *)const",
    "public: unsigned long __thiscall NtmsDbDrive::SetComputer(class NtmsDbGuid const &)",
    "public: unsigned long __thiscall NtmsDbMediaPool::SetMaxAllocates(unsigned long)",
    "private: void __thiscall NtmsDbChangerType::BuildPropertyList(void)",
    "public: class NtmsDbRecordType * __thiscall NtmsDbObjTypeDef::Type(void)const",
    "public: __thiscall NtmsDbGuid::NtmsDbGuid(unsigned char const *)",
    "public: unsigned long __thiscall NtmsDbLibrary::NumMediaTypes(void)",
    "public: __thiscall NtmsDbPropDataType::NtmsDbPropDataType(void)",
    "protected: virtual void __thiscall NtmsDbDriveType::GetDbObject(class NtmsDbDataCtxt *)",
    "public: long __thiscall NtmsDbLibWorkItem::AssocWorkItem_IsNotNull(void)",
    "public: unsigned long __thiscall NtmsDbMediaPool::PoolMember(class NtmsDbDataCtxt *,class NtmsDbSelectionSet &)",
    "public: class NtmsDbRecordProp const & __thiscall NtmsDbRecordProp::operator=(union _LARGE_INTEGER)",
    "public: int __thiscall NtmsDbSelectionSet::IsValid(void)const",
    "public: unsigned long const __thiscall NtmsDbMediaType::WriteCharacteristics(void)const",
    "public: class NtmsDbListItem * __thiscall NtmsDbList::operator[](long)const",
    "protected: virtual void __thiscall NtmsDbChanger::GetDbObject(class NtmsDbDataCtxt *)",
    "public: __thiscall NtmsDbList::Map::Map(void)",
    "public: class NtmsDbString & __thiscall NtmsDbString::operator=(char const *)",
    "const NtmsDbLibWorkItem::`vftable'",
    "public: class NtmsDbRecordPropList const & __thiscall NtmsDbRecordPropList::operator=(class NtmsDbRecordPropList const &)",
    "public: long __thiscall NtmsDbDrive::ScsiBus_IsNotNull(void)",
    "public: unsigned long __thiscall NtmsDbComputer::OpReqFlags(void)const",
    "public: class NtmsDbList & __thiscall NtmsDbList::operator-=(long)",
    "public: unsigned long __thiscall NtmsDbLibrary::NumSlots(void)",
    "public: virtual __thiscall NtmsDbDriveType::~NtmsDbDriveType(void)",
    "public: void __thiscall NtmsDbGuid::New(void)",
    "public: class NtmsDbPropDataType const & __thiscall NtmsDbRecordProp::Type(void)const",
    "public: class NtmsDbRecordProp const & __thiscall NtmsDbRecordProp::operator=(struct _SYSTEMTIME)",
    "const NtmsDbList::`vftable'",
    "public: unsigned long __thiscall NtmsDbDriveType::SetNumberOfHeads(unsigned long)",
    "public: unsigned long __thiscall NtmsDbLibrary::NumChangers(void)",
    "public: class NtmsDbRecordProp * __thiscall NtmsDbObject::GetProperty(long)",
    "public: class NtmsDbPropertyValue const & __thiscall NtmsDbPropertyValue::operator=(unsigned short)",
    "public: unsigned short const * __thiscall NtmsDbChanger::PathNameW(void)const",
    "public: __thiscall NtmsDbObject::NtmsDbObject(unsigned long)",
    "private: void __thiscall NtmsDbOpRequest::BuildPropertyList(void)",
    "public: long __thiscall NtmsDbMediaPool::MediaType_IsNotNull(void)const",
    "protected: virtual void __thiscall NtmsDbDrive::DeleteDbObject(class NtmsDbDataCtxt *)",
    "public: __thiscall NtmsDbObject::NtmsDbObject(class NtmsDbObject const &)",
    "public: unsigned long __thiscall NtmsDbMediaType::SetMediaType(unsigned long)",
    "private: static void * NtmsDbDataCtxt::m_ChangeMutex",
    "public: __thiscall NtmsDbPhysicalMedia::NtmsDbPhysicalMedia(void)",
    "public: int __thiscall NtmsDbError::IsSuccess(void)const",
    "public: int __thiscall NtmsDbObject::IsNew(void)const",
    "public: int __thiscall NtmsDbPropGuid::HasPreviousRelation(void)const",
    "protected: virtual void __thiscall NtmsDbObject::GetDbObject(class NtmsDbDataCtxt *)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbLibrary::CleanerSlot_n(void)const",
    "public: long __thiscall NtmsDbLogicalMedia::MediaPoolId_IsNotNull(void)",
    "public: class NtmsDbRecordKey & __thiscall NtmsDbRecordKey::operator=(unsigned long)",
    "private: void __thiscall NtmsDbStorageSlot::BuildPropertyList(void)",
    "public: long __thiscall NtmsDbPhysicalMedia::PoolMember_IsNotNull(void)const",
    "public: void __thiscall NtmsDbPropGuid::SetUpToDate(void)",
    "public: class NtmsDbRecordKey & __thiscall NtmsDbRecordKey::operator=(class NtmsDbRecordKey const &)",
    "public: short const __thiscall NtmsDbLibrary::FixedOffline(void)const",
    "public: class NtmsDbRecordProp & __thiscall NtmsDbRecordPropList::GetProperty(long)",
    "public: unsigned long __thiscall NtmsDbComputer::SetMediaRoot(class NtmsDbGuid const &)",
    "public: unsigned long __thiscall NtmsDbIEDoor::SetIEDoorState(unsigned long)",
    "public: __thiscall NtmsDbTypeGuid::NtmsDbTypeGuid(class NtmsDbTypeGuid const &)",
    "public: char const * __thiscall NtmsDbObject::Description_n(void)",
    "public: unsigned short const * __thiscall NtmsDbObject::NameW(void)const",
    "public: unsigned short const * __thiscall NtmsDbLibWorkItem::User(void)const",
    "private: void __thiscall NtmsDbIEPort::BuildPropertyList(void)",
    "public: void __thiscall NtmsDbLibWorkItem::GetComputerA(char *,int)",
    "public: __thiscall NtmsDbRecordProp::operator unsigned short(void)const",
    "public: class NtmsDbRecordKey & __thiscall NtmsDbRecordKey::operator=(class NtmsDbRecordType &)",
    "private: void __thiscall NtmsDbDriveType::InitDefaults(void)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbStorageSlot::Library_n(void)const",
    "public: short const __thiscall NtmsDbRecordProp::Code(void)const",
    "protected: void __thiscall NtmsDbString::ConcatString(char const *)",
    "public: long __thiscall NtmsDbLibrary::DefCleanerSlot_IsNotNull(void)const",
    "protected: virtual void __thiscall NtmsDbLibWorkItem::GetDbObject(class NtmsDbDataCtxt *)",
    "const NtmsDbComputer::`vftable'",
    "public: __thiscall NtmsDbPropRelation::NtmsDbPropRelation(void)",
    "public: unsigned short * __thiscall NtmsDbGuid::StrGuidW(unsigned short *)const",
    "public: void __thiscall NtmsDbDrive::GetDriveLetter(unsigned short *,int)",
    "public: void __thiscall NtmsDbFile::SetState(unsigned long)",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::SetPhysMediaState(unsigned long)",
    "public: unsigned long __thiscall NtmsDbChangerType::SetVendorW(unsigned short const *)",
    "public: int __thiscall NtmsDbLibWorkItem::Protected(void)",
    "protected: virtual void __thiscall NtmsDbOpRequest::DeleteDbObject(class NtmsDbDataCtxt *)",
    "public: void __thiscall NtmsDbGuid::Win32Guid(struct _GUID &)const",
    "private: static class NtmsDbRecordType NtmsDbOpRequest::m_Type",
    "public: __thiscall NtmsDbPropBinary::~NtmsDbPropBinary(void)",
    "public: virtual __thiscall NtmsDbOpRequest::~NtmsDbOpRequest(void)",
    "public: void __thiscall NtmsDbPhysicalMedia::SetOperationErrorCode_Null(void)",
    "const NtmsDbSelectionSet::`vftable'",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::SetState(unsigned long)",
    "public: unsigned long __thiscall NtmsDbDataCtxt::ImportDatabase(void)",
    "public: class NtmsDbRecordType const & __thiscall NtmsDbPropGuid::RelationType(void)const",
    "protected: void __thiscall NtmsDbObject::DeleteReferences(class NtmsDbDataCtxt *,class NtmsDbRecordPropList *)",
    "public: unsigned long __thiscall NtmsDbDataCtxt::Disconnect(void)",
    "public: unsigned long const __thiscall NtmsDbLibrary::Flags(void)const",
    "public: unsigned long __thiscall NtmsDbDrive::SetDriveLetter(unsigned short const *)",
    "public: void __thiscall NtmsDbRecordPropList::NewPropBinary(long,unsigned char *,int)",
    "public: void __thiscall NtmsDbLogicalMedia::SetPartition(class NtmsDbGuid const &)",
    "public: class NtmsDbPropertyValue const & __thiscall NtmsDbPropertyValue::operator=(int)",
    "public: __thiscall NtmsDbDriveType::NtmsDbDriveType(void)",
    "public: unsigned long __thiscall NtmsDbDrive::SetLastCleanedTs(struct _SYSTEMTIME)",
    "public: __thiscall NtmsDbPropChar::NtmsDbPropChar(void)",
    "private: static class NtmsDbRecordType NtmsDbMediaPool::m_Type",
    "public: class NtmsDbPropLargeInt & __thiscall NtmsDbPropLargeInt::operator=(class NtmsDbPropLargeInt const &)",
    "public: __thiscall NtmsDbLinkedGuid::NtmsDbLinkedGuid(void)",
    "public: long __thiscall NtmsDbList::Map::Place(long)const",
    "public: void __thiscall NtmsDbRecordProp::Init(short,class NtmsDbLinkedGuid &,class NtmsDbRecordType *,short)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbObject::ObjectId(void)",
    "public: class NtmsDbMediaType & __thiscall NtmsDbMediaType::operator=(class NtmsDbMediaType const &)",
    "public: short __thiscall NtmsDbRecordType::Code(void)const",
    "public: void __thiscall NtmsDbPropLong::ConvertToString(char *)const",
    "public: int __thiscall NtmsDbRecordRev::operator!=(class NtmsDbRecordRev const &)",
    "public: class NtmsDbString & __thiscall NtmsDbString::operator=(class NtmsDbString &)",
    "private: static class NtmsDbRecordType NtmsDbLogicalMedia::m_Type",
    "public: __thiscall NtmsDbPropHeader::~NtmsDbPropHeader(void)",
    "public: unsigned short const * __thiscall NtmsDbDrive::PathNameW(void)const",
    "public: virtual __thiscall NtmsDbLibrary::~NtmsDbLibrary(void)",
    "public: char const * __thiscall NtmsDbChangerType::Product(void)",
    "public: unsigned short const * __thiscall NtmsDbChanger::RevisionW(void)const",
    "public: __thiscall NtmsDbRecordUniqueKey::NtmsDbRecordUniqueKey(class NtmsDbGuid const &)",
    "public: long __thiscall NtmsDbList::Map::Size(void)const",
    "public: unsigned int __thiscall NtmsDbString::Length(void)const",
    "private: static class NtmsDbRecordType NtmsDbDriveType::m_Type",
    "public: unsigned long __thiscall NtmsDbObject::SetSecurityDescriptor(void *,unsigned long)",
    "public: unsigned long __thiscall NtmsDbDrive::SetPathName(char const *)",
    "public: unsigned long __thiscall NtmsDbComputer::SetLibReqFlags(unsigned long)",
    "public: int __thiscall NtmsDbGuid::operator==(struct _GUID const &)const",
    "public: long __thiscall NtmsDbPropertyValue::PropCode(void)const",
    "public: class NtmsDbRecordUniqueKey const & __thiscall NtmsDbSelectionSet::ObjectKey(long)const",
    "public: int __thiscall NtmsDbPropDataType::operator==(short)",
    "public: void __thiscall NtmsDbLibWorkItem::SetPhysMediaId_Null(void)",
    "public: void __thiscall NtmsDbPartition::SetLogicalmedia_Null(void)",
    "public: __thiscall NtmsDbRecordType::NtmsDbRecordType(short)",
    "protected: virtual void __thiscall NtmsDbMediaType::DeleteDbObject(class NtmsDbDataCtxt *)",
    "public: unsigned long __thiscall NtmsDatabase::AccessAllowed(void)",
    "public: unsigned short const __thiscall NtmsDbDrive::ScsiPort_n(void)const",
    "public: unsigned long __thiscall NtmsDbObject::countRelatedObjects(long)",
    "public: unsigned long __thiscall NtmsDbLibrary::Drives(class NtmsDbDataCtxt *,class NtmsDbSelectionSet &)",
    "public: long __thiscall NtmsDbPhysicalMedia::HomeSlotId_IsNotNull(void)",
    "public: long __thiscall NtmsDbIEDoor::Library_IsNotNull(void)const",
    "public: unsigned long __thiscall NtmsDbLibrary::SetComputer(class NtmsDbGuid const &)",
    "public: int __thiscall NtmsDbDataCtxt::IsValid(void)const",
    "public: unsigned long const __thiscall NtmsDbDrive::DeferDelay(void)const",
    "const NtmsDbChanger::`vftable'",
    "public: class NtmsDbComputer & __thiscall NtmsDbComputer::operator=(class NtmsDbComputer const &)",
    "public: void __thiscall NtmsDbRecordProp::Init(short,long *,int,int)",
    "public: unsigned long __thiscall NtmsDbChanger::SetScsiLun(unsigned short)",
    "public: unsigned long __thiscall NtmsDbObject::SetObjectId(class NtmsDbGuid const &)",
    "public: __thiscall NtmsDbPartition::NtmsDbPartition(class NtmsDbDataCtxt *,class NtmsDbGuid const &)",
    "public: unsigned long __thiscall NtmsDbPartition::SetOmidLabelInfo(unsigned short const *)",
    "public: void __thiscall NtmsDbMediaPool::SetParent_Null(void)",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::NumPartitions(void)",
    "protected: virtual class NtmsDbRecordProp * __thiscall NtmsDbLibWorkItem::GetDbProperty(long)const",
    "public: static class NtmsDbObjTypeDef & __stdcall NtmsDbObjTypeDef::ObjTypeDef(unsigned long)",
    "public: __thiscall NtmsTransaction::NtmsTransaction(class NtmsTransaction const &)",
    "public: unsigned long __thiscall NtmsDbObject::SetNameW(unsigned short const *)",
    "public: static void __stdcall NtmsDbDataCtxt::ReleaseChangeMutex(void)",
    "public: unsigned short const * __thiscall NtmsDbPhysicalMedia::BarcodeW(void)const",
    "public: class NtmsDbList & __thiscall NtmsDbList::operator-=(class NtmsDbListItem *)",
    "public: unsigned long __thiscall NtmsDbObjTypeDef::ObjectCode(void)const",
    "public: unsigned short const __thiscall NtmsDbIEPort::MaxExtendSecs(void)const",
    "const NtmsDbPartition::`vftable'",
    "public: void __thiscall NtmsDbPhysicalMedia::SetPoolMember_Null(void)",
    "public: __thiscall NtmsDbRecordPropList::NtmsDbRecordPropList(long)",
    "public: unsigned long __thiscall NtmsDbMediaType::SetNextSequence(long)",
    "public: void __thiscall NtmsDbDrive::SetComputer_Null(void)",
    "public: __thiscall NtmsDbChanger::NtmsDbChanger(void)",
    "public: void __thiscall NtmsDbLibrary::SetCleanerSlot_Null(void)",
    "public: unsigned long __thiscall NtmsDbOpRequest::SetMessageA(char const *)",
    "public: unsigned long __thiscall NtmsDbUIDestination::SetComputer(unsigned short * const)",
    "public: void __thiscall NtmsDbChangerType::GetVendorW(unsigned short *,int)",
    "public: void __thiscall NtmsDbDataCtxt::`default constructor closure'(void)",
    "public: __thiscall NtmsDbRecordUniqueKey::NtmsDbRecordUniqueKey(class NtmsDbRecordUniqueKey const &)",
    "public: class NtmsDbRecordType & __thiscall NtmsDbRecordType::operator=(class NtmsDbRecordType const &)",
    "public: int __thiscall NtmsDbRecordPropList::IsValid(void)const",
    "public: unsigned long __thiscall NtmsDbFile::FileStatus(void)",
    "const NtmsDbFile::`vftable'",
    "public: static int __stdcall NtmsDbDataCtxt::FindObType(short)",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::SetInventoryState(unsigned long)",
    "public: unsigned long __thiscall NtmsDbLibrary::LibWorkItems(class NtmsDbDataCtxt *,class NtmsDbSelectionSet &)",
    "public: void __thiscall NtmsDbDrive::GetRevisionW(unsigned short *,int)",
    "public: unsigned long __thiscall NtmsDbChanger::SetScsiBus(unsigned short)",
    "public: char const * __thiscall NtmsDbChanger::SerialNumber_n(void)",
    "public: void __thiscall NtmsDbLibrary::SetDefCleanerSlot_Null(void)",
    "public: void __thiscall NtmsDbRecordProp::Init(short,union _LARGE_INTEGER *,int,int)",
    "protected: virtual void __thiscall NtmsDbUIDestination::SetDbObject(class NtmsDbDataCtxt *)",
    "public: void __thiscall NtmsDbRecordPropList::operator>>(class NtmsDbPropLargeInt * &)",
    "public: void __thiscall NtmsDbDrive::SetScsiBus_Null(void)",
    "protected: virtual void __thiscall NtmsDbLibWorkItem::SetDbObject(class NtmsDbDataCtxt *)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbLogicalMedia::MediaPoolId_n(void)const",
    "public: char const * __thiscall NtmsDbObject::Name_n(void)",
    "public: unsigned long __thiscall NtmsDbChangerType::SetProductW(unsigned short const *)",
    "public: unsigned long __thiscall NtmsDbStorageSlot::SetSlotState(unsigned long)",
    "public: long __thiscall NtmsDbChanger::ScsiBus_IsNotNull(void)",
    "protected: void __thiscall NtmsDbString::ConvertMBString(unsigned short const *,unsigned long,char * &,unsigned int &)",
    "protected: virtual void __thiscall NtmsDbComputer::DeleteDbObject(class NtmsDbDataCtxt *)",
    "public: unsigned long const __thiscall NtmsDbObject::Operational(void)const",
    "public: virtual __thiscall NtmsDbSelectionSet::~NtmsDbSelectionSet(void)",
    "public: static class NtmsDbPropDataType NtmsDbRecordPropList::NoType",
    "public: unsigned long __thiscall NtmsDbDrive::SetSerialNumberW(unsigned short const *)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbPhysicalMedia::MountedPartition(void)const",
    "public: struct _SYSTEMTIME const __thiscall NtmsDbDrive::LastCleanedTs_n(void)const",
    "public: unsigned long __thiscall NtmsDbDriveType::SetVendorW(unsigned short const *)",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::SetHomeSlotId(class NtmsDbGuid const &)",
    "public: __thiscall NtmsDbComputer::NtmsDbComputer(class NtmsDbDataCtxt *,class NtmsDbGuid const &)",
    "public: __thiscall NtmsDbPropRelation::operator class NtmsDbRecordKeyList *(void)",
    "public: int __thiscall NtmsDbRecordProp::IsValid(void)const",
    "public: __thiscall NtmsDbLogicalMedia::NtmsDbLogicalMedia(void)",
    "public: int __thiscall NtmsDbObject::IsValid(void)const",
    "public: long __thiscall NtmsDbLibWorkItem::SlotId_IsNotNull(void)",
    "public: __thiscall NtmsDbPropGuid::operator class NtmsDbGuid &(void)",
    "public: unsigned long __thiscall NtmsDbObject::GetAttribute(class NtmsDbDataCtxt *,char const *,void *,unsigned long *)",
    "public: unsigned long __thiscall NtmsDbIEDoor::SetLibrary(class NtmsDbGuid const &)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbIEPort::Library_n(void)const",
    "protected: virtual void __thiscall NtmsDbDrive::SetDbObject(class NtmsDbDataCtxt *)",
    "public: unsigned long __thiscall NtmsDbMediaType::SetNumberOfSides(unsigned long)",
    "private: void __thiscall NtmsDbIEDoor::BuildPropertyList(void)",
    "public: int __thiscall NtmsDbPropDataType::operator!=(short)",
    "public: class NtmsDbError & __thiscall NtmsDbObject::Error(void)",
    "public: unsigned long __thiscall NtmsDbObject::ObjectType(void)",
    "public: void __thiscall NtmsDbPartition::GetOmidLabelTypeW(unsigned short *,int)const",
    "public: long __thiscall NtmsDbComputer::MediaRoot_IsNotNull(void)const",
    "public: void __thiscall NtmsDbPhysicalMedia::GetSequenceNumberA(char *,int)const",
    "public: unsigned long __thiscall NtmsDbPartition::SetAllocateCount(unsigned long)",
    "public: void __thiscall NtmsDbChanger::SetScsiLun_Null(void)",
    "private: static class NtmsDbRecordType NtmsDbPhysicalMedia::m_Type",
    "public: char const * __thiscall NtmsDbDrive::Revision(void)",
    "protected: void __thiscall NtmsDbString::ReplaceString(char const *)",
    "public: unsigned long __thiscall NtmsDbLibrary::GetUIDestinations(class NtmsDbDataCtxt *,unsigned long,class NtmsDbSelectionSet &)",
    "public: void __thiscall NtmsDbDrive::SetSerialNumber_Null(void)",
    "public: unsigned long __thiscall NtmsDbComputer::MediaPoolPolicy(void)const",
    "public: __thiscall NtmsDbPropShort::~NtmsDbPropShort(void)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbPhysicalMedia::PhysLocId_n(void)const",
    "public: void __thiscall NtmsDbSelectionSet::SetObjectGuid(long,class NtmsDbGuid const &)",
    "protected: virtual void __thiscall NtmsDbObject::SetDbObject(class NtmsDbDataCtxt *)",
    "public: void __thiscall NtmsDbRecordKeyList::operator>>(class NtmsDbRecordUniqueKey * &)",
    "public: unsigned long __thiscall NtmsDbDataCtxt::ExportDatabase(void)",
    "public: unsigned long __thiscall NtmsDbLibrary::NumUIDestinations(unsigned long)",
    "public: class NtmsDbPropLong & __thiscall NtmsDbPropLong::operator=(class NtmsDbPropLong const &)",
    "public: int const __thiscall NtmsDbError::Error(void)const",
    "public: void __thiscall NtmsDbOpRequest::GetUserA(char *,int)",
    "protected: virtual void __thiscall NtmsDbOpRequest::SetDbObject(class NtmsDbDataCtxt *)",
    "public: __thiscall NtmsDbLibrary::NtmsDbLibrary(class NtmsDbDataCtxt *,class NtmsDbGuid const &)",
    "public: void __thiscall NtmsDbDataCtxt::EnterConnCritSection(void)",
    "public: void __thiscall NtmsDbPropShort::ConvertToString(char *)const",
    "public: unsigned long __thiscall NtmsDbComputer::GetUIDestinations(class NtmsDbDataCtxt *,unsigned long,class NtmsDbSelectionSet &)",
    "public: virtual void __thiscall NtmsDbList::Destruct(class NtmsDbListItem *)",
    "public: static class NtmsDbRecordUniqueKey NtmsDbRecordUniqueKey::NullKey",
    "public: static void __stdcall NtmsDbDataCtxt::DisableNotification(class ChangeRegistration *)",
    "protected: virtual void __thiscall NtmsDbDrive::GetDbObject(class NtmsDbDataCtxt *)",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::SetTimeCompleted(struct _SYSTEMTIME)",
    "public: unsigned long __thiscall NtmsDbLibrary::AddUIDestination(unsigned long,class NtmsDbGuid const &)",
    "public: int __thiscall NtmsDbRecordProp::IsNull(void)const",
    "public: unsigned short const * __thiscall NtmsDbDriveType::ProductW(void)const",
    "public: void __thiscall NtmsDbChanger::GetRevisionA(char *,int)",
    "public: void __thiscall NtmsDbObject::SetDescription_Null(void)",
    "public: void __thiscall NtmsDbRecordProp::SetLength(long)",
    "public: __thiscall NtmsDbGuid::NtmsDbGuid(char const *)",
    "public: class NtmsDatabase & __thiscall NtmsDatabase::operator=(class NtmsDatabase const &)",
    "public: unsigned long __thiscall NtmsDbPartition::SetLogicalmedia(class NtmsDbGuid const &)",
    "public: class NtmsDbRecordProp const & __thiscall NtmsDbRecordProp::operator=(unsigned short *)",
    "public: class NtmsDbDrive & __thiscall NtmsDbDrive::operator=(class NtmsDbDrive &)",
    "public: __thiscall NtmsDbLinkedGuid::~NtmsDbLinkedGuid(void)",
    "public: unsigned long const __thiscall NtmsDbPhysicalMedia::PhysMediaState(void)const",
    "public: unsigned short const __thiscall NtmsDbDrive::ScsiBus_n(void)const",
    "protected: virtual class NtmsDbRecordProp * __thiscall NtmsDbComputer::GetDbProperty(long)const",
    "public: void __thiscall NtmsDbString::SetString(unsigned short const *,unsigned long)",
    "public: unsigned long const __thiscall NtmsDbStorageSlot::SlotNumber(void)const",
    "public: int __thiscall NtmsDbList::Map::Full(void)const",
    "public: void __thiscall NtmsDbPartition::GetOmidLabelInfoW(unsigned short *,int)const",
    "public: void __thiscall NtmsDbPropHeader::IncCount(void)",
    "private: void __thiscall NtmsDbComputer::BuildPropertyList(void)",
    "public: struct _SYSTEMTIME const __thiscall NtmsDbLibWorkItem::TimeQueued_n(void)const",
    "public: void __thiscall NtmsDbRecordPropList::Reset(void)",
    "unsigned long __stdcall NtmsDbRemove(void)",
    "public: char const * __thiscall NtmsDbDriveType::Vendor(void)",
    "public: class NtmsDbPropertyValue const & __thiscall NtmsDbPropertyValue::operator=(float)",
    "public: int __thiscall NtmsDbObject::IsModified(void)const",
    "public: __thiscall NtmsDbIEDoor::NtmsDbIEDoor(class NtmsDbDataCtxt *,class NtmsDbGuid const &)",
    "public: unsigned long __thiscall NtmsDbOpRequest::SetTimeSubmitted(struct _SYSTEMTIME)",
    "public: class NtmsDbUIDestination & __thiscall NtmsDbUIDestination::operator=(class NtmsDbUIDestination const &)",
    "public: unsigned long __thiscall NtmsDbPartition::GetAllocOption(void)",
    "public: __thiscall NtmsDbRecordProp::~NtmsDbRecordProp(void)",
    "public: void __thiscall NtmsDbObject::GetNameW(unsigned short *,int)",
    "public: void __thiscall NtmsDbOpRequest::GetMessageW(unsigned short *,int)",
    "public: unsigned long __thiscall NtmsDbDriveType::SetVendor(char const *)",
    "public: __thiscall NtmsDbTypeGuid::NtmsDbTypeGuid(class NtmsDbGuid const &)",
    "public: static int __stdcall NtmsDbDataCtxt::FindObType(class NtmsDbRecordKey &)",
    "public: __thiscall NtmsDbDriveType::NtmsDbDriveType(class NtmsDbDataCtxt *,class NtmsDbGuid const &)",
    "public: class NtmsDbTypeGuid & __thiscall NtmsDbTypeGuid::operator=(struct _GUID const &)",
    "public: unsigned long __thiscall NtmsDbChangerType::SetVendor(char const *)",
    "public: unsigned long const __thiscall NtmsDbPhysicalMedia::BarcodeState(void)const",
    "public: class NtmsDbObjTypeDef & __thiscall NtmsDbObjTypeDef::operator=(class NtmsDbObjTypeDef const &)",
    "public: unsigned long __thiscall NtmsDbLibrary::StorageSlots(class NtmsDbDataCtxt *,class NtmsDbSelectionSet &)",
    "public: __thiscall NtmsDbFile::NtmsDbFile(class NtmsDbFile const &)",
    "public: char const * __thiscall NtmsDbDriveType::Product(void)",
    "public: unsigned long __thiscall NtmsDbIEPort::SetMaxExtendSecs(unsigned short)",
    "protected: virtual void __thiscall NtmsDbOpRequest::InitDbObject(class NtmsDbDataCtxt *)",
    "public: short __thiscall NtmsDbPropHeader::Size(void)const",
    "public: unsigned long __thiscall NtmsDbChanger::SetPathNameW(unsigned short const *)",
    "public: __thiscall NtmsDbString::NtmsDbString(void)",
    "public: unsigned long __thiscall NtmsDbIEPort::SetLibrary(class NtmsDbGuid const &)",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::SetPhysMediaId(class NtmsDbGuid const &)",
    "public: unsigned long const __thiscall NtmsDbLibrary::FirstDriveNumber(void)const",
    "public: unsigned long __thiscall NtmsDbLibrary::SetFirstSlotNumber(unsigned long)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbDrive::Computer_n(void)const",
    "public: unsigned short const * __thiscall NtmsDbChanger::InstanceNameW(void)const",
    "public: __thiscall NtmsDbPropLargeInt::NtmsDbPropLargeInt(void)",
    "public: unsigned long __thiscall NtmsDbMediaPool::NumPhysicalMedia(void)",
    "public: void __thiscall NtmsDbLibWorkItem::SetTimeQueued_Null(void)",
    "public: class NtmsDbList & __thiscall NtmsDbList::operator+(class NtmsDbListItem *)",
    "public: virtual unsigned long __thiscall NtmsDbLibrary::Remove(class NtmsDbDataCtxt *)",
    "private: void __thiscall NtmsDbStorageSlot::InitDefaults(void)",
    "protected: virtual void __thiscall NtmsDbPhysicalMedia::DeleteDbObject(class NtmsDbDataCtxt *)",
    "public: __thiscall NtmsDbIEPort::NtmsDbIEPort(class NtmsDbDataCtxt *,class NtmsDbGuid const &)",
    "public: class NtmsDbString & __thiscall NtmsDbString::operator+=(class NtmsDbString &)",
    "public: unsigned long const __thiscall NtmsDbLibWorkItem::OperationOption(void)const",
    "const NtmsTransaction::`vftable'",
    "public: virtual __thiscall NtmsDbIEPort::~NtmsDbIEPort(void)",
    "public: unsigned long __thiscall NtmsDbOpRequest::SetMessage(unsigned short const *)",
    "public: class NtmsTransaction & __thiscall NtmsTransaction::operator=(class NtmsTransaction const &)",
    "private: void __thiscall NtmsDbLogicalMedia::BuildPropertyList(void)",
    "public: virtual unsigned long __thiscall NtmsDbObject::Fetch(class NtmsDbDataCtxt *)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbMediaPool::Parent_n(void)const",
    "public: __thiscall NtmsDbRecordProp::operator struct _SYSTEMTIME(void)const",
    "private: static class NtmsDbRecordType NtmsDbStorageSlot::m_Type",
    "public: int __thiscall NtmsDbRecordProp::IsBufferValid(void)const",
    "public: unsigned long __thiscall NtmsDbPartition::SetCapacity(union _LARGE_INTEGER)",
    "public: void __thiscall NtmsDbOpRequest::GetComputerA(char *,int)",
    "public: unsigned long __thiscall NtmsDbOpRequest::SetArg2(class NtmsDbGuid const &)",
    "public: unsigned short const __thiscall NtmsDbIEDoor::MaxOpenSecs(void)const",
    "public: class NtmsDbMediaPool & __thiscall NtmsDbMediaPool::operator=(class NtmsDbMediaPool const &)",
    "private: void __thiscall NtmsDbUIDestination::InitDefaults(void)",
    "public: __thiscall NtmsDbRecordProp::operator unsigned long(void)const",
    "public: class NtmsDbError & __thiscall NtmsDbError::operator=(class NtmsDbError const &)",
    "public: int __thiscall NtmsDbRecordPropList::Quantity(void)const",
    "public: int __thiscall NtmsDbPropGuid::HasChanged(void)const",
    "private: void __thiscall NtmsDbMediaPool::BuildPropertyList(void)",
    "public: unsigned long __thiscall NtmsDbComputer::AddUIDestination(unsigned long,class NtmsDbGuid const &)",
    "public: unsigned long const __thiscall NtmsDbLibrary::CleansRemaining(void)const",
    "public: __thiscall NtmsDbPropHeader::NtmsDbPropHeader(void)",
    "public: virtual __thiscall NtmsDbObject::~NtmsDbObject(void)",
    "const NtmsDbPropertyValue::`vftable'",
    "public: void __thiscall NtmsDbPropHeader::SetCount(long)",
    "public: class NtmsDbFile & __thiscall NtmsDbFile::operator=(class NtmsDbFile const &)",
    "public: unsigned long const __thiscall NtmsDbLibWorkItem::State(void)const",
    "public: unsigned long __thiscall NtmsDbLibrary::RemoveUIDestination(unsigned long,class NtmsDbGuid const &)",
    "public: unsigned char const * __thiscall NtmsDbPartition::OmidLabelId_n(void)const",
    "public: struct _SYSTEMTIME const __thiscall NtmsDbOpRequest::TimeSubmitted(void)const",
    "public: unsigned long const __thiscall NtmsDbMediaPool::MaxAllocates(void)const",
    "public: unsigned long const __thiscall NtmsDbIEPort::ExtendState(void)const",
    "public: class NtmsDbRecordKeyList * __thiscall NtmsDbPropRelation::List(void)",
    "protected: virtual class NtmsDbRecordProp * __thiscall NtmsDbPhysicalMedia::GetDbProperty(long)const",
    "public: class NtmsDbPropRelation & __thiscall NtmsDbPropRelation::operator=(class NtmsDbPropRelation &)",
    "public: void __thiscall NtmsDbLibWorkItem::SetLibrary_Null(void)",
    "public: __thiscall NtmsDbPropertyValue::NtmsDbPropertyValue(class NtmsDbRecordPropList *,long)",
    "public: class NtmsDbRecordProp const & __thiscall NtmsDbRecordProp::operator=(unsigned int)",
    "public: unsigned long __thiscall NtmsDbObject::SetAdminControlSecurity(void)",
    "public: char const * __thiscall NtmsDbObjTypeDef::TypeNameAbbrev(void)const",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::SetBarcodeW(unsigned short const *)",
    "protected: virtual class NtmsDbRecordProp * __thiscall NtmsDbPartition::GetDbProperty(long)const",
    "public: unsigned long __thiscall NtmsDbLibrary::SetAutoRecovery(short)",
    "public: unsigned long __thiscall NtmsDbObject::SetDescriptionW(unsigned short const *)",
    "protected: virtual unsigned int __thiscall NtmsDbObject::ValueIsNotNull(long)const",
    "public: unsigned long __thiscall NtmsDbStorageSlot::SetLibrary(class NtmsDbGuid const &)",
    "public: __thiscall NtmsDbRecordProp::operator float(void)const",
    "public: unsigned long __thiscall NtmsDbDrive::SetSerialNumber(char const *)",
    "public: unsigned long __thiscall NtmsDbIEDoor::SetMaxOpenSecs(unsigned short)",
    "protected: virtual void __thiscall NtmsDbStorageSlot::SetDbObject(class NtmsDbDataCtxt *)",
    "public: void __thiscall NtmsDbRecordProp::Init(short,unsigned long *,int,int)",
    "protected: virtual void __thiscall NtmsDbIEPort::InitDbObject(class NtmsDbDataCtxt *)",
    "public: void __thiscall NtmsDbChanger::GetPathNameA(char *,int)",
    "private: void __thiscall NtmsDbChanger::InitDefaults(void)",
    "protected: virtual void __thiscall NtmsDbDriveType::InitDbObject(class NtmsDbDataCtxt *)",
    "public: long __thiscall NtmsDbDrive::ScsiPort_IsNotNull(void)",
    "public: virtual __thiscall NtmsDbLibWorkItem::~NtmsDbLibWorkItem(void)",
    "public: class NtmsDbRecordUniqueKey * __thiscall NtmsDbRecordKeyList::operator[](long)const",
    "public: short __thiscall NtmsDbRecordKey::Table(void)const",
    "public: void __thiscall NtmsDbOpRequest::GetMessageA(char *,int)",
    "public: void __thiscall NtmsDbPhysicalMedia::GetBarcodeA(char *,int)",
    "public: static void __stdcall NtmsDbDataCtxt::Shutdown(void)",
    "protected: virtual class NtmsDbRecordProp * __thiscall NtmsDbLibrary::GetDbProperty(long)const",
    "public: unsigned long __thiscall NtmsDbDriveType::SetDriveType(unsigned long)",
    "public: void __thiscall NtmsDbPropRelation::ConvertToString(char *)const",
    "protected: void __thiscall NtmsDbDataCtxt::RegisterObMeta(void)",
    "public: class NtmsDbList::Map * __thiscall NtmsDbList::Map::Next(void)",
    "protected: virtual class NtmsDbRecordProp * __thiscall NtmsDbChanger::GetDbProperty(long)const",
    "public: long __thiscall NtmsDbPropRelation::KeyCount(void)",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::SetMediaType(class NtmsDbGuid)",
    "public: void __thiscall NtmsDbDataCtxt::LeaveConnCritSection(void)",
    "private: void __thiscall NtmsDbIEPort::InitDefaults(void)",
    "public: void __thiscall NtmsDbList::`default constructor closure'(void)",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::SetComputer(unsigned short const *)",
    "public: virtual __thiscall NtmsDbPropertyValue::~NtmsDbPropertyValue(void)",
    "public: unsigned long __thiscall NtmsDbLibrary::SetSupportDrvClean(short)",
    "public: void __thiscall NtmsDbRecordPropList::NewPropGuid(long,class NtmsDbGuid &)",
    "public: void __thiscall NtmsDbRecordPropList::NewPropLong(long,unsigned long *,int)",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::SetPhysMediaErrorCode(long)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbPhysicalMedia::HomeSlotId_n(void)const",
    "public: unsigned long __thiscall NtmsDbPartition::SetLifeCycleState(unsigned long)",
    "public: unsigned long __thiscall NtmsDbPartition::SetOmidLabelId(unsigned char const *,unsigned long)",
    "public: void __thiscall NtmsDbRecordPropList::operator>>(class NtmsDbPropGuid * &)",
    "public: __thiscall NtmsDbRecordType::operator short(void)const",
    "public: short const __thiscall NtmsDbLibrary::SupportDrvClean(void)const",
    "public: class NtmsDbPropChar & __thiscall NtmsDbPropChar::operator=(class NtmsDbPropChar const &)",
    "public: virtual __thiscall NtmsDbMediaType::~NtmsDbMediaType(void)",
    "public: char const * __thiscall NtmsDbDrive::SerialNumber_n(void)",
    "public: unsigned long __thiscall NtmsDbLibrary::SetCleansRemaining(unsigned long)",
    "public: unsigned long const __thiscall NtmsDbDriveType::DriveType(void)const",
    "public: __thiscall NtmsDbRecordKey::NtmsDbRecordKey(class NtmsDbRecordKey const &)",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::SetProtected(int)",
    "public: unsigned long const __thiscall NtmsDbLibrary::InventoryMethod(void)const",
    "public: int __thiscall NtmsDbRecordKey::operator!=(class NtmsDbRecordKey const &)const",
    "public: class NtmsDbList & __thiscall NtmsDbList::operator+=(class NtmsDbListItem *)",
    "public: long __thiscall NtmsDbPhysicalMedia::OperationErrorCode_IsNotNull(void)",
    "const NtmsDbStorageSlot::`vftable'",
    "const NtmsDbRecordKeyList::`vftable'",
    "public: class NtmsDbList::Map & __thiscall NtmsDbList::Map::operator=(class NtmsDbList::Map const &)",
    "public: unsigned long __thiscall NtmsDbChanger::SetPathName(char const *)",
    "private: void __thiscall NtmsDbOpRequest::InitDefaults(void)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbPhysicalMedia::PoolMember_n(void)const",
    "private: static class NtmsDbRecordType NtmsDbObject::m_Type",
    "public: __thiscall NtmsDbMediaPool::NtmsDbMediaPool(class NtmsDbDataCtxt *,class NtmsDbGuid const &)",
    "public: unsigned short const * __thiscall NtmsDbDriveType::VendorW(void)const",
    "public: void __thiscall NtmsDbRecordPropList::operator>>(class NtmsDbRecordProp * &)",
    "public: unsigned long const __thiscall NtmsDbMediaType::NumberOfSides(void)const",
    "public: __thiscall NtmsDbPropDouble::NtmsDbPropDouble(void)",
    "public: unsigned long __thiscall NtmsDbPartition::SetMountCount(unsigned long)",
    "public: virtual long __thiscall NtmsDbSelectionSet::Count(void)const",
    "public: void __thiscall NtmsDbPropChar::ConvertToString(char *)const",
    "public: void __thiscall NtmsDbRecordProp::Init(short,unsigned char *,int,int)",
    "public: unsigned long __thiscall NtmsDbLibrary::NumDrives(void)",
    "public: char const * __thiscall NtmsDbChangerType::Vendor(void)",
    "public: void __thiscall NtmsDbComputer::SetMediaRoot_Null(void)",
    "public: __thiscall NtmsDbRecordKey::NtmsDbRecordKey(short,unsigned long)",
    "public: unsigned long __thiscall NtmsDbObject::SetObjectId(char const *)",
    "public: __thiscall NtmsDbPartition::NtmsDbPartition(void)",
    "public: unsigned long __thiscall NtmsDbDrive::SetScsiPort(unsigned short)",
    "public: void __thiscall NtmsDbLibrary::SetComputer_Null(void)",
    "public: int __thiscall NtmsDbRecordKey::IsValid(void)",
    "public: unsigned long __thiscall NtmsDbDrive::SetScsiTarget(unsigned short)",
    "public: unsigned long const __thiscall NtmsDbLibrary::FirstPortNumber(void)const",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::SetMountedPartition(class NtmsDbGuid const &)",
    "public: void __thiscall NtmsDbRecordProp::SetData(void *)",
    "protected: virtual void __thiscall NtmsDbComputer::SetDbObject(class NtmsDbDataCtxt *)",
    "public: class NtmsDbGuid const __thiscall NtmsDbPhysicalMedia::MediaType(void)const",
    "public: int __thiscall NtmsDbRecordKey::IsNew(void)",
    "public: long __thiscall NtmsDbChanger::ScsiPort_IsNotNull(void)",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::SetTimeQueued(struct _SYSTEMTIME)",
    "public: unsigned long __thiscall NtmsDbLibrary::SetDefCleanerSlot(class NtmsDbGuid const &)",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::SetUser(unsigned short const *)",
    "public: virtual __thiscall NtmsDbChanger::~NtmsDbChanger(void)",
    "public: void __thiscall NtmsDbLibWorkItem::SetTimeCompleted_Null(void)",
    "public: virtual unsigned long __thiscall NtmsDbSelectionSet::DeleteObjects(class NtmsDbDataCtxt *)",
    "public: __thiscall NtmsDbList::NtmsDbList(class NtmsDbList const &)",
    "public: unsigned long __thiscall NtmsDbDrive::SetDriveNumber(unsigned long)",
    "public: unsigned long __thiscall NtmsDbMediaType::SetWriteCharacteristics(unsigned long)",
    "public: unsigned long const __thiscall NtmsDbIEPort::IEPortNumber(void)const",
    "public: long __thiscall NtmsDbDrive::Computer_IsNotNull(void)const",
    "public: unsigned long __thiscall NtmsDbDrive::SetInstanceNameW(unsigned short const *)",
    "public: unsigned long const __thiscall NtmsDbPartition::MountCount(void)const",
    "public: unsigned long __thiscall NtmsDbObject::WriteAttribute(class NtmsDbPropertyValue &)",
    "public: void __thiscall NtmsDbChanger::SetLibrary_Null(void)",
    "public: unsigned long __thiscall NtmsDbOpRequest::Arg2Type(void)const",
    "public: class NtmsDbGuid const & __thiscall NtmsDbComputer::MediaRoot_n(void)const",
    "public: void __thiscall NtmsDbRecordProp::ConvertToString(char *)const",
    "protected: virtual void __thiscall NtmsDbLogicalMedia::DeleteDbObject(class NtmsDbDataCtxt *)",
    "public: unsigned long __thiscall NtmsDbChangerType::SetDeviceType(unsigned long)",
    "public: __thiscall NtmsDbTypeGuid::NtmsDbTypeGuid(char const *)",
    "public: unsigned long __thiscall NtmsDbLibrary::SetBarCodeReader(short)",
    "public: unsigned long __thiscall NtmsDbObject::SetName(char const *)",
    "public: long __thiscall NtmsDbMediaPool::Parent_IsNotNull(void)const",
    "public: class NtmsDbGuid & __thiscall NtmsDbGuid::operator=(class NtmsDbGuid const &)",
    "protected: class NtmsDbRecordProp & __thiscall NtmsDbObject::GetProperty(class NtmsDbRecordPropList *,long)",
    "public: int __thiscall NtmsDbRecordUniqueKey::operator==(class NtmsDbGuid const &)const",
    "public: virtual __thiscall NtmsDbList::~NtmsDbList(void)",
    "public: __thiscall NtmsDbPropRecordClass::~NtmsDbPropRecordClass(void)",
    "public: short const __thiscall NtmsDbPartition::PartitionNumber(void)const",
    "public: void __thiscall NtmsDbPhysicalMedia::SetPhysLocId_Null(void)",
    "protected: virtual void __thiscall NtmsDbChangerType::InitDbObject(class NtmsDbDataCtxt *)",
    "public: unsigned long __thiscall NtmsDbRecordProp::Count(void)const",
    "public: class NtmsDbChangerType & __thiscall NtmsDbChangerType::operator=(class NtmsDbChangerType &)",
    "public: unsigned long const __thiscall NtmsDbMediaPool::MpoolType(void)const",
    "public: void __thiscall NtmsDbList::SetDynamic(int)",
    "public: class NtmsDbRecordProp const & __thiscall NtmsDbRecordProp::operator=(short)",
    "public: unsigned long __thiscall NtmsDbLibrary::SetInventoryMethod(unsigned long)",
    "private: static class NtmsDbRecordType NtmsDbIEDoor::m_Type",
    "public: unsigned long __thiscall NtmsDbComputer::SetLibReqCleanTime(long)",
    "public: unsigned long __thiscall NtmsDbIEPort::SetFullState(unsigned long)",
    "public: class NtmsDbRecordProp const & __thiscall NtmsDbRecordProp::operator=(char const *)",
    "public: class NtmsDbPropertyValue const & __thiscall NtmsDbPropertyValue::operator=(unsigned long)",
    "public: __thiscall NtmsDbPropLargeInt::~NtmsDbPropLargeInt(void)",
    "public: void __thiscall NtmsDbPropRelation::operator>>(class NtmsDbRecordUniqueKey * &)",
    "public: void __thiscall NtmsDbPhysicalMedia::SetBarcode_Null(void)",
    "public: class NtmsDbChanger & __thiscall NtmsDbChanger::operator=(class NtmsDbChanger &)",
    "public: int __thiscall NtmsDbPropGuid::HasNewRelation(void)const",
    "public: void __thiscall NtmsDbPropBinary::ConvertToString(char *)const",
    "public: void __thiscall NtmsDbRecordProp::Init(short)",
    "public: unsigned long __thiscall NtmsDbChangerType::SetProduct(char const *)",
    "public: unsigned long __thiscall NtmsDbIEDoor::SetIEDoorNumber(unsigned long)",
    "public: __thiscall NtmsDbPropDataType::NtmsDbPropDataType(short)",
    "public: __thiscall NtmsDbError::NtmsDbError(void)",
    "public: void __thiscall NtmsDbDrive::GetRevisionA(char *,int)",
    "public: long __thiscall NtmsDbDrive::LastCleanedTs_IsNotNull(void)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbIEDoor::Library_n(void)const",
    "protected: virtual void __thiscall NtmsDbPartition::DeleteDbObject(class NtmsDbDataCtxt *)",
    "public: class NtmsDbRecordProp const * __thiscall NtmsDbRecordPropList::operator[](long)const",
    "public: unsigned long __thiscall NtmsDbDrive::SetPathNameW(unsigned short const *)",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::SetOperationOption(unsigned long)",
    "const NtmsDbObject::`vftable'",
    "public: void __thiscall NtmsDbDrive::SetScsiLun_Null(void)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbChanger::ChangerType(void)const",
    "public: unsigned short const __thiscall NtmsDbChanger::ScsiLun_n(void)const",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::SetMediaTypeCode(unsigned long)",
    "public: void __thiscall NtmsDbDrive::GetSerialNumberA(char *,int)",
    "public: __thiscall NtmsDbRecordProp::operator short(void)const",
    "protected: void __thiscall NtmsDbObject::WriteObjectRecord(class NtmsDbDataCtxt *,class NtmsDbRecordKey &,class NtmsDbRecordRev &,class NtmsDbRecordPropList *)",
    "private: void __thiscall NtmsDbPhysicalMedia::InitDefaults(void)",
    "public: class NtmsDbPropDataType & __thiscall NtmsDbPropDataType::operator=(class NtmsDbPropDataType &)",
    "protected: virtual class NtmsDbRecordProp * __thiscall NtmsDbLogicalMedia::GetDbProperty(long)const",
    "public: void __thiscall NtmsDbChanger::SetScsiPort_Null(void)",
    "protected: virtual void __thiscall NtmsDbPartition::SetDbObject(class NtmsDbDataCtxt *)",
    "protected: virtual class NtmsDbRecordProp * __thiscall NtmsDbMediaPool::GetDbProperty(long)const",
    "public: class NtmsDbGuid const & __thiscall NtmsDbLibWorkItem::SlotId_n(void)const",
    "public: void __thiscall NtmsDbDrive::SetLibrary_Null(void)",
    "public: int __thiscall NtmsDbPropDataType::operator==(class NtmsDbPropDataType &)",
    "const NtmsDbDrive::`vftable'",
    "public: __thiscall NtmsDbGuid::operator struct _GUID *(void)const",
    "public: int __thiscall NtmsDbRecordType::IsValid(void)const",
    "public: __thiscall NtmsDbString::NtmsDbString(char const *)",
    "public: class NtmsDbGuid & __thiscall NtmsDbPropGuid::NewRelationGuid(void)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbLibWorkItem::Library_n(void)const",
    "public: unsigned long __thiscall NtmsDbDrive::SetLibrary(class NtmsDbGuid const &)",
    "public: __thiscall NtmsDbSelectionSet::NtmsDbSelectionSet(void)",
    "public: unsigned long __thiscall NtmsDbLibrary::NumDoors(void)",
    "public: __thiscall NtmsDbTypeGuid::operator class NtmsDbGuid &(void)",
    "public: class NtmsDbList & __thiscall NtmsDbList::operator-(long)",
    "public: virtual __thiscall NtmsDbUIDestination::~NtmsDbUIDestination(void)",
    "public: void __thiscall NtmsDbOpRequest::GetApplicationW(unsigned short *,int)",
    "public: void __thiscall NtmsDbSelectionSet::operator<<(class NtmsDbGuid const &)",
    "public: void __thiscall NtmsDbLibWorkItem::GetApplicationW(unsigned short *,int)",
    "public: unsigned long __thiscall NtmsDbPartition::SetAllocOption(unsigned long)",
    "public: long __thiscall NtmsDbPhysicalMedia::Barcode_IsNotNull(void)",
    "public: void __thiscall NtmsDbProperty::SetDefault(void)",
    "public: __thiscall NtmsDbMediaType::NtmsDbMediaType(void)",
    "public: class NtmsDbGuid const __thiscall NtmsDbMediaPool::MediaType(void)const",
    "private: void __thiscall NtmsDbPartition::InitDefaults(void)",
    "public: static void __stdcall NtmsDbDataCtxt::SetActivityCounter(unsigned long *)",
    "public: void __thiscall NtmsDbDrive::SetSavedPartitionId_Null(void)",
    "protected: virtual void __thiscall NtmsDbUIDestination::DeleteDbObject(class NtmsDbDataCtxt *)",
    "public: unsigned long const __thiscall NtmsDbPhysicalMedia::InventoryState(void)const",
    "public: unsigned long __thiscall NtmsDbOpRequest::Arg1Type(void)const",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::SetLibrary(class NtmsDbGuid const &)",
    "protected: virtual class NtmsDbRecordProp * __thiscall NtmsDbDriveType::GetDbProperty(long)const",
    "public: unsigned long __thiscall NtmsDbDrive::SetRevisionW(unsigned short const *)",
    "public: unsigned long __thiscall NtmsDbOpRequest::State(void)const",
    "public: unsigned long __thiscall NtmsDbDrive::SetScsiBus(unsigned short)",
    "public: __thiscall NtmsDbRecordUniqueKey::NtmsDbRecordUniqueKey(class NtmsDbRecordKey const &,class NtmsDbGuid const &)",
    "public: class NtmsDbPartition & __thiscall NtmsDbPartition::operator=(class NtmsDbPartition const &)",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::SetSequenceNumber(unsigned short const *)",
    "protected: virtual class NtmsDbRecordProp * __thiscall NtmsDbChangerType::GetDbProperty(long)const",
    "public: class NtmsDbIEDoor & __thiscall NtmsDbIEDoor::operator=(class NtmsDbIEDoor const &)",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::ErrorCode(void)",
    "private: void __thiscall NtmsDbRecordPropList::ReCount(void)",
    "public: char const * __thiscall NtmsDbPhysicalMedia::Barcode_n(void)",
    "public: unsigned long __thiscall NtmsDbLibrary::NumMedia(void)",
    "public: unsigned long __thiscall NtmsDbComputer::LibReqFlags(void)const",
    "public: unsigned long __thiscall NtmsDbRecordKey::Index(void)const",
    "public: void __thiscall NtmsDbLibWorkItem::SetSlotId_Null(void)",
    "public: void __thiscall NtmsDbRecordRev::operator++(int)",
    "public: virtual __thiscall NtmsDbComputer::~NtmsDbComputer(void)",
    "public: __thiscall NtmsDbTypeGuid::NtmsDbTypeGuid(struct _GUID const &)",
    "public: unsigned long __thiscall NtmsDbLibrary::MediaTypes(class NtmsDbDataCtxt *,class NtmsDbSelectionSet &)",
    "public: unsigned short const * __thiscall NtmsDbOpRequest::Application(void)const",
    "public: virtual unsigned long __thiscall NtmsDbObject::RemoveRegardless(class NtmsDbDataCtxt *)",
    "public: int __thiscall NtmsDbPropGuid::HasRelatedProperty(void)const",
    "public: virtual __thiscall NtmsDbIEDoor::~NtmsDbIEDoor(void)",
    "public: int __thiscall NtmsDbPropHeader::operator==(class NtmsDbPropHeader const &)const",
    "protected: virtual void __thiscall NtmsDbMediaPool::SetDbObject(class NtmsDbDataCtxt *)",
    "private: static unsigned long * NtmsDbDataCtxt::m_activity_counter",
    "public: unsigned long __thiscall NtmsDbChanger::SetInstanceNameW(unsigned short const *)",
    "public: long __thiscall NtmsDbPartition::Physicalmedia_IsNotNull(void)const",
    "protected: virtual class NtmsDbRecordProp * __thiscall NtmsDbUIDestination::GetDbProperty(long)const",
    "public: __thiscall NtmsDbDataCtxt::NtmsDbDataCtxt(unsigned short const *,unsigned short const *)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbLibrary::DefCleanerSlot_n(void)const",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::MediaTypeCode(void)",
    "public: unsigned short const * __thiscall NtmsDbChangerType::ProductW(void)const",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::SetErrorCode(unsigned long)",
    "public: long __thiscall NtmsDbRecordPropList::Count(void)const",
    "public: long __thiscall NtmsDbPhysicalMedia::LibCurrentMedia_IsNotNull(void)const",
    "public: unsigned long const __thiscall NtmsDbMediaPool::AllocationPolicy(void)const",
    "public: void __thiscall NtmsDbRecordProp::ClearModified(void)",
    "public: class NtmsDbGuid const & __thiscall NtmsDbObject::ObjectGuid(void)",
    "public: __thiscall NtmsDbPropTimeDate::~NtmsDbPropTimeDate(void)",
    "public: void __thiscall NtmsDbPhysicalMedia::GetSequenceNumberW(unsigned short *,int)const",
    "public: unsigned long __thiscall NtmsDbDrive::SetDriveState(unsigned long)",
    "public: __thiscall NtmsDbPropChar::~NtmsDbPropChar(void)",
    "public: void __thiscall NtmsDbRecordPropList::NewPropShort(long,short *,int)",
    "public: __thiscall NtmsDbRecordRev::operator unsigned long(void)",
    "public: unsigned long __thiscall NtmsDbDataCtxt::CommitTransaction(void)",
    "public: void __thiscall NtmsDbRecordPropList::NewPropRelation(long)",
    "protected: virtual void __thiscall NtmsDbMediaPool::DeleteDbObject(class NtmsDbDataCtxt *)",
    "private: void __thiscall NtmsDbChangerType::InitDefaults(void)",
    "public: unsigned long __thiscall NtmsDbLibWorkItem::Priority(void)",
    "public: __thiscall NtmsDbGuid::NtmsDbGuid(struct _GUID const &)",
    "protected: virtual void __thiscall NtmsDbChanger::DeleteDbObject(class NtmsDbDataCtxt *)",
    "public: unsigned long const __thiscall NtmsDbDrive::DriveState(void)const",
    "public: class NtmsDbPropDataType const & __thiscall NtmsDbRecordPropList::GetPropertyType(long)",
    "public: __thiscall NtmsDbStorageSlot::NtmsDbStorageSlot(class NtmsDbDataCtxt *,class NtmsDbGuid const &)",
    "public: class NtmsDbRecordProp const & __thiscall NtmsDbRecordProp::operator=(class NtmsDbRecordProp const &)",
    "private: void __thiscall NtmsDbUIDestination::BuildPropertyList(void)",
    "public: void __thiscall NtmsDbRecordPropList::operator>>(class NtmsDbPropRelation * &)",
    "private: unsigned long __thiscall NtmsDatabase::FileEnd(void)",
    "private: void __thiscall NtmsDbPartition::BuildPropertyList(void)",
    "public: __thiscall NtmsPropMetaInfo::NtmsPropMetaInfo(long,char const *)",
    "public: unsigned short const __thiscall NtmsDbChanger::ScsiBus_n(void)const",
    "private: static class NtmsDbRecordType NtmsDbLibWorkItem::m_Type",
    "public: __thiscall NtmsDbString::NtmsDbString(class NtmsDbString const &)",
    "private: static class NtmsDbRecordType NtmsDbLibrary::m_Type",
    "public: struct _SYSTEMTIME __thiscall NtmsDbObject::ModifyTs(void)const",
    "public: unsigned long __thiscall NtmsDbDrive::SetNeedsCleaning(short)",
    "public: __thiscall NtmsDbRecordProp::operator char const *(void)const",
    "public: void __thiscall NtmsDbChanger::SetPathName_Null(void)",
    "public: void __thiscall NtmsDbIEPort::SetLibrary_Null(void)",
    "public: unsigned long __thiscall NtmsDbObjTypeDef::SuperType(void)const",
    "protected: virtual void __thiscall NtmsDbIEDoor::DeleteDbObject(class NtmsDbDataCtxt *)",
    "public: unsigned long __thiscall NtmsDbDrive::SetDeferDelay(unsigned long)",
    "public: __thiscall NtmsDbChanger::NtmsDbChanger(class NtmsDbDataCtxt *,class NtmsDbGuid const &)",
    "public: long __thiscall NtmsDbDrive::SerialNumber_IsNotNull(void)",
    "protected: virtual void __thiscall NtmsDbChanger::InitDbObject(class NtmsDbDataCtxt *)",
    "public: __thiscall NtmsDbRecordProp::operator union _LARGE_INTEGER(void)const",
    "public: class NtmsDbRecordProp const & __thiscall NtmsDbRecordProp::operator=(class NtmsDbGuid const &)",
    "public: unsigned long __thiscall NtmsDbPhysicalMedia::DensityCode(void)",
    "public: void __thiscall NtmsDbObject::SetDefaultValue(class NtmsDbProperty *)",
    "public: int __thiscall NtmsDbDataCtxt::RetryNeeded(class NtmsDbError &)",
    "public: void __thiscall NtmsDbLibWorkItem::SetAssocWorkItem_Null(void)",
    "public: __thiscall NtmsDbUIDestination::NtmsDbUIDestination(class NtmsDbDataCtxt *,class NtmsDbGuid const &)",
    "public: long __thiscall NtmsDbDrive::PathName_IsNotNull(void)",
    "public: long __thiscall NtmsDbList::Count(void)const",
    "public: class NtmsDbPropHeader & __thiscall NtmsDbRecordProp::Header(void)",
    "private: void __thiscall NtmsDbLibrary::InitDefaults(void)",
    "public: virtual unsigned long __thiscall NtmsDbObject::Remove(class NtmsDbDataCtxt *)",
    "public: unsigned long __thiscall NtmsDbObject::ExplicitRemoveRelation(long,class NtmsDbGuid const &)",
    "public: unsigned long __thiscall NtmsDbComputer::Librarys(class NtmsDbDataCtxt *,class NtmsDbSelectionSet &)",
    "public: unsigned long __thiscall NtmsDbLibrary::SetFirstPortNumber(unsigned long)",
    "public: void __thiscall NtmsDbDriveType::GetVendorW(unsigned short *,int)",
    "public: void __thiscall NtmsDbChangerType::GetProductW(unsigned short *,int)",
    "public: class NtmsDbLogicalMedia & __thiscall NtmsDbLogicalMedia::operator=(class NtmsDbLogicalMedia const &)",
    "public: __thiscall NtmsDbPropDouble::~NtmsDbPropDouble(void)",
    "public: unsigned long __thiscall NtmsDbObject::SetEnabled(short)",
    "public: void __thiscall NtmsDbChanger::GetSerialNumberA(char *,int)",
    "public: void __thiscall NtmsDbLibWorkItem::SetDriveId_Null(void)",
    "public: class NtmsDbPropertyValue const & __thiscall NtmsDbPropertyValue::operator=(double)",
    "public: void __thiscall NtmsDbList::Map::Validate(void)",
    "public: long __thiscall NtmsDbLibrary::CleanerSlot_IsNotNull(void)const",
    "public: static class NtmsDbGuid const & __stdcall NtmsDbGuid::NullGuid(void)",
    "public: long __thiscall NtmsDbList::Map::Put(long,class NtmsDbListItem &)"
  ],
  "ntmsevt.dll": [
    "DllUnregisterServer",
    "DllRegisterServer"
  ],
  "ntmsmgr.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "ntmssvc.dll": [
    "DllUnregisterServer",
    "ServiceMain",
    "DllInstall",
    "DllRegisterServer"
  ],
  "ntprint.dll": [
    "PSetupThisPlatform",
    "PSetupBuildDriversFromPath",
    "PSetupSelectDriver",
    "PSetupDriverInfoFromName",
    "PSetupDestroyMonitorInfo",
    "PSetupGetSelectedDriverInfo",
    "PSetupGetDriverInfo3",
    "PSetupIsTheDriverFoundInInfInstalled",
    "PSetupCreateDrvSetupPage",
    "PSetupCreateMonitorInfo",
    "PSetupAssociateICMProfiles",
    "PSetupFreeMem",
    "PSetupInstallMonitor",
    "PSetupGetDriverInfForPrinter",
    "PSetupIsOemDriver",
    "PSetupGetLocalDataField",
    "PSetupEnumMonitor",
    "PSetupShowBlockedDriverUI",
    "PSetupIsDriverInstalled",
    "PSetupGetPathToSearch",
    "ClassInstall32",
    "PSetupSelectDeviceButtons",
    "PSetupFreeDrvField",
    "PSetupInstallInboxDriverSilently",
    "PSetupDestroySelectedDriverInfo",
    "PSetupSetSelectDevTitleAndInstructions",
    "PSetupProcessPrinterAdded",
    "PSetupRefreshDriverList",
    "PSetupFindMappedDriver",
    "PSetupInstallPrinterDriver",
    "PSetupCreatePrinterDeviceInfoList",
    "PSetupDestroyDriverInfo3",
    "ServerInstallW",
    "PSetupInstallICMProfiles",
    "PSetupIsCompatibleDriver",
    "PSetupKillBadUserConnections",
    "PSetupInstallPrinterDriverFromTheWeb",
    "PSetupUpgradeClusterDriversW",
    "PSetupDestroyPrinterDeviceInfoList",
    "PSetupPreSelectDriver"
  ],
  "ntsdexts.dll": [
    "hleak",
    "gle",
    "dreg",
    "runaway",
    "dt",
    "help",
    "vprot",
    "version",
    "error",
    "threadtoken",
    "critsec",
    "handle",
    "locks",
    "DebugExtensionInitialize",
    "htrace",
    "dp",
    "gatom"
  ],
  "ntshrui.dll": [
    "GetNetResourceFromLocalPathW",
    "SetFolderPermissionsForSharing",
    "GetNetResourceFromLocalPathA",
    "GetLocalPathFromNetResourceW",
    "IsFolderPrivateForUser",
    "CanShareFolderW",
    "GetNetResourceFromLocalPath",
    "DllCanUnloadNow",
    "IsPathSharedW",
    "IsPathShared",
    "DllGetClassObject",
    "SharingDialog",
    "ShowShareFolderUIW",
    "IsPathSharedA",
    "SharingDialogW",
    "SharingDialogA",
    "GetLocalPathFromNetResourceA",
    "GetLocalPathFromNetResource"
  ],
  "ntvdmd.dll": [
    "xxxDbgBPInt",
    "xxxDbgFault",
    "xxxDbgNotifyDebugged",
    "xxxDbgTraceInt",
    "xxxDbgDispatch",
    "xxxDbgSegmentNotice",
    "xxxDbgDosAppStart",
    "xxxDbgTraceEvent",
    "xxxDbgNotifyNewTask",
    "xxxDbgIsDebuggee",
    "xxxDbgNotifyRemoteThreadAddress",
    "xxxDbgInit"
  ],
  "nwapi16.dll": [
    "Nw16Register",
    "Nw16Handler"
  ],
  "nwapi32.dll": [
    "NWPGetObjectID",
    "NwNdsDeleteQueryNode",
    "NWCDeleteObject",
    "NWPAddTrustee",
    "NwNdsGetVolumeInformation",
    "NWPScanProperty",
    "NwNdsSearch",
    "NwNdsOpenGenericHandle",
    "NWAttachToFileServerW",
    "NWCGetVolumeInfoWithHandle",
    "NWCIsObjectInSet",
    "NWCAddObjectToSet",
    "NwNdsListSubObjects",
    "FragExWithWait",
    "NwNdsGetQueueInformation",
    "NWDeallocateDirectoryHandle",
    "NwNdsResolveName",
    "NWCReadPropertyValue",
    "NWCDetachFromFileServer",
    "NWCScanObject",
    "NWCDeleteProperty",
    "NWCGetObjectName",
    "NWPCreateObject",
    "NWPGetChallengeKey",
    "NWPReadPropertyValue",
    "NwNdsGetObjectListFromBuffer",
    "NwNdsGetAttrListFromBuffer",
    "NWCGetBinderyAccessLevel",
    "NWCAddTrusteeToDirectory",
    "NWCLogoutFromFileServer",
    "NWPDeleteObjectFromSet",
    "NWCAllocTemporaryDirectoryHandle",
    "NwNdsGetTreeContext",
    "NWCCreateDirectory",
    "NWPDeleteProperty",
    "NwDupStringA",
    "NwNdsCreateBuffer",
    "NwNdsCreateQueryNode",
    "NwNdsReadAttribute",
    "NwNdsDeleteAttrDef",
    "NWPLoginToFileServerW",
    "NWPDeleteObject",
    "NWGetObjectName",
    "NwNdsGetSyntaxID",
    "NWCChangePropertySecurity",
    "NwNdsAddObject",
    "NWScanObject",
    "NWGetVolumeInfoWithHandle",
    "NWCScanProperty",
    "NWCLoginToFileServer",
    "NWCGetVolumeInfoWithNumber",
    "NWCCheckConsolePrivileges",
    "NWGetFileServerDateAndTime",
    "NWPAddObjectToSet",
    "FormatBuf",
    "NWCGetInternetAddress",
    "NWPDetachFromFileServer",
    "NWPAttachToFileServerW",
    "NwNdsRenameObject",
    "MapSpecialJapaneseChars",
    "NwNdsDefineClass",
    "NwNdsGetClassDefListFromBuffer",
    "NwNdsDefineAttribute",
    "NWCCreateObject",
    "NwNdsDeleteClassDef",
    "NwNdsReadClassDef",
    "NWCAttachToFileServer",
    "NWLogoutFromFileServer",
    "NwlibCopyStringToBuffer",
    "NWPGetObjectName",
    "NwLibValidateLocalName",
    "NwNdsChangePassword",
    "NwNdsOpenStream",
    "NWCDestroyQueue",
    "NwLibCanonRemoteName",
    "NWCScanDirectoryForTrustees2",
    "NwNdsList",
    "NWAllocPermanentDirectoryHandle",
    "NWIsObjectInSet",
    "NwOpenHandleWithSupplementalCredentials",
    "NWPCreateDirectory",
    "NWGetVolumeName",
    "NwNdsSetTreeContext",
    "NWCScanForTrustees",
    "NwNdsConnHandleFree",
    "UnmapSpecialJapaneseChars",
    "NWCWritePropertyValue",
    "NWCDeallocateDirectoryHandle",
    "NWCRenameBinderyObject",
    "NwNdsGetAttrDefListFromBuffer",
    "NwLibCanonUserName",
    "NWGetVolumeInfoWithNumber",
    "NwNdsIsNdsConnection",
    "NwNdsCloseObject",
    "NwLibCanonLocalName",
    "NWCAttachToFileServerW",
    "NWCGetObjectID",
    "NWReadPropertyValue",
    "NWPGetFileServerVersionInfo",
    "NWCGetVolumeNumber",
    "NwNdsReadObject",
    "NWPWritePropertyValue",
    "NwNdsChangeUserPassword",
    "ParseResponse",
    "NwlibMakeNcp",
    "NWPChangeObjectPasswordEncrypted",
    "NwNdsReadObjectInfo",
    "NWLoginToFileServer",
    "NWAddTrusteeToDirectory",
    "NwNdsModifyObject",
    "NwNdsGetEffectiveRights",
    "NwNdsPutInBuffer",
    "NWCGetFileServerVersionInfo",
    "NWPCreateProperty",
    "NwNdsReadAttrDef",
    "NWAttachToFileServer",
    "NWCCreateProperty",
    "NWScanProperty",
    "NwLibSetEverybodyPermission",
    "NwNdsRemoveObject",
    "NWCGetFileServerDateAndTime",
    "NWPRenameBinderyObject",
    "NWGetInternetAddress",
    "NwNdsOpenTreeHandle",
    "NwNdsOpenObject",
    "NWAllocTemporaryDirectoryHandle",
    "NWCAllocPermanentDirectoryHandle",
    "NwNdsMoveObject",
    "NwNdsAddAttributeToClass",
    "NWCGetVolumeName",
    "NWDetachFromFileServer",
    "NWPScanObject",
    "NWCAddTrustee",
    "NwNdsFreeBuffer",
    "NWCheckConsolePrivileges",
    "NWGetFileServerVersionInfo",
    "NwNdsDeleteQueryTree",
    "NWCCreateQueue",
    "NWCDeleteObjectFromSet",
    "NwNdsObjectHandleToConnHandle",
    "NWPLogoutFromFileServer"
  ],
  "nwcfg.dll": [
    "GetKernelVersion",
    "unlodctr",
    "SetupRegistryForNWCS",
    "DeleteGatewayPassword",
    "DeleteNetwarePrinterProvidor",
    "SetEverybodyPermission",
    "AppendSzToFile",
    "CleanupRegistryForNWCS",
    "AddNetwarePrinterProvidor",
    "SetFileSysChangeValue",
    "lodctr",
    "RemoveSzFromFile"
  ],
  "nwevent.dll": "No exports",
  "nwprovau.dll": [
    "NwInitializeServiceProvider",
    "NwEncryptChallenge",
    "NPGetUniversalName",
    "NwClearGatewayShare",
    "NwSetInfoInWksta",
    "NPOpenEnum",
    "LsaApCallPackage",
    "NSPStartup",
    "LsaApLogonTerminated",
    "NwGetUserNameForServer",
    "NPAddConnection",
    "InitializePrintProvidor",
    "NPAddConnection3",
    "NwCleanupGatewayShares",
    "NPGetResourceInformation",
    "NwEnumGWDevices",
    "NwLogonGatewayAccount",
    "NwRegisterGatewayShare",
    "NPCancelConnection",
    "NwSetLogonScript",
    "NwDeleteGWDevice",
    "NPLoadNameSpaces",
    "NPPasswordChangeNotify",
    "NwQueryInfo",
    "NPGetConnection",
    "NPGetConnectionPerformance",
    "LsaApInitializePackage",
    "NPCloseEnum",
    "NwTerminateServiceProvider",
    "DllGetClassObject",
    "NwDeregisterService",
    "NwSetGatewayAccount",
    "NwRegisterService",
    "NPFormatNetworkName",
    "NwValidateUser",
    "NwQueryGatewayAccount",
    "NwSetLogonOptionsInRegistry",
    "NPGetResourceParent",
    "DllCanUnloadNow",
    "GetServiceItemFromList",
    "LsaApLogonUser",
    "NwAddGWDevice",
    "InitializeDll",
    "NPLogonNotify",
    "NwGetService",
    "NwQueryLogonOptions",
    "NwSetInfoInRegistry",
    "NPGetUser",
    "NwEnumConnections",
    "NPGetCaps",
    "NPEnumResource"
  ],
  "nwwks.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "oakley.dll": [
    "IKECloseIKENotifyHandle",
    "IKEInitiateIKENegotiation",
    "IKERegisterNotifyClient",
    "IKEShutdown",
    "IKENotifyPolicyChange",
    "IKEInit",
    "IKEQueryStatistics",
    "IKEEnumMMs",
    "IKEQuerySpiChange",
    "IKEGetConfigurationVariables",
    "IKEQueryIKENegotiationStatus",
    "IKEDeleteAssociation",
    "IKECloseIKENegotiationHandle",
    "IKESetConfigurationVariables",
    "IKEAddSAs",
    "IKEInterfaceChange"
  ],
  "objsel.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "occache.dll": [
    "RemoveControlByHandle",
    "FindControlClose",
    "RemoveControlByName",
    "ReleaseControlHandle",
    "RemoveControlByHandle2",
    "GetControlInfo",
    "DllCanUnloadNow",
    "IsModuleRemovable",
    "RemoveExpiredControls",
    "FindNextControl",
    "RemoveControlByName2",
    "DllGetClassObject",
    "GetControlDependentFile",
    "SweepControlsByLastAccessDate",
    "FindFirstControl"
  ],
  "ocmanage.dll": [
    "OcCreateOcPage",
    "OcTerminate",
    "OcSubComponentsPresent",
    "OcComponentState",
    "OcCreateSetupPage",
    "OcGetWizardPages",
    "OcRememberWizardDialogHandle",
    "OcInitialize"
  ],
  "odbc32.dll": [
    "SQLGetDescField",
    "SQLTransact",
    "SQLGetStmtAttrW",
    "SQLGetDiagRecW",
    "SQLProceduresA",
    "SQLProcedureColumnsA",
    "SQLColAttributes",
    "SQLPrepareA",
    "SQLSetConnectAttrA",
    "SQLTablesW",
    "SQLGetConnectAttrW",
    "CursorLibLockStmt",
    "SQLTables",
    "SQLColumnPrivileges",
    "SQLFreeHandle",
    "CursorLibTransact",
    "SQLEndTran",
    "SQLFreeEnv",
    "PostComponentError",
    "SQLGetConnectAttrA",
    "SQLGetStmtAttrA",
    "SQLForeignKeysA",
    "SQLColumnPrivilegesA",
    "SQLColAttributeW",
    "SQLSetParam",
    "SQLDataSourcesA",
    "SQLNumResultCols",
    "SQLProcedureColumns",
    "SQLCopyDesc",
    "SQLForeignKeys",
    "SQLGetDiagFieldA",
    "SQLSetConnectOptionA",
    "SQLSetDescFieldA",
    "SQLGetEnvAttr",
    "VRetrieveDriverErrorsRowCol",
    "SQLStatistics",
    "OpenODBCPerfData",
    "SQLGetCursorName",
    "SQLParamData",
    "PostODBCComponentError",
    "PostODBCError",
    "SQLSetCursorName",
    "SQLGetConnectAttr",
    "SQLExecute",
    "SQLGetDiagField",
    "SQLErrorW",
    "SQLExecDirect",
    "MpHeapValidate",
    "SQLSetStmtAttrW",
    "ODBCQualifyFileDSNW",
    "SQLGetDescFieldW",
    "SQLError",
    "DllBidEntryPoint",
    "SQLDriverConnectA",
    "SQLConnect",
    "SQLErrorA",
    "SQLProcedures",
    "ValidateErrorQueue",
    "SQLPutData",
    "SQLGetDescRec",
    "SQLGetDescRecA",
    "SQLSetConnectOption",
    "SQLColAttribute",
    "SQLBrowseConnect",
    "LockHandle",
    "SQLAllocStmt",
    "SQLColumnsW",
    "SQLBrowseConnectW",
    "SQLColAttributeA",
    "SQLPrimaryKeysA",
    "SQLDriversA",
    "SQLAllocHandle",
    "SQLDrivers",
    "g_hHeapMalloc",
    "SQLBindParameter",
    "SQLSetConnectOptionW",
    "ODBCSetTryWaitValue",
    "SQLNativeSql",
    "SQLColumnsA",
    "SQLNumParams",
    "SQLPrepare",
    "SQLExecDirectA",
    "SQLSetStmtAttr",
    "CursorLibLockDbc",
    "SQLDescribeColW",
    "SQLDescribeParam",
    "SQLFetch",
    "SQLFreeStmt",
    "SQLGetInfoW",
    "SQLSetDescFieldW",
    "ODBCInternalConnectW",
    "SQLGetInfo",
    "CursorLibLockDesc",
    "SQLBulkOperations",
    "SQLNativeSqlW",
    "CloseODBCPerfData",
    "SQLSpecialColumnsW",
    "MpHeapFree",
    "SQLDriverConnect",
    "SQLDescribeCol",
    "SearchStatusCode",
    "SQLGetStmtAttr",
    "SQLSetCursorNameW",
    "SQLProcedureColumnsW",
    "SQLGetConnectOptionW",
    "SQLConnectA",
    "SQLBindCol",
    "SQLBindParam",
    "SQLColumnPrivilegesW",
    "SQLDataSourcesW",
    "ODBCGetTryWaitValue",
    "SQLGetTypeInfoA",
    "SQLCloseCursor",
    "SQLTablesA",
    "SQLSetConnectAttrW",
    "SQLColAttributesW",
    "SQLPrimaryKeysW",
    "SQLStatisticsW",
    "SQLGetConnectOptionA",
    "SQLGetTypeInfoW",
    "SQLTablePrivilegesA",
    "MpHeapReAlloc",
    "SQLMoreResults",
    "SQLPrimaryKeys",
    "SQLTablePrivilegesW",
    "SQLDriverConnectW",
    "SQLSetCursorNameA",
    "SQLGetStmtOption",
    "SQLGetDiagFieldW",
    "MpHeapSize",
    "SQLProceduresW",
    "SQLSetPos",
    "SQLGetInfoA",
    "SQLCancel",
    "SQLGetDescFieldA",
    "MpHeapDestroy",
    "SQLFreeConnect",
    "SQLPrepareW",
    "SQLGetFunctions",
    "SQLGetDiagRecA",
    "SQLColumns",
    "SQLExecDirectW",
    "SQLDisconnect",
    "SQLFetchScroll",
    "SQLSetStmtOption",
    "SQLDriversW",
    "SQLGetCursorNameA",
    "SQLSetConnectAttr",
    "SQLNativeSqlA",
    "SQLSetDescField",
    "SQLGetConnectOption",
    "SQLGetData",
    "SQLGetTypeInfo",
    "SQLParamOptions",
    "GetODBCSharedData",
    "MpHeapCompact",
    "SQLSetStmtAttrA",
    "SQLSpecialColumnsA",
    "SQLRowCount",
    "SQLAllocEnv",
    "SQLSetDescRec",
    "SQLBrowseConnectA",
    "SQLDataSources",
    "SQLGetDescRecW",
    "SQLStatisticsA",
    "MpHeapCreate",
    "SQLDescribeColA",
    "SQLGetCursorNameW",
    "SQLSpecialColumns",
    "SQLConnectW",
    "SQLExtendedFetch",
    "SQLGetDiagRec",
    "CollectODBCPerfData",
    "SQLAllocHandleStd",
    "SQLTablePrivileges",
    "SQLAllocConnect",
    "SQLColAttributesA",
    "VFreeErrors",
    "SQLSetScrollOptions",
    "SQLForeignKeysW",
    "MpHeapAlloc",
    "SQLSetEnvAttr"
  ],
  "odbc32gt.dll": [
    "Dispatch",
    "Dispatch2"
  ],
  "odbcbcp.dll": [
    "bcp_colfmt",
    "dbprtypeW",
    "bcp_bind",
    "bcp_initA",
    "bcp_sendrow",
    "dbprtypeA",
    "SQLGetNextEnumeration",
    "LibMain",
    "bcp_colptr",
    "SQLInitEnumServers",
    "bcp_setcolfmt",
    "bcp_columns",
    "bcp_writefmtA",
    "bcp_readfmtW",
    "SQLLinkedServers",
    "bcp_writefmtW",
    "bcp_readfmtA",
    "SQLLinkedCatalogsW",
    "bcp_control",
    "bcp_batch",
    "bcp_initW",
    "SQLLinkedCatalogsA",
    "SQLCloseEnumServers",
    "bcp_collen",
    "bcp_done",
    "bcp_exec",
    "bcp_getcolfmt",
    "bcp_moretext"
  ],
  "odbcconf.dll": [
    "LookupAppFriendlyName",
    "SetActionName",
    "OpenPendingRenameList",
    "ApplyMillenCat",
    "SetActionEnum",
    "OpenAppRegEnum",
    "GetProgramFilesCommonFilesDirectory",
    "ParseVersionDataFromString",
    "ClosePendingRenameList",
    "CalculateRequiredDriveSpace",
    "DisableDebugPrivileges",
    "SLListAddNode",
    "LoadRegVersion",
    "CloseAppRegEnum",
    "RunDLL32_UnregisterApplication",
    "IsFileLocked",
    "SLListGetData",
    "SaveRegKeyBackupToFile",
    "RegKeyRestore",
    "SetActionLogModeSz",
    "DLListGetHead",
    "AddInfToList",
    "CreateInfList",
    "RegisterApplication",
    "IsModuleLoadedByProcessEx",
    "DestroyInfList",
    "OpenProcessInfo",
    "DLListGetNext",
    "DllCanUnloadNow",
    "DisableNTPrivilege",
    "UnregisterApplication",
    "RestoreCatalog",
    "GetPathFromID",
    "IsModuleLoadedByProcess",
    "LoadRegVersionEx",
    "BackupCatalog",
    "DLListGetData",
    "RegVersionEx",
    "AppRegEnum",
    "SLListSetData",
    "SLListCreate",
    "ExpandPath",
    "OpenDriveSpaceList",
    "ShutdownProcess",
    "DLListSetData",
    "SetSilent",
    "CloseDriveSpaceList",
    "DllGetClassObject",
    "CreateRegKeyBackupList",
    "ParseVersionDataFromStringEx",
    "DLListDestroy",
    "OpenDriveSpaceListFromInfList",
    "CloseProcessInfo",
    "OpenProcessList",
    "CompareVersionData",
    "DllUnregisterServer",
    "BackupRegKey",
    "DLListRemoveNode",
    "LoadRegKeyBackupFromFile",
    "RegVersion",
    "OpenProcessDisplayNames",
    "EnableNTPrivilege",
    "DLListAddNode",
    "CloseProcessList",
    "RefreshAppRegEnum",
    "UnregW2KXPak",
    "GetProgramFilesDirectory",
    "QueryApplication",
    "SLListDestroy",
    "ExecuteAction",
    "CompareVersionDataEx",
    "DLListCreate",
    "DLListGetPrev",
    "SLListRemoveNode",
    "RunDLL32_RegisterApplication",
    "RegKeyBackup",
    "ApplyW2KXPak",
    "GetProcessListFromFileList",
    "IsExceptionInfEx",
    "RestoreRegKey",
    "SLListGetHead",
    "RunDLL32_FilterRunOnceExRegistration",
    "DllRegisterServer",
    "DestroyRegKeyBackupList",
    "RemoveFilterRunOnceExRegistrationFromRegistry",
    "EnumerateProcesses",
    "PopulateInfFileList",
    "FilterRunOnceExRegistration",
    "SLListGetNext",
    "SetActionLogMode",
    "EnableDebugPrivileges",
    "AddFilterRunOnceExRegistrationToRegistry",
    "DoesFileExist",
    "CloseProcessDisplayNames",
    "SetActionLogFile",
    "IsExceptionInf"
  ],
  "odbccp32.dll": [
    "SQLGetInstalledDriversW",
    "SQLConfigDriver",
    "SQLInstallODBCW",
    "SQLGetAvailableDriversW",
    "SQLGetConfigMode",
    "SQLGetTranslatorW",
    "SQLRemoveDefaultDataSource",
    "SQLGetAvailableDrivers",
    "SQLInstallerErrorW",
    "SQLReadFileDSNW",
    "SQLSetConfigMode",
    "SQLWriteFileDSNW",
    "SQLReadFileDSN",
    "SQLGetPrivateProfileStringW",
    "SQLWritePrivateProfileStringW",
    "SQLCreateDataSource",
    "SQLRemoveDriverW",
    "ODBCCPlApplet",
    "SQLValidDSNW",
    "SQLWriteDSNToIni",
    "SQLConfigDataSource",
    "SQLConfigDriverW",
    "SQLGetInstalledDrivers",
    "SQLInstallTranslator",
    "SQLInstallODBC",
    "SQLRemoveDriver",
    "SQLInstallerError",
    "SQLWriteDSNToIniW",
    "SQLCreateDataSourceExW",
    "SQLPostInstallerErrorW",
    "SQLGetPrivateProfileString",
    "SQLInstallDriverManager",
    "SelectTransDlg",
    "SQLInstallTranslatorW",
    "SQLInstallTranslatorExW",
    "SQLRemoveDriverManager",
    "SQLRemoveTranslatorW",
    "SQLInstallDriverExW",
    "SQLLoadDriverListBox",
    "SQLInstallTranslatorEx",
    "SQLManageDataSources",
    "SQLConfigDataSourceW",
    "SQLPostInstallerError",
    "SQLRemoveDSNFromIni",
    "SQLCreateDataSourceEx",
    "SQLCreateDataSourceW",
    "SQLWritePrivateProfileString",
    "SQLRemoveDSNFromIniW",
    "SQLInstallDriverW",
    "SQLWriteFileDSN",
    "SQLInstallDriverManagerW",
    "SQLInstallDriverEx",
    "SQLRemoveTranslator",
    "SQLInstallDriver",
    "SQLGetTranslator",
    "SQLLoadDataSourcesListBox",
    "SQLValidDSN"
  ],
  "odbccr32.dll": [
    "SQLGetDescField",
    "SQLPutData",
    "SQLTransact",
    "SQLBindCol",
    "SQLGetDescRec",
    "SQLSetConnectOption",
    "SQLCloseCursor",
    "SQLSetConnectAttr",
    "SQLSetDescField",
    "SQLMoreResults",
    "SQLGetData",
    "SQLFreeHandle",
    "SQLParamOptions",
    "SQLEndTran",
    "SQLBindParameter",
    "SQLGetStmtOption",
    "SQLNativeSql",
    "SQLPrepare",
    "SQLNumParams",
    "SQLRowCount",
    "SQLSetDescRec",
    "SQLSetStmtAttr",
    "SQLFetch",
    "SQLFreeStmt",
    "SQLSetPos",
    "SQLParamData",
    "SQLCancel",
    "SQLGetInfo",
    "SQLExtendedFetch",
    "SQLBulkOperations",
    "SQLExecute",
    "SQLExecDirect",
    "SQLSetScrollOptions",
    "SQLFetchScroll",
    "SQLGetStmtAttr",
    "SQLSetStmtOption",
    "ReleaseCLStmtResources"
  ],
  "odbccu32.dll": [
    "SQLGetDescField",
    "SQLPutData",
    "SQLTransact",
    "SQLBindCol",
    "SQLGetDescRec",
    "SQLSetConnectOption",
    "SQLCloseCursor",
    "SQLSetConnectAttr",
    "SQLSetDescField",
    "SQLMoreResults",
    "SQLGetData",
    "SQLFreeHandle",
    "SQLParamOptions",
    "SQLEndTran",
    "SQLBindParameter",
    "SQLGetStmtOption",
    "SQLNativeSql",
    "SQLPrepare",
    "SQLNumParams",
    "SQLRowCount",
    "SQLSetDescRec",
    "SQLSetStmtAttr",
    "SQLFetch",
    "SQLFreeStmt",
    "SQLSetPos",
    "SQLParamData",
    "SQLCancel",
    "SQLGetInfo",
    "SQLExtendedFetch",
    "SQLBulkOperations",
    "SQLExecute",
    "SQLExecDirect",
    "SQLSetScrollOptions",
    "SQLFetchScroll",
    "SQLGetStmtAttr",
    "SQLSetStmtOption",
    "ReleaseCLStmtResources"
  ],
  "odbcint.dll": "No exports",
  "odbcji32.dll": [
    "IntlLibHinst",
    "LibMain"
  ],
  "odbcjt32.dll": [
    "SQLPutData",
    "SQLBindCol",
    "SQLGetStmtAttrW",
    "SQLGetDiagRecW",
    "SQLCloseCursor",
    "SQLSetConnectAttrW",
    "LoginDialogProc",
    "SQLAllocStmt",
    "SQLStatisticsW",
    "SQLGetTypeInfoW",
    "SQLGetConnectAttrW",
    "SQLMoreResults",
    "RepairCompactProc",
    "ConfigDSN",
    "SQLGetData",
    "SQLColumnsW",
    "LibMain",
    "SQLFreeHandle",
    "SQLTablesW",
    "InvisibleSelectDb",
    "SQLDriverConnectW",
    "SQLAllocHandle",
    "SQLEndTran",
    "SQLFreeEnv",
    "SQLBindParameter",
    "SQLGetDiagFieldW",
    "SQLNumParams",
    "InitializeLoginDialog",
    "SQLRowCount",
    "AdvancedDialogProc",
    "SelectIndexDlgProc",
    "SQLColAttributeW",
    "SQLAllocEnv",
    "ConfigDriverW",
    "ConfigDSNExW",
    "SQLSetDescRec",
    "SQLNumResultCols",
    "SQLGetDescRecW",
    "SQLCopyDesc",
    "SQLDescribeColW",
    "SQLFetch",
    "SQLFreeStmt",
    "ConfigDialogProc",
    "SQLGetInfoW",
    "DefTxtFmtDlgProc",
    "InitDialogAgain",
    "SQLParamData",
    "SQLProceduresW",
    "SQLGetCursorNameW",
    "SQLSetDescFieldW",
    "SQLCancel",
    "SQLSetPos",
    "SQLConnectW",
    "SQLExtendedFetch",
    "SQLFreeConnect",
    "SQLPrepareW",
    "SQLBulkOperations",
    "SQLNativeSqlW",
    "SQLExecute",
    "SQLGetFunctions",
    "OpenDirHook",
    "SQLAllocConnect",
    "SQLSpecialColumnsW",
    "SQLSetStmtAttrW",
    "SQLExecDirectW",
    "SQLGetDescFieldW",
    "SQLSetScrollOptions",
    "LoadByOrdinal",
    "SQLDisconnect",
    "SQLFetchScroll",
    "AssertSzFail",
    "SQLSetCursorNameW",
    "ConfigDSNW",
    "SQLProcedureColumnsW",
    "SelectUIdxDlgProc",
    "SQLSetEnvAttr"
  ],
  "odbcp32r.dll": "No exports",
  "odbctrac.dll": [
    "TraceSQLColumnPrivileges",
    "TraceVSControl",
    "TraceSQLColAttribute",
    "TraceSQLErrorW",
    "TraceSQLSetConnectOption",
    "TraceSQLDrivers",
    "TraceSQLSetCursorName",
    "TraceSQLBulkOperations",
    "TraceSQLAllocHandle",
    "TraceSQLAllocEnv",
    "TraceSQLProcedureColumns",
    "TraceSQLGetDiagRec",
    "TraceSQLSetDescRec",
    "TraceSQLDriverConnectW",
    "TraceSQLDescribeCol",
    "TraceSQLGetData",
    "TraceSQLAllocConnect",
    "TraceSQLDescribeParam",
    "TraceSQLSpecialColumnsW",
    "TraceSQLSetStmtAttrW",
    "TraceSQLPrepare",
    "TraceSQLTransact",
    "TraceSQLGetDiagFieldW",
    "TraceSQLFreeStmt",
    "TraceSQLGetInfoW",
    "TraceSQLBrowseConnectW",
    "TraceSQLGetStmtOption",
    "TraceSQLParamOptions",
    "TraceSQLTablePrivilegesW",
    "TraceSQLProcedures",
    "TraceSQLExecDirect",
    "TraceOpenLogFile",
    "TraceSQLAllocStmt",
    "TraceSQLCopyDesc",
    "TraceSQLFreeEnv",
    "TraceSQLCloseCursor",
    "TraceSQLSetEnvAttr",
    "TraceCloseLogFile",
    "TraceSQLBindParam",
    "TraceSQLSetScrollOptions",
    "TraceSQLGetConnectOption",
    "TraceSQLRowCount",
    "TraceSQLNativeSqlW",
    "TraceSQLError",
    "TraceSQLFetchScroll",
    "TraceSQLSetDescField",
    "TraceSQLPutData",
    "TraceSQLFreeHandle",
    "TraceSQLGetCursorNameW",
    "TraceSQLGetDescRec",
    "TraceSQLPrimaryKeysW",
    "TraceSQLBrowseConnect",
    "TraceSQLAllocHandleStd",
    "TraceSQLBindParameter",
    "TraceSQLFetch",
    "TraceSQLColAttributes",
    "TraceSQLGetDescRecW",
    "TraceSQLPrimaryKeys",
    "TraceSQLProceduresW",
    "TraceSQLSetPos",
    "TraceSQLExecute",
    "TraceSQLGetDescFieldW",
    "TraceSQLGetDiagField",
    "TraceSQLGetFunctions",
    "TraceSQLDisconnect",
    "TraceSQLColumns",
    "TraceReturn",
    "TraceSQLBindCol",
    "TraceSQLColumnPrivilegesW",
    "TraceSQLForeignKeys",
    "TraceSQLGetTypeInfo",
    "TraceSQLTables",
    "TraceSQLDataSources",
    "TraceSQLGetConnectAttr",
    "TraceSQLNumResultCols",
    "TraceSQLSetConnectAttrW",
    "TraceSQLSetCursorNameW",
    "TraceSQLProcedureColumnsW",
    "TraceSQLSetStmtOption",
    "TraceSQLExecDirectW",
    "TraceSQLSetConnectAttr",
    "TraceSQLConnectW",
    "FireVSDebugEvent",
    "TraceSQLDescribeColW",
    "TraceSQLGetConnectOptionW",
    "TraceSQLGetCursorName",
    "TraceSQLColAttributeW",
    "TraceSQLSpecialColumns",
    "TraceSQLFreeConnect",
    "TraceSQLNativeSql",
    "TraceSQLEndTran",
    "TraceSQLStatistics",
    "TraceSQLTablePrivileges",
    "TraceSQLGetConnectAttrW",
    "TraceSQLDataSourcesW",
    "TraceSQLSetDescFieldW",
    "TraceSQLColumnsW",
    "TraceSQLGetInfo",
    "TraceSQLDriverConnect",
    "TraceVersion",
    "TraceSQLSetParam",
    "TraceSQLColAttributesW",
    "TraceSQLGetTypeInfoW",
    "TraceSQLMoreResults",
    "TraceSQLExtendedFetch",
    "TraceSQLPrepareW",
    "TraceSQLCancel",
    "TraceSQLConnect",
    "TraceSQLGetEnvAttr",
    "TraceSQLSetStmtAttr",
    "TraceSQLGetStmtAttr",
    "TraceSQLTablesW",
    "TraceSQLForeignKeysW",
    "TraceSQLGetStmtAttrW",
    "TraceSQLAllocHandleStdW",
    "TraceSQLDriversW",
    "TraceSQLGetDiagRecW",
    "TraceSQLParamData",
    "TraceSQLStatisticsW",
    "TraceSQLNumParams",
    "TraceSQLGetDescField",
    "TraceSQLSetConnectOptionW"
  ],
  "oddbse32.dll": [
    "ConfigDSNW"
  ],
  "odexl32.dll": [
    "ConfigDSNW"
  ],
  "odfox32.dll": [
    "ConfigDSNW"
  ],
  "odpdx32.dll": [
    "ConfigDSNW"
  ],
  "odtext32.dll": [
    "ConfigDSNW"
  ],
  "offfilt.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "ole32.dll": [
    "CoQueryReleaseObject",
    "StgOpenStorage",
    "StgCreateStorageEx",
    "OleDuplicateData",
    "StringFromCLSID",
    "StgOpenPropStg",
    "SNB_UserSize",
    "CoGetMalloc",
    "ComPs_CStdStubBuffer_CountRefs",
    "HMETAFILEPICT_UserUnmarshal",
    "CoPushServiceDomain",
    "HWND_UserFree",
    "HPALETTE_UserUnmarshal",
    "EnableHookObject",
    "CoGetClassObject",
    "DllGetClassObjectWOW",
    "CoMarshalInterface",
    "OleCreateFromData",
    "CoRevertToSelf",
    "GetDocumentBitStg",
    "CoRegisterClassObject",
    "CreatePointerMoniker",
    "OleCreate",
    "OleQueryLinkFromData",
    "CoUnmarshalHresult",
    "CoRegisterChannelHook",
    "CreateOleAdviseHolder",
    "CoGetInterceptorFromTypeInfo",
    "PropVariantClear",
    "CoRevokeMallocSpy",
    "StgCreatePropStg",
    "GetRunningObjectTable",
    "CoSwitchCallContext",
    "MonikerCommonPrefixWith",
    "HkOleRegisterObject",
    "CoFreeAllLibraries",
    "HICON_UserUnmarshal",
    "CoReleaseServerProcess",
    "StgPropertyLengthAsVariant",
    "WriteClassStg",
    "GetClassFile",
    "CoGetInstanceFromIStorage",
    "CoInitializeSecurity",
    "CoDisconnectObject",
    "StgCreatePropSetStg",
    "HDC_UserUnmarshal",
    "CoCreateGuid",
    "MkParseDisplayName",
    "CoInitializeEx",
    "HENHMETAFILE_UserUnmarshal",
    "CoWaitForMultipleHandles",
    "ComPs_NdrStubForwardingFunction",
    "OleNoteObjectVisible",
    "CoGetComCatalog",
    "OleCreateEx",
    "CoEnableCallCancellation",
    "CoGetCancelObject",
    "ComPs_IUnknown_Release_Proxy",
    "ReadStringStream",
    "StgConvertPropertyToVariant",
    "CoGetInstanceFromFile",
    "MonikerRelativePathTo",
    "CoDeactivateObject",
    "OleIsRunning",
    "CLSIDFromOle1Class",
    "CoGetObject",
    "WdtpInterfacePointer_UserSize",
    "CoSetProxyBlanket",
    "HPALETTE_UserMarshal",
    "CoTestCancel",
    "CoBuildVersion",
    "OleFlushClipboard",
    "OleMetafilePictFromIconAndLabel",
    "OleConvertIStorageToOLESTREAM",
    "ComPs_CStdStubBuffer_QueryInterface",
    "CoGetSystemSecurityPermissions",
    "StgOpenStorageEx",
    "CoLoadLibrary",
    "CoDosDateTimeToFileTime",
    "HDC_UserMarshal",
    "CoIsHandlerConnected",
    "CreateGenericComposite",
    "CoRegisterPSClsid",
    "HWND_UserUnmarshal",
    "StgIsStorageFile",
    "OleSave",
    "HBRUSH_UserMarshal",
    "ReadClassStg",
    "CreateStdProgressIndicator",
    "ComPs_NdrClientCall2",
    "HDC_UserFree",
    "HICON_UserSize",
    "ComPs_CStdStubBuffer_Disconnect",
    "StringFromIID",
    "CoInstall",
    "SNB_UserMarshal",
    "ComPs_CStdStubBuffer_DebugServerRelease",
    "HBITMAP_UserSize",
    "RevokeDragDrop",
    "HGLOBAL_UserSize",
    "CoGetContextToken",
    "OleUninitialize",
    "StgOpenAsyncDocfileOnIFillLockBytes",
    "ComPs_NdrStubCall2",
    "HBITMAP_UserUnmarshal",
    "OleRegEnumFormatEtc",
    "OleCreateLinkEx",
    "ProgIDFromCLSID",
    "CoRevokeClassObject",
    "CoRegisterMallocSpy",
    "HPALETTE_UserFree",
    "CoMarshalInterThreadInterfaceInStream",
    "CLSIDFromString",
    "CoInvalidateRemoteMachineBindings",
    "CoSuspendClassObjects",
    "STGMEDIUM_UserUnmarshal",
    "CoGetCallContext",
    "IsValidPtrIn",
    "CoReactivateObject",
    "CoInitialize",
    "OleQueryCreateFromData",
    "CLSIDFromProgIDEx",
    "PropSysFreeString",
    "OleConvertIStorageToOLESTREAMEx",
    "StringFromGUID2",
    "HMETAFILE_UserSize",
    "SetDocumentBitStg",
    "OleLockRunning",
    "CoRegisterInitializeSpy",
    "CreateObjrefMoniker",
    "CoImpersonateClient",
    "CoGetProcessIdentifier",
    "OleCreateFromDataEx",
    "CoGetStdMarshalEx",
    "GetHGlobalFromStream",
    "UtGetDvtd32Info",
    "HICON_UserMarshal",
    "CreateBindCtx",
    "DoDragDrop",
    "StgOpenStorageOnHandle",
    "CoUnmarshalInterface",
    "ReadFmtUserTypeStg",
    "StgConvertVariantToProperty",
    "HBITMAP_UserMarshal",
    "SetConvertStg",
    "SNB_UserFree",
    "CoRetireServer",
    "GetConvertStg",
    "STGMEDIUM_UserMarshal",
    "PropVariantCopy",
    "ComPs_NdrDllUnregisterProxy",
    "GetHookInterface",
    "ComPs_CStdStubBuffer_DebugServerQueryInterface",
    "OleCreateDefaultHandler",
    "StgGetIFillLockBytesOnFile",
    "OleCreateLink",
    "CoGetClassVersion",
    "StgOpenStorageOnILockBytes",
    "CreateAntiMoniker",
    "HGLOBAL_UserUnmarshal",
    "CoGetInterceptor",
    "CoGetStandardMarshal",
    "WriteFmtUserTypeStg",
    "WriteStringStream",
    "OleDoAutoConvert",
    "CoFileTimeNow",
    "BindMoniker",
    "CoGetApartmentID",
    "ReadClassStm",
    "CoRegisterSurrogateEx",
    "OleConvertOLESTREAMToIStorage",
    "HACCEL_UserSize",
    "StgSetTimes",
    "CLIPFORMAT_UserFree",
    "ComPs_CStdStubBuffer_IsIIDSupported",
    "OleDraw",
    "IsValidInterface",
    "HBITMAP_UserFree",
    "OleCreateEmbeddingHelper",
    "ComPs_CStdStubBuffer_AddRef",
    "CoSetCancelObject",
    "OleCreateLinkFromDataEx",
    "CoCreateInstanceEx",
    "DllGetClassObject",
    "OleCreateLinkToFile",
    "OleInitialize",
    "IIDFromString",
    "CreateDataAdviseHolder",
    "UpdateDCOMSettings",
    "CreateClassMoniker",
    "OleConvertOLESTREAMToIStorageEx",
    "WriteOleStg",
    "OleSetClipboard",
    "CoAddRefServerProcess",
    "ReadOleStg",
    "HBRUSH_UserSize",
    "OleRegGetMiscStatus",
    "CreateDataCache",
    "CoUnloadingWOW",
    "HWND_UserSize",
    "CoGetObjectContext",
    "HMETAFILEPICT_UserFree",
    "CoGetCurrentLogicalThreadId",
    "CreateStreamOnHGlobal",
    "CoGetPSClsid",
    "ComPs_NdrCStdStubBuffer_Release",
    "STGMEDIUM_UserSize",
    "ComPs_NdrDllCanUnloadNow",
    "CoLockObjectExternal",
    "HMENU_UserUnmarshal",
    "ReleaseStgMedium",
    "OleSetMenuDescriptor",
    "UtGetDvtd16Info",
    "ComPs_NdrClientCall2_va",
    "CoCreateFreeThreadedMarshaler",
    "ComPs_IUnknown_AddRef_Proxy",
    "IsValidPtrOut",
    "STGMEDIUM_UserFree",
    "PropVariantChangeType",
    "HMETAFILEPICT_UserMarshal",
    "HMETAFILE_UserUnmarshal",
    "CreateItemMoniker",
    "ComPs_NdrDllRegisterProxy",
    "CoFreeUnusedLibrariesEx",
    "OleSaveToStream",
    "OleRegEnumVerbs",
    "OleIsCurrentClipboard",
    "OleGetClipboard",
    "CoGetDefaultContext",
    "CoIsOle1Class",
    "CoResumeClassObjects",
    "OleDestroyMenuDescriptor",
    "CLIPFORMAT_UserMarshal",
    "CoGetMarshalSizeMax",
    "CreateILockBytesOnHGlobal",
    "IsValidIid",
    "CoAllowSetForegroundWindow",
    "CoGetInterfaceAndReleaseStream",
    "CoRevokeInitializeSpy",
    "OleBuildVersion",
    "CoQueryProxyBlanket",
    "OpenOrCreateStream",
    "HENHMETAFILE_UserSize",
    "OleInitializeWOW",
    "CLIPFORMAT_UserSize",
    "HACCEL_UserFree",
    "WdtpInterfacePointer_UserUnmarshal",
    "CoSetState",
    "CoQueryClientBlanket",
    "CoInitializeWOW",
    "OleCreateMenuDescriptor",
    "HICON_UserFree",
    "StgCreateDocfile",
    "OleCreateFromFile",
    "HMENU_UserMarshal",
    "OleSetAutoConvert",
    "StgCreateDocfileOnILockBytes",
    "CoTaskMemFree",
    "CoUninitialize",
    "OleCreateStaticFromData",
    "OleLoad",
    "RegisterDragDrop",
    "CoTaskMemAlloc",
    "OleCreateLinkToFileEx",
    "CoFileTimeToDosDateTime",
    "UtConvertDvtd16toDvtd32",
    "CoTaskMemRealloc",
    "OleRegGetUserType",
    "OleRun",
    "HWND_UserMarshal",
    "ComPs_NdrDllGetClassObject",
    "CoFreeUnusedLibraries",
    "IsAccelerator",
    "StgIsStorageILockBytes",
    "FmtIdToPropStgName",
    "SNB_UserUnmarshal",
    "GetErrorInfo",
    "CoCreateInstance",
    "HDC_UserSize",
    "FreePropVariantArray",
    "OleCreateLinkFromData",
    "CoFreeLibrary",
    "HENHMETAFILE_UserMarshal",
    "HMETAFILE_UserFree",
    "HGLOBAL_UserFree",
    "HENHMETAFILE_UserFree",
    "CoReleaseMarshalData",
    "ComPs_NdrCStdStubBuffer2_Release",
    "GetHGlobalFromILockBytes",
    "HMETAFILEPICT_UserSize",
    "OleGetIconOfClass",
    "IsEqualGUID",
    "CoPopServiceDomain",
    "CoQueryAuthenticationServices",
    "HMETAFILE_UserMarshal",
    "WdtpInterfacePointer_UserMarshal",
    "OleLoadFromStream",
    "ComPs_IUnknown_QueryInterface_Proxy",
    "HBRUSH_UserFree",
    "HGLOBAL_UserMarshal",
    "UtConvertDvtd32toDvtd16",
    "StgGetIFillLockBytesOnILockBytes",
    "CoRegisterSurrogate",
    "OleTranslateAccelerator",
    "PropStgNameToFmtId",
    "CoCreateObjectInContext",
    "OleSetContainedObject",
    "CoCopyProxy",
    "CoDisableCallCancellation",
    "CLSIDFromProgID",
    "CoGetCurrentProcess",
    "HBRUSH_UserUnmarshal",
    "CreateFileMoniker",
    "WriteClassStm",
    "ComPs_CStdStubBuffer_Connect",
    "DcomChannelSetHResult",
    "CoCancelCall",
    "CoTreatAsClass",
    "CoGetState",
    "OleCreateFromFileEx",
    "CreateErrorInfo",
    "DllRegisterServer",
    "HACCEL_UserUnmarshal",
    "SetErrorInfo",
    "HPALETTE_UserSize",
    "HMENU_UserFree",
    "CoRegisterMessageFilter",
    "CoGetCallerTID",
    "CLIPFORMAT_UserUnmarshal",
    "CoGetTreatAsClass",
    "CoMarshalHresult",
    "HACCEL_UserMarshal",
    "OleGetAutoConvert",
    "WdtpInterfacePointer_UserFree",
    "OleGetIconOfFile",
    "PropSysAllocString",
    "DllDebugObjectRPCHook",
    "ComPs_CStdStubBuffer_Invoke",
    "HMENU_UserSize"
  ],
  "oleacc.dll": [
    "IID_IAccessible",
    "CreateStdAccessibleObject",
    "GetStateTextW",
    "LresultFromObject",
    "LIBID_Accessibility",
    "GetOleaccVersionInfo",
    "AccessibleObjectFromWindow",
    "AccessibleObjectFromEvent",
    "DllRegisterServer",
    "DllGetClassObject",
    "CreateStdAccessibleProxyW",
    "IID_IAccessibleHandler",
    "GetStateTextA",
    "AccessibleChildren",
    "ObjectFromLresult",
    "GetRoleTextA",
    "GetRoleTextW",
    "AccessibleObjectFromPoint",
    "DllCanUnloadNow",
    "CreateStdAccessibleProxyA",
    "WindowFromAccessibleObject",
    "DllUnregisterServer"
  ],
  "oleaccrc.dll": "No exports",
  "oleaut32.dll": [
    "VarUI2FromBool",
    "VarUI8FromDec",
    "SystemTimeToVariantTime",
    "VarUI1FromUI4",
    "VarUI8FromUI4",
    "SysFreeString",
    "VarR8FromStr",
    "OleLoadPicturePath",
    "DispInvoke",
    "SafeArraySetIID",
    "SafeArrayAllocDescriptorEx",
    "VarBstrFromI8",
    "LoadRegTypeLib",
    "VarUI8FromI1",
    "VarAdd",
    "VarUI4FromI8",
    "VarUI8FromCy",
    "VarUI8FromDisp",
    "VarDecDiv",
    "SafeArrayAllocDescriptor",
    "VariantTimeToDosDateTime",
    "VarDateFromR4",
    "VarBstrFromBool",
    "VarBstrFromUI8",
    "VarR8FromI2",
    "VarCyFromDate",
    "LoadTypeLib",
    "VarAnd",
    "VarCyFromR8",
    "SafeArrayCreateVectorEx",
    "VariantClear",
    "VarUI2FromI8",
    "VarUI2FromCy",
    "VarI2FromI4",
    "VarBstrFromCy",
    "VarI8FromR4",
    "VarI1FromStr",
    "CreateDispTypeInfo",
    "VarDecFromBool",
    "VarR4CmpR8",
    "VarDecFromR4",
    "VarI2FromR8",
    "VarCyMulI8",
    "VarTokenizeFormatString",
    "SafeArrayDestroyDescriptor",
    "VarR4FromDisp",
    "VarUI1FromDisp",
    "VarFormat",
    "RegisterTypeLibForUser",
    "SafeArrayGetUBound",
    "SysReAllocString",
    "VarUI1FromI8",
    "VarBstrFromUI4",
    "DispCallFunc",
    "VarEqv",
    "VarI2FromCy",
    "SafeArrayGetRecordInfo",
    "VarDecFromUI1",
    "VarR8FromDate",
    "VarR8Round",
    "VarR8FromUI8",
    "VarDecFromI4",
    "BSTR_UserFree",
    "VarBoolFromUI1",
    "LPSAFEARRAY_UserUnmarshal",
    "VarDateFromStr",
    "SafeArrayGetDim",
    "VarPow",
    "VarFormatDateTime",
    "VarUI1FromI4",
    "VariantTimeToSystemTime",
    "VARIANT_UserMarshal",
    "VarR8FromI8",
    "VarR4FromUI1",
    "VarI8FromDec",
    "LPSAFEARRAY_Marshal",
    "SafeArrayGetVartype",
    "GetVarConversionLocaleSetting",
    "VarR4FromR8",
    "VarUI8FromI8",
    "VarDecFromDate",
    "VarR8FromCy",
    "OleLoadPictureEx",
    "VarR8FromR4",
    "VarUI1FromUI2",
    "VarDecFromDisp",
    "VarBoolFromDec",
    "VarI4FromUI1",
    "SafeArrayCreateVector",
    "VarI4FromI1",
    "VarUI4FromUI2",
    "ClearCustData",
    "VarI4FromUI2",
    "VarDecAbs",
    "VarUI1FromStr",
    "BSTR_UserSize",
    "VarI8FromBool",
    "DispGetParam",
    "UnRegisterTypeLib",
    "VarR4FromStr",
    "VarOr",
    "VARIANT_UserFree",
    "VarCyFromDisp",
    "VarNeg",
    "VarDecFromStr",
    "VarI2FromUI8",
    "VarI2FromI1",
    "VarR8FromUI4",
    "VarDecFromUI2",
    "OleCreateFontIndirect",
    "VarBstrFromR4",
    "VarDateFromDec",
    "SafeArraySetRecordInfo",
    "VarBstrFromI4",
    "VarR4FromCy",
    "SafeArrayRedim",
    "VariantCopyInd",
    "VarBoolFromI1",
    "VarI2FromUI4",
    "VarBstrFromI1",
    "DllCanUnloadNow",
    "VarR8FromDec",
    "VarUI2FromUI4",
    "SysReAllocStringLen",
    "VarBoolFromDate",
    "VarUI2FromDec",
    "VarUI4FromI2",
    "VarFormatPercent",
    "OleLoadPicture",
    "VarDateFromUI8",
    "VariantChangeTypeEx",
    "BSTR_UserUnmarshal",
    "VariantInit",
    "VarBoolFromR4",
    "VarRound",
    "LPSAFEARRAY_UserFree",
    "VarUI2FromR8",
    "VarBstrCmp",
    "VarI8FromUI8",
    "VarBstrFromDate",
    "OleCreatePictureIndirect",
    "VarI1FromDate",
    "BstrFromVector",
    "VarI1FromBool",
    "VarDecFromI2",
    "VarI4FromCy",
    "VarI2FromR4",
    "VarI4FromDisp",
    "VarFormatCurrency",
    "VarDecCmpR8",
    "GetRecordInfoFromGuids",
    "VarUI8FromBool",
    "VarMul",
    "DllUnregisterServer",
    "VarI2FromStr",
    "VarUI2FromUI1",
    "VarDateFromUdate",
    "OleCreatePropertyFrameIndirect",
    "VarI4FromUI4",
    "VarNumFromParseNum",
    "VarI8FromUI4",
    "VarUI4FromR8",
    "VarR8FromI1",
    "VarR4FromDate",
    "VarBstrFromUI2",
    "VarBoolFromUI2",
    "VarBoolFromI2",
    "VectorFromBstr",
    "VarBstrFromI2",
    "VariantChangeType",
    "VarDecNeg",
    "SysStringLen",
    "VarUI1FromI2",
    "VarUI4FromI1",
    "VarUI1FromI1",
    "SafeArrayDestroy",
    "VarCyFromI2",
    "VarI8FromDate",
    "VarCyFromUI2",
    "VarMonthName",
    "VarDateFromBool",
    "GetActiveObject",
    "VarBoolFromUI4",
    "VarUI1FromBool",
    "VarCyFromI8",
    "SafeArrayAllocData",
    "VarUI8FromDate",
    "VarI8FromUI1",
    "VarI1FromR4",
    "OleLoadPictureFileEx",
    "BSTR_UserMarshal",
    "VarI4FromUI8",
    "SafeArrayPtrOfIndex",
    "VarUI8FromR8",
    "VarCat",
    "QueryPathOfRegTypeLib",
    "SysAllocStringByteLen",
    "VarI8FromDisp",
    "VarDateFromCy",
    "VarI8FromR8",
    "VarUI8FromI2",
    "SafeArrayUnaccessData",
    "VarCmp",
    "VarDateFromUI4",
    "VarUI4FromI4",
    "VarR4FromBool",
    "SafeArrayDestroyData",
    "SafeArrayGetLBound",
    "VarDateFromDisp",
    "VarUI1FromR4",
    "VarDecCmp",
    "VarI4FromBool",
    "RegisterActiveObject",
    "VarI8FromI2",
    "VarDecFromR8",
    "VarI1FromI2",
    "OleSavePictureFile",
    "VarUI4FromCy",
    "VarUI8FromR4",
    "VarUI4FromDec",
    "VarUdateFromDate",
    "VarDecFromI1",
    "VarR8FromBool",
    "VarUI2FromI2",
    "VarI8FromI1",
    "LPSAFEARRAY_Size",
    "VarI2FromUI2",
    "LPSAFEARRAY_UserSize",
    "VarDecSub",
    "DllGetClassObject",
    "VarCyFromR4",
    "VarSub",
    "VarUI2FromR4",
    "VarCyFromI1",
    "SafeArrayCreateEx",
    "VarR4FromUI4",
    "VarI1FromUI2",
    "VarBoolFromDisp",
    "VarI8FromCy",
    "OleCreatePropertyFrame",
    "VarR8Pow",
    "VarI1FromUI4",
    "VarCyFromI4",
    "VarCyFromUI8",
    "VarR8FromDisp",
    "VarUI4FromUI1",
    "VarFormatNumber",
    "SetOaNoCache",
    "VarI8FromUI2",
    "VarI2FromBool",
    "VarI2FromDate",
    "VarI4FromR4",
    "VarDateFromUI1",
    "VarR4FromI2",
    "GetRecordInfoFromTypeInfo",
    "VarI2FromUI1",
    "SafeArrayUnlock",
    "VarDecFromUI4",
    "VarUI4FromDisp",
    "VARIANT_UserUnmarshal",
    "VarI1FromDisp",
    "VarAbs",
    "VarCyCmpR8",
    "OaBuildVersion",
    "VarUI2FromDisp",
    "SafeArrayGetIID",
    "VarCyMul",
    "CreateTypeLib",
    "RevokeActiveObject",
    "VariantCopy",
    "VarDateFromR8",
    "SafeArrayCopy",
    "VarR4FromUI2",
    "VarXor",
    "SafeArrayGetElemsize",
    "VarImp",
    "VarCyFix",
    "VarWeekdayName",
    "VarBstrFromDisp",
    "VarDateFromUI2",
    "VarBstrFromR8",
    "VarUI8FromUI2",
    "VarCyFromStr",
    "VarUI2FromDate",
    "VarDiv",
    "SafeArrayPutElement",
    "VarI4FromDate",
    "SafeArrayAccessData",
    "CreateStdDispatch",
    "VarUI8FromStr",
    "SetVarConversionLocaleSetting",
    "LHashValOfNameSys",
    "VarBoolFromR8",
    "DosDateTimeToVariantTime",
    "VarCyRound",
    "VarDateFromUdateEx",
    "VarUI2FromI4",
    "VarI1FromUI8",
    "OleIconToCursor",
    "VarI4FromI2",
    "LoadTypeLibEx",
    "VarCyCmp",
    "VarI2FromDisp",
    "VarParseNumFromStr",
    "VarR4FromUI8",
    "VarR8FromUI1",
    "VarDecMul",
    "VarCyAdd",
    "VarFix",
    "VarI8FromStr",
    "VarUI8FromUI1",
    "VarI2FromDec",
    "SafeArrayLock",
    "VarDecFromCy",
    "VarUI1FromDate",
    "VarR8FromI4",
    "SysAllocString",
    "VarNot",
    "VarR4FromDec",
    "VarUI4FromR4",
    "OACreateTypeLib2",
    "VarI1FromUI1",
    "VarBoolFromCy",
    "VarUI4FromBool",
    "VarCyMulI4",
    "VarFormatFromTokens",
    "VarCySub",
    "VarUI2FromStr",
    "OleTranslateColor",
    "DispGetIDsOfNames",
    "SafeArrayCopyData",
    "VarBoolFromI8",
    "GetErrorInfo",
    "VarUI4FromUI8",
    "UnRegisterTypeLibForUser",
    "SafeArrayCreate",
    "VarDecFromUI8",
    "VarI1FromDec",
    "VarCyFromUI1",
    "VarI1FromI8",
    "VarMod",
    "VarDecFromI8",
    "VarDecRound",
    "VarI4FromI8",
    "VarUI4FromStr",
    "VarI1FromI4",
    "VarR8FromUI2",
    "VarDecAdd",
    "VarI4FromStr",
    "VarCyFromUI4",
    "VarDateFromI4",
    "VarBstrFromUI1",
    "VarBoolFromI4",
    "VarDateFromI8",
    "VarDecInt",
    "VarUI2FromUI8",
    "SysAllocStringLen",
    "VARIANT_UserSize",
    "VarR4FromI1",
    "VarBstrCat",
    "VarIdiv",
    "GetAltMonthNames",
    "VarCyAbs",
    "VarDecFix",
    "VarInt",
    "VarUI4FromDate",
    "VarDateFromI2",
    "VarCyFromDec",
    "VarI4FromDec",
    "OleLoadPictureFile",
    "VarCyNeg",
    "VarUI2FromI1",
    "VarBoolFromStr",
    "VarI2FromI8",
    "LPSAFEARRAY_UserMarshal",
    "SysStringByteLen",
    "VarR4FromI8",
    "VarI1FromCy",
    "VarUI1FromR8",
    "CreateErrorInfo",
    "DllRegisterServer",
    "SetErrorInfo",
    "VarCyFromBool",
    "LHashValOfNameSysA",
    "LPSAFEARRAY_Unmarshal",
    "RegisterTypeLib",
    "VarUI1FromUI8",
    "VarDateFromI1",
    "VarBoolFromUI8",
    "VarCyInt",
    "VarI4FromR8",
    "VarBstrFromDec",
    "VarUI1FromDec",
    "VarUI1FromCy",
    "SafeArrayGetElement",
    "CreateTypeLib2",
    "VarI1FromR8",
    "VarR4FromI4"
  ],
  "olecli32.dll": [
    "GenQueryBounds",
    "OleRename",
    "LeEqual",
    "GetTaskVisibleWindow",
    "MfSaveToStream",
    "PbGetData",
    "OleQueryReleaseError",
    "PbCopyToClipboard",
    "OleCreateLinkFromClip",
    "MfDraw",
    "BmClone",
    "DibClone",
    "MfCallbackFunc",
    "LeActivate",
    "OleCreateFromTemplate",
    "LeSetUpdateOptions",
    "BmQueryBounds",
    "OleRevertClientDoc",
    "OleRevokeClientDoc",
    "LeRelease",
    "DocWndProc",
    "OleRelease",
    "LeChangeData",
    "MfRelease",
    "LeUpdate",
    "OleClone",
    "LeObjectLong",
    "LeSaveToStream",
    "OleQueryBounds",
    "ConnectDlgProc",
    "OleCreateFromFile",
    "ErrGetUpdateOptions",
    "GenChangeData",
    "OleQueryOpen",
    "WEP",
    "ErrQueryProtocol",
    "PbCreateInvisible",
    "DibRelease",
    "LeCreateInvisible",
    "OleQueryProtocol",
    "LeReconnect",
    "OleActivate",
    "DibQueryBounds",
    "OleQueryReleaseMethod",
    "DibEnumFormat",
    "OleObjectConvert",
    "DibEqual",
    "PbCreateFromTemplate",
    "PbCreateLinkFromFile",
    "ErrQueryOutOfDate",
    "GenEnumFormat",
    "LeQueryType",
    "PbCreateLinkFromClip",
    "OleRegisterClientDoc",
    "OleCreateInvisible",
    "OleCopyFromLink",
    "DibGetData",
    "OleSetLinkUpdateOptions",
    "OleEnumObjects",
    "DefCreateInvisible",
    "ErrQueryOpen",
    "MfEqual",
    "LeSetBounds",
    "OleQueryType",
    "GenRelease",
    "PbCreateFromFile",
    "OleQuerySize",
    "OleQueryLinkFromClip",
    "ErrClose",
    "ErrReconnect",
    "LeClone",
    "OleDraw",
    "OleGetLinkUpdateOptions",
    "OleQueryName",
    "OleUnlockServer",
    "ErrSetBounds",
    "OleCreate",
    "MfCopy",
    "LeObjectConvert",
    "SetNextNetDrive",
    "DefCreateFromClip",
    "GenGetData",
    "PbCreateFromClip",
    "LeCopyFromLink",
    "SetNetName",
    "MfChangeData",
    "OleUpdate",
    "ObjQueryType",
    "GenDraw",
    "ErrActivate",
    "BmDraw",
    "LeQueryOpen",
    "LeQueryBounds",
    "DibChangeData",
    "MfClone",
    "LeQueryProtocol",
    "GenSaveToStream",
    "LeCopy",
    "DibCopy",
    "PbDraw",
    "LeShow",
    "MfEnumFormat",
    "OleClose",
    "OleReconnect",
    "MfQueryBounds",
    "GenCopy",
    "ErrObjectLong",
    "ErrSetUpdateOptions",
    "LeSetData",
    "PbQueryBounds",
    "OleRequestData",
    "DefCreateFromTemplate",
    "DefCreateLinkFromClip",
    "OleLoadFromStream",
    "OleCopyToClipboard",
    "LeExecute",
    "DibSaveToStream",
    "PbEnumFormats",
    "OleRenameClientDoc",
    "LeClose",
    "DefCreateLinkFromFile",
    "OleSetBounds",
    "ErrSetData",
    "LeSetHostNames",
    "ErrUpdate",
    "OleCreateFromClip",
    "OleEqual",
    "OleEnumFormats",
    "OleGetData",
    "BmCopy",
    "LeDraw",
    "OleExecute",
    "OleSavedClientDoc",
    "BmEqual",
    "CheckNetDrive",
    "LeGetUpdateOptions",
    "ObjQuerySize",
    "OleIsDcMeta",
    "GenClone",
    "ErrExecute",
    "OleSetColorScheme",
    "DefLoadFromStream",
    "OleQueryReleaseStatus",
    "OleCreateLinkFromFile",
    "DefCreate",
    "ErrObjectConvert",
    "PbLoadFromStream",
    "OleQueryCreateFromClip",
    "BmSaveToStream",
    "OleLockServer",
    "BmGetData",
    "OleQueryClientVersion",
    "GenSetData",
    "OleSaveToStream",
    "BmRelease",
    "OleQueryOutOfDate",
    "DibDraw",
    "GenEqual",
    "LeGetData",
    "OleSetData",
    "ErrShow",
    "LeQueryOutOfDate",
    "ObjRename",
    "OleDelete",
    "LeEnumFormat",
    "LeSetTargetDevice",
    "OleSetHostNames",
    "ErrCopyFromLink",
    "BmChangeData",
    "DefCreateFromFile",
    "SrvrWndProc",
    "BmEnumFormat",
    "OleSetTargetDevice",
    "MfGetData",
    "ErrSetTargetDevice",
    "PbCreate",
    "ErrSetHostNames",
    "ObjQueryName"
  ],
  "olecnv32.dll": [
    "QD2GDI"
  ],
  "oledlg.dll": [
    "OleUIUpdateLinksW",
    "OleUICanConvertOrActivateAs",
    "OleUIInsertObjectW",
    "OleUIEditLinksA",
    "OleUIChangeIconW",
    "OleUIChangeSourceA",
    "OleUIUpdateLinksA",
    "OleUIConvertA",
    "OleUIPasteSpecialW",
    "OleUIObjectPropertiesW",
    "OleUIEditLinksW",
    "OleUIChangeSourceW",
    "OleUIPromptUserW",
    "OleUIConvertW",
    "OleUIBusyA",
    "OleUIPromptUserA",
    "OleUIObjectPropertiesA",
    "OleUIAddVerbMenuA",
    "OleUIChangeIconA",
    "OleUIAddVerbMenuW",
    "OleUIPasteSpecialA",
    "OleUIInsertObjectA",
    "OleUIBusyW"
  ],
  "oleprn.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "olepro32.dll": [
    "OleLoadPicture",
    "OleCreateFontIndirect",
    "OleCreatePropertyFrameIndirect",
    "DllCanUnloadNow",
    "DllRegisterServer",
    "OleCreatePictureIndirect",
    "DllGetClassObject",
    "OleIconToCursor",
    "OleTranslateColor",
    "DllUnregisterServer",
    "OleCreatePropertyFrame"
  ],
  "olesvr32.dll": [
    "TerminateDocClients",
    "OleRevertServerDoc",
    "OleBlockServer",
    "OleRegisterServer",
    "OleSavedServerDoc",
    "DeleteClientInfo",
    "DocWndProc",
    "ItemWndProc",
    "OleUnblockServer",
    "OleRenameServerDoc",
    "OleRevokeServerDoc",
    "EnumForTerminate",
    "OleQueryServerVersion",
    "OleRevokeServer",
    "WEP",
    "OleRevokeObject",
    "SendDataMsg",
    "OleRegisterServerDoc",
    "FindItemWnd",
    "TerminateClients",
    "ItemCallBack",
    "SrvrWndProc",
    "SendRenameMsg"
  ],
  "olethk32.dll": [
    "TransformHRESULT_3216",
    "ThkAddAppCompatFlag",
    "ConvertObjDescriptor",
    "ConvertHr3216Thunk",
    "IntOpInitialize",
    "ThkMgrUninitialize",
    "IUnknownObj32",
    "CSm16ReleaseHandler_Release32",
    "CallbackProcessing_3216",
    "TransformHRESULT_1632",
    "InvokeOn32",
    "IntOpUninitialize",
    "ConvertHr1632Thunk",
    "ThkMgrInitialize"
  ],
  "onex.dll": [
    "OneXCreateDefaultProfile",
    "OneXCreateDiscoveryProfiles",
    "OneXStartAuthentication",
    "OneXFreeMemory",
    "OneXRestartReasonCodeToString",
    "OneXReasonCodeToString",
    "OneXSetAuthParams",
    "OneXGetUserFriendlyText",
    "OneXInitialize",
    "OneXQueryStatistics",
    "OneXAddTLV",
    "OneXQueryPendingUIRequest",
    "OneXCopyAuthParams",
    "OneXSetRuntimeState",
    "OneXDestroySupplicantPort",
    "OneXCompareAuthParams",
    "OneXCreateSupplicantPort",
    "OneXStopAuthentication",
    "OneXAddEapAttributes",
    "OneXQueryAuthParams",
    "OneXQueryState",
    "OneXFreeAuthParams",
    "OneXIndicatePacket",
    "OneXDeInitialize",
    "OneXUpdatePortProfile",
    "OneXShowUI",
    "OneXUpdateProfilePostDiscovery",
    "OneXUIResponse",
    "OneXIndicateSessionChange",
    "OneXForceAuthenticatedState"
  ],
  "opengl32.dll": [
    "glVertex2f",
    "glGetLightiv",
    "glVertex2d",
    "wglDescribePixelFormat",
    "glMapGrid1f",
    "glFogf",
    "glTranslatef",
    "glGetPixelMapusv",
    "wglCreateContext",
    "glGetLightfv",
    "glClearColor",
    "glPopClientAttrib",
    "glInterleavedArrays",
    "glMap1d",
    "glFogfv",
    "glTexEnvi",
    "glGetFloatv",
    "glTexCoord4sv",
    "glTexCoord4iv",
    "glTexCoord4f",
    "wglCreateLayerContext",
    "glPixelStorei",
    "glVertex2dv",
    "glColor3ui",
    "glVertex4s",
    "glIsList",
    "glGetTexParameteriv",
    "glVertexPointer",
    "glRasterPos4f",
    "wglUseFontBitmapsW",
    "glColor4dv",
    "glDrawElements",
    "glIndexdv",
    "glRects",
    "glPrioritizeTextures",
    "glColor3fv",
    "glDrawBuffer",
    "glEvalCoord2d",
    "glIndexi",
    "glDepthRange",
    "wglGetPixelFormat",
    "glColor4uiv",
    "glPushName",
    "glTexCoord3dv",
    "glDisable",
    "glNormalPointer",
    "glGetMaterialiv",
    "glLoadName",
    "glColor3bv",
    "glColor4usv",
    "glEnd",
    "glTexCoord3iv",
    "glVertex2fv",
    "glLoadMatrixd",
    "wglGetDefaultProcAddress",
    "GlmfInitPlayback",
    "glRotated",
    "glScaled",
    "glVertex3fv",
    "glNormal3bv",
    "wglUseFontBitmapsA",
    "wglMakeCurrent",
    "glEnable",
    "glRasterPos4dv",
    "glClear",
    "glLightiv",
    "glPixelMapfv",
    "glRasterPos3s",
    "glTexEnvf",
    "glColorMaterial",
    "glTexEnviv",
    "glTexGeni",
    "glColor4iv",
    "glTexSubImage1D",
    "glTexCoord1f",
    "wglRealizeLayerPalette",
    "glVertex4dv",
    "glDrawPixels",
    "glInitNames",
    "wglSetPixelFormat",
    "glDebugEntry",
    "wglGetProcAddress",
    "glRasterPos2s",
    "glTexCoord1fv",
    "glMapGrid2d",
    "glBitmap",
    "glDeleteTextures",
    "glColor4ubv",
    "glAreTexturesResident",
    "glEvalCoord2f",
    "glPushAttrib",
    "wglSetLayerPaletteEntries",
    "glColorMask",
    "glEdgeFlagv",
    "glIsTexture",
    "glColor4d",
    "glTexCoord3sv",
    "glMaterialfv",
    "glMaterialiv",
    "glTexCoord3s",
    "glPixelMapuiv",
    "glRasterPos3iv",
    "glFogi",
    "glIndexs",
    "glMaterialf",
    "glVertex3sv",
    "wglDescribeLayerPlane",
    "glNormal3sv",
    "glVertex2i",
    "glRasterPos4i",
    "glCopyTexImage1D",
    "wglGetLayerPaletteEntries",
    "glVertex4iv",
    "glViewport",
    "glCopyPixels",
    "glEvalPoint2",
    "glColor4sv",
    "glVertex3i",
    "glBindTexture",
    "glGetString",
    "glColor4ub",
    "glMatrixMode",
    "glTexGendv",
    "wglUseFontOutlinesA",
    "glLightModeli",
    "glTexCoord3d",
    "glClearStencil",
    "glMateriali",
    "glNormal3fv",
    "glCallList",
    "glNormal3b",
    "glTexParameterf",
    "glLightModelfv",
    "glVertex2sv",
    "glPopAttrib",
    "glVertex2s",
    "glNormal3iv",
    "glRasterPos2iv",
    "glGetTexGendv",
    "GlmfPlayGlsRecord",
    "glPointSize",
    "glGetPointerv",
    "glLightModelf",
    "glMap2d",
    "glPixelTransferi",
    "glTexParameteri",
    "glIndexubv",
    "glFeedbackBuffer",
    "glGetTexGeniv",
    "glGetTexLevelParameterfv",
    "wglDeleteContext",
    "glArrayElement",
    "glDeleteLists",
    "glColor4s",
    "glListBase",
    "glTexCoord2sv",
    "glColor4fv",
    "glDrawArrays",
    "glPopMatrix",
    "glEvalMesh2",
    "glColor3i",
    "glRasterPos3fv",
    "glNormal3d",
    "glRenderMode",
    "glShadeModel",
    "glColor4us",
    "glEdgeFlag",
    "glColor3uiv",
    "glTexEnvfv",
    "glIndexd",
    "glFrustum",
    "glRasterPos4iv",
    "glEvalMesh1",
    "glIndexfv",
    "wglSwapBuffers",
    "glRasterPos3sv",
    "glLoadMatrixf",
    "glGetMaterialfv",
    "glVertex3dv",
    "glGetTexEnviv",
    "glTexCoord3fv",
    "glGetMapiv",
    "glGetClipPlane",
    "wglSwapLayerBuffers",
    "glTranslated",
    "glRasterPos2d",
    "glVertex4d",
    "glIndexub",
    "wglCopyContext",
    "glAlphaFunc",
    "glTexCoord2f",
    "glLogicOp",
    "glEvalCoord1d",
    "glDepthFunc",
    "wglGetCurrentContext",
    "glScissor",
    "glVertex4i",
    "glMap2f",
    "glStencilMask",
    "glReadPixels",
    "glTexParameterfv",
    "glEvalCoord1dv",
    "glVertex4f",
    "glIndexiv",
    "glHint",
    "glIsEnabled",
    "glOrtho",
    "glNormal3i",
    "glColor3f",
    "glTexCoord4dv",
    "glTexCoord1sv",
    "glTexCoord1s",
    "glMultMatrixf",
    "glColor3dv",
    "glRectsv",
    "glTexCoord1dv",
    "glNormal3dv",
    "glTexCoord4fv",
    "glColor3s",
    "glGetMapdv",
    "glVertex3f",
    "glColor4bv",
    "glLightfv",
    "wglChoosePixelFormat",
    "glGetBooleanv",
    "glTexGeniv",
    "glGetTexGenfv",
    "glMapGrid2f",
    "glEndList",
    "glLineStipple",
    "glIndexMask",
    "glColorPointer",
    "glGetTexLevelParameteriv",
    "glRectf",
    "wglShareLists",
    "glVertex3s",
    "glEvalCoord2fv",
    "glTexGend",
    "glColor3sv",
    "glColor3us",
    "glNormal3f",
    "glClearIndex",
    "glTexSubImage2D",
    "wglUseFontOutlinesW",
    "glColor3iv",
    "glRasterPos3f",
    "wglSwapMultipleBuffers",
    "glDepthMask",
    "glTexCoord4i",
    "glRectiv",
    "glTexCoord2i",
    "glTexGenfv",
    "glColor4ui",
    "glColor3usv",
    "glColor3b",
    "glBlendFunc",
    "glEnableClientState",
    "glSelectBuffer",
    "glFlush",
    "glClipPlane",
    "glGetPixelMapfv",
    "GlmfCloseMetaFile",
    "wglGetCurrentDC",
    "glPushMatrix",
    "glColor3ubv",
    "glTexGenf",
    "glScalef",
    "glCullFace",
    "glPixelMapusv",
    "glMap1f",
    "glRectd",
    "glEvalCoord1fv",
    "glPopName",
    "glEvalPoint1",
    "glRasterPos4d",
    "glRasterPos2dv",
    "glGetPolygonStipple",
    "glTexCoord1iv",
    "glColor3d",
    "glGenTextures",
    "glGenLists",
    "glColor3ub",
    "glTexCoord2fv",
    "glRasterPos4fv",
    "GlmfEndPlayback",
    "glPixelZoom",
    "glEdgeFlagPointer",
    "glGetDoublev",
    "glTexCoord2dv",
    "glTexCoord4s",
    "glPushClientAttrib",
    "glLightModeliv",
    "glGetPixelMapuiv",
    "glGetError",
    "glColor4i",
    "GlmfBeginGlsBlock",
    "glIndexf",
    "glDisableClientState",
    "glGetTexParameterfv",
    "glGetTexEnvfv",
    "glLighti",
    "glCopyTexSubImage2D",
    "glLineWidth",
    "glRasterPos2sv",
    "glNormal3s",
    "glTexCoord2iv",
    "glTexCoord3i",
    "glPolygonMode",
    "glRasterPos3d",
    "glCopyTexImage2D",
    "glColor4b",
    "glStencilFunc",
    "glTexImage1D",
    "glBegin",
    "glPolygonStipple",
    "glTexCoord2s",
    "glRectfv",
    "glMapGrid1d",
    "glRasterPos4s",
    "glVertex3iv",
    "glEvalCoord1f",
    "glPixelStoref",
    "glTexParameteriv",
    "glGetMapfv",
    "glTexImage2D",
    "glTexCoord4d",
    "glRasterPos3dv",
    "glRecti",
    "GlmfEndGlsBlock",
    "glAccum",
    "glGetTexImage",
    "glStencilOp",
    "glClearAccum",
    "glNewList",
    "glFrontFace",
    "glCopyTexSubImage1D",
    "glTexCoord3f",
    "glIndexsv",
    "glLoadIdentity",
    "glRasterPos2i",
    "glReadBuffer",
    "glTexCoord2d",
    "glTexCoord1d",
    "glRotatef",
    "glRectdv",
    "glFogiv",
    "glVertex2iv",
    "glFinish",
    "glCallLists",
    "glLightf",
    "glGetIntegerv",
    "glRasterPos2fv",
    "glColor4f",
    "glTexCoord1i",
    "glPolygonOffset",
    "glIndexPointer",
    "glEvalCoord2dv",
    "glVertex4sv",
    "glPixelTransferf",
    "glRasterPos2f",
    "glRasterPos3i",
    "glTexCoordPointer",
    "glRasterPos4sv",
    "glVertex3d",
    "glVertex4fv",
    "glMultMatrixd",
    "glClearDepth",
    "glPassThrough"
  ],
  "osuninst.dll": [
    "GetUninstallImageSize",
    "ExecuteUninstall",
    "ProvideUiAlerts",
    "IsUninstallImageValid",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "RemoveUninstallImage",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "p2p.dll": [
    "PeerIdentityGetXML",
    "PeerPnrpStartup",
    "PeerGroupEnumConnections",
    "PeerGroupAddRecord",
    "PeerGroupRegisterEvent",
    "PeerGroupCloseDirectConnection",
    "PeerGroupGetStatus",
    "PeerEndEnumeration",
    "PeerGroupConnect",
    "PeerGroupGetRecord",
    "PeerGroupDeleteRecord",
    "PeerIdentityGetCert",
    "DllMain",
    "PeerGroupParseInvitation",
    "PeerPnrpGetCloudInfo",
    "PeerFreeData",
    "PeerGroupIssueCredentials",
    "PeerIdentityGetDefault",
    "PeerGroupClose",
    "PeerNameToPeerHostName",
    "PeerIdentityGetCryptKey",
    "PeerGroupGetProperties",
    "PeerGroupEnumRecords",
    "PeerPnrpResolve",
    "PeerGroupUpdateRecord",
    "PeerGroupStartup",
    "PeerGroupSearchRecords",
    "PeerGroupShutdown",
    "PeerPnrpShutdown",
    "PeerEnumGroups",
    "PeerGroupImportDatabase",
    "PeerIdentityDelete",
    "PeerGroupPeerTimeToUniversalTime",
    "PeerHostNameToPeerName",
    "PeerIdentityGetFriendlyName",
    "PeerPnrpEndResolve",
    "PeerGroupSetProperties",
    "PeerEnumIdentities",
    "PeerGroupSendData",
    "PeerGroupCreate",
    "PeerGroupExportDatabase",
    "PeerIdentityExport",
    "PeerGroupExportConfig",
    "PeerIdentityImport",
    "PeerGetNextItem",
    "PeerUpgradeNetPackToSp2",
    "PeerGroupCreateInvitation",
    "PeerGroupOpenDirectConnection",
    "PeerPnrpStartResolve",
    "PeerGroupEnumMembers",
    "PeerGroupDelete",
    "PeerIdentityCreate",
    "PeerGroupJoin",
    "PeerIdentitySetFriendlyName",
    "PeerPnrpRegister",
    "PeerPnrpUpdateRegistration",
    "PeerGroupImportConfig",
    "PeerCreatePeerName",
    "PeerGroupOpen",
    "PeerGroupUniversalTimeToPeerTime",
    "PeerGroupGetEventData",
    "PeerPnrpGetEndpoint",
    "PeerPnrpUnregister",
    "DllInstall",
    "PeerGetItemCount",
    "PeerGroupUnregisterEvent"
  ],
  "p2pgasvc.dll": [
    "SVCServiceMain"
  ],
  "p2pgraph.dll": [
    "PeerGraphDeleteRecord",
    "PeerGraphPeerTimeToUniversalTime",
    "PeerGraphUniversalTimeToPeerTime",
    "PeerGraphFreeData",
    "PeerGraphGetProperties",
    "PeerGraphCreate",
    "PeerGraphStartup",
    "DllMain",
    "PeerGraphEnumRecords",
    "PeerGraphRegisterEvent",
    "PeerGraphOpen",
    "PeerGraphConnect",
    "PeerGraphGetEventData",
    "PeerGraphDelete",
    "PeerGraphListen",
    "PeerGraphGetRecord",
    "PeerGraphUpdateRecord",
    "PeerGraphClose",
    "PeerGraphGetNodeInfo",
    "PeerGraphSendData",
    "PeerGraphShutdown",
    "PeerGraphSetProperties",
    "PeerGraphCloseDirectConnection",
    "PeerGraphSetPresence",
    "pMemoryHelper",
    "PeerGraphImportDatabase",
    "PeerGraphUnregisterEvent",
    "PeerGraphOpenDirectConnection",
    "PeerGraphGetItemCount",
    "PeerGraphEnumConnections",
    "PeerGraphGetNextItem",
    "PeerGraphAddRecord",
    "PeerGraphEndEnumeration",
    "PeerGraphValidateDeferredRecords",
    "PeerGraphExportDatabase",
    "PeerGraphSearchRecords",
    "PeerGraphSetNodeAttributes",
    "PeerGraphGetStatus",
    "PeerGraphEnumNodes"
  ],
  "p2pnetsh.dll": [
    "DllMain",
    "InitHelperDll",
    "GetResourceString"
  ],
  "p2psvc.dll": [
    "GroupServiceMain",
    "IMServiceMain",
    "SVCServiceMain",
    "InitSecurityInterfaceW"
  ],
  "panmap.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "pautoenr.dll": [
    "CertAutoEnrollment",
    "CertAutoRemove",
    "ProvAutoEnrollment"
  ],
  "pdh.dll": [
    "PdhVbAddCounter",
    "PdhiPlaFormatBlanksW",
    "PdhiPla2003SP1Installed",
    "PdhCreateSQLTablesW",
    "PdhPlaAddItemW",
    "PdhPlaStartW",
    "PdhGetRawCounterValue",
    "PdhGetDefaultPerfObjectA",
    "PdhPlaSetInfoA",
    "PdhPlaValidateInfoA",
    "PdhOpenLogA",
    "PdhLogServiceCommandA",
    "PdhGetDefaultPerfCounterHA",
    "PdhiPlaGetVersion",
    "PdhLookupPerfIndexByNameA",
    "PdhParseCounterPathA",
    "PdhConnectMachineW",
    "PdhValidatePathA",
    "PdhPlaSetItemListA",
    "PdhGetLogFileSize",
    "PdhOpenQueryH",
    "PdhGetFormattedCounterValue",
    "PdhEnumLogSetNamesA",
    "PdhMakeCounterPathA",
    "PdhOpenQueryW",
    "PdhGetCounterInfoW",
    "PdhEnumObjectsHW",
    "PdhGetLogFileTypeA",
    "PdhFormatFromRawValue",
    "PdhLookupPerfIndexByNameW",
    "PdhBrowseCountersHW",
    "PdhAddCounterA",
    "PdhPlaSetInfoW",
    "PdhGetDllVersion",
    "PdhComputeCounterStatistics",
    "PdhAddCounterW",
    "PdhGetLogSetGUID",
    "PdhGetDefaultPerfObjectHA",
    "PdhiPlaSetRunAs",
    "PdhSetCounterScaleFactor",
    "PdhPlaGetScheduleW",
    "PdhPlaDeleteW",
    "PdhUpdateLogFileCatalog",
    "PdhUpdateLogA",
    "PdhVbGetDoubleCounterValue",
    "PdhExpandCounterPathA",
    "PdhPlaScheduleA",
    "PdhTranslate009CounterW",
    "PdhVbGetLogFileSize",
    "PdhLogServiceControlA",
    "PdhGetCounterInfoA",
    "PdhLookupPerfNameByIndexW",
    "PdhGetCounterTimeBase",
    "PdhAdd009CounterA",
    "PdhVbOpenLog",
    "PdhBrowseCountersHA",
    "PdhGetDefaultPerfCounterW",
    "PdhPlaEnumCollectionsW",
    "PdhVbGetOneCounterPath",
    "PdhTranslate009CounterA",
    "PdhListLogFileHeaderA",
    "PdhGetDefaultPerfObjectHW",
    "PdhExpandWildCardPathW",
    "PdhBindInputDataSourceA",
    "PdhVbOpenQuery",
    "PdhCalculateCounterFromRawValue",
    "PdhExpandWildCardPathHA",
    "PdhPlaCreateA",
    "PdhExpandCounterPathW",
    "PdhGetDefaultPerfObjectW",
    "PdhReadRawLogRecord",
    "PdhSetQueryTimeRange",
    "PdhEnumObjectItemsA",
    "PdhPlaRemoveAllItemsW",
    "PdhLogServiceCommandW",
    "PdhGetDataSourceTimeRangeA",
    "PdhSetDefaultRealTimeDataSource",
    "PdhCloseQuery",
    "PdhPlaDeleteA",
    "PdhRemoveCounter",
    "PdhLookupPerfNameByIndexA",
    "PdhPlaGetLogFileNameW",
    "PdhPlaGetScheduleA",
    "PdhPlaStartA",
    "PdhSelectDataSourceA",
    "PdhListLogFileHeaderW",
    "PdhVbGetCounterPathFromList",
    "PdhVbGetCounterPathElements",
    "PdhCollectQueryData",
    "PdhGetDefaultPerfCounterHW",
    "PdhParseInstanceNameA",
    "PdhPlaStopW",
    "PdhEnumMachinesHW",
    "PdhLogServiceControlW",
    "PdhExpandWildCardPathA",
    "PdhVbIsGoodStatus",
    "PdhPlaSetRunAsA",
    "PdhPlaRemoveAllItemsA",
    "PdhGetRawCounterArrayW",
    "PdhPlaGetInfoA",
    "PdhTranslateLocaleCounterA",
    "PdhEnumObjectsA",
    "PdhGetDefaultPerfCounterA",
    "PdhGetFormattedCounterArrayA",
    "PdhExpandWildCardPathHW",
    "PdhCreateSQLTablesA",
    "PdhSelectDataSourceW",
    "PdhEnumMachinesHA",
    "PdhPlaValidateInfoW",
    "PdhOpenLogW",
    "PdhCloseLog",
    "PdhPlaSetItemListW",
    "PdhPlaAddItemA",
    "PdhParseCounterPathW",
    "PdhGetDataSourceTimeRangeW",
    "PdhEnumObjectItemsW",
    "PdhEnumMachinesW",
    "PdhBindInputDataSourceW",
    "PdhGetRawCounterArrayA",
    "PdhPlaCreateW",
    "PdhGetLogFileTypeW",
    "PdhOpenQuery",
    "PdhCollectQueryDataEx",
    "PdhPlaGetLogFileNameA",
    "PdhEnumLogSetNamesW",
    "PdhVerifySQLDBW",
    "PdhEnumObjectsW",
    "PdhEnumObjectsHA",
    "PdhConnectMachineA",
    "PdhOpenQueryA",
    "PdhBrowseCountersA",
    "PdhEnumObjectItemsHA",
    "PdhParseInstanceNameW",
    "PdhiPlaFormatBlanksA",
    "PdhRelogA",
    "PdhVerifySQLDBA",
    "PdhRelogW",
    "PdhValidatePathW",
    "PdhEnumObjectItemsHW",
    "PdhVbCreateCounterPathList",
    "PdhPlaGetInfoW",
    "PdhGetDataSourceTimeRangeH",
    "PdhPlaSetRunAsW",
    "PdhiPlaRunAs",
    "PdhPlaEnumCollectionsA",
    "PdhMakeCounterPathW",
    "PdhSetLogSetRunID",
    "PdhAdd009CounterW",
    "PdhPlaStopA",
    "PdhIsRealTimeQuery",
    "PdhUpdateLogW",
    "PdhTranslateLocaleCounterW",
    "PdhGetFormattedCounterArrayW",
    "PdhVbUpdateLog",
    "PdhPlaScheduleW",
    "PlaTimeInfoToMilliSeconds",
    "PdhEnumMachinesA",
    "PdhBrowseCountersW"
  ],
  "perfctrs.dll": [
    "CloseIPXPerformanceData",
    "CollectNWNBPerformanceData",
    "CloseTcpIpPerformanceData",
    "CollectTcpIpPerformanceData",
    "CloseNWNBPerformanceData",
    "CloseSPXPerformanceData",
    "CollectIPXPerformanceData",
    "OpenSPXPerformanceData",
    "CollectNbfPerformanceData",
    "OpenNbfPerformanceData",
    "OpenTcpIpPerformanceData",
    "OpenIPXPerformanceData",
    "CloseDhcpPerformanceData",
    "OpenDhcpPerformanceData",
    "OpenNWNBPerformanceData",
    "CloseNbfPerformanceData",
    "CollectSPXPerformanceData",
    "CollectDhcpPerformanceData"
  ],
  "perfdisk.dll": [
    "CloseDiskObject",
    "OpenDiskObject",
    "CollectDiskObjectData"
  ],
  "perfnet.dll": [
    "CloseNetSvcsObject",
    "OpenNetSvcsObject",
    "CollectNetSvcsObjectData"
  ],
  "perfnw.dll": [
    "OpenNetWarePerformanceData",
    "CollectNetWarePerformanceData",
    "CloseNetWarePerformanceData"
  ],
  "perfos.dll": [
    "QueryOSObjectData",
    "CollectOSObjectData",
    "CloseOSObject",
    "OpenOSObject"
  ],
  "perfproc.dll": [
    "CollectSysProcessObjectData",
    "CloseSysProcessObject",
    "OpenSysProcessObject"
  ],
  "perfts.dll": [
    "CloseTSObject",
    "CollectTSObjectData",
    "OpenTSObject"
  ],
  "photometadatahandler.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "photowiz.dll": [
    "UsePPWForPrintTo",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllInstall",
    "DllRegisterServer",
    "DllMain",
    "DllUnregisterServer"
  ],
  "pid.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "pidgen.dll": [
    "PIDGenA",
    "VerifyPIDSequenceW",
    "PIDGenW",
    "SetupPIDGenA",
    "PIDGenSimpW",
    "SetupPIDGenW",
    "PIDGenSimpA"
  ],
  "pifmgr.dll": "No exports",
  "pjlmon.dll": [
    "InitializePrintMonitor"
  ],
  "plustab.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "pngfilt.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "pnrpnsp.dll": [
    "DllMain",
    "NSPStartup"
  ],
  "polstore.dll": [
    "IPSecEnumPolicyData",
    "IPSecCopyNegPolData",
    "IPSecFreeFilterSpec",
    "IPSecFreeFilterSpecs",
    "IPSecEnumNegPolData",
    "IPSecEnumISAKMPData",
    "IPSecDeleteNegPolData",
    "IPSecExportPolicies",
    "IPSecClosePolicyStore",
    "IPSecCopyNFAData",
    "IPSecFreeMulPolicyData",
    "IPSecGetAssignedDomainPolicyName",
    "IPSecSetNegPolData",
    "IPSecCreatePolicyData",
    "IPSecCreateNFAData",
    "IPSecCreateFilterData",
    "IPSecDeletePolicyData",
    "IPSecSetFilterData",
    "IPSecFreeNFAData",
    "IPSecReallocatePolStr",
    "IPSecSetISAKMPData",
    "IPSecGetAssignedPolicyData",
    "IPSecCopyFilterData",
    "IPSecDeleteISAKMPData",
    "IPSecFreeISAKMPData",
    "DllRegisterServer",
    "IPSecCreateNegPolData",
    "IPSecDeleteNFAData",
    "DllUnregisterServer",
    "IPSecFreeMulNegPolData",
    "IPSecChooseDriverBootMode",
    "IPSecAllocPolMem",
    "IPSecIsLocalPolicyAssigned",
    "IPSecUnassignPolicy",
    "IPSecGetNegPolData",
    "IPSecFreePolMem",
    "IPSecDeleteFilterData",
    "IPSecIsDomainPolicyAssigned",
    "IPSecImportPolicies",
    "IPSecCopyAuthMethod",
    "IPSecCopyISAKMPData",
    "IPSecFreePolStr",
    "IPSecEnumFilterData",
    "IPSecCreateISAKMPData",
    "IPSecCopyPolicyData",
    "IPSecEnumNFAData",
    "IPSecFreeMulISAKMPData",
    "IPSecSetPolicyData",
    "IPSecSetNFAData",
    "IPSecRestoreDefaultPolicies",
    "IPSecGetISAKMPData",
    "IPSecFreePolicyData",
    "IPSecAllocPolStr",
    "IPSecFreeMulNFAData",
    "IPSecAssignPolicy",
    "IPSecCopyFilterSpec",
    "IPSecFreeNegPolData",
    "IPSecGetFilterData",
    "IPSecFreeMulFilterData",
    "IPSecReallocatePolMem",
    "IPSecFreeFilterData",
    "IPSecOpenPolicyStore"
  ],
  "powrprof.dll": [
    "CallNtPowerInformation",
    "GetPwrCapabilities",
    "GetActivePwrScheme",
    "WritePwrScheme",
    "SetActivePwrScheme",
    "WriteGlobalPwrPolicy",
    "DeletePwrScheme",
    "MergeLegacyPwrScheme",
    "SetSuspendState",
    "GetPwrDiskSpindownRange",
    "IsPwrShutdownAllowed",
    "IsPwrSuspendAllowed",
    "WriteProcessorPwrScheme",
    "ReadGlobalPwrPolicy",
    "EnumPwrSchemes",
    "ReadPwrScheme",
    "CanUserWritePwrScheme",
    "ValidatePowerPolicies",
    "DebugPrintA",
    "IsAdminOverrideActive",
    "IsPwrHibernateAllowed",
    "LoadCurrentPwrScheme",
    "ReadProcessorPwrScheme",
    "GetCurrentPowerPolicies"
  ],
  "prflbmsg.dll": "No exports",
  "printui.dll": [
    "PrintNotifyTray_Init",
    "PrintUIEntryW",
    "PnPInterface",
    "DllMain",
    "ConnectToPrinterDlg",
    "ShowErrorMessageSC",
    "vServerPropPages",
    "PrinterPropPageProvider",
    "ConstructPrinterFriendlyName",
    "vDocumentDefaults",
    "vQueueCreate",
    "UnregisterPrintNotify",
    "bFolderGetPrinter",
    "DllGetClassObject",
    "bPrinterSetup",
    "PrintNotifyTray_Exit",
    "ShowErrorMessageHR",
    "RegisterPrintNotify",
    "ConnectToPrinterPropertyPage",
    "vPrinterPropPages",
    "DllCanUnloadNow",
    "bFolderRefresh",
    "DocumentPropertiesWrap",
    "bFolderEnumPrinters"
  ],
  "profmap.dll": [
    "RemapUserProfileA",
    "RemapAndMoveUserW",
    "InitializeProfileMappingApi",
    "RemapAndMoveUserA",
    "RemapUserProfileW",
    "DllMain"
  ],
  "psapi.dll": [
    "GetModuleBaseNameW",
    "GetDeviceDriverFileNameA",
    "EnumProcesses",
    "GetProcessImageFileNameW",
    "QueryWorkingSet",
    "GetMappedFileNameW",
    "GetModuleFileNameExA",
    "EmptyWorkingSet",
    "GetDeviceDriverFileNameW",
    "EnumDeviceDrivers",
    "InitializeProcessForWsWatch",
    "GetDeviceDriverBaseNameW",
    "GetMappedFileNameA",
    "EnumPageFilesW",
    "GetProcessImageFileNameA",
    "EnumProcessModules",
    "GetDeviceDriverBaseNameA",
    "GetModuleInformation",
    "GetModuleBaseNameA",
    "GetPerformanceInfo",
    "EnumPageFilesA",
    "GetModuleFileNameExW",
    "GetProcessMemoryInfo",
    "GetWsChanges"
  ],
  "psbase.dll": [
    "SPEnumTypes",
    "SPWriteItem",
    "SPDeleteType",
    "SPSetProvParam",
    "SPEnumSubtypes",
    "SPCloseItem",
    "SPReleaseContext",
    "SPAcquireContext",
    "SPDeleteSubtype",
    "SPEnumItems",
    "SPProviderInitialize",
    "SPGetTypeInfo",
    "SPCreateType",
    "SPGetProvParam",
    "SPGetProvInfo",
    "SPDeleteItem",
    "SPReadItem",
    "SPOpenItem",
    "FPasswordChangeNotify",
    "SPGetSubtypeInfo",
    "SPCreateSubtype"
  ],
  "pschdprf.dll": [
    "CollectPschedPerformanceData",
    "OpenPschedPerformanceData",
    "ClosePschedPerformanceData"
  ],
  "psnppagn.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "pstorec.dll": [
    "PStoreCreateInstance",
    "PStoreEnumProviders",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "pstorsvc.dll": [
    "Start",
    "ServiceEntry",
    "PSTOREServiceMain"
  ],
  "qagent.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "qagentrt.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer",
    "ServiceMain"
  ],
  "qasf.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "qcap.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "qcliprov.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "qdv.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "qdvd.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "qedit.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "qedwipes.dll": "No exports",
  "qmgr.dll": [
    "public: long __thiscall CRangeCollection::GetSubRanges(unsigned __int64,unsigned __int64,unsigned long,unsigned int,class CRangeCollection * *)",
    "private: static struct GenericStringHandle::StringData GenericStringHandle::s_EmptyString",
    "public: __thiscall CNestedImpersonation::CNestedImpersonation(void *)",
    "BITSServiceMain",
    "public: __thiscall CNestedImpersonation::CNestedImpersonation(void)",
    "public: __thiscall PROXY_SETTINGS_CONTAINER::PROXY_SETTINGS_CONTAINER(unsigned short const *,struct PROXY_SETTINGS const *)",
    "public: __thiscall CNestedImpersonation::CNestedImpersonation(class TokenHandle &)",
    "public: long __thiscall CCredentialsContainer::Find(enum __MIDL_IBackgroundCopyJob2_0001,enum __MIDL_IBackgroundCopyJob2_0002,struct __MIDL_IBackgroundCopyJob2_0005 * *)const",
    "public: unsigned __int64 __thiscall CRangeCollection::BytesRemainingInCurrentRange(void)",
    "class std::auto_ptr __stdcall HostFromProxyDescription(unsigned short *)",
    "unsigned long __stdcall GetNetworkRouteInfo(unsigned short const *,struct sockaddr_storage *)",
    "void * __stdcall BITSAlloc(unsigned int)",
    "DllRegisterServer",
    "protected: bool __thiscall CRangeCollection::CalculateBytesTotal(void)",
    "DllUnregisterServer",
    "ServiceMain",
    "void __stdcall BITSFree(void *)"
  ],
  "qmgrprxy.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "qosname.dll": [
    "WSCInstallQOSTemplate",
    "WPUGetQOSTemplate",
    "WSCRemoveQOSTemplate"
  ],
  "quartz.dll": [
    "AMGetErrorTextA",
    "DllCanUnloadNow",
    "DBToAmpFactor",
    "GetProxyDllInfo",
    "DllGetClassObject",
    "DllRegisterServer",
    "AMGetErrorTextW",
    "DllUnregisterServer",
    "AmpFactorToDB"
  ],
  "query.dll": [
    "public: void __thiscall CMmStreamConsecBuf::Rewind(void)",
    "public: __thiscall CSort::CSort(unsigned int)",
    "public: virtual unsigned short __thiscall CQMemDeSerStream::GetUShort(void)",
    "public: __thiscall CProcess::~CProcess(void)",
    "protected: void __thiscall CPipeClient::Close(void)",
    "public: __thiscall CRegChangeEvent::CRegChangeEvent(unsigned short const *,int)",
    "public: class CRangeRestriction * __thiscall CRangeKeyRepository::AcqRst(void)",
    "public: class CRestriction * __thiscall CNodeRestriction::RemoveChild(unsigned int)",
    "public: void __thiscall CSynRestriction::AddKey(class CKeyBuf const &)",
    "public: void __thiscall CDbCmdTreeNode::TransferNode(class CDbCmdTreeNode *)",
    "public: void __thiscall CPropStoreManager::SetMappedCacheSize(unsigned long,unsigned long)",
    "BeginCacheTransaction",
    "public: virtual double __thiscall CQMemDeSerStream::GetDouble(void)",
    "long __stdcall MakeICommand(struct IUnknown * *,unsigned short const *,unsigned short const *,struct IUnknown *)",
    "public: virtual void __thiscall CMemDeSerStream::GetChar(char *,unsigned long)",
    "public: __thiscall CParseCommandTree::~CParseCommandTree(void)",
    "public: int __thiscall CDbPropBaseRestriction::SetProperty(class CDbColumnNode const &)",
    "public: virtual class CPropEntry const * __thiscall CPropertyList::Find(unsigned short const *)",
    "public: virtual void __thiscall CStaticPropertyList::InitIterator(void)",
    "public: __thiscall CScopeRestriction::CScopeRestriction(unsigned short const *,int,int)",
    "public: void __thiscall CCatState::ChangeCurrentScope(unsigned short const *)",
    "public: static void __stdcall CCiOle::Shutdown(void)",
    "public: virtual unsigned char __thiscall CMemDeSerStream::GetByte(void)",
    "public: virtual void __thiscall CCombinedPropertyList::AddEntry(class CPropEntry *,int)",
    "public: virtual long __stdcall CEnumWorkid::Next(unsigned long,unsigned long *,unsigned long *)",
    "public: virtual long __stdcall CDbProperties::SetProperties(unsigned long,struct tagDBPROPSET * const)",
    "private: void __thiscall CImpersonateClient::Impersonate(void)",
    "public: virtual char * __thiscall CMemDeSerStream::GetString(void)",
    "public: void __thiscall CPropStoreManager::Setup(unsigned long,unsigned long,unsigned long,unsigned long,int,unsigned long)",
    "public: void __thiscall CPropertyRestriction::SetValue(unsigned short *)",
    "public: void __thiscall CStorageVariant::SetCY(union tagCY,unsigned int)",
    "public: int __thiscall CKeyArray::Add(int,class CKeyBuf const &)",
    "public: int __thiscall CDbColumns::Add(class CDbColId const &,unsigned int)",
    "public: int __thiscall CRcovStrmTrans::Seek(unsigned long)",
    "public: __thiscall CFullPropSpec::~CFullPropSpec(void)",
    "public: void __thiscall CCatalogAdmin::RemoveScope(unsigned short const *)",
    "unsigned long __stdcall UpdateContentIndex(unsigned short const *,unsigned short const *,unsigned short const *,int)",
    "public: int __thiscall CMachineAdmin::PauseCI(void)",
    "public: int __thiscall CDbProperties::UnMarshall(class PDeSerStream &)",
    "public: void __thiscall CNodeRestriction::AddChild(class CRestriction *,unsigned int &)",
    "public: __thiscall CFullPath::CFullPath(unsigned short const *)",
    "public: __thiscall CImpersonateSystem::~CImpersonateSystem(void)",
    "public: __thiscall CFileBuffer::CFileBuffer(class CFileMapView &,unsigned int)",
    "public: long __thiscall CPropStoreManager::WritePrimaryProperty(unsigned long,unsigned long,class CStorageVariant const &)",
    "public: void __thiscall CDbCmdTreeNode::SetWeight(long)",
    "unsigned long __stdcall WideCharToXArrayMultiByte(unsigned short const *,unsigned long,unsigned int,class XArray &)",
    "public: __thiscall CPerfMon::CPerfMon(unsigned short const *)",
    "public: __thiscall CFilterDaemon::CFilterDaemon(class CiProxy &,class CCiFrameworkParams &,class CLangList &,unsigned char *,unsigned long,struct ICiCFilterClient *)",
    "public: __thiscall CRangeKeyRepository::CRangeKeyRepository(void)",
    "public: virtual __thiscall CMmStream::~CMmStream(void)",
    "public: void __thiscall CCatState::SetNumberOfColumns(unsigned int)",
    "public: class CDbCmdTreeNode * __thiscall CDbCmdTreeNode::Clone(int)const",
    "public: __thiscall CRegChangeEvent::~CRegChangeEvent(void)",
    "public: int __thiscall CWebServer::GetCGIVariable(char const *,class XArray &,unsigned long &)",
    "public: void __thiscall CPropStoreManager::EndTransaction(unsigned long,int,unsigned long,unsigned long)",
    "public: void __thiscall CMmStream::OpenExclusive(unsigned short *,int)",
    "public: void __thiscall CNodeRestriction::Marshall(class PSerStream &)const",
    "public: void __thiscall CEventItem::AddArg(unsigned long)",
    "public: __thiscall CDbColumns::~CDbColumns(void)",
    "public: __thiscall CMemSerStream::CMemSerStream(unsigned int)",
    "int __stdcall IsNullPointerVariant(struct tagPROPVARIANT *)",
    "public: void __thiscall CRcovStrmWriteTrans::Commit(void)",
    "unsigned short const * __stdcall GetStringFromLCID(unsigned long)",
    "public: __thiscall CDbContentBaseRestriction::~CDbContentBaseRestriction(void)",
    "public: void __thiscall CPropStoreManager::CloseRecord(class CCompositePropRecord *)",
    "public: long __thiscall CPropStoreManager::WriteProperty(unsigned long,unsigned long,class CStorageVariant const &)",
    "public: virtual __thiscall CPhysStorage::~CPhysStorage(void)",
    "public: int __thiscall CDbColId::SetProperty(unsigned short const *)",
    "public: void __thiscall CDynStream::Flush(void)",
    "public: void __thiscall CStorageVariant::SetDATE(double,unsigned int)",
    "public: void __thiscall CImpersonationTokenCache::Initialize(unsigned short const *,int,int,int,unsigned long,unsigned long,unsigned long)",
    "public: unsigned long __thiscall CStandardPropMapper::PropertyToPropId(class CFullPropSpec const &,int)",
    "BindIFilterFromStorage",
    "public: void __thiscall CCatState::SetSortProp(unsigned short const *,enum SORTDIR,unsigned int)",
    "public: void __thiscall CCatState::SetLocale(unsigned short const *)",
    "private: class CDbRestriction * __thiscall CQueryParser::Query(class CDbNodeRestriction *)",
    "public: void __thiscall CCatState::GetSortProp(unsigned int,unsigned short const * *,enum SORTDIR *)const",
    "public: virtual void __thiscall CPropertyList::InitIterator(void)",
    "CITextToSelectTree",
    "public: class PRcovStorageObj * __thiscall CiStorage::QueryScopeList(unsigned long)",
    "public: __thiscall CDbColId::CDbColId(struct tagDBID const &)",
    "public: void __thiscall COLEPropManager::FetchProperty(struct _GUID const &,struct tagPROPSPEC const &,struct tagPROPVARIANT *,unsigned int *)",
    "public: void __thiscall CDbByGuid::Marshall(class PSerStream &)const",
    "public: __thiscall CNodeRestriction::CNodeRestriction(unsigned long,unsigned int)",
    "public: int __thiscall CQueryScanner::GetNumber(unsigned long &,int &)",
    "public: int __thiscall CPidLookupTable::Init(class PRcovStorageObj *)",
    "long __stdcall CiNtOpenNoThrow(void * &,unsigned short const *,unsigned long,unsigned long,unsigned long)",
    "public: int __thiscall CDbColId::UnMarshall(class PDeSerStream &)",
    "public: __thiscall CDbNatLangRestriction::CDbNatLangRestriction(unsigned short const *,class CDbColumnNode const &,unsigned long)",
    "public: static unsigned short const * __stdcall CEmptyPropertyList::GetPropTypeName(unsigned int)",
    "public: void __thiscall CPhysStorage::Close(void)",
    "public: void __thiscall CRestriction::Marshall(class PSerStream &)const",
    "public: __thiscall CWin32RegAccess::CWin32RegAccess(struct HKEY__ *,unsigned short const *)",
    "protected: void __thiscall CAllocStorageVariant::ResetType(class PMemoryAllocator &)",
    "public: void __thiscall CDbParameter::Marshall(class PSerStream &)const",
    "public: void __thiscall CPhysStorage::ShrinkToFit(void)",
    "public: unsigned int __thiscall CKey::StrLen(void)const",
    "public: virtual void __thiscall CMemDeSerStream::SkipDouble(void)",
    "long __stdcall GetOleDBErrorInfo(struct IUnknown *,struct _GUID const &,unsigned long,unsigned int,struct tagERRORINFO *,struct IErrorInfo * *)",
    "public: void __thiscall CFwEventItem::ReportEventW(struct ICiCAdviseStatus &)",
    "public: __thiscall CPropertyStore::~CPropertyStore(void)",
    "public: static unsigned int __stdcall CEmptyPropertyList::GetPropTypeCount(void)",
    "public: unsigned long __thiscall CSdidLookupTable::LookupSDID(void *,unsigned long)",
    "int __stdcall VT_VARIANT_GE(struct tagPROPVARIANT const &,struct tagPROPVARIANT const &)",
    "public: __thiscall CDbProp::~CDbProp(void)",
    "public: void __thiscall CEnumWorkid::Append(unsigned long)",
    "public: unsigned short const * __thiscall CDriveInfo::GetVolumeName(int)",
    "public: int __thiscall CMachineAdmin::EnableCI(void)",
    "public: void __thiscall CCatState::SetNumberOfSortProps(unsigned int)",
    "public: unsigned short * __thiscall CKey::GetStr(void)const",
    "public: __thiscall CRestriction::~CRestriction(void)",
    "public: __thiscall CNodeRestriction::~CNodeRestriction(void)",
    "public: virtual long __stdcall CEmptyPropertyList::GetPropInfoFromName(unsigned short const *,struct tagDBID * *,unsigned short *,unsigned int *)",
    "struct _iobuf * __stdcall OpenFileFromPath(unsigned short const *)",
    "public: unsigned long __thiscall CRegAccess::Read(unsigned short const *,unsigned long)",
    "EndCacheTransaction",
    "public: int __thiscall CQueryScanner::GetNumber(long &,int &)",
    "public: virtual unsigned long __stdcall CEmptyPropertyList::AddRef(void)",
    "public: void __thiscall CPropStoreManager::LongInit(int &,unsigned long &,void (__stdcall*)(unsigned long,int,void const *),void const *)",
    "public: long __thiscall CDbCmdTreeNode::GetWeight(void)const",
    "public: static int __stdcall CMetaDataMgr::IsIISAdminUp(int &)",
    "public: virtual void __thiscall CMemDeSerStream::SkipWChar(unsigned long)",
    "public: void __thiscall CScopeAdmin::SetPath(unsigned short const *)",
    "public: void __thiscall CStorageVariant::SetI8(union _LARGE_INTEGER,unsigned int)",
    "public: __thiscall CAllocStorageVariant::CAllocStorageVariant(unsigned short const *,class PMemoryAllocator &)",
    "public: class CCatalogAdmin * __thiscall CMachineAdmin::QueryCatalogAdmin(unsigned short const *)",
    "public: int __thiscall CSdidLookupTable::Init(class CiStorage *)",
    "public: __thiscall XPtr::~XPtr(void)",
    "public: void __thiscall CFwEventItem::AddArg(unsigned long)",
    "public: virtual void __thiscall CQMemDeSerStream::GetChar(char *,unsigned long)",
    "public: __thiscall CNotRestriction::~CNotRestriction(void)",
    "public: __thiscall CValueNormalizer::CValueNormalizer(class PKeyRepository &)",
    "unsigned short * __stdcall AllocHeapAndGetWString(class PDeSerStream &)",
    "public: void __thiscall CFileMapView::Init(void)",
    "public: void __thiscall CQueryScanner::AcceptWord(void)",
    "public: virtual long __stdcall CEnumString::Skip(unsigned long)",
    "public: virtual unsigned char __thiscall CQMemDeSerStream::GetByte(void)",
    "public: int __thiscall CCatalogAdmin::IsStopped(void)",
    "public: __thiscall CDFA::~CDFA(void)",
    "public: class CDbColId & __thiscall CDbColId::operator=(class CDbColId const &)",
    "public: __thiscall CPropertyRestriction::CPropertyRestriction(void)",
    "public: void __thiscall CDynStream::InitializeForRead(void)",
    "CICreateCommand",
    "public: class CPropEntry const * __thiscall CEmptyPropertyList::Find(class CDbColId const &)",
    "public: virtual class CPropEntry const * __thiscall CPropertyList::Next(void)",
    "public: __thiscall CPidLookupTable::~CPidLookupTable(void)",
    "public: void __thiscall CPropStoreManager::DeleteRecord(unsigned long)",
    "public: void __thiscall CStorageVariant::SetR8(double,unsigned int)",
    "class CPropListFile * __stdcall GetGlobalPropListFile(void)",
    "public: __thiscall CQueryUnknown::~CQueryUnknown(void)",
    "public: int __thiscall CDbPropSet::UnMarshall(class PDeSerStream &)",
    "public: void __thiscall CValueNormalizer::PutValue(unsigned long,unsigned long &,class CStorageVariant const &)",
    "CIGetGlobalPropertyList",
    "SvcEntry_CiSvc",
    "public: unsigned short * __thiscall CAllocStorageVariant::GetLPWSTR(unsigned int)const",
    "public: virtual void __thiscall CMemDeSerStream::GetBlob(unsigned char *,unsigned long)",
    "SetupCacheEx",
    "public: virtual long __stdcall CDbProperties::QueryInterface(struct _GUID const &,void * *)",
    "public: unsigned long __thiscall CPropStoreManager::GetBackupSize(unsigned long)",
    "public: virtual float __thiscall CMemDeSerStream::GetFloat(void)",
    "public: virtual void __thiscall CQMemDeSerStream::SkipFloat(void)",
    "public: __thiscall CPropertyValueParser::CPropertyValueParser(class CQueryScanner &,unsigned short,unsigned long)",
    "public: class CCompositePropRecordForWrites * __thiscall CPropStoreManager::OpenRecordForWrites(unsigned long,unsigned char *)",
    "class CStaticPropertyList * __stdcall GetGlobalStaticPropertyList(void)",
    "public: void __thiscall CDbContentVector::Marshall(class PSerStream &)const",
    "public: virtual long __stdcall CQueryUnknown::QueryInterface(struct _GUID const &,void * *)",
    "public: unsigned long __thiscall CPidMapper::PidToRealPid(unsigned long)",
    "DoneCIISAPIPerformanceData",
    "public: void __thiscall CCatalogAdmin::DeleteRegistryParamNoThrow(unsigned short const *)",
    "public: class CScopeAdmin * __thiscall CScopeEnum::QueryScopeAdmin(void)",
    "public: __thiscall CEventLog::~CEventLog(void)",
    "void __stdcall PutWString(class PSerStream &,unsigned short const *)",
    "public: __thiscall CImpersonationTokenCache::~CImpersonationTokenCache(void)",
    "int __stdcall CiGetPassword(unsigned short const *,unsigned short const *,unsigned short *)",
    "public: __thiscall CCatState::~CCatState(void)",
    "public: int __thiscall CDbProp::Copy(struct tagDBPROP const &)",
    "unsigned __int64 __cdecl My_wcstoui64(unsigned short const *,unsigned short * *,int)",
    "void __stdcall BuildRegistryScopesKey(class XArray &,unsigned short const *)",
    "BindIFilterFromStream",
    "public: void __thiscall CRcovStorageHdr::Init(unsigned long)",
    "public: virtual unsigned long __stdcall CEmptyPropertyList::Release(void)",
    "public: __thiscall CScopeRestriction::~CScopeRestriction(void)",
    "public: __thiscall CFileMapView::~CFileMapView(void)",
    "public: __thiscall CCiAdminParams::CCiAdminParams(class CLangList *)",
    "public: void __thiscall CShtOle::Shutdown(void)",
    "public: int __thiscall CQueryScanner::GetNumber(unsigned __int64 &,int &)",
    "public: virtual void __thiscall CQMemDeSerStream::SkipLong(void)",
    "public: void __thiscall CDbQueryResults::Serialize(class PSerStream &)const",
    "public: int __thiscall CDbContentVector::UnMarshall(class PDeSerStream &)",
    "public: __thiscall CFilterDaemon::~CFilterDaemon(void)",
    "public: unsigned short const * __thiscall CCatState::GetCD(void)",
    "public: void __thiscall CPropertyRestriction::Marshall(class PSerStream &)const",
    "public: __thiscall CPropNameArray::CPropNameArray(class PDeSerStream &)",
    "public: __thiscall CDbPropIDSet::~CDbPropIDSet(void)",
    "public: virtual long __stdcall CDbProperties::GetPropertyInfo(unsigned long,struct tagDBPROPIDSET const * const,unsigned long *,struct tagDBPROPINFOSET * *,unsigned short * *)",
    "CIBuildQueryNode",
    "public: void __thiscall CCatalogAdmin::AddCachedProperty(class CFullPropSpec const &,unsigned long,unsigned long,unsigned long,int)",
    "public: long __thiscall CAllocStorageVariant::GetI4(unsigned int)const",
    "public: virtual unsigned long __thiscall CQMemDeSerStream::GetULong(void)",
    "int __stdcall VT_VARIANT_GT(struct tagPROPVARIANT const &,struct tagPROPVARIANT const &)",
    "LocateCatalogsW",
    "public: __thiscall CPropListFile::CPropListFile(class CEmptyPropertyList *,int,unsigned short const *,unsigned long)",
    "public: virtual void __thiscall CMemDeSerStream::SkipChar(unsigned long)",
    "public: short __thiscall CAllocStorageVariant::GetI2(unsigned int)const",
    "public: __thiscall CDefColumnRegEntry::CDefColumnRegEntry(void)",
    "public: void __thiscall CRequestClient::Disconnect(void)",
    "public: void __thiscall CWorkQueue::Release(class CWorkThread *)",
    "public: __thiscall CDbNatLangRestriction::CDbNatLangRestriction(unsigned short const *,struct tagDBID const &,unsigned long)",
    "public: void __thiscall CValueNormalizer::PutMinValue(unsigned long,unsigned long &,enum VARENUM)",
    "public: unsigned char * __thiscall CQMemSerStream::AcqBuf(void)",
    "public: virtual void __thiscall CMemDeSerStream::SkipByte(void)",
    "public: unsigned char __thiscall CDFA::Recognize(unsigned short const *)",
    "public: __thiscall CInternalPropertyRestriction::~CInternalPropertyRestriction(void)",
    "public: void __thiscall CDbNumeric::Marshall(class PSerStream &)const",
    "public: __thiscall CDbCmdTreeNode::~CDbCmdTreeNode(void)",
    "public: int __thiscall CCatalogAdmin::Pause(void)",
    "InitializeCIPerformanceData",
    "public: int __thiscall CRequestClient::NotifyWriteRead(void *,void *,unsigned long,void *,unsigned long,unsigned long &)",
    "public: virtual unsigned long __thiscall CQMemDeSerStream::PeekULong(void)",
    "private: int __thiscall CImpersonateRemoteAccess::_ImpersonateIf(unsigned short const *,unsigned short const *,unsigned long)",
    "public: void __thiscall CStorageVariant::SetUI2(unsigned short,unsigned int)",
    "public: long __thiscall CPropListFile::CheckError(unsigned long &,unsigned short * *)",
    "public: __thiscall CImpersonateClient::~CImpersonateClient(void)",
    "public: void __thiscall CSort::Remove(unsigned int)",
    "public: void __thiscall CMetaDataMgr::DisableVPathNotify(void)",
    "public: enum CDriveInfo::eFileSystem __thiscall CDriveInfo::GetFileSystem(int)",
    "public: void __thiscall CProcess::Resume(void)",
    "public: __thiscall CPidRemapper::CPidRemapper(class CPidMapper const &,class XInterface &,class CRestriction *,class CColumnSet *,class CSortSet *)",
    "public: unsigned int __thiscall CCatState::NumberOfColumns(void)const",
    "FsCiShutdown",
    "public: int __thiscall CDbNestingNode::AddTable(class CDbCmdTreeNode *)",
    "public: __thiscall CEventItem::~CEventItem(void)",
    "public: void __thiscall CFilterDaemon::StopFiltering(void)",
    "private: static struct _FILETIME CGlobalPropFileRefresher::_ftFile",
    "_LoadBHIFilter@16",
    "public: class CDbRestriction * __thiscall CQueryParser::ParseQueryPhrase(void)",
    "public: void __thiscall CColumns::Remove(unsigned int)",
    "public: union _LARGE_INTEGER __thiscall CAllocStorageVariant::GetI8(unsigned int)const",
    "public: void __thiscall CDbProp::Marshall(class PSerStream &)const",
    "public: __thiscall CDbQueryResults::CDbQueryResults(void)",
    "public: __thiscall CLocalGlobalPropertyList::CLocalGlobalPropertyList(class CEmptyPropertyList *,int,unsigned short const *,unsigned long)",
    "public: __thiscall CRegNotify::CRegNotify(unsigned short const *)",
    "public: static class CRestriction * __stdcall CRestriction::UnMarshall(class PDeSerStream &)",
    "public: virtual long __stdcall CEmptyPropertyList::QueryInterface(struct _GUID const &,void * *)",
    "void __stdcall UnPickle(int,class XPtr &,class XPtr &,class XPtr &,class XPtr &,class CRowsetProperties &,class XPtr &,unsigned char *,unsigned long)",
    "DllCanUnloadNow",
    "public: virtual void __thiscall CMemDeSerStream::GetGUID(struct _GUID &)",
    "public: static void __stdcall CiStorage::EnumerateFilesInDir(unsigned short const *,class CEnumString &)",
    "public: void __thiscall CParseCommandTree::ParseTree(class CDbCmdTreeNode *)",
    "public: void __thiscall CMachineAdmin::SetSZParam(unsigned short const *,unsigned short const *,unsigned long)",
    "protected: void __thiscall CDbCmdTreeNode::AppendChild(class CDbCmdTreeNode *)",
    "public: virtual void __thiscall CQMemDeSerStream::SkipGUID(void)",
    "public: __thiscall CSdidLookupTable::CSdidLookupTable(void)",
    "public: class CScopeAdmin * __thiscall CCatalogAdmin::QueryScopeAdmin(unsigned short const *)",
    "public: virtual long __thiscall CPropertyList::GetAllEntries(class CPropEntry * *,unsigned long)",
    "public: __thiscall CVirtualString::~CVirtualString(void)",
    "public: int __thiscall CCatalogAdmin::IsCatalogInactive(void)",
    "private: void __thiscall CQueryParser::SetCurrentProperty(unsigned short const *,enum PropertyType)",
    "CollectFILTERPerformanceData",
    "public: __thiscall CRcovStrmMDTrans::CRcovStrmMDTrans(class PRcovStorageObj &,enum CRcovStrmMDTrans::MDOp,unsigned long)",
    "public: __thiscall CCategorizationSet::CCategorizationSet(class CCategorizationSet const &)",
    "public: void __thiscall CDbColId::Cleanup(void)",
    "public: unsigned long * __thiscall CPhysStorage::BorrowBuffer(unsigned long,int,int)",
    "public: __thiscall CPidRemapper::~CPidRemapper(void)",
    "public: static struct IStemmer * __stdcall CCiOle::NewStemmer(struct _GUID const &)",
    "public: void __thiscall CMachineAdmin::CreateSubdirs(unsigned short const *)",
    "public: class PStorage & __thiscall CPropStoreManager::GetStorage(unsigned long)",
    "public: unsigned long __thiscall CPidRemapper::NameToReal(class CFullPropSpec const *)",
    "public: virtual void __thiscall CQMemDeSerStream::SkipByte(void)",
    "void __stdcall BuildRegistryPropertiesKey(class XArray &,unsigned short const *)",
    "public: void __thiscall CPhysStorage::Flush(int)",
    "public: __thiscall CInternalPropertyRestriction::CInternalPropertyRestriction(unsigned long,unsigned long,class CStorageVariant const &,class CRestriction *)",
    "void __stdcall DoFailTest(long)",
    "public: void __thiscall CFullPath::MakePath(unsigned short const *)",
    "private: class CDbSortListAnchor * __thiscall CDbSortNode::_FindOrAddAnchor(void)",
    "public: int __thiscall CPathParser::GetFileName(unsigned short *,unsigned long &)const",
    "public: int __thiscall CDbProjectListAnchor::AppendListElement(struct tagDBID const &,unsigned short *)",
    "public: virtual void __thiscall CMemDeSerStream::SkipLong(void)",
    "public: void __thiscall CStorageVariant::SetBSTR(unsigned short *,unsigned int)",
    "public: __thiscall CPropertyRestriction::CPropertyRestriction(unsigned long,class CFullPropSpec const &,class CStorageVariant const &)",
    "void __stdcall DecodeHtmlNumeric(unsigned short *)",
    "public: virtual unsigned short * __thiscall CMemDeSerStream::GetWString(void)",
    "public: void __thiscall CDefColumnRegEntry::Refresh(int)",
    "public: void __thiscall CFwAsyncWorkItem::AddToWorkQueue(void)",
    "public: void __thiscall CFullPropSpec::SetProperty(unsigned long)",
    "public: __thiscall CSynRestriction::CSynRestriction(class CKey const &,unsigned long,unsigned long,unsigned long,int)",
    "public: int __thiscall COLEPropManager::Open(class CFunnyPath const &)",
    "public: virtual void __thiscall CMemDeSerStream::SkipUShort(void)",
    "protected: __thiscall CRcovStrmTrans::CRcovStrmTrans(class PRcovStorageObj &,enum RcovOpType)",
    "unsigned long __stdcall LocaleToCodepage(unsigned long)",
    "public: int __thiscall CMmStreamConsecBuf::Eof(void)",
    "public: __thiscall CWordRestriction::CWordRestriction(class CKeyBuf const &,unsigned long,unsigned long,unsigned long,int)",
    "public: __thiscall CAllocStorageVariant::CAllocStorageVariant(class PDeSerStream &,class PMemoryAllocator &)",
    "public: void __thiscall CPropNameArray::Marshall(class PSerStream &)const",
    "public: __thiscall CDbContentRestriction::CDbContentRestriction(unsigned short const *,struct tagDBID const &,unsigned long,unsigned long)",
    "public: long __thiscall CPropStoreManager::WritePrimaryProperty(class CCompositePropRecordForWrites &,unsigned long,class CStorageVariant const &)",
    "public: void __thiscall CDynStream::Shrink(class PStorage &,unsigned long)",
    "public: void __thiscall CEventLog::ReportEventW(class CEventItem &)",
    "public: void __thiscall CPropStoreManager::Flush(void)",
    "public: unsigned long __thiscall CMetaDataMgr::GetVPathAccess(unsigned short const *)",
    "public: void __thiscall CGenericCiProxy::SetPriority(unsigned long,unsigned long)",
    "public: void __thiscall CKeyDeComp::GetOffset(struct BitOffset &)",
    "public: void __thiscall CDbPropSet::Marshall(class PSerStream &)const",
    "DllUnregisterServer",
    "public: int __thiscall CPhysStorage::MinPageInUse(unsigned long &)",
    "public: __thiscall CEventLog::CEventLog(unsigned short const *,unsigned short const *)",
    "public: virtual __thiscall CMemSerStream::~CMemSerStream(void)",
    "InitializeCIISAPIPerformanceData",
    "public: virtual unsigned long __stdcall CDbProperties::Release(void)",
    "public: virtual __thiscall CSizeSerStream::~CSizeSerStream(void)",
    "public: static void __stdcall CDbColId::operator delete(void *)",
    "public: virtual class CPropEntry const * __thiscall CStaticPropertyList::Find(unsigned short const *)",
    "void __cdecl SystemExceptionTranslator(unsigned int,struct _EXCEPTION_POINTERS *)",
    "public: void __thiscall CCatState::ChangeCurrentCatalog(unsigned short const *)",
    "protected: int __thiscall CDbListAnchor::AppendListElement(unsigned short,struct tagDBID const &)",
    "public: unsigned short * __thiscall CQueryScanner::AcqLine(int)",
    "public: void __thiscall CStorageVariant::SetLPWSTR(unsigned short const *,unsigned int)",
    "public: void __thiscall CStorageVariant::SetUI1(unsigned char,unsigned int)",
    "public: __thiscall CImpersonateRemoteAccess::CImpersonateRemoteAccess(class CImpersonationTokenCache *)",
    "class CCoTaskAllocator CoTaskAllocator",
    "protected: void __thiscall CDbCmdTreeNode::CleanupDataValue(void)",
    "protected: class CDbCmdTreeNode * __thiscall CDbCmdTreeNode::RemoveFirstChild(void)",
    "public: void __thiscall CPropStoreManager::SetBackupSize(unsigned long,unsigned long)",
    "public: virtual __thiscall CPropertyList::~CPropertyList(void)",
    "public: __thiscall CContentRestriction::~CContentRestriction(void)",
    "public: int __thiscall CRestriction::IsLeaf(void)const",
    "public: __thiscall CMmStreamConsecBuf::CMmStreamConsecBuf(void)",
    "public: void __thiscall CMmStreamConsecBuf::Init(class PMmStream *)",
    "public: __thiscall CDbColId::CDbColId(struct _GUID const &,unsigned short const *)",
    "public: int __thiscall CWin32RegAccess::Get(unsigned short const *,unsigned short *,unsigned int,int)",
    "public: void __thiscall CImpersonateRemoteAccess::Release(void)",
    "public: int __thiscall CFullPropSpec::SetProperty(unsigned short const *)",
    "public: __thiscall CScopeAdmin::~CScopeAdmin(void)",
    "public: virtual class CPropEntry const * __thiscall CStaticPropertyList::Next(void)",
    "public: unsigned long __thiscall CWebServer::GetPhysicalPath(unsigned short const *,unsigned short *,unsigned long,unsigned long)",
    "public: long __thiscall CPropStoreManager::WriteProperty(class CCompositePropRecordForWrites &,unsigned long,class CStorageVariant const &)",
    "public: void __thiscall CDbProp::Cleanup(void)",
    "public: void __thiscall CMachineAdmin::SetDWORDParam(unsigned short const *,unsigned long)",
    "public: void __thiscall CMachineAdmin::TunePerformance(int,unsigned short,unsigned short)",
    "public: __thiscall CRcovStrmAppendTrans::CRcovStrmAppendTrans(class PRcovStorageObj &)",
    "void * __stdcall CiNtOpen(unsigned short const *,unsigned long,unsigned long,unsigned long)",
    "public: void __thiscall CCatState::SetDefaultProperty(unsigned short const *)",
    "public: __thiscall CEventItem::CEventItem(unsigned short,unsigned short,unsigned long,unsigned short,unsigned long,void const *)",
    "public: void __thiscall CDynStream::Write(void *,unsigned long)",
    "InitializeFILTERPerformanceData",
    "public: __thiscall CSizeSerStream::CSizeSerStream(void)",
    "public: unsigned int __thiscall CKeyBuf::StrLen(void)const",
    "public: void __thiscall COLEPropManager::CPropSetMap::Close(void)",
    "public: __thiscall CPropertyStoreWids::CPropertyStoreWids(class CPropStoreManager &)",
    "public: void __thiscall CQueryScanner::Accept(void)",
    "public: __thiscall CFwAsyncWorkItem::CFwAsyncWorkItem(class CWorkManager &,class CWorkQueue &)",
    "public: void __thiscall CNatLanguageRestriction::Marshall(class PSerStream &)const",
    "public: int __thiscall CCatalogAdmin::Start(void)",
    "public: virtual unsigned long __stdcall CEnumWorkid::Release(void)",
    "public: int __thiscall CQueryScanner::GetNumber(__int64 &,int &)",
    "public: void __thiscall CRegAccess::Get(unsigned short const *,unsigned short *,unsigned int)",
    "public: int __thiscall CDriveInfo::IsWriteProtected(void)",
    "private: class CDbProjectListAnchor * __thiscall CDbNestingNode::_FindGroupListAnchor(void)",
    "public: __thiscall CLocalGlobalPropertyList::CLocalGlobalPropertyList(unsigned long)",
    "public: unsigned long __thiscall CPropertyStore::GetTotalSizeInKB(void)",
    "public: virtual class CPropEntry const * __thiscall CCombinedPropertyList::Next(void)",
    "public: __thiscall CRangeRestriction::~CRangeRestriction(void)",
    "public: int __thiscall CMachineAdmin::IsCIStopped(void)",
    "public: unsigned long __thiscall CPropStoreManager::GetTotalSizeInKB(void)",
    "public: int __thiscall CRestriction::IsValid(void)const",
    "public: __thiscall CDFA::CDFA(unsigned short const *,class CTimeLimit &,unsigned char)",
    "public: __thiscall CAllocStorageVariant::CAllocStorageVariant(struct tagPROPVARIANT &,class PMemoryAllocator &)",
    "protected: __thiscall CPhysStorage::CPhysStorage(class PStorage &,class PStorageObject &,unsigned long,class PMmStream *,enum PStorage::EOpenMode,int,unsigned int,int)",
    "public: float __thiscall CAllocStorageVariant::GetR4(unsigned int)const",
    "void * __stdcall ciNew(unsigned int)",
    "public: __thiscall CPropStoreManager::CPropStoreManager(unsigned long)",
    "public: int __thiscall CWin32RegAccess::Get(unsigned short const *,unsigned long &)",
    "public: void __thiscall CDynStream::Grow(class PStorage &,unsigned long)",
    "public: int __thiscall CNodeRestriction::IsValid(void)const",
    "public: void __thiscall CRangeRestriction::SetEndKey(class CKeyBuf const &)",
    "public: class CNodeRestriction * __thiscall CNodeRestriction::Clone(void)const",
    "private: void __thiscall CImpersonateSystem::MakePrivileged(void)",
    "public: void __thiscall CContentRestriction::SetPhrase(unsigned short const *)",
    "public: void __thiscall CEventItem::AddArg(unsigned short const *)",
    "public: virtual long __stdcall CEnumString::Next(unsigned long,unsigned short * *,unsigned long *)",
    "public: int __thiscall CEmptyPropertyList::GetPropInfo(class CDbColId const &,unsigned short const * *,unsigned short *,unsigned int *)",
    "public: void __thiscall CCatState::AddDir(class XPtrST &)",
    "public: void __thiscall CStorageVariant::SetR4(float,unsigned int)",
    "_AbortMerges@16",
    "public: __thiscall CDbPropSet::~CDbPropSet(void)",
    "DoneCIPerformanceData",
    "int __stdcall VT_VARIANT_NE(struct tagPROPVARIANT const &,struct tagPROPVARIANT const &)",
    "public: virtual float __thiscall CQMemDeSerStream::GetFloat(void)",
    "void __stdcall VerifyThreadHasAdminPrivilege(void)",
    "public: virtual class CPropEntry const * __thiscall CPropertyList::Find(class CDbColId const &)",
    "public: __thiscall CNatLanguageRestriction::~CNatLanguageRestriction(void)",
    "protected: __thiscall CAllocStorageVariant::~CAllocStorageVariant(void)",
    "public: virtual void __thiscall CCombinedPropertyList::InitIterator(void)",
    "class CDbColumns * __stdcall ParseStringColumns(unsigned short const *,struct IColumnMapper *,unsigned long,class PVariableSet *,class CDynArray *)",
    "protected: void __thiscall CRcovStrmTrans::Write(void const *,unsigned long)",
    "public: void __thiscall CQueryUnknown::ReInit(unsigned long,class CRowset * *)",
    "public: int __thiscall CBufferCache::MinPageInUse(unsigned long &)",
    "public: virtual unsigned long __stdcall CQueryUnknown::AddRef(void)",
    "public: void __thiscall CRcovStrmAppendTrans::Commit(void)",
    "public: static void __stdcall CImpersonateSystem::SetRunningAsSystem(void)",
    "public: int __thiscall CPropStoreManager::ReadProperty(unsigned long,unsigned long,struct tagPROPVARIANT &,unsigned char *,unsigned int *)",
    "public: __thiscall CDynStream::~CDynStream(void)",
    "public: void __thiscall CStorageVariant::SetBOOL(short,unsigned int)",
    "public: int __thiscall CCatalogAdmin::GetDWORDParam(unsigned short const *,unsigned long &)",
    "public: __thiscall CSynRestriction::~CSynRestriction(void)",
    "public: static void __stdcall CDbParameter::operator delete(void *)",
    "private: void __thiscall CVirtualString::GrowBuffer(unsigned long)",
    "public: __thiscall CWin32RegAccess::~CWin32RegAccess(void)",
    "private: unsigned long __thiscall CPropertyStore::LokNewWorkId(unsigned long,int,int)",
    "public: __thiscall CTimeLimit::CTimeLimit(unsigned long,unsigned long)",
    "CIMakeICommand",
    "int __stdcall SaCreateData(class PVarAllocator &,unsigned short,struct tagSAFEARRAY &,struct tagSAFEARRAY &,int)",
    "public: __thiscall CCategorizationSet::CCategorizationSet(unsigned int)",
    "public: int __thiscall CDriveInfo::IsSameDrive(unsigned short const *)",
    "public: unsigned short const * __thiscall CCatalogAdmin::GetLocation(void)",
    "public: void __thiscall CDriveInfo::GetDiskSpace(__int64 &,__int64 &)",
    "public: int __thiscall CSdidLookupTable::AccessCheck(unsigned long,void *,unsigned long,int &)",
    "public: __thiscall CKeyArray::~CKeyArray(void)",
    "public: void __thiscall CLocalGlobalPropertyList::Load(unsigned short const * const)",
    "public: void __thiscall CWorkManager::AddToWorkList(class CFwAsyncWorkItem *)",
    "public: long __thiscall CLocalGlobalPropertyList::CheckError(unsigned long &,unsigned short * *)",
    "CiSvcMain",
    "public: __thiscall CPropertyStoreWids::~CPropertyStoreWids(void)",
    "public: static struct IWordBreaker * __stdcall CCiOle::NewWordBreaker(struct _GUID const &)",
    "public: void __thiscall CCatalogAdmin::SetDWORDParam(unsigned short const *,unsigned long)",
    "CITextToFullTree",
    "public: __thiscall CPropNameArray::CPropNameArray(unsigned int)",
    "public: char * __thiscall CAllocStorageVariant::GetLPSTR(unsigned int)const",
    "public: unsigned long __thiscall CDbQueryResults::Size(void)",
    "public: void __thiscall CRcovStrmWriteTrans::Empty(void)",
    "public: void __thiscall CDbColId::Marshall(class PSerStream &)const",
    "public: static void __stdcall CCiOle::FlushIdle(void)",
    "public: __thiscall CLangList::~CLangList(void)",
    "_ForceMasterMerge@16",
    "public: void __thiscall CWorkQueue::RefreshParams(unsigned long,unsigned long)",
    "public: virtual void __thiscall CQMemDeSerStream::GetWChar(unsigned short *,unsigned long)",
    "public: void __thiscall CWorkQueue::ReleaseWorkThreads(void)",
    "public: unsigned short * __thiscall CQueryScanner::AcqWord(void)",
    "public: void __thiscall CCatState::AddCatalog(class XPtrST &)",
    "int __stdcall VT_VARIANT_LE(struct tagPROPVARIANT const &,struct tagPROPVARIANT const &)",
    "public: __thiscall CDbSortSet::CDbSortSet(unsigned int)",
    "public: virtual unsigned long __stdcall CEnumString::Release(void)",
    "public: void __thiscall CDbSortSet::Remove(unsigned int)",
    "public: int __thiscall COccRestriction::IsValid(void)const",
    "public: void __thiscall CAllocStorageVariant::SetBSTR(unsigned short *,class PMemoryAllocator &)",
    "public: void __thiscall CPropertyList::ClearList(void)",
    "public: __thiscall CPropStoreManager::~CPropStoreManager(void)",
    "public: __thiscall CPropertyRestriction::~CPropertyRestriction(void)",
    "class CDbRestriction * __stdcall GetStringDbRestriction(unsigned short const *,unsigned long,struct IColumnMapper *,unsigned long)",
    "public: void __thiscall CWorkQueue::Add(class PWorkItem *)",
    "protected: virtual __thiscall CRegNotify::~CRegNotify(void)",
    "public: int __thiscall CMachineAdmin::DisableCI(void)",
    "public: int __thiscall CCatalogAdmin::Stop(void)",
    "long __stdcall SetScopePropertiesNoThrow(struct ICommand *,unsigned int,unsigned short const * const *,unsigned long const *,unsigned short const * const *,unsigned short const * const *)",
    "public: int __thiscall CDbPropertyRestriction::IsCIDialect(void)",
    "public: virtual unsigned long __stdcall CEnumWorkid::AddRef(void)",
    "LoadBinaryFilter",
    "public: __thiscall COccRestriction::~COccRestriction(void)",
    "public: int __thiscall CPropStoreManager::ReadProperty(class CCompositePropRecord &,unsigned long,struct tagPROPVARIANT *,unsigned int *)",
    "public: void __thiscall CMetaDataMgr::EnableVPathNotify(class CMetaDataVPathChangeCallBack *)",
    "public: virtual long __stdcall CEnumWorkid::Skip(unsigned long)",
    "_StartFWCiSvcWork@12",
    "class CDbCmdTreeNode * __stdcall FormQueryTree(class CDbCmdTreeNode &,class CCatState &,struct IColumnMapper *,int,int)",
    "public: __thiscall CColumnSet::CColumnSet(unsigned int)",
    "public: void __thiscall CRequestClient::DataWriteRead(void *,unsigned long,void *,unsigned long,unsigned long &)",
    "void __stdcall HTMLEscapeW(unsigned short const *,class CVirtualString &,unsigned long)",
    "public: static unsigned int __stdcall CiStorage::DetermineDriveType(unsigned short const *)",
    "public: void __thiscall CCiRegParams::Refresh(struct ICiAdminParams *,int)",
    "public: __thiscall CFullPropSpec::CFullPropSpec(class PDeSerStream &)",
    "public: __thiscall CQueryScanner::CQueryScanner(unsigned short const *,int,unsigned long,int)",
    "public: void __thiscall CRcovStrmMDTrans::Commit(void)",
    "public: __thiscall CImpersonationTokenCache::CImpersonationTokenCache(unsigned short const *)",
    "public: int __thiscall CAllocStorageVariant::IsValid(void)const",
    "public: static void __stdcall CPropertyList::ParseOneLine(class CQueryScanner &,int,class XPtr &)",
    "public: class CRestriction * __thiscall CRestriction::Clone(void)const",
    "private: static unsigned short * CGlobalPropFileRefresher::_wcsFileName",
    "long __stdcall GetOleError(class CException &)",
    "public: int __thiscall CMachineAdmin::IsCIEnabled(void)",
    "_StopFWCiSvcWork@16",
    "public: void __thiscall CFwAsyncWorkItem::Done(void)",
    "public: unsigned long __thiscall CRcovStrmTrans::Read(void *,unsigned long)",
    "public: void __thiscall CCatState::ChangeCurrentMachine(unsigned short const *)",
    "public: int __thiscall CPropStoreManager::ReadProperty(class CCompositePropRecord &,unsigned long,struct tagPROPVARIANT &)",
    "public: __thiscall CMetaDataMgr::CMetaDataMgr(int,enum CiVRootTypeEnum,unsigned long,unsigned short const *)",
    "public: int __thiscall CCatalogAdmin::IsStarted(void)",
    "public: unsigned char * __thiscall CGenericCiProxy::GetEntryBuffer(unsigned long &)",
    "public: virtual __thiscall CGenericCiProxy::~CGenericCiProxy(void)",
    "public: static void __stdcall CDbContent::operator delete(void *)",
    "public: void __thiscall CPropStoreManager::MakeBackupCopy(struct IProgressNotify *,int &,class CiStorage &,struct ICiEnumWorkids *,struct IEnumString * *)",
    "long __stdcall GetScodeError(class CException &)",
    "public: void __thiscall CNotRestriction::Marshall(class PSerStream &)const",
    "int __stdcall SaCreateAndCopy(class PMemoryAllocator &,struct tagSAFEARRAY *,struct tagSAFEARRAY * *)",
    "public: virtual void __thiscall CMemDeSerStream::GetWChar(unsigned short *,unsigned long)",
    "public: void __thiscall CPropertyRestriction::SetValue(struct _GUID *)",
    "public: class CDbByGuid & __thiscall CDbByGuid::operator=(class CDbByGuid const &)",
    "public: __thiscall CScopeEnum::~CScopeEnum(void)",
    "public: class CScopeEnum * __thiscall CCatalogAdmin::QueryScopeEnum(void)",
    "public: static unsigned short * __stdcall CDbCmdTreeNode::AllocAndCopyWString(unsigned short const *)",
    "public: int __thiscall CMetaDataMgr::ExtensionHasScriptMap(unsigned short const *)",
    "public: virtual unsigned long __stdcall CDbProperties::AddRef(void)",
    "public: void __thiscall CValueNormalizer::PutMaxValue(unsigned long,unsigned long &,enum VARENUM)",
    "private: void __thiscall CPropStoreInfo::ChangeDirty(int)",
    "public: virtual long __stdcall CEnumWorkid::QueryInterface(struct _GUID const &,void * *)",
    "public: void __thiscall CMachineAdmin::RemoveCatalog(unsigned short const *,int)",
    "public: __thiscall CVirtualString::CVirtualString(unsigned int)",
    "DllGetClassObject",
    "public: int __thiscall CPropStoreManager::ReadProperty(unsigned long,unsigned long,struct tagPROPVARIANT *,unsigned int *)",
    "public: int __thiscall CPropertyStore::ReadProperty(unsigned long,unsigned long,struct tagPROPVARIANT &)",
    "public: virtual void __thiscall CMemDeSerStream::SkipBlob(unsigned long)",
    "void __stdcall GetStackTrace(char *,unsigned long)",
    "public: int __thiscall CDbParameter::Copy(struct tagDBPARAMETER const &)",
    "public: __thiscall CDbQueryResults::~CDbQueryResults(void)",
    "public: __thiscall CDbSelectNode::CDbSelectNode(void)",
    "protected: void __thiscall CDbCmdTreeNode::InsertChild(class CDbCmdTreeNode *)",
    "public: __thiscall CDbContentRestriction::CDbContentRestriction(unsigned short const *,class CDbColumnNode const &,unsigned long,unsigned long)",
    "public: int __thiscall CEmptyPropertyList::GetPropInfo(unsigned short const *,class CDbColId * *,unsigned short *,unsigned int *)",
    "public: void __thiscall CIndexTable::GetUserHdrInfo(unsigned int &,int &)",
    "public: unsigned long __thiscall CPropertyStoreWids::NextWorkId(void)",
    "public: unsigned short * __thiscall CRegAccess::Read(unsigned short const *,unsigned short const *)",
    "public: void __thiscall CMetaDataMgr::EnumVServers(class CMetaDataVirtualServerCallBack &)",
    "public: __thiscall CDbPropIDSet::CDbPropIDSet(void)",
    "public: virtual unsigned long __thiscall CMemDeSerStream::PeekULong(void)",
    "public: void __thiscall CStorageVariant::SetI4(long,unsigned int)",
    "public: static int __stdcall CImpersonateSystem::IsRunningAsSystem(void)",
    "CIRestrictionToFullTree",
    "CollectCIPerformanceData",
    "public: int __thiscall CPidLookupTable::FindPropid(class CFullPropSpec const &,unsigned long &,int)",
    "public: short __thiscall CAllocStorageVariant::GetBOOL(unsigned int)const",
    "int __stdcall GetSecret(unsigned short const *,unsigned short const *,unsigned short * *,unsigned long *)",
    "public: __thiscall CAllocStorageVariant::CAllocStorageVariant(struct _GUID const *,class PMemoryAllocator &)",
    "public: unsigned short * __thiscall CQueryScanner::AcqPhrase(void)",
    "public: class CCatalogAdmin * __thiscall CCatalogEnum::QueryCatalogAdmin(void)",
    "public: int __thiscall CKeyArray::FillMax(int)",
    "public: int __thiscall CDbCmdTreeNode::UnMarshall(class PDeSerStream &)",
    "public: void __thiscall CMmStreamConsecBuf::Map(unsigned long)",
    "public: void __thiscall CPhysStorage::Reopen(int)",
    "private: virtual void __thiscall CPhysIndex::ReOpenStream(void)",
    "public: int __thiscall CPhysStorage::RequiresFlush(unsigned long)",
    "public: __thiscall SStorageObject::~SStorageObject(void)",
    "public: static int __stdcall CiStorage::CheckHasIndexTable(unsigned short const *)",
    "public: virtual void __thiscall CPropertyList::AddEntry(class CPropEntry *,int)",
    "public: void __thiscall CBaseStorageVariant::Marshall(class PSerStream &)const",
    "public: void __thiscall CDbScalarValue::Value(class CStorageVariant &)",
    "public: __thiscall CSdidLookupTable::~CSdidLookupTable(void)",
    "public: __thiscall CWordRestriction::~CWordRestriction(void)",
    "public: int __thiscall CDbSortSet::Add(class CDbColId const &,unsigned long,unsigned int)",
    "public: __thiscall CLangList::CLangList(struct ICiCLangRes *,unsigned long)",
    "public: void __thiscall CPidRemapper::ReBuild(class CPidMapper const &)",
    "public: virtual char * __thiscall CQMemDeSerStream::GetString(void)",
    "public: int __thiscall CDbPropBaseRestriction::SetProperty(struct tagDBID const &)",
    "public: __thiscall CCatState::CCatState(void)",
    "unsigned __int64 __cdecl _wcstoui64(unsigned short const *,unsigned short * *,int)",
    "void __stdcall ciDelete(void *)",
    "void __stdcall CIShutdown(void)",
    "protected: __thiscall CPhysStorage::CPhysStorage(class PStorage &,class PStorageObject &,unsigned long,unsigned int,class PMmStream *,int,unsigned int,int)",
    "public: void __thiscall CDiskFreeStatus::UpdateDiskLowInfo(void)",
    "void __stdcall SetScopeProperties(struct ICommand *,unsigned int,unsigned short const * const *,unsigned long const *,unsigned short const * const *,unsigned short const * const *)",
    "CIBuildQueryTree",
    "public: __thiscall CColumns::~CColumns(void)",
    "public: __thiscall CQMemSerStream::CQMemSerStream(unsigned int)",
    "public: int __thiscall CPropStoreManager::ReadPrimaryProperty(unsigned long,unsigned long,struct tagPROPVARIANT &)",
    "public: virtual unsigned long __stdcall CFwPropertyMapper::Release(void)",
    "public: int __thiscall CDynStream::MarkDirty(void)",
    "unsigned long __stdcall MultiByteToXArrayWideChar(unsigned char const *,unsigned long,unsigned int,class XArray &)",
    "public: __thiscall CPerfMon::~CPerfMon(void)",
    "CITextToFullTreeEx",
    "public: unsigned long __thiscall CPropStoreManager::BeginTransaction(void)",
    "public: void __thiscall CMmStream::Open(unsigned short const *,unsigned long,unsigned long,unsigned long,unsigned long,int)",
    "public: void __thiscall PRcovStorageObj::VerifyConsistency(void)",
    "public: __thiscall CRegAccess::CRegAccess(unsigned long,unsigned short const *)",
    "public: __thiscall CFwEventItem::CFwEventItem(unsigned short,unsigned long,unsigned short,unsigned long,void *)",
    "public: virtual void __thiscall CQMemDeSerStream::GetGUID(struct _GUID &)",
    "public: int __thiscall CMachineAdmin::IsCIStarted(void)",
    "public: int __thiscall CDbColId::operator==(class CDbColId const &)const",
    "public: int __thiscall CWebServer::GetCGIVariableW(unsigned short const *,class XArray &,unsigned long &)",
    "void __stdcall SetSecret(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long)",
    "public: static class CDbCmdTreeNode * __stdcall CDbCmdTreeNode::UnMarshallTree(class PDeSerStream &)",
    "public: virtual unsigned long __thiscall CMemDeSerStream::GetULong(void)",
    "public: void __thiscall CRegAccess::EnumerateValues(unsigned short *,class CRegCallBack &)",
    "long __stdcall IsScopeValid(unsigned short const *,unsigned int,int)",
    "public: __thiscall CiStorage::CiStorage(unsigned short const *,struct ICiCAdviseStatus &,unsigned long,unsigned long,int)",
    "public: __thiscall CWorkQueue::~CWorkQueue(void)",
    "public: virtual __thiscall CQMemSerStream::~CQMemSerStream(void)",
    "public: void __thiscall CPropStoreManager::FastInit(class CiStorage *)",
    "public: void __thiscall CImpersonationTokenCache::ReInitializeIISScopes(void)",
    "public: double __thiscall CAllocStorageVariant::GetDATE(unsigned int)const",
    "public: unsigned long __thiscall CDriveInfo::GetSectorSize(void)",
    "SetupCache",
    "public: virtual unsigned long __stdcall CFwPropertyMapper::AddRef(void)",
    "public: __thiscall CRequestClient::CRequestClient(unsigned short const *,struct IDBProperties *)",
    "CollectCIISAPIPerformanceData",
    "public: __thiscall CNormalizer::CNormalizer(class PNoiseList &)",
    "public: static int __stdcall CDriveInfo::ContainsDrive(unsigned short const *)",
    "public: __thiscall CPersDeComp::CPersDeComp(class PDirectory &,unsigned long,class CPhysIndex &,unsigned long,int,int)",
    "public: __thiscall CDbPropBaseRestriction::~CDbPropBaseRestriction(void)",
    "public: virtual double __thiscall CMemDeSerStream::GetDouble(void)",
    "public: void __thiscall CSdidLookupTable::Empty(void)",
    "int __stdcall VT_VARIANT_LT(struct tagPROPVARIANT const &,struct tagPROPVARIANT const &)",
    "public: int __thiscall CMachineAdmin::StopCI(void)",
    "public: class PRcovStorageObj * __thiscall CiStorage::QueryVirtualScopeList(unsigned long)",
    "public: void __thiscall CPropertyRestriction::SetValue(struct tagBLOB &)",
    "public: __thiscall CMachineAdmin::~CMachineAdmin(void)",
    "public: __thiscall CNatLanguageRestriction::CNatLanguageRestriction(unsigned short const *,class CFullPropSpec const &,unsigned long)",
    "public: __thiscall CSort::~CSort(void)",
    "private: unsigned int __thiscall CPropStoreInfo::Lookup(unsigned long)",
    "public: void __thiscall CCatState::ChangeCurrentDepth(int)",
    "public: void __thiscall CPhysStorage::ReturnBuffer(unsigned long,int,int)",
    "public: __thiscall CWorkManager::~CWorkManager(void)",
    "public: void __thiscall CWorkQueue::AddRefWorkThreads(void)",
    "unsigned short * __stdcall wcsipattern(unsigned short *,unsigned short const *)",
    "public: int __thiscall CPropStoreManager::ReadProperty(class CCompositePropRecord &,unsigned long,struct tagPROPVARIANT &,unsigned char *,unsigned int *)",
    "public: static int __stdcall CImpersonateSystem::IsImpersonated(void)",
    "public: unsigned long __thiscall CFileBuffer::fgetsw(class XGrowable &)",
    "public: virtual void __thiscall CMemDeSerStream::SkipFloat(void)",
    "public: void __thiscall CCatState::SetColumn(unsigned short const *,unsigned int)",
    "public: void __thiscall CPropStoreManager::CloseRecord(class CCompositePropRecordForWrites *)",
    "public: __thiscall CFileMapView::CFileMapView(unsigned short const *)",
    "public: virtual long __thiscall CQMemDeSerStream::GetLong(void)",
    "LocateCatalogsA",
    "public: class CCatalogEnum * __thiscall CMachineAdmin::QueryCatalogEnum(void)",
    "public: void __thiscall CEventItem::AddArg(char const *)",
    "public: int __thiscall CMachineAdmin::IsCIPaused(void)",
    "public: __thiscall CCiRegParams::CCiRegParams(unsigned short const *)",
    "public: void __thiscall CPropStoreManager::Empty(void)",
    "public: virtual void __thiscall CQMemSerStream::PutByte(unsigned char)",
    "public: virtual void __thiscall CQMemDeSerStream::SkipDouble(void)",
    "public: unsigned short const * __thiscall CCatState::GetColumn(unsigned int)const",
    "public: struct tagDBCOMMANDTREE * __thiscall CTextToTree::FormFullTree(void)",
    "public: virtual unsigned long __stdcall CQueryUnknown::Release(void)",
    "public: __thiscall CGenericCiProxy::CGenericCiProxy(class CSharedNameGen &,unsigned long,unsigned long)",
    "public: void __thiscall CFullPath::MakePath(unsigned short const *,unsigned int)",
    "public: void __thiscall CPidRemapper::Set(class XArray &)",
    "void __stdcall DecodeURLEscapes(unsigned char *,unsigned long &,unsigned short *,unsigned long)",
    "CITextToSelectTreeEx",
    "public: __thiscall CStandardPropMapper::CStandardPropMapper(void)",
    "public: void __thiscall CFwEventItem::AddArg(unsigned short const *)",
    "private: void __thiscall CPropertyStore::ReleaseRead(class CReadWriteLockRecord &)",
    "public: virtual void __thiscall CMemDeSerStream::SkipULong(void)",
    "public: void __thiscall CRangeRestriction::SetStartKey(class CKeyBuf const &)",
    "public: __thiscall CMetaDataMgr::~CMetaDataMgr(void)",
    "public: unsigned long __thiscall CRegAccess::Get(unsigned short const *)",
    "unsigned short * __stdcall AllocHeapAndCopy(unsigned short const *,unsigned long &)",
    "public: class PRcovStorageObj * __thiscall CiStorage::QuerySdidLookupTable(unsigned long)",
    "public: __thiscall SStorageObject::SStorageObject(class PStorageObject *)",
    "public: void __thiscall CMachineAdmin::RemoveCatalogFiles(unsigned short const *)",
    "public: unsigned short const * __thiscall CCatState::GetCategory(unsigned int)const",
    "public: class PRcovStorageObj * __thiscall CiStorage::QueryPidLookupTable(unsigned long)",
    "public: int __thiscall CCatalogAdmin::IsPaused(void)",
    "public: int __thiscall CCatStateInfo::LokUpdate(void)",
    "public: void __thiscall CPidLookupTable::MakeBackupCopy(class PRcovStorageObj &,class PSaveProgressTracker &)",
    "public: void __thiscall CScopeAdmin::SetExclude(int)",
    "LoadTextFilter",
    "int __stdcall VT_VARIANT_EQ(struct tagPROPVARIANT const &,struct tagPROPVARIANT const &)",
    "void __stdcall GetStringFromLCID(unsigned long,unsigned short *)",
    "public: __thiscall CMemSerStream::CMemSerStream(unsigned char *,unsigned long)",
    "public: virtual void __thiscall CQMemDeSerStream::GetBlob(unsigned char *,unsigned long)",
    "int __stdcall ciIsValidPointer(void const *)",
    "public: int __thiscall CMachineAdmin::GetSZParam(unsigned short const *,unsigned short *,unsigned long)",
    "public: unsigned long __thiscall CPropStoreManager::WritePropertyInNewRecord(unsigned long,class CStorageVariant const &)",
    "public: unsigned char const * __thiscall CGenericCiProxy::GetStartupData(struct _GUID &,unsigned long &)",
    "public: int __thiscall CFilterDaemon::IsWaitingForDocument(void)",
    "public: virtual void __thiscall CQMemDeSerStream::SkipUShort(void)",
    "public: void __thiscall CStorageVariant::SetUI4(unsigned long,unsigned int)",
    "public: void __thiscall CRegNotify::DisableNotification(void)",
    "public: int __thiscall CPropStoreManager::ReadProperty(unsigned long,unsigned long,struct tagPROPVARIANT &)",
    "public: virtual long __stdcall CEmptyPropertyList::EnumPropInfo(unsigned long,unsigned short const * *,struct tagDBID * *,unsigned short *,unsigned int *)",
    "public: virtual void __thiscall CQMemDeSerStream::SkipWChar(unsigned long)",
    "int __stdcall ValidateScopeRestriction(class CRestriction *)",
    "unsigned long __stdcall SaComputeSize(unsigned short,struct tagSAFEARRAY &)",
    "public: void __thiscall CStorageVariant::SetCLSID(struct _GUID,unsigned int)",
    "public: void __thiscall CEventItem::AddError(unsigned long)",
    "public: virtual long __stdcall CEnumString::QueryInterface(struct _GUID const &,void * *)",
    "public: int __thiscall CDbSortSet::Add(class CDbSortKey const &,unsigned int)",
    "public: virtual void __thiscall CQMemDeSerStream::SkipChar(unsigned long)",
    "public: __thiscall CException::CException(void)",
    "public: __thiscall CSvcQuery::CSvcQuery(unsigned short const *,struct IDBProperties *)",
    "unsigned long __stdcall GetLCIDFromString(unsigned short *)",
    "public: unsigned long * __thiscall CPhysStorage::BorrowNewBuffer(unsigned long)",
    "public: virtual void __thiscall CQMemDeSerStream::SkipULong(void)",
    "public: virtual long __stdcall CFwPropertyMapper::PropertyToPropid(struct tagFULLPROPSPEC const *,int,unsigned long *)",
    "public: void __thiscall CCatState::SetCD(unsigned short const *)",
    "public: __thiscall CSortSet::CSortSet(unsigned int)",
    "public: __thiscall CFullPath::CFullPath(unsigned short const *,unsigned int)",
    "public: void __thiscall CScopeAdmin::SetLogonInfo(unsigned short const *,unsigned short const *,class CCatalogAdmin &)",
    "protected: void __thiscall CRcovStrmTrans::Unmap(enum CRcovStorageHdr::DataCopyNum)",
    "public: unsigned long __thiscall CPhysStorage::ShrinkFromFront(unsigned long,unsigned long)",
    "public: double __thiscall CAllocStorageVariant::GetR8(unsigned int)const",
    "public: int __thiscall CDbByGuid::UnMarshall(class PDeSerStream &)",
    "protected: int __thiscall CDbListAnchor::AppendListElement(class CDbCmdTreeNode *)",
    "public: int __thiscall CCatalogEnum::Next(void)",
    "public: int __thiscall CScopeEnum::Next(void)",
    "private: class CDbProjectListAnchor * __thiscall CDbProjectNode::_FindOrAddAnchor(void)",
    "public: static void __stdcall CDbCmdTreeNode::operator delete(void *)",
    "private: static unsigned long CGlobalPropFileRefresher::_dwLastCheckMoment",
    "public: int __thiscall CDbNumeric::UnMarshall(class PDeSerStream &)",
    "public: static void __stdcall CDbPropSet::operator delete(void *)",
    "public: unsigned int __thiscall CCatState::NumberOfSortProps(void)const",
    "public: void __thiscall CMetaDataMgr::EnumVPaths(class CMetaDataCallBack &)",
    "public: void __thiscall CVectorRestriction::Marshall(class PSerStream &)const",
    "public: int __thiscall CMachineAdmin::StartCI(void)",
    "public: __thiscall CDbColumnNode::CDbColumnNode(struct tagDBID const &,int)",
    "public: static unsigned short __stdcall CEmptyPropertyList::GetPropType(unsigned int)",
    "public: void __thiscall CRegChangeEvent::Init(void)",
    "public: __thiscall CFullPropSpec::CFullPropSpec(class CFullPropSpec const &)",
    "public: int __thiscall CDbSelectNode::SetRestriction(class CDbCmdTreeNode *)",
    "public: unsigned long __thiscall CMetaDataMgr::GetVPathAuthorization(unsigned short const *)",
    "public: __thiscall CDynStream::CDynStream(class PMmStream *)",
    "public: __thiscall CCatalogEnum::~CCatalogEnum(void)",
    "public: unsigned long __thiscall CDynStream::Read(void *,unsigned long)",
    "private: void __thiscall CPropertyStore::AcquireRead(class CReadWriteLockRecord &)",
    "long __stdcall MakeMetadataICommand(struct IUnknown * *,enum CiMetaData,unsigned short const *,unsigned short const *,struct IUnknown *)",
    "public: int __thiscall CPropertyStore::ReadProperty(class CPropRecordNoLock &,unsigned long,struct tagPROPVARIANT *,unsigned int *)",
    "public: int __thiscall CDbPropSet::Copy(struct tagDBPROPSET const &)",
    "public: long __thiscall CFilterDaemon::DoUpdates(void)",
    "long __stdcall DumpWorkId(unsigned short const *,unsigned long,unsigned char *,unsigned long &,unsigned short const *,unsigned short const *,unsigned long)",
    "public: virtual long __stdcall CDbProperties::GetProperties(unsigned long,struct tagDBPROPIDSET const * const,unsigned long *,struct tagDBPROPSET * *)",
    "public: void __thiscall CFullPropSpec::Marshall(class PSerStream &)const",
    "public: __thiscall CAllocStorageVariant::CAllocStorageVariant(enum VARENUM,unsigned long,class PMemoryAllocator &)",
    "public: __thiscall CRequestQueue::CRequestQueue(unsigned int,unsigned int,unsigned int,int,unsigned int,unsigned int,struct _GUID const &)",
    "CiCreateSecurityDescriptor",
    "public: __thiscall CRangeRestriction::CRangeRestriction(void)",
    "public: unsigned long __thiscall CMetaDataMgr::GetVPathSSLAccess(unsigned short const *)",
    "public: void __thiscall CEnumString::Append(unsigned short const *)",
    "public: void __thiscall CPhysStorage::MakeBackupCopy(class CPhysStorage &,class PSaveProgressTracker &)",
    "public: __thiscall CFwEventItem::~CFwEventItem(void)",
    "public: class COccRestriction * __thiscall COccRestriction::Clone(void)const",
    "public: static long __stdcall CCiOle::BindIFilter(unsigned short const *,struct IUnknown *,struct IFilter * *,int)",
    "public: __thiscall CColumns::CColumns(unsigned int)",
    "public: int __thiscall COLEPropManager::ReadProperty(class CFullPropSpec const &,struct tagPROPVARIANT &)",
    "public: virtual long __thiscall CMemDeSerStream::GetLong(void)",
    "public: __thiscall CDriveInfo::CDriveInfo(unsigned short const *,unsigned long)",
    "public: void __thiscall CQueryScanner::AcceptCommand(void)",
    "public: union tagCY __thiscall CAllocStorageVariant::GetCY(unsigned int)const",
    "public: void __thiscall CDbCmdTreeNode::Marshall(class PSerStream &)const",
    "private: class CDbScalarValue * __thiscall CDbPropertyRestriction::_FindOrAddValueNode(void)",
    "public: virtual long __stdcall CFwPropertyMapper::QueryInterface(struct _GUID const &,void * *)",
    "public: struct _GUID __thiscall CAllocStorageVariant::GetCLSID(unsigned int)const",
    "public: void __thiscall CStorageVariant::SetLPSTR(char const *,unsigned int)",
    "public: void __thiscall CRegChangeEvent::Reset(void)",
    "public: virtual long __stdcall CEmptyPropertyList::GetPropInfoFromId(struct tagDBID const *,unsigned short * *,unsigned short *,unsigned int *)",
    "void __stdcall DecodeEscapes(unsigned short *,unsigned long &,unsigned short *)",
    "public: __thiscall CDbSortKey::~CDbSortKey(void)",
    "public: __thiscall CUnfilteredRestriction::CUnfilteredRestriction(void)",
    "public: void __thiscall CDbQueryResults::Add(unsigned short *,unsigned long)",
    "public: void __thiscall CWorkManager::AbortWorkItems(void)",
    "public: __thiscall CGetDbProps::CGetDbProps(void)",
    "public: void __thiscall CScopeAdmin::SetAlias(unsigned short const *)",
    "public: void __thiscall CNatLanguageRestriction::SetPhrase(unsigned short const *)",
    "public: virtual __thiscall CFwAsyncWorkItem::~CFwAsyncWorkItem(void)",
    "public: struct _FILETIME __thiscall CAllocStorageVariant::GetFILETIME(unsigned int)const",
    "public: unsigned long __thiscall CRestriction::TreeCount(void)const",
    "public: __thiscall CDbColId::CDbColId(class CDbColId const &)",
    "public: void __thiscall CCombinedPropertyList::ClearList(void)",
    "public: void __thiscall CStorageVariant::SetI2(short,unsigned int)",
    "public: void __thiscall CMachineAdmin::AddCatalog(unsigned short const *,unsigned short const *)",
    "public: void __thiscall CPropStoreManager::Shutdown(void)",
    "public: virtual unsigned short * __thiscall CQMemDeSerStream::GetWString(void)",
    "public: static void __stdcall CDbCmdTreeNode::PutWString(class PSerStream &,unsigned short const *)",
    "public: __thiscall CPathParser::CPathParser(unsigned short const *,unsigned long)",
    "public: long __thiscall CCopyRcovObject::DoIt(void)",
    "public: void __thiscall CCatalogAdmin::AddScope(unsigned short const *,unsigned short const *,int,unsigned short const *,unsigned short const *)",
    "public: void __thiscall CPidLookupTable::Empty(void)",
    "public: int __thiscall CDbProp::UnMarshall(class PDeSerStream &)",
    "public: __thiscall CDbColumns::CDbColumns(unsigned int)",
    "public: void __thiscall CGetDbProps::GetProperties(struct IDBProperties *,unsigned long)",
    "public: unsigned short * __thiscall CKeyBuf::GetStr(void)const",
    "public: class CRestriction * __thiscall CParseCommandTree::ParseExpression(class CDbCmdTreeNode *)",
    "public: virtual long __thiscall CPidConverter::FPSToPROPID(class CFullPropSpec const &,unsigned long &)",
    "public: __thiscall CMachineAdmin::CMachineAdmin(unsigned short const *,int)",
    "public: __thiscall CColumns::CColumns(class CColumns const &)",
    "public: unsigned short __thiscall CQueryScanner::GetCommandChar(void)",
    "public: __thiscall CPidLookupTable::CPidLookupTable(void)",
    "public: void __thiscall CQueryScanner::ResetBuffer(unsigned short const *)",
    "public: void __thiscall CCatState::AddMachine(class XPtrST &)",
    "public: void __thiscall CStorageVariant::SetUI8(union _ULARGE_INTEGER,unsigned int)",
    "public: virtual __thiscall CRangeKeyRepository::~CRangeKeyRepository(void)",
    "public: __thiscall CWorkQueue::CWorkQueue(unsigned int,enum CWorkQueue::WorkQueueType)",
    "public: int __thiscall CMachineAdmin::GetDWORDParam(unsigned short const *,unsigned long &)",
    "public: int __thiscall CWin32RegAccess::Enum(unsigned short *,unsigned long)",
    "public: class CCompositePropRecord * __thiscall CPropStoreManager::OpenRecord(unsigned long,unsigned char *)",
    "SetCatalogState",
    "long __stdcall MakeISearch(struct ISearchQueryHits * *,class CDbRestriction *,unsigned short const *)",
    "public: unsigned short * __thiscall CQueryScanner::AcqPath(void)",
    "public: void __thiscall CWorkQueue::Remove(class PWorkItem *)",
    "DllRegisterServer",
    "public: __thiscall CAllocStorageVariant::CAllocStorageVariant(char const *,class PMemoryAllocator &)",
    "public: virtual long __stdcall CEnumString::Clone(struct IEnumString * *)",
    "public: void __thiscall CStorageVariant::SetFILETIME(struct _FILETIME,unsigned int)",
    "void __stdcall URLEscapeW(unsigned short const *,class CVirtualString &,unsigned long,int)",
    "CIState",
    "public: int __thiscall CPidLookupTable::EnumerateProperty(class CFullPropSpec &,unsigned int &)",
    "public: int __thiscall CDbParameter::UnMarshall(class PDeSerStream &)",
    "int __stdcall IsDirectoryWritable(unsigned short const *)",
    "public: __thiscall CCatalogAdmin::~CCatalogAdmin(void)",
    "public: __thiscall CDbColId::CDbColId(void)",
    "public: __thiscall CPhraseRestriction::~CPhraseRestriction(void)",
    "LocateCatalogs",
    "public: virtual unsigned short __thiscall CMemDeSerStream::GetUShort(void)",
    "public: __thiscall CMmStream::CMmStream(unsigned long,int)",
    "public: virtual unsigned long __stdcall CEnumString::AddRef(void)",
    "public: int __thiscall CDbSortNode::AddSortColumn(struct tagDBID const &,int,unsigned long)",
    "public: void __thiscall CWorkQueue::Shutdown(void)",
    "long __stdcall MakeLocalICommand(struct IUnknown * *,struct ICiCDocStore *,struct IUnknown *)",
    "public: int __thiscall CKeyArray::Add(int,class CKey const &)",
    "public: __thiscall CIndexTable::CIndexTable(class CiStorage &,class CTransaction &)",
    "public: virtual void __thiscall CMemDeSerStream::SkipGUID(void)",
    "unsigned long __stdcall GetBrowserCodepage(class CWebServer &,unsigned long)",
    "public: __thiscall CKeyArray::CKeyArray(int,int)",
    "public: virtual void __thiscall CQMemDeSerStream::SkipBlob(unsigned long)",
    "LoadIFilter",
    "DoneFILTERPerformanceData",
    "public: __thiscall CTransaction::CTransaction(void)",
    "public: virtual class CPropEntry const * __thiscall CCombinedPropertyList::Find(unsigned short const *)",
    "public: void __thiscall CCatState::SetCatalog(unsigned short const *)",
    "long __stdcall ParseCatalogURL(unsigned short const *,class XPtrST &,class XPtrST &)",
    "public: static void __stdcall CDriveInfo::GetDrive(unsigned short const *,unsigned short *)",
    "public: void __thiscall CDynStream::InitializeForWrite(unsigned long)",
    "public: void __thiscall CContentRestriction::Marshall(class PSerStream &)const",
    "private: static class CPropListFile * CLocalGlobalPropertyList::_pGlobalPropListFile",
    "public: __thiscall CDbSortSet::~CDbSortSet(void)"
  ],
  "qutil.dll": [
    "FreeCountedString",
    "InitializeNapAgentNotifier",
    "FreeIsolationInfo",
    "FreeNapComponentRegistrationInfoArray",
    "FreePrivateData",
    "AllocFixupInfo",
    "FreeFixupInfo",
    "FreeConnections",
    "DllRegisterServer",
    "FreeSoH",
    "FreeNetworkSoH",
    "AllocConnections",
    "FreeSystemHealthAgentState",
    "UninitializeNapAgentNotifier",
    "DllGetClassObject",
    "AllocCountedString",
    "FreeSoHAttributeValue",
    "DllCanUnloadNow",
    "FreeIsolationInfoEx",
    "DllUnregisterServer"
  ],
  "racpldlg.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "rasadhlp.dll": [
    "WSAttemptAutodialName",
    "WSAttemptAutodialAddr",
    "WSNoteSuccessfulHostentLookup",
    "AcsHlpAttemptConnection",
    "AcsHlpNbConnection",
    "AcsHlpNoteNewConnection"
  ],
  "rasapi32.dll": [
    "RasScriptInit",
    "RasGetConnectionStatistics",
    "RasEnumConnectionsW",
    "RasGetNapStatus",
    "RasSetEapUserDataW",
    "RasEnumConnectionsA",
    "RasGetConnectStatusW",
    "RasValidateEntryNameW",
    "RasHangUpWow",
    "RasIsSharedConnection",
    "RasfileLoad",
    "RasScriptTerm",
    "RasSetOldPassword",
    "RasGetAutodialParamW",
    "RasGetProjectionInfoW",
    "RasGetAutodialAddressW",
    "DwRasRefreshKerbScCreds",
    "RasEnumEntriesWow",
    "RasGetCountryInfoA",
    "RasSetEapUserDataA",
    "RasValidateEntryNameA",
    "RasGetConnectResponse",
    "RasDeleteEntryA",
    "RasSetCustomAuthDataA",
    "RasScriptReceive",
    "RasGetErrorStringW",
    "RasDialWow",
    "RasSetAutodialParamW",
    "RasScriptGetIpAddress",
    "RasGetAutodialParamA",
    "RasEnumDevicesA",
    "RasfileWrite",
    "RasConnectionNotificationA",
    "RasSetAutodialParamA",
    "RasSetEntryDialParamsA",
    "RasfilePutSectionName",
    "RasfileClose",
    "RasfileGetLine",
    "RasCreatePhonebookEntryA",
    "RasFreeEapUserIdentityW",
    "RasDialA",
    "RasRenameEntryW",
    "RasGetConnectStatusA",
    "RasGetCustomAuthDataW",
    "RasfileGetLineText",
    "RasGetAutodialEnableW",
    "RasfilePutLineText",
    "RasClearConnectionStatistics",
    "RasfileFindNextLine",
    "RasSetEntryPropertiesW",
    "RasfileFindMarkedLine",
    "RasGetAutodialAddressA",
    "RasEnumDevicesW",
    "RasDeleteSubEntryW",
    "RasGetEapUserIdentityA",
    "RasEditPhonebookEntryA",
    "RasfileInsertLine",
    "RasSetSubEntryPropertiesW",
    "RasfilePutKeyValueFields",
    "RasSetSharedAutoDial",
    "RasScriptExecute",
    "DDMGetPhonebookInfo",
    "RasScriptSend",
    "RasAutodialEntryToNetwork",
    "RasCreatePhonebookEntryW",
    "RasGetErrorStringA",
    "RasScriptGetEventCode",
    "RasSetEntryDialParamsW",
    "RasEnumAutodialAddressesA",
    "RasGetLinkStatistics",
    "RasfileFindPrevLine",
    "RasfileGetKeyValueFields",
    "RasGetProjectionInfoA",
    "RasEnumConnectionsWow",
    "RasGetEntryHrasconnA",
    "RasSetEntryPropertiesA",
    "DwEnumEntriesForAllUsers",
    "RasSetAutodialAddressW",
    "RasfileGetSectionName",
    "RasQuerySharedAutoDial",
    "RasAutoDialSharedConnection",
    "RasGetSubEntryPropertiesW",
    "RasEnumEntriesW",
    "UnInitializeRAS",
    "RasGetHport",
    "RasGetSubEntryPropertiesA",
    "RasGetCustomAuthDataA",
    "RasfileFindSectionLine",
    "DwEnumEntryDetails",
    "RasQueryRedialOnLinkFailure",
    "RasInvokeEapUI",
    "RasGetSubEntryHandleW",
    "DwDeleteSubEntry",
    "RasSetSubEntryPropertiesA",
    "RasGetEntryPropertiesW",
    "RasGetEntryDialParamsW",
    "RasSetCustomAuthDataW",
    "RasfileFindLastLine",
    "RasfileLoadInfo",
    "RasfileGetLineType",
    "RasDeleteSubEntryA",
    "RasSetAutodialEnableA",
    "RasGetConnectStatusWow",
    "RasGetErrorStringWow",
    "RasRenameEntryA",
    "SharedAccessResponseStringToList",
    "RasfilePutLineMark",
    "RasSetAutodialAddressA",
    "RasSetCredentialsA",
    "RasGetEntryHrasconnW",
    "RasGetCredentialsA",
    "SharedAccessResponseListToString",
    "RasGetCredentialsW",
    "RasSetAutodialEnableW",
    "RasHangUpW",
    "RasAutodialAddressToNetwork",
    "DwCloneEntry",
    "RasGetEapUserDataA",
    "RasIsRouterConnection",
    "RasGetEapUserDataW",
    "RasfileGetLineMark",
    "RasHangUpA",
    "RasfileFindNextKeyLine",
    "RasQuerySharedConnection",
    "RasGetCountryInfoW",
    "RasGetEntryDialParamsA",
    "RasConnectionNotificationW",
    "RasGetEapUserIdentityW",
    "RasEnumEntriesA",
    "RasGetEntryPropertiesA",
    "RasDeleteEntryW",
    "RasSetCredentialsW",
    "RasEnumAutodialAddressesW",
    "RasDialW",
    "RasfileFindFirstLine",
    "RasfileDeleteLine",
    "RasFreeEapUserIdentityA",
    "RasClearLinkStatistics",
    "RasEditPhonebookEntryW",
    "RasGetSubEntryHandleA",
    "DwRasUninitialize",
    "RasGetAutodialEnableA"
  ],
  "rasauto.dll": [
    "SetAddressDisabledEx",
    "ServiceMain"
  ],
  "raschap.dll": [
    "RasEapCreateConnectionProperties",
    "RasCpEnumProtocolIds",
    "RasCpGetInfo",
    "RasEapFreeMemory",
    "RasEapInvokeInteractiveUI",
    "DllCanUnloadNow",
    "RasEapGetCredentials",
    "RasEapGetInfo",
    "DllRegisterServer",
    "DllGetClassObject",
    "RasEapCreateUserProperties",
    "RasEapInvokeConfigUI",
    "DllUnregisterServer",
    "RasEapGetIdentity"
  ],
  "rasctrs.dll": [
    "CloseRasPerformanceData",
    "OpenRasPerformanceData",
    "CollectRasPerformanceData"
  ],
  "rasdlg.dll": [
    "RasWizGetNCCFlags",
    "RasWizGetSuggestedEntryName",
    "RasPhonebookDlgW",
    "RasDialDlgA",
    "RasSrvHangupConnection",
    "RasSrvIsConnectionConnected",
    "RasSrvEnumConnections",
    "RasPhonebookDlgA",
    "RasWizQueryMaxPageCount",
    "RouterEntryDlgA",
    "RasSrvCleanupService",
    "RasSrvAddWizPages",
    "RasWizGetUserInputConnectionName",
    "RasSrvIsServiceRunning",
    "RouterEntryDlgW",
    "RasAutodialQueryDlgA",
    "RasAutodialQueryDlgW",
    "RasAutodialDisableDlgA",
    "RasAutodialDisableDlgW",
    "RasSrvQueryShowIcon",
    "RasEntryDlgW",
    "RasMonitorDlgW",
    "RasUserPrefsDlg",
    "RasSrvAllowConnectionsConfig",
    "RasMonitorDlgA",
    "RasWizCreateNewEntry",
    "RasWizSetEntryName",
    "RasUserGetManualDial",
    "RasEntryDlgA",
    "RasSrvAddPropPages",
    "GetRasDialOutProtocols",
    "RasSrvInitializeService",
    "DwTerminalDlg",
    "RasWizIsEntryRenamable",
    "RasDialDlgW",
    "RasUserEnableManualDial"
  ],
  "rasman.dll": [
    "RasRpcDisconnectServer",
    "RasPortEnum",
    "RasGetNumPortOpen",
    "RasIsTrustedCustomDll",
    "RasGetConnectionParams",
    "RasSecurityDialogReceive",
    "DwRasGetHostByName",
    "RasPortReceiveEx",
    "RasDestroyConnection",
    "RasPortReceive",
    "RasPortOpen",
    "RasPppGetEapInfo",
    "RasBundleGetPort",
    "RasSecurityDialogGetInfo",
    "RasRPCBind",
    "RasGetPortUserData",
    "RasSetCalledIdInfo",
    "RasRpcGetCountryInfo",
    "RasPortStoreUserData",
    "RasRefreshKerbCreds",
    "RasRpcGetInstalledProtocolsEx",
    "RasPortRetrieveUserData",
    "RasSendCreds",
    "RasSetIoCompletionPort",
    "RasDeviceConnect",
    "RasGetKey",
    "RasGetDeviceName",
    "RasGetEapUserInfo",
    "RasGetInfo",
    "RasGetCustomScriptDll",
    "RasGetHportFromConnection",
    "RasSetRouterUsage",
    "RasPppStart",
    "RasBundleClearStatisticsEx",
    "RasRpcGetSystemDirectory",
    "RasSetEapUserInfo",
    "RasAddNotification",
    "RasRpcGetInstalledProtocols",
    "RasBundleClearStatistics",
    "RasGetBandwidthUtilization",
    "RasGetDevConfig",
    "RasGetUnicodeDeviceName",
    "RasSetDialParams",
    "RasSetConnectionUserData",
    "RasRpcGetUserPreferences",
    "RasGetProtocolInfo",
    "RasPortListen",
    "RasPortSetFramingEx",
    "RasGetConnectionUserData",
    "RasPortBundle",
    "RasFindPrerequisiteEntry",
    "RasCompressionGetInfo",
    "RasSetRasdialInfo",
    "RasSetEapLogonInfo",
    "RasPortGetInfo",
    "RasGetConnectInfo",
    "RasPortGetBundledPort",
    "RasGetDeviceNameW",
    "RasBundleGetStatisticsEx",
    "RasPnPControl",
    "RasRpcSetUserPreferences",
    "RasGetDeviceConfigInfo",
    "RasRequestNotification",
    "RasPppCallback",
    "RasDoIke",
    "RasPppGetInfo",
    "RasBundleGetStatistics",
    "RasActivateRoute",
    "RasStartRasAutoIfRequired",
    "RasDeviceGetInfo",
    "RasConnectionGetStatistics",
    "RasRpcEnumConnections",
    "RasSetAddressDisable",
    "RasSetDeviceConfigInfo",
    "RasProtocolEnum",
    "RasPortGetFramingEx",
    "IsRasmanProcess",
    "RasPppChangePassword",
    "RasRpcRemoteRasDeleteEntry",
    "RasInitialize",
    "RasCreateConnection",
    "RasDeviceEnum",
    "RasRegisterPnPHandler",
    "RasPppRetry",
    "RasPortSetFraming",
    "RasSetCommSettings",
    "RasRpcConnect",
    "RasGetHConnFromEntry",
    "RasRpcPortEnum",
    "RasSetCachedCredentials",
    "RasPortGetStatisticsEx",
    "RasRpcDeviceEnum",
    "RasSetBapPolicy",
    "RasPortGetStatistics",
    "RasStartPPPRenegotiation",
    "RasEnumConnectionPorts",
    "RasEnumLanNets",
    "RasFreeBuffer",
    "RasPortConnectComplete",
    "RasSendNotification",
    "RasPortClearStatistics",
    "RasSetKey",
    "RasSignalNewConnection",
    "RasLinkGetStatistics",
    "RasRpcDeleteEntry",
    "RasGetFramingCapabilities",
    "RasPortEnumProtocols",
    "RasPppStop",
    "RasRpcRemoteGetUserPreferences",
    "RasPortRegisterSlip",
    "RasRegisterPnPEvent",
    "RasGetNdiswanDriverCaps",
    "RasGetBuffer",
    "RasDeviceSetInfo",
    "RasGetCalledIdInfo",
    "RasSecurityDialogSend",
    "RasGetTimeSinceLastActivity",
    "RasRpcGetDevConfig",
    "RasRpcGetErrorString",
    "RasGetInfoEx",
    "RasDeAllocateRoute",
    "RasConnectionEnum",
    "RasPortSetProtocolCompression",
    "RasReferenceRasman",
    "RasSendPppMessageToRasman",
    "RasPortDisconnect",
    "RasReferenceCustomCount",
    "RasRpcDisconnect",
    "RasPortGetBundle",
    "RasPortClose",
    "RasRpcGetVersion",
    "RasRegisterRedialCallback",
    "RasPppStarted",
    "RasRpcUnloadDll",
    "RasPortOpenEx",
    "RasPortFree",
    "RasSetDevConfig",
    "RasSetConnectionParams",
    "RasEnableIpSec",
    "RasmanUninitialize",
    "RasRpcPortGetInfo",
    "RasGetDevConfigEx",
    "RasInitializeNoWait",
    "RasGetNapState",
    "RasPortReserve",
    "RasPortGetProtocolCompression",
    "RasRpcConnectServer",
    "RasActivateRouteEx",
    "RasIsIpSecEnabled",
    "RasRefConnection",
    "RasPortCancelReceive",
    "RasPortSend",
    "RasAddConnectionPort",
    "RasSetPortUserData",
    "RasGetUserCredentials",
    "RasRpcRemoteSetUserPreferences",
    "RasGetDialParams",
    "RasServerPortClose",
    "RasPortSetInfo",
    "RasRpcRemoteGetSystemDirectory",
    "RasCompressionSetInfo",
    "RasAllocateRoute",
    "RasEnableRasAudio",
    "RasPppSetEapInfo"
  ],
  "rasmans.dll": [
    "ServiceRequest",
    "_RasmanEngine",
    "SetEntryDialParams",
    "_RasmanInit",
    "ServiceMain"
  ],
  "rasmontr.dll": [
    "RutlFree",
    "RutlAssignmentFromTokens",
    "RutlGetOsVersion",
    "RutlDwordDup",
    "InitHelperDll",
    "RutlStrDup",
    "RutlIsHelpToken",
    "RutlCloseDumpFile",
    "RutlAlloc",
    "RutlAssignmentFromTokenAndDword",
    "RutlParse",
    "RutlCreateDumpFile",
    "RutlGetTagToken"
  ],
  "rasmxs.dll": [
    "DeviceSetInfo",
    "DeviceDone",
    "DeviceWork",
    "DeviceGetInfo",
    "DeviceEnum",
    "DeviceListen",
    "DeviceConnect"
  ],
  "rasppp.dll": [
    "RasCpEnumProtocolIds",
    "IpxCpInit",
    "RasCpGetInfo",
    "HelperResetDefaultInterfaceNet",
    "PppDdmCallbackDone",
    "PppStop",
    "PppDdmDeInit",
    "HelperSetDefaultInterfaceNetSlip",
    "PppDdmChangeNotification",
    "IpxcpBind",
    "PppDdmSendInterfaceInfo",
    "PppDdmStop",
    "StartPPP",
    "HelperResetDefaultInterfaceNetEx",
    "PppDdmBapCallbackResult",
    "RasSrvrActivateIp",
    "RasSrvrUninitialize",
    "PppDdmInit",
    "RasSrvrReleaseAddress",
    "RasSrvrInitialize",
    "PppDdmStart",
    "HelperSetDefaultInterfaceNetEx",
    "RasSrvrQueryServerAddresses",
    "RasSrvrAcquireAddress",
    "SendPPPMessageToEngine",
    "HelperSetDefaultInterfaceNet",
    "StopPPP"
  ],
  "rasqec.dll": [
    "RasQecProcessSoHResponseList",
    "RasQecGenericApi",
    "RasQecNotifyPPPDone",
    "DllCanUnloadNow",
    "RasQecRequestSoHList",
    "DllGetClassObject",
    "DllRegisterServer",
    "RasQecUninitialize",
    "DllUnregisterServer",
    "RasQecInitialize"
  ],
  "rasrad.dll": [
    "RasAcctProviderStartAccounting",
    "RasAcctProviderStopAccounting",
    "RasAuthProviderFreeAttributes",
    "RasAuthProviderTerminate",
    "RasAcctProviderInitialize",
    "RasAcctProviderFreeAttributes",
    "RasAuthConfigChangeNotification",
    "RasAcctProviderTerminate",
    "Close",
    "RasAcctProviderInterimAccounting",
    "RasAuthProviderAuthenticateUser",
    "RasAcctConfigChangeNotification",
    "RasAuthProviderInitialize",
    "Collect",
    "Open"
  ],
  "rassapi.dll": [
    "RasAdminPortDisconnect",
    "RasAdminSetUserParms",
    "RasAdminPortGetInfo",
    "RasAdminFreeBuffer",
    "RasAdminCompressPhoneNumber",
    "RasAdminPortClearStatistics",
    "RasAdminUserSetInfo",
    "RasAdminPortEnum",
    "RasAdminServerGetInfo",
    "RasAdminGetUserParms",
    "RasAdminGetUserAccountServer",
    "RasAdminUserGetInfo",
    "RasAdminGetErrorString"
  ],
  "rasser.dll": [
    "PortGetPortState",
    "PortCompressionSetInfo",
    "PortInit",
    "PortSetFraming",
    "PortTestSignalState",
    "PortSetINetCfg",
    "PortReceive",
    "PortEnum",
    "PortChangeCallback",
    "PortSend",
    "PortClose",
    "PortClearStatistics",
    "PortOpen",
    "PortGetStatistics",
    "PortSetInfo",
    "PortReceiveComplete",
    "PortDisconnect",
    "PortConnect",
    "PortGetInfo"
  ],
  "rastapi.dll": [
    "UnloadRastapiDll",
    "PortGetPortState",
    "PortCompressionSetInfo",
    "PortInit",
    "DeviceGetDevConfigEx",
    "DeviceEnum",
    "RastapiGetCalledID",
    "PortSetFraming",
    "PortGetIOHandle",
    "PortSetIoCompletionPort",
    "DeviceSetInfo",
    "PortTestSignalState",
    "PortReceive",
    "PortEnum",
    "DeviceListen",
    "GetZeroDeviceInfo",
    "PortChangeCallback",
    "PortSend",
    "PortClose",
    "RemovePort",
    "DeviceDone",
    "PortClearStatistics",
    "PortOpen",
    "PortGetStatistics",
    "EnableDeviceForDialIn",
    "DeviceConnect",
    "PortSetInfo",
    "PortReceiveComplete",
    "PortDisconnect",
    "DeviceSetDevConfig",
    "PortConnect",
    "GetConnectInfo",
    "DeviceWork",
    "RastapiSetCalledID",
    "PortGetInfo",
    "AddPorts",
    "DeviceGetInfo",
    "SetCommSettings",
    "DeviceGetDevConfig"
  ],
  "rastls.dll": [
    "RasEapCreateConnectionProperties",
    "RasEapCreateConnectionProperties_XP",
    "RasEapFreeMemory",
    "RasEapCreateUserProperties_XP",
    "RasEapInvokeInteractiveUI",
    "DllCanUnloadNow",
    "RasEapGetCredentials",
    "RasEapGetInfo",
    "DllRegisterServer",
    "DllGetClassObject",
    "RasEapCreateUserProperties",
    "RasEapInvokeConfigUI",
    "DllUnregisterServer",
    "RasEapGetIdentity"
  ],
  "rcbdyctl.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "rdchost.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "rdpcfgex.dll": [
    "ExtGetCapabilities",
    "ExtGetEncryptionLevelDescr",
    "ExtEncryptionLevels",
    "ExtStart",
    "ExtEnd",
    "ExGetCfgVersionInfo"
  ],
  "rdpdd.dll": "No exports",
  "rdpsnd.dll": [
    "widMessage",
    "wodMessage",
    "modMessage",
    "mxdMessage",
    "DriverProc",
    "midMessage",
    "auxMessage"
  ],
  "rdpwsx.dll": [
    "WsxWinStationRundown",
    "WsxLogonNotify",
    "WsxCopyContext",
    "WsxDuplicateContext",
    "WsxWinStationReInitialize",
    "WsxInitialize",
    "WsxDisconnect",
    "WsxInitializeClientData",
    "WsxSendAutoReconnectStatus",
    "WsxBrokenConnection",
    "WsxEscape",
    "WsxIcaStackIoControl",
    "WsxWinStationInitialize",
    "WsxVirtualChannelSecurity",
    "WsxConnect",
    "WsxClearContext",
    "WsxSetErrorInfo"
  ],
  "regapi.dll": [
    "RegWdEnumerateW",
    "RegConsoleShadowQueryA",
    "RegWinStationQueryA",
    "RegCdEnumerateW",
    "RegConsoleShadowQueryW",
    "RegIsTServer",
    "RegQueryOEMId",
    "RegWdDeleteW",
    "RegWdCreateA",
    "RegGetMachinePolicy",
    "RegWdEnumerateA",
    "RegPdEnumerateW",
    "RegCdQueryW",
    "RegUserConfigDelete",
    "RegWinStationSetNumValueW",
    "RegPdQueryW",
    "RegWinStationQueryNumValueW",
    "RegWdCreateW",
    "RegGetMachinePolicyEx",
    "RegGetUserConfigFromUserParameters",
    "RegWinStationQueryW",
    "RegCdCreateW",
    "RegWdDeleteA",
    "RegWinStationCreateA",
    "RegPdCreateA",
    "RegWinStationCreateW",
    "RegGetUserPolicy",
    "RegCdDeleteA",
    "RegCdQueryA",
    "RegPdQueryA",
    "RegWinStationQueryDefaultSecurity",
    "RegWinStationQuerySecurityW",
    "RegIsMachinePolicyAllowHelp",
    "RegOpenServerW",
    "RegOpenServerA",
    "RegFreeUtilityCommandList",
    "RegDefaultUserConfigQueryA",
    "RegUserConfigQuery",
    "RegWdQueryA",
    "RegUserConfigSet",
    "RegWinStationEnumerateA",
    "RegPdCreateW",
    "RegSAMUserConfig",
    "RegWinStationSetSecurityW",
    "RegMergeUserConfigWithUserParameters",
    "RegWinStationDeleteW",
    "RegWdQueryW",
    "RegWinStationQueryValueW",
    "RegWinStationDeleteA",
    "RegBuildNumberQuery",
    "RegCdCreateA",
    "RegCdDeleteW",
    "RegGetTServerVersion",
    "RegDenyTSConnectionsPolicy",
    "RegCdEnumerateA",
    "RegWinStationAccessCheck",
    "RegWinStationQueryEx",
    "RegWinStationQuerySecurityA",
    "RegCloseServer",
    "RegDefaultUserConfigQueryW",
    "RegPdDeleteW",
    "RegQueryUtilityCommandList",
    "RegPdDeleteA",
    "RegUserConfigRename",
    "RegWinStationEnumerateW",
    "RegPdEnumerateA",
    "WaitForTSConnectionsPolicyChanges",
    "RegIsMachineInHelpMode",
    "RegWinStationSetSecurityA"
  ],
  "regsvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "regwizc.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "remotepg.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "rend.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "resutils.dll": [
    "ResUtilFindBinaryProperty",
    "ClusWorkerCheckTerminate",
    "ResUtilEnumProperties",
    "ResUtilFindDwordProperty",
    "ResUtilFindLongProperty",
    "ResUtilGetBinaryProperty",
    "ResUtilGetResourceDependencyByClass",
    "ResUtilFindSzProperty",
    "ResUtilSetResourceServiceEnvironment",
    "ResUtilSetPropertyTable",
    "ResUtilSetExpandSzValue",
    "ResUtilFreeEnvironment",
    "ResUtilGetBinaryValue",
    "ResUtilGetResourceDependentIPAddressProps",
    "ResUtilGetSzProperty",
    "ClusWorkerStart",
    "ResUtilSetResourceServiceStartParameters",
    "ResUtilTerminateServiceProcessFromResDll",
    "ResUtilExpandEnvironmentStrings",
    "ResUtilEnumResourcesEx",
    "ResUtilResourcesEqual",
    "ResUtilSetPropertyTableEx",
    "ResUtilSetPropertyParameterBlock",
    "ResUtilStartResourceService",
    "ResUtilStopService",
    "ResUtilSetUnknownProperties",
    "ResUtilGetResourceDependencyByName",
    "ClusWorkerTerminate",
    "ResUtilEnumPrivateProperties",
    "ResUtilStopResourceService",
    "ResUtilIsResourceClassEqual",
    "ResUtilGetSzValue",
    "ResUtilSetDwordValue",
    "ResUtilSetSzValue",
    "ResUtilVerifyPrivatePropertyList",
    "ResUtilGetEnvironmentWithNetName",
    "ResUtilGetDwordValue",
    "ResUtilSetPropertyParameterBlockEx",
    "ResUtilPropertyListFromParameterBlock",
    "ResUtilGetMultiSzProperty",
    "ResUtilGetPropertySize",
    "ResUtilGetResourceName",
    "ResUtilSetMultiSzValue",
    "ResUtilResourceTypesEqual",
    "ResUtilSetPrivatePropertyList",
    "ResUtilDupParameterBlock",
    "ResUtilFindMultiSzProperty",
    "ResUtilGetDwordProperty",
    "ResUtilGetCoreClusterResources",
    "ResUtilFindExpandSzProperty",
    "ResUtilIsPathValid",
    "ResUtilVerifyResourceService",
    "ClusWorkerCreate",
    "ResUtilDupString",
    "ResUtilFindExpandedSzProperty",
    "ResUtilGetPropertiesToParameterBlock",
    "ResUtilFreeParameterBlock",
    "ResUtilFindDependentDiskResourceDriveLetter",
    "ResUtilGetPropertyFormats",
    "ResUtilCreateDirectoryTree",
    "ResUtilEnumResources",
    "ResUtilGetResourceDependency",
    "ResUtilGetPrivateProperties",
    "ResUtilAddUnknownProperties",
    "ResUtilVerifyService",
    "ResUtilSetBinaryValue",
    "ResUtilVerifyPropertyTable",
    "ResUtilGetAllProperties",
    "ResUtilGetResourceNameDependency",
    "ResUtilGetProperties",
    "ResUtilGetProperty"
  ],
  "rhttpaa.dll": [
    "NdrClientInitializeNew",
    "RpcBindingSetAuthInfoExW",
    "RpcBindingInqAuthClientExW",
    "RpcStringBindingParseA",
    "RpcErrorAddRecord",
    "RpcStringBindingParseW",
    "RpcBindingInqObject",
    "NdrClientCall2",
    "I_RpcGetBufferWithObject",
    "RpcBindingInqAuthInfoA",
    "RpcBindingToStringBindingW",
    "NDRCContextUnmarshall",
    "RpcIfInqId",
    "RpcStringBindingComposeW",
    "RpcBindingSetAuthInfoW",
    "RpcAsyncGetCallStatus",
    "RpcStringBindingComposeA",
    "I_RpcFreeBuffer",
    "RpcBindingCopy",
    "RpcBindingFromStringBindingW",
    "RpcBindingInqAuthInfoExA",
    "RpcErrorGetNumberOfRecords",
    "RpcErrorLoadErrorInfo",
    "RpcBindingReset",
    "RpcErrorResetEnumeration",
    "I_RpcGetBuffer",
    "RpcBindingFree",
    "RpcAsyncInitializeHandle",
    "I_RpcAsyncSetHandle",
    "RpcBindingFromStringBindingA",
    "RpcRaiseException",
    "RpcBindingSetAuthInfoA",
    "NdrAsyncClientCall",
    "RpcBindingSetAuthInfoExA",
    "RpcEpResolveBinding",
    "RpcErrorSaveErrorInfo",
    "RpcIfIdVectorFree",
    "RpcBindingInqAuthClientA",
    "RpcErrorGetNextRecord",
    "RpcAsyncCompleteCall",
    "RpcMgmtSetComTimeout",
    "I_RpcNDRCGetWireRepresentation",
    "NDRCContextMarshall",
    "I_RpcAllocate",
    "I_RpcReceive",
    "I_RpcSendReceive",
    "NdrClientInitialize",
    "RpcErrorClearInformation",
    "RpcErrorEndEnumeration",
    "NdrClientContextUnmarshall",
    "RpcExceptionFilter",
    "I_RpcFreePipeBuffer",
    "RpcBindingInqAuthInfoW",
    "NDRCContextBinding",
    "RpcBindingToStringBindingA",
    "RpcSsDestroyClientContext",
    "I_RpcSend",
    "RpcBindingInqAuthClientExA",
    "I_RpcExceptionFilter",
    "RpcProtseqVectorFreeW",
    "RpcStringFreeW",
    "RpcAsyncCancelCall",
    "RpcBindingInqAuthClientW",
    "NdrAllocate",
    "RpcBindingInqAuthInfoExW",
    "NdrClientContextMarshall",
    "RpcBindingInqOption",
    "RpcBindingSetOption",
    "RpcErrorStartEnumeration",
    "RpcBindingSetObject",
    "RpcMgmtInqServerPrincNameW",
    "RpcStringFreeA"
  ],
  "riched20.dll": [
    "RichEdit10ANSIWndProc",
    "REExtendedRegisterClass",
    "IID_IRichEditOle",
    "IID_ITextServices",
    "CreateTextServices",
    "IID_ITextHost2",
    "IID_ITextHost",
    "RichEditANSIWndProc",
    "IID_IRichEditOleCallback"
  ],
  "riched32.dll": "No exports",
  "rnr20.dll": [
    "NSPStartup"
  ],
  "routetab.dll": [
    "GetRouteTable",
    "AddRoute",
    "SetAddrChangeNotifyEvent",
    "FreeRouteTable",
    "DeleteRoute",
    "FreeIPAddressTable",
    "GetIfEntry",
    "ReloadIPAddressTable",
    "GetIPAddressTable",
    "RefreshAddresses"
  ],
  "rpcns4.dll": [
    "RpcNsBindingExportPnPW",
    "RpcNsProfileEltInqBeginW",
    "RpcNsMgmtEntryCreateA",
    "RpcNsBindingExportPnPA",
    "RpcNsBindingSelect",
    "RpcNsBindingUnexportPnPW",
    "RpcNsEntryExpandNameA",
    "RpcNsMgmtEntryInqIfIdsA",
    "RpcNsProfileEltRemoveA",
    "RpcNsBindingLookupBeginW",
    "RpcNsGroupDeleteA",
    "RpcNsGroupMbrInqNextA",
    "RpcNsMgmtEntryInqIfIdsW",
    "RpcNsEntryObjectInqBeginW",
    "RpcNsMgmtEntryDeleteW",
    "RpcNsGroupMbrInqNextW",
    "RpcNsMgmtHandleSetExpAge",
    "RpcNsProfileEltAddW",
    "RpcNsEntryObjectInqBeginA",
    "RpcNsProfileEltInqBeginA",
    "RpcNsProfileEltAddA",
    "RpcNsMgmtInqExpAge",
    "I_RpcNsGetBuffer",
    "I_RpcNsRaiseException",
    "RpcNsBindingExportW",
    "RpcNsBindingLookupDone",
    "RpcNsBindingUnexportPnPA",
    "RpcNsGroupMbrAddA",
    "RpcNsGroupMbrAddW",
    "RpcNsProfileDeleteW",
    "RpcNsMgmtEntryCreateW",
    "RpcNsProfileEltInqNextW",
    "RpcNsBindingImportNext",
    "RpcNsBindingExportA",
    "RpcNsBindingLookupNext",
    "RpcNsEntryObjectInqDone",
    "RpcNsBindingUnexportA",
    "RpcNsGroupMbrRemoveA",
    "RpcNsMgmtBindingUnexportA",
    "RpcNsMgmtBindingUnexportW",
    "RpcNsBindingImportDone",
    "RpcIfIdVectorFree",
    "I_RpcNsNegotiateTransferSyntax",
    "RpcNsMgmtSetExpAge",
    "RpcNsGroupMbrRemoveW",
    "RpcNsBindingImportBeginA",
    "RpcNsEntryExpandNameW",
    "RpcNsGroupMbrInqDone",
    "RpcNsProfileEltRemoveW",
    "I_RpcReBindBuffer",
    "RpcNsGroupMbrInqBeginW",
    "RpcNsBindingUnexportW",
    "RpcNsBindingLookupBeginA",
    "RpcNsGroupMbrInqBeginA",
    "RpcNsProfileEltInqDone",
    "RpcNsBindingImportBeginW",
    "RpcNsGroupDeleteW",
    "RpcNsMgmtEntryDeleteA",
    "RpcNsProfileEltInqNextA",
    "I_RpcNsSendReceive",
    "RpcNsEntryObjectInqNext",
    "RpcNsProfileDeleteA",
    "I_GetDefaultEntrySyntax"
  ],
  "rpcrt4.dll": [
    "I_RpcBindingInqLocalClientPID",
    "NdrStubInitializeMarshall",
    "RpcCertGeneratePrincipalNameW",
    "float_array_from_ndr",
    "NdrServerContextNewUnmarshall",
    "RpcAsyncGetCallStatus",
    "I_RpcTransDatagramAllocate2",
    "NdrEncapsulatedUnionBufferSize",
    "RpcEpResolveBinding",
    "NdrpGetTypeFormatString",
    "NdrClientContextUnmarshall",
    "I_RpcBindingInqDynamicEndpointW",
    "MesDecodeIncrementalHandleCreate",
    "CStdStubBuffer_AddRef",
    "NdrConformantVaryingStructMarshall",
    "NdrConformantVaryingStructFree",
    "I_RpcRequestMutex",
    "NdrXmitOrRepAsFree",
    "NdrNonConformantStringBufferSize",
    "NdrRpcSmClientAllocate",
    "NdrConformantStringUnmarshall",
    "DceErrorInqTextW",
    "I_RpcMapWin32Status",
    "UuidToStringA",
    "NdrDllRegisterProxy",
    "RpcBindingToStringBindingW",
    "NdrEncapsulatedUnionMarshall",
    "pfnMarshallRoutines",
    "RpcMgmtEnableIdleCleanup",
    "NDRSContextMarshallEx",
    "NdrMesTypeEncode",
    "RpcServerUseProtseqExA",
    "NdrConvert2",
    "NdrInterfacePointerBufferSize",
    "NdrMesProcEncodeDecode2",
    "RpcAsyncAbortCall",
    "I_RpcBindingToStaticStringBindingW",
    "I_RpcServerSetAddressChangeFn",
    "NdrServerCall",
    "NdrComplexArrayMemorySize",
    "NdrGetDcomProtocolVersion",
    "NdrConformantStringMemorySize",
    "RpcNetworkIsProtseqValidW",
    "MesEncodeDynBufferHandleCreate",
    "NDRCContextMarshall",
    "NdrServerInitializeUnmarshall",
    "I_RpcAllocate",
    "NdrClientInitialize",
    "NdrNonEncapsulatedUnionFree",
    "RpcServerUseProtseqEpA",
    "I_RpcServerUseProtseqEp2A",
    "NdrSimpleStructMarshall",
    "I_RpcExceptionFilter",
    "RpcEpRegisterNoReplaceW",
    "RpcServerUnregisterIfEx",
    "NdrSimpleTypeMarshall",
    "RpcAsyncCancelCall",
    "RpcServerUseAllProtseqsEx",
    "RpcMgmtInqServerPrincNameW",
    "NdrNonEncapsulatedUnionMarshall",
    "NdrServerInitializeNew",
    "UuidToStringW",
    "RpcSmDestroyClientContext",
    "NdrProxyErrorHandler",
    "RpcBindingSetAuthInfoW",
    "pfnUnmarshallRoutines",
    "RpcAsyncRegisterInfo",
    "GlobalMutexRequestExternal",
    "RpcMgmtSetAuthorizationFn",
    "I_RpcServerInqAddressChangeFn",
    "RpcInitializeAsyncHandle",
    "I_RpcBCacheAllocate",
    "I_RpcLogEvent",
    "NdrGetBuffer",
    "RpcRaiseException",
    "I_RpcBCacheFree",
    "MesIncrementalHandleReset",
    "MIDL_wchar_strcpy",
    "NdrConformantStructBufferSize",
    "MesEncodeFixedBufferHandleCreate",
    "NdrXmitOrRepAsBufferSize",
    "long_from_ndr_temp",
    "NdrUserMarshalMarshall",
    "RpcGetAuthorizationContextForClient",
    "RpcSsDisableAllocate",
    "I_RpcBindingIsClientLocal",
    "NdrMesTypeDecode2",
    "NdrConformantStructMemorySize",
    "RpcBindingInqAuthClientW",
    "data_from_ndr",
    "NdrStubGetBuffer",
    "I_RpcServerRegisterForwardFunction",
    "NdrMesTypeAlignSize2",
    "NdrClientCall2",
    "NdrOutInit",
    "NdrProxyGetBuffer",
    "NdrpGetTypeGenCookie",
    "RpcObjectSetType",
    "I_RpcFreeBuffer",
    "NdrRpcSsDefaultAllocate",
    "RpcErrorResetEnumeration",
    "NDRSContextUnmarshallEx",
    "RpcMgmtStatsVectorFree",
    "NdrStubForwardingFunction",
    "RpcMgmtEpUnregister",
    "I_RpcBindingHandleToAsyncHandle",
    "SimpleTypeMemorySize",
    "RpcServerUseAllProtseqsIf",
    "CStdStubBuffer_IsIIDSupported",
    "UuidCreate",
    "RpcMgmtSetComTimeout",
    "RpcTestCancel",
    "NdrMesSimpleTypeAlignSize",
    "NdrMesProcEncodeDecode",
    "I_RpcPauseExecution",
    "RpcErrorStartEnumeration",
    "CreateProxyFromTypeInfo",
    "RpcCancelThreadEx",
    "NdrUserMarshalSimpleTypeConvert",
    "RpcNsBindingInqEntryNameA",
    "RpcNetworkIsProtseqValidA",
    "RpcObjectSetInqFn",
    "NdrMesSimpleTypeEncode",
    "NdrEncapsulatedUnionFree",
    "NdrInterfacePointerMemorySize",
    "I_RpcBindingCopy",
    "GlobalMutexClearExternal",
    "I_RpcFree",
    "NdrMapCommAndFaultStatus",
    "NdrPartialIgnoreServerUnmarshall",
    "RpcErrorGetNumberOfRecords",
    "NdrVaryingArrayFree",
    "NdrContextHandleSize",
    "RpcServerInqDefaultPrincNameW",
    "NdrConformantStructUnmarshall",
    "RpcBindingInqAuthClientA",
    "NdrClearOutParameters",
    "RpcServerUseProtseqExW",
    "NdrFullPointerInsertRefId",
    "RpcMgmtInqIfIds",
    "NdrDllUnregisterProxy",
    "RpcServerRegisterIfEx",
    "RpcServerRegisterAuthInfoW",
    "NdrTypeFree",
    "RpcNetworkInqProtseqsW",
    "RpcSmSetClientAllocFree",
    "RpcEpRegisterA",
    "RpcSsContextLockShared",
    "double_array_from_ndr",
    "NdrUserMarshalMemorySize",
    "RpcGetAsyncCallStatus",
    "RpcMgmtEpEltInqNextW",
    "long_from_ndr",
    "I_RpcBindingInqSecurityContext",
    "UuidCreateSequential",
    "RpcServerRegisterAuthInfoA",
    "NdrSendReceive",
    "I_RpcBindingInqConnId",
    "NdrConformantArrayBufferSize",
    "RpcServerInqCallAttributesW",
    "RpcServerUseProtseqEpW",
    "I_RpcTransGetThreadEvent",
    "RpcServerUseAllProtseqs",
    "TowerConstruct",
    "I_RpcServerUseProtseqEp2W",
    "NdrConformantArrayFree",
    "I_RpcDeleteMutex",
    "RpcNsBindingInqEntryNameW",
    "RpcUserFree",
    "I_RpcTransIoCancelled",
    "I_RpcProxyNewConnection",
    "CStdStubBuffer_DebugServerQueryInterface",
    "NdrVaryingArrayUnmarshall",
    "SimpleTypeAlignment",
    "I_RpcNsBindingSetEntryNameA",
    "CStdStubBuffer_DebugServerRelease",
    "RpcMgmtStopServerListening",
    "NdrClientContextMarshall",
    "MesEncodeIncrementalHandleCreate",
    "RpcBindingSetObject",
    "NdrContextHandleInitialize",
    "NdrCorrelationFree",
    "data_size_ndr",
    "NdrSimpleStructFree",
    "MesInqProcEncodingId",
    "NdrpCreateProxy",
    "NdrFixedArrayMarshall",
    "NdrDllGetClassObject",
    "NdrStubCall2",
    "NdrVaryingArrayMemorySize",
    "NdrFixedArrayUnmarshall",
    "NdrGetSimpleTypeBufferSize",
    "NdrSimpleStructBufferSize",
    "NdrFullPointerXlatFree",
    "RpcAsyncInitializeHandle",
    "float_from_ndr",
    "NdrConformantStringBufferSize",
    "I_RpcReallocPipeBuffer",
    "RpcMgmtEpEltInqNextA",
    "RpcCancelAsyncCall",
    "I_RpcSendReceive",
    "NdrTypeMarshall",
    "NdrUserMarshalFree",
    "NdrXmitOrRepAsMarshall",
    "RpcBindingInqAuthInfoW",
    "I_RpcSend",
    "RpcProtseqVectorFreeW",
    "RpcSsDontSerializeContext",
    "RpcStringFreeW",
    "NdrServerContextNewMarshall",
    "RpcBindingInqAuthClientExW",
    "I_UuidCreate",
    "RpcStringBindingParseA",
    "I_RpcConnectionInqSockBuffSize",
    "NdrFixedArrayMemorySize",
    "NdrpReleaseTypeFormatString",
    "I_RpcConnectionSetSockBuffSize",
    "IUnknown_AddRef_Proxy",
    "NDRSContextUnmarshall2",
    "RpcCertGeneratePrincipalNameA",
    "NdrComplexStructBufferSize",
    "RpcBindingCopy",
    "RpcEpUnregister",
    "RpcMgmtIsServerListening",
    "RpcBindingFree",
    "MesDecodeBufferHandleCreate",
    "RpcBindingFromStringBindingA",
    "RpcSsGetThreadHandle",
    "NdrServerInitializeMarshall",
    "NdrpCreateStub",
    "I_RpcFreePipeBuffer",
    "NDRCContextBinding",
    "RpcSmSwapClientAllocFree",
    "NDRSContextMarshall2",
    "NdrpVarVtOfTypeDesc",
    "RpcMgmtSetServerStackSize",
    "I_RpcSessionStrictContextHandle",
    "NdrpMemoryIncrement",
    "NdrInterfacePointerFree",
    "NdrFullPointerFree",
    "NDRSContextUnmarshall",
    "I_RpcServerUseProtseq2W",
    "short_array_from_ndr",
    "NdrNonConformantStringUnmarshall",
    "RpcServerRegisterIf",
    "NdrTypeSize",
    "RpcMgmtInqStats",
    "RpcSsContextLockExclusive",
    "NdrByteCountPointerUnmarshall",
    "RpcServerInqDefaultPrincNameA",
    "I_RpcNsInterfaceUnexported",
    "UuidFromStringA",
    "NdrUserMarshalBufferSize",
    "RpcSsFree",
    "NdrFixedArrayFree",
    "NdrConformantArrayUnmarshall",
    "NdrInterfacePointerMarshall",
    "NdrNonConformantStringMarshall",
    "RpcBindingReset",
    "UuidHash",
    "NdrXmitOrRepAsMemorySize",
    "NdrNonEncapsulatedUnionUnmarshall",
    "RpcRevertToSelfEx",
    "RpcEpRegisterW",
    "NdrDcomAsyncStubCall",
    "NdrServerCall2",
    "NdrServerInitializePartial",
    "NdrConformantArrayMemorySize",
    "RpcErrorEndEnumeration",
    "RpcErrorClearInformation",
    "NdrMesTypeDecode",
    "NdrConformantVaryingArrayMarshall",
    "IUnknown_Release_Proxy",
    "NdrConformantStructMarshall",
    "NdrVaryingArrayMarshall",
    "NdrComplexStructUnmarshall",
    "NdrComplexArrayFree",
    "RpcCompleteAsyncCall",
    "RpcSsAllocate",
    "NdrMesTypeFree2",
    "RpcBindingInqAuthInfoExW",
    "I_RpcAsyncAbortCall",
    "RpcServerInqBindings",
    "NdrGetTypeFlags",
    "RpcBindingSetAuthInfoExW",
    "RpcEpRegisterNoReplaceA",
    "I_RpcSsDontSerializeContext",
    "NdrRpcSmSetClientToOsf",
    "RpcMgmtInqDefaultProtectLevel",
    "NdrConformantVaryingStructBufferSize",
    "NdrConformantStringMarshall",
    "NdrNonEncapsulatedUnionMemorySize",
    "RpcBindingInqAuthInfoA",
    "RpcServerInqCallAttributesA",
    "RpcProtseqVectorFreeA",
    "MesHandleFree",
    "NdrPartialIgnoreServerInitialize",
    "NdrServerMarshall",
    "RpcErrorLoadErrorInfo",
    "RpcServerTestCancel",
    "RpcServerUseProtseqA",
    "RpcRegisterAsyncInfo",
    "NdrCStdStubBuffer2_Release",
    "RpcBindingSetAuthInfoA",
    "NdrAsyncClientCall",
    "I_RpcIfInqTransferSyntaxes",
    "NdrNonConformantStringMemorySize",
    "NdrDllCanUnloadNow",
    "RpcSsSetThreadHandle",
    "tree_peek_ndr",
    "RpcMgmtInqComTimeout",
    "DllGetClassObject",
    "RpcServerUseProtseqIfExW",
    "NdrComplexStructFree",
    "I_RpcServerInqLocalConnAddress",
    "long_array_from_ndr",
    "RpcSsGetContextBinding",
    "NdrRpcSsDefaultFree",
    "NdrFixedArrayBufferSize",
    "NdrConvert",
    "NdrPointerMemorySize",
    "RpcServerUseProtseqIfExA",
    "NdrClientInitializeNew",
    "NdrComplexStructMarshall",
    "NdrByteCountPointerFree",
    "UuidEqual",
    "NdrRangeUnmarshall",
    "RpcBindingInqObject",
    "NDRCContextUnmarshall",
    "NdrRpcSsDisableAllocate",
    "RpcCancelThread",
    "I_RpcTransDatagramFree",
    "RpcMgmtEpEltInqBegin",
    "NdrEncapsulatedUnionMemorySize",
    "RpcNetworkInqProtseqsA",
    "NDRcopy",
    "NDRSContextMarshall",
    "NdrCreateServerInterfaceFromStub",
    "NdrServerInitialize",
    "RpcErrorSaveErrorInfo",
    "RpcSmSetThreadHandle",
    "RpcAsyncCompleteCall",
    "NdrpSetRpcSsDefaults",
    "NdrComplexArrayMarshall",
    "NdrPartialIgnoreClientBufferSize",
    "short_from_ndr_temp",
    "I_RpcNegotiateTransferSyntax",
    "MIDL_wchar_strlen",
    "RpcServerInqIf",
    "RpcBindingToStringBindingA",
    "NdrMesSimpleTypeDecode",
    "UuidCompare",
    "NdrXmitOrRepAsUnmarshall",
    "I_RpcTransConnectionReallocPacket",
    "RpcAbortAsyncCall",
    "IUnknown_QueryInterface_Proxy",
    "NdrFullPointerQueryPointer",
    "NdrByteCountPointerMarshall",
    "I_RpcNsInterfaceExported",
    "NdrPartialIgnoreClientMarshall",
    "CStdStubBuffer_CountRefs",
    "NdrTypeUnmarshall",
    "NdrConformantVaryingArrayBufferSize",
    "NdrFullPointerXlatInit",
    "I_RpcNsBindingSetEntryName",
    "NdrClientCall",
    "NdrConformantVaryingStructUnmarshall",
    "NdrUserMarshalUnmarshall",
    "RpcServerUseProtseqIfW",
    "NdrRpcSmClientFree",
    "I_RpcServerAllocateIpPort",
    "MesBufferHandleReset",
    "NdrConformantArrayMarshall",
    "NdrGetUserMarshalInfo",
    "RpcIfIdVectorFree",
    "NdrCStdStubBuffer_Release",
    "RpcErrorGetNextRecord",
    "CreateStubFromTypeInfo",
    "NdrMesTypeAlignSize",
    "NdrProxyInitialize",
    "I_RpcTransDatagramAllocate",
    "NdrTypeFlags",
    "RpcSsDestroyClientContext",
    "RpcSmClientFree",
    "RpcServerUseAllProtseqsIfEx",
    "enum_from_ndr",
    "NdrMesTypeEncode2",
    "RpcStringBindingComposeW",
    "RpcMgmtEpEltInqDone",
    "RpcBindingFromStringBindingW",
    "NdrPointerMarshall",
    "RpcBindingInqAuthInfoExA",
    "NdrCorrelationPass",
    "NdrGetSimpleTypeBufferAlignment",
    "NdrEncapsulatedUnionUnmarshall",
    "NdrServerUnmarshall",
    "I_RpcTransConnectionAllocatePacket",
    "UuidIsNil",
    "I_RpcNsBindingSetEntryNameW",
    "NdrFreeBuffer",
    "RpcSmGetThreadHandle",
    "I_RpcTransServerNewConnection",
    "RpcSmEnableAllocate",
    "RpcRevertToSelf",
    "CheckVerificationTrailer",
    "NdrUnmarshallBasetypeInline",
    "pfnSizeRoutines",
    "RpcServerUseProtseqIfA",
    "RpcBindingInqAuthClientExA",
    "NdrComplexStructMemorySize",
    "NdrConformantStructFree",
    "I_RpcBindingInqTransportType",
    "NdrAllocate",
    "NdrComplexArrayBufferSize",
    "RpcBindingSetOption",
    "NdrCorrelationInitialize",
    "RpcMgmtSetCancelTimeout",
    "I_RpcServerCheckClientRestriction",
    "I_RpcBindingInqDynamicEndpointA",
    "NdrConformantVaryingStructMemorySize",
    "RpcSmDisableAllocate",
    "NdrGetSimpleTypeMemorySize",
    "I_RpcGetBufferWithObject",
    "RpcSsEnableAllocate",
    "NdrByteCountPointerBufferSize",
    "NdrpGetProcFormatString",
    "RpcServerUseProtseqEpExW",
    "SimpleTypeBufferSize",
    "I_RpcClearMutex",
    "double_from_ndr",
    "tree_into_ndr",
    "CStdStubBuffer_QueryInterface",
    "NdrVaryingArrayBufferSize",
    "TowerExplode",
    "NdrConformantVaryingArrayMemorySize",
    "NdrStubInitialize",
    "RpcServerRegisterIf2",
    "I_RpcAsyncSetHandle",
    "RpcServerUseProtseqEpExA",
    "NdrNonEncapsulatedUnionBufferSize",
    "RpcSsSwapClientAllocFree",
    "UuidFromStringW",
    "NdrProxyFreeBuffer",
    "NdrRpcSsEnableAllocate",
    "NdrpReleaseTypeGenCookie",
    "RpcBindingVectorFree",
    "I_RpcEnableWmiTrace",
    "RpcStringFreeA",
    "RpcServerListen",
    "I_RpcBindingInqWireIdForSnego",
    "RpcErrorAddRecord",
    "RpcStringBindingParseW",
    "DceErrorInqTextA",
    "RpcServerUseProtseqW",
    "pfnFreeRoutines",
    "NdrOleFree",
    "NdrServerContextMarshall",
    "RpcStringBindingComposeA",
    "RpcMgmtWaitServerListen",
    "NdrOleAllocate",
    "NdrInterfacePointerUnmarshall",
    "I_RpcGetExtendedError",
    "NdrDcomAsyncClientCall",
    "tree_size_ndr",
    "NdrPointerFree",
    "RpcFreeAuthorizationContext",
    "NdrConformantVaryingArrayFree",
    "NdrProxySendReceive",
    "I_RpcSystemFunction001",
    "RpcSmFree",
    "NdrConformantVaryingArrayUnmarshall",
    "NdrPointerUnmarshall",
    "RpcObjectInqType",
    "I_RpcBindingInqDynamicEndpoint",
    "CStdStubBuffer_Invoke",
    "I_RpcAbortAsyncCall",
    "RpcSmAllocate",
    "NdrPointerBufferSize",
    "RpcBindingInqOption",
    "I_RpcServerUseProtseq2A",
    "NdrSimpleStructUnmarshall",
    "I_RpcSetAsyncHandle",
    "NdrComplexArrayUnmarshall",
    "NdrNsGetBuffer",
    "RpcIfInqId",
    "I_RpcParseSecurity",
    "I_RpcGetCurrentCallHandle",
    "data_into_ndr",
    "NdrSimpleStructMemorySize",
    "I_RpcServerInqTransportType",
    "I_RpcTurnOnEEInfoPropagation",
    "char_from_ndr",
    "NdrNsSendReceive",
    "RpcBindingServerFromClient",
    "char_array_from_ndr",
    "I_RpcGetBuffer",
    "RpcMgmtInqServerPrincNameA",
    "NdrSimpleTypeUnmarshall",
    "DllRegisterServer",
    "RpcBindingSetAuthInfoExA",
    "I_RpcTransConnectionFreePacket",
    "I_RpcReceive",
    "short_from_ndr",
    "RpcServerYield",
    "RpcSsSetClientAllocFree",
    "CStdStubBuffer_Connect",
    "RpcImpersonateClient",
    "RpcServerUnregisterIf",
    "NdrFullPointerQueryRefId",
    "CStdStubBuffer_Disconnect",
    "NdrStubCall",
    "NdrServerContextUnmarshall",
    "NdrAsyncServerCall",
    "UuidCreateNil"
  ],
  "rpcss.dll": [
    "CoGetComCatalog",
    "ServiceMain",
    "WhichService",
    "GetRPCSSInfo"
  ],
  "rsaenh.dll": [
    "CPExportKey",
    "CPGetKeyParam",
    "CPGenKey",
    "CPGetHashParam",
    "CPAcquireContext",
    "CPDecrypt",
    "CPDeriveKey",
    "CPDuplicateHash",
    "CPDuplicateKey",
    "DllRegisterServer",
    "CPSetKeyParam",
    "CPSetHashParam",
    "CPHashSessionKey",
    "CPImportKey",
    "CPGetUserKey",
    "CPVerifySignature",
    "CPCreateHash",
    "CPEncrypt",
    "CPDestroyHash",
    "CPGetProvParam",
    "CPHashData",
    "CPDestroyKey",
    "CPSetProvParam",
    "CPGenRandom",
    "CPReleaseContext",
    "DllUnregisterServer",
    "CPSignHash"
  ],
  "rsfsaps.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "rshx32.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "rsmps.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "rsvpmsg.dll": "No exports",
  "rsvpperf.dll": [
    "CloseRsvpPerformanceData",
    "CollectRsvpPerformanceData",
    "OpenRsvpPerformanceData"
  ],
  "rsvpsp.dll": [
    "WSPStartup"
  ],
  "rtipxmib.dll": [
    "SnmpExtensionInit",
    "SnmpExtensionInitEx",
    "SnmpExtensionQuery",
    "SnmpExtensionTrap"
  ],
  "rtm.dll": [
    "RtmGetChangedDests",
    "RtmEnumerateGetNextRoute",
    "RtmGetExactMatchRoute",
    "SearchInTable",
    "DumpTable",
    "RtmLockRoute",
    "RtmCreateRouteListEnum",
    "MgmGetFirstMfeStats",
    "RtmGetOpaqueInformationPointer",
    "RtmDeregisterFromChangeNotification",
    "RtmMarkDestForChangeNotification",
    "RtmBlockDeleteRoutes",
    "MgmGroupEnumerationGetNext",
    "RtmGetRegisteredEntities",
    "RtmCreateRouteList",
    "RtmDeleteNextHop",
    "RtmBlockConvertRoutesToStatic",
    "RtmFindNextHop",
    "RtmGetChangeStatus",
    "RtmGetInstanceInfo",
    "RtmGetEnumDests",
    "MgmGroupEnumerationEnd",
    "RtmBlockSetRouteEnable",
    "RtmGetRouteAge",
    "RtmIsMarkedForChangeNotification",
    "RtmGetAddressFamilyInfo",
    "BestMatchInTable",
    "RtmCreateRouteTable",
    "RtmCreateRouteEnum",
    "RtmHoldDestination",
    "RtmReleaseDestInfo",
    "RtmDereferenceHandles",
    "MgmRegisterMProtocol",
    "RtmAddRoute",
    "RtmBlockMethods",
    "RtmDequeueRouteChangeMessage",
    "RtmLookupIPDestination",
    "MgmDeInitialize",
    "RtmDeleteRouteList",
    "MgmTakeInterfaceOwnership",
    "RtmReferenceHandles",
    "MgmAddGroupMembershipEntry",
    "NextMatchInTable",
    "MgmGetNextMfe",
    "RtmGetListEnumRoutes",
    "RtmGetDestInfo",
    "RtmReadAddressFamilyConfig",
    "RtmDeleteRouteTable",
    "RtmIsBestRoute",
    "RtmGetInstances",
    "RtmWriteAddressFamilyConfig",
    "RtmReleaseRouteInfo",
    "DestroyTable",
    "RtmIgnoreChangedDests",
    "RtmLockNextHop",
    "RtmGetEntityInfo",
    "RtmGetFirstRoute",
    "RtmLockDestination",
    "MgmInitialize",
    "CreateTable",
    "MgmDeleteGroupMembershipEntry",
    "RtmDeleteRoute",
    "RtmReleaseDests",
    "InsertIntoTable",
    "DeleteFromTable",
    "RtmGetEntityMethods",
    "MgmDeRegisterMProtocol",
    "RtmWriteInstanceConfig",
    "RtmReleaseRoutes",
    "RtmGetRoutePointer",
    "RtmDeregisterEntity",
    "RtmUpdateAndUnlockRoute",
    "RtmReleaseChangedDests",
    "RtmGetNextRoute",
    "MgmGetNextMfeStats",
    "MgmGroupEnumerationStart",
    "RtmCreateEnumerationHandle",
    "RtmAddRouteToDest",
    "RtmGetRouteInfo",
    "RtmDeleteRouteToDest",
    "RtmGetEnumNextHops",
    "MgmGetFirstMfe",
    "RtmDeregisterClient",
    "RtmCloseEnumerationHandle",
    "CheckTable",
    "RtmGetNetworkCount",
    "RtmInsertInRouteList",
    "RtmGetNextHopInfo",
    "RtmGetNextHopPointer",
    "RtmRegisterEntity",
    "RtmAddNextHop",
    "RtmCreateDestEnum",
    "RtmInvokeMethod",
    "RtmReleaseEntityInfo",
    "EnumOverTable",
    "RtmGetLessSpecificDestination",
    "RtmDeleteEnumHandle",
    "RtmReleaseNextHops",
    "MgmGetProtocolOnInterface",
    "RtmCreateNextHopEnum",
    "RtmReleaseNextHopInfo",
    "RtmIsRoute",
    "RtmRegisterClient",
    "MgmGetMfe",
    "RtmReadInstanceConfig",
    "RtmReleaseEntities",
    "RtmGetEnumRoutes",
    "MgmReleaseInterfaceOwnership",
    "MgmGetMfeStats",
    "RtmGetMostSpecificDestination",
    "RtmRegisterForChangeNotification",
    "RtmGetExactMatchDestination"
  ],
  "rtutils.dll": [
    "RouterLogEventDataW",
    "RouterLogRegisterW",
    "TraceVprintfExA",
    "TraceGetConsoleW",
    "RouterGetErrorStringW",
    "LogEventA",
    "RouterGetErrorStringA",
    "TraceDeregisterExA",
    "TracePrintfA",
    "WTFreeTimer",
    "TraceRegisterExA",
    "RouterLogEventStringA",
    "RouterAssert",
    "SetIoCompletionProc",
    "TracePutsExA",
    "WTFreeEvent",
    "DeRegisterWaitEventBindingSelf",
    "DebugPrintWaitWorkerThreads",
    "LogErrorA",
    "RouterLogEventExW",
    "RouterLogEventA",
    "TraceDumpExW",
    "CreateWaitEventBinding",
    "TraceVprintfExW",
    "LogErrorW",
    "RouterLogEventValistExW",
    "DeRegisterWaitEventBinding",
    "RouterLogEventDataA",
    "RouterLogEventStringW",
    "TracePrintfW",
    "TracePrintfExA",
    "MprSetupProtocolEnum",
    "TraceDeregisterA",
    "CreateWaitTimer",
    "RouterLogRegisterA",
    "UpdateWaitTimer",
    "TraceDeregisterExW",
    "RouterLogDeregisterA",
    "CreateWaitEvent",
    "LogEventW",
    "DeRegisterWaitEventsTimersSelf",
    "TraceGetConsoleA",
    "DeRegisterWaitEventsTimers",
    "QueueWorkItem",
    "RouterLogEventExA",
    "RouterLogDeregisterW",
    "TracePrintfExW",
    "TraceDumpExA",
    "MprSetupProtocolFree",
    "TracePutsExW",
    "RegisterWaitEventsTimers",
    "TraceRegisterExW",
    "RegisterWaitEventBinding",
    "RouterLogEventValistExA",
    "TraceDeregisterW",
    "RouterLogEventW"
  ],
  "rwnh.dll": [
    "public: int __thiscall CShareLockNH::TryExclusiveLock(void)",
    "public: int __thiscall CShareLockNH::TryShareLock(void)",
    "public: int __thiscall CCritSection::TryEnter(void)",
    "public: int __thiscall CCritSection::TryEnter(class CWaitingThread &)",
    "public: void __thiscall CShareLockNH::ExclusiveToShared(void)",
    "public: void __thiscall CCritSection::Leave(void)",
    "public: void __thiscall CShareLockNH::ShareUnlock(void)",
    "public: int __thiscall CShareLockExport::TryShareLock(void)",
    "public: __thiscall CShareLockExport::~CShareLockExport(void)",
    "public: void __thiscall CShareLockExport::ShareLock(void)",
    "public: __thiscall CCritSection::~CCritSection(void)",
    "public: void __thiscall CShareLockExport::ExclusiveLock(void)",
    "void * __stdcall GetPerThreadEvent(void)",
    "public: __thiscall CCritSection::CCritSection(void)",
    "public: __thiscall CShareLockNH::CShareLockNH(void)",
    "public: void __thiscall CShareLockNH::PartialToShared(void)",
    "public: void __thiscall CShareLockExport::ShareUnlock(void)",
    "private: void __thiscall CShareLockNH::WakeReaders(void)",
    "public: void __thiscall CCritSection::Enter(class CWaitingThread &)",
    "public: int __thiscall CShareLockNH::SharedToExclusive(void)",
    "public: int __thiscall CShareLockNH::PartialToExclusive(void)",
    "public: void __thiscall CShareLockNH::ExclusiveLock(void)",
    "public: void __thiscall CShareLockNH::ExclusiveUnlock(void)",
    "public: void __thiscall CSimpleCritSection::Enter(class CWaitingThread &)",
    "public: void __thiscall CSimpleCritSection::Leave(void)",
    "public: int __thiscall CSimpleCritSection::TryEnter(class CWaitingThread &)",
    "public: int __thiscall CShareLockExport::TryExclusiveLock(void)",
    "public: void __thiscall CShareLockNH::ExclusiveToPartial(void)",
    "public: int __thiscall CShareLockNH::TryPartialLock(void)",
    "public: void __thiscall CCritSection::Enter(void)",
    "public: int __thiscall CShareLockExport::SharedToExclusive(void)",
    "public: void __thiscall CShareLockExport::ExclusiveUnlock(void)",
    "public: int __thiscall CSimpleCritSection::TryEnter(void)",
    "public: __thiscall CSimpleCritSection::CSimpleCritSection(void)",
    "public: void __thiscall CShareLockExport::ExclusiveToShared(void)",
    "public: __thiscall CShareLockExport::CShareLockExport(void)",
    "public: class CSimpleCritSection & __thiscall CSimpleCritSection::operator=(class CSimpleCritSection const &)",
    "private: void __thiscall CShareLockNH::ShareUnlockInternal(void)",
    "public: class CShareLockExport & __thiscall CShareLockExport::operator=(class CShareLockExport const &)",
    "public: void __thiscall CShareLockNH::FirstPartialToExclusive(void)",
    "public: void __thiscall CShareLockNH::PartialUnlock(void)",
    "public: void __thiscall CSimpleCritSection::Enter(void)",
    "private: void __thiscall CShareLockNH::ShareLockInternal(void)",
    "public: __thiscall CShareLockNH::~CShareLockNH(void)",
    "public: void __thiscall CShareLockNH::PartialLock(void)",
    "public: void __thiscall CShareLockNH::ShareLock(void)",
    "public: __thiscall CSimpleCritSection::~CSimpleCritSection(void)",
    "public: int __thiscall CShareLockNH::SharedToPartial(void)"
  ],
  "s3legacy.dll": "No exports",
  "safrcdlg.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "safrdm.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "safrslv.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "samlib.dll": [
    "SamDeleteUser",
    "SamEnumerateAliasesInDomain",
    "SamGetAliasMembership",
    "SamGetMembersInGroup",
    "SamiChangePasswordUser2",
    "SamChangePasswordUser2",
    "SamRemoveMemberFromForeignDomain",
    "SamiChangePasswordUser",
    "SamEnumerateGroupsInDomain",
    "SamiLmChangePasswordUser",
    "SamSetInformationAlias",
    "SamAddMultipleMembersToAlias",
    "SamCreateGroupInDomain",
    "SamGetCompatibilityMode",
    "SamRemoveMemberFromAlias",
    "SamConnectWithCreds",
    "SamiOemChangePasswordUser2",
    "SamLookupIdsInDomain",
    "SamAddMemberToAlias",
    "SamCreateAliasInDomain",
    "SamLookupNamesInDomain",
    "SamCreateUser2InDomain",
    "SamLookupDomainInSamServer",
    "SamQueryInformationAlias",
    "SamRidToSid",
    "SamSetInformationDomain",
    "SamSetInformationGroup",
    "SamEnumerateDomainsInSamServer",
    "SamOpenAlias",
    "SamGetGroupsForUser",
    "SamSetMemberAttributesOfGroup",
    "SamChangePasswordUser3",
    "SamTestPrivateFunctionsUser",
    "SamiSetDSRMPassword",
    "SamEnumerateUsersInDomain",
    "SamSetSecurityObject",
    "SamSetInformationUser",
    "SamiEncryptPasswords",
    "SamOpenUser",
    "SamAddMemberToGroup",
    "SamiChangeKeys",
    "SamRemoveMemberFromGroup",
    "SamRemoveMultipleMembersFromAlias",
    "SamCreateUserInDomain",
    "SamConnect",
    "SamGetMembersInAlias",
    "SamQueryInformationDomain",
    "SamiGetBootKeyInformation",
    "SamGetDisplayEnumerationIndex",
    "SamOpenDomain",
    "SamFreeMemory",
    "SamQueryInformationGroup",
    "SamQueryInformationUser",
    "SamCloseHandle",
    "SamChangePasswordUser",
    "SamShutdownSamServer",
    "SamTestPrivateFunctionsDomain",
    "SamiSetBootKeyInformation",
    "SamiSetDSRMPasswordOWF",
    "SamDeleteGroup",
    "SamQueryDisplayInformation",
    "SamOpenGroup",
    "SamQuerySecurityObject",
    "SamDeleteAlias"
  ],
  "samsrv.dll": [
    "SamrSetSecurityObject",
    "SamIConnect",
    "SamrOpenDomain",
    "SamIIsSetupInProgress",
    "SamIGCLookupSids",
    "SamIIsExtendedSidMode",
    "SamrCreateUserInDomain",
    "SampWriteGroupType",
    "SamrAddMemberToGroup",
    "SamrRemoveMemberFromGroup",
    "SamIReplaceDownlevelDatabase",
    "SamIGetPrivateData",
    "SampReleaseSamLockExclusive",
    "SampAbortSingleLoopbackTask",
    "SamIFree_SAMPR_ULONG_ARRAY",
    "SamISetSerialNumberDomain",
    "SamIIsDownlevelDcUpgrade",
    "SamISetPrivateData",
    "SamIFree_SAMPR_GROUP_INFO_BUFFER",
    "SamIFloatingSingleMasterOpEx",
    "SamIFree_SAMPR_ALIAS_INFO_BUFFER",
    "SamIFree_SAMPR_DOMAIN_INFO_BUFFER",
    "SamrLookupIdsInDomain",
    "SamILoadDownlevelDatabase",
    "SamIIncrementPerformanceCounter",
    "SamrEnumerateAliasesInDomain",
    "SamIGetBootKeyInformation",
    "SamIGetUserLogonInformation2",
    "SamIFree_SAMPR_GET_GROUPS_BUFFER",
    "SamIEnumerateAccountRids",
    "SampInitializeSdConversion",
    "SampInvalidateRidRange",
    "SamISetPasswordForeignUser2",
    "SamINotifyRoleChange",
    "SamIQueryServerRole2",
    "SamISetAuditingInformation",
    "SampAcquireWriteLock",
    "SamIRemoveDSNameFromAlias",
    "SampAcquireSamLockExclusive",
    "SamrGetUserDomainPasswordInformation",
    "SamrRidToSid",
    "SamICreateAccountByRid",
    "SamrDeleteGroup",
    "SamrGetMembersInGroup",
    "SamIFree_SAMPR_ENUMERATION_BUFFER",
    "SamIGetFixedAttributes",
    "SamrGetAliasMembership",
    "SamIUnLoadDownlevelDatabase",
    "SamrDeleteAlias",
    "SamIFreeVoid",
    "SamIDemote",
    "SamIFree_SAMPR_RETURNED_USTRING_ARRAY",
    "SampRtlConvertUlongToUnicodeString",
    "SamIMixedDomain",
    "SamrTestPrivateFunctionsUser",
    "SamrQueryInformationDomain",
    "SamILoopbackConnect",
    "SamrRemoveMemberFromForeignDomain",
    "SampCommitBufferedWrites",
    "SamIUpdateLogonStatistics",
    "SamINetLogonPing",
    "SamIGetUserLogonInformationEx",
    "SamrCreateUser2InDomain",
    "SamIGetSerialNumberDomain",
    "SamISetMixedDomainFlag",
    "SamrAddMemberToAlias",
    "SamIOpenUserByAlternateId",
    "SamIImpersonateNullSession",
    "SamrQueryInformationAlias",
    "SamrCloseHandle",
    "SamIAccountRestrictions",
    "SamIAddDSNameToGroup",
    "SamIFree_SAMPR_GET_MEMBERS_BUFFER",
    "SamIMixedDomain2",
    "SamrShutdownSamServer",
    "SamrGetGroupsForUser",
    "SamrSetMemberAttributesOfGroup",
    "SamIPromoteUndo",
    "SamrEnumerateUsersInDomain",
    "SamrUnicodeChangePasswordUser2",
    "SampFlagsToAccountControl",
    "SamIGetResourceGroupMembershipsTransitive",
    "SamrQuerySecurityObject",
    "SamrAddMultipleMembersToAlias",
    "SamrQueryDisplayInformation",
    "SamrRemoveMemberFromAlias",
    "SampNotifyReplicatedInChange",
    "SamINT4UpgradeInProgress",
    "SamIOpenAccount",
    "SamIFree_SAMPR_USER_INFO_BUFFER",
    "SamrOpenUser",
    "SamrQueryInformationUser",
    "SamIRevertNullSession",
    "SamrRemoveMultipleMembersFromAlias",
    "SamIFreeSidArray",
    "SamIEnumerateInterdomainTrustAccountsForUpgrade",
    "SamIResetBadPwdCountOnPdc",
    "SamIDsCreateObjectInDomain",
    "SamrLookupDomainInSamServer",
    "SamrGetMembersInAlias",
    "SamIRemoveDSNameFromGroup",
    "SampUsingDsData",
    "SampSetSerialNumberDomain2",
    "SamIGetAliasMembership",
    "SamIDsSetObjectInformation",
    "SamrTestPrivateFunctionsDomain",
    "SamrOpenAlias",
    "SamIFree_SAMPR_SR_SECURITY_DESCRIPTOR",
    "SamIFreeSidAndAttributesList",
    "SampDsChangePasswordUser",
    "SamIPromote",
    "SamIFree_SAMPR_PSID_ARRAY",
    "SamrEnumerateDomainsInSamServer",
    "SamISetPasswordInfoOnPdc",
    "SampConvertNt4SdToNt5Sd",
    "SamIGetDefaultAdministratorName",
    "SamIDoFSMORoleChange",
    "SampReleaseWriteLock",
    "SamIAddDSNameToAlias",
    "SampNetLogonNotificationRequired",
    "SamINotifyDelta",
    "SampGetDefaultSecurityDescriptorForClass",
    "SamIFree_SAMPR_DISPLAY_INFO_BUFFER",
    "SamrSetInformationAlias",
    "SamIFree_UserInternal6Information",
    "SamISetPasswordForeignUser",
    "SamrSetInformationUser",
    "SamIIsRebootAfterPromotion",
    "SamrLookupNamesInDomain",
    "SamrOpenGroup",
    "SampInvalidateDomainCache",
    "SamIChangePasswordForeignUser",
    "SamrChangePasswordUser",
    "SampProcessSingleLoopbackTask",
    "SamrDeleteUser",
    "SampAccountControlToFlags",
    "SamrCreateGroupInDomain",
    "SamIQueryServerRole",
    "SamIAmIGC",
    "SamIStorePrimaryCredentials",
    "SampInitializeRegistry",
    "SamISameSite",
    "SamIUPNFromUserHandle",
    "SamINotifyServerDelta",
    "SamIInitialize",
    "SamIGetUserLogonInformation",
    "SamIChangePasswordForeignUser2",
    "SampGetSerialNumberDomain2",
    "SamrCreateAliasInDomain",
    "SamIGCLookupNames",
    "SamIRetrievePrimaryCredentials",
    "SamrQueryInformationGroup",
    "SamrSetInformationGroup",
    "SamIGetInterdomainTrustAccountPasswordsForUpgrade",
    "SamrSetInformationDomain",
    "SamIDemoteUndo",
    "SamrEnumerateGroupsInDomain"
  ],
  "sbe.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "sbeio.dll": [
    "DVRCreateDVRFileSink",
    "DVRCreateDVRFileSource"
  ],
  "scarddlg.dll": [
    "SCardUIDlgSelectCardA",
    "GetOpenCardNameW",
    "SCardDlgExtendedError",
    "GetOpenCardNameA",
    "SCardUIDlgSelectCardW",
    "SCardUIDlgGetPINA",
    "SCardUIDlgChangePINA"
  ],
  "scardssp.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "sccbase.dll": [
    "CPExportKey",
    "CPGetKeyParam",
    "CPGenKey",
    "CPGetHashParam",
    "CPAcquireContext",
    "CPDecrypt",
    "CPDeriveKey",
    "CPAcquireContextW",
    "DllRegisterServer",
    "CPSetKeyParam",
    "CPSetHashParam",
    "CPHashSessionKey",
    "CPImportKey",
    "CPGetUserKey",
    "CPVerifySignature",
    "CPCreateHash",
    "CPEncrypt",
    "CPDestroyHash",
    "CPGetProvParam",
    "CPHashData",
    "CPDestroyKey",
    "CPSetProvParam",
    "CPGenRandom",
    "CPReleaseContext",
    "DllUnregisterServer",
    "CPSignHash"
  ],
  "sccsccp.dll": [
    "SCCPDllGetClassObject",
    "SCCPDllCanUnloadNow",
    "SCCPDllRegisterServer",
    "SCCPDllUnregisterServer"
  ],
  "scecli.dll": [
    "SceSetupUpdateSecurityKey",
    "SceGetObjectSecurity",
    "SceUpdateSecurityProfile",
    "SceOpenProfile",
    "SceSetupMoveSecurityFile",
    "SceNotifyPolicyDelta",
    "SceAnalyzeSystem",
    "SceSvcGetInformationTemplate",
    "SceGetSecurityProfileInfo",
    "SceGetAnalysisAreaSummary",
    "SceGenerateRollback",
    "SceSetupConfigureServices",
    "SceCompareNameList",
    "SceSetupUpdateSecurityService",
    "SceSetDatabaseSetting",
    "SceLookupPrivRightName",
    "SceGetObjectChildren",
    "SceGetScpProfileDescription",
    "SceGetDatabaseSetting",
    "SceCloseProfile",
    "SceCommitTransaction",
    "SceSetupGenerateTemplate",
    "SceSvcConvertTextToSD",
    "SceBrowseDatabaseTable",
    "SceSvcFree",
    "SceSvcUpdateInfo",
    "SceGetDbTime",
    "SceCopyBaseProfile",
    "SceSetupRootSecurity",
    "SceFreeProfileMemory",
    "SceGetServerProductType",
    "DllRegisterServer",
    "SceEnumerateServices",
    "SceSetupUpdateSecurityFile",
    "SceProcessSecurityPolicyGPO",
    "SceRollbackTransaction",
    "SceGetTimeStamp",
    "SceRegisterRegValues",
    "SceSetupBackupSecurity",
    "SceSvcSetInformationTemplate",
    "SceFreeMemory",
    "SceSysPrep",
    "SceWriteSecurityProfileInfo",
    "SceDcPromoCreateGPOsInSysvolEx",
    "InitializeChangeNotify",
    "SceGetAreas",
    "SceProcessSecurityPolicyGPOEx",
    "SceCompareSecurityDescriptors",
    "SceConfigureSystem",
    "SceConfigureConvertedFileSecurity",
    "SceSvcQueryInfo",
    "SceSetupUnwindSecurityFile",
    "SceDcPromoteSecurity",
    "SceSvcConvertSDToText",
    "SceSvcSetInfo",
    "SceUpdateObjectInfo",
    "SceAddToObjectList",
    "SceOpenPolicy",
    "SceGenerateGroupPolicy",
    "SceIsSystemDatabase",
    "SceStartTransaction",
    "SceAddToNameList",
    "DeltaNotify",
    "SceProcessEFSRecoveryGPO",
    "SceDcPromoCreateGPOsInSysvol",
    "SceAddToNameStatusList",
    "SceCreateDirectory",
    "SceSetupSystemByInfName",
    "DllUnregisterServer",
    "SceAppendSecurityProfileInfo",
    "SceDcPromoteSecurityEx",
    "SceEnforceSecurityPolicyPropagation"
  ],
  "scesrv.dll": [
    "ScesrvInitializeServer",
    "ScesrvTerminateServer"
  ],
  "schannel.dll": [
    "CloseSslPerformanceData",
    "MakeSignature",
    "OpenSslPerformanceData",
    "SslCrackCertificate",
    "FreeContextBuffer",
    "InitSecurityInterfaceA",
    "ImpersonateSecurityContext",
    "QuerySecurityPackageInfoA",
    "UnsealMessage",
    "SealMessage",
    "FreeCredentialsHandle",
    "VerifySignature",
    "AcquireCredentialsHandleA",
    "DeleteSecurityContext",
    "InitSecurityInterfaceW",
    "SslGenerateRandomBits",
    "AcquireCredentialsHandleW",
    "RevertSecurityContext",
    "SslFreeCertificate",
    "ApplyControlToken",
    "AcceptSecurityContext",
    "InitializeSecurityContextA",
    "CollectSslPerformanceData",
    "QueryContextAttributesW",
    "QueryContextAttributesA",
    "SslEmptyCacheA",
    "SslLoadCertificate",
    "EnumerateSecurityPackagesW",
    "InitializeSecurityContextW",
    "SslGenerateKeyPair",
    "QuerySecurityPackageInfoW",
    "EnumerateSecurityPackagesA",
    "SslGetMaximumKeySize",
    "SpLsaModeInitialize",
    "SpUserModeInitialize",
    "SslEmptyCacheW",
    "CompleteAuthToken"
  ],
  "schedsvc.dll": [
    "CloseProc",
    "SchedServiceMain",
    "SPUninstallCallback",
    "SysPrepRestore",
    "SysPrepBackup",
    "SPUninstall",
    "SysPrepCallback"
  ],
  "sclgntfy.dll": [
    "WLEventUnlock",
    "WLEventStartShell",
    "WLEventLock",
    "WLEventLogoff",
    "WLEventShutdown",
    "DllRegisterServer",
    "WLEventStartScreenSaver",
    "WLEventStartup",
    "DllUnregisterServer",
    "WLEventStopScreenSaver",
    "WLEventLogon"
  ],
  "scredir.dll": [
    "SCardIntroduceReaderGroupA",
    "SCardIntroduceReaderA",
    "SCardIntroduceReaderW",
    "SCardForgetReaderGroupW",
    "SCardAccessStartedEvent",
    "SCardAddReaderToGroupA",
    "SCardListReaderGroupsA",
    "SCardGetStatusChangeW",
    "SCardAddReaderToGroupW",
    "SCardState",
    "SCardBeginTransaction",
    "SCardListReadersW",
    "SCardGetAttrib",
    "SCardReleaseStartedEvent",
    "SCardForgetReaderA",
    "SCardIntroduceReaderGroupW",
    "SCardEstablishContext",
    "DllRegisterServer",
    "SCardReconnect",
    "SCardConnectW",
    "SCardRemoveReaderFromGroupA",
    "DllUnregisterServer",
    "SCardListReadersA",
    "SCardStatusA",
    "SCardConnectA",
    "SCardStatusW",
    "SCardRemoveReaderFromGroupW",
    "SCardSetAttrib",
    "SCardLocateCardsByATRW",
    "SCardReleaseContext",
    "SCardGetStatusChangeA",
    "SCardEndTransaction",
    "SCardLocateCardsByATRA",
    "SCardLocateCardsA",
    "SCardCancel",
    "SCardListReaderGroupsW",
    "SCardDisconnect",
    "SCardLocateCardsW",
    "SCardForgetReaderGroupA",
    "SCardTransmit",
    "SCardIsValidContext",
    "SCardControl",
    "SCardForgetReaderW"
  ],
  "scrobj.dll": [
    "GenerateTypeLib",
    "DllRegisterServerExA",
    "DllUnregisterServerEx",
    "DllRegisterServerEx",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllInstall",
    "DllRegisterServer",
    "GenerateTypeLibW",
    "DllRegisterServerExW",
    "DllUnregisterServer"
  ],
  "scrrun.dll": [
    "DoOpenPipeStream",
    "DLLGetDocumentation",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "sdhcinst.dll": [
    "SdClassCoInstaller",
    "SdClassInstall"
  ],
  "sdpblb.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "seclogon.dll": [
    "DllUnregisterServer",
    "SvcEntry_Seclogon",
    "SvchostPushServiceGlobals",
    "DllRegisterServer"
  ],
  "secur32.dll": [
    "MakeSignature",
    "GetSecurityUserInfo",
    "ExportSecurityContext",
    "SecInitUserModeContext",
    "SaslEnumerateProfilesW",
    "TranslateNameW",
    "AddSecurityPackageW",
    "GetComputerObjectNameA",
    "FreeContextBuffer",
    "InitSecurityInterfaceA",
    "SecpTranslateNameEx",
    "ImpersonateSecurityContext",
    "LsaConnectUntrusted",
    "QuerySecurityPackageInfoA",
    "SaslGetProfilePackageW",
    "LsaGetLogonSessionData",
    "UnsealMessage",
    "LsaLogonUser",
    "LsaDeregisterLogonProcess",
    "SealMessage",
    "FreeCredentialsHandle",
    "GetComputerObjectNameW",
    "VerifySignature",
    "AcquireCredentialsHandleA",
    "EncryptMessage",
    "DeleteSecurityPackageW",
    "SecGetLocaleSpecificEncryptionRules",
    "SaslGetProfilePackageA",
    "DeleteSecurityContext",
    "InitSecurityInterfaceW",
    "AcquireCredentialsHandleW",
    "QueryCredentialsAttributesW",
    "CredUnmarshalTargetInfo",
    "GetUserNameExW",
    "RevertSecurityContext",
    "SaslIdentifyPackageW",
    "ApplyControlToken",
    "LsaUnregisterPolicyChangeNotification",
    "AcceptSecurityContext",
    "SaslInitializeSecurityContextW",
    "CompleteAuthToken",
    "InitializeSecurityContextA",
    "QueryContextAttributesW",
    "SaslEnumerateProfilesA",
    "QueryContextAttributesA",
    "SecCacheSspiPackages",
    "AddCredentialsW",
    "LsaEnumerateLogonSessions",
    "SecpFreeMemory",
    "SaslInitializeSecurityContextA",
    "DecryptMessage",
    "SetContextAttributesA",
    "SetContextAttributesW",
    "TranslateNameA",
    "EnumerateSecurityPackagesW",
    "ImportSecurityContextA",
    "DeleteSecurityPackageA",
    "ImportSecurityContextW",
    "InitializeSecurityContextW",
    "LsaCallAuthenticationPackage",
    "LsaRegisterPolicyChangeNotification",
    "QuerySecurityPackageInfoW",
    "SaslIdentifyPackageA",
    "LsaRegisterLogonProcess",
    "AddSecurityPackageA",
    "EnumerateSecurityPackagesA",
    "LsaFreeReturnBuffer",
    "LsaLookupAuthenticationPackage",
    "QuerySecurityContextToken",
    "SecDeleteUserModeContext",
    "SaslAcceptSecurityContext",
    "SecpTranslateName",
    "AddCredentialsA",
    "GetUserNameExA",
    "CredMarshalTargetInfo",
    "QueryCredentialsAttributesA"
  ],
  "security.dll": [
    "MakeSignature",
    "ExportSecurityContext",
    "AddSecurityPackageW",
    "FreeContextBuffer",
    "InitSecurityInterfaceA",
    "ImpersonateSecurityContext",
    "QuerySecurityPackageInfoA",
    "UnsealMessage",
    "SealMessage",
    "FreeCredentialsHandle",
    "VerifySignature",
    "AcquireCredentialsHandleA",
    "EncryptMessage",
    "DeleteSecurityPackageW",
    "DeleteSecurityContext",
    "InitSecurityInterfaceW",
    "AcquireCredentialsHandleW",
    "QueryCredentialsAttributesW",
    "RevertSecurityContext",
    "ApplyControlToken",
    "AcceptSecurityContext",
    "CompleteAuthToken",
    "InitializeSecurityContextA",
    "QueryContextAttributesW",
    "QueryContextAttributesA",
    "DecryptMessage",
    "EnumerateSecurityPackagesW",
    "ImportSecurityContextA",
    "DeleteSecurityPackageA",
    "ImportSecurityContextW",
    "InitializeSecurityContextW",
    "QuerySecurityPackageInfoW",
    "AddSecurityPackageA",
    "EnumerateSecurityPackagesA",
    "QuerySecurityContextToken",
    "QueryCredentialsAttributesA"
  ],
  "sendcmsg.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "sendmail.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "sens.dll": [
    "SensNotifyRasEvent",
    "ServiceMain",
    "SensNotifyWinlogonEvent",
    "SensNotifyNetconEvent"
  ],
  "sensapi.dll": [
    "IsDestinationReachableW",
    "IsDestinationReachableA",
    "IsNetworkAlive"
  ],
  "senscfg.dll": [
    "SensUnregister",
    "SensRegister"
  ],
  "serialui.dll": [
    "drvCommConfigDialogA",
    "drvSetDefaultCommConfigW",
    "drvSetDefaultCommConfigA",
    "drvCommConfigDialogW",
    "drvGetDefaultCommConfigW",
    "drvGetDefaultCommConfigA"
  ],
  "servdeps.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "serwvdrv.dll": [
    "DriverProc",
    "widMessage",
    "wodMessage"
  ],
  "setupapi.dll": [
    "CM_Invert_Range_List",
    "CM_Find_Range",
    "SetupDiGetHwProfileList",
    "CM_Enable_DevNode_Ex",
    "SetupGetNonInteractiveMode",
    "SetupQueueDefaultCopyA",
    "SetupDiSetDriverInstallParamsW",
    "SetupGetMultiSzFieldW",
    "pSetupGetRealSystemTime",
    "SetupDiOpenDeviceInterfaceRegKey",
    "SetupInstallFromInfSectionA",
    "SetupCancelTemporarySourceList",
    "CM_Create_DevNodeA",
    "pSetupEnablePrivilege",
    "pSetupInfCacheBuild",
    "CM_Locate_DevNode_ExA",
    "SetupSetFileQueueFlags",
    "CM_Delete_Range",
    "CM_Add_Res_Des_Ex",
    "SetupAddInstallSectionToDiskSpaceListW",
    "SetupDiClassGuidsFromNameExW",
    "CM_Is_Version_Available",
    "CM_Setup_DevNode_Ex",
    "SetupSetPlatformPathOverrideA",
    "CM_Locate_DevNodeW",
    "SetupDiGetHwProfileFriendlyNameW",
    "SetupGetSourceFileLocationW",
    "SetupInstallFileExW",
    "pSetupStringTableInitializeEx",
    "CM_Get_Child_Ex",
    "SetupCopyOEMInfA",
    "SetupDiChangeState",
    "SetupGetInfSections",
    "SetupDiCreateDeviceInterfaceW",
    "SetupDiGetClassDescriptionW",
    "DoesUserHavePrivilege",
    "SetupIterateCabinetW",
    "SetupCloseFileQueue",
    "SetupDiGetClassDescriptionA",
    "CM_Unregister_Device_InterfaceW",
    "InstallHinfSection",
    "CM_Get_First_Log_Conf",
    "SetupDiGetHwProfileFriendlyNameExA",
    "SetupDiGetINFClassA",
    "SetupDeleteErrorA",
    "CM_Unregister_Device_InterfaceA",
    "CM_Get_Class_Key_Name_ExA",
    "pSetupStringTableInitialize",
    "pSetupAppendStringToMultiSz",
    "SetupDiInstallDriverFiles",
    "CM_Free_Res_Des_Ex",
    "SetupDiGetDriverInstallParamsW",
    "SetupCreateDiskSpaceListA",
    "SetupUninstallNewlyCopiedInfs",
    "SetupRemoveFileLogEntryA",
    "SetupFindNextLine",
    "SetupDiGetClassRegistryPropertyW",
    "pSetupMalloc",
    "CM_Get_Version",
    "CM_Unregister_Device_Interface_ExA",
    "MyMalloc",
    "SetupAddToSourceListA",
    "SetupDiCreateDeviceInterfaceRegKeyA",
    "SetupDiCallClassInstaller",
    "CM_Get_HW_Prof_FlagsA",
    "CM_Request_Device_Eject_ExA",
    "SetupDiSelectOEMDrv",
    "SetupBackupErrorA",
    "CM_Create_DevNode_ExA",
    "SetupDiUnremoveDevice",
    "CM_Get_Hardware_Profile_InfoW",
    "CM_Get_Device_ID_List_SizeA",
    "CM_Get_Global_State_Ex",
    "CM_Setup_DevNode",
    "pSetupSetQueueFlags",
    "SetupDiGetClassDevsW",
    "pSetupDoesUserHavePrivilege",
    "MyRealloc",
    "pSetupRegistryDelnode",
    "pSetupUnmapAndCloseFile",
    "CM_Get_Hardware_Profile_Info_ExW",
    "SetupDiInstallClassA",
    "SetupDiSetDeviceRegistryPropertyW",
    "SetupDiEnumDriverInfoA",
    "pSetupOutOfMemory",
    "CM_Get_Device_Interface_AliasA",
    "SetupDiRegisterDeviceInfo",
    "pSetupAddTagToGroupOrderListEntry",
    "SetupGetInfFileListA",
    "CM_Detect_Resource_Conflict_Ex",
    "SetupScanFileQueueW",
    "SetupDiClassNameFromGuidA",
    "CM_Enumerate_Enumerators_ExA",
    "pSetupAccessRunOnceNodeList",
    "SetupDiGetActualSectionToInstallA",
    "CM_Get_Device_Interface_Alias_ExA",
    "SetupDiSetClassRegistryPropertyW",
    "pSetupStringTableSetExtraData",
    "SetupOpenLog",
    "SetupFreeSourceListA",
    "SetupVerifyInfFileA",
    "CM_Unregister_Device_Interface_ExW",
    "SetupInstallFileExA",
    "SetupQueryInfOriginalFileInformationA",
    "SetupDiGetDeviceInterfaceDetailW",
    "CM_Get_Device_ID_ExA",
    "SetupDiGetCustomDevicePropertyW",
    "CM_Free_Log_Conf",
    "SetupInitDefaultQueueCallbackEx",
    "pSetupMakeSurePathExists",
    "CMP_RegisterNotification",
    "SetupDiSelectBestCompatDrv",
    "SetupDiGetDeviceRegistryPropertyA",
    "MyFree",
    "SetupAddSectionToDiskSpaceListA",
    "SetupDiSetDeviceInstallParamsW",
    "SetupQueueCopyIndirectW",
    "CM_Get_DevNode_Custom_PropertyW",
    "CM_Enumerate_Classes_Ex",
    "pSetupAddMiniIconToList",
    "SetupGetLineByIndexA",
    "CM_Set_HW_Prof_Ex",
    "SetupDiRegisterCoDeviceInstallers",
    "SetupAddSectionToDiskSpaceListW",
    "SetupGetIntField",
    "CM_Move_DevNode_Ex",
    "SetupSetNonInteractiveMode",
    "pSetupStringTableGetExtraData",
    "CM_Connect_MachineA",
    "SetupDiGetActualSectionToInstallExW",
    "CM_Request_Device_Eject_ExW",
    "CM_Get_Device_ID_List_SizeW",
    "CM_Get_Res_Des_Data_Size_Ex",
    "CM_Free_Log_Conf_Ex",
    "pSetupIsGuidNull",
    "SetupSetFileQueueAlternatePlatformW",
    "pSetupInstallStopEx",
    "SetupLogFileA",
    "CM_Get_Global_State",
    "SetupDiSetDeviceRegistryPropertyA",
    "SetupQueryDrivesInDiskSpaceListW",
    "pSetupWriteLogError",
    "SetupDiGetSelectedDriverA",
    "CM_Modify_Res_Des_Ex",
    "CM_Remove_SubTree_Ex",
    "CM_Move_DevNode",
    "SetupGetBinaryField",
    "SetupPrepareQueueForRestoreW",
    "SetupDiGetDeviceInfoListClass",
    "CM_Get_DevNode_Status_Ex",
    "CM_Get_Class_Key_Name_ExW",
    "SetupDiCreateDeviceInfoListExA",
    "CM_Merge_Range_List",
    "SetupGetFileQueueFlags",
    "SetupDiOpenDeviceInterfaceA",
    "pSetupAcquireSCMLock",
    "SetupDiClassGuidsFromNameW",
    "pSetupSetGlobalFlags",
    "pSetupCaptureAndConvertAnsiArg",
    "CM_Free_Log_Conf_Handle",
    "CM_Open_DevNode_Key_Ex",
    "SetupRemoveFromSourceListW",
    "CM_Add_ID_ExW",
    "CM_Get_Sibling_Ex",
    "SetupDiGetDeviceInstallParamsA",
    "CM_Run_Detection_Ex",
    "SetupGetSourceFileSizeW",
    "SetupDiEnumDeviceInterfaces",
    "SetupTerminateFileLog",
    "SetupDiOpenDeviceInterfaceW",
    "SetupDiEnumDeviceInfo",
    "pSetupVerifyCatalogFile",
    "SetupDiGetClassImageListExW",
    "CM_Get_Device_ID_ExW",
    "SetupDiSetClassRegistryPropertyA",
    "SetupDiGetHwProfileListExA",
    "CM_Get_Next_Log_Conf",
    "SetupQueryInfFileInformationW",
    "pSetupQueryMultiSzValueToArray",
    "CM_Get_Next_Log_Conf_Ex",
    "SetupInitializeFileLogW",
    "SetupSetPlatformPathOverrideW",
    "SetupDiCancelDriverInfoSearch",
    "pSetupStringTableDestroy",
    "CM_Get_DevNode_Custom_Property_ExA",
    "CM_Delete_Class_Key",
    "CM_Get_Device_Interface_List_Size_ExA",
    "CM_Set_HW_Prof_FlagsW",
    "CM_Get_Class_NameW",
    "SetupCreateDiskSpaceListW",
    "SetupDiGetDriverInfoDetailA",
    "CM_Register_Device_Driver_Ex",
    "pSetupGetQueueFlags",
    "SetupGetSourceFileLocationA",
    "SetupScanFileQueueA",
    "SetupDiGetClassInstallParamsW",
    "CM_Get_Device_ID_Size_Ex",
    "SetupFreeSourceListW",
    "SetupDiGetCustomDevicePropertyA",
    "CM_Set_DevNode_Problem_Ex",
    "CM_Get_Hardware_Profile_InfoA",
    "CM_Open_Class_Key_ExW",
    "pSetupGetVersionInfoFromImage",
    "pSetupGuidFromString",
    "CM_Free_Res_Des",
    "CM_Get_Device_Interface_ListA",
    "SetupDiCreateDeviceInfoW",
    "SetupDiMoveDuplicateDevice",
    "SetupGetLineTextA",
    "SetupDiDrawMiniIcon",
    "SetupDiGetDeviceInterfaceAlias",
    "SetupDiLoadClassIcon",
    "SetupGetLineCountA",
    "SetupDiGetClassBitmapIndex",
    "SetupDiGetHwProfileListExW",
    "CM_Set_HW_Prof",
    "SetupDiClassNameFromGuidExW",
    "SetupOpenMasterInf",
    "CM_Register_Device_Driver",
    "SetupQueryInfVersionInformationA",
    "SetupQueueCopySectionA",
    "CM_Open_Class_KeyW",
    "CM_Get_Child",
    "CM_Register_Device_Interface_ExW",
    "CMP_Report_LogOn",
    "CM_Get_DevNode_Registry_PropertyW",
    "SetupDiInstallClassExA",
    "SetupDiSetClassInstallParamsA",
    "SetupQueueCopySectionW",
    "SetupGetBackupInformationA",
    "SetupTermDefaultQueueCallback",
    "CM_Get_Depth_Ex",
    "SetupUninstallOEMInfW",
    "CM_Query_Arbitrator_Free_Data",
    "CM_Dup_Range_List",
    "SetupDiCreateDeviceInterfaceRegKeyW",
    "CM_Get_Next_Res_Des_Ex",
    "pSetupCenterWindowRelativeToParent",
    "SetupDiDeleteDeviceInterfaceData",
    "CM_Open_Class_Key_ExA",
    "CMP_GetServerSideDeviceInstallFlags",
    "SetupDiGetDriverInstallParamsA",
    "CM_Get_DevNode_Status",
    "SetupDiGetDeviceRegistryPropertyW",
    "CMP_Init_Detection",
    "CM_Add_Empty_Log_Conf_Ex",
    "CM_Get_Device_Interface_Alias_ExW",
    "SetupInstallServicesFromInfSectionA",
    "SetupGetStringFieldW",
    "SetupDiEnumDriverInfoW",
    "SetupDiSetDeviceInstallParamsA",
    "CM_Get_Device_Interface_List_Size_ExW",
    "SetupFindFirstLineW",
    "CMP_WaitNoPendingInstallEvents",
    "CM_Get_Resource_Conflict_Count",
    "CMP_GetBlockedDriverInfo",
    "SetupSetSourceListA",
    "pSetupStringTableStringFromId",
    "CM_Enumerate_Classes",
    "SetupDiDeleteDeviceInterfaceRegKey",
    "SetupRemoveInstallSectionFromDiskSpaceListW",
    "InstallHinfSectionA",
    "CM_Get_Resource_Conflict_DetailsA",
    "CM_Add_Range",
    "SetupGetInfInformationW",
    "SetupGetLineByIndexW",
    "SetupDiBuildDriverInfoList",
    "SetupSetDirectoryIdA",
    "CM_Next_Range",
    "CM_Get_Device_ID_List_ExA",
    "SetupAddToDiskSpaceListW",
    "SetupDiGetDeviceInfoListDetailA",
    "SetupRemoveSectionFromDiskSpaceListA",
    "CM_Enumerate_EnumeratorsA",
    "CM_Get_Res_Des_Data_Ex",
    "SetupDiSetClassInstallParamsW",
    "pSetupOpenAndMapFileForRead",
    "SetupSetDirectoryIdW",
    "pSetupStringTableLookUpStringEx",
    "SetupDiGetClassDevsExW",
    "SetupDiCreateDeviceInfoListExW",
    "SetupGetLineTextW",
    "CM_Is_Version_Available_Ex",
    "CM_Get_HW_Prof_Flags_ExW",
    "SetupInstallServicesFromInfSectionExA",
    "SetupCommitFileQueue",
    "SetupQueueCopyIndirectA",
    "CM_Get_First_Log_Conf_Ex",
    "CM_Add_Empty_Log_Conf",
    "CM_Query_And_Remove_SubTreeW",
    "pSetupInfIsFromOemLocation",
    "CM_Get_Parent",
    "SetupDiSetSelectedDriverW",
    "SetupOpenAppendInfFileA",
    "pSetupGetInfSections",
    "SetupDiCreateDeviceInterfaceA",
    "SetupDiGetSelectedDevice",
    "CM_Query_And_Remove_SubTree_ExW",
    "pSetupStringTableAddString",
    "pSetupDestroyRunOnceNodeList",
    "SetupDiInstallClassW",
    "SetupDiGetClassDescriptionExA",
    "SetupDiSetDeviceInterfaceDefault",
    "SetupDiGetActualSectionToInstallExA",
    "CM_Get_DevNode_Registry_PropertyA",
    "CM_Set_HW_Prof_FlagsA",
    "pSetupInstallCatalog",
    "CM_Get_Resource_Conflict_DetailsW",
    "CM_Get_Device_Interface_List_ExW",
    "SetupDiGetClassImageIndex",
    "SetupGetMultiSzFieldA",
    "SetupInitDefaultQueueCallback",
    "SetupInstallFileA",
    "SetupRemoveSectionFromDiskSpaceListW",
    "pSetupFree",
    "SetupInstallServicesFromInfSectionW",
    "SetupDiCreateDeviceInfoList",
    "CMP_UnregisterNotification",
    "SetupCopyErrorW",
    "SetupDiRemoveDevice",
    "SetupDiCreateDeviceInfoA",
    "SetupGetFileQueueCount",
    "ExtensionPropSheetPageProc",
    "SetupGetSourceInfoW",
    "InstallHinfSectionW",
    "SetupQueueDeleteSectionW",
    "pSetupRetrieveServiceConfig",
    "pSetupWriteLogEntry",
    "pSetupGetFileTitle",
    "CM_Connect_MachineW",
    "SetupAdjustDiskSpaceListA",
    "SetupAdjustDiskSpaceListW",
    "SetupDiOpenClassRegKeyExW",
    "pSetupSetNoDriverPrompts",
    "CM_Get_Device_IDA",
    "CM_Request_Eject_PC",
    "SetupPromptReboot",
    "SetupQueueRenameSectionW",
    "CM_Get_DevNode_Custom_PropertyA",
    "CM_Get_Hardware_Profile_Info_ExA",
    "CM_Reenumerate_DevNode",
    "SetupDiGetHwProfileFriendlyNameExW",
    "SetupDiGetClassDevPropertySheetsW",
    "SetupSetDirectoryIdExW",
    "SetupDiClassNameFromGuidW",
    "pSetupGetGlobalFlags",
    "SetupGetFieldCount",
    "SetupSetDirectoryIdExA",
    "pSetupSetArrayToMultiSzValue",
    "SetupDiClassGuidsFromNameExA",
    "CM_Set_DevNode_Registry_Property_ExA",
    "SetupCloseLog",
    "SetupDiGetClassDescriptionExW",
    "CM_Register_Device_InterfaceW",
    "CM_Set_Class_Registry_PropertyW",
    "CM_Set_DevNode_Registry_PropertyA",
    "CM_Get_Class_Key_NameW",
    "SetupEnumInfSectionsW",
    "pSetupDiSetDeviceInfoContext",
    "CM_Get_Next_Res_Des",
    "SetupDuplicateDiskSpaceListW",
    "SetupFindNextMatchLineA",
    "CM_Reenumerate_DevNode_Ex",
    "SetupCommitFileQueueW",
    "SetupGetSourceInfoA",
    "pSetupConcatenatePaths",
    "SetupAddInstallSectionToDiskSpaceListA",
    "CM_Get_Class_Registry_PropertyA",
    "SetupBackupErrorW",
    "SetupQueueCopyA",
    "SetupRemoveFileLogEntryW",
    "CM_Delete_DevNode_Key",
    "CM_Add_IDA",
    "CM_Add_Res_Des",
    "pSetupShouldDeviceBeExcluded",
    "SetupOpenFileQueue",
    "SetupDiGetDeviceInfoListDetailW",
    "CM_Query_Resource_Conflict_List",
    "SetupQuerySourceListA",
    "SetupDiDestroyDeviceInfoList",
    "SetupDiSetSelectedDevice",
    "CM_Free_Res_Des_Handle",
    "SetupQuerySpaceRequiredOnDriveA",
    "SetupLogErrorA",
    "pSetupGetField",
    "SetupScanFileQueue",
    "pSetupGetCurrentDriverSigningPolicy",
    "SetupQueueDeleteW",
    "pSetupHandleFailedVerification",
    "SetupDiGetClassRegistryPropertyA",
    "SetupDiGetDeviceInterfaceDetailA",
    "CM_Uninstall_DevNode_Ex",
    "SetupQueueDefaultCopyW",
    "CM_Request_Eject_PC_Ex",
    "CM_Open_Class_KeyA",
    "SetupRemoveInstallSectionFromDiskSpaceListA",
    "IsUserAdmin",
    "SetupDiOpenClassRegKey",
    "CM_Get_Device_Interface_ListW",
    "SetupDiInstallDeviceInterfaces",
    "SetupCopyOEMInfW",
    "SetupGetFileCompressionInfoExW",
    "SetupIterateCabinetA",
    "VerifyCatalogFile",
    "CM_Delete_Class_Key_Ex",
    "SetupPromptForDiskA",
    "CM_Add_IDW",
    "SetupDiCreateDevRegKeyA",
    "SetupDiInstallDevice",
    "SetupDiCreateDevRegKeyW",
    "pSetupUnicodeToMultiByte",
    "CM_Get_Class_Registry_PropertyW",
    "CM_Get_Device_ID_Size",
    "CM_Get_Version_Ex",
    "CM_Enumerate_Enumerators_ExW",
    "CM_Query_Arbitrator_Free_Size",
    "CM_Detect_Resource_Conflict",
    "SetupQueryFileLogA",
    "CM_Get_Res_Des_Data",
    "CM_Get_Device_Interface_List_ExA",
    "SetupDiDestroyClassImageList",
    "CM_Get_Class_Name_ExW",
    "CM_Uninstall_DevNode",
    "SetupGetFileCompressionInfoA",
    "CM_Get_Device_Interface_List_SizeW",
    "SetupDiGetDriverInfoDetailW",
    "SetupInstallFilesFromInfSectionW",
    "SetupQueueRenameSectionA",
    "pSetupStringTableDuplicate",
    "CM_Locate_DevNode_ExW",
    "SetupDiClassGuidsFromNameA",
    "SetupDefaultQueueCallbackA",
    "SetupDiBuildClassInfoListExW",
    "SetupDiSetSelectedDriverA",
    "SetupRenameErrorW",
    "SetupRemoveFromDiskSpaceListA",
    "SetupRemoveFromDiskSpaceListW",
    "CM_Add_ID_ExA",
    "SetupEnumInfSectionsA",
    "CM_Request_Device_EjectW",
    "CM_Register_Device_InterfaceA",
    "CMP_WaitServicesAvailable",
    "pSetupIsUserAdmin",
    "pSetupStringTableEnum",
    "CM_Get_Device_Interface_AliasW",
    "SetupInstallFromInfSectionW",
    "SetupGetFileCompressionInfoW",
    "SetupDuplicateDiskSpaceListA",
    "SetupRenameErrorA",
    "SetupQueueDeleteA",
    "SetupDiGetSelectedDriverW",
    "SetupGetLineCountW",
    "CM_Set_DevNode_Registry_Property_ExW",
    "CM_Free_Resource_Conflict_Handle",
    "CM_Get_HW_Prof_FlagsW",
    "SetupInstallFilesFromInfSectionA",
    "CM_Intersect_Range_List",
    "SetupDiGetClassDevPropertySheetsA",
    "CM_Modify_Res_Des",
    "CM_Get_Sibling",
    "SetupQueueRenameW",
    "CM_Get_Device_ID_List_Size_ExW",
    "InstallCatalog",
    "CM_Disable_DevNode_Ex",
    "SetupDiSetDriverInstallParamsA",
    "CM_First_Range",
    "SetupGetSourceFileSizeA",
    "CM_Get_Class_NameA",
    "CM_Get_Device_ID_List_Size_ExA",
    "CM_Run_Detection",
    "SetupGetTargetPathA",
    "CM_Set_DevNode_Registry_PropertyW",
    "pSetupSetSystemSourcePath",
    "SetupDiGetWizardPage",
    "pSetupMultiByteToUnicode",
    "CM_Get_Log_Conf_Priority_Ex",
    "CM_Query_Remove_SubTree",
    "CM_Create_DevNodeW",
    "CM_Create_Range_List",
    "SetupGetTargetPathW",
    "SetupGetStringFieldA",
    "CM_Get_Res_Des_Data_Size",
    "SetupDiBuildClassInfoListExA",
    "SetupOpenInfFileW",
    "SetupInstallServicesFromInfSectionExW",
    "SetupDiGetDeviceInstanceIdW",
    "SetupGetInfInformationA",
    "pSetupStringTableAddStringEx",
    "SetupDiGetClassImageList",
    "SetupDiGetHwProfileFriendlyNameA",
    "CM_Get_Device_ID_ListW",
    "CM_Free_Range_List",
    "SetupQuerySpaceRequiredOnDriveW",
    "SetupUninstallOEMInfA",
    "CM_Set_HW_Prof_Flags_ExA",
    "UnicodeToMultiByte",
    "CM_Query_Remove_SubTree_Ex",
    "CM_Set_Class_Registry_PropertyA",
    "pSetupStringFromGuid",
    "pSetupVerifyFile",
    "SetupInitializeFileLogA",
    "CM_Get_Depth",
    "pSetupDuplicateString",
    "SetupDefaultQueueCallback",
    "CM_Set_DevNode_Problem",
    "pSetupRealloc",
    "SetupAddToDiskSpaceListA",
    "CM_Get_Log_Conf_Priority",
    "SetupDefaultQueueCallbackW",
    "CM_Create_DevNode_ExW",
    "CM_Get_Device_ID_List_ExW",
    "SetupQueryFileLogW",
    "CM_Get_Device_ID_ListA",
    "SetupCopyErrorA",
    "SetupDiGetClassDevsExA",
    "CM_Remove_SubTree",
    "SetupQueueRenameA",
    "SetupQueueCopyW",
    "CM_Set_HW_Prof_Flags_ExW",
    "SetupDiOpenDeviceInfoW",
    "CM_Get_Device_IDW",
    "CM_Is_Dock_Station_Present",
    "pSetupFreeStringArray",
    "SetupDeleteErrorW",
    "SetupDiRemoveDeviceInterface",
    "CM_Disable_DevNode",
    "SetupPromptForDiskW",
    "CM_Get_Class_Name_ExA",
    "CM_Enable_DevNode",
    "SetupRemoveFromSourceListA",
    "SetupGetBackupInformationW",
    "CM_Is_Dock_Station_Present_Ex",
    "SetupDiAskForOEMDisk",
    "SetupDiDeleteDeviceInfo",
    "CM_Register_Device_Interface_ExA",
    "SetupDiInstallClassExW",
    "pSetupVerifyQueuedCatalogs",
    "CM_Disconnect_Machine",
    "CM_Query_And_Remove_SubTreeA",
    "SetupGetInfFileListW",
    "SetupLogErrorW",
    "CM_Delete_DevNode_Key_Ex",
    "CM_Get_Parent_Ex",
    "CM_Query_Arbitrator_Free_Data_Ex",
    "SetupSetFileQueueAlternatePlatformA",
    "SetupLogFileW",
    "SetupOpenInfFileA",
    "SetupDiGetINFClassW",
    "SetupQueryInfOriginalFileInformationW",
    "SetupQueryInfVersionInformationW",
    "SetupDiGetActualSectionToInstallW",
    "SetupInstallFileW",
    "CM_Locate_DevNodeA",
    "SetupDiClassNameFromGuidExA",
    "CM_Query_And_Remove_SubTree_ExA",
    "CM_Get_DevNode_Registry_Property_ExW",
    "SetupDiGetClassDevsA",
    "SetupQueryInfFileInformationA",
    "SetupDiOpenClassRegKeyExA",
    "CM_Get_Class_Key_NameA",
    "SetupCloseInfFile",
    "pSetupModifyGlobalFlags",
    "SetupDestroyDiskSpaceList",
    "SetupFindFirstLineA",
    "pSetupStringTableLookUpString",
    "SetupDecompressOrCopyFileA",
    "SetupDecompressOrCopyFileW",
    "SetupDiGetClassInstallParamsA",
    "SetupSetSourceListW",
    "SetupFindNextMatchLineW",
    "CM_Get_HW_Prof_Flags_ExA",
    "SetupQueryDrivesInDiskSpaceListA",
    "CM_Enumerate_EnumeratorsW",
    "CM_Test_Range_Available",
    "SetupDiGetDeviceInstallParamsW",
    "SetupGetFileCompressionInfoExA",
    "SetupQuerySourceListW",
    "SetupQueueDeleteSectionA",
    "SetupDiDeleteDevRegKey",
    "SetupDiGetClassImageListExA",
    "CM_Request_Device_EjectA",
    "SetupDiOpenDevRegKey",
    "pSetupDiGetDeviceInfoContext",
    "SetupDiDestroyDriverInfoList",
    "CM_Get_DevNode_Custom_Property_ExW",
    "SetupDiBuildClassInfoList",
    "SetupVerifyInfFileW",
    "SetupDiOpenDeviceInfoA",
    "CM_Get_Device_Interface_List_SizeA",
    "SetupPrepareQueueForRestoreA",
    "SetupDiSelectDevice",
    "SetupDiGetDeviceInstanceIdA",
    "SetupOpenAppendInfFileW",
    "pSetupStringTableStringFromIdEx",
    "SetupAddToSourceListW",
    "CM_Query_Arbitrator_Free_Size_Ex",
    "CM_Get_DevNode_Registry_Property_ExA",
    "SetupCommitFileQueueA",
    "CM_Open_DevNode_Key"
  ],
  "setupdll.dll": [
    "SetupCreateService",
    "GetSelectedVideo",
    "SetEnvVar",
    "SetupChangeServiceConfig",
    "DeleteAllConnections",
    "LegacyInfGetModifiedSvcList",
    "GetUnusedDrives",
    "TestAdmin",
    "CheckConfigType",
    "SetupAddPrinterMonitor",
    "CheckPrivilegeExists",
    "GetPrinterDriverDir",
    "GetAnsiCodepage",
    "NtPathToDosPath",
    "ArcPathToDosPath",
    "GetMyBusTypeList",
    "ToLower",
    "GetLoadedEnvVar",
    "GetCountry",
    "GetHardDriveFreeSpace",
    "BinaryFileSubst",
    "IsUniprocessorSystem",
    "GetPciInformation",
    "GetNtDir",
    "Delnode",
    "ProcessForUNC",
    "RenFile",
    "GetNtBootInfo",
    "GetMyBusType",
    "GetMyUserName",
    "SetupAddPrinterDriver",
    "GetSystemDate",
    "SetupChangeServiceStart",
    "GetMyVideoType",
    "LegacyInfInterpret",
    "CopySingleFile",
    "AppendBackSlash",
    "VdmFixup",
    "GetWindowsNtVersion",
    "DosPathToArcPath",
    "GetWindowsNtDir",
    "GetCrashDumpSize",
    "ShutdownRemoteSystem",
    "DosPathToNtPath",
    "DelFile",
    "GetInstalledOSNames",
    "GetWindowsNtSysDir",
    "SetupStrncmp",
    "GetFileLastWriteTime",
    "GenerateSortedIndexList",
    "GetMemorySize",
    "GetMyComputerName",
    "DoesDirExist",
    "GetSelectedPointer",
    "DeleteNetConnection",
    "GetUserAccounts",
    "GetMyKeyboardType",
    "GetHardDriveTotalSpace",
    "GetProcessor",
    "GetLanguage",
    "GetFloppyDriveLetters",
    "SetCurrentLayout",
    "ConfigFileSubst",
    "GetWindowsPath",
    "LegacyInfLookUpSymbol",
    "CheckPathFullPathSpec",
    "SetCurrentLocale",
    "GetTypeOfDrive",
    "dll_main",
    "GetDevicemapValue",
    "LegacyInfSetSymbolValue",
    "GetMyPointerType",
    "AreCharsInString",
    "GetSizeOfFile",
    "GetMCABusInformation",
    "SetNVRAMVar",
    "NetNameCheck",
    "SumListItems",
    "GetDosPathVar",
    "GetNtDrive",
    "GetNVRAMVar",
    "SetMyComputerName",
    "GetFileLastAccessTime",
    "WhiteSpaceCheck",
    "LegacyInfRemoveInfSymbol",
    "GetHardDriveLetters",
    "ExpandSz",
    "GetEnvVar",
    "GetPlatform",
    "CheckDriveExternal",
    "CheckFileExistance",
    "ConfigFileAppend",
    "AddNetConnection",
    "GetHardDriveFileSystems",
    "SetupAddPrinter",
    "GetEisaSlotInformation",
    "GetMyComputerType",
    "GetSelectedKeyboard",
    "FindFileInstances",
    "EnablePrivilege",
    "GetOemCodepage",
    "GetFileCreationTime",
    "DoesFileExist",
    "ShutdownSystem"
  ],
  "sfc.dll": [
    "SfcGetNextProtectedFile",
    "SfcIsFileProtected",
    "SRSetRestorePointW",
    "SfcWLEventLogon",
    "SfpVerifyFile",
    "SRSetRestorePointA",
    "SRSetRestorePoint",
    "SfcWLEventLogoff"
  ],
  "sfc_os.dll": [
    "SfcWLEventLogoff",
    "SfcGetNextProtectedFile",
    "SfcWLEventLogon",
    "SfcIsFileProtected"
  ],
  "sfcfiles.dll": [
    "SfcGetFiles"
  ],
  "sfmapi.dll": [
    "AfpAdminBufferFree",
    "AfpAdminVolumeGetInfo",
    "AfpAdminStatisticsClear",
    "AfpAdminFileClose",
    "AfpAdminETCMapDelete",
    "AfpAdminSessionEnum",
    "AfpAdminETCMapSetInfo",
    "AfpAdminDirectoryGetInfo",
    "AfpAdminConnectionClose",
    "AfpAdminProfileGet",
    "AfpAdminServerGetInfo",
    "AfpAdminProfileClear",
    "AfpAdminETCMapGetInfo",
    "AfpAdminConnectionEnum",
    "AfpAdminVolumeSetInfo",
    "AfpAdminMessageSend",
    "AfpAdminDirectorySetInfo",
    "AfpAdminConnect",
    "AfpAdminInvalidVolumeEnum",
    "AfpAdminETCMapAdd",
    "AfpAdminVolumeEnum",
    "AfpAdminETCMapAssociate",
    "AfpAdminServerSetInfo",
    "AfpAdminStatisticsGet",
    "AfpAdminSessionClose",
    "AfpAdminFileEnum",
    "AfpAdminDisconnect",
    "AfpAdminStatisticsGetEx",
    "AfpAdminInvalidVolumeDelete",
    "AfpAdminVolumeDelete",
    "AfpAdminFinderSetInfo",
    "AfpAdminVolumeAdd"
  ],
  "shdoclc.dll": "No exports",
  "shdocvw.dll": [
    "ImportPrivacySettings",
    "DllRegisterWindowClasses",
    "URLQualifyA",
    "DoOrganizeFavDlgW",
    "SHGetIDispatchForFolder",
    "SoftwareUpdateMessageBox",
    "HlinkFindFrame",
    "OpenURL",
    "DoPrivacyDlg",
    "IEWriteErrorLog",
    "AddUrlToFavorites",
    "DllRegisterServer",
    "HlinkFrameNavigateNHL",
    "DoFileDownload",
    "HlinkFrameNavigate",
    "SetQueryNetSessionCount",
    "DllGetClassObject",
    "DllGetVersion",
    "DoAddToFavDlgW",
    "SHAddSubscribeFavorite",
    "DoAddToFavDlg",
    "DoFileDownloadEx",
    "DoOrganizeFavDlg",
    "DllCanUnloadNow",
    "DllInstall",
    "URLQualifyW",
    "DllUnregisterServer",
    "SetShellOfflineState"
  ],
  "shell32.dll": [
    "SHFormatDrive",
    "Shell_NotifyIconA",
    "ExtractAssociatedIconA",
    "SHChangeNotifyRegister",
    "SHCoCreateInstance",
    "DoEnvironmentSubstW",
    "SHGetAttributesFromDataObject",
    "SHChangeNotification_Lock",
    "SHSetLocalizedName",
    "SheShortenPathA",
    "SHCreateDirectory",
    "SheChangeDirA",
    "SHQueryRecycleBinA",
    "ILGetSize",
    "SHBrowseForFolderW",
    "DAD_DragMove",
    "SHEmptyRecycleBinW",
    "SheGetPathOffsetW",
    "SHGetPathFromIDListW",
    "DragQueryFileA",
    "ExtractIconEx",
    "SHIsFileAvailableOffline",
    "SHGetFileInfoA",
    "SHGetDataFromIDListW",
    "SHUpdateImageW",
    "SHInvokePrinterCommandA",
    "SHSetUnreadMailCountW",
    "PathMakeUniqueName",
    "SHDestroyPropSheetExtArray",
    "SHShellFolderView_Message",
    "SHGetDataFromIDListA",
    "StrRChrA",
    "ILCreateFromPath",
    "SheShortenPathW",
    "StrCmpNIA",
    "SHPropStgWriteMultiple",
    "ShellMessageBoxA",
    "Shell_GetCachedImageIndex",
    "ILLoadFromStream",
    "SHGetIconOverlayIndexW",
    "DoEnvironmentSubstA",
    "ExtractIconResInfoA",
    "Control_FillCache_RunDLL",
    "InternalExtractIconListA",
    "SHDoDragDrop",
    "StrNCmpIA",
    "SHReplaceFromPropSheetExtArray",
    "SHBindToParent",
    "SheConvertPathW",
    "PathQualify",
    "SHGetFolderPathAndSubDirA",
    "CheckEscapesA",
    "ILGetNext",
    "ExtractIconExW",
    "ReadCabinetState",
    "RegenerateUserEnvironment",
    "PifMgr_OpenProperties",
    "AppCompat_RunDLLW",
    "ShellExecuteExA",
    "FindExecutableA",
    "RealShellExecuteExA",
    "DragQueryFileAorW",
    "SHOpenFolderAndSelectItems",
    "SheChangeDirExA",
    "StrNCpyW",
    "SHPathPrepareForWriteA",
    "SHGetFileInfo",
    "StrRStrIA",
    "SHSetInstanceExplorer",
    "FindExecutableW",
    "DAD_DragEnterEx",
    "SHEnableServiceObject",
    "SheFullPathW",
    "PifMgr_SetProperties",
    "WriteCabinetState",
    "DAD_ShowDragImage",
    "SHHelpShortcuts_RunDLLW",
    "SHUpdateImageA",
    "PathCleanupSpec",
    "IsNetDrive",
    "PifMgr_GetProperties",
    "SHGetPathFromIDListA",
    "DragFinish",
    "ExtractIconA",
    "StrRStrA",
    "Shell_NotifyIcon",
    "RealDriveType",
    "DriveType",
    "DuplicateIcon",
    "Control_FillCache_RunDLLA",
    "SHPropStgReadMultiple",
    "DAD_SetDragImage",
    "SheGetCurDrive",
    "StrNCmpW",
    "Shell_GetImageLists",
    "SHGetSetFolderCustomSettingsW",
    "DAD_DragEnterEx2",
    "SHCreateDirectoryExW",
    "PathIsSlowA",
    "DragAcceptFiles",
    "SHFileOperationW",
    "InternalExtractIconListW",
    "StrStrW",
    "SHCreateFileExtractIconW",
    "ExtractIconW",
    "DllCanUnloadNow",
    "StrChrIW",
    "ILFree",
    "SHCreateShellItem",
    "SHCLSIDFromString",
    "RealShellExecuteExW",
    "Activate_RunDLL",
    "OpenAs_RunDLLW",
    "StrRStrIW",
    "ShellExecuteA",
    "SHRestricted",
    "SHCreateQueryCancelAutoPlayMoniker",
    "SHPropStgCreate",
    "SheFullPathA",
    "SHGetIconOverlayIndexA",
    "IsLFNDriveA",
    "DllInstall",
    "DllUnregisterServer",
    "SHUnlockShared",
    "ExtractVersionResource16W",
    "SHLoadOLE",
    "ILIsParent",
    "ShellExecuteExW",
    "ILFindLastID",
    "CDefFolderMenu_Create",
    "ExtractAssociatedIconExA",
    "SHRunControlPanel",
    "StrChrIA",
    "SHMapPIDLToSystemImageListIndex",
    "RealShellExecuteA",
    "Control_FillCache_RunDLLW",
    "SHInvokePrinterCommandW",
    "Control_RunDLLAsUserW",
    "SHDefExtractIconA",
    "SHBrowseForFolder",
    "ILCreateFromPathW",
    "Win32DeleteFile",
    "Control_RunDLLA",
    "StrCmpNW",
    "RestartDialog",
    "SheGetDirA",
    "WOWShellExecute",
    "SHBrowseForFolderA",
    "PathYetAnotherMakeUniqueName",
    "SheSetCurDrive",
    "SHGetRealIDL",
    "IsLFNDrive",
    "PrintersGetCommand_RunDLL",
    "Control_RunDLL",
    "Shell_NotifyIconW",
    "StrRChrW",
    "SHGetUnreadMailCountW",
    "PickIconDlg",
    "SHTestTokenMembership",
    "ShellHookProc",
    "SHGetDiskFreeSpaceA",
    "ShellAboutA",
    "SheChangeDirW",
    "Options_RunDLLA",
    "SHGetNewLinkInfoA",
    "SHValidateUNC",
    "IsLFNDriveW",
    "StrCpyNW",
    "SHCreateShellFolderView",
    "SHGetFolderPathW",
    "SHExtractIconsW",
    "ShellExecuteEx",
    "ShellExec_RunDLLA",
    "SHFree",
    "RestartDialogEx",
    "SHFindFiles",
    "SHFreeNameMappings",
    "SHGetDesktopFolder",
    "ILRemoveLastID",
    "SHGetDiskFreeSpaceExA",
    "DAD_DragLeave",
    "PathGetShortPath",
    "SHGetNewLinkInfo",
    "ExtractIconResInfoW",
    "SHILCreateFromPath",
    "ILFindChild",
    "ILCreateFromPathA",
    "SHGetPathFromIDList",
    "SHCreateDirectoryExA",
    "FreeIconList",
    "CDefFolderMenu_Create2",
    "SHPathPrepareForWriteW",
    "SHGetFolderPathAndSubDirW",
    "SHLoadInProc",
    "StrRChrIA",
    "SHFileOperationA",
    "PifMgr_CloseProperties",
    "DllGetClassObject",
    "ExtractIconExA",
    "SHQueryRecycleBinW",
    "PrintersGetCommand_RunDLLW",
    "GetFileNameFromBrowse",
    "PrintersGetCommand_RunDLLA",
    "SHDefExtractIconW",
    "DragQueryPoint",
    "DragQueryFile",
    "OpenRegStream",
    "Shell_MergeMenus",
    "SheRemoveQuotesW",
    "SHChangeNotify",
    "SHGetFolderPathA",
    "SHAddToRecentDocs",
    "SHLoadNonloadedIconOverlayIdentifiers",
    "IsUserAnAdmin",
    "SignalFileOpen",
    "ShellMessageBoxW",
    "SHStartNetConnectionDialogW",
    "SHGetSettings",
    "SHGetShellStyleHInstance",
    "ExtractAssociatedIconExW",
    "ShellAboutW",
    "DragQueryFileW",
    "SHLimitInputEdit",
    "StrNCmpIW",
    "SHFreeShared",
    "SHHandleUpdateImage",
    "SHAddFromPropSheetExtArray",
    "SheChangeDirExW",
    "StrStrIW",
    "SHGetSpecialFolderPathW",
    "SHCloneSpecialIDList",
    "ShellExec_RunDLL",
    "SHAlloc",
    "SHChangeNotification_Unlock",
    "RealShellExecuteW",
    "DllGetVersion",
    "SHFind_InitMenuPopup",
    "SHParseDisplayName",
    "SHAppBarMessage",
    "Options_RunDLL",
    "StrRStrW",
    "DAD_AutoScroll",
    "SheRemoveQuotesA",
    "StrCmpNA",
    "PathIsSlowW",
    "SHObjectProperties",
    "SheGetDirW",
    "StrNCmpA",
    "StrCmpNIW",
    "StrChrA",
    "Options_RunDLLW",
    "SHMultiFileProperties",
    "SHGetSpecialFolderPathA",
    "ILCombine",
    "SHEmptyRecycleBinA",
    "SHGetDiskFreeSpaceExW",
    "SHChangeNotifySuspendResume",
    "SHGetImageList",
    "StrStrIA",
    "Control_RunDLLW",
    "ShellExecuteW",
    "CheckEscapesW",
    "SHCreateStdEnumFmtEtc",
    "StrRChrIW",
    "ILSaveToStream",
    "CallCPLEntry16",
    "StrChrW",
    "SHGetMalloc",
    "CommandLineToArgvW",
    "SHGetSetSettings",
    "ILIsEqual",
    "PathResolve",
    "SHCreateProcessAsUserW",
    "SHLockShared",
    "SHFlushSFCache",
    "SHFileOperation",
    "StrStrA",
    "SheGetDirExW",
    "SHGetInstanceExplorer",
    "ExtractAssociatedIconW",
    "ILAppendID",
    "ILClone",
    "ShellExec_RunDLLW",
    "SHSimpleIDListFromPath",
    "SHGetSpecialFolderLocation",
    "FindExeDlgProc",
    "PathProcessCommand",
    "SHUpdateRecycleBinIcon",
    "StrCpyNA",
    "SHAllocShared",
    "SHEnumerateUnreadMailAccountsW",
    "PathIsExe",
    "SHCreatePropSheetExtArray",
    "SHMapIDListToImageListIndexAsync",
    "SHHelpShortcuts_RunDLL",
    "DllRegisterServer",
    "ILCloneFirst",
    "OpenAs_RunDLLA",
    "SHGetFolderLocation",
    "OpenAs_RunDLL",
    "SHFlushClipboard",
    "SHGetNewLinkInfoW",
    "SHCreateShellFolderViewEx",
    "SHGetFileInfoW",
    "SHCreateLocalServerRunDll",
    "SHHelpShortcuts_RunDLLA",
    "StrNCpyA",
    "SHOpenPropSheetW",
    "SHChangeNotifyDeregister"
  ],
  "shellstyle.dll": "No exports",
  "shfolder.dll": [
    "SHGetFolderPathW",
    "SHGetFolderPathA"
  ],
  "shgina.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllInstall",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "shimeng.dll": [
    "SE_InstallAfterInit",
    "SE_DynamicShim",
    "SE_InstallBeforeInit",
    "SE_GetProcAddress",
    "SE_ProcessDying",
    "SE_DllLoaded",
    "SE_DllUnloaded",
    "SE_IsShimDll"
  ],
  "shimgvw.dll": [
    "ImageView_PrintTo",
    "ImageView_FullscreenW",
    "ConvertDIBSECTIONToThumbnail",
    "DllCanUnloadNow",
    "ImageView_COMServer",
    "ImageView_PrintToA",
    "ImageView_Fullscreen",
    "DllGetClassObject",
    "DllInstall",
    "DllRegisterServer",
    "ImageView_PrintToW",
    "DllUnregisterServer",
    "ImageView_FullscreenA",
    "imageview_fullscreenW"
  ],
  "shlwapi.dll": [
    "StrFromTimeIntervalA",
    "PathUnmakeSystemFolderW",
    "SHDeleteKeyA",
    "StrCmpICA",
    "PathSetDlgItemPathA",
    "ColorAdjustLuma",
    "SHCreateStreamOnFileEx",
    "StrToIntA",
    "AssocQueryKeyW",
    "PathRemoveExtensionW",
    "ChrCmpIW",
    "PathIsPrefixA",
    "PathIsLFNFileSpecA",
    "StrFormatKBSizeW",
    "PathIsContentTypeA",
    "PathCompactPathExW",
    "StrRChrA",
    "AssocQueryStringW",
    "wnsprintfA",
    "StrCmpNIA",
    "wvnsprintfW",
    "PathIsDirectoryA",
    "PathUnExpandEnvStringsW",
    "StrCatBuffA",
    "SHSetValueW",
    "StrPBrkA",
    "StrSpnW",
    "SHRegGetBoolUSValueA",
    "StrCSpnA",
    "PathGetArgsA",
    "SHRegDeleteEmptyUSKeyA",
    "PathCombineA",
    "SHRegSetPathA",
    "SHCreateThread",
    "PathIsUNCServerA",
    "PathIsUNCServerShareA",
    "SHRegWriteUSValueA",
    "SHRegGetPathA",
    "StrToIntExW",
    "SHCopyKeyA",
    "PathCommonPrefixW",
    "UrlHashA",
    "PathUnquoteSpacesW",
    "GetAcceptLanguagesW",
    "PathIsSystemFolderA",
    "PathCommonPrefixA",
    "SHCopyKeyW",
    "StrIsIntlEqualW",
    "PathStripToRootA",
    "PathSkipRootW",
    "StrRStrIA",
    "UrlIsW",
    "GetMenuPosFromID",
    "PathIsPrefixW",
    "StrChrNIW",
    "StrCmpCW",
    "AssocIsDangerous",
    "PathMatchSpecW",
    "SHRegSetUSValueA",
    "PathIsLFNFileSpecW",
    "SHGetInverseCMAP",
    "PathParseIconLocationA",
    "PathMakePrettyW",
    "PathIsDirectoryEmptyA",
    "PathAppendW",
    "StrDupW",
    "SHQueryInfoKeyW",
    "PathUndecorateA",
    "PathIsSameRootW",
    "SHRegEnumUSKeyA",
    "StrCSpnIW",
    "UrlEscapeA",
    "SHRegGetValueW",
    "PathIsRootA",
    "PathStripPathA",
    "StrCSpnIA",
    "PathRelativePathToA",
    "ColorRGBToHLS",
    "PathAddBackslashA",
    "PathRelativePathToW",
    "StrFormatByteSize64A",
    "UrlIsA",
    "PathIsURLW",
    "StrStrW",
    "PathRemoveArgsW",
    "SHDeleteEmptyKeyA",
    "AssocQueryStringA",
    "SHRegGetPathW",
    "UrlUnescapeA",
    "StrCatChainW",
    "StrChrIW",
    "IsCharSpaceA",
    "StrCmpW",
    "SHDeleteOrphanKeyA",
    "SHEnumValueA",
    "SHLoadIndirectString",
    "StrToIntExA",
    "StrSpnA",
    "PathParseIconLocationW",
    "SHSetThreadRef",
    "PathFileExistsA",
    "StrRStrIW",
    "PathBuildRootW",
    "PathIsContentTypeW",
    "SHReleaseThreadRef",
    "PathIsUNCW",
    "StrNCatA",
    "StrStrNIW",
    "PathGetCharTypeW",
    "PathIsRelativeA",
    "PathStripToRootW",
    "SHCreateShellPalette",
    "StrPBrkW",
    "StrCmpICW",
    "PathFindFileNameW",
    "SHUnlockShared",
    "PathGetCharTypeA",
    "PathRemoveExtensionA",
    "StrRetToStrW",
    "StrNCatW",
    "PathCreateFromUrlW",
    "StrChrIA",
    "PathIsNetworkPathW",
    "AssocCreate",
    "StrCmpIW",
    "SHStrDupA",
    "SHStrDupW",
    "UrlCombineW",
    "PathCompactPathA",
    "SHQueryInfoKeyA",
    "StrCmpNW",
    "StrRetToBufA",
    "PathIsFileSpecW",
    "PathIsRootW",
    "UrlCompareA",
    "AssocQueryKeyA",
    "UrlCompareW",
    "SHAutoComplete",
    "PathIsDirectoryW",
    "StrRChrW",
    "PathSetDlgItemPathW",
    "SHDeleteValueA",
    "StrToInt64ExW",
    "PathMakePrettyA",
    "StrCpyW",
    "SHGetValueA",
    "SHQueryValueExW",
    "SHRegWriteUSValueW",
    "StrCatBuffW",
    "SHOpenRegStreamA",
    "SHRegDeleteUSValueA",
    "StrCpyNW",
    "StrRetToStrA",
    "PathFindExtensionW",
    "PathAppendA",
    "SHRegOpenUSKeyA",
    "StrCmpLogicalW",
    "StrFormatByteSizeA",
    "PathGetDriveNumberA",
    "UrlApplySchemeA",
    "PathAddExtensionA",
    "SHIsLowMemoryMachine",
    "UrlHashW",
    "SHCreateStreamOnFileW",
    "wvnsprintfA",
    "UrlCanonicalizeW",
    "PathIsFileSpecA",
    "SHEnumValueW",
    "UrlCreateFromPathA",
    "UrlEscapeW",
    "UrlGetLocationA",
    "PathIsUNCServerW",
    "StrFormatKBSizeA",
    "UrlGetPartA",
    "SHCreateStreamWrapper",
    "StrRetToBufW",
    "StrTrimA",
    "PathFindSuffixArrayA",
    "ColorHLSToRGB",
    "SHRegDuplicateHKey",
    "PathIsSystemFolderW",
    "PathRemoveBlanksW",
    "StrRChrIA",
    "SHRegEnumUSKeyW",
    "PathIsDirectoryEmptyW",
    "SHOpenRegStream2W",
    "StrFormatByteSizeW",
    "SHSkipJunction",
    "StrRetToBSTR",
    "PathAddBackslashW",
    "StrCatW",
    "UrlCreateFromPathW",
    "PathFindOnPathW",
    "PathMakeSystemFolderA",
    "SHRegCreateUSKeyW",
    "PathIsNetworkPathA",
    "PathIsUNCServerShareW",
    "SHRegEnumUSValueA",
    "PathRemoveBackslashW",
    "ChrCmpIA",
    "IntlStrEqWorkerA",
    "SHGetValueW",
    "StrStrNW",
    "UrlApplySchemeW",
    "PathRemoveFileSpecW",
    "SHRegGetValueA",
    "SHFreeShared",
    "PathAddExtensionW",
    "SHRegQueryUSValueA",
    "SHEnumKeyExA",
    "StrStrIW",
    "IntlStrEqWorkerW",
    "PathFileExistsW",
    "PathCombineW",
    "SHRegQueryInfoUSKeyA",
    "PathCanonicalizeA",
    "SHRegSetPathW",
    "AssocQueryStringByKeyA",
    "PathFindOnPathA",
    "UrlGetLocationW",
    "SHCreateThreadRef",
    "PathSkipRootA",
    "PathRemoveBackslashA",
    "PathSearchAndQualifyW",
    "DllGetVersion",
    "SHRegCreateUSKeyA",
    "PathRenameExtensionW",
    "SHRegDeleteEmptyUSKeyW",
    "PathStripPathW",
    "StrCmpNA",
    "UrlIsNoHistoryA",
    "AssocQueryStringByKeyW",
    "PathGetDriveNumberW",
    "StrCmpNIW",
    "StrChrA",
    "SHGetThreadRef",
    "SHDeleteOrphanKeyW",
    "StrToInt64ExA",
    "PathFindExtensionA",
    "PathBuildRootA",
    "StrToIntW",
    "PathUnquoteSpacesA",
    "UrlIsNoHistoryW",
    "SHDeleteValueW",
    "PathQuoteSpacesW",
    "StrDupA",
    "SHRegisterValidateTemplate",
    "SHSetValueA",
    "SHCreateStreamOnFileA",
    "PathIsUNCA",
    "GetAcceptLanguagesA",
    "SHRegCloseUSKey",
    "PathSearchAndQualifyA",
    "SHRegSetUSValueW",
    "SHRegDeleteUSValueW",
    "PathFindFileNameA",
    "SHRegQueryInfoUSKeyW",
    "StrStrIA",
    "PathIsRelativeW",
    "PathMatchSpecA",
    "SHGetViewStatePropertyBag",
    "UrlCombineA",
    "PathCompactPathExA",
    "PathFindSuffixArrayW",
    "StrRChrIW",
    "PathGetArgsW",
    "UrlUnescapeW",
    "PathCanonicalizeW",
    "SHDeleteEmptyKeyW",
    "PathUnmakeSystemFolderA",
    "StrChrW",
    "wnsprintfW",
    "SHOpenRegStream2A",
    "SHQueryValueExA",
    "PathIsURLA",
    "PathFindNextComponentA",
    "SHLockShared",
    "SHDeleteKeyW",
    "SHRegEnumUSValueW",
    "StrStrA",
    "PathFindNextComponentW",
    "StrFromTimeIntervalW",
    "HashData",
    "PathIsSameRootA",
    "StrIsIntlEqualA",
    "PathQuoteSpacesA",
    "SHOpenRegStreamW",
    "AssocGetPerceivedType",
    "PathMakeSystemFolderW",
    "SHRegOpenUSKeyW",
    "PathRenameExtensionA",
    "SHAllocShared",
    "IsCharSpaceW",
    "StrTrimW",
    "StrCmpCA",
    "PathUnExpandEnvStringsA",
    "UrlCanonicalizeA",
    "StrChrNW",
    "SHRegGetUSValueW",
    "PathCreateFromUrlA",
    "UrlIsOpaqueW",
    "UrlIsOpaqueA",
    "SHRegQueryUSValueW",
    "PathRemoveFileSpecA",
    "PathCompactPathW",
    "PathRemoveArgsA",
    "DelayLoadFailureHook",
    "StrCSpnW",
    "SHEnumKeyExW",
    "PathRemoveBlanksA",
    "SHRegGetUSValueA",
    "SHRegGetBoolUSValueW",
    "PathUndecorateW",
    "UrlGetPartW"
  ],
  "shmedia.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "shscrap.dll": [
    "OpenScrap_RunDLL",
    "OpenScrap_RunDLLA",
    "DllCanUnloadNow",
    "OpenScrap_RunDLLW",
    "DllGetClassObject",
    "Scrap_CreateFromDataObject"
  ],
  "shsvcs.dll": [
    "BadApplicationServiceMain",
    "HardwareDetectionServiceMain",
    "ThemeServiceMain",
    "CreateHardwareEventMoniker",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllInstall",
    "DllRegisterServer",
    "DllUnregisterServer",
    "FUSCompatibilityEntryW"
  ],
  "sigtab.dll": [
    "DllCanUnloadNow",
    "DllMain",
    "DriverSigningDialog",
    "DllGetClassObject"
  ],
  "sisbkup.dll": [
    "SisRestoredLink",
    "SisFreeBackupStructure",
    "SisFreeAllocatedMemory",
    "SisRestoredCommonStoreFile",
    "SisCreateBackupStructure",
    "SisCreateRestoreStructure",
    "SisCSFilesToBackupForLink",
    "SisFreeRestoreStructure"
  ],
  "skdll.dll": [
    "SKEY_SystemParametersInfo"
  ],
  "slayerxp.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "smlogcfg.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "smtpapi.dll": [
    "SmtpDisconnectUser",
    "SmtpGetUserProps",
    "SmtpDeleteDistListMember",
    "SmtpCreateDistListMember",
    "SmtpSetAdminInformation",
    "SmtpBackupRoutingTable",
    "SmtpCreateDistList",
    "SmtpGetConnectedUserList",
    "SmtpCreateUser",
    "SmtpGetNameList",
    "SmtpGetNameListFromList",
    "SmtpDeleteDistList",
    "SmtpDeleteUser",
    "SmtpGetVRootSize",
    "SmtpSetUserProps",
    "SmtpClearStatistics",
    "SmtpQueryStatistics",
    "SmtpGetAdminInformation"
  ],
  "snmpapi.dll": [
    "SnmpUtilVarBindFree",
    "SnmpSvcGetEnterpriseOID",
    "SnmpUtilOctetsCpy",
    "SnmpUtilVarBindListCpy",
    "SnmpUtilMemAlloc",
    "SnmpUtilAnsiToUnicode",
    "SnmpUtilDbgPrint",
    "SnmpUtilOidAppend",
    "SnmpUtilOctetsNCmp",
    "SnmpSvcSetLogLevel",
    "SnmpSvcAddrIsIpx",
    "SnmpSvcInitUptime",
    "SnmpTfxOpen",
    "SnmpUtilMemFree",
    "SnmpUtilOidToA",
    "SnmpSvcAddrToSocket",
    "SnmpUtilOctetsFree",
    "SnmpUtilVarBindCpy",
    "SnmpSvcGetUptimeFromTime",
    "SnmpUtilIdsToA",
    "SnmpUtilOidCpy",
    "SnmpUtilOidFree",
    "SnmpTfxQuery",
    "SnmpUtilPrintAsnAny",
    "SnmpUtilOidNCmp",
    "SnmpUtilPrintOid",
    "SnmpUtilUTF8ToUnicode",
    "SnmpUtilVarBindListFree",
    "SnmpUtilMemReAlloc",
    "SnmpUtilOctetsCmp",
    "SnmpSvcSetLogType",
    "SnmpSvcGetUptime",
    "SnmpUtilUnicodeToUTF8",
    "SnmpUtilAsnAnyCpy",
    "SnmpUtilAsnAnyFree",
    "SnmpTfxClose",
    "SnmpUtilOidCmp",
    "SnmpUtilUnicodeToAnsi"
  ],
  "snmpsnap.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "softpub.dll": [
    "GenericChainFinalProv",
    "HTTPSCertificateTrust",
    "AddPersonalTrustDBPages",
    "SoftpubCleanup",
    "OfficeInitializePolicy",
    "SoftpubFreeDefUsageCallData",
    "HTTPSFinalProv",
    "DriverInitializePolicy",
    "FindCertsByIssuer",
    "DllRegisterServer",
    "OpenPersonalTrustDBDialog",
    "SoftpubDefCertInit",
    "SoftpubLoadSignature",
    "SoftpubAuthenticode",
    "SoftpubInitialize",
    "SoftpubCheckCert",
    "DriverFinalPolicy",
    "SoftpubDumpStructure",
    "SoftpubLoadDefUsageCallData",
    "GenericChainCertificateTrust",
    "OfficeCleanupPolicy",
    "SoftpubLoadMessage",
    "DllUnregisterServer",
    "DriverCleanupPolicy"
  ],
  "spmsg.dll": "No exports",
  "spoolss.dll": [
    "SplPromptUIInUsersSession",
    "StartDocPrinterW",
    "AllocSplStr",
    "SetFormW",
    "AddPrinterDriverW",
    "RouterAllocBidiMem",
    "SplStartPhase2Init",
    "SendRecvBidiData",
    "RouterFreePrinterNotifyInfo",
    "MarshallDownStructuresArray",
    "SeekPrinter",
    "AbortPrinter",
    "DeletePrinterDataExW",
    "EnumFormsW",
    "EnumPrintProcessorDatatypesW",
    "SetPortW",
    "vDbgLogError",
    "ClusterSplIsAlive",
    "FlushPrinter",
    "UndoAlignKMPtr",
    "StartPagePrinter",
    "DllFreeSplMem",
    "AddPrinterDriverExW",
    "SplCloseSpoolFileHandle",
    "GetPrinterDataW",
    "FormatPrinterForRegistryKey",
    "LoadDriverWithVersion",
    "GetFormW",
    "IsNamedPipeRpcCall",
    "SplPowerEvent",
    "DeleteFormW",
    "BuildOtherNamesFromMachineName",
    "bSetDevModePerUser",
    "WaitForSpoolerInitialization",
    "SpoolerHasInitialized",
    "AddPortExW",
    "SplInitializeWinSpoolDrv",
    "OpenPrinterPortW",
    "WaitForPrinterChange",
    "OldGetPrinterDriverW",
    "SplIsUpgrade",
    "SplGetSpoolFileInfo",
    "RevertToPrinterSelf",
    "ScheduleJob",
    "AdjustPointersInStructuresArray",
    "SpoolerFindFirstPrinterChangeNotification",
    "GetJobAttributes",
    "UpdatePrinterRegUser",
    "EnumMonitorsW",
    "ReallocSplMem",
    "SpoolerFindNextPrinterChangeNotification",
    "DeletePrinterIC",
    "ClusterSplOpen",
    "CallDrvDevModeConversion",
    "WritePrinter",
    "AddPrintProcessorW",
    "UnloadDriver",
    "AddPortW",
    "EnumJobsW",
    "ProvidorFindClosePrinterChangeNotification",
    "AdjustPointers",
    "ProvidorFindFirstPrinterChangeNotification",
    "RouterAllocBidiResponseContainer",
    "SetJobW",
    "PrinterHandleRundown",
    "AddPerMachineConnectionW",
    "AlignKMPtr",
    "GetPrinterDataExW",
    "RouterFindNextPrinterChangeNotification",
    "AlignRpcPtr",
    "ImpersonatePrinterClient",
    "LogWmiTraceEvent",
    "SpoolerFindClosePrinterChangeNotification",
    "RouterReplyPrinter",
    "AddPrinterConnectionW",
    "EnumPrinterDataW",
    "ClosePrinter",
    "EnumPrintersW",
    "EnumPerMachineConnectionsW",
    "GetPrinterDriverDirectoryW",
    "GetShrinkedSize",
    "ClusterSplClose",
    "PlayGdiScriptOnPrinterIC",
    "CreatePrinterIC",
    "AddMonitorW",
    "FindClosePrinterChangeNotification",
    "SplProcessPnPEvent",
    "EnumPrinterKeyW",
    "DeletePrinterConnectionW",
    "SplDriverUnloadComplete",
    "DeletePrinterDataW",
    "DeletePrinterDriverW",
    "MarshallUpStructure",
    "RouterFreeBidiMem",
    "PartialReplyPrinterChangeNotification",
    "DeletePrintProcessorW",
    "OpenPrinterExW",
    "GetNetworkId",
    "EndPagePrinter",
    "GetJobW",
    "DeletePortW",
    "GetPrinterW",
    "InitializeRouter",
    "DeletePrinterDriverExW",
    "SplIsSessionZero",
    "UndoAlignRpcPtr",
    "ReallocSplStr",
    "GetClientUserHandle",
    "ReadPrinter",
    "MarshallDownStructure",
    "AddPrinterW",
    "ReplyPrinterChangeNotification",
    "SetPrinterDataW",
    "GetPrinterDriverW",
    "LoadDriverFiletoConvertDevmode",
    "SplRegisterForDeviceEvents",
    "PrinterMessageBoxW",
    "UpdatePrinterRegAll",
    "ConfigurePortW",
    "RouterRefreshPrinterChangeNotification",
    "UpdateBufferSize",
    "AddPrintProvidorW",
    "RemoteFindFirstPrinterChangeNotification",
    "SplReadPrinter",
    "AddJobW",
    "pszDbgAllocMsgA",
    "SplCommitSpoolData",
    "SplShutDownRouter",
    "OpenPrinterW",
    "PackStrings",
    "EndDocPrinter",
    "DbgGetPointers",
    "EnumPortsW",
    "SetAllocFailCount",
    "AppendPrinterNotifyInfoData",
    "AddPrinterExW",
    "DllFreeSplStr",
    "DeletePerMachineConnectionW",
    "AddFormW",
    "bGetDevModePerUser",
    "DeletePrintProvidorW",
    "SpoolerFreePrinterNotifyInfo",
    "RouterFindFirstPrinterChangeNotification",
    "EnumPrinterDriversW",
    "LoadDriver",
    "MarshallUpStructuresArray",
    "SetPrinterDataExW",
    "FormatRegistryKeyForPrinter",
    "GetPrintProcessorDirectoryW",
    "ResetPrinterW",
    "DllAllocSplMem",
    "IsLocalCall",
    "EnumPrintProcessorsW",
    "EnumPrinterDataExW",
    "MIDL_user_allocate1",
    "XcvDataW",
    "ReplyOpenPrinter",
    "GetPrinterDriverExW",
    "ReplyClosePrinter",
    "SetPrinterW",
    "DeleteMonitorW",
    "SpoolerInit",
    "AddDriverCatalog",
    "FreeOtherNames",
    "SplUnregisterForDeviceEvents",
    "DeletePrinter",
    "MIDL_user_free1",
    "CallRouterFindFirstPrinterChangeNotification",
    "DeletePrinterKeyW",
    "UnloadDriverFile",
    "RouterAllocPrinterNotifyInfo"
  ],
  "sqlsrv32.dll": [
    "SQLGetStmtAttrW",
    "SQLGetDiagRecW",
    "BCP_collen",
    "TestDlgProc",
    "BCP_colfmt",
    "SQLTablesW",
    "SQLGetConnectAttrW",
    "SQLFreeHandle",
    "BCP_done",
    "SQLEndTran",
    "WizIntSecurityDlgProc",
    "BCP_sendrow",
    "SQLColAttributeW",
    "SQLNumResultCols",
    "SQLCopyDesc",
    "ConnectDlgProc",
    "SQLGetEnvAttr",
    "SQLParamData",
    "SQLExecute",
    "BCP_getcolfmt",
    "WizLanguageDlgProc",
    "SQLSetStmtAttrW",
    "BCP_columns",
    "SQLGetDescFieldW",
    "ConfigDSNW",
    "SQLPutData",
    "BCP_bind",
    "FinishDlgProc",
    "SQLColumnsW",
    "SQLBrowseConnectW",
    "SQLAllocHandle",
    "SQLBindParameter",
    "SQLSetConnectOptionW",
    "SQLNumParams",
    "WizDatabaseDlgProc",
    "ConfigDriverW",
    "SQLDescribeColW",
    "SQLDescribeParam",
    "SQLFetch",
    "SQLFreeStmt",
    "SQLGetInfoW",
    "SQLSetDescFieldW",
    "SQLBulkOperations",
    "SQLNativeSqlW",
    "SQLSpecialColumnsW",
    "SQLSetCursorNameW",
    "SQLProcedureColumnsW",
    "SQLGetConnectOptionW",
    "SQLBindCol",
    "SQLColumnPrivilegesW",
    "BCP_init",
    "SQLCloseCursor",
    "SQLSetConnectAttrW",
    "SQLPrimaryKeysW",
    "SQLStatisticsW",
    "SQLGetTypeInfoW",
    "BCP_batch",
    "LibMain",
    "SQLMoreResults",
    "SQLTablePrivilegesW",
    "SQLDriverConnectW",
    "SQLGetDiagFieldW",
    "SQLProceduresW",
    "SQLSetPos",
    "SQLCancel",
    "SQLPrepareW",
    "BCP_setcolfmt",
    "SQLGetFunctions",
    "SQLExecDirectW",
    "SQLDisconnect",
    "SQLFetchScroll",
    "BCP_readfmt",
    "SQLGetData",
    "SQLParamOptions",
    "SQLDebug",
    "BCP_exec",
    "SQLRowCount",
    "SQLSetDescRec",
    "SQLGetDescRecW",
    "BCP_colptr",
    "SQLGetCursorNameW",
    "SQLConnectW",
    "SQLExtendedFetch",
    "BCP_writefmt",
    "WizDSNDlgProc",
    "SQLSetScrollOptions",
    "BCP_moretext",
    "SQLForeignKeysW",
    "BCP_control",
    "SQLSetEnvAttr"
  ],
  "sqlunirl.dll": [
    "_NDdeShareSetInfo_@24",
    "_RegQueryValueEx_@24",
    "_NDdeGetShareSecurity_@24",
    "_ShellExecute_@24",
    "_CreateWindowStation_@16",
    "_RemoveDirectory_@4",
    "_GetProp@8",
    "_NDdeShareEnum_@24",
    "_GetMetaFile_@4",
    "_LoadMenuIndirect_@4",
    "_CreateNamedPipe_@32",
    "_GetObject@12",
    "_ReportEvent_@36",
    "_FindExecutable_@12",
    "_ObjectPrivilegeAuditAlarm_@24",
    "_RegReplaceKey_@16",
    "_RegisterClassEx_@4",
    "_GetCharWidth_@16",
    "_FindResourceEx_@16",
    "_RegSetValue_@20",
    "_PostThreadMessage_@16",
    "_GetEnhMetaFile_@4",
    "_GetVersionEx@4",
    "_LoadBitmap@8",
    "_PropertySheet_@4",
    "_EnumProps_@8",
    "_GetTextFace_@12",
    "_GetCharacterPlacement_@24",
    "_LoadLibraryEx_@12",
    "_PrintDlg_@4",
    "_NDdeIsValidAppTopicList_@4",
    "_GrayString_@36",
    "_GetKeyboardLayoutName_@4",
    "_WritePrivateProfileString_@16",
    "_InsertMenuItem_@16",
    "__lwrite_@12",
    "_ChangeDisplaySettings_@8",
    "_GetPrivateProfileString_@24",
    "_CreateDesktop_@24",
    "_OemToChar_@8",
    "_MapVirtualKey_@8",
    "_RegEnumKey_@16",
    "_LoadAccelerators_@8",
    "_DefDlgProc_@16",
    "_SetICMProfile_@8",
    "_IsCharLower_@4",
    "_LoadMenu@8",
    "_SetProp@12",
    "_ShellExecuteEx_@4",
    "_ExpandEnvironmentStrings_@12",
    "_CharToOemBuff_@12",
    "_FindFirstFileEx_@24",
    "_StartServiceCtrlDispatcher_@4",
    "_GetLogColorSpace_@12",
    "_DialogBoxParam_@20",
    "_FormatMessage@28",
    "_RegSetValueEx_@24",
    "_IsCharAlpha_@4",
    "_FindWindowEx_@16",
    "_DlgDirSelectEx_@16",
    "_CreateDirectory_@8",
    "_CreateAcceleratorTable_@8",
    "_ExtractIconEx_@20",
    "_GetUserObjectInformation_@20",
    "_ShellAbout_@16",
    "_OemToCharBuff_@12",
    "_IsCharUpper_@4",
    "_ReadConsoleInput_@16",
    "_wvsprintf_@12",
    "_trename",
    "_GetCharABCWidths_@16",
    "_CopyFile_@12",
    "_BuildCommDCB_@8",
    "_OpenEventLog_@8",
    "_UnregisterClass_@8",
    "_CreateSemaphore_@16",
    "_PolyTextOut_@12",
    "_GlobalFindAtom_@4",
    "_EnumDesktops_@12",
    "_PostMessage@16",
    "_tsystem",
    "_GetEnhMetaFileDescription_@12",
    "_WriteProfileString_@12",
    "_PrivilegedServiceAuditAlarm_@20",
    "_CreateEvent_@16",
    "_QueryDosDevice_@12",
    "_GetDriveType_@4",
    "_DlgDirList_@20",
    "_GetProfileInt_@12",
    "_FindText_@4",
    "_ModifyMenu_@20",
    "_ttof",
    "_SetFileSecurity_@12",
    "_SHBrowseForFolder_@4",
    "_ReadEventLog_@28",
    "_DragQueryFile_@16",
    "_CreateService_@52",
    "_RegisterClass_@4",
    "_GetEnvironmentStrings_@4",
    "_OpenSemaphore_@12",
    "_CharUpperBuff_@8",
    "_EnumServicesStatus_@32",
    "_GetModuleHandle_@4",
    "newWideCharFromMultiByte",
    "_CreateProcess_@40",
    "_GetClassLong_@8",
    "_ExtractAssociatedIcon_@12",
    "ConvertMultiSZNameToW",
    "_IsBadStringPtr_@8",
    "_SetDefaultCommConfig_@12",
    "_GlobalAddAtom_@4",
    "_MoveFileEx_@12",
    "_ReplaceText_@4",
    "_SetFileAttributes_@8",
    "_GetServiceDisplayName_@16",
    "_RegOpenKeyEx_@20",
    "_IsDialogMessage@8",
    "_ClearEventLog_@8",
    "_GetOutlineTextMetrics_@12",
    "_LoadImage_@24",
    "_EnumDependentServices_@24",
    "_EnumPropsEx_@12",
    "_ChooseColor_@4",
    "_GetMenuString_@20",
    "_GetGlyphOutline_@28",
    "_SendDlgItemMessage@20",
    "_WinHelp@16",
    "_FindResource@12",
    "_CopyEnhMetaFile_@8",
    "_ChangeMenu_@20",
    "_RegisterServiceCtrlHandler_@8",
    "_OpenWindowStation_@12",
    "_lstrcmp_@8",
    "_SetClassLong_@12",
    "_CharUpper@4",
    "_CreateFontIndirect@4",
    "_GetPrivateProfileSectionNames_@12",
    "_RegQueryValue_@16",
    "_GetDlgItemText@16",
    "_RegisterWindowMessage_@4",
    "_CharLowerBuff_@8",
    "_TabbedTextOut_@32",
    "_CreateMutex_@12",
    "_EnumResourceTypes_@12",
    "_GetTextExtentPoint32@16",
    "_CopyMetaFile_@8",
    "_EnumWindowStations_@8",
    "_InitiateSystemShutdown_@20",
    "_EndUpdateResource_@8",
    "_GetFileTitle@12",
    "_VkKeyScan_@4",
    "_DeviceCapabilities_@20",
    "_WriteConsoleInput_@16",
    "_RemoveFontResource_@4",
    "_DrawTextEx_@24",
    "_GetTabbedTextExtent_@20",
    "_SetVolumeLabel_@8",
    "_CreateStatusWindow_@16",
    "_RemoveProp@8",
    "_RegQueryMultipleValues_@20",
    "_OpenWaitableTimer_@12",
    "_CreatePropertySheetPage_@4",
    "_GetFileVersionInfo_@16",
    "_NDdeSetTrustedShare_@12",
    "_GetMenuItemInfo_@16",
    "_GetShortPathName_@12",
    "_CreateIC_@16",
    "_SendMessageCallback_@24",
    "_RegisterClipboardFormat_@4",
    "_GetMessage_@16",
    "_LoadKeyboardLayout_@8",
    "_GetCurrentHwProfile_@4",
    "_GetSaveFileName@4",
    "_SetEnvironmentVariable_@8",
    "_SetMenuItemInfo_@16",
    "_CopyFileEx_@24",
    "_LoadCursor@8",
    "_BuildCommDCBAndTimeouts_@12",
    "_DlgDirListComboBox_@20",
    "_CharLower@4",
    "_CreateFont@56",
    "_DefFrameProc_@20",
    "_LoadCursorFromFile_@4",
    "_RegOpenKey_@12",
    "_GetClassInfo@12",
    "_AccessCheckAndAuditAlarm_@44",
    "_ObjectCloseAuditAlarm_@12",
    "_GetICMProfile_@12",
    "_CallWindowProc@20",
    "_NDdeShareGetInfo_@28",
    "_MapVirtualKeyEx_@12",
    "_GetWindowsDirectory_@8",
    "_GetKerningPairs_@12",
    "_GetDiskFreeSpaceEx@16",
    "_GetPrivateProfileStruct_@20",
    "_BroadcastSystemMessage_@20",
    "_RegRestoreKey_@12",
    "_SetDlgItemText@12",
    "_GlobalGetAtomName_@12",
    "_CreateScalableFontResource_@16",
    "_CopyAcceleratorTable_@12",
    "_CallMsgFilter_@8",
    "_GetCurrentDirectory_@8",
    "_GetDiskFreeSpace_@20",
    "_CreateDirectoryEx_@12",
    "_GetCharABCWidthsFloat_@16",
    "_GetKeyNameText_@12",
    "_OpenDesktop_@16",
    "AbortSystemShutdown_",
    "_SetWindowText@8",
    "_EnumFonts_@16",
    "_AppendMenu_@16",
    "_CreateDialogIndirectParam@20",
    "_GetFileSecurity_@20",
    "_lstrcpy_@8",
    "_SendMessage@16",
    "_NDdeSetShareSecurity_@16",
    "_FindWindow_@8",
    "_LookupAccountName_@28",
    "_CreateMDIWindow_@40",
    "_AddFontResource_@4",
    "_CreateFileMapping_@24",
    "_EnumResourceLanguages_@20",
    "_NDdeIsValidShareName_@4",
    "_CreateDC_@16",
    "_GetComputerName@8",
    "_SearchPath_@24",
    "_EnumICMProfiles_@12",
    "_DefMDIChildProc_@16",
    "_GetFullPathName_@16",
    "_CreateMailslot_@16",
    "_EnumResourceNames_@16",
    "__hwrite_@12",
    "_GetPrivateProfileSection_@16",
    "_LookupPrivilegeDisplayName_@20",
    "_NDdeGetErrorString_@12",
    "_OpenEvent_@12",
    "_GetModuleFileName@12",
    "_SHGetPathFromIDList_@8",
    "_PageSetupDlg_@4",
    "_CommDlg_OpenSave_GetFolderPath@12",
    "_GetFileAttributes_@4",
    "_NDdeShareDel_@12",
    "_CreateDialogParam_@20",
    "_GetTempPath_@8",
    "_GetProfileSection_@12",
    "_DeleteFile@4",
    "_FindFirstChangeNotification_@12",
    "_GetServiceKeyName_@16",
    "_GetClassName_@12",
    "_GetTextMetrics@8",
    "_OutputDebugString_@4",
    "_NDdeShareAdd_@20",
    "_CommConfigDialog_@12",
    "_GetPrivateProfileInt_@16",
    "_QueryServiceConfig_@16",
    "_GetWindowTextLength@4",
    "_BeginUpdateResource_@8",
    "_GetTextExtentPoint@16",
    "_ObjectDeleteAuditAlarm_@12",
    "_SendNotifyMessage_@16",
    "_GetCompressedFileSize_@8",
    "_GetLocaleInfo_@16",
    "_RegSaveKey_@12",
    "_CommDlg_OpenSave_GetSpec@12",
    "_MessageBoxIndirect_@4",
    "_ResetDC_@8",
    "_CreateProcessAsUser_@44",
    "_RegEnumValue_@32",
    "_SetWindowsHook_@8",
    "_FreeEnvironmentStrings@4",
    "_OpenFile_@12",
    "_GetVolumeInformation_@32",
    "newMultiByteFromWideCharSize",
    "_OpenSCManager_@12",
    "_ExtractIcon_@12",
    "_FindFirstFile_@8",
    "_RegCreateKeyEx_@36",
    "_IsCharAlphaNumeric_@4",
    "_StartService_@12",
    "_OpenService_@12",
    "_CreateMetaFile_@4",
    "_FatalAppExit_@8",
    "_FindNextFile_@8",
    "_GetSystemDirectory_@8",
    "_CharNext_@4",
    "_SetComputerName_@4",
    "_CreateWaitableTimer_@12",
    "_SetUserObjectInformation_@16",
    "_MAKEINTRESOURCE@4",
    "_GetOpenFileName@4",
    "_RegLoadKey_@12",
    "_CompareString_@24",
    "_GetTempFileName_@16",
    "_GetCharWidth32_@16",
    "_GetBinaryType_@8",
    "_GetClassInfoEx_@12",
    "_DefineDosDevice_@12",
    "__lopen_@8",
    "_GetCharWidthFloat_@16",
    "_GetToolsFilePath@16",
    "_CreateWindowEx@48",
    "_LookupPrivilegeValue_@12",
    "_SendMessageTimeout_@28",
    "_GetNamedPipeHandleState_@28",
    "_GetDiskFreeSpaceEx_@16",
    "_NDdeGetTrustedShare_@20",
    "_BackupEventLog_@8",
    "_CharToOem_@8",
    "_GetDateFormat_@24",
    "_DefWindowProc@16",
    "_CommDlg_OpenSave_GetFilePath@12",
    "_GetTextExtentExPoint_@28",
    "_VerQueryValue_@16",
    "_CharPrev_@8",
    "_ChooseFont_@4",
    "_LoadLibrary@4",
    "_GetWindowLong@8",
    "_strerror_@4",
    "newMultiByteFromWideChar",
    "_CreateFile@28",
    "_GetAtomName_@12",
    "_CreateEnhMetaFile_@16",
    "_CreateColorSpace_@4",
    "_RegConnectRegistry_@12",
    "_GetTimeFormat_@24",
    "_WritePrivateProfileStruct_@20",
    "AllocConvertMultiSZNameToA",
    "_DlgDirSelectComboBoxEx_@16",
    "AllocConvertMultiSZNameToAEx",
    "_GetUserName@8",
    "_PeekMessage@20",
    "_OpenBackupEventLog_@8",
    "_RegQueryInfoKey_@48",
    "_RegCreateKey_@12",
    "_GetWindowText@12",
    "_LookupAccountSid_@28",
    "_TextOut@20",
    "_DispatchMessage_@4",
    "_LogonUser_@24",
    "_LoadString@16",
    "_WaitNamedPipe_@8",
    "_tfopen",
    "_LoadIcon@8",
    "_InsertMenu_@20",
    "_GetDefaultCommConfig_@12",
    "_MessageBoxEx_@20",
    "_MessageBox@16",
    "_GetClipboardFormatName_@12",
    "_GetUnicodeRedirectionLayer@0",
    "_SystemParametersInfo_@16",
    "_SetWindowLong@12",
    "_WritePrivateProfileSection_@12",
    "_SHGetFileInfo_@20",
    "_GetFileVersionInfoSize_@8",
    "_RegUnLoadKey_@8",
    "_ExtTextOut@32",
    "_LookupPrivilegeName_@16",
    "_FindAtom_@4",
    "_EnumFontFamilies_@16",
    "_EnumDisplaySettings_@12",
    "_DialogBoxIndirectParam_@20",
    "_GetLogicalDriveStrings_@8",
    "_DrawText@20",
    "_RegisterEventSource_@8",
    "wsprintf_",
    "_EnumFontFamiliesEx_@20",
    "_lstrcmpi_@8",
    "_MoveFile@8",
    "_RegDeleteKey_@8",
    "_GetProfileString_@20",
    "_ObjectOpenAuditAlarm_@48",
    "_NDdeTrustedShareEnum_@24",
    "_WriteProfileSection_@8",
    "_GetFileAttributesEx_@12",
    "_AddAtom_@4",
    "_QueryServiceLockStatus_@16",
    "_GetProcAddress_@8",
    "newMultiByteFromWideCharEx",
    "_GetEnvironmentVariable_@12",
    "_CallNamedPipe_@28",
    "__lcreat_@8",
    "_lstrcat_@8",
    "_DrawState_@40",
    "_GetCommandLine_@0",
    "_UpdateResource_@24",
    "_Shell_NotifyIcon_@8",
    "_ChangeServiceConfig_@44",
    "_RegEnumKeyEx_@32",
    "_TranslateAccelerator@12",
    "_SetWindowsHookEx_@16",
    "_RegDeleteValue_@8",
    "_VkKeyScanEx_@8",
    "_OpenMutex_@12",
    "_OpenFileMapping_@12",
    "_lstrcpyn_@12",
    "_StartDoc@8",
    "_SHFileOperation_@4",
    "_SetCurrentDirectory_@4"
  ],
  "sqlwid.dll": [
    "_ttof",
    "_lopen_",
    "wstrlen",
    "GetProcAddress_",
    "GetEnvironmentStrings_",
    "_lcreat_",
    "OpenFile_",
    "_lwrite_",
    "_hwrite_",
    "strerror_"
  ],
  "sqlwoa.dll": [
    "_CreateFile@28",
    "_CommDlg_OpenSave_GetFolderPath@12",
    "_LoadBitmap@8",
    "_LoadCursor@8",
    "_LoadMenu@8",
    "_LoadIcon@8",
    "_CommDlg_OpenSave_GetSpec@12",
    "_SetProp@12",
    "_tfopen",
    "_SendMessage@16",
    "_GetTextExtentPoint32@16",
    "_MessageBox@16",
    "_CharLower@4",
    "_CreateFont@56",
    "_GetClassInfo@12",
    "_SetWindowLong@12",
    "_DeleteFile@4",
    "AllocConvertMultiSZNameToA",
    "newMultiByteFromWideCharEx",
    "_FormatMessage@28",
    "_FreeEnvironmentStrings@4",
    "_GetProp@8",
    "_GetUserName@8",
    "_CreateDialogIndirectParam@20",
    "newMultiByteFromWideCharSize",
    "_CallWindowProc@20",
    "_CreateWindowEx@48",
    "_GetFileTitle@12",
    "_PostMessage@16",
    "_ExtTextOut@32",
    "_PeekMessage@20",
    "_GetDiskFreeSpaceEx@16",
    "_GetTextMetrics@8",
    "_SendDlgItemMessage@20",
    "_WinHelp@16",
    "_SetDlgItemText@12",
    "_tsystem",
    "_GetWindowText@12",
    "_GetObject@12",
    "_RemoveProp@8",
    "_FindResource@12",
    "_GetComputerName@8",
    "_TranslateAccelerator@12",
    "_TextOut@20",
    "newWideCharFromMultiByte",
    "ConvertMultiSZNameToW",
    "_LoadString@16",
    "_MAKEINTRESOURCE@4",
    "_GetOpenFileName@4",
    "_GetWindowTextLength@4",
    "_CharUpper@4",
    "_CreateFontIndirect@4",
    "_CommDlg_OpenSave_GetFilePath@12",
    "_DefWindowProc@16",
    "_GetTextExtentPoint@16",
    "_SetWindowText@8",
    "_trename",
    "newMultiByteFromWideChar",
    "_DrawText@20",
    "_LoadLibrary@4",
    "_StartDoc@8",
    "_GetSaveFileName@4",
    "_GetModuleFileName@12",
    "_GetWindowLong@8",
    "_MoveFile@8",
    "_GetDlgItemText@16",
    "_IsDialogMessage@8",
    "_GetVersionEx@4"
  ],
  "srclient.dll": [
    "EnableSR",
    "SRNotify",
    "DisableFIFO",
    "SRRemoveRestorePoint",
    "RestoreSnapshot",
    "SRUnregisterSnapshotCallback",
    "SRSetRestorePointW",
    "CreateFirstRunRp",
    "SRRegisterSnapshotCallback",
    "DllRegisterServer",
    "SRUpdateMonitoredListW",
    "EnableSREx",
    "SRPrintState",
    "EnableFIFO",
    "SRUpdateDSSize",
    "DisableSR",
    "DllGetClassObject",
    "SRUpdateMonitoredListA",
    "ResetSR",
    "SRCompress",
    "SRFifo",
    "SRSwitchLog",
    "CreateSnapshot",
    "SRSetRestorePointA",
    "DllCanUnloadNow",
    "SRFreeze",
    "DllUnregisterServer"
  ],
  "srrstr.dll": [
    "public: unsigned long __thiscall CCounter::Init(void)",
    "PasswordChangeNotify",
    "public: long __thiscall CCounter::GetCount(void)",
    "public: unsigned long __thiscall CCounter::WaitForZero(void)",
    "InitializeChangeNotify",
    "PrepareRestore",
    "DllMain",
    "InitiateRestore",
    "CheckPrivilegesForRestore",
    "public: __thiscall CCounter::CCounter(void)",
    "public: void __thiscall CCounter::Up(void)",
    "public: __thiscall CCounter::~CCounter(void)",
    "public: class CCounter & __thiscall CCounter::operator=(class CCounter const &)",
    "IsSRFrozen",
    "ResumeRestore",
    "InvokeDiskCleanup",
    "SRGetCplPropPage",
    "public: unsigned long __thiscall CCounter::Down(void)"
  ],
  "srsvc.dll": [
    "public: unsigned long __thiscall CCounter::Init(void)",
    "public: long __thiscall CCounter::GetCount(void)",
    "public: unsigned long __thiscall CCounter::WaitForZero(void)",
    "public: __thiscall CCounter::CCounter(void)",
    "public: void __thiscall CCounter::Up(void)",
    "public: __thiscall CCounter::~CCounter(void)",
    "public: class CCounter & __thiscall CCounter::operator=(class CCounter const &)",
    "DllMain",
    "ServiceMain",
    "public: unsigned long __thiscall CCounter::Down(void)"
  ],
  "srvsvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "ssdpapi.dll": [
    "GetFirstService",
    "RegisterNotification",
    "DHSetICSInterfaces",
    "DHEnableDeviceHost",
    "DeregisterService",
    "DeregisterNotification",
    "FindServicesCallback",
    "FindServicesClose",
    "GetNextService",
    "FindServicesCancel",
    "FindServices",
    "DHSetICSOff",
    "RegisterService",
    "SsdpStartup",
    "DeregisterServiceByUSN",
    "CleanupCache",
    "FreeSsdpMessage",
    "SsdpCleanup",
    "DHDisableDeviceHost"
  ],
  "ssdpsrv.dll": [
    "ServiceMain"
  ],
  "stclient.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "sti.dll": [
    "RegSTIforWia",
    "DllCanUnloadNow",
    "StiCreateInstanceW",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer",
    "StiCreateInstance",
    "StiCreateInstanceA",
    "DllUnregisterServer",
    "MigrateRegisteredSTIAppsForWIAEvents"
  ],
  "sti_ci.dll": [
    "InstallWiaService",
    "WiaAddDevice",
    "public: void __thiscall BUFFER_CHAIN_ITEM::`default constructor closure'(void)",
    "public: __thiscall BUFFER::~BUFFER(void)",
    "AddDevice",
    "MigrateDevice",
    "int __stdcall DeleteWiaShortcut(void)",
    "public: __thiscall BUFFER_CHAIN::~BUFFER_CHAIN(void)",
    "WiaCreatePortList",
    "public: unsigned int __thiscall BUFFER::QuerySize(void)const",
    "CoinstallerEntry",
    "public: void __thiscall BUFFER::`default constructor closure'(void)",
    "public: __thiscall BUFFER_CHAIN::BUFFER_CHAIN(void)",
    "WiaDestroyPortList",
    "public: __thiscall BUFFER_CHAIN_ITEM::BUFFER_CHAIN_ITEM(unsigned int)",
    "WiaCreateWizardMenu",
    "ClassInstall",
    "int __stdcall WiaDeviceEnum(void)",
    "int __stdcall CreateWiaShortcut(void)",
    "public: __thiscall BUFFER::BUFFER(unsigned int)",
    "public: unsigned long __thiscall BUFFER_CHAIN_ITEM::QueryUsed(void)const",
    "WiaRemoveDevice",
    "public: __thiscall BUFFER_CHAIN_ITEM::~BUFFER_CHAIN_ITEM(void)",
    "public: void __thiscall BUFFER_CHAIN_ITEM::SetUsed(unsigned long)",
    "public: void * __thiscall BUFFER::QueryPtr(void)const"
  ],
  "stobject.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "storprop.dll": [
    "DiskClassInstaller",
    "CdromDisableDigitalPlayback",
    "DvdClassInstaller",
    "VolumePropPageProvider",
    "CdromEnableDigitalPlayback",
    "DvdLauncher",
    "DvdPropPageProvider",
    "CdromIsDigitalPlaybackEnabled",
    "CdromKnownGoodDigitalPlayback",
    "DllMain",
    "IdePropPageProvider"
  ],
  "streamci.dll": [
    "StreamingDeviceRemove",
    "StreamingDeviceSetupW",
    "StreamingDeviceRemoveW",
    "StreamingDeviceClassInstaller",
    "StreamingDeviceSetup",
    "StreamingDeviceSetupA",
    "StreamingDeviceRemoveA",
    "SwEnumCoInstaller"
  ],
  "strmdll.dll": [
    "NSSecurityLibraryInit",
    "CreateAsfFormatSet",
    "SelectHelper",
    "SelectMediaStream",
    "SelectCrabis"
  ],
  "strmfilt.dll": [
    "StreamFilterClientInitialize",
    "IsapiFilterInitialize",
    "StreamFilterStart",
    "StreamFilterClientStop",
    "StreamFilterInitialize",
    "StreamFilterClientStart",
    "StreamFilterTerminate",
    "IsapiFilterTerminate",
    "StreamFilterStop",
    "DllMain",
    "StreamFilterClientTerminate"
  ],
  "svcpack.dll": [
    "SvcPackCallbackRoutine"
  ],
  "swprv.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllInstall",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "sxs.dll": [
    "SxsProtectionNotifyW",
    "SxspRunDllDeleteDirectory",
    "SxsOleAut32RedirectTypeLibrary",
    "SxsFindClrClassInformation",
    "SxsProtectionUserLogonEvent",
    "SxsFindClrSurrogateInformation",
    "SxsProtectionGatherEntriesW",
    "SxsEndAssemblyInstall",
    "SxspGenerateManifestPathOnAssemblyIdentity",
    "SxsRunDllInstallAssemblyW",
    "SxsOleAut32MapIIDToTLBPath",
    "SxsProtectionPerformScanNow",
    "SxsProbeAssemblyInstallation",
    "CreateAssemblyCache",
    "CreateAssemblyNameObject",
    "SxsQueryManifestInformation",
    "SxsOleAut32MapIIDOrCLSIDToTypeLibrary",
    "SxsOleAut32MapIIDToProxyStubCLSID",
    "SxsProtectionUserLogoffEvent",
    "SxsInstallAssemblyW",
    "SxsOleAut32MapConfiguredClsidToReferenceClsid",
    "SxspGeneratePolicyPathOnAssemblyIdentity",
    "SxsBeginAssemblyInstall",
    "SxsGenerateActivationContext",
    "SxsRunDllInstallAssembly",
    "SxsOleAut32MapReferenceClsidToConfiguredClsid",
    "SxspRunDllDeleteDirectoryW",
    "SxsInstallW",
    "SxsUninstallW",
    "SxsLookupClrGuid"
  ],
  "synceng.dll": [
    "DestroyFolderTwinList",
    "CompareFileStamps",
    "GetObjectTwinHandle",
    "FindNextBriefcase",
    "BeginReconciliation",
    "AddAllTwinsToTwinList",
    "SaveBriefcase",
    "DeleteBriefcase",
    "CloseBriefcase",
    "DestroyTwinList",
    "IsOrphanObjectTwin",
    "ClearBriefcaseCache",
    "ReleaseTwinHandle",
    "CreateTwinList",
    "DestroyRecList",
    "FindFirstBriefcase",
    "GetVolumeDescription",
    "AddFolderTwin",
    "IsFolderTwin",
    "GetFileStamp",
    "AnyTwins",
    "CreateRecList",
    "FindBriefcaseClose",
    "CreateFolderTwinList",
    "GetFolderTwinStatus",
    "RemoveTwinFromTwinList",
    "AddTwinToTwinList",
    "DeleteTwin",
    "CountSourceFolderTwins",
    "GetOpenBriefcaseInfo",
    "RemoveAllTwinsFromTwinList",
    "AddObjectTwin",
    "EndReconciliation",
    "OpenBriefcase",
    "IsPathOnVolume",
    "ReconcileItem"
  ],
  "syncui.dll": [
    "Briefcase_Intro",
    "Briefcase_Create",
    "DllCanUnloadNow",
    "Briefcase_CreateA",
    "DllGetClassObject",
    "Briefcase_CreateW"
  ],
  "sysinv.dll": [
    "GetSystemInventoryW",
    "GetSystemInventoryA"
  ],
  "syssetup.dll": [
    "ViewSetupActionLog",
    "TerminateSetupLog",
    "SetupSetSetupInfo",
    "SetupGetValidEula",
    "MigrateExceptionPackages",
    "AsrFreeContext",
    "GenerateName",
    "AsrAddSifEntryW",
    "UpdatePnpDeviceDrivers",
    "SetupOobeCleanup",
    "SetupShellSettings",
    "CriticalDeviceCoInstaller",
    "OpkCheckVersion",
    "SetupGetLocaleOptions",
    "AsrAddSifEntryA",
    "SetupChangeLocale",
    "EisaUpHalCoInstaller",
    "SetupRegisterOsComponent",
    "SetupUnRegisterOsComponent",
    "SetupChangeFontSize",
    "DevInstallW",
    "LegacyDriverPropPageProvider",
    "SetupInfObjectInstallActionW",
    "ReportError",
    "SetupMapTapiToIso",
    "EisaUpHalPropPageProvider",
    "SetupExtendPartition",
    "UpgradePrinters",
    "VolumeClassInstaller",
    "SetupDestroyPhoneList",
    "SetupOobeBnk",
    "MouseClassInstaller",
    "InvokeExternalApplicationEx",
    "SetupAddOrRemoveTestCertificate",
    "CdromPropPageProvider",
    "SetupOobeInitDebugLog",
    "AsrpGetLocalVolumeInfo",
    "DiskPropPageProvider",
    "SetupDestroyLanguageList",
    "RunOEMExtraTasks",
    "SetupChangeLocaleEx",
    "SetAccountsDomainSid",
    "TapePropPageProvider",
    "SetupGetGeoOptions",
    "CreateLocalUserAccount",
    "PS2MousePropPageProvider",
    "HdcClassInstaller",
    "StorageCoInstaller",
    "AsrRestorePlugPlayRegistryData",
    "RepairStartMenuItems",
    "InitializeSetupLog",
    "SetupSetAdminPassword",
    "SetupInstallCatalog",
    "AsrpGetLocalDiskInfo",
    "SetupOobeInitPreServices",
    "AsrpRestoreNonCriticalDisksW",
    "AsrCreateStateFileW",
    "PrepareForAudit",
    "KeyboardClassInstaller",
    "SetupStartService",
    "PnPInitializationThread",
    "ScsiClassInstaller",
    "SetupQueryRegisteredOsComponent",
    "SetupSetRegisteredOsComponentsOrder",
    "SetupSetDisplay",
    "DeviceBayClassInstaller",
    "SetupEnumerateRegisteredOsComponents",
    "CreateLocalAdminAccount",
    "SetupCreateOptionalComponentsPage",
    "SetupOobeInitPostServices",
    "SetupPidGen3",
    "SetupIsPnpRebootRequired",
    "AsrCreateStateFileA",
    "SetupSetIntlOptions",
    "NtApmClassInstaller",
    "pSetupDebugPrint",
    "SetupReadPhoneList",
    "InstallWindowsNt",
    "TapeClassInstaller",
    "SetupGetSetupInfo",
    "DoInstallComponentInfs",
    "SetupGetKeyboardOptions",
    "SystemUpdateUserProfileDirectory",
    "SetupGetProductType",
    "CreateLocalAdminAccountEx",
    "pSetuplogSfcError",
    "ComputerClassInstaller",
    "SetupQueryRegisteredOsComponentsOrder"
  ],
  "Thawbrkr.dll": [
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "t2embed.dll": [
    "TTEmbedFontEx",
    "_TTEmbedFontFromFileA@52",
    "TTIsEmbeddingEnabledForFacename",
    "_TTEmbedFont@44",
    "TTEnableEmbeddingForFacename",
    "_TTGetEmbeddingType@8",
    "_TTRunValidationTests@8",
    "TTRunValidationTests",
    "TTEmbedFontFromFileA",
    "TTGetEmbeddingType",
    "_TTLoadEmbeddedFont@40",
    "TTGetEmbeddedFontInfo",
    "_TTIsEmbeddingEnabledForFacename@8",
    "TTIsEmbeddingEnabled",
    "_TTEnableEmbeddingForFacename@8",
    "TTLoadEmbeddedFont",
    "_TTIsEmbeddingEnabled@8",
    "TTCharToUnicode",
    "TTDeleteEmbeddedFont",
    "TTRunValidationTestsEx",
    "_TTDeleteEmbeddedFont@12",
    "TTEmbedFont",
    "_TTCharToUnicode@24",
    "_TTGetEmbeddedFontInfo@28",
    "TTGetNewFontName"
  ],
  "tapi3.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "tapi32.dll": [
    "linePickup",
    "tapiGetLocationInfo",
    "MMCAddProvider",
    "lineGetProviderListA",
    "phoneOpen",
    "tapiRequestMediaCall",
    "LocWizardDlgProc",
    "lineGetMessage",
    "internalPerformance",
    "MMCGetLineInfo",
    "phoneInitialize",
    "lineGetAppPriorityA",
    "lineGatherDigitsW",
    "phoneGetData",
    "lineAccept",
    "lineGetAgentGroupListW",
    "linePickupW",
    "phoneGetStatusMessages",
    "lineGetDevConfig",
    "lineUnpark",
    "lineGetCallInfoA",
    "lineGetAddressCaps",
    "lineRedirectW",
    "phoneGetLamp",
    "lineHold",
    "lineGetLineDevStatus",
    "lineSetQueueMeasurementPeriod",
    "lineConfigDialog",
    "MMCConfigProvider",
    "phoneGetButtonInfoW",
    "lineGetAgentCapsA",
    "lineGatherDigitsA",
    "lineHandoff",
    "lineGenerateDigitsA",
    "lineGetLineDevStatusW",
    "lineSetCallParams",
    "lineDeallocateCall",
    "phoneGetHookSwitch",
    "phoneSetButtonInfoA",
    "lineCreateAgentW",
    "lineGetDevConfigW",
    "lineGetAgentStatusA",
    "lineGetAppPriorityW",
    "phoneGetIDW",
    "lineBlindTransferW",
    "lineGetCountryA",
    "lineGetTranslateCapsW",
    "lineConfigDialogEditA",
    "lineGetDevCapsA",
    "lineDialW",
    "lineGetProxyStatus",
    "phoneGetGain",
    "lineSetupTransfer",
    "phoneGetIconW",
    "lineGetDevConfigA",
    "lineGetRequestW",
    "phoneGetRing",
    "tapiRequestMakeCall",
    "MMCShutdown",
    "TUISPIDLLCallback",
    "lineAddToConference",
    "lineGetAgentCapsW",
    "lineSetMediaMode",
    "lineSetAppSpecific",
    "lineDrop",
    "lineForwardA",
    "lineConfigProvider",
    "lineGetProviderListW",
    "lineGetAgentSessionInfo",
    "lineSetTollList",
    "phoneInitializeExA",
    "lineCreateAgentSessionA",
    "lineGetAgentActivityListW",
    "lineGetRequest",
    "MMCGetPhoneInfo",
    "lineGenerateDigits",
    "lineGetAddressID",
    "lineSetCurrentLocation",
    "phoneGetIconA",
    "lineGetAddressCapsW",
    "lineGetIconW",
    "lineGenerateTone",
    "phoneGetMessage",
    "lineGetAgentActivityListA",
    "linePark",
    "lineMonitorMedia",
    "lineSetTerminal",
    "lineTranslateAddress",
    "NonAsyncEventThread",
    "lineCreateAgentSessionW",
    "lineSetCallData",
    "lineNegotiateAPIVersion",
    "lineSetAppPriorityA",
    "phoneGetID",
    "lineGetGroupListW",
    "lineGetQueueListA",
    "tapiRequestDrop",
    "lineUnhold",
    "lineMonitorTones",
    "lineTranslateAddressW",
    "lineProxyResponse",
    "lineSetNumRings",
    "lineGetCallInfoW",
    "phoneConfigDialogW",
    "phoneInitializeExW",
    "lineDialA",
    "lineSetAgentSessionState",
    "lineOpenA",
    "lineShutdown",
    "lineSetAgentGroup",
    "phoneGetIDA",
    "lineBlindTransfer",
    "lineAddProvider",
    "lineCreateAgentA",
    "lineGetQueueListW",
    "lineGetAddressStatusW",
    "MMCGetAvailableProviders",
    "lineGetQueueInfo",
    "lineSetupConference",
    "phoneGetDevCapsA",
    "lineGetCallInfo",
    "lineUncompleteCall",
    "lineGetCountryW",
    "lineDial",
    "phoneGetDisplay",
    "phoneConfigDialogA",
    "lineGetAppPriority",
    "MMCInitialize",
    "lineGetID",
    "lineSetAgentStateEx",
    "lineAddProviderW",
    "lineUnparkW",
    "phoneNegotiateAPIVersion",
    "internalRenameLocationW",
    "tapiRequestMediaCallA",
    "lineRegisterRequestRecipient",
    "lineRedirectA",
    "phoneGetButtonInfoA",
    "lineDevSpecific",
    "MMCGetDeviceFlags",
    "lineTranslateDialogA",
    "MMCSetLineInfo",
    "GetTapi16CallbackMsg",
    "lineSetupTransferW",
    "phoneSetLamp",
    "lineBlindTransferA",
    "lineGetConfRelatedCalls",
    "lineOpen",
    "lineSetCallPrivilege",
    "phoneSetData",
    "phoneGetVolume",
    "linePickupA",
    "lineMakeCallA",
    "MMCSetPhoneInfo",
    "LOpenDialAsst",
    "MMCGetServerConfig",
    "lineGetNewCalls",
    "lineGetAgentGroupListA",
    "lineSecureCall",
    "phoneClose",
    "lineSetCallQualityOfService",
    "lineGetProviderList",
    "phoneSetDisplay",
    "lineGetAgentStatusW",
    "lineForwardW",
    "lineSetAppPriorityW",
    "tapiRequestMediaCallW",
    "phoneGetStatus",
    "lineGetTranslateCapsA",
    "lineGetLineDevStatusA",
    "lineTranslateDialogW",
    "lineConfigDialogEditW",
    "lineGetCallStatus",
    "phoneGetIcon",
    "phoneNegotiateExtVersion",
    "tapiRequestMakeCallW",
    "lineMonitorDigits",
    "linePrepareAddToConferenceA",
    "lineGetAddressStatus",
    "lineGetAddressIDA",
    "lineSetDevConfigA",
    "phoneSetGain",
    "internalCreateDefLocation",
    "lineGenerateDigitsW",
    "lineAddProviderA",
    "lineInitializeExW",
    "internalConfig",
    "lineGetAddressIDW",
    "lineSetupConferenceA",
    "lineConfigDialogA",
    "lineGetAddressCapsA",
    "lineProxyMessage",
    "lineTranslateAddressA",
    "tapiGetLocationInfoW",
    "lineSendUserUserInfo",
    "lineParkW",
    "lineGetNumRings",
    "MMCGetLineStatus",
    "lineForward",
    "MMCSetServerConfig",
    "lineGetCountry",
    "lineGetIDW",
    "lineMakeCallW",
    "lineSetAgentActivity",
    "phoneDevSpecific",
    "lineAnswer",
    "lineRedirect",
    "lineSetStatusMessages",
    "lineHandoffA",
    "phoneSetButtonInfoW",
    "lineDevSpecificFeature",
    "lineCompleteTransfer",
    "phoneSetRing",
    "lineOpenW",
    "lineConfigDialogEdit",
    "lineConfigDialogW",
    "MMCGetProviderList",
    "LAddrParamsInited",
    "lineRemoveProvider",
    "lineGetStatusMessages",
    "lineGetTranslateCaps",
    "phoneGetButtonInfo",
    "lineGetAgentInfo",
    "lineRemoveFromConference",
    "lineGetIcon",
    "lineGetIconA",
    "lineUnparkA",
    "lineGatherDigits",
    "lineGetAddressStatusA",
    "lineGetGroupListA",
    "lineInitialize",
    "lineSetTollListA",
    "lineParkA",
    "linePrepareAddToConferenceW",
    "phoneGetDevCapsW",
    "lineGetAgentSessionList",
    "tapiGetLocationInfoA",
    "lineSetCallTreatment",
    "phoneSetHookSwitch",
    "MMCGetPhoneStatus",
    "lineSetTollListW",
    "lineSetupTransferA",
    "MMCRemoveProvider",
    "lineNegotiateExtVersion",
    "linePrepareAddToConference",
    "lineSetAppPriority",
    "lineGetRequestA",
    "lineSetDevConfig",
    "lineSetLineDevStatus",
    "lineSetupConferenceW",
    "phoneConfigDialog",
    "phoneGetStatusW",
    "lineSetDevConfigW",
    "lineMakeCall",
    "lineTranslateDialog",
    "internalRemoveLocation",
    "phoneShutdown",
    "tapiRequestMakeCallA",
    "phoneSetVolume",
    "lineClose",
    "lineSetAgentState",
    "phoneGetDevCaps",
    "lineGetIDA",
    "lineHandoffW",
    "lineReleaseUserUserInfo",
    "phoneGetStatusA",
    "phoneSetButtonInfo",
    "lineGetDevCaps",
    "lineAgentSpecific",
    "lineCompleteCall",
    "lineSetMediaControl",
    "lineInitializeExA",
    "phoneSetStatusMessages",
    "internalNewLocationW",
    "lineSwapHold",
    "lineSetAgentMeasurementPeriod",
    "TAPIWndProc",
    "lineGetDevCapsW"
  ],
  "tapiperf.dll": [
    "OpenTapiPerformanceData",
    "CloseTapiPerformanceData",
    "CollectTapiPerformanceData"
  ],
  "tapisrv.dll": [
    "ServiceMain"
  ],
  "tapiui.dll": "No exports",
  "tcpmib.dll": [
    "public: unsigned long __thiscall CTcpMib::SnmpGet(char const *,char const *,unsigned long,struct SnmpVarBindList *)",
    "const CTcpMib::`vftable'",
    "public: class CTcpMibABC & __thiscall CTcpMibABC::operator=(class CTcpMibABC const &)",
    "private: void __thiscall CTcpMib::ExitCSection(void)",
    "public: __thiscall CTcpMib::CTcpMib(class CTcpMib const &)",
    "public: __thiscall CTcpMibABC::CTcpMibABC(void)",
    "GetTcpMibPtr",
    "public: __thiscall CTcpMibABC::CTcpMibABC(class CTcpMibABC const &)",
    "public: unsigned long __thiscall CTcpMib::SnmpWalk(char const *,char const *,unsigned long,struct SnmpVarBindList *)",
    "public: class CTcpMib & __thiscall CTcpMib::operator=(class CTcpMib const &)",
    "const CTcpMibABC::`vftable'",
    "public: unsigned long __thiscall CTcpMib::SnmpGetNext(char const *,char const *,unsigned long,struct SnmpVarBindList *)",
    "public: virtual __thiscall CTcpMibABC::~CTcpMibABC(void)",
    "public: virtual unsigned long __thiscall CTcpMib::SnmpGet(char const *,char const *,unsigned long,struct AsnObjectIdentifier *,struct SnmpVarBindList *)",
    "public: virtual int __thiscall CTcpMib::SNMPToPortStatus(unsigned long,struct _PORT_INFO_3W *)",
    "public: virtual unsigned long __thiscall CTcpMib::GetJobStatus(char const *,char const *,unsigned long)",
    "public: virtual unsigned long __thiscall CTcpMib::SnmpWalk(char const *,char const *,unsigned long,struct AsnObjectIdentifier *,struct SnmpVarBindList *)",
    "public: virtual __thiscall CTcpMib::~CTcpMib(void)",
    "private: void __thiscall CTcpMib::EnterCSection(void)",
    "public: virtual unsigned long __thiscall CTcpMib::SnmpGetNext(char const *,char const *,unsigned long,struct AsnObjectIdentifier *,struct SnmpVarBindList *)",
    "public: virtual unsigned long __thiscall CTcpMib::GetDeviceDescription(char const *,char const *,unsigned long,unsigned short *,unsigned long)",
    "_Ping@4",
    "public: virtual unsigned long __thiscall CTcpMib::SNMPToPrinterStatus(unsigned long)",
    "public: virtual int __thiscall CTcpMib::SupportsPrinterMib(char const *,char const *,unsigned long,int *)",
    "public: virtual unsigned long __thiscall CTcpMib::GetDeviceName(char const *,char const *,unsigned long,unsigned long,unsigned short *)",
    "public: virtual unsigned long __thiscall CTcpMib::GetDeviceHWAddress(char const *,char const *,unsigned long,unsigned long,unsigned short *)",
    "public: virtual unsigned long __thiscall CTcpMib::GetDeviceStatus(char const *,char const *,unsigned long)",
    "public: __thiscall CTcpMib::CTcpMib(void)"
  ],
  "tcpmon.dll": [
    "const CTcpMibABC::`vftable'",
    "public: virtual __thiscall CTcpMibABC::~CTcpMibABC(void)",
    "public: class CTcpMibABC & __thiscall CTcpMibABC::operator=(class CTcpMibABC const &)",
    "InitializePrintMonitor2",
    "public: __thiscall CTcpMibABC::CTcpMibABC(void)",
    "public: __thiscall CPortABC::CPortABC(void)",
    "const CPortABC::`vftable'",
    "public: virtual __thiscall CPortABC::~CPortABC(void)",
    "public: __thiscall CTcpMibABC::CTcpMibABC(class CTcpMibABC const &)",
    "public: virtual unsigned long __thiscall CPortABC::Read(void * const,unsigned char *,unsigned long,unsigned long *)",
    "public: __thiscall CPortABC::CPortABC(class CPortABC const &)",
    "public: class CPortABC & __thiscall CPortABC::operator=(class CPortABC const &)"
  ],
  "tcpmonui.dll": [
    "const CTcpMibABC::`vftable'",
    "public: virtual __thiscall CTcpMibABC::~CTcpMibABC(void)",
    "public: class CTcpMibABC & __thiscall CTcpMibABC::operator=(class CTcpMibABC const &)",
    "LocalAddPortUI",
    "public: __thiscall CPortABC::CPortABC(void)",
    "public: __thiscall CTcpMibABC::CTcpMibABC(void)",
    "const CPortABC::`vftable'",
    "InitializePrintMonitorUI",
    "public: virtual __thiscall CPortABC::~CPortABC(void)",
    "public: __thiscall CTcpMibABC::CTcpMibABC(class CTcpMibABC const &)",
    "public: virtual unsigned long __thiscall CPortABC::Read(void * const,unsigned char *,unsigned long,unsigned long *)",
    "public: __thiscall CPortABC::CPortABC(class CPortABC const &)",
    "LocalConfigurePortUI",
    "public: class CPortABC & __thiscall CPortABC::operator=(class CPortABC const &)"
  ],
  "termmgr.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "termsrv.dll": [
    "ServiceMain"
  ],
  "themeui.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllInstall",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "tlntsvrp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "traffic.dll": [
    "TcGetFlowNameW",
    "TcSetFlowA",
    "TcQueryFlowA",
    "TcGetFlowNameA",
    "TcQueryFlowW",
    "TcCloseInterface",
    "TcModifyFlow",
    "TcDeleteFilter",
    "TcSetFlowW",
    "TcDeregisterClient",
    "TcDeleteFlow",
    "TcRegisterClient",
    "TcAddFilter",
    "TcEnumerateInterfaces",
    "TcAddFlow",
    "TcOpenInterfaceW",
    "TcAddClassMap",
    "TcEnumerateFlows",
    "TcSetInterface",
    "TcQueryInterface",
    "TcOpenInterfaceA"
  ],
  "trkwks.dll": [
    "ServiceMain",
    "ServiceEntry"
  ],
  "tsappcmp.dll": [
    "TermServPrepareAppInstallDueMSI",
    "TermsrvGetComputerName",
    "TermsrvGetWindowsDirectoryA",
    "TermsrvOpenRegEntry",
    "TermsrvDeleteKey",
    "TermsrvBuildSysIniPath",
    "TermsrvCreateRegEntry",
    "TermsrvGetString",
    "GetTermsrCompatFlagsEx",
    "TermsrvUpdateAllUserMenu",
    "TermsrvFormatObjectName",
    "TermsrvOpenUserClasses",
    "TermsrvGetWindowsDirectoryW",
    "TermsrvDeleteValue",
    "TermsrvBuildIniFileName",
    "TermsrvSetValueKey",
    "TermsrvSetKeySecurity",
    "TermsrvAdjustPhyMemLimits",
    "TermsrvRestoreKey",
    "TermsrvLogInstallIniFile",
    "TermsrvLogInstallIniFileEx",
    "TermsrvGetPreSetValue",
    "GetTermsrCompatFlags",
    "TermsrvCopyIniFile",
    "TermsrvCheckNewIniFiles",
    "TermServProcessAppInstallDueMSI",
    "TermsrvConvertSysRootToUserDir",
    "TermsrvRemoveClassesKey",
    "TermsrvCORIniFile"
  ],
  "tsbyuv.dll": [
    "DriverProc"
  ],
  "tscfgwmi.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "tsddd.dll": "No exports",
  "tsgqec.dll": [
    "InitializeQec",
    "UninitializeQec"
  ],
  "tspkg.dll": [
    "SpUserModeInitialize",
    "SpLsaModeInitialize"
  ],
  "twext.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "txflog.dll": [
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "udhisapi.dll": [
    "GetExtensionVersion",
    "TerminateExtension",
    "HttpExtensionProc"
  ],
  "ufat.dll": [
    "public: __thiscall REAL_FAT_SA::REAL_FAT_SA(void)",
    "public: virtual unsigned char __thiscall REAL_FAT_SA::Read(class MESSAGE *)",
    "public: unsigned char __thiscall ROOTDIR::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,unsigned long,long)",
    "public: virtual unsigned char __thiscall EA_SET::Read(void)",
    "public: void __thiscall FAT::FreeChain(unsigned long)",
    "public: __thiscall ROOTDIR::ROOTDIR(void)",
    "public: struct _EA * __thiscall EA_SET::GetEa(unsigned long,long *,unsigned char *)",
    "private: unsigned long __thiscall FAT::Index12(unsigned long)const",
    "public: unsigned char __thiscall FAT_DIRENT::IsValidCreationTime(void)const",
    "public: unsigned char __thiscall FAT_DIRENT::QueryLastAccessTime(union _LARGE_INTEGER *)const",
    "public: unsigned char __thiscall FAT_DIRENT::IsValidLastAccessTime(void)const",
    "public: unsigned char __thiscall FAT_DIRENT::IsValidLastWriteTime(void)const",
    "public: unsigned char __thiscall FAT_DIRENT::Initialize(void *)",
    "private: void __thiscall FAT::Set12(unsigned long,unsigned long)",
    "public: unsigned long __thiscall FAT::AllocChain(unsigned long,unsigned long *)",
    "public: __thiscall CLUSTER_CHAIN::CLUSTER_CHAIN(void)",
    "public: __thiscall FAT_SA::FAT_SA(void)",
    "public: __thiscall FILEDIR::FILEDIR(void)",
    "ChkdskEx",
    "public: unsigned char __thiscall EA_SET::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class FAT_SA *,class FAT const *,unsigned long,unsigned long)",
    "public: virtual __thiscall FAT_SA::~FAT_SA(void)",
    "public: unsigned long __thiscall FAT::QueryAllocatedClusters(void)const",
    "public: unsigned short __thiscall EA_HEADER::QueryEaSetClusterNumber(unsigned short)const",
    "public: unsigned char __thiscall EA_HEADER::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class FAT_SA *,class FAT const *,unsigned long,unsigned long)",
    "Format",
    "public: unsigned char __thiscall FAT_DIRENT::QueryName(class WSTRING *)const",
    "public: __thiscall EA_SET::EA_SET(void)",
    "public: unsigned char __thiscall FAT_DIRENT::QueryCreationTime(union _LARGE_INTEGER *)const",
    "public: unsigned char __thiscall REAL_FAT_SA::InitFATChkDirty(class LOG_IO_DP_DRIVE *,class MESSAGE *)",
    "public: virtual unsigned char __thiscall CLUSTER_CHAIN::Read(void)",
    "public: __thiscall EA_HEADER::EA_HEADER(void)",
    "public: virtual __thiscall EA_HEADER::~EA_HEADER(void)",
    "public: unsigned long __thiscall FAT::QueryNthCluster(unsigned long,unsigned long)const",
    "public: unsigned long __thiscall FAT::QueryLengthOfChain(unsigned long,unsigned long *)const",
    "public: unsigned char __thiscall FILEDIR::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class FAT_SA *,class FAT const *,unsigned long)",
    "public: virtual __thiscall CLUSTER_CHAIN::~CLUSTER_CHAIN(void)",
    "_InitializeUfat@12",
    "public: virtual __thiscall REAL_FAT_SA::~REAL_FAT_SA(void)",
    "public: unsigned char __thiscall FAT_DIRENT::Initialize(void *,unsigned char)",
    "public: unsigned char __thiscall FAT_SA::QueryCensusAndRelocate(struct _CENSUS_REPORT *,class INTSTACK *,unsigned char *)",
    "public: unsigned char __thiscall CLUSTER_CHAIN::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class FAT_SA *,class FAT const *,unsigned long,unsigned long)",
    "public: virtual __thiscall EA_SET::~EA_SET(void)",
    "public: virtual unsigned char __thiscall CLUSTER_CHAIN::Write(void)",
    "FormatEx",
    "public: unsigned char __thiscall FAT_DIRENT::QueryLastWriteTime(union _LARGE_INTEGER *)const",
    "public: void * __thiscall FATDIR::SearchForDirEntry(class WSTRING const *)",
    "public: virtual __thiscall FILEDIR::~FILEDIR(void)",
    "Chkdsk",
    "public: virtual unsigned char __thiscall REAL_FAT_SA::Initialize(class LOG_IO_DP_DRIVE *,class MESSAGE *,unsigned char)",
    "public: __thiscall FAT_DIRENT::FAT_DIRENT(void)",
    "Recover",
    "public: virtual __thiscall FAT_DIRENT::~FAT_DIRENT(void)",
    "public: unsigned long __thiscall FAT_SA::QueryFileStartingCluster(class WSTRING const *,class HMEM *,class FATDIR * *,unsigned char *,class FAT_DIRENT *)",
    "public: virtual __thiscall ROOTDIR::~ROOTDIR(void)",
    "public: unsigned char __thiscall FATDIR::QueryLongName(long,class WSTRING *)",
    "public: unsigned long __thiscall REAL_FAT_SA::QueryFreeSectors(void)const"
  ],
  "ulib.dll": [
    "public: static unsigned char __stdcall SYSTEM::IsCorrectVersion(void)",
    "public: void * __thiscall MEM_BLOCK_MGR::Alloc(void)",
    "public: unsigned char __thiscall STREAM::ReadLine(class WSTRING *,unsigned char)",
    "public: unsigned char __thiscall LIST::Insert(class OBJECT *,class ITERATOR *)",
    "public: virtual class ITERATOR * __thiscall SORTED_LIST::QueryIterator(void)const",
    "public: __thiscall STRING_ARRAY::STRING_ARRAY(void)",
    "public: class BDSTRING & __thiscall BDSTRING::operator=(class BDSTRING const &)",
    "public: unsigned char __cdecl MESSAGE::Log(char const *,...)",
    "public: class WSTRING * __thiscall PATH::QueryFullPathString(void)const",
    "public: unsigned char __thiscall BSTRING::ReplaceWithChars(unsigned long,unsigned long,char,unsigned long)",
    "class STREAM * __stdcall Get_Standard_Output_Stream(void)",
    "public: static class FSN_DIRECTORY * __stdcall SYSTEM::QueryDirectory(class PATH const *,unsigned char)",
    "protected: void __thiscall WSTRING::PutString(unsigned short *)",
    "const WSTRING::`vftable'",
    "public: class FSNODE * __thiscall FSN_DIRECTORY::GetNext(void * *,unsigned long *)",
    "public: unsigned char __thiscall MESSAGE::DisplayMsg(unsigned long)",
    "public: unsigned char __thiscall HMEM::Resize(unsigned long,unsigned long)",
    "public: unsigned char __thiscall PATH::SetDevice(class WSTRING const *)",
    "public: virtual void __thiscall PROGRAM::Fatal(void)const",
    "public: virtual unsigned char __thiscall ARRAY::DeleteAllMembers(void)",
    "public: unsigned char __thiscall TIMEINFO::operator<(class TIMEINFO)const",
    "public: unsigned char __thiscall WSTRING::operator<=(class WSTRING const &)const",
    "public: unsigned char __thiscall STRING_ARRAY::Initialize(unsigned long,unsigned long,unsigned long)",
    "public: virtual __thiscall PATH_ARGUMENT::~PATH_ARGUMENT(void)",
    "public: virtual unsigned char __cdecl PROGRAM::DisplayMessage(unsigned long,enum MESSAGE_TYPE,char *,...)const",
    "public: class WSTRING * __thiscall ARGUMENT::GetLexeme(void)",
    "public: __thiscall MACHINE::MACHINE(void)",
    "const OBJECT::`vftable'",
    "public: unsigned char __thiscall SCREEN::EraseScreen(void)",
    "public: static class KEYBOARD * __stdcall KEYBOARD::Cast(class OBJECT const *)",
    "const FSTRING::`vftable'",
    "public: virtual unsigned char __thiscall SEQUENTIAL_CONTAINER::DeleteAllMembers(void)",
    "public: enum PATH_ANALYZE_CODE __thiscall PATH::AnalyzePath(class WSTRING *,class PATH *,class WSTRING *)",
    "public: __thiscall DSTRING::DSTRING(class DSTRING const &)",
    "public: unsigned char __thiscall SCREEN::MoveCursorTo(unsigned short,unsigned short)",
    "public: unsigned char __thiscall SCREEN::ChangeScreenSize(unsigned short,unsigned short,unsigned char *)",
    "public: unsigned char __thiscall FSN_FILTER::SetFileName(class WSTRING const *)",
    "public: unsigned char __thiscall WSTRING::Strcat(class WSTRING const *)",
    "public: unsigned char __thiscall COMM_DEVICE::CommitState(void)",
    "public: unsigned char __thiscall BYTE_STREAM::Initialize(class STREAM *,unsigned long)",
    "public: virtual class OBJECT * __thiscall ARRAY::Remove(class ITERATOR *)",
    "public: unsigned short __thiscall WSTRING::SetChAt(unsigned short,unsigned long)",
    "public: static enum DRIVE_TYPE __stdcall SYSTEM::QueryDriveType(class WSTRING const *)",
    "public: unsigned long __thiscall WSTRING::Truncate(unsigned long)",
    "public: void __thiscall ARGUMENT_LEXEMIZER::SetCaseSensitive(unsigned char)",
    "public: static class FSN_FILE * __stdcall SYSTEM::MakeFile(class PATH const *)",
    "public: virtual unsigned char __thiscall MESSAGE::IsYesResponse(unsigned char)",
    "public: void __thiscall ARGUMENT_LEXEMIZER::PutSeparators(char const *)",
    "public: unsigned char __thiscall PATH::HasWildCard(void)const",
    "public: unsigned char __thiscall FSNODE::UseAlternateName(void)",
    "public: class WSTRING * __thiscall WSTRING::QueryString(unsigned long,unsigned long)const",
    "public: unsigned long __thiscall BSTRING::NextChar(unsigned long)",
    "public: unsigned char __thiscall MESSAGE::LogMsg(unsigned long)",
    "public: class ARRAY * __thiscall PATH::QueryComponentArray(class ARRAY *)const",
    "public: class WSTRING * __thiscall PATH::QueryRoot(void)",
    "public: unsigned char __thiscall PRINT_STREAM::Initialize(class PATH const *)",
    "public: unsigned char __thiscall TIMEINFO::QueryDate(class WSTRING *)const",
    "public: unsigned short * __thiscall WSTRING::QueryWSTR(unsigned long,unsigned long,unsigned short *,unsigned long,unsigned char)const",
    "public: unsigned char __thiscall STREAM::ReadMbLine(char *,unsigned long,unsigned long *,unsigned char,unsigned long)",
    "public: unsigned char __thiscall PATH::IsGuidVolName(void)",
    "public: virtual class ITERATOR * __thiscall LIST::QueryIterator(void)const",
    "protected: void __thiscall OBJECT::SetClassDescriptor(class CLASS_DESCRIPTOR const *)",
    "public: virtual __thiscall STREAM_MESSAGE::~STREAM_MESSAGE(void)",
    "public: virtual unsigned char __thiscall MESSAGE::IsInSetup(void)",
    "public: unsigned char __thiscall WSTRING::operator!=(class WSTRING const &)const",
    "public: unsigned char __thiscall PROGRAM::Initialize(unsigned long,unsigned long,unsigned long)",
    "public: class WSTRING * __thiscall WSTRING::Strupr(void)",
    "public: virtual unsigned char __thiscall FSTRING::Resize(unsigned long)",
    "public: unsigned char __thiscall WSTRING::Initialize(unsigned short const *,unsigned long)",
    "public: class DSTRING & __thiscall DSTRING::operator=(class DSTRING const &)",
    "public: unsigned char __thiscall OBJECT::IsSameClass(class OBJECT const *)const",
    "public: void * __thiscall MEM_ALLOCATOR::Allocate(unsigned long)",
    "public: virtual void __thiscall PROGRAM::Usage(void)const",
    "public: __thiscall WSTRING::WSTRING(class WSTRING const &)",
    "public: unsigned char __thiscall MESSAGE::DisplayMsg(unsigned long,enum MESSAGE_TYPE,unsigned long)",
    "protected: void __thiscall BSTRING::PutString(char *,unsigned long)",
    "public: unsigned char __thiscall WSTRING::Initialize(void)",
    "public: virtual class STREAM * __thiscall PROGRAM::GetStandardError(void)",
    "public: unsigned char __thiscall FSN_FILE::Copy(class PATH *,enum _COPY_ERROR *,unsigned long,unsigned long (__stdcall*)(union _LARGE_INTEGER,union _LARGE_INTEGER,union _LARGE_INTEGER,union _LARGE_INTEGER,unsigned long,unsigned long,void *,void *,void *),void *,int *)const",
    "public: unsigned char __thiscall SCREEN::EraseScreenAndResetAttribute(void)",
    "public: unsigned char __thiscall WSTRING::InsertString(unsigned long,class WSTRING const *,unsigned long,unsigned long)",
    "public: virtual __thiscall FSTRING::~FSTRING(void)",
    "public: virtual unsigned char __thiscall BDSTRING::NewBuf(unsigned long)",
    "public: unsigned char __thiscall COMM_DEVICE::SetBaudRate(unsigned long)",
    "public: virtual __thiscall ARRAY::~ARRAY(void)",
    "public: unsigned long __thiscall SCREEN::QueryCodePage(void)",
    "public: static int __stdcall WSTRING::Strcmps(unsigned short *,unsigned short *)",
    "public: static enum FILE_TYPE __stdcall SYSTEM::QueryFileType(class WSTRING const *)",
    "public: unsigned char __thiscall FSN_FILTER::DoesNodeMatch(class FSNODE *)",
    "public: unsigned char __thiscall COMM_DEVICE::SetOdsr(unsigned char)",
    "public: virtual unsigned char __thiscall PROGRAM::DisplayMessage(unsigned long,enum MESSAGE_TYPE)const",
    "public: void __thiscall ARGUMENT_LEXEMIZER::PutSwitches(char const *)",
    "public: __thiscall ARGUMENT_LEXEMIZER::ARGUMENT_LEXEMIZER(void)",
    "public: void __thiscall MESSAGE::SetLoggingEnabled(unsigned char)",
    "public: unsigned char __thiscall PATH::ModifyName(class WSTRING const *)",
    "public: unsigned char __thiscall WSTRING::operator>=(class WSTRING const &)const",
    "private: static unsigned char WSTRING::_UseConsoleConversionsPrev",
    "protected: void __thiscall WSTRING::Construct(void)",
    "public: unsigned char __thiscall ARRAY::Initialize(unsigned long,unsigned long)",
    "public: virtual unsigned char __thiscall STREAM_MESSAGE::Set(unsigned long,enum MESSAGE_TYPE,unsigned long)",
    "public: static int __stdcall MBSTR::Strcmps(char *,char *)",
    "public: unsigned char __thiscall TIMEINFO::QueryTime(class WSTRING *)const",
    "public: virtual __thiscall SORTED_LIST::~SORTED_LIST(void)",
    "public: __thiscall MEM_ALLOCATOR::MEM_ALLOCATOR(void)",
    "public: virtual __thiscall COMM_DEVICE::~COMM_DEVICE(void)",
    "protected: __thiscall OBJECT::OBJECT(void)",
    "public: __thiscall COMM_DEVICE::COMM_DEVICE(void)",
    "public: virtual __thiscall PRINT_STREAM::~PRINT_STREAM(void)",
    "public: unsigned char __thiscall FSN_FILTER::SetAttributes(unsigned long,unsigned long,unsigned long)",
    "public: virtual unsigned char __thiscall SORTED_LIST::Put(class OBJECT *)",
    "public: virtual unsigned char __thiscall BDSTRING::Resize(unsigned long)",
    "public: unsigned char __thiscall PATH::AppendBase(class WSTRING const *,unsigned char)",
    "public: unsigned char __thiscall ARGUMENT::IsValueSet(void)",
    "private: static unsigned char __stdcall WSTRING::ConvertOemToUnicodeN(unsigned short *,unsigned long,unsigned long *,char *,unsigned long)",
    "public: unsigned char __thiscall STRING_ARGUMENT::Initialize(char *)",
    "public: __thiscall BDSTRING::BDSTRING(class BDSTRING const &)",
    "public: static unsigned char __cdecl BASE_SYSTEM::QueryResourceString(class WSTRING *,unsigned long,char const *,...)",
    "public: unsigned char __thiscall MACHINE::Initialize(void)",
    "public: void __thiscall ARGUMENT_LEXEMIZER::PutSwitches(class WSTRING const *)",
    "public: virtual class ITERATOR * __thiscall ARRAY::QueryIterator(void)const",
    "public: virtual __thiscall BSTRING::~BSTRING(void)",
    "public: __thiscall FSTRING::FSTRING(class FSTRING const &)",
    "public: static unsigned char __stdcall SYSTEM::QueryCurrentDosDriveName(class WSTRING *)",
    "public: unsigned char __thiscall COMM_DEVICE::SetRtsControl(enum RTS_CONTROL)",
    "public: unsigned char __thiscall BSTRING::Initialize(void)",
    "private: unsigned long __thiscall BITVECTOR::ComputeCountSet(void)const",
    "public: unsigned char __thiscall COMM_DEVICE::SetStopBits(enum STOPBITS)",
    "public: __thiscall FLAG_ARGUMENT::FLAG_ARGUMENT(void)",
    "public: unsigned char __thiscall HMEM::Initialize(void)",
    "public: virtual __thiscall HMEM::~HMEM(void)",
    "public: unsigned char __thiscall WSTRING::Replace(unsigned long,unsigned long,class WSTRING const *,unsigned long,unsigned long)",
    "public: unsigned char __thiscall PATH::AppendDelimiter(void)",
    "public: static unsigned char __stdcall SYSTEM::GetFileSecurityBackup(class PATH const *,unsigned long,struct _SECURITY_ATTRIBUTES *,unsigned long *)",
    "public: void __thiscall BITVECTOR::SetBit(unsigned long,unsigned long)",
    "public: virtual __thiscall PROGRAM::~PROGRAM(void)",
    "public: unsigned char __thiscall WSTRING::operator<(class WSTRING const &)const",
    "public: virtual void * __thiscall CONT_MEM::Acquire(unsigned long,unsigned long)",
    "public: unsigned char __thiscall LIST::Initialize(void)",
    "public: static int __stdcall WSTRING::Strcmp(unsigned short *,unsigned short *)",
    "public: virtual void __thiscall PROGRAM::ValidateVersion(unsigned long,unsigned long)const",
    "public: void __thiscall BITVECTOR::ResetBit(unsigned long,unsigned long)",
    "public: void __thiscall PATH::TruncateDelimiter(void)",
    "public: virtual __thiscall FSN_FILTER::~FSN_FILTER(void)",
    "public: void __thiscall ARGUMENT_LEXEMIZER::PutMultipleSwitch(class WSTRING const *)",
    "public: unsigned char __thiscall ARGUMENT_LEXEMIZER::PrepareToParse(class WSTRING *)",
    "public: void __thiscall MESSAGE::Unlock(void)",
    "public: virtual unsigned char __thiscall MESSAGE::IsKeyPressed(unsigned long,unsigned long)",
    "public: unsigned char __thiscall FLAG_ARGUMENT::Initialize(char *)",
    "public: unsigned char __thiscall KEYBOARD::EnableLineMode(void)",
    "public: __thiscall SCREEN::SCREEN(void)",
    "public: void __thiscall ARGUMENT_LEXEMIZER::PutMultipleSwitch(char const *)",
    "public: virtual __thiscall MEM_ALLOCATOR::~MEM_ALLOCATOR(void)",
    "public: unsigned char __thiscall PATH::Initialize(class WSTRING const *,unsigned char)",
    "public: __thiscall DSTRING::DSTRING(void)",
    "public: unsigned char __thiscall WSTRING::Initialize(char const *,unsigned long)",
    "public: class CLASS_DESCRIPTOR const * __thiscall OBJECT::GetClassDescriptor(void)const",
    "public: virtual unsigned char __thiscall STREAM_MESSAGE::IsYesResponse(unsigned char)",
    "public: unsigned long __thiscall WSTRING::Strspn(class WSTRING const *,unsigned long)const",
    "public: static class FILE_STREAM * __stdcall FILE_STREAM::Cast(class OBJECT const *)",
    "public: unsigned long __thiscall WSTRING::QueryChCount(void)const",
    "const BSTRING::`vftable'",
    "public: static void __stdcall PROGRAM::ExitProgram(unsigned long)",
    "public: unsigned long __thiscall OBJECT::QueryClassId(void)const",
    "public: virtual __thiscall MEM_BLOCK_MGR::~MEM_BLOCK_MGR(void)",
    "public: unsigned char __thiscall PATH_ARGUMENT::Initialize(char *,unsigned char)",
    "public: void __thiscall WSTRING::DeleteChAt(unsigned long,unsigned long)",
    "public: virtual unsigned char __thiscall LIST::Put(class OBJECT *)",
    "public: unsigned char __thiscall PATH::TruncateBase(void)",
    "public: class BSTRING & __thiscall BSTRING::operator=(class BSTRING const &)",
    "public: unsigned char __thiscall LONG_ARGUMENT::Initialize(char *)",
    "public: __thiscall FSTRING::FSTRING(void)",
    "protected: void __thiscall OBJECT::Construct(void)",
    "public: unsigned long __thiscall WSTRING::Strstr(class WSTRING const *)const",
    "public: static class WSTRING * __stdcall SYSTEM::QueryVolumeLabel(class PATH *,struct _VOL_SERIAL_NUMBER *)",
    "public: unsigned char __thiscall PATH::Initialize(class PATH const *,unsigned char)",
    "public: unsigned char __thiscall MESSAGE::QueryNextLoggedMessage(class FSTRING *)",
    "public: static unsigned char __stdcall KEYBOARD::EnableBreakHandling(void)",
    "public: virtual unsigned char __thiscall CHKDSK_MESSAGE::IsYesResponse(unsigned char)",
    "public: unsigned char __thiscall MESSAGE::DumpDataToLog(void *,unsigned long)",
    "public: unsigned char __thiscall FSN_FILTER::SetFileName(char const *)",
    "public: unsigned long __thiscall WSTRING::Strcspn(class WSTRING const *,unsigned long)const",
    "public: __thiscall BDSTRING::BDSTRING(void)",
    "public: __thiscall PATH_ARGUMENT::PATH_ARGUMENT(void)",
    "public: long __thiscall WSTRING::Stricmp(class WSTRING const *,unsigned long,unsigned long,unsigned long,unsigned long)const",
    "public: unsigned char __thiscall MEM_ALLOCATOR::Initialize(unsigned __int64,unsigned long)",
    "private: static unsigned char __stdcall WSTRING::ConvertUnicodeToOemN(char *,unsigned long,unsigned long *,unsigned short *,unsigned long)",
    "public: unsigned char __thiscall OBJECT::IsSameObject(class OBJECT const *)const",
    "public: unsigned char __thiscall PATH::AppendString(class WSTRING const *)",
    "public: virtual class STREAM * __thiscall PROGRAM::GetStandardOutput(void)",
    "public: __thiscall STRING_ARGUMENT::STRING_ARGUMENT(void)",
    "public: void __thiscall ARGUMENT_LEXEMIZER::SetNoSpcBetweenDstAndSwitch(unsigned char)",
    "public: static char * __stdcall MBSTR::Strstr(char *,char *)",
    "public: static unsigned char __stdcall KEYBOARD::GotABreak(void)",
    "private: void __thiscall BDSTRING::Construct(void)",
    "public: static void __stdcall WSTRING::SetAnsiConversions(void)",
    "public: void __thiscall MESSAGE::ResetLoggingIterator(void)",
    "public: static unsigned short * __stdcall WSTRING::SkipWhite(unsigned short *)",
    "public: class FSN_DIRECTORY * __thiscall FSN_DIRECTORY::CreateDirectoryPath(class PATH const *)const",
    "public: unsigned char __thiscall ARGUMENT_LEXEMIZER::Initialize(class ARRAY *)",
    "public: class WSTRING * __thiscall WSTRING::Strupr(unsigned long,unsigned long)",
    "public: unsigned char __thiscall COMM_DEVICE::SetOcts(unsigned char)",
    "public: unsigned char __thiscall MACHINE::IsPCAT(void)",
    "public: long __thiscall WSTRING::Stricmp(class WSTRING const *,unsigned long)const",
    "public: unsigned char __thiscall TIMEINFO::ConvertToLocal(void)",
    "public: __thiscall FSN_FILTER::FSN_FILTER(void)",
    "public: class FSTRING & __thiscall FSTRING::operator=(class FSTRING const &)",
    "public: virtual unsigned char __thiscall CHKDSK_MESSAGE::Set(unsigned long,enum MESSAGE_TYPE,unsigned long)",
    "public: static void __stdcall WSTRING::SetConsoleConversions(void)",
    "public: unsigned char __thiscall MULTIPLE_PATH_ARGUMENT::Initialize(char *,unsigned char,unsigned char)",
    "public: void __thiscall PATH::TruncateNameAtColon(void)",
    "public: unsigned char __thiscall MEM_BLOCK_MGR::Free(void *)",
    "public: unsigned short const * __thiscall WSTRING::GetWSTR(void)const",
    "public: unsigned char __thiscall COMM_DEVICE::SetDtrControl(enum DTR_CONTROL)",
    "void * __stdcall FindFirstFileW(class PATH const *,struct _WIN32_FIND_DATAW *)",
    "public: unsigned char __thiscall WSTRING::operator==(class WSTRING const &)const",
    "const DSTRING::`vftable'",
    "public: unsigned char __thiscall COMM_DEVICE::QueryTimeOut(void)const",
    "public: __thiscall STREAM_MESSAGE::STREAM_MESSAGE(void)",
    "public: virtual unsigned char __thiscall ARRAY::Put(class OBJECT *)",
    "public: unsigned char __thiscall STREAM_MESSAGE::Initialize(class STREAM *,class STREAM *,class STREAM *)",
    "public: unsigned char __thiscall KEYBOARD::Flush(void)",
    "public: class FILE_STREAM * __thiscall FSN_FILE::QueryStream(enum STREAMACCESS,unsigned long)",
    "public: __thiscall REST_OF_LINE_ARGUMENT::REST_OF_LINE_ARGUMENT(void)",
    "public: unsigned char __thiscall PATH::Initialize(unsigned short const *,unsigned char)",
    "public: virtual __thiscall LIST::~LIST(void)",
    "public: void __thiscall SCREEN::QueryScreenSize(unsigned short *,unsigned short *,unsigned short *,unsigned short *)const",
    "public: virtual __thiscall BYTE_STREAM::~BYTE_STREAM(void)",
    "public: virtual unsigned long __thiscall SORTED_LIST::QueryMemberCount(void)const",
    "public: virtual __thiscall PATH::~PATH(void)",
    "public: virtual __thiscall TIMEINFO_ARGUMENT::~TIMEINFO_ARGUMENT(void)",
    "public: static int __stdcall WSTRING::Strcmpis(unsigned short *,unsigned short *)",
    "public: class OBJECT & __thiscall OBJECT::operator=(class OBJECT const &)",
    "public: char * __thiscall WSTRING::QuerySTR(unsigned long,unsigned long,char *,unsigned long,unsigned char)const",
    "public: unsigned char __thiscall MACHINE::IsFMR(void)",
    "public: unsigned char __thiscall MACHINE::IsPC98(void)",
    "public: long __thiscall WSTRING::Strcmp(class WSTRING const *)const",
    "public: virtual __thiscall WSTRING::~WSTRING(void)",
    "public: char * __thiscall BSTRING::QuerySTR(unsigned long,unsigned long,char *,unsigned long,unsigned char)const",
    "public: unsigned char __thiscall MESSAGE::QueryPackedLog(class HMEM *,unsigned long *)",
    "public: unsigned char __thiscall FSN_DIRECTORY::Traverse(void *,class FSN_FILTER *,class PATH *,unsigned char (__stdcall*)(void *,class FSNODE *,class PATH *))const",
    "public: virtual __thiscall ARGUMENT_LEXEMIZER::~ARGUMENT_LEXEMIZER(void)",
    "public: __thiscall PATH::PATH(void)",
    "public: virtual void * __thiscall HMEM::Acquire(unsigned long,unsigned long)",
    "public: unsigned char __thiscall TIMEINFO::ConvertToUTC(void)",
    "public: __thiscall CHKDSK_MESSAGE::CHKDSK_MESSAGE(void)",
    "public: class WSTRING * __thiscall WSTRING::Strlwr(unsigned long,unsigned long)",
    "public: void __thiscall MESSAGE::Lock(void)",
    "public: unsigned char __thiscall COMM_DEVICE::SetDataBits(unsigned long)",
    "public: __thiscall TIMEINFO_ARGUMENT::TIMEINFO_ARGUMENT(void)",
    "public: __thiscall SORTED_LIST::SORTED_LIST(void)",
    "public: unsigned char __thiscall TIMEINFO::Initialize(struct _FILETIME *)",
    "public: unsigned char __thiscall STREAM::ReadWLine(unsigned short *,unsigned long,unsigned long *,unsigned char,unsigned long)",
    "public: static class PATH * __stdcall SYSTEM::SearchPathW(class WSTRING *,class WSTRING *)",
    "public: static unsigned char __stdcall SYSTEM::QueryWindowsErrorMessage(unsigned long,class WSTRING *)",
    "public: virtual __thiscall DSTRING::~DSTRING(void)",
    "public: static class FSN_DIRECTORY * __stdcall SYSTEM::MakeDirectory(class PATH const *,class PATH const *,enum _COPY_ERROR *,unsigned long (__stdcall*)(union _LARGE_INTEGER,union _LARGE_INTEGER,union _LARGE_INTEGER,union _LARGE_INTEGER,unsigned long,unsigned long,void *,void *,void *),void *,int *,unsigned long)",
    "public: virtual class STREAM * __thiscall PROGRAM::GetStandardInput(void)",
    "public: virtual __thiscall MESSAGE::~MESSAGE(void)",
    "public: __thiscall LIST::LIST(void)",
    "public: static class PATH * __stdcall SYSTEM::QuerySystemDirectory(void)",
    "public: __thiscall MULTIPLE_PATH_ARGUMENT::MULTIPLE_PATH_ARGUMENT(void)",
    "public: unsigned short __thiscall WSTRING::QueryChAt(unsigned long)const",
    "public: long __thiscall WSTRING::Stricmp(class WSTRING const *)const",
    "public: int * __thiscall KEYBOARD::GetPFlagBreak(void)const",
    "public: unsigned long __thiscall WSTRING::Strchr(unsigned short,unsigned long)const",
    "public: void __thiscall TIMEINFO::Initialize(class TIMEINFO const *)",
    "public: long __thiscall WSTRING::Strcmp(class WSTRING const *,unsigned long,unsigned long,unsigned long,unsigned long)const",
    "protected: __thiscall PROGRAM::PROGRAM(void)",
    "public: unsigned char __thiscall MEM_BLOCK_MGR::Initialize(unsigned long,unsigned long)",
    "public: class PATH * __thiscall PATH::QueryWCExpansion(class PATH *)",
    "protected: void __thiscall WSTRING::PutString(unsigned short *,unsigned long)",
    "class STREAM * __stdcall Get_Standard_Input_Stream(void)",
    "public: unsigned char __thiscall SCREEN::SetOutputCodePage(unsigned long)",
    "public: class WSTRING * __thiscall ARGUMENT::GetPattern(void)",
    "public: unsigned char __thiscall BITVECTOR::Initialize(unsigned long,enum BIT,unsigned long *)",
    "public: unsigned char __thiscall STREAM::WriteByte(unsigned char)",
    "private: unsigned char __thiscall BYTE_STREAM::FillAndReadByte(unsigned char *)",
    "public: __thiscall MEM_BLOCK_MGR::MEM_BLOCK_MGR(void)",
    "public: __thiscall PRINT_STREAM::PRINT_STREAM(void)",
    "public: unsigned char __thiscall MESSAGE::IsLoggingEnabled(void)",
    "public: unsigned char __thiscall REST_OF_LINE_ARGUMENT::Initialize(void)",
    "public: virtual __thiscall BDSTRING::~BDSTRING(void)",
    "public: unsigned char __thiscall WSTRING::Initialize(long)",
    "public: unsigned char __thiscall COMM_DEVICE::SetParity(enum PARITY)",
    "public: unsigned long __thiscall WSTRING::Strrchr(unsigned short,unsigned long)const",
    "void * __stdcall UlibRealloc(void *,unsigned long)",
    "private: static unsigned char WSTRING::_UseAnsiConversionsPrev",
    "public: unsigned char __thiscall BSTRING::Initialize(char const *,unsigned long)",
    "public: class WSTRING * __thiscall FSTRING::Initialize(unsigned short *,unsigned long)",
    "public: virtual long __thiscall OBJECT::Compare(class OBJECT const *)const",
    "public: unsigned char __thiscall WSTRING::ReplaceWithChars(unsigned long,unsigned long,unsigned short,unsigned long)",
    "public: __thiscall BYTE_STREAM::BYTE_STREAM(void)",
    "public: class WSTRING * __thiscall ARGUMENT_LEXEMIZER::GetLexemeAt(unsigned long)",
    "public: unsigned char __thiscall ARGUMENT_LEXEMIZER::DoParsing(class ARRAY *)",
    "public: unsigned char __thiscall TIMEINFO::operator>(class TIMEINFO)const",
    "class STREAM * __stdcall Get_Standard_Error_Stream(void)",
    "public: unsigned char __thiscall KEYBOARD::DisableLineMode(void)",
    "public: static int (__stdcall*__stdcall SYSTEM::QueryLibraryEntryPoint(class WSTRING const *,class WSTRING const *,void * *))(void)",
    "public: class PATH * __thiscall PATH::QueryMountPointPath(void)",
    "public: unsigned long __thiscall BSTRING::QueryChCount(void)const",
    "public: unsigned char __thiscall COMM_DEVICE::SetXon(unsigned char)",
    "public: unsigned char __thiscall FILE_STREAM::ReadAt(unsigned char *,unsigned long,__int64,enum SEEKORIGIN,unsigned long *)",
    "public: static unsigned char __stdcall SYSTEM::RemoveNode(class FSNODE * *,unsigned char)",
    "public: class WSTRING * __thiscall WSTRING::Strlwr(void)",
    "public: void __thiscall BSTRING::DeleteChAt(unsigned long,unsigned long)",
    "public: static int __stdcall MBSTR::Stricmp(char *,char *)",
    "public: static class SCREEN * __stdcall SCREEN::Cast(class OBJECT const *)",
    "public: virtual unsigned char __thiscall MESSAGE::IsSuppressedMessage(void)",
    "public: unsigned char __thiscall KEYBOARD::IsKeyAvailable(unsigned char *)const",
    "public: unsigned char __thiscall COMM_DEVICE::Initialize(class PATH const *,unsigned char *)",
    "private: static unsigned char WSTRING::_UseConsoleConversions",
    "public: static char * __stdcall MBSTR::CharNextW(char *)",
    "public: virtual __thiscall CHKDSK_MESSAGE::~CHKDSK_MESSAGE(void)",
    "public: virtual unsigned char __thiscall MESSAGE::QueryStringInput(class WSTRING *)",
    "public: unsigned char __thiscall FSN_FILTER::Initialize(void)",
    "public: class ARRAY * __thiscall FSN_DIRECTORY::QueryFsnodeArray(class FSN_FILTER *)const",
    "public: __thiscall LONG_ARGUMENT::LONG_ARGUMENT(void)",
    "public: unsigned char __cdecl MESSAGE::DisplayMsg(unsigned long,enum MESSAGE_TYPE,unsigned long,char const *,...)",
    "public: unsigned char __thiscall CONT_MEM::Initialize(void *,unsigned long)",
    "public: unsigned char __thiscall WSTRING::operator>(class WSTRING const &)const",
    "public: __thiscall ARRAY::ARRAY(void)",
    "public: unsigned long __thiscall WSTRING::QueryByteCount(void)const",
    "public: unsigned char __thiscall TIMEINFO_ARGUMENT::Initialize(char *)",
    "public: static class FSN_FILE * __stdcall SYSTEM::MakeTemporaryFile(class WSTRING const *,class PATH const *)",
    "public: static void __stdcall SYSTEM::FreeLibraryHandle(void *)",
    "public: unsigned char __thiscall MESSAGE::LogMessage(class WSTRING const *)",
    "public: unsigned char __thiscall SCREEN::Initialize(void)",
    "public: virtual unsigned char __thiscall DSTRING::NewBuf(unsigned long)",
    "public: virtual void __cdecl PROGRAM::Fatal(unsigned long,unsigned long,char *,...)const",
    "public: static unsigned char __stdcall KEYBOARD::DisableBreakHandling(void)",
    "public: unsigned char __thiscall FLAG_ARGUMENT::Initialize(class WSTRING *)",
    "public: unsigned char __thiscall CLASS_DESCRIPTOR::Initialize(void)",
    "public: __thiscall BSTRING::BSTRING(class BSTRING const &)",
    "public: unsigned char __thiscall SORTED_LIST::Initialize(unsigned char)",
    "public: virtual __thiscall BITVECTOR::~BITVECTOR(void)",
    "public: __thiscall CONT_MEM::CONT_MEM(void)",
    "public: unsigned char __thiscall WSTRING::Initialize(class WSTRING const *,unsigned long,unsigned long)",
    "public: static int __stdcall MBSTR::Strcmpis(char *,char *)",
    "public: unsigned char __thiscall FSN_FILTER::SetTimeInfo(class TIMEINFO const *,enum FSN_TIME,unsigned short)",
    "protected: void __thiscall BSTRING::Construct(void)",
    "public: __thiscall KEYBOARD::KEYBOARD(void)",
    "public: __thiscall TIMEINFO::TIMEINFO(void)",
    "public: virtual unsigned char __thiscall STRING_ARRAY::Sort(unsigned char)",
    "public: class WSTRING * __thiscall ARGUMENT_LEXEMIZER::QueryInvalidArgument(void)",
    "public: virtual void __thiscall KEYBOARD::DoNotRestoreConsoleMode(void)",
    "public: virtual unsigned char __thiscall MESSAGE::WaitForUserSignal(void)",
    "public: class PATH * __thiscall PATH::QueryFullPath(void)const",
    "public: unsigned char __cdecl MESSAGE::LogMsg(unsigned long,char const *,...)",
    "public: unsigned char __thiscall WSTRING::QueryNumber(long *,unsigned long,unsigned long)const",
    "protected: __thiscall BSTRING::BSTRING(void)",
    "public: __thiscall BITVECTOR::BITVECTOR(void)",
    "public: unsigned long __thiscall BSTRING::Strchr(char,unsigned long)const",
    "public: static int __stdcall WSTRING::Stricmp(unsigned short *,unsigned short *)",
    "public: class WSTRING * __thiscall PATH::QueryGuidString(class WSTRING *,unsigned char *,class WSTRING *)",
    "public: virtual __thiscall STRING_ARGUMENT::~STRING_ARGUMENT(void)",
    "public: static void __stdcall WSTRING::ResetConversions(void)",
    "public: unsigned char __cdecl MESSAGE::DisplayMsg(unsigned long,char const *,...)",
    "public: unsigned char __thiscall PATH::SetName(class WSTRING const *)",
    "public: virtual __thiscall SCREEN::~SCREEN(void)",
    "protected: __thiscall WSTRING::WSTRING(void)",
    "public: static unsigned char __stdcall BASE_SYSTEM::QueryResourceStringV(class WSTRING *,unsigned long,char const *,char *)",
    "public: virtual __thiscall OBJECT::~OBJECT(void)",
    "public: unsigned char __thiscall SCREEN::SetCodePage(unsigned long)",
    "public: virtual unsigned char __thiscall FSTRING::NewBuf(unsigned long)",
    "public: virtual unsigned long __cdecl MESSAGE::SelectResponse(unsigned long,...)",
    "public: static void __stdcall WSTRING::SetOemConversions(void)",
    "public: static void __stdcall SYSTEM::DisplaySystemError(unsigned long,int)",
    "public: unsigned char __thiscall FSN_DIRECTORY::IsEmpty(void)const",
    "private: static unsigned char WSTRING::_UseAnsiConversions",
    "public: unsigned char __thiscall COMM_DEVICE::SetTimeOut(unsigned char)",
    "public: static unsigned char __stdcall SYSTEM::QueryLocalTimeFromUTime(class TIMEINFO const *,class TIMEINFO *)",
    "public: unsigned char __thiscall PATH::EndsWithDelimiter(void)const",
    "public: void __thiscall ARGUMENT_LEXEMIZER::SetAllowSwitchGlomming(unsigned char)",
    "public: virtual unsigned char __thiscall MESSAGE::SetDotsOnly(unsigned char)",
    "class MACHINE MachinePlatform",
    "public: class PATH * __thiscall PATH::QueryPath(void)const",
    "public: unsigned char __thiscall COMM_DEVICE::SetIdsr(unsigned char)",
    "const BDSTRING::`vftable'",
    "public: unsigned char __cdecl MESSAGE::Display(char const *,...)",
    "private: static int __stdcall WSTRING::CheckSpace(unsigned short *)",
    "public: unsigned char __thiscall MESSAGE::Initialize(void)",
    "public: __thiscall MESSAGE::MESSAGE(void)",
    "public: long __thiscall WSTRING::Strcmp(class WSTRING const *,unsigned long)const",
    "public: virtual unsigned char __thiscall MESSAGE::IsInAutoChk(void)",
    "public: class WSTRING & __thiscall WSTRING::operator=(class WSTRING const &)",
    "public: static class WSTRING * __stdcall SYSTEM::QueryEnvironmentVariable(class WSTRING const *)",
    "private: void __thiscall DSTRING::Construct(void)",
    "public: __thiscall HMEM::HMEM(void)",
    "public: unsigned char __thiscall PATH::IsDrive(void)const",
    "public: unsigned long __thiscall BITVECTOR::SetSize(unsigned long,enum BIT)",
    "public: unsigned long __thiscall WSTRING::SyncLength(void)",
    "public: __thiscall OBJECT::OBJECT(class OBJECT const &)",
    "public: virtual unsigned char __thiscall SORTED_LIST::DeleteAllMembers(void)",
    "public: __thiscall CLASS_DESCRIPTOR::CLASS_DESCRIPTOR(void)",
    "public: virtual __thiscall MULTIPLE_PATH_ARGUMENT::~MULTIPLE_PATH_ARGUMENT(void)",
    "public: virtual unsigned char __thiscall DSTRING::Resize(unsigned long)",
    "public: unsigned char __thiscall FSN_DIRECTORY::DeleteDirectory(void)",
    "public: unsigned char __thiscall CHKDSK_MESSAGE::Initialize(class STREAM *,class STREAM *,class STREAM *)",
    "public: static class FSN_FILE * __stdcall SYSTEM::QueryFile(class PATH const *,unsigned char,unsigned char *)",
    "public: unsigned char __thiscall KEYBOARD::Initialize(unsigned char,unsigned char)"
  ],
  "umandlg.dll": [
    "UManDlg"
  ],
  "umdmxfrm.dll": [
    "GetXformInfo"
  ],
  "umpnpmgr.dll": [
    "PNP_SetActiveService",
    "RegisterServiceNotification",
    "RegisterScmCallback",
    "PNP_GetDeviceListSize",
    "PNP_HwProfFlags",
    "DeleteServicePlugPlayRegKeys",
    "PNP_GetDeviceList",
    "ServiceEntry",
    "PNP_GetDeviceRegProp"
  ],
  "uniime.dll": [
    "UniSearchPhrasePredictionA",
    "UniSearchPhrasePredictionW"
  ],
  "unimdmat.dll": [
    "UmSetSpeakerPhoneState",
    "UmLogStringA",
    "UmHangupModem",
    "UmCloseModem",
    "UmMonitorModem",
    "UmInitModem",
    "UmDuplicateDeviceHandle",
    "UmGetDiagnostics",
    "UmInitializeModemDriver",
    "UmGenerateDigit",
    "UmWaveAction",
    "UmSetPassthroughMode",
    "UmOpenModem",
    "UmDialModem",
    "UmLogDiagnostics",
    "UmAnswerModem",
    "UmAbortCurrentModemCommand",
    "UmDeinitializeModemDriver",
    "UmIssueCommand"
  ],
  "uniplat.dll": [
    "SyncDeviceIoControl",
    "UnimodemNotifyTSP",
    "UmPlatformDeinitialize",
    "ResetCallCount",
    "StopMonitorThread",
    "ReinitOverStruct",
    "AllocateOverStructEx",
    "CreateOverStructPool",
    "MonitorHandle",
    "FreeUnimodemTimer",
    "DestroyOverStructPool",
    "StartMonitorThread",
    "UmPlatformInitialize",
    "CallBeginning",
    "CreateUnimodemTimer",
    "FreeOverStruct",
    "UnimodemWaitCommEventEx",
    "WinntIsWorkstation",
    "UnimodemDeviceIoControlEx",
    "CallEnding",
    "SetUnimodemTimer",
    "StopMonitoringHandle",
    "UnimodemReadFileEx",
    "UnimodemWriteFileEx",
    "UnimodemQueueUserAPC",
    "CancelUnimodemTimer"
  ],
  "untfs.dll": [
    "public: unsigned char __thiscall NTFS_EXTENT_LIST::QueryLcnFromVcn(class BIG_INT,class BIG_INT *,class BIG_INT *)const",
    "public: virtual unsigned char __thiscall NTFS_MFT_FILE::Read(void)",
    "public: virtual __thiscall RA_PROCESS_SD::~RA_PROCESS_SD(void)",
    "public: virtual __thiscall NTFS_REFLECTED_MASTER_FILE_TABLE::~NTFS_REFLECTED_MASTER_FILE_TABLE(void)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::AddSecurityDescriptorData(class NTFS_ATTRIBUTE *,void *,struct _SECURITY_ENTRY * *,unsigned long,enum _CANNED_SECURITY_TYPE,class NTFS_BITMAP *,unsigned char)",
    "public: __thiscall RA_PROCESS_SD::RA_PROCESS_SD(void)",
    "public: virtual __thiscall NTFS_BOOT_FILE::~NTFS_BOOT_FILE(void)",
    "public: __thiscall NTFS_ATTRIBUTE_DEFINITION_TABLE::NTFS_ATTRIBUTE_DEFINITION_TABLE(void)",
    "private: static void __stdcall NTFS_MFT_INFO::ComputeFileNameSignature(unsigned long,struct _FILE_NAME *,unsigned char * const)",
    "public: virtual __thiscall NTFS_ATTRIBUTE_RECORD::~NTFS_ATTRIBUTE_RECORD(void)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Initialize(class BIG_INT,class NTFS_MASTER_FILE_TABLE *)",
    "public: virtual __thiscall NTFS_FILE_RECORD_SEGMENT::~NTFS_FILE_RECORD_SEGMENT(void)",
    "ChkdskEx",
    "public: unsigned char __thiscall NTFS_LOG_FILE::Initialize(class NTFS_MASTER_FILE_TABLE *)",
    "public: struct _INDEX_ENTRY const * __thiscall NTFS_INDEX_TREE::GetNext(unsigned long *,unsigned char *,unsigned char)",
    "public: virtual unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Write(void)",
    "public: static unsigned char __stdcall NTFS_MFT_INFO::CompareFileName(void *,unsigned long,struct _FILE_NAME *,unsigned short *)",
    "public: unsigned char __thiscall NTFS_CLUSTER_RUN::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class BIG_INT,unsigned long,unsigned long)",
    "public: unsigned char __thiscall NTFS_SA::CreateElementaryStructures(class NTFS_BITMAP *,unsigned long,unsigned long,unsigned long,unsigned long,class NUMBER_SET const *,unsigned char,unsigned char,class MESSAGE *,struct BIOS_PARAMETER_BLOCK *,class WSTRING const *)",
    "public: unsigned char __thiscall NTFS_SA::Read(class MESSAGE *)",
    "public: static unsigned char __stdcall RA_PROCESS_SD::Initialize(class NTFS_SA *,class BIG_INT,class BIG_INT *,unsigned long *,class NTFS_FILE_RECORD_SEGMENT *,class NTFS_FILE_RECORD_SEGMENT *,void *,void *,class NTFS_MASTER_FILE_TABLE *)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::ReadAgain(class BIG_INT)",
    "long __stdcall NtfsUpcaseCompare(unsigned short const *,unsigned long,unsigned short const *,unsigned long,class NTFS_UPCASE_TABLE const *,unsigned char)",
    "public: virtual __thiscall NTFS_ATTRIBUTE_DEFINITION_TABLE::~NTFS_ATTRIBUTE_DEFINITION_TABLE(void)",
    "public: unsigned char __thiscall NTFS_BOOT_FILE::Initialize(class NTFS_MASTER_FILE_TABLE *)",
    "public: static unsigned char __stdcall NTFS_SA::IsDosName(struct _FILE_NAME const *)",
    "public: static unsigned char __stdcall RA_PROCESS_FILE::Initialize(class NTFS_SA *,class BIG_INT,class BIG_INT *,unsigned long *,class NTFS_FRS_STRUCTURE *,class NTFS_FRS_STRUCTURE *,class HMEM *,class HMEM *,void *,void *,class NTFS_ATTRIBUTE *,class NTFS_UPCASE_TABLE *)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::Save(class NTFS_FILE_RECORD_SEGMENT *)",
    "public: unsigned char __thiscall NTFS_SA::WriteRemainingBootCode(void)",
    "public: virtual __thiscall NTFS_ATTRIBUTE_LIST::~NTFS_ATTRIBUTE_LIST(void)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::Initialize(class LOG_IO_DP_DRIVE *,unsigned long,class NTFS_BITMAP *,class NTFS_UPCASE_TABLE *,unsigned long,class NTFS_FILE_RECORD_SEGMENT *,class WSTRING const *)",
    "public: unsigned char __thiscall NTFS_MASTER_FILE_TABLE::Extend(unsigned long)",
    "public: unsigned char __thiscall NTFS_BITMAP::Write(class NTFS_ATTRIBUTE *,class NTFS_BITMAP *)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Initialize(class BIG_INT,class NTFS_MFT_FILE *)",
    "public: static unsigned long __stdcall NTFS_SA::QuerySectorsInElementaryStructures(class DP_DRIVE const *,unsigned long,unsigned long,unsigned long,unsigned long)",
    "public: unsigned char __thiscall NTFS_EXTENT_LIST::Initialize(class BIG_INT,class BIG_INT)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::QueryAttributeByOrdinal(class NTFS_ATTRIBUTE *,unsigned char *,unsigned long,unsigned long)",
    "public: virtual __thiscall NTFS_UPCASE_TABLE::~NTFS_UPCASE_TABLE(void)",
    "public: void __thiscall NTFS_CLUSTER_RUN::Relocate(class BIG_INT)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::QueryFileSizes(class BIG_INT *,class BIG_INT *,unsigned char *)",
    "Recover",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Create(struct _STANDARD_INFORMATION const *,unsigned short)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::Write(void)",
    "public: __thiscall NTFS_CLUSTER_RUN::NTFS_CLUSTER_RUN(void)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE::Initialize(class LOG_IO_DP_DRIVE *,unsigned long,class NTFS_EXTENT_LIST const *,class BIG_INT,class BIG_INT,unsigned long,class WSTRING const *,unsigned short)",
    "public: unsigned char __thiscall NTFS_BITMAP::Initialize(class BIG_INT,unsigned char,class LOG_IO_DP_DRIVE *,unsigned long)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::Initialize(class MEM *,class NTFS_ATTRIBUTE *,class BIG_INT,unsigned long,class BIG_INT,unsigned long,class NTFS_UPCASE_TABLE *)",
    "InitializeUntfs",
    "public: __thiscall NTFS_REFLECTED_MASTER_FILE_TABLE::NTFS_REFLECTED_MASTER_FILE_TABLE(void)",
    "public: static unsigned long __stdcall NTFS_SA::QueryDefaultClustersPerIndexBuffer(class DP_DRIVE const *,unsigned long)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class BIG_INT,unsigned long,class BIG_INT,unsigned long,class NTFS_UPCASE_TABLE *,unsigned long)",
    "public: unsigned char __thiscall NTFS_UPCASE_TABLE::Initialize(class NTFS_ATTRIBUTE *)",
    "public: static unsigned char __stdcall NTFS_MFT_INFO::QueryFlags(void *,unsigned short)",
    "public: unsigned char __thiscall NTFS_UPCASE_FILE::Initialize(class NTFS_MASTER_FILE_TABLE *)",
    "public: virtual __thiscall NTFS_BITMAP::~NTFS_BITMAP(void)",
    "public: virtual __thiscall NTFS_LOG_FILE::~NTFS_LOG_FILE(void)",
    "public: virtual __thiscall NTFS_BITMAP_FILE::~NTFS_BITMAP_FILE(void)",
    "public: unsigned char __thiscall NTFS_BITMAP::IsAllocated(class BIG_INT,class BIG_INT)const",
    "public: unsigned char __thiscall NTFS_REFLECTED_MASTER_FILE_TABLE::Initialize(class NTFS_MASTER_FILE_TABLE *)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::AddFileNameAttribute(struct _FILE_NAME *)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE_LIST::ReadList(void)",
    "public: __thiscall NTFS_FRS_STRUCTURE::NTFS_FRS_STRUCTURE(void)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::InsertEntry(unsigned long,void *,struct _MFT_SEGMENT_REFERENCE,unsigned char)",
    "public: void __thiscall NTFS_INDEX_TREE::ResetIterator(void)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::QueryEntry(unsigned long,void *,unsigned long,struct _INDEX_ENTRY * *,class NTFS_INDEX_BUFFER * *,unsigned char *)",
    "public: unsigned short __thiscall NTFS_SA::QueryVolumeFlagsAndLabel(unsigned char *,unsigned char *,unsigned char *,class WSTRING *)",
    "Chkdsk",
    "public: virtual unsigned char __thiscall NTFS_SA::Read(void)",
    "public: __thiscall NTFS_FILE_RECORD_SEGMENT::NTFS_FILE_RECORD_SEGMENT(void)",
    "public: unsigned char __thiscall NTFS_BITMAP::IsFree(class BIG_INT,class BIG_INT)const",
    "private: static void __stdcall NTFS_MFT_INFO::ComputeDupInfoSignature(struct _DUPLICATED_INFORMATION *,unsigned char * const)",
    "public: virtual __thiscall NTFS_INDEX_TREE::~NTFS_INDEX_TREE(void)",
    "public: virtual __thiscall RA_PROCESS_FILE::~RA_PROCESS_FILE(void)",
    "public: virtual __thiscall NTFS_SA::~NTFS_SA(void)",
    "public: __thiscall NTFS_BAD_CLUSTER_FILE::NTFS_BAD_CLUSTER_FILE(void)",
    "public: virtual unsigned char __thiscall NTFS_FRS_STRUCTURE::Read(void)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::ReadSet(class TLINK *)",
    "public: __thiscall RA_PROCESS_FILE::RA_PROCESS_FILE(void)",
    "public: unsigned char __thiscall NTFS_BAD_CLUSTER_FILE::Initialize(class NTFS_MASTER_FILE_TABLE *)",
    "public: unsigned char __thiscall NTFS_MFT_FILE::Flush(void)",
    "public: virtual __thiscall NTFS_BAD_CLUSTER_FILE::~NTFS_BAD_CLUSTER_FILE(void)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Initialize(class BIG_INT,unsigned long,class NTFS_MASTER_FILE_TABLE *)",
    "public: unsigned char __thiscall NTFS_LOG_FILE::CreateDataAttribute(class BIG_INT,unsigned long,class NTFS_BITMAP *)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Flush(class NTFS_BITMAP *,class NTFS_INDEX_TREE *,unsigned char)",
    "public: virtual unsigned char __thiscall NTFS_ATTRIBUTE::Resize(class BIG_INT,class NTFS_BITMAP *)",
    "public: unsigned char __thiscall NTFS_MASTER_FILE_TABLE::AllocateFileRecordSegment(class BIG_INT *,unsigned char)",
    "public: unsigned char __thiscall NTFS_MFT_INFO::Initialize(class BIG_INT,class NTFS_UPCASE_TABLE *,unsigned char,unsigned char,unsigned __int64)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::QueryAttribute(class NTFS_ATTRIBUTE *,unsigned char *,unsigned long,class WSTRING const *)",
    "public: __thiscall NTFS_EXTENT_LIST::NTFS_EXTENT_LIST(void)",
    "public: __thiscall NTFS_BITMAP::NTFS_BITMAP(void)",
    "public: __thiscall NTFS_BITMAP_FILE::NTFS_BITMAP_FILE(void)",
    "public: virtual unsigned char __thiscall NTFS_ATTRIBUTE::Write(void const *,class BIG_INT,unsigned long,unsigned long *,class NTFS_BITMAP *)",
    "public: void * __thiscall NTFS_FRS_STRUCTURE::GetNextAttributeRecord(void const *,class MESSAGE *,unsigned char *)",
    "public: __thiscall NTFS_ATTRIBUTE_LIST::NTFS_ATTRIBUTE_LIST(void)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE_RECORD::QueryExtentList(class NTFS_EXTENT_LIST *)const",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::AddSecurityDescriptor(enum _CANNED_SECURITY_TYPE,class NTFS_BITMAP *)",
    "public: __thiscall NTFS_UPCASE_FILE::NTFS_UPCASE_FILE(void)",
    "public: unsigned char __thiscall NTFS_SA::SetVolumeFlag(unsigned short,unsigned char *)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE::Initialize(class LOG_IO_DP_DRIVE *,unsigned long,void const *,unsigned long,unsigned long,class WSTRING const *,unsigned short)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE::Read(void *,class BIG_INT,unsigned long,unsigned long *)",
    "Extend",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE_LIST::QueryNextEntry(struct _ATTR_LIST_CURR_ENTRY *,unsigned long *,class BIG_INT *,struct _MFT_SEGMENT_REFERENCE *,unsigned short *,class WSTRING *)const",
    "public: __thiscall NTFS_INDEX_TREE::NTFS_INDEX_TREE(void)",
    "public: __thiscall NTFS_MFT_INFO::NTFS_MFT_INFO(void)",
    "public: unsigned char __thiscall NTFS_MFT_INFO::Initialize(void)",
    "public: unsigned char __thiscall NTFS_SA::QueryFrsFromPath(class WSTRING const *,class NTFS_MASTER_FILE_TABLE *,class NTFS_BITMAP *,class NTFS_FILE_RECORD_SEGMENT *,unsigned char *,unsigned char *)",
    "public: unsigned char __thiscall NTFS_SA::QueryClusterFactor(void)const",
    "public: virtual unsigned char __thiscall NTFS_ATTRIBUTE::SetSparse(class BIG_INT,class NTFS_BITMAP *)",
    "public: virtual __thiscall NTFS_FRS_STRUCTURE::~NTFS_FRS_STRUCTURE(void)",
    "public: unsigned char __thiscall NTFS_BITMAP_FILE::Initialize(class NTFS_MASTER_FILE_TABLE *)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE_RECORD::QueryName(class WSTRING *)const",
    "public: unsigned char __thiscall NTFS_EXTENT_LIST::AddExtent(class BIG_INT,class BIG_INT,class BIG_INT)",
    "public: __thiscall NTFS_BOOT_FILE::NTFS_BOOT_FILE(void)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::SafeQueryAttribute(unsigned long,class NTFS_ATTRIBUTE *,class NTFS_ATTRIBUTE *)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Initialize(void)",
    "public: unsigned char __thiscall NTFS_MFT_FILE::Initialize(class LOG_IO_DP_DRIVE *,class BIG_INT,unsigned long,unsigned long,class BIG_INT,class NTFS_BITMAP *,class NTFS_UPCASE_TABLE *)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::CopyIterator(class NTFS_INDEX_TREE *)",
    "public: __thiscall NTFS_MFT_FILE::NTFS_MFT_FILE(void)",
    "public: __thiscall NTFS_ATTRIBUTE_RECORD::NTFS_ATTRIBUTE_RECORD(void)",
    "public: virtual unsigned char __thiscall NTFS_ATTRIBUTE::MakeNonresident(class NTFS_BITMAP *)",
    "public: __thiscall NTFS_ATTRIBUTE::NTFS_ATTRIBUTE(void)",
    "public: unsigned long __thiscall NTFS_EXTENT_LIST::QueryNumberOfExtents(void)const",
    "public: virtual __thiscall NTFS_UPCASE_FILE::~NTFS_UPCASE_FILE(void)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::QueryAttributeListAttribute(class NTFS_ATTRIBUTE *,unsigned char *)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::QueryAttributeList(class NTFS_ATTRIBUTE_LIST *)",
    "public: unsigned char __thiscall NTFS_SA::Initialize(class LOG_IO_DP_DRIVE *,class MESSAGE *,class BIG_INT,class BIG_INT)",
    "public: unsigned char __thiscall NTFS_SA::TakeCensus(class NTFS_MASTER_FILE_TABLE *,unsigned long,struct NTFS_CENSUS_INFO *)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::Initialize(class MEM *,class NTFS_ATTRIBUTE *,class BIG_INT,unsigned long,unsigned long,class BIG_INT,unsigned long,class NTFS_UPCASE_TABLE *)",
    "Format",
    "public: virtual __thiscall NTFS_CLUSTER_RUN::~NTFS_CLUSTER_RUN(void)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::QueryFileReference(unsigned long,void *,unsigned long,struct _MFT_SEGMENT_REFERENCE *,unsigned char *)",
    "public: __thiscall NTFS_SA::NTFS_SA(void)",
    "public: unsigned char __thiscall NTFS_EXTENT_LIST::QueryExtent(unsigned long,class BIG_INT *,class BIG_INT *,class BIG_INT *)const",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::IsAttributePresent(unsigned long,class WSTRING const *,unsigned char)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::Initialize(unsigned long,class LOG_IO_DP_DRIVE *,unsigned long,class NTFS_BITMAP *,class NTFS_UPCASE_TABLE *,unsigned long,unsigned long,unsigned long,class WSTRING const *)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE_DEFINITION_TABLE::Initialize(class NTFS_MASTER_FILE_TABLE *,unsigned char)",
    "public: virtual unsigned char __thiscall NTFS_ATTRIBUTE::InsertIntoFile(class NTFS_FILE_RECORD_SEGMENT *,class NTFS_BITMAP *)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::ReadNext(class BIG_INT)",
    "public: static struct _MFT_SEGMENT_REFERENCE __stdcall NTFS_MFT_INFO::QuerySegmentReference(void *)",
    "public: virtual __thiscall NTFS_ATTRIBUTE::~NTFS_ATTRIBUTE(void)",
    "FormatEx",
    "public: struct _ATTRIBUTE_LIST_ENTRY const * __thiscall NTFS_ATTRIBUTE_LIST::GetNextAttributeListEntry(struct _ATTRIBUTE_LIST_ENTRY const *)const",
    "public: __thiscall NTFS_LOG_FILE::NTFS_LOG_FILE(void)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE_RECORD::Initialize(class IO_DP_DRIVE *,void *)",
    "public: virtual __thiscall NTFS_EXTENT_LIST::~NTFS_EXTENT_LIST(void)",
    "public: static unsigned char __stdcall NTFS_SA::IsNtfsName(struct _FILE_NAME const *)",
    "public: virtual __thiscall NTFS_MFT_FILE::~NTFS_MFT_FILE(void)",
    "public: __thiscall NTFS_UPCASE_TABLE::NTFS_UPCASE_TABLE(void)",
    "public: static unsigned char __stdcall NTFS_MFT_INFO::CompareDupInfo(void *,struct _FILE_NAME *)",
    "public: virtual __thiscall NTFS_MFT_INFO::~NTFS_MFT_INFO(void)"
  ],
  "upnp.dll": [
    "DllCanUnloadNow",
    "HrRehydratorInvokeServiceAction",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer",
    "HrRehydratorCreateServiceObject"
  ],
  "upnphost.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer",
    "ServiceMain"
  ],
  "upnpui.dll": [
    "IsUPnPUIInstalled",
    "DllCanUnloadNow",
    "UnInstallUPnPUI",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer",
    "InstallUPnPUI"
  ],
  "ureg.dll": [
    "public: unsigned char __thiscall REGISTRY::SaveKeyToFile(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class WSTRING const *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::LoadHive(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class WSTRING const *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::IsAccessAllowed(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,unsigned long,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::CreateKey(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class REGISTRY_KEY_INFO *,unsigned long *,unsigned char)",
    "public: unsigned char __thiscall REGISTRY_KEY_INFO::Initialize(class WSTRING const *,class WSTRING const *,unsigned long,class WSTRING const *,struct _SECURITY_ATTRIBUTES *)",
    "public: unsigned char __thiscall REGISTRY::UnLoadHive(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::DeleteKey(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class WSTRING const *,unsigned long *)",
    "InitializeUreg",
    "public: unsigned char __thiscall REGISTRY::QueryValues(enum _PREDEFINED_KEY,class WSTRING const *,class WSTRING const *,class ARRAY *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::EnableRootNotification(enum _PREDEFINED_KEY,void *,unsigned long,unsigned char)",
    "public: __thiscall REGISTRY_KEY_INFO::REGISTRY_KEY_INFO(void)",
    "public: unsigned char __thiscall REGISTRY::DoesKeyExist(enum _PREDEFINED_KEY,class WSTRING const *,class WSTRING const *,unsigned long *)",
    "public: __thiscall REGISTRY::REGISTRY(void)",
    "public: unsigned char __thiscall REGISTRY::QueryKeyInfo(enum _PREDEFINED_KEY,class WSTRING const *,class WSTRING const *,class REGISTRY_KEY_INFO *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::QuerySubKeysInfo(enum _PREDEFINED_KEY,class WSTRING const *,class WSTRING const *,class ARRAY *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::Initialize(class WSTRING const *,unsigned long *)",
    "public: __thiscall REGISTRY_VALUE_ENTRY::REGISTRY_VALUE_ENTRY(void)",
    "public: unsigned char __thiscall REGISTRY::SetKeySecurity(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,unsigned long,void *,unsigned long *,unsigned char)",
    "public: unsigned char __thiscall REGISTRY::UpdateKeyInfo(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::DeleteValueEntry(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class WSTRING const *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::AddValueEntry(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class REGISTRY_VALUE_ENTRY const *,unsigned char,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY_VALUE_ENTRY::Initialize(class WSTRING const *,unsigned long,enum _REG_TYPE,unsigned char const *,unsigned long)",
    "public: unsigned char __thiscall REGISTRY::RestoreKeyFromFile(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class WSTRING const *,unsigned char,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::DoesValueExist(enum _PREDEFINED_KEY,class WSTRING const *,class WSTRING const *,class WSTRING const *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::QueryKeySecurity(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO const *,unsigned long,void * *,unsigned long *)",
    "public: virtual __thiscall REGISTRY::~REGISTRY(void)"
  ],
  "url.dll": [
    "MIMEAssociationDialogW",
    "FileProtocolHandlerA",
    "MailToProtocolHandler",
    "AutodialHookCallback",
    "MIMEAssociationDialogA",
    "AddMIMEFileTypesPS",
    "TranslateURLA",
    "TelnetProtocolHandler",
    "TelnetProtocolHandlerA",
    "URLAssociationDialogA",
    "TranslateURLW",
    "MailToProtocolHandlerA",
    "FileProtocolHandler",
    "InetIsOffline",
    "OpenURLA",
    "URLAssociationDialogW",
    "OpenURL"
  ],
  "urlmon.dll": [
    "CoInternetCanonicalizeIUri",
    "RegisterBindStatusCallback",
    "CoInternetCreateSecurityManager",
    "HlinkGoForward",
    "ShouldDisplayPunycodeForUri",
    "ShowTrustAlertDialog",
    "CoInternetGetSecurityUrlEx",
    "URLDownloadA",
    "CoInternetGetSession",
    "CoInternetCreateZoneManager",
    "CoInternetParseUrl",
    "CreateUriWithFragment",
    "CoInternetGetProtocolFlags",
    "WriteHitLogging",
    "ZonesReInit",
    "IsAsyncMoniker",
    "SetSoftwareUpdateAdvertisementState",
    "FindMediaType",
    "RegisterFormatEnumerator",
    "GetAddSitesFileUrl",
    "CoInternetQueryInfo",
    "HlinkSimpleNavigateToString",
    "GetPropertyName",
    "URLDownloadToCacheFileW",
    "QueryAssociations",
    "URLDownloadToCacheFileA",
    "DllCanUnloadNow",
    "URLOpenPullStreamW",
    "HlinkSimpleNavigateToMoniker",
    "GetIDNFlagsForUri",
    "FaultInIEFeature",
    "CreateURLMonikerEx2",
    "CoInternetCombineIUri",
    "GetMarkOfTheWeb",
    "GetPortFromUrlScheme",
    "CreateURLMonikerEx",
    "CoInternetFeatureSettingsChanged",
    "CDLGetLongPathNameA",
    "CoInternetCombineUrl",
    "URLDownloadToFileW",
    "IsValidURL",
    "CreateUriFromMultiByteString",
    "QueryClsidAssociation",
    "PrivateCoInstall",
    "RevokeFormatEnumerator",
    "CreateIUriBuilder",
    "GetPropertyFromName",
    "CoInstall",
    "MkParseDisplayNameEx",
    "DllGetClassObject",
    "URLOpenBlockingStreamW",
    "GetSoftwareUpdateInfo",
    "RevokeBindStatusCallback",
    "GetClassURL",
    "CopyStgMedium",
    "URLOpenBlockingStreamA",
    "IsJITInProgress",
    "IsLoggingEnabledA",
    "CoInternetIsFeatureEnabled",
    "DllInstall",
    "IsStringProperty",
    "DllUnregisterServer",
    "IEInstallScope",
    "CreateURLMoniker",
    "URLDownloadToFileA",
    "URLOpenStreamA",
    "URLOpenStreamW",
    "CoInternetCompareUrl",
    "IsLoggingEnabledW",
    "URLDownloadW",
    "GetComponentIDFromCLSSPEC",
    "InstallFlash",
    "RegisterMediaTypeClass",
    "HlinkNavigateMoniker",
    "CoInternetIsFeatureEnabledForUrl",
    "CompatFlagsFromClsid",
    "IntlPercentEncodeNormalize",
    "ShouldShowIntranetWarningSecband",
    "CreateFormatEnumerator",
    "ObtainUserAgentString",
    "HlinkNavigateString",
    "CoInternetSetFeatureEnabled",
    "CopyBindInfo",
    "RegisterMediaTypes",
    "UrlMkBuildVersion",
    "IsIntranetAvailable",
    "HlinkGoBack",
    "CreateUriPriv",
    "DllRegisterServerEx",
    "GetLabelsFromNamedHost",
    "IsDWORDProperty",
    "CreateAsyncBindCtxEx",
    "GetClassFileOrMime",
    "ResetUrlmonLanguageData",
    "CoInternetParseIUri",
    "CompareSecurityIds",
    "CreateAsyncBindCtx",
    "UrlMkGetSessionOption",
    "AsyncGetClassBits",
    "DllRegisterServer",
    "FindMimeFromData",
    "CoInternetIsFeatureZoneElevationEnabled",
    "CoInternetGetSecurityUrl",
    "AsyncInstallDistributionUnit",
    "URLOpenPullStreamA",
    "CreateUri",
    "CoInternetIsFeatureEnabledForIUri",
    "BindAsyncMoniker",
    "CDLGetLongPathNameW",
    "CoInternetCombineUrlEx",
    "UrlMkSetSessionOption",
    "ReleaseBindInfo",
    "Extract",
    "CoGetClassObjectFromURL",
    "FindMediaTypeClass",
    "GetIUriPriv",
    "GetUrlmonThreadNotificationHwnd"
  ],
  "usbmon.dll": [
    "DllMain",
    "InitializePrintMonitor"
  ],
  "user32.dll": [
    "LoadStringA",
    "MessageBoxIndirectA",
    "EndTask",
    "SystemParametersInfoA",
    "DefMDIChildProcW",
    "CascadeChildWindows",
    "PaintMenuBar",
    "PostQuitMessage",
    "DdeNameService",
    "ArrangeIconicWindows",
    "SetDlgItemTextW",
    "ShowScrollBar",
    "GetCaretBlinkTime",
    "CreateDialogParamA",
    "SetWindowStationUser",
    "GetProcessDefaultLayout",
    "GetAltTabInfoA",
    "CallMsgFilter",
    "CreateDesktopA",
    "ReleaseDC",
    "GetMenuItemInfoW",
    "DialogBoxParamW",
    "CheckDlgButton",
    "EndMenu",
    "SetMenuDefaultItem",
    "CreateCursor",
    "ScrollWindow",
    "GetMenuItemID",
    "GetRawInputBuffer",
    "User32InitializeImmEntryTable",
    "GetAppCompatFlags",
    "RegisterDeviceNotificationA",
    "MessageBeep",
    "PtInRect",
    "PostThreadMessageW",
    "LoadStringW",
    "keybd_event",
    "QueryUserCounters",
    "QuerySendMessage",
    "SetDlgItemTextA",
    "SetWindowLongW",
    "ToUnicodeEx",
    "ValidateRgn",
    "SendMessageA",
    "WinHelpW",
    "wsprintfA",
    "GetFocus",
    "PostMessageW",
    "AllowSetForegroundWindow",
    "PackDDElParam",
    "BroadcastSystemMessageExW",
    "CharUpperA",
    "SetDebugErrorLevel",
    "DdeImpersonateClient",
    "CsrBroadcastSystemMessageExW",
    "ToAsciiEx",
    "SetRectEmpty",
    "GetKeyboardType",
    "GetWindow",
    "SetPropW",
    "GetCursorPos",
    "FindWindowA",
    "GetUpdateRgn",
    "PrivateExtractIconsA",
    "ExitWindowsEx",
    "GetMenuBarInfo",
    "MsgWaitForMultipleObjects",
    "GetClipCursor",
    "CreateDialogIndirectParamW",
    "CreateMenu",
    "DefWindowProcW",
    "GetKeyboardLayoutNameW",
    "GetMessagePos",
    "GetWindowModuleFileNameW",
    "GetSubMenu",
    "UpdatePerUserSystemParameters",
    "SetWindowPlacement",
    "GetQueueStatus",
    "AlignRects",
    "FindWindowW",
    "GetSysColorBrush",
    "GetInputDesktop",
    "SendMessageTimeoutA",
    "GetGUIThreadInfo",
    "ChangeMenuA",
    "TabbedTextOutA",
    "DdeSetUserHandle",
    "LockSetForegroundWindow",
    "EnableMenuItem",
    "CalcMenuBar",
    "EnumDisplaySettingsW",
    "SetSystemTimer",
    "SetWindowTextW",
    "GetUserObjectInformationA",
    "DdeGetLastError",
    "CharUpperBuffW",
    "GetRawInputDeviceList",
    "MessageBoxExA",
    "PrivateExtractIconsW",
    "SetCursor",
    "ChildWindowFromPointEx",
    "TranslateMessage",
    "GetAltTabInfo",
    "Win32PoolAllocationStats",
    "MapVirtualKeyExA",
    "ResolveDesktopForWOW",
    "DragDetect",
    "GetKeyNameTextA",
    "GrayStringA",
    "GetWindowModuleFileNameA",
    "GetParent",
    "SetClipboardData",
    "ToAscii",
    "GetRawInputData",
    "CheckMenuRadioItem",
    "SetWinEventHook",
    "FreeDDElParam",
    "EnumWindowStationsW",
    "RegisterUserApiHook",
    "WaitForInputIdle",
    "WindowFromDC",
    "GetTopWindow",
    "CharLowerA",
    "MapVirtualKeyExW",
    "DdeInitializeW",
    "ScrollWindowEx",
    "UnionRect",
    "MenuWindowProcW",
    "InSendMessage",
    "CliImmSetHotKey",
    "FlashWindow",
    "GetClassNameA",
    "LoadKeyboardLayoutA",
    "SetClassLongW",
    "OpenWindowStationA",
    "EnumDisplayDevicesA",
    "MenuItemFromPoint",
    "IsCharAlphaA",
    "BeginPaint",
    "LoadCursorA",
    "CharLowerW",
    "UnhookWindowsHook",
    "GetWindowRect",
    "IsDialogMessageA",
    "SetLastErrorEx",
    "DialogBoxIndirectParamAorW",
    "MapDialogRect",
    "DisableProcessWindowsGhosting",
    "GetCapture",
    "ReuseDDElParam",
    "CopyAcceleratorTableW",
    "CreateDesktopW",
    "DefFrameProcA",
    "RemoveMenu",
    "ShowWindowAsync",
    "GetClassInfoA",
    "SetCaretPos",
    "CharToOemW",
    "DlgDirListComboBoxW",
    "OpenIcon",
    "UnlockWindowStation",
    "PrivateSetRipFlags",
    "DdeUnaccessData",
    "GetPropA",
    "GetClipboardData",
    "MonitorFromWindow",
    "PaintDesktop",
    "CharUpperW",
    "UnpackDDElParam",
    "VkKeyScanExW",
    "EnumPropsW",
    "SwapMouseButton",
    "ClientThreadSetup",
    "DdeGetData",
    "EnumPropsExW",
    "DdeFreeDataHandle",
    "EditWndProc",
    "GetActiveWindow",
    "CreateDialogIndirectParamA",
    "DdeEnableCallback",
    "LoadKeyboardLayoutEx",
    "GetKeyNameTextW",
    "GetPropW",
    "DdeConnectList",
    "CharNextExA",
    "DefFrameProcW",
    "DrawMenuBarTemp",
    "LoadMenuIndirectW",
    "SetScrollRange",
    "GetThreadDesktop",
    "SetMenuItemInfoA",
    "CharNextA",
    "RegisterHotKey",
    "DdePostAdvise",
    "LoadMenuIndirectA",
    "CharLowerBuffW",
    "SetScrollInfo",
    "EndDeferWindowPos",
    "RemovePropA",
    "DdeFreeStringHandle",
    "WindowFromPoint",
    "GetRawInputDeviceInfoA",
    "GetMessageA",
    "ReasonCodeNeedsComment",
    "CloseDesktop",
    "EnterReaderModeHelper",
    "IsWindowUnicode",
    "CallNextHookEx",
    "SetDeskWallpaper",
    "MessageBoxW",
    "LoadIconW",
    "GetMonitorInfoA",
    "LookupIconIdFromDirectoryEx",
    "GetOpenClipboardWindow",
    "RegisterSystemThread",
    "PrivateSetDbgTag",
    "UnhookWindowsHookEx",
    "OffsetRect",
    "IsCharLowerW",
    "GetWindowLongA",
    "EnumWindows",
    "IsGUIThread",
    "SetMenuInfo",
    "SendMessageCallbackW",
    "DefDlgProcA",
    "ChangeClipboardChain",
    "SetForegroundWindow",
    "GetMenuDefaultItem",
    "SetThreadDesktop",
    "IMPGetIMEW",
    "ReleaseCapture",
    "EnumDisplaySettingsExW",
    "GetWindowTextW",
    "SetWindowLongA",
    "RegisterMessagePumpHook",
    "SetKeyboardState",
    "InvalidateRgn",
    "LoadMenuA",
    "GetKeyboardLayout",
    "SetClipboardViewer",
    "CharToOemBuffW",
    "HiliteMenuItem",
    "SendInput",
    "DlgDirSelectComboBoxExW",
    "ChangeDisplaySettingsW",
    "CreateDialogIndirectParamAorW",
    "SetCaretBlinkTime",
    "IsChild",
    "TrackMouseEvent",
    "GetAltTabInfoW",
    "LoadMenuW",
    "GetSystemMenu",
    "LoadCursorFromFileA",
    "GetNextDlgTabItem",
    "SetWindowWord",
    "RealGetWindowClass",
    "GetMenuInfo",
    "VkKeyScanW",
    "DlgDirListA",
    "wvsprintfA",
    "EndDialog",
    "AttachThreadInput",
    "OpenWindowStationW",
    "GetWindowTextA",
    "OemToCharW",
    "RegisterDeviceNotificationW",
    "CreateSystemThreads",
    "SetUserObjectInformationA",
    "UnhookWinEvent",
    "BuildReasonArray",
    "OemToCharBuffA",
    "MsgWaitForMultipleObjectsEx",
    "GetDesktopWindow",
    "DeferWindowPos",
    "LoadBitmapW",
    "DragObject",
    "LoadBitmapA",
    "ReasonCodeNeedsBugID",
    "GetDlgItem",
    "RegisterTasklist",
    "ChangeDisplaySettingsA",
    "CheckRadioButton",
    "FlashWindowEx",
    "IsServerSideWindow",
    "DrawCaption",
    "RegisterClassA",
    "DrawIcon",
    "EqualRect",
    "GetClassLongW",
    "DestroyMenu",
    "UnregisterDeviceNotification",
    "DdeReconnect",
    "LoadAcceleratorsA",
    "VkKeyScanA",
    "DlgDirSelectComboBoxExA",
    "SwitchDesktop",
    "ShowStartGlass",
    "SetSystemMenu",
    "GetSysColor",
    "PrivateExtractIconExA",
    "GetLayeredWindowAttributes",
    "RegisterLogonProcess",
    "CharPrevW",
    "DeleteMenu",
    "DrawFocusRect",
    "wvsprintfW",
    "GetRawInputDeviceInfoW",
    "GetClipboardViewer",
    "OemToCharBuffW",
    "MapVirtualKeyA",
    "FindWindowExA",
    "WCSToMBEx",
    "WaitMessage",
    "IsWindow",
    "CopyRect",
    "GetIconInfo",
    "MonitorFromRect",
    "DrawEdge",
    "MapVirtualKeyW",
    "GetCursorFrameInfo",
    "DdeQueryConvInfo",
    "GetKeyboardLayoutNameA",
    "SetMenuItemBitmaps",
    "LockWindowUpdate",
    "InvalidateRect",
    "DdeDisconnect",
    "IMPQueryIMEW",
    "SetFocus",
    "GetRegisteredRawInputDevices",
    "GetReasonTitleFromReasonCode",
    "DrawIconEx",
    "GetTitleBarInfo",
    "DrawTextExW",
    "RealChildWindowFromPoint",
    "MessageBoxExW",
    "DestroyIcon",
    "OpenClipboard",
    "SetLogonNotifyWindow",
    "GetWindowTextLengthW",
    "LoadAcceleratorsW",
    "SetUserObjectSecurity",
    "CharPrevExA",
    "RegisterClassW",
    "PeekMessageW",
    "SetDoubleClickTime",
    "IsClipboardFormatAvailable",
    "IsMenu",
    "VRipOutput",
    "IMPGetIMEA",
    "EnumPropsExA",
    "GetScrollInfo",
    "DefDlgProcW",
    "IsIconic",
    "RegisterClipboardFormatA",
    "ScreenToClient",
    "IMPSetIMEA",
    "SetProcessWindowStation",
    "GetWindowInfo",
    "DrawStateW",
    "ShowCaret",
    "DeregisterShellHookWindow",
    "WINNLSGetEnableStatus",
    "MapWindowPoints",
    "CtxInitUser32",
    "BringWindowToTop",
    "CountClipboardFormats",
    "LookupIconIdFromDirectory",
    "AnimateWindow",
    "IsWindowInDestroy",
    "GetSystemMetrics",
    "GetCursorInfo",
    "GetMonitorInfoW",
    "CreateCaret",
    "MB_GetString",
    "IsWinEventHookInstalled",
    "RegisterServicesProcess",
    "DrawMenuBar",
    "UserClientDllInitialize",
    "UserHandleGrantAccess",
    "CreateAcceleratorTableW",
    "GetMenuItemInfoA",
    "DlgDirListComboBoxA",
    "GetWindowThreadProcessId",
    "CreateMDIWindowA",
    "IMPQueryIMEA",
    "DestroyReasons",
    "GetProgmanWindow",
    "PeekMessageA",
    "SubtractRect",
    "ModifyMenuW",
    "DlgDirListW",
    "GetDC",
    "IsCharUpperW",
    "DdeCreateDataHandle",
    "InsertMenuW",
    "EnumDesktopsW",
    "CallWindowProcA",
    "GetProcessWindowStation",
    "InsertMenuItemA",
    "RealGetWindowClassA",
    "CallMsgFilterW",
    "EnableWindow",
    "OpenDesktopA",
    "GetMessageExtraInfo",
    "SetClassWord",
    "MoveWindow",
    "GetKeyState",
    "GetMenuItemRect",
    "DdeUninitialize",
    "SetRect",
    "GetMessageTime",
    "GetMenuStringA",
    "CopyImage",
    "DlgDirSelectExA",
    "InsertMenuItemW",
    "AnyPopup",
    "DialogBoxIndirectParamW",
    "ReplyMessage",
    "DrawFrame",
    "InternalGetWindowText",
    "GetNextDlgGroupItem",
    "BroadcastSystemMessageA",
    "ActivateKeyboardLayout",
    "PrintWindow",
    "CloseWindow",
    "DdeQueryStringA",
    "GetClassInfoExW",
    "InsertMenuA",
    "ImpersonateDdeClientWindow",
    "EnumDisplaySettingsExA",
    "SetWindowsHookExA",
    "CreateIconFromResource",
    "DdeGetQualityOfService",
    "SetTimer",
    "InflateRect",
    "IsDlgButtonChecked",
    "DialogBoxIndirectParamA",
    "SetMenu",
    "SetScrollPos",
    "AppendMenuA",
    "GetTaskmanWindow",
    "RegisterClassExW",
    "EnumWindowStationsA",
    "DrawTextW",
    "CreateWindowStationA",
    "DrawTextA",
    "InitializeWin32EntryTable",
    "GetMessageW",
    "BroadcastSystemMessageW",
    "GrayStringW",
    "CascadeWindows",
    "LoadLocalFonts",
    "CallWindowProcW",
    "ChildWindowFromPoint",
    "DeviceEventWorker",
    "GetKBCodePage",
    "DrawStateA",
    "TrackPopupMenuEx",
    "CreateIconFromResourceEx",
    "CreateIconIndirect",
    "GetCaretPos",
    "DispatchMessageW",
    "IsDialogMessageW",
    "RecordShutdownReason",
    "GetCursor",
    "EmptyClipboard",
    "UpdateWindow",
    "DdeDisconnectList",
    "EnumChildWindows",
    "InitializeLpkHooks",
    "BeginDeferWindowPos",
    "SetMenuItemInfoW",
    "GetClipboardFormatNameA",
    "GetUpdateRect",
    "SetMessageQueue",
    "CallMsgFilterA",
    "ScrollDC",
    "TranslateMessageEx",
    "SetConsoleReserveKeys",
    "GetWindowWord",
    "GetScrollPos",
    "CharToOemBuffA",
    "CreateDialogParamW",
    "GetWindowModuleFileName",
    "GetDialogBaseUnits",
    "UserRealizePalette",
    "DdeInitializeA",
    "GetMouseMovePointsEx",
    "GetClipboardFormatNameW",
    "SetMenuContextHelpId",
    "DdeClientTransaction",
    "WinHelpA",
    "LoadRemoteFonts",
    "GetListBoxInfo",
    "EnumDesktopWindows",
    "BroadcastSystemMessage",
    "GetPriorityClipboardFormat",
    "IsCharUpperA",
    "GetInternalWindowPos",
    "MessageBoxA",
    "SystemParametersInfoW",
    "RemovePropW",
    "BlockInput",
    "GetLastActivePopup",
    "ShowWindow",
    "GetUserObjectInformationW",
    "RegisterShellHookWindow",
    "GetAsyncKeyState",
    "GetKeyboardState",
    "IsHungAppWindow",
    "GetDCEx",
    "GetUserObjectSecurity",
    "TabbedTextOutW",
    "AdjustWindowRectEx",
    "ScrollChildren",
    "EnumThreadWindows",
    "SetProgmanWindow",
    "GetComboBoxInfo",
    "EnumClipboardFormats",
    "TrackPopupMenu",
    "DdeSetQualityOfService",
    "SetWindowRgn",
    "CreatePopupMenu",
    "RegisterWindowMessageA",
    "UnregisterUserApiHook",
    "CloseWindowStation",
    "MessageBoxTimeoutW",
    "DestroyCursor",
    "GetAncestor",
    "SetPropA",
    "GetMenuStringW",
    "SetCursorPos",
    "DefWindowProcA",
    "CharUpperBuffA",
    "MBToWCSEx",
    "LoadCursorFromFileW",
    "SetUserObjectInformationW",
    "IsDialogMessage",
    "SoftModalMessageBox",
    "GetDlgItemInt",
    "UnloadKeyboardLayout",
    "GetMenuContextHelpId",
    "EnumDisplayDevicesW",
    "GetClassInfoExA",
    "CreateWindowExW",
    "DestroyWindow",
    "KillTimer",
    "GetDlgItemTextW",
    "IsCharLowerA",
    "GetDoubleClickTime",
    "MessageBoxIndirectW",
    "GetWindowContextHelpId",
    "KillSystemTimer",
    "GetClientRect",
    "UserLpkPSMTextOut",
    "TranslateMDISysAccel",
    "SetDlgItemInt",
    "EnumPropsA",
    "DestroyCaret",
    "CloseClipboard",
    "GetTabbedTextExtentW",
    "IMPSetIMEW",
    "MessageBoxTimeoutA",
    "SendMessageTimeoutW",
    "OpenDesktopW",
    "GetWindowPlacement",
    "CreateIcon",
    "GetClassWord",
    "GetClipboardOwner",
    "SetProcessDefaultLayout",
    "EnumDesktopsA",
    "SendIMEMessageExW",
    "IsWindowVisible",
    "WINNLSGetIMEHotkey",
    "GetWindowDC",
    "DdeQueryNextServer",
    "DdeAddData",
    "DlgDirSelectExW",
    "GetGuiResources",
    "LoadCursorW",
    "GetClassNameW",
    "GetMenuCheckMarkDimensions",
    "BroadcastSystemMessageExA",
    "UnregisterClassW",
    "CreateAcceleratorTableA",
    "SetShellWindow",
    "SetClassLongA",
    "GetClassLongA",
    "HideCaret",
    "DrawCaptionTempA",
    "OpenInputDesktop",
    "SetWindowPos",
    "LoadImageW",
    "CharNextW",
    "FrameRect",
    "IsRectEmpty",
    "RegisterClassExA",
    "SetSystemCursor",
    "GetMenuState",
    "UserRegisterWowHandlers",
    "InSendMessageEx",
    "CreateWindowStationW",
    "DdeCreateStringHandleW",
    "PrivateExtractIconExW",
    "RegisterRawInputDevices",
    "IntersectRect",
    "PostMessageA",
    "GetDlgItemTextA",
    "DefMDIChildProcA",
    "IsCharAlphaNumericW",
    "DdeCmpStringHandles",
    "LoadIconA",
    "SetSysColors",
    "ShowOwnedPopups",
    "GetScrollBarInfo",
    "ToUnicode",
    "EndPaint",
    "DdeAbandonTransaction",
    "TranslateAccelerator",
    "EnumDisplayMonitors",
    "DdeKeepStringHandle",
    "SendMessageW",
    "IsZoomed",
    "SendDlgItemMessageW",
    "GetMenuItemCount",
    "GetWindowTextLengthA",
    "GetMenu",
    "SetMessageExtraInfo",
    "LockWindowStation",
    "GetAppCompatFlags2",
    "MenuWindowProcA",
    "ClientToScreen",
    "GetForegroundWindow",
    "SetWindowsHookA",
    "CharLowerBuffA",
    "GetInputState",
    "SetSysColorsTemp",
    "SwitchToThisWindow",
    "SetWindowContextHelpId",
    "SendMessageCallbackA",
    "SetLayeredWindowAttributes",
    "CopyAcceleratorTableA",
    "VTagOutput",
    "TileChildWindows",
    "DispatchMessageA",
    "GetWindowRgnBox",
    "GetScrollRange",
    "UpdateLayeredWindow",
    "DrawTextExA",
    "TranslateAcceleratorW",
    "SetActiveWindow",
    "DefRawInputProc",
    "NotifyWinEvent",
    "RegisterClipboardFormatW",
    "ShowCursor",
    "AdjustWindowRect",
    "DisplayExitWindowsWarnings",
    "IsWindowEnabled",
    "EnumDisplaySettingsA",
    "SendDlgItemMessageA",
    "DrawCaptionTempW",
    "ClipCursor",
    "SetParent",
    "AllowForegroundActivation",
    "GetShellWindow",
    "SendIMEMessageExA",
    "RegisterWindowMessageW",
    "SendNotifyMessageA",
    "MonitorFromPoint",
    "UnregisterClassA",
    "LockWorkStation",
    "TranslateAcceleratorA",
    "WINNLSEnableIME",
    "ChangeDisplaySettingsExA",
    "DdeAccessData",
    "ChangeMenuW",
    "RealGetWindowClassW",
    "InvertRect",
    "LoadKeyboardLayoutW",
    "IsCharAlphaW",
    "ModifyMenuA",
    "CheckMenuItem",
    "DialogBoxParamA",
    "DrawAnimatedRects",
    "SendNotifyMessageW",
    "DdeCreateStringHandleA",
    "ValidateRect",
    "OemKeyScan",
    "DestroyAcceleratorTable",
    "LoadImageA",
    "UserLpkTabbedTextOut",
    "GetClassInfoW",
    "CreateMDIWindowW",
    "GetLastInputInfo",
    "CharToOemA",
    "GetDlgCtrlID",
    "GetKeyboardLayoutList",
    "DdeConnect",
    "SetWindowsHookExW",
    "wsprintfW",
    "UnregisterHotKey",
    "TileWindows",
    "SetTaskmanWindow",
    "FindWindowExW",
    "PostThreadMessageA",
    "AppendMenuW",
    "GetWinStationInfo",
    "CreateWindowExA",
    "FillRect",
    "CopyIcon",
    "ExcludeUpdateRgn",
    "GetTabbedTextExtentA",
    "UnregisterMessagePumpHook",
    "SetInternalWindowPos",
    "GetClipboardSequenceNumber",
    "SetShellWindowEx",
    "SetCapture",
    "SetWindowTextA",
    "OemToCharA",
    "SetCursorContents",
    "mouse_event",
    "GetWindowRgn",
    "DdeQueryStringW",
    "SetWindowsHookW",
    "DrawFrameControl",
    "VkKeyScanExA",
    "EnableScrollBar",
    "RedrawWindow",
    "ChangeDisplaySettingsExW",
    "IsCharAlphaNumericA",
    "CharPrevA",
    "GetWindowLongW"
  ],
  "userenv.dll": [
    "GetNextFgPolicyRefreshInfo",
    "UnloadUserProfile",
    "CheckXForestLogon",
    "RsopAccessCheckByType",
    "GetProfilesDirectoryW",
    "GetUserProfileDirectoryA",
    "ExpandEnvironmentStringsForUserA",
    "GenerateRsopPolicy",
    "GetProfilesDirectoryA",
    "LeaveCriticalPolicySection",
    "ExpandEnvironmentStringsForUserW",
    "FreeGPOListW",
    "GetPreviousFgPolicyRefreshInfo",
    "ProcessGroupPolicyCompleted",
    "GetGPOListA",
    "RsopSetPolicySettingStatus",
    "DestroyEnvironmentBlock",
    "DeleteProfileW",
    "LoadUserProfileA",
    "ForceSyncFgPolicy",
    "DllRegisterServer",
    "EnterCriticalPolicySection",
    "UnregisterGPNotification",
    "GetAllUsersProfileDirectoryA",
    "GetUserProfileDirectoryW",
    "CreateEnvironmentBlock",
    "FreeGPOListA",
    "WaitForUserPolicyForegroundProcessing",
    "DeleteProfileA",
    "GetDefaultUserProfileDirectoryA",
    "GetAppliedGPOListW",
    "DllGetClassObject",
    "RsopFileAccessCheck",
    "GetAllUsersProfileDirectoryW",
    "WaitForMachinePolicyForegroundProcessing",
    "GetDefaultUserProfileDirectoryW",
    "GetProfileType",
    "ProcessGroupPolicyCompletedEx",
    "RsopResetPolicySettingStatus",
    "DllCanUnloadNow",
    "RsopLoggingEnabled",
    "RefreshPolicy",
    "RefreshPolicyEx",
    "RegisterGPNotification",
    "DllInstall",
    "GetGPOListW",
    "DllUnregisterServer",
    "GetAppliedGPOListA",
    "LoadUserProfileW"
  ],
  "usp10.dll": [
    "ScriptStringValidate",
    "ScriptPlace",
    "ScriptXtoCP",
    "ScriptStringGetOrder",
    "ScriptStringFree",
    "UspAllocCache",
    "ScriptGetProperties",
    "ScriptStringAnalyse",
    "ScriptStringGetLogicalWidths",
    "ScriptJustify",
    "ScriptLayout",
    "ScriptRecordDigitSubstitution",
    "ScriptFreeCache",
    "ScriptString_pcOutChars",
    "ScriptString_pLogAttr",
    "ScriptItemize",
    "ScriptGetLogicalWidths",
    "ScriptGetGlyphABCWidth",
    "ScriptApplyDigitSubstitution",
    "ScriptTextOut",
    "UspAllocTemp",
    "ScriptStringXtoCP",
    "ScriptGetCMap",
    "ScriptStringOut",
    "UspFreeMem",
    "ScriptBreak",
    "ScriptIsComplex",
    "ScriptString_pSize",
    "ScriptGetFontProperties",
    "ScriptShape",
    "ScriptStringCPtoX",
    "ScriptApplyLogicalWidth",
    "ScriptCPtoX",
    "LpkPresent",
    "ScriptCacheGetHeight"
  ],
  "utildll.dll": [
    "FormDecoratedAsyncDeviceName",
    "ConfigureModem",
    "StrSystemWaitReason",
    "GetSystemMessageA",
    "CachedGetUserFromSid",
    "HaveAnonymousUsersChanged",
    "CalculateDiffTime",
    "NetBIOSDeviceEnumerate",
    "TestUserForAdmin",
    "ParseDecoratedAsyncDeviceName",
    "StrConnectState",
    "CalculateElapsedTime",
    "GetUnknownString",
    "NetworkDeviceEnumerate",
    "StrProcessState",
    "SetupAsyncCdConfig",
    "IsPartOfDomain",
    "GetUserFromSid",
    "StandardErrorMessage",
    "CompareElapsedTime",
    "StrAsyncConnectState",
    "InitializeAnonymousUserCompareList",
    "WinEnumerateDevices",
    "InstallModem",
    "CtxGetAnyDCName",
    "DateTimeString",
    "StrSdClass",
    "EnumerateMultiUserServers",
    "CurrentDateTimeString",
    "GetSystemMessageW",
    "RegGetNetworkDeviceName",
    "GetAssociatedPortName",
    "AsyncDeviceEnumerate",
    "QueryCurrentWinStation",
    "ElapsedTimeString",
    "RegGetNetworkServiceName"
  ],
  "uxtheme.dll": [
    "GetThemeRect",
    "GetThemePropertyOrigin",
    "OpenThemeData",
    "EnableThemeDialogTexture",
    "GetThemeMargins",
    "SetWindowTheme",
    "GetThemeSysInt",
    "GetThemeSysString",
    "GetThemeAppProperties",
    "GetThemeBackgroundContentRect",
    "DrawThemeText",
    "IsThemeActive",
    "DrawThemeEdge",
    "GetThemeBackgroundExtent",
    "CloseThemeData",
    "GetThemeFont",
    "GetThemeBool",
    "GetThemeDocumentationProperty",
    "GetWindowTheme",
    "GetThemeSysBool",
    "GetThemeFilename",
    "GetThemeString",
    "DrawThemeIcon",
    "GetThemeSysColorBrush",
    "GetThemeSysSize",
    "IsThemePartDefined",
    "GetThemeBackgroundRegion",
    "GetThemeTextMetrics",
    "IsAppThemed",
    "GetThemeColor",
    "GetThemePosition",
    "GetThemeInt",
    "IsThemeBackgroundPartiallyTransparent",
    "DrawThemeBackground",
    "SetThemeAppProperties",
    "GetCurrentThemeName",
    "GetThemeMetric",
    "EnableTheming",
    "GetThemeSysFont",
    "GetThemePartSize",
    "GetThemeIntList",
    "HitTestThemeBackground",
    "IsThemeDialogTextureEnabled",
    "DrawThemeBackgroundEx",
    "GetThemeSysColor",
    "DrawThemeParentBackground",
    "GetThemeTextExtent",
    "GetThemeEnumValue"
  ],
  "vbajet32.dll": [
    "LoadExprSrvDll",
    "VBAGetExprSrv"
  ],
  "vbscript.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "vcdex.dll": [
    "VDDRegisterInit",
    "VDDDispatch",
    "VDDInitialize"
  ],
  "vdmdbg.dll": [
    "VDMGetThreadSelectorEntry",
    "VDMGetAddrExpression",
    "VDMDetectWOW",
    "VDMGetSymbol",
    "VDMEnumTaskWOW",
    "VDMBreakThread",
    "VDMProcessException",
    "VDMGetThreadContext",
    "VDMStartTaskInWOW",
    "VDMModuleNext",
    "VDMGlobalFirst",
    "VDMGetSegtablePointer",
    "VDMEnumTaskWOWEx",
    "VDMSetContext",
    "VDMGetModuleSelector",
    "VDMGetDbgFlags",
    "VDMGetContext",
    "VDMModuleFirst",
    "VDMKillWOW",
    "VDMSetThreadContext",
    "VDMGetSegmentInfo",
    "VDMGlobalNext",
    "VDMTerminateTaskWOW",
    "VDMGetSelectorModule",
    "VDMIsModuleLoaded",
    "VDMGetPointer",
    "VDMSetDbgFlags",
    "VDMEnumProcessWOW"
  ],
  "verifier.dll": [
    "VerifierSetFlags",
    "VerifierEnumerateResource"
  ],
  "version.dll": [
    "VerQueryValueA",
    "GetFileVersionInfoA",
    "VerQueryValueIndexA",
    "VerFindFileW",
    "VerFindFileA",
    "VerQueryValueW",
    "VerInstallFileW",
    "VerQueryValueIndexW",
    "VerInstallFileA",
    "GetFileVersionInfoW",
    "VerLanguageNameA",
    "GetFileVersionInfoSizeW",
    "VerLanguageNameW",
    "GetFileVersionInfoSizeA"
  ],
  "vfpodbc.dll": [
    "ConfigDSN",
    "public: class CVfpodbc & __thiscall CVfpodbc::operator=(class CVfpodbc const &)",
    "SQLSetConnectOption",
    "ConfigDSNEx",
    "fnVfpodbc",
    "LibMain"
  ],
  "vga.dll": "No exports",
  "vga256.dll": "No exports",
  "vga64k.dll": "No exports",
  "vjoy.dll": "No exports",
  "vmsrvc.dll": [
    "SendDataToHost",
    "QueryHostInterface",
    "FShareServerInitialize",
    "RegisterGuestInterface",
    "FShareGetConfig",
    "IsInterfaceEnabled",
    "TearDownHostCommunication",
    "EnableLiveResize",
    "FShareReleaseServiceEvent",
    "FShareGetInfo",
    "FShareGetSpace",
    "FShareGetDriveConfig",
    "InitializeHostCommunication",
    "FShareRegisterServiceEvent",
    "GetHostTime",
    "ReceiveDataFromHost",
    "FShareCheckConfig",
    "UnregisterCallback",
    "RegisterCallback",
    "UnregisterGuestInterface",
    "GetHostFileTimeUTC",
    "SendMessageToHost",
    "GetTimeSyncIntervals"
  ],
  "vpc-s3.dll": "No exports",
  "vss_ps.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "vssapi.dll": [
    "protected: bool __stdcall CVssWriter::IsBootableSystemStateBackedUp(void)const",
    "public: virtual bool __stdcall CVssJetWriter::OnFreezeBegin(void)",
    "public: virtual bool __stdcall CVssWriter::OnBackOffIOOnVolume(unsigned short *,struct _GUID,struct _GUID)",
    "public: virtual bool __stdcall CVssWriter::OnPrepareBackup(class IVssWriterComponents *)",
    "VssFreeSnapshotProperties",
    "public: virtual bool __stdcall CVssWriter::OnContinueIOOnVolume(unsigned short *,struct _GUID,struct _GUID)",
    "public: virtual bool __stdcall CVssJetWriter::OnIdentify(class IVssCreateWriterMetadata *)",
    "public: void __stdcall CVssJetWriter::Uninitialize(void)",
    "public: virtual bool __stdcall CVssWriter::OnPreRestore(class IVssWriterComponents *)",
    "long __stdcall CreateVssExamineWriterMetadata(unsigned short *,class IVssExamineWriterMetadata * *)",
    "long __stdcall CreateVssSnapshotSetDescription(struct _GUID,long,class IVssSnapshotSetDescription * *)",
    "long __stdcall LoadVssSnapshotSetDescription(unsigned short const *,class IVssSnapshotSetDescription * *)",
    "long __stdcall CreateVssBackupComponents(class IVssBackupComponents * *)",
    "public: virtual __thiscall CVssJetWriter::~CVssJetWriter(void)",
    "public: __thiscall CVssWriter::CVssWriter(void)",
    "public: virtual bool __stdcall CVssJetWriter::OnBackupCompleteBegin(class IVssWriterComponents *)",
    "public: virtual bool __stdcall CVssJetWriter::OnPrepareBackupBegin(class IVssWriterComponents *)",
    "public: virtual bool __stdcall CVssJetWriter::OnPrepareSnapshotEnd(bool)",
    "public: virtual bool __stdcall CVssWriter::OnPostRestore(class IVssWriterComponents *)",
    "public: virtual __thiscall CVssWriter::~CVssWriter(void)",
    "public: long __stdcall CVssWriter::Initialize(struct _GUID,unsigned short const *,enum VSS_USAGE_TYPE,enum VSS_SOURCE_TYPE,enum _VSS_APPLICATION_LEVEL,unsigned long,enum VSS_ALTERNATE_WRITER_STATE,bool)",
    "public: virtual bool __stdcall CVssWriter::OnIdentify(class IVssCreateWriterMetadata *)",
    "public: virtual bool __stdcall CVssJetWriter::OnPrepareBackupEnd(class IVssWriterComponents *,bool)",
    "protected: bool __stdcall CVssWriter::AreComponentsSelected(void)const",
    "public: virtual bool __stdcall CVssJetWriter::OnPrepareSnapshotBegin(void)",
    "public: virtual bool __stdcall CVssWriter::OnPostSnapshot(class IVssWriterComponents *)",
    "public: __thiscall CVssJetWriter::CVssJetWriter(void)",
    "public: virtual bool __stdcall CVssJetWriter::OnPostRestoreBegin(class IVssWriterComponents *)",
    "public: long __stdcall CVssWriter::Unsubscribe(void)",
    "public: virtual bool __stdcall CVssWriter::OnVSSShutdown(void)",
    "UnregisterSnapshotSubscriptions",
    "protected: long __stdcall CVssWriter::SetWriterFailure(long)",
    "protected: struct _GUID __stdcall CVssWriter::GetCurrentSnapshotSetId(void)const",
    "public: virtual void __stdcall CVssJetWriter::OnAbortBegin(void)",
    "public: virtual void __stdcall CVssJetWriter::OnAbortEnd(void)",
    "public: virtual bool __stdcall CVssJetWriter::OnPostRestoreEnd(class IVssWriterComponents *,bool)",
    "public: virtual bool __stdcall CVssJetWriter::OnBackupCompleteEnd(class IVssWriterComponents *,bool)",
    "public: virtual bool __stdcall CVssJetWriter::OnPreRestoreBegin(class IVssWriterComponents *)",
    "public: long __stdcall CVssWriter::InstallAlternateWriter(struct _GUID,struct _GUID)",
    "public: virtual bool __stdcall CVssJetWriter::OnThawBegin(void)",
    "public: long __stdcall CVssJetWriter::Initialize(struct _GUID,unsigned short const *,bool,bool,unsigned short const *,unsigned short const *)",
    "public: virtual bool __stdcall CVssWriter::OnVSSApplicationStartup(void)",
    "public: virtual bool __stdcall CVssWriter::OnBackupComplete(class IVssWriterComponents *)",
    "IsVolumeSnapshotted",
    "protected: enum _VSS_APPLICATION_LEVEL __stdcall CVssWriter::GetCurrentLevel(void)const",
    "protected: unsigned short const * * __stdcall CVssWriter::GetCurrentVolumeArray(void)const",
    "SimulateSnapshotFreeze",
    "RegisterSnapshotSubscriptions",
    "protected: enum _VSS_BACKUP_TYPE __stdcall CVssWriter::GetBackupType(void)const",
    "public: long __stdcall CVssWriter::Subscribe(unsigned long)",
    "public: virtual bool __stdcall CVssJetWriter::OnFreezeEnd(bool)",
    "protected: unsigned int __stdcall CVssWriter::GetCurrentVolumeCount(void)const",
    "public: virtual bool __stdcall CVssJetWriter::OnPreRestoreEnd(class IVssWriterComponents *,bool)",
    "public: virtual bool __stdcall CVssJetWriter::OnThawEnd(bool)",
    "protected: bool __stdcall CVssWriter::IsPathAffected(unsigned short const *)const",
    "public: virtual bool __stdcall CVssJetWriter::OnPostSnapshot(class IVssWriterComponents *)",
    "SimulateSnapshotThaw",
    "protected: bool __stdcall CVssWriter::IsPartialFileSupportEnabled(void)const"
  ],
  "vwipxspx.dll": [
    "VWinSPXEstablishConnection",
    "VwInitialize",
    "VWinSPXTerminateConnection",
    "VwIPXGetLocalTargetAsync",
    "VwIPXVerifyChecksum",
    "VwIPXScheduleAESEvent",
    "VWinSPXGetConnectionStatus",
    "VwSPXListenForConnection",
    "VwIPXGetLocalTarget",
    "VWinIPXRelinquishControl",
    "VwIPXOpenSocket",
    "VwIPXSendWithChecksum",
    "VwIPXCloseSocket",
    "VWinInitialize",
    "VwDispatcher",
    "VwIPXGenerateChecksum",
    "VwSPXListenForSequencedPacket",
    "VwSPXAbortConnection",
    "VwIPXCancelEvent",
    "VwIPXDisconnectFromTarget",
    "VWinIPXGetInternetworkAddress",
    "VWinIPXSPXDeinit",
    "VwIPXGetIntervalMarker",
    "VwSPXGetConnectionStatus",
    "VWinSPXInitialize",
    "VwSPXEstablishConnection",
    "VWinSPXAbortConnection",
    "VWinSPXListenForSequencedPacket",
    "VwIPXGetMaxPacketSize",
    "VwIPXListenForPacket",
    "VwIPXSendPacket",
    "VwIPXRelinquishControl",
    "VWinIPXScheduleIPXEvent",
    "VwIPXSPXDeinit",
    "VWinIPXCloseSocket",
    "VWinIPXCancelEvent",
    "VWinIPXInitialize",
    "VWinIPXDisconnectFromTarget",
    "VWinSPXSendSequencedPacket",
    "VWinIPXGetMaxPacketSize",
    "VwSPXInitialize",
    "VWinIPXGetIntervalMarker",
    "VWinIPXListenForPacket",
    "VWinSPXListenForConnection",
    "VwIPXGetInformation",
    "VwSPXSendSequencedPacket",
    "VwIPXGetInternetworkAddress",
    "VWinIPXGetLocalTargetAsync",
    "VwIPXScheduleIPXEvent",
    "VWinIPXOpenSocket",
    "VWinIPXGetLocalTarget",
    "VwIPXInitialize",
    "VwSPXTerminateConnection",
    "VWinEsrCallback",
    "VWinIPXSendPacket"
  ],
  "w32time.dll": [
    "SvchostEntry_W32Time",
    "W32TimeQueryConfig",
    "W32TimeBufferFree",
    "TimeProvClose",
    "W32TimeVerifyUnjoinConfig",
    "W32TmServiceMain",
    "TimeProvOpen",
    "DllRegisterServer",
    "W32TimeQueryHardwareProviderStatus",
    "fnW32TmSetServiceStatus",
    "W32TimeSetConfig",
    "fnW32TmRegisterServiceCtrlHandlerEx",
    "W32TimeDcPromo",
    "W32TimeVerifyJoinConfig",
    "W32TimeQueryNTPProviderStatus",
    "TimeProvCommand",
    "W32TimeSyncNow",
    "W32TimeGetNetlogonServiceBits",
    "DllInstall",
    "DllUnregisterServer",
    "SvchostPushServiceGlobals"
  ],
  "w32topl.dll": [
    "ToplVertexSetParent",
    "ToplGraphFindEdgesForMST",
    "ToplGraphNumberOfVertices",
    "ToplEdgeSetVtx",
    "ToplMakeGraphState",
    "ToplScheduleNumEntries",
    "ToplDeleteComponents",
    "ToplSTHeapDestroy",
    "ToplEdgeAssociate",
    "ToplAddEdgeToGraph",
    "ToplGraphMakeRing",
    "ToplIterAdvance",
    "ToplEdgeGetToVertex",
    "ToplHeapCreate",
    "ToplScheduleExportReadonly",
    "ToplEdgeDestroy",
    "ToplVertexGetInEdge",
    "ToplGraphSetVertexIter",
    "ToplEdgeGetWeight",
    "ToplScheduleImport",
    "ToplScheduleDuration",
    "ToplIterCreate",
    "ToplScheduleIsEqual",
    "ToplListNumberOfElements",
    "ToplListFree",
    "ToplListCreate",
    "ToplGraphDestroy",
    "ToplAddEdgeSetToGraph",
    "ToplHeapIsEmpty",
    "ToplHeapInsert",
    "ToplGraphRemoveVertex",
    "ToplEdgeDisassociate",
    "ToplHeapIsElementOf",
    "ToplEdgeSetToVertex",
    "ToplSTHeapAdd",
    "ToplHeapExtractMin",
    "ToplGetAlwaysSchedule",
    "ToplGetSpanningTreeEdgesForVtx",
    "ToplListRemoveElem",
    "ToplDeleteSpanningTreeEdges",
    "ToplGraphFree",
    "ToplScheduleMaxUnavailable",
    "ToplEdgeInit",
    "ToplSTHeapInit",
    "ToplVertexSetId",
    "ToplVertexCreate",
    "ToplGraphInit",
    "ToplVertexInit",
    "ToplIsToplException",
    "ToplIterFree",
    "ToplHeapDestroy",
    "ToplSTHeapExtractMin",
    "ToplSTHeapCostReduced",
    "ToplScheduleCacheDestroy",
    "ToplEdgeSetWeight",
    "ToplGraphCreate",
    "ToplPScheduleValid",
    "ToplVertexNumberOfInEdges",
    "ToplScheduleMerge",
    "ToplDeleteGraphState",
    "ToplEdgeGetFromVertex",
    "ToplGraphAddVertex",
    "ToplVertexGetId",
    "ToplVertexFree",
    "ToplListAddElem",
    "ToplVertexDestroy",
    "ToplFree",
    "ToplEdgeCreate",
    "ToplScheduleCreate",
    "ToplEdgeFree",
    "ToplVertexGetParent",
    "ToplEdgeSetFromVertex",
    "ToplIterGetObject",
    "ToplVertexNumberOfOutEdges",
    "ToplScheduleValid",
    "ToplSetAllocator",
    "ToplScheduleCacheCreate",
    "ToplListSetIter",
    "ToplVertexGetOutEdge"
  ],
  "w3ssl.dll": [
    "ServiceEntry",
    "HTTPFilterServiceMain"
  ],
  "wavemsp.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wdigest.dll": [
    "CredentialUpdateNotify",
    "SpLsaModeInitialize",
    "SpInstanceInit",
    "SpUserModeInitialize",
    "CredentialUpdateFree",
    "SpInitialize",
    "CredentialUpdateRegister"
  ],
  "webcheck.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "webclnt.dll": [
    "DavClose",
    "ServiceMain",
    "SvchostPushServiceGlobals",
    "DavInit"
  ],
  "webhits.dll": [
    "GetExtensionVersion",
    "TerminateExtension",
    "HttpExtensionProc"
  ],
  "webvw.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllInstall",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wiadefui.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wiadss.dll": [
    "public: void __thiscall BUFFER_CHAIN_ITEM::`default constructor closure'(void)",
    "public: __thiscall BUFFER::~BUFFER(void)",
    "FindNextImportDS",
    "public: __thiscall BUFFER_CHAIN::~BUFFER_CHAIN(void)",
    "public: unsigned int __thiscall BUFFER::QuerySize(void)const",
    "LoadImportDS",
    "GetLoaderStatus",
    "public: void __thiscall BUFFER::`default constructor closure'(void)",
    "public: __thiscall BUFFER_CHAIN::BUFFER_CHAIN(void)",
    "public: __thiscall BUFFER_CHAIN_ITEM::BUFFER_CHAIN_ITEM(unsigned int)",
    "CloseFindContext",
    "FindFirstImportDS",
    "FindImportDSByDeviceName",
    "public: __thiscall BUFFER::BUFFER(unsigned int)",
    "public: unsigned long __thiscall BUFFER_CHAIN_ITEM::QueryUsed(void)const",
    "public: __thiscall BUFFER_CHAIN_ITEM::~BUFFER_CHAIN_ITEM(void)",
    "UnloadImportDS",
    "public: void __thiscall BUFFER_CHAIN_ITEM::SetUsed(unsigned long)",
    "public: void * __thiscall BUFFER::QueryPtr(void)const"
  ],
  "wiascr.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wiaservc.dll": [
    "wiasWriteBufToFile",
    "public: void __thiscall BUFFER_CHAIN_ITEM::SetUsed(unsigned long)",
    "wiasParseEndorserString",
    "wiasUpdateScanRect",
    "wiasFreePropContext",
    "wiasWritePageBufToFile",
    "wiasSetItemPropNames",
    "wiasWritePropGuid",
    "wiasDownSampleBuffer",
    "wiasWritePropLong",
    "public: void __thiscall BUFFER_CHAIN_ITEM::`default constructor closure'(void)",
    "wiasSetValidListLong",
    "public: __thiscall BUFFER::~BUFFER(void)",
    "wiasCreateDrvItem",
    "wiasGetChangedValueGuid",
    "wiasValidateItemProperties",
    "wiasSetValidRangeLong",
    "wiasReadPropBin",
    "wiasGetChangedValueLong",
    "public: __thiscall BUFFER_CHAIN::~BUFFER_CHAIN(void)",
    "wiasGetRootItem",
    "wiasSetPropChanged",
    "wiasGetChildrenContexts",
    "public: unsigned int __thiscall BUFFER::QuerySize(void)const",
    "wiasReadMultiple",
    "wiasSetValidListGuid",
    "wiasUpdateValidFormat",
    "public: void * __thiscall BUFFER::QueryPtr(void)const",
    "wiasGetChangedValueFloat",
    "wiasIsPropChanged",
    "wiasSendEndOfPage",
    "wiasWriteMultiple",
    "DllRegisterServer",
    "wiasCreateChildAppItem",
    "wiasDebugError",
    "public: void __thiscall BUFFER::`default constructor closure'(void)",
    "public: __thiscall BUFFER_CHAIN::BUFFER_CHAIN(void)",
    "wiasSetItemPropAttribs",
    "wiasWritePropBin",
    "public: __thiscall BUFFER_CHAIN_ITEM::BUFFER_CHAIN_ITEM(unsigned int)",
    "wiasSetValidListFloat",
    "wiasSetValidListStr",
    "wiasGetPropertyAttributes",
    "wiasWritePropFloat",
    "wiasCreatePropContext",
    "wiasQueueEvent",
    "wiasSetValidRangeFloat",
    "wiasGetChangedValueStr",
    "public: __thiscall BUFFER::BUFFER(unsigned int)",
    "wiasReadPropFloat",
    "public: unsigned long __thiscall BUFFER_CHAIN_ITEM::QueryUsed(void)const",
    "wiasWritePropStr",
    "wiasReadPropGuid",
    "DllEntryPoint",
    "wiasGetContextFromName",
    "public: __thiscall BUFFER_CHAIN_ITEM::~BUFFER_CHAIN_ITEM(void)",
    "wiasGetDrvItem",
    "wiasGetImageInformation",
    "wiasReadPropLong",
    "wiasCreateLogInstance",
    "wiasReadPropStr",
    "wiasPrintDebugHResult",
    "wiasDebugTrace",
    "wiasFormatArgs",
    "wiasSetPropertyAttributes",
    "wiasGetItemType",
    "DllUnregisterServer",
    "ServiceMain",
    "wiasSetValidFlag",
    "SvchostPushServiceGlobals"
  ],
  "wiashext.dll": [
    "IMCreateCameraItemIDL",
    "AddDeviceWasChosenA",
    "IMGetItemFromIDL",
    "GetGeneralUIKey",
    "DllRegisterServer",
    "IMGetFullPathNameFromIDL",
    "PropertySheetFromItem",
    "GetDeviceFromDeviceId",
    "DoDeleteAllItems",
    "TakeAPicture",
    "DllGetClassObject",
    "IMGetDeviceIdFromIDL",
    "GetDeviceIdFromDevice",
    "MakeFullPidlForDevice",
    "DllCanUnloadNow",
    "PropertySheetFromDevice",
    "GetDeviceUIKey",
    "AddDeviceWasChosenW",
    "AddDeviceWasChosen",
    "DllUnregisterServer"
  ],
  "wiavideo.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wiavusd.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "win32spl.dll": [
    "DllMain",
    "InitializePrintMonitor",
    "InitializePrintProvidor"
  ],
  "winbrand.dll": "No exports",
  "windowscodecs.dll": [
    "IWICMetadataBlockReader_GetReaderByIndex_Proxy",
    "IWICBitmapEncoder_Commit_Proxy",
    "IWICPalette_HasAlpha_Proxy",
    "IWICComponentInfo_GetVersion_Proxy",
    "IWICBitmapFrameDecode_GetThumbnail_Proxy",
    "IWICBitmapFlipRotator_Initialize_Proxy",
    "IWICBitmapFrameEncode_SetColorContexts_Proxy",
    "IWICPixelFormatInfo_GetChannelMask_Proxy",
    "WICGetMetadataContentSize",
    "IWICBitmapDecoder_GetFrame_Proxy",
    "IWICMetadataQueryReader_GetContainerFormat_Proxy",
    "IWICBitmapFrameDecode_GetMetadataQueryReader_Proxy",
    "IWICBitmapCodecInfo_GetMimeTypes_Proxy",
    "IWICMetadataQueryWriter_SetMetadataByName_Proxy",
    "IWICBitmapFrameEncode_Commit_Proxy",
    "IWICFastMetadataEncoder_GetMetadataQueryWriter_Proxy",
    "IWICImagingFactory_CreateBitmapFromSource_Proxy",
    "IWICImagingFactory_CreateStream_Proxy",
    "IWICImagingFactory_CreateDecoderFromFileHandle_Proxy",
    "IWICPixelFormatInfo_GetBitsPerPixel_Proxy",
    "IWICPixelFormatInfo_GetChannelCount_Proxy",
    "IWICBitmap_SetResolution_Proxy",
    "IWICPalette_InitializeFromBitmap_Proxy",
    "WICSerializeMetadataContent",
    "IWICComponentInfo_GetFriendlyName_Proxy",
    "WICCreateBitmapFromSection",
    "IWICBitmapEncoder_CreateNewFrame_Proxy",
    "IWICBitmapSource_GetPixelFormat_Proxy",
    "IWICBitmapSource_GetSize_Proxy",
    "IWICBitmapDecoder_GetMetadataQueryReader_Proxy",
    "IWICImagingFactory_CreateFastMetadataEncoderFromDecoder_Proxy",
    "WICConvertBitmapSource",
    "IWICBitmapCodecInfo_GetDeviceModels_Proxy",
    "IWICImagingFactory_CreateBitmapFromMemory_Proxy",
    "IWICBitmapDecoder_GetThumbnail_Proxy",
    "IWICBitmapEncoder_SetThumbnail_Proxy",
    "IWICBitmapFrameDecode_GetColorContexts_Proxy",
    "IWICStream_InitializeFromMemory_Proxy",
    "WICMatchMetadataContent",
    "IEnumString_Next_WIC_Proxy",
    "IWICBitmapDecoder_GetDecoderInfo_Proxy",
    "WICMapShortNameToGuid",
    "IWICFastMetadataEncoder_Commit_Proxy",
    "IWICPalette_InitializeFromPalette_Proxy",
    "IWICBitmapDecoder_GetPreview_Proxy",
    "IWICBitmap_SetPalette_Proxy",
    "IWICBitmapEncoder_SetPalette_Proxy",
    "WICSetEncoderFormat_Proxy",
    "IWICMetadataBlockReader_GetCount_Proxy",
    "IWICMetadataQueryReader_GetMetadataByName_Proxy",
    "IWICBitmapCodecInfo_DoesSupportAnimation_Proxy",
    "DllGetClassObject",
    "WICCreateImagingFactory_Proxy",
    "IWICFormatConverter_Initialize_Proxy",
    "IWICImagingFactory_CreateBitmap_Proxy",
    "IWICBitmapEncoder_GetEncoderInfo_Proxy",
    "IWICBitmapFrameEncode_SetResolution_Proxy",
    "IWICImagingFactory_CreateDecoderFromStream_Proxy",
    "IWICImagingFactory_CreateBitmapScaler_Proxy",
    "IWICBitmap_Lock_Proxy",
    "IWICImagingFactory_CreateDecoderFromFilename_Proxy",
    "IWICBitmapCodecInfo_GetContainerFormat_Proxy",
    "IWICImagingFactory_CreateEncoder_Proxy",
    "WICMapGuidToShortName",
    "IWICBitmapFrameEncode_GetMetadataQueryWriter_Proxy",
    "IWICPalette_InitializePredefined_Proxy",
    "IWICImagingFactory_CreateBitmapFlipRotator_Proxy",
    "IWICBitmapCodecInfo_GetFileExtensions_Proxy",
    "IWICColorContext_InitializeFromMemory_Proxy",
    "IWICComponentInfo_GetCLSID_Proxy",
    "IWICBitmapDecoder_GetFrameCount_Proxy",
    "IWICMetadataQueryWriter_RemoveMetadataByName_Proxy",
    "IWICBitmapCodecInfo_DoesSupportMultiframe_Proxy",
    "IWICBitmapFrameEncode_SetSize_Proxy",
    "IEnumString_Reset_WIC_Proxy",
    "IWICPalette_GetColors_Proxy",
    "IWICComponentFactory_CreateQueryWriterFromBlockWriter_Proxy",
    "IWICBitmapEncoder_GetMetadataQueryWriter_Proxy",
    "IWICImagingFactory_CreateBitmapFromHICON_Proxy",
    "IWICMetadataQueryReader_GetLocation_Proxy",
    "IWICImagingFactory_CreateQueryWriterFromReader_Proxy",
    "IWICImagingFactory_CreateBitmapClipper_Proxy",
    "IWICBitmapLock_GetDataPointer_STA_Proxy",
    "IWICBitmapDecoder_CopyPalette_Proxy",
    "IWICImagingFactory_CreateFormatConverter_Proxy",
    "IWICBitmapLock_GetStride_Proxy",
    "IWICBitmapCodecInfo_DoesSupportLossless_Proxy",
    "IWICBitmapScaler_Initialize_Proxy",
    "IWICStream_InitializeFromIStream_Proxy",
    "IWICImagingFactory_CreateBitmapFromHBITMAP_Proxy",
    "WICMapSchemaToName",
    "IWICBitmapClipper_Initialize_Proxy",
    "IWICComponentInfo_GetAuthor_Proxy",
    "IWICComponentFactory_CreateMetadataWriterFromReader_Proxy",
    "IWICBitmapCodecInfo_GetDeviceManufacturer_Proxy",
    "IWICBitmapEncoder_Initialize_Proxy",
    "IWICImagingFactory_CreateFastMetadataEncoderFromFrameDecode_Proxy",
    "IWICPalette_GetType_Proxy",
    "IWICBitmapFrameEncode_WriteSource_Proxy",
    "IWICBitmapSource_CopyPixels_Proxy",
    "WICCreateColorContext_Proxy",
    "IWICBitmapFrameEncode_SetThumbnail_Proxy",
    "IWICComponentInfo_GetSpecVersion_Proxy",
    "IWICMetadataQueryReader_GetEnumerator_Proxy",
    "IWICBitmapSource_GetResolution_Proxy",
    "IWICImagingFactory_CreateQueryWriter_Proxy",
    "IWICBitmapDecoder_GetColorContexts_Proxy",
    "IWICPalette_InitializeCustom_Proxy",
    "IWICBitmapFrameEncode_Initialize_Proxy",
    "IWICImagingFactory_CreatePalette_Proxy",
    "IWICBitmapSource_CopyPalette_Proxy",
    "IPropertyBag2_Write_Proxy",
    "IWICImagingFactory_CreateComponentInfo_Proxy",
    "IWICPalette_GetColorCount_Proxy"
  ],
  "windowscodecsext.dll": [
    "WICCreateColorTransform_Proxy",
    "DllGetClassObject",
    "IWICColorTransform_Initialize_Proxy"
  ],
  "winfax.dll": [
    "FaxFreeBuffer",
    "FaxEnumGlobalRoutingInfoA",
    "FaxSetRoutingInfoW",
    "FaxClose",
    "FaxSetPortA",
    "FaxPrintCoverPageA",
    "FaxGetPortW",
    "FaxEnableRoutingMethodW",
    "FaxSendDocumentW",
    "FaxSetGlobalRoutingInfoW",
    "FaxGetJobW",
    "FaxEnumJobsA",
    "FaxStartPrintJobW",
    "FaxGetDeviceStatusA",
    "FaxPrintCoverPageW",
    "FaxEnableRoutingMethodA",
    "FaxGetLoggingCategoriesW",
    "FaxInitializeEventQueue",
    "FaxEnumJobsW",
    "FaxCompleteJobParamsA",
    "FaxGetConfigurationA",
    "FaxRegisterServiceProviderW",
    "FaxSendDocumentForBroadcastA",
    "FaxGetLoggingCategoriesA",
    "FaxStartPrintJobA",
    "FaxSetJobW",
    "FaxAbort",
    "FaxRegisterRoutingExtensionW",
    "FaxSetPortW",
    "FaxEnumPortsA",
    "FaxGetConfigurationW",
    "FaxSendDocumentForBroadcastW",
    "FaxSetConfigurationA",
    "FaxSetLoggingCategoriesA",
    "FaxEnumPortsW",
    "FaxEnumGlobalRoutingInfoW",
    "FaxGetPageData",
    "FaxSetConfigurationW",
    "FaxGetPortA",
    "FaxSetLoggingCategoriesW",
    "FaxGetJobA",
    "FaxSetJobA",
    "FaxSendDocumentA",
    "FaxSetGlobalRoutingInfoA",
    "FaxEnumRoutingMethodsA",
    "FaxAccessCheck",
    "FaxSetRoutingInfoA",
    "FaxGetRoutingInfoA",
    "FaxCompleteJobParamsW",
    "FaxEnumRoutingMethodsW",
    "FaxGetRoutingInfoW",
    "FaxConnectFaxServerW",
    "FaxOpenPort",
    "FaxGetDeviceStatusW",
    "FaxConnectFaxServerA"
  ],
  "winhttp.dll": [
    "WinHttpSendRequest",
    "WinHttpSetTimeouts",
    "WinHttpGetProxyForUrl",
    "WinHttpCreateUrl",
    "WinHttpSetStatusCallback",
    "WinHttpConnect",
    "WinHttpReceiveResponse",
    "WinHttpCrackUrl",
    "DllRegisterServer",
    "WinHttpCloseHandle",
    "WinHttpQueryDataAvailable",
    "WinHttpGetDefaultProxyConfiguration",
    "WinHttpGetIEProxyConfigForCurrentUser",
    "WinHttpSetCredentials",
    "WinHttpCheckPlatform",
    "WinHttpQueryOption",
    "DllGetClassObject",
    "WinHttpOpen",
    "WinHttpTimeToSystemTime",
    "WinHttpOpenRequest",
    "WinHttpSetDefaultProxyConfiguration",
    "WinHttpDetectAutoProxyConfigUrl",
    "WinHttpWriteData",
    "WinHttpQueryHeaders",
    "WinHttpSetOption",
    "DllCanUnloadNow",
    "WinHttpQueryAuthSchemes",
    "WinHttpReadData",
    "WinHttpTimeFromSystemTime",
    "WinHttpAddRequestHeaders",
    "DllUnregisterServer"
  ],
  "wininet.dll": [
    "InternetGoOnlineW",
    "DeleteUrlCacheEntry",
    "CreateUrlCacheGroup",
    "HttpAddRequestHeadersW",
    "InternetAutodialCallback",
    "CreateUrlCacheEntryA",
    "HttpQueryInfoW",
    "InternetGetCookieW",
    "InternetQueryFortezzaStatus",
    "InternetTimeFromSystemTime",
    "DeleteUrlCacheContainerW",
    "InternetCrackUrlW",
    "InternetSetFilePointer",
    "CreateUrlCacheContainerA",
    "ShowClientAuthCerts",
    "InternetOpenUrlA",
    "UrlZonesDetach",
    "UpdateUrlCacheContentPath",
    "InternetAttemptConnect",
    "InternetShowSecurityInfoByURLW",
    "FindCloseUrlCache",
    "SetUrlCacheConfigInfoW",
    "FindNextUrlCacheContainerW",
    "InternetCheckConnectionW",
    "FindFirstUrlCacheEntryA",
    "GopherCreateLocatorW",
    "HttpEndRequestA",
    "SetUrlCacheEntryInfoA",
    "InternetTimeFromSystemTimeA",
    "RunOnceUrlCache",
    "SetUrlCacheEntryGroupW",
    "FtpGetFileEx",
    "InternetCombineUrlA",
    "InternetShowSecurityInfoByURL",
    "UnlockUrlCacheEntryFile",
    "FindFirstUrlCacheEntryExW",
    "InternetCreateUrlA",
    "InternetGetSecurityInfoByURLW",
    "InternetSetDialState",
    "FtpPutFileW",
    "GetUrlCacheGroupAttributeW",
    "FtpSetCurrentDirectoryW",
    "SetUrlCacheEntryGroup",
    "InternetGetLastResponseInfoA",
    "GetUrlCacheEntryInfoExW",
    "InternetHangUp",
    "InternetSetOptionW",
    "FtpCommandW",
    "FtpFindFirstFileA",
    "ForceNexusLookupExW",
    "InternetSetCookieExA",
    "FreeUrlCacheSpaceA",
    "InternetUnlockRequestFile",
    "IsUrlCacheEntryExpiredW",
    "InternetShowSecurityInfoByURLA",
    "ShowCertificate",
    "FtpOpenFileW",
    "IsHostInProxyBypassList",
    "InternetFortezzaCommand",
    "InternetSecurityProtocolToStringA",
    "SetUrlCacheGroupAttributeW",
    "FindFirstUrlCacheGroup",
    "FtpRemoveDirectoryW",
    "FtpSetCurrentDirectoryA",
    "GetUrlCacheGroupAttributeA",
    "HttpEndRequestW",
    "InternetCrackUrlA",
    "InternetEnumPerSiteCookieDecisionW",
    "InternetGetSecurityInfoByURLA",
    "InternetSetDialStateA",
    "InternetSetPerSiteCookieDecisionA",
    "InternetAlgIdToStringW",
    "InternetSetStatusCallbackA",
    "InternetFindNextFileW",
    "HttpAddRequestHeadersA",
    "GetUrlCacheEntryInfoW",
    "ResumeSuspendedDownload",
    "InternetSetOptionExW",
    "FtpPutFileA",
    "InternetAutodialHangup",
    "InternetGetCertByURL",
    "InternetGetPerSiteCookieDecisionW",
    "InternetWriteFile",
    "FtpGetCurrentDirectoryW",
    "InternetWriteFileExW",
    "FindNextUrlCacheEntryExA",
    "ReadUrlCacheEntryStreamEx",
    "InternetConnectW",
    "InternetWriteFileExA",
    "InternetGetConnectedStateEx",
    "InternetCreateUrlW",
    "FtpFindFirstFileW",
    "InternetSetOptionExA",
    "CommitUrlCacheEntryA",
    "InternetGetPerSiteCookieDecisionA",
    "UnlockUrlCacheEntryStream",
    "ShowX509EncodedCertificate",
    "InternetQueryOptionW",
    "FreeUrlCacheSpaceW",
    "ParseX509EncodedCertificateForListBoxEntry",
    "InternetGetCookieA",
    "FtpGetCurrentDirectoryA",
    "InternetConfirmZoneCrossing",
    "InternetSetPerSiteCookieDecisionW",
    "HttpSendRequestW",
    "InternetQueryOptionA",
    "InternetReadFileExW",
    "InternetCanonicalizeUrlA",
    "RetrieveUrlCacheEntryStreamA",
    "GopherFindFirstFileW",
    "InternetCanonicalizeUrlW",
    "GopherFindFirstFileA",
    "InternetDial",
    "InternetQueryDataAvailable",
    "RetrieveUrlCacheEntryStreamW",
    "DllInstall",
    "GetUrlCacheEntryInfoA",
    "GopherOpenFileA",
    "InternetCombineUrlW",
    "InternetTimeToSystemTimeA",
    "InternetInitializeAutoProxyDll",
    "UnlockUrlCacheEntryFileW",
    "DeleteIE3Cache",
    "UnlockUrlCacheEntryFileA",
    "PrivacyGetZonePreferenceW",
    "InternetGetSecurityInfoByURL",
    "GopherGetAttributeW",
    "FindFirstUrlCacheContainerW",
    "HttpOpenRequestA",
    "GetUrlCacheConfigInfoW",
    "SetUrlCacheEntryGroupA",
    "InternetOpenW",
    "FtpDeleteFileA",
    "FtpGetFileSize",
    "InternetSetDialStateW",
    "FtpRenameFileA",
    "FtpCreateDirectoryA",
    "DeleteUrlCacheContainerA",
    "FtpGetFileA",
    "DeleteUrlCacheEntryW",
    "InternetGetLastResponseInfoW",
    "InternetGetCookieExW",
    "ShowSecurityInfo",
    "FtpCommandA",
    "FtpOpenFileA",
    "CreateUrlCacheEntryW",
    "FindFirstUrlCacheEntryW",
    "InternetSetStatusCallback",
    "RetrieveUrlCacheEntryFileA",
    "GopherGetLocatorTypeW",
    "LoadUrlCacheContent",
    "IncrementUrlCacheHeaderData",
    "InternetGoOnlineA",
    "InternetConfirmZoneCrossingA",
    "GopherGetLocatorTypeA",
    "InternetOpenUrlW",
    "InternetErrorDlg",
    "InternetSetOptionA",
    "PrivacySetZonePreferenceW",
    "DetectAutoProxyUrl",
    "InternetReadFileExA",
    "InternetTimeToSystemTime",
    "GopherCreateLocatorA",
    "FtpRemoveDirectoryA",
    "DeleteUrlCacheEntryA",
    "FindNextUrlCacheEntryExW",
    "FindNextUrlCacheGroup",
    "GetUrlCacheHeaderData",
    "InternetFindNextFileA",
    "RegisterUrlCacheNotification",
    "GetUrlCacheConfigInfoA",
    "InternetDialA",
    "_GetFileExtensionFromUrl",
    "InternetSetStatusCallbackW",
    "InternetGetConnectedStateExA",
    "SetUrlCacheConfigInfoA",
    "CreateUrlCacheContainerW",
    "HttpSendRequestExA",
    "FindFirstUrlCacheEntryExA",
    "InternetGetConnectedState",
    "InternetTimeFromSystemTimeW",
    "GopherGetAttributeA",
    "InternetCloseHandle",
    "ReadUrlCacheEntryStream",
    "InternetClearAllPerSiteCookieDecisions",
    "FindFirstUrlCacheContainerA",
    "GopherOpenFileW",
    "InternetReadFile",
    "InternetCheckConnectionA",
    "InternetSecurityProtocolToStringW",
    "SetUrlCacheHeaderData",
    "InternetGetConnectedStateExW",
    "InternetGetCookieExA",
    "HttpQueryInfoA",
    "InternetGetCertByURLA",
    "InternetConnectA",
    "GetUrlCacheEntryInfoExA",
    "CommitUrlCacheEntryW",
    "FindNextUrlCacheEntryA",
    "InternetGoOnline",
    "InternetEnumPerSiteCookieDecisionA",
    "InternetTimeToSystemTimeW",
    "InternetLockRequestFile",
    "DeleteWpadCacheForNetworks",
    "IsUrlCacheEntryExpiredA",
    "ForceNexusLookup",
    "InternetDialW",
    "RetrieveUrlCacheEntryFileW",
    "CreateMD5SSOHash",
    "InternetSetCookieW",
    "InternetAlgIdToStringA",
    "FtpRenameFileW",
    "InternetSetCookieExW",
    "FtpDeleteFileW",
    "HttpSendRequestA",
    "HttpOpenRequestW",
    "HttpSendRequestExW",
    "HttpCheckDavCompliance",
    "FindNextUrlCacheContainerA",
    "DeleteUrlCacheGroup",
    "FtpPutFileEx",
    "DispatchAPICall",
    "FtpCreateDirectoryW",
    "InternetSetCookieA",
    "FtpGetFileW",
    "SetUrlCacheEntryInfoW",
    "SetUrlCacheGroupAttributeA",
    "InternetOpenA",
    "InternetConfirmZoneCrossingW",
    "FindNextUrlCacheEntryW",
    "InternetAutodial"
  ],
  "winipsec.dll": [
    "QueryIPSecStatistics",
    "QueryIKENotifyData",
    "SetConfigurationVariables",
    "GetTransportFilter",
    "EnumMMSAs",
    "AddTransportFilter",
    "MatchTunnelFilter",
    "QueryIKENegotiationStatus",
    "GetQMPolicyByID",
    "CloseTunnelFilterHandle",
    "DeleteMMPolicy",
    "OpenMMFilterHandle",
    "SetTransportFilter",
    "MatchMMFilter",
    "SetTunnelFilter",
    "MatchTransportFilter",
    "EnumIPSecInterfaces",
    "AddTunnelFilter",
    "QueryIKEStatistics",
    "CloseTransportFilterHandle",
    "SetMMAuthMethods",
    "EnumTunnelFilters",
    "DeleteMMAuthMethods",
    "CloseIKENegotiationHandle",
    "GetConfigurationVariables",
    "RegisterIKENotifyClient",
    "OpenTunnelFilterHandle",
    "EnumQMSAs",
    "DeleteQMSAs",
    "CloseIKENotifyHandle",
    "QuerySpdPolicyState",
    "DeleteQMPolicy",
    "EnumMMPolicies",
    "EnumMMFilters",
    "EnumQMPolicies",
    "GetMMPolicy",
    "AddMMFilter",
    "DeleteMMSAs",
    "GetMMAuthMethods",
    "GetTunnelFilter",
    "EnumTransportFilters",
    "SPDApiBufferFree",
    "SPDApiBufferAllocate",
    "SetMMPolicy",
    "DeleteMMFilter",
    "AddSAs",
    "AddQMPolicy",
    "CloseMMFilterHandle",
    "GetMMPolicyByID",
    "InitiateIKENegotiation",
    "SetMMFilter",
    "AddMMPolicy",
    "DeleteTransportFilter",
    "GetQMPolicy",
    "SetQMPolicy",
    "OpenTransportFilterHandle",
    "EnumMMAuthMethods",
    "GetMMFilter",
    "DeleteTunnelFilter",
    "AddMMAuthMethods"
  ],
  "winmm.dll": [
    "mmioSetBuffer",
    "midiOutMessage",
    "waveInMessage",
    "timeGetTime",
    "gfxAddGfx",
    "WOW32ResolveMultiMediaHandle",
    "waveOutGetDevCapsA",
    "waveInGetErrorTextA",
    "joy32Message",
    "mixerGetDevCapsA",
    "midiInOpen",
    "gfxEnumerateGfxs",
    "MigrateAllDrivers",
    "waveInAddBuffer",
    "mmTaskYield",
    "mciGetDeviceIDW",
    "midiOutGetID",
    "joyGetPos",
    "gfxBatchChange",
    "waveOutWrite",
    "mciSetDriverData",
    "mod32Message",
    "midiStreamClose",
    "gfxOpenGfx",
    "mmTaskSignal",
    "mmioInstallIOProcW",
    "midiOutLongMsg",
    "mmioOpenA",
    "waveOutSetPlaybackRate",
    "mixerClose",
    "midiInStart",
    "midiOutGetErrorTextW",
    "waveOutReset",
    "midiStreamPosition",
    "midiInGetID",
    "mciExecute",
    "wod32Message",
    "mixerOpen",
    "mciDriverNotify",
    "mixerGetControlDetailsW",
    "waveInGetErrorTextW",
    "timeEndPeriod",
    "timeGetDevCaps",
    "mixerGetLineControlsW",
    "mmioRead",
    "gfxCreateZoneFactoriesList",
    "waveOutPause",
    "midiOutSetVolume",
    "midiInGetNumDevs",
    "midiDisconnect",
    "mciFreeCommandResource",
    "mixerGetNumDevs",
    "mixerGetLineInfoA",
    "mmGetCurrentTask",
    "midiOutShortMsg",
    "waveInStart",
    "midiOutGetVolume",
    "midiInClose",
    "DriverCallback",
    "MigrateSoundEvents",
    "mciSendStringW",
    "waveInGetPosition",
    "sndPlaySoundA",
    "waveOutGetErrorTextA",
    "mmioCreateChunk",
    "mmioStringToFOURCCW",
    "mmioSendMessage",
    "WinmmLogon",
    "mmTaskCreate",
    "waveInClose",
    "midiStreamOut",
    "_gfxLogoff@0",
    "gfxModifyGfx",
    "mciGetCreatorTask",
    "midiInPrepareHeader",
    "mmioDescend",
    "auxGetNumDevs",
    "joySetCapture",
    "midiInGetErrorTextW",
    "waveOutSetPitch",
    "midiOutPrepareHeader",
    "mciLoadCommandResource",
    "midiInMessage",
    "mixerMessage",
    "mxd32Message",
    "waveInGetDevCapsA",
    "mmioGetInfo",
    "midiOutCachePatches",
    "DrvGetModuleHandle",
    "mciSendCommandA",
    "_gfxLogon@4",
    "gfxRemoveGfx",
    "midiOutGetDevCapsA",
    "mmioRenameW",
    "tid32Message",
    "waveOutPrepareHeader",
    "midiOutClose",
    "winmmDbgOut",
    "midiStreamRestart",
    "auxGetDevCapsA",
    "joyGetDevCapsW",
    "mixerSetControlDetails",
    "auxOutMessage",
    "mciGetDeviceIDA",
    "mmioClose",
    "midiStreamProperty",
    "mixerGetID",
    "mciDriverYield",
    "waveInGetDevCapsW",
    "midiConnect",
    "aux32Message",
    "mmsystemGetVersion",
    "mmioWrite",
    "waveOutGetPitch",
    "waveInReset",
    "midiOutCacheDrumPatches",
    "mixerGetLineInfoW",
    "mmioSeek",
    "mciSendStringA",
    "gfxDestroyDeviceInterfaceList",
    "midiInStop",
    "mmioSetInfo",
    "waveOutGetDevCapsW",
    "waveOutGetID",
    "midiOutGetErrorTextA",
    "winmmSetDebugLevel",
    "OpenDriver",
    "mciSetYieldProc",
    "waveOutGetErrorTextW",
    "auxGetDevCapsW",
    "mmTaskBlock",
    "waveInUnprepareHeader",
    "mciSendCommandW",
    "mmioStringToFOURCCA",
    "mixerGetDevCapsW",
    "midiInGetDevCapsW",
    "mid32Message",
    "midiInGetDevCapsA",
    "joySetThreshold",
    "timeSetEvent",
    "midiOutOpen",
    "mmioAdvance",
    "midiInGetErrorTextA",
    "mixerGetLineControlsA",
    "waveOutBreakLoop",
    "joyConfigChanged",
    "gfxCreateGfxFactoriesList",
    "WOW32DriverCallback",
    "mciGetErrorStringW",
    "midiInAddBuffer",
    "waveOutGetPlaybackRate",
    "midiOutGetDevCapsW",
    "waveOutClose",
    "auxSetVolume",
    "mmioRenameA",
    "waveOutGetNumDevs",
    "waveInGetID",
    "GetDriverModuleHandle",
    "sndPlaySoundW",
    "auxGetVolume",
    "midiOutGetNumDevs",
    "midiStreamOpen",
    "waveInPrepareHeader",
    "midiStreamStop",
    "waveOutOpen",
    "joyGetNumDevs",
    "mciGetDeviceIDFromElementIDA",
    "timeBeginPeriod",
    "midiStreamPause",
    "SendDriverMessage",
    "mciGetYieldProc",
    "mmDrvInstall",
    "mmioAscend",
    "waveOutMessage",
    "waveOutSetVolume",
    "mciGetDriverData",
    "joyGetDevCapsA",
    "mmioFlush",
    "timeGetSystemTime",
    "waveInGetNumDevs",
    "waveOutUnprepareHeader",
    "NotifyCallbackData",
    "waveInStop",
    "waveOutGetPosition",
    "mmioOpenW",
    "PlaySound",
    "CloseDriver",
    "timeKillEvent",
    "waveOutRestart",
    "WOWAppExit",
    "PlaySoundA",
    "mixerGetControlDetailsA",
    "wid32Message",
    "mmioInstallIOProcA",
    "DefDriverProc",
    "midiInReset",
    "PlaySoundW",
    "waveOutGetVolume",
    "mci32Message",
    "mciGetDeviceIDFromElementIDW",
    "joyGetThreshold",
    "midiOutUnprepareHeader",
    "waveInOpen",
    "WinmmLogoff",
    "mciGetErrorStringA",
    "joyReleaseCapture",
    "midiInUnprepareHeader",
    "midiOutReset",
    "joyGetPosEx"
  ],
  "winntbbu.dll": [
    "SetStep",
    "SetTimeEstimate",
    "ShowProgressGaugeWindow",
    "SetProgress",
    "SetInfoText",
    "InitBillBoard",
    "BB_Refresh",
    "SetProgressText",
    "GetPanelCount",
    "StartBillBoard",
    "TermBillBoard",
    "GetBBHwnd",
    "GetBBMainHwnd",
    "StopBillBoard",
    "ProgressGaugeMsg"
  ],
  "winrnr.dll": [
    "NSPStartup",
    "InstallNTDSProvider",
    "RemoveNTDSProvider"
  ],
  "winscard.dll": [
    "SCardAccessNewReaderEvent",
    "SCardGetProviderIdA",
    "SCardIntroduceReaderGroupA",
    "SCardIntroduceReaderA",
    "SCardReleaseAllEvents",
    "SCardIntroduceReaderW",
    "SCardSetCardTypeProviderNameA",
    "SCardForgetReaderGroupW",
    "SCardSetCardTypeProviderNameW",
    "SCardAccessStartedEvent",
    "g_rgSCardT1Pci",
    "SCardGetProviderIdW",
    "SCardReleaseNewReaderEvent",
    "g_rgSCardRawPci",
    "SCardAddReaderToGroupA",
    "SCardListReaderGroupsA",
    "SCardGetStatusChangeW",
    "SCardListInterfacesA",
    "SCardIntroduceCardTypeW",
    "SCardAddReaderToGroupW",
    "SCardState",
    "SCardBeginTransaction",
    "SCardListReadersW",
    "SCardGetAttrib",
    "SCardReleaseStartedEvent",
    "SCardForgetReaderA",
    "SCardIntroduceReaderGroupW",
    "SCardListCardsA",
    "SCardFreeMemory",
    "SCardEstablishContext",
    "SCardReconnect",
    "SCardRemoveReaderFromGroupA",
    "SCardConnectW",
    "SCardListInterfacesW",
    "SCardListReadersA",
    "SCardStatusA",
    "SCardConnectA",
    "ClassInstall32",
    "SCardStatusW",
    "SCardRemoveReaderFromGroupW",
    "SCardForgetCardTypeW",
    "SCardSetAttrib",
    "SCardIntroduceCardTypeA",
    "SCardLocateCardsByATRW",
    "SCardReleaseContext",
    "SCardGetStatusChangeA",
    "SCardEndTransaction",
    "SCardLocateCardsByATRA",
    "SCardLocateCardsA",
    "SCardGetCardTypeProviderNameA",
    "SCardCancel",
    "SCardListReaderGroupsW",
    "SCardDisconnect",
    "SCardLocateCardsW",
    "SCardForgetReaderGroupA",
    "SCardTransmit",
    "SCardListCardsW",
    "SCardForgetCardTypeA",
    "SCardIsValidContext",
    "SCardGetCardTypeProviderNameW",
    "g_rgSCardT0Pci",
    "SCardControl",
    "SCardForgetReaderW"
  ],
  "winshfhc.dll": "No exports",
  "winsrv.dll": [
    "ConServerDllInitialization",
    "_UserTestTokenForInteractive",
    "UserServerDllInitialization",
    "_UserSoundSentry"
  ],
  "winsta.dll": [
    "RemoteAssistancePrepareSystemRestore",
    "WinStationQueryUpdateRequired",
    "ServerLicensingOpenW",
    "WinStationSetInformationW",
    "_WinStationCheckForApplicationName",
    "WinStationWaitSystemEvent",
    "ServerLicensingGetPolicyInformationA",
    "WinStationNtsdDebug",
    "WinStationOpenServerW",
    "WinStationRegisterConsoleNotification",
    "WinStationGetLanAdapterNameW",
    "WinStationRemoveLicense",
    "ServerLicensingUnloadPolicy",
    "WinStationQueryInformationA",
    "ServerLicensingDeactivateCurrentPolicy",
    "_WinStationCallback",
    "_WinStationNotifyNewSession",
    "WinStationShutdownSystem",
    "WinStationSendWindowMessage",
    "_WinStationBeepOpen",
    "WinStationEnumerateA",
    "WinStationTerminateProcess",
    "WinStationRenameW",
    "ServerLicensingOpenA",
    "ServerSetInternetConnectorStatus",
    "WinStationBroadcastSystemMessage",
    "_WinStationNotifyLogon",
    "ServerQueryInetConnectorInformationW",
    "LogonIdFromWinStationNameW",
    "WinStationReset",
    "ServerQueryInetConnectorInformationA",
    "WinStationShadow",
    "WinStationServerPing",
    "WinStationGetMachinePolicy",
    "ServerLicensingFreePolicyInformation",
    "LogonIdFromWinStationNameA",
    "WinStationOpenServerA",
    "WinStationAutoReconnect",
    "WinStationRenameA",
    "WinStationUnRegisterConsoleNotification",
    "_WinStationReInitializeSecurity",
    "_WinStationFUSCanRemoteUserDisconnect",
    "_WinStationUpdateSettings",
    "WinStationConnectCallback",
    "WinStationGetTermSrvCountersValue",
    "WinStationCloseServer",
    "WinStationGetLanAdapterNameA",
    "WinStationSendMessageA",
    "_WinStationUpdateClientCachedCredentials",
    "_WinStationAnnoyancePopup",
    "ServerLicensingGetPolicyInformationW",
    "WinStationConnectW",
    "_NWLogonSetAdmin",
    "WinStationNameFromLogonIdA",
    "WinStationEnumerateW",
    "_WinStationGetApplicationInfo",
    "ServerLicensingGetPolicy",
    "WinStationDisconnect",
    "WinStationVirtualOpen",
    "_WinStationNotifyLogoff",
    "WinStationGetAllProcesses",
    "WinStationCheckLoopBack",
    "WinStationEnumerateLicenses",
    "_WinStationShadowTarget",
    "WinStationQueryLogonCredentialsW",
    "_WinStationNotifyDisconnectPipe",
    "_WinStationWaitForConnect",
    "WinStationQueryLicense",
    "WinStationRequestSessionsList",
    "WinStationConnectA",
    "WinStationGetProcessSid",
    "WinStationIsHelpAssistantSession",
    "WinStationEnumerate_IndexedW",
    "ServerLicensingSetPolicy",
    "WinStationEnumerateProcesses",
    "WinStationShadowStop",
    "WinStationActivateLicense",
    "_WinStationBreakPoint",
    "WinStationNameFromLogonIdW",
    "WinStationEnumerate_IndexedA",
    "_NWLogonQueryAdmin",
    "WinStationQueryInformationW",
    "WinStationSendMessageW",
    "WinStationFreeGAPMemory",
    "_WinStationShadowTargetSetup",
    "ServerLicensingLoadPolicy",
    "WinStationFreeMemory",
    "_WinStationUpdateUserConfig",
    "WinStationGenerateLicense",
    "ServerLicensingClose",
    "ServerGetInternetConnectorStatus",
    "ServerLicensingGetAvailablePolicyIds",
    "_WinStationReadRegistry",
    "WinStationSetPoolCount",
    "WinStationSetInformationA",
    "WinStationInstallLicense"
  ],
  "winstrm.dll": [
    "putmsg",
    "OpenStream",
    "s_ioctl",
    "getmsg",
    "s_open",
    "poll",
    "s_perror"
  ],
  "wintrust.dll": [
    "WVTAsn1SpcSpOpusInfoDecode",
    "CryptCATGetCatAttrInfo",
    "TrustOpenStores",
    "CryptCATAdminResolveCatalogPath",
    "WVTAsn1SpcMinimalCriteriaInfoEncode",
    "WintrustCertificateTrust",
    "OfficeInitializePolicy",
    "SoftpubFreeDefUsageCallData",
    "HTTPSFinalProv",
    "IsCatalogFile",
    "DriverInitializePolicy",
    "WTHelperGetProvCertFromChain",
    "WTHelperCertFindIssuerCertificate",
    "CryptCATCDFEnumAttributesWithCDFTag",
    "WVTAsn1SpcLinkDecode",
    "CryptCATEnumerateMember",
    "WinVerifyTrust",
    "SoftpubAuthenticode",
    "WintrustGetDefaultForUsage",
    "WVTAsn1SpcSigInfoEncode",
    "CryptCATCDFClose",
    "SoftpubDumpStructure",
    "WVTAsn1SpcStatementTypeDecode",
    "CryptCATAdminPauseServiceForBackup",
    "WTHelperCertCheckValidSignature",
    "WintrustSetRegPolicyFlags",
    "TrustFreeDecode",
    "CryptCATAdminEnumCatalogFromHash",
    "WVTAsn1SpcPeImageDataDecode",
    "CryptSIPPutSignedDataMsg",
    "HTTPSCertificateTrust",
    "WVTAsn1SpcSigInfoDecode",
    "CryptCATCDFEnumMembers",
    "CryptCATAdminCalcHashFromFileHandle",
    "CryptCATPersistStore",
    "CryptCATVerifyMember",
    "MsCatFreeHashTag",
    "WintrustGetRegPolicyFlags",
    "OpenPersonalTrustDBDialogEx",
    "CryptCATAdminAcquireContext",
    "WintrustAddActionID",
    "WTHelperCheckCertUsage",
    "WVTAsn1SpcIndirectDataContentDecode",
    "OpenPersonalTrustDBDialog",
    "WTHelperOpenKnownStores",
    "WTHelperGetFileHandle",
    "WVTAsn1SpcIndirectDataContentEncode",
    "WVTAsn1SpcStatementTypeEncode",
    "WVTAsn1CatNameValueDecode",
    "CryptCATAdminReleaseContext",
    "SoftpubInitialize",
    "TrustDecode",
    "WintrustLoadFunctionPointers",
    "CryptCATCDFEnumMembersByCDFTag",
    "WVTAsn1SpcSpAgencyInfoDecode",
    "CryptCATCDFEnumMembersByCDFTagEx",
    "GenericChainCertificateTrust",
    "WTHelperGetAgencyInfo",
    "CryptCATPutAttrInfo",
    "WinVerifyTrustEx",
    "CryptCATAdminRemoveCatalog",
    "DllUnregisterServer",
    "CryptCATCDFOpen",
    "GenericChainFinalProv",
    "WVTAsn1SpcFinancialCriteriaInfoEncode",
    "CryptCATGetMemberInfo",
    "CryptSIPCreateIndirectData",
    "AddPersonalTrustDBPages",
    "WVTAsn1CatMemberInfoDecode",
    "CryptCATEnumerateAttr",
    "WVTAsn1SpcSpOpusInfoEncode",
    "CryptSIPGetInfo",
    "WVTAsn1SpcMinimalCriteriaInfoDecode",
    "SoftpubCleanup",
    "CryptCATGetAttrInfo",
    "WTHelperIsInRootStore",
    "SoftpubDllUnregisterServer",
    "WVTAsn1SpcFinancialCriteriaInfoDecode",
    "FindCertsByIssuer",
    "WTHelperGetKnownUsages",
    "MsCatConstructHashTag",
    "CryptCATStoreFromHandle",
    "WTHelperGetProvPrivateDataFromChain",
    "WVTAsn1SpcPeImageDataEncode",
    "WVTAsn1CatMemberInfoEncode",
    "CryptCATAdminReleaseCatalogContext",
    "SoftpubCheckCert",
    "CryptCATHandleFromStore",
    "DriverFinalPolicy",
    "mssip32DllUnregisterServer",
    "SoftpubLoadDefUsageCallData",
    "OfficeCleanupPolicy",
    "WTHelperGetProvSignerFromChain",
    "CryptSIPGetRegWorkingFlags",
    "CatalogCompactHashDatabase",
    "mscat32DllRegisterServer",
    "CryptSIPVerifyIndirectData",
    "CryptCATCDFEnumAttributes",
    "CryptCATEnumerateCatAttr",
    "CryptCATPutMemberInfo",
    "TrustFindIssuerCertificate",
    "mssip32DllRegisterServer",
    "SoftpubDllRegisterServer",
    "WVTAsn1CatNameValueEncode",
    "I_CryptCatAdminMigrateToNewCatDB",
    "CryptSIPRemoveSignedDataMsg",
    "DllRegisterServer",
    "CryptSIPGetSignedDataMsg",
    "CryptCATClose",
    "CryptCATPutCatAttrInfo",
    "CryptCATAdminAddCatalog",
    "WTHelperCertIsSelfSigned",
    "WTHelperProvDataFromStateData",
    "mscat32DllUnregisterServer",
    "TrustIsCertificateSelfSigned",
    "CryptCATOpen",
    "SoftpubDefCertInit",
    "WintrustRemoveActionID",
    "SoftpubLoadSignature",
    "CryptCATCDFEnumCatAttributes",
    "WVTAsn1SpcLinkEncode",
    "WTHelperGetFileName",
    "CryptCATCatalogInfoFromContext",
    "SoftpubLoadMessage",
    "WTHelperGetFileHash",
    "WintrustAddDefaultForUsage",
    "WVTAsn1SpcSpAgencyInfoEncode",
    "DriverCleanupPolicy"
  ],
  "wkssvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "wlanapi.dll": [
    "WlanScan",
    "WlanGetSecuritySettings",
    "WlanGetProfileList",
    "WlanSetProfileEapXmlUserData",
    "WlanSetProfileCustomUserData",
    "WlanSetProfileList",
    "WlanFreeMemory",
    "WlanEnumInterfaces",
    "WlanSetAutoConfigParameter",
    "WlanGetFilterList",
    "WlanRegisterNotification",
    "WlanAllocateMemory",
    "WlanReasonCodeToString",
    "WlanQueryAutoConfigParameter",
    "WlanDeleteProfile",
    "WlanSetProfile",
    "WlanRenameProfile",
    "WlanGetInterfaceCapability",
    "WlanGetNetworkBssList",
    "WlanDisconnect",
    "WlanGetProfileCustomUserData",
    "WlanSetSecuritySettings",
    "WlanGetProfile",
    "WlanGetAvailableNetworkList",
    "WlanQueryInterface",
    "WlanSetProfileEapUserData",
    "WlanSetFilterList",
    "WlanExtractPsdIEDataList",
    "WlanIhvControl",
    "WlanOpenHandle",
    "WlanCloseHandle",
    "WlanConnect",
    "WlanSaveTemporaryProfile",
    "WlanSetProfilePosition",
    "WlanSetInterface",
    "WlanSetPsdIEDataList"
  ],
  "wldap32.dll": [
    "ldap_ufn2dnA",
    "ldap_search_ext",
    "ldap_get_values_len",
    "ldap_rename_ext_sA",
    "ldap_search_init_pageW",
    "ldap_modify_extA",
    "ldap_extended_operation_sW",
    "ldap_count_valuesW",
    "ldap_add_ext_s",
    "cldap_openA",
    "ber_flatten",
    "ldap_search_extW",
    "ldap_bind_sW",
    "ldap_parse_page_controlW",
    "ldap_search_extA",
    "ldap_rename_extA",
    "ldap_check_filterW",
    "ldap_add_s",
    "ldap_parse_sort_controlA",
    "ldap_escape_filter_elementA",
    "ber_free",
    "ldap_modify_ext_sW",
    "ldap_delete",
    "ldap_modify_ext_sA",
    "ldap_memfree",
    "ber_scanf",
    "ldap_modrdn",
    "ldap_delete_sA",
    "ldap_parse_page_control",
    "ldap_parse_referenceA",
    "ldap_parse_result",
    "ldap_search_ext_sW",
    "ldap_first_attribute",
    "ldap_set_optionW",
    "ldap_next_attributeW",
    "ldap_modrdnW",
    "ldap_compare_sA",
    "cldap_openW",
    "ldap_count_values",
    "ldap_result",
    "ldap_free_controlsA",
    "ldap_modify_sA",
    "ldap_sslinitW",
    "ldap_get_valuesW",
    "ldap_sslinitA",
    "ldap_delete_extA",
    "ldap_parse_sort_control",
    "ldap_value_freeA",
    "ldap_next_attribute",
    "ldap_create_sort_control",
    "ber_alloc_t",
    "ldap_perror",
    "ldap_modify_s",
    "ldap_add_ext",
    "ldap_delete_s",
    "ldap_compareW",
    "ldap_search_st",
    "ldap_count_references",
    "ldap_add_extA",
    "ldap_get_next_page_s",
    "ldap_ufn2dnW",
    "ldap_controls_freeA",
    "LdapUTF8ToUnicode",
    "ldap_get_optionW",
    "ldap_create_page_controlA",
    "cldap_open",
    "ldap_modrdnA",
    "ldap_parse_page_controlA",
    "LdapGetLastError",
    "ldap_dn2ufnW",
    "ber_bvecfree",
    "ldap_modrdn_sW",
    "ldap_value_free_len",
    "ldap_add_extW",
    "ldap_unbind_s",
    "ldap_deleteA",
    "ldap_sasl_bind_sW",
    "ldap_dn2ufn",
    "ldap_create_sort_controlW",
    "ldap_first_attributeW",
    "ldap_modify_ext_s",
    "ldap_parse_sort_controlW",
    "ldap_sasl_bindA",
    "ldap_sasl_bindW",
    "ldap_stop_tls_s",
    "ldap_search_s",
    "LdapUnicodeToUTF8",
    "ldap_set_dbg_routine",
    "ldap_get_dnA",
    "ldap_err2stringW",
    "ldap_simple_bind_sW",
    "ldap_delete_ext_sW",
    "ldap_explode_dnA",
    "ldap_first_reference",
    "ldap_modify_ext",
    "ldap_create_vlv_controlW",
    "ldap_create_vlv_controlA",
    "ldap_encode_sort_controlA",
    "ldap_value_freeW",
    "ber_bvdup",
    "ldap_bind_s",
    "ber_printf",
    "ldap_check_filterA",
    "ldap_modify",
    "ldap_compareA",
    "ldap_next_entry",
    "ldap_parse_reference",
    "ldap_count_values_len",
    "ldap_delete_sW",
    "ldap_get_dn",
    "ldap_initW",
    "ldap_unbind",
    "ldap_escape_filter_elementW",
    "ldap_search_sW",
    "ldap_conn_from_msg",
    "ldap_get_values_lenW",
    "ldap_bindA",
    "ber_bvfree",
    "ldap_search_stW",
    "ldap_controls_free",
    "ldap_create_page_control",
    "ldap_delete_ext_sA",
    "ldap_search_init_page",
    "ldap_simple_bindA",
    "ldap_compare_ext",
    "ldap_search_sA",
    "ldap_initA",
    "ldap_dn2ufnA",
    "ldap_parse_vlv_controlW",
    "ldap_value_free",
    "ldap_add_ext_sW",
    "ldap_err2stringA",
    "ldap_get_values_lenA",
    "ldap_deleteW",
    "ldap_controls_freeW",
    "ldap_control_freeW",
    "ldap_parse_resultA",
    "ldap_set_option",
    "ldap_extended_operation",
    "ldap_add_sA",
    "ldap_create_sort_controlA",
    "ldap_bindW",
    "ldap_delete_extW",
    "ldap_bind_sA",
    "ldap_modify_sW",
    "ldap_free_controls",
    "ldap_get_next_page",
    "ldap_modrdn2_sA",
    "ldap_startup",
    "ldap_first_attributeA",
    "ldap_searchW",
    "ldap_rename_ext_sW",
    "ldap_explode_dn",
    "ldap_ufn2dn",
    "ldap_next_attributeA",
    "ldap_openA",
    "ldap_rename_extW",
    "ldap_compare_sW",
    "ldap_simple_bindW",
    "ldap_compare",
    "ldap_parse_referenceW",
    "ldap_free_controlsW",
    "ldap_get_dnW",
    "ldap_addA",
    "ldap_compare_extW",
    "ldap_openW",
    "ldap_bind",
    "LdapMapErrorToWin32",
    "ldap_control_free",
    "ldap_create_page_controlW",
    "ldap_get_option",
    "ldap_modrdn_sA",
    "ldap_result2error",
    "ldap_get_paged_count",
    "ldap_count_valuesA",
    "ldap_parse_extended_resultW",
    "ldap_msgfree",
    "ldap_rename_ext_s",
    "ldap_modify_extW",
    "ldap_parse_extended_resultA",
    "ber_next_element",
    "ldap_modifyW",
    "ldap_extended_operationW",
    "ldap_search_ext_sA",
    "ldap_memfreeW",
    "ldap_set_dbg_flags",
    "ldap_add",
    "ldap_simple_bind",
    "ldap_compare_s",
    "ldap_err2string",
    "ldap_extended_operation_sA",
    "ldap_add_ext_sA",
    "ldap_encode_sort_controlW",
    "ldap_delete_ext",
    "ber_skip_tag",
    "ldap_parse_resultW",
    "ldap_sasl_bind_sA",
    "ldap_parse_vlv_controlA",
    "ldap_compare_ext_s",
    "ldap_searchA",
    "ldap_modrdn_s",
    "ldap_set_optionA",
    "ber_init",
    "ldap_delete_ext_s",
    "ldap_connect",
    "ber_peek_tag",
    "ldap_rename_ext",
    "ldap_get_optionA",
    "ldap_add_sW",
    "ldap_next_reference",
    "ldap_search_stA",
    "ldap_start_tls_sA",
    "ldap_close_extended_op",
    "ldap_compare_ext_sW",
    "ldap_get_values",
    "ldap_memfreeA",
    "ldap_init",
    "ldap_modifyA",
    "ldap_simple_bind_s",
    "ldap_simple_bind_sA",
    "ber_first_element",
    "ldap_search_ext_s",
    "ldap_control_freeA",
    "ldap_modrdn2W",
    "ldap_explode_dnW",
    "ldap_sslinit",
    "ldap_cleanup",
    "ldap_escape_filter_element",
    "ldap_search",
    "ldap_compare_ext_sA",
    "ldap_extended_operationA",
    "ldap_count_entries",
    "ldap_compare_extA",
    "ldap_modrdn2_sW",
    "ldap_modrdn2A",
    "ldap_get_valuesA",
    "ldap_open",
    "ldap_search_init_pageA",
    "ldap_addW",
    "ldap_start_tls_sW",
    "ldap_first_entry",
    "ldap_search_abandon_page",
    "ldap_abandon",
    "ldap_modrdn2",
    "ldap_modrdn2_s"
  ],
  "wlnotify.dll": [
    "SensDisconnectEvent",
    "SchedEventLogOff",
    "SensUnlockEvent",
    "SensStartupEvent",
    "TSEventShutdown",
    "TSEventDisconnect",
    "SensStartShellEvent",
    "SchedStartShell",
    "SensStopScreenSaverEvent",
    "SensLogoffEvent",
    "SCardStopCertProp",
    "SensLogonEvent",
    "TSEventStartup",
    "TermsrvCreateTempDir",
    "TSEventReconnect",
    "SensStartScreenSaverEvent",
    "SensPostShellEvent",
    "TSEventPostShell",
    "SCardSuspendCertProp",
    "SCardStartCertProp",
    "RegisterTicketExpiredNotificationEvent",
    "TSEventStartShell",
    "SensShutdownEvent",
    "ShowNotificationBalloonW",
    "SensReconnectEvent",
    "SensLockEvent",
    "TSEventLogon",
    "UnregisterTicketExpiredNotificationEvent",
    "SCardResumeCertProp",
    "TSEventLogoff"
  ],
  "wmadmod.dll": [
    "CreateInstance",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wmadmoe.dll": [
    "CreateInstance",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wmasf.dll": [
    "ASFTimeToSendTime",
    "ASFGetDataUnitInfo",
    "ASFGetRootObject",
    "ASFSendTimeToTime",
    "CreateAsfCellPoolAllocator",
    "ASFFindRootObject",
    "ASFCreateStreamSelector",
    "ASFCreateBitrateTracker",
    "ASFSendTimeToPresTime",
    "ASFTimeToPresDeltaTime",
    "ASFPresDeltaToFull",
    "ASFCreateMediaObjectIndexMaker",
    "ASFCreateIndexMakerFileSink",
    "ASFWriteHeaderToFile",
    "ASFSetDataUnitInfo",
    "ASFPresDeltaTimeToTime",
    "ASFGetHeaderObject",
    "ASFPresTimeToTime",
    "ASFGetStreamPropertiesObject",
    "ASFCalculatePresDelta",
    "ASFCreateIndexMaker",
    "ASFReadHeaderFromFile",
    "ASFGUIDToCodecID",
    "ASFPresTimeToSendTime",
    "ASFGUIDFromCodecID",
    "ASFReadHeaderFromFileHandle",
    "ASFFindHeaderObject",
    "ASFCreateLibrary",
    "ASFTimeToPresTime",
    "ASFAddSendDelta",
    "ASFFindStreamPropertiesObject",
    "ASFGetTimeBase",
    "ASFAddPresDelta",
    "ASFPresFullToDelta",
    "ASFCreateIOMonitor"
  ],
  "wmdmlog.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wmdmps.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wmerrenu.dll": "No exports",
  "wmerror.dll": "No exports",
  "wmi.dll": [
    "WmiEnumerateGuids",
    "WmiQueryAllDataA",
    "CreateTraceInstanceId",
    "WmiSetSingleInstanceA",
    "WmiCloseBlock",
    "WmiExecuteMethodA",
    "QueryAllTracesA",
    "WmiFreeBuffer",
    "WmiExecuteMethodW",
    "CloseTrace",
    "SetTraceCallback",
    "WmiQueryGuidInformation",
    "WmiQuerySingleInstanceA",
    "RegisterTraceGuidsW",
    "WmiFileHandleToInstanceNameW",
    "WmiDevInstToInstanceNameW",
    "EnableTrace",
    "WmiSetSingleItemA",
    "TraceEvent",
    "WmiQuerySingleInstanceW",
    "StartTraceA",
    "GetTraceLoggerHandle",
    "OpenTraceW",
    "StartTraceW",
    "WmiSetSingleInstanceW",
    "ControlTraceA",
    "ControlTraceW",
    "WmiOpenBlock",
    "GetTraceEnableLevel",
    "RegisterTraceGuidsA",
    "OpenTraceA",
    "GetTraceEnableFlags",
    "QueryAllTracesW",
    "WmiFileHandleToInstanceNameA",
    "WmiNotificationRegistrationA",
    "TraceEventInstance",
    "UnregisterTraceGuids",
    "WmiDevInstToInstanceNameA",
    "WmiSetSingleItemW",
    "WmiMofEnumerateResourcesW",
    "WmiNotificationRegistrationW",
    "WmiQueryAllDataW",
    "WmiMofEnumerateResourcesA",
    "ProcessTrace",
    "RemoveTraceCallback"
  ],
  "wmidx.dll": [
    "WMCreateASFChopper"
  ],
  "wmiprop.dll": [
    "WmiPropCoInstaller"
  ],
  "wmiscmgr.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wmnetmgr.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wmp.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wmpasf.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wmpcd.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wmpcore.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wmpdxm.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wmphoto.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllMain",
    "DllUnregisterServer"
  ],
  "wmploc.dll": "No exports",
  "wmpshell.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wmpui.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wmsdmod.dll": [
    "CreateInstance",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wmsdmoe.dll": [
    "CreateInstance",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wmsdmoe2.dll": [
    "CreateInstance",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wmspdmod.dll": [
    "CreateInstance",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wmspdmoe.dll": [
    "CreateInstance",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wmstream.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wmvcore.dll": [
    "WMCreateWriterNetworkSink",
    "WMCreateSyncReader",
    "WMCreateProfileManager",
    "WMCreateWriterPushSink",
    "WMCreateIndexer",
    "WMCreateEditor",
    "WMCreateBackupRestorer",
    "WMCheckURLExtension",
    "WMCreateReader",
    "DllRegisterServer",
    "WMCreateBackupRestorerPrivate",
    "WMCreateWriter",
    "WMCreateReaderPriv",
    "WMCreateWriterFileSink",
    "WMIsContentProtected",
    "WMCreateWriterPriv",
    "WMIsAvailableOffline",
    "WMCreateSyncReaderPriv",
    "WMCheckURLScheme",
    "WMValidateData"
  ],
  "wmvdmod.dll": [
    "CreateInstance",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wmvdmoe2.dll": [
    "CreateInstance",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wow32.dll": [
    "WOWGetVDMPointerFix",
    "CopyDropFilesFrom32",
    "WOWHandle32",
    "W32Init",
    "WOWGlobalLock16",
    "W32HungAppNotifyThread",
    "WOWGlobalLockSize16",
    "WOWGlobalFree16",
    "WOWGlobalUnlock16",
    "WOWUseMciavi16",
    "WOWHandle16",
    "WOWDirectedYield16",
    "WOWGlobalAlloc16",
    "WOWYield16",
    "WOW32ResolveMemory",
    "WOWFreeMetafile",
    "W32Dispatch",
    "WOWCallback16",
    "WOW32DriverCallback",
    "WOWGetVDMPointerUnfix",
    "WOWGlobalAllocLock16",
    "WOW32ResolveHandle",
    "WOWGetVDMPointer",
    "WOWCallback16Ex",
    "GetCommHandle",
    "GetCommShadowMSR",
    "CopyDropFilesFrom16",
    "WOWGlobalUnlockFree16"
  ],
  "wowfax.dll": "No exports",
  "wowfaxui.dll": [
    "DrvDeviceCapabilities",
    "DrvDocumentPropertySheets",
    "DrvDocumentEvent",
    "DrvDevicePropertySheets",
    "DrvAdvancedDocumentProperties",
    "DevQueryPrintEx",
    "DrvDocumentProperties",
    "DrvUpgradePrinter",
    "DllInitProc",
    "PrinterProperties"
  ],
  "ws2_32.dll": [
    "accept",
    "ioctlsocket",
    "WSCUpdateProvider",
    "closesocket",
    "connect",
    "getprotobyname",
    "WSAJoinLeaf",
    "WSARecvFrom",
    "WSASetBlockingHook",
    "WPUCompleteOverlappedRequest",
    "WSAGetServiceClassInfoW",
    "WSAAddressToStringW",
    "WSASetLastError",
    "WSAAsyncGetHostByAddr",
    "WSAGetOverlappedResult",
    "WSACleanup",
    "WSAProviderConfigChange",
    "WEP",
    "WSAEnumNameSpaceProvidersA",
    "WSAAsyncSelect",
    "WSAGetQOSByName",
    "WSARecv",
    "WSASendDisconnect",
    "WSACancelBlockingCall",
    "WSAEnumNameSpaceProvidersW",
    "GetNameInfoW",
    "GetAddrInfoW",
    "WSAStringToAddressW",
    "setsockopt",
    "WSCEnableNSProvider",
    "__WSAFDIsSet",
    "WSANtohs",
    "ntohl",
    "recvfrom",
    "WSALookupServiceBeginW",
    "ntohs",
    "WSAIsBlocking",
    "WSCEnumProtocols",
    "FreeAddrInfoW",
    "WSAEnumProtocolsW",
    "WSAAsyncGetProtoByName",
    "WSCGetProviderPath",
    "WSAHtons",
    "getservbyname",
    "WSCUnInstallNameSpace",
    "WSCDeinstallProvider",
    "htonl",
    "WSALookupServiceEnd",
    "recv",
    "getnameinfo",
    "WSASetServiceA",
    "gethostname",
    "WSAAsyncGetServByName",
    "WSARecvDisconnect",
    "WSAAccept",
    "WSCWriteProviderOrder",
    "WSARemoveServiceClass",
    "getaddrinfo",
    "WSACloseEvent",
    "WSADuplicateSocketA",
    "WSCWriteNameSpaceOrder",
    "WSAGetServiceClassNameByClassIdA",
    "WSALookupServiceNextW",
    "WSCInstallNameSpace",
    "WSACancelAsyncRequest",
    "send",
    "WSASocketA",
    "socket",
    "getsockopt",
    "WSAConnect",
    "WSAGetServiceClassInfoA",
    "WSAStartup",
    "WSAEnumNetworkEvents",
    "WSANtohl",
    "select",
    "WSAEnumProtocolsA",
    "WSAAsyncGetHostByName",
    "htons",
    "WSASetEvent",
    "listen",
    "getservbyport",
    "bind",
    "WSALookupServiceNextA",
    "WSAGetLastError",
    "WSASocketW",
    "WSALookupServiceBeginA",
    "WSAInstallServiceClassA",
    "WSANSPIoctl",
    "WSApSetPostRoutine",
    "gethostbyaddr",
    "WSAHtonl",
    "WSAGetServiceClassNameByClassIdW",
    "sendto",
    "WSAEventSelect",
    "getpeername",
    "WSAInstallServiceClassW",
    "freeaddrinfo",
    "inet_addr",
    "WSASend",
    "getprotobynumber",
    "WSACreateEvent",
    "WSASetServiceW",
    "WSAWaitForMultipleEvents",
    "WSAResetEvent",
    "WSADuplicateSocketW",
    "WSAAddressToStringA",
    "WSAUnhookBlockingHook",
    "inet_ntoa",
    "WSAAsyncGetProtoByNumber",
    "WSAAsyncGetServByPort",
    "shutdown",
    "WSCInstallProvider",
    "WSAIoctl",
    "WSASendTo",
    "WSAStringToAddressA",
    "gethostbyname",
    "getsockname"
  ],
  "ws2help.dll": [
    "WahCreateSocketHandle",
    "WahCloseNotificationHandleHelper",
    "WahEnableNonIFSHandleSupport",
    "WahCloseThread",
    "WahOpenCurrentThread",
    "WahQueueUserApc",
    "WahWaitForNotification",
    "WahNotifyAllProcesses",
    "WahOpenApcHelper",
    "WahOpenHandleHelper",
    "WahOpenNotificationHandleHelper",
    "WahInsertHandleContext",
    "WahRemoveHandleContext",
    "WahEnumerateHandleContexts",
    "WahCompleteRequest",
    "WahReferenceContextByHandle",
    "WahDestroyHandleContextTable",
    "WahCloseHandleHelper",
    "WahCreateHandleContextTable",
    "WahCloseApcHelper",
    "WahCloseSocketHandle",
    "WahCreateNotificationHandle",
    "WahDisableNonIFSHandleSupport"
  ],
  "wscsvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "wsecedit.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wshatm.dll": [
    "WSHNotify",
    "WSHOpenSocket2",
    "WSHStringToAddress",
    "WSHGetSockaddrType",
    "WSHGetWinsockMapping",
    "WSHGetWSAProtocolInfo",
    "WSHGetSocketInformation",
    "WSHIoctl",
    "WSHJoinLeaf",
    "WSHSetSocketInformation",
    "WSHGetProviderGuid",
    "WSHOpenSocket",
    "WSHGetBroadcastSockaddr",
    "WSHAddressToString",
    "WSHEnumProtocols",
    "WSHGetWildcardSockaddr"
  ],
  "wshbth.dll": [
    "WSHNotify",
    "WSHOpenSocket2",
    "WSHStringToAddress",
    "WSHGetSockaddrType",
    "WSHGetWinsockMapping",
    "WSHGetWSAProtocolInfo",
    "WSHGetSocketInformation",
    "WSHIoctl",
    "WSHJoinLeaf",
    "WSHSetSocketInformation",
    "WSHGetProviderGuid",
    "WSHOpenSocket",
    "WSHGetBroadcastSockaddr",
    "NSPStartup",
    "WSHAddressToString",
    "WSHEnumProtocols",
    "WSHGetWildcardSockaddr"
  ],
  "wshcon.dll": [
    "DLLGetDocumentation",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wshext.dll": [
    "CreateIndirectData",
    "IsFileSupportedName",
    "PutSignedDataMsg",
    "RemoveSignedDataMsg",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "VerifyIndirectData",
    "DllRegisterServer",
    "GetSignedDataMsg",
    "DllUnregisterServer"
  ],
  "wship6.dll": [
    "WSHNotify",
    "getaddrinfo",
    "WSHOpenSocket2",
    "WSHStringToAddress",
    "WSHGetSockaddrType",
    "WSHGetWinsockMapping",
    "WSHGetWSAProtocolInfo",
    "WSHGetSocketInformation",
    "WSHIoctl",
    "WSHJoinLeaf",
    "WSHSetSocketInformation",
    "WSHGetProviderGuid",
    "getnameinfo",
    "WSHOpenSocket",
    "freeaddrinfo",
    "WSHAddressToString",
    "WSHEnumProtocols",
    "WSHGetWildcardSockaddr"
  ],
  "wshisn.dll": [
    "WSHNotify",
    "WSHGetSockaddrType",
    "WSHGetWinsockMapping",
    "WSHGetSocketInformation",
    "WSHSetSocketInformation",
    "WSHGetProviderGuid",
    "WSHOpenSocket",
    "WSHAddressToString",
    "WSHEnumProtocols",
    "WSHGetWildcardSockaddr"
  ],
  "wshnetbs.dll": [
    "WSHNotify",
    "WSHGetSockaddrType",
    "WSHGetWinsockMapping",
    "WSHGetSocketInformation",
    "WSHSetSocketInformation",
    "WSHGetProviderGuid",
    "WSHOpenSocket",
    "WSHEnumProtocols",
    "WSHGetWildcardSockaddr"
  ],
  "wshrm.dll": [
    "WSHNotify",
    "WSHOpenSocket2",
    "WSHStringToAddress",
    "WSHGetSockaddrType",
    "WSHGetWinsockMapping",
    "WSHGetWSAProtocolInfo",
    "WSHGetSocketInformation",
    "WSHIoctl",
    "WSHJoinLeaf",
    "WSHSetSocketInformation",
    "WSHGetProviderGuid",
    "WSHOpenSocket",
    "WSHGetBroadcastSockaddr",
    "WSHAddressToString",
    "WSHEnumProtocols",
    "WSHGetWildcardSockaddr"
  ],
  "wshtcpip.dll": [
    "WSHNotify",
    "WSHOpenSocket2",
    "WSHStringToAddress",
    "WSHGetSockaddrType",
    "WSHGetWinsockMapping",
    "WSHGetWSAProtocolInfo",
    "WSHGetSocketInformation",
    "WSHIoctl",
    "WSHJoinLeaf",
    "WSHSetSocketInformation",
    "WSHGetProviderGuid",
    "WSHOpenSocket",
    "WSHGetBroadcastSockaddr",
    "WSHAddressToString",
    "WSHEnumProtocols",
    "WSHGetWildcardSockaddr"
  ],
  "wsnmp32.dll": [
    "SnmpRegister",
    "SnmpSetPduData",
    "SnmpSetPort",
    "SnmpCountVbl",
    "SnmpFreeDescriptor",
    "SnmpOidCopy",
    "_SnmpConveyAgentAddress@4",
    "SnmpFreePdu",
    "SnmpEntityToStr",
    "SnmpListen",
    "SnmpGetVendorInfo",
    "SnmpDecodeMsg",
    "SnmpEncodeMsg",
    "SnmpRecvMsg",
    "SnmpDuplicatePdu",
    "SnmpGetLastError",
    "SnmpStrToEntity",
    "SnmpDeleteVb",
    "SnmpGetTranslateMode",
    "SnmpCleanup",
    "SnmpSetTimeout",
    "SnmpContextToStr",
    "SnmpSetVb",
    "SnmpCreateSession",
    "SnmpGetPduData",
    "SnmpFreeContext",
    "SnmpOidToStr",
    "SnmpFreeVbl",
    "SnmpSendMsg",
    "SnmpSetRetry",
    "SnmpSetTranslateMode",
    "SnmpGetRetransmitMode",
    "SnmpOidCompare",
    "SnmpSetRetransmitMode",
    "SnmpStrToContext",
    "SnmpStrToOid",
    "SnmpCancelMsg",
    "_SnmpSetAgentAddress@4",
    "SnmpStartup",
    "SnmpClose",
    "SnmpCreateVbl",
    "SnmpDuplicateVbl",
    "SnmpGetVb",
    "SnmpGetTimeout",
    "SnmpCreatePdu",
    "SnmpFreeEntity",
    "SnmpGetRetry",
    "SnmpOpen"
  ],
  "wsock32.dll": [
    "dn_expand",
    "rresvport",
    "accept",
    "WSAGetLastError",
    "ioctlsocket",
    "WSACancelAsyncRequest",
    "closesocket",
    "rcmd",
    "send",
    "SetServiceA",
    "connect",
    "GetNameByTypeA",
    "getprotobyname",
    "ntohs",
    "WSApSetPostRoutine",
    "GetServiceA",
    "GetTypeByNameW",
    "gethostbyaddr",
    "WSAIsBlocking",
    "getsockopt",
    "socket",
    "AcceptEx",
    "sendto",
    "GetTypeByNameA",
    "WSASetBlockingHook",
    "WSAStartup",
    "getpeername",
    "WSASetLastError",
    "WSAAsyncGetProtoByName",
    "select",
    "GetAddressByNameW",
    "inet_addr",
    "WSAAsyncGetHostByName",
    "NPLoadNameSpaces",
    "WSAAsyncGetHostByAddr",
    "getprotobynumber",
    "WSACleanup",
    "getservbyname",
    "inet_network",
    "htonl",
    "WEP",
    "EnumProtocolsA",
    "WSAAsyncSelect",
    "recv",
    "SetServiceW",
    "WSARecvEx",
    "GetNameByTypeW",
    "htons",
    "WSAUnhookBlockingHook",
    "WSACancelBlockingCall",
    "GetAddressByNameA",
    "inet_ntoa",
    "gethostname",
    "listen",
    "WSAAsyncGetServByName",
    "WSAAsyncGetProtoByNumber",
    "WSAAsyncGetServByPort",
    "rexec",
    "getservbyport",
    "GetAcceptExSockaddrs",
    "getnetbyname",
    "EnumProtocolsW",
    "s_perror",
    "setsockopt",
    "__WSAFDIsSet",
    "bind",
    "shutdown",
    "GetServiceW",
    "MigrateWinsockConfiguration",
    "gethostbyname",
    "sethostname",
    "ntohl",
    "getsockname",
    "recvfrom",
    "TransmitFile"
  ],
  "wstdecod.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wtsapi32.dll": [
    "WTSVirtualChannelOpen",
    "WTSUnRegisterSessionNotification",
    "WTSDisconnectSession",
    "WTSVirtualChannelPurgeInput",
    "WTSQuerySessionInformationW",
    "WTSEnumerateProcessesW",
    "WTSSetSessionInformationA",
    "WTSTerminateProcess",
    "WTSQueryUserToken",
    "WTSRegisterSessionNotification",
    "WTSFreeMemory",
    "WTSEnumerateServersA",
    "WTSSetUserConfigA",
    "WTSVirtualChannelQuery",
    "WTSVirtualChannelRead",
    "WTSOpenServerA",
    "WTSLogoffSession",
    "WTSSetSessionInformationW",
    "WTSQueryUserConfigW",
    "WTSOpenServerW",
    "WTSWaitSystemEvent",
    "WTSEnumerateSessionsW",
    "WTSShutdownSystem",
    "WTSSendMessageW",
    "WTSVirtualChannelClose",
    "WTSSendMessageA",
    "WTSVirtualChannelWrite",
    "WTSEnumerateProcessesA",
    "WTSVirtualChannelPurgeOutput",
    "WTSCloseServer",
    "WTSQuerySessionInformationA",
    "WTSQueryUserConfigA",
    "WTSEnumerateSessionsA",
    "WTSEnumerateServersW",
    "WTSSetUserConfigW"
  ],
  "wuapi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "ConfirmDecline",
    "DllUnregisterServer"
  ],
  "wuaueng.dll": [
    "UHRunRemoteHandlerServer",
    "DSRunStoreAsComServer",
    "WUCheckForUpdatesAtShutdown",
    "RegisterServiceVersion",
    "GetEngineStatusInfo",
    "WUAutoUpdateAtShutdown",
    "DllRegisterServer",
    "DllMain",
    "GetAUOptionsEx",
    "DllUnregisterServer",
    "ServiceMain",
    "ServiceHandler"
  ],
  "wuaueng1.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllMain",
    "DllUnregisterServer",
    "ServiceMain",
    "ServiceHandler"
  ],
  "wuauserv.dll": [
    "DllMain",
    "ServiceMain"
  ],
  "wucltui.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wups.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllMain",
    "DllUnregisterServer"
  ],
  "wuweb.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wzcdlg.dll": [
    "FlashConfigCreateNetworkW",
    "WZCCanDestroyBalloon",
    "WZCOnBalloonClick",
    "WZCQueryConnectionStatusText",
    "WZCIsVanRunning",
    "WZCCanShowBalloon",
    "FlashConfigRunWizard",
    "HotSpotHelpW"
  ],
  "wzcsapi.dll": [
    "WZCEapolSetCustomAuthData",
    "GetSSIDForAdapter",
    "WZCQueryContext",
    "WZCSvcMain",
    "DtlDestroyList",
    "WZCProviderCreateUserProperties",
    "CreateEapcfgNode",
    "ReadEapcfgList",
    "WZCQueryInterface",
    "MIDL_user_allocate",
    "GetSignalStrengthForAdapter",
    "WZCEapolGetPMKCacheInfo",
    "CloseWZCDbLogSession",
    "WZCGetAPIVersion",
    "WZCGetDlgResModule",
    "OpenWZCDbLogSession",
    "EnumWZCDbLogRecords",
    "WZCEapolGetInterfaceParams",
    "WZCEapolReAuthenticate",
    "WZCEapolUIResponse",
    "WZCProviderCreateWirelessProfile",
    "WZCDeleteIntfObj",
    "WZCEapolGetCustomAuthData",
    "WZCProviderCreateConnectionProperties",
    "WZCPassword2Key",
    "GetModeForAdapter",
    "WZCEapolFreeState",
    "MIDL_user_free",
    "DestroyEapcfgNode",
    "WZCSetInterface",
    "WZCEapolQueryState",
    "WZCGetEapUserInfo",
    "GetEncryptionForAdapter",
    "FlushWZCDbLog",
    "WZCGetSPResModule",
    "WZCEnumInterfaces",
    "WZCSetContext",
    "GetSpecificLogRecord",
    "EapcfgNodeFromKey",
    "WZCProviderDeleteWirelessProfile",
    "WZCRefreshInterface",
    "WZCEapolSetInterfaceParams"
  ],
  "wzcsvc.dll": [
    "WZCSvcMain",
    "WZCQueryGUIDNCSState",
    "WZCTrayIconReady",
    "SvchostPushServiceGlobals"
  ],
  "xactsrv.dll": [
    "XsNetPrintJobPause",
    "XsNetWkstaUserLogoff",
    "XsNetPrintDestControl",
    "XsNetGroupAddUser",
    "XsNetGroupDelUser",
    "XsNetPrintJobSetInfo",
    "XsNetPrintQContinue",
    "XsNetPrintQDel",
    "XsNetServiceControl",
    "XsNetPrintQAdd",
    "XsNetFileEnum2",
    "XsNetAccessSetInfo",
    "XsNetRemoteTOD",
    "XsNetAccessEnum",
    "XsNetAccountDeltas",
    "XsNetServerPasswordSet",
    "XsNetSessionEnum",
    "XsNetFileGetInfo2",
    "XsNetCharDevControl",
    "XsNetUserModalsSet",
    "XsNetWkstaSetInfo",
    "XsNetUserGetInfo",
    "XsNetAccessAdd",
    "XsI_NetNameCanonicalize",
    "XsNetAccessGetUserPerms",
    "XsNetServerReqChallenge",
    "XsNetUseEnum",
    "XsNetWkstaGetInfo",
    "XsNetServerEnum2",
    "XsNetUnsupportedApi",
    "XsNetUserPasswordSet2",
    "XsI_NetPathType",
    "XsNetMessageNameEnum",
    "XsDupWStrToStr",
    "XsNetUserAdd2",
    "XsNetSessionDel",
    "XsNetUseAdd",
    "XsCheckSmbDescriptor",
    "XsNetGroupAdd",
    "XsNetServerEnum3",
    "XsNetWkstaSetUID",
    "XsNetPrintJobEnum",
    "XsI_NetPathCompare",
    "XsNetUseGetInfo",
    "XsI_NetNameCompare",
    "XsNetGroupSetUsers",
    "XsNetUserGetGroups",
    "XsNetServerSetInfo",
    "XsNetCharDevQGetInfo",
    "XsNetShareEnum",
    "XsNetWkstaUserLogon",
    "XsNetServerAuthenticate",
    "XsSamOEMChangePasswordUser2_P",
    "XsNetPrintJobGetInfo",
    "XsNetMessageBufferSend",
    "XsNetPrintQGetInfo",
    "XsNetPrintDestDel",
    "XsNetUserEnum2",
    "XsNetShareSetInfo",
    "XsNetUserSetInfo",
    "XsNetMessageNameAdd",
    "XsNetMessageNameGetInfo",
    "XsNetSessionGetInfo",
    "XsCaptureParameters",
    "XsNetPrintQPause",
    "XsNetShareDel",
    "XsNetGroupDel",
    "XsNetUserDel",
    "XsNetPrintJobContinue",
    "XsConvertServerEnumBuffer",
    "XsNetGroupGetInfo",
    "XsNetServiceGetInfo",
    "XsNetStatisticsGet2",
    "XsNetServerGetInfo",
    "XsNetUserEnum",
    "XsNetBuildGetInfo",
    "XsNetGroupSetInfo",
    "XsNetCharDevQEnum",
    "XsNetPrintDestGetInfo",
    "XsNetPrintDestSetInfo",
    "XsNetUseDel",
    "XsNetPrintDestEnum",
    "XsNetAccessDel",
    "XsNetPrintDestAdd",
    "XsNetCharDevGetInfo",
    "XsNetFileClose2",
    "XsNetCharDevQPurgeSelf",
    "XsNetCharDevQSetInfo",
    "XsDupStrToWStr",
    "XsNetLogonEnum",
    "XsNetPrintQPurge",
    "XsNetServiceInstall",
    "XsNetGroupEnum",
    "XsI_NetPathCanonicalize",
    "XsNetConnectionEnum",
    "XsNetUserSetGroups",
    "XsNetServerDiskEnum",
    "XsNetMessageNameDel",
    "XsNetPrintQEnum",
    "XsNetGroupGetUsers",
    "XsNetPrintJobDel",
    "XsNetGetDCName",
    "XsNetPrintQSetInfo",
    "XsNetAccountSync",
    "XsNetAccessGetInfo",
    "XsNetUserModalsGet",
    "XsNetUserSetInfo2",
    "XsSetParameters",
    "XsNetShareCheck",
    "XsNetShareAdd",
    "XsNetServiceEnum",
    "XsNetShareGetInfo",
    "XsNetCharDevEnum",
    "XsI_NetNameValidate",
    "XsNetCharDevQPurge"
  ],
  "xenroll.dll": [
    "PIEnrollGetNoCOM",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "PIEnroll2GetNoCOM",
    "DllRegisterServer",
    "PIEnroll4GetNoCOM",
    "DllUnregisterServer"
  ],
  "xmllite.dll": [
    "CreateXmlWriterOutputWithEncodingCodePage",
    "CreateXmlReaderInputWithEncodingName",
    "CreateXmlWriter",
    "CreateXmlReader",
    "CreateXmlWriterOutputWithEncodingName",
    "CreateXmlReaderInputWithEncodingCodePage"
  ],
  "xmlprov.dll": [
    "DllUnregisterServer",
    "ServiceMain",
    "DllRegisterServer"
  ],
  "xmlprovi.dll": [
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "xolehlp.dll": [
    "DtcGetTransactionManagerEx",
    "DtcGetTransactionManagerExW",
    "DtcGetTransactionManagerC",
    "GetDtcLocaleResourceHandle",
    "DtcGetTransactionManagerExA",
    "DtcGetTransactionManager"
  ],
  "xpob2res.dll": "No exports",
  "xpsp1res.dll": "No exports",
  "xpsp2res.dll": "No exports",
  "xpsp3res.dll": "No exports",
  "zipfldr.dll": [
    "RouteTheCall",
    "RegisterSendto",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ]
}