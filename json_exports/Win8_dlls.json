{
  "ACCTRES.dll": "No exports",
  "AUDIOKSE.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "AUInstallAgent.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "ActionCenter.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "ActionCenterCPL.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "ActionQueue.dll": [
    "GenerateActionQueue",
    "ProcessActionQueue"
  ],
  "AdmTmpl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "CreateCmtStoreObject",
    "CreateParserObject"
  ],
  "AltTab.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "AppIdPolicyEngineApi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "AppXDeploymentClient.dll": [
    "AppxDeletePackageFiles",
    "DllGetActivationFactory",
    "IsPackageInstalled",
    "AppxPackageRepositoryRecoverStagedPackages",
    "AppxGetPackageType",
    "RDSRecoverRequests",
    "AppxPackageRepositoryRecoverUserInstalls",
    "AppxRecoverUserInstallsForUpgrade",
    "AppxPreStageCleanupRunTask",
    "AppxRequestRemovePackageForUser",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetApplicability"
  ],
  "AppXDeploymentExtensions.dll": [
    "LoadCategoryNameTable",
    "LoadExtensionRegistrationTable",
    "ShellRefresh"
  ],
  "AppXDeploymentServer.dll": [
    "EnumPackagesByUserSidPackageFamilyNameInternal",
    "FindPackageByUserSidPackageFullNameInternal",
    "SetPackageStateImplementation",
    "FixStagedPackagesImplementation",
    "EnumPackagesByUserSidInternal",
    "SetDeploymentError",
    "EnumPackagesByUserSidNamePublisherInternal",
    "PackageRepositoryFree",
    "AppxDeploymentServerDllCleanup",
    "EnumVisibilityByPackageFullNameInternal",
    "PackageRepositoryAllocate",
    "GetDeploymentError",
    "CancelDeploymentImplementation",
    "StartDeploymentImplementation",
    "CreateWnfStateNameImplementation",
    "RDSRecoverRequestsImplementation",
    "IsPackageInstalledInternal",
    "AppxDeploymentServerCanStopService",
    "GetSortedRegisterPackageListImplementation",
    "GetPackageTypeImplementation",
    "RequestPackageOperationImplementation",
    "GetApplicabilityImplementation",
    "AddToPurgeList"
  ],
  "Apphlpdm.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "AppxAllUserStore.dll": [
    "MarkStatusOfMainPackageForUser",
    "IsNonInboxAllUserPackage",
    "DeleteAllPackagesFromMainPackageArray",
    "CommitTakeOwnershipSession",
    "PackageIdBasicFromFullName",
    "CheckPackagePreinstallPolicy",
    "DoesPerUserStoreExist",
    "RemovePackageFromRegistryStore",
    "GetAllNonInboxPackagesFromRegistryStore",
    "DeleteAllPackagesFromPackageArray",
    "RollbackTakeOwnershipSession",
    "IsEnterprisePolicyEnabled",
    "GetAllPackagesToBeInstalledForUser",
    "TakeOwnershipOnFolder",
    "FamilyMonikerStringToSid",
    "IsInboxPackage",
    "PackageFamilyNameFromId",
    "DeleteUserRegistryKeyFromAllUserStore",
    "AddPackageToRegistryStore"
  ],
  "AppxPackaging.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "AppxSip.dll": [
    "AppxSipGetSignedDataMsg",
    "AppxSipPutSignedDataMsg",
    "AppxSipRemoveSignedDataMsg",
    "P7xSipIsFileSupportedName",
    "P7xSipPutSignedDataMsg",
    "P7xSipRemoveSignedDataMsg",
    "AppxSipIsFileSupportedName",
    "P7xSipCreateIndirectData",
    "AppxSipVerifyIndirectData",
    "AppxSipCreateIndirectData",
    "P7xSipGetSignedDataMsg",
    "P7xSipVerifyIndirectData",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "AppxStreamingDataSourcePS.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "AppxSysprep.dll": [
    "SysprepGeneralize"
  ],
  "AudioEndpointBuilder.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "AudioEng.dll": [
    "AERT_Free",
    "DllRegisterServer",
    "AERT_Allocate",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "AudioSes.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "AuditNativeSnapIn.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "AuditPolicyGPInterop.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "AuthBroker.dll": [
    "DllGetActivationFactory",
    "AuthBrokerFreeClientContext",
    "AuthBrokerSetThreadClientContext",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllRegisterServer",
    "AuthBrokerCreateClientContext",
    "AuthBrokerClearThreadClientContext",
    "PurgeAuthHostSsoCache"
  ],
  "AuthExt.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "AuthFWGP.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "AuthFWSnapin.dll": "No exports",
  "AuthFWWizFwk.dll": "No exports",
  "AuthHostProxy.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "AuxiliaryDisplayApi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "AuxiliaryDisplayClassInstaller.dll": [
    "WindowsSideShow_Sysprep_Generalize",
    "WindowsSideShowClassInstaller"
  ],
  "AuxiliaryDisplayCpl.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "AuxiliaryDisplayDriverLib.dll": [
    "Microsoft_WDF_UMDF_Version",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "AuxiliaryDisplayServices.dll": [
    "Microsoft_WDF_UMDF_Version",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "AxInstSv.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "AzSqlExt.dll": [
    "__GetXpVersion",
    "xp_AzManDeleteRole",
    "AzGenerateAudit",
    "xp_AzManAddUserToRole",
    "xp_AzManAddRole",
    "xp_AzManRemoveUserFromRole"
  ],
  "aaclient.dll": [
    "LoadClientAdapter",
    "g_fnStartTransport",
    "OpenKeyReaderWriter",
    "OpenKeyReader"
  ],
  "accessibilitycpl.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "acledit.dll": [
    "SedTakeOwnership",
    "EditAuditInfo",
    "SedDiscretionaryAclEditor",
    "EditOwnerInfo",
    "DllMain",
    "SedSystemAclEditor",
    "FMExtensionProcW",
    "EditPermissionInfo"
  ],
  "aclui.dll": [
    "EditResourceCondition",
    "EditSecurityAdvanced",
    "GetTlsIndexForClaimDictionary",
    "IID_ISecurityInformation",
    "CreateSecurityPage",
    "GetLocalizedStringForCondition",
    "EditSecurity"
  ],
  "acppage.dll": [
    "DllCanUnloadNow",
    "GetExeFromLnk",
    "DllGetClassObject"
  ],
  "acproxy.dll": [
    "PerformAutochkOperations"
  ],
  "activeds.dll": [
    "ConvertTrusteeToSid",
    "FreeADsMem",
    "ADsDecodeBinaryData",
    "ADsSetLastError",
    "ADsEncodeBinaryData",
    "ADsBuildVarArrayInt",
    "ADsGetObject",
    "ConvertSecurityDescriptorToSecDes",
    "AdsTypeToPropVariant",
    "DllCanUnloadNow",
    "AdsFreeAdsValues",
    "AllocADsMem",
    "PropVariantToAdsType2",
    "ADsGetLastError",
    "ADsEnumerateNext",
    "SecurityDescriptorToBinarySD",
    "ADsOpenObject",
    "BinarySDToSecurityDescriptor",
    "FreeADsStr",
    "ADsFreeEnumerator",
    "DllGetClassObject",
    "AdsTypeToPropVariant2",
    "PropVariantToAdsType",
    "ConvertSecDescriptorToVariant",
    "AllocADsStr",
    "ReallocADsMem",
    "ReallocADsStr",
    "ADsBuildEnumerator",
    "ADsBuildVarArrayStr"
  ],
  "actxprxy.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "adhapi.dll": [
    "AdhEngineClose",
    "AdhStatusEventSubscribe",
    "DllMain",
    "AdhGetEvidenceCollectorResult",
    "AdhGetConfig",
    "AdhEngineOpen",
    "AdhStatusEventUnsubscribe"
  ],
  "adhsvc.dll": [
    "SubServiceStart",
    "SubServiceScmNotification",
    "SubServiceStop"
  ],
  "adprovider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "adrclient.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "adsldp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "adsldpc.dll": [
    "LdapDeleteS",
    "ADsExecuteSearch",
    "LdapMsgFree",
    "BuildADsPathFromLDAPPath",
    "AdsTypeToLdapTypeCopyDNWithBinary",
    "ADsDeleteClassDefinition",
    "InitObjectInfo",
    "ADsGetNextColumnName",
    "ConvertU2TrusteeToSid",
    "LdapTypeBinaryToString",
    "LdapCrackUserDNtoNTLMUser2",
    "ADsDecodeBinaryData",
    "LdapSearchST",
    "ADsSetLastError",
    "ADsEncodeBinaryData",
    "ConvertSidToString",
    "LdapGetSyntaxIdOfAttribute",
    "GetServerAndPort",
    "LdapSearchInitPage",
    "BuildADsParentPath",
    "BuildADsParentPathFromObjectInfo2",
    "LdapIsClassNameValidOnServer",
    "LdapRenameExtS",
    "LdapValueFree",
    "LdapGetSchemaObjectCount",
    "LdapSearchAbandonPage",
    "LdapcSetStickyServer",
    "LdapAttributeFree",
    "public: void __thiscall CLexer::SetAtDisabler(int)",
    "BuildADsPathFromParent",
    "ReadPagingSupportedAttr",
    "ADSIAbandonSearch",
    "ReallocADsStr",
    "public: void __thiscall CLexer::SetExclaimnationDisabler(int)",
    "LdapTypeToAdsTypeDNWithBinary",
    "LdapReadAttributeFast",
    "ADSICreateDSObject",
    "LdapTypeFreeLdapObjects",
    "LdapGetSyntaxOfAttributeOnServer",
    "LdapTypeToAdsTypeDNWithString",
    "LdapGetSubSchemaSubEntryPath",
    "LdapCreatePageControl",
    "IsGCNamespace",
    "LdapCacheAddRef",
    "LdapSearchS",
    "ADSIModifyRdn",
    "LdapCountEntries",
    "ADsCloseSearchHandle",
    "ADSIGetFirstRow",
    "LdapReadAttribute2",
    "LdapMakeSchemaCacheObsolete",
    "AdsTypeFreeAdsObjects",
    "UnMarshallLDAPToLDAPSynID",
    "AllocADsMem",
    "LdapAddS",
    "SchemaGetPropertyInfoByIndex",
    "ReadSecurityDescriptorControlType",
    "ADsFreeColumn",
    "ADsGetObjectAttributes",
    "LdapDeleteExtS",
    "SchemaGetSyntaxOfAttribute",
    "LdapGetNextPageS",
    "LdapOpenObject",
    "ADsEnumClasses",
    "LdapParseResult",
    "GetSyntaxOfAttribute",
    "LdapTypeToAdsTypeCopyConstruct",
    "public: long __thiscall CLexer::GetNextToken(unsigned short *,unsigned long *)",
    "ADsSetSearchPreference",
    "public: __thiscall CLexer::~CLexer(void)",
    "AllocADsStr",
    "ConvertSidToU2Trustee",
    "BuildADsPathFromLDAPPath2",
    "MapADSTypeToLDAPType",
    "SchemaOpen",
    "ADsCreateDSObjectExt",
    "ADsGetPreviousRow",
    "ADSIOpenDSObject",
    "FindSearchTableIndex",
    "LdapValueFreeLen",
    "AdsTypeToLdapTypeCopyDNWithString",
    "ADsAbandonSearch",
    "LdapFirstEntry",
    "ADsHelperGetCurrentRowMessage",
    "ADSIExecuteSearch",
    "ADsCreateClassDefinition",
    "AdsTypeToLdapTypeCopyGeneralizedTime",
    "MapLDAPTypeToADSType",
    "LdapControlFree",
    "FreeADsMem",
    "ADsEnumAttributes",
    "LdapcKeepHandleAround",
    "ChangeSeparator",
    "ADsDeleteAttributeDefinition",
    "Component",
    "SortAndRemoveDuplicateOIDs",
    "BuildLDAPPathFromADsPath",
    "ADsGetFirstRow",
    "SchemaAddRef",
    "LdapReadAttribute",
    "ADsWriteClassDefinition",
    "ADSIGetNextColumnName",
    "ADSIGetPreviousRow",
    "LdapTypeToAdsTypeGeneralizedTime",
    "GetDefaultServer",
    "GetDisplayName",
    "LdapFirstAttribute",
    "LdapSearch",
    "LdapTypeFreeLdapModObject",
    "LdapResult",
    "BuildLDAPPathFromADsPath2",
    "ADsGetNextRow",
    "ADsSetObjectAttributes",
    "public: long __thiscall CLexer::InitializePath(unsigned short *)",
    "SchemaGetClassInfo",
    "ReadServerSupportsIsADControl",
    "LdapCompareExt",
    "LdapParsePageControl",
    "ADsWriteAttributeDefinition",
    "AdsTypeToLdapTypeCopyTime",
    "ADsGetColumn",
    "FreeADsStr",
    "GetDomainDNSNameForDomain",
    "LdapModifyS",
    "ADSIPrint",
    "AdsTypeToLdapTypeCopyConstruct",
    "SchemaGetObjectCount",
    "LdapTypeFreeLdapModList",
    "LdapMemFree",
    "SchemaIsClassAContainer",
    "ADSIDeleteDSObject",
    "LdapTypeToAdsTypeUTCTime",
    "LdapTypeCopyConstruct",
    "ReallocADsMem",
    "intcmp",
    "BuildADsParentPathFromObjectInfo",
    "GetLDAPTypeName",
    "LdapGetDn",
    "FreeObjectInfo",
    "ADSIFreeColumn",
    "LdapInitializeSearchPreferences",
    "ADSISetSearchPreference",
    "ADsCreateDSObject",
    "SchemaClose",
    "ADSICloseSearchHandle",
    "LdapCloseObject",
    "LdapGetValues",
    "LdapControlsFree",
    "LdapModDnS",
    "ADsObject",
    "public: __thiscall CLexer::CLexer(void)",
    "FindEntryInSearchTable",
    "BerEncodingQuotaControl",
    "SchemaGetStringsFromStringTable",
    "ADSIGetObjectAttributes",
    "LdapNextAttribute",
    "ADsGetLastError",
    "ADSIGetNextRow",
    "LdapNextEntry",
    "SchemaGetPropertyInfo",
    "ADSISetObjectAttributes",
    "ADsCreateAttributeDefinition",
    "LdapModifyExtS",
    "ADsDeleteDSObject",
    "ReadServerSupportsIsADAMControl",
    "LdapSearchExtS",
    "ADSIGetColumn",
    "ADSICloseDSObject",
    "LdapGetValuesLen",
    "SchemaGetClassInfoByIndex",
    "BerBvFree",
    "PathName",
    "public: void __thiscall CLexer::SetFSlashDisabler(int)",
    "LdapAddExtS",
    "LdapOpenObject2"
  ],
  "adsmsext.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "adsnt.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "adtschema.dll": "No exports",
  "advapi32.dll": [
    "TreeSetNamedSecurityInfoW",
    "SetUserFileEncryptionKeyEx",
    "AuditSetPerUserPolicy",
    "LogonUserExExW",
    "SetNamedSecurityInfoExW",
    "SetUserFileEncryptionKey",
    "LsaGetRemoteUserName",
    "ChangeServiceConfigW",
    "NotifyBootConfigStatus",
    "SaferiChangeRegistryScope",
    "EnumServicesStatusA",
    "AdjustTokenPrivileges",
    "StartTraceA",
    "AccessCheckByTypeAndAuditAlarmA",
    "DecryptFileA",
    "CryptGetDefaultProviderA",
    "AuditQueryPerUserPolicy",
    "ElfChangeNotify",
    "RegSetKeyValueW",
    "AccessCheckByTypeAndAuditAlarmW",
    "CredGetSessionTypes",
    "WmiSetSingleInstanceA",
    "ConvertSecurityDescriptorToAccessA",
    "CryptContextAddRef",
    "LookupAccountNameW",
    "RegLoadMUIStringA",
    "QueryRecoveryAgentsOnEncryptedFile",
    "ConvertSecurityDescriptorToAccessNamedA",
    "GetInheritanceSourceA",
    "GetSecurityInfo",
    "GetUserNameW",
    "ConvertAccessToSecurityDescriptorW",
    "RemoteRegQueryInfoKeyWrapper",
    "BuildTrusteeWithSidW",
    "RegLoadAppKeyA",
    "CryptExportKey",
    "EnableTraceEx",
    "GetSecurityDescriptorControl",
    "ElfNumberOfRecords",
    "LookupPrivilegeDisplayNameW",
    "SystemFunction003",
    "MD4Update",
    "RegLoadKeyA",
    "PerfSetCounterRefValue",
    "LsaICLookupSids",
    "AddAccessDeniedAceEx",
    "BuildSecurityDescriptorA",
    "FlushEfsCache",
    "RegLoadMUIStringW",
    "RegOpenKeyW",
    "LookupPrivilegeValueA",
    "I_ScPnPGetServiceName",
    "QueryAllTracesW",
    "WmiNotificationRegistrationA",
    "BaseRegLoadKey",
    "LsaICLookupNamesWithCreds",
    "ElfReportEventAndSourceW",
    "CredGetTargetInfoA",
    "IsValidRelativeSecurityDescriptor",
    "AuditEnumeratePerUserPolicy",
    "BaseRegOpenKey",
    "SaferSetPolicyInformation",
    "LsaSetInformationTrustedDomain",
    "PsmRegisterApplicationProcess",
    "LsaQueryTrustedDomainInfoByName",
    "AddAccessDeniedAce",
    "CredWriteDomainCredentialsA",
    "AccessCheckByTypeResultListAndAuditAlarmA",
    "PerfDecrementULongCounterValue",
    "RegConnectRegistryW",
    "ConvertSecurityDescriptorToAccessNamedW",
    "SystemFunction018",
    "RegUnLoadKeyW",
    "PerfOpenQueryHandle",
    "GetInheritanceSourceW",
    "LsaSetQuotasForAccount",
    "SetInformationCodeAuthzPolicyW",
    "GetFileSecurityW",
    "PsmQueryBackgroundActivationType",
    "NotifyServiceStatusChangeA",
    "RegEnumKeyW",
    "AccessCheckByTypeResultListAndAuditAlarmByHandleW",
    "RegSaveKeyA",
    "RegSetValueExA",
    "I_ScValidatePnPService",
    "GetSecurityDescriptorRMControl",
    "SystemFunction019",
    "CredProfileLoadedEx",
    "LsaLookupNames2",
    "TreeSetNamedSecurityInfoA",
    "CloseServiceHandle",
    "MakeAbsoluteSD",
    "RegDeleteTreeA",
    "RegDeleteKeyTransactedA",
    "CommandLineFromMsiDescriptor",
    "SetSecurityInfo",
    "MSChapSrvChangePassword2",
    "ProcessIdleTasksW",
    "CheckForHiberboot",
    "PerfIncrementULongCounterValue",
    "CryptEncrypt",
    "WmiQueryAllDataA",
    "OpenTraceA",
    "CryptReleaseContext",
    "GetNumberOfEventLogRecords",
    "LsaQueryTrustedDomainInfo",
    "TraceMessageVa",
    "FreeInheritedFromArray",
    "RegSetValueW",
    "AddConditionalAce",
    "EventProviderEnabled",
    "CredpEncodeSecret",
    "RegGetValueA",
    "ImpersonateSelf",
    "AuditQuerySystemPolicy",
    "LookupPrivilegeNameA",
    "WmiNotificationRegistrationW",
    "SetThreadToken",
    "TraceSetInformation",
    "PerfRegQueryInfoKey",
    "RegDisablePredefinedCache",
    "PerfStartProvider",
    "ReportEventW",
    "GetMultipleTrusteeOperationW",
    "WaitServiceState",
    "GetMultipleTrusteeW",
    "QueryServiceObjectSecurity",
    "CredBackupCredentials",
    "WmiQuerySingleInstanceW",
    "CredReadA",
    "LsaEnumeratePrivilegesOfAccount",
    "OpenSCManagerA",
    "SetServiceObjectSecurity",
    "LsaCreateTrustedDomainEx",
    "GetSidIdentifierAuthority",
    "DestroyPrivateObjectSecurity",
    "GetAuditedPermissionsFromAclA",
    "GetAclInformation",
    "ClearEventLogW",
    "CredReadDomainCredentialsA",
    "CryptVerifySignatureA",
    "RegisterTraceGuidsA",
    "PerfCloseQueryHandle",
    "SaferiSearchMatchingHashRules",
    "SetNamedSecurityInfoW",
    "MD5Update",
    "RevertToSelf",
    "RemoteRegQueryValueWrapper",
    "QueryAllTracesA",
    "GetEncryptedFileMetadata",
    "AccessCheck",
    "LsaDelete",
    "LsaEnumerateAccountRights",
    "WmiQueryAllDataMultipleW",
    "RegisterEventSourceA",
    "ElfReadEventLogA",
    "UpdateTraceA",
    "MD5Final",
    "ElfCloseEventLog",
    "SystemFunction030",
    "GetMultipleTrusteeA",
    "RegQueryMultipleValuesW",
    "SetKernelObjectSecurity",
    "SaferRecordEventLogEntry",
    "DeregisterEventSource",
    "FlushTraceW",
    "RegQueryValueA",
    "CredUnmarshalCredentialA",
    "ObjectOpenAuditAlarmA",
    "AddAccessAllowedAce",
    "SystemFunction011",
    "CredRenameW",
    "IsValidAcl",
    "PerfRegEnumKey",
    "SetEntriesInAccessListA",
    "ChangeServiceConfig2A",
    "DeleteAce",
    "CryptImportKey",
    "GetManagedApplications",
    "ObjectCloseAuditAlarmA",
    "ConvertSecurityDescriptorToStringSecurityDescriptorA",
    "CredWriteA",
    "SaferiIsDllAllowed",
    "SaferGetLevelInformation",
    "IsTokenRestricted",
    "EnableTrace",
    "ElfFlushEventLog",
    "ConvertSecurityDescriptorToStringSecurityDescriptorW",
    "CloseTrace",
    "RegCreateKeyExW",
    "LsaOpenPolicy",
    "ObjectPrivilegeAuditAlarmA",
    "ProcessIdleTasks",
    "GetSecurityDescriptorGroup",
    "CredUnmarshalCredentialW",
    "CredWriteW",
    "EventWriteEx",
    "OpenSCManagerW",
    "MakeAbsoluteSD2",
    "SaferiIsExecutableFileType",
    "LsaOpenTrustedDomainByName",
    "CredIsProtectedA",
    "LsaEnumeratePrivileges",
    "RegCreateKeyExA",
    "CloseEventLog",
    "CloseThreadWaitChainSession",
    "EventWriteEndScenario",
    "ControlServiceExW",
    "I_ScSendPnPMessage",
    "SaferIdentifyLevel",
    "BuildTrusteeWithObjectsAndSidW",
    "SetNamedSecurityInfoExA",
    "ElfRegisterEventSourceA",
    "CryptCreateHash",
    "RegisterEventSourceW",
    "GetAccessPermissionsForObjectA",
    "CloseEncryptedFileRaw",
    "SystemFunction007",
    "RegSetValueA",
    "RemoveTraceCallback",
    "TreeResetNamedSecurityInfoA",
    "AbortSystemShutdownW",
    "RegSaveKeyExW",
    "ReadEncryptedFileRaw",
    "GetMultipleTrusteeOperationA",
    "GetTrusteeFormW",
    "RegDeleteTreeW",
    "RegGetValueW",
    "RegSetValueExW",
    "ObjectPrivilegeAuditAlarmW",
    "BuildImpersonateTrusteeA",
    "OperationEnd",
    "RemoveUsersFromEncryptedFile",
    "SetPrivateObjectSecurity",
    "QueryServiceLockStatusA",
    "CredDeleteA",
    "RegNotifyChangeKeyValue",
    "RegRestoreKeyW",
    "EventAccessRemove",
    "RegCreateKeyTransactedA",
    "RegQueryValueW",
    "DeleteService",
    "LsaLookupPrivilegeName",
    "CryptSetProviderExW",
    "SystemFunction029",
    "GetEffectiveRightsFromAclA",
    "SetSecurityInfoExA",
    "RegDeleteValueW",
    "CryptDestroyKey",
    "RegEnumKeyExA",
    "DuplicateEncryptionInfoFile",
    "ElfClearEventLogFileA",
    "CryptSetProviderW",
    "BuildTrusteeWithSidA",
    "EventAccessControl",
    "SetServiceStatus",
    "AbortSystemShutdownA",
    "SetInformationCodeAuthzLevelW",
    "RegSetKeySecurity",
    "BaseRegSetValue",
    "RegReplaceKeyW",
    "GetExplicitEntriesFromAclW",
    "CreatePrivateObjectSecurityEx",
    "I_ScSetServiceBitsA",
    "RegOpenKeyExA",
    "GetTraceEnableLevel",
    "SetEntriesInAclA",
    "CryptSetProviderA",
    "GetManagedApplicationCategories",
    "LsaCreateSecret",
    "GetFileSecurityA",
    "LogonUserW",
    "CreateProcessWithLogonW",
    "AddAccessDeniedObjectAce",
    "MSChapSrvChangePassword",
    "InitiateSystemShutdownA",
    "RegDeleteKeyValueA",
    "LsaOpenPolicySce",
    "PerfQueryInstance",
    "AuditQuerySecurity",
    "EventRegister",
    "CredEnumerateA",
    "InitializeSid",
    "InitializeSecurityDescriptor",
    "AccessCheckByTypeResultListAndAuditAlarmW",
    "RegQueryValueExW",
    "WmiExecuteMethodA",
    "LsaLookupPrivilegeDisplayName",
    "CredReadW",
    "MapGenericMask",
    "LsaFreeMemory",
    "SystemFunction013",
    "GetSecurityDescriptorDacl",
    "GetDynamicTimeZoneInformationEffectiveYears",
    "UninstallApplication",
    "TrusteeAccessToObjectW",
    "LookupPrivilegeDisplayNameA",
    "CryptSignHashA",
    "LsaQuerySecurityObject",
    "EventWriteTransfer",
    "RegOverridePredefKey",
    "SystemFunction031",
    "SetAclInformation",
    "LsaStorePrivateData",
    "ElfDeregisterEventSource",
    "IdentifyCodeAuthzLevelW",
    "GetStringConditionFromBinary",
    "TrusteeAccessToObjectA",
    "CredRestoreCredentials",
    "EventActivityIdControl",
    "ChangeServiceConfig2W",
    "ElfOpenEventLogW",
    "AuditLookupCategoryGuidFromCategoryId",
    "MakeSelfRelativeSD",
    "QueryUsersOnEncryptedFile",
    "CryptEnumProvidersW",
    "LsaQueryForestTrustInformation",
    "SystemFunction035",
    "LsaDeleteTrustedDomain",
    "CredpEncodeCredential",
    "UsePinForEncryptedFilesW",
    "WmiOpenBlock",
    "SystemFunction028",
    "PerfDeleteCounters",
    "LsaQueryInfoTrustedDomain",
    "RegRenameKey",
    "ConvertToAutoInheritPrivateObjectSecurity",
    "ConvertStringSDToSDRootDomainW",
    "QueryServiceStatusEx",
    "LsaGetSystemAccessAccount",
    "BaseRegFlushKey",
    "CredProtectA",
    "CredpConvertCredential",
    "ElfBackupEventLogFileW",
    "ImpersonateNamedPipeClient",
    "RegConnectRegistryA",
    "StopTraceA",
    "SystemFunction010",
    "SystemFunction025",
    "MIDL_user_free_Ext",
    "I_ScRegisterPreshutdownRestart",
    "RegEnumKeyA",
    "SystemFunction041",
    "CredIsProtectedW",
    "SystemFunction036",
    "ElfBackupEventLogFileA",
    "GetKernelObjectSecurity",
    "OpenProcessToken",
    "PerfAddCounters",
    "CryptDecrypt",
    "ClearEventLogA",
    "LsaGetUserName",
    "BuildExplicitAccessWithNameA",
    "GetSidLengthRequired",
    "LogonUserExA",
    "AuditQueryGlobalSaclW",
    "ReportEventA",
    "QuerySecurityAccessMask",
    "CredReadDomainCredentialsW",
    "BackupEventLogW",
    "SetEncryptedFileMetadata",
    "BuildImpersonateExplicitAccessWithNameA",
    "ConvertSidToStringSidW",
    "CreateWellKnownSid",
    "ElfOpenEventLogA",
    "PerfCreateInstance",
    "SaferiPopulateDefaultsInRegistry",
    "StartServiceW",
    "GetNamedSecurityInfoA",
    "SetSecurityDescriptorControl",
    "BuildTrusteeWithNameA",
    "EnumServicesStatusW",
    "RegCopyTreeA",
    "SystemFunction014",
    "SaferSetLevelInformation",
    "QueryTraceA",
    "A_SHAUpdate",
    "AddAce",
    "LookupSecurityDescriptorPartsA",
    "OpenServiceA",
    "AuditSetGlobalSaclW",
    "InitiateShutdownA",
    "AllocateAndInitializeSid",
    "A_SHAInit",
    "OpenEventLogW",
    "AreAnyAccessesGranted",
    "QueryTraceW",
    "CredpDecodeCredential",
    "SetSecurityDescriptorGroup",
    "TraceQueryInformation",
    "SetTokenInformation",
    "WmiDevInstToInstanceNameA",
    "WmiQueryGuidInformation",
    "CreateProcessAsUserA",
    "ElfOldestRecord",
    "LsaRemoveAccountRights",
    "AuditSetGlobalSaclA",
    "BaseRegUnLoadKey",
    "CredEnumerateW",
    "OpenEncryptedFileRawW",
    "CreateTraceInstanceId",
    "ObjectDeleteAuditAlarmA",
    "QueryServiceConfigA",
    "RegisterServiceCtrlHandlerExW",
    "LsaCreateTrustedDomain",
    "CryptGetKeyParam",
    "SetSecurityAccessMask",
    "RegCloseKey",
    "BaseRegCreateKey",
    "IsWellKnownSid",
    "LsaLookupPrivilegeValue",
    "RegisterIdleTask",
    "GetCurrentHwProfileW",
    "LogonUserExW",
    "ElfReadEventLogW",
    "ElfReportEventA",
    "LsaQueryCAPs",
    "RegEnumValueA",
    "AreAllAccessesGranted",
    "CreatePrivateObjectSecurity",
    "GetTrusteeTypeW",
    "PerfStartProviderEx",
    "RegDeleteValueA",
    "SystemFunction002",
    "NotifyServiceStatusChangeW",
    "GetLocalManagedApplicationData",
    "EncryptFileW",
    "LsaOpenSecret",
    "AddUsersToEncryptedFileEx",
    "EventWrite",
    "LookupSecurityDescriptorPartsW",
    "ConvertAccessToSecurityDescriptorA",
    "CredProfileUnloaded",
    "RegOpenKeyExW",
    "CryptDeriveKey",
    "PrivilegedServiceAuditAlarmA",
    "RegEnumValueW",
    "CreateProcessWithTokenW",
    "SystemFunction021",
    "CredUnprotectA",
    "LsaSetInformationPolicy",
    "AuditSetSecurity",
    "SetSecurityDescriptorSacl",
    "SystemFunction032",
    "CheckTokenMembership",
    "GetWindowsAccountDomainSid",
    "PsmAdjustActivationToken",
    "WmiFileHandleToInstanceNameA",
    "WmiQuerySingleInstanceA",
    "CryptHashData",
    "GetSecurityDescriptorSacl",
    "RegLoadAppKeyW",
    "SystemFunction016",
    "IsTokenUntrusted",
    "RegRestoreKeyA",
    "EnumServicesStatusExW",
    "ConvertSDToStringSDDomainW",
    "RegQueryInfoKeyA",
    "SystemFunction026",
    "EnumerateTraceGuidsEx",
    "SystemFunction033",
    "LsaLookupSids",
    "AccessCheckByTypeResultListAndAuditAlarmByHandleA",
    "CreateRestrictedToken",
    "CryptDuplicateHash",
    "CryptGetHashParam",
    "SaferCloseLevel",
    "BackupEventLogA",
    "RegDeleteKeyW",
    "CredFindBestCredentialW",
    "WmiQuerySingleInstanceMultipleW",
    "AuditSetSystemPolicy",
    "LsaSetSystemAccessAccount",
    "BuildTrusteeWithNameW",
    "WmiReceiveNotificationsA",
    "AuditLookupCategoryIdFromCategoryGuid",
    "LsaICLookupNames",
    "GetInformationCodeAuthzPolicyW",
    "SafeBaseRegGetKeySecurity",
    "StopTraceW",
    "LsaGetAppliedCAPIDs",
    "WmiQueryAllDataMultipleA",
    "PerfQueryCounterInfo",
    "ConvertStringSDToSDDomainW",
    "CreateProcessAsUserW",
    "CryptAcquireContextA",
    "FreeEncryptedFileKeyInfo",
    "EnumServiceGroupW",
    "LsaRetrievePrivateData",
    "WmiExecuteMethodW",
    "RemoteRegEnumKeyWrapper",
    "SystemFunction004",
    "ControlTraceW",
    "RegisterTraceGuidsW",
    "AuditComputeEffectivePolicyBySid",
    "WmiMofEnumerateResourcesA",
    "MD4Final",
    "AddAccessAllowedObjectAce",
    "I_ScGetCurrentGroupStateW",
    "CreateServiceW",
    "ControlService",
    "RegDeleteKeyExW",
    "SystemFunction008",
    "AccessCheckAndAuditAlarmA",
    "OpenThreadWaitChainSession",
    "BaseRegGetVersion",
    "LookupAccountNameA",
    "CredWriteDomainCredentialsW",
    "RegCopyTreeW",
    "AddMandatoryAce",
    "LsaManageSidNameMapping",
    "SystemFunction040",
    "WriteEncryptedFileRaw",
    "StartServiceCtrlDispatcherA",
    "DuplicateTokenEx",
    "LookupPrivilegeNameW",
    "LookupAccountSidA",
    "CredReadByTokenHandle",
    "LsaOpenTrustedDomain",
    "SystemFunction034",
    "CryptEnumProviderTypesA",
    "RegisterServiceCtrlHandlerW",
    "InitiateSystemShutdownExW",
    "RegDisablePredefinedCacheEx",
    "RegGetKeySecurity",
    "GetSidSubAuthority",
    "CryptGenRandom",
    "OpenEventLogA",
    "GetNamedSecurityInfoW",
    "CredpConvertOneCredentialSize",
    "RegLoadKeyW",
    "RegOpenKeyTransactedW",
    "PrivilegeCheck",
    "CryptSignHashW",
    "PerfRegQueryValue",
    "I_ScSetServiceBitsW",
    "I_ScIsSecurityProcess",
    "BuildSecurityDescriptorW",
    "IsValidSid",
    "CredMarshalCredentialW",
    "RegQueryMultipleValuesA",
    "CryptHashSessionKey",
    "FreeSid",
    "RegReplaceKeyA",
    "WmiDevInstToInstanceNameW",
    "CredIsMarshaledCredentialA",
    "CryptSetKeyParam",
    "SaferCreateLevel",
    "ConvertSecurityDescriptorToAccessW",
    "ConvertStringSDToSDRootDomainA",
    "SetFileSecurityA",
    "CredpConvertTargetInfo",
    "CredRenameA",
    "AuditEnumerateCategories",
    "ConvertStringSidToSidA",
    "ObjectCloseAuditAlarmW",
    "LookupPrivilegeValueW",
    "EventWriteString",
    "ObjectDeleteAuditAlarmW",
    "SetPrivateObjectSecurityEx",
    "BaseRegRestoreKey",
    "CryptDuplicateKey",
    "GetServiceKeyNameA",
    "AccessCheckByTypeResultList",
    "ElfReportEventW",
    "LsaOpenAccount",
    "CredMarshalCredentialA",
    "CryptGetDefaultProviderW",
    "BuildExplicitAccessWithNameW",
    "LsaAddAccountRights",
    "RegOpenKeyA",
    "LsaEnumerateTrustedDomains",
    "NotifyServiceStatusChange",
    "CredFree",
    "DuplicateToken",
    "PerfRegSetValue",
    "EqualDomainSid",
    "PrivilegedServiceAuditAlarmW",
    "RegSetKeyValueA",
    "CreateCodeAuthzLevel",
    "BaseRegCloseKey",
    "LsaClose",
    "I_ScQueryServiceConfig",
    "FileEncryptionStatusW",
    "AuditQueryGlobalSaclA",
    "LsaQueryInformationPolicy",
    "FileEncryptionStatusA",
    "InstallApplication",
    "ConvertSidToStringSidA",
    "PerfRegCloseKey",
    "RegisterWaitChainCOMCallback",
    "SetFileSecurityW",
    "BuildTrusteeWithObjectsAndNameW",
    "LsaEnumerateAccounts",
    "RegConnectRegistryExW",
    "AddAuditAccessObjectAce",
    "CryptGetUserKey",
    "EnumServicesStatusExA",
    "OpenBackupEventLogA",
    "CredGetTargetInfoW",
    "GetServiceDisplayNameW",
    "WmiCloseBlock",
    "GetSecurityDescriptorLength",
    "QueryServiceConfig2A",
    "AddUsersToEncryptedFile",
    "AuditLookupSubCategoryNameA",
    "ProcessTrace",
    "QueryServiceLockStatusW",
    "RegDeleteKeyExA",
    "TraceEventInstance",
    "LsaSetCAPs",
    "GetOverlappedAccessResults",
    "LookupAccountSidW",
    "PerfEnumerateCounterSetInstances",
    "GetAce",
    "GetOldestEventLogRecord",
    "SystemFunction022",
    "RegCreateKeyW",
    "PerfSetULongCounterValue",
    "EnumDynamicTimeZoneInformation",
    "MD4Init",
    "RegisterServiceCtrlHandlerExA",
    "FindFirstFreeAce",
    "SystemFunction012",
    "AuditEnumerateSubCategories",
    "QueryServiceConfig2W",
    "RegSaveKeyExA",
    "LsaLookupSids2",
    "DecryptFileW",
    "GetEventLogInformation",
    "RegDisableReflectionKey",
    "SetSecurityDescriptorRMControl",
    "GetSidSubAuthorityCount",
    "LsaRemovePrivilegesFromAccount",
    "GetAuditedPermissionsFromAclW",
    "RegConnectRegistryExA",
    "FreeEncryptedFileMetadata",
    "SetServiceBits",
    "SetNamedSecurityInfoA",
    "SystemFunction006",
    "EventEnabled",
    "GetCurrentHwProfileA",
    "SetSecurityDescriptorOwner",
    "AuditLookupCategoryNameA",
    "AddAuditAccessAceEx",
    "CryptAcquireContextW",
    "GetAccessPermissionsForObjectW",
    "SaferGetPolicyInformation",
    "GetTokenInformation",
    "ConvertSDToStringSDRootDomainW",
    "CryptGenKey",
    "RegDeleteKeyValueW",
    "RegOpenKeyTransactedA",
    "ChangeServiceConfigA",
    "QueryServiceConfigW",
    "LsaEnumerateTrustedDomainsEx",
    "IsValidSecurityDescriptor",
    "SystemFunction017",
    "BuildImpersonateTrusteeW",
    "SystemFunction027",
    "GetSecurityInfoExA",
    "WmiQueryAllDataW",
    "GetExplicitEntriesFromAclA",
    "StartServiceA",
    "RegDeleteKeyTransactedW",
    "OperationStart",
    "SystemFunction024",
    "LsaSetDomainInformationPolicy",
    "ImpersonateAnonymousToken",
    "GetThreadWaitChain",
    "GetUserNameA",
    "RegCreateKeyA",
    "AccessCheckAndAuditAlarmW",
    "AdjustTokenGroups",
    "LsaClearAuditLog",
    "InitiateShutdownW",
    "EtwLogSysConfigExtension",
    "StartTraceW",
    "LsaICLookupSidsWithCreds",
    "GetLocalManagedApplications",
    "GetLengthSid",
    "RegQueryValueExA",
    "GetTraceEnableFlags",
    "LockServiceDatabase",
    "ObjectOpenAuditAlarmW",
    "RegDeleteKeyA",
    "RegOpenCurrentUser",
    "WmiQuerySingleInstanceMultipleA",
    "AccessCheckByType",
    "PerfSetCounterSetInfo",
    "PerfIncrementULongLongCounterValue",
    "CryptVerifySignatureW",
    "AddAuditAccessAce",
    "RegQueryInfoKeyW",
    "AuditLookupCategoryNameW",
    "LsaSetForestTrustInformation",
    "StartServiceCtrlDispatcherW",
    "WmiSetSingleInstanceW",
    "ConvertStringSecurityDescriptorToSecurityDescriptorW",
    "SaferComputeTokenFromLevel",
    "InitiateSystemShutdownExA",
    "CredUnprotectW",
    "PsmActivateApplication",
    "RegEnableReflectionKey",
    "SystemFunction015",
    "CryptSetProviderExA",
    "ReadEventLogW",
    "UsePinForEncryptedFilesA",
    "LsaCreateAccount",
    "EncryptedFileKeyInfo",
    "AuditComputeEffectivePolicyByToken",
    "LsaAddPrivilegesToAccount",
    "PerfRegEnumValue",
    "SetEntriesInAccessListW",
    "EnumDependentServicesW",
    "RegEnumKeyExW",
    "ReadEventLogA",
    "EnumerateTraceGuids",
    "TraceEvent",
    "EnableTraceEx2",
    "LsaLookupNames",
    "SystemFunction020",
    "CredProtectW",
    "OpenBackupEventLogW",
    "ElfOpenBackupEventLogW",
    "CredFindBestCredentialA",
    "GetSecurityInfoExW",
    "GetTraceLoggerHandle",
    "PerfQueryCounterSetRegistrationInfo",
    "WmiEnumerateGuids",
    "WmiReceiveNotificationsW",
    "GetServiceKeyNameW",
    "PerfDecrementULongLongCounterValue",
    "CredEncryptAndMarshalBinaryBlob",
    "AddAccessAllowedAceEx",
    "LsaSetTrustedDomainInfoByName",
    "UnregisterIdleTask",
    "RegUnLoadKeyA",
    "ImpersonateLoggedOnUser",
    "ElfClearEventLogFileW",
    "InitializeAcl",
    "EventUnregister",
    "I_QueryTagInformation",
    "LsaSetTrustedDomainInformation",
    "A_SHAFinal",
    "SystemFunction005",
    "SetSecurityInfoExW",
    "SetEntriesInAuditListA",
    "SetEntriesInAclW",
    "BuildTrusteeWithObjectsAndNameA",
    "GetServiceDisplayNameA",
    "QueryServiceDynamicInformation",
    "AllocateLocallyUniqueId",
    "RegOpenUserClassesRoot",
    "GetTrusteeNameA",
    "RegisterServiceCtrlHandlerA",
    "WmiFreeBuffer",
    "PerfEnumerateCounterSet",
    "LsaQuerySecret",
    "WmiFileHandleToInstanceNameW",
    "BaseRegDeleteKeyEx",
    "ControlServiceExA",
    "SetEntriesInAuditListW",
    "RemoteRegEnumValueWrapper",
    "UpdateTraceW",
    "LsaGetQuotasForAccount",
    "GetInformationCodeAuthzLevelW",
    "CryptSetHashParam",
    "IsTextUnicode",
    "CancelOverlappedAccess",
    "EncryptFileA",
    "EventSetInformation",
    "TreeResetNamedSecurityInfoW",
    "WmiMofEnumerateResourcesW",
    "ConvertStringSidToSidW",
    "GetNamedSecurityInfoExW",
    "ConvertStringSDToSDDomainA",
    "SetTraceCallback",
    "RegCreateKeyTransactedW",
    "CryptSetProvParam",
    "BaseRegSetKeySecurity",
    "CreatePrivateObjectSecurityWithMultipleInheritance",
    "LsaSetSecurityObject",
    "ElfRegisterEventSourceW",
    "MD5Init",
    "CloseCodeAuthzLevel",
    "CryptDestroyHash",
    "CreateServiceA",
    "EventAccessQuery",
    "FlushTraceA",
    "LsaSetSecret",
    "CryptEnumProviderTypesW",
    "OpenThreadToken",
    "EqualPrefixSid",
    "InitiateSystemShutdownW",
    "BuildImpersonateExplicitAccessWithNameW",
    "OpenEncryptedFileRawA",
    "EventWriteStartScenario",
    "GetPrivateObjectSecurity",
    "CredIsMarshaledCredentialW",
    "PerfSetULongLongCounterValue",
    "RegSaveKeyW",
    "LsaEnumerateAccountsWithUserRight",
    "SystemFunction001",
    "GetTrusteeFormA",
    "UnregisterTraceGuids",
    "ControlTraceA",
    "AuditLookupSubCategoryNameW",
    "WmiSetSingleItemA",
    "ElfOpenBackupEventLogA",
    "BuildTrusteeWithObjectsAndSidA",
    "GetNamedSecurityInfoExA",
    "GetTrusteeNameW",
    "GetEffectiveRightsFromAclW",
    "TraceMessage",
    "RegFlushKey",
    "RegQueryReflectionKey",
    "BaseRegSaveKeyEx",
    "ComputeAccessTokenFromCodeAuthzLevel",
    "CryptGetProvParam",
    "EncryptionDisable",
    "OpenServiceW",
    "OpenTraceW",
    "LsaNtStatusToWinError",
    "GetTrusteeTypeA",
    "QueryServiceStatus",
    "SystemFunction023",
    "BaseRegDeleteValue",
    "PerfDeleteInstance",
    "SaferiCompareTokenLevels",
    "GetSecurityDescriptorOwner",
    "LogonUserA",
    "EnumDependentServicesA",
    "EqualSid",
    "SaferiRecordEventLogEntry",
    "PerfStopProvider",
    "UnlockServiceDatabase",
    "NotifyChangeEventLog",
    "ConvertStringSecurityDescriptorToSecurityDescriptorA",
    "CredProfileLoaded",
    "I_ScSendTSMessage",
    "SystemFunction009",
    "LsaQueryDomainInformationPolicy",
    "FreeEncryptionCertificateHashList",
    "WmiSetSingleItemW",
    "CredDeleteW",
    "PerfQueryCounterData",
    "ConvertSDToStringSDRootDomainA",
    "SetSecurityDescriptorDacl",
    "CryptEnumProvidersA",
    "AuditFree",
    "CopySid"
  ],
  "advpack.dll": [
    "RegInstallW",
    "TranslateInfStringEx",
    "AddDelBackupEntryA",
    "SetPerUserSecValuesW",
    "OpenINFEngineA",
    "FileSaveRestoreOnINFA",
    "IsNTAdmin",
    "GetVersionFromFileEx",
    "OpenINFEngineW",
    "LaunchINFSection",
    "GetVersionFromFileExA",
    "RegisterOCX",
    "DelNodeRunDLL32A",
    "DelNodeW",
    "RegRestoreAll",
    "DelNode",
    "DoInfInstall",
    "DoInfInstallW",
    "RegSaveRestoreA",
    "RunSetupCommandW",
    "RegSaveRestoreOnINF",
    "FileSaveRestoreA",
    "ExecuteCabW",
    "UserUnInstStubWrapperW",
    "SetPerUserSecValuesA",
    "DoInfInstallA",
    "GetVersionFromFileExW",
    "UserInstStubWrapper",
    "RegSaveRestoreW",
    "TranslateInfStringW",
    "RegInstallA",
    "GetVersionFromFile",
    "LaunchINFSectionExA",
    "FileSaveMarkNotExist",
    "ExtractFiles",
    "AddDelBackupEntryW",
    "RegRestoreAllW",
    "RegRestoreAllA",
    "SetPerUserSecValues",
    "DelNodeA",
    "FileSaveRestoreOnINF",
    "TranslateInfStringExW",
    "AddDelBackupEntry",
    "RegSaveRestoreOnINFA",
    "RegInstall",
    "CloseINFEngine",
    "LaunchINFSectionW",
    "RegSaveRestoreOnINFW",
    "FileSaveMarkNotExistA",
    "NeedReboot",
    "RunSetupCommand",
    "TranslateInfStringExA",
    "AdvInstallFileW",
    "FileSaveRestoreOnINFW",
    "OpenINFEngine",
    "AdvInstallFile",
    "ExecuteCab",
    "FileSaveMarkNotExistW",
    "ExecuteCabA",
    "TranslateInfString",
    "GetVersionFromFileA",
    "FileSaveRestore",
    "UserInstStubWrapperA",
    "NeedRebootInit",
    "UserInstStubWrapperW",
    "ExtractFilesA",
    "UserUnInstStubWrapper",
    "DelNodeRunDLL32",
    "DelNodeRunDLL32W",
    "UserUnInstStubWrapperA",
    "RebootCheckOnInstallA",
    "LaunchINFSectionA",
    "ExtractFilesW",
    "FileSaveRestoreW",
    "AdvInstallFileA",
    "GetVersionFromFileW",
    "RebootCheckOnInstall",
    "RegSaveRestore",
    "TranslateInfStringA",
    "RebootCheckOnInstallW",
    "RunSetupCommandA",
    "LaunchINFSectionExW",
    "LaunchINFSectionEx",
    "RegisterOCXW"
  ],
  "aecache.dll": [
    "AeCachePrep"
  ],
  "aeevts.dll": "No exports",
  "aeinv.dll": [
    "CollectMatchingInfo",
    "CreateSoftwareInventory",
    "UpdateSoftwareInventoryW",
    "SetFileExtensionList",
    "CollectMatchingInformation"
  ],
  "aelupsvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "aepdu.dll": [
    "AePduRunUpdateW"
  ],
  "aepic.dll": [
    "PicAmiInitialize",
    "PicRetrieveFileInfo",
    "PicFreeFileInfo",
    "PicAmiClose",
    "PicRetrieveFileInfoAppx"
  ],
  "amstream.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "apds.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "api-ms-win-appmodel-identity-l1-1-0.dll": [
    "AppContainerFreeMemory",
    "AppXGetDevelopmentMode",
    "AppXGetOSMaxVersionTested",
    "AppXLookupDisplayName",
    "AppContainerLookupDisplayNameMrtReference",
    "AppContainerUnregisterSid",
    "AppContainerRegisterSid",
    "AppXGetPackageState",
    "AppXGetPackageCapabilities",
    "AppXGetOSMinVersion",
    "AppXGetPackageSid",
    "AppContainerLookupMoniker",
    "AppXLookupMoniker",
    "AppXGetApplicationData",
    "AppXSetPackageState",
    "AppContainerDeriveSidFromMoniker",
    "AppXFreeMemory"
  ],
  "api-ms-win-appmodel-runtime-l1-1-0.dll": [
    "GetPackageInfo",
    "GetCurrentApplicationUserModelId",
    "PackageFamilyNameFromFullName",
    "PackageFullNameFromId",
    "GetPackageId",
    "PackageNameAndPublisherIdFromFamilyName",
    "GetCurrentPackageFamilyName",
    "GetPackagesByPackageFamily",
    "GetPackageFamilyName",
    "GetCurrentPackagePath",
    "GetApplicationUserModelId",
    "GetPackageFullName",
    "PackageIdFromFullName",
    "PackageFamilyNameFromId",
    "GetCurrentPackageFullName",
    "ClosePackageInfo",
    "OpenPackageInfoByFullName",
    "GetCurrentPackageInfo",
    "GetCurrentPackageId",
    "GetPackagePath"
  ],
  "api-ms-win-appmodel-state-l1-1-0.dll": [
    "RegisterStateLock",
    "OpenStateExplicit",
    "CreateStateLock",
    "GetStateFolder",
    "PublishStateChangeNotification",
    "ReleaseStateLock",
    "GetStateRootFolder",
    "QueryStateContainerItemInfo",
    "DeleteStateContainer",
    "OpenState",
    "CloseStateLock",
    "CloseState",
    "ResetState",
    "UnsubscribeStateChangeNotification",
    "ReadStateAtomValue",
    "OpenStateAtom",
    "DeleteStateAtomValue",
    "QueryStateAtomValueInfo",
    "EnumerateStateAtomValues",
    "CommitStateAtom",
    "ReadStateContainerValue",
    "DeleteStateContainerValue",
    "GetRoamingLastObservedChangeTime",
    "DuplicateStateContainerHandle",
    "SubscribeStateChangeNotification",
    "AcquireStateLock",
    "GetHivePath",
    "GetSerializedAtomBytes",
    "GetStateVersion",
    "SetRoamingLastObservedChangeTime",
    "GetSystemAppDataFolder",
    "WriteStateAtomValue",
    "EnumerateStateContainerItems",
    "UnregisterStateLock",
    "SetStateVersion",
    "CreateStateAtom",
    "CloseStateContainer",
    "GetStateSettingsFolder",
    "RegisterStateChangeNotification",
    "GetSystemAppDataKey",
    "CloseStateAtom",
    "WriteStateContainerValue",
    "OverrideRoamingDataModificationTimesInRange",
    "GetStateContainerDepth",
    "UnregisterStateChangeNotification",
    "CreateStateChangeNotification",
    "CreateStateContainer",
    "CloseStateChangeNotification",
    "CreateStateSubcontainer"
  ],
  "api-ms-win-base-bootconfig-l1-1-0.dll": [
    "NotifyBootConfigStatus"
  ],
  "api-ms-win-base-util-l1-1-0.dll": [
    "IsTextUnicode"
  ],
  "api-ms-win-core-apiquery-l1-1-0.dll": [
    "ApiSetQueryApiSetPresence"
  ],
  "api-ms-win-core-appcompat-l1-1-0.dll": [
    "BaseCleanupAppcompatCacheSupport",
    "BaseCheckAppcompatCacheEx",
    "BaseIsAppcompatInfrastructureDisabled",
    "BaseUpdateAppcompatCache",
    "BaseInitAppcompatCacheSupport",
    "BaseCheckAppcompatCache",
    "BaseFlushAppcompatCache",
    "BaseDumpAppcompatCache"
  ],
  "api-ms-win-core-appinit-l1-1-0.dll": [
    "LoadAppInitDlls"
  ],
  "api-ms-win-core-atoms-l1-1-0.dll": [
    "DeleteAtom",
    "GlobalAddAtomW",
    "GlobalFindAtomA",
    "GlobalAddAtomExW",
    "AddAtomA",
    "InitAtomTable",
    "GetAtomNameA",
    "GlobalDeleteAtom",
    "GetAtomNameW",
    "GlobalGetAtomNameW",
    "AddAtomW",
    "FindAtomA",
    "GlobalFindAtomW",
    "GlobalAddAtomExA",
    "GlobalAddAtomA",
    "GlobalGetAtomNameA",
    "FindAtomW"
  ],
  "api-ms-win-core-bem-l1-1-0.dll": [
    "BemCopyReference",
    "BemFreeContract",
    "BemCreateReference",
    "BemFreeReference",
    "BemCreateContractFrom"
  ],
  "api-ms-win-core-bicltapi-l1-1-0.dll": [
    "BiQueryUserSession",
    "BiQueryWorkItem",
    "BiEnumerateWorkItemsForPackageName",
    "BiAssociateActivationProxy",
    "BiEnumerateUserSessions",
    "BiActivateWorkItem",
    "BiEnumerateBrokeredEvents",
    "BiQuerySystemStateBroadcastChannels",
    "BiDeleteEvent",
    "BiQueryBrokeredEvent",
    "BiCreateEventForPackageName",
    "BiDiscardPendingActivations",
    "BiSignalMultipleEvents",
    "BiAssociateApplicationExtensionClass",
    "BiSignalEvent",
    "BiDisassociateWorkItem",
    "BiFreeMemory"
  ],
  "api-ms-win-core-biplmapi-l1-1-0.dll": [
    "BiUpdateLockScreenApplications",
    "BiSetActiveSessionForPackage",
    "BiChangeApplicationStateForPackageName",
    "BiChangeSessionState",
    "BiResetActiveSessionForPackage",
    "BiNotifyNewSession"
  ],
  "api-ms-win-core-biptcltapi-l1-1-0.dll": [
    "BiPtQuerySystemStateBroadcastChannels",
    "BiPtActivateWorkItem",
    "BiPtDeleteEvent",
    "BiPtAssociateActivationProxy",
    "BiPtFreeMemory",
    "BiPtQueryWorkItem",
    "BiPtQueryBrokeredEvent",
    "BiPtCreateEventForPackageName",
    "BiPtSignalMultipleEvents",
    "BiPtAssociateApplicationExtensionClass",
    "BiPtEnumerateBrokeredEvents",
    "BiPtSignalEvent",
    "BiPtDisassociateWorkItem",
    "BiPtEnumerateWorkItemsForPackageName"
  ],
  "api-ms-win-core-com-l1-1-0.dll": [
    "CoGetClassObject",
    "CoSetCancelObject",
    "CoFreeUnusedLibrariesEx",
    "CoDisableCallCancellation",
    "CoSuspendClassObjects",
    "CoCopyProxy",
    "CoSwitchCallContext",
    "PropVariantCopy",
    "CLSIDFromProgID",
    "CoGetContextToken",
    "CoGetCallerTID",
    "CoInitializeSecurity",
    "CoTaskMemRealloc",
    "CoUnmarshalInterface",
    "CoRegisterSurrogate",
    "StringFromGUID2",
    "CoWaitForMultipleHandles",
    "CoDecodeProxy",
    "CoIsHandlerConnected",
    "CoGetCancelObject",
    "CoCreateInstance",
    "CoEnableCallCancellation",
    "CoWaitForMultipleObjects",
    "CoAddRefServerProcess",
    "CoGetObjectContext",
    "CoDecrementMTAUsage",
    "IIDFromString",
    "CoCreateGuid",
    "CoResumeClassObjects",
    "CoInitializeEx",
    "PropVariantClear",
    "CoCreateFreeThreadedMarshaler",
    "CoRevertToSelf",
    "StringFromCLSID",
    "CoQueryClientBlanket",
    "CoUninitialize",
    "CoGetStdMarshalEx",
    "CoCreateInstanceFromApp",
    "CoGetCurrentLogicalThreadId",
    "CoGetTreatAsClass",
    "CoAllowUnmarshalerCLSID",
    "CoRevokeClassObject",
    "CoDisconnectObject",
    "CoMarshalHresult",
    "CoCancelCall",
    "CoQueryProxyBlanket",
    "CoSetProxyBlanket",
    "CreateStreamOnHGlobal",
    "CLSIDFromString",
    "CoRegisterClassObject",
    "CoTestCancel",
    "CoGetApartmentType",
    "CoGetCallContext",
    "CoDisconnectContext",
    "CoImpersonateClient",
    "CoGetMarshalSizeMax",
    "ProgIDFromCLSID",
    "StringFromIID",
    "CoGetDefaultContext",
    "CoCreateInstanceEx",
    "FreePropVariantArray",
    "CoFreeUnusedLibraries",
    "CoRegisterPSClsid",
    "GetHGlobalFromStream",
    "CoReleaseMarshalData",
    "CoGetMalloc",
    "CoReleaseServerProcess",
    "CoQueryAuthenticationServices",
    "CoInvalidateRemoteMachineBindings",
    "CoTaskMemFree",
    "CoGetPSClsid",
    "CoGetCurrentProcess",
    "CoTaskMemAlloc",
    "CoMarshalInterThreadInterfaceInStream",
    "CoGetStandardMarshal",
    "CoUnmarshalHresult",
    "CoIncrementMTAUsage",
    "CoLockObjectExternal",
    "CoGetInterfaceAndReleaseStream",
    "CoMarshalInterface"
  ],
  "api-ms-win-core-com-private-l1-1-0.dll": [
    "CoSetErrorInfo",
    "DllDebugObjectRPCHook",
    "NdrExtStubInitialize",
    "GetCatalogHelper",
    "InternalServerExceptionFilter",
    "InternalIrotRegister",
    "NdrpFindInterface",
    "CoPopServiceDomain",
    "CoRegisterInitializeSpy",
    "CoGetInstanceFromIStorage",
    "InternalIrotGetObject",
    "CoReactivateObject",
    "InternalIsApartmentInitialized",
    "InternalFillLocalOXIDInfo",
    "CoGetSystemSecurityPermissions",
    "InternalIrotEnumRunning",
    "InternalOleModalLoopBlockFn",
    "CoRevokeMallocSpy",
    "InternalCMLSendReceive",
    "ClearCleanupFlag",
    "InternalSetAptCallCtrlOnTlsIfRequired",
    "InternalUnmarshalObjRef",
    "InternalNotifyDDStartOrStop",
    "CoRetireServer",
    "InternalCCSetDdeServerWindow",
    "InternalIrotRevoke",
    "CoInitializeWOW",
    "HkOleRegisterObject",
    "CoGetErrorInfo",
    "InternalSTAInvoke",
    "InternalCreateCAggId",
    "InternalCreateIdentityHandler",
    "GetFuncDescs",
    "InternalCoRegisterSurrogatedObject",
    "UpdateProcessTracing",
    "CoVrfGetThreadState",
    "InternalSetOleThunkWowPtr",
    "InternalAppInvokeExceptionFilter",
    "CoGetClassVersion",
    "InternalCallerIsAppContainer",
    "CoRegisterSurrogateEx",
    "InternalGetWindowPropInterface",
    "CoRevokeInitializeSpy",
    "InternalCompleteObjRef",
    "InternalIsProcessInitialized",
    "CoGetInstanceFromFile",
    "InternalFreeObjRef",
    "InternalIrotNoteChangeTime",
    "CoGetActivationState",
    "NdrOleDllGetClassObject",
    "CoCreateErrorInfo",
    "EnableHookObject",
    "CleanupOleStateInAllTls",
    "CoPushServiceDomain",
    "InternalCanMakeOutCall",
    "CoRegisterMallocSpy",
    "SetCleanupFlag",
    "InternalIrotGetTimeOfLastChange",
    "NdrOleInitializeExtension",
    "GetHookInterface",
    "InternalIrotIsRunning",
    "CoGetCallState",
    "CoRegisterMessageFilter",
    "InternalReleaseMarshalObjRef",
    "CoCreateObjectInContext",
    "InternalCoIsSurrogateProcess",
    "InternalDoATClassCreate",
    "InternalCoRegisterDisconnectCallback",
    "CoDeactivateObject",
    "CoGetApartmentID",
    "ReleaseFuncDescs",
    "CoVrfReleaseThreadState",
    "UpdateDCOMSettings",
    "CoVrfCheckThreadState",
    "CoGetProcessIdentifier",
    "InternalCCGetClassInformationForDde",
    "InternalRegisterWindowPropInterface",
    "CoUnloadingWOW",
    "InternalCCFreeUnused",
    "InternalTlsAllocData",
    "FreePropVariantArrayWorker",
    "InternalCoUnregisterDisconnectCallback",
    "InternalCallFrameExceptionFilter",
    "InternalCCGetClassInformationFromKey",
    "CleanupTlsOleState",
    "InternalStubInvoke",
    "InternalMarshalObjRef",
    "InternalCoStdMarshalObject",
    "InternalCallAsProxyExceptionFilter",
    "CoGetModuleType",
    "CLSIDFromOle1Class"
  ],
  "api-ms-win-core-comm-l1-1-0.dll": [
    "SetCommMask",
    "GetCommTimeouts",
    "SetupComm",
    "SetCommTimeouts",
    "EscapeCommFunction",
    "GetCommModemStatus",
    "PurgeComm",
    "ClearCommBreak",
    "GetCommState",
    "TransmitCommChar",
    "GetCommConfig",
    "SetCommState",
    "SetCommConfig",
    "GetCommMask",
    "SetCommBreak",
    "WaitCommEvent",
    "ClearCommError",
    "GetCommProperties"
  ],
  "api-ms-win-core-console-l1-1-0.dll": [
    "AllocConsole",
    "WriteConsoleA",
    "ReadConsoleW",
    "ReadConsoleInputW",
    "PeekConsoleInputA",
    "WriteConsoleW",
    "SetConsoleMode",
    "GetConsoleMode",
    "ReadConsoleInputA",
    "GetNumberOfConsoleInputEvents",
    "ReadConsoleA",
    "SetConsoleCtrlHandler",
    "GetConsoleCP",
    "GetConsoleOutputCP"
  ],
  "api-ms-win-core-console-l2-1-0.dll": [
    "SetConsoleWindowInfo",
    "GetConsoleTitleW",
    "FlushConsoleInputBuffer",
    "WriteConsoleOutputAttribute",
    "SetConsoleScreenBufferInfoEx",
    "SetConsoleScreenBufferSize",
    "GetConsoleCursorInfo",
    "ReadConsoleOutputAttribute",
    "SetConsoleCursorPosition",
    "SetConsoleCP",
    "WriteConsoleOutputW",
    "ReadConsoleOutputCharacterW",
    "SetConsoleCursorInfo",
    "FillConsoleOutputCharacterA",
    "ReadConsoleOutputW",
    "FillConsoleOutputCharacterW",
    "ScrollConsoleScreenBufferW",
    "ScrollConsoleScreenBufferA",
    "GetConsoleScreenBufferInfo",
    "GetLargestConsoleWindowSize",
    "WriteConsoleInputA",
    "SetConsoleTextAttribute",
    "AttachConsole",
    "ReadConsoleOutputCharacterA",
    "WriteConsoleInputW",
    "ReadConsoleOutputA",
    "WriteConsoleOutputA",
    "SetConsoleOutputCP",
    "SetConsoleTitleW",
    "SetConsoleActiveScreenBuffer",
    "WriteConsoleOutputCharacterA",
    "FreeConsole",
    "FillConsoleOutputAttribute",
    "WriteConsoleOutputCharacterW",
    "CreateConsoleScreenBuffer",
    "GetConsoleScreenBufferInfoEx",
    "PeekConsoleInputW",
    "GenerateConsoleCtrlEvent"
  ],
  "api-ms-win-core-crt-l1-1-0.dll": [
    "_snwprintf_s",
    "vsprintf_s",
    "memcpy_s",
    "atoi",
    "_i64tow_s",
    "_ultow_s",
    "strstr",
    "sscanf_s",
    "strnlen",
    "wcsrchr",
    "_vsnprintf_s",
    "memcpy",
    "wcsncmp",
    "wcscpy_s",
    "_splitpath_s",
    "_vsnwprintf_s",
    "_strupr_s",
    "_ui64tow_s",
    "memset",
    "wcstol",
    "wcsncpy_s",
    "_itow_s",
    "_except_handler4_common",
    "islower",
    "iswdigit",
    "strlen",
    "wcsstr",
    "strchr",
    "strrchr",
    "strtok_s",
    "_wcslwr_s",
    "wcstoul",
    "wcscat_s",
    "_wcsupr_s",
    "_ultow",
    "_wcstoi64",
    "_wtoi64",
    "iswprint",
    "_snprintf_s",
    "_strlwr_s",
    "towlower",
    "wcspbrk",
    "isprint",
    "tolower",
    "_ftol2",
    "isdigit",
    "_strnicmp",
    "_wsplitpath_s",
    "isspace",
    "strcat_s",
    "memcmp",
    "_wcsicmp",
    "wcsnlen",
    "_stricmp",
    "wcslen",
    "wcstok_s",
    "iswctype",
    "_wcsnicmp",
    "wcscmp",
    "isalnum",
    "isupper",
    "isgraph",
    "strcmp",
    "qsort_s",
    "iswascii",
    "strcspn",
    "swprintf_s",
    "_errno",
    "strncpy_s",
    "wcsncat_s",
    "_wcstoui64",
    "_wtol",
    "wcscspn",
    "strtol",
    "_ltow_s",
    "_ftol",
    "_ftol2_sse",
    "towupper",
    "strcpy_s",
    "_wtoi",
    "strncat_s",
    "sprintf_s",
    "iswspace",
    "iswalnum",
    "memmove",
    "iswgraph",
    "strtoul",
    "toupper",
    "_local_unwind4",
    "strncmp",
    "__isascii",
    "wcschr",
    "atol",
    "memmove_s",
    "_atoi64",
    "vswprintf_s",
    "_fltused",
    "strpbrk"
  ],
  "api-ms-win-core-crt-l2-1-0.dll": [
    "_initterm",
    "_invalid_parameter",
    "_time64",
    "_purecall",
    "_exit",
    "_amsg_exit",
    "atexit",
    "__dllonexit3",
    "hgets",
    "_c_exit",
    "_cexit",
    "hwprintf",
    "exit",
    "__wgetmainargs",
    "time",
    "_onexit",
    "_initterm_e",
    "wprintf"
  ],
  "api-ms-win-core-datetime-l1-1-0.dll": [
    "GetDateFormatA",
    "GetTimeFormatW",
    "GetTimeFormatA",
    "GetDateFormatW"
  ],
  "api-ms-win-core-datetime-l1-1-1.dll": [
    "GetTimeFormatEx",
    "GetDateFormatEx",
    "GetDateFormatW",
    "GetDateFormatA",
    "GetTimeFormatW",
    "GetTimeFormatA"
  ],
  "api-ms-win-core-debug-l1-1-0.dll": [
    "IsDebuggerPresent",
    "OutputDebugStringW",
    "OutputDebugStringA",
    "DebugBreak"
  ],
  "api-ms-win-core-debug-l1-1-1.dll": [
    "CheckRemoteDebuggerPresent",
    "OutputDebugStringW",
    "WaitForDebugEvent",
    "DebugActiveProcessStop",
    "DebugBreak",
    "IsDebuggerPresent",
    "DebugActiveProcess",
    "ContinueDebugEvent",
    "OutputDebugStringA"
  ],
  "api-ms-win-core-delayload-l1-1-0.dll": [
    "DelayLoadFailureHook"
  ],
  "api-ms-win-core-delayload-l1-1-1.dll": [
    "DelayLoadFailureHook",
    "ResolveDelayLoadedAPI",
    "ResolveDelayLoadsFromDll"
  ],
  "api-ms-win-core-errorhandling-l1-1-0.dll": [
    "UnhandledExceptionFilter",
    "SetUnhandledExceptionFilter",
    "SetErrorMode",
    "RaiseException",
    "GetLastError",
    "SetLastError",
    "GetErrorMode"
  ],
  "api-ms-win-core-errorhandling-l1-1-1.dll": [
    "AddVectoredExceptionHandler",
    "AddVectoredContinueHandler",
    "UnhandledExceptionFilter",
    "RemoveVectoredContinueHandler",
    "SetErrorMode",
    "SetUnhandledExceptionFilter",
    "RaiseException",
    "GetLastError",
    "RemoveVectoredExceptionHandler",
    "RestoreLastError",
    "SetLastError",
    "GetErrorMode"
  ],
  "api-ms-win-core-fibers-l1-1-0.dll": [
    "FlsAlloc",
    "FlsGetValue",
    "FlsFree",
    "FlsSetValue"
  ],
  "api-ms-win-core-fibers-l1-1-1.dll": [
    "FlsSetValue",
    "IsThreadAFiber",
    "FlsAlloc",
    "FlsGetValue",
    "FlsFree"
  ],
  "api-ms-win-core-fibers-l2-1-0.dll": [
    "SwitchToFiber",
    "ConvertThreadToFiber",
    "ConvertFiberToThread",
    "DeleteFiber",
    "CreateFiber"
  ],
  "api-ms-win-core-file-l1-1-0.dll": [
    "LockFileEx",
    "DeleteFileA",
    "SetFileValidData",
    "CreateFileA",
    "FindNextFileA",
    "SetEndOfFile",
    "FindFirstChangeNotificationA",
    "FindClose",
    "DeleteFileW",
    "GetDiskFreeSpaceExA",
    "FileTimeToLocalFileTime",
    "ReadFileEx",
    "CreateDirectoryW",
    "SetFileInformationByHandle",
    "FindFirstFileExW",
    "FindFirstFileW",
    "GetFinalPathNameByHandleW",
    "SetFilePointer",
    "GetFullPathNameA",
    "SetFileTime",
    "UnlockFileEx",
    "WriteFile",
    "RemoveDirectoryA",
    "LocalFileTimeToFileTime",
    "GetFileAttributesExA",
    "CreateFileW",
    "GetFileAttributesA",
    "SetFileAttributesW",
    "WriteFileEx",
    "CompareFileTime",
    "GetFileAttributesW",
    "FlushFileBuffers",
    "ReadFile",
    "GetFileSizeEx",
    "GetDiskFreeSpaceW",
    "FindVolumeClose",
    "GetDriveTypeW",
    "GetFullPathNameW",
    "SetFilePointerEx",
    "UnlockFile",
    "FindNextFileW",
    "GetVolumeInformationW",
    "GetLogicalDrives",
    "GetVolumePathNameW",
    "GetVolumeInformationByHandleW",
    "FindFirstFileExA",
    "GetFileTime",
    "GetDiskFreeSpaceExW",
    "FindFirstChangeNotificationW",
    "LockFile",
    "RemoveDirectoryW",
    "GetShortPathNameW",
    "FindNextVolumeW",
    "DeleteVolumeMountPointW",
    "DefineDosDeviceW",
    "SetFileAttributesA",
    "GetFileSize",
    "GetFinalPathNameByHandleA",
    "GetLogicalDriveStringsW",
    "GetFileAttributesExW",
    "GetTempFileNameW",
    "QueryDosDeviceW",
    "GetDriveTypeA",
    "CreateDirectoryA",
    "ReadFileScatter",
    "FindFirstVolumeW",
    "FileTimeToSystemTime",
    "GetFileInformationByHandle",
    "GetLongPathNameW",
    "FindFirstFileA",
    "GetLongPathNameA",
    "FindNextChangeNotification",
    "GetDiskFreeSpaceA",
    "FindCloseChangeNotification",
    "GetFileType",
    "WriteFileGather"
  ],
  "api-ms-win-core-file-l1-2-0.dll": [
    "FindClose",
    "GetDiskFreeSpaceExA",
    "FileTimeToLocalFileTime",
    "SetFileTime",
    "RemoveDirectoryA",
    "GetFileAttributesA",
    "GetFileSizeEx",
    "FindNextFileW",
    "FindFirstFileExA",
    "SetFileAttributesA",
    "FindFirstVolumeW",
    "GetFileInformationByHandle",
    "GetLongPathNameW",
    "GetLongPathNameA",
    "LockFileEx",
    "FindNextFileA",
    "SetFileValidData",
    "FindFirstChangeNotificationA",
    "CreateDirectoryW",
    "FindFirstFileExW",
    "SetFileInformationByHandle",
    "FindFirstFileW",
    "GetFinalPathNameByHandleW",
    "WriteFile",
    "GetDiskFreeSpaceW",
    "UnlockFile",
    "GetLogicalDrives",
    "GetVolumeInformationByHandleW",
    "LockFile",
    "GetVolumePathNamesForVolumeNameW",
    "GetDriveTypeA",
    "FindFirstFileA",
    "FindNextChangeNotification",
    "GetDiskFreeSpaceA",
    "FindCloseChangeNotification",
    "GetTempPathW",
    "CreateFile2",
    "CreateFileA",
    "UnlockFileEx",
    "GetFullPathNameA",
    "WriteFileEx",
    "GetFileAttributesW",
    "FlushFileBuffers",
    "GetVolumeNameForVolumeMountPointW",
    "GetFullPathNameW",
    "SetFilePointerEx",
    "GetVolumeInformationW",
    "GetFileTime",
    "GetDiskFreeSpaceExW",
    "FindFirstChangeNotificationW",
    "RemoveDirectoryW",
    "GetShortPathNameW",
    "QueryDosDeviceW",
    "ReadFileScatter",
    "DeleteFileA",
    "SetEndOfFile",
    "DeleteFileW",
    "ReadFileEx",
    "SetFilePointer",
    "LocalFileTimeToFileTime",
    "GetFileAttributesExA",
    "CreateFileW",
    "SetFileAttributesW",
    "CompareFileTime",
    "ReadFile",
    "FindVolumeClose",
    "GetDriveTypeW",
    "GetVolumePathNameW",
    "FindNextVolumeW",
    "DeleteVolumeMountPointW",
    "DefineDosDeviceW",
    "GetFileSize",
    "GetFinalPathNameByHandleA",
    "GetLogicalDriveStringsW",
    "GetFileAttributesExW",
    "GetTempFileNameW",
    "CreateDirectoryA",
    "GetFileType",
    "WriteFileGather"
  ],
  "api-ms-win-core-file-l2-1-0.dll": [
    "ReadDirectoryChangesW",
    "ReplaceFileW",
    "CopyFileExW",
    "CreateHardLinkW",
    "CreateDirectoryExW",
    "CreateSymbolicLinkW",
    "CopyFile2",
    "MoveFileWithProgressW",
    "GetFileInformationByHandleEx",
    "MoveFileExW",
    "ReOpenFile"
  ],
  "api-ms-win-core-firmware-l1-1-0.dll": [
    "GetFirmwareEnvironmentVariableW",
    "GetFirmwareEnvironmentVariableExW",
    "SetFirmwareEnvironmentVariableExW",
    "SetFirmwareEnvironmentVariableW"
  ],
  "api-ms-win-core-handle-l1-1-0.dll": [
    "SetHandleInformation",
    "DuplicateHandle",
    "GetHandleInformation",
    "CloseHandle"
  ],
  "api-ms-win-core-heap-l1-1-0.dll": [
    "HeapReAlloc",
    "HeapCompact",
    "HeapLock",
    "HeapAlloc",
    "HeapDestroy",
    "HeapWalk",
    "HeapValidate",
    "GetProcessHeap",
    "HeapSummary",
    "HeapFree",
    "HeapQueryInformation",
    "HeapCreate",
    "GetProcessHeaps",
    "HeapUnlock",
    "HeapSetInformation",
    "HeapSize"
  ],
  "api-ms-win-core-heap-l1-2-0.dll": [
    "HeapReAlloc",
    "HeapCompact",
    "HeapLock",
    "HeapAlloc",
    "HeapDestroy",
    "HeapWalk",
    "HeapValidate",
    "GetProcessHeap",
    "HeapFree",
    "HeapQueryInformation",
    "HeapCreate",
    "GetProcessHeaps",
    "HeapUnlock",
    "HeapSetInformation",
    "HeapSize"
  ],
  "api-ms-win-core-heap-obsolete-l1-1-0.dll": [
    "GlobalFree",
    "GlobalFlags",
    "LocalReAlloc",
    "LocalFlags",
    "LocalAlloc",
    "GlobalSize",
    "GlobalReAlloc",
    "GlobalUnlock",
    "LocalFree",
    "LocalSize",
    "GlobalHandle",
    "GlobalAlloc",
    "GlobalLock",
    "LocalUnlock",
    "LocalLock"
  ],
  "api-ms-win-core-interlocked-l1-1-0.dll": [
    "InterlockedDecrement",
    "InterlockedExchange",
    "QueryDepthSList",
    "InterlockedExchangeAdd",
    "InterlockedPushEntrySList",
    "InterlockedPopEntrySList",
    "InterlockedFlushSList",
    "InterlockedIncrement",
    "InterlockedCompareExchange",
    "InterlockedCompareExchange64",
    "InitializeSListHead",
    "InterlockedPushListSList"
  ],
  "api-ms-win-core-interlocked-l1-2-0.dll": [
    "InterlockedPushListSListEx",
    "InterlockedDecrement",
    "InterlockedExchange",
    "QueryDepthSList",
    "InterlockedExchangeAdd",
    "InterlockedPushEntrySList",
    "InterlockedPopEntrySList",
    "InterlockedFlushSList",
    "InterlockedIncrement",
    "InterlockedCompareExchange",
    "InterlockedCompareExchange64",
    "InitializeSListHead"
  ],
  "api-ms-win-core-io-l1-1-0.dll": [
    "CreateIoCompletionPort",
    "PostQueuedCompletionStatus",
    "DeviceIoControl",
    "CancelIoEx",
    "GetQueuedCompletionStatus",
    "GetQueuedCompletionStatusEx",
    "GetOverlappedResult"
  ],
  "api-ms-win-core-io-l1-1-1.dll": [
    "CreateIoCompletionPort",
    "CancelSynchronousIo",
    "PostQueuedCompletionStatus",
    "CancelIo",
    "DeviceIoControl",
    "CancelIoEx",
    "GetQueuedCompletionStatus",
    "GetQueuedCompletionStatusEx",
    "GetOverlappedResult",
    "GetOverlappedResultEx"
  ],
  "api-ms-win-core-job-l1-1-0.dll": [
    "IsProcessInJob"
  ],
  "api-ms-win-core-job-l2-1-0.dll": [
    "OpenJobObjectW",
    "QueryInformationJobObject",
    "AssignProcessToJobObject",
    "TerminateJobObject",
    "CreateJobObjectW",
    "SetInformationJobObject"
  ],
  "api-ms-win-core-kernel32-legacy-l1-1-0.dll": [
    "CopyFileW",
    "SetHandleCount",
    "GetConsoleWindow",
    "BackupRead",
    "MoveFileExA",
    "GetStringTypeExA",
    "GetDurationFormatEx",
    "GetTapeParameters",
    "GetNamedPipeClientProcessId",
    "SetConsoleTitleA",
    "WaitForMultipleObjects",
    "SetFileCompletionNotificationModes",
    "AddLocalAlternateComputerNameW",
    "GetTempPathA",
    "GetThreadSelectorEntry",
    "BindIoCompletionCallback",
    "LoadLibraryW",
    "SetMailslotInfo",
    "RegisterWaitForSingleObject",
    "CreateMailslotA",
    "GetNamedPipeServerProcessId",
    "FileTimeToDosDateTime",
    "GetSystemPowerStatus",
    "FindResourceExA",
    "BackupWrite",
    "CreateFileMappingA",
    "MulDiv",
    "OpenFile",
    "CreateSemaphoreW",
    "GetComputerNameW",
    "DosDateTimeToFileTime",
    "FindResourceW",
    "GetShortPathNameA",
    "GlobalMemoryStatus",
    "GetComputerNameA",
    "WTSGetActiveConsoleSessionId",
    "FindResourceA",
    "CopyFileA",
    "MoveFileW",
    "CreateFileTransactedW",
    "CreateNamedPipeA",
    "GetMaximumProcessorGroupCount",
    "GetSystemWow64DirectoryW",
    "RaiseFailFastException",
    "LoadLibraryA",
    "FatalAppExitA",
    "GetStartupInfoA",
    "PulseEvent",
    "DnsHostnameToComputerNameW",
    "MoveFileA",
    "FatalAppExitW",
    "GetSystemWow64DirectoryA",
    "UnregisterWait",
    "SetVolumeLabelW"
  ],
  "api-ms-win-core-kernel32-private-l1-1-0.dll": [
    "_lcreat",
    "CheckElevationEnabled",
    "_lread",
    "RegisterWaitForInputIdle",
    "_lwrite",
    "SetLocalPrimaryComputerNameW",
    "DosPathToSessionPathW",
    "EnumerateLocalComputerNamesW",
    "RemoveLocalAlternateComputerNameW",
    "_llseek",
    "BaseSetLastNTError",
    "_lclose",
    "_lopen"
  ],
  "api-ms-win-core-libraryloader-l1-1-0.dll": [
    "LoadStringA",
    "GetModuleFileNameA",
    "FreeLibrary",
    "RemoveDllDirectory",
    "GetModuleFileNameW",
    "LoadLibraryExA",
    "SetDefaultDllDirectories",
    "LoadResource",
    "LockResource",
    "FindStringOrdinal",
    "SizeofResource",
    "GetModuleHandleExA",
    "GetProcAddress",
    "FindResourceExW",
    "LoadLibraryExW",
    "FreeLibraryAndExitThread",
    "GetModuleHandleA",
    "LoadStringW",
    "GetModuleHandleExW",
    "AddDllDirectory",
    "FreeResource",
    "GetModuleHandleW",
    "DisableThreadLibraryCalls"
  ],
  "api-ms-win-core-libraryloader-l1-1-1.dll": [
    "LoadStringA",
    "GetModuleFileNameA",
    "FreeLibrary",
    "EnumResourceTypesExW",
    "RemoveDllDirectory",
    "GetModuleFileNameW",
    "EnumResourceLanguagesExA",
    "LoadLibraryExA",
    "SetDefaultDllDirectories",
    "EnumResourceTypesExA",
    "EnumResourceLanguagesExW",
    "LoadResource",
    "EnumResourceNamesExW",
    "LockResource",
    "FindStringOrdinal",
    "SizeofResource",
    "GetModuleHandleExA",
    "GetProcAddress",
    "QueryOptionalDelayLoadedAPI",
    "FindResourceExW",
    "LoadLibraryExW",
    "FreeLibraryAndExitThread",
    "GetModuleHandleA",
    "LoadStringW",
    "GetModuleHandleExW",
    "AddDllDirectory",
    "EnumResourceNamesExA",
    "FreeResource",
    "GetModuleHandleW",
    "DisableThreadLibraryCalls"
  ],
  "api-ms-win-core-localization-l1-1-0.dll": [
    "SetThreadLocale",
    "GetUserDefaultLangID",
    "LocaleNameToLCID",
    "FindNLSStringEx",
    "FindNLSString",
    "GetUILanguageInfo",
    "NlsUpdateLocale",
    "GetThreadPreferredUILanguages",
    "GetCPFileNameFromRegistry",
    "NlsCheckPolicy",
    "GetCPInfo",
    "LCMapStringEx",
    "GetFileMUIInfo",
    "GetProcessPreferredUILanguages",
    "IsNLSDefinedString",
    "GetCPInfoExW",
    "GetSystemDefaultLCID",
    "ConvertDefaultLocale",
    "GetSystemDefaultLangID",
    "ResolveLocaleName",
    "GetUserPreferredUILanguages",
    "GetOEMCP",
    "GetLocaleInfoEx",
    "GetCalendarInfoEx",
    "VerLanguageNameA",
    "IsValidCodePage",
    "NlsGetCacheUpdateCount",
    "GetACP",
    "GetThreadLocale",
    "GetNLSVersion",
    "GetSystemPreferredUILanguages",
    "LCMapStringW",
    "NlsUpdateSystemLocale",
    "NlsEventDataDescCreate",
    "GetLocaleInfoW",
    "GetUserDefaultLCID",
    "VerLanguageNameW",
    "GetNLSVersionEx",
    "GetThreadUILanguage",
    "IsValidLocale",
    "GetCalendarInfoW",
    "IsValidLanguageGroup",
    "NlsWriteEtwEvent",
    "GetFileMUIPath",
    "SetLocaleInfoW",
    "IsValidLocaleName",
    "SetCalendarInfoW"
  ],
  "api-ms-win-core-localization-l1-2-0.dll": [
    "IdnToUnicode",
    "SetThreadLocale",
    "GetUserDefaultLangID",
    "IsValidNLSVersion",
    "IsDBCSLeadByteEx",
    "FormatMessageA",
    "LocaleNameToLCID",
    "FindNLSStringEx",
    "FindNLSString",
    "GetUILanguageInfo",
    "GetThreadPreferredUILanguages",
    "GetCPInfo",
    "LCMapStringEx",
    "FormatMessageW",
    "GetUserGeoID",
    "GetFileMUIInfo",
    "GetProcessPreferredUILanguages",
    "IsNLSDefinedString",
    "GetCPInfoExW",
    "GetSystemDefaultLCID",
    "ConvertDefaultLocale",
    "GetSystemDefaultLangID",
    "LCMapStringA",
    "EnumSystemLocalesW",
    "EnumSystemGeoID",
    "ResolveLocaleName",
    "SetUserGeoID",
    "GetUserDefaultLocaleName",
    "GetUserPreferredUILanguages",
    "GetOEMCP",
    "GetLocaleInfoEx",
    "GetCalendarInfoEx",
    "SetThreadPreferredUILanguages",
    "VerLanguageNameA",
    "IsValidCodePage",
    "SetThreadUILanguage",
    "GetACP",
    "GetThreadLocale",
    "IdnToAscii",
    "GetNLSVersion",
    "GetSystemPreferredUILanguages",
    "SetProcessPreferredUILanguages",
    "LCMapStringW",
    "GetLocaleInfoW",
    "GetLocaleInfoA",
    "GetUserDefaultLCID",
    "VerLanguageNameW",
    "EnumSystemLocalesA",
    "GetNLSVersionEx",
    "GetThreadUILanguage",
    "IsValidLocale",
    "IsDBCSLeadByte",
    "GetCalendarInfoW",
    "IsValidLanguageGroup",
    "GetGeoInfoW",
    "GetFileMUIPath",
    "SetLocaleInfoW",
    "IsValidLocaleName",
    "SetCalendarInfoW"
  ],
  "api-ms-win-core-localization-l2-1-0.dll": [
    "GetCurrencyFormatEx",
    "EnumDateFormatsW",
    "EnumSystemCodePagesW",
    "EnumCalendarInfoExW",
    "EnumDateFormatsExW",
    "EnumDateFormatsExEx",
    "EnumCalendarInfoW",
    "EnumTimeFormatsEx",
    "EnumTimeFormatsW",
    "EnumCalendarInfoExEx",
    "GetCurrencyFormatW",
    "GetNumberFormatEx"
  ],
  "api-ms-win-core-localization-obsolete-l1-1-0.dll": [
    "GetStringTypeA",
    "GetUserDefaultUILanguage",
    "EnumLanguageGroupLocalesW",
    "GetSystemDefaultUILanguage",
    "EnumSystemLocalesEx",
    "LCIDToLocaleName",
    "GetSystemDefaultLocaleName",
    "EnumUILanguagesW",
    "CompareStringA",
    "EnumSystemLanguageGroupsW",
    "GetNumberFormatW"
  ],
  "api-ms-win-core-localization-private-l1-1-0.dll": [
    "NlsGetCacheUpdateCount",
    "_GetMUIStringFromCache",
    "_OpenMuiStringCache",
    "_AddMUIStringToCache",
    "NlsUpdateLocale",
    "NlsWriteEtwEvent",
    "GetCPFileNameFromRegistry",
    "NlsCheckPolicy",
    "LoadStringByReference",
    "NlsUpdateSystemLocale",
    "NlsEventDataDescCreate"
  ],
  "api-ms-win-core-localregistry-l1-1-0.dll": [
    "RegQueryInfoKeyW",
    "RegOpenKeyExA",
    "RegRestoreKeyA",
    "RegOpenUserClassesRoot",
    "RegGetValueA",
    "RegQueryInfoKeyA",
    "RegFlushKey",
    "RegEnumKeyExW",
    "RegQueryValueExW",
    "RegSaveKeyExW",
    "RegUnLoadKeyW",
    "RegDeleteKeyExW",
    "RegDeleteTreeW",
    "RegGetValueW",
    "RegCloseKey",
    "RegSetValueExW",
    "RegLoadMUIStringA",
    "RegDeleteKeyExA",
    "RegNotifyChangeKeyValue",
    "RegEnumValueA",
    "RegRestoreKeyW",
    "RegDeleteValueA",
    "RegSetValueExA",
    "RegCreateKeyExW",
    "RegLoadKeyA",
    "RegDeleteValueW",
    "RegDeleteTreeA",
    "RegQueryValueExA",
    "RegDisablePredefinedCacheEx",
    "RegEnumKeyExA",
    "RegGetKeySecurity",
    "RegOpenKeyExW",
    "RegEnumValueW",
    "RegLoadMUIStringW",
    "RegSaveKeyExA",
    "RegOpenCurrentUser",
    "RegUnLoadKeyA",
    "RegCreateKeyExA",
    "RegLoadKeyW",
    "RegSetKeySecurity"
  ],
  "api-ms-win-core-memory-l1-1-0.dll": [
    "WriteProcessMemory",
    "MapViewOfFileEx",
    "VirtualQueryEx",
    "VirtualProtect",
    "ReadProcessMemory",
    "FlushViewOfFile",
    "VirtualAllocEx",
    "UnmapViewOfFile",
    "CreateFileMappingW",
    "VirtualFreeEx",
    "VirtualQuery",
    "VirtualAlloc",
    "VirtualProtectEx",
    "VirtualFree",
    "OpenFileMappingW",
    "MapViewOfFile"
  ],
  "api-ms-win-core-memory-l1-1-1.dll": [
    "MapViewOfFileEx",
    "VirtualProtect",
    "PrefetchVirtualMemory",
    "UnmapViewOfFileEx",
    "ReadProcessMemory",
    "VirtualUnlock",
    "CreateFileMappingW",
    "GetLargePageMinimum",
    "VirtualQuery",
    "VirtualProtectEx",
    "WriteProcessMemory",
    "GetWriteWatch",
    "VirtualFree",
    "CreateMemoryResourceNotification",
    "MapViewOfFile",
    "CreateFileMappingNumaW",
    "MapViewOfFileFromApp",
    "QueryMemoryResourceNotification",
    "SetProcessWorkingSetSizeEx",
    "VirtualLock",
    "UnmapViewOfFile",
    "OpenFileMappingW",
    "CreateFileMappingFromApp",
    "GetSystemFileCacheSize",
    "GetProcessWorkingSetSizeEx",
    "VirtualQueryEx",
    "SetSystemFileCacheSize",
    "FlushViewOfFile",
    "VirtualAllocEx",
    "VirtualFreeEx",
    "VirtualAlloc",
    "ResetWriteWatch"
  ],
  "api-ms-win-core-multipleproviderrouter-l1-1-0.dll": [
    "DoCommandLinePrompt",
    "DoPasswordDialog",
    "DoBroadcastSystemMessage",
    "ShowReconnectDialogUI",
    "DoProfileErrorDialog",
    "ShowReconnectDialog",
    "ShowReconnectDialogEnd",
    "WNetDisconnectDialog1W",
    "WNetConnectionDialog",
    "WNetDisconnectDialog",
    "WNetConnectionDialog1W"
  ],
  "api-ms-win-core-namedpipe-l1-1-0.dll": [
    "CreateNamedPipeW",
    "WaitNamedPipeW",
    "DisconnectNamedPipe",
    "ConnectNamedPipe",
    "SetNamedPipeHandleState",
    "ImpersonateNamedPipeClient",
    "TransactNamedPipe",
    "GetNamedPipeAttribute",
    "CreatePipe",
    "GetNamedPipeClientComputerNameW",
    "PeekNamedPipe"
  ],
  "api-ms-win-core-namedpipe-l1-2-0.dll": [
    "CreateNamedPipeW",
    "WaitNamedPipeW",
    "DisconnectNamedPipe",
    "ConnectNamedPipe",
    "SetNamedPipeHandleState",
    "ImpersonateNamedPipeClient",
    "TransactNamedPipe",
    "CreatePipe",
    "GetNamedPipeClientComputerNameW",
    "PeekNamedPipe"
  ],
  "api-ms-win-core-namespace-l1-1-0.dll": [
    "OpenPrivateNamespaceW",
    "CreateBoundaryDescriptorW",
    "ClosePrivateNamespace",
    "AddSIDToBoundaryDescriptor",
    "DeleteBoundaryDescriptor",
    "CreatePrivateNamespaceW"
  ],
  "api-ms-win-core-normalization-l1-1-0.dll": [
    "IdnToNameprepUnicode",
    "GetStringScripts",
    "IsNormalizedString",
    "NormalizeString",
    "VerifyScripts"
  ],
  "api-ms-win-core-path-l1-1-0.dll": [
    "PathAllocCanonicalize",
    "PathCchAddBackslashEx",
    "PathCchStripToRoot",
    "PathAllocCombine",
    "PathCchRemoveBackslashEx",
    "PathCchRenameExtension",
    "PathCchRemoveExtension",
    "PathCchStripPrefix",
    "PathCchAddExtension",
    "PathCchCombineEx",
    "PathCchRemoveFileSpec",
    "PathCchCanonicalizeEx",
    "PathCchAddBackslash",
    "PathCchRemoveBackslash",
    "PathCchCombine",
    "PathCchAppend",
    "PathCchIsRoot",
    "PathCchFindExtension",
    "PathCchAppendEx",
    "PathCchCanonicalize",
    "PathIsUNCEx",
    "PathCchSkipRoot"
  ],
  "api-ms-win-core-privateprofile-l1-1-0.dll": [
    "GetProfileIntW",
    "GetPrivateProfileStringW",
    "GetProfileSectionW",
    "GetPrivateProfileStringA",
    "GetPrivateProfileSectionW",
    "GetProfileStringA",
    "WritePrivateProfileStringA",
    "WritePrivateProfileSectionA",
    "GetProfileIntA",
    "GetProfileSectionA",
    "GetPrivateProfileIntA",
    "GetPrivateProfileIntW",
    "WritePrivateProfileStringW",
    "GetProfileStringW"
  ],
  "api-ms-win-core-processenvironment-l1-1-0.dll": [
    "FreeEnvironmentStringsA",
    "SetCurrentDirectoryA",
    "SetEnvironmentVariableA",
    "SetEnvironmentStringsW",
    "GetCommandLineA",
    "GetCurrentDirectoryA",
    "SetStdHandleEx",
    "GetCurrentDirectoryW",
    "SetStdHandle",
    "GetEnvironmentStringsW",
    "GetStdHandle",
    "GetEnvironmentStrings",
    "ExpandEnvironmentStringsA",
    "GetEnvironmentVariableA",
    "SearchPathW",
    "SetCurrentDirectoryW",
    "GetCommandLineW",
    "ExpandEnvironmentStringsW",
    "FreeEnvironmentStringsW",
    "SetEnvironmentVariableW",
    "GetEnvironmentStringsA",
    "GetEnvironmentVariableW"
  ],
  "api-ms-win-core-processenvironment-l1-2-0.dll": [
    "FreeEnvironmentStringsA",
    "SetCurrentDirectoryA",
    "SetEnvironmentVariableA",
    "SetEnvironmentStringsW",
    "GetCommandLineA",
    "GetCurrentDirectoryA",
    "SetStdHandleEx",
    "GetCurrentDirectoryW",
    "SetStdHandle",
    "GetEnvironmentStringsW",
    "SearchPathA",
    "GetStdHandle",
    "GetEnvironmentStrings",
    "NeedCurrentDirectoryForExePathW",
    "ExpandEnvironmentStringsA",
    "GetEnvironmentVariableA",
    "SearchPathW",
    "SetCurrentDirectoryW",
    "GetCommandLineW",
    "NeedCurrentDirectoryForExePathA",
    "ExpandEnvironmentStringsW",
    "FreeEnvironmentStringsW",
    "SetEnvironmentVariableW",
    "GetEnvironmentVariableW"
  ],
  "api-ms-win-core-processsecurity-l1-1-0.dll": [
    "OpenThreadToken",
    "ImpersonateNamedPipeClient",
    "OpenProcessToken",
    "CreateProcessAsUserW",
    "SetThreadToken"
  ],
  "api-ms-win-core-processthreads-l1-1-0.dll": [
    "InitializeProcThreadAttributeList",
    "GetExitCodeThread",
    "GetProcessTimes",
    "GetPriorityClass",
    "GetThreadId",
    "GetProcessId",
    "TlsFree",
    "SetThreadStackGuarantee",
    "GetThreadPriority",
    "SetProcessAffinityUpdateMode",
    "GetStartupInfoW",
    "SetThreadPriority",
    "GetCurrentProcess",
    "SetThreadToken",
    "UpdateProcThreadAttribute",
    "TlsSetValue",
    "CreateRemoteThreadEx",
    "GetCurrentProcessId",
    "ProcessIdToSessionId",
    "SetProcessShutdownParameters",
    "TlsAlloc",
    "FlushProcessWriteBuffers",
    "GetThreadPriorityBoost",
    "GetCurrentThread",
    "DeleteProcThreadAttributeList",
    "GetExitCodeProcess",
    "SetPriorityClass",
    "SuspendThread",
    "ResumeThread",
    "OpenProcessToken",
    "OpenThread",
    "QueryProcessAffinityUpdateMode",
    "CreateThread",
    "ExitThread",
    "GetProcessIdOfThread",
    "SwitchToThread",
    "TerminateProcess",
    "ExitProcess",
    "TerminateThread",
    "GetProcessVersion",
    "GetCurrentThreadId",
    "TlsGetValue",
    "QueueUserAPC",
    "CreateRemoteThread",
    "CreateProcessA",
    "OpenThreadToken",
    "SetThreadPriorityBoost",
    "CreateProcessW",
    "CreateProcessAsUserW"
  ],
  "api-ms-win-core-processthreads-l1-1-1.dll": [
    "InitializeProcThreadAttributeList",
    "GetExitCodeThread",
    "GetProcessHandleCount",
    "GetProcessTimes",
    "OpenProcess",
    "GetPriorityClass",
    "GetThreadId",
    "GetProcessId",
    "TlsFree",
    "SetThreadStackGuarantee",
    "GetThreadPriority",
    "SetProcessAffinityUpdateMode",
    "GetStartupInfoW",
    "SetThreadPriority",
    "GetCurrentProcess",
    "GetCurrentProcessorNumberEx",
    "SetThreadToken",
    "TlsSetValue",
    "UpdateProcThreadAttribute",
    "CreateRemoteThreadEx",
    "GetCurrentProcessId",
    "ProcessIdToSessionId",
    "SetProcessShutdownParameters",
    "TlsAlloc",
    "FlushProcessWriteBuffers",
    "GetCurrentThreadStackLimits",
    "GetThreadPriorityBoost",
    "GetCurrentThread",
    "DeleteProcThreadAttributeList",
    "GetExitCodeProcess",
    "GetProcessMitigationPolicy",
    "SetPriorityClass",
    "SuspendThread",
    "FlushInstructionCache",
    "ResumeThread",
    "OpenProcessToken",
    "OpenThread",
    "QueryProcessAffinityUpdateMode",
    "CreateThread",
    "ExitThread",
    "GetProcessIdOfThread",
    "SwitchToThread",
    "SetThreadContext",
    "TerminateProcess",
    "ExitProcess",
    "IsProcessorFeaturePresent",
    "TerminateThread",
    "GetProcessVersion",
    "SetProcessMitigationPolicy",
    "GetThreadContext",
    "GetCurrentThreadId",
    "CreateProcessW",
    "TlsGetValue",
    "GetThreadTimes",
    "GetCurrentProcessorNumber",
    "QueueUserAPC",
    "CreateRemoteThread",
    "CreateProcessA",
    "OpenThreadToken",
    "SetThreadPriorityBoost",
    "GetThreadIdealProcessorEx",
    "SetThreadIdealProcessorEx",
    "CreateProcessAsUserW"
  ],
  "api-ms-win-core-processtopology-l1-1-0.dll": [
    "GetProcessGroupAffinity",
    "GetThreadGroupAffinity",
    "SetProcessGroupAffinity",
    "SetThreadGroupAffinity"
  ],
  "api-ms-win-core-processtopology-obsolete-l1-1-0.dll": [
    "GetActiveProcessorCount",
    "SetProcessAffinityMask",
    "GetProcessAffinityMask",
    "GetProcessIoCounters",
    "SetThreadAffinityMask"
  ],
  "api-ms-win-core-profile-l1-1-0.dll": [
    "QueryPerformanceCounter",
    "QueryPerformanceFrequency"
  ],
  "api-ms-win-core-psapi-ansi-l1-1-0.dll": [
    "QueryFullProcessImageNameA",
    "K32GetDeviceDriverFileNameA",
    "K32GetDeviceDriverBaseNameA",
    "K32GetMappedFileNameA",
    "K32GetProcessImageFileNameA",
    "K32EnumPageFilesA"
  ],
  "api-ms-win-core-psapi-l1-1-0.dll": [
    "K32GetProcessMemoryInfo",
    "QueryFullProcessImageNameW",
    "K32GetProcessImageFileNameW",
    "K32EnumProcesses",
    "K32EmptyWorkingSet",
    "K32GetPerformanceInfo",
    "K32GetWsChangesEx",
    "K32InitializeProcessForWsWatch",
    "K32QueryWorkingSetEx",
    "K32EnumDeviceDrivers",
    "K32EnumPageFilesW",
    "K32GetWsChanges",
    "K32QueryWorkingSet",
    "K32GetDeviceDriverFileNameW",
    "K32GetMappedFileNameW",
    "K32GetDeviceDriverBaseNameW"
  ],
  "api-ms-win-core-psapi-obsolete-l1-1-0.dll": [
    "K32GetModuleBaseNameW",
    "K32GetModuleInformation",
    "K32EnumProcessModules",
    "K32GetModuleFileNameExW",
    "K32EnumProcessModulesEx",
    "K32GetModuleBaseNameA",
    "K32GetModuleFileNameExA"
  ],
  "api-ms-win-core-psm-app-l1-1-0.dll": [
    "PsmQueryCurrentAppState",
    "PsmBlockAppStateChangeCompletion",
    "PsmRegisterAppStateChangeNotification",
    "PsmUnregisterAppStateChangeNotification",
    "PsmUnblockAppStateChangeCompletion",
    "PsmWaitForAppResume",
    "PsmShutdownApplication"
  ],
  "api-ms-win-core-psm-info-l1-1-0.dll": [
    "PsmQueryQuotaInformation",
    "PsmQueryApplicationPerformanceInformation"
  ],
  "api-ms-win-core-psm-plm-l1-1-0.dll": [
    "PsmSetApplicationState",
    "PsmIsProcessInApplication",
    "PsmQueryProcessList",
    "PsmQueryApplicationInformation",
    "PsmRegisterApplicationNotification",
    "PsmQueryApplicationList"
  ],
  "api-ms-win-core-realtime-l1-1-0.dll": [
    "QueryIdleProcessorCycleTimeEx",
    "QueryThreadCycleTime",
    "QueryProcessCycleTime",
    "QueryUnbiasedInterruptTime",
    "QueryIdleProcessorCycleTime"
  ],
  "api-ms-win-core-registry-l1-1-0.dll": [
    "RegQueryInfoKeyW",
    "RegOpenKeyExA",
    "RegLoadAppKeyW",
    "RegRestoreKeyA",
    "RegOpenUserClassesRoot",
    "RegGetValueA",
    "RegQueryInfoKeyA",
    "RegFlushKey",
    "RegEnumKeyExW",
    "RegQueryValueExW",
    "RegSaveKeyExW",
    "RegUnLoadKeyW",
    "RegDeleteKeyExW",
    "RegDeleteTreeW",
    "RegGetValueW",
    "RegCloseKey",
    "RegSetValueExW",
    "RegLoadMUIStringA",
    "RegDeleteKeyExA",
    "RegNotifyChangeKeyValue",
    "RegEnumValueA",
    "RegCopyTreeW",
    "RegRestoreKeyW",
    "RegDeleteValueA",
    "RegSetValueExA",
    "RegLoadAppKeyA",
    "RegCreateKeyExW",
    "RegLoadKeyA",
    "RegDeleteValueW",
    "RegDeleteTreeA",
    "RegQueryValueExA",
    "RegDisablePredefinedCacheEx",
    "RegEnumKeyExA",
    "RegGetKeySecurity",
    "RegOpenKeyExW",
    "RegEnumValueW",
    "RegLoadMUIStringW",
    "RegSaveKeyExA",
    "RegOpenCurrentUser",
    "RegUnLoadKeyA",
    "RegCreateKeyExA",
    "RegLoadKeyW",
    "RegSetKeySecurity"
  ],
  "api-ms-win-core-registry-l2-1-0.dll": [
    "RegSetValueW",
    "RegSetKeyValueA",
    "RegQueryValueA",
    "RegDeleteKeyValueA",
    "RegSetValueA",
    "RegConnectRegistryA",
    "RegDeleteKeyValueW",
    "RegOpenKeyTransactedA",
    "RegConnectRegistryW",
    "RegDisablePredefinedCache",
    "RegQueryMultipleValuesA",
    "RegSetKeyValueW",
    "RegEnumKeyA",
    "RegReplaceKeyA",
    "RegDeleteKeyTransactedW",
    "RegCreateKeyTransactedA",
    "RegDeleteKeyW",
    "RegQueryValueW",
    "RegOverridePredefKey",
    "RegCreateKeyW",
    "RegCreateKeyA",
    "RegEnumKeyW",
    "RegSaveKeyA",
    "RegCreateKeyTransactedW",
    "RegCopyTreeA",
    "RegDeleteKeyTransactedA",
    "RegDeleteKeyA",
    "RegOpenKeyW",
    "RegOpenKeyA",
    "RegOpenKeyTransactedW",
    "RegReplaceKeyW",
    "RegSaveKeyW",
    "RegQueryMultipleValuesW"
  ],
  "api-ms-win-core-registry-private-l1-1-0.dll": [
    "RegConnectRegistryExW",
    "RegConnectRegistryExA",
    "RegRenameKey"
  ],
  "api-ms-win-core-registryuserspecific-l1-1-0.dll": [
    "SHRegWriteUSValueW",
    "SHRegEnumUSKeyW",
    "SHRegGetUSValueW",
    "SHRegDeleteEmptyUSKeyA",
    "SHRegQueryUSValueA",
    "SHRegGetUSValueA",
    "SHRegDeleteUSValueW",
    "SHRegWriteUSValueA",
    "SHRegSetUSValueW",
    "SHRegDeleteUSValueA",
    "SHRegCreateUSKeyA",
    "SHRegQueryInfoUSKeyW",
    "SHRegOpenUSKeyA",
    "SHRegDeleteEmptyUSKeyW",
    "SHRegQueryUSValueW",
    "SHRegQueryInfoUSKeyA",
    "SHRegSetUSValueA",
    "SHRegGetBoolUSValueW",
    "SHRegEnumUSValueW",
    "SHRegCloseUSKey",
    "SHRegOpenUSKeyW",
    "SHRegEnumUSKeyA",
    "SHRegEnumUSValueA",
    "SHRegGetBoolUSValueA",
    "SHRegCreateUSKeyW"
  ],
  "api-ms-win-core-rtlsupport-l1-1-0.dll": [
    "RtlCaptureStackBackTrace",
    "RtlUnwind",
    "RtlFillMemory",
    "RtlCaptureContext"
  ],
  "api-ms-win-core-rtlsupport-l1-2-0.dll": [
    "RtlUnwind",
    "RtlCompareMemory",
    "RtlCaptureContext",
    "RtlCaptureStackBackTrace",
    "RtlPcToFileHeader",
    "RtlRaiseException"
  ],
  "api-ms-win-core-shlwapi-legacy-l1-1-0.dll": [
    "PathGetArgsA",
    "PathStripPathA",
    "PathQuoteSpacesW",
    "IsCharDigitW",
    "PathMatchSpecW",
    "SHExpandEnvironmentStringsA",
    "PathRemoveFileSpecW",
    "PathGetCharTypeW",
    "PathFindExtensionW",
    "PathAddExtensionW",
    "IsCharXDigitW",
    "PathCommonPrefixA",
    "PathIsFileSpecW",
    "PathRelativePathToA",
    "PathRemoveBlanksA",
    "PathUnExpandEnvStringsA",
    "PathFileExistsA",
    "PathFindNextComponentA",
    "PathFindFileNameW",
    "PathRemoveBlanksW",
    "PathAppendA",
    "IsCharBlankW",
    "PathRemoveFileSpecA",
    "PathCanonicalizeW",
    "PathIsUNCServerShareW",
    "PathAddBackslashW",
    "PathStripPathW",
    "PathGetDriveNumberW",
    "PathFindExtensionA",
    "PathStripToRootA",
    "SHTruncateString",
    "PathQuoteSpacesA",
    "PathParseIconLocationA",
    "PathCommonPrefixW",
    "PathIsPrefixA",
    "IsCharPunctW",
    "PathAppendW",
    "PathSearchAndQualifyW",
    "PathUnquoteSpacesA",
    "PathUnExpandEnvStringsW",
    "PathIsRelativeA",
    "PathIsRootW",
    "PathGetArgsW",
    "PathSearchAndQualifyA",
    "PathRenameExtensionW",
    "PathAddBackslashA",
    "PathIsFileSpecA",
    "PathIsSameRootA",
    "PathIsUNCServerW",
    "PathIsLFNFileSpecW",
    "PathFileExistsW",
    "PathGetCharTypeA",
    "PathCombineA",
    "IsCharSpaceA",
    "PathIsUNCServerShareA",
    "PathIsRootA",
    "PathMatchSpecExA",
    "PathCombineW",
    "IsCharCntrlW",
    "PathSkipRootA",
    "PathRemoveBackslashA",
    "PathRemoveExtensionW",
    "PathIsLFNFileSpecA",
    "PathParseIconLocationW",
    "PathRenameExtensionA",
    "PathIsValidCharA",
    "PathRemoveExtensionA",
    "PathIsSameRootW",
    "IsCharSpaceW",
    "PathMatchSpecExW",
    "PathGetDriveNumberA",
    "SHExpandEnvironmentStringsW",
    "PathFindNextComponentW",
    "PathIsPrefixW",
    "PathIsRelativeW",
    "PathRelativePathToW",
    "PathCanonicalizeA",
    "PathSkipRootW",
    "PathIsUNCA",
    "PathAddExtensionA",
    "PathStripToRootW",
    "PathIsValidCharW",
    "PathUnquoteSpacesW",
    "PathMatchSpecA",
    "PathFindFileNameA",
    "PathIsUNCServerA",
    "PathIsUNCW",
    "PathRemoveBackslashW"
  ],
  "api-ms-win-core-shlwapi-obsolete-l1-1-0.dll": [
    "StrToIntA",
    "QISearch",
    "StrCatChainW",
    "StrCmpW",
    "SHLoadIndirectString",
    "StrPBrkA",
    "StrStrIW",
    "StrStrW",
    "StrCatBuffA",
    "StrCmpNICW",
    "StrChrW",
    "StrCpyNXW",
    "StrCpyNXA",
    "StrCmpICW",
    "StrDupA",
    "StrRChrA",
    "StrSpnA",
    "StrToIntExA",
    "StrRChrIW",
    "StrCSpnIA",
    "StrRStrIW",
    "StrStrIA",
    "StrToIntExW",
    "StrDupW",
    "StrCmpICA",
    "StrCSpnIW",
    "StrCmpLogicalW",
    "StrCSpnW",
    "StrRChrIA",
    "StrStrA",
    "StrCmpNCW",
    "StrCmpCW",
    "StrCmpIW",
    "StrStrNW",
    "StrChrIW",
    "StrCmpNCA",
    "StrToIntW",
    "StrChrNIW",
    "StrCpyNW",
    "StrChrNW",
    "StrTrimW",
    "StrChrA",
    "StrSpnW",
    "StrCmpNW",
    "StrChrIA",
    "StrCmpNA",
    "StrTrimA",
    "StrRStrIA",
    "StrCSpnA",
    "StrCmpNIW",
    "StrCatBuffW",
    "StrIsIntlEqualW",
    "StrCmpCA",
    "StrToInt64ExA",
    "StrRChrW",
    "StrToInt64ExW",
    "StrIsIntlEqualA",
    "StrCmpNICA",
    "StrCmpNIA",
    "StrPBrkW",
    "StrStrNIW"
  ],
  "api-ms-win-core-shutdown-l1-1-0.dll": [
    "InitiateSystemShutdownExW",
    "AbortSystemShutdownW"
  ],
  "api-ms-win-core-sidebyside-l1-1-0.dll": [
    "FindActCtxSectionStringW",
    "CreateActCtxW",
    "QueryActCtxW",
    "FindActCtxSectionGuid",
    "GetCurrentActCtx",
    "DeactivateActCtx",
    "ZombifyActCtx",
    "QueryActCtxSettingsW",
    "ActivateActCtx",
    "AddRefActCtx",
    "ReleaseActCtx"
  ],
  "api-ms-win-core-string-l1-1-0.dll": [
    "CompareStringEx",
    "FoldStringW",
    "GetStringTypeExW",
    "WideCharToMultiByte",
    "CompareStringW",
    "GetStringTypeW",
    "CompareStringOrdinal",
    "MultiByteToWideChar"
  ],
  "api-ms-win-core-string-l2-1-0.dll": [
    "IsCharAlphaW",
    "CharPrevW",
    "CharNextW",
    "IsCharUpperW",
    "CharLowerBuffW",
    "CharLowerW",
    "CharUpperW",
    "IsCharLowerW",
    "CharUpperBuffW",
    "IsCharAlphaNumericW"
  ],
  "api-ms-win-core-string-obsolete-l1-1-0.dll": [
    "lstrcmpiA",
    "lstrcpynA",
    "lstrcatW",
    "lstrcmpA",
    "lstrlenW",
    "lstrcmpW",
    "lstrcpyW",
    "lstrlenA",
    "lstrcmpiW",
    "lstrcpynW"
  ],
  "api-ms-win-core-stringansi-l1-1-0.dll": [
    "CharLowerBuffA",
    "CharUpperA",
    "IsCharAlphaNumericA",
    "CharPrevExA",
    "CharLowerA",
    "IsCharAlphaA",
    "CharUpperBuffA",
    "IsCharLowerA",
    "CharNextExA",
    "IsCharUpperA",
    "CharPrevA",
    "CharNextA"
  ],
  "api-ms-win-core-stringloader-l1-1-0.dll": [
    "LoadStringA",
    "LoadStringW"
  ],
  "api-ms-win-core-synch-l1-1-0.dll": [
    "EnterCriticalSection",
    "TryAcquireSRWLockExclusive",
    "OpenProcess",
    "ReleaseSemaphore",
    "OpenEventW",
    "InitializeCriticalSection",
    "SetWaitableTimer",
    "SetEvent",
    "OpenEventA",
    "TryAcquireSRWLockShared",
    "CreateEventW",
    "CreateEventExA",
    "DeleteCriticalSection",
    "CreateSemaphoreExW",
    "LeaveCriticalSection",
    "TryEnterCriticalSection",
    "CreateMutexExW",
    "CreateWaitableTimerExW",
    "CreateMutexA",
    "ResetEvent",
    "AcquireSRWLockExclusive",
    "CreateEventExW",
    "OpenMutexW",
    "ReleaseSRWLockExclusive",
    "InitializeSRWLock",
    "CreateEventA",
    "SetWaitableTimerEx",
    "InitializeCriticalSectionEx",
    "WaitForMultipleObjectsEx",
    "CancelWaitableTimer",
    "OpenSemaphoreW",
    "ReleaseSRWLockShared",
    "OpenWaitableTimerW",
    "ReleaseMutex",
    "AcquireSRWLockShared",
    "InitializeCriticalSectionAndSpinCount",
    "SleepEx",
    "WaitForSingleObjectEx",
    "CreateMutexExA",
    "SetCriticalSectionSpinCount",
    "CreateMutexW",
    "WaitForSingleObject"
  ],
  "api-ms-win-core-synch-l1-2-0.dll": [
    "SleepConditionVariableCS",
    "EnterCriticalSection",
    "TryAcquireSRWLockExclusive",
    "InitOnceComplete",
    "ReleaseSemaphore",
    "OpenEventW",
    "InitializeCriticalSection",
    "WaitOnAddress",
    "SetWaitableTimer",
    "SetEvent",
    "OpenEventA",
    "TryAcquireSRWLockShared",
    "CreateEventW",
    "CreateEventExA",
    "DeleteCriticalSection",
    "CreateSemaphoreExW",
    "LeaveCriticalSection",
    "TryEnterCriticalSection",
    "InitOnceBeginInitialize",
    "CreateMutexExW",
    "CreateWaitableTimerExW",
    "CreateMutexA",
    "EnterSynchronizationBarrier",
    "ResetEvent",
    "AcquireSRWLockExclusive",
    "Sleep",
    "SignalObjectAndWait",
    "CreateEventExW",
    "SleepConditionVariableSRW",
    "OpenMutexW",
    "ReleaseSRWLockExclusive",
    "InitializeSRWLock",
    "CreateEventA",
    "SetWaitableTimerEx",
    "DeleteSynchronizationBarrier",
    "InitializeCriticalSectionEx",
    "CancelWaitableTimer",
    "WaitForMultipleObjectsEx",
    "WakeAllConditionVariable",
    "WakeByAddressSingle",
    "InitOnceInitialize",
    "OpenSemaphoreW",
    "ReleaseSRWLockShared",
    "WakeByAddressAll",
    "OpenWaitableTimerW",
    "ReleaseMutex",
    "InitializeSynchronizationBarrier",
    "InitializeConditionVariable",
    "AcquireSRWLockShared",
    "InitializeCriticalSectionAndSpinCount",
    "SleepEx",
    "WaitForSingleObjectEx",
    "WakeConditionVariable",
    "InitOnceExecuteOnce",
    "CreateMutexExA",
    "SetCriticalSectionSpinCount",
    "CreateMutexW",
    "WaitForSingleObject"
  ],
  "api-ms-win-core-sysinfo-l1-1-0.dll": [
    "GetWindowsDirectoryW",
    "GetSystemDirectoryA",
    "GetWindowsDirectoryA",
    "GetTickCount",
    "GetLogicalProcessorInformationEx",
    "GetDynamicTimeZoneInformation",
    "GetLogicalProcessorInformation",
    "GetTickCount64",
    "SetLocalTime",
    "GetSystemTimeAdjustment",
    "GetVersionExA",
    "GetSystemDirectoryW",
    "GetComputerNameExA",
    "GetSystemWindowsDirectoryW",
    "GetVersionExW",
    "GetVersion",
    "GetLocalTime",
    "GetComputerNameExW",
    "GetSystemWindowsDirectoryA",
    "TzSpecificLocalTimeToSystemTime",
    "GetSystemTimeAsFileTime",
    "GlobalMemoryStatusEx",
    "GetTimeZoneInformationForYear",
    "GetTimeZoneInformation",
    "SystemTimeToTzSpecificLocalTime",
    "SystemTimeToFileTime",
    "GetSystemInfo",
    "GetSystemTime"
  ],
  "api-ms-win-core-sysinfo-l1-2-0.dll": [
    "GetProductInfo",
    "GetWindowsDirectoryW",
    "GetSystemDirectoryA",
    "GetWindowsDirectoryA",
    "EnumSystemFirmwareTables",
    "SetComputerNameExW",
    "GetTickCount",
    "SetSystemTime",
    "GetLogicalProcessorInformationEx",
    "GetSystemTime",
    "GetLogicalProcessorInformation",
    "GetTickCount64",
    "SetLocalTime",
    "GetSystemTimeAdjustment",
    "GetVersionExA",
    "GetSystemDirectoryW",
    "GetComputerNameExA",
    "GetSystemWindowsDirectoryW",
    "GetVersionExW",
    "GetOsSafeBootMode",
    "GetVersion",
    "GetLocalTime",
    "GetComputerNameExW",
    "GetSystemWindowsDirectoryA",
    "GetSystemTimePreciseAsFileTime",
    "GetSystemTimeAsFileTime",
    "GlobalMemoryStatusEx",
    "GetNativeSystemInfo",
    "GetSystemInfo",
    "VerSetConditionMask",
    "GetSystemFirmwareTable"
  ],
  "api-ms-win-core-systemtopology-l1-1-0.dll": [
    "GetNumaHighestNodeNumber",
    "GetNumaNodeProcessorMaskEx"
  ],
  "api-ms-win-core-threadpool-l1-1-0.dll": [
    "SetThreadpoolWait",
    "RegisterWaitForSingleObjectEx",
    "CreateThreadpoolWork",
    "CloseThreadpoolCleanupGroup",
    "ReleaseSemaphoreWhenCallbackReturns",
    "SetThreadpoolThreadMaximum",
    "CreateThreadpool",
    "CloseThreadpoolIo",
    "CreateThreadpoolIo",
    "CancelThreadpoolIo",
    "DeleteTimerQueueTimer",
    "IsThreadpoolTimerSet",
    "CreateTimerQueue",
    "DisassociateCurrentThreadFromCallback",
    "SubmitThreadpoolWork",
    "ReleaseMutexWhenCallbackReturns",
    "CloseThreadpoolCleanupGroupMembers",
    "SetThreadpoolTimer",
    "CloseThreadpoolTimer",
    "CreateThreadpoolTimer",
    "WaitForThreadpoolWaitCallbacks",
    "CloseThreadpool",
    "WaitForThreadpoolIoCallbacks",
    "FreeLibraryWhenCallbackReturns",
    "DeleteTimerQueueEx",
    "CallbackMayRunLong",
    "SetThreadpoolStackInformation",
    "CreateTimerQueueTimer",
    "WaitForThreadpoolWorkCallbacks",
    "CloseThreadpoolWork",
    "SetEventWhenCallbackReturns",
    "CreateThreadpoolWait",
    "StartThreadpoolIo",
    "CloseThreadpoolWait",
    "QueryThreadpoolStackInformation",
    "CreateThreadpoolCleanupGroup",
    "ChangeTimerQueueTimer",
    "LeaveCriticalSectionWhenCallbackReturns",
    "SetThreadpoolThreadMinimum",
    "UnregisterWaitEx",
    "WaitForThreadpoolTimerCallbacks",
    "TrySubmitThreadpoolCallback"
  ],
  "api-ms-win-core-threadpool-l1-2-0.dll": [
    "SetThreadpoolWait",
    "CreateThreadpoolWork",
    "CloseThreadpoolCleanupGroup",
    "ReleaseSemaphoreWhenCallbackReturns",
    "SetThreadpoolThreadMaximum",
    "CreateThreadpool",
    "CloseThreadpoolIo",
    "CreateThreadpoolIo",
    "CancelThreadpoolIo",
    "IsThreadpoolTimerSet",
    "DisassociateCurrentThreadFromCallback",
    "SetThreadpoolWaitEx",
    "SubmitThreadpoolWork",
    "ReleaseMutexWhenCallbackReturns",
    "CloseThreadpoolCleanupGroupMembers",
    "SetThreadpoolTimer",
    "CloseThreadpoolTimer",
    "CreateThreadpoolTimer",
    "WaitForThreadpoolWaitCallbacks",
    "CloseThreadpool",
    "WaitForThreadpoolIoCallbacks",
    "FreeLibraryWhenCallbackReturns",
    "CallbackMayRunLong",
    "SetThreadpoolStackInformation",
    "WaitForThreadpoolWorkCallbacks",
    "CloseThreadpoolWork",
    "SetEventWhenCallbackReturns",
    "CreateThreadpoolWait",
    "StartThreadpoolIo",
    "CloseThreadpoolWait",
    "QueryThreadpoolStackInformation",
    "CreateThreadpoolCleanupGroup",
    "SetThreadpoolTimerEx",
    "LeaveCriticalSectionWhenCallbackReturns",
    "SetThreadpoolThreadMinimum",
    "WaitForThreadpoolTimerCallbacks",
    "TrySubmitThreadpoolCallback"
  ],
  "api-ms-win-core-threadpool-legacy-l1-1-0.dll": [
    "DeleteTimerQueueEx",
    "QueueUserWorkItem",
    "CreateTimerQueueTimer",
    "ChangeTimerQueueTimer",
    "DeleteTimerQueueTimer",
    "CreateTimerQueue",
    "UnregisterWaitEx"
  ],
  "api-ms-win-core-threadpool-private-l1-1-0.dll": [
    "RegisterWaitForSingleObjectEx"
  ],
  "api-ms-win-core-timezone-l1-1-0.dll": [
    "GetDynamicTimeZoneInformation",
    "GetTimeZoneInformationForYear",
    "SetTimeZoneInformation",
    "FileTimeToSystemTime",
    "GetTimeZoneInformation",
    "SystemTimeToTzSpecificLocalTime",
    "SystemTimeToFileTime",
    "TzSpecificLocalTimeToSystemTime",
    "EnumDynamicTimeZoneInformation",
    "SystemTimeToTzSpecificLocalTimeEx",
    "GetDynamicTimeZoneInformationEffectiveYears",
    "SetDynamicTimeZoneInformation",
    "TzSpecificLocalTimeToSystemTimeEx"
  ],
  "api-ms-win-core-timezone-private-l1-1-0.dll": [
    "SetClientDynamicTimeZoneInformation",
    "IsTimeZoneRedirectionEnabled",
    "SetClientTimeZoneInformation"
  ],
  "api-ms-win-core-toolhelp-l1-1-0.dll": [
    "Module32NextW",
    "Thread32First",
    "Process32FirstW",
    "Thread32Next",
    "Module32FirstW",
    "Process32NextW",
    "CreateToolhelp32Snapshot"
  ],
  "api-ms-win-core-url-l1-1-0.dll": [
    "UrlApplySchemeW",
    "UrlHashW",
    "UrlCanonicalizeW",
    "GetAcceptLanguagesA",
    "UrlHashA",
    "HashData",
    "UrlCreateFromPathA",
    "UrlCanonicalizeA",
    "PathIsURLW",
    "PathCreateFromUrlAlloc",
    "IsInternetESCEnabled",
    "UrlCombineW",
    "UrlCombineA",
    "PathCreateFromUrlW",
    "UrlApplySchemeA",
    "UrlIsNoHistoryW",
    "UrlEscapeA",
    "ParseURLW",
    "UrlCompareA",
    "PathIsURLA",
    "UrlIsA",
    "UrlEscapeW",
    "UrlGetPartW",
    "UrlCreateFromPathW",
    "ParseURLA",
    "UrlFixupW",
    "UrlIsNoHistoryA",
    "UrlGetLocationA",
    "UrlGetPartA",
    "UrlUnescapeA",
    "PathCreateFromUrlA",
    "GetAcceptLanguagesW",
    "UrlCompareW",
    "UrlIsOpaqueA",
    "UrlUnescapeW",
    "UrlIsW",
    "UrlGetLocationW",
    "UrlIsOpaqueW"
  ],
  "api-ms-win-core-util-l1-1-0.dll": [
    "DecodePointer",
    "DecodeSystemPointer",
    "EncodePointer",
    "Beep",
    "EncodeSystemPointer"
  ],
  "api-ms-win-core-version-l1-1-0.dll": [
    "VerQueryValueW",
    "VerFindFileW",
    "GetFileVersionInfoExW",
    "GetFileVersionInfoSizeExW"
  ],
  "api-ms-win-core-version-private-l1-1-0.dll": [
    "GetFileVersionInfoByHandle"
  ],
  "api-ms-win-core-versionansi-l1-1-0.dll": [
    "GetFileVersionInfoSizeExA",
    "VerFindFileA",
    "VerQueryValueA",
    "GetFileVersionInfoExA"
  ],
  "api-ms-win-core-windowserrorreporting-l1-1-0.dll": [
    "WerRegisterMemoryBlock",
    "WerUnregisterFile",
    "WerpNotifyUseStringResource",
    "WerUnregisterMemoryBlock",
    "WerpNotifyLoadStringResource",
    "WerRegisterRuntimeExceptionModule",
    "WerUnregisterRuntimeExceptionModule",
    "GetApplicationRecoveryCallback",
    "WerRegisterFile",
    "GetApplicationRestartSettings"
  ],
  "api-ms-win-core-winrt-error-l1-1-0.dll": [
    "GetRestrictedErrorInfo",
    "RoFailFastWithErrorContext",
    "RoOriginateError",
    "RoResolveRestrictedErrorInfoReference",
    "RoTransformErrorW",
    "RoTransformError",
    "RoCaptureErrorContext",
    "RoGetErrorReportingFlags",
    "RoOriginateErrorW",
    "SetRestrictedErrorInfo",
    "RoSetErrorReportingFlags"
  ],
  "api-ms-win-core-winrt-errorprivate-l1-1-0.dll": [
    "RoFailFastWithErrorContextInternal",
    "RoReportCapabilityCheckFailure"
  ],
  "api-ms-win-core-winrt-l1-1-0.dll": [
    "RoGetApartmentIdentifier",
    "RoActivateInstance",
    "RoGetActivationFactory",
    "RoRegisterForApartmentShutdown",
    "RoRegisterActivationFactories",
    "RoInitialize",
    "RoRevokeActivationFactories",
    "RoUnregisterForApartmentShutdown",
    "RoUninitialize"
  ],
  "api-ms-win-core-winrt-propertysetprivate-l1-1-0.dll": [
    "RoCreateNonAgilePropertySet"
  ],
  "api-ms-win-core-winrt-registration-l1-1-0.dll": [
    "RoGetActivatableClassRegistration",
    "RoGetServerActivatableClasses"
  ],
  "api-ms-win-core-winrt-robuffer-l1-1-0.dll": [
    "RoGetBufferMarshaler"
  ],
  "api-ms-win-core-winrt-roparameterizediid-l1-1-0.dll": [
    "RoFreeParameterizedTypeExtra",
    "RoGetParameterizedTypeInstanceIID",
    "RoParameterizedTypeExtraGetTypeSignature"
  ],
  "api-ms-win-core-winrt-string-l1-1-0.dll": [
    "HSTRING_UserUnmarshal",
    "WindowsCreateString",
    "WindowsSubstringWithSpecifiedLength",
    "WindowsDuplicateString",
    "WindowsPromoteStringBuffer",
    "WindowsDeleteString",
    "HSTRING_UserSize",
    "WindowsTrimStringStart",
    "WindowsTrimStringEnd",
    "HSTRING_UserMarshal",
    "WindowsInspectString",
    "WindowsGetStringRawBuffer",
    "WindowsCompareStringOrdinal",
    "HSTRING_UserFree",
    "WindowsDeleteStringBuffer",
    "WindowsStringHasEmbeddedNull",
    "WindowsReplaceString",
    "WindowsConcatString",
    "WindowsPreallocateStringBuffer",
    "WindowsGetStringLen",
    "WindowsCreateStringReference",
    "WindowsSubstring",
    "WindowsIsStringEmpty"
  ],
  "api-ms-win-core-wow64-l1-1-0.dll": [
    "Wow64RevertWow64FsRedirection",
    "IsWow64Process",
    "Wow64DisableWow64FsRedirection"
  ],
  "api-ms-win-core-xstate-l1-1-0.dll": [
    "RtlGetEnabledExtendedFeatures",
    "RtlSetExtendedFeaturesMask",
    "RtlGetExtendedContextLength",
    "RtlGetExtendedFeaturesMask",
    "RtlCopyExtendedContext",
    "RtlLocateExtendedFeature",
    "RtlLocateLegacyContext",
    "RtlInitializeExtendedContext"
  ],
  "api-ms-win-core-xstate-l1-1-1.dll": [
    "RtlGetEnabledExtendedFeatures",
    "RtlSetExtendedFeaturesMask",
    "RtlGetExtendedContextLength",
    "RtlGetExtendedFeaturesMask",
    "RtlCopyExtendedContext",
    "RtlLocateExtendedFeature",
    "RtlCopyContext",
    "RtlLocateLegacyContext",
    "RtlInitializeExtendedContext"
  ],
  "api-ms-win-devices-config-l1-1-0.dll": [
    "CM_Get_Class_PropertyW",
    "CM_Register_Notification",
    "CM_Delete_Class_Key",
    "CM_Get_DevNode_Property_Keys",
    "CM_Get_DevNode_Registry_PropertyW",
    "CM_Query_And_Remove_SubTreeW",
    "CM_Get_Parent",
    "CM_Get_Device_ID_List_SizeW",
    "CM_Setup_DevNode",
    "CM_Disable_DevNode",
    "CM_Enable_DevNode",
    "CM_Get_Child",
    "CM_Set_DevNode_PropertyW",
    "CM_Get_Device_Interface_Property_KeysW",
    "CM_Get_Device_Interface_PropertyW",
    "CM_Delete_Device_Interface_KeyW",
    "CM_Delete_DevNode_Key",
    "CM_Get_Depth",
    "CM_Get_Class_Registry_PropertyW",
    "CM_Set_Class_PropertyW",
    "CM_Get_DevNode_PropertyW",
    "CM_Uninstall_DevNode",
    "CM_Get_Device_IDW",
    "CM_Set_Class_Registry_PropertyW",
    "CM_Open_Device_Interface_KeyW",
    "CM_Open_Class_KeyW",
    "CM_Open_DevNode_Key",
    "CM_Get_Device_ID_Size",
    "CM_Get_Device_Interface_List_SizeW",
    "CM_Get_Device_Interface_ListW",
    "CM_Get_DevNode_Status",
    "CM_Get_Class_Property_Keys",
    "CM_Get_Device_ID_ListW",
    "CM_Locate_DevNodeW",
    "CM_Set_Device_Interface_PropertyW",
    "CM_Set_DevNode_Registry_PropertyW",
    "CM_Get_Sibling",
    "CM_Unregister_Notification"
  ],
  "api-ms-win-devices-query-l1-1-0.dll": [
    "DevFindProperty",
    "DevCreateObjectQueryFromIds",
    "DevGetObjects",
    "DevCreateObjectQueryFromId",
    "DevFreeObjectProperties",
    "DevFreeObjects",
    "DevGetObjectProperties",
    "DevCloseObjectQuery",
    "DevSetObjectProperties",
    "DevCreateObjectQuery"
  ],
  "api-ms-win-devices-swdevice-l1-1-0.dll": [
    "SwMemFree",
    "SwDeviceInterfaceRegister",
    "SwDeviceClose",
    "SwDeviceCreate",
    "SwDeviceInterfacePropertySet",
    "SwDevicePropertySet",
    "SwDeviceInterfaceSetState"
  ],
  "api-ms-win-downlevel-advapi32-l1-1-0.dll": [
    "GetSecurityDescriptorSacl",
    "RegLoadAppKeyW",
    "EventEnabled",
    "SetSecurityDescriptorOwner",
    "RegRestoreKeyA",
    "AddAuditAccessAceEx",
    "GetTokenInformation",
    "RegQueryInfoKeyA",
    "AdjustTokenPrivileges",
    "RegSaveKeyExW",
    "RegDeleteTreeW",
    "AccessCheckByTypeAndAuditAlarmW",
    "IsValidSecurityDescriptor",
    "CreateRestrictedToken",
    "RegGetValueW",
    "RegSetValueExW",
    "RegLoadMUIStringA",
    "RegNotifyChangeKeyValue",
    "RegRestoreKeyW",
    "RegLoadAppKeyA",
    "AccessCheckAndAuditAlarmW",
    "GetSecurityDescriptorControl",
    "AdjustTokenGroups",
    "RegLoadKeyA",
    "RegDeleteValueW",
    "GetLengthSid",
    "RegQueryValueExA",
    "GetTraceEnableFlags",
    "AddAccessDeniedAceEx",
    "RegEnumKeyExA",
    "RegLoadMUIStringW",
    "RegOpenCurrentUser",
    "AccessCheckByType",
    "RegSetKeySecurity",
    "CreatePrivateObjectSecurityEx",
    "AddAuditAccessAce",
    "CreateProcessAsUserW",
    "RegQueryInfoKeyW",
    "RegOpenKeyExA",
    "GetTraceEnableLevel",
    "AddAccessDeniedObjectAce",
    "RegisterTraceGuidsW",
    "AddAccessDeniedAce",
    "EventRegister",
    "AddAccessAllowedObjectAce",
    "InitializeSid",
    "InitializeSecurityDescriptor",
    "RegEnumKeyExW",
    "AccessCheckByTypeResultListAndAuditAlarmW",
    "RegQueryValueExW",
    "RegUnLoadKeyW",
    "RegDeleteKeyExW",
    "TraceEvent",
    "GetSecurityDescriptorDacl",
    "RegCopyTreeW",
    "GetFileSecurityW",
    "AddMandatoryAce",
    "EventWriteTransfer",
    "GetTraceLoggerHandle",
    "RegSetValueExA",
    "AccessCheckByTypeResultListAndAuditAlarmByHandleW",
    "SetAclInformation",
    "DuplicateTokenEx",
    "GetSecurityDescriptorRMControl",
    "MakeAbsoluteSD",
    "RegDeleteTreeA",
    "EventActivityIdControl",
    "AddAccessAllowedAceEx",
    "RegDisablePredefinedCacheEx",
    "RegGetKeySecurity",
    "MakeSelfRelativeSD",
    "GetSidSubAuthority",
    "RegUnLoadKeyA",
    "InitializeAcl",
    "EventUnregister",
    "RegLoadKeyW",
    "TraceMessageVa",
    "PrivilegeCheck",
    "ConvertToAutoInheritPrivateObjectSecurity",
    "AllocateLocallyUniqueId",
    "EventProviderEnabled",
    "RegOpenUserClassesRoot",
    "RegGetValueA",
    "IsValidSid",
    "FreeSid",
    "GetKernelObjectSecurity",
    "OpenProcessToken",
    "GetSidIdentifierAuthority",
    "DestroyPrivateObjectSecurity",
    "GetAclInformation",
    "GetSidLengthRequired",
    "EventWriteString",
    "QuerySecurityAccessMask",
    "RevertToSelf",
    "CreateWellKnownSid",
    "AccessCheckByTypeResultList",
    "CreatePrivateObjectSecurityWithMultipleInheritance",
    "AccessCheck",
    "SetSecurityDescriptorControl",
    "AddAce",
    "OpenThreadToken",
    "EqualPrefixSid",
    "SetSecurityDescriptorGroup",
    "AllocateAndInitializeSid",
    "DuplicateToken",
    "GetPrivateObjectSecurity",
    "AreAnyAccessesGranted",
    "EqualDomainSid",
    "PrivilegedServiceAuditAlarmW",
    "SetTokenInformation",
    "SetKernelObjectSecurity",
    "UnregisterTraceGuids",
    "SetFileSecurityW",
    "AddAccessAllowedAce",
    "TraceMessage",
    "RegFlushKey",
    "AddAuditAccessObjectAce",
    "IsValidAcl",
    "SetSecurityAccessMask",
    "GetSecurityDescriptorLength",
    "RegCloseKey",
    "DeleteAce",
    "RegDeleteKeyExA",
    "RegEnumValueA",
    "AreAllAccessesGranted",
    "CreatePrivateObjectSecurity",
    "GetSecurityDescriptorOwner",
    "IsTokenRestricted",
    "GetAce",
    "RegDeleteValueA",
    "EqualSid",
    "RegCreateKeyExW",
    "GetSecurityDescriptorGroup",
    "EventWrite",
    "FindFirstFreeAce",
    "RegOpenKeyExW",
    "RegSaveKeyExA",
    "RegEnumValueW",
    "SetSecurityDescriptorRMControl",
    "RegCreateKeyExA",
    "SetSecurityDescriptorDacl",
    "SetSecurityDescriptorSacl",
    "CheckTokenMembership",
    "GetSidSubAuthorityCount",
    "CopySid"
  ],
  "api-ms-win-downlevel-advapi32-l2-1-0.dll": [
    "ConvertStringSidToSidW",
    "QueryServiceConfigW",
    "ConvertStringSecurityDescriptorToSecurityDescriptorW",
    "CredDeleteW",
    "CredReadW",
    "OpenServiceW",
    "CredEnumerateW",
    "CredReadDomainCredentialsW",
    "CredFree",
    "ConvertSidToStringSidW",
    "CredWriteW",
    "CredWriteDomainCredentialsW",
    "OpenSCManagerW",
    "CloseServiceHandle"
  ],
  "api-ms-win-downlevel-normaliz-l1-1-0.dll": [
    "IdnToAscii",
    "IdnToUnicode"
  ],
  "api-ms-win-downlevel-ole32-l1-1-0.dll": [
    "CoRevokeClassObject",
    "CoFreeUnusedLibraries",
    "CoGetClassObject",
    "CoFreeUnusedLibrariesEx",
    "GetHGlobalFromStream",
    "CoDisconnectObject",
    "CoGetMalloc",
    "CoCreateGuid",
    "CoReleaseMarshalData",
    "IIDFromString",
    "CoCopyProxy",
    "PropVariantCopy",
    "CoTaskMemFree",
    "CLSIDFromProgID",
    "CoInitializeEx",
    "CoSetProxyBlanket",
    "CreateStreamOnHGlobal",
    "CoTaskMemAlloc",
    "PropVariantClear",
    "CoCreateFreeThreadedMarshaler",
    "CoRevertToSelf",
    "CoInitializeSecurity",
    "CLSIDFromString",
    "CoMarshalInterThreadInterfaceInStream",
    "CoTaskMemRealloc",
    "CoCreateInstanceEx",
    "CoUnmarshalInterface",
    "CoRegisterInitializeSpy",
    "StringFromCLSID",
    "CoRegisterClassObject",
    "StringFromGUID2",
    "CoGetApartmentType",
    "CoUninitialize",
    "CoWaitForMultipleHandles",
    "CoGetStdMarshalEx",
    "CoImpersonateClient",
    "CoCreateInstance",
    "CoGetCurrentLogicalThreadId",
    "CoGetMarshalSizeMax",
    "CoGetInterfaceAndReleaseStream",
    "CoGetTreatAsClass",
    "CoRegisterMessageFilter",
    "ProgIDFromCLSID",
    "StringFromIID",
    "CoGetObjectContext",
    "CoRevokeInitializeSpy",
    "CoMarshalInterface",
    "FreePropVariantArray"
  ],
  "api-ms-win-downlevel-shell32-l1-1-0.dll": [
    "SetCurrentProcessExplicitAppUserModelID",
    "CommandLineToArgvW",
    "GetCurrentProcessExplicitAppUserModelID"
  ],
  "api-ms-win-downlevel-shlwapi-l1-1-0.dll": [
    "PathGetArgsA",
    "UrlApplySchemeW",
    "QISearch",
    "StrCmpW",
    "SHLoadIndirectString",
    "HashData",
    "PathStripPathA",
    "StrChrW",
    "UrlCombineW",
    "UrlCombineA",
    "StrStrIA",
    "PathRemoveFileSpecW",
    "PathFindExtensionW",
    "PathAddExtensionW",
    "PathCommonPrefixA",
    "PathIsFileSpecW",
    "UrlGetPartW",
    "UrlCreateFromPathW",
    "PathRelativePathToA",
    "SHRegOpenUSKeyA",
    "StrCpyNW",
    "UrlUnescapeA",
    "PathRemoveBlanksA",
    "PathFileExistsA",
    "StrCmpNIW",
    "SHRegGetBoolUSValueW",
    "PathFindNextComponentA",
    "PathFindFileNameW",
    "PathRemoveBlanksW",
    "PathAppendA",
    "StrToInt64ExA",
    "StrCmpNICA",
    "PathRemoveFileSpecA",
    "PathCanonicalizeW",
    "PathIsUNCServerShareW",
    "SHRegGetBoolUSValueA",
    "PathAddBackslashW",
    "StrToIntA",
    "PathStripPathW",
    "PathGetDriveNumberW",
    "PathFindExtensionA",
    "PathStripToRootA",
    "StrCatBuffA",
    "PathCreateFromUrlAlloc",
    "StrDupA",
    "IsInternetESCEnabled",
    "StrRChrA",
    "SHRegGetUSValueA",
    "PathParseIconLocationA",
    "StrRChrIW",
    "ParseURLW",
    "StrDupW",
    "StrCSpnIW",
    "StrCmpLogicalW",
    "StrStrA",
    "StrStrNW",
    "SHRegSetUSValueW",
    "PathCommonPrefixW",
    "PathIsPrefixA",
    "StrSpnW",
    "PathAppendW",
    "StrTrimA",
    "PathUnquoteSpacesA",
    "StrIsIntlEqualW",
    "SHRegCloseUSKey",
    "SHRegEnumUSKeyA",
    "PathIsRelativeA",
    "PathIsRootW",
    "PathGetArgsW",
    "StrCmpNIA",
    "UrlUnescapeW",
    "PathRenameExtensionW",
    "PathAddBackslashA",
    "PathIsFileSpecA",
    "PathIsSameRootA",
    "PathIsUNCServerW",
    "SHRegEnumUSKeyW",
    "StrCatChainW",
    "PathIsLFNFileSpecW",
    "PathFileExistsW",
    "StrStrIW",
    "StrSpnA",
    "StrCmpICW",
    "PathCreateFromUrlW",
    "PathIsUNCServerShareA",
    "PathIsRootA",
    "StrCSpnW",
    "StrCmpCW",
    "PathSkipRootA",
    "SHRegDeleteUSValueA",
    "StrChrIW",
    "UrlFixupW",
    "PathRemoveBackslashA",
    "PathRemoveExtensionW",
    "StrTrimW",
    "StrChrIA",
    "StrCmpNA",
    "PathIsLFNFileSpecA",
    "PathParseIconLocationW",
    "PathRenameExtensionA",
    "SHRegOpenUSKeyW",
    "PathRemoveExtensionA",
    "StrCmpCA",
    "PathIsSameRootW",
    "StrRChrW",
    "StrIsIntlEqualA",
    "StrPBrkW",
    "StrChrA",
    "StrStrNIW",
    "UrlGetLocationW",
    "UrlCanonicalizeW",
    "SHRegGetUSValueW",
    "StrPBrkA",
    "PathGetDriveNumberA",
    "PathIsURLW",
    "StrStrW",
    "StrCmpNICW",
    "StrToIntExA",
    "SHRegQueryUSValueA",
    "PathFindNextComponentW",
    "PathIsPrefixW",
    "SHRegDeleteUSValueW",
    "StrCSpnIA",
    "StrRStrIW",
    "StrToIntExW",
    "PathIsRelativeW",
    "PathRelativePathToW",
    "StrCmpICA",
    "StrRChrIA",
    "PathCanonicalizeA",
    "PathSkipRootW",
    "StrCmpIW",
    "PathIsUNCA",
    "UrlEscapeW",
    "StrCmpNCA",
    "StrToIntW",
    "PathAddExtensionA",
    "PathStripToRootW",
    "StrChrNIW",
    "StrChrNW",
    "SHRegQueryUSValueW",
    "StrCmpNW",
    "StrRStrIA",
    "StrCSpnA",
    "GetAcceptLanguagesW",
    "PathUnquoteSpacesW",
    "SHRegSetUSValueA",
    "StrCatBuffW",
    "PathFindFileNameA",
    "PathIsUNCServerA",
    "PathIsUNCW",
    "PathRemoveBackslashW",
    "StrToInt64ExW",
    "StrCmpNCW",
    "UrlIsW"
  ],
  "api-ms-win-downlevel-shlwapi-l2-1-0.dll": [
    "SHQueryInfoKeyW",
    "SHSetThreadRef",
    "IUnknown_QueryService",
    "SHCreateStreamOnFileW",
    "SHDeleteValueW",
    "SHCopyKeyA",
    "IStream_Reset",
    "SHDeleteKeyA",
    "SHRegGetPathA",
    "SHOpenRegStream2A",
    "SHDeleteValueA",
    "SHOpenRegStream2W",
    "SHQueryValueExW",
    "SHGetValueW",
    "SHRegSetPathW",
    "SHEnumKeyExA",
    "SHGetThreadRef",
    "SHReleaseThreadRef",
    "SHUnicodeToUnicode",
    "IUnknown_Set",
    "SHSetValueA",
    "SHCopyKeyW",
    "SHAnsiToAnsi",
    "SHRegGetValueA",
    "SHCreateStreamOnFileEx",
    "SHStrDupW",
    "IStream_ReadStr",
    "SHEnumKeyExW",
    "SHCreateStreamOnFileA",
    "SHSetValueW",
    "IUnknown_SetSite",
    "SHGetValueA",
    "SHRegSetPathA",
    "SHDeleteEmptyKeyA",
    "SHOpenRegStreamA",
    "SHQueryInfoKeyA",
    "IStream_Size",
    "SHRegDuplicateHKey",
    "SHEnumValueA",
    "IUnknown_GetSite",
    "IStream_Write",
    "SHAnsiToUnicode",
    "IStream_Read",
    "SHQueryValueExA",
    "SHDeleteEmptyKeyW",
    "SHEnumValueW",
    "IUnknown_AtomicRelease",
    "SHCreateMemStream",
    "SHRegGetValueW",
    "SHRegGetPathW",
    "SHOpenRegStreamW",
    "SHDeleteKeyW",
    "SHUnicodeToAnsi",
    "IStream_WriteStr",
    "SHCreateThreadRef",
    "IStream_Copy"
  ],
  "api-ms-win-downlevel-user32-l1-1-0.dll": [
    "CharUpperBuffW",
    "CharUpperBuffA",
    "CharNextExA",
    "IsCharAlphaNumericW",
    "CharUpperA",
    "CharPrevW",
    "CharPrevExA",
    "CharLowerA",
    "CharLowerW",
    "CharUpperW",
    "CharNextA",
    "IsCharAlphaW",
    "CharNextW",
    "IsCharUpperW",
    "IsCharLowerA",
    "CharPrevA",
    "CharLowerBuffA",
    "IsCharAlphaNumericA",
    "IsCharAlphaA",
    "CharLowerBuffW",
    "IsCharUpperA",
    "IsCharLowerW"
  ],
  "api-ms-win-downlevel-version-l1-1-0.dll": [
    "VerQueryValueA",
    "GetFileVersionInfoExW",
    "GetFileVersionInfoSizeExW",
    "VerQueryValueW",
    "VerFindFileW",
    "VerFindFileA"
  ],
  "api-ms-win-dx-d3dkmt-l1-1-0.dll": [
    "D3DKMTGetScanLine",
    "D3DKMTOpenResource",
    "D3DKMTOpenResource2",
    "D3DKMTOpenSynchronizationObject",
    "D3DKMTOpenAdapterFromGdiDisplayName",
    "D3DKMTGetMultisampleMethodList",
    "D3DKMTLock",
    "D3DKMTWaitForVerticalBlankEvent",
    "D3DKMTCreateOverlay",
    "D3DKMTShareObjects",
    "D3DKMTPollDisplayChildren",
    "D3DKMTSetGammaRamp",
    "D3DKMTUpdateOverlay",
    "D3DKMTQueryResourceInfoFromNtHandle",
    "D3DKMTAcquireKeyedMutex2",
    "D3DKMTDestroyKeyedMutex",
    "D3DKMTGetPresentQueueEvent",
    "D3DKMTSignalSynchronizationObject2",
    "GdiEntry13",
    "D3DKMTGetDeviceState",
    "D3DKMTInvalidateActiveVidPn",
    "D3DKMTCheckExclusiveOwnership",
    "D3DKMTDestroyAllocation",
    "D3DKMTWaitForSynchronizationObject2",
    "D3DKMTReleaseKeyedMutex2",
    "D3DKMTCreateOutputDupl",
    "D3DKMTSetProcessSchedulingPriorityClass",
    "D3DKMTGetProcessSchedulingPriorityClass",
    "D3DKMTDestroyDCFromMemory",
    "D3DKMTReleaseProcessVidPnSourceOwners",
    "D3DKMTCheckMonitorPowerState",
    "D3DKMTUnlock",
    "D3DKMTSetDisplayMode",
    "D3DKMTReclaimAllocations",
    "D3DKMTQueryAdapterInfo",
    "D3DKMTSignalSynchronizationObject",
    "D3DKMTSetVidPnSourceOwner",
    "D3DKMTOpenKeyedMutex2",
    "D3DKMTPresent",
    "D3DKMTSetQueuedLimit",
    "D3DKMTOutputDuplGetPointerShapeData",
    "D3DKMTQueryRemoteVidPnSourceFromGdiDisplayName",
    "D3DKMTSetDisplayPrivateDriverFormat",
    "D3DKMTOpenSyncObjectFromNtHandle",
    "D3DKMTOpenAdapterFromDeviceName",
    "D3DKMTQueryAllocationResidency",
    "D3DKMTRender",
    "D3DKMTSharedPrimaryLockNotification",
    "D3DKMTGetDisplayModeList",
    "D3DKMTGetOverlayState",
    "D3DKMTCreateAllocation2",
    "D3DKMTEscape",
    "D3DKMTReleaseKeyedMutex",
    "D3DKMTCreateKeyedMutex2",
    "D3DKMTOpenNtHandleFromName",
    "D3DKMTOpenResourceFromNtHandle",
    "D3DKMTFlipOverlay",
    "D3DKMTSetStereoEnabled",
    "D3DKMTGetRuntimeData",
    "D3DKMTCreateDCFromMemory",
    "D3DKMTOfferAllocations",
    "D3DKMTOpenAdapterFromHdc",
    "D3DKMTGetSharedPrimaryHandle",
    "D3DKMTCheckOcclusion",
    "D3DKMTDestroyDevice",
    "D3DKMTSharedPrimaryUnLockNotification",
    "D3DKMTDestroyOutputDupl",
    "D3DKMTCreateAllocation",
    "D3DKMTCreateKeyedMutex",
    "D3DKMTOutputDuplReleaseFrame",
    "D3DKMTCheckVidPnExclusiveOwnership",
    "D3DKMTCloseAdapter",
    "D3DKMTOutputDuplPresent",
    "D3DKMTQueryStatistics",
    "D3DKMTCreateDevice",
    "D3DKMTOpenKeyedMutex",
    "D3DKMTGetPresentHistory",
    "D3DKMTCreateContext",
    "D3DKMTWaitForIdle",
    "D3DKMTDestroyOverlay",
    "D3DKMTConfigureSharedResource",
    "D3DKMTGetContextSchedulingPriority",
    "D3DKMTWaitForSynchronizationObject",
    "D3DKMTDestroySynchronizationObject",
    "D3DKMTCreateSynchronizationObject2",
    "D3DKMTSetContextSchedulingPriority",
    "D3DKMTCreateSynchronizationObject",
    "D3DKMTSetAllocationPriority",
    "D3DKMTOutputDuplGetFrameInfo",
    "D3DKMTQueryResourceInfo",
    "D3DKMTDestroyContext",
    "D3DKMTAcquireKeyedMutex",
    "D3DKMTCheckSharedResourceAccess",
    "D3DKMTGetSharedResourceAdapterLuid",
    "D3DKMTOutputDuplGetMetaData",
    "DrvQueryAdapterPopulationUniqueness"
  ],
  "api-ms-win-eventing-classicprovider-l1-1-0.dll": [
    "GetTraceEnableFlags",
    "GetTraceEnableLevel",
    "UnregisterTraceGuids",
    "TraceEvent",
    "GetTraceLoggerHandle",
    "RegisterTraceGuidsW",
    "TraceMessageVa",
    "TraceMessage"
  ],
  "api-ms-win-eventing-consumer-l1-1-0.dll": [
    "ProcessTrace",
    "OpenTraceW",
    "CloseTrace"
  ],
  "api-ms-win-eventing-controller-l1-1-0.dll": [
    "TraceSetInformation",
    "EnumerateTraceGuidsEx",
    "EventAccessRemove",
    "StopTraceW",
    "EventAccessQuery",
    "EventAccessControl",
    "EnableTraceEx2",
    "ControlTraceW",
    "QueryAllTracesW",
    "TraceQueryInformation",
    "StartTraceW"
  ],
  "api-ms-win-eventing-legacy-l1-1-0.dll": [
    "StartTraceA",
    "EnableTrace",
    "ControlTraceA",
    "FlushTraceW",
    "FlushTraceA",
    "EnumerateTraceGuids",
    "QueryTraceA",
    "UpdateTraceA",
    "EnableTraceEx",
    "UpdateTraceW",
    "QueryTraceW",
    "OpenTraceA",
    "StopTraceA",
    "QueryAllTracesA"
  ],
  "api-ms-win-eventing-obsolete-l1-1-0.dll": [
    "RegisterTraceGuidsA",
    "RemoveTraceCallback",
    "SetTraceCallback"
  ],
  "api-ms-win-eventing-provider-l1-1-0.dll": [
    "EventWriteTransfer",
    "EventActivityIdControl",
    "EventEnabled",
    "EventWriteString",
    "EventProviderEnabled",
    "EventUnregister",
    "EventRegister",
    "EventWriteEx",
    "EventSetInformation",
    "EventWrite"
  ],
  "api-ms-win-eventlog-legacy-l1-1-0.dll": [
    "ReportEventW",
    "RegisterEventSourceA",
    "DeregisterEventSource",
    "ReportEventA",
    "GetEventLogInformation",
    "RegisterEventSourceW"
  ],
  "api-ms-win-eventlog-private-l1-1-0.dll": [
    "ElfRegisterEventSourceW",
    "ElfReportEventW",
    "ElfFlushEventLog",
    "ElfDeregisterEventSource"
  ],
  "api-ms-win-gdi-ie-rgn-l1-1-0.dll": [
    "CreateRectRgn",
    "GetRegionData",
    "CombineRgn",
    "ExtCreateRegion",
    "DeleteObject",
    "EqualRgn",
    "SetRectRgn",
    "RectInRegion"
  ],
  "api-ms-win-http-time-l1-1-0.dll": [
    "InternetTimeFromSystemTimeW",
    "InternetTimeFromSystemTimeA",
    "InternetTimeToSystemTimeA",
    "InternetTimeToSystemTimeW"
  ],
  "api-ms-win-input-ie-interactioncontext-l1-1-0.dll": [
    "GetStateInteractionContext",
    "StopInteractionContext",
    "BufferPointerPacketsInteractionContext",
    "ResetInteractionContext",
    "DestroyInteractionContext",
    "CreateInteractionContext",
    "SetPivotInteractionContext",
    "AddPointerInteractionContext",
    "RegisterOutputCallbackInteractionContext",
    "GetInteractionConfigurationInteractionContext",
    "SetPropertyInteractionContext",
    "SetInertiaParameterInteractionContext",
    "RemovePointerInteractionContext",
    "ProcessInertiaInteractionContext",
    "ProcessBufferedPacketsInteractionContext",
    "ProcessPointerFramesInteractionContext",
    "GetPropertyInteractionContext",
    "SetInteractionConfigurationInteractionContext",
    "GetInertiaParameterInteractionContext"
  ],
  "api-ms-win-mm-joystick-l1-1-0.dll": [
    "joyGetThreshold",
    "joyGetDevCapsW",
    "joyReleaseCapture",
    "joyGetNumDevs",
    "joyGetDevCapsA",
    "joyGetPosEx",
    "joySetCapture",
    "joyConfigChanged",
    "joySetThreshold",
    "joyGetPos"
  ],
  "api-ms-win-mm-mci-l1-1-0.dll": [
    "mciSendStringA",
    "mciGetDeviceIDFromElementIDA",
    "mciGetErrorStringA",
    "mciGetDeviceIDW",
    "mciSetYieldProc",
    "mciSendCommandW",
    "mciDriverNotify",
    "mciExecute",
    "mciGetCreatorTask",
    "mciSendCommandA",
    "mciDriverYield",
    "mciFreeCommandResource",
    "mciLoadCommandResource",
    "mciGetErrorStringW",
    "mciGetDeviceIDA",
    "mciSetDriverData",
    "mciGetDriverData",
    "mciGetYieldProc",
    "mciSendStringW",
    "mciGetDeviceIDFromElementIDW"
  ],
  "api-ms-win-mm-misc-l1-1-0.dll": [
    "mmioDescend",
    "mmioCreateChunk",
    "mmioRenameA",
    "DefDriverProc",
    "CloseDriver",
    "GetDriverModuleHandle",
    "DriverCallback",
    "mmioStringToFOURCCW",
    "mmioSetInfo",
    "mmioRead",
    "mmioClose",
    "SendDriverMessage",
    "mmioInstallIOProcA",
    "mmioSetBuffer",
    "mmioFlush",
    "DrvGetModuleHandle",
    "mmioRenameW",
    "mmioStringToFOURCCA",
    "mmDrvInstall",
    "mmioAscend",
    "mmioInstallIOProcW",
    "OpenDriver",
    "mmioSeek",
    "mmioWrite",
    "mmioGetInfo",
    "mmioOpenW",
    "mmioSendMessage",
    "mmioAdvance",
    "mmioOpenA"
  ],
  "api-ms-win-mm-misc-l2-1-0.dll": [
    "timeKillEvent",
    "timeSetEvent"
  ],
  "api-ms-win-mm-mme-l1-1-0.dll": [
    "waveOutPrepareHeader",
    "midiStreamStop",
    "waveOutGetErrorTextA",
    "midiStreamOut",
    "midiInPrepareHeader",
    "waveOutSetVolume",
    "midiOutSetVolume",
    "waveInUnprepareHeader",
    "midiInAddBuffer",
    "midiInClose",
    "midiOutReset",
    "mixerGetControlDetailsW",
    "waveInStart",
    "waveOutGetErrorTextW",
    "midiInGetErrorTextW",
    "waveInGetErrorTextA",
    "waveOutGetDevCapsA",
    "midiInStart",
    "midiOutGetVolume",
    "waveInMessage",
    "midiOutClose",
    "waveInGetDevCapsA",
    "waveInClose",
    "midiStreamRestart",
    "waveOutClose",
    "auxGetVolume",
    "midiConnect",
    "waveInGetPosition",
    "midiInGetDevCapsW",
    "waveInReset",
    "midiOutMessage",
    "mixerGetID",
    "midiOutGetDevCapsA",
    "waveOutGetDevCapsW",
    "auxGetDevCapsA",
    "midiInReset",
    "mixerGetLineInfoA",
    "waveOutGetPlaybackRate",
    "midiInStop",
    "midiInOpen",
    "midiInUnprepareHeader",
    "midiOutLongMsg",
    "waveOutPause",
    "midiOutGetNumDevs",
    "waveOutOpen",
    "midiOutGetErrorTextW",
    "midiOutPrepareHeader",
    "waveOutGetPosition",
    "midiOutGetErrorTextA",
    "auxGetDevCapsW",
    "auxOutMessage",
    "midiInGetNumDevs",
    "waveInStop",
    "midiStreamClose",
    "waveOutGetNumDevs",
    "mixerGetLineControlsA",
    "waveOutWrite",
    "waveOutGetVolume",
    "midiOutOpen",
    "midiOutGetDevCapsW",
    "mixerGetControlDetailsA",
    "waveInAddBuffer",
    "auxGetNumDevs",
    "midiOutCacheDrumPatches",
    "waveOutRestart",
    "midiStreamProperty",
    "midiOutGetID",
    "midiInGetErrorTextA",
    "waveInOpen",
    "waveOutUnprepareHeader",
    "midiStreamPause",
    "midiInGetID",
    "midiStreamOpen",
    "mixerGetDevCapsW",
    "waveOutMessage",
    "midiInMessage",
    "mixerGetLineInfoW",
    "waveInGetErrorTextW",
    "midiDisconnect",
    "waveInPrepareHeader",
    "mixerMessage",
    "waveOutGetID",
    "mixerGetNumDevs",
    "mixerClose",
    "waveInGetNumDevs",
    "mixerGetDevCapsA",
    "waveInGetDevCapsW",
    "mixerOpen",
    "waveOutBreakLoop",
    "midiOutShortMsg",
    "mixerSetControlDetails",
    "waveOutSetPlaybackRate",
    "midiOutUnprepareHeader",
    "auxSetVolume",
    "waveOutSetPitch",
    "mixerGetLineControlsW",
    "waveOutGetPitch",
    "midiOutCachePatches",
    "midiStreamPosition",
    "waveInGetID",
    "midiInGetDevCapsA",
    "waveOutReset"
  ],
  "api-ms-win-mm-playsound-l1-1-0.dll": [
    "PlaySoundA",
    "sndPlaySoundW",
    "sndPlaySoundA",
    "PlaySoundW"
  ],
  "api-ms-win-mm-time-l1-1-0.dll": [
    "timeGetTime",
    "timeBeginPeriod",
    "timeGetSystemTime",
    "timeEndPeriod",
    "timeGetDevCaps"
  ],
  "api-ms-win-net-isolation-l1-1-0.dll": [
    "NetworkIsolationUnregisterForAppContainerChanges",
    "NetworkIsolationSetAppContainerConfig",
    "NetworkIsolationFreeAppContainers",
    "NetworkIsolationGetAppContainerConfig",
    "NetworkIsolationSetupAppContainerBinaries",
    "NetworkIsolationDiagnoseConnectFailureAndGetInfo",
    "NetworkIsolationEnumAppContainers",
    "NetworkIsolationRegisterForAppContainerChanges"
  ],
  "api-ms-win-ntuser-dc-access-l1-1-0.dll": [
    "ReleaseDC",
    "GetDC"
  ],
  "api-ms-win-ntuser-ie-clipboard-l1-1-0.dll": [
    "GetClipboardFormatNameW",
    "SetClipboardData",
    "RegisterClipboardFormatW",
    "CountClipboardFormats",
    "GetClipboardFormatNameA",
    "RegisterClipboardFormatA",
    "IsClipboardFormatAvailable",
    "EmptyClipboard",
    "CloseClipboard",
    "OpenClipboard"
  ],
  "api-ms-win-ntuser-ie-message-l1-1-0.dll": [
    "TranslateMessage",
    "PostQuitMessage",
    "PostMessageW",
    "GetMessageTime",
    "SendMessageTimeoutW",
    "DispatchMessageW",
    "WaitMessage",
    "SendMessageW",
    "GetMessageW",
    "GetMessagePos",
    "PostThreadMessageW",
    "SendNotifyMessageW",
    "RegisterWindowMessageW",
    "PeekMessageW",
    "GetMessageExtraInfo",
    "MsgWaitForMultipleObjectsEx",
    "GetQueueStatus",
    "MsgWaitForMultipleObjects",
    "InSendMessage"
  ],
  "api-ms-win-ntuser-ie-window-l1-1-0.dll": [
    "MoveWindow",
    "IsWindowEnabled",
    "KillTimer",
    "DeferWindowPos",
    "GetClassInfoExW",
    "GetActiveWindow",
    "GetWindow",
    "UnregisterClassW",
    "DefWindowProcW",
    "GetFocus",
    "GetParent",
    "GetCursorPos",
    "SetParent",
    "WindowFromPoint",
    "ClientToScreen",
    "EndDeferWindowPos",
    "GetAncestor",
    "SetWindowPos",
    "SetCursorPos",
    "IsChild",
    "EnumWindows",
    "EnableWindow",
    "FindWindowW",
    "FindWindowExW",
    "AllowSetForegroundWindow",
    "GetSysColor",
    "RegisterClassW",
    "GetClassNameW",
    "GetDesktopWindow",
    "GetWindowTextW",
    "GetClientRect",
    "GetWindowThreadProcessId",
    "RegisterClassExW",
    "SetWindowTextW",
    "EnumChildWindows",
    "SetWindowLongA",
    "GetWindowRect",
    "IsWindow",
    "CallWindowProcW",
    "GetWindowLongW",
    "SetFocus",
    "ShowWindow",
    "GetWindowLongA",
    "CreateWindowExW",
    "BeginDeferWindowPos",
    "SetTimer",
    "GetTopWindow",
    "RemovePropW",
    "GetClassInfoW",
    "IsWindowVisible",
    "GetPropW",
    "ChildWindowFromPoint",
    "DestroyWindow",
    "ChildWindowFromPointEx",
    "SetForegroundWindow",
    "SetWindowLongW",
    "SetActiveWindow",
    "SetPropW",
    "GetForegroundWindow"
  ],
  "api-ms-win-ntuser-ie-wmpointer-l1-1-0.dll": [
    "GetPointerFrameTouchInfoHistory",
    "GetCurrentInputMessageSource",
    "GetPointerFrameInfo",
    "GetPointerTouchInfoHistory",
    "GetPointerTouchInfo",
    "GetPointerFrameInfoHistory",
    "GetPointerInfoHistory",
    "GetPointerInfo",
    "GetPointerType",
    "GetPointerFrameTouchInfo",
    "GetPointerCursorId"
  ],
  "api-ms-win-ntuser-rectangle-l1-1-0.dll": [
    "OffsetRect",
    "EqualRect",
    "IntersectRect",
    "SetRect",
    "InflateRect",
    "SetRectEmpty",
    "SubtractRect",
    "CopyRect",
    "IsRectEmpty",
    "PtInRect",
    "UnionRect"
  ],
  "api-ms-win-ntuser-sysparams-l1-1-0.dll": [
    "QueryDisplayConfig",
    "EnumDisplayDevicesW",
    "GetSystemMetrics",
    "GetDisplayConfigBufferSizes",
    "SystemParametersInfoW",
    "ChangeDisplaySettingsExW",
    "GetMonitorInfoW",
    "DisplayConfigSetDeviceInfo",
    "DisplayConfigGetDeviceInfo",
    "EnumDisplaySettingsW",
    "EnumDisplayMonitors",
    "EnumDisplaySettingsExW"
  ],
  "api-ms-win-ntuser-uicontext-l1-1-0.dll": [
    "IsImmersiveProcess",
    "GetProcessUIContextInformation"
  ],
  "api-ms-win-ole32-ie-l1-1-0.dll": [
    "OleRun",
    "ReleaseStgMedium",
    "CoInitialize",
    "CoFileTimeNow",
    "CreateBindCtx"
  ],
  "api-ms-win-power-base-l1-1-0.dll": [
    "GetPwrCapabilities",
    "CallNtPowerInformation",
    "PowerDeterminePlatformRoleEx",
    "PowerUnregisterSuspendResumeNotification",
    "PowerRegisterSuspendResumeNotification"
  ],
  "api-ms-win-power-setting-l1-1-0.dll": [
    "PowerSetActiveScheme",
    "PowerSettingUnregisterNotification",
    "PowerWriteACValueIndex",
    "PowerWriteDCValueIndex",
    "PowerReadACValue",
    "PowerSettingRegisterNotification",
    "PowerReadDCValue",
    "PowerGetActiveScheme"
  ],
  "api-ms-win-ro-typeresolution-l1-1-0.dll": [
    "RoParseTypeName",
    "RoGetMetaDataFile",
    "RoResolveNamespace"
  ],
  "api-ms-win-security-activedirectoryclient-l1-1-0.dll": [
    "DsFreePasswordCredentials",
    "DsFreeDomainControllerInfoW",
    "DsMakePasswordCredentialsW",
    "DsCrackNamesW",
    "DsFreeNameResultW",
    "DsBindWithSpnExW",
    "DsUnBindW",
    "DsGetDomainControllerInfoW"
  ],
  "api-ms-win-security-appcontainer-l1-1-0.dll": [
    "GetAppContainerNamedObjectPath"
  ],
  "api-ms-win-security-audit-l1-1-0.dll": [
    "AuditSetSystemPolicy",
    "AuditFree",
    "AuditQuerySystemPolicy",
    "AuditComputeEffectivePolicyBySid"
  ],
  "api-ms-win-security-base-l1-1-0.dll": [
    "GetSecurityDescriptorSacl",
    "SetSecurityDescriptorOwner",
    "AddAuditAccessAceEx",
    "GetTokenInformation",
    "AdjustTokenPrivileges",
    "AccessCheckByTypeAndAuditAlarmW",
    "IsValidSecurityDescriptor",
    "CreateRestrictedToken",
    "ObjectPrivilegeAuditAlarmW",
    "SetPrivateObjectSecurity",
    "ImpersonateAnonymousToken",
    "AccessCheckAndAuditAlarmW",
    "GetSecurityDescriptorControl",
    "AdjustTokenGroups",
    "GetLengthSid",
    "AddAccessDeniedAceEx",
    "ObjectOpenAuditAlarmW",
    "AccessCheckByType",
    "CreatePrivateObjectSecurityEx",
    "AddAuditAccessAce",
    "IsValidRelativeSecurityDescriptor",
    "AddAccessDeniedObjectAce",
    "AddAccessDeniedAce",
    "AddAccessAllowedObjectAce",
    "InitializeSid",
    "InitializeSecurityDescriptor",
    "AccessCheckByTypeResultListAndAuditAlarmW",
    "MapGenericMask",
    "GetSecurityDescriptorDacl",
    "GetFileSecurityW",
    "AddMandatoryAce",
    "AccessCheckByTypeResultListAndAuditAlarmByHandleW",
    "SetAclInformation",
    "DuplicateTokenEx",
    "GetSecurityDescriptorRMControl",
    "MakeAbsoluteSD",
    "AddAccessAllowedAceEx",
    "MakeSelfRelativeSD",
    "GetSidSubAuthority",
    "ImpersonateLoggedOnUser",
    "InitializeAcl",
    "PrivilegeCheck",
    "ConvertToAutoInheritPrivateObjectSecurity",
    "AllocateLocallyUniqueId",
    "ImpersonateSelf",
    "IsValidSid",
    "FreeSid",
    "GetKernelObjectSecurity",
    "GetSidIdentifierAuthority",
    "DestroyPrivateObjectSecurity",
    "GetAclInformation",
    "ObjectCloseAuditAlarmW",
    "GetSidLengthRequired",
    "ObjectDeleteAuditAlarmW",
    "SetPrivateObjectSecurityEx",
    "QuerySecurityAccessMask",
    "RevertToSelf",
    "CreateWellKnownSid",
    "AccessCheckByTypeResultList",
    "CreatePrivateObjectSecurityWithMultipleInheritance",
    "AccessCheck",
    "SetSecurityDescriptorControl",
    "AddAce",
    "EqualPrefixSid",
    "SetSecurityDescriptorGroup",
    "AllocateAndInitializeSid",
    "DuplicateToken",
    "GetPrivateObjectSecurity",
    "AreAnyAccessesGranted",
    "EqualDomainSid",
    "PrivilegedServiceAuditAlarmW",
    "SetTokenInformation",
    "SetKernelObjectSecurity",
    "SetFileSecurityW",
    "AddAccessAllowedAce",
    "AddAuditAccessObjectAce",
    "IsValidAcl",
    "SetSecurityAccessMask",
    "GetSecurityDescriptorLength",
    "IsWellKnownSid",
    "DeleteAce",
    "AreAllAccessesGranted",
    "CreatePrivateObjectSecurity",
    "GetSecurityDescriptorOwner",
    "IsTokenRestricted",
    "GetAce",
    "EqualSid",
    "GetSecurityDescriptorGroup",
    "MakeAbsoluteSD2",
    "FindFirstFreeAce",
    "SetSecurityDescriptorRMControl",
    "SetSecurityDescriptorDacl",
    "SetSecurityDescriptorSacl",
    "CheckTokenMembership",
    "GetSidSubAuthorityCount",
    "GetWindowsAccountDomainSid",
    "CopySid"
  ],
  "api-ms-win-security-base-l1-2-0.dll": [
    "GetSecurityDescriptorSacl",
    "SetSecurityDescriptorOwner",
    "AddAuditAccessAceEx",
    "GetTokenInformation",
    "AdjustTokenPrivileges",
    "CheckTokenCapability",
    "AccessCheckByTypeAndAuditAlarmW",
    "IsValidSecurityDescriptor",
    "CreateRestrictedToken",
    "ObjectPrivilegeAuditAlarmW",
    "SetPrivateObjectSecurity",
    "ImpersonateAnonymousToken",
    "AccessCheckAndAuditAlarmW",
    "GetSecurityDescriptorControl",
    "AdjustTokenGroups",
    "GetLengthSid",
    "AddAccessDeniedAceEx",
    "ObjectOpenAuditAlarmW",
    "AccessCheckByType",
    "CreatePrivateObjectSecurityEx",
    "AddAuditAccessAce",
    "AddAccessDeniedObjectAce",
    "AddAccessDeniedAce",
    "AddAccessAllowedObjectAce",
    "InitializeSid",
    "InitializeSecurityDescriptor",
    "AccessCheckByTypeResultListAndAuditAlarmW",
    "MapGenericMask",
    "GetSecurityDescriptorDacl",
    "GetFileSecurityW",
    "AddMandatoryAce",
    "AccessCheckByTypeResultListAndAuditAlarmByHandleW",
    "SetAclInformation",
    "DuplicateTokenEx",
    "GetSecurityDescriptorRMControl",
    "MakeAbsoluteSD",
    "AddAccessAllowedAceEx",
    "MakeSelfRelativeSD",
    "GetSidSubAuthority",
    "ImpersonateLoggedOnUser",
    "InitializeAcl",
    "PrivilegeCheck",
    "ConvertToAutoInheritPrivateObjectSecurity",
    "AddResourceAttributeAce",
    "AllocateLocallyUniqueId",
    "ImpersonateSelf",
    "IsValidSid",
    "GetAppContainerAce",
    "FreeSid",
    "GetKernelObjectSecurity",
    "GetSidIdentifierAuthority",
    "DestroyPrivateObjectSecurity",
    "GetAclInformation",
    "ObjectCloseAuditAlarmW",
    "GetSidLengthRequired",
    "ObjectDeleteAuditAlarmW",
    "SetPrivateObjectSecurityEx",
    "QuerySecurityAccessMask",
    "RevertToSelf",
    "CreateWellKnownSid",
    "AccessCheckByTypeResultList",
    "CreatePrivateObjectSecurityWithMultipleInheritance",
    "AccessCheck",
    "SetSecurityDescriptorControl",
    "AddAce",
    "EqualPrefixSid",
    "SetSecurityDescriptorGroup",
    "AllocateAndInitializeSid",
    "DuplicateToken",
    "GetPrivateObjectSecurity",
    "AreAnyAccessesGranted",
    "EqualDomainSid",
    "PrivilegedServiceAuditAlarmW",
    "SetTokenInformation",
    "SetKernelObjectSecurity",
    "SetFileSecurityW",
    "AddAccessAllowedAce",
    "AddAuditAccessObjectAce",
    "IsValidAcl",
    "SetSecurityAccessMask",
    "GetSecurityDescriptorLength",
    "IsWellKnownSid",
    "AddScopedPolicyIDAce",
    "DeleteAce",
    "AreAllAccessesGranted",
    "CreatePrivateObjectSecurity",
    "GetSecurityDescriptorOwner",
    "IsTokenRestricted",
    "GetAce",
    "EqualSid",
    "GetSecurityDescriptorGroup",
    "CheckTokenMembershipEx",
    "FindFirstFreeAce",
    "GetCachedSigningLevel",
    "SetSecurityDescriptorRMControl",
    "SetSecurityDescriptorDacl",
    "SetSecurityDescriptorSacl",
    "CheckTokenMembership",
    "GetSidSubAuthorityCount",
    "GetWindowsAccountDomainSid",
    "CopySid",
    "SetCachedSigningLevel"
  ],
  "api-ms-win-security-base-private-l1-1-0.dll": [
    "IsValidRelativeSecurityDescriptor",
    "MakeAbsoluteSD2"
  ],
  "api-ms-win-security-credentials-l1-1-0.dll": [
    "CredGetTargetInfoA",
    "CredUnprotectW",
    "CredUnmarshalCredentialA",
    "CredProtectA",
    "CredEnumerateW",
    "CredWriteDomainCredentialsA",
    "CredMarshalCredentialW",
    "CredEnumerateA",
    "CredGetTargetInfoW",
    "CredReadW",
    "CredIsProtectedW",
    "CredGetSessionTypes",
    "CredReadA",
    "CredWriteDomainCredentialsW",
    "CredProtectW",
    "CredDeleteA",
    "CredWriteA",
    "CredFindBestCredentialA",
    "CredReadDomainCredentialsA",
    "CredFindBestCredentialW",
    "CredReadDomainCredentialsW",
    "CredUnmarshalCredentialW",
    "CredWriteW",
    "CredMarshalCredentialA",
    "CredDeleteW",
    "CredIsProtectedA",
    "CredUnprotectA",
    "CredFree",
    "CredIsMarshaledCredentialW"
  ],
  "api-ms-win-security-credentials-l2-1-0.dll": [
    "CredProfileLoaded",
    "CredProfileUnloaded",
    "CredEncryptAndMarshalBinaryBlob",
    "CredpConvertCredential",
    "CredpEncodeCredential",
    "CredpConvertTargetInfo",
    "CredBackupCredentials",
    "CredpConvertOneCredentialSize",
    "CredpEncodeSecret",
    "CredReadByTokenHandle",
    "CredProfileLoadedEx",
    "CredpDecodeCredential",
    "CredParseUserNameWithType",
    "CredRestoreCredentials"
  ],
  "api-ms-win-security-grouppolicy-l1-1-0.dll": [
    "FreeGPOListInternalA",
    "GetAppliedGPOListInternalA",
    "GenerateGPNotificationInternal",
    "EnterCriticalPolicySectionInternal",
    "GetGPOListInternalA",
    "RefreshPolicyInternal",
    "RsopLoggingEnabledInternal",
    "WaitForMachinePolicyForegroundProcessingInternal",
    "WaitForUserPolicyForegroundProcessingInternal",
    "GetNextFgPolicyRefreshInfoInternal",
    "GetAppliedGPOListInternalW",
    "FreeGPOListInternalW",
    "AreThereVisibleLogoffScriptsInternal",
    "RegisterGPNotificationInternal",
    "IsSyncForegroundPolicyRefresh",
    "GetGPOListInternalW",
    "GetPreviousFgPolicyRefreshInfoInternal",
    "HasPolicyForegroundProcessingCompletedInternal",
    "LeaveCriticalPolicySectionInternal",
    "RefreshPolicyExInternal",
    "ForceSyncFgPolicyInternal",
    "AreThereVisibleShutdownScriptsInternal",
    "UnregisterGPNotificationInternal"
  ],
  "api-ms-win-security-lsalookup-l1-1-0.dll": [
    "LsaLookupTranslateNames",
    "LsaLookupTranslateSids",
    "LsaLookupFreeMemory",
    "LookupAccountNameLocalW",
    "LsaLookupGetDomainInfo",
    "LookupAccountNameLocalA",
    "LookupAccountSidLocalA",
    "LookupAccountSidLocalW",
    "LsaLookupManageSidNameMapping",
    "LsaLookupOpenLocalPolicy",
    "LsaLookupClose"
  ],
  "api-ms-win-security-lsalookup-l1-1-1.dll": [
    "LsaLookupTranslateNames",
    "GetDefaultIdentityProvider",
    "LsaLookupTranslateSids",
    "GetIdentityProviderInfoByGUID",
    "EnumerateIdentityProviders",
    "LsaLookupFreeMemory",
    "GetIdentityProviderInfoByName",
    "LookupAccountNameLocalW",
    "LsaLookupGetDomainInfo",
    "ReleaseIdentityProviderEnumContext",
    "LookupAccountNameLocalA",
    "LookupAccountSidLocalA",
    "LookupAccountSidLocalW",
    "LsaLookupManageSidNameMapping",
    "LsaLookupOpenLocalPolicy",
    "LsaLookupClose"
  ],
  "api-ms-win-security-lsalookup-l2-1-0.dll": [
    "LookupAccountSidW",
    "LookupPrivilegeValueW",
    "LsaEnumerateTrustedDomains",
    "LookupPrivilegeDisplayNameW",
    "LookupPrivilegeNameW",
    "LookupAccountNameW"
  ],
  "api-ms-win-security-lsapolicy-l1-1-0.dll": [
    "LsaCreateSecret",
    "LsaClose",
    "LsaRetrievePrivateData",
    "LsaQueryInformationPolicy",
    "LsaRemoveAccountRights",
    "LsaQuerySecret",
    "LsaLookupSids",
    "LsaFreeMemory",
    "LsaOpenPolicy",
    "LsaLookupNames2",
    "LsaStorePrivateData",
    "LsaOpenSecret",
    "LsaICLookupSidsWithCreds",
    "LsaEnumerateAccountRights",
    "LsaICLookupSids",
    "LsaICLookupNames",
    "LsaSetSecret",
    "LsaLookupSids2",
    "LsaAddAccountRights",
    "LsaSetInformationPolicy",
    "LsaICLookupNamesWithCreds",
    "LsaEnumerateAccountsWithUserRight"
  ],
  "api-ms-win-security-provider-l1-1-0.dll": [
    "GetSecurityInfo",
    "SetSecurityInfo",
    "SetEntriesInAclW",
    "SetNamedSecurityInfoW",
    "GetNamedSecurityInfoW",
    "GetExplicitEntriesFromAclW"
  ],
  "api-ms-win-security-sddl-ansi-l1-1-0.dll": [
    "ConvertSidToStringSidA",
    "ConvertStringSidToSidA"
  ],
  "api-ms-win-security-sddl-l1-1-0.dll": [
    "ConvertStringSidToSidW",
    "ConvertStringSecurityDescriptorToSecurityDescriptorW",
    "ConvertSecurityDescriptorToStringSecurityDescriptorW",
    "ConvertSidToStringSidW"
  ],
  "api-ms-win-security-sddlparsecond-l1-1-0.dll": [
    "LocalGetStringForCondition",
    "LocalGetConditionForString",
    "LocalGetReferencedTokenTypesForCondition"
  ],
  "api-ms-win-security-systemfunctions-l1-1-0.dll": [
    "SystemFunction036",
    "SystemFunction041",
    "SystemFunction040"
  ],
  "api-ms-win-security-trustee-l1-1-0.dll": [
    "BuildImpersonateTrusteeW",
    "BuildTrusteeWithObjectsAndSidW",
    "BuildTrusteeWithSidW",
    "BuildSecurityDescriptorW"
  ],
  "api-ms-win-service-core-l1-1-0.dll": [
    "SetServiceStatus",
    "RegisterServiceCtrlHandlerExW",
    "StartServiceCtrlDispatcherW"
  ],
  "api-ms-win-service-core-l1-1-1.dll": [
    "EnumDependentServicesW",
    "RegisterServiceCtrlHandlerExW",
    "StartServiceCtrlDispatcherW",
    "QueryServiceDynamicInformation",
    "SetServiceStatus",
    "EnumServicesStatusExW"
  ],
  "api-ms-win-service-management-l1-1-0.dll": [
    "CreateServiceW",
    "DeleteService",
    "OpenServiceW",
    "CloseServiceHandle",
    "StartServiceW",
    "OpenSCManagerW",
    "ControlServiceExW"
  ],
  "api-ms-win-service-management-l2-1-0.dll": [
    "QueryServiceConfig2W",
    "QueryServiceConfigW",
    "ChangeServiceConfig2W",
    "QueryServiceObjectSecurity",
    "QueryServiceStatusEx",
    "NotifyServiceStatusChangeW",
    "ChangeServiceConfigW",
    "SetServiceObjectSecurity"
  ],
  "api-ms-win-service-private-l1-1-0.dll": [
    "I_ScUnregisterDeviceNotification",
    "I_ScSendPnPMessage",
    "SubscribeServiceChangeNotifications",
    "I_ScSendTSMessage",
    "WaitServiceState",
    "I_ScQueryServiceConfig",
    "I_ScRpcBindW",
    "I_ScSetServiceBitsW",
    "I_ScValidatePnPService",
    "I_ScIsSecurityProcess",
    "I_ScRegisterDeviceNotification",
    "I_ScRpcBindA",
    "I_QueryTagInformation",
    "I_ScPnPGetServiceName",
    "I_ScBroadcastServiceControlMessage",
    "UnsubscribeServiceChangeNotifications",
    "I_ScSetServiceBitsA"
  ],
  "api-ms-win-service-winsvc-l1-1-0.dll": [
    "I_ScSendPnPMessage",
    "I_ScQueryServiceConfig",
    "RegisterServiceCtrlHandlerA",
    "I_ScRpcBindA",
    "I_ScIsSecurityProcess",
    "ControlServiceExA",
    "ChangeServiceConfigA",
    "QueryServiceConfigA",
    "ControlService",
    "ChangeServiceConfig2A",
    "QueryServiceConfig2A",
    "OpenSCManagerA",
    "QueryServiceStatus",
    "StartServiceA",
    "NotifyServiceStatusChangeA",
    "StartServiceCtrlDispatcherA",
    "I_ScValidatePnPService",
    "RegisterServiceCtrlHandlerExA",
    "RegisterServiceCtrlHandlerW",
    "I_ScSendTSMessage",
    "CreateServiceA",
    "I_ScRpcBindW",
    "OpenServiceA",
    "I_QueryTagInformation",
    "I_ScPnPGetServiceName",
    "I_ScBroadcastServiceControlMessage"
  ],
  "api-ms-win-service-winsvc-l1-2-0.dll": [
    "ControlServiceExA",
    "ChangeServiceConfigA",
    "QueryServiceConfigA",
    "NotifyServiceStatusChangeA",
    "CreateServiceA",
    "ControlService",
    "StartServiceCtrlDispatcherA",
    "OpenServiceA",
    "RegisterServiceCtrlHandlerA",
    "ChangeServiceConfig2A",
    "QueryServiceConfig2A",
    "OpenSCManagerA",
    "QueryServiceStatus",
    "RegisterServiceCtrlHandlerExA",
    "StartServiceA",
    "RegisterServiceCtrlHandlerW"
  ],
  "api-ms-win-shcore-comhelpers-l1-1-0.dll": [
    "IUnknown_SetSite",
    "IUnknown_AtomicRelease",
    "IUnknown_QueryService",
    "IUnknown_Set",
    "IUnknown_GetSite"
  ],
  "api-ms-win-shcore-obsolete-l1-1-0.dll": [
    "CommandLineToArgvW",
    "SHStrDupA",
    "SHStrDupW"
  ],
  "api-ms-win-shcore-registry-l1-1-0.dll": [
    "SHQueryInfoKeyW",
    "SHDeleteValueW",
    "SHCopyKeyA",
    "SHDeleteKeyA",
    "SHRegGetPathA",
    "SHDeleteValueA",
    "SHQueryValueExW",
    "SHGetValueW",
    "SHRegSetPathW",
    "SHEnumKeyExA",
    "SHSetValueA",
    "SHCopyKeyW",
    "SHRegGetValueA",
    "SHEnumKeyExW",
    "SHSetValueW",
    "SHGetValueA",
    "SHRegGetIntW",
    "SHDeleteEmptyKeyA",
    "SHRegDuplicateHKey",
    "SHQueryInfoKeyA",
    "SHRegSetPathA",
    "SHEnumValueA",
    "SHQueryValueExA",
    "SHDeleteEmptyKeyW",
    "SHEnumValueW",
    "SHRegGetValueW",
    "SHRegGetPathW",
    "SHDeleteKeyW"
  ],
  "api-ms-win-shcore-scaling-l1-1-0.dll": [
    "GetScaleFactorForDevice",
    "RevokeScaleChangeNotifications",
    "RegisterScaleChangeNotifications"
  ],
  "api-ms-win-shcore-stream-l1-1-0.dll": [
    "SHOpenRegStream2W",
    "SHCreateMemStream",
    "SHOpenRegStreamA",
    "SHCreateStreamOnFileW",
    "IStream_Size",
    "SHOpenRegStreamW",
    "IStream_WriteStr",
    "SHCreateStreamOnFileEx",
    "IStream_Reset",
    "IStream_Write",
    "IStream_Read",
    "SHOpenRegStream2A",
    "IStream_ReadStr",
    "SHCreateStreamOnFileA",
    "IStream_Copy"
  ],
  "api-ms-win-shcore-stream-winrt-l1-1-0.dll": [
    "CreateRandomAccessStreamOnFile",
    "CreateRandomAccessStreamOverStream",
    "CreateStreamOverRandomAccessStream"
  ],
  "api-ms-win-shcore-sysinfo-l1-1-0.dll": [
    "SetCurrentProcessExplicitAppUserModelID",
    "IsOS",
    "GetCurrentProcessExplicitAppUserModelID"
  ],
  "api-ms-win-shcore-thread-l1-1-0.dll": [
    "GetProcessReference",
    "SHCreateThreadWithHandle",
    "SHSetThreadRef",
    "SHCreateThread",
    "SHGetThreadRef",
    "SHReleaseThreadRef",
    "SetProcessReference",
    "SHCreateThreadRef"
  ],
  "api-ms-win-shcore-unicodeansi-l1-1-0.dll": [
    "SHAnsiToAnsi",
    "SHUnicodeToAnsi",
    "SHAnsiToUnicode",
    "SHUnicodeToUnicode"
  ],
  "api-ms-win-shell-shellcom-l1-1-0.dll": [
    "SHCoCreateInstance"
  ],
  "api-ms-win-shell-shellfolders-l1-1-0.dll": [
    "SHGetFolderPathW",
    "SHGetFolderPathAndSubDirW",
    "SHGetDesktopFolder",
    "SHGetInstanceExplorer",
    "SHCreateDirectoryExW",
    "SHGetFolderPathA",
    "SHGetSpecialFolderPathW",
    "SHSetKnownFolderPath",
    "SHGetFolderLocation",
    "SHGetKnownFolderPath",
    "SHGetFileInfoW",
    "PathCleanupSpec",
    "PathIsExe",
    "SHGetSpecialFolderPathA"
  ],
  "api-ms-win-shlwapi-ie-l1-1-0.dll": [
    "SHRegGetValueFromHKCUHKLM",
    "PathIsDirectoryA",
    "SHRegGetValueW",
    "ConnectToConnectionPoint",
    "PathFileExistsAndAttributesW",
    "IUnknown_QueryService",
    "SHPackDispParamsV",
    "SHUnicodeToAnsiCP",
    "SHRegGetBoolValueFromHKCUHKLM",
    "AssocQueryKeyW",
    "AssocIsDangerous",
    "IUnknown_QueryStatus",
    "GUIDFromStringW",
    "IUnknown_Exec",
    "AssocGetPerceivedType",
    "SHStrDupW",
    "PathUndecorateW",
    "PathIsDirectoryW"
  ],
  "apisetschema.dll": "No exports",
  "apphelp.dll": [
    "SE_InitializeEngine",
    "SdbGUIDToString",
    "SdbFindNextMsiPackage",
    "SdbRegisterDatabase",
    "SE_IsShimDll",
    "SE_AddHookset",
    "SdbIsTagrefFromMainDB",
    "SE_GetProcAddressForCaller",
    "SdbGetImageType",
    "SdbIsTagrefFromLocalDB",
    "SdbUnregisterDatabase",
    "SetPermLayerState",
    "SetPermLayerStateEx",
    "SdbStartIndexing",
    "SdbReadQWORDTag",
    "SdbShowApphelpDialog",
    "SdbSetPermLayerKeys",
    "SdbGetDllPath",
    "SdbSetApphelpDebugParameters",
    "ApphelpQueryModuleData",
    "SdbIsStandardDatabase",
    "SdbResolveDatabase",
    "SdbGetPDBFromGUID",
    "SdbGetTagDataSize",
    "SdbGetEntryFlags",
    "SE_LdrEntryRemoved",
    "SdbBuildCompatEnvVariables",
    "SdbTagIDToTagRef",
    "SdbFreeFileInfo",
    "SdbSetEntryFlags",
    "SdbGetShowDebugInfoOptionValue",
    "SdbOpenApphelpResourceFile",
    "SE_WINRT_HookObject",
    "SE_DllLoaded",
    "SE_InstallBeforeInit",
    "SdbMakeIndexKeyFromString",
    "SdbReadApphelpDetailsData",
    "SdbDeletePermLayerKeys",
    "SdbReadWORDTagRef",
    "SdbFindFirstNamedTag",
    "SE_ShimDPF",
    "SdbGrabMatchingInfoEx",
    "SE_GetShimId",
    "SdbReadBinaryTag",
    "AllowPermLayer",
    "SE_ShimDllLoaded",
    "SdbGetFileImageTypeEx",
    "SdbStopIndexing",
    "SdbWriteBinaryTag",
    "SdbFindFirstDWORDIndexedTag",
    "SdbGetFileImageType",
    "SdbPackAppCompatData",
    "DlSnapshot",
    "SdbReadBYTETagRef",
    "SdbCommitIndexes",
    "SdbGetIndex",
    "SdbOpenApphelpInformation",
    "ApphelpCheckInstallShieldPackage",
    "SdbApphelpNotifyEx",
    "SdbFreeDatabaseInformation",
    "SetPermLayers",
    "SdbCloseDatabaseWrite",
    "SE_DynamicShim",
    "SdbReadWORDTag",
    "DlSetFlagsEx",
    "SdbFindNextGUIDIndexedTag",
    "ApphelpGetShimDebugLevel",
    "SdbGetDatabaseInformation",
    "SdbFindFirstGUIDIndexedTag",
    "SE_GetShimCount",
    "ApphelpFreeFileAttributes",
    "SE_WINRT_AddHook",
    "DlEnumChannels",
    "SdbGetNextChild",
    "SdbReadApphelpData",
    "SdbGetShowDebugInfoOption",
    "SdbEnumMsiTransforms",
    "SdbFindFirstMsiPackage",
    "SdbQueryData",
    "SdbQueryReinstallUpgrade",
    "SdbWriteBinaryTagFromFile",
    "DlSetLevelEx",
    "SE_ProcessDying",
    "SdbInitDatabase",
    "SE_LookupCaller",
    "SdbReadMsiTransformInfo",
    "SdbFindNextTagRef",
    "SdbEscapeApphelpURL",
    "SdbQueryFlagMask",
    "ShimFlushCache",
    "SdbFindFirstMsiPackage_Str",
    "DWM8And16Bit_DirectDrawCreateEx_CallOut",
    "SdbFindNextTag",
    "SdbReadDWORDTagRef",
    "ShimDumpCache",
    "SdbApphelpNotify",
    "SdbFindMsiPackageByID",
    "ApphelpDebugPrintf",
    "SE_COM_Lookup",
    "SdbQueryApphelpInformation",
    "SdbFormatAttribute",
    "ApphelpCheckShellObject",
    "SdbFindCustomActionForPackage",
    "SdbCloseApphelpInformation",
    "SdbGetFileAttributes",
    "SdbGetMsiPackageInformation",
    "SE_GetProcAddressIgnoreIncExc",
    "SdbAddLayerTagRefToQuery",
    "SdbGetItemFromItemRef",
    "SdbQueryBlockUpgrade",
    "SdbReadStringTagRef",
    "SdbStringReplaceArray",
    "ShimDbgPrint",
    "SdbFindFirstStringIndexedTag",
    "DWM8And16Bit_RestoreDisplayMode_CallOut",
    "ApphelpGetFileAttributes",
    "ApphelpQueryModuleDataEx",
    "SdbCloseLocalDatabase",
    "SdbReadPatchBits",
    "SdbGetLocalPDB",
    "SdbOpenApphelpDetailsDatabaseSP",
    "SdbWriteNULLTag",
    "SdbWriteDWORDTag",
    "ApphelpShowDialog",
    "SdbGetFirstChild",
    "ApphelpCheckRunApp",
    "SdbLoadString",
    "SdbGetDatabaseVersion",
    "SdbGetDatabaseInformationByName",
    "SdbOpenApphelpDetailsDatabase",
    "SdbGetAppCompatDataSize",
    "SdbFindFirstTagRef",
    "SdbQueryDataExTagID",
    "ApphelpGetNTVDMInfo",
    "SdbBeginWriteListTag",
    "SdbStringDuplicate",
    "SdbFreeFileAttributes",
    "SE_GetHookAPIs",
    "SdbCreateDatabase",
    "SdbGetBinaryTagData",
    "SdbEndWriteListTag",
    "SdbGetDatabaseID",
    "DWM8And16Bit_ChangeDisplaySettingsExW_CallOut",
    "SdbReadStringTag",
    "SdbGetMatchingExe",
    "SE_COM_AddServer",
    "SE_COM_HookObject",
    "SdbIsNullGUID",
    "SdbWriteQWORDTag",
    "SdbDeclareIndex",
    "SdbTagRefToTagID",
    "SdbWriteStringRefTag",
    "SdbGetLayerName",
    "SdbGetPermLayerKeys",
    "ApphelpCheckMsiPackage",
    "SdbOpenDatabase",
    "SE_COM_HookInterface",
    "SdbFindFirstTag",
    "SdbWriteStringTag",
    "SdbGetDatabaseMatch",
    "ApphelpCheckModule",
    "SE_CALLBACK_AddHook",
    "SE_COM_AddHook",
    "SdbCreateMsiTransformFile",
    "ApphelpCheckExe",
    "SdbFindNextDWORDIndexedTag",
    "SdbShowApphelpFromQuery",
    "ApphelpGetMsiProperties",
    "SdbApphelpNotifyEx2",
    "ApphelpFixMsiPackageExe",
    "SE_DllUnloaded",
    "SdbWriteWORDTag",
    "DWM8And16Bit_DirectDrawCreate_CallOut",
    "SdbFindNextStringIndexedTag",
    "SdbGetNthUserSdb",
    "ApphelpCreateAppcompatData",
    "DlSetStateEx",
    "SdbGUIDFromString",
    "SdbReadBYTETag",
    "SdbGetFileInfo",
    "SdbCreateHelpCenterURL",
    "SdbReleaseMatchingExe",
    "DWM8And16Bit_IsShimApplied_CallOut",
    "SdbGetLayerTagRef",
    "SdbOpenLocalDatabase",
    "ApphelpUpdateCacheEntry",
    "GetPermLayers",
    "ApphelpCheckRunAppEx",
    "SdbReleaseDatabase",
    "SdbQueryFlagInfo",
    "ApphelpFixMsiPackage",
    "SdbWriteStringTagDirect",
    "SdbGetTagFromTagID",
    "SdbStringReplace",
    "SdbQueryDataEx",
    "SE_GetProcAddressLoad",
    "SdbReadEntryInformation",
    "SdbGetAppPatchDir",
    "SE_GetMaxShimCount",
    "SE_LdrResolveDllName",
    "ApphelpParseModuleData",
    "SdbTagToString",
    "SdbWriteBYTETag",
    "SdbDumpSearchPathPartCaches",
    "SdbGetStringTagPtr",
    "SdbInitDatabaseEx",
    "SdbReadQWORDTagRef",
    "SdbGetStandardDatabaseGUID",
    "SE_CALLBACK_Lookup",
    "SdbGetNamedLayer",
    "SdbGetDatabaseGUID",
    "SdbGrabMatchingInfo",
    "SdbQueryName",
    "ApphelpCheckIME",
    "SE_InstallAfterInit",
    "SdbUnpackAppCompatData",
    "SdbQueryContext",
    "SdbRegisterDatabaseEx",
    "SdbCloseDatabase",
    "SdbOpenDbFromGuid",
    "SdbFreeFlagInfo",
    "DlGetStateEx",
    "SdbOpenApphelpInformationByID",
    "DWM8And16Bit_EnumDisplaySettingsExW_CallOut",
    "SdbReadDWORDTag",
    "SE_LookupAddress",
    "SdbSetImageType"
  ],
  "appidapi.dll": [
    "AppIDEncodeAttributeString",
    "AppIDGetAppxFileAttributes",
    "AppIDDecodeAttributeString",
    "AppIDReleaseAppxFileAttributes",
    "AppIDFreeAttributeString",
    "AppIDReleaseFileAttributes",
    "AppIDGetFileAttributes",
    "AppIDConstructAppxAttributes"
  ],
  "appidsvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "appinfo.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "appmgmts.dll": [
    "ReleaseAppCategoryInfoList",
    "CsUnregisterAppCategory",
    "CsGetClassStore",
    "IID_IClassAdmin",
    "CsGetClassStorePath",
    "CsGetClassAccess",
    "DllCanUnloadNow",
    "CsRegisterAppCategory",
    "CsCreateClassStore",
    "GenerateGroupPolicy",
    "CsEnumApps",
    "ReleasePackageInfo",
    "CsGetAppCategories",
    "DllGetClassObject",
    "CsServerGetClassStore",
    "ReleasePackageDetail",
    "ProcessGroupPolicyObjectsEx",
    "ServiceMain",
    "CsSetOptions"
  ],
  "appmgr.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GenerateScript"
  ],
  "apprepapi.dll": [
    "AppRepComputeImageHash",
    "RepInformUserAction",
    "AppRepFreeAttributeLib",
    "RepGetFileInformation",
    "AppRepComputeSignatureInfo",
    "RepGetFileReputation",
    "AppRepParameterCleanup",
    "AppRepInitializeAttributeLib"
  ],
  "apprepsync.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "appsruprov.dll": [
    "SruUninitializeProvider",
    "PsmQueryQuotaInformation",
    "DllMain",
    "SruInitializeProvider",
    "PsmQueryApplicationPerformanceInformation"
  ],
  "asferror.dll": "No exports",
  "aspnet_counters.dll": [
    "CollectStateCounters",
    "OpenVersion4Counters",
    "OpenGenericCounters",
    "CollectGenericCounters",
    "CloseVersion4Counters",
    "CloseStateCounters",
    "OpenStateCounters",
    "CollectVersion4Counters",
    "CloseGenericCounters"
  ],
  "asycfilt.dll": [
    "DllCanUnloadNow",
    "FilterCreateInstance"
  ],
  "atl.dll": [
    "AtlModuleRegisterServer",
    "AtlDevModeW2A",
    "AtlHiMetricToPixel",
    "AtlModuleUpdateRegistryFromResourceD",
    "AtlModuleRegisterClassObjects",
    "AtlModuleUnregisterServer",
    "AtlModuleLoadTypeLib",
    "AtlModuleRevokeClassObjects",
    "AtlComQIPtrAssign",
    "AtlAxCreateControl",
    "AtlGetObjectSourceInterface",
    "AtlModuleInit",
    "AtlIPersistPropertyBag_Save",
    "DllRegisterServer",
    "AtlIPersistStreamInit_Load",
    "DllUnregisterServer",
    "AtlIPersistStreamInit_GetSizeMax",
    "AtlAxGetControl",
    "AtlAxDialogBoxA",
    "DllCanUnloadNow",
    "AtlModuleAddTermFunc",
    "AtlModuleExtractCreateWndData",
    "AtlUnadvise",
    "AtlModuleRegisterWndClassInfoW",
    "AtlModuleTerm",
    "AtlIPersistStreamInit_Save",
    "AtlRegisterClassCategoriesHelper",
    "AtlComPtrAssign",
    "AtlAxDialogBoxW",
    "AtlAxCreateDialogW",
    "AtlModuleUnregisterServerEx",
    "AtlAdvise",
    "AtlInternalQueryInterface",
    "AtlAxCreateDialogA",
    "AtlFreeMarshalStream",
    "DllGetClassObject",
    "AtlSetErrorInfo2",
    "AtlAxWinInit",
    "AtlIPersistPropertyBag_Load",
    "AtlCreateTargetDC",
    "AtlGetVersion",
    "AtlAxGetHost",
    "AtlModuleGetClassObject",
    "AtlMarshalPtrInProc",
    "AtlWaitWithMessageLoop",
    "AtlModuleUnRegisterTypeLib",
    "AtlModuleAddCreateWndData",
    "AtlPixelToHiMetric",
    "AtlModuleRegisterTypeLib",
    "AtlSetErrorInfo",
    "AtlAxAttachControl",
    "AtlModuleRegisterWndClassInfoA",
    "AtlUnmarshalPtr",
    "AtlAxCreateControlEx"
  ],
  "audiodev.dll": [
    "_CDefFolderMenu_MergeMenu@16",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "_CIDLData_CreateFromIDArray@16",
    "DllUnregisterServer"
  ],
  "audiosrv.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "auditcse.dll": [
    "ProcessGroupPolicyExCap",
    "GenerateGroupPolicy",
    "GenerateGroupPolicyCap",
    "ProcessGroupPolicyEx"
  ],
  "auditpolmsg.dll": "No exports",
  "authfwcfg.dll": [
    "GetResourceString",
    "InitHelperDll"
  ],
  "authui.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "authz.dll": [
    "AuthzEnumerateSecurityEventSources",
    "AuthzInstallSecurityEventSource",
    "AuthziFreeAuditQueue",
    "AuthziInitializeContextFromSid",
    "AuthzModifySecurityAttributes",
    "AuthzModifyClaims",
    "AuthziInitializeAuditParamsWithRM",
    "AuthziInitializeAuditEvent",
    "AuthzUnregisterSecurityEventSource",
    "AuthziModifyAuditEventType",
    "AuthziModifySecurityAttributes",
    "AuthzOpenObjectAudit",
    "AuthzRegisterSecurityEventSource",
    "GetClaimDomainInfo",
    "AuthzInitializeObjectAccessAuditEvent2",
    "AuthziInitializeAuditEventType",
    "AuthzFreeResourceManager",
    "AuthziAccessCheckEx",
    "AuthzInitializeContextFromSid",
    "AuthzInitializeRemoteAccessCheck",
    "AuthzEvaluateSacl",
    "AuthzSetAppContainerInformation",
    "AuthzComputeEffectivePermission",
    "AuthzGetInformationFromContext",
    "AuthziSourceAudit",
    "InitializeClaimDictionary",
    "AuthzModifySids",
    "AuthzFreeContext",
    "AuthzInitializeObjectAccessAuditEvent",
    "AuthzFreeHandle",
    "AuthzInitializeResourceManager",
    "AuthzFreeCentralAccessPolicyCache",
    "AuthzReportSecurityEvent",
    "FreeClaimDefinitions",
    "AuthziCheckContextMembership",
    "FreeClaimDictionary",
    "AuthzCachedAccessCheck",
    "AuthzFreeAuditEvent",
    "AuthzInitializeCompoundContext",
    "AuthziFreeAuditEventType",
    "AuthziInitializeAuditParams",
    "AuthzRegisterCapChangeNotification",
    "AuthziModifyAuditEvent2",
    "GetDefaultCAPESecurityDescriptor",
    "AuthziGenerateAdminAlertAuditW",
    "AuthziInitializeAuditParamsFromArray",
    "GetClaimDefinitions",
    "AuthzInitializeRemoteResourceManager",
    "AuthzUnregisterCapChangeNotification",
    "AuthzAddSidsToContext",
    "AuthziQuerySecurityAttributes",
    "AuthzInitializeContextFromToken",
    "AuthziAllocateAuditParams",
    "AuthziFreeAuditParams",
    "AuthzInitializeResourceManagerEx",
    "RefreshClaimDictionary",
    "AuthzShutdownRemoteAccessCheck",
    "AuthzUninstallSecurityEventSource",
    "AuthziModifyAuditEvent",
    "AuthziModifyAuditQueue",
    "GenerateNewCAPID",
    "GetCentralAccessPoliciesByDN",
    "GetCentralAccessPoliciesByCapID",
    "AuthzReportSecurityEventFromParams",
    "AuthziInitializeAuditQueue",
    "AuthzAccessCheck",
    "AuthziLogAuditEvent",
    "AuthzInitializeContextFromAuthzContext"
  ],
  "autoplay.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "avicap32.dll": [
    "capCreateCaptureWindowA",
    "capGetDriverDescriptionA",
    "videoThunk32",
    "capCreateCaptureWindowW",
    "AppCleanup",
    "capGetDriverDescriptionW"
  ],
  "avifil32.dll": [
    "AVIStreamGetFrameClose",
    "AVIMakeStreamFromClipboard",
    "AVIPutFileOnClipboard",
    "AVIStreamInfoW",
    "EditStreamSetInfoA",
    "AVIClearClipboard",
    "AVIStreamOpenFromFileW",
    "EditStreamClone",
    "AVIFileRelease",
    "AVIFileOpenA",
    "AVIMakeCompressedStream",
    "AVIFileGetStream",
    "AVIGetFromClipboard",
    "AVIStreamInfoA",
    "EditStreamSetInfo",
    "AVIBuildFilterA",
    "AVIStreamCreate",
    "AVIFileOpen",
    "AVIFileAddRef",
    "AVIFileInfoW",
    "AVISaveW",
    "AVIFileInfo",
    "AVIStreamSetFormat",
    "AVIStreamInfo",
    "AVIStreamStart",
    "AVIStreamWrite",
    "AVIFileCreateStreamA",
    "AVIStreamEndStreaming",
    "IID_IAVIEditStream",
    "AVIFileExit",
    "AVIFileEndRecord",
    "DllCanUnloadNow",
    "AVIStreamSampleToTime",
    "EditStreamCut",
    "AVIStreamTimeToSample",
    "AVIStreamWriteData",
    "AVIBuildFilter",
    "AVISaveA",
    "AVISaveVW",
    "AVIStreamRead",
    "IID_IGetFrame",
    "AVIStreamRelease",
    "AVIStreamAddRef",
    "AVISaveOptions",
    "AVISaveOptionsFree",
    "AVIStreamFindSample",
    "AVIStreamGetFrameOpen",
    "AVIFileCreateStream",
    "AVIFileInit",
    "AVIFileReadData",
    "AVISaveV",
    "EditStreamPaste",
    "AVIStreamGetFrame",
    "AVIStreamReadData",
    "DllGetClassObject",
    "EditStreamCopy",
    "AVIMakeFileFromStreams",
    "AVIStreamOpenFromFileA",
    "AVIStreamBeginStreaming",
    "AVISave",
    "EditStreamSetName",
    "EditStreamSetNameW",
    "IID_IAVIFile",
    "AVIFileCreateStreamW",
    "AVIStreamOpenFromFile",
    "AVIBuildFilterW",
    "AVISaveVA",
    "AVIFileWriteData",
    "IID_IAVIStream",
    "AVIStreamLength",
    "CreateEditableStream",
    "AVIStreamReadFormat",
    "EditStreamSetInfoW",
    "AVIFileInfoA",
    "EditStreamSetNameA",
    "AVIFileOpenW"
  ],
  "avrt.dll": [
    "AvSetMmMaxThreadCharacteristicsW",
    "AvRtLeaveThreadOrderingGroup",
    "AvQuerySystemResponsiveness",
    "AvRtCreateThreadOrderingGroup",
    "AvSetMmMaxThreadCharacteristicsA",
    "AvSetMmThreadCharacteristicsA",
    "AvRtWaitOnThreadOrderingGroup",
    "AvRtDeleteThreadOrderingGroup",
    "AvRtCreateThreadOrderingGroupExW",
    "AvSetMmThreadPriority",
    "AvRtCreateThreadOrderingGroupExA",
    "AvSetMmThreadCharacteristicsW",
    "AvRtJoinThreadOrderingGroup",
    "AvRevertMmThreadCharacteristics"
  ],
  "azroles.dll": [
    "AzContextGetRoles",
    "AzContextAccessCheck",
    "AzScopeEnum",
    "AzApplicationEnum",
    "AzRemovePropertyItem",
    "AzInitializeContextFromName",
    "AzOperationOpen",
    "AzGroupCreate",
    "DllRegisterServer",
    "AzScopeCreate",
    "DllUnregisterServer",
    "AzGroupDelete",
    "AzInitialize",
    "AzContextGetAssignedScopesPage",
    "AzGroupEnum",
    "AzOperationEnum",
    "AzApplicationClose",
    "AzRoleCreate",
    "AzOperationDelete",
    "AzApplicationDelete",
    "DllCanUnloadNow",
    "AzUpdateCache",
    "AzOperationCreate",
    "AzCloseHandle",
    "AzRoleOpen",
    "AzRoleDelete",
    "AzApplicationOpen",
    "AzTaskEnum",
    "AzGroupOpen",
    "AzSetProperty",
    "AzApplicationCreate",
    "DllGetClassObject",
    "AzInitializeContextFromToken",
    "AzAddPropertyItem",
    "AzFreeMemory",
    "AzScopeOpen",
    "AzTaskOpen",
    "AzScopeDelete",
    "AzTaskCreate",
    "AzRoleEnum",
    "AzAuthorizationStoreDelete",
    "AzGetProperty",
    "AzTaskDelete",
    "AzSubmit"
  ],
  "azroleui.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "BCP47Langs.dll": [
    "public: long __thiscall Windows::Internal::CLanguage::TryFindFirstInList(unsigned short const *,enum Windows::Internal::BCP47_CLOSENESS_MEASURE,unsigned short const * *)const",
    "public: long __thiscall Windows::Internal::CLanguage::GetIso15924Code(unsigned int,unsigned short *,unsigned int *)const",
    "LanguageListAsHttpAcceptHeader",
    "Bcp47BufferFromLcid",
    "GetAvailableTransientLcidCount",
    "public: static long __stdcall Windows::Internal::CLanguagesListFactory::GetUserLanguages(class Windows::Internal::CLanguagesList const * *)",
    "private: __thiscall Windows::Internal::CLanguagesListFactory::CLanguagesListFactory(void)",
    "GetInputMethodOverrideForUser",
    "SetApplicationManifestLanguages",
    "GetApplicationManifestLanguages",
    "public: long __thiscall Windows::Internal::CLanguage::GetAbbreviation(unsigned int,unsigned short *,unsigned int *)const",
    "Bcp47FromHkl",
    "protected: class Windows::Internal::CLanguage & __thiscall Windows::Internal::CLanguage::operator=(class Windows::Internal::CLanguage const &)",
    "public: long __thiscall Windows::Internal::CLanguage::GetIso3166Code(unsigned int,unsigned short *,unsigned int *)const",
    "public: long __thiscall Windows::Internal::CLanguage::GetUN_M49Code(unsigned int,unsigned short *,unsigned int *)const",
    "LanguageListAsMuiForm",
    "public: static bool __stdcall Windows::Internal::CLanguage::IsValidTag(unsigned short const *)",
    "public: bool __thiscall Windows::Internal::CRegion::operator==(class Windows::Internal::CRegion const &)const",
    "Bcp47GetLanguageName",
    "public: __thiscall Windows::Internal::CLanguage::CLanguage(struct HKL__ *)",
    "FilterLanguageListOnInstalledMuiLanguages",
    "public: long __thiscall Windows::Internal::CLanguage::GetDirectionality(enum Windows::Internal::BCP47_SCRIPT_DIRECTIONALITY *)const",
    "public: __thiscall Windows::Internal::CLanguage::CLanguage(class Windows::Internal::CLanguage const &)",
    "public: bool __thiscall Windows::Internal::CLanguage::operator==(class Windows::Internal::CLanguage const &)const",
    "Bcp47GetUnIsoRegionCode",
    "Bcp47RequiresTransientLcid",
    "Bcp47GetIsoLanguageCode",
    "protected: long __thiscall Windows::Internal::CLanguage::Initialize(unsigned short const *)",
    "public: long __thiscall Windows::Internal::CLanguage::GetSubtagFields(enum Windows::Internal::BCP47_SUBTAG_FLAGS,unsigned short *)const",
    "GetUserLanguageInputMethodsForUser",
    "IsTransientLcid",
    "Bcp47Normalize",
    "LcidFromBcp47",
    "ClearUserDisplayLanguageOverride",
    "AppendUserLanguageInputMethods",
    "SetHttpAcceptLanguageOptOut",
    "Bcp47GetNlsForm",
    "public: virtual __thiscall Windows::Internal::CLanguage::~CLanguage(void)",
    "private: static long __stdcall Windows::Internal::CLanguagesListFactory::OpenAppKey(unsigned short const *,struct HKEY__ * *,void * *)",
    "public: static unsigned int __stdcall Windows::Internal::CRegion::GetCompositeRegionCode(unsigned int)",
    "protected: bool __thiscall Windows::Internal::CLanguage::ValidateTagAndInitialize(unsigned short const *)",
    "Bcp47FromLcid",
    "Bcp47IsValid",
    "Bcp47GetAbbreviation",
    "public: __thiscall Windows::Internal::CLanguage::operator unsigned __int64(void)const",
    "public: __thiscall Windows::Internal::CRegion::~CRegion(void)",
    "AppendUserLanguageInternal",
    "protected: bool __thiscall Windows::Internal::CLanguage::ParseTag(unsigned short const *)",
    "SetInputMethodOverride",
    "public: bool __thiscall Windows::Internal::CLanguage::IsWellFormedTag(void)const",
    "Bcp47GetSubtagMapInternal",
    "private: static long __stdcall Windows::Internal::CLanguagesListFactory::LanguageListToStringWrapper(class Windows::Internal::CLanguagesList const *,enum Windows::Internal::BCP47_SUBTAG_FLAGS,unsigned int *,unsigned short * *)",
    "public: __thiscall Windows::Internal::CLanguage::CLanguage(unsigned short const *)",
    "public: long __thiscall Windows::Internal::CLanguage::Compare(unsigned short const *,double *)const",
    "GetUserLanguagesForUser",
    "GetHttpAcceptLanguageOptOut",
    "Bcp47IsInstalledAndLicensedAsSystemLanguage",
    "private: __thiscall Windows::Internal::CLanguagesListFactory::~CLanguagesListFactory(void)",
    "GetPendingUserDisplayLanguage",
    "GetUserDisplayLanguageOverride",
    "public: bool __thiscall Windows::Internal::CLanguage::IsValidTag(void)const",
    "GetAppropriateUserLocaleForUserLanguages",
    "Bcp47FromCompactTagInternal",
    "RemoveUserLanguageInputMethods",
    "SetUserLanguagesInternal",
    "public: static long __stdcall Windows::Internal::CLanguagesListFactory::GetApplicationLanguagesAsHTTPAccept(unsigned short const *,unsigned short * *)",
    "public: unsigned int __thiscall Windows::Internal::CRegion::GetCompositeRegionCode(void)const",
    "public: __thiscall Windows::Internal::CLanguage::CLanguage(void)",
    "public: static bool __stdcall Windows::Internal::CLanguage::IsWellFormedTag(unsigned short const *)",
    "ClearApplicationLanguageOverride",
    "public: long __thiscall Windows::Internal::CLanguage::CheckLanguageRegionAffinity(class Windows::Internal::CLanguage const &,int *)const",
    "SetApplicationLanguageOverride",
    "public: static long __stdcall Windows::Internal::CLanguagesListFactory::GetApplicationLanguagesAsMUI(unsigned short const *,bool,unsigned short * *)",
    "public: static long __stdcall Windows::Internal::CLanguagesListFactory::SetApplicationManifestLanguages(unsigned short const *,class Windows::Internal::CLanguagesList const *)",
    "public: __thiscall Windows::Internal::CRegion::CRegion(unsigned int)",
    "public: __thiscall Windows::Internal::CRegion::CRegion(unsigned short const *)",
    "public: static long __stdcall Windows::Internal::CLanguagesListFactory::SetApplicationLanguageOverride(unsigned short const *,class Windows::Internal::CLanguage const *)",
    "Bcp47GetMuiForm",
    "public: class Windows::Internal::CLanguagesListFactory & __thiscall Windows::Internal::CLanguagesListFactory::operator=(class Windows::Internal::CLanguagesListFactory const &)",
    "public: long __thiscall Windows::Internal::CLanguage::GetSubtagFields(enum Windows::Internal::BCP47_SUBTAG_FLAGS,unsigned int,unsigned short *,unsigned int *)const",
    "GetApplicationLanguages",
    "public: static long __stdcall Windows::Internal::CLanguagesListFactory::GetApplicationLanguages(unsigned short const *,class Windows::Internal::CLanguagesList const * *)",
    "public: __thiscall Windows::Internal::CLanguage::operator struct Windows::Internal::Bcp47TagSubtagsInfo(void)const",
    "public: static long __stdcall Windows::Internal::CLanguagesListFactory::GetApplicationLanguageOverride(unsigned short const *,unsigned short *)",
    "public: long __thiscall Windows::Internal::CRegion::Compare(class Windows::Internal::CRegion const &,double *)const",
    "Bcp47IsWellFormed",
    "GetUserLocaleFromLanguageProfileOptOut",
    "ClearHttpAcceptLanguageOptOut",
    "CompactTagFromBcp47Internal",
    "public: bool __thiscall Windows::Internal::CRegion::IsValidRegionTag(void)",
    "public: static long __stdcall Windows::Internal::CLanguagesList::CreateInstance(unsigned short const *,class Windows::Internal::CLanguagesList const * *)",
    "public: bool __thiscall Windows::Internal::CRegion::operator==(unsigned int)const",
    "public: class Windows::Internal::CRegion & __thiscall Windows::Internal::CRegion::operator=(class Windows::Internal::CRegion const &)",
    "GetApplicationLayoutDirection",
    "public: static bool __stdcall Windows::Internal::CRegion::IsValidRegionTag(unsigned short const *)",
    "protected: bool __thiscall Windows::Internal::CLanguage::ValidateTag(unsigned short const *)",
    "SetUserLanguageInputMethods",
    "ClearApplicationManifestLanguages",
    "private: static unsigned int __stdcall Windows::Internal::CRegion::TryFindRegionId(unsigned short const *)",
    "public: bool __thiscall Windows::Internal::CLanguage::IsPseudoLanguage(void)const",
    "RemoveInputsForAllLanguagesInternal",
    "public: long __thiscall Windows::Internal::CLanguage::FindClosestInList(unsigned short const *,enum Windows::Internal::BCP47_COMPARISON_ALGORITHM,unsigned short const * *,double *)const",
    "public: enum Windows::Internal::BCP47_SUBTAG_FLAGS __thiscall Windows::Internal::CLanguage::GetSubtagsMap(void)const",
    "GetUserLanguageInputMethods",
    "GetApplicationLanguageOverride",
    "ClearUserLocaleFromLanguageProfileOptOut",
    "const Windows::Internal::CLanguage::`vftable'",
    "SetUserDisplayLanguageOverride",
    "GetSerializedUserLanguageProfile",
    "public: long __thiscall Windows::Internal::CLanguage::GetIso639Code(unsigned int,unsigned short *,unsigned int *)const",
    "AppendUserLanguages",
    "GetUserLanguages",
    "public: long __thiscall Windows::Internal::CLanguage::Compare(class Windows::Internal::CLanguage const &,double *)const",
    "Bcp47GetDistance",
    "Bcp47GetDirectionality",
    "Bcp47GetIsoScriptCode",
    "SetUserLocaleFromLanguageProfileOptOut",
    "public: __thiscall Windows::Internal::CLanguage::CLanguage(unsigned __int64)",
    "private: static void __stdcall Windows::Internal::CLanguagesListFactory::CloseAppKey(unsigned short const *,struct HKEY__ *,void *)"
  ],
  "BFE.DLL": [
    "BfeServiceMain",
    "BfeGetDirectDispatchTable",
    "SvchostPushServiceGlobals",
    "BfeOnServiceStartTypeChange"
  ],
  "BOOTVID.DLL": [
    "VidSetScrollRegion",
    "VidDisplayString",
    "VidSolidColorFill",
    "VidDisplayStringXY",
    "VidBitBltEx",
    "VidCleanUp",
    "VidBufferToScreenBlt",
    "VidScreenToBufferBlt",
    "VidSetTextColor",
    "VidInitialize",
    "VidBitBlt",
    "VidResetDisplay"
  ],
  "BdeHdCfgLib.dll": [
    "BdeCfgFindRecoveryPartitionGPT",
    "private: long __thiscall CDriveConfiguration::DetectTargetDrive(struct IVdsVolume *)",
    "BdeCfgIsWinREOnOSVolume",
    "public: unsigned long __thiscall CDriveConfiguration::GetStepExecutionOrder(enum _BDECFG_STEP_ID)",
    "BdeCfgDisableWinRE",
    "public: virtual __thiscall CBcdStore::~CBcdStore(void)",
    "public: class CBdeCfgLibraryLoader & __thiscall CBdeCfgLibraryLoader::operator=(class CBdeCfgLibraryLoader const &)",
    "public: class CBcdStore & __thiscall CBcdStore::operator=(class CBcdStore const &)",
    "public: static long __stdcall CBcdStore::CreateClass(class CBcdStore * *)",
    "public: long __thiscall CBdeCfgLibraryLoader::Load(void)",
    "public: long __thiscall CDriveConfiguration::IsMergeTargetWinRE(int *)",
    "private: long __thiscall CBdeCfgLibraryLoader::InitializeAndHoldLibrary(void)",
    "public: bool __thiscall CDriveConfiguration::ActionRequiresMerge(void)",
    "public: long __thiscall CBcdStore::RemapObjectDevices(unsigned short const *,unsigned short const *)",
    "public: unsigned long __thiscall CDriveConfiguration::GetTargetPartitionNumber(void)",
    "BdeCfgLogFoundUnallocatedExtent",
    "protected: virtual __thiscall CBcdWmiWrapper::~CBcdWmiWrapper(void)",
    "public: bool __thiscall CDriveConfiguration::Initialized(void)",
    "BdeCfgCalculateSizeRequirements",
    "public: long __thiscall CDriveConfiguration::QueryStepPercentComplete(unsigned long *)",
    "BdeCfgLogError",
    "BdeCfgCanCreateActivePartOnDisk",
    "BdeCfgLogCommandLineParams",
    "BdeCfgGetVolumeDriveLetter",
    "BdeCfgIsDiskConfiguredForBitLocker",
    "BdeCfgLogEnumExtent",
    "public: enum BDECFG_ACTION_TYPE __thiscall CDriveConfiguration::GetActionType(void)",
    "public: void __thiscall CBdeCfgLibraryLoader::Unload(void)",
    "public: long __thiscall CBcdStore::ImportSystemStore(unsigned short const *)",
    "BdeCfgFindLargestUnallocatedExtent",
    "BdeCfgGetVolumeDisk",
    "BdeCfgShrinkSimpleVolume",
    "const CBcdWmiWrapper::`vftable'",
    "private: long __thiscall CDriveConfiguration::Thread_ConfigureDrive(void)",
    "private: static void __cdecl CBdeCfgLibraryLoader::InitializeAndHoldLibraryEntry(void *)",
    "protected: long __thiscall CBcdWmiWrapper::InitializeClass(unsigned short const *)",
    "protected: __thiscall CBcdStore::CBcdStore(void)",
    "BdeCfgInitialize",
    "public: __thiscall CBcdWmiWrapper::CBcdWmiWrapper(class CBcdWmiWrapper const &)",
    "public: unsigned short __thiscall CDriveConfiguration::GetNewDriveLetter(void)",
    "private: long __thiscall CDriveConfiguration::CancelConfiguration_Thread(void)",
    "BdeCfgLogFailedTarget",
    "private: long __thiscall CDriveConfiguration::Thread_Initialize(void)",
    "BdeCfgLogCandidateDrive",
    "BdeCfgLogWarning",
    "BdeCfgUninitialize",
    "BdeCfgFindVolumeWithName",
    "public: long __thiscall CBcdStore::OpenStore(unsigned short const *,class CBcdStore * *)",
    "BdeCfgGetDeviceNameFromVolume",
    "BdeCfgGetNtfsVolumeSize",
    "public: class CDriveConfiguration & __thiscall CDriveConfiguration::operator=(class CDriveConfiguration const &)",
    "BdeCfgFindCandidateVolumes",
    "private: void __thiscall CDriveConfiguration::Cleanup(void)",
    "BdeCfgLoadResourceString",
    "private: long __thiscall CDriveConfiguration::InitializeFromParams(struct IVdsVolume *)",
    "public: unsigned long __thiscall CDriveConfiguration::GetTargetDiskNumber(void)",
    "protected: long __thiscall CBcdWmiWrapper::CreateInParams(unsigned short const *,struct IWbemClassObject * *)",
    "BdeCfgGetVolumeFromId",
    "public: long __thiscall CDriveConfiguration::GetConfigurationResult(void)",
    "BdeCfgMoveWinRE",
    "protected: struct IWbemServices * __thiscall CBcdWmiWrapper::GetNamespace(void)",
    "public: long __thiscall CDriveConfiguration::ConfigureDrive(void)",
    "BdeCfgDetectWinRESize",
    "private: long __thiscall CBdeCfgLibraryLoader::InitializeAndHoldLibrary_Thread(void)",
    "protected: __thiscall CBcdWmiWrapper::CBcdWmiWrapper(void)",
    "public: bool __thiscall CDriveConfiguration::ActionRequiresCreate(void)",
    "BdeCfgCreateWinREPartitionGPT",
    "BdeCfgFindGPTRecoveryPartitionCandidate",
    "public: class CBcdWmiWrapper & __thiscall CBcdWmiWrapper::operator=(class CBcdWmiWrapper const &)",
    "public: unsigned long __thiscall CDriveConfiguration::GetNumberOfSteps(void)",
    "public: bool __thiscall CBdeCfgLibraryLoader::LibraryLoaded(void)",
    "BdeCfgGetBootVolume",
    "private: long __thiscall CDriveConfiguration::SetConfigurationStep(enum _BDECFG_STEP_ID)",
    "BdeCfgIsElevated",
    "BdeCfgLogDetectedWinRE",
    "private: static void __cdecl CDriveConfiguration::DriveConfigurationEntry(void *)",
    "public: long __thiscall CDriveConfiguration::GetInitializationResult(void)",
    "BdeCfgCountGPTPartitions",
    "BdeCfgRestart",
    "BdeCfgLogClose",
    "public: __thiscall CDriveConfiguration::CDriveConfiguration(void)",
    "protected: long __thiscall CBcdWmiWrapper::ExecuteMethod(unsigned short const *,struct IWbemClassObject *,struct IWbemClassObject * *)",
    "private: long __thiscall CBcdWmiWrapper::InitializeNamespace(void)",
    "public: unsigned short __thiscall CDriveConfiguration::GetTargetDriveLetter(void)",
    "public: long __thiscall CDriveConfiguration::CancelConfiguration(void)",
    "protected: long __thiscall CBcdWmiWrapper::InitializeInstance(struct IWbemServices *,struct IWbemClassObject *)",
    "BdeCfgGetMaxShrinkSize",
    "private: static void __cdecl CDriveConfiguration::InitializeEntry(void *)",
    "BdeCfgLoadErrorString",
    "BdeCfgFindBasicVolumeExtent",
    "public: unsigned __int64 __thiscall CDriveConfiguration::GetShrinkSize(void)",
    "public: bool __thiscall CDriveConfiguration::ActionRequiresShrink(void)",
    "BdeCfgCleanupOldBootFiles",
    "const CBcdStore::`vftable'",
    "public: long __thiscall CBcdStore::ExportSystemStore(unsigned short const *)",
    "public: long __thiscall CDriveConfiguration::Initialize(struct _BDECFG_PARAMS const *,struct _BDECFG_SIZE_REQUIREMENTS * const,class IConfigurationProgress *)",
    "public: __thiscall CBcdStore::CBcdStore(class CBcdStore const &)",
    "BdeCfgCheckAndGetBootVolume",
    "public: __thiscall CBdeCfgLibraryLoader::~CBdeCfgLibraryLoader(void)",
    "BdeCfgLogInit",
    "BdeCfgFindVolumeWithProp",
    "public: __thiscall CBdeCfgLibraryLoader::CBdeCfgLibraryLoader(void)",
    "BdeCfgSecureFormatPartition",
    "BdeCfgCheckGPTRecoveryPartition",
    "public: __thiscall CDriveConfiguration::~CDriveConfiguration(void)",
    "private: static void __cdecl CDriveConfiguration::CancelConfigurationEntry(void *)",
    "BdeCfgDetectWinREVolumeName",
    "BdeCfgCheckVolumeAsCandidate",
    "public: unsigned __int64 __thiscall CDriveConfiguration::GetTargetPartitionSize(void)",
    "BdeCfgMigrateBootHive"
  ],
  "BioCredProv.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "BlbEvents.dll": "No exports",
  "BluetoothApis.dll": [
    "BluetoothDisconnectDevice",
    "BluetoothRegisterForAuthentication",
    "BluetoothGATTBeginReliableWrite",
    "BluetoothSendAuthenticationResponseEx",
    "BluetoothFindNextService",
    "BluetoothSdpGetContainerElementData",
    "BthpCleanupDeviceLocalServices",
    "BluetoothGATTGetServices",
    "BluetoothEnumerateLocalServices",
    "BluetoothGATTGetDescriptors",
    "BthpRegisterForAuthentication",
    "BluetoothEnableIncomingConnections",
    "BluetoothGATTRegisterEvent",
    "BluetoothFindFirstServiceEx",
    "BluetoothFindNextBrowseGroup",
    "BthpInnerRecord",
    "BluetoothGATTSetCharacteristicValue",
    "BthpCleanupLEDeviceNodes",
    "BluetoothEnumerateInstalledServicesEx",
    "BluetoothFindProtocolEntryClose",
    "BluetoothIsConnectable",
    "BluetoothGATTUnregisterEvent",
    "BthpIsRadioSoftwareEnabled",
    "BluetoothFindFirstProtocolEntry",
    "BluetoothFindFirstDevice",
    "BthpMapStatusToErr",
    "BthpSetServiceStateEx",
    "BluetoothUnregisterAuthentication",
    "BluetoothGATTGetDescriptorValue",
    "BluetoothFindFirstService",
    "FindNextOpenVCOMPort",
    "InstallIncomingComPort",
    "BluetoothSetServiceStateEx",
    "BluetoothGetRadioInfo",
    "BluetoothIsVersionAvailable",
    "BluetoothFindFirstProfileDescriptor",
    "BluetoothSendAuthenticationResponse",
    "BthpIsDiscoverable",
    "BluetoothGATTGetCharacteristicValue",
    "BluetoothFindDeviceClose",
    "BluetoothFindNextProfileDescriptor",
    "BluetoothGetLocalServiceInfo",
    "BthpCleanupDeviceRemoteServices",
    "ShouldForceAuthentication",
    "BluetoothFindNextRadio",
    "BluetoothGATTGetCharacteristics",
    "BluetoothGATTGetIncludedServices",
    "BluetoothIsDiscoverable",
    "BthpSetServiceState",
    "BthpEnableConnectableAndDiscoverable",
    "BluetoothGATTEndReliableWrite",
    "BluetoothFindProtocolDescriptorStackClose",
    "BthpTranspose16Bits",
    "BluetoothSdpGetString",
    "BthpFindPnpInfo",
    "BluetoothFindFirstBrowseGroup",
    "BluetoothSetLocalServiceInfo",
    "BluetoothFindNextDevice",
    "BthpIsDiscoverableByDefault",
    "BluetoothSetServiceState",
    "BthpIsTopOfServiceGroup",
    "BluetoothFindFirstRadio",
    "BluetoothAddressToString",
    "BluetoothFindBrowseGroupClose",
    "BthpCheckForUnsupportedGuid",
    "BluetoothEnableDiscovery",
    "BluetoothGATTAbortReliableWrite",
    "BluetoothFindNextProtocolEntry",
    "BthpTranspose32Bits",
    "BluetoothSdpGetAttributeValue",
    "BluetoothFindNextProtocolDescriptorStack",
    "BthpTransposeAndExtendBytes",
    "BluetoothFindFirstClassId",
    "DllCanUnloadNow",
    "BluetoothGATTSetDescriptorValue",
    "BluetoothRemoveDevice",
    "BluetoothFindClassIdClose",
    "BluetoothFindRadioClose",
    "BluetoothEnumerateInstalledServices",
    "BthpGATTCloseSession",
    "BluetoothFindFirstProtocolDescriptorStack",
    "BluetoothFindProfileDescriptorClose",
    "BthpEnableAllServices",
    "BluetoothGetServicePnpInstance",
    "BthpIsConnectableByDefault",
    "BluetoothGetDeviceInfo",
    "BluetoothUpdateDeviceRecord",
    "BthpEnableRadioSoftware",
    "BluetoothSdpEnumAttributes",
    "BluetoothSdpGetElementData",
    "BluetoothFindServiceClose",
    "BluetoothRegisterForAuthenticationEx",
    "BluetoothFindNextClassId",
    "BthpIsBluetoothServiceRunning",
    "BthpNextRecord"
  ],
  "BootMenuUX.dll": [
    "InitializeSRTSyncInterface",
    "CreateFactorySystemResetButton",
    "CreateOneMinuteTimeoutAction",
    "CreateClearWallpaperPage",
    "CreateDefaultOSButtonCollection",
    "CreateKeyboardLayoutButtonCollection",
    "CreateZeroSecondTimeoutAction",
    "CreateDeviceListButton",
    "CreateOSListButton",
    "CreateTopLevelRecoveryToolsButtonCollection",
    "UtilBcdCloseSystemStore",
    "CreatePasswordButton",
    "CreateTenSecondTimeoutAction",
    "CreatePBRfactoryResetBareMetalDisabled",
    "CreateWinReTargetOSButtonCollection",
    "CreateFirmwareSettingsButton",
    "CreateBasicSystemResetLaunchPage",
    "CreateBootableDeviceButtonCollection",
    "CreateUserNameButtonCollection",
    "CreateTopLevelRecoveryToolsPage",
    "CreateShutdownButton",
    "CreateFiveSecondTimeoutAction",
    "CreatePBRfactoryResetOsOnlyButton",
    "CreatePBRCancelButton",
    "CreateBootableOSButtonCollection",
    "InitializeSyncInterface",
    "CreateFiveMinuteTimeoutAction",
    "CreatePBRfactoryResetBareMetalEnabled",
    "CreatePBRfactoryResetDataEraseEnabled",
    "CreateCSRTFinalPage",
    "CreateAdvancedOptionsButton",
    "CreateBlackWallpaperButton",
    "CreatePBRFinalPage",
    "CreateRecoveryToolsListButton",
    "CreateRestartButton",
    "CreateDefaultOSListButton",
    "CreatePBRfactoryResetAllVolumesButton",
    "CreateBitlockerLandingPage",
    "CreateWinReTargetOSPage",
    "CreateFactorySystemResetLaunchPage",
    "CreateSelectOSPage",
    "CreateBasicSystemResetButton",
    "CreateSetWallpaperPage",
    "CreateLanguageButtonCollection",
    "CreateFactoryResetLandingPage",
    "CreateAdvancedStartupLaunchPage",
    "InitializePasswordDatabase",
    "CreateThirtySecondTimeoutAction",
    "CreateUserSelectionPage",
    "CreateFactoryResetFinalChecksPage",
    "CreateAdvancedRecoveryToolsButtonCollection",
    "CreateAdvancedStartupButton",
    "CreateDefaultOSButton",
    "CreateBasicResetFinalChecksPage",
    "CreatePBRfactoryResetDataEraseDisabled",
    "CreateSkippableSelectOSPage",
    "CreatePasswordPage"
  ],
  "BthHFSrv.dll": [
    "ServiceMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "BthMtpContextHandler.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "BthRadioMedia.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "BthSQM.dll": [
    "BthSqmRunTask",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "basecsp.dll": [
    "CPImportKey",
    "CPGenRandom",
    "CPSetKeyParam",
    "CPGetHashParam",
    "CPDestroyHash",
    "CPDuplicateKey",
    "CPSignHash",
    "CPCreateHash",
    "DllRegisterServer",
    "CPReleaseContext",
    "CPDuplicateHash",
    "CPGetProvParam",
    "DllUnregisterServer",
    "CPSetHashParam",
    "CPExportKey",
    "CPSetProvParam",
    "CPGetKeyParam",
    "CPHashSessionKey",
    "CPDeriveKey",
    "CPAcquireContext",
    "CPDestroyKey",
    "CPVerifySignature",
    "CPGetUserKey",
    "CPGenKey",
    "CPEncrypt",
    "CPDecrypt",
    "CPAcquireContextW",
    "CPHashData"
  ],
  "basesrv.dll": [
    "BaseSetProcessCreateNotify",
    "ServerDllInitialization",
    "BaseSrvNlsLogon",
    "BaseSrvNlsUpdateRegistryCache",
    "BaseSrvRegisterSxS",
    "BaseGetProcessCrtlRoutine"
  ],
  "batmeter.dll": [
    "SubscribeBatteryUpdateNotification",
    "SetBatteryLevel",
    "BatMeterOnDeviceChange",
    "CleanupBatteryData",
    "GetBatteryImmersiveIcon",
    "IsBatteryHealthWarningEnabled",
    "SetBatteryWorkingState",
    "QueryBatteryData",
    "IsBatteryLevelLow",
    "IsBatteryLevelReserve",
    "IsBatteryBad",
    "BatMeterIconThemeReset",
    "PowerCapabilities",
    "GetBatteryStatusText",
    "IsBatteryLevelCritical",
    "GetBatteryWorkingState",
    "GetBatMeterIconAnimationState",
    "GetBatMeterIconAnimationUpdate",
    "GetBatteryInfo",
    "CreateBatteryData",
    "SetBatteryHealthWarningState",
    "UpdateBatteryDataAsync",
    "GetBatMeterIconAnimationTimeDelay",
    "BatMeterIconAnimationReset",
    "UpdateBatteryData",
    "UnsubscribeBatteryUpdateNotification",
    "GetBatteryCapacityInfo",
    "GetBatteryDetails"
  ],
  "bcdprov.dll": [
    "DllMain",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "bcdsrv.dll": [
    "DllMain",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "bcrypt.dll": [
    "BCryptAddContextFunctionProvider",
    "BCryptImportKeyPair",
    "BCryptFreeBuffer",
    "BCryptFinishHash",
    "BCryptUnregisterConfigChangeNotify",
    "BCryptQueryContextFunctionConfiguration",
    "BCryptDuplicateHash",
    "BCryptEnumProviders",
    "BCryptConfigureContextFunction",
    "BCryptDestroySecret",
    "BCryptExportKey",
    "BCryptSetAuditingInterface",
    "BCryptGenerateSymmetricKey",
    "BCryptOpenAlgorithmProvider",
    "BCryptGetProperty",
    "BCryptQueryProviderRegistration",
    "BCryptKeyDerivation",
    "BCryptDestroyHash",
    "BCryptEnumContextFunctionProviders",
    "BCryptQueryContextConfiguration",
    "BCryptAddContextFunction",
    "BCryptConfigureContext",
    "BCryptSecretAgreement",
    "BCryptEnumAlgorithms",
    "BCryptDeriveKeyPBKDF2",
    "BCryptRemoveContextFunction",
    "BCryptGenRandom",
    "BCryptSignHash",
    "BCryptDecrypt",
    "BCryptCloseAlgorithmProvider",
    "BCryptGetFipsAlgorithmMode",
    "BCryptRegisterConfigChangeNotify",
    "BCryptUnregisterProvider",
    "BCryptResolveProviders",
    "BCryptSetContextFunctionProperty",
    "BCryptCreateContext",
    "BCryptDeriveKey",
    "BCryptCreateHash",
    "BCryptDeleteContext",
    "BCryptEnumRegisteredProviders",
    "BCryptEncrypt",
    "BCryptEnumContextFunctions",
    "BCryptEnumContexts",
    "BCryptFinalizeKeyPair",
    "BCryptDuplicateKey",
    "BCryptGenerateKeyPair",
    "BCryptHashData",
    "BCryptQueryContextFunctionProperty",
    "BCryptVerifySignature",
    "BCryptRemoveContextFunctionProvider",
    "BCryptImportKey",
    "BCryptSetProperty",
    "BCryptRegisterProvider",
    "BCryptDeriveKeyCapi",
    "BCryptDestroyKey"
  ],
  "bcryptprimitives.dll": [
    "GetCipherInterface",
    "GetSignatureInterface",
    "GetSecretAgreementInterface",
    "GetHashInterface",
    "ProcessPrng",
    "GetAsymmetricEncryptionInterface",
    "GetRngInterface",
    "GetKeyDerivationInterface"
  ],
  "bderepair.dll": [
    "FveCreateRestoreContext",
    "FveGetConvLogOffset",
    "FveGetInterruptedRangeOffset",
    "FveAuthWithClearKey",
    "FveAuthWithKey",
    "FveLoadConvLog",
    "FveSupplyInformationBlock",
    "FveSupplyWatermark",
    "FveDecryptData",
    "FveRecoverBlock",
    "FveAuthWithPassphraseW",
    "FveAuthWithPasswordW",
    "FveDestroyRestoreContext",
    "FveGetMetadataFromRestoreContext",
    "FveSupplyKeyPackage"
  ],
  "bdesvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "bdeui.dll": [
    "private: long __thiscall BuiVolume::ProxyGetProcessId(unsigned long *)",
    "public: long __thiscall BuiVolume::GetDescription(unsigned short * *)",
    "bool __stdcall BuisIsFipsEnabled(void)",
    "public: long __thiscall BuiVolume::ImplicitPauseConversion(void)",
    "private: long __thiscall BuiVolume::ProxyUnlockVolumeWithPassword(unsigned short const *,int *)",
    "private: long __thiscall BuiVolume::ProxyIsAutoUnlockEnabled(void)",
    "public: long __thiscall BuiVolume::ServiceDiscoveryVolume(void)",
    "private: long __thiscall BuiVolume::BasicDispatch(long,unsigned short const *,unsigned short * *)",
    "private: long __thiscall BuiVolume::ProxyAreVolumesBound(void)",
    "private: long __thiscall BuiVolume::ProxyLaunchWizard(unsigned short)",
    "public: double __thiscall BuiVolume::GetConvertedPercent(void)const",
    "public: long __thiscall BuiVolume::NeedsDiscoveryVolumeUpdate(int *)",
    "private: long __thiscall BuiVolume::Dispatch(long,struct tagDISPPARAMS *,struct tagVARIANT *)",
    "public: __thiscall VolumeFveStatus::VolumeFveStatus(unsigned long,long,enum _FVE_WIPING_STATE)",
    "private: long __thiscall BuiVolume::Dispatch(long,struct tagDISPPARAMS *,long *)",
    "public: bool __thiscall VolumeFveStatus::HasPassphraseProtector(void)const",
    "public: bool __thiscall VolumeFveStatus::IsSecure(void)const",
    "private: long __thiscall BuiVolume::BasicDispatch(long,unsigned short const *,unsigned short const *,int *,long *)",
    "public: bool __thiscall BuiVolume::IsFveNotifyNecessary(void)const",
    "public: bool __thiscall BuiVolume::CanBeResumed(void)const",
    "public: long __thiscall BuiVolume::UnlockWithSmartCard(struct HWND__ *,int *)",
    "public: bool __thiscall VolumeFveStatus::IsLocked(void)const",
    "public: bool __thiscall VolumeFveStatus::IsWiping(void)const",
    "private: long __thiscall BuiVolume::FormatNameAndMountPoint(void)",
    "protected: __thiscall VolumeFveStatus::VolumeFveStatus(void)",
    "public: long __thiscall BuiVolume::PauseConversion(void)",
    "public: long __thiscall BuiVolume::UnlockWithPassword(unsigned short const *,int *)",
    "public: bool __thiscall VolumeFveStatus::IsEncrypted(void)const",
    "public: long __thiscall BuiVolume::RemovePassphrase(void)",
    "public: bool __thiscall VolumeFveStatus::IsDecrypted(void)const",
    "public: bool __thiscall VolumeFveStatus::HasRecoveryData(void)const",
    "private: long __thiscall BuiVolume::BasicDispatch(long,unsigned short const *,int *,long *)",
    "private: long __thiscall BuiVolume::ProxyGetPasswordId(unsigned short * *)",
    "public: long __thiscall BuiVolume::UnlockWithPassphrase(unsigned short const *,int *)",
    "public: double __thiscall BuiVolume::GetWipedPercent(void)const",
    "public: long __thiscall BuiVolume::AttemptAutoUnlock(void)",
    "public: void __thiscall BuiVolume::SetProxyObject(struct IDispatch *)",
    "public: bool __thiscall VolumeFveStatus::IsOsVolume(void)const",
    "public: bool __thiscall VolumeFveStatus::IsCsvMetadataVolume(void)const",
    "public: __thiscall BuiVolume::~BuiVolume(void)",
    "public: bool __thiscall VolumeFveStatus::IsEncrypting(void)const",
    "long __stdcall BuisLaunchHelp(struct _GUID const &)",
    "private: long __thiscall BuiVolume::ProxyLaunchUpdate(void)",
    "private: long __thiscall BuiVolume::ProxyRemovePassphrase(void)",
    "public: long __thiscall BuiVolume::Disable(void)",
    "public: class BuiVolume & __thiscall BuiVolume::operator=(class BuiVolume const &)",
    "private: long __thiscall BuiVolume::ProxyUnlockVolumeWithSmartCard(struct HWND__ *,int *)",
    "public: long __thiscall VolumeFveStatus::GetLastConvertStatus(void)const",
    "public: bool __thiscall VolumeFveStatus::IsRoamingDevice(void)const",
    "public: long __thiscall BuiVolume::AddSmartCard(struct HWND__ *)",
    "private: long __thiscall BuiVolume::ProxyUnlockVolumeWithKey(unsigned short const *,int *)",
    "private: long __thiscall BuiVolume::ProxyEnableAutoUnlock(void)",
    "private: bool __thiscall BuiVolume::CanRefreshStatus(void)const",
    "public: bool __thiscall VolumeFveStatus::IsDisabled(void)const",
    "long __stdcall BuisIsHardwareReadyForConversion(void)",
    "public: long __thiscall BuiVolume::IsCurrentPINEnhanced(int *)",
    "public: bool __thiscall VolumeFveStatus::IsConverting(void)const",
    "public: bool __thiscall VolumeFveStatus::HasRecoveryPassword(void)const",
    "public: unsigned long __thiscall VolumeFveStatus::GetStatusFlags(void)const",
    "public: long __thiscall BuiVolume::GetPasswordId(unsigned short * *)",
    "public: long __thiscall BuiVolume::RemoveSmartCard(bool)",
    "public: long __thiscall BuiVolume::UnlockWithKey(unsigned short const *,int *)",
    "private: long __thiscall BuiVolume::ProxyDecrypt(void)",
    "public: bool __thiscall BuiVolume::IsAutoUnlockEnabled(void)",
    "public: long __thiscall BuiVolume::DisableAutoUnlock(void)",
    "public: static void __stdcall BuiVolume::DeleteVolumeList(struct _BuiVolumeNode * *)",
    "private: long __thiscall BuiVolume::BasicDispatch(long,unsigned short const *,long *)",
    "public: long __thiscall BuiVolume::Decrypt(void)",
    "long __stdcall BuisDetectExistingWizard(unsigned short const *,unsigned short const *,unsigned short const *,void * *)",
    "public: bool __thiscall BuiVolume::ManagementRequiresElevation(void)const",
    "public: class VolumeFveStatus & __thiscall VolumeFveStatus::operator=(class VolumeFveStatus const &)",
    "public: unsigned long __thiscall BuiVolume::GetWipeCount(void)const",
    "private: long __thiscall BuiVolume::ProxyAttemptAutoUnlock(void)",
    "public: static long __stdcall BuiVolume::GetAllVolumes(struct _BuiVolumeNode * *)",
    "public: long __thiscall BuiVolume::ResumeConversion(void)",
    "long __stdcall BuisCreateProxyObject(struct IDispatch * *)",
    "public: void __thiscall BuiVolume::ClearProxyObject(void)",
    "public: long __thiscall BuiVolume::UpgradeVolume(void)",
    "private: long __thiscall BuiVolume::FindMountPoint(void)",
    "private: long __thiscall BuiVolume::ProxyImplicitPauseConversion(void)",
    "public: bool __thiscall VolumeFveStatus::IsOn(void)const",
    "public: bool __thiscall VolumeFveStatus::IsEDriveVolume(void)const",
    "long __stdcall BuisCreateElevatedProxyObject(struct HWND__ *,struct IDispatch * *)",
    "public: __thiscall BuiVolume::BuiVolume(void)",
    "public: bool __thiscall VolumeFveStatus::HasSmartCardProtector(void)const",
    "public: bool __thiscall VolumeFveStatus::IsPaused(void)const",
    "public: bool __thiscall VolumeFveStatus::HasPinProtector(void)const",
    "private: long __thiscall BuiVolume::ProxyDisableAutoUnlock(void)",
    "public: long __thiscall BuiVolume::LaunchWizard(unsigned short)",
    "private: long __thiscall BuiVolume::AllowForegroundWindowDisplay(void)",
    "private: long __thiscall BuiVolume::BasicDispatch(long,unsigned short const *,unsigned short const *,long *)",
    "private: long __thiscall BuiVolume::ProxyRemoveSmartCard(bool)",
    "private: long __thiscall BuiVolume::ProxyAddSmartCard(struct HWND__ *)",
    "public: bool __thiscall VolumeFveStatus::IsPreProvisioned(void)const",
    "public: void __thiscall BuiVolume::ResumeStatusRefreshing(void)",
    "public: bool __thiscall VolumeFveStatus::HasStartupKeyProtector(void)const",
    "public: bool __thiscall VolumeFveStatus::IsUnknownFveVersion(void)const",
    "private: long __thiscall BuiVolume::ProxyUpgradeVolume(void)",
    "public: long __thiscall BuiVolume::RefreshStatus(bool)",
    "public: bool __thiscall VolumeFveStatus::NeedsRestart(void)const",
    "private: long __thiscall BuiVolume::ProxyUnlockVolumeWithPassphrase(unsigned short const *,int *)",
    "public: bool __thiscall VolumeFveStatus::IsPartiallyConverted(void)const",
    "private: long __thiscall BuiVolume::ProxyResumeConversion(void)",
    "private: long __thiscall BuiVolume::ProxyNeedsDiscoveryVolumeUpdate(int *)",
    "private: long __thiscall BuiVolume::ProxyGetDescription(unsigned short * *)",
    "private: void __thiscall BuiVolume::InitMembers(void)",
    "public: bool __thiscall VolumeFveStatus::FailedDryRun(void)const",
    "public: long __thiscall BuiVolume::Init(unsigned short *)",
    "private: long __thiscall BuiVolume::BasicDispatch(long,unsigned short const *,struct tagVARIANT *)",
    "public: bool __thiscall VolumeFveStatus::IsDecrypting(void)const",
    "private: long __thiscall BuiVolume::ProxyDisable(void)",
    "public: long __thiscall BuiVolume::LaunchUpdate(void)",
    "public: __thiscall BuiVolume::BuiVolume(bool)",
    "public: static long __stdcall BuiVolume::GetOsVolume(class BuiVolume * *)",
    "public: static unsigned int const BuiVolume::NO_DRIVE_LETTER",
    "public: long __thiscall BuiVolume::EnableAutoUnlock(void)",
    "public: void __thiscall BuiVolume::SuspendStatusRefreshing(void)",
    "public: bool __thiscall VolumeFveStatus::HasTpmProtector(void)const",
    "private: long __thiscall BuiVolume::ProxyPauseConversion(void)",
    "public: bool __thiscall VolumeFveStatus::HasExternalKey(void)const",
    "public: bool __thiscall BuiVolume::UnlockRequiresElevation(void)const",
    "public: bool __thiscall BuiVolume::HasAutoUnlockVolumesBound(void)",
    "private: long __thiscall BuiVolume::ProxyServiceDiscoveryVolume(void)"
  ],
  "bi.dll": [
    "BiQueryUserSession",
    "BiQueryWorkItem",
    "BiEnumerateWorkItemsForPackageName",
    "BiAssociateActivationProxy",
    "BiEnumerateUserSessions",
    "BiActivateWorkItem",
    "BiEnumerateBrokeredEvents",
    "BiQuerySystemStateBroadcastChannels",
    "BiDeleteEvent",
    "BiQueryBrokeredEvent",
    "BiCreateEventForPackageName",
    "BiDiscardPendingActivations",
    "BiSignalMultipleEvents",
    "BiAssociateApplicationExtensionClass",
    "BiSignalEvent",
    "BiDisassociateWorkItem",
    "BiFreeMemory"
  ],
  "bidispl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "biocpl.dll": [
    "WinBioPiiCleanup",
    "WinBioRemovePiiRunDll",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "WinBioInvokeFmaRunDll",
    "DllUnregisterServer"
  ],
  "bisrv.dll": [
    "BipMain",
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "bitsigd.dll": [
    "private: static struct GenericStringHandle::StringData GenericStringHandle::s_EmptyString",
    "InitializeEx",
    "UninitializeEx"
  ],
  "bitsperf.dll": [
    "private: int __thiscall CPerfMon::CounterIdToPerfItemIndex(struct CPerfMon::__COUNTER_ID *,int *)const",
    "public: unsigned long __thiscall CPerfMon::Initialize(int)",
    "public: class CPerfMon & __thiscall CPerfMon::operator=(class CPerfMon const &)",
    "PerfMon_Collect",
    "private: struct CPerfMon::_PERF_ITEM * __thiscall CPerfMon::CounterOrdToPerfItem(struct CPerfMon::__OBJECT_ORD *,struct CPerfMon::__COUNTER_ORD *)const",
    "private: int __thiscall CPerfMon::ConvertInstIdToInUseInstId(struct CPerfMon::__OBJECT_ORD *,struct CPerfMon::__INSTANCE_ID *)const",
    "PerfMon_Open",
    "private: unsigned char * __thiscall CPerfMon::GetCounter(struct CPerfMon::__COUNTER_ID *,struct CPerfMon::__INSTANCE_ID *)",
    "private: unsigned long __thiscall CPerfMon::InitializePerfMon(int)",
    "private: struct CPerfMon::__OBJECT_ORD * __thiscall CPerfMon::CounterIdToObjectOrd(struct CPerfMon::__COUNTER_ID *,int *)const",
    "private: struct CPerfMon::__OBJECT_ORD * __thiscall CPerfMon::ObjectIdToObjectOrd(struct CPerfMon::__OBJECT_ID *)const",
    "PerfMon_Close",
    "private: int __thiscall CPerfMon::IdToPerfItemIndex(int,unsigned long)const",
    "private: int __thiscall CPerfMon::HowManyInstancesAreInUse(struct CPerfMon::__OBJECT_ORD *)const",
    "private: struct CPerfMon::_PERF_ITEM * __thiscall CPerfMon::ObjectIdToPerfItem(struct CPerfMon::__OBJECT_ID *)const",
    "private: struct CPerfMon::_PERF_ITEM * __thiscall CPerfMon::ObjectOrdToPerfItem(struct CPerfMon::__OBJECT_ORD *)const",
    "private: int __thiscall CPerfMon::IsValidObjOrd(struct CPerfMon::__OBJECT_ORD *)const",
    "public: __thiscall CPerfMon::CPerfMon(unsigned short *,struct CPerfMon::_PERF_ITEM *)",
    "private: unsigned long __thiscall CPerfMon::CollectAllObjects(unsigned short *,unsigned char * *,unsigned long *,unsigned long *)const",
    "private: int __thiscall CPerfMon::ObjectIdToPerfItemIndex(struct CPerfMon::__OBJECT_ID *)const",
    "private: int __thiscall CPerfMon::IsValidInstId(struct CPerfMon::__OBJECT_ORD *,struct CPerfMon::__INSTANCE_ID *)const",
    "private: unsigned long __thiscall CPerfMon::CollectAnObject(struct CPerfMon::__OBJECT_ORD *,unsigned char * *)const",
    "private: struct CPerfMon::_PERF_ITEM * __thiscall CPerfMon::CounterIdToPerfItem(struct CPerfMon::__COUNTER_ID *)const",
    "private: void __thiscall CPerfMon::CalcPerfMetrics(struct CPerfMon::__OBJECT_ORD *,struct CPerfMon::__INSTANCE_ID *,struct CPerfMon::_PERF_METRICS *,struct CPerfMon::_PERF_ITEM * *)const",
    "private: void __thiscall CPerfMon::DetermineObjectsToCollect(struct CPerfMon::__OBJECT_ORD *)const",
    "public: unsigned long __thiscall CPerfMon::Collect(unsigned short *,unsigned char * *,unsigned long *,unsigned long *)",
    "public: __int64 * __thiscall CPerfMon::GetCounter64(struct CPerfMon::__COUNTER_ID *,struct CPerfMon::__INSTANCE_ID *)",
    "private: unsigned long __thiscall CPerfMon::VerifyPerfItemTable(void)",
    "public: __thiscall CPerfMon::~CPerfMon(void)",
    "private: unsigned long __thiscall CPerfMon::CalcBytesForPerfObject(struct CPerfMon::__OBJECT_ORD *)const",
    "public: long * __thiscall CPerfMon::GetCounter32(struct CPerfMon::__COUNTER_ID *,struct CPerfMon::__INSTANCE_ID *)",
    "private: int __thiscall CPerfMon::ObjectOrdToPerfItemIndex(struct CPerfMon::__OBJECT_ORD *)const"
  ],
  "bitsprx2.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "bitsprx3.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "bitsprx4.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "bitsprx5.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "bitsprx6.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "bitsprx7.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "biwinrt.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllMain",
    "DllGetClassObject"
  ],
  "blackbox.dll": [
    "IBlackBox_CreateInstance",
    "IBlackBox_DestroyInstance",
    "IBlackBox_CreateInstance2",
    "IBlackBox_CreateInstanceEx",
    "DllMain",
    "IBlackBox_CreateInstanceEx2",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "blb_ps.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "blbres.dll": "No exports",
  "bootstr.dll": "No exports",
  "bootux.dll": "No exports",
  "brdgcfg.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "bridgeres.dll": "No exports",
  "browcli.dll": [
    "NetBrowserStatisticsGet",
    "I_BrowserQueryEmulatedDomains",
    "I_BrowserResetStatistics",
    "NetServerEnum",
    "NetServerEnumEx",
    "I_BrowserDebugTrace",
    "I_BrowserResetNetlogonState",
    "I_BrowserSetNetlogonState",
    "I_BrowserServerEnum",
    "I_BrowserDebugCall",
    "I_BrowserQueryStatistics",
    "I_BrowserQueryOtherDomains"
  ],
  "browser.dll": [
    "ServiceMain",
    "I_BrowserServerEnumForXactsrv",
    "SvchostPushServiceGlobals"
  ],
  "browseui.dll": [
    "DllGetVersion"
  ],
  "bthci.dll": [
    "BluetoothClassInstaller"
  ],
  "bthpanapi.dll": [
    "BluetoothGetNetworkAvailableRoles",
    "BluetoothFindFirstNetwork",
    "BluetoothGetIncompleteConnectedNetworkHandle",
    "BluetoothCloseNetworkHandle",
    "BluetoothConnectToNetwork",
    "BluetoothFindNetworkClose",
    "BluetoothGetNetworkAddress",
    "BluetoothRegisterNetworkNotifications",
    "BluetoothUnregisterNetworkNotifications",
    "BluetoothGetNetworkContainerId",
    "BluetoothDuplicateNetworkHandle",
    "BluetoothDisconnectFromNetwork",
    "BluetoothCreateNetworkHandle",
    "BluetoothFindNextNetwork",
    "BluetoothGetNetworkName",
    "BluetoothGetNetworkStatus",
    "BluetoothGetNetworkInterfaceId"
  ],
  "bthserv.dll": [
    "ServiceMain"
  ],
  "btpanui.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "CHxReadingStringIME.dll": [
    "GetReadingString",
    "ShowReadingWindow"
  ],
  "CIRCoInst.dll": [
    "IRCoInstaller"
  ],
  "COLORCNV.DLL": [
    "CreateInstance",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "CPFilters.dll": [
    "DllRegisterServer",
    "UpdateWMDRM",
    "DllCanUnloadNow",
    "UpdatePlayready",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "C_G18030.DLL": [
    "NlsDllCodePageTranslation"
  ],
  "C_IS2022.DLL": [
    "NlsDllCodePageTranslation"
  ],
  "C_ISCII.DLL": [
    "NlsDllCodePageTranslation"
  ],
  "CallButtons.ProxyStub.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "CallButtons.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "CertEnroll.dll": [
    "DllGetActivationFactory",
    "LogCertArchive",
    "LogCertCopy",
    "LogCertDelete",
    "LogCertImport",
    "LogCertInstall",
    "LogCertExport",
    "LogCertExpire",
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "LogCertReplace",
    "DllUnregisterServer"
  ],
  "CertEnrollUI.dll": [
    "CreateUIObject"
  ],
  "CertPolEng.dll": [
    "PstGetTrustAnchors",
    "PstGetUserNameForCertificate",
    "PstAcquirePrivateKey",
    "PstMapCertificate",
    "PstGetCertificates",
    "PstValidate"
  ],
  "ConnectedAccountState.dll": [
    "ActionCenterRunDllW",
    "DllGetClassObject",
    "DllCanUnloadNow"
  ],
  "ConsentUX.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "CryptoWinRT.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "CscMig.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "cabinet.dll": [
    "FDICopy",
    "FDICreate",
    "SetDecompressorInformation",
    "FCIDestroy",
    "QueryCompressorInformation",
    "ResetDecompressor",
    "FCICreate",
    "CreateCompressor",
    "GetDllVersion",
    "CreateDecompressor",
    "SetCompressorInformation",
    "FCIFlushFolder",
    "FDITruncateCabinet",
    "ResetCompressor",
    "DeleteExtractedFiles",
    "FDIIsCabinet",
    "CloseCompressor",
    "CloseDecompressor",
    "QueryDecompressorInformation",
    "FCIFlushCabinet",
    "Compress",
    "FCIAddFile",
    "Decompress",
    "FDIDestroy",
    "DllGetVersion",
    "Extract"
  ],
  "cabview.dll": [
    "DllCanUnloadNow",
    "Uninstall",
    "DllGetClassObject"
  ],
  "capiprovider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "capisp.dll": [
    "CryptoSysPrep_Specialize",
    "CAPISysPrep_Generalize",
    "CryptoSysPrep_Specialize_Clone",
    "CryptoSysPrep_Clean"
  ],
  "catsrv.dll": [
    "GetAppImport",
    "long __stdcall CancelWriteICR(struct IComponentRecords * *)",
    "void __stdcall ReleaseReadICR(struct IComponentRecords * *)",
    "long __stdcall GetWriteICR(struct IComponentRecords * *)",
    "CreateComponentLibraryTS",
    "DllUnregisterServer",
    "GetCatalogCRMClerk",
    "long __stdcall GetReadICR(int,struct IComponentRecords * *)",
    "OpenComponentLibraryTS",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "long __stdcall SaveWriteICR(struct IComponentRecords * *)"
  ],
  "catsrvps.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "catsrvut.dll": [
    "public: class CComPlusTypelib & __thiscall CComPlusTypelib::operator=(class CComPlusTypelib const &)",
    "QueryUserDllW",
    "StartMTSTOCOM",
    "SysprepComplus2",
    "const CComPlusObject::`vftable'",
    "CGMIsAdministrator",
    "public: class CComPlusObject & __thiscall CComPlusObject::operator=(class CComPlusObject const &)",
    "DestroyComRegDBWriter",
    "public: __thiscall CComPlusInterface::CComPlusInterface(class CComPlusInterface const &)",
    "DllRegisterServer",
    "const CComPlusComponent::`vftable'",
    "DllUnregisterServer",
    "CreateComRegDBWriter",
    "public: class CComPlusInterface & __thiscall CComPlusInterface::operator=(class CComPlusInterface const &)",
    "public: struct ITypeLib * __thiscall CComPlusTypelib::GetITypeLib(void)",
    "COMPlusUninstallActionW",
    "DllCanUnloadNow",
    "public: __thiscall CComPlusObject::CComPlusObject(class CComPlusObject const &)",
    "WinlogonHandlePendingInfOperations",
    "const CComPlusMethod::`vftable'",
    "public: class CComPlusComponent & __thiscall CComPlusComponent::operator=(class CComPlusComponent const &)",
    "public: class CComPlusMethod & __thiscall CComPlusMethod::operator=(class CComPlusMethod const &)",
    "public: virtual __thiscall CComPlusInterface::~CComPlusInterface(void)",
    "RegDBBackup",
    "public: virtual __thiscall CComPlusComponent::~CComPlusComponent(void)",
    "public: __thiscall CComPlusComponent::CComPlusComponent(class CComPlusComponent const &)",
    "FindAssemblyModulesW",
    "public: __thiscall CComPlusMethod::CComPlusMethod(class CComPlusMethod const &)",
    "DllGetClassObject",
    "RunMTSToCom",
    "RegDBRestore",
    "ManagedRequestW",
    "const CComPlusInterface::`vftable'",
    "SysprepComplus"
  ],
  "cca.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "cdd.dll": "No exports",
  "cdosys.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "certCredProvider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "certca.dll": [
    "CASetCAProperty",
    "CAOIDFreeLdapURL",
    "CASetCertTypePropertyEx",
    "CAEnumCertTypesEx2",
    "CASetCASecurity",
    "CAOIDDeleteEx",
    "CAOIDFreeProperty",
    "CASetCAFlags",
    "CASetCertTypeFlagsEx",
    "CAFindByCertType",
    "CAGetCertTypeExtensionsEx",
    "CAGetCASecurity",
    "CAGetCertTypePropertyEx",
    "CACertTypeGetSecurity",
    "CAEnumNextCA",
    "CADeleteCertTypeEx",
    "CACloseCertType",
    "CASetCertTypeExpiration",
    "CASetCACertificate",
    "CCFindCertificateBuildFilter",
    "CAFindByIssuerDN",
    "CACertTypeRegisterQuery",
    "CACertTypeAccessCheckEx",
    "CAOIDAdd",
    "CAOIDGetLdapURL",
    "CARemoveCACertificateType",
    "CACreateLocalAutoEnrollmentObject",
    "CAIsCertTypeCurrentEx",
    "CACloseCA",
    "CAUpdateCA",
    "CAOIDGetProperty",
    "CAEnumNextCertType",
    "CAGetCAProperty",
    "CACertTypeAuthzAccessCheck",
    "CACertTypeSetSecurity",
    "CASetCertTypeExtension",
    "CACertTypeQuery",
    "CAOIDAddEx",
    "CAIsCertTypeCurrent",
    "CCFindCertificateFreeFilter",
    "CAOIDGetPropertyEx",
    "CCFreeStringArray",
    "CAGetCAFlags",
    "CAFreeCertTypeExtensions",
    "CACreateNewCA",
    "CAFindCertTypeByName2",
    "CAGetCertTypeKeySpec",
    "CARemoveCACertificateTypeEx",
    "CAAddCACertificateTypeEx",
    "CAUpdateCertType",
    "CADeleteCertType",
    "CASetCAExpiration",
    "CAOIDCreateNewEx",
    "CASetCertTypeFlags",
    "CAGetCertTypeExpiration",
    "CAFindByName",
    "CAGetCertTypeFlags",
    "CACertTypeUnregisterQuery",
    "CAAddCACertificateType",
    "CAInstallDefaultCertType",
    "CACreateAutoEnrollmentObjectEx",
    "CAEnumCertTypesForCAEx",
    "CASetCertTypeKeySpec",
    "CAInstallDefaultCertTypeEx",
    "CACloneCertType",
    "CAAccessCheckEx",
    "CAEnumFirstCA",
    "CAOIDDelete",
    "CAOIDSetPropertyEx",
    "CAEnumCertTypes",
    "CAGetCertTypeProperty",
    "CAAccessCheck",
    "CACountCAs",
    "CADeleteCAEx",
    "CAUpdateCAEx",
    "CADCSetCertTypePropertyEx",
    "CACreateCertType",
    "CAGetCertTypeFlagsEx",
    "CADeleteCA",
    "CAFindCertTypeByName",
    "CAOIDCreateNew",
    "CAEnumCertTypesEx",
    "CAEnumCertTypesForCA",
    "CAGetDN",
    "CADeleteLocalAutoEnrollmentObject",
    "CAFreeCAProperty",
    "CACountCertTypes",
    "CAOIDSetProperty",
    "CCFindCertificateFromFilter",
    "CAGetCACertificate",
    "CAFreeCertTypeProperty",
    "CAUpdateCertTypeEx",
    "CCGetCertNameList",
    "CAGetCAExpiration",
    "CAGetCertTypeExtensions",
    "CACertTypeAccessCheck",
    "CASetCertTypeProperty"
  ],
  "certcli.dll": [
    "CAGetConfigStringFromUIPicker",
    "myLogExceptionInit",
    "DbgLogStringInit2",
    "CASetCAProperty",
    "CAOIDFreeLdapURL",
    "CASetCertTypePropertyEx",
    "myGetErrorMessageText",
    "CASetCASecurity",
    "mylstrcmpiL",
    "CAOIDDeleteEx",
    "CAIsCertTypeValid",
    "CAOIDFreeProperty",
    "CASetCAFlags",
    "CASetCertTypeFlagsEx",
    "CAFindByCertType",
    "myCryptBinaryToStringA",
    "CAGetCertTypeExtensionsEx",
    "CAGetCASecurity",
    "IsISAPIExtensionEnabled",
    "CertcliGetDetailedCertcliVersionString",
    "CAGetCertTypePropertyEx",
    "mySanitizedNameToDSName",
    "CACertTypeGetSecurity",
    "IsASPEnabledInIIS",
    "CAEnumNextCA",
    "CADeleteCertTypeEx",
    "CACloseCertType",
    "DllGetClassObject",
    "RemoveVDir",
    "CASetCertTypeExpiration",
    "CASetCACertificate",
    "myJetHResult",
    "CAIsValid",
    "CAFindByIssuerDN",
    "CACertTypeRegisterQuery",
    "CACertTypeAccessCheckEx",
    "CAOIDAdd",
    "myGenerateGuidSerialNumber",
    "myRobustLdapBind",
    "WszToMultiByteIntegerBuf",
    "myDoesDSExist@209",
    "CAOIDGetLdapURL",
    "CARemoveCACertificateType",
    "CACreateLocalAutoEnrollmentObject",
    "CSPrintErrorLineFileData2",
    "CAIsCertTypeCurrentEx",
    "CACloseCA",
    "DbgIsSSActive",
    "DllUnregisterServer",
    "myCryptBinaryToString",
    "WszToMultiByteInteger",
    "CAUpdateCA",
    "CAOIDGetProperty",
    "CSPrintError",
    "myCAPropInfoLookup",
    "CAEnumNextCertType",
    "CAGetCAProperty",
    "myCAPropGetDisplayName",
    "CACertTypeAuthzAccessCheck",
    "CACertTypeSetSecurity",
    "CASetCertTypeExtension",
    "DbgPrintfInit",
    "myAddShare",
    "myHGetLastError",
    "caTranslateFileTimePeriodToPeriodUnits",
    "CAGetCertTypeAccessRights",
    "CACertTypeQuery",
    "myGetSidFromDomain",
    "CAOIDAddEx",
    "myGetTargetMachineDomainDnsName",
    "CAIsCertTypeCurrent",
    "CAOIDGetPropertyEx",
    "CSPrintAssert",
    "CAGetCAFlags",
    "CAFreeCertTypeExtensions",
    "myGenerateGuidString",
    "myIsDelayLoadHResult",
    "CACreateNewCA",
    "CAGetCertTypeKeySpec",
    "CARemoveCACertificateTypeEx",
    "myEnablePrivilege",
    "CAAddCACertificateTypeEx",
    "CAUpdateCertType",
    "EncodeToFileW",
    "CADeleteCertType",
    "CASetCAExpiration",
    "CAOIDCreateNewEx",
    "CASetCertTypeFlags",
    "CAGetCertTypeExpiration",
    "CAFindByName",
    "myRevertSanitizeName",
    "CAGetCertTypeFlags",
    "CACertTypeUnregisterQuery",
    "CAAddCACertificateType",
    "CAInstallDefaultCertType",
    "CACreateAutoEnrollmentObjectEx",
    "CAEnumCertTypesForCAEx",
    "myRobustLdapBindEx",
    "CASetCertTypeKeySpec",
    "CAInstallDefaultCertTypeEx",
    "CSPrintErrorLineFile",
    "CACloneCertType",
    "myHExceptionCode",
    "CAAccessCheckEx",
    "CAEnumFirstCA",
    "DbgLogStringInit",
    "EnableASPInIIS",
    "CAOIDDelete",
    "CAOIDSetPropertyEx",
    "myHResultToStringRaw",
    "myCAPropInfoUnmarshal",
    "myGetErrorMessageText1",
    "CAEnumCertTypes",
    "CAGetCertTypeProperty",
    "RemoveISAPIExtension",
    "DbgPrintfW",
    "IsASPEnabledInIIS_New",
    "CAAccessCheck",
    "CACountCAs",
    "myGetHashAlgorithmOIDInfoFromSignatureAlgorithm",
    "CSPrintErrorLineFileData",
    "CADeleteCAEx",
    "myGetErrorMessageTextEx",
    "CAUpdateCAEx",
    "DllRegisterServer",
    "CADCSetCertTypePropertyEx",
    "myNetLogonUser",
    "myHResultToString",
    "CACreateCertType",
    "CAGetCertTypeFlagsEx",
    "CSPrintErrorLineFile2",
    "SplitConfigString",
    "CADeleteCA",
    "CAFindCertTypeByName",
    "CAOIDCreateNew",
    "DllMain",
    "myModifyVirtualRootsAndFileShares",
    "CAEnumCertTypesEx",
    "AddOrRemoveOCSPISAPIExtension",
    "CAEnumCertTypesForCA",
    "DllCanUnloadNow",
    "myHExceptionCodePrint",
    "CAGetDN",
    "CADeleteLocalAutoEnrollmentObject",
    "CAFreeCAProperty",
    "CACountCertTypes",
    "myCryptStringToBinaryA",
    "DecodeFileW",
    "myFreeColumnDisplayNames",
    "EnableISAPIExtension",
    "CAOIDSetProperty",
    "CAGetCACertificate",
    "CAGetAccessRights",
    "CAFreeCertTypeProperty",
    "mySanitizeName",
    "CAUpdateCertTypeEx",
    "myCryptStringToBinary",
    "CAGetCAExpiration",
    "DbgPrintf",
    "myOIDHashOIDToString",
    "mySanitizedNameToShortName",
    "CAGetCertTypeExtensions",
    "CACertTypeAccessCheck",
    "CASetCertTypeProperty"
  ],
  "certenc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "certmgr.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "certprop.dll": [
    "CertPropServiceMain",
    "ScPolicyServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "cewmdm.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "cfgbkend.dll": [
    "IID_ISettingsComp2",
    "IID_ISettingsComp",
    "IID_ICfgComp",
    "DllCanUnloadNow",
    "CLSID_CfgComp",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "cfgmgr32.dll": [
    "CM_Get_Next_Log_Conf",
    "CM_Get_Class_PropertyW",
    "CM_Register_Notification",
    "CM_Delete_Driver_Package_ExW",
    "CM_Add_IDA",
    "CM_Get_HW_Prof_Flags_ExW",
    "CM_Is_Version_Available",
    "CM_Install_DevNodeW",
    "CM_Register_Device_Interface_ExW",
    "CM_Get_Next_Res_Des",
    "CM_RestoreAll_DefaultPowerSchemes",
    "CM_Delete_Device_Interface_KeyA",
    "CM_Get_Device_Interface_Property_ExW",
    "CM_MapCrToWin32Err",
    "CM_Run_Detection",
    "CM_Get_DevNode_Registry_PropertyW",
    "CM_Get_Log_Conf_Priority",
    "DevCreateObjectQuery",
    "CM_Create_DevNode_ExW",
    "CM_Enumerate_Enumerators_ExA",
    "CM_Locate_DevNode_ExW",
    "CM_Get_Device_ID_List_SizeW",
    "CM_Get_Res_Des_Data",
    "CM_Get_DevNode_Custom_PropertyA",
    "CM_Is_Version_Available_Ex",
    "CM_Request_Eject_PC_Ex",
    "CMP_WaitServicesAvailable",
    "CM_Uninstall_DevNode_Ex",
    "CM_Get_DevNode_Property_Keys_Ex",
    "CM_Get_Hardware_Profile_InfoW",
    "CM_Register_Device_Driver_Ex",
    "CM_Request_Device_Eject_ExW",
    "CM_Open_Device_Interface_Key_ExA",
    "CM_Get_DevNode_PropertyW",
    "CM_Add_ID_ExA",
    "CM_Restore_DefaultPowerScheme",
    "CM_Get_Device_Interface_List_Size_ExW",
    "CMP_GetServerSideDeviceInstallFlags",
    "CM_Add_ID_ExW",
    "CM_Set_HW_Prof_FlagsA",
    "CM_Get_Resource_Conflict_DetailsW",
    "CM_Get_Version",
    "CM_Locate_DevNodeW",
    "CM_Move_DevNode",
    "CM_Set_Class_Registry_PropertyA",
    "CM_Setup_DevNode_Ex",
    "CM_Unregister_Device_InterfaceW",
    "CM_Get_Hardware_Profile_InfoA",
    "CM_Open_Class_Key_ExA",
    "CM_Get_Device_Interface_Alias_ExA",
    "CM_Query_Arbitrator_Free_Data_Ex",
    "CM_Get_Device_IDW",
    "CM_Set_HW_Prof_FlagsW",
    "CM_Get_Parent_Ex",
    "CM_Add_Range",
    "CM_Connect_MachineA",
    "CM_Detect_Resource_Conflict_Ex",
    "CM_Register_Device_Interface_ExA",
    "CM_Get_First_Log_Conf_Ex",
    "CM_Request_Eject_PC",
    "SwDeviceClose",
    "CM_Delete_Class_Key",
    "CM_Add_Empty_Log_Conf",
    "CM_Get_DevNode_Custom_Property_ExW",
    "CM_Delete_Class_Key_Ex",
    "CM_Get_DevNode_Property_Keys",
    "CM_Free_Range_List",
    "CM_Set_HW_Prof",
    "CM_First_Range",
    "CM_Set_HW_Prof_Ex",
    "CMP_WaitNoPendingInstallEvents",
    "CMP_Report_LogOn",
    "CM_Get_Device_ID_List_Size_ExW",
    "CM_Get_Device_Interface_Property_Keys_ExW",
    "CM_Reenumerate_DevNode",
    "CM_Get_Device_ID_List_ExA",
    "SwDeviceInterfaceRegister",
    "CM_Free_Resource_Conflict_Handle",
    "CM_Add_Res_Des_Ex",
    "CM_Set_Class_Property_ExW",
    "CM_Free_Log_Conf_Ex",
    "CM_Duplicate_PowerScheme",
    "CM_Setup_DevNode",
    "CM_Detect_Resource_Conflict",
    "CM_Get_DevNode_Registry_Property_ExW",
    "CM_Disable_DevNode_Ex",
    "CM_Query_Remove_SubTree",
    "CM_Add_Res_Des",
    "CM_Delete_Device_Interface_Key_ExA",
    "CM_Get_Class_Key_Name_ExW",
    "CM_Get_Hardware_Profile_Info_ExW",
    "CM_Free_Log_Conf_Handle",
    "CM_Get_Log_Conf_Priority_Ex",
    "CM_Open_Device_Interface_KeyA",
    "CM_Query_And_Remove_SubTree_ExW",
    "CM_Free_Res_Des",
    "CM_Set_DevNode_Registry_Property_ExW",
    "CM_Unregister_Device_Interface_ExA",
    "CM_Modify_Res_Des",
    "CM_Get_Next_Log_Conf_Ex",
    "CM_Request_Device_EjectW",
    "CM_Get_Class_Name_ExW",
    "CM_Enumerate_Classes_Ex",
    "CM_Disconnect_Machine",
    "CM_Get_DevNode_Status_Ex",
    "CM_Next_Range",
    "CM_Get_Device_Interface_List_SizeA",
    "CM_Set_Class_Registry_PropertyW",
    "CMP_Register_Notification",
    "CM_Open_DevNode_Key",
    "CM_Get_Global_State",
    "CM_Query_Remove_SubTree_Ex",
    "CM_Set_DevNode_Problem",
    "CM_Set_DevNode_Problem_Ex",
    "DevGetObjectProperties",
    "CM_Get_Version_Ex",
    "CM_Unregister_Device_InterfaceA",
    "CM_Get_Device_ID_Size_Ex",
    "CM_Get_Class_Key_NameW",
    "CM_Free_Res_Des_Ex",
    "CM_Get_Device_Interface_ListW",
    "CM_Get_HW_Prof_FlagsA",
    "CM_Get_Class_Key_Name_ExA",
    "CM_Get_Class_Name_ExA",
    "CM_Get_Depth_Ex",
    "DevFreeObjects",
    "CM_Delete_DevNode_Key_Ex",
    "CM_Get_Next_Res_Des_Ex",
    "CM_Get_Sibling",
    "CM_Request_Device_Eject_ExA",
    "DevSetObjectProperties",
    "CM_Delete_Driver_PackageW",
    "CM_Get_Class_Key_NameA",
    "CM_Get_Class_NameW",
    "CM_Get_Device_Interface_ListA",
    "CM_Open_Class_Key_ExW",
    "CM_Get_Device_ID_List_SizeA",
    "CM_Query_Resource_Conflict_List",
    "CM_Dup_Range_List",
    "CM_Locate_DevNode_ExA",
    "CM_Enumerate_Enumerators_ExW",
    "CM_Get_Class_NameA",
    "CM_Run_Detection_Ex",
    "CM_Connect_MachineW",
    "CM_Delete_PowerScheme",
    "CM_Import_PowerScheme",
    "CM_Get_Device_Interface_AliasA",
    "CM_Enable_DevNode_Ex",
    "CM_Open_Device_Interface_Key_ExW",
    "CM_Query_And_Remove_SubTreeA",
    "DevCreateObjectQueryFromIds",
    "CM_Query_And_Remove_SubTree_ExA",
    "CM_Disable_DevNode",
    "CM_Create_DevNodeW",
    "CM_Request_Device_EjectA",
    "CM_Get_Child",
    "CM_Get_DevNode_Registry_PropertyA",
    "DevCloseObjectQuery",
    "CM_Enumerate_EnumeratorsA",
    "CM_Set_HW_Prof_Flags_ExA",
    "CM_Test_Range_Available",
    "CM_Remove_SubTree_Ex",
    "CM_Add_Driver_Package_ExW",
    "CM_Install_DevNode_ExW",
    "CM_Apply_PowerScheme",
    "CM_Delete_Range",
    "CM_Get_Device_IDA",
    "CM_Get_Depth",
    "CM_Create_Range_List",
    "CM_Get_Class_Registry_PropertyW",
    "CM_Set_Class_PropertyW",
    "CM_Uninstall_DevNode",
    "CM_Get_Device_Interface_List_Size_ExA",
    "CM_Get_Device_Interface_List_SizeW",
    "CM_Is_Dock_Station_Present_Ex",
    "CM_Add_Empty_Log_Conf_Ex",
    "CM_Query_Arbitrator_Free_Size",
    "CM_Set_DevNode_Registry_PropertyA",
    "CM_Get_Device_Interface_List_ExA",
    "CM_Get_First_Log_Conf",
    "CM_Get_Res_Des_Data_Ex",
    "CM_Register_Device_InterfaceA",
    "CM_Set_ActiveScheme",
    "DevGetObjects",
    "CM_Get_Class_Property_Keys",
    "CM_Get_Device_ID_ListW",
    "CM_Locate_DevNodeA",
    "CM_Get_Res_Des_Data_Size",
    "CM_Query_Arbitrator_Free_Data",
    "CM_Set_Device_Interface_PropertyW",
    "CM_Get_Res_Des_Data_Size_Ex",
    "SwDeviceInterfaceSetState",
    "CM_Query_Arbitrator_Free_Size_Ex",
    "CM_Get_Device_ID_List_Size_ExA",
    "CM_Create_DevNode_ExA",
    "CM_Remove_SubTree",
    "CM_Find_Range",
    "CM_Merge_Range_List",
    "CM_Get_Class_Property_ExW",
    "CM_Get_DevNode_Custom_Property_ExA",
    "CM_Enumerate_Classes",
    "CM_Add_Driver_PackageW",
    "CM_Get_Device_Interface_List_ExW",
    "CM_Modify_Res_Des_Ex",
    "CM_Get_Device_ID_List_ExW",
    "CM_Set_Device_Interface_Property_ExW",
    "CM_Free_Res_Des_Handle",
    "CM_Get_Global_State_Ex",
    "DevCreateObjectQueryFromId",
    "CM_Free_Log_Conf",
    "CM_MapCrToSpErr",
    "DevFreeObjectProperties",
    "CM_Create_DevNodeA",
    "CM_Query_And_Remove_SubTreeW",
    "CM_Open_DevNode_Key_Ex",
    "CM_Get_Class_Property_Keys_Ex",
    "CM_Write_UserPowerKey",
    "CM_Get_Class_Registry_PropertyA",
    "CM_Get_Parent",
    "CM_Get_Device_Interface_Alias_ExW",
    "CM_Register_Device_Driver",
    "CM_Get_Device_ID_ExA",
    "CM_Get_Device_ID_ListA",
    "CM_Get_DevNode_Property_ExW",
    "CM_Get_Hardware_Profile_Info_ExA",
    "CM_Enable_DevNode",
    "CM_Enumerate_EnumeratorsW",
    "CM_Is_Dock_Station_Present",
    "CM_Get_HW_Prof_FlagsW",
    "CM_Set_DevNode_PropertyW",
    "CM_Get_Device_Interface_Property_KeysW",
    "CM_Get_Resource_Conflict_DetailsA",
    "CM_Get_Device_Interface_PropertyW",
    "CM_Set_DevNode_Registry_Property_ExA",
    "SwDeviceCreate",
    "SwDeviceInterfacePropertySet",
    "CM_Add_IDW",
    "CM_Delete_Device_Interface_KeyW",
    "CM_Get_Resource_Conflict_Count",
    "CM_Delete_DevNode_Key",
    "CM_Get_Sibling_Ex",
    "CM_Get_Device_Interface_AliasW",
    "CM_Intersect_Range_List",
    "CM_Open_Class_KeyA",
    "CM_Unregister_Device_Interface_ExW",
    "CM_Get_HW_Prof_Flags_ExA",
    "CM_Delete_Device_Interface_Key_ExW",
    "CM_Open_Device_Interface_KeyW",
    "CM_Open_Class_KeyW",
    "CM_Get_Device_ID_ExW",
    "CM_Invert_Range_List",
    "CM_Get_Device_ID_Size",
    "DevFindProperty",
    "SwMemFree",
    "CMP_Init_Detection",
    "CMP_RegisterServiceNotification",
    "CM_Get_DevNode_Custom_PropertyW",
    "CMP_GetBlockedDriverInfo",
    "CM_Move_DevNode_Ex",
    "CM_Get_DevNode_Status",
    "CM_Register_Device_InterfaceW",
    "CM_Reenumerate_DevNode_Ex",
    "CM_Get_Child_Ex",
    "CM_Set_DevNode_Registry_PropertyW",
    "CM_Get_DevNode_Registry_Property_ExA",
    "SwDevicePropertySet",
    "CM_Set_DevNode_Property_ExW",
    "CM_Set_HW_Prof_Flags_ExW",
    "CM_Unregister_Notification"
  ],
  "cfmifs.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "cfmifsproxy.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "chartv.dll": [
    "CvGetDataSourceName",
    "CvCloseDataSource",
    "CvInitialize",
    "CvSetData",
    "CvUninitialize",
    "CvCreateDataSource",
    "CvSetDataSourceName",
    "CvGetData"
  ],
  "chkwudrv.dll": [
    "IsWUAvailable",
    "WUInstallBestUpdate",
    "OpenWUContext",
    "CancelWUOperation",
    "WUDownloadUpdatedFiles",
    "RemoveWUDirectory",
    "WUExpandUpdateToPath",
    "WUFindMatchingDriver",
    "ReleaseWUContext"
  ],
  "chsbrkr.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "chtbrkr.dll": [
    "CreateLexInstance",
    "CreateMyProperNounInstance",
    "CreateWBInstance",
    "CreateSmartLexInstance",
    "CreateMyRuleLexInstance",
    "CreateTermLearnInstance",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "ci.dll": [
    "CiVerifyHashInCatalog",
    "CiInitialize",
    "CiFreePolicyInfo",
    "CiFindPageHashesInSignedFile",
    "CiFindPageHashesInCatalog",
    "CiCheckSignedFile",
    "CiGetPEInformation"
  ],
  "cic.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "clb.dll": [
    "ClbAddData",
    "ClbSetColumnWidths",
    "CustomControlInfoW",
    "ClbWndProc",
    "ClbStyleW"
  ],
  "clbcatq.dll": [
    "DeleteAllActivatorsForClsid",
    "DowngradeAPL",
    "ServerGetApplicationType",
    "SetupSave",
    "SetSetupSave",
    "GetCatalogObject",
    "DllRegisterServer",
    "GetCatalogObject2",
    "DllUnregisterServer",
    "ComPlusEnablePartitions",
    "ComPlusMigrate",
    "ComPlusRemoteAccessEnabled",
    "SetSetupOpen",
    "GetGlobalBabyJITEnabled",
    "OpenComponentLibraryOnMemEx",
    "DllCanUnloadNow",
    "CoRegCleanup",
    "CheckMemoryGates",
    "ComPlusPartitionsEnabled",
    "ComPlusEnableRemoteAccess",
    "CLSIDFromStringByBitness",
    "CreateComponentLibraryEx",
    "SetupOpen",
    "UpdateFromComponentChange",
    "GetComputerObject",
    "DllGetClassObject",
    "GetSimpleTableDispenser",
    "ActivatorUpdateForIsRouterChanges",
    "OpenComponentLibraryOnStreamEx",
    "UpdateFromAppChange",
    "OpenComponentLibraryEx",
    "InprocServer32FromString"
  ],
  "clfsw32.dll": [
    "ReadLogRestartArea",
    "GetNextLogArchiveExtent",
    "RemoveLogContainer",
    "HandleLogFull",
    "FreeReservedLog",
    "LsnDecrement",
    "LsnGreater",
    "SetEndOfLog",
    "SetLogFileSizeWithPolicy",
    "FlushLogBuffers",
    "ScanLogContainers",
    "ReadPreviousLogRestartArea",
    "ReadLogArchiveMetadata",
    "RemoveLogPolicy",
    "AddLogContainer",
    "CreateLogFile",
    "PrepareLogArchive",
    "CLFS_LSN_NULL",
    "AddLogContainerSet",
    "LsnNull",
    "DeregisterManageableLogClient",
    "DeleteLogByHandle",
    "GetLogIoStatistics",
    "LsnInvalid",
    "DumpLogRecords",
    "QueryLogPolicy",
    "LsnBlockOffset",
    "DeleteLogMarshallingArea",
    "ValidateLog",
    "ReadNextLogRecord",
    "CloseAndResetLogFile",
    "RemoveLogContainerSet",
    "LogTailAdvanceFailure",
    "ReadLogNotification",
    "AllocReservedLog",
    "FlushLogToLsn",
    "LsnLess",
    "GetLogReservationInfo",
    "CLFS_LSN_INVALID",
    "GetLogFileInformation",
    "WriteLogRestartArea",
    "CreateLogMarshallingArea",
    "DeleteLogFile",
    "RegisterForLogWriteNotification",
    "SetLogArchiveTail",
    "RegisterManageableLogClient",
    "AdvanceLogBase",
    "InstallLogPolicy",
    "LsnEqual",
    "ReserveAndAppendLogAligned",
    "SetLogArchiveMode",
    "TerminateReadLog",
    "TruncateLog",
    "CreateLogContainerScanContext",
    "LsnContainer",
    "LsnIncrement",
    "LsnCreate",
    "LsnRecordSequence",
    "ReadLogRecord",
    "TerminateLogArchive",
    "ReserveAndAppendLog",
    "GetLogContainerName",
    "AlignReservedLog"
  ],
  "cliconfg.dll": [
    "OnInitDialogMain",
    "ClientConfigureAddEdit",
    "CPlApplet"
  ],
  "clrhost.dll": [
    "DllGetActivationFactory"
  ],
  "clusapi.dll": [
    "ClusterRegCloseKey",
    "ChangeClusterResourceGroup",
    "ClusterSharedVolumeSetSnapshotState",
    "ClusterRegBatchReadCommand",
    "IsFileOnClusterSharedVolume",
    "ClusterEnum",
    "ClusterOpenEnum",
    "ClusterNodeEnumEx",
    "ClusterRegQueryAllValues",
    "GetClusterGroupState",
    "CloseClusterNetInterface",
    "ClusterStmFindDisk",
    "ClusterResourceGetEnumCountEx",
    "RegisterClusterNotifyV2",
    "GetClusterNotifyV2",
    "SetClusterResourceDependencyExpression",
    "DeleteClusterResourceType",
    "ClusterResourceTypeEnum",
    "DeleteClusterGroup",
    "CreateClusterGroup",
    "ClusterGroupOpenEnum",
    "ClusterRegDeleteKey",
    "OnlineClusterResource",
    "ClusterRegDeleteValue",
    "ResumeClusterNode",
    "AddClusterResourceNode",
    "DestroyCluster",
    "PauseClusterNode",
    "ClusterNetworkOpenEnum",
    "OnlineClusterGroupEx",
    "OpenClusterEx2",
    "ClusterRegCreateReadBatch",
    "ClusterRegQueryValue",
    "GetClusterResourceKey",
    "RemoveClusterResourceDependency",
    "GetClusterSharedVolumeNameForFile",
    "ClusterSharedVolumeClearBackupState",
    "GetClusterResourceTypeKey",
    "CreateCluster",
    "ClusterRegBatchCloseNotification",
    "RestoreClusterDatabase",
    "OfflineClusterResource",
    "SetClusterQuorumResource",
    "SetClusterGroupName",
    "CloseClusterNode",
    "OpenClusterNetwork",
    "ClusterRegSetValue",
    "GetClusterQuorumResource",
    "CanResourceBeDependent",
    "ResumeClusterNodeEx",
    "ClusterGetEnumCount",
    "OpenClusterResource",
    "ClusterResourceOpenEnum",
    "FailClusterResource",
    "GetClusterNodeId",
    "OfflineClusterGroupEx",
    "ClusterResourceCloseEnumEx",
    "ClusterNodeCloseEnumEx",
    "ClusterRegGetBatchNotification",
    "RemoveClusterResourceNode",
    "ClusterGroupEnumEx",
    "ClusterResourceTypeCloseEnum",
    "GetClusterNetInterface",
    "ClusterCloseEnum",
    "GetClusterInformation",
    "SetClusterNetworkPriorityOrder",
    "ClusterRegCloseBatch",
    "ClusterNodeControl",
    "ClusterEnumEx",
    "ClusterNodeGetEnumCountEx",
    "RemoveResourceFromClusterSharedVolumes",
    "CreateClusterGroupEx",
    "OfflineClusterResourceEx",
    "ClusterResourceTypeControl",
    "CreateClusterResourceType",
    "EvictClusterNode",
    "ClusterGroupCloseEnum",
    "ClusterRegEnumKey",
    "OpenClusterResourceEx",
    "ClusterRegCloseBatchNotifyPort",
    "DestroyClusterGroup",
    "AddClusterResourceDependency",
    "ClusterCloseEnumEx",
    "CreateClusterNotifyPort",
    "ClusterResourceTypeOpenEnum",
    "OpenClusterNetInterfaceEx",
    "GetClusterNetworkKey",
    "ClusterGroupGetEnumCountEx",
    "ClusterRegCreateBatch",
    "ClusterRegCloseReadBatch",
    "CloseCluster",
    "ClusterRegReadBatchReplyNextCommand",
    "SetClusterNetworkName",
    "CloseClusterNotifyPort",
    "GetClusterFromNode",
    "ClusterResourceTypeGetEnumCount",
    "GetClusterFromNetwork",
    "BackupClusterDatabase",
    "ClusterResourceEnum",
    "OpenCluster",
    "ClusterGroupControl",
    "ClusterRegEnumValue",
    "ClusterNetworkControl",
    "OpenClusterGroupEx",
    "ClusterRegCreateKey",
    "SetClusterResourceName",
    "ClusterFreeMemory",
    "ClusterFreeMrrResponse",
    "OnlineClusterGroup",
    "ClusterRegCreateBatchNotifyPort",
    "ClusterNetInterfaceControl",
    "DeleteClusterResource",
    "GetClusterFromResource",
    "RestartClusterResource",
    "ClusterGetEnumCountEx",
    "ClusterGroupOpenEnumEx",
    "ClusterNodeGetEnumCount",
    "ClusterNodeOpenEnumEx",
    "ClusterRegQueryInfoKey",
    "GetClusterNetworkState",
    "GetClusterNetInterfaceState",
    "CancelClusterGroupOperation",
    "ClusterNodeOpenEnum",
    "ClusterNetworkGetEnumCount",
    "SetClusterName",
    "CreateClusterResource",
    "ClusterNodeCloseEnum",
    "GetClusterResourceNetworkName",
    "ClusterRegCloseReadBatchReply",
    "ClusterResourceOpenEnumEx",
    "ClusterSendReceiveMrr",
    "ClusterGroupGetEnumCount",
    "GetClusterKey",
    "GetClusterFromNetInterface",
    "GetClusterResourceState",
    "AddClusterNode",
    "OpenClusterEx",
    "PauseClusterNodeEx",
    "OpenClusterNetInterface",
    "ClusterControl",
    "CloseClusterNetwork",
    "ClusterResourceEnumEx",
    "ClusterResourceGetEnumCount",
    "GetClusterNetInterfaceKey",
    "ClusterRegSetKeySecurity",
    "OpenClusterNode",
    "GetClusterNodeState",
    "OnlineClusterResourceEx",
    "ClusterNetworkCloseEnum",
    "ClusterRegOpenKey",
    "ClusterRegGetKeySecurity",
    "GetClusterNotify",
    "ClusterRegBatchAddCommand",
    "ClusterResourceControl",
    "GetClusterResourceDependencyExpression",
    "MoveClusterGroup",
    "MoveClusterGroupEx",
    "OfflineClusterGroup",
    "ClusterResourceCloseEnum",
    "ClusterNodeEnum",
    "OpenClusterGroup",
    "ClusterNetworkEnum",
    "RegisterClusterNotify",
    "SetClusterServiceAccountPassword",
    "OpenClusterNodeEx",
    "CloseClusterGroup",
    "ClusterGroupCloseEnumEx",
    "OpenClusterNetworkEx",
    "CloseClusterResource",
    "GetClusterFromGroup",
    "ClusterRegReadBatchAddCommand",
    "ClusterOpenEnumEx",
    "AddResourceToClusterSharedVolumes",
    "GetClusterNetworkId",
    "ClusterGroupEnum",
    "CreateClusterNotifyPortV2",
    "GetClusterNodeKey",
    "GetNodeClusterState",
    "EvictClusterNodeEx",
    "GetClusterGroupKey",
    "SetClusterGroupNodeList",
    "GetNotifyEventHandle"
  ],
  "cmcfg32.dll": [
    "CMConfigEx",
    "CmstpExtensionProc2",
    "_CMConfig@8",
    "CmstpExtensionProc",
    "CMConfig"
  ],
  "cmdext.dll": [
    "DoSHChangeNotify",
    "WNetAddConnection2WStub",
    "CmdBatNotificationStub",
    "FindFirstStreamWStub",
    "GetVDMCurrentDirectoriesStub",
    "WNetGetConnectionWStub",
    "MessageBeepStub",
    "WNetCancelConnection2WStub",
    "QueryFullProcessImageNameWStub",
    "GetBinaryTypeWStub",
    "ShellExecuteWorker",
    "FindNextStreamWStub",
    "LookupAccountSidWStub",
    "SaferWorker"
  ],
  "cmdial32.dll": [
    "_InetDialHandler@16",
    "CmCustomHangUp",
    "_AutoDialFunc@16",
    "RasCustomDeleteEntryNotify",
    "RasCustomHangUp",
    "AutoDialFunc",
    "CmReConnect",
    "GetCustomProperty",
    "CmCustomDialDlg",
    "InetDialHandler",
    "RasCustomEntryDlg",
    "RasCustomDial",
    "RasCustomDialDlg"
  ],
  "cmifw.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "EnableGroupW",
    "unattendW"
  ],
  "cmipnpinstall.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "OnlineSetupPNPInstall"
  ],
  "cmlua.dll": [
    "DllRelease",
    "_SetShieldIcon",
    "_RemoveShieldIcon",
    "_GetCoCreateInstanceAsAdminHandle",
    "DllMain",
    "_SetShieldButton",
    "DllCanUnloadNow",
    "DllAddRef",
    "DllGetClassObject",
    "_ThrowErrorBox"
  ],
  "cmpbk32.dll": [
    "PhoneBookGetPhoneNonCanonicalA",
    "PhoneBookGetPhoneDescA",
    "PhoneBookCopyFilter",
    "PhoneBookHasPhoneType",
    "PhoneBookParseInfoA",
    "PhoneBookGetPhoneType",
    "PhoneBookMatchFilter",
    "PhoneBookEnumCountries",
    "PhoneBookGetCountryNameW",
    "PhoneBookGetRegionNameA",
    "PhoneBookGetCurrentCountryId",
    "PhoneBookFreeFilter",
    "PhoneBookEnumNumbers",
    "PhoneBookMergeChanges",
    "PhoneBookEnumRegions",
    "PhoneBookGetPhoneDispA",
    "PhoneBookUnload",
    "PhoneBookGetPhoneDUNA",
    "PhoneBookGetCountryId",
    "PhoneBookEnumNumbersWithRegionsZero",
    "PhoneBookGetPhoneCanonicalA",
    "PhoneBookLoad",
    "PhoneBookGetCountryNameA"
  ],
  "cmstplua.dll": [
    "DllRelease",
    "DllMain",
    "DllCanUnloadNow",
    "DllAddRef",
    "DllGetClassObject"
  ],
  "cmutil.dll": [
    "CmIsIPv6AddressW",
    "public: long __thiscall CmLogFile::Init(struct HINSTANCE__ *,int,char const *)",
    "public: void __thiscall CIniA::SetWriteICSData(int)",
    "CmIsIPv6AddressA",
    "public: void __thiscall CIniW::SetPrimaryFile(unsigned short const *)",
    "MakeBold",
    "CmStripFileNameW",
    "CmLoadImageW",
    "public: unsigned long __thiscall CIniW::GPPI(unsigned short const *,unsigned short const *,unsigned long)const",
    "public: void __thiscall CIniW::SetPrimaryRegPath(unsigned short const *)",
    "public: class CRandom & __thiscall CRandom::operator=(class CRandom const &)",
    "CmStrCpyAllocA",
    "public: void __thiscall CmLogFile::Banner(void)",
    "CmMalloc",
    "public: char const * __thiscall CIniA::GetFile(void)const",
    "CmStrTrimW",
    "GetOSMajorVersion",
    "public: char * __thiscall CIniA::GPPS(char const *,char const *,char const *)const",
    "protected: int __thiscall CIniW::CIniW_DeleteEntryFromReg(struct HKEY__ *,unsigned short const *,unsigned short const *)const",
    "public: class CmLogFile & __thiscall CmLogFile::operator=(class CmLogFile const &)",
    "CmFmtMsgW",
    "CmStrtokA",
    "CmLoadIconA",
    "public: char const * __thiscall CIniA::GetPrimaryFile(void)const",
    "public: unsigned short const * __thiscall CIniW::GetPrimaryFile(void)const",
    "public: __thiscall CmLogFile::~CmLogFile(void)",
    "CmStripPathAndExtW",
    "public: void __thiscall CIniW::SetEntry(unsigned short const *)",
    "CmEndOfStrW",
    "public: char const * __thiscall CIniA::GetSection(void)const",
    "protected: int __thiscall CIniW::CIniW_WriteEntryToReg(struct HKEY__ *,unsigned short const *,unsigned short const *,unsigned char const *,unsigned long,unsigned long)const",
    "CmConvertStrToIPv6AddrA",
    "public: void __thiscall CIniW::SetICSDataPath(unsigned short const *)",
    "CmStrCatAllocA",
    "IsLogonAsSystem",
    "CmConvertRelativePathW",
    "private: long __thiscall CmLogFile::CloseFile(void)",
    "CmConvertStrToIPv6AddrW",
    "public: void __thiscall CIniA::SetPrimaryRegPath(char const *)",
    "private: long __thiscall CmLogFile::Write(unsigned short *)",
    "public: void __thiscall CIniA::SetSection(char const *)",
    "public: long __thiscall CmLogFile::Stop(void)",
    "public: __thiscall CIniW::~CIniW(void)",
    "public: char const * __thiscall CIniA::GetRegPath(void)const",
    "public: __thiscall CIniA::~CIniA(void)",
    "CmIsDigitW",
    "public: unsigned short const * __thiscall CIniW::GetSection(void)const",
    "IsFarEastNonOSR2Win95",
    "CmLoadSmallIconA",
    "CmStrCharStuffingA",
    "public: static unsigned long const CIniW::kMaxValueLength",
    "public: void __cdecl CmLogFile::Log(enum _CMLOG_ITEM,...)",
    "public: unsigned short const * __thiscall CIniW::GetFile(void)const",
    "CmRealloc",
    "public: void __thiscall CIniA::SetRegPath(char const *)",
    "protected: int __thiscall CIniA::CIniA_DeleteEntryFromReg(struct HKEY__ *,char const *,char const *)const",
    "public: int __thiscall CIniA::GPPB(char const *,char const *,int)const",
    "CmIsSpaceW",
    "protected: unsigned char * __thiscall CIniW::CIniW_GetEntryFromReg(struct HKEY__ *,unsigned short const *,unsigned short const *,unsigned long,unsigned long)const",
    "public: __thiscall CmLogFile::CmLogFile(void)",
    "public: class CIniW & __thiscall CIniW::operator=(class CIniW const &)",
    "public: long __thiscall CmLogFile::SetParams(int,unsigned long,char const *)",
    "public: void __thiscall CmLogFile::Clear(int)",
    "public: unsigned long __thiscall CIniA::GPPI(char const *,char const *,unsigned long)const",
    "public: int __thiscall CmLogFile::IsEnabled(void)",
    "public: __thiscall CIniW::CIniW(struct HINSTANCE__ *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "CmStrchrA",
    "public: int __thiscall CIniW::GPPB(unsigned short const *,unsigned short const *,int)const",
    "public: void __thiscall CIniW::SetReadICSData(int)",
    "WzToSzWithAlloc",
    "CmAtolW",
    "public: struct HINSTANCE__ * __thiscall CIniW::GetHInst(void)const",
    "public: long __thiscall CmLogFile::DeInit(void)",
    "public: struct HINSTANCE__ * __thiscall CIniA::GetHInst(void)const",
    "CmWinHelp",
    "CmStrrchrW",
    "public: void __thiscall CIniW::SetEntryFromIdx(unsigned long)",
    "CmStrCharCountA",
    "public: unsigned short const * __thiscall CmLogFile::GetLogFilePath(void)",
    "WzToSz",
    "CmMoveMemory",
    "SzToWz",
    "protected: static void __stdcall CIniA::CIni_SetFile(char * *,char const *)",
    "private: long __thiscall CmLogFile::OpenFile(void)",
    "public: long __thiscall CmLogFile::Init(struct HINSTANCE__ *,int,unsigned short const *)",
    "public: char const * __thiscall CIniA::GetPrimaryRegPath(void)const",
    "public: void __thiscall CIniA::WPPI(char const *,char const *,unsigned long)",
    "public: void __thiscall CIniW::WPPS(unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: char * __thiscall CIniA::LoadSection(char const *)const",
    "public: void __thiscall CIniA::SetHInst(struct HINSTANCE__ *)",
    "CmStrtokW",
    "public: void __thiscall CIniW::WPPI(unsigned short const *,unsigned short const *,unsigned long)",
    "CmFree",
    "public: void __thiscall CIniW::WPPB(unsigned short const *,unsigned short const *,int)",
    "CmBuildFullPathFromRelativeW",
    "CmFmtMsgA",
    "CmStrCpyAllocW",
    "public: void __thiscall CIniW::SetRegPath(unsigned short const *)",
    "public: void __thiscall CIniA::SetEntry(char const *)",
    "public: int __thiscall CRandom::Generate(void)",
    "public: void __thiscall CIniW::Clear(void)",
    "CmLoadIconW",
    "public: unsigned short const * __thiscall CIniW::GetPrimaryRegPath(void)const",
    "protected: int __thiscall CIniA::CIniA_WriteEntryToReg(struct HKEY__ *,char const *,char const *,unsigned char const *,unsigned long,unsigned long)const",
    "public: __thiscall CIniA::CIniA(struct HINSTANCE__ *,char const *,char const *,char const *,char const *)",
    "protected: static void __stdcall CIniW::CIni_SetFile(unsigned short * *,unsigned short const *)",
    "CmLoadSmallIconW",
    "public: __thiscall CRandom::CRandom(void)",
    "public: void __thiscall CIniW::SetSection(unsigned short const *)",
    "public: void __thiscall CIniA::SetFile(char const *)",
    "SzToWzWithAlloc",
    "public: void __thiscall CIniW::SetWriteICSData(int)",
    "public: unsigned short * __thiscall CIniW::LoadSection(unsigned short const *)const",
    "public: void __thiscall CIniW::`default constructor closure'(void)",
    "public: long __thiscall CmLogFile::SetParams(int,unsigned long,unsigned short const *)",
    "public: void __thiscall CIniA::Clear(void)",
    "public: void __thiscall CIniW::SetFile(unsigned short const *)",
    "CmStrCharStuffingW",
    "CmParsePathW",
    "CmAtolA",
    "public: unsigned short * __thiscall CIniW::GPPS(unsigned short const *,unsigned short const *,unsigned short const *)const",
    "CmStrchrW",
    "public: void __thiscall CIniW::SetHInst(struct HINSTANCE__ *)",
    "CmStrCharCountW",
    "public: void __thiscall CIniA::SetICSDataPath(char const *)",
    "CmLoadStringW",
    "CmStrrchrA",
    "public: unsigned short const * __thiscall CIniW::GetRegPath(void)const",
    "CmCompareStringW",
    "CmStrStrA",
    "public: long __thiscall CmLogFile::Start(int)",
    "public: class CIniA & __thiscall CIniA::operator=(class CIniA const &)",
    "public: void __thiscall CIniA::`default constructor closure'(void)",
    "public: void __thiscall CIniA::WPPB(char const *,char const *,int)",
    "protected: unsigned short * __thiscall CIniW::LoadEntry(unsigned short const *)const",
    "GetOSVersion",
    "public: void __thiscall CIniA::SetEntryFromIdx(unsigned long)",
    "CmBuildFullPathFromRelativeA",
    "public: __thiscall CRandom::CRandom(unsigned int)",
    "protected: unsigned char * __thiscall CIniA::CIniA_GetEntryFromReg(struct HKEY__ *,char const *,char const *,unsigned long,unsigned long)const",
    "private: void __thiscall CmLogFile::FormatWrite(enum _CMLOG_ITEM,unsigned short *)",
    "CmStrStrW",
    "GetOSBuildNumber",
    "public: void __thiscall CIniA::SetPrimaryFile(char const *)",
    "CmCompareStringA",
    "protected: char * __thiscall CIniA::LoadEntry(char const *)const",
    "public: void __thiscall CIniA::WPPS(char const *,char const *,char const *)",
    "ReleaseBold",
    "CmStrCatAllocW",
    "public: void __thiscall CIniA::SetReadICSData(int)",
    "GetOSMinorVersion",
    "public: void __thiscall CRandom::Init(unsigned long)"
  ],
  "cngcredui.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "cngprovider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "cnvfat.dll": [
    "ConvertFAT",
    "IsConversionAvailable"
  ],
  "cofiredm.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "colbact.dll": [
    "GetClassInfoForCurrentUser",
    "GetDefaultPartitionForCurrentUser",
    "GetDefaultPartitionForSid",
    "PartitionAccessCheck",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "colorui.dll": [
    "LaunchColorCpl",
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "combase.dll": [
    "DllGetActivationFactory",
    "CoSetErrorInfo",
    "NdrProxyForwardingFunction30",
    "CoGetClassObject",
    "GetRestrictedErrorInfo",
    "CoFreeUnusedLibrariesEx",
    "CoSetCancelObject",
    "NdrProxyForwardingFunction9",
    "CoDisableCallCancellation",
    "DllDebugObjectRPCHook",
    "WindowsCreateString",
    "CoSuspendClassObjects",
    "CoCopyProxy",
    "CoSwitchCallContext",
    "PropVariantCopy",
    "RoFreeParameterizedTypeExtra",
    "CLSIDFromProgID",
    "CoGetContextToken",
    "NdrExtStubInitialize",
    "ObjectStublessClient19",
    "NdrProxyForwardingFunction32",
    "GetCatalogHelper",
    "InternalServerExceptionFilter",
    "ObjectStublessClient21",
    "WindowsDeleteString",
    "RoGetActivationFactory",
    "CoGetCallerTID",
    "NdrProxyForwardingFunction23",
    "InternalIrotRegister",
    "ObjectStublessClient30",
    "ObjectStublessClient8",
    "CoInitializeSecurity",
    "CoTaskMemRealloc",
    "NdrProxyForwardingFunction29",
    "NdrpFindInterface",
    "ObjectStublessClient17",
    "NdrProxyForwardingFunction3",
    "CoUnmarshalInterface",
    "CoGetInstanceFromIStorage",
    "CoPopServiceDomain",
    "CoRegisterInitializeSpy",
    "CoRegisterSurrogate",
    "InternalIrotGetObject",
    "ObjectStublessClient3",
    "CoReactivateObject",
    "RoResolveRestrictedErrorInfoReference",
    "StringFromGUID2",
    "WindowsTrimStringStart",
    "InternalIsApartmentInitialized",
    "CoWaitForMultipleHandles",
    "CoDecodeProxy",
    "CoIsHandlerConnected",
    "InternalFillLocalOXIDInfo",
    "CoGetCancelObject",
    "NdrProxyForwardingFunction22",
    "RoCaptureErrorContext",
    "CoCreateInstance",
    "WdtpInterfacePointer_UserSize",
    "DllGetClassObject",
    "ObjectStublessClient26",
    "CoEnableCallCancellation",
    "CoGetSystemSecurityPermissions",
    "CoWaitForMultipleObjects",
    "InternalIrotEnumRunning",
    "InternalOleModalLoopBlockFn",
    "RoUnregisterForApartmentShutdown",
    "CoRevokeMallocSpy",
    "CoAddRefServerProcess",
    "CoGetObjectContext",
    "InternalCMLSendReceive",
    "ClearCleanupFlag",
    "ObjectStublessClient24",
    "ObjectStublessClient7",
    "ObjectStublessClient16",
    "CoDecrementMTAUsage",
    "InternalSetAptCallCtrlOnTlsIfRequired",
    "HSTRING_UserUnmarshal",
    "IIDFromString",
    "InternalUnmarshalObjRef",
    "CoCreateGuid",
    "NdrProxyForwardingFunction13",
    "CoResumeClassObjects",
    "InternalNotifyDDStartOrStop",
    "CoRetireServer",
    "InternalCCSetDdeServerWindow",
    "RoFailFastWithErrorContextInternal",
    "RoOriginateErrorW",
    "WindowsDuplicateString",
    "NdrProxyForwardingFunction12",
    "SetErrorInfo",
    "InternalIrotRevoke",
    "ObjectStublessClient27",
    "CoInitializeEx",
    "ObjectStublessClient10",
    "CoInitializeWOW",
    "PropVariantClear",
    "RoTransformError",
    "HkOleRegisterObject",
    "CoCreateFreeThreadedMarshaler",
    "CoGetErrorInfo",
    "CoRevertToSelf",
    "InternalSTAInvoke",
    "InternalCreateCAggId",
    "InternalCreateIdentityHandler",
    "GetFuncDescs",
    "RoSetErrorReportingFlags",
    "StringFromCLSID",
    "CoMarshalInterface",
    "CoQueryClientBlanket",
    "InternalCoRegisterSurrogatedObject",
    "CoUninitialize",
    "UpdateProcessTracing",
    "CoGetStdMarshalEx",
    "GetErrorInfo",
    "NdrProxyForwardingFunction19",
    "RoRevokeActivationFactories",
    "CoCreateInstanceFromApp",
    "NdrProxyForwardingFunction11",
    "CoGetCurrentLogicalThreadId",
    "CoVrfGetThreadState",
    "NdrProxyForwardingFunction18",
    "RoTransformErrorW",
    "InternalSetOleThunkWowPtr",
    "CoGetTreatAsClass",
    "WindowsDeleteStringBuffer",
    "InternalAppInvokeExceptionFilter",
    "RoReportCapabilityCheckFailure",
    "CoGetClassVersion",
    "WindowsConcatString",
    "InternalCallerIsAppContainer",
    "ObjectStublessClient28",
    "WindowsGetStringLen",
    "ObjectStublessClient31",
    "CoRegisterSurrogateEx",
    "WindowsStringHasEmbeddedNull",
    "InternalGetWindowPropInterface",
    "CoRevokeInitializeSpy",
    "WindowsCreateStringReference",
    "InternalCompleteObjRef",
    "InternalIsProcessInitialized",
    "CoAllowUnmarshalerCLSID",
    "CoRevokeClassObject",
    "CoDisconnectObject",
    "CoGetInstanceFromFile",
    "InternalFreeObjRef",
    "CoMarshalHresult",
    "InternalIrotNoteChangeTime",
    "WindowsSubstringWithSpecifiedLength",
    "RoInitialize",
    "NdrProxyForwardingFunction20",
    "ObjectStublessClient11",
    "RoGetErrorReportingFlags",
    "CoGetActivationState",
    "NdrOleDllGetClassObject",
    "WindowsPromoteStringBuffer",
    "CoCancelCall",
    "CoQueryProxyBlanket",
    "CoCreateErrorInfo",
    "EnableHookObject",
    "ObjectStublessClient6",
    "CleanupOleStateInAllTls",
    "CoSetProxyBlanket",
    "CreateStreamOnHGlobal",
    "HSTRING_UserSize",
    "ObjectStublessClient9",
    "RoRegisterActivationFactories",
    "CLSIDFromString",
    "CoPushServiceDomain",
    "InternalCanMakeOutCall",
    "ObjectStublessClient12",
    "CoRegisterMallocSpy",
    "ObjectStublessClient13",
    "SetCleanupFlag",
    "CoRegisterClassObject",
    "NdrProxyForwardingFunction8",
    "RoFailFastWithErrorContext",
    "NdrProxyForwardingFunction16",
    "CoTestCancel",
    "RoOriginateError",
    "ObjectStublessClient14",
    "WindowsTrimStringEnd",
    "CoGetApartmentType",
    "NdrProxyForwardingFunction5",
    "CoGetCallContext",
    "WindowsGetStringRawBuffer",
    "CoDisconnectContext",
    "CoImpersonateClient",
    "InternalIrotGetTimeOfLastChange",
    "ObjectStublessClient25",
    "NdrOleInitializeExtension",
    "WdtpInterfacePointer_UserUnmarshal",
    "GetHookInterface",
    "CoGetMarshalSizeMax",
    "InternalIrotIsRunning",
    "NdrProxyForwardingFunction28",
    "RoRegisterForApartmentShutdown",
    "NdrProxyForwardingFunction25",
    "NdrProxyForwardingFunction24",
    "CoGetCallState",
    "CoRegisterMessageFilter",
    "ObjectStublessClient20",
    "ProgIDFromCLSID",
    "CoGetDefaultContext",
    "StringFromIID",
    "InternalReleaseMarshalObjRef",
    "CoCreateObjectInContext",
    "WindowsReplaceString",
    "InternalCoIsSurrogateProcess",
    "InternalDoATClassCreate",
    "RoUninitialize",
    "NdrProxyForwardingFunction7",
    "InternalCoRegisterDisconnectCallback",
    "NdrProxyForwardingFunction14",
    "WindowsSubstring",
    "ObjectStublessClient22",
    "CoCreateInstanceEx",
    "CoDeactivateObject",
    "FreePropVariantArray",
    "NdrProxyForwardingFunction6",
    "CoFreeUnusedLibraries",
    "CoRegisterPSClsid",
    "GetHGlobalFromStream",
    "CoReleaseMarshalData",
    "CoGetMalloc",
    "CoReleaseServerProcess",
    "CoGetApartmentID",
    "CoQueryAuthenticationServices",
    "CoInvalidateRemoteMachineBindings",
    "ReleaseFuncDescs",
    "CoVrfReleaseThreadState",
    "RoGetParameterizedTypeInstanceIID",
    "CoTaskMemFree",
    "UpdateDCOMSettings",
    "NdrProxyForwardingFunction26",
    "CoGetPSClsid",
    "CoVrfCheckThreadState",
    "NdrProxyForwardingFunction15",
    "CoGetProcessIdentifier",
    "InternalCCGetClassInformationForDde",
    "InternalRegisterWindowPropInterface",
    "CoUnloadingWOW",
    "NdrProxyForwardingFunction27",
    "CoGetCurrentProcess",
    "RoParameterizedTypeExtraGetTypeSignature",
    "CoTaskMemAlloc",
    "ObjectStublessClient23",
    "CoMarshalInterThreadInterfaceInStream",
    "InternalCCFreeUnused",
    "ObjectStublessClient15",
    "InternalTlsAllocData",
    "CoGetStandardMarshal",
    "ObjectStublessClient18",
    "CoUnmarshalHresult",
    "CoIncrementMTAUsage",
    "NdrProxyForwardingFunction10",
    "HSTRING_UserMarshal",
    "WindowsInspectString",
    "CreateErrorInfo",
    "RoActivateInstance",
    "WdtpInterfacePointer_UserMarshal",
    "RoGetServerActivatableClasses",
    "FreePropVariantArrayWorker",
    "InternalCoUnregisterDisconnectCallback",
    "NdrProxyForwardingFunction31",
    "InternalCallFrameExceptionFilter",
    "WindowsCompareStringOrdinal",
    "InternalCCGetClassInformationFromKey",
    "CoLockObjectExternal",
    "CleanupTlsOleState",
    "InternalStubInvoke",
    "InternalMarshalObjRef",
    "SetRestrictedErrorInfo",
    "HSTRING_UserFree",
    "RoGetApartmentIdentifier",
    "CoGetInterfaceAndReleaseStream",
    "InternalCallAsProxyExceptionFilter",
    "InternalCoStdMarshalObject",
    "RoGetActivatableClassRegistration",
    "ObjectStublessClient29",
    "ObjectStublessClient4",
    "WindowsPreallocateStringBuffer",
    "NdrProxyForwardingFunction4",
    "DcomChannelSetHResult",
    "NdrProxyForwardingFunction17",
    "CoGetModuleType",
    "ObjectStublessClient32",
    "CLSIDFromOle1Class",
    "ObjectStublessClient5",
    "WindowsIsStringEmpty",
    "NdrProxyForwardingFunction21"
  ],
  "comcat.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "comctl32.dll": [
    "DSA_SetItem",
    "ImageList_DragLeave",
    "DPA_SetPtr",
    "DSA_Destroy",
    "ImageList_GetIconSize",
    "DPA_Merge",
    "DSA_GetItemPtr",
    "DPA_SaveStream",
    "CreateToolbar",
    "DestroyPropertySheetPage",
    "ImageList_GetDragImage",
    "DPA_InsertPtr",
    "FlatSB_GetScrollPos",
    "ImageList_Merge",
    "ImageList_SetDragCursorImage",
    "GetEffectiveClientRect",
    "CreateStatusWindowW",
    "InitCommonControlsEx",
    "ImageList_GetFlags",
    "CreatePropertySheetPage",
    "ImageList_Create",
    "ImageList_GetImageRect",
    "ImageList_DrawEx",
    "DPA_CreateEx",
    "ImageList_Read",
    "AddMRUStringW",
    "ShowHideMenuCtl",
    "FreeMRUList",
    "DSA_DestroyCallback",
    "LBItemFromPt",
    "DrawStatusText",
    "Str_SetPtrW",
    "ImageList_Destroy",
    "DrawInsert",
    "DPA_Grow",
    "CreatePropertySheetPageW",
    "ImageList_Copy",
    "RegisterClassNameW",
    "CreateUpDownControl",
    "InitializeFlatSB",
    "SetWindowSubclass",
    "FlatSB_SetScrollRange",
    "PropertySheetA",
    "ImageList_BeginDrag",
    "CreatePropertySheetPageA",
    "ImageList_Replace",
    "DrawStatusTextW",
    "RemoveWindowSubclass",
    "DllGetVersion",
    "FlatSB_GetScrollInfo",
    "ImageList_SetFilter",
    "ImageList_GetImageCount",
    "FlatSB_SetScrollProp",
    "InitMUILanguage",
    "ImageList_Draw",
    "DPA_EnumCallback",
    "ImageList_SetBkColor",
    "DPA_Create",
    "CreateMappedBitmap",
    "DefSubclassProc",
    "FlatSB_GetScrollProp",
    "ImageList_LoadImageW",
    "ImageList_DragMove",
    "DPA_Search",
    "ImageList_GetImageInfo",
    "UninitializeFlatSB",
    "DSA_Create",
    "DSA_InsertItem",
    "ImageList_SetOverlayImage",
    "DSA_EnumCallback",
    "ImageList_DrawIndirect",
    "FlatSB_SetScrollInfo",
    "DSA_GetItem",
    "FlatSB_GetScrollRange",
    "InitCommonControls",
    "ImageList_Remove",
    "ImageList_SetImageCount",
    "CreateStatusWindow",
    "CreateToolbarEx",
    "DPA_GetPtrIndex",
    "DPA_LoadStream",
    "ImageList_DragEnter",
    "ImageList_DragShowNolock",
    "DPA_DestroyCallback",
    "ImageList_Duplicate",
    "_TrackMouseEvent",
    "DPA_Destroy",
    "ImageList_AddMasked",
    "CreateMRUListW",
    "DPA_DeleteAllPtrs",
    "DSA_DeleteItem",
    "DSA_DeleteAllItems",
    "DPA_GetPtr",
    "ImageList_SetIconSize",
    "DrawStatusTextA",
    "GetMUILanguage",
    "ImageList_EndDrag",
    "CreateStatusWindowA",
    "DPA_Clone",
    "ImageList_LoadImage",
    "PropertySheet",
    "ImageList_SetFlags",
    "PropertySheetW",
    "FlatSB_EnableScrollBar",
    "DPA_Sort",
    "ImageList_ReplaceIcon",
    "ImageList_GetIcon",
    "ImageList_Write",
    "ImageList_Add",
    "ImageList_GetBkColor",
    "ImageList_LoadImageA",
    "MakeDragList",
    "MenuHelp",
    "FlatSB_SetScrollPos",
    "DPA_DeletePtr",
    "ImageList_AddIcon",
    "EnumMRUListW",
    "FlatSB_ShowScrollBar"
  ],
  "comdlg32.dll": [
    "PrintDlgW",
    "LoadAlterBitmap",
    "ReplaceTextW",
    "GetSaveFileNameW",
    "FindTextW",
    "ChooseFontW",
    "PageSetupDlgA",
    "CommDlgExtendedError",
    "PrintDlgExW",
    "DllCanUnloadNow",
    "WantArrows",
    "PrintDlgA",
    "ChooseFontA",
    "GetSaveFileNameA",
    "GetFileTitleW",
    "PrintDlgExA",
    "dwOKSubclass",
    "GetOpenFileNameA",
    "ChooseColorW",
    "DllGetClassObject",
    "GetOpenFileNameW",
    "ChooseColorA",
    "dwLBSubclass",
    "Ssync_ANSI_UNICODE_Struct_For_WOW",
    "FindTextA",
    "GetFileTitleA",
    "ReplaceTextA",
    "PageSetupDlgW"
  ],
  "compstui.dll": [
    "GetCPSUIUserData",
    "SetCPSUIUserData",
    "CommonPropertySheetUIA",
    "CommonPropertySheetUIW"
  ],
  "comrepl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "comres.dll": "No exports",
  "comsnap.dll": [
    "InstallDsExtension",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "comsvcs.dll": [
    "CosGetCallContext",
    "ComSvcsLogError",
    "DispManGetContext",
    "DllRegisterServer",
    "DllUnregisterServer",
    "GetTrkSvrObject",
    "MTSCreateActivity",
    "DllCanUnloadNow",
    "GetObjectContext",
    "ComSvcsExceptionFilter",
    "CoEnterServiceDomain",
    "DllGetClassObject",
    "CoLoadServices",
    "RecycleSurrogate",
    "GetManagedExtensions",
    "GetMTAThreadPoolMetrics",
    "MiniDumpW",
    "CoLeaveServiceDomain",
    "SafeRef",
    "CoCreateActivity"
  ],
  "comuid.dll": [
    "CreateDCOMSecurityUIPage",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "connect.dll": [
    "AddConnectionOptionListEntries",
    "IsInternetConnectedGUID",
    "CreateVPNConnection",
    "HrIsInternetConnectedGUID",
    "GetNetworkConnected",
    "GetVPNConnected",
    "UnregisterPage",
    "GetInternetConnected",
    "UnregisterPagesLink",
    "IsInternetConnected",
    "RegisterPageWithPage",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "HrIsInternetConnected",
    "IsUniqueConnectionName"
  ],
  "console.dll": [
    "CPlApplet"
  ],
  "correngine.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "credssp.dll": [
    "InitSecurityInterfaceW",
    "SpImportSecurityContextW",
    "SpSetContextAttributesW",
    "SpRevertSecurityContext",
    "SpExportSecurityContext",
    "SpAcceptSecurityContext",
    "SpVerifySignature",
    "SpFreeCredentialsHandle",
    "SpAcquireCredentialsHandleW",
    "SpCompleteAuthToken",
    "SpInitializeSecurityContextW",
    "SpAddCredentialsW",
    "SpImpersonateSecurityContext",
    "SpMakeSignature",
    "SpApplyControlToken",
    "SpQuerySecurityContextToken",
    "SpEnumerateSecurityPackagesW",
    "SpSetCredentialsAttributesW",
    "SpDeleteSecurityContext",
    "SpQueryCredentialsAttributesW",
    "SpQueryContextAttributesW",
    "SpFreeContextBuffer",
    "SpChangeAccountPasswordW",
    "SpDecryptMessage",
    "SpEncryptMessage",
    "SpQuerySecurityPackageInfoW"
  ],
  "credui.dll": [
    "CredUIPromptForWindowsCredentialsW",
    "CredUnPackAuthenticationBufferA",
    "CredUnPackAuthenticationBufferW",
    "SspiPromptForCredentialsW",
    "CredUIConfirmCredentialsA",
    "CredUIPromptForCredentialsW",
    "SspiUnmarshalCredUIContext",
    "DllRegisterServer",
    "DllUnregisterServer",
    "CredUIInitControls",
    "CredUIStoreSSOCredA",
    "SspiUpdateCredentials",
    "CredUICmdLinePromptForCredentialsA",
    "DllCanUnloadNow",
    "CredUIReadSSOCredW",
    "CredUICmdLinePromptForCredentialsW",
    "SspiPromptForCredentialsA",
    "SspiIsPromptingNeeded",
    "CredUIConfirmCredentialsW",
    "CredUIPromptForWindowsCredentialsA",
    "DllGetClassObject",
    "CredUIPromptForCredentialsA",
    "CredUIPromptForWindowsCredentialsWorker",
    "CredUIParseUserNameW",
    "CredUIParseUserNameA",
    "CredUIReadSSOCredA",
    "CredPackAuthenticationBufferA",
    "CredPackAuthenticationBufferW",
    "SspiGetCredUIContext",
    "CredUIStoreSSOCredW"
  ],
  "crtdll.dll": [
    "gmtime",
    "_ismbslead",
    "memchr",
    "_mbsrchr",
    "_loaddll",
    "_baseversion_dll",
    "vwprintf",
    "_spawnle",
    "fgetc",
    "wcscoll",
    "_CIpow",
    "_strset",
    "putchar",
    "abort",
    "_j0",
    "_mbccpy",
    "_fstat",
    "wcsstr",
    "_execle",
    "_CIatan",
    "_copysign",
    "localtime",
    "_vsnwprintf",
    "_assert",
    "_mbsstr",
    "isdigit",
    "_getdllprocaddr",
    "_strnicmp",
    "_wcsupr",
    "_heapset",
    "difftime",
    "_onexit",
    "_fileinfo_dll",
    "_fgetwchar",
    "_wcsicmp",
    "__dllonexit",
    "_CIlog10",
    "_osversion_dll",
    "_scalb",
    "_open_osfhandle",
    "exit",
    "_stricmp",
    "iswctype",
    "_ismbcalpha",
    "fopen",
    "_wcsset",
    "_tzname",
    "_fdopen",
    "_mbsnbcpy",
    "exp",
    "_ismbchira",
    "pow",
    "_putw",
    "fputwc",
    "_cputs",
    "_getw",
    "_mbslwr",
    "fseek",
    "acos",
    "_utime",
    "_mbsicmp",
    "labs",
    "strncpy",
    "_wtol",
    "_y0",
    "_putch",
    "_CIfmod",
    "fwscanf",
    "_chdir",
    "printf",
    "wcsxfrm",
    "_winminor_dll",
    "tanh",
    "__doserrno",
    "_wcsrev",
    "fgetpos",
    "_j1",
    "_except_handler2",
    "fread",
    "_findclose",
    "_tzset",
    "iswalnum",
    "atexit",
    "_mbctombb",
    "_mbstrlen",
    "iswalpha",
    "wcsncat",
    "_ismbbkana",
    "toupper",
    "_mbctolower",
    "_aexit_rtn_dll",
    "realloc",
    "_CItanh",
    "_strerror",
    "log10",
    "system",
    "_stat",
    "asin",
    "_ismbbtrail",
    "_execlp",
    "_ismbbkpunct",
    "_sopen",
    "_mbsnbicmp",
    "_popen",
    "mblen",
    "_msize",
    "_strtime",
    "_flushall",
    "_osminor_dll",
    "wcsftime",
    "_ultoa",
    "_mbsrev",
    "_umask",
    "_CIlog",
    "_lrotr",
    "_ismbclegal",
    "_gcvt",
    "_execlpe",
    "_ismbcupper",
    "_read",
    "ldiv",
    "_timezone_dll",
    "_tempnam",
    "wcstombs",
    "_getdiskfree",
    "_commode_dll",
    "strspn",
    "_mbctoupper",
    "strcat",
    "vswprintf",
    "__threadhandle",
    "_dup",
    "_logb",
    "wprintf",
    "_strcmpi",
    "_ctype",
    "memset",
    "_cexit",
    "cosh",
    "rand",
    "fputs",
    "_cpumode_dll",
    "_spawnlpe",
    "sqrt",
    "_strlwr",
    "sinh",
    "_mbscpy",
    "_strdate",
    "strrchr",
    "_mbcjmstojis",
    "_memccpy",
    "_mbclen",
    "_mbcjistojms",
    "_ismbbpunct",
    "_snprintf",
    "wcstoul",
    "_mbctohira",
    "wcscpy",
    "_mbslen",
    "_creat",
    "_ultow",
    "_nextafter",
    "clock",
    "div",
    "_mbctokata",
    "_swab",
    "iswprint",
    "_chmod",
    "_execve",
    "_winmajor_dll",
    "tolower",
    "_cabs",
    "_jn",
    "_ismbbgraph",
    "_makepath",
    "vfwprintf",
    "getc",
    "__GetMainArgs",
    "fgets",
    "strncat",
    "is_wctype",
    "_mbbtombc",
    "_lrotl",
    "_close",
    "_mbsupr",
    "wcslen",
    "__threadid",
    "_cscanf",
    "_mbspbrk",
    "abs",
    "_wcsnicmp",
    "_mbsset",
    "_global_unwind2",
    "_CIsin",
    "_ismbblead",
    "_write",
    "fclose",
    "_ismbcprint",
    "setvbuf",
    "_ltoa",
    "wcsncpy",
    "_CItan",
    "_fcvt",
    "_eof",
    "_sleep",
    "_wcsicoll",
    "_wcsnset",
    "fmod",
    "strtol",
    "_rmdir",
    "_execl",
    "_hypot",
    "_mbsncmp",
    "vfprintf",
    "swprintf",
    "_ftol",
    "fscanf",
    "_clearfp",
    "isalpha",
    "_ismbcl2",
    "towupper",
    "_mbstok",
    "_execv",
    "_fcloseall",
    "_beep",
    "_expand",
    "_baseminor_dll",
    "clearerr",
    "memmove",
    "scanf",
    "_spawnl",
    "_mbsnbcnt",
    "_sys_nerr_dll",
    "iswgraph",
    "_isctype",
    "_getche",
    "_osmajor_dll",
    "_fpclass",
    "_mbsspnp",
    "__isascii",
    "_ltow",
    "_y1",
    "wcschr",
    "_spawnvp",
    "_splitpath",
    "_mktemp",
    "cos",
    "_endthread",
    "_amsg_exit",
    "signal",
    "_futime",
    "_fputchar",
    "_mbsncpy",
    "_getch",
    "__iscsymf",
    "_osver_dll",
    "wcsspn",
    "_getdcwd",
    "_daylight_dll",
    "_yn",
    "void __cdecl operator delete(void *)",
    "rename",
    "atof",
    "_HUGE_dll",
    "_cprintf",
    "_mbsnbcat",
    "tan",
    "__toascii",
    "wcsrchr",
    "tmpnam",
    "memcpy",
    "_rmtmp",
    "_toupper",
    "_pctype_dll",
    "wcsncmp",
    "_getsystime",
    "free",
    "strftime",
    "_CIsqrt",
    "iswpunct",
    "isleadbyte",
    "_spawnlp",
    "wcstol",
    "_mbsbtype",
    "floor",
    "_local_unwind2",
    "ungetwc",
    "_mbsdec",
    "islower",
    "_fgetchar",
    "_seterrormode",
    "strchr",
    "fgetwc",
    "_getdrives",
    "time",
    "_kbhit",
    "wcspbrk",
    "_strdup",
    "isprint",
    "_lseek",
    "isspace",
    "_isnan",
    "_isatty",
    "memcmp",
    "_findnext",
    "_CIacos",
    "wscanf",
    "_mbsnset",
    "ungetc",
    "_purecall",
    "void * __cdecl operator new(unsigned int)",
    "_mbsninc",
    "_CIcos",
    "fabs",
    "__fpecode",
    "_mbscat",
    "frexp",
    "_mbsdup",
    "sin",
    "_ismbcdigit",
    "ldexp",
    "_chdrive",
    "_heapmin",
    "_pclose",
    "_lsearch",
    "isgraph",
    "_strupr",
    "strcmp",
    "_flsbuf",
    "putc",
    "_chsize",
    "getenv",
    "fwprintf",
    "malloc",
    "rewind",
    "_ismbcl1",
    "iswupper",
    "iswascii",
    "strcspn",
    "_spawnv",
    "_ismbcspace",
    "asctime",
    "swscanf",
    "wcscspn",
    "fputc",
    "_dup2",
    "_mkdir",
    "_tolower",
    "_mbsinc",
    "_wcsdup",
    "_ismbcl0",
    "_itow",
    "_vsnprintf",
    "_wtoi",
    "_fsopen",
    "_ismbckata",
    "_filelength",
    "_cwait",
    "_tell",
    "__iscsym",
    "_exit",
    "_environ_dll",
    "_XcptFilter",
    "_spawnvpe",
    "_searchenv",
    "ferror",
    "_mbsnbset",
    "_get_osfhandle",
    "_strrev",
    "_unloaddll",
    "atan2",
    "gets",
    "strncmp",
    "__mb_cur_max_dll",
    "_locking",
    "_ftime",
    "_CIasin",
    "fflush",
    "_commit",
    "calloc",
    "_memicmp",
    "_spawnve",
    "ctime",
    "vsprintf",
    "_ismbbalnum",
    "strerror",
    "feof",
    "_setjmp",
    "qsort",
    "_findfirst",
    "setbuf",
    "_snwprintf",
    "strpbrk",
    "remove",
    "_fmode_dll",
    "_lfind",
    "atoi",
    "iscntrl",
    "_getdrive",
    "raise",
    "strstr",
    "_strinc",
    "strtok",
    "_heapwalk",
    "isxdigit",
    "_abnormal_termination",
    "_mbctype",
    "wcstok",
    "_strnextc",
    "_heapchk",
    "iswlower",
    "modf",
    "__argv_dll",
    "wcscat",
    "_pgmptr_dll",
    "_mbsnccnt",
    "iswdigit",
    "localeconv",
    "strlen",
    "_setsystime",
    "_filbuf",
    "_ismbbprint",
    "_setmode",
    "_ismbbkalnum",
    "_fileno",
    "_itoa",
    "_mbsnicmp",
    "fprintf",
    "strtod",
    "_mbscmp",
    "towlower",
    "_strninc",
    "_sys_errlist",
    "strcoll",
    "_mbsnextc",
    "bsearch",
    "_rotr",
    "_wcslwr",
    "_CIcosh",
    "fsetpos",
    "strxfrm",
    "srand",
    "_access",
    "_ismbbalpha",
    "_ismbstrail",
    "_mbsnbcmp",
    "_finite",
    "_CIsinh",
    "_winver_dll",
    "_strncnt",
    "int (__cdecl*__cdecl _set_new_handler(int (__cdecl*)(unsigned int)))(unsigned int)",
    "_rotl",
    "_strnset",
    "wcscmp",
    "isalnum",
    "isupper",
    "setlocale",
    "_execvp",
    "_strspnp",
    "_acmdln_dll",
    "_ismbclower",
    "_control87",
    "mbtowc",
    "_pwctype_dll",
    "__pxcptinfoptrs",
    "log",
    "_strdec",
    "_errno",
    "_open",
    "wctomb",
    "_mbsncat",
    "_getpid",
    "_mbschr",
    "_beginthread",
    "_chgsign",
    "mbstowcs",
    "_iob",
    "_controlfp",
    "_initterm",
    "_putenv",
    "ispunct",
    "puts",
    "__argc_dll",
    "_cgets",
    "_statusfp",
    "_unlink",
    "freopen",
    "strcpy",
    "_getcwd",
    "_fputwchar",
    "_ungetch",
    "getchar",
    "_matherr",
    "ceil",
    "wcstod",
    "iswspace",
    "tmpfile",
    "_osmode_dll",
    "vprintf",
    "strtoul",
    "_CIexp",
    "fwrite",
    "_basemajor_dll",
    "_ecvt",
    "_pipe",
    "mktime",
    "_mbscspn",
    "_execvpe",
    "_mbbtype",
    "atol",
    "iswcntrl",
    "_mbsspn",
    "_fpreset",
    "sprintf",
    "sscanf",
    "atan",
    "iswxdigit",
    "_ismbcsymbol",
    "ftell",
    "_stricoll",
    "_fullpath",
    "_fpieee_flt",
    "_CIatan2",
    "_c_exit",
    "longjmp",
    "perror"
  ],
  "crypt32.dll": [
    "CertCompareIntegerBlob",
    "CryptSetAsyncParam",
    "CryptFreeOIDFunctionAddress",
    "CertEnumSystemStore",
    "CryptBinaryToStringA",
    "CryptMsgClose",
    "I_CertSyncStore",
    "CertRegisterPhysicalStore",
    "CertFreeCertificateChain",
    "CryptMsgVerifyCountersignatureEncodedEx",
    "CryptQueryObject",
    "CertFreeCTLContext",
    "CertUnregisterSystemStore",
    "CertFindAttribute",
    "CertAddCertificateContextToStore",
    "CryptGetOIDFunctionValue",
    "CryptSIPRetrieveSubjectGuid",
    "CertAlgIdToOID",
    "CryptSetOIDFunctionValue",
    "CryptUpdateProtectedState",
    "I_CryptInstallOssGlobal",
    "RegEnumValueU",
    "CryptCloseAsyncHandle",
    "CryptUninstallDefaultContext",
    "CryptVerifySignatureU",
    "CryptMemRealloc",
    "CertComparePublicKeyInfo",
    "I_CryptGetAsn1Decoder",
    "CryptHashCertificate",
    "CryptVerifyCertificateSignatureEx",
    "CertGetCRLFromStore",
    "CertAddCRLContextToStore",
    "CryptStringToBinaryW",
    "I_CryptInstallAsn1Module",
    "I_CryptRemoveLruEntry",
    "CryptMsgCalculateEncodedLength",
    "CryptHashPublicKeyInfo",
    "CertOIDToAlgId",
    "CertIsRDNAttrsInCertificateName",
    "CertOpenServerOcspResponse",
    "CryptGetAsyncParam",
    "CryptRegisterOIDFunction",
    "CertAddCTLLinkToStore",
    "CertCreateCTLEntryFromCertificateContextProperties",
    "CertDeleteCRLFromStore",
    "CryptEncodeObject",
    "CertEnumPhysicalStore",
    "CryptMsgOpenToDecode",
    "CryptVerifyMessageSignature",
    "I_CryptDisableLruOfEntries",
    "CertEnumCRLContextProperties",
    "CertFindSubjectInCTL",
    "I_CertProtectFunction",
    "CertGetSubjectCertificateFromStore",
    "CertRetrieveLogoOrBiometricInfo",
    "CryptMemAlloc",
    "CryptSIPGetSignedDataMsg",
    "RegSetValueExU",
    "CertAddEncodedCRLToStore",
    "CryptUnprotectMemory",
    "CryptInstallOIDFunctionAddress",
    "CryptSIPCreateIndirectData",
    "CryptMsgDuplicate",
    "CertVerifyValidityNesting",
    "CryptStringToBinaryA",
    "I_CryptUninstallAsn1Module",
    "CryptObjectLocatorGetContent",
    "CryptSIPPutSignedDataMsg",
    "CryptSignAndEncryptMessage",
    "CertGetCertificateContextProperty",
    "I_CryptSetTls",
    "CertEnumCertificatesInStore",
    "CertDuplicateCertificateChain",
    "CertFindCRLInStore",
    "CryptAcquireCertificatePrivateKey",
    "CryptExportPKCS8",
    "CryptRegisterOIDInfo",
    "CertRDNValueToStrW",
    "CryptDecryptMessage",
    "CertRDNValueToStrA",
    "CryptFindLocalizedName",
    "I_CryptAllocTls",
    "CertAddCertificateLinkToStore",
    "CertAddRefServerOcspResponse",
    "CertIsValidCRLForCertificate",
    "CryptExportPublicKeyInfo",
    "I_CryptFreeLruCache",
    "CryptSIPAddProvider",
    "CertEnumCTLsInStore",
    "CertSetStoreProperty",
    "CertFindChainInStore",
    "PFXVerifyPassword",
    "I_CryptGetTls",
    "CertEnumCTLContextProperties",
    "CryptRetrieveTimeStamp",
    "CertFindSubjectInSortedCTL",
    "CryptFormatObject",
    "CryptHashToBeSigned",
    "I_CertSrvProtectFunction",
    "RegQueryValueExU",
    "CertEnumCRLsInStore",
    "CertGetValidUsages",
    "CryptImportPKCS8",
    "I_CryptEnumMatchingLruEntries",
    "CertSetEnhancedKeyUsage",
    "I_CryptDetachTls",
    "I_CryptGetDefaultCryptProv",
    "CertGetEnhancedKeyUsage",
    "CertNameToStrA",
    "PFXExportCertStore",
    "RegCreateHKCUKeyExU",
    "CertAddSerializedElementToStore",
    "PFXExportCertStore2",
    "CertGetPublicKeyLength",
    "CryptLoadSip",
    "CryptObjectLocatorIsChanged",
    "CryptDecodeObjectEx",
    "I_CryptGetFileVersion",
    "CryptEncryptMessage",
    "CryptUnregisterDefaultOIDFunction",
    "CertVerifyTimeValidity",
    "CertAddEncodedCTLToStore",
    "CryptVerifyTimeStampSignature",
    "CryptDecodeObject",
    "RegOpenHKCUKeyExU",
    "CertVerifySubjectCertificateContext",
    "CertGetIssuerCertificateFromStore",
    "CryptMsgEncodeAndSignCTL",
    "CryptGetMessageSignerCount",
    "I_CryptFreeTls",
    "I_CryptGetLruEntryData",
    "CryptMsgGetParam",
    "CertSetCertificateContextPropertiesFromCTLEntry",
    "CertCreateSelfSignCertificate",
    "CryptSIPVerifyIndirectData",
    "CryptMsgUpdate",
    "I_CryptAddSmartCardCertToStore",
    "I_CryptGetOssGlobal",
    "CryptSetProviderU",
    "CertCreateCertificateChainEngine",
    "PFXImportCertStore",
    "CertCreateContext",
    "CertRemoveEnhancedKeyUsageIdentifier",
    "CertEnumCertificateContextProperties",
    "CertFreeCertificateChainList",
    "CertFreeServerOcspResponseContext",
    "CertDeleteCTLFromStore",
    "CertGetNameStringA",
    "CertSetCertificateContextProperty",
    "CertVerifyRevocation",
    "CryptImportPublicKeyInfo",
    "CryptSignMessage",
    "I_CryptReleaseLruEntry",
    "CertAddStoreToCollection",
    "PFXExportCertStoreEx",
    "CertSerializeCTLStoreElement",
    "CertEnumSystemStoreLocation",
    "CertControlStore",
    "CertOpenSystemStoreA",
    "CryptCreateKeyIdentifierFromCSP",
    "CryptGetMessageCertificates",
    "I_CryptCreateLruCache",
    "PFXIsPFXBlob",
    "CryptEnumOIDInfo",
    "CryptHashMessage",
    "I_CryptGetAsn1Encoder",
    "CryptGetKeyIdentifierProperty",
    "CryptEncodeObjectEx",
    "CryptSIPRemoveProvider",
    "CryptObjectLocatorInitialize",
    "CertCloseStore",
    "CertCreateCertificateContext",
    "CertFreeCRLContext",
    "CertGetCertificateChain",
    "CryptVerifyMessageHash",
    "CryptVerifyDetachedMessageSignature",
    "CryptDecodeMessage",
    "CertAddEncodedCertificateToSystemStoreW",
    "CertCompareCertificate",
    "CryptInstallDefaultContext",
    "CertFindCTLInStore",
    "CertGetIntendedKeyUsage",
    "CryptSIPRemoveSignedDataMsg",
    "CertDuplicateCertificateContext",
    "CryptVerifyMessageSignatureWithKey",
    "CertGetServerOcspResponseContext",
    "I_CryptTouchLruEntry",
    "I_CryptFindLruEntryData",
    "CertAddCTLContextToStore",
    "CertFreeCertificateContext",
    "CryptFindOIDInfo",
    "CertDeleteCertificateFromStore",
    "CertSetCTLContextProperty",
    "CertGetStoreProperty",
    "CryptFindCertificateKeyProvInfo",
    "I_CryptFindLruEntry",
    "CertDuplicateCRLContext",
    "CryptVerifyCertificateSignature",
    "I_CryptInsertLruEntry",
    "I_CertDiagControl",
    "RegCreateKeyExU",
    "CryptMsgVerifyCountersignatureEncoded",
    "I_CryptFlushLruCache",
    "CertSetCRLContextProperty",
    "CryptProtectData",
    "CertRegisterSystemStore",
    "CertCreateCRLContext",
    "CertSaveStore",
    "CryptDecryptAndVerifyMessageSignature",
    "CryptHashCertificate2",
    "CertEnumSubjectInSortedCTL",
    "CryptAcquireContextU",
    "CryptImportPublicKeyInfoEx2",
    "CryptObjectLocatorRelease",
    "CertFindCertificateInStore",
    "CryptSignCertificate",
    "RegDeleteValueU",
    "RegOpenKeyExU",
    "I_CryptCreateLruEntry",
    "CertStrToNameW",
    "CertOpenStore",
    "CertSerializeCRLStoreElement",
    "I_CryptGetDefaultCryptProvForEncrypt",
    "CertFreeCertificateChainEngine",
    "CertUnregisterPhysicalStore",
    "I_CryptRegisterSmartCardStore",
    "CertStrToNameA",
    "I_CryptEnableLruOfEntries",
    "CryptMsgControl",
    "CryptObjectLocatorGet",
    "CryptSignHashU",
    "CryptEnumOIDFunction",
    "CertSerializeCertificateStoreElement",
    "CertRemoveStoreFromCollection",
    "CryptMsgGetAndVerifySigner",
    "CertDuplicateStore",
    "CryptProtectMemory",
    "CertFindCertificateInCRL",
    "CryptMsgOpenToEncode",
    "CertAddEncodedCertificateToStore",
    "CryptMsgSignCTL",
    "CryptExportPublicKeyInfoEx",
    "CryptExportPublicKeyInfoFromBCryptKeyHandle",
    "CertFindRDNAttr",
    "CryptObjectLocatorFree",
    "CertAddCRLLinkToStore",
    "CertFindExtension",
    "CertVerifyCRLTimeValidity",
    "CryptGetDefaultOIDFunctionAddress",
    "CryptMemFree",
    "CryptUnregisterOIDInfo",
    "I_CryptFindSmartCardCertInStore",
    "CertGetCRLContextProperty",
    "CertDuplicateCTLContext",
    "I_CryptUnregisterSmartCardStore",
    "CertIsStrongHashToSign",
    "CryptRegisterDefaultOIDFunction",
    "CertAddEnhancedKeyUsageIdentifier",
    "CertCloseServerOcspResponse",
    "CertOpenSystemStoreW",
    "CertGetNameStringW",
    "CryptEnumProvidersU",
    "CryptSignAndEncodeCertificate",
    "CertGetCTLContextProperty",
    "CryptInitOIDFunctionSet",
    "CryptSetKeyIdentifierProperty",
    "I_CryptUninstallOssGlobal",
    "CryptImportPublicKeyInfoEx",
    "CertVerifyCRLRevocation",
    "CryptSIPGetCaps",
    "CryptBinaryToStringW",
    "CertResyncCertificateChainEngine",
    "CertSelectCertificateChains",
    "CertCreateCTLContext",
    "I_CryptReadTrustedPublisherDWORDValueFromRegistry",
    "CertVerifyCertificateChainPolicy",
    "CertNameToStrW",
    "CryptMsgCountersign",
    "CertAddRefServerOcspResponseContext",
    "CryptSIPLoad",
    "CryptEnumKeyIdentifierProperties",
    "RegQueryInfoKeyU",
    "CertCompareCertificateName",
    "CryptGetOIDFunctionAddress",
    "CryptObjectLocatorGetUpdated",
    "CryptCreateAsyncHandle",
    "CryptUnprotectData",
    "I_CryptGetLruEntryIdentifier",
    "CryptGetDefaultOIDDllList",
    "CreateFileU",
    "CryptSignMessageWithKey",
    "CertAddEncodedCertificateToSystemStoreA",
    "CryptSIPRetrieveSubjectGuidForCatalogFile",
    "CryptVerifyDetachedMessageHash",
    "I_CryptWalkAllLruCacheEntries",
    "I_CryptAddRefLruEntry",
    "CryptMsgCountersignEncoded",
    "CryptUnregisterOIDFunction",
    "CertVerifyCTLUsage",
    "I_CertUpdateStore"
  ],
  "cryptbase.dll": [
    "SystemFunction001",
    "SystemFunction005",
    "SystemFunction040",
    "SystemFunction002",
    "SystemFunction041",
    "SystemFunction003",
    "SystemFunction036",
    "SystemFunction004",
    "SystemFunction028",
    "SystemFunction034",
    "SystemFunction029"
  ],
  "cryptcatsvc.dll": [
    "CryptsvcDllCtrl"
  ],
  "cryptdlg.dll": [
    "GetFriendlyNameOfCertW",
    "FormatPKIXEmailProtection",
    "CertConfigureTrustA",
    "DllRegisterServer",
    "DllUnregisterServer",
    "GetFriendlyNameOfCertA",
    "CertTrustCleanup",
    "FormatVerisignExtension",
    "CertSelectCertificateW",
    "CertTrustCertPolicy",
    "EncodeAttrSequence",
    "EncodeRecipientID",
    "CertConfigureTrustW",
    "CertSelectCertificateA",
    "CertViewPropertiesA",
    "CertViewPropertiesW",
    "CertTrustInit",
    "CertModifyCertificatesToTrust",
    "DecodeAttrSequence",
    "CertTrustFinalPolicy",
    "DecodeRecipientID"
  ],
  "cryptdll.dll": [
    "CDGenerateRandomBits",
    "CDLocateCSystem",
    "CDRegisterRng",
    "CDRegisterCheckSum",
    "CDRegisterCSystem",
    "HMACwithSHA",
    "CDFindCommonCSystemWithKey",
    "aesCTSDecryptMsg",
    "aesCTSEncryptMsg",
    "MD5Update",
    "PBKDF2",
    "CDBuildIntegrityVect",
    "CDLocateRng",
    "CDBuildVect",
    "MD5Init",
    "KRBFXCF2",
    "MD5Final",
    "CDGetIntegrityVect",
    "CDFindCommonCSystem",
    "CDLocateCheckSum"
  ],
  "cryptext.dll": [
    "CryptExtAddSPC",
    "CryptExtOpenCERW",
    "CryptExtOpenCTL",
    "CryptExtOpenSTRW",
    "CryptExtAddCRL",
    "DllRegisterServer",
    "CryptExtOpenCER",
    "DllUnregisterServer",
    "CryptExtAddPFXMachineOnlyAndHwndW",
    "CryptExtOpenPKCS7W",
    "CryptExtOpenSTR",
    "CryptExtAddPFX",
    "CryptExtOpenCTLW",
    "DllCanUnloadNow",
    "CryptExtAddP7R",
    "CryptExtAddCERW",
    "CryptExtOpenCAT",
    "CryptExtOpenCATW",
    "CryptExtOpenP7R",
    "DllGetClassObject",
    "CryptExtAddCTL",
    "CryptExtAddPFXW",
    "CryptExtAddP7RW",
    "CryptExtOpenCRLW",
    "CryptExtOpenP7RW",
    "CryptExtAddCER",
    "CryptExtAddCERMachineOnlyAndHwndW",
    "CryptExtOpenCRL",
    "CryptExtOpenPKCS7",
    "CryptExtAddSPCW",
    "CryptExtAddCRLW",
    "CryptExtAddCTLW"
  ],
  "cryptnet.dll": [
    "DllRegisterServer",
    "CryptCancelAsyncRetrieval",
    "DllUnregisterServer",
    "CryptRetrieveObjectByUrlA",
    "I_CryptNetSetUrlCachePreFetchInfo",
    "CryptRetrieveObjectByUrlW",
    "LdapProvOpenStore",
    "CertDllVerifyCTLUsage",
    "CryptUninstallCancelRetrieval",
    "I_CryptNetEnumUrlCacheEntry",
    "I_CryptNetGetConnectivity",
    "CryptGetTimeValidObject",
    "I_CryptConvertIriToAsciiOrUnicode",
    "CryptFlushTimeValidObject",
    "I_CryptNetGetHostNameFromUrl",
    "CryptGetObjectUrl",
    "CryptInstallCancelRetrieval",
    "CertDllVerifyRevocation",
    "I_CryptNetSetUrlCacheFlushInfo",
    "I_CryptNetGetUserDsStoreUrl",
    "I_CryptConvertIriToAsciiOrUnicodeWithFlags"
  ],
  "cryptsp.dll": [
    "CryptAcquireContextA",
    "CryptSignHashW",
    "CryptSetProviderA",
    "SystemFunction006",
    "CryptCreateHash",
    "CryptAcquireContextW",
    "SystemFunction015",
    "CryptSetProviderExA",
    "SystemFunction007",
    "SystemFunction011",
    "CryptGenKey",
    "SystemFunction026",
    "SystemFunction025",
    "SystemFunction010",
    "SystemFunction033",
    "CryptGetUserKey",
    "CryptHashSessionKey",
    "CryptGetDefaultProviderA",
    "CryptGetKeyParam",
    "CryptGetProvParam",
    "CryptSetKeyParam",
    "CryptDuplicateHash",
    "SystemFunction008",
    "SystemFunction013",
    "CryptContextAddRef",
    "CryptGetHashParam",
    "CryptImportKey",
    "SystemFunction023",
    "SystemFunction020",
    "CryptSetHashParam",
    "SystemFunction027",
    "CryptDecrypt",
    "CryptSignHashA",
    "SystemFunction024",
    "CryptVerifySignatureA",
    "SystemFunction031",
    "SystemFunction022",
    "CryptExportKey",
    "CryptDuplicateKey",
    "CryptSetProvParam",
    "CryptSetProviderExW",
    "CryptEnumProviderTypesA",
    "CryptDestroyKey",
    "SystemFunction012",
    "SystemFunction009",
    "CheckSignatureInFile",
    "CryptGetDefaultProviderW",
    "CryptDeriveKey",
    "SystemFunction014",
    "CryptDestroyHash",
    "SystemFunction035",
    "CryptSetProviderW",
    "CryptEnumProvidersW",
    "CryptEnumProviderTypesW",
    "CryptGenRandom",
    "CryptEncrypt",
    "SystemFunction021",
    "SystemFunction032",
    "CryptEnumProvidersA",
    "SystemFunction030",
    "CryptReleaseContext",
    "CryptHashData",
    "CryptVerifySignatureW"
  ],
  "cryptsvc.dll": [
    "CryptServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "cryptui.dll": [
    "CryptUIDlgSelectCertificateFromStore",
    "CryptUIDlgSelectCertificateA",
    "CryptUIDlgAddPolicyServer",
    "CryptUIDlgViewSignerInfoA",
    "CryptUIDlgCertMgr",
    "CryptUIGetCertificatePropertiesPagesA",
    "CryptUIWizBuildCTL",
    "CryptUIDlgFreePolicyServerContext",
    "CertSelectionGetSerializedBlob",
    "CryptUIFreeCertificatePropertiesPagesW",
    "GetUnknownErrorString",
    "CryptUIDlgViewCTLA",
    "CryptUIDlgViewCertificatePropertiesA",
    "DllRegisterServer",
    "CryptUIDlgViewSignerInfoW",
    "DisplayHtmlHelp",
    "DllUnregisterServer",
    "CryptUIWizFreeDigitalSignContext",
    "CryptUIDlgFreeCAContext",
    "CryptUIGetCertificatePropertiesPagesW",
    "CryptUIDlgViewContext",
    "CryptUIDlgPropertyPolicy",
    "CryptUIFreeCertificatePropertiesPagesA",
    "ACUIProviderInvokeUI",
    "CryptUIGetViewSignaturesPagesW",
    "CryptUIDlgSelectCertificateW",
    "FormatDateStringAutoLayout",
    "CryptUIWizDigitalSign",
    "CryptUIFreeViewSignaturesPagesW",
    "CompareCertificate",
    "CryptUIDlgViewCertificateW",
    "CryptUIWizExport",
    "CryptUIDlgSelectStoreA",
    "CryptUIFreeViewSignaturesPagesA",
    "CryptUIGetViewSignaturesPagesA",
    "AddChainToStore",
    "CryptUIDlgSelectCA",
    "CryptUIDlgViewCertificatePropertiesW",
    "CryptUIDlgViewCRLA",
    "CryptDllProtectPrompt",
    "CryptUIDlgViewCRLW",
    "CryptUIDlgViewCTLW",
    "CryptUIViewExpiringCerts",
    "CommonInit",
    "CryptUIDlgAddPolicyServerWithPriority",
    "CryptUIDlgSelectPolicyServer",
    "CryptUIDlgViewCertificateA",
    "InvokeHelpLink",
    "MyFormatEnhancedKeyUsageString",
    "CertDllProtectedRootMessageBox",
    "CryptUIDlgSelectStoreW",
    "CryptUIWizImport",
    "CryptUIStartCertMgr",
    "IsWizardExtensionAvailable",
    "CryptUIWizImportInternal"
  ],
  "cryptuiwizard.dll": [
    "CryptUIWizDigitalSign",
    "CryptUIWizBuildCTL",
    "GetFunctionTable",
    "DllMain",
    "CryptUIWizImport",
    "CryptUIWizExport",
    "CryptUIWizImportInternal",
    "CryptUIWizFreeDigitalSignContext"
  ],
  "cryptxml.dll": [
    "CryptXmlDigestReference",
    "CryptXmlEnumAlgorithmInfo",
    "CryptXmlGetStatus",
    "CryptXmlGetReference",
    "CryptXmlAddObject",
    "CryptXmlEncode",
    "CryptXmlCreateReference",
    "CryptXmlGetAlgorithmInfo",
    "CryptXmlGetDocContext",
    "CryptXmlImportPublicKey",
    "CryptXmlOpenToEncode",
    "CryptXmlGetTransforms",
    "CryptXmlClose",
    "CryptXmlSetHMACSecret",
    "CryptXmlOpenToDecode",
    "CryptXmlFindAlgorithmInfo",
    "CryptXmlSign",
    "CryptXmlGetSignature",
    "CryptXmlVerifySignature"
  ],
  "cscapi.dll": [
    "OfflineFilesQueryStatusEx",
    "OfflineFilesEnable",
    "CscSearchApiGetInterface",
    "OfflineFilesQueryStatus",
    "OfflineFilesStart",
    "CscNetApiGetInterface",
    "OfflineFilesGetShareCachingMode"
  ],
  "cscdll.dll": [
    "CSCIsPathOffline",
    "CSCTransitionPathOnline",
    "CSCFindNextFileW",
    "CSCFindFirstFileForSidW",
    "CSCFindClose",
    "CSCEnumForStatsExW",
    "CSCUnpinFileW",
    "CSCIsCSCEnabled",
    "CSCDisconnectPath",
    "CSCIsServerOfflineW",
    "CSCPinFileW",
    "CSCFindFirstFileW",
    "CSCSetMaxSpace",
    "CSCTransitionServerOnlineW",
    "CSCDoEnableDisable",
    "CSCEnumForStatsW",
    "CSCDeleteW",
    "CSCQueryFileStatusW"
  ],
  "cscobj.dll": [
    "ProcessGroupPolicy",
    "ProcessPolicy",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "cscsvc.dll": [
    "CscServiceMain",
    "CscTestGetInterface"
  ],
  "cscui.dll": [
    "CSCUISetState",
    "CSCOptions_RunDLL",
    "CPlApplet",
    "CSCUIRemoveFolderFromCache",
    "CSCUIInitialize",
    "CSCUIOptionsPropertySheet",
    "CSCOptions_RunDLLW",
    "CSCOptions_RunDLLA",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "csrsrv.dll": [
    "CsrDereferenceProcess",
    "CsrSetForegroundPriority",
    "CsrValidateMessageBuffer",
    "CsrDestroyProcess",
    "CsrCreateProcess",
    "CsrImpersonateClient",
    "CsrServerInitialization",
    "CsrRegisterClientThreadSetup",
    "CsrValidateMessageString",
    "CsrDeferredCreateProcess",
    "CsrConnectToUser",
    "CsrSetBackgroundPriority",
    "CsrDereferenceThread",
    "CsrShutdownProcesses",
    "CsrAddStaticServerThread",
    "CsrLockProcessByClientId",
    "CsrLockThreadByClientId",
    "CsrQueryApiPort",
    "CsrUnlockProcess",
    "CsrDestroyThread",
    "CsrGetProcessLuid",
    "CsrCreateRemoteThread",
    "CsrCreateThread",
    "CsrLockedReferenceProcess",
    "CsrUnlockThread",
    "CsrReferenceThread",
    "CsrExecServerThread",
    "CsrCallServerFromServer",
    "CsrRevertToSelf",
    "CsrUnhandledExceptionFilter",
    "CsrReplyToMessage"
  ],
  "ctl3d32.dll": [
    "ListWndProc3d",
    "Ctl3dSubclassDlg",
    "StaticWndProc3d",
    "Ctl3dIsAutoSubclass",
    "Ctl3dColorChange",
    "Ctl3dUnsubclassCtl",
    "Ctl3dAutoSubclassEx",
    "Ctl3dGetVer",
    "Ctl3dSetStyle",
    "Ctl3dUnAutoSubclass",
    "Ctl3dSubclassCtl",
    "Ctl3dUnregister",
    "Ctl3dDlgProc",
    "Ctl3dSubclassDlgEx",
    "Ctl3dCtlColorEx",
    "Ctl3dAutoSubclass",
    "Ctl3dDlgFramePaint",
    "ComboWndProc3d",
    "Ctl3dWinIniChange",
    "BtnWndProc3d",
    "Ctl3dRegister",
    "Ctl3dSubclassCtlEx",
    "Ctl3dCtlColor",
    "Ctl3dEnabled",
    "EditWndProc3d"
  ],
  "DAConn.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DAFWSD.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DAMM.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DDACLSys.dll": [
    "DDACLSys_Specialize"
  ],
  "DDOIProxy.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DDORes.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DHCPQEC.DLL": [
    "DhcpQecEnableTracing",
    "UninitializeQec",
    "InitializeQec",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "DWrite.dll": [
    "DWriteCreateFactory"
  ],
  "DXP.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "DXPTaskRingtone.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "DaOtpCredentialProvider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DafPrintProvider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DefaultDeviceManager.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DefaultPrinterProvider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DevDispItemProvider.dll": [
    "DevQueryEntry"
  ],
  "DevPropMgr.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DeviceCenter.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DeviceDisplayStatusManager.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DeviceDriverRetrievalClient.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DeviceElementSource.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "DeviceMetadataParsers.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DeviceMetadataRetrievalClient.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DevicePairing.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DevicePairingFolder.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DevicePairingProxy.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "DeviceSetupManager.dll": [
    "ServiceMain"
  ],
  "DeviceSetupManagerAPI.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DeviceSetupStatusProvider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DeviceUxRes.dll": "No exports",
  "DfsShlEx.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "DiagCpl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "DismApi.dll": [
    "_DismSetFirstBootCommandLine",
    "DismCloseSession",
    "DismRemountImage",
    "DismGetFeatureParent",
    "DismAddPackage",
    "DismCleanupMountpoints",
    "_DismGetProvisionedAppxPackages",
    "DismMountImage",
    "DismRemovePackage",
    "DismGetFeatures",
    "DismInitialize",
    "DismCheckImageHealth",
    "_DismGetCurrentEdition",
    "_DismGetOsInfo",
    "DismDisableFeature",
    "DismGetMountedImageInfo",
    "_DismEnableDisableFeature",
    "DismCommitImage",
    "DismAddDriver",
    "DismGetPackages",
    "_DismGetStateFromCBSSessionID",
    "DismGetLastErrorMessage",
    "DismGetPackageInfo",
    "_DismGetRegistryMountPoint",
    "_DismRemoveProvisionedAppxPackage",
    "DismOpenSession",
    "DismShutdown",
    "DismRemoveDriver",
    "DismRestoreImageHealth",
    "DismEnableFeature",
    "_DismGetLastCBSSessionID",
    "DismUnmountImage",
    "DismDelete",
    "_DismSetProductKey",
    "DismGetDriverInfo",
    "DismGetFeatureInfo",
    "DismGetImageInfo",
    "_DismGetFeaturesEx",
    "DismGetDrivers",
    "DismApplyUnattend",
    "_DismAddProvisionedAppxPackage",
    "_DismSetEdition",
    "_DismGetTargetEditions"
  ],
  "Display.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DisplaySaveSettingsEx"
  ],
  "DocumentPerformanceEvents.dll": "No exports",
  "Dsui.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "DxpTaskSync.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "d2d1.dll": [
    "D2D1IsMatrixInvertible",
    "D2D1InvertMatrix",
    "D2D1CreateDeviceContext",
    "D2D1MakeRotateMatrix",
    "D2D1SinCos",
    "D2D1Vec3Length",
    "D2D1CreateFactory",
    "D2D1MakeSkewMatrix",
    "D2D1Tan",
    "D2D1CreateDevice",
    "D2D1ConvertColorSpace"
  ],
  "d3d10.dll": [
    "D3D10CompileEffectFromMemory",
    "RevertToOldImplementation",
    "D3D10GetVersion",
    "D3D10StateBlockMaskIntersect",
    "D3D10GetVertexShaderProfile",
    "D3D10GetPixelShaderProfile",
    "D3D10CreateStateBlock",
    "D3D10StateBlockMaskEnableAll",
    "D3D10PreprocessShader",
    "D3D10StateBlockMaskGetSetting",
    "D3D10CreateBlob",
    "D3D10DisassembleShader",
    "D3D10GetInputAndOutputSignatureBlob",
    "D3D10ReflectShader",
    "D3D10CreateDeviceAndSwapChain",
    "D3D10RegisterLayers",
    "D3D10GetShaderDebugInfo",
    "D3D10StateBlockMaskDisableAll",
    "D3D10CreateEffectFromMemory",
    "D3D10GetOutputSignatureBlob",
    "D3D10CreateDevice",
    "D3D10DisassembleEffect",
    "D3D10GetGeometryShaderProfile",
    "D3D10StateBlockMaskDisableCapture",
    "D3D10CompileShader",
    "D3D10GetInputSignatureBlob",
    "D3D10StateBlockMaskUnion",
    "D3D10StateBlockMaskDifference",
    "D3D10CreateEffectPoolFromMemory",
    "D3D10StateBlockMaskEnableCapture"
  ],
  "d3d10_1.dll": [
    "D3D10CompileEffectFromMemory",
    "RevertToOldImplementation",
    "D3D10CreateDeviceAndSwapChain1",
    "D3D10GetVersion",
    "D3D10StateBlockMaskIntersect",
    "D3D10GetVertexShaderProfile",
    "D3D10GetPixelShaderProfile",
    "D3D10CreateStateBlock",
    "D3D10StateBlockMaskEnableAll",
    "D3D10PreprocessShader",
    "D3D10StateBlockMaskGetSetting",
    "D3D10CreateBlob",
    "D3D10DisassembleShader",
    "D3D10GetInputAndOutputSignatureBlob",
    "D3D10CreateDevice1",
    "D3D10ReflectShader",
    "D3D10RegisterLayers",
    "D3D10GetShaderDebugInfo",
    "D3D10StateBlockMaskDisableAll",
    "D3D10CreateEffectFromMemory",
    "D3D10GetOutputSignatureBlob",
    "D3D10DisassembleEffect",
    "D3D10GetGeometryShaderProfile",
    "D3D10StateBlockMaskDisableCapture",
    "D3D10CompileShader",
    "D3D10GetInputSignatureBlob",
    "D3D10StateBlockMaskUnion",
    "D3D10StateBlockMaskDifference",
    "D3D10CreateEffectPoolFromMemory",
    "D3D10StateBlockMaskEnableCapture"
  ],
  "d3d10_1core.dll": [
    "D3DKMTCreateDevice",
    "D3DKMTOpenResource",
    "D3D10CoreRegisterLayers",
    "D3DKMTCreateContext",
    "D3DKMTGetMultisampleMethodList",
    "D3DKMTLock",
    "D3DKMTGetRuntimeData",
    "D3DKMTWaitForVerticalBlankEvent",
    "D3DKMTGetContextSchedulingPriority",
    "D3DKMTSetGammaRamp",
    "D3DKMTWaitForSynchronizationObject",
    "D3DKMTDestroySynchronizationObject",
    "D3DKMTUnlock",
    "D3DKMTSetDisplayMode",
    "OpenAdapter10",
    "D3DKMTQueryAdapterInfo",
    "D3DKMTSignalSynchronizationObject",
    "D3DKMTOpenAdapterFromHdc",
    "D3D10CoreCreateDevice1",
    "D3DKMTSetVidPnSourceOwner",
    "D3DKMTGetSharedPrimaryHandle",
    "D3DKMTPresent",
    "D3D10CoreGetSupportedVersions",
    "D3DKMTDestroyDevice",
    "D3DKMTSetContextSchedulingPriority",
    "D3DKMTCreateSynchronizationObject",
    "D3DKMTSetAllocationPriority",
    "D3DKMTQueryResourceInfo",
    "D3DKMTDestroyContext",
    "D3D10CoreGetVersion",
    "D3DKMTSetDisplayPrivateDriverFormat",
    "D3DKMTQueryAllocationResidency",
    "D3DKMTGetDeviceState",
    "D3DKMTRender",
    "D3DKMTCreateAllocation",
    "OpenAdapter10_2",
    "D3DKMTGetDisplayModeList",
    "D3DKMTDestroyAllocation",
    "D3DKMTCloseAdapter",
    "D3DKMTEscape"
  ],
  "d3d10core.dll": [
    "D3DKMTCreateDevice",
    "D3DKMTOpenResource",
    "D3D10CoreRegisterLayers",
    "D3DKMTCreateContext",
    "D3DKMTGetMultisampleMethodList",
    "D3DKMTLock",
    "D3D10CoreCreateDevice",
    "D3DKMTGetRuntimeData",
    "D3DKMTWaitForVerticalBlankEvent",
    "D3DKMTGetContextSchedulingPriority",
    "D3DKMTSetGammaRamp",
    "D3DKMTWaitForSynchronizationObject",
    "D3DKMTDestroySynchronizationObject",
    "D3DKMTUnlock",
    "D3DKMTSetDisplayMode",
    "OpenAdapter10",
    "D3DKMTQueryAdapterInfo",
    "D3DKMTSignalSynchronizationObject",
    "D3DKMTOpenAdapterFromHdc",
    "D3DKMTSetVidPnSourceOwner",
    "D3DKMTGetSharedPrimaryHandle",
    "D3DKMTPresent",
    "D3D10CoreGetSupportedVersions",
    "D3DKMTDestroyDevice",
    "D3DKMTSetContextSchedulingPriority",
    "D3DKMTCreateSynchronizationObject",
    "D3DKMTSetAllocationPriority",
    "D3DKMTQueryResourceInfo",
    "D3DKMTDestroyContext",
    "D3D10CoreGetVersion",
    "D3DKMTSetDisplayPrivateDriverFormat",
    "D3DKMTQueryAllocationResidency",
    "D3DKMTGetDeviceState",
    "D3DKMTRender",
    "D3DKMTCreateAllocation",
    "OpenAdapter10_2",
    "D3DKMTGetDisplayModeList",
    "D3DKMTDestroyAllocation",
    "D3DKMTCloseAdapter",
    "D3DKMTEscape"
  ],
  "d3d10level9.dll": [
    "D3DKMTCreateDevice",
    "D3DKMTCreateKeyedMutex2",
    "D3DKMTOpenResource",
    "D3DKMTOpenKeyedMutex",
    "D3DKMTOpenNtHandleFromName",
    "D3DKMTOpenResource2",
    "D3DKMTOpenResourceFromNtHandle",
    "D3DKMTOpenAdapterFromGdiDisplayName",
    "D3DKMTOpenSynchronizationObject",
    "D3DKMTSetVidPnSourceOwner1",
    "D3DKMTCreateContext",
    "D3DKMTGetMultisampleMethodList",
    "D3DKMTLock",
    "D3DKMTUnpinDirectFlipResources",
    "D3DKMTWaitForVerticalBlankEvent2",
    "D3DKMTGetRuntimeData",
    "D3DKMTGetDeviceSchedulingPriority",
    "D3DKMTConfigureSharedResource",
    "D3DKMTGetContextSchedulingPriority",
    "D3DKMTWaitForVerticalBlankEvent",
    "D3DKMTPinDirectFlipResources",
    "D3DKMTGetThunkVersion",
    "D3DKMTShareObjects",
    "D3D11CreateDeviceExternalImplementation",
    "D3DKMTSetGammaRamp",
    "D3DKMTWaitForSynchronizationObject",
    "D3D10Level9DumpJournal",
    "D3DKMTDestroySynchronizationObject",
    "D3DKMTQueryResourceInfoFromNtHandle",
    "D3DKMTOfferAllocations",
    "D3DKMTUnlock",
    "D3DKMTSetDisplayMode",
    "D3DKMTReclaimAllocations",
    "OpenAdapter10",
    "D3DKMTCreateSynchronizationObject2",
    "D3DKMTQueryAdapterInfo",
    "D3DKMTSetContextInProcessSchedulingPriority",
    "D3DKMTAcquireKeyedMutex2",
    "D3DKMTDestroyKeyedMutex",
    "D3DKMTSetVidPnSourceOwner",
    "D3DKMTGetSharedPrimaryHandle",
    "D3DKMTOpenKeyedMutex2",
    "D3DKMTPresent",
    "D3DKMTSignalSynchronizationObject",
    "RetrieveFilteredOpenAdapter",
    "D3DKMTSetQueuedLimit",
    "D3DKMTDestroyDevice",
    "D3DKMTSetContextSchedulingPriority",
    "D3DKMTCreateSynchronizationObject",
    "D3DKMTSetAllocationPriority",
    "D3DKMTQueryResourceInfo",
    "D3DKMTDestroyContext",
    "D3DKMTGetContextInProcessSchedulingPriority",
    "D3D10CreateDeviceExternalImplementation",
    "D3DKMTSetDisplayPrivateDriverFormat",
    "D3DKMTSignalSynchronizationObject2",
    "D3DKMTOpenSyncObjectFromNtHandle",
    "D3DKMTOpenAdapterFromDeviceName",
    "D3D10CheckLevel9Hardware",
    "D3DKMTQueryAllocationResidency",
    "D3DKMTGetDeviceState",
    "D3DKMTRender",
    "D3DKMTAcquireKeyedMutex",
    "D3DKMTCreateAllocation",
    "D3DKMTCreateKeyedMutex",
    "OpenAdapter10_2",
    "D3DKMTGetDisplayModeList",
    "D3DKMTSetDeviceSchedulingPriority",
    "D3DKMTDestroyAllocation",
    "D3DKMTWaitForSynchronizationObject2",
    "D3DKMTCloseAdapter",
    "D3DKMTCreateAllocation2",
    "D3DKMTEscape",
    "D3DKMTOutputDuplPresent",
    "D3DKMTReleaseKeyedMutex2",
    "D3DKMTReleaseKeyedMutex"
  ],
  "d3d10warp.dll": [
    "OpenAdapter",
    "OpenAdapter10_2"
  ],
  "d3d11.dll": [
    "D3DKMTCreateDevice",
    "D3DKMTOpenResource",
    "D3D11CoreCreateDevice",
    "D3DKMTCreateContext",
    "D3DKMTGetMultisampleMethodList",
    "D3DKMTLock",
    "D3DKMTGetRuntimeData",
    "D3DKMTWaitForVerticalBlankEvent",
    "D3DKMTGetContextSchedulingPriority",
    "D3D11CoreGetLayeredDeviceSize",
    "D3D11CreateDevice",
    "D3DKMTSetGammaRamp",
    "D3DKMTWaitForSynchronizationObject",
    "D3DKMTDestroySynchronizationObject",
    "D3DKMTUnlock",
    "D3DKMTSetDisplayMode",
    "OpenAdapter10",
    "D3DKMTQueryAdapterInfo",
    "D3DKMTSignalSynchronizationObject",
    "D3DKMTOpenAdapterFromHdc",
    "D3DKMTSetVidPnSourceOwner",
    "D3DKMTGetSharedPrimaryHandle",
    "D3DKMTPresent",
    "EnableFeatureLevelUpgrade",
    "D3D11CreateDeviceAndSwapChain",
    "D3DKMTDestroyDevice",
    "D3DKMTSetContextSchedulingPriority",
    "D3DKMTCreateSynchronizationObject",
    "D3DKMTSetAllocationPriority",
    "D3DKMTQueryResourceInfo",
    "D3DKMTDestroyContext",
    "D3DPerformance_SetMarker",
    "D3DPerformance_GetStatus",
    "D3D11CoreCreateLayeredDevice",
    "D3DKMTSetDisplayPrivateDriverFormat",
    "D3DKMTQueryAllocationResidency",
    "D3DPerformance_EndEvent",
    "D3DKMTGetDeviceState",
    "D3DKMTRender",
    "D3DKMTCreateAllocation",
    "OpenAdapter10_2",
    "D3DKMTGetDisplayModeList",
    "D3DKMTDestroyAllocation",
    "D3DKMTCloseAdapter",
    "D3DKMTEscape",
    "D3D11CoreRegisterLayers",
    "D3DPerformance_BeginEvent"
  ],
  "d3d8.dll": [
    "Direct3DCreate8",
    "Direct3D8EnableMaximizedWindowedModeShim",
    "ValidatePixelShader",
    "DebugSetMute",
    "ValidateVertexShader"
  ],
  "d3d8thk.dll": [
    "OsThunkDdUnlockD3D",
    "OsThunkDdDestroyD3DBuffer",
    "OsThunkDdGetDxHandle",
    "OsThunkDdSetColorKey",
    "OsThunkDdReenableDirectDrawObject",
    "OsThunkDdColorControl",
    "OsThunkDdBlt",
    "OsThunkDdCreateSurface",
    "OsThunkDdGetBltStatus",
    "OsThunkDdUnattachSurface",
    "OsThunkDdCanCreateD3DBuffer",
    "OsThunkDdLockD3D",
    "OsThunkDdGetDC",
    "OsThunkDdEndMoCompFrame",
    "OsThunkDdSetGammaRamp",
    "OsThunkDdGetMoCompFormats",
    "OsThunkDdDestroyMoComp",
    "OsThunkDdAttachSurface",
    "OsThunkDdUnlock",
    "OsThunkDdFlip",
    "OsThunkDdCreateD3DBuffer",
    "OsThunkDdGetDriverState",
    "OsThunkDdUpdateOverlay",
    "OsThunkDdCreateSurfaceObject",
    "OsThunkDdFlipToGDISurface",
    "OsThunkDdSetOverlayPosition",
    "OsThunkDdWaitForVerticalBlank",
    "OsThunkDdCreateMoComp",
    "OsThunkDdLock",
    "OsThunkD3dDrawPrimitives2",
    "OsThunkDdCreateSurfaceEx",
    "OsThunkDdResetVisrgn",
    "OsThunkDdSetExclusiveMode",
    "OsThunkD3dContextDestroyAll",
    "OsThunkDdGetMoCompGuids",
    "OsThunkDdQueryDirectDrawObject",
    "OsThunkDdRenderMoComp",
    "OsThunkD3dValidateTextureStageState",
    "OsThunkDdBeginMoCompFrame",
    "OsThunkD3dContextCreate",
    "OsThunkDdGetFlipStatus",
    "OsThunkDdGetAvailDriverMemory",
    "OsThunkDdDestroySurface",
    "OsThunkDdGetScanLine",
    "OsThunkDdReleaseDC",
    "OsThunkD3dContextDestroy",
    "OsThunkDdGetMoCompBuffInfo",
    "OsThunkDdAddAttachedSurface",
    "OsThunkDdGetDriverInfo",
    "OsThunkDdAlphaBlt",
    "OsThunkDdCanCreateSurface",
    "OsThunkDdDeleteDirectDrawObject",
    "OsThunkDdQueryMoCompStatus",
    "OsThunkDdCreateDirectDrawObject",
    "OsThunkDdDeleteSurfaceObject",
    "OsThunkDdGetInternalMoCompInfo"
  ],
  "d3d9.dll": [
    "DebugSetLevel",
    "D3DPERF_SetOptions",
    "Direct3DCreate9Ex",
    "D3DPERF_EndEvent",
    "D3DPERF_SetRegion",
    "PSGPError",
    "D3DPERF_BeginEvent",
    "Direct3D9EnableMaximizedWindowedModeShim",
    "Direct3DCreate9",
    "DebugSetMute",
    "D3DPERF_GetStatus",
    "D3DPERF_QueryRepeatFrame",
    "PSGPSampleTexture",
    "Direct3DShaderValidatorCreate9",
    "D3DPERF_SetMarker"
  ],
  "d3dim.dll": [
    "Direct3DCreate",
    "D3DFree",
    "FlushD3DDevices2",
    "SurfaceFlipNotify",
    "Direct3DGetSWRastZPixFmts",
    "Direct3DCreateDevice",
    "D3DMalloc",
    "PaletteUpdateNotify",
    "Direct3D_HALCleanUp",
    "FlushD3DDevices",
    "D3DRealloc",
    "Direct3DCreateTexture",
    "PaletteAssociateNotify"
  ],
  "d3dim700.dll": [
    "Direct3DCreate",
    "D3DFree",
    "SetLOD",
    "D3DBreakVBLock",
    "GetPriority",
    "SurfaceFlipNotify",
    "DestroyTexture",
    "D3DMalloc",
    "Direct3DCreateDevice",
    "Direct3D_HALCleanUp",
    "FlushD3DDevices",
    "D3DTextureUpdate",
    "PaletteUpdateNotify",
    "D3DRealloc",
    "SetPriority",
    "CreateTexture",
    "PaletteAssociateNotify",
    "GetLOD"
  ],
  "d3dramp.dll": [
    "RampOldTri",
    "g_RampOld_BeadTbl"
  ],
  "d3dxof.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DirectXFileCreate"
  ],
  "dafBth.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "dafWCN.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "dafWfdProvider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "dafupnp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "das.dll": [
    "ServiceMain"
  ],
  "dataclen.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "datusage.dll": [
    "SetUsageHistory",
    "SetRealTimeUsage",
    "CreateDataUsageHelper"
  ],
  "davclnt.dll": [
    "NPAddConnection3",
    "NPEnumResource",
    "NPGetUser",
    "DavRegisterAuthCallback",
    "DavSetCookieW",
    "NPGetConnection",
    "NPOpenEnum",
    "DavGetTheLockOwnerOfTheFile",
    "DavFreeUsedDiskSpace",
    "DavInvalidateCache",
    "DllMain",
    "DavUnregisterAuthCallback",
    "NPGetCaps",
    "DllCanUnloadNow",
    "NPGetResourceInformation",
    "NPGetUniversalName",
    "NPGetResourceParent",
    "NPCancelConnection",
    "DavGetDiskSpaceUsage",
    "NPAddConnection",
    "DllGetClassObject",
    "NPCloseEnum",
    "DavCancelConnectionsToServer",
    "NPFormatNetworkName"
  ],
  "davhlpr.dll": [
    "DavGetServerPortAndPhysicalName",
    "WideStrToUtfUrlStr",
    "DavGetUNCFromHTTPPath",
    "DavGetHTTPFromUNCPath",
    "DavRemoveDummyShareFromFileName",
    "DavGetExtendedError",
    "DavFlushFile",
    "DavCheckAndConvertHttpUrlToUncName",
    "UtfUrlStrToWideStr",
    "DavAddConnection",
    "DavDeleteConnection",
    "DavRemoveDummyShareFromFileNameEx"
  ],
  "dbgeng.dll": [
    "DebugConnectWide",
    "DebugConnect",
    "DebugCreate",
    "DebugCreateEx"
  ],
  "dbghelp.dll": [
    "SymEnumSymbolsW",
    "SymEnumerateModules64",
    "SymGetLineNext64",
    "SymUnDName",
    "SymGetSourceVarFromToken",
    "SymGetSymPrev",
    "UnmapDebugInformation",
    "SymLoadModule64",
    "SymFunctionTableAccess",
    "SymSetSearchPath",
    "SymSetScopeFromAddr",
    "SymMatchStringW",
    "GetTimestampForLoadedLibrary",
    "SymEnumLines",
    "SymFromName",
    "SymUnDName64",
    "SymGetModuleBase",
    "SymQueryInlineTrace",
    "SymEnumSourceFilesW",
    "SymGetSymFromName",
    "ImageRvaToSection",
    "SymGetTypeFromName",
    "SymEnumSymbolsEx",
    "SymLoadModuleExW",
    "EnumerateLoadedModulesExW",
    "ImagehlpApiVersionEx",
    "lmi",
    "SymInitializeW",
    "SymRegisterCallback",
    "MiniDumpReadDumpStream",
    "SymGetSourceFileFromTokenW",
    "EnumerateLoadedModulesEx",
    "SymGetSymFromAddr64",
    "SymEnumProcesses",
    "WinDbgExtensionDllInit",
    "SymGetLineFromAddr64",
    "MakeSureDirectoryPathExists",
    "SymUnloadModule64",
    "SymSetHomeDirectory",
    "SymSrvGetSupplement",
    "SymEnumSourceFileTokens",
    "SymSearchW",
    "DbgHelpCreateUserDumpW",
    "SymSetSearchPathW",
    "SymLoadModule",
    "SymSrvDeltaNameW",
    "StackWalk",
    "SymSrvGetFileIndexes",
    "FindExecutableImageEx",
    "SymFromTokenW",
    "SymGetLineFromName",
    "SymSrvStoreFileW",
    "SymGetLineNextW64",
    "EnumerateLoadedModules64",
    "SymGetOmaps",
    "SymRegisterCallbackW64",
    "SymEnumerateModules",
    "SymMatchString",
    "SymDeleteSymbol",
    "SymGetOmapBlockBase",
    "SymSetParentWindow",
    "SymMatchFileName",
    "FindDebugInfoFileEx",
    "SymSrvStoreSupplementW",
    "SymEnumSymbols",
    "StackWalk64",
    "SymRegisterFunctionEntryCallback64",
    "SymFromToken",
    "EnumerateLoadedModules",
    "SymGetSymFromName64",
    "SymNextW",
    "SymGetSourceFile",
    "block",
    "SymFindDebugInfoFile",
    "SymEnumerateSymbols",
    "itoldyouso",
    "FindDebugInfoFile",
    "SymAddSourceStreamA",
    "SymEnumTypesByNameW",
    "SymGetModuleInfoW64",
    "SymRegisterFunctionEntryCallback",
    "SymSetContext",
    "SymFunctionTableAccess64",
    "SymGetLineNext",
    "SymSetScopeFromIndex",
    "ImageDirectoryEntryToData",
    "ImageDirectoryEntryToDataEx",
    "SymSrvGetFileIndexInfoW",
    "SymGetSymFromAddr",
    "SymSrvGetFileIndexStringW",
    "FindFileInSearchPath",
    "FindDebugInfoFileExW",
    "StackWalkEx",
    "SymGetSymPrev64",
    "SymGetTypeInfoEx",
    "SymGetModuleInfoW",
    "SymGetSymbolFile",
    "SymEnumerateSymbolsW",
    "SymFindExecutableImageW",
    "SymGetFileLineOffsets64",
    "SymGetLineFromInlineContext",
    "SymRefreshModuleList",
    "chksym",
    "SearchTreeForFile",
    "fptr",
    "SymGetSourceVarFromTokenW",
    "SymSrvIsStore",
    "FindExecutableImage",
    "srcfiles",
    "SymSrvGetFileIndexString",
    "SymSearch",
    "SymGetModuleInfo",
    "EnumDirTreeW",
    "SymEnumSymbolsForAddrW",
    "SymEnumTypesByName",
    "SymSetHomeDirectoryW",
    "SymFromAddrW",
    "SymGetSymNext",
    "SymPrev",
    "FindFileInPath",
    "SymGetModuleBase64",
    "SymGetScope",
    "SymFromIndex",
    "SymGetSourceFileTokenW",
    "SymSrvDeltaName",
    "SymGetLineFromNameW64",
    "homedir",
    "SymFromIndexW",
    "dbghelp",
    "SymFindFileInPath",
    "SymAddrIncludeInlineTrace",
    "SymGetLineFromAddrW64",
    "omap",
    "vc7fpo",
    "FindExecutableImageExW",
    "SymCompareInlineTrace",
    "SymMatchStringA",
    "SymEnumerateModulesW64",
    "SymEnumLinesW",
    "SymGetTypeFromNameW",
    "SymSrvGetFileIndexInfo",
    "SymGetScopeW",
    "SymAddSymbol",
    "SymSetOptions",
    "SymSrvGetSupplementW",
    "SymGetSourceFileFromToken",
    "SymSrvGetFileIndexesW",
    "MiniDumpWriteDump",
    "lminfo",
    "SymGetSourceFileToken",
    "SymEnumTypes",
    "SymUnloadModule",
    "EnumDirTree",
    "SymNext",
    "ExtensionApiVersion",
    "SymGetSearchPath",
    "SymGetHomeDirectoryW",
    "inlinedbg",
    "SymInitialize",
    "SymRegisterCallback64",
    "UnDecorateSymbolNameW",
    "SymFindFileInPathW",
    "SymSrvStoreFile",
    "sym",
    "SymFromNameW",
    "SymFromAddr",
    "SymGetSymNext64",
    "SymGetUnwindInfo",
    "SymFromInlineContextW",
    "UnDecorateSymbolName",
    "SymCleanup",
    "SymGetLinePrevW64",
    "SymGetSearchPathW",
    "SymGetLineFromAddr",
    "SymPrevW",
    "SymSrvIsStoreW",
    "SymEnumSymbolsForAddr",
    "SymEnumSourceFiles",
    "SymGetModuleInfo64",
    "SymEnumSym",
    "ImageRvaToVa",
    "stack_force_ebp",
    "SymEnumSourceLines",
    "SymAddSourceStream",
    "SymEnumSymbolsExW",
    "SymFindExecutableImage",
    "DbgHelpCreateUserDump",
    "SymDeleteSymbolW",
    "SymEnumerateSymbols64",
    "SymSrvStoreSupplement",
    "ImagehlpApiVersion",
    "SymGetLinePrev64",
    "optdbgdumpaddr",
    "EnumerateLoadedModulesW64",
    "optdbgdump",
    "SymEnumSourceLinesW",
    "SymGetHomeDirectory",
    "SymAddSourceStreamW",
    "SymGetLineFromInlineContextW",
    "SymGetTypeInfo",
    "SymMatchFileNameW",
    "dh",
    "SymLoadModuleEx",
    "SymSetScopeFromInlineContext",
    "SymGetLineFromName64",
    "SymEnumerateSymbolsW64",
    "SymGetSymbolFileW",
    "stackdbg",
    "SymGetOptions",
    "SymFromInlineContext",
    "SymEnumTypesW",
    "SymAddSymbolW",
    "SymGetLinePrev",
    "MapDebugInformation",
    "SearchTreeForFileW",
    "symsrv",
    "SymFindDebugInfoFileW",
    "ImageNtHeader",
    "SymGetSourceFileW"
  ],
  "dbnetlib.dll": [
    "ConnectionOption",
    "TermSSPIPackage",
    "ConnectionSqlVer",
    "ConnectionErrorW",
    "TermSessionEx",
    "ConnectionVer",
    "ConnectionTransact",
    "GenClientContext",
    "InitSSPIPackage",
    "ConnectionOpenW",
    "ConnectionGetSvrUser",
    "GetNextEnumeration",
    "ConnectionServerEnum",
    "InitEnumServers",
    "InitSession",
    "ConnectionOpen",
    "TermSession",
    "ConnectionMode",
    "ConnectionFlushCache",
    "ConnectionError",
    "ConnectionObjectSize",
    "ConnectionRead",
    "CloseEnumServers",
    "ConnectionServerEnumW",
    "ConnectionWrite",
    "ConnectionCheckForData",
    "ConnectionWriteOOB",
    "InitSessionEx",
    "ConnectionClose",
    "GenClientContextEx",
    "ConnectionStatus"
  ],
  "dbnmpntw.dll": [
    "ConnectionCheckForData",
    "ConnectionOpen",
    "ConnectionWriteOOB",
    "ConnectionErrorW",
    "ConnectionVer",
    "ConnectionTransact",
    "ConnectionMode",
    "ConnectionClose",
    "ConnectionError",
    "ConnectionServerEnum",
    "ConnectionObjectSize",
    "ConnectionRead",
    "ConnectionServerEnumW",
    "ConnectionOpenW",
    "ConnectionStatus",
    "ConnectionWrite"
  ],
  "dciman32.dll": [
    "DCICreateOverlay",
    "DCIBeginAccess",
    "WinWatchNotify",
    "WinWatchClose",
    "DCISetSrcDestClip",
    "GetDCRegionData",
    "WinWatchGetClipList",
    "DCICreatePrimary",
    "DCIOpenProvider",
    "GetWindowRegionData",
    "DCISetDestination",
    "DCICloseProvider",
    "DCISetClipList",
    "DCIDraw",
    "WinWatchOpen",
    "DCIEndAccess",
    "DCIEnum",
    "DCIDestroy",
    "WinWatchDidStatusChange",
    "DCICreateOffscreen"
  ],
  "dcomp.dll": [
    "DCompositionCreateSurfaceHandle",
    "DCompositionCreateDevice"
  ],
  "ddp_ps.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "ddpchunk.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "ddptrace.dll": [
    "SrmIsTracingEnabledPerThread",
    "SrmGetTracingContextPerThread",
    "SrmTraceBinary",
    "SrmSetDebugReport",
    "SrmTraceMessage",
    "SrmTraceUninitialize",
    "SrmSetTracingContextPerThread",
    "SrmTraceInitialize",
    "SrmIsKernelDebuggerAttached",
    "SrmIsTracingEnabledOnModule",
    "SrmIsTracingEnabled",
    "SrmGetTracingSequenceNumber",
    "SrmGetTracingModuleInfo",
    "SrmIsTracingEnabledOnFunction"
  ],
  "ddputils.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "ddraw.dll": [
    "DirectDrawCreate",
    "DSoundHelp",
    "GetDDSurfaceLocal",
    "RegisterSpecialCase",
    "DirectDrawCreateClipper",
    "GetSurfaceFromDC",
    "GetOLEThunkData",
    "SetAppCompatData",
    "CompleteCreateSysmemSurface",
    "DllCanUnloadNow",
    "DDInternalLock",
    "DDGetAttachedSurfaceLcl",
    "DirectDrawCreateEx",
    "ReleaseDDThreadLock",
    "DDInternalUnlock",
    "DllGetClassObject",
    "D3DParseUnknownCommand",
    "DirectDrawEnumerateExW",
    "DirectDrawEnumerateW",
    "DirectDrawEnumerateA",
    "DirectDrawEnumerateExA",
    "AcquireDDThreadLock"
  ],
  "ddrawex.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "defragproxy.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "defragsvc.dll": [
    "ServiceMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "delegatorprovider.dll": [
    "DllCanUnloadNow",
    "DllMain",
    "DllGetClassObject"
  ],
  "deskadp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "deskmon.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "devenum.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "deviceaccess.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject",
    "CreateDeviceAccessInstance"
  ],
  "deviceassociation.dll": [
    "DafStartFinalize",
    "DafCreateChallengeContext",
    "DafCreateAssociationContextFromOobBlob",
    "DafStartRemoveAssociation",
    "DafMemFree",
    "DafSelectCeremony",
    "DafStartEnumCeremonies",
    "DafStartWriteCeremonyData",
    "DafCloseChallengeContext",
    "DafCreateAssociationContext",
    "DafCloseAssociationContext",
    "DafStartReadCeremonyData",
    "DafChallengeDevicePresence"
  ],
  "devinv.dll": [
    "CreateDeviceInventory",
    "RunDeviceInventoryW"
  ],
  "devmgr.dll": [
    "DeviceProblenWizard_RunDLLA",
    "DeviceCreateHardwarePage",
    "DeviceAdvancedPropertiesA",
    "DeviceProblemTextW",
    "DllRegisterServer",
    "DllUnregisterServer",
    "DeviceManager_ExecuteA",
    "DeviceProblemWizardW",
    "DeviceProperties_RunDLLA",
    "DeviceCreateHardwarePageEx",
    "DeviceProblemWizardA",
    "DeviceManager_ExecuteW",
    "DllCanUnloadNow",
    "DeviceCreateHardwarePageCustom",
    "DevicePropertiesW",
    "DeviceProperties_RunDLLW",
    "DevicePropertiesExW",
    "DeviceProblemTextA",
    "DllGetClassObject",
    "DeviceAdvancedPropertiesW",
    "DevicePropertiesA",
    "DevicePropertiesExA",
    "DeviceProblenWizard_RunDLLW"
  ],
  "devobj.dll": [
    "DevObjOpenClassRegKey",
    "DevObjSetDeviceInterfaceDefault",
    "DevObjBuildClassInfoList",
    "DevObjGetDeviceInterfaceDetail",
    "DevObjChangeState",
    "DevObjSetClassRegistryProperty",
    "DevObjUninstallDevice",
    "DevObjGetDeviceInterfaceProperty",
    "DevObjGetDeviceRegistryProperty",
    "DevObjSetDeviceProperty",
    "DevObjDeleteDevRegKey",
    "DevObjCreateDeviceInfoList",
    "DevObjDeleteDeviceInterfaceData",
    "DevObjOpenDevRegKey",
    "DevObjSetDeviceInfoDetail",
    "DevObjDeleteDevice",
    "DevObjDeleteDeviceInfo",
    "DevObjGetDeviceInfoListDetail",
    "DevObjLocateDevice",
    "DevObjGetDeviceInterfaceAlias",
    "DevObjGetDeviceInfoListClass",
    "DevObjRemoveDeviceInterface",
    "DevObjGetClassProperty",
    "DevObjClassGuidsFromName",
    "DevObjSetClassProperty",
    "DevObjClassNameFromGuid",
    "DevObjCreateDevRegKey",
    "DevObjCreateDeviceInterface",
    "DevObjGetClassPropertyKeys",
    "DevObjEnumDeviceInterfaces",
    "DevObjGetDeviceProperty",
    "DevObjGetClassDevs",
    "DevObjOpenDeviceInfo",
    "DevObjCreateDeviceInfo",
    "DevObjRegisterDeviceInfo",
    "DevObjCreateDeviceInterfaceRegKey",
    "DevObjSetDeviceRegistryProperty",
    "DevObjGetClassDescription",
    "DevObjGetDeviceInstanceId",
    "DevObjGetClassRegistryProperty",
    "DevObjOpenDeviceInterfaceRegKey",
    "DevObjDestroyDeviceInfoList",
    "DevObjGetDeviceInterfacePropertyKeys",
    "DevObjGetDevicePropertyKeys",
    "DevObjGetDeviceInfoDetail",
    "DevObjDeleteDeviceInterfaceRegKey",
    "DevObjEnumDeviceInfo",
    "DevObjSetDeviceInterfaceProperty",
    "DevObjDeleteAllInterfacesForDevice",
    "DevObjOpenDeviceInterface"
  ],
  "devrtl.dll": [
    "NdxTableGetObjectTypeName",
    "NdxTableOpen",
    "NdxTableObjectFromName",
    "DevRtlGetThreadLogToken",
    "NdxTableGetPropertyTypeClass",
    "NdxTableObjectFromPointer",
    "NdxTableGetPropertyValue",
    "DevRtlCreateTextLogSectionW",
    "NdxTableNextObject",
    "NdxTableGetPropertyTypeName",
    "NdxTableAddObject",
    "NdxTableFirstObjectInList",
    "DevRtlCloseTextLogSection",
    "NdxTableRemoveObject",
    "DevRtlCreateTextLogSectionA",
    "NdxTableSetObjectPointer",
    "NdxTableGetPropertyTypeCount",
    "DevRtlWriteTextLog",
    "NdxTableClose",
    "NdxTableSetTypeDefinition",
    "NdxTableGetObjectType",
    "DevRtlSetThreadLogToken",
    "NdxTableFirstObject",
    "NdxTableSetPropertyValue",
    "NdxTableRemoveObjectFromList",
    "NdxTableAddObjectToList",
    "DevRtlWriteTextLogError",
    "NdxTableGetObjectTypeCount",
    "NdxTableGetObjectName"
  ],
  "dfdts.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "DfdGetDefaultPolicyAndSMART",
    "WdiHandleInstance"
  ],
  "dfscli.dll": [
    "I_NetDfsIsThisADomainName",
    "NetDfsAddStdRoot",
    "NetDfsSetFtContainerSecurity",
    "NetDfsEnum",
    "NetDfsSetStdContainerSecurity",
    "NetDfsRemoveFtRoot",
    "NetDfsRemoveStdRoot",
    "NetDfsRemoveFtRootForced",
    "NetDfsAdd",
    "NetDfsAddStdRootForced",
    "NetDfsRemoveRootTarget",
    "NetDfsManagerGetConfigInfo",
    "NetDfsGetClientInfo",
    "NetDfsGetStdContainerSecurity",
    "NetDfsSetInfo",
    "NetDfsGetInfo",
    "NetDfsManagerSendSiteInfo",
    "NetDfsGetSecurity",
    "NetDfsAddRootTarget",
    "NetDfsManagerInitialize",
    "NetDfsRemove",
    "NetDfsGetDcAddress",
    "NetDfsMove",
    "NetDfsGetSupportedNamespaceVersion",
    "NetDfsAddFtRoot",
    "NetDfsGetFtContainerSecurity",
    "NetDfsSetSecurity",
    "NetDfsSetClientInfo",
    "NetDfsRename"
  ],
  "dfshim.dll": [
    "ShOpenVerbApplicationW",
    "CreateActContext",
    "CreateCMSFromXml",
    "ShOpenVerbExtensionW",
    "ShOpenVerbExtension",
    "CleanOnlineAppCache",
    "ShArpMaintain",
    "GetUserStore",
    "DllCanUnloadNow",
    "ShArpMaintainW",
    "GetDeploymentDataFromManifest",
    "ShOpenVerbShortcutW",
    "ShOpenVerbApplication",
    "KillService",
    "DllGetClassObject",
    "ShOpenVerbShortcut",
    "GetUserStateManager",
    "GetCurrentActContext",
    "ParseManifest",
    "LaunchApplication"
  ],
  "dhcpcmonitor.dll": [
    "InitHelperDll"
  ],
  "dhcpcore.dll": [
    "DhcpGlobalServiceSyncEvent",
    "DhcpGlobalIsShuttingDown",
    "DhcpGlobalTerminateEvent",
    "ServiceMain"
  ],
  "dhcpcore6.dll": [
    "Dhcpv6Main"
  ],
  "dhcpcsvc.dll": [
    "DhcpGlobalTerminateEvent",
    "DhcpStaticRefreshParams",
    "DhcpFallbackRefreshParams",
    "DhcpCApiCleanup",
    "McastApiCleanup",
    "Dhcpv4CheckServerAvailability",
    "DhcpRegisterOptions",
    "DhcpAcquireParameters",
    "DhcpLeaseIpAddress",
    "DhcpNotifyConfigChange",
    "DhcpGlobalIsShuttingDown",
    "DhcpOpenGlobalEvent",
    "DhcpGetFallbackParams",
    "DhcpGetOriginalSubnetMask",
    "DhcpQueryLeaseInfoArray",
    "DhcpRequestParams",
    "DhcpRegisterParamChange",
    "DhcpDeRegisterOptions",
    "DhcpGetClientId",
    "DhcpFreeLeaseInfoArray",
    "DhcpReleaseIpAddressLeaseEx",
    "DhcpRenewIpAddressLease",
    "DhcpReleaseParameters",
    "DhcpNotifyConfigChangeEx",
    "DhcpEnableDhcp",
    "McastEnumerateScopes",
    "DhcpUndoRequestParams",
    "DhcpDeRegisterParamChange",
    "DhcpGetDhcpServicedConnections",
    "Dhcpv4EnableDhcpEx",
    "DhcpFreeEnumeratedInterfaces",
    "DhcpEnableTracing",
    "DhcpGlobalServiceSyncEvent",
    "McastRenewAddress",
    "DhcpGetNotificationStatus",
    "DhcpQueryLeaseInfoEx",
    "DhcpSetMSFTVendorSpecificOptions",
    "DhcpIsEnabled",
    "DhcpGetTraceArray",
    "DhcpSetFallbackParams",
    "McastApiStartup",
    "DhcpAcquireParametersByBroadcast",
    "McastGenUID",
    "McastRequestAddress",
    "DhcpReleaseIpAddressLease",
    "DhcpEnumClasses",
    "McastReleaseAddress",
    "DhcpDelPersistentRequestParams",
    "DhcpClient_Generalize",
    "DhcpHandlePnPEvent",
    "DhcpRemoveDNSRegistrations",
    "DhcpEnumInterfaces",
    "DhcpFreeLeaseInfo",
    "DhcpGetClassId",
    "DhcpQueryLeaseInfo",
    "DhcpLeaseIpAddressEx",
    "DhcpRequestCachedParams",
    "DhcpDeRegisterConnectionStateNotification",
    "DhcpCApiInitialize",
    "DhcpRequestOptions",
    "DhcpRegisterConnectionStateNotification",
    "DhcpPersistentRequestParams",
    "DhcpFreeMem",
    "DhcpNotifyMediaReconnected",
    "DhcpSetClassId",
    "DhcpRenewIpAddressLeaseEx",
    "DhcpSetClientId"
  ],
  "dhcpcsvc6.dll": [
    "Dhcpv6FreeLeaseInfo",
    "Dhcpv6FreeLeaseInfoArray",
    "Dhcpv6QueryLeaseInfoArray",
    "Dhcpv6RequestParams",
    "Dhcpv6RequestPrefixEx",
    "Dhcpv6CApiCleanup",
    "Dhcpv6ReleasePrefixEx",
    "Dhcpv6SetUserClass",
    "Dhcpv6QueryLeaseInfo",
    "Dhcpv6EnableDhcp",
    "Dhcpv6CancelOperation",
    "Dhcpv6RenewPrefix",
    "Dhcpv6RequestPrefix",
    "Dhcpv6ReleaseParameters",
    "Dhcpv6GetTraceArray",
    "Dhcpv6RenewPrefixEx",
    "Dhcpv6EnableTracing",
    "Dhcpv6ReleasePrefix",
    "Dhcpv6GetUserClasses",
    "Dhcpv6IsEnabled",
    "Dhcpv6CApiInitialize",
    "Dhcpv6AcquireParameters"
  ],
  "dhcpsapi.dll": [
    "DhcpGetClassInfo",
    "DhcpServerSetConfig",
    "DhcpGetClientInfo",
    "DhcpV4SetPolicyEnforcement",
    "DhcpV4FailoverDeleteScopeFromRelationship",
    "DhcpV4DeletePolicy",
    "DhcpServerRestoreDatabase",
    "DhcpSetServerBindingInfo",
    "DhcpGetMibInfoVQ",
    "DhcpRemoveSubnetElementV5",
    "DhcpRemoveOptionValueV6",
    "DhcpSetOptionValueV6",
    "DhcpGetAllOptions",
    "DhcpGetFilterV4",
    "DhcpCreateClassV6",
    "DhcpServerQueryDnsRegCredentials",
    "DhcpDsInit",
    "DhcpGetThreadOptions",
    "DhcpSetOptionValuesV5",
    "DhcpAddServer",
    "DhcpV4GetPolicy",
    "DhcpSetSubnetInfoVQ",
    "DhcpCreateOptionV6",
    "DhcpCreateOption",
    "DhcpGetClientInfoV4",
    "DhcpGetClientInfoVQ",
    "DhcpGetOptionValue",
    "DhcpEnumOptionValuesV6",
    "DhcpSetOptionValueV5",
    "DhcpRemoveSubnetElement",
    "DhcpCreateSubnetVQ",
    "DhcpServerQueryAttribute",
    "DhcpRemoveOptionValueV5",
    "DhcpEnumMScopes",
    "DhcpSetClientInfoV6",
    "DhcpEnumSubnetElementsV6",
    "DhcpSetOptionInfoV5",
    "DhcpAddMScopeElement",
    "DhcpDeleteServer",
    "DhcpGetOptionValueV6",
    "DhcpGetOptionInfoV6",
    "DhcpGetVersion",
    "DhcpGetServerBindingInfo",
    "DhcpDeleteMScope",
    "DhcpEnumMScopeClients",
    "DhcpEnumSubnetClients",
    "DhcpGetSubnetInfo",
    "DhcpSetSubnetDelayOffer",
    "DhcpAddSubnetElementV5",
    "DhcpServerGetConfigVQ",
    "DhcpAddSubnetElementV4",
    "DhcpV4FailoverGetClientInfo",
    "DhcpV4FailoverAddScopeToRelationship",
    "DhcpEnumMScopeElements",
    "DhcpGetAllOptionValuesV6",
    "DhcpV4FailoverGetScopeStatistics",
    "DhcpEnumSubnets",
    "DhcpDeleteSubnetV6",
    "DhcpServerAuditlogParamsFree",
    "DhcpGetServerSpecificStrings",
    "DhcpGetSubnetInfoV6",
    "DhcpRemoveOption",
    "DhcpRemoveOptionV6",
    "DhcpEnumSubnetClientsFilterStatusInfo",
    "DhcpV6CreateClientInfo",
    "DhcpSetClientInfo",
    "DhcpEnumSubnetClientsV5",
    "DhcpHlprModifyV4PolicyExpr",
    "DhcpV4RemovePolicyRange",
    "DhcpHlprIsV4PolicyWellFormed",
    "DhcpSetFilterV4",
    "DhcpGetMScopeInfo",
    "DhcpScanMDatabase",
    "DhcpV4FailoverCreateRelationship",
    "DhcpHlprFreeV4PolicyArray",
    "DhcpRpcFreeMemory",
    "DhcpDeleteSubnet",
    "DhcpSetMScopeInfo",
    "DhcpHlprIsV4PolicyValid",
    "DhcpGetAllOptionsV6",
    "DhcpSetOptionValue",
    "DhcpServerQueryAttributes",
    "DhcpEnumClassesV6",
    "DhcpServerSetDnsRegCredentials",
    "DhcpV4FailoverTriggerAddrAllocation",
    "DhcpEnumOptionValuesV5",
    "DhcpV4FailoverDeleteRelationship",
    "DhcpDsClearHostServerEntries",
    "DhcpAddFilterV4",
    "DhcpEnumSubnetClientsV4",
    "DhcpCreateClientInfoVQ",
    "DhcpHlprAddV4PolicyExpr",
    "DhcpRemoveSubnetElementV6",
    "DhcpServerRedoAuthorization",
    "DhcpV4FailoverGetSystemTime",
    "DhcpServerGetConfigV4",
    "DhcpV4FailoverGetAddressStatus",
    "DhcpCreateClientInfo",
    "DhcpGetMibInfoV5",
    "DhcpHlprFreeV4Policy",
    "DhcpServerSetDnsRegCredentialsV5",
    "DhcpGetClientInfoV6",
    "DhcpEnumOptionsV6",
    "DhcpV4EnumPolicies",
    "DhcpHlprCreateV4Policy",
    "DhcpAddSubnetElementV6",
    "DhcpEnumOptionsV5",
    "DhcpRemoveOptionValue",
    "DhcpV4EnumSubnetClients",
    "DhcpRemoveOptionV5",
    "DhcpGetMibInfo",
    "DhcpModifyClass",
    "DhcpSetOptionValues",
    "DhcpCreateClientInfoV4",
    "DhcpEnumOptionValues",
    "DhcpServerGetConfigV6",
    "DhcpV4FailoverSetRelationship",
    "DhcpHlprAddV4PolicyRange",
    "DhcpEnumServers",
    "DhcpV4QueryPolicyEnforcement",
    "DhcpV4FailoverGetRelationship",
    "DhcpEnumSubnetElements",
    "DhcpScanDatabase",
    "DhcpServerSetConfigV4",
    "DhcpEnumSubnetClientsV6",
    "DhcpDsCleanup",
    "DhcpGetOptionInfo",
    "DhcpV4GetAllOptionValues",
    "DhcpGetSubnetDelayOffer",
    "DhcpGetOptionValueV5",
    "DhcpCreateSubnetV6",
    "DhcpSetSubnetInfo",
    "DhcpEnumClasses",
    "DhcpGetSuperScopeInfoV4",
    "DhcpV4CreateClientInfo",
    "DhcpV4FailoverGetScopeRelationship",
    "DhcpSetClientInfoVQ",
    "DhcpSetSuperScopeV4",
    "DhcpV4SetOptionValues",
    "DhcpV6SetStatelessStoreParams",
    "DhcpSetServerBindingInfoV6",
    "DhcpV4RemoveOptionValue",
    "DhcpV4GetFreeIPAddress",
    "DhcpCreateOptionV5",
    "DhcpServerBackupDatabase",
    "DhcpEnumSubnetClientsVQ",
    "DhcpSetThreadOptions",
    "DhcpAuditLogSetParams",
    "DhcpV4GetClientInfo",
    "DhcpDeleteMClientInfo",
    "DhcpAddSecurityGroup",
    "DhcpSetOptionInfo",
    "DhcpEnumSubnetElementsV4",
    "DhcpV4FailoverEnumRelationship",
    "DhcpGetOptionInfoV5",
    "DhcpServerGetConfig",
    "DhcpGetSubnetInfoVQ",
    "DhcpServerSetConfigV6",
    "DhcpSetOptionInfoV6",
    "DhcpGetClientOptions",
    "DhcpDeleteFilterV4",
    "DhcpRemoveMScopeElement",
    "DhcpDeleteClassV6",
    "DhcpGetMCastMibInfo",
    "DhcpCreateClass",
    "DhcpV4GetOptionValue",
    "DhcpV6GetFreeIPAddress",
    "DhcpHlprResetV4PolicyExpr",
    "DhcpDeleteClientInfoV6",
    "DhcpHlprAddV4PolicyCondition",
    "DhcpServerSetConfigVQ",
    "DhcpV4AddPolicyRange",
    "DhcpEnumOptions",
    "DhcpEnumSubnetsV6",
    "DhcpV6GetStatelessStoreParams",
    "DhcpModifyClassV6",
    "DhcpSetSubnetInfoV6",
    "DhcpV6GetStatelessStatistics",
    "DhcpDeleteSuperScopeV4",
    "DhcpEnumSubnetElementsV5",
    "DhcpV4SetPolicy",
    "DhcpCreateSubnet",
    "DhcpV4CreatePolicy",
    "DhcpDeleteClass",
    "DhcpDeleteClientInfo",
    "DhcpEnumFilterV4",
    "DhcpGetAllOptionValues",
    "DhcpGetServerBindingInfoV6",
    "DhcpAddSubnetElement",
    "DhcpRemoveSubnetElementV4",
    "DhcpAuditLogGetParams",
    "DhcpHlprIsV4PolicySingleUC",
    "DhcpSetClientInfoV4",
    "DhcpV4EnumSubnetReservations",
    "DhcpGetMibInfoV6",
    "DhcpV4SetOptionValue"
  ],
  "diagperf.dll": [
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiDiagnosticModuleMain",
    "WdiHandleInstance",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "difxapi.dll": [
    "DriverPackageGetPathA",
    "DriverPackageGetPathW",
    "DriverPackagePreinstallW",
    "DIFXAPISetLogCallbackA",
    "DriverPackageInstallA",
    "DriverPackagePreinstallA",
    "DriverPackageInstallW",
    "SetDifxLogCallbackW",
    "DriverPackageUninstallA",
    "SetDifxLogCallbackA",
    "DIFXAPISetLogCallbackW",
    "DriverPackageUninstallW"
  ],
  "dimsjob.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dimsroam.dll": [
    "DimsRoamEntry"
  ],
  "dinput.dll": [
    "DirectInputCreateEx",
    "DirectInputCreateW",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DirectInputCreateA",
    "DllUnregisterServer"
  ],
  "dinput8.dll": [
    "DirectInput8Create",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "discan.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "diskcopy.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DiskCopyRunDll",
    "DiskCopyRunDllW"
  ],
  "dispci.dll": [
    "DisplayClassInstaller"
  ],
  "dispex.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "dlnashext.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dmband.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dmcompos.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dmdlgs.dll": [
    "public: void __thiscall CDataCache::AddLDMObjMapEntry(struct _LDM_OBJ_MAP_ENTRY *)",
    "public: unsigned long __thiscall CDataCache::GetVolumeCount(void)",
    "public: class CString __thiscall CDataCache::GetServerName(void)",
    "public: unsigned long __thiscall CDataCache::GetDiskCount(void)",
    "public: __int64 __thiscall CDMNodeObj::GetLdmObjectId(void)",
    "public: class CWnd * __thiscall CTaskData::GetOcxFrameCWndPtr(void)",
    "public: unsigned long __thiscall CDMNodeObj::GetNumMembers(void)",
    "void __stdcall FreeArrayOfStrings(struct arrayOfStrings *)",
    "DllCanUnloadNow",
    "public: void __thiscall CTaskData::GetRegionColorStructPtr(struct _REGION_COLORS * *,int &)",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dmdskmgr.dll": [
    "public: int __thiscall CDMNodeObj::IsMember(class CDMNodeObj *)",
    "public: void __thiscall CDataCache::CreateVolumeList(void)",
    "public: int __thiscall CDMNodeObj::GetDiskInfo(struct diskinfoex &)",
    "public: int __thiscall CTaskData::IsPreLonghornVdsVersion(void)",
    "public: long __thiscall CContextMenu::ShowContextMenu(class CWnd *,long,long,long)",
    "public: void __thiscall CTaskData::GetDiskCookiesForSig(unsigned long &,long * *)",
    "public: int __thiscall CDMNodeObj::ContainsSystemInformation(void)",
    "public: int __thiscall CDataCache::FindRegionPtrOnDiskFromRegionId(class CDMNodeObj *,__int64,class CDMNodeObj * *,struct __POSITION * &)",
    "public: unsigned int __thiscall CDMNodeObj::GetIconId(int)",
    "public: unsigned long __thiscall CDMNodeObj::GetExtendedRegionColor(void)",
    "public: unsigned long __thiscall CDMNodeObj::GetDeviceState(void)",
    "public: int __thiscall CTaskData::HasNTFSwithDriveLetter(void)",
    "public: void __thiscall CTaskData::GetOtherDisksFromVolCookie(long,unsigned long &,long * *)",
    "protected: void __thiscall CDataCache::GetDiskCookies(unsigned long &,long * *)",
    "public: int __thiscall CDMNodeObj::ContainsBootVolumesNumberChange(__int64,int *)",
    "public: int __thiscall CDMNodeObj::IsVolumeSimple(void)",
    "public: int __thiscall CDMNodeObj::ContainsBootIniPartitionForWolfpack(void)",
    "public: int __thiscall CDMNodeObj::ContainsActivePartition(void)",
    "public: void __thiscall CContextMenu::PopUpInit(class CDMNodeObj *,int &,int &,int)",
    "class CString __stdcall GetStringFromRc(unsigned long)",
    "public: int __thiscall CDMNodeObj::IsMbrEEPartition(void)",
    "public: void __thiscall CTaskData::FindDriveLetter(__int64,unsigned short &)",
    "public: int __thiscall CTaskData::IsEfi(void)",
    "public: void __thiscall CTaskData::GetDiskInfoFromVolCookie(long,int &,unsigned long &,long * *,unsigned long,int)",
    "public: int __thiscall CDMNodeObj::IsDiskOffline(void)",
    "public: unsigned long __thiscall CDataCache::GetDiskCount(void)",
    "public: void __thiscall CTaskData::GetDiskCookies(unsigned long &,long * *,int,unsigned long,int)",
    "public: int __thiscall CDMNodeObj::HasExtendedPartition(void)",
    "public: void __thiscall CDataCache::EnumNTFSwithDriveLetter(int *,unsigned short * *)",
    "public: void __thiscall CTaskData::GetDiskCookiesForAddMirror(long,unsigned long &,long * *)",
    "public: void __thiscall CTaskData::GetDiskCookiesForCreateVolume(unsigned long &,long * *)",
    "public: long __thiscall CDMNodeObj::IsConvertSuccess(int)",
    "public: int __thiscall CTaskData::SupportGpt(void)",
    "public: int __thiscall CDMNodeObj::IsFreeSpaceFollowed(__int64)",
    "public: void __thiscall CDMNodeObj::GetPartitionStyleString(class CString &,int)",
    "public: int __thiscall CDataCache::SupportMirror(void)",
    "public: void __thiscall CDataCache::DeleteLists(void)",
    "public: int __thiscall CDMNodeObj::GetFileSystemType(void)",
    "public: int __thiscall CDMNodeObj::IsDiskReadOnly(void)",
    "public: int __thiscall CDMNodeObj::OnlyContiguousExtendAllowed(void)",
    "public: void __thiscall CDataCache::PopulateDiskGroupData(struct DISK_GROUP_DATA *)",
    "public: void __thiscall CDMNodeObj::GetName(class CString &)",
    "public: void __thiscall CTaskData::EnumVolumes(unsigned long &,long * *)",
    "public: int __thiscall CTaskData::IsLocalMachine(void)",
    "public: struct HWND__ * __thiscall CDMComponentData::GetMMCWindow(void)",
    "void __stdcall ParseDeviceName(int *,int *,int *,unsigned short *)",
    "public: long __thiscall CDMNodeObj::IsExtendedPartitionCreated(void)",
    "DllGetClassObject",
    "public: int __thiscall CDMNodeObj::CanHaveGPT(void)",
    "public: int __thiscall CDMNodeObj::GetExtraRegionStatus(class CString &,int)",
    "public: class CString __thiscall CTaskData::GetServerName(void)",
    "public: void __thiscall CContextMenu::DoDelete(long)",
    "public: __int64 __thiscall CDataCache::GetLastKnownState(__int64)",
    "public: int __thiscall CDataCache::FindDriveLetter(__int64,unsigned short &)",
    "public: int __thiscall CDMNodeObj::GetStatus(void)",
    "protected: void __thiscall CDataCache::GetMinMaxPartitionSizes(long,__int64 &,__int64 &)",
    "public: unsigned long __thiscall CDataCache::GetVolumeCount(void)",
    "public: int __thiscall CDMNodeObj::IsInFlux(void)",
    "public: int __thiscall CDMNodeObj::ContainsSystemPartition(void)",
    "public: void __thiscall CDataCache::SetDriveLetterInUse(unsigned short,int)",
    "public: void __thiscall CTaskData::GetMinMaxPartitionSizes(long,__int64 &,__int64 &)",
    "public: class CDMNodeObj * __thiscall CDMNodeObj::GetParentDiskPtr(void)",
    "public: class CDMNodeObj * __thiscall CDataCache::CreateNodeObjAndAddToMap(int,enum _NODEOBJ_TYPES,class CDataCache *,void *,__int64)",
    "public: unsigned long __thiscall CDMNodeObj::GetNumRegions(void)",
    "public: int __thiscall CDataCache::HasNTFSwithDriveLetter(void)",
    "public: int __thiscall CDMNodeObj::IsRevertable(void)",
    "public: __int64 __thiscall CDMNodeObj::GetUnallocSpace(int)",
    "void __stdcall CookieSort(long *,unsigned int,unsigned int,unsigned int,int (__stdcall*)(long,long))",
    "public: int __thiscall CTaskData::IsNEC_98Server(void)",
    "public: __int64 __thiscall CDMNodeObj::GetUsableContiguousSpaceInMB(void)",
    "public: int __thiscall CDMNodeObj::GetImageNum(void)",
    "public: void __thiscall CDMNodeObj::GetObjectId(__int64 &)",
    "public: void __thiscall CDMNodeObj::GetStorageType(class CString &,int)",
    "public: int __thiscall CDMNodeObj::ContainsPageFile(void)",
    "public: int __thiscall CDMNodeObj::IsFakeVolume(void)",
    "public: void __thiscall CDMNodeObj::MarkDisksForLastVolume(void)",
    "public: int __thiscall CDMNodeObj::GetVolumeStatus(class CString &)",
    "public: int __thiscall CDataCache::FindRegionPtrFromRegionId(__int64,class CDMNodeObj * *)",
    "public: __int64 __thiscall CDMNodeObj::GetStartOffset(void)",
    "public: int __thiscall CTaskData::IsPostLonghornVdsVersion(void)",
    "public: void __thiscall CTaskData::GetDiskCookiesForExtendVolume(long,unsigned long &,long * *)",
    "public: void __thiscall CDMNodeObj::EnumDiskRegions(long * *,long &)",
    "public: int __thiscall CDMNodeObj::IsESPPartition(void)",
    "IsRequestPending",
    "public: void __thiscall CDMComponentData::DeleteRow(class CDMScopeNode *,long)",
    "public: void __thiscall CDataCache::GetFileSystemTypes(unsigned long &,struct ifilesysteminfo * *)",
    "public: void __thiscall CTaskData::GetDiskCookiesForUpgrade(unsigned long &,long * *)",
    "public: int __thiscall CTaskData::GetAssignedDriveLetter(long,unsigned short &)",
    "public: void __thiscall CDMComponentData::SetOcxViewTypeForce(class CDMScopeNode *)",
    "public: unsigned short * __thiscall CDataCache::FindDeviceInstanceId(__int64)",
    "public: short __thiscall CTaskData::GetIVolumeClientVersion(void)",
    "int __stdcall GetDiskStatusHelper(struct diskinfoex *,class CString &,int)",
    "public: void __thiscall CDMComponentData::AddRow(class CDMScopeNode *,long)",
    "public: void __thiscall CDMNodeObj::GetFileSystemName(class CString &)",
    "protected: void __thiscall CDataCache::GetDriveLetters(short &,unsigned short * *,unsigned short)",
    "public: int __thiscall CDMNodeObj::IsFirstFreeRegion(void)",
    "public: enum _LAYOUT_TYPES __thiscall CDMNodeObj::GetLayoutType(void)",
    "public: int __thiscall CTaskData::GetBootPort(void)",
    "public: void __thiscall CDMComponentData::ReloadData(class CDMScopeNode *)",
    "public: __int64 __thiscall CDMNodeObj::GetShrinkableSizeInMB(void)",
    "public: void __thiscall CDataCache::CreateDiskList(void)",
    "public: void __thiscall CDataCache::PopulateEncapsulateData(struct ENCAPSULATE_DATA *)",
    "public: int __thiscall CDMNodeObj::IsCurrBootVolume(void)",
    "public: unsigned long __thiscall CDMNodeObj::GetColorRef(void)",
    "public: int __thiscall CDataCache::IsNEC_98Server(void)",
    "public: unsigned long __thiscall CDMNodeObj::GetNumMembers(void)",
    "public: void __thiscall CTaskData::GetDiskCookiesWithFreeSpace(unsigned long &,long * *)",
    "public: int __thiscall CDMNodeObj::IsOemPartition(void)",
    "int __stdcall IsMbrEEPartition(struct regioninfoex &)",
    "public: void __thiscall CDMNodeObj::GetSize(__int64 &,int)",
    "public: int __thiscall CDataCache::FindCookieAndRemoveFromList(long,class CList *)",
    "public: void __thiscall CDataCache::SetDiskList(struct diskinfoex *,unsigned long)",
    "public: int __thiscall CDMNodeObj::GetVolumeInfo(struct volumeinfo &)",
    "public: void __thiscall CDataCache::AddLDMObjMapEntry(struct _LDM_OBJ_MAP_ENTRY *)",
    "public: int __thiscall CDMNodeObj::IsCurrSystemVolume(void)",
    "public: int __thiscall CDMComponentData::GetScopeNodeForResultPane(long,class CDMScopeNode * *)",
    "public: void __thiscall CTaskData::EnumDisks(unsigned long &,long * *)",
    "public: void __thiscall CDMNodeObj::GetFileSystemSize(long &)",
    "void __stdcall GetPartitionStyleStringHelper(enum _PARTITIONSTYLE,class CString &,int,unsigned long,unsigned long,int)",
    "public: int __thiscall CDataCache::HasVMDisk(void)",
    "public: void __thiscall CDMComponentData::UIStateChange(class CDMScopeNode *,unsigned long)",
    "public: int __thiscall CDMScopeNodeCollection::GetScopeNode(long,class CDMScopeNode * *)",
    "public: int __thiscall CDMNodeObj::IsNEC_98Disk(void)",
    "public: int __thiscall CDMNodeObj::IsUpgradeable(void)",
    "public: int __thiscall CDMNodeObj::ContainsSubDiskNeedResync(void)",
    "public: void __thiscall CDMComponentData::LoadData(class CDMScopeNode *,long)",
    "public: int __thiscall CDMNodeObj::GetOfflineReasonText(class CString &)",
    "public: void __thiscall CTaskData::GetDiskCookiesToEncap(unsigned long &,long * *)",
    "public: void __thiscall CDataCache::AdjustVolumeCountInLegendList(enum _VOLUMELAYOUT,int,class CTaskData *)",
    "public: class CDMNodeObj * __thiscall CTaskData::GetDMDataObjPtrFromId(__int64)",
    "public: void __thiscall CDMSnapin::UpDateConsoleView(long)",
    "public: int __thiscall CDMNodeObj::VolumeContainsActiveRegion(void)",
    "int __stdcall FindDriveLetterHelper(struct driveletterinfo *,int,__int64,unsigned short &)",
    "public: int __thiscall CDMNodeObj::ContainsLogicalDrvBootPartition(void)",
    "public: int __thiscall CDMNodeObj::GetPatternRef(void)",
    "public: int __thiscall CDMNodeObj::IsUnknownPartition(void)",
    "public: void __thiscall CTaskData::SetUIState(unsigned long)",
    "public: int __thiscall CTaskData::IsSecureSystemPartition(void)",
    "public: void __thiscall CDMNodeObj::RecalculateSpace(void)",
    "public: int __thiscall CDataCache::IsEfi(void)",
    "public: void __thiscall CDMNodeObj::GetDriveLetter(unsigned short &)",
    "public: void __thiscall CDataCache::AddRegionToVolumeMemberList(class CDMNodeObj *)",
    "public: void __thiscall CTaskData::FilterCookiesBigEnoughForRAID5Repair(unsigned long &,long *,long * *,__int64,class CDMNodeObj *)",
    "public: int __thiscall CTaskData::FindFileSystem(__int64,struct filesysteminfo &)",
    "public: class CDMNodeObj * __thiscall CDataCache::CreateRegionNodeObj(class CDMNodeObj *,struct regioninfoex *)",
    "public: void __thiscall CDMNodeObj::GetDiskTypeName(class CString &)",
    "protected: void __thiscall CDataCache::GetVolumeCookies(unsigned long &,long * *)",
    "public: int __thiscall CDMNodeObj::ContainsESPPartition(void)",
    "public: int __thiscall CDataCache::IsPostLonghornVdsVersion(void)",
    "public: void __thiscall CDMNodeObj::SetFSId(__int64)",
    "public: void __thiscall CDMSnapin::SetDescriptionBarText(long)",
    "public: int __thiscall CDMNodeObj::IsHiddenRegion(void)",
    "public: int __thiscall CTaskData::IsWolfpack(void)",
    "public: int __thiscall CDMNodeObj::IsEECoveredGPTDisk(void)",
    "public: void __thiscall CDMComponentData::ChangeRow(class CDMScopeNode *,long)",
    "public: void __thiscall CTaskData::FilterCookiesBigEnoughForFTRepair(unsigned long &,long *,long * *,__int64,class CDMNodeObj *)",
    "public: enum _STORAGE_TYPES __thiscall CDMNodeObj::GetStorageType(void)",
    "int __stdcall CompareDiskNames(long,long)",
    "public: void __thiscall CDMComponentData::RefreshDiskView(class CDMScopeNode *)",
    "public: class CString __thiscall CDataCache::GetServerName(void)",
    "public: int __thiscall CDataCache::IsAlpha(void)",
    "public: int __thiscall CDMNodeObj::IsActive(void)",
    "__int64 __stdcall ConvertBytesToMB(__int64)",
    "public: void __thiscall CDataCache::DeleteDiskGroupData(struct DISK_GROUP_DATA *)",
    "public: enum _PARTITIONSTYLE __thiscall CDMNodeObj::GetPartitionStyle(void)",
    "public: int __thiscall CTaskData::FindRegionPtrFromRegionId(__int64,class CDMNodeObj * *)",
    "public: int __thiscall CDMNodeObj::IsDiskEmpty(void)",
    "public: int __thiscall CDataCache::SupportRaid5(void)",
    "public: void __thiscall CDataCache::AddFileSystemInfoToCache(unsigned long,struct filesysteminfo *)",
    "__int64 __stdcall ConvertMBToBytes(__int64)",
    "public: class CDMNodeObj * __thiscall CDMNodeObj::GetRegionByOffset(__int64)",
    "public: long __thiscall CContextMenu::Command(long,struct IDataObject *,long)",
    "public: unsigned long __thiscall CDMNodeObj::GetMaxPartitionCount(void)",
    "public: int __thiscall CDMNodeObj::EnhancedIsUpgradeable(class CTaskData *)",
    "public: class CDMComponentData * __thiscall CDataCache::GetComponentData(void)",
    "public: void __thiscall CDMNodeObj::EnumFirstVolumeMember(long &,long &)",
    "public: int __thiscall CDataCache::FindFileSystem(__int64,struct filesysteminfo &)",
    "public: void __thiscall CContextMenu::DoRevertToNT4(long,int)",
    "public: void __thiscall CDataCache::DeleteEncapsulateData(struct ENCAPSULATE_DATA *)",
    "public: __int64 __thiscall CDMNodeObj::GetLdmObjectId(void)",
    "public: int __thiscall CDMNodeObj::GetResultStringArray(class CStringArray &)",
    "public: void __thiscall CDMNodeObj::GetLongName(class CString &,int)",
    "public: __int64 __thiscall CDMNodeObj::GetVolumeTotalSizeMB(void)",
    "public: void __thiscall CTaskData::GetDriveLetters(short &,unsigned short * *,unsigned short)",
    "public: int __thiscall CDataCache::FindDiskPtrFromDiskId(__int64,class CDMNodeObj * *)",
    "public: int __thiscall CDataCache::SupportGpt(void)",
    "public: void __thiscall CDMNodeObj::GetFileSystemLabel(class CString &)",
    "public: int __thiscall CDMSnapin::GetResultPane(long,class CDMResultPane * *)",
    "public: unsigned long __thiscall CDMNodeObj::GetPrimaryPartitionCount(void)",
    "public: void __thiscall CDataCache::AdjustRegionCountInLegendList(enum _REGIONTYPE,int,class CTaskData *)",
    "public: int __thiscall CDataCache::IsPersonalOrLapTopServer(void)",
    "public: __thiscall CDMNodeObj::~CDMNodeObj(void)",
    "public: int __thiscall CDMNodeObj::IsSpacesProtectivePartition(void)",
    "public: void __thiscall CTaskData::EnumNTFSwithDriveLetter(int *,unsigned short * *)",
    "public: void __thiscall CDataCache::AddFileSystemInfoToListAndMap(unsigned long,struct filesysteminfo *)",
    "public: int __thiscall CDataCache::IsWolfpack(void)",
    "public: int __thiscall CDMNodeObj::GetRegionInfo(struct regioninfoex &)",
    "public: void __thiscall CDMNodeObj::MarkDiskForLastVolume(class CDMNodeObj *)",
    "public: int __thiscall CDataCache::GetBootPort(void)",
    "int __stdcall IsHiddenRegion(struct regioninfoex &)",
    "DllRegisterServer",
    "public: int __thiscall CDMNodeObj::GetDiskSpec(struct diskspec &)",
    "public: long __thiscall CDMNodeObj::GetVolumeFileSystemTypes(unsigned long &,struct ilhfilesysteminfo * *)",
    "public: int __thiscall CDMNodeObj::ContainsRealSystemPartition(void)",
    "public: long __thiscall CDMNodeObj::GetFlags(void)",
    "public: void __thiscall CDataCache::SetVolumeList(struct volumeinfo *,unsigned long,class CTaskData *)",
    "public: int __thiscall CDataCache::IsPreLonghornVdsVersion(void)",
    "public: unsigned long __thiscall CDMNodeObj::GetDeviceType(void)",
    "public: void __thiscall CDataCache::FillDeviceInstanceId(unsigned short *,unsigned short *)",
    "public: int __thiscall CDMNodeObj::ContainsFVEPartition(void)",
    "public: int __thiscall CDMNodeObj::GetPort(void)",
    "GetPropertyPageData",
    "public: int __thiscall CDataCache::IsDynamic1394(void)",
    "public: void __thiscall CDMNodeObj::GetSizeMB(__int64 &)",
    "public: int __thiscall CDMNodeObj::ContainsBootIniPartition(void)",
    "DllCanUnloadNow",
    "public: unsigned long __thiscall CTaskData::GetUIState(void)",
    "int __stdcall namecmp(unsigned short const *,unsigned short const *)",
    "public: void __thiscall CContextMenu::RefreshFileSys(long)",
    "public: void __thiscall CDMComponentData::SetOcxViewType(class CDMScopeNode *)",
    "public: void __thiscall CTaskData::GetFileSystemTypes(unsigned long &,struct ifilesysteminfo * *)",
    "public: void __thiscall CDMNodeObj::GetSizeString(class CString &)",
    "public: __thiscall CDataCache::CDataCache(void)",
    "__int64 __stdcall RoundUpToMB(__int64)",
    "LoadPropertyPageData",
    "public: class CWnd * __thiscall CTaskData::GetOcxFrameCWndPtr(void)",
    "public: void __thiscall CDataCache::DeleteRegionFromVolumeMemberList(class CDMNodeObj *)",
    "public: int __thiscall CDMNodeObj::GetDiskStatus(class CString &)",
    "public: void __thiscall CDMComponentData::EmptyOcxViewData(class CDMScopeNode *)",
    "public: long __thiscall CDMNodeObj::IsVolumeArrived(__int64,enum _LAYOUT_TYPES)",
    "public: unsigned long __thiscall CDMNodeObj::GetDeviceAttributes(void)",
    "public: void __thiscall CDMNodeObj::GetShortName(class CString &)",
    "public: virtual __thiscall CDataCache::~CDataCache(void)",
    "public: int __thiscall CTaskData::IsNTServer(void)",
    "public: void __thiscall CDataCache::CreateShortDiskName(struct diskinfoex &)",
    "void __stdcall GetDiskTypeNameHelper(struct diskinfoex *,class CString &,unsigned short)",
    "public: int __thiscall CTaskData::IsAlpha(void)",
    "public: short __thiscall CDMNodeObj::GetIVolumeClientVersion(void)",
    "public: unsigned long __thiscall CDMNodeObj::GetLogicalDriveCount(void)",
    "public: void __thiscall CDMNodeObj::GetMaxAdjustedFreeSize(__int64 &)",
    "public: class CDMNodeObj * __thiscall CDMNodeObj::GetParentVolumePtr(void)",
    "public: void __thiscall CTaskData::GetRegionColorStructPtr(struct _REGION_COLORS * *,int &)",
    "public: int __thiscall CDMNodeObj::IsFTVolume(void)",
    "public: void __thiscall CDMNodeObj::EnumVolumeMembers(long * *,long &)"
  ],
  "dmdskres.dll": "No exports",
  "dmdskres2.dll": "No exports",
  "dmime.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dmintf.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo"
  ],
  "dmloader.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dmocx.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dmscript.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dmstyle.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dmsynth.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dmusic.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dmutil.dll": [
    "LowNtReadOnlyAttributeOff",
    "SzwFromSza",
    "IsPersonalSKU",
    "DisplayErrorRgszw",
    "SafeLoadVdsService",
    "LowAcquirePrivilege",
    "DmCommonNtOpenFile",
    "FTraceValist",
    "DllMain",
    "ShowMessage",
    "GetErrorData",
    "FTrace",
    "TranslateError",
    "RgszwFromValist",
    "GetInstallDirectoryPath",
    "GetSystemVolume",
    "RgszwDupRgszw",
    "FreeRgszw",
    "CoDisableDynamicVolumes",
    "DynamicSupport",
    "RgszwFromArgs",
    "LowNtReadFile",
    "LowGetPartitionInfo",
    "SzwDupSzw",
    "AddEntryBootFileGpt",
    "LowNtWriteFile",
    "LowNtAddBootEntry",
    "DisplayError",
    "AddEntryBootFileMbr",
    "ShowMessageValist"
  ],
  "dmvdsitf.dll": [
    "public: void __thiscall CDataCache::AddLDMObjMapEntry(struct _LDM_OBJ_MAP_ENTRY *)",
    "CreateServerRequestsZ",
    "public: unsigned long __thiscall CDataCache::GetVolumeCount(void)",
    "public: class CString __thiscall CDataCache::GetServerName(void)",
    "CreateDataCacheZ",
    "LoadPropertyPageData",
    "public: unsigned long __thiscall CDataCache::GetDiskCount(void)",
    "public: __int64 __thiscall CDMNodeObj::GetLdmObjectId(void)",
    "public: class CWnd * __thiscall CTaskData::GetOcxFrameCWndPtr(void)",
    "public: unsigned long __thiscall CDMNodeObj::GetNumMembers(void)",
    "public: void __thiscall CTaskData::GetRegionColorStructPtr(struct _REGION_COLORS * *,int &)"
  ],
  "dmvscres.dll": "No exports",
  "dnsapi.dll": [
    "DnsFreeConfigStructure",
    "DnsValidateName_W",
    "DnsWriteReverseNameStringForIpAddress",
    "DnsNameCompareEx_W",
    "Dns_FreeMsgBuf",
    "Reg_FreeUpdateInfo",
    "DnsAcquireContextHandle_A",
    "DnsSetConfigDword",
    "DnsReplaceRecordSetUTF8",
    "Socket_CacheInit",
    "DnsModifyRecordsInSet_UTF8",
    "DnsRecordSetCompare",
    "Reg_ReadGlobalsEx",
    "DnsValidateServer_A",
    "DnsNameCompareEx_UTF8",
    "DnsWriteQuestionToBuffer_UTF8",
    "DnsCreateStringCopy",
    "Dns_OpenTcpConnectionAndSend",
    "Send_OpenTcpConnectionAndSend",
    "Dns_SetRecordsTtl",
    "Dns_ResetNetworkInfo",
    "DnsCreateStandardDnsNameCopy",
    "DnsNameCompare_W",
    "DnsGetProxyInformation",
    "DnsModifyRecordsInSet_A",
    "DnsUpdateMachinePresence",
    "Dns_CacheServiceInit",
    "DnsGlobals",
    "DnsQuery_W",
    "Send_AndRecvUdpWithParam",
    "DeRefQueryBlobEx",
    "BreakRecordsIntoBlob",
    "DnsRecordSetCopyEx",
    "DnsCopyStringEx",
    "DnsRecordStringForType",
    "DnsQueryExUTF8",
    "Dns_SetRecordDatalength",
    "Socket_SetTtl",
    "Dns_PingAdapterServers",
    "DnsAllocateRecord",
    "DnsDhcpRegisterAddrs",
    "AddRefQueryBlobEx",
    "DnsApiHeapReset",
    "DnsValidateName_UTF8",
    "DnsIsNSECType",
    "DnsReplaceRecordSetA",
    "Dns_InitializeWinsock",
    "DnsResolverOp",
    "DnsStringCopyAllocateEx",
    "Dns_GetRandomXid",
    "DnsDhcpSrvRegisterTerm",
    "DnsMapRcodeToStatus",
    "DnsGetProxyInfoPrivate",
    "DnsQueryExW",
    "NetInfo_GetAdapterByAddress",
    "DnsRecordCopyEx",
    "Dns_CreateSocketEx",
    "DnsUpdateTest_UTF8",
    "Reg_GetValueEx",
    "QueryDirectEx",
    "Trace_Reset",
    "DnsQueryConfigDword",
    "NetInfo_Copy",
    "Dns_RecvTcp",
    "DnsUtf8ToUnicode",
    "DnsUpdateTest_W",
    "DnsDhcpSrvRegisterHostAddr",
    "DnsNotifyResolver",
    "NetInfo_GetAdapterByName",
    "DnsNameCopy",
    "ExtraInfo_Init",
    "DnsFlushResolverCacheEntry_W",
    "Dns_SkipPacketName",
    "DnsQueryConfigAllocEx",
    "Dns_UpdateLibEx",
    "DnsUpdate",
    "DnsDhcpSrvRegisterHostAddrEx",
    "CombineRecordsInBlob",
    "DnsApiRealloc",
    "DnsValidateServerStatus",
    "Socket_CloseMessageSockets",
    "FlushDnsPolicyUnreachableStatus",
    "Dns_CleanupWinsock",
    "DnsRecordCompare",
    "Dns_ReadPacketName",
    "DnsReleaseContextHandle",
    "Reg_ReadUpdateInfo",
    "DnsNetworkInformation_CreateFromFAZ",
    "DnsReplaceRecordSetW",
    "Dns_WriteRecordStructureToPacketEx",
    "Socket_CacheCleanup",
    "Util_IsIp6Running",
    "DnsDhcpSrvRegisterHostName",
    "DnsValidateNameOrIp_TempW",
    "DnsApiAlloc",
    "Dns_SendEx",
    "DnsAsyncRegisterHostAddrs",
    "Socket_CleanupWinsock",
    "Socket_ClearMessageSockets",
    "NetInfo_UpdateNetworkProperties",
    "Dns_ReadRecordStructureFromPacket",
    "Dns_AddRecordsToMessage",
    "DnsScreenLocalAddrsForRegistration",
    "DnsRecordBuild_UTF8",
    "DnsNameCopyAllocate",
    "Query_Main",
    "DnsUpdateTest_A",
    "DelaySortDAServerlist",
    "DnsValidateUtf8Byte",
    "Dns_CloseConnection",
    "Security_ContextListTimeout",
    "Socket_SetMulticastInterface",
    "Dns_AllocateMsgBuf",
    "DnsIsStringCountValidForTextType",
    "NetInfo_IsAddrConfig",
    "DnsExtractRecordsFromMessage_W",
    "DnsAsyncRegisterInit",
    "Socket_TcpListen",
    "DnsDhcpRemoveRegistrations",
    "DnsQuery_A",
    "DnsQueryEx",
    "DnsFreeProxyName",
    "DnsNameCompareEx_A",
    "Local_GetRecordsForLocalName",
    "IpHelp_IsAddrOnLink",
    "NetInfo_Build",
    "Socket_RecvFrom",
    "DnsNotifyResolverClusterIp",
    "DnsIsStatusRcode",
    "DnsGetPolicyTableInfo",
    "DnsDhcpRegisterHostAddrs",
    "Socket_CreateMulticast",
    "HostsFile_Open",
    "DnsCreateReverseNameStringForIpAddress",
    "DnsDhcpSrvRegisterInitialize",
    "DnsGetPrimaryDomainName_A",
    "DnsApiSetDebugGlobals",
    "DnsStatusString",
    "DnsDisableIdnEncoding",
    "Dns_BuildPacket",
    "Dns_WriteQuestionToMessage",
    "HostsFile_Close",
    "HostsFile_ReadLine",
    "DnsModifyRecordsInSet_W",
    "DnsValidateServerArray_A",
    "Update_ReplaceAddressRecordsW",
    "DnsGetPolicyTableInfoPrivate",
    "Dns_ExtractRecordsFromMessage",
    "DnsExtractRecordsFromMessage_UTF8",
    "DnsFlushResolverCache",
    "DnsUnicodeToUtf8",
    "DnsGetCacheDataTable",
    "DnsValidateName_A",
    "DnsWriteQuestionToBuffer_W",
    "DnsNameCompare_A",
    "DnsGetDnsServerList",
    "DnsAcquireContextHandle_W",
    "DnsIsAMailboxType",
    "Dns_ParsePacketRecord",
    "DnsIpv6AddressToString",
    "Dns_FindAuthoritativeZoneLib",
    "DnsApiFree",
    "DnsGetBufferLengthForStringCopy",
    "NetInfo_ResetServerPriorities",
    "DnsDhcpRegisterInit",
    "DnsFindAuthoritativeZone",
    "DnsQueryExA",
    "Dns_WriteDottedNameToPacket",
    "DnsRecordSetDetach",
    "NetInfo_Clean",
    "DnsValidateServer_W",
    "DnsTraceServerConfig",
    "DnsRemoveRegistrations",
    "DnsNetworkInfo_CreateFromFAZ",
    "Dns_CloseSocket",
    "Dns_ReadPacketNameAllocate",
    "NetInfo_CreatePerNetworkNetinfo",
    "Send_MessagePrivate",
    "DnsValidateServerArray_W",
    "Query_Cancel",
    "DnsGetLastFailedUpdateInfo",
    "DnsDhcpSrvRegisterHostNameEx",
    "DnsIpv6StringToAddress",
    "DnsApiAllocZero",
    "Dns_InitializeMsgBuf",
    "Local_GetRecordsForLocalNameEx",
    "Socket_CloseEx",
    "Dns_SendAndRecvUdp",
    "DnsAsyncRegisterTerm",
    "NetInfo_UpdateServerReachability",
    "DnsRecordBuild_W",
    "Dns_CreateMulticastSocket",
    "Dns_CreateSocket",
    "Socket_Create",
    "DnsRecordStringForWritableType",
    "DnsQuery_UTF8",
    "Dns_UpdateLib",
    "Faz_AreServerListsInSameNameSpace",
    "NetInfo_Free",
    "DnsDhcpRegisterTerm",
    "DnsDhcpSrvRegisterInit",
    "DnsGetDomainName",
    "DnsLogEvent",
    "Dns_ParseMessage",
    "NetInfo_IsForUpdate",
    "Socket_InitWinsock",
    "DnsFreePolicyConfig",
    "Socket_JoinMulticast",
    "Dns_SetRecordsSection",
    "Socket_SetMulticastLoopBack",
    "Dns_CacheServiceCleanup",
    "DnsNotifyResolverEx",
    "DnsRecordListFree",
    "DnsFlushResolverCacheEntry_UTF8",
    "DnsFlushResolverCacheEntry_A",
    "DnsRecordTypeForName",
    "DnsDowncaseDnsNameLabel",
    "Dns_SkipToRecord",
    "DnsFree",
    "DnsQueryConfig",
    "NetInfo_GetAdapterByInterfaceIndex",
    "DnsNameCompare_UTF8",
    "GetCurrentTimeInSeconds",
    "DnsCancelQuery",
    "Dns_InitializeMsgRemoteSockaddr"
  ],
  "dnscmmc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dnsext.dll": "No exports",
  "dnshc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dnsrslvr.dll": [
    "LoadGPExtension",
    "Reg_DoRegisterAdapter",
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "docprop.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "dot3api.dll": [
    "Dot3QueryAutoConfigParameter",
    "Dot3DeinitPlapParams",
    "Dot3ReConnect",
    "Dot3GetProfile",
    "Dot3GetCurrentProfile",
    "Dot3SetProfile",
    "Dot3SetProfileEapXmlUserData",
    "Dot3InitPlapParams",
    "Dot3RegisterNotification",
    "Dot3SetProfileEapUserData",
    "Dot3SetAutoConfigParameter",
    "QueryNetconStatus",
    "Dot3CloseHandle",
    "Dot3CancelPlap",
    "Dot3UIResponse",
    "Dot3ReasonCodeToString",
    "Dot3QueryPlapCredentials",
    "Dot3EnumInterfaces",
    "Dot3OpenHandle",
    "Dot3QueryUIRequest",
    "Dot3GetProfileEapUserDataInfo",
    "Dot3FreeMemory",
    "Dot3DeleteProfile",
    "Dot3DoPlap",
    "Dot3GetInterfaceState",
    "Dot3SetInterface"
  ],
  "dot3cfg.dll": [
    "GetResourceString",
    "InitHelperDll"
  ],
  "dot3dlg.dll": [
    "Dot3ACOnBalloonClick",
    "DllRegisterServer",
    "Dot3ACCanShowBalloon",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dot3gpclnt.dll": [
    "GenerateLANPolicy",
    "LANGPAInit",
    "LANGPADeInit",
    "DeserializeLANPolicy",
    "ProcessLANPolicyEx"
  ],
  "dot3gpui.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dot3hc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dot3mm.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "dot3msm.dll": [
    "Dot3MsmInit",
    "Dot3MsmDisconnect",
    "Dot3MsmDeInit",
    "Dot3MsmDeInitAdapter",
    "Dot3MsmFreeProfile",
    "DllMain",
    "Dot3MsmUIResponse",
    "Dot3MsmIndicateSessionChange",
    "Dot3SetPortAuthenticationState",
    "Dot3MsmQueryState",
    "Dot3MsmQueryMediaState",
    "Dot3MsmFreeMemory",
    "Dot3MsmCreateDefaultProfile",
    "Dot3MsmQueryPendingUIRequest",
    "Dot3MsmReAuthenticate",
    "Dot3MsmValidateProfile",
    "Dot3MsmConnect",
    "Dot3MsmSetRuntimeState",
    "Dot3MsmInitAdapter",
    "Dot3ReasonCodeMsmToString"
  ],
  "dot3svc.dll": [
    "LanNotifyOnLogoff",
    "Dot3SvcMain",
    "LanNotifyOnLogon",
    "SvchostPushServiceGlobals"
  ],
  "dot3ui.dll": [
    "Dot3CreatePsPage"
  ],
  "dpapi.dll": [
    "CryptUnprotectDataNoUI",
    "iCryptIdentifyProtection",
    "CryptResetMachineCredentials",
    "CryptProtectMemory",
    "CryptProtectDataNoUI",
    "CryptUpdateProtectedState",
    "CryptUnprotectMemory"
  ],
  "dpapiprovider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dpapisrv.dll": [
    "InitializeLsaExtension",
    "QueryLsaInterface"
  ],
  "dplayx.dll": [
    "DirectPlayLobbyCreateA",
    "DirectPlayLobbyCreateW",
    "DirectPlayEnumerateA",
    "gdwDPlaySPRefCount",
    "DirectPlayEnumerateW",
    "DirectPlayCreate",
    "DirectPlayEnumerate",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dpmodemx.dll": [
    "SPInit"
  ],
  "dpnaddr.dll": [
    "DirectPlay8AddressCreate"
  ],
  "dpnathlp.dll": [
    "DirectPlayNATHelpCreate",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dpnet.dll": [
    "DirectPlay8Create",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dpnhpast.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dpnhupnp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dpnlobby.dll": [
    "DirectPlay8LobbyCreate"
  ],
  "dps.dll": [
    "ServiceMain"
  ],
  "dpwsockx.dll": [
    "DPWS_GetEnumPort",
    "DPWS_BuildIPMessageHeader",
    "SPInit"
  ],
  "dpx.dll": [
    "DpxRestoreJob",
    "DpxNewJobEx",
    "DpxNewJob",
    "DpxRestoreJobEx",
    "DpxFreeMemory"
  ],
  "drmmgrtn.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "drmv2clt.dll": [
    "MakeEscapedURL",
    "LaunchURL",
    "Sysprep",
    "DllRegisterServer",
    "CreateDRMRightsManager",
    "DllUnregisterServer"
  ],
  "drprov.dll": [
    "NPGetUniversalName",
    "NPGetResourceParent",
    "NPAddConnection3",
    "NPGetConnectionPerformance",
    "NPEnumResource",
    "NPGetConnection",
    "NPCancelConnection",
    "NPOpenEnum",
    "NPAddConnection",
    "NPGetCaps",
    "NPGetResourceInformation",
    "NPCloseEnum"
  ],
  "drt.dll": [
    "DrtGetSearchPath",
    "DrtClose",
    "DrtStartPartitionDetection",
    "DrtGetSearchResultSize",
    "DrtGetInstanceNameSize",
    "DrtPingPeer",
    "DrtOpen",
    "DrtGetEventDataSize",
    "DrtContinueSearch",
    "DrtGetSearchResult",
    "DrtUnregisterKey",
    "DrtUpdateKey",
    "DrtGetInstanceName",
    "DrtStartSearch",
    "DrtRegisterKey",
    "DrtFlushCache",
    "DrtHandlePowerEvent",
    "DrtEndSearch",
    "DrtGetCacheStatsEx",
    "DrtGetSearchPathSize",
    "DrtGetEventData"
  ],
  "drtprov.dll": [
    "DrtDeletePnrpBootstrapResolver",
    "DrtCreateDnsBootstrapResolver",
    "DrtDeleteDnsBootstrapResolver",
    "DrtCreatePnrpBootstrapResolver",
    "DrtCreateNullSecurityProvider",
    "DrtDeleteNullSecurityProvider",
    "DrtCreateDerivedKeySecurityProvider",
    "DrtDeleteDerivedKeySecurityProvider",
    "DrtCreateDerivedKey"
  ],
  "drttransport.dll": [
    "DrtCreateIpv6UdpTransport",
    "DrtDeleteIpv6UdpTransport"
  ],
  "drvstore.dll": [
    "DriverStoreGetObjectPropertyKeysW",
    "DriverPackageClose",
    "DriverStoreUnreflectCriticalW",
    "DriverPackageEnumPropertiesW",
    "DriverStoreOfflineEnumDriverPackageA",
    "DriverStoreEnumObjectsW",
    "DriverPackageEnumDriversW",
    "DriverStorePublishW",
    "DriverStoreClose",
    "DriverPackageGetVersionInfoW",
    "DriverStoreOfflineFindDriverPackageW",
    "DriverPackageOpenW",
    "DriverStoreOfflineDeleteDriverPackageW",
    "DriverStoreUnconfigureW",
    "DriverPackageEnumInterfacesW",
    "DriverStoreGetObjectPropertyW",
    "DriverStoreOpenW",
    "DriverStoreImportW",
    "DriverPackageEnumServicesW",
    "DriverPackageEnumFilesW",
    "DriverStoreUnpublishW",
    "DriverStoreFindW",
    "pServerDeleteDriverPackage",
    "DriverStoreConfigureW",
    "DriverPackageEnumConfigurationsW",
    "DriverStoreOfflineFindDriverPackageA",
    "DriverStoreReflectCriticalW",
    "DriverStoreSetLogContext",
    "pServerImportDriverPackage",
    "DriverStoreEnumW",
    "DriverStoreOfflineEnumDriverPackageW",
    "DriverPackageEnumRegKeysW",
    "DriverPackageEnumClassesW",
    "DriverStoreOfflineAddDriverPackageA",
    "DriverStoreReflectW",
    "DriverStoreDriverPackageResolveCallbackW",
    "DriverStoreOfflineDeleteDriverPackageA",
    "DriverStoreSetObjectPropertyW",
    "DriverStoreOfflineAddDriverPackageW",
    "DriverStoreUnreflectW",
    "DriverStoreDeleteW"
  ],
  "ds32gt.dll": [
    "Dispatch"
  ],
  "dsauth.dll": [
    "DhcpDsDelServer",
    "DhcpEnumServersDS",
    "StoreCollectAttributes",
    "DhcpDsGetLists",
    "StoreCleanupHandle",
    "StoreInitHandle",
    "DhcpDsGetRoot",
    "StoreDeleteObject",
    "DhcpAddServerDS",
    "StoreSearchGetNext",
    "DhcpDsGetAttribs",
    "DhcpDsInitDS",
    "DhcpDsCleanupDS",
    "StoreGetHandle",
    "DhcpDsSetLists",
    "DhcpDsValidateService",
    "StoreEndSearch",
    "StoreSetSearchSubTree",
    "DhcpDsAddServer",
    "StoreSetSearchOneLevel",
    "DhcpDeleteServerDS",
    "DhcpDsEnumServers",
    "StoreBeginSearch",
    "StoreCreateObjectVA"
  ],
  "dsdmo.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dskquota.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "ProcessGroupPolicy"
  ],
  "dskquoui.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "dsound.dll": [
    "DirectSoundCreate8",
    "DirectSoundCaptureCreate",
    "DirectSoundCaptureCreate8",
    "DirectSoundCaptureEnumerateW",
    "DirectSoundCreate",
    "DirectSoundEnumerateW",
    "GetDeviceID",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DirectSoundEnumerateA",
    "DirectSoundFullDuplexCreate",
    "DirectSoundCaptureEnumerateA"
  ],
  "dsparse.dll": [
    "DsMakeSpnA",
    "DsIsMangledRdnValueA",
    "DsMakeSpnW",
    "DsCrackSpn3W",
    "DsCrackSpn4W",
    "DsCrackSpn2W",
    "DsCrackSpnW",
    "DsIsMangledRdnValueW",
    "DsIsMangledDnW",
    "DsUnquoteRdnValueA",
    "DsCrackUnquotedMangledRdnA",
    "DsIsMangledDnA",
    "DsGetRdnW",
    "DsUnquoteRdnValueW",
    "DsQuoteRdnValueW",
    "DsQuoteRdnValueA",
    "DsCrackUnquotedMangledRdnW",
    "DsCrackSpn2A",
    "DsCrackSpnA"
  ],
  "dsprop.dll": [
    "ADsPropGetInitInfo",
    "ADsPropSendErrorMessage",
    "ADsPropCreateNotifyObj",
    "ADsPropShowErrorDialog",
    "BringSheetToForeground",
    "DllRegisterServer",
    "DllUnregisterServer",
    "Smart_PADS_ATTR_INFO__Empty",
    "ADsPropSetHwndWithTitle",
    "CrackName",
    "ErrMsg",
    "IsSheetAlreadyUp",
    "DllCanUnloadNow",
    "FindSheet",
    "DSPROP_GetGCSearchOnDomain",
    "PostADsPropSheet",
    "ADsPropSetHwnd",
    "ADsPropCheckIfWritable",
    "ErrMsgParam",
    "DllGetClassObject",
    "MsgBox",
    "CheckADsError",
    "ReportError"
  ],
  "dsquery.dll": [
    "OpenSavedDsQuery",
    "OpenSavedDsQueryW",
    "OpenQueryWindow",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dsrole.dll": [
    "DsRoleFreeMemory",
    "DsRoleGetPrimaryDomainInformation"
  ],
  "dssec.dll": [
    "DSCreateISecurityInfoObject",
    "DSEditSecurity",
    "DSCreateSecurityPage",
    "DSCreateISecurityInfoObjectEx",
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "dssenh.dll": [
    "CPImportKey",
    "CPGenRandom",
    "CPSetKeyParam",
    "CPGetHashParam",
    "CPDestroyHash",
    "CPDuplicateKey",
    "CPSignHash",
    "CPCreateHash",
    "DllRegisterServer",
    "CPReleaseContext",
    "CPDuplicateHash",
    "CPGetProvParam",
    "DllUnregisterServer",
    "CPSetHashParam",
    "CPExportKey",
    "CPSetProvParam",
    "CPGetKeyParam",
    "CPHashSessionKey",
    "CPDeriveKey",
    "CPAcquireContext",
    "CPDestroyKey",
    "CPVerifySignature",
    "CPGetUserKey",
    "CPGenKey",
    "CPEncrypt",
    "CPDecrypt",
    "CPHashData"
  ],
  "dsuiext.dll": [
    "DsBrowseForContainerW",
    "DsBrowseForContainerA",
    "DsGetFriendlyClassName",
    "DsGetIcon",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dswave.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dtsh.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "dui70.dll": [
    "public: struct tagPOINT const * __thiscall DirectUI::RefPointElement::GetActualReferencePoint(class DirectUI::Value * *)",
    "public: long __thiscall DirectUI::CCBase::SetWinStyle(int)",
    "public: long __thiscall DirectUI::Element::SetContentString(unsigned short const *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::TouchRepeatButton::GetClassInfoW(void)",
    "public: int __thiscall DirectUI::CCListBox::DeleteString(int)",
    "public: int __thiscall DirectUI::TouchSlider::GetRangeMin(void)",
    "const DirectUI::XProvider::`vftable'",
    "const DirectUI::CCListBox::`vftable'",
    "private: static struct DirectUI::IClassInfo * DirectUI::UnknownElement::s_pClassInfo",
    "public: virtual long __stdcall DirectUI::SelectionItemProvider::get_SelectionContainer(struct IRawElementProviderSimple * *)",
    "public: virtual __thiscall DirectUI::CheckBoxGlyph::~CheckBoxGlyph(void)",
    "public: virtual __thiscall DirectUI::CCVScrollBar::~CCVScrollBar(void)",
    "public: virtual bool __thiscall DirectUI::XBaby::CanSetFocus(void)",
    "public: int __thiscall DirectUI::TouchSlider::TranslateThumbPositionToThumbValue(int)",
    "private: static long __stdcall DirectUI::EventManager::HandleStringProp(struct IRawElementProviderSimple *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "private: static unsigned int * DirectUI::EventManager::g_eventRegisteredMap",
    "NotifyAccessibilityEvent",
    "public: virtual long __thiscall DirectUI::Element::GetAccessibleImpl(struct IAccessible * *)",
    "protected: virtual void __thiscall DirectUI::TaskPage::OnListenedPropertyChanged(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: __thiscall DirectUI::SelectorNoDefault::SelectorNoDefault(void)",
    "const DirectUI::CCAVI::`vftable'",
    "public: static long __stdcall DirectUI::TouchHWNDElement::Create(struct HWND__ *,bool,unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::AutoStartProp(void)",
    "public: struct DirectUI::DUIXmlParser::FunctionDefinition & __thiscall DirectUI::DUIXmlParser::FunctionDefinition::operator=(struct DirectUI::DUIXmlParser::FunctionDefinition const &)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetNull(void)",
    "protected: virtual long __thiscall DirectUI::ScrollViewer::AddChildren(void)",
    "public: static void __stdcall DirectUI::RepeatButton::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "const DirectUI::CCHScrollBar::`vftable'{for `DirectUI::BaseScrollBar'}",
    "protected: long __thiscall DirectUI::DUIXmlParser::_RecordInstantiateElement(struct IXmlReader *,unsigned short * *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCListBox::GetClassInfoW(void)",
    "public: bool __thiscall DirectUI::Edit::GetDirty(void)",
    "public: long __thiscall DirectUI::UnknownElement::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "private: void __thiscall DirectUI::InvokeHelper::OnInvoke(struct DirectUI::InvokeHelper::InvokeArgs *)",
    "public: virtual long __thiscall DirectUI::Element::Add(class DirectUI::Element * *,unsigned int)",
    "public: static long __stdcall DirectUI::AnimationStrip::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: bool __thiscall DirectUI::TouchEditBase::GetIMEComposing(void)",
    "public: static long __stdcall DirectUI::ElementProvider::Create(class DirectUI::Element *,class DirectUI::InvokeHelper *,class DirectUI::ElementProvider * *)",
    "public: virtual void __thiscall DirectUI::ScrollBar::OnEvent(struct DirectUI::Event *)",
    "public: virtual long __thiscall DirectUI::XBaby::SetRegisteredDefaultButton(class DirectUI::Element *)",
    "public: static int DirectUI::Schema::DragDragCompleteEvent",
    "protected: virtual void __thiscall DirectUI::ModernProgressBar::OnHosted(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::Element::Register(void)",
    "const DirectUI::Surface::`vftable'",
    "protected: static unsigned short const * __stdcall DirectUI::DUIXmlParser::QuerySysMetricStr(int,unsigned short *,unsigned int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchScrollViewer::SnapModeProp(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseLiteralColorInt(unsigned short const *,int *)",
    "public: static int DirectUI::Schema::ControlTypeProperty",
    "public: virtual void __thiscall DirectUI::BorderLayout::DoLayout(class DirectUI::Element *,int,int)",
    "public: virtual void __thiscall DirectUI::CCSysLink::OnInput(struct DirectUI::InputEvent *)",
    "public: bool __thiscall DirectUI::Element::GetPreserveAlphaChannel(void)const",
    "private: static struct DirectUI::IClassInfo * DirectUI::Button::s_pClassInfo",
    "public: virtual void __thiscall DirectUI::CCBaseCheckRadioButton::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual __thiscall DirectUI::CCHScrollBar::~CCHScrollBar(void)",
    "public: void __thiscall DirectUI::Element::EndDefer(unsigned long)",
    "private: static unsigned short DirectUI::Expando::_atmArrow",
    "DisableInitCallstackTracking",
    "const DirectUI::DialogElement::`vftable'{for `DirectUI::IElementListener'}",
    "public: long __thiscall DirectUI::BaseScrollViewer::SetXBarVisibility(int)",
    "private: static struct DirectUI::IClassInfo * DirectUI::ScrollViewer::s_pClassInfo",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetSnapMode(int)",
    "public: long __thiscall DirectUI::RichText::SetConstrainLayout(int)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetLinkIndicatorsToContent(bool)",
    "public: static int DirectUI::Schema::DataItemControlType",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchSlider::IsVerticalProp(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::AutoButton::GetClassInfoPtr(void)",
    "public: long __thiscall DirectUI::ModernProgressBar::SetIndependentAnimations(bool)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accSelection(struct tagVARIANT *)",
    "public: virtual __thiscall DirectUI::Surface::~Surface(void)",
    "public: static int DirectUI::Schema::TableItem_RowHeaderItems_Property",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ContentAlignProp(void)",
    "private: static struct HINSTANCE__ * DirectUI::CallstackTracker::s_hinstNtDll",
    "public: int __thiscall DirectUI::TouchEditBase::GetPasswordCharacter(void)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnWmThemeChanged(unsigned int,long)",
    "public: int __thiscall DirectUI::Element::_SetNeedsLayout(unsigned int)",
    "public: virtual long __thiscall DirectUI::Button::DefaultAction(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Expandable::GetClassInfoPtr(void)",
    "public: virtual void __thiscall DirectUI::DialogElement::OnInput(struct DirectUI::InputEvent *)",
    "public: bool __thiscall DirectUI::TouchScrollViewer::GetAllowArrowOut(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_CreateValue(unsigned short const *,struct DirectUI::PropertyInfo const *,class DirectUI::Value * *)",
    "public: unsigned long __thiscall DirectUI::RichText::GetTrimmedLineCount(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::RefPointElement::GetClassInfoW(void)",
    "public: void __thiscall DirectUI::FlowLayout::Initialize(bool,unsigned int,unsigned int,unsigned int)",
    "public: static long __stdcall DirectUI::CCListView::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCAVI::GetClassInfoW(void)",
    "const DirectUI::TableProvider::`vftable'",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ScrollBar::OrderProp(void)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetAccHelp(class DirectUI::Value * *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCCheckBox::s_pClassInfo",
    "public: static bool __stdcall DirectUI::HWNDElement::FindShortcut(unsigned short,class DirectUI::Element *,class DirectUI::Element * *,int *,int *,int)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::GetIDsOfNames(struct _GUID const &,unsigned short * *,unsigned int,unsigned long,long *)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::DialogElement::GetRegisteredDefaultButton(void)",
    "public: unsigned short const * __thiscall DirectUI::TouchSelectItem::GetTextContentOverride(class DirectUI::Value * *)",
    "public: static class UID __stdcall DirectUI::TouchSlider::SliderUpdated(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Repeater::s_pClassInfo",
    "public: __thiscall DirectUI::CCSysLink::CCSysLink(class DirectUI::CCSysLink const &)",
    "const DirectUI::CCVScrollBar::`vftable'{for `DirectUI::CCBase'}",
    "public: void __thiscall DirectUI::BaseScrollBar::SetPinned(bool)",
    "public: static class UID __stdcall DirectUI::TouchButton::Click(void)",
    "const DirectUI::Repeater::`vftable'",
    "public: virtual __thiscall DirectUI::RowLayout::~RowLayout(void)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetScrollPadding(int,int,int,int)",
    "public: virtual long __thiscall DirectUI::ScrollBar::SetMaximum(int)",
    "public: __thiscall DirectUI::GridLayout::GridLayout(void)",
    "public: __thiscall DirectUI::ScrollBar::ScrollBar(class DirectUI::ScrollBar const &)",
    "public: static long __stdcall DirectUI::VerticalFlowLayout::Create(bool,unsigned int,unsigned int,unsigned int,class DirectUI::Layout * *)",
    "public: static int DirectUI::Schema::RangeValue_Minimum_Property",
    "HStrDup",
    "public: long __thiscall DirectUI::Element::SetCursor(unsigned short const *)",
    "public: long __thiscall DirectUI::HWNDHostAccessible::Initialize(class DirectUI::Element *,struct IAccessible *)",
    "UnInitProcessPriv",
    "public: virtual void __thiscall DirectUI::XElement::SetKeyFocus(void)",
    "protected: void __thiscall DirectUI::HWNDHost::SyncText(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::ExpandoButtonGlyph::GetClassInfoW(void)",
    "public: virtual void __thiscall DirectUI::BaseScrollBar::LineUp(unsigned int)",
    "public: struct HWND__ * __thiscall DirectUI::XHost::GetHWND(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Clipper::GetClassInfoPtr(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Navigator::GetClassInfoW(void)",
    "const DirectUI::HWNDElementAccessible::`vftable'{for `IAccessible'}",
    "public: virtual long __stdcall DirectUI::HWNDElementProvider::QueryInterface(struct _GUID const &,void * *)",
    "const DirectUI::NativeHWNDHost::`vftable'",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCAVI::s_pClassInfo",
    "public: long __thiscall DirectUI::DialogElement::SetButtonClassAcceptsEnterKey(bool)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::Invoke(long,struct _GUID const &,unsigned long,unsigned short,struct tagDISPPARAMS *,struct tagVARIANT *,struct tagEXCEPINFO *,unsigned int *)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accKeyboardShortcut(struct tagVARIANT,unsigned short * *)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnImmersiveColorSchemeChanged(void)",
    "public: class DirectUI::UnknownElement & __thiscall DirectUI::UnknownElement::operator=(class DirectUI::UnknownElement const &)",
    "public: long __thiscall DirectUI::Element::SetID(unsigned short const *)",
    "public: void __thiscall DirectUI::XHost::HideWindow(void)",
    "public: class DirectUI::CheckBoxGlyph & __thiscall DirectUI::CheckBoxGlyph::operator=(class DirectUI::CheckBoxGlyph const &)",
    "public: class DirectUI::DynamicArray * __thiscall DirectUI::TouchScrollViewer::GetSnapPointCollectionX(class DirectUI::Value * *)",
    "UnInitThread",
    "public: __thiscall DirectUI::FlowLayout::FlowLayout(void)",
    "public: long __thiscall DirectUI::RichText::SetMapRunsToClusters(bool)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::TouchSelect::GetClassInfoW(void)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::GridLayout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: long __thiscall DirectUI::Movie::SetPixelOffsetMode(int)",
    "const DirectUI::HWNDHostAccessible::`vftable'{for `IAccessible'}",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::EnabledProp(void)",
    "protected: virtual void __thiscall DirectUI::CCBaseCheckRadioButton::PostCreate(struct HWND__ *)",
    "public: long __thiscall DirectUI::Edit::SetPasswordCharacter(int)",
    "public: static class DirectUI::InvokeProxy * __stdcall DirectUI::InvokeProxy::Create(class DirectUI::Element *)",
    "public: __thiscall DirectUI::XHost::XHost(void)",
    "private: void __thiscall DirectUI::DUIFactory::ClearParser(void)",
    "public: class DirectUI::Element * __thiscall DirectUI::Value::GetElement(void)",
    "public: long __thiscall DirectUI::TouchSlider::SetIsContinuous(bool)",
    "public: static int DirectUI::Schema::TreeItemControlType",
    "public: virtual long __thiscall DirectUI::TouchSelect::GetElementProviderImpl(class DirectUI::InvokeHelper *,class DirectUI::ElementProvider * *)",
    "const DirectUI::HWNDHostAccessible::`vftable'{for `IEnumVARIANT'}",
    "public: bool __thiscall DirectUI::ScrollBar::GetVertical(void)",
    "const DirectUI::GridProxy::`vftable'",
    "public: long __thiscall DirectUI::TouchSlider::SetShowTick(bool)",
    "public: bool __thiscall DirectUI::Edit::GetMultiline(void)",
    "const DirectUI::HWNDElement::`vftable'",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchEditBase::SelectionForegroundColorProp(void)",
    "private: static int __stdcall DirectUI::CallstackTracker::IsCorrectImageHlpVersion(void)",
    "public: int __thiscall DirectUI::AnimationStrip::GetFrameDuration(void)",
    "public: void __thiscall DirectUI::DuiAccessible::Initialize(class DirectUI::Element *)",
    "const DirectUI::GridItemProvider::`vftable'",
    "protected: virtual void __thiscall DirectUI::AnimationStrip::OnDestroy(void)",
    "public: virtual long __thiscall DirectUI::XBaby::SetButtonClassAcceptsEnterKey(bool)",
    "public: __thiscall DirectUI::HWNDElement::HWNDElement(class DirectUI::HWNDElement const &)",
    "protected: static struct DirectUI::DUIXmlParser::FunctionDefinition const * const DirectUI::DUIXmlParser::s_fdClr",
    "public: static bool __stdcall DirectUI::GridItemProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::FontCache::InitThread(void)",
    "public: __thiscall DirectUI::ScrollBar::ScrollBar(void)",
    "public: virtual void __thiscall DirectUI::Movie::OnHosted(class DirectUI::Element *)",
    "public: bool __thiscall DirectUI::TouchButton::GetTreatRightMouseButtonAsLeft(void)",
    "public: virtual void __thiscall DirectUI::ScrollBar::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static long __stdcall DirectUI::Schema::CreatePatternProvider(enum DirectUI::Schema::Pattern,class DirectUI::ElementProvider *,struct IUnknown * *)",
    "public: int __thiscall DirectUI::ModernProgressBar::GetMinimum(void)",
    "const DirectUI::GridProvider::`vftable'",
    "public: virtual long __thiscall DirectUI::HWNDElement::GetAccessibleImpl(struct IAccessible * *)",
    "public: void __thiscall DirectUI::Movie::doAction(struct GMA_ACTIONINFO *)",
    "public: virtual long __stdcall DirectUI::XProvider::ForceThemeChange(unsigned int,long)",
    "protected: virtual void __thiscall DirectUI::ExpandCollapseProxy::Init(class DirectUI::Element *)",
    "const DirectUI::ElementProvider::`vftable'{for `IRawElementProviderSimple'}",
    "public: virtual bool __thiscall DirectUI::CCBaseCheckRadioButton::OnReceivedDialogFocus(struct DirectUI::IDialogElement *)",
    "public: virtual void __thiscall DirectUI::ScrollViewer::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: __thiscall DirectUI::Selector::Selector(void)",
    "public: bool __thiscall DirectUI::CCRadioButton::GetAutoGrouping(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCHScrollBar::s_pClassInfo",
    "public: int __thiscall DirectUI::CCBase::GetWinStyle(void)",
    "private: static void __stdcall DirectUI::EventManager::GetToggleState(struct tagVARIANT *)",
    "public: static class DirectUI::HWNDElementProxy * __stdcall DirectUI::HWNDElementProxy::Create(class DirectUI::HWNDElement *)",
    "public: virtual long __thiscall DirectUI::Element::DefaultAction(void)",
    "public: __thiscall DirectUI::Surface::Surface(void)",
    "public: void __thiscall DirectUI::Element::MapElementPoint(class DirectUI::Element *,struct tagPOINT const *,struct tagPOINT *)",
    "protected: long __thiscall DirectUI::DuiAccessible::GetDispatchFromElement(class DirectUI::Element *,struct IDispatch * *)",
    "public: static int DirectUI::Schema::ScrollItemPattern",
    "public: static int DirectUI::Schema::SystemAlertEvent",
    "public: virtual struct tagSIZE __thiscall DirectUI::TouchScrollBar::_SelfLayoutUpdateDesiredSize(int,int,class DirectUI::Surface *)",
    "protected: int __thiscall DirectUI::HWNDHost::GetThemeChanged(void)",
    "public: void __thiscall DirectUI::TouchSwitch::SetOnOffText(unsigned short const *,unsigned short const *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseDoubleListValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: class DirectUI::Clipper & __thiscall DirectUI::Clipper::operator=(class DirectUI::Clipper const &)",
    "private: static long __stdcall DirectUI::EventManager::HandleRangeValue(class DirectUI::Element *,struct IRawElementProviderSimple *,class DirectUI::Value *,class DirectUI::Value *)",
    "public: void __thiscall DirectUI::DialogElementCore::OnRegisteredDefaultButtonChanged(class DirectUI::Value *,class DirectUI::Value *)",
    "public: static int DirectUI::Schema::Scroll_HorizontallyScrollable_Property",
    "public: virtual void __thiscall DirectUI::Element::OnMouseFocusMoved(class DirectUI::Element *,class DirectUI::Element *)",
    "protected: void __thiscall DirectUI::CCCommandLink::SyncNoteAndGlyph(struct HWND__ *)",
    "public: long __thiscall DirectUI::Element::SetContentAlign(int)",
    "public: static long __stdcall DirectUI::CCHScrollBar::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "private: static int __stdcall DirectUI::CallstackTracker::InitOnceCallback(union _RTL_RUN_ONCE *,void *,void * *)",
    "private: long __thiscall DirectUI::ValueProxy::GetValue(unsigned short * *)",
    "public: static long __stdcall DirectUI::PushButton::Register(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchScrollViewer::SnapIntervalYProp(void)",
    "public: class DirectUI::GridProxy & __thiscall DirectUI::GridProxy::operator=(class DirectUI::GridProxy const &)",
    "UiaOnGetObject",
    "public: int __thiscall DirectUI::TouchSelect::GetItemHeightInPopup(void)",
    "public: virtual __thiscall DirectUI::PatternProvider::~PatternProvider(void)",
    "public: class DirectUI::Layout * __thiscall DirectUI::Value::GetLayout(void)",
    "protected: void __thiscall DirectUI::Element::_Fill(struct HDC__ *,unsigned long,int,int,int,int,bool)",
    "public: virtual void __thiscall DirectUI::CCBase::OnInput(struct DirectUI::InputEvent *)",
    "public: long __thiscall DirectUI::Movie::SetAutoStop(bool)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateAtom(unsigned short)",
    "public: static int DirectUI::Schema::AutomationFocusChangedEvent",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::HWNDHost::GetClassInfoPtr(void)",
    "public: long __thiscall DirectUI::CCCommandLink::SetNote(unsigned short const *)",
    "const DirectUI::TableLayout::`vftable'",
    "public: class DirectUI::Browser * __thiscall DirectUI::Navigator::GetBrowser(void)",
    "public: void __thiscall DirectUI::TouchSlider::FireEventOnMouseOrPointerRelease(void)",
    "protected: virtual void __thiscall DirectUI::Element::ActivateTooltip(class DirectUI::Element *,unsigned long)",
    "public: virtual void __thiscall DirectUI::CCPushButton::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "private: static long __stdcall DirectUI::EventManager::HandleAccChange(class DirectUI::Element *,struct IRawElementProviderSimple *,class DirectUI::Value *,class DirectUI::Value *)",
    "public: __thiscall DirectUI::DuiAccessible::DuiAccessible(void)",
    "public: static long __stdcall DirectUI::HWNDHostClientAccessible::Create(class DirectUI::Element *,struct IAccessible *,class DirectUI::DuiAccessible * *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::ExpandoButtonGlyph::GetClassInfoPtr(void)",
    "FlushThemeHandles",
    "protected: virtual void __thiscall DirectUI::ValueProxy::Init(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::StyledScrollViewer::Register(void)",
    "public: struct DirectUI::Graphic * __thiscall DirectUI::Value::GetGraphic(void)",
    "public: __thiscall DirectUI::CCTrackBar::CCTrackBar(class DirectUI::CCTrackBar const &)",
    "public: virtual void __thiscall DirectUI::FlowLayout::DoLayout(class DirectUI::Element *,int,int)",
    "public: __thiscall DirectUI::CCBaseScrollBar::CCBaseScrollBar(class DirectUI::CCBaseScrollBar const &)",
    "public: static void __stdcall DirectUI::CCListView::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: __thiscall DirectUI::ExpandoButtonGlyph::ExpandoButtonGlyph(class DirectUI::ExpandoButtonGlyph const &)",
    "public: long __thiscall DirectUI::Element::SetValue(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::QueryInterface(struct _GUID const &,void * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ExtentProp(void)",
    "public: virtual void __thiscall DirectUI::CCProgressBar::OnInput(struct DirectUI::InputEvent *)",
    "public: virtual void __thiscall DirectUI::TouchButton::OnInput(struct DirectUI::InputEvent *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ContentProp(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateDFCFill(unsigned int,unsigned int)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accParent(struct IDispatch * *)",
    "public: __thiscall DirectUI::DCSurface::DCSurface(class DirectUI::DCSurface const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::EdgeHighlightColorProp(void)",
    "public: virtual bool __thiscall DirectUI::TouchCheckBox::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: struct tagRECT const * __thiscall DirectUI::TouchEdit2::GetInnerBorderThickness(class DirectUI::Value * *)",
    "public: long __thiscall DirectUI::Movie::LoadFromResource(struct HINSTANCE__ *,int)",
    "public: __thiscall DirectUI::ElementWithHWND::ElementWithHWND(class DirectUI::ElementWithHWND const &)",
    "public: virtual void __thiscall DirectUI::TouchRepeatButton::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: void __thiscall DirectUI::TouchSwitch::SetToggleValue(int)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetAccName(class DirectUI::Value * *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::TouchHWNDElement::GetClassInfoW(void)",
    "public: __thiscall DirectUI::ScrollProxy::ScrollProxy(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ScrollBar::LineProp(void)",
    "public: virtual bool __thiscall DirectUI::Element::IsRTLReading(void)",
    "public: long __thiscall DirectUI::BaseScrollViewer::SetYBarVisibility(int)",
    "public: static class DirectUI::Element * __stdcall DirectUI::DuiNavigate::Navigate(class DirectUI::Element *,class DirectUI::DynamicArray *,int)",
    "public: unsigned short const * __thiscall DirectUI::CCCommandLink::GetNote(class DirectUI::Value * *)",
    "public: long __thiscall DirectUI::TouchScrollViewer::PrepareManualSwapDeferredZoomToRect(struct tagRECT const *,float const *,float const *,float *,float *,float)",
    "public: int __thiscall DirectUI::Element::GetWidth(void)",
    "protected: long __thiscall DirectUI::ElementProxy::SetString(struct tagVARIANT *,unsigned short const * (__thiscall DirectUI::Element::*)(class DirectUI::Value * *))",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::RichText::VerticalScriptProp(void)",
    "public: virtual long __stdcall DirectUI::ValueProvider::get_Value(unsigned short * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::HWNDHost::TransparentProp(void)",
    "public: __thiscall DirectUI::NineGridLayout::NineGridLayout(void)",
    "public: long __thiscall DirectUI::RichText::SetVerticalScript(bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::RefPointElement::ReferencePointProp(void)",
    "public: long __thiscall DirectUI::TouchEdit2::GetSelection(long *,long *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateElementRef(class DirectUI::Element *)",
    "const DirectUI::CCBase::`vftable'",
    "public: static void __stdcall DirectUI::Element::_AddDependency(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,struct DirectUI::DepRecs *,class DirectUI::DeferCycle *,long *)",
    "public: virtual long __thiscall DirectUI::TouchCommandButton::Insert(class DirectUI::Element * *,unsigned int,unsigned int)",
    "protected: virtual void __thiscall DirectUI::SelectionProxy::Init(class DirectUI::Element *)",
    "public: virtual long __stdcall DirectUI::ElementProvider::SetFocus(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateLayout(class DirectUI::Layout *)",
    "public: static void __stdcall DirectUI::CCTreeView::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: class DirectUI::FontCheckOut & __thiscall DirectUI::FontCheckOut::operator=(class DirectUI::FontCheckOut const &)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCCommandLink::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: static long __stdcall DirectUI::CheckBoxGlyph::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Viewer::GetClassInfoPtr(void)",
    "public: bool __thiscall DirectUI::Element::GetTooltip(void)",
    "protected: void __thiscall DirectUI::HWNDElement::UpdateStyleSheets(void)",
    "public: int __thiscall DirectUI::CCTrackBar::GetRangeMin(void)",
    "public: long __thiscall DirectUI::Element::SetEncodedContentString(unsigned short const *)",
    "protected: virtual void __thiscall DirectUI::ModernProgressBar::Paint(struct HDC__ *,struct tagRECT const *,struct tagRECT const *,struct tagRECT *,struct tagRECT *)",
    "protected: virtual long __thiscall DirectUI::CCTreeView::_OnGetInfoTip(struct tagNMTVGETINFOTIPW const *)",
    "public: static class UID __stdcall DirectUI::HWNDElement::ThemeChange(void)",
    "public: virtual long __stdcall DirectUI::RangeValueProvider::get_Minimum(double *)",
    "public: unsigned int __thiscall DirectUI::Layout::GetLayoutChildCount(class DirectUI::Element *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCRadioButton::GetClassInfoW(void)",
    "public: long __thiscall DirectUI::ModernProgressBar::SetAddLayeredRef(bool)",
    "public: long __thiscall DirectUI::TouchHWNDElement::StartRichTooltipTimer(enum TOUCHTOOLTIP_INPUT)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCSysLink::GetClassInfoW(void)",
    "public: virtual long __thiscall DirectUI::SelectorSelectionItemProxy::DoMethod(int,char *)",
    "public: static int DirectUI::Schema::ExpandCollapsePattern",
    "public: __thiscall DirectUI::AutoThread::AutoThread(void)",
    "const DirectUI::CCPushButton::`vftable'",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchSelect::ItemHeightInPopupProp(void)",
    "public: static int DirectUI::Schema::Table_ColumnHeaders_Property",
    "public: static void __stdcall DirectUI::InvokeManager::CloseThread(void)",
    "public: struct DirectUI::IXProvider * __thiscall DirectUI::XElement::GetProvider(void)",
    "const DirectUI::CheckBoxGlyph::`vftable'",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchEdit2::PasswordRevealModeProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ScaleFactorProp(void)",
    "public: static void __stdcall DirectUI::Page::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static long __stdcall DirectUI::EventManager::PropertyChangingListener(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,bool *)",
    "protected: virtual long __thiscall DirectUI::Macro::BuildElement(void)",
    "public: __thiscall DirectUI::Thumb::Thumb(void)",
    "public: virtual void __thiscall DirectUI::CCCommandLink::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: void * __thiscall DirectUI::Value::GetImage(bool)",
    "public: long __thiscall DirectUI::DUIXmlParser::SetXMLFromResource(unsigned int,struct HINSTANCE__ *,struct HINSTANCE__ *)",
    "public: void __thiscall DirectUI::TableLayout::Initialize(int,int,int,int *)",
    "public: bool __thiscall DirectUI::AnimationStrip::GetPlay(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::GetWindow(struct HWND__ * *)",
    "public: void __thiscall DirectUI::DialogElementCore::OnDestroy(void)",
    "public: virtual void __thiscall DirectUI::DialogElement::OnListenedEvent(class DirectUI::Element *,struct DirectUI::Event *)",
    "public: virtual int __thiscall DirectUI::ScrollBar::GetMinimum(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCBase::GetClassInfoW(void)",
    "public: long __thiscall DirectUI::Element::SetMargin(int,int,int,int)",
    "public: long __thiscall DirectUI::Movie::SetPath(unsigned short const *)",
    "public: __thiscall DirectUI::Navigator::Navigator(class DirectUI::Navigator const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Progress::MaximumProp(void)",
    "public: static void __stdcall DirectUI::CCAVI::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: bool __thiscall DirectUI::TouchButton::GetCaptured(void)",
    "public: static long __stdcall DirectUI::ItemList::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: long __thiscall DirectUI::Element::SetCompositedText(bool)",
    "protected: virtual void __thiscall DirectUI::ModernProgressBar::OnUnHosted(class DirectUI::Element *)",
    "public: class DirectUI::XHost & __thiscall DirectUI::XHost::operator=(class DirectUI::XHost const &)",
    "public: virtual long __thiscall DirectUI::SelectorNoDefault::SetSelection(class DirectUI::Element *)",
    "private: void __thiscall DirectUI::BorderLayout::SetClient(class DirectUI::Element *)",
    "public: __thiscall DirectUI::Bind::Bind(class DirectUI::Bind const &)",
    "public: virtual bool __thiscall DirectUI::DialogElement::GetHandleEnterKey(void)",
    "public: static long __stdcall DirectUI::TextGraphic::Register(void)",
    "protected: static struct DirectUI::DUIXmlParser::FunctionDefinition const * const DirectUI::DUIXmlParser::s_fdInt",
    "protected: static bool __stdcall DirectUI::Macro::_GetBitmapSize(struct HBITMAP__ *,struct tagSIZE *)",
    "public: bool __thiscall DirectUI::Viewer::GetXScrollable(void)",
    "const DirectUI::CCVScrollBar::`vftable'{for `DirectUI::BaseScrollBar'}",
    "public: long __thiscall DirectUI::Selector::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: static bool __stdcall DirectUI::SelectionProxy::IsPatternSupported(class DirectUI::Element *)",
    "private: static struct DirectUI::Schema::PropertyInfo const * const DirectUI::Schema::g_propertyInfoTable",
    "public: virtual __thiscall DirectUI::TouchCheckBox::~TouchCheckBox(void)",
    "public: static class UID __stdcall DirectUI::TouchButton::RightClick(void)",
    "public: void __thiscall DirectUI::Repeater::SetDataEngine(struct DirectUI::IDataEngine *)",
    "public: virtual bool __thiscall DirectUI::XBaby::OnChildLostFocus(class DirectUI::Element *)",
    "public: static void __stdcall DirectUI::ScrollViewer::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: void __thiscall DirectUI::TouchSelect::ClosePopup(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCCommandLink::GetClassInfoW(void)",
    "const DirectUI::GridLayout::`vftable'",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Navigator::GetClassInfoPtr(void)",
    "public: long __thiscall DirectUI::Bind::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: long __thiscall DirectUI::ModernProgressBar::SetMinimum(int)",
    "public: long __thiscall DirectUI::TouchEditBase::SetSyncContentWhileIMEComposing(bool)",
    "private: class DirectUI::Value * __thiscall DirectUI::Element::_GetLocalValueFromVM(struct DirectUI::PropertyInfo const *)",
    "public: long __thiscall DirectUI::AutoThread::Init(void)",
    "public: virtual int __thiscall DirectUI::ScrollBar::GetMaximum(void)",
    "public: virtual __thiscall DirectUI::FlowLayout::~FlowLayout(void)",
    "public: __thiscall DirectUI::TableProxy::TableProxy(void)",
    "protected: void __thiscall DirectUI::ElementProxy::GetControlType(struct tagVARIANT *,struct IAccessible *)",
    "public: class DirectUI::DUIXmlParser * __thiscall DirectUI::DUIFactory::GetParser(void)",
    "public: long __thiscall DirectUI::TouchScrollViewer::GetHScrollbar(class DirectUI::Element * *)",
    "public: bool __thiscall DirectUI::Element::GetOverhang(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::RichText::GetClassInfoW(void)",
    "public: class DirectUI::SelectorSelectionItemProxy & __thiscall DirectUI::SelectorSelectionItemProxy::operator=(class DirectUI::SelectorSelectionItemProxy const &)",
    "public: int __thiscall DirectUI::Element::GetIndex(void)",
    "public: static long __stdcall DirectUI::Layout::Create(class DirectUI::Layout * *)",
    "public: class DirectUI::Element * __thiscall DirectUI::Selector::GetSelection(void)",
    "private: static int const DirectUI::EventManager::cChangeBulk",
    "public: virtual __thiscall DirectUI::HWNDHostClientAccessible::~HWNDHostClientAccessible(void)",
    "RegisterBrowserControls",
    "public: static class UID __stdcall DirectUI::TouchScrollBar::ActiveStateChanged(void)",
    "public: bool __thiscall DirectUI::TouchButton::GetHandleGlobalEnter(void)",
    "public: unsigned long __thiscall DirectUI::CCTreeView::GetStyle(void)",
    "public: virtual void __thiscall DirectUI::AccessibleButton::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: long __thiscall DirectUI::Element::SetBackgroundStdColor(int)",
    "public: static long __stdcall DirectUI::RichText::CreateCache(unsigned int,struct IDUIRichTextCache * *)",
    "public: static long __stdcall DirectUI::TouchRepeatButton::Register(void)",
    "public: virtual unsigned long __stdcall DirectUI::RangeValueProvider::Release(void)",
    "const DirectUI::ExpandCollapseProvider::`vftable'",
    "protected: virtual void __thiscall DirectUI::GridItemProxy::Init(class DirectUI::Element *)",
    "public: bool __thiscall DirectUI::Movie::GetAutoStop(void)",
    "public: static class UID __stdcall DirectUI::TouchScrollBar::AnimateScroll(void)",
    "public: static int DirectUI::Schema::Drag_DropEffects_Property",
    "public: static int DirectUI::Schema::TableControlType",
    "private: static struct DirectUI::Schema::EventInfo const * const DirectUI::Schema::g_eventInfoTable",
    "public: __thiscall DirectUI::BaseScrollBar::BaseScrollBar(void)",
    "public: __thiscall DirectUI::Combobox::Combobox(void)",
    "public: enum DirectUI::TouchHWNDElementFlags __thiscall DirectUI::TouchHWNDElement::GetFlags(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateElementList(class DirectUI::DynamicArray *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Edit::ThemedBorderProp(void)",
    "public: virtual __thiscall DirectUI::IDataEngine::~IDataEngine(void)",
    "public: virtual long __stdcall DirectUI::GridItemProvider::get_Row(int *)",
    "public: static long __stdcall DirectUI::GridLayout::Create(int,int *,class DirectUI::Value * *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Combobox::GetClassInfoPtr(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::RefPointElement::s_pClassInfo",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accValue(struct tagVARIANT,unsigned short * *)",
    "public: long __thiscall DirectUI::Element::SetForegroundColor(unsigned long)",
    "public: long __thiscall DirectUI::CCBaseScrollBar::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: long __thiscall DirectUI::TouchHWNDElement::SetFlags(enum DirectUI::TouchHWNDElementFlags,enum DirectUI::TouchHWNDElementFlags)",
    "public: static class UID __stdcall DirectUI::TouchSelect::PopupChange(void)",
    "public: static void __stdcall DirectUI::CallstackTracker::Uninit(void)",
    "public: virtual void __thiscall DirectUI::Movie::OnDestroy(void)",
    "public: long __thiscall DirectUI::RefPointElement::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_BuildStyles(struct IXmlReader *)",
    "public: long __thiscall DirectUI::TouchCheckBoxGlyph::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: __thiscall DirectUI::Button::Button(void)",
    "protected: static void __stdcall DirectUI::Macro::_BitAccurateFillRect(struct HDC__ *,int,int,int,int,unsigned char,unsigned char,unsigned char,unsigned char,unsigned long)",
    "public: long __thiscall DirectUI::BaseScrollViewer::SetXOffset(int)",
    "public: static long __stdcall DirectUI::ShellBorderLayout::Create(int,int *,class DirectUI::Value * *)",
    "public: static void __stdcall DirectUI::Combobox::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: long __thiscall DirectUI::TouchEdit2::PasteText(unsigned short const *)",
    "public: static void __stdcall DirectUI::InvokeManager::Close(void)",
    "public: unsigned short const * __thiscall DirectUI::Value::GetString(void)",
    "public: virtual bool __thiscall DirectUI::ClassInfoBase::IsSubclassOf(struct DirectUI::IClassInfo *)const",
    "public: virtual void __thiscall DirectUI::XElement::OnInput(struct DirectUI::InputEvent *)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::ContextSensitiveHelp(int)",
    "public: __thiscall DirectUI::CCAVI::CCAVI(class DirectUI::CCAVI const &)",
    "public: __thiscall DirectUI::XProvider::XProvider(void)",
    "public: bool __thiscall DirectUI::Expandable::GetExpanded(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCListView::s_pClassInfo",
    "const DirectUI::TableItemProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: virtual long __thiscall DirectUI::CCPushButton::DefaultAction(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateDTBFill(unsigned short const *,int,int)",
    "public: __thiscall DirectUI::NavigatorSelectionItemProxy::NavigatorSelectionItemProxy(class DirectUI::NavigatorSelectionItemProxy const &)",
    "public: virtual long __stdcall DirectUI::TableProvider::get_RowOrColumnMajor(enum RowOrColumnMajor *)",
    "public: static int DirectUI::Schema::DragPattern",
    "public: bool __thiscall DirectUI::TouchEditBase::GetElementMovesOnIHMNotify(void)",
    "public: static long __stdcall DirectUI::Selector::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static int DirectUI::Schema::CheckBoxControlType",
    "public: static long __stdcall DirectUI::XHost::WndProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::EdgeHighlightThicknessProp(void)",
    "public: unsigned short __thiscall DirectUI::Browser::GetCurrentPageID(void)",
    "public: static long __stdcall DirectUI::CheckBoxGlyph::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual struct HWND__ * __thiscall DirectUI::HWNDHost::GetHWND(void)",
    "public: virtual void __thiscall DirectUI::NineGridLayout::OnRemove(class DirectUI::Element *,class DirectUI::Element * *,unsigned int)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetClass(class DirectUI::Value * *)",
    "public: class DirectUI::RepeatButton & __thiscall DirectUI::RepeatButton::operator=(class DirectUI::RepeatButton const &)",
    "EnableAnimations",
    "protected: void __thiscall DirectUI::HWNDElement::_HandleImmersiveColorSchemeChange(void)",
    "public: int __thiscall DirectUI::TouchSlider::GetRangeMax(void)",
    "private: float __thiscall DirectUI::DUIXmlParser::_ScaleRelativePixels(float)const",
    "public: __thiscall DirectUI::Surface::Surface(class DirectUI::Surface const &)",
    "const DirectUI::ValueProxy::`vftable'",
    "protected: static unsigned short __stdcall DirectUI::Expando::Arrow(void)",
    "public: void __thiscall DirectUI::XHost::ShowWindow(int)",
    "public: static class UID __stdcall DirectUI::TouchScrollViewer::ManipulationDelta(void)",
    "public: virtual unsigned long __stdcall DirectUI::SelectionItemProvider::Release(void)",
    "public: static long __stdcall DirectUI::TouchRepeatButton::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: __thiscall DirectUI::ModernProgressBarRangeValueProxy::ModernProgressBarRangeValueProxy(class DirectUI::ModernProgressBarRangeValueProxy const &)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Selector::GetClassInfoPtr(void)",
    "public: static long __stdcall DirectUI::SelectorNoDefault::Register(void)",
    "public: static int __stdcall DirectUI::Schema::LookupAccessibleRole(int,bool *)",
    "public: __thiscall DirectUI::Progress::Progress(void)",
    "public: long __thiscall DirectUI::Element::SetForegroundStdColor(int)",
    "public: virtual bool __thiscall DirectUI::ScrollBar::GetProportional(void)",
    "public: void __thiscall DirectUI::NativeHWNDHost::Destroy(void)",
    "public: static int DirectUI::Schema::TabControlType",
    "public: unsigned short const * __thiscall DirectUI::Element::GetFontFace(class DirectUI::Value * *)",
    "public: virtual bool __thiscall DirectUI::DialogElement::OnChildLostFocus(class DirectUI::Element *)",
    "public: virtual __thiscall DirectUI::DialogElement::~DialogElement(void)",
    "public: virtual long __thiscall DirectUI::InvokeProxy::DoMethod(int,char *)",
    "public: static long __stdcall DirectUI::Thumb::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseDFCFill(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: static long (__stdcall* DirectUI::Schema::UiaRaiseAutomationEvent)(struct IRawElementProviderSimple *,int)",
    "const DirectUI::Page::`vftable'",
    "public: long __thiscall DirectUI::RichText::SetDisableAccTextExtend(bool)",
    "public: long __thiscall DirectUI::ItemList::SetReorderable(bool)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::PText::GetClassInfoPtr(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::StyledScrollViewer::s_pClassInfo",
    "public: virtual void __thiscall DirectUI::NineGridLayout::OnLayoutPosChanged(class DirectUI::Element *,class DirectUI::Element *,int,int)",
    "public: bool __thiscall DirectUI::Element::IsDescendent(class DirectUI::Element *)",
    "public: int __thiscall DirectUI::Element::GetForegroundStdColor(void)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::accHitTest(long,long,struct tagVARIANT *)",
    "public: virtual long __stdcall DirectUI::ScrollProvider::get_VerticalScrollPercent(double *)",
    "public: static int DirectUI::Schema::Scroll_VerticalViewSize_Property",
    "public: struct tagPOINT const * __thiscall DirectUI::RefPointElement::GetReferencePoint(class DirectUI::Value * *)",
    "protected: virtual void __thiscall DirectUI::CCAVI::PostCreate(struct HWND__ *)",
    "protected: long __cdecl DirectUI::PatternProvider::DoInvoke(int,...)",
    "public: void __thiscall DirectUI::CCBase::`default constructor closure'(void)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::GridProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateGraphic(struct HBITMAP__ *,unsigned char,unsigned int,bool,bool,bool)",
    "protected: virtual void __thiscall DirectUI::GridProxy::Init(class DirectUI::Element *)",
    "public: static int DirectUI::Schema::Scroll_HorizontalViewSize_Property",
    "public: virtual void __thiscall DirectUI::Selector::OnKeyFocusMoved(class DirectUI::Element *,class DirectUI::Element *)",
    "HrSysAllocString",
    "public: virtual __thiscall DirectUI::DuiAccessible::~DuiAccessible(void)",
    "const DirectUI::TableProxy::`vftable'",
    "const DirectUI::ScrollBarRangeValueProxy::`vftable'",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Bind::GetClassInfoW(void)",
    "public: static bool (__stdcall*__stdcall DirectUI::Schema::PfnIsSupportedFromPattern(enum DirectUI::Schema::Pattern))(class DirectUI::Element *)",
    "private: int __thiscall DirectUI::DUIXmlParser::_ScaleRelativePixels(int)const",
    "protected: bool __thiscall DirectUI::HWNDHost::GetStaticColor(struct HDC__ *,struct HBRUSH__ * *)",
    "public: virtual int __thiscall DirectUI::CCBaseScrollBar::GetLine(void)",
    "public: __thiscall DirectUI::ScrollItemProvider::ScrollItemProvider(void)",
    "const DirectUI::TableProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "private: void __thiscall DirectUI::Value::_ZeroRelease(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::TouchCheckBoxGlyph::GetClassInfoW(void)",
    "const DirectUI::RepeatButton::`vftable'",
    "public: static long __stdcall DirectUI::Pages::Register(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::RefPointElement::GetClassInfoPtr(void)",
    "private: void __thiscall DirectUI::HWNDHost::ApplySinkRegion(struct tagRECT const *,bool)",
    "public: virtual void __thiscall DirectUI::ClassInfoBase::AddChild(void)",
    "public: class DirectUI::HWNDElement & __thiscall DirectUI::HWNDElement::operator=(class DirectUI::HWNDElement const &)",
    "long __stdcall DirectUI::GetColorFromValue(class DirectUI::Element *,class DirectUI::Value *,unsigned long *)",
    "public: bool __thiscall DirectUI::ModernProgressBar::IsAddLayeredRef(void)",
    "const DirectUI::SelectionProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: class DirectUI::CCBaseCheckRadioButton & __thiscall DirectUI::CCBaseCheckRadioButton::operator=(class DirectUI::CCBaseCheckRadioButton const &)",
    "public: class DirectUI::Element * __thiscall DirectUI::Element::GetMouseWithinChild(void)",
    "public: virtual long __stdcall DirectUI::XProvider::SetFocus(class DirectUI::Element *)",
    "private: long __thiscall DirectUI::SelectorSelectionItemProxy::GetSelectionContainer(struct IRawElementProviderSimple * *)",
    "public: virtual void __thiscall DirectUI::Viewer::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: void __thiscall DirectUI::BaseScrollBar::OnPositionChanged(class DirectUI::Value *)",
    "private: static int __stdcall DirectUI::HWNDHost::_CtrlWndProc(void *,struct HWND__ *,unsigned int,unsigned int,long,long *)",
    "protected: static bool __stdcall DirectUI::DialogElementCore::IsButtonEnabledAndVisible(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetVirtualizeElements(bool)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::NineGridLayout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: static class DirectUI::ExpandCollapseProxy * __stdcall DirectUI::ExpandCollapseProxy::Create(class DirectUI::Element *)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::GridItemProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: void __thiscall DirectUI::TouchSlider::SetRespondToMouseScroll(bool)",
    "public: static int DirectUI::Schema::TableItem_ColumnHeaderItems_Property",
    "public: __thiscall DirectUI::PushButton::PushButton(void)",
    "public: virtual long __thiscall DirectUI::ValueProxy::DoMethod(int,char *)",
    "public: long __thiscall DirectUI::TouchSelect::SetItemData(int,struct IUnknown *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::TouchScrollBar::GetClassInfoW(void)",
    "public: long __thiscall DirectUI::Bind::SetProperty(unsigned short const *)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetSnapPointCollectionX(class DirectUI::DynamicArray *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCSysLink::GetClassInfoPtr(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCTrackBar::ThumbPositionProp(void)",
    "public: __thiscall DirectUI::TextGraphic::TextGraphic(class DirectUI::TextGraphic const &)",
    "public: static class DirectUI::ScrollProxy * __stdcall DirectUI::ScrollProxy::Create(class DirectUI::Element *)",
    "public: static class UID __stdcall DirectUI::TouchEdit2::ClearButtonClicked(void)",
    "const DirectUI::RadioButtonGlyph::`vftable'",
    "public: static void __stdcall DirectUI::CCBaseCheckRadioButton::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "RegisterAllControls",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::KeyFocusedProp(void)",
    "public: struct HINSTANCE__ * __thiscall DirectUI::DUIXmlParser::GetHInstance(void)",
    "public: virtual long __thiscall DirectUI::HWNDHostAccessible::Disconnect(void)",
    "public: virtual bool __thiscall DirectUI::Edit::OnNotify(unsigned int,unsigned int,long,long *)",
    "public: class DirectUI::Element * __thiscall DirectUI::TouchSlider::GetFillpartElement(void)",
    "public: virtual void __thiscall DirectUI::TouchScrollBar::OnEvent(struct DirectUI::Event *)",
    "public: __thiscall DirectUI::CCBase::CCBase(unsigned long,unsigned short const *)",
    "public: virtual long __thiscall DirectUI::ScrollItemProxy::DoMethod(int,char *)",
    "public: float __thiscall DirectUI::TouchScrollViewer::GetContentCrossfadeOpacity(void)",
    "public: static long __stdcall DirectUI::TouchEditBase::Register(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::CreateXmlReaderFromHGLOBAL(void *,struct IXmlReader * *)",
    "public: __thiscall DirectUI::ValueProxy::ValueProxy(class DirectUI::ValueProxy const &)",
    "public: long __thiscall DirectUI::Movie::SetRepeat(bool)",
    "public: struct DirectUI::Fill const * __thiscall DirectUI::Element::GetBackgroundColor(class DirectUI::Value * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::HighDPIProp(void)",
    "public: long __thiscall DirectUI::TextGraphic::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Edit::GetClassInfoPtr(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateValueList(class DirectUI::Value *)",
    "public: __thiscall DirectUI::AutoButton::AutoButton(void)",
    "public: int __thiscall DirectUI::TouchScrollViewer::GetInteractionMode(void)",
    "public: long __thiscall DirectUI::XElement::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: static long __stdcall DirectUI::TouchButton::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: long __thiscall DirectUI::TouchEdit2::GetTextHost(class ITextHost * *)",
    "public: virtual __thiscall DirectUI::BorderLayout::~BorderLayout(void)",
    "public: void __thiscall DirectUI::Element::PaintBackground(struct HDC__ *,class DirectUI::Value *,struct tagRECT const &,struct tagRECT const &,struct tagRECT const &,struct tagRECT const &)",
    "public: __thiscall DirectUI::TableLayout::TableLayout(class DirectUI::TableLayout const &)",
    "public: virtual void __thiscall DirectUI::TouchHWNDElement::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static class DirectUI::TableItemProxy * __stdcall DirectUI::TableItemProxy::Create(class DirectUI::Element *)",
    "const DirectUI::InvokeProvider::`vftable'",
    "public: virtual unsigned long __stdcall DirectUI::InvokeProvider::Release(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseArgs(struct DirectUI::ParserTools::ExprNode const *,union DirectUI::DUIXmlParser::ParsedArg *,unsigned int,char const *)",
    "private: static struct DirectUI::Schema::RoleMap const * const DirectUI::Schema::_roleMapping",
    "public: long __thiscall DirectUI::TouchEditBase::SetIMEComposing(bool)",
    "public: virtual struct tagSIZE __thiscall DirectUI::XBaby::GetContentDesiredSize(int,int)",
    "RegisterPVLBehaviorFactory",
    "public: static void __stdcall DirectUI::BaseScrollViewer::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: class DirectUI::Edit & __thiscall DirectUI::Edit::operator=(class DirectUI::Edit const &)",
    "public: static int DirectUI::Schema::AutomationPropertyChangedEvent",
    "public: __thiscall DirectUI::ModernProgressBarRangeValueProxy::ModernProgressBarRangeValueProxy(void)",
    "protected: void __thiscall DirectUI::DUIXmlParser::_LeaveOnCurrentThread(void)",
    "public: long __thiscall DirectUI::TouchEdit2::SelectAll(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetBoolFalse(void)",
    "public: static class UID __stdcall DirectUI::TouchButton::MultipleClick(void)",
    "public: class DirectUI::IXElementCP & __thiscall DirectUI::IXElementCP::operator=(class DirectUI::IXElementCP const &)",
    "const DirectUI::SelectionItemProvider::`vftable'",
    "public: __thiscall DirectUI::AutoLock::~AutoLock(void)",
    "public: long __thiscall DirectUI::TouchEditBase::SetTextMode(enum DirectUI::TouchEditTextMode)",
    "protected: static void __stdcall DirectUI::AnimationStrip::RawActionProc(struct GMA_ACTIONINFO *)",
    "public: static long __stdcall DirectUI::CCCheckBox::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::FontProp(void)",
    "public: class DirectUI::CritSecLock & __thiscall DirectUI::CritSecLock::operator=(class DirectUI::CritSecLock const &)",
    "public: float __thiscall DirectUI::TouchScrollViewer::GetSnapIntervalX(void)",
    "const DirectUI::Navigator::`vftable'",
    "public: static void __stdcall DirectUI::Thumb::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetExprNull(void)",
    "public: void __thiscall DirectUI::Element::_StartOptimizedLayoutQ(void)",
    "protected: virtual class DirectUI::BaseScrollBar * __thiscall DirectUI::StyledScrollViewer::GetHScroll(void)",
    "public: int __thiscall DirectUI::Element::GetTooltipMaxWidth(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchSlider::VisualStateProp(void)",
    "public: virtual struct HINSTANCE__ * __thiscall DirectUI::ClassInfoBase::GetModule(void)const",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ParentProp(void)",
    "public: virtual void __thiscall DirectUI::CCCheckBox::OnInput(struct DirectUI::InputEvent *)",
    "GetElementDataEntry",
    "public: __thiscall DirectUI::CCCheckBox::CCCheckBox(class DirectUI::CCCheckBox const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCCommandLink::NoteProp(void)",
    "public: __thiscall DirectUI::ProgressRangeValueProxy::ProgressRangeValueProxy(void)",
    "public: static bool __stdcall DirectUI::SelectionItemProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: class DirectUI::BaseScrollBar & __thiscall DirectUI::BaseScrollBar::operator=(class DirectUI::BaseScrollBar const &)",
    "public: virtual void __thiscall DirectUI::Layout::OnAdd(class DirectUI::Element *,class DirectUI::Element * *,unsigned int)",
    "public: class DirectUI::XElement & __thiscall DirectUI::XElement::operator=(class DirectUI::XElement const &)",
    "protected: void __thiscall DirectUI::DUIXmlParser::ReturnValueParser(class DirectUI::ParserTools::ValueParser *)",
    "public: long __thiscall DirectUI::RadioButtonGlyph::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: int __thiscall DirectUI::BaseScrollViewer::GetYScrollWidth(void)",
    "public: static long __stdcall DirectUI::UnknownElement::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCPushButton::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Progress::GetClassInfoW(void)",
    "public: static void __stdcall DirectUI::Element::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: class DirectUI::Element * __thiscall DirectUI::Element::FindDescendent(unsigned short)",
    "public: static long __stdcall DirectUI::ScrollBar::Create(bool,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: long __thiscall DirectUI::TouchButton::SetPressed(bool)",
    "public: virtual long __thiscall DirectUI::ElementProxy::DoMethod(int,char *)",
    "private: static struct _RTL_CRITICAL_SECTION DirectUI::EventManager::g_cs",
    "public: __thiscall DirectUI::ItemList::ItemList(void)",
    "public: void __thiscall DirectUI::Value::Release(void)",
    "public: __thiscall DirectUI::GridItemProxy::GridItemProxy(void)",
    "public: static int DirectUI::Schema::DataGridControlType",
    "public: static long __stdcall DirectUI::NineGridLayout::Create(int,int *,class DirectUI::Value * *)",
    "public: virtual struct HWND__ * __thiscall DirectUI::XElement::GetNotificationSinkHWND(void)",
    "public: static long __stdcall DirectUI::Expando::Register(void)",
    "private: virtual void __thiscall DirectUI::TouchEdit2::OnListenerDetach(class DirectUI::Element *)",
    "public: bool __thiscall DirectUI::HWNDElement::ShowFocus(void)",
    "public: void __thiscall DirectUI::TouchScrollBar::SetActiveState(enum DirectUI::ActiveState,bool)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseGradientFill(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseSysMetricStr(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: long __thiscall DirectUI::Macro::SetExpand(unsigned short const *)",
    "private: static struct API_VERSION * (__stdcall* DirectUI::CallstackTracker::s_pfnImagehlpApiVersionEx)(struct API_VERSION *)",
    "public: long __thiscall DirectUI::RichText::SetFontSizeRuns(unsigned short const *)",
    "public: long __thiscall DirectUI::TouchSlider::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::SemanticZoomToggle::GetClassInfoPtr(void)",
    "public: virtual unsigned long __stdcall DirectUI::XProvider::AddRef(void)",
    "public: virtual long __stdcall DirectUI::SelectionItemProvider::AddToSelection(void)",
    "public: static long __stdcall DirectUI::Macro::Register(void)",
    "RegisterStandardControls",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCPushButton::GetClassInfoPtr(void)",
    "public: void __thiscall DirectUI::CCCheckBox::`default constructor closure'(void)",
    "public: static void __stdcall DirectUI::TextGraphic::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static long __stdcall DirectUI::CCTrackBar::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "private: long __thiscall DirectUI::GridProxy::GetColumnCount(int *)",
    "public: static long __stdcall DirectUI::ContextMenuBehavior::Create(struct IDuiBehavior * *)",
    "public: static class UID __stdcall DirectUI::Element::KeyboardNavigate(void)",
    "public: class DirectUI::DialogElementCore & __thiscall DirectUI::DialogElementCore::operator=(class DirectUI::DialogElementCore const &)",
    "private: long __thiscall DirectUI::ToggleProxy::GetToggleState(enum ToggleState *)",
    "public: __thiscall DirectUI::BrowserSelectionProxy::BrowserSelectionProxy(class DirectUI::BrowserSelectionProxy const &)",
    "public: static int DirectUI::Schema::Drag_DropEffect_Property",
    "public: void __thiscall DirectUI::HWNDElement::DelayActivateTooltip(void)",
    "public: virtual long __thiscall DirectUI::SelectionItemProxy::DoMethod(int,char *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Edit::GetClassInfoW(void)",
    "public: static enum DirectUI::Schema::Event __stdcall DirectUI::Schema::EventFromEventId(int)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCHScrollBar::GetClassInfoPtr(void)",
    "public: virtual long __thiscall DirectUI::TouchEdit2::GetAccessibleImpl(struct IAccessible * *)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::HWNDElementProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: bool __thiscall DirectUI::TouchHWNDElement::IsRegisteredForAnimationStatusChanges(void)",
    "GetElementMacro",
    "const DirectUI::RowLayout::`vftable'",
    "public: virtual long __thiscall DirectUI::HWNDElement::WndProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: static long __stdcall DirectUI::Repeater::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: __thiscall DirectUI::CCProgressBar::CCProgressBar(void)",
    "public: long __thiscall DirectUI::TouchSelect::SetSelectionIndex(int)",
    "public: __thiscall DirectUI::CCListBox::CCListBox(void)",
    "public: virtual long __thiscall DirectUI::ScrollBar::SetPosition(int)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_RecordElementStyleSheet(unsigned short const *,bool)",
    "public: static long __stdcall DirectUI::HWNDHostAccessible::Create(class DirectUI::Element *,struct IAccessible *,class DirectUI::DuiAccessible * *)",
    "protected: class DirectUI::Element * __thiscall DirectUI::XProvider::GetRoot(void)",
    "public: virtual bool __thiscall DirectUI::XBaby::ClickDefaultButton(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::accDoDefaultAction(struct tagVARIANT)",
    "public: virtual long __thiscall DirectUI::SemanticZoomToggle::DefaultAction(void)",
    "protected: virtual unsigned int __thiscall DirectUI::TaskPage::GetPageRCID(void)",
    "public: void __thiscall DirectUI::Element::BroadcastEvent(struct DirectUI::Event *)",
    "public: unsigned short const * __thiscall DirectUI::TouchSwitch::GetOnText(class DirectUI::Value * *)",
    "const DirectUI::ElementProxy::`vftable'",
    "IsUIAutomationProviderEnabled",
    "public: static long __stdcall DirectUI::CCBase::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual unsigned long __stdcall DirectUI::HWNDElementProvider::Release(void)",
    "public: long __thiscall DirectUI::ModernProgressBar::SetDeterminate(bool)",
    "CreateDUIWrapperTouchEx",
    "public: static long __stdcall DirectUI::CCCommandLink::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual unsigned long __stdcall DirectUI::ElementProvider::Release(void)",
    "public: bool __thiscall DirectUI::Element::IsRTL(void)",
    "public: static int DirectUI::Schema::InvokePattern",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetElListNull(void)",
    "public: virtual long __thiscall DirectUI::GridItemProxy::DoMethod(int,char *)",
    "const DirectUI::GridItemProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "const DirectUI::Pages::`vftable'",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::ModernProgressBar::GetClassInfoW(void)",
    "public: int __thiscall DirectUI::TouchSwitch::GetToggleValue(void)",
    "protected: virtual void __thiscall DirectUI::HWNDElement::_OnUIStateChanged(unsigned short,unsigned short)",
    "const DirectUI::CCSysLink::`vftable'",
    "public: void __cdecl DirectUI::DUIFactory::SetError(unsigned short const *,...)",
    "private: static long __stdcall DirectUI::Value::StrDupW(unsigned short const *,unsigned short * *)",
    "public: void __thiscall DirectUI::TouchSlider::SetThumbValue(int,bool,bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchSlider::BufferingProp(void)",
    "protected: long __thiscall DirectUI::Element::_RemoveLocalValue(struct DirectUI::PropertyInfo const * (__stdcall*)(void),bool)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::SelectorNoDefault::GetClassInfoPtr(void)",
    "private: static class DirectUI::UiaArray * DirectUI::EventManager::g_pArrayPropertyEvent",
    "public: __thiscall DirectUI::InvokeProxy::InvokeProxy(void)",
    "public: static int DirectUI::Schema::TableItemPattern",
    "public: virtual int __thiscall DirectUI::HWNDHost::OnAdjustWindowSize(int,int,unsigned int)",
    "public: static void __stdcall DirectUI::CCHScrollBar::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "private: static int (__stdcall* DirectUI::CallstackTracker::s_pfnSymInitialize)(void *,char const *,int)",
    "ElementFromGadget",
    "public: int __thiscall DirectUI::Value::GetType(void)const",
    "public: static void __stdcall DirectUI::Pages::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static long __stdcall DirectUI::HWNDHost::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "private: static struct DirectUI::Schema::ControlInfo const * const DirectUI::Schema::g_controlInfoTable",
    "public: static class UID __stdcall DirectUI::PVLAnimation::AnimationStatusChange(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchHWNDElement::FlagsProp(void)",
    "const DirectUI::HWNDElementProvider::`vftable'",
    "public: __thiscall DirectUI::CCVScrollBar::CCVScrollBar(class DirectUI::CCVScrollBar const &)",
    "public: class DirectUI::NineGridLayout & __thiscall DirectUI::NineGridLayout::operator=(class DirectUI::NineGridLayout const &)",
    "public: virtual void __thiscall DirectUI::HWNDHost::OnInput(struct DirectUI::InputEvent *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::RichText::ConstrainLayoutProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchSwitch::OnTextProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::CustomProp(void)",
    "public: long __thiscall DirectUI::Element::GetEncodedContentString(unsigned short *,unsigned int)",
    "public: static long __stdcall DirectUI::SemanticZoomToggle::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::XBaby::`vftable'{for `DirectUI::IDialogElement'}",
    "public: long __thiscall DirectUI::RichText::SetLineSpacing(int)",
    "public: __thiscall DirectUI::AutoButton::AutoButton(class DirectUI::AutoButton const &)",
    "public: virtual void __thiscall DirectUI::Expando::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: __thiscall DirectUI::DUIXmlParser::DUIXmlParser(class DirectUI::DUIXmlParser const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::BaseScrollViewer::YScrollableProp(void)",
    "public: __thiscall DirectUI::ValueProvider::ValueProvider(void)",
    "public: virtual long __stdcall DirectUI::ScrollProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: static void __stdcall DirectUI::Repeater::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual __thiscall DirectUI::Proxy::~Proxy(void)",
    "const DirectUI::StyledScrollViewer::`vftable'{for `DirectUI::IElementListener'}",
    "protected: void __thiscall DirectUI::HWNDHost::SyncFont(void)",
    "public: long __thiscall DirectUI::TouchSlider::SetIsPressed(bool)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseAtomValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: static int __stdcall DirectUI::Element::_MarkElementForDS(class DirectUI::Element *)",
    "public: enum DirectUI::TouchEditPasswordRevealMode __thiscall DirectUI::TouchEdit2::GetPasswordRevealMode(void)",
    "public: virtual long __stdcall DirectUI::HWNDHostClientAccessible::get_accParent(struct IDispatch * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::GetPropValPairInfo(struct DirectUI::LINEINFO,struct DirectUI::IClassInfo *,unsigned short const *,unsigned short const *,struct DirectUI::PropertyInfo const * *,class DirectUI::Value * *)",
    "public: enum DirectUI::TouchEditKeyboardNavigationCapture __thiscall DirectUI::TouchEditBase::GetKeyboardNavigationCapture(void)",
    "protected: virtual bool __thiscall DirectUI::TaskPage::OnListenedPropertyChanging(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual bool __thiscall DirectUI::CheckBoxGlyph::OnReceivedDialogFocus(struct DirectUI::IDialogElement *)",
    "const DirectUI::HWNDHostClientAccessible::`vftable'{for `IEnumVARIANT'}",
    "public: __thiscall DirectUI::TouchEdit2::TouchEdit2(void)",
    "public: static int DirectUI::Schema::TogglePattern",
    "public: class DirectUI::PVLAnimation & __thiscall DirectUI::PVLAnimation::operator=(class DirectUI::PVLAnimation const &)",
    "public: virtual bool __thiscall DirectUI::HWNDElement::CanSetFocus(void)",
    "public: __thiscall DirectUI::CCListView::CCListView(void)",
    "public: virtual void __thiscall DirectUI::Layout::Detach(class DirectUI::Element *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ModernProgressBar::PositionProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchEditBase::ElementMovesOnIHMNotifyProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchSlider::TickCountProp(void)",
    "public: struct HWND__ * __thiscall DirectUI::TaskPage::GetParentHWND(void)",
    "protected: virtual void __thiscall DirectUI::Proxy::OnInvoke(unsigned int,void *)",
    "public: static bool __stdcall DirectUI::ScrollItemProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::HWNDHost::GetClassInfoW(void)",
    "public: __thiscall DirectUI::IProvider::IProvider(class DirectUI::IProvider const &)",
    "public: static class UID __stdcall DirectUI::TouchScrollViewer::ReleaseSnapshot(void)",
    "protected: virtual long __thiscall DirectUI::ScrollBar::CreateButtons(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::XBaby::GetClassInfoPtr(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::DrawOutlinesProp(void)",
    "private: bool __thiscall DirectUI::Element::TrySparsePattern(struct tagPOINT *,struct tagRECT const &)",
    "public: virtual void __thiscall DirectUI::Viewer::OnInput(struct DirectUI::InputEvent *)",
    "public: class DirectUI::StyledScrollViewer & __thiscall DirectUI::StyledScrollViewer::operator=(class DirectUI::StyledScrollViewer const &)",
    "public: bool __thiscall DirectUI::TouchScrollViewer::GetLinkIndicatorsToContent(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_SetXMLFromResource(unsigned short const *,unsigned short const *,struct HINSTANCE__ *,struct HINSTANCE__ *,struct HINSTANCE__ *)",
    "private: void __thiscall DirectUI::Element::_PostEvent(struct DirectUI::Event *,int)",
    "const DirectUI::ScrollItemProvider::`vftable'",
    "public: __thiscall DirectUI::Repeater::Repeater(void)",
    "public: static class UID __stdcall DirectUI::PushButton::Hosted(void)",
    "public: virtual struct DirectUI::PropertyInfo const * __thiscall DirectUI::ClassInfoBase::EnumPropertyInfo(unsigned int)",
    "public: __thiscall DirectUI::XElement::XElement(class DirectUI::XElement const &)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseDTBFill(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: static long __stdcall DirectUI::RowLayout::Create(unsigned int,unsigned int,class DirectUI::Layout * *)",
    "public: virtual __thiscall DirectUI::IDataEntry::~IDataEntry(void)",
    "public: virtual void __thiscall DirectUI::BorderLayout::OnRemove(class DirectUI::Element *,class DirectUI::Element * *,unsigned int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Edit::WantTabsProp(void)",
    "public: __thiscall DirectUI::Layout::Layout(class DirectUI::Layout const &)",
    "private: static long __stdcall DirectUI::EventManager::HandleAccDesc(class DirectUI::Element *,struct IRawElementProviderSimple *,class DirectUI::Value *,class DirectUI::Value *)",
    "public: long __thiscall DirectUI::BaseScrollViewer::SetYOffset(int)",
    "public: virtual __thiscall DirectUI::ScrollViewer::~ScrollViewer(void)",
    "public: virtual long __thiscall DirectUI::XProvider::CreateXBaby(class DirectUI::IXElementCP *,struct HWND__ *,class DirectUI::Element *,unsigned long *,struct DirectUI::IXBaby * *)",
    "public: class DirectUI::Element * __thiscall DirectUI::DialogElementCore::GetDefaultButton(void)",
    "public: long __thiscall DirectUI::Element::SetCursorHandle(struct HICON__ *)",
    "public: virtual __thiscall DirectUI::Page::~Page(void)",
    "UiaOnToolTip",
    "public: static long __stdcall DirectUI::TableLayout::InternalCreate(int,int,int,int *,class DirectUI::Layout * *)",
    "public: bool __thiscall DirectUI::Element::EnsureVisible(void)",
    "public: long __thiscall DirectUI::SemanticZoomToggle::Initialize(class DirectUI::Element *,unsigned long *)",
    "protected: virtual class DirectUI::Element * __thiscall DirectUI::TaskPage::OnQueryInitialFocus(void)",
    "public: static int DirectUI::Schema::SelectionPattern",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ActiveProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchButton::HandleGlobalEnterProp(void)",
    "public: virtual __thiscall DirectUI::Progress::~Progress(void)",
    "public: virtual void __thiscall DirectUI::XBaby::CacheParser(class DirectUI::DUIXmlParser *)",
    "public: __thiscall DirectUI::Expando::Expando(void)",
    "public: int __thiscall DirectUI::Element::GetDirection(void)",
    "public: virtual long __thiscall DirectUI::HWNDHost::GetAccessibleImpl(struct IAccessible * *)",
    "DisableAnimations",
    "public: bool __thiscall DirectUI::CCPushButton::GetOverrideButtonBackground(void)",
    "public: long __thiscall DirectUI::Element::SetAccDefAction(unsigned short const *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::ModernProgressRing::GetClassInfoPtr(void)",
    "CreateDUIWrapperFromResource",
    "public: virtual long __thiscall DirectUI::ProgressRangeValueProxy::DoMethod(int,char *)",
    "public: long __thiscall DirectUI::TouchSlider::SetBuffering(int)",
    "public: static long __stdcall DirectUI::BaseScrollViewer::Register(void)",
    "public: long __thiscall DirectUI::Element::SetLayoutPos(int)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseRGBColor(struct DirectUI::ParserTools::ExprNode const *,unsigned long *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::KeyWithinProp(void)",
    "private: static unsigned short DirectUI::Expando::_atmClipper",
    "public: long __thiscall DirectUI::Element::SetTooltipMaxWidth(int)",
    "public: static long __stdcall DirectUI::SemanticZoomToggle::Register(void)",
    "public: int __thiscall DirectUI::Layout::GetLayoutIndexFromChild(class DirectUI::Element *,class DirectUI::Element *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::VisibleProp(void)",
    "public: virtual __thiscall DirectUI::CCPushButton::~CCPushButton(void)",
    "public: static long __stdcall DirectUI::HWNDHost::Register(void)",
    "public: bool __thiscall DirectUI::Element::UiaEvents(void)",
    "public: virtual long __stdcall DirectUI::ElementProvider::AdviseEventAdded(int,struct tagSAFEARRAY *)",
    "public: void __thiscall DirectUI::Layout::Destroy(void)",
    "public: static void __stdcall DirectUI::CCSysLink::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: __thiscall DirectUI::IXElementCP::IXElementCP(class DirectUI::IXElementCP const &)",
    "public: static long __stdcall DirectUI::ModernProgressBar::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual void __thiscall DirectUI::BorderLayout::OnLayoutPosChanged(class DirectUI::Element *,class DirectUI::Element *,int,int)",
    "public: static long __stdcall DirectUI::TouchHyperLink::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: void __thiscall DirectUI::Element::SetPVLAnimationState(int)",
    "protected: long __thiscall DirectUI::DuiAccessible::GetAccNameFromContent(unsigned short * *)",
    "public: virtual __thiscall DirectUI::ToggleProvider::~ToggleProvider(void)",
    "public: virtual long __thiscall DirectUI::ScrollBar::SetPage(int)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetPointZero(void)",
    "protected: static struct tagSIZE __stdcall DirectUI::VerticalFlowLayout::SizeZero(void)",
    "public: virtual __thiscall DirectUI::TouchSelect::~TouchSelect(void)",
    "public: __thiscall DirectUI::ToggleProxy::ToggleProxy(void)",
    "const DirectUI::ToggleProvider::`vftable'",
    "private: long __thiscall DirectUI::Element::_GetDependencies(struct DirectUI::PropertyInfo const *,int,struct DirectUI::DepRecs *,int,class DirectUI::Value *,class DirectUI::DeferCycle *)",
    "public: virtual void __thiscall DirectUI::Element::HandleUiaPropertyListener(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ScrollBar::PageProp(void)",
    "protected: static bool __stdcall DirectUI::DUIXmlParser::IsThemeClassName(struct DirectUI::ParserTools::ExprNode const *)",
    "BlurBitmap",
    "public: static int DirectUI::Schema::ThumbControlType",
    "protected: virtual long __thiscall DirectUI::CCTreeView::_OnItemChanged(struct tagTVITEMCHANGE const *)",
    "public: virtual long __stdcall DirectUI::ScrollItemProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnDestroy(void)",
    "public: long __thiscall DirectUI::TouchEditBase::SetMaxLength(int)",
    "public: virtual __thiscall DirectUI::DUIXmlParser::~DUIXmlParser(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateColor(unsigned long,unsigned long,unsigned char)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Browser::GetClassInfoPtr(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccItemTypeProp(void)",
    "protected: void __thiscall DirectUI::AnimationStrip::AdvanceFrame(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ForegroundProp(void)",
    "public: virtual long __thiscall DirectUI::DuiAccessible::Disconnect(void)",
    "public: virtual __thiscall DirectUI::Layout::~Layout(void)",
    "public: void __thiscall DirectUI::Element::FireEvent(struct DirectUI::Event *,bool,bool)",
    "public: static long __stdcall DirectUI::CCVScrollBar::Register(void)",
    "public: bool __thiscall DirectUI::TouchButton::GetPressed(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::TouchSlider::GetClassInfoPtr(void)",
    "public: long __thiscall DirectUI::CCTrackBar::SetRangeMin(int)",
    "public: bool __thiscall DirectUI::TouchEditBase::GetSyncContentWhileIMEComposing(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::PushButton::GetClassInfoW(void)",
    "private: static long __stdcall DirectUI::EventManager::HandleSelectedChange(struct IRawElementProviderSimple *,class DirectUI::Value *)",
    "public: class DirectUI::ResourceModuleHandles & __thiscall DirectUI::ResourceModuleHandles::operator=(class DirectUI::ResourceModuleHandles const &)",
    "public: static long __stdcall DirectUI::Viewer::Register(void)",
    "public: virtual __thiscall DirectUI::ValueProvider::~ValueProvider(void)",
    "public: int __thiscall DirectUI::TouchSelect::GetSelectionIndex(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::BackgroundProp(void)",
    "public: virtual bool __thiscall DirectUI::CCPushButton::OnNotify(unsigned int,unsigned int,long,long *)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetInteractionMode(int)",
    "protected: virtual struct tagSIZE __thiscall DirectUI::Element::_SelfLayoutUpdateDesiredSize(int,int,class DirectUI::Surface *)",
    "public: virtual long __stdcall DirectUI::GridItemProvider::get_ColumnSpan(int *)",
    "public: virtual long __thiscall DirectUI::Expando::Add(class DirectUI::Element * *,unsigned int)",
    "public: static int DirectUI::Schema::LocalizedControlTypeProperty",
    "public: virtual void __thiscall DirectUI::XBaby::OnEvent(struct DirectUI::Event *)",
    "public: int __thiscall DirectUI::TouchScrollViewer::GetManipulationHorizontalAlignment(void)",
    "public: long __thiscall DirectUI::Element::SetAccName(unsigned short const *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateString(unsigned short const *,struct HINSTANCE__ *)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::PatternProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: virtual long __thiscall DirectUI::XBaby::CreateStyleParser(class DirectUI::DUIXmlParser * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::MouseWithinProp(void)",
    "public: static long __stdcall DirectUI::ElementProviderManager::Init(void)",
    "const DirectUI::FillLayout::`vftable'",
    "public: class DirectUI::XProvider & __thiscall DirectUI::XProvider::operator=(class DirectUI::XProvider const &)",
    "public: virtual void __thiscall DirectUI::TouchEdit2::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "private: class DirectUI::Value * __thiscall DirectUI::Element::_GetComputedValue(struct DirectUI::PropertyInfo const *,struct DirectUI::UpdateCache *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::TooltipMaxWidthProp(void)",
    "const DirectUI::XElement::`vftable'{for `DirectUI::IXElementCP'}",
    "public: class DirectUI::DUIFactory & __thiscall DirectUI::DUIFactory::operator=(class DirectUI::DUIFactory const &)",
    "protected: long __thiscall DirectUI::ElementProxy::GetRuntimeId(struct tagSAFEARRAY * *)",
    "public: __thiscall DirectUI::Movie::Movie(class DirectUI::Movie const &)",
    "public: long __thiscall DirectUI::Progress::SetPosition(int)",
    "public: static long __stdcall DirectUI::AutoButton::Register(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Edit::PasswordCharacterProp(void)",
    "public: static int DirectUI::Schema::TextTextSelectionChangedEvent",
    "public: virtual unsigned long __stdcall DirectUI::ValueProvider::AddRef(void)",
    "public: class DirectUI::Pages * __thiscall DirectUI::Browser::GetPages(void)",
    "public: long __thiscall DirectUI::Element::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccDescProp(void)",
    "const DirectUI::ScrollBar::`vftable'{for `DirectUI::Element'}",
    "private: static struct DirectUI::IClassInfo * DirectUI::Selector::s_pClassInfo",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CheckBoxGlyph::GetClassInfoPtr(void)",
    "public: unsigned long __stdcall DirectUI::Element::Release(void)",
    "public: long __thiscall DirectUI::Viewer::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::BorderStyleProp(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetColorTrans(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCListBox::GetClassInfoPtr(void)",
    "public: long __thiscall DirectUI::Navigator::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: int __thiscall DirectUI::Movie::GetCompositingQuality(void)",
    "public: float __thiscall DirectUI::TouchScrollViewer::GetInertiaEndpointZoomLevel(float)",
    "public: virtual void __thiscall DirectUI::Browser::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: class DirectUI::FillLayout & __thiscall DirectUI::FillLayout::operator=(class DirectUI::FillLayout const &)",
    "public: long __thiscall DirectUI::TouchButton::SetTreatRightMouseButtonAsLeft(bool)",
    "protected: virtual void __thiscall DirectUI::ToggleProxy::Init(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::Navigator::SetTargetPage(unsigned short const *)",
    "public: class DirectUI::ModernProgressBarRangeValueProxy & __thiscall DirectUI::ModernProgressBarRangeValueProxy::operator=(class DirectUI::ModernProgressBarRangeValueProxy const &)",
    "public: static long __stdcall DirectUI::CCHScrollBar::Register(void)",
    "protected: long __thiscall DirectUI::Element::_RemoveLocalValue(struct DirectUI::PropertyInfo const *,bool)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::TouchRepeatButton::GetClassInfoPtr(void)",
    "protected: unsigned int __thiscall DirectUI::GridLayout::GetCurrentCols(int)",
    "public: struct DirectUI::NavReference & __thiscall DirectUI::NavReference::operator=(struct DirectUI::NavReference const &)",
    "public: virtual long __stdcall DirectUI::RangeValueProvider::get_IsReadOnly(int *)",
    "public: static int DirectUI::Schema::AutomationIdProperty",
    "const DirectUI::XElement::`vftable'{for `DirectUI::HWNDHost'}",
    "const DirectUI::ElementProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: void __thiscall DirectUI::Element::StopAnimation(unsigned int)",
    "public: long __thiscall DirectUI::Element::SetEnabled(bool)",
    "private: static long __stdcall DirectUI::EventManager::GetInt(struct tagVARIANT *,class DirectUI::Value *)",
    "private: long __thiscall DirectUI::ScrollProxy::SetPercent(class DirectUI::BaseScrollBar *,double)",
    "public: int __thiscall DirectUI::Edit::GetMaxLength(void)",
    "public: long __thiscall DirectUI::Element::SetFontSize(int)",
    "public: virtual long __stdcall DirectUI::InvokeProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: bool __thiscall DirectUI::TouchSlider::GetIsVertical(void)",
    "public: bool __thiscall DirectUI::Element::IsDestroyed(void)",
    "public: static long __stdcall DirectUI::TouchSwitch::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: long __thiscall DirectUI::Edit::SetMultiline(bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::PosInLayoutProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchSlider::IsShowOnOffFeedbackProp(void)",
    "public: __thiscall DirectUI::Edit::Edit(void)",
    "public: static class UID __stdcall DirectUI::PVLAnimation::NotifyComplete(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseRect(struct DirectUI::ParserTools::ExprNode const *,struct tagRECT *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateCursor(unsigned short const *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Macro::ExpandProp(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseStyleSheets(struct IXmlReader *)",
    "public: static void __stdcall DirectUI::CCProgressBar::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual void __thiscall DirectUI::TouchRepeatButton::FireClickEvent(unsigned int,unsigned int,enum DirectUI::TouchButton::ClickDevice,struct tagPOINT *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetUnavailable(void)",
    "public: bool __thiscall DirectUI::TouchScrollViewer::IsCrossfadeInProgress(void)",
    "public: static long __stdcall DirectUI::CCBaseCheckRadioButton::Register(void)",
    "public: static class UID __stdcall DirectUI::TouchSlider::MouseOrPointerReleased(void)",
    "public: static void __stdcall DirectUI::CCCheckBox::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual bool __thiscall DirectUI::Combobox::OnNotify(unsigned int,unsigned int,long,long *)",
    "private: static long __stdcall DirectUI::EventManager::HandleVisibilityChange(class DirectUI::Element *,unsigned int)",
    "public: static int DirectUI::Schema::ToolTipClosedEvent",
    "public: __thiscall DirectUI::RowLayout::RowLayout(class DirectUI::RowLayout const &)",
    "public: virtual void __thiscall DirectUI::DialogElement::OnGetDlgCode(struct tagMSG *,long *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::RichText::BaselineProp(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseFunction(unsigned short const *,struct DirectUI::ParserTools::ExprNode const *,union DirectUI::DUIXmlParser::ParsedArg *,unsigned int,char const *)",
    "protected: static struct DirectUI::DUIXmlParser::FunctionDefinition const * const DirectUI::DUIXmlParser::s_fdGraphic",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::TouchScrollViewer::GetClassInfoW(void)",
    "public: int __thiscall DirectUI::ModernProgressBar::GetState(void)",
    "public: static struct _RTL_CRITICAL_SECTION DirectUI::ElementProviderManager::g_cs",
    "public: __thiscall DirectUI::Page::Page(class DirectUI::Page const &)",
    "public: long __thiscall DirectUI::Element::AddListener(struct DirectUI::IElementListener *)",
    "private: void __thiscall DirectUI::HWNDHost::UnvirtualizePosition(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::AccessibleButton::GetClassInfoPtr(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accChild(struct tagVARIANT,struct IDispatch * *)",
    "public: virtual bool __thiscall DirectUI::ExpandoButtonGlyph::OnLostDialogFocus(struct DirectUI::IDialogElement *)",
    "public: static long __stdcall DirectUI::TouchSelect::Register(void)",
    "const DirectUI::DuiAccessible::`vftable'{for `IOleWindow'}",
    "public: long __thiscall DirectUI::Viewer::SetXScrollable(bool)",
    "private: long __thiscall DirectUI::BrowserSelectionProxy::GetSelection(struct tagSAFEARRAY * *)",
    "StopMessagePump",
    "public: __thiscall DirectUI::ISBLeak::ISBLeak(struct DirectUI::ISBLeak const &)",
    "public: __thiscall DirectUI::SelectionProvider::SelectionProvider(void)",
    "public: static void __stdcall DirectUI::Edit::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnNoChildWithShortcutFound(struct DirectUI::KeyboardEvent *)",
    "public: long __thiscall DirectUI::CheckBoxGlyph::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: static class DirectUI::GridProxy * __stdcall DirectUI::GridProxy::Create(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::Clipper::Register(void)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetSuppressSetContact(bool)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::HWNDElement::GetClassInfoPtr(void)",
    "public: static class UID __stdcall DirectUI::AutoButton::Toggle(void)",
    "public: virtual void __thiscall DirectUI::Edit::OnInput(struct DirectUI::InputEvent *)",
    "public: __thiscall DirectUI::Viewer::Viewer(void)",
    "public: static int __stdcall DirectUI::Element::_MarkElementForLayout(class DirectUI::Element *,unsigned int)",
    "public: long __thiscall DirectUI::CCBaseScrollBar::SetTracking(bool)",
    "protected: long __thiscall DirectUI::ElementProxy::GetProviderOptions(enum ProviderOptions *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCBaseScrollBar::GetClassInfoPtr(void)",
    "public: static unsigned int __stdcall DirectUI::Surface::GetSurfaceType(enum DirectUI::Surface::EType)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::accSelect(long,struct tagVARIANT)",
    "public: long __thiscall DirectUI::DialogElement::SetRegisteredDefaultButton(class DirectUI::Element *)",
    "public: bool __thiscall DirectUI::Element::HasPVLAnimationState(unsigned int)",
    "public: int __thiscall DirectUI::Viewer::GetXOffset(void)",
    "public: bool __thiscall DirectUI::BaseScrollBar::OnPageChanging(class DirectUI::Value *)",
    "public: class DirectUI::Surface & __thiscall DirectUI::Surface::operator=(class DirectUI::Surface const &)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetSheetNull(void)",
    "public: bool __thiscall DirectUI::Movie::GetDrawOutlines(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchEdit2::ShowClearButtonMinWidthProp(void)",
    "public: virtual __thiscall DirectUI::ElementProvider::~ElementProvider(void)",
    "public: virtual __thiscall DirectUI::TableProvider::~TableProvider(void)",
    "public: static long __stdcall DirectUI::ExpandoButtonGlyph::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::Proxy::`vftable'",
    "public: static long __stdcall DirectUI::Expandable::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "private: long __thiscall DirectUI::TaskPage::LoadComCtl32(void)",
    "public: __thiscall DirectUI::FontCache::FontCache(void)",
    "public: long __thiscall DirectUI::TouchEdit2::SetCaretPosition(long)",
    "public: virtual long __thiscall DirectUI::TableItemProxy::DoMethod(int,char *)",
    "public: virtual int __stdcall DirectUI::XProvider::ClickDefaultButton(void)",
    "public: virtual long __stdcall DirectUI::RangeValueProvider::get_SmallChange(double *)",
    "public: virtual long __thiscall DirectUI::TouchEditBase::GetTextServices(class ITextServices * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_GetPropertyForAttribute(struct IXmlReader *,struct DirectUI::IClassInfo *,struct DirectUI::PropertyInfo const * *)",
    "public: static int DirectUI::Schema::Grid_RowCount_Property",
    "public: virtual struct tagSIZE __thiscall DirectUI::FlowLayout::UpdateDesiredSize(class DirectUI::Element *,int,int,class DirectUI::Surface *)",
    "public: static void __stdcall DirectUI::CheckBoxGlyph::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::Clipper::_SelfLayoutUpdateDesiredSize(int,int,class DirectUI::Surface *)",
    "public: static long __stdcall DirectUI::HWNDElement::Register(void)",
    "public: long __thiscall DirectUI::SelectorNoDefault::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: int __thiscall DirectUI::Element::GetAnimation(void)",
    "private: long __thiscall DirectUI::Element::_PreSourceChange(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::AnimationStrip::PlayProp(void)",
    "public: virtual void __thiscall DirectUI::Progress::Paint(struct HDC__ *,struct tagRECT const *,struct tagRECT const *,struct tagRECT *,struct tagRECT *)",
    "public: static int DirectUI::Schema::AcceleratorKeyProperty",
    "public: virtual struct tagSIZE __thiscall DirectUI::RowLayout::UpdateDesiredSize(class DirectUI::Element *,int,int,class DirectUI::Surface *)",
    "public: void __thiscall DirectUI::Element::PaintFocusRect(struct HDC__ *,struct tagRECT const *,struct tagRECT const *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::WidthProp(void)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetScrollControlHost(class DirectUI::Element *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::TextGraphic::GetClassInfoPtr(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCCommandLink::s_pClassInfo",
    "public: bool __thiscall DirectUI::Element::IsDefaultCursor(void)",
    "const DirectUI::CCProgressBar::`vftable'",
    "const DirectUI::HWNDElementProvider::`vftable'{for `IRawElementProviderAdviseEvents'}",
    "public: virtual long __thiscall DirectUI::ModernProgressBarRangeValueProxy::DoMethod(int,char *)",
    "public: long __thiscall DirectUI::Element::Destroy(bool)",
    "public: void __thiscall DirectUI::Element::_UpdateLayoutSize(int,int)",
    "const DirectUI::CCBaseScrollBar::`vftable'{for `DirectUI::BaseScrollBar'}",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchCheckBox::ToggleOnClickProp(void)",
    "public: void __thiscall DirectUI::DialogElementCore::UpdateChildFocus(class DirectUI::Element *,class DirectUI::Element *)",
    "public: __thiscall DirectUI::CallstackTracker::~CallstackTracker(void)",
    "public: virtual long __thiscall DirectUI::TouchButton::DefaultAction(void)",
    "public: __thiscall DirectUI::AccessibleButton::AccessibleButton(void)",
    "public: static int DirectUI::Schema::SelectionItem_SelectionContainer_Property",
    "public: static long __stdcall DirectUI::ModernProgressRing::Register(void)",
    "public: static int DirectUI::Schema::MenuBarControlType",
    "public: virtual void __thiscall DirectUI::CCPushButton::OnInput(struct DirectUI::InputEvent *)",
    "public: __thiscall DirectUI::CCBaseCheckRadioButton::CCBaseCheckRadioButton(class DirectUI::CCBaseCheckRadioButton const &)",
    "public: virtual __thiscall DirectUI::RepeatButton::~RepeatButton(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchEditBase::KeyboardNavigationCaptureProp(void)",
    "public: long __thiscall DirectUI::TouchCommandButton::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: static void __stdcall DirectUI::Clipper::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static long __stdcall DirectUI::TouchButton::Register(void)",
    "private: void __thiscall DirectUI::Element::_GetBuriedSheetDependencies(struct DirectUI::PropertyInfo const *,class DirectUI::Element *,struct DirectUI::DepRecs *,class DirectUI::DeferCycle *,long *)",
    "public: bool __thiscall DirectUI::CCPushButton::GetHasShield(void)",
    "public: void __thiscall DirectUI::CCCommandLink::`default constructor closure'(void)",
    "public: bool __thiscall DirectUI::TouchSelect::IsPopupOpen(void)",
    "public: static long __stdcall DirectUI::StyledScrollViewer::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual __thiscall DirectUI::TouchCheckBoxGlyph::~TouchCheckBoxGlyph(void)",
    "protected: void __thiscall DirectUI::Proxy::Invoke(unsigned int,void *)",
    "public: static int DirectUI::Schema::RangeValue_SmallChange_Property",
    "public: static long __stdcall DirectUI::RowLayout::Create(int,unsigned int,unsigned int,class DirectUI::Layout * *)",
    "public: bool __thiscall DirectUI::Element::GetClickablePoint(struct tagPOINT *)",
    "public: long __thiscall DirectUI::TouchEdit2::SetInnerBorderThickness(int,int,int,int)",
    "public: static long __stdcall DirectUI::Page::Register(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCListBox::s_pClassInfo",
    "public: static int DirectUI::Schema::HeaderControlType",
    "public: virtual void __thiscall DirectUI::XBaby::OnThemeChanged(struct DirectUI::ThemeChangedEvent *)",
    "public: static class UID __stdcall DirectUI::TouchScrollViewer::ManipulationStarting(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCPushButton::OverrideButtonBackgroundProp(void)",
    "private: class DirectUI::Value * __thiscall DirectUI::Element::_GetSpecifiedValue(struct DirectUI::PropertyInfo const *,struct DirectUI::UpdateCache *)",
    "public: __thiscall DirectUI::Viewer::Viewer(class DirectUI::Viewer const &)",
    "public: class DirectUI::Repeater & __thiscall DirectUI::Repeater::operator=(class DirectUI::Repeater const &)",
    "public: long __thiscall DirectUI::Element::SetValue(struct DirectUI::PropertyInfo const * (__stdcall*)(void),int,class DirectUI::Value *)",
    "public: __thiscall DirectUI::IDataEngine::IDataEngine(void)",
    "public: static class DirectUI::ValueProxy * __stdcall DirectUI::ValueProxy::Create(class DirectUI::Element *)",
    "public: virtual __thiscall DirectUI::ExpandoButtonGlyph::~ExpandoButtonGlyph(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCProgressBar::GetClassInfoPtr(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::YProp(void)",
    "protected: virtual long __thiscall DirectUI::TaskPage::OnReset(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCBase::s_pClassInfo",
    "public: virtual long __stdcall DirectUI::ElementProvider::GetEmbeddedFragmentRoots(struct tagSAFEARRAY * *)",
    "public: long __thiscall DirectUI::TouchHWNDElement::HideTouchTooltip(void)",
    "public: void __thiscall DirectUI::XElement::FreeProvider(void)",
    "public: virtual void __thiscall DirectUI::TouchButton::FireClickEvent(unsigned int,unsigned int,enum DirectUI::TouchButton::ClickDevice,struct tagPOINT *)",
    "public: __thiscall DirectUI::SelectionItemProvider::SelectionItemProvider(void)",
    "public: static long __stdcall DirectUI::PText::Register(void)",
    "public: virtual void __thiscall DirectUI::ClassInfoBase::AddRef(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetLayoutNull(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::FontQualityProp(void)",
    "public: long __thiscall DirectUI::ExpandoButtonGlyph::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: virtual void __thiscall DirectUI::TouchHWNDElement::ActivateTooltip(class DirectUI::Element *,unsigned long)",
    "public: static long __stdcall DirectUI::Thumb::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual unsigned short const * __thiscall DirectUI::Edit::GetContentStringAsDisplayed(class DirectUI::Value * *)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnGroupChanged(int,bool)",
    "public: virtual __thiscall DirectUI::ExpandCollapseProvider::~ExpandCollapseProvider(void)",
    "public: __thiscall DirectUI::StyledScrollViewer::StyledScrollViewer(void)",
    "public: static void __stdcall DirectUI::RadioButtonGlyph::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "private: static bool __stdcall DirectUI::Element::s_HandleDUIEventMessage(class DirectUI::Element *,struct EventMsg *)",
    "public: virtual __thiscall DirectUI::Edit::~Edit(void)",
    "public: virtual long __stdcall DirectUI::ToggleProvider::get_ToggleState(enum ToggleState *)",
    "const DirectUI::CCBaseScrollBar::`vftable'{for `DirectUI::CCBase'}",
    "public: int __thiscall DirectUI::ModernProgressBar::GetMaximum(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::TouchCheckBox::GetClassInfoW(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::ModernProgressBar::GetClassInfoPtr(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::LayoutPosProp(void)",
    "public: class DirectUI::GridItemProxy & __thiscall DirectUI::GridItemProxy::operator=(class DirectUI::GridItemProxy const &)",
    "public: long __thiscall DirectUI::Viewer::SetYScrollable(bool)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::Element::GetAdjacent(class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: void __thiscall DirectUI::NativeHWNDHost::SyncDestroyWindow(void)",
    "public: class DirectUI::LinkedList & __thiscall DirectUI::LinkedList::operator=(class DirectUI::LinkedList const &)",
    "public: bool __thiscall DirectUI::Element::HasPadding(void)",
    "public: __thiscall DirectUI::IXProviderCP::IXProviderCP(class DirectUI::IXProviderCP const &)",
    "public: static int DirectUI::Schema::GridItem_Parent_Property",
    "public: virtual __thiscall DirectUI::TouchHyperLink::~TouchHyperLink(void)",
    "public: struct DirectUI::Fill const * __thiscall DirectUI::Element::GetEdgeHighlightColor(class DirectUI::Value * *)",
    "public: virtual long __thiscall DirectUI::CCBaseScrollBar::SetMaximum(int)",
    "public: bool __thiscall DirectUI::Button::GetCaptured(void)",
    "public: class DirectUI::Element * __thiscall DirectUI::Browser::GetCurrentPage(void)",
    "private: static struct DirectUI::CallstackTracker::IMGHLPFN_LOAD * DirectUI::CallstackTracker::s_ImageHlpFuncList",
    "private: static struct DirectUI::IClassInfo * DirectUI::Page::s_pClassInfo",
    "public: virtual __thiscall DirectUI::Macro::~Macro(void)",
    "private: void __thiscall DirectUI::HWNDHost::SyncColorsAndFonts(void)",
    "protected: class DirectUI::Element * __thiscall DirectUI::HWNDHost::GetBackgroundOwner(void)",
    "public: long __thiscall DirectUI::NativeHWNDHost::Initialize(unsigned short const *,unsigned short const *,struct HWND__ *,struct HICON__ *,int,int,int,int,int,int,struct HINSTANCE__ *,unsigned int)",
    "public: virtual long __thiscall DirectUI::CCBaseScrollBar::SetPage(int)",
    "public: void __thiscall DirectUI::BaseScrollBar::OnMaximumChanged(class DirectUI::Value *)",
    "public: __thiscall DirectUI::AutoVariant::AutoVariant(void)",
    "public: int __thiscall DirectUI::Value::GetRefCount(void)const",
    "const DirectUI::GridProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: virtual __thiscall DirectUI::VerticalFlowLayout::~VerticalFlowLayout(void)",
    "public: virtual __thiscall DirectUI::TouchSelectItem::~TouchSelectItem(void)",
    "public: void __thiscall DirectUI::CCAVI::Stop(void)",
    "public: __thiscall DirectUI::ResourceModuleHandles::~ResourceModuleHandles(void)",
    "public: void __thiscall DirectUI::LinkedList::Add(class DirectUI::LinkedListNode *)",
    "public: __thiscall DirectUI::AutoThread::~AutoThread(void)",
    "public: __thiscall DirectUI::ElementProxy::ElementProxy(void)",
    "public: long __thiscall DirectUI::TouchScrollViewer::ResetManipulations(void)",
    "public: virtual long __thiscall DirectUI::TouchEditBase::GetTextDocument(struct ITextDocument * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseLayoutValue(struct DirectUI::ParserTools::ExprNode const *)",
    "public: class DirectUI::Navigator & __thiscall DirectUI::Navigator::operator=(class DirectUI::Navigator const &)",
    "public: static long __stdcall DirectUI::ScrollBar::Register(void)",
    "public: class DirectUI::EventManager & __thiscall DirectUI::EventManager::operator=(class DirectUI::EventManager const &)",
    "public: virtual long __stdcall DirectUI::ValueProvider::get_IsReadOnly(int *)",
    "public: virtual void __thiscall DirectUI::BaseScrollBar::LineDown(unsigned int)",
    "const DirectUI::IDataEngine::`vftable'",
    "private: long __thiscall DirectUI::ScrollProxy::SetScrollPercent(double,double)",
    "public: virtual void __thiscall DirectUI::VerticalFlowLayout::DoLayout(class DirectUI::Element *,int,int)",
    "private: long __thiscall DirectUI::AnimationStrip::LoadCommonControlExports(void)",
    "public: void __thiscall DirectUI::HWNDElement::SetParentSizeControl(bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccItemStatusProp(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Browser::GetClassInfoW(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ScrollBar::MinimumProp(void)",
    "public: __thiscall DirectUI::RadioButtonGlyph::RadioButtonGlyph(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::BaseScrollViewer::XOffsetProp(void)",
    "public: __thiscall DirectUI::UnknownElement::UnknownElement(void)",
    "public: static class UID __stdcall DirectUI::TouchScrollViewer::UpdateView(void)",
    "public: long __thiscall DirectUI::TouchScrollViewer::ZoomToRect(struct tagRECT const *,bool)",
    "public: virtual long __stdcall DirectUI::Element::QueryInterface(struct _GUID const &,void * *)",
    "public: long __thiscall DirectUI::Element::GetRootRelativeBounds(struct tagRECT *)",
    "public: int __thiscall DirectUI::Edit::GetPasswordCharacter(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::PixelOffsetModeProp(void)",
    "public: virtual long __stdcall DirectUI::ElementProvider::AdviseEventRemoved(int,struct tagSAFEARRAY *)",
    "public: __thiscall DirectUI::TouchScrollBar::TouchScrollBar(void)",
    "public: virtual long __thiscall DirectUI::TouchHWNDElement::WndProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "ProcessAlphaBitmapI",
    "public: virtual void __thiscall DirectUI::CCBase::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "private: static class DirectUI::UiaArray * DirectUI::ElementProviderManager::g_pArrayPprv",
    "public: virtual bool __thiscall DirectUI::CCRadioButton::OnNotify(unsigned int,unsigned int,long,long *)",
    "public: __thiscall DirectUI::Movie::Movie(void)",
    "public: static int DirectUI::Schema::WindowWindowOpenedEvent",
    "public: struct HDC__ * __thiscall DirectUI::DCSurface::GetHDC(void)",
    "private: long __thiscall DirectUI::ValueProxy::SetValue(unsigned short const *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ScrollBar::ProportionalProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::RepeatProp(void)",
    "public: virtual void __thiscall DirectUI::CCTrackBar::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateEncodedString(unsigned short const *)",
    "public: virtual __thiscall DirectUI::Element::~Element(void)",
    "public: virtual void __thiscall DirectUI::CCCommandLink::OnSelectedPropertyChanged(void)",
    "const DirectUI::Macro::`vftable'",
    "protected: long __thiscall DirectUI::XBaby::Initialize(class DirectUI::IXElementCP *,class DirectUI::XProvider *,struct HWND__ *,class DirectUI::Element *,unsigned long *)",
    "public: static long __stdcall DirectUI::CCProgressBar::Register(void)",
    "public: __thiscall DirectUI::TaskPage::TaskPage(class DirectUI::TaskPage const &)",
    "public: static int DirectUI::Schema::AsyncContentLoadedEvent",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchEditBase::TextModeProp(void)",
    "public: static struct _RTL_CRITICAL_SECTION * __stdcall DirectUI::Element::GetFactoryLock(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accHelp(struct tagVARIANT,unsigned short * *)",
    "public: virtual long __stdcall DirectUI::XProvider::GetDesiredSize(int,int,struct tagSIZE *)",
    "const DirectUI::Edit::`vftable'",
    "public: int __thiscall DirectUI::Progress::GetMaximum(void)",
    "public: long __thiscall DirectUI::Element::SetForegroundColor(unsigned long,unsigned long,unsigned char)",
    "public: static long __stdcall DirectUI::NativeHWNDHost::Create(unsigned short const *,unsigned short const *,struct HWND__ *,struct HICON__ *,int,int,int,int,int,int,struct HINSTANCE__ *,unsigned int,class DirectUI::NativeHWNDHost * *)",
    "public: struct tagSIZE const * __thiscall DirectUI::Element::GetExtent(class DirectUI::Value * *)",
    "public: static int DirectUI::Schema::ToolBarControlType",
    "public: void __thiscall DirectUI::Element::RemoveListener(struct DirectUI::IElementListener *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseMagnitudeFloat(unsigned short const *,float *)",
    "public: __thiscall DirectUI::RangeValueProvider::RangeValueProvider(void)",
    "public: __thiscall DirectUI::Element::Element(void)",
    "public: virtual long __stdcall DirectUI::GridItemProvider::get_Column(int *)",
    "public: static int DirectUI::Schema::CustomControlType",
    "public: static long __stdcall DirectUI::AccessibleButton::Register(void)",
    "protected: virtual void __thiscall DirectUI::SelectorSelectionItemProxy::Init(class DirectUI::Element *)",
    "const DirectUI::ClassInfoBase::`vftable'",
    "public: bool __thiscall DirectUI::TouchSlider::GetIsShowOnOffFeedback(void)",
    "public: virtual int __thiscall DirectUI::CCBaseScrollBar::GetPage(void)",
    "public: static void __stdcall DirectUI::CCListBox::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual unsigned long __stdcall DirectUI::DuiAccessible::Release(void)",
    "const DirectUI::ValueProvider::`vftable'",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetBoolTrue(void)",
    "public: long __thiscall DirectUI::Element::QueueDefaultAction(void)",
    "public: static class UID __stdcall DirectUI::PVLAnimation::TriggeredAnimationComplete(void)",
    "const DirectUI::ExpandCollapseProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::StyledScrollViewer::GetClassInfoW(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateGraphic(struct ISharedBitmap *,unsigned char,unsigned int)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_RecordElementLayout(struct IXmlReader *,unsigned short const *)",
    "public: long __thiscall DirectUI::Pages::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::MouseFocusedProp(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Clipper::GetClassInfoW(void)",
    "public: virtual void __thiscall DirectUI::TouchHWNDElement::RemoveTooltip(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::SelectorNoDefault::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual struct HWND__ * __thiscall DirectUI::Combobox::CreateHWND(struct HWND__ *)",
    "public: bool __thiscall DirectUI::ModernProgressBar::IsActivityOccuring(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccessibleProp(void)",
    "const DirectUI::ScrollProxy::`vftable'",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::QueryService(struct _GUID const &,struct _GUID const &,void * *)",
    "private: long __thiscall DirectUI::ScrollProxy::GetViewer(class DirectUI::Viewer * *)",
    "public: static long __stdcall DirectUI::XBaby::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual bool __thiscall DirectUI::DialogElement::ClickDefaultButton(void)",
    "public: __thiscall DirectUI::TableItemProvider::TableItemProvider(void)",
    "public: virtual void __thiscall DirectUI::Clipper::_SelfLayoutDoLayout(int,int)",
    "public: static long __stdcall DirectUI::TouchCommandButton::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: int __thiscall DirectUI::Movie::GetSmoothingMode(void)",
    "public: static int DirectUI::Schema::StructureChangedEvent",
    "public: long __thiscall DirectUI::Element::SetBorderStdColor(int)",
    "public: class DirectUI::DeferCycle * __thiscall DirectUI::Element::GetDeferObject(void)",
    "public: bool __thiscall DirectUI::ModernProgressBar::IsSmoothFillAnimation(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchSwitch::OffTextProp(void)",
    "public: void __thiscall DirectUI::CCBase::SetNotifyHandler(int (__stdcall*)(unsigned int,unsigned int,long,long *,void *),void *)",
    "public: long __thiscall DirectUI::RefPointElement::SetReferencePoint(int,int)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseTheme(struct DirectUI::ParserTools::ExprNode const *,void * *)",
    "public: long __thiscall DirectUI::Element::SetSelected(bool)",
    "public: long __thiscall DirectUI::DUIXmlParser::SetPreprocessedXML(unsigned short const *,struct HINSTANCE__ *,struct HINSTANCE__ *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseLiteral(struct DirectUI::ParserTools::ExprNode const *,unsigned short const * *)",
    "public: virtual long __stdcall DirectUI::GridProvider::get_ColumnCount(int *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Progress::s_pClassInfo",
    "public: long __thiscall DirectUI::NativeHWNDHost::Initialize(unsigned short const *,struct HWND__ *,struct HICON__ *,int,int,int,int,int,int,unsigned int)",
    "public: void __thiscall DirectUI::TouchSwitch::SetToggleSwitchText(unsigned short const *)",
    "const DirectUI::RangeValueProvider::`vftable'{for `DirectUI::IProvider'}",
    "protected: long __thiscall CSafeElementProxy::Initialize(class DirectUI::Element *)",
    "public: class DirectUI::Value * __thiscall DirectUI::Element::GetValue(struct DirectUI::PropertyInfo const *,int,struct DirectUI::UpdateCache *)",
    "public: bool __thiscall DirectUI::Element::GetSelected(void)",
    "protected: unsigned int __thiscall DirectUI::GridLayout::GetCurrentRows(int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchEditBase::MaxLengthProp(void)",
    "public: void __thiscall DirectUI::Element::SetLayoutCompletionNotify(bool)",
    "public: void __thiscall DirectUI::BaseScrollBar::OnPageChanged(class DirectUI::Value *)",
    "public: long __thiscall DirectUI::Element::SetAccDesc(unsigned short const *)",
    "public: void __thiscall DirectUI::Element::_EndOptimizedLayoutQ(void)",
    "public: long __thiscall DirectUI::HWNDElementAccessible::Initialize(class DirectUI::HWNDElement *)",
    "public: static long __stdcall DirectUI::FillLayout::Create(int,int *,class DirectUI::Value * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::DirectionProp(void)",
    "public: virtual long __thiscall DirectUI::CCBaseScrollBar::SetMinimum(int)",
    "public: static long __stdcall DirectUI::HWNDHost::Create(unsigned int,unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::HWNDElementProvider::`vftable'{for `IRawElementProviderFragment'}",
    "public: int __thiscall DirectUI::SafeArrayAccessor::Count(void)",
    "public: long __thiscall DirectUI::DUIFactory::LoadFromResource(struct HINSTANCE__ *,unsigned short const *,unsigned short const *,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *,unsigned short const *)",
    "const DirectUI::ScrollViewer::`vftable'{for `DirectUI::IElementListener'}",
    "public: static long __stdcall DirectUI::CCProgressBar::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::TouchHWNDElement::GetClassInfoPtr(void)",
    "const DirectUI::RangeValueProvider::`vftable'",
    "public: long __thiscall DirectUI::Movie::SetSmoothingMode(int)",
    "const DirectUI::HWNDHost::`vftable'",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::CompositedTextProp(void)",
    "public: enum DirectUI::TouchEditFilteredKeyComboFlags __thiscall DirectUI::TouchEditBase::GetIgnoredKeyCombos(void)",
    "protected: virtual void __thiscall DirectUI::ProviderProxy::Init(class DirectUI::Element *)",
    "public: void __thiscall DirectUI::DialogElementCore::Initialize(struct DirectUI::IDialogElement *,struct DirectUI::IElementListener *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCProgressBar::GetClassInfoW(void)",
    "public: long __thiscall DirectUI::DialogElement::SetHandleEnterKey(bool)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParsePointValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::PushButton::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: long __thiscall DirectUI::Expandable::SetExpanded(bool)",
    "public: virtual void __thiscall DirectUI::PatternProvider::Init(class DirectUI::ElementProvider *)",
    "public: __thiscall DirectUI::SelectorSelectionProxy::SelectorSelectionProxy(void)",
    "public: virtual void __thiscall DirectUI::Element::SetKeyFocus(void)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::ValueProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "protected: virtual void __thiscall DirectUI::Element::_SelfLayoutDoLayout(int,int)",
    "public: long __thiscall DirectUI::Element::SetOverhang(bool)",
    "public: static long __stdcall DirectUI::InvokeManager::Init(void)",
    "public: long __thiscall DirectUI::Progress::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: static void __stdcall DirectUI::Expandable::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: long __thiscall DirectUI::Viewer::SetXOffset(int)",
    "public: virtual long __stdcall DirectUI::SelectionProvider::GetSelection(struct tagSAFEARRAY * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseIconGraphic(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: long __thiscall DirectUI::Element::SetSheet(class DirectUI::StyleSheet *)",
    "private: static long __stdcall DirectUI::Schema::LookupPropertyInfos(void)",
    "const DirectUI::PText::`vftable'",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AlphaProp(void)",
    "const DirectUI::Expandable::`vftable'",
    "const DirectUI::DCSurface::`vftable'",
    "public: bool __thiscall DirectUI::TouchScrollViewer::GetMouseWithinHorizontalScrollRegion(void)",
    "public: class DirectUI::AnimationStrip & __thiscall DirectUI::AnimationStrip::operator=(class DirectUI::AnimationStrip const &)",
    "public: virtual int __thiscall DirectUI::ScrollBar::GetPosition(void)",
    "public: virtual void __thiscall DirectUI::Layout::DoLayout(class DirectUI::Element *,int,int)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::accLocation(long *,long *,long *,long *,struct tagVARIANT)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::PushButton::GetClassInfoPtr(void)",
    "public: class DirectUI::SelectorSelectionProxy & __thiscall DirectUI::SelectorSelectionProxy::operator=(class DirectUI::SelectorSelectionProxy const &)",
    "public: static long __stdcall DirectUI::ElementWithHWND::Register(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchSlider::IsPressedProp(void)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accHelp(struct tagVARIANT,unsigned short * *)",
    "public: long __thiscall DirectUI::BaseScrollViewer::SetPinning(int)",
    "public: static bool __stdcall DirectUI::TableItemProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: __thiscall DirectUI::NineGridLayout::NineGridLayout(class DirectUI::NineGridLayout const &)",
    "public: __thiscall DirectUI::ScrollProxy::ScrollProxy(class DirectUI::ScrollProxy const &)",
    "protected: void __thiscall DirectUI::BaseScrollViewer::FireAnimationChangeEvent(bool)",
    "public: bool __thiscall DirectUI::Viewer::GetYScrollable(void)",
    "public: static int DirectUI::Schema::Value_Value_Property",
    "public: struct _TREEITEM * __thiscall DirectUI::CCTreeView::InsertItem(struct tagTVINSERTSTRUCTW const *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchScrollViewer::SnapOffsetYProp(void)",
    "public: virtual void __thiscall DirectUI::TouchEdit2::OnHosted(class DirectUI::Element *)",
    "public: void __thiscall DirectUI::AccessibleButton::Recalc(void)",
    "public: virtual void __thiscall DirectUI::ClassInfoBase::AssertPIZeroRef(void)const",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::RepeatButton::GetClassInfoPtr(void)",
    "public: static long __stdcall DirectUI::XElement::Register(void)",
    "private: void __thiscall DirectUI::Element::_InheritProperties(void)",
    "public: class DirectUI::Thumb & __thiscall DirectUI::Thumb::operator=(class DirectUI::Thumb const &)",
    "public: class DirectUI::ToggleProxy & __thiscall DirectUI::ToggleProxy::operator=(class DirectUI::ToggleProxy const &)",
    "public: virtual long __thiscall DirectUI::ScrollBarRangeValueProxy::DoMethod(int,char *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::TouchSelectItem::GetClassInfoW(void)",
    "protected: struct tagSIZE __thiscall DirectUI::VerticalFlowLayout::BuildCacheInfo(class DirectUI::Element *,int,int,class DirectUI::Surface *,bool)",
    "public: virtual __thiscall DirectUI::GridItemProvider::~GridItemProvider(void)",
    "public: virtual int __thiscall DirectUI::CCBaseScrollBar::GetMaximum(void)",
    "public: long __thiscall DirectUI::TaskPage::DUICreatePropertySheetPage(struct HINSTANCE__ *)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::DialogElement::GetDefaultButton(void)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetSnapOffsetY(float)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateFill(struct DirectUI::Fill const &)",
    "public: long __thiscall DirectUI::Movie::SetPlayAllFramesMode(bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::InterpolationModeProp(void)",
    "public: virtual bool __thiscall DirectUI::XElement::OnSysChar(unsigned short)",
    "public: long __thiscall DirectUI::TouchEditBase::SetReadOnly(bool)",
    "public: virtual void __thiscall DirectUI::RichText::Paint(struct HDC__ *,struct tagRECT const *,struct tagRECT const *,struct tagRECT *,struct tagRECT *)",
    "public: class DirectUI::ExpandoButtonGlyph & __thiscall DirectUI::ExpandoButtonGlyph::operator=(class DirectUI::ExpandoButtonGlyph const &)",
    "public: void __thiscall DirectUI::Element::StartDefer(unsigned long *)",
    "protected: virtual void __thiscall DirectUI::ScrollProxy::Init(class DirectUI::Element *)",
    "public: __thiscall DirectUI::CheckBoxGlyph::CheckBoxGlyph(class DirectUI::CheckBoxGlyph const &)",
    "public: virtual long __thiscall DirectUI::ScrollBar::SetMinimum(int)",
    "public: struct tagSIZE const * __thiscall DirectUI::Element::GetMinSize(class DirectUI::Value * *)",
    "public: static long __stdcall DirectUI::ItemList::Register(void)",
    "public: virtual void __thiscall DirectUI::TouchCommandButton::Paint(struct HDC__ *,struct tagRECT const *,struct tagRECT const *,struct tagRECT *,struct tagRECT *)",
    "public: virtual void __thiscall DirectUI::Browser::OnEvent(struct DirectUI::Event *)",
    "public: void __thiscall DirectUI::DialogElementCore::OnInput(struct DirectUI::InputEvent *)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetAccDesc(class DirectUI::Value * *)",
    "private: static void * DirectUI::CallstackTracker::s_hProcess",
    "public: void __thiscall DirectUI::TouchSlider::CancelCurrentDrag(void)",
    "public: virtual long __stdcall DirectUI::GridProvider::GetItem(int,int,struct IRawElementProviderSimple * *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::GridLayout::UpdateDesiredSize(class DirectUI::Element *,int,int,class DirectUI::Surface *)",
    "public: virtual long __stdcall DirectUI::ScrollProvider::get_HorizontallyScrollable(int *)",
    "public: __thiscall DirectUI::RefPointElement::RefPointElement(class DirectUI::RefPointElement const &)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Movie::s_pClassInfo",
    "public: static void __stdcall DirectUI::ElementProviderManager::Close(void)",
    "private: static struct HINSTANCE__ * DirectUI::CallstackTracker::s_hinstImageHlp",
    "public: __thiscall DirectUI::BaseScrollBar::BaseScrollBar(class DirectUI::BaseScrollBar const &)",
    "protected: void __thiscall DirectUI::AnimationStrip::OnAction(struct GMA_ACTIONINFO *)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetZoomMinimum(float)",
    "protected: static struct DirectUI::DUIXmlParser::FunctionDefinition const * const DirectUI::DUIXmlParser::s_fdFill",
    "public: virtual long __stdcall DirectUI::DuiAccessible::ContextSensitiveHelp(int)",
    "public: static long __stdcall DirectUI::BorderLayout::Create(int,int *,class DirectUI::Value * *)",
    "public: static long __stdcall DirectUI::RepeatButton::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual long __stdcall DirectUI::SelectionItemProvider::Select(void)",
    "public: static int DirectUI::Schema::SpinnerControlType",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::ModernProgressRing::GetClassInfoW(void)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::ShellBorderLayout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "protected: virtual void __thiscall DirectUI::ScrollBarRangeValueProxy::Init(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::CCTreeView::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::InvokeProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: static int DirectUI::Schema::ExpandCollapse_ExpandCollapseState_Property",
    "public: virtual long __thiscall DirectUI::ExpandCollapseProxy::DoMethod(int,char *)",
    "public: struct tagRECT const * __thiscall DirectUI::Element::GetEdgeHighlightThickness(class DirectUI::Value * *)",
    "private: long __thiscall DirectUI::GridProxy::GetRowCount(int *)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::DialogElement::GetKeyFocusedElement(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_SetupParserState(struct HINSTANCE__ *,struct HINSTANCE__ *)",
    "public: bool __thiscall DirectUI::Element::NeedsDSUpdate(void)",
    "public: virtual long __thiscall DirectUI::Element::Remove(class DirectUI::Element * *,unsigned int)",
    "public: long __thiscall DirectUI::SafeArrayAccessor::Access(struct tagSAFEARRAY *,unsigned short)",
    "public: virtual unsigned long __stdcall DirectUI::GridItemProvider::AddRef(void)",
    "public: static class UID __stdcall DirectUI::Button::Click(void)",
    "protected: static void __stdcall DirectUI::Element::_FlushLayout(class DirectUI::Element *,class DirectUI::DeferCycle *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseNumber(struct DirectUI::ParserTools::ExprNode const *,int *)",
    "public: static int DirectUI::Schema::StatusBarControlType",
    "public: static long __stdcall DirectUI::CCBaseScrollBar::Register(void)",
    "private: class DirectUI::Value * __thiscall DirectUI::Element::_GetLocalValue(struct DirectUI::PropertyInfo const *)",
    "public: long __thiscall DirectUI::PushButton::SetEnforceSize(bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TextGraphic::SideGraphicProp(void)",
    "const DirectUI::FontCache::`vftable'",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::TouchHyperLink::GetClassInfoPtr(void)",
    "public: virtual long __stdcall DirectUI::HWNDElementProvider::ElementProviderFromPoint(double,double,struct IRawElementProviderFragment * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCBaseScrollBar::LineProp(void)",
    "public: bool __thiscall DirectUI::Movie::GetPlayAllFramesMode(void)",
    "public: virtual unsigned long __stdcall DirectUI::RangeValueProvider::AddRef(void)",
    "public: static long __stdcall DirectUI::CCTreeView::Register(void)",
    "protected: virtual void __thiscall DirectUI::ModernProgressBar::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: __thiscall DirectUI::LinkedList::~LinkedList(void)",
    "public: virtual unsigned int __thiscall DirectUI::Edit::MessageCallback(struct tagGMSG *)",
    "public: void __thiscall DirectUI::HWNDElement::SetScreenCenter(bool)",
    "public: virtual long __stdcall DirectUI::ExpandCollapseProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: __thiscall DirectUI::CCBaseCheckRadioButton::CCBaseCheckRadioButton(unsigned long)",
    "public: bool __thiscall DirectUI::XElement::IsDescendent(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::Pages::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static long __stdcall DirectUI::TouchScrollBar::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual __thiscall DirectUI::TableItemProvider::~TableItemProvider(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateColor(unsigned long,unsigned long,unsigned long,unsigned char)",
    "public: unsigned long __thiscall DirectUI::RichText::GetLineCount(void)",
    "public: long __thiscall DirectUI::BaseScrollViewer::SetXScrollable(bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchEdit2::PromptWithCaretProp(void)",
    "protected: virtual long __thiscall DirectUI::ElementProvider::Init(class DirectUI::Element *,class DirectUI::InvokeHelper *)",
    "public: class DirectUI::InvokeManager & __thiscall DirectUI::InvokeManager::operator=(class DirectUI::InvokeManager const &)",
    "const DirectUI::BaseScrollViewer::`vftable'{for `DirectUI::Element'}",
    "public: long __thiscall DirectUI::Movie::SetCompositingQuality(int)",
    "public: __thiscall DirectUI::SafeArrayAccessor::operator int *(void)",
    "const DirectUI::SelectionItemProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: virtual __thiscall DirectUI::StyledScrollViewer::~StyledScrollViewer(void)",
    "public: virtual long __stdcall DirectUI::TableProvider::GetColumnHeaders(struct tagSAFEARRAY * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::AutoStopProp(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::RadioButtonGlyph::s_pClassInfo",
    "private: static struct DirectUI::IClassInfo * DirectUI::RepeatButton::s_pClassInfo",
    "public: bool __thiscall DirectUI::Element::IsWordWrap(void)",
    "public: static long __stdcall DirectUI::Movie::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: long __thiscall DirectUI::HWNDElement::SetWrapKeyboardNavigate(bool)",
    "public: static long __stdcall DirectUI::Edit::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: long __thiscall DirectUI::Element::ShiftChild(unsigned int,unsigned int)",
    "const DirectUI::IXProviderCP::`vftable'",
    "const DirectUI::Bind::`vftable'",
    "public: static void __stdcall DirectUI::XBaby::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual __thiscall DirectUI::Viewer::~Viewer(void)",
    "public: int __thiscall DirectUI::Progress::GetPosition(void)",
    "public: long __thiscall DirectUI::HWNDHost::GetClientAccessibleImpl(struct IAccessible * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::RefPointElement::ActualReferencePointProp(void)",
    "private: static long __stdcall DirectUI::EventManager::GetString(struct tagVARIANT *,class DirectUI::Value *)",
    "public: static long __stdcall DirectUI::EventManager::OnToolTip(class DirectUI::Element *,unsigned long)",
    "public: long __thiscall DirectUI::Viewer::SetYOffset(int)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::TableLayout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: __thiscall DirectUI::Expandable::Expandable(class DirectUI::Expandable const &)",
    "public: virtual bool __thiscall DirectUI::CCPushButton::OnMessage(unsigned int,unsigned int,long,long *)",
    "public: virtual void __thiscall DirectUI::TouchScrollBar::OnInput(struct DirectUI::InputEvent *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCTrackBar::LineSizeProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ScrollBar::PositionProp(void)",
    "public: void __thiscall DirectUI::TouchEdit2::DisableSelectionHandlesOnEmptyContent(void)",
    "public: __thiscall DirectUI::CCBase::CCBase(class DirectUI::CCBase const &)",
    "public: virtual long __stdcall DirectUI::ElementProvider::GetPatternProvider(int,struct IUnknown * *)",
    "public: static int DirectUI::Schema::Scroll_VerticallyScrollable_Property",
    "public: virtual long __stdcall DirectUI::TableItemProvider::GetColumnHeaderItems(struct tagSAFEARRAY * *)",
    "protected: void __thiscall DirectUI::Macro::ResolveBindings(void)",
    "unsigned long DirectUI::g_dwElSlot",
    "public: unsigned short const * __thiscall DirectUI::Navigator::GetTargetPage(class DirectUI::Value * *)",
    "public: virtual bool __thiscall DirectUI::CCTreeView::OnNotify(unsigned int,unsigned int,long,long *)",
    "public: virtual void __thiscall DirectUI::Element::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "protected: static int __stdcall DirectUI::DUIXmlParser::QuerySysMetric(int)",
    "private: unsigned int __thiscall DirectUI::Element::GetCommonDrawTextFlags(int)",
    "public: void __thiscall DirectUI::TouchHWNDElement::UnregisterForIHMChanges(void)",
    "public: long __thiscall DirectUI::AccessibleButton::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: virtual __thiscall DirectUI::DCSurface::~DCSurface(void)",
    "public: virtual void __thiscall DirectUI::TouchScrollBar::OnHosted(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::TouchSelectItem::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::BaseScrollViewer::s_pClassInfo",
    "private: static struct DirectUI::IClassInfo * DirectUI::Expandable::s_pClassInfo",
    "public: long __thiscall DirectUI::PText::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: void __thiscall DirectUI::DUIXmlParser::SetUnavailableIcon(struct HICON__ *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Viewer::YOffsetProp(void)",
    "public: __thiscall DirectUI::PushButton::PushButton(class DirectUI::PushButton const &)",
    "public: virtual void __thiscall DirectUI::TouchRepeatButton::FireRightClickEvent(unsigned int,struct tagPOINT *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::FontWeightProp(void)",
    "public: __thiscall DirectUI::HWNDElementProxy::HWNDElementProxy(void)",
    "public: bool __thiscall DirectUI::CCBaseScrollBar::GetTracking(void)",
    "public: static long __stdcall DirectUI::CCAVI::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "private: static long __stdcall DirectUI::Schema::LookupPatternInfos(void)",
    "public: virtual void __thiscall DirectUI::NineGridLayout::OnAdd(class DirectUI::Element *,class DirectUI::Element * *,unsigned int)",
    "public: __thiscall DirectUI::CallstackTracker::CallstackTracker(void)",
    "public: static long __stdcall CSafeElementProxy::CreateInstance(class DirectUI::Element *,class CSafeElementProxy * *)",
    "public: virtual bool __thiscall DirectUI::TouchEditBase::IsContentProtected(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchSlider::IsContinuousProp(void)",
    "public: virtual long __thiscall DirectUI::TouchScrollBar::CreateButtons(void)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCHScrollBar::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Page::GetClassInfoPtr(void)",
    "public: virtual long __stdcall DirectUI::SelectionProvider::get_CanSelectMultiple(int *)",
    "public: long __thiscall DirectUI::HWNDHost::SetTransparent(bool)",
    "public: virtual long __thiscall DirectUI::Selector::SetSelection(class DirectUI::Element *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateGraphic(struct HICON__ *,bool,bool,bool)",
    "public: void __thiscall DirectUI::CCBaseScrollBar::`default constructor closure'(void)",
    "public: static void __stdcall DirectUI::EventManager::Close(void)",
    "const DirectUI::ModernProgressBarRangeValueProxy::`vftable'",
    "public: class DirectUI::DynamicArray * __thiscall DirectUI::Element::GetChildren(class DirectUI::Value * *)",
    "public: virtual long __stdcall DirectUI::ElementProvider::get_HostRawElementProvider(struct IRawElementProviderSimple * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_GetClassForElement(struct IXmlReader *,struct DirectUI::IClassInfo * *)",
    "private: void __thiscall DirectUI::AnimationStrip::UnloadCommonControlExports(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_RecordSetElementProperties(struct IXmlReader *)",
    "public: __thiscall DirectUI::Progress::Progress(class DirectUI::Progress const &)",
    "public: static class UID __stdcall DirectUI::PVLAnimation::NotifyStart(void)",
    "public: __thiscall DirectUI::TouchCheckBox::TouchCheckBox(void)",
    "public: static int DirectUI::Schema::GridItem_Column_Property",
    "public: virtual enum DirectUI::Surface::EType __thiscall DirectUI::DCSurface::GetType(void)const",
    "protected: virtual void __thiscall DirectUI::AnimationStrip::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: void __thiscall DirectUI::NativeHWNDHost::DestroyWindow(void)",
    "public: int __thiscall DirectUI::TouchScrollViewer::GetSnapMode(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::DialogElement::s_pClassInfo",
    "const DirectUI::ExpandCollapseProxy::`vftable'",
    "public: long __thiscall DirectUI::RichText::SetLocale(unsigned short const *)",
    "public: virtual bool __thiscall DirectUI::TouchEdit2::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "const DirectUI::Layout::`vftable'",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetDblListEmpty(void)",
    "const DirectUI::DialogElement::`vftable'{for `DirectUI::HWNDElement'}",
    "public: virtual __thiscall DirectUI::ModernProgressRing::~ModernProgressRing(void)",
    "protected: virtual long __thiscall DirectUI::TaskPage::LoadPage(class DirectUI::HWNDElement *,struct HINSTANCE__ *,class DirectUI::Element * *,class DirectUI::DUIXmlParser * *)",
    "public: virtual void __thiscall DirectUI::BaseScrollBar::End(void)",
    "public: static void __stdcall DirectUI::CCTrackBar::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::RadioButtonGlyph::GetClassInfoPtr(void)",
    "public: static unsigned int const DirectUI::XElement::s_uNavigateOutMsg",
    "public: unsigned short const * __thiscall DirectUI::Macro::GetExpand(class DirectUI::Value * *)",
    "public: class DirectUI::RefPointElement & __thiscall DirectUI::RefPointElement::operator=(class DirectUI::RefPointElement const &)",
    "private: bool __thiscall DirectUI::HWNDHost::HaveWin32Focus(void)",
    "public: class DirectUI::PushButton & __thiscall DirectUI::PushButton::operator=(class DirectUI::PushButton const &)",
    "public: static long __stdcall DirectUI::EventManager::PropertyListener(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Macro::GetClassInfoPtr(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Repeater::GetClassInfoW(void)",
    "public: static int DirectUI::Schema::TitleBarControlType",
    "public: virtual bool __thiscall DirectUI::XBaby::GetDefaultButtonTracking(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCTreeView::GetClassInfoPtr(void)",
    "const DirectUI::DUIXmlParser::`vftable'",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Viewer::GetClassInfoW(void)",
    "public: bool __thiscall DirectUI::TouchScrollViewer::IsTileMember(unsigned int,class DirectUI::Element *)",
    "public: __thiscall DirectUI::NavigatorSelectionItemProxy::NavigatorSelectionItemProxy(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCCheckBox::GetClassInfoW(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::BaseScrollViewer::GetClassInfoW(void)",
    "const DirectUI::TableItemProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: virtual unsigned long __stdcall DirectUI::XProvider::Release(void)",
    "public: unsigned long __stdcall DirectUI::Element::AddRef(void)",
    "public: struct tagPOINT const * __thiscall DirectUI::Element::GetLocation(class DirectUI::Value * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::MapPropertyNameToPropertyInfo(struct DirectUI::LINEINFO,struct DirectUI::IClassInfo *,unsigned short const *,struct DirectUI::PropertyInfo const * *)",
    "public: virtual void __thiscall DirectUI::TouchEditBase::SetKeyFocus(void)",
    "public: static long __stdcall DirectUI::AnimationStrip::Register(void)",
    "const DirectUI::ProviderProxy::`vftable'",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCBaseScrollBar::TrackingProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchSlider::ThumbPositionProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchSlider::ShowTickProp(void)",
    "public: class DirectUI::Element * __thiscall DirectUI::Pages::GetPage(unsigned short const *)",
    "public: static int DirectUI::Schema::ProgressBarControlType",
    "const DirectUI::HWNDHostAccessible::`vftable'{for `IServiceProvider'}",
    "public: virtual void __thiscall DirectUI::AutoButton::OnEvent(struct DirectUI::Event *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetIntMinusOne(void)",
    "public: static long __stdcall DirectUI::NineGridLayout::Create(class DirectUI::Layout * *)",
    "public: virtual void __thiscall DirectUI::TouchHWNDElement::OnDestroy(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::Skip(unsigned long)",
    "public: virtual long __stdcall DirectUI::ExpandCollapseProvider::get_ExpandCollapseState(enum ExpandCollapseState *)",
    "public: virtual __thiscall DirectUI::Button::~Button(void)",
    "protected: class DirectUI::Element * __thiscall DirectUI::TaskPage::GetElement(void)",
    "public: __thiscall DirectUI::HWNDElementProvider::HWNDElementProvider(void)",
    "const DirectUI::HWNDHostClientAccessible::`vftable'{for `IAccIdentity'}",
    "public: bool __thiscall DirectUI::TouchButton::GetHandleEnter(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::UnknownElement::GetClassInfoW(void)",
    "const DirectUI::HWNDElementAccessible::`vftable'{for `IOleWindow'}",
    "public: long __thiscall DirectUI::TouchButton::SetCaptured(bool)",
    "public: struct HINSTANCE__ * __thiscall DirectUI::DUIXmlParser::GetResourceHInstance(void)",
    "public: virtual long __thiscall DirectUI::TableProxy::DoMethod(int,char *)",
    "public: virtual long __thiscall DirectUI::TouchSelect::Add(class DirectUI::Element * *,unsigned int)",
    "public: bool __thiscall DirectUI::TouchScrollViewer::CanPerformManualVisualSwap(void)",
    "public: long __thiscall DirectUI::AnimationStrip::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: long __thiscall DirectUI::TouchButton::SetShowKeyFocus(bool)",
    "public: long __thiscall DirectUI::TouchButton::SetHandleGlobalEnter(bool)",
    "public: int __thiscall DirectUI::NavScoring::Try(class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "const DirectUI::DuiAccessible::`vftable'{for `IEnumVARIANT'}",
    "public: static long __stdcall DirectUI::FontCache::InitProcess(void)",
    "public: static long __stdcall DirectUI::Viewer::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual void __thiscall DirectUI::BaseScrollViewer::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: class DirectUI::ElementProxy & __thiscall DirectUI::ElementProxy::operator=(class DirectUI::ElementProxy const &)",
    "public: virtual long __stdcall DirectUI::ElementProvider::get_BoundingRectangle(struct UiaRect *)",
    "public: static int DirectUI::Schema::ComboBoxControlType",
    "public: class DirectUI::Element const * __thiscall DirectUI::ElementProvider::GetElementKey(void)",
    "private: long __thiscall DirectUI::AnimationStrip::Start(void)",
    "public: long __thiscall DirectUI::TouchEditBase::SetMultiline(bool)",
    "public: static int DirectUI::Schema::Grid_ColumnCount_Property",
    "public: __thiscall DirectUI::Element::Element(class DirectUI::Element const &)",
    "public: __thiscall DirectUI::ScrollProvider::ScrollProvider(void)",
    "public: __thiscall DirectUI::CCRadioButton::CCRadioButton(void)",
    "public: class DirectUI::StyleSheet & __thiscall DirectUI::StyleSheet::operator=(class DirectUI::StyleSheet const &)",
    "public: virtual unsigned long __stdcall DirectUI::ScrollItemProvider::AddRef(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::CreateStyleSheet(struct IXmlReader *,unsigned short const *,class DirectUI::StyleSheet * *)",
    "public: __thiscall DirectUI::TableProxy::TableProxy(class DirectUI::TableProxy const &)",
    "public: __thiscall DirectUI::XResourceProvider::XResourceProvider(void)",
    "public: static long __stdcall DirectUI::XBaby::Register(void)",
    "public: virtual long __stdcall DirectUI::ToggleProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCPushButton::EstimateContentSize(int,int,class DirectUI::Surface *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::FontStyleProp(void)",
    "public: __thiscall DirectUI::ExpandCollapseProxy::ExpandCollapseProxy(void)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetAccItemType(class DirectUI::Value * *)",
    "protected: static long __stdcall DirectUI::DUIXmlParser::GetXmlLiteDll(struct HINSTANCE__ * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchEdit2::PromptTextProp(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateGraphic(unsigned short const *,unsigned short,unsigned short,struct HINSTANCE__ *,bool,bool)",
    "private: static class DirectUI::InvokeHelper * __stdcall DirectUI::InvokeManager::FindInvokeHelper(unsigned int *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseImageGraphic(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: class DirectUI::ScrollBar & __thiscall DirectUI::ScrollBar::operator=(class DirectUI::ScrollBar const &)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateCursor(struct HICON__ *)",
    "GetScaleFactor",
    "private: static bool __stdcall DirectUI::ElementProviderManager::FindProviderCallback(class DirectUI::ElementProvider *,void *)",
    "public: static long __stdcall DirectUI::Element::UnRegister(struct DirectUI::IClassInfo * *)",
    "public: void __thiscall DirectUI::NineGridLayout::Initialize(void)",
    "public: __thiscall DirectUI::StyleSheet::StyleSheet(class DirectUI::StyleSheet const &)",
    "public: class DirectUI::ProviderProxy & __thiscall DirectUI::ProviderProxy::operator=(class DirectUI::ProviderProxy const &)",
    "public: virtual __thiscall DirectUI::CCTrackBar::~CCTrackBar(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::ElementWithHWND::GetClassInfoPtr(void)",
    "protected: __thiscall DirectUI::SelectionItemProxy::SelectionItemProxy(void)",
    "public: long __thiscall DirectUI::Element::Add(class DirectUI::Element *,int (__cdecl*)(void const *,void const *))",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetRectZero(void)",
    "public: virtual int __thiscall DirectUI::ScrollBar::GetPage(void)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetManipulationHorizontalAlignment(int)",
    "public: static void __stdcall DirectUI::AnimationStrip::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: __thiscall DirectUI::CCProgressBar::CCProgressBar(class DirectUI::CCProgressBar const &)",
    "public: int __thiscall DirectUI::NativeHWNDHost::RestoreFocus(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::CreateLayout(struct DirectUI::ParserTools::ExprNode const *,long (__stdcall*)(int,int *,class DirectUI::Value * *))",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::FillLayout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ShortcutProp(void)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::XBaby::GetFocusableElement(void)",
    "public: long __thiscall DirectUI::TouchEdit2::SetPromptText(unsigned short const *)",
    "public: virtual long __thiscall DirectUI::SelectionProxy::DoMethod(int,char *)",
    "public: void __thiscall DirectUI::ElementProvider::TossPatternProvider(enum DirectUI::Schema::Pattern)",
    "RegisterExtendedControls",
    "public: long __thiscall DirectUI::Element::SetFont(unsigned short const *)",
    "public: struct DirectUI::Fill const * __thiscall DirectUI::Element::GetBorderColor(class DirectUI::Value * *)",
    "public: virtual void __thiscall DirectUI::HWNDElement::ActivateTooltip(class DirectUI::Element *,unsigned long)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseIntValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "private: long __thiscall DirectUI::GridProxy::GetItem(unsigned int,unsigned int,struct IRawElementProviderSimple * *)",
    "protected: void __thiscall DirectUI::HWNDHost::SyncDirection(void)",
    "public: bool __thiscall DirectUI::TouchHyperLink::GetVisited(void)",
    "public: static long __stdcall DirectUI::Repeater::Register(void)",
    "public: static int DirectUI::Schema::ItemContainerPattern",
    "public: virtual void __thiscall DirectUI::Button::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: bool __thiscall DirectUI::Element::GetKeyWithin(void)",
    "public: long __thiscall DirectUI::ModernProgressBar::SetSmoothFillAnimation(bool)",
    "public: __thiscall DirectUI::GridItemProvider::GridItemProvider(void)",
    "void __stdcall DirectUI::SyncElementAlphaFromForegroundAlpha(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::Selector::Register(void)",
    "public: class DirectUI::DynamicArray * __thiscall DirectUI::TouchScrollViewer::GetSnapPointCollectionY(class DirectUI::Value * *)",
    "public: virtual __thiscall DirectUI::PText::~PText(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseRectValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: long __thiscall DirectUI::RichText::SetAliasedRendering(bool)",
    "public: static void __stdcall DirectUI::Selector::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual void __thiscall DirectUI::SelectorNoDefault::OnEvent(struct DirectUI::Event *)",
    "public: long __thiscall DirectUI::Element::SetBackgroundColor(struct DirectUI::Fill const &)",
    "public: virtual long __thiscall DirectUI::TouchRepeatButton::DefaultAction(void)",
    "InitPreprocessor",
    "public: class DirectUI::DUIXmlParser & __thiscall DirectUI::DUIXmlParser::operator=(class DirectUI::DUIXmlParser const &)",
    "protected: long __thiscall DirectUI::TaskPage::PropSheet_SendMessage(unsigned int,unsigned int,long)",
    "public: static class UID __stdcall DirectUI::Browser::Leaving(void)",
    "public: long __thiscall DirectUI::ClassInfoBase::Initialize(struct HINSTANCE__ *,unsigned short const *,bool,struct DirectUI::PropertyInfo const * const *,unsigned int)",
    "public: virtual long __stdcall DirectUI::GridProvider::get_RowCount(int *)",
    "public: int __thiscall DirectUI::CCListBox::AddString(unsigned short const *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCTreeView::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: virtual unsigned int __thiscall DirectUI::TouchHWNDElement::MessageCallback(struct tagGMSG *)",
    "public: virtual __thiscall DirectUI::BaseScrollViewer::~BaseScrollViewer(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Button::CapturedProp(void)",
    "private: void __thiscall DirectUI::Movie::advanceFrameActionStop(void)",
    "public: long __thiscall DirectUI::TouchSelect::SetSelection(class DirectUI::Element *)",
    "public: class DirectUI::AutoThread & __thiscall DirectUI::AutoThread::operator=(class DirectUI::AutoThread const &)",
    "const DirectUI::XBaby::`vftable'{for `DirectUI::IElementListener'}",
    "public: virtual __thiscall DirectUI::RichText::~RichText(void)",
    "private: void __thiscall DirectUI::Element::_FlushDS(class DirectUI::DeferCycle *)",
    "public: virtual __thiscall DirectUI::CCProgressBar::~CCProgressBar(void)",
    "const DirectUI::PatternProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: __thiscall DirectUI::DUIFactory::~DUIFactory(void)",
    "public: static int DirectUI::Schema::SelectionItemElementRemovedFromSelectionEvent",
    "private: static struct _RTL_CRITICAL_SECTION DirectUI::InvokeManager::g_cs",
    "private: static unsigned __int64 (__stdcall* DirectUI::CallstackTracker::s_pfnSymLoadModule64)(void *,void *,char const *,char const *,unsigned __int64,unsigned long)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateGraphic(unsigned short const *,unsigned char,unsigned int,unsigned short,unsigned short,struct HINSTANCE__ *,bool,bool)",
    "protected: bool __thiscall DirectUI::HWNDHost::IsMoveDeferred(void)",
    "public: static long __stdcall DirectUI::CheckBoxGlyph::Register(void)",
    "private: void __thiscall DirectUI::PushButton::FireHostEvent(class DirectUI::Element *,bool)",
    "public: static class UID __stdcall DirectUI::TouchScrollViewer::UpdateContentSize(void)",
    "public: virtual void __thiscall DirectUI::ElementProvider::TossElement(void)",
    "private: long __thiscall DirectUI::SelectorSelectionItemProxy::AddToSelection(void)",
    "public: long __thiscall DirectUI::Element::Remove(class DirectUI::Element *)",
    "public: virtual long __thiscall DirectUI::GridProxy::DoMethod(int,char *)",
    "public: virtual void __thiscall DirectUI::TouchScrollBar::LineDown(unsigned int)",
    "public: __thiscall DirectUI::BaseScrollViewer::BaseScrollViewer(class DirectUI::BaseScrollViewer const &)",
    "public: static int DirectUI::Schema::DragDragStartEvent",
    "protected: long __thiscall DirectUI::DUIXmlParser::_GetClassForElementByName(unsigned short const *,struct DirectUI::IClassInfo * *)",
    "public: virtual struct HWND__ * __thiscall DirectUI::CCBase::CreateHWND(struct HWND__ *)",
    "public: struct DirectUI::IDataEntry & __thiscall DirectUI::IDataEntry::operator=(struct DirectUI::IDataEntry const &)",
    "public: virtual long __stdcall DirectUI::ElementProvider::get_FragmentRoot(struct IRawElementProviderFragmentRoot * *)",
    "const DirectUI::ExpandoButtonGlyph::`vftable'",
    "public: static long __stdcall DirectUI::XHost::Create(class DirectUI::IXElementCP *,class DirectUI::XHost * *)",
    "public: void __thiscall DirectUI::Macro::SetDefaultGraphicType(unsigned char,bool)",
    "public: int __thiscall DirectUI::Element::GetAccState(void)",
    "public: static int __stdcall DirectUI::CallstackTracker::Init(void)",
    "public: class DirectUI::FlowLayout & __thiscall DirectUI::FlowLayout::operator=(class DirectUI::FlowLayout const &)",
    "public: static int DirectUI::Schema::ScrollBarControlType",
    "public: static long (__stdcall* DirectUI::Schema::UiaRaiseAutomationPropertyChangedEvent)(struct IRawElementProviderSimple *,int,struct tagVARIANT,struct tagVARIANT)",
    "public: __thiscall DirectUI::CCCommandLink::CCCommandLink(unsigned long)",
    "public: long __thiscall DirectUI::DUIXmlParser::UpdateSheets(class DirectUI::Element *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchButton::CapturedProp(void)",
    "public: void __thiscall DirectUI::HWNDHost::Detach(void)",
    "public: static int DirectUI::Schema::GridPattern",
    "public: static long __stdcall DirectUI::CCVScrollBar::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: long __thiscall DirectUI::TouchEdit2::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: __thiscall DirectUI::RepeatButton::RepeatButton(class DirectUI::RepeatButton const &)",
    "public: static long __stdcall DirectUI::Element::_DisplayNodeCallback(struct HGADGET__ *,void *,struct EventMsg *)",
    "public: static long __stdcall DirectUI::EventManager::EndDefer(class DirectUI::Element *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchCheckBox::CheckedStateProp(void)",
    "public: virtual unsigned int __thiscall DirectUI::XElement::GetCreationFlags(void)",
    "const DirectUI::HWNDHostClientAccessible::`vftable'{for `IServiceProvider'}",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccValueProp(void)",
    "private: long __thiscall DirectUI::BrowserSelectionProxy::GetIsSelectionRequired(int *)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::CCBaseScrollBar::GetElement(void)",
    "public: bool __thiscall DirectUI::Movie::GetAutoStart(void)",
    "public: static class UID __stdcall DirectUI::TouchScrollBar::InteractionEnd(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::DialogElement::GetClassInfoPtr(void)",
    "public: unsigned int __thiscall DirectUI::Value::GetEncodedStringLength(void)",
    "public: class DirectUI::CCSysLink & __thiscall DirectUI::CCSysLink::operator=(class DirectUI::CCSysLink const &)",
    "public: bool __thiscall DirectUI::DialogElementCore::OnChildReceivedFocus(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::Combobox::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: __thiscall DirectUI::TableLayout::TableLayout(void)",
    "protected: virtual void __thiscall DirectUI::CCBase::PostCreate(struct HWND__ *)",
    "public: static long __stdcall DirectUI::HWNDElement::StaticWndProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccStateProp(void)",
    "private: static long __stdcall DirectUI::Schema::GetProcs(void)",
    "public: static long __stdcall DirectUI::Bind::Register(void)",
    "public: class DirectUI::TaskPage & __thiscall DirectUI::TaskPage::operator=(class DirectUI::TaskPage const &)",
    "public: static int DirectUI::Schema::TextPattern",
    "public: virtual __thiscall DirectUI::ScrollItemProvider::~ScrollItemProvider(void)",
    "public: long __thiscall DirectUI::XElement::SetProvider(struct IUnknown *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::PathProp(void)",
    "public: long __thiscall DirectUI::TouchEditBase::SetSelectionForegroundColor(class DirectUI::Value *)",
    "private: void __thiscall DirectUI::CCAVI::OpenAnimation(struct HWND__ *)",
    "public: __thiscall DirectUI::InvokeHelper::InvokeHelper(void)",
    "public: bool __thiscall DirectUI::Element::IsCompositedText(void)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetContentString(class DirectUI::Value * *)",
    "public: long __thiscall DirectUI::AnimationStrip::SetFrameIndex(int)",
    "public: virtual long __stdcall DirectUI::TableProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: class DirectUI::ValueProxy & __thiscall DirectUI::ValueProxy::operator=(class DirectUI::ValueProxy const &)",
    "public: class DirectUI::Combobox & __thiscall DirectUI::Combobox::operator=(class DirectUI::Combobox const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::BorderThicknessProp(void)",
    "public: virtual void __thiscall DirectUI::TouchScrollBar::LineUp(unsigned int)",
    "public: virtual long __thiscall DirectUI::ToggleProxy::DoMethod(int,char *)",
    "public: virtual __thiscall DirectUI::ShellBorderLayout::~ShellBorderLayout(void)",
    "public: virtual void __thiscall DirectUI::TouchCheckBoxGlyph::Paint(struct HDC__ *,struct tagRECT const *,struct tagRECT const *,struct tagRECT *,struct tagRECT *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchEditBase::SelectionBackgroundColorProp(void)",
    "public: long __thiscall DirectUI::TouchHyperLink::SetVisited(bool)",
    "const DirectUI::GridItemProxy::`vftable'",
    "public: bool __thiscall DirectUI::Edit::GetThemedBorder(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Progress::MinimumProp(void)",
    "public: __thiscall DirectUI::XProvider::XProvider(class DirectUI::XProvider const &)",
    "public: bool __thiscall DirectUI::TouchEditBase::GetMultiline(void)",
    "public: int __thiscall DirectUI::Element::GetFontStyle(void)",
    "private: static long const DirectUI::Value::c_RefCountMask",
    "public: static long __stdcall DirectUI::GridLayout::Create(int,int,class DirectUI::Layout * *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCVScrollBar::GetClassInfoW(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchSlider::MeteringProp(void)",
    "public: static long __stdcall DirectUI::CCVScrollBar::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::HWNDHost::OptimizeMoveProp(void)",
    "public: bool __thiscall DirectUI::TouchScrollBar::IsThumbActive(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateDoubleList(class DirectUI::DynamicArray *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::RichText::GetClassInfoPtr(void)",
    "const DirectUI::BaseScrollBar::`vftable'",
    "protected: virtual void __thiscall DirectUI::HWNDHost::OnUnHosted(class DirectUI::Element *)",
    "public: void __thiscall DirectUI::Element::SetPreserveAlphaChannel(bool)",
    "public: long __thiscall DirectUI::DUIFactory::LoadFromBuffer(unsigned short const *,unsigned int,unsigned short const *,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: __thiscall DirectUI::IProvider::IProvider(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Bind::s_pClassInfo",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Macro::GetClassInfoW(void)",
    "public: virtual long __thiscall DirectUI::XBaby::GetElementProviderImpl(class DirectUI::InvokeHelper *,class DirectUI::ElementProvider * *)",
    "public: bool __thiscall DirectUI::TouchEditBase::GetReadOnly(void)",
    "private: static bool DirectUI::Schema::g_fInited",
    "public: static int DirectUI::Schema::InvokeInvokedEvent",
    "public: static class UID __stdcall DirectUI::TouchEditBase::CaretMoved(void)",
    "public: __thiscall DirectUI::Button::Button(class DirectUI::Button const &)",
    "PreprocessBuffer",
    "public: class DirectUI::Layout * __thiscall DirectUI::Element::GetLayout(class DirectUI::Value * *)",
    "public: virtual long __stdcall DirectUI::ToggleProvider::Toggle(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCBase::WinStyleProp(void)",
    "public: virtual struct DirectUI::PropertyInfo const * __thiscall DirectUI::ClassInfoBase::GetByClassIndex(unsigned int)",
    "const DirectUI::Browser::`vftable'",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchEditBase::SyncContentWhileIMEComposingProp(void)",
    "public: virtual bool __thiscall DirectUI::ScrollBar::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual void __thiscall DirectUI::TouchCheckBox::Paint(struct HDC__ *,struct tagRECT const *,struct tagRECT const *,struct tagRECT *,struct tagRECT *)",
    "public: long __thiscall DirectUI::TouchScrollViewer::ExecuteManualSwapDeferredZoomToRect(bool)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseFloat(struct DirectUI::ParserTools::ExprNode const *,float *)",
    "public: static long __stdcall DirectUI::RefPointElement::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static int DirectUI::Schema::CalendarControlType",
    "const DirectUI::IXElementCP::`vftable'",
    "public: bool __thiscall DirectUI::Element::IsSelfLayout(void)",
    "public: int __thiscall DirectUI::Element::GetFontSize(void)",
    "public: static long __stdcall DirectUI::DialogElement::Register(void)",
    "protected: virtual long __thiscall DirectUI::TaskPage::OnWizBack(void)",
    "public: static long __stdcall DirectUI::RepeatButton::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::SelectionProxy::`vftable'",
    "const DirectUI::DuiAccessible::`vftable'{for `IAccessible'}",
    "public: long __thiscall DirectUI::XHost::Initialize(class DirectUI::IXElementCP *)",
    "public: void __thiscall DirectUI::Element::Detach(class DirectUI::DeferCycle *)",
    "public: __thiscall DirectUI::TouchRepeatButton::TouchRepeatButton(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseGTCColor(struct DirectUI::ParserTools::ExprNode const *,unsigned long *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseGraphicHelper(bool,struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseSizeValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: __thiscall DirectUI::IDataEntry::IDataEntry(void)",
    "public: long __thiscall DirectUI::TouchEdit2::GetTextSelection(struct ITextSelection * *)",
    "long __stdcall DirectUI::_CreateAndSetLayout(class DirectUI::Element *,long (__stdcall*)(int,int *,class DirectUI::Value * *),int,int *)",
    "public: virtual bool __thiscall DirectUI::HWNDHost::OnSinkThemeChanged(unsigned int,unsigned int,long,long *)",
    "public: virtual void __thiscall DirectUI::PushButton::OnHosted(class DirectUI::Element *)",
    "public: class DirectUI::CCTrackBar & __thiscall DirectUI::CCTrackBar::operator=(class DirectUI::CCTrackBar const &)",
    "public: class DirectUI::TableLayout & __thiscall DirectUI::TableLayout::operator=(class DirectUI::TableLayout const &)",
    "InitThread",
    "public: static class DirectUI::ScrollItemProxy * __stdcall DirectUI::ScrollItemProxy::Create(class DirectUI::Element *)",
    "public: bool __thiscall DirectUI::Element::GetVisible(void)",
    "public: bool __thiscall DirectUI::TouchHWNDElement::GetLightDismissIHM(void)",
    "public: static class UID __stdcall DirectUI::TouchEditBase::Enter(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::TouchEditBase::GetClassInfoW(void)",
    "const DirectUI::RangeValueProxy::`vftable'",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::SizeInLayoutProp(void)",
    "public: virtual long __thiscall DirectUI::TouchEdit2::Add(class DirectUI::Element * *,unsigned int)",
    "public: unsigned short * __thiscall DirectUI::Value::ToString(unsigned short *,unsigned int)const",
    "public: __thiscall DirectUI::VerticalFlowLayout::VerticalFlowLayout(void)",
    "public: long __thiscall DirectUI::AnimationStrip::SetPlay(bool)",
    "public: static class DirectUI::ToggleProxy * __stdcall DirectUI::ToggleProxy::Create(class DirectUI::Element *)",
    "public: static class UID __stdcall DirectUI::TouchScrollViewer::SemanticChange(void)",
    "public: virtual void __thiscall DirectUI::ShellBorderLayout::OnAdd(class DirectUI::Element *,class DirectUI::Element * *,unsigned int)",
    "public: virtual __thiscall DirectUI::RefPointElement::~RefPointElement(void)",
    "public: static int DirectUI::Schema::SeparatorControlType",
    "protected: virtual void __thiscall DirectUI::ElementProxy::Init(class DirectUI::Element *)",
    "public: virtual long __stdcall DirectUI::ExpandCollapseProvider::Expand(void)",
    "public: long __thiscall DirectUI::Element::SetAbsorbsShortcut(bool)",
    "public: __thiscall DirectUI::AutoVariant::~AutoVariant(void)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accDefaultAction(struct tagVARIANT,unsigned short * *)",
    "public: virtual void __thiscall DirectUI::TouchSelect::OnUnHosted(class DirectUI::Element *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::InitializeParserFromXmlReader(struct IXmlReader *,struct HINSTANCE__ *,struct HINSTANCE__ *)",
    "public: long __thiscall DirectUI::RichText::SetFontWeightRuns(unsigned short const *)",
    "public: virtual bool __thiscall DirectUI::HWNDElement::IsMSAAEnabled(void)",
    "public: unsigned short __thiscall DirectUI::RichText::GetShortcutChar(void)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::SelectionProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "protected: virtual long __thiscall DirectUI::ScrollViewer::CreateScrollBars(void)",
    "public: static long __stdcall DirectUI::RefPointElement::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: bool __thiscall DirectUI::Element::HasLayout(void)",
    "public: static class UID __stdcall DirectUI::PVLAnimation::ManualStoryboardVerify(void)",
    "public: int __thiscall DirectUI::Progress::GetMinimum(void)",
    "public: long __thiscall DirectUI::Element::SetBackgroundColor(unsigned long)",
    "protected: virtual class DirectUI::BaseScrollBar * __thiscall DirectUI::StyledScrollViewer::GetVScroll(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Viewer::XOffsetProp(void)",
    "public: virtual unsigned long __stdcall DirectUI::ElementProvider::AddRef(void)",
    "public: virtual long __stdcall DirectUI::XProvider::SetRegisteredDefaultButton(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::DUIFactory::LoadFromFile(unsigned short const *,unsigned short const *,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: long __thiscall DirectUI::HWNDHost::Initialize(unsigned int,unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: virtual void __thiscall DirectUI::Element::HandleUiaEventListener(struct DirectUI::Event *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateAtom(unsigned short const *)",
    "public: static long __stdcall DirectUI::AccessibleButton::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseSGraphicGraphic(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: virtual unsigned int __thiscall DirectUI::ClassInfoBase::GetPICount(void)const",
    "public: virtual void __thiscall DirectUI::Edit::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: class DirectUI::CCCommandLink & __thiscall DirectUI::CCCommandLink::operator=(class DirectUI::CCCommandLink const &)",
    "public: long __thiscall DirectUI::DUIXmlParser::CreateElement(unsigned short const *,class DirectUI::Element *,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "protected: void __thiscall DirectUI::DUIXmlParser::SendParseError(unsigned short const *,unsigned short const *,struct IXmlReader *,long)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::DesiredSizeProp(void)",
    "public: __thiscall DirectUI::Repeater::Repeater(class DirectUI::Repeater const &)",
    "public: static long __stdcall DirectUI::NativeHWNDHost::Create(unsigned short const *,struct HWND__ *,struct HICON__ *,int,int,int,int,int,int,unsigned int,class DirectUI::NativeHWNDHost * *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::TableLayout::UpdateDesiredSize(class DirectUI::Element *,int,int,class DirectUI::Surface *)",
    "public: virtual void __thiscall DirectUI::TouchButton::OnEvent(struct DirectUI::Event *)",
    "private: static void __stdcall DirectUI::EventManager::GetExpandCollapseState(struct tagVARIANT *)",
    "public: class DirectUI::ScrollBarRangeValueProxy & __thiscall DirectUI::ScrollBarRangeValueProxy::operator=(class DirectUI::ScrollBarRangeValueProxy const &)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCCheckBox::GetClassInfoPtr(void)",
    "public: class DirectUI::ScrollProxy & __thiscall DirectUI::ScrollProxy::operator=(class DirectUI::ScrollProxy const &)",
    "public: virtual void __thiscall DirectUI::CCRadioButton::OnInput(struct DirectUI::InputEvent *)",
    "public: bool __thiscall DirectUI::Element::HasMargin(void)",
    "private: long __thiscall DirectUI::HWNDHost::GetAccessibleImpl(struct IAccessible * *,bool)",
    "public: int __thiscall DirectUI::Element::GetTextGlowSize(void)",
    "protected: __thiscall DirectUI::SelectionProxy::SelectionProxy(void)",
    "public: int __thiscall DirectUI::BaseScrollViewer::GetXBarVisibility(void)",
    "public: class DirectUI::ElementWithHWND & __thiscall DirectUI::ElementWithHWND::operator=(class DirectUI::ElementWithHWND const &)",
    "public: int __thiscall DirectUI::Element::GetDPI(void)",
    "public: long __thiscall DirectUI::Element::SetPadding(int,int,int,int)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::TextGraphic::GetClassInfoW(void)",
    "protected: long __thiscall DirectUI::HWNDHost::SetThemeChanged(int)",
    "public: virtual unsigned long __stdcall DirectUI::ExpandCollapseProvider::AddRef(void)",
    "public: virtual long __thiscall DirectUI::TouchEditBase::FinalizeCurrentIMEComposition(void)",
    "public: static long __stdcall DirectUI::Movie::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: bool __thiscall DirectUI::TouchCheckBox::GetToggleOnClick(void)",
    "public: bool __thiscall DirectUI::TouchHWNDElement::ShouldUsePerMonitorScaling(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCTrackBar::GetClassInfoPtr(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::TouchCheckBoxGlyph::GetClassInfoPtr(void)",
    "DrawShadowTextEx",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetSnapIntervalX(float)",
    "public: virtual void __thiscall DirectUI::HWNDHost::Paint(struct HDC__ *,struct tagRECT const *,struct tagRECT const *,struct tagRECT *,struct tagRECT *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchButton::PressedProp(void)",
    "public: virtual long __stdcall DirectUI::HWNDElementProvider::GetFocus(struct IRawElementProviderFragment * *)",
    "public: int __thiscall DirectUI::Element::GetBorderStyle(void)",
    "public: static long __stdcall DirectUI::ElementProviderManager::Add(class DirectUI::ElementProvider *)",
    "public: static class UID __stdcall DirectUI::Edit::Enter(void)",
    "public: static long __stdcall DirectUI::ExpandoButtonGlyph::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "StrToID",
    "public: class DirectUI::Button * __thiscall DirectUI::TouchSlider::GetThumbElement(void)",
    "public: static long __stdcall DirectUI::TouchCommandButton::Register(void)",
    "public: void __thiscall DirectUI::TouchHWNDElement::UnregisterForAnimationStatusChanges(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchButton::ShowKeyFocusProp(void)",
    "public: long __thiscall DirectUI::Edit::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: virtual __thiscall DirectUI::CCAVI::~CCAVI(void)",
    "const DirectUI::CCTrackBar::`vftable'",
    "public: bool __thiscall DirectUI::Element::EnsureVisible(unsigned int)",
    "public: static int DirectUI::Schema::BoundingRectangleProperty",
    "public: static int DirectUI::Schema::TabItemControlType",
    "public: virtual void __thiscall DirectUI::TextGraphic::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accDescription(struct tagVARIANT,unsigned short * *)",
    "public: static long __stdcall DirectUI::Macro::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual bool __thiscall DirectUI::DialogElement::GetButtonClassAcceptsEnterKey(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::AutoButton::GetClassInfoW(void)",
    "public: static long __stdcall DirectUI::Thumb::Register(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::UnknownElement::GetClassInfoPtr(void)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::RowLayout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetZoomMaximum(float)",
    "public: virtual bool __thiscall DirectUI::CCBase::OnNotify(unsigned int,unsigned int,long,long *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchHWNDElement::LightDismissIHMProp(void)",
    "private: long __thiscall DirectUI::GridItemProxy::GetRow(int *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::ScrollBar::_SelfLayoutUpdateDesiredSize(int,int,class DirectUI::Surface *)",
    "protected: void __thiscall DirectUI::XProvider::SetHandleEnterKey(bool)",
    "UnicodeToMultiByte",
    "const DirectUI::ScrollItemProxy::`vftable'",
    "public: __thiscall DirectUI::SelectorSelectionItemProxy::SelectorSelectionItemProxy(void)",
    "public: __thiscall DirectUI::Pages::Pages(void)",
    "public: virtual bool __thiscall DirectUI::HWNDHost::OnNotify(unsigned int,unsigned int,long,long *)",
    "public: __thiscall DirectUI::CCAVI::CCAVI(void)",
    "protected: static bool __stdcall DirectUI::HWNDElement::FindShortcutRecursive(unsigned short,class DirectUI::Element *,class DirectUI::Element * *,int *,int *,int)",
    "public: virtual long __stdcall DirectUI::XProvider::CreateDUI(class DirectUI::IXElementCP *,struct HWND__ * *)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetSnapPointCollectionY(class DirectUI::DynamicArray *)",
    "public: bool __thiscall DirectUI::Value::IsEqual(class DirectUI::Value *)",
    "public: virtual void __thiscall DirectUI::BaseScrollViewer::OnEvent(struct DirectUI::Event *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseColor(struct DirectUI::ParserTools::ExprNode const *,unsigned long *)",
    "public: long __thiscall DirectUI::Button::SetPressed(bool)",
    "public: class DirectUI::StyleSheet * __thiscall DirectUI::Element::GetSheet(void)",
    "ColorFromEnumI",
    "MultiByteToUnicode",
    "public: class DirectUI::CCVScrollBar & __thiscall DirectUI::CCVScrollBar::operator=(class DirectUI::CCVScrollBar const &)",
    "void __stdcall DumpDuiProperties(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::Element::DestroyAll(bool)",
    "public: static class DirectUI::RefPointElement * __stdcall DirectUI::RefPointElement::Locate(class DirectUI::Element *)",
    "const DirectUI::VerticalFlowLayout::`vftable'",
    "public: bool __thiscall DirectUI::TouchButton::CancelClick(enum DirectUI::TouchButton::ClickDevice)",
    "DUIStopPVLAnimation",
    "public: class DirectUI::Value * (__stdcall*__thiscall DirectUI::DUIXmlParser::GetGetSheetCallback(void))(unsigned short const *,void *)",
    "public: long __thiscall DirectUI::RefcountBase::AddRef(void)",
    "const DirectUI::HWNDElementAccessible::`vftable'{for `IEnumVARIANT'}",
    "public: long __thiscall DirectUI::TouchSelectItem::SetTextContentOverride(unsigned short const *)",
    "protected: virtual unsigned short const * __thiscall DirectUI::TaskPage::GetPageResID(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCAVI::GetClassInfoPtr(void)",
    "public: static long __stdcall DirectUI::ModernProgressRing::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::SheetProp(void)",
    "public: __thiscall DirectUI::StyledScrollViewer::StyledScrollViewer(class DirectUI::StyledScrollViewer const &)",
    "protected: virtual void __thiscall DirectUI::TableProxy::Init(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::Page::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual void __thiscall DirectUI::BaseScrollViewer::OnInput(struct DirectUI::InputEvent *)",
    "protected: virtual void __thiscall DirectUI::ModernProgressRing::Paint(struct HDC__ *,struct tagRECT const *,struct tagRECT const *,struct tagRECT *,struct tagRECT *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::AnimationStrip::FrameWidthProp(void)",
    "protected: virtual struct HWND__ * __thiscall DirectUI::Edit::CreateHWND(struct HWND__ *,bool)",
    "public: int __thiscall DirectUI::CallstackTracker::EnumCallstackFrames(void (__stdcall*)(char const *,char const *,unsigned long,unsigned long))",
    "public: class DirectUI::PText & __thiscall DirectUI::PText::operator=(class DirectUI::PText const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchButton::HandleEnterProp(void)",
    "public: long __thiscall DirectUI::ModernProgressBar::SetPosition(int)",
    "public: __thiscall DirectUI::BrowserSelectionProxy::BrowserSelectionProxy(void)",
    "public: static int DirectUI::Schema::NewNativeWindowHandleProperty",
    "public: long __thiscall DirectUI::Element::SetShortcut(int)",
    "public: static void __stdcall DirectUI::Browser::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual bool __thiscall DirectUI::DialogElement::GetDefaultButtonTracking(void)",
    "const DirectUI::TextGraphic::`vftable'",
    "public: void __thiscall DirectUI::XHost::Destroy(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Viewer::s_pClassInfo",
    "public: void __thiscall DirectUI::BaseScrollBar::OnMinimumChanged(class DirectUI::Value *)",
    "public: virtual bool __thiscall DirectUI::CCBaseScrollBar::OnMessage(unsigned int,unsigned int,long,long *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Expandable::GetClassInfoW(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::HWNDElement::GetClassInfoW(void)",
    "public: class DirectUI::ShellBorderLayout & __thiscall DirectUI::ShellBorderLayout::operator=(class DirectUI::ShellBorderLayout const &)",
    "public: long __thiscall DirectUI::TouchHWNDElement::ShowRichTooltip(enum TOUCHTOOLTIP_INPUT,enum TOUCHTOOLTIP_OPTION_FLAGS,class DirectUI::Element *)",
    "public: static class UID __stdcall DirectUI::PVLAnimation::NotifyStoryboardComplete(void)",
    "private: static void __stdcall DirectUI::Element::_VoidPCNotifyTree(int,class DirectUI::DeferCycle *)",
    "protected: virtual void __thiscall DirectUI::HWNDHost::OnHosted(class DirectUI::Element *)",
    "private: static long __stdcall DirectUI::EventManager::RaiseStructureEvents(void)",
    "public: __thiscall DirectUI::FontCheckOut::FontCheckOut(class DirectUI::Element *,struct HDC__ *)",
    "public: __thiscall DirectUI::SelectorSelectionProxy::SelectorSelectionProxy(class DirectUI::SelectorSelectionProxy const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::AnimationStrip::FrameIndexProp(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accHelpTopic(unsigned short * *,struct tagVARIANT,long *)",
    "void __stdcall DumpDuiTree(class DirectUI::Element *,int)",
    "public: static class UID __stdcall DirectUI::PVLAnimation::CustomReflowHint(void)",
    "SkipDLLUnloadInitChecks",
    "public: virtual bool __thiscall DirectUI::Element::IsContentProtected(void)",
    "public: int __thiscall DirectUI::TouchHWNDElement::GetTooltipMaximumLineCount(void)",
    "public: bool __thiscall DirectUI::Element::GetAbsorbsShortcut(void)",
    "public: static long __stdcall DirectUI::DUIXmlParser::Create(class DirectUI::DUIXmlParser * *,class DirectUI::Value * (__stdcall*)(unsigned short const *,void *),void *,void (__stdcall*)(unsigned short const *,unsigned short const *,int,void *),void *)",
    "const DirectUI::TableProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchHyperLink::VisitedProp(void)",
    "public: long __thiscall DirectUI::Element::Insert(class DirectUI::Element *,unsigned int)",
    "public: static long __stdcall DirectUI::TouchEditBase::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "private: static int const DirectUI::CallstackTracker::INITIALSTACKSKIP",
    "public: void __thiscall DirectUI::Element::_ClearNeedsLayout(void)",
    "public: static long __stdcall DirectUI::RadioButtonGlyph::Register(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_RecordSetValue(struct IXmlReader *,unsigned short const *,unsigned short const *)",
    "private: static struct DirectUI::AccessibleButton::ACCESSIBLEROLE const * const DirectUI::AccessibleButton::c_rgar",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseRectRect(struct DirectUI::ParserTools::ExprNode const *,struct tagRECT *)",
    "public: long __thiscall DirectUI::TouchSwitch::SetOffText(unsigned short const *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::RichText::DisableAccTextExtendProp(void)",
    "public: __thiscall DirectUI::TableItemProxy::TableItemProxy(class DirectUI::TableItemProxy const &)",
    "public: virtual void __thiscall DirectUI::XResourceProvider::DestroyCP(void)",
    "const DirectUI::SelectionProvider::`vftable'",
    "public: long __thiscall DirectUI::TouchScrollViewer::ZoomToRectManualVisualSwap(float,float,float,float,int const *,float,float,float,bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::FontFaceProp(void)",
    "const DirectUI::ToggleProxy::`vftable'",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::BaseScrollViewer::GetClassInfoPtr(void)",
    "public: class DirectUI::ClassInfoBase & __thiscall DirectUI::ClassInfoBase::operator=(class DirectUI::ClassInfoBase const &)",
    "public: class DirectUI::SelectionProxy & __thiscall DirectUI::SelectionProxy::operator=(class DirectUI::SelectionProxy const &)",
    "private: void __thiscall DirectUI::Movie::advanceFrameActionStart(void)",
    "public: long __thiscall DirectUI::Progress::SetMaximum(int)",
    "const DirectUI::CCListView::`vftable'",
    "public: void __thiscall DirectUI::Macro::SetDataEntry(struct DirectUI::IDataEntry *,class DirectUI::Element *)",
    "protected: void __thiscall DirectUI::Expando::UpdateChildren(class DirectUI::Value *)",
    "public: class DirectUI::Pages & __thiscall DirectUI::Pages::operator=(class DirectUI::Pages const &)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_ParseValue(struct DirectUI::PropertyInfo const *,unsigned short const *,class DirectUI::Value * *)",
    "public: long __thiscall DirectUI::Page::Initialize(class DirectUI::Element *,unsigned long *)",
    "CreateDUIWrapper",
    "public: virtual __thiscall DirectUI::AnimationStrip::~AnimationStrip(void)",
    "public: void __thiscall DirectUI::HWNDElement::SetFocus(bool)",
    "public: __thiscall DirectUI::ResourceModuleHandles::ResourceModuleHandles(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::CreateXmlReaderInputWithEncodingName(struct IStream *,unsigned short const *,struct IUnknown * *)",
    "public: virtual void __thiscall DirectUI::RichText::OnEvent(struct DirectUI::Event *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::TouchSelectItem::GetClassInfoPtr(void)",
    "protected: virtual void __thiscall DirectUI::Element::OnHosted(class DirectUI::Element *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::Element::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: long __thiscall DirectUI::TouchSlider::SetMetering(int)",
    "public: virtual __thiscall DirectUI::RangeValueProvider::~RangeValueProvider(void)",
    "public: virtual void __thiscall DirectUI::ScrollBar::_SelfLayoutDoLayout(int,int)",
    "const DirectUI::Expando::`vftable'",
    "public: bool __thiscall DirectUI::ModernProgressBar::IsIndependentAnimations(void)",
    "public: long __thiscall DirectUI::TouchSelect::OpenPopup(void)",
    "public: virtual __thiscall DirectUI::ModernProgressBar::~ModernProgressBar(void)",
    "public: static class UID __stdcall DirectUI::TouchScrollViewer::MapContentVisuals(void)",
    "public: virtual void __thiscall DirectUI::GridLayout::DoLayout(class DirectUI::Element *,int,int)",
    "public: virtual void __thiscall DirectUI::TouchScrollBar::PageDown(unsigned int)",
    "public: static long __stdcall DirectUI::TouchCheckBox::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnWmSettingChanged(unsigned int,long)",
    "protected: long __thiscall DirectUI::ElementProxy::GetContent(struct tagVARIANT *,struct IAccessible *)",
    "public: static int DirectUI::Schema::ValuePattern",
    "public: static long __stdcall DirectUI::Clipper::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual __thiscall DirectUI::InvokeProvider::~InvokeProvider(void)",
    "public: void __thiscall DirectUI::TouchSwitch::SetToggleValue(int,bool)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::ScrollProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::TextGlowSizeProp(void)",
    "public: __thiscall DirectUI::CCHScrollBar::CCHScrollBar(class DirectUI::CCHScrollBar const &)",
    "public: static long __stdcall DirectUI::HWNDElementAccessible::Create(class DirectUI::HWNDElement *,class DirectUI::DuiAccessible * *)",
    "public: void __thiscall DirectUI::Movie::Rewind(void)",
    "public: virtual long __thiscall DirectUI::XBaby::SetToHost(class DirectUI::Element *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Thumb::s_pClassInfo",
    "public: __thiscall DirectUI::ExpandoButtonGlyph::ExpandoButtonGlyph(void)",
    "public: __thiscall DirectUI::ScrollBarRangeValueProxy::ScrollBarRangeValueProxy(class DirectUI::ScrollBarRangeValueProxy const &)",
    "public: class DirectUI::AutoLock & __thiscall DirectUI::AutoLock::operator=(class DirectUI::AutoLock const &)",
    "public: virtual struct tagSIZE __thiscall DirectUI::Viewer::_SelfLayoutUpdateDesiredSize(int,int,class DirectUI::Surface *)",
    "public: static int DirectUI::Schema::Selection_Selection_Property",
    "public: virtual __thiscall DirectUI::NativeHWNDHost::~NativeHWNDHost(void)",
    "DUIDrawShadowText",
    "private: static union _RTL_RUN_ONCE DirectUI::CallstackTracker::s_initonceInit",
    "public: virtual void __thiscall DirectUI::Movie::Paint(struct HDC__ *,struct tagRECT const *,struct tagRECT const *,struct tagRECT *,struct tagRECT *)",
    "public: virtual void __thiscall DirectUI::XBaby::SetKeyFocus(void)",
    "public: struct HWND__ * __thiscall DirectUI::XElement::GetInnerHWND(void)",
    "public: class DirectUI::AutoButton & __thiscall DirectUI::AutoButton::operator=(class DirectUI::AutoButton const &)",
    "public: __thiscall DirectUI::Proxy::Proxy(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::ScrollBar::GetClassInfoPtr(void)",
    "public: long __thiscall DirectUI::DUIXmlParser::SetXML(unsigned short const *,struct HINSTANCE__ *,struct HINSTANCE__ *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchEditBase::IgnoredKeyCombosProp(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Combobox::s_pClassInfo",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchScrollViewer::SnapPointCollectionYProp(void)",
    "const DirectUI::HWNDHostAccessible::`vftable'{for `IAccIdentity'}",
    "public: __thiscall DirectUI::TableProvider::TableProvider(void)",
    "public: virtual bool __thiscall DirectUI::CCBaseScrollBar::GetProportional(void)",
    "public: void __thiscall DirectUI::Element::PaintContent(struct HDC__ *,struct tagRECT const *)",
    "public: __thiscall DirectUI::PatternProvider::PatternProvider(void)",
    "public: void __thiscall DirectUI::Element::InvokeAnimation(int,unsigned int)",
    "public: virtual bool __thiscall DirectUI::CCSysLink::OnReceivedDialogFocus(struct DirectUI::IDialogElement *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Bind::GetClassInfoPtr(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::GetTypeInfoCount(unsigned int *)",
    "private: static long __stdcall DirectUI::EventManager::HandleScrollPos(class DirectUI::Element *,struct IRawElementProviderSimple *,class DirectUI::Value *,class DirectUI::Value *)",
    "const DirectUI::SelectionItemProxy::`vftable'",
    "public: static enum DirectUI::Schema::Pattern __stdcall DirectUI::Schema::PatternFromPatternId(int)",
    "public: static class UID __stdcall DirectUI::Combobox::SelectionChange(void)",
    "public: __thiscall DirectUI::DUIFactory::DUIFactory(struct HWND__ *)",
    "public: bool __thiscall DirectUI::TouchSlider::GetIsPressed(void)",
    "public: int __thiscall DirectUI::Movie::GetPixelOffsetMode(void)",
    "public: long __thiscall DirectUI::TouchCheckBox::SetCheckedState(enum DirectUI::CheckedStateFlags)",
    "public: virtual long __stdcall DirectUI::SelectionItemProvider::RemoveFromSelection(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::TouchSelect::GetClassInfoPtr(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::PText::GetClassInfoW(void)",
    "public: virtual void __thiscall DirectUI::Button::OnInput(struct DirectUI::InputEvent *)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnEvent(struct DirectUI::Event *)",
    "public: long __thiscall DirectUI::Element::SetTooltip(bool)",
    "public: __thiscall DirectUI::NativeHWNDHost::NativeHWNDHost(void)",
    "private: void __thiscall DirectUI::TaskPage::FreeComCtl32(void)",
    "public: virtual void __thiscall DirectUI::TouchCheckBox::OnEvent(struct DirectUI::Event *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_ParseLayout(unsigned short const *,class DirectUI::Value * *)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetFont(class DirectUI::Value * *)",
    "public: __thiscall DirectUI::SelectionProxy::SelectionProxy(class DirectUI::SelectionProxy const &)",
    "public: virtual long __thiscall DirectUI::Pages::Add(class DirectUI::Element * *,unsigned int)",
    "public: int __thiscall DirectUI::Combobox::AddString(unsigned short const *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::ItemList::GetClassInfoPtr(void)",
    "public: static int DirectUI::Schema::MultipleViewPattern",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchScrollViewer::SnapIntervalXProp(void)",
    "public: virtual unsigned long __stdcall DirectUI::GridItemProvider::Release(void)",
    "public: bool __thiscall DirectUI::Element::GetWindowActive(void)",
    "public: long __thiscall DirectUI::Element::SetWidth(int)",
    "public: static unsigned int const DirectUI::XElement::s_uUnhandledSyscharMsg",
    "public: static void __stdcall DirectUI::Movie::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual bool __thiscall DirectUI::HWNDHost::GetKeyFocused(void)",
    "public: virtual int __thiscall DirectUI::CCBaseScrollBar::GetMinimum(void)",
    "public: static long __stdcall DirectUI::Navigator::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::RangeValueProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "protected: virtual void __thiscall DirectUI::RangeValueProxy::Init(class DirectUI::Element *)",
    "public: __thiscall DirectUI::ScrollItemProxy::ScrollItemProxy(class DirectUI::ScrollItemProxy const &)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::put_accValue(struct tagVARIANT,unsigned short *)",
    "public: __thiscall DirectUI::FontCache::FontCache(class DirectUI::FontCache const &)",
    "public: long __thiscall DirectUI::TouchSelect::SetItemHeightInPopup(int)",
    "const DirectUI::CCRadioButton::`vftable'",
    "public: long __thiscall DirectUI::Movie::SetInterpolationMode(int)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Repeater::GetClassInfoPtr(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_BuildFromBinary(class DirectUI::Element *,class DirectUI::Element *,unsigned short const *,unsigned long *,class DirectUI::Element * *)",
    "public: static void __stdcall DirectUI::ExpandoButtonGlyph::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "protected: virtual void __thiscall DirectUI::Element::OnUnHosted(class DirectUI::Element *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::WindowActiveProp(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetFloatOne(void)",
    "public: long __thiscall DirectUI::TouchScrollViewer::OverrideZoomThreshold(float,float,int)",
    "public: virtual long __stdcall DirectUI::ValueProvider::SetValue(unsigned short const *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseResStr(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::TouchCheckBox::GetClassInfoPtr(void)",
    "public: virtual long __stdcall DirectUI::XProvider::SetButtonClassAcceptsEnterKey(bool)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Expando::GetClassInfoW(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::XElement::GetClassInfoW(void)",
    "public: long __thiscall DirectUI::Edit::SetMaxLength(int)",
    "public: static class UID __stdcall DirectUI::HWNDElement::CompositionChange(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::FontSizeProp(void)",
    "protected: virtual void __thiscall DirectUI::ModernProgressBar::OnDestroy(void)",
    "public: virtual long __stdcall DirectUI::TableItemProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: virtual __thiscall DirectUI::HWNDElementAccessible::~HWNDElementAccessible(void)",
    "public: virtual void __thiscall DirectUI::Element::OnGroupChanged(int,bool)",
    "public: virtual void __thiscall DirectUI::TouchSelect::OnHosted(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::Element::SetAccValue(unsigned short const *)",
    "protected: virtual void __thiscall DirectUI::Element::RemoveTooltip(class DirectUI::Element *)",
    "public: virtual __thiscall DirectUI::SelectorNoDefault::~SelectorNoDefault(void)",
    "public: long __thiscall DirectUI::ScrollBar::SetVertical(bool)",
    "public: virtual bool __thiscall DirectUI::TouchEditBase::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: void __thiscall DirectUI::LinkedList::Remove(class DirectUI::LinkedListNode *)",
    "public: int __thiscall DirectUI::TouchSlider::GetTickCount(void)",
    "public: struct DirectUI::Fill const * __thiscall DirectUI::Value::GetFill(void)",
    "public: virtual bool __thiscall DirectUI::CCSysLink::OnLostDialogFocus(struct DirectUI::IDialogElement *)",
    "public: int __thiscall DirectUI::Element::GetHeight(void)",
    "private: static int (__stdcall* DirectUI::CallstackTracker::s_pfnSymFromAddr)(void *,unsigned __int64,unsigned __int64 *,struct _SYMBOL_INFO *)",
    "public: virtual void __thiscall DirectUI::TouchHyperLink::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "const DirectUI::ISBLeak::`vftable'",
    "public: virtual void __thiscall DirectUI::Element::GetImmersiveFocusRectOffsets(struct tagRECT *)",
    "public: bool __thiscall DirectUI::DialogElementCore::ClickDefaultButton(void)",
    "protected: virtual void __thiscall DirectUI::Element::UpdateTooltip(class DirectUI::Element *)",
    "public: class DirectUI::RowLayout & __thiscall DirectUI::RowLayout::operator=(class DirectUI::RowLayout const &)",
    "public: class DirectUI::Value * __thiscall DirectUI::Element::GetValue(struct DirectUI::PropertyInfo const * (__stdcall*)(void),int,struct DirectUI::UpdateCache *)",
    "public: __thiscall DirectUI::TouchSelectItem::TouchSelectItem(void)",
    "public: long __thiscall DirectUI::Combobox::SetSelection(int)",
    "public: long __thiscall DirectUI::Element::SetBorderStyle(int)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetAllowArrowOut(bool)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetSnapPointCollectionY(double const *,int)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetAtomZero(void)",
    "private: long __thiscall DirectUI::ScrollProxy::GetScrollable(bool,int *)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::ScrollItemProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: virtual bool __thiscall DirectUI::Viewer::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual bool __thiscall DirectUI::CheckBoxGlyph::OnLostDialogFocus(struct DirectUI::IDialogElement *)",
    "public: static long __stdcall DirectUI::TouchSwitch::Register(void)",
    "public: static long __stdcall DirectUI::TouchCommandButton::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: class DirectUI::FontCache & __thiscall DirectUI::FontCache::operator=(class DirectUI::FontCache const &)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accFocus(struct tagVARIANT *)",
    "const DirectUI::ValueProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "private: bool __thiscall DirectUI::Viewer::_InternalEnsureVisible(int,int,int,int)",
    "public: __thiscall DirectUI::Navigator::Navigator(void)",
    "public: static int DirectUI::Schema::SliderControlType",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCRadioButton::GetClassInfoPtr(void)",
    "public: struct tagRECT const * __thiscall DirectUI::Element::GetMargin(class DirectUI::Value * *)",
    "public: bool __thiscall DirectUI::BaseScrollViewer::GetYScrollable(void)",
    "public: virtual long __thiscall DirectUI::XBaby::GetHostedElementID(unsigned short *)",
    "private: static long __stdcall DirectUI::EventManager::AddRectangleChange(class DirectUI::Element *,bool,bool)",
    "public: static int DirectUI::Schema::RangeValue_Value_Property",
    "public: static long __stdcall DirectUI::CCSysLink::Register(void)",
    "public: struct tagSIZE const * __thiscall DirectUI::Element::GetDesiredSize(void)",
    "public: virtual int __thiscall DirectUI::ClassInfoBase::Release(void)",
    "public: static int DirectUI::Schema::ItemTypeProperty",
    "public: __thiscall DirectUI::Browser::Browser(class DirectUI::Browser const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCBaseScrollBar::MaximumProp(void)",
    "public: long __thiscall DirectUI::Element::SetX(int)",
    "protected: virtual long __thiscall DirectUI::TaskPage::OnWizFinish(void)",
    "public: long __thiscall DirectUI::Element::SetTextGlowSize(int)",
    "public: static long __stdcall DirectUI::TouchCheckBox::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCListView::GetClassInfoW(void)",
    "public: class DirectUI::CCBase & __thiscall DirectUI::CCBase::operator=(class DirectUI::CCBase const &)",
    "public: static long __stdcall DirectUI::UnknownElement::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Thumb::GetClassInfoW(void)",
    "public: static int DirectUI::Schema::RangeValue_IsReadOnly_Property",
    "public: __thiscall DirectUI::ElementProxy::ElementProxy(class DirectUI::ElementProxy const &)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::Element::GetUiaFocusDelegate(void)",
    "public: static long __stdcall DirectUI::XElement::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual long __thiscall DirectUI::TouchEditBase::Insert(class DirectUI::Element * *,unsigned int,unsigned int)",
    "public: class DirectUI::TextGraphic & __thiscall DirectUI::TextGraphic::operator=(class DirectUI::TextGraphic const &)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_RecordElementBehaviors(struct IXmlReader *,unsigned short const *)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accDefaultAction(struct tagVARIANT,unsigned short * *)",
    "public: virtual unsigned short const * __thiscall DirectUI::ClassInfoBase::GetName(void)const",
    "public: virtual void __thiscall DirectUI::TouchHWNDElement::OnKeyFocusMoved(class DirectUI::Element *,class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::FlowLayout::Create(int,int *,class DirectUI::Value * *)",
    "public: virtual void __thiscall DirectUI::TouchButton::OnUnHosted(class DirectUI::Element *)",
    "public: __thiscall DirectUI::BaseScrollViewer::BaseScrollViewer(void)",
    "public: static long __stdcall DirectUI::InvokeManager::GetInvokeHelper(class DirectUI::InvokeHelper * *)",
    "public: virtual long __stdcall DirectUI::GridItemProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: __thiscall DirectUI::TouchHWNDElement::TouchHWNDElement(void)",
    "public: struct HGADGET__ * __thiscall DirectUI::Element::GetDisplayNode(void)",
    "public: class DirectUI::DialogElement & __thiscall DirectUI::DialogElement::operator=(class DirectUI::DialogElement const &)",
    "public: static class UID __stdcall DirectUI::PVLAnimation::CustomDragDropScalingHint(void)",
    "public: static int DirectUI::Schema::Table_RowHeaders_Property",
    "public: virtual __thiscall DirectUI::HWNDElementProvider::~HWNDElementProvider(void)",
    "public: class DirectUI::CCProgressBar & __thiscall DirectUI::CCProgressBar::operator=(class DirectUI::CCProgressBar const &)",
    "protected: virtual void __thiscall DirectUI::InvokeProxy::Init(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::Element::SetAccItemType(unsigned short const *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateColor(unsigned long)",
    "public: void __thiscall DirectUI::Movie::Pause(void)",
    "public: __thiscall DirectUI::TextGraphic::TextGraphic(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCVScrollBar::GetClassInfoPtr(void)",
    "public: static int DirectUI::Schema::PaneControlType",
    "public: long __thiscall DirectUI::TouchSlider::SetTickCount(int)",
    "public: static bool __stdcall DirectUI::Element::_SetGroupChanges(class DirectUI::Element *,int,class DirectUI::DeferCycle *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseSysMetricInt(struct DirectUI::ParserTools::ExprNode const *,int *)",
    "public: struct DirectUI::IDataEngine & __thiscall DirectUI::IDataEngine::operator=(struct DirectUI::IDataEngine const &)",
    "public: virtual long __stdcall DirectUI::GridItemProvider::get_ContainingGrid(struct IRawElementProviderSimple * *)",
    "public: virtual __thiscall DirectUI::CCRadioButton::~CCRadioButton(void)",
    "public: static void __stdcall DirectUI::Element::_TransferGroupFlags(class DirectUI::Element *,int)",
    "public: class DirectUI::Progress & __thiscall DirectUI::Progress::operator=(class DirectUI::Progress const &)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetAccDefAction(class DirectUI::Value * *)",
    "public: virtual long __stdcall DirectUI::ExpandCollapseProvider::Collapse(void)",
    "public: virtual bool __thiscall DirectUI::CCCheckBox::OnNotify(unsigned int,unsigned int,long,long *)",
    "public: static int DirectUI::Schema::MenuItemControlType",
    "const DirectUI::Viewer::`vftable'",
    "public: virtual void __thiscall DirectUI::HWNDHost::OnWindowStyleChanged(unsigned int,struct tagSTYLESTRUCT const *)",
    "public: static void __stdcall DirectUI::CCPushButton::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: long __thiscall DirectUI::TouchSelect::UpdateString(int,unsigned short const *)",
    "public: static long __stdcall DirectUI::CCBase::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::AnimationStrip::GetClassInfoPtr(void)",
    "public: virtual long __stdcall DirectUI::ElementProvider::QueryInterface(struct _GUID const &,void * *)",
    "protected: static long __stdcall DirectUI::HWNDHost::CtrlSubclassProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "private: long __thiscall DirectUI::TaskPage::LoadPage(class DirectUI::Element * *,class DirectUI::Element *,class DirectUI::DUIXmlParser * *)",
    "public: int __thiscall DirectUI::TouchEditBase::GetMaxLength(void)",
    "public: virtual long __stdcall DirectUI::SelectionItemProvider::QueryInterface(struct _GUID const &,void * *)",
    "protected: void __thiscall DirectUI::DUIXmlParser::SendParseError(unsigned short const *,unsigned short const *,int,int,long)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCBase::GetClassInfoPtr(void)",
    "public: struct DirectUI::IDataEntry * __thiscall DirectUI::Macro::GetDataEntry(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::RadioButtonGlyph::GetClassInfoW(void)",
    "public: class DirectUI::InvokeProxy & __thiscall DirectUI::InvokeProxy::operator=(class DirectUI::InvokeProxy const &)",
    "public: void __thiscall DirectUI::RichText::SetCache(unsigned long,struct IDUIRichTextCache *)",
    "public: static long (__stdcall* DirectUI::Schema::UiaReturnRawElementProvider)(struct HWND__ *,unsigned int,long,struct IRawElementProviderSimple *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchScrollViewer::SnapOffsetXProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::MarginProp(void)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCListView::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::BorderLayout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: static class UID __stdcall DirectUI::TouchEditBase::Paste(void)",
    "public: void __thiscall DirectUI::Element::InvokeAnimation(unsigned int,unsigned int,float,float,bool)",
    "public: __thiscall DirectUI::TableItemProxy::TableItemProxy(void)",
    "public: long __thiscall DirectUI::Element::SetAlpha(int)",
    "ForceDebugBreak",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::AccessibleButton::GetClassInfoW(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accSelection(struct tagVARIANT *)",
    "public: __thiscall DirectUI::FillLayout::FillLayout(void)",
    "public: int __thiscall DirectUI::CCTrackBar::GetLineSize(void)",
    "public: virtual void __thiscall DirectUI::ItemList::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "private: long __thiscall DirectUI::ScrollProxy::Scroll(enum ScrollAmount,enum ScrollAmount)",
    "public: __thiscall DirectUI::CCTreeView::CCTreeView(class DirectUI::CCTreeView const &)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accValue(struct tagVARIANT,unsigned short * *)",
    "public: virtual void __thiscall DirectUI::HWNDHost::OnDestroy(void)",
    "public: virtual struct tagSIZE __thiscall DirectUI::RichText::GetContentSize(int,int,class DirectUI::Surface *)",
    "private: static int const DirectUI::CallstackTracker::STACKDEPTH",
    "public: virtual bool __thiscall DirectUI::CCBaseCheckRadioButton::OnLostDialogFocus(struct DirectUI::IDialogElement *)",
    "public: virtual __thiscall DirectUI::TextGraphic::~TextGraphic(void)",
    "public: void __thiscall DirectUI::Expression::Destroy(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCBaseCheckRadioButton::GetClassInfoPtr(void)",
    "public: static class UID __stdcall DirectUI::TouchScrollBar::InteractionStart(void)",
    "public: int __thiscall DirectUI::TouchSlider::GetVisualState(void)",
    "private: long __thiscall DirectUI::ShellBorderLayout::_CalcTabOrder(class DirectUI::Element *)",
    "public: static int DirectUI::Schema::DocumentControlType",
    "public: long __thiscall DirectUI::TouchEdit2::SetInputScope(enum __MIDL___MIDL_itf_inputscope_0000_0000_0001)",
    "public: class DirectUI::Page & __thiscall DirectUI::Page::operator=(class DirectUI::Page const &)",
    "public: void __thiscall DirectUI::VerticalFlowLayout::Initialize(bool,unsigned int,unsigned int,unsigned int)",
    "RegisterMiscControls",
    "public: __thiscall DirectUI::CCRadioButton::CCRadioButton(class DirectUI::CCRadioButton const &)",
    "private: long __thiscall DirectUI::ScrollProxy::GetViewSize(bool,double *)",
    "const DirectUI::ElementWithHWND::`vftable'",
    "public: static long __stdcall DirectUI::CCCommandLink::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: float __thiscall DirectUI::Element::GetTreeAlphaLevel(void)",
    "public: static int DirectUI::Schema::MenuClosedEvent",
    "public: static int DirectUI::Schema::NullControlType",
    "public: virtual __thiscall DirectUI::Browser::~Browser(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCBaseCheckRadioButton::s_pClassInfo",
    "public: void __thiscall DirectUI::Element::UpdateLayout(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::GetPropValPairInfo(struct IXmlReader *,struct DirectUI::IClassInfo *,unsigned short const *,unsigned short const *,struct DirectUI::PropertyInfo const * *,class DirectUI::Value * *)",
    "private: static int __stdcall DirectUI::InvokeHelper::_WndProc(void *,struct HWND__ *,unsigned int,unsigned int,long,long *)",
    "public: class DirectUI::Bind & __thiscall DirectUI::Bind::operator=(class DirectUI::Bind const &)",
    "public: class DirectUI::Element * __thiscall DirectUI::Element::GetRoot(void)",
    "public: static class UID __stdcall DirectUI::TouchHWNDElement::TooltipTimerStarting(void)",
    "public: static long __stdcall DirectUI::TouchHyperLink::Register(void)",
    "public: virtual long __stdcall DirectUI::ScrollItemProvider::ScrollIntoView(void)",
    "public: virtual long __stdcall DirectUI::ScrollProvider::get_VerticalViewSize(double *)",
    "public: __thiscall DirectUI::GridProxy::GridProxy(void)",
    "public: long __thiscall DirectUI::TouchHWNDElement::Initialize(struct HWND__ *,bool,unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: virtual long __thiscall DirectUI::DialogElement::SetDefaultButtonTracking(bool)",
    "public: virtual void __thiscall DirectUI::TouchSelect::OnInput(struct DirectUI::InputEvent *)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnThemeChanged(struct DirectUI::ThemeChangedEvent *)",
    "public: __thiscall DirectUI::CCListView::CCListView(class DirectUI::CCListView const &)",
    "protected: long __thiscall DirectUI::HWNDElementProxy::ElementFromPoint(double,double,struct IRawElementProviderFragment * *)",
    "public: bool __thiscall DirectUI::Element::HasBorder(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateInt(int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::HWNDElement::WrapKeyboardNavigateProp(void)",
    "public: virtual long __stdcall DirectUI::XProvider::SetParameter(struct _GUID const &,void *)",
    "private: void __thiscall DirectUI::Element::_BroadcastEventWorker(struct DirectUI::Event *)",
    "public: static class UID __stdcall DirectUI::PVLAnimation::ReflowStyle(void)",
    "public: unsigned short const * __thiscall DirectUI::Movie::GetPath(class DirectUI::Value * *)",
    "public: long __thiscall DirectUI::Element::SetFontWeight(int)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCRadioButton::s_pClassInfo",
    "const DirectUI::HWNDHostClientAccessible::`vftable'{for `IAccessible'}",
    "protected: virtual void __thiscall DirectUI::TaskPage::OnListenedInput(class DirectUI::Element *,struct DirectUI::InputEvent *)",
    "public: virtual __thiscall DirectUI::XElement::~XElement(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccHelpProp(void)",
    "public: virtual long __stdcall DirectUI::XProvider::SetDefaultButtonTracking(bool)",
    "public: virtual long __thiscall DirectUI::HWNDElementAccessible::Disconnect(void)",
    "public: void __thiscall DirectUI::TouchSlider::EraseFeedback(void)",
    "public: static void __stdcall DirectUI::EventManager::DestroyListener(class DirectUI::Element *)",
    "private: static long volatile DirectUI::ResourceModuleHandles::g_cRefCount",
    "public: int __thiscall DirectUI::Element::GetBackgroundStdColor(void)",
    "protected: virtual void __thiscall DirectUI::ScrollItemProxy::Init(class DirectUI::Element *)",
    "protected: long __thiscall DirectUI::ElementProxy::GetFragmentRoot(struct IRawElementProviderFragmentRoot * *)",
    "public: class DirectUI::ExpandCollapseProxy & __thiscall DirectUI::ExpandCollapseProxy::operator=(class DirectUI::ExpandCollapseProxy const &)",
    "public: int __thiscall DirectUI::CCTrackBar::GetThumbPosition(void)",
    "public: static int (__stdcall* DirectUI::Schema::UiaLookupId)(enum AutomationIdentifierType,struct _GUID const *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseMagnitude(unsigned short const *,int *)",
    "const DirectUI::CCTreeView::`vftable'",
    "public: __thiscall DirectUI::LinkedList::LinkedList(void)",
    "protected: virtual long __thiscall DirectUI::TaskPage::LoadParser(class DirectUI::DUIXmlParser * *)",
    "public: __thiscall DirectUI::Macro::Macro(class DirectUI::Macro const &)",
    "public: class DirectUI::Element * __thiscall DirectUI::Pages::GetPage(unsigned int)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetAccValue(class DirectUI::Value * *)",
    "public: __thiscall DirectUI::RichText::RichText(void)",
    "public: int __thiscall DirectUI::Element::GetY(void)",
    "public: long __thiscall DirectUI::HWNDHost::SetOptimizeMove(bool)",
    "public: int __thiscall DirectUI::BaseScrollViewer::GetXOffset(void)",
    "public: long __thiscall DirectUI::DUIXmlParser::SetXMLFromResource(unsigned int,unsigned short const *,struct HINSTANCE__ *,struct HINSTANCE__ *)",
    "public: static long __stdcall DirectUI::EventManager::AdviseEventAdded(int,struct tagSAFEARRAY *)",
    "public: virtual bool __thiscall DirectUI::ClassInfoBase::IsValidProperty(struct DirectUI::PropertyInfo const *)const",
    "public: __thiscall DirectUI::CCHScrollBar::CCHScrollBar(void)",
    "public: class DirectUI::Expandable & __thiscall DirectUI::Expandable::operator=(class DirectUI::Expandable const &)",
    "public: static void __stdcall DirectUI::ScrollBar::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual unsigned short const * __thiscall DirectUI::TouchEditBase::GetContentStringAsDisplayed(class DirectUI::Value * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseQuotedString(struct DirectUI::ParserTools::ExprNode const *,unsigned short const * *)",
    "public: void __thiscall DirectUI::DUIXmlParser::SetUnknownAttrCallback(bool (__stdcall*)(unsigned short const *,void *),void *)",
    "PurgeThemeHandles",
    "public: long __thiscall DirectUI::Value::GetEncodedString(unsigned short *,unsigned int)",
    "public: static void __stdcall DirectUI::Layout::UpdateLayoutRect(class DirectUI::Element *,int,int,class DirectUI::Element *,int,int,int,int)",
    "public: long __thiscall DirectUI::TouchHWNDElement::RegisterForMonitorPowerChanges(void)",
    "private: static int __stdcall DirectUI::CallstackTracker::InitializeDllInfo(void)",
    "public: virtual __thiscall DirectUI::UnknownElement::~UnknownElement(void)",
    "public: __thiscall DirectUI::NativeHWNDHost::NativeHWNDHost(class DirectUI::NativeHWNDHost const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::RichText::FontColorRunsProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCBaseScrollBar::PageProp(void)",
    "private: int __thiscall DirectUI::TaskPage::OnWndMsg(unsigned int,unsigned int,long,long *)",
    "protected: long __thiscall DirectUI::AnimationStrip::LoadImagesIntoAnimationStrip(void)",
    "public: class DirectUI::BaseScrollViewer & __thiscall DirectUI::BaseScrollViewer::operator=(class DirectUI::BaseScrollViewer const &)",
    "protected: __thiscall DirectUI::ProviderProxy::ProviderProxy(void)",
    "public: struct tagRECT const * __thiscall DirectUI::Element::GetBorderThickness(class DirectUI::Value * *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Pages::GetClassInfoW(void)",
    "public: virtual void __thiscall DirectUI::BaseScrollViewer::OnListenedPropertyChanged(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: int __thiscall DirectUI::Element::GetColorize(void)",
    "public: bool __thiscall DirectUI::BaseScrollBar::IsScrollable(void)",
    "public: virtual __thiscall DirectUI::TaskPage::~TaskPage(void)",
    "const DirectUI::NavigatorSelectionItemProxy::`vftable'",
    "private: virtual long __thiscall DirectUI::TaskPage::CreateParserCP(class DirectUI::DUIXmlParser * *)",
    "protected: virtual void __thiscall DirectUI::TaskPage::InitPropSheetPage(struct _PROPSHEETPAGEW *)",
    "public: __thiscall DirectUI::BorderLayout::BorderLayout(class DirectUI::BorderLayout const &)",
    "public: virtual bool __thiscall DirectUI::Element::OnPropertyChanging(struct DirectUI::PropertyInfo *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: class DirectUI::Macro & __thiscall DirectUI::Macro::operator=(class DirectUI::Macro const &)",
    "public: bool __thiscall DirectUI::TouchScrollViewer::IsManualVisualSwapInProgress(void)",
    "private: static long __stdcall DirectUI::EventManager::HandleAccStateChange(struct IRawElementProviderSimple *,unsigned int,unsigned int,int,struct tagVARIANT *,struct tagVARIANT *,bool)",
    "private: static unsigned short (__stdcall* DirectUI::CallstackTracker::s_pfnRtlCaptureStackBackTrace)(unsigned long,unsigned long,void * *,unsigned long *)",
    "public: class DirectUI::Element * __thiscall DirectUI::Element::GetParent(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::RepeatButton::GetClassInfoW(void)",
    "protected: long __cdecl DirectUI::ElementProvider::DoInvoke(int,...)",
    "public: int __thiscall DirectUI::Element::GetLayoutPos(void)",
    "public: static long __stdcall DirectUI::CCBase::Register(void)",
    "public: virtual struct tagSIZE __thiscall DirectUI::FillLayout::UpdateDesiredSize(class DirectUI::Element *,int,int,class DirectUI::Surface *)",
    "const DirectUI::HWNDElementAccessible::`vftable'{for `IAccIdentity'}",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCProgressBar::s_pClassInfo",
    "private: void __thiscall DirectUI::CallstackTracker::FillSymbolInfo(struct DirectUI::CallstackTracker::STACK_SYMBOL_INFO *,unsigned __int64)",
    "public: __thiscall DirectUI::AccessibleButton::AccessibleButton(class DirectUI::AccessibleButton const &)",
    "public: __thiscall DirectUI::BorderLayout::BorderLayout(void)",
    "private: long __thiscall DirectUI::ScrollProxy::ScrollLine(bool,bool)",
    "public: class DirectUI::BrowserSelectionProxy & __thiscall DirectUI::BrowserSelectionProxy::operator=(class DirectUI::BrowserSelectionProxy const &)",
    "public: long __thiscall DirectUI::TouchRepeatButton::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateBool(bool)",
    "public: virtual __thiscall DirectUI::Combobox::~Combobox(void)",
    "public: virtual long __thiscall DirectUI::RangeValueProxy::DoMethod(int,char *)",
    "private: static long __stdcall DirectUI::EventManager::HandleToggleValue(class DirectUI::Element *,struct IRawElementProviderSimple *,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Page::GetClassInfoW(void)",
    "public: static int DirectUI::Schema::GridItem_Row_Property",
    "public: virtual void __thiscall DirectUI::DialogElement::OnListenerDetach(class DirectUI::Element *)",
    "public: void __thiscall DirectUI::DialogElementCore::OnKeyFocusMoved(class DirectUI::Element *,class DirectUI::Element *)",
    "protected: bool __thiscall DirectUI::Layout::IsCacheDirty(void)",
    "public: virtual void __thiscall DirectUI::TouchScrollBar::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual struct HWND__ * __thiscall DirectUI::HWNDElement::GetHWND(void)",
    "public: void __thiscall DirectUI::TouchSlider::SetRespectLanguageDirection(bool)",
    "public: static long (__stdcall* DirectUI::Schema::UiaHostProviderFromHwnd)(struct HWND__ *,struct IRawElementProviderSimple * *)",
    "public: static class UID __stdcall DirectUI::ContextMenuBehavior::ContextMenuRequested(void)",
    "public: static int DirectUI::Schema::IsKeyboardFocusableProperty",
    "public: virtual void __thiscall DirectUI::TouchEditBase::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: long __thiscall DirectUI::TouchSwitch::SetTitleText(unsigned short const *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseFillValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: static class DirectUI::Element * __stdcall DirectUI::RefPointElement::FindRefPoint(class DirectUI::Element *,struct tagPOINT *)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::QueryInterface(struct _GUID const &,void * *)",
    "public: class DirectUI::CCHScrollBar & __thiscall DirectUI::CCHScrollBar::operator=(class DirectUI::CCHScrollBar const &)",
    "public: void __thiscall DirectUI::Element::EnableUiaEvents(bool)",
    "public: long __thiscall DirectUI::CCTrackBar::SetLineSize(int)",
    "public: void __thiscall DirectUI::DUIXmlParser::_DestroyTables(void)",
    "public: virtual void __thiscall DirectUI::BaseScrollViewer::OnListenedEvent(class DirectUI::Element *,struct DirectUI::Event *)",
    "public: void __thiscall DirectUI::Pages::SetNoBrowseOnFirstAdd(void)",
    "protected: virtual void __thiscall DirectUI::TaskPage::OnListenerAttach(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::RadioButtonGlyph::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: bool __thiscall DirectUI::HWNDElement::ShowAccel(void)",
    "public: int __thiscall DirectUI::BaseScrollBar::GetPageInc(void)",
    "public: void __thiscall DirectUI::CCTreeView::`default constructor closure'(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCTrackBar::RangeMinProp(void)",
    "private: static long __stdcall DirectUI::TaskPage::StaticXHostSubclassProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: virtual bool __thiscall DirectUI::XElement::OnSinkThemeChanged(unsigned int,unsigned int,long,long *)",
    "public: __thiscall DirectUI::ProviderProxy::ProviderProxy(class DirectUI::ProviderProxy const &)",
    "private: void __thiscall DirectUI::ShellBorderLayout::_Reset(void)",
    "private: void __thiscall DirectUI::DUIXmlParser::SetParseState(enum DirectUI::_DUI_PARSE_STATE)",
    "protected: long __thiscall DirectUI::ElementProxy::IsPatternSupported(enum DirectUI::Schema::Pattern,bool *)",
    "public: virtual void __thiscall DirectUI::PushButton::OnUnHosted(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::Expandable::Register(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Element::s_pClassInfo",
    "public: long __thiscall DirectUI::CCTrackBar::SetRangeMax(int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccNameProp(void)",
    "public: struct DirectUI::Fill const * __thiscall DirectUI::Element::GetForegroundColor(class DirectUI::Value * *)",
    "public: virtual class DirectUI::Element const volatile * __thiscall DirectUI::ElementProvider::GetElement(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::GetIdentityString(unsigned long,unsigned char * *,unsigned long *)",
    "public: virtual long __thiscall DirectUI::TouchEditBase::RefreshContent(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Expando::s_pClassInfo",
    "public: virtual int __thiscall DirectUI::Combobox::OnAdjustWindowSize(int,int,unsigned int)",
    "public: long __thiscall DirectUI::TouchEdit2::SetShowClearButtonMinWidth(int)",
    "protected: struct DirectUI::LINEINFO __thiscall DirectUI::DUIXmlParser::_GetLineInfo(struct IXmlReader *)",
    "const DirectUI::CCCommandLink::`vftable'",
    "public: static class UID __stdcall DirectUI::Element::DCompDeviceRebuilt(void)",
    "public: void __thiscall DirectUI::HWNDElement::ToggleUIState(bool,bool)",
    "public: void __thiscall CSafeElementProxy::Detach(void)",
    "public: virtual void __thiscall DirectUI::HWNDElementProxy::Init(class DirectUI::HWNDElement *)",
    "private: long __thiscall DirectUI::Element::_PreSourceChange(struct DirectUI::PropertyInfo const * (__stdcall*)(void),int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: __thiscall DirectUI::Macro::Macro(void)",
    "public: static void __stdcall DirectUI::Macro::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static long __stdcall DirectUI::TouchCheckBox::Register(void)",
    "public: __thiscall DirectUI::XElement::XElement(void)",
    "private: static long __stdcall DirectUI::EventManager::HandleBoolProp(class DirectUI::Element *,bool (__stdcall*)(class DirectUI::Element *),struct IRawElementProviderSimple *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static enum DirectUI::Surface::EType __stdcall DirectUI::Surface::GetSurfaceType(unsigned int)",
    "public: virtual bool __thiscall DirectUI::CCBase::OnCustomDraw(struct tagNMCUSTOMDRAWINFO *,long *)",
    "public: static long __stdcall DirectUI::Edit::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static long __stdcall DirectUI::ShellBorderLayout::Create(class DirectUI::Layout * *)",
    "public: virtual void __thiscall DirectUI::ClassInfoBase::RemoveChild(void)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCVScrollBar::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: long __thiscall DirectUI::Element::SetAccessible(bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ModernProgressBar::StateProp(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Element::GetClassInfoPtr(void)",
    "const DirectUI::ScrollProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: virtual void __thiscall DirectUI::Element::HandleUiaPropertyChangingListener(struct DirectUI::PropertyInfo const *)",
    "public: static int DirectUI::Schema::ClassNameProperty",
    "protected: long __thiscall DirectUI::DUIXmlParser::_RecordElementTrees(struct IXmlReader *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Movie::GetClassInfoW(void)",
    "public: long __thiscall DirectUI::TouchSelect::AddString(unsigned short const *,class DirectUI::Element * *)",
    "public: class DirectUI::Expression * __thiscall DirectUI::Value::GetExpression(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCBaseScrollBar::MinimumProp(void)",
    "public: __thiscall DirectUI::TouchCommandButton::TouchCommandButton(void)",
    "public: __thiscall DirectUI::DialogElement::DialogElement(void)",
    "GetFontCache",
    "public: static long __stdcall DirectUI::TouchScrollBar::Register(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::TouchCommandButton::GetClassInfoW(void)",
    "public: static class UID __stdcall DirectUI::TouchHWNDElement::IHMNotify(void)",
    "public: __thiscall DirectUI::Expandable::Expandable(void)",
    "const DirectUI::XBaby::`vftable'",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseLiteralColor(unsigned short const *,unsigned long *)",
    "public: __thiscall DirectUI::XBaby::XBaby(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseBehavior(struct DirectUI::ParserTools::ExprNode const *)",
    "public: static int DirectUI::Schema::IsContentElementProperty",
    "protected: virtual void __thiscall DirectUI::TableItemProxy::Init(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::Element::SetEdgeHighlightColor(unsigned long)",
    "public: static class UID __stdcall DirectUI::SemanticZoomToggle::Toggle(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::TouchEdit2::GetClassInfoPtr(void)",
    "public: virtual __thiscall DirectUI::CCBaseScrollBar::~CCBaseScrollBar(void)",
    "public: virtual bool __thiscall DirectUI::CCBase::OnReceivedDialogFocus(struct DirectUI::IDialogElement *)",
    "public: virtual long __thiscall DirectUI::TouchButton::GetForegroundColorRef(unsigned long *)",
    "public: virtual unsigned short const * __thiscall DirectUI::Element::GetContentStringAsDisplayed(class DirectUI::Value * *)",
    "private: long __thiscall DirectUI::ScrollProxy::GetScrollPercent(bool,double *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Pages::GetClassInfoPtr(void)",
    "public: long __thiscall DirectUI::TouchSelectItem::GetItemData(struct IUnknown * *)",
    "public: __thiscall DirectUI::CritSecLock::~CritSecLock(void)",
    "public: static long __stdcall DirectUI::CCAVI::Register(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::HWNDElement::s_pClassInfo",
    "public: __thiscall DirectUI::CCTrackBar::CCTrackBar(void)",
    "const DirectUI::ScrollViewer::`vftable'{for `DirectUI::Element'}",
    "public: long __thiscall DirectUI::XProvider::CreateParser(class DirectUI::DUIXmlParser * *)",
    "public: static void __stdcall DirectUI::Navigator::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::BaseScrollViewer::YOffsetProp(void)",
    "public: long __thiscall DirectUI::Movie::SetAutoStart(bool)",
    "public: void __thiscall DirectUI::TouchHWNDElement::UsePerMonitorScaling(struct HMONITOR__ *)",
    "public: static void __stdcall DirectUI::ElementProviderManager::Remove(class DirectUI::ElementProvider *)",
    "private: static bool __stdcall DirectUI::EventManager::WantEvent(enum DirectUI::Schema::Event,int)",
    "public: virtual void __thiscall DirectUI::TouchCommandButton::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: bool __thiscall DirectUI::ModernProgressRing::IsActivityOccuring(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCHScrollBar::GetClassInfoW(void)",
    "public: static void __stdcall DirectUI::Movie::RawActionProc(struct GMA_ACTIONINFO *)",
    "protected: __thiscall DirectUI::RangeValueProxy::RangeValueProxy(void)",
    "public: class DirectUI::Element & __thiscall DirectUI::Element::operator=(class DirectUI::Element const &)",
    "RegisterXControls",
    "public: static class DirectUI::Element * __stdcall DirectUI::DuiAccessible::GetAccessibleParent(class DirectUI::Element *)",
    "public: void __thiscall DirectUI::Movie::Forward(void)",
    "public: long __thiscall DirectUI::Movie::LoadFromPath(unsigned short const *)",
    "public: __thiscall DirectUI::HWNDElementAccessible::HWNDElementAccessible(void)",
    "public: class DirectUI::CCTreeView & __thiscall DirectUI::CCTreeView::operator=(class DirectUI::CCTreeView const &)",
    "public: long __thiscall DirectUI::DUIXmlParser::LookupElement(struct DirectUI::LINEINFO,unsigned short const *,struct HINSTANCE__ *,struct DirectUI::IClassInfo * *)",
    "public: long __thiscall DirectUI::TouchHWNDElement::DismissIHMAsync(void)",
    "public: struct DirectUI::ISBLeak & __thiscall DirectUI::ISBLeak::operator=(struct DirectUI::ISBLeak const &)",
    "public: class DirectUI::ElementProviderManager & __thiscall DirectUI::ElementProviderManager::operator=(class DirectUI::ElementProviderManager const &)",
    "protected: virtual void __thiscall DirectUI::BrowserSelectionProxy::Init(class DirectUI::Element *)",
    "public: __thiscall DirectUI::SelectorSelectionItemProxy::SelectorSelectionItemProxy(class DirectUI::SelectorSelectionItemProxy const &)",
    "public: class DirectUI::ScrollViewer & __thiscall DirectUI::ScrollViewer::operator=(class DirectUI::ScrollViewer const &)",
    "protected: long __thiscall DirectUI::ElementProxy::GetHwnd(struct HWND__ * *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateExpression(class DirectUI::Expression *)",
    "public: static long __stdcall DirectUI::CCTrackBar::Register(void)",
    "const DirectUI::CCCheckBox::`vftable'",
    "const DirectUI::TaskPage::`vftable'{for `DirectUI::IXProviderCP'}",
    "public: virtual __thiscall DirectUI::CCCommandLink::~CCCommandLink(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccDefActionProp(void)",
    "public: static long __stdcall DirectUI::XResourceProvider::Create(struct HINSTANCE__ *,unsigned short const *,unsigned short const *,unsigned short const *,class DirectUI::XResourceProvider * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Viewer::YScrollableProp(void)",
    "protected: static void __stdcall DirectUI::Element::_InvalidateCachedDSConstraints(class DirectUI::Element *)",
    "public: static int DirectUI::Schema::Value_IsReadOnly_Property",
    "public: virtual bool __thiscall DirectUI::BaseScrollViewer::OnListenedPropertyChanging(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: long __thiscall DirectUI::BaseScrollViewer::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetSizeZero(void)",
    "public: static long __stdcall DirectUI::CCPushButton::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static void __stdcall DirectUI::UnknownElement::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::CreateXmlReader(struct IXmlReader * *)",
    "protected: virtual long __thiscall DirectUI::TaskPage::OnWizNext(void)",
    "const DirectUI::XBaby::`vftable'{for `DirectUI::HWNDElement'}",
    "private: static int __stdcall DirectUI::CallstackTracker::DllsLoaded(void)",
    "public: static class UID __stdcall DirectUI::TouchHWNDElement::ForwardingWindowMessage(void)",
    "public: static long __stdcall DirectUI::DuiAccessible::Create(class DirectUI::Element *,class DirectUI::DuiAccessible * *)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accFocus(struct tagVARIANT *)",
    "protected: long __thiscall DirectUI::Element::_SetValue(struct DirectUI::PropertyInfo const * (__stdcall*)(void),int,class DirectUI::Value *,bool)",
    "public: static class DirectUI::ElementProxy * __stdcall DirectUI::ElementProxy::Create(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::ElementWithHWND::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual void __thiscall DirectUI::DialogElement::OnDestroy(void)",
    "public: void __thiscall DirectUI::NativeHWNDHost::Host(class DirectUI::Element *)",
    "const DirectUI::Element::`vftable'",
    "public: bool __thiscall DirectUI::DialogElementCore::OnChildLostFocus(class DirectUI::Element *)",
    "private: static void __stdcall DirectUI::DUIFactory::s_XMLParseError(unsigned short const *,unsigned short const *,int,void *)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::put_accValue(struct tagVARIANT,unsigned short *)",
    "public: virtual void __thiscall DirectUI::DialogElement::OnListenerAttach(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::TouchScrollViewer::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static int DirectUI::Schema::IsPasswordProperty",
    "public: class DirectUI::CCCheckBox & __thiscall DirectUI::CCCheckBox::operator=(class DirectUI::CCCheckBox const &)",
    "public: virtual __thiscall DirectUI::Expando::~Expando(void)",
    "public: static long __stdcall DirectUI::CCListView::Register(void)",
    "protected: virtual void __thiscall DirectUI::SelectorSelectionProxy::Init(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::DUIXmlParser::_InitializeTables(void)",
    "public: virtual void __thiscall DirectUI::DialogElement::OnListenedPropertyChanged(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: long __thiscall DirectUI::TouchSelect::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: virtual __thiscall DirectUI::RefcountBase::~RefcountBase(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accDescription(struct tagVARIANT,unsigned short * *)",
    "public: virtual long __thiscall DirectUI::CCBase::DefaultAction(void)",
    "public: static unsigned int __stdcall DirectUI::NativeHWNDHost::DestroyMsg(void)",
    "public: void __thiscall DirectUI::XHost::DestroyWindow(void)",
    "public: static int DirectUI::Schema::RuntimeIdProperty",
    "public: class DirectUI::NativeHWNDHost & __thiscall DirectUI::NativeHWNDHost::operator=(class DirectUI::NativeHWNDHost const &)",
    "public: long __thiscall DirectUI::TouchScrollBar::Initialize(bool,class DirectUI::Element *,unsigned long *)",
    "private: static struct DirectUI::Schema::PatternInfo const * const DirectUI::Schema::g_patternInfoTable",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Edit::MultilineProp(void)",
    "public: __thiscall DirectUI::ElementWithHWND::ElementWithHWND(void)",
    "public: virtual long __stdcall DirectUI::ScrollProvider::Scroll(enum ScrollAmount,enum ScrollAmount)",
    "public: virtual struct tagSIZE __thiscall DirectUI::Layout::UpdateDesiredSize(class DirectUI::Element *,int,int,class DirectUI::Surface *)",
    "public: bool __thiscall DirectUI::ModernProgressBar::IsDeterminate(void)",
    "public: long __thiscall DirectUI::RepeatButton::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: virtual bool __thiscall DirectUI::CCPushButton::GetButtonColor(struct HDC__ *,struct HBRUSH__ * *)",
    "private: void __thiscall DirectUI::Element::_SyncRedrawStyle(void)",
    "public: long __thiscall DirectUI::TouchCheckBox::SetToggleOnClick(bool)",
    "public: struct DirectUI::NavScoring & __thiscall DirectUI::NavScoring::operator=(struct DirectUI::NavScoring const &)",
    "public: __thiscall DirectUI::Selector::Selector(class DirectUI::Selector const &)",
    "public: virtual long __stdcall DirectUI::GridProvider::QueryInterface(struct _GUID const &,void * *)",
    "private: static class DirectUI::UiaArray * DirectUI::InvokeManager::g_pArrayInvokeHelper",
    "public: __thiscall DirectUI::Thumb::Thumb(class DirectUI::Thumb const &)",
    "public: static long __stdcall DirectUI::Browser::Register(void)",
    "public: bool __thiscall DirectUI::Element::IsDefaultCAlign(void)",
    "const DirectUI::XResourceProvider::`vftable'",
    "public: static void __stdcall DirectUI::HWNDHost::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: long __thiscall DirectUI::ScrollBar::SetProportional(bool)",
    "public: void __thiscall DirectUI::Element::_UpdateLayoutPosition(int,int)",
    "public: bool __thiscall DirectUI::Element::GetMouseFocused(void)",
    "public: virtual struct tagSIZE __thiscall DirectUI::VerticalFlowLayout::UpdateDesiredSize(class DirectUI::Element *,int,int,class DirectUI::Surface *)",
    "public: int __thiscall DirectUI::Element::GetAccRole(void)",
    "public: long __thiscall DirectUI::CCTrackBar::SetThumbPosition(int)",
    "public: static class DirectUI::TableProxy * __stdcall DirectUI::TableProxy::Create(class DirectUI::Element *)",
    "protected: virtual long __thiscall DirectUI::TaskPage::OnQueryCancel(void)",
    "public: long __thiscall DirectUI::Element::SetBackgroundColor(unsigned long,unsigned long,unsigned char)",
    "public: long __thiscall DirectUI::TouchHWNDElement::RegisterForIHMChanges(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateStyleSheet(class DirectUI::StyleSheet *)",
    "public: static long __stdcall AcceleratorBehavior::Create(struct IDuiBehavior * *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::PushButton::s_pClassInfo",
    "public: long __thiscall DirectUI::TouchSelect::AddString(unsigned short const *)",
    "public: void __thiscall DirectUI::DUIXmlParser::SetParseErrorCallback(void (__stdcall*)(unsigned short const *,unsigned short const *,int,void *),void *)",
    "protected: virtual void __thiscall DirectUI::TaskPage::OnListenedEvent(class DirectUI::Element *,struct DirectUI::Event *)",
    "public: long __thiscall DirectUI::AutoButton::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: virtual unsigned int __thiscall DirectUI::Element::MessageCallback(struct tagGMSG *)",
    "public: virtual long __thiscall DirectUI::Element::GetUIAElementProvider(struct _GUID const &,void * *)",
    "public: static class DirectUI::RangeValueProxy * __stdcall DirectUI::RangeValueProxy::Create(class DirectUI::Element *)",
    "public: virtual __thiscall DirectUI::Pages::~Pages(void)",
    "public: class DirectUI::TableItemProxy & __thiscall DirectUI::TableItemProxy::operator=(class DirectUI::TableItemProxy const &)",
    "public: static long __stdcall DirectUI::ScrollBar::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual long __thiscall DirectUI::RichText::GetForegroundColorRef(unsigned long *)",
    "protected: void __thiscall DirectUI::HWNDHost::SyncBackground(void)",
    "public: long __thiscall DirectUI::Element::RemoveLocalValue(struct DirectUI::PropertyInfo const *)",
    "private: long __thiscall DirectUI::ScrollProxy::ScrollPage(bool,bool)",
    "private: static bool DirectUI::EventManager::g_fWantAnyEvent",
    "public: virtual __thiscall DirectUI::CCCheckBox::~CCCheckBox(void)",
    "public: static int DirectUI::Schema::HeaderItemControlType",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCListView::GetClassInfoPtr(void)",
    "public: long __thiscall DirectUI::XProvider::Initialize(class DirectUI::Element *,class DirectUI::IXProviderCP *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseGTMetInt(struct DirectUI::ParserTools::ExprNode const *,int *)",
    "public: virtual long __thiscall DirectUI::TouchCheckBoxGlyph::Insert(class DirectUI::Element * *,unsigned int,unsigned int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::PaddingProp(void)",
    "public: long __thiscall DirectUI::TouchEditBase::SetIgnoredKeyCombos(enum DirectUI::TouchEditFilteredKeyComboFlags,enum DirectUI::TouchEditFilteredKeyComboFlags)",
    "public: void __thiscall DirectUI::DUIXmlParser::SetGetSheetCallback(class DirectUI::Value * (__stdcall*)(unsigned short const *,void *),void *)",
    "public: static long __stdcall DirectUI::CCProgressBar::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: unsigned long __thiscall DirectUI::TouchSelect::GetItemCount(void)",
    "public: virtual bool __thiscall DirectUI::DialogElement::OnListenedPropertyChanging(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: class DirectUI::CCAVI & __thiscall DirectUI::CCAVI::operator=(class DirectUI::CCAVI const &)",
    "public: virtual void __thiscall DirectUI::RowLayout::DoLayout(class DirectUI::Element *,int,int)",
    "protected: long __thiscall DirectUI::ElementProxy::GetAutomationId(struct tagVARIANT *)",
    "private: long __thiscall DirectUI::NavigatorSelectionItemProxy::AddToSelection(class DirectUI::Browser *)",
    "public: bool __thiscall DirectUI::Element::IsBehaviorLayout(void)const",
    "public: long __thiscall DirectUI::Movie::SetDrawOutlines(bool)",
    "public: virtual bool __thiscall DirectUI::DialogElement::OnChildReceivedFocus(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetSnapIntervalY(float)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::RichText::LocaleProp(void)",
    "public: long __thiscall DirectUI::Element::SetFontStyle(int)",
    "public: virtual bool __thiscall DirectUI::CCTrackBar::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static void __stdcall DirectUI::Viewer::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static long __stdcall DirectUI::Movie::Register(void)",
    "public: static long __stdcall DirectUI::TouchSlider::Register(void)",
    "public: virtual long __stdcall DirectUI::RangeValueProvider::get_Maximum(double *)",
    "public: static long __stdcall DirectUI::RichText::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static long __stdcall DirectUI::DialogElement::Create(struct HWND__ *,bool,unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual bool __thiscall DirectUI::Button::OnLostDialogFocus(struct DirectUI::IDialogElement *)",
    "public: __thiscall DirectUI::AnimationStrip::AnimationStrip(class DirectUI::AnimationStrip const &)",
    "public: __thiscall DirectUI::GridLayout::GridLayout(class DirectUI::GridLayout const &)",
    "public: enum __MIDL___MIDL_itf_inputscope_0000_0000_0001 __thiscall DirectUI::TouchEdit2::GetInputScope(void)",
    "public: long __thiscall DirectUI::TouchButton::SetHandleEnter(bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Combobox::SelectionProp(void)",
    "public: virtual void __thiscall DirectUI::ShellBorderLayout::OnRemove(class DirectUI::Element *,class DirectUI::Element * *,unsigned int)",
    "const DirectUI::Thumb::`vftable'",
    "public: class DirectUI::DynamicArray * __thiscall DirectUI::Value::GetElementList(void)",
    "public: static long __stdcall DirectUI::TouchEdit2::Register(void)",
    "public: virtual bool __thiscall DirectUI::PText::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_GetValueForStyleSheet(struct DirectUI::IClassInfo *,unsigned short const *,unsigned short const *,struct DirectUI::PropertyInfo const * *,class DirectUI::Value * *)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetSnapPointCollectionX(double const *,int)",
    "public: static int DirectUI::Schema::ToolTipOpenedEvent",
    "private: int __thiscall DirectUI::Element::_CachedValueIsEqual(struct DirectUI::PropertyInfo const *,class DirectUI::Element *)",
    "public: struct tagRECT const * __thiscall DirectUI::TouchScrollViewer::GetScrollPadding(class DirectUI::Value * *)",
    "public: static long __stdcall DirectUI::CCRadioButton::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: long __thiscall DirectUI::TouchEditBase::SetElementMovesOnIHMNotify(bool)",
    "public: virtual bool __thiscall DirectUI::ClassInfoBase::IsGlobal(void)const",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::PlayAllFramesModeProp(void)",
    "public: __thiscall DirectUI::CCVScrollBar::CCVScrollBar(void)",
    "public: static long __stdcall DirectUI::UnknownElement::Register(void)",
    "public: bool __thiscall DirectUI::HWNDHost::GetTransparent(void)",
    "ARGBColorFromEnumI",
    "IsAnimationsEnabled",
    "public: static int DirectUI::Schema::Table_RowOrColumnMajor_Property",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Thumb::GetClassInfoPtr(void)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::TableItemProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: virtual void __thiscall DirectUI::Combobox::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: class DirectUI::DuiNavigate & __thiscall DirectUI::DuiNavigate::operator=(class DirectUI::DuiNavigate const &)",
    "public: void __thiscall DirectUI::Thumb::SupressRightButtonDrag(bool)",
    "public: static bool __stdcall DirectUI::RangeValueProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: __thiscall DirectUI::ElementProvider::ElementProvider(void)",
    "public: long __thiscall DirectUI::TouchSelect::AddElement(class DirectUI::Element *,unsigned short const *)",
    "const DirectUI::SelectorSelectionProxy::`vftable'",
    "public: class DirectUI::Element * __thiscall DirectUI::NativeHWNDHost::GetElement(void)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCBase::GetContentSize(int,int,class DirectUI::Surface *)",
    "protected: int __thiscall DirectUI::HWNDHost::VerifyParentage(void)",
    "public: void * __thiscall DirectUI::DUIXmlParser::GetSheetContext(void)",
    "public: bool __thiscall DirectUI::Edit::GetWantTabs(void)",
    "private: static long __stdcall DirectUI::EventManager::RaiseGeometryEvents(void)",
    "public: class DirectUI::Layout & __thiscall DirectUI::Layout::operator=(class DirectUI::Layout const &)",
    "public: virtual void __thiscall DirectUI::DialogElement::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: __thiscall DirectUI::SelectorNoDefault::SelectorNoDefault(class DirectUI::SelectorNoDefault const &)",
    "public: static class DirectUI::SelectionItemProxy * __stdcall DirectUI::SelectionItemProxy::Create(class DirectUI::Element *)",
    "const DirectUI::ValueProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: __thiscall DirectUI::IXElementCP::IXElementCP(void)",
    "public: virtual long __stdcall DirectUI::ElementProvider::GetRuntimeId(struct tagSAFEARRAY * *)",
    "public: virtual void __thiscall DirectUI::TouchScrollBar::_SelfLayoutDoLayout(int,int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ModernProgressBar::MaximumProp(void)",
    "public: virtual int __thiscall DirectUI::ScrollBar::GetLine(void)",
    "public: virtual void __thiscall DirectUI::TouchHyperLink::GetImmersiveFocusRectOffsets(struct tagRECT *)",
    "public: long __thiscall DirectUI::Element::SetActive(int)",
    "public: virtual __thiscall DirectUI::Movie::~Movie(void)",
    "public: __thiscall DirectUI::XResourceProvider::XResourceProvider(class DirectUI::XResourceProvider const &)",
    "const DirectUI::TableItemProxy::`vftable'",
    "protected: long __thiscall DirectUI::DUIXmlParser::_BuildChildren(struct IXmlReader *,class DirectUI::Element *)",
    "public: class DirectUI::Element * __thiscall DirectUI::XHost::GetElement(void)",
    "public: virtual void __thiscall DirectUI::Element::OnKeyFocusMoved(class DirectUI::Element *,class DirectUI::Element *)",
    "public: virtual bool __thiscall DirectUI::BaseScrollViewer::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual void __thiscall DirectUI::Selector::OnInput(struct DirectUI::InputEvent *)",
    "public: virtual void __thiscall DirectUI::Movie::OnEvent(struct DirectUI::Event *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::SelectorNoDefault::GetClassInfoW(void)",
    "public: virtual bool __thiscall DirectUI::Element::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static long __stdcall DirectUI::TouchSelect::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Element::GetClassInfoW(void)",
    "public: static long __stdcall DirectUI::EventManager::EventListener(class DirectUI::Element *,struct DirectUI::Event *)",
    "public: virtual class DirectUI::HWNDElement * __thiscall DirectUI::XBaby::GetXBabyElement(void)",
    "public: void __thiscall DirectUI::Element::DoubleBuffered(bool)",
    "public: virtual void __thiscall DirectUI::BaseScrollBar::PageDown(unsigned int)",
    "public: class DirectUI::DynamicArray * __thiscall DirectUI::Value::GetValueList(void)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetContact(unsigned int,bool)",
    "public: static long __stdcall DirectUI::CCPushButton::Register(void)",
    "public: static long __stdcall CSafeElementProxy::s_SyncCallback(struct HGADGET__ *,void *,struct EventMsg *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCPushButton::GetClassInfoW(void)",
    "public: void __thiscall DirectUI::CCPushButton::`default constructor closure'(void)",
    "public: virtual long __thiscall DirectUI::HWNDElementProxy::DoMethod(int,char *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ShadowIntensityProp(void)",
    "public: int __thiscall DirectUI::ModernProgressBar::GetPosition(void)",
    "public: unsigned short const * __thiscall DirectUI::TouchSwitch::GetOffText(class DirectUI::Value * *)",
    "public: virtual long __stdcall DirectUI::ScrollProvider::get_HorizontalViewSize(double *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Progress::PositionProp(void)",
    "public: static void __stdcall DirectUI::ElementWithHWND::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: class DirectUI::Element * __thiscall DirectUI::TouchSelect::GetSelection(void)",
    "public: static int DirectUI::Schema::ScrollPattern",
    "public: unsigned short __thiscall DirectUI::HWNDHost::GetBackgroundOwnerID(void)",
    "public: static long __stdcall DirectUI::TouchSlider::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual long __thiscall DirectUI::HWNDElement::CreateStyleParser(class DirectUI::DUIXmlParser * *)",
    "public: virtual long __stdcall DirectUI::ScrollProvider::SetScrollPercent(double,double)",
    "public: void __thiscall DirectUI::Element::PaintEdgeHighlight(struct HDC__ *,struct tagRECT const &,struct tagRECT const &)",
    "const DirectUI::StyledScrollViewer::`vftable'{for `DirectUI::Element'}",
    "private: long __thiscall DirectUI::SelectorSelectionItemProxy::Select(void)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::GetIdentityString(unsigned long,unsigned char * *,unsigned long *)",
    "protected: void __thiscall DirectUI::HWNDHost::SyncVisible(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::TouchSlider::GetClassInfoW(void)",
    "public: void __thiscall DirectUI::TouchSlider::ShowTooltipOnRightForLTRBuild(void)",
    "public: virtual __thiscall DirectUI::PushButton::~PushButton(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCCommandLink::GetClassInfoPtr(void)",
    "public: static class UID __stdcall DirectUI::TouchEdit2::ContextMenuRequested(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Selector::GetClassInfoW(void)",
    "public: __thiscall DirectUI::GridProxy::GridProxy(class DirectUI::GridProxy const &)",
    "private: void __thiscall DirectUI::Edit::PropertyChangedCore(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,struct HWND__ *)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::VerticalFlowLayout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: static long __stdcall DirectUI::TouchEdit2::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: long __thiscall DirectUI::Element::SetEdgeHighlightThickness(int,int,int,int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchHWNDElement::WindowAccessGradientColorProp(void)",
    "public: unsigned int __thiscall DirectUI::Element::_GetNeedsLayout(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Button::PressedProp(void)",
    "const DirectUI::BrowserSelectionProxy::`vftable'",
    "public: static long __stdcall DirectUI::RichText::Register(void)",
    "public: static long __stdcall DirectUI::TouchRepeatButton::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "private: virtual void __thiscall DirectUI::TaskPage::DestroyCP(void)",
    "public: virtual void __thiscall DirectUI::HWNDHost::OnEvent(struct DirectUI::Event *)",
    "public: static long __stdcall DirectUI::XElement::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual unsigned long __stdcall DirectUI::ScrollItemProvider::Release(void)",
    "public: int __thiscall DirectUI::Element::IsRoot(void)",
    "public: virtual long __stdcall DirectUI::XProvider::CanSetFocus(bool *)",
    "public: virtual long __thiscall DirectUI::XResourceProvider::CreateDUICP(class DirectUI::HWNDElement *,struct HWND__ *,struct HWND__ *,class DirectUI::Element * *,class DirectUI::DUIXmlParser * *)",
    "public: static void __stdcall DirectUI::SelectorNoDefault::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static long __stdcall DirectUI::Progress::Register(void)",
    "protected: virtual void __thiscall DirectUI::SelectionItemProxy::Init(class DirectUI::Element *)",
    "protected: long __thiscall DirectUI::HWNDElementProxy::GetFocus(struct IRawElementProviderFragment * *)",
    "public: virtual bool __thiscall DirectUI::HWNDHost::OnMessage(unsigned int,unsigned int,long,long *)",
    "protected: void __thiscall DirectUI::HWNDHost::SyncForeground(void)",
    "public: void __thiscall DirectUI::TouchSlider::RemoveRichDuiTooltip(void)",
    "public: __thiscall DirectUI::GridProvider::GridProvider(void)",
    "public: long __thiscall DirectUI::Element::SetAccHelp(unsigned short const *)",
    "public: virtual long __stdcall DirectUI::HWNDHostClientAccessible::get_accRole(struct tagVARIANT,struct tagVARIANT *)",
    "public: long __thiscall DirectUI::ModernProgressRing::SetActivityOccuring(bool)",
    "public: __thiscall DirectUI::ShellBorderLayout::ShellBorderLayout(void)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::ElementProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::BaseScrollViewer::SetYScrollable(bool)",
    "public: long __thiscall DirectUI::TouchEdit2::SelectNone(void)",
    "public: long __thiscall DirectUI::TouchSelectItem::SetItemData(struct IUnknown *)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::accNavigate(long,struct tagVARIANT,struct tagVARIANT *)",
    "public: long __thiscall DirectUI::Element::RemoveLocalValue(struct DirectUI::PropertyInfo const * (__stdcall*)(void))",
    "public: static int DirectUI::Schema::MenuControlType",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accHelpTopic(unsigned short * *,struct tagVARIANT,long *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::TouchButton::GetClassInfoW(void)",
    "public: enum DirectUI::TouchEditTextMode __thiscall DirectUI::TouchEditBase::GetTextMode(void)",
    "public: static int DirectUI::Schema::ToolTipControlType",
    "const DirectUI::ElementProvider::`vftable'{for `IRawElementProviderFragment'}",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchHWNDElement::TooltipMaximumLineCountProp(void)",
    "public: long __thiscall DirectUI::Button::SetCaptured(bool)",
    "const DirectUI::SelectionProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: long __thiscall DirectUI::Element::SetY(int)",
    "public: static class DirectUI::HWNDElement * __stdcall DirectUI::HWNDElement::GetFocusedHWNDElement(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchEdit2::InnerBorderThicknessProp(void)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::ScrollBar::GetElement(void)",
    "public: float __thiscall DirectUI::TouchScrollViewer::GetSnapOffsetX(void)",
    "public: class DirectUI::Expression & __thiscall DirectUI::Expression::operator=(class DirectUI::Expression const &)",
    "public: virtual void __thiscall DirectUI::Element::OnEvent(struct DirectUI::Event *)",
    "public: static long __stdcall DirectUI::DuiAccessible::AccNavigate(class DirectUI::Element *,long,class DirectUI::Element * *)",
    "public: int __thiscall DirectUI::Element::GetBorderStdColor(void)",
    "public: static int DirectUI::Schema::IsOffscreen",
    "public: void __thiscall DirectUI::TouchScrollViewer::GetPredictedVisibleRect(struct tagRECT *)",
    "public: static class UID __stdcall DirectUI::Navigator::ActionInitiated(void)",
    "const DirectUI::Selector::`vftable'",
    "public: class DirectUI::Proxy & __thiscall DirectUI::Proxy::operator=(class DirectUI::Proxy const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ChildrenProp(void)",
    "const DirectUI::SelectorSelectionItemProxy::`vftable'",
    "public: virtual unsigned int __thiscall DirectUI::HWNDHost::MessageCallback(struct tagGMSG *)",
    "public: static int DirectUI::Schema::TreeControlType",
    "public: virtual unsigned short const * __thiscall DirectUI::TextGraphic::GetContentStringAsDisplayed(class DirectUI::Value * *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Browser::s_pClassInfo",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::HWNDHost::ThemeChangedProp(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::Clone(struct IEnumVARIANT * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::GetParserCommon(class DirectUI::DUIXmlParser * *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreatePoint(int,int)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Button::GetClassInfoPtr(void)",
    "public: long __thiscall DirectUI::Clipper::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: unsigned short __thiscall DirectUI::Element::GetShortcutChar(void)",
    "public: virtual long __stdcall DirectUI::XProvider::IsDescendent(class DirectUI::Element *,bool *)",
    "const DirectUI::CCBaseCheckRadioButton::`vftable'",
    "public: class DirectUI::SelectorNoDefault & __thiscall DirectUI::SelectorNoDefault::operator=(class DirectUI::SelectorNoDefault const &)",
    "public: static int DirectUI::Schema::LayoutInvalidatedEvent",
    "protected: int __thiscall DirectUI::ElementProxy::_UsesUIAProxies(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::RichText::FontWeightRunsProp(void)",
    "public: virtual long __thiscall DirectUI::Element::Insert(class DirectUI::Element * *,unsigned int,unsigned int)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_RecordElementWithChildren(struct IXmlReader *,bool,unsigned short * *)",
    "public: virtual void __thiscall DirectUI::BorderLayout::OnAdd(class DirectUI::Element *,class DirectUI::Element * *,unsigned int)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::ExpandCollapseProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::accNavigate(long,struct tagVARIANT,struct tagVARIANT *)",
    "public: virtual __thiscall DirectUI::ScrollProvider::~ScrollProvider(void)",
    "public: int __thiscall DirectUI::TouchScrollViewer::GetManipulationVerticalAlignment(void)",
    "public: long __thiscall DirectUI::Element::SetBackgroundColor(unsigned long,unsigned long,unsigned long,unsigned char)",
    "const DirectUI::ToggleProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Expandable::ExpandedProp(void)",
    "const DirectUI::ShellBorderLayout::`vftable'",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ModernProgressBar::DeterminateProp(void)",
    "public: __thiscall DirectUI::ExpandCollapseProvider::ExpandCollapseProvider(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::TouchSwitch::GetClassInfoW(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::Initialize(void)",
    "public: virtual long __stdcall DirectUI::InvokeProvider::Invoke(void)",
    "protected: virtual void __thiscall DirectUI::ModernProgressRing::OnHosted(class DirectUI::Element *)",
    "private: void __thiscall DirectUI::Element::_UpdatePropertyInCache(struct DirectUI::PropertyInfo const *)",
    "public: __thiscall DirectUI::XBaby::XBaby(class DirectUI::XBaby const &)",
    "public: virtual unsigned int __thiscall DirectUI::ClassInfoBase::GetGlobalIndex(void)const",
    "private: class DirectUI::Value * __thiscall DirectUI::Element::_GetSpecifiedValueIgnoreCache(struct DirectUI::PropertyInfo const *)",
    "public: static long __stdcall DirectUI::Schema::Init(void)",
    "public: virtual long __thiscall DirectUI::TouchEdit2::RefreshContent(void)",
    "public: void __thiscall DirectUI::NativeHWNDHost::HideWindow(void)",
    "public: long __thiscall DirectUI::ResourceModuleHandles::GetHandle(unsigned short const *,struct HINSTANCE__ * *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::ElementWithHWND::GetClassInfoW(void)",
    "public: virtual __thiscall DirectUI::Thumb::~Thumb(void)",
    "private: static long __stdcall DirectUI::EventManager::RaiseGeometryEventWorker(struct DirectUI::RectangleChange *,bool,bool,bool,bool)",
    "protected: long __thiscall DirectUI::ElementProxy::GetBoundingRect(struct UiaRect *)",
    "public: static long __stdcall DirectUI::EventManager::FireStructureChangedEvent(class DirectUI::Element *,enum StructureChangeType)",
    "public: virtual void __thiscall DirectUI::Element::OnDestroy(void)",
    "public: static void __stdcall DirectUI::AutoButton::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Pages::s_pClassInfo",
    "public: unsigned short const * __thiscall DirectUI::Element::GetAccNameAsDisplayed(class DirectUI::Value * *)",
    "public: virtual struct HWND__ * __thiscall DirectUI::NativeHWNDHost::CreateHostWindow(unsigned long,unsigned short const *,unsigned short const *,unsigned long,int,int,int,int,struct HWND__ *,struct HMENU__ *,struct HINSTANCE__ *,void *)",
    "public: long __thiscall DirectUI::TouchHWNDElement::SetLightDismissIHM(bool)",
    "public: virtual unsigned long __stdcall DirectUI::TableProvider::AddRef(void)",
    "public: virtual __thiscall DirectUI::AccessibleButton::~AccessibleButton(void)",
    "public: virtual void __thiscall DirectUI::TouchEdit2::OnEvent(struct DirectUI::Event *)",
    "public: virtual __thiscall DirectUI::FillLayout::~FillLayout(void)",
    "public: virtual long __thiscall DirectUI::XBaby::SetHandleEnterKey(bool)",
    "public: static long __stdcall DirectUI::TextGraphic::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::TableItemProvider::`vftable'",
    "public: struct DirectUI::Cursor * __thiscall DirectUI::Value::GetCursor(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::AnimationStrip::s_pClassInfo",
    "public: long __thiscall DirectUI::ModernProgressBar::SetState(int)",
    "UiaOnDestroySink",
    "public: int __thiscall DirectUI::BaseScrollViewer::GetPinning(void)",
    "public: virtual void __thiscall DirectUI::Element::OnPropertyChanged(struct DirectUI::PropertyInfo *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: class DirectUI::ScrollItemProxy & __thiscall DirectUI::ScrollItemProxy::operator=(class DirectUI::ScrollItemProxy const &)",
    "public: void __thiscall DirectUI::TouchSlider::SetTooltipText(unsigned short const *)",
    "public: int __thiscall DirectUI::AnimationStrip::GetFrameIndex(void)",
    "public: static class UID __stdcall DirectUI::HWNDElement::ImmersiveColorSchemeChange(void)",
    "public: virtual void __thiscall DirectUI::HWNDElement::GetWindowClassNameAndStyle(unsigned short const * *,unsigned int *)",
    "private: static long const DirectUI::Value::c_SingleRefCount",
    "public: static long __stdcall DirectUI::CCAVI::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual void __thiscall DirectUI::TouchSelect::OnEvent(struct DirectUI::Event *)",
    "public: class DirectUI::XBaby & __thiscall DirectUI::XBaby::operator=(class DirectUI::XBaby const &)",
    "protected: virtual bool __thiscall DirectUI::HWNDHost::EraseBkgnd(struct HDC__ *,long *)",
    "public: long __thiscall DirectUI::Element::SetClass(unsigned short const *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchEditBase::IMEComposingProp(void)",
    "public: __thiscall DirectUI::InvokeProxy::InvokeProxy(class DirectUI::InvokeProxy const &)",
    "public: __thiscall DirectUI::ProgressRangeValueProxy::ProgressRangeValueProxy(class DirectUI::ProgressRangeValueProxy const &)",
    "public: void __thiscall DirectUI::TouchScrollViewer::GetInertiaEndpointVisibleRect(struct tagRECT *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchEditBase::ReadOnlyProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Selector::SelectionProp(void)",
    "public: void __thiscall DirectUI::Layout::Initialize(void)",
    "public: static void __stdcall DirectUI::FontCache::UninitThread(void)",
    "public: virtual int __thiscall DirectUI::ClassInfoBase::GetChildren(void)const",
    "public: __thiscall DirectUI::CCListBox::CCListBox(class DirectUI::CCListBox const &)",
    "public: struct HWND__ * __thiscall DirectUI::NativeHWNDHost::GetHWND(void)",
    "public: virtual struct tagSIZE __thiscall DirectUI::Edit::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: static class UID __stdcall DirectUI::TouchHWNDElement::RichTooltipShowing(void)",
    "public: virtual void __thiscall DirectUI::SelectorNoDefault::OnKeyFocusMoved(class DirectUI::Element *,class DirectUI::Element *)",
    "public: void __thiscall DirectUI::TouchScrollViewer::GetVisibleRect(struct tagRECT *)",
    "public: virtual void __thiscall DirectUI::TouchEdit2::Paint(struct HDC__ *,struct tagRECT const *,struct tagRECT const *,struct tagRECT *,struct tagRECT *)",
    "public: __thiscall DirectUI::DUIXmlParser::DUIXmlParser(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchSelectItem::TextContentOverrideProp(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Movie::GetClassInfoPtr(void)",
    "public: virtual struct tagSIZE __thiscall DirectUI::Combobox::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: class DirectUI::CallstackTracker & __thiscall DirectUI::CallstackTracker::operator=(class DirectUI::CallstackTracker const &)",
    "public: static class UID __stdcall DirectUI::TouchRepeatButton::RepeatClick(void)",
    "public: __thiscall DirectUI::CCBaseScrollBar::CCBaseScrollBar(unsigned long)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::PushButton::EnforceSizeProp(void)",
    "public: virtual void __thiscall DirectUI::BaseScrollBar::Home(void)",
    "public: static long __stdcall DirectUI::Combobox::Register(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::HWNDHost::BackgroundOwnerIDProp(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::Reset(void)",
    "protected: long __thiscall DirectUI::ElementProxy::GetProperty(struct tagVARIANT *,int)",
    "public: void __thiscall DirectUI::Movie::Play(void)",
    "private: class DirectUI::BaseScrollBar * __thiscall DirectUI::ScrollProxy::GetScrollBarHelper(class DirectUI::Element *,bool)",
    "protected: static void __stdcall DirectUI::HWNDHost::AttachCtrlSubclassProc(struct HWND__ *)",
    "public: virtual int __thiscall DirectUI::CCBaseScrollBar::GetPosition(void)",
    "public: static long __stdcall DirectUI::RowLayout::Create(int,int *,class DirectUI::Value * *)",
    "public: virtual long __thiscall DirectUI::ScrollProxy::DoMethod(int,char *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::ScrollViewer::GetClassInfoW(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AbsorbsShortcutProp(void)",
    "public: static long __stdcall DirectUI::Expando::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual bool __thiscall DirectUI::TouchHWNDElement::IsMSAAEnabled(void)",
    "public: virtual long __stdcall DirectUI::ScrollProvider::get_VerticallyScrollable(int *)",
    "DuiCreateObject",
    "public: virtual unsigned long __stdcall DirectUI::SelectionProvider::Release(void)",
    "public: virtual __thiscall DirectUI::SelectionItemProvider::~SelectionItemProvider(void)",
    "public: static int DirectUI::Schema::SelectionItem_IsSelected_Property",
    "public: virtual void __thiscall DirectUI::BaseScrollBar::PageUp(unsigned int)",
    "protected: virtual struct HWND__ * __thiscall DirectUI::HWNDHost::CreateHWND(struct HWND__ *)",
    "protected: struct HFONT__ * __thiscall DirectUI::HWNDHost::GetFont(void)",
    "protected: virtual void __thiscall DirectUI::AnimationStrip::Paint(struct HDC__ *,struct tagRECT const *,struct tagRECT const *,struct tagRECT *,struct tagRECT *)",
    "public: class DirectUI::Value * __thiscall DirectUI::TouchEditBase::GetSelectionForegroundColor(void)",
    "public: int __thiscall DirectUI::TouchSlider::GetStepCount(void)",
    "public: long __thiscall DirectUI::Element::SetContentGraphic(unsigned short const *,unsigned short,unsigned short)",
    "public: static int DirectUI::Schema::ProcessIdProperty",
    "public: static long __stdcall DirectUI::PushButton::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::Progress::`vftable'",
    "public: static void __stdcall DirectUI::CCBaseScrollBar::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: __thiscall DirectUI::Page::Page(void)",
    "public: void __thiscall DirectUI::InvokeHelper::Uninit(void)",
    "public: virtual void __thiscall DirectUI::Macro::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual bool __thiscall DirectUI::HWNDHost::OnCtrlThemeChanged(unsigned int,unsigned int,long,long *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCTreeView::s_pClassInfo",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::GetWindow(struct HWND__ * *)",
    "public: static long __stdcall DirectUI::CCCheckBox::Register(void)",
    "protected: void __thiscall DirectUI::HWNDHost::PrintRTLControl(struct HDC__ *,struct HDC__ *,struct tagRECT const &)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Button::GetClassInfoW(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CheckBoxGlyph::s_pClassInfo",
    "public: class DirectUI::Schema & __thiscall DirectUI::Schema::operator=(class DirectUI::Schema const &)",
    "public: static int DirectUI::Schema::Toggle_ToggleState_Property",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCTrackBar::RangeMaxProp(void)",
    "public: bool __thiscall DirectUI::PushButton::GetEnforceSize(void)",
    "public: virtual unsigned long __stdcall DirectUI::TableProvider::Release(void)",
    "public: unsigned short __thiscall DirectUI::Value::GetAtom(void)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::ToggleProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: class DirectUI::ProgressRangeValueProxy & __thiscall DirectUI::ProgressRangeValueProxy::operator=(class DirectUI::ProgressRangeValueProxy const &)",
    "public: bool __thiscall DirectUI::BaseScrollBar::OnPositionChanging(class DirectUI::Value *)",
    "public: int __thiscall DirectUI::Element::_GetChangesUpdatePass(void)",
    "private: static unsigned long (__stdcall* DirectUI::CallstackTracker::s_pfnSymSetOptions)(unsigned long)",
    "public: virtual unsigned long __stdcall DirectUI::ScrollProvider::AddRef(void)",
    "public: static bool __stdcall DirectUI::ScrollProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::Thumb::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseFloatValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: struct tagRECT const * __thiscall DirectUI::Value::GetRect(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::put_accName(struct tagVARIANT,unsigned short *)",
    "public: long __thiscall DirectUI::Element::SetVisible(bool)",
    "protected: virtual void __thiscall DirectUI::ModernProgressBarRangeValueProxy::Init(class DirectUI::Element *)",
    "public: bool __thiscall DirectUI::HWNDHost::GetOptimizeMove(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Viewer::XScrollableProp(void)",
    "public: static int DirectUI::Schema::CultureProperty",
    "public: virtual unsigned long __stdcall DirectUI::HWNDElementProvider::AddRef(void)",
    "public: void __thiscall DirectUI::NativeHWNDHost::ShowWindow(int)",
    "const DirectUI::BorderLayout::`vftable'",
    "public: static int DirectUI::Schema::HelpTextProperty",
    "public: class DirectUI::CCListBox & __thiscall DirectUI::CCListBox::operator=(class DirectUI::CCListBox const &)",
    "public: __thiscall DirectUI::HWNDHost::HWNDHost(class DirectUI::HWNDHost const &)",
    "public: __thiscall DirectUI::TouchButton::TouchButton(void)",
    "private: unsigned int __thiscall DirectUI::Edit::GetTextHeight(void)",
    "public: virtual unsigned long __stdcall DirectUI::InvokeProvider::AddRef(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::BaseScrollViewer::XBarVisibilityProp(void)",
    "protected: struct tagSIZE __thiscall DirectUI::FlowLayout::BuildCacheInfo(class DirectUI::Element *,int,int,class DirectUI::Surface *,bool)",
    "private: static long __stdcall DirectUI::EventManager::HandleChildrenEvent(class DirectUI::Element *,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual __thiscall DirectUI::CCSysLink::~CCSysLink(void)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnInput(struct DirectUI::InputEvent *)",
    "public: virtual void __thiscall DirectUI::RefPointElement::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: bool __thiscall DirectUI::Element::GetEnabled(void)",
    "public: long __thiscall DirectUI::TouchEdit2::SetPasswordRevealMode(enum DirectUI::TouchEditPasswordRevealMode)",
    "public: static bool __stdcall DirectUI::EventManager::WantPropertyEvent(int)",
    "public: virtual void __thiscall DirectUI::TouchCheckBox::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: __thiscall DirectUI::AutoLock::AutoLock(struct _RTL_CRITICAL_SECTION *)",
    "public: void __thiscall DirectUI::Repeater::SetGraphicType(unsigned char)",
    "public: static class UID __stdcall DirectUI::TouchScrollViewer::SnapshotTransformElement(void)",
    "const DirectUI::StyleSheet::`vftable'",
    "public: static long __stdcall DirectUI::RepeatButton::Register(void)",
    "public: static int DirectUI::Schema::WindowControlType",
    "public: class DirectUI::Movie & __thiscall DirectUI::Movie::operator=(class DirectUI::Movie const &)",
    "public: long __thiscall DirectUI::RowLayout::Initialize(int,unsigned int,unsigned int)",
    "public: static int DirectUI::Schema::DragDragCancelEvent",
    "CreateDUIWrapperEx",
    "protected: long __thiscall DirectUI::DUIXmlParser::_EnterOnCurrentThread(void)",
    "const DirectUI::TaskPage::`vftable'{for `DirectUI::IElementListener'}",
    "protected: long __thiscall DirectUI::DUIXmlParser::_ParseBehavior(class DirectUI::Element *,unsigned short const *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::ScrollBar::s_pClassInfo",
    "public: int __thiscall DirectUI::VerticalFlowLayout::GetLine(class DirectUI::Element *,class DirectUI::Element *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::TouchEditBase::GetClassInfoPtr(void)",
    "public: long __thiscall DirectUI::TouchEdit2::SetPromptWithCaret(bool)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::Clone(struct IEnumVARIANT * *)",
    "public: long __thiscall DirectUI::ModernProgressBar::SetActivityOccuring(bool)",
    "public: int __thiscall DirectUI::Element::GetPVLAnimationState(void)",
    "public: class DirectUI::HWNDElementProxy & __thiscall DirectUI::HWNDElementProxy::operator=(class DirectUI::HWNDElementProxy const &)",
    "protected: void __thiscall DirectUI::Layout::ClearCacheDirty(void)",
    "public: static bool __stdcall DirectUI::ExpandCollapseProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: __thiscall DirectUI::RefcountBase::RefcountBase(void)",
    "public: static int DirectUI::Schema::DockPattern",
    "private: long __thiscall DirectUI::NavigatorSelectionItemProxy::GetIsSelected(class DirectUI::Browser *,int *)",
    "public: int __thiscall DirectUI::BaseScrollViewer::GetYOffset(void)",
    "public: virtual unsigned long __stdcall DirectUI::TableItemProvider::AddRef(void)",
    "public: long __thiscall DirectUI::DUIFactory::CreateParser(void)",
    "public: static class UID __stdcall DirectUI::TouchScrollViewer::SetContactNotify(void)",
    "public: static class UID __stdcall DirectUI::BaseScrollBar::Scroll(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::MinSizeProp(void)",
    "public: bool __thiscall DirectUI::Element::HasChildren(void)",
    "public: virtual __thiscall DirectUI::SelectionProvider::~SelectionProvider(void)",
    "public: static void __stdcall DirectUI::HWNDElement::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static long __stdcall DirectUI::CCListBox::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: __thiscall DirectUI::CCPushButton::CCPushButton(unsigned long)",
    "public: static long __stdcall DirectUI::AutoButton::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual unsigned long __stdcall DirectUI::ExpandCollapseProvider::Release(void)",
    "public: bool __thiscall DirectUI::BaseScrollViewer::GetXScrollable(void)",
    "public: virtual void __thiscall DirectUI::TouchHWNDElement::OnInput(struct DirectUI::InputEvent *)",
    "public: void __thiscall DirectUI::TouchSlider::SetRangeMinAndRangeMax(int,int)",
    "UiaHideOnGetObject",
    "public: static void __stdcall DirectUI::Button::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseStringValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: __thiscall DirectUI::SafeArrayAccessor::SafeArrayAccessor(void)",
    "public: class DirectUI::XResourceProvider & __thiscall DirectUI::XResourceProvider::operator=(class DirectUI::XResourceProvider const &)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_SetBinaryXml(unsigned char const *,unsigned int,struct HINSTANCE__ *)",
    "public: static int DirectUI::Schema::SelectionItemElementAddedToSelectionEvent",
    "public: static long __stdcall DirectUI::Element::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::SelectedProp(void)",
    "public: static void __stdcall DirectUI::Expando::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchScrollViewer::ScrollPaddingProp(void)",
    "protected: virtual void __thiscall DirectUI::CCTrackBar::PostCreate(struct HWND__ *)",
    "public: __thiscall DirectUI::CCSysLink::CCSysLink(void)",
    "public: virtual void __thiscall DirectUI::Combobox::OnInput(struct DirectUI::InputEvent *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_SetProperties(struct IXmlReader *,struct DirectUI::IClassInfo *,class DirectUI::Element *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCSysLink::GetContentSize(int,int,class DirectUI::Surface *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::HWNDHost::s_pClassInfo",
    "public: virtual long __thiscall DirectUI::CCBaseScrollBar::SetLine(int)",
    "public: static int DirectUI::Schema::LabeledByProperty",
    "public: void __thiscall DirectUI::RichText::StopUsingCache(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Combobox::GetClassInfoW(void)",
    "public: unsigned short const * __thiscall DirectUI::TouchSwitch::GetTitleText(class DirectUI::Value * *)",
    "public: void __thiscall DirectUI::DialogElementCore::OnGetDlgCode(struct tagMSG *,long *)",
    "public: class DirectUI::Element * __thiscall DirectUI::Element::GetTopLevel(void)",
    "public: static void __stdcall DirectUI::XElement::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ScrollBar::MaximumProp(void)",
    "const DirectUI::DuiAccessible::`vftable'{for `IAccIdentity'}",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchSelect::SelectionProp(void)",
    "public: int __thiscall DirectUI::Viewer::GetYOffset(void)",
    "public: virtual unsigned long __stdcall DirectUI::ValueProvider::Release(void)",
    "public: static void __stdcall DirectUI::CCVScrollBar::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: __thiscall DirectUI::Clipper::Clipper(class DirectUI::Clipper const &)",
    "public: static long __stdcall DirectUI::TableLayout::Create(int,int *,class DirectUI::Value * *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCPushButton::s_pClassInfo",
    "public: long __thiscall DirectUI::ScrollBar::Initialize(bool,class DirectUI::Element *,unsigned long *)",
    "public: class DirectUI::SelectionItemProxy & __thiscall DirectUI::SelectionItemProxy::operator=(class DirectUI::SelectionItemProxy const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::BaseScrollViewer::PinningProp(void)",
    "public: virtual __thiscall DirectUI::CCListView::~CCListView(void)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnCompositionChanged(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateRect(int,int,int,int)",
    "public: virtual bool __thiscall DirectUI::XElement::OnMessage(unsigned int,unsigned int,long,long *)",
    "public: virtual long __thiscall DirectUI::BaseScrollViewer::Add(class DirectUI::Element * *,unsigned int)",
    "public: static long __stdcall DirectUI::FlowLayout::Create(bool,unsigned int,unsigned int,unsigned int,class DirectUI::Layout * *)",
    "public: long __thiscall DirectUI::Element::SetContentGraphic(unsigned short const *,unsigned char,unsigned int)",
    "public: static long __stdcall DirectUI::TouchHyperLink::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: long __thiscall DirectUI::TouchHWNDElement::GetIHMRect(struct tagRECT *)",
    "public: class DirectUI::DeferCycle * __thiscall DirectUI::Element::TestDeferObject(void)",
    "public: static bool __stdcall DirectUI::TableProxy::IsPatternSupported(class DirectUI::Element *)",
    "BrushFromEnumI",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ModernProgressBar::MinimumProp(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accParent(struct IDispatch * *)",
    "public: virtual void __thiscall DirectUI::TableLayout::DoLayout(class DirectUI::Element *,int,int)",
    "public: __thiscall DirectUI::ToggleProxy::ToggleProxy(class DirectUI::ToggleProxy const &)",
    "public: static long __stdcall DirectUI::CCListBox::Register(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCBaseScrollBar::GetClassInfoW(void)",
    "public: static void __stdcall DirectUI::DialogElement::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: enum DirectUI::CheckedStateFlags __thiscall DirectUI::TouchCheckBox::GetCheckedState(void)",
    "public: bool __thiscall DirectUI::HWNDElement::GetWrapKeyboardNavigate(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accChildCount(long *)",
    "public: long __thiscall DirectUI::Element::SetBorderGradientColor(unsigned long,unsigned long,unsigned char)",
    "public: virtual long __thiscall DirectUI::CCBaseScrollBar::SetPosition(int)",
    "public: static int DirectUI::Schema::TransformPattern",
    "public: bool __thiscall DirectUI::TouchEdit2::HasSelection(void)",
    "public: static long __stdcall DirectUI::TouchButton::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::ElementProvider::`vftable'{for `IRawElementProviderAdviseEvents'}",
    "const DirectUI::FlowLayout::`vftable'",
    "public: static long __stdcall DirectUI::CCRadioButton::Register(void)",
    "public: virtual __thiscall DirectUI::TouchHWNDElement::~TouchHWNDElement(void)",
    "public: virtual bool __thiscall DirectUI::TextGraphic::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::TooltipProp(void)",
    "private: static long __stdcall DirectUI::EventManager::RaiseChildRemovedEvent(struct DirectUI::ElementRuntimeId const &,class DirectUI::Element *)",
    "public: virtual int __stdcall DirectUI::XProvider::FindElementWithShortcutAndDoDefaultAction(unsigned short,int)",
    "public: long __thiscall DirectUI::Element::SetAccItemStatus(unsigned short const *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::BorderColorProp(void)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::Next(unsigned long,struct tagVARIANT *,unsigned long *)",
    "public: void __thiscall DirectUI::DialogElementCore::OnListenerDetach(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::Element::SetLayout(class DirectUI::Layout *)",
    "const DirectUI::ScrollProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: class DirectUI::Value * __thiscall DirectUI::TouchEditBase::GetSelectionBackgroundColor(void)",
    "const DirectUI::PatternProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: static void __stdcall DirectUI::StyledScrollViewer::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual long __thiscall DirectUI::ScrollBar::SetLine(int)",
    "public: static class UID __stdcall DirectUI::PVLAnimation::NotifyImplicit(void)",
    "public: __thiscall DirectUI::Bind::Bind(void)",
    "public: __thiscall DirectUI::AnimationStrip::AnimationStrip(void)",
    "public: __thiscall DirectUI::IDataEngine::IDataEngine(struct DirectUI::IDataEngine const &)",
    "protected: virtual void __thiscall DirectUI::TaskPage::OnListenerDetach(class DirectUI::Element *)",
    "public: static int DirectUI::Schema::ListItemControlType",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::RangeValueProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: static class UID __stdcall DirectUI::XElement::UnhandledSyschar(void)",
    "const DirectUI::Combobox::`vftable'",
    "public: __thiscall DirectUI::IDataEntry::IDataEntry(struct DirectUI::IDataEntry const &)",
    "public: virtual void __thiscall DirectUI::TouchCheckBox::GetImmersiveFocusRectOffsets(struct tagRECT *)",
    "public: __thiscall DirectUI::FillLayout::FillLayout(class DirectUI::FillLayout const &)",
    "protected: long __thiscall DirectUI::DUIXmlParser::AddRulesToStyleSheet(struct IXmlReader *,class DirectUI::StyleSheet *,unsigned short const *,class DirectUI::DynamicArray *,class DirectUI::DynamicArray *)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::Layout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "private: static struct DirectUI::IClassInfo * DirectUI::SelectorNoDefault::s_pClassInfo",
    "private: void __thiscall DirectUI::Navigator::FireNavigationEvent(void)",
    "public: static long __stdcall DirectUI::Button::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: __thiscall DirectUI::CCCheckBox::CCCheckBox(unsigned long)",
    "protected: static unsigned short __stdcall DirectUI::Expando::Clipper(void)",
    "public: void __thiscall DirectUI::Value::AddRef(void)",
    "public: void __thiscall DirectUI::FillLayout::Initialize(void)",
    "public: static void __stdcall DirectUI::AccessibleButton::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual void __thiscall DirectUI::Thumb::OnInput(struct DirectUI::InputEvent *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::TouchScrollViewer::GetClassInfoPtr(void)",
    "public: virtual void __thiscall DirectUI::XBaby::OnWmThemeChanged(unsigned int,long)",
    "public: static class UID __stdcall DirectUI::ContextMenuBehavior::ContextMenuHintShowing(void)",
    "public: static long __stdcall DirectUI::Button::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static int DirectUI::Schema::ClickablePointProperty",
    "public: static int DirectUI::Schema::ImageControlType",
    "private: bool __thiscall DirectUI::Element::TryPattern(double,double,struct tagPOINT *,struct tagRECT const &)",
    "public: long __thiscall DirectUI::DUIXmlParser::SetXMLFromResource(unsigned short const *,unsigned short const *,struct HINSTANCE__ *,struct HINSTANCE__ *)",
    "public: class DirectUI::GridLayout & __thiscall DirectUI::GridLayout::operator=(class DirectUI::GridLayout const &)",
    "public: class DirectUI::RadioButtonGlyph & __thiscall DirectUI::RadioButtonGlyph::operator=(class DirectUI::RadioButtonGlyph const &)",
    "public: class DirectUI::Browser & __thiscall DirectUI::Browser::operator=(class DirectUI::Browser const &)",
    "public: static bool __stdcall DirectUI::ValueProxy::IsPatternSupported(class DirectUI::Element *)",
    "const DirectUI::HWNDElementAccessible::`vftable'{for `IServiceProvider'}",
    "const DirectUI::Clipper::`vftable'",
    "public: static long (__stdcall* DirectUI::Schema::UiaRaiseStructureChangedEvent)(struct IRawElementProviderSimple *,enum StructureChangeType,int *,int)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::SemanticZoomToggle::GetClassInfoW(void)",
    "public: static bool __stdcall DirectUI::InvokeProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::CCListView::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::InvokeProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: void __thiscall DirectUI::BorderLayout::Initialize(void)",
    "private: class DirectUI::BaseScrollBar * __thiscall DirectUI::ScrollProxy::GetScrollBar(bool)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnGetDlgCode(struct tagMSG *,long *)",
    "public: long __thiscall DirectUI::TouchEditBase::SetPasswordCharacter(int)",
    "private: static struct DirectUI::IClassInfo * DirectUI::AccessibleButton::s_pClassInfo",
    "public: long __thiscall DirectUI::Element::SetShadowIntensity(int)",
    "const DirectUI::IDataEntry::`vftable'",
    "private: static struct DirectUI::IClassInfo * DirectUI::XBaby::s_pClassInfo",
    "public: static unsigned int const DirectUI::XElement::s_uButtonFocusChangeMsg",
    "const DirectUI::GridItemProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Edit::DirtyProp(void)",
    "public: static void __stdcall DirectUI::PText::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "protected: static struct DirectUI::DUIXmlParser::FunctionDefinition const * const DirectUI::DUIXmlParser::s_fdRect",
    "public: virtual void __thiscall DirectUI::XElement::OnEvent(struct DirectUI::Event *)",
    "private: class DirectUI::Element * __thiscall DirectUI::Element::FindDescendentWorker(unsigned short)",
    "public: unsigned short const * __thiscall DirectUI::Bind::GetProperty(class DirectUI::Value * *)",
    "public: static long __stdcall DirectUI::EventManager::AdviseEventRemoved(int,struct tagSAFEARRAY *)",
    "public: virtual bool __thiscall DirectUI::Element::GetKeyFocused(void)",
    "private: void __thiscall DirectUI::HWNDHost::GetSinkRect(struct tagRECT const *,struct tagRECT *)",
    "public: struct HWND__ * __thiscall DirectUI::HWNDHost::GetHWNDParent(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::LayoutProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::IDProp(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseResid(struct DirectUI::ParserTools::ExprNode const *,unsigned short const * *)",
    "public: long __thiscall DirectUI::TouchEditBase::SetSelectionBackgroundColor(class DirectUI::Value *)",
    "public: static class UID __stdcall DirectUI::TouchHWNDElement::MonitorPowerSettingsChange(void)",
    "public: static long __stdcall DirectUI::VerticalFlowLayout::Create(int,int *,class DirectUI::Value * *)",
    "public: void __thiscall DirectUI::TouchSwitch::SetToggleValue(int,bool,bool)",
    "public: static int DirectUI::Schema::RangeValue_Maximum_Property",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Bind::PropertyProp(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetUnset(void)",
    "public: static class DirectUI::GridItemProxy * __stdcall DirectUI::GridItemProxy::Create(class DirectUI::Element *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCTrackBar::GetClassInfoW(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::Next(unsigned long,struct tagVARIANT *,unsigned long *)",
    "public: virtual long __stdcall DirectUI::GridItemProvider::get_RowSpan(int *)",
    "protected: void __thiscall DirectUI::DialogElementCore::SetRegisteredDefaultButtonSelectedState(bool)",
    "public: virtual void __thiscall DirectUI::RichText::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: long __thiscall DirectUI::DUIXmlParser::SetXMLFromResourceWithTheme(unsigned int,struct HINSTANCE__ *,struct HINSTANCE__ *,struct HINSTANCE__ *)",
    "const DirectUI::HWNDElementProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: long __thiscall DirectUI::Element::SetWindowActive(bool)",
    "public: static int DirectUI::Schema::AccessKeyProperty",
    "public: virtual unsigned long __stdcall DirectUI::ToggleProvider::AddRef(void)",
    "const DirectUI::ToggleProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: virtual void __thiscall DirectUI::Combobox::OnHosted(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::Proxy::SyncCallback(struct HGADGET__ *,void *,struct EventMsg *)",
    "public: class DirectUI::IXProviderCP & __thiscall DirectUI::IXProviderCP::operator=(class DirectUI::IXProviderCP const &)",
    "public: void __thiscall DirectUI::TouchSlider::SetRangeMax(int)",
    "public: class DirectUI::HWNDHost & __thiscall DirectUI::HWNDHost::operator=(class DirectUI::HWNDHost const &)",
    "public: virtual void __thiscall DirectUI::Viewer::_SelfLayoutDoLayout(int,int)",
    "private: void __thiscall DirectUI::NineGridLayout::_UpdateTileList(int,class DirectUI::Element *)",
    "public: class DirectUI::Value * __thiscall DirectUI::TouchHWNDElement::GetWindowAccessGradientColor(void)",
    "public: virtual void __thiscall DirectUI::Element::OnInput(struct DirectUI::InputEvent *)",
    "public: static int DirectUI::Schema::Drag_IsGrabbed_Property",
    "protected: static class DirectUI::Value * __stdcall DirectUI::Macro::_LoadImage32BitsPerPixel(unsigned short const *)",
    "public: static class UID __stdcall DirectUI::TouchEditBase::UserTextChanged(void)",
    "public: __thiscall DirectUI::CheckBoxGlyph::CheckBoxGlyph(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::QueryService(struct _GUID const &,struct _GUID const &,void * *)",
    "public: bool __thiscall DirectUI::BaseScrollBar::IsPinned(void)",
    "public: long __thiscall DirectUI::Edit::SetThemedBorder(bool)",
    "public: class DirectUI::Selector & __thiscall DirectUI::Selector::operator=(class DirectUI::Selector const &)",
    "public: static long __stdcall DirectUI::NativeHWNDHost::WndProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: virtual __thiscall DirectUI::ScrollBar::~ScrollBar(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CheckBoxGlyph::GetClassInfoW(void)",
    "public: void __thiscall DirectUI::TouchSlider::SetFireContinuousSliderEvent(bool)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Navigator::s_pClassInfo",
    "public: void __thiscall DirectUI::CCBaseScrollBar::SyncScrollBar(void)",
    "public: static long __stdcall DirectUI::XBaby::Create(class DirectUI::IXElementCP *,class DirectUI::XProvider *,struct HWND__ *,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: __thiscall DirectUI::RowLayout::RowLayout(void)",
    "const DirectUI::GridProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::ItemList::GetClassInfoW(void)",
    "public: long __thiscall DirectUI::Element::SetBackgroundColor(unsigned short const *,int,int)",
    "public: struct tagSIZE __thiscall DirectUI::Element::_UpdateDesiredSize(int,int,class DirectUI::Surface *)",
    "const DirectUI::ScrollProvider::`vftable'",
    "public: long __thiscall DirectUI::TouchEditBase::SetKeyboardNavigationCapture(enum DirectUI::TouchEditKeyboardNavigationCapture)",
    "const DirectUI::Movie::`vftable'",
    "public: long __thiscall DirectUI::RichText::SetOverhangOffset(int)",
    "public: long __thiscall DirectUI::ModernProgressRing::SetAddLayeredRef(bool)",
    "public: static bool __stdcall DirectUI::ClassInfoBase::ClassExist(struct DirectUI::IClassInfo * *,struct DirectUI::PropertyInfo const * const *,unsigned int,struct DirectUI::IClassInfo *,struct HINSTANCE__ *,unsigned short const *,bool)",
    "public: virtual void __thiscall DirectUI::NineGridLayout::DoLayout(class DirectUI::Element *,int,int)",
    "private: static void __stdcall DirectUI::TaskPage::StaticXmlParserError(unsigned short const *,unsigned short const *,int,void *)",
    "public: __thiscall DirectUI::ValueProxy::ValueProxy(void)",
    "const DirectUI::IProvider::`vftable'",
    "public: static long __stdcall DirectUI::CCSysLink::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchEditBase::MultilineProp(void)",
    "private: void __thiscall DirectUI::HWNDHost::_DeleteCtrlWnd(void)",
    "public: int __thiscall DirectUI::CallstackTracker::CaptureCallstackFrames(void)",
    "public: long __thiscall DirectUI::RichText::SetTypographyRuns(unsigned short const *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetStringNull(void)",
    "public: class DirectUI::TableProxy & __thiscall DirectUI::TableProxy::operator=(class DirectUI::TableProxy const &)",
    "public: virtual unsigned long __stdcall DirectUI::GridProvider::AddRef(void)",
    "public: virtual void __thiscall DirectUI::CCBaseScrollBar::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: int __thiscall DirectUI::AnimationStrip::GetFrameWidth(void)",
    "public: virtual bool __thiscall DirectUI::Edit::IsContentProtected(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetIntZero(void)",
    "private: static int (__stdcall* DirectUI::CallstackTracker::s_pfnSymGetModuleInfo64)(void *,unsigned __int64,struct _IMAGEHLP_MODULE64 *)",
    "public: static int DirectUI::Schema::WindowPattern",
    "public: virtual void __thiscall DirectUI::Selector::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::ElementWithHWND::s_pClassInfo",
    "public: __thiscall DirectUI::StyleSheet::StyleSheet(void)",
    "public: static class UID __stdcall DirectUI::TouchScrollViewer::ManipulationCompleted(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::XProp(void)",
    "private: static long __stdcall DirectUI::Schema::LookupEventInfos(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseSGraphicHelper(bool,struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: virtual long __stdcall DirectUI::TableProvider::GetRowHeaders(struct tagSAFEARRAY * *)",
    "public: bool __thiscall DirectUI::Value::GetBool(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseARGBColor(struct DirectUI::ParserTools::ExprNode const *,unsigned long *)",
    "public: int __thiscall DirectUI::Value::GetInt(void)",
    "public: long __thiscall DirectUI::Macro::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: virtual void __thiscall DirectUI::TouchButton::FireRightClickEvent(unsigned int,struct tagPOINT *)",
    "public: virtual void __thiscall DirectUI::DialogElement::OnListenedInput(class DirectUI::Element *,struct DirectUI::InputEvent *)",
    "const DirectUI::BaseScrollViewer::`vftable'{for `DirectUI::IElementListener'}",
    "public: unsigned short const * __thiscall DirectUI::TouchEdit2::GetPromptText(class DirectUI::Value * *)",
    "public: int __thiscall DirectUI::FlowLayout::GetLine(class DirectUI::Element *,class DirectUI::Element *)",
    "public: enum DirectUI::IHMState __thiscall DirectUI::TouchHWNDElement::GetIHMState(void)",
    "public: static int DirectUI::Schema::HyperlinkControlType",
    "public: static class UID __stdcall DirectUI::Selector::SelectionChange(void)",
    "public: virtual __thiscall DirectUI::NineGridLayout::~NineGridLayout(void)",
    "private: static int __stdcall DirectUI::CallstackTracker::InitializeSymbols(void)",
    "public: virtual bool __thiscall DirectUI::CCPushButton::OnReceivedDialogFocus(struct DirectUI::IDialogElement *)",
    "public: void __thiscall DirectUI::TouchSlider::SetStepCount(int)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::Selector::GetAdjacent(class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "private: static long __stdcall DirectUI::EventManager::HandleAccRoleEvent(struct IRawElementProviderSimple *,class DirectUI::Value *,class DirectUI::Value *)",
    "const DirectUI::DuiAccessible::`vftable'{for `IServiceProvider'}",
    "public: static class DirectUI::ElementProvider * __stdcall DirectUI::ElementProviderManager::Find(class DirectUI::Element *)",
    "public: virtual void __thiscall DirectUI::HWNDHost::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: long __thiscall DirectUI::Element::SetFontFace(unsigned short const *)",
    "private: static long __stdcall DirectUI::Schema::LookupControlInfos(void)",
    "public: virtual unsigned long __stdcall DirectUI::SelectionItemProvider::AddRef(void)",
    "private: void __thiscall DirectUI::AnimationStrip::Stop(void)",
    "public: virtual void __thiscall DirectUI::Expando::OnEvent(struct DirectUI::Event *)",
    "protected: void __thiscall DirectUI::Layout::SetCacheDirty(void)",
    "public: int __thiscall DirectUI::Element::GetContentAlign(void)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::FlowLayout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetFloatZero(void)",
    "protected: unsigned int __thiscall DirectUI::GridLayout::GetCurrentCols(class DirectUI::Element *)",
    "public: virtual void __thiscall DirectUI::HWNDElement::UpdateTooltip(class DirectUI::Element *)",
    "public: virtual __thiscall DirectUI::TableLayout::~TableLayout(void)",
    "public: void __thiscall DirectUI::SemanticZoomToggle::UpdateToggleState(enum SemanticZoomToggleState,bool)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::SelectionItemProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: __thiscall DirectUI::HWNDHostClientAccessible::HWNDHostClientAccessible(void)",
    "public: virtual __thiscall DirectUI::HWNDElement::~HWNDElement(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateDoubleList(double const *,int)",
    "public: __thiscall DirectUI::TouchCheckBoxGlyph::TouchCheckBoxGlyph(void)",
    "public: virtual void __thiscall DirectUI::XBaby::ForceThemeChange(unsigned int,long)",
    "public: __thiscall DirectUI::CCCommandLink::CCCommandLink(class DirectUI::CCCommandLink const &)",
    "public: virtual void __thiscall DirectUI::Element::Paint(struct HDC__ *,struct tagRECT const *,struct tagRECT const *,struct tagRECT *,struct tagRECT *)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetDelegateEventHandler(struct IUnknown *)",
    "const DirectUI::RefcountBase::`vftable'",
    "long __stdcall DirectUI::GetColorFromProperty(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,unsigned long *)",
    "private: static int __stdcall DirectUI::HWNDHost::_SinkWndProc(void *,struct HWND__ *,unsigned int,unsigned int,long,long *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::NineGridLayout::UpdateDesiredSize(class DirectUI::Element *,int,int,class DirectUI::Surface *)",
    "public: unsigned int __thiscall DirectUI::Element::GetEncodedContentStringLength(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseBehaviorArgValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: bool __thiscall DirectUI::Element::HasEdgeHighlight(void)",
    "public: void __thiscall DirectUI::HWNDElement::FlushWorkingSet(void)",
    "public: long __thiscall DirectUI::DUIXmlParser::CopySheets(class DirectUI::DynamicArray * *)",
    "public: virtual long __stdcall DirectUI::XProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: long __thiscall DirectUI::TouchSlider::SetIsVertical(bool)",
    "public: virtual __thiscall DirectUI::ItemList::~ItemList(void)",
    "public: virtual struct tagSIZE __thiscall DirectUI::Progress::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: long __thiscall DirectUI::HWNDHost::SetBackgroundOwnerID(unsigned short const *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateSize(int,int)",
    "public: virtual __thiscall DirectUI::CCListBox::~CCListBox(void)",
    "private: long __thiscall DirectUI::SelectorSelectionProxy::GetIsSelectionRequired(int *)",
    "public: virtual bool __thiscall DirectUI::CCBaseScrollBar::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: long __thiscall DirectUI::Element::SetAccRole(int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::HeightProp(void)",
    "protected: virtual void __thiscall DirectUI::TouchHWNDElement::_OnUIStateChanged(unsigned short,unsigned short)",
    "public: class DirectUI::CCBaseScrollBar & __thiscall DirectUI::CCBaseScrollBar::operator=(class DirectUI::CCBaseScrollBar const &)",
    "public: static long __stdcall DirectUI::CCTreeView::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: long __thiscall DirectUI::Progress::SetMinimum(int)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Edit::s_pClassInfo",
    "private: static void __stdcall DirectUI::RepeatButton::_RepeatButtonActionCallback(struct GMA_ACTIONINFO *)",
    "public: virtual long __stdcall DirectUI::ElementProvider::Navigate(enum NavigateDirection,struct IRawElementProviderFragment * *)",
    "public: virtual void __thiscall DirectUI::Element::HandleUiaDestroyListener(void)",
    "public: virtual long __stdcall DirectUI::RangeValueProvider::SetValue(double)",
    "public: virtual void __thiscall DirectUI::TouchSelect::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: __thiscall DirectUI::Combobox::Combobox(class DirectUI::Combobox const &)",
    "public: static long __stdcall DirectUI::CCPushButton::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: void __thiscall DirectUI::CCAVI::Play(struct HWND__ *)",
    "public: static long __stdcall DirectUI::CCCommandLink::Register(void)",
    "public: virtual void __thiscall DirectUI::StyledScrollViewer::OnListenedPropertyChanged(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "const DirectUI::AnimationStrip::`vftable'",
    "const DirectUI::RefPointElement::`vftable'",
    "public: bool __thiscall DirectUI::Movie::GetRepeat(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::AnimationStrip::FrameDurationProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ScrollBar::VerticalProp(void)",
    "public: long __thiscall DirectUI::ElementProvider::DoInvokeArgs(int,class DirectUI::ProviderProxy * (__stdcall*)(class DirectUI::Element *),char *)",
    "public: virtual __thiscall DirectUI::TouchButton::~TouchButton(void)",
    "public: virtual long __thiscall DirectUI::SelectorSelectionProxy::DoMethod(int,char *)",
    "public: class DirectUI::BorderLayout & __thiscall DirectUI::BorderLayout::operator=(class DirectUI::BorderLayout const &)",
    "public: class DirectUI::Element * __thiscall DirectUI::Element::GetImmediateChild(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::Combobox::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: long __thiscall DirectUI::Repeater::Initialize(class DirectUI::Element *,unsigned long *)",
    "const DirectUI::ProgressRangeValueProxy::`vftable'",
    "public: long __thiscall DirectUI::Expando::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: static int DirectUI::Schema::Scroll_VerticalScrollPercent_Property",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchEditBase::PasswordCharacterProp(void)",
    "public: int __thiscall DirectUI::CCListBox::GetCount(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseGraphicGraphic(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: __thiscall DirectUI::Browser::Browser(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::CursorProp(void)",
    "public: long __thiscall DirectUI::Element::SetAccState(int)",
    "public: enum DirectUI::ActiveState __thiscall DirectUI::TouchScrollBar::GetActiveState(void)",
    "public: class DirectUI::Element * __thiscall DirectUI::TouchScrollBar::GetThumb(void)",
    "const DirectUI::InvokeHelper::`vftable'",
    "public: class DirectUI::AccessibleButton & __thiscall DirectUI::AccessibleButton::operator=(class DirectUI::AccessibleButton const &)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Clipper::s_pClassInfo",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::RichText::MapRunsToClustersProp(void)",
    "public: class DirectUI::StyleSheet * __thiscall DirectUI::Value::GetStyleSheet(void)",
    "public: virtual long __stdcall DirectUI::RangeValueProvider::get_LargeChange(double *)",
    "public: int __thiscall DirectUI::Element::GetShortcut(void)",
    "public: long __thiscall DirectUI::Element::Add(class DirectUI::Element *)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accChild(struct tagVARIANT,struct IDispatch * *)",
    "public: virtual bool __thiscall DirectUI::TouchSelect::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: __thiscall DirectUI::Clipper::Clipper(void)",
    "public: virtual void __thiscall DirectUI::TouchHWNDElement::OnEvent(struct DirectUI::Event *)",
    "public: __thiscall DirectUI::HWNDHost::HWNDHost(void)",
    "public: class DirectUI::Button & __thiscall DirectUI::Button::operator=(class DirectUI::Button const &)",
    "public: static long __stdcall DirectUI::TouchHWNDElement::Register(void)",
    "public: static class UID __stdcall DirectUI::Movie::AdvanceFrame(void)",
    "public: void __thiscall DirectUI::RichText::SetMaxLineCount(unsigned int)",
    "public: __thiscall DirectUI::FontCheckOut::~FontCheckOut(void)",
    "public: static int DirectUI::Schema::Selection_IsSelectionRequired_Property",
    "public: class DirectUI::Element * __thiscall DirectUI::HWNDElement::ElementFromPoint(struct tagPOINT *)",
    "public: float __thiscall DirectUI::Value::GetFloat(void)",
    "private: int __thiscall DirectUI::DUIXmlParser::_ScalePointsToPixels(int)const",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::OverhangProp(void)",
    "public: long __thiscall DirectUI::TouchScrollViewer::ResetInputState(void)",
    "public: virtual __thiscall DirectUI::XProvider::~XProvider(void)",
    "const DirectUI::HWNDHostClientAccessible::`vftable'{for `IOleWindow'}",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::accDoDefaultAction(struct tagVARIANT)",
    "public: __thiscall DirectUI::Pages::Pages(class DirectUI::Pages const &)",
    "public: virtual __thiscall DirectUI::GridProvider::~GridProvider(void)",
    "public: long __thiscall DirectUI::Bind::SetConnect(unsigned short const *)",
    "public: static int DirectUI::Schema::Scroll_HorizontalScrollPercent_Property",
    "const DirectUI::AccessibleButton::`vftable'",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ClassProp(void)",
    "public: virtual void __thiscall DirectUI::TouchScrollBar::PageUp(unsigned int)",
    "public: void __thiscall DirectUI::Element::PaintBorder(struct HDC__ *,class DirectUI::Value *,struct tagRECT *,struct tagRECT const &)",
    "public: static long __stdcall DirectUI::PText::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_ResolveStyleSheet(unsigned short const *,class DirectUI::Value * *,unsigned int *)",
    "private: void __thiscall DirectUI::Element::_SyncVisible(void)",
    "public: long __thiscall DirectUI::TouchButton::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::RichText::TypographyProp(void)",
    "public: unsigned long __thiscall DirectUI::CCTreeView::SetStyle(unsigned long)",
    "RegisterCommonControls",
    "public: __thiscall DirectUI::VerticalFlowLayout::VerticalFlowLayout(class DirectUI::VerticalFlowLayout const &)",
    "public: int __thiscall DirectUI::Combobox::GetSelection(void)",
    "protected: virtual void __thiscall DirectUI::ModernProgressRing::OnDestroy(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::accHitTest(long,long,struct tagVARIANT *)",
    "private: static long __stdcall DirectUI::EventManager::RaiseStructureChangedEvent(class DirectUI::Element *,enum StructureChangeType)",
    "public: void __thiscall DirectUI::DUIXmlParser::EnableDesignMode(void)",
    "const DirectUI::HWNDElementProvider::`vftable'{for `IRawElementProviderSimple'}",
    "public: __thiscall DirectUI::RadioButtonGlyph::RadioButtonGlyph(class DirectUI::RadioButtonGlyph const &)",
    "public: long __thiscall DirectUI::TouchHWNDElement::SetWindowAccessGradientColor(class DirectUI::Value *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::CompositingQualityProp(void)",
    "SetDefAction",
    "public: struct tagPOINT const * __thiscall DirectUI::Value::GetPoint(void)",
    "public: virtual __thiscall DirectUI::InvokeHelper::~InvokeHelper(void)",
    "public: virtual long __stdcall DirectUI::ElementProvider::get_ProviderOptions(enum ProviderOptions *)",
    "public: virtual unsigned long __stdcall DirectUI::ScrollProvider::Release(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseLibrary(struct DirectUI::ParserTools::ExprNode const *,struct HINSTANCE__ * *)",
    "public: static long __stdcall DirectUI::CCListBox::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: void __thiscall DirectUI::DUIXmlParser::SetDefaultHInstance(struct HINSTANCE__ *)",
    "public: __thiscall DirectUI::ToggleProvider::ToggleProvider(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::ScrollViewer::GetClassInfoPtr(void)",
    "public: void __thiscall DirectUI::TouchSlider::SetThumbValue(int,bool)",
    "const DirectUI::HWNDElementProxy::`vftable'",
    "public: long __thiscall DirectUI::CCBase::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: virtual void __thiscall DirectUI::Layout::Attach(class DirectUI::Element *)",
    "public: static int DirectUI::Schema::SelectionInvalidatedEvent",
    "public: __thiscall DirectUI::HWNDElementProxy::HWNDElementProxy(class DirectUI::HWNDElementProxy const &)",
    "public: class DirectUI::CCRadioButton & __thiscall DirectUI::CCRadioButton::operator=(class DirectUI::CCRadioButton const &)",
    "public: static long __stdcall DirectUI::Button::Register(void)",
    "public: __thiscall DirectUI::SelectionItemProxy::SelectionItemProxy(class DirectUI::SelectionItemProxy const &)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::XElement::GetClassInfoPtr(void)",
    "public: static int DirectUI::Schema::IsEnabledProperty",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::DialogElement::RegisteredDefaultButtonProp(void)",
    "public: virtual struct HWND__ * __thiscall DirectUI::XElement::CreateHWND(struct HWND__ *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchButton::TreatRightMouseButtonAsLeftProp(void)",
    "CreateTouchTooltip",
    "public: __thiscall DirectUI::TaskPage::TaskPage(void)",
    "protected: virtual long __thiscall DirectUI::StyledScrollViewer::AddChildren(void)",
    "public: long __thiscall DirectUI::CCListView::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: static long __stdcall DirectUI::TouchSelectItem::Register(void)",
    "public: static int DirectUI::Schema::Orientation",
    "public: unsigned int __thiscall DirectUI::CCTreeView::GetItemState(struct _TREEITEM * const)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::AnimationStrip::GetClassInfoW(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Navigator::TargetPageProp(void)",
    "public: long __thiscall DirectUI::CCProgressBar::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: void __thiscall DirectUI::DUIXmlParser::Destroy(void)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetManipulationVerticalAlignment(int)",
    "public: __thiscall DirectUI::ClassInfoBase::ClassInfoBase(void)",
    "public: long __thiscall DirectUI::ScrollBar::SetOrder(int)",
    "public: long __thiscall DirectUI::TouchCheckBox::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: struct _TREEITEM * __thiscall DirectUI::CCTreeView::InsertItem(unsigned short *,unsigned int,struct _TREEITEM * const,struct _TREEITEM * const)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCTreeView::GetClassInfoW(void)",
    "public: __thiscall DirectUI::PText::PText(void)",
    "private: void __thiscall DirectUI::Element::_SyncBackground(void)",
    "public: int __thiscall DirectUI::Element::GetActive(void)",
    "private: long __thiscall DirectUI::Element::_PostSourceChange(void)",
    "public: class DirectUI::AutoVariant & __thiscall DirectUI::AutoVariant::operator=(class DirectUI::AutoVariant const &)",
    "public: long __thiscall DirectUI::XResourceProvider::Initialize(struct HINSTANCE__ *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCVScrollBar::s_pClassInfo",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::RichText::FontSizeRunsProp(void)",
    "public: unsigned short const * __thiscall DirectUI::TouchCommandButton::GetSubContent(class DirectUI::Value * *)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::TouchEdit2::GetUiaFocusDelegate(void)",
    "public: long __thiscall DirectUI::TouchSwitch::Initialize(class DirectUI::Element *,unsigned long *)",
    "RegisterMacroControls",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::Skip(unsigned long)",
    "private: virtual void __thiscall DirectUI::TouchEdit2::OnListenedPropertyChanged(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "protected: virtual void __thiscall DirectUI::ProgressRangeValueProxy::Init(class DirectUI::Element *)",
    "public: bool __thiscall DirectUI::Element::IsValidAccessor(struct DirectUI::PropertyInfo const *,int,bool)",
    "public: void __thiscall DirectUI::TouchScrollViewer::NewChildElementsAdded(void)",
    "private: static long __stdcall DirectUI::EventManager::HandleAccPatternChange(class DirectUI::Element *,struct IRawElementProviderSimple *,unsigned int,unsigned int,int,struct tagVARIANT *,struct tagVARIANT *,void (__stdcall*)(struct tagVARIANT *))",
    "public: __thiscall DirectUI::ScrollBarRangeValueProxy::ScrollBarRangeValueProxy(void)",
    "public: int __thiscall DirectUI::InvokeHelper::Init(unsigned long)",
    "public: virtual bool __thiscall DirectUI::RadioButtonGlyph::OnLostDialogFocus(struct DirectUI::IDialogElement *)",
    "public: __thiscall DirectUI::FlowLayout::FlowLayout(class DirectUI::FlowLayout const &)",
    "const DirectUI::UnknownElement::`vftable'",
    "public: virtual long __thiscall DirectUI::Element::AddBehavior(struct IDuiBehavior *)",
    "public: long __thiscall DirectUI::TouchCommandButton::SetSubContent(unsigned short const *)",
    "public: virtual long __thiscall DirectUI::NativeHWNDHost::OnMessage(unsigned int,unsigned int,long,long *)",
    "public: long __thiscall DirectUI::Element::SetFontQuality(int)",
    "public: long __thiscall DirectUI::TouchScrollViewer::SetSnapOffsetX(float)",
    "public: __thiscall DirectUI::InvokeProvider::InvokeProvider(void)",
    "private: unsigned __int64 __thiscall DirectUI::CallstackTracker::GetModuleBase(void *,unsigned __int64)",
    "public: static int DirectUI::Schema::EditControlType",
    "protected: virtual void __thiscall DirectUI::ModernProgressRing::OnUnHosted(class DirectUI::Element *)",
    "public: virtual __thiscall DirectUI::CCTreeView::~CCTreeView(void)",
    "public: virtual unsigned long __stdcall DirectUI::GridProvider::Release(void)",
    "public: float __thiscall DirectUI::TouchScrollViewer::GetSnapOffsetY(void)",
    "GetThemeHandle",
    "protected: void __thiscall DirectUI::HWNDHost::SyncRect(unsigned int,bool)",
    "public: static void __stdcall DirectUI::FontCache::UninitProcess(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::PText::s_pClassInfo",
    "public: static long __stdcall DirectUI::XResourceProvider::Create(class DirectUI::XResourceProvider * *)",
    "public: virtual __thiscall DirectUI::Clipper::~Clipper(void)",
    "protected: virtual struct HWND__ * __thiscall DirectUI::Edit::CreateHWND(struct HWND__ *)",
    "public: virtual long __stdcall DirectUI::HWNDElementAccessible::get_accParent(struct IDispatch * *)",
    "public: __thiscall DirectUI::TaskPage::operator struct _PSP *(void)",
    "public: __thiscall DirectUI::ModernProgressBar::ModernProgressBar(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::BaseScrollViewer::YBarVisibilityProp(void)",
    "public: static long __stdcall DirectUI::Navigator::Register(void)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accState(struct tagVARIANT,struct tagVARIANT *)",
    "public: virtual long __thiscall DirectUI::TouchEdit2::FinalizeCurrentIMEComposition(void)",
    "public: long __thiscall DirectUI::Element::SetAnimation(int)",
    "public: virtual bool __thiscall DirectUI::Element::EnsureVisible(int,int,int,int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCBaseScrollBar::PositionProp(void)",
    "public: static class UID __stdcall DirectUI::Browser::Entered(void)",
    "public: static bool __stdcall DirectUI::ToggleProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::Combobox::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: void __thiscall DirectUI::TouchHWNDElement::RegisterForAnimationStatusChanges(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::ExpandoButtonGlyph::s_pClassInfo",
    "public: void __thiscall DirectUI::GridLayout::Initialize(int,int)",
    "public: long __thiscall DirectUI::TouchSelect::GetItemData(int,struct IUnknown * *)",
    "public: static int DirectUI::Schema::ButtonControlType",
    "public: virtual __thiscall DirectUI::RadioButtonGlyph::~RadioButtonGlyph(void)",
    "public: static int DirectUI::Schema::SelectionItemElementSelectedEvent",
    "public: virtual void __thiscall DirectUI::FillLayout::DoLayout(class DirectUI::Element *,int,int)",
    "public: void __thiscall DirectUI::TouchSlider::UseFixedTooltipOffset(void)",
    "public: int __thiscall DirectUI::BaseScrollViewer::GetYBarVisibility(void)",
    "protected: virtual void __thiscall DirectUI::CCCommandLink::PostCreate(struct HWND__ *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchSwitch::TitleTextProp(void)",
    "public: static void __stdcall DirectUI::CCRadioButton::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: void __thiscall DirectUI::RepeatButton::SetStopThumbBehavior(void)",
    "public: virtual long __stdcall DirectUI::ScrollProvider::get_HorizontalScrollPercent(double *)",
    "public: bool __thiscall DirectUI::Element::GetAccessible(void)",
    "public: long __thiscall DirectUI::Button::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: long __thiscall DirectUI::Edit::SetWantTabs(bool)",
    "public: virtual __thiscall DirectUI::HWNDHostAccessible::~HWNDHostAccessible(void)",
    "protected: virtual long __thiscall DirectUI::TaskPage::OnKillActive(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Edit::MaxLengthProp(void)",
    "public: virtual __thiscall DirectUI::XBaby::~XBaby(void)",
    "public: class DirectUI::Value & __thiscall DirectUI::Value::operator=(class DirectUI::Value const &)",
    "const DirectUI::DialogElement::`vftable'{for `DirectUI::IDialogElement'}",
    "const DirectUI::Button::`vftable'",
    "public: long __thiscall DirectUI::ModernProgressBar::SetAutoHeight(bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchCommandButton::SubContentProp(void)",
    "private: long __thiscall DirectUI::ValueProxy::GetIsReadOnly(int *)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::put_accName(struct tagVARIANT,unsigned short *)",
    "public: void __thiscall DirectUI::NavReference::Init(class DirectUI::Element *,struct tagRECT *)",
    "public: virtual long __thiscall DirectUI::TouchCheckBox::Insert(class DirectUI::Element * *,unsigned int,unsigned int)",
    "public: void __thiscall DirectUI::TouchScrollViewer::GetTranslatedTileRects(struct tagRECT *,unsigned int *,unsigned int)",
    "protected: long __thiscall DirectUI::DuiAccessible::GetAccName(struct tagVARIANT,int,unsigned short * *)",
    "public: long __thiscall DirectUI::Element::RemoveAll(void)",
    "public: __thiscall DirectUI::Proxy::Proxy(class DirectUI::Proxy const &)",
    "public: static bool __stdcall DirectUI::EventManager::WantEvent(enum DirectUI::Schema::Event)",
    "public: __thiscall DirectUI::RepeatButton::RepeatButton(void)",
    "public: static class UID __stdcall DirectUI::Element::AnimationChange(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::DPIProp(void)",
    "public: long __thiscall DirectUI::DUIXmlParser::GetSheet(unsigned short const *,class DirectUI::Value * *)",
    "public: bool __thiscall DirectUI::ModernProgressRing::IsAddLayeredRef(void)",
    "public: virtual bool __thiscall DirectUI::Viewer::EnsureVisible(int,int,int,int)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCBaseCheckRadioButton::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Bind::ConnectProp(void)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accName(struct tagVARIANT,unsigned short * *)",
    "public: static int DirectUI::Schema::NameProperty",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::ScrollBar::GetClassInfoW(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::DialogElement::ButtonClassAcceptsEnterKeyProp(void)",
    "public: virtual void __thiscall DirectUI::Viewer::OnEvent(struct DirectUI::Event *)",
    "public: __thiscall DirectUI::SafeArrayAccessor::~SafeArrayAccessor(void)",
    "public: void __thiscall DirectUI::RichText::SetDWriteFontCollection(struct IDWriteFontCollection *)",
    "const DirectUI::NineGridLayout::`vftable'",
    "public: long __thiscall DirectUI::CCPushButton::SetOverrideButtonBackground(bool)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::GetTypeInfo(unsigned int,unsigned long,struct ITypeInfo * *)",
    "protected: virtual void __thiscall DirectUI::NavigatorSelectionItemProxy::Init(class DirectUI::Element *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::RichText::AliasedRenderingProp(void)",
    "public: bool __thiscall DirectUI::HWNDElement::IsFirstElement(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::RichText::SetBaseline(int)",
    "public: __thiscall DirectUI::XHost::~XHost(void)",
    "public: __thiscall DirectUI::UnknownElement::UnknownElement(class DirectUI::UnknownElement const &)",
    "private: class DirectUI::Element * __thiscall DirectUI::Viewer::_GetContent(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Progress::GetClassInfoPtr(void)",
    "public: virtual bool __thiscall DirectUI::CCPushButton::OnLostDialogFocus(struct DirectUI::IDialogElement *)",
    "public: virtual void __thiscall DirectUI::HWNDHost::SetKeyFocus(void)",
    "public: unsigned short const * __thiscall DirectUI::Bind::GetConnect(class DirectUI::Value * *)",
    "public: virtual void __thiscall DirectUI::TouchButton::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: __thiscall DirectUI::TouchHyperLink::TouchHyperLink(void)",
    "public: long __thiscall DirectUI::Element::SetDirection(int)",
    "public: void __thiscall DirectUI::Element::PaintStringContent(struct HDC__ *,struct tagRECT const *,class DirectUI::Value *,int)",
    "public: virtual void __thiscall DirectUI::XBaby::OnNoChildWithShortcutFound(struct DirectUI::KeyboardEvent *)",
    "public: virtual long __stdcall DirectUI::SelectionItemProvider::get_IsSelected(int *)",
    "public: long __thiscall DirectUI::TouchEdit2::SetSelection(long,long)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccRoleProp(void)",
    "public: __thiscall DirectUI::HWNDElement::HWNDElement(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::TouchEdit2::GetClassInfoW(void)",
    "public: void __thiscall DirectUI::TouchSelect::RemoveAll(void)",
    "public: long __thiscall DirectUI::Element::SetBorderThickness(int,int,int,int)",
    "public: virtual struct HWND__ * __thiscall DirectUI::CCBaseScrollBar::CreateHWND(struct HWND__ *)",
    "public: int __thiscall DirectUI::TouchSlider::GetThumbValue(void)",
    "protected: void __thiscall DirectUI::HWNDHost::SyncStyle(void)",
    "public: class DirectUI::DUIXmlParser * __thiscall DirectUI::DUIFactory::DetachParser(void)",
    "private: virtual long __thiscall DirectUI::TaskPage::CreateDUICP(class DirectUI::HWNDElement *,struct HWND__ *,struct HWND__ *,class DirectUI::Element * *,class DirectUI::DUIXmlParser * *)",
    "public: bool __thiscall DirectUI::Element::IsHosted(void)",
    "public: static class UID __stdcall DirectUI::TouchScrollViewer::ManipulationStarted(void)",
    "public: virtual void __thiscall DirectUI::Selector::OnEvent(struct DirectUI::Event *)",
    "public: long __thiscall DirectUI::TouchScrollViewer::GetVScrollbar(class DirectUI::Element * *)",
    "protected: long __thiscall DirectUI::Element::_SetValue(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,bool)",
    "private: static struct DirectUI::IClassInfo * DirectUI::XElement::s_pClassInfo",
    "public: virtual long __stdcall DirectUI::HWNDHostClientAccessible::accNavigate(long,struct tagVARIANT,struct tagVARIANT *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::BorderLayout::UpdateDesiredSize(class DirectUI::Element *,int,int,class DirectUI::Surface *)",
    "const DirectUI::ExpandCollapseProvider::`vftable'{for `DirectUI::IProvider'}",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCSysLink::s_pClassInfo",
    "private: bool __thiscall DirectUI::ElementProxy::_IsSemanticZoomControl(int)",
    "private: long __thiscall DirectUI::GridItemProxy::GetContainingGrid(struct IRawElementProviderSimple * *)",
    "protected: virtual long __thiscall DirectUI::TaskPage::OnSetActive(void)",
    "public: virtual long __stdcall DirectUI::SelectionProvider::get_IsSelectionRequired(int *)",
    "public: bool __thiscall DirectUI::TouchEdit2::GetPromptWithCaret(void)",
    "public: void __thiscall DirectUI::NavScoring::Init(class DirectUI::Element *,int,struct DirectUI::NavReference const *)",
    "public: __thiscall DirectUI::Expando::Expando(class DirectUI::Expando const &)",
    "public: int __thiscall DirectUI::TouchSlider::GetBuffering(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::TouchCommandButton::GetClassInfoPtr(void)",
    "InitProcessPriv",
    "const DirectUI::SelectorNoDefault::`vftable'",
    "public: class DirectUI::Expando & __thiscall DirectUI::Expando::operator=(class DirectUI::Expando const &)",
    "public: int __thiscall DirectUI::Element::GetAlpha(void)",
    "public: virtual long __thiscall DirectUI::Element::GetElementProviderImpl(class DirectUI::InvokeHelper *,class DirectUI::ElementProvider * *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateGraphic(struct HENHMETAFILE__ *,struct HENHMETAFILE__ *)",
    "public: __thiscall DirectUI::DialogElement::DialogElement(class DirectUI::DialogElement const &)",
    "public: static class UID __stdcall DirectUI::Thumb::Drag(void)",
    "public: static long __stdcall DirectUI::Edit::Register(void)",
    "protected: unsigned int __thiscall DirectUI::GridLayout::GetCurrentRows(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::RadioButtonGlyph::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: bool __thiscall DirectUI::Element::HasContent(void)",
    "const DirectUI::ScrollItemProvider::`vftable'{for `DirectUI::IProvider'}",
    "const DirectUI::ScrollItemProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: virtual long __stdcall DirectUI::SelectionProvider::QueryInterface(struct _GUID const &,void * *)",
    "protected: static struct tagSIZE __stdcall DirectUI::FlowLayout::SizeZero(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetCursorNull(void)",
    "public: static void __stdcall DirectUI::RefPointElement::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: long __thiscall DirectUI::Element::SetMinSize(int,int)",
    "public: static class UID __stdcall DirectUI::Browser::StartNavigate(void)",
    "public: static int DirectUI::Schema::VirtualizedItemPattern",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchScrollViewer::ManipulationHorizontalAlignmentProp(void)",
    "private: static struct DirectUI::Schema::EventMap const * const DirectUI::Schema::g_eventMapping",
    "public: virtual void __thiscall DirectUI::Layout::OnLayoutPosChanged(class DirectUI::Element *,class DirectUI::Element *,int,int)",
    "public: virtual __thiscall DirectUI::CCBase::~CCBase(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::MapPropertyEnumValue(struct DirectUI::EnumMap const *,unsigned short const *,int *)",
    "private: long __thiscall DirectUI::ScrollProxy::ScrollToHorizontalPosition(int,bool)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::TouchHyperLink::GetClassInfoW(void)",
    "public: void __thiscall DirectUI::Macro::SetParser(class DirectUI::DUIXmlParser *)",
    "public: static long __stdcall DirectUI::Bind::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "protected: virtual long __thiscall DirectUI::StyledScrollViewer::CreateScrollBars(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchScrollViewer::ManipulationVerticalAlignmentProp(void)",
    "public: struct DirectUI::AccessibleButton::ACCESSIBLEROLE & __thiscall DirectUI::AccessibleButton::ACCESSIBLEROLE::operator=(struct DirectUI::AccessibleButton::ACCESSIBLEROLE const &)",
    "private: static struct DirectUI::Schema::PatternMap const * const DirectUI::Schema::g_patternMapping",
    "public: bool __thiscall DirectUI::HWNDElement::IsLastElement(class DirectUI::Element *)",
    "const DirectUI::InvokeProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "const DirectUI::HWNDHostAccessible::`vftable'{for `IOleWindow'}",
    "public: virtual __thiscall DirectUI::AutoButton::~AutoButton(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::TouchButton::GetClassInfoPtr(void)",
    "const DirectUI::AutoButton::`vftable'",
    "private: static unsigned int const (* DirectUI::HWNDHost::g_rgMouseMap)[3]",
    "public: long __thiscall DirectUI::TouchSelect::RemoveItem(int)",
    "private: unsigned short * __thiscall DirectUI::Element::RemoveShortcutFromName(unsigned short const *)",
    "public: static int DirectUI::Schema::GridItem_ColumnSpan_Property",
    "public: bool __thiscall DirectUI::TouchButton::GetShowKeyFocus(void)",
    "public: long __thiscall DirectUI::ModernProgressBar::SetMaximum(int)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static long __stdcall DirectUI::EventManager::Init(void)",
    "public: void __thiscall DirectUI::Viewer::SetEnsureVisibleUseLayoutCoordinates(bool)",
    "public: class DirectUI::Element * __thiscall DirectUI::TouchSlider::GetTrackElement(void)",
    "public: class DirectUI::RangeValueProxy & __thiscall DirectUI::RangeValueProxy::operator=(class DirectUI::RangeValueProxy const &)",
    "public: static class DirectUI::Element * __stdcall DirectUI::HWNDElement::GetKeyFocusedElement(void)",
    "const DirectUI::CCHScrollBar::`vftable'{for `DirectUI::CCBase'}",
    "public: bool __thiscall DirectUI::Element::GetHighDPI(void)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accKeyboardShortcut(struct tagVARIANT,unsigned short * *)",
    "public: float __thiscall DirectUI::TouchScrollViewer::GetSnapIntervalY(void)",
    "protected: void __thiscall DirectUI::CCPushButton::SetDefaultState(unsigned long,unsigned long)",
    "protected: long __thiscall DirectUI::DUIXmlParser::GetValueParser(class DirectUI::ParserTools::ValueParser * *)",
    "public: __thiscall DirectUI::DCSurface::DCSurface(struct HDC__ *)",
    "public: struct tagRECT const * __thiscall DirectUI::Element::GetPadding(class DirectUI::Value * *)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accRole(struct tagVARIANT,struct tagVARIANT *)",
    "public: virtual unsigned long __stdcall DirectUI::DuiAccessible::AddRef(void)",
    "public: virtual void __thiscall DirectUI::TouchButton::OnHosted(class DirectUI::Element *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Expando::GetClassInfoPtr(void)",
    "public: long __thiscall DirectUI::AnimationStrip::SetFrameWidth(int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCRadioButton::AutoGroupingProp(void)",
    "public: virtual __thiscall DirectUI::GridLayout::~GridLayout(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accName(struct tagVARIANT,unsigned short * *)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accChildCount(long *)",
    "public: void __thiscall DirectUI::RichText::SetDWriteTextLayout(struct IDWriteTextLayout *)",
    "public: class DirectUI::LinkedListNode & __thiscall DirectUI::LinkedListNode::operator=(class DirectUI::LinkedListNode const &)",
    "public: long __thiscall DirectUI::Edit::SetDirty(bool)",
    "public: struct IDWriteFactory * __thiscall DirectUI::RichText::GetFactory(void)",
    "public: void __thiscall DirectUI::NativeHWNDHost::SaveFocus(void)",
    "public: void __thiscall DirectUI::TouchSlider::SetRangeMin(int)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseGTFStr(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::XBaby::GetAdjacent(class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: void __thiscall DirectUI::DialogElementCore::OnDefaultButtonTrackingChanged(class DirectUI::Value *)",
    "public: virtual __thiscall DirectUI::CCBaseCheckRadioButton::~CCBaseCheckRadioButton(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::XBaby::GetClassInfoW(void)",
    "public: unsigned short __thiscall DirectUI::Element::GetID(void)",
    "public: int __thiscall DirectUI::CCTrackBar::GetRangeMax(void)",
    "public: enum DirectUI::TouchButton::ClickDevice __thiscall DirectUI::TouchButton::GetClickDevice(void)",
    "public: static long __stdcall DirectUI::BorderLayout::Create(class DirectUI::Layout * *)",
    "public: static long __stdcall ScrubBehavior::Create(struct IDuiBehavior * *)",
    "public: unsigned int __thiscall DirectUI::Pages::GetCount(void)",
    "public: virtual void __thiscall DirectUI::TouchButton::GetImmersiveFocusRectOffsets(struct tagRECT *)",
    "RegisterBaseControls",
    "public: void __thiscall DirectUI::DUIXmlParser::SetScaleFactor(float)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCBaseScrollBar::s_pClassInfo",
    "private: long __thiscall DirectUI::GridItemProxy::GetColumn(int *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::LocationProp(void)",
    "public: float __thiscall DirectUI::TouchScrollViewer::GetZoomMinimum(void)",
    "public: virtual long __stdcall DirectUI::RangeValueProvider::get_Value(double *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::TextGraphic::s_pClassInfo",
    "public: virtual __thiscall DirectUI::ElementWithHWND::~ElementWithHWND(void)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::ItemList::GetAdjacent(class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "private: float __thiscall DirectUI::DUIXmlParser::_ScalePointsToPixels(float)const",
    "public: static long __stdcall DirectUI::CCRadioButton::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::TouchScrollBar::GetClassInfoPtr(void)",
    "public: static bool __stdcall DirectUI::EventManager::FWantAnyEvent(class DirectUI::Element *)",
    "public: static bool __stdcall DirectUI::GridProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: __thiscall DirectUI::ScrollViewer::ScrollViewer(class DirectUI::ScrollViewer const &)",
    "public: virtual bool __thiscall DirectUI::ExpandoButtonGlyph::OnReceivedDialogFocus(struct DirectUI::IDialogElement *)",
    "public: static int DirectUI::Schema::TablePattern",
    "public: virtual void __thiscall DirectUI::BaseScrollViewer::OnListenerAttach(class DirectUI::Element *)",
    "public: virtual void __thiscall DirectUI::HWNDHost::SetWindowDirection(struct HWND__ *)",
    "public: long __thiscall DirectUI::InvokeHelper::DoInvoke(int,class DirectUI::ElementProvider *,class DirectUI::ProviderProxy * (__stdcall*)(class DirectUI::Element *),char *)",
    "public: static long __stdcall DirectUI::CCSysLink::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static class UID __stdcall DirectUI::TouchHWNDElement::ProcessingKeyboardNavigation(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCPushButton::HasShieldProp(void)",
    "protected: virtual class DirectUI::BaseScrollBar * __thiscall DirectUI::ScrollViewer::GetHScroll(void)",
    "public: static int DirectUI::Schema::HasKeyboardFocusProperty",
    "public: long __thiscall DirectUI::RichText::SetFontColorRuns(unsigned short const *)",
    "public: static void __stdcall DirectUI::CCBase::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TouchScrollViewer::SnapPointCollectionXProp(void)",
    "public: virtual void __thiscall DirectUI::HWNDElement::RemoveTooltip(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::CCCheckBox::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual long __thiscall DirectUI::TouchSelect::Insert(class DirectUI::Element * *,unsigned int,unsigned int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::RichText::LineSpacingProp(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_BuildElement(struct IXmlReader *,class DirectUI::Element *,class DirectUI::Element * *)",
    "public: static int DirectUI::Schema::GridItemPattern",
    "public: virtual __thiscall DirectUI::Navigator::~Navigator(void)",
    "public: long __thiscall DirectUI::TouchSelect::UpdateElement(int,class DirectUI::Element *,unsigned short const *)",
    "public: static long __stdcall DirectUI::StyleSheet::Create(class DirectUI::StyleSheet * *)",
    "private: static struct DirectUI::AccessibleButton::ACCESSIBLEROLE const * __stdcall DirectUI::AccessibleButton::FindAccessibleRole(int)",
    "public: class DirectUI::IProvider & __thiscall DirectUI::IProvider::operator=(class DirectUI::IProvider const &)",
    "public: class DirectUI::VerticalFlowLayout & __thiscall DirectUI::VerticalFlowLayout::operator=(class DirectUI::VerticalFlowLayout const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::DialogElement::DefaultButtonTrackingProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AnimationProp(void)",
    "public: struct tagSIZE const * __thiscall DirectUI::Value::GetSize(void)",
    "public: static int DirectUI::Schema::IsControlElementProperty",
    "public: long __thiscall DirectUI::CCRadioButton::SetAutoGrouping(bool)",
    "public: class DirectUI::CCListView & __thiscall DirectUI::CCListView::operator=(class DirectUI::CCListView const &)",
    "public: class DirectUI::DCSurface & __thiscall DirectUI::DCSurface::operator=(class DirectUI::DCSurface const &)",
    "public: __thiscall DirectUI::HWNDHostAccessible::HWNDHostAccessible(void)",
    "public: __thiscall DirectUI::ScrollViewer::ScrollViewer(void)",
    "public: static long __stdcall DirectUI::Browser::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: __thiscall DirectUI::RefPointElement::RefPointElement(void)",
    "public: virtual long __thiscall DirectUI::TouchEdit2::GetTextServices(class ITextServices * *)",
    "public: virtual void __thiscall DirectUI::RepeatButton::OnInput(struct DirectUI::InputEvent *)",
    "public: long __thiscall DirectUI::HWNDElement::Initialize(struct HWND__ *,bool,unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: int __thiscall DirectUI::Element::GetFontWeight(void)",
    "public: static class UID __stdcall DirectUI::TouchScrollViewer::SetContactNeeded(void)",
    "public: bool __thiscall DirectUI::TouchSlider::GetShowTick(void)",
    "public: static int DirectUI::Schema::SplitButtonControlType",
    "const DirectUI::ScrollBar::`vftable'{for `DirectUI::BaseScrollBar'}",
    "protected: virtual long __thiscall DirectUI::Repeater::BuildElement(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::TouchSwitch::GetClassInfoPtr(void)",
    "public: virtual bool __thiscall DirectUI::TouchCheckBoxGlyph::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual long __thiscall DirectUI::NavigatorSelectionItemProxy::DoMethod(int,char *)",
    "public: int __thiscall DirectUI::Element::GetX(void)",
    "protected: void __thiscall DirectUI::HWNDHost::SyncParent(void)",
    "public: __thiscall DirectUI::CCPushButton::CCPushButton(class DirectUI::CCPushButton const &)",
    "public: int __thiscall DirectUI::NavScoring::TrackScore(class DirectUI::Element *,class DirectUI::Element *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseGraphicValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "private: static long __stdcall DirectUI::EventManager::GetBool(struct tagVARIANT *,class DirectUI::Value *)",
    "public: long __thiscall DirectUI::RichText::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: static long __stdcall DirectUI::TouchCheckBoxGlyph::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual bool __thiscall DirectUI::CCTrackBar::OnMessage(unsigned int,unsigned int,long,long *)",
    "public: static long __stdcall DirectUI::ScrollViewer::Register(void)",
    "public: static int DirectUI::Schema::RangeValue_LargeChange_Property",
    "public: static class UID __stdcall DirectUI::TouchHWNDElement::ScaleChanged(void)",
    "public: static void __stdcall DirectUI::CCCommandLink::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual long __stdcall DirectUI::XProvider::Navigate(int,bool *)",
    "public: static int DirectUI::Schema::Selection_CanSelectMultiple_Property",
    "public: virtual long __thiscall DirectUI::BrowserSelectionProxy::DoMethod(int,char *)",
    "public: virtual long __thiscall DirectUI::TouchEdit2::GetTextDocument(struct ITextDocument * *)",
    "public: virtual long __stdcall DirectUI::ValueProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: virtual __thiscall DirectUI::ClassInfoBase::~ClassInfoBase(void)",
    "public: void __thiscall DirectUI::Movie::Resume(void)",
    "protected: void __thiscall DirectUI::Element::_OnFontPropChanged(class DirectUI::Value *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateValueList(class DirectUI::DynamicArray *)",
    "public: virtual unsigned long __stdcall DirectUI::TableItemProvider::Release(void)",
    "public: __thiscall DirectUI::ShellBorderLayout::ShellBorderLayout(class DirectUI::ShellBorderLayout const &)",
    "public: virtual unsigned long __stdcall DirectUI::SelectionProvider::AddRef(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accState(struct tagVARIANT,struct tagVARIANT *)",
    "public: void __thiscall DirectUI::XHost::Host(class DirectUI::Element *)",
    "public: __thiscall DirectUI::IXProviderCP::IXProviderCP(void)",
    "protected: long __thiscall DirectUI::ElementProxy::Navigate(enum NavigateDirection,struct IRawElementProviderFragment * *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::StyledScrollViewer::GetClassInfoPtr(void)",
    "public: __thiscall DirectUI::TouchSelect::TouchSelect(void)",
    "public: virtual long __thiscall DirectUI::Macro::Add(class DirectUI::Element * *,unsigned int)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::accLocation(long *,long *,long *,long *,struct tagVARIANT)",
    "public: long __thiscall DirectUI::DUIXmlParser::LookupElement(struct IXmlReader *,unsigned short const *,struct HINSTANCE__ *,struct DirectUI::IClassInfo * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::LastDSConstProp(void)",
    "public: virtual bool __thiscall DirectUI::HWNDHost::OnSysChar(unsigned short)",
    "public: void __thiscall DirectUI::HWNDElement::ShowUIState(bool,bool)",
    "public: virtual long __stdcall DirectUI::RangeValueProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: long __thiscall DirectUI::Element::SetHeight(int)",
    "public: virtual void __thiscall DirectUI::Layout::OnRemove(class DirectUI::Element *,class DirectUI::Element * *,unsigned int)",
    "public: class DirectUI::CCPushButton & __thiscall DirectUI::CCPushButton::operator=(class DirectUI::CCPushButton const &)",
    "public: static int DirectUI::Schema::WindowWindowClosedEvent",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseBoolValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: __thiscall DirectUI::Layout::Layout(void)",
    "private: void __thiscall DirectUI::BaseScrollViewer::CheckScroll(class DirectUI::BaseScrollBar *,int,int,int)",
    "public: static void __stdcall DirectUI::PushButton::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::RichText::TypographyRunsProp(void)",
    "protected: virtual class DirectUI::BaseScrollBar * __thiscall DirectUI::ScrollViewer::GetVScroll(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCTrackBar::s_pClassInfo",
    "public: static int DirectUI::Schema::MenuOpenedEvent",
    "private: static long __stdcall DirectUI::EventManager::RaiseVisibilityEvents(void)",
    "public: class DirectUI::NavigatorSelectionItemProxy & __thiscall DirectUI::NavigatorSelectionItemProxy::operator=(class DirectUI::NavigatorSelectionItemProxy const &)",
    "public: static long __stdcall DirectUI::ExpandoButtonGlyph::Register(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::AutoButton::s_pClassInfo",
    "public: void __thiscall DirectUI::CritSecLock::Unlock(void)",
    "public: class DirectUI::LinkedListNode * __thiscall DirectUI::LinkedList::RemoveTail(void)",
    "public: long __thiscall DirectUI::Element::SetStdCursor(int)",
    "public: static long __stdcall DirectUI::Progress::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "protected: static struct DirectUI::DUIXmlParser::FunctionDefinition const * const DirectUI::DUIXmlParser::s_fdString",
    "public: __thiscall DirectUI::CritSecLock::CritSecLock(struct _RTL_CRITICAL_SECTION *)",
    "public: static void __stdcall DirectUI::Bind::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCListBox::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: virtual bool __thiscall DirectUI::XBaby::OnChildReceivedFocus(class DirectUI::Element *)",
    "private: bool __thiscall DirectUI::Element::TryLinePattern(struct tagPOINT *,struct tagRECT const &)",
    "public: static int DirectUI::Schema::SemanticZoomControlType",
    "public: static int DirectUI::Schema::FrameworkId",
    "public: bool __thiscall DirectUI::Element::HasAnimation(void)",
    "protected: struct HWND__ * __thiscall DirectUI::HWNDHost::CreateAccNameLabel(struct HWND__ *)",
    "public: static int DirectUI::Schema::RangeValuePattern",
    "public: long __thiscall DirectUI::ClassInfoBase::Register(void)",
    "public: int __thiscall DirectUI::BaseScrollViewer::GetXScrollHeight(void)",
    "public: static long __stdcall DirectUI::XProvider::Create(class DirectUI::Element *,class DirectUI::IXProviderCP *,class DirectUI::XProvider * *)",
    "protected: void __thiscall DirectUI::Element::MarkHosted(void)",
    "public: long __thiscall DirectUI::AnimationStrip::SetFrameDuration(int)",
    "public: static long __stdcall DirectUI::ScrollViewer::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual unsigned long __stdcall DirectUI::ToggleProvider::Release(void)",
    "public: virtual void __thiscall DirectUI::DialogElement::OnKeyFocusMoved(class DirectUI::Element *,class DirectUI::Element *)",
    "public: virtual __thiscall DirectUI::HWNDHost::~HWNDHost(void)",
    "public: __thiscall DirectUI::GridItemProxy::GridItemProxy(class DirectUI::GridItemProxy const &)",
    "public: long __thiscall DirectUI::RichText::SetTypography(unsigned short const *)",
    "public: __thiscall DirectUI::ExpandCollapseProxy::ExpandCollapseProxy(class DirectUI::ExpandCollapseProxy const &)",
    "public: long __thiscall DirectUI::TouchSlider::SetIsShowOnOffFeedback(bool)",
    "public: virtual long __thiscall DirectUI::XBaby::SetDefaultButtonTracking(bool)",
    "IsPalette",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetElementNull(void)",
    "public: virtual void __thiscall DirectUI::TouchHWNDElement::UpdateTooltip(class DirectUI::Element *)",
    "public: void __thiscall DirectUI::PText::SetDataEntry(struct DirectUI::IDataEntry *)",
    "public: long __thiscall DirectUI::TouchHWNDElement::SetTooltipMaximumLineCount(int)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseLiteralNumber(unsigned short const *,int *)",
    "public: class DirectUI::Element * __thiscall DirectUI::Layout::GetChildFromLayoutIndex(class DirectUI::Element *,int,class DirectUI::DynamicArray *)",
    "public: static class DirectUI::SelectionProxy * __stdcall DirectUI::SelectionProxy::Create(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::TouchCheckBoxGlyph::Register(void)",
    "public: __thiscall DirectUI::Edit::Edit(class DirectUI::Edit const &)",
    "public: static class UID __stdcall DirectUI::Button::Context(void)",
    "public: virtual bool __thiscall DirectUI::CCBase::OnLostDialogFocus(struct DirectUI::IDialogElement *)",
    "StartMessagePump",
    "public: virtual long __thiscall DirectUI::Element::RemoveBehavior(struct IDuiBehavior *)",
    "private: int __thiscall DirectUI::Browser::FireNavigate(unsigned short)",
    "public: bool __thiscall DirectUI::Element::GetMouseWithin(void)",
    "public: virtual __thiscall DirectUI::Repeater::~Repeater(void)",
    "public: virtual void __thiscall DirectUI::ClassInfoBase::Destroy(void)",
    "private: static unsigned int const DirectUI::InvokeHelper::s_uInvokeHelperMsg",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::accSelect(long,struct tagVARIANT)",
    "public: long __thiscall DirectUI::Element::SetForegroundColor(unsigned long,unsigned long,unsigned long,unsigned char)",
    "public: virtual long __stdcall DirectUI::TableItemProvider::GetRowHeaderItems(struct tagSAFEARRAY * *)",
    "public: __thiscall DirectUI::ModernProgressRing::ModernProgressRing(void)",
    "public: class DirectUI::DynamicArray * __thiscall DirectUI::Value::GetDoubleList(void)",
    "public: __thiscall DirectUI::ClassInfoBase::ClassInfoBase(class DirectUI::ClassInfoBase const &)",
    "public: struct DirectUI::CellInfo * __thiscall DirectUI::TableLayout::GetCellInfo(int)",
    "public: float __thiscall DirectUI::TouchScrollViewer::GetZoomMaximum(void)",
    "public: static long __stdcall DirectUI::FillLayout::Create(class DirectUI::Layout * *)",
    "private: long __thiscall DirectUI::ScrollProxy::ScrollToVerticalPosition(int,bool)",
    "public: static class UID __stdcall DirectUI::TouchSelect::SelectionChange(void)",
    "public: static bool __stdcall DirectUI::Element::IsValidValue(struct DirectUI::PropertyInfo const *,class DirectUI::Value *)",
    "public: static int DirectUI::Schema::GroupControlType",
    "public: int __thiscall DirectUI::TouchSlider::GetMetering(void)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetAccItemStatus(class DirectUI::Value * *)",
    "private: static int const DirectUI::Value::c_RefCountBitOffset",
    "public: virtual long __thiscall DirectUI::XResourceProvider::CreateParserCP(class DirectUI::DUIXmlParser * *)",
    "public: virtual void __thiscall DirectUI::ScrollViewer::OnListenedPropertyChanged(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: __thiscall DirectUI::PText::PText(class DirectUI::PText const &)",
    "protected: long __thiscall DirectUI::ElementProxy::GetLabel(struct tagVARIANT *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::DialogElement::GetClassInfoW(void)",
    "const DirectUI::PushButton::`vftable'",
    "public: virtual bool __thiscall DirectUI::TouchCommandButton::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "const DirectUI::InvokeProxy::`vftable'",
    "public: bool __thiscall DirectUI::Button::GetPressed(void)",
    "public: unsigned short __thiscall DirectUI::HWNDElement::GetUIState(void)",
    "public: static long __stdcall DirectUI::CCHScrollBar::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual void __thiscall DirectUI::BaseScrollViewer::OnListenedInput(class DirectUI::Element *,struct DirectUI::InputEvent *)",
    "public: long __thiscall DirectUI::Element::SetBorderColor(unsigned long)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseGTMarRect(struct DirectUI::ParserTools::ExprNode const *,struct tagRECT *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::SmoothingModeProp(void)",
    "public: static int DirectUI::Schema::RadioButtonControlType",
    "public: __thiscall DirectUI::CCTreeView::CCTreeView(unsigned long)",
    "public: virtual __thiscall DirectUI::Bind::~Bind(void)",
    "protected: virtual long __thiscall DirectUI::HWNDElementProvider::Init(class DirectUI::HWNDElement *,class DirectUI::InvokeHelper *)",
    "public: int __thiscall DirectUI::Element::GetFontQuality(void)",
    "public: static long __stdcall DirectUI::HWNDElement::Create(struct HWND__ *,bool,unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static int DirectUI::Schema::ListControlType",
    "public: static long __stdcall DirectUI::ModernProgressBar::Register(void)",
    "public: long __thiscall DirectUI::TouchHWNDElement::UnregisterForMonitorPowerChanges(void)",
    "public: virtual bool __thiscall DirectUI::RadioButtonGlyph::OnReceivedDialogFocus(struct DirectUI::IDialogElement *)",
    "public: virtual void __thiscall DirectUI::Navigator::OnEvent(struct DirectUI::Event *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateFloat(float)",
    "private: bool __thiscall DirectUI::Element::IsPointValid(double,double)",
    "public: static long __stdcall DirectUI::RefPointElement::Register(void)",
    "public: virtual long __stdcall DirectUI::XProvider::GetHostedElementID(unsigned short *)",
    "public: long __thiscall DirectUI::Browser::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: void __thiscall DirectUI::CCTreeView::SetItemState(struct _TREEITEM *,unsigned int)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCBaseCheckRadioButton::GetClassInfoW(void)",
    "public: long __thiscall DirectUI::RefcountBase::Release(void)",
    "public: static long __stdcall DirectUI::CCTrackBar::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: bool __thiscall DirectUI::ModernProgressBar::IsAutoHeight(void)",
    "public: int __thiscall DirectUI::TouchEdit2::GetShowClearButtonMinWidth(void)",
    "public: void __thiscall DirectUI::NativeHWNDHost::SetDefaultFocusID(unsigned short const *)",
    "public: __thiscall DirectUI::RangeValueProxy::RangeValueProxy(class DirectUI::RangeValueProxy const &)",
    "public: virtual void __thiscall DirectUI::TouchEdit2::OnInput(struct DirectUI::InputEvent *)",
    "public: static int DirectUI::Schema::ItemStatusProperty",
    "public: static int DirectUI::Schema::TextControlType",
    "public: virtual void __thiscall DirectUI::BaseScrollViewer::OnListenerDetach(class DirectUI::Element *)",
    "public: static int DirectUI::Schema::SelectionItemPattern",
    "public: class DirectUI::Viewer & __thiscall DirectUI::Viewer::operator=(class DirectUI::Viewer const &)",
    "public: class DirectUI::Element * __thiscall DirectUI::Element::GetKeyWithinChild(void)",
    "public: static int DirectUI::Schema::GridItem_RowSpan_Property",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::TableProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: virtual __thiscall DirectUI::Expandable::~Expandable(void)",
    "protected: void __thiscall DirectUI::Element::MarkSelfLayout(void)",
    "public: static class UID __stdcall DirectUI::TouchHWNDElement::TextTooltipShowing(void)",
    "public: long __thiscall DirectUI::DUIXmlParser::SetXMLFromResource(unsigned short const *,struct HINSTANCE__ *,struct HINSTANCE__ *)",
    "public: bool __thiscall DirectUI::ItemList::IsReorderable(void)",
    "public: virtual void __thiscall DirectUI::CCPushButton::OnSelectedPropertyChanged(void)",
    "public: virtual long __stdcall DirectUI::ElementProvider::GetPropertyValue(int,struct tagVARIANT *)",
    "const DirectUI::SelectionItemProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: void __thiscall DirectUI::Element::MarkNeedsDSUpdate(void)",
    "public: virtual void __thiscall DirectUI::ShellBorderLayout::OnLayoutPosChanged(class DirectUI::Element *,class DirectUI::Element *,int,int)",
    "public: int __thiscall DirectUI::Element::GetShadowIntensity(void)",
    "public: static long __stdcall DirectUI::HWNDElementProvider::Create(class DirectUI::HWNDElement *,class DirectUI::InvokeHelper *,class DirectUI::HWNDElementProvider * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::BaseScrollViewer::XScrollableProp(void)",
    "public: long __thiscall DirectUI::Element::SortChildren(int (__cdecl*)(void const *,void const *))",
    "public: __thiscall DirectUI::ISBLeak::ISBLeak(void)",
    "protected: virtual void __thiscall DirectUI::ModernProgressRing::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Macro::s_pClassInfo",
    "public: int __thiscall DirectUI::ScrollBar::GetOrder(void)",
    "public: long __thiscall DirectUI::TouchSwitch::SetOnText(unsigned short const *)",
    "protected: virtual bool __thiscall DirectUI::TaskPage::OnMessage(unsigned int,unsigned int,long,long *)",
    "public: void __thiscall DirectUI::TouchScrollViewer::SetDisableOffscreenCaching(bool)",
    "public: __thiscall DirectUI::ScrollItemProxy::ScrollItemProxy(void)",
    "public: bool __thiscall DirectUI::TouchSlider::GetIsContinuous(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::DialogElement::HandleEnterKeyProp(void)",
    "public: virtual bool __thiscall DirectUI::Button::OnReceivedDialogFocus(struct DirectUI::IDialogElement *)",
    "public: int __thiscall DirectUI::Movie::GetInterpolationMode(void)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::Reset(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::RichText::OverhangOffsetProp(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accRole(struct tagVARIANT,struct tagVARIANT *)",
    "public: static long __stdcall DirectUI::PatternProvider::Create(class DirectUI::ElementProvider *,struct IUnknown * *)",
    "public: virtual __thiscall DirectUI::TouchScrollBar::~TouchScrollBar(void)",
    "public: virtual __thiscall DirectUI::Selector::~Selector(void)",
    "public: static void __stdcall DirectUI::Progress::SetClassInfoPtr(struct DirectUI::IClassInfo *)"
  ],
  "duser.dll": [
    "GetGadget",
    "GetStdColorF",
    "DUserRegisterSuper",
    "SetGadgetRect",
    "GetGadgetProperty",
    "GetStdColorBrushI",
    "SetGadgetFocusEx",
    "EnsureGadgetTransInitialized",
    "GetGadgetBitmap",
    "MapGadgetPoints",
    "SetGadgetFillI",
    "GetGadgetCenterPoint",
    "DUserStopPVLAnimation",
    "DUserCastDirect",
    "SetGadgetCenterPoint",
    "DUserCastClass",
    "AttachWndProcA",
    "SetRestoreCachedLayeredRefFlag",
    "RemoveClippingImmunityFromVisual",
    "SetWindowResizeFlag",
    "GadgetTransCompositionChanged",
    "DeleteHandle",
    "SetGadgetOrder",
    "SetHardwareDeviceUsage",
    "AddGadgetMessageHandler",
    "DUserPostMethod",
    "SetGadgetFlags",
    "ClearTopmostVisual",
    "SetGadgetFillF",
    "DUserFlushDeferredMessages",
    "GetGadgetSize",
    "GetGadgetRootInfo",
    "DUserInstanceOf",
    "DUserRegisterGuts",
    "DestroyPendingDCVisuals",
    "GetGadgetFocus",
    "RemoveGadgetProperty",
    "UtilDrawOutlineRect",
    "GetGadgetFlags",
    "InitGadgetComponent",
    "ReleaseMouseCapture",
    "DrawGadgetTree",
    "PeekMessageExW",
    "SetGadgetMessageFilter",
    "DetachWndProc",
    "GetMessageExA",
    "DUserGetScalePRID",
    "FindStdColor",
    "DUserPostEvent",
    "IsInsideContext",
    "GetStdColorName",
    "GetStdColorI",
    "InvalidateLayeredDescendants",
    "ScheduleGadgetTransitions",
    "GetStdColorBrushF",
    "DUserSendEvent",
    "GetGadgetAnimation",
    "GetFinalAnimatingPosition",
    "FindGadgetTargetingInfo",
    "DUserCastHandle",
    "BuildDropTarget",
    "GadgetTransSettingChanged",
    "SetAtlasingHints",
    "FindGadgetMessages",
    "GetStdPalette",
    "AutoTrace",
    "GetDebug",
    "IsGadgetParentChainStyle",
    "RegisterGadgetProperty",
    "DUserRegisterStub",
    "SetGadgetParent",
    "FireGadgetMessages",
    "UtilDrawBlendRect",
    "BuildAnimation",
    "SetGadgetFocus",
    "AttachWndProcW",
    "UtilGetColor",
    "InvalidateGadget",
    "GetGadgetTicket",
    "ForwardGadgetMessage",
    "GetDUserModule",
    "InitGadgets",
    "ClearPushedOpacitiesFromGadgetTree",
    "ReleaseLayeredRef",
    "GetStdColorPenI",
    "SetActionTimeslice",
    "UnregisterGadgetMessage",
    "DUserDeleteGadget",
    "RegisterGadgetMessage",
    "CacheDWriteRenderTarget",
    "LookupGadgetTicket",
    "DUserFlushMessages",
    "EnsureAnimationsEnabled",
    "GetGadgetRotation",
    "GetGadgetRect",
    "AdjustClipInsideRef",
    "EnumGadgets",
    "DetachGadgetVisuals",
    "SetGadgetBufferInfo",
    "DUserStopAnimation",
    "GetGadgetVisual",
    "UnregisterGadgetProperty",
    "CustomGadgetHitTestQuery",
    "ReleaseDetachedObjects",
    "UtilSetBackground",
    "IsStartDelete",
    "DUserGetRectPRID",
    "DUserSendMethod",
    "SetGadgetLayerInfo",
    "GetGadgetBufferInfo",
    "SetGadgetStyle",
    "GetGadgetScale",
    "SetGadgetRootInfo",
    "DUserGetGutsData",
    "BuildInterpolation",
    "GetGadgetStyle",
    "ResetDUserDevice",
    "DUserFindClass",
    "SetGadgetScale",
    "GetGadgetMessageFilter",
    "GetActionTimeslice",
    "DllMain",
    "WaitMessageEx",
    "UtilBuildFont",
    "RegisterGadgetMessageString",
    "SetGadgetProperty",
    "AddLayeredRef",
    "UnregisterGadgetMessageString",
    "DUserBuildGadget",
    "FindGadgetFromPoint",
    "SetGadgetRotation",
    "GetGadgetLayerInfo",
    "GetCachedDWriteRenderTarget",
    "GetGadgetRgn",
    "GetStdColorPenF",
    "DUserGetRotatePRID",
    "CreateGadget",
    "DisableContainerHwnd",
    "RemoveGadgetMessageHandler",
    "SetTransitionVisualProperties",
    "GetMessageExW",
    "CreateAction",
    "DUserGetAlphaPRID",
    "PeekMessageExA",
    "ChangeCurrentAnimationScenario"
  ],
  "dwmapi.dll": [
    "DwmSetIconicLivePreviewBitmap",
    "DwmGetGraphicsStreamClient",
    "DwmUpdateThumbnailProperties",
    "DwmTransitionOwnedWindow",
    "DwmSetWindowAttribute",
    "DwmDetachMilContent",
    "DwmRegisterThumbnail",
    "DwmInvalidateIconicBitmaps",
    "DwmRenderGesture",
    "DwmEnableComposition",
    "DwmGetWindowAttribute",
    "DwmAttachMilContent",
    "DwmSetDxFrameDuration",
    "DwmUnregisterThumbnail",
    "DwmGetTransportAttributes",
    "DwmExtendFrameIntoClientArea",
    "DwmGetColorizationColor",
    "DwmTetherContact",
    "DwmSetPresentParameters",
    "DwmShowContact",
    "DwmModifyPreviousDxFrameDuration",
    "DwmEnableBlurBehindWindow",
    "DwmQueryThumbnailSourceSize",
    "DwmFlush",
    "DwmDefWindowProc",
    "DwmGetCompositionTimingInfo",
    "DwmSetIconicThumbnail",
    "DwmEnableMMCSS",
    "DwmGetGraphicsStreamTransformHint",
    "DwmIsCompositionEnabled"
  ],
  "dwmcore.dll": [
    "MilCompositionEngine_GetFeedbackReader",
    "SetMilPerfInstrumentationFlags",
    "MilChannel_EndCommand",
    "MilChannel_AppendCommandData",
    "MilCompositionEngine_InitializePartitionManager",
    "MilConnection_DestroyChannel",
    "MilChannel_SendSyncCommand",
    "MilCompositionEngine_DeinitializePartitionManager",
    "MilResource_SendCommand",
    "MilComposition_SyncFlush",
    "MilResource_DuplicateHandle",
    "MilTransport_CreateFromPacketTransport",
    "MilTransport_AddRef",
    "MilCommandTransport_Release",
    "MilChannel_CommitChannel",
    "MilChannel_GetMarshalType",
    "MilTransport_DisconnectTransport",
    "MilChannel_FreeSyncCommandReplay",
    "MilComposition_WaitForNextMessage",
    "MilTransport_InitializeConnectionManager",
    "MilTransport_Release",
    "MilChannel_BeginCommand",
    "MilTransport_CreateTransportParameters",
    "MilResource_ReleaseOnChannel",
    "MilVisualTarget_DetachFromHwnd",
    "MilResource_CreateOrAddRefOnChannel",
    "MIL3DCalcBrushToIdealSampleSpace",
    "MilUtility_GetTileBrushMapping",
    "MilCrossThreadPacketTransport_Create",
    "MilConnection_CreateChannel",
    "MilConnectionManager_NotifyHostEvent",
    "MilCommandTransport_AddRef",
    "MilTransport_PostPacket",
    "MilResource_SendCommandBitmapSourceEx",
    "MilTransport_Create",
    "MilVisualTarget_AttachToHwnd",
    "MilCompositionEngine_GetComposedEventId",
    "MilResource_DuplicateHandleOnTarget",
    "MilChannel_SetNotificationWindow",
    "MilCoreClientIsDwm",
    "MilResource_SendCommandBitmapSource",
    "MilChannel_SetReceiveBroadcastMessages",
    "MIL3DCalcProjected2DBounds",
    "MilTransport_Open",
    "MILCreateFactory",
    "MilTransport_ShutDownConnectionManager",
    "MilVersionCheck",
    "MilTransport_Close",
    "MilConnection_GetChannelKernelHandle",
    "MilCompositionEngine_UpdateSchedulerSettings",
    "MilComposition_PeekNextMessage"
  ],
  "dwmredir.dll": [
    "DwmRedirectionManagerSetClientRenderTarget",
    "DwmRedirectionManagerDispatchMessage",
    "DwmRenderDesktopForDDA",
    "DwmRedirectionManagerShouldRemainOnHibernate",
    "DwmRedirectionManagerInitialize",
    "DwmInitializeTransport",
    "DwmRedirectionManagerEnableMMCSS",
    "DwmRedirectionManagerShutdown",
    "DwmRedirectionManagerSetClientChannel",
    "DwmRedirectionManagerWaitForMultipleObjects",
    "DwmRedirectionManagerLockMemoryAllocations",
    "DwmShutdownTransport",
    "DwmRedirectionManagerPlayingVideo",
    "DwmRedirectionManagerFailMessage",
    "DwmVersionCheck"
  ],
  "dxdiagn.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dxgi.dll": [
    "CreateDXGIFactory1",
    "D3DKMTCreateDevice",
    "D3DKMTOpenResource",
    "D3DKMTCreateContext",
    "D3DKMTGetMultisampleMethodList",
    "D3DKMTLock",
    "DXGIRevertToSxS",
    "D3DKMTGetRuntimeData",
    "D3DKMTWaitForVerticalBlankEvent",
    "D3DKMTGetContextSchedulingPriority",
    "CheckETWTLS",
    "CreateDXGIFactory",
    "DXGID3D10CreateLayeredDevice",
    "D3DKMTSetGammaRamp",
    "D3DKMTWaitForSynchronizationObject",
    "SetAppCompatStringPointer",
    "D3DKMTDestroySynchronizationObject",
    "D3DKMTUnlock",
    "D3DKMTSetDisplayMode",
    "OpenAdapter10",
    "D3DKMTQueryAdapterInfo",
    "D3DKMTSignalSynchronizationObject",
    "D3DKMTOpenAdapterFromHdc",
    "D3DKMTSetVidPnSourceOwner",
    "D3DKMTGetSharedPrimaryHandle",
    "D3DKMTPresent",
    "D3DKMTDestroyDevice",
    "D3DKMTSetContextSchedulingPriority",
    "CompatValue",
    "D3DKMTCreateSynchronizationObject",
    "D3DKMTQueryResourceInfo",
    "D3DKMTSetAllocationPriority",
    "D3DKMTDestroyContext",
    "CompatString",
    "DXGID3D10RegisterLayers",
    "D3DKMTSetDisplayPrivateDriverFormat",
    "DXGID3D10CreateDevice",
    "DXGIDumpJournal",
    "DXGIReportAdapterConfiguration",
    "D3DKMTQueryAllocationResidency",
    "D3DKMTGetDeviceState",
    "D3DKMTRender",
    "D3DKMTCreateAllocation",
    "OpenAdapter10_2",
    "DXGID3D10ETWRundown",
    "D3DKMTGetDisplayModeList",
    "D3DKMTDestroyAllocation",
    "D3DKMTCloseAdapter",
    "DXGID3D10GetLayeredDeviceSize",
    "D3DKMTEscape"
  ],
  "dxgwdi.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "dxmasf.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dxpps.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dxtmsft.dll": [
    "DllGetClassObject",
    "DllCanUnloadNow",
    "DllEnumClassObjects",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dxtrans.dll": [
    "void __stdcall DXLinearInterpolateArray(class DXBASESAMPLE const *,struct DXLIMAPINFO *,class DXBASESAMPLE *,unsigned long)",
    "DllEnumClassObjects",
    "void __stdcall DXOverArrayMMX(class DXPMSAMPLE *,class DXPMSAMPLE const *,unsigned long)",
    "DllGetClassObject",
    "void __stdcall DXDitherArray(struct DXDITHERDESC const *)",
    "void __stdcall DXConstOverArray(class DXPMSAMPLE *,class DXPMSAMPLE const &,unsigned long)",
    "void __stdcall DXConstUnderArray(class DXPMSAMPLE *,class DXPMSAMPLE const &,unsigned long)",
    "DllCanUnloadNow",
    "void __stdcall DXOverArray(class DXPMSAMPLE *,class DXPMSAMPLE const *,unsigned long)",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "dxva2.dll": [
    "RestoreMonitorFactoryColorDefaults",
    "GetMonitorCapabilities",
    "SetMonitorDisplayAreaSize",
    "GetMonitorTechnologyType",
    "CapabilitiesRequestAndCapabilitiesReply",
    "GetMonitorDisplayAreaPosition",
    "GetMonitorRedGreenOrBlueGain",
    "SetMonitorColorTemperature",
    "GetVCPFeatureAndVCPFeatureReply",
    "GetPhysicalMonitorsFromHMONITOR",
    "SaveCurrentSettings",
    "GetTimingReport",
    "GetMonitorBrightness",
    "GetCapabilitiesStringLength",
    "RestoreMonitorFactoryDefaults",
    "SetMonitorRedGreenOrBlueDrive",
    "DestroyPhysicalMonitor",
    "SetVCPFeature",
    "SetMonitorBrightness",
    "DXVA2CreateDirect3DDeviceManager9",
    "OPMGetVideoOutputsFromHMONITOR",
    "SetMonitorDisplayAreaPosition",
    "DestroyPhysicalMonitors",
    "GetNumberOfPhysicalMonitorsFromHMONITOR",
    "GetPhysicalMonitorsFromIDirect3DDevice9",
    "GetMonitorContrast",
    "GetNumberOfPhysicalMonitorsFromIDirect3DDevice9",
    "OPMGetVideoOutputsFromIDirect3DDevice9Object",
    "SetMonitorContrast",
    "GetMonitorRedGreenOrBlueDrive",
    "DegaussMonitor",
    "GetMonitorColorTemperature",
    "SaveCurrentMonitorSettings",
    "SetMonitorRedGreenOrBlueGain",
    "GetMonitorDisplayAreaSize",
    "DXVA2CreateVideoService",
    "DXVAHD_CreateDevice"
  ],
  "EAPQEC.DLL": [
    "UninitializeQec",
    "InitializeQec",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "ELSCore.dll": [
    "MappingFreeServices",
    "MappingFreePropertyBag",
    "MappingDoAction",
    "MappingGetServices",
    "MappingRecognizeText"
  ],
  "EhStorAPI.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "EhStorPwdMgr.dll": [
    "EnhancedStoragePasswordConfig",
    "DllMain",
    "EnhancedStoragePasswordInitDisk"
  ],
  "EhStorShell.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "EncDec.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "EncDump.dll": [
    "EncryptDumpFile"
  ],
  "ExplorerFrame.dll": [
    "DllCanUnloadNow",
    "DllGetVersion",
    "DllGetClassObject"
  ],
  "eapp3hst.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "eappcfg.dll": [
    "EapHostPeerGetMethods",
    "EapHostPeerConfigBlob2Xml",
    "EapHostPeerInvokeIdentityUI",
    "EapHostPeerFreeMemory",
    "DllRegisterServer",
    "EapHostPeerGetMethodProperties",
    "DllUnregisterServer",
    "EapHostPeerQueryUIBlobFromInteractiveUIInputFields",
    "EapHostPeerConfigXml2Blob",
    "EapHostPeerInvokeInteractiveUI",
    "EapHostPeerCredentialsXml2Blob",
    "DllCanUnloadNow",
    "EapHostPeerQueryUserBlobFromCredentialInputFields",
    "EapHostPeerCreateMethodConfiguration",
    "EapHostPeerQueryInteractiveUIInputFields",
    "DllGetClassObject",
    "EapHostPeerQueryCredentialInputFields",
    "EapHostPeerFreeErrorMemory",
    "EapHostPeerInvokeConfigUI"
  ],
  "eappgnui.dll": [
    "DllRegisterServer",
    "EapPeerFreeMemory",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "EapPeerInvokeIdentityUI",
    "EapPeerFreeErrorMemory",
    "DllUnregisterServer"
  ],
  "eapphost.dll": [
    "UninitializeEapHost",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "InitializeEapHost",
    "DllUnregisterServer"
  ],
  "eappprxy.dll": [
    "EapHostPeerFreeEapError",
    "EapHostPeerFreeRuntimeMemory",
    "EapHostPeerGetSendPacket",
    "EapHostPeerGetAuthStatus",
    "EapHostPeerEndSession",
    "EapHostPeerProcessReceivedPacket",
    "EapHostPeerSetResponseAttributes",
    "EapHostPeerGetResponseAttributes",
    "EapHostPeerInitialize",
    "EapHostPeerUninitialize",
    "EapHostPeerBeginSession",
    "EapHostPeerSetUIContext",
    "EapHostPeerGetIdentity",
    "EapHostPeerClearConnection",
    "EapHostPeerGetUIContext",
    "EapHostPeerGetResult"
  ],
  "eapsvc.dll": [
    "ServiceMain"
  ],
  "easconsent.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "easinvoker.proxystub.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "easwrt.dll": [
    "DllGetActivationFactory",
    "EasClientSecurityPolicyApply",
    "EasGetClientDeviceInformation",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "EasClientSecurityPolicyCheckCompliance"
  ],
  "efsadu.dll": [
    "EfsUIUtilEncryptMyDocuments",
    "EfsDetail",
    "EfsUIUtilCheckScardStatus",
    "EfsUIUtilEnrollEfsCertificate",
    "AddUserToObjectW",
    "EfsUIUtilShowBalloonAndWait",
    "EfsUIUtilEnrollEfsCertificateEx",
    "EfsUIUtilInstallDra",
    "EfsUIUtilCreateSelfSignedCertificate",
    "EfsUIUtilSelectCard",
    "BackCurrentEfsCert",
    "EfsUIUtilPromptForPin",
    "EfsUIUtilKeyBackup",
    "EfsUIUtilPromptForPinDialog"
  ],
  "efscore.dll": [
    "EfsDllAddUsersToFileSrv",
    "EfsDllOpenFileRaw",
    "EfsDllMarkFileForDelete",
    "EfsDllDecryptFileSrv",
    "EfsDllDecryptFek",
    "EfsDllGetLocalFileName",
    "EfsDllRemoveUsersFromFileSrv",
    "EfsDllAllocateHeap",
    "EfsDllWriteFileRaw",
    "EfsDllSetFileEncryptionKeySrv",
    "EfsDllGetVolumeRoot",
    "EfsDllQueryUsersOnFileSrv",
    "EfsUnInitialize",
    "EfsDllGetUserInfo",
    "EfsDllShareDecline",
    "EfsDllIsNonEfsSKU",
    "EfsDllDisabled",
    "EfsDllValidateEfsStream",
    "EfsDllCloseFileRaw",
    "EfsDllEncryptFileSrv",
    "EfsDllLoadUserProfile",
    "EfsDllGetLogFile",
    "EfsDllFreeHeap",
    "EfsDllOnSessionChange",
    "EfsDllConstructEFS",
    "EfsDllFileKeyInfoSrv",
    "EfsInitialize",
    "EfsDllReadFileRaw",
    "EfsDllDuplicateEncryptionInfoFileSrv",
    "EfsDllQueryRecoveryAgentsSrv",
    "EfsDllUnloadUserProfile",
    "EfsDllUsePinForEncryptedFilesSrv",
    "EfsDllFreeUserInfo",
    "EfsDllSsoFlushUserCache",
    "EfsDllErrorToNtStatus"
  ],
  "efslsaext.dll": [
    "InitializeLsaExtension"
  ],
  "efssvc.dll": [
    "EfsServiceMain"
  ],
  "efsutil.dll": [
    "EfsUtilSetCurrentKey",
    "EfsUtilCreateSelfSignedCertificate",
    "EfsUtilGetProvider",
    "EfsUtilCheckCurrentKeyCapabilities",
    "EfsUtilReleaseProvider",
    "EfsUtilSmartcardCredsNeededError",
    "EfsUtilGetSmartcardProviderName",
    "EfsUtilGetCurrentKey",
    "EfsUtilReleaseUserKey",
    "EfsUtilSetSmartcardPin",
    "EfsUtilGetUserKey",
    "EfsUtilGetCurrentUserInformation",
    "EfsUtilGetCertContextFromCertHash",
    "EfsUtilGetCurrentKey_Deprecated",
    "EfsUtilIsSmartcardKey",
    "EfsUtilApplyGroupPolicy",
    "EfsUtilIsSmartcardProvider"
  ],
  "els.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "elsTrans.dll": [
    "FreePropertyBag",
    "DoAction",
    "EnumServices",
    "InitService",
    "RecognizeText",
    "FreeService"
  ],
  "elshyph.dll": [
    "FreePropertyBag",
    "DoAction",
    "InitService",
    "RecognizeText",
    "FreeService"
  ],
  "elslad.dll": [
    "FreePropertyBag",
    "DoAction",
    "InitService",
    "RecognizeText",
    "FreeService"
  ],
  "encapi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "energy.dll": [
    "EnergyWizard_DestroyEnergyWizard",
    "EnergyWizard_CancelTrace",
    "TransformBatteryReport",
    "EnergyWizard_TransformReport",
    "EnergyWizard_Analyze",
    "EnergyWizard_SaveReport",
    "EnergyWizard_CreateEnergyWizard",
    "EnergyWizard_DefaultTraceDuration",
    "EnergyWizard_CollectTrace",
    "EnergyWizard_GetLogEntryCounts",
    "SaveBatteryReport",
    "EnergyWizard_SqmAnalysis"
  ],
  "energyprov.dll": [
    "SruUninitializeProvider",
    "SruInitializeProvider"
  ],
  "energytask.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "eqossnap.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "es.dll": [
    "LCEControlServer",
    "SvchostPushServiceGlobals",
    "ServiceMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "NotifyLogoffUser",
    "NotifyLogonUser"
  ],
  "esent.dll": [
    "JetCreateTableColumnIndex2W",
    "JetTerm",
    "JetPrereadKeys@28",
    "JetGetTruncateLogInfoInstanceW@16",
    "JetGetPageInfo2@24",
    "JetCreateIndex2A",
    "JetEndExternalBackupInstance@4",
    "JetDeleteColumnA",
    "JetCreateTableColumnIndex3A",
    "JetGetTableColumnInfo",
    "DebugExtensionNotify@12",
    "JetEscrowUpdate@36",
    "JetGetAttachInfoA@12",
    "JetOSSnapshotTruncateLog@8",
    "JetAddColumnA@28",
    "JetDefragment2",
    "JetTestHook@8",
    "JetRestore2A",
    "JetSetCurrentIndex2A@16",
    "JetDeleteTableA@12",
    "JetGetTableIndexInfo",
    "JetEndSession@8",
    "JetFreeBuffer",
    "JetUpdate2@24",
    "DebugExtensionInitialize",
    "JetEndDatabaseIncrementalReseedA@24",
    "JetResetCounter@8",
    "JetOpenTableW@28",
    "JetRetrieveColumn",
    "JetSetCurrentIndex2W@16",
    "JetBeginDatabaseIncrementalReseedW@12",
    "JetSetLS@16",
    "JetUpdate@20",
    "JetGetDatabasePages",
    "JetOSSnapshotEnd",
    "JetUpgradeDatabaseA@16",
    "JetOpenDatabaseW@20",
    "JetEndSession",
    "JetDeleteColumnW",
    "JetCreateIndex3A",
    "JetGetColumnInfoA@28",
    "JetOpenFileInstance",
    "JetExternalRestore2A",
    "JetGetSystemParameterA",
    "JetCloseTable",
    "JetCloseFile",
    "JetOSSnapshotGetFreezeInfoA",
    "JetBeginSessionA@16",
    "JetGetSystemParameterA@24",
    "JetGetCursorInfo",
    "JetTerm2",
    "JetGetInstanceInfoA@8",
    "JetConvertDDL",
    "JetCreateTableA",
    "JetGetObjectInfo",
    "JetOpenFile",
    "JetCreateDatabaseA@20",
    "JetCreateTableColumnIndex3A@12",
    "JetOpenFileInstanceW",
    "JetRemoveLogfileW",
    "JetSetColumns",
    "JetSetCurrentIndex4A",
    "JetOpenTempTable@24",
    "JetMakeKey",
    "JetBeginExternalBackupInstance@8",
    "JetInit4W@12",
    "JetSetColumns@16",
    "JetOpenFileSectionInstanceA@28",
    "JetGetTableIndexInfoA@24",
    "JetCreateDatabaseWithStreaming",
    "JetGetLogInfoInstance",
    "JetGetCurrentIndexA",
    "JetAddColumn",
    "JetBackupA@12",
    "JetGetDatabaseFileInfoW@16",
    "JetInit3W@12",
    "JetCreateIndex2W@16",
    "JetDeleteIndexA@12",
    "JetDupSession",
    "JetGetDatabaseFileInfoW",
    "JetGetIndexInfoA@28",
    "JetGetCounter",
    "JetCreateTableColumnIndex4A",
    "JetEnumerateColumns",
    "JetGetDatabaseFileInfoA",
    "JetExternalRestoreA@32",
    "JetIndexRecordCount@16",
    "JetRemoveLogfileA@12",
    "JetGetErrorInfoW",
    "JetOSSnapshotTruncateLogInstance@12",
    "JetBeginTransaction2@8",
    "JetRenameColumnW@20",
    "JetBeginSessionA",
    "JetFreeBuffer@4",
    "JetSetColumnDefaultValueW@28",
    "JetOSSnapshotPrepare@8",
    "JetGetTableIndexInfoA",
    "JetEnableMultiInstance",
    "JetExternalRestoreA",
    "JetCreateDatabase2A@20",
    "JetCreateTableColumnIndexW@12",
    "JetOSSnapshotGetFreezeInfoW",
    "JetRestore2",
    "JetEnableMultiInstanceW",
    "JetDetachDatabase2W",
    "JetDefragment2A",
    "JetSetCurrentIndex4W",
    "JetGotoSecondaryIndexBookmark",
    "JetSetSessionParameter@16",
    "JetDetachDatabaseW@8",
    "JetGetTruncateLogInfoInstanceA",
    "JetInit4",
    "JetEndDatabaseIncrementalReseed",
    "JetGetSessionParameter@20",
    "JetCreateTableColumnIndex2A@12",
    "JetGetSessionInfo@16",
    "JetBeginDatabaseIncrementalReseed",
    "JetOpenTemporaryTable2@8",
    "JetRenameTableW@16",
    "JetSetCurrentIndex3A@20",
    "JetRestoreA@8",
    "DebugExtensionUninitialize",
    "JetEndDatabaseIncrementalReseedW",
    "JetDupCursor@16",
    "JetCommitTransaction@8",
    "JetGetDatabaseInfo",
    "JetCreateTableColumnIndex2A",
    "JetBeginExternalBackupInstance",
    "JetIndexRecordCount",
    "JetPatchDatabasePagesW@28",
    "JetDefragment3A@32",
    "JetGetIndexInfoA",
    "JetEnableMultiInstanceA@12",
    "JetRenameColumnW",
    "JetStopService",
    "JetGetSystemParameterW@24",
    "JetCompactA",
    "JetPrereadKeys",
    "DebugExtensionUninitialize@0",
    "JetGetObjectInfoA",
    "JetUpdate",
    "JetEndExternalBackup@0",
    "JetCloseDatabase",
    "JetExternalRestore2W@40",
    "JetGetDatabaseInfoA",
    "DebugExtensionInitialize@8",
    "JetBeginExternalBackup@4",
    "JetRestoreA",
    "JetOSSnapshotFreezeW",
    "JetPrepareUpdate@12",
    "JetCreateInstance2W",
    "JetGetLogInfo",
    "JetGetTableInfoA@20",
    "JetSetColumnDefaultValue",
    "JetSetCurrentIndex4W@24",
    "JetCreateInstanceA@8",
    "JetGetSessionInfo",
    "JetOSSnapshotFreeze",
    "JetOSSnapshotThaw@8",
    "JetAddColumnA",
    "JetOpenFileSectionInstanceW",
    "JetSetMaxDatabaseSize@16",
    "JetAddColumnW@28",
    "JetBackupInstanceA",
    "JetGetCurrentIndex",
    "JetGetPageInfo2",
    "JetCreateDatabaseWithStreamingW",
    "JetGetTableIndexInfoW",
    "JetSnapshotStop@8",
    "JetGetInstanceMiscInfo@16",
    "JetIntersectIndexes@20",
    "JetSetColumnDefaultValueA@28",
    "JetGetTableColumnInfoW",
    "JetGotoBookmark",
    "JetSetCursorFilter",
    "JetGetTableInfo",
    "JetOpenDatabase",
    "JetSeek",
    "JetStopServiceInstance@4",
    "JetCreateTableW@24",
    "JetGetRecordSize",
    "JetCommitTransaction2",
    "JetOpenTableW",
    "JetBackupW",
    "JetGetTableInfoW",
    "JetRenameColumnA@20",
    "JetGetColumnInfoW",
    "JetBackupInstanceA@16",
    "JetGotoPosition",
    "JetGrowDatabase@16",
    "JetCreateIndexA@28",
    "JetBeginTransaction3@16",
    "JetResetSessionContext@4",
    "JetResizeDatabase",
    "JetStopBackup",
    "JetDefragment2A@28",
    "JetGotoSecondaryIndexBookmark@28",
    "JetTruncateLog",
    "JetCreateTableColumnIndex2",
    "JetPrepareToCommitTransaction@16",
    "JetGetInstanceInfoW@8",
    "JetBeginExternalBackup",
    "JetCreateInstanceA",
    "JetSetSystemParameterW@20",
    "JetGetIndexInfo",
    "JetRestoreInstance",
    "JetCreateDatabaseWithStreamingA@28",
    "JetExternalRestore2W",
    "JetMakeKey@20",
    "JetConfigureProcessForCrashDump",
    "JetCreateTableA@24",
    "JetCreateTableColumnIndex3W",
    "JetGetTruncateLogInfoInstanceA@16",
    "JetAttachDatabaseW",
    "JetSetColumn@28",
    "JetGetDatabaseInfoA@20",
    "JetOpenTableA",
    "JetDeleteIndexW",
    "JetAttachDatabase2W@16",
    "JetRenameTableW",
    "JetSetSystemParameter",
    "JetSetCurrentIndex3W",
    "JetGetInstanceInfoW",
    "JetDefragment2W@28",
    "JetSeek@12",
    "JetAttachDatabase2A@16",
    "JetCloseFileInstance@8",
    "JetDetachDatabaseA@8",
    "JetDetachDatabaseW",
    "JetDeleteColumnA@12",
    "JetGetLogInfoInstanceW@16",
    "JetGetInstanceInfoA",
    "JetDBUtilitiesW@4",
    "JetReadFileInstance@20",
    "JetUpgradeDatabaseW",
    "JetGetCounter@12",
    "JetCreateIndexA",
    "JetBackupInstanceW",
    "JetGetRecordSize2",
    "JetOpenTableA@28",
    "JetBeginTransaction@4",
    "JetRetrieveKey",
    "JetGetAttachInfoA",
    "JetCreateIndexW",
    "JetCloseFileInstance",
    "JetInit",
    "JetGetErrorInfoW@20",
    "JetDefragment3W",
    "JetDeleteColumn2",
    "JetRetrieveColumn@32",
    "JetOSSnapshotGetFreezeInfoA@16",
    "JetSetSystemParameterW",
    "JetRenameTableA",
    "JetBackupW@12",
    "JetCreateDatabaseW",
    "JetAttachDatabaseWithStreamingA",
    "JetStopServiceInstance",
    "JetSetIndexRange@12",
    "JetOpenTemporaryTable",
    "JetEndExternalBackupInstance2",
    "JetRenameTableA@16",
    "JetRenameColumnA",
    "JetEnumerateColumns@40",
    "rgEDBGGlobals",
    "JetTruncateLogInstance",
    "JetReadFileInstance",
    "JetConsumeLogData@20",
    "JetGetLS",
    "JetGetCurrentIndexW",
    "JetTruncateLogInstance@4",
    "JetAttachDatabaseWithStreamingW@24",
    "JetTruncateLog@0",
    "JetBeginTransaction",
    "JetGetTableColumnInfoA@24",
    "JetCreateTableColumnIndex2W@12",
    "JetRetrieveKey@24",
    "JetAddColumnW",
    "JetRegisterCallback@24",
    "JetCreateIndex4A",
    "JetSetDatabaseSizeA",
    "JetSnapshotStartW@12",
    "JetIdle@8",
    "JetCompactW@24",
    "JetGetIndexInfoW",
    "JetGotoPosition@12",
    "JetSetDatabaseSizeW@16",
    "JetGetAttachInfoInstance",
    "JetBeginSessionW",
    "JetDelete@8",
    "JetDefragmentA@24",
    "JetInit3",
    "JetOSSnapshotAbort",
    "JetCreateIndex2A@16",
    "JetGetLogInfoInstance2A@20",
    "JetSetSessionContext@8",
    "JetRestore",
    "JetDeleteColumnW@12",
    "JetDeleteTableW@12",
    "JetCommitTransaction",
    "JetRestoreW",
    "JetSetTableSequential@12",
    "JetDetachDatabaseA",
    "JetSetSystemParameterA@20",
    "JetOSSnapshotPrepare",
    "JetOSSnapshotThaw",
    "JetOSSnapshotEnd@8",
    "JetBeginTransaction2",
    "JetGetTableInfoA",
    "JetDetachDatabase",
    "JetGetTableColumnInfoA",
    "JetConvertDDLA@20",
    "JetEndDatabaseIncrementalReseedA",
    "JetUpdate2",
    "JetGetLogInfoW",
    "JetUpgradeDatabaseW@16",
    "JetDefragment3W@32",
    "JetInit4A@12",
    "ese",
    "JetPrepareToCommitTransaction",
    "JetGetResourceParam@16",
    "JetOpenFileInstanceA@20",
    "JetGetSystemParameterW",
    "JetGetAttachInfoInstanceW",
    "JetInit3A@12",
    "JetDeleteIndexW@12",
    "JetSetColumnDefaultValueW",
    "JetInit@4",
    "JetGetColumnInfoW@28",
    "JetGetTableIndexInfoW@24",
    "JetExternalRestoreW@32",
    "JetGetResourceParam",
    "JetGetCursorInfo@20",
    "JetSetResourceParam@16",
    "JetSetCurrentIndex3W@20",
    "JetBackupInstanceW@16",
    "JetRestore2A@12",
    "JetBeginSession",
    "JetGetDatabasePages@32",
    "JetSetCurrentIndex3",
    "JetInit2",
    "JetCreateInstanceW@8",
    "JetEndSurrogateBackup",
    "JetSetCurrentIndex4A@24",
    "JetRetrieveTaggedColumnList@28",
    "JetConvertDDLA",
    "JetGetLogFileInfo",
    "JetPrereadIndexRanges@32",
    "JetDBUtilitiesW",
    "JetCreateIndex2",
    "JetIntersectIndexes",
    "JetGetLogFileInfoW",
    "JetAttachDatabaseA@12",
    "JetGetThreadStats",
    "JetTracing",
    "JetAttachDatabaseWithStreamingA@24",
    "JetAttachDatabase2A",
    "JetSetCurrentIndex",
    "JetExternalRestoreW",
    "JetDBUtilitiesA@4",
    "JetResetTableSequential@12",
    "JetStopBackup@0",
    "JetGetAttachInfoW@12",
    "JetSetDatabaseSize",
    "JetCreateIndexW@28",
    "JetCreateInstance2",
    "JetExternalRestore2",
    "JetDefragmentW",
    "JetCloseFile@4",
    "JetDeleteTableA",
    "JetCreateTableColumnIndex",
    "JetGetLogInfoA@12",
    "JetTestHook",
    "JetOSSnapshotTruncateLogInstance",
    "JetCreateDatabase2A",
    "JetCreateTableColumnIndex4W@12",
    "JetDefragment",
    "JetRenameTable",
    "JetDatabaseScan",
    "JetGetLogInfoInstanceW",
    "JetPrepareUpdate",
    "JetExternalRestore2A@40",
    "JetGetObjectInfoW@32",
    "JetStopServiceInstance2@8",
    "JetDefragmentW@24",
    "JetOSSnapshotFreezeA",
    "JetConfigureProcessForCrashDump@4",
    "JetSetMaxDatabaseSize",
    "JetSnapshotStartA",
    "JetOpenDatabaseA",
    "JetBeginDatabaseIncrementalReseedW",
    "JetCreateTableColumnIndex4W",
    "JetUpgradeDatabaseA",
    "JetSetSessionParameter",
    "JetSetCurrentIndex2A",
    "JetGetDatabaseInfoW",
    "JetGetRecordPosition",
    "JetSetColumnDefaultValueA",
    "JetGetLogFileInfoA@16",
    "JetCreateDatabase",
    "JetCreateTableColumnIndexW",
    "JetGotoBookmark@16",
    "JetCreateTableColumnIndex4A@12",
    "JetGetAttachInfoInstanceA",
    "JetDelete",
    "JetGetTableColumnInfoW@24",
    "JetConvertDDLW",
    "JetPatchDatabasePagesA",
    "JetExternalRestore",
    "JetDeleteTableW",
    "JetGetInstanceMiscInfo",
    "JetSetCurrentIndexA@12",
    "JetCreateIndex",
    "JetOnlinePatchDatabasePage",
    "JetSnapshotStart",
    "JetCreateDatabaseA",
    "JetCreateDatabase2W",
    "JetOpenFileW",
    "JetEnableMultiInstanceA",
    "JetOSSnapshotPrepareInstance",
    "JetGetLogInfoW@12",
    "JetGetThreadStats@8",
    "JetGetLogInfoInstance2W@20",
    "JetDetachDatabase2A@12",
    "JetDatabaseScan@24",
    "JetCreateIndex2W",
    "JetOpenFileSectionInstanceW@28",
    "JetDeleteColumn2A@16",
    "JetGetLogInfoInstanceA",
    "JetGetSecondaryIndexBookmark@36",
    "JetGetLogFileInfoA",
    "JetCreateIndex3W",
    "JetGetColumnInfoA",
    "JetRestoreInstanceA@16",
    "JetTerm@4",
    "JetGetLogInfoA",
    "JetComputeStats@8",
    "JetCommitTransaction2@16",
    "JetDeleteColumn2W@16",
    "JetMove",
    "JetGetLock",
    "JetCreateDatabase2W@20",
    "JetGetTruncateLogInfoInstanceW",
    "JetGetCurrentIndexW@16",
    "JetPatchDatabasePagesW",
    "JetRemoveLogfileA",
    "JetRestoreInstanceW@16",
    "JetSnapshotStop",
    "JetDetachDatabase2A",
    "JetCreateDatabaseWithStreamingW@28",
    "JetCreateTableColumnIndexA",
    "JetSetCurrentIndex4",
    "JetGetRecordSize2@16",
    "JetOSSnapshotPrepareInstance@12",
    "JetSetIndexRange",
    "JetSetCurrentIndexA",
    "JetDefragmentA",
    "JetOpenTable",
    "JetOpenTempTable2@28",
    "JetBeginTransaction3",
    "JetPrereadTablesW",
    "JetGetSessionParameter",
    "JetCreateTableColumnIndex3W@12",
    "JetBackup",
    "JetGetTruncateLogInfoInstance",
    "JetInit4A",
    "JetPrereadIndexRanges",
    "JetRetrieveColumns",
    "JetOpenDatabaseA@20",
    "JetInit3W",
    "JetGetRecordSize@16",
    "JetDeleteIndexA",
    "JetRestore2W@12",
    "JetStopServiceInstance2",
    "JetRemoveLogfileW@12",
    "JetCreateDatabaseWithStreamingA",
    "JetCompactA@24",
    "JetDeleteColumn",
    "JetStopBackupInstance@4",
    "JetRestoreW@8",
    "JetGetBookmark",
    "JetCloseTable@8",
    "JetGetIndexInfoW@28",
    "JetRestore2W",
    "JetDetachDatabase2",
    "JetSetLS",
    "JetDefragment3",
    "JetUnregisterCallback",
    "JetDefragment3A",
    "JetOpenFileInstanceW@20",
    "JetEndDatabaseIncrementalReseedW@24",
    "JetAttachDatabaseWithStreaming",
    "JetOSSnapshotTruncateLog",
    "JetCreateInstanceW",
    "JetOpenFileSectionInstance",
    "JetGetRecordPosition@16",
    "JetOpenFileInstanceA",
    "JetRollback",
    "JetRestoreInstanceA",
    "JetGetLogFileInfoW@16",
    "JetGetVersion@8",
    "JetSetCurrentIndexW@12",
    "JetPatchDatabasePages",
    "JetRenameColumn",
    "JetCreateInstance2A@16",
    "JetGetLock@12",
    "JetSetColumn",
    "JetBeginSessionW@16",
    "JetGetLogInfoInstance2A",
    "JetGetLogInfoInstance2",
    "JetOSSnapshotGetFreezeInfo",
    "JetBeginSurrogateBackup@16",
    "JetOpenFileA",
    "JetInit4W",
    "JetDeleteIndex",
    "JetGetAttachInfoInstanceA@16",
    "JetReadFile",
    "JetSetSessionContext",
    "JetResetSessionContext",
    "JetDefragment2W",
    "JetResetTableSequential",
    "JetMove@16",
    "JetAttachDatabase2",
    "JetGetColumnInfo",
    "JetRestoreInstanceW",
    "JetTerm2@8",
    "JetCreateTable",
    "JetSetCurrentIndex3A",
    "JetOpenFileW@16",
    "JetGetInstanceInfo",
    "JetEndExternalBackup",
    "JetRegisterCallback",
    "JetEndSurrogateBackup@8",
    "JetSetCurrentIndexW",
    "JetOpenTempTable2",
    "JetEndExternalBackupInstance2@8",
    "JetOpenTempTable",
    "JetSetDatabaseSizeW",
    "JetGetMaxDatabaseSize",
    "JetPatchDatabasePagesA@28",
    "JetResetCounter",
    "JetCreateDatabase2",
    "JetSetCurrentIndex2",
    "JetTracing@12",
    "JetGetMaxDatabaseSize@16",
    "JetOSSnapshotGetFreezeInfoW@16",
    "JetDeleteColumn2A",
    "JetConvertDDLW@20",
    "JetRetrieveColumns@16",
    "JetEscrowUpdate",
    "JetComputeStats",
    "JetAttachDatabase2W",
    "JetCreateInstance",
    "JetGrowDatabase",
    "JetOpenTempTable3",
    "JetOpenTemporaryTable2",
    "JetSetDatabaseSizeA@16",
    "JetGetCurrentIndexA@16",
    "JetOpenFileSectionInstanceA",
    "JetBeginDatabaseIncrementalReseedA",
    "JetGetObjectInfoA@32",
    "JetUpgradeDatabase",
    "JetCreateIndex4W",
    "JetGetAttachInfoW",
    "JetGetDatabaseFileInfoA@16",
    "JetCompact",
    "JetGetBookmark@20",
    "ese@8",
    "JetDeleteColumn2W",
    "JetOnlinePatchDatabasePage@32",
    "JetSnapshotStartW",
    "JetDBUtilities",
    "JetInit3A",
    "JetGetAttachInfoInstanceW@16",
    "JetSetResourceParam",
    "JetPrereadTablesW@20",
    "JetRollback@8",
    "JetCreateInstance2W@16",
    "JetGetObjectInfoW",
    "JetSetCurrentIndex2W",
    "JetSetTableSequential",
    "JetCompactW",
    "JetGetPageInfo",
    "JetGetSystemParameter",
    "DebugExtensionNotify",
    "JetDetachDatabase2W@12",
    "JetOSSnapshotFreezeW@16",
    "JetOpenFileA@16",
    "JetEnableMultiInstanceW@12",
    "JetRetrieveTaggedColumnList",
    "JetOpenDatabaseW",
    "JetSnapshotStartA@12",
    "JetGetPageInfo@24",
    "JetBackupA",
    "JetBeginDatabaseIncrementalReseedA@12",
    "JetCreateDatabaseW@20",
    "JetGetAttachInfo",
    "JetBeginSurrogateBackup",
    "JetCreateTableColumnIndexA@12",
    "JetBackupInstance",
    "JetSetSystemParameterA",
    "JetStopService@0",
    "JetGetTableInfoW@20",
    "JetOSSnapshotFreezeA@16",
    "JetReadFile@16",
    "JetUnregisterCallback@16",
    "JetOpenTemporaryTable@8",
    "JetIdle",
    "JetGetDatabaseInfoW@20",
    "JetGetSecondaryIndexBookmark",
    "JetGetLogInfoInstanceA@16",
    "JetEndExternalBackupInstance",
    "JetCloseDatabase@12",
    "JetInit2@8",
    "JetGetDatabaseFileInfo",
    "JetDBUtilitiesA",
    "JetGetLogInfoInstance2W",
    "JetResizeDatabase@20",
    "JetAttachDatabaseW@12",
    "JetGetLS@16",
    "JetCreateInstance2A",
    "JetSetCursorFilter@20",
    "JetAttachDatabaseA",
    "JetAttachDatabase",
    "JetDupSession@8",
    "JetConsumeLogData",
    "JetOSSnapshotAbort@8",
    "JetOpenTempTable3@28",
    "JetAttachDatabaseWithStreamingW",
    "JetCreateTableW",
    "JetDeleteTable",
    "JetStopBackupInstance",
    "JetDupCursor",
    "JetGetVersion"
  ],
  "esentprf.dll": [
    "ClosePerformanceData",
    "OpenPerformanceData",
    "CollectPerformanceData"
  ],
  "eventcls.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "evr.dll": [
    "MFCreateVideoPresenter",
    "MFGetUncompressedVideoFormat",
    "MFConvertToFP16Array",
    "MFCreateVideoMediaTypeFromVideoInfoHeader",
    "DllRegisterServer",
    "MFGetStrideForBitmapInfoHeader",
    "DllUnregisterServer",
    "MFConvertColorInfoToDXVA",
    "MFCreateVideoPresenter2",
    "MFCreateVideoMediaTypeFromVideoInfoHeader2",
    "MFInitVideoFormat_RGB",
    "MFIsFormatYUV",
    "DllCanUnloadNow",
    "MFCreateVideoMediaTypeFromSubtype",
    "MFCreateVideoSampleAllocator",
    "MFCopyImage",
    "MFGetPlaneSize",
    "MFCreateDXSurfaceBuffer",
    "MFCreateVideoMediaTypeFromBitMapInfoHeader",
    "MFCreateVideoMixer",
    "MFCreateVideoOTA",
    "MFCreateVideoMediaType",
    "DllGetClassObject",
    "MFConvertColorInfoFromDXVA",
    "MFCreateVideoSampleFromSurface",
    "MFCreateVideoMixerAndPresenter",
    "MFInitVideoFormat",
    "MFConvertFromFP16Array"
  ],
  "expsrv.dll": [
    "rtcSwitch",
    "__vbaI2ErrVar",
    "__vbaVarTextTstGe",
    "__vbaR8FixI2",
    "_adj_fprem1",
    "__vbaVarIndexStore",
    "__vbaEraseKeepData",
    "__vbaI2Abs",
    "rtcFormatPercent",
    "rtcSgnVar",
    "rtcGetErl",
    "__vbaVarPow",
    "rtcMidCharVar",
    "rtcVarBstrFromAnsi",
    "__vbaLateIdNamedStAd",
    "__vbaLateMemCallSt",
    "__vbaRedimPreserveVar2",
    "__vbaAryConstruct2",
    "rtcJoin",
    "__vbaForEachVar",
    "_adj_fptan",
    "__vbaVarEqv",
    "__vbaStrR8",
    "rtcMidBstr",
    "__vbaLateMemStAd",
    "__vbaBoolVar",
    "rtcGetMonthOfYear",
    "GetMemVar",
    "EbLibraryUnload",
    "__vbaVarForNext",
    "rtcIntVar",
    "__vbaGetOwner3",
    "__vbaUI1Cy",
    "__vbaForEachCollVar",
    "__vbaVarTextCmpEq",
    "__vbaStrMove",
    "rtcCos",
    "__vbaRedim",
    "_CIatan",
    "rtcFreeFile",
    "rtcIPMT",
    "rtcLowerCaseVar",
    "__vbaAryConstruct",
    "rtcFileLength",
    "TipGetAddressOfPredeclaredInstance",
    "__vbaChkstk",
    "__vbaR8Var",
    "rtcLog",
    "__vbaObjAddref",
    "MethCallEngine",
    "__vbaNew",
    "rtcLeftCharVar",
    "EbIsProjectOnStack",
    "EVENT_SINK_AddRef",
    "rtcTrimBstr",
    "rtcGetDayOfMonth",
    "__vbaR4Var",
    "ProcCallEngine",
    "rtcMacId",
    "EbResetProject",
    "__vbaR4Str",
    "__vbaFileClose",
    "rtcIRR",
    "EVENT_SINK2_Release",
    "rtcCallByName",
    "rtcStrFromVar",
    "rtcIMEStatus",
    "rtcLowerCaseBstr",
    "rtcDoEvents",
    "__vbaLbound",
    "__vbaUbound",
    "rtcGetDateBstr",
    "__vbaVarCopy",
    "rtcNPer",
    "__vbaObjIs",
    "__vbaVarLateMemStAd",
    "rtcInputCount",
    "__vbaCVarAryUdt",
    "__vbaDateR4",
    "__vbaVarCmpEq",
    "rtcQBColor",
    "__vbaVarVargNofree",
    "rtcMsgBox",
    "__vbaDateStr",
    "rtcDeleteSetting",
    "rtcCommandVar",
    "__vbaVarIndexStoreObj",
    "rtcMidCharBstr",
    "__vbaCyFix",
    "EbGetErrorInfo",
    "__vbaPutOwner3",
    "__vbaNextEachCollAd",
    "__vbaGetOwner4",
    "rtcGetDayOfWeek",
    "rtI4FromErrVar",
    "__vbaFreeObjList",
    "rtcLeftVar",
    "__vbaVarTextTstEq",
    "__vbaVarLikeVar",
    "__vbaLineInputVar",
    "EbDestroyContext",
    "__vbaVarTstLe",
    "__vbaI4Var",
    "rtcCharValueBstr",
    "__vbaFpCSngR4",
    "__vbaI4Cy",
    "__vbaRedimPreserveVar",
    "__vbaVarSetVar",
    "__vbaUdtVar",
    "__vbaVargUnk",
    "__vbaDateR8",
    "__vbaVarCmpNe",
    "__vbaLenVarB",
    "__vbaVarMod",
    "__vbaVarSetVarAddref",
    "rtcFileAttributes",
    "_adj_fdivr_m32i",
    "rtcFileSeek",
    "rtcIsError",
    "__vbaVarSetObj",
    "rtcAtn",
    "__vbaCyMulI2",
    "__vbaStrVarMove",
    "__vbaFileLock",
    "__vbaVarLike",
    "__vbaAryVar",
    "__vbaPutFxStr3",
    "__vbaHresultCheckNonvirt",
    "__vbaMidStmtVarB",
    "rtcShell",
    "__vbaVarTstNe",
    "__vbaVarZero",
    "rtcFileReset",
    "EbGetHandleOfExecutingProject",
    "rtcRandomNext",
    "__vbaFreeObj",
    "__vbaLateMemCall",
    "rtcIsEmpty",
    "__vbaVargParmRef",
    "rtcMidVar",
    "__vbaSetSystemError",
    "rtcGetDateValue",
    "SetMemEvent",
    "rtcGetTimeValue",
    "__vbaVarTstGe",
    "__vbaExitProc",
    "__vbaVarMul",
    "rtcCreateObject2",
    "__vbaResume",
    "__vbaWriteFile",
    "__vbaVarNot",
    "rtcSetFileAttr",
    "__vbaCyForNext",
    "__vbaLateIdCall",
    "__vbaVarImp",
    "rtcFormatDateTime",
    "rtcUpperCaseBstr",
    "rtcIsMissing",
    "__vbaVarTextLikeVar",
    "rtcAnsiValueBstr",
    "__vbaGosubFree",
    "SetMemVar",
    "SetMemNewObj",
    "__vbaBoolStr",
    "__vbaStrI2",
    "rtcFileLocation",
    "__vbaLdZeroAry",
    "_CIlog",
    "__vbaExitEachAry",
    "BASIC_CLASS_QueryInterface",
    "rtcLeftTrimBstr",
    "__vbaVarLateMemCallLd",
    "_adj_fdiv_m64",
    "__vbaStrUI1",
    "rtcInStrRev",
    "__vbaI2Sgn",
    "__vbaAryRecCopy",
    "__vbaRedimPreserve",
    "__vbaR8FixI4",
    "__vbaForEachCollObj",
    "__vbaOnError",
    "__vbaVarCmpGe",
    "__vbaVarIdiv",
    "__vbaMidStmtVar",
    "__vbaVarMove",
    "rtcUpperCaseVar",
    "rtDecFromVar",
    "PutMemStr",
    "__vbaVerifyVarObj",
    "rtcGetFileAttr",
    "rtcStrReverse",
    "__vbaVarLateMemSt",
    "__vbaHresultCheckObj",
    "__vbaFpCy",
    "__vbaStrVarCopy",
    "rtCyFromErrVar",
    "rtcChoose",
    "rtcFileLen",
    "rtcRgb",
    "__vbaR8Str",
    "__vbaLateIdNamedCall",
    "__vbaExceptHandler",
    "__vbaVarErrI4",
    "__vbaLateMemCallLd",
    "__vbaVarAnd",
    "rtcAbsVar",
    "__vbaVargVarCopy",
    "__vbaVarForInit",
    "__vbaDateVar",
    "rtcInputBox",
    "__vbaGenerateBoundsError",
    "__vbaUI1Str",
    "__vbaR4ForNextCheck",
    "__vbaI4ForNextCheck",
    "__vbaFpCDblR4",
    "__vbaUI1I2",
    "rtcSpaceBstr",
    "__vbaPutFxStr4",
    "rtcTypeName",
    "BASIC_CLASS_Release",
    "__vbaForEachCollAd",
    "CreateIExprSrvObj",
    "__vbaExitEachColl",
    "__vbaMidStmtBstrB",
    "__vbaVarAbs",
    "rtcInputCountVar",
    "__vbaCySub",
    "__vbaVarDiv",
    "__vbaCopyBytes",
    "rtcRate",
    "rtcVarFromVar",
    "rtcGetHourOfDay",
    "__vbaAryDestruct",
    "rtcRandomize",
    "__vbaEnd",
    "rtcExp",
    "__vbaStrToUnicode",
    "__vbaObjSet",
    "rtcInStrChar",
    "__vbaVarAdd",
    "rtcFileCopy",
    "TipInvokeMethod2",
    "__vbaFPFix",
    "rtcOctVarFromVar",
    "_adj_fdivr_m32",
    "rtcInputCharCount",
    "EbSetContextWorkerThread",
    "TipCreateInstanceProject2",
    "rtcAppActivate",
    "__vbaRecAssign",
    "rtcCompareBstr",
    "PutMem4",
    "__vbaFpCSngR8",
    "_CIsin",
    "rtR8FromErrVar",
    "__vbaI2Var",
    "__vbaVarTstLt",
    "__vbaPowerR8",
    "__vbaPutOwner4",
    "rtcMakeDir",
    "__vbaLateIdCallSt",
    "rtcKillFiles",
    "__vbaUI1I4",
    "GetMem2",
    "_CItan",
    "rtcLenCharVar",
    "rtcEnvironBstr",
    "__vbaStrCy",
    "__vbaVarXor",
    "__vbaVarSub",
    "EbLibraryLoad",
    "__vbaPut4",
    "rtcFileWidth",
    "__vbaCheckTypeVar",
    "rtcEnvironVar",
    "rtcRightTrimVar",
    "__vbaAryLock",
    "EVENT_SINK2_AddRef",
    "PutMem2",
    "rtcSetDateVar",
    "VarPtr",
    "__vbaVarSetObjAddref",
    "__vbaVargObjAddref",
    "__vbaLateIdStAd",
    "__vbaFreeVarList",
    "__vbaLateIdNamedCallLd",
    "BASIC_CLASS_Invoke",
    "_adj_fdiv_m16i",
    "_adj_fdivr_m64",
    "rtcRightTrimBstr",
    "GetMemNewObj",
    "rtcChangeDrive",
    "EbGetVBAObject",
    "Zombie_AddRef",
    "__vbaNameFile",
    "__vbaVarCmpLe",
    "__vbaFailedFriend",
    "rtcGetSecondOfMinute",
    "__vbaFileOpen",
    "__vbaVarTextTstGt",
    "__vbaStrCmp",
    "rtcSendKeys",
    "__vbaUnkVar",
    "rtcRightCharBstr",
    "rtcPPMT",
    "_adj_fdivr_m16i",
    "__vbaFreeVarg",
    "rtcLeftCharBstr",
    "rtcVarBstrFromByte",
    "__vbaCopyBytesZero",
    "__vbaI4Sgn",
    "__vbaVargVarRef",
    "rtUI1FromErrVar",
    "IID_IVbaHost",
    "__vbaAryRecMove",
    "rtcIsNumeric",
    "rtcMonthName",
    "__vbaLateMemNamedCallLd",
    "rtcIsObject",
    "GetMemEvent",
    "__vbaVarIndexLoad",
    "BASIC_CLASS_GetIDsOfNames",
    "rtcVarBstrFromChar",
    "__vbaFpCmpCy",
    "__vbaFreeStrList",
    "rtcR8ValFromBstr",
    "__vbaObjSetAddref",
    "__vbaAryUnlock",
    "__vbaLenBstrB",
    "__vbaVarCmpLt",
    "__vbaI4Abs",
    "__vbaAryCopy",
    "__vbaVarTextCmpGe",
    "__vbaRaiseEvent",
    "__vbaFileSeek",
    "rtcReplace",
    "__vbaOnGoCheck",
    "rtcPV",
    "rtcSpaceVar",
    "__vbaInStrB",
    "rtBstrFromErrVar",
    "rtcHexBstrFromVar",
    "rtcErrObj",
    "_CIsqrt",
    "rtcHexVarFromVar",
    "rtcBstrFromError",
    "PutMemObj",
    "__vbaR8IntI4",
    "__vbaLateIdSt",
    "__vbaStrCompVar",
    "__vbaGetFxStr4",
    "rtcGetSetting",
    "rtcLeftBstr",
    "__vbaVargVarMove",
    "__vbaStrFixstr",
    "rtcTrimVar",
    "rtcSetDateBstr",
    "rtcSqr",
    "GetMem1",
    "rtcGetTimer",
    "__vbaR4Cy",
    "rtcIsNull",
    "rtcEndOfFile",
    "__vbaPut3",
    "__vbaR8Cy",
    "rtcStrConvVar2",
    "GetMemObj",
    "rtcCreateObject",
    "__vbaStrR4",
    "rtcBeep",
    "rtcSetTimeVar",
    "Zombie_GetIDsOfNames",
    "__vbaUI1ErrVar",
    "EbLoadRunTime",
    "_adj_fdiv_r",
    "__vbaStrDate",
    "__vbaRedimVar",
    "__vbaGosub",
    "rtcVarDateFromVar",
    "__vbaForEachAry",
    "_CIcos",
    "rtcGetMinuteOfHour",
    "__vbaVarTextCmpLt",
    "__vbaLenVar",
    "__vbaVarCmpGt",
    "rtcWeekdayName",
    "__vbaStrI4",
    "__vbaEraseNoPop",
    "rtcLeftTrimVar",
    "rtcGetTimeBstr",
    "PutMemVar",
    "__vbaCyStr",
    "__vbaVarTextCmpLe",
    "TipSetOption",
    "rtcGetTimeVar",
    "__vbaVarSetUnk",
    "__vbaI2Str",
    "__vbaFpR8",
    "__vbaFpI4",
    "__vbaCheckType",
    "__vbaVargUnkAddref",
    "__vbaNextEachVar",
    "__vbaVargVar",
    "__vbaLateMemNamedStAd",
    "rtcDateDiff",
    "__vbaR8Sgn",
    "__vbaNextEachCollVar",
    "rtcBstrFromAnsi",
    "__vbaAryMove",
    "__vbaStrTextLike",
    "rtcPartition",
    "__vbaMidStmtBstr",
    "__vbaCastObj",
    "__vbaDerefAry1",
    "rtcInStr",
    "__vbaAryRebase1Var",
    "__vbaPrintFile",
    "__vbaR4ErrVar",
    "__vbaVarTextTstLe",
    "__vbaVarTextTstLt",
    "__vbaVarNeg",
    "_adj_fpatan",
    "PutMem8",
    "rtcVarFromError",
    "__vbaCySgn",
    "__vbaHresultCheck",
    "__vbaBoolVarNull",
    "__vbaFpUI1",
    "rtcRightVar",
    "__vbaCyUI1",
    "__vbaCastObjVar",
    "rtcRemoveDir",
    "__vbaI2Cy",
    "rtcStringVar",
    "__vbaAryVarVarg",
    "rtcDatePart",
    "__vbaLateMemNamedCall",
    "__vbaR8ErrVar",
    "rtcOctBstrFromVar",
    "rtcNPV",
    "__vbaVarTstEq",
    "EbResetProjectNormal",
    "rtcFormatNumber",
    "rtcSLN",
    "__vbaI2I4",
    "__vbaExitEachVar",
    "__vbaGetFxStr3",
    "rtcBstrFromFormatVar",
    "PutMem1",
    "__vbaI4ErrVar",
    "__vbaDerefAry",
    "__vbaRedimVar2",
    "rtcCVErrFromVar",
    "rtcRightBstr",
    "rtcGetCurrentCalendar",
    "Zombie_QueryInterface",
    "rtcLenVar",
    "__vbaVarDateVar",
    "_adj_fprem",
    "rtcFV",
    "__vbaLineInputStr",
    "__vbaNextEachCollObj",
    "__vbaGosubReturn",
    "rtcRound",
    "rtcTan",
    "_adj_fdiv_m32",
    "__vbaVarIndexLoadRef",
    "BASIC_CLASS_AddRef",
    "__vbaRefVarAry",
    "DllFunctionCall",
    "__vbaInStrVarB",
    "__vbaStrAryToAnsi",
    "__vbaFpI2",
    "EVENT_SINK_Invoke",
    "rtR4FromErrVar",
    "rtcByteValueBstr",
    "SetMemObj",
    "__vbaPrintObj",
    "__vbaInStr",
    "rtcBstrFromChar",
    "Zombie_Release",
    "__vbaStrTextCmp",
    "Zombie_Invoke",
    "__vbaFPInt",
    "__vbaNextEachAry",
    "__vbaCyI4",
    "_adj_fdiv_m32i",
    "rtcChangeDir",
    "__vbaStopExe",
    "__vbaVarDup",
    "__vbaUI1Sgn",
    "Zombie_GetTypeInfoCount",
    "rtcGetHostLCID",
    "__vbaStrComp",
    "__vbaFpR4",
    "__vbaRecUniToAnsi",
    "__vbaStrVarVal",
    "__vbaVarTextTstNe",
    "rtcPackDate",
    "__vbaGet3",
    "rtcFilter",
    "rtcBstrFromByte",
    "GetMem8",
    "rtBoolFromErrVar",
    "__vbaCyVar",
    "__vbaVargObj",
    "rtcCurrentDirBstr",
    "TipUnloadProject",
    "__vbaCyI2",
    "rtcSetCurrentCalendar",
    "rtcGetDateVar",
    "Zombie_GetTypeInfo",
    "__vbaLateIdNamedCallSt",
    "_allmul",
    "TipUnloadInstance",
    "__vbaVarFix",
    "__vbaVarLateMemCallLdRf",
    "rtcPMT",
    "rtcGetPresentDate",
    "__vbaVarCat",
    "__vbaLateIdCallLd",
    "rtcInputCharCountVar",
    "__vbaObjVar",
    "__vbaStrCopy",
    "__vbaInStrVar",
    "rtcVarFromFormatVar",
    "rtcCommandBstr",
    "__vbaCyAdd",
    "rtcArray",
    "__vbaFreeVar",
    "__vbaVarTextCmpGt",
    "__vbaFpCDblR8",
    "__vbaErrorOverflow",
    "rtcDir",
    "rtcSaveSetting",
    "__vbaLateMemSt",
    "__vbaFreeStr",
    "__vbaRsetFixstr",
    "rtcDateFromVar",
    "__vbaLenBstr",
    "__vbaUI1Var",
    "rtcIsDate",
    "__vbaRsetFixstrFree",
    "rtcDateAdd",
    "rtcCurrentDir",
    "CopyRecord",
    "__vbaNew2",
    "PutMemEvent",
    "rtcGetAllSettings",
    "rtcPackTime",
    "__vbaLsetFixstr",
    "PutMemNewObj",
    "GetMem4",
    "__vbaRecAnsiToUni",
    "__vbaStrCat",
    "__vbaFixstrConstruct",
    "__vbaBoolErrVar",
    "__vbaI2ForNextCheck",
    "rtcSin",
    "__vbaInputFile",
    "rtcDDB",
    "__vbaCyForInit",
    "__vbaVarTextCmpNe",
    "EVENT_SINK_QueryInterface",
    "__vbaVarOr",
    "__vbaErase",
    "rtcImmediateIf",
    "EbCreateContext",
    "rtcVarStrFromVar",
    "__vbaLateMemNamedCallSt",
    "__vbaRecDestructAnsi",
    "BASIC_DISPINTERFACE_GetTICount",
    "__vbaStrLike",
    "rtcFormatCurrency",
    "EbGetObjConnectionCounts",
    "__vbaR8IntI2",
    "rtcFileDateTime",
    "EVENT_SINK_GetIDsOfNames",
    "__vbaVarInt",
    "rtcRightCharVar",
    "rtcStrConvVar",
    "__vbaVar2Vec",
    "__vbaVarSetUnkAddref",
    "BASIC_DISPINTERFACE_GetTypeInfo",
    "__vbaStrBool",
    "__vbaRecDestruct",
    "__vbaGet4",
    "__vbaStrToAnsi",
    "__vbaCyMul",
    "TipCreateInstanceEx",
    "_CIexp",
    "__vbaVarTextLike",
    "__vbaStrErrVarCopy",
    "rtcSYD",
    "rtcFixVar",
    "__vbaStr2Vec",
    "rtcAppleScript",
    "EVENT_SINK_Release",
    "__vbaVarIndexLoadRefLock",
    "__vbaStrAryToUnicode",
    "__vbaCyErrVar",
    "__vbaFileCloseAll",
    "rtcSetTimeBstr",
    "rtcStringBstr",
    "__vbaLsetFixstrFree",
    "rtcIsArray",
    "__vbaVarTstGt",
    "__vbaError",
    "__vbaCyInt",
    "TipInvokeMethod",
    "rtcGetObject",
    "__vbaFPException",
    "rtcSplit",
    "rtcVarType",
    "__vbaCyAbs",
    "rtI2FromErrVar",
    "__vbaI4Str",
    "GetMemStr",
    "rtcMIRR",
    "__vbaVarLateMemCallSt",
    "__vbaR4Sgn",
    "__vbaR8ForNextCheck",
    "rtcGetYear"
  ],
  "ext-ms-win-MrmCoreR-ResManager-l1-1-0.dll": [
    "ResourceManagerQueueIsResourceReference",
    "ResourceManagerQueueGetString"
  ],
  "ext-ms-win-advapi32-auth-l1-1-0.dll": [
    "LookupPrivilegeValueA",
    "LookupPrivilegeValueW"
  ],
  "ext-ms-win-advapi32-encryptedfile-l1-1-0.dll": [
    "ReadEncryptedFileRaw",
    "CloseEncryptedFileRaw",
    "OpenEncryptedFileRawW",
    "WriteEncryptedFileRaw"
  ],
  "ext-ms-win-advapi32-eventingcontroller-l1-1-0.dll": [
    "EtwLogSysConfigExtension"
  ],
  "ext-ms-win-advapi32-eventlog-l1-1-0.dll": [
    "ReportEventW",
    "DeregisterEventSource",
    "RegisterEventSourceW",
    "OpenEventLogW",
    "CloseEventLog"
  ],
  "ext-ms-win-advapi32-lsa-l1-1-0.dll": [
    "LsaGetUserName",
    "LsaSetSystemAccessAccount",
    "LsaOpenAccount",
    "LsaCreateAccount",
    "LsaAddPrivilegesToAccount"
  ],
  "ext-ms-win-advapi32-msi-l1-1-0.dll": [
    "InstallApplication",
    "CommandLineFromMsiDescriptor"
  ],
  "ext-ms-win-advapi32-ntmarta-l1-1-0.dll": [
    "GetSecurityInfo",
    "SetSecurityInfo"
  ],
  "ext-ms-win-advapi32-psm-app-l1-1-0.dll": [
    "GetSecurityInfo",
    "SetSecurityInfo"
  ],
  "ext-ms-win-advapi32-registry-l1-1-0.dll": [
    "BaseRegCloseKey",
    "PerfRegQueryValue",
    "BaseRegOpenKey",
    "BaseRegFlushKey",
    "RemoteRegEnumKeyWrapper",
    "BaseRegUnLoadKey",
    "PerfRegCloseKey",
    "PerfRegEnumValue",
    "BaseRegDeleteKeyEx",
    "BaseRegSaveKeyEx",
    "MIDL_user_free_Ext",
    "PerfRegEnumKey",
    "PerfRegQueryInfoKey",
    "RemoteRegEnumValueWrapper",
    "BaseRegCreateKey",
    "BaseRegGetVersion",
    "BaseRegDeleteValue",
    "RemoteRegQueryInfoKeyWrapper",
    "BaseRegRestoreKey",
    "RemoteRegQueryValueWrapper",
    "BaseRegSetKeySecurity",
    "SafeBaseRegGetKeySecurity",
    "PerfRegSetValue",
    "BaseRegLoadKey",
    "BaseRegSetValue"
  ],
  "ext-ms-win-advapi32-safer-l1-1-0.dll": [
    "SaferiIsExecutableFileType",
    "SaferComputeTokenFromLevel",
    "SaferCreateLevel",
    "SaferCloseLevel",
    "SaferiCompareTokenLevels"
  ],
  "ext-ms-win-advapi32-shutdown-l1-1-0.dll": [
    "CheckForHiberboot",
    "InitiateShutdownW",
    "AbortSystemShutdownW",
    "InitiateSystemShutdownExW"
  ],
  "ext-ms-win-authz-claimpolicies-l1-1-0.dll": [
    "GetCentralAccessPoliciesByCapID",
    "GetCentralAccessPoliciesByDN"
  ],
  "ext-ms-win-authz-context-l1-1-0.dll": [
    "AuthzInitializeResourceManager",
    "AuthziInitializeAuditEventType",
    "AuthzInitializeContextFromToken",
    "AuthzFreeResourceManager",
    "AuthzFreeAuditEvent",
    "AuthzInitializeContextFromSid",
    "AuthziFreeAuditEventType",
    "AuthziInitializeAuditParams",
    "AuthziInitializeAuditEvent",
    "AuthzFreeContext",
    "AuthziLogAuditEvent",
    "AuthzInitializeContextFromAuthzContext"
  ],
  "ext-ms-win-authz-remote-l1-1-0.dll": [
    "AuthzrExtGetInformationFromContext",
    "AuthzrExtInitializeContextFromSid",
    "AuthzrExtFreeResourceManager",
    "AuthzrExtInitializeRemoteResourceManager",
    "AuthzrExtAccessCheck",
    "AuthzrExtModifyClaims",
    "AuthzrExtFreeContext",
    "AuthzrExtInitializeCompoundContext"
  ],
  "ext-ms-win-biometrics-winbio-l1-1-0.dll": [
    "WinBioNotifyPasswordChange"
  ],
  "ext-ms-win-bluetooth-deviceassociation-l1-1-0.dll": [
    "DafStartFinalize",
    "DafCreateAssociationContextFromOobBlob",
    "DafStartRemoveAssociation",
    "DafMemFree",
    "DafSelectCeremony",
    "DafStartEnumCeremonies",
    "DafCreateAssociationContext",
    "DafCloseAssociationContext"
  ],
  "ext-ms-win-branding-winbrand-l1-1-0.dll": [
    "BrandingFormatString",
    "BrandingLoadString"
  ],
  "ext-ms-win-cluster-clusapi-l1-1-0.dll": [
    "GetClusterNodeState",
    "ClusterResourceTypeOpenEnum",
    "ClusterCloseEnum",
    "OpenCluster",
    "CloseClusterResource",
    "GetClusterInformation",
    "ClusterResourceControl",
    "CloseCluster",
    "CloseClusterNode",
    "ClusterEnum",
    "OpenClusterNode",
    "ClusterOpenEnum",
    "ClusterResourceTypeEnum",
    "ClusterResourceTypeCloseEnum"
  ],
  "ext-ms-win-cluster-resutils-l1-1-0.dll": [
    "ResUtilGetCoreClusterResources"
  ],
  "ext-ms-win-cmd-util-l1-1-0.dll": [
    "DoSHChangeNotify",
    "WNetAddConnection2WStub",
    "CmdBatNotificationStub",
    "FindFirstStreamWStub",
    "GetVDMCurrentDirectoriesStub",
    "WNetGetConnectionWStub",
    "MessageBeepStub",
    "WNetCancelConnection2WStub",
    "QueryFullProcessImageNameWStub",
    "GetBinaryTypeWStub",
    "ShellExecuteWorker",
    "FindNextStreamWStub",
    "LookupAccountSidWStub",
    "SaferWorker"
  ],
  "ext-ms-win-cng-rng-l1-1-0.dll": [
    "ProcessPrng"
  ],
  "ext-ms-win-com-clbcatq-l1-1-0.dll": [
    "GetCatalogObject",
    "GetCatalogObject2"
  ],
  "ext-ms-win-com-ole32-l1-1-0.dll": [
    "OleGetAutoConvert",
    "CreateItemMoniker",
    "FindExt",
    "StgCreateDocfile",
    "CoAicGetTokenForCOM",
    "DeletePatternAndExtensionTables",
    "ClipboardProcessUninitialize",
    "DestroyRunningObjectTable",
    "OleInitialize",
    "CleanROTForApartment",
    "DragDropSetFDT",
    "OleUninitialize",
    "Ole32DllGetClassObject",
    "GetObjectFromRotByPath",
    "CreatePointerMoniker",
    "DdeBindToObject",
    "OleReleaseEnumVerbCache",
    "CheckInitDde",
    "GetRunningObjectTable",
    "StgOpenStorageOnILockBytes",
    "CoGetSystemWow64DirectoryW",
    "CoCheckElevationEnabled",
    "CoGetInterceptorForOle32"
  ],
  "ext-ms-win-com-psmregister-l1-1-0.dll": [
    "PsmActivateApplication",
    "PsmRegisterApplicationProcess",
    "PsmAdjustActivationToken",
    "PsmQueryBackgroundActivationType"
  ],
  "ext-ms-win-domainjoin-netjoin-l1-1-0.dll": [
    "NetpIsSetupInProgress",
    "NetpFreeLdapLsaDomainInfo",
    "NetpGetNewMachineName",
    "NetpDomainJoinLicensingCheck",
    "NetpGetListOfJoinableOUs",
    "NetSetuppCloseLog",
    "NetpMachineValidToJoin",
    "NetpSeparateUserAndDomain",
    "NetpGetLsaPrimaryDomain",
    "NetpDoDomainJoin",
    "NetpLogPrintHelper",
    "NetpContinueProvisioningPackageInstall",
    "NetSetuppOpenLog",
    "NetpCompleteOfflineDomainJoin",
    "NetpValidateName",
    "NetpQueryService",
    "NetpUnJoinDomain",
    "NetpAvoidNetlogonSpnSet",
    "NetpGetMachineAccountName",
    "NetpManageIPCConnect",
    "NetpGetJoinInformation",
    "NetpControlServices",
    "NetpCheckOfflineLsaPolicyUpdate",
    "NetpCrackNamesStatus2Win32Error",
    "NetpChangeMachineName"
  ],
  "ext-ms-win-firewallapi-webproxy-l1-1-0.dll": [
    "FWFreeFirewallRules",
    "FWIndicatePortInUse",
    "FWIsTargetAProxy",
    "IsFirewallInCoExistanceMode",
    "FWIndicateTupleInUse",
    "FWResetIndicatedTupleInUse",
    "FWGetConfig",
    "FWOpenPolicyStore",
    "FWIndicateProxyForUrl",
    "FWClosePolicyStore",
    "FWIndicateProxyResolverRefresh",
    "FWQueryFirewallRules",
    "FWGetGlobalConfig"
  ],
  "ext-ms-win-fs-clfs-l1-1-0.dll": [
    "ClfsFlushBuffers",
    "ClfsReserveAndAppendLog",
    "ClfsSetLogFileInformation",
    "ClfsAddLogContainerSet",
    "ClfsLsnContainer",
    "ClfsLsnInvalid",
    "ClfsMgmtRemovePolicy",
    "ClfsReadRestartArea",
    "ClfsMgmtTailAdvanceFailure",
    "ClfsMgmtInstallPolicy",
    "ClfsSetArchiveTail",
    "ClfsLsnNull",
    "ClfsMgmtSetLogFileSize",
    "ClfsMgmtQueryPolicy",
    "ClfsReadNextLogRecord",
    "ClfsScanLogContainers",
    "ClfsFreeReservedLog",
    "ClfsReadLogRecord",
    "ClfsGetLogFileInformation",
    "ClfsGetContainerName",
    "ClfsLsnEqual",
    "ClfsAdvanceLogBase",
    "ClfsMgmtSetLogFileSizeAsClient",
    "ClfsEarlierLsn",
    "ClfsCreateLogFile",
    "ClfsLaterLsn",
    "ClfsReadPreviousRestartArea",
    "ClfsRemoveLogContainer",
    "ClfsRemoveLogContainerSet",
    "ClfsLsnLess",
    "ClfsLsnBlockOffset",
    "ClfsMgmtDeregisterManagedClient",
    "ClfsCreateMarshallingArea",
    "ClfsCreateScanContext",
    "ClfsAddLogContainer",
    "ClfsLsnCreate",
    "ClfsLsnGreater",
    "ClfsTerminateReadLog",
    "ClfsFinalize",
    "ClfsMgmtHandleLogFileFull",
    "ClfsPrivGetBaseLogFileFromFileObjectPointer",
    "ClfsDeleteMarshallingArea",
    "ClfsFlushToLsn",
    "ClfsWriteRestartArea",
    "ClfsDeleteLogFile",
    "ClfsMgmtRegisterManagedClient",
    "ClfsAlignReservedLog",
    "ClfsAllocReservedLog",
    "ClfsReserveAndAppendLogAligned",
    "ClfsCloseAndResetLogFile",
    "ClfsDeleteLogByPointer",
    "ClfsGetIoStatistics",
    "ClfsLsnDifference",
    "ClfsInitialize",
    "ClfsSetEndOfLog",
    "ClfsQueryLogFileInformation",
    "ClfsLsnRecordSequence",
    "ClfsCloseLogFileObject"
  ],
  "ext-ms-win-fsutilext-ifsutil-l1-1-0.dll": [
    "DeviceInstIsRemovableWorker",
    "GetRemovableDeviceInstRecursWorker",
    "GetWidgetWorker",
    "GetDeviceInstanceWorker",
    "SendWithSenseParseWorker",
    "CheckSonyMSWorker",
    "GetDeviceIDDiskFromDeviceIDVolumeWorker",
    "InvalidateFveWorker",
    "WaitForUnitAndReportProgressWorker"
  ],
  "ext-ms-win-fsutilext-ulib-l1-1-0.dll": [
    "FindNextVolumeMountPointWStub",
    "FindFirstVolumeMountPointWStub",
    "SetThreadUILanguageStub",
    "SystemParametersInfoWStub",
    "FindVolumeMountPointCloseStub"
  ],
  "ext-ms-win-gdi-dc-create-l1-1-0.dll": [
    "CreateCompatibleDC",
    "DeleteDC",
    "CreateDCW"
  ],
  "ext-ms-win-gdi-dc-l1-1-0.dll": [
    "GetObjectType",
    "GetClipBox",
    "RestoreDC",
    "GetSystemPaletteEntries",
    "GetObjectW",
    "GetPaletteEntries",
    "GetStockObject",
    "GetCurrentObject",
    "DeleteObject",
    "SaveDC",
    "GetDCOrgEx",
    "SelectObject",
    "CreatePalette",
    "GetObjectA",
    "SetDCBrushColor"
  ],
  "ext-ms-win-gdi-devcaps-l1-1-0.dll": [
    "GetDeviceCaps"
  ],
  "ext-ms-win-gdi-draw-l1-1-0.dll": [
    "SetDIBits",
    "CreateDIBSection",
    "StretchBlt",
    "PolyBezierTo",
    "GetDIBits",
    "StretchDIBits",
    "SetGraphicsMode",
    "SetLayout",
    "GdiFlush",
    "GetBitmapBits",
    "CreateCompatibleBitmap",
    "SetWorldTransform",
    "MoveToEx",
    "GetWorldTransform",
    "BitBlt",
    "CreateBitmap",
    "LineTo"
  ],
  "ext-ms-win-gdi-font-l1-1-0.dll": [
    "CreateFontIndirectW",
    "GetTextMetricsW",
    "GetTextFaceA",
    "EnumFontFamiliesA",
    "CreateFontIndirectA",
    "GetFontRealizationInfo",
    "EnumFontFamiliesExA",
    "GetFontFileData",
    "EnumFontFamiliesExW",
    "TranslateCharsetInfo",
    "GetFontFileInfo",
    "GetFontData"
  ],
  "ext-ms-win-gdi-metafile-l1-1-0.dll": [
    "GetMetaFileBitsEx",
    "SetMetaFileBitsEx",
    "DeleteEnhMetaFile",
    "SetEnhMetaFileBits",
    "DeleteMetaFile",
    "GetEnhMetaFileBits"
  ],
  "ext-ms-win-gdi-path-l1-1-0.dll": [
    "BeginPath",
    "EndPath",
    "PathToRegion",
    "CloseFigure",
    "FillPath"
  ],
  "ext-ms-win-gdi-render-l1-1-0.dll": [
    "CreateBitmapFromDxSurface2",
    "EndGdiRendering",
    "BeginGdiRendering"
  ],
  "ext-ms-win-gdi-rgn-l1-1-0.dll": [
    "CreateRectRgn",
    "SelectClipRgn",
    "SetMetaRgn",
    "GetRegionData",
    "IntersectClipRect",
    "FillRgn",
    "GetRgnBox",
    "SetPolyFillMode"
  ],
  "ext-ms-win-gdi-wcs-l1-1-0.dll": [
    "SetDeviceGammaRamp"
  ],
  "ext-ms-win-gpapi-grouppolicy-l1-1-0.dll": [
    "GenerateGPNotificationInternalWorker",
    "GetAppliedGPOListInternalAWorker",
    "EnterCriticalPolicySectionExStub",
    "ForceSyncFgPolicyInternalWorker",
    "GetPreviousFgPolicyRefreshInfoInternalWorker",
    "RefreshPolicyInternalWorker",
    "HasPolicyForegroundProcessingCompletedInternalWorker",
    "FreeGPOListInternalAWorker",
    "WaitForUserPolicyForegroundProcessingInternalWorker",
    "WaitForMachinePolicyForegroundProcessingInternalWorker",
    "AreThereVisibleLogoffScriptsInternalWorker",
    "UnregisterGPNotificationInternalWorker",
    "IsSyncForegroundPolicyRefreshWorker",
    "RefreshPolicyExInternalWorker",
    "GetGPOListInternalWWorker",
    "RsopLoggingEnabledInternalWorker",
    "GetNextFgPolicyRefreshInfoInternalWorker",
    "LeaveCriticalPolicySectionInternalWorker",
    "GetAppliedGPOListInternalWWorker",
    "AreThereVisibleShutdownScriptsInternalWorker",
    "RegisterGPNotificationInternalWorker",
    "FreeGPOListInternalWWorker",
    "EnterCriticalPolicySectionInternalWorker",
    "GetGPOListInternalAWorker"
  ],
  "ext-ms-win-gui-uxinit-l1-1-0.dll": [
    "ThemesOnLogoff",
    "ThemesOnTerminateSession",
    "ThemesOnLogon",
    "ThemesOnDisconnect",
    "ThemesOnReconnect",
    "ThemesOnCreateSession",
    "ThemesOnEarlyCreateSession"
  ],
  "ext-ms-win-kernel32-appcompat-l1-1-0.dll": [
    "BaseIsAppcompatInfrastructureDisabledWorker",
    "BaseCheckAppcompatCacheExWorker",
    "BaseCheckAppcompatCacheWorker",
    "BaseFlushAppcompatCacheWorker",
    "BaseUpdateAppcompatCacheWorker",
    "BaseDumpAppcompatCacheWorker",
    "BaseInitAppcompatCacheSupportWorker",
    "BaseCleanupAppcompatCacheSupportWorker"
  ],
  "ext-ms-win-kernel32-datetime-l1-1-0.dll": [
    "GetTimeFormatWWorker",
    "GetDateFormatAWorker",
    "GetTimeFormatAWorker",
    "GetDateFormatWWorker"
  ],
  "ext-ms-win-kernel32-errorhandling-l1-1-0.dll": [
    "BasepReportFault",
    "WerpGetDebugger",
    "WerpLaunchAeDebug",
    "CheckForReadOnlyResourceFilter"
  ],
  "ext-ms-win-kernel32-file-l1-1-0.dll": [
    "BasepGetComputerNameFromNtPath",
    "DuplicateEncryptionInfoFileExt",
    "BasepSetFileEncryptionCompression",
    "OpenConsoleWStub",
    "BasepCopyEncryption",
    "SetVolumeMountPointWStub"
  ],
  "ext-ms-win-kernel32-package-current-l1-1-0.dll": [
    "GetCurrentPackageId",
    "GetCurrentPackageInfo"
  ],
  "ext-ms-win-kernel32-package-l1-1-0.dll": [
    "GetPackageInfo",
    "GetPackageId",
    "PackageFamilyNameFromFullName",
    "PackageFullNameFromId",
    "AppXGetPackageSid",
    "AppXLookupMoniker",
    "GetPackagesByPackageFamily",
    "AppContainerFreeMemory",
    "GetPackageFamilyName",
    "AppXGetPackageCapabilities",
    "GetPackageFullName",
    "PackageIdFromFullName",
    "AppContainerLookupMoniker",
    "PackageFamilyNameFromId",
    "AppContainerDeriveSidFromMoniker",
    "AppXFreeMemory",
    "ClosePackageInfo",
    "OpenPackageInfoByFullName",
    "GetPackagePath"
  ],
  "ext-ms-win-kernel32-registry-l1-1-0.dll": [
    "TermsrvDeleteValue",
    "TermsrvConvertSysRootToUserDir",
    "TermsrvCreateRegEntry",
    "TermsrvOpenRegEntry",
    "TermsrvDeleteKey",
    "TermsrvGetPreSetValue",
    "TermsrvSetValueKey",
    "TermsrvGetWindowsDirectoryW",
    "TermsrvSyncUserIniFileExt",
    "TermsrvSetKeySecurity",
    "TermsrvGetWindowsDirectoryA",
    "TermsrvOpenUserClasses",
    "TermsrvRestoreKey",
    "BasepNotifyLoadStringResource"
  ],
  "ext-ms-win-kernel32-sidebyside-l1-1-0.dll": [
    "ZombifyActCtxWorker",
    "FindActCtxSectionStringWWorker",
    "QueryActCtxSettingsWWorker",
    "QueryActCtxWWorker",
    "FindActCtxSectionGuidWorker",
    "AddRefActCtxWorker",
    "DeactivateActCtxWorker",
    "ActivateActCtxWorker",
    "CreateActCtxWWorker",
    "GetCurrentActCtxWorker",
    "ReleaseActCtxWorker"
  ],
  "ext-ms-win-kernel32-transacted-l1-1-0.dll": [
    "MoveFileTransactedW",
    "FindFirstFileTransactedW",
    "RemoveDirectoryTransactedW",
    "DeleteFileTransactedW",
    "CreateDirectoryTransactedW"
  ],
  "ext-ms-win-kernel32-windowserrorreporting-l1-1-0.dll": [
    "WerUnregisterFileWorker",
    "WerUnregisterMemoryBlockWorker",
    "WerpNotifyLoadStringResourceWorker",
    "WerUnregisterRuntimeExceptionModuleWorker",
    "WerpNotifyUseStringResourceWorker",
    "WerRegisterFileWorker",
    "GetApplicationRecoveryCallbackWorker",
    "WerRegisterMemoryBlockWorker",
    "WerRegisterRuntimeExceptionModuleWorker",
    "GetApplicationRestartSettingsWorker"
  ],
  "ext-ms-win-kernelbase-processthread-l1-1-0.dll": [
    "BasepAppXExtension",
    "BasepFreeAppCompatData",
    "BaseIsDosApplication",
    "BasepReleaseSxsCreateProcessUtilityStruct",
    "BaseElevationPostProcessing",
    "BaseCheckElevation",
    "BasepAppContainerEnvironmentExtension",
    "NtVdm64CreateProcessInternalW",
    "BaseDestroyVDMEnvironment",
    "BasepCheckWebBladeHashes",
    "BasepConstructSxsCreateProcessMessage",
    "BasepPostSuccessAppXExtension",
    "BasepCheckWinSaferRestrictions",
    "BasepQueryAppCompat",
    "BasepIsProcessAllowed",
    "BaseWriteErrorElevationRequiredEvent",
    "BaseUpdateVDMEntry",
    "BasepAppCompatHookDLL",
    "RaiseInvalid16BitExeError",
    "BasepGetAppCompatData",
    "BasepProcessInvalidImage",
    "BasepReleaseAppXContext"
  ],
  "ext-ms-win-mf-winmm-l1-1-0.dll": [
    "OpenDriver",
    "CloseDriver",
    "GetDriverModuleHandle"
  ],
  "ext-ms-win-mm-msacm-l1-1-0.dll": [
    "acmDriverRemove",
    "acmDriverDetailsW",
    "acmDriverPriority",
    "acmDriverID",
    "acmFilterTagEnumW",
    "acmFilterTagDetailsW",
    "acmStreamClose",
    "acmFormatDetailsW",
    "acmFormatChooseW",
    "acmFilterEnumW",
    "acmDriverAddW",
    "acmDriverMessage",
    "acmDriverClose",
    "acmMetrics",
    "acmStreamSize",
    "acmFilterDetailsW",
    "acmStreamMessage",
    "acmDriverOpen",
    "acmFormatTagDetailsW",
    "acmFormatSuggest",
    "acmFormatTagEnumW",
    "acmStreamUnprepareHeader",
    "acmStreamReset",
    "acmFormatEnumW",
    "acmDriverEnum",
    "acmFilterChooseW",
    "acmStreamPrepareHeader",
    "acmGetVersion",
    "acmStreamConvert",
    "acmStreamOpen"
  ],
  "ext-ms-win-mm-pehelper-l1-1-0.dll": [
    "MFRR_CreateActivate"
  ],
  "ext-ms-win-mm-wmdrmsdk-l1-1-0.dll": [
    "_WMDRMCreateProvider",
    "MFWMDRMOutputTrustAuthority_CreateInstance",
    "WMDRMCreateProvider"
  ],
  "ext-ms-win-mpr-multipleproviderrouter-l1-1-0.dll": [
    "WNetDisconnectDialog1WWorker",
    "ShowReconnectDialogEndWorker",
    "DoBroadcastSystemMessageWorker",
    "DoCommandLinePromptWorker",
    "WNetConnectionDialog1WWorker",
    "ShowReconnectDialogUIWorker",
    "WNetConnectionDialogWorker",
    "ShowReconnectDialogWorker",
    "WNetDisconnectDialogWorker",
    "DoProfileErrorDialogWorker",
    "DoPasswordDialogWorker"
  ],
  "ext-ms-win-msiltcfg-msi-l1-1-0.dll": [
    "MsiSetInternalUI"
  ],
  "ext-ms-win-networking-winipsec-l1-1-0.dll": [
    "QueryIPSecStatistics",
    "SPDApiBufferFree",
    "QueryIKEStatistics"
  ],
  "ext-ms-win-newdev-config-l1-1-0.dll": [
    "DiUninstallDevice"
  ],
  "ext-ms-win-ntdsa-activedirectoryserver-l1-1-0.dll": [
    "DsQueryDnsHostNameForNetLogon",
    "IsFullDCInSiteForNetlogon",
    "GetConfigurationName",
    "DsFreeDomainControllerInfoForNetLogon",
    "IsMangledRDNExternal",
    "DNSHostNameValueCheckForNetlogon",
    "DsGetDomainControllerInfoForNetLogon",
    "DsCanRODCHostNdncForNetLogon",
    "CrackSingleName",
    "IsRODCInSiteForNetlogon",
    "SamISameSite",
    "DsGetServersAndSitesForNetLogon",
    "DsFreeServersAndSitesForNetLogon",
    "GetConfigurationNamesList",
    "GetDnsRootAlias"
  ],
  "ext-ms-win-ntdsapi-activedirectoryclient-l1-1-0.dll": [
    "DsBindWithSpnExWWorker",
    "DsCrackNamesWWorker",
    "DsGetDomainControllerInfoWWorker",
    "DsMakePasswordCredentialsWWorker",
    "DsFreeNameResultWWorker",
    "DsUnBindWWorker",
    "DsFreeDomainControllerInfoWWorker",
    "DsFreePasswordCredentialsWorker"
  ],
  "ext-ms-win-ntos-ksecurity-l1-1-0.dll": [
    "AppContainerPrivilegesEnabledExt"
  ],
  "ext-ms-win-ntos-ksigningpolicy-l1-1-0.dll": [
    "SeQuerySigningPolicyExt"
  ],
  "ext-ms-win-ntos-tm-l1-1-0.dll": [
    "NtQueryInformationTransaction",
    "TmRecoverTransactionManager",
    "TmCommitTransaction",
    "TmRequestOutcomeEnlistment",
    "NtOpenTransaction",
    "NtCommitTransaction",
    "NtCreateTransaction",
    "NtGetNotificationResourceManager",
    "NtQueryInformationTransactionManager",
    "NtRollforwardTransactionManager",
    "TmCancelPropagationRequest",
    "TmCommitEnlistment",
    "NtEnumerateTransactionObject",
    "TmPrePrepareEnlistment",
    "NtSinglePhaseReject",
    "TmRollbackComplete",
    "TmInitSystemPhase2",
    "TmRollbackEnlistment",
    "TmPropagationComplete",
    "TmIsTransactionActive",
    "TmPrepareComplete",
    "TmReferenceEnlistmentKey",
    "NtPrePrepareEnlistment",
    "NtReadOnlyEnlistment",
    "NtSetInformationResourceManager",
    "TmCurrentTransaction",
    "NtPrepareEnlistment",
    "NtRenameTransactionManager",
    "TmRenameTransactionManager",
    "NtPropagationComplete",
    "TmFreezeTransactions",
    "NtOpenEnlistment",
    "TmEnableCallbacks",
    "TmRollbackTransaction",
    "NtPrepareComplete",
    "TmPrepareEnlistment",
    "TmGetTransactionId",
    "TmCommitComplete",
    "NtCreateEnlistment",
    "TmInitializeTransactionManager",
    "NtPropagationFailed",
    "NtRecoverResourceManager",
    "NtSetInformationTransactionManager",
    "TmRecoverEnlistment",
    "NtFreezeTransactions",
    "NtRollbackEnlistment",
    "NtThawTransactions",
    "TmSinglePhaseReject",
    "TmPrePrepareComplete",
    "TmIsKTMCommitCoordinator",
    "TmDereferenceEnlistmentKey",
    "NtRollbackTransaction",
    "TmShutdownSystem",
    "NtPrePrepareComplete",
    "NtSetInformationTransaction",
    "NtRegisterProtocolAddressInformation",
    "NtRollbackComplete",
    "NtCommitEnlistment",
    "NtSetInformationEnlistment",
    "TmReadOnlyEnlistment",
    "NtRecoverEnlistment",
    "NtCreateResourceManager",
    "NtQueryInformationEnlistment",
    "TmEndPropagationRequest",
    "TmInitSystem",
    "NtOpenResourceManager",
    "TmPropagationFailed",
    "NtOpenTransactionManager",
    "NtCommitComplete",
    "NtQueryInformationResourceManager",
    "TmRecoverResourceManager",
    "TmThawTransactions",
    "NtRecoverTransactionManager",
    "NtCreateTransactionManager",
    "TmCreateEnlistment",
    "TmSetCurrentTransaction"
  ],
  "ext-ms-win-ntuser-caret-l1-1-0.dll": [
    "SetCaretPos",
    "GetCaretBlinkTime",
    "CreateCaret",
    "HideCaret",
    "SetCaretBlinkTime",
    "DestroyCaret",
    "ShowCaret",
    "GetCaretPos"
  ],
  "ext-ms-win-ntuser-dc-access-ext-l1-1-0.dll": [
    "ReleaseDC",
    "GetDC"
  ],
  "ext-ms-win-ntuser-dialogbox-l1-1-0.dll": [
    "MessageBoxIndirectW",
    "SendDlgItemMessageA",
    "EndDialog",
    "DialogBoxIndirectParamW",
    "MessageBoxA",
    "SetDlgItemTextW",
    "DialogBoxIndirectParamA",
    "MessageBoxW",
    "CheckDlgButton",
    "GetDlgItem",
    "IsDlgButtonChecked",
    "CreateDialogIndirectParamW",
    "SetDlgItemTextA",
    "MessageBoxIndirectA",
    "SendDlgItemMessageW",
    "DialogBoxParamW",
    "CreateDialogParamW",
    "GetDlgItemTextW",
    "CreateDialogIndirectParamA",
    "CreateDialogParamA"
  ],
  "ext-ms-win-ntuser-draw-l1-1-0.dll": [
    "GetWindowDC",
    "ValidateRgn",
    "UpdateWindow",
    "GetWindowRgnEx",
    "GetUpdateRgn",
    "ValidateRect",
    "EndPaint",
    "InvalidateRect",
    "SetWindowRgn",
    "InvalidateRgn",
    "GetWindowRgnBox",
    "BeginPaint",
    "RedrawWindow",
    "GetUpdateRect"
  ],
  "ext-ms-win-ntuser-gui-l1-1-0.dll": [
    "SetCursor",
    "GetCursor",
    "LoadCursorW",
    "DestroyCursor",
    "LoadImageW",
    "DestroyIcon",
    "ScreenToClient",
    "DrawIconEx",
    "FillRect",
    "GetIconInfo",
    "GetCursorInfo",
    "LoadImageA",
    "LoadIconA",
    "MapWindowPoints",
    "LoadIconW",
    "ClientToScreen"
  ],
  "ext-ms-win-ntuser-keyboard-l1-1-0.dll": [
    "TranslateAcceleratorW",
    "GetKeyboardLayoutList",
    "GetKeyboardType",
    "GetLastInputInfo",
    "GetKeyboardState",
    "GetKeyboardLayoutNameW",
    "GetActiveWindow",
    "ActivateKeyboardLayout",
    "EnableWindow",
    "SetFocus",
    "GetKeyState",
    "VkKeyScanW",
    "LoadAcceleratorsW",
    "GetAsyncKeyState",
    "GetKeyboardLayout",
    "ToUnicodeEx",
    "MapVirtualKeyExW",
    "MapVirtualKeyW"
  ],
  "ext-ms-win-ntuser-menu-l1-1-0.dll": [
    "LoadMenuW",
    "DeleteMenu",
    "GetMenuItemID",
    "TrackPopupMenu",
    "GetMenuItemInfoW",
    "CreatePopupMenu",
    "InsertMenuW",
    "RemoveMenu",
    "GetMenuDefaultItem",
    "GetSubMenu",
    "EndMenu",
    "GetSystemMenu",
    "CheckMenuRadioItem",
    "EnableMenuItem",
    "GetMenuItemCount",
    "DestroyMenu",
    "CheckMenuItem",
    "GetMenuStringW",
    "AppendMenuW",
    "SetMenuItemInfoW"
  ],
  "ext-ms-win-ntuser-message-l1-1-0.dll": [
    "TranslateMessage",
    "PostQuitMessage",
    "PostMessageW",
    "SendMessageTimeoutW",
    "DispatchMessageW",
    "RegisterWindowMessageA",
    "PeekMessageA",
    "DispatchMessageA",
    "SendMessageW",
    "GetMessageW",
    "PostThreadMessageW",
    "SendMessageA",
    "PostMessageA",
    "RegisterWindowMessageW",
    "PeekMessageW",
    "CallMsgFilterW",
    "GetQueueStatus",
    "InSendMessage",
    "InSendMessageEx"
  ],
  "ext-ms-win-ntuser-misc-l1-1-0.dll": [
    "GetClipboardFormatNameW",
    "RegisterDeviceNotificationW",
    "KillTimer",
    "GetUserObjectSecurity",
    "RegisterClipboardFormatW",
    "SetCoalescableTimer",
    "ShutdownBlockReasonDestroy",
    "UnregisterDeviceNotification",
    "MessageBeep",
    "WaitForInputIdle",
    "ExitWindowsEx",
    "MonitorFromPoint",
    "SetTimer",
    "MonitorFromRect",
    "DrawTextW",
    "ShutdownBlockReasonCreate",
    "SetUserObjectSecurity",
    "GetGuiResources"
  ],
  "ext-ms-win-ntuser-mouse-l1-1-0.dll": [
    "ReleaseCapture",
    "GetCapture",
    "SetCapture",
    "GetDoubleClickTime",
    "TrackMouseEvent"
  ],
  "ext-ms-win-ntuser-powermanagement-l1-1-0.dll": [
    "UnregisterPowerSettingNotification",
    "RegisterPowerSettingNotification"
  ],
  "ext-ms-win-ntuser-private-l1-1-0.dll": [
    "RegisterLogonProcess",
    "SetWindowStationUser",
    "UpdatePerUserSystemParameters",
    "LoadRemoteFonts",
    "SwitchDesktopWithFade",
    "RecordShutdownReason",
    "SetThreadInputBlocked",
    "IsThreadMessageQueueAttached",
    "IsQueueAttached",
    "LoadLocalFonts"
  ],
  "ext-ms-win-ntuser-rectangle-ext-l1-1-0.dll": [
    "OffsetRect",
    "EqualRect",
    "IntersectRect",
    "SetRect",
    "InflateRect",
    "SetRectEmpty",
    "SubtractRect",
    "CopyRect",
    "IsRectEmpty",
    "PtInRect",
    "UnionRect"
  ],
  "ext-ms-win-ntuser-string-l1-1-0.dll": [
    "CheckDBCSEnabledExt",
    "MBToWCSExt"
  ],
  "ext-ms-win-ntuser-synch-l1-1-0.dll": [
    "MsgWaitForMultipleObjectsEx",
    "MsgWaitForMultipleObjects"
  ],
  "ext-ms-win-ntuser-sysparams-ext-l1-1-0.dll": [
    "GetSystemMetrics",
    "SystemParametersInfoW",
    "EnumDisplaySettingsW",
    "SystemParametersInfoA"
  ],
  "ext-ms-win-ntuser-window-l1-1-0.dll": [
    "GetShellWindow",
    "GetWindow",
    "GetWindowInfo",
    "DefWindowProcW",
    "GetParent",
    "SetParent",
    "UnhookWindowsHookEx",
    "CreateWindowExA",
    "SetWindowPos",
    "IsChild",
    "EnumWindows",
    "FindWindowW",
    "AllowSetForegroundWindow",
    "CallNextHookEx",
    "FindWindowA",
    "GetDesktopWindow",
    "GetWindowPlacement",
    "EnumThreadWindows",
    "GetWindowTextW",
    "GetClientRect",
    "GetWindowThreadProcessId",
    "AnimateWindow",
    "SetWindowTextW",
    "IsIconic",
    "EnumChildWindows",
    "GetWindowRect",
    "IsWindow",
    "ShowWindow",
    "CreateWindowExW",
    "SoundSentry",
    "RemovePropW",
    "BringWindowToTop",
    "GetPropW",
    "DefWindowProcA",
    "DestroyWindow",
    "SetForegroundWindow",
    "SetWindowsHookExW",
    "SetPropW",
    "GetForegroundWindow"
  ],
  "ext-ms-win-ntuser-windowclass-l1-1-0.dll": [
    "GetClassInfoW",
    "SetWindowLongA",
    "GetClassInfoExW",
    "GetClassNameA",
    "GetClassInfoA",
    "GetWindowLongW",
    "RegisterClassA",
    "GetWindowLongA",
    "RegisterClassW",
    "GetClassNameW",
    "UnregisterClassW",
    "SetWindowLongW",
    "UnregisterClassA",
    "GetClassInfoExA",
    "RegisterClassExW"
  ],
  "ext-ms-win-ntuser-windowstation-l1-1-0.dll": [
    "SetProcessWindowStation",
    "SwitchDesktop",
    "SetThreadDesktop",
    "CreateDesktopW",
    "CloseWindowStation",
    "GetThreadDesktop",
    "OpenWindowStationW",
    "GetProcessWindowStation",
    "CloseDesktop",
    "EnumDesktopWindows",
    "CreateWindowStationW",
    "GetUserObjectInformationW"
  ],
  "ext-ms-win-ole32-bindctx-l1-1-0.dll": [
    "CreateBindCtx"
  ],
  "ext-ms-win-ole32-clipboard-ie-l1-1-0.dll": [
    "OleGetClipboard",
    "OleIsCurrentClipboard",
    "OleFlushClipboard",
    "OleSetClipboard"
  ],
  "ext-ms-win-ole32-ie-ext-l1-1-0.dll": [
    "MkParseDisplayName",
    "GetClassFile",
    "StgOpenStorage",
    "OleLoadFromStream",
    "CreateDataCache",
    "MonikerRelativePathTo",
    "OleSaveToStream",
    "CreateGenericComposite",
    "CreateILockBytesOnHGlobal",
    "StgCreateDocfileOnILockBytes"
  ],
  "ext-ms-win-ole32-oleautomation-l1-1-0.dll": [
    "StdTypesRegisterServer",
    "STGMEDIUM_UserMarshalExt",
    "CLIPFORMAT_UserSizeExt",
    "OleLoadPictureExt",
    "CLIPFORMAT_UserMarshalExt",
    "OleIconToCursorExt",
    "HPALETTE_UserUnmarshalExt",
    "HWND_UserUnmarshalExt",
    "HPALETTE_UserSizeExt",
    "OleCreatePropertyFrameIndirectExt",
    "OleLoadPicturePathExt",
    "HWND_UserMarshalExt",
    "RegisterActiveObjectExt",
    "ReadStorageProperties",
    "CLIPFORMAT_UserUnmarshalExt",
    "STGMEDIUM_UserSizeExt",
    "RevokeActiveObjectExt",
    "STGMEDIUM_UserFreeExt",
    "OleCreateFontIndirectExt",
    "STGMEDIUM_UserUnmarshalExt",
    "WriteStorageProperties",
    "OleCreatePictureIndirectExt",
    "GetActiveObjectExt",
    "MonikerLoadTypeLib",
    "OleLoadPictureFileExt",
    "OleSavePictureFileExt",
    "SetOleautModule",
    "HWND_UserFreeExt",
    "OleTranslateColorExt",
    "HPALETTE_UserFreeExt",
    "StdTypesGetClassObject",
    "CLIPFORMAT_UserFreeExt",
    "HWND_UserSizeExt",
    "HPALETTE_UserMarshalExt"
  ],
  "ext-ms-win-printer-winspool-l1-1-0.dll": [
    "GetPrinterW",
    "ClosePrinter",
    "OpenPrinterW",
    "SetPrinterW"
  ],
  "ext-ms-win-profile-profsvc-l1-1-0.dll": [
    "StartRoamingClassFactories",
    "RefreshSuspendFolderPolicyAndUploadTaskConfig",
    "WaitForNetworkForRoamingProfile",
    "InitializeSuspendFolderPolicyAndUploadTaskConfig",
    "CreateRoamingProviderInstance",
    "StopRoamingClassFactories",
    "ConnectToRoamingVhdProfile"
  ],
  "ext-ms-win-profile-userenv-l1-1-0.dll": [
    "DeleteGroupWorker",
    "CreateDirectoryJunctionsForSystemWorker",
    "UpdateAppContainerProfileWorker",
    "RsopSetPolicySettingStatusWorker",
    "CreateAppContainerProfileWorker",
    "DeleteAppContainerProfileWorker",
    "ProcessGroupPolicyCompletedWorker",
    "DeriveAppContainerSidFromAppContainerNameWorker",
    "GetAppContainerFolderPathWorker",
    "DeleteLinkFileWorker",
    "ProcessGroupPolicyCompletedExWorker",
    "GetAppContainerRegistryLocationWorker",
    "LookupAppContainerDisplayNameWorker",
    "RsopFileAccessCheckWorker",
    "CreateDirectoryJunctionsForUserProfileWorker",
    "CreateGroupExWorker",
    "RsopAccessCheckByTypeWorker",
    "RsopResetPolicySettingStatusWorker",
    "CreateLinkFileExWorker"
  ],
  "ext-ms-win-ras-rasapi32-l1-1-0.dll": [
    "RasQuerySharedConnection",
    "RasGetCredentialsW",
    "RasDialW",
    "RasGetConnectionStatistics",
    "RasAutoDialSharedConnection",
    "RasSetEntryDialParamsW",
    "RasEnumConnectionsW",
    "RasGetProjectionInfoA",
    "RasGetAutodialAddressW",
    "RasHangUpW",
    "RasGetEntryDialParamsW",
    "RasGetConnectStatusW",
    "RasGetEntryHrasconnW",
    "RasGetEntryPropertiesW",
    "RasQuerySharedAutoDial",
    "RasEnumEntriesW",
    "RasSetAutodialAddressW",
    "RasConnectionNotificationW",
    "RasGetAutodialAddressA"
  ],
  "ext-ms-win-ras-rasdlg-l1-1-0.dll": [
    "RasDialDlgW"
  ],
  "ext-ms-win-ras-rasman-l1-1-0.dll": [
    "RasReferenceRasman",
    "RasInitialize"
  ],
  "ext-ms-win-ras-tapi32-l1-1-0.dll": [
    "lineInitialize",
    "lineTranslateAddress"
  ],
  "ext-ms-win-rometadata-dispenser-l1-1-0.dll": [
    "MetaDataGetDispenser"
  ],
  "ext-ms-win-samsrv-accountstore-l1-1-0.dll": [
    "SamrDeleteUser",
    "SamrLookupNamesInDomain2",
    "SamILookupNamesBySid",
    "SamIIsSetupInProgress",
    "SamIAccountRestrictions",
    "SamrAddMemberToAlias",
    "SamrQuerySecurityObject",
    "SamITransformClaims",
    "SamrEnumerateUsersInDomain2",
    "SamIScorePassword",
    "SamISetPasswordForeignUser2",
    "SamIFreeLookupSidsInfo",
    "SamIUninitialize",
    "SamIMixedDomain2",
    "SamIDoFSMORoleChange",
    "SamIGetResourceGroupMembershipsTransitive",
    "SamIFreeClaimsBlob",
    "SamrOpenUser",
    "SamIFreeSidAndAttributesList",
    "SamIFree_SAMPR_USER_INFO_BUFFER",
    "SamIMixedDomain",
    "SamrSetInformationUser",
    "SamIFree_SAMPR_ULONG_ARRAY",
    "SamIGetUserLogonInformation2",
    "SamIQueryServerRole",
    "SamIQueryCapabilities",
    "SamIFree_SAMPR_RETURNED_USTRING_ARRAY",
    "SamrRidToSid",
    "SamIUpdateLogonStatistics",
    "SamrOpenDomain",
    "SamISetAuditingInformation",
    "SamIFreeRealmList",
    "SamIFreeLookupNamesInfo",
    "SamILookupSidsByName",
    "SamIFreeVoid",
    "SamrLookupIdsInDomain",
    "SamIFree_SAMPR_GET_GROUPS_BUFFER",
    "SamIValidateAccountName",
    "SamIGetAliasMembership",
    "SamrRemoveMemberFromAlias",
    "SamIFree_UserInternal6Information",
    "SamIFreeSidArray",
    "SamIFree_SAMPR_ENUMERATION_BUFFER",
    "SamrQueryInformationUser",
    "SamrCloseHandle",
    "SamIFreeSecurityAttributesInfo",
    "SampDsIsRunning",
    "SamIConnect",
    "SamIDecodeClaimsBlob",
    "SamIInitialize",
    "SamIConvertSecurityAttributesToClaimsBlob",
    "SamIGetUserLogonInformation",
    "SamIQueryRealmList",
    "SamISetPasswordForeignUser3",
    "SamrOpenAlias",
    "SamrValidatePassword",
    "SamIIsExtendedSidMode",
    "SamrCreateUserInDomain",
    "SamrGetGroupsForUser"
  ],
  "ext-ms-win-scesrv-server-l1-1-0.dll": [
    "ScesrvInitializeServer",
    "ScesrvTerminateServer"
  ],
  "ext-ms-win-secur32-translatename-l1-1-0.dll": [
    "SecpTranslateName",
    "SecpFreeMemory",
    "SecpTranslateNameEx"
  ],
  "ext-ms-win-security-credui-l1-1-0.dll": [
    "CredUIPromptForWindowsCredentialsW",
    "CredUnPackAuthenticationBufferW",
    "SspiIsPromptingNeeded",
    "CredUIConfirmCredentialsW",
    "SspiPromptForCredentialsW",
    "CredPackAuthenticationBufferW",
    "CredUIConfirmCredentialsA",
    "CredUIPromptForCredentialsW",
    "CredUICmdLinePromptForCredentialsW"
  ],
  "ext-ms-win-security-cryptui-l1-1-0.dll": [
    "CryptUIDlgSelectCertificateFromStore",
    "CryptUIDlgSelectCertificateA",
    "CryptUIDlgViewCertificateW"
  ],
  "ext-ms-win-security-kerberos-l1-1-0.dll": [
    "Kerberos"
  ],
  "ext-ms-win-security-vaultcli-l1-1-0.dll": [
    "VaultOpenVault",
    "VaultGetItem",
    "VaultAddItem",
    "VaultCloseVault",
    "VaultFree",
    "VaultRemoveItem",
    "VaultGetItemType",
    "VaultCreateItemType"
  ],
  "ext-ms-win-session-userinit-l1-1-0.dll": [
    "PerformXForestLogonCheck",
    "IsTSAppCompatOn",
    "CreateExplorerSessionKey",
    "ImmWorker",
    "ProcesRemoteSessionInitialCommand",
    "SetShellDesktopSwitchEvent",
    "IsSubDesktopSession",
    "SetupHotKeyForKeyboardLayout",
    "DisplayMessageAndExitWindows",
    "LoadRemoteFontsAndInitMiscWorker",
    "ProcessTermSrvIniFiles"
  ],
  "ext-ms-win-session-wininit-l1-1-0.dll": [
    "UIStartupWorker",
    "WinStationSystemShutdownStartedWorker",
    "StartLoadingFontsWorker",
    "UnregisterSession0ViewerWindowHookDll",
    "WaitForWinstationShutdown",
    "GetLoggedOnUserCount",
    "PrimaryTerminalAndHookWorker"
  ],
  "ext-ms-win-session-winsta-l1-1-0.dll": [
    "WinStationSendWindowMessage",
    "WinStationQueryInformationW",
    "WinStationVirtualOpenEx",
    "WinStationFreePropertyValue",
    "WinStationEnumerateW",
    "WinStationGetUserProfile",
    "WinStationVerify",
    "WinStationDisconnect",
    "WinStationNegotiateSession",
    "WinStationReportUIResult",
    "WinStationNameFromLogonIdW",
    "WinStationQueryEnforcementCore",
    "_WinStationWaitForConnect",
    "WinStationIsSessionRemoteable",
    "WinStationFreeMemory",
    "WinStationIsSessionPermitted",
    "WinStationGetUserCredentials",
    "WinStationFreeUserCredentials",
    "WinStationGetConnectionProperty"
  ],
  "ext-ms-win-session-wtsapi32-l1-1-0.dll": [
    "WTSVirtualChannelQuery",
    "WTSEnumerateSessionsW",
    "WTSVirtualChannelClose",
    "WTSQuerySessionInformationW",
    "WTSVirtualChannelOpen",
    "WTSRegisterSessionNotification",
    "WTSDisconnectSession",
    "WTSQueryUserToken",
    "WTSVirtualChannelOpenEx",
    "WTSUnRegisterSessionNotification",
    "WTSFreeMemory",
    "WTSLogoffSession"
  ],
  "ext-ms-win-setupApi-cfgmgr32local-l1-1-0.dll": [
    "Local_CM_Delete_Driver_Package_Worker",
    "Local_CM_Install_DevNode_Worker",
    "Local_CM_Add_Driver_Package_Worker"
  ],
  "ext-ms-win-setupApi-cfgmgr32remote-l1-1-0.dll": [
    "Remote_CM_Get_DevNode_Status",
    "Remote_CM_Create_DevNode",
    "Remote_CM_Get_Class_Property",
    "Remote_CM_Set_HW_Prof_Flags",
    "Remote_CM_Get_First_Log_Conf",
    "Remote_CMP_WaitServicesAvailable",
    "Remote_CM_Connect_Machine_Worker",
    "Remote_CM_Get_Next_Res_Des",
    "Remote_CM_Delete_DevNode_Key",
    "Remote_CM_Get_Child",
    "Remote_CM_Get_Device_Interface_Property_Keys",
    "Remote_CM_Set_DevNode_Problem",
    "Remote_CM_Query_Arbitrator_Free_Size",
    "Remote_CM_Query_And_Remove_SubTree",
    "Remote_CM_Setup_DevNode",
    "Remote_CM_Get_Hardware_Profile_Info",
    "Remote_CM_Run_Detection",
    "Remote_CM_Register_Device_Driver",
    "Remote_CM_Get_Device_ID_List",
    "Remote_CM_Unregister_Device_Interface",
    "Remote_CM_Add_ID",
    "Remote_CM_Get_Class_Name",
    "Remote_CM_Enumerate_Enumerators",
    "Remote_CM_Is_Version_Available",
    "Remote_CM_Add_Empty_Log_Conf",
    "Remote_CM_Set_Device_Interface_Property",
    "Remote_CM_Get_Device_Interface_List_Size",
    "Remote_CM_Get_Device_Interface_List",
    "Remote_CM_Get_HW_Prof_Flags",
    "Remote_CM_Get_Parent",
    "Remote_CM_Install_DevNode",
    "Remote_CM_Locate_DevNode_Worker",
    "Remote_CM_Query_Arbitrator_Free_Data",
    "Remote_CM_Free_Log_Conf",
    "Remote_CM_Get_DevNode_Registry_Property",
    "Remote_CM_Reenumerate_DevNode",
    "Remote_CM_Get_Sibling",
    "Remote_CM_Request_Eject_PC",
    "Remote_CM_Set_Class_Property",
    "Remote_CM_Open_Device_Interface_Key",
    "Remote_CM_Get_Version",
    "Remote_CM_Get_Global_State",
    "Remote_CMP_GetServerSideDeviceInstallFlags",
    "Remote_CM_Is_Dock_Station_Present",
    "Remote_CM_Set_DevNode_Registry_Property",
    "Remote_CM_Get_Next_Log_Conf",
    "Remote_CM_Delete_Class_Key",
    "Remote_CM_Disable_DevNode",
    "Remote_CM_Get_DevNode_Custom_Property",
    "Remote_CM_Get_Log_Conf_Priority",
    "Remote_CM_Get_Res_Des_Data",
    "Remote_CM_Enable_DevNode",
    "Remote_CM_Enumerate_Classes",
    "Remote_CM_Get_Class_Registry_Property",
    "Remote_CM_Set_Class_Registry_Property",
    "Remote_CM_Get_Res_Des_Data_Size",
    "Remote_CM_Open_DevNode_Key",
    "Remote_CM_Get_Device_Interface_Property",
    "Remote_CM_Get_DevNode_Property",
    "Remote_CM_Open_Class_Key",
    "Remote_CM_Disconnect_Machine_Worker",
    "Remote_CM_Set_HW_Prof",
    "Remote_CM_Modify_Res_Des",
    "Remote_CM_Add_Res_Des",
    "Remote_CM_Get_Class_Property_Keys",
    "Remote_CM_Set_DevNode_Property",
    "Remote_CM_Delete_Device_Interface_Key",
    "Remote_CM_Get_Device_ID_List_Size",
    "Remote_CM_Request_Device_Eject",
    "Remote_CM_Uninstall_DevNode",
    "Remote_CM_Query_Resource_Conflict_List_Worker",
    "Remote_CM_Register_Device_Interface",
    "Remote_CM_Free_Res_Des",
    "Remote_CM_Get_Depth",
    "Remote_CM_Get_DevNode_Property_Keys",
    "Remote_CM_Get_Device_Interface_Alias"
  ],
  "ext-ms-win-setupApi-logging-l1-1-0.dll": [
    "SetupLogErrorW",
    "SetupOpenLog",
    "SetupCloseLog"
  ],
  "ext-ms-win-setupapi-classinstallers-l1-1-0.dll": [
    "SetupDiGetDevicePropertyW",
    "SetupDiEnumDeviceInfo",
    "SetupDiDestroyDeviceInfoList",
    "SetupDiGetDeviceInstallParamsW",
    "SetupDiGetDeviceInstanceIdW",
    "SetupDiSetClassInstallParamsA",
    "SetupDiSetClassInstallParamsW",
    "SetupDiCallClassInstaller",
    "SetupDiGetDeviceInstallParamsA",
    "SetupDiGetClassDevsW"
  ],
  "ext-ms-win-setupapi-inf-l1-1-0.dll": [
    "SetupGetLineTextW",
    "SetupFindFirstLineW",
    "SetupCloseInfFile",
    "SetupOpenInfFileW",
    "SetupFindNextLine"
  ],
  "ext-ms-win-shell-propsys-l1-1-0.dll": [
    "PSCreateAdapterFromPropertyStore",
    "PSCreateMemoryPropertyStore",
    "PropVariantToBSTR"
  ],
  "ext-ms-win-shell-shell32-l1-1-0.dll": [
    "SHChangeNotify",
    "ShellExecuteW"
  ],
  "ext-ms-win-shell-shlwapi-l1-1-0.dll": [
    "AssocQueryStringW",
    "PathIsDirectoryW",
    "ShellMessageBoxA"
  ],
  "ext-ms-win-shell32-shellcom-l1-1-0.dll": [
    "SHCoCreateInstanceWorker"
  ],
  "ext-ms-win-shell32-shellfolders-l1-1-0.dll": [
    "SHGetSpecialFolderPathWWorker",
    "SHCreateDirectoryExWWorker",
    "SHGetDesktopFolderWorker",
    "SHGetSpecialFolderPathAWorker",
    "SHGetFileInfoWWorker",
    "SHGetFolderLocationWorker",
    "SHGetFolderPathAWorker",
    "SHGetKnownFolderPathWorker",
    "PathIsExeWorker",
    "SHGetFolderPathWWorker",
    "PathCleanupSpecWorker",
    "SHGetFolderPathAndSubDirWWorker",
    "SHGetInstanceExplorerWorker",
    "SHSetKnownFolderPathWorker"
  ],
  "ext-ms-win-smbshare-sscore-l1-1-0.dll": [
    "SsCoreExtMiOperationOptionsSetResourceUriPrefix",
    "SsCoreExtMiApplicationNewOperationOptions",
    "SsCoreExtMiApplicationNewParameterSet",
    "SsCoreExtMiInstanceDelete",
    "SsCoreExtMiApplicationNewSession",
    "SsCoreExtMiApplicationInitialize",
    "SsCoreExtMiInstanceAddElement",
    "SsCoreExtMiOperationGetInstance",
    "SsCoreExtMiApplicationClose",
    "SsCoreExtMiSessionInvoke",
    "SsCoreExtMiOperationOptionsDelete",
    "SsCoreExtMiOperationClose",
    "SsCoreExtMiSessionClose"
  ],
  "ext-ms-win-spinf-inf-l1-1-0.dll": [
    "SpInfIsIndirectString",
    "SpInfGetIndirectString"
  ],
  "ext-ms-win-sxs-oleautomation-l1-1-0.dll": [
    "SxsOleAut32RedirectTypeLibrary",
    "SxsOleAut32MapReferenceClsidToConfiguredClsid",
    "SxsOleAut32MapIIDToProxyStubCLSID",
    "SxsOleAut32MapConfiguredClsidToReferenceClsid",
    "SxsOleAut32MapIIDToTLBPath"
  ],
  "ext-ms-win-umpoext-umpo-l1-1-0.dll": [
    "ExtensionInit"
  ],
  "ext-ms-win-webio-pal-l1-1-0.dll": [
    "WebPalFreeSocketCtx",
    "WebPalCreateDnsCacheCtx",
    "WebPalInitializeTwTimer",
    "WebPalCreateSocketCtx",
    "WebPalSetTwTimer",
    "WebPalCancelTwTimer",
    "WebPalTerminateTwTimer",
    "WebPalFreeDnsCacheCtx",
    "WebPalCanScavengeDnsCache",
    "WebPalIsImplemented"
  ],
  "ext-ms-win-wer-reporting-l1-1-0.dll": [
    "WerReportAddDump",
    "WerReportCreate",
    "WerReportCloseHandle",
    "WerReportSubmit",
    "WerReportSetParameter"
  ],
  "ext-ms-win-wevtapi-eventlog-l1-1-0.dll": [
    "EvtOpenChannelConfig",
    "EvtGetChannelConfigProperty",
    "EvtCreateRenderContext",
    "EvtSubscribe",
    "EvtClose",
    "EvtRender"
  ],
  "ext-ms-win-winhttp-pal-l1-1-0.dll": [
    "WinHttpPalIsImplemented",
    "WinHttpPalGetProxyForCurrentInterface",
    "WinHttpPalCreateCmSessionReference",
    "WinHttpPalCancelRequest",
    "WinHttpPalCreateRequestCtx",
    "WinHttpPalDllInit",
    "WinHttpPalGetProxyCreds",
    "WinHttpPalDllUnload",
    "WinHttpPalAcquireNextInterfaceAsync",
    "WinHttpPalAcquireNextInterface",
    "WinHttpPalFreeProxyInfo",
    "WinHttpPalFreeRequestCtx",
    "WinHttpPalOnSendRequestComplete"
  ],
  "ext-ms-win-wininet-pal-l1-1-0.dll": [
    "WinInetPalImplemented",
    "WinInetPalOnSendRequest",
    "WinInetPalFreeResolveHostFsmCtx",
    "WinInetPalInternetGetConnectedStateExW",
    "WinInetPalCreateICSocketContext",
    "WinInetPalOnHttpSendRequestFsmComplete",
    "WinInetPalCreateRequestContext",
    "WinInetPalCreateCServerInfoContext",
    "WinInetPalCreateICSocketContext2",
    "WinInetPalGetProxySettings",
    "WinInetPalFilterServerInfo",
    "WinInetPalFreeServerInfoCtx",
    "WinInetPalOnGlobalDataTerminate",
    "WinInetPalFreeBackgroundConnectionFsmCtx",
    "WinInetPalOnInternetSetOptionA",
    "WinInetPalSelectThreadOverrideTimeout",
    "WinInetPalFreeRequestCtx",
    "WinInetPalCloneRequestContext",
    "WinInetPalTrackKeepAliveSocket",
    "WinInetPalIsPerProcessOption",
    "WinInetPalGetAppContainerRegistryLocation",
    "WinInetPalFreeGetConnectionFsmCtx",
    "WinInetPalOnInternetCloseHandle",
    "WinInetPalCreateGetConnectionFsmContext",
    "WinInetPalOnInternetQueryOptionA",
    "WinInetPalPurgeKeepAliveSockets",
    "WinInetPalCanPurgeKeepAliveSocket",
    "WinInetPalTransferKeepAliveSocket",
    "WinInetPalOnGlobalDataInitialize",
    "WinInetPalCreateBackgroundConnectionFsmContext",
    "WinInetPalRegisterKeepAlivePurgeCallback",
    "WinInetPalFreeProxySettings",
    "WinInetPalOnResolveHostFsm",
    "WinInetPalCreateServerInfoLookupContext",
    "WinInetPalFreeSocketCtx",
    "WinInetPalCreateResolveHostFsmContext"
  ],
  "ext-ms-win-wlan-grouppolicy-l1-1-0.dll": [
    "WLGPAInit",
    "WLGPADeInit"
  ],
  "ext-ms-win-wlan-onexui-l1-1-0.dll": [
    "OneXShowUIFromEAPCreds",
    "OneXShowUI"
  ],
  "ext-ms-win-wlan-scard-l1-1-0.dll": [
    "SCardDisconnect",
    "SCardGetStatusChangeW",
    "SCardListCardsW",
    "SCardGetCardTypeProviderNameW",
    "SCardReleaseContext",
    "SCardCancel",
    "SCardListReadersW",
    "SCardFreeMemory",
    "SCardConnectW",
    "SCardEstablishContext"
  ],
  "ext-ms-win-wsclient-devlicense-l1-1-0.dll": [
    "CheckDeveloperLicense"
  ],
  "ext-ms-win-wwan-wwapi-l1-1-0.dll": [
    "WwanQueryInterface",
    "WwanFreeMemory",
    "WwanCloseHandle",
    "WwanRegisterNotification",
    "WwanOpenHandle",
    "WwanAuthChallenge"
  ],
  "FDResPub.dll": [
    "ServiceMain",
    "FDResPub_MainHosted",
    "SvchostPushServiceGlobals"
  ],
  "FWPUCLNT.DLL": [
    "IPsecSaContextAddOutboundAndTrackConnection",
    "FwpmProcessNameResolutionEvent0",
    "FwpmFreeMemory0",
    "FwpmProviderSubscriptionsGet0",
    "IPsecDospGetStatistics0",
    "IkeextSaDbSetSecurityInfo0",
    "FwpmProviderContextEnum2",
    "FwpmProviderDeleteByKey0",
    "WSASetSocketPeerTargetName",
    "FwpmTransactionAbort0",
    "FwpmConnectionEnum0",
    "IPsecKeyDictationCheck0",
    "FwpmEventProviderFireNetEvent0",
    "FwpmProviderSetSecurityInfoByKey0",
    "FwpmProviderContextAdd2",
    "FwpmNetEventEnum0",
    "FwpmProviderCreateEnumHandle0",
    "IPsecSaContextEnum0",
    "IPsecSaContextDeleteById0",
    "IkeextSaGetById0",
    "IPsecSaDbSetSecurityInfo0",
    "IPsecSaContextCreate0",
    "FwpmProviderContextGetByKey1",
    "FwpmConnectionSetSecurityInfo0",
    "IPsecKeyManagersGet0",
    "FwpmProviderContextSubscriptionsGet0",
    "FwpmConnectionCreateEnumHandle0",
    "IkeextGetStatistics0",
    "FwpmIPsecTunnelAdd2",
    "IPsecSaContextCreate1",
    "FwpiExpandCriteria0",
    "FwpmProviderDestroyEnumHandle0",
    "FwpmProviderGetByKey0",
    "FwpmFilterGetByKey0",
    "FwpmProviderContextGetById1",
    "FwpsAleGetPortStatus0",
    "IPsecSaContextEnum1",
    "FwpmEventProviderCreate0",
    "FwpmTransactionCommit0",
    "FwpmCalloutDeleteByKey0",
    "IPsecKeyManagerSetSecurityInfoByKey0",
    "IPsecKeyModuleUpdateAcquire0",
    "FwpmProviderGetSecurityInfoByKey0",
    "IPsecSaContextSubscriptionsGet0",
    "FwpmSessionDestroyEnumHandle0",
    "FwpmFilterSetSecurityInfoByKey0",
    "FwpmIPsecTunnelAdd0",
    "FwpmProviderContextDestroyEnumHandle0",
    "FwpsAleEndpointGetById0",
    "IPsecGetStatistics0",
    "IPsecSaContextAddOutbound0",
    "FwpmCalloutCreateEnumHandle0",
    "IPsecKeyModuleDelete0",
    "FwpmEngineOpen0",
    "IkeextSaUpdatePreferredAddressesByTunnelId0",
    "IPsecSaCreateEnumHandle0",
    "FwpmProviderContextCreateEnumHandle0",
    "IPsecSaContextGetById0",
    "FwpsLayerReleaseInProcReplica0",
    "IPsecKeyNotification0",
    "FwpmSubLayerSubscribeChanges0",
    "FwpmProviderContextDeleteByKey0",
    "FwpmSessionEnum0",
    "FwpsAleEndpointCreateEnumHandle0",
    "IPsecSaDbGetSecurityInfo0",
    "FwpmProviderEnum0",
    "FwpmEngineClose0",
    "FwpmvSwitchEventsSetSecurityInfo0",
    "FwpmProviderContextSetSecurityInfoByKey0",
    "FwpsAleEndpointEnum0",
    "WSAQuerySocketSecurity",
    "FwpmProviderContextEnum1",
    "IkeextSaDeleteById0",
    "FwpmSystemPortsGet0",
    "FwpmLayerGetByKey0",
    "FwpmNetEventDestroyEnumHandle0",
    "FwpmConnectionDestroyEnumHandle0",
    "IPsecSaContextUnsubscribe0",
    "FwpmFilterUnsubscribeChanges0",
    "FwpmEventProviderDestroy0",
    "FwpsAleExplicitCredentialsQuery0",
    "FwpmFilterGetById0",
    "FwpmConnectionGetById0",
    "FwpmCalloutDestroyEnumHandle0",
    "IkeextSaDbGetSecurityInfo0",
    "IPsecSaContextAddOutbound1",
    "IPsecKeyManagerGetSecurityInfoByKey0",
    "FwpmConnectionSubscribe0",
    "FwpmConnectionGetSecurityInfo0",
    "FwpmProviderContextSubscribeChanges0",
    "FwpmProviderContextGetSecurityInfoByKey0",
    "FwpmFilterSubscribeChanges0",
    "FwpmCalloutAdd0",
    "FwpmSubLayerSubscriptionsGet0",
    "FwpmFilterDeleteById0",
    "IPsecSaContextCreateEnumHandle0",
    "FwpmSubLayerDestroyEnumHandle0",
    "FwpmProviderContextDeleteById0",
    "FwpmFilterCreateEnumHandle0",
    "IPsecDospStateDestroyEnumHandle0",
    "NamespaceCallout",
    "WSASetSocketSecurity",
    "FwpmLayerEnum0",
    "FwpmNetEventsSetSecurityInfo0",
    "IPsecSaContextUpdate0",
    "FwpmLayerGetById0",
    "FwpmProviderAdd0",
    "IkeextSetConfigParameters0",
    "FwpmSystemPortsUnsubscribe0",
    "FwpmProviderContextGetByKey2",
    "FwpmProviderContextGetById0",
    "FwpmCalloutSetSecurityInfoByKey0",
    "FwpmCalloutUnsubscribeChanges0",
    "FwpmLayerSetSecurityInfoByKey0",
    "FwpmTransactionBegin0",
    "FwpmEngineSetOption0",
    "IPsecSaContextGetSpi1",
    "IkeextSaUpdateAdditionalAddressesByTunnelId0",
    "IkeextSaCreateEnumHandle0",
    "FwpsGetInProcReplicaOffset0",
    "FwpmCalloutSubscriptionsGet0",
    "FwpmFilterGetSecurityInfoByKey0",
    "FwpmGetSidFromOnlineId0",
    "FwpmLayerGetSecurityInfoByKey0",
    "IPsecKeyModuleAdd0",
    "IkeextSaGetById2",
    "IPsecSaContextSetSpi0",
    "FwpmGetAppIdFromFileName0",
    "IPsecSaContextAddInboundAndTrackConnection",
    "FwpmLayerDestroyEnumHandle0",
    "IPsecSaContextAddInbound1",
    "FwpmEngineGetSecurityInfo0",
    "FwpmFilterAdd0",
    "FwpmProviderContextUnsubscribeChanges0",
    "FwpmProviderContextGetById2",
    "IPsecSaContextExpire0",
    "FwpsClassifyUser0",
    "FwpmFilterSubscriptionsGet0",
    "IPsecKeyManagerUnregisterAndDelete0",
    "IPsecSaInitiateAsync0",
    "FwpmProviderUnsubscribeChanges0",
    "IPsecGetStatistics1",
    "IkeextSaEnum1",
    "IPsecDospStateEnum0",
    "IkeextSaGetById1",
    "GetUnifiedTraceHandle",
    "IPsecSaContextSubscribe0",
    "IPsecKeyManagerAddAndRegister0",
    "FwpmTraceRestoreDefaults0",
    "IPsecSaContextAddInbound0",
    "IPsecDospSetSecurityInfo0",
    "FwpmIPsecTunnelAdd1",
    "FwpmSystemPortsSubscribe0",
    "IPsecSaEnum0",
    "FwpmSubLayerDeleteByKey0",
    "FwpmSubLayerAdd0",
    "IPsecGetKeyFromDictator0",
    "IPsecSaEnum1",
    "FwpmProviderContextAdd1",
    "FwpmIPsecTunnelDeleteByKey0",
    "FwpmSubLayerCreateEnumHandle0",
    "FwpmNetEventsGetSecurityInfo0",
    "FwpmSubLayerGetSecurityInfoByKey0",
    "FwpmNetEventUnsubscribe0",
    "WSAImpersonateSocketPeer",
    "FwpmvSwitchEventSubscribe0",
    "FwpmProviderContextEnum0",
    "FwpmCalloutGetById0",
    "IkeextSaEnum2",
    "FwpmNetEventCreateEnumHandle0",
    "FwpmProviderContextAdd0",
    "IPsecDospStateCreateEnumHandle0",
    "FwpmCalloutDeleteById0",
    "FwpmFilterDestroyEnumHandle0",
    "FwpmSubLayerUnsubscribeChanges0",
    "IkeextSaDestroyEnumHandle0",
    "FwpiFreeCriteria0",
    "FwpsLayerCreateInProcReplica0",
    "FwpmvSwitchEventsGetSecurityInfo0",
    "FwpmFilterDeleteByKey0",
    "FwpsAleEndpointDestroyEnumHandle0",
    "IkeextGetStatistics1",
    "FwpmIPsecTunnelAddConditions0",
    "FwpmNetEventSubscribe0",
    "FwpsQueryIPsecOffloadDone0",
    "WSADeleteSocketPeerTargetName",
    "FwpmFilterEnum0",
    "FwpmEventProviderIsNetEventTypeEnabled0",
    "FwpmProviderContextGetByKey0",
    "IPsecSaContextGetSpi0",
    "FwpmSessionCreateEnumHandle0",
    "FwpmSubLayerGetByKey0",
    "IkeextSaEnum0",
    "FwpsQueryIPsecDosFWUsed0",
    "FwpmCalloutGetByKey0",
    "IkeextGetConfigParameters0",
    "FwpsAleEndpointSetSecurityInfo0",
    "FwpsAleEndpointGetSecurityInfo0",
    "FwpmSubLayerEnum0",
    "FwpmvSwitchEventUnsubscribe0",
    "IPsecDospGetSecurityInfo0",
    "FwpmCalloutEnum0",
    "FwpmSubLayerSetSecurityInfoByKey0",
    "FwpmConnectionUnsubscribe0",
    "FwpmDiagnoseNetFailure0",
    "FwpmEngineGetOption0",
    "FwpmLayerCreateEnumHandle0",
    "FwpmCalloutGetSecurityInfoByKey0",
    "IPsecSaDestroyEnumHandle0",
    "WSARevertImpersonation",
    "FwpmNetEventSubscribe1",
    "FwpmNetEventSubscriptionsGet0",
    "FwpsFreeMemory0",
    "FwpsOpenToken0",
    "IPsecSaContextDestroyEnumHandle0",
    "FwpmCalloutSubscribeChanges0",
    "FwpmNetEventEnum1",
    "FwpmNetEventEnum2",
    "FwpmProviderSubscribeChanges0",
    "FwpmEngineSetSecurityInfo0",
    "IPsecSaContextGetById1",
    "FwpmNetEventsLost0"
  ],
  "FXSAPI.dll": [
    "FaxRegisterServiceProviderExA",
    "FaxFreeSenderInformation",
    "FaxGetGeneralConfiguration",
    "FaxSetPortW",
    "FaxSendDocumentForBroadcastW",
    "FaxConnectFaxServerA",
    "FaxEnumMessagesA",
    "FaxGetSenderInfoA",
    "FaxSendDocumentForBroadcastA",
    "FaxGetConfigWizardUsed",
    "FaxStartPrintJobA",
    "FaxSendDocumentExW",
    "FaxEnumGlobalRoutingInfoA",
    "FaxAddOutboundGroupA",
    "FaxSetExtensionDataA",
    "FaxSetExtensionDataW",
    "FXSAPIFree",
    "FaxAccessCheckEx2",
    "FaxEnumPortsW",
    "FaxSetJobW",
    "FaxCompleteJobParamsW",
    "FaxSetArchiveConfigurationW",
    "FaxGetArchiveConfigurationW",
    "FaxRemoveMessage",
    "FaxEnumJobsExA",
    "FXSAPIInitialize",
    "FaxRegisterForServerEvents",
    "FaxSetActivityLoggingConfigurationA",
    "FaxAbort",
    "FaxGetCountryListA",
    "FaxReAssignMessage",
    "FaxEndMessagesEnum",
    "FaxPrintCoverPageA",
    "FaxSetLoggingCategoriesA",
    "FaxSetOutboundRuleA",
    "FaxSetDeviceOrderInGroupA",
    "FaxCompleteJobParamsA",
    "FaxRemoveOutboundGroupA",
    "FaxStartMessagesEnumEx",
    "FaxGetOutboxConfiguration",
    "FaxCheckValidFaxFolder",
    "FaxGetVersion",
    "FaxGetLoggingCategoriesW",
    "FaxSetReceiptsConfigurationW",
    "FaxRegisterForServerEventsEx",
    "FaxAnswerCall",
    "FaxEnableRoutingMethodA",
    "FaxEnumerateProvidersA",
    "FaxEnumMessagesEx",
    "FaxGetPortExW",
    "FaxRelease",
    "FaxSendDocumentEx2",
    "FaxUnregisterRoutingExtensionA",
    "FaxEnumRoutingMethodsW",
    "FaxGetQueueStates",
    "FaxAccessCheck",
    "FaxGetRecipientInfoA",
    "FaxSendDocumentExA",
    "FaxGetPortExA",
    "FaxGetSecurityEx",
    "FaxStartPrintJob2W",
    "FaxSetArchiveConfigurationA",
    "FaxGetPortA",
    "FaxEnumJobsEx2",
    "FaxOpenPort",
    "FaxAddOutboundRuleW",
    "FaxGetJobExW",
    "FaxAddOutboundRuleA",
    "FaxSetPortA",
    "FaxGetRoutingInfoA",
    "FaxEnumOutboundGroupsW",
    "FaxGetConfigOption",
    "FaxGetMessageTiffA",
    "FaxSetGlobalRoutingInfoW",
    "FaxClose",
    "FaxGetJobExA",
    "FaxSetOutboundGroupW",
    "FaxEnumMessagesW",
    "FaxGetMessageTiffW",
    "FaxEnumPortsExA",
    "FaxSetOutboundGroupA",
    "FaxRegisterServiceProviderExW",
    "FaxGetArchiveConfigurationA",
    "FaxGetLoggingCategoriesA",
    "FaxEnumerateProvidersW",
    "FaxGetReceiptsConfigurationW",
    "FaxGetMessageEx",
    "FaxGetSecurity",
    "FaxSetActivityLoggingConfigurationW",
    "FaxSetConfigWizardUsed",
    "FaxSetMessage",
    "FaxUnregisterRoutingExtensionW",
    "FaxSetPortExW",
    "FaxGetSenderInfoW",
    "FaxConnectFaxServerW",
    "FaxGetCountryListW",
    "FaxRefreshArchive",
    "FaxSendDocumentW",
    "FaxSetSecurity",
    "FaxGetDeviceStatusA",
    "FaxCreateAccount",
    "FaxGetServerActivity",
    "FaxDeleteAccount",
    "FaxSetDeviceOrderInGroupW",
    "FaxAccessCheckEx",
    "FaxEnumJobsA",
    "FaxSetGlobalRoutingInfoA",
    "FaxUnregisterServiceProviderExW",
    "FaxGetExtensionDataA",
    "IsDeviceVirtual",
    "FaxEnumRoutingMethodsA",
    "FaxGetJobW",
    "FaxSetSecurityEx2",
    "FaxGetMessageW",
    "FaxSetLoggingCategoriesW",
    "FaxSetReceiptsConfigurationA",
    "FaxStartPrintJobW",
    "FaxGetReceiptsConfigurationA",
    "FaxEnumAccounts",
    "FaxGetPageData",
    "FaxSendDocumentA",
    "FaxGetConfigurationA",
    "FaxStartMessagesEnum",
    "FaxSetGeneralConfiguration",
    "FaxGetReceiptsOptions",
    "FaxEnumRoutingExtensionsW",
    "FaxAddOutboundGroupW",
    "FaxGetServicePrintersW",
    "FaxGetDeviceStatusW",
    "FaxEnumOutboundGroupsA",
    "FaxEnumGlobalRoutingInfoW",
    "FaxGetConfigurationW",
    "FaxInitializeEventQueue",
    "FaxGetSecurityEx2",
    "FaxGetExtensionDataW",
    "FaxEnumRoutingExtensionsA",
    "FaxSetQueue",
    "FaxFreeBuffer",
    "FaxGetActivityLoggingConfigurationW",
    "FaxSetSenderInformation",
    "FaxEnableRoutingMethodW",
    "FaxGetPortW",
    "FaxGetServicePrintersA",
    "FaxSetOutboxConfiguration",
    "FaxGetActivityLoggingConfigurationA",
    "FaxSetOutboundRuleW",
    "FaxSetPortExA",
    "FaxUnregisterForServerEvents",
    "FaxGetSenderInformation",
    "FaxEnumOutboundRulesW",
    "FaxUnregisterServiceProviderExA",
    "FaxEnumPortsA",
    "FaxSetJobA",
    "FaxPrintCoverPageW",
    "FaxRemoveOutboundRule",
    "FaxGetRoutingInfoW",
    "FaxRegisterRoutingExtensionW",
    "FaxSetConfigurationA",
    "FaxEnumPortsExW",
    "FaxEnumJobsExW",
    "FaxGetJobA",
    "FaxSetConfigurationW",
    "FaxSetRoutingInfoA",
    "FaxEnumJobsW",
    "FaxGetRecipientsLimit",
    "FaxGetAccountInfo",
    "FaxGetJobEx2",
    "FaxEnumOutboundRulesA",
    "FaxGetPersonalCoverPagesOption",
    "FaxGetRecipientInfoW",
    "FaxGetMessageA",
    "FaxRemoveOutboundGroupW",
    "FaxGetServerSKU",
    "FaxGetReportedServerAPIVersion",
    "FaxSetRoutingInfoW"
  ],
  "FXSCOM.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "FXSCOMEX.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "FXSCOMPOSE.dll": [
    "HrInitComposeFormDll",
    "HrNewFaxComposeUIFromFile",
    "HrSelectEmailRecipient",
    "HrFaxComposePreTranslateAccelerator",
    "HrNewTiffViewUIFromFile",
    "HrDeinitComposeFormDll",
    "FaxComposeFreeBuffer",
    "DllMain",
    "HrFreeDraftsListViewInfo",
    "HrInvokeAddressBook",
    "HrAddressBookPreTranslateAccelerator",
    "HrDeInitAddressBook",
    "HrInitAddressBook",
    "HrGetDraftsListViewInfo",
    "HrNewFaxComposeUI"
  ],
  "FXSCOMPOSERES.dll": "No exports",
  "FXSEVENT.dll": "No exports",
  "FXSEXT32.dll": [
    "ExchEntryPoint"
  ],
  "FXSMON.dll": [
    "InitializePrintMonitor2"
  ],
  "FXSRESM.dll": "No exports",
  "FXSROUTE.dll": [
    "FaxRouteEmail",
    "FaxRouteStore",
    "FaxRouteGetRoutingInfo",
    "FaxRouteSetRoutingInfo",
    "FaxRouteDeviceChangeNotification",
    "FaxRoutePrint",
    "FaxExtInitializeConfig",
    "FaxRouteInitialize",
    "FaxRouteDeviceEnable",
    "FaxRouteConfigure"
  ],
  "FXSST.dll": [
    "DllMain",
    "FaxMonitorShutdown",
    "IsFaxMessage",
    "FaxMonitorStartup"
  ],
  "FXST30.dll": [
    "FaxDevAbortOperation",
    "FaxDevSend",
    "FaxExtInitializeConfig",
    "FaxDevReportStatus",
    "DllMain",
    "FaxDevShutdown",
    "FaxDevReceive",
    "FaxDevInitialize",
    "FaxDevStartJob",
    "FaxDevEndJob"
  ],
  "FXSTIFF.dll": [
    "ScanMhSegment",
    "ConvMmrPageToMh",
    "TiffEndPage",
    "FreeMsTagInfo",
    "TiffClose",
    "TiffRecoverGoodPages",
    "TiffSeekToPage",
    "TiffUncompressMmrPageRaw",
    "MergeTiffFiles",
    "TiffPrintDC",
    "MemoryMapTiffFile",
    "ConvertTiffFileToValidFaxFormat",
    "TiffEncodeLinesMmrCompression",
    "TiffPostProcessFast",
    "TiffUncompressMmrPage",
    "MmrAddBranding",
    "TiffStartPage",
    "TiffGetIFDData",
    "PrintTiffFile",
    "GetMsTagDwordLong",
    "ConvMmrPageHiResToMrLoRes",
    "TiffSetCurrentPageParams",
    "FXSTIFFInitialize",
    "ScanMrSegment",
    "TiffGetIFDSize",
    "TiffRead",
    "TiffCreate",
    "TiffSetNextIFDOffset",
    "TiffExtractFirstPage",
    "TiffLimitTagNumber",
    "GetMsTagString",
    "ConvMmrPageToMrSameRes",
    "TiffOpen",
    "TiffPrint",
    "GetW2kMsTiffTags",
    "TiffStartPageForInMemoryConversion",
    "TiffAddMsTags",
    "TiffWriteRaw",
    "FindNextEol",
    "TiffGetCurrentPageData",
    "TiffEndPageForInMemoryConversion",
    "GetMsTagFileTime"
  ],
  "FXSUTILITY.dll": [
    "SendToFaxRecipient",
    "CanSendToFaxRecipient",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "FXSXP32.dll": [
    "XPProviderInit",
    "ServiceEntry"
  ],
  "Faultrep.dll": [
    "ReportHang",
    "CancelHangReporting",
    "AddERExcludedApplicationW",
    "UpdatePerUserLastCrossProcessCollectionTime",
    "CheckPerUserCrossProcessThrottle",
    "AddERExcludedApplicationA",
    "DllCanUnloadNow",
    "WerReportHang",
    "ReportFault",
    "DllGetClassObject",
    "WerpInitiateCrashReporting"
  ],
  "FdDevQuery.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "FileAppxStreamingDataSource.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "FirewallAPI.dll": [
    "FwStringToSids",
    "FwGetGlobalConfig",
    "IsFirewallInCoExistanceMode",
    "FwAddrChangeSourceInitialize",
    "FwCopyCSRule",
    "FwCopyAuthsetToHigherVersion",
    "FWResetIndicatedPortInUse",
    "FWFreeCryptoSetsByHandle",
    "FWFreeMainModeRules",
    "FWFreeAuthenticationSets",
    "FWQueryFirewallRules",
    "FwBinariesFree",
    "FwSidAndAttributesFree",
    "NetworkIsolationRegisterForAppContainerChanges",
    "FWGetIndicatedPortInUse",
    "FwSidCopy",
    "FwCopyPortsContents",
    "FWDeleteAuthenticationSet",
    "FWFreeConnectionSecurityRules",
    "FwGetAppBlockList",
    "FWIndicateTupleInUse",
    "FWSetAuthenticationSet",
    "FwGetConfig",
    "MakeAbsoluteInterfaces",
    "FwImageListDestroy",
    "NetworkIsolationSetAppContainerConfig",
    "IsRulePerInterfaceOpenPort",
    "FwSidsToString",
    "FwSetGlobalConfig",
    "FwAllocCheckSize",
    "IcfGetOperationalMode",
    "NetworkIsolationEnumerateAppContainerRules",
    "FwDeleteAllRules",
    "FWEnumMainModeRules",
    "FWImportPolicy",
    "FwSddlStringVerify",
    "FwGetVersionField",
    "FwSetConfig",
    "FwUniteWFAddressesContents",
    "NetworkIsolationUnregisterForAppContainerChanges",
    "FwSetSet",
    "FWEnumNetworks",
    "FWCopyCryptoSet",
    "FwSetRule",
    "IsPortsEmpty",
    "FwAreAllContainedInAddresses",
    "DllGetClassObject",
    "FwRuleResolveFlags",
    "FWSetGlobalConfig2",
    "FwWfProtocolToICFProtocol",
    "FWEnumConnectionSecurityRules",
    "FwCopyMMRule",
    "FWResetIndicatedTupleInUse",
    "FwChangeSourceSignal",
    "FWOpenPolicyStore",
    "FwStringToAddresses",
    "FwFreeAddresses",
    "FwGetAddressesAsString",
    "FWFreeMainModeRulesByHandle",
    "IsPortOrICMPAllowed",
    "FwSetResolveFlags",
    "FWVerifyFirewallRule",
    "FwIsRemoteManagementEnabled",
    "FwClosePolicyStore",
    "FwAnalyzeFirewallPolicyOnProfile",
    "FwNegateAddresses",
    "CreateDefaultPerInterfaceIcmpRule",
    "FwCreateLocalTempStore",
    "CalculateOpenPortOrAuthAppAddrStringSize",
    "FWFreeConnectionSecurityRulesByHandle",
    "FwOpenPolicyStore",
    "FwParseAddressToken",
    "FWEnumPhase2SAs",
    "FWVerifyAuthenticationSet",
    "FWResolveGPONames",
    "GetDisabledInterfaces",
    "FWDeletePhase1SAs",
    "FwCopyRule",
    "NetworkIsolationDiagnoseConnectFailure",
    "DllUnregisterServer",
    "FWFreeFirewallRule",
    "FwCSRuleVerify",
    "FWIsTargetAProxy",
    "FwFree",
    "FwAdvPolicyEncodeRule",
    "FWDeleteAllAuthenticationSets",
    "FwVerifyNoHeapLeaks",
    "FWFreeFirewallRulesOld",
    "NetworkIsolationDiagnoseSocketCreation",
    "FWClosePolicyStore",
    "FWCopyAuthenticationSet",
    "FwIPV6RangeContainsMulticast",
    "FWVerifyCryptoSet",
    "IcfAddrChangeNotificationCreate",
    "FWAddConnectionSecurityRule",
    "FWEnumPhase1SAs",
    "FwGetCurrentProfile",
    "FWAddFirewallRule",
    "FWGetGlobalConfig3",
    "IcfIsPortAllowed",
    "FWEnumAuthenticationSets",
    "FWQueryMainModeRules",
    "FWVerifyConnectionSecurityRuleQuery",
    "FWDeleteConnectionSecurityRule",
    "Isv4Orv6AddressesEmpty",
    "OpenPortOrAuthAppAddrToString",
    "FWGPLock",
    "FWVerifyMainModeRuleQuery",
    "FWSetFirewallRule",
    "FwVerifyWFRuleSemantics",
    "FWSetConfig",
    "FwEnumRules",
    "FWFreeAuthenticationSetsByHandle",
    "FwGetRule",
    "FWDeleteFirewallRule",
    "FWDeleteAllCryptoSets",
    "FwImageListHasImage",
    "FWGetConfig",
    "FwBstrToPorts",
    "IcfFreeDynamicFwPorts",
    "IcfGetDynamicFwPorts",
    "FwCopyICMPTypeCode",
    "FwMigrateLegacyAuthenticatedBypassSddl",
    "NetworkIsolationGetAppContainerConfig",
    "FWGetGlobalConfig2",
    "IcfChangeNotificationDestroy",
    "FwReduceObjectsToVersion",
    "FWFreeDiagAppList",
    "FWVerifyCryptoSetQuery",
    "FwMMRuleVerify",
    "FWSetCryptoSet",
    "FWSetConnectionSecurityRule",
    "FWGetConfig2",
    "FwAlloc",
    "FwDeleteAllSets",
    "FWAddCryptoSet",
    "FWFreeAdapters",
    "FwResolveIndirectString",
    "IsRuleOldGlobalOpenPort",
    "FWRegisterProduct",
    "FwChangeSourceSignalStart",
    "FwICFProfileToWfProfile",
    "CreateDefaultPerInterfaceOpenPortRule",
    "FWEnumFirewallRules",
    "FwAddSet",
    "NetworkIsolationDiagnoseListen",
    "FwIsV6AddrLoopback",
    "GetOpenPortOrAuthAppAddrScope",
    "IcfChangeNotificationCreate",
    "FwIsGroupPolicyEnforced",
    "FwAppContainerChangeFree",
    "FWEnumCryptoSets",
    "FwDoNothingOnObject",
    "FWChangeNotificationCreate",
    "FWRestoreDefaults",
    "FwEmptyWFRule",
    "FWFreePhase1SAs",
    "FWVerifyConnectionSecurityRule",
    "FWVerifyAuthenticationSetQuery",
    "IcfDisconnect",
    "FWSetGPHelperFnPtrs",
    "FWFreeNetworks",
    "FwEnumSets",
    "IcfFreeTickets",
    "FWGetGlobalConfig",
    "FWChangeNotificationDestroy",
    "FwConvertIPv6SubNetToRange",
    "FWGPUnlock",
    "FwCopyLUID",
    "FWIndicatePortInUse",
    "FwChangeSourceShutdown",
    "FwCopyAuthSet",
    "FwDeleteSet",
    "FwAddRule",
    "FwAnalyzeFirewallPolicy",
    "FwFreeWFRule",
    "FwAddrChangeSourceSignal",
    "FwSetMemLeakPolicy",
    "FWCopyFirewallRule",
    "FWFreeAuthenticationSet",
    "IcfGetProfile",
    "NetworkIsolationSetupAppContainerBinaries",
    "FWFreeCryptoSet",
    "FWFreeFirewallRulesByHandle",
    "IsRuleOldAuthApp",
    "NetworkIsolationEnumAppContainers",
    "FWDeleteAllMainModeRules",
    "FWQueryConnectionSecurityRules",
    "IsAddressesEmpty",
    "FWFreeCryptoSets",
    "FWAddMainModeRule",
    "FwFreeSets",
    "FwCopyMainModeRule",
    "FWFreeProducts",
    "FWUnregisterProduct",
    "FWFreePhase2SAs",
    "FWEnumAdapters",
    "FwRemoveDuplicateAddresses",
    "FwSubtractAddresses",
    "FwEnableMemTracing",
    "FwGetGlobalConfigFromLocalTempStore",
    "FWEnumProducts",
    "FWFreeConnectionSecurityRule",
    "FWAddAuthenticationSet",
    "FWDeleteCryptoSet",
    "FwCopyAuthSetListToLowerVersion",
    "FwMergeAddresses",
    "FwAddrChangeSourceShutdown",
    "IcfOpenDynamicFwPortWithoutSocket",
    "FWQueryCryptoSets",
    "FwCSRuleEmpty",
    "DllRegisterServer",
    "NetworkIsolationDeleteAppContainer",
    "IcfGetCurrentProfileType",
    "FWCopyConnectionSecurityRule",
    "FWRestoreGPODefaults",
    "FwICFProtocolToWfProtocol",
    "FwChangeSourceInitialize",
    "ValidatePortOrAppAddressString",
    "FWVerifyFirewallRuleQuery",
    "FwFreeRules",
    "FwCopyPortRange",
    "FWDeleteAllFirewallRules",
    "FwCopyCryptoSet",
    "FWStatusMessageFromStatusCode",
    "IsRulePerInterfaceIcmp",
    "NetworkIsolationFreeAppContainers",
    "DllCanUnloadNow",
    "FWSetMainModeRule",
    "FwEmptyWFAddresses",
    "FWQueryAuthenticationSets",
    "FWFreeFirewallRules",
    "IsRuleOpenPortOrAuthApp",
    "FwCanonizeAuthorizedApps",
    "FwIPV4RangeContainsMulticast",
    "IcfFreeProfile",
    "IcfGetTickets",
    "FWDeleteAllConnectionSecurityRules",
    "LoadGPExtensionDll",
    "FwDeleteRule",
    "FwOpenAppCDbPolicyStore",
    "IsEqualAddresses",
    "FWDeleteMainModeRule",
    "FWChangeTransactionalState",
    "FWDeletePhase2SAs",
    "FWFreeMainModeRule",
    "FwPortsToString",
    "FwAdvPolicyDecodeFirewallRule",
    "IsUnicastExplicitAddressesEmpty",
    "FreeAbsoluteInterfaces",
    "FwCopyPlatform",
    "FWDiagGetAppList",
    "FWRevertTransaction",
    "FWSetGlobalConfig",
    "FwDestroyLocalTempStore",
    "FwMigrateLegacySettings",
    "FWVerifyMainModeRule",
    "NetworkIsolationCreateAppContainer",
    "FWIndicateProxyForUrl",
    "FwCopyWFAddressesContents",
    "FWIndicateProxyResolverRefresh",
    "FWExportPolicy",
    "NetworkIsolationDiagnoseConnectFailureAndGetInfo",
    "IcfConnect",
    "IcfSubNetsGetScope",
    "FwActivate"
  ],
  "FirewallControlPanel.dll": [
    "ShowWarningDialogW",
    "ShowNotificationDialogW",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "FntCache.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "FwRemoteSvr.dll": [
    "FwRpcAPIsShutdown",
    "FwRpcAPIsInitialize"
  ],
  "f3ahvoas.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor",
    "FujitsuOyayubiControl"
  ],
  "fdBth.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "fdBthProxy.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "fdPHost.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "fdPnp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "fdProxy.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "fdSSDP.dll": [
    "FdphostSessionChange",
    "FdphostSetSharedService",
    "FdphostSetComContext",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "fdWCN.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "fdWNet.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "fdWSD.dll": [
    "FdphostSessionChange",
    "FdphostSetSharedService",
    "FdphostSetComContext",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "fde.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "fdeploy.dll": [
    "ProcessWmiPolicy",
    "GenerateGroupPolicy",
    "ProcessGroupPolicyEx"
  ],
  "fdprint.dll": [
    "DllRegisterServer",
    "InvokeTaskW",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "feclient.dll": [
    "FeClientInitialize",
    "EfsUtilGetCurrentKey"
  ],
  "fhautoplay.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "fhcat.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "fhcfg.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "fhcleanup.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "fhcpl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "fhengine.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "fhevents.dll": [
    "DpElGetNextEvent",
    "DpElScanEvents",
    "DpElReleaseObjects"
  ],
  "fhlisten.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "fhshl.dll": [
    "FreeCatalog",
    "DllGetClassObject",
    "CreateCatalog",
    "CreateSearchBindCtx",
    "CreateVirtualItem",
    "GetBackupPathFromPidl",
    "DllCanUnloadNow",
    "ParsePIDL",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "fhsrchapi.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "fhsrchph.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "fhsvc.dll": [
    "DllMain",
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "fhsvcctl.dll": [
    "FhServiceStartBackup",
    "FhServiceOpenPipe",
    "FhServiceReloadConfiguration",
    "FhServiceExitMaintenanceMode",
    "FhServiceMigrationFinished",
    "FhServiceUnblockBackup",
    "FhServiceClosePipe",
    "DllMain",
    "FhServiceBlockBackup",
    "FhServiceClearProtectionState",
    "FhServiceMigrationStarting",
    "FhServiceEnterMaintenanceMode",
    "FhQueryConfiguredUsersCount",
    "FhServiceStopBackup"
  ],
  "fhtask.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "fhuxadapter.dll": "No exports",
  "fhuxapi.dll": "No exports",
  "fhuxcommon.dll": "No exports",
  "fhuxgraphics.dll": "No exports",
  "fhuxpresentation.dll": "No exports",
  "filemgmt.dll": [
    "CacheSettingsDlg2",
    "DllRegisterServer",
    "CacheSettingsDlg",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "findnetprinters.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "fltLib.dll": [
    "FilterLoad",
    "FilterVolumeInstanceFindFirst",
    "FilterInstanceGetInformation",
    "FilterVolumeFindClose",
    "FilterFindNext",
    "FilterSendMessage",
    "FilterFindClose",
    "FilterInstanceFindClose",
    "FilterUnload",
    "FilterInstanceFindNext",
    "FilterInstanceClose",
    "FilterFindFirst",
    "FilterVolumeInstanceFindNext",
    "FilterVolumeFindFirst",
    "FilterGetInformation",
    "FilterGetMessage",
    "FilterVolumeInstanceFindClose",
    "FilterConnectCommunicationPort",
    "FilterAttach",
    "FilterGetDosName",
    "FilterDetach",
    "FilterReplyMessage",
    "FilterVolumeClose",
    "FilterInstanceFindFirst",
    "FilterCreate",
    "FilterVolumeFindNext",
    "FilterClose",
    "FilterAttachAtAltitude",
    "FilterInstanceCreate"
  ],
  "fmapi.dll": [
    "CreateFileRestoreContext",
    "DetectEncryptedVolumeEx",
    "SupplyDecryptionInfo",
    "RestoreFile",
    "ScanRestorableFiles",
    "DetectEncryptedVolume",
    "DetectBootSector",
    "CloseFileRestoreContext"
  ],
  "fmifs.dll": [
    "SetLabel",
    "EnableVolumeCompression",
    "QueryDeviceInformationByHandle",
    "QueryIsDiskCheckScheduledForNextBoot",
    "GetNextCorruptionInfo",
    "Format",
    "ComputeFmMediaType",
    "DiskCopy",
    "FormatEx",
    "QueryAvailableFileSystemFormat",
    "QueryLatestFileSystemVersion",
    "QueryCorruptionStateByHandle",
    "FreeCorruptionInfo",
    "QueryDeviceInformation",
    "GetCorruptionInfoClose",
    "Chkdsk",
    "Extend",
    "GetDefaultFileSystem",
    "FormatEx2",
    "QueryCorruptionState",
    "ChkdskEx",
    "QuerySupportedMedia",
    "EnableVolumeIntegrity",
    "GetFirstCorruptionInfo",
    "QueryFileSystemName"
  ],
  "fms.dll": [
    "FmsGetGDILogFont",
    "FmsGetFilteredPropertyList",
    "FmsGetBestMatchInFamily",
    "FmsResetEnumerator",
    "FmsInitializeEnumerator",
    "FmsSetFilter",
    "FmsToggleOnDesignAxis",
    "FmsMapGdiLogicalFont",
    "FmsGetDirectWriteLogFont",
    "FmsMapLogicalFont",
    "FmsFreeEnumerator",
    "FmsActivateFonts",
    "FmsSetDefaultFilter",
    "FmsGetFontProperty",
    "FmsSetFontAutoActivationMode",
    "FmsResetFontsActivationState",
    "FmsGetGdiLogicalFont",
    "FmsGetCurrentFilter",
    "FmsDeactivateFonts",
    "FmsAddFilter",
    "FmsGetFontAutoActivationMode",
    "FmsSetTextFilter",
    "FmsGetFilteredFontList"
  ],
  "fontext.dll": [
    "DllCanUnloadNow",
    "InstallFontFile",
    "DllGetClassObject"
  ],
  "fontsub.dll": [
    "CreateFontPackage",
    "MergeFontPackage"
  ],
  "fphc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "framedyn.dll": [
    "public: void __thiscall CRegistry::Close(void)",
    "private: static void __stdcall CWinMsgEvent::CreateMsgProvider(void)",
    "public: __thiscall ParsedObjectPath::ParsedObjectPath(void)",
    "public: static bool __stdcall CWbemProviderGlue::IsDerivedFrom(unsigned short const *,unsigned short const *,class MethodContext *,unsigned short const *)",
    "public: virtual long __stdcall CWbemProviderGlue::CreateInstanceEnumAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "protected: virtual long __thiscall Provider::GetObject(class CInstance *,long)",
    "public: static unsigned short * __stdcall CObjectPathParser::GetRelativePath(unsigned short *)",
    "public: int __thiscall CAutoEvent::Signal(void)",
    "private: static struct IWbemClassObject * __stdcall CWbemProviderGlue::GetStatusObject(class MethodContext *,unsigned short const *)",
    "public: __thiscall CHString::CHString(unsigned short const *)",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(long const &)",
    "public: enum ProviderLog::LogLevel __thiscall ProviderLog::IsLoggingOn(class CHString *)",
    "public: class CWbemGlueFactory & __thiscall CWbemGlueFactory::operator=(class CWbemGlueFactory const &)",
    "public: __thiscall WBEMTime::WBEMTime(struct tm const &)",
    "public: int __thiscall CHStringArray::Add(unsigned short const *)",
    "public: class Provider & __thiscall Provider::operator=(class Provider const &)",
    "public: int __thiscall CHStringArray::GetSize(void)const",
    "public: void __thiscall CHPtrArray::FreeExtra(void)",
    "public: class CHString const & __thiscall CHString::operator=(char)",
    "private: static class CCritSec CWbemProviderGlue::m_csStatusObject",
    "private: int __thiscall CObjectPathParser::keyref_term(void)",
    "public: class CHString __thiscall CHString::Right(int)const",
    "public: void __thiscall CThreadBase::`default constructor closure'(void)",
    "public: __thiscall CreateMutexAsProcess::CreateMutexAsProcess(unsigned short const *)",
    "public: class CHString __thiscall CHStringArray::GetAt(int)const",
    "public: unsigned __int64 __thiscall WBEMTime::GetTime(void)const",
    "protected: void __thiscall CWinMsgEvent::UnRegisterAllMessages(void)",
    "protected: bool __thiscall Provider::SetCreationClassName(class CInstance *)",
    "public: void * __thiscall CHPtrArray::GetAt(int)const",
    "public: __thiscall KeyRef::KeyRef(void)",
    "private: int __thiscall CObjectPathParser::NextToken(void)",
    "public: __thiscall KeyRef::~KeyRef(void)",
    "protected: virtual long __thiscall Provider::ValidateEnumerationFlags(long)",
    "public: __thiscall WBEMTime::WBEMTime(long const &)",
    "public: struct KeyRef & __thiscall KeyRef::operator=(struct KeyRef const &)",
    "public: __thiscall CInstance::CInstance(struct IWbemClassObject *,class MethodContext *)",
    "private: static long CWbemProviderGlue::s_lObjects",
    "public: virtual long __stdcall CWbemProviderGlue::Initialize(unsigned short *,long,unsigned short *,unsigned short *,struct IWbemServices *,struct IWbemContext *,struct IWbemProviderInitSink *)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValueExpand(struct HKEY__ *,unsigned short const *,class CHString &)",
    "public: static class CWbemGlueFactory * __stdcall CWbemGlueFactory::Create(long *)",
    "private: int __thiscall CObjectPathParser::ident_becomes_ns(void)",
    "public: static long __stdcall CWbemProviderGlue::GetInstanceKeysByPath(unsigned short const *,class CInstance * *,class MethodContext *)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyCount(void)",
    "public: __thiscall CFrameworkQueryEx::~CFrameworkQueryEx(void)",
    "public: void __thiscall CHPtrArray::SetSize(int,int)",
    "public: int __thiscall ParsedObjectPath::SetClassName(unsigned short const *)",
    "private: static void __stdcall CWbemProviderGlue::UnInit(void)",
    "public: __thiscall CObjectPathParser::~CObjectPathParser(void)",
    "public: long __thiscall MethodContext::Release(void)",
    "public: virtual long __stdcall CWbemProviderGlue::DeleteClass(unsigned short * const,long,struct IWbemContext *,struct IWbemCallResult * *)",
    "public: int __thiscall CHString::GetAllocLength(void)const",
    "public: bool __thiscall CInstance::GetDWORD(unsigned short const *,unsigned long &)const",
    "public: int __thiscall CHString::FindOneOf(unsigned short const *)const",
    "private: static int CRegistry::s_fPlatformSet",
    "protected: class CHString const & __thiscall CFrameworkQuery::GetNamespace(void)",
    "private: static class std::map,class std::allocator > CWbemProviderGlue::s_factorymap",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(unsigned short const *,unsigned long &)",
    "public: static long __stdcall CWbemProviderGlue::GetEmptyInstance(class MethodContext *,unsigned short const *,class CInstance * *,unsigned short const *)",
    "public: virtual long __stdcall CWbemGlueFactory::LockServer(int)",
    "public: int __thiscall CHString::GetLength(void)const",
    "protected: virtual void __thiscall CThreadBase::OnFinalRelease(void)",
    "public: class CInstance & __thiscall CInstance::operator=(class CInstance const &)",
    "public: unsigned short * __thiscall CRegistry::GetClassNameW(void)",
    "public: class CHString const & __thiscall CHString::operator=(unsigned char const *)",
    "public: unsigned long __thiscall CRegistry::GetLongestValueName(void)",
    "private: long __thiscall CRegistry::myRegDeleteKey(struct HKEY__ *,unsigned short const *)",
    "public: __thiscall CWinMsgEvent::CWinMsgEvent(void)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(struct tm const &)",
    "protected: void __thiscall CHString::Init(void)",
    "public: unsigned long __thiscall CAutoEvent::Wait(unsigned long)",
    "public: int __thiscall CHString::LoadStringW(unsigned int)",
    "public: bool __thiscall CInstance::Setbool(unsigned short const *,bool)",
    "public: void __thiscall CHStringArray::SetSize(int,int)",
    "public: bool __thiscall CFrameworkQuery::KeysOnly(void)",
    "public: class CObjectPathParser & __thiscall CObjectPathParser::operator=(class CObjectPathParser const &)",
    "const CWbemGlueFactory::`vftable'",
    "class CCritSec g_cs",
    "public: virtual unsigned long __stdcall CWbemProviderGlue::AddRef(void)",
    "public: static void __stdcall CWbemProviderGlue::IncrementObjectCount(void)",
    "const CWinMsgEvent::`vftable'",
    "public: int __thiscall CFrameworkQueryEx::Is3TokenOR(unsigned short const *,unsigned short const *,struct tagVARIANT &,struct tagVARIANT &)",
    "protected: class CHString const & __thiscall Provider::GetProviderName(void)",
    "public: static long __stdcall CWbemProviderGlue::GetAllDerivedInstancesAsynch(unsigned short const *,class Provider *,long (__stdcall*)(class Provider *,class CInstance *,class MethodContext *,void *),unsigned short const *,class MethodContext *,void *)",
    "public: __thiscall WBEMTime::WBEMTime(void)",
    "private: void __thiscall CThreadBase::Unlock(void)",
    "private: static class Provider * __stdcall CWbemProviderGlue::AddProviderToMap(unsigned short const *,unsigned short const *,class Provider *)",
    "public: int __thiscall WBEMTime::operator>=(class WBEMTime const &)const",
    "private: void __thiscall CRegistry::PrepareToReOpen(void)",
    "public: bool __thiscall CInstance::SetCHString(unsigned short const *,unsigned short const *)",
    "protected: void __thiscall CHString::AllocCopy(class CHString &,int,int,int)const",
    "private: static class std::map,class std::allocator > CWbemProviderGlue::s_providersmap",
    "public: static unsigned long __stdcall CWbemProviderGlue::GetOSMajorVersion(void)",
    "public: virtual long __stdcall CWbemProviderGlue::PutInstance(struct IWbemClassObject *,long,struct IWbemContext *,struct IWbemCallResult * *)",
    "public: bool __thiscall CInstance::GetStatus(unsigned short const *,bool &,unsigned short &)const",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator=(struct _FILETIME const &)",
    "public: virtual long __stdcall CWbemProviderGlue::GetObject(unsigned short * const,long,struct IWbemContext *,struct IWbemClassObject * *,struct IWbemCallResult * *)",
    "public: virtual long __stdcall CWbemProviderGlue::PutClassAsync(struct IWbemClassObject *,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "protected: static long __stdcall CWbemProviderGlue::DecrementMapCount(long *)",
    "public: class MethodContext & __thiscall MethodContext::operator=(class MethodContext const &)",
    "public: class CFrameworkQuery & __thiscall CFrameworkQuery::operator=(class CFrameworkQuery const &)",
    "private: unsigned long __thiscall CRegistry::GetCurrentRawKeyValue(struct HKEY__ *,unsigned short const *,void *,unsigned long *,unsigned long *)",
    "public: void __thiscall CHString::FormatV(unsigned short const *,char *)",
    "public: class WBEMTimeSpan __thiscall WBEMTimeSpan::operator+(class WBEMTimeSpan const &)const",
    "const CWbemProviderGlue::`vftable'{for `IWbemServices'}",
    "public: __thiscall ProviderLog::ProviderLog(void)",
    "public: bool __thiscall CInstance::Getbool(unsigned short const *,bool &)const",
    "public: void __thiscall ProviderLog::LocalLogMessage(unsigned short const *,unsigned short const *,int,enum ProviderLog::LogLevel)",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(struct _FILETIME const &)",
    "public: void __thiscall CHString::MakeLower(void)",
    "public: int __thiscall CHString::Compare(unsigned short const *)const",
    "public: void __thiscall CWbemGlueFactory::Destroy(void)",
    "public: int __thiscall WBEMTimeSpan::operator>(class WBEMTimeSpan const &)const",
    "public: int __thiscall CHString::ReverseFind(unsigned short)const",
    "public: bool __thiscall CInstance::SetCHString(unsigned short const *,class CHString const &)",
    "public: class CHString __thiscall CHString::SpanExcluding(unsigned short const *)const",
    "public: __thiscall Provider::Provider(class Provider const &)",
    "public: unsigned short * __thiscall WBEMTime::GetDMTF(int)const",
    "public: static long __stdcall CWbemProviderGlue::GetInstancesByQueryAsynch(unsigned short const *,class Provider *,long (__stdcall*)(class Provider *,class CInstance *,class MethodContext *,void *),unsigned short const *,class MethodContext *,void *)",
    "public: int __thiscall ParsedObjectPath::AddNamespace(unsigned short const *)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(struct HKEY__ *,unsigned short const *,class CHStringArray &)",
    "private: static struct HWND__ * __stdcall CWinMsgEvent::CreateMsgWindow(void)",
    "private: static long __stdcall CWbemProviderGlue::GetInstanceFromCIMOM(unsigned short const *,unsigned short const *,class MethodContext *,class CInstance * *)",
    "public: __thiscall CFrameworkQueryEx::CFrameworkQueryEx(void)",
    "public: bool __thiscall CInstance::SetDOUBLE(unsigned short const *,double)",
    "public: __thiscall CRegistrySearch::~CRegistrySearch(void)",
    "public: virtual __thiscall MethodContext::~MethodContext(void)",
    "private: long __thiscall Provider::DeleteInstance(struct ParsedObjectPath *,long,class MethodContext *)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(unsigned short const *,unsigned long &)",
    "private: long __thiscall CRegistry::myRegCreateKeyEx(struct HKEY__ *,unsigned short const *,unsigned long,unsigned short *,unsigned long,unsigned long,struct _SECURITY_ATTRIBUTES * const,struct HKEY__ * *,unsigned long *)",
    "public: virtual unsigned long __stdcall CWbemProviderGlue::Release(void)",
    "public: int __thiscall ParsedObjectPath::AddKeyRef(unsigned short const *,struct tagVARIANT const *)",
    "public: __thiscall CThreadBase::CThreadBase(class CThreadBase const &)",
    "public: void __thiscall CObjectPathParser::`default constructor closure'(void)",
    "private: void __thiscall CWbemProviderGlue::AddFlushPtr(void *)",
    "public: bool __thiscall CInstance::SetCharSplat(unsigned short const *,unsigned long)",
    "private: long __thiscall Provider::CreateInstanceEnum(class MethodContext *,long)",
    "protected: void __thiscall CWinMsgEvent::RegisterForMessage(unsigned int,int)",
    "protected: bool __thiscall Provider::GetLocalInstancePath(class CInstance const *,class CHString &)",
    "private: int __thiscall Provider::SetKeyFromParsedObjectPath(class CInstance *,struct ParsedObjectPath *)",
    "public: unsigned short * __thiscall WBEMTime::GetDMTFNonNtfs(void)const",
    "public: void __thiscall WBEMTimeSpan::Clear(void)",
    "public: long __thiscall CFrameworkQuery::Init(struct ParsedObjectPath *,struct IWbemContext *,unsigned short const *,class CHString &)",
    "protected: static long __stdcall CWbemProviderGlue::IncrementMapCount(class CWbemGlueFactory const *)",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator=(unsigned short * const)",
    "public: bool __thiscall CInstance::SetDWORD(unsigned short const *,unsigned long)",
    "public: class WBEMTime __thiscall WBEMTime::operator-(class WBEMTimeSpan const &)const",
    "public: __thiscall CAutoEvent::~CAutoEvent(void)",
    "public: static long __stdcall CWbemProviderGlue::GetInstancePropertiesByPath(unsigned short const *,class CInstance * *,class MethodContext *,class CHStringArray &)",
    "private: static class std::set,class std::allocator > CWbemProviderGlue::m_FlushPtrs",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(struct HKEY__ *,unsigned short const *,unsigned long &)",
    "public: unsigned long __thiscall CRegistry::GetLongestClassStringSize(void)",
    "public: long __thiscall CRegistry::DeleteValue(unsigned short const *)",
    "public: int __thiscall WBEMTime::SetDMTF(unsigned short * const)",
    "public: class CHString const & __thiscall CHString::operator=(class CHString *)",
    "public: void __thiscall CHString::Empty(void)",
    "protected: class CInstance * __thiscall Provider::CreateNewInstance(class MethodContext *)",
    "public: class CHString & __thiscall CHStringArray::operator[](int)",
    "public: long __thiscall CThreadBase::Release(void)",
    "public: static long __stdcall CWbemProviderGlue::GetAllInstancesAsynch(unsigned short const *,class Provider *,long (__stdcall*)(class Provider *,class CInstance *,class MethodContext *,void *),unsigned short const *,class MethodContext *,void *)",
    "public: static long __stdcall WBEMTime::GetLocalOffsetForDate(struct tm const *)",
    "protected: void __thiscall CHString::AllocBuffer(int)",
    "protected: int __thiscall CFrameworkQuery::IsReference(unsigned short const *)",
    "public: void __thiscall ParsedObjectPath::ClearKeys(void)",
    "protected: class CHString const & __thiscall Provider::GetNamespace(void)",
    "private: static struct IWbemClassObject * CWbemProviderGlue::m_pStatusObject",
    "public: __thiscall CFrameworkQuery::~CFrameworkQuery(void)",
    "public: __thiscall CWbemProviderGlue::CWbemProviderGlue(void)",
    "public: int __thiscall CHPtrArray::GetUpperBound(void)const",
    "public: static long __stdcall CWbemProviderGlue::GetInstancesByQuery(unsigned short const *,class TRefPointerCollection *,class MethodContext *,unsigned short const *)",
    "public: virtual long __stdcall CWbemProviderGlue::GetObjectAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: void __thiscall CHString::MakeReverse(void)",
    "private: static class CCritSec CWbemProviderGlue::m_csFlushPtrs",
    "public: void __thiscall CHPtrArray::SetAtGrow(int,void *)",
    "public: __thiscall CreateMutexAsProcess::~CreateMutexAsProcess(void)",
    "protected: static void __stdcall CWbemProviderGlue::AddToFactoryMap(class CWbemGlueFactory const *,long *)",
    "public: static long __stdcall CWbemProviderGlue::GetAllDerivedInstances(unsigned short const *,class TRefPointerCollection *,class MethodContext *,unsigned short const *)",
    "public: __thiscall CWinMsgEvent::CWinMsgEvent(class CWinMsgEvent const &)",
    "public: virtual unsigned long __stdcall CWbemGlueFactory::AddRef(void)",
    "public: void const * * __thiscall CHPtrArray::GetData(void)const",
    "public: void __thiscall CThreadBase::EndRead(void)",
    "private: static unsigned long CRegistry::s_dwPlatform",
    "protected: static long __stdcall CWbemProviderGlue::IncrementMapCount(long *)",
    "public: class CHString & __thiscall CHStringArray::ElementAt(int)",
    "public: long __thiscall CInstance::Release(void)",
    "public: unsigned long __thiscall CRegistry::NextSubKey(void)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyValue(unsigned short const *,class CHString &)",
    "public: virtual __thiscall ProviderLog::~ProviderLog(void)",
    "public: __thiscall WBEMTime::WBEMTime(struct _FILETIME const &)",
    "public: unsigned short __thiscall CHString::GetAt(int)const",
    "private: void __thiscall ProviderLog::CheckFileSize(union _LARGE_INTEGER &,class CHString const &)",
    "public: bool __thiscall CInstance::GetDateTime(unsigned short const *,class WBEMTime &)const",
    "private: void __thiscall CRegistry::CloseSubKey(void)",
    "public: int __thiscall CRegistrySearch::FreeSearchList(int,class CHPtrArray &)",
    "public: unsigned long __thiscall CRegistry::DeleteCurrentKeyValue(struct HKEY__ *,unsigned short const *)",
    "private: static unsigned short * CWbemProviderGlue::s_wstrCSDVersion",
    "public: unsigned long __thiscall CRegistry::GetCurrentBinaryKeyValue(unsigned short const *,class CHString &)",
    "public: void __thiscall CHPtrArray::RemoveAll(void)",
    "public: virtual __thiscall CInstance::~CInstance(void)",
    "public: int __thiscall CObjectPathParser::Parse(unsigned short const *,struct ParsedObjectPath * *)",
    "public: void __thiscall CHStringArray::InsertAt(int,unsigned short const *,int)",
    "public: void __thiscall CHString::TrimLeft(void)",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(unsigned short * const)",
    "public: static struct IWbemServices * __stdcall CWbemProviderGlue::GetNamespaceConnection(unsigned short const *,class MethodContext *)",
    "const CWbemProviderGlue::`vftable'{for `IWbemProviderInit'}",
    "private: long __thiscall CRegistry::myRegQueryValueEx(struct HKEY__ *,unsigned short const *,unsigned long *,unsigned long *,unsigned char *,unsigned long *)",
    "public: bool __thiscall CInstance::SetDateTime(unsigned short const *,class WBEMTime const &)",
    "private: static class CHString Provider::s_strComputerName",
    "public: bool __thiscall CInstance::SetWCHARSplat(unsigned short const *,unsigned short const *)",
    "public: long __thiscall CThreadBase::AddRef(void)",
    "public: class CHString const & __thiscall CHString::operator=(char const *)",
    "public: long __thiscall CRegistry::Open(struct HKEY__ *,unsigned short const *,unsigned long)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(struct HKEY__ *,unsigned short const *,class CHString &)",
    "private: static void * CWinMsgEvent::mg_hDevNotify",
    "public: static int __stdcall CWbemProviderGlue::FrameworkLoginDLL(unsigned short const *)",
    "public: static long __stdcall WBEMTime::GetLocalOffsetForDate(long const &)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(unsigned short * const)",
    "public: virtual long __stdcall CWbemProviderGlue::ExecMethod(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IWbemClassObject *,struct IWbemClassObject * *,struct IWbemCallResult * *)",
    "public: int __thiscall ParsedObjectPath::AddKeyRefEx(unsigned short const *,struct tagVARIANT const *)",
    "protected: void __thiscall CInstance::LogError(unsigned short const *,unsigned short const *,unsigned short const *,long)const",
    "public: static int __stdcall CWbemProviderGlue::FrameworkLogoffDLL(unsigned short const *,long *)",
    "private: static unsigned long CWbemProviderGlue::s_dwPlatform",
    "public: unsigned __int64 __thiscall WBEMTimeSpan::GetTime(void)const",
    "public: int __thiscall WBEMTime::operator==(class WBEMTime const &)const",
    "protected: class CHString __thiscall Provider::MakeLocalPath(class CHString const &)",
    "protected: virtual long __thiscall Provider::EnumerateInstances(class MethodContext *,long)",
    "public: static class CWbemGlueFactory * __stdcall CWbemGlueFactory::Create(void)",
    "public: int __thiscall ParsedObjectPath::IsLocal(unsigned short const *)",
    "public: virtual long __stdcall CWbemProviderGlue::ExecNotificationQuery(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IEnumWbemClassObject * *)",
    "public: __thiscall CWbemGlueFactory::CWbemGlueFactory(long *)",
    "public: int __thiscall WBEMTimeSpan::GetFILETIME(struct _FILETIME *)const",
    "public: virtual long __stdcall CWbemProviderGlue::CancelAsyncCall(struct IWbemObjectSink *)",
    "public: void * __thiscall CHPtrArray::operator[](int)const",
    "public: __thiscall CWbemGlueFactory::CWbemGlueFactory(void)",
    "public: struct IWbemClassObject * __thiscall CInstance::GetClassObjectInterface(void)",
    "protected: long __thiscall Provider::Commit(class CInstance *,bool)",
    "public: bool __thiscall CInstance::SetNull(unsigned short const *)",
    "public: virtual long __stdcall CWbemProviderGlue::CreateClassEnum(unsigned short * const,long,struct IWbemContext *,struct IEnumWbemClassObject * *)",
    "public: void * * __thiscall CHPtrArray::GetData(void)",
    "private: static void * CWinMsgEvent::mg_hThreadPumpHandle",
    "private: int __thiscall CObjectPathParser::keyref_list(void)",
    "public: long __thiscall CInstance::Commit(void)",
    "public: static int __stdcall Provider::initFailed(void)",
    "private: void __thiscall CObjectPathParser::Empty(void)",
    "class CHString __stdcall operator+(unsigned short,class CHString const &)",
    "protected: void __thiscall CHString::CopyBeforeWrite(void)",
    "public: bool __thiscall CInstance::GetVariant(unsigned short const *,struct tagVARIANT &)const",
    "private: int __thiscall CObjectPathParser::ns_list_rest(void)",
    "private: void __thiscall CObjectPathParser::Zero(void)",
    "private: long __thiscall CRegistry::myRegDeleteValue(struct HKEY__ *,unsigned short const *)",
    "public: int __thiscall CHPtrArray::Append(class CHPtrArray const &)",
    "public: static struct IWbemServices * __stdcall CWbemProviderGlue::GetNamespaceConnection(unsigned short const *)",
    "public: bool __thiscall MethodContext::SetStatusObject(struct IWbemClassObject *)",
    "private: static void __stdcall CWbemProviderGlue::UnlockFactoryMap(void)",
    "private: static void __stdcall CWbemProviderGlue::UnlockProviderMap(void)",
    "public: bool __thiscall CInstance::GetByte(unsigned short const *,unsigned char &)const",
    "public: __thiscall CHString::operator unsigned short const *(void)const",
    "private: static void __stdcall CWbemProviderGlue::GetComputerNameW(class CHString &)",
    "public: __thiscall CWbemProviderGlue::CWbemProviderGlue(long *)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(struct _SYSTEMTIME const &)",
    "public: int __thiscall WBEMTime::GetFILETIME(struct _FILETIME *)const",
    "public: void __thiscall CHString::TrimRight(void)",
    "public: virtual long __stdcall CWbemGlueFactory::CreateInstance(struct IUnknown *,struct _GUID const &,void * *)",
    "public: void __thiscall CHStringArray::FreeExtra(void)",
    "public: __thiscall CRegistrySearch::CRegistrySearch(void)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyPath(class CHString &)",
    "public: virtual __thiscall CThreadBase::~CThreadBase(void)",
    "public: class CHString __thiscall CHString::Left(int)const",
    "protected: virtual long __thiscall Provider::ExecMethod(class CInstance const &,unsigned short * const,class CInstance *,class CInstance *,long)",
    "public: void __thiscall CFrameworkQueryEx::GetPropertyBitMask(class CHPtrArray const &,void *)",
    "protected: class CHString const & __thiscall Provider::GetLocalComputerName(void)",
    "_DoCmd@16",
    "public: static long __stdcall CWbemProviderGlue::GetEmptyInstance(unsigned short const *,class CInstance * *,unsigned short const *)",
    "public: bool __thiscall CInstance::GetWORD(unsigned short const *,unsigned short &)const",
    "public: __thiscall CObjectPathParser::CObjectPathParser(enum ObjectParserFlags)",
    "public: bool __thiscall CInstance::SetByte(unsigned short const *,unsigned char)",
    "public: void __thiscall CHString::MakeUpper(void)",
    "private: long __thiscall CRegistry::myRegSetValueEx(struct HKEY__ *,unsigned short const *,unsigned long,unsigned long,unsigned char const *,unsigned long)",
    "public: __thiscall CHStringArray::CHStringArray(void)",
    "public: bool __thiscall CInstance::GetWBEMINT64(unsigned short const *,__int64 &)const",
    "public: unsigned long __thiscall CRegistry::OpenCurrentUser(unsigned short const *,unsigned long)",
    "public: long __thiscall CRegistry::CreateOpen(struct HKEY__ *,unsigned short const *,unsigned short *,unsigned long,unsigned long,struct _SECURITY_ATTRIBUTES *,unsigned long *)",
    "public: void __cdecl CHString::Format(unsigned int,...)",
    "public: int __thiscall ParsedObjectPath::IsClass(void)",
    "public: virtual long __stdcall CWbemProviderGlue::DeleteInstanceAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: class CHString const & __thiscall CHString::operator+=(class CHString const &)",
    "public: bool __thiscall WBEMTimeSpan::IsOk(void)const",
    "public: static void __stdcall CWbemProviderGlue::FrameworkLogoff(unsigned short const *,unsigned short const *)",
    "class CHString __stdcall operator+(class CHString const &,unsigned short)",
    "public: int __thiscall WBEMTime::operator>(class WBEMTime const &)const",
    "public: unsigned long __thiscall CRegistry::GetLongestSubKeySize(void)",
    "public: void __cdecl CHString::FormatMessageW(unsigned short const *,...)",
    "private: int __thiscall CObjectPathParser::objref_rest(void)",
    "public: static long __stdcall WBEMTime::GetLocalOffsetForDate(struct _SYSTEMTIME const *)",
    "public: unsigned long __thiscall CRegistry::DeleteCurrentKeyValue(unsigned short const *)",
    "public: class WBEMTimeSpan & __thiscall WBEMTimeSpan::operator=(class WBEMTimeSpan const &)",
    "public: int __thiscall ParsedObjectPath::IsRelative(unsigned short const *,unsigned short const *)",
    "public: class ProviderLog & __thiscall ProviderLog::operator=(class ProviderLog const &)",
    "public: long __thiscall CRegistry::DeleteKey(class CHString *)",
    "public: bool __thiscall CInstance::SetWBEMINT64(unsigned short const *,class CHString const &)",
    "const CThreadBase::`vftable'",
    "private: int __thiscall CObjectPathParser::ident_becomes_class(void)",
    "public: __thiscall CHString::CHString(unsigned short const *,int)",
    "class ProviderLog captainsLog",
    "private: static void __stdcall Provider::InitComputerName(void)",
    "public: struct IWbemClassObject * __thiscall MethodContext::GetStatusObject(void)",
    "public: __thiscall CHStringArray::~CHStringArray(void)",
    "public: static unsigned long __stdcall CWbemProviderGlue::GetPlatform(void)",
    "private: struct IWbemServices * __stdcall CWbemProviderGlue::InternalGetNamespaceConnection(unsigned short const *)",
    "public: virtual unsigned long __stdcall CWbemGlueFactory::Release(void)",
    "public: bool __thiscall CInstance::SetEmbeddedObject(unsigned short const *,class CInstance &)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyName(class CHString &)",
    "public: __thiscall CHString::CHString(unsigned short,int)",
    "public: int __thiscall ParsedObjectPath::IsInstance(void)",
    "public: __thiscall CWbemGlueFactory::~CWbemGlueFactory(void)",
    "protected: virtual long __thiscall Provider::ValidateMethodFlags(long)",
    "public: int __thiscall CHString::Find(unsigned short)const",
    "public: void __thiscall CFrameworkQuery::Init2(struct IWbemClassObject *)",
    "public: class CHString const & __thiscall CHString::operator+=(unsigned short)",
    "public: unsigned short * __thiscall ParsedObjectPath::GetParentNamespacePart(void)",
    "public: int __thiscall CHPtrArray::GetSize(void)const",
    "public: int __thiscall CHString::Collate(unsigned short const *)const",
    "public: bool __thiscall CInstance::SetStringArray(unsigned short const *,struct tagSAFEARRAY const &)",
    "public: bool __thiscall CFrameworkQuery::AllPropertiesAreRequired(void)",
    "public: int __thiscall WBEMTimeSpan::operator!=(class WBEMTimeSpan const &)const",
    "private: static unsigned long __stdcall CWinMsgEvent::dwThreadProc(void *)",
    "public: unsigned short * __thiscall ParsedObjectPath::GetKeyString(void)",
    "unsigned long __stdcall NormalizePath(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,class CHString &)",
    "public: virtual long __stdcall CWbemProviderGlue::ExecMethodAsync(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IWbemClassObject *,struct IWbemObjectSink *)",
    "private: long __thiscall Provider::ExecMethod(struct ParsedObjectPath *,unsigned short *,long,class CInstance *,class CInstance *,class MethodContext *)",
    "protected: virtual long __thiscall Provider::GetObject(class CInstance *,long,class CFrameworkQuery &)",
    "public: void __thiscall CHPtrArray::SetAt(int,void *)",
    "public: class WBEMTimeSpan __thiscall WBEMTime::operator-(class WBEMTime const &)",
    "class CHString __stdcall operator+(unsigned short const *,class CHString const &)",
    "private: static void __stdcall CWbemProviderGlue::LockFactoryMap(void)",
    "public: class CHString const & __thiscall CHString::operator+=(unsigned short const *)",
    "public: virtual long __stdcall CWbemProviderGlue::CreateClassEnumAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator-=(class WBEMTimeSpan const &)",
    "private: static void __stdcall CWbemProviderGlue::Init(void)",
    "public: class CHString const * __thiscall CHStringArray::GetData(void)const",
    "private: static void __stdcall CWbemProviderGlue::LockProviderMap(void)",
    "public: unsigned long __thiscall CRegistry::GetCurrentBinaryKeyValue(unsigned short const *,unsigned char *,unsigned long *)",
    "public: __thiscall CWbemGlueFactory::CWbemGlueFactory(class CWbemGlueFactory const &)",
    "public: long __thiscall CFrameworkQuery::GetValuesForProp(unsigned short const *,class CHStringArray &)",
    "public: static void __stdcall CHString::Release(struct CHStringData *)",
    "public: static int __stdcall CObjectPathParser::Unparse(struct ParsedObjectPath *,unsigned short * *)",
    "public: __thiscall WBEMTime::WBEMTime(struct _SYSTEMTIME const &)",
    "protected: void __thiscall CHString::ConcatInPlace(int,unsigned short const *)",
    "public: int __thiscall CRegistrySearch::SearchAndBuildList(class CHString,class CHPtrArray &,class CHString,class CHString,int,struct HKEY__ *)",
    "public: unsigned short * __thiscall CHString::AllocSysString(void)const",
    "public: int __thiscall WBEMTime::operator<=(class WBEMTime const &)const",
    "private: static class CAutoEvent CWinMsgEvent::mg_aeCreateWindow",
    "public: void __thiscall CFrameworkQuery::GetRequiredProperties(class CHStringArray &)",
    "public: class CWbemProviderGlue & __thiscall CWbemProviderGlue::operator=(class CWbemProviderGlue const &)",
    "public: __thiscall CThreadBase::CThreadBase(enum CThreadBase::THREAD_SAFETY_MECHANISM)",
    "protected: virtual long __thiscall Provider::DeleteInstance(class CInstance const &,long)",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(void)",
    "public: virtual long __stdcall CWbemProviderGlue::OpenNamespace(unsigned short * const,long,struct IWbemContext *,struct IWbemServices * *,struct IWbemCallResult * *)",
    "public: void __thiscall CHStringArray::RemoveAll(void)",
    "public: static long __stdcall CWbemProviderGlue::GetInstanceByPath(unsigned short const *,class CInstance * *,class MethodContext *)",
    "private: static class std::multimap,class std::allocator > CWinMsgEvent::mg_oSinkMap",
    "protected: struct CHStringData * __thiscall CHString::GetData(void)const",
    "public: virtual long __stdcall CWbemProviderGlue::ExecQuery(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IEnumWbemClassObject * *)",
    "public: virtual struct IWbemContext * __thiscall MethodContext::GetIWBEMContext(void)",
    "const MethodContext::`vftable'",
    "const CInstance::`vftable'",
    "public: virtual bool __thiscall CFrameworkQueryEx::IsExtended(void)",
    "public: void __thiscall WBEMTime::Clear(void)",
    "public: virtual long __stdcall CWbemProviderGlue::PutClass(struct IWbemClassObject *,long,struct IWbemContext *,struct IWbemCallResult * *)",
    "private: static long __stdcall CWinMsgEvent::MsgWndProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: int __thiscall WBEMTimeSpan::operator<=(class WBEMTimeSpan const &)const",
    "private: long __thiscall Provider::ExecuteQuery(class MethodContext *,class CFrameworkQuery &,long)",
    "void __stdcall SetCHStringResourceHandle(struct HINSTANCE__ *)",
    "public: int __thiscall CHString::Find(unsigned short const *)const",
    "private: static int __stdcall CWinMsgEvent::CtrlHandlerRoutine(unsigned long)",
    "public: static long __stdcall CWbemProviderGlue::GetAllInstances(unsigned short const *,class TRefPointerCollection *,unsigned short const *,class MethodContext *)",
    "public: class WBEMTimeSpan __thiscall WBEMTimeSpan::operator-(class WBEMTimeSpan const &)const",
    "public: unsigned short * __thiscall CFrameworkQuery::GetQueryClassName(void)",
    "public: bool __thiscall CInstance::GetWBEMINT64(unsigned short const *,class CHString &)const",
    "public: void __thiscall CHPtrArray::RemoveAt(int,int)",
    "private: void __thiscall CRegistrySearch::CheckAndAddToList(class CRegistry *,class CHString,class CHString,class CHPtrArray &,class CHString,class CHString,int)",
    "protected: virtual long __thiscall Provider::ValidateGetObjFlags(long)",
    "public: __thiscall CHString::CHString(char const *)",
    "public: struct ParsedObjectPath & __thiscall ParsedObjectPath::operator=(struct ParsedObjectPath const &)",
    "public: static long __stdcall CWbemProviderGlue::FillInstance(class CInstance *,unsigned short const *)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(struct HKEY__ *,unsigned short const *,unsigned long &)",
    "public: unsigned long __thiscall CRegistry::GetValueCount(void)",
    "private: static unsigned long CWbemProviderGlue::s_dwMajorVersion",
    "public: virtual long __stdcall CWbemProviderGlue::QueryInterface(struct _GUID const &,void * *)",
    "public: class WBEMTime __thiscall WBEMTime::operator+(class WBEMTimeSpan const &)const",
    "public: virtual long __stdcall CWbemProviderGlue::ExecQueryAsync(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: int __thiscall WBEMTime::operator!=(class WBEMTime const &)const",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(unsigned short const *,class CHString &)",
    "public: __thiscall CFrameworkQuery::CFrameworkQuery(void)",
    "public: __thiscall CInstance::CInstance(class CInstance const &)",
    "public: void __thiscall CRegistry::RewindSubKeys(void)",
    "public: class CHString __thiscall CHString::Mid(int,int)const",
    "public: __thiscall CHString::CHString(class CHString const &)",
    "public: unsigned short * __thiscall CHString::LockBuffer(void)",
    "public: bool __thiscall WBEMTime::IsOk(void)const",
    "public: class CRegistrySearch & __thiscall CRegistrySearch::operator=(class CRegistrySearch const &)",
    "public: __thiscall CHPtrArray::CHPtrArray(void)",
    "public: static long __stdcall CWbemProviderGlue::DecrementObjectCount(void)",
    "public: long __thiscall CInstance::AddRef(void)",
    "const CFrameworkQueryEx::`vftable'",
    "const Provider::`vftable'",
    "private: static class CCritSec CWinMsgEvent::mg_csMapLock",
    "protected: static int __stdcall CHString::SafeStrlen(unsigned short const *)",
    "private: int __thiscall Provider::ValidateIMOSPointer(void)",
    "private: long __thiscall CWbemProviderGlue::PreProcessPutInstanceParms(struct IWbemClassObject *,struct IWbemClassObject * *,struct IWbemContext *)",
    "public: bool __thiscall CInstance::GetWBEMINT64(unsigned short const *,unsigned __int64 &)const",
    "public: __thiscall CHString::~CHString(void)",
    "public: __thiscall CFrameworkQueryEx::CFrameworkQueryEx(class CFrameworkQueryEx const &)",
    "public: int __thiscall CRegistrySearch::LocateKeyByNameOrValueName(struct HKEY__ *,unsigned short const *,unsigned short const *,unsigned short const * *,unsigned long,class CHString &,class CHString &)",
    "public: void * & __thiscall CHPtrArray::operator[](int)",
    "public: bool __thiscall CInstance::GetCHString(unsigned short const *,class CHString &)const",
    "public: class CFrameworkQueryEx & __thiscall CFrameworkQueryEx::operator=(class CFrameworkQueryEx const &)",
    "private: long __thiscall CRegistry::myRegEnumKey(struct HKEY__ *,unsigned long,unsigned short *,unsigned long)",
    "public: bool __thiscall CInstance::SetCharSplat(unsigned short const *,char const *)",
    "public: class CHString const & __thiscall CHString::operator=(unsigned short)",
    "public: class CRegistry & __thiscall CRegistry::operator=(class CRegistry const &)",
    "private: int __thiscall CObjectPathParser::ns_or_server(void)",
    "protected: virtual void __thiscall Provider::Flush(void)",
    "public: bool __thiscall CInstance::SetWBEMINT64(unsigned short const *,__int64)",
    "private: static void __stdcall CWinMsgEvent::WindowsDispatch(void)",
    "public: virtual long __stdcall CWbemGlueFactory::QueryInterface(struct _GUID const &,void * *)",
    "public: bool __thiscall CInstance::GetEmbeddedObject(unsigned short const *,class CInstance * *,class MethodContext *)const",
    "public: void __thiscall CHPtrArray::InsertAt(int,void *,int)",
    "public: void * & __thiscall CHPtrArray::ElementAt(int)",
    "public: __thiscall ProviderLog::ProviderLog(class ProviderLog const &)",
    "public: __thiscall CRegistry::~CRegistry(void)",
    "private: int __thiscall CObjectPathParser::key_const(void)",
    "public: void __cdecl CHString::Format(unsigned short const *,...)",
    "private: static class Provider * __stdcall CWbemProviderGlue::SearchMapForProvider(unsigned short const *,unsigned short const *)",
    "public: class WBEMTime & __thiscall WBEMTime::operator=(class WBEMTime const &)",
    "public: static long __stdcall CWbemProviderGlue::FillInstance(class MethodContext *,class CInstance *)",
    "public: class MethodContext * __thiscall CInstance::GetMethodContext(void)const",
    "public: __thiscall CRegistry::CRegistry(void)",
    "public: __thiscall CHString::CHString(void)",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator=(long const &)",
    "public: unsigned short * __thiscall ParsedObjectPath::GetNamespacePart(void)",
    "private: long __thiscall Provider::PutInstance(struct IWbemClassObject *,long,class MethodContext *)",
    "private: static int __stdcall CRegistry::SetPlatformID(void)",
    "public: virtual long __stdcall CWbemProviderGlue::CreateInstanceEnum(unsigned short * const,long,struct IWbemContext *,struct IEnumWbemClassObject * *)",
    "public: unsigned short * __thiscall CHString::GetBufferSetLength(int)",
    "public: int __thiscall WBEMTimeSpan::operator==(class WBEMTimeSpan const &)const",
    "public: unsigned short * __thiscall WBEMTimeSpan::GetBSTR(void)const",
    "private: int __thiscall CObjectPathParser::optional_objref(void)",
    "public: unsigned short * __thiscall CHString::GetBuffer(int)",
    "public: class CWinMsgEvent & __thiscall CWinMsgEvent::operator=(class CWinMsgEvent const &)",
    "public: int __thiscall WBEMTime::GetSYSTEMTIME(struct _SYSTEMTIME *)const",
    "public: long __thiscall CFrameworkQueryEx::GetValuesForProp(unsigned short const *,class std::vector > &)",
    "private: long __thiscall Provider::GetObject(struct ParsedObjectPath *,class MethodContext *,long)",
    "protected: void __thiscall CHString::AssignCopy(int,unsigned short const *)",
    "public: void __thiscall CHString::ReleaseBuffer(int)",
    "public: static long __stdcall WBEMTime::GetLocalOffsetForDate(struct _FILETIME const *)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(unsigned short const *,class CHStringArray &)",
    "public: virtual long __stdcall CWbemProviderGlue::DeleteInstance(unsigned short * const,long,struct IWbemContext *,struct IWbemCallResult * *)",
    "public: void __thiscall CHPtrArray::Copy(class CHPtrArray const &)",
    "public: __thiscall std::_Lockit::~_Lockit(void)",
    "public: long __thiscall CRegistry::EnumerateAndGetValues(unsigned long &,unsigned short * &,unsigned char * &)",
    "private: void __thiscall CRegistry::SetDefaultValues(void)",
    "public: int __thiscall ParsedObjectPath::AddKeyRef(struct KeyRef *)",
    "public: void __thiscall CHStringArray::SetAtGrow(int,unsigned short const *)",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator-=(class WBEMTimeSpan const &)",
    "public: int __thiscall WBEMTime::operator<(class WBEMTime const &)const",
    "private: static class CCritSec CWinMsgEvent::mg_csWindowLock",
    "protected: static void __stdcall CWbemProviderGlue::RemoveFromFactoryMap(class CWbemGlueFactory const *)",
    "public: int __thiscall CHString::IsEmpty(void)const",
    "public: void __thiscall CHPtrArray::InsertAt(int,class CHPtrArray *)",
    "public: int __thiscall WBEMTime::Gettime_t(long *)const",
    "public: int __thiscall CHPtrArray::Add(void *)",
    "public: bool __thiscall CInstance::SetVariant(unsigned short const *,struct tagVARIANT const &)",
    "private: int __thiscall CObjectPathParser::begin_parse(void)",
    "private: static struct HWND__ * CWinMsgEvent::mg_hWnd",
    "public: class CHString const & __thiscall CHString::operator+=(char)",
    "public: __thiscall Provider::Provider(unsigned short const *,unsigned short const *)",
    "public: unsigned long __thiscall CRegistry::GetLongestValueData(void)",
    "public: virtual long __stdcall CWbemProviderGlue::PutInstanceAsync(struct IWbemClassObject *,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: unsigned long __thiscall CRegistry::GetCurrentBinaryKeyValue(struct HKEY__ *,unsigned short const *,unsigned char *,unsigned long *)",
    "public: int __thiscall CHString::CompareNoCase(unsigned short const *)const",
    "protected: int __thiscall CHString::LoadStringW(unsigned int,unsigned short *,unsigned int)",
    "public: void __thiscall CHString::FreeExtra(void)",
    "public: void __thiscall CHString::Release(void)",
    "private: void __thiscall CWbemProviderGlue::FlushAll(void)",
    "public: virtual long __stdcall CWbemProviderGlue::ExecNotificationQueryAsync(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(struct _FILETIME const &)",
    "public: __thiscall CHString::CHString(unsigned char const *)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(struct HKEY__ *,unsigned short const *,class CHString &)",
    "public: __thiscall CWbemProviderGlue::~CWbemProviderGlue(void)",
    "protected: virtual long __thiscall Provider::ExecQuery(class MethodContext *,class CFrameworkQuery &,long)",
    "public: class CThreadBase & __thiscall CThreadBase::operator=(class CThreadBase const &)",
    "public: long __thiscall CFrameworkQuery::GetValuesForProp(unsigned short const *,class std::vector > &)",
    "public: __thiscall WBEMTime::WBEMTime(unsigned short * const)",
    "public: virtual void __thiscall MethodContext::QueryPostProcess(void)",
    "private: static int CWbemProviderGlue::s_bInitted",
    "public: bool __thiscall CInstance::GetDOUBLE(unsigned short const *,double &)const",
    "public: __thiscall CRegistrySearch::CRegistrySearch(class CRegistrySearch const &)",
    "public: unsigned short __thiscall CHString::operator[](int)const",
    "private: int __thiscall CObjectPathParser::ns_or_class(void)",
    "public: static void __stdcall CWbemProviderGlue::FrameworkLogin(unsigned short const *,class Provider *,unsigned short const *)",
    "public: int __thiscall WBEMTimeSpan::Gettime_t(long *)const",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(long const &)",
    "public: void __cdecl ProviderLog::LocalLogMessage(unsigned short const *,int,enum ProviderLog::LogLevel,unsigned short const *,...)",
    "public: __thiscall CWinMsgEvent::~CWinMsgEvent(void)",
    "public: virtual __thiscall Provider::~Provider(void)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyValue(unsigned short const *,void *,unsigned long *)",
    "protected: static long * __stdcall CWbemProviderGlue::GetMapCountPtr(class CWbemGlueFactory const *)",
    "public: __thiscall MethodContext::MethodContext(class MethodContext const &)",
    "protected: unsigned long __thiscall CFrameworkQuery::IsInList(class CHStringArray const &,unsigned short const *)",
    "public: __thiscall std::_Lockit::_Lockit(void)",
    "public: static unsigned short const * __stdcall CWbemProviderGlue::GetCSDVersion(void)",
    "protected: bool __thiscall CWinMsgEvent::UnRegisterMessage(unsigned int,int)",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator+=(class WBEMTimeSpan const &)",
    "protected: virtual long __thiscall Provider::ValidateDeletionFlags(long)",
    "public: bool __thiscall CInstance::SetCharSplat(unsigned short const *,unsigned short const *)",
    "public: class CHString __thiscall CHString::SpanIncluding(unsigned short const *)const",
    "public: void __thiscall CHStringArray::InsertAt(int,class CHStringArray *)",
    "public: bool __thiscall CInstance::SetTimeSpan(unsigned short const *,class WBEMTimeSpan const &)",
    "public: void __thiscall CThreadBase::EndWrite(void)",
    "private: long __thiscall CRegistry::myRegEnumValue(struct HKEY__ *,unsigned long,unsigned short *,unsigned long *,unsigned long *,unsigned long *,unsigned char *,unsigned long *)",
    "public: __thiscall CRegistry::CRegistry(class CRegistry const &)",
    "protected: void __thiscall CHString::AllocBeforeWrite(int)",
    "public: bool __thiscall CInstance::GetStringArray(unsigned short const *,struct tagSAFEARRAY * &)const",
    "public: long __thiscall CRegistry::OpenLocalMachineKeyAndReadValue(unsigned short const *,unsigned short const *,class CHString &)",
    "const ProviderLog::`vftable'",
    "public: int __thiscall CFrameworkQueryEx::IsNTokenAnd(class CHStringArray &,class CHPtrArray &)",
    "public: virtual long __stdcall CWbemProviderGlue::CancelAsyncRequest(long)",
    "protected: virtual long __thiscall Provider::ValidateQueryFlags(long)",
    "public: __thiscall CAutoEvent::CAutoEvent(void)",
    "public: int __thiscall CHStringArray::GetUpperBound(void)const",
    "public: static int __stdcall CWbemProviderGlue::FrameworkLoginDLL(unsigned short const *,long *)",
    "public: int __thiscall ParsedObjectPath::IsObject(void)",
    "public: int __thiscall CHStringArray::Append(class CHStringArray const &)",
    "public: __thiscall CFrameworkQuery::CFrameworkQuery(class CFrameworkQuery const &)",
    "private: int __thiscall CObjectPathParser::objref(void)",
    "public: bool __thiscall CInstance::SetWBEMINT16(unsigned short const *,short const &)",
    "public: int __thiscall WBEMTimeSpan::operator>=(class WBEMTimeSpan const &)const",
    "private: void __thiscall CThreadBase::Lock(void)",
    "public: int __thiscall WBEMTime::GetStructtm(struct tm *)const",
    "private: struct IWbemClassObject * __thiscall Provider::GetClassObjectInterface(class MethodContext *)",
    "public: bool __thiscall CInstance::SetWBEMINT64(unsigned short const *,unsigned __int64)",
    "public: long __thiscall MethodContext::AddRef(void)",
    "public: bool __thiscall CInstance::IsNull(unsigned short const *)const",
    "private: int __thiscall CObjectPathParser::keyref(void)",
    "private: long __thiscall CRegistry::myRegQueryInfoKey(struct HKEY__ *,unsigned short *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,struct _FILETIME *)",
    "public: void __thiscall CHString::UnlockBuffer(void)",
    "public: virtual long __stdcall CWbemProviderGlue::QueryObjectSink(long,struct IWbemObjectSink * *)",
    "private: static long __stdcall CWbemProviderGlue::CheckImpersonationLevel(void)",
    "public: long __thiscall CFrameworkQuery::Init(unsigned short * const,unsigned short * const,long,class CHString &)",
    "public: bool __thiscall CInstance::GetWBEMINT16(unsigned short const *,short &)const",
    "public: __thiscall CHPtrArray::~CHPtrArray(void)",
    "private: unsigned long __thiscall CRegistry::OpenSubKey(void)",
    "public: class CreateMutexAsProcess & __thiscall CreateMutexAsProcess::operator=(class CreateMutexAsProcess const &)",
    "public: class CHString const & __thiscall CFrameworkQuery::GetQuery(void)",
    "public: class CHString __thiscall CHStringArray::operator[](int)const",
    "class CHString __stdcall operator+(class CHString const &,class CHString const &)",
    "public: void __thiscall CHStringArray::SetAt(int,unsigned short const *)",
    "private: static class CCritSec CWbemProviderGlue::s_csFactoryMap",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyValue(unsigned short const *,unsigned long &)",
    "public: unsigned short * __thiscall WBEMTime::GetBSTR(void)const",
    "public: virtual long __stdcall CWbemProviderGlue::DeleteClassAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "private: long __thiscall CRegistry::myRegOpenKeyEx(struct HKEY__ *,unsigned short const *,unsigned long,unsigned long,struct HKEY__ * *)",
    "public: bool __thiscall CFrameworkQuery::IsPropertyRequired(unsigned short const *)",
    "public: class CHString * __thiscall CHStringArray::GetData(void)",
    "public: bool __thiscall CInstance::SetCHString(unsigned short const *,char const *)",
    "protected: virtual long __thiscall Provider::PutInstance(class CInstance const &,long)",
    "private: int __thiscall CObjectPathParser::ns_list(void)",
    "public: class CAutoEvent & __thiscall CAutoEvent::operator=(class CAutoEvent const &)",
    "public: class CHString const & __thiscall CHString::operator=(class CHString const &)",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(int,int,int,int,int,int,int)",
    "public: bool __thiscall CInstance::GetWCHAR(unsigned short const *,unsigned short * *)const",
    "public: class WBEMTime const & __thiscall WBEMTime::operator+=(class WBEMTimeSpan const &)",
    "private: static void __stdcall CWinMsgEvent::DestroyMsgWindow(void)",
    "private: class CWbemProviderGlue * __thiscall MethodContext::GetProviderGlue(void)",
    "public: class CHString __thiscall CHString::Mid(int)const",
    "class CHString __stdcall operator+(class CHString const &,unsigned short const *)",
    "public: class CHStringArray & __thiscall CHStringArray::operator=(class CHStringArray const &)",
    "private: static int Provider::initFailed_",
    "public: __thiscall CWbemProviderGlue::CWbemProviderGlue(class CWbemProviderGlue const &)",
    "public: __thiscall ParsedObjectPath::~ParsedObjectPath(void)",
    "public: void __thiscall CHStringArray::RemoveAt(int,int)",
    "public: bool __thiscall CInstance::GetTimeSpan(unsigned short const *,class WBEMTimeSpan &)const",
    "private: int __thiscall CObjectPathParser::propname(void)",
    "public: class CHPtrArray & __thiscall CHPtrArray::operator=(class CHPtrArray const &)",
    "public: __thiscall MethodContext::MethodContext(struct IWbemContext *,class CWbemProviderGlue *)",
    "public: void __thiscall CHString::SetAt(int,unsigned short)",
    "public: long __thiscall CRegistry::OpenAndEnumerateSubKeys(struct HKEY__ *,unsigned short const *,unsigned long)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(struct HKEY__ *,unsigned short const *,class CHStringArray &)",
    "private: long __thiscall CWbemProviderGlue::NullOutUnsetProperties(struct IWbemClassObject *,struct IWbemClassObject * *,struct tagVARIANT const &)",
    "public: static bool __stdcall CWbemProviderGlue::SetStatusObject(class MethodContext *,unsigned short const *,unsigned short const *,long,struct tagSAFEARRAY const *,struct tagSAFEARRAY const *)",
    "public: void __cdecl CHString::FormatMessageW(unsigned int,...)",
    "public: virtual long __thiscall CFrameworkQueryEx::InitEx(unsigned short * const,unsigned short * const,long,class CHString &)",
    "public: bool __thiscall CInstance::SetWORD(unsigned short const *,unsigned short)",
    "public: __thiscall KeyRef::KeyRef(unsigned short const *,struct tagVARIANT const *)",
    "protected: virtual long __thiscall Provider::ValidatePutInstanceFlags(long)",
    "public: int __thiscall CThreadBase::BeginRead(unsigned long)",
    "protected: long __thiscall Provider::ValidateFlags(long,enum Provider::FlagDefs)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(unsigned short const *,class CHString &)",
    "private: void __thiscall CFrameworkQuery::Reset(void)",
    "private: static class CCritSec CWbemProviderGlue::s_csProviderMap",
    "protected: static long __stdcall CWbemProviderGlue::DecrementMapCount(class CWbemGlueFactory const *)",
    "public: void __thiscall CHStringArray::Copy(class CHStringArray const &)",
    "public: class CHString const & __thiscall CHString::operator=(unsigned short const *)",
    "private: unsigned long __thiscall CRegistry::GetCurrentRawSubKeyValue(unsigned short const *,void *,unsigned long *,unsigned long *)",
    "public: int __thiscall CThreadBase::BeginWrite(unsigned long)",
    "public: static int __stdcall CWbemProviderGlue::FrameworkLogoffDLL(unsigned short const *)",
    "public: int __thiscall WBEMTimeSpan::operator<(class WBEMTimeSpan const &)const",
    "public: void __thiscall CObjectPathParser::Free(struct ParsedObjectPath *)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(unsigned short const *,class CHStringArray &)",
    "protected: void __thiscall CHString::ConcatCopy(int,unsigned short const *,int,unsigned short const *)",
    "public: struct HKEY__ * __thiscall CRegistry::GethKey(void)"
  ],
  "framedynos.dll": [
    "public: void __thiscall CRegistry::Close(void)",
    "private: static void __stdcall CWinMsgEvent::CreateMsgProvider(void)",
    "public: __thiscall ParsedObjectPath::ParsedObjectPath(void)",
    "public: static bool __stdcall CWbemProviderGlue::IsDerivedFrom(unsigned short const *,unsigned short const *,class MethodContext *,unsigned short const *)",
    "public: virtual long __stdcall CWbemProviderGlue::CreateInstanceEnumAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "protected: virtual long __thiscall Provider::GetObject(class CInstance *,long)",
    "public: static unsigned short * __stdcall CObjectPathParser::GetRelativePath(unsigned short *)",
    "public: int __thiscall CAutoEvent::Signal(void)",
    "private: static struct IWbemClassObject * __stdcall CWbemProviderGlue::GetStatusObject(class MethodContext *,unsigned short const *)",
    "public: __thiscall CHString::CHString(unsigned short const *)",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(long const &)",
    "public: enum ProviderLog::LogLevel __thiscall ProviderLog::IsLoggingOn(class CHString *)",
    "public: class CWbemGlueFactory & __thiscall CWbemGlueFactory::operator=(class CWbemGlueFactory const &)",
    "public: __thiscall WBEMTime::WBEMTime(struct tm const &)",
    "public: int __thiscall CHStringArray::Add(unsigned short const *)",
    "public: class Provider & __thiscall Provider::operator=(class Provider const &)",
    "public: int __thiscall CHStringArray::GetSize(void)const",
    "public: void __thiscall CHPtrArray::FreeExtra(void)",
    "public: class CHString const & __thiscall CHString::operator=(char)",
    "private: static class CCritSec CWbemProviderGlue::m_csStatusObject",
    "private: int __thiscall CObjectPathParser::keyref_term(void)",
    "public: class CHString __thiscall CHString::Right(int)const",
    "public: void __thiscall CThreadBase::`default constructor closure'(void)",
    "public: __thiscall CreateMutexAsProcess::CreateMutexAsProcess(unsigned short const *)",
    "public: class CHString __thiscall CHStringArray::GetAt(int)const",
    "public: unsigned __int64 __thiscall WBEMTime::GetTime(void)const",
    "protected: void __thiscall CWinMsgEvent::UnRegisterAllMessages(void)",
    "protected: bool __thiscall Provider::SetCreationClassName(class CInstance *)",
    "public: void * __thiscall CHPtrArray::GetAt(int)const",
    "public: __thiscall KeyRef::KeyRef(void)",
    "private: int __thiscall CObjectPathParser::NextToken(void)",
    "public: __thiscall KeyRef::~KeyRef(void)",
    "protected: virtual long __thiscall Provider::ValidateEnumerationFlags(long)",
    "public: __thiscall WBEMTime::WBEMTime(long const &)",
    "public: struct KeyRef & __thiscall KeyRef::operator=(struct KeyRef const &)",
    "public: __thiscall CInstance::CInstance(struct IWbemClassObject *,class MethodContext *)",
    "private: static long CWbemProviderGlue::s_lObjects",
    "public: virtual long __stdcall CWbemProviderGlue::Initialize(unsigned short *,long,unsigned short *,unsigned short *,struct IWbemServices *,struct IWbemContext *,struct IWbemProviderInitSink *)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValueExpand(struct HKEY__ *,unsigned short const *,class CHString &)",
    "public: static class CWbemGlueFactory * __stdcall CWbemGlueFactory::Create(long *)",
    "private: int __thiscall CObjectPathParser::ident_becomes_ns(void)",
    "public: static long __stdcall CWbemProviderGlue::GetInstanceKeysByPath(unsigned short const *,class CInstance * *,class MethodContext *)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyCount(void)",
    "public: __thiscall CFrameworkQueryEx::~CFrameworkQueryEx(void)",
    "public: void __thiscall CHPtrArray::SetSize(int,int)",
    "public: int __thiscall ParsedObjectPath::SetClassName(unsigned short const *)",
    "private: static void __stdcall CWbemProviderGlue::UnInit(void)",
    "public: __thiscall CObjectPathParser::~CObjectPathParser(void)",
    "public: long __thiscall MethodContext::Release(void)",
    "public: virtual long __stdcall CWbemProviderGlue::DeleteClass(unsigned short * const,long,struct IWbemContext *,struct IWbemCallResult * *)",
    "public: int __thiscall CHString::GetAllocLength(void)const",
    "public: bool __thiscall CInstance::GetDWORD(unsigned short const *,unsigned long &)const",
    "public: int __thiscall CHString::FindOneOf(unsigned short const *)const",
    "private: static int CRegistry::s_fPlatformSet",
    "protected: class CHString const & __thiscall CFrameworkQuery::GetNamespace(void)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(unsigned short const *,unsigned long &)",
    "public: static long __stdcall CWbemProviderGlue::GetEmptyInstance(class MethodContext *,unsigned short const *,class CInstance * *,unsigned short const *)",
    "public: virtual long __stdcall CWbemGlueFactory::LockServer(int)",
    "public: int __thiscall CHString::GetLength(void)const",
    "protected: virtual void __thiscall CThreadBase::OnFinalRelease(void)",
    "public: class CInstance & __thiscall CInstance::operator=(class CInstance const &)",
    "public: unsigned short * __thiscall CRegistry::GetClassNameW(void)",
    "public: class CHString const & __thiscall CHString::operator=(unsigned char const *)",
    "public: unsigned long __thiscall CRegistry::GetLongestValueName(void)",
    "private: long __thiscall CRegistry::myRegDeleteKey(struct HKEY__ *,unsigned short const *)",
    "public: __thiscall CWinMsgEvent::CWinMsgEvent(void)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(struct tm const &)",
    "protected: void __thiscall CHString::Init(void)",
    "public: unsigned long __thiscall CAutoEvent::Wait(unsigned long)",
    "public: int __thiscall CHString::LoadStringW(unsigned int)",
    "public: bool __thiscall CInstance::Setbool(unsigned short const *,bool)",
    "public: void __thiscall CHStringArray::SetSize(int,int)",
    "public: bool __thiscall CFrameworkQuery::KeysOnly(void)",
    "public: class CObjectPathParser & __thiscall CObjectPathParser::operator=(class CObjectPathParser const &)",
    "const CWbemGlueFactory::`vftable'",
    "public: virtual unsigned long __stdcall CWbemProviderGlue::AddRef(void)",
    "public: static void __stdcall CWbemProviderGlue::IncrementObjectCount(void)",
    "const CWinMsgEvent::`vftable'",
    "public: int __thiscall CFrameworkQueryEx::Is3TokenOR(unsigned short const *,unsigned short const *,struct tagVARIANT &,struct tagVARIANT &)",
    "protected: class CHString const & __thiscall Provider::GetProviderName(void)",
    "public: static long __stdcall CWbemProviderGlue::GetAllDerivedInstancesAsynch(unsigned short const *,class Provider *,long (__stdcall*)(class Provider *,class CInstance *,class MethodContext *,void *),unsigned short const *,class MethodContext *,void *)",
    "public: __thiscall WBEMTime::WBEMTime(void)",
    "private: void __thiscall CThreadBase::Unlock(void)",
    "private: static class Provider * __stdcall CWbemProviderGlue::AddProviderToMap(unsigned short const *,unsigned short const *,class Provider *)",
    "public: int __thiscall WBEMTime::operator>=(class WBEMTime const &)const",
    "private: void __thiscall CRegistry::PrepareToReOpen(void)",
    "public: bool __thiscall CInstance::SetCHString(unsigned short const *,unsigned short const *)",
    "protected: void __thiscall CHString::AllocCopy(class CHString &,int,int,int)const",
    "public: static unsigned long __stdcall CWbemProviderGlue::GetOSMajorVersion(void)",
    "public: virtual long __stdcall CWbemProviderGlue::PutInstance(struct IWbemClassObject *,long,struct IWbemContext *,struct IWbemCallResult * *)",
    "public: bool __thiscall CInstance::GetStatus(unsigned short const *,bool &,unsigned short &)const",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator=(struct _FILETIME const &)",
    "public: virtual long __stdcall CWbemProviderGlue::GetObject(unsigned short * const,long,struct IWbemContext *,struct IWbemClassObject * *,struct IWbemCallResult * *)",
    "public: virtual long __stdcall CWbemProviderGlue::PutClassAsync(struct IWbemClassObject *,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "protected: static long __stdcall CWbemProviderGlue::DecrementMapCount(long *)",
    "public: class MethodContext & __thiscall MethodContext::operator=(class MethodContext const &)",
    "public: class CFrameworkQuery & __thiscall CFrameworkQuery::operator=(class CFrameworkQuery const &)",
    "private: unsigned long __thiscall CRegistry::GetCurrentRawKeyValue(struct HKEY__ *,unsigned short const *,void *,unsigned long *,unsigned long *)",
    "public: void __thiscall CHString::FormatV(unsigned short const *,char *)",
    "public: class WBEMTimeSpan __thiscall WBEMTimeSpan::operator+(class WBEMTimeSpan const &)const",
    "const CWbemProviderGlue::`vftable'{for `IWbemServices'}",
    "public: __thiscall ProviderLog::ProviderLog(void)",
    "public: bool __thiscall CInstance::Getbool(unsigned short const *,bool &)const",
    "public: void __thiscall ProviderLog::LocalLogMessage(unsigned short const *,unsigned short const *,int,enum ProviderLog::LogLevel)",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(struct _FILETIME const &)",
    "public: void __thiscall CHString::MakeLower(void)",
    "public: int __thiscall CHString::Compare(unsigned short const *)const",
    "public: void __thiscall CWbemGlueFactory::Destroy(void)",
    "public: int __thiscall WBEMTimeSpan::operator>(class WBEMTimeSpan const &)const",
    "public: int __thiscall CHString::ReverseFind(unsigned short)const",
    "public: bool __thiscall CInstance::SetCHString(unsigned short const *,class CHString const &)",
    "public: class CHString __thiscall CHString::SpanExcluding(unsigned short const *)const",
    "public: __thiscall Provider::Provider(class Provider const &)",
    "public: unsigned short * __thiscall WBEMTime::GetDMTF(int)const",
    "public: static long __stdcall CWbemProviderGlue::GetInstancesByQueryAsynch(unsigned short const *,class Provider *,long (__stdcall*)(class Provider *,class CInstance *,class MethodContext *,void *),unsigned short const *,class MethodContext *,void *)",
    "public: int __thiscall ParsedObjectPath::AddNamespace(unsigned short const *)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(struct HKEY__ *,unsigned short const *,class CHStringArray &)",
    "private: static struct HWND__ * __stdcall CWinMsgEvent::CreateMsgWindow(void)",
    "private: static long __stdcall CWbemProviderGlue::GetInstanceFromCIMOM(unsigned short const *,unsigned short const *,class MethodContext *,class CInstance * *)",
    "public: __thiscall CFrameworkQueryEx::CFrameworkQueryEx(void)",
    "public: bool __thiscall CInstance::SetDOUBLE(unsigned short const *,double)",
    "public: __thiscall CRegistrySearch::~CRegistrySearch(void)",
    "public: virtual __thiscall MethodContext::~MethodContext(void)",
    "private: long __thiscall Provider::DeleteInstance(struct ParsedObjectPath *,long,class MethodContext *)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(unsigned short const *,unsigned long &)",
    "private: long __thiscall CRegistry::myRegCreateKeyEx(struct HKEY__ *,unsigned short const *,unsigned long,unsigned short *,unsigned long,unsigned long,struct _SECURITY_ATTRIBUTES * const,struct HKEY__ * *,unsigned long *)",
    "public: virtual unsigned long __stdcall CWbemProviderGlue::Release(void)",
    "public: int __thiscall ParsedObjectPath::AddKeyRef(unsigned short const *,struct tagVARIANT const *)",
    "public: __thiscall CThreadBase::CThreadBase(class CThreadBase const &)",
    "public: void __thiscall CObjectPathParser::`default constructor closure'(void)",
    "private: void __thiscall CWbemProviderGlue::AddFlushPtr(void *)",
    "public: bool __thiscall CInstance::SetCharSplat(unsigned short const *,unsigned long)",
    "private: long __thiscall Provider::CreateInstanceEnum(class MethodContext *,long)",
    "protected: void __thiscall CWinMsgEvent::RegisterForMessage(unsigned int,int)",
    "protected: bool __thiscall Provider::GetLocalInstancePath(class CInstance const *,class CHString &)",
    "private: int __thiscall Provider::SetKeyFromParsedObjectPath(class CInstance *,struct ParsedObjectPath *)",
    "public: unsigned short * __thiscall WBEMTime::GetDMTFNonNtfs(void)const",
    "public: void __thiscall WBEMTimeSpan::Clear(void)",
    "public: long __thiscall CFrameworkQuery::Init(struct ParsedObjectPath *,struct IWbemContext *,unsigned short const *,class CHString &)",
    "protected: static long __stdcall CWbemProviderGlue::IncrementMapCount(class CWbemGlueFactory const *)",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator=(unsigned short * const)",
    "public: bool __thiscall CInstance::SetDWORD(unsigned short const *,unsigned long)",
    "public: class WBEMTime __thiscall WBEMTime::operator-(class WBEMTimeSpan const &)const",
    "public: __thiscall CAutoEvent::~CAutoEvent(void)",
    "public: static long __stdcall CWbemProviderGlue::GetInstancePropertiesByPath(unsigned short const *,class CInstance * *,class MethodContext *,class CHStringArray &)",
    "private: static class std::set,class std::allocator > CWbemProviderGlue::m_FlushPtrs",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(struct HKEY__ *,unsigned short const *,unsigned long &)",
    "public: unsigned long __thiscall CRegistry::GetLongestClassStringSize(void)",
    "public: long __thiscall CRegistry::DeleteValue(unsigned short const *)",
    "public: int __thiscall WBEMTime::SetDMTF(unsigned short * const)",
    "public: class CHString const & __thiscall CHString::operator=(class CHString *)",
    "public: void __thiscall CHString::Empty(void)",
    "protected: class CInstance * __thiscall Provider::CreateNewInstance(class MethodContext *)",
    "public: class CHString & __thiscall CHStringArray::operator[](int)",
    "public: long __thiscall CThreadBase::Release(void)",
    "public: static long __stdcall CWbemProviderGlue::GetAllInstancesAsynch(unsigned short const *,class Provider *,long (__stdcall*)(class Provider *,class CInstance *,class MethodContext *,void *),unsigned short const *,class MethodContext *,void *)",
    "public: static long __stdcall WBEMTime::GetLocalOffsetForDate(struct tm const *)",
    "protected: void __thiscall CHString::AllocBuffer(int)",
    "protected: int __thiscall CFrameworkQuery::IsReference(unsigned short const *)",
    "public: void __thiscall ParsedObjectPath::ClearKeys(void)",
    "protected: class CHString const & __thiscall Provider::GetNamespace(void)",
    "private: static struct IWbemClassObject * CWbemProviderGlue::m_pStatusObject",
    "public: __thiscall CFrameworkQuery::~CFrameworkQuery(void)",
    "public: __thiscall CWbemProviderGlue::CWbemProviderGlue(void)",
    "public: int __thiscall CHPtrArray::GetUpperBound(void)const",
    "public: static long __stdcall CWbemProviderGlue::GetInstancesByQuery(unsigned short const *,class TRefPointerCollection *,class MethodContext *,unsigned short const *)",
    "public: virtual long __stdcall CWbemProviderGlue::GetObjectAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: void __thiscall CHString::MakeReverse(void)",
    "private: static class CCritSec CWbemProviderGlue::m_csFlushPtrs",
    "public: void __thiscall CHPtrArray::SetAtGrow(int,void *)",
    "public: __thiscall CreateMutexAsProcess::~CreateMutexAsProcess(void)",
    "protected: static void __stdcall CWbemProviderGlue::AddToFactoryMap(class CWbemGlueFactory const *,long *)",
    "public: static long __stdcall CWbemProviderGlue::GetAllDerivedInstances(unsigned short const *,class TRefPointerCollection *,class MethodContext *,unsigned short const *)",
    "public: __thiscall CWinMsgEvent::CWinMsgEvent(class CWinMsgEvent const &)",
    "public: virtual unsigned long __stdcall CWbemGlueFactory::AddRef(void)",
    "public: void const * * __thiscall CHPtrArray::GetData(void)const",
    "public: void __thiscall CThreadBase::EndRead(void)",
    "private: static unsigned long CRegistry::s_dwPlatform",
    "protected: static long __stdcall CWbemProviderGlue::IncrementMapCount(long *)",
    "public: class CHString & __thiscall CHStringArray::ElementAt(int)",
    "public: long __thiscall CInstance::Release(void)",
    "public: unsigned long __thiscall CRegistry::NextSubKey(void)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyValue(unsigned short const *,class CHString &)",
    "public: virtual __thiscall ProviderLog::~ProviderLog(void)",
    "public: __thiscall WBEMTime::WBEMTime(struct _FILETIME const &)",
    "public: unsigned short __thiscall CHString::GetAt(int)const",
    "private: void __thiscall ProviderLog::CheckFileSize(union _LARGE_INTEGER &,class CHString const &)",
    "public: bool __thiscall CInstance::GetDateTime(unsigned short const *,class WBEMTime &)const",
    "private: void __thiscall CRegistry::CloseSubKey(void)",
    "public: int __thiscall CRegistrySearch::FreeSearchList(int,class CHPtrArray &)",
    "public: unsigned long __thiscall CRegistry::DeleteCurrentKeyValue(struct HKEY__ *,unsigned short const *)",
    "private: static unsigned short * CWbemProviderGlue::s_wstrCSDVersion",
    "public: unsigned long __thiscall CRegistry::GetCurrentBinaryKeyValue(unsigned short const *,class CHString &)",
    "public: void __thiscall CHPtrArray::RemoveAll(void)",
    "public: virtual __thiscall CInstance::~CInstance(void)",
    "public: int __thiscall CObjectPathParser::Parse(unsigned short const *,struct ParsedObjectPath * *)",
    "public: void __thiscall CHStringArray::InsertAt(int,unsigned short const *,int)",
    "public: void __thiscall CHString::TrimLeft(void)",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(unsigned short * const)",
    "public: static struct IWbemServices * __stdcall CWbemProviderGlue::GetNamespaceConnection(unsigned short const *,class MethodContext *)",
    "const CWbemProviderGlue::`vftable'{for `IWbemProviderInit'}",
    "private: long __thiscall CRegistry::myRegQueryValueEx(struct HKEY__ *,unsigned short const *,unsigned long *,unsigned long *,unsigned char *,unsigned long *)",
    "public: bool __thiscall CInstance::SetDateTime(unsigned short const *,class WBEMTime const &)",
    "private: static class CHString Provider::s_strComputerName",
    "public: bool __thiscall CInstance::SetWCHARSplat(unsigned short const *,unsigned short const *)",
    "public: long __thiscall CThreadBase::AddRef(void)",
    "public: class CHString const & __thiscall CHString::operator=(char const *)",
    "public: long __thiscall CRegistry::Open(struct HKEY__ *,unsigned short const *,unsigned long)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(struct HKEY__ *,unsigned short const *,class CHString &)",
    "private: static void * CWinMsgEvent::mg_hDevNotify",
    "public: static int __stdcall CWbemProviderGlue::FrameworkLoginDLL(unsigned short const *)",
    "public: static long __stdcall WBEMTime::GetLocalOffsetForDate(long const &)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(unsigned short * const)",
    "public: virtual long __stdcall CWbemProviderGlue::ExecMethod(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IWbemClassObject *,struct IWbemClassObject * *,struct IWbemCallResult * *)",
    "public: int __thiscall ParsedObjectPath::AddKeyRefEx(unsigned short const *,struct tagVARIANT const *)",
    "protected: void __thiscall CInstance::LogError(unsigned short const *,unsigned short const *,unsigned short const *,long)const",
    "public: static int __stdcall CWbemProviderGlue::FrameworkLogoffDLL(unsigned short const *,long *)",
    "private: static unsigned long CWbemProviderGlue::s_dwPlatform",
    "public: unsigned __int64 __thiscall WBEMTimeSpan::GetTime(void)const",
    "public: int __thiscall WBEMTime::operator==(class WBEMTime const &)const",
    "protected: class CHString __thiscall Provider::MakeLocalPath(class CHString const &)",
    "protected: virtual long __thiscall Provider::EnumerateInstances(class MethodContext *,long)",
    "public: static class CWbemGlueFactory * __stdcall CWbemGlueFactory::Create(void)",
    "public: int __thiscall ParsedObjectPath::IsLocal(unsigned short const *)",
    "public: virtual long __stdcall CWbemProviderGlue::ExecNotificationQuery(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IEnumWbemClassObject * *)",
    "public: __thiscall CWbemGlueFactory::CWbemGlueFactory(long *)",
    "public: int __thiscall WBEMTimeSpan::GetFILETIME(struct _FILETIME *)const",
    "public: virtual long __stdcall CWbemProviderGlue::CancelAsyncCall(struct IWbemObjectSink *)",
    "public: void * __thiscall CHPtrArray::operator[](int)const",
    "public: __thiscall CWbemGlueFactory::CWbemGlueFactory(void)",
    "public: struct IWbemClassObject * __thiscall CInstance::GetClassObjectInterface(void)",
    "protected: long __thiscall Provider::Commit(class CInstance *,bool)",
    "public: bool __thiscall CInstance::SetNull(unsigned short const *)",
    "public: virtual long __stdcall CWbemProviderGlue::CreateClassEnum(unsigned short * const,long,struct IWbemContext *,struct IEnumWbemClassObject * *)",
    "public: void * * __thiscall CHPtrArray::GetData(void)",
    "private: static void * CWinMsgEvent::mg_hThreadPumpHandle",
    "private: int __thiscall CObjectPathParser::keyref_list(void)",
    "public: long __thiscall CInstance::Commit(void)",
    "public: static int __stdcall Provider::initFailed(void)",
    "private: void __thiscall CObjectPathParser::Empty(void)",
    "class CHString __stdcall operator+(unsigned short,class CHString const &)",
    "protected: void __thiscall CHString::CopyBeforeWrite(void)",
    "public: bool __thiscall CInstance::GetVariant(unsigned short const *,struct tagVARIANT &)const",
    "private: int __thiscall CObjectPathParser::ns_list_rest(void)",
    "private: void __thiscall CObjectPathParser::Zero(void)",
    "private: long __thiscall CRegistry::myRegDeleteValue(struct HKEY__ *,unsigned short const *)",
    "public: int __thiscall CHPtrArray::Append(class CHPtrArray const &)",
    "public: static struct IWbemServices * __stdcall CWbemProviderGlue::GetNamespaceConnection(unsigned short const *)",
    "public: bool __thiscall MethodContext::SetStatusObject(struct IWbemClassObject *)",
    "private: static void __stdcall CWbemProviderGlue::UnlockFactoryMap(void)",
    "private: static void __stdcall CWbemProviderGlue::UnlockProviderMap(void)",
    "public: bool __thiscall CInstance::GetByte(unsigned short const *,unsigned char &)const",
    "public: __thiscall CHString::operator unsigned short const *(void)const",
    "private: static void __stdcall CWbemProviderGlue::GetComputerNameW(class CHString &)",
    "public: __thiscall CWbemProviderGlue::CWbemProviderGlue(long *)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(struct _SYSTEMTIME const &)",
    "public: int __thiscall WBEMTime::GetFILETIME(struct _FILETIME *)const",
    "public: void __thiscall CHString::TrimRight(void)",
    "public: virtual long __stdcall CWbemGlueFactory::CreateInstance(struct IUnknown *,struct _GUID const &,void * *)",
    "public: void __thiscall CHStringArray::FreeExtra(void)",
    "public: __thiscall CRegistrySearch::CRegistrySearch(void)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyPath(class CHString &)",
    "public: virtual __thiscall CThreadBase::~CThreadBase(void)",
    "public: class CHString __thiscall CHString::Left(int)const",
    "protected: virtual long __thiscall Provider::ExecMethod(class CInstance const &,unsigned short * const,class CInstance *,class CInstance *,long)",
    "public: void __thiscall CFrameworkQueryEx::GetPropertyBitMask(class CHPtrArray const &,void *)",
    "protected: class CHString const & __thiscall Provider::GetLocalComputerName(void)",
    "_DoCmd@16",
    "public: static long __stdcall CWbemProviderGlue::GetEmptyInstance(unsigned short const *,class CInstance * *,unsigned short const *)",
    "public: bool __thiscall CInstance::GetWORD(unsigned short const *,unsigned short &)const",
    "public: __thiscall CObjectPathParser::CObjectPathParser(enum ObjectParserFlags)",
    "public: bool __thiscall CInstance::SetByte(unsigned short const *,unsigned char)",
    "public: void __thiscall CHString::MakeUpper(void)",
    "private: long __thiscall CRegistry::myRegSetValueEx(struct HKEY__ *,unsigned short const *,unsigned long,unsigned long,unsigned char const *,unsigned long)",
    "public: __thiscall CHStringArray::CHStringArray(void)",
    "public: bool __thiscall CInstance::GetWBEMINT64(unsigned short const *,__int64 &)const",
    "public: unsigned long __thiscall CRegistry::OpenCurrentUser(unsigned short const *,unsigned long)",
    "public: long __thiscall CRegistry::CreateOpen(struct HKEY__ *,unsigned short const *,unsigned short *,unsigned long,unsigned long,struct _SECURITY_ATTRIBUTES *,unsigned long *)",
    "private: static class std::multimap,class std::allocator > > CWinMsgEvent::mg_oSinkMap",
    "public: void __cdecl CHString::Format(unsigned int,...)",
    "public: int __thiscall ParsedObjectPath::IsClass(void)",
    "public: virtual long __stdcall CWbemProviderGlue::DeleteInstanceAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: class CHString const & __thiscall CHString::operator+=(class CHString const &)",
    "public: bool __thiscall WBEMTimeSpan::IsOk(void)const",
    "public: static void __stdcall CWbemProviderGlue::FrameworkLogoff(unsigned short const *,unsigned short const *)",
    "class CHString __stdcall operator+(class CHString const &,unsigned short)",
    "public: int __thiscall WBEMTime::operator>(class WBEMTime const &)const",
    "public: unsigned long __thiscall CRegistry::GetLongestSubKeySize(void)",
    "public: void __cdecl CHString::FormatMessageW(unsigned short const *,...)",
    "private: int __thiscall CObjectPathParser::objref_rest(void)",
    "public: static long __stdcall WBEMTime::GetLocalOffsetForDate(struct _SYSTEMTIME const *)",
    "public: unsigned long __thiscall CRegistry::DeleteCurrentKeyValue(unsigned short const *)",
    "public: class WBEMTimeSpan & __thiscall WBEMTimeSpan::operator=(class WBEMTimeSpan const &)",
    "public: int __thiscall ParsedObjectPath::IsRelative(unsigned short const *,unsigned short const *)",
    "public: class ProviderLog & __thiscall ProviderLog::operator=(class ProviderLog const &)",
    "public: long __thiscall CRegistry::DeleteKey(class CHString *)",
    "public: bool __thiscall CInstance::SetWBEMINT64(unsigned short const *,class CHString const &)",
    "const CThreadBase::`vftable'",
    "private: int __thiscall CObjectPathParser::ident_becomes_class(void)",
    "public: __thiscall CHString::CHString(unsigned short const *,int)",
    "class ProviderLog captainsLog",
    "private: static void __stdcall Provider::InitComputerName(void)",
    "public: struct IWbemClassObject * __thiscall MethodContext::GetStatusObject(void)",
    "public: __thiscall CHStringArray::~CHStringArray(void)",
    "public: static unsigned long __stdcall CWbemProviderGlue::GetPlatform(void)",
    "private: struct IWbemServices * __stdcall CWbemProviderGlue::InternalGetNamespaceConnection(unsigned short const *)",
    "public: virtual unsigned long __stdcall CWbemGlueFactory::Release(void)",
    "public: bool __thiscall CInstance::SetEmbeddedObject(unsigned short const *,class CInstance &)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyName(class CHString &)",
    "public: __thiscall CHString::CHString(unsigned short,int)",
    "public: int __thiscall ParsedObjectPath::IsInstance(void)",
    "public: __thiscall CWbemGlueFactory::~CWbemGlueFactory(void)",
    "protected: virtual long __thiscall Provider::ValidateMethodFlags(long)",
    "public: int __thiscall CHString::Find(unsigned short)const",
    "public: void __thiscall CFrameworkQuery::Init2(struct IWbemClassObject *)",
    "public: class CHString const & __thiscall CHString::operator+=(unsigned short)",
    "public: unsigned short * __thiscall ParsedObjectPath::GetParentNamespacePart(void)",
    "public: int __thiscall CHPtrArray::GetSize(void)const",
    "public: int __thiscall CHString::Collate(unsigned short const *)const",
    "public: bool __thiscall CInstance::SetStringArray(unsigned short const *,struct tagSAFEARRAY const &)",
    "public: bool __thiscall CFrameworkQuery::AllPropertiesAreRequired(void)",
    "public: int __thiscall WBEMTimeSpan::operator!=(class WBEMTimeSpan const &)const",
    "private: static unsigned long __stdcall CWinMsgEvent::dwThreadProc(void *)",
    "public: unsigned short * __thiscall ParsedObjectPath::GetKeyString(void)",
    "unsigned long __stdcall NormalizePath(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,class CHString &)",
    "public: virtual long __stdcall CWbemProviderGlue::ExecMethodAsync(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IWbemClassObject *,struct IWbemObjectSink *)",
    "private: long __thiscall Provider::ExecMethod(struct ParsedObjectPath *,unsigned short *,long,class CInstance *,class CInstance *,class MethodContext *)",
    "protected: virtual long __thiscall Provider::GetObject(class CInstance *,long,class CFrameworkQuery &)",
    "public: void __thiscall CHPtrArray::SetAt(int,void *)",
    "public: class WBEMTimeSpan __thiscall WBEMTime::operator-(class WBEMTime const &)",
    "class CHString __stdcall operator+(unsigned short const *,class CHString const &)",
    "private: static class std::map,class std::allocator > > CWbemProviderGlue::s_factorymap",
    "private: static void __stdcall CWbemProviderGlue::LockFactoryMap(void)",
    "public: class CHString const & __thiscall CHString::operator+=(unsigned short const *)",
    "public: virtual long __stdcall CWbemProviderGlue::CreateClassEnumAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator-=(class WBEMTimeSpan const &)",
    "private: static void __stdcall CWbemProviderGlue::Init(void)",
    "public: class CHString const * __thiscall CHStringArray::GetData(void)const",
    "private: static void __stdcall CWbemProviderGlue::LockProviderMap(void)",
    "public: unsigned long __thiscall CRegistry::GetCurrentBinaryKeyValue(unsigned short const *,unsigned char *,unsigned long *)",
    "public: __thiscall CWbemGlueFactory::CWbemGlueFactory(class CWbemGlueFactory const &)",
    "public: long __thiscall CFrameworkQuery::GetValuesForProp(unsigned short const *,class CHStringArray &)",
    "public: static void __stdcall CHString::Release(struct CHStringData *)",
    "public: static int __stdcall CObjectPathParser::Unparse(struct ParsedObjectPath *,unsigned short * *)",
    "public: __thiscall WBEMTime::WBEMTime(struct _SYSTEMTIME const &)",
    "protected: void __thiscall CHString::ConcatInPlace(int,unsigned short const *)",
    "public: int __thiscall CRegistrySearch::SearchAndBuildList(class CHString,class CHPtrArray &,class CHString,class CHString,int,struct HKEY__ *)",
    "public: unsigned short * __thiscall CHString::AllocSysString(void)const",
    "public: int __thiscall WBEMTime::operator<=(class WBEMTime const &)const",
    "private: static class CAutoEvent CWinMsgEvent::mg_aeCreateWindow",
    "public: void __thiscall CFrameworkQuery::GetRequiredProperties(class CHStringArray &)",
    "public: class CWbemProviderGlue & __thiscall CWbemProviderGlue::operator=(class CWbemProviderGlue const &)",
    "public: __thiscall CThreadBase::CThreadBase(enum CThreadBase::THREAD_SAFETY_MECHANISM)",
    "protected: virtual long __thiscall Provider::DeleteInstance(class CInstance const &,long)",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(void)",
    "public: virtual long __stdcall CWbemProviderGlue::OpenNamespace(unsigned short * const,long,struct IWbemContext *,struct IWbemServices * *,struct IWbemCallResult * *)",
    "public: void __thiscall CHStringArray::RemoveAll(void)",
    "public: static long __stdcall CWbemProviderGlue::GetInstanceByPath(unsigned short const *,class CInstance * *,class MethodContext *)",
    "protected: struct CHStringData * __thiscall CHString::GetData(void)const",
    "public: virtual long __stdcall CWbemProviderGlue::ExecQuery(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IEnumWbemClassObject * *)",
    "public: virtual struct IWbemContext * __thiscall MethodContext::GetIWBEMContext(void)",
    "const MethodContext::`vftable'",
    "const CInstance::`vftable'",
    "public: virtual bool __thiscall CFrameworkQueryEx::IsExtended(void)",
    "public: void __thiscall WBEMTime::Clear(void)",
    "public: virtual long __stdcall CWbemProviderGlue::PutClass(struct IWbemClassObject *,long,struct IWbemContext *,struct IWbemCallResult * *)",
    "private: static long __stdcall CWinMsgEvent::MsgWndProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: int __thiscall WBEMTimeSpan::operator<=(class WBEMTimeSpan const &)const",
    "private: long __thiscall Provider::ExecuteQuery(class MethodContext *,class CFrameworkQuery &,long)",
    "void __stdcall SetCHStringResourceHandle(struct HINSTANCE__ *)",
    "public: int __thiscall CHString::Find(unsigned short const *)const",
    "private: static int __stdcall CWinMsgEvent::CtrlHandlerRoutine(unsigned long)",
    "public: static long __stdcall CWbemProviderGlue::GetAllInstances(unsigned short const *,class TRefPointerCollection *,unsigned short const *,class MethodContext *)",
    "public: class WBEMTimeSpan __thiscall WBEMTimeSpan::operator-(class WBEMTimeSpan const &)const",
    "public: unsigned short * __thiscall CFrameworkQuery::GetQueryClassName(void)",
    "public: bool __thiscall CInstance::GetWBEMINT64(unsigned short const *,class CHString &)const",
    "public: void __thiscall CHPtrArray::RemoveAt(int,int)",
    "private: void __thiscall CRegistrySearch::CheckAndAddToList(class CRegistry *,class CHString,class CHString,class CHPtrArray &,class CHString,class CHString,int)",
    "protected: virtual long __thiscall Provider::ValidateGetObjFlags(long)",
    "public: __thiscall CHString::CHString(char const *)",
    "public: struct ParsedObjectPath & __thiscall ParsedObjectPath::operator=(struct ParsedObjectPath const &)",
    "public: static long __stdcall CWbemProviderGlue::FillInstance(class CInstance *,unsigned short const *)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(struct HKEY__ *,unsigned short const *,unsigned long &)",
    "public: unsigned long __thiscall CRegistry::GetValueCount(void)",
    "private: static unsigned long CWbemProviderGlue::s_dwMajorVersion",
    "public: virtual long __stdcall CWbemProviderGlue::QueryInterface(struct _GUID const &,void * *)",
    "public: class WBEMTime __thiscall WBEMTime::operator+(class WBEMTimeSpan const &)const",
    "public: virtual long __stdcall CWbemProviderGlue::ExecQueryAsync(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: int __thiscall WBEMTime::operator!=(class WBEMTime const &)const",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(unsigned short const *,class CHString &)",
    "public: __thiscall CFrameworkQuery::CFrameworkQuery(void)",
    "public: __thiscall CInstance::CInstance(class CInstance const &)",
    "public: void __thiscall CRegistry::RewindSubKeys(void)",
    "public: class CHString __thiscall CHString::Mid(int,int)const",
    "public: __thiscall CHString::CHString(class CHString const &)",
    "public: unsigned short * __thiscall CHString::LockBuffer(void)",
    "public: bool __thiscall WBEMTime::IsOk(void)const",
    "public: class CRegistrySearch & __thiscall CRegistrySearch::operator=(class CRegistrySearch const &)",
    "public: __thiscall CHPtrArray::CHPtrArray(void)",
    "public: static long __stdcall CWbemProviderGlue::DecrementObjectCount(void)",
    "public: long __thiscall CInstance::AddRef(void)",
    "const CFrameworkQueryEx::`vftable'",
    "const Provider::`vftable'",
    "private: static class CCritSec CWinMsgEvent::mg_csMapLock",
    "protected: static int __stdcall CHString::SafeStrlen(unsigned short const *)",
    "private: int __thiscall Provider::ValidateIMOSPointer(void)",
    "private: long __thiscall CWbemProviderGlue::PreProcessPutInstanceParms(struct IWbemClassObject *,struct IWbemClassObject * *,struct IWbemContext *)",
    "public: bool __thiscall CInstance::GetWBEMINT64(unsigned short const *,unsigned __int64 &)const",
    "public: __thiscall CHString::~CHString(void)",
    "public: __thiscall CFrameworkQueryEx::CFrameworkQueryEx(class CFrameworkQueryEx const &)",
    "public: int __thiscall CRegistrySearch::LocateKeyByNameOrValueName(struct HKEY__ *,unsigned short const *,unsigned short const *,unsigned short const * *,unsigned long,class CHString &,class CHString &)",
    "public: void * & __thiscall CHPtrArray::operator[](int)",
    "public: bool __thiscall CInstance::GetCHString(unsigned short const *,class CHString &)const",
    "public: class CFrameworkQueryEx & __thiscall CFrameworkQueryEx::operator=(class CFrameworkQueryEx const &)",
    "private: long __thiscall CRegistry::myRegEnumKey(struct HKEY__ *,unsigned long,unsigned short *,unsigned long)",
    "public: bool __thiscall CInstance::SetCharSplat(unsigned short const *,char const *)",
    "public: class CHString const & __thiscall CHString::operator=(unsigned short)",
    "public: class CRegistry & __thiscall CRegistry::operator=(class CRegistry const &)",
    "private: int __thiscall CObjectPathParser::ns_or_server(void)",
    "protected: virtual void __thiscall Provider::Flush(void)",
    "public: bool __thiscall CInstance::SetWBEMINT64(unsigned short const *,__int64)",
    "private: static void __stdcall CWinMsgEvent::WindowsDispatch(void)",
    "public: virtual long __stdcall CWbemGlueFactory::QueryInterface(struct _GUID const &,void * *)",
    "public: bool __thiscall CInstance::GetEmbeddedObject(unsigned short const *,class CInstance * *,class MethodContext *)const",
    "public: void __thiscall CHPtrArray::InsertAt(int,void *,int)",
    "public: void * & __thiscall CHPtrArray::ElementAt(int)",
    "public: __thiscall ProviderLog::ProviderLog(class ProviderLog const &)",
    "public: __thiscall CRegistry::~CRegistry(void)",
    "private: int __thiscall CObjectPathParser::key_const(void)",
    "public: void __cdecl CHString::Format(unsigned short const *,...)",
    "private: static class Provider * __stdcall CWbemProviderGlue::SearchMapForProvider(unsigned short const *,unsigned short const *)",
    "public: class WBEMTime & __thiscall WBEMTime::operator=(class WBEMTime const &)",
    "public: static long __stdcall CWbemProviderGlue::FillInstance(class MethodContext *,class CInstance *)",
    "public: class MethodContext * __thiscall CInstance::GetMethodContext(void)const",
    "public: __thiscall CRegistry::CRegistry(void)",
    "public: __thiscall CHString::CHString(void)",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator=(long const &)",
    "public: unsigned short * __thiscall ParsedObjectPath::GetNamespacePart(void)",
    "private: long __thiscall Provider::PutInstance(struct IWbemClassObject *,long,class MethodContext *)",
    "private: static int __stdcall CRegistry::SetPlatformID(void)",
    "public: virtual long __stdcall CWbemProviderGlue::CreateInstanceEnum(unsigned short * const,long,struct IWbemContext *,struct IEnumWbemClassObject * *)",
    "public: unsigned short * __thiscall CHString::GetBufferSetLength(int)",
    "public: int __thiscall WBEMTimeSpan::operator==(class WBEMTimeSpan const &)const",
    "public: unsigned short * __thiscall WBEMTimeSpan::GetBSTR(void)const",
    "private: int __thiscall CObjectPathParser::optional_objref(void)",
    "public: unsigned short * __thiscall CHString::GetBuffer(int)",
    "public: class CWinMsgEvent & __thiscall CWinMsgEvent::operator=(class CWinMsgEvent const &)",
    "public: int __thiscall WBEMTime::GetSYSTEMTIME(struct _SYSTEMTIME *)const",
    "public: long __thiscall CFrameworkQueryEx::GetValuesForProp(unsigned short const *,class std::vector > &)",
    "private: long __thiscall Provider::GetObject(struct ParsedObjectPath *,class MethodContext *,long)",
    "protected: void __thiscall CHString::AssignCopy(int,unsigned short const *)",
    "public: void __thiscall CHString::ReleaseBuffer(int)",
    "public: static long __stdcall WBEMTime::GetLocalOffsetForDate(struct _FILETIME const *)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(unsigned short const *,class CHStringArray &)",
    "public: virtual long __stdcall CWbemProviderGlue::DeleteInstance(unsigned short * const,long,struct IWbemContext *,struct IWbemCallResult * *)",
    "public: void __thiscall CHPtrArray::Copy(class CHPtrArray const &)",
    "public: long __thiscall CRegistry::EnumerateAndGetValues(unsigned long &,unsigned short * &,unsigned char * &)",
    "private: void __thiscall CRegistry::SetDefaultValues(void)",
    "public: int __thiscall ParsedObjectPath::AddKeyRef(struct KeyRef *)",
    "public: void __thiscall CHStringArray::SetAtGrow(int,unsigned short const *)",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator-=(class WBEMTimeSpan const &)",
    "public: int __thiscall WBEMTime::operator<(class WBEMTime const &)const",
    "private: static class CCritSec CWinMsgEvent::mg_csWindowLock",
    "protected: static void __stdcall CWbemProviderGlue::RemoveFromFactoryMap(class CWbemGlueFactory const *)",
    "public: int __thiscall CHString::IsEmpty(void)const",
    "public: void __thiscall CHPtrArray::InsertAt(int,class CHPtrArray *)",
    "public: int __thiscall WBEMTime::Gettime_t(long *)const",
    "public: int __thiscall CHPtrArray::Add(void *)",
    "public: bool __thiscall CInstance::SetVariant(unsigned short const *,struct tagVARIANT const &)",
    "private: int __thiscall CObjectPathParser::begin_parse(void)",
    "private: static struct HWND__ * CWinMsgEvent::mg_hWnd",
    "public: class CHString const & __thiscall CHString::operator+=(char)",
    "public: __thiscall Provider::Provider(unsigned short const *,unsigned short const *)",
    "public: unsigned long __thiscall CRegistry::GetLongestValueData(void)",
    "public: virtual long __stdcall CWbemProviderGlue::PutInstanceAsync(struct IWbemClassObject *,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: unsigned long __thiscall CRegistry::GetCurrentBinaryKeyValue(struct HKEY__ *,unsigned short const *,unsigned char *,unsigned long *)",
    "public: int __thiscall CHString::CompareNoCase(unsigned short const *)const",
    "protected: int __thiscall CHString::LoadStringW(unsigned int,unsigned short *,unsigned int)",
    "public: void __thiscall CHString::FreeExtra(void)",
    "public: void __thiscall CHString::Release(void)",
    "private: void __thiscall CWbemProviderGlue::FlushAll(void)",
    "public: virtual long __stdcall CWbemProviderGlue::ExecNotificationQueryAsync(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(struct _FILETIME const &)",
    "public: __thiscall CHString::CHString(unsigned char const *)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(struct HKEY__ *,unsigned short const *,class CHString &)",
    "public: __thiscall CWbemProviderGlue::~CWbemProviderGlue(void)",
    "protected: virtual long __thiscall Provider::ExecQuery(class MethodContext *,class CFrameworkQuery &,long)",
    "public: class CThreadBase & __thiscall CThreadBase::operator=(class CThreadBase const &)",
    "public: long __thiscall CFrameworkQuery::GetValuesForProp(unsigned short const *,class std::vector > &)",
    "public: __thiscall WBEMTime::WBEMTime(unsigned short * const)",
    "public: virtual void __thiscall MethodContext::QueryPostProcess(void)",
    "private: static int CWbemProviderGlue::s_bInitted",
    "public: bool __thiscall CInstance::GetDOUBLE(unsigned short const *,double &)const",
    "public: __thiscall CRegistrySearch::CRegistrySearch(class CRegistrySearch const &)",
    "public: unsigned short __thiscall CHString::operator[](int)const",
    "private: int __thiscall CObjectPathParser::ns_or_class(void)",
    "public: static void __stdcall CWbemProviderGlue::FrameworkLogin(unsigned short const *,class Provider *,unsigned short const *)",
    "public: int __thiscall WBEMTimeSpan::Gettime_t(long *)const",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(long const &)",
    "public: void __cdecl ProviderLog::LocalLogMessage(unsigned short const *,int,enum ProviderLog::LogLevel,unsigned short const *,...)",
    "public: __thiscall CWinMsgEvent::~CWinMsgEvent(void)",
    "public: virtual __thiscall Provider::~Provider(void)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyValue(unsigned short const *,void *,unsigned long *)",
    "protected: static long * __stdcall CWbemProviderGlue::GetMapCountPtr(class CWbemGlueFactory const *)",
    "public: __thiscall MethodContext::MethodContext(class MethodContext const &)",
    "protected: unsigned long __thiscall CFrameworkQuery::IsInList(class CHStringArray const &,unsigned short const *)",
    "public: static unsigned short const * __stdcall CWbemProviderGlue::GetCSDVersion(void)",
    "protected: bool __thiscall CWinMsgEvent::UnRegisterMessage(unsigned int,int)",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator+=(class WBEMTimeSpan const &)",
    "protected: virtual long __thiscall Provider::ValidateDeletionFlags(long)",
    "public: bool __thiscall CInstance::SetCharSplat(unsigned short const *,unsigned short const *)",
    "public: class CHString __thiscall CHString::SpanIncluding(unsigned short const *)const",
    "public: void __thiscall CHStringArray::InsertAt(int,class CHStringArray *)",
    "public: bool __thiscall CInstance::SetTimeSpan(unsigned short const *,class WBEMTimeSpan const &)",
    "public: void __thiscall CThreadBase::EndWrite(void)",
    "private: long __thiscall CRegistry::myRegEnumValue(struct HKEY__ *,unsigned long,unsigned short *,unsigned long *,unsigned long *,unsigned long *,unsigned char *,unsigned long *)",
    "public: __thiscall CRegistry::CRegistry(class CRegistry const &)",
    "protected: void __thiscall CHString::AllocBeforeWrite(int)",
    "public: bool __thiscall CInstance::GetStringArray(unsigned short const *,struct tagSAFEARRAY * &)const",
    "public: long __thiscall CRegistry::OpenLocalMachineKeyAndReadValue(unsigned short const *,unsigned short const *,class CHString &)",
    "const ProviderLog::`vftable'",
    "public: int __thiscall CFrameworkQueryEx::IsNTokenAnd(class CHStringArray &,class CHPtrArray &)",
    "public: virtual long __stdcall CWbemProviderGlue::CancelAsyncRequest(long)",
    "protected: virtual long __thiscall Provider::ValidateQueryFlags(long)",
    "public: __thiscall CAutoEvent::CAutoEvent(void)",
    "public: int __thiscall CHStringArray::GetUpperBound(void)const",
    "public: static int __stdcall CWbemProviderGlue::FrameworkLoginDLL(unsigned short const *,long *)",
    "public: int __thiscall ParsedObjectPath::IsObject(void)",
    "public: int __thiscall CHStringArray::Append(class CHStringArray const &)",
    "public: __thiscall CFrameworkQuery::CFrameworkQuery(class CFrameworkQuery const &)",
    "private: int __thiscall CObjectPathParser::objref(void)",
    "public: bool __thiscall CInstance::SetWBEMINT16(unsigned short const *,short const &)",
    "public: int __thiscall WBEMTimeSpan::operator>=(class WBEMTimeSpan const &)const",
    "private: void __thiscall CThreadBase::Lock(void)",
    "public: int __thiscall WBEMTime::GetStructtm(struct tm *)const",
    "private: struct IWbemClassObject * __thiscall Provider::GetClassObjectInterface(class MethodContext *)",
    "public: bool __thiscall CInstance::SetWBEMINT64(unsigned short const *,unsigned __int64)",
    "public: long __thiscall MethodContext::AddRef(void)",
    "public: bool __thiscall CInstance::IsNull(unsigned short const *)const",
    "private: int __thiscall CObjectPathParser::keyref(void)",
    "private: static class std::map,class std::allocator > > CWbemProviderGlue::s_providersmap",
    "private: long __thiscall CRegistry::myRegQueryInfoKey(struct HKEY__ *,unsigned short *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,struct _FILETIME *)",
    "public: void __thiscall CHString::UnlockBuffer(void)",
    "public: virtual long __stdcall CWbemProviderGlue::QueryObjectSink(long,struct IWbemObjectSink * *)",
    "private: static long __stdcall CWbemProviderGlue::CheckImpersonationLevel(void)",
    "public: long __thiscall CFrameworkQuery::Init(unsigned short * const,unsigned short * const,long,class CHString &)",
    "public: bool __thiscall CInstance::GetWBEMINT16(unsigned short const *,short &)const",
    "public: __thiscall CHPtrArray::~CHPtrArray(void)",
    "private: unsigned long __thiscall CRegistry::OpenSubKey(void)",
    "public: class CreateMutexAsProcess & __thiscall CreateMutexAsProcess::operator=(class CreateMutexAsProcess const &)",
    "public: class CHString const & __thiscall CFrameworkQuery::GetQuery(void)",
    "public: class CHString __thiscall CHStringArray::operator[](int)const",
    "class CHString __stdcall operator+(class CHString const &,class CHString const &)",
    "public: void __thiscall CHStringArray::SetAt(int,unsigned short const *)",
    "private: static class CCritSec CWbemProviderGlue::s_csFactoryMap",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyValue(unsigned short const *,unsigned long &)",
    "public: unsigned short * __thiscall WBEMTime::GetBSTR(void)const",
    "public: virtual long __stdcall CWbemProviderGlue::DeleteClassAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "private: long __thiscall CRegistry::myRegOpenKeyEx(struct HKEY__ *,unsigned short const *,unsigned long,unsigned long,struct HKEY__ * *)",
    "public: bool __thiscall CFrameworkQuery::IsPropertyRequired(unsigned short const *)",
    "public: class CHString * __thiscall CHStringArray::GetData(void)",
    "public: bool __thiscall CInstance::SetCHString(unsigned short const *,char const *)",
    "protected: virtual long __thiscall Provider::PutInstance(class CInstance const &,long)",
    "private: int __thiscall CObjectPathParser::ns_list(void)",
    "public: class CAutoEvent & __thiscall CAutoEvent::operator=(class CAutoEvent const &)",
    "public: class CHString const & __thiscall CHString::operator=(class CHString const &)",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(int,int,int,int,int,int,int)",
    "public: bool __thiscall CInstance::GetWCHAR(unsigned short const *,unsigned short * *)const",
    "public: class WBEMTime const & __thiscall WBEMTime::operator+=(class WBEMTimeSpan const &)",
    "private: static void __stdcall CWinMsgEvent::DestroyMsgWindow(void)",
    "private: class CWbemProviderGlue * __thiscall MethodContext::GetProviderGlue(void)",
    "public: class CHString __thiscall CHString::Mid(int)const",
    "class CHString __stdcall operator+(class CHString const &,unsigned short const *)",
    "public: class CHStringArray & __thiscall CHStringArray::operator=(class CHStringArray const &)",
    "private: static int Provider::initFailed_",
    "public: __thiscall CWbemProviderGlue::CWbemProviderGlue(class CWbemProviderGlue const &)",
    "public: __thiscall ParsedObjectPath::~ParsedObjectPath(void)",
    "public: void __thiscall CHStringArray::RemoveAt(int,int)",
    "public: bool __thiscall CInstance::GetTimeSpan(unsigned short const *,class WBEMTimeSpan &)const",
    "private: int __thiscall CObjectPathParser::propname(void)",
    "public: class CHPtrArray & __thiscall CHPtrArray::operator=(class CHPtrArray const &)",
    "public: __thiscall MethodContext::MethodContext(struct IWbemContext *,class CWbemProviderGlue *)",
    "public: void __thiscall CHString::SetAt(int,unsigned short)",
    "public: long __thiscall CRegistry::OpenAndEnumerateSubKeys(struct HKEY__ *,unsigned short const *,unsigned long)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(struct HKEY__ *,unsigned short const *,class CHStringArray &)",
    "private: long __thiscall CWbemProviderGlue::NullOutUnsetProperties(struct IWbemClassObject *,struct IWbemClassObject * *,struct tagVARIANT const &)",
    "public: static bool __stdcall CWbemProviderGlue::SetStatusObject(class MethodContext *,unsigned short const *,unsigned short const *,long,struct tagSAFEARRAY const *,struct tagSAFEARRAY const *)",
    "public: void __cdecl CHString::FormatMessageW(unsigned int,...)",
    "public: virtual long __thiscall CFrameworkQueryEx::InitEx(unsigned short * const,unsigned short * const,long,class CHString &)",
    "public: bool __thiscall CInstance::SetWORD(unsigned short const *,unsigned short)",
    "public: __thiscall KeyRef::KeyRef(unsigned short const *,struct tagVARIANT const *)",
    "protected: virtual long __thiscall Provider::ValidatePutInstanceFlags(long)",
    "public: int __thiscall CThreadBase::BeginRead(unsigned long)",
    "protected: long __thiscall Provider::ValidateFlags(long,enum Provider::FlagDefs)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(unsigned short const *,class CHString &)",
    "private: void __thiscall CFrameworkQuery::Reset(void)",
    "private: static class CCritSec CWbemProviderGlue::s_csProviderMap",
    "protected: static long __stdcall CWbemProviderGlue::DecrementMapCount(class CWbemGlueFactory const *)",
    "public: void __thiscall CHStringArray::Copy(class CHStringArray const &)",
    "public: class CHString const & __thiscall CHString::operator=(unsigned short const *)",
    "private: unsigned long __thiscall CRegistry::GetCurrentRawSubKeyValue(unsigned short const *,void *,unsigned long *,unsigned long *)",
    "public: int __thiscall CThreadBase::BeginWrite(unsigned long)",
    "public: static int __stdcall CWbemProviderGlue::FrameworkLogoffDLL(unsigned short const *)",
    "public: int __thiscall WBEMTimeSpan::operator<(class WBEMTimeSpan const &)const",
    "public: void __thiscall CObjectPathParser::Free(struct ParsedObjectPath *)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(unsigned short const *,class CHStringArray &)",
    "protected: void __thiscall CHString::ConcatCopy(int,unsigned short const *,int,unsigned short const *)",
    "public: struct HKEY__ * __thiscall CRegistry::GethKey(void)"
  ],
  "frprov.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "fsutilext.dll": [
    "FindNextVolumeMountPointWStub",
    "DeviceInstIsRemovableWorker",
    "SetThreadUILanguageStub",
    "FindFirstVolumeMountPointWStub",
    "GetRemovableDeviceInstRecursWorker",
    "SystemParametersInfoWStub",
    "GetWidgetWorker",
    "GetDeviceInstanceWorker",
    "SendWithSenseParseWorker",
    "FindVolumeMountPointCloseStub",
    "CheckSonyMSWorker",
    "GetDeviceIDDiskFromDeviceIDVolumeWorker",
    "InvalidateFveWorker",
    "WaitForUnitAndReportProgressWorker"
  ],
  "fthsvc.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "FthSysprepSpecialize",
    "WdiHandleInstance"
  ],
  "fundisc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "fveapi.dll": [
    "FveClearUserFlags",
    "FveAddAuthMethodInformation",
    "FveBindDataVolume",
    "FveNotifyVolumeAfterFormat",
    "FveGetDeviceLockoutData",
    "FveAuthElementFromPinW",
    "FveKeyManagement",
    "FveConversionEncryptPendingRebootEx",
    "FveLockVolume",
    "FveEraseDrive",
    "FveIsHybridVolumeW",
    "FveIsHardwareReadyForConversion",
    "FveDisableDeviceLockoutState",
    "FveSetUserFlags",
    "FveOpenVolumeW",
    "FveUpdateDeviceLockoutState",
    "FveSetDescriptionW",
    "FveIsBoundDataVolumeToOSVolume",
    "FveDraCertPresentInRegistry",
    "FveEnableRawAccessEx",
    "FveGetDataSet",
    "FveSysSetUserFlags",
    "FveValidateDeviceLockoutState",
    "FveGetIdentity",
    "FveCloseHandle",
    "FveUnlockVolumeWithAccessMode",
    "FveFindNextVolume",
    "FveConversionStop",
    "FveAddAuthMethodSid",
    "FveUnlockVolumeAuthMethodSid",
    "FveGetAuthMethodSid",
    "FveCloseVolume",
    "FveProtectorTypeToFlags",
    "FveGetFveMethodEDrv",
    "FveConversionEncrypt",
    "FveCheckTpmCapability",
    "FveDiscardChanges",
    "FveApplyGroupPolicy",
    "FveFindFirstVolume",
    "FveGetStatusW",
    "FveIsPassphraseCompatibleW",
    "FveAuthElementFromRecoveryPasswordW",
    "FveAttemptAutoUnlock",
    "FveGetKeyPackage",
    "FveIsAnyDataVolumeBoundToOSVolume",
    "FveAuthElementFromPassPhraseW",
    "FveGetStatus",
    "FveSetFipsAllowDisabled",
    "FveEnableRawAccess",
    "FveInitVolume",
    "FveConversionDecrypt",
    "FveInitializeDeviceEncryption",
    "FveServiceDiscoveryVolume",
    "FveInitVolumeEx",
    "InternalFveIsVolumeEncrypted",
    "FveUnbindDataVolume",
    "FveGetAuthMethodSidInformation",
    "FveAuthElementToRecoveryPasswordW",
    "FveCanStandardUsersChangePassphraseByProxy",
    "FveIsSchemaExtInstalled",
    "FveCanStandardUsersChangePin",
    "FveIsDeviceLockable",
    "FveGetUserFlags",
    "FveAuthElementWriteExternalKeyW",
    "FveUpdateBandIdBcd",
    "FveUpgradeVolume",
    "FveGetDescriptionW",
    "FveDecrementClearKeyCounter",
    "FveApplyNkpCertChanges",
    "FveSysOpenVolumeW",
    "FveBackupRecoveryInformationToAD",
    "FveSysGetUserFlags",
    "FveGenerateNkpSessionKeys",
    "FveSetAllowKeyExport",
    "FveGetVolumeNameW",
    "FveIsDeviceLockedOut",
    "FveConversionEncryptPendingReboot",
    "FveConversionStopEx",
    "FveEnableRawAccessW",
    "FveFlagsToProtectorType",
    "FveNeedsDiscoveryVolumeUpdate",
    "FveSysClearUserFlags",
    "FveGetFipsAllowDisabled",
    "FveGetIdentificationFieldW",
    "FveQuery",
    "FveCheckPassphrasePolicy",
    "FveOpenVolumeByHandle",
    "FveConversionResume",
    "FveAuthElementGetKeyFileNameW",
    "FveIsBoundDataVolume",
    "FveValidateExistingPinW",
    "FveAuthElementReadExternalKeyW",
    "FveGetAuthMethodGuids",
    "FveIsRecoveryPasswordGroupValidW",
    "FveUnlockVolume",
    "FveUpdateDeviceLockoutStateEx",
    "FveGetClearKeyCounter",
    "FveSetFveMethod",
    "FveLogRecoveryReason",
    "FveIsHybridVolume",
    "FveIsVolumeEncryptable",
    "FveValidateExistingPassphraseW",
    "FveGetAllowKeyExport",
    "FveRevertVolume",
    "FveGetSecureBootBindingState",
    "FveCommitChanges",
    "FveConversionPause",
    "FveGetAuthMethodInformation",
    "FveSysCloseVolume",
    "FveLockDevice",
    "FveConversionEncryptEx",
    "FveIsRecoveryPasswordValidW",
    "FveDeleteAuthMethod",
    "FveSetIdentificationFieldW",
    "FveOpenVolumeExW",
    "FveUpdatePinW",
    "FveUnbindAllDataVolumeFromOSVolume",
    "FveGetFveMethod"
  ],
  "fveapibase.dll": [
    "FveClearUserFlags",
    "FveGetUserFlags",
    "FveAuthElementWriteExternalKeyW",
    "FveAuthElementReadExternalKeyW",
    "FveFindNextVolume",
    "FveGetAuthMethodGuids",
    "FveIsRecoveryPasswordGroupValidW",
    "FveUpgradeVolume",
    "FveConversionStop",
    "FveNotifyVolumeAfterFormat",
    "FveAuthElementFromPinW",
    "FveSetFveMethod",
    "FveCloseVolume",
    "FveIsVolumeEncryptable",
    "FveGetFveMethodEDrv",
    "FveDiscardChanges",
    "FveGetAllowKeyExport",
    "FveRevertVolume",
    "FveFindFirstVolume",
    "FveLockVolume",
    "FveSetAllowKeyExport",
    "FveGetStatusW",
    "FveGetVolumeNameW",
    "FveAuthElementFromRecoveryPasswordW",
    "FveGetAuthMethodInformation",
    "FveConversionPause",
    "FveCommitChanges",
    "FveEraseDrive",
    "FveGetKeyPackage",
    "FveConversionStopEx",
    "FveAuthElementFromPassPhraseW",
    "FveGetStatus",
    "FveIsHardwareReadyForConversion",
    "FveSetFipsAllowDisabled",
    "FveEnableRawAccess",
    "FveSetUserFlags",
    "FveGetFipsAllowDisabled",
    "FveIsRecoveryPasswordValidW",
    "FveOpenVolumeW",
    "FveConversionDecrypt",
    "FveQuery",
    "FveGetDataSet",
    "FveOpenVolumeExW",
    "InternalFveIsVolumeEncrypted",
    "FveAuthElementToRecoveryPasswordW",
    "FveGetIdentity",
    "FveOpenVolumeByHandle",
    "FveConversionResume",
    "FveAuthElementGetKeyFileNameW",
    "FveCloseHandle",
    "FveGetFveMethod"
  ],
  "fvecerts.dll": [
    "FveCertIsValidCertInfo",
    "FveCertCanCertificateBeAdded",
    "FveCertGetCertContextFromPfx",
    "FveCertGetCertHashFromCertContext",
    "FveCertGetCertContextFromCert",
    "FveCertFilterForValidCertificates",
    "FveCertCreateCertInfo",
    "FveCertFreeCertInfo",
    "FveCertIsAlternateCert",
    "FveCertFindValidCertificates",
    "FveCertGetPublicKeyHandle",
    "FveCertGetPrivateKeyHandle"
  ],
  "fvecpl.dll": [
    "public: bool __thiscall VolumeFveStatus::NeedsRestart(void)const",
    "public: bool __thiscall VolumeFveStatus::IsOsVolume(void)const",
    "public: bool __thiscall VolumeFveStatus::IsCsvMetadataVolume(void)const",
    "public: bool __thiscall VolumeFveStatus::IsPartiallyConverted(void)const",
    "public: class VolumeFveStatus & __thiscall VolumeFveStatus::operator=(class VolumeFveStatus const &)",
    "public: bool __thiscall VolumeFveStatus::IsEncrypting(void)const",
    "DllRegisterServer",
    "DllUnregisterServer",
    "public: bool __thiscall VolumeFveStatus::FailedDryRun(void)const",
    "public: bool __thiscall VolumeFveStatus::IsDecrypting(void)const",
    "public: class BuiVolume & __thiscall BuiVolume::operator=(class BuiVolume const &)",
    "public: __thiscall VolumeFveStatus::VolumeFveStatus(unsigned long,long,enum _FVE_WIPING_STATE)",
    "public: long __thiscall VolumeFveStatus::GetLastConvertStatus(void)const",
    "DllCanUnloadNow",
    "public: bool __thiscall VolumeFveStatus::IsRoamingDevice(void)const",
    "public: bool __thiscall VolumeFveStatus::HasPassphraseProtector(void)const",
    "public: bool __thiscall VolumeFveStatus::IsSecure(void)const",
    "public: bool __thiscall VolumeFveStatus::IsOn(void)const",
    "public: bool __thiscall VolumeFveStatus::IsEDriveVolume(void)const",
    "public: bool __thiscall VolumeFveStatus::IsDisabled(void)const",
    "public: static unsigned int const BuiVolume::NO_DRIVE_LETTER",
    "public: bool __thiscall VolumeFveStatus::HasSmartCardProtector(void)const",
    "public: bool __thiscall VolumeFveStatus::IsConverting(void)const",
    "public: bool __thiscall VolumeFveStatus::HasRecoveryPassword(void)const",
    "public: bool __thiscall VolumeFveStatus::IsLocked(void)const",
    "public: bool __thiscall VolumeFveStatus::IsPaused(void)const",
    "public: bool __thiscall VolumeFveStatus::IsWiping(void)const",
    "DllGetClassObject",
    "protected: __thiscall VolumeFveStatus::VolumeFveStatus(void)",
    "public: unsigned long __thiscall VolumeFveStatus::GetStatusFlags(void)const",
    "public: bool __thiscall VolumeFveStatus::HasPinProtector(void)const",
    "public: bool __thiscall VolumeFveStatus::IsEncrypted(void)const",
    "public: bool __thiscall VolumeFveStatus::HasTpmProtector(void)const",
    "public: bool __thiscall VolumeFveStatus::IsDecrypted(void)const",
    "public: bool __thiscall VolumeFveStatus::IsPreProvisioned(void)const",
    "public: bool __thiscall VolumeFveStatus::HasRecoveryData(void)const",
    "public: bool __thiscall VolumeFveStatus::HasExternalKey(void)const",
    "public: bool __thiscall VolumeFveStatus::HasStartupKeyProtector(void)const",
    "public: bool __thiscall VolumeFveStatus::IsUnknownFveVersion(void)const"
  ],
  "fveskybackup.dll": [
    "FveBackupRecoveryPasswordToSkyDrive"
  ],
  "fveui.dll": [
    "FveuiUserSelectSmartCard",
    "FveuiEnumSmartCardCerts",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "FveuiUserSelectCert"
  ],
  "fvewiz.dll": [
    "public: bool __thiscall VolumeFveStatus::NeedsRestart(void)const",
    "public: bool __thiscall VolumeFveStatus::IsOsVolume(void)const",
    "public: bool __thiscall VolumeFveStatus::IsCsvMetadataVolume(void)const",
    "public: bool __thiscall VolumeFveStatus::IsPartiallyConverted(void)const",
    "public: class VolumeFveStatus & __thiscall VolumeFveStatus::operator=(class VolumeFveStatus const &)",
    "public: bool __thiscall VolumeFveStatus::IsEncrypting(void)const",
    "public: bool __thiscall VolumeFveStatus::FailedDryRun(void)const",
    "public: bool __thiscall VolumeFveStatus::IsDecrypting(void)const",
    "public: class BuiVolume & __thiscall BuiVolume::operator=(class BuiVolume const &)",
    "public: __thiscall VolumeFveStatus::VolumeFveStatus(unsigned long,long,enum _FVE_WIPING_STATE)",
    "public: long __thiscall VolumeFveStatus::GetLastConvertStatus(void)const",
    "public: bool __thiscall VolumeFveStatus::IsRoamingDevice(void)const",
    "FveuiWizard",
    "public: bool __thiscall VolumeFveStatus::HasPassphraseProtector(void)const",
    "public: bool __thiscall VolumeFveStatus::IsSecure(void)const",
    "public: bool __thiscall VolumeFveStatus::IsOn(void)const",
    "public: bool __thiscall VolumeFveStatus::IsEDriveVolume(void)const",
    "public: bool __thiscall VolumeFveStatus::IsDisabled(void)const",
    "public: static unsigned int const BuiVolume::NO_DRIVE_LETTER",
    "public: bool __thiscall VolumeFveStatus::HasSmartCardProtector(void)const",
    "public: bool __thiscall VolumeFveStatus::IsConverting(void)const",
    "public: bool __thiscall VolumeFveStatus::HasRecoveryPassword(void)const",
    "public: bool __thiscall VolumeFveStatus::IsLocked(void)const",
    "public: bool __thiscall VolumeFveStatus::IsPaused(void)const",
    "public: bool __thiscall VolumeFveStatus::IsWiping(void)const",
    "protected: __thiscall VolumeFveStatus::VolumeFveStatus(void)",
    "public: unsigned long __thiscall VolumeFveStatus::GetStatusFlags(void)const",
    "public: bool __thiscall VolumeFveStatus::HasPinProtector(void)const",
    "FveuipClearFveWizOnStartup",
    "public: bool __thiscall VolumeFveStatus::IsEncrypted(void)const",
    "public: bool __thiscall VolumeFveStatus::HasTpmProtector(void)const",
    "public: bool __thiscall VolumeFveStatus::IsDecrypted(void)const",
    "public: bool __thiscall VolumeFveStatus::IsPreProvisioned(void)const",
    "public: bool __thiscall VolumeFveStatus::HasRecoveryData(void)const",
    "public: bool __thiscall VolumeFveStatus::HasExternalKey(void)const",
    "public: bool __thiscall VolumeFveStatus::HasStartupKeyProtector(void)const",
    "public: bool __thiscall VolumeFveStatus::IsUnknownFveVersion(void)const"
  ],
  "fwcfg.dll": [
    "InitHelperDll"
  ],
  "GameUXLegacyGDFs.dll": "No exports",
  "GdiPlus.dll": [
    "GdipGetRegionScansI",
    "GdipCreateStringFormat",
    "GdipIsStyleAvailable",
    "GdipGetCustomLineCapBaseCap",
    "GdipCreateFromHWNDICM",
    "GdipSetClipRect",
    "GdipTransformRegion",
    "GdipGetImageBounds",
    "GdipGetImageDecoders",
    "GdipPathIterNextPathType",
    "GdipAddPathRectanglesI",
    "GdipCreateLineBrushI",
    "GdipDrawEllipse",
    "GdipGetPenDashArray",
    "GdipRotateLineTransform",
    "GdipGetPenColor",
    "GdipDrawClosedCurve2",
    "GdipGetPathWorldBoundsI",
    "GdipAddPathBezier",
    "GdipSetEffectParameters",
    "GdipSetLinePresetBlend",
    "GdipSetPathGradientFocusScales",
    "GdipDrawBezier",
    "GdipDrawLines",
    "GdipSetAdjustableArrowCapWidth",
    "GdipGetLineRect",
    "GdipMultiplyTextureTransform",
    "GdipEmfToWmfBits",
    "GdipGetPathGradientCenterPoint",
    "GdipSaveImageToStream",
    "GdipSetLineGammaCorrection",
    "GdipCreateLineBrushFromRectI",
    "GdipEnumerateMetafileSrcRectDestPointsI",
    "GdipGetPathGradientPresetBlendCount",
    "GdipDeletePath",
    "GdipIsVisibleRegionRect",
    "GdipCreateRegion",
    "GdipCreatePath2I",
    "GdipPathIterHasCurve",
    "GdipResetTextureTransform",
    "GdipDeleteCachedBitmap",
    "GdipGetPenDashCount",
    "GdipAddPathLine2",
    "GdipSetImageAttributesThreshold",
    "GdipSetLineBlend",
    "GdipCreateMatrix2",
    "GdipGetPenWidth",
    "GdipIsVisibleRect",
    "GdipGetRegionData",
    "GdipCloneBitmapAreaI",
    "GdipDeleteGraphics",
    "GdipTranslateClipI",
    "GdipSetImageAttributesToIdentity",
    "GdipPathIterNextSubpathPath",
    "GdipCreateFontFromDC",
    "GdipAddPathCurve3",
    "GdipAddPathPie",
    "GdipBitmapGetPixel",
    "GdipResetClip",
    "GdipDrawCachedBitmap",
    "GdipCloneImage",
    "GdipIsEmptyRegion",
    "GdipDrawPolygonI",
    "GdipPlayTSClientRecord",
    "GdipCloneBrush",
    "GdipPrivateAddFontFile",
    "GdipCreateBitmapFromGraphics",
    "GdipBeginContainer2",
    "GdipSetRenderingOrigin",
    "GdipTranslateRegion",
    "GdipDrawCurve2",
    "GdipGetLineWrapMode",
    "GdipGetFontSize",
    "GdipSetLineColors",
    "GdipSetPenMode",
    "GdipTranslateMatrix",
    "GdipClosePathFigure",
    "GdipCreatePathGradientI",
    "GdipClearPathMarkers",
    "GdipAddPathRectangles",
    "GdipFillClosedCurve",
    "GdipGetSmoothingMode",
    "GdipSetPenCustomStartCap",
    "GdipAddPathPolygonI",
    "GdipGetEncoderParameterListSize",
    "GdipDeleteStringFormat",
    "GdipGetImageEncodersSize",
    "GdipSaveAdd",
    "GdipSetSolidFillColor",
    "GdipGetPathGradientSurroundColorCount",
    "GdipDrawImagePointsRectI",
    "GdipPathIterNextMarker",
    "GdipGetPathData",
    "GdipGetPenLineJoin",
    "GdipGetPathGradientFocusScales",
    "GdipFillRectanglesI",
    "GdipDrawLine",
    "GdipSetLineSigmaBlend",
    "GdipGetPenTransform",
    "GdipGetRegionHRgn",
    "GdipDeleteRegion",
    "GdipGetPropertyIdList",
    "GdipGetEmHeight",
    "GdipFillPolygon",
    "GdipGetPathGradientPath",
    "GdipCreateCustomLineCap",
    "GdipAddPathArcI",
    "GdipGetImageAttributesAdjustedPalette",
    "GdipResetImageAttributes",
    "GdiplusShutdown",
    "GdipGetPageUnit",
    "GdipStartPathFigure",
    "GdipDrawImagePoints",
    "GdipFillPolygon2I",
    "GdipSetStringFormatFlags",
    "GdipAddPathClosedCurve2I",
    "GdipGetPenCustomStartCap",
    "GdipResetPath",
    "GdipGetPenMiterLimit",
    "GdipSetWorldTransform",
    "GdipDrawClosedCurve",
    "GdipRecordMetafileFileName",
    "GdipDrawCurveI",
    "GdipGetStringFormatTrimming",
    "GdipImageSetAbort",
    "GdipClosePathFigures",
    "GdipGetStringFormatTabStops",
    "GdipGetHatchStyle",
    "GdipCreateHICONFromBitmap",
    "GdipGetTextContrast",
    "GdipCreateBitmapFromFile",
    "GdipCreateRegionHrgn",
    "GdipPathIterCopyData",
    "GdipSetPixelOffsetMode",
    "GdipGetHemfFromMetafile",
    "GdipGetPenEndCap",
    "GdipSetPathMarker",
    "GdipGetLinePresetBlendCount",
    "GdipCloneFont",
    "GdipDrawImageI",
    "GdipConvertToEmfPlus",
    "GdipRotateMatrix",
    "GdipGetStringFormatDigitSubstitution",
    "GdipCreateAdjustableArrowCap",
    "GdipGetAdjustableArrowCapFillState",
    "GdipSetPenColor",
    "GdipSetPenDashCap197819",
    "GdipGetImageGraphicsContext",
    "GdipSetCustomLineCapWidthScale",
    "GdipAddPathPieI",
    "GdipGetLineBlendCount",
    "GdipGetImageItemData",
    "GdipGetPathGradientPointCount",
    "GdipSetPathGradientSurroundColorsWithCount",
    "GdipBitmapGetHistogram",
    "GdipBitmapUnlockBits",
    "GdipSaveAddImage",
    "GdipGetImagePalette",
    "GdipSetInfinite",
    "GdipSaveImageToFile",
    "GdipDrawRectangleI",
    "GdipGetFontUnit",
    "GdipSetEmpty",
    "GdipFillEllipseI",
    "GdipTransformMatrixPoints",
    "GdipGetImageVerticalResolution",
    "GdipCreatePath",
    "GdipCreateBitmapFromHICON",
    "GdipIsVisiblePathPoint",
    "GdipGetBrushType",
    "GdipCloneBitmapArea",
    "GdipSetPageScale",
    "GdipGetAdjustableArrowCapHeight",
    "GdipGetPropertyItemSize",
    "GdipBitmapLockBits",
    "GdipRecordMetafile",
    "GdipGetPenUnit",
    "GdipGetImageThumbnail",
    "GdipMultiplyPenTransform",
    "GdipGetEffectParameterSize",
    "GdipSetPenTransform",
    "GdipAddPathString",
    "GdipAddPathBezierI",
    "GdipGetPenStartCap",
    "GdipImageRotateFlip",
    "GdipSetAdjustableArrowCapFillState",
    "GdipGetCellAscent",
    "GdipGetImageDimension",
    "GdipGetPenCustomEndCap",
    "GdipDrawCurve",
    "GdipDrawRectangle",
    "GdipCreateBitmapFromStream",
    "GdipGetPenCompoundCount",
    "GdipCreateLineBrushFromRectWithAngleI",
    "GdipIsMatrixEqual",
    "GdipSetStringFormatTabStops",
    "GdipDrawLineI",
    "GdipCloneFontFamily",
    "GdipGetImageType",
    "GdipSetImageAttributesWrapMode",
    "GdipCreateBitmapFromFileICM",
    "GdipDrawImageRectRect",
    "GdipCreateTexture2I",
    "GdipGetPenDashCap197819",
    "GdipIsVisibleRectI",
    "GdipGetPathGradientWrapMode",
    "GdipDrawImagePointsRect",
    "GdipGetFontCollectionFamilyCount",
    "GdipGetLineBlend",
    "GdipGetVisibleClipBoundsI",
    "GdipGetFamilyName",
    "GdipCreatePathIter",
    "GdipPathIterIsValid",
    "GdipSetPenBrushFill",
    "GdipGetPathFillMode",
    "GdipDrawCurve3I",
    "GdipSetPropertyItem",
    "GdipDrawImagePointRect",
    "GdipGetGenericFontFamilySerif",
    "GdipDrawImageRect",
    "GdipSetStringFormatLineAlign",
    "GdipDrawLinesI",
    "GdipGetPathGradientTransform",
    "GdipShearMatrix",
    "GdipBitmapApplyEffect",
    "GdipGetStringFormatAlign",
    "GdipGetPenDashOffset",
    "GdipResetLineTransform",
    "GdipCloneStringFormat",
    "GdipGetLineGammaCorrection",
    "GdipDrawCurve3",
    "GdipGetStringFormatHotkeyPrefix",
    "GdipGetAdjustableArrowCapWidth",
    "GdipSetPenStartCap",
    "GdipGetPenBrushFill",
    "GdipCreateImageAttributes",
    "GdipRotatePathGradientTransform",
    "GdipNewInstalledFontCollection",
    "GdipAddPathClosedCurve2",
    "GdipBeginContainerI",
    "GdipFillPolygonI",
    "GdipAddPathClosedCurveI",
    "GdipCreateMetafileFromWmf",
    "GdipSetPenLineCap197819",
    "GdipSetTextureTransform",
    "GdipGetTextureTransform",
    "GdipInvertMatrix",
    "GdipScalePathGradientTransform",
    "GdipFlush",
    "GdipMultiplyLineTransform",
    "GdipIsEqualRegion",
    "GdipRotateWorldTransform",
    "GdiplusStartup",
    "GdipCreateHatchBrush",
    "GdipGetPathWorldBounds",
    "GdipPathIterNextSubpath",
    "GdipCombineRegionPath",
    "GdipBitmapGetHistogramSize",
    "GdipDrawPieI",
    "GdipGetLinePresetBlend",
    "GdipAddPathEllipseI",
    "GdipPrivateAddMemoryFont",
    "GdipGetRegionBoundsI",
    "GdipLoadImageFromFileICM",
    "GdipIsVisiblePointI",
    "GdipVectorTransformMatrixPoints",
    "GdipImageGetFrameDimensionsCount",
    "GdipDrawArcI",
    "GdipDeletePrivateFontCollection",
    "GdipScaleLineTransform",
    "GdipGetPenDashStyle",
    "GdipEnumerateMetafileSrcRectDestPointI",
    "GdipAddPathLine",
    "GdipSetMatrixElements",
    "GdipSetPathGradientPath",
    "GdipSetPenDashStyle",
    "GdipDrawRectanglesI",
    "GdipTransformPoints",
    "GdipGetNearestColor",
    "GdipGetFontStyle",
    "GdipCreateBitmapFromScan0",
    "GdiplusNotificationHook",
    "GdipSetPathGradientLinearBlend",
    "GdipRotateTextureTransform",
    "GdipTransformPointsI",
    "GdipDrawImageFX",
    "GdipGetPathGradientPresetBlend",
    "GdipMultiplyMatrix",
    "GdipSetInterpolationMode",
    "GdipGetImageEncoders",
    "GdipDrawImage",
    "GdipDeleteMatrix",
    "GdipAddPathRectangleI",
    "GdipSetCompositingMode",
    "GdipGetSolidFillColor",
    "GdipCreatePath2",
    "GdipScaleWorldTransform",
    "GdipSetStringFormatTrimming",
    "GdipSetPathGradientTransform",
    "GdipEnumerateMetafileSrcRectDestRect",
    "GdipGetFontHeight",
    "GdipRecordMetafileFileNameI",
    "GdipEndContainer",
    "GdipCreateBitmapFromGdiDib",
    "GdipRecordMetafileStreamI",
    "GdipAddPathCurve3I",
    "GdipComment",
    "GdipFillPie",
    "GdipSetImageAttributesNoOp",
    "GdipSetPathFillMode",
    "GdipResetPathGradientTransform",
    "GdipSetMetafileDownLevelRasterizationLimit",
    "GdipGetTextRenderingHint",
    "GdipSetImageAttributesOutputChannel",
    "GdipSetPenWidth",
    "GdipCreateMetafileFromStream",
    "GdipGetPenCompoundArray",
    "GdipClonePath",
    "GdipDrawBezierI",
    "GdipTranslateLineTransform",
    "GdipImageGetFrameCount",
    "GdipCreateMetafileFromFile",
    "GdipIsMatrixInvertible",
    "GdipCombineRegionRegion",
    "GdipCreateTexture2",
    "GdipGetMatrixElements",
    "GdipCreateBitmapFromDirectDrawSurface",
    "GdipCreateFontFromLogfontW",
    "GdipGetPathGradientCenterPointI",
    "GdipCreateBitmapFromResource",
    "GdipDeletePen",
    "GdipImageSelectActiveFrame",
    "GdipGetPropertyCount",
    "GdipCreatePen2",
    "GdipAddPathLine2I",
    "GdipCreateHalftonePalette",
    "GdipDeleteBrush",
    "GdipCreateBitmapFromHBITMAP",
    "GdipGetPathPoints",
    "GdipFillPieI",
    "GdipIsVisibleRegionRectI",
    "GdipSetPenUnit",
    "GdipCreateLineBrush",
    "GdipStringFormatGetGenericDefault",
    "GdipGetRegionBounds",
    "GdipAlloc",
    "GdipSetClipGraphics",
    "GdipSetClipRegion",
    "GdipPathIterRewind",
    "GdipGetWorldTransform",
    "GdipGetAdjustableArrowCapMiddleInset",
    "GdipInitializePalette",
    "GdipSetPageUnit",
    "GdipScaleMatrix",
    "GdipSetImageAttributesColorKeys",
    "GdipGetImageHorizontalResolution",
    "GdipGetTextureImage",
    "GdipAddPathStringI",
    "GdipAddPathPolygon",
    "GdipEnumerateMetafileSrcRectDestRectI",
    "GdipSetPenEndCap",
    "GdipSetPenLineJoin",
    "GdipTransformPath",
    "GdipGetLineRectI",
    "GdipFillRegion",
    "GdipRecordMetafileI",
    "GdipCreateFontFamilyFromName",
    "GdipSetStringFormatMeasurableCharacterRanges",
    "GdipTestControl",
    "GdipDrawImageRectRectI",
    "GdipGetDpiX",
    "GdipSetLineWrapMode",
    "GdipTranslateTextureTransform",
    "GdipAddPathEllipse",
    "GdipGetClip",
    "GdipSetClipRectI",
    "GdipGetImageDecodersSize",
    "GdipGraphicsClear",
    "GdipEnumerateMetafileSrcRectDestPoints",
    "GdipDeleteCustomLineCap",
    "GdipEnumerateMetafileSrcRectDestPoint",
    "GdipGetDpiY",
    "GdipGetLineSpacing",
    "GdipSetClipHrgn",
    "GdipSetCustomLineCapStrokeJoin",
    "GdipGetClipBounds",
    "GdipSetPathGradientPresetBlend",
    "GdipGetGenericFontFamilySansSerif",
    "GdipRestoreGraphics",
    "GdipImageGetFrameDimensionsList",
    "GdipCreateFromHWND",
    "GdipFillRectangleI",
    "GdipMeasureString",
    "GdipSetCompositingQuality",
    "GdipSetImageAttributesCachedBackground",
    "GdipSetImageAttributesRemapTable",
    "GdiplusNotificationUnhook",
    "GdipGetRenderingOrigin",
    "GdipGetStringFormatTabStopCount",
    "GdipBitmapSetPixel",
    "GdipFillRectangles",
    "GdipCreateBitmapFromStreamICM",
    "GdipSetPathGradientCenterPoint",
    "GdipCreateTextureIA",
    "GdipGetRegionDataSize",
    "GdipEnumerateMetafileDestPoints",
    "GdipGetInterpolationMode",
    "GdipDrawPath",
    "GdipTransformMatrixPointsI",
    "GdipSetLineTransform",
    "GdipCreateRegionRgnData",
    "GdipDisposeImageAttributes",
    "GdipDrawClosedCurve2I",
    "GdipPathIterNextMarkerPath",
    "GdipCreateRegionRectI",
    "GdipGetPageScale",
    "GdipDrawEllipseI",
    "GdipIsVisiblePoint",
    "GdipDrawImagePointsI",
    "GdipFillRectangle",
    "GdipGetPathGradientSurroundColorsWithCount",
    "GdipGetStringFormatMeasurableCharacterRangeCount",
    "GdipCreateMatrix3",
    "GdipAddPathCurveI",
    "GdipCreateEffect",
    "GdipFillClosedCurveI",
    "GdipSetTextContrast",
    "GdipReleaseDC",
    "GdipEnumerateMetafileDestPointsI",
    "GdipGetPropertyItem",
    "GdipLoadImageFromStreamICM",
    "GdipReversePath",
    "GdipAddPathLineI",
    "GdipCreateFont",
    "GdipDrawImageRectI",
    "GdipSetCustomLineCapBaseCap",
    "GdipCreatePathGradientFromPath",
    "GdipCreateStreamOnFile",
    "GdipGetMetafileHeaderFromEmf",
    "GdipSaveGraphics",
    "GdipDrawPolygon",
    "GdipGetEffectParameters",
    "GdipRotatePenTransform",
    "GdipSetPenDashOffset",
    "GdipIsMatrixIdentity",
    "GdipCreateRegionPath",
    "GdipIsClipEmpty",
    "GdipGetLogFontW",
    "GdipSetClipPath",
    "GdipConvertToEmfPlusToFile",
    "GdipTranslatePathGradientTransform",
    "GdipSetStringFormatHotkeyPrefix",
    "GdipCreateSolidFill",
    "GdipGetStringFormatLineAlign",
    "GdipGetAllPropertyItems",
    "GdipDrawBeziers",
    "GdipDrawDriverString",
    "GdipSetAdjustableArrowCapMiddleInset",
    "GdipDrawPie",
    "GdipTranslateRegionI",
    "GdipGetImageWidth",
    "GdipSetAdjustableArrowCapHeight",
    "GdipCreateLineBrushFromRectWithAngle",
    "GdipSetPenMiterLimit",
    "GdipDisposeImage",
    "GdipGetPenFillType",
    "GdipGetPixelOffsetMode",
    "GdipGetCustomLineCapWidthScale",
    "GdipGetLineColors",
    "GdipDrawBeziersI",
    "GdipGetGenericFontFamilyMonospace",
    "GdipGetImagePixelFormat",
    "GdipSetPenCustomEndCap",
    "GdipDeleteFontFamily",
    "GdipImageForceValidation",
    "GdipSetPathGradientCenterPointI",
    "GdipGetCompositingQuality",
    "GdipEnumerateMetafileDestPointI",
    "GdipSetTextRenderingHint",
    "GdipDrawRectangles",
    "GdipCreateMatrix3I",
    "GdipScaleTextureTransform",
    "GdipFree",
    "GdipGetCustomLineCapType",
    "GdipAddPathCurve",
    "GdipGetPathGradientCenterColor",
    "GdipSetPenCompoundArray",
    "GdipRemovePropertyItem",
    "GdipGetEncoderParameterList",
    "GdipGetPathGradientBlend",
    "GdipStringFormatGetGenericTypographic",
    "GdipCloneMatrix",
    "GdipScalePenTransform",
    "GdipCloneCustomLineCap",
    "GdipDeleteFont",
    "GdipWindingModeOutline",
    "GdipBeginContainer",
    "GdipRecordMetafileStream",
    "GdipGetRegionScans",
    "GdipGetLogFontA",
    "GdipNewPrivateFontCollection",
    "GdipGetHatchBackgroundColor",
    "GdipGetRegionScansCount",
    "GdipWarpPath",
    "GdipLoadImageFromFile",
    "GdipFillClosedCurve2",
    "GdipResetPenTransform",
    "GdipGetImageRawFormat",
    "GdipGetImageHeight",
    "GdipMultiplyPathGradientTransform",
    "GdipGetLineTransform",
    "GdipAddPathCurve2",
    "GdipDrawArc",
    "GdipAddPathArc",
    "GdipAddPathRectangle",
    "GdipSetLineLinearBlend",
    "GdipGetClipBoundsI",
    "GdipCreateFontFromLogfontA",
    "GdipCloneRegion",
    "GdipCreatePathGradient",
    "GdipSetImagePalette",
    "GdipGetPathGradientBlendCount",
    "GdipGetPropertySize",
    "GdipLoadImageFromStream",
    "GdipCreateMetafileFromWmfFile",
    "GdipGetPathGradientRectI",
    "GdipSetStringFormatDigitSubstitution",
    "GdipCreateTexture",
    "GdipSetImageAttributesOutputChannelColorProfile",
    "GdipDeleteEffect",
    "GdipConvertToEmfPlusToStream",
    "GdipCloneImageAttributes",
    "GdipFillPolygon2",
    "GdipFindFirstImageItem",
    "GdipAddPathClosedCurve",
    "GdipSetStringFormatAlign",
    "GdipSetCustomLineCapStrokeCaps",
    "GdipSetTextureWrapMode",
    "GdipPathIterEnumerate",
    "GdipGetCompositingMode",
    "GdipGetDC",
    "GdipCreatePen1",
    "GdipTranslateWorldTransform",
    "GdipSetPathGradientWrapMode",
    "GdipBitmapSetResolution",
    "GdipFlattenPath",
    "GdipGetMetafileHeaderFromWmf",
    "GdipGetCustomLineCapStrokeJoin",
    "GdipGraphicsSetAbort",
    "GdipGetImageFlags",
    "GdipEnumerateMetafileDestPoint",
    "GdipSetPathGradientBlend",
    "GdipGetPathGradientGammaCorrection",
    "GdipMeasureDriverString",
    "GdipCreateCachedBitmap",
    "GdipFindNextImageItem",
    "GdipResetPageTransform",
    "GdipCreateLineBrushFromRect",
    "GdipIsOutlineVisiblePathPointI",
    "GdipGetMetafileDownLevelRasterizationLimit",
    "GdipTranslatePenTransform",
    "GdipGetImagePaletteSize",
    "GdipIsOutlineVisiblePathPoint",
    "GdipGetMetafileHeaderFromMetafile",
    "GdipCombineRegionRect",
    "GdipGetTextureWrapMode",
    "GdipIsVisibleRegionPointI",
    "GdipIsVisibleRegionPoint",
    "GdipIsInfiniteRegion",
    "GdipGetPenMode",
    "GdipFillEllipse",
    "GdipGetFontCollectionFamilyList",
    "GdipIsVisiblePathPointI",
    "GdipSetCustomLineCapBaseInset",
    "GdipSetImageAttributesColorMatrix",
    "GdipGetFontHeightGivenDPI",
    "GdipGetFamily",
    "GdipGetPathPointsI",
    "GdipCreateRegionRect",
    "GdipFillClosedCurve2I",
    "GdipCreateFromHDC",
    "GdipCreateFromHDC2",
    "GdipGetStringFormatFlags",
    "GdipDrawCurve2I",
    "GdipDeletePathIter",
    "GdipBitmapCreateApplyEffect",
    "GdipCreateMatrix",
    "GdipBitmapConvertFormat",
    "GdipIsVisibleClipEmpty",
    "GdipTranslateClip",
    "GdipClonePen",
    "GdipSetPathGradientSigmaBlend",
    "GdipGetMetafileHeaderFromFile",
    "GdipSetPathGradientGammaCorrection",
    "GdipCreateHBITMAPFromBitmap",
    "GdipMultiplyWorldTransform",
    "GdipGetVisibleClipBounds",
    "GdipPathIterGetSubpathCount",
    "GdipGetPathTypes",
    "GdipCombineRegionRectI",
    "GdipSetPenDashArray",
    "GdipFillPath",
    "GdipGetCustomLineCapBaseInset",
    "GdipPlayMetafileRecord",
    "GdipAddPathBeziersI",
    "GdipDrawString",
    "GdipSetPathGradientCenterColor",
    "GdipGetHatchForegroundColor",
    "GdipWidenPath",
    "GdipGetPointCount",
    "GdipCreateMetafileFromEmf",
    "GdipPathIterGetCount",
    "GdipGetCustomLineCapStrokeCaps",
    "GdipEnumerateMetafileDestRect",
    "GdipAddPathBeziers",
    "GdipSetImageAttributesGamma",
    "GdipGetCellDescent",
    "GdipResetWorldTransform",
    "GdipEnumerateMetafileDestRectI",
    "GdipGetMetafileHeaderFromStream",
    "GdipDrawClosedCurveI",
    "GdipVectorTransformMatrixPointsI",
    "GdipCreateTextureIAI",
    "GdipAddPathPath",
    "GdipGetPathLastPoint",
    "GdipAddPathCurve2I",
    "GdipSetSmoothingMode",
    "GdipDrawImagePointRectI",
    "GdipGetPathGradientRect",
    "GdipMeasureCharacterRanges"
  ],
  "GenuineCenter.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "Groupinghc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "gacinstall.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "gameux.dll": [
    "GameUXShimW",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "gcdef.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "gdi32.dll": [
    "GetViewportOrgEx",
    "GdiPlayEMF",
    "CreateICA",
    "D3DKMTOpenSynchronizationObject",
    "D3DKMTOpenAdapterFromGdiDisplayName",
    "CLIPOBJ_ppoGetPath",
    "QueryFontAssocStatus",
    "DdEntry28",
    "D3DKMTLock",
    "D3DKMTWaitForVerticalBlankEvent2",
    "SelectFontLocal",
    "EngCreatePalette",
    "SetPolyFillMode",
    "D3DKMTWaitForVerticalBlankEvent",
    "FrameRgn",
    "EngCreateBitmap",
    "GetObjectA",
    "DdEntry54",
    "ScriptLayout",
    "SetPaletteEntries",
    "AngleArc",
    "DdEntry35",
    "DdEntry32",
    "DdNotifyFullscreenSpriteUpdate",
    "GetBitmapDimensionEx",
    "GdiPlayJournal",
    "D3DKMTSetGammaRamp",
    "BRUSHOBJ_hGetColorTransform",
    "GetColorAdjustment",
    "GetNearestColor",
    "GetRandomRgn",
    "SetPixel",
    "FONTOBJ_pifi",
    "D3DKMTSetContextInProcessSchedulingPriority",
    "AddFontResourceW",
    "GdiFullscreenControl",
    "ResetDCW",
    "EngDeletePalette",
    "PlayMetaFileRecord",
    "GdiConvertAndCheckDC",
    "ResetDCA",
    "D3DKMTGetPresentQueueEvent",
    "GetTextMetricsA",
    "RemoveFontResourceW",
    "EngTransparentBlt",
    "InvertRgn",
    "GetCertificate",
    "LpkTabbedTextOut",
    "GdiSetBatchLimit",
    "CreatePatternBrush",
    "STROBJ_bEnum",
    "GdiEntry12",
    "PolyPolyline",
    "NamedEscape",
    "DPtoLP",
    "FixBrushOrgEx",
    "GdiSetServerAttr",
    "D3DKMTWaitForSynchronizationObject2",
    "GetKerningPairsW",
    "GetLogColorSpaceW",
    "GetDCPenColor",
    "PatBlt",
    "GetCharWidth32W",
    "D3DKMTCreateOutputDupl",
    "GetEnhMetaFileA",
    "EngGradientFill",
    "GetPixel",
    "GdiGradientFill",
    "SetICMMode",
    "EngFillPath",
    "EngStrokePath",
    "GetMetaRgn",
    "GetTextExtentPointI",
    "OffsetWindowOrgEx",
    "CreateRectRgnIndirect",
    "FONTOBJ_vGetInfo",
    "CloseMetaFile",
    "GetTextExtentExPointW",
    "ScriptGetFontAlternateGlyphs",
    "PolyBezier",
    "GetCharWidthFloatA",
    "D3DKMTOpenKeyedMutex2",
    "GdiSetPixelFormat",
    "SetArcDirection",
    "ScriptGetFontScriptTags",
    "GdiEndPageEMF",
    "GdiAlphaBlend",
    "CLIPOBJ_cEnumStart",
    "D3DKMTOutputDuplGetPointerShapeData",
    "GetObjectW",
    "StartDocW",
    "GetCharABCWidthsA",
    "GdiIsScreenDC",
    "D3DKMTSetDisplayPrivateDriverFormat",
    "GdiComment",
    "GetFontAssocStatus",
    "GetWorldTransform",
    "D3DKMTOpenSyncObjectFromNtHandle",
    "D3DKMTSharedPrimaryLockNotification",
    "LpkUseGDIWidthCache",
    "PATHOBJ_vEnumStart",
    "GetCharABCWidthsFloatA",
    "SetGraphicsMode",
    "ClearBrushAttributes",
    "MoveToEx",
    "D3DKMTCreateKeyedMutex2",
    "GdiGetLocalBrush",
    "LpkInitialize",
    "cGetTTFFromFOT",
    "D3DKMTOpenNtHandleFromName",
    "D3DKMTOpenResourceFromNtHandle",
    "HT_Get8BPPMaskPalette",
    "D3DKMTSetStereoEnabled",
    "EngCreateDeviceBitmap",
    "D3DKMTCreateDCFromMemory",
    "CreateRectRgn",
    "EngPaint",
    "ScriptString_pSize",
    "SetOPMSigningKeyAndSequenceNumbers",
    "SetMapperFlags",
    "FONTOBJ_cGetAllGlyphHandles",
    "GdiConvertDC",
    "GdiIsUMPDSandboxingEnabled",
    "DdEntry8",
    "DestroyOPMProtectedOutput",
    "DdEntry41",
    "DdEntry14",
    "DdEntry6",
    "Pie",
    "ScriptPlace",
    "GetDCOrgEx",
    "D3DKMTCheckOcclusion",
    "GdiConsoleTextOut",
    "PolyPolygon",
    "ScriptGetFontFeatureTags",
    "HT_Get8BPPFormatPalette",
    "GdiConvertBitmap",
    "ScriptFreeCache",
    "GetCharWidthW",
    "DdEntry38",
    "DdEntry23",
    "D3DKMTCreateKeyedMutex",
    "SelectClipRgn",
    "DDCCISetVCPFeature",
    "DeleteObject",
    "GetBitmapBits",
    "BRUSHOBJ_pvAllocRbrush",
    "DdEntry25",
    "GdiSwapBuffers",
    "ExtCreateRegion",
    "D3DKMTOutputDuplPresent",
    "SetDIBColorTable",
    "CreateBitmapFromDxSurface2",
    "UnloadNetworkFonts",
    "CreateHalftonePalette",
    "D3DKMTOpenKeyedMutex",
    "D3DKMTGetPresentHistory",
    "ScriptItemize",
    "DdEntry29",
    "CreateBitmap",
    "GetEnhMetaFileBits",
    "GetCharABCWidthsFloatW",
    "GetETM",
    "GetPath",
    "CreateFontIndirectW",
    "SetDIBits",
    "EngDeleteSurface",
    "GdiEntry14",
    "D3DKMTDestroySynchronizationObject",
    "LpkPresent",
    "EngBitBlt",
    "EngFindResource",
    "GdiDescribePixelFormat",
    "GetFontFileInfo",
    "CreateDIBSection",
    "EngReleaseSemaphore",
    "D3DKMTSetContextSchedulingPriority",
    "GetPhysicalMonitorDescription",
    "D3DKMTQueryResourceInfo",
    "GdiEntry10",
    "GetGlyphOutlineWow",
    "D3DKMTDestroyContext",
    "EngStretchBlt",
    "GetGlyphOutlineA",
    "bInitSystemAndFontsDirectoriesW",
    "GetOPMInformation",
    "GdiConvertBrush",
    "EngGetDriverName",
    "GetTextFaceA",
    "CreateSessionMappedDIBSection",
    "CheckColorsInGamut",
    "DdEntry21",
    "EnumFontFamiliesExW",
    "GetICMProfileA",
    "EngLockSurface",
    "OffsetClipRgn",
    "GdiEntry1",
    "CopyEnhMetaFileA",
    "FONTOBJ_pxoGetXform",
    "GetCharWidthFloatW",
    "ScriptStringValidate",
    "D3DKMTGetScanLine",
    "SetBkMode",
    "WidenPath",
    "DdEntry19",
    "GetTextCharacterExtra",
    "GetStringBitmapW",
    "DdEntry16",
    "DDCCIGetCapabilitiesStringLength",
    "GetCharacterPlacementW",
    "SetPixelFormat",
    "SetBitmapDimensionEx",
    "DdEntry45",
    "ScriptJustify",
    "GdiGetCharDimensions",
    "GetFontUnicodeRanges",
    "GdiDllInitialize",
    "GetTextCharset",
    "D3DKMTShareObjects",
    "D3DKMTPollDisplayChildren",
    "CopyMetaFileA",
    "RestoreDC",
    "D3DKMTUpdateOverlay",
    "GetCertificateSize",
    "ScriptStringGetLogicalWidths",
    "D3DKMTQueryResourceInfoFromNtHandle",
    "PolyTextOutW",
    "TranslateCharsetInfo",
    "CancelDC",
    "DdEntry51",
    "D3DKMTDestroyKeyedMutex",
    "GdiStartDocEMF",
    "SaveDC",
    "ScriptCacheGetHeight",
    "GdiAddGlsBounds",
    "DdEntry10",
    "SetStretchBltMode",
    "DdEntry52",
    "GdiConvertPalette",
    "GetClipRgn",
    "EngDeleteSemaphore",
    "GdiEntry13",
    "D3DKMTGetDeviceState",
    "GdiIsMetaPrintDC",
    "ScriptPlaceOpenType",
    "bMakePathNameW",
    "ScriptStringAnalyse",
    "RemoveFontMemResourceEx",
    "GdiGetSpoolFileHandle",
    "EngAssociateSurface",
    "GetSystemPaletteUse",
    "SelectObject",
    "GetCharacterPlacementA",
    "CreateHatchBrush",
    "BRUSHOBJ_pvGetRbrush",
    "EngStretchBltROP",
    "PolyPatBlt",
    "AddFontResourceExW",
    "DDCCIGetVCPFeature",
    "D3DKMTSetProcessSchedulingPriorityClass",
    "GetGlyphIndicesW",
    "DdEntry46",
    "D3DKMTGetProcessSchedulingPriorityClass",
    "SetDIBitsToDevice",
    "GetAspectRatioFilterEx",
    "RectVisible",
    "D3DKMTReleaseProcessVidPnSourceOwners",
    "GetCharWidth32A",
    "RoundRect",
    "D3DKMTOpenAdapterFromLuid",
    "EndFormPage",
    "CreateDiscardableBitmap",
    "GdiEntry7",
    "CreateMetaFileW",
    "GetGlyphOutlineW",
    "EngComputeGlyphSet",
    "GetStretchBltMode",
    "SetBkColor",
    "D3DKMTQueryAdapterInfo",
    "D3DKMTSignalSynchronizationObject",
    "D3DKMTPresent",
    "EngEraseSurface",
    "FONTOBJ_pvTrueTypeFontFile",
    "LpkDrawTextEx",
    "D3DKMTSetQueuedLimit",
    "GdiPlayDCScript",
    "EngStrokeAndFillPath",
    "EngCopyBits",
    "DdEntry31",
    "ScriptGetFontLanguageTags",
    "GetCharWidthA",
    "ColorCorrectPalette",
    "ExtCreatePen",
    "LpkExtTextOut",
    "D3DKMTOpenAdapterFromDeviceName",
    "D3DKMTQueryAllocationResidency",
    "EngCheckAbort",
    "D3DKMTRender",
    "CLIPOBJ_bEnum",
    "GetBrushOrgEx",
    "SetFontEnumeration",
    "CreateBitmapFromDxSurface",
    "D3DKMTGetDisplayModeList",
    "GdiDeleteSpoolFileHandle",
    "EndGdiRendering",
    "FillRgn",
    "DdEntry49",
    "EngDeletePath",
    "LpkGetCharacterPlacement",
    "DeviceCapabilitiesExW",
    "XLATEOBJ_iXlate",
    "DdEntry48",
    "SelectPalette",
    "XLATEOBJ_hGetColorTransform",
    "EngCreateClip",
    "OffsetViewportOrgEx",
    "GetICMProfileW",
    "PlayEnhMetaFileRecord",
    "GetDIBits",
    "GetDIBColorTable",
    "D3DKMTUnpinDirectFlipResources",
    "D3DKMTFlipOverlay",
    "UspAllocCache",
    "D3DKMTGetRuntimeData",
    "CreateDIBPatternBrush",
    "XFORMOBJ_bApplyXform",
    "DdEntry36",
    "GetOutlineTextMetricsW",
    "DdEntry55",
    "GdiDeleteLocalDC",
    "DdEntry47",
    "CopyMetaFileW",
    "EngAlphaBlend",
    "D3DKMTOpenAdapterFromHdc",
    "DdEntry53",
    "GdiReleaseDC",
    "DdEntry43",
    "GetKerningPairsA",
    "GetNumberOfPhysicalMonitors",
    "CreateScalableFontResourceW",
    "DdCreateFullscreenSprite",
    "ScriptRecordDigitSubstitution",
    "CreateFontA",
    "GdiAddGlsRecord",
    "CopyEnhMetaFileW",
    "UpdateICMRegKeyW",
    "CreateEnhMetaFileA",
    "GetWindowExtEx",
    "GetEnhMetaFileW",
    "GetMetaFileW",
    "SwapBuffers",
    "AbortPath",
    "GetFontResourceInfoW",
    "EngPlgBlt",
    "ScriptGetGlyphABCWidth",
    "MaskBlt",
    "GetBkColor",
    "FONTOBJ_pfdg",
    "EndPath",
    "EnumFontFamiliesW",
    "GetCharABCWidthsI",
    "StartFormPage",
    "SetDCPenColor",
    "D3DKMTCheckVidPnExclusiveOwnership",
    "D3DKMTCloseAdapter",
    "DdEntry12",
    "CreateDIBitmap",
    "CreatePenIndirect",
    "AddFontResourceExA",
    "DdEntry50",
    "DescribePixelFormat",
    "FontIsLinked",
    "GdiInitSpool",
    "EngAcquireSemaphore",
    "GetRegionData",
    "Escape",
    "SetSystemPaletteUse",
    "DestroyPhysicalMonitorInternal",
    "SetViewportOrgEx",
    "CreateEnhMetaFileW",
    "D3DKMTWaitForIdle",
    "EnumFontFamiliesExA",
    "D3DKMTConfigureSharedResource",
    "D3DKMTGetContextSchedulingPriority",
    "SelectClipPath",
    "ExtSelectClipRgn",
    "LpkGetTextExtentExPoint",
    "GdiEntry9",
    "SetMagicColors",
    "IsValidEnhMetaRecord",
    "STROBJ_dwGetCodePage",
    "DeleteColorSpace",
    "SetLayout",
    "PATHOBJ_bEnumClipLines",
    "ScriptXtoCP",
    "DdEntry26",
    "gdiPlaySpoolStream",
    "PtVisible",
    "DdEntry18",
    "ScaleWindowExtEx",
    "BeginGdiRendering",
    "GetFontRealizationInfo",
    "GdiSetAttrs",
    "SetVirtualResolution",
    "XLATEOBJ_piVector",
    "DdEntry34",
    "GdiFixUpHandle",
    "D3DKMTAcquireKeyedMutex",
    "GdiArtificialDecrementDriver",
    "GetTextMetricsW",
    "GetTextFaceW",
    "GdiGetDevmodeForPage",
    "SetBitmapAttributes",
    "DdDestroyFullscreenSprite",
    "DdEntry33",
    "D3DKMTGetSharedResourceAdapterLuid",
    "SetColorAdjustment",
    "DdEntry15",
    "GdiQueryFonts",
    "DdEntry11",
    "RemoveFontResourceTracking",
    "CreateDCW",
    "STROBJ_vEnumStart",
    "EngWideCharToMultiByte",
    "D3DKMTGetMultisampleMethodList",
    "StretchDIBits",
    "EngTextOut",
    "ScriptStringCPtoX",
    "GdiEntry3",
    "Ellipse",
    "D3DKMTPinDirectFlipResources",
    "GetOPMRandomNumber",
    "GetEnhMetaFileHeader",
    "GetCurrentPositionEx",
    "GdiPlayScript",
    "SetDeviceGammaRamp",
    "SetAbortProc",
    "ScaleViewportExtEx",
    "UspAllocTemp",
    "GdiInitializeLanguagePack",
    "ScriptTextOut",
    "StrokeAndFillPath",
    "GetTextExtentExPointI",
    "ScriptShape",
    "StrokePath",
    "D3DKMTSignalSynchronizationObject2",
    "DdEntry37",
    "PolyDraw",
    "AddFontResourceA",
    "DeleteDC",
    "Chord",
    "D3DKMTInvalidateActiveVidPn",
    "SetBrushOrgEx",
    "CreateDCA",
    "CreateScalableFontResourceA",
    "SetMiterLimit",
    "DdEntry39",
    "GdiEntry8",
    "DeviceCapabilitiesExA",
    "ScriptGetProperties",
    "CreateCompatibleBitmap",
    "EnumFontsA",
    "DeleteMetaFile",
    "GetSuggestedOPMProtectedOutputArraySize",
    "ScriptStringFree",
    "ScriptString_pcOutChars",
    "SetColorSpace",
    "SetEnhMetaFileBits",
    "SetICMProfileA",
    "GdiConvertEnhMetaFile",
    "CreateColorSpaceA",
    "GdiTransparentBlt",
    "GdiConvertFont",
    "GdiGetBitmapBitsSize",
    "GdiRealizationInfo",
    "Polygon",
    "GdiEntry11",
    "GdiQueryTable",
    "EngDeleteClip",
    "Arc",
    "DdEntry22",
    "GetLayout",
    "ScriptCPtoX",
    "GdiEntry4",
    "XLATEOBJ_cGetPalette",
    "EnumFontFamiliesA",
    "D3DKMTCheckMonitorPowerState",
    "GetDCBrushColor",
    "ScriptString_pLogAttr",
    "D3DKMTSetDisplayMode",
    "GetRelAbs",
    "ExtFloodFill",
    "DdEntry30",
    "PATHOBJ_vEnumStartClipLines",
    "AddFontMemResourceEx",
    "D3DKMTSetVidPnSourceOwner",
    "DdEntry5",
    "DdEntry9",
    "FillPath",
    "GdiGetDC",
    "GdiGetLocalFont",
    "GetTextExtentPoint32A",
    "ScriptGetCMap",
    "GetTextColor",
    "GetEUDCTimeStamp",
    "RealizePalette",
    "DdEntry40",
    "ScriptPositionSingleGlyph",
    "D3DKMTGetContextInProcessSchedulingPriority",
    "GetCOPPCompatibleOPMInformation",
    "ScriptStringXtoCP",
    "RemoveFontResourceA",
    "DdEntry2",
    "SetTextCharacterExtra",
    "D3DKMTGetOverlayState",
    "ColorMatchToTarget",
    "EngCreateDeviceSurface",
    "D3DKMTCreateAllocation2",
    "GdiIsPlayMetafileDC",
    "D3DKMTEscape",
    "ClearBitmapAttributes",
    "GetPhysicalMonitors",
    "SetTextAlign",
    "D3DKMTReleaseKeyedMutex",
    "EngUnlockSurface",
    "EnumICMProfilesA",
    "ScriptApplyDigitSubstitution",
    "DdEntry17",
    "PolyBezierTo",
    "XFORMOBJ_iGetXform",
    "GetPixelFormat",
    "PtInRegion",
    "DdEntry44",
    "GetArcDirection",
    "GetHFONT",
    "GdiPlayPageEMF",
    "ExtTextOutW",
    "GetTextCharsetInfo",
    "StartPage",
    "GdiEntry15",
    "ModifyWorldTransform",
    "GetDeviceCaps",
    "SetRectRgn",
    "D3DKMTGetSharedPrimaryHandle",
    "ArcTo",
    "DdEntry13",
    "D3DKMTDestroyDevice",
    "GetStringBitmapA",
    "ResizePalette",
    "LpkEditControl",
    "CreatePen",
    "UnrealizeObject",
    "EngCreateSemaphore",
    "GetBkMode",
    "GdiEntry6",
    "ScriptStringGetOrder",
    "CreateFontIndirectExW",
    "MirrorRgn",
    "EnumObjects",
    "CreateFontW",
    "D3DKMTCreateAllocation",
    "GetClipBox",
    "D3DKMTOutputDuplReleaseFrame",
    "GdiEntry2",
    "GdiGetLocalDC",
    "TextOutA",
    "ConfigureOPMProtectedOutput",
    "EndPage",
    "DdEntry42",
    "GdiDrawStream",
    "GetKerningPairs",
    "D3DKMTQueryStatistics",
    "SetDCBrushColor",
    "GetRasterizerCaps",
    "DdEntry3",
    "D3DKMTSetVidPnSourceOwner1",
    "GetGraphicsMode",
    "EqualRgn",
    "PlayMetaFile",
    "CloseFigure",
    "GdiProcessSetup",
    "Rectangle",
    "SetWinMetaFileBits",
    "FloodFill",
    "D3DKMTCreateSynchronizationObject2",
    "GetMetaFileA",
    "EngFreeModule",
    "GdiGetPageHandle",
    "GetViewportExtEx",
    "FONTOBJ_pQueryGlyphAttrs",
    "GdiGetBatchLimit",
    "GdiSetLastError",
    "SetBitmapBits",
    "GetMetaFileBitsEx",
    "D3DKMTCreateSynchronizationObject",
    "D3DKMTSetAllocationPriority",
    "D3DKMTOutputDuplGetFrameInfo",
    "GdiGetCodePage",
    "GetTextExtentPointA",
    "AnyLinkedFonts",
    "GetEUDCTimeStampExW",
    "PlayEnhMetaFile",
    "CreateCompatibleDC",
    "SelectBrushLocal",
    "SetICMProfileW",
    "EngLineTo",
    "GetEnhMetaFileDescriptionA",
    "GetMiterLimit",
    "CreateColorSpaceW",
    "GdiPrinterThunk",
    "GetBitmapAttributes",
    "DdEntry20",
    "GdiStartPageEMF",
    "PolylineTo",
    "GetColorSpace",
    "STROBJ_bEnumPositionsOnly",
    "StartDocA",
    "SetWindowOrgEx",
    "D3DKMTOutputDuplGetMetaData",
    "SetBoundsRect",
    "D3DKMTOpenResource",
    "OffsetRgn",
    "D3DKMTOpenResource2",
    "RemoveFontResourceExA",
    "STROBJ_bGetAdvanceWidths",
    "CreateEllipticRgn",
    "GdiValidateHandle",
    "D3DKMTCreateOverlay",
    "EngQueryLocalTime",
    "DdEntry4",
    "EnumMetaFile",
    "GdiLoadType1Fonts",
    "SetBrushAttributes",
    "SetROP2",
    "SetWorldTransform",
    "GetEnhMetaFileDescriptionW",
    "CreateRoundRectRgn",
    "D3DKMTAcquireKeyedMutex2",
    "GetTextExtentPointW",
    "ChoosePixelFormat",
    "EnumFontsW",
    "CreateMetaFileA",
    "ScriptIsComplex",
    "AbortDoc",
    "CreateOPMProtectedOutputs",
    "GdiFlush",
    "GetBrushAttributes",
    "RemoveFontResourceExW",
    "LPtoDP",
    "CreateDIBPatternBrushPt",
    "PolyTextOutA",
    "AnimatePalette",
    "DdEntry7",
    "SetMetaRgn",
    "PATHOBJ_bEnum",
    "GetPaletteEntries",
    "D3DKMTCheckExclusiveOwnership",
    "DDCCISaveCurrentSettings",
    "GdiGetSpoolMessage",
    "D3DKMTDestroyAllocation",
    "GdiAddFontResourceW",
    "EndDoc",
    "DdEntry27",
    "CreatePalette",
    "ScriptStringOut",
    "D3DKMTReleaseKeyedMutex2",
    "SetTextColor",
    "UpdateColors",
    "GetObjectType",
    "GetCharWidthInfo",
    "ScriptGetLogicalWidths",
    "GetTextExtentPoint32W",
    "GetGlyphIndicesA",
    "SetTextJustification",
    "DdQueryVisRgnUniqueness",
    "GdiCleanCacheDC",
    "GetWindowOrgEx",
    "DdEntry56",
    "LpkPSMTextOut",
    "SetRelAbs",
    "ScriptApplyLogicalWidth",
    "GdiIsMetaFileDC",
    "EngQueryEMFInfo",
    "D3DKMTDestroyDCFromMemory",
    "GdiPlayPrivatePageEMF",
    "SetLayoutWidth",
    "D3DKMTUnlock",
    "D3DKMTReclaimAllocations",
    "SetPixelV",
    "BitBlt",
    "PlgBlt",
    "GetTextFaceAliasW",
    "EngMultiByteToUnicodeN",
    "D3DKMTQueryRemoteVidPnSourceFromGdiDisplayName",
    "DrawEscape",
    "ScriptItemizeOpenType",
    "EudcLoadLinkW",
    "GdiGetPageCount",
    "EngMarkBandingSurface",
    "EudcUnloadLinkW",
    "UpdateICMRegKeyA",
    "GdiConvertToDevmodeW",
    "CloseEnhMetaFile",
    "GetStockObject",
    "EngGetPrinterDataFileName",
    "GetFontFileData",
    "LineDDA",
    "GetRgnBox",
    "GetFontLanguageInfo",
    "EngUnicodeToMultiByteN",
    "SetViewportExtEx",
    "SetMetaFileBitsEx",
    "PaintRgn",
    "GetWinMetaFileBits",
    "EngGetCurrentCodePage",
    "GdiCreateLocalEnhMetaFile",
    "DDCCIGetCapabilitiesString",
    "DDCCIGetTimingReport",
    "CreatePolygonRgn",
    "DdEntry0",
    "GetTextExtentExPointA",
    "D3DKMTOfferAllocations",
    "EnableEUDC",
    "GdiResetDCEMF",
    "GetMapMode",
    "GetBoundsRect",
    "CreateSolidBrush",
    "D3DKMTSharedPrimaryUnLockNotification",
    "GetTextExtentExPointWPri",
    "GetSystemPaletteEntries",
    "GdiConvertBitmapV5",
    "GetLogColorSpaceA",
    "Polyline",
    "PATHOBJ_vGetBounds",
    "CombineTransform",
    "TextOutW",
    "ScriptBreak",
    "GdiCreateLocalMetaFilePict",
    "GdiEntry16",
    "D3DKMTDestroyOutputDupl",
    "GdiConvertRegion",
    "GdiReleaseLocalDC",
    "GetTextAlign",
    "ScriptSubstituteSingleGlyph",
    "D3DKMTEnumAdapters",
    "DeleteEnhMetaFile",
    "ExtTextOutA",
    "ExtEscape",
    "EngLoadModule",
    "ScriptGetFontProperties",
    "EnumICMProfilesW",
    "FlattenPath",
    "GdiEntry5",
    "GetEnhMetaFilePixelFormat",
    "CreateEllipticRgnIndirect",
    "CreateFontIndirectExA",
    "RectInRegion",
    "UspFreeMem",
    "ScriptShapeOpenType",
    "D3DKMTCreateDevice",
    "BeginPath",
    "IsValidEnhMetaRecordOffExt",
    "D3DKMTCreateContext",
    "D3DKMTDestroyOverlay",
    "GetEnhMetaFilePaletteEntries",
    "CreateICW",
    "GetGlyphOutline",
    "SetMapMode",
    "D3DKMTWaitForSynchronizationObject",
    "DdEntry1",
    "GetCharWidthI",
    "ftsWordBreak",
    "CreatePolyPolygonRgn",
    "GetDeviceGammaRamp",
    "CreateBrushIndirect",
    "FONTOBJ_cGetGlyphs",
    "EnumEnhMetaFile",
    "CreateBitmapIndirect",
    "GetTransform",
    "GdiConvertMetaFilePict",
    "GetFontData",
    "CombineRgn",
    "CreateFontIndirectA",
    "GetCurrentObject",
    "PathToRegion",
    "LineTo",
    "GdiEndDocEMF",
    "DdEntry24",
    "GetNearestPaletteIndex",
    "SetWindowExtEx",
    "D3DKMTCheckSharedResourceAccess",
    "AddFontResourceTracking",
    "StretchBlt",
    "IntersectClipRect",
    "BRUSHOBJ_ulGetBrushColor",
    "EngMultiByteToWideChar",
    "GetCharABCWidthsW",
    "GetPolyFillMode",
    "ExcludeClipRect",
    "GetOutlineTextMetricsA",
    "GetROP2"
  ],
  "getuname.dll": [
    "GetUName"
  ],
  "glcndFilter.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "glmf32.dll": [
    "glsUTF8toUCS4",
    "glsLong",
    "glsGetHeaderi",
    "glsUCS2toUTF8z",
    "glsCommandAPI",
    "glsRequireExtension",
    "glsEndObj",
    "glsGetConsti",
    "glsBeginObj",
    "glsGetStreamType",
    "glsGetLayeri",
    "glsGetStreamCRC32",
    "glsNumfv",
    "glsGLRCLayer",
    "glsWritePrefix",
    "glsNumf",
    "glsNumiv",
    "glsLongLow",
    "glsGetCaptureFlags",
    "glsIsContextStream",
    "glsGetCommandAlignment",
    "glsGetStreamReadName",
    "glsHeaderLayeri",
    "glsPixelSetupGen",
    "glsNumi",
    "__glsString_init",
    "glsBeginGLS",
    "glsHeaderGLRCi",
    "glsNullCommandFunc",
    "glsLongHigh",
    "glsUCS1toUTF8z",
    "glsUCStoUTF8z",
    "glsULongLow",
    "glsGLRC",
    "glsNumul",
    "glsNumusv",
    "glsGetCurrentTime",
    "glsCaptureFunc",
    "glsUnsupportedCommand",
    "glsNumlv",
    "glsGetCaptureDispatchTable",
    "glsGetContexti",
    "glsGetGLRCi",
    "glsDeleteContext",
    "glsGetContextListubz",
    "glsWriteFunc",
    "__glsString_assign",
    "glsGetConstiv",
    "glsGetContextPointer",
    "glsGetCommandAttrib",
    "glsIsExtensionSupported",
    "glsCallStream",
    "glsContext",
    "glsUTF8toUCS2z",
    "glsGetHeaderubz",
    "glsGetStreamAttrib",
    "glsNumui",
    "glsUCS4toUTF8z",
    "glsIsContext",
    "glsIsUTF8String",
    "glsHeaderfv",
    "glsEndCapture",
    "glsNums",
    "glsHeaderi",
    "glsPixelSetup",
    "glsNumdv",
    "glsCommandString",
    "glsGetHeaderf",
    "glsDisplayMapfv",
    "glsGetLayerf",
    "glsAbortCall",
    "glsHeaderLayerf",
    "glsHeaderiv",
    "__glsString_appendChar",
    "glsGetContextubz",
    "glsGetCurrentContext",
    "glsGetCommandFunc",
    "glsNumb",
    "glsNuml",
    "glsEnumString",
    "glsBinary",
    "glsGetOpcodeCount",
    "glsChannel",
    "glsFlush",
    "glsCopyStream",
    "glsDeleteReadPrefix",
    "glsNumulv",
    "glsUTF8toUCS4z",
    "glsEndGLS",
    "glsGetHeaderiv",
    "glsNumd",
    "glsULongHigh",
    "glsDataPointer",
    "glsReadPrefix",
    "glsNumubv",
    "glsGetCaptureExecTable",
    "glsGetContextFunc",
    "glsHeaderf",
    "__glsParser_create",
    "glsNumus",
    "glsCallArray",
    "glsHeaderubz",
    "glsCaptureFlags",
    "glsAppRef",
    "glsUTF8toUCS1z",
    "glsUnreadFunc",
    "glsUpdateCaptureExecTable",
    "glsGetError",
    "glsPad",
    "__glsParser_print",
    "glsGetAllContexts",
    "glsNumsv",
    "glsUCS4toUTF8",
    "glsComment",
    "glsGetOpcodes",
    "glsCharubz",
    "glsULong",
    "glsGetConstubz",
    "glsBeginCapture",
    "glsNumub",
    "glsGetHeaderfv",
    "glsSwapBuffers",
    "glsNumuiv",
    "glsGetContextListl",
    "glsGetStreamSize",
    "glsReadFunc",
    "glsGenContext",
    "glsCommandFunc",
    "glsCallArrayInContext",
    "glsDeleteStream",
    "glsError",
    "glsBlock",
    "glsNumbv",
    "glsUTF8toUCSz"
  ],
  "glu32.dll": [
    "gluQuadricTexture",
    "gluNurbsProperty",
    "gluTessBeginContour",
    "gluNurbsSurface",
    "gluEndSurface",
    "gluBeginCurve",
    "gluPwlCurve",
    "gluErrorString",
    "gluScaleImage",
    "gluOrtho2D",
    "gluTessVertex",
    "gluQuadricCallback",
    "gluBeginSurface",
    "gluTessNormal",
    "gluErrorUnicodeStringEXT",
    "gluCylinder",
    "gluNewTess",
    "gluTessEndPolygon",
    "gluQuadricDrawStyle",
    "gluBuild1DMipmaps",
    "gluQuadricOrientation",
    "gluDeleteTess",
    "gluQuadricNormals",
    "gluDeleteQuadric",
    "gluEndTrim",
    "gluEndPolygon",
    "gluTessProperty",
    "gluNextContour",
    "gluNewQuadric",
    "gluPickMatrix",
    "gluLookAt",
    "gluBeginTrim",
    "gluGetNurbsProperty",
    "gluTessEndContour",
    "gluEndCurve",
    "gluPerspective",
    "gluProject",
    "gluNewNurbsRenderer",
    "gluLoadSamplingMatrices",
    "gluNurbsCallback",
    "gluTessCallback",
    "gluTessBeginPolygon",
    "gluNurbsCurve",
    "gluDisk",
    "gluGetTessProperty",
    "gluBuild2DMipmaps",
    "gluDeleteNurbsRenderer",
    "gluGetString",
    "gluUnProject",
    "gluPartialDisk",
    "gluSphere",
    "gluBeginPolygon"
  ],
  "gpapi.dll": [
    "GetAppliedGPOListInternalAWorker",
    "GenerateGPNotificationInternalWorker",
    "FreeGPOListInternalA",
    "GetGPOListInternalAWorker",
    "GetAppliedGPOListInternalA",
    "GenerateGPNotificationInternal",
    "EnterCriticalPolicySectionExStub",
    "EnterCriticalPolicySectionInternal",
    "ForceSyncFgPolicyInternalWorker",
    "GetPreviousFgPolicyRefreshInfoInternalWorker",
    "RefreshPolicyInternalWorker",
    "GetGPOListInternalA",
    "HasPolicyForegroundProcessingCompletedInternalWorker",
    "RefreshPolicyInternal",
    "RsopLoggingEnabledInternal",
    "FreeGPOListInternalAWorker",
    "WaitForMachinePolicyForegroundProcessingInternal",
    "WaitForUserPolicyForegroundProcessingInternal",
    "WaitForUserPolicyForegroundProcessingInternalWorker",
    "WaitForMachinePolicyForegroundProcessingInternalWorker",
    "AreThereVisibleLogoffScriptsInternalWorker",
    "GetNextFgPolicyRefreshInfoInternal",
    "GetAppliedGPOListInternalW",
    "UnregisterGPNotificationInternalWorker",
    "FreeGPOListInternalW",
    "IsSyncForegroundPolicyRefreshWorker",
    "AreThereVisibleLogoffScriptsInternal",
    "RefreshPolicyExInternalWorker",
    "GetGPOListInternalWWorker",
    "RegisterGPNotificationInternal",
    "RsopLoggingEnabledInternalWorker",
    "GetGPOListInternalW",
    "GetNextFgPolicyRefreshInfoInternalWorker",
    "GetPreviousFgPolicyRefreshInfoInternal",
    "HasPolicyForegroundProcessingCompletedInternal",
    "LeaveCriticalPolicySectionInternal",
    "LeaveCriticalPolicySectionInternalWorker",
    "RefreshPolicyExInternal",
    "GetAppliedGPOListInternalWWorker",
    "AreThereVisibleShutdownScriptsInternalWorker",
    "RegisterGPNotificationInternalWorker",
    "ForceSyncFgPolicyInternal",
    "FreeGPOListInternalWWorker",
    "AreThereVisibleShutdownScriptsInternal",
    "EnterCriticalPolicySectionInternalWorker",
    "UnregisterGPNotificationInternal"
  ],
  "gpedit.dll": [
    "CreateGPOLink",
    "DllGetClassObject",
    "BrowseForGPO",
    "ImportRSoPData",
    "DllCanUnloadNow",
    "DeleteGPOLink",
    "ExportRSoPData",
    "DeleteAllGPOLinks"
  ],
  "gpprefcl.dll": [
    "GenerateGroupPolicyFolderOptions",
    "ProcessGroupPolicyExIniFile",
    "ProcessGroupPolicySchedTasks",
    "ProcessGroupPolicyExLocUsAndGroups",
    "ProcessGroupPolicyRegistry",
    "ProcessGroupPolicyExServices",
    "GenerateGroupPolicyFiles",
    "ProcessGroupPolicyExFiles",
    "GenerateGroupPolicyRegionOptions",
    "GenerateGroupPolicyServices",
    "ProcessGroupPolicyApplications",
    "GenerateGroupPolicyNetworkOptions",
    "GenerateGroupPolicySchedTasks",
    "ProcessGroupPolicyExNetworkOptions",
    "ProcessGroupPolicyExSchedTasks",
    "ProcessGroupPolicyExFolders",
    "DllRegisterServer",
    "ProcessGroupPolicyExPowerOptions",
    "ProcessGroupPolicyFolders",
    "GenerateGroupPolicyPrinters",
    "DllUnregisterServer",
    "ProcessGroupPolicyDrives",
    "ProcessGroupPolicyFiles",
    "GenerateGroupPolicyDataSources",
    "ProcessGroupPolicyExRegionOptions",
    "GenerateGroupPolicyDrives",
    "DllCanUnloadNow",
    "GenerateGroupPolicyEnviron",
    "GenerateGroupPolicyFolders",
    "GenerateGroupPolicyNetShares",
    "ProcessGroupPolicyExDataSources",
    "ProcessGroupPolicyExRegistry",
    "ProcessGroupPolicyRegionOptions",
    "GenerateGroupPolicyPowerOptions",
    "ProcessGroupPolicyServices",
    "GenerateGroupPolicyIniFile",
    "ProcessGroupPolicyEnviron",
    "ProcessGroupPolicyInternet",
    "ProcessGroupPolicyExNetShares",
    "ProcessGroupPolicyDevices",
    "ProcessGroupPolicyExFolderOptions",
    "GenerateGroupPolicyStartMenu",
    "GenerateGroupPolicyApplications",
    "GenerateGroupPolicyShortcuts",
    "ProcessGroupPolicyNetworkOptions",
    "ProcessGroupPolicyIniFile",
    "ProcessGroupPolicyLocUsAndGroups",
    "DllGetClassObject",
    "ProcessGroupPolicyExInternet",
    "GenerateGroupPolicyRegistry",
    "ProcessGroupPolicyStartMenu",
    "ProcessGroupPolicyExPrinters",
    "ProcessGroupPolicyExDrives",
    "ProcessGroupPolicyExShortcuts",
    "GenerateGroupPolicyInternet",
    "ProcessGroupPolicyPowerOptions",
    "ProcessGroupPolicyFolderOptions",
    "GenerateGroupPolicyLocUsAndGroups",
    "ProcessGroupPolicyPrinters",
    "ProcessGroupPolicyShortcuts",
    "ProcessGroupPolicyNetShares",
    "GenerateGroupPolicyDevices",
    "ProcessGroupPolicyExStartMenu",
    "ProcessGroupPolicyExEnviron",
    "ProcessGroupPolicyExDevices",
    "ProcessGroupPolicyDataSources",
    "ProcessGroupPolicyExApplications"
  ],
  "gpprnext.dll": [
    "PrinterProcessGroupPolicy",
    "DllMain",
    "PrinterGenerateGroupPolicy",
    "DllCanUnloadNow",
    "PrinterProcessGroupPolicyEx",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "gpscript.dll": [
    "ProcessScriptsGroupPolicy",
    "GenerateScriptsGroupPolicy",
    "ProcessScriptsGroupPolicyEx",
    "ScrRegGPOListToWbem"
  ],
  "gpsvc.dll": [
    "RsopAccessCheckByTypeInternal",
    "RsopResetPolicySettingStatusInternal",
    "ProcessGroupPolicyCompletedExInternal",
    "SvchostPushServiceGlobals",
    "GroupPolicyClientServiceMain",
    "RsopFileAccessCheckInternal",
    "ProcessGroupPolicyCompletedInternal",
    "DllCanUnloadNow",
    "RsopSetPolicySettingStatusInternal",
    "DllGetClassObject",
    "GenerateRsopPolicy"
  ],
  "gptext.dll": [
    "ProcessConnectivityPlatformPolicy",
    "ProcessTCPIPPolicy",
    "ProcessEQoSPolicy",
    "ProcessPSCHEDPolicy",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "HalExtIntcLpioDMA.dll": "No exports",
  "HalExtIntcUartDMA.dll": "No exports",
  "HelpPaneProxy.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "HotStartUserAgent.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "hal.dll": [
    "HalDisplayString",
    "HalAllProcessorsStarted",
    "HalInitializeOnResume",
    "ExAcquireFastMutex",
    "ExReleaseFastMutex",
    "HalSetProfileInterval",
    "KeAcquireInStackQueuedSpinLock",
    "KeReleaseQueuedSpinLock",
    "HalDmaFreeCrashDumpRegistersEx",
    "KeLowerIrql",
    "KeRaiseIrqlToSynchLevel",
    "HalEndSystemInterrupt",
    "HalGetMemoryCachingRequirements",
    "KeFlushWriteBuffer",
    "HalSetBusDataByOffset",
    "HalQueryRealTimeClock",
    "HalGetBusData",
    "ExTryToAcquireFastMutex",
    "HalStopProfileInterrupt",
    "WRITE_PORT_BUFFER_UCHAR",
    "HalAdjustResourceList",
    "KeReleaseInStackQueuedSpinLock",
    "KeTryToAcquireQueuedSpinLockRaiseToSynch",
    "KfReleaseSpinLock",
    "HalStartDynamicProcessor",
    "HalReportResourceUsage",
    "HalRequestClockInterrupt",
    "HalInitializeBios",
    "IoFreeAdapterChannel",
    "KfAcquireSpinLock",
    "KeAcquireQueuedSpinLock",
    "KeTryToAcquireQueuedSpinLock",
    "HalAcquireDisplayOwnership",
    "HalDisableInterrupt",
    "HalGetVectorInput",
    "KeRaiseIrql",
    "HalStartNextProcessor",
    "HalRegisterDynamicProcessor",
    "WRITE_PORT_ULONG",
    "HalReturnToFirmware",
    "HalDmaAllocateCrashDumpRegistersEx",
    "HalGetProcessorIdByNtNumber",
    "HalReadDmaCounter",
    "HalGetEnvironmentVariableEx",
    "IoMapTransfer",
    "HalTranslateBusAddress",
    "IoWritePartitionTable",
    "HalQueryEnvironmentVariableInfoEx",
    "HalRegisterErrataCallbacks",
    "KdComPortInUse",
    "READ_PORT_BUFFER_UCHAR",
    "READ_PORT_USHORT",
    "HalProcessorIdle",
    "KeRaiseIrqlToDpcLevel",
    "HalAllocateAdapterChannel",
    "READ_PORT_BUFFER_USHORT",
    "HalAllocateCommonBuffer",
    "x86BiosReadMemory",
    "HalEnumerateEnvironmentVariablesEx",
    "HalSetEnvironmentVariableEx",
    "HalSetEnvironmentVariable",
    "HalStartProfileInterrupt",
    "HalCalibratePerformanceCounter",
    "HalSetTimeIncrement",
    "HalGetMessageRoutingInfo",
    "HalQueryMaximumProcessorCount",
    "IoFlushAdapterBuffers",
    "IoReadPartitionTable",
    "HalGetInterruptVector",
    "WRITE_PORT_BUFFER_USHORT",
    "x86BiosAllocateBuffer",
    "HalRequestIpi",
    "IoFreeMapRegisters",
    "x86BiosCall",
    "HalGetInterruptTargetInformation",
    "KdHvComPortInUse",
    "HalAssignSlotResources",
    "HalMakeBeep",
    "HalInitializeProcessor",
    "HalAllocateHardwareCounters",
    "IoSetPartitionInformation",
    "KeQueryPerformanceCounter",
    "HalFreeCommonBuffer",
    "HalFreeHardwareCounters",
    "HalClearSoftwareInterrupt",
    "KeAcquireInStackQueuedSpinLockRaiseToSynch",
    "KeAcquireQueuedSpinLockRaiseToSynch",
    "KeAcquireSpinLockRaiseToSynch",
    "KfRaiseIrql",
    "HalAllocateCrashDumpRegisters",
    "HalHandleNMI",
    "KfLowerIrql",
    "HalInitSystem",
    "HalGetAdapter",
    "x86BiosWriteMemory",
    "KeStallExecutionProcessor",
    "HalSystemVectorDispatchEntry",
    "KeAcquireSpinLock",
    "HalFlushCommonBuffer",
    "HalRequestIpiSpecifyVector",
    "HalRequestSoftwareInterrupt",
    "HalAcpiGetTableEx",
    "HalEnableInterrupt",
    "READ_PORT_ULONG",
    "WRITE_PORT_UCHAR",
    "HalGetEnvironmentVariable",
    "HalGetBusDataByOffset",
    "HalBugCheckSystem",
    "HalBeginSystemInterrupt",
    "x86BiosFreeBuffer",
    "HalQueryDisplayParameters",
    "HalSetRealTimeClock",
    "KeReleaseSpinLock",
    "WRITE_PORT_BUFFER_ULONG",
    "HalSetDisplayParameters",
    "HalConvertDeviceIdtToIrql",
    "HalSetBusData",
    "READ_PORT_BUFFER_ULONG",
    "READ_PORT_UCHAR",
    "WRITE_PORT_USHORT",
    "KeGetCurrentIrql"
  ],
  "halmacpi.dll": [
    "HalDisplayString",
    "HalAllProcessorsStarted",
    "HalInitializeOnResume",
    "ExAcquireFastMutex",
    "ExReleaseFastMutex",
    "HalSetProfileInterval",
    "KeAcquireInStackQueuedSpinLock",
    "KeReleaseQueuedSpinLock",
    "HalDmaFreeCrashDumpRegistersEx",
    "KeLowerIrql",
    "KeRaiseIrqlToSynchLevel",
    "HalEndSystemInterrupt",
    "HalGetMemoryCachingRequirements",
    "KeFlushWriteBuffer",
    "HalSetBusDataByOffset",
    "HalQueryRealTimeClock",
    "HalGetBusData",
    "ExTryToAcquireFastMutex",
    "HalStopProfileInterrupt",
    "WRITE_PORT_BUFFER_UCHAR",
    "HalAdjustResourceList",
    "KeReleaseInStackQueuedSpinLock",
    "KeTryToAcquireQueuedSpinLockRaiseToSynch",
    "KfReleaseSpinLock",
    "HalStartDynamicProcessor",
    "HalReportResourceUsage",
    "HalRequestClockInterrupt",
    "HalInitializeBios",
    "IoFreeAdapterChannel",
    "KfAcquireSpinLock",
    "KeAcquireQueuedSpinLock",
    "KeTryToAcquireQueuedSpinLock",
    "HalAcquireDisplayOwnership",
    "HalDisableInterrupt",
    "HalGetVectorInput",
    "KeRaiseIrql",
    "HalStartNextProcessor",
    "HalRegisterDynamicProcessor",
    "WRITE_PORT_ULONG",
    "HalReturnToFirmware",
    "HalDmaAllocateCrashDumpRegistersEx",
    "HalGetProcessorIdByNtNumber",
    "HalReadDmaCounter",
    "HalGetEnvironmentVariableEx",
    "IoMapTransfer",
    "HalTranslateBusAddress",
    "IoWritePartitionTable",
    "HalQueryEnvironmentVariableInfoEx",
    "HalRegisterErrataCallbacks",
    "KdComPortInUse",
    "READ_PORT_BUFFER_UCHAR",
    "READ_PORT_USHORT",
    "HalProcessorIdle",
    "KeRaiseIrqlToDpcLevel",
    "HalAllocateAdapterChannel",
    "READ_PORT_BUFFER_USHORT",
    "HalAllocateCommonBuffer",
    "x86BiosReadMemory",
    "HalEnumerateEnvironmentVariablesEx",
    "HalSetEnvironmentVariableEx",
    "HalSetEnvironmentVariable",
    "HalStartProfileInterrupt",
    "HalCalibratePerformanceCounter",
    "HalSetTimeIncrement",
    "HalGetMessageRoutingInfo",
    "HalQueryMaximumProcessorCount",
    "IoFlushAdapterBuffers",
    "IoReadPartitionTable",
    "HalGetInterruptVector",
    "WRITE_PORT_BUFFER_USHORT",
    "x86BiosAllocateBuffer",
    "HalRequestIpi",
    "IoFreeMapRegisters",
    "x86BiosCall",
    "HalGetInterruptTargetInformation",
    "KdHvComPortInUse",
    "HalAssignSlotResources",
    "HalMakeBeep",
    "HalInitializeProcessor",
    "HalAllocateHardwareCounters",
    "IoSetPartitionInformation",
    "KeQueryPerformanceCounter",
    "HalFreeCommonBuffer",
    "HalFreeHardwareCounters",
    "HalClearSoftwareInterrupt",
    "KeAcquireInStackQueuedSpinLockRaiseToSynch",
    "KeAcquireQueuedSpinLockRaiseToSynch",
    "KeAcquireSpinLockRaiseToSynch",
    "KfRaiseIrql",
    "HalAllocateCrashDumpRegisters",
    "HalHandleNMI",
    "KfLowerIrql",
    "HalInitSystem",
    "HalGetAdapter",
    "x86BiosWriteMemory",
    "KeStallExecutionProcessor",
    "HalSystemVectorDispatchEntry",
    "KeAcquireSpinLock",
    "HalFlushCommonBuffer",
    "HalRequestIpiSpecifyVector",
    "HalRequestSoftwareInterrupt",
    "HalAcpiGetTableEx",
    "HalEnableInterrupt",
    "READ_PORT_ULONG",
    "WRITE_PORT_UCHAR",
    "HalGetEnvironmentVariable",
    "HalGetBusDataByOffset",
    "HalBugCheckSystem",
    "HalBeginSystemInterrupt",
    "x86BiosFreeBuffer",
    "HalQueryDisplayParameters",
    "HalSetRealTimeClock",
    "KeReleaseSpinLock",
    "WRITE_PORT_BUFFER_ULONG",
    "HalSetDisplayParameters",
    "HalConvertDeviceIdtToIrql",
    "HalSetBusData",
    "READ_PORT_BUFFER_ULONG",
    "READ_PORT_UCHAR",
    "WRITE_PORT_USHORT",
    "KeGetCurrentIrql"
  ],
  "hbaapi.dll": [
    "SMHBA_SendTEST",
    "HBA_GetFcpTargetMapping",
    "HBA_GetPortStatistics",
    "SMHBA_GetPortType",
    "HBA_SendCTPassThru",
    "HBA_RegisterLibraryV2",
    "HbaGetAdapterNameByDeviceInstanceId",
    "SMHBA_GetBindingCapability",
    "SMHBA_GetTargetMapping",
    "SMHBA_GetSASPhyAttributes",
    "SMHBA_GetAdapterPortAttributes",
    "HBA_GetFcpPersistentBinding",
    "SMHBA_SetBindingSupport",
    "SMHBA_GetVendorLibraryAttributes",
    "HBA_GetPersistentBindingV2",
    "HBA_SendRPS",
    "SMHBA_SendSMPPassThru",
    "HBA_SetPersistentBindingV2",
    "SMHBA_GetVersion",
    "HBA_SendCTPassThruV2",
    "HBA_RefreshInformation",
    "SMHBA_GetDiscoveredPortAttributes",
    "SMHBA_RegisterForAdapterPhyStatEvents",
    "SMHBA_GetPhyStatistics",
    "HBA_GetVersion",
    "HBA_RegisterForAdapterPortStatEvents",
    "HBA_FreeLibrary",
    "HBA_GetWrapperLibraryAttributes",
    "HBA_SendLIRR",
    "HBA_GetBindingSupport",
    "HBA_RefreshAdapterConfiguration",
    "HBA_RegisterForAdapterPortEvents",
    "HBA_GetAdapterName",
    "SMHBA_SetPersistentBinding",
    "HBA_RegisterForLinkEvents",
    "SMHBA_ScsiInquiry",
    "SMHBA_ScsiReportLuns",
    "SMHBA_RemoveAllPersistentBindings",
    "HBA_ScsiInquiryV2",
    "HBA_GetFcpTargetMappingV2",
    "SMHBA_SendECHO",
    "HBA_RegisterForAdapterEvents",
    "HBA_SendRLS",
    "SMHBA_GetPortAttributesByWWN",
    "SMHBA_GetWrapperLibraryAttributes",
    "HBA_SendReportLUNs",
    "SMHBA_GetFCPhyAttributes",
    "HBA_RegisterLibrary",
    "HBA_RemoveCallback",
    "HBA_SetBindingSupport",
    "HBA_RemovePersistentBinding",
    "SMHBA_GetProtocolStatistics",
    "HBA_LoadLibrary",
    "SMHBA_RegisterForAdapterPortEvents",
    "SMHBA_RegisterLibrary",
    "HBA_ResetStatistics",
    "SMHBA_GetAdapterAttributes",
    "HBA_GetNumberOfAdapters",
    "HBA_SendRNID",
    "SMHBA_GetNumberOfPorts",
    "SMHBA_GetLUNStatistics",
    "HBA_CloseAdapter",
    "HBA_GetFC4Statistics",
    "HBA_SendScsiInquiry",
    "HBA_RemoveAllPersistentBindings",
    "SMHBA_GetPersistentBinding",
    "HBA_ScsiReportLUNsV2",
    "HBA_OpenAdapter",
    "HBA_GetRNIDMgmtInfo",
    "SMHBA_RegisterForAdapterEvents",
    "SMHBA_ScsiReadCapacity",
    "SMHBA_GetBindingSupport",
    "HBA_GetBindingCapability",
    "HBA_SendSRL",
    "HBA_RegisterForTargetEvents",
    "SMHBA_RegisterForTargetEvents",
    "SMHBA_RemovePersistentBinding",
    "HBA_GetPortAttributesByWWN",
    "HBA_RegisterForAdapterAddEvents",
    "SMHBA_RegisterForAdapterAddEvents",
    "HBA_GetAdapterPortAttributes",
    "HBA_GetFCPStatistics",
    "HBA_SendReadCapacity",
    "HBA_SendRNIDV2",
    "HBA_GetAdapterAttributes",
    "HBA_ScsiReadCapacityV2",
    "HBA_OpenAdapterByWWN",
    "HBA_GetVendorLibraryAttributes",
    "SMHBA_RegisterForAdapterPortStatEvents",
    "HBA_GetEventBuffer",
    "HBA_SetRNIDMgmtInfo",
    "HBA_GetDiscoveredPortAttributes",
    "HBA_SendRPL"
  ],
  "hcproviders.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "hgcpl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "hgprint.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "hhsetup.dll": [
    "public: int __thiscall CCollection::IsDirty(void)",
    "private: unsigned long __thiscall CCollection::DeleteLocation(class CLocation *)",
    "private: unsigned long __thiscall CCollection::AllocCopyValue(class CParseXML *,char *,char * *)",
    "public: class CLocation * __thiscall CCollection::FindLocation(unsigned short const *,unsigned int *)",
    "private: unsigned long __thiscall CCollection::CheckTitleRef(char const *,unsigned short)",
    "public: class CLocation * __thiscall CCollection::FindLocation(char const *,unsigned int *)",
    "public: class CTitle * __thiscall CCollection::FindTitle(char const *,unsigned short)",
    "public: int __thiscall CCollection::GetMasterCHM(unsigned short * *,unsigned short *)",
    "public: unsigned long __thiscall CFIFOString::GetTail(char * *)",
    "public: class CFolder * __thiscall CFolder::AddChildFolder(unsigned short const *,unsigned long,unsigned long *,unsigned short)",
    "public: __thiscall CLocation::~CLocation(void)",
    "public: void __thiscall CCollection::IncrementRefTitleCount(void)",
    "public: struct ListItem * __thiscall CPointerList::First(void)",
    "public: class CFolder & __thiscall CFolder::operator=(class CFolder const &)",
    "public: char * __thiscall CLocation::GetVolume(void)",
    "public: class CFolder * __thiscall CFolder::GetFirstChildFolder(void)",
    "public: void __thiscall CTitle::SetId(char const *)",
    "public: unsigned long __thiscall CCollection::DeleteFolder(class CFolder *)",
    "public: class CTitle * __thiscall CCollection::AddTitle(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short,unsigned int,class CLocation *,unsigned long *,int,unsigned short const *)",
    "public: class CFolder * __thiscall CFolder::GetParent(void)",
    "public: void __thiscall CCollection::RemoveCollectionEntry(char const *)",
    "public: int __thiscall CCollection::MergeKeywords(unsigned short *)",
    "public: unsigned long __thiscall CCollection::Close(void)",
    "public: unsigned short const * __thiscall CLocation::GetPathW(void)",
    "public: void __thiscall CFolder::SetExTitlePtr(class CExTitle *)",
    "public: unsigned long __thiscall CCollection::RemoveCollection(int)",
    "public: void __thiscall CTitle::SetNextTitle(class CTitle *)",
    "public: unsigned short const * __thiscall CLocation::GetVolumeW(void)",
    "public: void __thiscall CFolder::SetTitle(unsigned short const *)",
    "public: void __thiscall CTitle::SetId(unsigned short const *)",
    "public: unsigned short const * __thiscall CCollection::GetSampleLocationW(void)",
    "public: class CColList * __thiscall CCollection::FindCollection(char const *)",
    "public: unsigned long __thiscall CCollection::Open(unsigned short const *)",
    "public: __thiscall CPointerList::CPointerList(void)",
    "public: void __thiscall CFIFOString::RemoveAll(void)",
    "public: class CTitle * __thiscall CTitle::GetNextTitle(void)",
    "public: void __thiscall CCollection::SetFindMergedCHMS(int)",
    "private: void __thiscall CCollection::DeleteFolders(class CFolder * *)",
    "public: char * __thiscall CTitle::GetId(void)",
    "public: class CColList * __thiscall CCollection::AddCollection(void)",
    "public: unsigned short const * __thiscall CFolder::GetTitleW(void)",
    "private: class CLocation * __thiscall CCollection::NewLocation(void)",
    "public: class CFolder * __thiscall CCollection::AddFolder(char const *,unsigned long,unsigned long *,unsigned short)",
    "public: void __thiscall CCollection::DecrementRefTitleCount(void)",
    "public: char * __thiscall CFolder::GetTitle(void)",
    "public: class CTitle * __thiscall CCollection::FindTitle(unsigned short const *,unsigned short)",
    "public: class CFolder * __thiscall CCollection::GetVisableRootFolder(void)",
    "public: unsigned long __thiscall CTitle::AddLocationHistory(unsigned long,char const *,char const *,char const *,class CLocation const *,char const *,char const *,int)",
    "private: void __thiscall CCollection::wssResetNextColNum(void)",
    "public: int __thiscall CCollection::MergeKeywords(char *)",
    "public: void __thiscall CLocation::SetId(unsigned short const *)",
    "public: class CPointerList & __thiscall CPointerList::operator=(class CPointerList const &)",
    "public: class CFIFOString & __thiscall CFIFOString::operator=(class CFIFOString const &)",
    "public: int __thiscall CFolder::bIsVisable(void)",
    "public: void __thiscall CCollection::AddRef(void)",
    "public: struct LocationHistory * __thiscall CTitle::NewLocationHistory(void)",
    "public: __thiscall CTitle::CTitle(void)",
    "public: class CTitle * __thiscall CCollection::GetFirstTitle(void)",
    "private: void __thiscall CCollection::DeleteLocalFiles(struct LocationHistory *,class CTitle *)",
    "public: unsigned long __thiscall CCollection::GetColNo(void)",
    "public: void __thiscall CLocation::SetTitle(char const *)",
    "public: char * __thiscall CCollection::GetSampleLocation(void)",
    "public: __thiscall CFolder::CFolder(void)",
    "public: unsigned long __thiscall CCollection::GetVersion(void)",
    "public: void __thiscall CLocation::SetTitle(unsigned short const *)",
    "private: unsigned long __thiscall CCollection::HandleFolder(class CParseXML *,char *)",
    "public: __thiscall CFolder::~CFolder(void)",
    "public: __thiscall CLocation::CLocation(void)",
    "public: void __thiscall CFolder::SetParent(class CFolder *)",
    "public: void __thiscall CFolder::SetOrder(unsigned long)",
    "public: unsigned short __thiscall CCollection::GetLangId(char const *)",
    "public: void __thiscall CLocation::SetVolume(unsigned short const *)",
    "public: void __thiscall CLocation::SetPath(unsigned short const *)",
    "private: int __thiscall CCollection::WriteFolders(class CFolder * *)",
    "public: void __thiscall CPointerList::RemoveAll(void)",
    "public: void __thiscall CCollection::ConfirmTitles(void)",
    "public: char * __thiscall CLocation::GetPath(void)",
    "private: void __thiscall CCollection::DeleteChildren(class CFolder * *)",
    "public: class CLocation * __thiscall CCollection::AddLocation(char const *,char const *,char const *,char const *,unsigned long *)",
    "private: unsigned long __thiscall CCollection::AddRefedTitle(class CFolder *)",
    "private: unsigned long __thiscall CCollection::ParseFile(char const *)",
    "public: unsigned short __thiscall CTitle::GetLanguage(void)",
    "public: class CLocation & __thiscall CLocation::operator=(class CLocation const &)",
    "public: class CLocation * __thiscall CCollection::AddLocation(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned long *)",
    "public: char const * __thiscall CCollection::GetCollectionFileName(void)",
    "private: unsigned long __thiscall CCollection::DeleteTitle(class CTitle *)",
    "public: unsigned long __thiscall CTitle::AddLocationHistory(unsigned long,unsigned short const *,unsigned short const *,unsigned short const *,class CLocation const *,unsigned short const *,unsigned short const *,int)",
    "public: unsigned long __thiscall CFIFOString::AddTail(char *)",
    "public: void __thiscall CLocation::SetVolume(char const *)",
    "public: unsigned long __thiscall CCollection::Save(void)",
    "public: class CFolder * __thiscall CCollection::AddFolder(unsigned short const *,unsigned long,unsigned long *,unsigned short)",
    "public: class CFolder * __thiscall CFolder::AddChildFolder(char const *,unsigned long,unsigned long *,unsigned short)",
    "public: class CLocation * __thiscall CLocation::GetNextLocation(void)",
    "public: class CFolder * __thiscall CCollection::GetRootFolder(void)",
    "public: struct ListItem * __thiscall CPointerList::Next(struct ListItem *)",
    "public: class CLocation * __thiscall CCollection::FirstLocation(void)",
    "private: class CTitle * __thiscall CCollection::NewTitle(void)",
    "public: unsigned long __thiscall CFolder::AddChildFolder(class CFolder *)",
    "public: __thiscall CPointerList::~CPointerList(void)",
    "public: struct LocationHistory * __thiscall CTitle::GetLocation(unsigned long)",
    "public: __thiscall CFIFOString::CFIFOString(void)",
    "public: int __thiscall CCollection::GetFindMergedCHMS(void)",
    "private: unsigned long __thiscall CCollection::HandleTitle(class CParseXML *,char *)",
    "public: void __thiscall CTitle::SetLanguage(unsigned short)",
    "public: void __thiscall CFolder::SetNextFolder(class CFolder *)",
    "public: class CCollection & __thiscall CCollection::operator=(class CCollection const &)",
    "public: class CFolder * __thiscall CFolder::GetNextFolder(void)",
    "public: void __thiscall CCollection::SetSampleLocation(char const *)",
    "unsigned long __stdcall AllocSetValue(char const *,char * *)",
    "public: unsigned short const * __thiscall CTitle::GetIdW(void)",
    "public: unsigned long __thiscall CCollection::GetRefTitleCount(void)",
    "public: char * __thiscall CLocation::GetId(void)const",
    "public: void __thiscall CFolder::SetTitle(char const *)",
    "public: void __thiscall CCollection::SetVersion(unsigned long)",
    "public: void __thiscall CCollection::Dirty(void)",
    "private: unsigned long __thiscall CCollection::HandleCollection(class CParseXML *,char *)",
    "public: void __thiscall CLocation::SetId(char const *)",
    "private: unsigned long __thiscall CCollection::Release(void)",
    "public: void __thiscall CFolder::SetFirstChildFolder(class CFolder *)",
    "public: unsigned short const * __thiscall CLocation::GetIdW(void)",
    "private: unsigned long __thiscall CCollection::CheckTitleRef(unsigned short const *,unsigned short)",
    "public: struct ListItem * __thiscall CPointerList::Add(void *)",
    "public: char * __thiscall CLocation::GetTitle(void)",
    "public: void __thiscall CCollection::SetMasterCHM(char const *,unsigned short)",
    "public: __thiscall CCollection::CCollection(void)",
    "public: unsigned short __thiscall CCollection::GetLangId(unsigned short const *)",
    "public: class CTitle * __thiscall CCollection::AddTitle(char const *,char const *,char const *,char const *,char const *,unsigned short,unsigned int,class CLocation *,unsigned long *,int,char const *)",
    "public: unsigned long __thiscall CCollection::Open(char const *)",
    "public: void __thiscall CLocation::SetNextLocation(class CLocation *)",
    "private: unsigned long __thiscall CCollection::HandleCollectionEntry(class CParseXML *,char *)",
    "public: __thiscall CFIFOString::~CFIFOString(void)",
    "private: unsigned long __thiscall CCollection::HandleLocation(class CParseXML *,char *)",
    "public: class CTitle & __thiscall CTitle::operator=(class CTitle const &)",
    "public: unsigned short __thiscall CFolder::GetLanguage(void)",
    "private: int __thiscall CCollection::WriteFolder(class CFolder * *)",
    "public: void __thiscall CLocation::SetPath(char const *)",
    "public: int __thiscall CCollection::GetMasterCHM(char * *,unsigned short *)",
    "public: void __thiscall CCollection::SetSampleLocation(unsigned short const *)",
    "public: unsigned short const * __thiscall CLocation::GetTitleW(void)",
    "public: __thiscall CTitle::~CTitle(void)",
    "public: void __thiscall CCollection::SetMasterCHM(unsigned short const *,unsigned short)",
    "public: unsigned long __thiscall CFolder::GetOrder(void)",
    "public: unsigned short const * __thiscall CCollection::GetCollectionFileNameW(void)",
    "public: void __thiscall CFolder::SetLanguage(unsigned short)",
    "public: __thiscall CCollection::~CCollection(void)"
  ],
  "hid.dll": [
    "HidP_TranslateUsagesToI8042ScanCodes",
    "HidD_FreePreparsedData",
    "HidD_GetIndexedString",
    "HidP_UnsetUsages",
    "HidD_GetAttributes",
    "HidP_GetSpecificButtonCaps",
    "HidP_GetCaps",
    "HidD_FlushQueue",
    "HidD_GetConfiguration",
    "HidP_MaxUsageListLength",
    "HidD_GetNumInputBuffers",
    "HidP_UsageListDifference",
    "HidD_GetInputReport",
    "HidD_GetPreparsedData",
    "HidD_GetPhysicalDescriptor",
    "HidP_SetUsageValue",
    "HidP_GetScaledUsageValue",
    "HidP_SetScaledUsageValue",
    "HidP_GetUsageValue",
    "HidP_SetUsageValueArray",
    "HidP_GetUsages",
    "HidP_InitializeReportForID",
    "HidD_GetHidGuid",
    "HidP_GetUsageValueArray",
    "HidD_GetProductString",
    "HidD_Hello",
    "HidD_SetOutputReport",
    "HidP_GetUsagesEx",
    "HidP_GetLinkCollectionNodes",
    "HidD_SetNumInputBuffers",
    "HidD_GetFeature",
    "HidP_MaxDataListLength",
    "HidD_GetManufacturerString",
    "HidP_GetButtonCaps",
    "HidP_GetSpecificValueCaps",
    "HidD_SetConfiguration",
    "HidD_GetMsGenreDescriptor",
    "HidP_GetData",
    "HidD_SetFeature",
    "HidP_GetValueCaps",
    "HidD_GetSerialNumberString",
    "HidP_SetUsages",
    "HidP_SetData",
    "HidP_GetExtendedAttributes"
  ],
  "hidserv.dll": [
    "InstallHidserv",
    "ServiceMain"
  ],
  "hlink.dll": [
    "HlinkParseDisplayName",
    "HlinkResolveShortcut",
    "HlinkTranslateURL",
    "DllRegisterServer",
    "HlinkOnNavigate",
    "DllUnregisterServer",
    "HlinkCreateShortcut",
    "HlinkQueryCreateFromData",
    "HlinkResolveStringForData",
    "HlinkCreateShortcutFromMoniker",
    "HlinkOnRenameDocument",
    "DllCanUnloadNow",
    "HlinkIsShortcut",
    "HlinkCreateFromData",
    "HlinkCreateExtensionServices",
    "HlinkResolveMonikerForData",
    "HlinkGetSpecialReference",
    "OleSaveToStreamEx",
    "HlinkCreateFromString",
    "HlinkCreateFromMoniker",
    "HlinkNavigate",
    "HlinkClone",
    "HlinkCreateShortcutFromString",
    "DllGetClassObject",
    "HlinkResolveShortcutToMoniker",
    "HlinkGetValueFromParams",
    "HlinkPreprocessMoniker",
    "HlinkSetSpecialReference",
    "HlinkResolveShortcutToString",
    "HlinkCreateBrowseContext",
    "HlinkUpdateStackItem",
    "HlinkNavigateToStringReference"
  ],
  "hnetcfg.dll": [
    "HNetFreeSharingServicesPage",
    "HNetGetSharingServicesPage",
    "ReleaseSingletons",
    "RevokeClassObjects",
    "HNetSharedAccessSettingsDlg",
    "DllRegisterServer",
    "RegisterClassObjects",
    "HNetDeleteRasConnection",
    "DllCanUnloadNow",
    "HNetGetFirewallSettingsPage",
    "DllGetClassObject",
    "HNetSharingAndFirewallSettingsDlg",
    "WinBomConfigureWindowsFirewall",
    "DllUnregisterServer"
  ],
  "hnetmon.dll": [
    "InitHelperDll"
  ],
  "hotplug.dll": [
    "HotPlugDriverBlockedW",
    "HotPlugSafeRemovalNotificationW",
    "HotPlugRemovalVetoedW",
    "HotPlugStandbyVetoedW",
    "HotPlugWarmEjectVetoedW",
    "HotPlugHibernateVetoedW",
    "HotPlugEjectDevice",
    "CPlApplet",
    "HotPlugSafeRemovalDriveNotificationW",
    "HotPlugEjectVetoedW",
    "DllGetClassObject",
    "HotPlugChildWithInvalidIdW",
    "HotPlugEjectDeviceEx"
  ],
  "hotspotauth.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "httpapi.dll": [
    "HttpShutdownRequestQueue",
    "HttpCancelHttpRequest",
    "HttpAddUrl",
    "HttpAddFragmentToCache",
    "HttpWaitForDisconnect",
    "HttpFlushResponseCache",
    "HttpWaitForDisconnectEx",
    "HttpRemoveUrl",
    "HttpQueryServiceConfiguration",
    "HttpSendResponseEntityBody",
    "HttpCloseRequestQueue",
    "HttpControlService",
    "HttpCreateHttpHandle",
    "HttpCloseServerSession",
    "HttpSetUrlGroupProperty",
    "HttpCreateServerSession",
    "HttpQueryRequestQueueProperty",
    "HttpReceiveClientCertificate",
    "HttpQueryServerSessionProperty",
    "HttpQueryUrlGroupProperty",
    "HttpAddUrlToUrlGroup",
    "HttpCloseUrlGroup",
    "HttpDeleteServiceConfiguration",
    "HttpInitialize",
    "HttpRemoveUrlFromUrlGroup",
    "HttpSetServerSessionProperty",
    "HttpWaitForDemandStart",
    "HttpReceiveRequestEntityBody",
    "HttpGetCounters",
    "HttpCreateRequestQueue",
    "HttpSetServiceConfiguration",
    "HttpSetRequestQueueProperty",
    "HttpPrepareUrl",
    "HttpCreateUrlGroup",
    "HttpTerminate",
    "HttpReadFragmentFromCache",
    "HttpReceiveHttpRequest",
    "HttpSendHttpResponse"
  ],
  "httpprxm.dll": [
    "SubServiceStart",
    "SubServiceScmNotification",
    "SubServiceStop"
  ],
  "httpprxp.dll": [
    "ProxyHelperProviderDisconnectFromServer",
    "ProxyHelperProviderUnregisterEventNotification",
    "ProxyHelperProviderSetProxyConfiguration",
    "ProxyHelperProviderFreeMemory",
    "ProxyHelperProviderRegisterForEventNotification",
    "ProxyHelperGetProxyEventInformation",
    "ProxyHelperProviderSetProxyCredentials",
    "ProxyHelperProviderConnectToServer"
  ],
  "htui.dll": [
    "HTUI_ColorAdjustmentA",
    "HTUI_ColorAdjustmentW",
    "HTUI_DeviceColorAdjustmentA",
    "DllMain",
    "HTUI_ColorAdjustment",
    "HTUI_DeviceColorAdjustment",
    "HTUI_DeviceColorAdjustmentW"
  ],
  "IDStore.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "IEAdvpack.dll": [
    "RegInstallW",
    "TranslateInfStringEx",
    "AddDelBackupEntryA",
    "SetPerUserSecValuesW",
    "OpenINFEngineA",
    "FileSaveRestoreOnINFA",
    "IsNTAdmin",
    "GetVersionFromFileEx",
    "OpenINFEngineW",
    "LaunchINFSection",
    "GetVersionFromFileExA",
    "RegisterOCX",
    "DelNodeRunDLL32A",
    "DelNodeW",
    "RegRestoreAll",
    "DelNode",
    "DoInfInstall",
    "DoInfInstallW",
    "RegSaveRestoreA",
    "RunSetupCommandW",
    "RegSaveRestoreOnINF",
    "FileSaveRestoreA",
    "ExecuteCabW",
    "UserUnInstStubWrapperW",
    "SetPerUserSecValuesA",
    "DoInfInstallA",
    "GetVersionFromFileExW",
    "UserInstStubWrapper",
    "RegSaveRestoreW",
    "TranslateInfStringW",
    "RegInstallA",
    "GetVersionFromFile",
    "LaunchINFSectionExA",
    "FileSaveMarkNotExist",
    "ExtractFiles",
    "AddDelBackupEntryW",
    "RegRestoreAllW",
    "RegRestoreAllA",
    "SetPerUserSecValues",
    "DelNodeA",
    "FileSaveRestoreOnINF",
    "TranslateInfStringExW",
    "AddDelBackupEntry",
    "RegSaveRestoreOnINFA",
    "RegInstall",
    "CloseINFEngine",
    "LaunchINFSectionW",
    "RegSaveRestoreOnINFW",
    "FileSaveMarkNotExistA",
    "NeedReboot",
    "RunSetupCommand",
    "TranslateInfStringExA",
    "AdvInstallFileW",
    "FileSaveRestoreOnINFW",
    "OpenINFEngine",
    "AdvInstallFile",
    "ExecuteCab",
    "FileSaveMarkNotExistW",
    "ExecuteCabA",
    "TranslateInfString",
    "GetVersionFromFileA",
    "FileSaveRestore",
    "UserInstStubWrapperA",
    "NeedRebootInit",
    "UserInstStubWrapperW",
    "ExtractFilesA",
    "UserUnInstStubWrapper",
    "DelNodeRunDLL32",
    "DelNodeRunDLL32W",
    "UserUnInstStubWrapperA",
    "RebootCheckOnInstallA",
    "LaunchINFSectionA",
    "ExtractFilesW",
    "FileSaveRestoreW",
    "AdvInstallFileA",
    "GetVersionFromFileW",
    "RebootCheckOnInstall",
    "RegSaveRestore",
    "TranslateInfStringA",
    "RebootCheckOnInstallW",
    "RunSetupCommandA",
    "LaunchINFSectionExW",
    "LaunchINFSectionEx",
    "RegisterOCXW"
  ],
  "IKEEXT.DLL": [
    "IkeServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "INETRES.dll": "No exports",
  "IPHLPAPI.DLL": [
    "if_nametoindex",
    "GetUniDirectionalAdapterInfo",
    "GetUnicastIpAddressEntry",
    "ConvertGuidToStringW",
    "IcmpSendEcho2Ex",
    "InternalGetTcp6Table2",
    "InternalSetUnicastIpAddressEntry",
    "DeletePersistentTcpPortReservation",
    "GetUdpTable",
    "InternalGetMulticastIpAddressTable",
    "NhGetInterfaceNameFromGuid",
    "SetIpForwardEntry2",
    "GetAdaptersInfo",
    "ConvertInterfaceLuidToNameA",
    "ConvertInterfaceNameToLuidW",
    "GetTcpStatistics",
    "DeletePersistentUdpPortReservation",
    "NhpAllocateAndGetInterfaceInfoFromStack",
    "GetTcp6Table",
    "ConvertStringToGuidW",
    "GetIpNetTable2",
    "InternalGetTcpTableWithOwnerModule",
    "InternalGetAnycastIpAddressTable",
    "FlushIpNetTable",
    "SetIpForwardEntry",
    "SetIpNetEntry2",
    "_PfAddFiltersToInterface@24",
    "GetIpPathEntry",
    "SetCurrentThreadCompartmentId",
    "ConvertInterfaceGuidToLuid",
    "GetBestInterface",
    "_PfSetLogBuffer@28",
    "ConvertInterfaceIndexToLuid",
    "GetFriendlyIfIndex",
    "SetPerTcp6ConnectionEStats",
    "ConvertRemoteInterfaceLuidToAlias",
    "_PfTestPacket@20",
    "CreateSortedAddressPairs",
    "GetInterfaceInfo",
    "InternalDeleteIpForwardEntry2",
    "Icmp6CreateFile",
    "GetUnicastIpAddressTable",
    "GetSessionCompartmentId",
    "InternalCreateIpNetEntry2",
    "InternalGetTunnelPhysicalAdapter",
    "InternalGetIpNetTable",
    "GetIpErrorString",
    "InternalSetIpNetEntry2",
    "_PfDeleteLog@0",
    "NotifyTeredoPortChange",
    "InternalGetIfTable2",
    "CancelMibChangeNotify2",
    "CreatePersistentUdpPortReservation",
    "InternalCreateIpNetEntry",
    "do_echo_rep",
    "ConvertInterfacePhysicalAddressToLuid",
    "CreateIpNetEntry2",
    "DeleteIpNetEntry2",
    "GetIcmpStatisticsEx",
    "GetTeredoPort",
    "NTPTimeToNTFileTime",
    "GetIfEntry",
    "InternalSetIpForwardEntry2",
    "ResolveIpNetEntry2",
    "ResolveNeighbor",
    "RestoreMediaSense",
    "DeleteProxyArpEntry",
    "GetTcpTable",
    "GetUdpStatisticsEx",
    "SetIpInterfaceEntry",
    "GetAdaptersAddresses",
    "GetTcpTable2",
    "InternalDeleteIpForwardEntry",
    "_PfRebindFilters@8",
    "GetInvertedIfStackTable",
    "ConvertRemoteInterfaceLuidToGuid",
    "SetIpStatistics",
    "AllocateAndGetIpAddrTableFromStack",
    "GetBestInterfaceEx",
    "GetBestRoute",
    "IcmpCreateFile",
    "GetIfTable2Ex",
    "GetIpInterfaceEntry",
    "ConvertInterfaceLuidToGuid",
    "GetIpAddrTable",
    "ParseNetworkString",
    "_PfCreateInterface@24",
    "ConvertRemoteInterfaceGuidToLuid",
    "_PfRemoveFiltersFromInterface@20",
    "NhGetInterfaceNameFromDeviceGuid",
    "IcmpCloseHandle",
    "SetSessionCompartmentId",
    "InitializeUnicastIpAddressEntry",
    "GetIcmpStatistics",
    "SetNetworkInformation",
    "GetIpNetEntry2",
    "NotifyRouteChange",
    "_PfAddGlobalFilterToInterface@8",
    "GetRTTAndHopCount",
    "SetIpTTL",
    "ConvertRemoteInterfaceIndexToLuid",
    "InternalCreateUnicastIpAddressEntry",
    "InternalGetTcpTableWithOwnerPid",
    "InternalSetIpForwardEntry",
    "GetAdapterOrderMap",
    "CreateAnycastIpAddressEntry",
    "GetIpStatistics",
    "NhGetInterfaceDescriptionFromGuid",
    "GetOwnerModuleFromPidAndInfo",
    "ConvertInterfaceLuidToIndex",
    "GetIpNetworkConnectionBandwidthEstimates",
    "NotifyUnicastIpAddressChange",
    "ConvertRemoteInterfaceAliasToLuid",
    "GetIpForwardTable2",
    "GetAnycastIpAddressEntry",
    "NotifyRouteChange2",
    "InternalCreateAnycastIpAddressEntry",
    "GetUdp6Table",
    "IcmpParseReplies",
    "InternalGetUdpTable",
    "SetIpNetEntry",
    "GetCurrentThreadCompartmentId",
    "ConvertInterfaceAliasToLuid",
    "Icmp6ParseReplies",
    "NotifyIpInterfaceChange",
    "InitializeIpInterfaceEntry",
    "InternalGetIpInterfaceTable",
    "InternalGetAnycastIpAddressEntry",
    "InitializeIpForwardEntry",
    "InternalDeleteIpNetEntry2",
    "InternalGetTcpTable",
    "InternalFindInterfaceByAddress",
    "_PfRemoveGlobalFilterFromInterface@8",
    "ConvertInterfaceLuidToAlias",
    "GetIpForwardTable",
    "InternalGetUnicastIpAddressEntry",
    "NhGetGuidFromInterfaceName",
    "InternalGetIfTable",
    "SendARP",
    "GetTcp6Table2",
    "CloseGetIPPhysicalInterfaceForDestination",
    "AllocateAndGetInterfaceInfoFromStack",
    "InternalGetIpNetTable2",
    "InternalCreateIpForwardEntry",
    "NTTimeToNTPTime",
    "GetOwnerModuleFromTcpEntry",
    "InternalSetTeredoPort",
    "GetOwnerModuleFromUdpEntry",
    "GetUdpStatistics",
    "ConvertLengthToIpv4Mask",
    "GetExtendedTcpTable",
    "LookupPersistentUdpPortReservation",
    "ConvertInterfaceNameToLuidA",
    "IcmpSendEcho",
    "if_indextoname",
    "GetIpNetTable",
    "GetIfTable2",
    "SetUnicastIpAddressEntry",
    "GetMulticastIpAddressEntry",
    "GetOwnerModuleFromTcp6Entry",
    "IcmpSendEcho2",
    "InternalGetTcpTable2",
    "SetTcpEntry",
    "ConvertInterfaceLuidToNameW",
    "InternalGetUdp6TableWithOwnerModule",
    "UnenableRouter",
    "Icmp6SendEcho2",
    "NotifyAddrChange",
    "_PfBindInterfaceToIndex@16",
    "InternalGetMulticastIpAddressEntry",
    "GetIfStackTable",
    "InternalDeleteIpNetEntry",
    "SetPerTcpConnectionEStats",
    "_PfRemoveFilterHandles@12",
    "do_echo_req",
    "InternalGetIpNetEntry2",
    "DeleteIpForwardEntry2",
    "InternalCreateIpForwardEntry2",
    "DeleteIpForwardEntry",
    "GetIpForwardEntry2",
    "SetPerTcpConnectionStats",
    "InternalGetTcp6TableWithOwnerPid",
    "ConvertStringToInterfacePhysicalAddress",
    "_PfBindInterfaceToIPAddress@12",
    "GetPerAdapterInfo",
    "GetPerTcpConnectionStats",
    "NotifyStableUnicastIpAddressTable",
    "InternalDeleteUnicastIpAddressEntry",
    "GetOwnerModuleFromUdp6Entry",
    "InternalDeleteAnycastIpAddressEntry",
    "GetAnycastIpAddressTable",
    "_PfUnBindInterface@4",
    "InternalSetIpInterfaceEntry",
    "CreateIpForwardEntry2",
    "GetIpStatisticsEx",
    "LookupPersistentTcpPortReservation",
    "InternalSetTcpEntry",
    "SetAdapterIpAddress",
    "InternalGetUdpTableEx",
    "ConvertRemoteInterfaceLuidToIndex",
    "ConvertStringToGuidA",
    "GetExtendedUdpTable",
    "GetIfTable",
    "GetPerTcp6ConnectionStats",
    "GetNetworkInformation",
    "IpRenewAddress",
    "EnableRouter",
    "InternalGetUdp6TableWithOwnerPid",
    "DeleteUnicastIpAddressEntry",
    "InternalGetTcpTableEx",
    "GetNumberOfInterfaces",
    "CreateIpNetEntry",
    "InternalSetIpStats",
    "ConvertIpv4MaskToLength",
    "FreeMibTable",
    "ConvertGuidToStringA",
    "GetTcpStatisticsEx",
    "FlushIpNetTable2",
    "CreateIpForwardEntry",
    "InternalGetUdpTableWithOwnerPid",
    "_PfDeleteInterface@4",
    "InternalGetIpAddrTable",
    "InternalGetIpForwardTable",
    "GetPerTcpConnectionEStats",
    "InternalGetIpForwardEntry2",
    "DeleteIpNetEntry",
    "GetPerTcp6ConnectionEStats",
    "InternalGetUnicastIpAddressTable",
    "DeleteIPAddress",
    "SetPerTcp6ConnectionStats",
    "InternalGetUdpTableWithOwnerModule",
    "DeleteAnycastIpAddressEntry",
    "InternalGetIfEntry2",
    "FlushIpPathTable",
    "GetIfEntry2",
    "GetMulticastIpAddressTable",
    "InternalSetIpNetEntry",
    "register_icmp",
    "AddIPAddress",
    "SetIfEntry",
    "InternalGetIPPhysicalInterfaceForDestination",
    "DisableMediaSense",
    "GetIpInterfaceTable",
    "InternalCleanupPersistentStore",
    "CreateProxyArpEntry",
    "GetAdapterIndex",
    "SetIpStatisticsEx",
    "InternalGetForwardIpTable2",
    "_PfGetInterfaceStatistics@16",
    "CreatePersistentTcpPortReservation",
    "CreateUnicastIpAddressEntry",
    "InternalGetTcp6TableWithOwnerModule",
    "CancelIPChangeNotify",
    "InternalSetIfEntry",
    "_PfMakeLog@4",
    "GetIpPathTable",
    "GetNetworkParams",
    "InternalGetIpInterfaceEntry",
    "GetBestRoute2",
    "IpReleaseAddress"
  ],
  "IPSECSVC.DLL": [
    "SpdServiceMain"
  ],
  "IasMigPlugin.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "IconCodecService.dll": "No exports",
  "IdCtrls.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "IdListen.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "InkEd.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "InputSwitch.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "ias.dll": [
    "ServiceMain"
  ],
  "iasacct.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "iasads.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "iasdatastore.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "iashlpr.dll": [
    "InitializeIas",
    "DoRequestAsync",
    "FreeAttributes",
    "ShutdownIas",
    "DllGetClassObject",
    "AllocateAttributes",
    "GetOptionIas",
    "DoRequest",
    "MemFreeIas",
    "SetOptionIas",
    "ConfigureIas",
    "MemReallocIas",
    "DllCanUnloadNow",
    "MemAllocIas",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "iasnap.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "iaspolcy.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "iasrad.dll": [
    "public: long __thiscall VSAFilter::radiusToIAS(unsigned char *,unsigned long,class IASTL::IASAttributeVector &)const",
    "public: long __thiscall VSAFilter::shutdown(void)",
    "public: long __thiscall VSAFilter::initialize(void)",
    "public: long __thiscall VSAFilter::radiusFromIAS(struct IAttributesRaw *,int)const",
    "public: long __thiscall VSAFilter::radiusToIAS(struct IAttributesRaw *)const",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "iasrecst.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "iassam.dll": [
    "IASParmsQueryUserProperty",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "iassdo.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "iassvcs.dll": [
    "IASAdler32",
    "IASGetLocalDictionary",
    "IASUninitialize",
    "DllRegisterServer",
    "DllUnregisterServer",
    "IASReportSecurityEvent",
    "IASGetProductLimits",
    "IASRegisterComponent",
    "IASRequestThread",
    "IASSetMaxThreadIdle",
    "IASGlobalLock",
    "IASReportLicenseViolation",
    "IASReportEvent",
    "IASRadiusCrypt",
    "IASVariantChangeType",
    "DllCanUnloadNow",
    "IASGetDictionary",
    "IASShutdown",
    "DllGetClassObject",
    "IASSetMaxNumberOfThreads",
    "IASGetHostByName",
    "IASGlobalUnlock",
    "IASInitialize",
    "IASAllocateUniqueID"
  ],
  "icfupgd.dll": [
    "MigrateSettingsW",
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "icm32.dll": [
    "CMTranslateColors",
    "CMCheckColors",
    "CMCreateProfileW",
    "CMCheckRGBs",
    "CMCreateMultiProfileTransform",
    "CMCreateProfile",
    "CMDeleteTransform",
    "CMTranslateRGBsExt",
    "CMGetInfo",
    "CMGetNamedProfileInfo",
    "CMConvertIndexToColorName",
    "CMCreateTransform",
    "CMConvertColorNameToIndex",
    "CMTranslateRGBs",
    "CMIsProfileValid",
    "CMCreateTransformW",
    "CMCheckColorsInGamut",
    "CMCreateTransformExt",
    "CMCreateTransformExtW",
    "CMTranslateRGB",
    "CMCreateDeviceLinkProfile"
  ],
  "icmp.dll": [
    "do_echo_rep",
    "IcmpCreateFile",
    "IcmpSendEcho",
    "IcmpParseReplies",
    "do_echo_req",
    "IcmpSendEcho2",
    "register_icmp",
    "IcmpCloseHandle"
  ],
  "icmui.dll": [
    "SetupColorMatchingW",
    "SetupColorMatchingA"
  ],
  "icsigd.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "icsvc.dll": [
    "HeartbeatServiceMain",
    "KvpexchangeServiceMain",
    "RdvServiceMain",
    "DllUnregisterServer",
    "VssServiceMain",
    "TimesyncServiceMain",
    "DllRegisterServer",
    "ShutdownServiceMain"
  ],
  "idndl.dll": [
    "DownlevelVerifyScripts",
    "DownlevelGetLocaleScripts",
    "DownlevelGetStringScripts"
  ],
  "ieapfltr.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "iedkcs32.dll": [
    "InternetInitializeAutoProxyDll",
    "BrandICW",
    "BrandCleanInstallStubs",
    "BrandICW2",
    "BrandMe",
    "ProcessGroupPolicyForActivities",
    "BrandIntra",
    "Clear",
    "CloseRASConnections",
    "BrandIE4",
    "BrandInternetExplorer",
    "BrandIEActiveSetup",
    "ProcessGroupPolicyForActivitiesEx",
    "ProcessGroupPolicyForZoneMap"
  ],
  "ieframe.dll": [
    "IEDeleteFile",
    "IEDisassociateThreadWithTab",
    "HlinkFrameNavigateNHL",
    "CreateExtensionGuidEnumerator",
    "IEGetWriteableHKCU",
    "IETrackingProtectionEnabled",
    "SoftwareUpdateMessageBox",
    "DoBlobDownload",
    "IESetProtectedModeCookie",
    "OpenURL",
    "AddUrlToFavorites",
    "DoPrivacyDlg",
    "IELaunchURL",
    "IEFindFirstFile",
    "DllInstall",
    "DllRegisterServer",
    "URLQualifyA",
    "DllUnregisterServer",
    "IERegisterWritableRegistryKey",
    "IESaveFile",
    "IERefreshElevationPolicy",
    "IEGetProtectedModeCookie",
    "DoAddToFavDlgW",
    "HlinkFindFrame",
    "IECreateFile",
    "IESetProtectedModeCookieEx",
    "SHAddSubscribeFavorite",
    "DoOrganizeFavDlgW",
    "IECancelSaveFile",
    "DllCanUnloadNow",
    "IEInPrivateFilteringEnabled",
    "IELaunchManageAddOnsUI",
    "TriggerFileDownload",
    "IEUnregisterWritableRegistry",
    "ExportCookieFileByProcessW",
    "HlinkFrameNavigate",
    "ImportCookieFileByProcessW",
    "IEGetFileAttributesEx",
    "DoOrganizeFavDlg",
    "IEGetWriteableFolderPath",
    "IEIsInPrivateBrowsing",
    "IERemoveDirectory",
    "CORLockDownProvider",
    "ImportPrivacySettings",
    "IEMoveFileEx",
    "DllGetVersion",
    "SetQueryNetSessionCount",
    "IECreateDirectory",
    "DoFileDownloadEx",
    "DllGetClassObject",
    "IERegisterWritableRegistryValue",
    "DoAddToFavDlg",
    "IEShowSaveFileDialog",
    "IEIsProtectedModeURL",
    "IERegSetValueEx",
    "IEIsProtectedModeProcess",
    "URLQualifyW",
    "IEAssociateThreadWithTab",
    "IERegCreateKeyEx",
    "DoFileDownload"
  ],
  "iepeers.dll": [
    "DllGetClassObject",
    "DllCanUnloadNow",
    "DllEnumClassObjects",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "iernonce.dll": [
    "RunOnceExProcess",
    "InitCallback"
  ],
  "iertutil.dll": [
    "DllGetActivationFactory",
    "IEDllLoader",
    "FastMimeGetIsMimeFilterEnabled",
    "IUriBuilderInternalCreateDomain",
    "LCIEUnpackString",
    "CreateUriPriv",
    "CreateUriFromMultiByteString",
    "GetPropertyName",
    "GetPropertyFromName",
    "CreateIUriBuilder",
    "IntlPercentEncodeNormalize",
    "ResetIDNLanguageData",
    "IsDWORDProperty",
    "LCIEPackString",
    "RevertImpersonate",
    "ImpersonateUser",
    "LCIECalculatePackedStringSize",
    "DllCanUnloadNow",
    "ResetIEExtensibility",
    "IEGetProcessModule",
    "IsStringProperty",
    "CreateStringHashN",
    "CreateUriWithFragment",
    "IEGetFrameUtilExports",
    "GetPortFromUrlScheme",
    "FastMimeSetIsMimeFilterEnabled",
    "IERT_DelayLoadFailureHook",
    "PrivateCoInternetParseIUri",
    "ResetIERegistrySettings",
    "UriFromHostAndScheme",
    "FastMimeGetFileExtension",
    "DllGetClassObject",
    "GetIDNSettingsForIE",
    "GetIUriPriv",
    "PrivateCoInternetCombineIUri",
    "CreateUri",
    "FastMimeLookupKnownType",
    "IEGetTabWindowExports",
    "GetIUriPriv2",
    "PrivateCoInternetCanonicalizeIUri"
  ],
  "iesetup.dll": [
    "IEApplyCurrentHardening",
    "IEHardenAdminNow",
    "IEShowHardeningDialog",
    "IEHardenAdmin",
    "IEHardenMachineNow",
    "IEHardenUser",
    "IEHardenLMSettings"
  ],
  "iesysprep.dll": [
    "Sysprep_Generalize_IE",
    "Sysprep_Specialize_IE",
    "Sysprep_Cleanup_IE"
  ],
  "ieui.dll": [
    "GetGadget",
    "GetStdColorF",
    "DUserRegisterSuper",
    "SetGadgetRect",
    "GetGadgetProperty",
    "GetStdColorBrushI",
    "SetGadgetFocusEx",
    "EnsureGadgetTransInitialized",
    "GetGadgetBitmap",
    "MapGadgetPoints",
    "SetGadgetFillI",
    "GetGadgetCenterPoint",
    "DUserStopPVLAnimation",
    "DUserCastDirect",
    "SetGadgetCenterPoint",
    "DUserCastClass",
    "AttachWndProcA",
    "SetRestoreCachedLayeredRefFlag",
    "RemoveClippingImmunityFromVisual",
    "SetWindowResizeFlag",
    "GadgetTransCompositionChanged",
    "DeleteHandle",
    "SetGadgetOrder",
    "SetHardwareDeviceUsage",
    "AddGadgetMessageHandler",
    "DUserPostMethod",
    "SetGadgetFlags",
    "ClearTopmostVisual",
    "SetGadgetFillF",
    "DUserFlushDeferredMessages",
    "GetGadgetSize",
    "GetGadgetRootInfo",
    "DUserInstanceOf",
    "DUserRegisterGuts",
    "DestroyPendingDCVisuals",
    "GetGadgetFocus",
    "RemoveGadgetProperty",
    "UtilDrawOutlineRect",
    "GetGadgetFlags",
    "InitGadgetComponent",
    "ReleaseMouseCapture",
    "DrawGadgetTree",
    "PeekMessageExW",
    "SetGadgetMessageFilter",
    "DetachWndProc",
    "GetMessageExA",
    "DUserGetScalePRID",
    "FindStdColor",
    "DUserPostEvent",
    "IsInsideContext",
    "GetStdColorName",
    "GetStdColorI",
    "InvalidateLayeredDescendants",
    "ScheduleGadgetTransitions",
    "GetStdColorBrushF",
    "DUserSendEvent",
    "GetGadgetAnimation",
    "GetFinalAnimatingPosition",
    "FindGadgetTargetingInfo",
    "DUserCastHandle",
    "BuildDropTarget",
    "GadgetTransSettingChanged",
    "SetAtlasingHints",
    "FindGadgetMessages",
    "GetStdPalette",
    "AutoTrace",
    "GetDebug",
    "IsGadgetParentChainStyle",
    "RegisterGadgetProperty",
    "DUserRegisterStub",
    "SetGadgetParent",
    "FireGadgetMessages",
    "UtilDrawBlendRect",
    "BuildAnimation",
    "SetGadgetFocus",
    "AttachWndProcW",
    "UtilGetColor",
    "InvalidateGadget",
    "GetGadgetTicket",
    "ForwardGadgetMessage",
    "GetDUserModule",
    "InitGadgets",
    "ClearPushedOpacitiesFromGadgetTree",
    "ReleaseLayeredRef",
    "GetStdColorPenI",
    "SetActionTimeslice",
    "UnregisterGadgetMessage",
    "DUserDeleteGadget",
    "RegisterGadgetMessage",
    "CacheDWriteRenderTarget",
    "LookupGadgetTicket",
    "DUserFlushMessages",
    "EnsureAnimationsEnabled",
    "GetGadgetRotation",
    "GetGadgetRect",
    "AdjustClipInsideRef",
    "EnumGadgets",
    "DetachGadgetVisuals",
    "SetGadgetBufferInfo",
    "DUserStopAnimation",
    "GetGadgetVisual",
    "UnregisterGadgetProperty",
    "CustomGadgetHitTestQuery",
    "ReleaseDetachedObjects",
    "UtilSetBackground",
    "IsStartDelete",
    "DUserGetRectPRID",
    "DUserSendMethod",
    "SetGadgetLayerInfo",
    "GetGadgetBufferInfo",
    "SetGadgetStyle",
    "GetGadgetScale",
    "SetGadgetRootInfo",
    "DUserGetGutsData",
    "BuildInterpolation",
    "GetGadgetStyle",
    "ResetDUserDevice",
    "DUserFindClass",
    "SetGadgetScale",
    "GetGadgetMessageFilter",
    "GetActionTimeslice",
    "DllMain",
    "WaitMessageEx",
    "UtilBuildFont",
    "RegisterGadgetMessageString",
    "SetGadgetProperty",
    "AddLayeredRef",
    "UnregisterGadgetMessageString",
    "DUserBuildGadget",
    "FindGadgetFromPoint",
    "SetGadgetRotation",
    "GetGadgetLayerInfo",
    "GetCachedDWriteRenderTarget",
    "GetGadgetRgn",
    "GetStdColorPenF",
    "DUserGetRotatePRID",
    "CreateGadget",
    "DisableContainerHwnd",
    "RemoveGadgetMessageHandler",
    "SetTransitionVisualProperties",
    "GetMessageExW",
    "CreateAction",
    "DUserGetAlphaPRID",
    "PeekMessageExA",
    "ChangeCurrentAnimationScenario"
  ],
  "ifmon.dll": [
    "InitHelperDll"
  ],
  "ifsutil.dll": [
    "public: virtual __thiscall SECRUN::~SECRUN(void)",
    "public: class MEDIA_TRACK_INFORMATION * __thiscall MEDIA_TRACK_INFORMATION::CreateTrack(unsigned long,unsigned char)",
    "public: static long __stdcall SUPERAREA::GenerateLabelNotification(class WSTRING const *,class WSTRING *,struct _FILE_FS_SIZE_INFORMATION *,struct _FILE_FS_VOLUME_INFORMATION *)",
    "public: virtual void __thiscall WRITEVIEW_CACHE::AdjustCacheSize(unsigned __int64 *,unsigned __int64 *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::FormatScaleQuickFormatVerify(unsigned __int64,unsigned long *,unsigned long *,unsigned long *,unsigned __int64 *)",
    "public: unsigned char __thiscall IO_DP_DRIVE::VerifyRead(class BIG_INT,unsigned long,void *)",
    "public: static unsigned char __stdcall AUTOREG::PushEntry(class WSTRING const *)",
    "public: class MESSAGE * __thiscall IO_DP_DRIVE::GetMessageW(void)",
    "public: void __thiscall DP_DRIVE::SetSectors(class BIG_INT)",
    "public: static unsigned char __stdcall IFS_SYSTEM::IsVolumeWriteable(class WSTRING *,unsigned char *,long *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryFirstBlockInLastNonEmptySession(unsigned long *)",
    "public: unsigned char __thiscall IO_DP_DRIVE::IssueDeleteNotification(unsigned __int64,unsigned long)",
    "public: unsigned char __thiscall MOUNT_POINT_MAP::GetAt(unsigned long,class WSTRING *,class WSTRING *)",
    "public: unsigned char __thiscall NUMBER_SET::Initialize(void)",
    "public: static unsigned char __stdcall IFS_SYSTEM::EnableVolumeIntegrity(class WSTRING const *,unsigned short)",
    "public: unsigned char __thiscall NUMBER_SET::AddStart(class BIG_INT)",
    "public: unsigned char __thiscall DP_DRIVE::QueryUdfMediaNeedsLowLevelFormat(void)",
    "protected: unsigned char __thiscall SUPERAREA::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,unsigned long,class MESSAGE *)",
    "public: unsigned char __thiscall DP_DRIVE::Initialize(class WSTRING const *,class WSTRING const *,class MESSAGE *,unsigned char,unsigned char)",
    "int __stdcall DiskCopyMainLoop(class WSTRING const *,class WSTRING const *,class WSTRING const *,class WSTRING const *,unsigned char,class MESSAGE *,class MESSAGE *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryHighestTrackAddress(unsigned long *)",
    "public: unsigned char __thiscall NUMBER_SET::AddNext(class BIG_INT)",
    "public: unsigned char __thiscall IO_DP_DRIVE::HardRead(class BIG_INT,unsigned long,void *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryFileSystemName(class WSTRING const *,class WSTRING *,long *,class WSTRING *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::IsThisNtfs(class BIG_INT,unsigned long,void *)",
    "public: static void __stdcall IFS_SYSTEM::QueryNtfsTime(union _LARGE_INTEGER *)",
    "void __stdcall RestoreThreadExecutionState(long,unsigned long)",
    "public: unsigned char __thiscall DIGRAPH::SearchForMatch(unsigned long,class BITVECTOR *,class NUMBER_SET *,unsigned char *,class BIG_INT *)",
    "public: unsigned short __thiscall DP_DRIVE::QueryEccBlockSizeInSectors(void)",
    "public: static unsigned char __stdcall IFS_SYSTEM::NtDriveNameToDosDriveName(class WSTRING const *,class WSTRING *)",
    "public: virtual unsigned char __thiscall BLOCK_CACHE::SqmExport(unsigned char (__cdecl*)(void *,unsigned long,unsigned char,char *,...),void *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::IsArcSystemPartition(class WSTRING const *,unsigned char *)",
    "public: virtual unsigned char __thiscall SECRUN::Read(void)",
    "public: void __thiscall NUMBER_SET::QueryDisjointRange(unsigned long,class BIG_INT *,class BIG_INT *)const",
    "public: unsigned char __thiscall SPARSE_SET::RemoveAll(void)",
    "public: __thiscall READ_MODIFY_WRITE_CACHE::READ_MODIFY_WRITE_CACHE(void)",
    "public: static unsigned char __stdcall IFS_SYSTEM::EnableVolumeCompression(class WSTRING const *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryUdfMediaSupportsBackgroundFormat(void)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryProcessorInformation(class DSTRING *,unsigned long *,unsigned __int64 *)",
    "public: unsigned char __thiscall NUMBER_SET::Add(class BIG_INT)",
    "public: unsigned char __thiscall LOG_IO_DP_DRIVE::Initialize(class WSTRING const *,class MESSAGE *,unsigned char,unsigned short)",
    "public: unsigned char __thiscall DP_DRIVE::SendSonyMSRequestSenseCmd(struct _SENSE_DATA *)",
    "public: unsigned char __thiscall SPARSE_SET::CheckAndAdd(class BIG_INT,unsigned char *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryNtfsVersion(unsigned char *,unsigned char *,class LOG_IO_DP_DRIVE *,void *)",
    "public: static unsigned char __stdcall AUTOREG::AddEntry(class WSTRING const *)",
    "public: unsigned char __thiscall NUMBER_SET::Remove(class BIG_INT,class BIG_INT)",
    "public: unsigned char __thiscall IO_DP_DRIVE::SqmExport(class WSTRING const *,unsigned char (__cdecl*)(void *,unsigned long,unsigned char,char *,...),void *)",
    "public: unsigned char __thiscall MOUNT_POINT_MAP::QueryVolumeName(class WSTRING *,class WSTRING *)",
    "public: __thiscall READ_WRITE_CACHE::READ_WRITE_CACHE(void)",
    "public: unsigned char __thiscall DP_DRIVE::WaitForWriteCompletion(class MESSAGE *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::IsFileSystemEnabled(class WSTRING const *,unsigned char *)",
    "public: __thiscall DIGRAPH::DIGRAPH(void)",
    "public: void __thiscall IO_DP_DRIVE::AdjustCacheSize(unsigned __int64 *,unsigned __int64 *)",
    "public: __thiscall SECRUN::SECRUN(void)",
    "public: unsigned char __thiscall VOL_LIODPDRV::Recover(class WSTRING const *,class MESSAGE *)",
    "public: unsigned short const * __thiscall VOL_LIODPDRV::GetFileSystemName(void)",
    "public: unsigned char __thiscall SNAPSHOT::CheckSnapshotPresence(void)",
    "public: unsigned char __thiscall NUMBER_SET::Add(class NUMBER_SET const *)",
    "public: unsigned char __thiscall DIGRAPH::EliminateCycles(class CONTAINER *,unsigned char *)",
    "public: __thiscall POW_CACHE::POW_CACHE(void)",
    "public: virtual __thiscall MOUNT_POINT_MAP::~MOUNT_POINT_MAP(void)",
    "public: virtual __thiscall NUMBER_SET::~NUMBER_SET(void)",
    "public: void __thiscall MEDIA_TRACK_INFORMATION_SORTED_BY_SIZE::Initialize(class MEDIA_TRACK_INFORMATION *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryRewritableMOSupport(void)",
    "public: static long __stdcall SNAPSHOT::GetVolumeSnapshot(class WSTRING *,class SNAPSHOT * *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryUdfMediaSupportsQuickGrow(void)",
    "public: unsigned char __thiscall IO_DP_DRIVE::DismountAndLock(void)",
    "public: void * __thiscall CANNED_SECURITY::GetCannedSecurityDescriptor(enum _CANNED_SECURITY_TYPE,unsigned long *)",
    "public: unsigned char __thiscall DP_DRIVE::ReinitiateBackgroundFormat(void)",
    "public: virtual unsigned char __thiscall WRITEVIEW_CACHE::SqmExport(unsigned char (__cdecl*)(void *,unsigned long,unsigned char,char *,...),void *)",
    "public: unsigned char __thiscall NUMBER_SET::Add(class BIG_INT,class BIG_INT)",
    "public: static unsigned char __stdcall SNAPSHOT::IsFatalError(long)",
    "public: __thiscall WRITEVIEW_CACHE_ENTRY::~WRITEVIEW_CACHE_ENTRY(void)",
    "public: unsigned char __thiscall IO_DP_DRIVE::InvalidateVolume(void)",
    "public: virtual __thiscall VOL_LIODPDRV::~VOL_LIODPDRV(void)",
    "public: virtual __thiscall BLOCK_CACHE::~BLOCK_CACHE(void)",
    "public: unsigned char __thiscall DP_DRIVE::QueryUdfMediaNeedsVat(void)",
    "public: unsigned char __thiscall DP_DRIVE::ReadFormattableCapacity(unsigned char,unsigned long *,unsigned char *,unsigned long *)",
    "public: virtual unsigned char __thiscall SECRUN::VerifyRead(void)",
    "public: static unsigned char __stdcall DP_DRIVE::QueryFreeBlocksInLastTrack(void *,unsigned long *)",
    "public: unsigned char __thiscall IO_DP_DRIVE::FlushCache(void)",
    "public: void * __thiscall TLINK::GetNext(void *)",
    "public: unsigned short * __thiscall SNAPSHOT::GetSnapshotNtDeviceName(void)",
    "public: enum DRIVE_TYPE __thiscall DP_DRIVE::QueryDriveType(void)const",
    "public: void * __thiscall TLINK::GetSortedFirst(void)",
    "protected: __thiscall VOL_LIODPDRV::VOL_LIODPDRV(void)",
    "private: virtual __thiscall SNAPSHOT::~SNAPSHOT(void)",
    "public: static unsigned char __stdcall WRITEVIEW_BACKINGSTORE::CleanupBackingStore(class WSTRING *)",
    "public: static void __stdcall DRIVE_CACHE::GetPhaseSubPhase(unsigned short * *,unsigned short * *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryMediaByte(void)const",
    "public: unsigned char __thiscall DP_DRIVE::ReinitializeDriveParameters(class MESSAGE *)",
    "public: unsigned char __thiscall WRITE_ONCE_CACHE::Initialize(class IO_DP_DRIVE *,unsigned long,unsigned long,unsigned long)",
    "public: __thiscall POW_TRACK::POW_TRACK(void)",
    "public: virtual __thiscall TLINK::~TLINK(void)",
    "public: static class CANNED_SECURITY * __stdcall IFS_SYSTEM::GetCannedSecurity(void)",
    "public: static unsigned char __stdcall IFS_SYSTEM::NtDeviceNameToDosDriveName(class WSTRING const *,class WSTRING *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryID(class WSTRING *,class WSTRING const *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryCorruptionState(class WSTRING *,unsigned long *,unsigned char *,long *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::FileSetAttributes(class WSTRING const *,unsigned long,unsigned long *)",
    "public: unsigned char __thiscall MOUNT_POINT_MAP::Initialize(void)",
    "public: static unsigned char __stdcall IFS_SYSTEM::EnableVolumeUpgrade(class WSTRING const *)",
    "public: void * __thiscall TLINK::GetBuffer(void *)",
    "public: void __thiscall DP_DRIVE::CloseDriveHandle(void)",
    "public: unsigned char __thiscall DP_DRIVE::InitializePowTrackConfiguration(unsigned char,unsigned char *)",
    "public: unsigned char __thiscall NUMBER_SET::CheckAndRemove(class BIG_INT,unsigned char *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::IsThisReFS(class BIG_INT,unsigned long,void *)",
    "public: virtual class BIG_INT __thiscall DP_DRIVE::QuerySectors(void)const",
    "public: virtual unsigned char __thiscall SECRUN::Write(void)",
    "public: __thiscall NUMBER_SET::NUMBER_SET(void)",
    "public: unsigned char __thiscall NUMBER_SET::Remove(class BIG_INT)",
    "public: unsigned char __thiscall DP_DRIVE::CreateTrack(unsigned long,unsigned char,enum DP_DRIVE::NwaType)",
    "public: class BIG_INT & __thiscall TLINK::GetData(void *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::CheckValidSecurityDescriptor(unsigned long,struct _SECURITY_DESCRIPTOR *)",
    "public: void * __thiscall DP_DRIVE::QueryDriveHandle(void)const",
    "public: unsigned char __thiscall IO_DP_DRIVE::Verify(class BIG_INT,class BIG_INT)",
    "public: unsigned char __thiscall MOUNT_POINT_MAP::QueryDriveName(class WSTRING *,class WSTRING *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryFreeBlocksInLastTrack(unsigned long *)",
    "public: unsigned char __thiscall VOL_LIODPDRV::ForceAutochk(unsigned char,unsigned long,unsigned long,unsigned short,class WSTRING const *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::IsVolumeDirty(class WSTRING *,unsigned char *,unsigned char *,long *)",
    "public: unsigned char __thiscall IO_DP_DRIVE::PowForceAllocation(unsigned long,unsigned long,unsigned long *,enum DP_DRIVE::NwaType)",
    "public: unsigned char __thiscall IO_DP_DRIVE::Write(class BIG_INT,unsigned long,void *)",
    "public: __thiscall BLOCK_CACHE::BLOCK_CACHE(void)",
    "public: unsigned char __thiscall DP_DRIVE::SendSonyMSTestUnitReadyCmd(struct _SENSE_DATA *)",
    "private: long __thiscall SNAPSHOT::Initialize(unsigned short *)",
    "public: __thiscall DIGRAPH_EDGE::DIGRAPH_EDGE(void)",
    "public: class BIG_INT __thiscall NUMBER_SET::QueryNumber(class BIG_INT)const",
    "public: void __thiscall WRITEVIEW_CACHE::Remove(class WRITEVIEW_CACHE_ENTRY *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryNextWritableAddress(unsigned long *,enum DP_DRIVE::NwaType)",
    "void __stdcall NotifyFveAfterFormat(class DSTRING *)",
    "public: unsigned char __thiscall DIGRAPH::QueryParents(unsigned long,class NUMBER_SET *)const",
    "public: void __thiscall IO_DP_DRIVE::QueryCacheSize(unsigned __int64 *,unsigned __int64 *)",
    "public: unsigned char __thiscall NUMBER_SET::QueryContainingRange(class BIG_INT,class BIG_INT *,class BIG_INT *)const",
    "public: static unsigned long __stdcall SUPERAREA::ComputeVolId(unsigned long)",
    "public: __thiscall SPARSE_SET::SPARSE_SET(void)",
    "public: unsigned char __thiscall DP_DRIVE::QueryLastWritableAddress(unsigned long *,enum DP_DRIVE::NwaType)",
    "public: __thiscall WRITE_ONCE_CACHE::WRITE_ONCE_CACHE(void)",
    "public: unsigned char __thiscall MOUNT_POINT_MAP::AddDriveName(class WSTRING *,class WSTRING *)",
    "public: static unsigned char __stdcall SNAPSHOT::GetSnapshotErrorMessage(long,class WSTRING *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryID(struct _GUID *,class WSTRING const *)",
    "public: unsigned char __thiscall DIGRAPH::QueryChildren(unsigned long,class NUMBER_SET *)const",
    "public: unsigned char __thiscall DP_DRIVE::SendSonyMSFormatCmd(unsigned char)",
    "public: unsigned char __thiscall NUMBER_SET::CheckAndAdd(class BIG_INT,unsigned char *)",
    "unsigned char __stdcall RegisterExtensionCallbacks(struct _CALLBACK_REGISTRATION *)",
    "public: void __thiscall WRITEVIEW_CACHE::Purge(class BIG_INT,unsigned long)",
    "public: virtual void __thiscall WRITEVIEW_CACHE::QueryCacheSize(unsigned __int64 *,unsigned __int64 *)",
    "public: virtual unsigned long __thiscall DP_DRIVE::QuerySectorSize(void)const",
    "public: void __thiscall WRITEVIEW_CACHE::Delete(class WRITEVIEW_CACHE_ENTRY *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryUdfMediaNeedsSparing(void)",
    "public: void * __thiscall IO_DP_DRIVE::SetVerifyHandle(void *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryFileSystemNameByHandle(void *,class WSTRING *,long *,class WSTRING *)",
    "public: unsigned char __thiscall LOG_IO_DP_DRIVE::Write(class BIG_INT,unsigned long,void *)",
    "public: unsigned char __thiscall WRITEVIEW_CACHE::Initialize(class IO_DP_DRIVE *,class DRIVE_CACHE *,class WSTRING const *,unsigned short,unsigned char)",
    "public: virtual enum FORMAT_ERROR_CODE __thiscall VOL_LIODPDRV::WriteEntireDrive(class MESSAGE *,void *,unsigned long,unsigned int,unsigned int)",
    "public: unsigned char __thiscall SPARSE_SET::Add(class BIG_INT)",
    "public: unsigned char __thiscall SECRUN::Initialize(class MEM *,class IO_DP_DRIVE *,class BIG_INT,unsigned long)",
    "public: unsigned char __thiscall VOL_LIODPDRV::SetVolumeLabelAndPrintFormatReport(class WSTRING const *,class MESSAGE *)",
    "public: static void __stdcall DRIVE_CACHE::SetPhaseSubPhase(unsigned short *,unsigned short *)",
    "public: unsigned char __thiscall TLINK::Initialize(unsigned short)",
    "public: unsigned char __thiscall DP_DRIVE::QueryDiscStatus(unsigned long *,unsigned long *)",
    "public: unsigned char __thiscall MOUNT_POINT_MAP::AddVolumeName(class WSTRING *,class WSTRING *)",
    "public: unsigned char __thiscall READ_AHEAD_CACHE::Initialize(class IO_DP_DRIVE *,unsigned long,unsigned long)",
    "public: __thiscall WRITEVIEW_CACHE::WRITEVIEW_CACHE(void)",
    "public: unsigned long __thiscall DP_DRIVE::QueryUdfMediaType(void)",
    "protected: unsigned char __thiscall VOL_LIODPDRV::Initialize(class WSTRING const *,class WSTRING const *,class SUPERAREA *,class MESSAGE *,unsigned char)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryServer(unsigned char *)",
    "public: unsigned char __thiscall NUMBER_SET::Remove(class NUMBER_SET const *)",
    "public: virtual __thiscall LOG_IO_DP_DRIVE::~LOG_IO_DP_DRIVE(void)",
    "public: void __thiscall BIG_INT::QueryCompressedInteger(unsigned char *,unsigned char *)const",
    "public: virtual void __thiscall BLOCK_CACHE::QueryCacheSize(unsigned __int64 *,unsigned __int64 *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryStorageDeviceProperty(void *,class DSTRING *,class DSTRING *,class DSTRING *,unsigned char *,unsigned char *)",
    "public: __thiscall READ_CACHE::READ_CACHE(void)",
    "public: unsigned char __thiscall DIGRAPH::RemoveEdge(unsigned long,unsigned long)",
    "public: unsigned char __thiscall DIGRAPH::Initialize(unsigned long)",
    "public: static unsigned char __stdcall VOL_LIODPDRV::QueryAutochkTimeOut(unsigned long *)",
    "public: unsigned char __thiscall DP_DRIVE::SendSonyMSModeSenseCmd(struct SONY_MS_MODE_SENSE_DATA *)",
    "public: unsigned char __thiscall SPARSE_SET::Initialize(void)",
    "public: unsigned char __thiscall BLOCK_CACHE::Initialize(class IO_DP_DRIVE *)",
    "public: unsigned char __thiscall IO_DP_DRIVE::Lock(void)",
    "public: class MESSAGE * __thiscall SUPERAREA::GetMessageW(void)",
    "public: unsigned char __thiscall IO_DP_DRIVE::HardWrite(class BIG_INT,unsigned long,void *,unsigned char)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryVolumeSize(class WSTRING const *,unsigned __int64 *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryProcessPrivateMemory(void *,unsigned __int64 *)",
    "public: virtual unsigned char __thiscall WRITEVIEW_CACHE::QueryMemoryLimit(unsigned __int64 *,unsigned char *)",
    "public: unsigned char __thiscall NUMBER_SET::RemoveAll(void)",
    "public: unsigned char __thiscall DP_DRIVE::Initialize(class WSTRING const *,class MESSAGE *,unsigned char,unsigned char,unsigned short)",
    "public: unsigned char __thiscall LOG_IO_DP_DRIVE::Initialize(class WSTRING const *,class WSTRING const *,class MESSAGE *,unsigned char)",
    "public: unsigned __int64 __thiscall BLOCK_CACHE::GetPerfFreq(void)",
    "public: static unsigned char __stdcall VOL_LIODPDRV::SetAutochkTimeOut(unsigned long)",
    "public: static unsigned char __stdcall AUTOREG::IsEntryPresent(class WSTRING const *,class WSTRING const *)",
    "public: unsigned char __thiscall SNAPSHOT::QuerySnapshotDiffAreaVolume(class WSTRING *)",
    "public: void * __thiscall TLINK::GetFirst(void)",
    "public: static unsigned char __stdcall IFS_SYSTEM::WriteToFile(class WSTRING const *,void *,unsigned long,unsigned char)",
    "public: virtual __thiscall WRITEVIEW_CACHE::~WRITEVIEW_CACHE(void)",
    "public: void __thiscall SPARSE_SET::DumpHashTable(void)",
    "public: __thiscall WRITEVIEW_CACHE_ENTRY::WRITEVIEW_CACHE_ENTRY(class WRITEVIEW_CACHE *,unsigned short)",
    "public: static unsigned long __stdcall IFS_SYSTEM::QueryPageSize(void)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryStorageAdapterProperty(void *,class DSTRING *,class DSTRING *)",
    "public: unsigned char __thiscall POW_CACHE::Initialize(unsigned long,unsigned long,unsigned long,unsigned long,unsigned long)",
    "public: __thiscall MOUNT_POINT_TUPLE::MOUNT_POINT_TUPLE(void)",
    "public: class BIG_INT __thiscall INTSTACK::Look(unsigned long)const",
    "public: static class SNAPSHOT * __stdcall SNAPSHOT::GetCurrentSnapshot(void)",
    "public: static unsigned char __stdcall SNAPSHOT::ReleaseVolumeSnapshot(class SNAPSHOT *)",
    "public: virtual __thiscall DP_DRIVE::~DP_DRIVE(void)",
    "public: void __thiscall DP_DRIVE::SetLastStatus(long)",
    "public: union _LARGE_INTEGER __thiscall IO_DP_DRIVE::QueryPartitionStartingOffset(void)const",
    "public: static unsigned char __stdcall AUTOREG::IsFrontEndPresent(class WSTRING const *,class WSTRING const *)",
    "public: enum _MEDIA_TYPE __thiscall DP_DRIVE::QueryRecommendedMediaType(void)const",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryCanonicalNtDriveName(class WSTRING const *,class WSTRING *)",
    "public: static unsigned char __stdcall DP_DRIVE::QueryMrwSupport(void *)",
    "public: unsigned char __thiscall VOL_LIODPDRV::SetFileSystemName(unsigned short const *)",
    "public: void __thiscall IO_DP_DRIVE::SetCache(class DRIVE_CACHE *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryHotPlugInfo(void)const",
    "public: unsigned char __thiscall SPARSE_SET::Check(class BIG_INT)",
    "public: unsigned char __thiscall DP_DRIVE::QueryOpenSessionBounds(unsigned long *,unsigned long *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryUdfMediaHasPow(void)",
    "public: unsigned char __thiscall SPARSE_SET::CheckAndRemove(class BIG_INT,unsigned char *)",
    "public: unsigned char __thiscall NUMBER_SET::Subtract(class NUMBER_SET *,class NUMBER_SET *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QuerySystemMemory(unsigned long *,unsigned __int64 *,unsigned __int64 *,unsigned __int64 *)",
    "public: __thiscall TLINK::TLINK(void)",
    "public: unsigned char __thiscall POW_CACHE::Initialize(class IO_DP_DRIVE *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryFirstBlockInLastSession(unsigned long *)",
    "public: __thiscall INTSTACK::INTSTACK(void)",
    "public: unsigned char __thiscall FORMAT_SQM::Initialize(class DP_DRIVE *,unsigned short const *,unsigned long,unsigned long)",
    "public: unsigned char __thiscall VOL_LIODPDRV::ChkDsk(enum FIX_LEVEL,class MESSAGE *,unsigned long,unsigned long,unsigned short,unsigned long *,class WSTRING const *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::EnableFileSystem(class WSTRING const *)",
    "public: unsigned short __thiscall TLINK::QuerySize(void)const",
    "public: class BIG_INT & __thiscall TLINK::GetNextDataSlot(void)",
    "public: __thiscall MOUNT_POINT_MAP::MOUNT_POINT_MAP(void)",
    "public: unsigned long __thiscall DIGRAPH::QueryNumChildren(unsigned long)const",
    "unsigned char __stdcall GetDefaultFileSystemIfs(struct FMIFS_DEF_FS_PARAM *,struct FMIFS_DEF_FS_OUT *,unsigned long *)",
    "public: virtual __thiscall INTSTACK::~INTSTACK(void)",
    "private: __thiscall SNAPSHOT::SNAPSHOT(void)",
    "public: __thiscall MEDIA_TRACK_INFORMATION::MEDIA_TRACK_INFORMATION(void)",
    "public: unsigned char __thiscall IO_DP_DRIVE::Verify(class BIG_INT,class BIG_INT,class NUMBER_SET *)",
    "public: unsigned char __thiscall NUMBER_SET::DoesIntersectSet(class BIG_INT,class BIG_INT)const",
    "public: unsigned char __thiscall DP_DRIVE::IsBootCriticalVolume(void)",
    "public: unsigned long __thiscall DIGRAPH::QueryNumParents(unsigned long)const",
    "public: unsigned char __thiscall DP_DRIVE::QueryVolumeBounds(unsigned long *,unsigned long *)",
    "public: static unsigned char __stdcall AUTOREG::IsEntryPresent(class WSTRING const *)",
    "public: unsigned char __thiscall LOG_IO_DP_DRIVE::SetSystemId(unsigned char)",
    "public: void __thiscall MEDIA_TRACK_INFORMATION::Initialize(struct _TRACK_INFORMATION2 *)",
    "protected: enum FORMAT_ERROR_CODE __thiscall VOL_LIODPDRV::Initialize(class WSTRING const *,class SUPERAREA *,class MESSAGE *,unsigned char,unsigned char,enum _MEDIA_TYPE,unsigned short,unsigned char,unsigned int,unsigned char)",
    "public: unsigned char __thiscall DP_DRIVE::SendPowLowLevelFormat(class MESSAGE *)",
    "public: virtual unsigned long __thiscall DP_DRIVE::QueryDataRedundancyCount(void)",
    "public: unsigned char __thiscall IO_DP_DRIVE::Read(class BIG_INT,unsigned long,void *)",
    "public: unsigned char __thiscall IO_DP_DRIVE::QueryMemoryLimit(unsigned __int64 *,unsigned char *)",
    "public: virtual __thiscall CANNED_SECURITY::~CANNED_SECURITY(void)",
    "public: void __thiscall IO_DP_DRIVE::QueryWriteUsage(unsigned __int64 *,unsigned __int64 *)",
    "public: unsigned char __thiscall DIGRAPH::AddEdge(unsigned long,unsigned long)",
    "public: void * __thiscall TLINK::QueryDisjointRangeAndAssignBuffer(class BIG_INT *,unsigned short *,unsigned short *,void *,unsigned long,void *)",
    "public: unsigned char __thiscall INTSTACK::Initialize(void)",
    "public: static unsigned char __stdcall AUTOREG::DeleteEntry(class WSTRING const *,unsigned char)",
    "public: class BIG_INT & __thiscall TLINK::GetData(unsigned short)",
    "public: unsigned char __thiscall DP_DRIVE::SetPowTrackConfiguration(unsigned char)",
    "public: void __thiscall TLINK::ShellSort(void)",
    "public: void __thiscall INTSTACK::Pop(unsigned long)",
    "public: __thiscall LOG_IO_DP_DRIVE::LOG_IO_DP_DRIVE(void)",
    "public: void __thiscall IO_DP_DRIVE::QueryReadUsage(unsigned __int64 *,unsigned __int64 *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::FormatScaleTotalFreeClusters(unsigned __int64,unsigned __int64,unsigned long *,unsigned long *,unsigned __int64 *,unsigned __int64 *)",
    "public: class IO_DP_DRIVE * __thiscall SECRUN::GetDrive(void)",
    "public: static void __stdcall IFS_SYSTEM::GetSystemTime(struct _TIME_FIELDS *)",
    "public: static unsigned char __stdcall AUTOREG::DeleteEntry(class WSTRING const *,class WSTRING const *)",
    "public: unsigned char __thiscall DP_DRIVE::SendSonyMSInquiryCmd(struct SONY_MS_INQUIRY_DATA *)",
    "public: unsigned char __thiscall FORMAT_SQM::Export(int)",
    "public: unsigned char __thiscall DP_DRIVE::WaitForUnit(class MESSAGE *)",
    "public: unsigned char __thiscall DP_DRIVE::IsUdfMediaWritable(void)",
    "public: unsigned long __thiscall DP_DRIVE::QueryPhysicalSectorSize(void)",
    "public: unsigned short * __thiscall SNAPSHOT::GetSnapshotGlobalDeviceName(void)",
    "public: void * __thiscall TLINK::GetSortedNext(void *)",
    "public: enum FORMAT_ERROR_CODE __thiscall VOL_LIODPDRV::Format(class WSTRING const *,class MESSAGE *,unsigned long,unsigned long,unsigned long)",
    "public: static long __stdcall DP_DRIVE::QueryNtfsSupportInfo(void *,unsigned char *)",
    "public: unsigned char __thiscall INTSTACK::ReverseCopy(class INTSTACK *)",
    "public: __thiscall CANNED_SECURITY::CANNED_SECURITY(void)",
    "protected: __thiscall SUPERAREA::SUPERAREA(void)",
    "public: unsigned char __thiscall INTSTACK::Push(class BIG_INT)",
    "public: static unsigned char __stdcall IFS_SYSTEM::DosDriveNameToNtDriveName(class WSTRING const *,class WSTRING *)",
    "public: virtual __thiscall DIGRAPH::~DIGRAPH(void)",
    "public: static unsigned char __stdcall IFS_SYSTEM::DismountVolume(class WSTRING const *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryLastRecordedAddress(unsigned long *)",
    "public: unsigned char __thiscall IO_DP_DRIVE::Prefetch(class BIG_INT,unsigned long)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QuerySystemVersion(class DSTRING *)",
    "public: unsigned char __thiscall READ_CACHE::Initialize(class IO_DP_DRIVE *,unsigned long)",
    "public: unsigned char __thiscall DP_DRIVE::IsATformat(void)const",
    "public: unsigned short __thiscall TLINK::QueryMemberCount(void)const",
    "public: unsigned char __thiscall READ_MODIFY_WRITE_CACHE::Initialize(class IO_DP_DRIVE *,unsigned long,unsigned long,unsigned char,unsigned char)",
    "public: virtual __thiscall SPARSE_SET::~SPARSE_SET(void)",
    "public: virtual __thiscall SUPERAREA::~SUPERAREA(void)",
    "public: unsigned char __thiscall CANNED_SECURITY::Initialize(void)",
    "public: unsigned char __thiscall DIGRAPH::QueryParentsWithChildren(class NUMBER_SET *,unsigned long)const",
    "public: __thiscall DP_DRIVE::DP_DRIVE(void)",
    "public: void * __thiscall IO_DP_DRIVE::QueryVerifyHandle(void)",
    "public: unsigned char __thiscall READ_WRITE_CACHE::Initialize(class IO_DP_DRIVE *,unsigned long)",
    "public: class IO_DP_DRIVE * __thiscall SUPERAREA::GetDrive(void)",
    "public: virtual void __thiscall BLOCK_CACHE::AdjustCacheSize(unsigned __int64 *,unsigned __int64 *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryFreeDiskSpace(class WSTRING const *,class BIG_INT *)",
    "public: unsigned char __thiscall LOG_IO_DP_DRIVE::Read(class BIG_INT,unsigned long,void *)",
    "public: void __thiscall BIG_INT::Set(unsigned char,unsigned char const *)",
    "public: unsigned long __thiscall POW_CACHE::QuerySectorSize(void)",
    "public: __thiscall READ_AHEAD_CACHE::READ_AHEAD_CACHE(void)",
    "public: virtual unsigned long __thiscall DP_DRIVE::QueryWriteBlockSize(void)const",
    "public: unsigned char __thiscall SPARSE_SET::Add(class SPARSE_SET const *)",
    "unsigned char __stdcall InvalidateFve(class DSTRING *,class MESSAGE *,struct _FORMATEX_FN_PARAM *)",
    "public: void __thiscall TLINK::Sort(void)"
  ],
  "ifsutilx.dll": [
    "long __stdcall InitializeCOM(unsigned char *)",
    "void __stdcall UninitializeCOM(void)",
    "unsigned char __stdcall CheckSnapshotPresence(struct _SNAPSHOT_DATA *)",
    "unsigned char __stdcall ReleaseVolumeSnapshot(struct _SNAPSHOT_DATA *)",
    "long __stdcall CreateVolumeSnapshot(unsigned short *,struct _SNAPSHOT_DATA * *)",
    "unsigned char __stdcall GetSnapshotErrorMessage(long,class WSTRING *)"
  ],
  "igdDiag.dll": [
    "DetectNAT",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "imagehlp.dll": [
    "SymEnumerateModules64",
    "SymGetLineNext64",
    "SymUnDName",
    "SymGetSymPrev",
    "UnmapDebugInformation",
    "SymLoadModule64",
    "SymFunctionTableAccess",
    "SymSetSearchPath",
    "SymSetScopeFromAddr",
    "SymMatchStringW",
    "GetTimestampForLoadedLibrary",
    "SymFromName",
    "SymUnDName64",
    "SymGetModuleBase",
    "SymQueryInlineTrace",
    "SymGetSymFromName",
    "MapFileAndCheckSumW",
    "ImageRvaToSection",
    "SymGetTypeFromName",
    "UpdateDebugInfoFile",
    "SymEnumSymbolsEx",
    "ImagehlpApiVersionEx",
    "SymRegisterCallback",
    "SymGetSourceFileFromTokenW",
    "RemovePrivateCvSymbolic",
    "EnumerateLoadedModulesEx",
    "SymGetSymFromAddr64",
    "UpdateDebugInfoFileEx",
    "SymGetLineFromAddr64",
    "BindImageEx",
    "MakeSureDirectoryPathExists",
    "CheckSumMappedFile",
    "ReBaseImage64",
    "SymUnloadModule64",
    "SymLoadModule",
    "StackWalk",
    "SymSrvGetFileIndexes",
    "FindExecutableImageEx",
    "SymGetLineFromName",
    "RemovePrivateCvSymbolicEx",
    "EnumerateLoadedModules64",
    "GetImageConfigInformation",
    "SymEnumerateModules",
    "SymMatchString",
    "TouchFileTimes",
    "SymMatchFileName",
    "FindDebugInfoFileEx",
    "SymEnumSymbols",
    "StackWalk64",
    "SymRegisterFunctionEntryCallback64",
    "MapAndLoad",
    "EnumerateLoadedModules",
    "SymGetSymFromName64",
    "SymEnumerateSymbols",
    "FindDebugInfoFile",
    "ImageAddCertificate",
    "SymEnumTypesByNameW",
    "SymGetModuleInfoW64",
    "SymRegisterFunctionEntryCallback",
    "SplitSymbols",
    "SymSetContext",
    "SymFunctionTableAccess64",
    "SymGetLineNext",
    "SymSetScopeFromIndex",
    "ImageDirectoryEntryToData",
    "ImageDirectoryEntryToDataEx",
    "SymSrvGetFileIndexStringW",
    "SymGetSymFromAddr",
    "FindFileInSearchPath",
    "StackWalkEx",
    "SymGetSymPrev64",
    "SymGetTypeInfoEx",
    "SymGetModuleInfoW",
    "SymGetSymbolFile",
    "SymEnumerateSymbolsW",
    "ImageLoad",
    "SymGetLineFromInlineContext",
    "SearchTreeForFile",
    "SymGetSourceVarFromTokenW",
    "FindExecutableImage",
    "SymSrvGetFileIndexString",
    "RemoveRelocations",
    "SymGetModuleInfo",
    "SymEnumTypesByName",
    "SymGetSymNext",
    "FindFileInPath",
    "SymGetModuleBase64",
    "SymGetSourceFileTokenW",
    "MapFileAndCheckSumA",
    "BindImage",
    "SymFindFileInPath",
    "SymAddrIncludeInlineTrace",
    "SetImageConfigInformation",
    "SymMatchStringA",
    "SymCompareInlineTrace",
    "SymGetTypeFromNameW",
    "ImageGetCertificateData",
    "SymSetOptions",
    "ImageRemoveCertificate",
    "SymSrvGetFileIndexesW",
    "SymEnumTypes",
    "SymUnloadModule",
    "SymGetSearchPath",
    "SymInitialize",
    "SymRegisterCallback64",
    "SymFindFileInPathW",
    "SymFromAddr",
    "SymGetSymNext64",
    "UnDecorateSymbolName",
    "SymFromInlineContextW",
    "SymCleanup",
    "GetImageUnusedHeaderBytes",
    "SymGetLineFromAddr",
    "SymEnumSymbolsForAddr",
    "SymGetModuleInfo64",
    "SymEnumSym",
    "ImageUnload",
    "ImageRvaToVa",
    "SymEnumSymbolsExW",
    "SymEnumerateSymbols64",
    "ImagehlpApiVersion",
    "SymGetLinePrev64",
    "EnumerateLoadedModulesW64",
    "SymGetTypeInfo",
    "ImageEnumerateCertificates",
    "SymGetLineFromInlineContextW",
    "ImageGetCertificateHeader",
    "SymMatchFileNameW",
    "SymSetScopeFromInlineContext",
    "SymGetLineFromName64",
    "SymEnumerateSymbolsW64",
    "SymGetSymbolFileW",
    "UnMapAndLoad",
    "SymGetOptions",
    "SymFromInlineContext",
    "SymEnumTypesW",
    "SymGetLinePrev",
    "ImageGetDigestStream",
    "MapDebugInformation",
    "EnumerateLoadedModulesExW",
    "ImageNtHeader",
    "ReBaseImage"
  ],
  "imageres.dll": "No exports",
  "imagesp1.dll": "No exports",
  "imapi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "imapi2.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "imapi2fs.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "imgutil.dll": [
    "CreateDDrawSurfaceOnDIB",
    "IdentifyMIMEType",
    "DitherTo8",
    "ComputeInvCMAP",
    "DecodeImageEx",
    "GetMaxMIMEIDBytes",
    "SniffStream",
    "DecodeImage",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "CreateMIMEMap"
  ],
  "imm32.dll": [
    "ImmActivateLayout",
    "ImmFreeLayout",
    "ImmCreateIMCC",
    "ImmInstallIMEA",
    "CtfImmIsTextFrameServiceDisabled",
    "ImmAssociateContextEx",
    "ImmSendIMEMessageExW",
    "ImmEnumRegisterWordA",
    "ImmGetHotKey",
    "ImmGetImeInfoEx",
    "ImmGetImeMenuItemsA",
    "ImmSetOpenStatus",
    "ImmUnlockClientImc",
    "CtfImmIsCiceroStartedInThread",
    "ImmGetCandidateListCountA",
    "ImmSimulateHotKey",
    "ImmSetCompositionFontA",
    "CtfImmGetTMAEFlags",
    "ImmGetCompositionStringA",
    "ImmLockClientImc",
    "ImmGetIMCCSize",
    "ImmIMPQueryIMEA",
    "CtfImmDispatchDefImeMessage",
    "CtfImmAppCompatEnableIMEonProtectedCode",
    "ImmGetImeMenuItemsW",
    "CtfImmIsComStartedInThread",
    "ImmSetCompositionFontW",
    "CtfImmTIMActivate",
    "ImmConfigureIMEA",
    "CtfImmRestoreToolbarWnd",
    "ImmGetContext",
    "ImmProcessKey",
    "GetKeyboardLayoutCP",
    "ImmGetGuideLineA",
    "ImmIMPGetIMEA",
    "CtfImmSetCiceroStartInThread",
    "CtfImmLastEnabledWndDestroy",
    "ImmWINNLSEnableIME",
    "ImmGetConversionListW",
    "ImmIMPQueryIMEW",
    "CtfImmCoUninitialize",
    "ImmLockIMCC",
    "ImmPutImeMenuItemsIntoMappedFile",
    "ImmSetCompositionStringW",
    "ImmGetRegisterWordStyleA",
    "ImmSetCompositionStringA",
    "ImmGetIMCLockCount",
    "ImmDestroyContext",
    "ImmUnlockIMCC",
    "CtfImmHideToolbarWnd",
    "ImmCallImeConsoleIME",
    "CtfImmGenerateMessage",
    "ImmSetCandidateWindow",
    "ImmIMPSetIMEA",
    "CtfImmLeaveCoInitCountSkipMode",
    "ImmUnlockIMC",
    "ImmWINNLSGetIMEHotkey",
    "ImmDisableIme",
    "ImmGetProperty",
    "CtfImmGetGlobalIMEStatus",
    "ImmShowSoftKeyboard",
    "CtfImmSetAppCompatFlags",
    "CtfImmGetCompatibleKeyboardLayout",
    "ImmUnlockImeDpi",
    "ImmDisableLegacyIME",
    "CtfImmGetGuidAtom",
    "ImmGetStatusWindowPos",
    "ImmGetCandidateListCountW",
    "ImmGetIMCCLockCount",
    "ImmGetCompositionFontW",
    "ImmLockImeDpi",
    "ImmSetStatusWindowPos",
    "ImmIsUIMessageA",
    "ImmGetConversionListA",
    "ImmEnumRegisterWordW",
    "ImmGetGuideLineW",
    "ImmGetCompositionStringW",
    "ImmNotifyIME",
    "ImmDisableTextFrameService",
    "ImmGetCompositionWindow",
    "ImmGetAppCompatFlags",
    "ImmCreateContext",
    "ImmGetOpenStatus",
    "ImmGetIMEFileNameA",
    "ImmIMPSetIMEW",
    "ImmEnumInputContext",
    "ImmGetIMEFileNameW",
    "CtfImmGetIMEFileName",
    "ImmReleaseContext",
    "CtfImmNotify",
    "ImmDestroyIMCC",
    "ImmGetCandidateListW",
    "ImmReSizeIMCC",
    "CtfImmEnterCoInitCountSkipMode",
    "ImmAssociateContext",
    "ImmCreateSoftKeyboard",
    "ImmIsIME",
    "ImmDestroySoftKeyboard",
    "ImmGetVirtualKey",
    "ImmLockIMC",
    "ImmGetCandidateWindow",
    "ImmRegisterWordA",
    "ImmSetCompositionWindow",
    "CtfImmIsGuidMapEnable",
    "ImmRegisterClient",
    "ImmTranslateMessage",
    "ImmSetHotKey",
    "ImmGetDescriptionW",
    "ImmDisableIME",
    "ImmSendIMEMessageExA",
    "ImmRegisterWordW",
    "ImmEscapeA",
    "ImmLoadLayout",
    "ImmGetDefaultIMEWnd",
    "ImmGetDescriptionA",
    "ImmSetActiveContext",
    "ImmConfigureIMEW",
    "ImmIsUIMessageW",
    "ImmRequestMessageW",
    "ImmSystemHandler",
    "ImmGenerateMessage",
    "ImmInstallIMEW",
    "ImmGetCompositionFontA",
    "ImmWINNLSGetEnableStatus",
    "ImmUnregisterWordA",
    "CtfImmSetDefaultRemoteKeyboardLayout",
    "ImmGetRegisterWordStyleW",
    "ImmLoadIME",
    "ImmEscapeW",
    "ImmIMPGetIMEW",
    "ImmRequestMessageA",
    "ImmSetConversionStatus",
    "CtfImmIsCiceroEnabled",
    "ImmGetConversionStatus",
    "ImmSetActiveContextConsoleIME",
    "ImmUnregisterWordW",
    "ImmGetCandidateListA"
  ],
  "inetcomm.dll": [
    "MimeOleSetBodyPropW",
    "MimeOleInetDateToFileTime",
    "MimeOleGenerateCID",
    "MimeOleGetBodyPropA",
    "MimeOleGetFileInfo",
    "HrSaveAttachmentAs",
    "EssKeyExchPreferenceDecodeEx",
    "MimeOleDecodeHeader",
    "MimeOleObjectFromMoniker",
    "MimeOleOpenFileStream",
    "MimeOleGetBodyPropW",
    "EssReceiptEncodeEx",
    "MimeEditGetBackgroundImageUrl",
    "HrAttachDataFromBodyPart",
    "MimeOleGetFileExtension",
    "HrAthGetFileName",
    "EssKeyExchPreferenceEncodeEx",
    "EssMLHistoryDecodeEx",
    "MimeOleSetPropW",
    "DllGetClassObject",
    "CreateIMAPTransport",
    "MimeOleGetPropertySchema",
    "EssReceiptDecodeEx",
    "HrAthGetFileNameW",
    "MimeOleParseRfc822Address",
    "MimeOleSMimeCapRelease",
    "CreateRangeList",
    "MimeOleStripHeaders",
    "HrAttachDataFromFile",
    "EssSecurityLabelDecodeEx",
    "MimeOleAlgStrengthFromSMimeCap",
    "EssMLHistoryEncodeEx",
    "HrCreateDisplayNameWithSizeForFile",
    "MimeOleParseRfc822AddressW",
    "RichMimeEdit_CreateInstance",
    "GetDllMajorVersion",
    "HrGetLastOpenFileDirectoryW",
    "MimeOleCreateVirtualStream",
    "MimeOleCreatePropertySet",
    "HrGetLastOpenFileDirectory",
    "MimeOleCreateByteStream",
    "CreateSMTPTransport",
    "MimeOleSMimeCapsToDlg",
    "MimeOleSMimeCapAddSMimeCap",
    "MimeOleSMimeCapsFull",
    "HrGetAttachIconByFile",
    "MimeOleGetCodePageInfo",
    "MimeOleGetAllocator",
    "CreateRASTransport",
    "HrFreeAttachData",
    "MimeOleGetCodePageCharset",
    "MimeOleSMimeCapInit",
    "MimeEditDocumentFromStream",
    "MimeOleSetBodyPropA",
    "MimeOleCreateMessage",
    "MimeOleGetPropW",
    "MimeOleGenerateFileName",
    "HrGetAttachIcon",
    "MimeOleGetContentTypeExt",
    "HrDoAttachmentVerb",
    "EssContentHintDecodeEx",
    "MimeOleGetExtContentType",
    "MimeOleSMimeCapsFromDlg",
    "MimeOleFileTimeToInetDate",
    "MimeOleAlgNameFromSMimeCap",
    "MimeOleCreateSecurity",
    "MimeOleEncodeHeader",
    "MimeOleSMimeCapGetHashAlg",
    "EssReceiptRequestDecodeEx",
    "HrSaveAttachToFile",
    "MimeOleCreateMessageParts",
    "MimeOleGetFileInfoW",
    "MimeOleUnEscapeStringInPlace",
    "MimeOleCreateHeaderTable",
    "MimeOleParseMhtmlUrl",
    "CreateNNTPTransport",
    "MimeOleGetInternat",
    "MimeOleCreateBody",
    "MimeOleSetDefaultCharset",
    "MimeOleGenerateMID",
    "EssSignCertificateDecodeEx",
    "MimeOleGetCharsetInfo",
    "EssReceiptRequestEncodeEx",
    "MimeOleGetDefaultCharset",
    "EssSecurityLabelEncodeEx",
    "MimeEditIsSafeToRun",
    "MimeEditCreateMimeDocument",
    "MimeOleGetPropA",
    "MimeOleFindCharset",
    "MimeOleSetCompatMode",
    "MimeOleGetCertsFromThumbprints",
    "MimeOleSMimeCapAddCert",
    "MimeOleSMimeCapGetEncAlg",
    "CreateIMAPTransport2",
    "DllCanUnloadNow",
    "MimeOleClearDirtyTree",
    "MimeGetAddressFormatW",
    "EssSignCertificateEncodeEx",
    "MimeOleCreateHashTable",
    "HrGetDisplayNameWithSizeForFile",
    "CreatePOP3Transport",
    "MimeOleConvertEnrichedToHTML",
    "CreateCommunityTransport",
    "EssContentHintEncodeEx",
    "MimeOleSetPropA",
    "MimeOleGetRelatedSection",
    "MimeEditViewSource",
    "MimeOleUnEscapeStringInPlaceW"
  ],
  "inetmib1.dll": [
    "SnmpExtensionInitEx",
    "SnmpExtensionQuery",
    "SnmpExtensionInit",
    "SnmpExtensionTrap"
  ],
  "inetpp.dll": [
    "InitializePrintProvidor"
  ],
  "inetppui.dll": [
    "InitializePrintMonitorUI"
  ],
  "input.dll": [
    "CPlApplet",
    "EnumLayoutOrTipForSetup",
    "InputDll_DownlevelUninitialize",
    "SetDefaultLayoutOrTip",
    "EnumEnabledLayoutOrTip",
    "InputDll_DownlevelSetUILanguage",
    "QueryLayoutOrTipStringUserReg",
    "EnumEnabledLayoutOrTipPrivate",
    "InstallLayoutOrTip",
    "InputDll_DownlevelInitialize",
    "InstallLayoutOrTipUserReg",
    "InstallLayoutOrTipPrivate",
    "SaveSystemAcctInputSettings",
    "QueryLayoutOrTipString",
    "GetDefaultLayout",
    "SaveDefaultUserInputSettings",
    "GetLayoutDescription",
    "InputDll_DownlevelEnumLayoutOrTipForSetup",
    "ActivateInputProfile"
  ],
  "inseng.dll": [
    "CheckForVersionConflict",
    "GetICifRWFileFromFile",
    "PurgeDownloadDirectory",
    "CheckTrustEx",
    "GetICifFileFromFile",
    "DownloadFile",
    "DllCanUnloadNow",
    "CheckTrust",
    "DllGetClassObject"
  ],
  "iologmsg.dll": "No exports",
  "iphlpsvc.dll": [
    "ServiceMain",
    "IphlpsvcSysprepGeneralize",
    "SvchostPushServiceGlobals"
  ],
  "ipnathlp.dll": [
    "NhInitializeTraceManagement",
    "NatShutdownTranslator",
    "NhCreateStreamSocket",
    "NhAcquireVariableLengthBuffer",
    "NhAcquireFixedLengthBuffer",
    "NatCreateDynamicFullRedirect",
    "NatQueryInformationRedirect",
    "NhWriteDatagramSocket",
    "NatInitializePortReservation",
    "NatShutdownPortReservation",
    "NatCreateRedirectEx",
    "NatLookupAndQueryInformationSessionMapping",
    "NatAcquirePortReservation",
    "NatCancelDynamicRedirect",
    "NhReadStreamSocket",
    "NhReleaseBuffer",
    "RegisterProtocol",
    "NatCancelRedirect",
    "NhDeleteSocket",
    "NhWriteStreamSocket",
    "NatCreateDynamicRedirect",
    "NatReleasePortReservation",
    "NatQueryInformationRedirectHandle",
    "NhAcceptStreamSocket",
    "NhInitializeBufferManagement",
    "NhCreateDatagramSocket",
    "NatCreateRedirect",
    "NhReadDatagramSocket",
    "SvchostPushServiceGlobals",
    "ServiceMain",
    "NatInitializeTranslator",
    "NatCreateDynamicRedirectEx"
  ],
  "iprop.dll": [
    "StgCreatePropSetStg",
    "PropVariantClear",
    "FmtIdToPropStgName",
    "PropVariantCopy",
    "PropStgNameToFmtId",
    "FreePropVariantArray",
    "StgCreatePropStg",
    "StgOpenPropStg"
  ],
  "iprtprio.dll": [
    "GetPriorityInfo",
    "ComputeRouteMetric",
    "SetPriorityInfo"
  ],
  "iprtrmgr.dll": [
    "MapInterfaceToAdapter",
    "StartRouter"
  ],
  "ipsecsnp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "ipsmsnap.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "ir32_32.dll": [
    "DllMain",
    "AboutDialogProc",
    "DriverDialogProc",
    "DriverProc"
  ],
  "ir41_qc.dll": [
    "AllocInstanceData",
    "FreeInstanceData",
    "CompressFramesInfo",
    "CompressEnd",
    "SetScalability",
    "Compress",
    "DllMain",
    "CompressBegin"
  ],
  "ir41_qcx.dll": [
    "AllocInstanceData",
    "FreeInstanceData",
    "CompressFramesInfo",
    "CompressEnd",
    "SetScalability",
    "Compress",
    "DllMain",
    "CompressBegin"
  ],
  "ir50_32.dll": [
    "AboutDialogProc",
    "ConfigureDialogProc",
    "DllUnregisterServer",
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DriverProc"
  ],
  "ir50_qc.dll": [
    "AllocInstanceData",
    "FreeInstanceData",
    "CompressFramesInfo",
    "CompressEnd",
    "SetScalability",
    "Compress",
    "DllMain",
    "SetCPUID",
    "CompressBegin",
    "CompressQuery"
  ],
  "ir50_qcx.dll": [
    "AllocInstanceData",
    "FreeInstanceData",
    "CompressFramesInfo",
    "CompressEnd",
    "SetScalability",
    "Compress",
    "DllMain",
    "SetCPUID",
    "CompressBegin",
    "CompressQuery"
  ],
  "irclass.dll": [
    "IrSIRPortPropPageProvider",
    "IrSIRClassCoInstaller"
  ],
  "irmon.dll": [
    "ServiceMain",
    "ServiceHandler"
  ],
  "iscsicpl.dll": [
    "CPlApplet"
  ],
  "iscsidsc.dll": [
    "ReportISNSServerListA",
    "ReportRadiusServerListA",
    "RemoveIScsiSendTargetPortalA",
    "ClearPersistentIScsiDevices",
    "ReportIScsiSendTargetPortalsW",
    "GetIScsiSessionListA",
    "SetIScsiInitiatorNodeNameA",
    "ReportIScsiInitiatorListA",
    "RemoveIScsiPersistentTargetA",
    "ReportIScsiTargetsW",
    "SetIScsiInitiatorCHAPSharedSecret",
    "AddIScsiSendTargetPortalW",
    "GetDevicesForIScsiSessionA",
    "SetupPersistentIScsiVolumes",
    "AddISNSServerW",
    "SetIScsiIKEInfoA",
    "RefreshISNSServerA",
    "AddRadiusServerW",
    "GetIScsiIKEInfoW",
    "SendScsiReportLuns",
    "ReportIScsiSendTargetPortalsExA",
    "GetIScsiSessionListW",
    "LoginIScsiTargetW",
    "AddIScsiSendTargetPortalA",
    "ReportPersistentIScsiDevicesA",
    "AddISNSServerA",
    "SetIScsiIKEInfoW",
    "SetIScsiInitiatorNodeNameW",
    "AddIScsiStaticTargetW",
    "ReportIScsiTargetsA",
    "ReportIScsiInitiatorListW",
    "SetupPersistentIScsiDevices",
    "SendScsiInquiry",
    "RemoveIScsiStaticTargetA",
    "GetIScsiTargetInformationA",
    "RemoveIScsiStaticTargetW",
    "RefreshISNSServerW",
    "ReportISNSServerListW",
    "AddIScsiConnectionW",
    "SetIScsiTunnelModeOuterAddressA",
    "AddPersistentIScsiDeviceW",
    "ReportRadiusServerListW",
    "ReportIScsiTargetPortalsW",
    "SetIScsiInitiatorRADIUSSharedSecret",
    "RemoveISNSServerA",
    "AddIScsiConnectionA",
    "RemovePersistentIScsiDeviceA",
    "RemoveIScsiPersistentTargetW",
    "AddRadiusServerA",
    "SetIScsiTunnelModeOuterAddressW",
    "GetIScsiInitiatorNodeNameA",
    "GetDevicesForIScsiSessionW",
    "AddIScsiStaticTargetA",
    "SendScsiReadCapacity",
    "GetIScsiSessionListEx",
    "SetIScsiGroupPresharedKey",
    "ReportActiveIScsiTargetMappingsA",
    "ReportIScsiSendTargetPortalsA",
    "ReportIScsiTargetPortalsA",
    "RemoveRadiusServerA",
    "RemovePersistentIScsiDeviceW",
    "LogoutIScsiTarget",
    "GetIScsiTargetInformationW",
    "ReportIScsiSendTargetPortalsExW",
    "RemoveRadiusServerW",
    "RemoveIScsiConnection",
    "RemoveIScsiSendTargetPortalW",
    "GetIScsiInitiatorNodeNameW",
    "AddPersistentIScsiDeviceA",
    "DllMain",
    "ReportIScsiPersistentLoginsW",
    "RefreshIScsiSendTargetPortalW",
    "ReportIScsiPersistentLoginsA",
    "ReportPersistentIScsiDevicesW",
    "GetIScsiVersionInformation",
    "RemoveISNSServerW",
    "GetIScsiIKEInfoA",
    "LoginIScsiTargetA",
    "ReportActiveIScsiTargetMappingsW",
    "RefreshIScsiSendTargetPortalA"
  ],
  "iscsied.dll": [
    "DllMain",
    "DiscpLoadGPSettings"
  ],
  "iscsiexe.dll": [
    "DiscpEstablishServiceLinkage",
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "iscsilog.dll": "No exports",
  "iscsium.dll": [
    "DiscpGenerateiScsiNameFromComputerName",
    "DiscpUnicodeToAnsiSize",
    "DiscpRemoveStringFromMultiSzList",
    "DiscpDisableEventlog",
    "DiscpTimebomb",
    "DiscpUnicodeToUTF8",
    "DiscpMapiSCSIString",
    "DiscpXtoI",
    "DiscpGuidToString",
    "DiscpEstablishIrpPump",
    "DiscpEstablishTCPSocket",
    "DiscpCopyString",
    "DiscpGetStringFromDataBlock",
    "DiscpIsDNSAddress",
    "DiscpIsStringInList",
    "DiscpParseAllData",
    "DiscpLoadSystemLibrary",
    "DiscpSetRegistryValue",
    "DiscpAllocMemory",
    "DiscpFreeMemory",
    "DiscpRegisterHeap",
    "DiscpAnsiToUnicode",
    "DiscpIdKeyToString",
    "DiscpOpenRegistryKey",
    "DiscpDecryptBuffer",
    "DiscpGetPnpDeviceId",
    "DiscpAlignDataStruct",
    "DiscpAnsiToUnicodeSize",
    "DiscpGetRegistryValue",
    "DiscpRegisterDeviceInterfaceNotification",
    "DiscpUnicodeToAnsi",
    "DiscpTextAddrToBinary",
    "DiscpQuerySingleInstance",
    "DllMain",
    "DiscpFreeProcessMemory",
    "DiscpEncryptBuffer",
    "DiscpSockAddrToText",
    "DiscpAllocProcessMemory",
    "DiscpEnableEventlog",
    "DiscpReportEventlog",
    "DiscpDisableLogToFile",
    "DiscpAddStringToMultiSzList",
    "DiscpReportEventlogWithStatus",
    "DiscpDuplicateString",
    "DiscpRegisterDebugMask",
    "DiscpSendIrpRequest",
    "DiscpRegisterForDeviceInterfaceNotfication",
    "Discpxtoi",
    "DiscpEnumerateDeviceInterfaces",
    "DiscpUTF8ToUnicode",
    "DiscpCopyUnicodeString",
    "DiscpPadDataBlock",
    "DiscpDisableWinsock",
    "DiscpEnumerateRegistryValues",
    "DiscpULongAddList",
    "DiscpAnsiCharsToString",
    "DiscpExecuteMethod",
    "DiscpFreeDeviceInterfaceList",
    "DiscpQueryAllData",
    "DiscpCopyToCountedString",
    "DiscpEnableWinsock",
    "DiscpDisestablishIrpPump",
    "DiscpEnableLogToFile",
    "DiscpParseKeyValue",
    "DiscpDebugPrintX",
    "DiscpValidateiSCSIString",
    "DiscpCopyStringToAnsi",
    "DiscpParseSingleInstance",
    "DiscpPnpDeviceInterfaceToInstanceName",
    "DiscpRegCloseKey"
  ],
  "iscsiwmi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "iscsiwmiv2.dll": [
    "DllUnregisterServer",
    "DllMain",
    "GetProviderClassID",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "MI_Main"
  ],
  "itircl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "itss.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "iuilp.dll": [
    "GetDefaultAppsList",
    "GetLayoutPolicyCheckerInstance",
    "CloseLayoutPolicyCheckerInstance",
    "GetLayoutPolicy",
    "GetDefaultLauncherLayout"
  ],
  "iyuv_32.dll": [
    "DllMain",
    "AboutDialogProc",
    "DriverDialogProc",
    "DriverProc"
  ],
  "jnwmon.dll": [
    "InitializePrintMonitor2"
  ],
  "jscript.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "jscript9.dll": [
    "DllGetClassObject",
    "JsVarAddRef",
    "JsVarToExtension",
    "DllCanUnloadNow",
    "JsVarRelease",
    "DllRegisterServer",
    "JsVarToScriptDirect",
    "DllUnregisterServer"
  ],
  "jsproxy.dll": [
    "InternetInitializeAutoProxyDll",
    "InternetDeInitializeAutoProxyDll",
    "InternetInitializeAutoProxyDllEx",
    "InternetDeInitializeAutoProxyDllEx",
    "InternetGetProxyInfoEx",
    "InternetGetProxyInfo"
  ],
  "KBDA1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDA2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDA3.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDAL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDARME.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDARMW.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDAZE.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDAZEL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBASH.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBE.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBENE.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBGPH.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBGPH1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBHC.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBLR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBU.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBULG.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDCA.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDCAN.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDCHER.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDCHERP.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDCR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDCZ.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDCZ1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDCZ2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDDA.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDDIV1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDDIV2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDDV.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDES.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDEST.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDFA.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDFC.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDFI.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDFI1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDFO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDFR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDGAE.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDGEO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDGKL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDGR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDGR1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDGRLND.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHAU.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHAW.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHE.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHE220.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHE319.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHEB.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHELA2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHELA3.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHEPT.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHU.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHU1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDIBO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDIC.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINASA.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINBE1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINBE2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINBEN.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINDEV.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINEN.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINGUJ.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINHIN.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINKAN.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINMAL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINMAR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINORI.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINPUN.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINTAM.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINTEL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINUK2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDIR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDIT.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDIT142.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDIULAT.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDJPN.DLL": [
    "KbdLayerMultiDescriptor",
    "KbdNlsLayerDescriptor",
    "KbdLayerDescriptor",
    "KbdLayerRealDllFileNT4",
    "KbdLayerRealDllFile"
  ],
  "KBDKAZ.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDKHMR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDKNI.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDKOR.DLL": [
    "KbdLayerMultiDescriptor",
    "KbdNlsLayerDescriptor",
    "KbdLayerDescriptor",
    "KbdLayerRealDllFileNT4",
    "KbdLayerRealDllFile"
  ],
  "KBDKURD.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDKYR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDLA.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDLAO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDLT.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDLT1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDLT2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDLV.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDLV1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDMAC.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDMACST.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDMAORI.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDMLT47.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDMLT48.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDMON.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDMONMO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDMYAN.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDNE.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDNEPR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDNO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDNO1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDNSO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDNTL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDOGHAM.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDPASH.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDPL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDPL1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDPO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDRO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDROPR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDROST.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDRU.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDRU1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDRUM.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSF.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSG.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSL1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSMSFI.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSMSNO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSN1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSOREX.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSORS1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSORST.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSP.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSW.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSW09.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSYR1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSYR2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTAILE.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTAJIK.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTAT.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTH0.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTH1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTH2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTH3.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTIFI.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTIFI2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTIPRC.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTUF.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTUQ.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTURME.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUGHR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUGHR1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUK.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUKX.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUR1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDURDU.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUS.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUSA.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUSL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUSR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUSX.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUZB.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDVNTC.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDWOL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDYAK.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDYBA.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDYCC.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDYCL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KMSVC.DLL": [
    "ServiceMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "KdsCli.dll": [
    "SIDKeyProvAlloc",
    "GetDefaultServerConfig",
    "GetIntervalStartTime",
    "DeleteAllCachedKeys",
    "SIDKeyProvFree",
    "FindAndReadSIDKeyInCache",
    "FreeServerConfig",
    "FreeRootKeyMetaDataList",
    "GetSIDKeyFileName",
    "KdsGetGmsaPasswordBasedOnTimestamp",
    "GetAndLockCachedRPCBinding",
    "GetKDSSrvConfigPath",
    "GetCurrentTimeInULL",
    "GenerateSIDPublicKeyBlob",
    "GenerateSecretAgreementPrivateKey",
    "GetMRKPath",
    "GetSIDKeyCacheFolder",
    "SIDKeyProtect",
    "FreeRootKey",
    "GetDCInfo",
    "GetKdsKeyCycleDuration",
    "GetCurrentL0ID",
    "TestServerConfig",
    "GetUserSidStr",
    "GetKey",
    "GenerateKDFContext",
    "SetServerConfig",
    "GetCurrentIntervalID",
    "GenerateEphemeralKeyPair",
    "FindKeyForOfflineUsage",
    "GetServerConfig",
    "KdsGetGmsaPasswordBasedOnKeyId",
    "KdsGetEpochLength",
    "GetLdapBinding",
    "GetAllRootKeys",
    "SIDKeyUnprotect",
    "GenerateDerivedKey",
    "WriteSIDKeyInCache",
    "GetAllRootKeysMetaData",
    "CreateRootKey",
    "KdsCreateClientBinding",
    "UnlockRpcCache",
    "KdsGetKeyStartTime",
    "ValidateSrvConfig",
    "GetCachedMachineDomainInfo",
    "FreeRootKeyConfig",
    "GetFullDCName",
    "GetRootKey"
  ],
  "KernelBase.dll": [
    "CloseThreadpoolCleanupGroup",
    "SetConsoleScreenBufferSize",
    "SHExpandEnvironmentStringsA",
    "CloseThreadpoolCleanupGroupMembers",
    "FindFirstFileExA",
    "StrCpyNW",
    "RegLoadAppKeyA",
    "GetNLSVersion",
    "GetSecurityDescriptorControl",
    "Internal_EnumSystemLanguageGroups",
    "CreateHardLinkW",
    "RegLoadMUIStringW",
    "LockFileEx",
    "ChrCmpIW",
    "AddAccessDeniedAce",
    "VirtualQuery",
    "GetFileSecurityW",
    "RegisterGPNotificationInternal",
    "GetSecurityDescriptorRMControl",
    "exit",
    "GlobalMemoryStatusEx",
    "GetProcAddressForCaller",
    "IdnToNameprepUnicode",
    "FlushViewOfFile",
    "CreateProcessA",
    "GetDiskFreeSpaceA",
    "InitializeSListHead",
    "_OpenMuiStringCache",
    "SHGetFolderLocation",
    "HeapValidate",
    "CharUpperW",
    "GetUserPreferredUILanguages",
    "SetFilePointerEx",
    "GetAclInformation",
    "PathRemoveExtensionW",
    "GetFileVersionInfoExA",
    "AccessCheck",
    "EnumUILanguagesW",
    "SetKernelObjectSecurity",
    "GetUILanguageInfo",
    "CreateThreadpool",
    "AddAccessAllowedAce",
    "DeleteTimerQueueTimer",
    "KernelBaseGetGlobalData",
    "lstrcpynA",
    "GetProcessPreferredUILanguages",
    "lstrlen",
    "PathIsUNCA",
    "OpenThread",
    "RegKrnGetAppKeyEventAddressInternal",
    "ReadConsoleW",
    "IsProcessorFeaturePresent",
    "CloseTrace",
    "EventWriteEx",
    "VerLanguageNameW",
    "SHRegEnumUSValueW",
    "CreateThreadpoolCleanupGroup",
    "K32GetDeviceDriverBaseNameA",
    "PathIsUNCW",
    "RegCreateKeyExA",
    "SetUnhandledExceptionFilter",
    "GetOverlappedResultEx",
    "K32GetProcessMemoryInfo",
    "GetAcceptLanguagesA",
    "ReadConsoleOutputAttribute",
    "GetLogicalProcessorInformationEx",
    "TryAcquireSRWLockShared",
    "GetModuleFileNameW",
    "SetStdHandleEx",
    "EnumLanguageGroupLocalesW",
    "RegSaveKeyExW",
    "CreateWaitableTimerExW",
    "RegDeleteTreeW",
    "RegGetValueW",
    "PathFindExtensionW",
    "GetConsoleOutputCP",
    "MapViewOfFileFromApp",
    "PoolPerAppKeyStateInternal",
    "WriteConsoleOutputCharacterA",
    "EventAccessControl",
    "SetTimeZoneInformation",
    "SetEnvironmentVariableA",
    "CharUpperBuffA",
    "SetProcessAffinityUpdateMode",
    "WriteFile",
    "RegQueryValueExW",
    "PathCchStripPrefix",
    "GetDynamicTimeZoneInformationEffectiveYears",
    "SetDynamicTimeZoneInformation",
    "CreatePrivateNamespaceW",
    "WaitForThreadpoolIoCallbacks",
    "PrivCopyFileExW",
    "LockFile",
    "IsCharUpperW",
    "PathAppendW",
    "FatalAppExitA",
    "GetTimeZoneInformation",
    "GetEnvironmentStringsA",
    "TrySubmitThreadpoolCallback",
    "UnmapViewOfFileEx",
    "EnumResourceTypesExW",
    "CharUpperA",
    "_time64",
    "K32QueryWorkingSetEx",
    "GetFallbackDisplayName",
    "SetUserGeoID",
    "FlushInstructionCache",
    "EmptyWorkingSet",
    "GetCommMask",
    "OpenProcessToken",
    "HeapAlloc",
    "SHRegQueryInfoUSKeyW",
    "IdnToAscii",
    "BemCreateReference",
    "GetSystemPreferredUILanguages",
    "FlsGetValue",
    "EnumSystemLocalesA",
    "PathIsValidCharA",
    "AddAce",
    "CreateRemoteThread",
    "AllocateAndInitializeSid",
    "WaitForSingleObject",
    "UrlCanonicalizeW",
    "StrPBrkA",
    "FormatMessageA",
    "InterlockedPopEntrySList",
    "QueryFullProcessImageNameW",
    "CtrlRoutine",
    "GetCPInfoExW",
    "CreateProcessInternalW",
    "GetFileInformationByHandleEx",
    "VirtualFree",
    "GetStringTypeA",
    "AttachConsole",
    "UrlGetPartA",
    "GetLastError",
    "BaseFlushAppcompatCache",
    "SetEventWhenCallbackReturns",
    "GetFinalPathNameByHandleA",
    "RegOpenKeyExW",
    "StrCatBuffW",
    "RegEnumValueW",
    "GetModuleHandleExW",
    "IsCharAlphaNumericA",
    "SetCriticalSectionSpinCount",
    "SetSecurityDescriptorSacl",
    "GetNamedLocaleHashNode",
    "ReleaseActCtx",
    "PathGetArgsA",
    "RegKrnSetDllHasThreadStateGlobal",
    "IsValidNLSVersion",
    "GetHandleInformation",
    "EnumerateTraceGuidsEx",
    "CreateEventExW",
    "OutputDebugStringW",
    "SHRegOpenUSKeyA",
    "GetCurrentActCtx",
    "K32GetWsChanges",
    "DsBindWithSpnExW",
    "GetNLSVersionEx",
    "GetThreadTimes",
    "NlsWriteEtwEvent",
    "PathCanonicalizeW",
    "CreateProcessAsUserW",
    "GetSystemFirmwareTable",
    "GetSystemTime",
    "FindNextFileA",
    "UrlHashA",
    "CLOSE_LOCAL_HANDLE_INTERNAL",
    "GetCommConfig",
    "GetQueuedCompletionStatusEx",
    "RegisterTraceGuidsW",
    "InterlockedCompareExchange64",
    "CreateDirectoryW",
    "SetConsoleCursorPosition",
    "GetPerformanceInfo",
    "AddAccessAllowedObjectAce",
    "UrlIsNoHistoryW",
    "ParseURLW",
    "RegDeleteKeyExW",
    "SHGetKnownFolderPath",
    "SetConsoleInputExeNameA",
    "AddMandatoryAce",
    "GetStdHandle",
    "_purecall",
    "InterlockedPushListSList",
    "ReleaseMutex",
    "GetThreadContext",
    "VirtualAllocExNuma",
    "SetCommTimeouts",
    "K32GetWsChangesEx",
    "RegLoadKeyW",
    "DisableThreadLibraryCalls",
    "PathRenameExtensionW",
    "StrCatChainW",
    "StrChrA_MB",
    "PathFileExistsW",
    "StrStrIW",
    "IsCharSpaceA",
    "FlsAlloc",
    "SetSystemTime",
    "UnlockFileEx",
    "GetNumberFormatEx",
    "GetAppContainerAce",
    "FreeSid",
    "CharPrevW",
    "PathCchAddExtension",
    "FillConsoleOutputCharacterW",
    "StrChrIW",
    "PathCchCombineEx",
    "CheckRemoteDebuggerPresent",
    "SetConsoleTextAttribute",
    "InterlockedFlushSList",
    "StrCmpNA",
    "Wow64DisableWow64FsRedirection",
    "Internal_EnumLanguageGroupLocales",
    "WriteConsoleA",
    "WerRegisterRuntimeExceptionModule",
    "GetFileMUIPath",
    "SetFileSecurityW",
    "SetCommConfig",
    "GetThreadPriority",
    "IsProcessInJob",
    "ReadFileEx",
    "SHRegQueryUSValueA",
    "SetFilePointer",
    "IsNLSDefinedString",
    "SuspendThread",
    "PathSkipRootW",
    "GetSystemWindowsDirectoryW",
    "SetThreadPreferredUILanguages",
    "Internal_EnumCalendarInfo",
    "PathAddExtensionA",
    "IsCharLowerA",
    "CreateDirectoryA",
    "CloseThreadpoolWait",
    "SetProcessGroupAffinity",
    "LoadStringBaseExW",
    "EventEnabled",
    "GetCommModemStatus",
    "AddAuditAccessAceEx",
    "UrlCanonicalizeA",
    "GetApplicationRecoveryCallback",
    "GetTokenInformation",
    "PathQuoteSpacesW",
    "IsCharDigitW",
    "FindActCtxSectionStringW",
    "FlushProcessWriteBuffers",
    "Sleep",
    "EncodePointer",
    "IsCharXDigitW",
    "BemFreeContract",
    "FindNextFileW",
    "CopyFileExW",
    "GetDeviceDriverBaseNameA",
    "AdjustTokenGroups",
    "OutputDebugStringA",
    "PathUnExpandEnvStringsA",
    "ObjectOpenAuditAlarmW",
    "BaseUpdateAppcompatCache",
    "InitOnceExecuteOnce",
    "PathFindFileNameW",
    "AccessCheckByType",
    "IsCharBlankW",
    "StrCmpNICA",
    "EnumPageFilesA",
    "RegQueryInfoKeyW",
    "GetModuleFileNameExA",
    "OpenPrivateNamespaceW",
    "StrDupW",
    "GetSystemDefaultLCID",
    "EnumSystemLocalesW",
    "GetWriteWatch",
    "StrStrA",
    "CloseThreadpool",
    "IsCharAlphaW",
    "GetVolumeInformationByHandleW",
    "GetCommandLineW",
    "GetTimeZoneInformationForYear",
    "AddAccessAllowedAceEx",
    "GetCalendarInfoW",
    "ImpersonateLoggedOnUser",
    "PathIsRootW",
    "GetQueuedCompletionStatus",
    "PathCchAppendEx",
    "CreateFileA",
    "ReleaseSemaphore",
    "PathGetCharTypeA",
    "GetCurrentDirectoryA",
    "lstrlenW",
    "UrlCompareA",
    "WriteFileEx",
    "InitializeSRWLock",
    "CreateThread",
    "SetCommMask",
    "EnumSystemLocalesEx",
    "PathRemoveExtensionA",
    "SetSystemFileCacheSize",
    "EqualPrefixSid",
    "EnumDateFormatsExW",
    "hwprintf",
    "GetConsoleScreenBufferInfoEx",
    "GetPrivateObjectSecurity",
    "ControlTraceA",
    "QueryThreadCycleTime",
    "lstrcpyn",
    "Internal_EnumSystemCodePages",
    "hgets",
    "NlsUpdateLocale",
    "PathIsURLW",
    "SetThreadGroupAffinity",
    "LCMapStringEx",
    "TryEnterCriticalSection",
    "GetLogicalProcessorInformation",
    "CompareFileTime",
    "OpenTraceW",
    "DelayLoadFailureHook",
    "VerFindFileW",
    "GetAppliedGPOListInternalW",
    "ReadFile",
    "GetConsoleScreenBufferInfo",
    "SwitchToThread",
    "LockResource",
    "DeleteTimerQueueEx",
    "StrToIntW",
    "SetProcessWorkingSetSizeEx",
    "GetNumberOfConsoleInputEvents",
    "GetLogicalDriveStringsW",
    "SetThreadIdealProcessorEx",
    "CopySid",
    "GetConsoleCP",
    "GetEnvironmentVariableW",
    "PrefetchVirtualMemory",
    "FormatMessageW",
    "EnterSynchronizationBarrier",
    "AccessCheckByTypeAndAuditAlarmW",
    "RegLoadMUIStringA",
    "EnumResourceNamesExW",
    "RegOpenKeyExInternalA",
    "UrlUnescapeA",
    "HeapFree",
    "SetFileAttributesA",
    "AddDllDirectory",
    "QueryAllTracesW",
    "ResolveDelayLoadsFromDll",
    "PathRemoveFileSpecA",
    "CompareStringOrdinal",
    "InitializeCriticalSection",
    "PathCchRemoveBackslashEx",
    "StrRChrA",
    "SHTruncateString",
    "SetEvent",
    "SetFileInformationByHandle",
    "PathParseIconLocationA",
    "StrRChrIW",
    "GetUserGeoID",
    "RsopLoggingEnabledInternal",
    "RegUnLoadKeyW",
    "SetThreadpoolTimer",
    "MapViewOfFile",
    "TerminateProcess",
    "WaitNamedPipeW",
    "WerRegisterMemoryBlock",
    "GetFileVersionInfoByHandle",
    "MakeAbsoluteSD",
    "SystemTimeToFileTime",
    "QueryPerformanceCounter",
    "SetConsoleCtrlHandler",
    "SHRegCreateUSKeyW",
    "PathIsFileSpecA",
    "SHRegWriteUSValueW",
    "IdnToUnicode",
    "FlushConsoleInputBuffer",
    "IsDBCSLeadByteEx",
    "WerRegisterFile",
    "ImpersonateSelf",
    "BemFreeReference",
    "DebugActiveProcess",
    "UrlApplySchemeA",
    "LeaveCriticalSection",
    "lstrcmpW",
    "ConvertDefaultLocale",
    "SetLocalTime",
    "GetSidIdentifierAuthority",
    "K32InitializeProcessForWsWatch",
    "GetSystemTimeAsFileTime",
    "RevertToSelf",
    "QueryAllTracesA",
    "K32GetModuleFileNameExA",
    "_initterm_e",
    "HeapSummary",
    "NlsValidateLocale",
    "QueryWorkingSetEx",
    "SHRegGetUSValueW",
    "LoadStringA",
    "SetEndOfFile",
    "GetModuleFileNameA",
    "atexit",
    "RegKrnSetTermsrvRegistryExtensionFlags",
    "CreateFileMappingW",
    "NlsCheckPolicy",
    "PathIsPrefixW",
    "PathCanonicalizeA",
    "RaiseException",
    "CloseThreadpoolTimer",
    "InternetTimeToSystemTimeA",
    "HeapLock",
    "GetMappedFileNameA",
    "GetDeviceDriverBaseNameW",
    "SetConsoleOutputCP",
    "PathCchRemoveBackslash",
    "FreeLibraryAndExitThread",
    "MakeAbsoluteSD2",
    "GetProcessMemoryInfo",
    "StrCSpnA",
    "ChrCmpIA",
    "GetEightBitStringToUnicodeStringRoutine",
    "FreeResource",
    "IsCharUpperA",
    "SetThreadpoolWait",
    "VirtualProtect",
    "CancelThreadpoolIo",
    "SetThreadStackGuarantee",
    "RemoveTraceCallback",
    "CreateEventW",
    "SetThreadpoolWaitEx",
    "CharLowerA",
    "PathGetCharTypeW",
    "RegNotifyChangeKeyValue",
    "RegRestoreKeyW",
    "wprintf",
    "ExitThread",
    "PathRelativePathToA",
    "SizeofResource",
    "NlsEventDataDescCreate",
    "RegDeleteValueW",
    "K32GetDeviceDriverFileNameA",
    "PathRemoveBlanksW",
    "VirtualAlloc",
    "CreatePrivateObjectSecurityEx",
    "RegCreateKeyExInternalA",
    "RegOpenKeyExA",
    "GetTraceEnableLevel",
    "PathStripPathW",
    "GetWindowsDirectoryA",
    "StrCatBuffA",
    "GetUnicodeStringToEightBitSizeRoutine",
    "StrDupA",
    "GetRegistryExtensionFlags",
    "TlsFree",
    "EventRegister",
    "InitializeSecurityDescriptor",
    "StrCmpLogicalW",
    "DeleteProcThreadAttributeList",
    "GetTimeFormatA",
    "ScrollConsoleScreenBufferA",
    "CreateNamedPipeW",
    "GetEightBitStringToUnicodeSizeRoutine",
    "GetEnvironmentStrings",
    "WerpNotifyLoadStringResource",
    "StrSpnW",
    "AllocConsole",
    "DsFreeDomainControllerInfoW",
    "QueryIdleProcessorCycleTimeEx",
    "MakeSelfRelativeSD",
    "FlsSetValue",
    "PathIsRelativeA",
    "QueryPerformanceFrequency",
    "FindCloseChangeNotification",
    "ConvertToAutoInheritPrivateObjectSecurity",
    "IsWow64Process",
    "OpenProcess",
    "WriteConsoleOutputAttribute",
    "PathCombineA",
    "SetConsoleScreenBufferInfoEx",
    "RemoveVectoredContinueHandler",
    "CloseThreadpoolIo",
    "GetUserInfo",
    "DsUnBindW",
    "ResolveDelayLoadedAPI",
    "TlsSetValue",
    "AcquireSRWLockExclusive",
    "GetKernelObjectSecurity",
    "GetVolumeNameForVolumeMountPointW",
    "GetSidLengthRequired",
    "WriteConsoleInputA",
    "GetModuleHandleExA",
    "QuerySecurityAccessMask",
    "StrChrIA",
    "SetSecurityDescriptorControl",
    "WaitForSingleObjectEx",
    "GetPtrCalData",
    "SetFileApisToOEM",
    "GetModuleInformation",
    "QueryActCtxSettingsW",
    "AreAnyAccessesGranted",
    "StrStrNIW",
    "TraceQueryInformation",
    "UrlGetLocationW",
    "PathMatchSpecExW",
    "LocalFree",
    "CreateEventExA",
    "NlsDispatchAnsiEnumProc",
    "ProcessIdToSessionId",
    "SHGetInstanceExplorer",
    "SHGetFolderPathA",
    "IsWellKnownSid",
    "FreeGPOListInternalW",
    "RegEnumValueA",
    "AreAllAccessesGranted",
    "VerLanguageNameA",
    "SearchPathA",
    "K32GetModuleBaseNameW",
    "CallbackMayRunLong",
    "ParseURLA",
    "CreateBoundaryDescriptorW",
    "RegDeleteValueA",
    "GetFileVersionInfoSizeExW",
    "StrChrNW",
    "GetUserDefaultLCID",
    "BemCopyReference",
    "GetUserDefaultUILanguage",
    "VirtualAllocEx",
    "GetMappedFileNameW",
    "StrCmpNCW",
    "UrlIsW",
    "RegKrnGetClassesEnumTableAddressInternal",
    "FreeLibrary",
    "SetWaitableTimer",
    "StrChrW",
    "VerFindFileA",
    "CreateActCtxW",
    "CreateEventA",
    "GetWsChanges",
    "GetEnvironmentVariableA",
    "GetPtrCalDataArray",
    "SetProcessPreferredUILanguages",
    "ForceSyncFgPolicyInternal",
    "GetCommState",
    "CloseHandle",
    "GetProcessTimes",
    "ReleaseSemaphoreWhenCallbackReturns",
    "K32EnumProcessModulesEx",
    "CompareStringW",
    "FindNLSStringEx",
    "ControlTraceW",
    "BasepCopyFileExW",
    "FindFirstFileExW",
    "RemoveDllDirectory",
    "GetNumaHighestNodeNumber",
    "CharLowerW",
    "GetNextFgPolicyRefreshInfoInternal",
    "SetWaitableTimerEx",
    "GetSystemTimePreciseAsFileTime",
    "IsSyncForegroundPolicyRefresh",
    "GetProcessVersion",
    "HasPolicyForegroundProcessingCompletedInternal",
    "SetCurrentDirectoryW",
    "SetConsoleActiveScreenBuffer",
    "EnumDeviceDrivers",
    "RegDisablePredefinedCacheEx",
    "GetSidSubAuthority",
    "GetLocaleInfoHelper",
    "FindFirstFileA",
    "FindNextChangeNotification",
    "GetTempPathW",
    "SetCalendarInfoW",
    "CancelIo",
    "StrSpnA",
    "MultiByteToWideChar",
    "PathCreateFromUrlW",
    "SetThreadPriority",
    "SpecialMBToWC",
    "WriteProcessMemory",
    "K32GetModuleFileNameExW",
    "EnumCalendarInfoExEx",
    "SHRegDeleteUSValueA",
    "EventWriteString",
    "ObjectDeleteAuditAlarmW",
    "PathIsLFNFileSpecA",
    "AccessCheckByTypeResultList",
    "ExpandEnvironmentStringsW",
    "PathIsSameRootW",
    "EqualDomainSid",
    "FatalAppExitW",
    "StrChrA",
    "PathCchSkipRoot",
    "SleepConditionVariableCS",
    "IsCharSpaceW",
    "StrStrW",
    "DuplicateHandle",
    "AddAuditAccessObjectAce",
    "CompareStringEx",
    "StrToIntExW",
    "GetCurrentThreadStackLimits",
    "GetExitCodeProcess",
    "GetUserDefaultLocaleName",
    "WaitForThreadpoolWaitCallbacks",
    "UrlEscapeW",
    "GetLargestConsoleWindowSize",
    "InterlockedIncrement",
    "PathCreateFromUrlA",
    "SetConsoleTitleW",
    "RefreshPolicyExInternal",
    "QueryThreadpoolStackInformation",
    "BasepAdjustObjectAttributesForPrivateNamespace",
    "StrToInt64ExW",
    "EnumCalendarInfoW",
    "UnregisterGPNotificationInternal",
    "UrlApplySchemeW",
    "SetClientDynamicTimeZoneInformation",
    "CreateSemaphoreExW",
    "PathMatchSpecW",
    "ReplaceFileW",
    "ReadConsoleOutputW",
    "IsValidSecurityDescriptor",
    "SHGetFileInfoW",
    "AddRefActCtx",
    "GetCalendarInfoEx",
    "SetFileApisToANSI",
    "ReadConsoleOutputCharacterA",
    "UnmapViewOfFile",
    "GetLengthSid",
    "InternetTimeToSystemTimeW",
    "GetTraceEnableFlags",
    "CreateMutexExA",
    "PathIsUNCEx",
    "GetProductInfo",
    "InitializeProcThreadAttributeList",
    "TryAcquireSRWLockExclusive",
    "CreateThreadpoolIo",
    "EnumDateFormatsExEx",
    "GetThreadPriorityBoost",
    "UrlIsA",
    "K32GetDeviceDriverBaseNameW",
    "FindStringOrdinal",
    "GetGPOListInternalW",
    "QueryFullProcessImageNameA",
    "PathUnquoteSpacesA",
    "LocalAlloc",
    "GetStringTypeExW",
    "QueryDepthSList",
    "RegUnLoadKeyA",
    "InitializeAcl",
    "EventUnregister",
    "PathCchIsRoot",
    "PathGetArgsW",
    "StrCmpNIA",
    "CharLowerBuffW",
    "UrlUnescapeW",
    "CreateProcessW",
    "VerSetConditionMask",
    "SHGetSpecialFolderPathA",
    "GetProcessHandleCount",
    "GetConsoleCursorInfo",
    "VerifyScripts",
    "PathIsUNCServerShareA",
    "GetFullPathNameA",
    "FindActCtxSectionGuid",
    "ClosePrivateNamespace",
    "GetVersionExA",
    "EventSetInformation",
    "GetFullPathNameW",
    "QueryProcessAffinityUpdateMode",
    "WakeByAddressSingle",
    "ExpandEnvironmentStringsA",
    "OpenWaitableTimerW",
    "CloseThreadpoolWork",
    "OpenFileMappingW",
    "_initterm",
    "HeapCompact",
    "QueueUserWorkItem",
    "SHSetKnownFolderPath",
    "OpenThreadToken",
    "SetCurrentDirectoryA",
    "__dllonexit3",
    "SetEnvironmentStringsW",
    "DeleteFileW",
    "TraceMessage",
    "RegFlushKey",
    "EnumResourceLanguagesExA",
    "CreateFileW",
    "StrCmpIW",
    "SetCommBreak",
    "StrChrNIW",
    "NeedCurrentDirectoryForExePathW",
    "DeleteVolumeMountPointW",
    "GetThreadGroupAffinity",
    "GetTempFileNameW",
    "AddVectoredContinueHandler",
    "UrlIsOpaqueA",
    "_c_exit",
    "CreateConsoleScreenBuffer",
    "SetCachedSigningLevel",
    "SHCoCreateInstance",
    "DsGetDomainControllerInfoW",
    "GetDynamicTimeZoneInformation",
    "K32GetModuleInformation",
    "RemoveDirectoryA",
    "HeapDestroy",
    "IsValidCodePage",
    "UrlGetLocationA",
    "WakeByAddressAll",
    "RegLoadKeyA",
    "AddAccessDeniedAceEx",
    "LoadStringW",
    "EnumCalendarInfoExW",
    "VirtualFreeEx",
    "IsValidRelativeSecurityDescriptor",
    "SHRegDeleteEmptyUSKeyA",
    "PathAllocCombine",
    "PathFindExtensionA",
    "PathCreateFromUrlAlloc",
    "StrCpyNXW",
    "FindFirstFileW",
    "GetCurrentProcessId",
    "K32EnumProcessModules",
    "GetStringScripts",
    "GetSystemDirectoryW",
    "StrStrNW",
    "ClearCommError",
    "UnlockFile",
    "InterlockedPushListSListEx",
    "GetConsoleInputExeNameW",
    "InterlockedExchange",
    "CharNextW",
    "AccessCheckByTypeResultListAndAuditAlarmByHandleW",
    "IsNormalizedString",
    "SHRegQueryInfoUSKeyA",
    "GetUnicodeStringToEightBitStringRoutine",
    "GetCalendar",
    "RegKrnGetHKEY_ClassesRootAddress",
    "PulseEvent",
    "InterlockedDecrement",
    "HeapQueryInformation",
    "TraceSetInformation",
    "StrCmpCW",
    "ReOpenFile",
    "DestroyPrivateObjectSecurity",
    "RegisterTraceGuidsA",
    "SetThreadContext",
    "StrIsIntlEqualA",
    "DisconnectNamedPipe",
    "OpenEventW",
    "WaitOnAddress",
    "GetCurrentProcess",
    "AreFileApisANSI",
    "WriteConsoleOutputW",
    "StrCSpnIA",
    "UnhandledExceptionFilter",
    "StrRChrIA",
    "GetDateFormatW",
    "GetProcessMitigationPolicy",
    "DeleteBoundaryDescriptor",
    "ReadConsoleInputA",
    "LoadResource",
    "GetProcessIdOfThread",
    "IsTokenRestricted",
    "PathStripToRootW",
    "RegCreateKeyExW",
    "EnumPageFilesW",
    "GetCurrentThreadId",
    "StrRStrIA",
    "GetFileAttributesExW",
    "CharLowerBuffA",
    "PathRemoveBackslashW",
    "WriteFileGather",
    "UrlHashW",
    "SetComputerNameExW",
    "VirtualUnlock",
    "K32GetModuleBaseNameA",
    "SetFileTime",
    "GetFileVersionInfoSizeExA",
    "MapViewOfFileExNuma",
    "RegSetValueExW",
    "K32QueryWorkingSet",
    "EventAccessRemove",
    "PathCommonPrefixA",
    "LCIDToLocaleName",
    "BaseDllFreeResourceId",
    "_cexit",
    "InitializeSynchronizationBarrier",
    "GetNamedPipeClientComputerNameW",
    "EnumProcesses",
    "RegEnumKeyExA",
    "StrToInt64ExA",
    "RegSetKeySecurity",
    "GetAppContainerNamedObjectPath",
    "GetPriorityClass",
    "GetAdjustObjectAttributesForPrivateNamespaceRoutine",
    "DisassociateCurrentThreadFromCallback",
    "AccessCheckByTypeResultListAndAuditAlarmW",
    "CreateMutexA",
    "GetSecurityDescriptorDacl",
    "ScrollConsoleScreenBufferW",
    "HeapSize",
    "EventWriteTransfer",
    "SetAclInformation",
    "SetErrorMode",
    "GetOverlappedResult",
    "PathCchCanonicalizeEx",
    "LoadLibraryExW",
    "StrTrimA",
    "_invalid_parameter",
    "EventActivityIdControl",
    "CancelSynchronousIo",
    "RegDeleteKeyExInternalA",
    "SHRegCloseUSKey",
    "SystemTimeToTzSpecificLocalTime",
    "PathUnExpandEnvStringsW",
    "SHRegEnumUSKeyA",
    "RemoveVectoredExceptionHandler",
    "GetThreadIdealProcessorEx",
    "UrlIsOpaqueW",
    "PathCchStripToRoot",
    "SetConsoleMode",
    "ImpersonateNamedPipeClient",
    "InterlockedExchangeAdd",
    "PathMatchSpecExA",
    "PathSkipRootA",
    "FreeLibraryWhenCallbackReturns",
    "WaitForMultipleObjectsEx",
    "UrlFixupW",
    "CancelWaitableTimer",
    "CreateWellKnownSid",
    "LocalLock",
    "GetTimeFormatEx",
    "BaseCleanupAppcompatCacheSupport",
    "SHRegOpenUSKeyW",
    "EscapeCommFunction",
    "IsCharAlphaA",
    "SetEnvironmentVariableW",
    "WaitForThreadpoolTimerCallbacks",
    "BasepCopyFileCallback",
    "GetProcessId",
    "PathAllocCanonicalize",
    "SetConsoleWindowInfo",
    "SetTokenInformation",
    "GetConsoleTitleW",
    "InitOnceComplete",
    "GetCommandLineA",
    "StrToIntExA",
    "SHExpandEnvironmentStringsW",
    "HeapReAlloc",
    "SubmitThreadpoolWork",
    "GetWsChangesEx",
    "StrCmpNCA",
    "InitializeCriticalSectionEx",
    "SHRegCreateUSKeyA",
    "_amsg_exit",
    "CreateProcessInternalA",
    "Internal_EnumSystemLocales",
    "FindNextVolumeW",
    "StrCmpNW",
    "CharPrevA",
    "EventWrite",
    "DsFreePasswordCredentials",
    "lstrcmpiA",
    "SHRegSetUSValueA",
    "FileTimeToSystemTime",
    "WideCharToMultiByte",
    "WaitForDebugEvent",
    "PeekConsoleInputW",
    "GetWindowsAccountDomainSid",
    "GetSecurityDescriptorSacl",
    "RegLoadAppKeyW",
    "BaseDllMapResourceIdW",
    "GetUserDefaultLangID",
    "RegRestoreKeyA",
    "FileTimeToLocalFileTime",
    "UrlCombineW",
    "UrlCombineA",
    "RegQueryInfoKeyA",
    "CheckTokenCapability",
    "WaitForMachinePolicyForegroundProcessingInternal",
    "CreateRestrictedToken",
    "PathAddExtensionW",
    "MoveFileExW",
    "GetComputerNameExA",
    "GetFileSizeEx",
    "SetLastError",
    "DeleteSynchronizationBarrier",
    "PathIsExe",
    "GetErrorMode",
    "StopTraceW",
    "FindFirstVolumeW",
    "SHRegGetBoolUSValueW",
    "IsValidLocale",
    "GetFileInformationByHandle",
    "IsCharLowerW",
    "CharUpperBuffW",
    "GenerateConsoleCtrlEvent",
    "GetWindowsDirectoryW",
    "GetNumaNodeProcessorMaskEx",
    "QueryActCtxW",
    "RegKrnGetAppKeyLoaded",
    "PathGetDriveNumberW",
    "PathStripToRootA",
    "GetCPInfo",
    "SetProcessShutdownParameters",
    "EnumResourceLanguagesExW",
    "PathCommonPrefixW",
    "WaitCommEvent",
    "GetOEMCP",
    "GetACP",
    "DuplicateTokenEx",
    "PathIsPrefixA",
    "GetVolumePathNamesForVolumeNameW",
    "PathSearchAndQualifyW",
    "LeaveCriticalPolicySectionInternal",
    "IsTimeZoneRedirectionEnabled",
    "StrIsIntlEqualW",
    "PathAddBackslashA",
    "PostQueuedCompletionStatus",
    "PathIsLFNFileSpecW",
    "OpenRegKey",
    "GetThreadId",
    "IsValidSid",
    "LocalReAlloc",
    "DsCrackNamesW",
    "CharPrevExA",
    "ResolveLocaleName",
    "GetLocalTime",
    "GetVolumeInformationW",
    "ObjectCloseAuditAlarmW",
    "WerUnregisterMemoryBlock",
    "SetPrivateObjectSecurityEx",
    "GetDiskFreeSpaceExW",
    "TerminateThread",
    "WriteConsoleInputW",
    "SearchPathW",
    "BaseFormatObjectAttributes",
    "PathRenameExtensionA",
    "GetCurrentProcessorNumber",
    "WriteConsoleW",
    "SetConsoleInputExeNameW",
    "DebugActiveProcessStop",
    "DuplicateToken",
    "DeleteFileA",
    "CreateDirectoryExW",
    "StrCmpNICW",
    "GetLargePageMinimum",
    "K32GetMappedFileNameA",
    "VirtualProtectEx",
    "ReadConsoleInputW",
    "StrCmpICA",
    "GetSecurityDescriptorLength",
    "EnumResourceTypesExA",
    "RegDeleteKeyExA",
    "lstrcmpi",
    "GetDriveTypeW",
    "GetAce",
    "TzSpecificLocalTimeToSystemTime",
    "EnumDynamicTimeZoneInformation",
    "SetProcessMitigationPolicy",
    "FindResourceExW",
    "SetSecurityDescriptorRMControl",
    "ChangeTimerQueueTimer",
    "VerQueryValueW",
    "CheckGroupPolicyEnabled",
    "K32EnumDeviceDrivers",
    "LoadAppInitDlls",
    "SetSecurityDescriptorOwner",
    "SetNamedPipeHandleState",
    "GetTickCount",
    "SetConsoleCP",
    "CreatePipe",
    "SetClientTimeZoneInformation",
    "DeleteCriticalSection",
    "StrStrIA",
    "TlsAlloc",
    "GetFileAttributesA",
    "EnumSystemGeoID",
    "ImpersonateAnonymousToken",
    "UrlCreateFromPathW",
    "QueryOptionalDelayLoadedAPI",
    "LCMapStringW",
    "lstrcmpiW",
    "StartTraceW",
    "QueueUserAPC",
    "SetThreadpoolThreadMinimum",
    "UnregisterWaitEx",
    "GetModuleHandleW",
    "PathIsUNCServerShareW",
    "SetFileValidData",
    "GetProcessImageFileNameA",
    "TraceEvent",
    "SetStdHandle",
    "GetConsoleInputExeNameA",
    "GetDiskFreeSpaceW",
    "SHGetSpecialFolderPathW",
    "GetTraceLoggerHandle",
    "ZombifyActCtx",
    "GetCurrentThread",
    "PathIsSameRootA",
    "ReadDirectoryChangesW",
    "GetCommTimeouts",
    "WerpNotifyUseStringResource",
    "GetThreadPreferredUILanguages",
    "GetEnvironmentStringsW",
    "CreateThreadpoolTimer",
    "GetProcessImageFileNameW",
    "SetTraceCallback",
    "StrTrimW",
    "TransactNamedPipe",
    "CreatePrivateObjectSecurityWithMultipleInheritance",
    "PathParseIconLocationW",
    "NeedCurrentDirectoryForExePathA",
    "EnumSystemLanguageGroupsW",
    "lstrcmp",
    "K32GetProcessImageFileNameW",
    "UnregisterTraceGuids",
    "EnumSystemFirmwareTables",
    "CreateRemoteThreadEx",
    "CreateMutexExW",
    "GetFileAttributesExA",
    "PathIsRelativeW",
    "SetPriorityClass",
    "GetSecurityDescriptorOwner",
    "AreThereVisibleLogoffScriptsInternal",
    "VirtualLock",
    "StartThreadpoolIo",
    "WriteConsoleOutputCharacterW",
    "WerUnregisterRuntimeExceptionModule",
    "PathCchAddBackslashEx",
    "StrCmpW",
    "SetThreadLocale",
    "Internal_EnumDateFormats",
    "SetThreadpoolThreadMaximum",
    "EnumDateFormatsW",
    "DeactivateActCtx",
    "PathCchRenameExtension",
    "AdjustTokenPrivileges",
    "StartTraceA",
    "GetCurrentDirectoryW",
    "LCMapStringA",
    "GetUserInfoWord",
    "CreateFileMappingNumaW",
    "UrlGetPartW",
    "InitOnceInitialize",
    "GetLocaleInfoW",
    "PathFindNextComponentA",
    "VirtualQueryEx",
    "WakeConditionVariable",
    "NlsIsUserDefaultLocale",
    "EnumResourceNamesExA",
    "CompareStringA",
    "NotifyRedirectedStringChange",
    "CreateTimerQueue",
    "HeapSetInformation",
    "PathAddBackslashW",
    "StrToIntA",
    "DsFreeNameResultW",
    "IsThreadAFiber",
    "IsThreadpoolTimerSet",
    "PathQuoteSpacesA",
    "GetFinalPathNameByHandleW",
    "ReadConsoleInputExA",
    "GetGPOListInternalA",
    "RegDeleteKeyExInternalW",
    "SetLastConsoleEventActive",
    "TransmitCommChar",
    "MoveFileWithProgressTransactedW",
    "OpenMutexW",
    "_onexit",
    "GetLogicalDrives",
    "GetThreadLocale",
    "RegSetValueExA",
    "ReleaseSRWLockShared",
    "GetStringTableEntry",
    "NormalizeString",
    "RegDeleteTreeA",
    "Beep",
    "SetThreadpoolTimerEx",
    "SetLocaleInfoW",
    "IsValidLocaleName",
    "TraceMessageVa",
    "Internal_EnumUILanguages",
    "EventProviderEnabled",
    "EnumTimeFormatsEx",
    "RegGetValueA",
    "OpenEventA",
    "SetThreadToken",
    "HeapWalk",
    "StrCSpnW",
    "GetSystemTimeAdjustment",
    "FlushFileBuffers",
    "IsCharCntrlW",
    "GlobalFree",
    "ReadConsoleInputExW",
    "BaseIsAppcompatInfrastructureDisabled",
    "QueryMemoryResourceNotification",
    "GetSystemWindowsDirectoryA",
    "CreateTimerQueueTimer",
    "DisablePredefinedHandleTableInternal",
    "RemoveDirectoryW",
    "FillConsoleOutputAttribute",
    "TlsGetValue",
    "GetProcessWorkingSetSizeEx",
    "BaseMarkFileForDelete",
    "LeaveCriticalSectionWhenCallbackReturns",
    "AreThereVisibleShutdownScriptsInternal",
    "CreateMutexW",
    "PathCchFindExtension",
    "UrlEscapeA",
    "InternalLcidToName",
    "InitializeProcessForWsWatch",
    "K32EmptyWorkingSet",
    "FindNLSString",
    "SetConsoleCursorInfo",
    "IsValidAcl",
    "LocalFileTimeToFileTime",
    "SetFileAttributesW",
    "DeleteAce",
    "GetStringTypeW",
    "GetLocaleInfoEx",
    "QueryWorkingSet",
    "FoldStringW",
    "GetProcAddress",
    "MoveFileWithProgressW",
    "DefineDosDeviceW",
    "GetSecurityDescriptorGroup",
    "CheckTokenMembershipEx",
    "PeekConsoleInputA",
    "EnumProcessModulesEx",
    "EncodeSystemPointer",
    "ContinueDebugEvent",
    "BaseCheckAppcompatCacheEx",
    "SHLoadIndirectString",
    "K32GetPerformanceInfo",
    "GetModuleBaseNameA",
    "GetAppliedGPOListInternalA",
    "WaitForUserPolicyForegroundProcessingInternal",
    "ObjectPrivilegeAuditAlarmW",
    "RegCreateKeyExInternalW",
    "PathRemoveFileSpecW",
    "ResumeThread",
    "PathIsURLA",
    "SetPrivateObjectSecurity",
    "CharNextA",
    "NlsGetCacheUpdateCount",
    "InterlockedPushEntrySList",
    "ReadConsoleOutputA",
    "BemCreateContractFrom",
    "FreeConsole",
    "PathFileExistsA",
    "GetLongPathNameW",
    "GetGeoInfoW",
    "GetSystemDirectoryA",
    "SetupComm",
    "RegOpenKeyExInternalW",
    "AddAccessDeniedObjectAce",
    "LocaleNameToLCID",
    "ReadConsoleA",
    "InitializeSid",
    "GetTickCount64",
    "EnumProcessModules",
    "MapGenericMask",
    "SetCommState",
    "OpenSemaphoreW",
    "GetPreviousFgPolicyRefreshInfoInternal",
    "IsDebuggerPresent",
    "NlsUpdateSystemLocale",
    "GetDriveTypeA",
    "GetThreadUILanguage",
    "IsDBCSLeadByte",
    "FreeEnvironmentStringsW",
    "CreateFile2",
    "SHRegEnumUSKeyW",
    "GetExitCodeThread",
    "InitOnceBeginInitialize",
    "SHGetFolderPathW",
    "GetProcessGroupAffinity",
    "PathCombineW",
    "DebugBreak",
    "GetVersion",
    "GetFileTime",
    "GetEraNameCountedString",
    "lstrlenA",
    "GetShortPathNameW",
    "FlsFree",
    "UrlCompareW",
    "StrCmpCA",
    "SetSecurityDescriptorGroup",
    "FreeGPOListInternalA",
    "GetSystemDefaultLocaleName",
    "PathGetDriveNumberA",
    "GetModuleFileNameExW",
    "GetDateFormatA",
    "UpdateProcThreadAttribute",
    "SetSecurityAccessMask",
    "RegCloseKey",
    "GetCurrencyFormatEx",
    "GetOsSafeBootMode",
    "CreatePrivateObjectSecurity",
    "SHRegQueryUSValueW",
    "PathCchCombine",
    "CopyFile2",
    "CheckTokenMembership",
    "TzSpecificLocalTimeToSystemTimeEx",
    "PathCchCanonicalize",
    "GetFileType",
    "QISearch",
    "EnterCriticalSection",
    "FreeEnvironmentStringsA",
    "HashData",
    "UrlCreateFromPathA",
    "FindClose",
    "PathCchRemoveExtension",
    "CharNextExA",
    "InternetTimeFromSystemTimeA",
    "ResetEvent",
    "PathIsFileSpecW",
    "PathCchRemoveFileSpec",
    "ExitProcess",
    "GetProcessHeap",
    "WaitForThreadpoolWorkCallbacks",
    "PathCchAddBackslash",
    "IsValidLanguageGroup",
    "PathAppendA",
    "GetLongPathNameA",
    "GetNumberFormatW",
    "CreateSymbolicLinkW",
    "EnterCriticalPolicySectionInternal",
    "InterlockedCompareExchange",
    "IsInternetESCEnabled",
    "SHRegGetUSValueA",
    "time",
    "HeapCreate",
    "Wow64RevertWow64FsRedirection",
    "SetDefaultDllDirectories",
    "RegKrnGetTermsrvRegistryExtensionFlags",
    "SHRegSetUSValueW",
    "ReleaseSRWLockExclusive",
    "GetVersionExW",
    "RegCopyTreeW",
    "GetDateFormatEx",
    "_GetMUIStringFromCache",
    "GetFileVersionInfoExW",
    "SystemTimeToTzSpecificLocalTimeEx",
    "NlsGetACPFromLocale",
    "CreateIoCompletionPort",
    "DecodePointer",
    "RegGetKeySecurity",
    "PrivilegeCheck",
    "RegisterWaitForSingleObjectEx",
    "RegKrnResetAppKeyLoaded",
    "InternetTimeFromSystemTimeW",
    "MapPredefinedHandleInternal",
    "IsCharAlphaNumericW",
    "PathIsRootA",
    "DecodeSystemPointer",
    "ReleaseMutexWhenCallbackReturns",
    "SHRegWriteUSValueA",
    "GetFileAttributesW",
    "SleepConditionVariableSRW",
    "RemapPredefinedHandleInternal",
    "DsMakePasswordCredentialsW",
    "K32EnumProcesses",
    "UrlIsNoHistoryA",
    "FindFirstChangeNotificationW",
    "_AddMUIStringToCache",
    "GlobalAlloc",
    "HeapUnlock",
    "ReadFileScatter",
    "GetSystemInfo",
    "EnumTimeFormatsW",
    "PrivilegedServiceAuditAlarmW",
    "SHGetDesktopFolder",
    "SHCreateDirectoryExW",
    "AddSIDToBoundaryDescriptor",
    "GetCPFileNameFromRegistry",
    "K32EnumPageFilesW",
    "StrCpyNXA",
    "GetCurrentProcessorNumberEx",
    "_exit",
    "AddVectoredExceptionHandler",
    "SHRegDeleteUSValueW",
    "GetFileMUIInfo",
    "NotifyMountMgr",
    "GetSystemDefaultLangID",
    "PathRelativePathToW",
    "ClearCommBreak",
    "AddScopedPolicyIDAce",
    "EnumSystemCodePagesW",
    "ProcessTrace",
    "GetApplicationRestartSettings",
    "GetVolumePathNameW",
    "PathIsValidCharW",
    "QueryUnbiasedInterruptTime",
    "GetFileSize",
    "lstrcpynW",
    "GetAcceptLanguagesW",
    "FindFirstFreeAce",
    "SleepEx",
    "CreateFileMappingFromApp",
    "PathMatchSpecA",
    "PathUnquoteSpacesW",
    "RegSaveKeyExA",
    "GetCachedSigningLevel",
    "PathFindFileNameA",
    "SHRegEnumUSValueA",
    "GetSidSubAuthorityCount",
    "LoadStringByReference",
    "SetHandleInformation",
    "MapViewOfFileEx",
    "ConnectNamedPipe",
    "CreateThreadpoolWork",
    "PurgeComm",
    "DeviceIoControl",
    "PathStripPathA",
    "GetDiskFreeSpaceExA",
    "BaseCheckAppcompatCache",
    "GetCPHashNode",
    "K32EnumPageFilesA",
    "SetThreadpoolStackInformation",
    "WakeAllConditionVariable",
    "AccessCheckAndAuditAlarmW",
    "BasepNotifyTrackingService",
    "GetTimeFormatW",
    "GetLocaleInfoA",
    "PathRemoveBlanksA",
    "RegQueryValueExA",
    "StrCmpNIW",
    "GetModuleHandleA",
    "WerUnregisterFile",
    "RegOpenCurrentUser",
    "SHRegGetBoolUSValueA",
    "AddAuditAccessAce",
    "SetHandleCount",
    "FindFirstChangeNotificationA",
    "Internal_EnumTimeFormats",
    "GetStartupInfoW",
    "GetNamedPipeAttribute",
    "K32GetProcessImageFileNameA",
    "ReadConsoleOutputCharacterW",
    "RegEnumKeyExW",
    "StrCSpnIW",
    "EnableTraceEx2",
    "lstrcmpA",
    "DelayLoadFailureHookLookup",
    "IsCharPunctW",
    "GetProcessHeaps",
    "K32GetDeviceDriverFileNameW",
    "InitializeConditionVariable",
    "GetModuleBaseNameW",
    "GetSystemFileCacheSize",
    "GetSystemDefaultUILanguage",
    "PathCchAppend",
    "PathSearchAndQualifyA",
    "PeekNamedPipe",
    "PathIsUNCServerW",
    "SHGetFolderPathAndSubDirW",
    "AddResourceAttributeAce",
    "ReadProcessMemory",
    "AllocateLocallyUniqueId",
    "RegOpenUserClassesRoot",
    "VerQueryValueA",
    "BaseInitAppcompatCacheSupport",
    "StrCmpICW",
    "RefreshPolicyInternal",
    "CancelIoEx",
    "K32GetMappedFileNameW",
    "CreateMemoryResourceNotification",
    "LocalUnlock",
    "SetThreadUILanguage",
    "PathRemoveBackslashA",
    "SHRegDeleteEmptyUSKeyW",
    "ActivateActCtx",
    "PathCleanupSpec",
    "QueryDosDeviceW",
    "CreateThreadpoolWait",
    "AcquireSRWLockShared",
    "EventAccessQuery",
    "StrRChrW",
    "GetCurrencyFormatW",
    "StrPBrkW",
    "GetDeviceDriverFileNameW",
    "GetNativeSystemInfo",
    "QueryProcessCycleTime",
    "GenerateGPNotificationInternal",
    "QueryIdleProcessorCycleTime",
    "PathFindNextComponentW",
    "GetDeviceDriverFileNameA",
    "BaseDumpAppcompatCache",
    "LoadLibraryExA",
    "FillConsoleOutputCharacterA",
    "StrRStrIW",
    "SignalObjectAndWait",
    "FindVolumeClose",
    "RestoreLastError",
    "GetComputerNameExW",
    "EqualSid",
    "WriteConsoleOutputA",
    "__wgetmainargs",
    "GetCommProperties",
    "InitializeCriticalSectionAndSpinCount",
    "PathIsUNCServerA",
    "SetThreadPriorityBoost",
    "GetConsoleMode",
    "SetSecurityDescriptorDacl",
    "ResetWriteWatch"
  ],
  "kbd101.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbd101a.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbd101b.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbd101c.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbd103.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbd106.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbd106n.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdarmph.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdarmty.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdax2.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdfar.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdgeoer.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdgeome.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdgeooa.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdgeoqw.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdhebl3.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdibm02.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdlisub.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdlisus.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdlk41a.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdnec.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdnec95.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdnecat.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdnecnt.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdnko.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdphags.dll": [
    "KbdLayerDescriptor"
  ],
  "kd.dll": [
    "KdDebuggerInitialize0",
    "KdSave",
    "KdRestore",
    "KdSetHiberRange",
    "KdD3Transition",
    "KdSendPacket",
    "KdReceivePacket",
    "KdDebuggerInitialize1",
    "KdD0Transition"
  ],
  "kd1394.dll": [
    "KdDebuggerInitialize0",
    "KdSave",
    "KdRestore",
    "KdSetHiberRange",
    "KdD3Transition",
    "KdSendPacket",
    "KdReceivePacket",
    "KdDebuggerInitialize1",
    "KdD0Transition"
  ],
  "kd_02_10ec.dll": [
    "KdGetRxPacket",
    "KdGetPacketAddress",
    "KdGetPacketLength",
    "KdReleaseRxPacket",
    "KdInitializeLibrary",
    "KdShutdownController",
    "KdGetTxPacket",
    "KdInitializeController",
    "KdSendTxPacket"
  ],
  "kd_02_14e4.dll": [
    "KdGetRxPacket",
    "KdGetPacketAddress",
    "KdGetPacketLength",
    "KdReleaseRxPacket",
    "KdInitializeLibrary",
    "KdShutdownController",
    "KdGetTxPacket",
    "KdInitializeController",
    "KdSendTxPacket"
  ],
  "kd_02_8086.dll": [
    "KdGetRxPacket",
    "KdGetPacketAddress",
    "KdGetPacketLength",
    "KdReleaseRxPacket",
    "KdInitializeLibrary",
    "KdShutdownController",
    "KdGetTxPacket",
    "KdInitializeController",
    "KdSendTxPacket"
  ],
  "kdcom.dll": [
    "KdDebuggerInitialize0",
    "KdSave",
    "KdRestore",
    "KdSetHiberRange",
    "KdD3Transition",
    "KdSendPacket",
    "KdReceivePacket",
    "KdDebuggerInitialize1",
    "KdD0Transition"
  ],
  "kdhv1394.dll": [
    "KdDebuggerInitialize0",
    "KdSave",
    "KdRestore",
    "KdSetHiberRange",
    "KdD3Transition",
    "KdSendPacket",
    "KdReceivePacket",
    "KdDebuggerInitialize1",
    "KdD0Transition"
  ],
  "kdnet.dll": [
    "KdDebuggerInitialize0",
    "KdSave",
    "KdRestore",
    "KdSetHiberRange",
    "KdD3Transition",
    "KdSendPacket",
    "KdReceivePacket",
    "KdDebuggerInitialize1",
    "KdD0Transition"
  ],
  "kdstub.dll": [
    "KdGetRxPacket",
    "KdGetPacketAddress",
    "KdGetPacketLength",
    "KdReleaseRxPacket",
    "KdInitializeLibrary",
    "KdShutdownController",
    "KdGetTxPacket",
    "KdInitializeController",
    "KdSendTxPacket"
  ],
  "kdusb.dll": [
    "KdDebuggerInitialize0",
    "KdSave",
    "KdRestore",
    "KdSetHiberRange",
    "KdD3Transition",
    "KdSendPacket",
    "KdReceivePacket",
    "KdDebuggerInitialize1",
    "KdD0Transition"
  ],
  "kdvm.dll": [
    "KdDebuggerInitialize0",
    "KdSave",
    "KdRestore",
    "KdSetHiberRange",
    "KdD3Transition",
    "KdSendPacket",
    "KdReceivePacket",
    "KdDebuggerInitialize1",
    "KdD0Transition"
  ],
  "keepaliveprovider.dll": [
    "KAMSS_DeregisterProvider",
    "KAMSS_RegisterProvider"
  ],
  "kerberos.dll": [
    "SpLsaModeInitialize",
    "KerbCreateTokenFromTicket",
    "KerbDomainChangeCallback",
    "KerbKdcCallBack",
    "SpInitialize",
    "DllMain",
    "SpUserModeInitialize",
    "SpInstanceInit",
    "Kerberos",
    "KerbIsInitialized",
    "KerbMakeKdcCall"
  ],
  "kernel32.dll": [
    "OpenSemaphoreA",
    "CloseThreadpoolCleanupGroup",
    "SetConsoleScreenBufferSize",
    "GetNumaNodeProcessorMask",
    "AppXGetDevelopmentMode",
    "CloseThreadpoolCleanupGroupMembers",
    "GetCalendarSupportedDateRange",
    "FindResourceExA",
    "FindFirstFileExA",
    "GetNLSVersion",
    "BasepCheckWinSaferRestrictions",
    "IsBadStringPtrW",
    "BaseWriteErrorElevationRequiredEvent",
    "CreateHardLinkW",
    "RegLoadMUIStringW",
    "LockFileEx",
    "VirtualQuery",
    "EnumCalendarInfoA",
    "timeGetDevCaps",
    "BaseDestroyVDMEnvironment",
    "GetVolumePathNameA",
    "GlobalMemoryStatusEx",
    "WaitNamedPipeA",
    "DeleteTimerQueue",
    "IdnToNameprepUnicode",
    "FlushViewOfFile",
    "CreateProcessA",
    "Process32NextW",
    "GetDiskFreeSpaceA",
    "InitializeSListHead",
    "LZOpenFileW",
    "CheckElevation",
    "HeapValidate",
    "TermsrvConvertSysRootToUserDir",
    "CommitStateAtom",
    "GetUserPreferredUILanguages",
    "GetSystemPowerStatus",
    "SetFilePointerEx",
    "CopyFileExA",
    "BackupSeek",
    "GetProfileSectionA",
    "EnumUILanguagesW",
    "EnumerateLocalComputerNamesW",
    "CreateWaitableTimerW",
    "CopyFileTransactedW",
    "GetUILanguageInfo",
    "_lwrite",
    "CreateThreadpool",
    "DeleteTimerQueueTimer",
    "CreateFiberEx",
    "lstrcpynA",
    "GetProcessPreferredUILanguages",
    "lstrlen",
    "RegisterWaitForSingleObject",
    "BaseDumpAppcompatCacheWorker",
    "GlobalFlags",
    "OpenThread",
    "GetActiveProcessorCount",
    "ReadConsoleW",
    "IsProcessorFeaturePresent",
    "GetAtomNameW",
    "MoveFileW",
    "VerLanguageNameW",
    "CreateThreadpoolCleanupGroup",
    "K32GetDeviceDriverBaseNameA",
    "QueryActCtxWWorker",
    "CloseStateAtom",
    "GetProcessorSystemCycleTime",
    "LoadPackagedLibrary",
    "RegCreateKeyExA",
    "SetUnhandledExceptionFilter",
    "GetOverlappedResultEx",
    "K32GetProcessMemoryInfo",
    "CreateTapePartition",
    "PackageFamilyNameFromFullName",
    "ReadConsoleOutputAttribute",
    "GetLogicalProcessorInformationEx",
    "TryAcquireSRWLockShared",
    "GetModuleFileNameW",
    "ReleaseActCtxWorker",
    "AppContainerFreeMemory",
    "SetStdHandleEx",
    "EnumLanguageGroupLocalesW",
    "RegSaveKeyExW",
    "CreateWaitableTimerExW",
    "GetPrivateProfileSectionNamesA",
    "QueryStateAtomValueInfo",
    "RegDeleteTreeW",
    "RegGetValueW",
    "TermsrvSetKeySecurity",
    "GetConsoleOutputCP",
    "MapViewOfFileFromApp",
    "WriteConsoleOutputCharacterA",
    "PowerCreateRequest",
    "SetVolumeMountPointA",
    "BaseFormatTimeOut",
    "SetComPlusPackageInstallStatus",
    "SetConsoleHistoryInfo",
    "SetTimeZoneInformation",
    "SetEnvironmentVariableA",
    "SetProcessAffinityUpdateMode",
    "MoveFileTransactedW",
    "WriteFile",
    "RegQueryValueExW",
    "NtVdm64CreateProcessInternalW",
    "SetDynamicTimeZoneInformation",
    "GetFullPathNameTransactedA",
    "CreatePrivateNamespaceW",
    "GetHivePath",
    "WaitForThreadpoolIoCallbacks",
    "PrivCopyFileExW",
    "SetThreadInformation",
    "LockFile",
    "ConvertThreadToFiber",
    "FatalAppExitA",
    "GetProfileSectionW",
    "GetTimeZoneInformation",
    "CreateActCtxWWorker",
    "SetVolumeLabelW",
    "GetEnvironmentStringsA",
    "IsBadStringPtrA",
    "TrySubmitThreadpoolCallback",
    "GetFileBandwidthReservation",
    "FindNextFileNameW",
    "UnmapViewOfFileEx",
    "BaseDllReadWriteIniFile",
    "EnumResourceTypesExW",
    "WaitForMultipleObjects",
    "K32QueryWorkingSetEx",
    "SetUserGeoID",
    "FlushInstructionCache",
    "GetBinaryTypeA",
    "GetCommMask",
    "OpenProcessToken",
    "CancelDeviceWakeupRequest",
    "WriteConsoleInputVDMA",
    "OpenJobObjectW",
    "GetPrivateProfileStringW",
    "HeapAlloc",
    "RegisterApplicationRestart",
    "IdnToAscii",
    "GetSystemPreferredUILanguages",
    "FlsGetValue",
    "EnumSystemLocalesA",
    "WriteProfileSectionW",
    "CreateRemoteThread",
    "GetNamedPipeServerSessionId",
    "WaitForSingleObject",
    "FormatMessageA",
    "InterlockedPopEntrySList",
    "SetConsoleHardwareState",
    "GetPrivateProfileSectionA",
    "QueryFullProcessImageNameW",
    "timeBeginPeriod",
    "CtrlRoutine",
    "GetCPInfoExW",
    "CreateProcessInternalW",
    "SetTimerQueueTimer",
    "WerRegisterFileWorker",
    "GetFileInformationByHandleEx",
    "VirtualFree",
    "GetStringTypeA",
    "AttachConsole",
    "GetTimeFormatAWorker",
    "GetLastError",
    "BaseFlushAppcompatCache",
    "SetEventWhenCallbackReturns",
    "GetFinalPathNameByHandleA",
    "CloseStateContainer",
    "GetPrivateProfileStructA",
    "RegOpenKeyExW",
    "RegEnumValueW",
    "GetModuleHandleExW",
    "SetCriticalSectionSpinCount",
    "GlobalLock",
    "ReleaseActCtx",
    "IsValidNLSVersion",
    "GetHandleInformation",
    "PackageNameAndPublisherIdFromFamilyName",
    "VerifyConsoleIoHandle",
    "GetThreadSelectorEntry",
    "TermsrvSetValueKey",
    "CreateEventExW",
    "OutputDebugStringW",
    "GetCurrentActCtx",
    "K32GetWsChanges",
    "GetProcessDEPPolicy",
    "TermsrvRestoreKey",
    "GetNLSVersionEx",
    "GetThreadTimes",
    "NlsWriteEtwEvent",
    "CreateProcessAsUserW",
    "GetSystemFirmwareTable",
    "GetSystemTime",
    "FindNextFileA",
    "BasepSetFileEncryptionCompression",
    "GetCurrencyFormatA",
    "GetCommConfig",
    "GetConsoleAliasesA",
    "GetQueuedCompletionStatusEx",
    "InterlockedCompareExchange64",
    "CreateDirectoryW",
    "SetConsoleCursorPosition",
    "BasepNotifyLoadStringResource",
    "DuplicateConsoleHandle",
    "RegDeleteKeyExW",
    "IsBadHugeReadPtr",
    "SetConsoleInputExeNameA",
    "FindNextVolumeMountPointW",
    "GetConsoleAliasesLengthA",
    "GetStdHandle",
    "GetPhysicallyInstalledSystemMemory",
    "InterlockedPushListSList",
    "ReleaseMutex",
    "GetThreadContext",
    "VirtualAllocExNuma",
    "WritePrivateProfileStructW",
    "ClosePackageInfo",
    "GetConsoleHardwareState",
    "SetCommTimeouts",
    "K32GetWsChangesEx",
    "GetStateContainerDepth",
    "Thread32Next",
    "RegLoadKeyW",
    "SetProcessPriorityBoost",
    "DisableThreadLibraryCalls",
    "TermsrvCreateRegEntry",
    "FlsAlloc",
    "GetApplicationRestartSettingsWorker",
    "SetSystemTime",
    "UnlockFileEx",
    "GetNumberFormatEx",
    "WriteProfileStringA",
    "GetAppContainerAce",
    "GetNamedPipeHandleStateW",
    "FillConsoleOutputCharacterW",
    "CheckRemoteDebuggerPresent",
    "SetConsoleTextAttribute",
    "AppXGetPackageCapabilities",
    "InterlockedFlushSList",
    "Wow64DisableWow64FsRedirection",
    "OpenConsoleW",
    "GlobalUnfix",
    "CopyFileTransactedA",
    "WriteConsoleA",
    "WerRegisterRuntimeExceptionModule",
    "GetEnabledXStateFeatures",
    "GetConsoleTitleA",
    "FindFirstFileNameW",
    "GetFileMUIPath",
    "CreateStateContainer",
    "RegisterConsoleVDM",
    "GetConsoleAliasExesLengthA",
    "AssignProcessToJobObject",
    "BaseGenerateAppCompatData",
    "SetLocalPrimaryComputerNameW",
    "SetFileAttributesTransactedW",
    "SetCommConfig",
    "GetThreadPriority",
    "IsProcessInJob",
    "ReadFileEx",
    "SetVDMCurrentDirectories",
    "SetFilePointer",
    "Process32Next",
    "IsNLSDefinedString",
    "EnumerateStateAtomValues",
    "EnumDateFormatsExA",
    "EnumResourceLanguagesW",
    "SuspendThread",
    "SetProcessDEPPolicy",
    "CreateActCtxA",
    "GetSystemWindowsDirectoryW",
    "SetThreadPreferredUILanguages",
    "RegisterBadMemoryNotification",
    "WerUnregisterMemoryBlockWorker",
    "CreateDirectoryA",
    "CloseThreadpoolWait",
    "InitializeContext",
    "LoadStringBaseExW",
    "GetCommModemStatus",
    "GetApplicationRecoveryCallback",
    "BasepCopyEncryption",
    "timeEndPeriod",
    "SetConsoleLocalEUDC",
    "GetVDMCurrentDirectories",
    "FindActCtxSectionStringW",
    "EndUpdateResourceW",
    "FlushProcessWriteBuffers",
    "Sleep",
    "EncodePointer",
    "BackupWrite",
    "FindNextFileW",
    "CopyFileExW",
    "SetConsoleNumberOfCommandsW",
    "OutputDebugStringA",
    "RtlFillMemory",
    "BaseUpdateAppcompatCache",
    "InitOnceExecuteOnce",
    "WerpNotifyLoadStringResourceWorker",
    "WerGetFlags",
    "BasepGetAppCompatData",
    "CopyFileW",
    "RegQueryInfoKeyW",
    "BaseCheckAppcompatCacheWorker",
    "OpenPrivateNamespaceW",
    "LoadStringBaseW",
    "GetSystemDefaultLCID",
    "EnumSystemLocalesW",
    "GetWriteWatch",
    "CreateJobSet",
    "CloseThreadpool",
    "GetCPInfoExA",
    "GetVolumeInformationByHandleW",
    "GetCommandLineW",
    "GetTimeZoneInformationForYear",
    "GetCalendarInfoW",
    "GetQueuedCompletionStatus",
    "UpdateResourceW",
    "FindVolumeMountPointClose",
    "CreateFileA",
    "GetConsoleOriginalTitleW",
    "PublishStateChangeNotification",
    "ReleaseSemaphore",
    "AppXGetPackageSid",
    "GetCurrentDirectoryA",
    "LZCreateFileW",
    "SetFileCompletionNotificationModes",
    "CreatePrivateNamespaceA",
    "lstrlenW",
    "WriteFileEx",
    "ConvertFiberToThread",
    "ConvertSystemTimeToCalDateTime",
    "GetSerializedAtomBytes",
    "SetRoamingLastObservedChangeTime",
    "SetCommMask",
    "InitializeSRWLock",
    "CreateThread",
    "BuildCommDCBAndTimeoutsW",
    "EnumSystemLocalesEx",
    "IsCalendarLeapMonth",
    "GetSystemWow64DirectoryW",
    "SetSystemFileCacheSize",
    "GetMemoryErrorHandlingCapabilities",
    "EnumDateFormatsExW",
    "GetConsoleScreenBufferInfoEx",
    "GetNextVDMCommand",
    "QueryThreadCycleTime",
    "lstrcpyn",
    "NlsUpdateLocale",
    "SetThreadGroupAffinity",
    "LCMapStringEx",
    "TryEnterCriticalSection",
    "GetLogicalProcessorInformation",
    "CompareFileTime",
    "DelayLoadFailureHook",
    "ReadFile",
    "TermsrvDeleteValue",
    "GetConsoleScreenBufferInfo",
    "SwitchToThread",
    "LockResource",
    "DeleteTimerQueueEx",
    "SetProcessWorkingSetSizeEx",
    "GetPackageFullName",
    "GetNumberOfConsoleInputEvents",
    "GetLogicalDriveStringsW",
    "GetSystemDEPPolicy",
    "GetConsoleAliasExesLengthW",
    "SetThreadIdealProcessorEx",
    "GetConsoleCP",
    "GetEnvironmentVariableW",
    "GetDevicePowerState",
    "RemoveSecureMemoryCacheCallback",
    "PrefetchVirtualMemory",
    "EnumTimeFormatsA",
    "CreateHardLinkTransactedA",
    "GetCalendarDateFormatEx",
    "GetDllDirectoryW",
    "SetComputerNameA",
    "FormatMessageW",
    "SetSystemPowerState",
    "BaseCheckRunApp",
    "LocateXStateFeature",
    "GetNumberOfConsoleMouseButtons",
    "RegLoadMUIStringA",
    "TermsrvGetWindowsDirectoryA",
    "EnumResourceNamesExW",
    "GlobalAddAtomW",
    "TermsrvOpenRegEntry",
    "HeapFree",
    "SetFileAttributesA",
    "CheckAllowDecryptedRemoteDestinationPolicy",
    "GetFileAttributesTransactedA",
    "GetProfileStringW",
    "RaiseInvalid16BitExeError",
    "lstrcat",
    "OpenProfileUserMapping",
    "AddDllDirectory",
    "ResolveDelayLoadsFromDll",
    "CompareStringOrdinal",
    "EnumLanguageGroupLocalesA",
    "InitializeCriticalSection",
    "SetEvent",
    "SetFileInformationByHandle",
    "_llseek",
    "_lread",
    "GetUserGeoID",
    "GetTempPathA",
    "GetXStateFeaturesMask",
    "RegUnLoadKeyW",
    "SetThreadpoolTimer",
    "GetBinaryType",
    "MapViewOfFile",
    "TerminateProcess",
    "GetConsoleInputWaitHandle",
    "WaitNamedPipeW",
    "WerRegisterMemoryBlock",
    "GetDllDirectoryA",
    "WerpStringLookup",
    "BasepAppCompatHookDLL",
    "SystemTimeToFileTime",
    "WerpLaunchAeDebug",
    "WriteConsoleInputVDMW",
    "QueryPerformanceCounter",
    "SetConsoleCtrlHandler",
    "IdnToUnicode",
    "FlushConsoleInputBuffer",
    "IsDBCSLeadByteEx",
    "WerRegisterFile",
    "DebugSetProcessKillOnExit",
    "DebugActiveProcess",
    "LZSeek",
    "FindAtomW",
    "LeaveCriticalSection",
    "lstrcmpW",
    "ConvertDefaultLocale",
    "SetLocalTime",
    "GetCalendarDifferenceInDays",
    "GetConsoleAliasExesW",
    "K32InitializeProcessForWsWatch",
    "GetSystemTimeAsFileTime",
    "BasepFreeActivationContextActivationBlock",
    "K32GetModuleFileNameExA",
    "GetStateSettingsFolder",
    "BaseQueryModuleData",
    "BasepIsProcessAllowed",
    "CreateSocketHandle",
    "GetProfileStringA",
    "OverrideRoamingDataModificationTimesInRange",
    "HeapSummary",
    "SetSearchPathMode",
    "OpenFileMappingA",
    "BackupRead",
    "SetEndOfFile",
    "GetModuleFileNameA",
    "GetConsoleAliasW",
    "CreateFileMappingW",
    "NlsCheckPolicy",
    "BaseThreadInitThunk",
    "SetTapeParameters",
    "FindFirstVolumeA",
    "RaiseException",
    "CloseThreadpoolTimer",
    "QueryInformationJobObject",
    "BasepPostSuccessAppXExtension",
    "HeapLock",
    "SetConsoleOutputCP",
    "EnumResourceTypesA",
    "SortCloseHandle",
    "AppXFreeMemory",
    "FreeLibraryAndExitThread",
    "LZInit",
    "GlobalGetAtomNameW",
    "UTRegister",
    "FreeResource",
    "BasepProcessInvalidImage",
    "RemoveDirectoryTransactedA",
    "SetThreadpoolWait",
    "GetConsoleKeyboardLayoutNameW",
    "BasepFreeAppCompatData",
    "VirtualProtect",
    "AppXLookupMoniker",
    "CancelThreadpoolIo",
    "SetThreadStackGuarantee",
    "CreateEventW",
    "SetThreadpoolWaitEx",
    "WritePrivateProfileStringA",
    "FindFirstStreamW",
    "SetSystemTimeAdjustment",
    "GetThreadInformation",
    "LZOpenFileA",
    "RegNotifyChangeKeyValue",
    "RegRestoreKeyW",
    "ExitThread",
    "SizeofResource",
    "SetFirmwareEnvironmentVariableA",
    "TermsrvOpenUserClasses",
    "GetBinaryTypeW",
    "NlsEventDataDescCreate",
    "RegDeleteValueW",
    "OpenPackageInfoByFullName",
    "CreateFileTransactedW",
    "_lcreat",
    "K32GetDeviceDriverFileNameA",
    "LoadLibraryA",
    "UnregisterStateChangeNotification",
    "VirtualAlloc",
    "RegOpenKeyExA",
    "GetWindowsDirectoryA",
    "TlsFree",
    "GetExpandedNameA",
    "IsBadWritePtr",
    "Toolhelp32ReadProcessMemory",
    "CreateMailslotA",
    "GetCalendarMonthsInYear",
    "DeleteProcThreadAttributeList",
    "GetConsoleKeyboardLayoutNameA",
    "GetNumberFormatA",
    "GetTimeFormatA",
    "ScrollConsoleScreenBufferA",
    "CreateNamedPipeW",
    "GetCalendarDateFormat",
    "WerpNotifyLoadStringResourceEx",
    "GetEnvironmentStrings",
    "WerpNotifyLoadStringResource",
    "BaseCleanupAppcompatCacheSupportWorker",
    "GetCalendarDaysInMonth",
    "DnsHostnameToComputerNameA",
    "AllocConsole",
    "DeleteAtom",
    "QueryIdleProcessorCycleTimeEx",
    "FlsSetValue",
    "QueryPerformanceFrequency",
    "FindCloseChangeNotification",
    "IsWow64Process",
    "OpenProcess",
    "WriteConsoleOutputAttribute",
    "GetStateRootFolder",
    "SetConsoleScreenBufferInfoEx",
    "RemoveVectoredContinueHandler",
    "CloseThreadpoolIo",
    "CloseState",
    "ResolveDelayLoadedAPI",
    "AddIntegrityLabelToBoundaryDescriptor",
    "TlsSetValue",
    "AcquireSRWLockExclusive",
    "UnregisterApplicationRecoveryCallback",
    "GetVolumeNameForVolumeMountPointW",
    "SetTermsrvAppInstallMode",
    "GetDateFormatAWorker",
    "SetCurrentConsoleFontEx",
    "BasepGetComputerNameFromNtPath",
    "FindActCtxSectionStringWWorker",
    "OpenFile",
    "WriteConsoleInputA",
    "GetModuleHandleExA",
    "WaitForSingleObjectEx",
    "RaiseFailFastException",
    "WriteStateContainerValue",
    "FindNextStreamW",
    "SetConsoleNumberOfCommandsA",
    "SetFileApisToOEM",
    "CreateStateChangeNotification",
    "QueryActCtxSettingsW",
    "GetApplicationRecoveryCallbackWorker",
    "SetDllDirectoryA",
    "TermsrvGetPreSetValue",
    "LocalFree",
    "CreateEventExA",
    "ProcessIdToSessionId",
    "SetComputerNameExA",
    "EnumSystemLanguageGroupsA",
    "RegEnumValueA",
    "_lopen",
    "VerLanguageNameA",
    "SearchPathA",
    "K32GetModuleBaseNameW",
    "OpenWaitableTimerA",
    "CallbackMayRunLong",
    "CreateBoundaryDescriptorW",
    "RegDeleteValueA",
    "GetUserDefaultLCID",
    "GetExpandedNameW",
    "GetUserDefaultUILanguage",
    "LZClose",
    "VirtualAllocEx",
    "BuildCommDCBA",
    "IsValidCalDateTime",
    "GetNamedPipeInfo",
    "FreeLibrary",
    "SetWaitableTimer",
    "CreateActCtxW",
    "DeleteStateAtomValue",
    "CreateEventA",
    "BasepConstructSxsCreateProcessMessage",
    "PrivMoveFileIdentityW",
    "GetEnvironmentVariableA",
    "CheckForReadOnlyResource",
    "GetProcessShutdownParameters",
    "SetProcessPreferredUILanguages",
    "GetPrivateProfileIntA",
    "CallNamedPipeA",
    "GetCommState",
    "GlobalAddAtomA",
    "CloseHandle",
    "GetConsoleHistoryInfo",
    "IsCalendarLeapYear",
    "GetProcessTimes",
    "InitAtomTable",
    "K32EnumProcessModulesEx",
    "ReleaseSemaphoreWhenCallbackReturns",
    "CompareStringW",
    "FindNLSStringEx",
    "FindFirstFileExW",
    "RemoveDllDirectory",
    "GetNumaHighestNodeNumber",
    "FindFirstVolumeMountPointW",
    "BaseUpdateAppcompatCacheWorker",
    "GetDateFormatWWorker",
    "FileTimeToDosDateTime",
    "timeGetTime",
    "SetWaitableTimerEx",
    "GetSystemTimePreciseAsFileTime",
    "GetConsoleAliasExesA",
    "BaseInitAppcompatCacheSupportWorker",
    "GetProcessVersion",
    "SetCurrentDirectoryW",
    "SetConsoleActiveScreenBuffer",
    "LoadModule",
    "RegDisablePredefinedCacheEx",
    "BaseUpdateVDMEntry",
    "FindFirstFileA",
    "FindNextChangeNotification",
    "GetTempPathW",
    "BasepReleaseAppXContext",
    "SetCalendarInfoW",
    "CancelIo",
    "RegisterWowBaseHandlers",
    "UnregisterConsoleIME",
    "MultiByteToWideChar",
    "SetThreadPriority",
    "SetInformationJobObject",
    "WriteProcessMemory",
    "K32GetModuleFileNameExW",
    "GetFileAttributesTransactedW",
    "RequestDeviceWakeup",
    "EnumCalendarInfoExEx",
    "FindActCtxSectionStringA",
    "FindActCtxSectionGuidWorker",
    "BaseGetNamedObjectDirectory",
    "SetCalendarInfoA",
    "GetCurrentActCtxWorker",
    "ConvertThreadToFiberEx",
    "GetPrivateProfileSectionW",
    "ExpandEnvironmentStringsW",
    "FatalAppExitW",
    "SleepConditionVariableCS",
    "ExpungeConsoleCommandHistoryA",
    "GetCompressedFileSizeW",
    "IsSystemResumeAutomatic",
    "DuplicateHandle",
    "CompareStringEx",
    "GetCurrentThreadStackLimits",
    "GetExitCodeProcess",
    "GetUserDefaultLocaleName",
    "WaitForThreadpoolWaitCallbacks",
    "GlobalCompact",
    "GetLargestConsoleWindowSize",
    "InterlockedIncrement",
    "SetConsoleCursorMode",
    "ConvertCalDateTimeToSystemTime",
    "SetConsoleTitleW",
    "QueryThreadpoolStackInformation",
    "FindNextVolumeMountPointA",
    "EnumCalendarInfoW",
    "DuplicateEncryptionInfoFileExt",
    "DeleteStateContainer",
    "CreateSemaphoreExW",
    "ReplaceFileW",
    "LocalHandle",
    "ReadConsoleOutputW",
    "Heap32ListNext",
    "OpenConsoleWStub",
    "GetNumaAvailableMemoryNodeEx",
    "ExitVDM",
    "AddRefActCtx",
    "GetCalendarInfoEx",
    "SetFileApisToANSI",
    "LZRead",
    "TermsrvGetWindowsDirectoryW",
    "GetComputerNameW",
    "ReadConsoleOutputCharacterA",
    "UnmapViewOfFile",
    "TermsrvDeleteKey",
    "CreateMutexExA",
    "GetConsoleCommandHistoryLengthA",
    "SetDefaultCommConfigA",
    "GetProductInfo",
    "InitializeProcThreadAttributeList",
    "TryAcquireSRWLockExclusive",
    "BaseIsDosApplication",
    "QueryStateContainerItemInfo",
    "CreateThreadpoolIo",
    "EnumDateFormatsExEx",
    "GetConsoleCommandHistoryW",
    "GetNumberOfConsoleFonts",
    "Wow64SuspendThread",
    "GetThreadPriorityBoost",
    "DuplicateStateContainerHandle",
    "GetVolumeNameForVolumeMountPointA",
    "K32GetDeviceDriverBaseNameW",
    "FindStringOrdinal",
    "CallNamedPipeW",
    "QueryFullProcessImageNameA",
    "LocalAlloc",
    "GetStringTypeExW",
    "QueryDepthSList",
    "RegUnLoadKeyA",
    "GetCurrentConsoleFont",
    "CreateProcessW",
    "VerSetConditionMask",
    "GetTempFileNameA",
    "GetProcessHandleCount",
    "GetConsoleCursorInfo",
    "VerifyScripts",
    "_hwrite",
    "GetFullPathNameA",
    "GetPackagesByPackageFamily",
    "BaseElevationPostProcessing",
    "FindActCtxSectionGuid",
    "ClosePrivateNamespace",
    "GetVersionExA",
    "PrepareTape",
    "GetFullPathNameW",
    "QueryProcessAffinityUpdateMode",
    "GlobalSize",
    "ExpandEnvironmentStringsA",
    "GlobalWire",
    "OpenWaitableTimerW",
    "CloseThreadpoolWork",
    "VDMOperationStarted",
    "OpenFileMappingW",
    "HeapCompact",
    "QueueUserWorkItem",
    "OpenThreadToken",
    "GetConsoleSelectionInfo",
    "GetNumaProximityNodeEx",
    "GetConsoleCursorMode",
    "SetCurrentDirectoryA",
    "SetEnvironmentStringsW",
    "DeleteFileW",
    "RegFlushKey",
    "EnumResourceLanguagesExA",
    "LZCloseFile",
    "lstrcatW",
    "CreateFileW",
    "ApplicationRecoveryFinished",
    "DeleteFiber",
    "Heap32Next",
    "WerRegisterMemoryBlockWorker",
    "SetCommBreak",
    "GetNumaNodeNumberFromHandle",
    "NeedCurrentDirectoryForExePathW",
    "DeleteVolumeMountPointW",
    "GetThreadGroupAffinity",
    "GetTempFileNameW",
    "AddVectoredContinueHandler",
    "EraseTape",
    "GetThreadErrorMode",
    "CreateConsoleScreenBuffer",
    "SetCachedSigningLevel",
    "GetProcessWorkingSetSize",
    "GetConsoleAliasA",
    "GetDynamicTimeZoneInformation",
    "K32GetModuleInformation",
    "RemoveDirectoryA",
    "GetConsoleNlsMode",
    "HeapDestroy",
    "GetCurrentPackagePath",
    "BuildCommDCBAndTimeoutsA",
    "GetRoamingLastObservedChangeTime",
    "IsValidCodePage",
    "FoldStringA",
    "RegLoadKeyA",
    "timeGetSystemTime",
    "GetConsoleAliasesLengthW",
    "Heap32ListFirst",
    "GetCurrentPackageId",
    "GetHandleContext",
    "EnumCalendarInfoExW",
    "VirtualFreeEx",
    "SetFirmwareEnvironmentVariableExW",
    "GetDefaultCommConfigA",
    "CreateWaitableTimerA",
    "FindFirstFileW",
    "ResetState",
    "GetCurrentProcessId",
    "K32EnumProcessModules",
    "OpenStateAtom",
    "GetStringScripts",
    "GetSystemDirectoryW",
    "ClearCommError",
    "UnlockFile",
    "InterlockedPushListSListEx",
    "GetConsoleInputExeNameW",
    "InterlockedExchange",
    "GetPrivateProfileStringA",
    "MoveFileWithProgressA",
    "NotifyUILanguageChange",
    "IsNormalizedString",
    "GetTimeFormatWWorker",
    "PulseEvent",
    "GetNumaProcessorNodeEx",
    "GetSystemWow64DirectoryA",
    "GetCurrentApplicationUserModelId",
    "GetPackageInfo",
    "InterlockedDecrement",
    "GetFirmwareEnvironmentVariableExA",
    "HeapQueryInformation",
    "SetEnvironmentStringsA",
    "ConvertNLSDayOfWeekToWin32DayOfWeek",
    "SetThreadAffinityMask",
    "QueryThreadProfiling",
    "GetNamedPipeServerProcessId",
    "CreateHardLinkA",
    "ReOpenFile",
    "SetThreadContext",
    "AppContainerUnregisterSid",
    "EnumerateStateContainerItems",
    "GetShortPathNameA",
    "PackageFamilyNameFromId",
    "FindResourceA",
    "BaseSetLastNTError",
    "RtlCaptureStackBackTrace",
    "DisconnectNamedPipe",
    "ReleaseStateLock",
    "FatalExit",
    "OpenEventW",
    "TermsrvSyncUserIniFileExt",
    "GetCurrentProcess",
    "AreFileApisANSI",
    "WriteConsoleOutputW",
    "UnhandledExceptionFilter",
    "Process32FirstW",
    "GetDateFormatW",
    "GetProcessMitigationPolicy",
    "DeleteBoundaryDescriptor",
    "ReadConsoleInputA",
    "BasepAllocateActivationContextActivationBlock",
    "LoadResource",
    "CreateDirectoryTransactedW",
    "Basep8BitStringToDynamicUnicodeString",
    "GetProcessIdOfThread",
    "CreateJobObjectA",
    "WritePrivateProfileSectionW",
    "RegCreateKeyExW",
    "UnregisterStateLock",
    "GetCurrentThreadId",
    "GetFileAttributesExW",
    "BaseIsAppcompatInfrastructureDisabledWorker",
    "BasepQueryAppCompat",
    "GetCurrentPackageInfo",
    "BasepMapModuleHandle",
    "SetDllDirectoryW",
    "CancelTimerQueueTimer",
    "WriteFileGather",
    "PowerSetRequest",
    "AppXGetPackageState",
    "SetComputerNameExW",
    "CommConfigDialogW",
    "VirtualUnlock",
    "GetVolumeInformationA",
    "K32GetModuleBaseNameA",
    "SetFileTime",
    "MapViewOfFileExNuma",
    "GetNamedPipeClientComputerNameA",
    "RegSetValueExW",
    "K32QueryWorkingSet",
    "SetConsoleNlsMode",
    "BuildCommDCBW",
    "LCIDToLocaleName",
    "GetComputerNameA",
    "GetFirmwareEnvironmentVariableExW",
    "GetNamedPipeClientComputerNameW",
    "RegEnumKeyExA",
    "DeleteVolumeMountPointA",
    "SetConsoleMenuClose",
    "RegSetKeySecurity",
    "GetAppContainerNamedObjectPath",
    "SetFirmwareEnvironmentVariableW",
    "GetPriorityClass",
    "GetCurrentPackageFamilyName",
    "SetMessageWaitingIndicator",
    "DisassociateCurrentThreadFromCallback",
    "CreateMutexA",
    "EnumResourceTypesW",
    "AddConsoleAliasA",
    "OpenMutexA",
    "BaseCheckElevation",
    "WerUnregisterRuntimeExceptionModuleWorker",
    "ScrollConsoleScreenBufferW",
    "HeapSize",
    "CreateFileMappingA",
    "CreateDirectoryExA",
    "GetApplicationUserModelId",
    "EnumResourceLanguagesA",
    "SetErrorMode",
    "GetOverlappedResult",
    "LoadLibraryExW",
    "AppContainerDeriveSidFromMoniker",
    "CancelSynchronousIo",
    "SystemTimeToTzSpecificLocalTime",
    "RemoveVectoredExceptionHandler",
    "GetThreadIdealProcessorEx",
    "GetConsoleCommandHistoryA",
    "DosPathToSessionPathA",
    "SetConsoleMode",
    "GetFullPathNameTransactedW",
    "BaseVerifyUnicodeString",
    "Module32First",
    "InterlockedExchangeAdd",
    "FreeLibraryWhenCallbackReturns",
    "BasepGetExeArchType",
    "GetSystemAppDataFolder",
    "WaitForMultipleObjectsEx",
    "CancelWaitableTimer",
    "GetCurrentConsoleFontEx",
    "LocalLock",
    "GetTimeFormatEx",
    "BaseCleanupAppcompatCacheSupport",
    "SetDefaultCommConfigW",
    "EscapeCommFunction",
    "SetConsoleDisplayMode",
    "SetEnvironmentVariableW",
    "WaitForThreadpoolTimerCallbacks",
    "GetProcessId",
    "SetConsoleWindowInfo",
    "GetConsoleTitleW",
    "InitOnceComplete",
    "GetCommandLineA",
    "HeapReAlloc",
    "SubmitThreadpoolWork",
    "EnumerateLocalComputerNamesA",
    "GetStateVersion",
    "InitializeCriticalSectionEx",
    "GlobalUnlock",
    "CreateProcessInternalA",
    "SetFirmwareEnvironmentVariableExA",
    "FindNextVolumeW",
    "GlobalHandle",
    "AllocateUserPhysicalPagesNuma",
    "DeleteFileTransactedA",
    "CreateNamedPipeA",
    "lstrcmpiA",
    "GetDurationFormat",
    "FileTimeToSystemTime",
    "WideCharToMultiByte",
    "WaitForDebugEvent",
    "PeekConsoleInputW",
    "GetConsoleWindow",
    "GetUserDefaultLangID",
    "RegRestoreKeyA",
    "FileTimeToLocalFileTime",
    "RegQueryInfoKeyA",
    "GlobalGetAtomNameA",
    "CheckTokenCapability",
    "MoveFileExW",
    "GetComputerNameExA",
    "GetFileSizeEx",
    "ReplaceFileA",
    "SetLastError",
    "GlobalFindAtomW",
    "GetErrorMode",
    "RtlUnwind",
    "FindFirstVolumeW",
    "GlobalFindAtomA",
    "IsValidLocale",
    "GetProcessAffinityMask",
    "GetFileInformationByHandle",
    "GlobalUnWire",
    "GenerateConsoleCtrlEvent",
    "GetWindowsDirectoryW",
    "QueryActCtxSettingsWWorker",
    "GetStateFolder",
    "GetNumaNodeProcessorMaskEx",
    "QueryActCtxW",
    "GetCPInfo",
    "BasepReleaseSxsCreateProcessUtilityStruct",
    "SetVolumeLabelA",
    "SetProcessShutdownParameters",
    "GetFirmwareType",
    "SetMailslotInfo",
    "SetFileAttributesTransactedA",
    "CreateJobObjectW",
    "SetThreadExecutionState",
    "CreateToolhelp32Snapshot",
    "EnumResourceLanguagesExW",
    "WaitCommEvent",
    "GetOEMCP",
    "MoveFileTransactedA",
    "CheckForReadOnlyResourceFilter",
    "OpenFileById",
    "GetACP",
    "GetCalendarInfoA",
    "GetVolumePathNamesForVolumeNameW",
    "SetThreadErrorMode",
    "lstrcatA",
    "WerpNotifyUseStringResourceWorker",
    "PostQueuedCompletionStatus",
    "SetProcessInformation",
    "LZStart",
    "GetThreadId",
    "LocalReAlloc",
    "Wow64GetThreadContext",
    "ResolveLocaleName",
    "GetLocalTime",
    "GetVolumeInformationW",
    "WerUnregisterMemoryBlock",
    "TerminateThread",
    "GetDiskFreeSpaceExW",
    "SetXStateFeaturesMask",
    "WriteConsoleInputW",
    "SearchPathW",
    "BaseFormatObjectAttributes",
    "GetConsoleOriginalTitleA",
    "AddSecureMemoryCacheCallback",
    "EnableThreadProfiling",
    "GetCurrentProcessorNumber",
    "WriteConsoleW",
    "SetConsoleInputExeNameW",
    "DebugActiveProcessStop",
    "DeleteFileA",
    "OpenStateExplicit",
    "CreateDirectoryExW",
    "UpdateCalendarDayOfWeek",
    "GetStringTypeExA",
    "WerpGetDebugger",
    "GetLargePageMinimum",
    "K32GetMappedFileNameA",
    "VirtualProtectEx",
    "IsBadHugeWritePtr",
    "LoadLibraryW",
    "ReadConsoleInputW",
    "GetProfileIntA",
    "UnregisterBadMemoryNotification",
    "EnumResourceTypesExA",
    "RegDeleteKeyExA",
    "RequestWakeupLatency",
    "lstrcmpi",
    "GetDriveTypeW",
    "ShowConsoleCursor",
    "GetProfileIntW",
    "TzSpecificLocalTimeToSystemTime",
    "SetProcessMitigationPolicy",
    "DeactivateActCtxWorker",
    "AppXGetApplicationData",
    "FindResourceExW",
    "ChangeTimerQueueTimer",
    "WerpInitiateRemoteRecovery",
    "SetFileIoOverlappedRange",
    "K32EnumDeviceDrivers",
    "Process32First",
    "LoadAppInitDlls",
    "GetDurationFormatEx",
    "SetNamedPipeHandleState",
    "GetNamedPipeClientProcessId",
    "GetTickCount",
    "ReplacePartitionUnit",
    "GetProcessPriorityBoost",
    "SetConsoleCP",
    "CreatePipe",
    "DeleteCriticalSection",
    "TlsAlloc",
    "GetFileAttributesA",
    "EnumSystemGeoID",
    "VerifyVersionInfoA",
    "FindFirstFileTransactedA",
    "LCMapStringW",
    "lstrcmpiW",
    "QueueUserAPC",
    "GetPackagePath",
    "_hread",
    "IsCalendarLeapDay",
    "SetThreadpoolThreadMinimum",
    "UnregisterWaitEx",
    "GetModuleHandleW",
    "SetFileValidData",
    "GetCompressedFileSizeTransactedW",
    "GlobalReAlloc",
    "FindFirstStreamTransactedW",
    "AppContainerLookupDisplayNameMrtReference",
    "RtlCaptureContext",
    "SetStdHandle",
    "GetConsoleInputExeNameA",
    "UnregisterApplicationRestart",
    "GetDiskFreeSpaceW",
    "GetCompressedFileSizeTransactedA",
    "QueryDosDeviceA",
    "CreateSemaphoreExA",
    "ZombifyActCtx",
    "RegisterConsoleOS2",
    "Module32FirstW",
    "GetActiveProcessorGroupCount",
    "GetCurrentThread",
    "ReadDirectoryChangesW",
    "GetCommTimeouts",
    "WerpNotifyUseStringResource",
    "GetThreadPreferredUILanguages",
    "SetLocalPrimaryComputerNameA",
    "GetNamedPipeHandleStateA",
    "RemoveLocalAlternateComputerNameW",
    "DefineDosDeviceA",
    "AddLocalAlternateComputerNameW",
    "AddAtomW",
    "GetEnvironmentStringsW",
    "CreateThreadpoolTimer",
    "Module32NextW",
    "WriteStateAtomValue",
    "AppContainerLookupMoniker",
    "TransactNamedPipe",
    "NeedCurrentDirectoryForExePathA",
    "EnumSystemLanguageGroupsW",
    "GetCompressedFileSizeA",
    "lstrcmp",
    "K32GetProcessImageFileNameW",
    "EnumSystemFirmwareTables",
    "CreateMailslotW",
    "WriteTapemark",
    "AllocateUserPhysicalPages",
    "SetConsoleTitleA",
    "VerifyVersionInfoW",
    "WritePrivateProfileStringW",
    "SetComputerNameW",
    "CreateRemoteThreadEx",
    "GetPackageFamilyName",
    "CreateMutexExW",
    "GetFileAttributesExA",
    "Wow64GetThreadSelectorEntry",
    "SetPriorityClass",
    "LZDone",
    "GetVolumePathNamesForVolumeNameA",
    "VirtualLock",
    "CreateFiber",
    "StartThreadpoolIo",
    "GetProcessInformation",
    "WriteConsoleOutputCharacterW",
    "GlobalAddAtomExW",
    "BaseFlushAppcompatCacheWorker",
    "GetStartupInfoA",
    "WerUnregisterRuntimeExceptionModule",
    "BasepAppXExtension",
    "SetThreadLocale",
    "LocalSize",
    "ReplaceFile",
    "SetThreadpoolThreadMaximum",
    "EnumDateFormatsW",
    "DeactivateActCtx",
    "GetThreadIOPendingFlag",
    "SetProcessAffinityMask",
    "SetVolumeMountPointW",
    "GetConsoleProcessList",
    "GetCurrentDirectoryW",
    "LCMapStringA",
    "CreateFileMappingNumaW",
    "MulDiv",
    "DosDateTimeToFileTime",
    "InitOnceInitialize",
    "GetLocaleInfoW",
    "BeginUpdateResourceA",
    "VirtualQueryEx",
    "WakeConditionVariable",
    "EnumResourceNamesExA",
    "ConsoleMenuControl",
    "CompareStringA",
    "RegisterConsoleIME",
    "SetProcessWorkingSetSize",
    "UpdateResourceA",
    "CreateTimerQueue",
    "HeapSetInformation",
    "GetNamedPipeClientSessionId",
    "MoveFileExA",
    "GetPackageId",
    "IsThreadAFiber",
    "IsThreadpoolTimerSet",
    "CreateSemaphoreA",
    "GetFinalPathNameByHandleW",
    "ReadConsoleInputExA",
    "SetLastConsoleEventActive",
    "TransmitCommChar",
    "OpenMutexW",
    "BasepCheckWebBladeHashes",
    "GetLogicalDrives",
    "GetThreadLocale",
    "RegSetValueExA",
    "ReleaseSRWLockShared",
    "GetConsoleFontInfo",
    "NormalizeString",
    "RegDeleteTreeA",
    "RtlZeroMemory",
    "WriteProfileStringW",
    "GetTapePosition",
    "Beep",
    "SetThreadpoolTimerEx",
    "MapUserPhysicalPagesScatter",
    "SetLocaleInfoW",
    "IsValidLocaleName",
    "CloseStateChangeNotification",
    "MoveFileA",
    "UnregisterWait",
    "MapUserPhysicalPages",
    "BasepAnsiStringToDynamicUnicodeString",
    "WinExec",
    "EnumSystemCodePagesA",
    "EnumTimeFormatsEx",
    "RegGetValueA",
    "OpenEventA",
    "SetThreadToken",
    "HeapWalk",
    "lstrcpyW",
    "GetSystemTimeAdjustment",
    "FlushFileBuffers",
    "GlobalFree",
    "ReadConsoleInputExW",
    "BaseIsAppcompatInfrastructureDisabled",
    "CreateFileMappingNumaA",
    "QueryMemoryResourceNotification",
    "GetSystemWindowsDirectoryA",
    "GetPrivateProfileStructW",
    "CreateTimerQueueTimer",
    "PackageIdFromFullName",
    "CmdBatNotification",
    "SetConsoleOS2OemFormat",
    "RemoveDirectoryW",
    "WTSGetActiveConsoleSessionId",
    "FillConsoleOutputAttribute",
    "TlsGetValue",
    "GetProcessWorkingSetSizeEx",
    "LeaveCriticalSectionWhenCallbackReturns",
    "CreateMutexW",
    "lstrcpyA",
    "GetCalendarWeekNumber",
    "K32EmptyWorkingSet",
    "FindNLSString",
    "GetTapeParameters",
    "CloseStateLock",
    "SetConsoleCursorInfo",
    "LocalFileTimeToFileTime",
    "SetFileAttributesW",
    "EndUpdateResourceA",
    "GetAtomNameA",
    "DeleteStateContainerValue",
    "GetStringTypeW",
    "GetLocaleInfoEx",
    "FoldStringW",
    "EnumUILanguagesA",
    "CloseProfileUserMapping",
    "GetProcAddress",
    "MoveFileWithProgressW",
    "GetCurrentPackageFullName",
    "DefineDosDeviceW",
    "GetComPlusPackageInstallStatus",
    "CheckTokenMembershipEx",
    "CreateWaitableTimerExA",
    "CopyLZFile",
    "PeekConsoleInputA",
    "RemoveDirectoryTransactedW",
    "EncodeSystemPointer",
    "ContinueDebugEvent",
    "BaseCheckAppcompatCacheEx",
    "LZCopy",
    "K32GetPerformanceInfo",
    "BasepCheckAppCompat",
    "GetProcessIoCounters",
    "GetConsoleCommandHistoryLengthW",
    "IsBadReadPtr",
    "BaseCheckAppcompatCacheExWorker",
    "GetGeoInfoA",
    "ResumeThread",
    "EnumResourceNamesW",
    "NlsGetCacheUpdateCount",
    "GlobalFix",
    "InterlockedPushEntrySList",
    "RegisterWaitForInputIdle",
    "ReadConsoleOutputA",
    "CopyFileA",
    "FreeConsole",
    "GetLongPathNameW",
    "GetGeoInfoW",
    "GetLogicalDriveStringsA",
    "DnsHostnameToComputerNameW",
    "VDMConsoleOperation",
    "GetSystemDirectoryA",
    "SetupComm",
    "CreateStateLock",
    "LocaleNameToLCID",
    "AddRefActCtxWorker",
    "BeginUpdateResourceW",
    "WerRegisterRuntimeExceptionModuleWorker",
    "ReadConsoleA",
    "GetTickCount64",
    "SetCommState",
    "CloseConsoleHandle",
    "SetConsoleMaximumWindowSize",
    "ExpungeConsoleCommandHistoryW",
    "IsNativeVhdBoot",
    "OpenSemaphoreW",
    "RegisterWowExec",
    "IsDebuggerPresent",
    "NlsUpdateSystemLocale",
    "GetDriveTypeA",
    "CreateBoundaryDescriptorA",
    "GetThreadUILanguage",
    "IsDBCSLeadByte",
    "FreeEnvironmentStringsW",
    "DisableThreadProfiling",
    "CreateFile2",
    "GetLongPathNameTransactedW",
    "GetExitCodeThread",
    "WerSetFlags",
    "InitOnceBeginInitialize",
    "GetPrivateProfileSectionNamesW",
    "GetProcessGroupAffinity",
    "CreateHardLinkTransactedW",
    "DebugBreak",
    "GetVersion",
    "CreateSemaphoreW",
    "GetFileTime",
    "GetEraNameCountedString",
    "lstrlenA",
    "GetShortPathNameW",
    "FlsFree",
    "AppXGetOSMaxVersionTested",
    "GetFirmwareEnvironmentVariableA",
    "SetConsoleFont",
    "PackageFullNameFromId",
    "GetSystemDefaultLocaleName",
    "GetDateFormatA",
    "ActivateActCtxWorker",
    "UpdateProcThreadAttribute",
    "RegCloseKey",
    "GetCurrencyFormatEx",
    "AcquireStateLock",
    "BasepReportFault",
    "RegisterApplicationRecoveryCallback",
    "Module32Next",
    "CopyFile2",
    "DosPathToSessionPathW",
    "SetConsoleCursor",
    "WerpCleanupMessageMapping",
    "GetNumaProximityNode",
    "TzSpecificLocalTimeToSystemTimeEx",
    "GetFileType",
    "EnterCriticalSection",
    "FreeEnvironmentStringsA",
    "FindClose",
    "ReadStateAtomValue",
    "ResetEvent",
    "SetTapePosition",
    "SetConsoleIcon",
    "CopyContext",
    "ExitProcess",
    "GetProcessHeap",
    "WaitForThreadpoolWorkCallbacks",
    "DeleteFileTransactedW",
    "SetStateVersion",
    "CheckNameLegalDOS8Dot3W",
    "IsValidLanguageGroup",
    "GetLongPathNameA",
    "CompareCalendarDates",
    "GetNumberFormatW",
    "GlobalAddAtomExA",
    "EnumCalendarInfoExA",
    "GetMaximumProcessorCount",
    "CreateSymbolicLinkW",
    "FindFirstFileNameTransactedW",
    "SortGetHandle",
    "Heap32First",
    "InterlockedCompareExchange",
    "HeapCreate",
    "CommConfigDialogA",
    "Wow64RevertWow64FsRedirection",
    "LocalCompact",
    "SetDefaultDllDirectories",
    "Wow64EnableWow64FsRedirection",
    "ReleaseSRWLockExclusive",
    "GetVersionExW",
    "RegCopyTreeW",
    "GetDateFormatEx",
    "SystemTimeToTzSpecificLocalTimeEx",
    "CreateSymbolicLinkTransactedA",
    "CreateIoCompletionPort",
    "DecodePointer",
    "GetConsoleCharType",
    "RtlMoveMemory",
    "RegGetKeySecurity",
    "AddLocalAlternateComputerNameA",
    "RegisterWaitForSingleObjectEx",
    "RegisterStateLock",
    "SetFileBandwidthReservation",
    "GetNumaAvailableMemoryNode",
    "GetNumaProcessorNode",
    "SetLocaleInfoA",
    "SetNamedPipeAttribute",
    "OpenState",
    "GetSystemTimes",
    "DecodeSystemPointer",
    "EnumDateFormatsA",
    "Wow64SetThreadContext",
    "ReleaseMutexWhenCallbackReturns",
    "GetFileAttributesW",
    "SleepConditionVariableSRW",
    "SetVolumeMountPointWStub",
    "FreeUserPhysicalPages",
    "K32EnumProcesses",
    "FindFirstChangeNotificationW",
    "SetFileShortNameW",
    "GlobalAlloc",
    "HeapUnlock",
    "FindNextVolumeA",
    "ReadFileScatter",
    "AppXLookupDisplayName",
    "ZombifyActCtxWorker",
    "GetSystemInfo",
    "CheckNameLegalDOS8Dot3A",
    "EnumTimeFormatsW",
    "RemoveLocalAlternateComputerNameA",
    "CreateStateSubcontainer",
    "CheckElevationEnabled",
    "CreateSymbolicLinkTransactedW",
    "SetHandleContext",
    "AddSIDToBoundaryDescriptor",
    "GetDefaultCommConfigW",
    "K32EnumPageFilesW",
    "PowerClearRequest",
    "GetCurrentProcessorNumberEx",
    "WerUnregisterFileWorker",
    "AddVectoredExceptionHandler",
    "GetFileMUIInfo",
    "NotifyMountMgr",
    "GetSystemDefaultLangID",
    "TerminateJobObject",
    "ClearCommBreak",
    "ApplicationRecoveryInProgress",
    "AddScopedPolicyIDAce",
    "EnumSystemCodePagesW",
    "GetApplicationRestartSettings",
    "GetSystemRegistryQuota",
    "GetVolumePathNameW",
    "GetConsoleFontSize",
    "BasepCheckBadapp",
    "GlobalDeleteAtom",
    "QueryUnbiasedInterruptTime",
    "GetFileSize",
    "lstrcpynW",
    "SleepEx",
    "CreateFileMappingFromApp",
    "OpenPrivateNamespaceA",
    "GetFirmwareEnvironmentVariableW",
    "GetCachedSigningLevel",
    "RegSaveKeyExA",
    "SetHandleInformation",
    "CreateFileTransactedA",
    "MapViewOfFileEx",
    "ConnectNamedPipe",
    "CreateThreadpoolWork",
    "PurgeComm",
    "DeviceIoControl",
    "GetDiskFreeSpaceExA",
    "BaseCheckAppcompatCache",
    "UnsubscribeStateChangeNotification",
    "InvalidateConsoleDIBits",
    "BindIoCompletionCallback",
    "AddConsoleAliasW",
    "SetFileShortNameA",
    "FindAtomA",
    "K32EnumPageFilesA",
    "SetThreadpoolStackInformation",
    "AppContainerRegisterSid",
    "WakeAllConditionVariable",
    "GetTimeFormatW",
    "GetLocaleInfoA",
    "CeipIsOptedIn",
    "EnumResourceNamesA",
    "GetLongPathNameTransactedA",
    "RegQueryValueExA",
    "LocalFlags",
    "GetModuleHandleA",
    "GetSystemAppDataKey",
    "WerUnregisterFile",
    "RegOpenCurrentUser",
    "AppXSetPackageState",
    "GetPrivateProfileIntW",
    "GetMailslotInfo",
    "_lclose",
    "GetConsoleAliasesW",
    "AdjustCalendarDate",
    "SetHandleCount",
    "lstrcpy",
    "FindFirstChangeNotificationA",
    "CreateSymbolicLinkA",
    "GetStartupInfoW",
    "GetNamedPipeAttribute",
    "K32GetProcessImageFileNameA",
    "ReadConsoleOutputCharacterW",
    "DebugBreakProcess",
    "RegEnumKeyExW",
    "SetThreadIdealProcessor",
    "ReadStateContainerValue",
    "AppXGetOSMinVersion",
    "BasepAppContainerEnvironmentExtension",
    "lstrcmpA",
    "GetTapeStatus",
    "WriteProfileSectionA",
    "GetProcessHeaps",
    "K32GetDeviceDriverFileNameW",
    "InitializeConditionVariable",
    "CreateStateAtom",
    "ReadThreadProfilingData",
    "GetSystemFileCacheSize",
    "GetSystemDefaultUILanguage",
    "FindFirstFileTransactedW",
    "WritePrivateProfileStructA",
    "PeekNamedPipe",
    "AddResourceAttributeAce",
    "ReadProcessMemory",
    "RegOpenUserClassesRoot",
    "BaseInitAppcompatCacheSupport",
    "GetConsoleDisplayMode",
    "CancelIoEx",
    "K32GetMappedFileNameW",
    "SubscribeStateChangeNotification",
    "CreateMemoryResourceNotification",
    "LocalUnlock",
    "SwitchToFiber",
    "SetThreadUILanguage",
    "LocalShrink",
    "GlobalMemoryStatus",
    "ActivateActCtx",
    "QueryDosDeviceW",
    "CreateThreadpoolWait",
    "WritePrivateProfileSectionA",
    "AcquireSRWLockShared",
    "GetMaximumProcessorGroupCount",
    "Thread32First",
    "GetCurrencyFormatW",
    "FindFirstVolumeMountPointA",
    "GetNativeSystemInfo",
    "SetConsolePalette",
    "QueryProcessCycleTime",
    "IsBadCodePtr",
    "QueryIdleProcessorCycleTime",
    "SetConsoleKeyShortcuts",
    "BaseDumpAppcompatCache",
    "LoadLibraryExA",
    "FillConsoleOutputCharacterA",
    "UTUnRegister",
    "CreateDirectoryTransactedA",
    "SignalObjectAndWait",
    "FindVolumeClose",
    "RestoreLastError",
    "GetComputerNameExW",
    "TermsrvAppInstallMode",
    "FindResourceW",
    "WriteConsoleOutputA",
    "GetCommProperties",
    "InitializeCriticalSectionAndSpinCount",
    "RegisterStateChangeNotification",
    "AddAtomA",
    "SetThreadPriorityBoost",
    "GetConsoleMode",
    "OpenJobObjectA",
    "ResetWriteWatch"
  ],
  "kernelceip.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "keyiso.dll": [
    "KeyIsoServiceMain",
    "KeyIsoSetAuditingInterface"
  ],
  "keymgr.dll": [
    "PRShowRestoreWizardW",
    "PRShowSaveWizardExW",
    "CPlApplet",
    "KRShowKeyMgr",
    "DllMain",
    "PRShowRestoreFromMsginaW",
    "PRShowRestoreWizardExW",
    "PRShowSaveFromMsginaW",
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "korwbrkr.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "ksuser.dll": [
    "KsCreatePin",
    "KsCreateTopologyNode",
    "KsCreateAllocator",
    "KsCreatePin2",
    "KsCreateClock2",
    "KsCreateAllocator2",
    "KsCreateTopologyNode2",
    "KsCreateClock"
  ],
  "ktmw32.dll": [
    "OpenTransaction",
    "GetNotificationResourceManager",
    "PrePrepareComplete",
    "RollbackTransactionAsync",
    "CommitComplete",
    "GetTransactionInformation",
    "ReadOnlyEnlistment",
    "SetTransactionInformation",
    "CommitTransaction",
    "RollforwardTransactionManager",
    "CommitEnlistment",
    "RecoverTransactionManager",
    "PrepareComplete",
    "PrivPropagationComplete",
    "CreateEnlistment",
    "GetTransactionId",
    "PrivRegisterProtocolAddressInformation",
    "GetEnlistmentRecoveryInformation",
    "OpenEnlistment",
    "OpenTransactionManager",
    "SetResourceManagerCompletionPort",
    "CreateTransactionManager",
    "OpenTransactionManagerById",
    "PrePrepareEnlistment",
    "OpenResourceManager",
    "RollbackEnlistment",
    "SinglePhaseReject",
    "GetNotificationResourceManagerAsync",
    "RenameTransactionManager",
    "CommitTransactionAsync",
    "PrepareEnlistment",
    "GetCurrentClockTransactionManager",
    "PrivCreateTransaction",
    "CreateResourceManager",
    "PrivPropagationFailed",
    "SetEnlistmentRecoveryInformation",
    "GetTransactionManagerId",
    "RecoverEnlistment",
    "RecoverResourceManager",
    "PrivIsLogWritableTransactionManager",
    "RollbackComplete",
    "RollbackTransaction",
    "CreateTransaction",
    "GetEnlistmentId"
  ],
  "L2SecHC.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "LAPRXY.DLL": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "LSCSHostPolicy.dll": [
    "CreateInstanceOfHostPolicy",
    "ReleaseInstanceOfHostPolicy"
  ],
  "LangCleanupSysprepAction.dll": [
    "Sysprep_Generalize_MUILangCleanup"
  ],
  "ListSvc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "ListenerServiceMain"
  ],
  "LldpNotify.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "LocationApi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "l2gpstore.dll": [
    "L2GPPolicyDataWrite",
    "L2GPPolicyDataDelete",
    "L2GPPolicyDataRead",
    "L2GPPolicyFreeMem",
    "L2GPPolicyDataDeleteAll",
    "L2GPPolicyStoreClose",
    "L2GPPolicyStoreOpen"
  ],
  "l2nacp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "licmgr10.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "linkinfo.dll": [
    "GetLinkInfoData",
    "CompareLinkInfoVolumes",
    "GetCanonicalPathInfo",
    "ResolveLinkInfoA",
    "ResolveLinkInfoW",
    "CreateLinkInfoW",
    "CreateLinkInfoA",
    "ResolveLinkInfo",
    "DestroyLinkInfo",
    "DisconnectLinkInfo",
    "GetCanonicalPathInfoA",
    "GetCanonicalPathInfoW",
    "IsValidLinkInfo",
    "CreateLinkInfo",
    "CompareLinkInfoReferents"
  ],
  "livessp.dll": [
    "SpLsaModeInitialize",
    "DllUnregisterServer",
    "DllRegisterServer",
    "SpUserModeInitialize"
  ],
  "lltdapi.dll": [
    "LLTDCreateMapper",
    "LLTDCreateMapFromXML",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "LLTDCreateNode",
    "LLTDCreateEnumerator"
  ],
  "lltdres.dll": "No exports",
  "lltdsvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "lmhsvc.dll": [
    "ServiceMain"
  ],
  "loadperf.dll": [
    "UnloadPerfCounterTextStringsA",
    "RestorePerfRegistryFromFileW",
    "SetServiceAsTrustedW",
    "BackupPerfRegistryToFileW",
    "UnloadPerfCounterTextStringsW",
    "UpdatePerfNameFilesW",
    "LpAcquireInstallationMutex",
    "SetServiceAsTrustedA",
    "UpdatePerfNameFilesA",
    "LoadPerfCounterTextStringsW",
    "InstallPerfDllA",
    "LpReleaseInstallationMutex",
    "InstallPerfDllW",
    "LoadPerfCounterTextStringsA"
  ],
  "localsec.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "localspl.dll": [
    "SplCreateSpooler",
    "SplDeleteSpooler",
    "SplAddJob",
    "SplEnumPrinterData",
    "SplGetPrintProcessorDirectory",
    "SplGetDriverDir",
    "SplDeleteJobNamedProperty",
    "SplEnumPrintProcessorDatatypes",
    "SplEnumPrinterDataEx",
    "SplIsCompatibleDriver",
    "SplGetJob",
    "SplDriverEvent",
    "LclIsSessionZero",
    "SplAddPrintProcessor",
    "SplGetJobNamedPropertyValue",
    "LocalReadPrinter",
    "SplIsDriverInstalled",
    "SplAddPort",
    "SplCreatePrinterIC",
    "GetPrintProcessorCapabilities",
    "SplDeletePrinterKey",
    "SplAddForm",
    "SplCopyFileEvent",
    "SplAddCSRPrinter",
    "SplEndPagePrinter",
    "SplGetLocalDevMode",
    "SplEnumPorts",
    "SplEnumMonitors",
    "SplDeletePrinterIC",
    "SplEndDocPrinter",
    "OpenPrintProcessor",
    "SplCopyNumberOfFiles",
    "EnumPrintProcessorDatatypesW",
    "SplLoadLibraryTheCopyFileModule",
    "LocalAddForm",
    "SplAddPrinter",
    "SplGetPrintClassObject",
    "SplSetPrinterExtraEx",
    "SplAddMonitor",
    "SplSetCSRPrinterDevnode",
    "SplScheduleJob",
    "SplDeletePrinterDataEx",
    "SplIsLocalDriverAvailable",
    "SplGetForm",
    "SplSetJobError",
    "SplDoesCSRPrinterDevnodeExist",
    "SplGetPrinterDriverDirectory",
    "SplSetDriverUpdateStatus",
    "SplXcvData",
    "SplGetPrintClassObject_4CSR",
    "LocalEnumForms",
    "SplGetPrinter",
    "SplAddPrinterDriverEx",
    "InitializePrintProvidor",
    "ControlPrintProcessor",
    "SplSetJobNamedProperty",
    "SplDeletePrinterData",
    "SplDeleteMonitor",
    "LocalSetForm",
    "SplGetPrinterExtraEx",
    "SplEnumPrintProcessors",
    "SplGetPrintProcCacheData",
    "SplStartPagePrinter",
    "SplEnumPrinters",
    "SplDeletePrintProcCacheData",
    "SplDeletePrinter",
    "InitializePrintMonitor2",
    "SplReportJobProcessingProgress",
    "SplDeleteForm",
    "LocalDeleteForm",
    "SplGetPrinterDataEx",
    "SplWritePrinter",
    "SplNotifyServerStatus",
    "SplEnumForms",
    "SplAddPortEx",
    "SplGetPrinterDriverEx",
    "SplStartDocPrinter",
    "ClosePrintProcessor",
    "SplGetPrinterDriver",
    "PrintDocumentOnPrintProcessor",
    "SplEnumJobNamedProperties",
    "SplEnumPrintProcCacheData",
    "SplReenumeratePorts",
    "SplGetDriverUpdateStatus",
    "LclPromptUIPerSessionUser",
    "SplSetPrintProcCacheData",
    "SplOpenPrinter",
    "SplCloseSpooler",
    "SplEnumPrinterKey",
    "SplDeletePrinterDriverEx",
    "SplSetJob",
    "SplSetJobExtra",
    "SplDeletePort",
    "SplDeletePrinterWithJobs",
    "SplSetPrinterData",
    "SplGetJobExtra",
    "SplIsValidUserPropertyBag",
    "SplMonitorIsInstalled",
    "SplGetPrinterExtra",
    "DllMain",
    "SplEnumPrinterDrivers",
    "SplAbortPrinter",
    "SplSetForm",
    "SplPlayGdiScriptOnPrinterIC",
    "SplSetPrinter",
    "SplSetPrinterDataEx",
    "SplClosePrinter",
    "SplDeletePrintProcessor",
    "SplConfigChange",
    "SplEnumJobs",
    "SplResetPrinter",
    "SplSetPrinterExtra",
    "SplGetUserPropertyBag",
    "SplGetPrinterData"
  ],
  "localui.dll": [
    "InitializePrintMonitorUI"
  ],
  "loghours.dll": [
    "DialinHoursDialogEx",
    "DirSyncScheduleDialog",
    "DialinHoursDialog",
    "LogonScheduleDialog",
    "ConnectionScheduleDialog",
    "LogonScheduleDialogEx",
    "DirSyncScheduleDialogEx",
    "ConnectionScheduleDialogEx",
    "ReplicationScheduleDialogEx",
    "ReplicationScheduleDialog"
  ],
  "logoncli.dll": [
    "AuthzrExtInitializeContextFromSid",
    "DsGetDcOpenW",
    "I_RpcExtInitializeExtensionPoint",
    "DsGetSiteNameA",
    "I_NetDatabaseRedo",
    "I_NetChainSetClientAttributes2",
    "NlBindingSetAuthInfo",
    "I_NetlogonComputeClientSignature",
    "I_NetLogonSamLogon",
    "I_NetServerPasswordSet",
    "DsGetForestTrustInformationW",
    "I_NetServerPasswordGet",
    "DsGetDcNameW",
    "AuthzrExtAccessCheck",
    "NetRemoveServiceAccount",
    "NlBindingAddServerToCache",
    "I_NetLogonSamLogonEx",
    "NetAddServiceAccount",
    "NetLogonSetServiceBits",
    "I_NetServerAuthenticate3",
    "I_NetlogonGetTrustRid",
    "AuthzrExtFreeResourceManager",
    "AuthzrExtInitializeRemoteResourceManager",
    "DsGetDcSiteCoverageW",
    "NlSetDsIsCloningPDC",
    "I_NetLogonUasLogon",
    "AuthzrExtModifyClaims",
    "DsMergeForestTrustInformationW",
    "I_DsUpdateReadOnlyServerDnsRecords",
    "DsAddressToSiteNamesW",
    "I_NetGetDCList",
    "NetIsServiceAccount",
    "DsDeregisterDnsHostRecordsW",
    "DsGetDcNameWithAccountW",
    "AuthzrExtFreeContext",
    "I_NetServerAuthenticate",
    "I_NetLogonSamLogonWithFlags",
    "I_NetDatabaseSync2",
    "I_NetDatabaseSync",
    "NlBindingRemoveServerFromCache",
    "I_NetServerGetTrustInfo",
    "I_NetServerAuthenticate2",
    "I_NetLogonSendToSam",
    "DsEnumerateDomainTrustsW",
    "NetGetAnyDCName",
    "NetEnumerateTrustedDomains",
    "I_NetServerTrustPasswordsGet",
    "NetEnumerateServiceAccounts",
    "DsAddressToSiteNamesExW",
    "DsDeregisterDnsHostRecordsA",
    "I_NetAccountDeltas",
    "DsEnumerateDomainTrustsA",
    "DsValidateSubnetNameW",
    "I_NetLogonGetDomainInfo",
    "I_NetLogonControl",
    "I_NetLogonControl2",
    "I_NetlogonComputeServerDigest",
    "DsGetDcNextW",
    "I_NetLogonUasLogoff",
    "I_NetChainSetClientAttributes",
    "DsAddressToSiteNamesExA",
    "DsGetSiteNameW",
    "DsAddressToSiteNamesA",
    "I_NetServerPasswordSet2",
    "AuthzrExtInitializeCompoundContext",
    "DsGetDcOpenA",
    "AuthzrExtGetInformationFromContext",
    "NetGetDCName",
    "DsGetDcNextA",
    "I_NetDatabaseDeltas",
    "I_NetServerReqChallenge",
    "I_NetGetForestTrustInformation",
    "I_NetLogonGetCapabilities",
    "I_NetAccountSync",
    "NetQueryServiceAccount",
    "DsGetDcNameA",
    "I_NetlogonComputeClientDigest",
    "DsGetDcNameWithAccountA",
    "DsGetDcCloseW",
    "I_NetlogonComputeServerSignature",
    "NetLogonGetTimeServiceParentDomain",
    "DsValidateSubnetNameA",
    "DsGetDcSiteCoverageA",
    "I_NetLogonSamLogoff"
  ],
  "lpk.dll": [
    "LpkInitialize",
    "LpkUseGDIWidthCache",
    "LpkEditControl",
    "ftsWordBreak",
    "LpkPSMTextOut",
    "LpkGetCharacterPlacement",
    "LpkExtTextOut",
    "LpkTabbedTextOut",
    "LpkDrawTextEx",
    "LpkGetTextExtentExPoint"
  ],
  "lpksetupproxyserv.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "lsasrv.dll": [
    "LsarQueryInformationPolicy",
    "LsarStorePrivateData",
    "LsaINotifyPasswordChanged",
    "LsapDbExpMakeCacheValid",
    "LsapDbMakeUnicodeAttribute",
    "LsarSetInformationPolicy",
    "LsaIUnregisterLogonSessionCallback",
    "LsaIAdjustTokenObjectIntegrity",
    "LsapFreeString",
    "LsapDbVerifyInfoSetTrustedDomain",
    "LsaIClearOldSyskey",
    "LsapDbGetSecretType",
    "LsapAdtAuditingEnabledHint",
    "LsaIIsDomainWithinForest",
    "LsarRetrievePrivateData",
    "LsapGetCapeNamesForCap",
    "LsaIReferenceCredHandle",
    "LsaIFree_LSAPR_PRIVILEGE_ENUM_BUFFER",
    "LsaIInitializeNetlogonFuncPtrs",
    "LsaISafeMode",
    "LsaICallPackageEx",
    "LsaIGetSupplementalTokenInfo",
    "LsaIUnregisterAllPolicyChangeNotificationCallback",
    "LsapCrServerGetSessionKeySafe",
    "LsapDbApplyTransaction",
    "LsapDbMakeSidAttribute",
    "LsapDbEnumerateSids",
    "LsaINotifyGCStatusChange",
    "LsaISetClientDnsHostName",
    "LsapDbInitializeAttribute",
    "LsapDbVerifyInfoQueryTrustedDomain",
    "LsapDbExpIsLockedTrustedDomainList",
    "LsaIUpdateKerbMaxTokenSize",
    "LsaIAuditInitializeParametersAndWriteEvent",
    "LsaIFree_LSAPR_TRANSLATED_NAMES",
    "LsaIIsTrustedDomainsEnabled",
    "LsapDsInitializeDsStateInfo",
    "LsaISamIndicatedDsStarted",
    "LsapInitLsa",
    "LsaIQueryUpnSuffixes",
    "LsaISetUserFlags",
    "LsapAllocatePrivateHeap",
    "LsapCloseHandle",
    "LsaIAllocateHeapZero",
    "LsapDbExpAcquireWriteLockTrustedDomainList",
    "LsaIEfsAcceptSmartcardCredentials",
    "LsapDuplicateSid",
    "LsaIFree_LSAPR_ACCOUNT_ENUM_BUFFER",
    "LsaIFree_LSAPR_POLICY_DOMAIN_INFORMATION",
    "LsaIFreeForestTrustInfo",
    "LsaINotifyNewPassword",
    "LsapCrServerGetSessionKey",
    "LsarCreateSecret",
    "LsapRtlValidateControllerTrustedDomain",
    "LsapTraceEventWithData",
    "_fgu__LSAPR_TRUSTED_DOMAIN_INFO",
    "LsapSidListSize",
    "LsarQueryDomainInformationPolicy",
    "LsaICryptProtectDataEx",
    "LsaIWriteAuditEvent",
    "QueryLsaInterface",
    "LsaIFree_LSAP_SITE_INFO",
    "LsapOpenSam",
    "LsapAuOpenSam",
    "LsaIFree_LSAPR_UNICODE_STRING_BUFFER",
    "LsapDbReferenceObject",
    "LsarQueryTrustedDomainInfoByName",
    "LsapDbOpenObject",
    "LsaISetLogonInfo",
    "LsaIRegisterNotification",
    "LsaIFree_LSAPR_PRIVILEGE_SET",
    "LsapDbCloseHandle",
    "LsapGetWellKnownSid",
    "LsapDbMakeGuidAttribute",
    "LsaICryptUnprotectData",
    "LsapRpcCopySid",
    "LsapDbReleaseLockEx",
    "LsaITransformAuthorizationData",
    "LsapGetPolicyHandle",
    "LsapDbQueryInformationPolicy",
    "LsaICallPackage",
    "LsaIGetLogonGuid",
    "LsarDeleteObject",
    "LsaIRegisterLogonSessionCallback",
    "LsapQueryClientInfo",
    "LsaIAuditNotifyPackageLoad",
    "LsaIAuditLogonUsingExplicitCreds",
    "LsapAuditFailed",
    "LsarSetSecret",
    "_fgs__LSAPR_TRUSTED_ENUM_BUFFER",
    "LsaIGetForestTrustInformation",
    "LsapAdtInitParametersArray",
    "LsaICryptProtectData",
    "LsaDbLookupSidChainRequest",
    "LsapDbExpMakeCacheBuilding",
    "LsapGetAccountDomainHandle",
    "LsapInitializeLsaDb",
    "LsaIEqualSupplementalTokenInfo",
    "LsaIFreeSupplementalTokenInfo",
    "LsaIModifyPerformanceCounter",
    "LsapAllocateLsaHeap",
    "LsapDbVerifyHandle",
    "LsaIAdtAuditingEnabledBySubCategory",
    "LsaIFree_LSAPR_TRANSLATED_SIDS",
    "LsaISetTokenDacl",
    "LsapCheckBootMode",
    "LsapDbLookupGetDomainInfo",
    "LsaIAuditPasswordAccessEvent",
    "LsapGetLookupRestrictIsolatedNameLevel",
    "LsaINoMoreWin2KDomain",
    "LsaIForestTrustFindMatch",
    "LsapDsUnitializeDsStateInfo",
    "LsaIFreeHeap",
    "LsapFreePrivateHeap",
    "LsapDbCopyUnicodeAttributeNoAlloc",
    "LsarSetTrustedDomainInfoByName",
    "LsapGetLogonSessionAccountInfoEx",
    "LsaIDereferenceCredHandle",
    "LsaIOpenPolicyTrusted",
    "LsaIChangeSecretCipherKey",
    "LsaIGetCallInfo",
    "LsapDbDeleteAttributesObject",
    "LsapDomainRenameHandlerForLogonSessions",
    "LsaIQuerySiteInfo",
    "LsapTraceEvent",
    "LsaIEqualLogonProcessName",
    "LsapFreeLsaHeap",
    "LsapDbExpMakeCacheInvalid",
    "LsarClose",
    "LsapGetGlobalRestrictAnonymous",
    "LsaIIsDsPaused",
    "LsapDbFreeAttributes",
    "LsaICallPackagePassthrough",
    "LsaIFree_LSAPR_POLICY_INFORMATION",
    "LsapDbExpAcquireReadLockTrustedDomainList",
    "LsaIFree_LSAPR_TRUSTED_DOMAIN_INFO",
    "LsaIVerifyCachability",
    "LsapDbDereferenceHandle",
    "LsarOpenSecret",
    "LsaIQuerySubnetInfo",
    "LsaILookupWellKnownName",
    "LsapAdtAuditingEnabledBySubCategory",
    "LsaIUpdateLogonSession",
    "LsaICancelNotification",
    "LsapCompareDomainNames",
    "LsapDbExpReleaseLockTrustedDomainList",
    "LsapDbLookupNamesInPrimaryDomain",
    "LsapDssetupInitializeGetPrimaryDomainInformationOpState",
    "LsapIsSamOpened",
    "LsapRemoveTrailingDot",
    "LsapRpcCopyUnicodeString",
    "LsapDbCopyUnicodeAttribute",
    "LsapIsBuiltinDomain",
    "LsaIIsLocalHost",
    "LsapDbLookupMergeDisjointReferencedDomains",
    "LsaIAllocateHeap",
    "LsaIFilterSids",
    "LsaIAdtAuditingEnabledByCategory",
    "LsaIFree_LSAP_SITENAME_INFO",
    "LsapDbUpdateCountCompUnmappedNames",
    "LsaISetupWasRun",
    "LsaIFree_LSAI_PRIVATE_DATA",
    "LsapDbExpConvertWriteLockTrustedDomainListToShared",
    "LsaIAuditAccountLogonEx",
    "LsaIFree_LSA_FOREST_TRUST_INFORMATION",
    "LsaINoConnectedUserPolicy",
    "_fgs__LSAPR_TRUST_INFORMATION",
    "LsapDbLookupNameChainRequest",
    "LsapGetHourlyLogLevel",
    "LsaIKerberosRegisterTrustNotification",
    "LsaIRegisterPolicyChangeNotificationCallback",
    "LsaIFree_LSAPR_REFERENCED_DOMAIN_LIST",
    "LsapDbLookupSidsInPrimaryDomain",
    "LsaIAuditAccountLogon",
    "LsaIAuditSamEvent",
    "LsaIFree_LSAPR_TRUST_INFORMATION",
    "LsaIQueryInformationPolicyTrusted",
    "LsaIHealthCheck",
    "LsaISetLogonGuidInLogonSession",
    "LsarOpenPolicy",
    "LsapDbDereferenceObject",
    "LsapDbExpConvertReadLockTrustedDomainListToExclusive",
    "LsarQuerySecret",
    "LsaISetNewSyskey",
    "LsaIImpersonateClient",
    "LsapDbLookupCreateListReferencedDomains",
    "LsaIGetNbAndDnsDomainNames",
    "LsaIFilterNamespace",
    "LsapTruncateUnicodeString",
    "LsaINotifyNetlogonParametersChangeW",
    "LsaIDsNotifiedObjectChange",
    "LsaIFree_LSAP_SUBNET_INFO",
    "LsaIFree_LSAPR_TRUSTED_ENUM_BUFFER",
    "LsapDbIsStatusConnectionFailure",
    "LsaINotifyChangeNotification",
    "LsapDbFreeTrustedDomainsEx",
    "LsapDbExpIsCacheBuilding",
    "LsaIQueryPackageAttrInLogonSession",
    "LsaIFreeReturnBuffer",
    "LsaIUpdateForestTrustInformation",
    "LsaIReplicateClientObject",
    "LsapSetErrorInfo",
    "LsaIFree_LSAPR_UNICODE_STRING",
    "_fgs__LSAPR_TRUSTED_ENUM_BUFFER_EX",
    "LsapDuplicateString",
    "LsapDbCloseObject",
    "LsapDbWriteAttributesObject",
    "LsaIFree_LSA_FOREST_TRUST_COLLISION_INFORMATION",
    "LsapDbAcquireLockEx",
    "LsapDbSlowEnumerateTrustedDomains",
    "InitializeLsaExtension",
    "LsaIIsLastInteractiveLogonInfoEnabled",
    "LsaIGetNameFromLuid",
    "LsaIRetrieveCurrentUserSid",
    "LsapAdtWriteLog",
    "LsapDbBuildObjectCaches",
    "LsaICryptUnprotectDataEx",
    "LsapBuildPrivilegeAuditString",
    "LsapDbSecretIsMachineAcc",
    "LsapRtlValidateControllerTrustedDomainByHandle",
    "LsarLookupSids",
    "LsapDbEnumerateTrustedDomainsEx",
    "LsapDbReadAttribute",
    "LsaIGetNego2Package",
    "LsaIAuditKdcEvent",
    "LsaIAuditKerberosLogon",
    "LsaIFree_LSAI_SECRET_ENUM_BUFFER",
    "LsapAdtAuditingEnabledByLogonId",
    "LsapDbCreateObject",
    "LsapDbExpIsCacheValid",
    "LsaISetPackageAttrInLogonSession",
    "LsaIAuditLogonEx",
    "LsaIFree_LSAPR_CR_CIPHER_VALUE",
    "LsapDbReadAttributesObject",
    "LsaIUnregisterPolicyChangeNotificationCallback",
    "LsapDbSidToLogicalNameObject",
    "LsapDbLookupAddListReferencedDomains",
    "LsarEnumerateTrustedDomainsEx",
    "LsaIFree_LSAPR_TRUSTED_ENUM_BUFFER_EX",
    "LsapDbGetDbObjectTypeName",
    "LsaIFree_LSAP_UPN_SUFFIXES",
    "LsapDbDeleteObject",
    "LsapDbLookupListReferencedDomains",
    "LsaIIsSuppressChannelBindingInfo",
    "LsaIAuditReplay",
    "LsapDbGetDbPolicyHandle",
    "LsaIAddNamesToLogonSession",
    "LsaIQueryForestTrustInfo",
    "LsaIGetSiteName",
    "LsaIValidateTargetInfo",
    "ServiceInit",
    "LsaIFree_LSAPR_SR_SECURITY_DESCRIPTOR",
    "LsaISetSupplementalTokenInfo"
  ],
  "lsm.dll": [
    "ServiceMain"
  ],
  "lsmproxy.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "luainstall.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "lz32.dll": [
    "LZCreateFileW",
    "LZCloseFile",
    "CopyLZFile",
    "LZCopy",
    "GetExpandedNameW",
    "LZClose",
    "LZRead",
    "LZStart",
    "LZDone",
    "LZOpenFileA",
    "LZOpenFileW",
    "LZSeek",
    "GetExpandedNameA",
    "LZInit"
  ],
  "MCEWMDRMNDBootstrap.dll": [
    "CreateMCENDBootstrap",
    "StartupMCENDBootstrap",
    "ShutdownMCENDBootstrap"
  ],
  "MFCaptureEngine.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "MFCreateCaptureEngine"
  ],
  "MFMediaEngine.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "MFPlay.dll": [
    "MFPCreateMediaPlayer",
    "MFPCreateMediaPlayerEx",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "MFWMAAEC.DLL": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "MMDevAPI.dll": [
    "ActivateAudioInterfaceAsync",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "MP3DMOD.DLL": [
    "CreateInstance",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "MP43DECD.DLL": [
    "CreateInstance",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "MP4SDECD.DLL": [
    "CreateInstance",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "MPG4DECD.DLL": [
    "CreateInstance",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "MPSSVC.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "MSAC3ENC.DLL": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "MSAudDecMFT.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "MSMPEG2ENC.DLL": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "MSVidCtl.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "MSVideoDSP.dll": [
    "DllGetActivationFactory",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "MUILanguageCleanup.dll": [
    "OnUILanguageAdd",
    "OnMachineUILanguageClear",
    "OnMachineUILanguageInit",
    "OnUILanguageRemove",
    "OnMachineUILanguageSwitch"
  ],
  "Magnification.dll": [
    "MagSetWindowSource",
    "MagSetWindowTransform",
    "MagSetInputTransform",
    "MagSetFullscreenTransform",
    "MagGetColorEffect",
    "MagSetWindowFilterList",
    "MagSetFullscreenColorEffect",
    "MagSetImageScalingCallback",
    "MagGetWindowSource",
    "MagGetFullscreenTransform",
    "MagSetColorEffect",
    "MagGetFullscreenColorEffect",
    "MagGetWindowFilterList",
    "MagInitialize",
    "MagGetWindowTransform",
    "MagShowSystemCursor",
    "MagGetImageScalingCallback",
    "MagGetInputTransform",
    "MagUninitialize"
  ],
  "MaintenanceUI.dll": [
    "StopMaintenance",
    "DllRegisterServer",
    "StartMaintenance",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "MbaeApi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "MbaeApiPublic.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "MbaeXmlParser.dll": [
    "const MbaeXmlParser::`vftable'",
    "public: __thiscall MbaeXmlParser::MbaeXmlParser(class MbaeXmlParser const &)",
    "public: static long __stdcall MbaeXmlParser::Create(class MbaeXmlParser * *)",
    "public: class MbaeXmlParser & __thiscall MbaeXmlParser::operator=(class MbaeXmlParser const &)",
    "public: __thiscall MbaeXmlParser::MbaeXmlParser(void)"
  ],
  "McxDriv.dll": [
    "Mcx2Install",
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "MemoryDiagnostic.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "MrmCoreR.dll": [
    "DllGetActivationFactory",
    "ResourceManagerQueueGetString",
    "ResourceManagerQueueIsResourceReference",
    "ResourceManagerQueueGetStringDirect",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "MrmIndexer.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "MsCtfMonitor.dll": [
    "DoMsCtfMonitor",
    "UninitLocalMsCtfMonitor",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "InitLocalMsCtfMonitor",
    "DllUnregisterServer"
  ],
  "MsRdpWebAccess.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "MsSpellCheckingFacility.dll": [
    "DllGetActivationFactory",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "MsiCofire.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "DllMain",
    "WdiHandleInstance"
  ],
  "mapi32.dll": [
    "HrSetOmiProvidersFlagsInvalid@4",
    "UlPropSize@4",
    "BMAPIGetAddress",
    "MAPIOpenLocalFormContainer",
    "FtgRegisterIdleRoutine@20",
    "MAPISendDocuments",
    "MAPIResolveName",
    "cmc_act_on",
    "MNLS_MultiByteToWideChar@24",
    "MAPIUninitialize@0",
    "MNLS_lstrlenW@4",
    "HrGetOmiProvidersFlags@8",
    "HrSetOmiProvidersFlagsInvalid",
    "FtMulDwDw@8",
    "InstallFilterHook@4",
    "cmc_logoff",
    "BMAPIDetails",
    "BMAPIGetReadMail",
    "FPropCompareProp@12",
    "MAPIReadMail",
    "ScBinFromHexBounded@12",
    "FixMAPI",
    "DeinitMapiUtil@0",
    "SwapPlong@8",
    "FBadEntryList@4",
    "MAPIAllocateMore@12",
    "MAPIAdminProfiles",
    "FBadColumnSet@4",
    "MAPIInitialize@4",
    "HrAddColumnsEx@20",
    "ScCountProps@12",
    "MNLS_lstrcpyW@8",
    "MAPIOpenFormMgr",
    "OpenTnefStreamEx@32",
    "OpenIMsgOnIStg@44",
    "FEqualNames@8",
    "WrapCompressedRTFStream@12",
    "MAPIDeinitIdle@0",
    "MAPIOpenLocalFormContainer@4",
    "MAPIOpenFormMgr@8",
    "ScLocalPathFromUNC@12",
    "DllGetClassObject",
    "MAPIFindNext",
    "ScRelocProps@20",
    "MAPIInitIdle@4",
    "ScMAPIXFromCMC",
    "MNLS_WideCharToMultiByte@32",
    "EncodeID@12",
    "GetOutlookVersion@0",
    "MAPIDeleteMail",
    "WrapProgress@20",
    "BMAPISaveMail",
    "FtAddFt@16",
    "MAPIAllocateBuffer",
    "SzFindLastCh@8",
    "BMAPIAddress",
    "FBadSortOrderSet@4",
    "FtSubFt@16",
    "SzFindSz@8",
    "ScCopyNotifications@16",
    "ScCreateConversationIndex@16",
    "OpenStreamOnFile",
    "BuildDisplayTable@40",
    "FBadProp@4",
    "cmc_query_configuration",
    "FPropExists@8",
    "PpropFindProp@12",
    "ScDupPropset@16",
    "CreateTable@36",
    "cmc_free",
    "FBadRglpszA@8",
    "WrapStoreEntryID@24",
    "HrComposeMsgID@24",
    "HrAllocAdviseSink@12",
    "FGetComponentPath",
    "FBinFromHex@8",
    "LPropCompareProp@8",
    "ScRelocNotifications@20",
    "UNKOBJ_ScAllocateMore@16",
    "RTFSync",
    "SzFindCh@8",
    "FBadPropTag@4",
    "FGetComponentPath@20",
    "MAPIGetDefaultMalloc@0",
    "FPropContainsProp@12",
    "DeregisterIdleRoutine@4",
    "cmc_read",
    "GetTnefStreamCodepage@12",
    "MAPIFreeBuffer",
    "FBadRow@4",
    "HrQueryAllRows@24",
    "MAPIUninitialize",
    "ScInitMapiUtil@4",
    "cmc_send_documents",
    "WrapCompressedRTFStream",
    "MAPIInitialize",
    "CloseIMsgSession@4",
    "__CPPValidateParameters@8",
    "UNKOBJ_ScAllocate@12",
    "FtNegFt@8",
    "MNLS_IsBadStringPtrW@8",
    "HrGetOmiProvidersFlags",
    "HexFromBin@12",
    "HrDecomposeEID@28",
    "FBadRglpNameID@8",
    "HrGetOneProp@12",
    "MAPIAdminProfiles@8",
    "UlRelease@4",
    "MAPIAllocateBuffer@8",
    "UlAddRef@4",
    "MAPISaveMail",
    "MAPILogonEx@20",
    "UlFromSzHex@4",
    "MNLS_CompareStringW@24",
    "LAUNCHWIZARD",
    "BMAPIResolveName",
    "UNKOBJ_ScCOReallocate@12",
    "HrAddColumns@16",
    "UNKOBJ_Free@8",
    "LpValFindProp@12",
    "MAPILogon",
    "MAPIFreeBuffer@4",
    "HrValidateIPMSubtree@20",
    "HrSetOneProp@8",
    "MNLS_lstrcmpW@8",
    "cmc_look_up",
    "CreateIProp@24",
    "MAPIDetails",
    "GetTnefStreamCodepage",
    "UNKOBJ_ScSzFromIdsAlloc@20",
    "MAPILogonEx",
    "HrSzFromEntryID@12",
    "HrDecomposeMsgID@24",
    "FtAdcFt@20",
    "UNKOBJ_ScCOAllocate@12",
    "IsBadBoundedStringPtr@8",
    "FDecodeID@12",
    "UFromSz@4",
    "cmc_send",
    "FreePadrlist@4",
    "ScGenerateMuid@4",
    "MAPIAddress",
    "cmc_list",
    "FBadRglpszW@8",
    "OpenTnefStream@28",
    "cmc_logon",
    "BMAPIFindNext",
    "UNKOBJ_FreeRows@8",
    "FtDivFtBogus@20",
    "MAPISendMail",
    "MAPISendMailW",
    "__ValidateParameters@8",
    "FBadRestriction@4",
    "PRProviderInit",
    "ChangeIdleRoutine@28",
    "FixMAPI@0",
    "MAPIAllocateMore",
    "OpenTnefStream",
    "PropCopyMore@16",
    "OpenTnefStreamEx",
    "FreeProws@4",
    "ScUNCFromLocalPath@12",
    "GetOutlookVersion",
    "UNKOBJ_COFree@8",
    "FBadRowSet@4",
    "DllCanUnloadNow",
    "HrIStorageFromStream@16",
    "BMAPISendMail",
    "LaunchWizard@20",
    "ScCopyProps@16",
    "ScMAPIXFromSMAPI",
    "SwapPword@8",
    "HrValidateParameters@8",
    "FtMulDw@12",
    "HrComposeEID@28",
    "OpenStreamOnFile@24",
    "MAPILogoff",
    "CchOfEncoding@4",
    "RTFSync@12",
    "GetAttribIMsgOnIStg@12",
    "MapStorageSCode@4",
    "CbOfEncoded@4",
    "ScCountNotifications@12",
    "HrDispatchNotifications@4",
    "HrEntryIDFromSz@12",
    "HrThisThreadAdviseSink@8",
    "SetAttribIMsgOnIStg@16",
    "BMAPIReadMail",
    "OpenIMsgSession@12",
    "EnableIdleRoutine@8"
  ],
  "mapistub.dll": [
    "HrSetOmiProvidersFlagsInvalid@4",
    "UlPropSize@4",
    "BMAPIGetAddress",
    "MAPIOpenLocalFormContainer",
    "FtgRegisterIdleRoutine@20",
    "MAPISendDocuments",
    "MAPIResolveName",
    "cmc_act_on",
    "MNLS_MultiByteToWideChar@24",
    "MAPIUninitialize@0",
    "MNLS_lstrlenW@4",
    "HrGetOmiProvidersFlags@8",
    "HrSetOmiProvidersFlagsInvalid",
    "FtMulDwDw@8",
    "InstallFilterHook@4",
    "cmc_logoff",
    "BMAPIDetails",
    "BMAPIGetReadMail",
    "FPropCompareProp@12",
    "MAPIReadMail",
    "ScBinFromHexBounded@12",
    "FixMAPI",
    "DeinitMapiUtil@0",
    "SwapPlong@8",
    "FBadEntryList@4",
    "MAPIAllocateMore@12",
    "MAPIAdminProfiles",
    "FBadColumnSet@4",
    "MAPIInitialize@4",
    "HrAddColumnsEx@20",
    "ScCountProps@12",
    "MNLS_lstrcpyW@8",
    "MAPIOpenFormMgr",
    "OpenTnefStreamEx@32",
    "OpenIMsgOnIStg@44",
    "FEqualNames@8",
    "WrapCompressedRTFStream@12",
    "MAPIDeinitIdle@0",
    "MAPIOpenLocalFormContainer@4",
    "MAPIOpenFormMgr@8",
    "ScLocalPathFromUNC@12",
    "DllGetClassObject",
    "MAPIFindNext",
    "ScRelocProps@20",
    "MAPIInitIdle@4",
    "ScMAPIXFromCMC",
    "MNLS_WideCharToMultiByte@32",
    "EncodeID@12",
    "GetOutlookVersion@0",
    "MAPIDeleteMail",
    "WrapProgress@20",
    "BMAPISaveMail",
    "FtAddFt@16",
    "MAPIAllocateBuffer",
    "SzFindLastCh@8",
    "BMAPIAddress",
    "FBadSortOrderSet@4",
    "FtSubFt@16",
    "SzFindSz@8",
    "ScCopyNotifications@16",
    "ScCreateConversationIndex@16",
    "OpenStreamOnFile",
    "BuildDisplayTable@40",
    "FBadProp@4",
    "cmc_query_configuration",
    "FPropExists@8",
    "PpropFindProp@12",
    "ScDupPropset@16",
    "CreateTable@36",
    "cmc_free",
    "FBadRglpszA@8",
    "WrapStoreEntryID@24",
    "HrComposeMsgID@24",
    "HrAllocAdviseSink@12",
    "FGetComponentPath",
    "FBinFromHex@8",
    "LPropCompareProp@8",
    "ScRelocNotifications@20",
    "UNKOBJ_ScAllocateMore@16",
    "RTFSync",
    "SzFindCh@8",
    "FBadPropTag@4",
    "FGetComponentPath@20",
    "MAPIGetDefaultMalloc@0",
    "FPropContainsProp@12",
    "DeregisterIdleRoutine@4",
    "cmc_read",
    "GetTnefStreamCodepage@12",
    "MAPIFreeBuffer",
    "FBadRow@4",
    "HrQueryAllRows@24",
    "MAPIUninitialize",
    "ScInitMapiUtil@4",
    "cmc_send_documents",
    "WrapCompressedRTFStream",
    "MAPIInitialize",
    "CloseIMsgSession@4",
    "__CPPValidateParameters@8",
    "UNKOBJ_ScAllocate@12",
    "FtNegFt@8",
    "MNLS_IsBadStringPtrW@8",
    "HrGetOmiProvidersFlags",
    "HexFromBin@12",
    "HrDecomposeEID@28",
    "FBadRglpNameID@8",
    "HrGetOneProp@12",
    "MAPIAdminProfiles@8",
    "UlRelease@4",
    "MAPIAllocateBuffer@8",
    "UlAddRef@4",
    "MAPISaveMail",
    "MAPILogonEx@20",
    "UlFromSzHex@4",
    "MNLS_CompareStringW@24",
    "LAUNCHWIZARD",
    "BMAPIResolveName",
    "UNKOBJ_ScCOReallocate@12",
    "HrAddColumns@16",
    "UNKOBJ_Free@8",
    "LpValFindProp@12",
    "MAPILogon",
    "MAPIFreeBuffer@4",
    "HrValidateIPMSubtree@20",
    "HrSetOneProp@8",
    "MNLS_lstrcmpW@8",
    "cmc_look_up",
    "CreateIProp@24",
    "MAPIDetails",
    "GetTnefStreamCodepage",
    "UNKOBJ_ScSzFromIdsAlloc@20",
    "MAPILogonEx",
    "HrSzFromEntryID@12",
    "HrDecomposeMsgID@24",
    "FtAdcFt@20",
    "UNKOBJ_ScCOAllocate@12",
    "IsBadBoundedStringPtr@8",
    "FDecodeID@12",
    "UFromSz@4",
    "cmc_send",
    "FreePadrlist@4",
    "ScGenerateMuid@4",
    "MAPIAddress",
    "cmc_list",
    "FBadRglpszW@8",
    "OpenTnefStream@28",
    "cmc_logon",
    "BMAPIFindNext",
    "UNKOBJ_FreeRows@8",
    "FtDivFtBogus@20",
    "MAPISendMail",
    "MAPISendMailW",
    "__ValidateParameters@8",
    "FBadRestriction@4",
    "PRProviderInit",
    "ChangeIdleRoutine@28",
    "FixMAPI@0",
    "MAPIAllocateMore",
    "OpenTnefStream",
    "PropCopyMore@16",
    "OpenTnefStreamEx",
    "FreeProws@4",
    "ScUNCFromLocalPath@12",
    "GetOutlookVersion",
    "UNKOBJ_COFree@8",
    "FBadRowSet@4",
    "DllCanUnloadNow",
    "HrIStorageFromStream@16",
    "BMAPISendMail",
    "LaunchWizard@20",
    "ScCopyProps@16",
    "ScMAPIXFromSMAPI",
    "SwapPword@8",
    "HrValidateParameters@8",
    "FtMulDw@12",
    "HrComposeEID@28",
    "OpenStreamOnFile@24",
    "MAPILogoff",
    "CchOfEncoding@4",
    "RTFSync@12",
    "GetAttribIMsgOnIStg@12",
    "MapStorageSCode@4",
    "CbOfEncoded@4",
    "ScCountNotifications@12",
    "HrDispatchNotifications@4",
    "HrEntryIDFromSz@12",
    "HrThisThreadAdviseSink@8",
    "SetAttribIMsgOnIStg@16",
    "BMAPIReadMail",
    "OpenIMsgSession@12",
    "EnableIdleRoutine@8"
  ],
  "mbsmsapi.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "mbussdapi.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "mciavi32.dll": [
    "KeyboardHookProc",
    "DriverProc"
  ],
  "mcicda.dll": [
    "DriverProc"
  ],
  "mciqtz32.dll": [
    "DriverProc"
  ],
  "mciseq.dll": [
    "DriverProc"
  ],
  "mciwave.dll": [
    "DriverProc"
  ],
  "mcupdate_AuthenticAMD.dll": "No exports",
  "mcupdate_GenuineIntel.dll": "No exports",
  "mdminst.dll": [
    "ClassInstall32"
  ],
  "mf.dll": [
    "DllGetActivationFactory",
    "MFCreateSampleGrabberSinkActivate",
    "MFCreateASFProfileFromPresentationDescriptor",
    "MFCreateFMPEG4MediaSink",
    "MFCreateNetSchemePlugin",
    "MFCreateTranscodeTopology",
    "MFCreateTranscodeSinkActivate",
    "MFCreateSequencerSegmentOffset",
    "MFCreateASFMediaSinkActivate",
    "MFCreateASFMediaSink",
    "MFCreateDeviceSource",
    "MFCreateASFIndexerByteStream",
    "MFCreateDeviceSourceActivate",
    "MFCreateDrmNetNDSchemePlugin",
    "MFCreateMediaSession",
    "DllGetClassObject",
    "MFCreateASFStreamSelector",
    "ExtractPropVariant",
    "MFCreateASFSplitter",
    "MFTranscodeGetAudioOutputAvailableTypes",
    "MFCreateFileSchemePlugin",
    "MFCreateNSCByteStreamPlugin",
    "MFCreateSimpleTypeHandler",
    "AppendPropVariant",
    "MFCreateAggregateSource",
    "MFGetTopoNodeCurrentType",
    "MFCreatePMPHost",
    "MFCreateVideoRendererActivate",
    "MFCreateSampleCopierMFT",
    "MFCreateVideoRenderer",
    "MFCreatePMPServer",
    "MFCreateLPCMByteStreamPlugin",
    "MFCreateWMAEncoderActivate",
    "MFRequireProtectedEnvironment",
    "MFCreateASFMultiplexer",
    "MFCreateAudioRenderer",
    "MFCreateUrlmonSchemePlugin",
    "MFLoadSignedLibrary",
    "MFEnumDeviceSources",
    "MFCreateASFByteStreamPlugin",
    "MFCreateStandardQualityManager",
    "MFCreateAppSourceProxy",
    "MFGetLocalId",
    "MFCreateSequencerSource",
    "MFCreateASFProfile",
    "MFCreateSourceResolver",
    "CreateNamedPropertyStore",
    "MFCreateMPEG4MediaSink",
    "MFReadSequencerSegmentOffset",
    "MFGetSupportedMimeTypes",
    "MFCreateAC3MediaSink",
    "MFCreatePresentationClock",
    "MFCreateTopologyNode",
    "MFCreateCacheManager",
    "MFCreate3GPMediaSink",
    "MFCreateMP3MediaSink",
    "MFCreateCredentialCache",
    "MFCreatePresentationDescriptorFromASFProfile",
    "MFCreateWMVEncoderActivate",
    "MFCreateASFStreamingMediaSinkActivate",
    "MFCreateMuxSink",
    "MFCreatePMPMediaSession",
    "MFCreateTranscodeProfile",
    "MFCreateASFStreamingMediaSink",
    "MFRR_CreateActivate",
    "MFCreateRemoteDesktopPlugin",
    "MFCreateHttpSchemePlugin",
    "MFCreateTopoLoader",
    "MFCreateByteCacheFile",
    "MFCreateTranscodeTopologyFromByteStream",
    "MFCreateAudioRendererActivate",
    "MFCreateSequencerSourceRemoteStream",
    "MFCreateFileBlockMap",
    "MergePropertyStore",
    "MFCreateSoundEventSchemePlugin",
    "MFGetSystemId",
    "MFCreateProxyLocator",
    "MFShutdownObject",
    "ConvertPropVariant",
    "MFCreateADTSMediaSink",
    "DllCanUnloadNow",
    "MFGetService",
    "MFCreateTopology",
    "CopyPropertyStore",
    "MFCreateASFContentInfo",
    "MFCreateSAMIByteStreamPlugin",
    "MFCreateSecureHttpSchemePlugin",
    "MFGetMultipleServiceProviders",
    "MFCreateMediaProcessor",
    "MFCreateASFIndexer",
    "MFCreateMP3ByteStreamPlugin",
    "MFGetSupportedSchemes",
    "MFCreateProtectedEnvironmentAccess"
  ],
  "mf3216.dll": [
    "ConvertEmfToWmf",
    "Mf3216DllInitialize"
  ],
  "mfAACEnc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "mfasfsrcsnk.dll": [
    "MFCreateASFMediaSinkActivateFromByteStream",
    "MFCreateASFProfileFromPresentationDescriptor",
    "MFCreateASFProfile",
    "MFCreateASFMediaSinkActivateNoInit",
    "DllCanUnloadNow",
    "MFCreateASFMediaSinkActivate",
    "MFCreateASFStreamConfig",
    "MFCreateASFMediaSink",
    "MFCreateASFStreamingMediaSinkActivateNoInit",
    "MFCreatePresentationDescriptorFromASFProfile",
    "MFCreateASFIndexerByteStream",
    "MFCreateASFContentInfo",
    "MFCreateASFMultiplexer",
    "MFCreateASFStreamingMediaSinkActivate",
    "MFCreateASFStreamingMediaSink",
    "DllGetClassObject",
    "MFCreateASFStreamPrioritization",
    "MFCreateASFIndexer",
    "MFCreateASFMutex",
    "MFCreateASFStreamSelector",
    "MFCreateASFSplitter"
  ],
  "mfc40.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mfc40u.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mfc42.dll": [
    "public: static struct CRuntimeClass const CDataPathProperty::classCDataPathProperty",
    "public: static struct CRuntimeClass const CCachedDataPathProperty::classCCachedDataPathProperty",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mfc42u.dll": [
    "public: static struct CRuntimeClass const CDataPathProperty::classCDataPathProperty",
    "public: static struct CRuntimeClass const CCachedDataPathProperty::classCCachedDataPathProperty",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mfcore.dll": [
    "MFCreateSampleGrabberSinkActivate",
    "MFCreateFileSchemePlugin",
    "CreateNamedPropertyStore",
    "MFCreateSimpleTypeHandler",
    "DllRegisterServer",
    "MergePropertyStore",
    "MFCreateSoundEventSchemePlugin",
    "DllUnregisterServer",
    "MFReadSequencerSegmentOffset",
    "AppendPropVariant",
    "MFShutdownObject",
    "MFCreateAggregateSource",
    "MFCreateSequencerSegmentOffset",
    "MFGetTopoNodeCurrentType",
    "MFCreatePMPHost",
    "MFCreatePresentationClock",
    "ConvertPropVariant",
    "MFCreateSampleCopierMFT",
    "DllCanUnloadNow",
    "MFCreatePMPServer",
    "MFCreateTopologyNode",
    "MFCreateDeviceSource",
    "MFGetService",
    "MFCreateTopology",
    "CopyPropertyStore",
    "MFCreateWMAEncoderActivate",
    "MFCreateWMVEncoderActivate",
    "MFCreateDeviceSourceActivate",
    "MFRequireProtectedEnvironment",
    "MFCreatePMPMediaSession",
    "MFCreateAudioRenderer",
    "MFCreateMediaSession",
    "MFGetMultipleServiceProviders",
    "DllGetClassObject",
    "MFCreateMediaProcessor",
    "MFCreateTopoLoader",
    "MFEnumDeviceSources",
    "MFCreateStandardQualityManager",
    "ExtractPropVariant",
    "MFCreateAppSourceProxy",
    "MFCreateAudioRendererActivate",
    "MFCreateSequencerSource",
    "MFCreateSequencerSourceRemoteStream"
  ],
  "mfcsubs.dll": [
    "public: int __thiscall CString::LoadStringW(unsigned int)",
    "public: void __thiscall CMapStringToPtr::SetAt(unsigned short const *,void *)",
    "public: class CString const & __thiscall CString::operator+=(char)",
    "public: void __thiscall CStringArray::FreeExtra(void)",
    "public: void __thiscall CString::TrimLeft(void)",
    "public: unsigned short __thiscall CString::GetAt(int)const",
    "const CSyncObject::`vftable'",
    "public: class CString const & __thiscall CString::operator+=(unsigned short const *)",
    "bool __stdcall operator<=(class CString const &,class CString const &)",
    "public: __thiscall CString::CString(unsigned short,int)",
    "class CString __stdcall operator+(class CString const &,class CString const &)",
    "protected: void __thiscall CString::AllocCopy(class CString &,unsigned int,unsigned int,unsigned int)const",
    "public: virtual __thiscall CSyncObject::~CSyncObject(void)",
    "public: __thiscall CString::CString(unsigned char const *)",
    "public: void __thiscall CStringArray::SetSize(int,int)",
    "const CMapStringToPtr::`vftable'",
    "protected: void __thiscall CString::ConcatInPlace(int,unsigned short const *)",
    "protected: void __thiscall CString::FormatV(unsigned short const *,char *)",
    "public: void __thiscall CStringArray::RemoveAt(int,int)",
    "public: __thiscall CStringArray::CStringArray(void)",
    "public: void __cdecl CString::Format(unsigned int,...)",
    "protected: struct CMapStringToPtr::CAssoc * __thiscall CMapStringToPtr::NewAssoc(void)",
    "public: class CString __thiscall CString::Left(int)const",
    "public: int __thiscall CMapStringToPtr::Lookup(unsigned short const *,void * &)const",
    "public: void __thiscall CString::UnlockBuffer(void)",
    "public: int __thiscall CCriticalSection::Lock(void)",
    "public: __thiscall CString::CString(class CString const &)",
    "bool __stdcall operator!=(class CString const &,unsigned short const *)",
    "unsigned int __stdcall HashKey(struct _GUID const &)",
    "public: void __thiscall CStringArray::SetAt(int,unsigned short const *)",
    "public: virtual int __thiscall CSyncObject::Lock(unsigned long)",
    "public: virtual int __thiscall CCriticalSection::Unlock(void)",
    "bool __stdcall operator>(unsigned short const *,class CString const &)",
    "int __stdcall AfxExtractSubString(class CString &,unsigned short const *,int,unsigned short)",
    "bool __stdcall operator<(unsigned short const *,class CString const &)",
    "protected: struct CStringData * __thiscall CString::GetData(void)const",
    "protected: static int __stdcall CString::SafeStrlen(unsigned short const *)",
    "protected: void __thiscall CString::Init(void)",
    "bool __stdcall operator!=(class CString const &,class CString const &)",
    "bool __stdcall operator<=(class CString const &,unsigned short const *)",
    "public: void __thiscall CStringArray::Copy(class CStringArray const &)",
    "class CString __stdcall operator+(class CString const &,unsigned short const *)",
    "public: class CString * __thiscall CStringArray::GetData(void)",
    "public: unsigned int __thiscall CMapStringToPtr::HashKey(unsigned short const *)const",
    "public: int __thiscall CMapStringToPtr::GetCount(void)const",
    "public: __thiscall CCriticalSection::operator struct _RTL_CRITICAL_SECTION *(void)",
    "public: void __thiscall CStringArray::InsertAt(int,class CStringArray *)",
    "public: static struct CPlex * __stdcall CPlex::Create(struct CPlex * &,unsigned int,unsigned int)",
    "public: int __thiscall CString::Find(unsigned short const *)const",
    "unsigned int __stdcall HashKey(unsigned short const *)",
    "public: class CString const & __thiscall CString::operator+=(unsigned short)",
    "bool __stdcall operator>=(class CString const &,class CString const &)",
    "public: __thiscall CString::CString(unsigned short const *)",
    "public: int __thiscall CStringArray::GetSize(void)const",
    "public: virtual __thiscall CMapStringToPtr::~CMapStringToPtr(void)",
    "public: __thiscall CString::CString(unsigned short const *,int)",
    "class CString __stdcall operator+(unsigned short const *,class CString const &)",
    "bool __stdcall operator>(class CString const &,class CString const &)",
    "bool __stdcall operator==(unsigned short const *,class CString const &)",
    "public: class CString const & __thiscall CString::operator=(char)",
    "public: unsigned short * __thiscall CString::GetBufferSetLength(int)",
    "protected: void __thiscall CString::Release(void)",
    "void __stdcall DestructElements(class CString *,int)",
    "public: void __thiscall CString::ReleaseBuffer(int)",
    "public: class CString const & __thiscall CString::operator=(unsigned char const *)",
    "public: int __thiscall CMapStringToPtr::RemoveKey(unsigned short const *)",
    "public: void __thiscall CMapStringToPtr::GetNextAssoc(struct __POSITION * &,class CString &,void * &)const",
    "bool __stdcall operator<(class CString const &,class CString const &)",
    "void __stdcall ConstructElements(class CString *,int)",
    "public: unsigned short * __thiscall CString::LockBuffer(void)",
    "public: virtual int __thiscall CCriticalSection::Lock(unsigned long)",
    "public: void * __thiscall CPlex::data(void)",
    "public: void * & __thiscall CMapStringToPtr::operator[](unsigned short const *)",
    "public: __thiscall CSyncObject::CSyncObject(unsigned short const *)",
    "public: __thiscall CSyncObject::operator void *(void)const",
    "public: int __thiscall CString::IsEmpty(void)const",
    "public: class CString const & __thiscall CString::operator=(unsigned short)",
    "const CStringArray::`vftable'",
    "public: int __thiscall CMapStringToPtr::IsEmpty(void)const",
    "public: struct CPlex & __thiscall CPlex::operator=(struct CPlex const &)",
    "public: class CString __thiscall CStringArray::GetAt(int)const",
    "public: void __thiscall CStringArray::RemoveAll(void)",
    "public: class CString const & __thiscall CString::operator=(char const *)",
    "public: unsigned short * __thiscall CString::GetBuffer(int)",
    "public: void __thiscall CString::FreeExtra(void)",
    "public: void __thiscall CStringArray::InsertAt(int,unsigned short const *,int)",
    "const CCriticalSection::`vftable'",
    "public: void __cdecl CString::FormatMessageW(unsigned short const *,...)",
    "protected: void __thiscall CString::AllocBuffer(int)",
    "public: class CString __thiscall CString::Mid(int,int)const",
    "public: __thiscall CCriticalSection::CCriticalSection(void)",
    "unsigned int __stdcall HashKey(char const *)",
    "public: class CString __thiscall CString::Mid(int)const",
    "public: void __thiscall CMapStringToPtr::`default constructor closure'(void)",
    "public: int __thiscall CString::CompareNoCase(unsigned short const *)const",
    "public: void __thiscall CString::MakeReverse(void)",
    "public: __thiscall CString::operator unsigned short const *(void)const",
    "public: unsigned short __thiscall CString::operator[](int)const",
    "public: int __thiscall CString::ReverseFind(unsigned short)const",
    "public: void __thiscall CMapStringToPtr::InitHashTable(unsigned int,int)",
    "bool __stdcall operator>=(class CString const &,unsigned short const *)",
    "public: void __thiscall CStringArray::SetAtGrow(int,unsigned short const *)",
    "public: void __thiscall CString::Empty(void)",
    "public: int __thiscall CMapStringToPtr::LookupKey(unsigned short const *,unsigned short const * &)const",
    "bool __stdcall operator<=(unsigned short const *,class CString const &)",
    "public: void __thiscall CString::SetAt(int,unsigned short)",
    "public: virtual __thiscall CCriticalSection::~CCriticalSection(void)",
    "bool __stdcall operator<(class CString const &,unsigned short const *)",
    "class CString const & __stdcall AfxGetEmptyString(void)",
    "public: virtual __thiscall CStringArray::~CStringArray(void)",
    "bool __stdcall operator>(class CString const &,unsigned short const *)",
    "public: class CString const & __thiscall CString::operator+=(class CString const &)",
    "public: struct __POSITION * __thiscall CMapStringToPtr::GetStartPosition(void)const",
    "public: void __thiscall CString::MakeUpper(void)",
    "public: unsigned int __thiscall CMapStringToPtr::GetHashTableSize(void)const",
    "public: void __thiscall CPlex::FreeDataChain(void)",
    "protected: void __thiscall CString::ConcatCopy(int,unsigned short const *,int,unsigned short const *)",
    "bool __stdcall operator!=(unsigned short const *,class CString const &)",
    "protected: __thiscall CObject::CObject(void)",
    "public: int __thiscall CString::FindOneOf(unsigned short const *)const",
    "public: class CString __thiscall CStringArray::operator[](int)const",
    "public: virtual __thiscall CObject::~CObject(void)",
    "const CObject::`vftable'",
    "public: int __thiscall CStringArray::Append(class CStringArray const &)",
    "public: virtual int __thiscall CSyncObject::Unlock(long,long *)",
    "public: __thiscall CString::CString(void)",
    "void __stdcall CopyElements(class CString *,class CString const *,int)",
    "public: class CString & __thiscall CStringArray::ElementAt(int)",
    "protected: void __thiscall CMapStringToPtr::FreeAssoc(struct CMapStringToPtr::CAssoc *)",
    "public: int __thiscall CString::Collate(unsigned short const *)const",
    "bool __stdcall operator==(class CString const &,class CString const &)",
    "unsigned short * __stdcall AfxA2WHelper(unsigned short *,char const *,int)",
    "protected: void __thiscall CString::CopyBeforeWrite(void)",
    "public: __thiscall CString::CString(char const *)",
    "class CString __stdcall operator+(unsigned short,class CString const &)",
    "public: int __thiscall CString::GetAllocLength(void)const",
    "public: int __thiscall CString::GetLength(void)const",
    "bool __stdcall operator>=(unsigned short const *,class CString const &)",
    "bool __stdcall operator==(class CString const &,unsigned short const *)",
    "class CString __stdcall operator+(class CString const &,char)",
    "public: class CString const & __thiscall CString::operator=(unsigned short const *)",
    "public: class CString const * __thiscall CStringArray::GetData(void)const",
    "public: void __thiscall CString::TrimRight(void)",
    "public: class CString __thiscall CString::SpanIncluding(unsigned short const *)const",
    "public: int __thiscall CString::Compare(unsigned short const *)const",
    "public: void __cdecl CString::Format(unsigned short const *,...)",
    "class CString __stdcall operator+(class CString const &,unsigned short)",
    "public: void __thiscall CMapStringToPtr::RemoveAll(void)",
    "public: void __thiscall CString::MakeLower(void)",
    "class CString __stdcall operator+(char,class CString const &)",
    "public: int __thiscall CStringArray::GetUpperBound(void)const",
    "public: int __thiscall CString::Find(unsigned short)const",
    "protected: static void __stdcall CString::Release(struct CStringData *)",
    "protected: void __thiscall CString::AllocBeforeWrite(int)",
    "public: class CString __thiscall CString::Right(int)const",
    "public: class CString const & __thiscall CString::operator=(class CString const &)",
    "public: int __thiscall CStringArray::Add(unsigned short const *)",
    "public: class CString & __thiscall CStringArray::operator[](int)",
    "public: class CString __thiscall CString::SpanExcluding(unsigned short const *)const",
    "protected: void __thiscall CString::AssignCopy(int,unsigned short const *)",
    "int __stdcall AfxLoadString(unsigned int,unsigned short *,unsigned int)",
    "char * __stdcall AfxW2AHelper(char *,unsigned short const *,int)",
    "protected: struct CMapStringToPtr::CAssoc * __thiscall CMapStringToPtr::GetAssocAt(unsigned short const *,unsigned int &)const",
    "public: void __cdecl CString::FormatMessageW(unsigned int,...)",
    "public: __thiscall CString::~CString(void)",
    "public: __thiscall CMapStringToPtr::CMapStringToPtr(int)"
  ],
  "mfds.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mfdvdec.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "mferror.dll": "No exports",
  "mfh264enc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mfmjpegdec.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "mfmp4srcsnk.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "mfmpeg2srcsnk.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "mfnetcore.dll": [
    "MFCreateCredentialCache",
    "MFCreateProxyLocator",
    "MFCreatePartialSeekableByteStream",
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "mfnetsrc.dll": [
    "MFCreateByteCacheFile",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "MFCreateCacheManager",
    "MFCreateFileBlockMap"
  ],
  "mfplat.dll": [
    "MFCreateDXGISurfaceBuffer",
    "MFUnlockDXGIDeviceManager",
    "MFTRegisterLocal",
    "MFCreateAMMediaTypeFromMFMediaType",
    "MFDeserializeEvent",
    "MFFrameRateToAverageTimePerFrame",
    "MFGetUncompressedVideoFormat",
    "CreatePropVariant",
    "MFEndUnregisterWorkQueueWithMMCSS",
    "MFGetSystemTime",
    "MFPutWorkItemEx",
    "MFRegisterPlatformWithMMCSS",
    "MFInitMediaTypeFromAMMediaType",
    "MFUnregisterPlatformFromMMCSS",
    "MFSerializePresentationDescriptor",
    "MFCreateMemoryBuffer",
    "MFCreateAlignedMemoryBuffer",
    "MFEndRegisterWorkQueueWithMMCSS",
    "MFTraceError",
    "MFUnjoinWorkQueue",
    "MFCreateURLFromPath",
    "MFCancelWorkItem",
    "MFMapDXGIFormatToDX9Format",
    "MFGetMFTMerit",
    "GetD3DFormatFromMFSubtype",
    "MFDeserializePresentationDescriptor",
    "MFGetNumericNameFromSockaddr",
    "MFRegisterLocalByteStreamHandler",
    "MFCreateGuid",
    "MFRemovePeriodicCallback",
    "MFCompareFullToPartialMediaType",
    "MFCreateMediaTypeFromRepresentation",
    "MFCreateVideoMediaTypeFromBitMapInfoHeader",
    "MFCreateMediaExtensionActivate",
    "MFAddPeriodicCallback",
    "MFCreateCollection",
    "MFLockPlatform",
    "MFSerializeAttributesToStream",
    "MFCreateMFByteStreamOnStreamEx",
    "MFCreateVideoMediaType",
    "MFCreateSystemUnderlyingClock",
    "MFTRegisterLocalByCLSID",
    "MFCreateMemoryStream",
    "GetAMSubtypeFromD3DFormat",
    "MFGetSockaddrFromNumericName",
    "MFSerializeEvent",
    "MFLockSharedWorkQueue",
    "MFCreateFileFromHandle",
    "MFCreateMediaExtensionActivateNoInit",
    "MFGetAdaptersAddresses",
    "MFHeapAlloc",
    "MFValidateMediaTypeSize",
    "MFCalculateBitmapImageSize",
    "CopyPropVariant",
    "MFStartup",
    "MFGetIoPortHandle",
    "MFGetConfigurationStore",
    "MFInitMediaTypeFromMFVideoFormat",
    "MFBeginRegisterWorkQueueWithMMCSSEx",
    "MFCreatePresentationDescriptor",
    "MFPlatformBigEndian",
    "MFPutWaitingWorkItem",
    "MFTraceFuncEnter",
    "MFCreateVideoMediaTypeFromVideoInfoHeader",
    "MFEndGetHostByName",
    "MFGetWorkQueueMMCSSClass",
    "MFGetConfigurationString",
    "MFSerializeMediaTypeToStream",
    "MFGetWorkQueueMMCSSPriority",
    "MFJoinWorkQueue",
    "MFGetPrivateWorkqueues",
    "MFRecordError",
    "PropVariantFromStream",
    "MFCreateVideoMediaTypeFromVideoInfoHeader2",
    "MFCreateVideoMediaTypeFromBitMapInfoHeaderEx",
    "MFDeserializeAttributesFromStream",
    "MFCreateMediaTypeFromProperties",
    "MFGetAttributesAsBlobSize",
    "MFTUnregisterLocal",
    "MFUnwrapMediaType",
    "MFBlockThread",
    "MFCreateVideoMediaTypeFromSubtype",
    "MFCancelCreateFile",
    "MFGetPlaneSize",
    "MFCreateStreamOnMFByteStream",
    "MFInvokeCallback",
    "MFTEnumEx",
    "MFInitAMMediaTypeFromMFMediaType",
    "MFTRegister",
    "MFDeserializeMediaTypeFromStream",
    "MFIsFeatureEnabled",
    "MFCreateStreamOnMFByteStreamEx",
    "MFCompareSockaddrAddresses",
    "MFCreateWICBitmapBuffer",
    "MFCreateMediaBufferFromMediaType",
    "MFAllocateSerialWorkQueue",
    "MFInitVideoFormat",
    "MFCalculateImageSize",
    "MFPutWorkItem",
    "MFJoinIoPort",
    "MFBeginGetHostByName",
    "MFCreateSystemTimeSource",
    "LFGetGlobalPool",
    "MFInitMediaTypeFromWaveFormatEx",
    "MFCreateMFByteStreamOnStream",
    "MFSetSockaddrAny",
    "MFllMulDiv",
    "MFCreateSourceResolver",
    "MFGetRandomNumber",
    "MFShutdown",
    "MFGetConfigurationDWORD",
    "MFMapDX9FormatToDXGIFormat",
    "MFCreateDXGIDeviceManager",
    "MFConvertColorInfoToDXVA",
    "MFGetSupportedMimeTypes",
    "MFCreateReusableByteStream",
    "MFInitMediaTypeFromVideoInfoHeader",
    "MFPutWorkItem2",
    "MFLockDXGIDeviceManager",
    "MFTGetInfo",
    "MFInitVideoFormat_RGB",
    "MFGetTimerPeriodicity",
    "MFCreateFile",
    "MFInitMediaTypeFromMPEG2VideoInfo",
    "MFCreatePathFromURL",
    "MFCreateSample",
    "MFCreateVideoSampleAllocatorEx",
    "MFUnlockPlatform",
    "PropVariantToStream",
    "MFAppendCollection",
    "MFBeginCreateFile",
    "MFCreateLegacyMediaBufferOnMFMediaBuffer",
    "MFCreateMediaBufferWrapper",
    "MFRegisterLocalSchemeHandler",
    "MFEndCreateFile",
    "DestroyPropVariant",
    "MFInitMediaTypeFromMPEG1VideoInfo",
    "MFConvertColorInfoFromDXVA",
    "MFEnumLocalMFTRegistrations",
    "MFGetPlatformVersion",
    "MFStreamDescriptorProtectMediaType",
    "MFClearLocalMFTs",
    "MFCreateEventQueue",
    "MFGetPlatform",
    "MFCreateSocket",
    "MFCreateStreamDescriptor",
    "MFCreateSourceResolverInternal",
    "MFGetAttributesAsBlob",
    "MFInitMediaTypeFromVideoInfoHeader2",
    "MFConvertFromFP16Array",
    "MFCreateSocketListener",
    "MFHeapFree",
    "MFCreateMediaEvent",
    "MFUnblockThread",
    "MFBeginRegisterWorkQueueWithMMCSS",
    "MFCreateMFByteStreamWrapper",
    "MFGetWorkQueueMMCSSTaskId",
    "MFTEnum",
    "CreatePropertyStore",
    "MFConvertToFP16Array",
    "MFIsQueueThread",
    "MFScheduleWorkItem",
    "MFGetStrideForBitmapInfoHeader",
    "MFCreateTransformActivate",
    "MFGetConfigurationPolicy",
    "MFCreateTempFile",
    "MFFreeAdaptersAddresses",
    "MFGetContentProtectionSystemCLSID",
    "MFCreateTrackedSample",
    "MFBeginUnregisterWorkQueueWithMMCSS",
    "MFPlatformLittleEndian",
    "MFCopyImage",
    "MFCreateUdpSockets",
    "MFScheduleWorkItemEx",
    "MFCreateWaveFormatExFromMFMediaType",
    "MFCreateDXSurfaceBuffer",
    "MFCreateMediaType",
    "MFTUnregisterLocalByCLSID",
    "MFLockWorkQueue",
    "MFUnlockWorkQueue",
    "MFCreateAsyncResult",
    "MFCreateMFVideoFormatFromMFMediaType",
    "MFCreatePropertiesFromMediaType",
    "MFAllocateWorkQueueEx",
    "MFInitAttributesFromBlob",
    "FormatTagFromWfx",
    "MFCreate2DMediaBuffer",
    "MFIsLocallyRegisteredMimeType",
    "MFCreateAttributes",
    "MFTUnregister",
    "MFGetPluginControl",
    "MFGetSupportedSchemes",
    "MFWrapMediaType",
    "MFPutWorkItemEx2",
    "MFCreateAudioMediaType",
    "MFCreateMediaEventResult",
    "MFAllocateWorkQueue",
    "MFAverageTimePerFrameToFrameRate",
    "ValidateWaveFormat"
  ],
  "mfps.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "mfreadwrite.dll": [
    "MFCreateSourceReaderFromByteStream",
    "MFCreateSinkWriterFromMediaSink",
    "MFCreateSourceReaderFromURL",
    "MFCreateSourceReaderFromMediaSource",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "MFCreateSinkWriterFromURL"
  ],
  "mfsrcsnk.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "mfsvr.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "mftranscode.dll": [
    "MFCreateTranscodeEngine",
    "MFCreateTranscodeTopology",
    "MFCreateTranscodeSinkActivate",
    "MFCreateTranscodeTopologyFromByteStream",
    "MFCreateTranscodeProfile",
    "GetTranscodeComponentCreator",
    "MFCreateSmartRemuxEngine",
    "MFTranscodeGetAudioOutputAvailableTypes"
  ],
  "mfvdsp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mgmtapi.dll": [
    "SnmpMgrGetTrap",
    "SnmpMgrTrapListen",
    "SnmpMgrRequest",
    "SnmpMgrOidToStr",
    "SnmpMgrGetTrapEx",
    "SnmpMgrClose",
    "SnmpMgrCtl",
    "SnmpMgrStrToOid",
    "SnmpMgrOpen"
  ],
  "mi.dll": [
    "mi_clientFT_V1",
    "MI_Application_InitializeV1"
  ],
  "microsoft-windows-battery-events.dll": "No exports",
  "microsoft-windows-hal-events.dll": "No exports",
  "microsoft-windows-kernel-pnp-events.dll": "No exports",
  "microsoft-windows-kernel-power-events.dll": "No exports",
  "microsoft-windows-kernel-processor-power-events.dll": "No exports",
  "microsoft-windows-pdc.dll": "No exports",
  "microsoft-windows-processor-aggregator-events.dll": "No exports",
  "midimap.dll": [
    "modMessage",
    "modmCallback",
    "DriverProc"
  ],
  "migflt.dll": [
    "BuildMigEngineFilter"
  ],
  "migisol.dll": [
    "public: virtual int __thiscall CIlAdvapi32::GetSecurityDescriptorOwner(void *,void * *,int *)",
    "public: virtual unsigned int __thiscall CIlKernel32::GetDriveTypeW(unsigned short const *)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupCloseFileQueue(void *)",
    "public: virtual int __thiscall CIlKernel32::DeleteFileW(unsigned short const *)",
    "public: virtual int __thiscall CIlAdvapi32::AllocateAndInitializeSid(struct _SID_IDENTIFIER_AUTHORITY *,unsigned char,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,void * *)",
    "public: virtual unsigned int __thiscall CIlKernel32::GetWindowsDirectoryW(unsigned short *,unsigned int)",
    "public: virtual int __thiscall CIlAdvapi32::CryptGenRandom(unsigned long,unsigned long,unsigned char *)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiEnumDriverInfoW(void)",
    "public: virtual int __thiscall CIlKernel32::GetDiskFreeSpaceExW(unsigned short const *,union _ULARGE_INTEGER *,union _ULARGE_INTEGER *,union _ULARGE_INTEGER *)",
    "public: virtual void __thiscall CIlKernel32::LeaveCriticalSection(struct _RTL_CRITICAL_SECTION *)",
    "const CIlUser32::`vftable'",
    "public: virtual int __thiscall CIlKernel32::HeapWalk(void *,struct _PROCESS_HEAP_ENTRY *)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupQueryInfOriginalFileInformationW)(struct _SP_INF_INFORMATION *,unsigned int,struct _SP_ALTPLATFORM_INFO_V2 *,struct _SP_ORIGINAL_FILE_INFO_W *)",
    "private: static unsigned long (__stdcall* CIlNt4Netapi32::m_NetApiBufferFree)(void *)",
    "private: static int __stdcall CIlNt4Kernel32::IlRegisterWaitForSingleObject(void * *,void *,void (__stdcall*)(void *,unsigned char),void *,unsigned long,unsigned long)",
    "public: unsigned long (__stdcall*__thiscall CIlNt4Netapi32::get_NetUserDel(void))(unsigned short const *,unsigned short const *)",
    "public: __thiscall CIlShell32::CIlShell32(void)",
    "private: static int __stdcall CIlW2kDynWs2_32::Ilgetaddrinfo(char const *,char const *,struct addrinfo const *,struct addrinfo * *)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupQueryInfOriginalFileInformationW(struct _SP_INF_INFORMATION *,unsigned int,struct _SP_ALTPLATFORM_INFO_V2 *,struct _SP_ORIGINAL_FILE_INFO_W *)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiGetDeviceInstallParamsW(void *,struct _SP_DEVINFO_DATA *,struct _SP_DEVINSTALL_PARAMS_W *)",
    "private: static unsigned long CIlNt4User32::m_RefCountLockSetForegroundWindow",
    "private: static struct SC_HANDLE__ * __stdcall CIlNt4Advapi32::IlOpenSCManagerW(unsigned short const *,unsigned short const *,unsigned long)",
    "class CIlSetupapi IlSetupapi",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_EncryptFileW(void))(unsigned short const *)",
    "private: static int __stdcall CIlNt4Kernel32::IlGlobalMemoryStatusEx(struct _MEMORYSTATUSEX *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupScanFileQueueW",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountChangeServiceConfigW",
    "class CIlWimgapi IlWimgapi",
    "public: __thiscall CIlNt4Userenv::CIlNt4Userenv(class CIlNt4Userenv const &)",
    "class CIlAdvapi32 IlAdvapi32",
    "private: static int __stdcall CIlNt4Advapi32::IlStartServiceW(struct SC_HANDLE__ *,unsigned long,unsigned short const * *)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupGetInfInformationW(void const *,unsigned long,struct _SP_INF_INFORMATION *,unsigned long,unsigned long *)",
    "public: virtual long __thiscall CIlOle32::CoInitialize(void *)",
    "public: virtual void * __thiscall CIlKernel32::CreateThread(struct _SECURITY_ATTRIBUTES *,unsigned long,unsigned long (__stdcall*)(void *),void *,unsigned long,unsigned long *)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiGetClassDevsExW(void)",
    "public: virtual int __thiscall CIlKernel32::CreateProcessW(unsigned short const *,unsigned short *,struct _SECURITY_ATTRIBUTES *,struct _SECURITY_ATTRIBUTES *,int,unsigned long,void *,unsigned short const *,struct _STARTUPINFOW *,struct _PROCESS_INFORMATION *)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiEnumDeviceInfo(void *,unsigned long,struct _SP_DEVINFO_DATA *)",
    "private: static struct SC_HANDLE__ * (__stdcall* CIlNt4Advapi32::m_OpenServiceW)(struct SC_HANDLE__ *,unsigned short const *,unsigned long)",
    "public: class CIlMuisetupapi & __thiscall CIlMuisetupapi::operator=(class CIlMuisetupapi const &)",
    "public: virtual int __thiscall CIlKernel32::GetComputerNameW(unsigned short *,unsigned long *)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiGetDeviceRegistryPropertyW(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long *,unsigned char *,unsigned long,unsigned long *)",
    "private: static unsigned long CIlNt4Kernel32::m_RefCountCreateToolhelp32Snapshot",
    "public: virtual void __thiscall CIlOle32::CoUninitialize(void)",
    "public: virtual int __thiscall CIlWs2_32::gethostname(char *,int)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupOpenFileQueue(void)",
    "public: void __thiscall CIlNt4Netapi32::release_NetUserDel(void)",
    "class CIlNt4Setupapi IlNt4Setupapi",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiGetDriverInfoDetailW(void))(void *,struct _SP_DEVINFO_DATA *,struct _SP_DRVINFO_DATA_V2_W *,struct _SP_DRVINFO_DETAIL_DATA_W *,unsigned long,unsigned long *)",
    "public: virtual int __thiscall CIlKernel32::MoveFileExW(unsigned short const *,unsigned short const *,unsigned long)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountEnumServicesStatusExW",
    "public: virtual int __thiscall CIlWs2_32::connect(unsigned int,struct sockaddr const *,int)",
    "public: virtual int __thiscall CIlAdvapi32::CryptReleaseContext(unsigned long,unsigned long)",
    "public: virtual int __thiscall CIlWs2_32::listen(unsigned int,int)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountQueryServiceConfigW",
    "public: __thiscall CIlNt4User32::CIlNt4User32(class CIlNt4User32 const &)",
    "public: int (__stdcall*__thiscall CIlNt4Kernel32::get_Process32NextW(void))(void *,struct tagPROCESSENTRY32W *)",
    "public: virtual int __thiscall CIlNt4Advapi32::ConvertSecurityDescriptorToStringSecurityDescriptorW(void *,unsigned long,unsigned long,unsigned short * *,unsigned long *)",
    "public: class CIlUser32 & __thiscall CIlUser32::operator=(class CIlUser32 const &)",
    "public: virtual long __thiscall CIlOle32::GetHGlobalFromStream(struct IStream *,void * *)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiOpenDeviceInfoW(void *,unsigned short const *,struct HWND__ *,unsigned long,struct _SP_DEVINFO_DATA *)",
    "public: void __thiscall CIlNt4Netapi32::release_NetUserAdd(void)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiSetSelectedDriverW(void)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiEnumDeviceInterfaces(void))(void *,struct _SP_DEVINFO_DATA *,struct _GUID const *,unsigned long,struct _SP_DEVICE_INTERFACE_DATA *)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupQueryInfOriginalFileInformationW(struct _SP_INF_INFORMATION *,unsigned int,struct _SP_ALTPLATFORM_INFO_V2 *,struct _SP_ORIGINAL_FILE_INFO_W *)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiCallClassInstaller(unsigned int,void *,struct _SP_DEVINFO_DATA *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiSetSelectedDriverW(void))(void *,struct _SP_DEVINFO_DATA *,struct _SP_DRVINFO_DATA_V2_W *)",
    "public: struct SC_HANDLE__ * (__stdcall*__thiscall CIlNt4Advapi32::get_OpenServiceW(void))(struct SC_HANDLE__ *,unsigned short const *,unsigned long)",
    "private: static void * (__stdcall* CIlNt4Setupapi::m_SetupOpenFileQueue)(void)",
    "private: static int __stdcall CIlNt4Userenv::IlCreateUserProfileExW(void *,unsigned short const *,unsigned short const *,unsigned short *,unsigned long,int)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiDestroyDeviceInfoList)(void *)",
    "private: static unsigned long (__stdcall* CIlNt4Netapi32::m_NetUserDel)(unsigned short const *,unsigned short const *)",
    "public: __thiscall CIlAdvapi32::CIlAdvapi32(void)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiGetDeviceInstallParamsW(void)",
    "public: virtual char * __thiscall CIlWs2_32::inet_ntoa(struct in_addr)",
    "public: virtual void * __thiscall CIlWimgapi::WIMLoadImage(void *,unsigned long)",
    "struct IW2kKernel32Interface * g_Nt4Kernel32",
    "public: virtual int __thiscall CIlKernel32::MoveFileW(unsigned short const *,unsigned short const *)",
    "public: __thiscall CIlAdvapi32::CIlAdvapi32(class CIlAdvapi32 const &)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupQueryInfOriginalFileInformationW(void))(struct _SP_INF_INFORMATION *,unsigned int,struct _SP_ALTPLATFORM_INFO_V2 *,struct _SP_ORIGINAL_FILE_INFO_W *)",
    "public: virtual unsigned long __thiscall CIlKernel32::GetFileAttributesW(unsigned short const *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupGetInfInformationW",
    "private: static unsigned long CIlNt4Kernel32::m_RefCountRegisterWaitForSingleObject",
    "public: virtual int __thiscall CIlAdvapi32::InitializeSecurityDescriptor(void *,unsigned long)",
    "struct ISetupapiInterface * g_Setupapi",
    "public: void __thiscall CIlNt4Advapi32::release_QueryServiceConfigW(void)",
    "public: virtual long __thiscall CIlAdvapi32::RegEnumKeyExW(struct HKEY__ *,unsigned long,unsigned short *,unsigned long *,unsigned long *,unsigned short *,unsigned long *,struct _FILETIME *)",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_ConvertStringSidToSidW(void))(unsigned short *,void * *)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiDestroyDeviceInfoList(void *)",
    "public: class CIlWimgapi & __thiscall CIlWimgapi::operator=(class CIlWimgapi const &)",
    "public: virtual int __thiscall CIlAdvapi32::CryptDuplicateHash(unsigned long,unsigned long *,unsigned long,unsigned long *)",
    "public: virtual int __thiscall CIlNt4Advapi32::EncryptFileW(unsigned short const *)",
    "public: virtual int (__stdcall*__thiscall CIlW2kDynWs2_32::get_getnameinfo(void))(struct sockaddr const *,int,char *,unsigned long,char *,unsigned long,int)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiGetDeviceInterfaceDetailW(void *,struct _SP_DEVICE_INTERFACE_DATA *,struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W *,unsigned long,unsigned long *,struct _SP_DEVINFO_DATA *)",
    "private: static struct SC_HANDLE__ * __stdcall CIlNt4Advapi32::IlOpenServiceW(struct SC_HANDLE__ *,unsigned short const *,unsigned long)",
    "public: __thiscall CIlUser32::CIlUser32(void)",
    "public: virtual void * __thiscall CIlKernel32::OpenProcess(unsigned long,int,unsigned long)",
    "public: virtual unsigned long __thiscall CIlNt4Netapi32::NetUserEnum(unsigned short const *,unsigned long,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *,unsigned long *)",
    "const CIlSetupapi::`vftable'",
    "public: virtual void * __thiscall CIlNt4Advapi32::LockServiceDatabase(struct SC_HANDLE__ *)",
    "private: static long __stdcall CIlNt6Userenv::IlCreateProfile(unsigned short const *,unsigned short const *,unsigned short *,unsigned long)",
    "private: static int __stdcall CIlNt4Advapi32::IlCreateWellKnownSid(enum WELL_KNOWN_SID_TYPE,void *,void *,unsigned long *)",
    "private: static void * __stdcall CIlNt4Advapi32::IlLockServiceDatabase(struct SC_HANDLE__ *)",
    "private: static unsigned long CIlNt4Netapi32::m_RefCountNetWkstaGetInfo",
    "public: class CIlIphlpapi & __thiscall CIlIphlpapi::operator=(class CIlIphlpapi const &)",
    "public: virtual void * __thiscall CIlSetupapi::SetupOpenInfFileW(unsigned short const *,unsigned short const *,unsigned long,unsigned int *)",
    "public: void * (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiGetClassDevsExW(void))(struct _GUID const *,unsigned short const *,struct HWND__ *,unsigned long,void *,unsigned short const *,void *)",
    "public: virtual int __thiscall CIlKernel32::CreateProcessA(char const *,char *,struct _SECURITY_ATTRIBUTES *,struct _SECURITY_ATTRIBUTES *,int,unsigned long,void *,char const *,struct _STARTUPINFOA *,struct _PROCESS_INFORMATION *)",
    "public: virtual void * __thiscall CIlWimgapi::WIMCreateFile(unsigned short *,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long *)",
    "public: struct SC_HANDLE__ * (__stdcall*__thiscall CIlNt4Advapi32::get_CreateServiceW(void))(struct SC_HANDLE__ *,unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned long,unsigned long,unsigned short const *,unsigned short const *,unsigned long *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: virtual void * __thiscall CIlNt4Setupapi::SetupDiCreateDeviceInfoListExW(struct _GUID const *,struct HWND__ *,unsigned short const *,void *)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiGetDeviceInterfaceDetailW)(void *,struct _SP_DEVICE_INTERFACE_DATA *,struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W *,unsigned long,unsigned long *,struct _SP_DEVINFO_DATA *)",
    "const CIlNt4User32::`vftable'",
    "public: virtual int __thiscall CIlNt4Kernel32::Process32NextW(void *,struct tagPROCESSENTRY32W *)",
    "public: __thiscall CIlMuisetupapi::CIlMuisetupapi(class CIlMuisetupapi const &)",
    "public: virtual int __thiscall CIlAdvapi32::CryptDecrypt(unsigned long,unsigned long,int,unsigned long,unsigned char *,unsigned long *)",
    "class CIlNt6Userenv IlNt6Userenv",
    "public: virtual int __thiscall CIlWs2_32::setsockopt(unsigned int,int,int,char const *,int)",
    "public: virtual unsigned long __thiscall CIlNt4Netapi32::NetLocalGroupEnum(unsigned short const *,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *,unsigned long *)",
    "public: void __thiscall CIlNt4Netapi32::release_NetUserEnum(void)",
    "private: static unsigned long CIlNt4Netapi32::m_RefCountNetUserDel",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_CloseServiceHandle(void))(struct SC_HANDLE__ *)",
    "class CIlOle32 IlOle32",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiGetClassDevsExW",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiOpenDevRegKey(void)",
    "public: virtual int __thiscall CIlAdvapi32::CryptDuplicateKey(unsigned long,unsigned long *,unsigned long,unsigned long *)",
    "public: __thiscall CIlNt4Netapi32::CIlNt4Netapi32(void)",
    "public: void __thiscall CIlNt4User32::release_LockSetForegroundWindow(void)",
    "public: virtual unsigned long __thiscall CIlKernel32::GetLogicalDriveStringsW(unsigned long,unsigned short *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupGetInfInformationW(void))(void const *,unsigned long,struct _SP_INF_INFORMATION *,unsigned long,unsigned long *)",
    "struct IMuisetupapiInterface * g_Muisetupapi",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountCloseServiceHandle",
    "public: virtual int __thiscall CIlKernel32::CreateDirectoryW(unsigned short const *,struct _SECURITY_ATTRIBUTES *)",
    "public: virtual unsigned long __thiscall CIlKernel32::GetFileSize(void *,unsigned long *)",
    "public: virtual int __thiscall CIlAdvapi32::AdjustTokenPrivileges(void *,int,struct _TOKEN_PRIVILEGES *,unsigned long,struct _TOKEN_PRIVILEGES *,unsigned long *)",
    "public: virtual void __thiscall CIlKernel32::DebugBreak(void)",
    "private: static unsigned long CIlNt6Userenv::m_RefCountCreateProfile",
    "public: __thiscall CIlWimgapi::CIlWimgapi(void)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountConvertStringSidToSidW",
    "public: virtual int __thiscall CIlWs2_32::recvfrom(unsigned int,char *,int,int,struct sockaddr *,int *)",
    "public: __thiscall CIlVersion::CIlVersion(void)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiGetDeviceRegistryPropertyW(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long *,unsigned char *,unsigned long,unsigned long *)",
    "public: unsigned long (__stdcall*__thiscall CIlNt4Netapi32::get_NetWkstaGetInfo(void))(unsigned short *,unsigned long,unsigned char * *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiCallClassInstaller",
    "const CIlIphlpapi::`vftable'",
    "public: void __thiscall CIlNt4Advapi32::release_UnlockServiceDatabase(void)",
    "public: virtual int __thiscall CIlKernel32::RemoveDirectoryW(unsigned short const *)",
    "class CIlW2kDynWs2_32 IlW2kDynWs2_32",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiDestroyDriverInfoList(void *,struct _SP_DEVINFO_DATA *,unsigned long)",
    "private: static void * (__stdcall* CIlNt4Setupapi::m_SetupDiCreateDeviceInfoListExW)(struct _GUID const *,struct HWND__ *,unsigned short const *,void *)",
    "public: unsigned long (__stdcall*__thiscall CIlNt4Netapi32::get_NetUserGetLocalGroups(void))(unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *)",
    "public: virtual int __thiscall CIlKernel32::FreeLibrary(struct HINSTANCE__ *)",
    "public: virtual void __thiscall CIlW2kDynWs2_32::release_getnameinfo(void)",
    "const CIlDeplorch::`vftable'",
    "public: virtual int __thiscall CIlAdvapi32::CryptGetHashParam(unsigned long,unsigned long,unsigned char *,unsigned long *,unsigned long)",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_UnlockServiceDatabase(void))(void *)",
    "public: virtual int __thiscall CIlSetupapi::SetupFindFirstLineW(void *,unsigned short const *,unsigned short const *,struct _INFCONTEXT *)",
    "public: virtual int __thiscall CIlWs2_32::WSACleanup(void)",
    "public: virtual void * __thiscall CIlKernel32::FindFirstFileW(unsigned short const *,struct _WIN32_FIND_DATAW *)",
    "private: static int (__stdcall* CIlW2kDynWs2_32::m_getaddrinfo)(char const *,char const *,struct addrinfo const *,struct addrinfo * *)",
    "public: class CIlNt6Userenv & __thiscall CIlNt6Userenv::operator=(class CIlNt6Userenv const &)",
    "public: void __thiscall CIlNt4Advapi32::release_CreateWellKnownSid(void)",
    "public: virtual void * __thiscall CIlAdvapi32::FreeSid(void *)",
    "public: virtual void * __thiscall CIlNt4Setupapi::SetupDiGetClassDevsW(struct _GUID const *,unsigned short const *,struct HWND__ *,unsigned long)",
    "public: unsigned long (__stdcall*__thiscall CIlNt4Netapi32::get_NetUserEnum(void))(unsigned short const *,unsigned long,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *,unsigned long *)",
    "public: virtual unsigned long __thiscall CIlMuisetupapi::GetUpgradeLanguage(unsigned short *,unsigned int,unsigned int)",
    "public: virtual int __thiscall CIlWimgapi::WIMUnregisterMessageCallback(void *,int (__stdcall*)(void))",
    "const CIlOle32::`vftable'",
    "public: virtual int __thiscall CIlKernel32::FindNextFileW(void *,struct _WIN32_FIND_DATAW *)",
    "struct IOle32Interface * g_Ole32",
    "public: virtual int __thiscall CIlNt4Advapi32::CloseServiceHandle(struct SC_HANDLE__ *)",
    "public: virtual struct SC_HANDLE__ * __thiscall CIlNt4Advapi32::CreateServiceW(struct SC_HANDLE__ *,unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned long,unsigned long,unsigned short const *,unsigned short const *,unsigned long *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "private: static int __stdcall CIlNt4User32::IlLockSetForegroundWindow(unsigned int)",
    "public: unsigned long (__stdcall*__thiscall CIlNt4Netapi32::get_NetLocalGroupAdd(void))(unsigned short const *,unsigned long,unsigned char *,unsigned long *)",
    "public: virtual int __thiscall CIlWs2_32::ioctlsocket(unsigned int,long,unsigned long *)",
    "public: virtual void __thiscall CIlOle32::CoTaskMemFree(void *)",
    "public: __thiscall CIlIphlpapi::CIlIphlpapi(void)",
    "private: static void * __stdcall CIlNt4Setupapi::IlSetupDiGetClassDevsW(struct _GUID const *,unsigned short const *,struct HWND__ *,unsigned long)",
    "public: struct HKEY__ * (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiOpenDevRegKey(void))(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long,unsigned long,unsigned long)",
    "public: virtual void * __thiscall CIlKernel32::HeapReAlloc(void *,unsigned long,void *,unsigned long)",
    "public: virtual int __thiscall CIlKernel32::GetVersionExW(struct _OSVERSIONINFOW *)",
    "public: virtual unsigned long __thiscall CIlKernel32::WaitForSingleObject(void *,unsigned long)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiOpenDeviceInfoW(void)",
    "public: __thiscall CIlIphlpapi::CIlIphlpapi(class CIlIphlpapi const &)",
    "public: virtual int __thiscall CIlNt4Advapi32::ConvertSidToStringSidW(void *,unsigned short * *)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_ChangeServiceConfigW)(struct SC_HANDLE__ *,unsigned long,unsigned long,unsigned long,unsigned short const *,unsigned short const *,unsigned long *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: __thiscall CIlOle32::CIlOle32(class CIlOle32 const &)",
    "public: virtual int __thiscall CIlNt4Advapi32::UnlockServiceDatabase(void *)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiGetDeviceInterfaceDetailW(void *,struct _SP_DEVICE_INTERFACE_DATA *,struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W *,unsigned long,unsigned long *,struct _SP_DEVINFO_DATA *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiBuildDriverInfoList(void))(void *,struct _SP_DEVINFO_DATA *,unsigned long)",
    "public: virtual void (__stdcall*__thiscall CIlW2kDynWs2_32::get_freeaddrinfo(void))(struct addrinfo *)",
    "public: virtual void __thiscall CIlKernel32::ExitProcess(unsigned int)",
    "public: class CIlNt4Advapi32 & __thiscall CIlNt4Advapi32::operator=(class CIlNt4Advapi32 const &)",
    "public: virtual int __thiscall CIlKernel32::UnmapViewOfFile(void const *)",
    "public: virtual void * __thiscall CIlNt4Setupapi::SetupDiGetClassDevsExW(struct _GUID const *,unsigned short const *,struct HWND__ *,unsigned long,void *,unsigned short const *,void *)",
    "public: __thiscall CIlMuisetupapi::CIlMuisetupapi(void)",
    "public: class CIlDeplorch & __thiscall CIlDeplorch::operator=(class CIlDeplorch const &)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupScanFileQueueW(void))(void *,unsigned long,struct HWND__ *,unsigned int (__stdcall*)(void *,unsigned int,unsigned int,unsigned int),void *,unsigned long *)",
    "public: virtual unsigned long __thiscall CIlKernel32::GetFullPathNameW(unsigned short const *,unsigned long,unsigned short *,unsigned short * *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiDestroyDriverInfoList(void))(void *,struct _SP_DEVINFO_DATA *,unsigned long)",
    "class CIlIphlpapi IlIphlpapi",
    "public: virtual unsigned int __thiscall CIlKernel32::SetErrorMode(unsigned int)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiGetDeviceInstallParamsW(void))(void *,struct _SP_DEVINFO_DATA *,struct _SP_DEVINSTALL_PARAMS_W *)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiDestroyDriverInfoList(void *,struct _SP_DEVINFO_DATA *,unsigned long)",
    "struct IWs2_32Interface * g_Ws2_32",
    "public: virtual unsigned long __thiscall CIlKernel32::SetFilePointer(void *,long,long *,unsigned long)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiEnumDeviceInterfaces(void)",
    "public: virtual void * __thiscall CIlNt4Setupapi::SetupOpenFileQueue(void)",
    "public: virtual int __thiscall CIlKernel32::ReadFile(void *,void *,unsigned long,unsigned long *,struct _OVERLAPPED *)",
    "public: virtual unsigned int __thiscall CIlNt4Kernel32::GetSystemWindowsDirectoryW(unsigned short *,unsigned int)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiGetDriverInfoDetailW(void *,struct _SP_DEVINFO_DATA *,struct _SP_DRVINFO_DATA_V2_W *,struct _SP_DRVINFO_DETAIL_DATA_W *,unsigned long,unsigned long *)",
    "public: __thiscall CIlNt4Userenv::CIlNt4Userenv(void)",
    "public: virtual int __thiscall CIlNt4Advapi32::QueryServiceConfigW(struct SC_HANDLE__ *,struct _QUERY_SERVICE_CONFIGW *,unsigned long,unsigned long *)",
    "class CIlVersion IlVersion",
    "public: virtual void __thiscall CIlKernel32::GlobalMemoryStatus(struct _MEMORYSTATUS *)",
    "public: __thiscall CIlSetupapi::CIlSetupapi(void)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountStartServiceW",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiEnumDeviceInterfaces)(void *,struct _SP_DEVINFO_DATA *,struct _GUID const *,unsigned long,struct _SP_DEVICE_INTERFACE_DATA *)",
    "public: virtual unsigned long __thiscall CIlMuisetupapi::GetUpgradeLanguageEx(unsigned short *,unsigned int,unsigned int,unsigned short const *)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiSetSelectedDriverW)(void *,struct _SP_DEVINFO_DATA *,struct _SP_DRVINFO_DATA_V2_W *)",
    "const CIlNt6Userenv::`vftable'",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiEnumDriverInfoW(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long,struct _SP_DRVINFO_DATA_V2_W *)",
    "private: static unsigned long __stdcall CIlNt4Netapi32::IlNetLocalGroupAdd(unsigned short const *,unsigned long,unsigned char *,unsigned long *)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupCloseFileQueue)(void *)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiOpenDeviceInfoW(void *,unsigned short const *,struct HWND__ *,unsigned long,struct _SP_DEVINFO_DATA *)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiEnumDeviceInfo(void *,unsigned long,struct _SP_DEVINFO_DATA *)",
    "public: virtual void * __thiscall CIlKernel32::HeapAlloc(void *,unsigned long,unsigned long)",
    "public: __thiscall CIlOleaut32::CIlOleaut32(class CIlOleaut32 const &)",
    "public: virtual long __thiscall CIlAdvapi32::RegSetValueExW(struct HKEY__ *,unsigned short const *,unsigned long,unsigned long,unsigned char const *,unsigned long)",
    "public: void __thiscall CIlNt4Advapi32::release_OpenServiceW(void)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiGetClassDevsW",
    "public: void * (__stdcall*__thiscall CIlNt4Setupapi::get_SetupOpenFileQueue(void))(void)",
    "public: void __thiscall CIlNt4Advapi32::release_CloseServiceHandle(void)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiEnumDeviceInfo)(void *,unsigned long,struct _SP_DEVINFO_DATA *)",
    "public: virtual int __thiscall CIlAdvapi32::LookupAccountNameW(unsigned short const *,unsigned short const *,void *,unsigned long *,unsigned short *,unsigned long *,enum _SID_NAME_USE *)",
    "public: virtual int __thiscall CIlKernel32::SetFileTime(void *,struct _FILETIME const *,struct _FILETIME const *,struct _FILETIME const *)",
    "public: class CIlW2kDynWs2_32 & __thiscall CIlW2kDynWs2_32::operator=(class CIlW2kDynWs2_32 const &)",
    "public: virtual int __thiscall CIlAdvapi32::LookupAccountSidW(unsigned short const *,void *,unsigned short *,unsigned long *,unsigned short *,unsigned long *,enum _SID_NAME_USE *)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupScanFileQueueW)(void *,unsigned long,struct HWND__ *,unsigned int (__stdcall*)(void *,unsigned int,unsigned int,unsigned int),void *,unsigned long *)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiGetClassDevsW(void)",
    "public: virtual int __thiscall CIlNt4Kernel32::GlobalMemoryStatusEx(struct _MEMORYSTATUSEX *)",
    "public: virtual int __thiscall CIlNt4Advapi32::ConvertStringSidToSidW(unsigned short *,void * *)",
    "public: virtual unsigned long __thiscall CIlNt4Netapi32::NetUserGetLocalGroups(unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *)",
    "public: void __thiscall CIlNt4Netapi32::release_NetApiBufferFree(void)",
    "const CIlNt4Setupapi::`vftable'",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupQueryInfOriginalFileInformationW",
    "private: static int __stdcall CIlNt4Advapi32::IlCloseServiceHandle(struct SC_HANDLE__ *)",
    "private: static unsigned long (__stdcall* CIlNt4Netapi32::m_NetLocalGroupEnum)(unsigned short const *,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *,unsigned long *)",
    "class CIlNt4Kernel32 IlNt4Kernel32",
    "private: static unsigned long __stdcall CIlNt4Netapi32::IlNetLocalGroupAddMembers(unsigned short const *,unsigned short const *,unsigned long,unsigned char *,unsigned long)",
    "public: virtual int __thiscall CIlShell32::ShellExecuteExW(struct _SHELLEXECUTEINFOW *)",
    "public: virtual unsigned long __thiscall CIlKernel32::GetTempPathW(unsigned long,unsigned short *)",
    "private: static void * (__stdcall* CIlNt4Setupapi::m_SetupDiGetClassDevsW)(struct _GUID const *,unsigned short const *,struct HWND__ *,unsigned long)",
    "public: __thiscall CIlSetupapi::CIlSetupapi(class CIlSetupapi const &)",
    "public: virtual int __thiscall CIlAdvapi32::CryptDeriveKey(unsigned long,unsigned int,unsigned long,unsigned long,unsigned long *)",
    "private: static unsigned long CIlNt4Netapi32::m_RefCountNetLocalGroupAdd",
    "public: virtual struct HINSTANCE__ * __thiscall CIlKernel32::LoadLibraryW(unsigned short const *)",
    "public: __thiscall CIlNt6Userenv::CIlNt6Userenv(void)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiEnumDriverInfoW(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long,struct _SP_DRVINFO_DATA_V2_W *)",
    "private: static unsigned long __stdcall CIlNt4Netapi32::IlNetApiBufferFree(void *)",
    "public: void __thiscall CIlNt4Userenv::release_CreateUserProfileExW(void)",
    "public: __thiscall CIlNt4User32::CIlNt4User32(void)",
    "private: static int __stdcall CIlNt4Kernel32::IlProcess32FirstW(void *,struct tagPROCESSENTRY32W *)",
    "public: virtual struct hostent * __thiscall CIlWs2_32::gethostbyname(char const *)",
    "private: static int __stdcall CIlNt4Advapi32::IlConvertSidToStringSidW(void *,unsigned short * *)",
    "public: class CIlNt4Setupapi & __thiscall CIlNt4Setupapi::operator=(class CIlNt4Setupapi const &)",
    "public: class CIlVersion & __thiscall CIlVersion::operator=(class CIlVersion const &)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupScanFileQueueW(void)",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_EnumServicesStatusExW(void))(struct SC_HANDLE__ *,enum _SC_ENUM_TYPE,unsigned long,unsigned long,unsigned char *,unsigned long,unsigned long *,unsigned long *,unsigned long *,unsigned short const *)",
    "protected: __thiscall CDynLib::CDynLib(void)",
    "public: virtual void __thiscall CIlKernel32::GetSystemInfo(struct _SYSTEM_INFO *)",
    "public: virtual unsigned long __thiscall CIlKernel32::GetLogicalDrives(void)",
    "public: void __thiscall CIlNt4Advapi32::release_LockServiceDatabase(void)",
    "public: virtual int __thiscall CIlW2kDynWs2_32::getaddrinfo(char const *,char const *,struct addrinfo const *,struct addrinfo * *)",
    "const CIlNt4Netapi32::`vftable'",
    "public: virtual int __thiscall CIlAdvapi32::GetSecurityDescriptorSacl(void *,int *,struct _ACL * *,int *)",
    "public: void __thiscall CIlNt4Advapi32::release_ConvertSidToStringSidW(void)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiBuildDriverInfoList)(void *,struct _SP_DEVINFO_DATA *,unsigned long)",
    "private: static unsigned long CIlNt4Kernel32::m_RefCountProcess32NextW",
    "public: virtual int __thiscall CIlNt4Advapi32::ConvertStringSecurityDescriptorToSecurityDescriptorW(unsigned short const *,unsigned long,void * *,unsigned long *)",
    "private: static unsigned long CIlNt4Kernel32::m_RefCountGlobalMemoryStatusEx",
    "public: virtual int __thiscall CIlDeplorch::SysprepIsStagedOS(void)",
    "public: virtual int __thiscall CIlWimgapi::WIMApplyImage(void *,unsigned short *,unsigned long)",
    "public: __thiscall CIlW2kDynWs2_32::CIlW2kDynWs2_32(void)",
    "public: __thiscall CIlDeplorch::CIlDeplorch(class CIlDeplorch const &)",
    "public: virtual int __thiscall CIlKernel32::GetDiskFreeSpaceW(unsigned short const *,unsigned long *,unsigned long *,unsigned long *,unsigned long *)",
    "struct IDeplorchInterface * g_Deplorch",
    "public: void __thiscall CIlNt4Advapi32::release_EncryptFileW(void)",
    "public: virtual long __thiscall CIlAdvapi32::RegUnLoadKeyW(struct HKEY__ *,unsigned short const *)",
    "public: void * (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiCreateDeviceInfoListExW(void))(struct _GUID const *,struct HWND__ *,unsigned short const *,void *)",
    "public: virtual void __thiscall CIlKernel32::EnterCriticalSection(struct _RTL_CRITICAL_SECTION *)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupCloseFileQueue(void)",
    "public: void __thiscall CIlNt4Kernel32::release_CreateToolhelp32Snapshot(void)",
    "public: virtual int __thiscall CIlAdvapi32::EqualSid(void *,void *)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiCallClassInstaller(void)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupQueryInfOriginalFileInformationW(void)",
    "public: void __thiscall CIlNt6Userenv::release_CreateProfile(void)",
    "public: virtual int __thiscall CIlAdvapi32::CryptHashData(unsigned long,unsigned char const *,unsigned long,unsigned long)",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_StartServiceW(void))(struct SC_HANDLE__ *,unsigned long,unsigned short const * *)",
    "public: class CIlNt4Userenv & __thiscall CIlNt4Userenv::operator=(class CIlNt4Userenv const &)",
    "struct IShell32Interface * g_Shell32",
    "public: virtual int __thiscall CIlWimgapi::WIMSetTemporaryPath(void *,unsigned short *)",
    "public: virtual int __thiscall CIlKernel32::HeapFree(void *,unsigned long,void *)",
    "private: static int __stdcall CIlW2kDynWs2_32::Ilgetnameinfo(struct sockaddr const *,int,char *,unsigned long,char *,unsigned long,int)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupCloseFileQueue",
    "private: static void * __stdcall CIlNt4Setupapi::IlSetupDiGetClassDevsExW(struct _GUID const *,unsigned short const *,struct HWND__ *,unsigned long,void *,unsigned short const *,void *)",
    "public: void __thiscall CIlNt4Advapi32::release_ChangeServiceConfigW(void)",
    "public: virtual struct SC_HANDLE__ * __thiscall CIlNt4Advapi32::OpenServiceW(struct SC_HANDLE__ *,unsigned short const *,unsigned long)",
    "private: static struct SC_HANDLE__ * (__stdcall* CIlNt4Advapi32::m_CreateServiceW)(struct SC_HANDLE__ *,unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned long,unsigned long,unsigned short const *,unsigned short const *,unsigned long *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "private: static unsigned long CIlW2kDynWs2_32::m_RefCountgetaddrinfo",
    "public: virtual void * __thiscall CIlKernel32::MapViewOfFile(void *,unsigned long,unsigned long,unsigned long,unsigned long)",
    "public: virtual unsigned long __thiscall CIlKernel32::ExpandEnvironmentStringsW(unsigned short const *,unsigned short *,unsigned long)",
    "public: void __thiscall CIlNt4Netapi32::release_NetLocalGroupEnum(void)",
    "public: virtual int __thiscall CIlAdvapi32::GetSecurityDescriptorGroup(void *,void * *,int *)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_ConvertSidToStringSidW)(void *,unsigned short * *)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountUnlockServiceDatabase",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiGetDeviceInterfaceDetailW",
    "private: static int (__stdcall* CIlNt4Advapi32::m_StartServiceW)(struct SC_HANDLE__ *,unsigned long,unsigned short const * *)",
    "public: virtual int __thiscall CIlAdvapi32::CryptDestroyHash(unsigned long)",
    "public: class CIlOle32 & __thiscall CIlOle32::operator=(class CIlOle32 const &)",
    "private: static unsigned long (__stdcall* CIlNt4Netapi32::m_NetLocalGroupAdd)(unsigned short const *,unsigned long,unsigned char *,unsigned long *)",
    "public: virtual int __thiscall CIlKernel32::SetEvent(void *)",
    "public: virtual long __thiscall CIlNt6Userenv::CreateProfile(unsigned short const *,unsigned short const *,unsigned short *,unsigned long)",
    "public: void __thiscall CIlNt4Netapi32::release_NetUserGetLocalGroups(void)",
    "public: virtual int __thiscall CIlKernel32::GetOverlappedResult(void *,struct _OVERLAPPED *,unsigned long *,int)",
    "public: virtual int __thiscall CIlAdvapi32::CryptAcquireContextW(unsigned long *,unsigned short const *,unsigned short const *,unsigned long,unsigned long)",
    "public: __thiscall CIlNt6Userenv::CIlNt6Userenv(class CIlNt6Userenv const &)",
    "private: static void * __stdcall CIlNt4Kernel32::IlCreateToolhelp32Snapshot(unsigned long,unsigned long)",
    "public: virtual void __thiscall CIlW2kDynWs2_32::release_freeaddrinfo(void)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiOpenDeviceInfoW",
    "private: static unsigned long CIlNt4Netapi32::m_RefCountNetUserGetLocalGroups",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiEnumDeviceInfo",
    "public: void * (__stdcall*__thiscall CIlNt4Advapi32::get_LockServiceDatabase(void))(struct SC_HANDLE__ *)",
    "const CIlShell32::`vftable'",
    "private: static int __stdcall CIlNt4Advapi32::IlUnlockServiceDatabase(void *)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiSetDeviceInstallParamsW)(void *,struct _SP_DEVINFO_DATA *,struct _SP_DEVINSTALL_PARAMS_W *)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountEncryptFileW",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiBuildDriverInfoList(void *,struct _SP_DEVINFO_DATA *,unsigned long)",
    "public: virtual int __thiscall CIlWs2_32::WSAGetLastError(void)",
    "public: virtual int __thiscall CIlKernel32::DuplicateHandle(void *,void *,void *,void * *,unsigned long,int,unsigned long)",
    "class CIlNt4Advapi32 IlNt4Advapi32",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiBuildDriverInfoList(void)",
    "public: virtual int __thiscall CIlKernel32::GetLocaleInfoW(unsigned long,unsigned long,unsigned short *,int)",
    "public: virtual int __thiscall CIlWs2_32::shutdown(unsigned int,int)",
    "public: virtual struct HKEY__ * __thiscall CIlNt4Setupapi::SetupDiOpenDevRegKey(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long,unsigned long,unsigned long)",
    "const CIlAdvapi32::`vftable'",
    "protected: void __thiscall CDynLib::ReleaseProc(int (__stdcall*&)(void),unsigned long &)",
    "public: virtual int __thiscall CIlKernel32::CopyFileW(unsigned short const *,unsigned short const *,int)",
    "public: class CIlNt4Netapi32 & __thiscall CIlNt4Netapi32::operator=(class CIlNt4Netapi32 const &)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiSetSelectedDriverW(void *,struct _SP_DEVINFO_DATA *,struct _SP_DRVINFO_DATA_V2_W *)",
    "private: static unsigned long CIlNt4Netapi32::m_RefCountNetLocalGroupEnum",
    "public: virtual int __thiscall CIlKernel32::CloseHandle(void *)",
    "private: static int __stdcall CIlNt4Advapi32::IlConvertStringSecurityDescriptorToSecurityDescriptorW(unsigned short const *,unsigned long,void * *,unsigned long *)",
    "public: __thiscall CIlNt4Netapi32::CIlNt4Netapi32(class CIlNt4Netapi32 const &)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiBuildDriverInfoList(void *,struct _SP_DEVINFO_DATA *,unsigned long)",
    "public: virtual void * __thiscall CIlOle32::CoTaskMemAlloc(unsigned long)",
    "public: virtual long __thiscall CIlOleaut32::VariantClear(struct tagVARIANT *)",
    "public: virtual unsigned long __thiscall CIlAdvapi32::GetSecurityInfo(void *,enum _SE_OBJECT_TYPE,unsigned long,void * *,void * *,struct _ACL * *,struct _ACL * *,void * *)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiDestroyDriverInfoList)(void *,struct _SP_DEVINFO_DATA *,unsigned long)",
    "public: __thiscall CIlOle32::CIlOle32(void)",
    "public: void __thiscall CIlNt4Advapi32::release_StartServiceW(void)",
    "public: class CIlNt4User32 & __thiscall CIlNt4User32::operator=(class CIlNt4User32 const &)",
    "public: virtual int __thiscall CIlNt4Kernel32::Process32FirstW(void *,struct tagPROCESSENTRY32W *)",
    "public: virtual int __thiscall CIlKernel32::HeapValidate(void *,unsigned long,void const *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiCreateDeviceInfoListExW",
    "struct IWimgapiInterface * g_Wimgapi",
    "public: virtual int __thiscall CIlNt4Advapi32::EnumServicesStatusExW(struct SC_HANDLE__ *,enum _SC_ENUM_TYPE,unsigned long,unsigned long,unsigned char *,unsigned long,unsigned long *,unsigned long *,unsigned long *,unsigned short const *)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupGetInfInformationW)(void const *,unsigned long,struct _SP_INF_INFORMATION *,unsigned long,unsigned long *)",
    "public: virtual int __thiscall CIlWs2_32::recv(unsigned int,char *,int,int)",
    "public: __thiscall CIlKernel32::CIlKernel32(class CIlKernel32 const &)",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_QueryServiceConfigW(void))(struct SC_HANDLE__ *,struct _QUERY_SERVICE_CONFIGW *,unsigned long,unsigned long *)",
    "private: static unsigned long (__stdcall* CIlNt4Netapi32::m_NetUserAdd)(unsigned short const *,unsigned long,unsigned char *,unsigned long *)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_ConvertStringSidToSidW)(unsigned short *,void * *)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiCallClassInstaller(unsigned int,void *,struct _SP_DEVINFO_DATA *)",
    "class CIlWs2_32 IlWs2_32",
    "public: virtual unsigned long __thiscall CIlIphlpapi::GetIpAddrTable(struct _MIB_IPADDRTABLE *,unsigned long *,int)",
    "struct IIphlpapiInterface * g_Iphlpapi",
    "protected: int (__stdcall*__thiscall CDynLib::GetIlProc(unsigned short const *,char const *,int (__stdcall*)(void),int (__stdcall*&)(void),unsigned long &))(void)",
    "public: unsigned long (__stdcall*__thiscall CIlNt4Netapi32::get_NetLocalGroupEnum(void))(unsigned short const *,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *,unsigned long *)",
    "public: __thiscall CIlNt4Setupapi::CIlNt4Setupapi(void)",
    "public: virtual int __thiscall CIlKernel32::GlobalUnlock(void *)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiGetDeviceRegistryPropertyW)(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long *,unsigned char *,unsigned long,unsigned long *)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiGetDriverInfoDetailW(void *,struct _SP_DEVINFO_DATA *,struct _SP_DRVINFO_DATA_V2_W *,struct _SP_DRVINFO_DETAIL_DATA_W *,unsigned long,unsigned long *)",
    "public: virtual int __thiscall CIlVersion::GetFileVersionInfoW(unsigned short const *,unsigned long,unsigned long,void *)",
    "public: void __thiscall CIlNt4Advapi32::release_OpenSCManagerW(void)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiSetDeviceInstallParamsW(void *,struct _SP_DEVINFO_DATA *,struct _SP_DEVINSTALL_PARAMS_W *)",
    "const CIlNt4Userenv::`vftable'",
    "public: virtual int __thiscall CIlKernel32::GetVersionExA(struct _OSVERSIONINFOA *)",
    "public: virtual struct HICON__ * __thiscall CIlUser32::LoadIconW(struct HINSTANCE__ *,unsigned short const *)",
    "public: __thiscall CIlNt4Advapi32::CIlNt4Advapi32(class CIlNt4Advapi32 const &)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiGetDeviceInterfaceDetailW(void))(void *,struct _SP_DEVICE_INTERFACE_DATA *,struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W *,unsigned long,unsigned long *,struct _SP_DEVINFO_DATA *)",
    "public: virtual int __thiscall CIlVersion::VerQueryValueW(void * const,unsigned short const *,void * *,unsigned int *)",
    "public: virtual unsigned long __thiscall CIlKernel32::GetFileType(void *)",
    "private: static unsigned long CIlW2kDynWs2_32::m_RefCountfreeaddrinfo",
    "public: virtual void * __thiscall CIlKernel32::GlobalFree(void *)",
    "public: virtual int __thiscall CIlWs2_32::__WSAFDIsSet(unsigned int,struct fd_set *)",
    "private: static int (__stdcall* CIlNt4Kernel32::m_Process32NextW)(void *,struct tagPROCESSENTRY32W *)",
    "private: static unsigned long __stdcall CIlNt4Netapi32::IlNetUserGetLocalGroups(unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiGetDeviceRegistryPropertyW",
    "public: virtual unsigned long __thiscall CIlKernel32::GetTickCount(void)",
    "public: virtual long __thiscall CIlAdvapi32::RegCloseKey(struct HKEY__ *)",
    "public: virtual void * __thiscall CIlKernel32::OpenEventW(unsigned long,int,unsigned short const *)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountInitiateSystemShutdownExW",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupCloseFileQueue(void *)",
    "public: virtual int __thiscall CIlKernel32::SetFileAttributesW(unsigned short const *,unsigned long)",
    "public: virtual int __thiscall CIlNt4Kernel32::RegisterWaitForSingleObject(void * *,void *,void (__stdcall*)(void *,unsigned char),void *,unsigned long,unsigned long)",
    "public: virtual long __thiscall CIlOle32::CoInitializeEx(void *,unsigned long)",
    "struct IW2kSetupapiInterface * g_Nt4Setupapi",
    "public: virtual int __thiscall CIlWs2_32::WSAStartup(unsigned short,struct WSAData *)",
    "private: static void * (__stdcall* CIlNt4Setupapi::m_SetupDiGetClassDevsExW)(struct _GUID const *,unsigned short const *,struct HWND__ *,unsigned long,void *,unsigned short const *,void *)",
    "class CIlNt4Netapi32 IlNt4Netapi32",
    "struct IUser32Interface * g_User32",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_ConvertSidToStringSidW(void))(void *,unsigned short * *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiEnumDeviceInfo(void))(void *,unsigned long,struct _SP_DEVINFO_DATA *)",
    "public: virtual unsigned long __thiscall CIlKernel32::GetPrivateProfileStringW(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short *,unsigned long,unsigned short const *)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiCallClassInstaller)(unsigned int,void *,struct _SP_DEVINFO_DATA *)",
    "public: virtual long __thiscall CIlAdvapi32::RegLoadKeyW(struct HKEY__ *,unsigned short const *,unsigned short const *)",
    "public: virtual void * __thiscall CIlKernel32::GlobalAlloc(unsigned int,unsigned long)",
    "public: virtual int __thiscall CIlAdvapi32::OpenProcessToken(void *,unsigned long,void * *)",
    "public: void __thiscall CIlNt4Advapi32::release_ConvertStringSidToSidW(void)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiGetDeviceInterfaceDetailW(void)",
    "class CIlKernel32 IlKernel32",
    "public: virtual int __thiscall CIlNt4Advapi32::InitiateSystemShutdownExW(unsigned short *,unsigned short *,unsigned long,int,int,unsigned long)",
    "public: virtual void * __thiscall CIlKernel32::VirtualAlloc(void *,unsigned long,unsigned long,unsigned long)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiGetDeviceInstallParamsW",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_ChangeServiceConfigW(void))(struct SC_HANDLE__ *,unsigned long,unsigned long,unsigned long,unsigned short const *,unsigned short const *,unsigned long *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "private: static struct HKEY__ * (__stdcall* CIlNt4Setupapi::m_SetupDiOpenDevRegKey)(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long,unsigned long,unsigned long)",
    "private: static unsigned long (__stdcall* CIlNt4Netapi32::m_NetLocalGroupAddMembers)(unsigned short const *,unsigned short const *,unsigned long,unsigned char *,unsigned long)",
    "public: virtual unsigned int __thiscall CIlKernel32::GetTempFileNameW(unsigned short const *,unsigned short const *,unsigned int,unsigned short *)",
    "public: class CIlShell32 & __thiscall CIlShell32::operator=(class CIlShell32 const &)",
    "public: virtual long __thiscall CIlAdvapi32::RegDeleteKeyW(struct HKEY__ *,unsigned short const *)",
    "public: virtual long __thiscall CIlAdvapi32::RegFlushKey(struct HKEY__ *)",
    "public: virtual int __thiscall CIlAdvapi32::GetUserNameW(unsigned short *,unsigned long *)",
    "private: static int __stdcall CIlNt4Advapi32::IlInitiateSystemShutdownExW(unsigned short *,unsigned short *,unsigned long,int,int,unsigned long)",
    "struct INt6UserenvInterface * g_Nt6Userenv",
    "struct IW2kUserenvInterface * g_Nt4Userenv",
    "public: __thiscall CIlUser32::CIlUser32(class CIlUser32 const &)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiSetDeviceInstallParamsW(void *,struct _SP_DEVINFO_DATA *,struct _SP_DEVINSTALL_PARAMS_W *)",
    "public: unsigned int (__stdcall*__thiscall CIlNt4Kernel32::get_GetSystemWindowsDirectoryW(void))(unsigned short *,unsigned int)",
    "public: virtual long __thiscall CIlAdvapi32::RegQueryInfoKeyW(struct HKEY__ *,unsigned short *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,struct _FILETIME *)",
    "public: virtual void __thiscall CIlKernel32::Sleep(unsigned long)",
    "public: virtual int __thiscall CIlNt4Userenv::CreateUserProfileExW(void *,unsigned short const *,unsigned short const *,unsigned short *,unsigned long,int)",
    "public: void __thiscall CIlNt4Netapi32::release_NetLocalGroupAdd(void)",
    "public: virtual void __thiscall CIlSetupapi::SetupCloseInfFile(void *)",
    "private: static unsigned long CIlNt4Kernel32::m_RefCountProcess32FirstW",
    "public: void __thiscall CIlNt4Setupapi::release_SetupGetInfInformationW(void)",
    "public: virtual int __thiscall CIlNt4User32::LockSetForegroundWindow(unsigned int)",
    "struct IKernel32Interface * g_Kernel32",
    "public: virtual int __thiscall CIlKernel32::SetEndOfFile(void *)",
    "private: static int __stdcall CIlNt4Advapi32::IlChangeServiceConfigW(struct SC_HANDLE__ *,unsigned long,unsigned long,unsigned long,unsigned short const *,unsigned short const *,unsigned long *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: void * (__stdcall*__thiscall CIlNt4Kernel32::get_CreateToolhelp32Snapshot(void))(unsigned long,unsigned long)",
    "public: virtual int __thiscall CIlNt4Advapi32::CreateWellKnownSid(enum WELL_KNOWN_SID_TYPE,void *,void *,unsigned long *)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_ConvertSecurityDescriptorToStringSecurityDescriptorW)(void *,unsigned long,unsigned long,unsigned short * *,unsigned long *)",
    "public: virtual unsigned long __thiscall CIlAdvapi32::SetSecurityInfo(void *,enum _SE_OBJECT_TYPE,unsigned long,void *,void *,struct _ACL *,struct _ACL *)",
    "public: int (__stdcall*__thiscall CIlNt4Kernel32::get_RegisterWaitForSingleObject(void))(void * *,void *,void (__stdcall*)(void *,unsigned char),void *,unsigned long,unsigned long)",
    "public: virtual int __thiscall CIlWs2_32::bind(unsigned int,struct sockaddr const *,int)",
    "public: virtual unsigned int __thiscall CIlWs2_32::accept(unsigned int,struct sockaddr *,int *)",
    "public: virtual int __thiscall CIlKernel32::FindClose(void *)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_EnumServicesStatusExW)(struct SC_HANDLE__ *,enum _SC_ENUM_TYPE,unsigned long,unsigned long,unsigned char *,unsigned long,unsigned long *,unsigned long *,unsigned long *,unsigned short const *)",
    "public: void __thiscall CIlNt4Kernel32::release_Process32NextW(void)",
    "public: virtual int __thiscall CIlW2kDynWs2_32::getnameinfo(struct sockaddr const *,int,char *,unsigned long,char *,unsigned long,int)",
    "public: virtual void __thiscall CIlKernel32::RaiseException(unsigned long,unsigned long,unsigned long,unsigned long const *)",
    "struct IW2kNetapi32Interface * g_Nt4Netapi32",
    "public: virtual int (__stdcall*__thiscall CIlW2kDynWs2_32::get_getaddrinfo(void))(char const *,char const *,struct addrinfo const *,struct addrinfo * *)",
    "public: virtual int __thiscall CIlKernel32::VirtualFree(void *,unsigned long,unsigned long)",
    "public: virtual void __thiscall CIlKernel32::SetLastError(unsigned long)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiDestroyDeviceInfoList(void *)",
    "public: void __thiscall CIlNt4Advapi32::release_CreateServiceW(void)",
    "private: static int (__stdcall* CIlNt4User32::m_LockSetForegroundWindow)(unsigned int)",
    "private: static void * __stdcall CIlNt4Setupapi::IlSetupOpenFileQueue(void)",
    "class CIlShell32 IlShell32",
    "public: long (__stdcall*__thiscall CIlNt6Userenv::get_CreateProfile(void))(unsigned short const *,unsigned short const *,unsigned short *,unsigned long)",
    "public: virtual int __thiscall CIlKernel32::HeapDestroy(void *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiGetDeviceRegistryPropertyW(void))(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long *,unsigned char *,unsigned long,unsigned long *)",
    "public: class CIlAdvapi32 & __thiscall CIlAdvapi32::operator=(class CIlAdvapi32 const &)",
    "const CIlNt4Advapi32::`vftable'",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiGetDriverInfoDetailW)(void *,struct _SP_DEVINFO_DATA *,struct _SP_DRVINFO_DATA_V2_W *,struct _SP_DRVINFO_DETAIL_DATA_W *,unsigned long,unsigned long *)",
    "public: virtual unsigned long __thiscall CIlNt4Netapi32::NetApiBufferFree(void *)",
    "private: static int __stdcall CIlNt4Advapi32::IlEncryptFileW(unsigned short const *)",
    "private: static int __stdcall CIlNt4Advapi32::IlEnumServicesStatusExW(struct SC_HANDLE__ *,enum _SC_ENUM_TYPE,unsigned long,unsigned long,unsigned char *,unsigned long,unsigned long *,unsigned long *,unsigned long *,unsigned short const *)",
    "public: virtual int __thiscall CIlUser32::MessageBoxA(struct HWND__ *,char const *,char const *,unsigned int)",
    "public: __thiscall CIlShell32::CIlShell32(class CIlShell32 const &)",
    "public: unsigned long (__stdcall*__thiscall CIlNt4Netapi32::get_NetUserAdd(void))(unsigned short const *,unsigned long,unsigned char *,unsigned long *)",
    "public: virtual unsigned long __thiscall CIlWs2_32::inet_addr(char const *)",
    "public: virtual unsigned long __thiscall CIlKernel32::GetShortPathNameW(unsigned short const *,unsigned short *,unsigned long)",
    "public: virtual long __thiscall CIlAdvapi32::RegCreateKeyExW(struct HKEY__ *,unsigned short const *,unsigned long,unsigned short *,unsigned long,unsigned long,struct _SECURITY_ATTRIBUTES *,struct HKEY__ * *,unsigned long *)",
    "public: void __thiscall CIlNt4Advapi32::release_ConvertSecurityDescriptorToStringSecurityDescriptorW(void)",
    "public: virtual unsigned long __thiscall CIlKernel32::HeapCompact(void *,unsigned long)",
    "public: int (__stdcall*__thiscall CIlNt4Userenv::get_CreateUserProfileExW(void))(void *,unsigned short const *,unsigned short const *,unsigned short *,unsigned long,int)",
    "class CIlMuisetupapi IlMuisetupapi",
    "public: void __thiscall CIlNt4Advapi32::release_ConvertStringSecurityDescriptorToSecurityDescriptorW(void)",
    "public: int (__stdcall*__thiscall CIlNt4Kernel32::get_Process32FirstW(void))(void *,struct tagPROCESSENTRY32W *)",
    "private: static unsigned long CIlNt4Netapi32::m_RefCountNetApiBufferFree",
    "private: static unsigned long __stdcall CIlNt4Netapi32::IlNetUserAdd(unsigned short const *,unsigned long,unsigned char *,unsigned long *)",
    "public: virtual int __thiscall CIlUser32::MessageBoxW(struct HWND__ *,unsigned short const *,unsigned short const *,unsigned int)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiDestroyDriverInfoList",
    "public: virtual unsigned long __thiscall CIlKernel32::GetLastError(void)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_ConvertStringSecurityDescriptorToSecurityDescriptorW)(unsigned short const *,unsigned long,void * *,unsigned long *)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiEnumDeviceInfo(void)",
    "private: static unsigned long __stdcall CIlNt4Netapi32::IlNetUserEnum(unsigned short const *,unsigned long,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *,unsigned long *)",
    "public: virtual int __thiscall CIlAdvapi32::CryptEncrypt(unsigned long,unsigned long,int,unsigned long,unsigned char *,unsigned long *,unsigned long)",
    "public: __thiscall CIlWs2_32::CIlWs2_32(void)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiEnumDriverInfoW)(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long,struct _SP_DRVINFO_DATA_V2_W *)",
    "private: static struct SC_HANDLE__ * __stdcall CIlNt4Advapi32::IlCreateServiceW(struct SC_HANDLE__ *,unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned long,unsigned long,unsigned short const *,unsigned short const *,unsigned long *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: void __thiscall CIlNt4Kernel32::release_GetSystemWindowsDirectoryW(void)",
    "class CIlDeplorch IlDeplorch",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiDestroyDeviceInfoList(void))(void *)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiEnumDeviceInterfaces(void *,struct _SP_DEVINFO_DATA *,struct _GUID const *,unsigned long,struct _SP_DEVICE_INTERFACE_DATA *)",
    "public: virtual long __thiscall CIlAdvapi32::RegQueryValueExW(struct HKEY__ *,unsigned short const *,unsigned long *,unsigned long *,unsigned char *,unsigned long *)",
    "public: __thiscall CIlOleaut32::CIlOleaut32(void)",
    "class CIlOleaut32 IlOleaut32",
    "public: class CIlKernel32 & __thiscall CIlKernel32::operator=(class CIlKernel32 const &)",
    "public: class CIlOleaut32 & __thiscall CIlOleaut32::operator=(class CIlOleaut32 const &)",
    "const CIlWimgapi::`vftable'",
    "private: static unsigned long (__stdcall* CIlNt4Netapi32::m_NetWkstaGetInfo)(unsigned short *,unsigned long,unsigned char * *)",
    "public: virtual int __thiscall CIlKernel32::WriteFile(void *,void const *,unsigned long,unsigned long *,struct _OVERLAPPED *)",
    "public: virtual int __thiscall CIlNt4Advapi32::StartServiceW(struct SC_HANDLE__ *,unsigned long,unsigned short const * *)",
    "public: virtual unsigned long __thiscall CIlKernel32::GlobalSize(void *)",
    "private: static unsigned long (__stdcall* CIlNt4Netapi32::m_NetUserGetLocalGroups)(unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *)",
    "public: virtual unsigned long __thiscall CIlKernel32::WaitForMultipleObjects(unsigned long,void * const *,int,unsigned long)",
    "public: __thiscall CIlNt4Kernel32::CIlNt4Kernel32(class CIlNt4Kernel32 const &)",
    "public: virtual int __thiscall CIlAdvapi32::LookupPrivilegeValueW(unsigned short const *,unsigned short const *,struct _LUID *)",
    "const CIlNt4Kernel32::`vftable'",
    "public: void __thiscall CIlNt4Kernel32::release_GlobalMemoryStatusEx(void)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupGetInfInformationW(void const *,unsigned long,struct _SP_INF_INFORMATION *,unsigned long,unsigned long *)",
    "public: virtual void * __thiscall CIlKernel32::GlobalLock(void *)",
    "private: static unsigned long __stdcall CIlNt4Netapi32::IlNetWkstaGetInfo(unsigned short *,unsigned long,unsigned char * *)",
    "private: static int (__stdcall* CIlNt4Kernel32::m_Process32FirstW)(void *,struct tagPROCESSENTRY32W *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiEnumDriverInfoW(void))(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long,struct _SP_DRVINFO_DATA_V2_W *)",
    "public: virtual int __thiscall CIlWimgapi::WIMCloseHandle(void *)",
    "public: __thiscall CIlKernel32::~CIlKernel32(void)",
    "struct IlW2kDynWs2_32Interface * g_W2kWs2_32",
    "public: virtual void __thiscall CIlKernel32::DeleteCriticalSection(struct _RTL_CRITICAL_SECTION *)",
    "public: virtual unsigned long __thiscall CIlNt4Netapi32::NetWkstaGetInfo(unsigned short *,unsigned long,unsigned char * *)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiGetDeviceRegistryPropertyW(void)",
    "public: void * (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiGetClassDevsW(void))(struct _GUID const *,unsigned short const *,struct HWND__ *,unsigned long)",
    "public: virtual int __thiscall CIlWs2_32::sendto(unsigned int,char const *,int,int,struct sockaddr const *,int)",
    "struct IOleaut32Interface * g_Oleaut32",
    "public: virtual void * __thiscall CIlKernel32::CreateFileMappingW(void *,struct _SECURITY_ATTRIBUTES *,unsigned long,unsigned long,unsigned long,unsigned short const *)",
    "public: unsigned long (__stdcall*__thiscall CIlNt4Netapi32::get_NetApiBufferFree(void))(void *)",
    "public: virtual int __thiscall CIlAdvapi32::SetSecurityDescriptorOwner(void *,void *,int)",
    "public: virtual int __thiscall CIlWs2_32::closesocket(unsigned int)",
    "public: class CIlWs2_32 & __thiscall CIlWs2_32::operator=(class CIlWs2_32 const &)",
    "public: virtual void * __thiscall CIlNt4Kernel32::CreateToolhelp32Snapshot(unsigned long,unsigned long)",
    "const CIlKernel32::`vftable'",
    "private: static void (__stdcall* CIlW2kDynWs2_32::m_freeaddrinfo)(struct addrinfo *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiSetDeviceInstallParamsW(void))(void *,struct _SP_DEVINFO_DATA *,struct _SP_DEVINSTALL_PARAMS_W *)",
    "public: void __thiscall CIlNt4Advapi32::release_InitiateSystemShutdownExW(void)",
    "public: void __thiscall CIlNt4Kernel32::release_Process32FirstW(void)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountLockServiceDatabase",
    "public: virtual unsigned long __thiscall CIlWimgapi::WIMRegisterMessageCallback(void *,int (__stdcall*)(void),void *)",
    "public: virtual void * __thiscall CIlKernel32::CreateFileW(unsigned short const *,unsigned long,unsigned long,struct _SECURITY_ATTRIBUTES *,unsigned long,unsigned long,void *)",
    "const CIlOleaut32::`vftable'",
    "private: static unsigned long __stdcall CIlNt4Netapi32::IlNetLocalGroupEnum(unsigned short const *,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *,unsigned long *)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_InitiateSystemShutdownExW)(unsigned short *,unsigned short *,unsigned long,int,int,unsigned long)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_UnlockServiceDatabase)(void *)",
    "public: virtual unsigned short * __thiscall CIlKernel32::GetCommandLineW(void)",
    "private: static unsigned long __stdcall CIlNt4Netapi32::IlNetUserDel(unsigned short const *,unsigned short const *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiEnumDriverInfoW",
    "private: static int __stdcall CIlNt4Advapi32::IlConvertStringSidToSidW(unsigned short *,void * *)",
    "public: class CDynLib & __thiscall CDynLib::operator=(class CDynLib const &)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiCreateDeviceInfoListExW(void)",
    "public: virtual int __thiscall CIlWs2_32::getsockopt(unsigned int,int,int,char *,int *)",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_ConvertStringSecurityDescriptorToSecurityDescriptorW(void))(unsigned short const *,unsigned long,void * *,unsigned long *)",
    "public: virtual int (__stdcall*__thiscall CIlKernel32::GetProcAddress(struct HINSTANCE__ *,char const *))(void)",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_CreateWellKnownSid(void))(enum WELL_KNOWN_SID_TYPE,void *,void *,unsigned long *)",
    "private: static struct HKEY__ * __stdcall CIlNt4Setupapi::IlSetupDiOpenDevRegKey(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long,unsigned long,unsigned long)",
    "public: virtual unsigned short __thiscall CIlWs2_32::htons(unsigned short)",
    "public: virtual struct SC_HANDLE__ * __thiscall CIlNt4Advapi32::OpenSCManagerW(unsigned short const *,unsigned short const *,unsigned long)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiSetSelectedDriverW(void *,struct _SP_DEVINFO_DATA *,struct _SP_DRVINFO_DATA_V2_W *)",
    "private: static int __stdcall CIlNt4Advapi32::IlQueryServiceConfigW(struct SC_HANDLE__ *,struct _QUERY_SERVICE_CONFIGW *,unsigned long,unsigned long *)",
    "class CIlUser32 IlUser32",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiGetDeviceInstallParamsW(void *,struct _SP_DEVINFO_DATA *,struct _SP_DEVINSTALL_PARAMS_W *)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountConvertStringSecurityDescriptorToSecurityDescriptorW",
    "struct IW2kAdvapi32Interface * g_Nt4Advapi32",
    "public: void __thiscall CIlNt4Netapi32::release_NetLocalGroupAddMembers(void)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountOpenServiceW",
    "struct IAdvapi32Interface * g_Advapi32",
    "public: struct SC_HANDLE__ * (__stdcall*__thiscall CIlNt4Advapi32::get_OpenSCManagerW(void))(unsigned short const *,unsigned short const *,unsigned long)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiDestroyDriverInfoList(void)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiSetDeviceInstallParamsW",
    "public: __thiscall CIlNt4Setupapi::CIlNt4Setupapi(class CIlNt4Setupapi const &)",
    "public: virtual int __thiscall CIlAdvapi32::CryptGetKeyParam(unsigned long,unsigned long,unsigned char *,unsigned long *,unsigned long)",
    "struct IW2kUser32Interface * g_Nt4User32",
    "public: unsigned long (__stdcall*__thiscall CIlNt4Netapi32::get_NetLocalGroupAddMembers(void))(unsigned short const *,unsigned short const *,unsigned long,unsigned char *,unsigned long)",
    "public: virtual unsigned long __thiscall CIlNt4Netapi32::NetUserAdd(unsigned short const *,unsigned long,unsigned char *,unsigned long *)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountConvertSecurityDescriptorToStringSecurityDescriptorW",
    "public: __thiscall CIlWs2_32::CIlWs2_32(class CIlWs2_32 const &)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiSetDeviceInstallParamsW(void)",
    "private: static int __stdcall CIlNt4Kernel32::IlProcess32NextW(void *,struct tagPROCESSENTRY32W *)",
    "public: virtual void __thiscall CIlW2kDynWs2_32::freeaddrinfo(struct addrinfo *)",
    "public: virtual void __thiscall CIlKernel32::InitializeCriticalSection(struct _RTL_CRITICAL_SECTION *)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountConvertSidToStringSidW",
    "public: virtual int __thiscall CIlKernel32::GetVolumeInformationW(unsigned short const *,unsigned short *,unsigned long,unsigned long *,unsigned long *,unsigned long *,unsigned short *,unsigned long)",
    "private: static unsigned long CIlNt4Kernel32::m_RefCountGetSystemWindowsDirectoryW",
    "public: virtual int __thiscall CIlAdvapi32::GetSecurityDescriptorDacl(void *,int *,struct _ACL * *,int *)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiGetDeviceInstallParamsW)(void *,struct _SP_DEVINFO_DATA *,struct _SP_DEVINSTALL_PARAMS_W *)",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_InitiateSystemShutdownExW(void))(unsigned short *,unsigned short *,unsigned long,int,int,unsigned long)",
    "public: virtual int __thiscall CIlAdvapi32::GetTokenInformation(void *,enum _TOKEN_INFORMATION_CLASS,void *,unsigned long,unsigned long *)",
    "public: virtual unsigned int __thiscall CIlShell32::ExtractIconExW(unsigned short const *,int,struct HICON__ * *,struct HICON__ * *,unsigned int)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_EncryptFileW)(unsigned short const *)",
    "public: int (__stdcall*__thiscall CIlNt4Kernel32::get_GlobalMemoryStatusEx(void))(struct _MEMORYSTATUSEX *)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_CreateWellKnownSid)(enum WELL_KNOWN_SID_TYPE,void *,void *,unsigned long *)",
    "public: virtual long __thiscall CIlAdvapi32::RegSetKeySecurity(struct HKEY__ *,unsigned long,void *)",
    "private: static int (__stdcall* CIlNt4Kernel32::m_RegisterWaitForSingleObject)(void * *,void *,void (__stdcall*)(void *,unsigned char),void *,unsigned long,unsigned long)",
    "public: virtual int __thiscall CIlSetupapi::SetupGetStringFieldW(struct _INFCONTEXT *,unsigned long,unsigned short *,unsigned long,unsigned long *)",
    "private: static struct SC_HANDLE__ * (__stdcall* CIlNt4Advapi32::m_OpenSCManagerW)(unsigned short const *,unsigned short const *,unsigned long)",
    "private: static void __stdcall CIlW2kDynWs2_32::Ilfreeaddrinfo(struct addrinfo *)",
    "public: virtual int __thiscall CIlAdvapi32::CryptDestroyKey(unsigned long)",
    "public: virtual unsigned long __thiscall CIlNt4Netapi32::NetUserDel(unsigned short const *,unsigned short const *)",
    "const CIlMuisetupapi::`vftable'",
    "public: virtual unsigned long __thiscall CIlNt4Netapi32::NetLocalGroupAddMembers(unsigned short const *,unsigned short const *,unsigned long,unsigned char *,unsigned long)",
    "public: virtual int __thiscall CIlAdvapi32::CryptCreateHash(unsigned long,unsigned int,unsigned long,unsigned long,unsigned long *)",
    "public: virtual long __thiscall CIlAdvapi32::RegOpenKeyExW(struct HKEY__ *,unsigned short const *,unsigned long,unsigned long,struct HKEY__ * *)",
    "public: virtual unsigned long __thiscall CIlKernel32::GetCurrentThreadId(void)",
    "public: class CIlSetupapi & __thiscall CIlSetupapi::operator=(class CIlSetupapi const &)",
    "public: virtual void * __thiscall CIlKernel32::GetProcessHeap(void)",
    "public: void __thiscall CIlNt4Netapi32::release_NetWkstaGetInfo(void)",
    "class CIlNt4User32 IlNt4User32",
    "public: virtual int __thiscall CIlKernel32::GetExitCodeProcess(void *,unsigned long *)",
    "private: static unsigned long (__stdcall* CIlNt4Netapi32::m_NetUserEnum)(unsigned short const *,unsigned long,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *,unsigned long *)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountCreateServiceW",
    "private: static unsigned long CIlNt4Netapi32::m_RefCountNetUserEnum",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiOpenDeviceInfoW(void))(void *,unsigned short const *,struct HWND__ *,unsigned long,struct _SP_DEVINFO_DATA *)",
    "public: virtual int __thiscall CIlAdvapi32::IsValidSid(void *)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_CloseServiceHandle)(struct SC_HANDLE__ *)",
    "public: virtual void * __thiscall CIlKernel32::CreateEventW(struct _SECURITY_ATTRIBUTES *,int,int,unsigned short const *)",
    "public: virtual int __thiscall CIlSetupapi::SetupGetLineTextW(struct _INFCONTEXT *,void *,unsigned short const *,unsigned short const *,unsigned short *,unsigned long,unsigned long *)",
    "public: virtual long __thiscall CIlOle32::CoCreateInstance(struct _GUID const &,struct IUnknown *,unsigned long,struct _GUID const &,void * *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiGetDriverInfoDetailW",
    "public: __thiscall CIlNt4Kernel32::CIlNt4Kernel32(void)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiEnumDeviceInterfaces",
    "public: class CIlNt4Kernel32 & __thiscall CIlNt4Kernel32::operator=(class CIlNt4Kernel32 const &)",
    "private: static int (__stdcall* CIlNt4Userenv::m_CreateUserProfileExW)(void *,unsigned short const *,unsigned short const *,unsigned short *,unsigned long,int)",
    "private: static unsigned int (__stdcall* CIlNt4Kernel32::m_GetSystemWindowsDirectoryW)(unsigned short *,unsigned int)",
    "public: virtual unsigned long __thiscall CIlWs2_32::htonl(unsigned long)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupCloseFileQueue(void))(void *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiCallClassInstaller(void))(unsigned int,void *,struct _SP_DEVINFO_DATA *)",
    "private: static void * __stdcall CIlNt4Setupapi::IlSetupDiCreateDeviceInfoListExW(struct _GUID const *,struct HWND__ *,unsigned short const *,void *)",
    "public: virtual int __thiscall CIlWs2_32::select(int,struct fd_set *,struct fd_set *,struct fd_set *,struct timeval const *)",
    "public: void __thiscall CIlNt4Kernel32::release_RegisterWaitForSingleObject(void)",
    "public: int (__stdcall*__thiscall CIlNt4User32::get_LockSetForegroundWindow(void))(unsigned int)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountOpenSCManagerW",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiSetSelectedDriverW",
    "public: virtual int __thiscall CIlAdvapi32::CryptSetKeyParam(unsigned long,unsigned long,unsigned char const *,unsigned long)",
    "private: static void * (__stdcall* CIlNt4Kernel32::m_CreateToolhelp32Snapshot)(unsigned long,unsigned long)",
    "public: virtual unsigned long __thiscall CIlNt4Netapi32::NetLocalGroupAdd(unsigned short const *,unsigned long,unsigned char *,unsigned long *)",
    "struct IVersionInterface * g_Version",
    "private: static int (__stdcall* CIlW2kDynWs2_32::m_getnameinfo)(struct sockaddr const *,int,char *,unsigned long,char *,unsigned long,int)",
    "public: __thiscall CIlDeplorch::CIlDeplorch(void)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiDestroyDeviceInfoList(void)",
    "public: virtual int __thiscall CIlKernel32::TerminateProcess(void *,unsigned int)",
    "public: virtual void __thiscall CIlW2kDynWs2_32::release_getaddrinfo(void)",
    "public: __thiscall CIlW2kDynWs2_32::CIlW2kDynWs2_32(class CIlW2kDynWs2_32 const &)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiOpenDeviceInfoW)(void *,unsigned short const *,struct HWND__ *,unsigned long,struct _SP_DEVINFO_DATA *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiBuildDriverInfoList",
    "private: static unsigned long CIlNt4Userenv::m_RefCountCreateUserProfileExW",
    "private: static unsigned int __stdcall CIlNt4Kernel32::IlGetSystemWindowsDirectoryW(unsigned short *,unsigned int)",
    "private: static unsigned long CIlNt4Netapi32::m_RefCountNetUserAdd",
    "public: virtual void * __thiscall CIlKernel32::GetCurrentProcess(void)",
    "public: virtual unsigned int __thiscall CIlWs2_32::socket(int,int,int)",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_ConvertSecurityDescriptorToStringSecurityDescriptorW(void))(void *,unsigned long,unsigned long,unsigned short * *,unsigned long *)",
    "public: virtual void * __thiscall CIlKernel32::HeapCreate(unsigned long,unsigned long,unsigned long)",
    "private: static unsigned long CIlW2kDynWs2_32::m_RefCountgetnameinfo",
    "private: static long (__stdcall* CIlNt6Userenv::m_CreateProfile)(unsigned short const *,unsigned short const *,unsigned short *,unsigned long)",
    "public: virtual long __thiscall CIlOle32::CreateStreamOnHGlobal(void *,int,struct IStream * *)",
    "public: virtual unsigned long __thiscall CIlVersion::GetFileVersionInfoSizeW(unsigned short const *,unsigned long *)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupScanFileQueueW(void *,unsigned long,struct HWND__ *,unsigned int (__stdcall*)(void *,unsigned int,unsigned int,unsigned int),void *,unsigned long *)",
    "public: virtual int __thiscall CIlUser32::PostMessageW(struct HWND__ *,unsigned int,unsigned int,long)",
    "private: static unsigned long CIlNt4Netapi32::m_RefCountNetLocalGroupAddMembers",
    "public: virtual long __thiscall CIlAdvapi32::RegDeleteValueW(struct HKEY__ *,unsigned short const *)",
    "private: static int __stdcall CIlNt4Advapi32::IlConvertSecurityDescriptorToStringSecurityDescriptorW(void *,unsigned long,unsigned long,unsigned short * *,unsigned long *)",
    "const CIlVersion::`vftable'",
    "private: static void * (__stdcall* CIlNt4Advapi32::m_LockServiceDatabase)(struct SC_HANDLE__ *)",
    "public: virtual int __thiscall CIlSetupapi::SetupFindNextLine(struct _INFCONTEXT *,struct _INFCONTEXT *)",
    "public: void __thiscall CIlNt4Advapi32::release_EnumServicesStatusExW(void)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiDestroyDeviceInfoList",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiGetDriverInfoDetailW(void)",
    "public: virtual int __thiscall CIlWs2_32::send(unsigned int,char const *,int,int)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupOpenFileQueue",
    "public: virtual int __thiscall CIlNt4Advapi32::ChangeServiceConfigW(struct SC_HANDLE__ *,unsigned long,unsigned long,unsigned long,unsigned short const *,unsigned short const *,unsigned long *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupScanFileQueueW(void *,unsigned long,struct HWND__ *,unsigned int (__stdcall*)(void *,unsigned int,unsigned int,unsigned int),void *,unsigned long *)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_QueryServiceConfigW)(struct SC_HANDLE__ *,struct _QUERY_SERVICE_CONFIGW *,unsigned long,unsigned long *)",
    "public: virtual int __thiscall CIlWs2_32::WSAIoctl(unsigned int,unsigned long,void *,unsigned long,void *,unsigned long,unsigned long *,struct _OVERLAPPED *,void (__stdcall*)(unsigned long,unsigned long,struct _OVERLAPPED *,unsigned long))",
    "public: __thiscall CIlVersion::CIlVersion(class CIlVersion const &)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiOpenDevRegKey",
    "class CIlNt4Userenv IlNt4Userenv",
    "const CIlW2kDynWs2_32::`vftable'",
    "public: __thiscall CIlNt4Advapi32::CIlNt4Advapi32(void)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountCreateWellKnownSid",
    "public: virtual long __thiscall CIlAdvapi32::RegEnumValueW(struct HKEY__ *,unsigned long,unsigned short *,unsigned long *,unsigned long *,unsigned long *,unsigned char *,unsigned long *)",
    "public: virtual unsigned long __thiscall CIlAdvapi32::SetNamedSecurityInfoW(unsigned short *,enum _SE_OBJECT_TYPE,unsigned long,void *,void *,struct _ACL *,struct _ACL *)",
    "const CIlWs2_32::`vftable'",
    "public: virtual int __thiscall CIlWs2_32::getsockname(unsigned int,struct sockaddr *,int *)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiEnumDeviceInterfaces(void *,struct _SP_DEVINFO_DATA *,struct _GUID const *,unsigned long,struct _SP_DEVICE_INTERFACE_DATA *)",
    "private: static int (__stdcall* CIlNt4Kernel32::m_GlobalMemoryStatusEx)(struct _MEMORYSTATUSEX *)",
    "public: __thiscall CIlKernel32::CIlKernel32(void)",
    "public: virtual int __thiscall CIlKernel32::ResetEvent(void *)",
    "public: __thiscall CIlWimgapi::CIlWimgapi(class CIlWimgapi const &)"
  ],
  "miguiresource.dll": "No exports",
  "mimefilt.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "miutils.dll": [
    "Instance_MatchKeys",
    "RCClass_AddMethodQualifierArrayItem",
    "_WMIQualifierFlavorToMI@8",
    "_TypeToCimType@4",
    "_WMIExtendedObjectToInstance@20",
    "_SetProperties@24",
    "RtlInterlockedCompareWait",
    "_InstanceToWMIEvent@16",
    "SetModifiedPropertyNamesToContext",
    "OSC_Type_GetSize",
    "RCClass_New",
    "_OptionsValueToContextValue@24",
    "public: __thiscall DynamicSchema::DynamicSchema(void)",
    "public: __thiscall CCritSec::CCritSec(void)",
    "RCClass_AddMethod",
    "protected: virtual long __stdcall MiSchema::SetFlags(long)",
    "Class_New",
    "_WMIObjectToClass@20",
    "public: virtual long __stdcall StaticSchema::GetMiClass(unsigned short const *,unsigned short const *,unsigned short const *,struct _MI_Class const * *)",
    "RCClass_AddElement",
    "_CompareValue@12",
    "RCClass_AddMethodParameter",
    "public: __thiscall WMISchema::WMISchema(void)",
    "XML_StripWhitespace",
    "public: virtual long __stdcall WMISchema::GetNoneCachedWmiClass(unsigned short const *,struct IWbemServices *,class ATL::CComPtr &,struct IConversionContext *)",
    "ClassCache_GetClass",
    "RtlReleaseFastLockExclusive",
    "_CimTypeToType@8",
    "RtlQueueAcquireFastLockShared",
    "public: long __stdcall WMISchema::DeInitialize(void)",
    "_SubscriptionDeliveryOptions_Create@12",
    "Instance_New",
    "_OperationOptions_CopyOptions@8",
    "RtlQueueAcquireFastLockExclusive",
    "RCClass_AddMethodQualifier",
    "_Options_FindValue@8",
    "PublishProviderWriteMessage",
    "XML_SetText",
    "public: __thiscall StaticSchema::StaticSchema(void)",
    "OSC_StringToMiValue",
    "RtlDeleteCachedFastLock",
    "XML_RegisterNameSpace",
    "public: virtual long __stdcall DynamicSchema::CreateInstance(unsigned short const *,struct IWbemClassObject *,unsigned long,struct _MI_PropertySet const *,bool,struct _MI_Instance * &,struct IConversionContext *)",
    "CreateConversionContext",
    "XML_FormatError",
    "Instance_SetResourceURI",
    "PublishDebugInfo",
    "PropertySet_New",
    "RtlQueueAcquireCachedFastLockShared",
    "_PropertyToVariant@20",
    "WriteWBEM_MC_CLIENT_REQUEST_FAILURE",
    "_CompareInstance@12",
    "Instance_SetElementArrayItem",
    "ResultToHRESULT",
    "RtlTryAcquireFastLockExclusive",
    "_OperationOptions_Create@12",
    "RtlInitializeCachedFastLock",
    "public: class CCritSec & __thiscall CCritSec::operator=(class CCritSec const &)",
    "XMLDOM_Free",
    "_GetReferenceFromWMIObjectPath@16",
    "XMLDOM_Parse",
    "RCClass_AddMethodParameterQualifierArray",
    "RtlReleaseFastLockShared",
    "CimStatusCodeFromWindowsError",
    "Instance_Clone",
    "RtlTryAcquireCachedFastLockShared",
    "RtlReleaseCachedFastLockExclusive",
    "_InstanceToWMIObject@24",
    "Config_GetRegString",
    "RCClass_AddElementArrayItem",
    "Instance_InitDynamic",
    "Instance_Construct",
    "XML_Init",
    "public: __thiscall CAutoSetActivityId::CAutoSetActivityId(void)",
    "OSC_Batch_Strdup",
    "public: __thiscall CAutoSetActivityId::~CAutoSetActivityId(void)",
    "_VariantArrayToSafeArray@12",
    "public: long __stdcall StaticSchema::Initialize(struct _MI_Module const *)",
    "_OperationOptions_MigrateOptions@8",
    "_ValueClear@8",
    "OSC_Batch_Destroy",
    "_SubscriptionDeliveryOptions_MigrateOptions@8",
    "public: virtual long __stdcall WMISchema::GetWmiClass(unsigned short const *,unsigned short const *,class ATL::CComPtr &,struct IConversionContext *)",
    "RCClass_AddClassQualifierArray",
    "CimError_Construct",
    "PublishDebugMessage",
    "ClassCache_New",
    "ClassCache_Delete",
    "Instance_IsDynamic",
    "public: class CAutoSetActivityId & __thiscall CAutoSetActivityId::operator=(class CAutoSetActivityId const &)",
    "RCClass_AddMethodParameterQualifierArrayItem",
    "_VariantToValue@28",
    "RtlInterlockedWakeAll",
    "public: __thiscall WMISchema::WMISchema(bool)",
    "Instance_SetServerName",
    "RCClass_AddMethodQualifierArray",
    "RCClass_AddElementQualifierArray",
    "_DestinationOptions_MigrateOptions@16",
    "PublishClientOperationInfo",
    "_FindMethodDecl@8",
    "_QualifierFlavorToWMI@4",
    "_FindClassDecl@8",
    "PublishProviderResult",
    "_WMIEventToCIMIndication@12",
    "public: virtual long __stdcall IndicationSchema::CreateInstance(unsigned short const *,struct IWbemClassObject *,unsigned long,struct _MI_PropertySet const *,bool,struct _MI_Instance * &,struct IConversionContext *)",
    "_InstanceToWMIExtendedStatus@16",
    "public: virtual __thiscall WMISchema::~WMISchema(void)",
    "public: virtual long __stdcall DynamicSchema::GetMiClass(unsigned short const *,unsigned short const *,unsigned short const *,struct _MI_Class const * *)",
    "RtlReleaseCachedFastLockShared",
    "RCClass_AddClassQualifierArrayItem",
    "RCClass_AddElementQualifier",
    "ResultFromHRESULT",
    "_WMIObjectToInstance@28",
    "_FindQualifierInWMIObject@16",
    "MI_Hash",
    "_DestinationOptions_Create@8",
    "CimErrorFromErrorCode",
    "SetCorrelationIdToWbemContext",
    "RCClass_AddElementArray",
    "_ValueToVariant@24",
    "ClassCache_AddClass",
    "RCClass_AddElementQualifierArrayItem",
    "RtlQueueAcquireCachedFastLockExclusive",
    "RCClass_AddClassQualifier",
    "Config_GetProtocolHandlerDetails",
    "_DestinationOptions_Duplicate@8",
    "MiErrorCategoryFromWindowsError",
    "XML_Next",
    "public: __thiscall CCritSec::~CCritSec(void)",
    "RtlTryAcquireFastLockShared",
    "public: virtual long __stdcall IndicationSchema::GetMiClass(unsigned short const *,unsigned short const *,unsigned short const *,struct _MI_Class const * *)",
    "Instance_SetElementArray",
    "PublishProviderWriteError",
    "_IsLifeCycleIndicationQuery@12",
    "public: __thiscall IndicationSchema::IndicationSchema(void)",
    "OSC_Batch_Get",
    "RtlpInitFastLock",
    "_ParametersToWMIObject@40",
    "public: virtual long __stdcall MiSchema::GetFlags(void)const",
    "public: virtual long __stdcall StaticSchema::CreateInstance(unsigned short const *,struct IWbemClassObject *,unsigned long,struct _MI_PropertySet const *,bool,struct _MI_Instance * &,struct IConversionContext *)",
    "Instance_GetResourceURI",
    "_GetMethodParameters@32",
    "GetCorrelationId",
    "XML_PutError",
    "RCClass_AddMethodParameterQualifier",
    "public: virtual long __stdcall WMISchema::GetWmiIWbemServices(unsigned short const *,class ATL::CComPtr &)"
  ],
  "mlang.dll": [
    "ConvertINetReset",
    "Rfc1766ToLcidW",
    "IsConvertINetStringAvailable",
    "ConvertINetString",
    "ConvertINetUnicodeToMultiByte",
    "LcidToRfc1766A",
    "ConvertINetMultiByteToUnicode",
    "DllCanUnloadNow",
    "Rfc1766ToLcidA",
    "GetGlobalFontLinkObject",
    "DllGetClassObject",
    "LcidToRfc1766W"
  ],
  "mmcbase.dll": [
    "public: class mmcerror::SC __thiscall CEventBuffer::ScEmitOrPostpone(struct IDispatch *,long,class ATL::CComVariant *,int)",
    "public: void __thiscall mmcerror::SC::SetSnapinName(unsigned short const *)",
    "long __stdcall SCODEFromSc(class mmcerror::SC const &)",
    "class CEventBuffer & __stdcall GetEventBuffer(void)",
    "public: static void __stdcall mmcerror::SC::SetMainThreadID(unsigned long)",
    "void __stdcall FormatErrorString(unsigned short const *,class mmcerror::SC,unsigned int,unsigned short *,int)",
    "private: static unsigned long mmcerror::SC::s_dwMainThreadID",
    "public: static bool (__stdcall*__stdcall BookKeeping::RegisterSnapinInterfaceErrorHandler(bool (__stdcall*)(class SnapinBookkeepingInfo &,enum BookKeeping::_SnapinError,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,struct _EXCEPTION_POINTERS *)))(class SnapinBookkeepingInfo &,enum BookKeeping::_SnapinError,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,struct _EXCEPTION_POINTERS *)",
    "public: void __thiscall mmcerror::SC::Trace_(void)const",
    "public: static long __stdcall BookKeeping::ReleaseSnapinInterface(struct IUnknown *,int)",
    "public: static long __stdcall BookKeeping::InitInstance(void)",
    "public: static class SnapinBookkeepingInfo const & __stdcall BookKeeping::FindSnapin(struct IUnknown *)",
    "public: static bool __stdcall BookKeeping::FxSnapinException(int,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,int,struct HWND__ *)",
    "public: __thiscall CEventBuffer::~CEventBuffer(void)",
    "public: bool __thiscall mmcerror::SC::IsError(void)const",
    "public: void __thiscall mmcerror::SC::FatalError(void)const",
    "private: static struct HWND__ * mmcerror::SC::s_hWnd",
    "public: static long __stdcall BookKeeping::RemoveItem(void *)",
    "public: void __thiscall CEventBuffer::Unlock(void)",
    "long __stdcall MMCUpdateRegistry(int,class CObjectRegParams const *,class CControlRegParams const *)",
    "int __stdcall MMCErrorBox(unsigned int,class mmcerror::SC,unsigned int)",
    "public: class mmcerror::SC & __thiscall mmcerror::SC::FromWin32(long)",
    "private: static class CConsoleEventDispatcher * CConsoleEventDispatcherProvider::s_pDispatcher",
    "public: static long __stdcall BookKeeping::LKResult2HRESULT(long)",
    "public: class mmcerror::SC & __thiscall mmcerror::SC::operator=(long)",
    "public: void __thiscall mmcerror::SC::GetErrorMessage(unsigned int,unsigned short *)const",
    "public: bool __thiscall mmcerror::SC::operator==(long)const",
    "class CEventSource & __stdcall GetComObjectEventSource(void)",
    "public: __thiscall mmcerror::SC::SC(class mmcerror::SC const &)",
    "public: static bool __stdcall ItemHandle::IsValid(class ItemHandle const *)",
    "public: static long __stdcall BookKeeping::RegisterThread(int,int,unsigned long,enum BookKeeping::SnapinThreadFlags)",
    "public: class mmcerror::SC & __thiscall mmcerror::SC::operator=(class mmcerror::SC const &)",
    "public: static void __stdcall BookKeeping::InterfaceMethodActivationContextException(int,unsigned short const *,unsigned short const *,unsigned long,struct _EXCEPTION_POINTERS *)",
    "public: static void __stdcall mmcerror::SC::SetHinst(struct HINSTANCE__ *)",
    "public: static void __stdcall BookKeeping::InterfaceNotFound(int,unsigned short const *)",
    "private: static unsigned int mmcerror::SC::s_CallDepth",
    "public: __thiscall mmcerror::SC::~SC(void)",
    "private: __thiscall CMMCStrongReferences::CMMCStrongReferences(void)",
    "public: __thiscall CEventLock::CEventLock(void)",
    "InsideModalLoop",
    "public: long __thiscall mmcerror::SC::GetCode(void)const",
    "public: long __thiscall mmcerror::SC::ToHr(void)const",
    "private: static class CMMCStrongReferences & __stdcall CMMCStrongReferences::GetSingletonObject(void)",
    "public: static long __stdcall BookKeeping::AddSnapin(unsigned short const *,int &)",
    "int __stdcall MMCErrorBox(unsigned short const *,unsigned int)",
    "private: static struct HWND__ * mmcerror::SC::s_hWndModal",
    "long __stdcall LoadStandardOverlays(struct _IMAGELIST *,int,int *,int *)",
    "public: static long __stdcall CMMCWatsonAPI::ExceptionFilter(struct _EXCEPTION_POINTERS *,int)",
    "class mmcerror::SC __stdcall ScFromMMC(long)",
    "public: __thiscall CEventBuffer::CEventBuffer(void)",
    "public: static int __stdcall BookKeeping::GetNewSnapinInstanceId(void)",
    "int __stdcall MMCErrorBox(unsigned int,unsigned int)",
    "private: bool __thiscall CMMCStrongReferences::InternalLastRefReleased(void)",
    "private: enum mmcerror::SC::facility_type __thiscall mmcerror::SC::GetFacility(void)const",
    "public: static unsigned short const * __stdcall BookKeeping::GetSnapinName(int)",
    "public: static long __stdcall BookKeeping::UnregisterThread(int,unsigned long)",
    "int __stdcall MMCErrorBox(unsigned short const *,class mmcerror::SC,unsigned int)",
    "public: static unsigned short const * __stdcall BookKeeping::GetSnapinModuleName(int)",
    "public: static class mmcerror::SC __stdcall CConsoleEventDispatcherProvider::ScGetConsoleEventDispatcher(class CConsoleEventDispatcher * &)",
    "public: static void __stdcall BookKeeping::InvalidMMCInterface(int,unsigned short const *,unsigned short const *)",
    "public: static long __stdcall BookKeeping::UnregisterAllSnapinInstanceThreads(int)",
    "public: static void __stdcall BookKeeping::InterfaceMethodException(int,unsigned short const *,unsigned short const *,unsigned long,struct _EXCEPTION_POINTERS *)",
    "public: static struct HWND__ * __stdcall mmcerror::SC::GetHWnd(void)",
    "public: static unsigned short const * __stdcall mmcerror::SC::GetHelpFile(void)",
    "public: __thiscall CEventLock::~CEventLock(void)",
    "public: static void __stdcall mmcerror::SC::SetHWnd(struct HWND__ *)",
    "long __stdcall HrFromSc(class mmcerror::SC const &)",
    "public: static long __stdcall BookKeeping::FindAllSnapinUIThreads(int,unsigned long * *,unsigned long *)",
    "public: __thiscall mmcerror::SC::SC(long)",
    "public: void __thiscall mmcerror::SC::Throw(void)",
    "public: __thiscall CEventBuffer::CEventBuffer(class CEventBuffer const &)",
    "public: static long __stdcall BookKeeping::DumpWatsonTables(void *,unsigned short const *,int)",
    "public: static void __stdcall BookKeeping::MMCInterfaceMethodException(int,unsigned short const *,unsigned short const *,unsigned long,struct _EXCEPTION_POINTERS *,enum BookKeeping::_SnapinError)",
    "public: unsigned short const * __thiscall mmcerror::SC::GetSnapinName(void)const",
    "public: static bool __stdcall BookKeeping::EnableDiagnosticMessageBox(bool)",
    "int __stdcall MMC_PickIconDlg(struct HWND__ *,unsigned short *,unsigned int,int *)",
    "public: bool __thiscall mmcerror::SC::operator!=(long)const",
    "public: unsigned short const * __thiscall mmcerror::SC::GetFunctionName(void)const",
    "public: static void __stdcall BookKeeping::InterfaceFailure(int,unsigned short const *,unsigned short const *)",
    "public: static long __stdcall BookKeeping::AddItem(class ItemHandle &)",
    "private: unsigned long __thiscall CMMCStrongReferences::InternalAddRef(void)",
    "public: class mmcerror::SC & __thiscall mmcerror::SC::FromLastError(void)",
    "public: static void __stdcall BookKeeping::MMCNullInterface(int,unsigned short const *,unsigned short const *)",
    "public: static class SnapinBookkeepingInfo const & __stdcall BookKeeping::FindSnapin(unsigned short const *)",
    "public: int __thiscall mmcerror::SC::operator!(void)const",
    "void __stdcall TraceSnapinError(unsigned short const *,class mmcerror::SC const &)",
    "public: static struct HINSTANCE__ * __stdcall mmcerror::SC::GetHinst(void)",
    "public: void __thiscall mmcerror::SC::`default constructor closure'(void)",
    "public: void __thiscall mmcerror::SC::CheckCallingThreadID(void)",
    "public: static unsigned long __stdcall mmcerror::SC::GetMainThreadID(void)",
    "void __stdcall FormatErrorIds(unsigned int,class mmcerror::SC,unsigned int,unsigned short *)",
    "public: bool __thiscall mmcerror::SC::operator!=(class mmcerror::SC const &)const",
    "ReportFxSnapinException",
    "EnterModalLoop",
    "public: __thiscall mmcerror::SC::operator bool(void)const",
    "struct HINSTANCE__ * __stdcall GetStringModule(void)",
    "public: void __thiscall mmcerror::SC::Throw(long)",
    "private: void __thiscall mmcerror::SC::MakeSc(enum mmcerror::SC::facility_type,long)",
    "public: class CEventBuffer & __thiscall CEventBuffer::operator=(class CEventBuffer const &)",
    "public: static bool __stdcall BookKeeping::AddSnapinInterface(struct IUnknown *,unsigned short const *,int &)",
    "public: static void __stdcall CMMCWatsonAPI::ForceException(int)",
    "public: static unsigned long __stdcall CMMCStrongReferences::Release(void)",
    "public: static class mmcerror::SC __stdcall CConsoleEventDispatcherProvider::ScSetConsoleEventDispatcher(class CConsoleEventDispatcher *)",
    "public: bool __thiscall mmcerror::SC::operator==(class mmcerror::SC const &)const",
    "public: bool __thiscall CEventBuffer::IsLocked(void)",
    "public: class mmcerror::SC & __thiscall mmcerror::SC::FromMMC(long)",
    "public: void __thiscall mmcerror::SC::TraceAndClear(void)",
    "public: unsigned long __thiscall mmcerror::SC::GetHelpID(void)",
    "public: static struct HWND__ * __stdcall mmcerror::SC::GetModalHWND(void)",
    "void __stdcall FormatErrorShort(class mmcerror::SC,unsigned int,unsigned short *)",
    "public: static unsigned long __stdcall CMMCStrongReferences::AddRef(void)",
    "public: static void __stdcall BookKeeping::MMCInterfaceLeak(int,unsigned short const *)",
    "public: static bool __stdcall CMMCStrongReferences::LastRefReleased(void)",
    "public: static void __stdcall BookKeeping::MMCInterfaceError(int,unsigned short const *,unsigned short const *)",
    "public: void __thiscall CEventBuffer::Lock(void)",
    "int __stdcall MMCErrorBox(class mmcerror::SC,unsigned int)",
    "public: static struct HWND__ * __stdcall mmcerror::SC::SetModalHWND(struct HWND__ *)",
    "LeaveModalLoop",
    "public: static class SnapinBookkeepingInfo const & __stdcall BookKeeping::FindSnapin(int)",
    "private: unsigned long __thiscall CMMCStrongReferences::InternalRelease(void)",
    "public: static void __stdcall BookKeeping::InvalidInterface(int,unsigned short const *,unsigned short const *)",
    "void __stdcall TraceError(unsigned short const *,class mmcerror::SC const &)",
    "public: void __thiscall mmcerror::SC::Clear(void)",
    "public: void __thiscall mmcerror::SC::SetFunctionName(unsigned short const *)",
    "public: static long __stdcall BookKeeping::FindAllSnapinUIThreads(unsigned long * *,unsigned long *)",
    "public: static void __stdcall BookKeeping::InvalidMMCInterfaceRelease(int,unsigned short const *,unsigned short const *)",
    "private: class mmcerror::SC __thiscall CEventBuffer::ScFlushPostponed(void)",
    "public: static class ItemHandle * __stdcall BookKeeping::FindItem(void *)",
    "private: static struct HINSTANCE__ * mmcerror::SC::s_hInst",
    "public: class CEventLock & __thiscall CEventLock::operator=(class CEventLock const &)",
    "public: class CMMCStrongReferences & __thiscall CMMCStrongReferences::operator=(class CMMCStrongReferences const &)"
  ],
  "mmci.dll": [
    "mmWOW64MediaClassInstallerA",
    "MediaClassInstaller"
  ],
  "mmcico.dll": [
    "MediaClassCoInstaller"
  ],
  "mmcndmgr.dll": [
    "DllRegisterServer",
    "CreateExecutivePlatform",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mmcshext.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mmcss.dll": [
    "ServiceMain",
    "ToServiceMain"
  ],
  "mmres.dll": "No exports",
  "modemui.dll": [
    "InvokeControlPanel",
    "UnimodemGetExtendedCaps",
    "UnimodemGetDefaultCommConfig",
    "drvGetDefaultCommConfigW",
    "UnimodemDevConfigDialog",
    "ModemCplDlgProc",
    "ModemPropPagesProvider",
    "drvCommConfigDialogW",
    "drvSetDefaultCommConfigA",
    "drvSetDefaultCommConfigW",
    "drvCommConfigDialogA",
    "drvGetDefaultCommConfigA",
    "QueryModemForCountrySettings",
    "CountryRunOnce"
  ],
  "montr_ci.dll": [
    "MonitorClassInstaller"
  ],
  "moricons.dll": "No exports",
  "mpr.dll": [
    "WNetClearConnections",
    "WNetRestoreSingleConnectionW",
    "WNetDirectoryNotifyA",
    "WNetConnectionDialog1W",
    "WNetGetPropertyTextA",
    "WNetOpenEnumA",
    "WNetEnumResourceW",
    "WNetGetResourceInformationW",
    "WNetAddConnection3W",
    "MultinetGetConnectionPerformanceW",
    "WNetGetPropertyTextW",
    "WNetCancelConnectionA",
    "WNetGetHomeDirectoryW",
    "WNetDisconnectDialog2",
    "WNetGetLastErrorW",
    "WNetCancelConnection2W",
    "WNetPropertyDialogW",
    "WNetPropertyDialogA",
    "WNetGetProviderNameW",
    "WNetGetResourceParentW",
    "WNetSetLastErrorA",
    "ShowReconnectDialogEnd",
    "WNetGetDirectoryTypeW",
    "I_MprSaveConn",
    "MultinetGetConnectionPerformanceA",
    "WNetCancelConnectionW",
    "DoBroadcastSystemMessage",
    "WNetUseConnectionA",
    "WNetUseConnectionW",
    "WNetCancelConnection2A",
    "WNetConnectionDialog",
    "WNetSetLastErrorW",
    "WNetGetUserW",
    "WNetCloseEnum",
    "WNetRestoreAllConnectionsW",
    "WNetGetUserA",
    "WNetAddConnection3A",
    "WNetGetUniversalNameA",
    "MultinetGetErrorTextA",
    "WNetAddConnectionA",
    "WNetAddConnection2W",
    "WNetGetResourceParentA",
    "WNetOpenEnumW",
    "WNetConnectionDialog2",
    "WNetGetSearchDialog",
    "WNetPasswordChangeNotify",
    "WNetGetConnection3W",
    "WNetAddConnectionW",
    "WNetGetConnection2W",
    "WNetSetConnectionA",
    "WNetLogonNotify",
    "WNetGetProviderNameA",
    "WNetConnectionDialog1A",
    "WNetGetNetworkInformationA",
    "ShowReconnectDialog",
    "WNetGetNetworkInformationW",
    "WNetFormatNetworkNameA",
    "WNetGetLastErrorA",
    "WNetDisconnectDialog1A",
    "WNetGetResourceInformationA",
    "WNetGetProviderTypeW",
    "WNetGetConnectionA",
    "WNetGetProviderTypeA",
    "DoCommandLinePrompt",
    "DoPasswordDialog",
    "MultinetGetErrorTextW",
    "ShowReconnectDialogUI",
    "WNetGetConnectionW",
    "WNetSetConnectionW",
    "WNetGetConnection2A",
    "WNetGetDirectoryTypeA",
    "WNetFormatNetworkNameW",
    "WNetDirectoryNotifyW",
    "WNetDisconnectDialog",
    "DoProfileErrorDialog",
    "WNetGetConnection3A",
    "WNetGetUniversalNameW",
    "WNetDisconnectDialog1W",
    "WNetSupportGlobalEnum",
    "WNetAddConnection2A",
    "WNetEnumResourceA"
  ],
  "mprapi.dll": [
    "MprAdminUserServerConnect",
    "MprConfigFilterGetInfo",
    "MprAdminInterfaceDeviceGetInfo",
    "MprAdminInterfaceGetCustomInfoEx",
    "MprAdminPortGetInfo",
    "MprAdminUpgradeUsers",
    "MprAdminConnectionGetInfo",
    "MprAdminInterfaceTransportSetInfo",
    "MprAdminMIBEntryGetFirst",
    "MprDomainRegisterRasServer",
    "MprAdminPortReset",
    "MprAdminServerConnect",
    "MprAdminUserGetInfo",
    "MprAdminInterfaceConnect",
    "MprConfigTransportGetInfo",
    "MprConfigServerRestore",
    "MprAdminUserRead",
    "MprConfigInterfaceCreate",
    "MprAdminMIBBufferFree",
    "MprConfigInterfaceSetCustomInfoEx",
    "MprConfigTransportDelete",
    "MprConfigFilterSetInfo",
    "MprConfigTransportCreate",
    "MprConfigInterfaceDelete",
    "MprAdminMIBEntryGet",
    "MprAdminUpdateConnection",
    "MprConfigGetGuidName",
    "MprAdminSendUserMessage",
    "MprConfigTransportEnum",
    "MprInfoBlockAdd",
    "MprAdminConnectionEnumEx",
    "MprAdminServerGetInfoEx",
    "MprAdminMIBEntryCreate",
    "MprAdminInterfaceGetHandle",
    "MprAdminInterfaceQueryUpdateResult",
    "MprAdminInterfaceTransportRemove",
    "MprAdminServerGetCredentials",
    "MprConfigInterfaceEnum",
    "MprAdminInterfaceUpdatePhonebookInfo",
    "MprAdminTransportGetInfo",
    "MprAdminInterfaceSetInfo",
    "MprAdminUserWriteProfFlags",
    "RasPrivilegeAndCallBackNumber",
    "MprInfoDuplicate",
    "MprAdminMIBServerConnect",
    "MprConfigServerBackup",
    "MprPortSetUsage",
    "MprAdminInterfaceGetInfo",
    "MprConfigServerGetInfo",
    "MprAdminTransportCreate",
    "MprConfigServerGetInfoEx",
    "MprAdminUserOpen",
    "MprConfigInterfaceGetCustomInfoEx",
    "MprConfigBufferFree",
    "MprInfoBlockFind",
    "CompressPhoneNumber",
    "MprAdminInterfaceTransportAdd",
    "MprConfigInterfaceTransportAdd",
    "MprConfigInterfaceTransportRemove",
    "MprConfigServerInstall",
    "MprAdminConnectionEnum",
    "MprAdminDeregisterConnectionNotification",
    "MprAdminConnectionClearStats",
    "MprAdminPortClearStats",
    "MprAdminServerGetInfo",
    "MprAdminRegisterConnectionNotification",
    "MprConfigGetFriendlyName",
    "MprAdminConnectionRemoveQuarantine",
    "MprConfigServerRefresh",
    "MprConfigServerDisconnect",
    "MprAdminInterfaceDelete",
    "MprAdminDeviceEnum",
    "MprAdminIsServiceInitialized",
    "MprConfigInterfaceTransportEnum",
    "MprInfoDelete",
    "MprAdminGetPDCServer",
    "MprAdminInterfaceGetCredentials",
    "MprConfigTransportSetInfo",
    "MprAdminServerDisconnect",
    "MprAdminTransportSetInfo",
    "MprAdminInterfaceDeviceSetInfo",
    "MprGetUsrParams",
    "MprAdminBufferFree",
    "MprInfoRemoveAll",
    "MprAdminServerSetInfoEx",
    "MprAdminMIBEntryDelete",
    "MprConfigInterfaceTransportGetInfo",
    "MprAdminConnectionGetInfoEx",
    "MprConfigServerConnect",
    "MprConfigInterfaceSetInfo",
    "MprConfigServerSetInfo",
    "MprAdminInterfaceTransportGetInfo",
    "MprAdminMIBEntryGetNext",
    "MprAdminUserServerDisconnect",
    "MprConfigInterfaceTransportGetHandle",
    "MprAdminInterfaceCreate",
    "MprAdminPortEnum",
    "MprAdminUserClose",
    "MprConfigInterfaceGetInfo",
    "MprAdminUserWrite",
    "MprAdminServerSetCredentials",
    "MprConfigInterfaceGetHandle",
    "MprInfoBlockQuerySize",
    "MprAdminIsServiceRunning",
    "MprConfigTransportGetHandle",
    "MprAdminIsDomainRasServer",
    "MprAdminInterfaceDisconnect",
    "MprInfoBlockRemove",
    "MprAdminInterfaceGetCredentialsEx",
    "MprAdminInterfaceSetCredentials",
    "MprAdminInterfaceSetCustomInfoEx",
    "MprAdminServerSetInfo",
    "MprAdminEstablishDomainRasServer",
    "MprInfoCreate",
    "MprAdminInterfaceUpdateRoutes",
    "MprAdminPortDisconnect",
    "MprAdminMIBServerDisconnect",
    "MprAdminInterfaceSetCredentialsEx",
    "MprAdminUserReadProfFlags",
    "MprConfigServerSetInfoEx",
    "MprAdminInterfaceEnum",
    "MprConfigInterfaceTransportSetInfo",
    "MprAdminGetErrorString",
    "MprAdminMIBEntrySet",
    "MprDomainQueryRasServer",
    "MprInfoBlockSet",
    "MprAdminUserSetInfo"
  ],
  "mprddm.dll": [
    "IfObjectFreePhonebookContext",
    "DDMAdminPortEnum",
    "DDMAdminPortGetInfo",
    "DDMAdminConnectionEnum",
    "DDMPlumbPskIkev2Policy",
    "DDMDisconnectInterface",
    "IfObjectSetDialoutHoursRestriction",
    "DDMRegisterConnectionNotification",
    "RasAcctProviderFreeAttributes",
    "RasAuthProviderTerminate",
    "IfObjectFreeRemoteEndpoint",
    "IfObjectNotifyOfReachabilityChange",
    "DDMAdminPortDisconnect",
    "DDMAdminServerGetInfoEx",
    "RasAuthProviderAuthenticateUser",
    "DDMAdminInterfaceConnect",
    "DDMConnectInterface",
    "DDMAdminPortClearStats",
    "DDMPostCleanup",
    "DDMAdminRemoveQuarantine",
    "RasAcctProviderInterimAccounting",
    "DDMAdminConnectionClearStats",
    "DDMAdminServerSetInfo",
    "RasAuthConfigChangeNotification",
    "RasAcctProviderStopAccounting",
    "DDMAdminConnectionGetInfo",
    "DDMAdminUpdateConnection",
    "RasAcctProviderTerminate",
    "DDMAdminServerGetInfo",
    "DDMAdminConnectionEnumEx",
    "DDMServicePostListens",
    "DDMServiceInitialize",
    "DDMTransportCreate",
    "DDMAdminConnectionGetInfoEx",
    "RasAuthProviderFreeAttributes",
    "RasAcctConfigChangeNotification",
    "RasAcctProviderInitialize",
    "DDMAdminInterfaceDisconnect",
    "DDMAdminPortReset",
    "DDMSendUserMessage",
    "RasAuthProviderInitialize",
    "IfObjectLoadPhonebookInfo",
    "RasAcctProviderStartAccounting",
    "IfObjectInitiatePersistentConnections",
    "DDMGetIdentityAttributes",
    "DDMAdminServerSetInfoEx"
  ],
  "mprdim.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "mprext.dll": [
    "WNetDisconnectDialog1WWorker",
    "ShowReconnectDialogEndWorker",
    "DoBroadcastSystemMessageWorker",
    "DoCommandLinePromptWorker",
    "WNetConnectionDialog1WWorker",
    "ShowReconnectDialogUIWorker",
    "WNetConnectionDialogWorker",
    "ShowReconnectDialogWorker",
    "WNetDisconnectDialogWorker",
    "DoProfileErrorDialogWorker",
    "DoPasswordDialogWorker"
  ],
  "mprmsg.dll": [
    "MprmsgGetErrorString"
  ],
  "msTextPrediction.dll": [
    "NIFTE_AbortTrainer",
    "NIFTE_CreateTrainer",
    "NIFTE_DestroyTrainer",
    "NIFTE_TextTrain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msaatext.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msacm32.dll": [
    "acmDriverRemove",
    "acmFilterDetailsA",
    "acmDriverDetailsW",
    "acmDriverPriority",
    "acmDriverAddA",
    "acmDriverID",
    "acmFilterTagDetailsW",
    "acmFilterTagEnumW",
    "acmStreamClose",
    "acmFormatDetailsW",
    "acmMessage32",
    "acmFormatChooseW",
    "acmFilterEnumW",
    "acmFilterTagDetailsA",
    "acmDriverAddW",
    "XRegThunkEntry",
    "acmFormatChooseA",
    "acmDriverMessage",
    "acmFormatTagDetailsA",
    "acmFormatDetailsA",
    "acmFormatEnumA",
    "acmDriverClose",
    "acmMetrics",
    "acmStreamSize",
    "acmFilterDetailsW",
    "acmStreamMessage",
    "acmDriverOpen",
    "acmFormatTagDetailsW",
    "acmFormatSuggest",
    "acmFormatTagEnumA",
    "acmFilterTagEnumA",
    "acmDriverDetailsA",
    "acmFormatTagEnumW",
    "acmStreamUnprepareHeader",
    "acmStreamReset",
    "acmFormatEnumW",
    "acmDriverEnum",
    "acmFilterChooseW",
    "acmFilterEnumA",
    "acmStreamPrepareHeader",
    "acmFilterChooseA",
    "acmGetVersion",
    "acmStreamConvert",
    "acmStreamOpen"
  ],
  "msafd.dll": [
    "WSPStartup"
  ],
  "msasn1.dll": [
    "ASN1BERDecGeneralizedTime",
    "ASN1CEREncCharString",
    "ASN1DecAlloc",
    "ASN1BERDecS16Val",
    "ASN1BERDecNull",
    "ASN1DecRealloc",
    "ASN1BEREncFlush",
    "ASN1_Encode",
    "ASN1objectidentifier_free",
    "ASN1CEREncBeginBlk",
    "ASN1BEREncNull",
    "ASN1EncSetError",
    "ASN1BERDecBool",
    "ASN1open_free",
    "ASN1DEREncBitString",
    "ASN1generalizedtime_cmp",
    "ASN1BERDecCheck",
    "ASN1BEREncCharString",
    "ASN1octetstring_free",
    "ASN1BEREncUTCTime",
    "ASN1CEREncMultibyteString",
    "ASN1BERDecEoid",
    "ASN1BERDecChar32String",
    "ASN1BEREncMultibyteString",
    "ASN1BEREncU32",
    "ASN1_CloseDecoder",
    "ASN1charstring_free",
    "ASN1DEREncFlushBlkElement",
    "ASN1_CreateDecoder",
    "ASN1BERDecBitString2",
    "ASN1_CreateEncoder",
    "ASN1utctime_cmp",
    "ASN1DecSetError",
    "ASN1BERDecChar16String",
    "ASN1ztchar32string_free",
    "ASN1BERDecU32Val",
    "ASN1BERDecU16Val",
    "ASN1BEREncBitString",
    "ASN1BERDecFlush",
    "ASN1BERDecOpenType2",
    "ASN1BERDecS8Val",
    "ASN1_SetDecoderOption",
    "ASN1CEREncGeneralizedTime",
    "ASN1BERDecUTCTime",
    "ASN1BERDecMultibyteString",
    "ASN1_CloseEncoder2",
    "ASN1CEREncChar16String",
    "ASN1DEREncUTF8String",
    "ASN1BEREncDouble",
    "ASN1DEREncMultibyteString",
    "ASN1DEREncZeroMultibyteString",
    "ASN1_FreeDecoded",
    "ASN1BEREncCheck",
    "ASN1bitstring_cmp",
    "ASN1_CloseModule",
    "ASN1DEREncUTCTime",
    "ASN1ztchar16string_free",
    "ASN1BERDecDouble",
    "ASN1ztchar32string_cmp",
    "ASN1BERDecNotEndOfContents",
    "ASN1intx_uoctets",
    "ASN1DEREncNewBlkElement",
    "ASN1BEREncOpenType",
    "ASN1BEREncUTF8String",
    "ASN1BERDecU8Val",
    "ASN1bitstring_free",
    "ASN1utf8string_free",
    "ASN1_CreateDecoderEx",
    "ASN1intx2int32",
    "ASN1BEREncObjectIdentifier2",
    "ASN1BERDecEndOfContents",
    "ASN1uint32_uoctets",
    "ASN1intx_sub",
    "ASN1objectidentifier2_cmp",
    "ASN1BERDecObjectIdentifier",
    "ASN1BEREncChar32String",
    "ASN1char16string_free",
    "ASN1BERDecOctetString2",
    "ASN1CEREncEndBlk",
    "ASN1octetstring_cmp",
    "ASN1BERDecZeroCharString",
    "ASN1BEREncObjectIdentifier",
    "ASN1intxisuint32",
    "ASN1DEREncBeginBlk",
    "ASN1DEREncChar16String",
    "ASN1BERDecSXVal",
    "ASN1BERDecObjectIdentifier2",
    "ASN1BERDecExplicitTag",
    "ASN1BEREncS32",
    "ASN1BERDotVal2Eoid",
    "ASN1intx2uint32",
    "ASN1BERDecCharString",
    "ASN1BERDecOctetString",
    "ASN1BEREncTag",
    "ASN1ztcharstring_cmp",
    "ASN1charstring_cmp",
    "ASN1BEREncEoid",
    "ASN1DEREncChar32String",
    "ASN1BEREoid_free",
    "ASN1BEREncChar16String",
    "ASN1_CloseEncoder",
    "ASN1_GetDecoderOption",
    "ASN1CEREncZeroMultibyteString",
    "ASN1BERDecZeroChar16String",
    "ASN1CEREncBitString",
    "ASN1BERDecUTF8String",
    "ASN1BERDecS32Val",
    "ASN1BERDecPeekTag",
    "ASN1objectidentifier_cmp",
    "ASN1DEREncCharString",
    "ASN1intx_cmp",
    "ASN1BEREncExplicitTag",
    "ASN1intx_setuint32",
    "ASN1BERDecZeroMultibyteString",
    "ASN1char32string_cmp",
    "ASN1CEREncUTCTime",
    "ASN1_CreateModule",
    "ASN1Free",
    "ASN1BEREncLength",
    "ASN1BEREncOctetString",
    "ASN1BERDecBitString",
    "ASN1BEREncGeneralizedTime",
    "ASN1BERDecZeroChar32String",
    "ASN1DEREncEndBlk",
    "ASN1BEREncRemoveZeroBits",
    "ASN1CEREncOctetString",
    "ASN1_GetEncoderOption",
    "ASN1BERDecSkip",
    "ASN1BEREncRemoveZeroBits2",
    "ASN1ztchar16string_cmp",
    "ASN1BEREoid2DotVal",
    "ASN1DEREncGeneralizedTime",
    "ASN1char16string_cmp",
    "ASN1BERDecTag",
    "ASN1BEREncEndOfContents",
    "ASN1BEREncSX",
    "ASN1DEREncOctetString",
    "ASN1open_cmp",
    "ASN1BEREncZeroMultibyteString",
    "ASN1char32string_free",
    "ASN1BERDecLength",
    "ASN1BEREncBool",
    "ASN1CEREncNewBlkElement",
    "ASN1_FreeEncoded",
    "ASN1_SetEncoderOption",
    "ASN1CEREncFlushBlkElement",
    "ASN1CEREncChar32String",
    "ASN1ztcharstring_free",
    "ASN1intx_free",
    "ASN1intx_add",
    "ASN1_Decode",
    "ASN1BERDecOpenType"
  ],
  "msaudite.dll": "No exports",
  "mscandui.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mscat32.dll": [
    "CryptCATCDFClose",
    "CatalogCompactHashDatabase",
    "CryptCATGetAttrInfo",
    "CryptCATAdminAddCatalog",
    "CryptCATGetCatAttrInfo",
    "CryptCATClose",
    "DllRegisterServer",
    "CryptCATCDFEnumMembersByCDFTagEx",
    "CryptCATGetMemberInfo",
    "DllUnregisterServer",
    "CryptCATCDFEnumAttributes",
    "CryptCATHandleFromStore",
    "CryptCATEnumerateAttr",
    "CryptCATAdminEnumCatalogFromHash",
    "CryptCATCDFOpen",
    "CryptCATEnumerateMember",
    "CryptCATPutMemberInfo",
    "CryptCATAdminAcquireContext",
    "CryptCATPutAttrInfo",
    "CryptCATVerifyMember",
    "CryptCATAdminReleaseCatalogContext",
    "CryptCATCDFEnumMembersByCDFTag",
    "CryptCATAdminCalcHashFromFileHandle",
    "CryptCATCDFEnumCatAttributes",
    "CryptCATAdminReleaseContext",
    "CryptCATEnumerateCatAttr",
    "MsCatFreeHashTag",
    "CryptCATCatalogInfoFromContext",
    "IsCatalogFile",
    "CryptCATCDFEnumMembers",
    "CryptCATPutCatAttrInfo",
    "CryptCATOpen",
    "CryptCATStoreFromHandle",
    "CryptCATCDFEnumAttributesWithCDFTag",
    "CryptCATPersistStore",
    "MsCatConstructHashTag"
  ],
  "msched.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "msclmd.dll": [
    "CardAcquireContext"
  ],
  "mscms.dll": [
    "InternalGetPS2ColorRenderingDictionary2",
    "DisassociateColorProfileFromDeviceW",
    "InternalWcsAssociateColorProfileWithDevice",
    "ColorCplUninitialize",
    "DeleteColorTransform",
    "GetPS2ColorRenderingDictionary",
    "ColorCplGetDefaultRenderingIntentScope",
    "CreateDeviceLinkProfile",
    "IsColorProfileTagPresent",
    "WcsSetUsePerUserProfiles",
    "ColorCplResetSystemWideAssociationListChangedWarning",
    "UninstallColorProfileW",
    "SetColorProfileElementReference",
    "ColorCplReleaseProfileProperties",
    "InternalGetPS2PreviewCRD",
    "DccwGetGamutSize",
    "CheckColors",
    "GetPS2ColorSpaceArray",
    "ColorCplSaveAssociationList",
    "GetColorDirectoryA",
    "GenerateCopyFilePaths",
    "InstallColorProfileA",
    "DllGetClassObject",
    "SelectCMM",
    "WcsSetDefaultRenderingIntent",
    "SetColorProfileHeader",
    "TranslateColors",
    "TranslateBitmapBits",
    "SetStandardColorSpaceProfileA",
    "DccwGetDisplayProfileAssociationList",
    "InternalSetDeviceConfig",
    "GetColorProfileElementTag",
    "AssociateColorProfileWithDeviceA",
    "GetPS2ColorRenderingIntent",
    "CheckBitmapBits",
    "InternalGetPS2ColorSpaceArray",
    "OpenColorProfileA",
    "WcsEnumColorProfiles",
    "ColorCplGetDefaultProfileScope",
    "CloseDisplay",
    "ConvertColorNameToIndex",
    "InstallColorProfileW",
    "WcsTranslateColors",
    "WcsOpenColorProfileW",
    "UnregisterCMMW",
    "WcsGetDefaultRenderingIntent",
    "UninstallColorProfileA",
    "WcsGetCalibrationManagementState",
    "SetColorProfileElement",
    "GetCMMInfo",
    "InternalRefreshCalibration",
    "InternalGetDeviceConfig",
    "IsColorProfileValid",
    "WcsDisassociateColorProfileFromDevice",
    "SetStandardColorSpaceProfileW",
    "GetColorDirectoryW",
    "InternalGetPS2ColorRenderingDictionary",
    "CreateColorTransformW",
    "GetCountColorProfileElements",
    "GetStandardColorSpaceProfileA",
    "GetNamedProfileInfo",
    "SetColorProfileElementSize",
    "DisassociateColorProfileFromDeviceA",
    "ColorCplLoadAssociationList",
    "GetColorProfileHeader",
    "CreateMultiProfileTransform",
    "CreateProfileFromLogColorSpaceA",
    "ColorCplMergeAssociationLists",
    "InternalGetPS2PreviewCRD2",
    "ColorCplSetUsePerUserProfiles",
    "GetStandardColorSpaceProfileW",
    "SpoolerCopyFileEvent",
    "ColorCplHasSystemWideAssociationListChanged",
    "GetColorProfileElement",
    "CloseColorProfile",
    "ColorCplOverwritePerUserAssociationList",
    "WcsCreateIccProfile",
    "GetColorProfileFromHandle",
    "EnumColorProfilesW",
    "WcsEnumColorProfilesSize",
    "DccwSetDisplayProfileAssociationList",
    "InternalGetPS2CSAFromLCS",
    "InternalGetPS2ColorSpaceArray2",
    "ColorCplInitialize",
    "WcsGetDefaultColorProfile",
    "WcsOpenColorProfileA",
    "OpenColorProfileW",
    "ColorCplGetProfileProperties",
    "OpenDisplay",
    "EnumColorProfilesA",
    "WcsGetUsePerUserProfiles",
    "ConvertIndexToColorName",
    "CreateColorTransformA",
    "CreateProfileFromLogColorSpaceW",
    "RegisterCMMA",
    "RegisterCMMW",
    "DllCanUnloadNow",
    "DccwReleaseDisplayProfileAssociationList",
    "WcsGpCanInstallOrUninstallProfiles",
    "AssociateColorProfileWithDeviceW",
    "WcsCheckColors",
    "DccwCreateDisplayProfileAssociationList",
    "UnregisterCMMA",
    "DeviceRenameEvent",
    "WcsGetDefaultColorProfileSize",
    "WcsSetDefaultColorProfile",
    "WcsAssociateColorProfileWithDevice",
    "WcsSetCalibrationManagementState"
  ],
  "mscoree.dll": [
    "ClrCreateManagedInstance",
    "GetHashFromBlob",
    "GetHashFromFileW",
    "CorBindToCurrentRuntime",
    "GetRequestedRuntimeVersion",
    "_CorExeMain2",
    "LoadStringRC",
    "_CorDllMain",
    "ReOpenMetaDataWithMemory",
    "ND_WI8",
    "GetRequestedRuntimeInfo",
    "EEDllUnregisterServer",
    "OpenCtrs",
    "StrongNameCompareAssemblies",
    "CorMarkThreadInThreadPool",
    "StrongNameSignatureVerificationEx",
    "GetCORRequiredVersion",
    "StrongNameKeyInstall",
    "GetProcessExecutableHeap",
    "_CorImageUnloading",
    "InitErrors",
    "CallFunctionShim",
    "DllGetClassObject",
    "StrongNameGetPublicKey",
    "GetPermissionRequests",
    "CorDllMainWorker",
    "CreateInterface",
    "CorGetSvc",
    "SetTargetForVTableEntry",
    "StrongNameGetBlobFromImage",
    "LockClrVersion",
    "ND_RI8",
    "ND_CopyObjSrc",
    "GetHashFromAssemblyFileW",
    "CorTickleSvc",
    "GetCORRootDirectory",
    "ND_WU1",
    "RuntimeOpenImage",
    "ReOpenMetaDataWithMemoryEx",
    "DllUnregisterServer",
    "ND_RI2",
    "StrongNameGetBlob",
    "CollectCtrs",
    "StrongNameKeyGenEx",
    "StrongNameSignatureSize",
    "StrongNameTokenFromAssembly",
    "GetCompileInfo",
    "RunDll32ShimW",
    "ND_CopyObjDst",
    "CorIsLatestSvc",
    "GetMetaDataPublicInterfaceFromInternal",
    "CorBindToRuntimeByPath",
    "GetXMLElement",
    "LoadStringRCEx",
    "CLRCreateInstance",
    "InitSSAutoEnterThread",
    "GetCLRMetaHost",
    "EEDllGetClassObjectFromClass",
    "EEDllRegisterServer",
    "LogHelp_LogAssert",
    "GetCORSystemDirectory",
    "GetMetaDataInternalInterfaceFromPublic",
    "GetTargetForVTableEntry",
    "ND_WI4",
    "StrongNameTokenFromAssemblyEx",
    "GetXMLElementAttribute",
    "GetXMLObject",
    "GetRequestedRuntimeVersionForCLSID",
    "LoadLibraryWithPolicyShim",
    "GetTokenForVTableEntry",
    "CorBindToRuntimeEx",
    "StrongNameErrorInfo",
    "CoEEShutDownCOM",
    "PostError",
    "StrongNameSignatureGenerationEx",
    "CoInitializeCor",
    "GetMetaDataInternalInterface",
    "IEE",
    "LogHelp_NoGuiOnAssert",
    "ND_RI4",
    "GetAssemblyMDImport",
    "MetaDataGetDispenser",
    "StrongNameHashSize",
    "GetVersionFromProcess",
    "GetStartupFlags",
    "CloseCtrs",
    "CorBindToRuntimeByPathEx",
    "_CorExeMain",
    "CorExitProcess",
    "CorBindToRuntimeHost",
    "RuntimeReleaseHandle",
    "GetHashFromFile",
    "StrongNameSignatureGeneration",
    "StrongNameSignatureVerification",
    "UpdateError",
    "CoUninitializeEE",
    "StrongNameKeyGen",
    "CorBindToRuntime",
    "CreateConfigStream",
    "GetFileVersion",
    "StrongNameTokenFromPublicKey",
    "DllRegisterServer",
    "GetRealProcAddress",
    "StrongNameKeyDelete",
    "RuntimeOSHandle",
    "ND_RU1",
    "GetHashFromHandle",
    "GetPrivateContextsPerfCounters",
    "LoadLibraryShim",
    "StrongNameSignatureVerificationFromImage",
    "CorBindToRuntimeByCfg",
    "DllCanUnloadNow",
    "TranslateSecurityAttributes",
    "_CorValidateImage",
    "ND_WI2",
    "CreateDebuggingInterfaceFromVersion",
    "CoInitializeEE",
    "GetCORVersion",
    "GetHashFromAssemblyFile",
    "GetHostConfigurationFile",
    "LogHelp_TerminateOnAssert",
    "StrongNameFreeBuffer",
    "CoUninitializeCor"
  ],
  "mscorier.dll": "No exports",
  "mscories.dll": [
    "Install",
    "Uninstall"
  ],
  "mscpx32r.dLL": "No exports",
  "mscpxl32.dLL": [
    "ConfigTranslator",
    "ConfigureDlgProc",
    "SQLDataSourceToDriver",
    "SQLDriverToDataSource"
  ],
  "msctf.dll": [
    "CtfImeRegisterWord",
    "TF_GetThreadFlags",
    "TF_CleanUpPrivateMessages",
    "TF_CreateThreadMgr",
    "TF_GetInitSystemFlags",
    "CtfImeToAsciiEx",
    "TF_InvalidAssemblyListCacheIfExist",
    "CtfNotifyIME",
    "CtfImeCreateThreadMgr",
    "CtfImeConfigure",
    "CtfImeInquireExW",
    "CtfImeSetActiveContext",
    "SetInputScopes",
    "TF_CUASAppFix",
    "TF_CanUninitialize",
    "TF_CreateCicLoadMutex",
    "TF_InitSystem",
    "TF_SendLangBandMsg",
    "CtfImeDispatchDefImeMessage",
    "CtfImeEscape",
    "TF_GetAppCompatFlags",
    "CtfImeEnumRegisterWord",
    "DllRegisterServer",
    "TF_MapCompatibleHKL",
    "DllUnregisterServer",
    "TF_SetThreadFlags",
    "CtfImeInquire",
    "CtfImeProcessCicHotkey",
    "TF_SetDefaultRemoteKeyboardLayout",
    "CtfImeUnregisterWord",
    "TF_Notify",
    "TF_SetShowFloatingStatus",
    "CtfImeDestroy",
    "CtfImeDestroyThreadMgr",
    "TF_GetShowFloatingStatus",
    "CtfImeAssociateFocus",
    "CtfImeDestroyInputContext",
    "CtfImeSetCompositionString",
    "DllCanUnloadNow",
    "TF_IsThreadWithFlags",
    "CtfImeGetRegisterWordStyle",
    "CtfImeProcessKey",
    "CtfImeSelect",
    "CtfImeSetFocus",
    "TF_IsCtfmonRunning",
    "SetInputScopeXML",
    "CtfImeEscapeEx",
    "CtfImeGetGuidAtom",
    "TF_CreateDisplayAttributeMgr",
    "SetInputScope",
    "TF_RunInputCPL",
    "TF_CreateCicLoadWinStaMutex",
    "CtfImeSelectEx",
    "TF_CreateLangBarMgr",
    "TF_GetCompatibleKeyboardLayout",
    "TF_WaitForInitialized",
    "DllGetClassObject",
    "TF_GetGlobalCompartment",
    "CtfImeIsIME",
    "TF_CreateCategoryMgr",
    "TF_GetThreadMgr",
    "TF_CreateLangBarItemMgr",
    "TF_PostAllThreadMsg",
    "TF_MapCompatibleKeyboardTip",
    "SetInputScopes2",
    "TF_UninitSystem",
    "TF_GetInputScope",
    "CtfImeCreateInputContext",
    "CtfImeConversionList",
    "TF_CreateInputProcessorProfiles",
    "CtfImeIsGuidMapEnable"
  ],
  "msctfp.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "msctfui.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msdadiag.dll": [
    "DllBidEntryPoint"
  ],
  "msdart.dll": [
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_SplitRecordSet(class CNodeClump *,class CNodeClump *,unsigned long,unsigned long,unsigned long,class CNodeClump *)",
    "public: void __thiscall CDoubleList::InsertTail(class CListEntry * const)",
    "public: unsigned long __thiscall CLKRHashTable::ApplyIf(enum LK_PREDICATE (__stdcall*)(void const *,void *),enum LK_ACTION (__stdcall*)(void const *,void *),void *,enum LK_LOCKTYPE)",
    "public: bool __thiscall CReaderWriterLock3AR::TryConvertSharedToExclusive(void)",
    "public: static unsigned short __stdcall CReaderWriterLock2::GetDefaultSpinCount(void)",
    "private: static int (__stdcall* CCriticalSection::sm_pfnTryEnterCriticalSection)(struct _RTL_CRITICAL_SECTION *)",
    "public: void __thiscall CSpinLock::ReadOrWriteUnlock(bool)",
    "public: class CLockBase<8,2,1,1,3,2> & __thiscall CLockBase<8,2,1,1,3,2>::operator=(class CLockBase<8,2,1,1,3,2> const &)",
    "mpCalloc",
    "public: void __thiscall CReaderWriterLock3AR::ConvertSharedToExclusive(void)",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<8,2,1,1,3,2>::QueueType(void)",
    "public: bool __thiscall CSpinLock::ReadOrWriteLock(void)",
    "public: unsigned short __thiscall CCritSec::GetSpinCount(void)const",
    "private: unsigned long __thiscall CLKRHashTable::_CalcKeyHash(unsigned long)const",
    "public: class CListEntry const * __thiscall CLockedDoubleList::HeadNode(void)const",
    "public: void __thiscall CLKRHashTable::ReadUnlock(void)const",
    "protected: static unsigned short CSmallSpinLock::sm_wDefaultSpinCount",
    "public: static double __stdcall CFakeLock::GetDefaultSpinAdjustmentFactor(void)",
    "public: void __thiscall CSingleList::Push(class CSingleListEntry * const)",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::InsertRecord(void const *,bool,void const * *)",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<3,1,1,1,1,1>::MutexType(void)",
    "MPInitializeCriticalSection",
    "public: bool __thiscall CLKRHashTable::Erase(class CLKRHashTable_Iterator &,class CLKRHashTable_Iterator &)",
    "public: bool __thiscall CReaderWriterLock3::IsReadUnlocked(void)const",
    "public: long __thiscall CEXAutoBackupFile::BackupFile(unsigned short const *)",
    "public: unsigned short __thiscall CReaderWriterLock::GetSpinCount(void)const",
    "public: class CListEntry * __thiscall CLockedDoubleList::RemoveTail(void)",
    "public: void __thiscall CReaderWriterLock2::ConvertSharedToExclusive(void)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_FindKey(unsigned long,unsigned long,void const * *,class CLKRLinearHashTable_Iterator *)const",
    "protected: static unsigned short CSpinLock::sm_wDefaultSpinCount",
    "public: bool __thiscall CCritSec::TryReadLock(void)",
    "private: unsigned long __thiscall CLKRLinearHashTable::_SegIndex(unsigned long)const",
    "protected: static double CReaderWriterLock3AR::sm_dblDfltSpinAdjFctr",
    "public: void __thiscall CFakeLock::ConvertSharedToExclusive(void)",
    "public: static int __cdecl CMdVersionInfo::IsWin98(void)",
    "public: class CLKRHashTableStats __thiscall CLKRHashTable::GetStatistics(void)const",
    "public: __thiscall CLKRLinearHashTable_Iterator::CLKRLinearHashTable_Iterator(class CLKRLinearHashTable_Iterator const &)",
    "public: class CEXAutoBackupFile & __thiscall CEXAutoBackupFile::operator=(class CEXAutoBackupFile const &)",
    "public: void __thiscall CReaderWriterLock3AR::ReadOrWriteUnlock(bool)",
    "public: static void __stdcall CSpinLock::SetDefaultSpinCount(unsigned short)",
    "public: void __thiscall CLKRLinearHashTable::SetBucketLockSpinCount(unsigned short)",
    "public: class CSingleListEntry * __thiscall CLockedSingleList::Pop(void)",
    "public: void __thiscall CLKRLinearHashTable::ConvertSharedToExclusive(void)const",
    "public: class CListEntry * __thiscall CLockedDoubleList::RemoveHead(void)",
    "protected: static unsigned short CReaderWriterLock2::sm_wDefaultSpinCount",
    "public: __thiscall CSingleList::~CSingleList(void)",
    "private: class CBucket * __thiscall CLKRLinearHashTable::_FindBucket(unsigned long,bool)const",
    "public: void __thiscall CCritSec::ReadOrWriteUnlock(bool)",
    "public: static void __stdcall CSmallSpinLock::SetDefaultSpinAdjustmentFactor(double)",
    "public: unsigned long __thiscall CLKRLinearHashTable::ApplyIf(enum LK_PREDICATE (__stdcall*)(void const *,void *),enum LK_ACTION (__stdcall*)(void const *,void *),void *,enum LK_LOCKTYPE)",
    "public: bool __thiscall CLKRLinearHashTable::Erase(class CLKRLinearHashTable_Iterator &,class CLKRLinearHashTable_Iterator &)",
    "private: static int __cdecl CMdVersionInfo::InitializeVersionInfo(void)",
    "private: class CDirEntry * __thiscall CLKRLinearHashTable::_AllocateSegmentDirectory(unsigned int)",
    "public: void __thiscall CReaderWriterLock3AR::ConvertExclusiveToShared(void)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_Expand(void)",
    "public: void __thiscall CLKRLinearHashTable::ConvertExclusiveToShared(void)const",
    "MpHeapSize",
    "private: void __thiscall CLKRHashTable::_InsertThisIntoGlobalList(void)",
    "public: static void __cdecl CMdVersionInfo::ReleaseVersionInfo(void)",
    "public: void __thiscall CSmallSpinLock::ConvertExclusiveToShared(void)",
    "private: static class CLockedDoubleList CLKRHashTable::sm_llGlobalList",
    "public: void __thiscall CLockedDoubleList::InsertTail(class CListEntry * const)",
    "public: static unsigned short const * __stdcall CCritSec::ClassName(void)",
    "private: void __thiscall CLKRLinearHashTable::_BucketReadUnlock(class CBucket * const)const",
    "public: unsigned long __thiscall CLKRLinearHashTable::MaxSize(void)const",
    "MpHeapValidate",
    "private: void __thiscall CSmallSpinLock::_LockSpin(void)",
    "public: __thiscall CLKRHashTable_Iterator::CLKRHashTable_Iterator(void)",
    "public: __thiscall CExFileOperation::~CExFileOperation(void)",
    "private: bool __thiscall CReaderWriterLock::_TryWriteLock(void)",
    "public: class CLKRLinearHashTable_Iterator & __thiscall CLKRLinearHashTable_Iterator::operator=(class CLKRLinearHashTable_Iterator const &)",
    "public: bool __thiscall CLKRLinearHashTable::Insert(void const *,class CLKRLinearHashTable_Iterator &,bool)",
    "MpGetHeapHandle",
    "public: bool __thiscall CReaderWriterLock3AR::ReadOrWriteLock(void)",
    "public: class CLockBase<7,2,1,1,3,2> & __thiscall CLockBase<7,2,1,1,3,2>::operator=(class CLockBase<7,2,1,1,3,2> const &)",
    "public: static long const * __stdcall CLKRHashTableStats::BucketSizes(void)",
    "public: void __thiscall CSpinLock::ConvertSharedToExclusive(void)",
    "public: void __thiscall CReaderWriterLock3::ConvertSharedToExclusive(void)",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<7,2,1,1,3,2>::QueueType(void)",
    "public: void __thiscall CSingleList::Swap(class CSingleList &)",
    "private: unsigned long __thiscall CLKRLinearHashTable::_H0(unsigned long)const",
    "public: class CDoubleList & __thiscall CDoubleList::operator=(class CDoubleList const &)",
    "public: class CListEntry * __thiscall CDoubleList::Last(void)const",
    "public: static void __stdcall CReaderWriterLock3AR::SetDefaultSpinAdjustmentFactor(double)",
    "private: void __thiscall CSpinLock::_LockSpin(void)",
    "public: virtual bool __thiscall CLKRhashDefaultAllocator::Free(void *,enum CLKRhashAllocator::Type)",
    "public: void __thiscall CSmallSpinLock::WriteUnlock(void)",
    "public: static unsigned short const * __stdcall CReaderWriterLock2::ClassName(void)",
    "public: bool __thiscall CLKRLinearHashTable::IsReadUnlocked(void)const",
    "public: bool __thiscall CFakeLock::IsReadUnlocked(void)const",
    "public: bool __thiscall CReaderWriterLock3::TryReadLock(void)",
    "public: static void __stdcall CCritSec::SetDefaultSpinCount(unsigned short)",
    "public: static int __cdecl CMdVersionInfo::IsWin2k(void)",
    "public: void __thiscall CReaderWriterLock3AR::ReadUnlock(void)",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<4,1,1,2,3,3>::LockType(void)",
    "private: void __thiscall CLKRLinearHashTable::_BucketReadLock(class CBucket * const)const",
    "protected: static double CReaderWriterLock3::sm_dblDfltSpinAdjFctr",
    "private: bool __thiscall CReaderWriterLock2::_TryWriteLock(long)",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::DeleteRecord(void const *)",
    "public: unsigned long __thiscall CLKRHashTable::MaxSize(void)const",
    "private: unsigned long const __thiscall CLKRLinearHashTable::_ExtractKey(void const *)const",
    "public: void __thiscall CReaderWriterLock::ConvertExclusiveToShared(void)",
    "public: void __thiscall CReaderWriterLock::WriteUnlock(void)",
    "public: bool __thiscall CLKRHashTable::IsWriteUnlocked(void)const",
    "public: bool __thiscall CLKRLinearHashTable::EqualRange(unsigned long,class CLKRLinearHashTable_Iterator &,class CLKRLinearHashTable_Iterator &)",
    "public: bool __thiscall CLKRHashTable_Iterator::Increment(void)",
    "private: void __thiscall CReaderWriterLock3AR::_LockSpin(enum CReaderWriterLock3AR::SPIN_TYPE)",
    "GetIUMS",
    "public: bool __thiscall CLockedDoubleList::IsUnlocked(void)const",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<1,1,3,1,3,2>::PerLockSpin(void)",
    "public: void __thiscall CFakeLock::WriteUnlock(void)",
    "public: static void __stdcall CFakeLock::SetDefaultSpinAdjustmentFactor(double)",
    "private: static unsigned long (__stdcall* CCriticalSection::sm_pfnSetCriticalSectionSpinCount)(struct _RTL_CRITICAL_SECTION *,unsigned long)",
    "public: bool __thiscall CCritSec::ReadOrWriteLock(void)",
    "public: class CListEntry * __thiscall CLockedDoubleList::Last(void)",
    "private: int __thiscall CLKRLinearHashTable::_IsNodeCompact(class CBucket * const)const",
    "private: bool __thiscall CLKRLinearHashTable::_FreeSegmentDirectory(void)",
    "public: void __thiscall CFakeLock::WriteLock(void)",
    "private: void __thiscall CReaderWriterLock3AR::_ReadLockSpin(enum CReaderWriterLock3AR::SPIN_TYPE)",
    "public: __thiscall CReaderWriterLock::~CReaderWriterLock(void)",
    "public: class CLockBase<6,2,2,1,3,2> & __thiscall CLockBase<6,2,2,1,3,2>::operator=(class CLockBase<6,2,2,1,3,2> const &)",
    "public: bool __thiscall CReaderWriterLock3AR::SetSpinCount(unsigned short)",
    "private: class CLKRLinearHashTable * __thiscall CLKRHashTable::_SubTable(unsigned long)const",
    "public: class CLockBase<2,1,1,1,3,2> & __thiscall CLockBase<2,1,1,1,3,2>::operator=(class CLockBase<2,1,1,1,3,2> const &)",
    "public: __thiscall CLKRLinearHashTable_Iterator::CLKRLinearHashTable_Iterator(void)",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::FindKey(unsigned long,void const * *)const",
    "public: void __thiscall CSmallSpinLock::ReadUnlock(void)",
    "private: unsigned long __thiscall CLKRLinearHashTable::_BucketAddress(unsigned long)const",
    "public: bool __thiscall CLKRLinearHashTable::IsValid(void)const",
    "public: bool __thiscall CCritSec::IsWriteLocked(void)const",
    "public: void __thiscall CLockedSingleList::Unlock(void)",
    "private: static struct _OSVERSIONINFOW * CMdVersionInfo::sm_lpOSVERSIONINFO",
    "private: bool __thiscall CReaderWriterLock3AR::_TryWriteLock2(void)",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<1,1,3,1,3,2>::LockType(void)",
    "private: bool __thiscall CReaderWriterLock3AR::_CmpExch(long,long)",
    "SetMemHook",
    "private: void __thiscall CLKRLinearHashTable::_BucketLock(class CBucket * const,enum LK_LOCKTYPE)const",
    "public: static unsigned short const * __stdcall CReaderWriterLock3AR::ClassName(void)",
    "private: bool __thiscall CLKRLinearHashTable::_Erase(class CLKRLinearHashTable_Iterator &,unsigned long)",
    "protected: void __thiscall CLKRLinearHashTable_Iterator::_AddRef(int)const",
    "public: __thiscall CLKRHashTable_Iterator::CLKRHashTable_Iterator(class CLKRHashTable_Iterator const &)",
    "MPCSInitialize",
    "public: __thiscall CLockedDoubleList::CLockedDoubleList(void)",
    "public: class CLKRHashTable_Iterator & __thiscall CLKRHashTable_Iterator::operator=(class CLKRHashTable_Iterator const &)",
    "public: static int __cdecl CMdVersionInfo::IsMillnm(void)",
    "private: void __thiscall CReaderWriterLock3::_LockSpin(enum CReaderWriterLock3::SPIN_TYPE)",
    "private: bool __thiscall CLKRLinearHashTable::_ReadOrWriteLock(void)const",
    "private: void __thiscall CLKRLinearHashTable::_TableUnlock(enum LK_LOCKTYPE)",
    "public: bool __thiscall CFakeLock::SetSpinCount(unsigned short)",
    "protected: static unsigned short CReaderWriterLock3AR::sm_wDefaultSpinCount",
    "public: static int __cdecl CMdVersionInfo::IsWin95(void)",
    "public: __thiscall CLKRLinearHashTable::~CLKRLinearHashTable(void)",
    "public: bool __thiscall CLKRHashTable::MultiKeys(void)const",
    "public: class CLockBase<4,1,1,2,3,3> & __thiscall CLockBase<4,1,1,2,3,3>::operator=(class CLockBase<4,1,1,2,3,3> const &)",
    "public: void __thiscall CReaderWriterLock3AR::WriteLock(void)",
    "_DllMain@12",
    "FXMemDetach",
    "public: bool __thiscall CSpinLock::IsReadUnlocked(void)const",
    "private: unsigned long __thiscall CLKRLinearHashTable::_H1(unsigned long)const",
    "public: class CExFileOperation & __thiscall CExFileOperation::operator=(class CExFileOperation const &)",
    "public: __thiscall CSmallSpinLock::~CSmallSpinLock(void)",
    "public: static double __stdcall CSmallSpinLock::GetDefaultSpinAdjustmentFactor(void)",
    "public: __thiscall CLKRhashDefaultAllocator::CLKRhashDefaultAllocator(void)",
    "public: unsigned short __thiscall CReaderWriterLock2::GetSpinCount(void)const",
    "private: void __thiscall CLKRLinearHashTable::_BucketUnlock(class CBucket * const,enum LK_LOCKTYPE)const",
    "private: void __thiscall CLKRLinearHashTable::_ReadOrWriteUnlock(bool)const",
    "private: static enum LK_PREDICATE __stdcall CLKRLinearHashTable::_PredTrue(void const *,void *)",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<4,1,1,2,3,3>::PerLockSpin(void)",
    "private: static long __stdcall CReaderWriterLock3AR::_CurrentThreadId(void)",
    "public: bool __thiscall CDoubleList::IsEmpty(void)const",
    "public: void const * __thiscall CLKRHashTable_Iterator::Record(void)const",
    "public: bool __thiscall CLKRHashTable::Insert(void const *,class CLKRHashTable_Iterator &,bool)",
    "public: static double __stdcall CReaderWriterLock3::GetDefaultSpinAdjustmentFactor(void)",
    "public: void __thiscall CCritSec::WriteUnlock(void)",
    "private: void __thiscall CReaderWriterLock2::_WriteLockSpin(void)",
    "public: class CLKRHashTableStats & __thiscall CLKRHashTableStats::operator=(class CLKRHashTableStats const &)",
    "public: unsigned long const __thiscall CLKRHashTable_Iterator::Key(void)const",
    "private: class CSegment * & __thiscall CLKRLinearHashTable::_Segment(unsigned long)const",
    "public: void __thiscall CLKRHashTable::Clear(void)",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::FindRecord(void const *)const",
    "public: static int __cdecl CMdVersionInfo::IsWinNt4orLater(void)",
    "public: bool __thiscall CLKRLinearHashTable_Iterator::operator==(class CLKRLinearHashTable_Iterator const &)const",
    "public: bool __thiscall CLKRLinearHashTable::Find(unsigned long,class CLKRLinearHashTable_Iterator &)",
    "public: void __thiscall CLKRLinearHashTable::ReadLock(void)const",
    "public: bool __thiscall CReaderWriterLock2::TryReadLock(void)",
    "public: bool __thiscall CReaderWriterLock2::SetSpinCount(unsigned short)",
    "private: int __thiscall CLKRHashTable::_SubTableIndex(class CLKRLinearHashTable *)const",
    "private: void __thiscall CLKRLinearHashTable::_RemoveThisFromGlobalList(void)",
    "public: __thiscall CLKRHashTableStats::CLKRHashTableStats(void)",
    "private: void __thiscall CLKRLinearHashTable::_BucketWriteUnlock(class CBucket * const)const",
    "public: virtual void * __thiscall CLKRhashDefaultAllocator::Alloc(unsigned int,enum CLKRhashAllocator::Type)",
    "public: void __thiscall CReaderWriterLock3::ReadOrWriteUnlock(bool)",
    "public: void __thiscall CReaderWriterLock3::WriteUnlock(void)",
    "public: static unsigned short __stdcall CCritSec::GetDefaultSpinCount(void)",
    "public: bool __thiscall CSpinLock::IsWriteUnlocked(void)const",
    "public: bool __thiscall CSpinLock::IsWriteLocked(void)const",
    "public: class CLockBase<3,1,1,1,1,1> & __thiscall CLockBase<3,1,1,1,1,1>::operator=(class CLockBase<3,1,1,1,1,1> const &)",
    "public: void __thiscall CReaderWriterLock3AR::WriteUnlock(void)",
    "public: static unsigned short const * __stdcall CLKRHashTable::ClassName(void)",
    "public: __thiscall CReaderWriterLock3AR::CReaderWriterLock3AR(void)",
    "private: void __thiscall CReaderWriterLock3AR::_WriteLockSpin(void)",
    "unsigned long __cdecl MpHeapCompact(void *)",
    "protected: static double CSmallSpinLock::sm_dblDfltSpinAdjFctr",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<2,1,1,1,3,2>::QueueType(void)",
    "public: class CCritSec & __thiscall CCritSec::operator=(class CCritSec const &)",
    "public: long __thiscall CEXAutoBackupFile::UndoBackup(void)",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<4,1,1,2,3,3>::QueueType(void)",
    "private: static unsigned long __stdcall CLKRLinearHashTable::_H1(unsigned long,unsigned long)",
    "private: bool __thiscall CReaderWriterLock3::_CmpExch(long,long)",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<3,1,1,1,1,1>::QueueType(void)",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<2,1,1,1,3,2>::LockType(void)",
    "private: void __thiscall CReaderWriterLock3::_ReadLockSpin(enum CReaderWriterLock3::SPIN_TYPE)",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<1,1,3,1,3,2>::Recursion(void)",
    "public: void __thiscall CReaderWriterLock2::ConvertExclusiveToShared(void)",
    "protected: static double CCritSec::sm_dblDfltSpinAdjFctr",
    "private: void __thiscall CReaderWriterLock2::_ReadLockSpin(void)",
    "MpHeapDestroy",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<6,2,2,1,3,2>::LockType(void)",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<4,1,1,2,3,3>::WaitType(void)",
    "public: long __thiscall CExFileOperation::FOCopyFileDACLS(unsigned short const *,unsigned short const *)",
    "public: class CLockBase<5,2,2,1,3,2> & __thiscall CLockBase<5,2,2,1,3,2>::operator=(class CLockBase<5,2,2,1,3,2> const &)",
    "public: void __thiscall CDoubleList::InsertHead(class CListEntry * const)",
    "private: class CBucket * __thiscall CLKRLinearHashTable::_Bucket(unsigned long)const",
    "public: class CMdVersionInfo & __thiscall CMdVersionInfo::operator=(class CMdVersionInfo const &)",
    "public: bool __thiscall CReaderWriterLock3::IsWriteLocked(void)const",
    "public: __thiscall CSingleList::CSingleList(void)",
    "public: static unsigned short __stdcall CReaderWriterLock::GetDefaultSpinCount(void)",
    "private: __thiscall CLKRLinearHashTable::CLKRLinearHashTable(char const *,unsigned long const (__stdcall*)(void const *),unsigned long (__stdcall*)(unsigned long),bool (__stdcall*)(unsigned long,unsigned long),void (__stdcall*)(void const *,int),double,unsigned long,class CLKRHashTable *,bool,bool,class CLKRhashAllocator *)",
    "public: bool __thiscall CReaderWriterLock3AR::TryReadOrWriteLock(bool &)",
    "public: void __thiscall CLKRLinearHashTable::WriteUnlock(void)const",
    "public: bool __thiscall CSpinLock::TryWriteLock(void)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_DeleteRecord(void const *,unsigned long)",
    "mpRealloc",
    "public: class CSpinLock & __thiscall CSpinLock::operator=(class CSpinLock const &)",
    "MPInitializeCriticalSectionAndSpinCount",
    "public: bool __thiscall CLKRLinearHashTable::Erase(class CLKRLinearHashTable_Iterator &)",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<3,1,1,1,1,1>::LockType(void)",
    "public: static unsigned short __stdcall CFakeLock::GetDefaultSpinCount(void)",
    "protected: static unsigned short CReaderWriterLock::sm_wDefaultSpinCount",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<1,1,3,1,3,2>::MutexType(void)",
    "public: bool __thiscall CReaderWriterLock3::ReadOrWriteLock(void)",
    "public: class CSingleListEntry * __thiscall CSingleList::Pop(void)",
    "public: void __thiscall CLKRHashTable::ConvertExclusiveToShared(void)const",
    "public: class CReaderWriterLock3 & __thiscall CReaderWriterLock3::operator=(class CReaderWriterLock3 const &)",
    "DllBidEntryPoint",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<6,2,2,1,3,2>::WaitType(void)",
    "private: unsigned long const __thiscall CLKRHashTable::_ExtractKey(void const *)const",
    "public: static void __stdcall CCritSec::SetDefaultSpinAdjustmentFactor(double)",
    "public: void __thiscall CLKRHashTable::SetBucketLockSpinCount(unsigned short)",
    "public: static unsigned short const * __stdcall CReaderWriterLock3::ClassName(void)",
    "public: __thiscall CLockedSingleList::~CLockedSingleList(void)",
    "private: static unsigned long __stdcall CLKRLinearHashTable::_H0(unsigned long,unsigned long)",
    "protected: static double CSpinLock::sm_dblDfltSpinAdjFctr",
    "public: bool __thiscall CReaderWriterLock3AR::TryReadLock(void)",
    "public: unsigned long __thiscall CLKRHashTable::DeleteIf(enum LK_PREDICATE (__stdcall*)(void const *,void *),void *)",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<6,2,2,1,3,2>::MutexType(void)",
    "public: static void __stdcall CReaderWriterLock::SetDefaultSpinAdjustmentFactor(double)",
    "private: unsigned long __thiscall CLKRLinearHashTable::_Apply(enum LK_ACTION (__stdcall*)(void const *,void *),void *,enum LK_LOCKTYPE,enum LK_PREDICATE &)",
    "public: __thiscall CDoubleList::CDoubleList(void)",
    "public: bool __thiscall CLKRHashTable::IsValid(void)const",
    "public: unsigned long __thiscall CLKRHashTable::Size(void)const",
    "public: bool __thiscall CSmallSpinLock::IsWriteLocked(void)const",
    "public: class CFakeLock & __thiscall CFakeLock::operator=(class CFakeLock const &)",
    "public: bool __thiscall CLKRHashTable_Iterator::IsValid(void)const",
    "public: unsigned short __thiscall CLKRHashTable::GetBucketLockSpinCount(void)const",
    "public: bool __thiscall CLKRLinearHashTable_Iterator::IsValid(void)const",
    "protected: static double CReaderWriterLock::sm_dblDfltSpinAdjFctr",
    "public: bool __thiscall CReaderWriterLock::TryReadLock(void)",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<1,1,3,1,3,2>::WaitType(void)",
    "private: class CSegment * __thiscall CLKRLinearHashTable::_AllocateSegment(void)const",
    "public: __thiscall CDoubleList::~CDoubleList(void)",
    "MpHeapCreate",
    "protected: bool __thiscall CLKRLinearHashTable_Iterator::_Increment(bool)",
    "public: static int __cdecl CMdVersionInfo::IsWin2korLater(void)",
    "public: void __thiscall CSpinLock::ReadLock(void)",
    "public: class CLockedDoubleList & __thiscall CLockedDoubleList::operator=(class CLockedDoubleList const &)",
    "protected: static unsigned short CReaderWriterLock3::sm_wDefaultSpinCount",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<7,2,1,1,3,2>::LockType(void)",
    "public: bool __thiscall CCritSec::TryWriteLock(void)",
    "public: void __thiscall CLKRLinearHashTable::SetTableLockSpinCount(unsigned short)",
    "MpHeapAlloc",
    "MpHeapReAlloc",
    "public: bool __thiscall CCritSec::IsReadLocked(void)const",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<8,2,1,1,3,2>::WaitType(void)",
    "public: __thiscall CReaderWriterLock3AR::~CReaderWriterLock3AR(void)",
    "public: unsigned short __thiscall CLKRLinearHashTable::GetBucketLockSpinCount(void)const",
    "public: int __thiscall CEXAutoBackupFile::GetBackupFile(unsigned short * *)",
    "public: bool __thiscall CReaderWriterLock3::TryReadOrWriteLock(bool &)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_Initialize(unsigned long const (__stdcall*)(void const *),unsigned long (__stdcall*)(unsigned long),bool (__stdcall*)(unsigned long,unsigned long),void (__stdcall*)(void const *,int),char const *,double,unsigned long)",
    "public: void __thiscall CLockedSingleList::Lock(void)",
    "private: bool __thiscall CReaderWriterLock::_CmpExch(long,long)",
    "private: bool __thiscall CSpinLock::_TryLock(void)",
    "private: void __thiscall CReaderWriterLock2::_LockSpin(bool)",
    "public: static void __stdcall CSpinLock::SetDefaultSpinAdjustmentFactor(double)",
    "public: static int __cdecl CMdVersionInfo::IsWin9x(void)",
    "public: __thiscall CSmallSpinLock::CSmallSpinLock(void)",
    "public: __thiscall CLKRHashTable_Iterator::~CLKRHashTable_Iterator(void)",
    "public: bool __thiscall CSpinLock::IsReadLocked(void)const",
    "public: bool __thiscall CSmallSpinLock::IsReadLocked(void)const",
    "public: unsigned long __thiscall CLKRHashTable::Apply(enum LK_ACTION (__stdcall*)(void const *,void *),void *,enum LK_LOCKTYPE)",
    "private: bool __thiscall CLKRHashTable::_FreeSubTable(class CLKRLinearHashTable *)",
    "public: __thiscall CSpinLock::CSpinLock(void)",
    "public: class CSmallSpinLock & __thiscall CSmallSpinLock::operator=(class CSmallSpinLock const &)",
    "public: bool __thiscall CLKRHashTable::EqualRange(unsigned long,class CLKRHashTable_Iterator &,class CLKRHashTable_Iterator &)",
    "public: int __thiscall CLKRLinearHashTable::CheckTable(void)const",
    "public: unsigned short __thiscall CFakeLock::GetSpinCount(void)const",
    "public: bool __thiscall CFakeLock::IsReadLocked(void)const",
    "public: bool __thiscall CReaderWriterLock::IsWriteUnlocked(void)const",
    "public: bool __thiscall CLKRHashTable::IsUsable(void)const",
    "public: bool __thiscall CFakeLock::TryReadLock(void)",
    "public: bool __thiscall CSpinLock::SetSpinCount(unsigned short)",
    "public: bool __thiscall CLKRLinearHashTable::ValidSignature(void)const",
    "public: static void __stdcall CReaderWriterLock2::SetDefaultSpinAdjustmentFactor(double)",
    "public: bool __thiscall CLKRLinearHashTable::IsReadLocked(void)const",
    "public: class CListEntry * __thiscall CLockedDoubleList::First(void)",
    "public: void __thiscall CLKRLinearHashTable::Clear(void)",
    "public: class CLKRHashTableStats __thiscall CLKRLinearHashTable::GetStatistics(void)const",
    "private: static class CLKRhashDefaultAllocator CLKRHashTable::sm_DefaultAllocator",
    "private: static long __stdcall CSpinLock::_CurrentThreadId(void)",
    "public: bool __thiscall CFakeLock::ReadOrWriteLock(void)",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<4,1,1,2,3,3>::Recursion(void)",
    "public: void __thiscall CSpinLock::WriteUnlock(void)",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<5,2,2,1,3,2>::PerLockSpin(void)",
    "public: void __thiscall CFakeLock::ReadUnlock(void)",
    "public: __thiscall CExFileOperation::CExFileOperation(void)",
    "public: void __thiscall CLockedSingleList::Push(class CSingleListEntry * const)",
    "public: unsigned short __thiscall CSmallSpinLock::GetSpinCount(void)const",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<1,1,3,1,3,2>::QueueType(void)",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<7,2,1,1,3,2>::WaitType(void)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_InsertRecord(void const *,unsigned long,bool,void const * *,class CLKRLinearHashTable_Iterator *)",
    "public: bool __thiscall CReaderWriterLock::SetSpinCount(unsigned short)",
    "public: void __thiscall CSpinLock::WriteLock(void)",
    "public: __thiscall CFakeLock::CFakeLock(void)",
    "public: void __thiscall CLockedDoubleList::RemoveEntry(class CListEntry * const)",
    "private: bool __thiscall CLKRLinearHashTable::_DeleteNode(class CBucket * const,class CNodeClump * &,class CNodeClump * &,int &)",
    "public: class CReaderWriterLock2 & __thiscall CReaderWriterLock2::operator=(class CReaderWriterLock2 const &)",
    "private: bool __thiscall CReaderWriterLock2::_TryReadLock(void)",
    "public: __thiscall CLKRHashTable::~CLKRHashTable(void)",
    "private: bool __thiscall CLKRHashTable::_FreeSubTableArray(class CLKRLinearHashTable * *)",
    "public: static void __stdcall CDoubleList::RemoveEntry(class CListEntry * const)",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<6,2,2,1,3,2>::Recursion(void)",
    "private: bool __thiscall CLKRLinearHashTable::_FreeSegment(class CSegment *)const",
    "public: bool __thiscall CReaderWriterLock::IsReadUnlocked(void)const",
    "public: unsigned long const __thiscall CLKRLinearHashTable_Iterator::Key(void)const",
    "public: void __thiscall CLKRLinearHashTable::WriteLock(void)",
    "long __stdcall CreateHolder(struct IGPDispenser *,int,unsigned int,struct IGPHolder * *)",
    "public: void __thiscall CReaderWriterLock3::ConvertExclusiveToShared(void)",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::FindRecord(void const *)const",
    "public: long __thiscall CEXAutoBackupFile::RestoreFile(void)",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<3,1,1,1,1,1>::Recursion(void)",
    "public: bool __thiscall CSmallSpinLock::SetSpinCount(unsigned short)",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<5,2,2,1,3,2>::LockType(void)",
    "private: bool __thiscall CSmallSpinLock::_TryLock(void)",
    "private: void __thiscall CReaderWriterLock::_LockSpin(bool)",
    "private: bool __thiscall CLKRLinearHashTable::_IsValidIterator(class CLKRLinearHashTable_Iterator const &)const",
    "public: bool __thiscall CSmallSpinLock::IsWriteUnlocked(void)const",
    "public: int __thiscall CLKRHashTable::CheckTable(void)const",
    "public: static unsigned short __stdcall CReaderWriterLock3::GetDefaultSpinCount(void)",
    "SetIUMS",
    "public: void __thiscall CSmallSpinLock::ConvertSharedToExclusive(void)",
    "private: class CLKRLinearHashTable * __thiscall CLKRHashTable::_AllocateSubTable(char const *,unsigned long const (__stdcall*)(void const *),unsigned long (__stdcall*)(unsigned long),bool (__stdcall*)(unsigned long,unsigned long),void (__stdcall*)(void const *,int),double,unsigned long,class CLKRHashTable *,bool,bool)",
    "public: static unsigned short const * __stdcall CReaderWriterLock::ClassName(void)",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<3,1,1,1,1,1>::WaitType(void)",
    "public: void __thiscall CLKRLinearHashTable::ReadUnlock(void)const",
    "public: void __thiscall CReaderWriterLock3::ReadUnlock(void)",
    "public: class CListEntry * __thiscall CDoubleList::First(void)const",
    "public: bool __thiscall CReaderWriterLock::IsWriteLocked(void)const",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<5,2,2,1,3,2>::Recursion(void)",
    "protected: static double CFakeLock::sm_dblDfltSpinAdjFctr",
    "public: __thiscall CEXAutoBackupFile::CEXAutoBackupFile(void)",
    "public: bool __thiscall CLKRHashTable_Iterator::operator==(class CLKRHashTable_Iterator const &)const",
    "public: bool __thiscall CSmallSpinLock::TryReadLock(void)",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<4,1,1,2,3,3>::MutexType(void)",
    "IrtlTrace",
    "private: static class CLockedDoubleList CLKRLinearHashTable::sm_llGlobalList",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::InsertRecord(void const *,bool,void const * *)",
    "public: void __thiscall CCritSec::ConvertExclusiveToShared(void)",
    "public: class CListEntry * __thiscall CDoubleList::RemoveTail(void)",
    "private: void __thiscall CSpinLock::_Unlock(void)",
    "public: unsigned short __thiscall CReaderWriterLock3AR::GetSpinCount(void)const",
    "public: static double __stdcall CReaderWriterLock::GetDefaultSpinAdjustmentFactor(void)",
    "public: __thiscall CLKRHashTable::CLKRHashTable(char const *,unsigned long const (__stdcall*)(void const *),unsigned long (__stdcall*)(unsigned long),bool (__stdcall*)(unsigned long,unsigned long),void (__stdcall*)(void const *,int),double,unsigned long,unsigned long,bool,bool,class CLKRhashAllocator *)",
    "public: void __thiscall CFakeLock::ConvertExclusiveToShared(void)",
    "private: void __thiscall CLKRLinearHashTable::_AddRefRecord(void const *,int)const",
    "public: bool __thiscall CReaderWriterLock3AR::IsWriteLocked(void)const",
    "public: static double __stdcall CReaderWriterLock2::GetDefaultSpinAdjustmentFactor(void)",
    "private: bool __thiscall CReaderWriterLock3AR::_TryReadLock(void)",
    "private: bool __thiscall CReaderWriterLock::_TryReadLock(void)",
    "public: void __thiscall CReaderWriterLock::ReadUnlock(void)",
    "public: class CListEntry const * __thiscall CDoubleList::HeadNode(void)const",
    "public: void __thiscall CReaderWriterLock2::WriteUnlock(void)",
    "public: unsigned short __thiscall CSpinLock::GetSpinCount(void)const",
    "public: __thiscall CReaderWriterLock::CReaderWriterLock(void)",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<5,2,2,1,3,2>::MutexType(void)",
    "public: bool __thiscall CCritSec::SetSpinCount(unsigned short)",
    "public: long __thiscall CExFileOperation::FOCopyFile(unsigned short const *,unsigned short const *,int)",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<2,1,1,1,3,2>::WaitType(void)",
    "public: static unsigned short const * __stdcall CFakeLock::ClassName(void)",
    "public: void __thiscall CLKRHashTable::SetTableLockSpinCount(unsigned short)",
    "private: bool __thiscall CSpinLock::_IsLocked(void)const",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<8,2,1,1,3,2>::PerLockSpin(void)",
    "public: bool __thiscall CLKRLinearHashTable::IsWriteUnlocked(void)const",
    "public: void __thiscall CReaderWriterLock::ReadLock(void)",
    "private: bool __thiscall CReaderWriterLock3::_TryReadLockRecursive(void)",
    "protected: bool __thiscall CLKRHashTable_Iterator::_Increment(bool)",
    "public: static unsigned short const * __stdcall CSmallSpinLock::ClassName(void)",
    "private: void __thiscall CLKRLinearHashTable::_BucketWriteLock(class CBucket * const)const",
    "public: void __thiscall CReaderWriterLock3AR::ReadLock(void)",
    "public: bool __thiscall CLockedSingleList::IsLocked(void)const",
    "public: bool __thiscall CSmallSpinLock::IsReadUnlocked(void)const",
    "public: static enum LK_TABLESIZE __stdcall CLKRLinearHashTable::NumSubTables(unsigned long &,unsigned long &,bool)",
    "private: unsigned long __thiscall CLKRLinearHashTable::_CalcKeyHash(unsigned long)const",
    "public: static unsigned short const * __stdcall CLKRLinearHashTable::ClassName(void)",
    "public: long __thiscall CExFileOperation::FODeleteFile(unsigned short const *)",
    "public: bool __thiscall CLKRHashTable::ValidSignature(void)const",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<2,1,1,1,3,2>::PerLockSpin(void)",
    "protected: static double CReaderWriterLock2::sm_dblDfltSpinAdjFctr",
    "public: void __thiscall CReaderWriterLock2::WriteLock(void)",
    "public: void __thiscall CFakeLock::ReadLock(void)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_MergeRecordSets(class CBucket *,class CNodeClump *,class CNodeClump *)",
    "public: __thiscall CLKRLinearHashTable_Iterator::~CLKRLinearHashTable_Iterator(void)",
    "public: int __thiscall CEXAutoBackupFile::fHaveBackup(void)",
    "public: long __thiscall CExFileOperation::FOMoveFile(unsigned short const *,unsigned short const *)",
    "public: bool __thiscall CLKRHashTable::Erase(class CLKRHashTable_Iterator &)",
    "public: class CSingleList & __thiscall CSingleList::operator=(class CSingleList const &)",
    "public: bool __thiscall CSmallSpinLock::TryWriteLock(void)",
    "public: static enum LK_TABLESIZE __stdcall CLKRHashTable::NumSubTables(unsigned long &,unsigned long &,bool)",
    "public: bool __thiscall CSingleList::IsEmpty(void)const",
    "private: void __thiscall CLKRLinearHashTable::_Clear(bool)",
    "public: static long __stdcall CLKRHashTableStats::BucketSize(long)",
    "public: unsigned short __thiscall CLKRLinearHashTable::GetTableLockSpinCount(void)const",
    "public: static int __cdecl CMdVersionInfo::IsWin98orLater(void)",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::DeleteRecord(void const *)",
    "public: static int __cdecl CMdVersionInfo::GetVersionExW(struct _OSVERSIONINFOW *)",
    "public: __thiscall CCritSec::~CCritSec(void)",
    "protected: static unsigned short CFakeLock::sm_wDefaultSpinCount",
    "public: static unsigned short const * __stdcall CSpinLock::ClassName(void)",
    "public: void __thiscall CCritSec::ReadUnlock(void)",
    "public: void __thiscall CReaderWriterLock2::ReadUnlock(void)",
    "public: long __thiscall CExFileOperation::FOReplaceFile(unsigned short const *,unsigned short const *)",
    "public: bool __thiscall CLKRHashTable::Find(unsigned long,class CLKRHashTable_Iterator &)",
    "private: bool __thiscall CReaderWriterLock3::_TryWriteLock(long)",
    "public: bool __thiscall CLKRHashTable_Iterator::operator!=(class CLKRHashTable_Iterator const &)const",
    "private: bool __thiscall CReaderWriterLock3AR::_TryReadLockRecursive(void)",
    "public: static unsigned short __stdcall CSpinLock::GetDefaultSpinCount(void)",
    "private: void __thiscall CLKRLinearHashTable::_TableLock(enum LK_LOCKTYPE)",
    "long const * const `public: static long const * __stdcall CLKRHashTableStats::BucketSizes(void)'::`2'::s_aBucketSizes",
    "public: static double __stdcall CSpinLock::GetDefaultSpinAdjustmentFactor(void)",
    "public: static int __cdecl CMdVersionInfo::IsWinNT4(void)",
    "public: __thiscall CFakeLock::~CFakeLock(void)",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<3,1,1,1,1,1>::PerLockSpin(void)",
    "public: bool __thiscall CReaderWriterLock3::IsReadLocked(void)const",
    "private: bool __thiscall CLKRLinearHashTable::_EqualKeys(unsigned long,unsigned long)const",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<2,1,1,1,3,2>::Recursion(void)",
    "public: bool __thiscall CCritSec::IsWriteUnlocked(void)const",
    "public: static void __stdcall CReaderWriterLock3AR::SetDefaultSpinCount(unsigned short)",
    "public: static void __stdcall CReaderWriterLock2::SetDefaultSpinCount(unsigned short)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_FindRecord(void const *,unsigned long)const",
    "public: bool __thiscall CLKRLinearHashTable::IsUsable(void)const",
    "public: bool __thiscall CCritSec::IsReadUnlocked(void)const",
    "public: bool __thiscall CReaderWriterLock2::IsReadLocked(void)const",
    "public: bool __thiscall CSpinLock::TryReadLock(void)",
    "public: class CLKRHashTable_Iterator __thiscall CLKRHashTable::Begin(void)",
    "public: class CLKRLinearHashTable_Iterator __thiscall CLKRLinearHashTable::Begin(void)",
    "public: __thiscall CCritSec::CCritSec(void)",
    "public: bool __thiscall CLKRHashTable::IsReadUnlocked(void)const",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::DeleteKey(unsigned long)",
    "public: static void __stdcall CReaderWriterLock3::SetDefaultSpinAdjustmentFactor(double)",
    "public: bool __thiscall CFakeLock::IsWriteLocked(void)const",
    "public: int __thiscall CLKRLinearHashTable::NumSubTables(void)const",
    "public: void __thiscall CSpinLock::ConvertExclusiveToShared(void)",
    "public: bool __thiscall CLockedSingleList::IsEmpty(void)const",
    "public: class CLockedSingleList & __thiscall CLockedSingleList::operator=(class CLockedSingleList const &)",
    "public: __thiscall CLKRLinearHashTable::CLKRLinearHashTable(char const *,unsigned long const (__stdcall*)(void const *),unsigned long (__stdcall*)(unsigned long),bool (__stdcall*)(unsigned long,unsigned long),void (__stdcall*)(void const *,int),double,unsigned long,unsigned long,bool,bool,class CLKRhashAllocator *)",
    "public: bool __thiscall CReaderWriterLock3::SetSpinCount(unsigned short)",
    "public: class CReaderWriterLock & __thiscall CReaderWriterLock::operator=(class CReaderWriterLock const &)",
    "public: unsigned short __thiscall CLKRHashTable::GetTableLockSpinCount(void)const",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_SetSegVars(enum LK_TABLESIZE,unsigned long)",
    "public: static void __stdcall CReaderWriterLock::SetDefaultSpinCount(unsigned short)",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<8,2,1,1,3,2>::Recursion(void)",
    "public: int __thiscall CLKRHashTable::NumSubTables(void)const",
    "public: static double __stdcall CReaderWriterLock3AR::GetDefaultSpinAdjustmentFactor(void)",
    "public: class CLKRHashTable_Iterator __thiscall CLKRHashTable::End(void)",
    "public: void __thiscall CSmallSpinLock::ReadLock(void)",
    "public: bool __thiscall CReaderWriterLock3::TryConvertSharedToExclusive(void)",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<6,2,2,1,3,2>::PerLockSpin(void)",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<5,2,2,1,3,2>::WaitType(void)",
    "private: bool __thiscall CLKRLinearHashTable::_FreeNodeClump(class CNodeClump *)",
    "public: bool __thiscall CLockedSingleList::IsUnlocked(void)const",
    "public: virtual unsigned short const * __thiscall CLKRhashDefaultAllocator::ClassName(void)",
    "public: static unsigned short __stdcall CSmallSpinLock::GetDefaultSpinCount(void)",
    "public: bool __thiscall CReaderWriterLock3AR::IsReadUnlocked(void)const",
    "public: __thiscall CReaderWriterLock3::CReaderWriterLock3(void)",
    "public: bool __thiscall CLockedDoubleList::IsEmpty(void)const",
    "FXMemAttach",
    "const CLKRhashDefaultAllocator::`vftable'",
    "public: static void __stdcall CSmallSpinLock::SetDefaultSpinCount(unsigned short)",
    "private: void __thiscall CReaderWriterLock::_WriteLockSpin(void)",
    "public: class CLockBase<1,1,3,1,3,2> & __thiscall CLockBase<1,1,3,1,3,2>::operator=(class CLockBase<1,1,3,1,3,2> const &)",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<6,2,2,1,3,2>::QueueType(void)",
    "MpHeapFree",
    "public: void __thiscall CReaderWriterLock3::WriteLock(void)",
    "public: void __thiscall CSmallSpinLock::WriteLock(void)",
    "public: void __thiscall CReaderWriterLock3::ReadLock(void)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_DeleteKey(unsigned long,unsigned long)",
    "public: unsigned long __thiscall CLKRLinearHashTable::Apply(enum LK_ACTION (__stdcall*)(void const *,void *),void *,enum LK_LOCKTYPE)",
    "public: void __thiscall CFakeLock::ReadOrWriteUnlock(bool)",
    "public: bool __thiscall CReaderWriterLock::IsReadLocked(void)const",
    "private: static long __stdcall CReaderWriterLock3::_CurrentThreadId(void)",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<7,2,1,1,3,2>::PerLockSpin(void)",
    "MPCSUninitialize",
    "public: void __thiscall CReaderWriterLock::ConvertSharedToExclusive(void)",
    "public: bool __thiscall CReaderWriterLock2::IsReadUnlocked(void)const",
    "public: static long __stdcall CLKRHashTableStats::BucketIndex(long)",
    "public: bool __thiscall CReaderWriterLock3::TryWriteLock(void)",
    "public: bool __thiscall CLKRHashTable::IsReadLocked(void)const",
    "public: void __thiscall CLockedDoubleList::InsertHead(class CListEntry * const)",
    "public: __thiscall CLockedSingleList::CLockedSingleList(void)",
    "public: bool __thiscall CLKRLinearHashTable::IsWriteLocked(void)const",
    "mpFree",
    "public: void __thiscall CLKRHashTable::WriteUnlock(void)const",
    "public: static int __cdecl CMdVersionInfo::IsWinNT(void)",
    "private: unsigned long __thiscall CLKRLinearHashTable::_DeleteIf(enum LK_PREDICATE (__stdcall*)(void const *,void *),void *,enum LK_PREDICATE &)",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<5,2,2,1,3,2>::QueueType(void)",
    "public: static unsigned long __stdcall CCritSec::SetSpinCount(class CCriticalSection * *,unsigned long)",
    "public: void __thiscall CLockedDoubleList::Lock(void)",
    "public: __thiscall CReaderWriterLock3::~CReaderWriterLock3(void)",
    "private: bool __thiscall CReaderWriterLock2::_CmpExch(long,long)",
    "public: void __thiscall CLKRHashTable::ConvertSharedToExclusive(void)const",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::DeleteKey(unsigned long)",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<8,2,1,1,3,2>::LockType(void)",
    "public: bool __thiscall CFakeLock::IsWriteUnlocked(void)const",
    "private: void __thiscall CReaderWriterLock3::_WriteLockSpin(void)",
    "public: bool __thiscall CReaderWriterLock2::IsWriteLocked(void)const",
    "private: class CNodeClump * __thiscall CLKRLinearHashTable::_AllocateNodeClump(void)",
    "public: bool __thiscall CLKRLinearHashTable::MultiKeys(void)const",
    "public: bool __thiscall CLKRHashTable::IsWriteLocked(void)const",
    "public: unsigned long __thiscall CLKRLinearHashTable::DeleteIf(enum LK_PREDICATE (__stdcall*)(void const *,void *),void *)",
    "protected: __thiscall CLKRHashTable_Iterator::CLKRHashTable_Iterator(class CLKRHashTable *,short)",
    "public: unsigned long __thiscall CLKRLinearHashTable::Size(void)const",
    "public: static unsigned short __stdcall CReaderWriterLock3AR::GetDefaultSpinCount(void)",
    "public: static void __stdcall CFakeLock::SetDefaultSpinCount(unsigned short)",
    "UMSEnterCSWraper",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::FindKey(unsigned long,void const * *)const",
    "public: void __thiscall CReaderWriterLock::WriteLock(void)",
    "private: unsigned long __thiscall CLKRLinearHashTable::_ApplyIf(enum LK_PREDICATE (__stdcall*)(void const *,void *),enum LK_ACTION (__stdcall*)(void const *,void *),void *,enum LK_LOCKTYPE,enum LK_PREDICATE &)",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<7,2,1,1,3,2>::Recursion(void)",
    "public: void __thiscall CSpinLock::ReadUnlock(void)",
    "public: bool __thiscall CFakeLock::TryWriteLock(void)",
    "private: long __thiscall CExFileOperation::_getFileSecurity(unsigned short const *)",
    "public: bool __thiscall CReaderWriterLock3AR::IsReadLocked(void)const",
    "public: bool __thiscall CLKRLinearHashTable_Iterator::operator!=(class CLKRLinearHashTable_Iterator const &)const",
    "_GetAllocCounters@0",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<8,2,1,1,3,2>::MutexType(void)",
    "MPDeleteCriticalSection",
    "public: __thiscall CSpinLock::~CSpinLock(void)",
    "public: class CListEntry * __thiscall CDoubleList::RemoveHead(void)",
    "private: bool __thiscall CReaderWriterLock3AR::_TryWriteLock(long)",
    "public: void __thiscall CLKRHashTable::WriteLock(void)",
    "private: void __thiscall CLKRLinearHashTable::_InsertThisIntoGlobalList(void)",
    "protected: __thiscall CLKRLinearHashTable_Iterator::CLKRLinearHashTable_Iterator(class CLKRLinearHashTable *,class CNodeClump *,unsigned long,short)",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<2,1,1,1,3,2>::MutexType(void)",
    "private: void __thiscall CReaderWriterLock::_ReadLockSpin(void)",
    "private: static long __stdcall CSmallSpinLock::_CurrentThreadId(void)",
    "public: void __thiscall CCritSec::ReadLock(void)",
    "protected: static unsigned short CCritSec::sm_wDefaultSpinCount",
    "public: bool __thiscall CReaderWriterLock2::TryWriteLock(void)",
    "public: void __thiscall CLockedDoubleList::Unlock(void)",
    "public: bool __thiscall CReaderWriterLock2::IsWriteUnlocked(void)const",
    "public: bool __thiscall CReaderWriterLock::TryWriteLock(void)",
    "public: __thiscall CLockedDoubleList::~CLockedDoubleList(void)",
    "private: bool __thiscall CReaderWriterLock3::_TryReadLock(void)",
    "private: class CLKRLinearHashTable * * __thiscall CLKRHashTable::_AllocateSubTableArray(unsigned int)",
    "public: __thiscall CEXAutoBackupFile::~CEXAutoBackupFile(void)",
    "_IrtlAssert@16",
    "public: static double __stdcall CCritSec::GetDefaultSpinAdjustmentFactor(void)",
    "public: __thiscall CReaderWriterLock2::CReaderWriterLock2(void)",
    "private: long __thiscall CExFileOperation::_setFileSecurity(unsigned short const *)",
    "public: unsigned short __thiscall CReaderWriterLock3::GetSpinCount(void)const",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_Contract(void)",
    "public: bool __thiscall CReaderWriterLock3AR::TryWriteLock(void)",
    "public: bool __thiscall CLKRLinearHashTable_Iterator::Increment(void)",
    "public: class CReaderWriterLock3AR & __thiscall CReaderWriterLock3AR::operator=(class CReaderWriterLock3AR const &)",
    "private: bool __thiscall CReaderWriterLock3::_TryWriteLock2(void)",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<7,2,1,1,3,2>::MutexType(void)",
    "public: static void __stdcall CReaderWriterLock3::SetDefaultSpinCount(unsigned short)",
    "private: void __thiscall CSpinLock::_Lock(void)",
    "mpMalloc",
    "public: void __thiscall CCritSec::WriteLock(void)",
    "public: void const * __thiscall CLKRLinearHashTable_Iterator::Record(void)const",
    "public: bool __thiscall CLockedDoubleList::IsLocked(void)const",
    "public: __thiscall CReaderWriterLock2::~CReaderWriterLock2(void)",
    "public: void __thiscall CReaderWriterLock2::ReadLock(void)",
    "public: void __thiscall CCritSec::ConvertSharedToExclusive(void)",
    "private: bool __thiscall CLKRHashTable::_IsValidIterator(class CLKRHashTable_Iterator const &)const",
    "public: __thiscall CEXAutoBackupFile::CEXAutoBackupFile(unsigned short const *)",
    "public: bool __thiscall CReaderWriterLock3AR::IsWriteUnlocked(void)const",
    "private: void __thiscall CLKRHashTable::_RemoveThisFromGlobalList(void)",
    "public: class CLKRLinearHashTable_Iterator __thiscall CLKRLinearHashTable::End(void)",
    "public: bool __thiscall CReaderWriterLock3::IsWriteUnlocked(void)const",
    "public: void __thiscall CLKRHashTable::ReadLock(void)const"
  ],
  "msdelta.dll": [
    "GetDeltaInfoA",
    "GetDeltaInfoW",
    "GetDeltaSignatureB",
    "ApplyDeltaA",
    "GetDeltaInfoB",
    "GetDeltaSignatureA",
    "CreateDeltaA",
    "CreateDeltaB",
    "ApplyDeltaW",
    "ApplyDeltaB",
    "DeltaFree",
    "GetDeltaSignatureW",
    "DeltaNormalizeProvidedB",
    "ApplyDeltaProvidedB",
    "CreateDeltaW"
  ],
  "msdmo.dll": [
    "DMOGetName",
    "DMORegister",
    "MoDeleteMediaType",
    "DMOGetTypes",
    "DMOEnum",
    "MoCopyMediaType",
    "DMOGuidToStrA",
    "MoFreeMediaType",
    "DMOStrToGuidA",
    "MoCreateMediaType",
    "DMOGuidToStrW",
    "MoInitMediaType",
    "DMOStrToGuidW",
    "MoDuplicateMediaType",
    "DMOUnregister"
  ],
  "msdri.dll": [
    "CoInstallerEntry",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "msdrm.dll": [
    "DRMAcquireLicense",
    "DRMGetUnboundLicenseObjectCount",
    "DRMGetIssuanceLicenseInfo",
    "DRMCreateEnablingBitsEncryptor",
    "DRMGetCertificateChainCount",
    "DRMGetUserRights",
    "DRMRegisterRevocationList",
    "DRMpFileUnprotect",
    "DRMGetIntervalTime",
    "DRMDuplicateHandle",
    "DRMDeleteLicense",
    "DRMCreateUser",
    "__AddMachineCertToLicenseStore",
    "DRMAddRightWithUser",
    "DllGetClassObject",
    "DRMGetOwnerLicense",
    "DRMAttest",
    "DRMIsActivated",
    "DRMAddLicense",
    "DRMSetRevocationPoint",
    "DRMSetGlobalOptions",
    "DRMpFileInitialize",
    "DRMDecrypt",
    "DRMGetTime",
    "DRMGetIssuanceLicenseTemplate",
    "DRMpFileIsProtected",
    "DRMDuplicateSession",
    "DllUnregisterServer",
    "DRMEncode",
    "DRMGetBoundLicenseAttributeCount",
    "DRMGetApplicationSpecificData",
    "DRMDuplicateEnvironmentHandle",
    "DRMGetBoundLicenseAttribute",
    "DRMGetBoundLicenseObject",
    "DRMGetMetaData",
    "DRMpCloseFile",
    "DRMCloseEnvironmentHandle",
    "DRMCloseSession",
    "DRMLoadLibrary",
    "DRMDeconstructCertificateChain",
    "DRMGetRightExtendedInfo",
    "DRMGetUsers",
    "DRMCreateLicenseStorageSession",
    "DRMGetSecurityProvider",
    "DRMParseUnboundLicense",
    "DRMCreateBoundLicense",
    "DRMGetProcAddress",
    "DRMSetNameAndDescription",
    "DRMGetSignedIssuanceLicense",
    "DRMClearAllRights",
    "DRMDuplicatePubHandle",
    "DRMVerify",
    "DRMGetClientVersion",
    "DRMEncrypt",
    "DRMDecode",
    "DRMCloseQueryHandle",
    "DRMGetUsagePolicy",
    "DRMGetUnboundLicenseAttribute",
    "DRMAcquireAdvisories",
    "DRMCreateClientSession",
    "DRMRepair",
    "DRMGetNameAndDescription",
    "DRMCloseHandle",
    "DRMCreateEnablingBitsDecryptor",
    "DRMGetInfo",
    "DRMpFileProtect",
    "DRMGetEnvironmentInfo",
    "DRMInitEnvironment",
    "DRMSetIntervalTime",
    "DRMGetUnboundLicenseObject",
    "DRMGetUserInfo",
    "DRMSetApplicationSpecificData",
    "DRMActivate",
    "DRMCreateRight",
    "DRMAcquireIssuanceLicenseTemplate",
    "DRMCreateEnablingPrincipal",
    "DRMRegisterProtectedWindow",
    "DRMConstructCertificateChain",
    "DllRegisterServer",
    "DRMCheckSecurity",
    "DRMSetUsagePolicy",
    "DRMSetMetaData",
    "DRMRegisterContent",
    "DRMGetBoundLicenseObjectCount",
    "DllCanUnloadNow",
    "DRMGetRevocationPoint",
    "DRMIsWindowProtected",
    "DRMGetUnboundLicenseAttributeCount",
    "DRMpFreeMemory",
    "DRMGetRightInfo",
    "DRMGetServiceLocation",
    "DRMEnumerateLicense",
    "DRMCreateIssuanceLicense",
    "DRMGetSignedIssuanceLicenseEx",
    "DRMClosePubHandle"
  ],
  "msdtcVSp1res.dll": "No exports",
  "msdtckrm.dll": [
    "KtmRmServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "msdtclog.dll": [
    "DllGetDTCLOG2",
    "public: static long __stdcall CLogMgr::CreateInstance(class CLogMgr * *,struct IUnknown *)",
    "public: static void __stdcall CLogMgr::DeleteInstance(class CLogMgr *)",
    "int __stdcall DllGetDTCLOG(struct _GUID const &,struct _GUID const &,void * *)",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msdtcprx.dll": [
    "SysPrepDtcGeneralize",
    "DTC_XaCommit",
    "SysPrepDtcCleanup",
    "ShutDownCM",
    "DTC_XaForget",
    "DTC_XaRecover",
    "DllRegisterServer",
    "DllUnregisterServer",
    "long __stdcall InstallDtc(struct ITmInstance *,unsigned short *,unsigned short *,unsigned short *,unsigned short *,unsigned long,unsigned long,unsigned short *,int)",
    "SysPrepDtcSpecialize",
    "long __stdcall InstallContacts(struct ITmInstance *)",
    "public: static long __stdcall CNameService::Create(class CNameService * *)",
    "DTC_XaPrepare",
    "DTC_XaClose",
    "DllGetTransactionManagerCore",
    "CreateRemoteProxyTmInstance",
    "DTC_XaStart",
    "ContactToNameObject",
    "public: static long __stdcall CTmProxyCore::CreateInstance(class CTmProxyCore * *,struct IUnknown *)",
    "long __stdcall InstallDtcClient(unsigned short *,unsigned long,unsigned long)",
    "long __stdcall DeployDtc(void)",
    "DTC_XaOpen",
    "DllGetClassObject",
    "UpgradeApplySuccess",
    "CreateTmInstanceForRemoteAdmin",
    "CreateLegacyTmInstance",
    "CreateLocalTmInstance",
    "long __stdcall RemoveDtc(unsigned short *,unsigned short *,unsigned short *)",
    "DllGetDtcConfigManager",
    "int __stdcall GetDtcLogPath(unsigned long,unsigned short *)",
    "DllGetDTCConnectionManager",
    "DTC_XaEnd",
    "DTC_XaRollback",
    "DTC_XaComplete",
    "GetTmInstance",
    "DllGetDTCProxy",
    "DllGetDTCUtilObject"
  ],
  "msdtctm.dll": [
    "_SetTipFunctionalityWorking@4",
    "ASCWrapObject",
    "DtcMainExt",
    "ASCWrapClassFactory",
    "_GetTipFunctionalityWorking@0",
    "ASCDeliverDeferred",
    "public: static long __stdcall CTm::CreateInstance(class CTm * *,struct IUnknown *)",
    "ASCGetSafeReference",
    "DllGetClassObject",
    "ASCDefer"
  ],
  "msdtcuiu.dll": [
    "DtcPerfCollect",
    "DtcPerfOpen",
    "DtcPerfClose",
    "PerfDllRegisterServer",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msexch40.dll": [
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msexcl40.dll": [
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msfeeds.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "MsfeedsCreateInstance"
  ],
  "msfeedsbs.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "msftedit.dll": [
    "DllGetActivationFactory",
    "RichEditWndProc",
    "IID_ITextHost2",
    "MathTranslate",
    "ShutdownTextServices",
    "RichEdit10ANSIWndProc",
    "GetMathAlphanumericCode",
    "RichEditANSIWndProc",
    "MathBuildDown",
    "IID_ITextServices",
    "GetMathAlphanumeric",
    "IID_ITextHost",
    "IID_ITextServices2",
    "CreateTextServices",
    "MathBuildUp",
    "IID_IRichEditOleCallback",
    "IID_ITextDocument2",
    "_DisableOleinitCheck@0",
    "SetCustomTextOutHandlerEx",
    "IID_IRicheditUiaOverrides",
    "DllGetVersion",
    "IID_IRichEditOle",
    "IID_IRicheditWindowlessAccessibility"
  ],
  "mshtml.dll": [
    "CreateHTMLPropertyPage",
    "MatchExactGetIDsOfNames",
    "IERegisterXMLNS",
    "ShowModelessHTMLDialog",
    "TravelLogCreateInstance",
    "DllCanUnloadNow",
    "TravelLogStgCreateInstance",
    "IEIsXMLNSRegistered",
    "RunHTMLApplication",
    "GetColorValueFromString",
    "ClearPhishingFilterData",
    "DllEnumClassObjects",
    "DllGetClassObject",
    "ShowHTMLDialogEx",
    "ConvertAndEscapePostData",
    "PrintHTML",
    "GetWebPlatformObject",
    "ShowHTMLDialog",
    "ShowModalDialog"
  ],
  "mshtmled.dll": [
    "DllGetClassObject",
    "DllCanUnloadNow",
    "DllEnumClassObjects",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mshtmler.dll": "No exports",
  "msi.dll": [
    "MsiGetFileHashA",
    "MsiEnumClientsA",
    "MsiEnumComponentsExA",
    "MsiGetUserInfoW",
    "MsiLocateComponentW",
    "MsiRecordSetStreamA",
    "MsiSourceListClearSourceW",
    "MsiMessageBoxExW",
    "MsiOpenDatabaseW",
    "MsiUseFeatureExW",
    "MsiDatabaseMergeA",
    "MsiOpenDatabaseA",
    "MsiGetPropertyA",
    "MsiOpenPackageW",
    "MsiSetFeatureAttributesW",
    "MsiGetShortcutTargetW",
    "MsiQueryFeatureStateExW",
    "MsiIsProductElevatedA",
    "MsiQueryFeatureStateFromDescriptorA",
    "MsiSourceListAddMediaDiskA",
    "MsiSourceListGetInfoW",
    "MsiConfigureProductA",
    "MsiVerifyDiskSpace",
    "MsiProvideComponentA",
    "MsiEnableLogA",
    "MsiQueryFeatureStateExA",
    "MsiGetProductCodeFromPackageCodeA",
    "MsiProvideComponentFromDescriptorW",
    "MsiPreviewDialogA",
    "MsiGetPropertyW",
    "MsiApplyPatchA",
    "MsiGetProductInfoExW",
    "MsiDecomposeDescriptorA",
    "MsiConfigureFeatureFromDescriptorA",
    "MsiProcessMessage",
    "MsiNotifySidChangeW",
    "MsiExtractPatchXMLDataA",
    "MsiViewFetch",
    "MsiSequenceW",
    "MsiSourceListEnumMediaDisksA",
    "MsiGetFeatureStateW",
    "MsiQueryProductStateW",
    "MsiDatabaseExportA",
    "MsiCloseAllHandles",
    "MsiAdvertiseScriptW",
    "MsiEnumRelatedProductsW",
    "MsiDeleteUserDataA",
    "MsiGetProductCodeW",
    "MsiSummaryInfoGetPropertyCount",
    "DllGetClassObject",
    "MsiMessageBoxExA",
    "MsiProvideComponentFromDescriptorA",
    "MsiProvideComponentW",
    "MsiProvideQualifiedComponentExW",
    "MsiSourceListClearMediaDiskW",
    "MsiApplyMultiplePatchesW",
    "MsiReinstallProductW",
    "MsiSourceListAddSourceExW",
    "MsiLoadStringA",
    "MsiRecordClearData",
    "MsiDatabaseCommit",
    "MsiGetComponentPathExW",
    "MsiGetProductInfoW",
    "MsiLoadStringW",
    "MsiEnumComponentsA",
    "MsiInstallMissingComponentW",
    "MsiGetProductInfoFromScriptW",
    "MsiOpenPackageExA",
    "MsiEnumComponentsW",
    "MsiProvideAssemblyW",
    "Migrate10CachedPackagesW",
    "MsiRecordReadStream",
    "MsiDatabaseGenerateTransformA",
    "MsiGetPatchFileListW",
    "MsiViewGetErrorW",
    "MsiGetLastErrorRecord",
    "MsiQueryFeatureStateA",
    "MsiAdvertiseProductExA",
    "MsiDeterminePatchSequenceA",
    "MsiRecordGetFieldCount",
    "MsiDatabaseImportA",
    "MsiDoActionW",
    "MsiEnumPatchesW",
    "MsiOpenProductA",
    "MsiSetFeatureStateW",
    "MsiSummaryInfoGetPropertyW",
    "MsiRecordGetInteger",
    "MsiEvaluateConditionA",
    "MsiEnumProductsExA",
    "MsiGetPatchInfoExW",
    "MsiVerifyPackageA",
    "MsiGetPatchInfoW",
    "MsiSourceListForceResolutionA",
    "DllUnregisterServer",
    "MsiGetPatchInfoExA",
    "MsiSetPropertyA",
    "MsiGetFeatureValidStatesA",
    "MsiSourceListAddSourceW",
    "MsiGetFeatureCostA",
    "MsiApplyMultiplePatchesA",
    "MsiEnumComponentQualifiersA",
    "MsiCloseHandle",
    "MsiCreateTransformSummaryInfoA",
    "MsiRecordGetStringA",
    "MsiGetComponentStateA",
    "MsiGetProductInfoA",
    "MsiSetFeatureAttributesA",
    "MsiFormatRecordW",
    "MsiReinstallFeatureFromDescriptorA",
    "MsiSourceListAddMediaDiskW",
    "MsiSequenceA",
    "MsiReinstallFeatureA",
    "MsiGetPatchFileListA",
    "MsiGetActiveDatabase",
    "MsiDatabaseIsTablePersistentW",
    "MsiEnumFeaturesW",
    "MsiEnumProductsA",
    "MsiSourceListClearAllA",
    "MsiGetProductPropertyW",
    "MsiUseFeatureA",
    "MsiGetFeatureInfoW",
    "MsiGetFeatureInfoA",
    "MsiBeginTransactionA",
    "MsiGetFeatureUsageW",
    "MsiSummaryInfoSetPropertyW",
    "MsiDatabaseGetPrimaryKeysA",
    "MsiUseFeatureExA",
    "MsiPreviewBillboardW",
    "MsiEnumPatchesExW",
    "MsiConfigureProductExW",
    "MsiPreviewDialogW",
    "MsiSetTargetPathW",
    "MsiSourceListAddSourceExA",
    "MsiSourceListEnumMediaDisksW",
    "MsiSourceListClearAllExW",
    "MsiDatabaseExportW",
    "MsiApplyPatchW",
    "MsiSetExternalUIA",
    "MsiViewGetErrorA",
    "MsiGetProductInfoFromScriptA",
    "MsiOpenPackageExW",
    "MsiRecordSetInteger",
    "MsiQueryComponentStateW",
    "MsiSourceListClearAllExA",
    "MsiGetMode",
    "MsiCollectUserInfoW",
    "DllGetVersion",
    "MsiRecordGetStringW",
    "MsiSourceListClearSourceA",
    "MsiDatabaseGetPrimaryKeysW",
    "MsiConfigureFeatureFromDescriptorW",
    "MsiEnumPatchesA",
    "MsiConfigureProductExA",
    "MsiDatabaseApplyTransformW",
    "MsiDatabaseIsTablePersistentA",
    "MsiAdvertiseProductW",
    "MsiEnumRelatedProductsA",
    "MsiLocateComponentA",
    "MsiSetOfflineContextW",
    "MsiGetUserInfoA",
    "MsiGetTargetPathW",
    "MsiGetComponentPathA",
    "MsiGetProductPropertyA",
    "MsiSourceListAddSourceA",
    "MsiSummaryInfoGetPropertyA",
    "MsiGetFileSignatureInformationA",
    "MsiGetSummaryInformationA",
    "MsiGetSourcePathA",
    "MsiSourceListForceResolutionExA",
    "MsiEnumComponentsExW",
    "MsiEnumFeaturesA",
    "MsiSetFeatureStateA",
    "MsiRemovePatchesA",
    "MsiGetFeatureUsageA",
    "MsiGetLanguage",
    "MsiInvalidateFeatureCache",
    "MsiInstallProductA",
    "MsiSetMode",
    "MsiRecordDataSize",
    "MsiViewExecute",
    "MsiDeleteUserDataW",
    "QueryInstanceCount",
    "MsiGetProductCodeFromPackageCodeW",
    "MsiDatabaseApplyTransformA",
    "MsiSetInstallLevel",
    "MsiInstallMissingFileW",
    "MsiGetFileSignatureInformationW",
    "MsiGetFileVersionW",
    "MsiGetSourcePathW",
    "MsiVerifyPackageW",
    "MsiProvideAssemblyA",
    "MsiEnableUIPreview",
    "MsiGetShortcutTargetA",
    "MsiSourceListForceResolutionW",
    "MsiCollectUserInfoA",
    "MsiEnumComponentCostsA",
    "MsiReinstallFeatureW",
    "MsiInstallMissingFileA",
    "MsiGetComponentPathW",
    "MsiEnumComponentQualifiersW",
    "MsiAdvertiseScriptA",
    "MsiMessageBoxA",
    "MsiSourceListClearAllW",
    "MsiSourceListSetInfoW",
    "MsiRecordSetStringA",
    "MsiReinstallProductA",
    "MsiBeginTransactionW",
    "MsiDatabaseMergeW",
    "MsiSummaryInfoPersist",
    "MsiGetProductCodeA",
    "MsiProcessAdvertiseScriptA",
    "MsiRecordIsNull",
    "MsiRecordSetStreamW",
    "MsiDetermineApplicablePatchesW",
    "MsiSummaryInfoSetPropertyA",
    "MsiEnumClientsW",
    "MsiFormatRecordA",
    "MsiDetermineApplicablePatchesA",
    "MsiSourceListEnumSourcesA",
    "MsiSourceListGetInfoA",
    "MsiDoActionA",
    "MsiEnumProductsExW",
    "MsiViewClose",
    "MsiExtractPatchXMLDataW",
    "DllRegisterServer",
    "MsiEnumClientsExW",
    "MsiSetComponentStateA",
    "MsiQueryFeatureStateW",
    "MsiEnumPatchesExA",
    "MsiIsProductElevatedW",
    "MsiOpenPackageA",
    "MsiEvaluateConditionW",
    "MsiDatabaseImportW",
    "MsiSetExternalUIW",
    "MsiSourceListClearMediaDiskA",
    "MsiGetDatabaseState",
    "MsiEnableLogW",
    "MsiViewGetColumnInfo",
    "MsiProvideQualifiedComponentExA",
    "MsiGetComponentStateW",
    "MsiGetSummaryInformationW",
    "MsiEndTransaction",
    "MsiProvideQualifiedComponentA",
    "MsiSourceListSetInfoA",
    "Migrate10CachedPackagesA",
    "MsiSourceListForceResolutionExW",
    "DllCanUnloadNow",
    "MsiViewModify",
    "MsiUseFeatureW",
    "MsiGetFeatureStateA",
    "MsiGetFeatureValidStatesW",
    "MsiOpenProductW",
    "MsiReinstallFeatureFromDescriptorW",
    "MsiPreviewBillboardA",
    "MsiDecomposeDescriptorW",
    "MsiProvideQualifiedComponentW",
    "MsiCreateRecord",
    "MsiInstallMissingComponentA",
    "MsiQueryComponentStateA",
    "MsiQueryFeatureStateFromDescriptorW",
    "MsiQueryProductStateA",
    "MsiConfigureFeatureA",
    "MsiDatabaseGenerateTransformW",
    "MsiGetFeatureCostW",
    "MsiSetExternalUIRecord",
    "MsiCreateTransformSummaryInfoW",
    "MsiDatabaseOpenViewW",
    "MsiSourceListEnumSourcesW",
    "MsiConfigureFeatureW",
    "MsiDatabaseOpenViewA",
    "MsiCreateAndVerifyInstallerDirectory",
    "MsiGetFileVersionA",
    "MsiSetPropertyW",
    "MsiEnumProductsW",
    "MsiRecordSetStringW",
    "MsiMessageBoxW",
    "MsiAdvertiseProductExW",
    "MsiNotifySidChangeA",
    "MsiGetTargetPathA",
    "MsiEnumClientsExA",
    "MsiGetFileHashW",
    "MsiRemovePatchesW",
    "MsiGetProductInfoExA",
    "MsiSetTargetPathA",
    "MsiSetInternalUI",
    "MsiGetComponentPathExA",
    "MsiProcessAdvertiseScriptW",
    "MsiEnumComponentCostsW",
    "MsiSetComponentStateW",
    "MsiGetPatchInfoA",
    "MsiJoinTransaction",
    "MsiConfigureProductW",
    "MsiInstallProductW",
    "MsiDeterminePatchSequenceW",
    "MsiAdvertiseProductA"
  ],
  "msidcrl40.dll": [
    "CancelPendingRequest",
    "CreateIdentityHandleEx",
    "DecryptWithSessionKey",
    "UpdateUserAssociatedDeviceProperties",
    "EnumerateCertificates",
    "CloseIdentityHandle",
    "NextIdentity",
    "UIEndWaitDialog",
    "LogonIdentityExSSO",
    "PassportFreeMemory",
    "GetAssertion",
    "Initialize",
    "GetExtendedError",
    "UICollectCredential",
    "CreateLinkedIdentityHandle",
    "LogonIdentity",
    "EnumerateUserAssociatedDevices",
    "IsMappedError",
    "GetCertificate",
    "GetAuthenticationStatus",
    "GetWebAuthUrlEx",
    "SetExtendedProperty",
    "SendOneTimeCode",
    "GetDefaultUserForTarget",
    "GetConfigDWORDValue",
    "UnPackErrorBlob",
    "SetIdcrlOptions",
    "EnumerateDeviceID",
    "ProvisionDeviceId",
    "SetIdentityProperty",
    "InitializeEx",
    "GetWebAuthUrl",
    "SetCredential",
    "HasPersistedCredential",
    "GetDeviceIdEx",
    "GetHIPChallenge",
    "UIShowWaitDialog",
    "GenerateDeviceToken",
    "Uninitialize",
    "VerifyAssertion",
    "GetAuthState",
    "AuthIdentityToServiceEx",
    "InitializeIDCRLTraceBuffer",
    "OpenAuthenticatedBrowser",
    "DisassociateDeviceFromUser",
    "GetExtendedProperty",
    "GetRealmInfo",
    "SetUserExtendedProperty",
    "RemoveChangeNotificationCallback",
    "RemoveUserFromSsoGroup",
    "EnumIdentitiesWithCachedCredentials",
    "GetDeviceId",
    "SetChangeNotificationCallback",
    "FlushIDCRLTraceBuffer",
    "GetUsersFromSsoGroup",
    "GetDeviceShortLivedToken",
    "GetUserExtendedProperty",
    "GetIdentityProperty",
    "VerifyCertificate",
    "GenerateCertToken",
    "GetIdentityPropertyByName",
    "AuthIdentityToService",
    "RenewDeviceId",
    "SetDefaultUserForTarget",
    "CloseEnumIdentitiesHandle",
    "GetServiceConfig",
    "StartTracing",
    "AddUserToSsoGroup",
    "LogonIdentityExWithUI",
    "SetIdentityCallback",
    "GetDefaultNoUISSOUser",
    "DeProvisionDeviceId",
    "AssociateDeviceToUser",
    "SetHIPSolution",
    "LogonIdentityEx",
    "GetResponseForHttpChallenge",
    "PersistCredential",
    "GetAuthStateEx",
    "IsDeviceIDAdmin",
    "SetDeviceConsent",
    "InitializeApp",
    "CreateIdentityHandle",
    "EncryptWithSessionKey",
    "RemovePersistedCredential",
    "StopTracing"
  ],
  "msident.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "msidle.dll": "No exports",
  "msidntld.dll": "No exports",
  "msieftp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "msihnd.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msiltcfg.dll": [
    "MsiProvideComponentFromDescriptorW",
    "MsiIsProductElevatedW",
    "MsiDecomposeDescriptorW",
    "MsiQueryFeatureStateFromDescriptorW",
    "MsiReinstallProductW",
    "MsiQueryProductStateW",
    "MsiConfigureProductExW",
    "MsiGetProductInfoW",
    "RestartMsi",
    "MsiSetInternalUI",
    "MsiAdvertiseScriptW",
    "ShutdownMsi",
    "MsiGetComponentPathW",
    "MsiQueryFeatureStateW"
  ],
  "msimg32.dll": [
    "DllInitialize",
    "vSetDdrawflag",
    "AlphaBlend",
    "TransparentBlt",
    "GradientFill"
  ],
  "msimsg.dll": "No exports",
  "msimtf.dll": [
    "DllRegisterServer",
    "MsimtfIsWindowFiltered",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "MsimtfIsGuidMapEnable",
    "DllUnregisterServer"
  ],
  "msisip.dll": [
    "MsiSIPGetSignedDataMsg",
    "MsiSIPRemoveSignedDataMsg",
    "MsiSIPVerifyIndirectData",
    "MsiSIPCreateIndirectData",
    "MsiSIPIsMyTypeOfFile",
    "DllRegisterServer",
    "MsiSIPPutSignedDataMsg",
    "DllUnregisterServer"
  ],
  "msiwer.dll": [
    "OutOfProcessExceptionEventSignatureCallback",
    "OutOfProcessExceptionEventDebuggerLaunchCallback",
    "OutOfProcessExceptionEventCallback"
  ],
  "msjet40.dll": [
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msjetoledb40.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msjint40.dll": [
    "CchLszOfId2"
  ],
  "msjter40.dll": [
    "JetErrIDAForError",
    "JetErrFormattedMessage",
    "JetErrRawMessage",
    "JetErrIDARawMessage"
  ],
  "msjtes40.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mskeyprotcli.dll": [
    "GetKeyProtectionInterface"
  ],
  "mskeyprotect.dll": [
    "GetKeyProtectionInterface"
  ],
  "msls31.dll": [
    "LsResetRMInCurrentSubline",
    "LsPointXYFromPointUV",
    "LsTruncateSubline",
    "LsdnResolvePrevTab",
    "LsQueryLinePointPcp",
    "LsdnGetFormatDepth",
    "LssbGetVisibleDcpInSubline",
    "LssbGetDupSubline",
    "LsGetTatenakayokoLsimethods",
    "LsCompressSubline",
    "LsFindNextBreakSubline",
    "LsGetMinDurBreaks",
    "LsSetDoc",
    "LsModifyLineHeight",
    "LsdnSetRigidDup",
    "LsQueryFLineEmpty",
    "LsFetchAppendToCurrentSublineResume",
    "LsExpandSubline",
    "LsdnQueryObjDimRange",
    "LsEnumSubline",
    "LsGetReverseLsimethods",
    "LsdnSkipCurTab",
    "LsGetWarichuLsimethods",
    "LsdnFinishBySubline",
    "LsdnFinishDeleteAll",
    "LsdnFinishRegular",
    "LsdnQueryPenNode",
    "LsdnFinishByOneChar",
    "LsCreateLine",
    "LsdnGetCurTabInfo",
    "LsGetRubyLsimethods",
    "LsFetchAppendToCurrentSubline",
    "LsQueryCpPpointSubline",
    "LsForceBreakSubline",
    "LsLwMultDivR",
    "LsdnSetAbsBaseLine",
    "LssbGetNumberDnodesInSubline",
    "LsdnModifyParaEnding",
    "LsdnDistribute",
    "LssbFDoneDisplay",
    "LssbFDonePresSubline",
    "LsFinishCurrentSubline",
    "LsCreateContext",
    "LsSetModWidthPairs",
    "LsGetHihLsimethods",
    "LssbGetObjDimSubline",
    "LsSetExpansion",
    "LsdnSubmitSublines",
    "LsCreateSubline",
    "LsdnResetObjDim",
    "LsQueryLineDup",
    "LsSetBreaking",
    "LsDisplayLine",
    "LsAppendRunToCurrentSubline",
    "LsMatchPresSubline",
    "LsQueryLineCpPpoint",
    "LssbGetDurTrailInSubline",
    "LsdnResetPenNode",
    "LsdnFinishDelete",
    "LsDestroySubline",
    "LssbFIsSublineEmpty",
    "LsDestroyLine",
    "LsDisplaySubline",
    "LsEnumLine",
    "LsFindPrevBreakSubline",
    "LsdnFinishByPen",
    "LsQueryTextCellDetails",
    "LsDestroyContext",
    "LsSqueezeSubline",
    "LsSetCompression",
    "LsSetBreakSubline",
    "LsGetSpecialEffectsSubline",
    "LsdnGetDup",
    "LsdnFinishRegularAddAdvancePen",
    "LsQueryPointPcpSubline",
    "LsGetLineDur",
    "LssbGetPlsrunsFromSubline",
    "LssbGetDurTrailWithPensInSubline",
    "LsPointUV2FromPointUV1"
  ],
  "msltus40.dll": [
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msmpeg2adec.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msmpeg2vdec.dll": [
    "public: long __thiscall CVIDEOfilter::GetSurface(int,unsigned char *,long)",
    "DllGetClassObject",
    "public: long __thiscall CVIDEOfilter::GetSurfaceSize(int,long *)",
    "DllCanUnloadNow",
    "public: long __thiscall CVIDEOfilter::LoadSurface(int,unsigned char *,unsigned long)",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msnetobj.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msobjs.dll": "No exports",
  "msoeacct.dll": [
    "PropUtil_HrAddDWORDToSTRW",
    "PropUtil_HrAddBinaryToSTRW",
    "GetDllMajorVersion",
    "PropUtil_HrAddSZToSTRW",
    "HrCreateAccountManager",
    "DllCanUnloadNow",
    "ValidEmailAddress",
    "DllGetClassObject"
  ],
  "msoert2.dll": [
    "strtrimW",
    "IsValidFileIfFileUrlW",
    "CreateTempFileW",
    "PszToANSI",
    "CenterDialog",
    "PVDecodeObject",
    "IUnknownList_CreateInstance",
    "HrIStreamToBSTR",
    "GetRichEdClassStringW",
    "strtrim",
    "HrRewindStream",
    "HrCopyLockBytesToStream",
    "CchFileTimeToDateTimeSz",
    "ReplaceCharsW",
    "CreateTempFileStream",
    "OpenFileStreamShareW",
    "PVGetMsgParam",
    "FIsHTMLFileW",
    "HrSafeGetStreamSize",
    "DeleteTempFileOnShutdownEx",
    "CreateStreamOnHFile",
    "CreateDataObject",
    "ShellUtil_GetSpecialFolderPath",
    "IsHttpUrlW",
    "HrDecodeObject",
    "HrCreateTridentMenu",
    "GetStoreRootDirectoryFromRegistryEntryW",
    "HrGetCertKeyUsage",
    "DllGetClassObject",
    "FIsSpaceA",
    "PVGetCertificateParam",
    "GetStoreRootDirectoryFromRegistryEntry",
    "GenerateUniqueFileNameW",
    "ChConvertFromHex",
    "CleanupFileNameInPlaceA",
    "GetHtmlCharset",
    "UpdateRebarBandColors",
    "WriteStreamToFile",
    "GetTopMostParent",
    "HrLPSZCPToBSTR",
    "PszScanToCharA",
    "PszSkipWhiteA",
    "PszAllocW",
    "CleanupGlobalTempFiles",
    "FIsValidFileNameCharW",
    "HrCopyStream",
    "StripCRLF",
    "_MSG",
    "CryptFreeFunc",
    "HrStreamToByte",
    "PszSkipWhiteW",
    "GetDllMajorVersion",
    "CreateEnumFormatEtc",
    "IsHttpUrlA",
    "FBuildTempPath",
    "HrGetStyleSheet",
    "DeleteTempFile",
    "MessageBoxInstW",
    "IsDigit",
    "RicheditStreamIn",
    "FIsEmptyW",
    "PszEscapeMenuStringA",
    "FIsHTMLFile",
    "CreateSystemHandleName",
    "UlStripWhitespaceW",
    "CreateTempFile",
    "HrCopyStreamToByte",
    "OpenFileStreamWithFlagsW",
    "HrStreamSeekCur",
    "HrStreamSeekBegin",
    "PszEscapeMenuStringW",
    "HrLPSZToBSTR",
    "MessageBoxInst",
    "PszDupA",
    "RicheditStreamOut",
    "PszToUnicode",
    "IDrawText",
    "PszAllocA",
    "HrBSTRToLPSZ",
    "StrToUintW",
    "IVoidPtrList_CreateInstance",
    "UlStripWhitespace",
    "SetFontOnRichEd",
    "PszFromANSIStreamA",
    "HrGetCertificateParam",
    "PszDupW",
    "CreateNotify",
    "OpenFileStreamShare",
    "BrowseForFolderW",
    "CreateStreamOnHFileW",
    "FreeTempFileList",
    "OpenFileStreamW",
    "StrTokExA",
    "WriteStreamToFileHandle",
    "CopyRegistry",
    "HrIndexOfWeek",
    "HrCopyStreamCBEndOnCRLF",
    "HrGetBodyElement",
    "GenerateUniqueFileName",
    "FInitializeRichEdit",
    "HrFindInetTimeZone",
    "HrGetMsgParam",
    "CryptAllocFunc",
    "HrStreamSeekEnd",
    "HrIsStreamUnicode",
    "PszDayFromIndex",
    "AppendTempFileList",
    "HrIStreamWToBSTR",
    "CrackNotificationPackage",
    "HrGetElementImpl",
    "StrTokExW",
    "FIsSpaceW",
    "HrGetStreamSize",
    "FIsValidFileNameCharA",
    "fGetBrowserUrlEncoding",
    "HrCreatePhonebookEntry",
    "CreateLogFile",
    "IsUpper",
    "HrSetDirtyFlagImpl",
    "FMissingCert",
    "FBuildTempPathW",
    "DllCanUnloadNow",
    "HrIndexOfMonth",
    "BrowseForFolder",
    "HrGetStreamPos",
    "CchFileTimeToDateTimeW",
    "FIsEmptyA",
    "PszScanToWhiteA",
    "SzGetCertificateEmailAddress",
    "HrStreamSeekSet",
    "OpenFileStream",
    "WriteStreamToFileW",
    "HrEditPhonebookEntryW",
    "HrFillRasCombo",
    "StrToUintA",
    "PszMonthFromIndex",
    "ReplaceChars",
    "StreamSubStringMatchW",
    "IsPrint",
    "UnlocStrEqNW",
    "HrCheckTridentMenu",
    "GetExePath",
    "CleanupFileNameInPlaceW",
    "HrCopyStreamCB"
  ],
  "msorc32r.dll": "No exports",
  "msorcl32.dll": [
    "ConfigDSN",
    "SQLExecDirect",
    "SQLConnect",
    "LoadByOrdinal",
    "SQLSpecialColumns",
    "SQLExecute",
    "DllRegisterServer",
    "SQLCancel",
    "SQLProcedureColumns",
    "SQLDisconnect",
    "SQLProcedures",
    "SQLRowCount",
    "SQLGetData",
    "SQLColumns",
    "DllUnregisterServer",
    "SQLFreeStmt",
    "SQLBrowseConnect",
    "SQLSetPos",
    "SQLPutData",
    "SQLExtendedFetch",
    "SQLAllocStmt",
    "SQLAllocEnv",
    "SQLDescribeParam",
    "SQLSetStmtOption",
    "DllMain",
    "SQLStatistics",
    "SQLDescribeCol",
    "SQLError",
    "SQLPrepare",
    "SQLAllocConnect",
    "SQLMoreResults",
    "SQLBindParameter",
    "SQLSetCursorName",
    "SQLFreeEnv",
    "SQLPrimaryKeys",
    "SQLDriverConnect",
    "SQLTransact",
    "SQLBindCol",
    "SQLParamData",
    "SQLNumParams",
    "SQLGetInfo",
    "SQLNumResultCols",
    "SQLGetStmtOption",
    "SQLForeignKeys",
    "SQLGetCursorName",
    "SQLGetTypeInfo",
    "SQLFreeConnect",
    "SQLColAttributes",
    "SQLNativeSql",
    "SQLGetConnectOption",
    "SQLSetScrollOptions",
    "SQLSetConnectOption",
    "SQLTables",
    "SQLFetch"
  ],
  "mspatcha.dll": [
    "GetFilePatchSignatureW",
    "GetFilePatchSignatureByBuffer",
    "ApplyPatchToFileByHandles",
    "ApplyPatchToFileA",
    "NormalizeFileForPatchSignature",
    "TestApplyPatchToFileA",
    "ApplyPatchToFileW",
    "TestApplyPatchToFileByHandles",
    "ApplyPatchToFileByHandlesEx",
    "TestApplyPatchToFileW",
    "GetFilePatchSignatureA",
    "TestApplyPatchToFileByBuffers",
    "ApplyPatchToFileExW",
    "ApplyPatchToFileByBuffers",
    "GetFilePatchSignatureByHandle",
    "ApplyPatchToFileExA"
  ],
  "mspatchc.dll": [
    "ExtractPatchHeaderToFileW",
    "GetFilePatchSignatureW",
    "GetFilePatchSignatureByBuffer",
    "CreatePatchFileExW",
    "NormalizeFileForPatchSignature",
    "ExtractPatchHeaderToFileA",
    "GetFilePatchSignatureA",
    "CreatePatchFileByHandles",
    "ExtractPatchHeaderToFileByHandles",
    "CreatePatchFileExA",
    "CreatePatchFileA",
    "CreatePatchFileW",
    "GetFilePatchSignatureByHandle",
    "CreatePatchFileByHandlesEx"
  ],
  "mspbde40.dll": [
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msports.dll": [
    "ComDBOpen",
    "ComDBResizeDatabase",
    "ComDBClaimNextFreePort",
    "SerialDisplayAdvancedSettings",
    "ParallelPortPropPageProvider",
    "SerialPortPropPageProvider",
    "ComDBClaimPort",
    "ComDBReleasePort",
    "PortsClassInstaller",
    "ComDBGetCurrentPortUsage",
    "ComDBClose"
  ],
  "msprivs.dll": "No exports",
  "msrahc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msrating.dll": [
    "RatingCheckUserAccessW",
    "RatingEnableW",
    "ClickedOnRAT",
    "RatingSetupUI",
    "RatingEnable",
    "RatingAccessDeniedDialogW",
    "RatingCustomAddRatingHelper",
    "RatingCustomAddRatingSystem",
    "VerifySupervisorPassword",
    "RatingEnabledQuery",
    "RatingInit",
    "RatingObtainQueryW",
    "ClickedOnPRF",
    "RatingObtainQuery",
    "RatingCustomRemoveRatingHelper",
    "RatingClickedOnPRFInternal",
    "RatingAddPropertyPages",
    "RatingFreeDetails",
    "RatingAddToApprovedSites",
    "RatingClickedOnRATInternal",
    "RatingCustomDeleteCrackedData",
    "ChangeSupervisorPassword",
    "RatingAccessDeniedDialog2W",
    "RatingSetupUIW",
    "RatingCustomSetUserOptions",
    "RatingCheckUserAccess",
    "RatingCustomSetDefaultBureau",
    "RatingAccessDeniedDialog",
    "RatingAccessDeniedDialog2",
    "RatingCustomCrackData",
    "RatingCustomInit",
    "RatingObtainCancel"
  ],
  "msrd2x40.dll": [
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msrd3x40.dll": [
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msrdc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msrepl40.dll": "No exports",
  "msrle32.dll": [
    "DriverProc"
  ],
  "msscntrs.dll": [
    "Close",
    "Collect",
    "Open",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msscp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mssha.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "MsShaInitialize",
    "MsShaUnInitialize"
  ],
  "msshavmsg.dll": "No exports",
  "msshooks.dll": [
    "LoadMSSearchHooks"
  ],
  "mssign32.dll": [
    "SignerTimeStampEx3",
    "PvkPrivateKeyAcquireContextFromMemory",
    "SignerSign",
    "PvkPrivateKeyLoad",
    "PvkGetCryptProv",
    "GetCryptProvFromCertEx",
    "PvkPrivateKeyLoadFromMemoryA",
    "PvkPrivateKeySaveToMemory",
    "FreeCryptProvFromCertEx",
    "DllRegisterServer",
    "PvkPrivateKeyAcquireContextFromMemoryA",
    "DllUnregisterServer",
    "FreeCryptProvFromCert",
    "PvkPrivateKeyReleaseContext",
    "PvkPrivateKeyLoadA",
    "SignerTimeStampEx",
    "SignerCreateTimeStampRequest",
    "SignerSignEx",
    "SignerAddTimeStampResponseEx",
    "SignerAddTimeStampResponse",
    "PvkPrivateKeyAcquireContext",
    "PvkPrivateKeyReleaseContextA",
    "PvkFreeCryptProv",
    "SignerFreeSignerContext",
    "PvkPrivateKeySaveToMemoryA",
    "PvkPrivateKeyAcquireContextA",
    "GetCryptProvFromCert",
    "PvkPrivateKeyLoadFromMemory",
    "SpcGetCertFromKey",
    "SignerTimeStampEx2",
    "SignError",
    "SignerSignEx2",
    "PvkPrivateKeySave",
    "SignerTimeStamp",
    "PvkPrivateKeySaveA"
  ],
  "mssip32.dll": [
    "CryptSIPCreateIndirectData",
    "CryptSIPVerifyIndirectData",
    "CryptSIPRemoveSignedDataMsg",
    "CryptSIPGetRegWorkingFlags",
    "CryptSIPPutSignedDataMsg",
    "CryptSIPGetInfo",
    "CryptSIPGetSignedDataMsg",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mssitlb.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mssph.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mssphtb.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mssprxy.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "mssrch.dll": [
    "public: virtual long __stdcall CSearchServiceObj::LogonNotification(void)",
    "DllRegisterServer",
    "DllUnregisterServer",
    "public: virtual long __stdcall CSearchServiceObj::Initialize(void)",
    "public: virtual long __stdcall CSearchServiceObj::Start(void)",
    "public: __thiscall CSearchServiceObj::~CSearchServiceObj(void)",
    "DllCanUnloadNow",
    "public: virtual long __stdcall CSearchServiceObj::Shutdown(void)",
    "public: virtual long __stdcall CSearchServiceObj::DeleteFilterPool(unsigned long)",
    "public: static int __stdcall CSearchServiceObj::Cleanup(void)",
    "public: class CSearchServiceObj & __thiscall CSearchServiceObj::operator=(class CSearchServiceObj const &)",
    "public: virtual long __stdcall CSearchServiceObj::SetServiceStatusObj(struct IDCOMServiceStatus *)",
    "MSSrch_SysPrep_Cleanup",
    "public: virtual long __stdcall CSearchServiceObj::Stop(int)",
    "DllGetClassObject",
    "const CSearchServiceObj::`vftable'",
    "public: __thiscall CSearchServiceObj::CSearchServiceObj(void)",
    "GetCatalogManager",
    "public: __thiscall CSearchServiceObj::CSearchServiceObj(class CSearchServiceObj const &)"
  ],
  "mssvp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mstask.dll": [
    "GetNetScheduleAccountInformation",
    "_GetNetScheduleAccountInformation@12",
    "NetrJobEnum",
    "_SAGetNSAccountInformation@12",
    "_NetrJobAdd@12",
    "_NetrJobGetInfo@12",
    "_SetNetScheduleAccountInformation@12",
    "_DllGetClassObject@12",
    "ConvertAtJobsToTasks",
    "NetrJobGetInfo",
    "_DllCanUnloadNow@0",
    "_ConvertAtJobsToTasks@0",
    "SAGetAccountInformation",
    "DllCanUnloadNow",
    "NetrJobAdd",
    "SASetNSAccountInformation",
    "_SAGetAccountInformation@16",
    "SetNetScheduleAccountInformation",
    "SASetAccountInformation",
    "SAGetNSAccountInformation",
    "DllGetClassObject",
    "NetrJobDel",
    "_NetrJobDel@12",
    "_SASetNSAccountInformation@12",
    "_SASetAccountInformation@20",
    "_NetrJobEnum@20"
  ],
  "mstext40.dll": [
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mstscax.dll": [
    "RegisterTransportExtDll",
    "DllGetTscCtlVer",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "msutb.dll": [
    "GetPopupTipbar",
    "ClosePopupTipbar",
    "DllGetClassObject",
    "SetRegisterLangBand",
    "DllCanUnloadNow",
    "GetChildTipbar",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msv1_0.dll": [
    "SpLsaModeInitialize",
    "MsvGetLogonAttemptCount",
    "LsaApInitializePackage",
    "MsvIsLocalhostAliases",
    "LsaApCallPackageUntrusted",
    "LsaApCallPackage",
    "LsaApLogonUserEx2",
    "MsvValidateTarget",
    "DllMain",
    "LsaApLogonTerminated",
    "Msv1_0ExportSubAuthenticationRoutine",
    "MsvSamValidate",
    "SpInitialize",
    "LsaApCallPackagePassthrough",
    "SpInstanceInit",
    "MsvSamLogoff",
    "Msv1_0SubAuthenticationPresent",
    "SpUserModeInitialize"
  ],
  "msvbvm60.dll": [
    "rtcSwitch",
    "__vbaI2ErrVar",
    "__vbaVarTextTstGe",
    "__vbaR8FixI2",
    "_adj_fprem1",
    "__vbaVarIndexStore",
    "__vbaEraseKeepData",
    "__vbaI2Abs",
    "rtcFormatPercent",
    "rtcSgnVar",
    "rtcGetErl",
    "__vbaVarPow",
    "rtcMidCharVar",
    "rtcVarBstrFromAnsi",
    "__vbaLateIdNamedStAd",
    "__vbaLateMemCallSt",
    "__vbaRedimPreserveVar2",
    "__vbaAryConstruct2",
    "rtcJoin",
    "__vbaForEachVar",
    "_adj_fptan",
    "__vbaVarEqv",
    "__vbaStrR8",
    "rtcMidBstr",
    "__vbaLateMemStAd",
    "__vbaBoolVar",
    "rtcGetMonthOfYear",
    "GetMemVar",
    "EbLibraryUnload",
    "__vbaVarForNext",
    "rtcIntVar",
    "__vbaGetOwner3",
    "__vbaUI1Cy",
    "__vbaForEachCollVar",
    "__vbaVarTextCmpEq",
    "__vbaStrMove",
    "rtcCos",
    "__vbaRedim",
    "_CIatan",
    "rtcFreeFile",
    "rtcIPMT",
    "rtcLowerCaseVar",
    "__vbaAryConstruct",
    "rtcFileLength",
    "TipGetAddressOfPredeclaredInstance",
    "__vbaChkstk",
    "__vbaR8Var",
    "rtcLog",
    "__vbaObjAddref",
    "MethCallEngine",
    "__vbaNew",
    "rtcLeftCharVar",
    "EbIsProjectOnStack",
    "EVENT_SINK_AddRef",
    "rtcTrimBstr",
    "rtcGetDayOfMonth",
    "__vbaR4Var",
    "ProcCallEngine",
    "rtcMacId",
    "EbResetProject",
    "__vbaR4Str",
    "__vbaFileClose",
    "rtcIRR",
    "EVENT_SINK2_Release",
    "rtcCallByName",
    "rtcStrFromVar",
    "rtcIMEStatus",
    "rtcLowerCaseBstr",
    "rtcDoEvents",
    "__vbaLbound",
    "__vbaUbound",
    "rtcGetDateBstr",
    "__vbaVarCopy",
    "rtcNPer",
    "__vbaObjIs",
    "__vbaVarLateMemStAd",
    "rtcInputCount",
    "__vbaCVarAryUdt",
    "__vbaDateR4",
    "__vbaVarCmpEq",
    "rtcQBColor",
    "__vbaVarVargNofree",
    "rtcMsgBox",
    "__vbaDateStr",
    "rtcDeleteSetting",
    "rtcCommandVar",
    "__vbaVarIndexStoreObj",
    "rtcMidCharBstr",
    "__vbaCyFix",
    "EbGetErrorInfo",
    "__vbaPutOwner3",
    "__vbaNextEachCollAd",
    "__vbaGetOwner4",
    "rtcGetDayOfWeek",
    "rtI4FromErrVar",
    "__vbaFreeObjList",
    "rtcLeftVar",
    "__vbaVarTextTstEq",
    "__vbaVarLikeVar",
    "__vbaLineInputVar",
    "EbDestroyContext",
    "__vbaVarTstLe",
    "__vbaI4Var",
    "rtcCharValueBstr",
    "__vbaFpCSngR4",
    "__vbaI4Cy",
    "__vbaRedimPreserveVar",
    "__vbaVarSetVar",
    "__vbaUdtVar",
    "__vbaVargUnk",
    "__vbaDateR8",
    "__vbaVarCmpNe",
    "__vbaLenVarB",
    "__vbaVarMod",
    "__vbaVarSetVarAddref",
    "rtcFileAttributes",
    "_adj_fdivr_m32i",
    "rtcFileSeek",
    "rtcIsError",
    "__vbaVarSetObj",
    "rtcAtn",
    "__vbaCyMulI2",
    "__vbaStrVarMove",
    "__vbaFileLock",
    "__vbaVarLike",
    "__vbaAryVar",
    "__vbaPutFxStr3",
    "__vbaHresultCheckNonvirt",
    "__vbaMidStmtVarB",
    "rtcShell",
    "__vbaVarTstNe",
    "__vbaVarZero",
    "rtcFileReset",
    "EbGetHandleOfExecutingProject",
    "DllRegisterServer",
    "__vbaFreeObj",
    "__vbaLateMemCall",
    "rtcIsEmpty",
    "rtcRandomNext",
    "__vbaVargParmRef",
    "rtcMidVar",
    "__vbaSetSystemError",
    "rtcGetDateValue",
    "SetMemEvent",
    "rtcGetTimeValue",
    "__vbaVarTstGe",
    "__vbaExitProc",
    "__vbaVarMul",
    "rtcCreateObject2",
    "__vbaResume",
    "__vbaWriteFile",
    "DLLGetDocumentation",
    "__vbaVarNot",
    "rtcSetFileAttr",
    "__vbaCyForNext",
    "__vbaLateIdCall",
    "__vbaVarImp",
    "rtcFormatDateTime",
    "rtcUpperCaseBstr",
    "rtcIsMissing",
    "__vbaVarTextLikeVar",
    "rtcAnsiValueBstr",
    "__vbaGosubFree",
    "SetMemVar",
    "VBDllGetClassObject",
    "SetMemNewObj",
    "__vbaBoolStr",
    "__vbaStrI2",
    "rtcFileLocation",
    "__vbaLdZeroAry",
    "_CIlog",
    "__vbaExitEachAry",
    "BASIC_CLASS_QueryInterface",
    "rtcLeftTrimBstr",
    "__vbaVarLateMemCallLd",
    "_adj_fdiv_m64",
    "__vbaStrUI1",
    "rtcInStrRev",
    "__vbaI2Sgn",
    "__vbaAryRecCopy",
    "__vbaRedimPreserve",
    "__vbaR8FixI4",
    "__vbaForEachCollObj",
    "__vbaOnError",
    "__vbaVarCmpGe",
    "__vbaVarIdiv",
    "__vbaMidStmtVar",
    "__vbaVarMove",
    "rtcUpperCaseVar",
    "rtDecFromVar",
    "PutMemStr",
    "__vbaVerifyVarObj",
    "rtcGetFileAttr",
    "rtcStrReverse",
    "__vbaVarLateMemSt",
    "__vbaHresultCheckObj",
    "__vbaFpCy",
    "__vbaStrVarCopy",
    "rtCyFromErrVar",
    "rtcChoose",
    "rtcFileLen",
    "rtcRgb",
    "__vbaR8Str",
    "__vbaLateIdNamedCall",
    "__vbaExceptHandler",
    "__vbaVarErrI4",
    "__vbaLateMemCallLd",
    "__vbaVarAnd",
    "rtcAbsVar",
    "__vbaVargVarCopy",
    "__vbaVarForInit",
    "__vbaDateVar",
    "rtcInputBox",
    "__vbaGenerateBoundsError",
    "__vbaUI1Str",
    "__vbaR4ForNextCheck",
    "__vbaI4ForNextCheck",
    "__vbaFpCDblR4",
    "__vbaUI1I2",
    "rtcSpaceBstr",
    "__vbaPutFxStr4",
    "rtcTypeName",
    "BASIC_CLASS_Release",
    "__vbaForEachCollAd",
    "CreateIExprSrvObj",
    "__vbaExitEachColl",
    "__vbaMidStmtBstrB",
    "__vbaVarAbs",
    "rtcInputCountVar",
    "__vbaCySub",
    "__vbaVarDiv",
    "__vbaCopyBytes",
    "rtcRate",
    "rtcVarFromVar",
    "rtcGetHourOfDay",
    "__vbaAryDestruct",
    "rtcRandomize",
    "__vbaEnd",
    "rtcExp",
    "__vbaStrToUnicode",
    "__vbaObjSet",
    "rtcInStrChar",
    "__vbaVarAdd",
    "rtcFileCopy",
    "TipInvokeMethod2",
    "__vbaFPFix",
    "rtcOctVarFromVar",
    "_adj_fdivr_m32",
    "rtcInputCharCount",
    "EbSetContextWorkerThread",
    "TipCreateInstanceProject2",
    "rtcAppActivate",
    "__vbaRecAssign",
    "rtcCompareBstr",
    "PutMem4",
    "__vbaFpCSngR8",
    "_CIsin",
    "rtR8FromErrVar",
    "__vbaI2Var",
    "__vbaVarTstLt",
    "__vbaPowerR8",
    "__vbaPutOwner4",
    "rtcMakeDir",
    "__vbaLateIdCallSt",
    "rtcKillFiles",
    "__vbaUI1I4",
    "GetMem2",
    "_CItan",
    "rtcLenCharVar",
    "rtcEnvironBstr",
    "__vbaStrCy",
    "__vbaVarXor",
    "__vbaVarSub",
    "EbLibraryLoad",
    "__vbaPut4",
    "rtcFileWidth",
    "__vbaCheckTypeVar",
    "rtcEnvironVar",
    "rtcRightTrimVar",
    "__vbaAryLock",
    "EVENT_SINK2_AddRef",
    "PutMem2",
    "rtcSetDateVar",
    "VarPtr",
    "__vbaVarSetObjAddref",
    "__vbaVargObjAddref",
    "__vbaLateIdStAd",
    "VBDllUnRegisterServer",
    "__vbaFreeVarList",
    "__vbaLateIdNamedCallLd",
    "BASIC_CLASS_Invoke",
    "_adj_fdiv_m16i",
    "_adj_fdivr_m64",
    "rtcRightTrimBstr",
    "GetMemNewObj",
    "rtcChangeDrive",
    "EbGetVBAObject",
    "Zombie_AddRef",
    "__vbaNameFile",
    "__vbaVarCmpLe",
    "__vbaFailedFriend",
    "rtcGetSecondOfMinute",
    "__vbaFileOpen",
    "__vbaVarTextTstGt",
    "__vbaStrCmp",
    "rtcSendKeys",
    "__vbaUnkVar",
    "rtcRightCharBstr",
    "rtcPPMT",
    "_adj_fdivr_m16i",
    "__vbaFreeVarg",
    "rtcLeftCharBstr",
    "rtcVarBstrFromByte",
    "DllCanUnloadNow",
    "__vbaCopyBytesZero",
    "__vbaI4Sgn",
    "__vbaVargVarRef",
    "rtUI1FromErrVar",
    "IID_IVbaHost",
    "__vbaAryRecMove",
    "rtcIsNumeric",
    "rtcMonthName",
    "__vbaLateMemNamedCallLd",
    "rtcIsObject",
    "GetMemEvent",
    "__vbaVarIndexLoad",
    "BASIC_CLASS_GetIDsOfNames",
    "rtcVarBstrFromChar",
    "__vbaFpCmpCy",
    "__vbaFreeStrList",
    "rtcR8ValFromBstr",
    "__vbaObjSetAddref",
    "__vbaAryUnlock",
    "__vbaLenBstrB",
    "__vbaVarCmpLt",
    "__vbaI4Abs",
    "__vbaAryCopy",
    "__vbaVarTextCmpGe",
    "__vbaRaiseEvent",
    "__vbaFileSeek",
    "rtcReplace",
    "__vbaOnGoCheck",
    "rtcPV",
    "rtcSpaceVar",
    "__vbaInStrB",
    "rtBstrFromErrVar",
    "rtcHexBstrFromVar",
    "rtcErrObj",
    "_CIsqrt",
    "rtcHexVarFromVar",
    "rtcBstrFromError",
    "PutMemObj",
    "__vbaR8IntI4",
    "__vbaLateIdSt",
    "__vbaStrCompVar",
    "__vbaGetFxStr4",
    "rtcGetSetting",
    "rtcLeftBstr",
    "__vbaVargVarMove",
    "__vbaStrFixstr",
    "rtcTrimVar",
    "rtcSetDateBstr",
    "rtcSqr",
    "GetMem1",
    "rtcGetTimer",
    "__vbaR4Cy",
    "ThunRTMain",
    "rtcIsNull",
    "rtcEndOfFile",
    "__vbaPut3",
    "__vbaR8Cy",
    "rtcStrConvVar2",
    "GetMemObj",
    "rtcCreateObject",
    "__vbaStrR4",
    "rtcBeep",
    "rtcSetTimeVar",
    "Zombie_GetIDsOfNames",
    "__vbaUI1ErrVar",
    "EbLoadRunTime",
    "_adj_fdiv_r",
    "__vbaStrDate",
    "__vbaRedimVar",
    "__vbaGosub",
    "rtcVarDateFromVar",
    "__vbaForEachAry",
    "_CIcos",
    "rtcGetMinuteOfHour",
    "__vbaVarTextCmpLt",
    "__vbaLenVar",
    "__vbaVarCmpGt",
    "rtcWeekdayName",
    "__vbaStrI4",
    "__vbaEraseNoPop",
    "rtcLeftTrimVar",
    "rtcGetTimeBstr",
    "PutMemVar",
    "__vbaCyStr",
    "__vbaVarTextCmpLe",
    "TipSetOption",
    "VBDllRegisterServer",
    "rtcGetTimeVar",
    "__vbaVarSetUnk",
    "__vbaI2Str",
    "__vbaFpR8",
    "__vbaFpI4",
    "__vbaCheckType",
    "__vbaVargUnkAddref",
    "__vbaNextEachVar",
    "__vbaVargVar",
    "__vbaLateMemNamedStAd",
    "rtcDateDiff",
    "__vbaR8Sgn",
    "__vbaNextEachCollVar",
    "rtcBstrFromAnsi",
    "__vbaAryMove",
    "__vbaStrTextLike",
    "rtcPartition",
    "__vbaMidStmtBstr",
    "__vbaCastObj",
    "__vbaDerefAry1",
    "rtcInStr",
    "__vbaAryRebase1Var",
    "__vbaPrintFile",
    "__vbaR4ErrVar",
    "__vbaVarTextTstLe",
    "__vbaVarTextTstLt",
    "__vbaVarNeg",
    "_adj_fpatan",
    "PutMem8",
    "rtcVarFromError",
    "__vbaCySgn",
    "__vbaHresultCheck",
    "__vbaBoolVarNull",
    "__vbaFpUI1",
    "rtcRightVar",
    "__vbaCyUI1",
    "__vbaCastObjVar",
    "rtcRemoveDir",
    "__vbaI2Cy",
    "rtcStringVar",
    "__vbaAryVarVarg",
    "rtcDatePart",
    "__vbaLateMemNamedCall",
    "__vbaR8ErrVar",
    "rtcOctBstrFromVar",
    "rtcNPV",
    "__vbaVarTstEq",
    "EbResetProjectNormal",
    "rtcFormatNumber",
    "rtcSLN",
    "UserDllMain",
    "__vbaI2I4",
    "__vbaExitEachVar",
    "VBDllCanUnloadNow",
    "__vbaGetFxStr3",
    "rtcBstrFromFormatVar",
    "PutMem1",
    "__vbaI4ErrVar",
    "__vbaDerefAry",
    "__vbaRedimVar2",
    "rtcCVErrFromVar",
    "rtcRightBstr",
    "rtcGetCurrentCalendar",
    "Zombie_QueryInterface",
    "rtcLenVar",
    "__vbaVarDateVar",
    "_adj_fprem",
    "rtcFV",
    "__vbaLineInputStr",
    "__vbaNextEachCollObj",
    "__vbaGosubReturn",
    "rtcRound",
    "rtcTan",
    "_adj_fdiv_m32",
    "__vbaVarIndexLoadRef",
    "BASIC_CLASS_AddRef",
    "__vbaRefVarAry",
    "DllFunctionCall",
    "__vbaInStrVarB",
    "__vbaStrAryToAnsi",
    "__vbaFpI2",
    "EVENT_SINK_Invoke",
    "rtR4FromErrVar",
    "rtcByteValueBstr",
    "SetMemObj",
    "__vbaPrintObj",
    "__vbaInStr",
    "rtcBstrFromChar",
    "Zombie_Release",
    "__vbaStrTextCmp",
    "Zombie_Invoke",
    "DllGetClassObject",
    "__vbaFPInt",
    "__vbaCyI4",
    "__vbaNextEachAry",
    "_adj_fdiv_m32i",
    "rtcChangeDir",
    "__vbaStopExe",
    "__vbaVarDup",
    "__vbaUI1Sgn",
    "Zombie_GetTypeInfoCount",
    "rtcGetHostLCID",
    "__vbaStrComp",
    "__vbaFpR4",
    "__vbaRecUniToAnsi",
    "__vbaStrVarVal",
    "__vbaVarTextTstNe",
    "rtcPackDate",
    "__vbaGet3",
    "rtcFilter",
    "rtcBstrFromByte",
    "GetMem8",
    "rtBoolFromErrVar",
    "__vbaCyVar",
    "DllUnregisterServer",
    "__vbaVargObj",
    "rtcCurrentDirBstr",
    "TipUnloadProject",
    "__vbaCyI2",
    "rtcSetCurrentCalendar",
    "rtcGetDateVar",
    "Zombie_GetTypeInfo",
    "__vbaLateIdNamedCallSt",
    "_allmul",
    "TipUnloadInstance",
    "__vbaVarFix",
    "__vbaVarLateMemCallLdRf",
    "rtcPMT",
    "rtcGetPresentDate",
    "__vbaVarCat",
    "__vbaLateIdCallLd",
    "rtcInputCharCountVar",
    "__vbaObjVar",
    "__vbaStrCopy",
    "__vbaInStrVar",
    "rtcVarFromFormatVar",
    "rtcCommandBstr",
    "__vbaCyAdd",
    "rtcArray",
    "__vbaFreeVar",
    "__vbaVarTextCmpGt",
    "__vbaFpCDblR8",
    "__vbaAptOffset",
    "__vbaErrorOverflow",
    "rtcDir",
    "rtcSaveSetting",
    "__vbaLateMemSt",
    "__vbaFreeStr",
    "__vbaRsetFixstr",
    "rtcDateFromVar",
    "__vbaLenBstr",
    "__vbaUI1Var",
    "rtcIsDate",
    "__vbaRsetFixstrFree",
    "rtcDateAdd",
    "rtcCurrentDir",
    "CopyRecord",
    "__vbaNew2",
    "PutMemEvent",
    "rtcGetAllSettings",
    "rtcPackTime",
    "__vbaLsetFixstr",
    "PutMemNewObj",
    "GetMem4",
    "__vbaRecAnsiToUni",
    "__vbaStrCat",
    "__vbaFixstrConstruct",
    "__vbaBoolErrVar",
    "__vbaI2ForNextCheck",
    "rtcSin",
    "__vbaInputFile",
    "rtcDDB",
    "__vbaCyForInit",
    "__vbaVarTextCmpNe",
    "EVENT_SINK_QueryInterface",
    "__vbaVarOr",
    "__vbaErase",
    "rtcImmediateIf",
    "EbCreateContext",
    "rtcVarStrFromVar",
    "__vbaLateMemNamedCallSt",
    "__vbaRecDestructAnsi",
    "BASIC_DISPINTERFACE_GetTICount",
    "__vbaStrLike",
    "rtcFormatCurrency",
    "EbGetObjConnectionCounts",
    "__vbaR8IntI2",
    "rtcFileDateTime",
    "EVENT_SINK_GetIDsOfNames",
    "__vbaVarInt",
    "rtcRightCharVar",
    "rtcStrConvVar",
    "__vbaVar2Vec",
    "__vbaVarSetUnkAddref",
    "BASIC_DISPINTERFACE_GetTypeInfo",
    "__vbaStrBool",
    "__vbaRecDestruct",
    "__vbaGet4",
    "__vbaStrToAnsi",
    "__vbaCyMul",
    "TipCreateInstanceEx",
    "_CIexp",
    "__vbaVarTextLike",
    "__vbaStrErrVarCopy",
    "rtcSYD",
    "rtcFixVar",
    "__vbaStr2Vec",
    "rtcAppleScript",
    "EVENT_SINK_Release",
    "__vbaVarIndexLoadRefLock",
    "__vbaStrAryToUnicode",
    "__vbaCyErrVar",
    "__vbaFileCloseAll",
    "rtcSetTimeBstr",
    "rtcStringBstr",
    "__vbaLsetFixstrFree",
    "rtcIsArray",
    "__vbaVarTstGt",
    "__vbaError",
    "__vbaCyInt",
    "TipInvokeMethod",
    "rtcGetObject",
    "__vbaFPException",
    "rtcSplit",
    "rtcVarType",
    "__vbaCyAbs",
    "rtI2FromErrVar",
    "__vbaI4Str",
    "GetMemStr",
    "rtcMIRR",
    "__vbaVarLateMemCallSt",
    "__vbaR4Sgn",
    "__vbaR8ForNextCheck",
    "rtcGetYear"
  ],
  "msvcirt.dll": [
    "public: __thiscall exception::exception(class exception const &)",
    "public: virtual void * __thiscall strstream::`scalar deleting destructor'(unsigned int)",
    "public: __thiscall ostrstream::ostrstream(void)",
    "public: int __thiscall ios::fail(void)const",
    "protected: struct _CRT_CRITICAL_SECTION * __thiscall streambuf::lockptr(void)",
    "protected: __thiscall ostream::ostream(void)",
    "public: static long const ios::adjustfield",
    "public: int __thiscall istream::peek(void)",
    "public: virtual int __thiscall strstreambuf::overflow(int)",
    "protected: static void __cdecl ios::lockc(void)",
    "public: __thiscall ostream::ostream(class streambuf *)",
    "protected: __thiscall ios::ios(class ios const &)",
    "public: class filebuf * __thiscall filebuf::close(void)",
    "public: class istream & __thiscall istream::putback(char)",
    "public: class ostream & __thiscall ostream::write(unsigned char const *,int)",
    "class ios & __cdecl hex(class ios &)",
    "protected: int __thiscall streambuf::unbuffered(void)const",
    "public: void * & __thiscall ios::pword(int)const",
    "const ofstream::`vftable'",
    "public: class ostream & __thiscall ostream::write(char const *,int)",
    "public: virtual int __thiscall stdiobuf::underflow(void)",
    "public: __thiscall strstreambuf::strstreambuf(void)",
    "public: class istream & __thiscall istream::operator>>(class ios & (__cdecl*)(class ios &))",
    "class ostream_withassign cout",
    "public: virtual __thiscall stdiostream::~stdiostream(void)",
    "public: __thiscall ofstream::ofstream(class ofstream const &)",
    "public: int __thiscall streambuf::sgetc(void)",
    "public: class istream & __thiscall istream::read(char *,int)",
    "public: char __thiscall ios::fill(void)const",
    "const fstream::`vbtable'{for `ostream'}",
    "public: class istream & __thiscall istream::operator>>(unsigned char &)",
    "const ofstream::`vbtable'",
    "public: virtual void * __thiscall ofstream::`vector deleting destructor'(unsigned int)",
    "public: struct _iobuf * __thiscall stdiobuf::stdiofile(void)",
    "public: class istream & __thiscall istream::get(unsigned char &)",
    "const ios::`vftable'",
    "private: static long ios::x_maxbit",
    "public: class istream & __thiscall istream::getline(signed char *,int,char)",
    "public: virtual void * __thiscall ios::`scalar deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall filebuf::`vector deleting destructor'(unsigned int)",
    "public: int __thiscall ostream::opfx(void)",
    "public: class istream & __thiscall istream::operator>>(unsigned char *)",
    "public: virtual void * __thiscall ostrstream::`vector deleting destructor'(unsigned int)",
    "public: __thiscall strstreambuf::strstreambuf(unsigned char *,int,unsigned char *)",
    "public: __thiscall ifstream::ifstream(class ifstream const &)",
    "public: __thiscall ofstream::ofstream(void)",
    "public: static int const filebuf::text",
    "public: virtual int __thiscall strstreambuf::sync(void)",
    "public: class istream & __thiscall istream::operator>>(char &)",
    "public: int __thiscall streambuf::out_waiting(void)const",
    "public: __thiscall ostrstream::ostrstream(class ostrstream const &)",
    "public: int __thiscall filebuf::is_open(void)const",
    "public: void __thiscall streambuf::stossc(void)",
    "public: __thiscall ofstream::ofstream(int)",
    "public: static int const filebuf::sh_write",
    "public: int __thiscall strstream::pcount(void)const",
    "public: int __thiscall ios::precision(void)const",
    "protected: char * __thiscall streambuf::gptr(void)const",
    "public: void __thiscall ostrstream::`vbase destructor'(void)",
    "public: __thiscall stdiobuf::stdiobuf(class stdiobuf const &)",
    "public: __thiscall istream_withassign::istream_withassign(class streambuf *)",
    "public: class istream & __thiscall istream::get(char *,int,char)",
    "public: class Iostream_init & __thiscall Iostream_init::operator=(class Iostream_init const &)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned long)",
    "public: class ostream & __thiscall ostream::put(unsigned char)",
    "public: __thiscall filebuf::filebuf(class filebuf const &)",
    "public: __thiscall ifstream::ifstream(void)",
    "public: class istrstream & __thiscall istrstream::operator=(class istrstream const &)",
    "public: __thiscall Iostream_init::~Iostream_init(void)",
    "public: virtual int __thiscall streambuf::xsputn(char const *,int)",
    "public: virtual __thiscall stdiobuf::~stdiobuf(void)",
    "public: class ostream & __thiscall ostream_withassign::operator=(class streambuf *)",
    "public: static int const filebuf::binary",
    "const ifstream::`vbtable'",
    "protected: __thiscall iostream::iostream(void)",
    "private: static struct _CRT_CRITICAL_SECTION ios::x_lockc",
    "protected: __thiscall ios::ios(void)",
    "public: __thiscall Iostream_init::Iostream_init(class ios &,int)",
    "public: __thiscall istrstream::istrstream(char *)",
    "protected: void __thiscall streambuf::setp(char *,char *)",
    "public: char * __thiscall ostrstream::str(void)",
    "public: virtual void * __thiscall ifstream::`vector deleting destructor'(unsigned int)",
    "const filebuf::`vftable'",
    "public: void __thiscall ostream::`vbase destructor'(void)",
    "public: static void __cdecl ios::sync_with_stdio(void)",
    "public: void __cdecl ios::unlock(void)",
    "public: __thiscall exception::exception(void)",
    "protected: char * __thiscall streambuf::base(void)const",
    "public: virtual void * __thiscall istream::`scalar deleting destructor'(unsigned int)",
    "public: __thiscall istream::istream(class streambuf *)",
    "public: virtual void * __thiscall streambuf::`scalar deleting destructor'(unsigned int)",
    "public: char __thiscall ios::fill(char)",
    "public: int __thiscall fstream::is_open(void)const",
    "public: __thiscall fstream::fstream(int,char *,int)",
    "public: void __thiscall istream::eatwhite(void)",
    "public: class istream & __thiscall istream::getline(unsigned char *,int,char)",
    "public: long __thiscall ostream::tellp(void)",
    "public: virtual int __thiscall filebuf::overflow(int)",
    "public: class istream & __thiscall istream::get(unsigned char *,int,char)",
    "public: virtual __thiscall ofstream::~ofstream(void)",
    "public: __thiscall stdiostream::stdiostream(class stdiostream const &)",
    "private: static long * ios::x_statebuf",
    "protected: class iostream & __thiscall iostream::operator=(class streambuf *)",
    "public: void __thiscall istream::`vbase destructor'(void)",
    "const strstream::`vftable'",
    "public: class streambuf * __thiscall ios::rdbuf(void)const",
    "protected: char * __thiscall streambuf::epptr(void)const",
    "public: virtual int __thiscall stdiobuf::sync(void)",
    "public: class ostream & __thiscall ostream::seekp(long)",
    "public: virtual void * __thiscall ostream::`scalar deleting destructor'(unsigned int)",
    "public: virtual __thiscall ifstream::~ifstream(void)",
    "public: class ostream & __thiscall ostream::operator<<(char)",
    "public: class istream & __thiscall istream::operator>>(double &)",
    "public: virtual __thiscall fstream::~fstream(void)",
    "const ostream_withassign::`vftable'",
    "public: void __thiscall ifstream::attach(int)",
    "public: __thiscall strstream::strstream(char *,int,int)",
    "public: class istream & __thiscall istream::operator>>(class streambuf *)",
    "public: __thiscall stdiostream::stdiostream(struct _iobuf *)",
    "public: void __thiscall streambuf::setlock(void)",
    "public: class ostream & __thiscall ostream::operator<<(float)",
    "public: class istream & __thiscall istream::operator>>(unsigned short &)",
    "public: __thiscall strstream::strstream(class strstream const &)",
    "public: __thiscall logic_error::logic_error(class logic_error const &)",
    "public: __thiscall istream_withassign::istream_withassign(void)",
    "public: __thiscall ostream_withassign::ostream_withassign(class streambuf *)",
    "public: virtual class streambuf * __thiscall filebuf::setbuf(char *,int)",
    "private: static int ios::fLockcInit",
    "const ifstream::`vftable'",
    "public: virtual void * __thiscall ostream::`vector deleting destructor'(unsigned int)",
    "public: virtual __thiscall istream_withassign::~istream_withassign(void)",
    "public: int __thiscall filebuf::setmode(int)",
    "public: class ifstream & __thiscall ifstream::operator=(class ifstream const &)",
    "public: class stdiostream & __thiscall stdiostream::operator=(class stdiostream &)",
    "public: class istream & __thiscall istream_withassign::operator=(class istream const &)",
    "public: __thiscall strstreambuf::strstreambuf(void * (__cdecl*)(long),void (__cdecl*)(void *))",
    "public: class ostream & __thiscall ostream::operator<<(short)",
    "public: __thiscall streambuf::streambuf(class streambuf const &)",
    "public: void __thiscall fstream::open(char const *,int,int)",
    "public: virtual int __thiscall filebuf::sync(void)",
    "public: void __cdecl ios::lockbuf(void)",
    "public: int __thiscall ifstream::is_open(void)const",
    "public: class exception & __thiscall exception::operator=(class exception const &)",
    "public: virtual __thiscall istrstream::~istrstream(void)",
    "public: virtual void * __thiscall istream_withassign::`vector deleting destructor'(unsigned int)",
    "protected: char * __thiscall streambuf::ebuf(void)const",
    "public: void __thiscall istream::isfx(void)",
    "public: void __thiscall ios::delbuf(int)",
    "public: class istream & __thiscall istream::get(signed char &)",
    "public: int __thiscall ostrstream::pcount(void)const",
    "public: class filebuf * __thiscall fstream::rdbuf(void)const",
    "protected: char * __thiscall streambuf::egptr(void)const",
    "public: __thiscall logic_error::logic_error(char const * const &)",
    "public: virtual void * __thiscall ostream_withassign::`scalar deleting destructor'(unsigned int)",
    "public: void __thiscall istream_withassign::`vbase destructor'(void)",
    "public: __thiscall strstreambuf::strstreambuf(char *,int,char *)",
    "const ostrstream::`vftable'",
    "public: __thiscall fstream::fstream(class fstream const &)",
    "public: class ostream & __thiscall ostream::seekp(long,enum ios::seek_dir)",
    "public: void __cdecl ios::clrlock(void)",
    "public: class ofstream & __thiscall ofstream::operator=(class ofstream const &)",
    "public: char * __thiscall strstream::str(void)",
    "public: void __thiscall iostream::`vbase destructor'(void)",
    "public: void __thiscall ifstream::open(char const *,int,int)",
    "protected: void __thiscall streambuf::setb(char *,char *,int)",
    "public: void __thiscall ofstream::attach(int)",
    "public: virtual __thiscall exception::~exception(void)",
    "public: class istream & __thiscall istream::operator>>(float &)",
    "public: static long __cdecl ios::bitalloc(void)",
    "const strstreambuf::`vftable'",
    "public: class ostream & __thiscall ostream::operator<<(void const *)",
    "protected: __thiscall istream::istream(void)",
    "const stdiostream::`vbtable'{for `ostream'}",
    "public: virtual void * __thiscall iostream::`vector deleting destructor'(unsigned int)",
    "public: void __thiscall ofstream::close(void)",
    "public: class ostream_withassign & __thiscall ostream_withassign::operator=(class ostream_withassign const &)",
    "protected: void __thiscall streambuf::gbump(int)",
    "public: void __cdecl ios::setlock(void)",
    "public: virtual int __thiscall stdiobuf::overflow(int)",
    "public: class ostrstream & __thiscall ostrstream::operator=(class ostrstream const &)",
    "public: void __thiscall ostream::osfx(void)",
    "const istrstream::`vftable'",
    "const fstream::`vftable'",
    "public: int __thiscall ios::eof(void)const",
    "public: class istream & __thiscall istream::read(signed char *,int)",
    "const ostrstream::`vbtable'",
    "public: class strstreambuf & __thiscall strstreambuf::operator=(class strstreambuf const &)",
    "public: void __thiscall fstream::attach(int)",
    "public: class ostream * __thiscall ios::tie(class ostream *)",
    "public: class filebuf * __thiscall ofstream::rdbuf(void)const",
    "protected: __thiscall streambuf::streambuf(void)",
    "public: class filebuf & __thiscall filebuf::operator=(class filebuf const &)",
    "public: virtual long __thiscall filebuf::seekoff(long,enum ios::seek_dir,int)",
    "const iostream::`vftable'",
    "public: virtual void * __thiscall ostrstream::`scalar deleting destructor'(unsigned int)",
    "private: static int ios::sunk_with_stdio",
    "public: void __thiscall istrstream::`vbase destructor'(void)",
    "public: __thiscall ifstream::ifstream(int)",
    "public: int __thiscall ofstream::fd(void)const",
    "public: class ostream & __thiscall ostream::operator<<(unsigned char const *)",
    "public: virtual void * __thiscall fstream::`vector deleting destructor'(unsigned int)",
    "public: class istream & __thiscall istream::operator>>(unsigned long &)",
    "public: class istream & __thiscall istream::operator>>(long double &)",
    "public: void __thiscall ofstream::open(char const *,int,int)",
    "public: virtual void * __thiscall ostream_withassign::`vector deleting destructor'(unsigned int)",
    "protected: __thiscall streambuf::streambuf(char *,int)",
    "public: virtual void * __thiscall istream::`vector deleting destructor'(unsigned int)",
    "public: __thiscall filebuf::filebuf(void)",
    "const streambuf::`vftable'",
    "public: class istream & __thiscall istream::get(class streambuf &,char)",
    "public: class istream & __thiscall istream::read(unsigned char *,int)",
    "const stdiobuf::`vftable'",
    "public: long __thiscall ios::setf(long)",
    "protected: void __thiscall streambuf::setg(char *,char *,char *)",
    "public: virtual void * __thiscall stdiostream::`vector deleting destructor'(unsigned int)",
    "public: virtual long __thiscall streambuf::seekoff(long,enum ios::seek_dir,int)",
    "public: int __thiscall stdiobuf::setrwbuf(int,int)",
    "protected: int __thiscall streambuf::blen(void)const",
    "public: __thiscall ios::ios(class streambuf *)",
    "public: int __thiscall ios::precision(int)",
    "public: void __thiscall ifstream::`vbase destructor'(void)",
    "const exception::`vftable'",
    "public: class stdiobuf * __thiscall stdiostream::rdbuf(void)const",
    "public: virtual char const * __thiscall exception::what(void)const",
    "public: void __thiscall strstream::`vbase destructor'(void)",
    "public: virtual __thiscall ios::~ios(void)",
    "public: int __thiscall ofstream::setmode(int)",
    "public: __thiscall istrstream::istrstream(class istrstream const &)",
    "protected: class istream & __thiscall istream::get(char *,int,int)",
    "public: class ostream & __thiscall ostream::operator<<(long double)",
    "const istream_withassign::`vftable'",
    "public: virtual __thiscall filebuf::~filebuf(void)",
    "public: int __thiscall istream::ipfx(int)",
    "protected: struct _CRT_CRITICAL_SECTION * __thiscall ios::lockptr(void)",
    "public: int __thiscall istream::sync(void)",
    "public: static long const ios::floatfield",
    "protected: class ostream & __thiscall ostream::operator=(class streambuf *)",
    "protected: void __thiscall streambuf::pbump(int)",
    "public: virtual __thiscall istream::~istream(void)",
    "public: int __thiscall ofstream::is_open(void)const",
    "public: virtual int __thiscall strstreambuf::underflow(void)",
    "private: int __thiscall istream::getdouble(char *,int)",
    "protected: __thiscall istream::istream(class istream const &)",
    "protected: char * __thiscall streambuf::pptr(void)const",
    "public: int __thiscall ios::width(void)const",
    "public: int __thiscall fstream::fd(void)const",
    "public: int __thiscall istream::gcount(void)const",
    "const iostream::`vbtable'{for `ostream'}",
    "public: class ostream * __thiscall ios::tie(void)const",
    "public: class stdiobuf & __thiscall stdiobuf::operator=(class stdiobuf const &)",
    "public: long __thiscall ios::unsetf(long)",
    "public: virtual void * __thiscall exception::`vector deleting destructor'(unsigned int)",
    "class ostream & __cdecl flush(class ostream &)",
    "public: void __thiscall ios::clear(int)",
    "public: void __thiscall streambuf::unlock(void)",
    "protected: class istream & __thiscall istream::operator=(class istream const &)",
    "protected: void __thiscall ios::init(class streambuf *)",
    "public: class ostream & __thiscall ostream::operator<<(class ostream & (__cdecl*)(class ostream &))",
    "public: int __thiscall streambuf::sputbackc(char)",
    "public: virtual void * __thiscall stdiostream::`scalar deleting destructor'(unsigned int)",
    "public: class istream & __thiscall istream::getline(char *,int,char)",
    "public: long __thiscall ios::setf(long,long)",
    "public: virtual void * __thiscall strstream::`vector deleting destructor'(unsigned int)",
    "public: class istream & __thiscall istream::seekg(long,enum ios::seek_dir)",
    "public: class ostream & __thiscall ostream::operator<<(char const *)",
    "public: class ostream & __thiscall ostream::operator<<(class streambuf *)",
    "public: __thiscall ofstream::ofstream(int,char *,int)",
    "protected: virtual int __thiscall strstreambuf::doallocate(void)",
    "public: __thiscall fstream::fstream(void)",
    "class ostream_withassign cerr",
    "public: virtual int __thiscall filebuf::underflow(void)",
    "protected: __thiscall ostream::ostream(class ostream const &)",
    "public: __thiscall istrstream::istrstream(char *,int)",
    "public: __thiscall fstream::fstream(char const *,int,int)",
    "const stdiostream::`vftable'",
    "public: virtual class streambuf * __thiscall strstreambuf::setbuf(char *,int)",
    "public: static int __cdecl ios::xalloc(void)",
    "public: virtual __thiscall strstreambuf::~strstreambuf(void)",
    "public: virtual long __thiscall streambuf::seekpos(long,int)",
    "private: void __thiscall strstreambuf::_init(char *,int,char *)",
    "public: void __thiscall streambuf::clrlock(void)",
    "public: class strstreambuf * __thiscall strstream::rdbuf(void)const",
    "const iostream::`vbtable'{for `istream'}",
    "public: virtual long __thiscall strstreambuf::seekoff(long,enum ios::seek_dir,int)",
    "public: void __thiscall ofstream::`vbase destructor'(void)",
    "public: int __thiscall istream::get(void)",
    "public: virtual void * __thiscall ios::`vector deleting destructor'(unsigned int)",
    "public: static int const filebuf::openprot",
    "class ostream & __cdecl ends(class ostream &)",
    "public: class filebuf * __thiscall filebuf::open(char const *,int,int)",
    "public: long __thiscall ios::flags(void)const",
    "public: class ostream & __thiscall ostream::operator<<(unsigned int)",
    "public: int __thiscall fstream::setmode(int)",
    "public: int __thiscall streambuf::sgetn(char *,int)",
    "_mtlock",
    "public: class ostream & __thiscall ostream::put(char)",
    "class ostream_withassign clog",
    "public: virtual void * __thiscall iostream::`scalar deleting destructor'(unsigned int)",
    "public: __thiscall ifstream::ifstream(int,char *,int)",
    "public: class strstreambuf * __thiscall istrstream::rdbuf(void)const",
    "const istream::`vbtable'",
    "public: __thiscall Iostream_init::Iostream_init(void)",
    "public: virtual void * __thiscall logic_error::`vector deleting destructor'(unsigned int)",
    "public: class ostream & __thiscall ostream::flush(void)",
    "public: class strstream & __thiscall strstream::operator=(class strstream &)",
    "public: __thiscall ofstream::ofstream(char const *,int,int)",
    "public: int __thiscall ios::good(void)const",
    "public: virtual __thiscall logic_error::~logic_error(void)",
    "public: void __thiscall fstream::`vbase destructor'(void)",
    "protected: class iostream & __thiscall iostream::operator=(class iostream &)",
    "const ostream::`vftable'",
    "public: class streambuf * __thiscall ifstream::setbuf(char *,int)",
    "public: __thiscall ostrstream::ostrstream(char *,int,int)",
    "const ostream::`vbtable'",
    "public: int __thiscall streambuf::sputc(int)",
    "public: virtual __thiscall iostream::~iostream(void)",
    "public: void __thiscall ostream_withassign::`vbase destructor'(void)",
    "public: int __thiscall ios::width(int)",
    "public: virtual void * __thiscall ifstream::`scalar deleting destructor'(unsigned int)",
    "public: class ostream & __thiscall ostream::operator<<(signed char)",
    "const stdiostream::`vbtable'{for `istream'}",
    "public: __thiscall ostream_withassign::ostream_withassign(class ostream_withassign const &)",
    "public: __thiscall ostream_withassign::ostream_withassign(void)",
    "protected: void __thiscall streambuf::unbuffered(int)",
    "public: class filebuf * __thiscall filebuf::attach(int)",
    "public: static long const ios::basefield",
    "class istream & __cdecl ws(class istream &)",
    "public: virtual void * __thiscall stdiobuf::`scalar deleting destructor'(unsigned int)",
    "public: void __thiscall streambuf::lock(void)",
    "public: class istream & __thiscall istream::seekg(long)",
    "public: class ostream & __thiscall ostream_withassign::operator=(class ostream const &)",
    "public: int __thiscall ifstream::setmode(int)",
    "public: class streambuf & __thiscall streambuf::operator=(class streambuf const &)",
    "public: __thiscall istream_withassign::istream_withassign(class istream_withassign const &)",
    "public: class istream & __thiscall istream::operator>>(signed char &)",
    "public: class istream & __thiscall istream::operator>>(unsigned int &)",
    "public: void __thiscall strstreambuf::freeze(int)",
    "const strstream::`vbtable'{for `istream'}",
    "private: static int ios::x_curindex",
    "public: virtual __thiscall ostream::~ostream(void)",
    "public: void __thiscall ifstream::close(void)",
    "const fstream::`vbtable'{for `istream'}",
    "public: virtual void * __thiscall streambuf::`vector deleting destructor'(unsigned int)",
    "public: virtual int __thiscall streambuf::xsgetn(char *,int)",
    "public: __thiscall strstream::strstream(void)",
    "public: virtual int __thiscall streambuf::sync(void)",
    "public: int __thiscall filebuf::fd(void)const",
    "const istream_withassign::`vbtable'",
    "public: class istream & __thiscall istream_withassign::operator=(class streambuf *)",
    "_mtunlock",
    "public: static int const filebuf::sh_none",
    "public: int __thiscall ios::bad(void)const",
    "public: void __thiscall fstream::close(void)",
    "public: long & __thiscall ios::iword(int)const",
    "public: class istream & __thiscall istream::operator>>(char *)",
    "protected: char * __thiscall streambuf::pbase(void)const",
    "const istrstream::`vbtable'",
    "public: class ostream & __thiscall ostream::write(signed char const *,int)",
    "public: class streambuf * __thiscall fstream::setbuf(char *,int)",
    "public: class istream_withassign & __thiscall istream_withassign::operator=(class istream_withassign const &)",
    "public: virtual void * __thiscall logic_error::`scalar deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall istream_withassign::`scalar deleting destructor'(unsigned int)",
    "public: __thiscall ios::operator void *(void)const",
    "public: int __thiscall streambuf::in_avail(void)const",
    "public: class filebuf * __thiscall ifstream::rdbuf(void)const",
    "public: virtual class streambuf * __thiscall streambuf::setbuf(char *,int)",
    "public: long __thiscall ios::flags(long)",
    "public: static int const filebuf::sh_read",
    "protected: class ostream & __thiscall ostream::operator=(class ostream const &)",
    "protected: char * __thiscall streambuf::eback(void)const",
    "public: class fstream & __thiscall fstream::operator=(class fstream &)",
    "public: __thiscall exception::exception(char const * const &)",
    "protected: class istream & __thiscall istream::operator=(class streambuf *)",
    "protected: static void __cdecl ios::unlockc(void)",
    "public: class strstreambuf * __thiscall ostrstream::rdbuf(void)const",
    "public: class istream & __thiscall istream::operator>>(short &)",
    "public: class ostream & __thiscall ostream::operator<<(class ios & (__cdecl*)(class ios &))",
    "public: char * __thiscall istrstream::str(void)",
    "public: int __thiscall ifstream::fd(void)const",
    "public: class istream & __thiscall istream::get(signed char *,int,char)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned char)",
    "public: virtual void * __thiscall strstreambuf::`vector deleting destructor'(unsigned int)",
    "class ios & __cdecl oct(class ios &)",
    "public: char * __thiscall strstreambuf::str(void)",
    "public: virtual __thiscall strstream::~strstream(void)",
    "public: virtual void * __thiscall fstream::`scalar deleting destructor'(unsigned int)",
    "protected: virtual int __thiscall streambuf::doallocate(void)",
    "public: class ostream & __thiscall ostream::operator<<(int)",
    "public: class istream & __thiscall istream::operator>>(signed char *)",
    "public: int __thiscall streambuf::snextc(void)",
    "public: int __thiscall streambuf::sputn(char const *,int)",
    "public: class streambuf * __thiscall ofstream::setbuf(char *,int)",
    "public: void __cdecl ios::unlockbuf(void)",
    "public: class ostream & __thiscall ostream::operator<<(long)",
    "public: virtual void * __thiscall strstreambuf::`scalar deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall istrstream::`scalar deleting destructor'(unsigned int)",
    "protected: class ios & __thiscall ios::operator=(class ios const &)",
    "class istream_withassign cin",
    "public: void __thiscall stdiostream::`vbase destructor'(void)",
    "public: long __thiscall istream::tellg(void)",
    "const logic_error::`vftable'",
    "public: virtual long __thiscall stdiobuf::seekoff(long,enum ios::seek_dir,int)",
    "public: __thiscall filebuf::filebuf(int)",
    "public: int __thiscall ios::rdstate(void)const",
    "public: virtual void * __thiscall filebuf::`scalar deleting destructor'(unsigned int)",
    "public: class istream & __thiscall istream::get(char &)",
    "public: __thiscall filebuf::filebuf(int,char *,int)",
    "class ios & __cdecl dec(class ios &)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned short)",
    "private: class ostream & __thiscall ostream::writepad(char const *,char const *)",
    "const strstream::`vbtable'{for `ostream'}",
    "public: class ostream & __thiscall ostream::operator<<(signed char const *)",
    "__dummy_export",
    "protected: int __thiscall streambuf::allocate(void)",
    "public: __thiscall iostream::iostream(class streambuf *)",
    "public: class istream & __thiscall istream::operator>>(long &)",
    "public: virtual __thiscall ostream_withassign::~ostream_withassign(void)",
    "public: virtual int __thiscall stdiobuf::pbackfail(int)",
    "public: virtual __thiscall streambuf::~streambuf(void)",
    "public: virtual __thiscall ostrstream::~ostrstream(void)",
    "const ostream_withassign::`vbtable'",
    "private: int __thiscall istream::getint(char *)",
    "public: class ostream & __thiscall ostream::put(signed char)",
    "public: virtual int __thiscall streambuf::pbackfail(int)",
    "public: virtual void * __thiscall stdiobuf::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall ofstream::`scalar deleting destructor'(unsigned int)",
    "public: class ostream & __thiscall ostream::operator<<(double)",
    "public: void __cdecl ios::lock(void)",
    "public: __thiscall stdiobuf::stdiobuf(struct _iobuf *)",
    "public: int __thiscall ios::delbuf(void)const",
    "public: __thiscall ifstream::ifstream(char const *,int,int)",
    "public: __thiscall strstreambuf::strstreambuf(class strstreambuf const &)",
    "protected: __thiscall iostream::iostream(class iostream const &)",
    "public: class istream & __thiscall istream::operator>>(class istream & (__cdecl*)(class istream &))",
    "public: int __thiscall streambuf::sbumpc(void)",
    "public: virtual void * __thiscall istrstream::`vector deleting destructor'(unsigned int)",
    "public: class istream & __thiscall istream::ignore(int,int)",
    "public: void __thiscall streambuf::dbp(void)",
    "class ostream & __cdecl endl(class ostream &)",
    "public: __thiscall strstreambuf::strstreambuf(int)",
    "public: class istream & __thiscall istream::operator>>(int &)",
    "public: virtual void * __thiscall exception::`scalar deleting destructor'(unsigned int)",
    "public: int __thiscall ios::operator!(void)const",
    "public: __thiscall fstream::fstream(int)",
    "public: class logic_error & __thiscall logic_error::operator=(class logic_error const &)",
    "const istream::`vftable'"
  ],
  "msvcp110_clr0400.dll": [
    "protected: virtual wchar_t const * __thiscall std::ctype::do_is(wchar_t const *,wchar_t const *,short *)const",
    "public: struct std::_Iterator_base12 * * __thiscall std::_Container_base12::_Getpfirst(void)const",
    "public: __thiscall std::_Facet_base::_Facet_base(void)",
    "void __cdecl std::tr2::sys::_Last_write_time(wchar_t const *,__int64)",
    "class std::_Ph<15> std::placeholders::_15",
    "void * __cdecl Concurrency::details::NFS_Allocate(unsigned int,unsigned int,void *)",
    "_LXp_setw",
    "_FExp",
    "public: static class std::_Locinfo & __cdecl std::_Locinfo::_Locinfo_Addcats(class std::_Locinfo *,int,char const *)",
    "public: __thiscall std::_Lockit::_Lockit(int)",
    "_Dscale",
    "private: static void __cdecl std::locale::_Locimp::_Locimp_dtor(class std::locale::_Locimp *)",
    "private: static class std::locale::_Locimp * __cdecl std::locale::_Locimp::_New_Locimp(bool)",
    "public: virtual __thiscall std::ctype_base::~ctype_base(void)",
    "public: struct _Collvec __thiscall std::_Locinfo::_Getcoll(void)const",
    "_LDint",
    "protected: virtual int __thiscall std::basic_streambuf >::sync(void)",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_tolower(unsigned short *,unsigned short const *)const",
    "protected: virtual int __thiscall std::codecvt::do_in(int &,char const *,char const *,char const * &,unsigned short *,unsigned short *,unsigned short * &)const",
    "_Atomic_fetch_xor_1",
    "public: int __thiscall std::ios_base::rdstate(void)const",
    "const std::ctype::`vftable'",
    "_Dtest",
    "private: static void __cdecl std::locale::_Locimp::_Makexloc(class std::_Locinfo const &,int,class std::locale::_Locimp *,class std::locale const *)",
    "??4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@IAEAAV01@$$QAV01@@Z",
    "_Mtxunlock",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::put(wchar_t)",
    "wchar_t * __cdecl std::tr2::sys::_Read_dir(wchar_t *,void *,enum std::tr2::sys::file_type &)",
    "private: static void __cdecl std::locale::_Locimp::_Locimp_Addfac(class std::locale::_Locimp *,class std::locale::facet *,unsigned int)",
    "class std::_Ph<1> std::placeholders::_1",
    "protected: wchar_t * __thiscall std::basic_streambuf >::_Pninc(void)",
    "_Snan",
    "public: void __thiscall std::basic_istream >::`vbase destructor'(void)",
    "public: __int64 __thiscall std::basic_istream >::readsome(wchar_t *,__int64)",
    "_FDnorm",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::unget(void)",
    "private: static void __cdecl std::ios_base::_Ios_base_dtor(class std::ios_base *)",
    "public: __thiscall std::ctype::ctype(class std::_Locinfo const &,unsigned int)",
    "public: __thiscall std::ctype_base::ctype_base(unsigned int)",
    "private: static void __cdecl std::locale::_Locimp::_Makewloc(class std::_Locinfo const &,int,class std::locale::_Locimp *,class std::locale const *)",
    "protected: wchar_t * __thiscall std::basic_streambuf >::eback(void)const",
    "_Eps",
    "public: __thiscall std::_Timevec::_Timevec(void *)",
    "public: void __thiscall std::basic_ios >::swap(class std::basic_ios > &)",
    "class std::basic_ostream > & __cdecl std::endl(class std::basic_ostream > &)",
    "public: char const * __thiscall std::ctype::widen(char const *,char const *,unsigned short *)const",
    "_Thrd_create",
    "_Atomic_is_lock_free_8",
    "void __cdecl std::_Xbad_alloc(void)",
    "protected: virtual int __thiscall std::codecvt_base::do_encoding(void)const",
    "_Xbig",
    "public: __int64 __thiscall std::ios_base::width(void)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::ignore(__int64,unsigned short)",
    "??0?$basic_iostream@DU?$char_traits@D@std@@@std@@IAE@$$QAV01@@Z",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_narrow(unsigned short const *,unsigned short const *,char,char *)const",
    "_Atomic_compare_exchange_strong_8",
    "private: static void __cdecl std::_Lockit::_Lockit_ctor(class std::_Lockit *)",
    "public: void __thiscall std::ios_base::setstate(unsigned int)",
    "_FRteps",
    "_Atomic_flag_clear",
    "public: class std::locale __thiscall std::basic_ios >::imbue(class std::locale const &)",
    "public: virtual void __thiscall std::basic_istream >::_Add_vtordisp1(void)",
    "class std::_Ph<2> std::placeholders::_2",
    "_LXp_movx",
    "public: bool __thiscall std::basic_istream >::ipfx(bool)",
    "public: wchar_t const * __thiscall std::ctype::scan_is(short,wchar_t const *,wchar_t const *)const",
    "const std::basic_ostream >::`vbtable'",
    "public: virtual void __thiscall std::basic_ostream >::_Add_vtordisp2(void)",
    "_FEps",
    "public: class std::ios_base & __thiscall std::ios_base::copyfmt(class std::ios_base const &)",
    "public: int __thiscall std::ios_base::flags(int)",
    "public: static class std::locale::id std::codecvt::id",
    "protected: unsigned short * __thiscall std::basic_streambuf >::pptr(void)const",
    "_Stoulx",
    "public: void __thiscall std::basic_ostream >::osfx(void)",
    "public: void __thiscall std::ios_base::clear(int,bool)",
    "public: void * & __thiscall std::ios_base::pword(int)",
    "private: void __thiscall std::ios_base::_Callfns(enum std::ios_base::event)",
    "_Call_onceEx",
    "public: char __thiscall std::ctype::narrow(wchar_t,char)const",
    "protected: void * __thiscall Concurrency::details::_Concurrent_vector_base_v4::_Internal_push_back(unsigned int,unsigned int &)",
    "public: char const * __thiscall std::ctype::is(char const *,char const *,short *)const",
    "_Atomic_is_lock_free_1",
    "private: static bool std::ios_base::_Sync",
    "public: __int64 __thiscall std::ios_base::precision(void)const",
    "_FNan",
    "public: __thiscall std::basic_istream >::basic_istream >(class std::basic_streambuf > *,bool,bool)",
    "public: unsigned short __thiscall std::basic_streambuf >::sungetc(void)",
    "_Atomic_compare_exchange_strong_4",
    "int __cdecl std::tr2::sys::_Make_dir(char const *)",
    "protected: __int64 __thiscall std::basic_streambuf >::_Gnavail(void)const",
    "protected: unsigned short * __thiscall std::basic_streambuf >::_Gnpreinc(void)",
    "_Mtxinit",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::ios_base & (__cdecl*)(class std::ios_base &))",
    "public: void __thiscall std::basic_ios >::setstate(unsigned int)",
    "public: char const * __thiscall std::ctype::toupper(char *,char const *)const",
    "_Atomic_compare_exchange_strong",
    "_Cnd_broadcast",
    "__int64 __cdecl std::tr2::sys::_Last_write_time(wchar_t const *)",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekpos(class std::fpos,unsigned int)",
    "const std::basic_iostream >::`vbtable'{for `std::basic_istream >'}",
    "??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@IAE@$$QAV01@@Z",
    "_Dtento",
    "void __cdecl std::_MP_Rem(unsigned __int64 * const,unsigned __int64)",
    "_LXp_sqrtx",
    "_Tss_set",
    "public: char const * __thiscall std::_Locinfo::_Getmonths(void)const",
    "public: __int64 __thiscall std::basic_streambuf >::sputn(unsigned short const *,__int64)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(long &)",
    "_Atomic_fetch_or_2",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(char *,__int64,char)",
    "public: __thiscall std::_Init_locks::_Init_locks(void)",
    "private: static class std::locale::_Locimp * std::locale::_Locimp::_Clocptr",
    "_Stoull",
    "bool __cdecl std::tr2::sys::_Current_set(char const *)",
    "towctrans",
    "public: unsigned short const * __thiscall std::ctype::scan_not(short,unsigned short const *,unsigned short const *)const",
    "bool __cdecl std::tr2::sys::_Remove_dir(char const *)",
    "_Atomic_fetch_and_8",
    "_Rteps",
    "public: class std::_Facet_base & __thiscall std::_Facet_base::operator=(class std::_Facet_base const &)",
    "public: char const * __thiscall std::_Locinfo::_Getdays(void)const",
    "_Atomic_is_lock_free_2",
    "public: __int64 __thiscall std::basic_istream >::readsome(char *,__int64)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(unsigned short *,__int64)",
    "unsigned int __cdecl std::_Random_device(void)",
    "_Strcoll",
    "public: static class std::locale __cdecl std::locale::empty(void)",
    "_Mtx_clear_owner",
    "private: static class std::locale::_Locimp * __cdecl std::locale::_Getgloballocale(void)",
    "enum std::tr2::sys::file_type __cdecl std::tr2::sys::_Stat(char const *,int &)",
    "public: __thiscall std::_Container_base12::_Container_base12(void)",
    "public: __thiscall std::_Winit::~_Winit(void)",
    "public: __thiscall std::locale::id::operator unsigned int(void)",
    "public: bool __thiscall std::ios_base::eof(void)const",
    "_Cnd_unregister_at_thread_exit",
    "public: void __thiscall std::ctype::`default constructor closure'(void)",
    "protected: virtual char __thiscall std::ctype::do_widen(char)const",
    "class std::basic_ostream > & __cdecl std::ends(class std::basic_ostream > &)",
    "protected: void __thiscall Concurrency::details::_Concurrent_queue_iterator_base_v4::_Advance(void)",
    "public: char __thiscall std::ctype::tolower(char)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(wchar_t &)",
    "protected: virtual unsigned short __thiscall std::ctype::do_toupper(unsigned short)const",
    "public: __thiscall Concurrency::agent::agent(class Concurrency::ScheduleGroup &)",
    "public: class std::_UShinit & __thiscall std::_UShinit::operator=(class std::_UShinit const &)",
    "_LXp_addx",
    "public: long & __thiscall std::ios_base::iword(int)",
    "protected: void __thiscall std::basic_streambuf >::setp(char *,char *)",
    "public: void __thiscall std::basic_ostream >::`vbase destructor'(void)",
    "protected: __thiscall std::basic_streambuf >::basic_streambuf >(enum std::_Uninitialized)",
    "class std::basic_ostream > * std::_Ptr_wcout",
    "public: enum Concurrency::agent_status __thiscall Concurrency::agent::status(void)",
    "struct std::defer_lock_t const std::defer_lock",
    "_Inf",
    "_Mtx_timedlock",
    "protected: virtual wchar_t const * __thiscall std::ctype::do_narrow(wchar_t const *,wchar_t const *,char,char *)const",
    "public: class std::_Init_locks & __thiscall std::_Init_locks::operator=(class std::_Init_locks const &)",
    "public: __thiscall std::ctype::ctype(short const *,bool,unsigned int)",
    "public: static class std::locale const & __cdecl std::locale::classic(void)",
    "public: void __thiscall std::ios_base::setstate(int,bool)",
    "_Tss_create",
    "_Atomic_compare_exchange_weak_1",
    "_Nan",
    "public: bool __thiscall std::ios_base::good(void)const",
    "public: wchar_t __thiscall std::ctype::toupper(wchar_t)const",
    "public: char __thiscall std::ctype::toupper(char)const",
    "_Tss_get",
    "public: void __thiscall std::ios_base::exceptions(int)",
    "protected: virtual char const * __thiscall std::ctype::do_tolower(char *,char const *)const",
    "public: char const * __thiscall std::_Locinfo::_Getfalse(void)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(unsigned __int64)",
    "public: int __thiscall std::codecvt::in(int &,char const *,char const *,char const * &,wchar_t *,wchar_t *,wchar_t * &)const",
    "struct std::_Smanip<__int64> __cdecl std::setw(__int64)",
    "protected: void __thiscall Concurrency::details::_Concurrent_vector_base_v4::_Internal_throw_exception(unsigned int)const",
    "public: unsigned short const * __thiscall std::ctype::toupper(unsigned short *,unsigned short const *)const",
    "_LXp_getw",
    "protected: void __thiscall Concurrency::details::_Concurrent_vector_base_v4::_Internal_swap(class Concurrency::details::_Concurrent_vector_base_v4 &)",
    "public: void __thiscall std::_Container_base12::_Swap_all(struct std::_Container_base12 &)",
    "_Thrd_exit",
    "protected: void __thiscall std::basic_streambuf >::gbump(int)",
    "public: __thiscall std::_Timevec::_Timevec(class std::_Timevec const &)",
    "protected: virtual __int64 __thiscall std::basic_streambuf >::showmanyc(void)",
    "public: char const * __thiscall std::_Locinfo::_Gettrue(void)const",
    "class std::basic_ostream > & __cdecl std::flush(class std::basic_ostream > &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(class std::basic_streambuf > &,unsigned short)",
    "public: class std::locale __thiscall std::basic_streambuf >::getloc(void)const",
    "_Zero",
    "_Atomic_fetch_and_2",
    "public: wchar_t const * __thiscall std::ctype::tolower(wchar_t *,wchar_t const *)const",
    "_Mtx_unlock",
    "protected: virtual wchar_t __thiscall std::ctype::do_toupper(wchar_t)const",
    "const std::_Pad::`vftable'",
    "public: __int64 __thiscall std::basic_streambuf >::sgetn(char *,__int64)",
    "public: int __thiscall std::basic_streambuf >::sbumpc(void)",
    "protected: virtual __int64 __thiscall std::basic_streambuf >::xsputn(wchar_t const *,__int64)",
    "??4?$basic_istream@_WU?$char_traits@_W@std@@@std@@IAEAAV01@$$QAV01@@Z",
    "_Getdateorder",
    "_Stoul",
    "protected: virtual __thiscall std::locale::facet::~facet(void)",
    "protected: virtual wchar_t const * __thiscall std::ctype::do_tolower(wchar_t *,wchar_t const *)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::ios_base & (__cdecl*)(class std::ios_base &))",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(wchar_t *,__int64,wchar_t)",
    "const std::basic_ostream >::`vftable'",
    "public: class std::_Timevec & __thiscall std::_Timevec::operator=(class std::_Timevec const &)",
    "bool __cdecl std::tr2::sys::_Current_set(wchar_t const *)",
    "protected: virtual char const * __thiscall std::ctype::do_toupper(char *,char const *)const",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::overflow(unsigned short)",
    "public: wchar_t const * __thiscall std::ctype::narrow(wchar_t const *,wchar_t const *,char,char *)const",
    "public: void __thiscall std::basic_ios >::clear(unsigned int)",
    "_Xp_mulx",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::flush(void)",
    "public: unsigned short __thiscall std::basic_streambuf >::sputc(wchar_t)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::basic_ostream > & (__cdecl*)(class std::basic_ostream > &))",
    "public: virtual __thiscall std::basic_ostream >::~basic_ostream >(void)",
    "protected: virtual wchar_t __thiscall std::ctype::do_widen(char)const",
    "_Atomic_compare_exchange_weak_4",
    "_FXp_addx",
    "public: __thiscall std::basic_iostream >::basic_iostream >(class std::basic_streambuf > *)",
    "class std::_Ph<12> std::placeholders::_12",
    "_Denorm",
    "_Mtx_destroy",
    "public: int __thiscall std::basic_streambuf >::pubsync(void)",
    "_Hugeval",
    "_Xp_mulh",
    "class std::_Ph<6> std::placeholders::_6",
    "_Dnorm",
    "protected: virtual __int64 __thiscall std::basic_streambuf >::xsgetn(char *,__int64)",
    "int __cdecl std::tr2::sys::_Link(wchar_t const *,wchar_t const *)",
    "_Atomic_store_8",
    "protected: virtual int __thiscall std::basic_streambuf >::underflow(void)",
    "protected: virtual unsigned short __thiscall std::ctype::do_tolower(unsigned short)const",
    "protected: bool __thiscall Concurrency::details::_Concurrent_queue_base_v4::_Internal_empty(void)const",
    "public: __thiscall std::_Locinfo::_Locinfo(char const *)",
    "_Atomic_compare_exchange_weak_8",
    "public: char __thiscall std::ctype::widen(char)const",
    "public: bool __thiscall std::_Yarn::_Empty(void)const",
    "int __cdecl std::tr2::sys::_Copy_file(char const *,char const *,bool)",
    "struct std::tr2::sys::space_info __cdecl std::tr2::sys::_Statvfs(char const *)",
    "private: static int std::_UShinit::_Init_cnt",
    "_Xp_setn",
    "struct _iobuf * __cdecl std::_Fiopen(char const *,int,int)",
    "public: static void __cdecl std::_Locinfo::_Locinfo_ctor(class std::_Locinfo *,char const *)",
    "private: static void __cdecl std::_Init_locks::_Init_locks_dtor(class std::_Init_locks *)",
    "protected: __int64 __thiscall std::basic_streambuf >::_Pnavail(void)const",
    "_Lock_shared_ptr_spin_lock",
    "protected: wchar_t * __thiscall std::basic_streambuf >::_Gndec(void)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(unsigned int)",
    "_Thrd_abort",
    "_Atomic_store_4",
    "public: char __thiscall std::basic_ios >::narrow(wchar_t,char)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::seekg(__int64,int)",
    "_LDscale",
    "_LDtest",
    "protected: virtual wchar_t const * __thiscall std::ctype::do_scan_not(short,wchar_t const *,wchar_t const *)const",
    "class std::basic_ostream > std::clog",
    "_Mtxdst",
    "class std::basic_ostream > std::wclog",
    "public: unsigned short __thiscall std::basic_ios >::fill(void)const",
    "_LDtento",
    "public: char const * __thiscall std::_Yarn::_C_str(void)const",
    "??0?$basic_istream@DU?$char_traits@D@std@@@std@@IAE@$$QAV01@@Z",
    "_FInf",
    "private: static int std::ios_base::Init::_Init_cnt",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(float)",
    "class std::_Ph<10> std::placeholders::_10",
    "_Cosh",
    "private: static int & __cdecl std::ios_base::Init::_Init_cnt_func(void)",
    "public: __int64 __thiscall std::basic_istream >::readsome(unsigned short *,__int64)",
    "private: static int std::ios_base::_Index",
    "bool __cdecl std::uncaught_exception(void)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::put(unsigned short)",
    "protected: virtual int __thiscall std::codecvt_base::do_max_length(void)const",
    "??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@IAE@$$QAV01@@Z",
    "public: __thiscall std::basic_ios >::basic_ios >(class std::basic_streambuf > *)",
    "public: wchar_t __thiscall std::basic_ios >::widen(char)const",
    "protected: void __thiscall std::basic_streambuf >::setp(char *,char *,char *)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::ignore(__int64,int)",
    "public: __thiscall Concurrency::agent::agent(void)",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_streambuf >::setbuf(char *,__int64)",
    "public: __thiscall std::ctype::ctype(unsigned int)",
    "void __cdecl std::_Xlength_error(char const *)",
    "public: bool __thiscall std::ctype::is(short,char)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(short &)",
    "public: virtual void __thiscall std::locale::facet::_Incref(void)",
    "_Lock_spin_lock",
    "public: static void __cdecl std::ios_base::_Addstd(class std::ios_base *)",
    "public: __thiscall std::_Pad::_Pad(class std::_Pad const &)",
    "private: static class std::locale::_Locimp * __cdecl std::locale::_Locimp::_Makeloc(class std::_Locinfo const &,int,class std::locale::_Locimp *,class std::locale const *)",
    "protected: void __thiscall std::ios_base::_Init(void)",
    "protected: char * __thiscall std::basic_streambuf >::eback(void)const",
    "private: static class std::locale::_Locimp * __cdecl std::locale::_Init(void)",
    "public: char __thiscall std::ctype::narrow(unsigned short,char)const",
    "void __cdecl std::_Xregex_error(enum std::regex_constants::error_type)",
    "class std::_Ph<17> std::placeholders::_17",
    "_Tolower",
    "__int64 const std::_BADOFF",
    "public: __thiscall std::_Pad::~_Pad(void)",
    "_Call_once",
    "void * __cdecl std::tr2::sys::_Open_dir(wchar_t *,wchar_t const *,int &,enum std::tr2::sys::file_type &)",
    "class std::basic_istream > std::cin",
    "_FXp_movx",
    "protected: unsigned int __thiscall Concurrency::details::_Concurrent_vector_base_v4::_Internal_grow_to_at_least_with_result(unsigned int,unsigned int,void (__cdecl*)(void *,void const *,unsigned int),void const *)",
    "public: static void __cdecl std::_Lockit::_Lockit_dtor(int)",
    "_Getctype",
    "public: bool __thiscall std::basic_istream >::_Ipfx(bool)",
    "void (__cdecl*__cdecl std::set_new_handler(void (__cdecl*)(void)))(void)",
    "public: virtual void __thiscall std::basic_ios >::_Add_vtordisp2(void)",
    "protected: virtual char __thiscall std::ctype::do_narrow(char,char)const",
    "_Stopfx",
    "protected: void __thiscall Concurrency::details::_Concurrent_queue_base_v4::_Internal_push(void const *)",
    "_FXp_getw",
    "protected: char * __thiscall std::basic_streambuf >::pbase(void)const",
    "_Atomic_flag_test_and_set",
    "public: class std::_Locinfo & __thiscall std::_Locinfo::_Addcats(int,char const *)",
    "public: bool __thiscall std::ios_base::bad(void)const",
    "public: bool __thiscall Concurrency::agent::start(void)",
    "public: static void __cdecl std::_Lockit::_Lockit_ctor(int)",
    "_Wcrtomb",
    "const std::basic_istream >::`vbtable'",
    "public: virtual void __thiscall std::basic_streambuf >::_Lock(void)",
    "void __cdecl _Atexit(void (__cdecl*)(void))",
    "protected: unsigned short * __thiscall std::basic_streambuf >::gptr(void)const",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::pbackfail(unsigned short)",
    "public: struct _Ctypevec __thiscall std::_Locinfo::_Getctype(void)const",
    "_Wcsxfrm",
    "public: void __thiscall std::basic_ostream >::_Osfx(void)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::pbase(void)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(unsigned short &)",
    "protected: bool __thiscall Concurrency::details::_Concurrent_queue_base_v4::_Internal_pop_if_present(void *)",
    "enum std::tr2::sys::file_type __cdecl std::tr2::sys::_Lstat(wchar_t const *,int &)",
    "protected: char * __thiscall std::basic_streambuf >::gptr(void)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(long double &)",
    "_Atomic_compare_exchange_strong_1",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(short)",
    "public: class std::_Yarn & __thiscall std::_Yarn::operator=(wchar_t const *)",
    "__Wcrtomb_lk",
    "void __cdecl std::_Throw_Cpp_error(int)",
    "void __cdecl stdext::threads::_Mtx_lock(void *)",
    "_Thrd_detach",
    "_Exp",
    "_Poly",
    "int __cdecl std::tr2::sys::_Symlink(char const *,char const *)",
    "double __cdecl std::_XLgamma(double)",
    "public: void __thiscall std::codecvt_base::`default constructor closure'(void)",
    "public: __thiscall std::_Yarn::_Yarn(char const *)",
    "protected: wchar_t __thiscall std::ctype::_Dowiden(char)const",
    "void __cdecl stdext::threads::_Throw_lock_error(void)",
    "_Xp_ldexpx",
    "public: virtual __thiscall std::ios_base::~ios_base(void)",
    "_Atomic_fetch_and_1",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekoff(__int64,int,int)",
    "protected: void __thiscall std::basic_ostream >::swap(class std::basic_ostream > &)",
    "public: unsigned short __thiscall std::basic_streambuf >::snextc(void)",
    "_Atomic_load_1",
    "int __cdecl std::tr2::sys::_Unlink(wchar_t const *)",
    "public: __int64 __thiscall std::basic_streambuf >::sgetn(wchar_t *,__int64)",
    "public: bool __thiscall std::ios_base::operator!(void)const",
    "public: class std::locale __thiscall std::ios_base::imbue(class std::locale const &)",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekpos(class std::fpos,int)",
    "protected: wchar_t * __thiscall std::basic_streambuf >::_Gnpreinc(void)",
    "public: unsigned short __thiscall std::basic_streambuf >::sputbackc(unsigned short)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::read(wchar_t *,__int64)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::write(wchar_t const *,__int64)",
    "char const * __cdecl std::_Syserror_map(int)",
    "public: char const * __thiscall std::ctype::scan_not(short,char const *,char const *)const",
    "public: __thiscall Concurrency::agent::agent(class Concurrency::Scheduler &)",
    "_Mtx_reset_owner",
    "public: unsigned short __thiscall std::ctype::tolower(unsigned short)const",
    "int __cdecl std::tr2::sys::_Copy_file(wchar_t const *,wchar_t const *,bool)",
    "protected: virtual int __thiscall std::basic_streambuf >::overflow(int)",
    "_Unlock_shared_ptr_spin_lock",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(unsigned long &)",
    "_Atomic_exchange_1",
    "void __cdecl std::_Xbad_function_call(void)",
    "public: wchar_t __thiscall std::ctype::widen(char)const",
    "protected: void __thiscall Concurrency::details::_Concurrent_queue_base_v4::_Internal_move_push(void *)",
    "_Atomic_compare_exchange_weak",
    "_Atomic_exchange_8",
    "protected: unsigned short __thiscall std::ctype::_Dowiden(char)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(int)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::write(char const *,__int64)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::eback(void)const",
    "public: unsigned short __thiscall std::basic_istream >::get(void)",
    "public: __thiscall Concurrency::details::_Runtime_object::_Runtime_object(int)",
    "public: char __thiscall std::basic_ios >::narrow(unsigned short,char)const",
    "protected: __thiscall Concurrency::details::_Concurrent_queue_iterator_base_v4::~_Concurrent_queue_iterator_base_v4(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::putback(char)",
    "_Towlower",
    "public: void __thiscall std::_Pad::_Release(void)",
    "protected: void __thiscall Concurrency::details::_Concurrent_queue_iterator_base_v4::_Assign(class Concurrency::details::_Concurrent_queue_iterator_base_v4 const &)",
    "class std::_Ph<13> std::placeholders::_13",
    "public: unsigned short __thiscall std::basic_ios >::widen(char)const",
    "public: __int64 __thiscall std::basic_streambuf >::sputn(char const *,__int64)",
    "protected: __thiscall Concurrency::details::_Concurrent_queue_iterator_base_v4::_Concurrent_queue_iterator_base_v4(class Concurrency::details::_Concurrent_queue_base_v4 const &)",
    "public: __thiscall std::ios_base::Init::~Init(void)",
    "void __cdecl stdext::threads::_Mtx_unlock(void *)",
    "_Atomic_copy",
    "public: class std::basic_streambuf > * __thiscall std::basic_streambuf >::pubsetbuf(char *,__int64)",
    "class std::_Ph<16> std::placeholders::_16",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::uflow(void)",
    "public: __thiscall std::_UShinit::~_UShinit(void)",
    "protected: char * __thiscall std::basic_streambuf >::_Gninc(void)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(double)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::seekp(class std::fpos)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(class std::basic_streambuf > &)",
    "_Atomic_fetch_or_4",
    "_LNan",
    "_Stodx",
    "struct std::_Smanip __cdecl std::resetiosflags(int)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(char *,__int64)",
    "void __cdecl std::_Throw_C_error(int)",
    "public: virtual __thiscall std::_Facet_base::~_Facet_base(void)",
    "_LXp_mulh",
    "protected: void __thiscall Concurrency::details::_Concurrent_queue_base_v4::_Internal_throw_exception(void)const",
    "protected: char * __thiscall std::basic_streambuf >::pptr(void)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(unsigned short)",
    "public: static void __cdecl Concurrency::agent::wait_for_all(unsigned int,class Concurrency::agent * *,enum Concurrency::agent_status *,unsigned int)",
    "void __cdecl stdext::threads::_Mtx_delete(void *)",
    "_Sinh",
    "private: static class std::locale::_Locimp * __cdecl std::locale::_Locimp::_New_Locimp(class std::locale::_Locimp const &)",
    "public: __thiscall std::_Facet_base::_Facet_base(class std::_Facet_base const &)",
    "protected: wchar_t * __thiscall std::basic_streambuf >::gptr(void)const",
    "public: __thiscall std::_Yarn::_Yarn(void)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::egptr(void)const",
    "protected: wchar_t * __thiscall std::basic_streambuf >::pbase(void)const",
    "private: __thiscall std::locale::_Locimp::_Locimp(class std::locale::_Locimp const &)",
    "_Mtx_trylock",
    "public: static unsigned int const std::ctype::table_size",
    "protected: char * __thiscall std::basic_streambuf >::epptr(void)const",
    "protected: __thiscall std::locale::facet::facet(unsigned int)",
    "??4?$basic_istream@DU?$char_traits@D@std@@@std@@IAEAAV01@$$QAV01@@Z",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_scan_not(short,unsigned short const *,unsigned short const *)const",
    "public: void __thiscall std::_Timevec::`default constructor closure'(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(unsigned short *,__int64)",
    "public: unsigned short __thiscall std::basic_streambuf >::sbumpc(void)",
    "private: static void __cdecl std::_Lockit::_Lockit_ctor(class std::_Lockit *,int)",
    "public: struct lconv const * __thiscall std::_Locinfo::_Getlconv(void)const",
    "public: virtual __thiscall std::basic_streambuf >::~basic_streambuf >(void)",
    "_LXbig",
    "float __cdecl std::_XLgamma(float)",
    "protected: virtual int __thiscall std::codecvt::do_out(int &,wchar_t const *,wchar_t const *,wchar_t const * &,char *,char *,char * &)const",
    "public: __thiscall std::ios_base::Init::Init(void)",
    "protected: void * __thiscall Concurrency::details::_Concurrent_vector_base_v4::_Internal_compact(unsigned int,void *,void (__cdecl*)(void *,unsigned int),void (__cdecl*)(void *,void const *,unsigned int))",
    "protected: void __thiscall std::basic_streambuf >::setp(wchar_t *,wchar_t *)",
    "struct std::_Smanip __cdecl std::setbase(int)",
    "_FXp_invx",
    "protected: virtual int __thiscall std::codecvt::do_in(int &,char const *,char const *,char const * &,wchar_t *,wchar_t *,wchar_t * &)const",
    "public: char __thiscall std::basic_ios >::narrow(char,char)const",
    "public: struct std::_Container_base0 & __thiscall std::_Container_base0::operator=(struct std::_Container_base0 const &)",
    "_LZero",
    "private: struct std::ios_base::_Iosarray & __thiscall std::ios_base::_Findarr(int)",
    "protected: virtual bool __thiscall std::codecvt_base::do_always_noconv(void)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::read(unsigned short *,__int64)",
    "public: int __thiscall std::codecvt::out(int &,wchar_t const *,wchar_t const *,wchar_t const * &,char *,char *,char * &)const",
    "_Thrd_current",
    "protected: virtual class std::fpos __thiscall std::basic_streambuf >::seekpos(class std::fpos,int)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::basic_streambuf > *)",
    "_Atomic_is_lock_free_4",
    "int __cdecl std::tr2::sys::_Rename(wchar_t const *,wchar_t const *)",
    "public: char __thiscall std::basic_ios >::fill(void)const",
    "_FDint",
    "public: __int64 __thiscall std::basic_streambuf >::sgetn(unsigned short *,__int64)",
    "public: __thiscall std::_Locinfo::_Locinfo(int,char const *)",
    "public: __int64 __thiscall std::ios_base::precision(__int64)",
    "public: void __thiscall std::basic_ios >::clear(int,bool)",
    "protected: void __thiscall std::basic_streambuf >::pbump(int)",
    "public: static short const * __cdecl std::ctype::classic_table(void)",
    "const std::locale::facet::`vftable'",
    "protected: unsigned int __thiscall Concurrency::details::_Concurrent_queue_base_v4::_Internal_size(void)const",
    "public: unsigned short const * __thiscall std::ctype::narrow(unsigned short const *,unsigned short const *,char,char *)const",
    "void __cdecl std::tr2::sys::_Last_write_time(char const *,__int64)",
    "public: void __thiscall std::locale::id::`default constructor closure'(void)",
    "public: class Concurrency::ISource * __thiscall Concurrency::agent::status_port(void)",
    "char const * __cdecl std::_Get_future_error_what(int)",
    "protected: void __thiscall std::codecvt::_Init(class std::_Locinfo const &)",
    "_LXp_setn",
    "class std::basic_istream > * std::_Ptr_cin",
    "protected: static unsigned int __cdecl Concurrency::details::_Concurrent_vector_base_v4::_Segment_index_of(unsigned int)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::put(char)",
    "public: class std::ios_base::Init & __thiscall std::ios_base::Init::operator=(class std::ios_base::Init const &)",
    "class std::basic_ostream > * std::_Ptr_wclog",
    "class std::_Ph<3> std::placeholders::_3",
    "public: wchar_t const * __thiscall std::ctype::toupper(wchar_t *,wchar_t const *)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(unsigned __int64 &)",
    "class std::basic_ostream > std::cerr",
    "int __cdecl std::tr2::sys::_Link(char const *,char const *)",
    "void __cdecl Concurrency::details::NFS_Free(void *)",
    "public: void __thiscall std::basic_iostream >::`vbase destructor'(void)",
    "_Cnd_do_broadcast_at_thread_exit",
    "_Dunscale",
    "_FZero",
    "_Atomic_load_4",
    "protected: __thiscall std::basic_ios >::basic_ios >(void)",
    "protected: char * __thiscall std::basic_streambuf >::_Gnpreinc(void)",
    "protected: char __thiscall std::ctype::_Donarrow(wchar_t,char)const",
    "public: char const * __thiscall std::ctype::widen(char const *,char const *,wchar_t *)const",
    "protected: void __thiscall std::basic_streambuf >::_Init(wchar_t * *,wchar_t * *,int *,wchar_t * *,wchar_t * *,int *)",
    "protected: virtual __int64 __thiscall std::basic_streambuf >::xsgetn(wchar_t *,__int64)",
    "public: __thiscall Concurrency::details::_Runtime_object::_Runtime_object(void)",
    "protected: void __thiscall Concurrency::details::_Concurrent_vector_base_v4::_Internal_resize(unsigned int,unsigned int,unsigned int,void (__cdecl*)(void *,unsigned int),void (__cdecl*)(void *,void const *,unsigned int),void const *)",
    "_FXp_subx",
    "enum std::tr2::sys::file_type __cdecl std::tr2::sys::_Stat(wchar_t const *,int &)",
    "public: __thiscall std::codecvt_base::codecvt_base(unsigned int)",
    "protected: void __thiscall std::basic_streambuf >::setg(wchar_t *,wchar_t *,wchar_t *)",
    "_Atomic_exchange_2",
    "protected: void __thiscall std::basic_streambuf >::swap(class std::basic_streambuf > &)",
    "public: __int64 __thiscall std::basic_streambuf >::in_avail(void)",
    "protected: wchar_t * __thiscall std::basic_streambuf >::pptr(void)const",
    "public: __thiscall std::basic_istream >::basic_istream >(class std::basic_streambuf > *,bool)",
    "_FXp_mulx",
    "private: void __thiscall std::_Yarn::_Tidy(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(__int64 &)",
    "protected: __thiscall Concurrency::details::_Concurrent_queue_base_v4::_Concurrent_queue_base_v4(unsigned int)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(unsigned short *,__int64,unsigned short)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::basic_ios > & (__cdecl*)(class std::basic_ios > &))",
    "public: wchar_t __thiscall std::basic_ios >::fill(wchar_t)",
    "class std::basic_ostream > * std::_Ptr_cout",
    "public: static enum Concurrency::agent_status __cdecl Concurrency::agent::wait(class Concurrency::agent *,unsigned int)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(long)",
    "public: void __thiscall std::basic_streambuf >::stossc(void)",
    "_Atomic_signal_fence",
    "_Strxfrm",
    "_Xp_invx",
    "class std::_Ph<14> std::placeholders::_14",
    "protected: void __thiscall Concurrency::details::_Concurrent_vector_base_v4::_Internal_copy(class Concurrency::details::_Concurrent_vector_base_v4 const &,unsigned int,void (__cdecl*)(void *,void const *,unsigned int))",
    "public: virtual __thiscall Concurrency::agent::~agent(void)",
    "public: unsigned short __thiscall std::basic_streambuf >::sputc(unsigned short)",
    "const std::_Facet_base::`vftable'",
    "class std::_Ph<7> std::placeholders::_7",
    "private: static void __cdecl std::_Init_locks::_Init_locks_ctor(class std::_Init_locks *)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::basic_istream > & (__cdecl*)(class std::basic_istream > &))",
    "public: unsigned short __thiscall std::basic_istream >::peek(void)",
    "public: class std::fpos __thiscall std::basic_istream >::tellg(void)",
    "public: int __thiscall std::codecvt::length(int &,char const *,char const *,unsigned int)const",
    "public: class std::basic_streambuf > * __thiscall std::basic_streambuf >::pubsetbuf(unsigned short *,__int64)",
    "public: class std::basic_ostream > * __thiscall std::basic_ios >::tie(class std::basic_ostream > *)",
    "void __cdecl std::tr2::sys::_Close_dir(void *)",
    "_LExp",
    "_Getcvt",
    "_Xtime_get_ticks",
    "char * __cdecl std::tr2::sys::_Read_dir(char *,void *,enum std::tr2::sys::file_type &)",
    "private: void __thiscall std::ios_base::_Tidy(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::read(char *,__int64)",
    "_Once",
    "protected: virtual char const * __thiscall std::ctype::do_widen(char const *,char const *,wchar_t *)const",
    "protected: virtual __int64 __thiscall std::basic_streambuf >::xsgetn(unsigned short *,__int64)",
    "protected: virtual bool __thiscall std::ctype::do_is(short,wchar_t)const",
    "protected: void __thiscall std::basic_streambuf >::_Init(void)",
    "_Xp_sqrtx",
    "int __cdecl std::tr2::sys::_Rename(char const *,char const *)",
    "private: static void __cdecl std::locale::_Locimp::_Makeushloc(class std::_Locinfo const &,int,class std::locale::_Locimp *,class std::locale const *)",
    "class std::basic_ostream > std::wcout",
    "public: unsigned short __thiscall std::basic_streambuf >::sgetc(void)",
    "unsigned long __cdecl Concurrency::details::_GetCurrentThreadId(void)",
    "int __cdecl std::tr2::sys::_Equivalent(wchar_t const *,wchar_t const *)",
    "public: __thiscall std::_Timevec::~_Timevec(void)",
    "private: static void __cdecl std::locale::_Locimp::_Locimp_ctor(class std::locale::_Locimp *,class std::locale::_Locimp const &)",
    "_Atomic_fetch_and_4",
    "_Atomic_fetch_xor_8",
    "_LSnan",
    "_Atomic_fetch_xor_4",
    "void __cdecl std::_Xout_of_range(char const *)",
    "public: __thiscall std::_UShinit::_UShinit(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(class std::basic_streambuf > &,char)",
    "void __cdecl std::_Xoverflow_error(char const *)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::epptr(void)const",
    "_Cnd_timedwait",
    "_Thrd_join",
    "public: void __thiscall std::_Locinfo::`default constructor closure'(void)",
    "protected: virtual char __thiscall std::ctype::do_toupper(char)const",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_is(unsigned short const *,unsigned short const *,short *)const",
    "class std::_Ph<11> std::placeholders::_11",
    "public: class std::_Winit & __thiscall std::_Winit::operator=(class std::_Winit const &)",
    "public: class std::basic_streambuf > * __thiscall std::basic_streambuf >::pubsetbuf(wchar_t *,__int64)",
    "struct std::_Smanip<__int64> __cdecl std::setprecision(__int64)",
    "bool __cdecl std::tr2::sys::_Remove_dir(wchar_t const *)",
    "class std::_Ph<8> std::placeholders::_8",
    "protected: virtual int __thiscall std::codecvt::do_max_length(void)const",
    "_Getwctype",
    "public: __int64 __thiscall std::basic_streambuf >::sputn(wchar_t const *,__int64)",
    "public: int __thiscall std::codecvt_base::max_length(void)const",
    "_Atomic_fetch_add_4",
    "int __cdecl std::tr2::sys::_Symlink(wchar_t const *,wchar_t const *)",
    "_Atomic_thread_fence",
    "protected: __thiscall Concurrency::details::_Concurrent_vector_base_v4::~_Concurrent_vector_base_v4(void)",
    "public: class std::basic_streambuf > * __thiscall std::basic_ios >::rdbuf(class std::basic_streambuf > *)",
    "public: virtual __thiscall std::basic_iostream >::~basic_iostream >(void)",
    "public: void __thiscall std::ios_base::swap(class std::ios_base &)",
    "struct _iobuf * __cdecl std::_Fiopen(unsigned short const *,int,int)",
    "_Getcoll",
    "_Atomic_load_8",
    "public: int __thiscall std::basic_streambuf >::sgetc(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(char *,__int64)",
    "_Atomic_store_2",
    "_Stoflt",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(char *,__int64,char)",
    "void (__cdecl* std::_Raise_handler)(class stdext::exception const &)",
    "_Mtxlock",
    "const std::basic_iostream >::`vftable'",
    "_Atomic_fetch_sub_1",
    "unsigned __int64 __cdecl std::tr2::sys::_File_size(char const *)",
    "const std::locale::_Locimp::`vftable'",
    "_FDunscale",
    "protected: virtual unsigned short __thiscall std::ctype::do_widen(char)const",
    "_LCosh",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(int &)",
    "class std::_Ph<5> std::placeholders::_5",
    "public: struct _Cvtvec __thiscall std::_Locinfo::_Getcvt(void)const",
    "_LXp_subx",
    "public: int __thiscall std::ios_base::setf(int,int)",
    "protected: virtual __thiscall std::ctype::~ctype(void)",
    "public: void __thiscall std::codecvt::`default constructor closure'(void)",
    "protected: void __thiscall Concurrency::details::_Concurrent_queue_base_v4::_Internal_finish_clear(void)",
    "public: char const * __thiscall std::ctype::narrow(char const *,char const *,char,char *)const",
    "_Getwctypes",
    "public: bool __thiscall Concurrency::agent::cancel(void)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::_Gninc(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::basic_ios > & (__cdecl*)(class std::basic_ios > &))",
    "private: __thiscall std::locale::_Locimp::_Locimp(bool)",
    "public: int __thiscall std::ios_base::exceptions(void)const",
    "_Stollx",
    "??4?$basic_iostream@GU?$char_traits@G@std@@@std@@IAEAAV01@$$QAV01@@Z",
    "public: class std::basic_ostream > * __thiscall std::basic_ios >::tie(void)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(unsigned int &)",
    "_Cnd_register_at_thread_exit",
    "_Dint",
    "public: class std::_Timevec __thiscall std::_Locinfo::_W_Gettnames(void)const",
    "public: int __thiscall std::codecvt::out(int &,unsigned short const *,unsigned short const *,unsigned short const * &,char *,char *,char * &)const",
    "public: static unsigned int __cdecl std::ctype::_Getcat(class std::locale::facet const * *,class std::locale const *)",
    "public: wchar_t __thiscall std::ctype::tolower(wchar_t)const",
    "enum std::tr2::sys::file_type __cdecl std::tr2::sys::_Lstat(char const *,int &)",
    "public: int __thiscall std::basic_istream >::peek(void)",
    "_Xp_movx",
    "public: __thiscall std::_Init_locks::~_Init_locks(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(void * &)",
    "_Atomic_fetch_add_2",
    "public: void __thiscall std::ios_base::unsetf(int)",
    "public: bool __thiscall std::_Yarn::empty(void)const",
    "_Atomic_store_1",
    "class std::basic_ostream > * std::_Ptr_wcerr",
    "public: static void __cdecl std::_Locinfo::_Locinfo_ctor(class std::_Locinfo *,int,char const *)",
    "private: void __thiscall std::locale::_Locimp::_Addfac(class std::locale::facet *,unsigned int)",
    "void __cdecl stdext::threads::_Throw_resource_error(void)",
    "protected: virtual __thiscall std::codecvt::~codecvt(void)",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_scan_is(short,unsigned short const *,unsigned short const *)const",
    "wctrans",
    "struct _iobuf * __cdecl std::_Fiopen(wchar_t const *,int,int)",
    "void * __cdecl std::tr2::sys::_Open_dir(char *,char const *,int &,enum std::tr2::sys::file_type &)",
    "public: short const * __thiscall std::ctype::table(void)const",
    "protected: virtual wchar_t const * __thiscall std::ctype::do_toupper(wchar_t *,wchar_t const *)const",
    "wctype",
    "_LRteps",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(wchar_t *,__int64,wchar_t)",
    "void __cdecl std::_Rethrow_future_exception(class std::exception_ptr)",
    "_Mtx_current_owns",
    "protected: virtual int __thiscall std::codecvt::do_encoding(void)const",
    "_Atomic_load_2",
    "public: __thiscall std::_Yarn::~_Yarn(void)",
    "public: void __thiscall std::basic_istream >::isfx(void)",
    "public: int __thiscall std::basic_streambuf >::sungetc(void)",
    "_Xtime_diff_to_millis",
    "_LDenorm",
    "protected: void __thiscall std::basic_streambuf >::setg(unsigned short *,unsigned short *,unsigned short *)",
    "bool __cdecl Concurrency::is_task_cancellation_requested(void)",
    "public: void __thiscall std::basic_ios >::set_rdbuf(class std::basic_streambuf > *)",
    "protected: unsigned int __thiscall Concurrency::details::_Concurrent_vector_base_v4::_Internal_capacity(void)const",
    "_Xp_addx",
    "unsigned int __cdecl Concurrency::details::NFS_GetLineSize(void)",
    "protected: void __thiscall std::basic_streambuf >::setp(wchar_t *,wchar_t *,wchar_t *)",
    "public: static unsigned int __cdecl std::locale::facet::_Getcat(class std::locale::facet const * *,class std::locale const *)",
    "_Atomic_exchange_4",
    "public: static class std::locale::id std::ctype::id",
    "public: __thiscall std::codecvt::codecvt(class std::_Locinfo const &,unsigned int)",
    "_Stoldx",
    "??4?$basic_ostream@DU?$char_traits@D@std@@@std@@IAEAAV01@$$QAV01@@Z",
    "protected: virtual int __thiscall std::codecvt::do_unshift(int &,char *,char *,char * &)const",
    "protected: wchar_t * __thiscall std::basic_streambuf >::epptr(void)const",
    "protected: virtual char __thiscall std::ctype::do_narrow(wchar_t,char)const",
    "void __cdecl std::_MP_Add(unsigned __int64 * const,unsigned __int64)",
    "_Atomic_fetch_add_1",
    "public: char __thiscall std::ctype::narrow(char,char)const",
    "protected: void __thiscall std::basic_iostream >::swap(class std::basic_iostream > &)",
    "_Stofx",
    "protected: void __thiscall std::basic_streambuf >::setp(unsigned short *,unsigned short *,unsigned short *)",
    "unsigned int __cdecl Concurrency::details::_GetCombinableSize(void)",
    "public: wchar_t const * __thiscall std::ctype::scan_not(short,wchar_t const *,wchar_t const *)const",
    "protected: void __thiscall std::basic_istream >::swap(class std::basic_istream > &)",
    "_FSnan",
    "protected: virtual char const * __thiscall std::ctype::do_widen(char const *,char const *,char *)const",
    "const std::ios_base::`vftable'",
    "_Mbrtowc",
    "_Atomic_fetch_sub_4",
    "struct std::adopt_lock_t const std::adopt_lock",
    "public: char const * __thiscall std::ctype::tolower(char *,char const *)const",
    "protected: void __thiscall std::basic_streambuf >::_Init(char * *,char * *,int *,char * *,char * *,int *)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(float &)",
    "public: void __thiscall std::basic_ios >::setstate(int,bool)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::putback(wchar_t)",
    "public: static unsigned int __cdecl std::codecvt::_Getcat(class std::locale::facet const * *,class std::locale const *)",
    "public: char const * __thiscall std::ctype::scan_is(short,char const *,char const *)const",
    "public: struct std::_Container_base12 & __thiscall std::_Container_base12::operator=(struct std::_Container_base12 const &)",
    "void __cdecl std::_MP_Mul(unsigned __int64 * const,unsigned __int64,unsigned __int64)",
    "char const * __cdecl std::_Future_error_map(int)",
    "public: class std::_Timevec __thiscall std::_Locinfo::_Gettnames(void)const",
    "protected: void __thiscall std::basic_ios >::init(class std::basic_streambuf > *,bool)",
    "public: void __thiscall std::ctype_base::`default constructor closure'(void)",
    "public: void __thiscall std::ios_base::exceptions(unsigned int)",
    "protected: virtual void __thiscall std::basic_streambuf >::imbue(class std::locale const &)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::_Gndec(void)",
    "unsigned __int64 __cdecl std::tr2::sys::_File_size(wchar_t const *)",
    "_Atomic_fetch_sub_8",
    "char * __cdecl std::tr2::sys::_Current_get(char *)",
    "??0?$basic_iostream@GU?$char_traits@G@std@@@std@@IAE@$$QAV01@@Z",
    "public: char const * __thiscall std::_Yarn::c_str(void)const",
    "protected: bool __thiscall Concurrency::agent::done(void)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(void const *)",
    "_Atomic_fetch_or_1",
    "protected: virtual __int64 __thiscall std::basic_streambuf >::xsputn(unsigned short const *,__int64)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(char &)",
    "public: class std::fpos __thiscall std::basic_ostream >::tellp(void)",
    "public: static void __cdecl Concurrency::agent::wait_for_one(unsigned int,class Concurrency::agent * *,enum Concurrency::agent_status &,unsigned int &,unsigned int)",
    "protected: __thiscall std::basic_streambuf >::basic_streambuf >(class std::basic_streambuf > const &)",
    "void __cdecl std::_Xinvalid_argument(char const *)",
    "_Mtx_lock",
    "public: char __thiscall std::basic_ios >::fill(char)",
    "public: unsigned short const * __thiscall std::ctype::is(unsigned short const *,unsigned short const *,short *)const",
    "public: class std::_Iosb & __thiscall std::_Iosb::operator=(class std::_Iosb const &)",
    "public: unsigned short __thiscall std::ctype::toupper(unsigned short)const",
    "char const * __cdecl std::_Winerror_map(int)",
    "protected: virtual __int64 __thiscall std::basic_streambuf >::xsputn(char const *,__int64)",
    "public: class std::basic_ios > & __thiscall std::basic_ios >::copyfmt(class std::basic_ios > const &)",
    "public: int __thiscall std::ios_base::flags(void)const",
    "_FXbig",
    "public: int __thiscall std::basic_istream >::sync(void)",
    "_LXp_addh",
    "_Stof",
    "protected: virtual bool __thiscall std::codecvt::do_always_noconv(void)const",
    "_Atomic_fetch_or_8",
    "class std::_Ph<19> std::placeholders::_19",
    "??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@IAE@$$QAV01@@Z",
    "public: __thiscall std::_Lockit::~_Lockit(void)",
    "protected: wchar_t * __thiscall std::basic_streambuf >::egptr(void)const",
    "public: wchar_t const * __thiscall std::_Yarn::_C_str(void)const",
    "_Towupper",
    "public: class std::_Pad & __thiscall std::_Pad::operator=(class std::_Pad const &)",
    "protected: class std::basic_streambuf > & __thiscall std::basic_streambuf >::operator=(class std::basic_streambuf > const &)",
    "_Cnd_destroy",
    "protected: virtual char __thiscall std::ctype::do_tolower(char)const",
    "protected: virtual class std::fpos __thiscall std::basic_streambuf >::seekoff(__int64,int,int)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::putback(unsigned short)",
    "public: class std::locale __thiscall std::basic_streambuf >::pubimbue(class std::locale const &)",
    "_Stolx",
    "protected: __thiscall std::ios_base::ios_base(void)",
    "public: void __thiscall std::locale::facet::`default constructor closure'(void)",
    "protected: virtual int __thiscall std::codecvt::do_out(int &,unsigned short const *,unsigned short const *,unsigned short const * &,char *,char *,char * &)const",
    "public: virtual __thiscall std::basic_istream >::~basic_istream >(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(bool &)",
    "_FDtest",
    "_FXp_setw",
    "public: int __thiscall std::basic_streambuf >::sputc(char)",
    "class std::basic_ostream > * std::_Ptr_cerr",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_toupper(unsigned short *,unsigned short const *)const",
    "public: char const * __thiscall std::ctype::widen(char const *,char const *,char *)const",
    "??0?$basic_ostream@DU?$char_traits@D@std@@@std@@IAE@$$QAV01@@Z",
    "public: unsigned short __thiscall std::basic_streambuf >::sputbackc(wchar_t)",
    "protected: virtual int __thiscall std::codecvt::do_length(int &,char const *,char const *,unsigned int)const",
    "?move@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEX$$QAV12@@Z",
    "public: __thiscall std::_Container_base12::_Container_base12(struct std::_Container_base12 const &)",
    "class std::basic_ostream > * std::_Ptr_clog",
    "_LDunscale",
    "public: __thiscall std::_Locinfo::~_Locinfo(void)",
    "public: bool __thiscall std::basic_ostream >::opfx(void)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(__int64)",
    "public: class std::basic_streambuf > * __thiscall std::basic_ios >::rdbuf(void)const",
    "_LXp_mulx",
    "public: int __thiscall std::basic_streambuf >::snextc(void)",
    "public: int __thiscall std::codecvt::in(int &,char const *,char const *,char const * &,unsigned short *,unsigned short *,unsigned short * &)const",
    "public: void __thiscall std::_Pad::_Launch(struct _Thrd_imp_t *)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::basic_streambuf > *)",
    "void __cdecl Concurrency::cancel_current_task(void)",
    "public: void __thiscall std::_Container_base0::_Orphan_all(void)",
    "private: static int std::locale::id::_Id_cnt",
    "_Cnd_signal",
    "_FXp_addh",
    "class std::_Ph<18> std::placeholders::_18",
    "??4?$basic_iostream@DU?$char_traits@D@std@@@std@@IAEAAV01@$$QAV01@@Z",
    "_Cnd_init",
    "_Atomic_exchange",
    "private: static void __cdecl std::_Lockit::_Lockit_dtor(class std::_Lockit *)",
    "public: __int64 __thiscall std::basic_istream >::gcount(void)const",
    "protected: __thiscall std::basic_streambuf >::basic_streambuf >(void)",
    "public: int __thiscall std::_Locinfo::_Getdateorder(void)const",
    "int __cdecl std::tr2::sys::_Make_dir(wchar_t const *)",
    "_Thrd_sleep",
    "public: char __thiscall std::basic_ios >::widen(char)const",
    "_Thrd_equal",
    "public: virtual class std::_Facet_base * __thiscall std::locale::facet::_Decref(void)",
    "class std::_Ph<9> std::placeholders::_9",
    "public: void __thiscall std::ios_base::clear(int)",
    "public: __thiscall std::basic_ostream >::basic_ostream >(enum std::_Uninitialized,bool)",
    "_Toupper",
    "public: virtual void __thiscall std::basic_streambuf >::_Unlock(void)",
    "unsigned char const * const Concurrency::details::_Byte_reverse_table",
    "_Wcscoll",
    "protected: virtual int __thiscall std::basic_streambuf >::pbackfail(int)",
    "protected: virtual char __thiscall std::ctype::do_narrow(unsigned short,char)const",
    "public: __thiscall std::_Pad::_Pad(void)",
    "_LEps",
    "protected: char * __thiscall std::basic_streambuf >::egptr(void)const",
    "__int64 __cdecl std::tr2::sys::_Last_write_time(char const *)",
    "public: __thiscall std::_Container_base12::~_Container_base12(void)",
    "const std::codecvt::`vftable'",
    "protected: virtual wchar_t const * __thiscall std::ctype::do_scan_is(short,wchar_t const *,wchar_t const *)const",
    "const std::basic_ios >::`vftable'",
    "_Xp_subx",
    "public: __thiscall std::_Winit::_Winit(void)",
    "public: bool __thiscall std::codecvt_base::always_noconv(void)const",
    "_Atomic_compare_exchange_weak_2",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(unsigned long)",
    "public: virtual __thiscall std::basic_ios >::~basic_ios >(void)",
    "public: __int64 __thiscall std::ios_base::width(__int64)",
    "_Xp_setw",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::underflow(void)",
    "const std::ctype_base::`vftable'",
    "private: static int std::_Winit::_Init_cnt",
    "_LXp_ldexpx",
    "_Stoxflt",
    "protected: virtual char const * __thiscall std::ctype::do_narrow(char const *,char const *,char,char *)const",
    "public: __thiscall std::_Lockit::_Lockit(void)",
    "_FDscale",
    "public: unsigned short const * __thiscall std::ctype::tolower(unsigned short *,unsigned short const *)const",
    "_FXp_setn",
    "void __cdecl std::_Rng_abort(char const *)",
    "_FXp_sqrtx",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(wchar_t *,__int64)",
    "unsigned __int64 __cdecl std::_MP_Get(unsigned __int64 * const)",
    "??4?$basic_ostream@GU?$char_traits@G@std@@@std@@IAEAAV01@$$QAV01@@Z",
    "_LPoly",
    "_LSinh",
    "protected: void __thiscall std::basic_streambuf >::_Init(unsigned short * *,unsigned short * *,int *,unsigned short * *,unsigned short * *,int *)",
    "public: unsigned short const * __thiscall std::ctype::scan_is(short,unsigned short const *,unsigned short const *)const",
    "public: wchar_t const * __thiscall std::ctype::is(wchar_t const *,wchar_t const *,short *)const",
    "?move@?$basic_ios@GU?$char_traits@G@std@@@std@@QAEX$$QAV12@@Z",
    "_Do_call",
    "class std::_Ph<20> std::placeholders::_20",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(unsigned short &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(unsigned short *,__int64,unsigned short)",
    "int __cdecl std::tr2::sys::_Unlink(char const *)",
    "protected: virtual bool __thiscall std::ctype::do_is(short,unsigned short)const",
    "public: class std::_Yarn & __thiscall std::_Yarn::operator=(char const *)",
    "private: static void __cdecl std::locale::_Setgloballocale(void *)",
    "_Atomic_compare_exchange_strong_2",
    "protected: virtual wchar_t __thiscall std::ctype::do_tolower(wchar_t)const",
    "_FXp_ldexpx",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::write(unsigned short const *,__int64)",
    "void (__cdecl*__cdecl std::get_new_handler(void))(void)",
    "void __cdecl stdext::threads::_Mtx_new(void * &)",
    "public: int __thiscall std::basic_streambuf >::sputbackc(char)",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_streambuf >::setbuf(unsigned short *,__int64)",
    "public: char const * __thiscall std::_Locinfo::_Getname(void)const",
    "_Atomic_fetch_xor_2",
    "protected: virtual __thiscall std::locale::_Locimp::~_Locimp(void)",
    "_Unlock_spin_lock",
    "struct std::tr2::sys::space_info __cdecl std::tr2::sys::_Statvfs(wchar_t const *)",
    "public: void __thiscall std::ios_base::register_callback(void (__cdecl*)(enum std::ios_base::event,class std::ios_base &,int),int)",
    "public: virtual __thiscall std::codecvt_base::~codecvt_base(void)",
    "_FSinh",
    "protected: char * __thiscall std::basic_streambuf >::_Gndec(void)",
    "public: int __thiscall std::codecvt::unshift(int &,char *,char *,char * &)const",
    "public: __thiscall std::locale::id::id(unsigned int)",
    "struct std::_Smanip __cdecl std::setiosflags(int)",
    "?move@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEX$$QAV12@@Z",
    "class std::basic_istream > std::wcin",
    "_Xp_getw",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(double &)",
    "public: bool __thiscall std::ctype::is(short,wchar_t)const",
    "protected: void __thiscall std::ctype::_Tidy(void)",
    "public: static int __cdecl std::ios_base::xalloc(void)",
    "const std::basic_streambuf >::`vftable'",
    "protected: void __thiscall std::basic_streambuf >::setg(char *,char *,char *)",
    "public: static void __cdecl std::_Locinfo::_Locinfo_dtor(class std::_Locinfo *)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(wchar_t *,__int64)",
    "??4?$basic_istream@GU?$char_traits@G@std@@@std@@IAEAAV01@$$QAV01@@Z",
    "public: unsigned short const * __thiscall std::_Locinfo::_W_Getdays(void)const",
    "protected: virtual char const * __thiscall std::ctype::do_widen(char const *,char const *,unsigned short *)const",
    "public: unsigned short __thiscall std::basic_ios >::fill(unsigned short)",
    "class std::basic_istream > * std::_Ptr_wcin",
    "class std::basic_ostream > std::wcerr",
    "xtime_get",
    "protected: virtual __thiscall Concurrency::details::_Concurrent_queue_base_v4::~_Concurrent_queue_base_v4(void)",
    "protected: void __thiscall Concurrency::details::_Concurrent_queue_base_v4::_Internal_swap(class Concurrency::details::_Concurrent_queue_base_v4 &)",
    "_Mtx_getconcrtcs",
    "??0?$basic_istream@GU?$char_traits@G@std@@@std@@IAE@$$QAV01@@Z",
    "public: void * __thiscall std::_Timevec::_Getptr(void)const",
    "private: static void __cdecl std::ios_base::Init::_Init_ctor(class std::ios_base::Init *)",
    "const std::basic_istream >::`vftable'",
    "class std::basic_istream > & __cdecl std::ws(class std::basic_istream > &)",
    "_Thrd_start",
    "public: virtual void __thiscall std::basic_ios >::_Add_vtordisp1(void)",
    "??0?$basic_ostream@GU?$char_traits@G@std@@@std@@IAE@$$QAV01@@Z",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(bool)",
    "_FXp_mulh",
    "_Xtime_diff_to_millis2",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::seekp(__int64,int)",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekoff(__int64,unsigned int,unsigned int)",
    "public: static class std::locale __cdecl std::locale::global(class std::locale const &)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(long double)",
    "protected: unsigned int __thiscall Concurrency::details::_Concurrent_vector_base_v4::_Internal_grow_by(unsigned int,unsigned int,void (__cdecl*)(void *,void const *,unsigned int),void const *)",
    "long double __cdecl std::_XLgamma(long double)",
    "public: void __thiscall std::ios_base::clear(unsigned int)",
    "class std::basic_ostream > std::cout",
    "_Atomic_fetch_add_8",
    "protected: char __thiscall std::ctype::_Donarrow(unsigned short,char)const",
    "public: static bool __cdecl std::ios_base::sync_with_stdio(bool)",
    "wchar_t * __cdecl std::tr2::sys::_Current_get(wchar_t *)",
    "public: int __thiscall std::codecvt_base::encoding(void)const",
    "public: class std::_Yarn & __thiscall std::_Yarn::operator=(class std::_Yarn const &)",
    "_Atomic_fetch_sub_2",
    "_Thrd_lt",
    "const std::basic_iostream >::`vbtable'{for `std::basic_ostream >'}",
    "protected: virtual int __thiscall std::basic_streambuf >::uflow(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(class std::basic_streambuf > &,wchar_t)",
    "void __cdecl std::_Throw_future_error(class std::error_code const &)",
    "void __cdecl std::_Xruntime_error(char const *)",
    "public: __thiscall std::_Yarn::_Yarn(class std::_Yarn const &)",
    "public: int __thiscall std::ios_base::setf(int)",
    "public: void __thiscall std::basic_ios >::move(class std::basic_ios > &)",
    "_Thrd_yield",
    "public: bool __thiscall std::ios_base::fail(void)const",
    "??4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@IAEAAV01@$$QAV01@@Z",
    "protected: unsigned short * __thiscall std::basic_streambuf >::_Pninc(void)",
    "_Stoll",
    "unsigned int __cdecl Concurrency::details::_GetNextAsyncId(void)",
    "protected: wchar_t * __thiscall std::basic_streambuf >::_Gninc(void)",
    "int __cdecl std::tr2::sys::_Equivalent(char const *,char const *)",
    "_Mtx_init",
    "protected: unsigned int __thiscall Concurrency::details::_Concurrent_vector_base_v4::_Internal_clear(void (__cdecl*)(void *,unsigned int))",
    "public: __thiscall std::basic_ostream >::basic_ostream >(class std::basic_streambuf > *,bool)",
    "public: int __thiscall std::basic_istream >::get(void)",
    "protected: void __thiscall std::ctype::_Init(class std::_Locinfo const &)",
    "_Cnd_wait",
    "public: void __thiscall std::_Container_base0::_Swap_all(struct std::_Container_base0 &)",
    "public: wchar_t __thiscall std::basic_ios >::fill(void)const",
    "private: static void __cdecl std::ios_base::Init::_Init_dtor(class std::ios_base::Init *)",
    "const std::codecvt_base::`vftable'",
    "protected: char * __thiscall std::basic_streambuf >::_Pninc(void)",
    "_FDenorm",
    "public: void __thiscall std::ios_base::setstate(int)",
    "public: __thiscall std::basic_istream >::basic_istream >(enum std::_Uninitialized)",
    "_Xp_addh",
    "_Tss_delete",
    "struct std::try_to_lock_t const std::try_to_lock",
    "_Stod",
    "_Stoullx",
    "public: __thiscall std::ios_base::operator void *(void)const",
    "_FDtento",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::seekg(class std::fpos)",
    "_LInf",
    "public: class std::locale __thiscall std::ios_base::getloc(void)const",
    "class std::_Ph<4> std::placeholders::_4",
    "public: void __thiscall std::_Container_base12::_Orphan_all(void)",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_streambuf >::setbuf(wchar_t *,__int64)",
    "_Stold",
    "_FCosh",
    "bool __cdecl Concurrency::is_current_task_group_canceling(void)",
    "protected: void __thiscall Concurrency::details::_Concurrent_vector_base_v4::_Internal_assign(class Concurrency::details::_Concurrent_vector_base_v4 const &,unsigned int,void (__cdecl*)(void *,unsigned int),void (__cdecl*)(void *,void const *,unsigned int),void (__cdecl*)(void *,void const *,unsigned int))",
    "public: unsigned short __thiscall std::ctype::widen(char)const",
    "public: bool __thiscall std::ctype::is(short,unsigned short)const",
    "protected: void __thiscall std::basic_streambuf >::setp(unsigned short *,unsigned short *)",
    "protected: void __thiscall Concurrency::details::_Concurrent_vector_base_v4::_Internal_reserve(unsigned int,unsigned int,unsigned int)",
    "public: unsigned short const * __thiscall std::_Locinfo::_W_Getmonths(void)const",
    "public: __thiscall std::codecvt::codecvt(unsigned int)",
    "_LXp_invx"
  ],
  "msvcp60.dll": [
    "public: void __thiscall std::basic_stringbuf,class std::allocator >::`default constructor closure'(void)",
    "public: int __thiscall std::basic_streambuf >::sputn(unsigned short const *,int)",
    "_Dscale",
    "public: virtual __thiscall std::ctype_base::~ctype_base(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(char *,int)",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_tolower(unsigned short *,unsigned short const *)const",
    "protected: virtual int __thiscall std::codecvt::do_in(int &,char const *,char const *,char const * &,unsigned short *,unsigned short *,unsigned short * &)const",
    "_Dtest",
    "bool __cdecl std::operator!=(float const &,class std::complex const &)",
    "public: void __thiscall std::basic_istream >::`vbase destructor'(void)",
    "bool __cdecl std::operator==(double const &,class std::complex const &)",
    "class std::basic_ostream > & __cdecl std::endl(class std::basic_ostream > &)",
    "public: char const * __thiscall std::ctype::widen(char const *,char const *,unsigned short *)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,unsigned int,char)",
    "bool __cdecl std::operator==,class std::allocator >(char const *,class std::basic_string,class std::allocator > const &)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_monthname(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "_Xbig",
    "public: static signed char __cdecl std::numeric_limits::max(void)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::pptr(void)const",
    "_FEps",
    "public: static int __cdecl std::numeric_limits::denorm_min(void)",
    "public: __thiscall std::collate::collate(class std::_Locinfo const &,unsigned int)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,bool &)const",
    "public: void __thiscall std::basic_ostream >::osfx(void)",
    "private: void __thiscall std::ios_base::_Callfns(enum std::ios_base::event)",
    "class std::complex __cdecl std::operator*(double const &,class std::complex const &)",
    "private: static bool std::ios_base::_Sync",
    "bool __cdecl std::operator<(char const *,class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::ios_base & (__cdecl*)(class std::ios_base &))",
    "long double const `long double __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_Xh",
    "public: static float __cdecl std::_Ctr::exp(float)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(unsigned short,class std::basic_string,class std::allocator > const &)",
    "public: static int __cdecl std::numeric_limits::epsilon(void)",
    "class std::complex __cdecl std::operator*(class std::complex const &,double const &)",
    "public: static char __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: char const * __thiscall std::_Locinfo::_Getmonths(void)const",
    "public: long double __thiscall std::_Complex_base::real(long double const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(long &)",
    "protected: virtual int __thiscall std::_Mpunct::do_frac_digits(void)const",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_streambuf >::setbuf(unsigned short *,int)",
    "public: char const * __thiscall std::_Locinfo::_Getno(void)const",
    "float __cdecl std::norm(class std::complex const &)",
    "public: virtual __thiscall std::logic_error::~logic_error(void)",
    "class std::basic_istream > & __cdecl std::operator>>,float>(class std::basic_istream > &,class std::complex &)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator*=(long double const &)",
    "public: bool __thiscall std::ios_base::eof(void)const",
    "public: static unsigned short __cdecl std::char_traits::to_int_type(unsigned short const &)",
    "public: long & __thiscall std::ios_base::iword(int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(char const *)",
    "protected: __thiscall std::basic_streambuf >::basic_streambuf >(enum std::_Uninitialized)",
    "public: __thiscall std::messages::messages(unsigned int)",
    "private: static class std::ostreambuf_iterator > __cdecl std::money_put > >::_Put(class std::ostreambuf_iterator >,unsigned short const *,unsigned int)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned int &)const",
    "public: char const * __thiscall std::basic_string,class std::allocator >::begin(void)const",
    "class std::basic_ostream > & __cdecl std::operator<<,double>(class std::basic_ostream > &,class std::complex const &)",
    "public: static unsigned long __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: static float __cdecl std::_Ctr::_Infv(float)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(char,unsigned int)const",
    "public: static unsigned int __cdecl std::ctype::_Getcat(void)",
    "public: static long double __cdecl std::_Ctr::_Infv(long double)",
    "bool __cdecl std::operator<=(class std::basic_string,class std::allocator > const &,char const *)",
    "const std::money_get > >::`vftable'",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,unsigned short)",
    "bool __cdecl std::operator<=,class std::allocator >(class std::basic_string,class std::allocator > const &,char const *)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(unsigned short *,int)",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Mpunct::curr_symbol(void)const",
    "bool __cdecl std::operator==(class std::complex const &,double const &)",
    "protected: virtual char __thiscall std::numpunct::do_thousands_sep(void)const",
    "public: char * __thiscall std::basic_string,class std::allocator >::erase(char *,char *)",
    "public: char const * __thiscall std::basic_string,class std::allocator >::c_str(void)const",
    "public: class std::_Timevec & __thiscall std::_Timevec::operator=(class std::_Timevec const &)",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::overflow(unsigned short)",
    "public: virtual __thiscall std::basic_ostream >::~basic_ostream >(void)",
    "bool __cdecl std::operator==(long double const &,class std::complex const &)",
    "class std::complex __cdecl std::cosh(class std::complex const &)",
    "_Denorm",
    "mbrtowc",
    "public: int __thiscall std::basic_streambuf >::pubsync(void)",
    "protected: virtual char __thiscall std::_Mpunct::do_decimal_point(void)const",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,long double &)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::ignore(int,int)",
    "public: static unsigned long __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: static long double __cdecl std::_Ctr::_Sinh(long double,long double)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(char const *,char const *,class std::allocator const &)",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_weekday(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Mpunct::negative_sign(void)const",
    "_LDtest",
    "class std::basic_ostream > std::clog",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(char,unsigned int)const",
    "public: __thiscall std::basic_stringbuf,class std::allocator >::basic_stringbuf,class std::allocator >(int)",
    "public: void __thiscall std::basic_string,class std::allocator >::resize(unsigned int)",
    "private: static int std::ios_base::_Index",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(char *,int,char)",
    "protected: void __thiscall std::basic_streambuf >::setp(char *,char *,char *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned short const *,unsigned int)",
    "private: static class std::ostreambuf_iterator > __cdecl std::money_put > >::_Rep(class std::ostreambuf_iterator >,unsigned short,unsigned int)",
    "class std::complex __cdecl std::pow(class std::complex const &,long double const &)",
    "public: __thiscall std::_Mpunct::_Mpunct(class std::_Locinfo const &,unsigned int,bool)",
    "public: bool __thiscall std::ctype::is(short,char)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(short &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(class std::basic_string,class std::allocator > const &)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator=(class std::_Complex_base const &)",
    "public: char const * __thiscall std::basic_string,class std::allocator >::end(void)const",
    "private: static class std::locale::_Locimp * __cdecl std::locale::_Init(void)",
    "public: static unsigned long __cdecl std::numeric_limits::max(void)",
    "_Tolower",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(unsigned short const *,unsigned int)const",
    "protected: virtual int __thiscall std::strstreambuf::pbackfail(int)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: void __thiscall std::num_put > >::`default constructor closure'(void)",
    "float const `float __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_R2",
    "public: class std::ostreambuf_iterator > __thiscall std::time_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,struct tm const *,char const *,char const *)const",
    "protected: char * __thiscall std::basic_streambuf >::pbase(void)const",
    "private: void __thiscall std::basic_string,class std::allocator >::_Copy(unsigned int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(char const *,unsigned int,unsigned int)const",
    "class std::complex __cdecl std::log10(class std::complex const &)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator-=(long double const &)",
    "public: class std::out_of_range & __thiscall std::out_of_range::operator=(class std::out_of_range const &)",
    "public: class std::ostreambuf_iterator > __thiscall std::money_put > >::put(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,long double)const",
    "public: virtual __thiscall std::out_of_range::~out_of_range(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(class std::basic_string,class std::allocator > const &)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::pbase(void)const",
    "public: class std::logic_error & __thiscall std::logic_error::operator=(class std::logic_error const &)",
    "protected: virtual long __thiscall std::collate::do_hash(unsigned short const *,unsigned short const *)const",
    "class std::complex __cdecl std::operator+(class std::complex const &)",
    "__Wcrtomb_lk",
    "_Exp",
    "public: __thiscall std::bad_cast::bad_cast(char const *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(char const *,char const *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(unsigned short const *)",
    "public: static class std::locale::id std::collate::id",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekoff(long,enum std::ios_base::seekdir,int)",
    "public: class std::basic_string,class std::allocator > __thiscall std::numpunct::truename(void)const",
    "public: static short __cdecl std::_Ctr::_Exp(double *,double,short)",
    "public: virtual __thiscall std::bad_exception::~bad_exception(void)",
    "class std::complex __cdecl std::operator/(long double const &,class std::complex const &)",
    "class std::complex & __cdecl std::operator+=(class std::complex &,class std::complex const &)",
    "const std::basic_ofstream >::`vftable'",
    "protected: void __thiscall std::strstreambuf::_Tidy(void)",
    "public: static unsigned char __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: unsigned short __thiscall std::ctype::tolower(unsigned short)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(unsigned long &)",
    "public: class std::complex & __thiscall std::complex::operator=(float const &)",
    "public: __thiscall std::strstream::strstream(char *,int,int)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(int)",
    "public: static bool __cdecl std::_Ctr::_Isnan(double)",
    "bool __cdecl std::operator!=,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: void __thiscall std::basic_istringstream,class std::allocator >::`default constructor closure'(void)",
    "public: float __thiscall std::_Complex_base::imag(float const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned int,unsigned short)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(char const *,unsigned int)const",
    "public: __thiscall std::time_base::time_base(unsigned int)",
    "public: void __thiscall std::basic_ostringstream,class std::allocator >::`vbase destructor'(void)",
    "class std::complex __cdecl std::exp(class std::complex const &)",
    "class std::complex & __cdecl std::operator/=(class std::complex &,class std::complex const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::putback(char)",
    "protected: virtual int __thiscall std::basic_streambuf >::xsputn(unsigned short const *,int)",
    "public: __thiscall std::ios_base::Init::~Init(void)",
    "private: static unsigned int __cdecl std::basic_string,class std::allocator >::_Pdif(char const *,char const *)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::money_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,bool,class std::ios_base &,int &,class std::basic_string,class std::allocator > &)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::seekp(class std::fpos)",
    "public: __thiscall std::num_get > >::num_get > >(class std::_Locinfo const &,unsigned int)",
    "public: void __thiscall std::basic_string,class std::allocator >::resize(unsigned int,char)",
    "struct std::_Smanip __cdecl std::resetiosflags(int)",
    "bool __cdecl std::operator<=(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "_Sinh",
    "public: static bool __cdecl std::numeric_limits::infinity(void)",
    "const std::underflow_error::`vftable'",
    "public: static unsigned int const std::ctype::table_size",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Iput(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,char *,unsigned int)",
    "const std::basic_ofstream >::`vbtable'",
    "protected: virtual long __thiscall std::collate::do_hash(char const *,char const *)const",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_scan_not(short,unsigned short const *,unsigned short const *)const",
    "public: class std::underflow_error & __thiscall std::underflow_error::operator=(class std::underflow_error const &)",
    "class std::basic_ostream > & __cdecl std::operator<<,float>(class std::basic_ostream > &,class std::complex const &)",
    "public: struct lconv const * __thiscall std::_Locinfo::_Getlconv(void)const",
    "public: __thiscall std::time_get > >::time_get > >(unsigned int)",
    "_LXbig",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,unsigned short const *)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::basic_streambuf > *)",
    "protected: virtual class std::fpos __thiscall std::basic_streambuf >::seekpos(class std::fpos,int)",
    "public: bool __thiscall std::basic_string,class std::allocator >::empty(void)const",
    "public: char __thiscall std::basic_ios >::fill(void)const",
    "bool __cdecl std::operator==(float const &,class std::complex const &)",
    "public: char const & __thiscall std::basic_string,class std::allocator >::at(unsigned int)const",
    "public: long __thiscall std::collate::hash(unsigned short const *,unsigned short const *)const",
    "public: static unsigned char __cdecl std::numeric_limits::infinity(void)",
    "const std::locale::facet::`vftable'",
    "public: class std::istreambuf_iterator > __thiscall std::money_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,bool,class std::ios_base &,int &,long double &)const",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,float &)const",
    "public: static unsigned int __cdecl std::num_get > >::_Getcat(void)",
    "public: void __thiscall std::basic_string,class std::allocator >::insert(unsigned short *,unsigned int,unsigned short)",
    "public: __thiscall std::basic_ofstream >::basic_ofstream >(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(char,unsigned int)const",
    "public: __thiscall std::basic_stringbuf,class std::allocator >::basic_stringbuf,class std::allocator >(class std::basic_string,class std::allocator > const &,int)",
    "public: virtual __thiscall std::basic_stringstream,class std::allocator >::~basic_stringstream,class std::allocator >(void)",
    "public: void __thiscall std::basic_iostream >::`vbase destructor'(void)",
    "private: static char const * __cdecl std::basic_string,class std::allocator >::_Nullstr(void)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator-=(double const &)",
    "protected: virtual unsigned short __thiscall std::basic_filebuf >::underflow(void)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_time(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: class std::basic_ofstream > & __thiscall std::basic_ofstream >::operator=(class std::basic_ofstream > const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(unsigned short const *,unsigned int)const",
    "bool __cdecl std::operator>=,class std::allocator >(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "__int64 const std::_Fpz",
    "public: virtual __thiscall std::istrstream::~istrstream(void)",
    "public: __thiscall std::basic_istream >::basic_istream >(class std::basic_streambuf > *,bool)",
    "public: class std::basic_streambuf > * __thiscall std::basic_streambuf >::pubsetbuf(unsigned short *,int)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,class std::basic_string,class std::allocator > const &)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::basic_ios > & (__cdecl*)(class std::basic_ios > &))",
    "public: int __thiscall std::codecvt::length(int &,unsigned short const *,unsigned short const *,unsigned int)const",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Fput(class std::ostreambuf_iterator >,class std::ios_base &,char,char const *,unsigned int,unsigned int)",
    "public: static long double __cdecl std::_Ctr::atan2(long double,long double)",
    "public: static unsigned char __cdecl std::numeric_limits::max(void)",
    "class std::basic_ostream > & __cdecl std::operator<< >(class std::basic_ostream > &,char const *)",
    "protected: virtual int __thiscall std::basic_filebuf >::uflow(void)",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_ostringstream,class std::allocator >::str(void)const",
    "public: class std::basic_ostream > * __thiscall std::basic_ios >::tie(class std::basic_ostream > *)",
    "public: void __thiscall std::time_put > >::`default constructor closure'(void)",
    "_Getcvt",
    "private: void __thiscall std::ios_base::_Tidy(void)",
    "public: int __thiscall std::codecvt::out(int &,char const *,char const *,char const * &,char *,char *,char * &)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(unsigned short const *,unsigned int,unsigned int)const",
    "protected: void __thiscall std::_Mpunct::_Init(class std::_Locinfo const &)",
    "protected: virtual void __thiscall std::out_of_range::_Doraise(void)const",
    "class std::complex __cdecl std::operator-(class std::complex const &,long double const &)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,void const *)const",
    "bool __cdecl std::operator>=,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: __thiscall std::basic_string,class std::allocator >::~basic_string,class std::allocator >(void)",
    "public: __thiscall std::_Timevec::~_Timevec(void)",
    "_LSnan",
    "class std::basic_istream > & __cdecl std::operator>> >(class std::basic_istream > &,char *)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(class std::basic_streambuf > &,char)",
    "const std::basic_fstream >::`vftable'",
    "public: void __thiscall std::_Locinfo::`default constructor closure'(void)",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_is(unsigned short const *,unsigned short const *,short *)const",
    "bool __cdecl std::operator!=(class std::complex const &,double const &)",
    "public: virtual __thiscall std::messages_base::~messages_base(void)",
    "public: static double __cdecl std::_Ctr::exp(double)",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_time(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: static signed char __cdecl std::numeric_limits::min(void)",
    "public: class std::basic_streambuf > * __thiscall std::basic_ios >::rdbuf(class std::basic_streambuf > *)",
    "public: float __thiscall std::_Complex_base::real(void)const",
    "protected: void __thiscall std::num_put > >::_Init(class std::_Locinfo const &)",
    "_Getcoll",
    "bool __cdecl std::operator<(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(char const *)const",
    "public: static float __cdecl std::_Ctr::_Cosh(float,float)",
    "protected: virtual unsigned short __thiscall std::ctype::do_widen(char)const",
    "class std::complex __cdecl std::pow(class std::complex const &,class std::complex const &)",
    "public: static long __cdecl std::numeric_limits::infinity(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(int &)",
    "float __cdecl std::real(class std::complex const &)",
    "public: class std::overflow_error & __thiscall std::overflow_error::operator=(class std::overflow_error const &)",
    "public: class std::locale __thiscall std::basic_streambuf >::getloc(void)",
    "public: class std::basic_ostream > * __thiscall std::basic_ios >::tie(void)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(unsigned int &)",
    "public: __thiscall std::locale::locale(class std::locale const &)",
    "class std::basic_ostream > & __cdecl std::operator<< >(class std::basic_ostream > &,char)",
    "class std::complex __cdecl std::log(class std::complex const &)",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_scan_is(short,unsigned short const *,unsigned short const *)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,char const *,unsigned int)",
    "public: static int __cdecl std::char_traits::not_eof(int const &)",
    "public: __thiscall std::basic_ofstream >::basic_ofstream >(char const *,int)",
    "const std::basic_ifstream >::`vbtable'",
    "int `protected: void __thiscall std::basic_filebuf >::_Init(struct _iobuf *,enum std::basic_filebuf >::_Initfl)'::`2'::_Stinit",
    "public: virtual __thiscall std::num_put > >::~num_put > >(void)",
    "public: bool __thiscall std::locale::_Iscloc(void)const",
    "public: static double __cdecl std::_Ctr::_Cosh(double,double)",
    "_LDenorm",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,unsigned char &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::erase(unsigned int,unsigned int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "public: virtual __thiscall std::num_get > >::~num_get > >(void)",
    "public: class std::bad_alloc & __thiscall std::bad_alloc::operator=(class std::bad_alloc const &)",
    "float const `float __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_Xl",
    "public: __thiscall std::moneypunct::moneypunct(unsigned int)",
    "bool __cdecl std::operator==(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,char const *)",
    "const std::basic_fstream >::`vbtable'{for `std::basic_ostream >'}",
    "bool __cdecl std::operator>=,class std::allocator >(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: static float __cdecl std::numeric_limits::min(void)",
    "public: static unsigned short __cdecl std::numeric_limits::infinity(void)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,class std::complex &)",
    "public: unsigned short const * __thiscall std::basic_string,class std::allocator >::data(void)const",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,unsigned short *)",
    "public: static int __cdecl std::numeric_limits::infinity(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(char &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(unsigned short const *,unsigned int,unsigned int)const",
    "public: unsigned short __thiscall std::ctype::toupper(unsigned short)const",
    "public: static long double __cdecl std::numeric_limits::epsilon(void)",
    "protected: virtual bool __thiscall std::codecvt::do_always_noconv(void)const",
    "float __cdecl std::_Fabs(class std::complex const &,int *)",
    "public: __thiscall std::_Lockit::~_Lockit(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::putback(unsigned short)",
    "public: virtual __thiscall std::strstreambuf::~strstreambuf(void)",
    "public: static long double __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: void __thiscall std::locale::facet::`default constructor closure'(void)",
    "_FDtest",
    "public: void __thiscall std::basic_string,class std::allocator >::resize(unsigned int,unsigned short)",
    "public: class std::basic_istringstream,class std::allocator > & __thiscall std::basic_istringstream,class std::allocator >::operator=(class std::basic_istringstream,class std::allocator > const &)",
    "public: double __thiscall std::_Complex_base::real(double const &)",
    "public: __thiscall std::_Locinfo::~_Locinfo(void)",
    "class std::complex __cdecl std::operator/(class std::complex const &,float const &)",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Locinfo::_Getname(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,unsigned short const *)",
    "bool __cdecl std::operator==(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: __thiscall std::bad_alloc::bad_alloc(class std::bad_alloc const &)",
    "double __cdecl std::_Fabs(class std::complex const &,int *)",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_string,class std::allocator >::substr(unsigned int,unsigned int)const",
    "public: __thiscall std::bad_typeid::bad_typeid(char const *)",
    "_Toupper",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(unsigned short const *,unsigned int,unsigned int)const",
    "public: static float __cdecl std::_Ctr::pow(float,float)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,void const *)const",
    "class std::basic_istream > & __cdecl std::getline(class std::basic_istream > &,class std::basic_string,class std::allocator > &,char)",
    "public: __thiscall std::_Winit::_Winit(void)",
    "const std::ctype_base::`vftable'",
    "public: static short __cdecl std::numeric_limits::min(void)",
    "protected: virtual unsigned short __thiscall std::basic_stringbuf,class std::allocator >::overflow(unsigned short)",
    "public: static unsigned short __cdecl std::numeric_limits::max(void)",
    "public: __thiscall std::complex::complex(long double const &,long double const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,char const *,unsigned int)",
    "public: static long double __cdecl std::_Ctr::pow(long double,long double)",
    "public: __thiscall std::locale::locale(void)",
    "bool __cdecl std::operator!=(class std::complex const &,long double const &)",
    "protected: virtual class std::fpos __thiscall std::basic_stringbuf,class std::allocator >::seekoff(long,enum std::ios_base::seekdir,int)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator/=(double const &)",
    "class std::complex __cdecl std::operator*(class std::complex const &,float const &)",
    "public: bool __thiscall std::basic_ifstream >::is_open(void)const",
    "public: unsigned short const * __thiscall std::basic_string,class std::allocator >::begin(void)const",
    "_FSinh",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::seekg(long,enum std::ios_base::seekdir)",
    "class std::basic_istream > std::wcin",
    "bool __cdecl std::operator<,class std::allocator >(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(char const *,unsigned int)const",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,unsigned long)const",
    "public: __thiscall std::ios_base::ios_base(class std::ios_base const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(unsigned short,unsigned int)const",
    "public: unsigned short __thiscall std::basic_ios >::fill(unsigned short)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+,class std::allocator >(class std::basic_string,class std::allocator > const &,char const *)",
    "class std::complex __cdecl std::operator/(double const &,class std::complex const &)",
    "float __cdecl std::imag(class std::complex const &)",
    "public: static char __cdecl std::numeric_limits::epsilon(void)",
    "public: static double __cdecl std::_Ctr::sin(double)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::size(void)const",
    "public: void __thiscall std::numpunct::`default constructor closure'(void)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,unsigned short const *)",
    "struct std::nothrow_t const std::nothrow",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,void const *)const",
    "class std::complex __cdecl std::conj(class std::complex const &)",
    "class std::basic_istream > & __cdecl std::operator>> >(class std::basic_istream > &,unsigned short *)",
    "public: __thiscall std::collate::collate(unsigned int)",
    "public: bool __thiscall std::basic_fstream >::is_open(void)const",
    "public: static class std::locale __cdecl std::locale::global(class std::locale const &)",
    "private: void __thiscall std::basic_string,class std::allocator >::_Tidy(bool)",
    "public: class std::basic_ifstream > & __thiscall std::basic_ifstream >::operator=(class std::basic_ifstream > const &)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(long double)",
    "public: static unsigned char __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: void __thiscall std::moneypunct::`default constructor closure'(void)",
    "public: static bool __cdecl std::numeric_limits::denorm_min(void)",
    "public: unsigned short __thiscall std::numpunct::thousands_sep(void)const",
    "public: long double __thiscall std::_Complex_base::imag(void)const",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,unsigned long)const",
    "public: bool __thiscall std::ios_base::fail(void)const",
    "protected: virtual unsigned short __thiscall std::numpunct::do_decimal_point(void)const",
    "const std::moneypunct::`vftable'",
    "public: static long double __cdecl std::_Ctr::exp(long double)",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekpos(class std::fpos,short)",
    "public: static unsigned int __cdecl std::numeric_limits::max(void)",
    "const std::codecvt_base::`vftable'",
    "protected: char * __thiscall std::basic_streambuf >::_Pninc(void)",
    "public: void __thiscall std::basic_ifstream >::close(void)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Rep(class std::ostreambuf_iterator >,char,unsigned int)",
    "public: static unsigned short __cdecl std::numeric_limits::denorm_min(void)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,unsigned short)",
    "public: static bool __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: virtual __thiscall std::moneypunct::~moneypunct(void)",
    "public: __thiscall std::codecvt::codecvt(unsigned int)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned short const *,unsigned short const *,class std::allocator const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(unsigned short,unsigned int)const",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::money_put > >::do_put(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,long double)const",
    "public: int __thiscall std::ios_base::rdstate(void)const",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,long)const",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::numpunct::do_falsename(void)const",
    "protected: virtual unsigned short __thiscall std::basic_filebuf >::uflow(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(char const *,unsigned int)const",
    "public: void __thiscall std::time_get > >::`default constructor closure'(void)",
    "public: __thiscall std::_Timevec::_Timevec(void *)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(unsigned short,unsigned int)const",
    "protected: virtual int __thiscall std::codecvt_base::do_encoding(void)const",
    "public: __thiscall std::runtime_error::runtime_error(class std::runtime_error const &)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,unsigned short const *,unsigned int)const",
    "public: __thiscall std::basic_ofstream >::basic_ofstream >(class std::basic_ofstream > const &)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::seekp(long,enum std::ios_base::seekdir)",
    "private: int __thiscall std::basic_stringbuf,class std::allocator >::_Mode(int)",
    "class std::complex __cdecl std::cos(class std::complex const &)",
    "public: class std::basic_filebuf > * __thiscall std::basic_ofstream >::rdbuf(void)const",
    "public: int __thiscall std::ios_base::flags(int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,class std::basic_string,class std::allocator > const &)",
    "class std::basic_ostream > & __cdecl std::operator<<,long double>(class std::basic_ostream > &,class std::complex const &)",
    "public: int __thiscall std::codecvt::in(int &,char const *,char const *,char const * &,char *,char *,char * &)const",
    "public: void __thiscall std::ios_base::clear(int,bool)",
    "public: __thiscall std::basic_ifstream >::basic_ifstream >(char const *,int)",
    "const std::numpunct::`vftable'",
    "float __cdecl std::arg(class std::complex const &)",
    "public: class std::reverse_iterator __thiscall std::basic_string,class std::allocator >::rend(void)const",
    "_FNan",
    "public: static bool __cdecl std::_Ctr::_Isnan(float)",
    "bool __cdecl std::operator>=,class std::allocator >(char const *,class std::basic_string,class std::allocator > const &)",
    "public: void __thiscall std::basic_ostringstream,class std::allocator >::`default constructor closure'(void)",
    "public: class std::locale::facet * __thiscall std::locale::facet::_Decref(void)",
    "mbsrtowcs",
    "class std::basic_istream > & __cdecl std::getline(class std::basic_istream > &,class std::basic_string,class std::allocator > &,unsigned short)",
    "public: char const * __thiscall std::_Locinfo::_Getyes(void)const",
    "public: static unsigned int __cdecl std::numeric_limits::round_error(void)",
    "public: static unsigned int __cdecl std::numeric_limits::infinity(void)",
    "public: static unsigned char __cdecl std::numeric_limits::denorm_min(void)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,bool)const",
    "const std::range_error::`vftable'",
    "class std::complex & __cdecl std::operator*=(class std::complex &,class std::complex const &)",
    "public: static unsigned int __cdecl std::numeric_limits::epsilon(void)",
    "public: long __thiscall std::collate::hash(char const *,char const *)const",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned short &)const",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::end(void)",
    "public: static long double __cdecl std::numeric_limits::max(void)",
    "_Rteps",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(char const *,class std::basic_string,class std::allocator > const &)",
    "public: double __thiscall std::_Complex_base::real(void)const",
    "public: void __thiscall std::basic_istringstream,class std::allocator >::`vbase destructor'(void)",
    "public: __thiscall std::locale::id::operator unsigned int(void)",
    "class std::basic_istream > & __cdecl std::getline,class std::allocator >(class std::basic_istream > &,class std::basic_string,class std::allocator > &,unsigned short)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned short const *,unsigned short const *)",
    "public: void __thiscall std::ctype::`default constructor closure'(void)",
    "public: unsigned short const & __thiscall std::basic_string,class std::allocator >::operator[](unsigned int)const",
    "bool __cdecl std::operator!=(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: char & __thiscall std::basic_string,class std::allocator >::operator[](unsigned int)",
    "const std::basic_ostringstream,class std::allocator >::`vftable'",
    "public: __thiscall std::ctype::ctype(short const *,bool,unsigned int)",
    "public: static class std::locale const & __cdecl std::locale::classic(void)",
    "public: static class std::locale::id std::time_put > >::id",
    "_Nan",
    "public: char __thiscall std::ctype::toupper(char)const",
    "public: void __thiscall std::ios_base::exceptions(int)",
    "public: char const * __thiscall std::_Locinfo::_Getfalse(void)const",
    "public: static long double __cdecl std::numeric_limits::quiet_NaN(void)",
    "bool __cdecl std::operator>,class std::allocator >(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "void __cdecl std::_Xlen(void)",
    "protected: void __thiscall std::numpunct::_Init(class std::_Locinfo const &)",
    "protected: void __thiscall std::basic_streambuf >::gbump(int)",
    "public: __thiscall std::_Timevec::_Timevec(class std::_Timevec const &)",
    "public: class std::_Lockit & __thiscall std::_Lockit::operator=(class std::_Lockit const &)",
    "class std::basic_ostream > & __cdecl std::operator<< >(class std::basic_ostream > &,signed char)",
    "public: char const * __thiscall std::_Locinfo::_Gettrue(void)const",
    "class std::complex __cdecl std::operator+(class std::complex const &,float const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(class std::basic_streambuf > &,unsigned short)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,unsigned short const *,unsigned short const *)",
    "public: __thiscall std::logic_error::logic_error(class std::logic_error const &)",
    "const std::time_get > >::`vftable'",
    "public: unsigned short const * __thiscall std::basic_string,class std::allocator >::end(void)const",
    "class std::complex __cdecl std::operator-(class std::complex const &,class std::complex const &)",
    "const std::basic_stringstream,class std::allocator >::`vbtable'{for `std::basic_ostream >'}",
    "public: class std::ostreambuf_iterator > __thiscall std::time_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,struct tm const *,unsigned short const *,unsigned short const *)const",
    "public: static double __cdecl std::_Ctr::cos(double)",
    "public: char * __thiscall std::basic_string,class std::allocator >::erase(char *)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+,class std::allocator >(char,class std::basic_string,class std::allocator > const &)",
    "protected: static char * __cdecl std::num_put > >::_Ffmt(char *,char,int)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::basic_ostream > & (__cdecl*)(class std::basic_ostream > &))",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned long &)const",
    "class std::complex __cdecl std::pow(long double const &,class std::complex const &)",
    "protected: virtual int __thiscall std::strstreambuf::underflow(void)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+,class std::allocator >(unsigned short,class std::basic_string,class std::allocator > const &)",
    "public: static unsigned int __cdecl std::numeric_limits::signaling_NaN(void)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,signed char)",
    "_Hugeval",
    "public: __thiscall std::_Locinfo::_Locinfo(char const *)",
    "protected: virtual unsigned short __thiscall std::ctype::do_tolower(unsigned short)const",
    "protected: virtual int __thiscall std::basic_streambuf >::underflow(void)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned int,unsigned int,class std::allocator const &)",
    "public: void __thiscall std::basic_stringstream,class std::allocator >::`vbase destructor'(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)",
    "public: class std::basic_string,class std::allocator > __thiscall std::collate::transform(unsigned short const *,unsigned short const *)const",
    "public: static unsigned short __cdecl std::numeric_limits::min(void)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(unsigned int)",
    "public: virtual __thiscall std::basic_fstream >::~basic_fstream >(void)",
    "public: __thiscall std::basic_stringstream,class std::allocator >::basic_stringstream,class std::allocator >(class std::basic_stringstream,class std::allocator > const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned short const *)",
    "class std::basic_ostream > std::wclog",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,unsigned char)",
    "class std::basic_ostream > & __cdecl std::operator<< >(class std::basic_ostream > &,unsigned char)",
    "public: static unsigned short * __cdecl std::char_traits::move(unsigned short *,unsigned short const *,unsigned int)",
    "public: __thiscall std::domain_error::domain_error(class std::basic_string,class std::allocator > const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(unsigned short const *,unsigned int,unsigned int)const",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,class std::complex const &)",
    "protected: virtual int __thiscall std::codecvt_base::do_max_length(void)const",
    "bool __cdecl std::operator!=(double const &,class std::complex const &)",
    "public: static bool __cdecl std::_Ctr::_Isinf(float)",
    "mbrlen",
    "public: __thiscall std::ctype::ctype(unsigned int)",
    "public: int __thiscall std::basic_streambuf >::sgetn(unsigned short *,int)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(unsigned short *,int,unsigned short)",
    "public: class std::ios_base & __thiscall std::ios_base::operator=(class std::ios_base const &)",
    "public: void __thiscall std::basic_istringstream,class std::allocator >::str(class std::basic_string,class std::allocator > const &)",
    "public: unsigned short const * __thiscall std::basic_string,class std::allocator >::c_str(void)const",
    "bool __cdecl std::operator!=(class std::basic_string,class std::allocator > const &,char const *)",
    "public: static double __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: bool __thiscall std::basic_ofstream >::is_open(void)const",
    "public: virtual __thiscall std::ctype::~ctype(void)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned short const *)const",
    "public: int __thiscall std::time_get > >::date_order(void)const",
    "public: class std::_Locinfo & __thiscall std::_Locinfo::_Addcats(int,char const *)",
    "bool __cdecl std::operator==,class std::allocator >(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator+=(long double const &)",
    "_Wcrtomb",
    "bool __cdecl std::operator>,class std::allocator >(class std::basic_string,class std::allocator > const &,char const *)",
    "public: static unsigned short const * __cdecl std::char_traits::find(unsigned short const *,unsigned int,unsigned short const &)",
    "const std::basic_fstream >::`vbtable'{for `std::basic_istream >'}",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(short)",
    "private: class std::basic_string,class std::allocator > __thiscall std::money_get > >::_Getmfld(class std::istreambuf_iterator > &,class std::istreambuf_iterator > &,bool,class std::ios_base &)const",
    "public: class std::locale & __thiscall std::locale::_Addfac(class std::locale::facet *,unsigned int,unsigned int)",
    "protected: virtual void __thiscall std::bad_exception::_Doraise(void)const",
    "protected: virtual class std::fpos __thiscall std::strstreambuf::seekpos(class std::fpos,int)",
    "public: static double __cdecl std::_Ctr::_Nanv(double)",
    "public: static unsigned int __cdecl std::collate::_Getcat(void)",
    "public: virtual __thiscall std::ios_base::~ios_base(void)",
    "public: unsigned short __thiscall std::basic_streambuf >::snextc(void)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,signed char const *)",
    "public: class std::locale __thiscall std::ios_base::imbue(class std::locale const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(unsigned short const *,unsigned int,unsigned int)const",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekpos(class std::fpos,int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(unsigned short const *,unsigned int)const",
    "public: static bool __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: static double __cdecl std::_Ctr::ldexp(double,int)",
    "class std::basic_ostream > & __cdecl std::operator<< >(class std::basic_ostream > &,signed char const *)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(unsigned short,unsigned int)const",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,signed char *)",
    "public: void __thiscall std::basic_string,class std::allocator >::reserve(unsigned int)",
    "protected: static short const * __cdecl std::ctype::classic_table(void)",
    "public: __thiscall std::ostrstream::ostrstream(char *,int,int)",
    "public: static long double __cdecl std::numeric_limits::round_error(void)",
    "const std::basic_stringstream,class std::allocator >::`vbtable'{for `std::basic_istream >'}",
    "public: static float __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: __thiscall std::complex::complex(class std::complex const &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::time_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,struct tm const *,char,char)const",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(class std::allocator const &)",
    "protected: virtual void __thiscall std::underflow_error::_Doraise(void)const",
    "bool __cdecl std::operator>=(char const *,class std::basic_string,class std::allocator > const &)",
    "public: char __thiscall std::basic_ios >::narrow(unsigned short,char)const",
    "const std::money_base::`vftable'",
    "public: __thiscall std::complex::complex(float const &,float const &)",
    "public: __thiscall std::bad_exception::bad_exception(class std::bad_exception const &)",
    "public: virtual __thiscall std::strstream::~strstream(void)",
    "public: void __thiscall std::basic_stringstream,class std::allocator >::str(class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::bad_cast::bad_cast(class std::bad_cast const &)",
    "public: __thiscall std::basic_ostream >::basic_ostream >(class std::basic_ostream > const &)",
    "public: static short __cdecl std::numeric_limits::round_error(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned int,char)",
    "private: class std::ostreambuf_iterator > __thiscall std::money_put > >::_Putmfld(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,bool,class std::basic_string,class std::allocator >)const",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,long)const",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,unsigned short &)",
    "protected: char * __thiscall std::basic_streambuf >::pptr(void)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(unsigned short)",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_date(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "protected: char * __thiscall std::basic_streambuf >::epptr(void)const",
    "public: class std::bad_cast & __thiscall std::bad_cast::operator=(class std::bad_cast const &)",
    "public: __thiscall std::overflow_error::overflow_error(class std::overflow_error const &)",
    "struct std::_Smanip __cdecl std::setbase(int)",
    "private: struct std::ios_base::_Iosarray & __thiscall std::ios_base::_Findarr(int)",
    "protected: void __thiscall std::num_get > >::_Init(class std::_Locinfo const &)",
    "long double __cdecl std::_Fabs(class std::complex const &,int *)",
    "bool __cdecl std::operator<(class std::basic_string,class std::allocator > const &,char const *)",
    "public: class std::locale & __thiscall std::locale::operator=(class std::locale const &)",
    "public: __thiscall std::_Locinfo::_Locinfo(int,char const *)",
    "class std::complex __cdecl std::operator+(class std::complex const &,double const &)",
    "bool __cdecl std::operator==(class std::complex const &,long double const &)",
    "public: void __thiscall std::basic_ios >::clear(int,bool)",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_filebuf >::setbuf(unsigned short *,int)",
    "public: static unsigned short * __cdecl std::char_traits::assign(unsigned short *,unsigned int,unsigned short const &)",
    "protected: void __thiscall std::codecvt::_Init(class std::_Locinfo const &)",
    "public: static class std::locale::id std::moneypunct::id",
    "public: class std::basic_ios > & __thiscall std::basic_ios >::operator=(class std::basic_ios > const &)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::put(char)",
    "public: class std::ios_base::Init & __thiscall std::ios_base::Init::operator=(class std::ios_base::Init const &)",
    "struct std::_Smanip __cdecl std::setprecision(int)",
    "bool __cdecl std::operator>=(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::basic_filebuf >::basic_filebuf >(class std::basic_filebuf > const &)",
    "public: class std::reverse_iterator __thiscall std::basic_string,class std::allocator >::rbegin(void)",
    "class std::complex __cdecl std::operator*(class std::complex const &,class std::complex const &)",
    "protected: __thiscall std::basic_ios >::basic_ios >(void)",
    "protected: virtual int __thiscall std::messages::do_open(class std::basic_string,class std::allocator > const &,class std::locale const &)const",
    "class std::basic_string,class std::allocator > __cdecl std::operator+,class std::allocator >(class std::basic_string,class std::allocator > const &,char)",
    "private: static int __cdecl std::time_get > >::_Getint(class std::istreambuf_iterator > &,class std::istreambuf_iterator > &,int,int,int &)",
    "public: __thiscall std::basic_filebuf >::basic_filebuf >(struct _iobuf *)",
    "public: class std::basic_stringbuf,class std::allocator > * __thiscall std::basic_istringstream,class std::allocator >::rdbuf(void)const",
    "public: class std::_Locinfo & __thiscall std::_Locinfo::operator=(class std::_Locinfo const &)",
    "public: __thiscall std::basic_ostream >::basic_ostream >(enum std::_Uninitialized)",
    "public: __thiscall std::basic_stringstream,class std::allocator >::basic_stringstream,class std::allocator >(int)",
    "public: static unsigned short __cdecl std::char_traits::eof(void)",
    "public: void __thiscall std::basic_streambuf >::stossc(void)",
    "public: class std::allocator & __thiscall std::allocator::operator=(class std::allocator const &)",
    "public: static unsigned int __cdecl std::numeric_limits::min(void)",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::erase(unsigned short *)",
    "public: unsigned short __thiscall std::basic_streambuf >::sputc(unsigned short)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,double)const",
    "public: class std::ostreambuf_iterator > __thiscall std::time_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,struct tm const *,char,char)const",
    "public: static unsigned short __cdecl std::numeric_limits::epsilon(void)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,bool)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(unsigned short const *)",
    "private: unsigned char & __thiscall std::basic_string,class std::allocator >::_Refcnt(unsigned short const *)",
    "public: __thiscall std::__non_rtti_object::__non_rtti_object(char const *)",
    "public: bool __thiscall std::locale::operator()(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)const",
    "public: static class std::locale::id std::money_get > >::id",
    "private: static int __cdecl std::num_get > >::_Getifld(char *,class std::istreambuf_iterator > &,class std::istreambuf_iterator > &,int,class std::locale const &)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::epptr(void)const",
    "protected: virtual char __thiscall std::ctype::do_toupper(char)const",
    "public: virtual __thiscall std::codecvt::~codecvt(void)",
    "public: class std::_Winit & __thiscall std::_Winit::operator=(class std::_Winit const &)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,unsigned long)const",
    "const std::basic_stringbuf,class std::allocator >::`vftable'",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(unsigned short const *,unsigned int)const",
    "protected: virtual int __thiscall std::codecvt::do_max_length(void)const",
    "void __cdecl std::_Nomemory(void)",
    "public: __thiscall std::basic_fstream >::basic_fstream >(void)",
    "protected: virtual void __thiscall std::length_error::_Doraise(void)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Mpunct::positive_sign(void)const",
    "double __cdecl std::real(class std::complex const &)",
    "protected: virtual unsigned short __thiscall std::_Mpunct::do_thousands_sep(void)const",
    "protected: virtual void __thiscall std::logic_error::_Doraise(void)const",
    "public: static float __cdecl std::_Ctr::atan2(float,float)",
    "private: static char * __cdecl std::basic_string,class std::allocator >::_Psum(char *,unsigned int)",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_year(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: static bool __cdecl std::numeric_limits::min(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(char,unsigned int)const",
    "class std::basic_istream > & __cdecl std::operator>> >(class std::basic_istream > &,short *)",
    "public: virtual __thiscall std::bad_typeid::~bad_typeid(void)",
    "public: int __thiscall std::ios_base::setf(int,int)",
    "public: virtual __thiscall std::basic_ifstream >::~basic_ifstream >(void)",
    "public: void __thiscall std::codecvt::`default constructor closure'(void)",
    "public: char const * __thiscall std::ctype::narrow(char const *,char const *,char,char *)const",
    "public: static unsigned int const std::basic_string,class std::allocator >::npos",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::basic_ios > & (__cdecl*)(class std::basic_ios > &))",
    "public: virtual __thiscall std::basic_istringstream,class std::allocator >::~basic_istringstream,class std::allocator >(void)",
    "class std::basic_ostream > & __cdecl std::operator<<,class std::allocator >(class std::basic_ostream > &,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::numpunct::numpunct(class std::_Locinfo const &,unsigned int)",
    "public: int __thiscall std::codecvt::out(int &,unsigned short const *,unsigned short const *,unsigned short const * &,char *,char *,char * &)const",
    "class std::complex __cdecl std::operator-(float const &,class std::complex const &)",
    "public: class std::basic_filebuf > * __thiscall std::basic_fstream >::rdbuf(void)const",
    "public: int __thiscall std::basic_istream >::peek(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(void * &)",
    "long double __cdecl std::abs(class std::complex const &)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,double &)const",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,long)const",
    "bool __cdecl std::operator<,class std::allocator >(class std::basic_string,class std::allocator > const &,char const *)",
    "protected: static void __cdecl std::ctype::_Term(void)",
    "public: static short __cdecl std::_Ctr::_Exp(long double *,long double,short)",
    "wctrans",
    "class std::basic_istream > & __cdecl std::operator>> >(class std::basic_istream > &,unsigned char *)",
    "public: virtual __thiscall std::basic_ofstream >::~basic_ofstream >(void)",
    "bool __cdecl std::operator!=,class std::allocator >(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "wctype",
    "public: int __thiscall std::basic_streambuf >::sgetn(char *,int)",
    "protected: virtual int __thiscall std::codecvt::do_encoding(void)const",
    "public: void __thiscall std::basic_istream >::isfx(void)",
    "public: int __thiscall std::basic_streambuf >::sungetc(void)",
    "public: static class std::locale::id std::time_get > >::id",
    "private: static unsigned int __cdecl std::basic_string,class std::allocator >::_Pdif(unsigned short const *,unsigned short const *)",
    "class std::basic_istream > & __cdecl std::getline(class std::basic_istream > &,class std::basic_string,class std::allocator > &)",
    "public: virtual char const * __thiscall std::logic_error::what(void)const",
    "protected: void __thiscall std::basic_streambuf >::setg(unsigned short *,unsigned short *,unsigned short *)",
    "public: static class std::locale::id std::ctype::id",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,unsigned short const *)",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Mpunct::grouping(void)const",
    "public: class std::ostreambuf_iterator > __thiscall std::money_put > >::put(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,class std::basic_string,class std::allocator > const &)const",
    "public: static double __cdecl std::_Ctr::sqrt(double)",
    "bool __cdecl std::operator<,class std::allocator >(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "protected: virtual int __thiscall std::basic_streambuf >::xsgetn(char *,int)",
    "public: static class std::locale::id std::messages::id",
    "bool __cdecl std::operator==,class std::allocator >(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: static float __cdecl std::_Ctr::_Nanv(float)",
    "double const `double __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_R2",
    "public: class std::basic_string,class std::allocator > __thiscall std::numpunct::falsename(void)const",
    "public: static unsigned int __cdecl std::numeric_limits::quiet_NaN(void)",
    "protected: void __thiscall std::basic_streambuf >::_Init(char * *,char * *,int *,char * *,char * *,int *)",
    "public: char * __thiscall std::basic_string,class std::allocator >::begin(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(float &)",
    "public: virtual __thiscall std::basic_ostringstream,class std::allocator >::~basic_ostringstream,class std::allocator >(void)",
    "public: char const * __thiscall std::ctype::scan_is(short,char const *,char const *)const",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(char,class std::basic_string,class std::allocator > const &)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(void const *)",
    "bool __cdecl std::operator==(class std::basic_string,class std::allocator > const &,char const *)",
    "long double const `long double __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_R2",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekoff(long,short,short)",
    "public: int __thiscall std::ios_base::flags(void)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(unsigned short const *,unsigned int,unsigned int)const",
    "_Stof",
    "class std::basic_ostream > & __cdecl std::operator<< >(class std::basic_ostream > &,unsigned short const *)",
    "protected: virtual char __thiscall std::ctype::do_tolower(char)const",
    "protected: __thiscall std::ios_base::ios_base(void)",
    "public: static bool __cdecl std::char_traits::eq(char const &,char const &)",
    "class std::basic_istream > & __cdecl std::operator>> >(class std::basic_istream > &,char &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(bool &)",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_toupper(unsigned short *,unsigned short const *)const",
    "const std::time_put > >::`vftable'",
    "public: char const * __thiscall std::ctype::widen(char const *,char const *,char *)const",
    "protected: virtual int __thiscall std::codecvt::do_length(int &,char const *,char const *,unsigned int)const",
    "protected: virtual int __thiscall std::collate::do_compare(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator=(class std::basic_istream > const &)",
    "public: unsigned short __thiscall std::basic_streambuf >::sputbackc(unsigned short)",
    "public: int __thiscall std::basic_streambuf >::snextc(void)",
    "public: class std::_Ctr & __thiscall std::_Ctr::operator=(class std::_Ctr const &)",
    "public: static signed char __cdecl std::numeric_limits::round_error(void)",
    "public: static char __cdecl std::numeric_limits::infinity(void)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,char const *)",
    "public: char __thiscall std::basic_ios >::widen(char)const",
    "public: static void __cdecl std::char_traits::assign(char &,char const &)",
    "public: static long __cdecl std::numeric_limits::signaling_NaN(void)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,unsigned char *)",
    "_LEps",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::length(void)const",
    "protected: char * __thiscall std::basic_streambuf >::egptr(void)const",
    "float const `float __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_Xh",
    "const std::basic_ios >::`vftable'",
    "public: bool __thiscall std::codecvt_base::always_noconv(void)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(unsigned long)",
    "public: int __thiscall std::basic_istream >::readsome(unsigned short *,int)",
    "bool __cdecl std::operator==(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: virtual __thiscall std::basic_filebuf >::~basic_filebuf >(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,unsigned int,char)",
    "public: static short __cdecl std::_Ctr::_Exp(float *,float,short)",
    "_FDscale",
    "public: static signed char __cdecl std::numeric_limits::denorm_min(void)",
    "struct _iobuf * __cdecl std::__Fiopen(char const *,int)",
    "protected: virtual int __thiscall std::basic_stringbuf,class std::allocator >::underflow(void)",
    "protected: virtual int __thiscall std::basic_filebuf >::overflow(int)",
    "public: virtual __thiscall std::domain_error::~domain_error(void)",
    "bool __cdecl std::operator==(class std::complex const &,float const &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,double)const",
    "public: unsigned short const * __thiscall std::ctype::scan_is(short,unsigned short const *,unsigned short const *)const",
    "public: __thiscall std::basic_fstream >::basic_fstream >(class std::basic_fstream > const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(unsigned short &)",
    "protected: virtual class std::fpos __thiscall std::basic_stringbuf,class std::allocator >::seekpos(class std::fpos,int)",
    "public: static char * __cdecl std::char_traits::assign(char *,unsigned int,char const &)",
    "protected: virtual bool __thiscall std::ctype::do_is(short,unsigned short)const",
    "public: int __thiscall std::basic_istream >::readsome(char *,int)",
    "class std::basic_istream > & __cdecl std::operator>>,double>(class std::basic_istream > &,class std::complex &)",
    "public: __thiscall std::range_error::range_error(class std::range_error const &)",
    "public: __thiscall std::time_get > >::time_get > >(class std::_Locinfo const &,unsigned int)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::read(unsigned short *,int)",
    "public: static float __cdecl std::_Ctr::sqrt(float)",
    "const std::__non_rtti_object::`vftable'",
    "public: class std::basic_stringbuf,class std::allocator > * __thiscall std::basic_stringstream,class std::allocator >::rdbuf(void)const",
    "protected: char * __thiscall std::basic_streambuf >::_Gndec(void)",
    "struct std::_Smanip __cdecl std::setiosflags(int)",
    "public: unsigned short __thiscall std::_Mpunct::decimal_point(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,unsigned short const *,unsigned int)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,char const *)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(double &)",
    "class std::complex __cdecl std::operator*(long double const &,class std::complex const &)",
    "const std::basic_streambuf >::`vftable'",
    "protected: void __thiscall std::basic_streambuf >::setg(char *,char *,char *)",
    "public: void __thiscall std::basic_ios >::setstate(short)",
    "bool __cdecl std::operator>,class std::allocator >(char const *,class std::basic_string,class std::allocator > const &)",
    "protected: void __thiscall std::money_put > >::_Init(class std::_Locinfo const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,bool)const",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned short &)const",
    "public: virtual __thiscall std::__non_rtti_object::~__non_rtti_object(void)",
    "long double const `class std::complex __cdecl std::log(class std::complex const &)'::`6'::_Cl",
    "double const `class std::complex __cdecl std::log(class std::complex const &)'::`6'::_Cl",
    "public: static double __cdecl std::numeric_limits::round_error(void)",
    "public: static char __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: virtual __thiscall std::basic_stringbuf,class std::allocator >::~basic_stringbuf,class std::allocator >(void)",
    "const std::_Mpunct::`vftable'",
    "public: bool __thiscall std::locale::operator!=(class std::locale const &)const",
    "public: class std::locale::id & __thiscall std::locale::id::operator=(class std::locale::id const &)",
    "class std::basic_istream > & __cdecl std::ws(class std::basic_istream > &)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,float &)const",
    "public: void __thiscall std::messages_base::`default constructor closure'(void)",
    "public: __thiscall std::basic_iostream >::basic_iostream >(class std::basic_iostream > const &)",
    "wctob",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(bool)",
    "bool __cdecl std::operator<=,class std::allocator >(char const *,class std::basic_string,class std::allocator > const &)",
    "class std::complex __cdecl std::polar(double const &,double const &)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::numpunct::do_grouping(void)const",
    "protected: virtual int __thiscall std::basic_streambuf >::uflow(void)",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_stringstream,class std::allocator >::str(void)const",
    "public: static unsigned short __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "public: virtual __thiscall std::numpunct::~numpunct(void)",
    "public: __thiscall std::_Complex_base::_Complex_base(double const &,double const &)",
    "const std::basic_istringstream,class std::allocator >::`vbtable'",
    "class std::basic_string,class std::allocator > __cdecl std::operator+,class std::allocator >(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::locale::~locale(void)",
    "_Stod",
    "public: class std::basic_string,class std::allocator > __thiscall std::collate::transform(char const *,char const *)const",
    "class std::complex __cdecl std::operator-(class std::complex const &)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,char const *,unsigned int)const",
    "public: static unsigned char __cdecl std::numeric_limits::epsilon(void)",
    "protected: virtual int __thiscall std::basic_streambuf >::xsgetn(unsigned short *,int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(char const *)",
    "_FCosh",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Iput(class std::ostreambuf_iterator >,class std::ios_base &,char,char *,unsigned int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,char const *)",
    "public: unsigned short __thiscall std::_Mpunct::thousands_sep(void)const",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(char const *,unsigned int,class std::allocator const &)",
    "public: bool __thiscall std::ctype::is(short,unsigned short)const",
    "private: void __thiscall std::_Mpunct::_Makpat(struct std::money_base::pattern &,char,char,char)",
    "bool __cdecl std::operator>=(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "protected: void __thiscall std::basic_streambuf >::setp(unsigned short *,unsigned short *)",
    "char const `private: static char const * __cdecl std::basic_string,class std::allocator >::_Nullstr(void)'::`2'::_C",
    "class std::basic_istream > & __cdecl std::getline,class std::allocator >(class std::basic_istream > &,class std::basic_string,class std::allocator > &)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Fput(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,char const *,unsigned int,unsigned int)",
    "public: long double __thiscall std::_Complex_base::imag(long double const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)",
    "public: int __thiscall std::ios_base::width(int)",
    "public: static bool __cdecl std::char_traits::lt(char const &,char const &)",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::insert(unsigned short *,unsigned short)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(unsigned short)",
    "public: int __thiscall std::basic_streambuf >::in_avail(void)",
    "_FExp",
    "public: __thiscall std::underflow_error::underflow_error(class std::underflow_error const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(unsigned short const *,unsigned int)const",
    "public: virtual __thiscall std::messages::~messages(void)",
    "protected: virtual int __thiscall std::basic_streambuf >::sync(void)",
    "public: class std::reverse_iterator __thiscall std::basic_string,class std::allocator >::rbegin(void)const",
    "_Snan",
    "private: static short const * const std::ctype::_Cltab",
    "public: __thiscall std::locale::locale(enum std::_Uninitialized)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::unget(void)",
    "public: __thiscall std::ctype::ctype(class std::_Locinfo const &,unsigned int)",
    "public: static float __cdecl std::numeric_limits::infinity(void)",
    "protected: virtual class std::fpos __thiscall std::strstreambuf::seekoff(long,enum std::ios_base::seekdir,int)",
    "public: void __thiscall std::basic_string,class std::allocator >::insert(unsigned short *,unsigned short const *,unsigned short const *)",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_narrow(unsigned short const *,unsigned short const *,char,char *)const",
    "public: char __thiscall std::numpunct::decimal_point(void)const",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,void * &)const",
    "public: class std::locale __thiscall std::basic_ios >::imbue(class std::locale const &)",
    "class std::basic_ostream > & __cdecl std::operator<< >(class std::basic_ostream > &,unsigned short)",
    "public: bool __thiscall std::basic_istream >::ipfx(bool)",
    "public: static unsigned int __cdecl std::money_get > >::_Getcat(void)",
    "public: class std::ios_base & __thiscall std::ios_base::copyfmt(class std::ios_base const &)",
    "bool __cdecl std::operator!=(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: static long double __cdecl std::_Ctr::sin(long double)",
    "public: void * & __thiscall std::ios_base::pword(int)",
    "public: void __thiscall std::basic_ofstream >::`vbase destructor'(void)",
    "public: static unsigned int __cdecl std::numeric_limits::denorm_min(void)",
    "public: char const * __thiscall std::ctype::is(char const *,char const *,short *)const",
    "public: virtual __thiscall std::time_put > >::~time_put > >(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(char,unsigned int)const",
    "public: unsigned short __thiscall std::basic_streambuf >::sungetc(void)",
    "public: void __thiscall std::basic_stringstream,class std::allocator >::`default constructor closure'(void)",
    "public: class std::basic_filebuf > * __thiscall std::basic_filebuf >::open(char const *,short)",
    "const std::messages_base::`vftable'",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,char &)",
    "protected: virtual int __thiscall std::basic_streambuf >::showmanyc(void)",
    "public: void __thiscall std::basic_ifstream >::open(char const *,short)",
    "public: char __thiscall std::numpunct::thousands_sep(void)const",
    "const std::basic_iostream >::`vbtable'{for `std::basic_istream >'}",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_istringstream,class std::allocator >::str(void)const",
    "private: static int __cdecl std::num_get > >::_Getffld(char *,class std::istreambuf_iterator > &,class std::istreambuf_iterator > &,class std::locale const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(unsigned short *,int,unsigned short)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned short)",
    "class std::complex __cdecl std::sqrt(class std::complex const &)",
    "class std::complex & __cdecl std::operator-=(class std::complex &,class std::complex const &)",
    "private: static class std::locale::_Locimp * std::locale::_Locimp::_Clocptr",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(class std::basic_string,class std::allocator > const &)",
    "public: int __thiscall std::ios_base::width(void)const",
    "protected: virtual unsigned short __thiscall std::numpunct::do_thousands_sep(void)const",
    "public: unsigned short const * __thiscall std::ctype::scan_not(short,unsigned short const *,unsigned short const *)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(char const *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,unsigned int,unsigned short)",
    "protected: virtual char __thiscall std::_Mpunct::do_thousands_sep(void)const",
    "public: char const * __thiscall std::_Locinfo::_Getdays(void)const",
    "public: static short __cdecl std::numeric_limits::signaling_NaN(void)",
    "protected: void __thiscall std::strstreambuf::_Init(int,char *,char *,int)",
    "bool __cdecl std::operator!=(class std::complex const &,float const &)",
    "public: static int __cdecl std::numeric_limits::round_error(void)",
    "public: char __thiscall std::_Mpunct::decimal_point(void)const",
    "public: static class std::locale __cdecl std::locale::empty(void)",
    "_Strcoll",
    "bool __cdecl std::operator>=(class std::basic_string,class std::allocator > const &,char const *)",
    "public: __thiscall std::_Winit::~_Winit(void)",
    "bool __cdecl std::operator>(class std::basic_string,class std::allocator > const &,char const *)",
    "double const `double __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_Xl",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(char const *,unsigned int,unsigned int)const",
    "public: class std::complex & __thiscall std::complex::operator=(class std::complex const &)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+,class std::allocator >(char const *,class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_stringbuf,class std::allocator > * __thiscall std::basic_ostringstream,class std::allocator >::rdbuf(void)const",
    "class std::basic_ostream > & __cdecl std::ends(class std::basic_ostream > &)",
    "public: __thiscall std::money_get > >::money_get > >(unsigned int)",
    "public: char __thiscall std::_Mpunct::thousands_sep(void)const",
    "class std::complex __cdecl std::operator/(class std::complex const &,double const &)",
    "public: char __thiscall std::ctype::tolower(char)const",
    "const std::basic_istringstream,class std::allocator >::`vftable'",
    "protected: virtual unsigned short __thiscall std::ctype::do_toupper(unsigned short)const",
    "public: void __thiscall std::basic_string,class std::allocator >::insert(char *,unsigned int,char)",
    "public: __thiscall std::length_error::length_error(class std::basic_string,class std::allocator > const &)",
    "protected: void __thiscall std::basic_streambuf >::setp(char *,char *)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "_Inf",
    "btowc",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,bool &)const",
    "public: bool __thiscall std::ios_base::good(void)const",
    "private: void __thiscall std::basic_string,class std::allocator >::_Freeze(void)",
    "public: static float __cdecl std::_Ctr::cos(float)",
    "protected: virtual char const * __thiscall std::ctype::do_tolower(char *,char const *)const",
    "void __cdecl std::_Xran(void)",
    "protected: void __thiscall std::messages::_Init(class std::_Locinfo const &)",
    "public: static long __cdecl std::numeric_limits::round_error(void)",
    "public: static double __cdecl std::_Ctr::_Infv(double)",
    "public: __thiscall std::bad_alloc::bad_alloc(char const *)",
    "protected: virtual unsigned short __thiscall std::basic_filebuf >::overflow(unsigned short)",
    "public: __thiscall std::length_error::length_error(class std::length_error const &)",
    "public: static short __cdecl std::numeric_limits::epsilon(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::ios_base & (__cdecl*)(class std::ios_base &))",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::ignore(int,unsigned short)",
    "public: static unsigned long __cdecl std::numeric_limits::epsilon(void)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::collate::do_transform(unsigned short const *,unsigned short const *)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(char const *,unsigned int)",
    "class std::complex __cdecl std::polar(float const &,float const &)",
    "bool __cdecl std::operator>,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "protected: virtual char const * __thiscall std::ctype::do_toupper(char *,char const *)const",
    "protected: virtual struct std::money_base::pattern __thiscall std::_Mpunct::do_pos_format(void)const",
    "protected: virtual unsigned short __thiscall std::basic_stringbuf,class std::allocator >::pbackfail(unsigned short)",
    "public: __thiscall std::basic_iostream >::basic_iostream >(class std::basic_streambuf > *)",
    "public: static double __cdecl std::numeric_limits::min(void)",
    "class std::complex __cdecl std::operator-(double const &,class std::complex const &)",
    "protected: virtual unsigned short __thiscall std::basic_stringbuf,class std::allocator >::underflow(void)",
    "public: float __thiscall std::_Complex_base::real(float const &)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,long double)const",
    "const std::basic_stringstream,class std::allocator >::`vftable'",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(char const *,char const *)",
    "public: unsigned short __thiscall std::basic_ios >::fill(void)const",
    "public: static double __cdecl std::numeric_limits::max(void)",
    "private: void __thiscall std::basic_string,class std::allocator >::_Eos(unsigned int)",
    "_Cosh",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::begin(void)",
    "bool __cdecl std::uncaught_exception(void)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::put(unsigned short)",
    "public: class std::bad_exception & __thiscall std::bad_exception::operator=(class std::bad_exception const &)",
    "public: class std::__non_rtti_object & __thiscall std::__non_rtti_object::operator=(class std::__non_rtti_object const &)",
    "public: void __thiscall std::basic_fstream >::open(char const *,short)",
    "public: __thiscall std::basic_istringstream,class std::allocator >::basic_istringstream,class std::allocator >(class std::basic_string,class std::allocator > const &,int)",
    "public: class std::basic_string,class std::allocator > __thiscall std::numpunct::grouping(void)const",
    "public: static float __cdecl std::_Ctr::log(float)",
    "public: static int __cdecl std::numeric_limits::min(void)",
    "public: virtual __thiscall std::money_base::~money_base(void)",
    "class std::basic_istream > std::cin",
    "_Getctype",
    "const std::collate::`vftable'",
    "protected: virtual int __thiscall std::basic_filebuf >::sync(void)",
    "public: virtual __thiscall std::money_put > >::~money_put > >(void)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned int,char,class std::allocator const &)",
    "public: bool __thiscall std::ios_base::bad(void)const",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator+=(float const &)",
    "public: class std::length_error & __thiscall std::length_error::operator=(class std::length_error const &)",
    "protected: void __thiscall std::time_get > >::_Init(class std::_Locinfo const &)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::gptr(void)const",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::pbackfail(unsigned short)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+,class std::allocator >(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "class std::complex __cdecl std::operator-(class std::complex const &,double const &)",
    "protected: char * __thiscall std::basic_streambuf >::gptr(void)const",
    "public: __thiscall std::locale::locale(char const *,int)",
    "public: virtual char const * __thiscall std::runtime_error::what(void)const",
    "class std::complex __cdecl std::pow(class std::complex const &,int)",
    "protected: void __thiscall std::time_put > >::_Init(class std::_Locinfo const &)",
    "public: static double __cdecl std::numeric_limits::denorm_min(void)",
    "public: static bool __cdecl std::_Ctr::_Isnan(long double)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,short const *)",
    "public: void __thiscall std::num_get > >::`default constructor closure'(void)",
    "protected: virtual int __thiscall std::time_get > >::do_date_order(void)const",
    "class std::complex __cdecl std::operator/(float const &,class std::complex const &)",
    "public: static long double __cdecl std::numeric_limits::min(void)",
    "public: char const * __thiscall std::ctype::scan_not(short,char const *,char const *)const",
    "public: static long double __cdecl std::_Ctr::_Nanv(long double)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(char const *)",
    "protected: virtual int __thiscall std::basic_stringbuf,class std::allocator >::pbackfail(int)",
    "protected: virtual int __thiscall std::basic_streambuf >::overflow(int)",
    "class std::complex __cdecl std::operator+(class std::complex const &,long double const &)",
    "private: static void __cdecl std::locale::_Tidy(void)",
    "public: static float __cdecl std::_Ctr::_Sinh(float,float)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(class std::basic_string,class std::allocator > const &)",
    "bool __cdecl std::operator<=,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: __thiscall std::locale::locale(class std::locale const &,char const *,int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(unsigned short,unsigned int)const",
    "public: int __thiscall std::basic_istream >::gcount(void)const",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::uflow(void)",
    "public: static float __cdecl std::numeric_limits::max(void)",
    "protected: char * __thiscall std::basic_streambuf >::_Gninc(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(class std::basic_streambuf > &)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,void * &)const",
    "protected: virtual int __thiscall std::codecvt::do_in(int &,char const *,char const *,char const * &,char *,char *,char * &)const",
    "_LNan",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_monthname(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: static double __cdecl std::numeric_limits::epsilon(void)",
    "bool __cdecl std::operator==,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: __thiscall std::_Complex_base::_Complex_base(long double const &,long double const &)",
    "public: static unsigned short __cdecl std::char_traits::not_eof(unsigned short const &)",
    "public: static long double __cdecl std::_Ctr::sqrt(long double)",
    "private: __thiscall std::locale::locale(class std::locale::_Locimp *)",
    "protected: __thiscall std::locale::facet::facet(unsigned int)",
    "public: void __thiscall std::_Timevec::`default constructor closure'(void)",
    "protected: virtual int __thiscall std::basic_filebuf >::pbackfail(int)",
    "public: char const & __thiscall std::basic_string,class std::allocator >::operator[](unsigned int)const",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_weekday(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: char __thiscall std::basic_ios >::narrow(char,char)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,unsigned short const *,unsigned int)",
    "protected: virtual bool __thiscall std::codecvt_base::do_always_noconv(void)const",
    "public: static short __cdecl std::numeric_limits::infinity(void)",
    "public: virtual __thiscall std::locale::facet::~facet(void)",
    "const std::money_put > >::`vftable'",
    "protected: void __thiscall std::basic_streambuf >::pbump(int)",
    "protected: void __thiscall std::ios_base::_Addstd(void)",
    "public: double __thiscall std::_Complex_base::imag(double const &)",
    "public: void __thiscall std::basic_fstream >::`vbase destructor'(void)",
    "public: static unsigned short __cdecl std::numeric_limits::round_error(void)",
    "public: virtual __thiscall std::range_error::~range_error(void)",
    "class std::complex __cdecl std::polar(float const &)",
    "private: void __thiscall std::basic_string,class std::allocator >::_Split(void)",
    "public: class std::reverse_iterator __thiscall std::basic_string,class std::allocator >::rend(void)",
    "public: static double __cdecl std::numeric_limits::infinity(void)",
    "class std::complex __cdecl std::operator/(class std::complex const &,class std::complex const &)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator+=(double const &)",
    "public: __thiscall std::basic_istream >::basic_istream >(class std::basic_istream > const &)",
    "class std::basic_istream > & __cdecl std::operator>>,class std::allocator >(class std::basic_istream > &,class std::basic_string,class std::allocator > &)",
    "public: char * __thiscall std::basic_string,class std::allocator >::insert(char *,char)",
    "public: class std::basic_ostringstream,class std::allocator > & __thiscall std::basic_ostringstream,class std::allocator >::operator=(class std::basic_ostringstream,class std::allocator > const &)",
    "public: static unsigned long __cdecl std::numeric_limits::denorm_min(void)",
    "public: class std::basic_string,class std::allocator > __thiscall std::messages::get(int,int,int,class std::basic_string,class std::allocator > const &)const",
    "class std::complex __cdecl std::operator+(float const &,class std::complex const &)",
    "public: class std::basic_stringbuf,class std::allocator > & __thiscall std::basic_stringbuf,class std::allocator >::operator=(class std::basic_stringbuf,class std::allocator > const &)",
    "_Strxfrm",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,unsigned int,unsigned short)",
    "public: static char * __cdecl std::char_traits::copy(char *,char const *,unsigned int)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::basic_istream > & (__cdecl*)(class std::basic_istream > &))",
    "public: unsigned short __thiscall std::basic_istream >::peek(void)",
    "public: virtual __thiscall std::overflow_error::~overflow_error(void)",
    "public: class std::fpos __thiscall std::basic_istream >::tellg(void)",
    "public: virtual __thiscall std::time_get > >::~time_get > >(void)",
    "public: static int __cdecl std::char_traits::compare(char const *,char const *,unsigned int)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,signed char &)",
    "protected: void __thiscall std::basic_streambuf >::_Init(void)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Put(class std::ostreambuf_iterator >,char const *,unsigned int)",
    "public: void __thiscall std::basic_ofstream >::close(void)",
    "public: struct std::money_base::pattern __thiscall std::_Mpunct::neg_format(void)const",
    "public: class std::ostreambuf_iterator > __thiscall std::money_put > >::put(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,long double)const",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,long &)const",
    "long double __cdecl std::arg(class std::complex const &)",
    "public: __thiscall std::basic_ostream >::basic_ostream >(class std::basic_streambuf > *,bool,bool)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,char)",
    "public: void __thiscall std::basic_fstream >::open(char const *,int)",
    "bool __cdecl std::operator!=(class std::complex const &,class std::complex const &)",
    "public: void __thiscall std::strstreambuf::freeze(bool)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(char const *,unsigned int)const",
    "class std::complex __cdecl std::operator+(double const &,class std::complex const &)",
    "const std::bad_typeid::`vftable'",
    "long double __cdecl std::imag(class std::complex const &)",
    "class std::complex __cdecl std::operator*(float const &,class std::complex const &)",
    "public: __thiscall std::bad_alloc::bad_alloc(void)",
    "public: class std::runtime_error & __thiscall std::runtime_error::operator=(class std::runtime_error const &)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned short const *,class std::allocator const &)",
    "public: __thiscall std::basic_ifstream >::basic_ifstream >(class std::basic_ifstream > const &)",
    "public: int __thiscall std::basic_streambuf >::sgetc(void)",
    "const std::basic_iostream >::`vftable'",
    "public: __thiscall std::overflow_error::overflow_error(class std::basic_string,class std::allocator > const &)",
    "class std::complex __cdecl std::operator-(class std::complex const &,float const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::copy(char *,unsigned int,unsigned int)const",
    "public: static short __cdecl std::numeric_limits::denorm_min(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned int,unsigned short)",
    "public: virtual __thiscall std::_Mpunct::~_Mpunct(void)",
    "public: int __thiscall std::ios_base::exceptions(void)const",
    "public: __thiscall std::messages_base::messages_base(unsigned int)",
    "public: static float __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: void __thiscall std::basic_ofstream >::open(char const *,int)",
    "public: static long __cdecl std::numeric_limits::epsilon(void)",
    "const std::domain_error::`vftable'",
    "public: __thiscall std::_Locinfo::_Locinfo(class std::_Locinfo const &)",
    "protected: virtual void __thiscall std::overflow_error::_Doraise(void)const",
    "public: unsigned short __thiscall std::numpunct::decimal_point(void)const",
    "public: static unsigned char __cdecl std::numeric_limits::round_error(void)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,unsigned char const *)",
    "const std::logic_error::`vftable'",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,unsigned int,char)",
    "class std::complex __cdecl std::pow(class std::complex const &,double const &)",
    "public: __thiscall std::basic_streambuf >::basic_streambuf >(class std::basic_streambuf > const &)",
    "public: __thiscall std::numpunct::numpunct(unsigned int)",
    "protected: virtual void __thiscall std::runtime_error::_Doraise(void)const",
    "const std::time_base::`vftable'",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,char *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,char const *,unsigned int)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,char)",
    "public: unsigned short & __thiscall std::basic_string,class std::allocator >::operator[](unsigned int)",
    "public: static long __cdecl std::numeric_limits::denorm_min(void)",
    "public: struct std::_Num_int_base & __thiscall std::_Num_int_base::operator=(struct std::_Num_int_base const &)",
    "public: static long double __cdecl std::numeric_limits::denorm_min(void)",
    "public: char __thiscall std::ctype::narrow(char,char)const",
    "public: static long double __cdecl std::numeric_limits::infinity(void)",
    "public: static bool __cdecl std::char_traits::eq_int_type(int const &,int const &)",
    "_FSnan",
    "_Mbrtowc",
    "public: static char * __cdecl std::char_traits::move(char *,char const *,unsigned int)",
    "class std::complex __cdecl std::operator+(long double const &,class std::complex const &)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,bool)const",
    "public: class std::_Timevec __thiscall std::_Locinfo::_Gettnames(void)const",
    "double __cdecl std::norm(class std::complex const &)",
    "protected: virtual void __thiscall std::basic_streambuf >::imbue(class std::locale const &)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Putc(class std::ostreambuf_iterator >,char const *,unsigned int)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::_Gndec(void)",
    "public: void __thiscall std::basic_filebuf >::`default constructor closure'(void)",
    "public: bool __thiscall std::locale::operator==(class std::locale const &)const",
    "public: char __thiscall std::basic_ios >::fill(char)",
    "_FXbig",
    "public: int __thiscall std::basic_istream >::sync(void)",
    "protected: static char * __cdecl std::num_put > >::_Ifmt(char *,char,int)",
    "const std::basic_ifstream >::`vftable'",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(char const *,unsigned int,unsigned int)const",
    "public: class std::locale __thiscall std::basic_streambuf >::pubimbue(class std::locale const &)",
    "public: static long __cdecl std::numeric_limits::quiet_NaN(void)",
    "protected: virtual int __thiscall std::codecvt::do_out(int &,unsigned short const *,unsigned short const *,unsigned short const * &,char *,char *,char * &)const",
    "public: static char const * __cdecl std::char_traits::find(char const *,unsigned int,char const &)",
    "public: bool __thiscall std::basic_ostream >::opfx(void)",
    "public: class std::basic_streambuf > * __thiscall std::basic_ios >::rdbuf(void)const",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::money_put > >::do_put(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,long double)const",
    "public: class std::basic_filebuf > * __thiscall std::basic_filebuf >::open(char const *,int)",
    "private: static class std::locale::_Locimp * std::locale::_Locimp::_Global",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::basic_streambuf > *)",
    "public: __thiscall std::money_put > >::money_put > >(class std::_Locinfo const &,unsigned int)",
    "const std::bad_exception::`vftable'",
    "public: void __thiscall std::basic_ostringstream,class std::allocator >::str(class std::basic_string,class std::allocator > const &)",
    "protected: void __thiscall std::basic_stringbuf,class std::allocator >::_Tidy(void)",
    "private: static int std::locale::id::_Id_cnt",
    "protected: void __thiscall std::basic_stringbuf,class std::allocator >::_Init(char const *,unsigned int,int)",
    "public: static unsigned short __cdecl std::char_traits::to_char_type(unsigned short const &)",
    "public: int __thiscall std::ios_base::precision(void)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::write(unsigned short const *,int)",
    "private: static unsigned short const * __cdecl std::basic_string,class std::allocator >::_Nullstr(void)",
    "protected: virtual char __thiscall std::ctype::do_narrow(unsigned short,char)const",
    "const std::codecvt::`vftable'",
    "public: static bool __cdecl std::char_traits::eq(unsigned short const &,unsigned short const &)",
    "public: __thiscall std::basic_ios >::basic_ios >(class std::basic_ios > const &)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::money_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,bool,class std::ios_base &,int &,long double &)const",
    "const std::overflow_error::`vftable'",
    "public: __thiscall std::_Lockit::_Lockit(void)",
    "public: static double __cdecl std::_Ctr::_Sinh(double,double)",
    "bool __cdecl std::operator>=(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: static bool __cdecl std::_Ctr::_Isinf(long double)",
    "_LSinh",
    "public: char & __thiscall std::basic_string,class std::allocator >::at(unsigned int)",
    "protected: short const * __thiscall std::ctype::table(void)const",
    "public: virtual __thiscall std::underflow_error::~underflow_error(void)",
    "public: __thiscall std::range_error::range_error(class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(unsigned short)",
    "public: __thiscall std::basic_stringstream,class std::allocator >::basic_stringstream,class std::allocator >(class std::basic_string,class std::allocator > const &,int)",
    "public: virtual __thiscall std::codecvt_base::~codecvt_base(void)",
    "bool __cdecl std::operator>,class std::allocator >(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: static signed char __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: struct std::char_traits & __thiscall std::char_traits::operator=(struct std::char_traits const &)",
    "protected: virtual class std::fpos __thiscall std::basic_streambuf >::seekoff(long,enum std::ios_base::seekdir,int)",
    "public: static int __cdecl std::ios_base::xalloc(void)",
    "public: static unsigned int __cdecl std::_Mpunct::_Getcat(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,char const *,char const *)",
    "public: void __thiscall std::collate::`default constructor closure'(void)",
    "public: static unsigned int __cdecl std::codecvt::_Getcat(void)",
    "public: void __thiscall std::ios_base::setstate(short)",
    "public: static long double __cdecl std::_Ctr::ldexp(long double,int)",
    "public: virtual __thiscall std::collate::~collate(void)",
    "struct std::_Smanip __cdecl std::setw(int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned short const *,unsigned int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "public: class std::basic_filebuf > * __thiscall std::basic_filebuf >::close(void)",
    "public: void * __thiscall std::_Timevec::_Getptr(void)const",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::collate::do_transform(char const *,char const *)const",
    "public: static char __cdecl std::numeric_limits::min(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,unsigned short const *,unsigned int)",
    "public: class std::complex & __thiscall std::complex::operator=(double const &)",
    "class std::basic_ostream > std::cout",
    "public: static unsigned int __cdecl std::numpunct::_Getcat(void)",
    "public: static bool __cdecl std::ios_base::sync_with_stdio(bool)",
    "public: int __thiscall std::codecvt_base::encoding(void)const",
    "public: static unsigned short __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: static int __cdecl std::char_traits::eof(void)",
    "const std::basic_iostream >::`vbtable'{for `std::basic_ostream >'}",
    "protected: virtual class std::fpos __thiscall std::basic_filebuf >::seekoff(long,enum std::ios_base::seekdir,int)",
    "public: int __thiscall std::ios_base::setf(int)",
    "public: void __thiscall std::money_put > >::`default constructor closure'(void)",
    "bool __cdecl std::operator<,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(char const *,unsigned int)const",
    "protected: unsigned short * __thiscall std::basic_streambuf >::_Pninc(void)",
    "public: bool __thiscall std::basic_filebuf >::is_open(void)const",
    "public: virtual __thiscall std::ostrstream::~ostrstream(void)",
    "public: __thiscall std::basic_ostringstream,class std::allocator >::basic_ostringstream,class std::allocator >(class std::basic_ostringstream,class std::allocator > const &)",
    "public: void __thiscall std::money_get > >::`default constructor closure'(void)",
    "public: class std::basic_streambuf > & __thiscall std::basic_streambuf >::operator=(class std::basic_streambuf > const &)",
    "public: class std::basic_iostream > & __thiscall std::basic_iostream >::operator=(class std::basic_iostream > const &)",
    "public: static int __cdecl std::numeric_limits::max(void)",
    "public: __thiscall std::underflow_error::underflow_error(class std::basic_string,class std::allocator > const &)",
    "_FDenorm",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,double &)const",
    "public: __thiscall std::ios_base::operator void *(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(class std::basic_string,class std::allocator > const &)",
    "public: static double __cdecl std::_Ctr::log(double)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::seekg(class std::fpos)",
    "_LInf",
    "public: class std::locale __thiscall std::ios_base::getloc(void)const",
    "public: char * __thiscall std::basic_string,class std::allocator >::end(void)",
    "class std::complex __cdecl std::operator+(class std::complex const &,class std::complex const &)",
    "class std::complex __cdecl std::sin(class std::complex const &)",
    "protected: virtual int __thiscall std::codecvt::do_out(int &,char const *,char const *,char const * &,char *,char *,char * &)const",
    "public: class std::ostreambuf_iterator > __thiscall std::money_put > >::put(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,class std::basic_string,class std::allocator > const &)const",
    "public: static char __cdecl std::numeric_limits::denorm_min(void)",
    "public: long double __thiscall std::_Complex_base::real(void)const",
    "class std::basic_istream > & __cdecl std::operator>> >(class std::basic_istream > &,unsigned short &)",
    "public: class std::locale::facet const * __thiscall std::locale::_Getfacet(unsigned int,bool)const",
    "public: struct _Collvec __thiscall std::_Locinfo::_Getcoll(void)const",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::numpunct::do_truename(void)const",
    "const std::ctype::`vftable'",
    "bool __cdecl std::operator>(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "private: unsigned char & __thiscall std::basic_string,class std::allocator >::_Refcnt(char const *)",
    "_FDnorm",
    "public: static char __cdecl std::char_traits::to_char_type(int const &)",
    "public: __thiscall std::ctype_base::ctype_base(unsigned int)",
    "_Eps",
    "public: virtual __thiscall std::bad_alloc::~bad_alloc(void)",
    "_FRteps",
    "public: static class std::locale::id std::numpunct::id",
    "public: class std::range_error & __thiscall std::range_error::operator=(class std::range_error const &)",
    "public: static class std::locale::id std::codecvt::id",
    "const std::basic_ostream >::`vbtable'",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,void const *)const",
    "public: __thiscall std::money_get > >::money_get > >(class std::_Locinfo const &,unsigned int)",
    "public: static signed char __cdecl std::numeric_limits::epsilon(void)",
    "public: virtual __thiscall std::length_error::~length_error(void)",
    "public: void __thiscall std::messages::close(int)const",
    "bool __cdecl std::operator<(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::money_put > >::do_put(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,class std::basic_string,class std::allocator > const &)const",
    "public: void __thiscall std::basic_ifstream >::`vbase destructor'(void)",
    "public: char const * __thiscall std::ctype::toupper(char *,char const *)const",
    "public: __thiscall std::time_put > >::time_put > >(class std::_Locinfo const &,unsigned int)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,double)const",
    "class std::basic_ostream > & __cdecl std::operator<< >(class std::basic_ostream > &,short const *)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned int,unsigned short,class std::allocator const &)",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_stringbuf,class std::allocator >::str(void)const",
    "public: static long double __cdecl std::_Ctr::_Cosh(long double,long double)",
    "class std::complex __cdecl std::operator-(long double const &,class std::complex const &)",
    "public: class std::basic_fstream > & __thiscall std::basic_fstream >::operator=(class std::basic_fstream > const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::read(char *,int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::copy(unsigned short *,unsigned int,unsigned int)const",
    "const std::messages::`vftable'",
    "public: class std::basic_filebuf > & __thiscall std::basic_filebuf >::operator=(class std::basic_filebuf > const &)",
    "towctrans",
    "protected: virtual char __thiscall std::numpunct::do_decimal_point(void)const",
    "public: static double __cdecl std::_Ctr::pow(double,double)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::_Mpunct::do_positive_sign(void)const",
    "bool __cdecl std::operator==(class std::complex const &,class std::complex const &)",
    "public: __thiscall std::locale::locale(class std::locale const &,class std::locale const &,int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,char const *)",
    "bool __cdecl std::operator<=(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: static char __cdecl std::numeric_limits::round_error(void)",
    "unsigned short const `private: static unsigned short const * __cdecl std::basic_string,class std::allocator >::_Nullstr(void)'::`2'::_C",
    "public: __thiscall std::bad_exception::bad_exception(char const *)",
    "bool __cdecl std::operator!=(char const *,class std::basic_string,class std::allocator > const &)",
    "wcrtomb",
    "protected: virtual void __thiscall std::bad_typeid::_Doraise(void)const",
    "public: __thiscall std::basic_istringstream,class std::allocator >::basic_istringstream,class std::allocator >(class std::basic_istringstream,class std::allocator > const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,unsigned int,unsigned short)",
    "public: static unsigned int __cdecl std::locale::facet::_Getcat(void)",
    "public: void __thiscall std::complex::`default constructor closure'(void)",
    "public: void __thiscall std::basic_ostream >::`vbase destructor'(void)",
    "public: void __thiscall std::basic_ofstream >::open(char const *,short)",
    "class std::basic_istream > & __cdecl std::getline,class std::allocator >(class std::basic_istream > &,class std::basic_string,class std::allocator > &,char)",
    "public: void __thiscall std::ios_base::setstate(int,bool)",
    "const std::bad_alloc::`vftable'",
    "public: static short __cdecl std::numeric_limits::max(void)",
    "public: int __thiscall std::basic_streambuf >::sputn(char const *,int)",
    "public: struct std::_Num_float_base & __thiscall std::_Num_float_base::operator=(struct std::_Num_float_base const &)",
    "bool __cdecl std::operator>(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "protected: virtual void __thiscall std::messages::do_close(int)const",
    "public: int __thiscall std::collate::compare(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)const",
    "public: unsigned short const * __thiscall std::ctype::toupper(unsigned short *,unsigned short const *)const",
    "class std::basic_ostream > & __cdecl std::flush(class std::basic_ostream > &)",
    "public: void __thiscall std::basic_string,class std::allocator >::insert(char *,char const *,char const *)",
    "class std::complex __cdecl std::polar(long double const &,long double const &)",
    "public: static long double __cdecl std::_Ctr::cos(long double)",
    "class std::basic_istream > & __cdecl std::operator>> >(class std::basic_istream > &,unsigned char &)",
    "public: double __thiscall std::_Complex_base::imag(void)const",
    "public: unsigned short const & __thiscall std::basic_string,class std::allocator >::at(unsigned int)const",
    "public: int __thiscall std::basic_streambuf >::sbumpc(void)",
    "const std::basic_ostream >::`vftable'",
    "protected: void __thiscall std::money_get > >::_Init(class std::_Locinfo const &)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::flush(void)",
    "bool __cdecl std::operator<(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: static class std::locale::id std::num_put > >::id",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::max_size(void)const",
    "public: static unsigned int __cdecl std::time_get > >::_Getcat(void)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_year(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(long)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(unsigned short,unsigned int)const",
    "_Dnorm",
    "public: static class std::locale::id std::num_get > >::id",
    "public: char __thiscall std::ctype::widen(char)const",
    "class std::basic_istream > & __cdecl std::operator>> >(class std::basic_istream > &,signed char *)",
    "float const `class std::complex __cdecl std::log(class std::complex const &)'::`6'::_Cl",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned int,char)",
    "double __cdecl std::arg(class std::complex const &)",
    "public: __thiscall std::messages::messages(class std::_Locinfo const &,unsigned int)",
    "private: class std::ostreambuf_iterator > __thiscall std::money_put > >::_Putmfld(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,bool,class std::basic_string,class std::allocator >)const",
    "public: static unsigned int __cdecl std::char_traits::length(unsigned short const *)",
    "_LDscale",
    "protected: virtual unsigned short __thiscall std::_Mpunct::do_decimal_point(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(char const *,unsigned int)",
    "public: __thiscall std::num_get > >::num_get > >(unsigned int)",
    "_FInf",
    "public: __thiscall std::complex::complex(double const &,double const &)",
    "private: static int std::ios_base::Init::_Init_cnt",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(float)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(char const *,unsigned int,unsigned int)const",
    "protected: void __thiscall std::basic_filebuf >::_Initcvt(void)",
    "const std::num_get > >::`vftable'",
    "public: __thiscall std::logic_error::logic_error(class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::basic_ios >::basic_ios >(class std::basic_streambuf > *)",
    "double __cdecl std::abs(class std::complex const &)",
    "public: void __thiscall std::basic_fstream >::close(void)",
    "private: bool __thiscall std::basic_string,class std::allocator >::_Grow(unsigned int,bool)",
    "public: static unsigned int __cdecl std::char_traits::length(char const *)",
    "wcsrtombs",
    "public: __thiscall std::basic_filebuf >::basic_filebuf >(enum std::_Uninitialized)",
    "protected: void __thiscall std::ios_base::_Init(void)",
    "protected: char * __thiscall std::basic_streambuf >::eback(void)const",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::_Mpunct::do_curr_symbol(void)const",
    "public: char __thiscall std::ctype::narrow(unsigned short,char)const",
    "public: int __thiscall std::collate::compare(char const *,char const *,char const *,char const *)const",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_streambuf >::setbuf(char *,int)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator/=(long double const &)",
    "public: class std::basic_string,class std::allocator > __thiscall std::locale::name(void)const",
    "protected: virtual void __thiscall std::bad_cast::_Doraise(void)const",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator-=(float const &)",
    "const std::basic_istream >::`vbtable'",
    "public: static unsigned int __cdecl std::moneypunct::_Getcat(void)",
    "public: struct _Ctypevec __thiscall std::_Locinfo::_Getctype(void)const",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned long &)const",
    "public: unsigned short & __thiscall std::basic_string,class std::allocator >::at(unsigned int)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(unsigned short &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(long double &)",
    "bool __cdecl std::operator!=,class std::allocator >(char const *,class std::basic_string,class std::allocator > const &)",
    "public: static long __cdecl std::numeric_limits::min(void)",
    "_Poly",
    "class std::complex __cdecl std::pow(double const &,class std::complex const &)",
    "public: void __thiscall std::codecvt_base::`default constructor closure'(void)",
    "private: static unsigned short const * __cdecl std::basic_string,class std::allocator >::_Psum(unsigned short const *,unsigned int)",
    "bool __cdecl std::operator>(char const *,class std::basic_string,class std::allocator > const &)",
    "protected: virtual int __thiscall std::strstreambuf::overflow(int)",
    "public: static long __cdecl std::numeric_limits::max(void)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,class std::basic_string,class std::allocator > const &)",
    "class std::complex __cdecl std::operator/(class std::complex const &,long double const &)",
    "public: bool __thiscall std::ios_base::operator!(void)const",
    "const std::bad_cast::`vftable'",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::messages::do_get(int,int,int,class std::basic_string,class std::allocator > const &)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,char const *)",
    "public: virtual __thiscall std::money_get > >::~money_get > >(void)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator*=(double const &)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::_Mpunct::do_grouping(void)const",
    "public: static int __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: __thiscall std::_Complex_base::_Complex_base(float const &,float const &)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::eback(void)const",
    "public: unsigned short __thiscall std::basic_istream >::get(void)",
    "long double const `long double __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_Xl",
    "public: __thiscall std::basic_stringbuf,class std::allocator >::basic_stringbuf,class std::allocator >(class std::basic_stringbuf,class std::allocator > const &)",
    "protected: void __thiscall std::basic_stringbuf,class std::allocator >::_Init(unsigned short const *,unsigned int,int)",
    "public: unsigned short __thiscall std::basic_ios >::widen(char)const",
    "public: void __thiscall std::bad_cast::`default constructor closure'(void)",
    "protected: virtual int __thiscall std::codecvt::do_length(int &,unsigned short const *,unsigned short const *,unsigned int)const",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::money_put > >::do_put(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,class std::basic_string,class std::allocator > const &)const",
    "public: __thiscall std::time_put > >::time_put > >(unsigned int)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(double)",
    "public: static int __cdecl std::char_traits::compare(unsigned short const *,unsigned short const *,unsigned int)",
    "bool __cdecl std::operator<=,class std::allocator >(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "protected: virtual class std::fpos __thiscall std::basic_filebuf >::seekpos(class std::fpos,int)",
    "public: __thiscall std::money_put > >::money_put > >(unsigned int)",
    "class std::basic_ostream > & __cdecl std::operator<< >(class std::basic_ostream > &,unsigned char const *)",
    "public: __thiscall std::basic_fstream >::basic_fstream >(char const *,int)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::write(char const *,int)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::egptr(void)const",
    "public: static void __cdecl std::char_traits::assign(unsigned short &,unsigned short const &)",
    "public: static float __cdecl std::_Ctr::sin(float)",
    "public: static unsigned char __cdecl std::numeric_limits::min(void)",
    "const std::runtime_error::`vftable'",
    "bool __cdecl std::operator>=,class std::allocator >(class std::basic_string,class std::allocator > const &,char const *)",
    "public: static unsigned int __cdecl std::money_put > >::_Getcat(void)",
    "public: unsigned short __thiscall std::basic_streambuf >::sbumpc(void)",
    "bool __cdecl std::operator==(char const *,class std::basic_string,class std::allocator > const &)",
    "public: virtual __thiscall std::basic_streambuf >::~basic_streambuf >(void)",
    "public: __thiscall std::ios_base::Init::Init(void)",
    "public: static bool __cdecl std::_Ctr::_Isinf(double)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::runtime_error::runtime_error(class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(char)",
    "private: static class std::ostreambuf_iterator > __cdecl std::money_put > >::_Put(class std::ostreambuf_iterator >,char const *,unsigned int)",
    "private: static class std::ostreambuf_iterator > __cdecl std::money_put > >::_Rep(class std::ostreambuf_iterator >,char,unsigned int)",
    "public: static float __cdecl std::numeric_limits::epsilon(void)",
    "double __cdecl std::imag(class std::complex const &)",
    "public: static unsigned long __cdecl std::numeric_limits::min(void)",
    "public: void __thiscall std::basic_ifstream >::open(char const *,int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(char,unsigned int)const",
    "public: unsigned short const * __thiscall std::ctype::narrow(unsigned short const *,unsigned short const *,char,char *)const",
    "public: void __thiscall std::messages::`default constructor closure'(void)",
    "protected: virtual void __thiscall std::domain_error::_Doraise(void)const",
    "public: void __thiscall std::basic_string,class std::allocator >::`default constructor closure'(void)",
    "public: static bool __cdecl std::char_traits::eq_int_type(unsigned short const &,unsigned short const &)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,class std::basic_string,class std::allocator > &)",
    "long double __cdecl std::real(class std::complex const &)",
    "protected: virtual int __thiscall std::basic_streambuf >::xsputn(char const *,int)",
    "class std::basic_ostream > std::cerr",
    "class std::complex __cdecl std::operator*(class std::complex const &,long double const &)",
    "public: class std::basic_filebuf > * __thiscall std::basic_ifstream >::rdbuf(void)const",
    "public: void __thiscall std::locale::facet::_Incref(void)",
    "public: __thiscall std::bad_typeid::bad_typeid(class std::bad_typeid const &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,long double)const",
    "public: void __thiscall std::bad_typeid::`default constructor closure'(void)",
    "bool __cdecl std::operator!=,class std::allocator >(class std::basic_string,class std::allocator > const &,char const *)",
    "public: static float __cdecl std::_Ctr::ldexp(float,int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(char const *,unsigned int,unsigned int)const",
    "public: __thiscall std::domain_error::domain_error(class std::domain_error const &)",
    "public: __thiscall std::codecvt_base::codecvt_base(unsigned int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(unsigned short const *,unsigned int)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned int &)const",
    "class std::complex __cdecl std::sinh(class std::complex const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::capacity(void)const",
    "protected: virtual unsigned short __thiscall std::basic_filebuf >::pbackfail(unsigned short)",
    "public: static unsigned short * __cdecl std::char_traits::copy(unsigned short *,unsigned short const *,unsigned int)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,unsigned short const *)const",
    "protected: virtual int __thiscall std::collate::do_compare(char const *,char const *,char const *,char const *)const",
    "public: __thiscall std::basic_ostringstream,class std::allocator >::basic_ostringstream,class std::allocator >(int)",
    "public: int __thiscall std::_Mpunct::frac_digits(void)const",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)const",
    "public: struct std::_Num_base & __thiscall std::_Num_base::operator=(struct std::_Num_base const &)",
    "public: struct std::money_base::pattern __thiscall std::_Mpunct::pos_format(void)const",
    "public: int __thiscall std::codecvt::length(int &,char const *,char const *,unsigned int)const",
    "public: void __thiscall std::ios_base::clear(short)",
    "public: static signed char __cdecl std::numeric_limits::infinity(void)",
    "_LExp",
    "public: void __thiscall std::bad_exception::`default constructor closure'(void)",
    "protected: void __thiscall std::collate::_Init(class std::_Locinfo const &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,long double)const",
    "public: static bool __cdecl std::char_traits::lt(unsigned short const &,unsigned short const &)",
    "public: class std::domain_error & __thiscall std::domain_error::operator=(class std::domain_error const &)",
    "public: static float __cdecl std::numeric_limits::round_error(void)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,long double)const",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,long double &)const",
    "class std::basic_ostream > std::wcout",
    "public: unsigned short __thiscall std::basic_streambuf >::sgetc(void)",
    "public: __thiscall std::basic_istringstream,class std::allocator >::basic_istringstream,class std::allocator >(int)",
    "const std::basic_ostringstream,class std::allocator >::`vbtable'",
    "class std::complex __cdecl std::polar(double const &)",
    "protected: virtual int __thiscall std::basic_stringbuf,class std::allocator >::overflow(int)",
    "public: __thiscall std::money_base::money_base(unsigned int)",
    "public: static unsigned int __cdecl std::time_put > >::_Getcat(void)",
    "private: static unsigned short * __cdecl std::basic_string,class std::allocator >::_Psum(unsigned short *,unsigned int)",
    "protected: virtual struct std::money_base::pattern __thiscall std::_Mpunct::do_neg_format(void)const",
    "public: int __thiscall std::ios_base::precision(int)",
    "public: virtual __thiscall std::basic_iostream >::~basic_iostream >(void)",
    "public: int __thiscall std::codecvt_base::max_length(void)const",
    "public: float __thiscall std::_Complex_base::imag(void)const",
    "public: void __thiscall std::ios_base::exceptions(short)",
    "protected: virtual int __thiscall std::basic_filebuf >::underflow(void)",
    "const std::num_put > >::`vftable'",
    "_LCosh",
    "public: struct _Cvtvec __thiscall std::_Locinfo::_Getcvt(void)const",
    "public: int __thiscall std::messages::open(class std::basic_string,class std::allocator > const &,class std::locale const &)const",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,long)const",
    "public: void __thiscall std::money_base::`default constructor closure'(void)",
    "public: static bool __cdecl std::numeric_limits::round_error(void)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::_Gninc(void)",
    "class std::complex __cdecl std::pow(float const &,class std::complex const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned short const *)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(char *,int)",
    "public: static unsigned int __cdecl std::messages::_Getcat(void)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(class std::basic_string,class std::allocator > const &)const",
    "public: virtual __thiscall std::time_base::~time_base(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(char *,int,char)",
    "public: void __thiscall std::ios_base::unsetf(int)",
    "public: __thiscall std::basic_ostringstream,class std::allocator >::basic_ostringstream,class std::allocator >(class std::basic_string,class std::allocator > const &,int)",
    "public: static unsigned long __cdecl std::numeric_limits::round_error(void)",
    "bool __cdecl std::operator!=(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "const std::basic_filebuf >::`vftable'",
    "public: virtual __thiscall std::runtime_error::~runtime_error(void)",
    "public: __thiscall std::out_of_range::out_of_range(class std::basic_string,class std::allocator > const &)",
    "const std::length_error::`vftable'",
    "public: static bool const std::moneypunct::intl",
    "public: void __thiscall std::time_base::`default constructor closure'(void)",
    "bool __cdecl std::operator<=,class std::allocator >(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "_LRteps",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,class std::basic_string,class std::allocator > const &)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_date(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: static signed char __cdecl std::numeric_limits::signaling_NaN(void)",
    "bool __cdecl std::operator>(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::codecvt::codecvt(class std::_Locinfo const &,unsigned int)",
    "public: static unsigned int __cdecl std::num_put > >::_Getcat(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned short const *,unsigned short const *)",
    "protected: void __thiscall std::basic_streambuf >::setp(unsigned short *,unsigned short *,unsigned short *)",
    "public: static unsigned long __cdecl std::numeric_limits::infinity(void)",
    "bool __cdecl std::operator<,class std::allocator >(char const *,class std::basic_string,class std::allocator > const &)",
    "const std::ios_base::`vftable'",
    "public: char const * __thiscall std::ctype::tolower(char *,char const *)const",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Rep(class std::ostreambuf_iterator >,unsigned short,unsigned int)",
    "public: static bool __cdecl std::numeric_limits::epsilon(void)",
    "public: void __thiscall std::basic_ios >::setstate(int,bool)",
    "class std::complex __cdecl std::pow(class std::complex const &,float const &)",
    "public: void __thiscall std::basic_stringbuf,class std::allocator >::str(class std::basic_string,class std::allocator > const &)",
    "protected: void __thiscall std::basic_ios >::init(class std::basic_streambuf > *,bool)",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::erase(unsigned short *,unsigned short *)",
    "public: void __thiscall std::ctype_base::`default constructor closure'(void)",
    "public: class std::fpos __thiscall std::basic_ostream >::tellp(void)",
    "bool __cdecl std::operator!=(long double const &,class std::complex const &)",
    "public: static int __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: class std::istreambuf_iterator > __thiscall std::money_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,bool,class std::ios_base &,int &,class std::basic_string,class std::allocator > &)const",
    "public: unsigned short const * __thiscall std::ctype::is(unsigned short const *,unsigned short const *,short *)const",
    "public: class std::basic_ios > & __thiscall std::basic_ios >::copyfmt(class std::basic_ios > const &)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator/=(float const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(char)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(char const *,unsigned int,unsigned int)const",
    "public: virtual __thiscall std::basic_istream >::~basic_istream >(void)",
    "public: int __thiscall std::basic_streambuf >::sputc(char)",
    "public: __thiscall std::num_put > >::num_put > >(class std::_Locinfo const &,unsigned int)",
    "private: static char const * __cdecl std::basic_string,class std::allocator >::_Psum(char const *,unsigned int)",
    "public: int __thiscall std::codecvt::in(int &,char const *,char const *,char const * &,unsigned short *,unsigned short *,unsigned short * &)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(char const *,unsigned int)const",
    "protected: void __thiscall std::basic_filebuf >::_Init(struct _iobuf *,enum std::basic_filebuf >::_Initfl)",
    "bool __cdecl std::operator<=(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: static float __cdecl std::numeric_limits::denorm_min(void)",
    "public: static int __cdecl std::char_traits::to_int_type(char const &)",
    "protected: __thiscall std::basic_streambuf >::basic_streambuf >(void)",
    "class std::basic_istream > & __cdecl std::operator>> >(class std::basic_istream > &,signed char &)",
    "public: class std::complex & __thiscall std::complex::operator=(long double const &)",
    "protected: virtual int __thiscall std::basic_streambuf >::pbackfail(int)",
    "class std::complex __cdecl std::polar(long double const &)",
    "public: __thiscall std::__non_rtti_object::__non_rtti_object(class std::__non_rtti_object const &)",
    "float __cdecl std::abs(class std::complex const &)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned short const *,unsigned int,class std::allocator const &)",
    "public: char const * __thiscall std::basic_string,class std::allocator >::data(void)const",
    "public: virtual __thiscall std::bad_cast::~bad_cast(void)",
    "public: virtual __thiscall std::basic_ios >::~basic_ios >(void)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,double)const",
    "bool __cdecl std::operator!=,class std::allocator >(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::underflow(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,class std::basic_string,class std::allocator > const &)",
    "bool __cdecl std::operator<=(char const *,class std::basic_string,class std::allocator > const &)",
    "private: static int std::_Winit::_Init_cnt",
    "public: unsigned short const * __thiscall std::ctype::tolower(unsigned short *,unsigned short const *)const",
    "public: class std::numeric_limits & __thiscall std::numeric_limits::operator=(class std::numeric_limits const &)",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_filebuf >::setbuf(char *,int)",
    "_LPoly",
    "protected: void __thiscall std::basic_streambuf >::_Init(unsigned short * *,unsigned short * *,int *,unsigned short * *,unsigned short * *,int *)",
    "public: class std::basic_streambuf > * __thiscall std::basic_streambuf >::pubsetbuf(char *,int)",
    "public: __thiscall std::num_put > >::num_put > >(unsigned int)",
    "public: static double __cdecl std::numeric_limits::signaling_NaN(void)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,short *)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Put(class std::ostreambuf_iterator >,unsigned short const *,unsigned int)",
    "public: int __thiscall std::basic_streambuf >::sputbackc(char)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator=(class std::basic_ostream > const &)",
    "public: static long double __cdecl std::_Ctr::log(long double)",
    "public: void __thiscall std::ios_base::register_callback(void (__cdecl*)(enum std::ios_base::event,class std::ios_base &,int),int)",
    "class std::basic_istream > & __cdecl std::operator>>,long double>(class std::basic_istream > &,class std::complex &)",
    "long double __cdecl std::norm(class std::complex const &)",
    "protected: virtual char const * __thiscall std::ctype::do_widen(char const *,char const *,unsigned short *)const",
    "public: __thiscall std::out_of_range::out_of_range(class std::out_of_range const &)",
    "public: static double __cdecl std::_Ctr::atan2(double,double)",
    "class std::basic_ostream > std::wcerr",
    "public: class std::bad_typeid & __thiscall std::bad_typeid::operator=(class std::bad_typeid const &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,unsigned long)const",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::_Mpunct::do_negative_sign(void)const",
    "const std::basic_istream >::`vftable'",
    "public: static char __cdecl std::numeric_limits::max(void)",
    "protected: virtual void __thiscall std::range_error::_Doraise(void)const",
    "public: class std::basic_stringstream,class std::allocator > & __thiscall std::basic_stringstream,class std::allocator >::operator=(class std::basic_stringstream,class std::allocator > const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(unsigned short *,int)",
    "double const `double __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_Xh",
    "const std::out_of_range::`vftable'",
    "public: static bool __cdecl std::numeric_limits::max(void)",
    "public: __thiscall std::_Mpunct::_Mpunct(unsigned int,bool)",
    "public: class std::allocator __thiscall std::basic_string,class std::allocator >::get_allocator(void)const",
    "public: int __thiscall std::basic_istream >::get(void)",
    "protected: void __thiscall std::ctype::_Init(class std::_Locinfo const &)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,long &)const",
    "public: __thiscall std::basic_istream >::basic_istream >(enum std::_Uninitialized)",
    "public: void __thiscall std::basic_string,class std::allocator >::swap(class std::basic_string,class std::allocator > &)",
    "bool __cdecl std::operator==,class std::allocator >(class std::basic_string,class std::allocator > const &,char const *)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(char const *,class std::allocator const &)",
    "public: void __thiscall std::basic_ios >::clear(short)",
    "public: static class std::locale::id std::money_put > >::id",
    "_Stold",
    "public: static short __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: unsigned short __thiscall std::ctype::widen(char)const",
    "public: __thiscall std::basic_ifstream >::basic_ifstream >(void)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator*=(float const &)",
    "public: __thiscall std::moneypunct::moneypunct(class std::_Locinfo const &,unsigned int)",
    "protected: virtual void __thiscall std::bad_alloc::_Doraise(void)const"
  ],
  "msvcr100_clr0400.dll": "No exports",
  "msvcr110_clr0400.dll": [
    "_stat64",
    "_set_printf_count_output",
    "_vcprintf_p_l",
    "_ismbslead",
    "_mbsnbcpy_s",
    "public: __thiscall Concurrency::improper_scheduler_detach::improper_scheduler_detach(void)",
    "_fgetwc_nolock",
    "vwprintf",
    "public: __thiscall Concurrency::details::_Scheduler::_Scheduler(class Concurrency::Scheduler *)",
    "__create_locale",
    "wcscoll",
    "__sys_errlist",
    "_wcsset_s",
    "_wputenv_s",
    "printf_s",
    "_isctype_l",
    "__CxxFrameHandler2",
    "_assert",
    "public: __thiscall Concurrency::invalid_scheduler_policy_key::invalid_scheduler_policy_key(void)",
    "__wcsncnt",
    "_strlwr_s",
    "_sopen_s",
    "isdigit",
    "public: __thiscall Concurrency::details::_SpinWait<1>::_SpinWait<1>(void (__cdecl*)(void))",
    "_Atomic_compare_exchange_strong_4",
    "_fgetwchar",
    "_get_terminate",
    "_Atomic_compare_exchange_strong",
    "_wcsnicmp_l",
    "__p__pctype",
    "__dllonexit",
    "_towupper_l",
    "_strtol_l",
    "wcstombs_s",
    "_scalb",
    "exit",
    "lldiv",
    "_CRT_RTC_INITW",
    "_sprintf_p_l",
    "public: __thiscall Concurrency::improper_lock::improper_lock(char const *)",
    "_mbslwr_s",
    "asctime_s",
    "public: __thiscall Concurrency::reader_writer_lock::reader_writer_lock(void)",
    "__libm_sse2_asin",
    "_snprintf_s_l",
    "_ismbbpunct_l",
    "_heapadd",
    "_hypotf",
    "_wgetcwd",
    "exp",
    "private: static unsigned int & __cdecl Concurrency::details::_StackGuard::_GetCurrentInlineDepth(void)",
    "llabs",
    "pow",
    "wmemcpy_s",
    "$I10_OUTPUT",
    "_wcmdln",
    "_mbslwr",
    "_fwscanf_l",
    "fprintf_s",
    "labs",
    "unsigned int __cdecl Concurrency::GetSchedulerId(void)",
    "__libm_sse2_cos",
    "public: __thiscall Concurrency::invalid_scheduler_policy_key::invalid_scheduler_policy_key(char const *)",
    "_strnicmp_l",
    "fwscanf",
    "_vcwprintf_p",
    "_snwscanf_s",
    "_mbcjmstojis_l",
    "__libm_sse2_sinf",
    "_except_handler2",
    "fread",
    "__clean_type_info_names_internal",
    "_vscwprintf_p_l",
    "iswalpha",
    "_ismbcpunct",
    "public: __thiscall Concurrency::default_scheduler_exists::default_scheduler_exists(char const *)",
    "toupper",
    "_vscprintf_p",
    "realloc",
    "_ismbcalnum_l",
    "_sprintf_s_l",
    "_ismbbtrail",
    "_wcsnicoll",
    "_sopen",
    "public: static void __cdecl Concurrency::Scheduler::ResetDefaultSchedulerPolicy(void)",
    "void __cdecl __ExceptionPtrSwap(void *,void *)",
    "mbrtowc",
    "_i64tow",
    "_iswspace_l",
    "_mbstowcs_s_l",
    "_wfindnext32",
    "public: __thiscall Concurrency::unsupported_os::unsupported_os(void)",
    "_wstrdate",
    "_set_fmode",
    "___lc_locale_name_func",
    "_Atomic_compare_exchange_weak_8",
    "_mbsrev",
    "_get_wpgmptr",
    "_mbsnccnt_l",
    "fputws",
    "_ismbclegal",
    "__BuildCatchObject",
    "__p__dstbias",
    "_mbsncpy_l",
    "protected: unsigned long __thiscall Concurrency::details::_SpinWait<1>::_NumberOfSpins(void)",
    "_Atomic_store_4",
    "ldiv",
    "_tempnam",
    "_fseek_nolock",
    "_getdiskfree",
    "_mbctoupper",
    "strcat",
    "wcscpy_s",
    "_set_malloc_crt_max_wait",
    "_splitpath_s",
    "_vscwprintf",
    "_snscanf_s",
    "_strtime_s",
    "_localtime64",
    "_Lock_spin_lock",
    "public: class Concurrency::critical_section & __thiscall Concurrency::critical_section::native_handle(void)",
    "strrchr",
    "_mbclen",
    "_mbsnbcpy_l",
    "_snprintf",
    "_wprintf_s_l",
    "wcstoul",
    "_strncoll_l",
    "_ultow",
    "div",
    "_swab",
    "void __cdecl _invalid_parameter(unsigned short const *,unsigned short const *,unsigned short const *,unsigned int,unsigned int)",
    "_ismbblead_l",
    "int __cdecl _set_new_mode(int)",
    "wmemmove_s",
    "wctomb_s",
    "strncat",
    "public: void __thiscall Concurrency::critical_section::unlock(void)",
    "public: __thiscall Concurrency::bad_target::bad_target(char const *)",
    "_ecvt_s",
    "public: __thiscall std::bad_cast::bad_cast(char const *)",
    "public: bool __thiscall type_info::operator==(class type_info const &)const",
    "_close",
    "_mbsupr",
    "_aligned_msize",
    "public: void __thiscall Concurrency::details::_StructuredTaskCollection::_Schedule(class Concurrency::details::_UnrealizedChore *,class Concurrency::location *)",
    "public: __thiscall Concurrency::details::_StructuredTaskCollection::_StructuredTaskCollection(class Concurrency::details::_CancellationTokenState *)",
    "_freea",
    "_findnext64i32",
    "__p__commode",
    "_i64toa",
    "int (__cdecl*__cdecl _set_new_handler(int))(unsigned int)",
    "_CIsin",
    "_write",
    "_Atomic_exchange_1",
    "_time64",
    "fclose",
    "fwprintf_s",
    "_wcserror_s",
    "_Atomic_exchange_8",
    "__control87_2",
    "public: __thiscall Concurrency::unsupported_os::unsupported_os(char const *)",
    "_wscanf_l",
    "wcsncpy",
    "public: __thiscall Concurrency::critical_section::~critical_section(void)",
    "public: __thiscall Concurrency::details::_Condition_variable::_Condition_variable(void)",
    "_get_printf_count_output",
    "public: void __thiscall Concurrency::details::_NonReentrantPPLLock::_Acquire(void *)",
    "vfprintf",
    "_Atomic_copy",
    "___mb_cur_max_l_func",
    "public: __thiscall Concurrency::details::_ReentrantLock::_ReentrantLock(void)",
    "strcpy_s",
    "public: void __thiscall Concurrency::details::_Condition_variable::notify_all(void)",
    "public: bool __thiscall Concurrency::details::_TaskCollection::_IsCanceling(void)",
    "_swscanf_l",
    "_wsearchenv_s",
    "_expand",
    "clearerr",
    "iswgraph",
    "_isctype",
    "_fwrite_nolock",
    "_fpclass",
    "_get_doserrno",
    "_ltow",
    "public: __thiscall Concurrency::scheduler_resource_allocation_error::scheduler_resource_allocation_error(char const *,long)",
    "_spawnvp",
    "_findfirst64",
    "_ftime32",
    "_ismbbgraph_l",
    "_splitpath",
    "_wcsftime_l",
    "_Atomic_is_lock_free_4",
    "_iscntrl_l",
    "_stat32",
    "_beginthreadex",
    "public: void __thiscall Concurrency::details::_SpinWait<1>::_SetSpinCount(unsigned int)",
    "_mbsncpy",
    "wcsspn",
    "_getdcwd",
    "vswprintf_s",
    "void __cdecl operator delete(void *)",
    "const std::exception::`vftable'",
    "public: __thiscall Concurrency::nested_scheduler_missing_detach::nested_scheduler_missing_detach(char const *)",
    "atof",
    "_wcstombs_l",
    "public: __thiscall Concurrency::invalid_oversubscribe_operation::invalid_oversubscribe_operation(char const *)",
    "tan",
    "wcsrchr",
    "tmpnam",
    "memcpy",
    "_getsystime",
    "_Atomic_exchange_2",
    "__libm_sse2_exp",
    "_aligned_offset_realloc",
    "free",
    "_getwch",
    "_mbsbtype",
    "_local_unwind2",
    "_wcserror",
    "_mbsdec",
    "public: void __thiscall Concurrency::details::_CancellationTokenState::_Cancel(void)",
    "_vsprintf_p_l",
    "_seterrormode",
    "public: void __thiscall Concurrency::details::_ReentrantBlockingLock::_Release(void)",
    "_wtmpnam",
    "_sprintf_p",
    "fgetwc",
    "__libm_sse2_logf",
    "_invalid_parameter_noinfo_noreturn",
    "__free_locale",
    "strerror_s",
    "_ismbcalpha_l",
    "isprint",
    "public: void __thiscall Concurrency::details::_ReentrantPPLLock::_Acquire(void *)",
    "_isnan",
    "_Atomic_fetch_and_4",
    "public: static void __cdecl Concurrency::details::_Context::_Yield(void)",
    "_CIacos",
    "public: void __thiscall Concurrency::SchedulerPolicy::SetConcurrencyLimits(unsigned int,unsigned int)",
    "_isprint_l",
    "_telli64",
    "public: class std::exception & __thiscall std::exception::operator=(class std::exception const &)",
    "_purecall",
    "_searchenv_s",
    "_wgetenv",
    "_Atomic_load_8",
    "__p___winitenv",
    "_aligned_malloc",
    "public: __thiscall Concurrency::critical_section::scoped_lock::scoped_lock(class Concurrency::critical_section &)",
    "_vfwprintf_s_l",
    "_pclose",
    "void (__cdecl*__cdecl set_unexpected(void (__cdecl*)(void)))(void)",
    "_mbcasemap",
    "_flsbuf",
    "_strset_s",
    "_chsize",
    "getenv",
    "malloc",
    "__p___mb_cur_max",
    "enum Concurrency::IResourceManager::OSVersion __cdecl Concurrency::GetOSVersion(void)",
    "iswupper",
    "iswascii",
    "_spawnv",
    "_ismbcspace",
    "_dup2",
    "_tolower_l",
    "_mbsnset_l",
    "public: virtual __thiscall type_info::~type_info(void)",
    "_ismbcprint_l",
    "__RTtypeid",
    "public: __thiscall Concurrency::scheduler_not_attached::scheduler_not_attached(void)",
    "_mbsspn_l",
    "strncat_s",
    "_ismbckata",
    "_filelength",
    "_wchdir",
    "_cwait",
    "_sys_nerr",
    "_mbccpy_s",
    "_localtime32",
    "_XcptFilter",
    "public: __thiscall Concurrency::details::_NonReentrantPPLLock::_Scoped_lock::~_Scoped_lock(void)",
    "_wmakepath",
    "ferror",
    "_aligned_free",
    "_get_osfhandle",
    "fflush",
    "_commit",
    "public: __thiscall Concurrency::details::_SpinLock::_SpinLock(long volatile &)",
    "_getws",
    "_spawnve",
    "_byteswap_ushort",
    "vsprintf",
    "strerror",
    "_set_error_mode",
    "_NLG_Return",
    "_HUGE",
    "void __cdecl __ExceptionPtrDestroy(void *)",
    "qsort",
    "protected: void __thiscall Concurrency::details::_SpinWait<1>::_Reset(void)",
    "tmpnam_s",
    "void __cdecl operator delete[](void *)",
    "public: void __thiscall Concurrency::details::_TaskCollection::_Cancel(void)",
    "_calloc_crt",
    "_strnicoll",
    "setbuf",
    "_snwprintf",
    "_Atomic_fetch_sub_8",
    "public: __thiscall Concurrency::invalid_scheduler_policy_thread_specification::invalid_scheduler_policy_thread_specification(char const *)",
    "_get_fmode",
    "_Atomic_fetch_or_1",
    "public: __thiscall Concurrency::details::_NonReentrantBlockingLock::~_NonReentrantBlockingLock(void)",
    "_except_handler3",
    "iscntrl",
    "_strxfrm_l",
    "_mbscoll_l",
    "_vprintf_p",
    "_heapwalk",
    "__p__mbctype",
    "_wstrtime_s",
    "isxdigit",
    "_mktemp_s",
    "public: class Concurrency::SchedulerPolicy & __thiscall Concurrency::SchedulerPolicy::operator=(class Concurrency::SchedulerPolicy const &)",
    "_rotr64",
    "_mbsupr_l",
    "public: static bool __cdecl Concurrency::CurrentScheduler::IsAvailableLocation(class Concurrency::location const &)",
    "public: char const * __thiscall type_info::_name_internal_method(struct __type_info_node *)const",
    "void __cdecl Concurrency::_Trace_ppl_function(struct _GUID const &,unsigned char,enum Concurrency::ConcRT_EventType)",
    "_get_output_format",
    "wcscat",
    "_mbsnccnt",
    "_time32",
    "_mkgmtime64",
    "_filbuf",
    "_ismbbprint",
    "_setmode",
    "_ismbbkalnum",
    "public: __thiscall std::bad_typeid::bad_typeid(char const *)",
    "fprintf",
    "strtod",
    "_mbscmp",
    "_wcstoi64",
    "__FrameUnwindFilter",
    "_sys_errlist",
    "towlower",
    "_snprintf_c_l",
    "_rotr",
    "public: static unsigned int __cdecl Concurrency::CurrentScheduler::GetNumberOfVirtualProcessors(void)",
    "public: static class Concurrency::location __cdecl Concurrency::location::_Current_node(void)",
    "_vcwprintf",
    "void __cdecl Concurrency::_Trace_agents(enum Concurrency::Agents_EventType,__int64,...)",
    "public: static void __cdecl Concurrency::Context::Block(void)",
    "_strnset",
    "__wargv",
    "wcscmp",
    "isalnum",
    "___lc_collate_cp_func",
    "public: __thiscall Concurrency::invalid_link_target::invalid_link_target(char const *)",
    "protected: void __thiscall Concurrency::details::_SpinWait<0>::_Reset(void)",
    "_W_Getdays",
    "_wsystem",
    "log",
    "int __cdecl _wopen(wchar_t const *,int,int)",
    "wcrtomb_s",
    "_towlower_l",
    "__crtUnhandledException",
    "_set_invalid_parameter_handler",
    "_wassert",
    "_mbschr",
    "_vfprintf_p_l",
    "_environ",
    "_findfirst64i32",
    "private: static void __cdecl type_info::_Type_info_dtor_internal(class type_info *)",
    "_iob",
    "_cgets",
    "_statusfp",
    "_islower_l",
    "_fputwchar",
    "_ungetch",
    "public: static class Concurrency::Scheduler * __cdecl Concurrency::Scheduler::Create(class Concurrency::SchedulerPolicy const &)",
    "_cgetws_s",
    "_ismbcalnum",
    "void * __cdecl operator new[](unsigned int,int,char const *,int)",
    "_findnext64",
    "tmpfile",
    "_unlock_file",
    "_ismbcdigit_l",
    "_realloc_crt",
    "_snwprintf_l",
    "_ecvt",
    "_wexecve",
    "_getptd",
    "atol",
    "iswcntrl",
    "public: virtual __thiscall std::exception::~exception(void)",
    "unsigned int __cdecl Concurrency::GetProcessorCount(void)",
    "public: static void __cdecl Concurrency::Scheduler::SetDefaultSchedulerPolicy(class Concurrency::SchedulerPolicy const &)",
    "_Getdays",
    "void __cdecl __ExceptionPtrCurrentException(void *)",
    "atan",
    "public: static class Concurrency::SchedulerPolicy __cdecl Concurrency::CurrentScheduler::GetPolicy(void)",
    "void __cdecl terminate(void)",
    "__libm_sse2_log10",
    "public: __thiscall Concurrency::invalid_scheduler_policy_thread_specification::invalid_scheduler_policy_thread_specification(void)",
    "_mblen_l",
    "_wctime32_s",
    "_ftelli64_nolock",
    "_sprintf_l",
    "longjmp",
    "_wctime32",
    "_ismbckata_l",
    "public: static void __cdecl Concurrency::CurrentScheduler::Detach(void)",
    "vsprintf_s",
    "_wcstol_l",
    "memcpy_s",
    "public: __thiscall Concurrency::details::_NonReentrantPPLLock::_NonReentrantPPLLock(void)",
    "_vsnprintf_c",
    "memchr",
    "_setmaxstdio",
    "vfprintf_s",
    "strnlen",
    "_loaddll",
    "_wcsupr_l",
    "_wsetlocale",
    "_iswcntrl_l",
    "fgetc",
    "public: static unsigned int __cdecl Concurrency::Context::VirtualProcessorId(void)",
    "_mbschr_l",
    "_byteswap_ulong",
    "_scprintf_p",
    "_j0",
    "_mbccpy",
    "int __cdecl _query_new_mode(void)",
    "wcsstr",
    "_Atomic_flag_clear",
    "_vfprintf_s_l",
    "public: static class Concurrency::details::_Scheduler __cdecl Concurrency::details::_CurrentScheduler::_Get(void)",
    "public: __cdecl Concurrency::SchedulerPolicy::SchedulerPolicy(unsigned int,...)",
    "wcscat_s",
    "public: __thiscall Concurrency::details::_ReentrantBlockingLock::~_ReentrantBlockingLock(void)",
    "_mbsncat_s_l",
    "_pgmptr",
    "_mbcjistojms_l",
    "public: void __thiscall Concurrency::details::_SpinWait<0>::_SetSpinCount(unsigned int)",
    "__libm_sse2_log",
    "_Atomic_is_lock_free_1",
    "_strnicmp",
    "public: __thiscall Concurrency::critical_section::critical_section(void)",
    "mbsrtowcs",
    "_mbsnbicoll",
    "public: __thiscall Concurrency::default_scheduler_exists::default_scheduler_exists(void)",
    "_cprintf_s",
    "_putwch",
    "_wdupenv_s",
    "_recalloc_crt",
    "_getws_s",
    "_Atomic_fetch_or_2",
    "_wfopen_s",
    "_putwch_nolock",
    "public: void __thiscall Concurrency::details::_NonReentrantBlockingLock::_Release(void)",
    "_wcsset",
    "__libm_sse2_tan",
    "_fputwc_nolock",
    "__CxxExceptionFilter",
    "fopen_s",
    "_mbsnbset_s",
    "_wpgmptr",
    "public: __thiscall Concurrency::operation_timed_out::operation_timed_out(void)",
    "_CRT_RTC_INIT",
    "_putw",
    "_seh_longjmp_unwind",
    "fseek",
    "acos",
    "swprintf_s",
    "wcsncat_s",
    "_putch",
    "_wspawnlpe",
    "_initterm_e",
    "_cwscanf_s_l",
    "_strdate_s",
    "_isspace_l",
    "__setusermatherr",
    "_vcwprintf_s",
    "_tzset",
    "atexit",
    "_mbstrlen",
    "_atodbl_l",
    "_mbctolower",
    "public: void __thiscall Concurrency::details::_Condition_variable::notify_one(void)",
    "_mbsnbcmp_l",
    "void __cdecl Concurrency::details::_ConcRT_Trace(int,wchar_t const *,...)",
    "__TypeMatch",
    "_toupper_l",
    "_strerror",
    "asin",
    "_mbsnbicmp",
    "_atodbl",
    "public: static class Concurrency::details::_CancellationTokenState * __cdecl Concurrency::details::_CancellationTokenState::_NewTokenState(void)",
    "public: static void __cdecl Concurrency::Context::Yield(void)",
    "_vscprintf_l",
    "_popen",
    "_wstat32",
    "_ftell_nolock",
    "_msize",
    "_wexecv",
    "_libm_sse2_log_precise",
    "_localtime32_s",
    "_printf_l",
    "_CIlog",
    "public: __thiscall Concurrency::details::_ReentrantPPLLock::_Scoped_lock::~_Scoped_lock(void)",
    "_lrotr",
    "_W_Getmonths",
    "_gcvt",
    "_execlpe",
    "_ismbcupper",
    "public: __thiscall Concurrency::details::_NonReentrantBlockingLock::_NonReentrantBlockingLock(void)",
    "_wcsncoll_l",
    "__libm_sse2_log10f",
    "_gcvt_s",
    "public: __thiscall Concurrency::details::_TaskCollection::_TaskCollection(class Concurrency::details::_CancellationTokenState *)",
    "strspn",
    "_fwprintf_p",
    "wprintf",
    "_dup",
    "_logb",
    "__iob_func",
    "_vsnwprintf_s",
    "int __cdecl _ValidateExecute(int (__stdcall*)(void))",
    "memset",
    "mbrlen",
    "_set_purecall_handler",
    "_vfwprintf_p_l",
    "wcsncpy_s",
    "public: char const * __thiscall type_info::name(struct __type_info_node *)const",
    "_ftelli64",
    "public: __thiscall Concurrency::details::_Cancellation_beacon::~_Cancellation_beacon(void)",
    "_wctime64_s",
    "sqrt",
    "_strlwr",
    "_iswpunct_l",
    "_mbcjmstojis",
    "strtok_s",
    "_ismbbpunct",
    "public: __thiscall Concurrency::details::_Interruption_exception::_Interruption_exception(void)",
    "_mbccpy_l",
    "_stricoll_l",
    "wcscpy",
    "_mbslen",
    "_wcsicmp_l",
    "_mbsbtype_l",
    "_mbctokata",
    "iswprint",
    "_getc_nolock",
    "tolower",
    "__vswprintf_l",
    "_cabs",
    "vfwprintf",
    "getc",
    "fgets",
    "_mbsnbcat_s_l",
    "_recalloc",
    "__getmainargs",
    "_mbbtombc",
    "public: enum Concurrency::details::_TaskCollectionStatus __stdcall Concurrency::details::_StructuredTaskCollection::_RunAndWait(class Concurrency::details::_UnrealizedChore *)",
    "_strtoui64",
    "_i64toa_s",
    "_Atomic_fetch_and_1",
    "wcstok_s",
    "_Atomic_load_1",
    "unsigned int __cdecl Concurrency::GetProcessorNodeCount(void)",
    "_mbsnset_s",
    "_mbctombb_l",
    "public: static unsigned int __cdecl Concurrency::details::_CurrentScheduler::_GetNumberOfVirtualProcessors(void)",
    "_mbctokata_l",
    "_mbstowcs_l",
    "_isgraph_l",
    "public: __thiscall Concurrency::SchedulerPolicy::SchedulerPolicy(class Concurrency::SchedulerPolicy const &)",
    "_ismbbkalnum_l",
    "_ltoa",
    "__p__environ",
    "_vcwprintf_p_l",
    "__unDName",
    "_fcvt",
    "public: __thiscall Concurrency::details::_Context::_Context(class Concurrency::Context *)",
    "_vprintf_p_l",
    "public: void __thiscall Concurrency::details::_CancellationTokenState::_DeregisterCallback(class Concurrency::details::_CancellationTokenRegistration *)",
    "_rmdir",
    "_wctime64",
    "public: __thiscall std::bad_cast::bad_cast(class std::bad_cast const &)",
    "_mbsncmp",
    "_getmbcp",
    "_strlwr_s_l",
    "_Atomic_fetch_or_4",
    "__get_flsindex",
    "private: static char const * __cdecl type_info::_Name_base(class type_info const *,struct __type_info_node *)",
    "_ismbbalpha_l",
    "_fscanf_s_l",
    "_lsearch_s",
    "_beep",
    "_wmkdir",
    "public: class std::bad_cast & __thiscall std::bad_cast::operator=(class std::bad_cast const &)",
    "_utime64",
    "__dstbias",
    "_getche",
    "_mbsspnp",
    "_libm_sse2_log10_precise",
    "public: __thiscall Concurrency::invalid_operation::invalid_operation(char const *)",
    "_y1",
    "_wexecle",
    "wcschr",
    "__CxxLongjmpUnwind",
    "vprintf_s",
    "_cwprintf_l",
    "_ui64toa_s",
    "public: void __thiscall Concurrency::details::_TaskCollection::_Schedule(class Concurrency::details::_UnrealizedChore *)",
    "signal",
    "_aligned_realloc",
    "_wcstod_l",
    "void * __cdecl operator new[](unsigned int)",
    "_getch",
    "_mbsncoll",
    "_wcsncoll",
    "_ultoa_s",
    "_wspawnve",
    "public: class Concurrency::details::_CancellationTokenRegistration * __thiscall Concurrency::details::_CancellationTokenState::_RegisterCallback(void (__cdecl*)(void *),void *,int)",
    "protected: bool __thiscall Concurrency::details::_SpinWait<0>::_ShouldSpinAgain(void)",
    "rename",
    "public: __thiscall Concurrency::task_canceled::task_canceled(char const *)",
    "_ismbslead_l",
    "_wexecvpe",
    "__pwctype_func",
    "public: void __thiscall Concurrency::details::_ReentrantBlockingLock::_Acquire(void)",
    "_fwprintf_p_l",
    "__argv",
    "__toascii",
    "_mbsninc_l",
    "_vswprintf",
    "_wcstoul_l",
    "void * __cdecl Concurrency::details::GetSharedTimerQueue(void)",
    "wcsncmp",
    "int __cdecl vswprintf(wchar_t *,unsigned int,wchar_t const *,char *)",
    "_cscanf_s",
    "__p__wenviron",
    "_CIsqrt",
    "_wctomb_l",
    "_wspawnlp",
    "__timezone",
    "_inp",
    "iswpunct",
    "isleadbyte",
    "_scprintf_p_l",
    "_byteswap_uint64",
    "public: class Concurrency::details::_SpinWait<0> & __thiscall Concurrency::details::_SpinWait<0>::operator=(class Concurrency::details::_SpinWait<0> const &)",
    "floor",
    "_get_current_locale",
    "_setmbcp",
    "_mbsset_s",
    "public: static bool __cdecl Concurrency::Context::IsCurrentTaskCollectionCanceling(void)",
    "public: __thiscall std::__non_rtti_object::__non_rtti_object(char const *)",
    "_mbbtype_l",
    "public: __thiscall Concurrency::event::~event(void)",
    "_wspawnvp",
    "wcspbrk",
    "memcmp",
    "_wcsicoll_l",
    "__argc",
    "private: void __thiscall Concurrency::details::_StructuredTaskCollection::_Abort(void)",
    "void (__cdecl*__cdecl set_terminate(int))(void)",
    "_wfopen",
    "_wexeclpe",
    "void * __cdecl operator new(unsigned int)",
    "_mbsninc",
    "_ismbcl2_l",
    "sin",
    "_ismbcdigit",
    "_wexecl",
    "_Atomic_store_2",
    "__libm_sse2_atanf",
    "_heapmin",
    "public: __thiscall Concurrency::invalid_multiple_scheduling::invalid_multiple_scheduling(char const *)",
    "_waccess_s",
    "_strupr",
    "strcmp",
    "public: virtual __thiscall std::bad_typeid::~bad_typeid(void)",
    "_wspawnv",
    "_vscprintf_p_l",
    "rewind",
    "_wfindfirst64i32",
    "public: __thiscall Concurrency::reader_writer_lock::scoped_lock_read::~scoped_lock_read(void)",
    "_mbsnicmp_l",
    "_wstat32i64",
    "_stat64i32",
    "void (__cdecl*__cdecl set_terminate(void (__cdecl*)(void)))(void)",
    "_wfindnext32i64",
    "_mbsupr_s",
    "_strtoi64",
    "_Atomic_store_1",
    "_wcsdup",
    "_ismbcl0",
    "_snwscanf_s_l",
    "__RTCastToVoid",
    "_fsopen",
    "_Atomic_load_2",
    "__iscsym",
    "_tell",
    "_searchenv",
    "_get_heap_handle",
    "_mbsnbset",
    "atan2",
    "_strrev",
    "_wprintf_p",
    "gets",
    "protected: void __thiscall Concurrency::details::_Timer::_Start(void)",
    "strncmp",
    "_invalid_parameter_noinfo",
    "public: __thiscall Concurrency::invalid_oversubscribe_operation::invalid_oversubscribe_operation(void)",
    "public: __thiscall Concurrency::details::_Interruption_exception::_Interruption_exception(char const *)",
    "_vcprintf_s",
    "memmove_s",
    "_longjmpex",
    "_memicmp",
    "_wcsnset_s",
    "protected: virtual __thiscall Concurrency::details::_Timer::~_Timer(void)",
    "_ungetwch_nolock",
    "protected: bool __thiscall Concurrency::details::_SpinWait<1>::_ShouldSpinAgain(void)",
    "_mbsnicoll_l",
    "public: static void __cdecl Concurrency::details::_CurrentScheduler::_ScheduleTask(void (__cdecl*)(void *),void *)",
    "_waccess",
    "_lseeki64",
    "_libm_sse2_acos_precise",
    "_free_locale",
    "_get_errno",
    "public: __thiscall Concurrency::details::_SpinWait<0>::_SpinWait<0>(void (__cdecl*)(void))",
    "__tzname",
    "_set_SSE2_enable",
    "raise",
    "strstr",
    "private: static void __cdecl type_info::_Type_info_dtor(class type_info *)",
    "void __cdecl Concurrency::set_task_execution_resources(unsigned long)",
    "_ismbcpunct_l",
    "_set_controlfp",
    "public: void __thiscall Concurrency::details::_ReentrantLock::_Release(void)",
    "__uncaught_exception",
    "void __cdecl unexpected(void)",
    "_mbctype",
    "wcstok",
    "_vsnprintf_l",
    "public: static unsigned int __cdecl Concurrency::event::wait_for_multiple(class Concurrency::event * *,unsigned int,bool,unsigned int)",
    "_ismbcl1_l",
    "_scwprintf_p",
    "_ismbbkana_l",
    "_mbstok_s",
    "_dupenv_s",
    "_mbscpy_s",
    "void __cdecl _inconsistency(void)",
    "public: __thiscall Concurrency::event::event(void)",
    "_wcslwr_s",
    "tmpfile_s",
    "public: unsigned int __thiscall Concurrency::details::_Scheduler::_Release(void)",
    "_fileno",
    "_findfirst32i64",
    "_mbsnicmp",
    "_wstrtime",
    "_wasctime_s",
    "_snprintf_c",
    "_mktime32",
    "_Atomic_compare_exchange_weak_2",
    "_wasctime",
    "_CIcosh",
    "_wcslwr",
    "_wfindfirst32i64",
    "_inpw",
    "_ismbcsymbol_l",
    "swscanf_s",
    "srand",
    "_access",
    "public: unsigned int __thiscall Concurrency::details::_Scheduler::_Reference(void)",
    "public: void __thiscall Concurrency::details::_Condition_variable::wait(class Concurrency::critical_section &)",
    "_W_Gettnames",
    "__libm_sse2_atan",
    "_mbsnbcmp",
    "_strncoll",
    "_vcprintf_l",
    "_Atomic_compare_exchange_strong_2",
    "int (__cdecl*__cdecl _set_new_handler(int (__cdecl*)(unsigned int)))(unsigned int)",
    "_rotl",
    "unsigned int __cdecl Concurrency::details::_GetConcurrency(void)",
    "const std::__non_rtti_object::`vftable'",
    "_vsprintf_s_l",
    "public: void __thiscall Concurrency::reader_writer_lock::lock(void)",
    "_mbsrchr_l",
    "_mbscpy_s_l",
    "setlocale",
    "private: __thiscall std::bad_cast::bad_cast(char const * const *)",
    "_ismbclower",
    "_vwprintf_l",
    "public: virtual __thiscall std::__non_rtti_object::~__non_rtti_object(void)",
    "_ismbchira_l",
    "_itoa_s",
    "_gmtime64_s",
    "_mbsncat",
    "_vwprintf_p",
    "_getpid",
    "__wcserror",
    "_wscanf_s_l",
    "mbstowcs",
    "_getch_nolock",
    "_get_pgmptr",
    "_initterm",
    "wctob",
    "_getwche_nolock",
    "_putenv",
    "_iswcsymf_l",
    "ispunct",
    "_iswalpha_l",
    "_unlink",
    "_mbsinc_l",
    "_Atomic_fetch_add_8",
    "_getcwd",
    "_strcoll_l",
    "_Atomic_fetch_sub_2",
    "ceil",
    "wcstod",
    "_get_tzname",
    "vprintf",
    "strtoul",
    "_ui64tow",
    "_local_unwind4",
    "_pipe",
    "void (__cdecl*__cdecl _set_se_translator(void (__cdecl*)(unsigned int,struct _EXCEPTION_POINTERS *)))(unsigned int,struct _EXCEPTION_POINTERS *)",
    "_mbscspn",
    "_stricmp_l",
    "_execvpe",
    "_wcstoi64_l",
    "_wfdopen",
    "public: void __thiscall Concurrency::details::_Context::`default constructor closure'(void)",
    "_umask_s",
    "public: bool __thiscall Concurrency::details::_SpinWait<0>::_SpinOnce(void)",
    "public: void __thiscall type_info::_type_info_dtor_internal_method(void)",
    "iswxdigit",
    "_ismbcsymbol",
    "_mbsnbset_l",
    "_vprintf_s_l",
    "_atoi64",
    "_mbspbrk_l",
    "_vcprintf",
    "__CxxFrameHandler",
    "_fpieee_flt",
    "_c_exit",
    "_isxdigit_l",
    "public: __thiscall Concurrency::details::_TaskCollection::_TaskCollection(void)",
    "_wremove",
    "public: void __thiscall Concurrency::details::_ReaderWriterLock::_AcquireRead(void)",
    "_mbsrchr",
    "_mbscspn_l",
    "public: __thiscall Concurrency::scheduler_worker_creation_error::scheduler_worker_creation_error(long)",
    "_Atomic_fetch_xor_1",
    "_iswlower_l",
    "public: static void __cdecl Concurrency::CurrentScheduler::ScheduleTask(void (__cdecl*)(void *),void *,class Concurrency::location &)",
    "_wmktemp_s",
    "_spawnle",
    "_wpopen",
    "_mbstrlen_l",
    "public: void __thiscall Concurrency::details::_SpinWait<1>::`default constructor closure'(void)",
    "_CIpow",
    "_wctomb_s_l",
    "public: static class Concurrency::ScheduleGroup * __cdecl Concurrency::CurrentScheduler::CreateScheduleGroup(void)",
    "putwc",
    "_strset",
    "putchar",
    "_Atomic_is_lock_free_8",
    "__STRINGTOLD",
    "_wtol_l",
    "_copysign",
    "_wrmdir",
    "_CreateFrameInfo",
    "__libm_sse2_powf",
    "_fseeki64_nolock",
    "getwc",
    "public: void __thiscall Concurrency::event::reset(void)",
    "public: void __thiscall Concurrency::reader_writer_lock::lock_read(void)",
    "_wcslwr_l",
    "_wcsupr",
    "_heapset",
    "_findnext32i64",
    "_wstat64i32",
    "_ungetch_nolock",
    "_wcsicmp",
    "public: __thiscall Concurrency::invalid_operation::invalid_operation(void)",
    "_snprintf_l",
    "_FindAndUnlinkFrame",
    "int __cdecl _ValidateWrite(void *,unsigned int)",
    "_atol_l",
    "__crtLCMapStringW",
    "public: __thiscall std::exception::exception(class std::exception const &)",
    "_cprintf_p_l",
    "_vfprintf_l",
    "iswctype",
    "public: __thiscall Concurrency::scheduler_resource_allocation_error::scheduler_resource_allocation_error(long)",
    "_ismbcalpha",
    "_strtoi64_l",
    "fopen",
    "_tzname",
    "_crt_debugger_hook",
    "_Atomic_is_lock_free_2",
    "_fdopen",
    "struct Concurrency::details::_CONCRT_TRACE_INFO const * __cdecl Concurrency::_GetConcRTTraceInfo(void)",
    "_mbsnbcpy",
    "int __cdecl _is_exception_typeof(class type_info const &,struct _EXCEPTION_POINTERS *)",
    "_ismbchira",
    "fputwc",
    "public: __thiscall Concurrency::improper_scheduler_reference::improper_scheduler_reference(void)",
    "_vswprintf_p_l",
    "_getw",
    "_isdigit_l",
    "_set_errno",
    "__daylight",
    "strncpy_s",
    "_mbsnbcat_l",
    "public: bool __thiscall Concurrency::reader_writer_lock::try_lock_read(void)",
    "btowc",
    "_freea_s",
    "__get_tlsindex",
    "wcsxfrm",
    "_ltow_s",
    "_ungetwch",
    "_memicmp_l",
    "tanh",
    "_freefls",
    "_wcsrev",
    "__crtTerminateProcess",
    "_ftime32_s",
    "__libm_sse2_asinf",
    "sprintf_s",
    "_findclose",
    "_resetstkoflw",
    "iswalnum",
    "_Atomic_fetch_and_2",
    "_mbctombb",
    "_ungetwc_nolock",
    "int __cdecl _ValidateRead(void const *,unsigned int)",
    "protected: unsigned long __thiscall Concurrency::details::_SpinWait<0>::_NumberOfSpins(void)",
    "__get_current_locale",
    "_daylight",
    "wcsncat",
    "_ismbbkana",
    "public: __thiscall Concurrency::nested_scheduler_missing_detach::nested_scheduler_missing_detach(void)",
    "_ismbbprint_l",
    "__swprintf_l",
    "_invoke_watson",
    "protected: void __thiscall Concurrency::details::_Timer::_Stop(void)",
    "_gmtime32",
    "_CItanh",
    "log10",
    "public: static void __cdecl Concurrency::Context::Oversubscribe(bool)",
    "_wprintf_p_l",
    "_Atomic_compare_exchange_weak_4",
    "_scwprintf_l",
    "_mbstok_s_l",
    "mblen",
    "_strtime",
    "fscanf_s",
    "_Atomic_store_8",
    "mbsrtowcs_s",
    "_flushall",
    "_wperror",
    "_iswgraph_l",
    "_vfwprintf_p",
    "public: static unsigned int __cdecl Concurrency::CurrentScheduler::Id(void)",
    "_mbsnbicoll_l",
    "_isalnum_l",
    "void __cdecl Concurrency::details::_UnderlyingYield(void)",
    "_mbsnbcpy_s_l",
    "long __cdecl Concurrency::EnableTracing(void)",
    "_vfwprintf_l",
    "_Lock_shared_ptr_spin_lock",
    "clearerr_s",
    "_mbclen_l",
    "public: long __thiscall Concurrency::scheduler_resource_allocation_error::get_error_code(void)const",
    "__p___argv",
    "_fstat64",
    "__badioinfo",
    "scanf_s",
    "public: __thiscall std::exception::exception(char const * const &)",
    "_wtoi_l",
    "_libm_sse2_tan_precise",
    "__CxxQueryExceptionSize",
    "_wgetenv_s",
    "_snscanf",
    "_wfindfirst64",
    "public: class std::__non_rtti_object & __thiscall std::__non_rtti_object::operator=(class std::__non_rtti_object const &)",
    "_ui64tow_s",
    "__CxxRegisterExceptionObject",
    "_cexit",
    "cosh",
    "_swprintf_s_l",
    "_spawnlpe",
    "_fprintf_p",
    "_fscanf_l",
    "public: bool __thiscall Concurrency::reader_writer_lock::try_lock(void)",
    "sinh",
    "_strdate",
    "public: __thiscall Concurrency::reader_writer_lock::scoped_lock::~scoped_lock(void)",
    "_memccpy",
    "_scwprintf_p_l",
    "__winitenv",
    "public: void __thiscall Concurrency::reader_writer_lock::unlock(void)",
    "_libm_sse2_exp_precise",
    "_mbctohira",
    "_creat",
    "public: bool __thiscall Concurrency::details::_ReaderWriterLock::_TryAcquireWrite(void)",
    "_Atomic_flag_test_and_set",
    "_findnext32",
    "_execve",
    "__crtSetUnhandledExceptionFilter",
    "_strlwr_l",
    "public: static void __cdecl Concurrency::details::_Context::_Oversubscribe(bool)",
    "_snwscanf_l",
    "putwchar",
    "_jn",
    "_ismbbgraph",
    "_wsearchenv",
    "_Atomic_compare_exchange_strong_1",
    "public: bool __thiscall type_info::before(class type_info const &)const",
    "__p__fmode",
    "bool __cdecl __ExceptionPtrToBool(void const *)",
    "__crtLCMapStringA",
    "_wutime32",
    "_libm_sse2_sin_precise",
    "_wmktemp",
    "_invalid_parameter",
    "_fwscanf_s_l",
    "_fprintf_p_l",
    "mbstowcs_s",
    "_cscanf",
    "_wsopen",
    "public: unsigned int __thiscall Concurrency::SchedulerPolicy::SetPolicyValue(enum Concurrency::PolicyElementKey,unsigned int)",
    "_atoflt_l",
    "abs",
    "_wcsnicmp",
    "_libm_sse2_asin_precise",
    "_ismbbalnum_l",
    "_global_unwind2",
    "int __cdecl _open(char const *,int,int)",
    "public: static void __cdecl Concurrency::CurrentScheduler::RegisterShutdownEvent(void *)",
    "_mbsicoll_l",
    "public: void __thiscall Concurrency::details::_StructuredTaskCollection::_Schedule(class Concurrency::details::_UnrealizedChore *)",
    "_Atomic_compare_exchange_weak",
    "public: void __thiscall Concurrency::details::_NonReentrantPPLLock::_Release(void)",
    "_wcsnset",
    "_vscwprintf_l",
    "strtol",
    "struct Concurrency::IResourceManager * __cdecl Concurrency::CreateResourceManager(void)",
    "_execl",
    "_vsnprintf_s_l",
    "protected: void __thiscall Concurrency::details::_UnrealizedChore::_CheckTaskCollection(void)",
    "_hypot",
    "public: __thiscall std::exception::exception(void)",
    "public: static class Concurrency::location __cdecl Concurrency::location::from_numa_node(unsigned short)",
    "towupper",
    "_iswctype_l",
    "_mbstok",
    "_vscprintf",
    "_execv",
    "public: __thiscall Concurrency::improper_lock::improper_lock(void)",
    "_vfprintf_p",
    "_initptd",
    "public: __thiscall Concurrency::invalid_scheduler_policy_value::invalid_scheduler_policy_value(void)",
    "memmove",
    "public: bool __thiscall Concurrency::critical_section::try_lock(void)",
    "void (__cdecl*__cdecl set_new_handler(void (__cdecl*)(void)))(void)",
    "bool __cdecl __ExceptionPtrCompare(void const *,void const *)",
    "__isascii",
    "_fprintf_s_l",
    "_mbsnbcoll",
    "_mktemp",
    "_endthread",
    "_amsg_exit",
    "public: bool __thiscall Concurrency::details::_Condition_variable::wait_for(class Concurrency::critical_section &,unsigned int)",
    "_printf_p",
    "_get_dstbias",
    "void __cdecl __ExceptionPtrRethrow(void const *)",
    "_mbsnset_s_l",
    "_wfindnext64",
    "_cwprintf_p_l",
    "_ismbbtrail_l",
    "_cwprintf_p",
    "_difftime64",
    "_wtoi64_l",
    "_iswupper_l",
    "_wtof",
    "_cprintf",
    "_i64tow_s",
    "_mbsnbcat",
    "_filelengthi64",
    "_rmtmp",
    "_getwch_nolock",
    "_toupper",
    "public: __thiscall Concurrency::SchedulerPolicy::~SchedulerPolicy(void)",
    "public: __thiscall Concurrency::message_not_found::message_not_found(void)",
    "_spawnlp",
    "_putenv_s",
    "wcstol",
    "_wstrdate_s",
    "_isleadbyte_l",
    "_except_handler4_common",
    "public: __thiscall Concurrency::invalid_multiple_scheduling::invalid_multiple_scheduling(void)",
    "_fgetchar",
    "_outp",
    "_sscanf_s_l",
    "private: void __thiscall std::exception::_Copy_str(char const *)",
    "void __cdecl __ExceptionPtrAssign(void *,void const *)",
    "_atof_l",
    "_mbsncpy_s_l",
    "_wctype",
    "_vwprintf_s_l",
    "_kbhit",
    "_strdup",
    "_vcprintf_p",
    "isspace",
    "strcat_s",
    "_isatty",
    "_Atomic_fetch_xor_4",
    "fgetws",
    "_wcreate_locale",
    "_mbsnbcnt_l",
    "const std::bad_typeid::`vftable'",
    "_ispunct_l",
    "void __cdecl __ExceptionPtrCreate(void *)",
    "__set_app_type",
    "_CIcos",
    "fabs",
    "__fpecode",
    "__p__daylight",
    "_Atomic_thread_fence",
    "_fstat64i32",
    "_mbsdec_l",
    "_mbsnbset_s_l",
    "_libm_sse2_cos_precise",
    "__libm_sse2_expf",
    "_chdrive",
    "isgraph",
    "public: void __thiscall Concurrency::details::_ReaderWriterLock::_AcquireWrite(void)",
    "_Atomic_fetch_sub_1",
    "_findfirst32",
    "putc",
    "public: void __thiscall Concurrency::details::_SpinWait<0>::`default constructor closure'(void)",
    "fwprintf",
    "__p__mbcasemap",
    "_vsnprintf_c_l",
    "strcspn",
    "_mbscoll",
    "_lock",
    "_chsize_s",
    "public: static void __cdecl Concurrency::CurrentScheduler::ScheduleTask(void (__cdecl*)(void *),void *)",
    "public: void __thiscall Concurrency::details::_NonReentrantBlockingLock::_Acquire(void)",
    "_mbsinc",
    "_vsnprintf",
    "_mbsnlen_l",
    "_wtoi",
    "public: unsigned int __thiscall Concurrency::event::wait(unsigned int)",
    "__p___wargv",
    "__libm_sse2_acos",
    "_putws",
    "public: bool __thiscall Concurrency::details::_Cancellation_beacon::_Confirm_cancel(void)",
    "_atoi64_l",
    "_unloaddll",
    "_ismbcl0_l",
    "_fread_nolock_s",
    "__libm_sse2_acosf",
    "_CIasin",
    "_mbtowc_l",
    "___setlc_active_func",
    "calloc",
    "__crtIsPackagedApp",
    "_iswalnum_l",
    "_strnicoll_l",
    "_fread_nolock",
    "feof",
    "public: __thiscall Concurrency::reader_writer_lock::scoped_lock_read::scoped_lock_read(class Concurrency::reader_writer_lock &)",
    "public: __thiscall Concurrency::scheduler_worker_creation_error::scheduler_worker_creation_error(char const *,long)",
    "__p__timezone",
    "public: __thiscall Concurrency::invalid_scheduler_policy_value::invalid_scheduler_policy_value(char const *)",
    "_mbsset_s_l",
    "_wstat64",
    "strpbrk",
    "_vprintf_l",
    "unsigned long __cdecl Concurrency::details::Log2(unsigned int)",
    "remove",
    "public: unsigned int __thiscall Concurrency::SchedulerPolicy::GetPolicyValue(enum Concurrency::PolicyElementKey)const",
    "_gmtime32_s",
    "sscanf_s",
    "_Atomic_fetch_or_8",
    "_strtoui64_l",
    "_wcstoui64_l",
    "int __cdecl _wsopen(wchar_t const *,int,int,int)",
    "__p__acmdln",
    "_strupr_s",
    "iswlower",
    "modf",
    "public: __thiscall Concurrency::context_unblock_unbalanced::context_unblock_unbalanced(char const *)",
    "_atoldbl",
    "_iswxdigit_l",
    "public: __thiscall Concurrency::details::_ReentrantPPLLock::_Scoped_lock::_Scoped_lock(class Concurrency::details::_ReentrantPPLLock &)",
    "fread_s",
    "public: __thiscall Concurrency::improper_scheduler_reference::improper_scheduler_reference(char const *)",
    "_vsprintf_l",
    "_cprintf_s_l",
    "localeconv",
    "strlen",
    "_mbsnlen",
    "_mbsset_l",
    "public: static class Concurrency::details::_Context __cdecl Concurrency::details::_Context::_CurrentContext(void)",
    "public: static class Concurrency::Context * __cdecl Concurrency::Context::CurrentContext(void)",
    "_itoa",
    "_wcsupr_s",
    "public: __thiscall Concurrency::reader_writer_lock::~reader_writer_lock(void)",
    "_iswcsym_l",
    "public: void __thiscall Concurrency::critical_section::lock(void)",
    "public: void __thiscall Concurrency::details::_ReentrantLock::_Acquire(void)",
    "_mbslwr_s_l",
    "strcoll",
    "public: static class Concurrency::Scheduler * __cdecl Concurrency::CurrentScheduler::Get(void)",
    "__p__tzname",
    "fsetpos",
    "_Wcsftime",
    "_mbbtombc_l",
    "_wrename",
    "_ismbbalpha",
    "_mbsnicoll",
    "_ismbstrail",
    "_futime64",
    "_atoflt",
    "_vsnwprintf_s_l",
    "public: bool __thiscall Concurrency::critical_section::try_lock_for(unsigned int)",
    "_wenviron",
    "_configthreadlocale",
    "_strnset_s",
    "_fcvt_s",
    "_CxxThrowException",
    "_mbccpy_s_l",
    "_mbsnbcoll_l",
    "_mbsupr_s_l",
    "_printf_s_l",
    "public: static void __cdecl Concurrency::Context::_SpinYield(void)",
    "_Unlock_spin_lock",
    "isupper",
    "_execvp",
    "public: static unsigned int __cdecl Concurrency::Context::Id(void)",
    "_mbscat_s_l",
    "__unguarded_readlc_active",
    "_atoi_l",
    "_vwprintf_p_l",
    "mbtowc",
    "_aligned_offset_recalloc",
    "__pxcptinfoptrs",
    "_abs64",
    "_callnewh",
    "__CxxFrameHandler3",
    "_errno",
    "_ismbbkprint_l",
    "_mbsspnp_l",
    "_mbstok_l",
    "_open",
    "vwprintf_s",
    "wctomb",
    "__libm_sse2_tanf",
    "_NLG_Return2",
    "_swprintf_c",
    "public: bool __thiscall Concurrency::details::_Context::_IsSynchronouslyBlocked(void)const",
    "_wspawnl",
    "puts",
    "_access_s",
    "_mkgmtime32",
    "int (__cdecl*__cdecl _query_new_handler(void))(unsigned int)",
    "_ismbcupper_l",
    "_getwche",
    "strcpy",
    "_strftime_l",
    "public: __thiscall Concurrency::context_self_unblock::context_self_unblock(void)",
    "getchar",
    "public: __thiscall Concurrency::details::_ReaderWriterLock::_ReaderWriterLock(void)",
    "_cprintf_p",
    "public: void __thiscall Concurrency::details::_ReaderWriterLock::_ReleaseRead(void)",
    "_CIexp",
    "void * __cdecl operator new(unsigned int,int,char const *,int)",
    "_wutime64",
    "fwrite",
    "public: class Concurrency::details::_SpinWait<1> & __thiscall Concurrency::details::_SpinWait<1>::operator=(class Concurrency::details::_SpinWait<1> const &)",
    "_vsnwprintf_l",
    "_cwprintf_s",
    "public: void __thiscall Concurrency::details::_TaskCollection::_Schedule(class Concurrency::details::_UnrealizedChore *,class Concurrency::location *)",
    "__p___initenv",
    "bsearch_s",
    "_mbbtype",
    "sprintf",
    "rand_s",
    "sscanf",
    "gets_s",
    "public: __thiscall Concurrency::missing_wait::missing_wait(void)",
    "public: void __thiscall Concurrency::details::_ReaderWriterLock::_ReleaseWrite(void)",
    "wcsrtombs_s",
    "___unguarded_readlc_active_add_func",
    "_ctime64",
    "_seh_longjmp_unwind4",
    "_vsnwprintf",
    "_mbsncoll_l",
    "_localtime64_s",
    "perror",
    "_strerror_s",
    "_outpw",
    "_libm_sse2_sqrt_precise",
    "public: __thiscall Concurrency::details::_SpinLock::~_SpinLock(void)",
    "_heapused",
    "_dosmaperr",
    "_vsnprintf_s",
    "void (__cdecl*__cdecl set_unexpected(int))(void)",
    "__p___argc",
    "_cgetws",
    "private: void __thiscall Concurrency::details::_CancellationTokenRegistration::_Invoke(void)",
    "public: virtual char const * __thiscall std::exception::what(void)const",
    "__BuildCatchObjectHelper",
    "_sscanf_l",
    "_get_purecall_handler",
    "_itow_s",
    "_wcslwr_s_l",
    "abort",
    "_ftime64",
    "public: bool __thiscall Concurrency::details::_ReentrantBlockingLock::_TryAcquire(void)",
    "_Atomic_compare_exchange_strong_8",
    "_vswprintf_p",
    "_execle",
    "_mbsstr_l",
    "_CIatan",
    "_dstbias",
    "_mbsstr",
    "_ungetc_nolock",
    "public: static unsigned int __cdecl Concurrency::details::_SpinCount::_Value(void)",
    "void __cdecl Concurrency::details::_ConcRT_CoreAssert(char const *,char const *,int)",
    "_mbsnbcat_s",
    "_getdllprocaddr",
    "public: static class Concurrency::ScheduleGroup * __cdecl Concurrency::CurrentScheduler::CreateScheduleGroup(class Concurrency::location &)",
    "_onexit",
    "_ctime64_s",
    "private: virtual void __thiscall Concurrency::details::_AsyncTaskCollection::_Destroy(void)",
    "_CIlog10",
    "_vswprintf_c_l",
    "wprintf_s",
    "_open_osfhandle",
    "protected: void __thiscall Concurrency::details::_SpinWait<1>::_DoYield(void)",
    "wcsnlen",
    "_stricmp",
    "_cprintf_l",
    "_wsopen_s",
    "unsigned int __cdecl Concurrency::GetExecutionContextId(void)",
    "_mktime64",
    "long __cdecl Concurrency::DisableTracing(void)",
    "_Atomic_fetch_and_8",
    "_lock_file",
    "_wfindnext64i32",
    "_wtof_l",
    "private: virtual void __thiscall Concurrency::details::_CancellationTokenState::_Destroy(void)",
    "_makepath_s",
    "_scprintf_l",
    "public: __thiscall Concurrency::operation_timed_out::operation_timed_out(char const *)",
    "_cputs",
    "_vcprintf_s_l",
    "_aligned_offset_malloc",
    "_mbsicmp",
    "wcrtomb",
    "_swprintf",
    "strncpy",
    "_mbsicoll",
    "public: __thiscall Concurrency::details::_TaskCollection::~_TaskCollection(void)",
    "_commode",
    "_swscanf_s_l",
    "___mb_cur_max_func",
    "_wtol",
    "_y0",
    "_CIfmod",
    "_get_unexpected",
    "void __cdecl Concurrency::Free(void *)",
    "_chdir",
    "_Atomic_compare_exchange_weak_1",
    "printf",
    "_cscanf_l",
    "__DestructExceptionObject",
    "__doserrno",
    "freopen_s",
    "fgetpos",
    "__unDNameHelper",
    "_IsExceptionObjectToBeDestroyed",
    "_j1",
    "public: static class Concurrency::location __cdecl Concurrency::location::current(void)",
    "_mbsncat_l",
    "_wopen",
    "_aligned_recalloc",
    "__strncnt",
    "_controlfp_s",
    "_cscanf_s_l",
    "_NLG_Dispatch2",
    "_acmdln",
    "public: bool __thiscall Concurrency::details::_ReentrantLock::_TryAcquire(void)",
    "__libm_sse2_atan2",
    "_swprintf_c_l",
    "system",
    "___lc_codepage_func",
    "_wprintf_l",
    "_execlp",
    "_ismbbkpunct",
    "_wfsopen",
    "int __cdecl _sopen(char const *,int,int,int)",
    "_futime32",
    "__report_gsfailure",
    "wcsftime",
    "_ultoa",
    "__libm_sse2_sin",
    "_umask",
    "__initenv",
    "public: __thiscall Concurrency::reader_writer_lock::scoped_lock::scoped_lock(class Concurrency::reader_writer_lock &)",
    "_cwprintf",
    "__RTDynamicCast",
    "_fmode",
    "_wexeclp",
    "_read",
    "_libm_sse2_pow_precise",
    "public: bool __thiscall type_info::operator!=(class type_info const &)const",
    "wcstombs",
    "__threadhandle",
    "_vswprintf_c",
    "_iswdigit_l",
    "rand",
    "_mbslen_l",
    "_mbscmp_l",
    "fputs",
    "public: __thiscall Concurrency::improper_scheduler_detach::improper_scheduler_detach(char const *)",
    "wcsrtombs",
    "__CxxUnregisterExceptionObject",
    "_endthreadex",
    "_mbcjistojms",
    "_Getmonths",
    "void __cdecl __ExceptionPtrCopy(void *,void const *)",
    "public: class Concurrency::Scheduler * __thiscall Concurrency::details::_Scheduler::_GetScheduler(void)",
    "__wcserror_s",
    "_nextafter",
    "clock",
    "_ltoa_s",
    "_fstat32i64",
    "_cputws",
    "public: __thiscall Concurrency::task_canceled::task_canceled(void)",
    "_lfind_s",
    "_chmod",
    "__libm_sse2_cosf",
    "_mbsnextc_l",
    "public: enum Concurrency::details::_TaskCollectionStatus __stdcall Concurrency::details::_TaskCollection::_RunAndWait(class Concurrency::details::_UnrealizedChore *)",
    "public: static class Concurrency::details::_AsyncTaskCollection * __cdecl Concurrency::details::_AsyncTaskCollection::_NewCollection(class Concurrency::details::_CancellationTokenState *)",
    "_makepath",
    "_mbslwr_l",
    "is_wctype",
    "__iswcsymf",
    "_strupr_l",
    "_lrotl",
    "wcslen",
    "__threadid",
    "_fclose_nolock",
    "_fwprintf_s_l",
    "_ctime32_s",
    "_mbspbrk",
    "_rotl64",
    "_strupr_s_l",
    "const std::bad_cast::`vftable'",
    "_get_daylight",
    "public: __thiscall Concurrency::improper_scheduler_attach::improper_scheduler_attach(void)",
    "_mbsset",
    "public: __thiscall std::exception::exception(char const * const &,int)",
    "_wtempnam",
    "_ismbbkpunct_l",
    "__crtCompareStringW",
    "_ismbblead",
    "public: __thiscall Concurrency::improper_scheduler_attach::improper_scheduler_attach(char const *)",
    "_Unlock_shared_ptr_spin_lock",
    "public: bool __thiscall Concurrency::details::_NonReentrantBlockingLock::_TryAcquire(void)",
    "qsort_s",
    "_ismbcprint",
    "getwchar",
    "setvbuf",
    "_CItan",
    "_sleep",
    "_eof",
    "_fprintf_l",
    "_wcstoui64",
    "_wcsicoll",
    "public: __thiscall Concurrency::details::_ReentrantPPLLock::_ReentrantPPLLock(void)",
    "fmod",
    "public: void __thiscall std::bad_cast::`default constructor closure'(void)",
    "_ftol",
    "public: __thiscall Concurrency::invalid_link_target::invalid_link_target(void)",
    "fscanf",
    "_clearfp",
    "isalpha",
    "_ismbcl2",
    "public: static unsigned int __cdecl Concurrency::Context::ScheduleGroupId(void)",
    "_mbctoupper_l",
    "_fcloseall",
    "__p__iob",
    "_wsplitpath",
    "public: __thiscall Concurrency::context_unblock_unbalanced::context_unblock_unbalanced(void)",
    "private: static char const * __cdecl type_info::_Name_base_internal(class type_info const *,struct __type_info_node *)",
    "scanf",
    "_spawnl",
    "_mbsnbcnt",
    "_unlock",
    "public: static void __cdecl Concurrency::CurrentScheduler::Create(class Concurrency::SchedulerPolicy const &)",
    "_mbctolower_l",
    "_mbsncmp_l",
    "_wcsupr_s_l",
    "_libm_sse2_atan_precise",
    "_create_locale",
    "cos",
    "_mbstrnlen_l",
    "_fputchar",
    "_wfreopen",
    "_wtmpnam_s",
    "__iscsymf",
    "_vsprintf_p",
    "_scanf_l",
    "_cwscanf_s",
    "_fwprintf_l",
    "_yn",
    "_isupper_l",
    "__CxxDetectRethrow",
    "private: void __thiscall Concurrency::details::_StructuredTaskCollection::_CleanupToken(void)",
    "_cwscanf_l",
    "_wunlink",
    "public: __thiscall Concurrency::details::_ReentrantBlockingLock::_ReentrantBlockingLock(void)",
    "__p__wpgmptr",
    "_ui64toa",
    "private: __thiscall Concurrency::details::_CancellationTokenState::_CancellationTokenState(void)",
    "_mbscat_s",
    "_ultow_s",
    "_Atomic_load_4",
    "public: __thiscall std::bad_typeid::bad_typeid(class std::bad_typeid const &)",
    "_snwscanf",
    "_ftime64_s",
    "public: void __thiscall std::bad_typeid::`default constructor closure'(void)",
    "_stat32i64",
    "_wputenv",
    "strftime",
    "_mbsicmp_l",
    "_wcsxfrm_l",
    "void __cdecl Concurrency::wait(unsigned int)",
    "_Atomic_signal_fence",
    "public: bool __thiscall Concurrency::details::_StructuredTaskCollection::_IsCanceling(void)",
    "ungetwc",
    "protected: void __thiscall Concurrency::details::_SpinWait<0>::_DoYield(void)",
    "islower",
    "__setlc_active",
    "__mb_cur_max",
    "_ismbcgraph_l",
    "strchr",
    "_getche_nolock",
    "_wspawnvpe",
    "public: __thiscall Concurrency::critical_section::scoped_lock::~scoped_lock(void)",
    "void __cdecl Concurrency::set_task_execution_resources(unsigned short,struct _GROUP_AFFINITY *)",
    "__pctype_func",
    "_wcsnicoll_l",
    "__lconv_init",
    "_getdrives",
    "_wtoi64",
    "_snprintf_s",
    "_pwctype",
    "_lseek",
    "_Atomic_fetch_xor_8",
    "wscanf",
    "public: __thiscall Concurrency::missing_wait::missing_wait(char const *)",
    "_mbsnset",
    "ungetc",
    "_mbsncpy_s",
    "_scprintf",
    "_vcwprintf_s_l",
    "public: __thiscall Concurrency::details::_Cancellation_beacon::_Cancellation_beacon(void)",
    "_strtoul_l",
    "_pctype",
    "_utime32",
    "_isalpha_l",
    "_outpd",
    "int __cdecl swprintf(wchar_t *,unsigned int,wchar_t const *,...)",
    "frexp",
    "_Atomic_fetch_add_4",
    "_snscanf_s_l",
    "_get_invalid_parameter_handler",
    "ldexp",
    "_inpd",
    "_ismbclegal_l",
    "_Gettnames",
    "public: static unsigned int __cdecl Concurrency::details::_CurrentScheduler::_Id(void)",
    "void __cdecl __ExceptionPtrCopyException(void *,void const *,void const *)",
    "_lsearch",
    "_ismbcl1",
    "_mbsnbicmp_l",
    "_wmakepath_s",
    "_wspawnle",
    "asctime",
    "_vswprintf_s_l",
    "swscanf",
    "wcscspn",
    "fputc",
    "_scanf_s_l",
    "_putch_nolock",
    "_mkdir",
    "_Atomic_fetch_add_2",
    "_wexecvp",
    "_tolower",
    "getenv_s",
    "_itow",
    "_fstat32",
    "__p__pgmptr",
    "__iswcsym",
    "public: __thiscall Concurrency::bad_target::bad_target(void)",
    "_ctime32",
    "public: __thiscall Concurrency::SchedulerPolicy::SchedulerPolicy(void)",
    "_printf_p_l",
    "_exit",
    "_mbsrev_l",
    "_spawnvpe",
    "_Atomic_exchange_4",
    "_chkesp",
    "_Atomic_fetch_add_1",
    "_locking",
    "vfwprintf_s",
    "_snwprintf_s_l",
    "_mbstrnlen",
    "__pioinfo",
    "_Atomic_fetch_sub_4",
    "_ismbbalnum",
    "_swprintf_p_l",
    "_cgets_s",
    "_setjmp",
    "protected: __thiscall Concurrency::details::_Timer::_Timer(unsigned int,bool)",
    "_scwprintf",
    "_snwprintf_s",
    "_cwprintf_s_l",
    "_lfind",
    "_wcscoll_l",
    "atoi",
    "_getdrive",
    "public: void __thiscall Concurrency::details::_Scheduler::`default constructor closure'(void)",
    "_atoldbl_l",
    "__crtGetShowWindowMode",
    "strtok",
    "__libm_sse2_pow",
    "_abnormal_termination",
    "_heapchk",
    "int __cdecl swprintf(unsigned short *,unsigned int,unsigned short const *,...)",
    "__AdjustPointer",
    "_fseeki64",
    "__sys_nerr",
    "_ismbcgraph",
    "_set_doserrno",
    "_cwscanf",
    "iswdigit",
    "public: bool __thiscall Concurrency::details::_SpinWait<1>::_SpinOnce(void)",
    "_strtod_l",
    "_wcreat",
    "_setsystime",
    "_Atomic_exchange",
    "_set_abort_behavior",
    "public: void __thiscall Concurrency::details::_CancellationTokenState::_RegisterCallback(class Concurrency::details::_CancellationTokenRegistration *)",
    "_timezone",
    "_swprintf_p",
    "_wcstombs_s_l",
    "wscanf_s",
    "_mbsncat_s",
    "_ismbclower_l",
    "public: void __thiscall Concurrency::event::set(void)",
    "public: __thiscall std::__non_rtti_object::__non_rtti_object(class std::__non_rtti_object const &)",
    "_EH_prolog",
    "_mbsnextc",
    "public: virtual __thiscall std::bad_cast::~bad_cast(void)",
    "_wchmod",
    "_wsplitpath_s",
    "bsearch",
    "strxfrm",
    "_vswprintf_l",
    "public: char const * __thiscall type_info::raw_name(void)const",
    "_finite",
    "_ismbcspace_l",
    "_CIsinh",
    "public: __thiscall Concurrency::details::_NonReentrantPPLLock::_Scoped_lock::_Scoped_lock(class Concurrency::details::_NonReentrantPPLLock &)",
    "public: __thiscall Concurrency::scheduler_not_attached::scheduler_not_attached(char const *)",
    "_wgetdcwd",
    "_Atomic_fetch_xor_2",
    "__STRINGTOLD_L",
    "_wfullpath",
    "void (__cdecl*__cdecl _set_se_translator(int))(unsigned int,struct _EXCEPTION_POINTERS *)",
    "_set_output_format",
    "__unDNameEx",
    "public: __thiscall Concurrency::details::_Condition_variable::~_Condition_variable(void)",
    "_control87",
    "_malloc_crt",
    "public: class std::bad_typeid & __thiscall std::bad_typeid::operator=(class std::bad_typeid const &)",
    "_statusfp2",
    "__p__pwctype",
    "_getmaxstdio",
    "_beginthread",
    "_chgsign",
    "_wfindfirst32",
    "_setjmp3",
    "_controlfp",
    "_difftime32",
    "_ismbbkprint",
    "__p__wcmdln",
    "_ismbstrail_l",
    "freopen",
    "__lconv",
    "_snscanf_l",
    "public: __thiscall Concurrency::context_self_unblock::context_self_unblock(char const *)",
    "iswspace",
    "__CppXcptFilter",
    "_gmtime64",
    "fwscanf_s",
    "public: void __thiscall Concurrency::details::_StructuredTaskCollection::_Cancel(void)",
    "void * __cdecl Concurrency::Alloc(unsigned int)",
    "_get_timezone",
    "__crtCompareStringA",
    "private: void __thiscall std::exception::_Tidy(void)",
    "public: __thiscall Concurrency::message_not_found::message_not_found(char const *)",
    "public: void __thiscall Concurrency::details::_ReentrantPPLLock::_Release(void)",
    "_mbsspn",
    "_fpreset",
    "_Strftime",
    "_vcwprintf_l",
    "__wgetmainargs",
    "_mbctohira_l",
    "_iswprint_l",
    "ftell",
    "_stricoll",
    "_fullpath",
    "public: virtual __thiscall Concurrency::details::_CancellationTokenState::~_CancellationTokenState(void)",
    "_wfreopen_s",
    "_fflush_nolock",
    "_CIatan2",
    "_vscwprintf_p"
  ],
  "msvcrt.dll": [
    "public: __thiscall exception::exception(class exception const &)",
    "_stat64",
    "_vcprintf_p_l",
    "_ismbslead",
    "_mbsnbcpy_s",
    "vwprintf",
    "_adj_fptan",
    "wcscoll",
    "_wcsset_s",
    "_wputenv_s",
    "printf_s",
    "_isctype_l",
    "__CxxFrameHandler2",
    "_assert",
    "__wcsncnt",
    "_strlwr_s",
    "_sopen_s",
    "isdigit",
    "difftime",
    "_fgetwchar",
    "_wcsnicmp_l",
    "__p__pctype",
    "__dllonexit",
    "_towupper_l",
    "_strtol_l",
    "wcstombs_s",
    "_scalb",
    "exit",
    "_CrtCheckMemory",
    "_CrtMemDumpAllObjectsSince",
    "_sprintf_p_l",
    "_mbslwr_s",
    "asctime_s",
    "_get_winminor",
    "public: __thiscall bad_typeid::bad_typeid(char const *)",
    "_aligned_offset_malloc_dbg",
    "_wtempnam_dbg",
    "__libm_sse2_asin",
    "__crtGetLocaleInfoW",
    "_snprintf_s_l",
    "_ismbbpunct_l",
    "_CrtSetDbgFlag",
    "_heapadd",
    "_wgetcwd",
    "exp",
    "pow",
    "$I10_OUTPUT",
    "_wcmdln",
    "_mbslwr",
    "_fwscanf_l",
    "fprintf_s",
    "labs",
    "__libm_sse2_cos",
    "_strnicmp_l",
    "fwscanf",
    "_vcwprintf_p",
    "_snwscanf_s",
    "_mbcjmstojis_l",
    "public: virtual void * __thiscall bad_cast::`vector deleting destructor'(unsigned int)",
    "public: int __thiscall type_info::before(class type_info const &)const",
    "__libm_sse2_sinf",
    "_except_handler2",
    "fread",
    "_vscwprintf_p_l",
    "public: int __thiscall type_info::operator!=(class type_info const &)const",
    "iswalpha",
    "_ismbcpunct",
    "toupper",
    "realloc",
    "_ismbcalnum_l",
    "_sprintf_s_l",
    "_ismbbtrail",
    "_wcsnicoll",
    "_sopen",
    "mbrtowc",
    "_i64tow",
    "_iswspace_l",
    "_mbstowcs_s_l",
    "_wstrdate",
    "_set_fmode",
    "_mbsrev",
    "_get_wpgmptr",
    "_mbsnccnt_l",
    "fputws",
    "_ismbclegal",
    "__p__dstbias",
    "_mbsncpy_l",
    "ldiv",
    "_tempnam",
    "public: virtual void * __thiscall bad_typeid::`scalar deleting destructor'(unsigned int)",
    "_getdiskfree",
    "_woutput_s",
    "_mbctoupper",
    "strcat",
    "wcscpy_s",
    "vswprintf",
    "_strcmpi",
    "_aligned_offset_realloc_dbg",
    "_splitpath_s",
    "_vscwprintf",
    "_snscanf_s",
    "_strtime_s",
    "__p__amblksiz",
    "_localtime64",
    "_chvalidator",
    "_CrtSetAllocHook",
    "_set_fileinfo",
    "public: void __thiscall bad_cast::`default constructor closure'(void)",
    "strrchr",
    "_mbclen",
    "_mbsnbcpy_l",
    "_snprintf",
    "_wprintf_s_l",
    "wcstoul",
    "_strncoll_l",
    "__crtGetStringTypeW",
    "_ultow",
    "div",
    "public: virtual __thiscall __non_rtti_object::~__non_rtti_object(void)",
    "_swab",
    "_ismbblead_l",
    "int __cdecl _set_new_mode(int)",
    "_expand_dbg",
    "wctomb_s",
    "strncat",
    "_ecvt_s",
    "_close",
    "_mbsupr",
    "__p__osver",
    "_tempnam_dbg",
    "_freea",
    "__p__commode",
    "_i64toa",
    "_CIsin",
    "_write",
    "public: virtual __thiscall exception::~exception(void)",
    "_time64",
    "fclose",
    "fwprintf_s",
    "__CxxCallUnwindDtor",
    "_wcserror_s",
    "_wscanf_l",
    "wcsncpy",
    "vfprintf",
    "strcpy_s",
    "_swscanf_l",
    "_wsearchenv_s",
    "_expand",
    "clearerr",
    "iswgraph",
    "_isctype",
    "_fullpath_dbg",
    "_fpclass",
    "_get_doserrno",
    "_calloc_dbg",
    "_adj_fdivr_m16i",
    "_ltow",
    "_spawnvp",
    "_findfirst64",
    "_ftime32",
    "_ismbbgraph_l",
    "_splitpath",
    "_wcsftime_l",
    "__CxxCallUnwindDelDtor",
    "_iscntrl_l",
    "_beginthreadex",
    "_mbsncpy",
    "wcsspn",
    "_getdcwd",
    "vswprintf_s",
    "void __cdecl operator delete(void *)",
    "atof",
    "_wcstombs_l",
    "tan",
    "wcsrchr",
    "tmpnam",
    "memcpy",
    "_get_wenviron",
    "_getsystime",
    "public: class bad_cast & __thiscall bad_cast::operator=(class bad_cast const &)",
    "__libm_sse2_exp",
    "_aligned_offset_realloc",
    "free",
    "_findfirsti64",
    "_getwch",
    "_mbsbtype",
    "_local_unwind2",
    "_wcserror",
    "_mbsdec",
    "_vsprintf_p_l",
    "_seterrormode",
    "_wtmpnam",
    "fgetwc",
    "__libm_sse2_logf",
    "_osplatform",
    "strerror_s",
    "_ismbcalpha_l",
    "isprint",
    "_isnan",
    "_findnext",
    "_CIacos",
    "_isprint_l",
    "_get_osplatform",
    "_telli64",
    "_purecall",
    "_searchenv_s",
    "_wgetenv",
    "__p___winitenv",
    "_aligned_malloc",
    "_vfwprintf_s_l",
    "_pclose",
    "void (__cdecl*__cdecl set_unexpected(void (__cdecl*)(void)))(void)",
    "_mbcasemap",
    "_flsbuf",
    "_strset_s",
    "_chsize",
    "getenv",
    "__p___mb_cur_max",
    "malloc",
    "_CrtDbgReport",
    "public: class __non_rtti_object & __thiscall __non_rtti_object::operator=(class __non_rtti_object const &)",
    "iswupper",
    "iswascii",
    "_spawnv",
    "_ismbcspace",
    "_winput_s",
    "_wcsdup_dbg",
    "_dup2",
    "_tolower_l",
    "_mbsnset_l",
    "public: virtual __thiscall type_info::~type_info(void)",
    "_adj_fpatan",
    "_ismbcprint_l",
    "_ftol2_sse",
    "__RTtypeid",
    "_mbsspn_l",
    "strncat_s",
    "_ismbckata",
    "_set_sbh_threshold",
    "_filelength",
    "_wchdir",
    "_cwait",
    "_sys_nerr",
    "_mbccpy_s",
    "_localtime32",
    "_XcptFilter",
    "_wmakepath",
    "ferror",
    "_aligned_free",
    "_get_osfhandle",
    "_ftime",
    "fflush",
    "_commit",
    "_getws",
    "_spawnve",
    "vsprintf",
    "_set_error_mode",
    "strerror",
    "_HUGE",
    "qsort",
    "tmpnam_s",
    "void __cdecl operator delete[](void *)",
    "_strnicoll",
    "setbuf",
    "_snwprintf",
    "_get_fmode",
    "_except_handler3",
    "_adj_fdiv_m32",
    "iscntrl",
    "_strxfrm_l",
    "_mbscoll_l",
    "__lc_handle",
    "_vprintf_p",
    "_heapwalk",
    "__p__mbctype",
    "_wstrtime_s",
    "isxdigit",
    "_mktemp_s",
    "_rotr64",
    "_mbsupr_l",
    "_get_output_format",
    "wcscat",
    "_mbsnccnt",
    "_CrtSetDumpClient",
    "_time32",
    "_mkgmtime64",
    "_filbuf",
    "_ismbbprint",
    "_setmode",
    "_ismbbkalnum",
    "_wutime",
    "utime",
    "strtod",
    "fprintf",
    "_mbscmp",
    "_wcstoi64",
    "towlower",
    "_sys_errlist",
    "_snprintf_c_l",
    "_rotr",
    "public: __thiscall __non_rtti_object::__non_rtti_object(class __non_rtti_object const &)",
    "_vcwprintf",
    "_strnset",
    "__wargv",
    "wcscmp",
    "isalnum",
    "___lc_collate_cp_func",
    "_wsystem",
    "log",
    "wcrtomb_s",
    "_towlower_l",
    "_wassert",
    "_mbschr",
    "_vfprintf_p_l",
    "_environ",
    "_iob",
    "_cgets",
    "_statusfp",
    "_islower_l",
    "_fputwchar",
    "_ungetch",
    "_cgetws_s",
    "_ismbcalnum",
    "void * __cdecl operator new[](unsigned int,int,char const *,int)",
    "_findnext64",
    "tmpfile",
    "_ismbcdigit_l",
    "_snwprintf_l",
    "_ecvt",
    "_wexecve",
    "mktime",
    "atol",
    "iswcntrl",
    "_Getdays",
    "atan",
    "void __cdecl terminate(void)",
    "__libm_sse2_log10",
    "public: virtual void * __thiscall exception::`scalar deleting destructor'(unsigned int)",
    "_mblen_l",
    "_wctime32_s",
    "public: class bad_typeid & __thiscall bad_typeid::operator=(class bad_typeid const &)",
    "_sprintf_l",
    "longjmp",
    "_wctime32",
    "_ismbckata_l",
    "vsprintf_s",
    "_wcstol_l",
    "memcpy_s",
    "_vsnprintf_c",
    "memchr",
    "_setmaxstdio",
    "vfprintf_s",
    "strnlen",
    "_loaddll",
    "_wcsupr_l",
    "_wsetlocale",
    "_iswcntrl_l",
    "fgetc",
    "_mbschr_l",
    "_j0",
    "_mbccpy",
    "_fstat",
    "int __cdecl _query_new_mode(void)",
    "wcsstr",
    "_vfprintf_s_l",
    "localtime",
    "wcscat_s",
    "_mbsncat_s_l",
    "_pgmptr",
    "_mbcjistojms_l",
    "__libm_sse2_log",
    "_strnicmp",
    "mbsrtowcs",
    "_mbsnbicoll",
    "_cprintf_s",
    "_putwch",
    "_safe_fdiv",
    "_fstati64",
    "_wfopen_s",
    "_wcsset",
    "__libm_sse2_tan",
    "__CxxExceptionFilter",
    "_aligned_free_dbg",
    "fopen_s",
    "_mbsnbset_s",
    "_wpgmptr",
    "_putw",
    "_seh_longjmp_unwind",
    "fseek",
    "acos",
    "swprintf_s",
    "wcsncat_s",
    "_putch",
    "_wspawnlpe",
    "_initterm_e",
    "_cwscanf_s_l",
    "_strdate_s",
    "_isspace_l",
    "__setusermatherr",
    "_vcwprintf_s",
    "_tzset",
    "atexit",
    "_mbstrlen",
    "public: __thiscall exception::exception(char const * const &,int)",
    "_atodbl_l",
    "_mbctolower",
    "_mbsnbcmp_l",
    "_toupper_l",
    "_strerror",
    "asin",
    "_mbsnbicmp",
    "_atodbl",
    "_vscprintf_l",
    "_popen",
    "_msize",
    "_wexecv",
    "_localtime32_s",
    "_printf_l",
    "_CIlog",
    "_lrotr",
    "_gcvt",
    "_execlpe",
    "_ismbcupper",
    "_wcsncoll_l",
    "__libm_sse2_log10f",
    "_gcvt_s",
    "strspn",
    "_get_fileinfo",
    "_fwprintf_p",
    "wprintf",
    "_dup",
    "_logb",
    "__iob_func",
    "_vsnwprintf_s",
    "memset",
    "mbrlen",
    "_vfwprintf_p_l",
    "wcsncpy_s",
    "_wctime64_s",
    "sqrt",
    "_strlwr",
    "_iswpunct_l",
    "_CrtMemCheckpoint",
    "_mbcjmstojis",
    "strtok_s",
    "_ismbbpunct",
    "_mbccpy_l",
    "_stricoll_l",
    "wcscpy",
    "_mbslen",
    "_wcsicmp_l",
    "_mbsbtype_l",
    "_mbctokata",
    "iswprint",
    "tolower",
    "_CrtReportBlockType",
    "_cabs",
    "vfwprintf",
    "getc",
    "fgets",
    "_mbsnbcat_s_l",
    "__getmainargs",
    "_mbbtombc",
    "_strtoui64",
    "_i64toa_s",
    "wcstok_s",
    "_mbsnset_s",
    "_mbctombb_l",
    "_mbctokata_l",
    "_mbstowcs_l",
    "_isgraph_l",
    "_ismbbkalnum_l",
    "_ltoa",
    "__p__environ",
    "_vcwprintf_p_l",
    "__unDName",
    "_fcvt",
    "_vprintf_p_l",
    "_CrtDbgReportWV",
    "_rmdir",
    "_wctime64",
    "_CrtSetReportHook2",
    "_mbsncmp",
    "_getmbcp",
    "_strlwr_s_l",
    "_ismbbalpha_l",
    "_fscanf_s_l",
    "_adj_fdivr_m64",
    "_lsearch_s",
    "_beep",
    "_wmkdir",
    "_utime64",
    "__dstbias",
    "_getche",
    "_mbsspnp",
    "_y1",
    "_wexecle",
    "wcschr",
    "__CxxLongjmpUnwind",
    "vprintf_s",
    "_cwprintf_l",
    "_ui64toa_s",
    "signal",
    "_futime",
    "_aligned_realloc",
    "_wcstod_l",
    "void * __cdecl operator new[](unsigned int)",
    "_getch",
    "_mbsncoll",
    "_wcsncoll",
    "_ultoa_s",
    "_wspawnve",
    "rename",
    "_ismbslead_l",
    "_wexecvpe",
    "const exception::`vftable'",
    "__p__winmajor",
    "__pwctype_func",
    "_fwprintf_p_l",
    "__argv",
    "__toascii",
    "_mbsninc_l",
    "_vswprintf",
    "_wcstoul_l",
    "wcsncmp",
    "private: __thiscall bad_cast::bad_cast(char const * const *)",
    "_cscanf_s",
    "__p__wenviron",
    "_CIsqrt",
    "_wctomb_l",
    "_wspawnlp",
    "iswpunct",
    "_inp",
    "isleadbyte",
    "public: __thiscall __non_rtti_object::__non_rtti_object(char const *)",
    "_scprintf_p_l",
    "floor",
    "_get_current_locale",
    "_setmbcp",
    "_mbsset_s",
    "_chvalidator_l",
    "_winmajor",
    "_CrtIsValidHeapPointer",
    "_wspawnvp",
    "wcspbrk",
    "memcmp",
    "_wcsicoll_l",
    "__argc",
    "_wfopen",
    "_wexeclpe",
    "void * __cdecl operator new(unsigned int)",
    "_mbsninc",
    "_ismbcl2_l",
    "_winver",
    "sin",
    "_ismbcdigit",
    "_wexecl",
    "__libm_sse2_atanf",
    "public: __thiscall bad_cast::bad_cast(char const *)",
    "_heapmin",
    "_waccess_s",
    "_strupr",
    "strcmp",
    "_wspawnv",
    "_vscprintf_p_l",
    "rewind",
    "public: virtual void * __thiscall __non_rtti_object::`vector deleting destructor'(unsigned int)",
    "_mbsnicmp_l",
    "void (__cdecl*__cdecl set_terminate(void (__cdecl*)(void)))(void)",
    "_mkgmtime",
    "_mbsupr_s",
    "_strtoi64",
    "const bad_cast::`vftable'",
    "_wcsdup",
    "_ismbcl0",
    "_snwscanf_s_l",
    "__RTCastToVoid",
    "_fsopen",
    "__iscsym",
    "_tell",
    "_searchenv",
    "_get_heap_handle",
    "_mbsnbset",
    "_strrev",
    "_wprintf_p",
    "atan2",
    "gets",
    "strncmp",
    "_vcprintf_s",
    "memmove_s",
    "__lc_collate_cp",
    "_longjmpex",
    "_memicmp",
    "_wcsnset_s",
    "_CrtDbgBreak",
    "_adjust_fdiv",
    "_mbsnicoll_l",
    "_waccess",
    "_lseeki64",
    "_free_locale",
    "_get_errno",
    "_set_SSE2_enable",
    "raise",
    "strstr",
    "_ismbcpunct_l",
    "_set_controlfp",
    "_ftol2_sse_excpt",
    "__uncaught_exception",
    "void __cdecl unexpected(void)",
    "_mbctype",
    "wcstok",
    "_vsnprintf_l",
    "_ismbcl1_l",
    "_ismbbkana_l",
    "_mbstok_s",
    "_mbscpy_s",
    "_wcslwr_s",
    "tmpfile_s",
    "_fileno",
    "_mbsnicmp",
    "_wstrtime",
    "_wasctime_s",
    "_snprintf_c",
    "_ftol2",
    "_mktime32",
    "_get_winver",
    "_wasctime",
    "_CIcosh",
    "_wcslwr",
    "_inpw",
    "_ismbcsymbol_l",
    "swscanf_s",
    "srand",
    "_access",
    "__libm_sse2_atan",
    "public: __thiscall exception::exception(char const * const &)",
    "_mbsnbcmp",
    "_CrtMemDumpStatistics",
    "_wctime",
    "_strncoll",
    "_vcprintf_l",
    "int (__cdecl*__cdecl _set_new_handler(int (__cdecl*)(unsigned int)))(unsigned int)",
    "_rotl",
    "_vsprintf_s_l",
    "_mbsrchr_l",
    "_mbscpy_s_l",
    "setlocale",
    "_aligned_malloc_dbg",
    "_ismbclower",
    "_vwprintf_l",
    "_ismbchira_l",
    "_itoa_s",
    "_gmtime64_s",
    "_mbsncat",
    "_vwprintf_p",
    "_getpid",
    "__wcserror",
    "_osver",
    "_wscanf_s_l",
    "mbstowcs",
    "_get_pgmptr",
    "_initterm",
    "wctob",
    "_putenv",
    "ispunct",
    "_iswalpha_l",
    "_unlink",
    "_mbsinc_l",
    "__p__fileinfo",
    "_getcwd",
    "_strcoll_l",
    "ceil",
    "wcstod",
    "vprintf",
    "strtoul",
    "_ui64tow",
    "_local_unwind4",
    "_pipe",
    "void (__cdecl*__cdecl _set_se_translator(void (__cdecl*)(unsigned int,struct _EXCEPTION_POINTERS *)))(unsigned int,struct _EXCEPTION_POINTERS *)",
    "_mbscspn",
    "_stricmp_l",
    "_execvpe",
    "_wcstoi64_l",
    "_wfdopen",
    "_umask_s",
    "_safe_fprem1",
    "iswxdigit",
    "_ismbcsymbol",
    "_mbsnbset_l",
    "_vprintf_s_l",
    "_atoi64",
    "_mbspbrk_l",
    "_vcprintf",
    "__CxxFrameHandler",
    "_fpieee_flt",
    "_c_exit",
    "_aligned_realloc_dbg",
    "_isxdigit_l",
    "_wremove",
    "gmtime",
    "_mbsrchr",
    "_mbscspn_l",
    "_iswlower_l",
    "_wmktemp_s",
    "_spawnle",
    "_wpopen",
    "_mbstrlen_l",
    "_CIpow",
    "_wctomb_s_l",
    "putwc",
    "_strset",
    "putchar",
    "__STRINGTOLD",
    "_wtol_l",
    "_copysign",
    "_wrmdir",
    "__libm_sse2_powf",
    "getwc",
    "_safe_fprem",
    "_wcslwr_l",
    "_wcsupr",
    "_heapset",
    "_wcsicmp",
    "_snprintf_l",
    "_atol_l",
    "__crtLCMapStringW",
    "_cprintf_p_l",
    "_vfprintf_l",
    "_malloc_dbg",
    "iswctype",
    "public: virtual void * __thiscall __non_rtti_object::`scalar deleting destructor'(unsigned int)",
    "_ismbcalpha",
    "_strtoi64_l",
    "fopen",
    "_tzname",
    "_CrtIsValidPointer",
    "_fdopen",
    "_mbsnbcpy",
    "_ismbchira",
    "fputwc",
    "_vswprintf_p_l",
    "_getw",
    "_aexit_rtn",
    "_isdigit_l",
    "__p__winver",
    "_utime",
    "_set_errno",
    "__daylight",
    "strncpy_s",
    "_mbsnbcat_l",
    "btowc",
    "_freea_s",
    "wcsxfrm",
    "_ltow_s",
    "_ungetwch",
    "_memicmp_l",
    "tanh",
    "_wcsrev",
    "_ftime32_s",
    "__libm_sse2_asinf",
    "sprintf_s",
    "_findclose",
    "_resetstkoflw",
    "_wfindnexti64",
    "iswalnum",
    "_mbctombb",
    "wcsncat",
    "_daylight",
    "_ismbbkana",
    "public: __thiscall exception::exception(void)",
    "_ismbbprint_l",
    "_gmtime32",
    "_CItanh",
    "log10",
    "_wprintf_p_l",
    "_scwprintf_l",
    "_mbstok_s_l",
    "mblen",
    "_strtime",
    "fscanf_s",
    "mbsrtowcs_s",
    "_flushall",
    "_wperror",
    "_iswgraph_l",
    "_vfwprintf_p",
    "_mbsnbicoll_l",
    "_isalnum_l",
    "_mbsnbcpy_s_l",
    "_vfwprintf_l",
    "clearerr_s",
    "_mbclen_l",
    "__p___argv",
    "_fstat64",
    "__badioinfo",
    "scanf_s",
    "_strdup_dbg",
    "_get_winmajor",
    "_wtoi_l",
    "public: __thiscall bad_typeid::bad_typeid(class bad_typeid const &)",
    "__CxxQueryExceptionSize",
    "_wgetenv_s",
    "_snscanf",
    "_wfindfirst64",
    "_ctype",
    "_CrtMemDifference",
    "_ui64tow_s",
    "__CxxRegisterExceptionObject",
    "_cexit",
    "cosh",
    "_swprintf_s_l",
    "_spawnlpe",
    "_fprintf_p",
    "_CrtSetReportMode",
    "_fscanf_l",
    "sinh",
    "_strdate",
    "_memccpy",
    "_scwprintf_p_l",
    "__winitenv",
    "_mbctohira",
    "_creat",
    "__CxxCallUnwindVecDtor",
    "_wfindnext",
    "public: class exception & __thiscall exception::operator=(class exception const &)",
    "_execve",
    "_strlwr_l",
    "_snwscanf_l",
    "putwchar",
    "_jn",
    "_ismbbgraph",
    "_wsearchenv",
    "__p__fmode",
    "__crtLCMapStringA",
    "_wutime32",
    "_wmktemp",
    "_invalid_parameter",
    "_fwscanf_s_l",
    "_fprintf_p_l",
    "mbstowcs_s",
    "_cscanf",
    "_wsopen",
    "_atoflt_l",
    "_adj_fdivr_m32",
    "abs",
    "_wcsnicmp",
    "_ismbbalnum_l",
    "_global_unwind2",
    "_CrtSetReportHook",
    "_mbsicoll_l",
    "_wcsnset",
    "_vscwprintf_l",
    "strtol",
    "_execl",
    "_vsnprintf_s_l",
    "_hypot",
    "swprintf",
    "towupper",
    "_iswctype_l",
    "_mbstok",
    "_adj_fdiv_m16i",
    "_execv",
    "_vscprintf",
    "_vfprintf_p",
    "memmove",
    "void (__cdecl*__cdecl set_new_handler(void (__cdecl*)(void)))(void)",
    "_CrtDbgReportV",
    "__isascii",
    "_fprintf_s_l",
    "_mbsnbcoll",
    "_mktemp",
    "_endthread",
    "_amsg_exit",
    "_printf_p",
    "_mbsnset_s_l",
    "_wfindnext64",
    "_cwprintf_p_l",
    "_ismbbtrail_l",
    "_cwprintf_p",
    "_difftime64",
    "_wtoi64_l",
    "_iswupper_l",
    "_wtof",
    "public: virtual char const * __thiscall exception::what(void)const",
    "_cprintf",
    "_i64tow_s",
    "_mbsnbcat",
    "_filelengthi64",
    "_rmtmp",
    "_toupper",
    "_spawnlp",
    "_putenv_s",
    "wcstol",
    "_wstrdate_s",
    "_isleadbyte_l",
    "_except_handler4_common",
    "_fgetchar",
    "_outp",
    "_sscanf_s_l",
    "_atof_l",
    "_mbsncpy_s_l",
    "_wctype",
    "_vwprintf_s_l",
    "_kbhit",
    "public: virtual void * __thiscall exception::`vector deleting destructor'(unsigned int)",
    "_strdup",
    "_vcprintf_p",
    "isspace",
    "strcat_s",
    "_isatty",
    "fgetws",
    "_adj_fdiv_r",
    "_mbsnbcnt_l",
    "__set_app_type",
    "_CIcos",
    "fabs",
    "__fpecode",
    "__p__daylight",
    "_mbscat",
    "_mbsdec_l",
    "_mbsnbset_s_l",
    "__libm_sse2_expf",
    "_chdrive",
    "isgraph",
    "putc",
    "fwprintf",
    "__p__mbcasemap",
    "public: virtual __thiscall bad_typeid::~bad_typeid(void)",
    "_vsnprintf_c_l",
    "strcspn",
    "_mbscoll",
    "_lock",
    "_chsize_s",
    "_mbsinc",
    "_vsnprintf",
    "__p__winminor",
    "_mbsnlen_l",
    "_wtoi",
    "_CrtSetReportFile",
    "__p___wargv",
    "__libm_sse2_acos",
    "_putws",
    "_atoi64_l",
    "_unloaddll",
    "_ismbcl0_l",
    "__libm_sse2_acosf",
    "_CIasin",
    "_mbtowc_l",
    "___setlc_active_func",
    "_wstat",
    "calloc",
    "_fileinfo",
    "_iswalnum_l",
    "_strnicoll_l",
    "feof",
    "__p__timezone",
    "_mbsset_s_l",
    "_wstat64",
    "strpbrk",
    "_vprintf_l",
    "remove",
    "_gmtime32_s",
    "sscanf_s",
    "_strtoui64_l",
    "_wcstoui64_l",
    "__p__acmdln",
    "_strupr_s",
    "_wfullpath_dbg",
    "iswlower",
    "modf",
    "_atoldbl",
    "_iswxdigit_l",
    "_adj_fdiv_m32i",
    "_vsprintf_l",
    "_cprintf_s_l",
    "localeconv",
    "strlen",
    "_mbsnlen",
    "_mbsset_l",
    "_itoa",
    "_wcsupr_s",
    "_mbslwr_s_l",
    "public: virtual void * __thiscall bad_cast::`scalar deleting destructor'(unsigned int)",
    "strcoll",
    "__p__tzname",
    "fsetpos",
    "_mbbtombc_l",
    "__lc_codepage",
    "_wrename",
    "public: void __thiscall bad_typeid::`default constructor closure'(void)",
    "_ismbbalpha",
    "public: virtual void * __thiscall bad_typeid::`vector deleting destructor'(unsigned int)",
    "_mbsnicoll",
    "_ismbstrail",
    "_futime64",
    "_vsnwprintf_s_l",
    "_wenviron",
    "_strnset_s",
    "_fcvt_s",
    "_CxxThrowException",
    "_mbccpy_s_l",
    "_mbsnbcoll_l",
    "_mbsupr_s_l",
    "_printf_s_l",
    "isupper",
    "_execvp",
    "_mbscat_s_l",
    "__unguarded_readlc_active",
    "_atoi_l",
    "_vwprintf_p_l",
    "mbtowc",
    "__pxcptinfoptrs",
    "_abs64",
    "_callnewh",
    "__CxxFrameHandler3",
    "_errno",
    "_ismbbkprint_l",
    "_mbsspnp_l",
    "_mbstok_l",
    "_open",
    "vwprintf_s",
    "wctomb",
    "__libm_sse2_tanf",
    "_swprintf_c",
    "_get_sbh_threshold",
    "_wspawnl",
    "puts",
    "_access_s",
    "_mkgmtime32",
    "int (__cdecl*__cdecl _query_new_handler(void))(unsigned int)",
    "_ismbcupper_l",
    "_getwche",
    "strcpy",
    "getchar",
    "_cprintf_p",
    "_CIexp",
    "void * __cdecl operator new(unsigned int,int,char const *,int)",
    "_wutime64",
    "fwrite",
    "_vsnwprintf_l",
    "_cwprintf_s",
    "__p___initenv",
    "bsearch_s",
    "_mbbtype",
    "sprintf",
    "_get_osver",
    "rand_s",
    "sscanf",
    "wcsrtombs_s",
    "___unguarded_readlc_active_add_func",
    "_ctime64",
    "_seh_longjmp_unwind4",
    "_vsnwprintf",
    "_mbsncoll_l",
    "_localtime64_s",
    "perror",
    "_strerror_s",
    "_adj_fprem1",
    "_outpw",
    "_CrtDoForAllClientObjects",
    "_heapused",
    "_vsnprintf_s",
    "__p___argc",
    "_cgetws",
    "_sscanf_l",
    "_itow_s",
    "_wcslwr_s_l",
    "abort",
    "_ftime64",
    "_execle",
    "_mbsstr_l",
    "_CIatan",
    "_dstbias",
    "_mbsstr",
    "_mbsnbcat_s",
    "_getdllprocaddr",
    "_onexit",
    "_ctime64_s",
    "_CIlog10",
    "_vswprintf_c_l",
    "wprintf_s",
    "_open_osfhandle",
    "wcsnlen",
    "_stricmp",
    "_cprintf_l",
    "_wsopen_s",
    "public: __thiscall bad_cast::bad_cast(class bad_cast const &)",
    "_mktime64",
    "_wtof_l",
    "_makepath_s",
    "_safe_fdivr",
    "_scprintf_l",
    "_cputs",
    "_vcprintf_s_l",
    "wcrtomb",
    "_mbsicmp",
    "_aligned_offset_malloc",
    "_swprintf",
    "strncpy",
    "_mbsicoll",
    "_commode",
    "_swscanf_s_l",
    "___mb_cur_max_func",
    "_wtol",
    "_y0",
    "_CIfmod",
    "_wfindfirst",
    "_chdir",
    "printf",
    "_cscanf_l",
    "_adj_fdivr_m32i",
    "__DestructExceptionObject",
    "__doserrno",
    "freopen_s",
    "fgetpos",
    "_msize_debug",
    "_j1",
    "const bad_typeid::`vftable'",
    "_mbsncat_l",
    "_wopen",
    "__strncnt",
    "_controlfp_s",
    "_cscanf_s_l",
    "_acmdln",
    "__libm_sse2_atan2",
    "_swprintf_c_l",
    "system",
    "_stat",
    "___lc_codepage_func",
    "_wprintf_l",
    "_execlp",
    "_ismbbkpunct",
    "_wfsopen",
    "_futime32",
    "_CrtDbgReportW",
    "wcsftime",
    "_ultoa",
    "__libm_sse2_sin",
    "_umask",
    "__initenv",
    "_cwprintf",
    "_adj_fdiv_m64",
    "__RTDynamicCast",
    "_fmode",
    "_wexeclp",
    "_read",
    "_CrtDumpMemoryLeaks",
    "wcstombs",
    "__threadhandle",
    "_vswprintf_c",
    "_iswdigit_l",
    "rand",
    "_mbslen_l",
    "_mbscmp_l",
    "fputs",
    "wcsrtombs",
    "__CxxUnregisterExceptionObject",
    "_endthreadex",
    "_mbscpy",
    "_mbcjistojms",
    "const __non_rtti_object::`vftable'",
    "_Getmonths",
    "__wcserror_s",
    "_nextafter",
    "clock",
    "_ltoa_s",
    "_cputws",
    "_lfind_s",
    "_chmod",
    "__libm_sse2_cosf",
    "_mbsnextc_l",
    "_makepath",
    "_mbslwr_l",
    "is_wctype",
    "_strupr_l",
    "_lrotl",
    "mbsdup_dbg",
    "wcslen",
    "__threadid",
    "_fwprintf_s_l",
    "_ctime32_s",
    "_mbspbrk",
    "_rotl64",
    "_get_environ",
    "_strupr_s_l",
    "_mbsset",
    "_wtempnam",
    "_ismbbkpunct_l",
    "__crtCompareStringW",
    "_ismbblead",
    "public: virtual __thiscall bad_cast::~bad_cast(void)",
    "qsort_s",
    "_ismbcprint",
    "getwchar",
    "setvbuf",
    "_CItan",
    "_sleep",
    "_eof",
    "_fprintf_l",
    "_wcstoui64",
    "_wcsicoll",
    "fmod",
    "_ftol",
    "fscanf",
    "_clearfp",
    "isalpha",
    "_ismbcl2",
    "_mbctoupper_l",
    "_fcloseall",
    "__p__iob",
    "_wsplitpath",
    "_CrtIsMemoryBlock",
    "scanf",
    "_spawnl",
    "_mbsnbcnt",
    "_unlock",
    "_mbctolower_l",
    "_mbsncmp_l",
    "_wcsupr_s_l",
    "_create_locale",
    "cos",
    "_mbstrnlen_l",
    "_fputchar",
    "_wfreopen",
    "_wtmpnam_s",
    "__iscsymf",
    "_vsprintf_p",
    "_scanf_l",
    "_cwscanf_s",
    "_fwprintf_l",
    "_yn",
    "_isupper_l",
    "__CxxDetectRethrow",
    "_cwscanf_l",
    "_wunlink",
    "__p__wpgmptr",
    "_ui64toa",
    "_mbscat_s",
    "_ultow_s",
    "_snwscanf",
    "_ftime64_s",
    "_wputenv",
    "strftime",
    "_mbsicmp_l",
    "___lc_handle_func",
    "_wcsxfrm_l",
    "ungetwc",
    "_free_dbg",
    "islower",
    "__setlc_active",
    "__mb_cur_max",
    "_ismbcgraph_l",
    "strchr",
    "_wspawnvpe",
    "_wstati64",
    "public: int __thiscall type_info::operator==(class type_info const &)const",
    "__pctype_func",
    "_wcsnicoll_l",
    "__lconv_init",
    "_getdrives",
    "_wtoi64",
    "time",
    "_snprintf_s",
    "_crtDbgFlag",
    "_pwctype",
    "_lseek",
    "wscanf",
    "_mbsnset",
    "ungetc",
    "_mbsncpy_s",
    "_scprintf",
    "_vcwprintf_s_l",
    "_strtoul_l",
    "_pctype",
    "_utime32",
    "_isalpha_l",
    "_outpd",
    "frexp",
    "_mbsdup",
    "_snscanf_s_l",
    "ldexp",
    "_inpd",
    "_ismbclegal_l",
    "_Gettnames",
    "_lsearch",
    "_ismbcl1",
    "_mbsnbicmp_l",
    "_wmakepath_s",
    "_wspawnle",
    "asctime",
    "_vswprintf_s_l",
    "swscanf",
    "wcscspn",
    "fputc",
    "_scanf_s_l",
    "_mkdir",
    "_wfindfirsti64",
    "_wexecvp",
    "_tolower",
    "getenv_s",
    "_itow",
    "__p__pgmptr",
    "_ctime32",
    "_printf_p_l",
    "_exit",
    "_mbsrev_l",
    "_spawnvpe",
    "_chkesp",
    "_findnexti64",
    "_locking",
    "vfwprintf_s",
    "_snwprintf_s_l",
    "_mbstrnlen",
    "ctime",
    "__pioinfo",
    "_ismbbalnum",
    "_swprintf_p_l",
    "_cgets_s",
    "_setjmp",
    "_findfirst",
    "_adj_fprem",
    "_scwprintf",
    "_snwprintf_s",
    "_cwprintf_s_l",
    "_CrtSetBreakAlloc",
    "_lfind",
    "_wcscoll_l",
    "atoi",
    "_getdrive",
    "_atoldbl_l",
    "_crtAssertBusy",
    "strtok",
    "__libm_sse2_pow",
    "_abnormal_termination",
    "_heapchk",
    "_fseeki64",
    "_ismbcgraph",
    "public: char const * __thiscall type_info::name(void)const",
    "_set_doserrno",
    "_cwscanf",
    "iswdigit",
    "_strtod_l",
    "_wcreat",
    "_setsystime",
    "_winminor",
    "_timezone",
    "_wcstombs_s_l",
    "wscanf_s",
    "_mbsncat_s",
    "_ismbclower_l",
    "_EH_prolog",
    "_mbsnextc",
    "_wchmod",
    "_wsplitpath_s",
    "bsearch",
    "strxfrm",
    "_vswprintf_l",
    "public: char const * __thiscall type_info::raw_name(void)const",
    "_finite",
    "_ismbcspace_l",
    "_CIsinh",
    "_wgetdcwd",
    "_wfullpath",
    "_crtBreakAlloc",
    "_set_output_format",
    "__unDNameEx",
    "_control87",
    "vsnprintf",
    "__p__pwctype",
    "_getmaxstdio",
    "_realloc_dbg",
    "_beginthread",
    "_chgsign",
    "_setjmp3",
    "_controlfp",
    "_stati64",
    "_difftime32",
    "_ismbbkprint",
    "__p__wcmdln",
    "_ismbstrail_l",
    "freopen",
    "_snscanf_l",
    "iswspace",
    "__CppXcptFilter",
    "_gmtime64",
    "fwscanf_s",
    "__crtCompareStringA",
    "_CrtSetDbgBlockType",
    "_mbsspn",
    "_fpreset",
    "_Strftime",
    "public: __thiscall bad_cast::bad_cast(char const * const &)",
    "_vcwprintf_l",
    "__wgetmainargs",
    "_mbctohira_l",
    "_iswprint_l",
    "ftell",
    "_stricoll",
    "_fullpath",
    "_wfreopen_s",
    "_CIatan2"
  ],
  "msvcrt20.dll": [
    "_wremove",
    "public: virtual void * __thiscall strstream::`scalar deleting destructor'(unsigned int)",
    "gmtime",
    "_adj_fprem1",
    "public: __thiscall ostrstream::ostrstream(void)",
    "public: int __thiscall ios::fail(void)const",
    "_heapused",
    "_ismbslead",
    "memchr",
    "protected: __thiscall ostream::ostream(void)",
    "_mbsrchr",
    "public: static long const ios::adjustfield",
    "_tcsnicmp",
    "_loaddll",
    "public: int __thiscall istream::peek(void)",
    "public: virtual int __thiscall strstreambuf::overflow(int)",
    "_wsetlocale",
    "protected: static void __cdecl ios::lockc(void)",
    "vwprintf",
    "public: __thiscall ostream::ostream(class streambuf *)",
    "protected: __thiscall ios::ios(class ios const &)",
    "public: class filebuf * __thiscall filebuf::close(void)",
    "public: class istream & __thiscall istream::putback(char)",
    "__p___argc",
    "_spawnle",
    "_wpopen",
    "fgetc",
    "public: class ostream & __thiscall ostream::write(unsigned char const *,int)",
    "_adj_fptan",
    "class ios & __cdecl hex(class ios &)",
    "protected: int __thiscall streambuf::unbuffered(void)const",
    "wcscoll",
    "_CIpow",
    "putwc",
    "const ofstream::`vftable'",
    "public: void * & __thiscall ios::pword(int)const",
    "_strset",
    "putchar",
    "public: class ostream & __thiscall ostream::write(char const *,int)",
    "public: virtual int __thiscall stdiobuf::underflow(void)",
    "abort",
    "public: __thiscall strstreambuf::strstreambuf(void)",
    "_j0",
    "_mbccpy",
    "public: class istream & __thiscall istream::operator>>(class ios & (__cdecl*)(class ios &))",
    "_fstat",
    "int __cdecl _query_new_mode(void)",
    "wcsstr",
    "class ostream_withassign cout",
    "__STRINGTOLD",
    "_execle",
    "public: virtual __thiscall stdiostream::~stdiostream(void)",
    "public: __thiscall ofstream::ofstream(class ofstream const &)",
    "_CIatan",
    "public: int __thiscall streambuf::sgetc(void)",
    "public: class istream & __thiscall istream::read(char *,int)",
    "_copysign",
    "_wrmdir",
    "localtime",
    "public: char __thiscall ios::fill(void)const",
    "const fstream::`vbtable'{for `ostream'}",
    "public: class istream & __thiscall istream::operator>>(unsigned char &)",
    "_pgmptr",
    "_vsnwprintf",
    "_assert",
    "_mbsstr",
    "const ofstream::`vbtable'",
    "getwc",
    "public: virtual void * __thiscall ofstream::`vector deleting destructor'(unsigned int)",
    "public: struct _iobuf * __thiscall stdiobuf::stdiofile(void)",
    "public: class istream & __thiscall istream::get(unsigned char &)",
    "_safe_fprem",
    "const ios::`vftable'",
    "isdigit",
    "_getdllprocaddr",
    "_strnicmp",
    "_wcsupr",
    "private: static long ios::x_maxbit",
    "public: class istream & __thiscall istream::getline(signed char *,int,char)",
    "public: virtual void * __thiscall ios::`scalar deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall filebuf::`vector deleting destructor'(unsigned int)",
    "_heapset",
    "difftime",
    "_onexit",
    "_fgetwchar",
    "_mbsnbicoll",
    "__p__pctype",
    "_wcsicmp",
    "public: int __thiscall ostream::opfx(void)",
    "__dllonexit",
    "_CIlog10",
    "public: class istream & __thiscall istream::operator>>(unsigned char *)",
    "_scalb",
    "public: virtual void * __thiscall ostrstream::`vector deleting destructor'(unsigned int)",
    "_open_osfhandle",
    "exit",
    "_safe_fdiv",
    "_tcsupr",
    "_stricmp",
    "_tcsicmp",
    "public: __thiscall ifstream::ifstream(class ifstream const &)",
    "public: __thiscall ofstream::ofstream(void)",
    "iswctype",
    "_ismbcalpha",
    "public: static int const filebuf::text",
    "fopen",
    "_wcsset",
    "_tzname",
    "public: virtual int __thiscall strstreambuf::sync(void)",
    "public: class istream & __thiscall istream::operator>>(char &)",
    "_heapadd",
    "public: __thiscall ostrstream::ostrstream(class ostrstream const &)",
    "public: int __thiscall streambuf::out_waiting(void)const",
    "public: int __thiscall filebuf::is_open(void)const",
    "public: void __thiscall streambuf::stossc(void)",
    "_fdopen",
    "_wgetcwd",
    "_mbsnbcpy",
    "public: __thiscall ofstream::ofstream(int)",
    "public: static int const filebuf::sh_write",
    "_safe_fdivr",
    "_wpgmptr",
    "exp",
    "_tcsspn",
    "public: int __thiscall strstream::pcount(void)const",
    "_ismbchira",
    "pow",
    "public: int __thiscall ios::precision(void)const",
    "_putw",
    "$I10_OUTPUT",
    "_wcmdln",
    "fputwc",
    "_cputs",
    "_getw",
    "_mbslwr",
    "protected: char * __thiscall streambuf::gptr(void)const",
    "_aexit_rtn",
    "fseek",
    "acos",
    "__p__winver",
    "_mbsicmp",
    "_utime",
    "labs",
    "strncpy",
    "_mbsicoll",
    "_commode",
    "public: void __thiscall ostrstream::`vbase destructor'(void)",
    "_wtol",
    "_y0",
    "public: __thiscall istream_withassign::istream_withassign(class streambuf *)",
    "public: __thiscall stdiobuf::stdiobuf(class stdiobuf const &)",
    "_putch",
    "_CIfmod",
    "public: class istream & __thiscall istream::get(char *,int,char)",
    "fwscanf",
    "_tcsdec",
    "_wfindfirst",
    "_chdir",
    "printf",
    "public: class Iostream_init & __thiscall Iostream_init::operator=(class Iostream_init const &)",
    "_wspawnlpe",
    "public: class ostream & __thiscall ostream::operator<<(unsigned long)",
    "public: class ostream & __thiscall ostream::put(unsigned char)",
    "wcsxfrm",
    "public: __thiscall filebuf::filebuf(class filebuf const &)",
    "public: __thiscall ifstream::ifstream(void)",
    "public: class istrstream & __thiscall istrstream::operator=(class istrstream const &)",
    "_adj_fdivr_m32i",
    "tanh",
    "__doserrno",
    "_wcsrev",
    "public: __thiscall Iostream_init::~Iostream_init(void)",
    "public: virtual int __thiscall streambuf::xsputn(char const *,int)",
    "public: virtual __thiscall stdiobuf::~stdiobuf(void)",
    "fgetpos",
    "public: class ostream & __thiscall ostream_withassign::operator=(class streambuf *)",
    "public: static int const filebuf::binary",
    "_j1",
    "_except_handler2",
    "const ifstream::`vbtable'",
    "protected: __thiscall iostream::iostream(void)",
    "protected: __thiscall ios::ios(void)",
    "fread",
    "_findclose",
    "public: __thiscall Iostream_init::Iostream_init(class ios &,int)",
    "_wopen",
    "_tzset",
    "public: __thiscall istrstream::istrstream(char *)",
    "iswalnum",
    "atexit",
    "protected: void __thiscall streambuf::setp(char *,char *)",
    "_mbctombb",
    "public: char * __thiscall ostrstream::str(void)",
    "_mbstrlen",
    "iswalpha",
    "_daylight",
    "const filebuf::`vftable'",
    "public: virtual void * __thiscall ifstream::`vector deleting destructor'(unsigned int)",
    "wcsncat",
    "_ismbbkana",
    "_ismbcpunct",
    "_mbctolower",
    "public: void __thiscall ostream::`vbase destructor'(void)",
    "public: static void __cdecl ios::sync_with_stdio(void)",
    "public: void __cdecl ios::unlock(void)",
    "toupper",
    "protected: char * __thiscall streambuf::base(void)const",
    "public: virtual void * __thiscall istream::`scalar deleting destructor'(unsigned int)",
    "realloc",
    "_tcslwr",
    "public: __thiscall istream::istream(class streambuf *)",
    "_CItanh",
    "_acmdln",
    "_strerror",
    "log10",
    "public: virtual void * __thiscall streambuf::`scalar deleting destructor'(unsigned int)",
    "system",
    "_stat",
    "public: char __thiscall ios::fill(char)",
    "asin",
    "public: __thiscall fstream::fstream(int,char *,int)",
    "public: int __thiscall fstream::is_open(void)const",
    "public: void __thiscall istream::eatwhite(void)",
    "public: class istream & __thiscall istream::getline(unsigned char *,int,char)",
    "public: long __thiscall ostream::tellp(void)",
    "_ismbbtrail",
    "_execlp",
    "_ismbbkpunct",
    "_wcsnicoll",
    "_sopen",
    "public: virtual int __thiscall filebuf::overflow(int)",
    "public: class istream & __thiscall istream::get(unsigned char *,int,char)",
    "public: virtual __thiscall ofstream::~ofstream(void)",
    "_mbsnbicmp",
    "_atodbl",
    "public: __thiscall stdiostream::stdiostream(class stdiostream const &)",
    "_tcstok",
    "_tcspbrk",
    "private: static long * ios::x_statebuf",
    "_wfsopen",
    "protected: class iostream & __thiscall iostream::operator=(class streambuf *)",
    "public: void __thiscall istream::`vbase destructor'(void)",
    "_popen",
    "const strstream::`vftable'",
    "public: class streambuf * __thiscall ios::rdbuf(void)const",
    "mblen",
    "protected: char * __thiscall streambuf::epptr(void)const",
    "_wstrdate",
    "_msize",
    "_strtime",
    "_wexecv",
    "_flushall",
    "_wperror",
    "public: virtual int __thiscall stdiobuf::sync(void)",
    "_tcsnccpy",
    "public: class ostream & __thiscall ostream::seekp(long)",
    "wcsftime",
    "_ultoa",
    "_mbsrev",
    "_umask",
    "public: virtual void * __thiscall ostream::`scalar deleting destructor'(unsigned int)",
    "_CIlog",
    "__initenv",
    "fputws",
    "_lrotr",
    "public: virtual __thiscall ifstream::~ifstream(void)",
    "_ismbclegal",
    "public: class ostream & __thiscall ostream::operator<<(char)",
    "_gcvt",
    "_adj_fdiv_m64",
    "_execlpe",
    "_fmode",
    "public: class istream & __thiscall istream::operator>>(double &)",
    "__p___argv",
    "const ostream_withassign::`vftable'",
    "public: virtual __thiscall fstream::~fstream(void)",
    "_wexeclp",
    "_ismbcupper",
    "_read",
    "ldiv",
    "public: void __thiscall ifstream::attach(int)",
    "public: __thiscall strstream::strstream(char *,int,int)",
    "_tempnam",
    "wcstombs",
    "public: class istream & __thiscall istream::operator>>(class streambuf *)",
    "_getdiskfree",
    "strspn",
    "_mbctoupper",
    "public: __thiscall stdiostream::stdiostream(struct _iobuf *)",
    "strcat",
    "vswprintf",
    "public: void __thiscall streambuf::setlock(void)",
    "__threadhandle",
    "_dup",
    "_logb",
    "public: class istream & __thiscall istream::operator>>(unsigned short &)",
    "public: class ostream & __thiscall ostream::operator<<(float)",
    "_strcmpi",
    "public: __thiscall strstream::strstream(class strstream const &)",
    "wprintf",
    "_ctype",
    "public: __thiscall istream_withassign::istream_withassign(void)",
    "memset",
    "public: __thiscall ostream_withassign::ostream_withassign(class streambuf *)",
    "private: static int ios::fLockcInit",
    "public: virtual class streambuf * __thiscall filebuf::setbuf(char *,int)",
    "_cexit",
    "cosh",
    "rand",
    "const ifstream::`vftable'",
    "public: virtual void * __thiscall ostream::`vector deleting destructor'(unsigned int)",
    "__p__amblksiz",
    "fputs",
    "public: int __thiscall filebuf::setmode(int)",
    "public: virtual __thiscall istream_withassign::~istream_withassign(void)",
    "_spawnlpe",
    "public: class ifstream & __thiscall ifstream::operator=(class ifstream const &)",
    "public: class stdiostream & __thiscall stdiostream::operator=(class stdiostream &)",
    "sqrt",
    "_strlwr",
    "sinh",
    "_endthreadex",
    "_mbscpy",
    "_strdate",
    "_mbcjmstojis",
    "public: class istream & __thiscall istream_withassign::operator=(class istream const &)",
    "_memccpy",
    "_mbclen",
    "_mbcjistojms",
    "public: __thiscall strstreambuf::strstreambuf(void * (__cdecl*)(long),void (__cdecl*)(void *))",
    "strrchr",
    "public: class ostream & __thiscall ostream::operator<<(short)",
    "__winitenv",
    "_ismbbpunct",
    "_snprintf",
    "public: __thiscall streambuf::streambuf(class streambuf const &)",
    "wcstoul",
    "public: void __thiscall fstream::open(char const *,int,int)",
    "_mbctohira",
    "public: virtual int __thiscall filebuf::sync(void)",
    "public: void __cdecl ios::lockbuf(void)",
    "_mbslen",
    "public: int __thiscall ifstream::is_open(void)const",
    "wcscpy",
    "_creat",
    "_wfindnext",
    "_ultow",
    "_nextafter",
    "clock",
    "div",
    "_mbctokata",
    "_swab",
    "int __cdecl _set_new_mode(int)",
    "iswprint",
    "public: virtual __thiscall istrstream::~istrstream(void)",
    "public: virtual void * __thiscall istream_withassign::`vector deleting destructor'(unsigned int)",
    "_chmod",
    "_execve",
    "tolower",
    "protected: char * __thiscall streambuf::ebuf(void)const",
    "public: void __thiscall istream::isfx(void)",
    "public: void __thiscall ios::delbuf(int)",
    "public: class istream & __thiscall istream::get(signed char &)",
    "putwchar",
    "_cabs",
    "_jn",
    "_ismbbgraph",
    "_makepath",
    "public: int __thiscall ostrstream::pcount(void)const",
    "getc",
    "vfwprintf",
    "fgets",
    "strncat",
    "public: class filebuf * __thiscall fstream::rdbuf(void)const",
    "protected: char * __thiscall streambuf::egptr(void)const",
    "_wsearchenv",
    "is_wctype",
    "__p__fmode",
    "public: virtual void * __thiscall ostream_withassign::`scalar deleting destructor'(unsigned int)",
    "__getmainargs",
    "_tcsset",
    "_mbbtombc",
    "public: void __thiscall istream_withassign::`vbase destructor'(void)",
    "public: __thiscall strstreambuf::strstreambuf(char *,int,char *)",
    "_lrotl",
    "_close",
    "_wmktemp",
    "const ostrstream::`vftable'",
    "_mbsupr",
    "public: __thiscall fstream::fstream(class fstream const &)",
    "wcslen",
    "__threadid",
    "_tcsncmp",
    "public: class ostream & __thiscall ostream::seekp(long,enum ios::seek_dir)",
    "_tcsclen",
    "_tcsinc",
    "_cscanf",
    "_wsopen",
    "__p__osver",
    "public: void __cdecl ios::clrlock(void)",
    "public: class ofstream & __thiscall ofstream::operator=(class ofstream const &)",
    "_mbspbrk",
    "_adj_fdivr_m32",
    "abs",
    "_wcsnicmp",
    "__p__commode",
    "public: char * __thiscall strstream::str(void)",
    "_mbsset",
    "_tcsncat",
    "_wtempnam",
    "_global_unwind2",
    "_CIsin",
    "public: void __thiscall iostream::`vbase destructor'(void)",
    "_ismbblead",
    "public: void __thiscall ifstream::open(char const *,int,int)",
    "protected: void __thiscall streambuf::setb(char *,char *,int)",
    "public: void __thiscall ofstream::attach(int)",
    "_tccpy",
    "_write",
    "fclose",
    "public: class istream & __thiscall istream::operator>>(float &)",
    "_ismbcprint",
    "getwchar",
    "public: static long __cdecl ios::bitalloc(void)",
    "const strstreambuf::`vftable'",
    "setvbuf",
    "_ltoa",
    "wcsncpy",
    "__p__environ",
    "_CItan",
    "public: class ostream & __thiscall ostream::operator<<(void const *)",
    "protected: __thiscall istream::istream(void)",
    "_fcvt",
    "_eof",
    "_sleep",
    "_wcsicoll",
    "const stdiostream::`vbtable'{for `ostream'}",
    "_wcsnset",
    "fmod",
    "public: virtual void * __thiscall iostream::`vector deleting destructor'(unsigned int)",
    "public: void __thiscall ofstream::close(void)",
    "_rmdir",
    "private: static struct _RTL_CRITICAL_SECTION ios::x_lockc",
    "strtol",
    "_execl",
    "public: class ostream_withassign & __thiscall ostream_withassign::operator=(class ostream_withassign const &)",
    "_hypot",
    "_mbsncmp",
    "vfprintf",
    "swprintf",
    "_ftol",
    "fscanf",
    "protected: void __thiscall streambuf::gbump(int)",
    "_clearfp",
    "_getmbcp",
    "isalpha",
    "_ismbcl2",
    "public: void __cdecl ios::setlock(void)",
    "towupper",
    "public: virtual int __thiscall stdiobuf::overflow(int)",
    "_mbstok",
    "_adj_fdivr_m64",
    "_adj_fdiv_m16i",
    "_execv",
    "_fcloseall",
    "_tcsncpy",
    "public: class ostrstream & __thiscall ostrstream::operator=(class ostrstream const &)",
    "_beep",
    "__p__iob",
    "const istrstream::`vftable'",
    "public: void __thiscall ostream::osfx(void)",
    "_expand",
    "_wsplitpath",
    "const fstream::`vftable'",
    "clearerr",
    "memmove",
    "scanf",
    "_spawnl",
    "_mbsnbcnt",
    "_wmkdir",
    "iswgraph",
    "const ostrstream::`vbtable'",
    "_tcsrchr",
    "public: class istream & __thiscall istream::read(signed char *,int)",
    "_isctype",
    "public: class strstreambuf & __thiscall strstreambuf::operator=(class strstreambuf const &)",
    "_getche",
    "public: void __thiscall fstream::attach(int)",
    "__seh_longjmp_unwind@4",
    "public: class ostream * __thiscall ios::tie(class ostream *)",
    "public: class filebuf * __thiscall ofstream::rdbuf(void)const",
    "_fpclass",
    "protected: __thiscall streambuf::streambuf(void)",
    "public: class filebuf & __thiscall filebuf::operator=(class filebuf const &)",
    "_mbsspnp",
    "public: virtual long __thiscall filebuf::seekoff(long,enum ios::seek_dir,int)",
    "const iostream::`vftable'",
    "public: virtual void * __thiscall ostrstream::`scalar deleting destructor'(unsigned int)",
    "private: static int ios::sunk_with_stdio",
    "_adj_fdivr_m16i",
    "public: void __thiscall istrstream::`vbase destructor'(void)",
    "__isascii",
    "_ltow",
    "_y1",
    "_mbsnbcoll",
    "_wexecle",
    "wcschr",
    "__CxxLongjmpUnwind",
    "_spawnvp",
    "public: __thiscall ifstream::ifstream(int)",
    "public: int __thiscall ofstream::fd(void)const",
    "_splitpath",
    "_mktemp",
    "cos",
    "_endthread",
    "_amsg_exit",
    "signal",
    "public: class ostream & __thiscall ostream::operator<<(unsigned char const *)",
    "_futime",
    "public: class istream & __thiscall istream::operator>>(unsigned long &)",
    "public: virtual void * __thiscall fstream::`vector deleting destructor'(unsigned int)",
    "_beginthreadex",
    "public: class istream & __thiscall istream::operator>>(long double &)",
    "public: void __thiscall ofstream::open(char const *,int,int)",
    "_fputchar",
    "_mbsncpy",
    "_getch",
    "__iscsymf",
    "_mbsncoll",
    "_wcsncoll",
    "_wfreopen",
    "protected: __thiscall streambuf::streambuf(char *,int)",
    "public: virtual void * __thiscall istream::`vector deleting destructor'(unsigned int)",
    "_getdcwd",
    "const streambuf::`vftable'",
    "public: __thiscall filebuf::filebuf(void)",
    "_wspawnve",
    "public: class istream & __thiscall istream::get(class streambuf &,char)",
    "public: class istream & __thiscall istream::read(unsigned char *,int)",
    "const stdiobuf::`vftable'",
    "_yn",
    "public: long __thiscall ios::setf(long)",
    "void __cdecl operator delete(void *)",
    "protected: void __thiscall streambuf::setg(char *,char *,char *)",
    "public: virtual void * __thiscall stdiostream::`vector deleting destructor'(unsigned int)",
    "_tcscmp",
    "rename",
    "_wexecvpe",
    "public: virtual long __thiscall streambuf::seekoff(long,enum ios::seek_dir,int)",
    "public: int __thiscall stdiobuf::setrwbuf(int,int)",
    "protected: int __thiscall streambuf::blen(void)const",
    "public: __thiscall ios::ios(class streambuf *)",
    "_wunlink",
    "public: int __thiscall ios::precision(int)",
    "atof",
    "__p__wpgmptr",
    "public: void __thiscall ifstream::`vbase destructor'(void)",
    "public: class stdiobuf * __thiscall stdiostream::rdbuf(void)const",
    "public: void __thiscall strstream::`vbase destructor'(void)",
    "_cprintf",
    "_mbsnbcat",
    "__p__winmajor",
    "public: virtual __thiscall ios::~ios(void)",
    "tan",
    "__argv",
    "__toascii",
    "public: int __thiscall ofstream::setmode(int)",
    "wcsrchr",
    "tmpnam",
    "memcpy",
    "_rmtmp",
    "_toupper",
    "wcsncmp",
    "_getsystime",
    "_wputenv",
    "free",
    "strftime",
    "public: __thiscall istrstream::istrstream(class istrstream const &)",
    "__p__wenviron",
    "_CIsqrt",
    "_wspawnlp",
    "iswpunct",
    "isleadbyte",
    "_spawnlp",
    "public: class ostream & __thiscall ostream::operator<<(long double)",
    "wcstol",
    "const istream_withassign::`vftable'",
    "_mbsbtype",
    "public: virtual __thiscall filebuf::~filebuf(void)",
    "floor",
    "_local_unwind2",
    "_setmbcp",
    "ungetwc",
    "public: int __thiscall istream::ipfx(int)",
    "public: int __thiscall istream::sync(void)",
    "public: static long const ios::floatfield",
    "public: virtual int __thiscall strstreambuf::underflow(void)",
    "_mbsdec",
    "protected: class ostream & __thiscall ostream::operator=(class streambuf *)",
    "protected: void __thiscall streambuf::pbump(int)",
    "islower",
    "public: int __thiscall ofstream::is_open(void)const",
    "_fgetchar",
    "public: virtual __thiscall istream::~istream(void)",
    "__mb_cur_max",
    "_seterrormode",
    "private: int __thiscall istream::getdouble(char *,int)",
    "strchr",
    "_wtmpnam",
    "_tcsncicmp",
    "_wspawnvpe",
    "protected: __thiscall istream::istream(class istream const &)",
    "protected: char * __thiscall streambuf::pptr(void)const",
    "public: int __thiscall ios::width(void)const",
    "public: int __thiscall fstream::fd(void)const",
    "public: int __thiscall istream::gcount(void)const",
    "fgetwc",
    "__lconv_init",
    "_winmajor",
    "_getdrives",
    "const iostream::`vbtable'{for `ostream'}",
    "public: class ostream * __thiscall ios::tie(void)const",
    "public: class stdiobuf & __thiscall stdiobuf::operator=(class stdiobuf const &)",
    "time",
    "_kbhit",
    "_wspawnvp",
    "_strdup",
    "isprint",
    "public: long __thiscall ios::unsetf(long)",
    "wcspbrk",
    "_pwctype",
    "class ostream & __cdecl flush(class ostream &)",
    "public: void __thiscall ios::clear(int)",
    "_lseek",
    "public: void __thiscall streambuf::unlock(void)",
    "isspace",
    "protected: class istream & __thiscall istream::operator=(class istream const &)",
    "_isnan",
    "_tcscspn",
    "_isatty",
    "memcmp",
    "_findnext",
    "_CIacos",
    "__argc",
    "wscanf",
    "_tcsspnp",
    "fgetws",
    "_mbsnset",
    "_adj_fdiv_r",
    "protected: void __thiscall ios::init(class streambuf *)",
    "_purecall",
    "public: class ostream & __thiscall ostream::operator<<(class ostream & (__cdecl*)(class ostream &))",
    "ungetc",
    "public: int __thiscall streambuf::sputbackc(char)",
    "public: virtual void * __thiscall stdiostream::`scalar deleting destructor'(unsigned int)",
    "_pctype",
    "public: class istream & __thiscall istream::getline(char *,int,char)",
    "_wfopen",
    "public: long __thiscall ios::setf(long,long)",
    "public: virtual void * __thiscall strstream::`vector deleting destructor'(unsigned int)",
    "_wexeclpe",
    "public: class istream & __thiscall istream::seekg(long,enum ios::seek_dir)",
    "void * __cdecl operator new(unsigned int)",
    "_mbsninc",
    "public: class ostream & __thiscall ostream::operator<<(char const *)",
    "_CIcos",
    "fabs",
    "__fpecode",
    "__p__daylight",
    "_mbscat",
    "_mbsdup",
    "_tcsnccat",
    "frexp",
    "public: class ostream & __thiscall ostream::operator<<(class streambuf *)",
    "_winver",
    "public: __thiscall ofstream::ofstream(int,char *,int)",
    "sin",
    "protected: virtual int __thiscall strstreambuf::doallocate(void)",
    "_wgetenv",
    "class ostream_withassign cerr",
    "_ismbcdigit",
    "_wexecl",
    "public: __thiscall fstream::fstream(void)",
    "ldexp",
    "__p___winitenv",
    "public: virtual int __thiscall filebuf::underflow(void)",
    "protected: __thiscall ostream::ostream(class ostream const &)",
    "_chdrive",
    "_heapmin",
    "_pclose",
    "_lsearch",
    "isgraph",
    "public: __thiscall istrstream::istrstream(char *,int)",
    "void (__cdecl*__cdecl set_unexpected(void (__cdecl*)(void)))(void)",
    "public: __thiscall fstream::fstream(char const *,int,int)",
    "const stdiostream::`vftable'",
    "public: virtual class streambuf * __thiscall strstreambuf::setbuf(char *,int)",
    "_tcsninc",
    "_tcsnset",
    "_strupr",
    "public: static int __cdecl ios::xalloc(void)",
    "strcmp",
    "_flsbuf",
    "public: void * __thiscall Iostream_init::`vector deleting destructor'(unsigned int)",
    "public: virtual __thiscall strstreambuf::~strstreambuf(void)",
    "public: virtual long __thiscall streambuf::seekpos(long,int)",
    "_wspawnv",
    "putc",
    "_chsize",
    "getenv",
    "fwprintf",
    "__p___mb_cur_max",
    "malloc",
    "_ismbcl1",
    "rewind",
    "iswupper",
    "iswascii",
    "public: virtual void * __thiscall ostream_withassign::`vector deleting destructor'(unsigned int)",
    "public: class strstreambuf * __thiscall strstream::rdbuf(void)const",
    "const iostream::`vbtable'{for `istream'}",
    "public: void __thiscall streambuf::clrlock(void)",
    "_spawnv",
    "strcspn",
    "public: virtual long __thiscall strstreambuf::seekoff(long,enum ios::seek_dir,int)",
    "_ismbcspace",
    "_mbscoll",
    "_wspawnle",
    "void (__cdecl*__cdecl set_terminate(void (__cdecl*)(void)))(void)",
    "asctime",
    "public: void __thiscall ofstream::`vbase destructor'(void)",
    "public: int __thiscall istream::get(void)",
    "public: virtual void * __thiscall ios::`vector deleting destructor'(unsigned int)",
    "swscanf",
    "wcscspn",
    "fputc",
    "public: static int const filebuf::openprot",
    "class ostream & __cdecl ends(class ostream &)",
    "_dup2",
    "_tcsnbcnt",
    "public: class filebuf * __thiscall filebuf::open(char const *,int,int)",
    "_mkdir",
    "public: long __thiscall ios::flags(void)const",
    "_adj_fpatan",
    "public: void * __thiscall Iostream_init::`scalar deleting destructor'(unsigned int)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned int)",
    "_wexecvp",
    "_tolower",
    "_mbsinc",
    "_tcsrev",
    "_ismbcl0",
    "_wcsdup",
    "_itow",
    "_vsnprintf",
    "__p__winminor",
    "public: int __thiscall fstream::setmode(int)",
    "public: int __thiscall streambuf::sgetn(char *,int)",
    "_mtlock",
    "_wtoi",
    "public: class ostream & __thiscall ostream::put(char)",
    "__p__pgmptr",
    "class ostream_withassign clog",
    "_ismbckata",
    "_fsopen",
    "_filelength",
    "public: virtual void * __thiscall iostream::`scalar deleting destructor'(unsigned int)",
    "_wchdir",
    "public: __thiscall ifstream::ifstream(int,char *,int)",
    "_cwait",
    "_tcschr",
    "const istream::`vbtable'",
    "public: class strstreambuf * __thiscall istrstream::rdbuf(void)const",
    "public: __thiscall Iostream_init::Iostream_init(void)",
    "__p___wargv",
    "public: class ostream & __thiscall ostream::flush(void)",
    "public: class strstream & __thiscall strstream::operator=(class strstream &)",
    "public: __thiscall ofstream::ofstream(char const *,int,int)",
    "_sys_nerr",
    "__iscsym",
    "_exit",
    "_tell",
    "public: int __thiscall ios::good(void)const",
    "_spawnvpe",
    "_XcptFilter",
    "_wmakepath",
    "_putws",
    "_searchenv",
    "protected: class iostream & __thiscall iostream::operator=(class iostream &)",
    "const ostream::`vftable'",
    "ferror",
    "public: void __thiscall fstream::`vbase destructor'(void)",
    "_mbsnbset",
    "strncmp",
    "_get_osfhandle",
    "_strrev",
    "_unloaddll",
    "atan2",
    "gets",
    "public: class streambuf * __thiscall ifstream::setbuf(char *,int)",
    "public: __thiscall ostrstream::ostrstream(char *,int,int)",
    "const ostream::`vbtable'",
    "public: int __thiscall streambuf::sputc(int)",
    "public: virtual __thiscall iostream::~iostream(void)",
    "_locking",
    "_ftime",
    "_CIasin",
    "public: void __thiscall ostream_withassign::`vbase destructor'(void)",
    "_wstat",
    "fflush",
    "_commit",
    "calloc",
    "_longjmpex",
    "_memicmp",
    "public: class ostream & __thiscall ostream::operator<<(signed char)",
    "public: int __thiscall ios::width(int)",
    "public: virtual void * __thiscall ifstream::`scalar deleting destructor'(unsigned int)",
    "_fileinfo",
    "_getws",
    "_spawnve",
    "const stdiostream::`vbtable'{for `istream'}",
    "public: __thiscall ostream_withassign::ostream_withassign(class ostream_withassign const &)",
    "ctime",
    "vsprintf",
    "_ismbbalnum",
    "strerror",
    "public: __thiscall ostream_withassign::ostream_withassign(void)",
    "_HUGE",
    "feof",
    "_setjmp",
    "protected: void __thiscall streambuf::unbuffered(int)",
    "public: class filebuf * __thiscall filebuf::attach(int)",
    "qsort",
    "_findfirst",
    "__p__timezone",
    "_adjust_fdiv",
    "public: static long const ios::basefield",
    "class istream & __cdecl ws(class istream &)",
    "_strnicoll",
    "setbuf",
    "_adj_fprem",
    "_snwprintf",
    "strpbrk",
    "public: virtual void * __thiscall stdiobuf::`scalar deleting destructor'(unsigned int)",
    "public: void __thiscall streambuf::lock(void)",
    "_waccess",
    "public: class istream & __thiscall istream::seekg(long)",
    "remove",
    "public: class ostream & __thiscall ostream_withassign::operator=(class ostream const &)",
    "_lfind",
    "public: int __thiscall ifstream::setmode(int)",
    "public: class streambuf & __thiscall streambuf::operator=(class streambuf const &)",
    "atoi",
    "public: __thiscall istream_withassign::istream_withassign(class istream_withassign const &)",
    "_tcsstr",
    "_except_handler3",
    "_adj_fdiv_m32",
    "iscntrl",
    "public: class istream & __thiscall istream::operator>>(signed char &)",
    "_getdrive",
    "public: class istream & __thiscall istream::operator>>(unsigned int &)",
    "raise",
    "strstr",
    "public: void __thiscall strstreambuf::freeze(int)",
    "const strstream::`vbtable'{for `istream'}",
    "strtok",
    "private: static int ios::x_curindex",
    "_heapwalk",
    "__p__mbctype",
    "isxdigit",
    "_abnormal_termination",
    "void __cdecl unexpected(void)",
    "public: virtual __thiscall ostream::~ostream(void)",
    "public: void __thiscall ifstream::close(void)",
    "_mbctype",
    "const fstream::`vbtable'{for `istream'}",
    "wcstok",
    "public: virtual void * __thiscall streambuf::`vector deleting destructor'(unsigned int)",
    "public: virtual int __thiscall streambuf::xsgetn(char *,int)",
    "public: __thiscall strstream::strstream(void)",
    "__p__acmdln",
    "_heapchk",
    "public: virtual int __thiscall streambuf::sync(void)",
    "iswlower",
    "modf",
    "public: int __thiscall filebuf::fd(void)const",
    "_atoldbl",
    "const istream_withassign::`vbtable'",
    "wcscat",
    "public: class istream & __thiscall istream_withassign::operator=(class streambuf *)",
    "_mbsnccnt",
    "_ismbcgraph",
    "_mtunlock",
    "_adj_fdiv_m32i",
    "wcsspn",
    "iswdigit",
    "localeconv",
    "_wcreat",
    "public: static int const filebuf::sh_none",
    "public: int __thiscall ios::bad(void)const",
    "_setsystime",
    "strlen",
    "_filbuf",
    "_ismbbprint",
    "_setmode",
    "_ismbbkalnum",
    "_wutime",
    "public: void __thiscall fstream::close(void)",
    "_winminor",
    "public: long & __thiscall ios::iword(int)const",
    "_timezone",
    "_fileno",
    "_itoa",
    "public: class istream & __thiscall istream::operator>>(char *)",
    "_mbsnicmp",
    "fprintf",
    "strtod",
    "_mbscmp",
    "_wstrtime",
    "towlower",
    "_sys_errlist",
    "protected: char * __thiscall streambuf::pbase(void)const",
    "const istrstream::`vbtable'",
    "public: class ostream & __thiscall ostream::write(signed char const *,int)",
    "public: class streambuf * __thiscall fstream::setbuf(char *,int)",
    "public: class istream_withassign & __thiscall istream_withassign::operator=(class istream_withassign const &)",
    "strcoll",
    "public: virtual void * __thiscall istream_withassign::`scalar deleting destructor'(unsigned int)",
    "_mbsnextc",
    "public: __thiscall ios::operator void *(void)const",
    "__p__tzname",
    "_wchmod",
    "bsearch",
    "public: int __thiscall streambuf::in_avail(void)const",
    "_rotr",
    "public: class filebuf * __thiscall ifstream::rdbuf(void)const",
    "_wasctime",
    "_CIcosh",
    "_wcslwr",
    "fsetpos",
    "public: virtual class streambuf * __thiscall streambuf::setbuf(char *,int)",
    "public: long __thiscall ios::flags(long)",
    "strxfrm",
    "public: static int const filebuf::sh_read",
    "protected: class ostream & __thiscall ostream::operator=(class ostream const &)",
    "srand",
    "_wrename",
    "_access",
    "_ismbbalpha",
    "_tcsnccnt",
    "protected: char * __thiscall streambuf::eback(void)const",
    "public: class fstream & __thiscall fstream::operator=(class fstream &)",
    "_mbsnicoll",
    "_ismbstrail",
    "protected: class istream & __thiscall istream::operator=(class streambuf *)",
    "protected: struct _RTL_CRITICAL_SECTION * __thiscall streambuf::lockptr(void)",
    "protected: static void __cdecl ios::unlockc(void)",
    "public: class strstreambuf * __thiscall ostrstream::rdbuf(void)const",
    "_mbsnbcmp",
    "_finite",
    "_wenviron",
    "_CIsinh",
    "_strncoll",
    "_wctime",
    "_tcsnccmp",
    "public: class istream & __thiscall istream::operator>>(short &)",
    "public: class ostream & __thiscall ostream::operator<<(class ios & (__cdecl*)(class ios &))",
    "int (__cdecl*__cdecl _set_new_handler(int (__cdecl*)(unsigned int)))(unsigned int)",
    "public: char * __thiscall istrstream::str(void)",
    "_CxxThrowException",
    "_rotl",
    "_tclen",
    "_wgetdcwd",
    "public: int __thiscall ifstream::fd(void)const",
    "_strnset",
    "public: class istream & __thiscall istream::get(signed char *,int,char)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned char)",
    "__wargv",
    "public: virtual void * __thiscall strstreambuf::`vector deleting destructor'(unsigned int)",
    "wcscmp",
    "class ios & __cdecl oct(class ios &)",
    "isalnum",
    "isupper",
    "public: char * __thiscall strstreambuf::str(void)",
    "_wfullpath",
    "public: virtual __thiscall strstream::~strstream(void)",
    "_execvp",
    "public: virtual void * __thiscall fstream::`scalar deleting destructor'(unsigned int)",
    "setlocale",
    "protected: virtual int __thiscall streambuf::doallocate(void)",
    "longjmp",
    "public: class ostream & __thiscall ostream::operator<<(int)",
    "public: class istream & __thiscall istream::operator>>(signed char *)",
    "public: int __thiscall streambuf::snextc(void)",
    "_ismbclower",
    "public: int __thiscall streambuf::sputn(char const *,int)",
    "_control87",
    "mbtowc",
    "_wsystem",
    "public: class streambuf * __thiscall ofstream::setbuf(char *,int)",
    "public: void __cdecl ios::unlockbuf(void)",
    "public: class ostream & __thiscall ostream::operator<<(long)",
    "public: virtual void * __thiscall strstreambuf::`scalar deleting destructor'(unsigned int)",
    "__pxcptinfoptrs",
    "public: virtual void * __thiscall istrstream::`scalar deleting destructor'(unsigned int)",
    "log",
    "protected: class ios & __thiscall ios::operator=(class ios const &)",
    "class istream_withassign cin",
    "protected: struct _RTL_CRITICAL_SECTION * __thiscall ios::lockptr(void)",
    "public: void __thiscall stdiostream::`vbase destructor'(void)",
    "_errno",
    "_open",
    "public: long __thiscall istream::tellg(void)",
    "public: virtual long __thiscall stdiobuf::seekoff(long,enum ios::seek_dir,int)",
    "wctomb",
    "_mbsncat",
    "public: __thiscall filebuf::filebuf(int)",
    "_getpid",
    "_mbschr",
    "public: int __thiscall ios::rdstate(void)const",
    "__p__pwctype",
    "public: virtual void * __thiscall filebuf::`scalar deleting destructor'(unsigned int)",
    "_environ",
    "_osver",
    "_beginthread",
    "_chgsign",
    "public: class istream & __thiscall istream::get(char &)",
    "public: __thiscall filebuf::filebuf(int,char *,int)",
    "mbstowcs",
    "_setjmp3",
    "_iob",
    "_controlfp",
    "_initterm",
    "class ios & __cdecl dec(class ios &)",
    "_putenv",
    "public: class ostream & __thiscall ostream::operator<<(unsigned short)",
    "_wspawnl",
    "ispunct",
    "_ismbbkprint",
    "private: class ostream & __thiscall ostream::writepad(char const *,char const *)",
    "puts",
    "_cgets",
    "__p__wcmdln",
    "const strstream::`vbtable'{for `ostream'}",
    "public: class ostream & __thiscall ostream::operator<<(signed char const *)",
    "_statusfp",
    "_unlink",
    "freopen",
    "int (__cdecl*__cdecl _query_new_handler(void))(unsigned int)",
    "protected: int __thiscall streambuf::allocate(void)",
    "public: __thiscall iostream::iostream(class streambuf *)",
    "_getcwd",
    "public: class istream & __thiscall istream::operator>>(long &)",
    "public: virtual __thiscall ostream_withassign::~ostream_withassign(void)",
    "public: virtual int __thiscall stdiobuf::pbackfail(int)",
    "strcpy",
    "_fputwchar",
    "_ungetch",
    "getchar",
    "_ismbcalnum",
    "_matherr",
    "ceil",
    "public: virtual __thiscall ostrstream::~ostrstream(void)",
    "public: virtual __thiscall streambuf::~streambuf(void)",
    "wcstod",
    "const ostream_withassign::`vbtable'",
    "iswspace",
    "private: int __thiscall istream::getint(char *)",
    "public: class ostream & __thiscall ostream::put(signed char)",
    "public: virtual int __thiscall streambuf::pbackfail(int)",
    "public: virtual void * __thiscall stdiobuf::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall ofstream::`scalar deleting destructor'(unsigned int)",
    "tmpfile",
    "vprintf",
    "strtoul",
    "_CIexp",
    "public: class ostream & __thiscall ostream::operator<<(double)",
    "fwrite",
    "_wexecve",
    "_ecvt",
    "public: void __cdecl ios::lock(void)",
    "_pipe",
    "mktime",
    "public: __thiscall stdiobuf::stdiobuf(struct _iobuf *)",
    "_mbscspn",
    "public: int __thiscall ios::delbuf(void)const",
    "_execvpe",
    "void (__cdecl*__cdecl _set_se_translator(void (__cdecl*)(unsigned int,struct _EXCEPTION_POINTERS *)))(unsigned int,struct _EXCEPTION_POINTERS *)",
    "public: __thiscall ifstream::ifstream(char const *,int,int)",
    "_tcsnextc",
    "__p___initenv",
    "_mbbtype",
    "_wfdopen",
    "atol",
    "public: __thiscall strstreambuf::strstreambuf(class strstreambuf const &)",
    "iswcntrl",
    "protected: __thiscall iostream::iostream(class iostream const &)",
    "public: int __thiscall ios::eof(void)const",
    "_mbsspn",
    "public: class istream & __thiscall istream::operator>>(class istream & (__cdecl*)(class istream &))",
    "_fpreset",
    "public: int __thiscall streambuf::sbumpc(void)",
    "public: virtual void * __thiscall istrstream::`vector deleting destructor'(unsigned int)",
    "sprintf",
    "public: class istream & __thiscall istream::ignore(int,int)",
    "sscanf",
    "atan",
    "_safe_fprem1",
    "void __cdecl terminate(void)",
    "iswxdigit",
    "_ismbcsymbol",
    "__wgetmainargs",
    "public: void __thiscall streambuf::dbp(void)",
    "class ostream & __cdecl endl(class ostream &)",
    "ftell",
    "public: __thiscall strstreambuf::strstreambuf(int)",
    "_stricoll",
    "_tcsncset",
    "public: class istream & __thiscall istream::operator>>(int &)",
    "_fullpath",
    "public: int __thiscall ios::operator!(void)const",
    "__CxxFrameHandler",
    "_fpieee_flt",
    "_CIatan2",
    "_c_exit",
    "public: __thiscall fstream::fstream(int)",
    "const istream::`vftable'",
    "perror"
  ],
  "msvcrt40.dll": [
    "public: virtual void * __thiscall strstream::`scalar deleting destructor'(unsigned int)",
    "_wremove",
    "public: __thiscall exception::exception(class exception const &)",
    "gmtime",
    "_adj_fprem1",
    "_outpw",
    "public: __thiscall ostrstream::ostrstream(void)",
    "public: int __thiscall ios::fail(void)const",
    "_heapused",
    "_ismbslead",
    "protected: struct _CRT_CRITICAL_SECTION * __thiscall streambuf::lockptr(void)",
    "memchr",
    "_setmaxstdio",
    "protected: __thiscall ostream::ostream(void)",
    "_mbsrchr",
    "public: static long const ios::adjustfield",
    "_loaddll",
    "public: int __thiscall istream::peek(void)",
    "public: virtual int __thiscall strstreambuf::overflow(int)",
    "_wsetlocale",
    "protected: static void __cdecl ios::lockc(void)",
    "vwprintf",
    "public: __thiscall ostream::ostream(class streambuf *)",
    "protected: __thiscall ios::ios(class ios const &)",
    "public: class filebuf * __thiscall filebuf::close(void)",
    "public: class istream & __thiscall istream::putback(char)",
    "__p___argc",
    "_spawnle",
    "_wpopen",
    "fgetc",
    "public: class ostream & __thiscall ostream::write(unsigned char const *,int)",
    "_adj_fptan",
    "class ios & __cdecl hex(class ios &)",
    "protected: int __thiscall streambuf::unbuffered(void)const",
    "wcscoll",
    "_CIpow",
    "putwc",
    "const ofstream::`vftable'",
    "public: void * & __thiscall ios::pword(int)const",
    "_strset",
    "putchar",
    "public: class ostream & __thiscall ostream::write(char const *,int)",
    "public: virtual int __thiscall stdiobuf::underflow(void)",
    "abort",
    "public: __thiscall strstreambuf::strstreambuf(void)",
    "_j0",
    "_mbccpy",
    "public: class istream & __thiscall istream::operator>>(class ios & (__cdecl*)(class ios &))",
    "_fstat",
    "int __cdecl _query_new_mode(void)",
    "wcsstr",
    "class ostream_withassign cout",
    "__STRINGTOLD",
    "_execle",
    "public: virtual __thiscall stdiostream::~stdiostream(void)",
    "public: __thiscall ofstream::ofstream(class ofstream const &)",
    "_CIatan",
    "public: int __thiscall streambuf::sgetc(void)",
    "public: class istream & __thiscall istream::read(char *,int)",
    "_copysign",
    "_wrmdir",
    "localtime",
    "public: char __thiscall ios::fill(void)const",
    "const fstream::`vbtable'{for `ostream'}",
    "public: class istream & __thiscall istream::operator>>(unsigned char &)",
    "_pgmptr",
    "_vsnwprintf",
    "_assert",
    "_dstbias",
    "_mbsstr",
    "const ofstream::`vbtable'",
    "getwc",
    "public: virtual void * __thiscall ofstream::`vector deleting destructor'(unsigned int)",
    "public: struct _iobuf * __thiscall stdiobuf::stdiofile(void)",
    "public: class istream & __thiscall istream::get(unsigned char &)",
    "_safe_fprem",
    "const ios::`vftable'",
    "isdigit",
    "_getdllprocaddr",
    "_strnicmp",
    "_wcsupr",
    "private: static long ios::x_maxbit",
    "public: class istream & __thiscall istream::getline(signed char *,int,char)",
    "public: virtual void * __thiscall ios::`scalar deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall filebuf::`vector deleting destructor'(unsigned int)",
    "_heapset",
    "difftime",
    "_onexit",
    "_fgetwchar",
    "_mbsnbicoll",
    "__p__pctype",
    "_wcsicmp",
    "public: int __thiscall ostream::opfx(void)",
    "__dllonexit",
    "_CIlog10",
    "public: class istream & __thiscall istream::operator>>(unsigned char *)",
    "_scalb",
    "public: virtual void * __thiscall ostrstream::`vector deleting destructor'(unsigned int)",
    "_open_osfhandle",
    "exit",
    "_safe_fdiv",
    "_fstati64",
    "_stricmp",
    "public: __thiscall ifstream::ifstream(class ifstream const &)",
    "public: __thiscall ofstream::ofstream(void)",
    "public: __thiscall bad_typeid::bad_typeid(char const *)",
    "iswctype",
    "public: __thiscall bad_cast::bad_cast(class bad_cast const &)",
    "public: virtual void * __thiscall __non_rtti_object::`scalar deleting destructor'(unsigned int)",
    "_ismbcalpha",
    "public: static int const filebuf::text",
    "fopen",
    "_wcsset",
    "_tzname",
    "public: virtual int __thiscall strstreambuf::sync(void)",
    "public: class istream & __thiscall istream::operator>>(char &)",
    "_heapadd",
    "public: __thiscall ostrstream::ostrstream(class ostrstream const &)",
    "public: int __thiscall streambuf::out_waiting(void)const",
    "public: int __thiscall filebuf::is_open(void)const",
    "public: void __thiscall streambuf::stossc(void)",
    "_fdopen",
    "_wgetcwd",
    "_mbsnbcpy",
    "public: __thiscall ofstream::ofstream(int)",
    "public: static int const filebuf::sh_write",
    "_safe_fdivr",
    "_wpgmptr",
    "exp",
    "public: int __thiscall strstream::pcount(void)const",
    "_ismbchira",
    "pow",
    "public: int __thiscall ios::precision(void)const",
    "_putw",
    "_seh_longjmp_unwind",
    "$I10_OUTPUT",
    "_wcmdln",
    "fputwc",
    "_cputs",
    "_getw",
    "_mbslwr",
    "protected: char * __thiscall streambuf::gptr(void)const",
    "_aexit_rtn",
    "fseek",
    "acos",
    "__p__winver",
    "_mbsicmp",
    "_utime",
    "labs",
    "strncpy",
    "_mbsicoll",
    "_commode",
    "public: void __thiscall ostrstream::`vbase destructor'(void)",
    "_wtol",
    "_y0",
    "public: __thiscall istream_withassign::istream_withassign(class streambuf *)",
    "public: __thiscall stdiobuf::stdiobuf(class stdiobuf const &)",
    "_putch",
    "_CIfmod",
    "public: class istream & __thiscall istream::get(char *,int,char)",
    "fwscanf",
    "_wfindfirst",
    "_chdir",
    "printf",
    "public: class Iostream_init & __thiscall Iostream_init::operator=(class Iostream_init const &)",
    "_wspawnlpe",
    "public: class ostream & __thiscall ostream::operator<<(unsigned long)",
    "public: class ostream & __thiscall ostream::put(unsigned char)",
    "wcsxfrm",
    "public: __thiscall filebuf::filebuf(class filebuf const &)",
    "public: __thiscall ifstream::ifstream(void)",
    "public: class istrstream & __thiscall istrstream::operator=(class istrstream const &)",
    "_adj_fdivr_m32i",
    "public: virtual void * __thiscall bad_cast::`vector deleting destructor'(unsigned int)",
    "tanh",
    "__doserrno",
    "_wcsrev",
    "public: __thiscall Iostream_init::~Iostream_init(void)",
    "public: virtual int __thiscall streambuf::xsputn(char const *,int)",
    "public: virtual __thiscall stdiobuf::~stdiobuf(void)",
    "fgetpos",
    "public: int __thiscall type_info::before(class type_info const &)const",
    "public: class ostream & __thiscall ostream_withassign::operator=(class streambuf *)",
    "public: static int const filebuf::binary",
    "_j1",
    "_except_handler2",
    "const bad_typeid::`vftable'",
    "const ifstream::`vbtable'",
    "private: static struct _CRT_CRITICAL_SECTION ios::x_lockc",
    "fread",
    "protected: __thiscall ios::ios(void)",
    "_findclose",
    "__setusermatherr",
    "_wopen",
    "_tzset",
    "public: __thiscall Iostream_init::Iostream_init(class ios &,int)",
    "public: __thiscall istrstream::istrstream(char *)",
    "_wfindnexti64",
    "public: int __thiscall type_info::operator!=(class type_info const &)const",
    "iswalnum",
    "atexit",
    "protected: void __thiscall streambuf::setp(char *,char *)",
    "_mbctombb",
    "public: char * __thiscall ostrstream::str(void)",
    "_mbstrlen",
    "iswalpha",
    "_daylight",
    "const filebuf::`vftable'",
    "public: virtual void * __thiscall ifstream::`vector deleting destructor'(unsigned int)",
    "wcsncat",
    "_ismbbkana",
    "_ismbcpunct",
    "_mbctolower",
    "public: void __thiscall ostream::`vbase destructor'(void)",
    "public: static void __cdecl ios::sync_with_stdio(void)",
    "public: void __cdecl ios::unlock(void)",
    "public: __thiscall exception::exception(void)",
    "toupper",
    "protected: char * __thiscall streambuf::base(void)const",
    "public: virtual void * __thiscall istream::`scalar deleting destructor'(unsigned int)",
    "realloc",
    "public: __thiscall istream::istream(class streambuf *)",
    "_CItanh",
    "_acmdln",
    "_strerror",
    "log10",
    "public: virtual void * __thiscall streambuf::`scalar deleting destructor'(unsigned int)",
    "system",
    "_stat",
    "public: char __thiscall ios::fill(char)",
    "asin",
    "public: __thiscall fstream::fstream(int,char *,int)",
    "public: int __thiscall fstream::is_open(void)const",
    "public: void __thiscall istream::eatwhite(void)",
    "public: class istream & __thiscall istream::getline(unsigned char *,int,char)",
    "public: long __thiscall ostream::tellp(void)",
    "_ismbbtrail",
    "_execlp",
    "_ismbbkpunct",
    "_wcsnicoll",
    "_sopen",
    "public: virtual int __thiscall filebuf::overflow(int)",
    "public: class istream & __thiscall istream::get(unsigned char *,int,char)",
    "public: virtual __thiscall ofstream::~ofstream(void)",
    "_mbsnbicmp",
    "_atodbl",
    "public: __thiscall stdiostream::stdiostream(class stdiostream const &)",
    "private: static long * ios::x_statebuf",
    "_wfsopen",
    "protected: class iostream & __thiscall iostream::operator=(class streambuf *)",
    "public: void __thiscall istream::`vbase destructor'(void)",
    "_popen",
    "const strstream::`vftable'",
    "public: class streambuf * __thiscall ios::rdbuf(void)const",
    "mblen",
    "protected: char * __thiscall streambuf::epptr(void)const",
    "_wstrdate",
    "_msize",
    "_strtime",
    "_wexecv",
    "_flushall",
    "_wperror",
    "public: virtual int __thiscall stdiobuf::sync(void)",
    "public: class ostream & __thiscall ostream::seekp(long)",
    "wcsftime",
    "_ultoa",
    "_mbsrev",
    "_umask",
    "public: virtual void * __thiscall ostream::`scalar deleting destructor'(unsigned int)",
    "_CIlog",
    "__initenv",
    "fputws",
    "_lrotr",
    "public: virtual __thiscall ifstream::~ifstream(void)",
    "_ismbclegal",
    "public: class ostream & __thiscall ostream::operator<<(char)",
    "__p__dstbias",
    "_gcvt",
    "_adj_fdiv_m64",
    "__RTDynamicCast",
    "_execlpe",
    "_fmode",
    "public: class istream & __thiscall istream::operator>>(double &)",
    "__p___argv",
    "const ostream_withassign::`vftable'",
    "public: virtual __thiscall fstream::~fstream(void)",
    "_wexeclp",
    "_ismbcupper",
    "_read",
    "ldiv",
    "public: void __thiscall ifstream::attach(int)",
    "public: __thiscall strstream::strstream(char *,int,int)",
    "_tempnam",
    "wcstombs",
    "public: class istream & __thiscall istream::operator>>(class streambuf *)",
    "_getdiskfree",
    "public: __thiscall bad_typeid::bad_typeid(class bad_typeid const &)",
    "public: virtual void * __thiscall bad_typeid::`scalar deleting destructor'(unsigned int)",
    "strspn",
    "_mbctoupper",
    "public: __thiscall stdiostream::stdiostream(struct _iobuf *)",
    "strcat",
    "vswprintf",
    "public: void __thiscall streambuf::setlock(void)",
    "__threadhandle",
    "_dup",
    "_logb",
    "public: class istream & __thiscall istream::operator>>(unsigned short &)",
    "public: class ostream & __thiscall ostream::operator<<(float)",
    "_strcmpi",
    "public: __thiscall strstream::strstream(class strstream const &)",
    "wprintf",
    "_ctype",
    "public: __thiscall logic_error::logic_error(class logic_error const &)",
    "public: __thiscall istream_withassign::istream_withassign(void)",
    "memset",
    "public: __thiscall ostream_withassign::ostream_withassign(class streambuf *)",
    "private: static int ios::fLockcInit",
    "public: virtual class streambuf * __thiscall filebuf::setbuf(char *,int)",
    "_cexit",
    "cosh",
    "rand",
    "const ifstream::`vftable'",
    "public: virtual void * __thiscall ostream::`vector deleting destructor'(unsigned int)",
    "__p__amblksiz",
    "fputs",
    "public: int __thiscall filebuf::setmode(int)",
    "public: virtual __thiscall istream_withassign::~istream_withassign(void)",
    "_spawnlpe",
    "public: class ifstream & __thiscall ifstream::operator=(class ifstream const &)",
    "public: class stdiostream & __thiscall stdiostream::operator=(class stdiostream &)",
    "sqrt",
    "_strlwr",
    "sinh",
    "_endthreadex",
    "_mbscpy",
    "_strdate",
    "_mbcjmstojis",
    "public: class istream & __thiscall istream_withassign::operator=(class istream const &)",
    "_memccpy",
    "_mbclen",
    "_mbcjistojms",
    "public: __thiscall strstreambuf::strstreambuf(void * (__cdecl*)(long),void (__cdecl*)(void *))",
    "strrchr",
    "public: class ostream & __thiscall ostream::operator<<(short)",
    "__winitenv",
    "_ismbbpunct",
    "_snprintf",
    "public: __thiscall streambuf::streambuf(class streambuf const &)",
    "wcstoul",
    "const __non_rtti_object::`vftable'",
    "public: void __thiscall fstream::open(char const *,int,int)",
    "_mbctohira",
    "public: virtual int __thiscall filebuf::sync(void)",
    "public: void __cdecl ios::lockbuf(void)",
    "_mbslen",
    "public: int __thiscall ifstream::is_open(void)const",
    "wcscpy",
    "_creat",
    "_wfindnext",
    "_ultow",
    "_nextafter",
    "clock",
    "div",
    "_mbctokata",
    "_swab",
    "public: virtual __thiscall __non_rtti_object::~__non_rtti_object(void)",
    "int __cdecl _set_new_mode(int)",
    "iswprint",
    "public: class exception & __thiscall exception::operator=(class exception const &)",
    "public: virtual __thiscall istrstream::~istrstream(void)",
    "public: virtual void * __thiscall istream_withassign::`vector deleting destructor'(unsigned int)",
    "_chmod",
    "_execve",
    "tolower",
    "protected: char * __thiscall streambuf::ebuf(void)const",
    "public: void __thiscall istream::isfx(void)",
    "public: void __thiscall ios::delbuf(int)",
    "public: class istream & __thiscall istream::get(signed char &)",
    "putwchar",
    "_cabs",
    "_jn",
    "_ismbbgraph",
    "_makepath",
    "public: int __thiscall ostrstream::pcount(void)const",
    "getc",
    "vfwprintf",
    "fgets",
    "strncat",
    "public: class filebuf * __thiscall fstream::rdbuf(void)const",
    "protected: char * __thiscall streambuf::egptr(void)const",
    "_wsearchenv",
    "is_wctype",
    "public: __thiscall logic_error::logic_error(char const * const &)",
    "__p__fmode",
    "public: virtual void * __thiscall ostream_withassign::`scalar deleting destructor'(unsigned int)",
    "__getmainargs",
    "_mbbtombc",
    "public: void __thiscall istream_withassign::`vbase destructor'(void)",
    "public: __thiscall strstreambuf::strstreambuf(char *,int,char *)",
    "_lrotl",
    "_close",
    "_wmktemp",
    "const ostrstream::`vftable'",
    "_mbsupr",
    "public: __thiscall fstream::fstream(class fstream const &)",
    "wcslen",
    "__threadid",
    "public: class ostream & __thiscall ostream::seekp(long,enum ios::seek_dir)",
    "_cscanf",
    "_wsopen",
    "__p__osver",
    "public: void __cdecl ios::clrlock(void)",
    "public: class ofstream & __thiscall ofstream::operator=(class ofstream const &)",
    "_mbspbrk",
    "_adj_fdivr_m32",
    "abs",
    "_wcsnicmp",
    "__p__commode",
    "public: char * __thiscall strstream::str(void)",
    "_mbsset",
    "_wtempnam",
    "_global_unwind2",
    "_CIsin",
    "public: void __thiscall iostream::`vbase destructor'(void)",
    "_ismbblead",
    "public: void __thiscall ifstream::open(char const *,int,int)",
    "protected: void __thiscall streambuf::setb(char *,char *,int)",
    "public: void __thiscall ofstream::attach(int)",
    "_write",
    "public: virtual __thiscall exception::~exception(void)",
    "fclose",
    "public: virtual __thiscall bad_cast::~bad_cast(void)",
    "public: class istream & __thiscall istream::operator>>(float &)",
    "_ismbcprint",
    "getwchar",
    "public: static long __cdecl ios::bitalloc(void)",
    "const strstreambuf::`vftable'",
    "setvbuf",
    "_ltoa",
    "wcsncpy",
    "__p__environ",
    "_CItan",
    "public: class ostream & __thiscall ostream::operator<<(void const *)",
    "__unDName",
    "protected: __thiscall istream::istream(void)",
    "_fcvt",
    "_eof",
    "_sleep",
    "_wcsicoll",
    "const stdiostream::`vbtable'{for `ostream'}",
    "_wcsnset",
    "fmod",
    "public: virtual void * __thiscall iostream::`vector deleting destructor'(unsigned int)",
    "public: void __thiscall ofstream::close(void)",
    "_rmdir",
    "strtol",
    "_execl",
    "public: class ostream_withassign & __thiscall ostream_withassign::operator=(class ostream_withassign const &)",
    "_hypot",
    "_mbsncmp",
    "vfprintf",
    "swprintf",
    "_ftol",
    "fscanf",
    "protected: void __thiscall streambuf::gbump(int)",
    "_clearfp",
    "_getmbcp",
    "isalpha",
    "_ismbcl2",
    "public: void __cdecl ios::setlock(void)",
    "towupper",
    "public: virtual int __thiscall stdiobuf::overflow(int)",
    "_mbstok",
    "_adj_fdivr_m64",
    "_adj_fdiv_m16i",
    "_execv",
    "_fcloseall",
    "public: class ostrstream & __thiscall ostrstream::operator=(class ostrstream const &)",
    "_beep",
    "__p__iob",
    "const istrstream::`vftable'",
    "public: void __thiscall ostream::osfx(void)",
    "_expand",
    "_wsplitpath",
    "const fstream::`vftable'",
    "clearerr",
    "memmove",
    "scanf",
    "_spawnl",
    "_mbsnbcnt",
    "_wmkdir",
    "iswgraph",
    "const ostrstream::`vbtable'",
    "public: class istream & __thiscall istream::read(signed char *,int)",
    "public: class strstreambuf & __thiscall strstreambuf::operator=(class strstreambuf const &)",
    "_isctype",
    "public: int __thiscall ios::eof(void)const",
    "_getche",
    "public: void __thiscall fstream::attach(int)",
    "public: class ostream * __thiscall ios::tie(class ostream *)",
    "public: class filebuf * __thiscall ofstream::rdbuf(void)const",
    "_fpclass",
    "protected: __thiscall streambuf::streambuf(void)",
    "public: class filebuf & __thiscall filebuf::operator=(class filebuf const &)",
    "_mbsspnp",
    "public: virtual long __thiscall filebuf::seekoff(long,enum ios::seek_dir,int)",
    "void (__cdecl*__cdecl set_new_handler(void (__cdecl*)(void)))(void)",
    "const iostream::`vftable'",
    "public: virtual void * __thiscall ostrstream::`scalar deleting destructor'(unsigned int)",
    "private: static int ios::sunk_with_stdio",
    "_adj_fdivr_m16i",
    "public: void __thiscall istrstream::`vbase destructor'(void)",
    "__isascii",
    "_ltow",
    "_y1",
    "_mbsnbcoll",
    "_wexecle",
    "wcschr",
    "__CxxLongjmpUnwind",
    "_spawnvp",
    "public: __thiscall ifstream::ifstream(int)",
    "public: int __thiscall ofstream::fd(void)const",
    "_splitpath",
    "_mktemp",
    "cos",
    "_endthread",
    "_amsg_exit",
    "signal",
    "public: class ostream & __thiscall ostream::operator<<(unsigned char const *)",
    "_futime",
    "public: class istream & __thiscall istream::operator>>(unsigned long &)",
    "public: virtual void * __thiscall fstream::`vector deleting destructor'(unsigned int)",
    "_beginthreadex",
    "public: class istream & __thiscall istream::operator>>(long double &)",
    "public: void __thiscall ofstream::open(char const *,int,int)",
    "_fputchar",
    "_mbsncpy",
    "_getch",
    "__iscsymf",
    "_mbsncoll",
    "_wcsncoll",
    "_wfreopen",
    "protected: __thiscall streambuf::streambuf(char *,int)",
    "public: virtual void * __thiscall istream::`vector deleting destructor'(unsigned int)",
    "_getdcwd",
    "const streambuf::`vftable'",
    "public: __thiscall filebuf::filebuf(void)",
    "_wspawnve",
    "public: class istream & __thiscall istream::get(class streambuf &,char)",
    "public: class istream & __thiscall istream::read(unsigned char *,int)",
    "const stdiobuf::`vftable'",
    "_yn",
    "public: long __thiscall ios::setf(long)",
    "void __cdecl operator delete(void *)",
    "protected: void __thiscall streambuf::setg(char *,char *,char *)",
    "public: virtual void * __thiscall stdiostream::`vector deleting destructor'(unsigned int)",
    "rename",
    "_wexecvpe",
    "public: virtual long __thiscall streambuf::seekoff(long,enum ios::seek_dir,int)",
    "public: int __thiscall stdiobuf::setrwbuf(int,int)",
    "protected: int __thiscall streambuf::blen(void)const",
    "public: __thiscall ios::ios(class streambuf *)",
    "_wunlink",
    "public: int __thiscall ios::precision(int)",
    "atof",
    "__p__wpgmptr",
    "const exception::`vftable'",
    "public: void __thiscall ifstream::`vbase destructor'(void)",
    "public: class stdiobuf * __thiscall stdiostream::rdbuf(void)const",
    "public: virtual char const * __thiscall exception::what(void)const",
    "public: void __thiscall strstream::`vbase destructor'(void)",
    "_cprintf",
    "_mbsnbcat",
    "__p__winmajor",
    "public: virtual __thiscall ios::~ios(void)",
    "tan",
    "__argv",
    "__toascii",
    "_filelengthi64",
    "public: int __thiscall ofstream::setmode(int)",
    "wcsrchr",
    "tmpnam",
    "memcpy",
    "_rmtmp",
    "_toupper",
    "wcsncmp",
    "_getsystime",
    "public: class bad_cast & __thiscall bad_cast::operator=(class bad_cast const &)",
    "_wputenv",
    "free",
    "strftime",
    "public: __thiscall istrstream::istrstream(class istrstream const &)",
    "__p__wenviron",
    "_CIsqrt",
    "_wspawnlp",
    "iswpunct",
    "_inp",
    "_findfirsti64",
    "isleadbyte",
    "protected: class istream & __thiscall istream::get(char *,int,int)",
    "public: __thiscall __non_rtti_object::__non_rtti_object(char const *)",
    "_spawnlp",
    "public: class ostream & __thiscall ostream::operator<<(long double)",
    "wcstol",
    "const istream_withassign::`vftable'",
    "_mbsbtype",
    "public: virtual __thiscall filebuf::~filebuf(void)",
    "floor",
    "_local_unwind2",
    "_setmbcp",
    "ungetwc",
    "public: int __thiscall istream::ipfx(int)",
    "protected: struct _CRT_CRITICAL_SECTION * __thiscall ios::lockptr(void)",
    "public: virtual int __thiscall strstreambuf::underflow(void)",
    "public: int __thiscall istream::sync(void)",
    "public: static long const ios::floatfield",
    "_mbsdec",
    "protected: class ostream & __thiscall ostream::operator=(class streambuf *)",
    "protected: void __thiscall streambuf::pbump(int)",
    "islower",
    "public: int __thiscall ofstream::is_open(void)const",
    "_fgetchar",
    "_outp",
    "__mb_cur_max",
    "public: virtual __thiscall istream::~istream(void)",
    "_seterrormode",
    "private: int __thiscall istream::getdouble(char *,int)",
    "strchr",
    "_wtmpnam",
    "_wspawnvpe",
    "_wstati64",
    "protected: __thiscall istream::istream(class istream const &)",
    "protected: char * __thiscall streambuf::pptr(void)const",
    "public: int __thiscall ios::width(void)const",
    "public: int __thiscall type_info::operator==(class type_info const &)const",
    "public: int __thiscall fstream::fd(void)const",
    "public: int __thiscall istream::gcount(void)const",
    "fgetwc",
    "__lconv_init",
    "_winmajor",
    "_getdrives",
    "const iostream::`vbtable'{for `ostream'}",
    "public: class ostream * __thiscall ios::tie(void)const",
    "public: class stdiobuf & __thiscall stdiobuf::operator=(class stdiobuf const &)",
    "time",
    "_kbhit",
    "_wspawnvp",
    "_strdup",
    "isprint",
    "public: long __thiscall ios::unsetf(long)",
    "public: virtual void * __thiscall exception::`vector deleting destructor'(unsigned int)",
    "_pwctype",
    "wcspbrk",
    "class ostream & __cdecl flush(class ostream &)",
    "public: void __thiscall ios::clear(int)",
    "_lseek",
    "public: void __thiscall streambuf::unlock(void)",
    "isspace",
    "protected: class istream & __thiscall istream::operator=(class istream const &)",
    "_isnan",
    "_isatty",
    "memcmp",
    "_findnext",
    "_CIacos",
    "__argc",
    "protected: __thiscall iostream::iostream(void)",
    "wscanf",
    "_telli64",
    "fgetws",
    "_mbsnset",
    "_adj_fdiv_r",
    "protected: void __thiscall ios::init(class streambuf *)",
    "_purecall",
    "public: class ostream & __thiscall ostream::operator<<(class ostream & (__cdecl*)(class ostream &))",
    "ungetc",
    "public: int __thiscall streambuf::sputbackc(char)",
    "public: virtual void * __thiscall stdiostream::`scalar deleting destructor'(unsigned int)",
    "_pctype",
    "public: class istream & __thiscall istream::getline(char *,int,char)",
    "_wfopen",
    "public: long __thiscall ios::setf(long,long)",
    "public: virtual void * __thiscall strstream::`vector deleting destructor'(unsigned int)",
    "_wexeclpe",
    "public: class istream & __thiscall istream::seekg(long,enum ios::seek_dir)",
    "void * __cdecl operator new(unsigned int)",
    "_mbsninc",
    "public: class ostream & __thiscall ostream::operator<<(char const *)",
    "__set_app_type",
    "_CIcos",
    "_outpd",
    "__fpecode",
    "__p__daylight",
    "_mbscat",
    "_mbsdup",
    "fabs",
    "frexp",
    "public: class ostream & __thiscall ostream::operator<<(class streambuf *)",
    "_winver",
    "public: __thiscall ofstream::ofstream(int,char *,int)",
    "sin",
    "protected: virtual int __thiscall strstreambuf::doallocate(void)",
    "_wgetenv",
    "class ostream_withassign cerr",
    "_ismbcdigit",
    "_wexecl",
    "public: __thiscall fstream::fstream(void)",
    "ldexp",
    "__p___winitenv",
    "public: virtual int __thiscall filebuf::underflow(void)",
    "protected: __thiscall ostream::ostream(class ostream const &)",
    "_inpd",
    "_chdrive",
    "_heapmin",
    "_pclose",
    "_lsearch",
    "isgraph",
    "public: __thiscall istrstream::istrstream(char *,int)",
    "void (__cdecl*__cdecl set_unexpected(void (__cdecl*)(void)))(void)",
    "public: __thiscall fstream::fstream(char const *,int,int)",
    "const stdiostream::`vftable'",
    "public: virtual class streambuf * __thiscall strstreambuf::setbuf(char *,int)",
    "_strupr",
    "public: static int __cdecl ios::xalloc(void)",
    "strcmp",
    "_flsbuf",
    "public: void * __thiscall Iostream_init::`vector deleting destructor'(unsigned int)",
    "public: virtual __thiscall strstreambuf::~strstreambuf(void)",
    "public: virtual long __thiscall streambuf::seekpos(long,int)",
    "_wspawnv",
    "putc",
    "_chsize",
    "getenv",
    "fwprintf",
    "__p___mb_cur_max",
    "malloc",
    "_ismbcl1",
    "public: virtual __thiscall bad_typeid::~bad_typeid(void)",
    "public: class __non_rtti_object & __thiscall __non_rtti_object::operator=(class __non_rtti_object const &)",
    "iswupper",
    "iswascii",
    "public: virtual void * __thiscall __non_rtti_object::`vector deleting destructor'(unsigned int)",
    "public: class strstreambuf * __thiscall strstream::rdbuf(void)const",
    "const iostream::`vbtable'{for `istream'}",
    "public: virtual void * __thiscall ostream_withassign::`vector deleting destructor'(unsigned int)",
    "_spawnv",
    "public: void __thiscall streambuf::clrlock(void)",
    "rewind",
    "strcspn",
    "public: virtual long __thiscall strstreambuf::seekoff(long,enum ios::seek_dir,int)",
    "_ismbcspace",
    "_mbscoll",
    "_wspawnle",
    "void (__cdecl*__cdecl set_terminate(void (__cdecl*)(void)))(void)",
    "asctime",
    "public: void __thiscall ofstream::`vbase destructor'(void)",
    "public: int __thiscall istream::get(void)",
    "public: virtual void * __thiscall ios::`vector deleting destructor'(unsigned int)",
    "swscanf",
    "wcscspn",
    "fputc",
    "public: static int const filebuf::openprot",
    "class ostream & __cdecl ends(class ostream &)",
    "const bad_cast::`vftable'",
    "_dup2",
    "public: class filebuf * __thiscall filebuf::open(char const *,int,int)",
    "_mkdir",
    "public: long __thiscall ios::flags(void)const",
    "_adj_fpatan",
    "_wfindfirsti64",
    "public: virtual __thiscall type_info::~type_info(void)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned int)",
    "public: void * __thiscall Iostream_init::`scalar deleting destructor'(unsigned int)",
    "_wexecvp",
    "_tolower",
    "_mbsinc",
    "_wcsdup",
    "_ismbcl0",
    "_itow",
    "__RTtypeid",
    "__p__winminor",
    "_vsnprintf",
    "public: int __thiscall fstream::setmode(int)",
    "_mtlock",
    "public: int __thiscall streambuf::sgetn(char *,int)",
    "__RTCastToVoid",
    "_wtoi",
    "public: class ostream & __thiscall ostream::put(char)",
    "__p__pgmptr",
    "class ostream_withassign clog",
    "_ismbckata",
    "_fsopen",
    "_filelength",
    "public: virtual void * __thiscall iostream::`scalar deleting destructor'(unsigned int)",
    "_wchdir",
    "public: __thiscall ifstream::ifstream(int,char *,int)",
    "_cwait",
    "public: class strstreambuf * __thiscall istrstream::rdbuf(void)const",
    "const istream::`vbtable'",
    "public: __thiscall Iostream_init::Iostream_init(void)",
    "public: virtual void * __thiscall logic_error::`vector deleting destructor'(unsigned int)",
    "__p___wargv",
    "public: class ostream & __thiscall ostream::flush(void)",
    "public: class strstream & __thiscall strstream::operator=(class strstream &)",
    "public: __thiscall ofstream::ofstream(char const *,int,int)",
    "_sys_nerr",
    "__iscsym",
    "_exit",
    "_tell",
    "public: int __thiscall ios::good(void)const",
    "_spawnvpe",
    "_XcptFilter",
    "_wmakepath",
    "public: virtual __thiscall logic_error::~logic_error(void)",
    "_putws",
    "_searchenv",
    "protected: class iostream & __thiscall iostream::operator=(class iostream &)",
    "const ostream::`vftable'",
    "ferror",
    "public: void __thiscall fstream::`vbase destructor'(void)",
    "_mbsnbset",
    "strncmp",
    "_get_osfhandle",
    "_strrev",
    "_unloaddll",
    "atan2",
    "_findnexti64",
    "gets",
    "public: __thiscall ostrstream::ostrstream(char *,int,int)",
    "const ostream::`vbtable'",
    "public: class streambuf * __thiscall ifstream::setbuf(char *,int)",
    "public: int __thiscall streambuf::sputc(int)",
    "_locking",
    "public: virtual __thiscall iostream::~iostream(void)",
    "_ftime",
    "_CIasin",
    "public: void __thiscall ostream_withassign::`vbase destructor'(void)",
    "_wstat",
    "fflush",
    "_commit",
    "calloc",
    "_longjmpex",
    "_memicmp",
    "public: class ostream & __thiscall ostream::operator<<(signed char)",
    "public: int __thiscall ios::width(int)",
    "public: virtual void * __thiscall ifstream::`scalar deleting destructor'(unsigned int)",
    "_fileinfo",
    "_getws",
    "_spawnve",
    "const stdiostream::`vbtable'{for `istream'}",
    "public: __thiscall ostream_withassign::ostream_withassign(class ostream_withassign const &)",
    "ctime",
    "vsprintf",
    "_ismbbalnum",
    "_set_error_mode",
    "public: __thiscall ostream_withassign::ostream_withassign(void)",
    "strerror",
    "_HUGE",
    "feof",
    "_setjmp",
    "protected: void __thiscall streambuf::unbuffered(int)",
    "public: class filebuf * __thiscall filebuf::attach(int)",
    "qsort",
    "_findfirst",
    "__p__timezone",
    "_adjust_fdiv",
    "public: static long const ios::basefield",
    "class istream & __cdecl ws(class istream &)",
    "_strnicoll",
    "setbuf",
    "_adj_fprem",
    "_snwprintf",
    "strpbrk",
    "public: virtual void * __thiscall stdiobuf::`scalar deleting destructor'(unsigned int)",
    "public: void __thiscall streambuf::lock(void)",
    "_waccess",
    "public: class istream & __thiscall istream::seekg(long)",
    "_lseeki64",
    "remove",
    "public: class ostream & __thiscall ostream_withassign::operator=(class ostream const &)",
    "_lfind",
    "public: int __thiscall ifstream::setmode(int)",
    "public: class streambuf & __thiscall streambuf::operator=(class streambuf const &)",
    "atoi",
    "public: __thiscall istream_withassign::istream_withassign(class istream_withassign const &)",
    "_except_handler3",
    "_adj_fdiv_m32",
    "iscntrl",
    "public: class istream & __thiscall istream::operator>>(signed char &)",
    "_getdrive",
    "public: class istream & __thiscall istream::operator>>(unsigned int &)",
    "raise",
    "strstr",
    "public: void __thiscall strstreambuf::freeze(int)",
    "const strstream::`vbtable'{for `istream'}",
    "strtok",
    "private: static int ios::x_curindex",
    "_heapwalk",
    "__p__mbctype",
    "isxdigit",
    "_abnormal_termination",
    "void __cdecl unexpected(void)",
    "public: virtual __thiscall ostream::~ostream(void)",
    "public: void __thiscall ifstream::close(void)",
    "_mbctype",
    "const fstream::`vbtable'{for `istream'}",
    "wcstok",
    "public: virtual void * __thiscall streambuf::`vector deleting destructor'(unsigned int)",
    "public: virtual int __thiscall streambuf::xsgetn(char *,int)",
    "public: __thiscall strstream::strstream(void)",
    "__p__acmdln",
    "_heapchk",
    "public: virtual int __thiscall streambuf::sync(void)",
    "iswlower",
    "modf",
    "public: int __thiscall filebuf::fd(void)const",
    "_atoldbl",
    "const istream_withassign::`vbtable'",
    "wcscat",
    "public: class istream & __thiscall istream_withassign::operator=(class streambuf *)",
    "_mbsnccnt",
    "_ismbcgraph",
    "_mtunlock",
    "_adj_fdiv_m32i",
    "public: char const * __thiscall type_info::name(void)const",
    "wcsspn",
    "iswdigit",
    "localeconv",
    "_wcreat",
    "public: static int const filebuf::sh_none",
    "public: int __thiscall ios::bad(void)const",
    "_setsystime",
    "strlen",
    "_filbuf",
    "_ismbbprint",
    "_setmode",
    "_ismbbkalnum",
    "_wutime",
    "public: void __thiscall fstream::close(void)",
    "_winminor",
    "public: long & __thiscall ios::iword(int)const",
    "_timezone",
    "_fileno",
    "_itoa",
    "public: class istream & __thiscall istream::operator>>(char *)",
    "_mbsnicmp",
    "fprintf",
    "strtod",
    "_mbscmp",
    "_wstrtime",
    "towlower",
    "_sys_errlist",
    "protected: char * __thiscall streambuf::pbase(void)const",
    "const istrstream::`vbtable'",
    "public: class ostream & __thiscall ostream::write(signed char const *,int)",
    "public: class streambuf * __thiscall fstream::setbuf(char *,int)",
    "public: class istream_withassign & __thiscall istream_withassign::operator=(class istream_withassign const &)",
    "_EH_prolog",
    "public: virtual void * __thiscall bad_cast::`scalar deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall logic_error::`scalar deleting destructor'(unsigned int)",
    "strcoll",
    "public: virtual void * __thiscall istream_withassign::`scalar deleting destructor'(unsigned int)",
    "_mbsnextc",
    "public: __thiscall ios::operator void *(void)const",
    "__p__tzname",
    "_wchmod",
    "bsearch",
    "public: int __thiscall streambuf::in_avail(void)const",
    "_rotr",
    "public: class filebuf * __thiscall ifstream::rdbuf(void)const",
    "_wasctime",
    "_CIcosh",
    "_wcslwr",
    "fsetpos",
    "public: virtual class streambuf * __thiscall streambuf::setbuf(char *,int)",
    "public: long __thiscall ios::flags(long)",
    "strxfrm",
    "_inpw",
    "public: static int const filebuf::sh_read",
    "protected: class ostream & __thiscall ostream::operator=(class ostream const &)",
    "srand",
    "_wrename",
    "_access",
    "_ismbbalpha",
    "protected: char * __thiscall streambuf::eback(void)const",
    "public: class fstream & __thiscall fstream::operator=(class fstream &)",
    "public: virtual void * __thiscall bad_typeid::`vector deleting destructor'(unsigned int)",
    "public: __thiscall __non_rtti_object::__non_rtti_object(class __non_rtti_object const &)",
    "_mbsnicoll",
    "_ismbstrail",
    "public: char const * __thiscall type_info::raw_name(void)const",
    "public: __thiscall exception::exception(char const * const &)",
    "protected: class istream & __thiscall istream::operator=(class streambuf *)",
    "protected: static void __cdecl ios::unlockc(void)",
    "public: class strstreambuf * __thiscall ostrstream::rdbuf(void)const",
    "_mbsnbcmp",
    "_finite",
    "_wenviron",
    "_CIsinh",
    "_strncoll",
    "_wctime",
    "public: class istream & __thiscall istream::operator>>(short &)",
    "public: class ostream & __thiscall ostream::operator<<(class ios & (__cdecl*)(class ios &))",
    "int (__cdecl*__cdecl _set_new_handler(int (__cdecl*)(unsigned int)))(unsigned int)",
    "public: char * __thiscall istrstream::str(void)",
    "_CxxThrowException",
    "_rotl",
    "_wgetdcwd",
    "public: int __thiscall ifstream::fd(void)const",
    "_strnset",
    "public: class istream & __thiscall istream::get(signed char *,int,char)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned char)",
    "__wargv",
    "public: virtual void * __thiscall strstreambuf::`vector deleting destructor'(unsigned int)",
    "wcscmp",
    "class ios & __cdecl oct(class ios &)",
    "isalnum",
    "isupper",
    "public: char * __thiscall strstreambuf::str(void)",
    "_wfullpath",
    "public: virtual __thiscall strstream::~strstream(void)",
    "_execvp",
    "public: virtual void * __thiscall fstream::`scalar deleting destructor'(unsigned int)",
    "setlocale",
    "protected: virtual int __thiscall streambuf::doallocate(void)",
    "longjmp",
    "public: class ostream & __thiscall ostream::operator<<(int)",
    "public: class istream & __thiscall istream::operator>>(signed char *)",
    "public: int __thiscall streambuf::snextc(void)",
    "_ismbclower",
    "public: int __thiscall streambuf::sputn(char const *,int)",
    "_control87",
    "mbtowc",
    "_wsystem",
    "public: class streambuf * __thiscall ofstream::setbuf(char *,int)",
    "public: void __cdecl ios::unlockbuf(void)",
    "public: class ostream & __thiscall ostream::operator<<(long)",
    "public: virtual void * __thiscall strstreambuf::`scalar deleting destructor'(unsigned int)",
    "__pxcptinfoptrs",
    "public: virtual void * __thiscall istrstream::`scalar deleting destructor'(unsigned int)",
    "log",
    "protected: class ios & __thiscall ios::operator=(class ios const &)",
    "class istream_withassign cin",
    "public: void __thiscall stdiostream::`vbase destructor'(void)",
    "_errno",
    "_open",
    "public: long __thiscall istream::tellg(void)",
    "const logic_error::`vftable'",
    "public: virtual long __thiscall stdiobuf::seekoff(long,enum ios::seek_dir,int)",
    "wctomb",
    "_mbsncat",
    "public: __thiscall filebuf::filebuf(int)",
    "_getpid",
    "_mbschr",
    "public: int __thiscall ios::rdstate(void)const",
    "__p__pwctype",
    "_getmaxstdio",
    "_environ",
    "_osver",
    "public: virtual void * __thiscall filebuf::`scalar deleting destructor'(unsigned int)",
    "_beginthread",
    "_chgsign",
    "public: class istream & __thiscall istream::get(char &)",
    "public: __thiscall filebuf::filebuf(int,char *,int)",
    "mbstowcs",
    "_setjmp3",
    "_iob",
    "_controlfp",
    "_initterm",
    "class ios & __cdecl dec(class ios &)",
    "_putenv",
    "public: class ostream & __thiscall ostream::operator<<(unsigned short)",
    "_stati64",
    "_wspawnl",
    "ispunct",
    "_ismbbkprint",
    "private: class ostream & __thiscall ostream::writepad(char const *,char const *)",
    "puts",
    "_cgets",
    "__p__wcmdln",
    "const strstream::`vbtable'{for `ostream'}",
    "public: class ostream & __thiscall ostream::operator<<(signed char const *)",
    "_statusfp",
    "_unlink",
    "freopen",
    "int (__cdecl*__cdecl _query_new_handler(void))(unsigned int)",
    "protected: int __thiscall streambuf::allocate(void)",
    "public: __thiscall iostream::iostream(class streambuf *)",
    "_getcwd",
    "public: class istream & __thiscall istream::operator>>(long &)",
    "public: virtual __thiscall ostream_withassign::~ostream_withassign(void)",
    "public: virtual int __thiscall stdiobuf::pbackfail(int)",
    "strcpy",
    "_fputwchar",
    "_ungetch",
    "getchar",
    "_ismbcalnum",
    "public: virtual __thiscall ostrstream::~ostrstream(void)",
    "ceil",
    "public: virtual __thiscall streambuf::~streambuf(void)",
    "wcstod",
    "const ostream_withassign::`vbtable'",
    "iswspace",
    "private: int __thiscall istream::getint(char *)",
    "public: class ostream & __thiscall ostream::put(signed char)",
    "public: virtual int __thiscall streambuf::pbackfail(int)",
    "public: virtual void * __thiscall stdiobuf::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall ofstream::`scalar deleting destructor'(unsigned int)",
    "tmpfile",
    "vprintf",
    "strtoul",
    "_CIexp",
    "public: class ostream & __thiscall ostream::operator<<(double)",
    "fwrite",
    "_wexecve",
    "_ecvt",
    "public: void __cdecl ios::lock(void)",
    "_pipe",
    "mktime",
    "public: __thiscall stdiobuf::stdiobuf(struct _iobuf *)",
    "_mbscspn",
    "public: int __thiscall ios::delbuf(void)const",
    "_execvpe",
    "void (__cdecl*__cdecl _set_se_translator(void (__cdecl*)(unsigned int,struct _EXCEPTION_POINTERS *)))(unsigned int,struct _EXCEPTION_POINTERS *)",
    "public: __thiscall ifstream::ifstream(char const *,int,int)",
    "__p___initenv",
    "_mbbtype",
    "_wfdopen",
    "atol",
    "public: __thiscall strstreambuf::strstreambuf(class strstreambuf const &)",
    "iswcntrl",
    "protected: __thiscall iostream::iostream(class iostream const &)",
    "_mbsspn",
    "public: class istream & __thiscall istream::operator>>(class istream & (__cdecl*)(class istream &))",
    "_fpreset",
    "public: int __thiscall streambuf::sbumpc(void)",
    "public: virtual void * __thiscall istrstream::`vector deleting destructor'(unsigned int)",
    "sprintf",
    "public: __thiscall bad_cast::bad_cast(char const * const &)",
    "public: class istream & __thiscall istream::ignore(int,int)",
    "sscanf",
    "atan",
    "_safe_fprem1",
    "void __cdecl terminate(void)",
    "iswxdigit",
    "_ismbcsymbol",
    "__wgetmainargs",
    "public: void __thiscall streambuf::dbp(void)",
    "class ostream & __cdecl endl(class ostream &)",
    "ftell",
    "public: __thiscall strstreambuf::strstreambuf(int)",
    "_stricoll",
    "public: class istream & __thiscall istream::operator>>(int &)",
    "_fullpath",
    "public: virtual void * __thiscall exception::`scalar deleting destructor'(unsigned int)",
    "public: int __thiscall ios::operator!(void)const",
    "__CxxFrameHandler",
    "_fpieee_flt",
    "_CIatan2",
    "_c_exit",
    "public: __thiscall fstream::fstream(int)",
    "public: class bad_typeid & __thiscall bad_typeid::operator=(class bad_typeid const &)",
    "public: class logic_error & __thiscall logic_error::operator=(class logic_error const &)",
    "const istream::`vftable'",
    "perror"
  ],
  "msvfw32.dll": [
    "ICOpen",
    "ICMThunk32",
    "ICInfo",
    "ICImageCompress",
    "MCIWndRegisterClass",
    "ICSeqCompressFrame",
    "DrawDibBegin",
    "DrawDibStart",
    "VideoForWindowsVersion",
    "MCIWndCreate",
    "GetOpenFileNamePreview",
    "DrawDibSetPalette",
    "StretchDIB",
    "ICCompressorFree",
    "DrawDibEnd",
    "ICGetInfo",
    "GetSaveFileNamePreviewW",
    "DrawDibRealize",
    "ICDrawBegin",
    "ICDraw",
    "GetSaveFileNamePreviewA",
    "ICCompressorChoose",
    "DrawDibOpen",
    "ICClose",
    "MCIWndCreateA",
    "DrawDibProfileDisplay",
    "ICCompress",
    "DrawDibChangePalette",
    "DrawDibDraw",
    "ICLocate",
    "ICDecompress",
    "ICSeqCompressFrameStart",
    "DrawDibStop",
    "ICRemove",
    "ICSendMessage",
    "GetOpenFileNamePreviewW",
    "DrawDibGetPalette",
    "DrawDibTime",
    "DrawDibGetBuffer",
    "ICSeqCompressFrameEnd",
    "ICOpenFunction",
    "MCIWndCreateW",
    "GetOpenFileNamePreviewA",
    "ICGetDisplayFormat",
    "DrawDibClose",
    "ICInstall",
    "ICImageDecompress"
  ],
  "msvidc32.dll": [
    "DriverProc"
  ],
  "msvproc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "mswdat10.dll": "No exports",
  "mswmdm.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mswsock.dll": [
    "GetAddressByNameW",
    "Tcpip6_WSHOpenSocket",
    "GetTypeByNameW",
    "Tcpip6_WSHEnumProtocols",
    "Tcpip6_WSHGetSocketInformation",
    "Tcpip6_WSHGetWildcardSockaddr",
    "Tcpip4_WSHStringToAddress",
    "GetTypeByNameA",
    "Tcpip6_WSHJoinLeaf",
    "NPLoadNameSpaces",
    "GetSocketErrorMessageW",
    "Tcpip6_WSHGetWSAProtocolInfo",
    "getnetbyname",
    "Tcpip6_WSHIoctl",
    "Tcpip4_WSHGetWildcardSockaddr",
    "Tcpip4_WSHAddressToString",
    "GetNameByTypeA",
    "Tcpip4_WSHEnumProtocols",
    "dn_expand",
    "Tcpip4_WSHGetProviderGuid",
    "rresvport",
    "SetServiceW",
    "Tcpip4_WSHJoinLeaf",
    "Tcpip6_WSHGetProviderGuid",
    "MigrateWinsockConfigurationEx",
    "Tcpip4_WSHGetBroadcastSockaddr",
    "s_perror",
    "NSPStartup",
    "EnumProtocolsA",
    "MigrateWinsockConfiguration",
    "EnumProtocolsW",
    "Tcpip6_WSHStringToAddress",
    "GetAcceptExSockaddrs",
    "Tcpip4_WSHIoctl",
    "rcmd",
    "sethostname",
    "SetServiceA",
    "WSARecvEx",
    "Tcpip6_WSHOpenSocket2",
    "Tcpip4_WSHNotify",
    "GetNameByTypeW",
    "inet_network",
    "Tcpip4_WSHGetSockaddrType",
    "Tcpip4_WSHOpenSocket",
    "Tcpip4_WSHGetSocketInformation",
    "Tcpip4_WSHGetWSAProtocolInfo",
    "TransmitFile",
    "rexec",
    "GetServiceA",
    "Tcpip6_WSHSetSocketInformation",
    "AcceptEx",
    "StartWsdpService",
    "StopWsdpService",
    "GetServiceW",
    "Tcpip6_WSHGetWinsockMapping",
    "Tcpip4_WSHGetWinsockMapping",
    "Tcpip4_WSHOpenSocket2",
    "Tcpip4_WSHSetSocketInformation",
    "Tcpip6_WSHAddressToString",
    "Tcpip6_WSHGetSockaddrType",
    "Tcpip6_WSHNotify",
    "WSPStartup",
    "GetAddressByNameA"
  ],
  "mswstr10.dll": "No exports",
  "msxbde40.dll": [
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msxml3.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msxml3r.dll": "No exports",
  "msxml6.dll": [
    "DllGetActivationFactory",
    "DllSetProperty",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "msxml6r.dll": "No exports",
  "msyuv.dll": [
    "DriverProc"
  ],
  "mtxclu.dll": [
    "MtxCluGetActiveClusterNode",
    "Startup",
    "MtxCluBringOnlineDTCW",
    "MtxCluIsSameNodeW",
    "MtxCluRemoveClusterTmMappingByName",
    "MtxCluGetDtcDiskResourceDrive",
    "MtxCluIsNetworkNameInLocalClusterW",
    "MtxCluGetDTCVirtualServerNameW",
    "MtxCluGetDefaultClusterResourceNonAdmin",
    "MtxCluSetClusterTmMapping",
    "MtxCluGetComputerNameW",
    "MtxCluGetTmResource",
    "MtxCluIsClusterPresent",
    "MtxCluGetDefaultClusterResource",
    "MtxCluGetNameFromResourceIdString",
    "MtxCluGetSecurityRegValue",
    "MtxCluCreateClusterTmInstance",
    "MtxCluGetDTCResourceForResource",
    "MtxCluVerifyLogPathInDependantDiskResource",
    "MtxCluCreateTmInstanceForVirtualServer",
    "MtxCluGetResourceId",
    "MtxCluEnumerateClusterTmMappings",
    "MtxCluGetVirtualServerToken",
    "MtxCluTakeOfflineDTCW",
    "MtxCluGetNameFromResourceIdStringNonAdmin",
    "MtxCluClearClusterTmMappings",
    "MtxCluEnumerateDtcResources",
    "MtxCluGetClusterResourceIdFromName",
    "MtxCluEnumerateDtcResourcesEx",
    "MtxCluSetDefaultClusterResource",
    "MtxCluCreateClusterProxyTmInstance",
    "MtxCluIsSameClusterW",
    "MtxCluGetResourceIdStringFromName",
    "MtxCluSetSecurityRegValue",
    "MtxCluIsClusterPresentExW",
    "MtxCluGetDTCStatusW"
  ],
  "mtxdm.dll": [
    "GetDispenserManager"
  ],
  "mtxex.dll": [
    "DllGetClassObject",
    "SafeRef",
    "MTSCreateActivity",
    "GetObjectContext"
  ],
  "mtxlegih.dll": [
    "TryLegInterfaceFirst"
  ],
  "mtxoci.dll": [
    "ologTransacted",
    "ocom",
    "oflng",
    "obndra",
    "MTxOciGetVersion",
    "odessp",
    "oparse",
    "oclose",
    "DllRegisterServer",
    "MTxOciRegisterCursor",
    "DllUnregisterServer",
    "obndrv",
    "oexn",
    "ofetch",
    "oopen",
    "orol",
    "Enlist",
    "GetXaSwitch",
    "ocan",
    "odefin",
    "MTxolog",
    "obindps",
    "opinit",
    "ogetpi",
    "ocon",
    "oopt",
    "odescr",
    "ofen",
    "obreak",
    "obndrn",
    "ocof",
    "osetpi",
    "olog",
    "odefinps",
    "oerhms",
    "oexfet",
    "oermsg",
    "MTxOciInit",
    "ologof",
    "oexec"
  ],
  "muifontsetup.dll": [
    "OnMachineUILanguageSwitch",
    "OnMachineUILanguageInit"
  ],
  "mycomput.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mydocs.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "PerUserInit"
  ],
  "NAPCRYPT.DLL": "No exports",
  "NAPHLPR.DLL": "No exports",
  "NAPMONTR.DLL": [
    "DllMain",
    "InitHelperDll"
  ],
  "NapiNSP.dll": [
    "DllMain",
    "NSPStartup"
  ],
  "NaturalLanguage6.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "NcaApi.dll": [
    "NcaExecuteAndCaptureLogs",
    "NcaGetConfig",
    "NcaEngineClose",
    "NcaStatusEventSubscribe",
    "NcaNetworkClose",
    "DllMain",
    "NcaEngineOpen",
    "NcaStatusEventUnsubscribe",
    "NcaNetworkOpen",
    "NcaToggleNamePreferenceState",
    "NcaGetEvidenceCollectorResult"
  ],
  "NcaSvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "NcdAutoSetup.dll": [
    "NcdAutoSetup_Generalize",
    "SvchostMain",
    "SvchostPushServiceGlobals"
  ],
  "NcdProp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "NdisImPlatform.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "NetworkStatus.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "NlsData0000.dll": [
    "LangDataCall"
  ],
  "NlsData0001.dll": [
    "LangDataCall"
  ],
  "NlsData0002.dll": [
    "LangDataCall"
  ],
  "NlsData0003.dll": [
    "LangDataCall"
  ],
  "NlsData0007.dll": [
    "LangDataCall"
  ],
  "NlsData0009.dll": [
    "LangDataCall"
  ],
  "NlsData000a.dll": [
    "LangDataCall"
  ],
  "NlsData000c.dll": [
    "LangDataCall"
  ],
  "NlsData000d.dll": [
    "LangDataCall"
  ],
  "NlsData000f.dll": [
    "LangDataCall"
  ],
  "NlsData0010.dll": [
    "LangDataCall"
  ],
  "NlsData0011.dll": [
    "LangDataCall"
  ],
  "NlsData0013.dll": [
    "LangDataCall"
  ],
  "NlsData0018.dll": [
    "LangDataCall"
  ],
  "NlsData0019.dll": [
    "LangDataCall"
  ],
  "NlsData001a.dll": [
    "LangDataCall"
  ],
  "NlsData001b.dll": [
    "LangDataCall"
  ],
  "NlsData001d.dll": [
    "LangDataCall"
  ],
  "NlsData0020.dll": [
    "LangDataCall"
  ],
  "NlsData0021.dll": [
    "LangDataCall"
  ],
  "NlsData0022.dll": [
    "LangDataCall"
  ],
  "NlsData0024.dll": [
    "LangDataCall"
  ],
  "NlsData0026.dll": [
    "LangDataCall"
  ],
  "NlsData0027.dll": [
    "LangDataCall"
  ],
  "NlsData002a.dll": [
    "LangDataCall"
  ],
  "NlsData0039.dll": [
    "LangDataCall"
  ],
  "NlsData003e.dll": [
    "LangDataCall"
  ],
  "NlsData0045.dll": [
    "LangDataCall"
  ],
  "NlsData0046.dll": [
    "LangDataCall"
  ],
  "NlsData0047.dll": [
    "LangDataCall"
  ],
  "NlsData0049.dll": [
    "LangDataCall"
  ],
  "NlsData004a.dll": [
    "LangDataCall"
  ],
  "NlsData004b.dll": [
    "LangDataCall"
  ],
  "NlsData004c.dll": [
    "LangDataCall"
  ],
  "NlsData004e.dll": [
    "LangDataCall"
  ],
  "NlsData0414.dll": [
    "LangDataCall"
  ],
  "NlsData0416.dll": [
    "LangDataCall"
  ],
  "NlsData0816.dll": [
    "LangDataCall"
  ],
  "NlsData081a.dll": [
    "LangDataCall"
  ],
  "NlsData0c1a.dll": [
    "LangDataCall"
  ],
  "NlsLexicons0001.dll": "No exports",
  "NlsLexicons0002.dll": "No exports",
  "NlsLexicons0003.dll": "No exports",
  "NlsLexicons0007.dll": "No exports",
  "NlsLexicons0009.dll": "No exports",
  "NlsLexicons000a.dll": "No exports",
  "NlsLexicons000c.dll": "No exports",
  "NlsLexicons000d.dll": "No exports",
  "NlsLexicons000f.dll": "No exports",
  "NlsLexicons0010.dll": "No exports",
  "NlsLexicons0011.dll": "No exports",
  "NlsLexicons0013.dll": "No exports",
  "NlsLexicons0018.dll": "No exports",
  "NlsLexicons0019.dll": "No exports",
  "NlsLexicons001a.dll": "No exports",
  "NlsLexicons001b.dll": "No exports",
  "NlsLexicons001d.dll": "No exports",
  "NlsLexicons0020.dll": "No exports",
  "NlsLexicons0021.dll": "No exports",
  "NlsLexicons0022.dll": "No exports",
  "NlsLexicons0024.dll": "No exports",
  "NlsLexicons0026.dll": "No exports",
  "NlsLexicons0027.dll": "No exports",
  "NlsLexicons002a.dll": "No exports",
  "NlsLexicons0039.dll": "No exports",
  "NlsLexicons003e.dll": "No exports",
  "NlsLexicons0045.dll": "No exports",
  "NlsLexicons0046.dll": "No exports",
  "NlsLexicons0047.dll": "No exports",
  "NlsLexicons0049.dll": "No exports",
  "NlsLexicons004a.dll": "No exports",
  "NlsLexicons004b.dll": "No exports",
  "NlsLexicons004c.dll": "No exports",
  "NlsLexicons004e.dll": "No exports",
  "NlsLexicons0414.dll": "No exports",
  "NlsLexicons0416.dll": "No exports",
  "NlsLexicons0816.dll": "No exports",
  "NlsLexicons081a.dll": "No exports",
  "NlsLexicons0c1a.dll": "No exports",
  "NlsModels0011.dll": "No exports",
  "Nlsdl.dll": [
    "DownlevelGetParentLocaleLCID",
    "DownlevelLocaleNameToLCID",
    "DownlevelLCIDToLocaleName",
    "DownlevelGetParentLocaleName"
  ],
  "napdsnap.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "napipsec.dll": [
    "InitializeNapIpsecRp",
    "UninitializeNapIpsecRp"
  ],
  "ncbservice.dll": [
    "SubServiceStart",
    "SubServicePowerSuspend",
    "SubServiceScmNotification",
    "SubServiceStop"
  ],
  "nci.dll": [
    "NciSetConnectionName",
    "NciGetConnectionName",
    "UpdateAdvancedParameter"
  ],
  "ncobjapi.dll": [
    "WmiDestroyObject",
    "WmiEventSourceDisconnect",
    "WmiCreateObjectWithFormat",
    "WmiAddObjectProp",
    "WmiSetAndCommitObject",
    "WmiCreateObject",
    "WmiCommitObject",
    "WmiIsObjectActive",
    "WmiCreateObjectWithProps",
    "WmiEventSourceConnect"
  ],
  "ncrypt.dll": [
    "NCryptFreeBuffer",
    "BCryptFinishHash",
    "NCryptVerifySignature",
    "NCryptEnumKeys",
    "NCryptStreamOpenToUnprotect",
    "SslGenerateMasterKey",
    "BCryptEnumProviders",
    "BCryptConfigureContextFunction",
    "BCryptDestroySecret",
    "NCryptUnprotectKey",
    "NCryptCreatePersistedKey",
    "SslDecryptPacket",
    "SslGetCipherSuitePRFHashAlgorithm",
    "BCryptGenerateSymmetricKey",
    "BCryptOpenAlgorithmProvider",
    "BCryptGetProperty",
    "BCryptQueryProviderRegistration",
    "BCryptKeyDerivation",
    "NCryptSecretAgreement",
    "BCryptQueryContextConfiguration",
    "SslCreateEphemeralKey",
    "BCryptRegisterConfigChangeNotify",
    "SslOpenPrivateKey",
    "SslImportKey",
    "BCryptGenRandom",
    "NCryptSetProperty",
    "NCryptIsAlgSupported",
    "BCryptEncrypt",
    "SslOpenProvider",
    "BCryptDuplicateKey",
    "BCryptQueryContextFunctionProperty",
    "NCryptTranslateHandle",
    "NCryptGetProperty",
    "NCryptEnumAlgorithms",
    "NCryptDuplicateKeyProtectorHandle",
    "NCryptDeriveKey",
    "BCryptImportKeyPair",
    "SslImportMasterKey",
    "BCryptFreeBuffer",
    "NCryptProtectKey",
    "NCryptOpenKey",
    "NCryptEncrypt",
    "BCryptExportKey",
    "NCryptEnumStorageProviders",
    "SslGenerateSessionKeys",
    "BCryptSetAuditingInterface",
    "BCryptConfigureContext",
    "BCryptDeriveKeyPBKDF2",
    "NCryptUnprotectSecret",
    "NCryptGetProtectionDescriptorInfo",
    "BCryptRemoveContextFunction",
    "SslVerifySignature",
    "NCryptFreeObject",
    "SslIncrementProviderReferenceCount",
    "BCryptResolveProviders",
    "BCryptDeleteContext",
    "BCryptEnumRegisteredProviders",
    "BCryptFinalizeKeyPair",
    "NCryptNotifyChangeKey",
    "NCryptIsKeyHandle",
    "NCryptCloseKeyProtector",
    "SslCreateClientAuthHash",
    "BCryptVerifySignature",
    "NCryptStreamClose",
    "SslFreeObject",
    "NCryptStreamUpdate",
    "SslEncryptPacket",
    "NCryptCreateProtectionDescriptor",
    "SslLookupCipherSuiteInfo",
    "SslExportKey",
    "SslComputeClientAuthHash",
    "NCryptImportKey",
    "SslChangeNotify",
    "NCryptFinalizeKey",
    "BCryptUnregisterConfigChangeNotify",
    "GetSChannelInterface",
    "NCryptOpenKeyProtector",
    "BCryptEnumContextFunctionProviders",
    "BCryptSecretAgreement",
    "NCryptOpenStorageProvider",
    "SslGetKeyProperty",
    "GetKeyStorageInterface",
    "SslEnumProtocolProviders",
    "NCryptProtectSecret",
    "BCryptGetFipsAlgorithmMode",
    "SslGetProviderProperty",
    "BCryptSetContextFunctionProperty",
    "BCryptCreateContext",
    "BCryptDeriveKey",
    "BCryptEnumContextFunctions",
    "NCryptQueryProtectionDescriptorName",
    "SslComputeEapKeyBlock",
    "BCryptGenerateKeyPair",
    "BCryptHashData",
    "NCryptDeleteKey",
    "SslComputeFinishedHash",
    "SslCreateHandshakeHash",
    "BCryptAddContextFunctionProvider",
    "NCryptSetAuditingInterface",
    "GetIsolationServerInterface",
    "BCryptQueryContextFunctionConfiguration",
    "BCryptDuplicateHash",
    "NCryptCloseProtectionDescriptor",
    "NCryptStreamOpenToProtect",
    "BCryptDestroyHash",
    "NCryptExportKey",
    "BCryptAddContextFunction",
    "NCryptDecrypt",
    "BCryptEnumAlgorithms",
    "SslEnumCipherSuites",
    "BCryptSignHash",
    "BCryptDecrypt",
    "BCryptCloseAlgorithmProvider",
    "BCryptUnregisterProvider",
    "BCryptCreateHash",
    "BCryptEnumContexts",
    "NCryptSignHash",
    "NCryptKeyDerivation",
    "SslLookupCipherLengths",
    "SslDecrementProviderReferenceCount",
    "BCryptRemoveContextFunctionProvider",
    "BCryptImportKey",
    "NCryptRegisterProtectionDescriptorName",
    "SslSignHash",
    "BCryptSetProperty",
    "BCryptRegisterProvider",
    "SslFreeBuffer",
    "BCryptDeriveKeyCapi",
    "SslHashHandshake",
    "BCryptDestroyKey"
  ],
  "ncryptprov.dll": [
    "GetKeyStorageInterface",
    "SKCacheFlush",
    "SetAuditingInterface"
  ],
  "ncryptsslp.dll": [
    "GetSChannelInterface"
  ],
  "ncsi.dll": [
    "NcsiAllocateAndGetConnectivityStatusSet",
    "NcsiFreeConnectivityStatusSet",
    "NcsiNotifySessionChange",
    "NcsiIdentifyUserSpecificProxies",
    "NcsiRegisterConnectivityStatusChange",
    "NcsiUpdateClientPresence",
    "NcsiPerformRefresh",
    "NcsiDeregisterConnectivityStatusChange"
  ],
  "nddeapi.dll": [
    "NDdeShareDelA",
    "NDdeSpecialCommandA",
    "NDdeSetTrustedShareW",
    "NDdeShareGetInfoA",
    "NDdeIsValidAppTopicListW",
    "NDdeGetTrustedShareW",
    "NDdeShareEnumA",
    "NDdeTrustedShareEnumA",
    "NDdeIsValidAppTopicListA",
    "NDdeGetShareSecurityA",
    "NDdeIsValidShareNameA",
    "NDdeSetTrustedShareA",
    "NDdeShareAddW",
    "NDdeSetShareSecurityW",
    "NDdeSpecialCommandW",
    "NDdeShareDelW",
    "NDdeGetShareSecurityW",
    "NDdeGetErrorStringA",
    "NDdeIsValidShareNameW",
    "NDdeShareEnumW",
    "NDdeShareAddA",
    "NDdeGetErrorStringW",
    "NDdeTrustedShareEnumW",
    "NDdeSetShareSecurityA",
    "NDdeGetTrustedShareA",
    "NDdeShareSetInfoA",
    "NDdeShareGetInfoW",
    "NDdeShareSetInfoW"
  ],
  "ndfapi.dll": [
    "NdfRunDllDiagnoseWithAnswerFile",
    "NdfCreateDNSIncident",
    "NdfCreateWebIncident",
    "NdfCreateConnectivityIncident",
    "NdfRunDllDiagnoseNetConnectionIncident",
    "NdfCreateWinSockIncident",
    "NdfCreateGroupingIncident",
    "DllRegisterServer",
    "NdfRepairIncidentEx",
    "DllUnregisterServer",
    "NdfRunDllDiagnoseIncident",
    "NdfCreateWebIncidentEx",
    "NdfCreatePnrpIncident",
    "NdfGetTraceFile",
    "NdfExecuteDiagnosis",
    "DllCanUnloadNow",
    "NdfRunDllHelpTopic",
    "NdfCreateNetConnectionIncident",
    "NdfRepairIncident",
    "NdfRunDllDuplicateIPDefendingSystem",
    "NdfCreateInboundIncident",
    "NdfCancelIncident",
    "DllGetClassObject",
    "NdfCreateSharingIncident",
    "NdfRunDllDuplicateIPOffendingSystem",
    "NdfDiagnoseIncident",
    "NdfCreateIncident",
    "NdfCloseIncident"
  ],
  "ndfetw.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "ndfhcdiscovery.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "ndiscapCfg.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "ndishc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "ndproxystub.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "nduprov.dll": [
    "SruUninitializeProvider",
    "SruInitializeProvider"
  ],
  "negoexts.dll": [
    "SpLsaModeInitialize",
    "SpUserModeInitialize"
  ],
  "netapi32.dll": [
    "NetSessionGetInfo",
    "NetGroupEnum",
    "DsGetDcOpenW",
    "I_NetDfsIsThisADomainName",
    "NetpGetConfigTStrArray",
    "DsGetSiteNameA",
    "NetDfsSetFtContainerSecurity",
    "NetLocalGroupGetInfo",
    "RxNetServerEnum",
    "NetConnectionEnum",
    "I_NetDatabaseRedo",
    "NetLocalGroupAddMembers",
    "NetReplImportDirEnum",
    "NetGetJoinableOUs",
    "I_NetChainSetClientAttributes2",
    "I_NetServerSetServiceBits",
    "NetServerComputerNameDel",
    "NetApiBufferReallocate",
    "NetDfsRemoveStdRoot",
    "NetLocalGroupDelMembers",
    "NetRenameMachineInDomain",
    "NetpIsUncComputerNameValid",
    "I_BrowserServerEnum",
    "NetReplImportDirLock",
    "NetAuditRead",
    "NetAccessDel",
    "NlBindingSetAuthInfo",
    "NetDfsManagerGetConfigInfo",
    "RxNetAccessGetInfo",
    "RxNetAccessGetUserPerms",
    "NetReplImportDirDel",
    "NetAlertRaise",
    "NetpNetBiosStatusToApiStatus",
    "NetShareEnumSticky",
    "I_NetLogonSamLogon",
    "NetConfigSet",
    "NetLocalGroupAddMember",
    "NetServiceEnum",
    "NetDfsGetInfo",
    "NetReplExportDirGetInfo",
    "NetValidatePasswordPolicy",
    "NetpHexDump",
    "NetServiceInstall",
    "NetDfsGetSecurity",
    "I_NetServerPasswordSet",
    "NetUserModalsSet",
    "NetGetJoinInformation",
    "NetReplGetInfo",
    "NetServiceControl",
    "NetSessionDel",
    "DsGetForestTrustInformationW",
    "NetpSetFileSecurity",
    "I_NetServerPasswordGet",
    "NetRequestProvisioningPackageInstall",
    "NetSessionEnum",
    "NetWkstaGetInfo",
    "NetDfsRemove",
    "NetUserModalsGet",
    "DsGetDcNameW",
    "NetLocalGroupDel",
    "NetEnumerateComputerNames",
    "NetServerEnum",
    "NetRemoveServiceAccount",
    "NetShareDelEx",
    "NetUseAdd",
    "NetUserGetLocalGroups",
    "NetDfsSetSecurity",
    "NetDfsSetClientInfo",
    "NetDfsRename",
    "NetApiBufferAllocate",
    "NlBindingAddServerToCache",
    "NetServerTransportAddEx",
    "NetpOpenConfigData",
    "NetMessageNameDel",
    "NetScheduleJobGetInfo",
    "I_NetLogonSamLogonEx",
    "NetUseGetInfo",
    "NetUserAdd",
    "NetAddServiceAccount",
    "NetDfsAddStdRoot",
    "NetAccessGetUserPerms",
    "NetShareAdd",
    "NetAccessEnum",
    "NetLogonSetServiceBits",
    "NetRegisterDomainNameChangeNotification",
    "I_NetServerAuthenticate3",
    "NetRemoteTOD",
    "NetGroupAddUser",
    "DsGetDcSiteCoverageW",
    "NetpIsRemote",
    "I_NetLogonUasLogon",
    "NetpwPathCanonicalize",
    "NetDfsRemoveFtRoot",
    "NetReplSetInfo",
    "NetAccessAdd",
    "NetRemoteComputerSupports",
    "NetServerDiskEnum",
    "NetDfsAdd",
    "DsMergeForestTrustInformationW",
    "NetAuditClear",
    "I_DsUpdateReadOnlyServerDnsRecords",
    "RxNetAccessEnum",
    "DsAddressToSiteNamesW",
    "NetDfsRemoveRootTarget",
    "NetpwNameCanonicalize",
    "NetServerTransportEnum",
    "NetSetPrimaryComputerName",
    "NetDfsGetClientInfo",
    "I_NetGetDCList",
    "NetIsServiceAccount",
    "NetShareCheck",
    "NetBrowserStatisticsGet",
    "NetGroupSetUsers",
    "NetUserEnum",
    "DsDeregisterDnsHostRecordsW",
    "NetapipBufferAllocate",
    "DsGetDcNameWithAccountW",
    "NetServerTransportAdd",
    "NetServerEnumEx",
    "I_BrowserDebugTrace",
    "DavDeleteConnection",
    "I_NetServerAuthenticate",
    "I_NetLogonSamLogonWithFlags",
    "NetpGetFileSecurity",
    "NetDfsManagerInitialize",
    "I_NetDatabaseSync2",
    "NetWkstaUserEnum",
    "NetReplExportDirUnlock",
    "NetLocalGroupAdd",
    "NetUserDel",
    "NetServerComputerNameAdd",
    "NetpGetConfigDword",
    "I_NetDatabaseSync",
    "NlBindingRemoveServerFromCache",
    "I_NetServerGetTrustInfo",
    "NetDfsMove",
    "I_NetServerAuthenticate2",
    "NetDfsGetSupportedNamespaceVersion",
    "NetValidateName",
    "DavFlushFile",
    "I_NetLogonSendToSam",
    "RxNetAccessSetInfo",
    "NetGroupAdd",
    "DsEnumerateDomainTrustsW",
    "NetLocalGroupSetInfo",
    "NetGetAnyDCName",
    "NetRemoveAlternateComputerName",
    "NetReplImportDirAdd",
    "NetShareSetInfo",
    "NetUserGetGroups",
    "NetReplExportDirEnum",
    "NetpCleanFtinfoContext",
    "NetpwPathType",
    "NetUserGetInfo",
    "NetUserChangePassword",
    "NetUserSetGroups",
    "NetWkstaUserGetInfo",
    "NetpwNameValidate",
    "NetEnumerateTrustedDomains",
    "NetWkstaSetInfo",
    "I_NetServerTrustPasswordsGet",
    "DavGetHTTPFromUNCPath",
    "NetApiBufferSize",
    "DsAddressToSiteNamesExW",
    "NetEnumerateServiceAccounts",
    "NetShareDelSticky",
    "NetpNetBiosReset",
    "I_BrowserResetNetlogonState",
    "NetScheduleJobAdd",
    "NetUseDel",
    "DsDeregisterDnsHostRecordsA",
    "NetpInitFtinfoContext",
    "I_NetAccountDeltas",
    "RxNetUserPasswordSet",
    "NetFileEnum",
    "DsEnumerateDomainTrustsA",
    "DsValidateSubnetNameW",
    "NetApiBufferFree",
    "NetWkstaTransportEnum",
    "I_NetLogonGetDomainInfo",
    "NetWkstaTransportDel",
    "I_BrowserQueryEmulatedDomains",
    "NetDfsSetStdContainerSecurity",
    "NetLocalGroupGetMembers",
    "NetMessageBufferSend",
    "NetServiceGetInfo",
    "I_NetLogonControl",
    "NetErrorLogRead",
    "NetDfsAddStdRootForced",
    "I_NetLogonControl2",
    "Netbios",
    "NetAddAlternateComputerName",
    "NetServerTransportDel",
    "NetpAddTlnFtinfoEntry",
    "NetAuditWrite",
    "I_NetlogonComputeServerDigest",
    "NetpGetConfigValue",
    "RxRemoteApi",
    "DsGetDcNextW",
    "I_BrowserQueryOtherDomains",
    "NetDfsGetStdContainerSecurity",
    "I_NetLogonUasLogoff",
    "NetConfigGetAll",
    "NetGroupDel",
    "I_NetChainSetClientAttributes",
    "DsAddressToSiteNamesExA",
    "NetServerAliasAdd",
    "DsGetSiteNameW",
    "NetDfsManagerSendSiteInfo",
    "NetpGetConfigBool",
    "NetProvisionComputerAccount",
    "DsAddressToSiteNamesA",
    "DsRoleGetPrimaryDomainInformation",
    "NetDfsAddRootTarget",
    "I_NetServerPasswordSet2",
    "NetMessageNameAdd",
    "NetReplImportDirGetInfo",
    "NetGetDisplayInformationIndex",
    "NetMessageNameGetInfo",
    "NetpAssertFailed",
    "DsGetDcOpenA",
    "NetReplExportDirSetInfo",
    "NetServerGetInfo",
    "I_BrowserResetStatistics",
    "DavGetExtendedError",
    "NetWkstaUserSetInfo",
    "NetGetDCName",
    "NetDfsAddFtRoot",
    "DsGetDcNextA",
    "NetpCloseConfigData",
    "NetpCopyFtinfoContext",
    "NetDfsGetFtContainerSecurity",
    "NetReplExportDirLock",
    "NetpAllocFtinfoEntry",
    "NetErrorLogClear",
    "DavGetUNCFromHTTPPath",
    "NetReplExportDirDel",
    "NetCreateProvisioningPackage",
    "NetAlertRaiseEx",
    "NetGroupGetUsers",
    "NetServerAliasDel",
    "NetShareGetInfo",
    "DavAddConnection",
    "I_BrowserSetNetlogonState",
    "DsRoleFreeMemory",
    "NetShareDel",
    "I_NetDatabaseDeltas",
    "I_NetServerReqChallenge",
    "NetConfigGet",
    "NetDfsEnum",
    "I_NetGetForestTrustInformation",
    "NetServerAliasEnum",
    "NetLocalGroupDelMember",
    "NetScheduleJobEnum",
    "NetReplExportDirAdd",
    "NetUnregisterDomainNameChangeNotification",
    "NetQueryDisplayInformation",
    "I_NetAccountSync",
    "NetDfsRemoveFtRootForced",
    "NetJoinDomain",
    "NetFileClose",
    "NetShareEnum",
    "NetpMergeFtinfo",
    "I_BrowserDebugCall",
    "NetQueryServiceAccount",
    "NetpwNameCompare",
    "NetpDbgPrint",
    "NetUserSetInfo",
    "NetGroupSetInfo",
    "NetpwPathCompare",
    "DsGetDcNameA",
    "NetDfsSetInfo",
    "NetFileGetInfo",
    "I_NetlogonComputeClientDigest",
    "NetUnjoinDomain",
    "DsGetDcNameWithAccountA",
    "NetAccessGetInfo",
    "RxNetAccessDel",
    "I_NetServerSetServiceBitsEx",
    "NetErrorLogWrite",
    "DsGetDcCloseW",
    "NetLogonGetTimeServiceParentDomain",
    "NetRequestOfflineDomainJoin",
    "I_BrowserQueryStatistics",
    "NetMessageNameEnum",
    "RxNetAccessAdd",
    "NetLocalGroupSetMembers",
    "NetServerSetInfo",
    "NetWkstaTransportAdd",
    "I_NetDfsGetVersion",
    "NetGroupDelUser",
    "NetDfsGetDcAddress",
    "NetGroupGetInfo",
    "NetAccessSetInfo",
    "NetReplImportDirUnlock",
    "DsValidateSubnetNameA",
    "NetLocalGroupEnum",
    "DsGetDcSiteCoverageA",
    "I_NetLogonSamLogoff",
    "NetStatisticsGet",
    "NetValidatePasswordPolicyFree",
    "NetScheduleJobDel",
    "NetUseEnum"
  ],
  "netbios.dll": [
    "Netbios"
  ],
  "netcenter.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "netcfgx.dll": [
    "NetCfgDiagFromCommandArgs",
    "NetClassInstaller",
    "NetPropPageProvider",
    "DllGetClassObject",
    "NetCfgDiagRepairRegistryBindings",
    "OnMachineUILanguageInit",
    "DllCanUnloadNow",
    "OnMachineUILanguageSwitch",
    "LanaCfgFromCommandArgs",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "netcorehc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "netdiagfx.dll": [
    "HelperTraceInitialize",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "HelperTraceEvent",
    "WdiDiagnosticModuleMain",
    "HelperTraceUninitialize",
    "WdiHandleInstance"
  ],
  "netevent.dll": "No exports",
  "netfxperf.dll": [
    "ClosePerformanceData",
    "OpenPerformanceData",
    "CollectPerformanceData"
  ],
  "neth.dll": "No exports",
  "netid.dll": [
    "CreateNetIDPropertyPage",
    "ShowDcNotFoundErrorDialog"
  ],
  "netiohlp.dll": [
    "InitHelperDll"
  ],
  "netjoin.dll": [
    "NetpIsSetupInProgress",
    "NetpFreeLdapLsaDomainInfo",
    "NetpGetNewMachineName",
    "NetCreateProvisioningPackage",
    "NetpDomainJoinLicensingCheck",
    "NetpStopService",
    "NetpGetListOfJoinableOUs",
    "NetSetuppCloseLog",
    "NetpMachineValidToJoin",
    "NetpSeparateUserAndDomain",
    "NetpAnalyzeProvisioningPackage",
    "NetpCreateComputerObjectInDs",
    "NetpGetLsaPrimaryDomain",
    "NetpManageMachineAccountWithSid",
    "NetpDoDomainJoin",
    "NetpLogPrintHelper",
    "NetpContinueProvisioningPackageInstall",
    "NetSetuppOpenLog",
    "NetpCompleteOfflineDomainJoin",
    "NetpValidateName",
    "NetpQueryService",
    "NetpUnJoinDomain",
    "NetpAvoidNetlogonSpnSet",
    "NetpGetMachineAccountName",
    "NetpManageIPCConnect",
    "NetpChangeMachineName",
    "NetpStoreInitialDcRecord",
    "NetProvisionComputerAccount",
    "NetpGetJoinInformation",
    "NetpControlServices",
    "NetRequestOfflineDomainJoin",
    "NetRequestProvisioningPackageInstall",
    "NetpUpgradePreNT5JoinInfo",
    "NetpCheckOfflineLsaPolicyUpdate",
    "NetpCrackNamesStatus2Win32Error",
    "NetpSetComputerAccountPassword"
  ],
  "netman.dll": [
    "HrLanConnectionNameFromGuidOrPath",
    "HrPnpInstanceIdFromGuid",
    "SvchostPushServiceGlobals",
    "ServiceMain",
    "HrQueryLanMediaState",
    "NetManDiagFromCommandArgs",
    "HrGetPnpDeviceStatus",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "netmsg.dll": "No exports",
  "netplwiz.dll": [
    "SHDisconnectNetDrives",
    "ClearAutoLogon",
    "NetAccessWizard",
    "DllCanUnloadNow",
    "UsersRunDllW",
    "DllGetClassObject",
    "NetPlacesWizardDoModal"
  ],
  "netprofm.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "netprofmsvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "netprovisionsp.dll": [
    "NetpPolProviderInitialize",
    "NetpCertProviderInitialize"
  ],
  "netshell.dll": [
    "DllGetClassObject",
    "NcFreeNetconProperties",
    "HrCreateDesktopIcon",
    "DllRegisterServer",
    "HrLaunchConnection",
    "HrLaunchConnectionEx",
    "DllCanUnloadNow",
    "HrGetIconFromMediaType",
    "HrRenameConnection",
    "HrGetIconFromMediaTypeEx",
    "NcIsValidConnectionName",
    "StartNCW",
    "DllUnregisterServer"
  ],
  "nettrace.dll": [
    "InitHelperDll"
  ],
  "netutils.dll": [
    "NetpwNameValidate",
    "NetApiBufferAllocate",
    "NetApiBufferSize",
    "NetpIsDomainNameValid",
    "NetpIsRemoteNameValid",
    "NetApiBufferFree",
    "NetpIsComputerNameValid",
    "NetpIsRemote",
    "NetpIsShareNameValid",
    "NetpwPathCanonicalize",
    "NetApiBufferReallocate",
    "NetRemoteComputerSupports",
    "NetpIsUncComputerNameValid",
    "NetpwListCanonicalize",
    "NetpwNameCompare",
    "NetpwNameCanonicalize",
    "NetapipBufferAllocate",
    "NetpwPathCompare",
    "NetpIsUserNameValid",
    "NetpIsGroupNameValid",
    "NetpwListTraverse",
    "NetpwPathType"
  ],
  "networkexplorer.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "networkitemfactory.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "newdev.dll": [
    "DiShowUpdateDevice",
    "UpdateDriverForPlugAndPlayDevicesW",
    "InstallSelectedDriver",
    "DiInstallDriverA",
    "InstallNewDevice",
    "UpdateDriverForPlugAndPlayDevicesA",
    "DeviceInternetSettingUiW",
    "DiUninstallDevice",
    "GetInternetPolicies",
    "InstallWindowsUpdateDriverEx",
    "DiRollbackDriver",
    "SetInternetPolicies",
    "pDiDoDeviceInstallAsAdmin",
    "DiInstallDriverW",
    "InstallWindowsUpdateDriver",
    "DiInstallDevice",
    "pDiDoNullDriverInstall",
    "QueryWindowsUpdateDriverStatus",
    "pDiRunFinishInstallOperations"
  ],
  "ninput.dll": [
    "GetStateInteractionContext",
    "StopInteractionContext",
    "BufferPointerPacketsInteractionContext",
    "ResetInteractionContext",
    "DefaultInputHandler",
    "DestroyInteractionContext",
    "CreateInteractionContext",
    "SetPivotInteractionContext",
    "AddPointerInteractionContext",
    "RegisterOutputCallbackInteractionContext",
    "GetInteractionConfigurationInteractionContext",
    "SetCrossSlideParametersInteractionContext",
    "SetInertiaParameterInteractionContext",
    "SetPropertyInteractionContext",
    "RemovePointerInteractionContext",
    "ProcessInertiaInteractionContext",
    "GetMouseWheelParameterInteractionContext",
    "ProcessBufferedPacketsInteractionContext",
    "ProcessPointerFramesInteractionContext",
    "GetCrossSlideParameterInteractionContext",
    "GetPropertyInteractionContext",
    "SetInteractionConfigurationInteractionContext",
    "SetMouseWheelParameterInteractionContext",
    "GetInertiaParameterInteractionContext"
  ],
  "nlaapi.dll": [
    "NlaNotEqual",
    "NlaDeleteTypeSet",
    "NlaAddToPluginRequests",
    "NlaRegisterQuery",
    "NlaGetIntranetCapability",
    "NlaQueryNetSignatures",
    "LANIdRetrieveCollection",
    "NlaAnd",
    "NlaCloseQuery",
    "NlaDecomposeNetSignature",
    "NlaComposeNetSignature",
    "LANIdFreeCollection",
    "NSPStartup",
    "NlaOr",
    "NlaRefreshQuery",
    "NlaCreateFilter",
    "NlaEqual",
    "NlaDeletePluginRequests",
    "NlaAddToTypeSet",
    "NlaGetInternetCapability",
    "NlaOpenQuery",
    "NlaQueryNetDataEx",
    "NlaEqualNetSignatures",
    "NlaCreatePluginRequests",
    "NlaCreateTypeSet",
    "NlaDeleteDataSet",
    "NlaQueryNetData",
    "NlaDeleteFilter"
  ],
  "nlahc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "nlasvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "nlhtml.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "nlmgp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "nlmproxy.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "nlmsprep.dll": [
    "NetworkListManager_Generalize"
  ],
  "nlsbres.dll": "No exports",
  "normaliz.dll": [
    "IdnToUnicode",
    "IdnToNameprepUnicode",
    "IdnToAscii",
    "IsNormalizedString",
    "NormalizeString"
  ],
  "npmproxy.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "nrpsrv.dll": [
    "NrpStopRpcServer",
    "NrpStartRpcServer"
  ],
  "nshhttp.dll": [
    "InitHelperDll"
  ],
  "nshipsec.dll": [
    "InitHelperDll"
  ],
  "nshwfp.dll": [
    "IdpConfigFreePolicy",
    "IdpConfigAddPolicy",
    "WfpCaptureExportedW",
    "InitHelperDll",
    "IdpConfigRemovePolicy",
    "IdpConfigAllocateAndGetPolicy",
    "IdpConfigInitDefaultPolicy"
  ],
  "nsi.dll": [
    "NsiGetAllParameters",
    "NsiGetParameterEx",
    "NsiSetObjectSecurity",
    "NsiEnumerateObjectsAllPersistentParametersWithMask",
    "NsiGetParameter",
    "NsiSetAllParameters",
    "NsiFreeTable",
    "NsiFreePersistentDataWithMaskTable",
    "NsiGetAllParametersEx",
    "NsiRequestChangeNotificationEx",
    "NsiSetAllParametersEx",
    "NsiRegisterChangeNotification",
    "NsiRequestChangeNotification",
    "NsiAllocateAndGetTable",
    "NsiGetAllPersistentParametersWithMask",
    "NsiAllocateAndGetPersistentDataWithMaskTable",
    "NsiDeregisterChangeNotificationEx",
    "NsiRegisterChangeNotificationEx",
    "NsiSetAllPersistentParametersWithMask",
    "NsiSetParameter",
    "NsiGetObjectSecurity",
    "NsiCancelChangeNotification",
    "NsiEnumerateObjectsAllParametersEx",
    "NsiSetParameterEx",
    "NsiDeregisterChangeNotification",
    "NsiEnumerateObjectsAllParameters"
  ],
  "nsisvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "ntasn1.dll": "No exports",
  "ntdll.dll": [
    "NtCloseObjectAuditAlarm",
    "TpReleasePool",
    "NtOpenJobObject",
    "NtQuerySymbolicLinkObject",
    "RtlIpv6StringToAddressExA",
    "RtlCheckPortableOperatingSystem",
    "ZwEnumerateBootEntries",
    "NtSignalAndWaitForSingleObject",
    "NtOpenProcessTokenEx",
    "WinSqmSetEscalationInfo",
    "NtSaveKeyEx",
    "NtCreateProfile",
    "RtlInitializeRXact",
    "RtlCompareUnicodeStrings",
    "NtResetWriteWatch",
    "ZwQueryInformationResourceManager",
    "RtlTraceDatabaseValidate",
    "ZwSetInformationTransaction",
    "RtlCreateBootStatusDataFile",
    "RtlIoDecodeMemIoResource",
    "TpCaptureCaller",
    "NtAlpcOpenSenderProcess",
    "RtlFindClearBits",
    "RtlLengthSid",
    "RtlCancelTimer",
    "MD4Update",
    "RtlLeaveCriticalSection",
    "ZwWaitForDebugEvent",
    "RtlIntegerToUnicodeString",
    "ZwResumeThread",
    "ZwOpenThread",
    "RtlQueryAtomInAtomTable",
    "NtCreateProcess",
    "_wcsset_s",
    "TpSetPoolThreadBasePriority",
    "ZwAccessCheckAndAuditAlarm",
    "TpReleaseWork",
    "NtQueryDirectoryFile",
    "LdrVerifyImageMatchesChecksumEx",
    "RtlInitializeExceptionChain",
    "_strlwr_s",
    "ZwClearEvent",
    "NtAlpcQueryInformationMessage",
    "isdigit",
    "NtPrepareEnlistment",
    "ZwQuerySystemEnvironmentValue",
    "RtlInitString",
    "ZwAlpcRevokeSecurityContext",
    "NtQueryIoCompletion",
    "ZwAlpcConnectPortEx",
    "ZwOpenSymbolicLinkObject",
    "ZwAlpcCreateResourceReserve",
    "RtlDeleteSecurityObject",
    "EtwGetTraceLoggerHandle",
    "NtQueryBootOptions",
    "EvtIntReportAuthzEventAndSourceAsync",
    "RtlCheckTokenCapability",
    "ZwQueryIoCompletion",
    "NtTraceEvent",
    "RtlAddAttributeActionToRXact",
    "TpTimerOutstandingCallbackCount",
    "RtlGetThreadLangIdByIndex",
    "RtlQueryEnvironmentVariable",
    "ZwCreateProcessEx",
    "LdrGetProcedureAddress",
    "RtlInsertElementGenericTable",
    "RtlAllocateWnfSerializationGroup",
    "ZwResumeProcess",
    "NtCreateSemaphore",
    "NtWaitForKeyedEvent",
    "RtlResetMemoryBlockLookaside",
    "ZwQuerySystemInformationEx",
    "KiFastSystemCall",
    "ZwAllocateUuids",
    "ZwCreateEvent",
    "RtlAllocateHeap",
    "RtlAddAccessDeniedAce",
    "ZwCreateProfileEx",
    "TpCancelAsyncIoOperation",
    "NtExtendSection",
    "pow",
    "ZwCreateFile",
    "LdrQueryOptionalDelayLoadedAPI",
    "RtlRevertMemoryStream",
    "ZwWorkerFactoryWorkerReady",
    "NtAccessCheckByTypeResultListAndAuditAlarm",
    "labs",
    "RtlReleaseRelativeName",
    "RtlSetBits",
    "RtlRetrieveNtUserPfn",
    "ZwSetInformationObject",
    "RtlInitializeResource",
    "RtlDosPathNameToNtPathName_U",
    "ZwSetHighEventPair",
    "_snwscanf_s",
    "RtlIsCriticalSectionLockedByThread",
    "RtlCmDecodeMemIoResource",
    "ZwNotifyChangeSession",
    "CsrAllocateMessagePointer",
    "NtQueryBootEntryOrder",
    "ZwAddDriverEntry",
    "AlpcGetCompletionListMessageAttributes",
    "NtCreateTransaction",
    "ZwSetEventBoostPriority",
    "LdrInitShimEngineDynamic",
    "ZwCreateDebugObject",
    "iswalpha",
    "ZwOpenEvent",
    "toupper",
    "ZwCreateSection",
    "RtlSetTimeZoneInformation",
    "RtlLargeIntegerAdd",
    "RtlReplaceSidInSd",
    "RtlAddIntegrityLabelToBoundaryDescriptor",
    "ZwDebugActiveProcess",
    "RtlUpcaseUnicodeToOemN",
    "TpReleaseAlpcCompletion",
    "AlpcRundownCompletionList",
    "NtAlpcCancelMessage",
    "ZwWaitHighEventPair",
    "RtlSetPortableOperatingSystem",
    "ZwSetUuidSeed",
    "RtlLookupEntryHashTable",
    "RtlQueryPackageIdentity",
    "NtFreezeTransactions",
    "RtlAddAccessAllowedAce",
    "NtRestoreKey",
    "TpCallbackReleaseSemaphoreOnCompletion",
    "ZwDisableLastKnownGood",
    "_i64tow",
    "RtlQueryUnbiasedInterruptTime",
    "CsrClientConnectToServer",
    "RtlGetCurrentProcessorNumber",
    "RtlLcidToLocaleName",
    "NtAddAtom",
    "RtlNumberOfClearBits",
    "NtCreateDebugObject",
    "ZwQueryWnfStateData",
    "ZwEnumerateValueKey",
    "RtlpConvertLCIDsToCultureNames",
    "ZwQueryTimerResolution",
    "strcat",
    "RtlAcquireResourceExclusive",
    "wcscpy_s",
    "ZwAlpcDeleteResourceReserve",
    "ZwCallbackReturn",
    "RtlCreateProcessReflection",
    "RtlValidateHeap",
    "_strcmpi",
    "_splitpath_s",
    "RtlWaitOnAddress",
    "LdrAppxHandleIntegrityFailure",
    "NtSetSystemTime",
    "_vscwprintf",
    "RtlGetUnloadEventTrace",
    "RtlUpcaseUnicodeStringToCountedOemString",
    "_snscanf_s",
    "ZwAdjustTokenClaimsAndDeviceGroups",
    "DbgQueryDebugFilterState",
    "ZwPlugPlayControl",
    "RtlInitializeGenericTable",
    "strrchr",
    "_snprintf",
    "RtlEqualLuid",
    "wcstoul",
    "NtIsUILanguageComitted",
    "LdrDisableThreadCalloutsForDll",
    "NtCurrentTeb",
    "RtlInterlockedPopEntrySList",
    "RtlMultiByteToUnicodeN",
    "RtlUnsubscribeWnfNotificationWithCompletionCallback",
    "RtlGetSystemPreferredUILanguages",
    "ZwCommitTransaction",
    "_ultow",
    "LdrSystemDllInitBlock",
    "ZwQueryFullAttributesFile",
    "RtlpIsQualifiedLanguage",
    "TpDbgDumpHeapUsage",
    "RtlSidIsHigherLevel",
    "RtlCompareMemory",
    "RtlIpv4AddressToStringExA",
    "RtlUpcaseUnicodeToMultiByteN",
    "RtlSetSecurityDescriptorRMControl",
    "RtlpEnsureBufferSize",
    "RtlAllocateMemoryZone",
    "NtReadVirtualMemory",
    "strncat",
    "NtImpersonateClientOfPort",
    "ZwCreateProfile",
    "RtlCopySecurityDescriptor",
    "RtlProtectHeap",
    "ZwRenameKey",
    "ExpInterlockedPopEntrySListEnd",
    "RtlSetInformationAcl",
    "RtlUTF8ToUnicodeN",
    "RtlAppendUnicodeToString",
    "RtlKnownExceptionFilter",
    "NtUnloadDriver",
    "RtlFreeAnsiString",
    "RtlNewInstanceSecurityObject",
    "RtlQueryInformationActiveActivationContext",
    "RtlCopyUnicodeString",
    "RtlComputeImportTableHash",
    "ZwQueryBootOptions",
    "CsrGetProcessId",
    "RtlSetCriticalSectionSpinCount",
    "ZwFilterToken",
    "RtlUnicodeStringToInteger",
    "_i64toa",
    "DbgBreakPoint",
    "ZwRecoverTransactionManager",
    "_CIsin",
    "ZwWriteFile",
    "RtlSetSaclSecurityDescriptor",
    "ZwQuerySystemEnvironmentValueEx",
    "ZwQueryMutant",
    "ZwQueryInformationFile",
    "ZwFreezeTransactions",
    "RtlpNtSetValueKey",
    "wcsncpy",
    "NtSetSystemPowerState",
    "WinSqmCheckEscalationAddToStreamEx",
    "_alloca_probe_16",
    "RtlpGetNameFromLangInfoNode",
    "ZwQueryDebugFilterState",
    "NtCreateSymbolicLinkObject",
    "RtlSetLastWin32ErrorAndNtStatusFromNtStatus",
    "RtlStartRXact",
    "RtlAppxIsFileOwnedByTrustedInstaller",
    "WinSqmCommonDatapointDelete",
    "ZwAlpcCreatePortSection",
    "NtQuerySystemInformation",
    "TpWaitForTimer",
    "RtlQueryPerformanceCounter",
    "NtQueueApcThreadEx",
    "ZwCommitComplete",
    "NtAlpcCreatePort",
    "ZwAlpcCreatePort",
    "ZwReplyPort",
    "NtInitializeRegistry",
    "NtPlugPlayControl",
    "strcpy_s",
    "RtlUnlockModuleSection",
    "RtlSetDynamicTimeZoneInformation",
    "RtlIpv4AddressToStringW",
    "NtStartProfile",
    "iswgraph",
    "NtSetInformationFile",
    "RtlAssert",
    "RtlEthernetStringToAddressA",
    "RtlInitCodePageTable",
    "NtQuerySystemEnvironmentValue",
    "ZwSetTimer",
    "_ltow",
    "RtlTryAcquireSRWLockShared",
    "NtStopProfile",
    "NtAdjustTokenClaimsAndDeviceGroups",
    "_aulldvrm",
    "_splitpath",
    "ZwWaitForKeyedEvent",
    "NtQueryInformationJobObject",
    "PfxFindPrefix",
    "RtlRemoveVectoredContinueHandler",
    "LdrSetDllDirectory",
    "NtSetLdtEntries",
    "wcsspn",
    "NtFilterTokenEx",
    "RtlCopyMemoryStreamTo",
    "vswprintf_s",
    "NtEnumerateSystemEnvironmentValuesEx",
    "NtQueryWnfStateData",
    "ZwSaveKeyEx",
    "AlpcGetMessageFromCompletionList",
    "NtQueryDriverEntryOrder",
    "NtCommitComplete",
    "RtlInterlockedCompareExchange64",
    "ZwCreateProcess",
    "RtlLookupAtomInAtomTable",
    "RtlAbsoluteToSelfRelativeSD",
    "ZwReplyWaitReceivePort",
    "RtlGetExePath",
    "RtlExtendedLargeIntegerDivide",
    "LdrStandardizeSystemPath",
    "NtAlpcAcceptConnectPort",
    "NtOpenKey",
    "NtdllDialogWndProc_A",
    "RtlIsCurrentThreadAttachExempt",
    "tan",
    "wcsrchr",
    "memcpy",
    "RtlReleaseMemoryStream",
    "ZwQueryInstallUILanguage",
    "RtlCreateHashTable",
    "NtDelayExecution",
    "TpSimpleTryPost",
    "NtSetInformationVirtualMemory",
    "RtlGetSearchPath",
    "NlsAnsiCodePage",
    "ZwAllocateReserveObject",
    "RtlConnectToSm",
    "RtlWeaklyEnumerateEntryHashTable",
    "ZwSetContextThread",
    "NtReplyPort",
    "NtUmsThreadYield",
    "TpAllocAlpcCompletion",
    "CsrCaptureTimeout",
    "RtlReportSilentProcessExit",
    "NtAlpcCreateResourceReserve",
    "RtlEnumerateGenericTable",
    "RtlFreeSid",
    "ZwOpenTransactionManager",
    "EtwCreateTraceInstanceId",
    "isprint",
    "RtlpFreezeTimeBias",
    "ZwSetInformationJobObject",
    "RtlDeCommitDebugInfo",
    "WinSqmSetString",
    "ZwFlushBuffersFileEx",
    "RtlAcquireSRWLockExclusive",
    "RtlFreeUnicodeString",
    "RtlInitializeConditionVariable",
    "ZwPulseEvent",
    "NtCancelSynchronousIoFile",
    "NtSystemDebugControl",
    "NtDeviceIoControlFile",
    "NtRollbackEnlistment",
    "LdrGetFailureData",
    "DbgPrintReturnControlC",
    "RtlIsValidHandle",
    "ZwThawRegistry",
    "RtlRbInsertNodeEx",
    "RtlQueryTimeZoneInformation",
    "TpReleaseWait",
    "NtSubscribeWnfStateChange",
    "NtAccessCheck",
    "NtUnmapViewOfSection",
    "RtlWakeAddressSingleNoFence",
    "RtlExtendMemoryZone",
    "RtlExitUserThread",
    "RtlLockBootStatusData",
    "RtlCompactHeap",
    "NtClearEvent",
    "ZwDelayExecution",
    "RtlSetBit",
    "RtlMultiAppendUnicodeStringBuffer",
    "NtLockVirtualMemory",
    "RtlDeleteTimer",
    "ZwRestoreKey",
    "NtCreateLowBoxToken",
    "NtReleaseWorkerFactoryWorker",
    "RtlConvertExclusiveToShared",
    "_strset_s",
    "RtlConvertToAutoInheritSecurityObject",
    "iswascii",
    "TpDbgSetLogRoutine",
    "ZwFreeUserPhysicalPages",
    "RtlPrefixString",
    "NlsMbCodePageTag",
    "ZwCreateKeyTransacted",
    "ZwCancelSynchronousIoFile",
    "RtlAllocateAndInitializeSid",
    "ZwReadVirtualMemory",
    "NtQueryQuotaInformationFile",
    "ZwQueryTimer",
    "RtlEnumerateGenericTableWithoutSplaying",
    "_ftol2_sse",
    "RtlpVerifyAndCommitUILanguageSettings",
    "LdrSetDllManifestProber",
    "ZwOpenJobObject",
    "RtlFindActivationContextSectionGuid",
    "NtOpenObjectAuditAlarm",
    "ZwEnumerateSystemEnvironmentValuesEx",
    "strncat_s",
    "NtSetIoCompletion",
    "ZwGetNextThread",
    "WinSqmCheckEscalationSetDWORD64",
    "NtCreateJobObject",
    "RtlQueryWnfStateData",
    "NtGetWriteWatch",
    "RtlSetCurrentTransaction",
    "LdrResGetRCConfig",
    "RtlOwnerAcesPresent",
    "NtCancelTimer",
    "ZwQueryBootEntryOrder",
    "NtRenameTransactionManager",
    "TpCallbackMayRunLong",
    "NtQueryInformationWorkerFactory",
    "RtlpNtQueryValueKey",
    "RtlReleaseSRWLockShared",
    "NtQuerySystemInformationEx",
    "TpAllocAlpcCompletionEx",
    "WinSqmEventEnabled",
    "ZwRecoverResourceManager",
    "MD4Init",
    "vsprintf",
    "ZwTerminateJobObject",
    "NtInitiatePowerAction",
    "RtlFillMemoryUlonglong",
    "ZwCreateEnlistment",
    "ZwPrePrepareComplete",
    "ZwSetInformationVirtualMemory",
    "qsort",
    "RtlSetAllBits",
    "ExpInterlockedPopEntrySListFault",
    "RtlpConvertAbsoluteToRelativeSecurityAttribute",
    "NtDeleteKey",
    "_snwprintf",
    "ZwLockFile",
    "LdrResFindResource",
    "NtSetSystemEnvironmentValueEx",
    "NtAlpcSendWaitReceivePort",
    "NtSetThreadExecutionState",
    "NtFreeUserPhysicalPages",
    "ZwUnloadKeyEx",
    "ZwOpenKeyedEvent",
    "RtlDosPathNameToNtPathName_U_WithStatus",
    "iscntrl",
    "NtUnsubscribeWnfStateChange",
    "RtlWalkFrameChain",
    "ZwFlushProcessWriteBuffers",
    "NtCreateKeyTransacted",
    "RtlCreateQueryDebugBuffer",
    "NtQueryKey",
    "isxdigit",
    "TpSetDefaultPoolStackInformation",
    "RtlTraceDatabaseFind",
    "NtReleaseSemaphore",
    "EvtIntReportEventAndSourceAsync",
    "NtOpenSymbolicLinkObject",
    "NtConnectPort",
    "RtlInt64ToUnicodeString",
    "ZwOpenEventPair",
    "wcscat",
    "RtlEqualPrefixSid",
    "_alloca_probe_8",
    "RtlCrc64",
    "RtlRealSuccessor",
    "ZwLockRegistryKey",
    "ZwNotifyChangeKey",
    "RtlHeapTrkInitialize",
    "RtlFillMemory",
    "ZwCancelTimer",
    "ZwSetLdtEntries",
    "RtlSetSearchPathMode",
    "ZwRollbackTransaction",
    "RtlGetAce",
    "RtlInitializeCriticalSectionAndSpinCount",
    "LdrFindResource_U",
    "LdrHotPatchRoutine",
    "ZwCreateTimer",
    "NtNotifyChangeDirectoryFile",
    "LdrUnlockLoaderLock",
    "_wcstoi64",
    "towlower",
    "NtLoadKey2",
    "RtlSendMsgToSm",
    "EtwEventWriteStartScenario",
    "NtDeleteAtom",
    "RtlImageRvaToSection",
    "RtlDeleteAce",
    "ZwMakeTemporaryObject",
    "ZwLoadKey2",
    "RtlNumberGenericTableElementsAvl",
    "ShipAssert",
    "NtQueryDirectoryObject",
    "RtlMapGenericMask",
    "RtlUnlockMemoryBlockLookaside",
    "ZwAccessCheckByTypeResultListAndAuditAlarm",
    "RtlIsTextUnicode",
    "ZwSetHighWaitLowEventPair",
    "LdrEnumResources",
    "RtlEthernetAddressToStringA",
    "ZwWaitLowEventPair",
    "RtlTimeFieldsToTime",
    "TpSetPoolStackInformation",
    "TpReleaseJobNotification",
    "wcscmp",
    "RtlSetOwnerSecurityDescriptor",
    "ZwSetInformationFile",
    "isalnum",
    "NtAccessCheckByType",
    "RtlInterlockedSetBitRun",
    "WinSqmGetEscalationRuleStatus",
    "NtDeleteBootEntry",
    "RtlFindNextForwardRunClear",
    "RtlWerpReportException",
    "AlpcGetCompletionListLastMessageInformation",
    "RtlUlongByteSwap",
    "RtlpNotOwnerCriticalSection",
    "ZwRenameTransactionManager",
    "CsrClientCallServer",
    "NtRequestWaitReplyPort",
    "NtMapCMFModule",
    "NtAlpcConnectPort",
    "RtlGetUnloadEventTraceEx",
    "log",
    "RtlIsCapabilitySid",
    "NtSetIoCompletionEx",
    "LdrQueryImageFileExecutionOptions",
    "RtlReAllocateHeap",
    "RtlpConvertRelativeToAbsoluteSecurityAttribute",
    "NtQueryAttributesFile",
    "RtlStringFromGUID",
    "ZwCreateWorkerFactory",
    "ZwQueryValueKey",
    "NtLoadDriver",
    "RtlContractHashTable",
    "RtlCustomCPToUnicodeN",
    "RtlSetMemoryStreamSize",
    "RtlGetUserPreferredUILanguages",
    "RtlLengthSecurityDescriptor",
    "RtlRunOnceInitialize",
    "RtlQueryThreadProfiling",
    "RtlNewSecurityObjectEx",
    "RtlDecodeSystemPointer",
    "ZwQuerySystemInformation",
    "RtlGetSystemTimePrecise",
    "RtlDeleteResource",
    "RtlFindSetBits",
    "RtlLockModuleSection",
    "RtlAddSIDToBoundaryDescriptor",
    "RtlpNtMakeTemporaryKey",
    "NtDuplicateToken",
    "NtUnloadKey2",
    "NtSecureConnectPort",
    "RtlAcquireReleaseSRWLockExclusive",
    "RtlDosApplyFileIsolationRedirection_Ustr",
    "RtlAddAccessAllowedObjectAce",
    "RtlValidAcl",
    "ZwAlpcAcceptConnectPort",
    "ZwShutdownWorkerFactory",
    "RtlTimeToTimeFields",
    "ZwAccessCheck",
    "NtIsProcessInJob",
    "LdrGetDllHandle",
    "RtlCreateAtomTable",
    "LdrQueryImageFileExecutionOptionsEx",
    "NtQueryIntervalProfile",
    "atol",
    "NtOpenThreadTokenEx",
    "RtlpCheckDynamicTimeZoneInformation",
    "NtCreateWorkerFactory",
    "atan",
    "ZwSetInformationKey",
    "NtOpenThread",
    "RtlLocateLegacyContext",
    "RtlUlonglongByteSwap",
    "NtFlushVirtualMemory",
    "DbgUserBreakPoint",
    "TpAllocPool",
    "RtlUpcaseUnicodeString",
    "ZwReplaceKey",
    "NtTerminateJobObject",
    "DbgPrompt",
    "RtlValidRelativeSecurityDescriptor",
    "EtwEventSetInformation",
    "RtlGetNtProductType",
    "NtOpenTransaction",
    "NtSaveMergedKeys",
    "ZwEnumerateTransactionObject",
    "vsprintf_s",
    "ZwDeleteDriverEntry",
    "ZwQueryInformationPort",
    "memcpy_s",
    "memchr",
    "strnlen",
    "RtlReadThreadProfilingData",
    "RtlInitializeHandleTable",
    "LdrAccessResource",
    "NtWaitLowEventPair",
    "RtlGetParentLocaleName",
    "EtwDeliverDataBlock",
    "RtlSetSecurityObjectEx",
    "ZwNotifyChangeDirectoryFile",
    "TpSetTimerEx",
    "RtlAllocateActivationContextStack",
    "TpReleaseCleanupGroupMembers",
    "LdrAddRefDll",
    "RtlCreateActivationContext",
    "RtlFlushSecureMemoryCache",
    "ZwQueryInformationTransactionManager",
    "RtlFreeActivationContextStack",
    "wcsstr",
    "RtlWnfDllUnloadCallback",
    "NtQuerySystemEnvironmentValueEx",
    "RtlImageRvaToVa",
    "ShipAssertGetBufferInfo",
    "RtlInitializeSid",
    "RtlGetAppContainerNamedObjectPath",
    "RtlEqualWnfChangeStamps",
    "ZwStartProfile",
    "RtlActivateActivationContextEx",
    "RtlSelfRelativeToAbsoluteSD2",
    "ZwCreateWaitablePort",
    "wcscat_s",
    "RtlIsNameInExpression",
    "ZwSetVolumeInformationFile",
    "NtQuerySecurityAttributesToken",
    "RtlEnableThreadProfiling",
    "ZwUnlockFile",
    "AlpcFreeCompletionListMessage",
    "RtlRemoteCall",
    "_strnicmp",
    "ZwSaveMergedKeys",
    "vDbgPrintExWithPrefix",
    "RtlInitializeGenericTableAvl",
    "RtlIsActivationContextActive",
    "LdrLoadDll",
    "RtlIoEncodeMemIoResource",
    "EtwEventEnabled",
    "NtAlpcCreateSecurityContext",
    "ZwOpenThreadTokenEx",
    "NtdllDefWindowProc_A",
    "RtlSetCurrentDirectory_U",
    "RtlDosSearchPath_Ustr",
    "RtlIsThreadWithinLoaderCallout",
    "ZwQueryOpenSubKeysEx",
    "RtlIdentifierAuthoritySid",
    "TpAllocJobNotification",
    "LdrShutdownThread",
    "RtlAppendUnicodeStringToString",
    "RtlLengthRequiredSid",
    "RtlUpdateClonedSRWLock",
    "ZwLoadKey",
    "RtlQueryCriticalSectionOwner",
    "NtFreezeRegistry",
    "ZwAddAtom",
    "ZwOpenTimer",
    "RtlSetEnvironmentStrings",
    "ZwAlpcSendWaitReceivePort",
    "swprintf_s",
    "ZwUnlockVirtualMemory",
    "NtDeleteFile",
    "RtlNtStatusToDosError",
    "LdrQueryModuleServiceTags",
    "RtlSecondsSince1980ToTime",
    "wcsncat_s",
    "RtlAddActionToRXact",
    "ZwFilterTokenEx",
    "ZwSetDefaultUILanguage",
    "RtlGetLongestNtPathLength",
    "RtlCanonicalizeDomainName",
    "RtlVerifyVersionInfo",
    "NtVdmControl",
    "LdrGetDllFullName",
    "RtlCreateEnvironmentEx",
    "RtlIpv6AddressToStringExA",
    "RtlpConvertCultureNamesToLCIDs",
    "RtlExpandEnvironmentStrings",
    "NtCompareTokens",
    "RtlDestroyMemoryBlockLookaside",
    "NtRenameKey",
    "TpSetPoolMaxThreads",
    "ZwQueryInformationWorkerFactory",
    "RtlAddRefMemoryStream",
    "RtlMultiByteToUnicodeSize",
    "NtReplacePartitionUnit",
    "RtlFreeHandle",
    "CsrAllocateCaptureBuffer",
    "ZwSetInformationDebugObject",
    "NtGetMUIRegistryInfo",
    "LdrFindResourceDirectory_U",
    "RtlRunEncodeUnicodeString",
    "TpAllocIoCompletion",
    "NtSetSystemInformation",
    "ZwPropagationFailed",
    "NtQuerySystemTime",
    "RtlPushFrame",
    "RtlSetThreadErrorMode",
    "NtOpenSession",
    "ZwOpenKeyTransacted",
    "ZwCreateIRTimer",
    "EtwRegisterSecurityProvider",
    "ZwQueryWnfStateNameInformation",
    "RtlExtractBitMap",
    "NtCreateEventPair",
    "RtlQueryInterfaceMemoryStream",
    "RtlEthernetAddressToStringW",
    "RtlInitializeNtUserPfn",
    "ZwFlushVirtualMemory",
    "NtPulseEvent",
    "RtlFindAceByType",
    "NtEnumerateBootEntries",
    "ZwPrivilegeCheck",
    "TpWaitForIoCompletion",
    "AlpcGetOutstandingCompletionListMessageCount",
    "NtRecoverTransactionManager",
    "NtAddDriverEntry",
    "RtlGetCompressionWorkSpaceSize",
    "_CIlog",
    "TpDisablePoolCallbackChecks",
    "NtGetCurrentProcessorNumber",
    "ZwCreateKeyedEvent",
    "RtlUpperString",
    "RtlRemovePrivileges",
    "TpSetPoolMinThreads",
    "vDbgPrintEx",
    "RtlExitUserProcess",
    "RtlCopyExtendedContext",
    "RtlCreateServiceSid",
    "strspn",
    "NtQueryTimerResolution",
    "RtlQueryRegistryValues",
    "EtwpCreateEtwThread",
    "RtlFillMemoryUlong",
    "RtlRandom",
    "_vsnwprintf_s",
    "LdrpResGetResourceDirectory",
    "TpSetWaitEx",
    "WinSqmSetIfMinDWORD",
    "ZwEnableLastKnownGood",
    "LdrFindEntryForAddress",
    "memset",
    "NtAllocateVirtualMemory",
    "wcsncpy_s",
    "NtWriteVirtualMemory",
    "RtlIdnToNameprepUnicode",
    "EtwEventWriteTransfer",
    "sqrt",
    "_strlwr",
    "strtok_s",
    "RtlGetLastWin32Error",
    "RtlDelete",
    "_allshr",
    "ZwTestAlert",
    "RtlSidHashLookup",
    "RtlLookupElementGenericTableFull",
    "ZwDeleteWnfStateData",
    "wcscpy",
    "RtlpMuiRegLoadRegistryInfo",
    "RtlConvertLongToLargeInteger",
    "RtlCompressBuffer",
    "KiFastSystemCallRet",
    "RtlAddScopedPolicyIDAce",
    "ZwOpenProcessTokenEx",
    "iswprint",
    "RtlAreAllAccessesGranted",
    "RtlSetProcessPreferredUILanguages",
    "tolower",
    "RtlAreAnyAccessesGranted",
    "RtlTraceDatabaseDestroy",
    "RtlFindLongestRunClear",
    "NtSetInformationDebugObject",
    "WinSqmAddToStream",
    "ZwCreateUserProcess",
    "PfxRemovePrefix",
    "NtFlushBuffersFileEx",
    "RtlCreateAndSetSD",
    "_i64toa_s",
    "NtNotifyChangeMultipleKeys",
    "RtlGetThreadErrorMode",
    "RtlpNtOpenKey",
    "EtwTraceMessage",
    "NtQueryVolumeInformationFile",
    "RtlUpcaseUnicodeStringToOemString",
    "RtlGetCurrentDirectory_U",
    "wcstok_s",
    "RtlFreeHeap",
    "NtFilterToken",
    "RtlQueryWnfMetaNotification",
    "ZwDeleteWnfStateName",
    "RtlLengthSidAsUnicodeString",
    "RtlReleaseResource",
    "NtCreateIoCompletion",
    "DbgUiIssueRemoteBreakin",
    "ZwPrivilegedServiceAuditAlarm",
    "RtlOemStringToUnicodeString",
    "RtlFindMostSignificantBit",
    "RtlQueryInformationActivationContext",
    "ZwCancelIoFile",
    "ZwSuspendProcess",
    "RtlCreateUserProcess",
    "ZwQueryInformationJobObject",
    "RtlTestAndPublishWnfStateData",
    "NtSetDefaultLocale",
    "ZwSetEvent",
    "ZwQueryInformationTransaction",
    "_ltoa",
    "ZwAlpcCancelMessage",
    "RtlResetNtUserPfn",
    "RtlDeleteAtomFromAtomTable",
    "RtlFlsAlloc",
    "NtCreateWaitablePort",
    "NtCreateKey",
    "NtYieldExecution",
    "RtlEqualUnicodeString",
    "RtlRegisterThreadWithCsrss",
    "ZwSetDefaultHardErrorPort",
    "ZwOpenMutant",
    "ZwLoadKeyEx",
    "ZwOpenPrivateNamespace",
    "ZwSetTimerResolution",
    "RtlQueryModuleInformation",
    "RtlDeleteBarrier",
    "NtDebugActiveProcess",
    "RtlAddAtomToAtomTable",
    "RtlAddAuditAccessAceEx",
    "RtlSetCurrentEnvironment",
    "ZwOpenSemaphore",
    "ZwAllocateLocallyUniqueId",
    "RtlAddAccessAllowedAceEx",
    "ZwSetInformationToken",
    "RtlWow64CallFunction64",
    "RtlSetIoCompletionCallback",
    "ZwWaitForMultipleObjects32",
    "ZwAlpcImpersonateClientOfPort",
    "ZwCreateKey",
    "ZwGetDevicePowerState",
    "ZwOpenEnlistment",
    "TpAllocTimer",
    "wcschr",
    "ZwListenPort",
    "_ui64toa_s",
    "RtlpSetUserPreferredUILanguages",
    "RtlGetNextEntryHashTable",
    "RtlNumberOfSetBitsUlongPtr",
    "ZwSuspendThread",
    "NtWorkerFactoryWorkerReady",
    "RtlFreeUserStack",
    "_ultoa_s",
    "RtlpCreateProcessRegistryInfo",
    "RtlGetFullPathName_U",
    "NtCreateTransactionManager",
    "NtAlpcDeletePortSection",
    "RtlInsertEntryHashTable",
    "ZwAssignProcessToJobObject",
    "RtlDeactivateActivationContextUnsafeFast",
    "ZwDeleteKey",
    "RtlWakeAllConditionVariable",
    "RtlAddAuditAccessObjectAce",
    "__toascii",
    "RtlxAnsiStringToUnicodeSize",
    "_vswprintf",
    "RtlGenerate8dot3Name",
    "RtlPublishWnfStateData",
    "wcsncmp",
    "ZwCreateIoCompletion",
    "ZwCreateWnfStateName",
    "RtlCreateSystemVolumeInformationFolder",
    "ZwSetSystemEnvironmentValueEx",
    "RtlTraceDatabaseAdd",
    "LdrpResGetMappingSize",
    "NtMapViewOfSection",
    "LdrGetFileNameFromLoadAsDataTable",
    "_CIsqrt",
    "RtlCreateProcessParametersEx",
    "RtlCutoverTimeToSystemTime",
    "WinSqmEndSession",
    "floor",
    "LdrUnloadDll",
    "ZwCreateTransactionManager",
    "RtlDeleteHashTable",
    "RtlGetProcessHeaps",
    "NtFlushBuffersFile",
    "ZwWriteRequestData",
    "ZwCreateNamedPipeFile",
    "RtlDestroyAtomTable",
    "NtDeleteValueKey",
    "ZwFlushWriteBuffer",
    "RtlAddVectoredExceptionHandler",
    "RtlDeleteElementGenericTableAvlEx",
    "RtlUnsubscribeWnfStateChangeNotification",
    "ZwAccessCheckByType",
    "MD4Final",
    "ZwAlpcDeleteSecurityContext",
    "wcspbrk",
    "NtCreateSection",
    "NtOpenKeyTransacted",
    "NtShutdownSystem",
    "ZwAlertThread",
    "NtOpenSection",
    "RtlInitializeAtomPackage",
    "RtlAdjustPrivilege",
    "NtCreateThreadEx",
    "TpSetDefaultPoolMaxThreads",
    "memcmp",
    "ZwQueryMultipleValueKey",
    "RtlSubtreePredecessor",
    "ZwCreateJobSet",
    "ZwConnectPort",
    "LdrUnloadAlternateResourceModule",
    "NtCreateJobSet",
    "RtlGetActiveActivationContext",
    "NtEnableLastKnownGood",
    "NtSetDefaultHardErrorPort",
    "RtlpMuiFreeLangRegistryInfo",
    "ZwInitializeNlsFiles",
    "LdrOpenImageFileOptionsKey",
    "RtlFindClearBitsAndSet",
    "RtlUpdateClonedCriticalSection",
    "sin",
    "NtAllocateReserveObject",
    "RtlGetFrame",
    "ZwOpenIoCompletion",
    "RtlIpv4StringToAddressW",
    "ZwOpenDirectoryObject",
    "NtCompleteConnectPort",
    "NtMakePermanentObject",
    "NtAlpcDisconnectPort",
    "RtlCopySidAndAttributesArray",
    "NtSetEaFile",
    "NtTraceControl",
    "LdrGetProcedureAddressForCaller",
    "RtlUnicodeToOemN",
    "ZwSystemDebugControl",
    "RtlWow64EnableFsRedirection",
    "ZwDeleteObjectAuditAlarm",
    "ZwReadOnlyEnlistment",
    "NtOpenDirectoryObject",
    "NtSinglePhaseReject",
    "_strupr",
    "strcmp",
    "RtlIpv4StringToAddressExW",
    "ZwAlpcDeletePortSection",
    "NtGetNextProcess",
    "ZwResetWriteWatch",
    "NtSetSecurityObject",
    "RtlCloneUserProcess",
    "RtlWakeConditionVariable",
    "RtlIpv4StringToAddressExA",
    "EtwEventProviderEnabled",
    "RtlInterlockedFlushSList",
    "RtlGetExtendedFeaturesMask",
    "ZwSerializeBoot",
    "NtRemoveIoCompletion",
    "RtlDeleteElementGenericTableAvl",
    "NtAddAtomEx",
    "NtQuerySection",
    "ZwRegisterProtocolAddressInformation",
    "NtWriteFileGather",
    "KiUserApcDispatcher",
    "ZwGetNlsSectionPtr",
    "NtCreateFile",
    "RtlUserThreadStart",
    "NtSetContextThread",
    "CsrCaptureMessageBuffer",
    "RtlEnumerateGenericTableAvl",
    "ZwReplyWaitReplyPort",
    "RtlRemoveVectoredExceptionHandler",
    "ZwQueryDriverEntryOrder",
    "RtlEqualDomainName",
    "__iscsym",
    "ZwMakePermanentObject",
    "RtlAcquirePebLock",
    "strncmp",
    "RtlCheckTokenMembership",
    "RtlQueryWnfStateDataWithExplicitScope",
    "RtlIpv6AddressToStringExW",
    "ZwCreateTransaction",
    "RtlGetVersion",
    "ZwWaitForSingleObject",
    "RtlAcquirePrivilege",
    "RtlUnhandledExceptionFilter",
    "ZwSetDefaultLocale",
    "ZwAlpcDeleteSectionView",
    "memmove_s",
    "_memicmp",
    "RtlFindClearRuns",
    "ZwAcceptConnectPort",
    "RtlUnicodeToUTF8N",
    "_wcsnset_s",
    "RtlDeleteTimerQueueEx",
    "NtQueryInformationFile",
    "LdrSetAppCompatDllRedirectionCallback",
    "ZwLockVirtualMemory",
    "RtlSetHeapInformation",
    "NtQueryDebugFilterState",
    "ZwLockProductActivationKeys",
    "NtContinue",
    "EtwGetTraceEnableLevel",
    "RtlMultipleAllocateHeap",
    "RtlReleaseActivationContext",
    "RtlSetGroupSecurityDescriptor",
    "AlpcUnregisterCompletionList",
    "EtwEventWrite",
    "NtQueryOpenSubKeys",
    "NtAssignProcessToJobObject",
    "RtlRunOnceComplete",
    "strstr",
    "ZwQueryInformationEnlistment",
    "LdrGetDllHandleByName",
    "ZwCreateEventPair",
    "RtlCreateTagHeap",
    "WinSqmStartSession",
    "NtOpenSemaphore",
    "ZwIsUILanguageComitted",
    "RtlSelfRelativeToAbsoluteSD",
    "RtlIntegerToChar",
    "RtlNumberOfClearBitsInRange",
    "RtlGetNtGlobalFlags",
    "NtQueryMutant",
    "RtlMakeSelfRelativeSD",
    "NtSetInformationEnlistment",
    "LdrInitializeThunk",
    "AlpcGetHeaderSize",
    "RtlCompareString",
    "RtlCreateAcl",
    "RtlResetRtlTranslations",
    "TpCallbackLeaveCriticalSectionOnCompletion",
    "_wcslwr_s",
    "RtlClearBit",
    "RtlExtendedIntegerMultiply",
    "NtWaitForSingleObject",
    "ZwAccessCheckByTypeResultList",
    "RtlIpv4AddressToStringExW",
    "RtlIsGenericTableEmptyAvl",
    "_ftol2",
    "PfxInsertPrefix",
    "RtlDestroyProcessParameters",
    "RtlComputePrivatizedDllName_U",
    "ZwAccessCheckByTypeAndAuditAlarm",
    "_wcslwr",
    "NtCreateMutant",
    "ZwSinglePhaseReject",
    "swscanf_s",
    "DbgUiSetThreadDebugObject",
    "EtwEventWriteString",
    "RtlRaiseStatus",
    "RtlCreateProcessParameters",
    "RtlCheckForOrphanedCriticalSections",
    "RtlLookupElementGenericTable",
    "NtRollbackTransaction",
    "RtlUnicodeToCustomCPN",
    "NtAlpcDeleteResourceReserve",
    "NtAddBootEntry",
    "RtlApplicationVerifierStop",
    "NtQueryWnfStateNameInformation",
    "RtlIpv6AddressToStringA",
    "RtlRegisterWait",
    "NtCompressKey",
    "RtlQueryElevationFlags",
    "ZwThawTransactions",
    "ZwOpenSession",
    "RtlValidateUnicodeString",
    "NtAlpcRevokeSecurityContext",
    "RtlWakeAddressSingle",
    "RtlInitAnsiStringEx",
    "RtlTraceDatabaseEnumerate",
    "RtlTryConvertSRWLockSharedToExclusiveOrRelease",
    "ZwEnumerateKey",
    "VerSetConditionMask",
    "RtlRbRemoveNode",
    "NtCompactKeys",
    "RtlSetUnhandledExceptionFilter",
    "RtlDeNormalizeProcessParams",
    "ZwAlpcSetInformation",
    "RtlEnumProcessHeaps",
    "ZwSetLowWaitHighEventPair",
    "RtlInterlockedPushListSList",
    "ZwCreateResourceManager",
    "RtlQueryProcessHeapInformation",
    "WinSqmIncrementDWORD",
    "NtEnumerateDriverEntries",
    "NtAdjustGroupsToken",
    "NtDisableLastKnownGood",
    "WinSqmSetDWORD64",
    "WinSqmAddToStreamEx",
    "NtSetValueKey",
    "RtlLargeIntegerArithmeticShift",
    "RtlAreBitsClear",
    "_itoa_s",
    "RtlSidEqualLevel",
    "ZwSetIoCompletionEx",
    "ZwSetQuotaInformationFile",
    "mbstowcs",
    "ZwSetLowEventPair",
    "MD5Init",
    "ispunct",
    "NtCreateProcessEx",
    "RtlInterlockedClearBitRun",
    "ZwFlushKey",
    "ZwGetCachedSigningLevel",
    "LdrUnloadAlternateResourceModuleEx",
    "RtlFindCharInUnicodeString",
    "ceil",
    "ZwPrepareEnlistment",
    "ZwCompressKey",
    "ZwCancelIoFileEx",
    "strtoul",
    "ZwReplacePartitionUnit",
    "NtAllocateLocallyUniqueId",
    "_ui64tow",
    "RtlInterlockedPushEntrySList",
    "_local_unwind4",
    "RtlWalkHeap",
    "LdrResSearchResource",
    "DbgSetDebugFilterState",
    "NtLoadKeyEx",
    "EtwReplyNotification",
    "RtlRemoveEntryHashTable",
    "DbgPrintEx",
    "NtQueryEvent",
    "NtRecoverResourceManager",
    "RtlpSetInstallLanguage",
    "RtlCheckTokenMembershipEx",
    "NtCreatePagingFile",
    "iswxdigit",
    "_atoi64",
    "NtSetUuidSeed",
    "RtlInsertElementGenericTableFullAvl",
    "RtlRestoreLastWin32Error",
    "RtlUshortByteSwap",
    "ZwAssociateWaitCompletionPacket",
    "NtProtectVirtualMemory",
    "ZwNotifyChangeMultipleKeys",
    "ZwReleaseWorkerFactoryWorker",
    "ZwOpenKey",
    "EtwpNotificationThread",
    "RtlDowncaseUnicodeString",
    "RtlEnumerateGenericTableLikeADirectory",
    "NtFlushInstructionCache",
    "RtlInitUnicodeStringEx",
    "RtlCreateUserSecurityObject",
    "NtWaitForDebugEvent",
    "RtlQueryProcessLockInformation",
    "RtlCompareMemoryUlong",
    "RtlSidDominates",
    "RtlSetSecurityObject",
    "NtAlertThreadByThreadId",
    "RtlQueryPerformanceFrequency",
    "NtSetHighEventPair",
    "ZwAlpcDisconnectPort",
    "ZwSetCachedSigningLevel",
    "RtlGetProductInfo",
    "_CIpow",
    "RtlTimeToSecondsSince1980",
    "ZwUpdateWnfStateData",
    "RtlReportSqmEscalation",
    "EtwWriteUMSecurityEvent",
    "RtlSubAuthorityCountSid",
    "NtQueryInformationResourceManager",
    "RtlQueryValidationRunlevel",
    "ZwSetSystemInformation",
    "RtlpApplyLengthFunction",
    "WinSqmCommonDatapointSetStreamEx",
    "NtAlpcDeleteSecurityContext",
    "NtDisplayString",
    "RtlNtPathNameToDosPathName",
    "ZwImpersonateAnonymousToken",
    "RtlSetEnvironmentVar",
    "ZwGetWriteWatch",
    "RtlWriteRegistryValue",
    "RtlCommitMemoryStream",
    "RtlSetDaclSecurityDescriptor",
    "TpCallbackDetectedUnrecoverableError",
    "RtlConvertSidToUnicodeString",
    "RtlSetThreadPoolStartFunc",
    "NtCreateIRTimer",
    "_wcsupr",
    "NtPrepareComplete",
    "RtlGetCallersAddress",
    "RtlLocalTimeToSystemTime",
    "RtlCopySid",
    "RtlQueueWorkItem",
    "_wcsicmp",
    "RtlUpcaseUnicodeStringToAnsiString",
    "ZwWriteFileGather",
    "NtDeletePrivateNamespace",
    "ZwSetInformationThread",
    "RtlDecompressBuffer",
    "RtlGetNtVersionNumbers",
    "RtlImageNtHeaderEx",
    "NtSetLowWaitHighEventPair",
    "EtwProcessPrivateLoggerRequest",
    "ZwAreMappedFilesTheSame",
    "RtlTryAcquireSRWLockExclusive",
    "NtCreateKeyedEvent",
    "iswctype",
    "RtlCompareAltitudes",
    "RtlAvlInsertNodeEx",
    "ZwQueryEaFile",
    "NtOpenKeyedEvent",
    "NtQueryInformationTransaction",
    "ZwDeleteBootEntry",
    "TpDisassociateCallback",
    "CsrVerifyRegion",
    "WinSqmCommonDatapointSetDWORD64",
    "RtlAcquireSRWLockShared",
    "NtAlertResumeThread",
    "NtAllocateUuids",
    "ZwQueryInformationThread",
    "RtlAnsiStringToUnicodeString",
    "NtCreateNamedPipeFile",
    "NtdllDialogWndProc_W",
    "RtlCheckRegistryKey",
    "RtlpNtEnumerateSubKey",
    "RtlExtendedMagicDivide",
    "NtLockRegistryKey",
    "RtlAddressInSectionTable",
    "ZwAlertResumeThread",
    "ZwDuplicateObject",
    "strncpy_s",
    "ZwResetEvent",
    "ZwProtectVirtualMemory",
    "RtlDuplicateUnicodeString",
    "RtlInitOutOfProcessMemoryStream",
    "_ltow_s",
    "NtCommitEnlistment",
    "RtlCaptureStackBackTrace",
    "NtRecoverEnlistment",
    "ZwCompareTokens",
    "ZwMapViewOfSection",
    "RtlAnsiCharToUnicodeChar",
    "RtlInterlockedPushListSListEx",
    "ZwSaveKey",
    "sprintf_s",
    "RtlSetThreadIsCritical",
    "RtlQueryActivationContextApplicationSettings",
    "RtlDeactivateActivationContext",
    "iswalnum",
    "RtlInitializeBitMap",
    "ZwTraceEvent",
    "NtCreateDirectoryObjectEx",
    "NtFlushProcessWriteBuffers",
    "wcsncat",
    "NlsMbOemCodePageTag",
    "ZwAlpcQueryInformationMessage",
    "NtQueryDefaultUILanguage",
    "LdrQueryProcessModuleInformation",
    "ZwSetInformationProcess",
    "NtAdjustPrivilegesToken",
    "LdrGetProcedureAddressEx",
    "RtlCopyMappedMemory",
    "RtlActivateActivationContext",
    "NtDeleteWnfStateData",
    "ZwSetThreadExecutionState",
    "NtCreateThread",
    "ZwContinue",
    "ZwFlushInstructionCache",
    "NtCreateResourceManager",
    "RtlAcquireResourceShared",
    "ZwFilterBootOption",
    "LdrQueryImageFileKeyOption",
    "ZwTraceControl",
    "RtlValidSecurityDescriptor",
    "RtlGetProcessPreferredUILanguages",
    "ZwAlpcCreateSecurityContext",
    "WinSqmGetInstrumentationProperty",
    "RtlInitializeCriticalSectionEx",
    "NtEnumerateKey",
    "RtlGetLengthWithoutTrailingPathSeperators",
    "RtlReleasePrivilege",
    "_alloca_probe",
    "ZwQueryVolumeInformationFile",
    "_ui64tow_s",
    "RtlQueryDynamicTimeZoneInformation",
    "RtlEnumerateEntryHashTable",
    "_chkstk",
    "NtSetInformationToken",
    "RtlCreateBoundaryDescriptor",
    "NtQueryValueKey",
    "NtAssociateWaitCompletionPacket",
    "DbgUiRemoteBreakin",
    "RtlIpv6StringToAddressExW",
    "RtlConvertUlongToLargeInteger",
    "RtlQueryTagHeap",
    "ZwQueryKey",
    "_memccpy",
    "TpAllocWait",
    "NtCreateWnfStateName",
    "RtlSetEnvironmentVariable",
    "NtResetEvent",
    "RtlNtStatusToDosErrorNoTeb",
    "RtlUnicodeToMultiByteN",
    "NtIsSystemResumeAutomatic",
    "NtCancelIoFileEx",
    "TpAllocWork",
    "RtlEndEnumerationHashTable",
    "RtlEnableEarlyCriticalSectionEventCreation",
    "RtlCreateUserThread",
    "NtSetInformationJobObject",
    "_aullshr",
    "NtQueryEaFile",
    "RtlValidSid",
    "ZwQuerySecurityObject",
    "NtCreateEvent",
    "RtlResetMemoryZone",
    "EtwEventWriteNoRegistration",
    "RtlFormatMessageEx",
    "RtlSleepConditionVariableSRW",
    "ZwUnmapViewOfSectionEx",
    "NtSetTimerEx",
    "RtlWow64EnableFsRedirectionEx",
    "RtlSetAttributesSecurityDescriptor",
    "RtlNewSecurityObjectWithMultipleInheritance",
    "RtlpGetUserOrMachineUILanguage4NLS",
    "ZwReplyWaitReceivePortEx",
    "RtlSidHashInitialize",
    "RtlCopyContext",
    "RtlImpersonateSelf",
    "abs",
    "_wcsnicmp",
    "RtlSetLastWin32Error",
    "RtlRunOnceBeginInitialize",
    "NtRaiseException",
    "LdrGetDllHandleByMapping",
    "NtSuspendThread",
    "RtlIsUntrustedObject",
    "RtlPinAtomInAtomTable",
    "NtSetTimer",
    "ZwDeletePrivateNamespace",
    "AlpcInitializeMessageAttribute",
    "RtlEqualString",
    "RtlMapSecurityErrorToNtStatus",
    "TpWaitForAlpcCompletion",
    "ZwQueryInformationProcess",
    "NtLockFile",
    "TpPostWork",
    "RtlNewSecurityGrantedAccess",
    "ZwRemoveIoCompletionEx",
    "strtol",
    "RtlCopyBitMap",
    "RtlIsNameLegalDOS8Dot3",
    "NtAccessCheckAndAuditAlarm",
    "swprintf",
    "ZwDeleteValueKey",
    "ZwQueryPerformanceCounter",
    "A_SHAUpdate",
    "ZwGetContextThread",
    "towupper",
    "RtlPcToFileHeader",
    "TpSetTimer",
    "A_SHAInit",
    "RtlZombifyActivationContext",
    "RtlpUnWaitCriticalSection",
    "RtlLockMemoryZone",
    "RtlPopFrame",
    "NtOpenFile",
    "WinSqmAddToAverageDWORD",
    "RtlInitializeSRWLock",
    "DbgPrint",
    "memmove",
    "_alldvrm",
    "NtQueryDefaultLocale",
    "RtlNumberOfSetBits",
    "ZwModifyBootEntry",
    "EtwGetTraceEnableFlags",
    "ZwFsControlFile",
    "TpReleaseIoCompletion",
    "RtlWakeAddressAllNoFence",
    "__isascii",
    "KiUserCallbackDispatcher",
    "RtlGetCurrentPeb",
    "ZwCreateToken",
    "NtResumeThread",
    "RtlSetUserValueHeap",
    "NtCreateEnlistment",
    "ZwQueryDirectoryObject",
    "ZwRollbackEnlistment",
    "RtlRegisterSecureMemoryCacheCallback",
    "ZwRaiseHardError",
    "RtlRunOnceExecuteOnce",
    "RtlCreateVirtualAccountSid",
    "ZwQuerySection",
    "RtlGetFullPathName_UEx",
    "NtAllocateUserPhysicalPages",
    "TpAlpcRegisterCompletionList",
    "ZwModifyDriverEntry",
    "NtSetInformationTransaction",
    "NtAreMappedFilesTheSame",
    "NtOpenEvent",
    "RtlCreateTimer",
    "RtlConvertLCIDToString",
    "RtlInitializeSListHead",
    "ZwSetInformationWorkerFactory",
    "RtlDeleteElementGenericTable",
    "RtlClearAllBits",
    "_allshl",
    "ZwFreeVirtualMemory",
    "ZwOpenProcessToken",
    "AlpcUnregisterCompletionListWorkerThread",
    "EtwRegisterTraceGuidsA",
    "NtUnloadKeyEx",
    "LdrResolveDelayLoadsFromDll",
    "_i64tow_s",
    "ZwOpenSection",
    "RtlIpv4StringToAddressA",
    "RtlMultipleFreeHeap",
    "RtlDllShutdownInProgress",
    "ZwReadRequestData",
    "TpStartAsyncIoOperation",
    "AlpcRegisterCompletionListWorkerThread",
    "ZwSetDriverEntryOrder",
    "WinSqmEventWrite",
    "NtCreateWaitCompletionPacket",
    "wcstol",
    "NtPrePrepareComplete",
    "NtSetInformationThread",
    "RtlFindMessage",
    "ZwQueueApcThreadEx",
    "CsrCaptureMessageString",
    "RtlUnwind",
    "NtOpenProcessToken",
    "_except_handler4_common",
    "ZwFindAtom",
    "RtlEnumerateGenericTableWithoutSplayingAvl",
    "RtlEraseUnicodeString",
    "ZwQueryDefaultLocale",
    "ZwMapUserPhysicalPages",
    "LdrAddLoadAsDataTable",
    "NtCreateTokenEx",
    "ZwAdjustPrivilegesToken",
    "ZwCreateMailslotFile",
    "ZwDuplicateToken",
    "NtSetDebugFilterState",
    "NtAccessCheckByTypeResultList",
    "NtModifyDriverEntry",
    "NtRemoveIoCompletionEx",
    "RtlCopyOutOfProcessMemoryStreamTo",
    "RtlpNtCreateKey",
    "LdrUnregisterDllNotification",
    "RtlFindActivationContextSectionString",
    "ZwShutdownSystem",
    "RtlFindLastBackwardRunClear",
    "RtlEncodeSystemPointer",
    "RtlTestBit",
    "isspace",
    "strcat_s",
    "ZwExtendSection",
    "RtlUnlockMemoryStreamRegion",
    "ZwAlpcQueryInformation",
    "LdrProcessRelocationBlockEx",
    "NtResumeProcess",
    "RtlQueryRegistryValuesEx",
    "RtlLocateExtendedFeature",
    "NtWaitForAlertByThreadId",
    "RtlLocaleNameToLcid",
    "RtlRandomEx",
    "LdrGetDllDirectory",
    "_CIcos",
    "fabs",
    "RtlDebugPrintTimes",
    "RtlBarrierForDelete",
    "NtQueryInstallUILanguage",
    "RtlLookupElementGenericTableFullAvl",
    "RtlReadMemoryStream",
    "RtlNewSecurityObject",
    "ZwAlpcOpenSenderThread",
    "isgraph",
    "RtlGetDaclSecurityDescriptor",
    "RtlpLoadUserUIByPolicy",
    "NtLoadKey",
    "NtReplyWaitReceivePortEx",
    "RtlDecompressFragment",
    "PfxInitialize",
    "ZwQuerySystemTime",
    "NtReleaseKeyedEvent",
    "NtDebugContinue",
    "strcspn",
    "RtlIpv6StringToAddressW",
    "RtlSetExtendedFeaturesMask",
    "DbgUiStopDebugging",
    "NtAlpcCreatePortSection",
    "RtlIdnToAscii",
    "ZwAddBootEntry",
    "ZwRecoverEnlistment",
    "RtlGetIntegerAtom",
    "NtAlpcImpersonateClientOfPort",
    "RtlReleasePath",
    "NtTerminateProcess",
    "ZwVdmControl",
    "TpCallbackSetEventOnCompletion",
    "RtlpWaitForCriticalSection",
    "_vsnprintf",
    "RtlGetControlSecurityDescriptor",
    "NtQueryInformationPort",
    "ZwLoadDriver",
    "_wtoi",
    "RtlUnicodeStringToAnsiString",
    "RtlLCIDToCultureName",
    "RtlpWnfNotificationThread",
    "NtSetTimerResolution",
    "RtlClearBits",
    "EtwEventWriteEndScenario",
    "NtTerminateThread",
    "ZwQueryInformationAtom",
    "RtlCharToInteger",
    "LdrFindResourceEx_U",
    "RtlCopyString",
    "RtlGetSetBootStatusData",
    "NtCreatePrivateNamespace",
    "NtSetVolumeInformationFile",
    "RtlDumpResource",
    "NtSetEvent",
    "ZwOpenTransaction",
    "NtGetDevicePowerState",
    "RtlAddCompoundAce",
    "ZwReadFileScatter",
    "RtlTraceDatabaseCreate",
    "ZwImpersonateClientOfPort",
    "ZwAllocateUserPhysicalPages",
    "NtQueryInformationEnlistment",
    "RtlxUnicodeStringToOemSize",
    "RtlEndWeakEnumerationHashTable",
    "RtlGetLocaleFileMappingAddress",
    "ZwTerminateProcess",
    "strpbrk",
    "_aullrem",
    "ZwPrePrepareEnlistment",
    "ZwClose",
    "EtwLogTraceEvent",
    "NtQueryFullAttributesFile",
    "ZwReleaseMutant",
    "RtlRegisterForWnfMetaNotification",
    "sscanf_s",
    "TpCallbackReleaseMutexOnCompletion",
    "ZwRequestPort",
    "EtwTraceEventInstance",
    "RtlValidateProcessHeaps",
    "AlpcGetMessageAttribute",
    "ZwMapUserPhysicalPagesScatter",
    "NtCallbackReturn",
    "NtAlertThread",
    "NtGetContextThread",
    "RtlTraceDatabaseUnlock",
    "ZwOpenThreadToken",
    "ZwAlpcOpenSenderProcess",
    "_strupr_s",
    "iswlower",
    "RtlUniform",
    "RtlIpv6AddressToStringW",
    "RtlIsDosDeviceName_U",
    "TpQueryPoolStackInformation",
    "LdrGetDllHandleEx",
    "ZwCreateSemaphore",
    "NtGetNextThread",
    "SbExecuteProcedure",
    "strlen",
    "NtPrivilegeCheck",
    "ShipAssertMsgW",
    "ZwUmsThreadYield",
    "NtQueryInformationProcess",
    "ZwImpersonateThread",
    "_itoa",
    "_wcsupr_s",
    "LdrFlushAlternateResourceModules",
    "NtAlpcConnectPortEx",
    "NtSetBootOptions",
    "NtImpersonateAnonymousToken",
    "RtlxUnicodeStringToAnsiSize",
    "RtlCaptureContext",
    "RtlCopyLuid",
    "RtlDosPathNameToRelativeNtPathName_U_WithStatus",
    "RtlxOemStringToUnicodeSize",
    "_allmul",
    "RtlAddAuditAccessAce",
    "RtlIsGenericTableEmpty",
    "RtlFindClosestEncodableLength",
    "RtlUpcaseUnicodeToCustomCPN",
    "NtSetBootEntryOrder",
    "ZwDeleteFile",
    "RtlFindLeastSignificantBit",
    "RtlGetUILanguageInfo",
    "RtlOemToUnicodeN",
    "_strnset_s",
    "RtlNormalizeProcessParams",
    "ZwQuerySecurityAttributesToken",
    "RtlAppendStringToString",
    "RtlDosSearchPath_U",
    "isupper",
    "NtGetNotificationResourceManager",
    "RtlLoadString",
    "NtReadFile",
    "RtlDetermineDosPathNameType_U",
    "RtlReportException",
    "RtlpRefreshCachedUILanguage",
    "RtlGetThreadPreferredUILanguages",
    "NtFlushWriteBuffer",
    "NtUpdateWnfStateData",
    "RtlInitNlsTables",
    "ZwRollforwardTransactionManager",
    "RtlQueryInformationAcl",
    "RtlDeleteTimerQueue",
    "RtlGetGroupSecurityDescriptor",
    "ZwSetSystemEnvironmentValue",
    "ZwGetNextProcess",
    "RtlSizeHeap",
    "RtlAppendPathElement",
    "WinSqmCheckEscalationSetString",
    "RtlInitializeContext",
    "_errno",
    "DbgUiGetThreadDebugObject",
    "AlpcMaxAllowedMessageLength",
    "NtSaveKey",
    "RtlCaptureStackContext",
    "RtlLargeIntegerDivide",
    "NtFlushInstallUILanguage",
    "RtlAreBitsSet",
    "ZwRemoveProcessDebug",
    "RtlFirstEntrySList",
    "LdrRemoveLoadAsDataTable",
    "NtSetInformationWorkerFactory",
    "ZwWaitForWnfNotifications",
    "RtlExpandHashTable",
    "RtlDisableThreadProfiling",
    "strcpy",
    "RtlFreeThreadActivationContextStack",
    "TpWaitForJobNotification",
    "_allrem",
    "ZwAllocateVirtualMemory",
    "RtlpMuiRegCreateRegistryInfo",
    "RtlInsertElementGenericTableAvl",
    "RtlNumberGenericTableElements",
    "RtlGetNativeSystemInformation",
    "LdrResFindResourceDirectory",
    "RtlTryEnterCriticalSection",
    "NtImpersonateThread",
    "RtlLargeIntegerSubtract",
    "RtlDestroyHeap",
    "RtlDeleteCriticalSection",
    "RtlpSetPreferredUILanguages",
    "TpAllocCleanupGroup",
    "LdrLoadAlternateResourceModuleEx",
    "sprintf",
    "RtlEthernetStringToAddressW",
    "ZwUnloadDriver",
    "sscanf",
    "NtRemoveProcessDebug",
    "RtlConvertUiListToApiList",
    "NtOpenTimer",
    "RtlSplay",
    "NtdllDefWindowProc_W",
    "RtlDeleteRegistryValue",
    "NtDrawText",
    "ZwQueryEvent",
    "ZwOpenFile",
    "_vsnwprintf",
    "RtlAddAccessDeniedAceEx",
    "NtSetDriverEntryOrder",
    "ZwQueryOpenSubKeys",
    "LdrProcessRelocationBlock",
    "ZwGetNotificationResourceManager",
    "RtlDnsHostNameToComputerName",
    "NtOpenEventPair",
    "ZwDrawText",
    "NtDeleteWnfStateName",
    "LdrResRelease",
    "NtPrivilegeObjectAuditAlarm",
    "RtlGetLengthWithoutLastFullDosOrNtPathElement",
    "_vsnprintf_s",
    "ZwQueryInformationToken",
    "RtlAddResourceAttributeAce",
    "RtlDestroyMemoryZone",
    "_aulldiv",
    "RtlEnterCriticalSection",
    "ZwWaitForMultipleObjects",
    "RtlLargeIntegerNegate",
    "NtAlpcCreateSectionView",
    "RtlDeleteBoundaryDescriptor",
    "NtRequestPort",
    "ZwSetInformationTransactionManager",
    "NtUnmapViewOfSectionEx",
    "RtlSubscribeWnfStateChangeNotification",
    "EtwEventWriteEx",
    "RtlFirstFreeAce",
    "LdrSetMUICacheType",
    "RtlUnlockMemoryZone",
    "RtlFreeOemString",
    "RtlAddAccessDeniedObjectAce",
    "TpWaitForWait",
    "_itow_s",
    "ZwSetInformationResourceManager",
    "RtlSetProcessDebugInformation",
    "NtOpenResourceManager",
    "RtlpGetLCIDFromLangInfoNode",
    "NtOpenTransactionManager",
    "RtlpInitializeLangRegistryInfo",
    "RtlUnhandledExceptionFilter2",
    "TpCheckTerminateWorker",
    "NtQueryObject",
    "RtlImageDirectoryEntryToData",
    "NtSetIRTimer",
    "NtFindAtom",
    "ZwCommitEnlistment",
    "ZwWriteVirtualMemory",
    "ZwQueryDefaultUILanguage",
    "ZwSetSystemPowerState",
    "RtlCloneMemoryStream",
    "RtlIsValidLocaleName",
    "RtlCreateMemoryBlockLookaside",
    "NtSetEventBoostPriority",
    "NtTestAlert",
    "RtlRealPredecessor",
    "NtWaitForMultipleObjects32",
    "RtlCommitDebugInfo",
    "RtlGetSaclSecurityDescriptor",
    "NtReplyWaitReceivePort",
    "RtlExtendMemoryBlockLookaside",
    "ZwFlushInstallUILanguage",
    "ZwCompleteConnectPort",
    "ZwIsSystemResumeAutomatic",
    "NtQuerySemaphore",
    "RtlFormatMessage",
    "ZwStopProfile",
    "NtRollbackComplete",
    "RtlLargeIntegerShiftLeft",
    "RtlZeroMemory",
    "_stricmp",
    "wcsnlen",
    "RtlAnsiStringToUnicodeSize",
    "EtwpGetCpuSpeed",
    "DbgUiConvertStateChangeStructure",
    "RtlCreateTimerQueue",
    "NtSetDefaultUILanguage",
    "ZwQuerySemaphore",
    "RtlCreateUnicodeString",
    "RtlQuerySecurityObject",
    "NtQueryPortInformationProcess",
    "ZwGetCurrentProcessorNumber",
    "_makepath_s",
    "NtMakeTemporaryObject",
    "RtlDeregisterWait",
    "RtlGetCriticalSectionRecursionCount",
    "ZwDeleteAtom",
    "NtGetCachedSigningLevel",
    "RtlFlushHeaps",
    "NtCreateMailslotFile",
    "_swprintf",
    "LdrRscIsTypeExist",
    "strncpy",
    "ZwMapCMFModule",
    "ZwDeviceIoControlFile",
    "_wtol",
    "ZwCreateSymbolicLinkObject",
    "MD5Update",
    "LdrRemoveDllDirectory",
    "RtlApplyRXact",
    "ZwCloseObjectAuditAlarm",
    "EtwTraceMessageVa",
    "RtlGetElementGenericTableAvl",
    "RtlQueryProcessDebugInformation",
    "MD5Final",
    "RtlWakeAddressAll",
    "RtlQueryHeapInformation",
    "NtSuspendProcess",
    "RtlCreateHeap",
    "RtlCompareUnicodeString",
    "RtlLogStackBackTrace",
    "RtlDecodePointer",
    "RtlGetCurrentTransaction",
    "RtlUnicodeToMultiByteSize",
    "ZwUnmapViewOfSection",
    "RtlLockMemoryStreamRegion",
    "NtQueryTimer",
    "ZwCreateDirectoryObjectEx",
    "NtTranslateFilePath",
    "ZwQueryVirtualMemory",
    "NtCreateDirectoryObject",
    "RtlCreateUnicodeStringFromAsciiz",
    "RtlQueryEnvironmentVariable_U",
    "NtSetSystemEnvironmentValue",
    "TpReleaseTimer",
    "RtlFreeMemoryBlockLookaside",
    "RtlDosPathNameToRelativeNtPathName_U",
    "NtCancelIoFile",
    "NtSetInformationKey",
    "NtReleaseMutant",
    "RtlAddAce",
    "RtlUpperChar",
    "RtlReleasePebLock",
    "NtInitializeNlsFiles",
    "NtUnloadKey",
    "RtlSubAuthoritySid",
    "RtlUnsubscribeWnfNotificationWaitForCompletion",
    "RtlCreateMemoryZone",
    "NtListenPort",
    "ZwPrivilegeObjectAuditAlarm",
    "_fltused",
    "_ultoa",
    "NtEnumerateValueKey",
    "RtlDoesFileExists_U",
    "RtlNormalizeString",
    "RtlpQueryDefaultUILanguage",
    "ZwOpenObjectAuditAlarm",
    "EtwEventWriteFull",
    "RtlPrefixUnicodeString",
    "ZwCreateWaitCompletionPacket",
    "RtlAllocateMemoryBlockLookaside",
    "RtlLookupElementGenericTableAvl",
    "RtlSecondsSince1970ToTime",
    "ZwEnumerateDriverEntries",
    "NtDeleteDriverEntry",
    "NtQueryPerformanceCounter",
    "NtSetHighWaitLowEventPair",
    "wcstombs",
    "DbgUiWaitStateChange",
    "RtlEncodePointer",
    "ZwSetIntervalProfile",
    "NtReadRequestData",
    "RtlComputeCrc32",
    "RtlUnicodeStringToAnsiSize",
    "RtlActivateActivationContextUnsafeFast",
    "RtlUnlockBootStatusData",
    "NtReadFileScatter",
    "NtRaiseHardError",
    "WinSqmSetIfMaxDWORD",
    "EtwUnregisterTraceGuids",
    "NtMapUserPhysicalPagesScatter",
    "WerReportSQMEvent",
    "RtlInitUnicodeString",
    "RtlEqualComputerName",
    "RtlDeleteNoSplay",
    "RtlIpv4AddressToStringA",
    "RtlpLoadMachineUIByPolicy",
    "ZwUnloadKey",
    "RtlCmEncodeMemIoResource",
    "AlpcAdjustCompletionListConcurrencyCount",
    "TpSetWait",
    "_ltoa_s",
    "NtShutdownWorkerFactory",
    "RtlCopyLuidAndAttributesArray",
    "RtlCrc32",
    "LdrSetDefaultDllDirectories",
    "NtCancelWaitCompletionPacket",
    "LdrShutdownProcess",
    "ZwYieldExecution",
    "NtUnlockFile",
    "ZwQueryQuotaInformationFile",
    "RtlUpdateTimer",
    "RtlGetFullPathName_UstrEx",
    "RtlIsPackageSid",
    "RtlDecompressBufferEx",
    "WinSqmIsSessionDisabled",
    "ZwOpenKeyTransactedEx",
    "ZwAlpcCreateSectionView",
    "RtlHashUnicodeString",
    "NtQueueApcThread",
    "NtSetLowEventPair",
    "NtThawTransactions",
    "RtlInitWeakEnumerationHashTable",
    "ZwReleaseSemaphore",
    "ZwRequestWaitReplyPort",
    "RtlFindSetBitsAndClear",
    "wcslen",
    "LdrEnumerateLoadedModules",
    "RtlLockMemoryBlockLookaside",
    "ZwCreateTokenEx",
    "NtSetQuotaInformationFile",
    "NtReplaceKey",
    "RtlGetEnabledExtendedFeatures",
    "ApiSetQueryApiSetPresence",
    "RtlQueryProcessBackTraceInformation",
    "NtSerializeBoot",
    "NtEnumerateTransactionObject",
    "RtlOpenCurrentUser",
    "NtAlpcOpenSenderThread",
    "NtAccessCheckByTypeAndAuditAlarm",
    "NtAlpcQueryInformation",
    "RtlConsoleMultiByteToUnicodeN",
    "NtOpenKeyEx",
    "RtlpMergeSecurityAttributeInformation",
    "RtlGetUserInfoHeap",
    "ZwAccessCheckByTypeResultListAndAuditAlarmByHandle",
    "RtlSetThreadPreferredUILanguages",
    "NtOpenEnlistment",
    "ZwTranslateFilePath",
    "qsort_s",
    "ZwSetIRTimer",
    "RtlEnlargedIntegerMultiply",
    "RtlAbortRXact",
    "NtPropagationFailed",
    "ZwFreezeRegistry",
    "TpAlpcUnregisterCompletionList",
    "_wcstoui64",
    "RtlIsCriticalSectionLocked",
    "ZwInitializeRegistry",
    "RtlAvlRemoveNode",
    "RtlGetCurrentProcessorNumberEx",
    "RtlBarrier",
    "WinSqmSetDWORD",
    "ZwGetMUIRegistryInfo",
    "_ftol",
    "RtlGetExtendedContextLength",
    "isalpha",
    "RtlGetOwnerSecurityDescriptor",
    "LdrRegisterDllNotification",
    "ZwSubscribeWnfStateChange",
    "RtlAllocateHandle",
    "RtlFormatCurrentUserKeyPath",
    "ZwCancelWaitCompletionPacket",
    "KiUserExceptionDispatcher",
    "ZwCreatePagingFile",
    "ZwAddAtomEx",
    "RtlCreateHashTableEx",
    "EtwEventActivityIdControl",
    "ZwTerminateThread",
    "RtlUnicodeStringToOemSize",
    "EtwEventUnregister",
    "NtUnlockVirtualMemory",
    "NtSetInformationResourceManager",
    "SbSelectProcedure",
    "ExpInterlockedPopEntrySListResume",
    "NtSetInformationProcess",
    "WinSqmCheckEscalationSetDWORD",
    "ZwQueryDirectoryFile",
    "RtlInitMemoryStream",
    "ZwCreatePrivateNamespace",
    "cos",
    "ZwAlertThreadByThreadId",
    "__iscsymf",
    "NtWriteRequestData",
    "RtlOemStringToUnicodeSize",
    "ZwSetTimerEx",
    "NtThawRegistry",
    "RtlpGetSystemDefaultUILanguage",
    "NtGetNlsSectionPtr",
    "ZwSetValueKey",
    "RtlDestroyQueryDebugBuffer",
    "_ui64toa",
    "NtOpenMutant",
    "NtSetCachedSigningLevel",
    "_ultow_s",
    "ZwSignalAndWaitForSingleObject",
    "ZwSetIoCompletion",
    "NtFreeVirtualMemory",
    "NtReadOnlyEnlistment",
    "LdrGetDllPath",
    "RtlGUIDFromString",
    "ZwQueryLicenseValue",
    "RtlImpersonateSelfEx",
    "NtCreateToken",
    "RtlExpandEnvironmentStrings_U",
    "ZwSetInformationEnlistment",
    "EtwRegisterTraceGuidsW",
    "RtlWaitForWnfMetaNotification",
    "ZwOpenKeyEx",
    "NtWaitForMultipleObjects",
    "RtlTraceDatabaseLock",
    "RtlUnicodeStringToCountedOemString",
    "RtlTryAcquirePebLock",
    "RtlIpv6StringToAddressA",
    "RtlDefaultNpAcl",
    "islower",
    "RtlEmptyAtomTable",
    "ZwApphelpCacheControl",
    "RtlSleepConditionVariableCS",
    "LdrLockLoaderLock",
    "ZwSetSecurityObject",
    "strchr",
    "ZwCreateJobObject",
    "CsrIdentifyAlertableThread",
    "LdrAddDllDirectory",
    "ZwReleaseKeyedEvent",
    "NtCreateUserProcess",
    "RtlGetFileMUIPath",
    "RtlImageNtHeader",
    "_wtoi64",
    "_snprintf_s",
    "RtlInitAnsiString",
    "NtPowerInformation",
    "NtRegisterThreadTerminatePort",
    "RtlInsertElementGenericTableFull",
    "NtAlpcDeleteSectionView",
    "ZwSetDebugFilterState",
    "RtlCreateRegistryKey",
    "RtlSetTimer",
    "CsrSetPriorityClass",
    "LdrLoadAlternateResourceModule",
    "RtlDestroyHandleTable",
    "TpReleaseCleanupGroup",
    "RtlInitializeCriticalSection",
    "TpCallbackUnloadDllOnCompletion",
    "RtlRunDecodeUnicodeString",
    "NtAcceptConnectPort",
    "ZwRollbackComplete",
    "DbgUiContinue",
    "EtwSetMark",
    "RtlMoveMemory",
    "RtlApplyRXactNoFlush",
    "RtlLockCurrentThread",
    "NtFilterBootOption",
    "RtlLargeIntegerToChar",
    "NtQuerySecurityObject",
    "ZwPowerInformation",
    "RtlSetControlSecurityDescriptor",
    "EtwEnumerateProcessRegGuids",
    "NtCommitTransaction",
    "RtlUnicodeStringToOemString",
    "NtClose",
    "ZwSetBootOptions",
    "NtCreatePort",
    "ZwSetEaFile",
    "ZwCreateThread",
    "RtlpCleanupRegistryKeys",
    "ZwUnsubscribeWnfStateChange",
    "ZwRegisterThreadTerminatePort",
    "_wmakepath_s",
    "RtlCreateUserStack",
    "NtSetInformationTransactionManager",
    "wcscspn",
    "ZwWaitForWorkViaWorkerFactory",
    "NtOpenThreadToken",
    "RtlReleaseSRWLockExclusive",
    "NtWaitForWorkViaWorkerFactory",
    "_itow",
    "RtlLargeIntegerShiftRight",
    "ZwCompactKeys",
    "LdrResolveDelayLoadedAPI",
    "RtlIdnToUnicode",
    "RtlStatMemoryStream",
    "RtlQueryDepthSList",
    "RtlTimeToElapsedTimeFields",
    "NtGetTickCount",
    "NtRollforwardTransactionManager",
    "CsrCaptureMessageMultiUnicodeStringsInPlace",
    "NtApphelpCacheControl",
    "RtlAddMandatoryAce",
    "NtAccessCheckByTypeResultListAndAuditAlarmByHandle",
    "RtlSubtreeSuccessor",
    "ZwPrepareComplete",
    "NtSetIntervalProfile",
    "ZwUnloadKey2",
    "NtSetInformationObject",
    "RtlEqualSid",
    "RtlUnlockHeap",
    "ZwSetBootEntryOrder",
    "ZwAdjustGroupsToken",
    "RtlGetSecurityDescriptorRMControl",
    "RtlReadOutOfProcessMemoryStream",
    "RtlIsNormalizedString",
    "ZwQueueApcThread",
    "_alldiv",
    "NtOpenIoCompletion",
    "CsrFreeCaptureBuffer",
    "ZwCreatePort",
    "ZwSetSystemTime",
    "RtlWriteMemoryStream",
    "TpCallbackIndependent",
    "RtlUpcaseUnicodeChar",
    "_snwprintf_s",
    "ZwFlushBuffersFile",
    "_lfind",
    "ZwPropagationComplete",
    "atoi",
    "RtlConvertSharedToExclusive",
    "NtWaitHighEventPair",
    "NtOpenProcess",
    "RtlQueueApcWow64Thread",
    "RtlCultureNameToLCID",
    "RtlRaiseException",
    "NtQueryInformationToken",
    "RtlInitializeExtendedContext",
    "NtWaitForWnfNotifications",
    "ShipAssertMsgA",
    "NtNotifyChangeKey",
    "NtRegisterProtocolAddressInformation",
    "NtFlushKey",
    "ZwReadFile",
    "LdrVerifyImageMatchesChecksum",
    "RtlProcessFlsData",
    "RtlGetLastNtStatus",
    "iswdigit",
    "ZwQueryPortInformationProcess",
    "RtlWnfCompareChangeStamp",
    "RtlInitBarrier",
    "WinSqmCommonDatapointSetDWORD",
    "NtDeleteObjectAuditAlarm",
    "RtlDeregisterSecureMemoryCacheCallback",
    "RtlGetElementGenericTable",
    "NtQueryInformationTransactionManager",
    "RtlTimeToSecondsSince1970",
    "ZwQueryObject",
    "ZwRaiseException",
    "RtlSeekMemoryStream",
    "WinSqmCommonDatapointSetString",
    "NtAlpcSetInformation",
    "bsearch",
    "_wsplitpath_s",
    "AlpcRegisterCompletionList",
    "ZwCreateDirectoryObject",
    "RtlDetectHeapLeaks",
    "RtlSystemTimeToLocalTime",
    "DbgUiConnectToDbg",
    "NtFsControlFile",
    "NtOpenPrivateNamespace",
    "NtPrivilegedServiceAuditAlarm",
    "RtlUnlockCurrentThread",
    "TpIsTimerSet",
    "RtlInitEnumerationHashTable",
    "RtlCleanUpTEBLangLists",
    "EtwEventRegister",
    "EtwNotificationRegister",
    "EtwNotificationUnregister",
    "NtWriteFile",
    "NtQueryMultipleValueKey",
    "A_SHAFinal",
    "RtlCreateSecurityDescriptor",
    "NtOpenKeyTransactedEx",
    "RtlZeroHeap",
    "ZwDisplayString",
    "KiRaiseUserExceptionDispatcher",
    "NtLockProductActivationKeys",
    "ZwOpenProcess",
    "NtCreateTimer",
    "RtlDestroyEnvironment",
    "WinSqmIsOptedIn",
    "NtDuplicateObject",
    "NtPropagationComplete",
    "NtMapUserPhysicalPages",
    "WinSqmIsOptedInEx",
    "NtQueryLicenseValue",
    "RtlNumberOfSetBitsInRange",
    "RtlpMuiRegFreeRegistryInfo",
    "ZwCreateLowBoxToken",
    "TpWaitForWork",
    "ZwOpenResourceManager",
    "RtlEnlargedUnsignedMultiply",
    "RtlAddRefActivationContext",
    "RtlFinalReleaseOutOfProcessMemoryStream",
    "ZwInitiatePowerAction",
    "NtNotifyChangeSession",
    "NtReplyWaitReplyPort",
    "RtlSetUserFlagsHeap",
    "ZwDebugContinue",
    "iswspace",
    "RtlSetProcessIsCritical",
    "RtlCreateEnvironment",
    "ZwCreateMutant",
    "RtlDeregisterWaitEx",
    "NtPrePrepareEnlistment",
    "NtQueryInformationThread",
    "ZwQueryIntervalProfile",
    "ZwQueryAttributesFile",
    "NtQueryInformationAtom",
    "ZwWaitForAlertByThreadId",
    "NtQueryVirtualMemory",
    "RtlDowncaseUnicodeChar",
    "RtlAppendAsciizToString",
    "ZwCreateThreadEx",
    "RtlAddVectoredContinueHandler",
    "NtModifyBootEntry",
    "RtlFlsFree",
    "RtlLockHeap",
    "KiIntSystemCall",
    "NtQueryOpenSubKeysEx",
    "ZwQuerySymbolicLinkObject",
    "DbgUiDebugActiveProcess",
    "EtwSendNotification",
    "RtlIsValidIndexHandle",
    "ZwAlpcConnectPort",
    "NtCreateProfileEx",
    "ZwRemoveIoCompletion",
    "ZwIsProcessInJob",
    "ZwSecureConnectPort"
  ],
  "ntdsapi.dll": [
    "DsMakeSpnA",
    "DsGetDomainControllerInfoWWorker",
    "DsListDomainsInSiteA",
    "DsCrackSpn4W",
    "DsGetDomainControllerInfoA",
    "DsGetDomainControllerInfoW",
    "DsReplicaSyncAllW",
    "DsFreeSchemaGuidMapW",
    "DsFreeNameResultWWorker",
    "DsRemoveDsServerA",
    "DsReplicaVerifyObjectsA",
    "DsListRolesW",
    "DsReplicaUpdateRefsA",
    "DsReplicaModifyA",
    "DsUnquoteRdnValueA",
    "DsAddCloneDCW",
    "DsRemoveDsDomainW",
    "DsBindWithSpnExW",
    "DsIsMangledDnA",
    "DsBindW",
    "DsGetRdnW",
    "DsBindWithSpnA",
    "DsAddSidHistoryW",
    "DsUnBindA",
    "DsBindWithSpnExA",
    "DsFreeNameResultA",
    "DsQuoteRdnValueA",
    "DsBindWithCredW",
    "DsReplicaDelA",
    "DsFreeDomainControllerInfoWWorker",
    "DsReplicaSyncW",
    "DsListRolesA",
    "DsMapSchemaGuidsA",
    "DsBindByInstanceW",
    "DsListSitesW",
    "DsQuerySitesByCostA",
    "DsFreeNameResultW",
    "DsListServersForDomainInSiteW",
    "DsFreeDomainControllerInfoA",
    "DsFreePasswordCredentialsWorker",
    "DsCrackSpn3W",
    "DsQuerySitesByCostW",
    "DsCrackSpnW",
    "DsFreeSchemaGuidMapA",
    "DsaopUnBind",
    "DsListServersForDomainInSiteA",
    "DsBindWithSpnW",
    "DsReplicaModifyW",
    "DsGetBindAddrW",
    "DsGetSpnA",
    "DsGetSpnW",
    "DsBindByInstanceA",
    "DsBindWithCredA",
    "DsCrackNamesWWorker",
    "DsFreeSpnArrayW",
    "DsListServersInSiteW",
    "DsMakePasswordCredentialsWWorker",
    "DsaopBindWithCred",
    "DsReplicaUpdateRefsW",
    "DsBindingSetTimeout",
    "DsFreeSpnArrayA",
    "DsUnquoteRdnValueW",
    "DsFreeDomainControllerInfoW",
    "DsBindToISTGA",
    "DsWriteAccountSpnA",
    "DsGetBindAnnotW",
    "DsCrackSpn2A",
    "DsMakePasswordCredentialsA",
    "DsInitDemotionW",
    "DsReplicaConsistencyCheck",
    "DsReplicaSyncAllA",
    "DsaopBind",
    "DsFreeCloneDcResult",
    "DsBindA",
    "DsReplicaDemotionW",
    "DsCrackSpn2W",
    "DsUnBindW",
    "DsListSitesA",
    "DsRemoveDsServerW",
    "DsCrackNamesW",
    "DsMapSchemaGuidsW",
    "DsListDomainsInSiteW",
    "DsReplicaDelW",
    "DsListInfoForServerA",
    "DsInheritSecurityIdentityW",
    "DsFinishDemotionW",
    "DsLogEntry",
    "DsMakePasswordCredentialsW",
    "DsGetBindInstGuid",
    "DsIsMangledDnW",
    "DsCrackUnquotedMangledRdnA",
    "DsQuoteRdnValueW",
    "DsBindWithSpnExWWorker",
    "DsaopPrepareScript",
    "DsListServersInSiteA",
    "DsaopBindWithSpn",
    "DsReplicaAddW",
    "DsIsMangledRdnValueA",
    "DsRemoveDsDomainA",
    "DsMakeSpnW",
    "DsClientMakeSpnForTargetServerA",
    "DsIsMangledRdnValueW",
    "DsServerRegisterSpnW",
    "DsReplicaAddA",
    "DsReplicaGetInfoW",
    "DsAddSidHistoryA",
    "DsaopExecuteScript",
    "DsReplicaVerifyObjectsW",
    "DsInheritSecurityIdentityA",
    "DsCrackNamesA",
    "DsReplicaGetInfo2W",
    "DsWriteAccountSpnW",
    "DsBindToISTGW",
    "DsReplicaSyncA",
    "DsFreePasswordCredentials",
    "DsQuerySitesFree",
    "DsReplicaFreeInfo",
    "DsCrackUnquotedMangledRdnW",
    "DsUnBindWWorker",
    "DsListInfoForServerW",
    "DsServerRegisterSpnA",
    "DsClientMakeSpnForTargetServerW",
    "DsCrackSpnA"
  ],
  "ntlanman.dll": [
    "NPAddConnection3",
    "NPEnumResource",
    "NPGetUser",
    "NPGetConnection",
    "NPOpenEnum",
    "I_SystemFocusDialog",
    "DllMain",
    "NPGetCaps",
    "NPGetResourceInformation",
    "NPGetUniversalName",
    "NPGetResourceParent",
    "NPGetConnectionPerformance",
    "NPCancelConnection",
    "NPAddConnection",
    "NPCloseEnum",
    "NPGetConnection3",
    "NPGetReconnectFlags",
    "RegisterAppInstance",
    "NPFormatNetworkName"
  ],
  "ntlanui2.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "ntmarta.dll": [
    "AccGetExplicitEntries",
    "AccConvertAccessToSD",
    "AccProvRevokeAuditRights",
    "AccConvertAclToAccess",
    "AccProvGetAllRights",
    "AccRewriteGetExplicitEntriesFromAcl",
    "AccProvHandleGetAccessInfoPerObjectType",
    "AccProvHandleGrantAccessRights",
    "AccSetEntriesInAList",
    "AccGetInheritanceSource",
    "EventGuidToName",
    "AccRewriteGetHandleRights",
    "AccProvHandleIsAccessAudited",
    "AccLookupAccountSid",
    "AccProvIsObjectAccessible",
    "AccProvGetOperationResults",
    "AccConvertAccessMaskToActrlAccess",
    "AccProvHandleGetTrusteesAccess",
    "AccProvHandleRevokeAccessRights",
    "AccProvRevokeAccessRights",
    "AccRewriteSetNamedRights",
    "AccProvHandleSetAccessRights",
    "AccProvHandleRevokeAuditRights",
    "AccProvGetAccessInfoPerObjectType",
    "EventNameFree",
    "AccLookupAccountTrustee",
    "AccConvertSDToAccess",
    "AccFreeIndexArray",
    "AccGetAccessForTrustee",
    "AccProvGetCapabilities",
    "AccRewriteGetNamedRights",
    "AccRewriteSetEntriesInAcl",
    "AccRewriteSetHandleRights",
    "AccTreeResetNamedSecurityInfo",
    "AccProvHandleGetAllRights",
    "AccProvGrantAccessRights",
    "AccProvGetTrusteesAccess",
    "AccProvCancelOperation",
    "AccProvHandleIsObjectAccessible",
    "GetMartaExtensionInterface",
    "AccProvIsAccessAudited",
    "AccProvSetAccessRights",
    "AccLookupAccountName",
    "AccConvertAccessToSecurityDescriptor"
  ],
  "ntprint.dll": [
    "PSetupCreatePrinterDeviceInfoList",
    "PSetupDriverInfoFromDeviceID",
    "PSetupBuildDriversFromPath",
    "PSetupCreateMonitorInfo",
    "PSetupDestroyPrinterDeviceInfoList",
    "PSetupElevateAndCallDriverStoreAddDriverPackage",
    "PSetupGetPathToSearch",
    "PSetupDriverStoreFindDriverPackageW",
    "PSetupThisPlatform",
    "PSetupGetCatalogNameFromInfW",
    "PSetupIsCompatibleDriver",
    "PSetupDisassociateICMProfiles",
    "PSetupFindCompatibleDriverFromName",
    "PSetupDriverStoreAddDriverPackage",
    "PSetupElevatedInstallDownloadedLegacyDriverW",
    "PSetupParseInfAndCommitFileQueue",
    "PSetupInstallICMProfiles",
    "PSetupDestroySelectedDriverInfo",
    "PSetupGetSelectedDriverInfo",
    "PSetupIsTheDriverFoundInInfInstalled",
    "PSetupGetDriverInfo3",
    "PSetupCreateDrvSetupPage",
    "PSetupFreeMem",
    "PSetupSetSelectDevTitleAndInstructions",
    "PSetupElevatedLegacyPrintDriverInstallW",
    "PSetupShowBlockedDriverUI",
    "PSetupDestroyDriverInfo3",
    "PSetupEnumMonitor",
    "PSetupGetInfDriverStoreLocation",
    "PSetupCopyDriverPackageFiles",
    "PSetupInstallMonitor",
    "PSetupGetLocalDataField",
    "PSetupSetNonInteractiveMode",
    "PSetupInstallInboxDriverSilently",
    "PSetupAssociateICMProfiles",
    "PSetupCheckForDriversInDriverStore",
    "PSetupBuildDriverList",
    "PSetupElevatedInstallPrinterDriverFromTheWebW",
    "PSetupDriverInfoFromName",
    "PSetupSelectDriver",
    "PSetupFreeDrvField",
    "PSetupDestroyMonitorInfo",
    "PSetupIsDriverInstalled",
    "PSetupSelectDeviceButtons",
    "PSetupGetActualInstallSection",
    "ServerInstallW",
    "PSetupElevatedDriverStoreAddDriverPackageW",
    "PSetupWebPnpGenerateDownLevelInfForInboxDriver",
    "ClassInstall32",
    "PSetupProcessPrinterAdded",
    "PSetupInstallPrinterDriver",
    "PSetupPreSelectDriver",
    "PSetupSetDriverPlatform",
    "PSetupDownloadAndInstallLegacyDriverW",
    "PSetupSetCoreInboxDriverPath"
  ],
  "ntshrui.dll": [
    "GetLocalPathFromNetResource",
    "IsPathSharedA",
    "GetLocalPathFromNetResourceW",
    "GetNetResourceFromLocalPathA",
    "CanShareFolder",
    "IsFolderPrivateForUser",
    "GetNetResourceFromLocalPathW",
    "SetFolderPermissionsForSharing",
    "IsPathShared",
    "IsPathSharedW",
    "DllCanUnloadNow",
    "GetLocalPathFromNetResourceA",
    "DllGetClassObject",
    "ShowShareFolderUI",
    "GetNetResourceFromLocalPath"
  ],
  "ntvdmcpl.dll": [
    "SetDPDExport",
    "CPlApplet"
  ],
  "ntvdmd.dll": [
    "xxxDbgBPInt",
    "xxxDbgNotifyDebugged",
    "xxxDbgDispatch",
    "xxxDbgTraceEvent",
    "xxxDbgIsDebuggee",
    "xxxDbgFault",
    "xxxDbgLoad",
    "xxxDbgDosAppStart",
    "xxxDbgInit",
    "xxxDbgNotifyRemoteThreadAddress",
    "xxxDbgNotifyNewTask",
    "xxxDbgTraceInt",
    "xxxDbgSegmentNotice"
  ],
  "OEMLicense.dll": [
    "AddDemoAppLicense",
    "HrAddAppxLicense",
    "HrRemoveAppxLicense",
    "RemoveDemoAppLicense"
  ],
  "OobeFldr.dll": [
    "ShowWelcomeCenter"
  ],
  "OpcServices.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "OskSupport.dll": [
    "UninitializeOSKSupport",
    "InitializeOSKSupport"
  ],
  "objsel.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "occache.dll": [
    "RemoveControlByName",
    "SweepControlsByLastAccessDate",
    "GetControlDependentFile",
    "RemoveControlByHandle",
    "ReleaseControlHandle",
    "RemoveControlByName2",
    "IsModuleRemovable",
    "FindFirstControlArch",
    "GetControlInfo",
    "RemoveControlByHandle2",
    "FindControlClose",
    "FindNextControlArch",
    "FindNextControl",
    "RemoveExpiredControls",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "FindFirstControl"
  ],
  "ocsetapi.dll": [
    "RemoveMspFilesFromSystemMsiCache",
    "CopyMspFilesToSystemMsiCache"
  ],
  "odbc32.dll": [
    "SQLConnect",
    "SQLSetStmtAttrW",
    "LockHandle",
    "SQLCompleteAsync",
    "SQLColumns",
    "SQLBrowseConnectA",
    "SQLGetData",
    "SQLParamOptions",
    "SQLAllocEnv",
    "ODBCInternalConnectW",
    "SQLDriverConnectA",
    "SQLColumnPrivilegesA",
    "SQLGetConnectAttrW",
    "SQLMoreResults",
    "SQLStatisticsW",
    "SQLSetCursorName",
    "SQLPrimaryKeysA",
    "SQLEndTran",
    "SQLDataSourcesW",
    "SearchStatusCode",
    "SQLTransact",
    "SQLBindCol",
    "SQLGetEnvAttr",
    "SQLNumParams",
    "SQLGetInfo",
    "SQLNumResultCols",
    "PostODBCComponentError",
    "GetODBCSharedData",
    "SQLGetDescField",
    "SQLSpecialColumnsW",
    "PostComponentError",
    "SQLAllocHandleStd",
    "SQLGetConnectAttr",
    "SQLColAttribute",
    "SQLColAttributesA",
    "SQLSetDescFieldW",
    "SQLGetDescFieldA",
    "SQLStatisticsA",
    "SQLPrepareA",
    "SQLNativeSqlW",
    "ODBCQualifyFileDSNW",
    "SQLDriversW",
    "SQLGetDiagFieldW",
    "SQLDataSourcesA",
    "SQLBindParam",
    "SQLColAttributeA",
    "SQLTablePrivilegesW",
    "SQLForeignKeysW",
    "SQLRowCount",
    "SQLGetStmtAttrA",
    "SQLFreeStmt",
    "SQLGetCursorNameA",
    "SQLTablesA",
    "SQLPutData",
    "SQLExtendedFetch",
    "SQLAllocStmt",
    "SQLDescribeParam",
    "SQLErrorW",
    "g_hHeapMalloc",
    "SQLCloseCursor",
    "SQLDriversA",
    "ODBCSetTryWaitValue",
    "SQLNativeSqlA",
    "SQLSetDescFieldA",
    "SQLGetDescFieldW",
    "SQLSetStmtAttr",
    "SQLFreeEnv",
    "SQLConnectW",
    "SQLDriverConnect",
    "SQLGetCursorNameW",
    "SQLTablesW",
    "SQLParamData",
    "CursorLibLockDbc",
    "SQLProcedureColumnsW",
    "SQLGetDescRecA",
    "SQLColAttributeW",
    "SQLGetCursorName",
    "SQLFreeConnect",
    "SQLNativeSql",
    "SQLSetConnectOptionA",
    "SQLSetDescRec",
    "SQLAllocHandle",
    "SQLTables",
    "SQLFetch",
    "SQLGetFunctions",
    "SQLExecDirect",
    "SQLDataSources",
    "SQLConnectA",
    "SQLErrorA",
    "SQLSpecialColumns",
    "SQLGetDescRecW",
    "SQLBrowseConnectW",
    "SQLGetConnectOptionW",
    "SQLExecute",
    "SQLCancel",
    "SQLExecDirectW",
    "SQLGetDiagRec",
    "VFreeErrors",
    "CursorLibTransact",
    "SQLGetDiagRecA",
    "SQLTablePrivilegesA",
    "SQLBrowseConnect",
    "SQLSetConnectAttrW",
    "SQLSetStmtOption",
    "SQLSetCursorNameA",
    "SQLBulkOperations",
    "VRetrieveDriverErrorsRowCol",
    "SQLGetTypeInfoA",
    "SQLDescribeCol",
    "SQLError",
    "SQLPrepare",
    "SQLTablePrivileges",
    "SQLGetStmtAttrW",
    "SQLBindParameter",
    "SQLGetTypeInfoW",
    "SQLForeignKeysA",
    "SQLPrimaryKeys",
    "SQLPrimaryKeysW",
    "OpenODBCPerfData",
    "SQLGetInfoW",
    "SQLProceduresA",
    "SQLCancelHandle",
    "SQLColumnPrivilegesW",
    "ValidateErrorQueue",
    "SQLSetConnectOptionW",
    "SQLSetEnvAttr",
    "SQLGetStmtOption",
    "DllBidEntryPoint",
    "SQLProcedureColumnsA",
    "CursorLibLockStmt",
    "SQLSpecialColumnsA",
    "SQLGetTypeInfo",
    "SQLGetConnectOption",
    "CollectODBCPerfData",
    "SQLSetScrollOptions",
    "SQLColumnsA",
    "SQLGetDiagFieldA",
    "SQLSetConnectOption",
    "SQLGetDiagField",
    "SQLGetDescRec",
    "SQLColumnsW",
    "SQLSetConnectAttr",
    "SQLSetParam",
    "ODBCGetTryWaitValue",
    "SQLSetCursorNameW",
    "SQLGetConnectOptionA",
    "SQLDisconnect",
    "SQLProcedureColumns",
    "SQLProcedures",
    "SQLDriverConnectW",
    "SQLSetDescField",
    "SQLSetPos",
    "SQLStatistics",
    "SQLSetStmtAttrA",
    "SQLSetConnectAttrA",
    "SQLAllocConnect",
    "CursorLibLockDesc",
    "SQLExecDirectA",
    "SQLProceduresW",
    "SQLFreeHandle",
    "SQLDrivers",
    "SQLColAttributesW",
    "CloseODBCPerfData",
    "SQLDescribeColW",
    "SQLDescribeColA",
    "SQLGetInfoA",
    "PostODBCError",
    "SQLForeignKeys",
    "SQLGetDiagRecW",
    "SQLGetConnectAttrA",
    "SQLColAttributes",
    "SQLPrepareW",
    "SQLColumnPrivileges",
    "SQLFetchScroll",
    "SQLCopyDesc",
    "SQLGetStmtAttr"
  ],
  "odbc32gt.dll": [
    "Dispatch",
    "Dispatch2"
  ],
  "odbcbcp.dll": [
    "dbprtypeA",
    "bcp_columns",
    "LibMain",
    "bcp_colptr",
    "dbprtypeW",
    "bcp_getcolfmt",
    "bcp_readfmtA",
    "bcp_control",
    "SQLLinkedCatalogsA",
    "bcp_collen",
    "SQLLinkedServers",
    "bcp_bind",
    "bcp_moretext",
    "SQLInitEnumServers",
    "bcp_readfmtW",
    "bcp_setcolfmt",
    "bcp_writefmtW",
    "bcp_colfmt",
    "bcp_done",
    "SQLCloseEnumServers",
    "SQLGetNextEnumeration",
    "bcp_batch",
    "bcp_sendrow",
    "SQLLinkedCatalogsW",
    "bcp_initA",
    "bcp_initW",
    "bcp_exec",
    "bcp_writefmtA"
  ],
  "odbcconf.dll": [
    "AppRegEnum",
    "DllRegisterServer",
    "DllUnregisterServer",
    "ExecuteAction",
    "QueryApplication",
    "DllCanUnloadNow",
    "SetActionLogMode",
    "RunDLL32_RegisterApplication",
    "RunDLL32_UnregisterApplication",
    "SetSilent",
    "RefreshAppRegEnum",
    "OpenAppRegEnum",
    "SetActionEnum",
    "CloseAppRegEnum",
    "SetActionLogModeSz",
    "SetActionName",
    "RegisterApplication",
    "DllGetClassObject",
    "UnregisterApplication",
    "SetActionLogFile"
  ],
  "odbccp32.dll": [
    "SQLWritePrivateProfileString",
    "SQLPostInstallerError",
    "SQLInstallODBCW",
    "SQLLoadDataSourcesListBox",
    "SQLWritePrivateProfileStringW",
    "SQLGetTranslator",
    "SQLInstallDriverW",
    "SQLInstallDriverManagerW",
    "SQLInstallDriverExW",
    "SQLReadFileDSN",
    "SQLInstallODBC",
    "SQLManageDataSources",
    "SQLGetInstalledDriversW",
    "SQLSetConfigMode",
    "SelectTransDlg",
    "SQLInstallTranslatorExW",
    "SQLGetAvailableDriversW",
    "SQLConfigDriverW",
    "SQLGetTranslatorW",
    "SQLConfigDriver",
    "SQLInstallDriverEx",
    "SQLInstallDriverManager",
    "SQLInstallTranslatorW",
    "SQLLoadDriverListBox",
    "SQLPostInstallerErrorW",
    "SQLRemoveDefaultDataSource",
    "SQLInstallTranslator",
    "SQLInstallerError",
    "SQLWriteDSNToIni",
    "SQLInstallDriver",
    "SQLReadFileDSNW",
    "SQLRemoveTranslator",
    "SQLValidDSNW",
    "SQLCreateDataSourceExW",
    "SQLRemoveDSNFromIniW",
    "SQLRemoveDriverManager",
    "SQLRemoveDriver",
    "SQLRemoveDSNFromIni",
    "SQLConfigDataSource",
    "SQLGetInstalledDrivers",
    "SQLCreateDataSourceEx",
    "SQLRemoveDriverW",
    "SQLGetPrivateProfileString",
    "SQLValidDSN",
    "SQLGetAvailableDrivers",
    "ODBCCPlApplet",
    "SQLRemoveTranslatorW",
    "SQLInstallerErrorW",
    "SQLWriteDSNToIniW",
    "SQLWriteFileDSN",
    "SQLGetPrivateProfileStringW",
    "SQLConfigDataSourceW",
    "SQLWriteFileDSNW",
    "SQLInstallTranslatorEx",
    "SQLCreateDataSourceW",
    "SQLCreateDataSource",
    "SQLGetConfigMode"
  ],
  "odbccr32.dll": [
    "SQLExecDirect",
    "SQLGetDescRec",
    "SQLSetConnectAttr",
    "SQLExecute",
    "SQLCancel",
    "SQLRowCount",
    "SQLGetData",
    "SQLFreeStmt",
    "SQLSetDescField",
    "SQLSetPos",
    "SQLPutData",
    "SQLExtendedFetch",
    "SQLParamOptions",
    "SQLSetStmtOption",
    "SQLBulkOperations",
    "SQLCloseCursor",
    "SQLPrepare",
    "SQLMoreResults",
    "SQLBindParameter",
    "SQLSetStmtAttr",
    "SQLEndTran",
    "SQLFreeHandle",
    "SQLTransact",
    "SQLBindCol",
    "SQLParamData",
    "ReleaseCLStmtResources",
    "SQLGetInfo",
    "SQLNumParams",
    "SQLGetStmtOption",
    "SQLGetDescField",
    "SQLNativeSql",
    "SQLSetScrollOptions",
    "SQLSetDescRec",
    "SQLFetchScroll",
    "SQLSetConnectOption",
    "SQLGetStmtAttr",
    "SQLFetch"
  ],
  "odbccu32.dll": [
    "SQLExecDirect",
    "SQLGetDescRec",
    "SQLSetConnectAttr",
    "SQLExecute",
    "SQLCancel",
    "SQLRowCount",
    "SQLGetData",
    "SQLFreeStmt",
    "SQLSetDescField",
    "SQLSetPos",
    "SQLPutData",
    "SQLExtendedFetch",
    "SQLParamOptions",
    "SQLSetStmtOption",
    "SQLBulkOperations",
    "SQLCloseCursor",
    "SQLPrepare",
    "SQLMoreResults",
    "SQLBindParameter",
    "SQLSetStmtAttr",
    "SQLEndTran",
    "SQLFreeHandle",
    "SQLTransact",
    "SQLBindCol",
    "SQLParamData",
    "ReleaseCLStmtResources",
    "SQLGetInfo",
    "SQLNumParams",
    "SQLGetStmtOption",
    "SQLGetDescField",
    "SQLNativeSql",
    "SQLSetScrollOptions",
    "SQLSetDescRec",
    "SQLFetchScroll",
    "SQLSetConnectOption",
    "SQLGetStmtAttr",
    "SQLFetch"
  ],
  "odbcint.dll": "No exports",
  "odbcji32.dll": [
    "DllMain",
    "IntlLibHinst"
  ],
  "odbcjt32.dll": [
    "ConfigDSN",
    "SQLGetFunctions",
    "ConfigDialogProc",
    "ConfigDriverW",
    "SQLColumnsW",
    "SQLNativeSqlW",
    "LoadByOrdinal",
    "SQLSetStmtAttrW",
    "SQLCopyDesc",
    "SQLGetDescRecW",
    "SQLGetDiagFieldW",
    "SQLSetCursorNameW",
    "SQLExecute",
    "SQLCancel",
    "SQLExecDirectW",
    "SQLDisconnect",
    "SQLRowCount",
    "SQLDriverConnectW",
    "SQLGetData",
    "AdvancedDialogProc",
    "SQLFreeStmt",
    "SQLSetConnectAttrW",
    "SQLPutData",
    "SQLSetPos",
    "ConfigDSNExW",
    "SQLAllocStmt",
    "SQLAllocEnv",
    "SQLExtendedFetch",
    "DllMain",
    "SQLBulkOperations",
    "SQLCloseCursor",
    "InitDialogAgain",
    "DefTxtFmtDlgProc",
    "SQLAllocConnect",
    "SQLGetStmtAttrW",
    "RepairCompactProc",
    "SQLGetConnectAttrW",
    "SQLBindParameter",
    "InvisibleSelectDb",
    "SQLGetDescFieldW",
    "SQLMoreResults",
    "SQLStatisticsW",
    "SQLEndTran",
    "SQLProceduresW",
    "SQLFreeEnv",
    "SQLConnectW",
    "SQLGetTypeInfoW",
    "SQLFreeHandle",
    "SelectIndexDlgProc",
    "SelectUIdxDlgProc",
    "InitializeLoginDialog",
    "SQLGetCursorNameW",
    "SQLGetInfoW",
    "SQLTablesW",
    "SQLBindCol",
    "SQLParamData",
    "SQLNumParams",
    "SQLNumResultCols",
    "SQLSetEnvAttr",
    "SQLProcedureColumnsW",
    "SQLDescribeColW",
    "SQLSpecialColumnsW",
    "OpenDirHook",
    "SQLGetDiagRecW",
    "SQLColAttributeW",
    "SQLFreeConnect",
    "SQLPrepareW",
    "ConfigDSNW",
    "SQLSetScrollOptions",
    "SQLSetDescRec",
    "SQLAllocHandle",
    "SQLFetchScroll",
    "SQLSetDescFieldW",
    "LoginDialogProc",
    "SQLFetch"
  ],
  "odbctrac.dll": [
    "TraceSQLFreeHandle",
    "TraceOpenLogFile",
    "TraceSQLBindParam",
    "TraceSQLAllocConnect",
    "TraceSQLMoreResults",
    "TraceSQLSetScrollOptions",
    "TraceSQLSetPos",
    "TraceSQLSetStmtAttrW",
    "TraceSQLDriversW",
    "TraceSQLGetStmtAttr",
    "TraceSQLNativeSql",
    "TraceSQLDescribeCol",
    "TraceSQLDataSourcesW",
    "TraceVersion",
    "TraceSQLColumnsW",
    "TraceSQLGetConnectOption",
    "TraceSQLDriverConnect",
    "TraceVSControl",
    "TraceSQLGetDescRecW",
    "TraceSQLGetDiagRec",
    "TraceSQLGetDiagFieldW",
    "TraceSQLSetStmtOption",
    "TraceSQLForeignKeys",
    "TraceSQLPutData",
    "TraceSQLColumnPrivilegesW",
    "TraceSQLCancel",
    "TraceSQLFetch",
    "TraceSQLSetEnvAttr",
    "TraceSQLSetConnectOption",
    "TraceSQLAllocStmt",
    "TraceSQLErrorW",
    "TraceSQLGetStmtAttrW",
    "TraceSQLGetStmtOption",
    "TraceSQLProcedureColumnsW",
    "TraceSQLSetConnectOptionW",
    "TraceSQLPrimaryKeysW",
    "TraceSQLParamOptions",
    "TraceSQLGetConnectOptionW",
    "TraceReturn",
    "TraceSQLExecute",
    "TraceSQLRowCount",
    "TraceSQLCompleteAsyncW",
    "TraceSQLTablesW",
    "TraceSQLDescribeParam",
    "TraceSQLCopyDesc",
    "TraceSQLProcedures",
    "TraceSQLSetStmtAttr",
    "TraceSQLCancelHandle",
    "TraceSQLSetDescField",
    "TraceSQLGetInfoW",
    "TraceSQLGetCursorNameW",
    "TraceSQLColAttributeW",
    "TraceSQLAllocHandle",
    "TraceSQLBrowseConnectW",
    "TraceSQLExtendedFetch",
    "TraceSQLAllocHandleStd",
    "TraceSQLColumns",
    "TraceSQLDescribeColW",
    "TraceSQLGetTypeInfoW",
    "TraceSQLStatistics",
    "TraceSQLBindParameter",
    "TraceSQLColumnPrivileges",
    "TraceSQLGetConnectAttrW",
    "TraceSQLPrimaryKeys",
    "TraceSQLNumResultCols",
    "TraceSQLSetCursorNameW",
    "TraceSQLParamData",
    "TraceSQLGetConnectAttr",
    "TraceSQLColAttributesW",
    "TraceSQLDriverConnectW",
    "TraceSQLFreeEnv",
    "TraceSQLPrepare",
    "TraceSQLPrepareW",
    "TraceSQLGetDiagField",
    "TraceSQLExecDirect",
    "TraceSQLFetchScroll",
    "TraceSQLError",
    "TraceSQLEndTran",
    "TraceSQLAllocEnv",
    "TraceSQLFreeConnect",
    "TraceSQLSpecialColumnsW",
    "TraceSQLDataSources",
    "TraceSQLConnect",
    "TraceSQLForeignKeysW",
    "TraceSQLNumParams",
    "TraceSQLColAttributes",
    "TraceSQLGetDiagRecW",
    "TraceSQLTables",
    "TraceSQLBrowseConnect",
    "TraceSQLCompleteAsync",
    "TraceSQLSpecialColumns",
    "TraceSQLAllocHandleStdW",
    "TraceSQLBindCol",
    "TraceSQLGetTypeInfo",
    "TraceSQLNativeSqlW",
    "TraceSQLSetCursorName",
    "TraceSQLSetDescFieldW",
    "TraceSQLColAttribute",
    "TraceSQLGetDescField",
    "TraceSQLProcedureColumns",
    "TraceSQLFreeStmt",
    "TraceSQLDisconnect",
    "TraceSQLDrivers",
    "TraceSQLSetConnectAttr",
    "TraceSQLSetDescRec",
    "TraceSQLSetParam",
    "TraceSQLTablePrivilegesW",
    "TraceSQLGetInfo",
    "TraceSQLGetCursorName",
    "TraceSQLConnectW",
    "TraceSQLGetEnvAttr",
    "TraceSQLSetConnectAttrW",
    "TraceSQLTablePrivileges",
    "TraceSQLGetData",
    "TraceSQLGetFunctions",
    "TraceSQLGetDescFieldW",
    "TraceSQLStatisticsW",
    "TraceSQLBulkOperations",
    "TraceSQLGetDescRec",
    "TraceSQLTransact",
    "TraceSQLCloseCursor",
    "TraceSQLExecDirectW",
    "TraceSQLProceduresW",
    "TraceCloseLogFile"
  ],
  "oddbse32.dll": [
    "ConfigDSNW"
  ],
  "odexl32.dll": [
    "ConfigDSNW"
  ],
  "odfox32.dll": [
    "ConfigDSNW"
  ],
  "odpdx32.dll": [
    "ConfigDSNW"
  ],
  "odtext32.dll": [
    "ConfigDSNW"
  ],
  "offfilt.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "ogldrv.dll": [
    "DrvValidateVersion",
    "DrvCopyContext",
    "DrvDescribePixelFormat",
    "DrvDeleteContext",
    "DrvRealizeLayerPalette",
    "DrvGetProcAddress",
    "DrvCreateLayerContext",
    "DrvCreateContext",
    "DrvSetContext",
    "DrvSetLayerPaletteEntries",
    "DrvDescribeLayerPlane",
    "DrvShareLists",
    "DrvSwapLayerBuffers",
    "DrvSwapBuffers",
    "DrvReleaseContext",
    "DrvSetPixelFormat",
    "DrvGetLayerPaletteEntries"
  ],
  "ole32.dll": [
    "NdrProxyForwardingFunction9",
    "OleGetAutoConvert",
    "CoFreeUnusedLibrariesEx",
    "HACCEL_UserSize",
    "HMETAFILE_UserMarshal",
    "CoSuspendClassObjects",
    "OleInitialize",
    "ComPs_NdrDllRegisterProxy",
    "ObjectStublessClient19",
    "CreateBindCtx",
    "StgCreatePropSetStg",
    "CoSetState",
    "CoGetCallerTID",
    "HRGN_UserMarshal",
    "NdrProxyForwardingFunction29",
    "STGMEDIUM_UserSizeExt",
    "DoDragDrop",
    "CoGetCancelObject",
    "CoEnableCallCancellation",
    "CoAddRefServerProcess",
    "OleCreateMenuDescriptor",
    "CLIPFORMAT_UserSizeExt",
    "CoCreateGuid",
    "DllGetClassObjectWOW",
    "StgCreateDocfile",
    "OleRun",
    "OleCreateFromData",
    "GetHGlobalFromILockBytes",
    "ReleaseStgMedium",
    "OleConvertOLESTREAMToIStorage",
    "StringFromCLSID",
    "ReadFmtUserTypeStg",
    "HENHMETAFILE_UserSize",
    "UpdateProcessTracing",
    "NdrProxyForwardingFunction11",
    "PropStgNameToFmtId",
    "CoVrfGetThreadState",
    "HGLOBAL_UserMarshal",
    "PropVariantChangeType",
    "CoGetClassVersion",
    "CoRegisterSurrogateEx",
    "CoRevokeInitializeSpy",
    "HRGN_UserUnmarshal",
    "HMENU_UserSize",
    "HMETAFILE_UserFree",
    "CoAicGetTokenForCOM",
    "NdrProxyForwardingFunction20",
    "ObjectStublessClient11",
    "DragDropSetFDT",
    "OleCreateLinkToFile",
    "CoQueryProxyBlanket",
    "HDC_UserUnmarshal",
    "CoSetProxyBlanket",
    "CreateStreamOnHGlobal",
    "GetObjectFromRotByPath",
    "CoRegisterMallocSpy",
    "CoRegisterClassObject",
    "NdrProxyForwardingFunction16",
    "CoTestCancel",
    "OleIsRunning",
    "CoGetApartmentType",
    "STGMEDIUM_UserUnmarshalExt",
    "GetRunningObjectTable",
    "WriteClassStm",
    "UtConvertDvtd32toDvtd16",
    "HPALETTE_UserFreeExt",
    "CoGetCallState",
    "CoRegisterMessageFilter",
    "ProgIDFromCLSID",
    "HWND_UserSizeExt",
    "HICON_UserUnmarshal",
    "HWND_UserMarshal",
    "STGMEDIUM_UserSize",
    "CoCreateInstanceEx",
    "OleConvertIStorageToOLESTREAM",
    "CoReleaseServerProcess",
    "HWND_UserUnmarshal",
    "ReadClassStm",
    "NdrProxyForwardingFunction26",
    "HMETAFILE_UserUnmarshal",
    "CoGetPSClsid",
    "DllRegisterServer",
    "HBITMAP_UserMarshal",
    "NdrProxyForwardingFunction27",
    "HBITMAP_UserFree",
    "OleCreateFromDataEx",
    "CreateDataAdviseHolder",
    "OleSetClipboard",
    "CoGetStandardMarshal",
    "HMETAFILEPICT_UserSize",
    "NdrProxyForwardingFunction31",
    "OleReleaseEnumVerbCache",
    "CheckInitDde",
    "OleCreateEmbeddingHelper",
    "StgGetIFillLockBytesOnFile",
    "OleCreateLinkFromDataEx",
    "CoGetModuleType",
    "CLSIDFromOle1Class",
    "ObjectStublessClient5",
    "CreateGenericComposite",
    "HRGN_UserFree",
    "CoGetClassObject",
    "IsValidPtrOut",
    "HGLOBAL_UserFree",
    "PropVariantCopy",
    "ClipboardProcessUninitialize",
    "DestroyRunningObjectTable",
    "CleanROTForApartment",
    "StgCreatePropStg",
    "RegisterActiveObjectExt",
    "CoRegisterChannelHook",
    "NdrProxyForwardingFunction23",
    "CoTaskMemRealloc",
    "OleGetClipboard",
    "HPALETTE_UserSize",
    "HPALETTE_UserUnmarshal",
    "OleMetafilePictFromIconAndLabel",
    "IsValidInterface",
    "CoRegisterInitializeSpy",
    "CoRegisterSurrogate",
    "ObjectStublessClient3",
    "OleCreateLinkFromData",
    "HRGN_UserSize",
    "CoDecodeProxy",
    "CoHandlePriorityEventsFromMessagePump",
    "CoCreateInstance",
    "WdtpInterfacePointer_UserSize",
    "ObjectStublessClient26",
    "CoGetSystemSecurityPermissions",
    "RevokeDragDrop",
    "CoRevokeMallocSpy",
    "OleSetAutoConvert",
    "OleSaveToStream",
    "StgPropertyLengthAsVariant",
    "HPALETTE_UserSizeExt",
    "ObjectStublessClient27",
    "CoInitializeEx",
    "PropVariantClear",
    "CoInitializeWOW",
    "HkOleRegisterObject",
    "CoCreateFreeThreadedMarshaler",
    "CoRevertToSelf",
    "OleQueryCreateFromData",
    "OleUninitialize",
    "STGMEDIUM_UserFree",
    "OleCreateFontIndirectExt",
    "OleCreateLink",
    "HDC_UserMarshal",
    "GetClassFile",
    "CoUninitialize",
    "GetErrorInfo",
    "HMETAFILEPICT_UserFree",
    "CoCreateInstanceFromApp",
    "GetActiveObjectExt",
    "OleSavePictureFileExt",
    "CoGetCurrentLogicalThreadId",
    "CreateILockBytesOnHGlobal",
    "HACCEL_UserMarshal",
    "SetOleautModule",
    "StgOpenPropStg",
    "CoGetSystemWow64DirectoryW",
    "CoSetMessageDispatcher",
    "UtGetDvtd16Info",
    "DeletePatternAndExtensionTables",
    "CreateOleAdviseHolder",
    "CLSIDFromString",
    "OleLockRunning",
    "ObjectStublessClient12",
    "ObjectStublessClient13",
    "NdrProxyForwardingFunction8",
    "ObjectStublessClient14",
    "OleDoAutoConvert",
    "NdrProxyForwardingFunction5",
    "CoGetCallContext",
    "GetHookInterface",
    "HACCEL_UserUnmarshal",
    "NdrProxyForwardingFunction25",
    "OleIsCurrentClipboard",
    "CreateClassMoniker",
    "MonikerRelativePathTo",
    "NdrProxyForwardingFunction14",
    "FreePropVariantArray",
    "NdrProxyForwardingFunction6",
    "FindExt",
    "CoTaskMemFree",
    "StgCreateStorageEx",
    "OleIconToCursorExt",
    "CoFreeAllLibraries",
    "CoUnloadingWOW",
    "CoGetCurrentProcess",
    "HICON_UserFree",
    "OpenOrCreateStream",
    "CreatePointerMoniker",
    "HBRUSH_UserSize",
    "ObjectStublessClient15",
    "CoFileTimeToDosDateTime",
    "CoIncrementMTAUsage",
    "CoInstall",
    "CreateStdProgressIndicator",
    "CreateErrorInfo",
    "WdtpInterfacePointer_UserMarshal",
    "WdtpInterfacePointer_UserFree",
    "CoLockObjectExternal",
    "IsAccelerator",
    "CLIPFORMAT_UserMarshal",
    "OleTranslateColorExt",
    "OleInitializeWOW",
    "OleRegGetUserType",
    "ReadStringStream",
    "OleFlushClipboard",
    "OleGetIconOfFile",
    "HMONITOR_UserFree",
    "StgOpenStorageEx",
    "GetDocumentBitStg",
    "OleLoadPictureExt",
    "FmtIdToPropStgName",
    "CoCopyProxy",
    "IsValidIid",
    "ReadClassStg",
    "MonikerCommonPrefixWith",
    "CLSIDFromProgID",
    "CoFileTimeNow",
    "NdrProxyForwardingFunction32",
    "HMENU_UserMarshal",
    "ObjectStublessClient21",
    "ReadStorageProperties",
    "ObjectStublessClient8",
    "SetDocumentBitStg",
    "ObjectStublessClient30",
    "HGLOBAL_UserUnmarshal",
    "CoInitializeSecurity",
    "NdrProxyForwardingFunction3",
    "CoUnmarshalInterface",
    "STGMEDIUM_UserFreeExt",
    "CoGetInstanceFromIStorage",
    "PropSysAllocString",
    "CoIsHandlerConnected",
    "HBRUSH_UserFree",
    "HBITMAP_UserSize",
    "CoWaitForMultipleObjects",
    "HBRUSH_UserMarshal",
    "ObjectStublessClient7",
    "OleBuildVersion",
    "HENHMETAFILE_UserUnmarshal",
    "NdrProxyForwardingFunction13",
    "CoResumeClassObjects",
    "OleGetIconOfClass",
    "OleSetContainedObject",
    "CoRetireServer",
    "HPALETTE_UserUnmarshalExt",
    "HMONITOR_UserMarshal",
    "OleCreatePropertyFrameIndirectExt",
    "ReadOleStg",
    "IsEqualGUID",
    "OleSetMenuDescriptor",
    "HMETAFILE_UserSize",
    "CoIsOle1Class",
    "CoGetStdMarshalEx",
    "CLIPFORMAT_UserFree",
    "CoLoadLibrary",
    "NdrProxyForwardingFunction18",
    "StgIsStorageFile",
    "CLIPFORMAT_UserFreeExt",
    "CoGetObject",
    "ObjectStublessClient31",
    "OleCreateFromFileEx",
    "CoDisconnectObject",
    "CoDosDateTimeToFileTime",
    "StgGetIFillLockBytesOnILockBytes",
    "CoGetActivationState",
    "CoCancelCall",
    "OleCreateLinkEx",
    "ObjectStublessClient9",
    "OleCreateDefaultHandler",
    "CoPushServiceDomain",
    "OleNoteObjectVisible",
    "CoDisconnectContext",
    "CoImpersonateClient",
    "OleSave",
    "CreateDataCache",
    "MonikerLoadTypeLib",
    "NdrProxyForwardingFunction28",
    "CoGetMarshalSizeMax",
    "OleLoad",
    "STGMEDIUM_UserUnmarshal",
    "NdrProxyForwardingFunction24",
    "ObjectStublessClient20",
    "StringFromIID",
    "CoGetDefaultContext",
    "CoCreateObjectInContext",
    "HACCEL_UserFree",
    "OleLoadFromStream",
    "NdrProxyForwardingFunction7",
    "ObjectStublessClient22",
    "CoDeactivateObject",
    "HMENU_UserUnmarshal",
    "CoFreeUnusedLibraries",
    "CoRegisterPSClsid",
    "StdTypesRegisterServer",
    "HPALETTE_UserFree",
    "StgOpenStorageOnHandle",
    "CoReleaseMarshalData",
    "CoGetMalloc",
    "CoQueryAuthenticationServices",
    "CoInvalidateRemoteMachineBindings",
    "OleCreateEx",
    "OleRegEnumFormatEtc",
    "UpdateDCOMSettings",
    "CoVrfCheckThreadState",
    "WriteFmtUserTypeStg",
    "OleDuplicateData",
    "HWND_UserMarshalExt",
    "CoGetProcessIdentifier",
    "HMETAFILEPICT_UserUnmarshal",
    "ObjectStublessClient23",
    "CoMarshalInterThreadInterfaceInStream",
    "RegisterDragDrop",
    "ComPs_NdrDllUnregisterProxy",
    "WriteOleStg",
    "HPALETTE_UserMarshal",
    "HDC_UserFree",
    "OleConvertOLESTREAMToIStorageEx",
    "CoGetInterfaceAndReleaseStream",
    "OleDraw",
    "ObjectStublessClient4",
    "HMETAFILEPICT_UserMarshal",
    "NdrProxyForwardingFunction4",
    "CreateFileMoniker",
    "ObjectStublessClient32",
    "CoMarshalInterface",
    "CoGetInterceptorForOle32",
    "HBRUSH_UserUnmarshal",
    "HENHMETAFILE_UserMarshal",
    "HICON_UserSize",
    "CreateItemMoniker",
    "NdrProxyForwardingFunction30",
    "CoSetCancelObject",
    "CoDisableCallCancellation",
    "DllDebugObjectRPCHook",
    "CoSwitchCallContext",
    "CoGetContextToken",
    "HDC_UserSize",
    "OleCreateFromFile",
    "CLSIDFromProgIDEx",
    "ObjectStublessClient17",
    "RevokeActiveObjectExt",
    "StgConvertVariantToProperty",
    "CoPopServiceDomain",
    "DdeBindToObject",
    "StringFromGUID2",
    "CoReactivateObject",
    "CoWaitForMultipleHandles",
    "HMENU_UserFree",
    "NdrProxyForwardingFunction22",
    "OleCreatePictureIndirectExt",
    "StgSetTimes",
    "UtConvertDvtd16toDvtd32",
    "DllGetClassObject",
    "GetConvertStg",
    "CoGetInterceptorFromTypeInfo",
    "StdTypesGetClassObject",
    "HWND_UserSize",
    "OleCreateStaticFromData",
    "OleQueryLinkFromData",
    "CoGetObjectContext",
    "CoCheckElevationEnabled",
    "SetConvertStg",
    "ObjectStublessClient24",
    "ObjectStublessClient16",
    "CoDecrementMTAUsage",
    "IIDFromString",
    "SetWOWThunkGlobalPtr",
    "NdrProxyForwardingFunction12",
    "SNB_UserSize",
    "SetErrorInfo",
    "CoFreeLibrary",
    "ComPs_NdrDllCanUnloadNow",
    "ObjectStublessClient10",
    "OleRegGetMiscStatus",
    "HBITMAP_UserUnmarshal",
    "CoQueryClientBlanket",
    "OleCreateLinkToFileEx",
    "NdrProxyForwardingFunction19",
    "CoGetComCatalog",
    "StgOpenStorageOnILockBytes",
    "HMONITOR_UserSize",
    "StgOpenAsyncDocfileOnIFillLockBytes",
    "CoGetTreatAsClass",
    "ObjectStublessClient28",
    "CLIPFORMAT_UserUnmarshal",
    "OleRegEnumVerbs",
    "CoInitialize",
    "HPALETTE_UserMarshalExt",
    "StgCreateDocfileOnILockBytes",
    "PropSysFreeString",
    "CoRevokeClassObject",
    "STGMEDIUM_UserMarshalExt",
    "CoGetInstanceFromFile",
    "StgOpenStorage",
    "CoMarshalHresult",
    "CoTreatAsClass",
    "CLIPFORMAT_UserSize",
    "ComPs_NdrDllGetClassObject",
    "OleLoadPicturePathExt",
    "EnableHookObject",
    "ObjectStublessClient6",
    "STGMEDIUM_UserMarshal",
    "HICON_UserMarshal",
    "CoAllowSetForegroundWindow",
    "HMONITOR_UserUnmarshal",
    "ObjectStublessClient25",
    "NdrOleInitializeExtension",
    "CoQueryReleaseObject",
    "OleLoadPictureFileExt",
    "WdtpInterfacePointer_UserUnmarshal",
    "HENHMETAFILE_UserFree",
    "HGLOBAL_UserSize",
    "HWND_UserFreeExt",
    "OleCreate",
    "StgIsStorageILockBytes",
    "WriteClassStg",
    "GetHGlobalFromStream",
    "CreateAntiMoniker",
    "SNB_UserFree",
    "CoGetApartmentID",
    "CoVrfReleaseThreadState",
    "CLIPFORMAT_UserMarshalExt",
    "HWND_UserUnmarshalExt",
    "NdrProxyForwardingFunction15",
    "HWND_UserFree",
    "MkParseDisplayName",
    "CoTaskMemAlloc",
    "IsValidPtrIn",
    "CLIPFORMAT_UserUnmarshalExt",
    "Ole32DllGetClassObject",
    "SNB_UserMarshal",
    "ObjectStublessClient18",
    "CoBuildVersion",
    "CoGetInterceptor",
    "CoUnmarshalHresult",
    "BindMoniker",
    "NdrProxyForwardingFunction10",
    "UtGetDvtd32Info",
    "OleDestroyMenuDescriptor",
    "WriteStorageProperties",
    "CreateObjrefMoniker",
    "OleConvertIStorageToOLESTREAMEx",
    "StgConvertPropertyToVariant",
    "WriteStringStream",
    "ObjectStublessClient29",
    "DcomChannelSetHResult",
    "NdrProxyForwardingFunction17",
    "OleTranslateAccelerator",
    "SNB_UserUnmarshal",
    "NdrProxyForwardingFunction21"
  ],
  "oleacc.dll": [
    "GetOleaccVersionInfo",
    "GetProcessHandleFromHwnd",
    "CreateStdAccessibleProxyW",
    "DllRegisterServer",
    "IID_IAccessibleHandler",
    "GetStateTextA",
    "ObjectFromLresult",
    "CreateStdAccessibleProxyA",
    "DllUnregisterServer",
    "AccessibleObjectFromWindowTimeout",
    "DllCanUnloadNow",
    "CreateStdAccessibleObject",
    "AccessibleObjectFromEvent",
    "AccessibleObjectFromPoint",
    "GetRoleTextA",
    "IID_IAccessible",
    "LresultFromObject",
    "WindowFromAccessibleObject",
    "AccessibleObjectFromWindow",
    "DllGetClassObject",
    "AccSetRunningUtilityState",
    "AccessibleChildren",
    "GetRoleTextW",
    "GetStateTextW",
    "AccNotifyTouchInteraction",
    "LIBID_Accessibility",
    "PropMgrClient_LookupProp",
    "AccGetRunningUtilityState"
  ],
  "oleacchooks.dll": "No exports",
  "oleaccrc.dll": "No exports",
  "oleaut32.dll": [
    "DosDateTimeToVariantTime",
    "VarUI2FromUI1",
    "OleCreateFontIndirect",
    "VarI4FromBool",
    "VarI4FromR4",
    "VarUI2FromCy",
    "VarRound",
    "VarI8FromDate",
    "VariantInit",
    "VarCyFromUI8",
    "SetVarConversionLocaleSetting",
    "VarCyCmp",
    "LoadRegTypeLib",
    "VarI4FromI1",
    "VarUI8FromI2",
    "VariantClear",
    "GetAltMonthNames",
    "UnRegisterTypeLib",
    "VarUI1FromDec",
    "VariantChangeTypeEx",
    "SafeArrayDestroyDescriptor",
    "VarDecFromI4",
    "VarIdiv",
    "VarCyCmpR8",
    "SysReAllocString",
    "VarI2FromDec",
    "VarAbs",
    "VarBstrFromI1",
    "VarBoolFromUI2",
    "VarUI4FromR8",
    "LHashValOfNameSysA",
    "BSTR_UserFree",
    "ClearCustData",
    "VarDecFromStr",
    "VarDateFromStr",
    "SafeArrayUnlock",
    "QueryPathOfRegTypeLib",
    "VarDecFromUI8",
    "VarCyMulI4",
    "BSTR_UserMarshal",
    "VarR4CmpR8",
    "VarI8FromI2",
    "VarCyFromUI2",
    "VarI4FromUI1",
    "OleCreatePictureIndirect",
    "VarI8FromDisp",
    "VarUI8FromBool",
    "VarUI2FromDisp",
    "SafeArrayGetElemsize",
    "VarBoolFromDate",
    "OleCreatePropertyFrame",
    "SysReAllocStringLen",
    "VarInt",
    "VarR4FromI1",
    "VarBoolFromCy",
    "VarI1FromBool",
    "VarR8FromI4",
    "VarUI1FromBool",
    "VarNeg",
    "OaBuildVersion",
    "VarI2FromUI1",
    "SysAllocString",
    "VarI1FromI2",
    "HWND_UserMarshal",
    "VARIANT_UserSize",
    "VarAnd",
    "VARIANT_UserFree",
    "VarCyFromI1",
    "HWND_UserUnmarshal",
    "LoadTypeLib",
    "GetRecordInfoFromGuids",
    "VarBstrFromI4",
    "DllRegisterServer",
    "OleLoadPictureFile",
    "VarI1FromDisp",
    "VarI8FromBool",
    "VarR8FromI2",
    "LPSAFEARRAY_UserFree",
    "VarCyInt",
    "OleLoadPicturePath",
    "VarDecFromBool",
    "CreateDispTypeInfo",
    "VarUI4FromDec",
    "VarDateFromI8",
    "SysFreeString",
    "VarWeekdayName",
    "VarBstrFromDisp",
    "VarI8FromUI4",
    "VarDecFromDisp",
    "SafeArrayCreateVector",
    "VarMul",
    "VarUI8FromI8",
    "VarDateFromCy",
    "VarCyFromStr",
    "VarDateFromI2",
    "VarUI8FromI1",
    "VarUI4FromUI8",
    "VarI1FromUI1",
    "VarParseNumFromStr",
    "VarI2FromI4",
    "SafeArrayCopy",
    "VarI4FromUI8",
    "VarUI4FromI2",
    "VarI2FromDisp",
    "VarDecRound",
    "VarUI1FromI4",
    "CreateTypeLib",
    "VarUI2FromUI8",
    "VarBoolFromI1",
    "LPSAFEARRAY_UserSize",
    "VarDecDiv",
    "VarFormatFromTokens",
    "VarBstrFromUI8",
    "VarI8FromCy",
    "SafeArrayAllocData",
    "SafeArrayPtrOfIndex",
    "VarR4FromUI4",
    "VarUI2FromBool",
    "VarCyFromDisp",
    "VarBoolFromDisp",
    "VarI1FromDate",
    "VarI4FromCy",
    "VarR4FromUI2",
    "OACleanup",
    "VarBoolFromR8",
    "VarR8FromUI4",
    "VarCyFromR8",
    "LHashValOfNameSys",
    "VarI1FromUI2",
    "VarR4FromUI8",
    "VarBstrFromR8",
    "RegisterActiveObject",
    "VarR8FromStr",
    "VarBstrFromI2",
    "GetRecordInfoFromTypeInfo",
    "VarDecCmpR8",
    "VarCyFromI8",
    "GetErrorInfo",
    "VarImp",
    "SafeArrayRedim",
    "VarXor",
    "VarCySub",
    "LPSAFEARRAY_UserMarshal",
    "VarUI4FromStr",
    "SafeArrayGetDim",
    "OleLoadPictureFileEx",
    "VarUI8FromUI1",
    "LPSAFEARRAY_UserUnmarshal",
    "VarBstrFromUI4",
    "VarCyFromDec",
    "VarDecInt",
    "VarDecFromUI1",
    "LPSAFEARRAY_Unmarshal",
    "VarBoolFromI8",
    "VarUI2FromI4",
    "VarCyFromUI1",
    "RegisterTypeLib",
    "BstrFromVector",
    "VarI8FromDec",
    "VarPow",
    "VarI4FromUI2",
    "VarUI8FromDisp",
    "VarR4FromR8",
    "VarR8FromBool",
    "VarI4FromDate",
    "VARIANT_UserUnmarshal",
    "VarDecFromUI4",
    "VarBoolFromI4",
    "RevokeActiveObject",
    "BSTR_UserSize",
    "VariantTimeToSystemTime",
    "VarI2FromDate",
    "VarI1FromR4",
    "VarI4FromStr",
    "DispGetIDsOfNames",
    "VarR8FromI8",
    "VarR8FromDisp",
    "VarI2FromR8",
    "VarR8FromCy",
    "VarUI1FromI2",
    "VarBstrFromDec",
    "VarR4FromDisp",
    "DispGetParam",
    "SafeArrayGetUBound",
    "VarUI1FromI1",
    "VarCyFix",
    "VarUI1FromUI8",
    "VarCyMulI8",
    "OleLoadPicture",
    "OleIconToCursor",
    "CreateStdDispatch",
    "SafeArraySetIID",
    "VarDecFromI8",
    "DllCanUnloadNow",
    "OleTranslateColor",
    "VarEqv",
    "CreateErrorInfo",
    "CreateTypeLib2",
    "VarUI8FromCy",
    "VarUI2FromR8",
    "VarDateFromI1",
    "VarDateFromUI4",
    "VarR4FromDec",
    "VarUI2FromDate",
    "SafeArrayGetRecordInfo",
    "VarDateFromUI1",
    "GetVarConversionLocaleSetting",
    "VarBstrFromUI2",
    "DispInvoke",
    "VarDecSub",
    "VarDecFromCy",
    "VarUI1FromUI2",
    "VarDecFromI2",
    "SafeArrayCreate",
    "VarI4FromR8",
    "VarI2FromI8",
    "VarI2FromUI8",
    "VarI4FromDec",
    "VarDecCmp",
    "VarCyFromI4",
    "VarAdd",
    "VarCat",
    "VarR8FromR4",
    "VarR4FromI4",
    "VarI4FromDisp",
    "VarBstrCat",
    "VarCyFromI2",
    "VarBoolFromDec",
    "VarI1FromUI8",
    "SafeArrayPutElement",
    "VarBoolFromUI4",
    "VarR4FromUI1",
    "SysAllocStringByteLen",
    "VarI1FromUI4",
    "VarDateFromUI2",
    "VarUI4FromDisp",
    "VarR8Pow",
    "SetOaNoCache",
    "VarOr",
    "VarBstrCmp",
    "VarDecMul",
    "VarFormatPercent",
    "VarBoolFromR4",
    "VariantCopyInd",
    "VarSub",
    "VarBstrFromCy",
    "VarI8FromI1",
    "VarUI8FromUI4",
    "VarUI4FromCy",
    "VarUI4FromI8",
    "VarNot",
    "SafeArrayGetVartype",
    "VarDateFromR4",
    "VarDecNeg",
    "LPSAFEARRAY_Size",
    "VarFormatNumber",
    "VariantChangeType",
    "VarUI8FromR8",
    "VarI2FromStr",
    "VarI2FromI1",
    "VarBoolFromStr",
    "VarBoolFromUI8",
    "VarUI1FromCy",
    "VarR4FromDate",
    "VarUI2FromDec",
    "VarI8FromUI8",
    "VarR4FromCy",
    "VarUI4FromUI1",
    "VarUI8FromR4",
    "VarUI8FromStr",
    "VarI1FromI8",
    "VarUI2FromI8",
    "VarUI2FromR4",
    "VarUI1FromStr",
    "VarR8FromDate",
    "SafeArrayLock",
    "VarDecFromR8",
    "VarUI1FromR8",
    "SafeArrayCreateVectorEx",
    "SafeArraySetRecordInfo",
    "VarTokenizeFormatString",
    "VarUI2FromI2",
    "BSTR_UserUnmarshal",
    "VarDateFromUI8",
    "VarDiv",
    "VarDateFromR8",
    "VarUI2FromI1",
    "SysStringByteLen",
    "VarBstrFromR4",
    "VarUI4FromR4",
    "VarI2FromCy",
    "VarBstrFromUI1",
    "VarI4FromI8",
    "SafeArrayDestroy",
    "OACreateTypeLib2",
    "SafeArrayAllocDescriptor",
    "VarDecFix",
    "VarMonthName",
    "VarFormatCurrency",
    "VarUI4FromUI2",
    "VarDateFromDisp",
    "VarI2FromUI2",
    "VarDecAbs",
    "VarCyFromR4",
    "VarFormatDateTime",
    "VarI1FromI4",
    "VarI1FromDec",
    "LoadTypeLibEx",
    "VarI8FromR4",
    "SafeArrayAllocDescriptorEx",
    "VarFix",
    "VarDecFromI1",
    "VarCyRound",
    "OleCreatePropertyFrameIndirect",
    "SafeArrayGetIID",
    "SafeArrayGetElement",
    "VarUI2FromUI4",
    "DllGetClassObject",
    "VarDecAdd",
    "HWND_UserSize",
    "VarI1FromR8",
    "VarDateFromI4",
    "VarBoolFromI2",
    "VarDecFromDate",
    "VarDecFromR4",
    "VarUI1FromDate",
    "VarCyNeg",
    "VarFormat",
    "SetErrorInfo",
    "DllUnregisterServer",
    "VarUI4FromI1",
    "VarI8FromUI2",
    "VarR8FromUI2",
    "VarI8FromStr",
    "VarDateFromUdateEx",
    "VarI1FromCy",
    "VarR4FromI8",
    "OleLoadPictureEx",
    "VarI2FromR4",
    "VarBstrFromI8",
    "VarR8FromI1",
    "SysStringLen",
    "SystemTimeToVariantTime",
    "VarR4FromStr",
    "VarBoolFromUI1",
    "VarCyAdd",
    "VarCmp",
    "GetActiveObject",
    "VarR8Round",
    "VarUI8FromDate",
    "VarR8FromDec",
    "UnRegisterTypeLibForUser",
    "VarNumFromParseNum",
    "VarDateFromUdate",
    "VarUI1FromI8",
    "VariantCopy",
    "VarUI8FromUI2",
    "OaEnablePerUserTLibRegistration",
    "SafeArrayUnaccessData",
    "VarBstrFromBool",
    "VARIANT_UserMarshal",
    "VarI1FromStr",
    "VarUI8FromDec",
    "VarR8FromUI8",
    "VarI8FromR8",
    "VarUI4FromBool",
    "VarUI4FromDate",
    "VarI2FromBool",
    "SysAllocStringLen",
    "VarI8FromUI1",
    "VarR4FromBool",
    "VarUI2FromStr",
    "VarCyMul",
    "SafeArrayAccessData",
    "VarR4FromI2",
    "VarUI1FromUI4",
    "LPSAFEARRAY_Marshal",
    "VarMod",
    "VarR8FromUI1",
    "OleSavePictureFile",
    "VarUI1FromDisp",
    "VarCyFromUI4",
    "RegisterTypeLibForUser",
    "VarBstrFromDate",
    "VarI4FromUI4",
    "VarUI1FromR4",
    "VarUI4FromI4",
    "SafeArrayGetLBound",
    "SafeArrayCreateEx",
    "HWND_UserFree",
    "VarDateFromDec",
    "SafeArrayCopyData",
    "VarCyFromDate",
    "VarCyFromBool",
    "VarDateFromBool",
    "DispCallFunc",
    "VarI2FromUI4",
    "VariantTimeToDosDateTime",
    "VarI4FromI2",
    "VarUdateFromDate",
    "SafeArrayDestroyData",
    "VarDecFromUI2",
    "VarCyAbs",
    "VectorFromBstr"
  ],
  "olecli32.dll": [
    "OleCopyFromLink",
    "OleQueryProtocol",
    "MfCopy",
    "PbCreate",
    "GenRelease",
    "LeShow",
    "OleRename",
    "OleQueryBounds",
    "CheckNetDrive",
    "MfEqual",
    "OleIsDcMeta",
    "OleCreateFromFile",
    "LeObjectLong",
    "OleSetLinkUpdateOptions",
    "OleSetTargetDevice",
    "ErrShow",
    "LeQueryOutOfDate",
    "ErrSetData",
    "OleEnumFormats",
    "LeDraw",
    "OleSetBounds",
    "OleLockServer",
    "OleRequestData",
    "OleQueryCreateFromClip",
    "ErrQueryOpen",
    "LeChangeData",
    "OleCreateLinkFromFile",
    "MfClone",
    "PbCreateLinkFromClip",
    "OleGetData",
    "LeQueryOpen",
    "LeCopy",
    "BmClone",
    "OleRevokeClientDoc",
    "OleQueryReleaseMethod",
    "OleSetColorScheme",
    "DibRelease",
    "LeCopyFromLink",
    "OleRelease",
    "PbCreateFromClip",
    "LeSaveToStream",
    "OleSaveToStream",
    "LeClose",
    "ErrActivate",
    "LeUpdate",
    "GenChangeData",
    "LeActivate",
    "GenEqual",
    "ErrUpdate",
    "MfDraw",
    "OleClone",
    "DefLoadFromStream",
    "PbDraw",
    "OleCopyToClipboard",
    "OleQuerySize",
    "BmChangeData",
    "OleQueryReleaseError",
    "PbEnumFormats",
    "GetTaskVisibleWindow",
    "GenSetData",
    "BmSaveToStream",
    "OleUnlockServer",
    "BmDraw",
    "GenGetData",
    "LeQueryBounds",
    "PbCreateFromTemplate",
    "PbCreateLinkFromFile",
    "LeCreateInvisible",
    "OleEnumObjects",
    "OleQueryLinkFromClip",
    "ErrSetUpdateOptions",
    "GenDraw",
    "OleQueryClientVersion",
    "GenEnumFormat",
    "DocWndProc",
    "OleQueryOpen",
    "OleEqual",
    "SetNetName",
    "PbCopyToClipboard",
    "OleQueryType",
    "DibChangeData",
    "DefCreateLinkFromClip",
    "DefCreate",
    "LeSetBounds",
    "LeSetData",
    "OleGetLinkUpdateOptions",
    "ObjQueryName",
    "PbQueryBounds",
    "OleSavedClientDoc",
    "OleSetHostNames",
    "DibEnumFormat",
    "LeReconnect",
    "BmQueryBounds",
    "ErrReconnect",
    "DefCreateInvisible",
    "LeSetHostNames",
    "PbCreateFromFile",
    "LeSetTargetDevice",
    "DefCreateFromTemplate",
    "GenQueryBounds",
    "DibSaveToStream",
    "DefCreateLinkFromFile",
    "LeQueryProtocol",
    "ObjQuerySize",
    "ErrQueryOutOfDate",
    "LeRelease",
    "ErrObjectConvert",
    "ErrExecute",
    "LeSetUpdateOptions",
    "ErrCopyFromLink",
    "LeExecute",
    "ErrObjectLong",
    "LeEnumFormat",
    "DibCopy",
    "MfRelease",
    "LeGetData",
    "OleCreateInvisible",
    "OleCreateLinkFromClip",
    "LeGetUpdateOptions",
    "ConnectDlgProc",
    "BmRelease",
    "GenSaveToStream",
    "DibDraw",
    "OleCreateFromClip",
    "BmEqual",
    "DibClone",
    "MfQueryBounds",
    "OleObjectConvert",
    "OleLoadFromStream",
    "DefCreateFromFile",
    "OleCreate",
    "GenClone",
    "DibEqual",
    "DefCreateFromClip",
    "ErrSetHostNames",
    "OleReconnect",
    "PbCreateInvisible",
    "MfChangeData",
    "LeObjectConvert",
    "SetNextNetDrive",
    "PbLoadFromStream",
    "SrvrWndProc",
    "MfEnumFormat",
    "ObjQueryType",
    "OleActivate",
    "OleQueryName",
    "DibGetData",
    "MfSaveToStream",
    "OleQueryOutOfDate",
    "OleQueryReleaseStatus",
    "LeEqual",
    "ObjRename",
    "OleSetData",
    "GenCopy",
    "ErrSetTargetDevice",
    "OleRegisterClientDoc",
    "MfGetData",
    "OleClose",
    "DibQueryBounds",
    "WEP",
    "ErrSetBounds",
    "LeQueryType",
    "ErrQueryProtocol",
    "OleRevertClientDoc",
    "LeClone",
    "MfCallbackFunc",
    "OleUpdate",
    "OleDraw",
    "BmEnumFormat",
    "OleDelete",
    "OleExecute",
    "ErrGetUpdateOptions",
    "OleCreateFromTemplate",
    "BmGetData",
    "BmCopy",
    "OleRenameClientDoc",
    "ErrClose",
    "PbGetData"
  ],
  "oledlg.dll": [
    "OleUIPromptUserA",
    "OleUICanConvertOrActivateAs",
    "OleUIUpdateLinksA",
    "OleUIChangeSourceA",
    "OleUIPasteSpecialW",
    "OleUIObjectPropertiesW",
    "OleUIChangeIconW",
    "OleUIEditLinksW",
    "OleUIConvertA",
    "OleUIChangeIconA",
    "OleUIAddVerbMenuW",
    "OleUIInsertObjectA",
    "OleUIPasteSpecialA",
    "OleUIChangeSourceW",
    "OleUIBusyW",
    "OleUIConvertW",
    "OleUIEditLinksA",
    "OleUIBusyA",
    "OleUIUpdateLinksW",
    "OleUIInsertObjectW",
    "OleUIPromptUserW",
    "OleUIAddVerbMenuA",
    "OleUIObjectPropertiesA"
  ],
  "oleprn.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "olepro32.dll": [
    "OleIconToCursor",
    "OleCreatePropertyFrameIndirect",
    "OleCreatePictureIndirect",
    "OleCreateFontIndirect",
    "DllRegisterServer",
    "OleCreatePropertyFrame",
    "OleLoadPicture",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "OleTranslateColor",
    "DllUnregisterServer"
  ],
  "olesvr32.dll": [
    "OleRevokeServer",
    "OleRevokeServerDoc",
    "TerminateDocClients",
    "OleRenameServerDoc",
    "SrvrWndProc",
    "OleRegisterServer",
    "OleUnblockServer",
    "EnumForTerminate",
    "OleRegisterServerDoc",
    "ItemWndProc",
    "OleQueryServerVersion",
    "ItemCallBack",
    "OleRevertServerDoc",
    "SendRenameMsg",
    "WEP",
    "OleSavedServerDoc",
    "TerminateClients",
    "OleBlockServer",
    "OleRevokeObject",
    "DeleteClientInfo",
    "DocWndProc",
    "FindItemWnd",
    "SendDataMsg"
  ],
  "olethk32.dll": [
    "ConvertObjDescriptor",
    "TransformHRESULT_3216",
    "ConvertHr1632Thunk",
    "IntOpUninitialize",
    "ThkMgrUninitialize",
    "TransformHRESULT_1632",
    "InvokeOn32",
    "CallbackProcessing_3216",
    "ThkMgrInitialize",
    "ConvertHr3216Thunk",
    "CSm16ReleaseHandler_Release32",
    "IntOpInitialize",
    "ThkAddAppCompatFlag",
    "RegisterOleWOWHandlers",
    "IUnknownObj32"
  ],
  "onex.dll": [
    "OneXQueryAuthParams",
    "OneXUIResponse",
    "OneXUpdateProfilePostDiscovery",
    "OneXAddTLV",
    "OneXQueryState",
    "OneXSetRuntimeState",
    "OneXIndicatePacket",
    "OneXRestartReasonCodeToString",
    "OneXQueryStatistics",
    "OneXUpdatePortProfile",
    "OneXStartAuthentication",
    "OneXSetAuthParams",
    "OneXCopyAuthParams",
    "OneXStopAuthentication",
    "OneXFreeAuthParams",
    "OneXDeInitialize",
    "OneXCompareAuthParams",
    "OneXCreateDiscoveryProfiles",
    "OneXAddEapAttributes",
    "OneXCreateSupplicantPort",
    "OneXInitialize",
    "OneXQueryPendingUIRequest",
    "OneXCreateDefaultProfile",
    "OneXDestroySupplicantPort",
    "OneXFreeMemory",
    "OneXIndicateSessionChange",
    "OneXForceAuthenticatedState",
    "OneXReasonCodeToString"
  ],
  "onexui.dll": [
    "OneXShowUIFromEAPCreds",
    "OneXMapEAPHostInteractiveUIToOneXUIResponse",
    "OneXGetUserFriendlyText",
    "OneXShowUI"
  ],
  "opengl32.dll": [
    "glColor4dv",
    "glPopAttrib",
    "glGetTexEnvfv",
    "wglChoosePixelFormat",
    "glNormal3d",
    "glBlendFunc",
    "glRasterPos2dv",
    "glTexCoord2d",
    "glFeedbackBuffer",
    "glColor4f",
    "glPrioritizeTextures",
    "glGetIntegerv",
    "glMapGrid1d",
    "glLoadMatrixd",
    "wglCreateContext",
    "glShadeModel",
    "glTexCoord4sv",
    "glLoadName",
    "glClearStencil",
    "glColor4d",
    "glMap1f",
    "glVertex2sv",
    "glGetLightfv",
    "glTexGenf",
    "glMaterialf",
    "glPixelMapfv",
    "glNormal3iv",
    "glDrawPixels",
    "glVertex2f",
    "glTexGend",
    "glVertex2d",
    "glGetMapfv",
    "glTexCoord2fv",
    "glFogf",
    "glPointSize",
    "glClearDepth",
    "glInitNames",
    "wglUseFontBitmapsW",
    "glMap2f",
    "glGetClipPlane",
    "glNormal3b",
    "glPushClientAttrib",
    "glColor3d",
    "glPushName",
    "glEvalCoord1fv",
    "glEnd",
    "wglUseFontOutlinesA",
    "glTexCoord4i",
    "glVertex2iv",
    "glNormalPointer",
    "glRasterPos4fv",
    "glColor3f",
    "glIndexdv",
    "glCopyTexImage2D",
    "glNormal3s",
    "glScissor",
    "glTexCoord4iv",
    "glTexCoord1s",
    "glRectdv",
    "glRecti",
    "glColor3ui",
    "glNormal3i",
    "glMaterialiv",
    "glVertex4iv",
    "glTexParameterfv",
    "glGetTexLevelParameterfv",
    "glRectfv",
    "glTexCoord1f",
    "glColor4b",
    "glRasterPos4d",
    "glDrawBuffer",
    "glTexEnvf",
    "glDepthFunc",
    "glVertex4sv",
    "glColor3ubv",
    "glTexCoord4f",
    "glClearIndex",
    "glRasterPos4i",
    "glColor4uiv",
    "glGetBooleanv",
    "glGetLightiv",
    "glGetPolygonStipple",
    "glMultMatrixd",
    "glIndexs",
    "glMaterialfv",
    "glEndList",
    "wglDescribePixelFormat",
    "glColorMask",
    "glMatrixMode",
    "glScalef",
    "glEvalMesh1",
    "glNormal3fv",
    "glRasterPos3f",
    "glPixelStoref",
    "glEvalPoint2",
    "wglShareLists",
    "glMultMatrixf",
    "glCopyPixels",
    "glRasterPos4dv",
    "glTexCoord4dv",
    "glLightfv",
    "glTexParameteri",
    "glRects",
    "GlmfInitPlayback",
    "glRasterPos3fv",
    "glGetTexGendv",
    "glTexCoord1sv",
    "glEdgeFlagPointer",
    "glVertex4s",
    "glColor3bv",
    "wglGetCurrentContext",
    "glGetMaterialiv",
    "GlmfEndGlsBlock",
    "glBegin",
    "glLighti",
    "glTexCoord1iv",
    "glGetMapdv",
    "glTexCoord3sv",
    "glPushMatrix",
    "glVertex4d",
    "glTexCoord2f",
    "glDebugEntry",
    "glTexCoord3s",
    "glLightiv",
    "glLoadIdentity",
    "glSelectBuffer",
    "glDisableClientState",
    "glNormal3dv",
    "glColor3i",
    "glTranslated",
    "glVertex2s",
    "glTexSubImage2D",
    "glColor3ub",
    "glEvalCoord2d",
    "glVertex3d",
    "glClearColor",
    "glEnable",
    "glEvalMesh2",
    "glGetPixelMapfv",
    "GlmfCloseMetaFile",
    "glInterleavedArrays",
    "glListBase",
    "glVertexPointer",
    "glPopMatrix",
    "GlmfPlayGlsRecord",
    "glTexCoord3i",
    "glRasterPos4f",
    "glColor4i",
    "glRasterPos2i",
    "glVertex3i",
    "glGetString",
    "glPolygonStipple",
    "glTexCoord4d",
    "glEvalCoord1d",
    "glTexCoordPointer",
    "glTexCoord1dv",
    "glColor3usv",
    "wglGetLayerPaletteEntries",
    "glPixelStorei",
    "glNormal3bv",
    "wglCreateLayerContext",
    "glEdgeFlag",
    "glTexCoord1i",
    "glColor4usv",
    "glPixelTransferf",
    "glPopName",
    "wglGetCurrentDC",
    "glVertex2i",
    "glPushAttrib",
    "glVertex3fv",
    "glTexCoord2dv",
    "glBitmap",
    "glColor3s",
    "wglGetProcAddress",
    "glColor4us",
    "glRasterPos3iv",
    "glRasterPos2iv",
    "glFogfv",
    "glMapGrid2f",
    "glTexCoord2iv",
    "glStencilOp",
    "glDeleteLists",
    "glEvalCoord1f",
    "glTexImage1D",
    "glTexCoord3fv",
    "glTexGeni",
    "wglMakeCurrent",
    "glPixelMapuiv",
    "glGetDoublev",
    "glAreTexturesResident",
    "glRasterPos3i",
    "glTexCoord3dv",
    "glClearAccum",
    "glGetMapiv",
    "glTexCoord2sv",
    "glColorPointer",
    "glVertex3iv",
    "glColor3b",
    "glIndexub",
    "glVertex3dv",
    "glRasterPos3d",
    "glIsList",
    "GlmfEndPlayback",
    "glIndexsv",
    "glTexCoord3iv",
    "glFogi",
    "glReadBuffer",
    "glGetTexParameterfv",
    "glDrawArrays",
    "glEvalCoord2fv",
    "glColor3uiv",
    "glTexCoord1fv",
    "glColor4fv",
    "glGetTexLevelParameteriv",
    "glGetError",
    "glIndexubv",
    "glRectd",
    "glTexCoord3d",
    "glNormal3f",
    "glPassThrough",
    "wglSetLayerPaletteEntries",
    "glColor3sv",
    "wglSwapMultipleBuffers",
    "glColor3us",
    "glRasterPos3sv",
    "wglUseFontBitmapsA",
    "glTexEnviv",
    "GlmfBeginGlsBlock",
    "wglRealizeLayerPalette",
    "glLightf",
    "glPixelTransferi",
    "glNewList",
    "glPixelMapusv",
    "glMateriali",
    "glMapGrid1f",
    "glVertex3f",
    "glPolygonOffset",
    "glArrayElement",
    "glLightModeli",
    "glTexParameteriv",
    "glTexCoord4s",
    "wglGetPixelFormat",
    "glDisable",
    "glCopyTexImage1D",
    "wglDeleteContext",
    "glColor4s",
    "glRectsv",
    "glCallLists",
    "glStencilMask",
    "glGetPixelMapuiv",
    "wglCopyContext",
    "glTexEnvi",
    "glFrontFace",
    "glCallList",
    "glColor4iv",
    "glIndexiv",
    "glEvalCoord2f",
    "glTexParameterf",
    "glIsEnabled",
    "glGetMaterialfv",
    "glRasterPos4sv",
    "glEnableClientState",
    "glGenLists",
    "glVertex4i",
    "glLightModelf",
    "glTexCoord1d",
    "glColor4sv",
    "glVertex2fv",
    "glVertex4fv",
    "glMap2d",
    "glCopyTexSubImage2D",
    "glGetPointerv",
    "glClipPlane",
    "glClear",
    "glGenTextures",
    "wglGetDefaultProcAddress",
    "glRotatef",
    "glRenderMode",
    "glColor3dv",
    "glRasterPos2sv",
    "wglSetPixelFormat",
    "glBindTexture",
    "wglSwapLayerBuffers",
    "glGetTexEnviv",
    "glIsTexture",
    "glLineWidth",
    "glCopyTexSubImage1D",
    "glMapGrid2d",
    "glStencilFunc",
    "glLoadMatrixf",
    "glFogiv",
    "glIndexfv",
    "wglSwapBuffers",
    "glOrtho",
    "glCullFace",
    "glRasterPos3s",
    "glNormal3sv",
    "glTexEnvfv",
    "glTexGeniv",
    "glIndexf",
    "glColor3iv",
    "glColor4bv",
    "glGetTexParameteriv",
    "glLightModeliv",
    "glGetPixelMapusv",
    "glDepthRange",
    "glHint",
    "glRasterPos2fv",
    "glPixelZoom",
    "glTexSubImage1D",
    "glPopClientAttrib",
    "glColor4ui",
    "glGetTexGenfv",
    "wglDescribeLayerPlane",
    "glColor3fv",
    "glLogicOp",
    "glGetFloatv",
    "glTexCoord2i",
    "glVertex2dv",
    "glLightModelfv",
    "glDrawElements",
    "glColorMaterial",
    "glVertex3sv",
    "glTexCoord4fv",
    "glTexCoord3f",
    "glEvalCoord2dv",
    "glRasterPos4s",
    "glTranslatef",
    "glTexGendv",
    "glIndexi",
    "glRasterPos3dv",
    "glRectiv",
    "glScaled",
    "glVertex3s",
    "glRasterPos2d",
    "glIndexd",
    "glAlphaFunc",
    "glFlush",
    "glGetTexGeniv",
    "glDeleteTextures",
    "glMap1d",
    "glReadPixels",
    "glGetTexImage",
    "glRectf",
    "glRasterPos2f",
    "glTexGenfv",
    "glColor4ub",
    "glEvalCoord1dv",
    "glRasterPos4iv",
    "glPolygonMode",
    "glColor4ubv",
    "glFinish",
    "glFrustum",
    "glRotated",
    "glVertex4dv",
    "glIndexPointer",
    "glDepthMask",
    "glEvalPoint1",
    "glIndexMask",
    "glViewport",
    "glAccum",
    "glVertex4f",
    "glTexCoord2s",
    "glRasterPos2s",
    "glLineStipple",
    "glTexImage2D",
    "wglUseFontOutlinesW",
    "glEdgeFlagv"
  ],
  "osbaseln.dll": [
    "pGetOsCurrentBaselineServicePack",
    "EnumOsOutOfDateComponentsW",
    "OpenOsBaseline",
    "GetOsBaselineComponentInfoW",
    "GetOsInstalledComponentInfoA",
    "pOpenOsBaselineByVersion",
    "EnumOsBaselineComponentsA",
    "CloseOsBaseline",
    "EnumOsBaselineComponentsW",
    "GetOsBaselineComponentInfoA",
    "pGetOsBaselineCurrentVersion",
    "EnumOsOutOfDateComponentsA",
    "GetOsLatestBaselineServicePack",
    "GetOsInstalledComponentInfoW"
  ],
  "osuninst.dll": [
    "IsUninstallImageValid",
    "ExecuteUninstall",
    "RemoveUninstallImage",
    "ProvideUiAlerts",
    "GetUninstallImageSize"
  ],
  "P2P.dll": [
    "PeerCollabCloseHandle",
    "PeerCollabGetContact",
    "PeerFreeData",
    "PeerGroupGetProperties",
    "PeerGroupImportConfig",
    "PeerCollabUnregisterEvent",
    "PeerNameToPeerHostName",
    "PeerCollabParseContact",
    "PeerGroupEnumMembers",
    "PeerCollabDeleteObject",
    "PeerCollabEnumApplicationRegistrationInfo",
    "PeerGroupJoin",
    "PeerCollabUnregisterApplication",
    "PeerCollabRegisterApplication",
    "PeerGroupSearchRecords",
    "PeerGroupParseInvitation",
    "PeerGroupClose",
    "PeerCollabSubscribeEndpointData",
    "PeerCollabQueryContactData",
    "PeerGroupSendData",
    "PeerCollabStartup",
    "PeerGroupEnumConnections",
    "PeerHostNameToPeerName",
    "PeerCollabInviteEndpoint",
    "PeerCollabSetObject",
    "PeerGroupCreate",
    "PeerPnrpUnregister",
    "PeerCollabUnsubscribeEndpointData",
    "PeerCreatePeerName",
    "PeerCollabUpdateContact",
    "PeerCollabRefreshEndpointData",
    "PeerGroupCloseDirectConnection",
    "PeerGetNextItem",
    "PeerGroupOpen",
    "PeerPnrpStartup",
    "PeerPnrpRegister",
    "PeerGroupOpenDirectConnection",
    "PeerGroupDelete",
    "PeerGroupGetRecord",
    "PeerPnrpGetEndpoint",
    "PeerGetItemCount",
    "PeerCollabInviteContact",
    "PeerCollabGetApplicationRegistrationInfo",
    "PeerPnrpGetCloudInfo",
    "PeerCollabEnumEndpoints",
    "PeerGroupConnect",
    "PeerCollabEnumContacts",
    "PeerIdentityGetCert",
    "PeerGroupStartup",
    "PeerCollabEnumApplications",
    "PeerGroupGetStatus",
    "PeerIdentityGetDefault",
    "PeerGroupExportDatabase",
    "PeerCollabSetPresenceInfo",
    "PeerGroupCreateInvitation",
    "PeerGroupSetProperties",
    "PeerGroupResumePasswordAuthentication",
    "PeerPnrpStartResolve",
    "PeerCollabShutdown",
    "PeerCollabSignout",
    "PeerEndEnumeration",
    "PeerCollabGetAppLaunchInfo",
    "PeerGroupGetEventData",
    "PeerCollabEnumObjects",
    "PeerCollabGetPresenceInfo",
    "PeerGroupHandlePowerEvent",
    "PeerCollabCancelInvitation",
    "PeerGroupUpdateRecord",
    "PeerCollabSetEndpointName",
    "PeerGroupConnectByAddress",
    "PeerCollabAsyncInviteEndpoint",
    "PeerGroupPasswordJoin",
    "PeerGroupUniversalTimeToPeerTime",
    "PeerIdentityGetCryptKey",
    "PeerEnumGroups",
    "PeerIdentityCreate",
    "PeerEnumIdentities",
    "PeerIdentityGetFriendlyName",
    "PeerCollabDeleteEndpointData",
    "PeerCollabGetEndpointName",
    "PeerCollabGetSigninOptions",
    "PeerCollabGetInvitationResponse",
    "PeerIdentityDelete",
    "PeerIdentityExport",
    "PeerGroupRegisterEvent",
    "PeerGroupIssueCredentials",
    "PeerGroupCreatePasswordInvitation",
    "PeerCollabAddContact",
    "PeerIdentityGetXML",
    "PeerGroupExportConfig",
    "PeerGroupShutdown",
    "PeerGroupDeleteRecord",
    "PeerPnrpResolve",
    "PeerCollabGetEventData",
    "DllMain",
    "PeerGroupAddRecord",
    "PeerSSPAddCredentials",
    "PeerIdentityImport",
    "PeerCollabExportContact",
    "PeerCollabEnumPeopleNearMe",
    "PeerCollabRegisterEvent",
    "PeerGroupImportDatabase",
    "PeerGroupPeerTimeToUniversalTime",
    "PeerPnrpUpdateRegistration",
    "PeerGroupEnumRecords",
    "PeerCollabSignin",
    "PeerSSPRemoveCredentials",
    "PeerGroupUnregisterEvent",
    "PeerCollabAsyncInviteContact",
    "PeerCollabDeleteContact",
    "PeerPnrpShutdown",
    "PeerPnrpEndResolve",
    "PeerIdentitySetFriendlyName"
  ],
  "P2PGraph.dll": [
    "PeerGraphSuspendTimers",
    "PeerGraphPeerTimeToUniversalTime",
    "PeerGraphDelete",
    "PeerGraphGetNodeInfo",
    "PeerGraphListen",
    "PeerGraphSetPresence",
    "PeerGraphDeleteRecord",
    "PeerGraphEnumConnections",
    "PeerGraphGetNextItem",
    "PeerGraphRegisterEvent",
    "PeerGraphGetProperties",
    "PeerGraphFreeData",
    "PeerGraphGetItemCount",
    "PeerGraphUnregisterEvent",
    "PeerGraphShutdown",
    "PeerGraphGetEventData",
    "PeerGraphConnect",
    "PeerGraphUpdateRecord",
    "PeerGraphEnumNodes",
    "PeerGraphSetProperties",
    "PeerGraphGetStatus",
    "PeerGraphCreate",
    "PeerGraphEnumRecords",
    "PeerGraphGetRecord",
    "PeerGraphSendData",
    "pMemoryHelper",
    "PeerGraphForceStopPresencePrivate",
    "PeerGraphImportDatabase",
    "PeerGraphValidateDeferredRecords",
    "PeerGraphExportDatabase",
    "PeerGraphStartup",
    "PeerGraphCloseDirectConnection",
    "PeerGraphSearchRecords",
    "PeerGraphUniversalTimeToPeerTime",
    "PeerGraphAddRecord",
    "PeerGraphOpen",
    "PeerGraphSetNodeAttributes",
    "PeerGraphClose",
    "PeerGraphOpenDirectConnection",
    "PeerGraphEndEnumeration"
  ],
  "PCPKsp.dll": [
    "DllMain",
    "GetKeyStorageInterface",
    "DllInstall",
    "GetRngInterface",
    "GetAsymmetricEncryptionInterface",
    "DllUnregisterServer"
  ],
  "PCPTpm12.dll": [
    "GetAsymmetricEncryptionInterface",
    "DllInstall",
    "GetRngInterface",
    "DllUnregisterServer"
  ],
  "PNPXAssoc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "PNPXAssocPrx.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "PSHED.DLL": [
    "PshedReadErrorRecord",
    "PshedRegisterPlugin",
    "PshedSetErrorSourceInfo",
    "PshedFinalizeErrorRecord",
    "PshedRetrieveErrorInfo",
    "PshedBugCheckSystem",
    "PshedFreeMemory",
    "PshedDisableErrorSource",
    "PshedInjectError",
    "PshedSynchronizeExecution",
    "PshedAttemptErrorRecovery",
    "PshedEnableErrorSource",
    "PshedGetAllErrorSources",
    "PshedWriteErrorRecord",
    "PshedClearErrorRecord",
    "PshedGetBootErrorPacket",
    "PshedMarkHiberPhase",
    "PshedGetInjectionCapabilities",
    "PshedGetErrorSourceInfo",
    "PshedArePluginsPresent",
    "PshedAllocateMemory",
    "PshedIsSystemWheaEnabled",
    "PshedInitialize"
  ],
  "PSModuleDiscoveryProvider.dll": [
    "DllUnregisterServer",
    "DllMain",
    "GetProviderClassID",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "MI_Main"
  ],
  "PackageStateRoaming.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "PeerDist.dll": [
    "PeerDistClientCompleteContentInformation",
    "PeerDistRegisterForStatusChangeNotificationEx",
    "PeerDistServerUnpublish",
    "PeerDistGetStatusEx",
    "PeerDistClientFlushContent",
    "PeerDistClientAddData",
    "PeerDistGetOverlappedResult",
    "PeerDistServerCloseContentInformation",
    "PeerDistServerPublishCompleteStream",
    "PeerDistServerCancelAsyncOperation",
    "PeerDistClientCancelAsyncOperation",
    "PeerDistClientBlockRead",
    "PeerDistClientOpenContent",
    "PeerDistServerRetrieveContentInformation",
    "PeerDistUnregisterForStatusChangeNotification",
    "PeerDistServerOpenContentInformation",
    "PeerDistStartup",
    "PeerDistShutdown",
    "PeerDistClientGetInformationByHandle",
    "PeerDistClientCloseContent",
    "PeerDistServerPublishAddToStream",
    "PeerDistClientAddContentInformation",
    "PeerDistServerPublishStream",
    "PeerDistGetStatus",
    "PeerDistRegisterForStatusChangeNotification",
    "PeerDistServerCloseStreamHandle",
    "PeerDistClientStreamRead",
    "PeerDistServerOpenContentInformationEx"
  ],
  "PeerDistAD.dll": [
    "PeerDistADGetFunctions"
  ],
  "PeerDistCleaner.dll": [
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "PeerDistHttpTrans.dll": [
    "PeerDistTransportStartup",
    "DllMain"
  ],
  "PeerDistSh.dll": [
    "InitHelperDll"
  ],
  "PeerDistSvc.dll": [
    "SVCServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "PeerDistWSDDiscoProv.dll": [
    "PeerDistDiscoProviderStartup"
  ],
  "PerfCenterCPL.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "PhotoMetadataHandler.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "PlaySndSrv.dll": [
    "DllCanUnloadNow",
    "PlaySoundServerTerminate",
    "DllGetClassObject",
    "PlaySoundServerInitialize"
  ],
  "PlayToManager.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "PlayToStatusProvider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "Pnrphc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "PortableDeviceApi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "PortableDeviceClassExtension.dll": [
    "Microsoft_WDF_UMDF_Version",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "PortableDeviceConnectApi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "PortableDeviceStatus.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "PortableDeviceSyncProvider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "PortableDeviceTypes.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "PortableDeviceWMDRM.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "PortableDeviceWiaCompat.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "PresentationHostProxy.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "PrintDialogs.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "PrintIsolationProxy.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "ProximityCommon.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo"
  ],
  "ProximityService.dll": [
    "InitProximityService",
    "SessionChangedEvent",
    "CleanupProximityService",
    "GetProximityClientCount"
  ],
  "PurchaseWindowsLicense.dll": [
    "PurchaseWindowsLicense"
  ],
  "p2pnetsh.dll": [
    "InitHelperDll"
  ],
  "p2psvc.dll": [
    "GroupServiceMain",
    "SvchostPushServiceGlobals",
    "InitSecurityInterfaceW"
  ],
  "packager.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "panmap.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "pautoenr.dll": [
    "CertAutoEnrollment",
    "CertAutoRemove",
    "DimsProvEntry"
  ],
  "pcacli.dll": [
    "PcaIsPcaDisabled",
    "PcaMonitorProcess",
    "PcaNotifyStatusIcon",
    "PcaSendToService",
    "PcaNotifyMsiInstall",
    "PcaLinkChildProcessToParent"
  ],
  "pcadm.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "pcaevts.dll": "No exports",
  "pcasvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "pcaui.dll": [
    "DisplayApphelpDialog",
    "PcaLaunchApplicationWithConsent",
    "PcaPersistSettingsAndLaunchApplication",
    "PcaShowDialog"
  ],
  "pcwum.dll": [
    "StmAllocateFlat",
    "PerfQueryInstance",
    "PcwClearCounterSetSecurity",
    "PerfDecrementULongCounterValue",
    "PerfIncrementULongLongCounterValue",
    "PerfStartProvider",
    "PcwEnumerateInstances",
    "StmWrite",
    "PcwRegisterCounterSet",
    "PcwCompleteNotification",
    "PcwRemoveQueryItem",
    "PcwReadNotificationData",
    "PcwCreateQuery",
    "PerfDeleteInstance",
    "StmDeinitialize",
    "PcwDisconnectCounterSet",
    "PcwSendStatelessNotification",
    "PerfStartProviderEx",
    "PcwSendNotification",
    "PerfSetULongCounterValue",
    "PerfStopProvider",
    "StmCoalesceChunks",
    "PerfCreateInstance",
    "PcwAddQueryItem",
    "PerfSetCounterRefValue",
    "StmInitialize",
    "PcwIsNotifierAlive",
    "PcwSetQueryItemUserData",
    "PerfDecrementULongLongCounterValue",
    "StmReduceSize",
    "PcwCreateNotifier",
    "PerfIncrementULongCounterValue",
    "PcwSetCounterSetSecurity",
    "StmAlignSize",
    "StmReserve",
    "PcwQueryCounterSetSecurity",
    "PerfSetCounterSetInfo",
    "PerfSetULongLongCounterValue",
    "PcwCollectData"
  ],
  "pcwutl.dll": [
    "SendPcwWerReport",
    "LogAeEvent",
    "RetrieveFileAndProgramId",
    "GetMatchingInfo",
    "LaunchApplicationW",
    "GetTempFile"
  ],
  "pdh.dll": [
    "PdhCalculateCounterFromRawValue",
    "PdhVbOpenLog",
    "PdhVbUpdateLog",
    "PdhRemoveCounter",
    "PdhEnumObjectItemsHW",
    "PdhFormatFromRawValue",
    "PdhValidatePathW",
    "PdhSetQueryTimeRange",
    "PdhEnumObjectItemsA",
    "PdhGetDefaultPerfCounterA",
    "PdhGetLogFileSize",
    "PdhGetDefaultPerfCounterHA",
    "PdhCollectQueryDataWithTime",
    "PdhExpandCounterPathW",
    "PdhVerifySQLDBW",
    "PdhGetFormattedCounterArrayA",
    "PdhVbGetCounterPathFromList",
    "PdhOpenQueryW",
    "PdhGetRawCounterArrayW",
    "PdhGetDataSourceTimeRangeW",
    "PdhTranslateLocaleCounterW",
    "PdhResetRelogCounterValues",
    "PdhBrowseCountersA",
    "PdhExpandWildCardPathA",
    "PdhLookupPerfNameByIndexW",
    "PdhMakeCounterPathW",
    "PdhReadRawLogRecord",
    "PdhAddV2Counter",
    "PdhAdd009CounterA",
    "PdhGetLogFileTypeA",
    "PdhTranslateLocaleCounterA",
    "PdhAddEnglishCounterA",
    "PdhAddRelogCounter",
    "PdhOpenLogW",
    "PdhParseInstanceNameA",
    "PdhMakeCounterPathA",
    "PdhExpandWildCardPathHW",
    "PdhLookupPerfNameByIndexA",
    "PdhEnumObjectItemsW",
    "PdhGetCounterTimeBase",
    "PdhSetCounterValue",
    "PdhEnumMachinesHA",
    "PdhBrowseCountersHW",
    "PdhCreateSQLTablesA",
    "PdhGetDefaultPerfCounterW",
    "PdhSelectDataSourceA",
    "PdhGetExplainText",
    "PdhOpenLogA",
    "PdhSetLogSetRunID",
    "PdhConnectMachineA",
    "PdhVbAddCounter",
    "PdhAdd009CounterW",
    "PdhAddEnglishCounterW",
    "PdhAddV1Counter",
    "PdhCloseLog",
    "PdhGetRawCounterArrayA",
    "PdhExpandWildCardPathW",
    "PdhVerifySQLDBA",
    "PdhExpandWildCardPathHA",
    "PdhLookupPerfIndexByNameW",
    "PdhGetDefaultPerfCounterHW",
    "PdhGetFormattedCounterArrayW",
    "PdhLookupPerfIndexByNameA",
    "PdhEnumMachinesW",
    "PdhRelogW",
    "PdhVbGetDoubleCounterValue",
    "PdhCollectQueryData",
    "PdhGetDefaultPerfObjectA",
    "PdhGetDefaultPerfObjectHA",
    "PdhListLogFileHeaderA",
    "PdhUpdateLogA",
    "PdhVbCreateCounterPathList",
    "PdhGetRawCounterValue",
    "PdhVbIsGoodStatus",
    "PdhEnumObjectsHW",
    "PdhComputeCounterStatistics",
    "PdhAddCounterA",
    "PdhGetCounterInfoW",
    "PdhGetDllVersion",
    "PdhOpenQueryA",
    "PdhGetCounterInfoA",
    "PdhUpdateLogFileCatalog",
    "PdhCollectQueryDataEx",
    "PdhGetFormattedCounterValue",
    "PdhGetDataSourceTimeRangeH",
    "PdhBindInputDataSourceW",
    "PdhParseInstanceNameW",
    "PdhGetDefaultPerfObjectHW",
    "PdhOpenQueryH",
    "PdhTranslate009CounterW",
    "PdhCloseQuery",
    "PdhGetLogFileTypeW",
    "PdhEnumObjectsW",
    "PdhUpdateLogW",
    "PdhParseCounterPathA",
    "PdhGetDefaultPerfObjectW",
    "PdhVbGetOneCounterPath",
    "PdhBrowseCountersHA",
    "PdhEnumLogSetNamesW",
    "PdhValidatePathA",
    "PdhParseCounterPathW",
    "PdhRelogA",
    "PdhEnumLogSetNamesA",
    "PdhListLogFileHeaderW",
    "PdhGetDataSourceTimeRangeA",
    "PdhSelectDataSourceW",
    "PdhValidatePathExA",
    "PdhEnumObjectsHA",
    "PdhEnumObjectItemsHA",
    "PdhCreateSQLTablesW",
    "PdhBindInputDataSourceA",
    "PdhAddCounterW",
    "PdhConnectMachineW",
    "PdhSetCounterScaleFactor",
    "PdhVbOpenQuery",
    "PdhValidatePathExW",
    "PdhIsRealTimeQuery",
    "PdhEnumObjectsA",
    "PdhVbGetCounterPathElements",
    "PdhTranslate009CounterA",
    "PdhGetLogSetGUID",
    "PdhOpenQuery",
    "PdhWriteRelogSample",
    "PdhBrowseCountersW",
    "PdhVbGetLogFileSize",
    "PdhSetDefaultRealTimeDataSource",
    "PdhEnumMachinesHW",
    "PdhExpandCounterPathA",
    "PdhEnumMachinesA"
  ],
  "pdhui.dll": [
    "PdhUiBrowseCountersHA",
    "PdhUiBrowseCountersExA",
    "PdhUiBrowseCountersW",
    "PdhUiBrowseCountersExHW",
    "PdhUiBrowseCountersExHA",
    "PdhUiBrowseCountersHW",
    "PdhUiSelectDataSourceW",
    "PdhUiBrowseCountersA",
    "PdhUiSelectDataSourceA",
    "PdhUiBrowseCountersExW"
  ],
  "perfctrs.dll": [
    "CloseIPXPerformanceData",
    "CloseSPXPerformanceData",
    "OpenNWNBPerformanceData",
    "CollectNbfPerformanceData",
    "CloseNWNBPerformanceData",
    "OpenNbfPerformanceData",
    "CollectIPXPerformanceData",
    "OpenSPXPerformanceData",
    "CollectSPXPerformanceData",
    "CollectTcpIpPerformanceData",
    "CollectNWNBPerformanceData",
    "OpenTcpIpPerformanceData",
    "OpenIPXPerformanceData",
    "OpenDhcpPerformanceData",
    "CollectDhcpPerformanceData",
    "CloseDhcpPerformanceData",
    "CloseNbfPerformanceData",
    "CloseTcpIpPerformanceData"
  ],
  "perfdisk.dll": [
    "OpenDiskObject",
    "CloseDiskObject",
    "CollectDiskObjectData"
  ],
  "perfnet.dll": [
    "CollectNetSvcsObjectData",
    "OpenNetSvcsObject",
    "CloseNetSvcsObject"
  ],
  "perfos.dll": [
    "CloseOSObject",
    "CollectOSObjectData",
    "OpenOSObject"
  ],
  "perfproc.dll": [
    "CollectSysProcessObjectData",
    "CloseSysProcessObject",
    "OpenSysProcessObject"
  ],
  "perftrack.dll": [
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiDiagnosticModuleMain",
    "WdiHandleInstance",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "perfts.dll": [
    "OpenTSObject",
    "CloseTSObject",
    "CollectTSObjectData"
  ],
  "photowiz.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllRegisterServer",
    "UsePPWForPrintTo",
    "DllUnregisterServer"
  ],
  "pid.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "pidgenx.dll": [
    "PidGenX2",
    "PidGenX"
  ],
  "pifmgr.dll": "No exports",
  "pku2u.dll": [
    "SpLsaModeInitialize",
    "DllMain",
    "SpUserModeInitialize"
  ],
  "pla.dll": [
    "PlaGetServerCapabilities",
    "PlaGetLegacyAlertActionsStringFromFlags",
    "PlaGetLegacyAlertActionsFlagsFromString",
    "PlaHost",
    "PlaUpgrade",
    "PlaServer",
    "PlaExtractCabinet",
    "PlaDeleteReport",
    "SvchostPushServiceGlobals",
    "ServiceMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "PlaExpandTaskArguments"
  ],
  "playlistfolder.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "pmcsnap.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "pngfilt.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "pnidui.dll": [
    "NwCategoryWiz",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "pnppolicy.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "pnpts.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "pnpui.dll": [
    "InstallSecurityPrompt",
    "InstallSecurityPromptRunDllW",
    "SimplifiedDINotificationW",
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "pnrpauto.dll": [
    "PnrpAutoSVCServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "pnrpnsp.dll": [
    "NSPStartup"
  ],
  "pnrpsvc.dll": [
    "SVCServiceMain",
    "IMServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "polstore.dll": [
    "IPSecCopyNegPolData",
    "IPSecSetNegPolData",
    "IPSecClosePolicyStore",
    "IPSecUnassignPolicy",
    "IPSecFreePolStr",
    "IPSecGetNegPolData",
    "IPSecCopyAuthMethod",
    "IPSecImportPolicies",
    "IPSecFreeFilterSpecs",
    "IPSecClearWMIStore",
    "IPSecDeleteNegPolData",
    "IPSecSetPolicyData",
    "IPSecFreePolicyData",
    "ProcessIPSECPolicyEx",
    "IPSecDeletePolicyData",
    "IPSecFreeNegPolData",
    "IPSecGetISAKMPData",
    "WriteDirectoryPolicyToWMI",
    "IPSecCopyPolicyData",
    "IPSecFreeMulFilterData",
    "IPSecAllocPolMem",
    "IPSecFreeISAKMPData",
    "IPSecAssignPolicy",
    "IPSecFreeNFAData",
    "IPSecSetFilterData",
    "IPSecOpenPolicyStore",
    "IPSecFreeMulNegPolData",
    "IPSecExportPolicies",
    "IPSecFreeMulISAKMPData",
    "GenerateIPSECPolicy",
    "IPSecAllocPolStr",
    "IPSecCreateNFAData",
    "IPSecFreeFilterSpec",
    "IPSecSetNFAData",
    "IPSecEnumISAKMPData",
    "IPSecDeleteISAKMPData",
    "IPSecFreeMulPolicyData",
    "IPSecDeleteNFAData",
    "IPSecCopyFilterSpec",
    "IPSecDeleteFilterData",
    "IPSecEnumPolicyData",
    "RegCreateNFAData",
    "RegCreatePolicyData",
    "IPSecGetFilterData",
    "IPSecFreeMulNFAData",
    "IPSecEnumFilterData",
    "IPSecCreateNegPolData",
    "IPSecIsDomainPolicyAssigned",
    "IPSecEnumNFAData",
    "IPSecEnumNegPolData",
    "IPSecFreeFilterData",
    "IPSecCreateFilterData",
    "IPSecGetAssignedPolicyData",
    "IPSecCopyFilterData",
    "IPSecCreatePolicyData",
    "IPSecCopyNFAData",
    "IPSecSetISAKMPData",
    "IPSecCreateISAKMPData",
    "IPSecCopyISAKMPData"
  ],
  "pots.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "powercpl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "powrprof.dll": [
    "PowerInformationWithPrivileges",
    "PowerWritePossibleValue",
    "PowerUnregisterSuspendResumeNotification",
    "MergeLegacyPwrScheme",
    "PowerReadPossibleDescription",
    "WriteProcessorPwrScheme",
    "ValidatePowerPolicies",
    "PowerDeterminePlatformRole",
    "PowerSettingAccessCheckEx",
    "PowerWriteSecurityDescriptor",
    "PowerDebugDumpSystemPowerCapabilities",
    "CallNtPowerInformation",
    "PowerRestoreIndividualDefaultPowerScheme",
    "PowerRestoreDefaultPowerSchemes",
    "PowerCreatePossibleSetting",
    "PowerWriteDCValueIndex",
    "DeletePwrScheme",
    "PowerReadDescription",
    "PowerWriteDCDefaultIndex",
    "PowerReadValueMin",
    "PowerReadSettingAttributes",
    "DevicePowerOpen",
    "PowerSettingAccessCheck",
    "GUIDFormatToPowerPolicy",
    "PowerSettingRegisterNotification",
    "PowerGetActiveScheme",
    "PowerApplyPowerRequestOverride",
    "EnumPwrSchemes",
    "PowerWriteValueUnitsSpecifier",
    "PowerReadValueUnitsSpecifier",
    "DevicePowerSetDeviceState",
    "GUIDFormatToGlobalPowerPolicy",
    "PowerWriteIconResourceSpecifier",
    "PowerWritePossibleFriendlyName",
    "DevicePowerEnumDevices",
    "PowerOpenUserPowerKey",
    "IsAdminOverrideActive",
    "LoadCurrentPwrScheme",
    "ReadProcessorPwrScheme",
    "PowerOpenSystemPowerKey",
    "PowerDebugDumpSystemPowerPolicy",
    "PowerWriteValueMin",
    "GetPwrDiskSpindownRange",
    "SetActivePwrScheme",
    "PowerReadACValueIndex",
    "PowerWriteACValueIndex",
    "PowerReadACValue",
    "GetCurrentPowerPolicies",
    "DevicePowerClose",
    "PowerSettingUnregisterNotification",
    "PowerDeleteScheme",
    "PowerWriteFriendlyName",
    "PowerDebugDumpPowerPolicy",
    "PowerReadDCValue",
    "PowerReadACDefaultIndex",
    "PowerEnumerate",
    "PowerRemovePowerSetting",
    "PowerReadPossibleValue",
    "PowerWriteValueIncrement",
    "PowerCreateSetting",
    "PowerReadFriendlyName",
    "PowerReplaceDefaultPowerSchemes",
    "ReadPwrScheme",
    "GetPwrCapabilities",
    "PowerReadValueMax",
    "IsPwrShutdownAllowed",
    "PowerPolicyToGUIDFormat",
    "PowerWriteValueMax",
    "PowerWriteACDefaultIndex",
    "PowerDeterminePlatformRoleEx",
    "PowerApplySettingChanges",
    "PowerReadValueIncrement",
    "IsPwrHibernateAllowed",
    "PowerDebugDumpPowerScheme",
    "PowerWritePossibleDescription",
    "PowerWriteSettingAttributes",
    "ReadGlobalPwrPolicy",
    "IsPwrSuspendAllowed",
    "PowerReadDCDefaultIndex",
    "PowerCustomizePlatformPowerSettings",
    "PowerReadIconResourceSpecifier",
    "PowerDebugDifPowerPolicies",
    "PowerImportPowerScheme",
    "GetActivePwrScheme",
    "PowerRegisterSuspendResumeNotification",
    "PowerReadPossibleFriendlyName",
    "PowerReadSecurityDescriptor",
    "PowerIsSettingRangeDefined",
    "PowerSetActiveScheme",
    "SetSuspendState",
    "PowerReadDCValueIndex",
    "WritePwrScheme",
    "PowerSetAlsBrightnessOffset",
    "PowerDebugDifSystemPowerPolicies",
    "PowerCanRestoreIndividualDefaultPowerScheme",
    "PowerDuplicateScheme",
    "CanUserWritePwrScheme",
    "WriteGlobalPwrPolicy",
    "PowerWriteDescription"
  ],
  "ppcsnap.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "prflbmsg.dll": "No exports",
  "printfilterpipelineprxy.dll": [
    "EnumPrintProcessorDatatypesW",
    "ClosePrintProcessor",
    "ControlPrintProcessor",
    "PrintDocumentOnPrintProcessor",
    "DllCanUnloadNow",
    "GetPrintProcessorCapabilities",
    "DllGetClassObject",
    "DllRegisterServer",
    "OpenPrintProcessor",
    "DllUnregisterServer"
  ],
  "printui.dll": [
    "PrintUIDownloadAndInstallLegacyDriver",
    "LaunchPlatformHelp",
    "PrinterPropPageProvider",
    "vPrinterPropPages",
    "bPrinterSetup",
    "DocumentPropertiesWrap",
    "bFolderRefresh",
    "DllRegisterServer",
    "DllUnregisterServer",
    "PrintNotifyTray_Exit",
    "RegisterPrintNotify",
    "ShowHelpLinkDialog",
    "ConnectToPrinterDlg",
    "bFolderEnumPrinters",
    "vQueueCreate",
    "DllMain",
    "PrintNotifyTray_Init",
    "DllCanUnloadNow",
    "StringToArgv",
    "UnregisterPrintNotify",
    "bFolderGetPrinter",
    "vServerPropPages",
    "ShowErrorMessageSC",
    "ShowErrorMessageHR",
    "ConstructPrinterFriendlyName",
    "DllGetClassObject",
    "vDocumentDefaults",
    "PrintUIEntryW",
    "PnPInterface",
    "ReleaseArgv"
  ],
  "prncache.dll": "No exports",
  "prnfldr.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "prnntfy.dll": [
    "PrintNotifyTray_Exit",
    "AsyncUILoaderEntryW",
    "DllCanUnloadNow",
    "PrintNotifyTray_Init",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "prntvpt.dll": [
    "PTConvertDevModeToPrintTicket",
    "GetPrintCapabilitiesThunk",
    "GetDeviceNamespacesThunk",
    "ConvertDevModeToPrintTicketThunk",
    "ConvertDevModeToPrintTicketThunk2",
    "DllRegisterServer",
    "MergeAndValidatePrintTicketThunk",
    "GetSchemaVersionThunk",
    "DllUnregisterServer",
    "BindPTProviderThunk",
    "PTOpenProviderEx",
    "PTCloseProvider",
    "UnbindPTProviderThunk",
    "DllMain",
    "DllCanUnloadNow",
    "PTMergeAndValidatePrintTicket",
    "PTGetPrintCapabilities",
    "PTConvertPrintTicketToDevMode",
    "PTReleaseMemory",
    "PTOpenProvider",
    "DllGetClassObject",
    "MergeAndValidatePrintTicketThunk2",
    "GetPrintCapabilitiesThunk2",
    "GetDeviceDefaultPrintTicketThunk",
    "ConvertPrintTicketToDevModeThunk",
    "ConvertPrintTicketToDevModeThunk2",
    "PTQuerySchemaVersionSupport"
  ],
  "procinst.dll": [
    "ProcessorClassInstall"
  ],
  "profapi.dll": "No exports",
  "profext.dll": [
    "DeleteGroupWorker",
    "CreateDirectoryJunctionsForSystemWorker",
    "UpdateAppContainerProfileWorker",
    "RsopSetPolicySettingStatusWorker",
    "CreateAppContainerProfileWorker",
    "DeleteAppContainerProfileWorker",
    "ProcessGroupPolicyCompletedWorker",
    "DeriveAppContainerSidFromAppContainerNameWorker",
    "GetAppContainerFolderPathWorker",
    "DeleteLinkFileWorker",
    "ProcessGroupPolicyCompletedExWorker",
    "GetAppContainerRegistryLocationWorker",
    "LookupAppContainerDisplayNameWorker",
    "RsopFileAccessCheckWorker",
    "CreateDirectoryJunctionsForUserProfileWorker",
    "CreateGroupExWorker",
    "RsopAccessCheckByTypeWorker",
    "RsopResetPolicySettingStatusWorker",
    "CreateLinkFileExWorker"
  ],
  "profprov.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "profsvc.dll": [
    "GetExclusionListFromRegistry",
    "GetUserPreferenceValue",
    "UserProfileServiceMain",
    "GetUserChoiceForSlowLink"
  ],
  "profsvcext.dll": [
    "StartRoamingClassFactories",
    "RefreshSuspendFolderPolicyAndUploadTaskConfig",
    "WaitForNetworkForRoamingProfile",
    "InitializeSuspendFolderPolicyAndUploadTaskConfig",
    "CreateRoamingProviderInstance",
    "StopRoamingClassFactories",
    "ConnectToRoamingVhdProfile"
  ],
  "propsys.dll": [
    "PSPropertyBag_WritePOINTS",
    "PSPropertyBag_ReadDWORD",
    "PropVariantGetUInt64Elem",
    "PropVariantGetBooleanElem",
    "VariantToUInt64WithDefault",
    "InitPropVariantFromBuffer",
    "PSPropertyBag_WriteRECTL",
    "PropVariantGetDoubleElem",
    "PropVariantToInt64VectorAlloc",
    "PropVariantToUInt64WithDefault",
    "VariantToUInt32Array",
    "PropVariantToInt64",
    "PropVariantToUInt16WithDefault",
    "InitPropVariantFromBooleanVector",
    "VariantToUInt16WithDefault",
    "PropVariantGetStringElem",
    "PropVariantToUInt32WithDefault",
    "PropVariantToInt32",
    "InitVariantFromFileTime",
    "PropVariantToInt64WithDefault",
    "PSCreateMemoryPropertyStore",
    "VariantGetDoubleElem",
    "VariantGetUInt64Elem",
    "VariantToInt16",
    "PSCoerceToCanonicalValue",
    "PropVariantToUInt32Vector",
    "VariantToBooleanArray",
    "PSGetPropertySystem",
    "VariantToDoubleArrayAlloc",
    "InitVariantFromDoubleArray",
    "VariantToStringAlloc",
    "InitPropVariantFromInt64Vector",
    "InitVariantFromUInt16Array",
    "InitPropVariantFromUInt32Vector",
    "PSPropertyBag_WriteUnknown",
    "PropVariantToVariant",
    "PSPropertyBag_ReadPOINTS",
    "VariantToUInt32",
    "PSFormatForDisplay",
    "VariantToUInt32ArrayAlloc",
    "PSSetPropertyValue",
    "InitVariantFromStrRet",
    "PSCreatePropertyStoreFromPropertySetStorage",
    "ClearVariantArray",
    "DllGetClassObject",
    "PSPropertyBag_ReadBSTR",
    "PropVariantCompareEx",
    "PropVariantToUInt64VectorAlloc",
    "VariantGetInt16Elem",
    "InitPropVariantFromResource",
    "PropVariantToUInt64Vector",
    "VariantToUInt32WithDefault",
    "PSGetPropertyDescriptionByName",
    "PSStringFromPropertyKey",
    "VariantGetBooleanElem",
    "InitPropVariantVectorFromPropVariant",
    "PropVariantToUInt16Vector",
    "VariantToInt16WithDefault",
    "VariantGetInt64Elem",
    "PropVariantToStringVector",
    "VariantToPropVariant",
    "VariantToBoolean",
    "PropVariantGetUInt32Elem",
    "PropVariantToBooleanWithDefault",
    "StgSerializePropVariant",
    "InitPropVariantFromCLSID",
    "PropVariantToStringVectorAlloc",
    "VariantToBooleanArrayAlloc",
    "PSPropertyKeyFromString",
    "PSGetPropertyDescription",
    "VariantGetElementCount",
    "PSPropertyBag_ReadInt",
    "PropVariantToFileTimeVector",
    "PropVariantToFileTime",
    "PropVariantToDouble",
    "PropVariantToUInt64",
    "DllUnregisterServer",
    "PSPropertyBag_ReadRECTL",
    "InitVariantFromResource",
    "VariantToUInt16Array",
    "PropVariantToUInt16VectorAlloc",
    "VariantGetUInt16Elem",
    "InitVariantFromBooleanArray",
    "VariantToDouble",
    "PropVariantToString",
    "PropVariantToStringWithDefault",
    "VariantToGUID",
    "VariantToStrRet",
    "PSLookupPropertyHandlerCLSID",
    "PSGetItemPropertyHandler",
    "PSPropertyBag_WritePOINTL",
    "VariantToString",
    "PSGetImageReferenceForValue",
    "InitVariantFromInt32Array",
    "PropVariantGetElementCount",
    "PropVariantToGUID",
    "PSPropertyBag_ReadStream",
    "VariantToBuffer",
    "VariantToStringWithDefault",
    "VariantToUInt64",
    "PropVariantToInt16",
    "PSFormatForDisplayAlloc",
    "PropVariantChangeType",
    "PSCreateSimplePropertyChange",
    "InitPropVariantFromInt16Vector",
    "InitVariantFromUInt32Array",
    "PSPropertyBag_WriteLONG",
    "PSPropertyBag_WriteBSTR",
    "InitPropVariantFromFileTime",
    "PSPropertyBag_ReadSHORT",
    "InitPropVariantFromPropVariantVectorElem",
    "PSPropertyBag_WriteULONGLONG",
    "VariantToUInt64Array",
    "PSPropertyBag_ReadType",
    "VariantGetStringElem",
    "VariantToBooleanWithDefault",
    "InitPropVariantFromStrRet",
    "PropVariantToDoubleWithDefault",
    "VariantToInt64Array",
    "PSPropertyBag_ReadBOOL",
    "InitVariantFromUInt64Array",
    "InitPropVariantFromUInt64Vector",
    "PSFormatPropertyValue",
    "PSGetItemPropertyHandlerWithCreateObject",
    "PSGetNameFromPropertyKey",
    "PSPropertyBag_WriteSHORT",
    "PropVariantToBooleanVectorAlloc",
    "PropVariantToBuffer",
    "VariantToInt32",
    "PSCreateAdapterFromPropertyStore",
    "PropVariantToInt64Vector",
    "PropVariantToDoubleVector",
    "PropVariantToInt16WithDefault",
    "PSGetPropertyDescriptionListFromString",
    "InitPropVariantFromGUIDAsString",
    "VariantGetInt32Elem",
    "PSGetPropertyValue",
    "PropVariantToInt16VectorAlloc",
    "VariantToUInt64ArrayAlloc",
    "InitVariantFromInt64Array",
    "VariantGetUInt32Elem",
    "VariantToInt32ArrayAlloc",
    "PropVariantGetInt16Elem",
    "InitVariantFromVariantArrayElem",
    "VariantToDosDateTime",
    "InitPropVariantFromStringVector",
    "PSPropertyBag_WriteStream",
    "InitPropVariantFromFileTimeVector",
    "PropVariantToStrRet",
    "InitPropVariantFromUInt16Vector",
    "VariantToDoubleWithDefault",
    "InitVariantFromGUIDAsString",
    "PSPropertyBag_ReadUnknown",
    "VariantToInt16ArrayAlloc",
    "PSGetNamedPropertyFromPropertyStorage",
    "VariantToInt16Array",
    "PSCreateMultiplexPropertyStore",
    "PSPropertyBag_ReadLONG",
    "VariantToStringArray",
    "PSPropertyBag_ReadULONGLONG",
    "PropVariantToInt32VectorAlloc",
    "PSPropertyBag_WriteStr",
    "PropVariantToInt32WithDefault",
    "PSPropertyBag_WritePropertyKey",
    "VariantToDoubleArray",
    "PSUnregisterPropertySchema",
    "PSPropertyBag_WriteGUID",
    "StgDeserializePropVariant",
    "VariantToFileTime",
    "VariantToInt64WithDefault",
    "VariantToInt32Array",
    "InitVariantFromBuffer",
    "PropVariantToInt32Vector",
    "VariantToInt64",
    "PSRefreshPropertySchema",
    "PSCreateDelayedMultiplexPropertyStore",
    "PSCreatePropertyStoreFromObject",
    "PropVariantToDoubleVectorAlloc",
    "PropVariantToFileTimeVectorAlloc",
    "PSPropertyBag_WriteDWORD",
    "DllRegisterServer",
    "PSPropertyBag_WriteBOOL",
    "PropVariantToUInt16",
    "VariantCompare",
    "PSPropertyBag_ReadStrAlloc",
    "InitVariantFromInt16Array",
    "PropVariantToInt16Vector",
    "InitPropVariantFromInt32Vector",
    "InitPropVariantFromDoubleVector",
    "VariantToStringArrayAlloc",
    "VariantToInt32WithDefault",
    "PropVariantGetFileTimeElem",
    "PropVariantToUInt32",
    "PSPropertyBag_ReadPOINTL",
    "InitPropVariantFromStringAsVector",
    "InitVariantFromFileTimeArray",
    "VariantToInt64ArrayAlloc",
    "DllCanUnloadNow",
    "PSPropertyBag_ReadPropertyKey",
    "InitVariantFromStringArray",
    "PropVariantGetInt64Elem",
    "PSPropertyBag_Delete",
    "PSPropertyBag_WriteInt",
    "PropVariantToBoolean",
    "GetProxyDllInfo",
    "PropVariantToBSTR",
    "PropVariantToBooleanVector",
    "PropVariantGetUInt16Elem",
    "PSCreatePropertyChangeArray",
    "PSGetPropertyFromPropertyStorage",
    "PSEnumeratePropertyDescriptions",
    "PSRegisterPropertySchema",
    "PropVariantGetInt32Elem",
    "PSGetPropertyKeyFromName",
    "PSPropertyBag_ReadStr",
    "ClearPropVariantArray",
    "VariantToUInt16ArrayAlloc",
    "PropVariantToStringAlloc",
    "PropVariantToUInt32VectorAlloc",
    "VariantToUInt16",
    "PSPropertyBag_ReadGUID"
  ],
  "provcore.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "provsvc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "ProviderServiceMain"
  ],
  "provthrd.dll": [
    "private: void __thiscall ProvObjectIdentifier::OverWrite(unsigned long const *)",
    "public: __thiscall ProvFixedLengthOctetStringType::ProvFixedLengthOctetStringType(class ProvFixedLengthOctetStringType const &)",
    "public: __thiscall ProvPositiveRangeType::ProvPositiveRangeType(unsigned long,long)",
    "public: void * __thiscall ProvEventObject::GetHandle(void)",
    "public: __thiscall ProvCounter64Type::ProvCounter64Type(unsigned long,unsigned long)",
    "public: virtual class ProvInstanceType * __thiscall ProvDateTimeType::Copy(void)const",
    "public: __thiscall ProvOpaque::ProvOpaque(unsigned char const *,unsigned long)",
    "protected: int __thiscall ProvPositiveRangedType::RecursiveDef(void)",
    "public: __thiscall ProvNetworkAddressType::ProvNetworkAddressType(class ProvIpAddress const &)",
    "public: class WmiOperatorEqualOrLessNode & __thiscall WmiOperatorEqualOrLessNode::operator=(class WmiOperatorEqualOrLessNode const &)",
    "public: __thiscall ProvCounterType::ProvCounterType(unsigned short const *)",
    "public: class ProvFixedType & __thiscall ProvFixedType::operator=(class ProvFixedType const &)",
    "public: static int __stdcall ProvDebugLog::Startup(void)",
    "public: virtual unsigned short * __thiscall ProvPhysAddressType::GetStringValue(void)const",
    "public: __thiscall WmiOperatorEqualNode::WmiOperatorEqualNode(class WmiOperatorEqualNode const &)",
    "const ProvEnumeratedType::`vftable'{for `ProvInstanceType'}",
    "const ProvFixedLengthPhysAddressType::`vftable'{for `ProvPositiveRangedType'}",
    "public: __thiscall ProvFixedLengthPhysAddressType::ProvFixedLengthPhysAddressType(class ProvFixedLengthPhysAddressType const &)",
    "const WmiOperatorIsANode::`vftable'",
    "public: __thiscall WmiSignedIntegerNode::WmiSignedIntegerNode(unsigned short *,long,unsigned long,class WmiTreeNode *)",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorLikeNode::Copy(void)",
    "public: virtual unsigned short * __thiscall ProvDisplayStringType::GetStringValue(void)const",
    "const WmiUnsignedIntegerRangeNode::`vftable'",
    "public: virtual class ProvPositiveRangeType * __thiscall ProvPositiveRangeType::Copy(void)",
    "public: int __thiscall WmiStringNode::LexicographicallyAfter(unsigned short * &)",
    "public: virtual class WmiTreeNode * __thiscall WmiAndNode::Copy(void)",
    "public: __thiscall ProvPositiveRangedType::ProvPositiveRangedType(unsigned short const *)",
    "public: __thiscall ProvDateTimeType::ProvDateTimeType(class ProvOctetString const &)",
    "public: __thiscall ProvFixedLengthOpaqueType::ProvFixedLengthOpaqueType(unsigned long const &,unsigned short const *)",
    "public: int __thiscall ProvUInteger32::Equivalent(class ProvUInteger32 const &)const",
    "public: virtual class WmiTreeNode * __thiscall WmiSignedIntegerRangeNode::Copy(void)",
    "public: void __thiscall WmiOperatorLessNode::`default constructor closure'(void)",
    "public: virtual void __thiscall WmiUnsignedIntegerNode::Print(void)",
    "private: class ProvLexicon * __thiscall ProvBitStringType::Get(void)",
    "public: __thiscall ProvCounterType::ProvCounterType(unsigned long)",
    "public: virtual __thiscall WmiOperatorNotLikeNode::~WmiOperatorNotLikeNode(void)",
    "public: enum ProvRowStatusType::ProvRowStatusEnum __thiscall ProvRowStatusType::GetRowStatus(void)const",
    "public: unsigned short * __thiscall CBString::GetString(void)",
    "public: virtual int __thiscall ProvCounter64Type::IsProvV1Type(void)const",
    "public: __thiscall ProvCounterType::ProvCounterType(void)",
    "public: class ProvValue & __thiscall ProvCounter64::operator=(class ProvCounter64 const &)",
    "public: void __thiscall ProvPositiveRangedType::SetStatus(int const &)",
    "const ProvNetworkAddressType::`vftable'",
    "const ProvGaugeType::`vftable'{for `ProvPositiveRangedType'}",
    "public: virtual __thiscall ProvOctetStringType::~ProvOctetStringType(void)",
    "public: virtual class WmiTreeNode * __thiscall WmiSignedIntegerNode::Copy(void)",
    "public: virtual __thiscall ProvPositiveRangedType::~ProvPositiveRangedType(void)",
    "protected: int __thiscall ProvUDPAddressType::Parse(unsigned short const *)",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorIsANode::GetRange(void)",
    "public: __thiscall WmiOperatorNode::WmiOperatorNode(class WmiOperatorNode const &)",
    "public: unsigned long __thiscall Disjunctions::GetDisjunctionCount(void)",
    "public: virtual class ProvInstanceType * __thiscall ProvIpAddressType::Copy(void)const",
    "const ProvOpaque::`vftable'",
    "protected: int __thiscall ProvIntegerType::Parse(unsigned short const *)",
    "protected: virtual int __thiscall ProvOctetStringType::Equivalent(class ProvInstanceType const &)const",
    "public: __thiscall WmiTreeNode::WmiTreeNode(unsigned long,void *,class WmiTreeNode *,class WmiTreeNode *,class WmiTreeNode *)",
    "public: __thiscall WmiOperatorEqualOrLessNode::WmiOperatorEqualOrLessNode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: void __thiscall ProvUInteger32::SetValue(unsigned long)",
    "public: __thiscall CBString::CBString(void)",
    "public: __thiscall ProvEnumeratedType::ProvEnumeratedType(unsigned short const *,long const &)",
    "protected: void __thiscall QueryPreprocessor::TransformNotOrExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: int __thiscall ProvObjectIdentifier::operator!=(class ProvObjectIdentifier const &)const",
    "public: __thiscall ProvPositiveRangeType::ProvPositiveRangeType(class ProvPositiveRangeType const &)",
    "public: virtual unsigned short * __thiscall ProvMacAddressType::GetStringValue(void)const",
    "public: class WmiTreeNode * __thiscall WmiTreeNode::GetParent(void)",
    "public: long __thiscall ProvInteger::GetValue(void)const",
    "public: virtual __thiscall WmiOperatorNode::~WmiOperatorNode(void)",
    "public: virtual int __thiscall ProvNullType::IsProvV2CType(void)const",
    "public: virtual class WmiTreeNode * __thiscall WmiStringNode::Copy(void)",
    "public: virtual class ProvInstanceType * __thiscall ProvOpaqueType::Copy(void)const",
    "public: __thiscall ProvIpAddressType::ProvIpAddressType(class ProvIpAddress const &)",
    "protected: int __thiscall ProvCounter64Type::Parse(unsigned short const *)",
    "public: virtual __thiscall ProvInstanceType::~ProvInstanceType(void)",
    "public: int __thiscall PartitionSet::Leaf(void)",
    "public: class ProvOctetStringType & __thiscall ProvOctetStringType::operator=(class ProvOctetStringType const &)",
    "public: class QueryPreprocessor & __thiscall QueryPreprocessor::operator=(class QueryPreprocessor const &)",
    "protected: virtual int __thiscall ProvOpaqueType::Equivalent(class ProvInstanceType const &)const",
    "public: __thiscall WmiSignedIntegerNode::WmiSignedIntegerNode(class WmiSignedIntegerNode const &)",
    "public: virtual __thiscall ProvTimeTicksType::~ProvTimeTicksType(void)",
    "public: __thiscall ProvIpAddressType::ProvIpAddressType(unsigned long)",
    "public: __thiscall ProvRowStatusType::ProvRowStatusType(class ProvInteger const &)",
    "public: void __cdecl ProvDebugLog::WriteA(char const *,...)",
    "public: unsigned char * __thiscall ProvOpaqueType::GetValue(void)const",
    "const ProvInteger::`vftable'",
    "private: void __thiscall ProvDateTimeType::Encode(unsigned long const &,unsigned long const &,unsigned long const &,unsigned long const &,unsigned long const &,unsigned long const &,unsigned long const &,unsigned long const &,unsigned long const &,unsigned long const &,unsigned long const &)",
    "public: __thiscall ProvFixedLengthOctetStringType::ProvFixedLengthOctetStringType(unsigned long const &)",
    "public: __thiscall ProvDisplayStringType::ProvDisplayStringType(class ProvOctetString const &,unsigned short const *)",
    "public: virtual __thiscall ProvPositiveRangeType::~ProvPositiveRangeType(void)",
    "public: void __thiscall ProvCounter::SetValue(unsigned long)",
    "public: void __thiscall ProvObjectIdentifier::SetValue(unsigned long const *,unsigned long)",
    "public: enum ProvLexicon::LexiconToken __thiscall ProvLexicon::GetToken(void)",
    "protected: virtual int __thiscall ProvCounter64Type::Equivalent(class ProvInstanceType const &)const",
    "public: __thiscall ProvEnumeratedType::ProvEnumeratedType(unsigned short const *,unsigned short const *)",
    "private: class ProvLexicon * __thiscall ProvDateTimeType::Match(enum ProvLexicon::LexiconToken)",
    "public: int __thiscall ProvInstanceType::operator!=(class ProvInstanceType const &)const",
    "const ProvOctetStringType::`vftable'{for `ProvInstanceType'}",
    "public: virtual void __thiscall WmiOperatorLessNode::Print(void)",
    "public: __thiscall ProvFixedLengthOctetStringType::ProvFixedLengthOctetStringType(unsigned long const &,unsigned char const *)",
    "public: __thiscall WmiOperatorGreaterNode::WmiOperatorGreaterNode(class WmiOperatorGreaterNode const &)",
    "public: static int __stdcall ProvAnalyser::IsDecimal(unsigned short)",
    "public: class ProvValue & __thiscall ProvOpaque::operator=(class ProvOpaque const &)",
    "public: static int __stdcall ProvAnalyser::IsWhitespace(unsigned short)",
    "public: enum WmiTriState __thiscall Conjunctions::Initialize(void)",
    "public: class ProvGaugeType & __thiscall ProvGaugeType::operator=(class ProvGaugeType const &)",
    "const ProvOctetStringType::`vftable'{for `ProvPositiveRangedType'}",
    "protected: virtual unsigned char * __thiscall ProvOctetString::Replicate(unsigned char const *,unsigned long)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::RecursiveSortConditionals(class WmiTreeNode * &,class WmiTreeNode * &)",
    "public: __thiscall ProvTimeTicksType::ProvTimeTicksType(unsigned long)",
    "public: virtual unsigned short * __thiscall ProvTimeTicksType::GetStringValue(void)const",
    "public: void __thiscall WmiTreeNode::GetData(void * *)",
    "public: void __thiscall ProvPositiveRangeType::SetLowerBound(unsigned long const &)",
    "protected: virtual int __thiscall ProvIntegerType::Equivalent(class ProvInstanceType const &)const",
    "public: void __cdecl ProvDebugLog::WriteFileAndLine(char const *,unsigned long,unsigned short const *,...)",
    "const ProvObjectIdentifierType::`vftable'",
    "protected: __thiscall ProvValue::ProvValue(void)",
    "public: virtual __thiscall WmiTreeNode::~WmiTreeNode(void)",
    "public: void __cdecl ProvDebugLog::WriteFileAndLineW(unsigned short const *,unsigned long,unsigned short const *,...)",
    "public: virtual class WmiTreeNode * __thiscall WmiNullNode::Copy(void)",
    "public: __thiscall ProvObjectIdentifierType::ProvObjectIdentifierType(void)",
    "public: class WmiNotNode & __thiscall WmiNotNode::operator=(class WmiNotNode const &)",
    "public: void __thiscall ProvAnalyser::PutBack(class ProvLexicon const *)",
    "public: unsigned long __thiscall ProvObjectIdentifierType::GetValueLength(void)const",
    "const ProvFixedLengthOctetStringType::`vftable'{for `ProvInstanceType'}",
    "protected: void __thiscall QueryPreprocessor::TransformOrFalseEvaluation(class WmiTreeNode * &,class WmiTreeNode *)",
    "const WmiSignedIntegerRangeNode::`vftable'",
    "public: virtual void __thiscall ProvEventObject::Process(void)",
    "public: virtual void __thiscall WmiStringNode::Print(void)",
    "public: __thiscall ProvRowStatusType::ProvRowStatusType(class ProvRowStatusType const &)",
    "public: __thiscall PartitionSet::PartitionSet(class PartitionSet const &)",
    "public: __thiscall ProvIpAddressType::ProvIpAddressType(unsigned short const *)",
    "public: unsigned short * __thiscall WmiStringRangeNode::LowerBound(void)",
    "public: __thiscall ProvMacAddressType::ProvMacAddressType(class ProvOctetString const &)",
    "public: __thiscall ProvOSIAddressType::ProvOSIAddressType(void)",
    "public: int __thiscall ProvGauge::Equivalent(class ProvGauge const &)const",
    "public: static unsigned long __stdcall ProvAnalyser::HexCharToDecInteger(char)",
    "public: __thiscall ProvBitStringType::ProvBitStringType(class ProvBitStringType const &)",
    "public: class ProvRowStatusType & __thiscall ProvRowStatusType::operator=(class ProvRowStatusType const &)",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorGreaterNode::Copy(void)",
    "protected: int __thiscall ProvPositiveRangedType::Parse(unsigned short const *)",
    "protected: class ProvLexicon * __thiscall ProvPositiveRangedType::Get(void)",
    "public: __thiscall WmiUnsignedIntegerNode::WmiUnsignedIntegerNode(unsigned short *,unsigned long,unsigned long,class WmiTreeNode *)",
    "public: class WmiUnsignedIntegerRangeNode & __thiscall WmiUnsignedIntegerRangeNode::operator=(class WmiUnsignedIntegerRangeNode const &)",
    "public: __thiscall ProvOctetStringType::ProvOctetStringType(class ProvOctetStringType const &)",
    "public: virtual class WmiTreeNode * __thiscall WmiNullRangeNode::Copy(void)",
    "public: int __thiscall WmiUnsignedIntegerNode::LexicographicallyAfter(unsigned long &)",
    "public: __thiscall ProvTimeTicks::ProvTimeTicks(class ProvTimeTicks const &)",
    "public: void __thiscall WmiOperatorNotIsANode::`default constructor closure'(void)",
    "public: unsigned short * __thiscall WmiStringRangeNode::UpperBound(void)",
    "protected: virtual class WmiTreeNode * __thiscall QueryPreprocessor::AllocTypeNode(void *,unsigned short *,struct tagVARIANT &,enum WmiValueNode::WmiValueFunction,enum WmiValueNode::WmiValueFunction,class WmiTreeNode *)",
    "public: int __thiscall ProvInstanceType::operator==(class ProvInstanceType const &)const",
    "const ProvTimeTicksType::`vftable'",
    "public: class ProvDisplayStringType & __thiscall ProvDisplayStringType::operator=(class ProvDisplayStringType const &)",
    "public: __thiscall ProvNullType::ProvNullType(class ProvNullType const &)",
    "public: __thiscall WmiOperatorLessNode::WmiOperatorLessNode(class WmiTreeNode *,class WmiTreeNode *)",
    "protected: void __thiscall QueryPreprocessor::TransformNotAndExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: class ProvFixedLengthPhysAddressType & __thiscall ProvFixedLengthPhysAddressType::operator=(class ProvFixedLengthPhysAddressType const &)",
    "public: __thiscall ProvTimeTicks::ProvTimeTicks(unsigned long)",
    "public: class ProvFixedLengthOctetStringType & __thiscall ProvFixedLengthOctetStringType::operator=(class ProvFixedLengthOctetStringType const &)",
    "public: unsigned short * __thiscall ProvDisplayStringType::GetValue(void)const",
    "public: virtual __thiscall ProvTimeTicks::~ProvTimeTicks(void)",
    "public: virtual class ProvValue * __thiscall ProvUInteger32::Copy(void)const",
    "const ProvGauge::`vftable'",
    "const ProvPositiveRangeType::`vftable'",
    "public: int __thiscall ProvValue::operator==(class ProvValue const &)const",
    "protected: virtual void __thiscall ProvOctetString::Initialize(unsigned char const *,unsigned long)",
    "public: __thiscall WmiNullNode::WmiNullNode(unsigned short *,unsigned long,class WmiTreeNode *)",
    "public: __thiscall ProvBitStringType::ProvBitStringType(unsigned short const *,unsigned short const * *,unsigned long const &)",
    "public: virtual int __thiscall ProvInstanceType::IsProvV1Type(void)const",
    "public: virtual class WmiTreeNode * __thiscall WmiOrNode::Copy(void)",
    "public: virtual __thiscall WmiNullNode::~WmiNullNode(void)",
    "public: void __thiscall WmiOperatorEqualOrLessNode::`default constructor closure'(void)",
    "public: void __thiscall ProvGauge::SetValue(unsigned long)",
    "protected: int __thiscall ProvObjectIdentifier::Equivalent(class ProvObjectIdentifier const &)const",
    "public: virtual __thiscall WmiTreeNodeIterator::~WmiTreeNodeIterator(void)",
    "public: __thiscall ProvNegativeRangeType::ProvNegativeRangeType(long,long)",
    "public: class ProvCounter64Type & __thiscall ProvCounter64Type::operator=(class ProvCounter64Type const &)",
    "public: __thiscall ProvOctetString::ProvOctetString(unsigned char const *,unsigned long)",
    "public: __thiscall ProvGaugeType::ProvGaugeType(unsigned short const *,unsigned short const *)",
    "public: __thiscall ProvObjectIdentifierType::ProvObjectIdentifierType(unsigned long const *,unsigned long)",
    "public: __thiscall ProvOctetStringType::ProvOctetStringType(class ProvOctetString const &,unsigned short const *)",
    "public: virtual void __thiscall WmiSignedIntegerNode::Print(void)",
    "public: __thiscall ProvOpaqueType::ProvOpaqueType(unsigned short const *,unsigned short const *)",
    "public: __thiscall WmiOperatorEqualOrGreaterNode::WmiOperatorEqualOrGreaterNode(class WmiOperatorEqualOrGreaterNode const &)",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorNotEqualNode::Copy(void)",
    "public: virtual unsigned short * __thiscall ProvIntegerType::GetStringValue(void)const",
    "protected: int __thiscall ProvCounterType::Parse(unsigned short const *)",
    "public: virtual void __thiscall ProvEventObject::Complete(void)",
    "public: static unsigned short __stdcall ProvAnalyser::DecIntegerToDecWChar(unsigned char)",
    "protected: __thiscall ProvInstanceType::ProvInstanceType(class ProvInstanceType const &)",
    "public: virtual void __thiscall WmiAndNode::Print(void)",
    "public: void __thiscall PartitionSet::SetKeyIndex(unsigned long)",
    "private: int __thiscall ProvEnumeratedType::Parse(unsigned short const *)",
    "protected: void __thiscall QueryPreprocessor::TransformNonIntersectingRange(class WmiTreeNode * &,class WmiTreeNode *)",
    "protected: enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::RemoveInvariants(void *,class WmiTreeNode * &)",
    "const ProvPhysAddressType::`vftable'{for `ProvPositiveRangedType'}",
    "public: virtual __thiscall ProvUInteger32::~ProvUInteger32(void)",
    "public: virtual __thiscall WmiUnsignedIntegerRangeNode::~WmiUnsignedIntegerRangeNode(void)",
    "public: int __thiscall ProvCounter64::Equivalent(class ProvCounter64 const &)const",
    "const WmiAndNode::`vftable'",
    "public: __thiscall ProvFixedLengthOctetStringType::ProvFixedLengthOctetStringType(unsigned long const &,unsigned short const *)",
    "public: enum WmiTriState __thiscall WmiSignedIntegerRangeNode::GetOverlappingRange(class WmiSignedIntegerRangeNode &,class WmiSignedIntegerRangeNode * &)",
    "const ProvUInteger32::`vftable'",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorEqualNode::Copy(void)",
    "public: unsigned long & __thiscall ProvObjectIdentifier::operator[](unsigned long)const",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorNotIsAExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "const ProvGaugeType::`vftable'{for `ProvInstanceType'}",
    "public: __thiscall ProvCounter64Type::ProvCounter64Type(class ProvCounter64 const &)",
    "public: __thiscall WmiOrNode::WmiOrNode(class WmiTreeNode *,class WmiTreeNode *,class WmiTreeNode *)",
    "public: virtual __thiscall ProvCounter::~ProvCounter(void)",
    "public: class WmiSignedIntegerNode & __thiscall WmiSignedIntegerNode::operator=(class WmiSignedIntegerNode const &)",
    "public: virtual __thiscall WmiOperatorEqualOrLessNode::~WmiOperatorEqualOrLessNode(void)",
    "public: virtual class ProvInstanceType * __thiscall ProvFixedLengthPhysAddressType::Copy(void)const",
    "public: virtual class ProvValue * __thiscall ProvObjectIdentifier::Copy(void)const",
    "public: __thiscall ProvObjectIdentifierType::ProvObjectIdentifierType(unsigned short const *)",
    "public: void __thiscall ProvEventObject::Clear(void)",
    "public: virtual __thiscall WmiOrNode::~WmiOrNode(void)",
    "const ProvFixedLengthDisplayStringType::`vftable'{for `ProvPositiveRangedType'}",
    "protected: void __thiscall QueryPreprocessor::PrintTree(class WmiTreeNode *)",
    "public: class ProvObjectIdentifier * __thiscall ProvObjectIdentifier::Cut(class ProvObjectIdentifier &)const",
    "public: virtual __thiscall ProvFixedLengthDisplayStringType::~ProvFixedLengthDisplayStringType(void)",
    "public: __thiscall ProvNegativeRangeType::ProvNegativeRangeType(void)",
    "public: static long ProvDebugLog::s_ReferenceCount",
    "public: __thiscall WmiOperatorNotIsANode::WmiOperatorNotIsANode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: __thiscall WmiOperatorNotLikeNode::WmiOperatorNotLikeNode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: class Conjunctions * __thiscall Disjunctions::GetDisjunction(unsigned long)",
    "public: __thiscall ProvIpAddressType::ProvIpAddressType(class ProvIpAddressType const &)",
    "protected: int __thiscall ProvTimeTicksType::Parse(unsigned short const *)",
    "public: __thiscall WmiSignedIntegerRangeNode::WmiSignedIntegerRangeNode(unsigned short *,unsigned long,int,int,int,int,long,long,class WmiTreeNode *,class WmiTreeNode *)",
    "public: static int __stdcall ProvAnalyser::IsHex(unsigned short)",
    "public: void __thiscall WmiAndNode::`default constructor closure'(void)",
    "public: virtual __thiscall ProvOSIAddressType::~ProvOSIAddressType(void)",
    "public: void __thiscall ProvOctetStringType::`default constructor closure'(void)",
    "const ProvOSIAddressType::`vftable'{for `ProvInstanceType'}",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::EvaluateOrExpression(class WmiTreeNode * &)",
    "const WmiOperatorEqualNode::`vftable'",
    "public: __thiscall ProvPositiveRangeType::ProvPositiveRangeType(void)",
    "public: __thiscall WmiOperatorIsANode::WmiOperatorIsANode(class WmiOperatorIsANode const &)",
    "protected: void __thiscall QueryPreprocessor::RecursiveQuickSort(class WmiRangeNode * *,unsigned long *,unsigned long,unsigned long)",
    "public: int __thiscall ProvObjectIdentifier::Equivalent(class ProvObjectIdentifier const &,unsigned long)const",
    "public: virtual void __thiscall WmiOperatorEqualNode::Print(void)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::EvaluateNotExpression(class WmiTreeNode * &)",
    "public: void __thiscall ProvEventObject::Set(void)",
    "public: __thiscall ProvFixedLengthOpaqueType::ProvFixedLengthOpaqueType(unsigned long const &)",
    "public: class WmiRangeNode & __thiscall WmiRangeNode::operator=(class WmiRangeNode const &)",
    "const ProvFixedLengthPhysAddressType::`vftable'",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorEqualExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: unsigned short * __thiscall ProvDateTimeType::GetValue(void)const",
    "const ProvFixedType::`vftable'",
    "public: virtual class ProvValue * __thiscall ProvNull::Copy(void)const",
    "public: virtual void __thiscall WmiNullRangeNode::Print(void)",
    "public: enum WmiTriState __thiscall WmiStringRangeNode::GetIntersectingRange(class WmiStringRangeNode &,class WmiStringRangeNode * &)",
    "protected: void __thiscall QueryPreprocessor::TransformNotNotExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "protected: void __thiscall QueryPreprocessor::TransformAndTrueEvaluation(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: class ProvValue & __thiscall ProvCounter::operator=(class ProvCounter const &)",
    "public: void __thiscall WmiOperatorGreaterNode::`default constructor closure'(void)",
    "const WmiOperatorLessNode::`vftable'",
    "public: void __thiscall ProvEventObject::`default constructor closure'(void)",
    "public: static void __stdcall ProvDebugLog::Closedown(void)",
    "public: int __thiscall ProvObjectIdentifier::Suffix(unsigned long,class ProvObjectIdentifier &)const",
    "public: __thiscall ProvFixedType::ProvFixedType(class ProvFixedType const &)",
    "const ProvUDPAddressType::`vftable'{for `ProvInstanceType'}",
    "public: virtual class ProvValue * __thiscall ProvCounter64::Copy(void)const",
    "public: virtual __thiscall ProvFixedLengthOctetStringType::~ProvFixedLengthOctetStringType(void)",
    "public: class ProvLexicon * __thiscall ProvAnalyser::Get(int,int,int)",
    "public: class ProvPositiveRangedType & __thiscall ProvPositiveRangedType::operator=(class ProvPositiveRangedType const &)",
    "const ProvOSIAddressType::`vftable'{for `ProvPositiveRangedType'}",
    "public: void __thiscall ProvOpaqueType::`default constructor closure'(void)",
    "public: __thiscall ProvTimeTicksType::ProvTimeTicksType(void)",
    "public: virtual __thiscall WmiOperatorLessNode::~WmiOperatorLessNode(void)",
    "public: __thiscall WmiValueNode::WmiValueNode(unsigned long,unsigned short *,enum WmiValueNode::WmiValueFunction,enum WmiValueNode::WmiValueFunction,unsigned long,class WmiTreeNode *)",
    "public: void __thiscall ProvInstanceType::SetStatus(int)",
    "const WmiOperatorNotEqualNode::`vftable'",
    "private: void __thiscall ProvEnumeratedType::PushBack(void)",
    "public: void __thiscall ProvLexicon::SetToken(enum ProvLexicon::LexiconToken)",
    "public: int __thiscall WmiSignedIntegerNode::LexicographicallyBefore(long &)",
    "protected: void __thiscall ProvPositiveRangedType::PushBack(void)",
    "public: unsigned long __thiscall WmiTreeNode::GetType(void)",
    "public: __thiscall ProvGauge::ProvGauge(long)",
    "public: virtual void __thiscall WmiOperatorNotLikeNode::Print(void)",
    "public: __thiscall ProvRowStatusType::ProvRowStatusType(enum ProvRowStatusType::ProvRowStatusEnum const &)",
    "public: int __thiscall PartitionSet::Root(void)",
    "public: virtual __thiscall ProvFixedType::~ProvFixedType(void)",
    "public: void __thiscall ProvIpAddress::SetValue(unsigned long)",
    "private: int __thiscall ProvBitStringType::Parse(unsigned short const *)",
    "protected: void __thiscall QueryPreprocessor::TransformIntersectingRange(class WmiTreeNode * &,class WmiTreeNode *,class WmiTreeNode *)",
    "public: void * __thiscall ProvObjectIdentifier::operator()(void)const",
    "public: static int __stdcall ProvAnalyser::IsEof(unsigned short)",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorLikeNode::GetRange(void)",
    "public: class ProvFixedLengthOpaqueType & __thiscall ProvFixedLengthOpaqueType::operator=(class ProvFixedLengthOpaqueType const &)",
    "public: virtual class WmiTreeNode * __thiscall WmiTreeNode::Copy(void)",
    "const ProvDisplayStringType::`vftable'{for `ProvPositiveRangedType'}",
    "public: virtual __thiscall ProvValue::~ProvValue(void)",
    "const ProvFixedLengthOctetStringType::`vftable'{for `ProvPositiveRangedType'}",
    "public: __thiscall ProvFixedType::ProvFixedType(unsigned long)",
    "public: enum WmiValueNode::WmiValueFunction __thiscall WmiValueNode::GetConstantFunction(void)",
    "public: virtual unsigned short * __thiscall ProvEnumeratedType::GetStringValue(void)const",
    "const WmiRangeNode::`vftable'",
    "public: __thiscall ProvOpaqueType::ProvOpaqueType(unsigned short const *)",
    "public: static unsigned short __stdcall ProvAnalyser::DecIntegerToHexWChar(unsigned char)",
    "public: void __cdecl ProvDebugLog::WriteFileAndLineA(char const *,unsigned long,char const *,...)",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorLessNode::Copy(void)",
    "public: __thiscall ProvCounter64Type::ProvCounter64Type(void)",
    "public: __thiscall ProvRowStatusType::ProvRowStatusType(long const &)",
    "public: __thiscall WmiStringNode::WmiStringNode(class WmiStringNode const &)",
    "public: class WmiOperatorNotIsANode & __thiscall WmiOperatorNotIsANode::operator=(class WmiOperatorNotIsANode const &)",
    "public: class ProvValue & __thiscall ProvObjectIdentifier::operator=(class ProvObjectIdentifier const &)",
    "public: virtual int __thiscall ProvInstanceType::IsValid(void)const",
    "const ProvFixedLengthOpaqueType::`vftable'{for `ProvInstanceType'}",
    "public: __thiscall ProvNullType::ProvNullType(void)",
    "public: __thiscall ProvIntegerType::ProvIntegerType(long,unsigned short const *)",
    "public: unsigned short * __thiscall ProvEnumeratedType::GetValue(void)const",
    "public: virtual void __thiscall WmiStringRangeNode::Print(void)",
    "public: __thiscall WmiOperatorEqualOrGreaterNode::WmiOperatorEqualOrGreaterNode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: unsigned char * __thiscall ProvOctetStringType::GetValue(void)const",
    "public: unsigned long __thiscall Disjunctions::GetConjunctionCount(void)",
    "public: virtual unsigned short * __thiscall ProvIpAddressType::GetStringValue(void)const",
    "const ProvFixedLengthPhysAddressType::`vftable'{for `ProvInstanceType'}",
    "unsigned short * __stdcall DbcsToUnicodeString(char const *)",
    "const ProvFixedLengthOctetStringType::`vftable'",
    "public: __thiscall ProvNegativeRangeType::ProvNegativeRangeType(class ProvNegativeRangeType const &)",
    "public: enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::PreProcess(void *,struct SQL_LEVEL_1_RPN_EXPRESSION *,class WmiTreeNode *,unsigned long,unsigned short * *,class PartitionSet * &)",
    "const ProvPositiveRangedType::`vftable'",
    "protected: virtual int __thiscall ProvIpAddressType::Equivalent(class ProvInstanceType const &)const",
    "public: __thiscall ProvFixedLengthDisplayStringType::ProvFixedLengthDisplayStringType(unsigned long const &)",
    "public: int __thiscall ProvObjectIdentifier::operator>=(class ProvObjectIdentifier const &)const",
    "const WmiOperatorEqualOrGreaterNode::`vftable'",
    "public: long __thiscall ProvIntegerType::GetValue(void)const",
    "public: enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::PreProcess(void *,struct SQL_LEVEL_1_RPN_EXPRESSION *,class WmiTreeNode * &)",
    "public: __thiscall ProvPhysAddressType::ProvPhysAddressType(class ProvOctetString const &,unsigned short const *)",
    "public: void __thiscall WmiOperatorNotLikeNode::`default constructor closure'(void)",
    "public: __thiscall ProvNetworkAddressType::ProvNetworkAddressType(class ProvNetworkAddressType const &)",
    "public: __thiscall ProvGaugeType::ProvGaugeType(class ProvGauge const &,unsigned short const *)",
    "public: class CBString & __thiscall CBString::operator=(class CBString const &)",
    "public: unsigned long __thiscall ProvCounter64::GetHighValue(void)const",
    "const WmiOperatorNotLikeNode::`vftable'",
    "public: __thiscall QueryPreprocessor::QueryPreprocessor(class QueryPreprocessor const &)",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorEqualOrLessNode::GetRange(void)",
    "public: __thiscall ProvCounter64::ProvCounter64(unsigned long,unsigned long)",
    "public: class ProvOSIAddressType & __thiscall ProvOSIAddressType::operator=(class ProvOSIAddressType const &)",
    "public: class ProvPositiveRangeType & __thiscall ProvPositiveRangeType::operator=(class ProvPositiveRangeType const &)",
    "public: virtual class ProvInstanceType * __thiscall ProvObjectIdentifierType::Copy(void)const",
    "public: virtual void __thiscall WmiOperatorGreaterNode::Print(void)",
    "public: virtual unsigned short * __thiscall ProvRowStatusType::GetStringValue(void)const",
    "public: virtual class ProvInstanceType * __thiscall ProvCounterType::Copy(void)const",
    "public: unsigned long * __thiscall ProvObjectIdentifier::GetValue(void)const",
    "public: __thiscall ProvLexicon::~ProvLexicon(void)",
    "public: int __thiscall ProvObjectIdentifier::operator==(class ProvObjectIdentifier const &)const",
    "public: char * __thiscall ProvObjectIdentifier::GetAllocatedString(void)const",
    "const WmiUnsignedIntegerNode::`vftable'",
    "const ProvMacAddressType::`vftable'{for `ProvPositiveRangedType'}",
    "public: int __thiscall ProvOpaque::Equivalent(class ProvOpaque const &)const",
    "const ProvCounterType::`vftable'",
    "private: int __thiscall ProvBitStringType::BitStringDef(void)",
    "public: __thiscall ProvUDPAddressType::ProvUDPAddressType(unsigned short const *)",
    "protected: void __thiscall QueryPreprocessor::CountDisjunctions(class WmiTreeNode *,unsigned long &)",
    "public: __thiscall ProvOctetStringType::ProvOctetStringType(unsigned char const *,unsigned long,unsigned short const *)",
    "const ProvTimeTicks::`vftable'",
    "public: unsigned long __thiscall ProvGauge::GetValue(void)const",
    "public: virtual int __thiscall ProvInstanceType::IsProvV2CType(void)const",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorNotEqualNode::GetRange(void)",
    "public: void __thiscall ProvInteger::SetValue(long)",
    "public: virtual __thiscall ProvInstanceType::operator void *(void)",
    "public: __thiscall ProvPhysAddressType::ProvPhysAddressType(unsigned short const *)",
    "public: virtual __thiscall ProvMacAddressType::~ProvMacAddressType(void)",
    "public: enum WmiTriState __thiscall Disjunctions::Initialize(void)",
    "private: int __thiscall ProvBitStringType::RecursiveDef(void)",
    "public: void __thiscall ProvDisplayStringType::`default constructor closure'(void)",
    "public: void __thiscall WmiTreeNode::GetRight(class WmiTreeNode * * &)",
    "public: static char __stdcall ProvAnalyser::DecIntegerToOctChar(unsigned char)",
    "public: __thiscall ProvDateTimeType::ProvDateTimeType(class ProvDateTimeType const &)",
    "public: class PartitionSet & __thiscall PartitionSet::operator=(class PartitionSet const &)",
    "public: __thiscall ProvMacAddressType::ProvMacAddressType(void)",
    "public: unsigned long __thiscall ProvIpAddress::GetValue(void)const",
    "public: static char __stdcall ProvAnalyser::DecIntegerToDecChar(unsigned char)",
    "public: void * __thiscall WmiTreeNode::SetData(void *)",
    "public: void __thiscall Conjunctions::SetRange(unsigned long,class WmiRangeNode *)",
    "public: __thiscall QueryPreprocessor::QueryPreprocessor(void)",
    "public: unsigned char * __thiscall ProvOctetString::GetValue(void)const",
    "public: class PartitionSet * __thiscall PartitionSet::GetPartition(unsigned long)",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorLikeExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: virtual __thiscall ProvNullType::~ProvNullType(void)",
    "public: __thiscall ProvFixedLengthDisplayStringType::ProvFixedLengthDisplayStringType(unsigned long const &,class ProvOctetString const &)",
    "public: class Disjunctions & __thiscall Disjunctions::operator=(class Disjunctions const &)",
    "const ProvNull::`vftable'",
    "protected: virtual int __thiscall ProvOctetString::Equivalent(class ProvValue const &)const",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::EvaluateAndExpression(class WmiTreeNode * &)",
    "public: __thiscall CBString::CBString(int)",
    "public: static unsigned long __stdcall ProvAnalyser::DecCharToDecInteger(char)",
    "public: virtual __thiscall WmiOperatorLikeNode::~WmiOperatorLikeNode(void)",
    "public: virtual __thiscall WmiRangeNode::~WmiRangeNode(void)",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorEqualNode::GetRange(void)",
    "public: __thiscall ProvGauge::ProvGauge(class ProvGauge const &)",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorEqualOrGreaterNode::GetRange(void)",
    "public: class ProvOpaqueType & __thiscall ProvOpaqueType::operator=(class ProvOpaqueType const &)",
    "public: __thiscall WmiRangeNode::WmiRangeNode(class WmiRangeNode const &)",
    "public: virtual __thiscall ProvCounter64Type::~ProvCounter64Type(void)",
    "public: __thiscall WmiStringRangeNode::WmiStringRangeNode(unsigned short *,unsigned long,int,int,int,int,unsigned short *,unsigned short *,class WmiTreeNode *,class WmiTreeNode *)",
    "public: __thiscall ProvMacAddressType::ProvMacAddressType(unsigned short const *)",
    "public: __thiscall ProvOpaqueType::ProvOpaqueType(unsigned char const *,unsigned long,unsigned short const *)",
    "public: class WmiTreeNode * __thiscall WmiTreeNodeIterator::GetIterator(void)",
    "public: virtual class ProvInstanceType * __thiscall ProvNetworkAddressType::Copy(void)const",
    "protected: int __thiscall ProvIpAddressType::Parse(unsigned short const *)",
    "public: class WmiTreeNode * __thiscall WmiTreeNode::GetRight(void)",
    "const ProvFixedLengthOpaqueType::`vftable'",
    "const WmiNullRangeNode::`vftable'",
    "public: __thiscall ProvGaugeType::ProvGaugeType(unsigned long,unsigned short const *)",
    "public: class WmiTreeNodeIterator & __thiscall WmiTreeNodeIterator::operator=(class WmiTreeNodeIterator const &)",
    "public: __thiscall ProvEnumeratedType::ProvEnumeratedType(unsigned short const *)",
    "public: class ProvPhysAddressType & __thiscall ProvPhysAddressType::operator=(class ProvPhysAddressType const &)",
    "public: virtual __thiscall PartitionSet::~PartitionSet(void)",
    "const WmiStringNode::`vftable'",
    "public: int __thiscall WmiStringNode::LexicographicallyBefore(unsigned short * &)",
    "protected: void __thiscall QueryPreprocessor::SortRanges(unsigned long,unsigned long *,class WmiRangeNode * *)",
    "public: class Conjunctions & __thiscall Conjunctions::operator=(class Conjunctions const &)",
    "public: class WmiTreeNode * __thiscall WmiTreeNode::SetLeft(class WmiTreeNode *)",
    "public: unsigned short * __thiscall WmiStringNode::GetValue(void)",
    "public: virtual class ProvValue * __thiscall ProvOctetString::Copy(void)const",
    "public: static int __stdcall ProvAnalyser::IsOctal(unsigned short)",
    "public: virtual __thiscall WmiUnsignedIntegerNode::~WmiUnsignedIntegerNode(void)",
    "public: class WmiAndNode & __thiscall WmiAndNode::operator=(class WmiAndNode const &)",
    "public: __thiscall ProvCounter64Type::ProvCounter64Type(unsigned short const *)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::CreateDisjunctions(void *,class WmiTreeNode *,class Disjunctions *,unsigned long,unsigned short * *,unsigned long &)",
    "const ProvNullType::`vftable'",
    "public: int __thiscall ProvObjectIdentifier::operator>(class ProvObjectIdentifier const &)const",
    "public: __thiscall ProvBitStringType::ProvBitStringType(unsigned short const *)",
    "public: class ProvDateTimeType & __thiscall ProvDateTimeType::operator=(class ProvDateTimeType const &)",
    "public: virtual class ProvInstanceType * __thiscall ProvTimeTicksType::Copy(void)const",
    "public: void __thiscall ProvInstanceType::SetNull(int)",
    "public: virtual unsigned short * __thiscall ProvOSIAddressType::GetStringValue(void)const",
    "public: void * __thiscall WmiTreeNode::GetData(void)",
    "public: static unsigned long __stdcall ProvAnalyser::HexWCharToDecInteger(unsigned short)",
    "public: __thiscall WmiOperatorNotEqualNode::WmiOperatorNotEqualNode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: __thiscall ProvIpAddress::ProvIpAddress(class ProvIpAddress const &)",
    "const WmiOrNode::`vftable'",
    "public: enum WmiTriState __thiscall PartitionSet::Initialize(unsigned long)",
    "public: __thiscall PartitionSet::PartitionSet(void)",
    "public: __thiscall ProvFixedLengthOpaqueType::ProvFixedLengthOpaqueType(unsigned long const &,unsigned char const *,unsigned long)",
    "protected: int __thiscall ProvGaugeType::Parse(unsigned short const *)",
    "public: unsigned long __thiscall ProvNetworkAddressType::GetValue(void)const",
    "protected: virtual int __thiscall ProvNullType::Equivalent(class ProvInstanceType const &)const",
    "public: class ProvObjectIdentifier __thiscall ProvObjectIdentifier::operator+(class ProvObjectIdentifier const &)const",
    "public: class ProvEnumeratedType & __thiscall ProvEnumeratedType::operator=(class ProvEnumeratedType const &)",
    "protected: virtual int __thiscall ProvGauge::Equivalent(class ProvValue const &)const",
    "public: unsigned long __thiscall ProvCounter64::GetLowValue(void)const",
    "public: virtual class ProvInstanceType * __thiscall ProvCounter64Type::Copy(void)const",
    "public: __thiscall ProvEnumeratedType::ProvEnumeratedType(unsigned short const *,class ProvInteger const &)",
    "unsigned short * __stdcall UnicodeStringDuplicate(unsigned short const *)",
    "public: __thiscall WmiOperatorNotEqualNode::WmiOperatorNotEqualNode(class WmiOperatorNotEqualNode const &)",
    "protected: virtual void __thiscall ProvOctetString::UnReplicate(unsigned char *)",
    "public: __thiscall WmiTreeNode::WmiTreeNode(class WmiTreeNode const &)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::RecursiveInsertNode(class WmiTreeNode * &,class WmiTreeNode * &)",
    "public: virtual __thiscall WmiOperatorNotIsANode::~WmiOperatorNotIsANode(void)",
    "protected: int __thiscall ProvOpaqueType::Parse(unsigned short const *)",
    "const ProvCounter64::`vftable'",
    "const ProvBitStringType::`vftable'{for `ProvPositiveRangedType'}",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorEqualOrGreaterExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: class ProvIpAddressType & __thiscall ProvIpAddressType::operator=(class ProvIpAddressType const &)",
    "public: unsigned char * __thiscall ProvOpaque::GetValue(void)const",
    "public: unsigned long __thiscall WmiRangeNode::GetIndex(void)",
    "public: class ProvAnalyser & __thiscall ProvAnalyser::operator=(class ProvAnalyser const &)",
    "public: void * __thiscall ProvIpAddress::operator()(void)const",
    "const ProvOpaqueType::`vftable'{for `ProvInstanceType'}",
    "public: __thiscall ProvNetworkAddressType::ProvNetworkAddressType(unsigned long)",
    "public: __thiscall ProvIntegerType::ProvIntegerType(unsigned short const *)",
    "public: unsigned long __thiscall ProvDebugLog::GetLevel(void)",
    "protected: enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::RecursiveRemoveInvariants(void *,class WmiTreeNode * &)",
    "protected: virtual void __thiscall ProvObjectIdentifier::Initialize(unsigned long const *,unsigned long)",
    "public: virtual __thiscall ProvUDPAddressType::~ProvUDPAddressType(void)",
    "public: virtual __thiscall ProvOctetString::~ProvOctetString(void)",
    "public: virtual __thiscall ProvRowStatusType::~ProvRowStatusType(void)",
    "public: virtual class ProvInstanceType * __thiscall ProvPhysAddressType::Copy(void)const",
    "protected: virtual int __thiscall ProvIpAddress::Equivalent(class ProvValue const &)const",
    "public: unsigned long __thiscall WmiUnsignedIntegerRangeNode::UpperBound(void)",
    "public: void __thiscall WmiOrNode::`default constructor closure'(void)",
    "public: int __thiscall WmiRangeNode::InfiniteLowerBound(void)",
    "public: class WmiValueNode & __thiscall WmiValueNode::operator=(class WmiValueNode const &)",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorNotLikeNode::Copy(void)",
    "public: unsigned long __thiscall WmiValueNode::GetIndex(void)",
    "public: unsigned long __thiscall ProvTimeTicks::GetValue(void)const",
    "public: virtual unsigned short * __thiscall ProvNullType::GetStringValue(void)const",
    "protected: virtual int __thiscall ProvGaugeType::Equivalent(class ProvInstanceType const &)const",
    "public: int __thiscall ProvIpAddress::Equivalent(class ProvIpAddress const &)const",
    "public: unsigned short * __thiscall ProvFixedLengthDisplayStringType::GetValue(void)const",
    "public: virtual __thiscall QueryPreprocessor::~QueryPreprocessor(void)",
    "protected: int __thiscall ProvOSIAddressType::Parse(unsigned short const *)",
    "public: void __cdecl ProvDebugLog::WriteFileAndLine(unsigned short const *,unsigned long,unsigned short const *,...)",
    "public: void __thiscall ProvPositiveRangedType::`default constructor closure'(void)",
    "public: __thiscall ProvOpaque::ProvOpaque(class ProvOpaque const &)",
    "public: unsigned long __thiscall ProvTimeTicksType::GetValue(void)const",
    "private: class ProvValue & __thiscall ProvValue::operator=(class ProvValue const &)",
    "public: static unsigned long __stdcall ProvAnalyser::DecWCharToDecInteger(unsigned short)",
    "const ProvOpaqueType::`vftable'{for `ProvPositiveRangedType'}",
    "public: __thiscall CBString::~CBString(void)",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorEqualOrLessNode::Copy(void)",
    "public: __thiscall WmiRangeNode::WmiRangeNode(unsigned long,unsigned short *,unsigned long,int,int,int,int,class WmiTreeNode *,class WmiTreeNode *)",
    "public: __thiscall ProvNullType::ProvNullType(class ProvNull const &)",
    "public: virtual void __thiscall WmiOperatorEqualOrGreaterNode::Print(void)",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorNotIsANode::Copy(void)",
    "public: int __thiscall WmiRangeNode::ClosedLowerBound(void)",
    "protected: int __thiscall QueryPreprocessor::RecursiveEvaluate(void *,struct SQL_LEVEL_1_RPN_EXPRESSION &,class WmiTreeNode *,class WmiTreeNode * *,int &)",
    "public: void __thiscall WmiTreeNode::GetLeft(class WmiTreeNode * * &)",
    "protected: void __thiscall QueryPreprocessor::TransformAndOrExpression(class WmiTreeNode * &,class WmiTreeNode *,class WmiTreeNode *)",
    "public: static char __stdcall ProvAnalyser::DecIntegerToHexChar(unsigned char)",
    "public: int __thiscall ProvTimeTicks::Equivalent(class ProvTimeTicks const &)const",
    "protected: virtual int __thiscall ProvCounterType::Equivalent(class ProvInstanceType const &)const",
    "public: void * __thiscall ProvOctetString::operator()(void)const",
    "public: __thiscall ProvNetworkAddressType::ProvNetworkAddressType(unsigned short const *)",
    "private: class ProvLexicon * __thiscall ProvDateTimeType::Get(void)",
    "const ProvIpAddressType::`vftable'",
    "const ProvObjectIdentifier::`vftable'",
    "public: virtual class ProvValue * __thiscall ProvCounter::Copy(void)const",
    "const ProvPhysAddressType::`vftable'{for `ProvInstanceType'}",
    "const ProvFixedLengthDisplayStringType::`vftable'{for `ProvInstanceType'}",
    "public: class WmiTreeNode * __thiscall WmiTreeNodeIterator::SetIterator(class WmiTreeNode *)",
    "const ProvDisplayStringType::`vftable'{for `ProvInstanceType'}",
    "public: __thiscall ProvAnalyser::ProvAnalyser(unsigned short const *)",
    "public: virtual class ProvInstanceType * __thiscall ProvGaugeType::Copy(void)const",
    "public: __thiscall ProvOSIAddressType::ProvOSIAddressType(class ProvOSIAddressType const &)",
    "public: long __thiscall ProvNegativeRangeType::GetUpperBound(void)",
    "public: virtual class ProvInstanceType * __thiscall ProvFixedLengthOpaqueType::Copy(void)const",
    "const ProvCounter::`vftable'",
    "public: __thiscall ProvObjectIdentifier::ProvObjectIdentifier(unsigned long const *,unsigned long)",
    "public: __thiscall ProvUDPAddressType::ProvUDPAddressType(unsigned char const *)",
    "public: long __thiscall WmiSignedIntegerRangeNode::LowerBound(void)",
    "public: unsigned long __thiscall ProvOctetStringType::GetValueLength(void)const",
    "public: virtual __thiscall WmiOperatorNotEqualNode::~WmiOperatorNotEqualNode(void)",
    "public: __thiscall ProvCounterType::ProvCounterType(class ProvCounter const &)",
    "const WmiTreeNodeIterator::`vftable'",
    "public: __thiscall ProvCounter::ProvCounter(unsigned long)",
    "public: __thiscall WmiUnsignedIntegerRangeNode::WmiUnsignedIntegerRangeNode(class WmiUnsignedIntegerRangeNode const &)",
    "public: __thiscall ProvOSIAddressType::ProvOSIAddressType(unsigned short const *)",
    "public: __thiscall ProvCounter::ProvCounter(class ProvCounter const &)",
    "char * __stdcall UnicodeToDbcsString(unsigned short const *)",
    "public: __thiscall ProvDisplayStringType::ProvDisplayStringType(unsigned short const *)",
    "public: int __thiscall WmiSignedIntegerNode::LexicographicallyAfter(long &)",
    "public: virtual __thiscall WmiNullRangeNode::~WmiNullRangeNode(void)",
    "public: __thiscall ProvIpAddress::ProvIpAddress(unsigned long)",
    "const ProvAnalyser::`vftable'",
    "public: __thiscall ProvIntegerType::ProvIntegerType(class ProvIntegerType const &)",
    "public: virtual unsigned short * __thiscall ProvNetworkAddressType::GetStringValue(void)const",
    "public: class ProvValue & __thiscall ProvGauge::operator=(class ProvGauge const &)",
    "public: void __thiscall ProvPositiveRangeType::SetUpperBound(unsigned long const &)",
    "public: __thiscall ProvDateTimeType::ProvDateTimeType(void)",
    "const ProvIntegerType::`vftable'{for `ProvNegativeRangedType'}",
    "public: __thiscall ProvRowStatusType::ProvRowStatusType(void)",
    "public: virtual __thiscall WmiOperatorEqualOrGreaterNode::~WmiOperatorEqualOrGreaterNode(void)",
    "public: virtual __thiscall ProvEnumeratedType::~ProvEnumeratedType(void)",
    "public: void __thiscall WmiTreeNode::`default constructor closure'(void)",
    "public: __thiscall ProvUInteger32::ProvUInteger32(long)",
    "public: static class ProvDebugLog * ProvDebugLog::s_aLogs",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorEqualOrLessExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: virtual class ProvInstanceType * __thiscall ProvRowStatusType::Copy(void)const",
    "const WmiOperatorNode::`vftable'",
    "public: __thiscall ProvOctetString::ProvOctetString(class ProvOctetString const &)",
    "public: class ProvValue & __thiscall ProvIpAddress::operator=(class ProvIpAddress const &)",
    "public: void __thiscall WmiOperatorEqualNode::`default constructor closure'(void)",
    "public: __thiscall ProvIntegerType::ProvIntegerType(unsigned short const *,unsigned short const *)",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorIsAExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "const ProvUDPAddressType::`vftable'{for `ProvPositiveRangedType'}",
    "public: class ProvEventObject & __thiscall ProvEventObject::operator=(class ProvEventObject const &)",
    "public: __thiscall ProvDisplayStringType::ProvDisplayStringType(unsigned short const *,unsigned short const *)",
    "public: int __thiscall ProvValue::operator!=(class ProvValue const &)const",
    "public: virtual __thiscall ProvDateTimeType::~ProvDateTimeType(void)",
    "protected: enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::DisjunctiveNormalForm(class WmiTreeNode * &)",
    "public: class WmiNullRangeNode & __thiscall WmiNullRangeNode::operator=(class WmiNullRangeNode const &)",
    "public: virtual __thiscall ProvNull::~ProvNull(void)",
    "const ProvCounter64Type::`vftable'",
    "protected: __thiscall ProvInstanceType::ProvInstanceType(int,int)",
    "public: void __thiscall ProvOpaque::SetValue(unsigned char const *,unsigned long)",
    "public: void __thiscall ProvAnalyser::Set(unsigned short const *)",
    "public: virtual __thiscall ProvIpAddress::~ProvIpAddress(void)",
    "public: __thiscall ProvFixedLengthDisplayStringType::ProvFixedLengthDisplayStringType(unsigned long const &,unsigned short const *)",
    "public: virtual __thiscall ProvOpaque::~ProvOpaque(void)",
    "public: __thiscall ProvFixedLengthPhysAddressType::ProvFixedLengthPhysAddressType(unsigned long const &,unsigned short const *)",
    "public: class WmiStringRangeNode & __thiscall WmiStringRangeNode::operator=(class WmiStringRangeNode const &)",
    "public: virtual __thiscall ProvNetworkAddressType::~ProvNetworkAddressType(void)",
    "public: virtual void __thiscall WmiOrNode::Print(void)",
    "public: void __thiscall WmiTreeNode::SetType(unsigned long)",
    "const ProvOctetString::`vftable'",
    "const ProvRowStatusType::`vftable'{for `ProvInstanceType'}",
    "public: __thiscall ProvOSIAddressType::ProvOSIAddressType(class ProvOctetString const &)",
    "public: class ProvUDPAddressType & __thiscall ProvUDPAddressType::operator=(class ProvUDPAddressType const &)",
    "public: virtual class ProvValue * __thiscall ProvIpAddress::Copy(void)const",
    "public: virtual unsigned short * __thiscall ProvCounter64Type::GetStringValue(void)const",
    "public: class ProvValue & __thiscall ProvNull::operator=(class ProvNull const &)",
    "public: int __thiscall ProvObjectIdentifier::operator<=(class ProvObjectIdentifier const &)const",
    "private: int __thiscall ProvEnumeratedType::RecursiveDef(void)",
    "public: class WmiOrNode & __thiscall WmiOrNode::operator=(class WmiOrNode const &)",
    "public: virtual void __thiscall WmiNullNode::Print(void)",
    "private: class ProvLexicon * __thiscall ProvBitStringType::Match(enum ProvLexicon::LexiconToken)",
    "public: void __thiscall PartitionSet::SetPartition(unsigned long,class PartitionSet *)",
    "public: __thiscall ProvCounterType::ProvCounterType(class ProvCounterType const &)",
    "public: virtual __thiscall WmiNotNode::~WmiNotNode(void)",
    "public: __thiscall WmiNullRangeNode::WmiNullRangeNode(unsigned short *,unsigned long,class WmiTreeNode *,class WmiTreeNode *)",
    "public: virtual class ProvInstanceType * __thiscall ProvBitStringType::Copy(void)const",
    "public: virtual unsigned short * __thiscall ProvBitStringType::GetStringValue(void)const",
    "public: class WmiRangeNode * __thiscall Conjunctions::GetRange(unsigned long)",
    "public: __thiscall ProvGaugeType::ProvGaugeType(class ProvGaugeType const &)",
    "public: __thiscall ProvDisplayStringType::ProvDisplayStringType(class ProvDisplayStringType const &)",
    "public: class WmiSignedIntegerRangeNode & __thiscall WmiSignedIntegerRangeNode::operator=(class WmiSignedIntegerRangeNode const &)",
    "public: void __cdecl ProvDebugLog::WriteW(unsigned short const *,...)",
    "protected: virtual int __thiscall ProvOpaque::Equivalent(class ProvValue const &)const",
    "public: __thiscall WmiTreeNodeIterator::WmiTreeNodeIterator(class WmiTreeNode *)",
    "public: static int __stdcall ProvAnalyser::IsLeadingDecimal(unsigned short)",
    "public: unsigned long __thiscall Conjunctions::GetRangeCount(void)",
    "public: void __thiscall ProvPhysAddressType::`default constructor closure'(void)",
    "public: virtual __thiscall WmiAndNode::~WmiAndNode(void)",
    "public: __thiscall ProvOpaqueType::ProvOpaqueType(class ProvOpaqueType const &)",
    "public: __thiscall ProvEnumeratedType::ProvEnumeratedType(class ProvEnumeratedType const &)",
    "public: int __thiscall ProvObjectIdentifier::operator<(class ProvObjectIdentifier const &)const",
    "public: __thiscall WmiOperatorEqualNode::WmiOperatorEqualNode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: class WmiOperatorEqualOrGreaterNode & __thiscall WmiOperatorEqualOrGreaterNode::operator=(class WmiOperatorEqualOrGreaterNode const &)",
    "public: void __thiscall ProvTimeTicks::SetValue(unsigned long)",
    "protected: virtual int __thiscall ProvUInteger32::Equivalent(class ProvValue const &)const",
    "public: virtual class ProvInstanceType * __thiscall ProvFixedLengthOctetStringType::Copy(void)const",
    "const WmiOperatorGreaterNode::`vftable'",
    "public: __thiscall CBString::CBString(unsigned short const *)",
    "public: virtual unsigned short * __thiscall ProvFixedLengthPhysAddressType::GetStringValue(void)const",
    "public: __thiscall ProvBitStringType::ProvBitStringType(unsigned short const *,class ProvOctetString const &)",
    "protected: int __thiscall ProvNetworkAddressType::Parse(unsigned short const *)",
    "public: virtual class ProvInstanceType * __thiscall ProvOSIAddressType::Copy(void)const",
    "public: class WmiOperatorEqualNode & __thiscall WmiOperatorEqualNode::operator=(class WmiOperatorEqualNode const &)",
    "public: virtual class ProvInstanceType * __thiscall ProvMacAddressType::Copy(void)const",
    "public: __thiscall ProvInteger::ProvInteger(class ProvInteger const &)",
    "public: __thiscall Disjunctions::~Disjunctions(void)",
    "public: class ProvInstanceType & __thiscall ProvInstanceType::operator=(class ProvInstanceType const &)",
    "public: __thiscall ProvAnalyser::ProvAnalyser(class ProvAnalyser const &)",
    "public: __thiscall ProvIpAddressType::ProvIpAddressType(void)",
    "public: class ProvValue & __thiscall ProvUInteger32::operator=(class ProvUInteger32 const &)",
    "public: long __thiscall WmiSignedIntegerRangeNode::UpperBound(void)",
    "public: __thiscall ProvRowStatusType::ProvRowStatusType(unsigned short const *)",
    "public: virtual __thiscall WmiOperatorIsANode::~WmiOperatorIsANode(void)",
    "public: enum WmiTriState __thiscall WmiStringRangeNode::GetOverlappingRange(class WmiStringRangeNode &,class WmiStringRangeNode * &)",
    "const ProvMacAddressType::`vftable'{for `ProvInstanceType'}",
    "public: class ProvIntegerType & __thiscall ProvIntegerType::operator=(class ProvIntegerType const &)",
    "public: __thiscall ProvNetworkAddressType::ProvNetworkAddressType(void)",
    "public: __thiscall ProvFixedLengthDisplayStringType::ProvFixedLengthDisplayStringType(class ProvFixedLengthDisplayStringType const &)",
    "public: static unsigned long __stdcall ProvAnalyser::OctWCharToDecInteger(unsigned short)",
    "private: class ProvLexicon * __thiscall ProvAnalyser::GetToken(int,int,int)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::CreateDisjunctionContainer(void *,class WmiTreeNode *,unsigned long,unsigned short * *,class Disjunctions * &)",
    "public: virtual class WmiTreeNode * __thiscall WmiNotNode::Copy(void)",
    "public: __thiscall ProvCounter64::ProvCounter64(class ProvCounter64 const &)",
    "public: __thiscall ProvInteger::ProvInteger(long)",
    "public: virtual unsigned short * __thiscall ProvObjectIdentifierType::GetStringValue(void)const",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::InsertNode(class WmiTreeNode * &,class WmiTreeNode * &)",
    "const ProvEnumeratedType::`vftable'{for `ProvNegativeRangedType'}",
    "public: __thiscall ProvUDPAddressType::ProvUDPAddressType(void)",
    "public: enum WmiTriState __thiscall WmiUnsignedIntegerRangeNode::GetIntersectingRange(class WmiUnsignedIntegerRangeNode &,class WmiUnsignedIntegerRangeNode * &)",
    "public: unsigned long __thiscall ProvIpAddressType::GetValue(void)const",
    "public: __thiscall WmiOperatorLikeNode::WmiOperatorLikeNode(class WmiOperatorLikeNode const &)",
    "public: __thiscall WmiStringNode::WmiStringNode(unsigned short *,unsigned short *,enum WmiValueNode::WmiValueFunction,enum WmiValueNode::WmiValueFunction,unsigned long,class WmiTreeNode *)",
    "const ProvValue::`vftable'",
    "public: virtual __thiscall ProvPositiveRangedType::operator void *(void)",
    "protected: virtual class WmiRangeNode * __thiscall QueryPreprocessor::AllocInfiniteRangeNode(void *,unsigned short *)",
    "public: class WmiOperatorLessNode & __thiscall WmiOperatorLessNode::operator=(class WmiOperatorLessNode const &)",
    "private: int __thiscall ProvEnumeratedType::EnumerationDef(void)",
    "public: int __thiscall ProvOctetString::Equivalent(class ProvOctetString const &)const",
    "public: __thiscall ProvDateTimeType::ProvDateTimeType(unsigned short const *)",
    "public: __thiscall ProvObjectIdentifierType::ProvObjectIdentifierType(class ProvObjectIdentifierType const &)",
    "public: long __thiscall ProvNegativeRangeType::GetLowerBound(void)",
    "public: __thiscall ProvTimeTicksType::ProvTimeTicksType(unsigned short const *)",
    "public: class WmiOperatorGreaterNode & __thiscall WmiOperatorGreaterNode::operator=(class WmiOperatorGreaterNode const &)",
    "public: void __thiscall ProvGaugeType::`default constructor closure'(void)",
    "protected: int __thiscall ProvPositiveRangedType::RangeDef(void)",
    "public: __thiscall WmiTreeNodeIterator::WmiTreeNodeIterator(class WmiTreeNodeIterator *)",
    "public: int __thiscall ProvCounter::Equivalent(class ProvCounter const &)const",
    "public: __thiscall WmiNotNode::WmiNotNode(class WmiTreeNode *,class WmiTreeNode *)",
    "private: __thiscall ProvValue::ProvValue(class ProvValue const &)",
    "public: virtual __thiscall ProvDisplayStringType::~ProvDisplayStringType(void)",
    "public: __thiscall ProvTimeTicksType::ProvTimeTicksType(class ProvTimeTicks const &)",
    "const ProvFixedLengthOpaqueType::`vftable'{for `ProvPositiveRangedType'}",
    "public: class WmiOperatorLikeNode & __thiscall WmiOperatorLikeNode::operator=(class WmiOperatorLikeNode const &)",
    "public: class WmiNullNode & __thiscall WmiNullNode::operator=(class WmiNullNode const &)",
    "public: static unsigned short __stdcall ProvAnalyser::DecIntegerToOctWChar(unsigned char)",
    "protected: virtual int __thiscall ProvTimeTicks::Equivalent(class ProvValue const &)const",
    "public: unsigned long __thiscall PartitionSet::GetKeyIndex(void)",
    "const ProvFixedLengthDisplayStringType::`vftable'",
    "public: unsigned long __thiscall ProvCounterType::GetValue(void)const",
    "public: virtual class WmiTreeNodeIterator * __thiscall WmiTreeNodeIterator::Copy(void)",
    "public: __thiscall ProvFixedLengthOpaqueType::ProvFixedLengthOpaqueType(unsigned long const &,class ProvOpaque const &)",
    "public: __thiscall ProvFixedLengthOpaqueType::ProvFixedLengthOpaqueType(class ProvFixedLengthOpaqueType const &)",
    "public: __thiscall ProvIpAddress::ProvIpAddress(char const *)",
    "public: virtual class ProvInstanceType * __thiscall ProvDisplayStringType::Copy(void)const",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorGreaterNode::GetRange(void)",
    "public: virtual __thiscall WmiOperatorEqualNode::~WmiOperatorEqualNode(void)",
    "public: virtual class ProvInstanceType * __thiscall ProvOctetStringType::Copy(void)const",
    "const ProvEventObject::`vftable'",
    "protected: class ProvLexicon * __thiscall ProvPositiveRangedType::Match(enum ProvLexicon::LexiconToken)",
    "public: virtual __thiscall ProvBitStringType::~ProvBitStringType(void)",
    "const ProvUDPAddressType::`vftable'",
    "public: int __thiscall WmiRangeNode::InfiniteUpperBound(void)",
    "public: void __thiscall ProvIntegerType::`default constructor closure'(void)",
    "public: virtual __thiscall WmiStringRangeNode::~WmiStringRangeNode(void)",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorNotLikeNode::GetRange(void)",
    "public: virtual __thiscall ProvIpAddressType::~ProvIpAddressType(void)",
    "public: void __thiscall ProvAnalyser::`default constructor closure'(void)",
    "public: __thiscall WmiUnsignedIntegerRangeNode::WmiUnsignedIntegerRangeNode(unsigned short *,unsigned long,int,int,int,int,unsigned long,unsigned long,class WmiTreeNode *,class WmiTreeNode *)",
    "public: virtual __thiscall ProvCounter64::~ProvCounter64(void)",
    "const ProvBitStringType::`vftable'{for `ProvInstanceType'}",
    "public: void __cdecl ProvDebugLog::Write(unsigned short const *,...)",
    "public: __thiscall ProvEventObject::ProvEventObject(class ProvEventObject const &)",
    "public: __thiscall Conjunctions::Conjunctions(unsigned long)",
    "protected: enum ProvObjectIdentifier::Comparison __thiscall ProvObjectIdentifier::Compare(class ProvObjectIdentifier const &,class ProvObjectIdentifier const &)const",
    "public: __thiscall ProvOSIAddressType::ProvOSIAddressType(unsigned char const *,unsigned long)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::RecursiveConvertToRanges(class WmiTreeNode * &)",
    "public: __thiscall WmiSignedIntegerRangeNode::WmiSignedIntegerRangeNode(class WmiSignedIntegerRangeNode const &)",
    "public: __thiscall Disjunctions::Disjunctions(unsigned long,unsigned long)",
    "public: void __thiscall ProvNegativeRangeType::SetLowerBound(long const &)",
    "public: unsigned short * __thiscall WmiRangeNode::GetPropertyName(void)",
    "public: __thiscall ProvTimeTicksType::ProvTimeTicksType(class ProvTimeTicksType const &)",
    "public: __thiscall ProvGaugeType::ProvGaugeType(unsigned short const *)",
    "public: class ProvCounterType & __thiscall ProvCounterType::operator=(class ProvCounterType const &)",
    "public: class ProvNullType & __thiscall ProvNullType::operator=(class ProvNullType const &)",
    "protected: int __thiscall ProvOctetStringType::Parse(unsigned short const *)",
    "protected: int __thiscall QueryPreprocessor::Evaluate(void *,struct SQL_LEVEL_1_RPN_EXPRESSION &,class WmiTreeNode * *)",
    "public: virtual void __thiscall WmiOperatorEqualOrLessNode::Print(void)",
    "public: __thiscall WmiOrNode::WmiOrNode(class WmiOrNode const &)",
    "public: virtual class ProvInstanceType * __thiscall ProvUDPAddressType::Copy(void)const",
    "public: __thiscall WmiNullNode::WmiNullNode(class WmiNullNode const &)",
    "protected: virtual void __thiscall ProvAnalyser::Initialise(void)",
    "public: __thiscall ProvLexicon::ProvLexicon(void)",
    "protected: virtual int __thiscall ProvCounter64::Equivalent(class ProvValue const &)const",
    "public: __thiscall WmiOperatorNode::WmiOperatorNode(unsigned long,class WmiTreeNode *,class WmiTreeNode *)",
    "public: static int __stdcall ProvAnalyser::IsAlpha(unsigned short)",
    "public: virtual unsigned short * __thiscall ProvFixedLengthDisplayStringType::GetStringValue(void)const",
    "public: __thiscall WmiValueNode::WmiValueNode(class WmiValueNode const &)",
    "public: __thiscall ProvDebugLog::ProvDebugLog(char)",
    "public: int __thiscall ProvPositiveRangedType::Check(unsigned long const &)",
    "public: virtual class ProvValue * __thiscall ProvGauge::Copy(void)const",
    "public: __thiscall ProvPhysAddressType::ProvPhysAddressType(class ProvPhysAddressType const &)",
    "public: int __thiscall WmiRangeNode::ClosedUpperBound(void)",
    "public: int __thiscall ProvObjectIdentifier::Prefix(unsigned long,class ProvObjectIdentifier &)const",
    "public: int __thiscall ProvPositiveRangedType::IsValid(void)",
    "public: static unsigned long __stdcall ProvAnalyser::OctCharToDecInteger(char)",
    "public: virtual __thiscall WmiValueNode::~WmiValueNode(void)",
    "public: virtual unsigned short * __thiscall ProvOpaqueType::GetStringValue(void)const",
    "public: unsigned long __thiscall ProvGaugeType::GetValue(void)const",
    "public: enum WmiTriState __thiscall WmiSignedIntegerRangeNode::GetIntersectingRange(class WmiSignedIntegerRangeNode &,class WmiSignedIntegerRangeNode * &)",
    "protected: virtual enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::InvariantEvaluate(void *,class WmiTreeNode *,class WmiTreeNode *)",
    "public: __thiscall ProvIntegerType::ProvIntegerType(class ProvInteger const &,unsigned short const *)",
    "public: class WmiTreeNode * __thiscall WmiTreeNode::SetRight(class WmiTreeNode *)",
    "public: virtual __thiscall ProvCounterType::~ProvCounterType(void)",
    "unsigned short * __stdcall UnicodeStringAppend(unsigned short const *,unsigned short const *)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::Sort(class WmiTreeNode * &)",
    "public: virtual class ProvValue * __thiscall ProvOpaque::Copy(void)const",
    "public: unsigned long __thiscall ProvOpaque::GetValueLength(void)const",
    "protected: virtual int __thiscall ProvTimeTicksType::Equivalent(class ProvInstanceType const &)const",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorNotEqualExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "const QueryPreprocessor::`vftable'",
    "public: unsigned long * __thiscall ProvObjectIdentifierType::GetValue(void)const",
    "public: class ProvDebugLog & __thiscall ProvDebugLog::operator=(class ProvDebugLog const &)",
    "protected: int __thiscall ProvMacAddressType::Parse(unsigned short const *)",
    "public: virtual class ProvInstanceType * __thiscall ProvEnumeratedType::Copy(void)const",
    "public: class WmiTreeNode & __thiscall WmiTreeNode::operator=(class WmiTreeNode const &)",
    "public: __thiscall ProvObjectIdentifierType::ProvObjectIdentifierType(class ProvObjectIdentifier const &)",
    "public: virtual class ProvInstanceType * __thiscall ProvFixedLengthDisplayStringType::Copy(void)const",
    "const ProvMacAddressType::`vftable'",
    "public: class WmiRangeNode * __thiscall PartitionSet::GetRange(void)",
    "public: virtual __thiscall ProvFixedLengthOpaqueType::~ProvFixedLengthOpaqueType(void)",
    "public: void __thiscall ProvOctetString::SetValue(unsigned char const *,unsigned long)",
    "public: virtual __thiscall ProvPhysAddressType::~ProvPhysAddressType(void)",
    "public: __thiscall ProvMacAddressType::ProvMacAddressType(class ProvMacAddressType const &)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::RemoveOverlaps(unsigned long *,unsigned long,unsigned long *,unsigned long *,class WmiRangeNode * *)",
    "public: __thiscall WmiTreeNodeIterator::WmiTreeNodeIterator(class WmiTreeNodeIterator const &)",
    "public: unsigned long __thiscall ProvOctetString::GetValueLength(void)const",
    "public: __thiscall WmiOperatorLikeNode::WmiOperatorLikeNode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: virtual unsigned short * __thiscall ProvUDPAddressType::GetStringValue(void)const",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::ConvertToRanges(class WmiTreeNode * &)",
    "public: unsigned short * __thiscall WmiValueNode::GetPropertyName(void)",
    "public: int __thiscall ProvInteger::Equivalent(class ProvInteger const &)const",
    "const WmiValueNode::`vftable'",
    "public: __thiscall ProvUDPAddressType::ProvUDPAddressType(class ProvUDPAddressType const &)",
    "private: void __thiscall ProvOctetString::OverWrite(unsigned char const *)",
    "public: __thiscall ProvOctetStringType::ProvOctetStringType(unsigned short const *,unsigned short const *)",
    "public: unsigned long __thiscall ProvPositiveRangeType::GetLowerBound(void)",
    "public: virtual __thiscall ProvAnalyser::operator void *(void)",
    "public: virtual __thiscall ProvInteger::~ProvInteger(void)",
    "const WmiTreeNode::`vftable'",
    "public: __thiscall WmiOperatorGreaterNode::WmiOperatorGreaterNode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: __thiscall ProvPhysAddressType::ProvPhysAddressType(unsigned short const *,unsigned short const *)",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorGreaterExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: virtual __thiscall ProvAnalyser::~ProvAnalyser(void)",
    "public: virtual __thiscall ProvObjectIdentifierType::~ProvObjectIdentifierType(void)",
    "public: union ProvLexiconValue * __thiscall ProvLexicon::GetValue(void)",
    "int __stdcall CompareElements(unsigned short * const *,unsigned short * const *)",
    "public: __thiscall WmiNullRangeNode::WmiNullRangeNode(class WmiNullRangeNode const &)",
    "public: virtual int __thiscall ProvEventObject::Wait(void)",
    "public: virtual void __thiscall WmiOperatorLikeNode::Print(void)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::EvaluateNotEqualExpression(class WmiTreeNode * &)",
    "public: virtual __thiscall ProvEventObject::~ProvEventObject(void)",
    "public: void __thiscall ProvNegativeRangeType::SetUpperBound(long const &)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::RecursivePartitionSet(class Disjunctions *,class PartitionSet * &,unsigned long,unsigned long *,unsigned long)",
    "public: void __thiscall WmiOperatorIsANode::`default constructor closure'(void)",
    "public: __thiscall ProvOpaqueType::ProvOpaqueType(class ProvOpaque const &,unsigned short const *)",
    "public: unsigned long __thiscall WmiUnsignedIntegerRangeNode::LowerBound(void)",
    "public: virtual __thiscall ProvNegativeRangeType::~ProvNegativeRangeType(void)",
    "public: virtual class WmiTreeNode * __thiscall WmiUnsignedIntegerNode::Copy(void)",
    "const WmiOperatorNotIsANode::`vftable'",
    "public: class WmiOperatorNotLikeNode & __thiscall WmiOperatorNotLikeNode::operator=(class WmiOperatorNotLikeNode const &)",
    "public: virtual class WmiTreeNode * __thiscall WmiUnsignedIntegerRangeNode::Copy(void)",
    "public: virtual void __thiscall WmiOperatorNotIsANode::Print(void)",
    "public: unsigned long __thiscall ProvCounter::GetValue(void)const",
    "const WmiStringRangeNode::`vftable'",
    "protected: enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::RemoveNonOverlappingRanges(class WmiTreeNode * &)",
    "const WmiNotNode::`vftable'",
    "public: __thiscall ProvObjectIdentifier::ProvObjectIdentifier(char const *)",
    "public: virtual class ProvNegativeRangeType * __thiscall ProvNegativeRangeType::Copy(void)",
    "protected: int __thiscall ProvObjectIdentifierType::Parse(unsigned short const *)",
    "public: virtual unsigned short * __thiscall ProvDateTimeType::GetStringValue(void)const",
    "public: unsigned long __thiscall ProvBitStringType::GetValue(unsigned short * * &)const",
    "public: void __thiscall WmiOperatorLikeNode::`default constructor closure'(void)",
    "public: __thiscall WmiOperatorNotLikeNode::WmiOperatorNotLikeNode(class WmiOperatorNotLikeNode const &)",
    "private: class ProvLexicon * __thiscall ProvEnumeratedType::Get(void)",
    "public: class ProvNetworkAddressType & __thiscall ProvNetworkAddressType::operator=(class ProvNetworkAddressType const &)",
    "public: long __thiscall WmiSignedIntegerNode::GetValue(void)",
    "protected: int __thiscall ProvPhysAddressType::Parse(unsigned short const *)",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorEqualOrGreaterNode::Copy(void)",
    "public: __thiscall WmiAndNode::WmiAndNode(class WmiTreeNode *,class WmiTreeNode *,class WmiTreeNode *)",
    "public: unsigned long __thiscall ProvOpaqueType::GetValueLength(void)const",
    "public: virtual void __thiscall WmiUnsignedIntegerRangeNode::Print(void)",
    "public: class WmiTreeNode * __thiscall WmiTreeNode::SetParent(class WmiTreeNode *)",
    "unsigned int __stdcall HashKey(unsigned short *)",
    "public: class ProvFixedLengthDisplayStringType & __thiscall ProvFixedLengthDisplayStringType::operator=(class ProvFixedLengthDisplayStringType const &)",
    "public: virtual class ProvInstanceType * __thiscall ProvNullType::Copy(void)const",
    "protected: int __thiscall ProvFixedLengthPhysAddressType::Parse(unsigned short const *)",
    "private: void __thiscall ProvDateTimeType::PushBack(void)",
    "const WmiOperatorEqualOrLessNode::`vftable'",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorIsANode::Copy(void)",
    "public: __thiscall ProvMacAddressType::ProvMacAddressType(unsigned char const *)",
    "private: class ProvLexicon * __thiscall ProvEnumeratedType::Match(enum ProvLexicon::LexiconToken)",
    "const WmiSignedIntegerNode::`vftable'",
    "public: class CBString const & __thiscall CBString::operator=(unsigned short const *)",
    "public: class ProvValue & __thiscall ProvTimeTicks::operator=(class ProvTimeTicks const &)",
    "public: static int __stdcall ProvAnalyser::IsAlphaNumeric(unsigned short)",
    "protected: virtual int __thiscall ProvObjectIdentifierType::Equivalent(class ProvInstanceType const &)const",
    "public: __thiscall Conjunctions::~Conjunctions(void)",
    "public: enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::Query(unsigned short *,struct SQL_LEVEL_1_RPN_EXPRESSION * &)",
    "public: virtual class ProvInstanceType * __thiscall ProvIntegerType::Copy(void)const",
    "public: void __thiscall ProvCounter64::SetValue(unsigned long,unsigned long)",
    "public: static class ProvDebugLog * ProvDebugLog::s_ProvDebugLog",
    "public: class WmiTreeNode * __thiscall WmiTreeNode::GetLeft(void)",
    "public: int __thiscall WmiUnsignedIntegerNode::LexicographicallyBefore(unsigned long &)",
    "public: __thiscall WmiTreeNode::WmiTreeNode(class WmiTreeNode *)",
    "public: __thiscall WmiOperatorIsANode::WmiOperatorIsANode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: void __thiscall ProvCounter64Type::GetValue(unsigned long &,unsigned long &)const",
    "public: void __thiscall WmiOperatorNotEqualNode::`default constructor closure'(void)",
    "public: class WmiUnsignedIntegerNode & __thiscall WmiUnsignedIntegerNode::operator=(class WmiUnsignedIntegerNode const &)",
    "public: class ProvValue & __thiscall ProvOctetString::operator=(class ProvOctetString const &)",
    "public: __thiscall ProvPositiveRangedType::ProvPositiveRangedType(class ProvPositiveRangedType const &)",
    "public: virtual unsigned short * __thiscall ProvOctetStringType::GetStringValue(void)const",
    "public: void __thiscall ProvInstanceType::`default constructor closure'(void)",
    "protected: virtual int __thiscall ProvAnalyser::Analyse(class ProvLexicon *,unsigned long &,unsigned short,unsigned short const *,unsigned long &,int,int,int)",
    "public: virtual void __thiscall WmiSignedIntegerRangeNode::Print(void)",
    "public: void __thiscall WmiTreeNode::GetParent(class WmiTreeNode * * &)",
    "const ProvDateTimeType::`vftable'{for `ProvPositiveRangedType'}",
    "public: __thiscall WmiAndNode::WmiAndNode(class WmiAndNode const &)",
    "public: __thiscall WmiOperatorNotIsANode::WmiOperatorNotIsANode(class WmiOperatorNotIsANode const &)",
    "public: __thiscall ProvFixedLengthPhysAddressType::ProvFixedLengthPhysAddressType(unsigned long const &,class ProvOctetString const &)",
    "protected: void __thiscall QueryPreprocessor::TransformOperatorToRange(class WmiTreeNode * &)",
    "public: __thiscall WmiUnsignedIntegerNode::WmiUnsignedIntegerNode(class WmiUnsignedIntegerNode const &)",
    "public: __thiscall ProvCounter64Type::ProvCounter64Type(class ProvCounter64Type const &)",
    "public: virtual int __thiscall ProvInstanceType::IsNull(void)const",
    "public: void __thiscall PartitionSet::SetRange(class WmiRangeNode *)",
    "public: enum WmiTriState __thiscall WmiUnsignedIntegerRangeNode::GetOverlappingRange(class WmiUnsignedIntegerRangeNode &,class WmiUnsignedIntegerRangeNode * &)",
    "public: __thiscall WmiStringRangeNode::WmiStringRangeNode(class WmiStringRangeNode const &)",
    "public: class WmiOperatorIsANode & __thiscall WmiOperatorIsANode::operator=(class WmiOperatorIsANode const &)",
    "public: virtual void __thiscall WmiNotNode::Print(void)",
    "public: virtual void __thiscall WmiOperatorIsANode::Print(void)",
    "public: virtual __thiscall WmiSignedIntegerRangeNode::~WmiSignedIntegerRangeNode(void)",
    "public: virtual class WmiTreeNode * __thiscall WmiStringRangeNode::Copy(void)",
    "public: virtual __thiscall WmiSignedIntegerNode::~WmiSignedIntegerNode(void)",
    "public: __thiscall ProvUInteger32::ProvUInteger32(class ProvUInteger32 const &)",
    "const ProvIpAddress::`vftable'",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::RecursiveSort(class WmiTreeNode * &)",
    "public: class WmiStringNode & __thiscall WmiStringNode::operator=(class WmiStringNode const &)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::CreatePartitionSet(class Disjunctions *,class PartitionSet * &)",
    "const WmiOperatorLikeNode::`vftable'",
    "private: int __thiscall ProvDateTimeType::Parse(unsigned short const *)",
    "public: __thiscall ProvOctetStringType::ProvOctetStringType(unsigned short const *)",
    "public: void __thiscall WmiOperatorEqualOrGreaterNode::`default constructor closure'(void)",
    "protected: virtual int __thiscall ProvCounter::Equivalent(class ProvValue const &)const",
    "public: virtual __thiscall WmiStringNode::~WmiStringNode(void)",
    "public: __thiscall ProvFixedLengthPhysAddressType::ProvFixedLengthPhysAddressType(unsigned long const &)",
    "protected: enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::RecursiveDisjunctiveNormalForm(class WmiTreeNode * &)",
    "public: class ProvNegativeRangeType & __thiscall ProvNegativeRangeType::operator=(class ProvNegativeRangeType const &)",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorLessNode::GetRange(void)",
    "const ProvRowStatusType::`vftable'{for `ProvNegativeRangedType'}",
    "private: int __thiscall ProvDateTimeType::DateTimeDef(void)",
    "protected: virtual int __thiscall ProvNetworkAddressType::Equivalent(class ProvInstanceType const &)const",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorLessExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: class ProvMacAddressType & __thiscall ProvMacAddressType::operator=(class ProvMacAddressType const &)",
    "public: virtual __thiscall WmiOperatorGreaterNode::~WmiOperatorGreaterNode(void)",
    "protected: virtual int __thiscall ProvNull::Equivalent(class ProvValue const &)const",
    "public: __thiscall ProvNull::ProvNull(void)",
    "private: void __thiscall ProvBitStringType::PushBack(void)",
    "public: unsigned long __thiscall ProvObjectIdentifier::GetValueLength(void)const",
    "public: virtual unsigned short * __thiscall ProvGaugeType::GetStringValue(void)const",
    "public: __thiscall WmiOperatorLessNode::WmiOperatorLessNode(class WmiOperatorLessNode const &)",
    "public: virtual __thiscall ProvObjectIdentifier::~ProvObjectIdentifier(void)",
    "public: virtual unsigned short * __thiscall ProvCounterType::GetStringValue(void)const",
    "public: class ProvValue & __thiscall ProvInteger::operator=(class ProvInteger const &)",
    "const ProvNegativeRangeType::`vftable'",
    "public: class ProvLexicon & __thiscall ProvLexicon::operator=(class ProvLexicon const &)",
    "public: static class ProvDebugLog * __stdcall ProvDebugLog::GetProvDebugLog(char)",
    "public: unsigned short * __thiscall ProvRowStatusType::GetValue(void)const",
    "public: __thiscall WmiNotNode::WmiNotNode(class WmiNotNode const &)",
    "public: enum WmiValueNode::WmiValueFunction __thiscall WmiValueNode::GetPropertyFunction(void)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::SortConditionals(class WmiTreeNode * &)",
    "public: __thiscall ProvUDPAddressType::ProvUDPAddressType(class ProvOctetString const &)",
    "protected: void __thiscall QueryPreprocessor::QuickSort(class WmiRangeNode * *,unsigned long *,unsigned long)",
    "protected: virtual int __thiscall ProvObjectIdentifier::Equivalent(class ProvValue const &)const",
    "public: class ProvTimeTicksType & __thiscall ProvTimeTicksType::operator=(class ProvTimeTicksType const &)",
    "public: unsigned long __thiscall PartitionSet::GetPartitionCount(void)",
    "const ProvDateTimeType::`vftable'{for `ProvInstanceType'}",
    "public: void __thiscall WmiNotNode::`default constructor closure'(void)",
    "public: virtual class ProvValue * __thiscall ProvInteger::Copy(void)const",
    "const ProvIntegerType::`vftable'{for `ProvInstanceType'}",
    "public: __thiscall ProvObjectIdentifier::ProvObjectIdentifier(class ProvObjectIdentifier const &)",
    "public: class ProvObjectIdentifierType & __thiscall ProvObjectIdentifierType::operator=(class ProvObjectIdentifierType const &)",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorNotLikeExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: class WmiOperatorNode & __thiscall WmiOperatorNode::operator=(class WmiOperatorNode const &)",
    "protected: void __thiscall QueryPreprocessor::TransformNotEqualExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: __thiscall ProvPhysAddressType::ProvPhysAddressType(unsigned char const *,unsigned long,unsigned short const *)",
    "public: long __thiscall WmiValueNode::ComparePropertyName(class WmiValueNode &)",
    "public: long __thiscall WmiRangeNode::ComparePropertyName(class WmiRangeNode &)",
    "protected: enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::RecursiveRemoveNonOverlappingRanges(class WmiTreeNode * &,class WmiTreeNode * &)",
    "public: __thiscall ProvEventObject::ProvEventObject(unsigned short const *)",
    "public: virtual __thiscall ProvIntegerType::~ProvIntegerType(void)",
    "public: __thiscall ProvFixedLengthOctetStringType::ProvFixedLengthOctetStringType(unsigned long const &,class ProvOctetString const &)",
    "public: virtual __thiscall ProvGauge::~ProvGauge(void)",
    "protected: virtual int __thiscall ProvInteger::Equivalent(class ProvValue const &)const",
    "protected: virtual unsigned long * __thiscall ProvObjectIdentifier::Replicate(unsigned long const *,unsigned long)const",
    "const WmiNullNode::`vftable'",
    "protected: virtual unsigned long * __thiscall ProvObjectIdentifier::Replicate(unsigned long const *,unsigned long,unsigned long const *,unsigned long)const",
    "public: unsigned long __thiscall ProvPositiveRangeType::GetUpperBound(void)",
    "public: virtual __thiscall ProvOpaqueType::~ProvOpaqueType(void)",
    "public: unsigned long __thiscall WmiUnsignedIntegerNode::GetValue(void)",
    "const ProvInstanceType::`vftable'",
    "public: virtual __thiscall ProvFixedLengthPhysAddressType::~ProvFixedLengthPhysAddressType(void)",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorNotIsANode::GetRange(void)",
    "public: void * __thiscall ProvOpaque::operator()(void)const",
    "protected: virtual class ProvLexicon * __thiscall ProvAnalyser::CreateLexicon(void)",
    "const PartitionSet::`vftable'",
    "protected: virtual void __thiscall ProvObjectIdentifier::UnReplicate(unsigned long *)",
    "public: virtual class ProvValue * __thiscall ProvTimeTicks::Copy(void)const",
    "public: class WmiOperatorNotEqualNode & __thiscall WmiOperatorNotEqualNode::operator=(class WmiOperatorNotEqualNode const &)",
    "public: int __thiscall ProvDebugLog::GetLogging(void)",
    "public: unsigned long __thiscall ProvUInteger32::GetValue(void)const",
    "public: virtual class WmiTreeNode * __thiscall WmiTreeNode::CopyNode(void)",
    "public: virtual void __thiscall WmiOperatorNotEqualNode::Print(void)",
    "public: class ProvBitStringType & __thiscall ProvBitStringType::operator=(class ProvBitStringType const &)",
    "public: __thiscall WmiOperatorEqualOrLessNode::WmiOperatorEqualOrLessNode(class WmiOperatorEqualOrLessNode const &)",
    "public: virtual __thiscall ProvGaugeType::~ProvGaugeType(void)",
    "public: virtual void __thiscall WmiTreeNode::Print(void)"
  ],
  "prvdmofcomp.dll": [
    "CompileSchemaToWMI",
    "GetProviderSchemaFile",
    "public: __thiscall MIFree::~MIFree(void)",
    "public: class MIServer & __thiscall MIServer::operator=(class MIServer const &)",
    "public: __thiscall MIFree::MIFree(void *)",
    "GetProviderSchema",
    "CreateRegisterParameter"
  ],
  "psapi.dll": [
    "QueryWorkingSetEx",
    "InitializeProcessForWsWatch",
    "GetModuleBaseNameA",
    "GetProcessImageFileNameA",
    "GetModuleFileNameExW",
    "GetPerformanceInfo",
    "GetDeviceDriverFileNameA",
    "GetModuleFileNameExA",
    "EnumProcessModules",
    "EmptyWorkingSet",
    "GetWsChangesEx",
    "QueryWorkingSet",
    "GetProcessImageFileNameW",
    "GetWsChanges",
    "GetDeviceDriverBaseNameA",
    "GetMappedFileNameA",
    "GetDeviceDriverBaseNameW",
    "EnumPageFilesW",
    "EnumDeviceDrivers",
    "GetProcessMemoryInfo",
    "GetModuleBaseNameW",
    "EnumProcesses",
    "EnumProcessModulesEx",
    "GetMappedFileNameW",
    "GetModuleInformation",
    "EnumPageFilesA",
    "GetDeviceDriverFileNameW"
  ],
  "psisdecd.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "psmsrv.dll": "No exports",
  "pstask.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "pstorec.dll": [
    "PStoreCreateInstance",
    "PStoreEnumProviders",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "puiapi.dll": [
    "STRBUF_CreateBSTR",
    "STRBUF_Truncate",
    "STRAPI_Format",
    "STRBUF_FindAndReplace",
    "STRAPI_GetPrinterStatusString",
    "STRAPI_String2GUID",
    "XMLAPI_GetAttributeString",
    "XMLAPI_SetAttributeLong",
    "STRAPI_FormatV",
    "DllRegisterServer",
    "PUIAPI_ShowDriverPackageRemovalUI",
    "PUIAPI_CreateInstance",
    "DllUnregisterServer",
    "STRBUF_InsertString",
    "STRAPI_LoadString",
    "STRBUF_TrimRight",
    "STRBUF_ToUpper",
    "STRAPI_FormatMsgV",
    "STRAPI_GUID2String",
    "STRAPI_TrimString",
    "XMLAPI_GetAttributeDouble",
    "XMLAPI_SetAttributeDouble",
    "STRBUF_ToLower",
    "STRAPI_FindAndReplace",
    "STRBUF_MultiCat",
    "PUIAPI_GetPrinter",
    "XMLAPI_GetAttributeLong",
    "DllCanUnloadNow",
    "PUIAPI_IWaitNotify_CreateInstance",
    "PUIAPI_IWaitNotify_RegisterWaitObject",
    "STRAPI_MultiCat",
    "STRAPI_GetJobStatusString",
    "STRBUF_TrimLeft",
    "PUIAPI_IWaitNotify_UnregisterCookie",
    "STRAPI_CrackPrintUNCName",
    "STRBUF_DeleteSubstring",
    "DllGetClassObject",
    "STRBUF_Format",
    "STRBUF_Create",
    "PUIAPI_GetErrorString",
    "STRAPI_XMLSafeText",
    "STRBUF_AppendString",
    "STRAPI_FormatMsg",
    "PUIAPI_ShowBrowseForPrinterDialog",
    "STRAPI_ConvertCase",
    "XMLAPI_SetAttributeString",
    "PUIAPI_IWaitNotify_RegisterTimer",
    "STRBUF_Destroy",
    "STRBUF_Update",
    "XMLAPI_GetAttributeULongLong",
    "XMLAPI_SetAttributeULongLong",
    "PUIAPI_ShowDetailsMessageBox"
  ],
  "puiobj.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "pwlauncher.dll": [
    "ShowPortableWorkspaceLauncherConfigurationUX",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "ProcessHibernateGroupPolicy",
    "DllInstall",
    "DllGetClassObject",
    "ProcessLauncherGroupPolicy",
    "DllUnregisterServer"
  ],
  "pwrshplugin.dll": [
    "WSManPluginCommand",
    "WSManPluginSend",
    "WSManPluginSignal",
    "WSManPluginShell",
    "WSManPluginConnect",
    "WSManPluginReleaseCommandContext",
    "WSManPluginStartup",
    "WSManPluginReleaseShellContext",
    "WSManPluginShutdown",
    "GetCLRVersionForPSVersion",
    "WSManPluginReceive"
  ],
  "pwsso.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "QAGENT.DLL": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "QAGENTRT.DLL": [
    "ServiceMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "QCLIPROV.DLL": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "QSHVHOST.DLL": [
    "QuarDestroySession",
    "QuarSessionGetFixupServerList",
    "QuarSessionEvaluateClientMachineHealth",
    "QuarInitialize",
    "QuarSessionSetNewQuarantineStatus",
    "DllGetClassObject",
    "QuarUninitialize",
    "QuarSessionGetId",
    "DllUnregisterServer",
    "QuarCreateSession",
    "DllCanUnloadNow",
    "QuarFreeMemory",
    "DllRegisterServer",
    "QuarSessionGetMachineInventory",
    "QuarSessionGetSoHResponse",
    "QuarSessionGetShvResultList"
  ],
  "QSVRMGMT.DLL": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "QUTIL.DLL": [
    "AllocCountedString",
    "AllocConnections",
    "FreeIsolationInfo",
    "FreeSystemHealthAgentState",
    "FreeNetworkSoH",
    "DllRegisterServer",
    "DllUnregisterServer",
    "FreeSoHAttributeValue",
    "FreeFixupInfo",
    "UninitializeNapAgentNotifier",
    "FreeCountedString",
    "DllCanUnloadNow",
    "FreeNapComponentRegistrationInfoArray",
    "FreeSoH",
    "FreeConnections",
    "DllGetClassObject",
    "AllocFixupInfo",
    "FreeIsolationInfoEx",
    "InitializeNapAgentNotifier",
    "FreePrivateData"
  ],
  "Query.dll": [
    "CITextToFullTreeEx",
    "LoadTextFilter",
    "CiSvcMain",
    "BindIFilterFromStream",
    "LocateCatalogsW",
    "CIState",
    "InitializeFILTERPerformanceData",
    "InternalBindIFilterFromFileName",
    "DllRegisterServer",
    "SetupCacheEx",
    "InitializeCIISAPIPerformanceData",
    "DllUnregisterServer",
    "CIBuildQueryTree",
    "InternalBindIFilterFromDocCLSID",
    "LocateCatalogs",
    "CollectCIPerformanceData",
    "LoadBinaryFilter",
    "CollectCIISAPIPerformanceData",
    "FsCiShutdown",
    "InternalBindIFilterFromStorage",
    "CIRevertToSelf",
    "CIBuildQueryNode",
    "SetupCache",
    "CIGetGlobalPropertyList",
    "DllCanUnloadNow",
    "DoneCIPerformanceData",
    "InternalBindIFilterFromStream",
    "CITextToSelectTree",
    "CiCreateSecurityDescriptor",
    "CollectFILTERPerformanceData",
    "LoadIFilter",
    "BindIFilterFromStorage",
    "DoneCIISAPIPerformanceData",
    "BeginCacheTransaction",
    "CICreateCommand",
    "CIRestrictionToFullTree",
    "LoadIFilterEx",
    "DllGetClassObject",
    "CITextToSelectTreeEx",
    "DoneFILTERPerformanceData",
    "SetCatalogState",
    "CITextToFullTree",
    "InitializeCIPerformanceData",
    "CIShutdown",
    "SvcEntry_CiSvc",
    "LocateCatalogsA",
    "CIMakeICommand",
    "EndCacheTransaction"
  ],
  "qasf.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "qcap.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "qdv.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "qdvd.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "qedit.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "qedwipes.dll": "No exports",
  "qmgr.dll": [
    "public: class CPerfMon & __thiscall CPerfMon::operator=(class CPerfMon const &)",
    "public: __thiscall PROXY_SETTINGS_CONTAINER::PROXY_SETTINGS_CONTAINER(class GenericStringHandle const &,class TokenHandle const &,class TokenHandle const &,struct PROXY_SETTINGS const *)",
    "public: __thiscall CNestedImpersonation::CNestedImpersonation(void)",
    "BITSServiceMain",
    "public: long __thiscall CRangeCollection::GetSubRanges(unsigned __int64,unsigned __int64,unsigned long,unsigned int,class CRangeCollection * *)const",
    "private: struct CPerfMon::_PERF_ITEM * __thiscall CPerfMon::ObjectIdToPerfItem(struct CPerfMon::__OBJECT_ID *)const",
    "void * __stdcall BITSAlloc(unsigned int)",
    "private: int __thiscall CPerfMon::IsValidObjOrd(struct CPerfMon::__OBJECT_ORD *)const",
    "class std::auto_ptr __stdcall HostFromProxyDescription(unsigned short *)",
    "unsigned long __stdcall GetNetworkRouteInfo(unsigned short const *,struct sockaddr_storage *)",
    "public: unsigned __int64 __thiscall CRangeCollection::BytesRemainingInCurrentRange(void)const",
    "private: int __thiscall CPerfMon::ObjectIdToPerfItemIndex(struct CPerfMon::__OBJECT_ID *)const",
    "private: int __thiscall CPerfMon::IsValidInstId(struct CPerfMon::__OBJECT_ORD *,struct CPerfMon::__INSTANCE_ID *)const",
    "private: struct CPerfMon::_PERF_ITEM * __thiscall CPerfMon::CounterIdToPerfItem(struct CPerfMon::__COUNTER_ID *)const",
    "public: __thiscall CNestedImpersonation::CNestedImpersonation(class TokenHandle const &)",
    "protected: bool __thiscall CRangeCollection::CalculateBytesTotal(void)",
    "public: __int64 * __thiscall CPerfMon::GetCounter64(struct CPerfMon::__COUNTER_ID *,struct CPerfMon::__INSTANCE_ID *)",
    "public: long __thiscall CCredentialsContainer::Find(enum __MIDL_IBackgroundCopyJob2_0001,enum __MIDL_IBackgroundCopyJob2_0002,struct __MIDL_IBackgroundCopyJob2_0005 * *)const",
    "private: static struct GenericStringHandle::StringData GenericStringHandle::s_EmptyString",
    "void __stdcall BITSFree(void *)",
    "ServiceMain",
    "public: long * __thiscall CPerfMon::GetCounter32(struct CPerfMon::__COUNTER_ID *,struct CPerfMon::__INSTANCE_ID *)"
  ],
  "qmgrprxy.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "quartz.dll": [
    "DBToAmpFactor",
    "AMGetErrorTextA",
    "AmpFactorToDB",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "AMGetErrorTextW",
    "DllUnregisterServer"
  ],
  "qwave.dll": [
    "QOSQueryFlow",
    "QOSNotifyFlow",
    "QOSStartTrackingClient",
    "QOSCreateHandle",
    "QOSAddSocketToFlow",
    "QOSCloseHandle",
    "QOSEnumerateFlows",
    "ServiceMain",
    "QOSSetFlow",
    "QOSRemoveSocketFromFlow",
    "QOSCancel",
    "QDLHStartDiagnosingPath",
    "QOSStopTrackingClient",
    "QDLHPathDiagnostics"
  ],
  "RASMM.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "RDSAppXHelper.dll": [
    "DestroyAppXHelper",
    "GetInstanceOfAppXPackageManager",
    "InitializeAppXHelper"
  ],
  "RESAMPLEDMO.DLL": [
    "CreateInstance",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "RMapi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "RacEngn.dll": [
    "RacSysprepGeneralize",
    "DllRegisterServer",
    "RacSysprepSpecialize",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "ReAgent.dll": [
    "WinReAddLogFile",
    "WinReSetConfig",
    "WinRePostRecovery",
    "WinReCreateLogInstance",
    "WinReUpdateLogInstance",
    "WinReGetCustomization",
    "WinRePostBCDRepair",
    "WinRE_Generalize",
    "WinReDeleteLogFiles",
    "WinReRestoreLogFiles",
    "winreFindInstallMedia",
    "winreGetBinaryArch",
    "WinReCreateLogInstanceEx",
    "WinReSetError",
    "WinReCompleteRecovery",
    "WinReSetRecoveryActionEx",
    "WinReIsWinPE",
    "WinReClearOemImagePath",
    "WinReGetLogDirPath",
    "WinReSetRecoveryAction",
    "WinReOobeInstall",
    "WinReDeleteRepairTask",
    "WinReRepair",
    "WinReGetError",
    "WinReInstall",
    "WinReServicePbrFiles",
    "WinReOpenLogInstance",
    "WinReRestoreConfigAfterPBR",
    "WinReGetConfig",
    "WinReCopyLogFilesToRamdisk",
    "WinReUnInstall",
    "WinReGetLogFile",
    "WinReClearError",
    "WinReSetCustomization",
    "WinReGetWIMInfo",
    "WinReServiceBootUxFiles",
    "WinReSetTriggerFile",
    "WinReCopySetupFiles",
    "WinReGetGroupPolicies",
    "WinReIsInstallMedia"
  ],
  "RegCtrl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "RemoveDeviceContextHandler.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "RemoveDeviceElevated.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "RoamingSecurity.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "RotMgr.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "RpcEpMap.dll": [
    "ServiceMain"
  ],
  "RpcNs4.dll": [
    "RpcNsBindingUnexportPnPA",
    "RpcNsBindingUnexportPnPW",
    "RpcNsMgmtBindingUnexportW",
    "RpcNsBindingUnexportW",
    "RpcNsEntryObjectInqBeginW",
    "RpcNsProfileEltInqNextA",
    "RpcNsBindingImportDone",
    "RpcNsBindingImportBeginA",
    "RpcNsBindingExportPnPW",
    "RpcNsProfileEltRemoveA",
    "I_RpcNsNegotiateTransferSyntax",
    "RpcNsEntryObjectInqBeginA",
    "I_RpcNsSendReceive",
    "RpcNsProfileDeleteW",
    "RpcNsEntryExpandNameA",
    "RpcNsBindingLookupBeginW",
    "RpcNsGroupMbrAddW",
    "RpcNsGroupMbrInqBeginA",
    "RpcNsGroupMbrRemoveA",
    "RpcNsGroupMbrInqNextA",
    "RpcNsGroupMbrInqBeginW",
    "RpcNsBindingExportA",
    "RpcNsMgmtInqExpAge",
    "RpcNsMgmtEntryDeleteA",
    "RpcNsProfileEltInqDone",
    "RpcNsGroupMbrInqNextW",
    "RpcNsGroupMbrInqDone",
    "RpcNsMgmtEntryCreateA",
    "RpcNsGroupDeleteA",
    "RpcNsProfileEltInqNextW",
    "RpcNsBindingUnexportA",
    "RpcNsMgmtEntryDeleteW",
    "RpcNsEntryObjectInqDone",
    "I_RpcNsRaiseException",
    "RpcNsBindingLookupDone",
    "RpcIfIdVectorFree",
    "I_RpcNsGetBuffer",
    "RpcNsBindingImportBeginW",
    "RpcNsEntryObjectInqNext",
    "RpcNsBindingImportNext",
    "RpcNsEntryExpandNameW",
    "RpcNsMgmtEntryInqIfIdsA",
    "RpcNsMgmtHandleSetExpAge",
    "RpcNsBindingLookupBeginA",
    "RpcNsProfileEltInqBeginA",
    "RpcNsMgmtSetExpAge",
    "RpcNsProfileEltAddA",
    "RpcNsMgmtEntryInqIfIdsW",
    "RpcNsBindingExportW",
    "I_RpcReBindBuffer",
    "RpcNsGroupMbrRemoveW",
    "RpcNsBindingLookupNext",
    "RpcNsGroupDeleteW",
    "RpcNsBindingSelect",
    "RpcNsGroupMbrAddA",
    "RpcNsProfileEltInqBeginW",
    "RpcNsProfileEltRemoveW",
    "RpcNsProfileDeleteA",
    "RpcNsBindingExportPnPA",
    "RpcNsMgmtBindingUnexportA",
    "RpcNsProfileEltAddW",
    "RpcNsMgmtEntryCreateW"
  ],
  "RpcRtRemote.dll": [
    "I_RpcExtInitializeExtensionPoint",
    "DllGetContractDescription"
  ],
  "RstrtMgr.dll": [
    "RmRemoveFilter",
    "RmEndSession",
    "RmRestart",
    "RmShutdown",
    "RmReserveHeap",
    "RmAddFilter",
    "RmJoinSession",
    "RmGetFilterList",
    "RmRegisterResources",
    "RmStartSession",
    "RmGetList",
    "RmCancelCurrentTask"
  ],
  "racpldlg.dll": [
    "ShowPasswordDialog",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "radardt.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "RdrSysprepSpecialize",
    "WdiHandleInstance"
  ],
  "radarrs.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "rasadhlp.dll": [
    "WSAttemptAutodialName",
    "AcsHlpNbConnection",
    "WSAttemptAutodialAddr",
    "WSNoteSuccessfulHostentLookup"
  ],
  "rasapi32.dll": [
    "RasSetEntryDialParamsA",
    "DDMFreeRemoteEndpoint",
    "RasGetCredentialsW",
    "RasDialW",
    "RasSetCredentialsW",
    "RasEnumDevicesW",
    "RasGetCustomAuthDataW",
    "RasGetEapUserIdentityW",
    "RasAutoDialSharedConnection",
    "RasGetAutodialParamW",
    "RasSetCredentialsA",
    "RasGetEntryPropertiesA",
    "RasRenameEntryW",
    "RasGetErrorStringA",
    "RasHangUpW",
    "RasConnectionNotificationA",
    "RasGetAutodialEnableW",
    "UnInitializeRAS",
    "RasEditPhonebookEntryW",
    "RasGetEapUserDataW",
    "RasGetCountryInfoA",
    "RasDialA",
    "RasSetSubEntryPropertiesA",
    "RasGetAutodialParamA",
    "DwEnumEntryDetails",
    "RasGetAutodialAddressA",
    "RasGetProjectionInfoEx",
    "DwCloneEntry",
    "RasGetEapUserDataA",
    "RasClearConnectionStatistics",
    "RasSetEntryPropertiesW",
    "RasSetAutodialEnableW",
    "RasSetCustomAuthDataW",
    "RasEnumConnectionsA",
    "RasConnectionNotificationW",
    "RasAutodialAddressToNetwork",
    "RasGetConnectStatusW",
    "RasGetEntryDialParamsW",
    "RasQueryRedialOnLinkFailure",
    "RasIsPublicPhonebook",
    "RasGetHport",
    "RasValidateEntryNameW",
    "RasSetEapUserDataW",
    "RasSetAutodialParamW",
    "RasSetAutodialEnableA",
    "RasScriptTerm",
    "RasValidateEntryNameA",
    "RasSetSharedAutoDial",
    "RasEnumDevicesA",
    "RasQuerySharedAutoDial",
    "RasSetAutodialAddressW",
    "RasSetEapUserDataA",
    "DDMGetPhonebookInfo",
    "RasCreatePhonebookEntryA",
    "RasCreatePhonebookEntryW",
    "RasGetCredentialsA",
    "RasQuerySharedConnection",
    "RasDeleteEntryW",
    "RasClearLinkStatistics",
    "RasSetEapUserDataAEx",
    "RasRenameEntryA",
    "RasGetConnectionStatistics",
    "RasSetAutodialParamA",
    "RasFreeEapUserIdentityA",
    "RasSetEntryDialParamsW",
    "RasSetOldPassword",
    "RasGetProjectionInfoA",
    "RasSetAutodialAddressA",
    "RasGetAutodialAddressW",
    "RasGetCustomAuthDataA",
    "RasGetCountryInfoW",
    "RasGetEntryDialParamsA",
    "RasScriptSend",
    "RasSetEapUserDataWEx",
    "RasGetSubEntryHandleA",
    "RasDeleteSubEntryW",
    "RasSetSubEntryPropertiesW",
    "RasGetSubEntryPropertiesW",
    "RasEditPhonebookEntryA",
    "RasEnumEntriesW",
    "RasEnumAutodialAddressesA",
    "RasEnumAutodialAddressesW",
    "RasScriptGetIpAddress",
    "RasGetConnectStatusA",
    "RasSetCustomAuthDataA",
    "RasAutodialEntryToNetwork",
    "DwRasUninitialize",
    "RasFreeEapUserIdentityW",
    "RasInvokeEapUI",
    "RasGetLinkStatistics",
    "RasScriptReceive",
    "RasScriptInit",
    "RasGetAutodialEnableA",
    "RasWriteSharedPbkOptions",
    "RasGetSubEntryHandleW",
    "RasEnumConnectionsW",
    "DDMFreePhonebookContext",
    "RasGetEntryHrasconnW",
    "RasSetEntryPropertiesA",
    "RasHangUpA",
    "RasDeleteEntryA",
    "RasDeleteSubEntryA",
    "RasEnumEntriesA",
    "RasIsSharedConnection",
    "RasGetSubEntryPropertiesA",
    "RasGetEapUserIdentityA",
    "RasGetEntryPropertiesW",
    "RasGetErrorStringW",
    "RasGetNapStatus",
    "RasGetProjectionInfoW",
    "RasUpdateConnection"
  ],
  "rasauto.dll": [
    "ServiceMain",
    "SetAddressDisabledEx"
  ],
  "rascfg.dll": [
    "ModemClassCoInstaller",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "raschap.dll": [
    "RasEapInvokeInteractiveUI",
    "RasCpEnumProtocolIds",
    "RasEapGetIdentityPageGuid",
    "RasEapCreateConnectionPropertiesXml",
    "RasEapCreateConnectionProperties",
    "RasEapGetConfigBlobAndUserBlob",
    "DllRegisterServer",
    "DllUnregisterServer",
    "RasEapGetIdentity",
    "RasEapGetCredentials",
    "RasEapQueryUserBlobFromCredentialInputFields",
    "RasEapGetNextPageGuid",
    "DllCanUnloadNow",
    "RasEapCreateConnectionProperties2",
    "RasEapQueryCredentialInputFields",
    "RasCpGetInfo",
    "RasEapCreateMethodConfiguration",
    "RasEapCreateUserProperties2",
    "RasEapFreeMemory",
    "RasEapQueryUIBlobFromInteractiveUIInputFields",
    "RasEapGetMethodProperties",
    "DllGetClassObject",
    "RasEapGetInfo",
    "RasEapCreateUserProperties",
    "RasEapInvokeConfigUI",
    "RasEapQueryInteractiveUIInputFields"
  ],
  "rasctrs.dll": [
    "CloseRasPerformanceData",
    "OpenRasPerformanceData",
    "CollectRasPerformanceData"
  ],
  "rasdiag.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "rasdlg.dll": [
    "RouterEntryDlgA",
    "RasSrvAddPropPages",
    "RasSrvAllowConnectionsConfig",
    "RasEntryDlgA",
    "RasSrvIsServiceRunning",
    "RasHandleDiagnostics",
    "RasSrvCleanupService",
    "RasAutodialQueryDlgA",
    "RasSrvEnumConnections",
    "RasUserGetManualDial",
    "RasSrvHangupConnection",
    "DllCanUnloadNow",
    "RasSrvIsConnectionConnected",
    "RasDialDlgW",
    "RasUserEnableManualDial",
    "RasSrvInitializeService",
    "DllGetClassObject",
    "RasEntryDlgW",
    "RasPhonebookDlgW",
    "DwTerminalDlg",
    "RouterEntryDlgW",
    "RasSrvIsICConfigured",
    "GetRasDialOutProtocols",
    "RasAutodialQueryDlgW",
    "RasDialDlgA",
    "RasPhonebookDlgA",
    "RasUserPrefsDlg"
  ],
  "rasgcw.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "rasman.dll": [
    "RasPortDisconnect",
    "RasSendNotification",
    "RasRpcConnect",
    "RasRpcDeleteEntry",
    "RasBundleGetStatisticsEx",
    "RasSetCalledIdInfo",
    "RasGetConnectInfo",
    "RasSetConnectionParams",
    "RasSetRouterUsage",
    "RasRegisterPnPHandler",
    "RasGetEapUserInfo",
    "RasDeviceSetInfoSafe",
    "RasPortClearStatistics",
    "RasRemoveNotificationEx",
    "RasFindPrerequisiteEntry",
    "RasAllocateRoute",
    "RasGetProtocolInfo",
    "RasGetUnicodeDeviceName",
    "RasProtocolChangePassword",
    "RasReferenceRasman",
    "RasPortStoreUserData",
    "RasServerPortClose",
    "RasFreeInterfaceLuidIndex",
    "RasAddNotification",
    "RasEnumConnectionPorts",
    "RasGetCompartmentInfo",
    "RasSecurityDialogSend",
    "RasSetEapUIData",
    "RasCreateConnection",
    "RasGetDeviceNameW",
    "RasDeAllocateRoute",
    "RasGetHportFromConnection",
    "RasInitialize",
    "RasDeviceSetInfo",
    "RasActivateRoute",
    "RasBundleGetPort",
    "RasSetCommSettings",
    "RasGetDialMachineEventContext",
    "RasGetDevConfig",
    "RasPortListen",
    "RasPortGetProtocolCompression",
    "RasBundleClearStatisticsEx",
    "RasDeviceGetInfo",
    "RasProtocolStart",
    "RasDestroyConnection",
    "RasGetFramingCapabilities",
    "RasRpcGetSystemDirectory",
    "RasEnableIpSec",
    "RasGetUserCredentials",
    "RasSetDialParams",
    "RasSetDeviceConfigInfo",
    "RasFreeBuffer",
    "RasRpcGetDevConfig",
    "RasSecurityDialogGetInfo",
    "RasPortOpen",
    "RasRPCBind",
    "RasPortReceiveEx",
    "RasPortGetBundle",
    "RasGetNumPortOpen",
    "RasPortGetStatistics",
    "RasGetNotificationEntry",
    "RasRpcPortEnum",
    "RasRpcDisconnectServer",
    "RasDeleteIkev2PskPolicy",
    "RasRpcRemoteSetUserPreferences",
    "RasConnectionGetStatistics",
    "RasGetKey",
    "RasPortSetProtocolCompression",
    "RasSetNetworkInfo",
    "RasPortOpenEx",
    "RasGetInfoEx",
    "RasPortSetInfo",
    "RasRpcPortGetInfo",
    "RasProtocolRetry",
    "RasGetDeviceName",
    "RasRpcGetCountryInfo",
    "RasRpcGetVersion",
    "RasSetEncPassword",
    "RasPortReceive",
    "RasRpcRemoteGetSystemDirectory",
    "RasProtocolUpdateConnection",
    "RasProtocolEnum",
    "RasSignalMonitorThreadExit",
    "RasRefConnection",
    "RasPortConnectComplete",
    "RasGetTimeSinceLastActivity",
    "RasGetConnectionParams",
    "RasPortGetStatisticsEx",
    "RasRegisterRedialCallback",
    "RasRpcGetErrorString",
    "RasPlumbIkev2PskPolicy",
    "RasSetConnectionUserData",
    "RasSetTunnelEndPoints",
    "RasPortGetBundledPort",
    "RasStartProtocolRenegotiation",
    "RasRpcConnectServer",
    "RasRpcGetInstalledProtocols",
    "RasRpcRemoteRasDeleteEntry",
    "RasSetKey",
    "RasAllocInterfaceLuidIndex",
    "RasGetDevConfigEx",
    "RasPortCancelReceive",
    "RasRpcGetUserPreferences",
    "RasProtocolStop",
    "RasGetCalledIdInfo",
    "RasProtocolStarted",
    "RasSendCreds",
    "RasRpcDeviceEnum",
    "RasRequestNotification",
    "RasGetDeviceConfigInfo",
    "RasStartRasAutoIfRequired",
    "RasmanUninitialize",
    "RasSecurityDialogReceive",
    "RasGetNdiswanDriverCaps",
    "RasSetAddressDisable",
    "RasGetConnectionUserData",
    "RasAddNotificationEx",
    "RasActivateRouteEx",
    "RasIsPulseDial",
    "RasBundleClearStatistics",
    "RasReferenceCustomCount",
    "RasRpcDisconnect",
    "RasGetPortUserData",
    "RasRpcRemoteGetUserPreferences",
    "RasSetCachedCredentials",
    "RasCompressionGetInfo",
    "RasPortClose",
    "RasSetupSstpServerConfig",
    "RasSetDialMachineEventHandle",
    "RasGetBuffer",
    "RasRpcUnloadDll",
    "RasPortGetFramingEx",
    "RasIsTrustedCustomDll",
    "RasBundleGetStatistics",
    "RasGetCustomScriptDll",
    "RasGetInfo",
    "RasPortFree",
    "RasSetPortUserData",
    "RasGetEapUIData",
    "RasDoIke",
    "RasLinkGetStatistics",
    "RasPortReserve",
    "RasPortEnumProtocols",
    "RasDeviceConnect",
    "RasProtocolCallback",
    "RasUpdateDefaultRouteSettings",
    "RasRpcSetUserPreferences",
    "RasSetEapInfo",
    "RasPortSetFraming",
    "RasPortEnum",
    "RasPortGetInfo",
    "RasRegisterPnPEvent",
    "RasProtocolGetInfo",
    "RasInitializeNoWait",
    "RasSendProtocolResultToRasman",
    "RasCompressionSetInfo",
    "RasApplyPostConnectActions",
    "RasPortSetFramingEx",
    "RasRpcEnumConnections",
    "RasSetEapUserInfo",
    "RasSignalNewConnection",
    "RasPortBundle",
    "RasGetHConnFromEntry",
    "RasRpcGetInstalledProtocolsEx",
    "RasEnumLanNets",
    "RasDeviceEnum",
    "RasGetDialParams",
    "RasSetDevConfig",
    "IsRasmanProcess",
    "RasAddConnectionPort",
    "RasConnectionEnum",
    "RasPortRetrieveUserData",
    "RasPortSend"
  ],
  "rasmans.dll": [
    "SetEntryDialParams",
    "ServiceRequestInProcess",
    "ServiceMain"
  ],
  "rasmbmgr.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "rasmontr.dll": [
    "RutlIsHelpToken",
    "RutlAlloc",
    "RutlGetOsVersion",
    "RutlCreateDumpFile",
    "RutlAssignmentFromTokens",
    "RutlParse",
    "RutlAssignmentFromTokenAndDword",
    "GetDiagnosticFunctions",
    "RutlGetTagToken",
    "RutlFree",
    "RutlCloseDumpFile",
    "InitHelperDll",
    "RutlStrDup",
    "RutlDwordDup"
  ],
  "rasmxs.dll": [
    "DeviceEnum",
    "DeviceSetInfo",
    "DeviceGetInfo",
    "DeviceConnect",
    "DeviceWork",
    "DeviceListen",
    "DeviceDone"
  ],
  "rasplap.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "rasppp.dll": [
    "InitializeServerProtocolEngine",
    "RasCpGetInfo",
    "RasCpEnumProtocolIds",
    "UninitializeProtocolEngine",
    "InitializeProtocolEngine",
    "UninitializeServerProtocolEngine",
    "PppStop",
    "SendMessageToProtocolEngine"
  ],
  "rasser.dll": [
    "PortOpen",
    "PortClose",
    "PortDisconnect",
    "PortGetStatistics",
    "PortTestSignalState",
    "PortSetInfo",
    "PortEnum",
    "PortSetFraming",
    "PortCompressionSetInfo",
    "PortClearStatistics",
    "PortSend",
    "PortSetINetCfg",
    "PortInit",
    "PortGetPortState",
    "PortGetInfo",
    "PortChangeCallback",
    "PortReceiveComplete",
    "PortReceive",
    "PortConnect"
  ],
  "rastapi.dll": [
    "PortOpen",
    "PortClose",
    "PortSetIoCompletionPort",
    "DeviceConnect",
    "PortDisconnect",
    "PortGetStatistics",
    "PortTestSignalState",
    "PortOpenExternal",
    "PortSetInfo",
    "AddPorts",
    "PortEnum",
    "GetConnectInfo",
    "DeviceSetInfo",
    "RasTapiIsPulseDial",
    "PortSetFraming",
    "PortChangeCallback",
    "PortCompressionSetInfo",
    "DeviceDone",
    "GetZeroDeviceInfo",
    "DeviceListen",
    "PortGetIOHandle",
    "RastapiSetCalledID",
    "RastapiGetCalledID",
    "DeviceGetDevConfig",
    "PortClearStatistics",
    "PortSend",
    "PortInit",
    "PortGetPortState",
    "DeviceEnum",
    "RefreshDevices",
    "RemovePort",
    "UnloadRastapiDll",
    "PortGetInfo",
    "DeviceGetInfo",
    "DeviceGetDevConfigEx",
    "SetCommSettings",
    "DeviceWork",
    "EnableDeviceForDialIn",
    "PortReceiveComplete",
    "PortReceive",
    "PortConnect",
    "DeviceSetDevConfig"
  ],
  "rastls.dll": [
    "RasEapInvokeInteractiveUI",
    "RasEapGetIdentityPageGuid",
    "RasEapCreateConnectionPropertiesXml",
    "RasEapCreateConnectionProperties",
    "RasEapGetConfigBlobAndUserBlob",
    "DllRegisterServer",
    "DllUnregisterServer",
    "RasEapGetIdentity",
    "RasEapGetCredentials",
    "RasEapQueryUserBlobFromCredentialInputFields",
    "RasEapGetNextPageGuid",
    "RasEapUpdateServerConfig",
    "DllCanUnloadNow",
    "RasEapCreateConnectionProperties2",
    "RasEapQueryCredentialInputFields",
    "RasEapCreateMethodConfiguration",
    "RasEapCreateUserProperties2",
    "RasEapFreeMemory",
    "RasEapQueryUIBlobFromInteractiveUIInputFields",
    "RasEapGetMethodProperties",
    "DllGetClassObject",
    "RasEapGetInfo",
    "RasEapCreateUserProperties",
    "RasEapInvokeConfigUI",
    "RasEapQueryInteractiveUIInputFields"
  ],
  "rdpcfgex.dll": [
    "ExtGetCapabilities",
    "ExtEncryptionLevels",
    "ExtGetEncryptionLevelAndDescrEx",
    "ExtGetEncryptionLevelDescr",
    "ExtEnd",
    "ExtSecurityLayers",
    "ExtStart",
    "ExGetCfgVersionInfo",
    "ExtGetSecurityLayerName",
    "ExtGetSecurityLayerDescrString"
  ],
  "rdpcore.dll": [
    "RDPAPI_CreateInstance"
  ],
  "rdpcorets.dll": [
    "RFX_CreateGFXService",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "RFX_CreatePluginFactory",
    "DllUnregisterServer"
  ],
  "rdpencom.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "rdpendp.dll": [
    "GetTSAudioEndpointEnumeratorForSession",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "rdpudd.dll": "No exports",
  "rdsdwmdr.dll": [
    "DwmIndirectCreate",
    "DwmIndirectSetDebugFlag",
    "DwmIndirectOutput"
  ],
  "rdvvmtransport.dll": [
    "RdvTransport_TerminateInstance",
    "RdvTransport_GetInstance",
    "RdvTransport_CreateInstance"
  ],
  "recovery.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "regapi.dll": [
    "RegWinStationSetSecurityW",
    "RegGetUserConfigFromUserParameters",
    "RegQueryMonitorSettings",
    "RegWinstationQuerySecurityConfig_Merged",
    "UsrPropGetString",
    "RegGetMachinePolicy",
    "RegWinStationDeleteA",
    "RegIsMachineInHelpMode",
    "RegWinStationCreateA",
    "RegCdEnumerateA",
    "RegGetLicensingModePolicy",
    "RegPdEnumerateW",
    "RegQuerySessionSettings",
    "RegUserConfigDelete",
    "RegPdEnumerateA",
    "RegSAMUserConfig",
    "RegWinStationQueryValueW",
    "RegQueryOEMId",
    "RegCdCreateW",
    "RegWinStationQueryEx",
    "SetUserProperty",
    "RegPdDeleteW",
    "RegWinStationEnumerateA",
    "RegPdQueryW",
    "RegWdDeleteA",
    "RegUserConfigRename",
    "RegWinStationQueryExW",
    "RegBuildNumberQuery",
    "RegMergeUserConfigWithUserParameters",
    "RegWdCreateA",
    "RegCdCreateA",
    "RegWinStationQueryExNew",
    "RegPdDeleteA",
    "RegIsMachinePolicyAllowHelp",
    "RegCreateUserConfigW",
    "RegIsTServer",
    "RegWinStationAccessCheck",
    "RegPdCreateA",
    "RegSetLicensePolicyID",
    "RegWinStationDeleteW",
    "RegConsoleShadowQueryA",
    "RegGetMachinePolicyNew",
    "RegConsoleShadowQueryW",
    "RegGetTServerVersion",
    "RegSetSrcAcceptConnections",
    "RegPdQueryA",
    "RegWdDeleteW",
    "RegFreeUtilityCommandList",
    "UsrPropGetValue",
    "RegGetLicensePolicyID",
    "RegCloseServer",
    "RegUserConfigSet",
    "RegWdQueryW",
    "RegCdEnumerateW",
    "RegWdEnumerateW",
    "RegGetUserPolicy",
    "RegWinStationCreateW",
    "RegQueryListenerStart",
    "RegCdDeleteA",
    "UsrPropSetValue",
    "RegWinStationSetSecurityA",
    "RegDenyTSConnectionsPolicy",
    "WaitForTSConnectionsPolicyChanges",
    "RegWinStationQueryExtendedSettingsW",
    "RegWinStationSetNumValueW",
    "RegWinStationQuerySecurityA",
    "RegWinstationQuerySecurityConfig_Machine",
    "GetDomainName",
    "RegMergeMachinePolicy",
    "RegCdQueryA",
    "RegCdDeleteW",
    "RegCreateMonitorConfigW",
    "RegWinStationSetExtendedSettingsW",
    "RegGetMachinePolicyEx",
    "RegPdCreateW",
    "RegOpenServerA",
    "RegCdQueryW",
    "RegOpenServerW",
    "RegQueryConnectionSettings",
    "RegWinStationEnumerateW",
    "RegWinStationQueryNumValueW",
    "RegWinStationQueryW",
    "RegWinStationSetDefaultSecurity",
    "QueryUserProperty",
    "RegQueryUtilityCommandList",
    "RegDefaultUserConfigQueryA",
    "RegIsTimeZoneRedirectionEnabled",
    "RegIsSrcAcceptingConnections",
    "UsrPropSetString",
    "RegUserConfigQuery",
    "RegWinStationQueryA",
    "RegWdQueryA",
    "RegWinStationQueryDefaultSecurity",
    "RegWdCreateW",
    "RegWinstationSetSecurityConfig",
    "RegWinStationQuerySecurityW",
    "RegDefaultUserConfigQueryW",
    "RegWdEnumerateA",
    "CheckStringForAsciiConversion"
  ],
  "regidle.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "regsvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "remotepg.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "reseteng.dll": [
    "RjvCleanup",
    "RjvDelayedCleanupEntryPoint",
    "RjvDelayedCleanup",
    "RjvGetVolumeInfo",
    "RjvApplyDataEntryPoint",
    "RjvUninitializeEngine",
    "RjvCommitReset",
    "RjvLoadState",
    "RjvLogSuccessEntryPoint",
    "RjvFactoryReset",
    "RjvBasicReset",
    "RjvCheckRecoveryImage",
    "RjvPBCDClearRollBackEntry",
    "RjvBasicResetChecks",
    "RjvPBCDSetRollBackEntry",
    "RjvCheckOsHealth",
    "RjvLogFailureEntryPoint",
    "RjvPDeleteFilesFromVolume",
    "RjvFinalize",
    "RjvReInitializeEngine",
    "RjvOfflineCleanup",
    "RjvRollBack",
    "RjvSysResetErrFactoryEntryPoint",
    "RjvSysResetErrBasicEntryPoint",
    "RjvFactoryResetChecks",
    "RjvCheckBattery",
    "RjvSaveState",
    "RjvTestFunction",
    "RjvApplyData",
    "RjvPEraseVolume",
    "RjvCheckBitLocker",
    "RjvCheckWinRE",
    "RjvInitializeEngine",
    "RjvVerifySystemDiskInfo",
    "RjvUndoPrepareForReset",
    "RjvSendFailureReport",
    "RjvPrepareForReset",
    "RjvCheckDiskSpace",
    "RjvStageBasicReset"
  ],
  "resetengmig.dll": [
    "RjvMigWrapperCopyAllFiles",
    "RjvMigWrapperUpgExecuteGatherOffline",
    "RjvMigWrapperUpgExecuteCleanup",
    "RjvMigDoRollback",
    "RjvMigWrapperUpgOrchestrateOSSwitch",
    "RjvMigWrapperWdsInitialize",
    "RjvMigWrapperUpgExecuteOfflineApply",
    "RjvMigWrapperUpgExecuteFirstBootApply"
  ],
  "resutils.dll": [
    "ClusterEnumTasks",
    "ResUtilFindDependentDiskResourceDriveLetter",
    "ResUtilGetFileTimeProperty",
    "ClusterIsPathOnSharedVolume",
    "ResUtilFindSzProperty",
    "ResUtilSetExpandSzValue",
    "ResUtilSetResourceServiceEnvironment",
    "ClusterIsClusterDisk",
    "ResUtilGetResourceName",
    "ClusWorkerTerminate",
    "ResUtilGetLongProperty",
    "ResUtilEnumResources",
    "ClusterTaskCreateFromXMLFile",
    "ResUtilSetPropertyTable",
    "ResUtilSetQwordValue",
    "ResUtilGetResourceDependencyByClass",
    "ResUtilIsResourceClassEqual",
    "ResUtilSetResourceServiceStartParameters",
    "ClusterTaskQuery",
    "ResUtilGetProperty",
    "ResUtilGetEnvironmentWithNetName",
    "ResUtilRemoveResourceServiceEnvironment",
    "ResUtilGetResourceNameDependency",
    "ResUtilGetDwordValue",
    "ResUtilStartResourceService",
    "ClusterFreeTaskInfo",
    "ResUtilDupParameterBlock",
    "ResUtilSetPropertyParameterBlockEx",
    "ResUtilGetResourceDependencyByClassEx",
    "ResUtilAddUnknownProperties",
    "ClusterTaskChange_TS_V1",
    "ResUtilGetPrivateProperties",
    "ResUtilGetResourceDependencyEx",
    "ResUtilGetProperties",
    "ResUtilGetResourceDependentIPAddressProps",
    "ResUtilGetResourceDependencyByName",
    "ResUtilSetDwordValue",
    "ResUtilFindMultiSzProperty",
    "ResUtilGetResourceDependencyByNameAndClass",
    "ClusterSharedVolumeReleaseSnapshot",
    "ResUtilGetQwordValue",
    "ResUtilVerifyPrivatePropertyList",
    "ClusterTaskCreateFromXML",
    "ClusWorkerStart",
    "ResUtilGetDwordProperty",
    "ResUtilGetPropertyFormats",
    "ResUtilResourceTypesEqual",
    "ResUtilIsPathValid",
    "ResUtilDupString",
    "ResUtilGetMultiSzProperty",
    "ClusterGetVolumePathName",
    "ResUtilSetUnknownProperties",
    "ClusterSharedVolumeCreateSnapshot",
    "ClusterGetVolumeNameForVolumeMountPoint",
    "ResUtilPropertyListFromParameterBlock",
    "ClusterSharedVolumeCheckSnapshotPresence",
    "ResUtilGetSzValue",
    "ResUtilVerifyPropertyTable",
    "ResUtilVerifyService",
    "ClusterFileShareDelete",
    "ClusterPrepareSharedVolumeForBackup",
    "ClusterTaskDelete",
    "ResUtilCreateDirectoryTree",
    "ResUtilFindBinaryProperty",
    "ClusWorkerCheckTerminate",
    "ResUtilFreeEnvironment",
    "ResUtilGetCoreClusterResourcesEx",
    "ClusterTaskCreate_TS_V1",
    "ResUtilSetPropertyParameterBlock",
    "ResUtilEnumResourcesEx2",
    "ClusterFileShareUpdate",
    "ResUtilGetPropertySize",
    "ResUtilGetCoreClusterResources",
    "ResUtilFindExpandedSzProperty",
    "ResUtilFindDwordProperty",
    "ResUtilVerifyResourceService",
    "ClusterFileShareCreate",
    "ResUtilGetAllProperties",
    "ResUtilGetBinaryValue",
    "ResUtilSetBinaryValue",
    "ResUtilGetResourceDependency",
    "ClusterTaskChangeFromXMLFile",
    "ResUtilGetPropertiesToParameterBlock",
    "ResUtilFindLongProperty",
    "ClusterTaskDelete_TS_V1",
    "ResUtilSetResourceServiceStartParametersEx",
    "ClusWorkerCreate",
    "ResUtilStopResourceService",
    "ResUtilEnumProperties",
    "ResUtilStopService",
    "ResUtilGetBinaryProperty",
    "ResUtilSetPrivatePropertyList",
    "ResUtilGetResourceDependencyByNameEx",
    "ResUtilFindExpandSzProperty",
    "ClusterTaskChangeFromXML",
    "ResUtilGetResourceNameDependencyEx",
    "ResUtilEnumPrivateProperties",
    "ResUtilFreeParameterBlock",
    "ResUtilGetClusterRoleState",
    "ResUtilEnumResourcesEx",
    "ClusterGetTaskNode",
    "ResUtilExpandEnvironmentStrings",
    "ResUtilSetSzValue",
    "ResUtilSetMultiSzValue",
    "ResUtilGetSzProperty",
    "ResUtilFindFileTimeProperty",
    "ClusterTaskExists_TS_V1",
    "ResUtilTerminateServiceProcessFromResDll",
    "ResUtilSetPropertyTableEx",
    "ClusterClearBackupStateForSharedVolume",
    "ClusterFreeTaskList",
    "ResUtilResourcesEqual"
  ],
  "rfxvmt.dll": [
    "RfxVmtDisableLibrary",
    "RfxVmtIsWriteDataConsumed",
    "RfxVmtReadChannelAndCache",
    "RfxVmtCloseChannel",
    "RfxVmtGetDataAvailableEvent",
    "RfxVmtVWriteChannel",
    "RfxVmtGetChannelStatus",
    "RfxVmtCreateChannel",
    "RfxVmtReadChannel",
    "RfxVmtEnableLibrary",
    "RfxVmtWriteChannel"
  ],
  "rgb9rast.dll": [
    "public: long __thiscall PrimProcessor::Initialize(void)",
    "public: void __thiscall PrimProcessor::StateChanged(void)",
    "private: int __thiscall PrimProcessor::PointDiamondCheck(int,int,int,int)",
    "public: long __thiscall PrimProcessor::End(void)",
    "public: unsigned int __thiscall PrimProcessor::GetFlags(void)",
    "private: int __thiscall PrimProcessor::LineSetup(struct _D3DTLVERTEX *,struct _D3DTLVERTEX *)",
    "private: void __thiscall PrimProcessor::SetTriFunctions(void)",
    "private: void __thiscall PrimProcessor::NormalizePointRHW(struct _D3DTLVERTEX *)",
    "private: void __thiscall PrimProcessor::FillPointSpan(struct _D3DTLVERTEX *,struct tagD3DI_RASTSPAN *)",
    "public: void __thiscall PrimProcessor::ClrFlags(unsigned int)",
    "public: void __thiscall PrimProcessor::SetFlags(unsigned int)",
    "private: void __thiscall PrimProcessor::NormalizeTriRHW(struct _D3DTLVERTEX *,struct _D3DTLVERTEX *,struct _D3DTLVERTEX *)",
    "private: void __thiscall PrimProcessor::ResetBuffer(void)",
    "private: long __thiscall PrimProcessor::FlushPartial(void)",
    "public: class PrimProcessor & __thiscall PrimProcessor::operator=(class PrimProcessor const &)",
    "private: void __thiscall PrimProcessor::NormalizeLineRHW(struct _D3DTLVERTEX *,struct _D3DTLVERTEX *)",
    "private: int __thiscall PrimProcessor::TriSetup(struct _D3DTLVERTEX *,struct _D3DTLVERTEX *,struct _D3DTLVERTEX *)",
    "public: void __thiscall PrimProcessor::SetCtx(struct tagD3DI_RASTCTX *)",
    "public: long __thiscall PrimProcessor::Point(struct _D3DTLVERTEX *,struct _D3DTLVERTEX *)",
    "public: void __thiscall PrimProcessor::FreeSpans(unsigned int)",
    "public: __thiscall PrimProcessor::PrimProcessor(void)",
    "public: long __thiscall PrimProcessor::Line(struct _D3DTLVERTEX *,struct _D3DTLVERTEX *,struct _D3DTLVERTEX *)",
    "D3D9GetSWInfo",
    "public: __thiscall PrimProcessor::~PrimProcessor(void)",
    "public: long __thiscall PrimProcessor::AllocSpans(unsigned int *,struct tagD3DI_RASTSPAN * *)",
    "public: void __thiscall PrimProcessor::Begin(void)",
    "private: long __thiscall PrimProcessor::AppendPrim(void)",
    "public: long __thiscall PrimProcessor::Tri(struct _D3DTLVERTEX *,struct _D3DTLVERTEX *,struct _D3DTLVERTEX *)",
    "public: void __thiscall PrimProcessor::BeginPrimSet(enum _D3DPRIMITIVETYPE,enum _RAST_VERTEX_TYPE)",
    "private: long __thiscall PrimProcessor::Flush(void)"
  ],
  "riched20.dll": [
    "REExtendedRegisterClass",
    "RichEdit10ANSIWndProc",
    "RichEditANSIWndProc",
    "IID_ITextHost2",
    "IID_ITextHost",
    "CreateTextServices",
    "IID_IRichEditOle",
    "IID_ITextServices",
    "IID_IRichEditOleCallback"
  ],
  "riched32.dll": "No exports",
  "rnr20.dll": [
    "NSPStartup"
  ],
  "rometadata.dll": [
    "MetaDataGetDispenser"
  ],
  "rpchttp.dll": [
    "DuplicateHttpTransportCredentials",
    "I_RpcReplyToClientWithStatus",
    "I_RpcTransFreeHttpCredentials",
    "HTTP2TestHook",
    "FreeHttpTransportCredentials",
    "HTTP2ProcessRuntimePostedEvent",
    "HTTP2ProcessComplexTSend",
    "CompareHttpTransportCredentials",
    "I_RpcProxyNewConnection",
    "WS_HTTP2_INITIAL_CONNECTION__new",
    "HTTP2ProcessComplexTReceive",
    "I_RpcGetRpcProxy",
    "HTTP2GetRpcConnectionTransport",
    "I_RpcTransGetHttpCredentials",
    "HttpSendIdentifyResponse",
    "HttpParseNetworkOptions",
    "ConvertToUnicodeHttpTransportCredentials",
    "WS_HTTP2_CONNECTION__Initialize"
  ],
  "rpcnsh.dll": [
    "InitHelperDll"
  ],
  "rpcrt4.dll": [
    "NdrMesSimpleTypeAlignSize",
    "I_RpcMgmtQueryDedicatedThreadPool",
    "NdrFixedArrayMarshall",
    "I_RpcInitImports",
    "RpcSmEnableAllocate",
    "I_RpcReceive",
    "I_RpcFwThisIsTheManager",
    "NdrNonEncapsulatedUnionMarshall",
    "NdrDllRegisterProxy",
    "NdrInterfacePointerMarshall",
    "RpcServerUseProtseqA",
    "RpcBindingSetAuthInfoExA",
    "RpcErrorGetNumberOfRecords",
    "NdrByteCountPointerMarshall",
    "CStdStubBuffer_Connect",
    "RpcBindingFree",
    "RpcNetworkInqProtseqsW",
    "NdrConformantVaryingStructMarshall",
    "RpcServerUseProtseqEpExW",
    "NDRSContextUnmarshallEx",
    "RpcImpersonateClient",
    "RpcNsBindingInqEntryNameA",
    "CStdStubBuffer_DebugServerRelease",
    "RpcRevertToSelf",
    "I_RpcCertProcessAndProvision",
    "NdrCStdStubBuffer_Release",
    "NdrpGetTypeGenCookie",
    "RpcMgmtSetAuthorizationFn",
    "NdrConformantStringMarshall",
    "I_RpcFreePipeBuffer",
    "NdrDllCanUnloadNow",
    "RpcErrorGetNextRecord",
    "NdrTypeMarshall",
    "RpcProtseqVectorFreeA",
    "RpcStringBindingComposeA",
    "RpcEpRegisterNoReplaceW",
    "I_RpcOpenClientProcess",
    "NdrCorrelationInitialize",
    "NdrPointerMemorySize",
    "RpcMgmtInqDefaultProtectLevel",
    "RpcBindingInqObject",
    "NdrProxyFreeBuffer",
    "NdrTypeFlags",
    "I_RpcGetBuffer",
    "NdrpReleaseTypeFormatString",
    "RpcSsDisableAllocate",
    "RpcMgmtEpEltInqBegin",
    "NdrConformantStringMemorySize",
    "NdrByteCountPointerUnmarshall",
    "I_RpcParseSecurity",
    "short_array_from_ndr",
    "NdrPointerUnmarshall",
    "I_RpcAllocate",
    "NdrConvert2",
    "NdrFullPointerQueryRefId",
    "RpcMgmtInqServerPrincNameA",
    "NdrConformantArrayBufferSize",
    "RpcMgmtWaitServerListen",
    "I_RpcMarshalBindingHandleAndInterfaceForNDF",
    "NdrRpcSmClientAllocate",
    "I_RpcInitHttpImports",
    "NdrDllGetClassObject",
    "NdrComplexArrayMarshall",
    "RpcSmSetClientAllocFree",
    "RpcObjectSetInqFn",
    "CStdStubBuffer_IsIIDSupported",
    "I_RpcOpenClientThread",
    "NdrNonConformantStringBufferSize",
    "RpcServerUseProtseqExA",
    "RpcServerUseProtseqIfExA",
    "UuidToStringW",
    "RpcStringBindingComposeW",
    "NdrInterfacePointerFree",
    "NdrMesTypeFree2",
    "RpcExceptionFilter",
    "IUnknown_QueryInterface_Proxy",
    "I_RpcSystemFunction001",
    "NdrStubForwardingFunction",
    "NdrGetTypeFlags",
    "UuidHash",
    "NDRSContextMarshallEx",
    "NdrConformantVaryingArrayMemorySize",
    "I_RpcFreeBuffer",
    "tree_into_ndr",
    "CreateStubFromTypeInfo",
    "NdrOleFree",
    "NdrPointerMarshall",
    "NdrRpcSsDefaultFree",
    "SimpleTypeMemorySize",
    "NdrEncapsulatedUnionMarshall",
    "RpcSmClientFree",
    "NdrUserMarshalBufferSize",
    "RpcServerRegisterIf2",
    "RpcAsyncAbortCall",
    "NdrServerInitializeNew",
    "NdrOutInit",
    "RpcServerUseProtseqIfExW",
    "NdrXmitOrRepAsFree",
    "NdrConformantStructMarshall",
    "RpcSmFree",
    "I_RpcSNCHOption",
    "NdrFullPointerQueryPointer",
    "DllRegisterServer",
    "NdrPointerBufferSize",
    "RpcProtseqVectorFreeW",
    "NdrVaryingArrayMarshall",
    "I_UuidCreate",
    "I_RpcBindingInqMarshalledTargetInfo",
    "NdrConformantStructMemorySize",
    "UuidCreateSequential",
    "NdrRpcSmSetClientToOsf",
    "NdrUserMarshalMemorySize",
    "I_RpcGetBufferWithObject",
    "RpcServerInterfaceGroupCreateA",
    "NdrAllocate",
    "I_RpcNegotiateTransferSyntax",
    "I_RpcBindingInqClientTokenAttributes",
    "NdrFullPointerInsertRefId",
    "I_RpcServerSetAddressChangeFn",
    "RpcIfIdVectorFree",
    "RpcBindingSetOption",
    "RpcServerInqBindingHandle",
    "I_RpcTransConnectionReallocPacket",
    "I_RpcServerIsClientDisconnected",
    "NdrServerContextNewMarshall",
    "CStdStubBuffer_DebugServerQueryInterface",
    "NdrConformantArrayMarshall",
    "RpcErrorStartEnumeration",
    "UuidToStringA",
    "RpcServerInqCallAttributesW",
    "I_RpcServerInqTransportType",
    "NdrContextHandleSize",
    "NdrFixedArrayUnmarshall",
    "RpcCertMatchPrincipalName",
    "I_RpcReallocPipeBuffer",
    "RpcSmDestroyClientContext",
    "RpcMgmtInqStats",
    "I_RpcDeleteMutex",
    "UuidFromStringA",
    "NdrNonEncapsulatedUnionBufferSize",
    "RpcBindingInqAuthInfoW",
    "RpcObjectSetType",
    "NdrFullPointerXlatInit",
    "RpcServerRegisterAuthInfoA",
    "RpcMgmtStatsVectorFree",
    "UuidEqual",
    "NdrCorrelationFree",
    "NdrComplexArrayFree",
    "NdrComplexStructMemorySize",
    "NdrProxyGetBuffer",
    "I_RpcTransDatagramAllocate2",
    "I_RpcBindingInqSecurityContext",
    "float_from_ndr",
    "NdrConvert",
    "IUnknown_AddRef_Proxy",
    "RpcTestCancel",
    "NdrComplexStructBufferSize",
    "NDRSContextUnmarshall",
    "I_RpcServerUseProtseqEp2W",
    "DceErrorInqTextA",
    "NdrConformantVaryingStructBufferSize",
    "RpcServerInterfaceGroupCreateW",
    "MesIncrementalHandleReset",
    "NdrConformantVaryingStructMemorySize",
    "NdrVaryingArrayBufferSize",
    "RpcSsEnableAllocate",
    "NdrpReleaseTypeGenCookie",
    "NdrFixedArrayMemorySize",
    "RpcServerUseProtseqEpExA",
    "RpcNetworkIsProtseqValidW",
    "NdrGetSimpleTypeBufferSize",
    "RpcAsyncCompleteCall",
    "NdrEncapsulatedUnionUnmarshall",
    "RpcBindingToStringBindingW",
    "RpcCertGeneratePrincipalNameW",
    "NdrGetSimpleTypeMemorySize",
    "RpcMgmtSetServerStackSize",
    "long_array_from_ndr",
    "NdrServerUnmarshall",
    "NdrFreeBuffer",
    "NdrXmitOrRepAsUnmarshall",
    "NdrConformantArrayMemorySize",
    "NDRCContextBinding",
    "RpcMgmtEpEltInqNextA",
    "RpcServerInterfaceGroupClose",
    "RpcAsyncInitializeHandle",
    "NdrConformantStringUnmarshall",
    "NdrGetBuffer",
    "NdrTypeFree",
    "RpcUserFree",
    "NdrAsyncClientCall",
    "NdrServerMarshall",
    "data_into_ndr",
    "NdrStubCall",
    "RpcSsContextLockExclusive",
    "RpcErrorClearInformation",
    "RpcStringFreeA",
    "NdrCorrelationPass",
    "RpcServerUseAllProtseqsIfEx",
    "I_RpcTransServerNewConnection",
    "RpcServerInqCallAttributesA",
    "NdrServerInitializeMarshall",
    "NdrClientCall",
    "NdrNonConformantStringMarshall",
    "RpcStringBindingParseW",
    "NdrConformantVaryingArrayUnmarshall",
    "MesHandleFree",
    "NdrServerContextUnmarshall",
    "RpcBindingVectorFree",
    "RpcServerRegisterAuthInfoW",
    "I_RpcLogEvent",
    "NdrGetUserMarshalInfo",
    "RpcSsGetThreadHandle",
    "RpcEpRegisterA",
    "RpcServerInterfaceGroupActivate",
    "I_RpcBCacheAllocate",
    "I_RpcGetPortAllocationData",
    "NdrMesTypeDecode",
    "RpcServerInqDefaultPrincNameA",
    "NdrStubCall2",
    "RpcServerUseProtseqEpW",
    "NdrXmitOrRepAsBufferSize",
    "CStdStubBuffer_Disconnect",
    "NdrUserMarshalMarshall",
    "I_RpcBindingInqCurrentModifiedId",
    "I_RpcGetCurrentCallHandle",
    "RpcSsGetContextBinding",
    "I_RpcNsInterfaceExported",
    "MIDL_wchar_strlen",
    "NdrStubGetBuffer",
    "RpcBindingCreateW",
    "SimpleTypeAlignment",
    "I_RpcTransIoCancelled",
    "I_RpcConnectionInqSockBuffSize",
    "RpcBindingSetObject",
    "NdrPartialIgnoreServerUnmarshall",
    "RpcBindingSetAuthInfoA",
    "data_size_ndr",
    "MesEncodeIncrementalHandleCreate",
    "NdrByteCountPointerBufferSize",
    "RpcBindingToStringBindingA",
    "RpcBindingUnbind",
    "RpcSmDisableAllocate",
    "RpcSsSwapClientAllocFree",
    "NdrUserMarshalSimpleTypeConvert",
    "NdrpVarVtOfTypeDesc",
    "RpcErrorResetEnumeration",
    "I_RpcNDRCGetWireRepresentation",
    "RpcBindingInqAuthClientExW",
    "UuidIsNil",
    "RpcMgmtEpEltInqDone",
    "I_RpcNsBindingSetEntryNameW",
    "RpcSsSetClientAllocFree",
    "RpcSsSetThreadHandle",
    "TowerConstruct",
    "NdrClientCall2",
    "NdrRpcSsEnableAllocate",
    "RpcCertGeneratePrincipalNameA",
    "RpcCancelThreadEx",
    "RpcServerCompleteSecurityCallback",
    "I_RpcServerUseProtseqEp2A",
    "RpcSsDestroyClientContext",
    "NdrSimpleTypeMarshall",
    "NdrProxySendReceive",
    "I_RpcServerInqRemoteConnAddress",
    "char_from_ndr",
    "NdrMesTypeDecode2",
    "NdrProxyErrorHandler",
    "I_RpcBindingInqDynamicEndpoint",
    "NdrNonConformantStringMemorySize",
    "NdrComplexArrayMemorySize",
    "I_RpcNsInterfaceUnexported",
    "NdrNonEncapsulatedUnionUnmarshall",
    "I_RpcNDRSContextEmergencyCleanup",
    "NdrDcomAsyncStubCall",
    "RpcServerUseProtseqIfW",
    "NdrCreateServerInterfaceFromStub",
    "pfnFreeRoutines",
    "RpcImpersonateClient2",
    "NdrVaryingArrayMemorySize",
    "RpcServerUseProtseqExW",
    "I_RpcTransGetThreadEventThreadOptional",
    "RpcBindingInqAuthClientExA",
    "NdrEncapsulatedUnionBufferSize",
    "I_RpcBindingInqSecurityContextKeyInfo",
    "RpcMgmtInqServerPrincNameW",
    "data_from_ndr",
    "NdrVaryingArrayFree",
    "NdrContextHandleInitialize",
    "RpcAsyncRegisterInfo",
    "NdrServerInitialize",
    "I_RpcTransDatagramAllocate",
    "MesBufferHandleReset",
    "RpcErrorSaveErrorInfo",
    "MIDL_wchar_strcpy",
    "NdrFixedArrayBufferSize",
    "NdrFullPointerXlatFree",
    "I_RpcMgmtEnableDedicatedThreadPool",
    "NdrComplexStructUnmarshall",
    "RpcRevertToSelfEx",
    "RpcServerUseAllProtseqsEx",
    "RpcSsAllocate",
    "RpcMgmtSetComTimeout",
    "enum_from_ndr",
    "I_RpcBindingInqTransportType",
    "I_RpcCompleteAndFree",
    "RpcErrorAddRecord",
    "NdrMesTypeAlignSize",
    "NdrMesTypeEncode",
    "double_array_from_ndr",
    "NdrClearOutParameters",
    "RpcAsyncGetCallStatus",
    "NdrConformantStructFree",
    "NdrTypeUnmarshall",
    "IUnknown_Release_Proxy",
    "MesDecodeIncrementalHandleCreate",
    "I_RpcServerUseProtseq2A",
    "RpcObjectInqType",
    "I_RpcTransDatagramFree",
    "NdrFullPointerFree",
    "I_RpcRecordCalloutFailure",
    "I_RpcServerRegisterForwardFunction",
    "NdrpGetProcFormatString",
    "I_RpcServerInqAddressChangeFn",
    "NDRCContextMarshall",
    "NdrComplexStructMarshall",
    "RpcBindingInqOption",
    "NdrSimpleStructMemorySize",
    "I_RpcServerInqLocalConnAddress",
    "tree_peek_ndr",
    "I_RpcGetExtendedError",
    "char_array_from_ndr",
    "NdrpCreateStub",
    "I_RpcBindingCreateNP",
    "NdrServerCall",
    "NdrServerInitializeUnmarshall",
    "I_RpcFree",
    "pfnSizeRoutines",
    "NDRSContextMarshall2",
    "RpcServerInterfaceGroupInqBindings",
    "RpcBindingBind",
    "NdrConformantStringBufferSize",
    "RpcNsBindingInqEntryNameW",
    "RpcServerUnregisterIfEx",
    "RpcMgmtStopServerListening",
    "MesInqProcEncodingId",
    "NdrMapCommAndFaultStatus",
    "I_RpcBindingSetPrivateOption",
    "RpcSmAllocate",
    "RpcBindingInqAuthInfoExW",
    "I_RpcBindingInqDynamicEndpointA",
    "NdrComplexArrayBufferSize",
    "NdrGetBaseInterfaceFromStub",
    "RpcBindingSetAuthInfoW",
    "RpcSmSetThreadHandle",
    "RpcSsFree",
    "RpcServerRegisterIfEx",
    "NdrDcomAsyncClientCall",
    "NdrConformantVaryingArrayMarshall",
    "MesEncodeDynBufferHandleCreate",
    "NdrClientInitializeNew",
    "RpcBindingInqAuthClientA",
    "I_RpcGetDefaultSD",
    "RpcSsContextLockShared",
    "I_RpcBindingInqDynamicEndpointW",
    "RpcBindingCreateA",
    "CStdStubBuffer_QueryInterface",
    "NdrXmitOrRepAsMemorySize",
    "I_RpcBindingCopy",
    "NdrGetSimpleTypeBufferAlignment",
    "I_RpcConnectionSetSockBuffSize",
    "RpcServerUseAllProtseqsIf",
    "pfnMarshallRoutines",
    "RpcEpRegisterW",
    "NdrNonConformantStringUnmarshall",
    "RpcStringBindingParseA",
    "NdrInterfacePointerBufferSize",
    "NdrVaryingArrayUnmarshall",
    "RpcBindingSetAuthInfoExW",
    "I_RpcBindingInqLocalClientPID",
    "I_RpcSetDCOMAppId",
    "NdrByteCountPointerFree",
    "CStdStubBuffer_CountRefs",
    "float_array_from_ndr",
    "RpcEpRegisterNoReplaceA",
    "RpcServerYield",
    "I_RpcBindingToStaticStringBindingW",
    "I_RpcIfInqTransferSyntaxes",
    "RpcBindingFromStringBindingW",
    "I_RpcBCacheFree",
    "RpcMgmtEpEltInqNextW",
    "I_RpcTurnOnEEInfoPropagation",
    "NDRCContextUnmarshall",
    "NdrConformantVaryingStructUnmarshall",
    "NdrStubInitializeMarshall",
    "RpcIfInqId",
    "TowerExplode",
    "I_RpcNsBindingSetEntryName",
    "NdrConformantArrayUnmarshall",
    "UuidFromStringW",
    "NdrPartialIgnoreServerInitialize",
    "I_RpcAsyncAbortCall",
    "NdrInterfacePointerUnmarshall",
    "RpcRaiseException",
    "NdrMesTypeEncode2",
    "NdrNonEncapsulatedUnionMemorySize",
    "NdrSimpleStructUnmarshall",
    "I_RpcSend",
    "RpcServerInterfaceGroupDeactivate",
    "RpcServerRegisterIf",
    "RpcSsDontSerializeContext",
    "NdrSimpleStructFree",
    "NdrConformantArrayFree",
    "NdrServerInitializePartial",
    "NdrTypeSize",
    "NdrNonEncapsulatedUnionFree",
    "NdrSimpleStructMarshall",
    "NdrFixedArrayFree",
    "RpcServerRegisterIf3",
    "NdrCStdStubBuffer2_Release",
    "short_from_ndr",
    "NdrComplexStructFree",
    "RpcBindingCopy",
    "DceErrorInqTextW",
    "pfnUnmarshallRoutines",
    "RpcServerTestCancel",
    "RpcServerInqIf",
    "RpcSmGetThreadHandle",
    "NdrpCreateProxy",
    "RpcBindingInqAuthInfoExA",
    "RpcServerInqDefaultPrincNameW",
    "RpcAsyncCancelCall",
    "CreateProxyFromTypeInfo",
    "I_RpcBindingIsServerLocal",
    "NdrNsSendReceive",
    "NdrProxyInitialize",
    "I_RpcBindingHandleToAsyncHandle",
    "NdrServerContextMarshall",
    "NdrSimpleStructBufferSize",
    "NdrClientInitialize",
    "NdrSimpleTypeUnmarshall",
    "MesDecodeBufferHandleCreate",
    "tree_size_ndr",
    "DllGetClassObject",
    "I_RpcBindingIsClientLocal",
    "NdrConformantVaryingArrayFree",
    "CStdStubBuffer_AddRef",
    "RpcServerUnsubscribeForNotification",
    "I_RpcServerStartService",
    "RpcCancelThread",
    "NdrServerContextNewUnmarshall",
    "long_from_ndr_temp",
    "NdrpMemoryIncrement",
    "NdrAsyncServerCall",
    "UuidCreateNil",
    "NdrOleAllocate",
    "SimpleTypeBufferSize",
    "RpcServerListen",
    "I_RpcServerUseProtseq2W",
    "NDRSContextUnmarshall2",
    "NdrPointerFree",
    "I_RpcAsyncSetHandle",
    "NdrStubInitialize",
    "RpcBindingInqAuthClientW",
    "I_RpcServerCheckClientRestriction",
    "NDRcopy",
    "NdrPartialIgnoreClientMarshall",
    "NdrMesSimpleTypeDecode",
    "I_RpcClearMutex",
    "RpcServerUseProtseqW",
    "RpcBindingReset",
    "RpcSmSwapClientAllocFree",
    "NdrConformantVaryingArrayBufferSize",
    "I_RpcVerifierCorruptionExpected",
    "NdrMesSimpleTypeEncode",
    "NdrRpcSsDefaultAllocate",
    "RpcErrorLoadErrorInfo",
    "NdrServerCall2",
    "UuidCompare",
    "RpcMgmtInqComTimeout",
    "RpcFreeAuthorizationContext",
    "RpcMgmtInqIfIds",
    "I_RpcExceptionFilter",
    "UuidCreate",
    "NdrUserMarshalUnmarshall",
    "RpcNetworkIsProtseqValidA",
    "RpcBindingFromStringBindingA",
    "NdrDllUnregisterProxy",
    "RpcServerUseProtseqIfA",
    "RpcNetworkInqProtseqsA",
    "RpcEpUnregister",
    "NdrMesProcEncodeDecode",
    "short_from_ndr_temp",
    "I_RpcTransConnectionFreePacket",
    "RpcServerSubscribeForNotification",
    "NdrMesTypeAlignSize2",
    "RpcServerUseAllProtseqs",
    "NdrPartialIgnoreClientBufferSize",
    "I_RpcPauseExecution",
    "I_RpcTransGetThreadEvent",
    "NdrpGetTypeFormatString",
    "RpcMgmtEnableIdleCleanup",
    "I_RpcBindingInqWireIdForSnego",
    "NdrMesProcEncodeDecode2",
    "I_RpcSendReceive",
    "I_RpcRequestMutex",
    "RpcMgmtEpUnregister",
    "RpcMgmtIsServerListening",
    "NdrEncapsulatedUnionMemorySize",
    "I_RpcServerAllocateIpPort",
    "I_RpcTransConnectionAllocatePacket",
    "RpcBindingInqAuthInfoA",
    "NDRSContextMarshall",
    "I_RpcServerTurnOnOffKeepalives",
    "NdrNsGetBuffer",
    "NdrRpcSmClientFree",
    "I_RpcFilterDCOMActivation",
    "NdrInterfacePointerMemorySize",
    "NdrConformantVaryingStructFree",
    "I_RpcEnableWmiTrace",
    "I_RpcSessionStrictContextHandle",
    "NdrClientContextMarshall",
    "NdrUserMarshalFree",
    "I_RpcMapWin32Status",
    "I_RpcInitFwImports",
    "I_RpcNsBindingSetEntryNameA",
    "NdrConformantStructBufferSize",
    "NdrXmitOrRepAsMarshall",
    "NdrEncapsulatedUnionFree",
    "NdrSendReceive",
    "RpcServerInqBindings",
    "NdrUnmarshallBasetypeInline",
    "NdrGetDcomProtocolVersion",
    "RpcEpResolveBinding",
    "RpcGetAuthorizationContextForClient",
    "CStdStubBuffer_Invoke",
    "RpcServerUnregisterIf",
    "NdrClientContextUnmarshall",
    "NdrRpcSsDisableAllocate",
    "MesEncodeFixedBufferHandleCreate",
    "RpcErrorEndEnumeration",
    "RpcServerUseProtseqEpA",
    "RpcMgmtSetCancelTimeout",
    "long_from_ndr",
    "RpcStringFreeW",
    "NdrComplexArrayUnmarshall",
    "double_from_ndr",
    "NdrRangeUnmarshall",
    "RpcBindingServerFromClient",
    "NdrConformantStructUnmarshall",
    "I_RpcInitNdrImports",
    "I_RpcSsDontSerializeContext"
  ],
  "rpcss.dll": [
    "WhichService",
    "CoGetComCatalog",
    "GetRPCSSInfo",
    "ServiceMain"
  ],
  "rsaenh.dll": [
    "CPImportKey",
    "CPGenRandom",
    "CPSetKeyParam",
    "CPGetHashParam",
    "CPDestroyHash",
    "CPDuplicateKey",
    "CPSignHash",
    "CPCreateHash",
    "DllRegisterServer",
    "CPReleaseContext",
    "CPDuplicateHash",
    "CPGetProvParam",
    "DllUnregisterServer",
    "CPSetHashParam",
    "CPExportKey",
    "CPSetProvParam",
    "CPGetKeyParam",
    "CPHashSessionKey",
    "CPDeriveKey",
    "CPAcquireContext",
    "CPDestroyKey",
    "CPVerifySignature",
    "CPGetUserKey",
    "CPGenKey",
    "CPEncrypt",
    "CPDecrypt",
    "CPHashData"
  ],
  "rshx32.dll": [
    "_EditFSSecurity@32",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "rtffilt.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "rtm.dll": [
    "RtmReleaseChangedDests",
    "RtmBlockConvertRoutesToStatic",
    "RtmCreateRouteEnum",
    "RtmGetRouteInfo",
    "RtmLookupIPDestination",
    "CheckTable",
    "MgmGetMfeStats",
    "RtmMarkDestForChangeNotification",
    "RtmConvertIpv6AddressAndLengthToNetAddress",
    "RtmReleaseEntityInfo",
    "RtmGetDestInfo",
    "RtmAddRouteToDest",
    "RtmCreateEnumerationHandle",
    "RtmGetNextHopInfo",
    "RtmCreateRouteList",
    "RtmRegisterClient",
    "MgmDeleteGroupMembershipEntry",
    "RtmGetExactMatchRoute",
    "MgmGroupEnumerationGetNext",
    "RtmGetEnumDests",
    "RtmUpdateAndUnlockRoute",
    "RtmDereferenceHandles",
    "DeleteFromTable",
    "MgmInitialize",
    "RtmDeregisterEntity",
    "MgmDeRegisterMProtocol",
    "RtmGetMostSpecificDestination",
    "RtmReleaseNextHopInfo",
    "DestroyTable",
    "MgmTakeInterfaceOwnership",
    "RtmCreateNextHopEnum",
    "MgmGetFirstMfeStats",
    "RtmReleaseNextHops",
    "RtmGetOpaqueInformationPointer",
    "RtmAddRoute",
    "RtmBlockSetRouteEnable",
    "RtmGetExactMatchDestination",
    "RtmInvokeMethod",
    "RtmConvertNetAddressToIpv6AddressAndLength",
    "MgmAddGroupMembershipEntry",
    "RtmGetEntityInfo",
    "RtmGetNextRoute",
    "MgmGetFirstMfe",
    "DumpTable",
    "InsertIntoTable",
    "RtmReleaseEntities",
    "RtmRegisterForChangeNotification",
    "RtmDeleteRouteList",
    "RtmGetFirstRoute",
    "RtmGetRegisteredEntities",
    "RtmDeleteRouteTable",
    "RtmLockRoute",
    "RtmWriteInstanceConfig",
    "RtmGetAddressFamilyInfo",
    "RtmGetInstances",
    "RtmAddNextHop",
    "RtmReleaseDestInfo",
    "MgmRegisterMProtocol",
    "RtmReadInstanceConfig",
    "RtmLockNextHop",
    "RtmDeleteRouteToDest",
    "MgmGetProtocolOnInterface",
    "RtmReleaseRoutes",
    "RtmGetEnumRoutes",
    "RtmGetLessSpecificDestination",
    "RtmReferenceHandles",
    "RtmWriteAddressFamilyConfig",
    "RtmDeregisterClient",
    "MgmGroupEnumerationStart",
    "RtmGetEnumNextHops",
    "MgmReleaseInterfaceOwnership",
    "RtmGetListEnumRoutes",
    "MgmGetMfe",
    "RtmGetRouteAge",
    "RtmDequeueRouteChangeMessage",
    "MgmGetNextMfeStats",
    "EnumOverTable",
    "MgmGroupEnumerationEnd",
    "RtmGetChangedDests",
    "RtmFindNextHop",
    "RtmIsBestRoute",
    "RtmDeleteEnumHandle",
    "RtmLockDestination",
    "BestMatchInTable",
    "SearchInTable",
    "RtmGetEntityMethods",
    "RtmGetChangeStatus",
    "RtmDeregisterFromChangeNotification",
    "RtmHoldDestination",
    "RtmCloseEnumerationHandle",
    "RtmGetInstanceInfo",
    "MgmGetNextMfe",
    "RtmRegisterEntity",
    "RtmCreateDestEnum",
    "NextMatchInTable",
    "RtmReleaseRouteInfo",
    "RtmDeleteNextHop",
    "RtmDeleteRoute",
    "RtmGetRoutePointer",
    "RtmInsertInRouteList",
    "RtmGetNextHopPointer",
    "RtmIsRoute",
    "RtmReleaseDests",
    "RtmEnumerateGetNextRoute",
    "RtmIsMarkedForChangeNotification",
    "RtmBlockDeleteRoutes",
    "RtmGetNetworkCount",
    "RtmCreateRouteListEnum",
    "RtmIgnoreChangedDests",
    "RtmBlockMethods",
    "MgmDeInitialize",
    "RtmReadAddressFamilyConfig",
    "CreateTable"
  ],
  "rtutils.dll": [
    "RouterLogDeregisterW",
    "TracePrintfW",
    "TraceDeregisterExW",
    "RouterLogEventValistExW",
    "RouterLogRegisterA",
    "RouterGetErrorStringA",
    "LogErrorA",
    "MprSetupProtocolEnum",
    "RouterLogEventExA",
    "TraceVprintfExW",
    "RouterLogEventW",
    "TracePutsExA",
    "TraceDeregisterA",
    "MprSetupProtocolFree",
    "LogErrorW",
    "TraceDeregisterW",
    "TraceGetConsoleW",
    "RouterGetErrorStringW",
    "RouterLogEventStringA",
    "RouterLogEventStringW",
    "TracePutsExW",
    "TraceRegisterExA",
    "RouterLogEventDataW",
    "RouterLogEventValistExA",
    "TracePrintfExA",
    "LogEventA",
    "RouterLogEventA",
    "RouterLogEventDataA",
    "TraceVprintfExA",
    "RouterLogEventExW",
    "TracePrintfA",
    "RouterLogDeregisterA",
    "RouterAssert",
    "TraceRegisterExW",
    "RouterLogRegisterW",
    "TraceDumpExA",
    "TracePrintfExW",
    "TraceDumpExW",
    "TraceGetConsoleA",
    "TraceDeregisterExA",
    "LogEventW"
  ],
  "SCardDlg.dll": [
    "SCardUIDlgSelectCardA",
    "SCardUIDlgSelectCardW",
    "SCardDlgExtendedError",
    "GetOpenCardNameW",
    "GetOpenCardNameA"
  ],
  "SCardSvr.dll": [
    "CalaisMain",
    "SvchostPushServiceGlobals"
  ],
  "SHCore.dll": [
    "DllGetActivationFactory",
    "SHQueryInfoKeyW",
    "SHSetThreadRef",
    "IUnknown_QueryService",
    "RevokeScaleChangeNotifications",
    "SHCreateStreamOnFileW",
    "SHDeleteValueW",
    "SHCopyKeyA",
    "SetCurrentProcessExplicitAppUserModelID",
    "IStream_Reset",
    "SHDeleteKeyA",
    "SHRegGetPathA",
    "SHOpenRegStream2A",
    "SHDeleteValueA",
    "IsOS",
    "SHOpenRegStream2W",
    "SHQueryValueExW",
    "GetScaleFactorForDevice",
    "SHCreateThreadWithHandle",
    "SHCreateThread",
    "SHGetValueW",
    "SHEnumKeyExA",
    "SHRegSetPathW",
    "SHGetThreadRef",
    "SHReleaseThreadRef",
    "CommandLineToArgvW",
    "IUnknown_Set",
    "SHSetValueA",
    "SHUnicodeToUnicode",
    "SHCopyKeyW",
    "SHAnsiToAnsi",
    "SHRegGetValueA",
    "SHCreateStreamOnFileEx",
    "RegisterScaleChangeNotifications",
    "SHStrDupA",
    "SHStrDupW",
    "DllCanUnloadNow",
    "IStream_ReadStr",
    "SHEnumKeyExW",
    "SHCreateStreamOnFileA",
    "SHSetValueW",
    "GetProcessReference",
    "IUnknown_SetSite",
    "SHGetValueA",
    "SHRegGetIntW",
    "SHDeleteEmptyKeyA",
    "SHOpenRegStreamA",
    "SHQueryInfoKeyA",
    "IStream_Size",
    "SHRegDuplicateHKey",
    "SHRegSetPathA",
    "SHEnumValueA",
    "IUnknown_GetSite",
    "IStream_Write",
    "IStream_Read",
    "SHAnsiToUnicode",
    "SHQueryValueExA",
    "DllGetClassObject",
    "CreateRandomAccessStreamOnFile",
    "SHDeleteEmptyKeyW",
    "SHEnumValueW",
    "IUnknown_AtomicRelease",
    "CreateRandomAccessStreamOverStream",
    "SHCreateMemStream",
    "GetCurrentProcessExplicitAppUserModelID",
    "SHRegGetPathW",
    "SHRegGetValueW",
    "SHOpenRegStreamW",
    "SHDeleteKeyW",
    "SHUnicodeToAnsi",
    "SetProcessReference",
    "CreateStreamOverRandomAccessStream",
    "IStream_WriteStr",
    "SHCreateThreadRef",
    "IStream_Copy"
  ],
  "SMBHelperClass.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "SMSRouter.dll": [
    "SmsRouterNotify",
    "UnInitSmsRouter",
    "InitSmsRouter"
  ],
  "SNTSearch.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "SPInf.dll": [
    "SpInfFindValueInSectionList",
    "SpInfGetDirIdHandler",
    "SpInfGetInfInformation",
    "SpInfGetLineFieldCount",
    "SpInfGetLineTextWithKey",
    "SpInfQueryInfVersionInformation",
    "SpInfGetStringsSection",
    "SpInfGetNextInf",
    "SpInfSetDirIdHandler",
    "SpInfFileFullPathFromLineContext",
    "SpInfGetPathFromDirId",
    "SpInfGetStringField",
    "SpInfDetermineInfStyle",
    "SpInfQueryInfFileInformation",
    "SpInfDoesInfContainString",
    "SpInfUnlockInf",
    "SpInfSourcePathFromHandle",
    "SpInfGetIndirectString",
    "SpInfGetInfStyle",
    "SpInfGetBestModelsSection",
    "SpInfGetField",
    "SpInfFindNextMatchLine",
    "SpInfGetPrevInf",
    "SpInfLoadInfFile",
    "SpInfSectionNameFromLineContext",
    "SpInfIsIndirectString",
    "SpInfGetInfSections",
    "SpInfLineIsSearchable",
    "SpInfGetOriginalInfName",
    "SpInfFindFirstLine",
    "SpInfSetDirectoryId",
    "SpInfLineFromContext",
    "SpInfFreeInfFile",
    "SpInfGetTargetPath",
    "SpInfGetLineCount",
    "SpInfGetDriverVer",
    "SpInfVersionNodeFromInfInformation",
    "SpInfGetInfLineNumber",
    "SpInfGetVersionDatum",
    "SpInfEnumInfSections",
    "SpInfLocateSection",
    "SpInfGetBestInstallSection",
    "SpInfGetLanguageId",
    "SpInfGetLineCountFromSection",
    "SpInfGetVersionNode",
    "SpInfLockInf",
    "SpInfGetLineByIndex",
    "SpInfGetLogToken",
    "SpInfLocateLine"
  ],
  "SRH.dll": [
    "DllCanUnloadNow",
    "DllMain",
    "DllGetClassObject"
  ],
  "SSShim.dll": [
    "SssReleaseServicingStack",
    "SssBindServicingStack",
    "SssGetServicingStackFilePathLength",
    "SssGetServicingStackFilePath"
  ],
  "SearchFolder.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "Sens.dll": [
    "SensNotifyNetconEvent",
    "SvchostPushServiceGlobals",
    "ServiceMain",
    "SensNotifyRasEvent",
    "SensNotifyWinlogonEvent"
  ],
  "SensApi.dll": [
    "IsDestinationReachableA",
    "IsNetworkAlive",
    "IsDestinationReachableW"
  ],
  "SensorPerformanceEvents.dll": "No exports",
  "SensorsApi.dll": [
    "SensorPermissionsHandlerA",
    "SensorPermissionsHandlerW",
    "SensorPermissionsHandler",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "SensorsClassExtension.dll": [
    "Microsoft_WDF_UMDF_Version",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "SensorsCpl.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "SessEnv.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "SetNetworkLocation.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "SettingMonitor.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "SettingSync.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "SettingSyncInfo.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "SimAuth.dll": [
    "EapPeerFreeErrorMemory",
    "EapPeerGetInfo",
    "EapPeerFreeMemory"
  ],
  "SimCfg.dll": [
    "EapPeerInvokeIdentityUI",
    "InternalFunction01",
    "EapPeerGetConfigBlobAndUserBlob",
    "EapPeerConfigXml2Blob",
    "InternalFunction02",
    "EapPeerConfigBlob2Xml",
    "EapPeerCredentialsXml2Blob",
    "EapPeerFreeMemory",
    "EapPeerGetIdentityPageGuid",
    "EapPeerInvokeConfigUI",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "EapPeerInvokeInteractiveUI",
    "EapPeerFreeErrorMemory"
  ],
  "SmartCardSimulator.dll": [
    "Microsoft_WDF_UMDF_Version",
    "VGidsSimulatorCreate",
    "VGidsSimulatorDestroy",
    "VGidsSimulatorReadProperties",
    "VGidsSimulatorWriteProperties",
    "VTransportReceive",
    "VTransportDeinitialize",
    "VTransportOpen",
    "VTransportTransmit",
    "VTransportClose",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "VTransportInitialize",
    "DllUnregisterServer"
  ],
  "SmartcardCredentialProvider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "SmiEngine.dll": [
    "ConstructHiveLocation",
    "DeleteCompilerObject",
    "CreateWcmEngineCore",
    "ConstructRegLocation",
    "GetItemFromCoreObject",
    "GetCompilerObject",
    "CreateSettingsEnginePriv",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "SetLalCreator",
    "CreateLalInstance",
    "DllUnregisterServer"
  ],
  "SmsDeviceAccessRevocation.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "SndVolSSO.dll": [
    "DllCanUnloadNow",
    "DllMain",
    "DllGetClassObject"
  ],
  "SortServer2003Compat.dll": [
    "SortCloseHandle",
    "SortGetHandle"
  ],
  "SortWindows61.dll": [
    "SortCloseHandle",
    "SortGetHandle"
  ],
  "SortWindows6Compat.dll": [
    "SortCloseHandle",
    "SortGetHandle"
  ],
  "SpaceControl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "SrEvents.dll": "No exports",
  "SrpUxNativeSnapIn.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "Startupscan.dll": [
    "SusRunTask",
    "DllMain",
    "SusResetNotification",
    "SusRunOEMTask"
  ],
  "StorSvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "StorageContextHandler.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "Storprop.dll": [
    "DiskClassInstaller",
    "CdromKnownGoodDigitalPlayback",
    "DvdLauncher",
    "DiskPropPageProvider",
    "CdromDisableDigitalPlayback",
    "CdromEnableDigitalPlayback",
    "CdromSetDefaultDvdRegion",
    "CdromIsDigitalPlaybackEnabled",
    "DvdClassInstaller",
    "HdcCoInstaller",
    "AtaPropPageProvider",
    "DvdPropPageProvider"
  ],
  "StructuredQuery.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "SubscriptionMgr.dll": [
    "SubscriptionManagerNotify",
    "SubscriptionManagerSetParameter",
    "SubscriptionManagerQueryParameter",
    "SubscriptionManagerDeinit",
    "g_hMobileOperatorNotificationMutex",
    "SubscriptionManagerInit"
  ],
  "SyncCenter.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "SyncHostps.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "SyncInfrastructure.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "SyncInfrastructureps.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "Syncreg.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "SysFxUI.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "SystemEventsBrokerClient.dll": [
    "SebCreateSessionConnectedEvent",
    "SebCreateSessionStartEvent",
    "SebDeleteEvent",
    "SebCreateUserPresentEvent",
    "SebRegisterWellKnownEvent",
    "SebCreateLockScreenAppAddedEvent",
    "SebCreateLockScreenAppRemovedEvent",
    "SebSignalBackgroundDownloadEvent",
    "SebEnumerateEvents",
    "SebCreateDisplayOnEvent",
    "SebCreateNetOperatorHotSpotAuthEvent",
    "SebRegisterPrivateEvent",
    "SebSignalOEMPreInstallEvent",
    "SebCreateBackgroundDownloadEvent",
    "SebCreateOEMPreInstallEvent",
    "SebQueryEventData"
  ],
  "SystemEventsBrokerServer.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "samcli.dll": [
    "NetUserChangePassword",
    "NetGroupEnum",
    "NetGroupGetUsers",
    "NetUserAdd",
    "NetLocalGroupGetInfo",
    "NetLocalGroupAddMembers",
    "NetLocalGroupDelMember",
    "NetGroupAddUser",
    "NetLocalGroupGetMembers",
    "NetQueryDisplayInformation",
    "NetLocalGroupDelMembers",
    "NetUserEnum",
    "NetGroupSetInfo",
    "NetGroupSetUsers",
    "NetUserSetInfo",
    "NetLocalGroupAddMember",
    "NetGroupDel",
    "NetValidatePasswordPolicy",
    "NetUserModalsSet",
    "NetGetDisplayInformationIndex",
    "NetUserDel",
    "NetLocalGroupAdd",
    "NetLocalGroupSetMembers",
    "NetGroupDelUser",
    "NetUserModalsGet",
    "NetGroupGetInfo",
    "NetLocalGroupDel",
    "NetUserGetLocalGroups",
    "NetLocalGroupEnum",
    "NetLocalGroupSetInfo",
    "NetGroupAdd",
    "NetUserGetGroups",
    "NetValidatePasswordPolicyFree",
    "NetUserGetInfo",
    "NetUserSetGroups"
  ],
  "samlib.dll": [
    "SamEnumerateDomainsInSamServer",
    "SamiSetDSRMPassword",
    "SamRemoveMultipleMembersFromAlias",
    "SamGetGroupsForUser",
    "SamChangePasswordUser",
    "SamEnumerateUsersInDomain",
    "SamLookupNamesInDomain2",
    "SamAddMemberToGroup",
    "SamGetCompatibilityMode",
    "SamEnumerateGroupsInDomain",
    "SamLookupIdsInDomain",
    "SamEnumerateAliasesInDomain",
    "SamCloseHandle",
    "SamSetInformationDomain",
    "SamLookupDomainInSamServer",
    "SamValidatePassword",
    "SamSetInformationGroup",
    "SamGetMembersInGroup",
    "SamQueryInformationDomain",
    "SamEnumerateUsersInDomain2",
    "SamCreateAliasInDomain",
    "SamOpenUser",
    "SamGetAliasMembership",
    "SamCreateUser2InDomain",
    "SamFreeMemory",
    "SamCreateUserInDomain",
    "SamRemoveMemberFromAlias",
    "SamRemoveMemberFromGroup",
    "SamiChangePasswordUser2",
    "SamSetMemberAttributesOfGroup",
    "SamiChangeKeys",
    "SamPerformGenericOperation",
    "OnMachineUILanguageInit",
    "SamGetDisplayEnumerationIndex",
    "SamDeleteUser",
    "SamDeleteGroup",
    "SamiEncryptPasswords",
    "SamQueryLocalizableAccountsInDomain",
    "SamRemoveMemberFromForeignDomain",
    "SamSetInformationAlias",
    "SamQueryInformationGroup",
    "SamShutdownSamServer",
    "SamChangePasswordUser2",
    "SamUnregisterObjectChangeNotification",
    "SamQuerySecurityObject",
    "SamDeleteAlias",
    "SamTestPrivateFunctionsDomain",
    "SamiSyncDSRMPasswordFromAccount",
    "SamLookupNamesInDomain",
    "SamiSetBootKeyInformation",
    "SamCreateGroupInDomain",
    "SamAddMultipleMembersToAlias",
    "SamiLmChangePasswordUser",
    "SamAddMemberToAlias",
    "SamiChangePasswordUser",
    "SamOpenAlias",
    "SamConnect",
    "SamGetMembersInAlias",
    "SamOpenGroup",
    "SamQueryInformationUser",
    "SamiSetDSRMPasswordOWF",
    "SamTestPrivateFunctionsUser",
    "SamSetSecurityObject",
    "SamRidToSid",
    "SamRegisterObjectChangeNotification",
    "SamQueryDisplayInformation",
    "SamQueryInformationAlias",
    "SamConnectWithCreds",
    "SamSetInformationUser",
    "SamOpenDomain"
  ],
  "samsrv.dll": [
    "SampReplaceUserLogonHours",
    "SamrDeleteGroup",
    "SampReferenceContext",
    "SamINetLogonPing",
    "SampCreateContextEx",
    "SampGetDomainSidListForSam",
    "SampGetNT4UpgradeInProgress",
    "SamIScorePassword",
    "SampEncryptCredentialData",
    "SampDuplicateUnicodeString",
    "SamrSetInformationUser",
    "SampUpdateMixedModeAndFindDomain",
    "SamIQueryCapabilities",
    "SamIRevertNullSession",
    "SamIReplicateAccountData",
    "SamrAddMemberToGroup",
    "SamIFree_SAMPR_RETURNED_USTRING_ARRAY",
    "SampGetSidArrayAttribute",
    "SamIFreeRealmList",
    "SamILoopbackConnect",
    "SampQueryInformationUserInternal",
    "SamIFreeSidArray",
    "SamIGetUserLogonInformationEx",
    "SampGenerateRandomPassword",
    "SampReleaseWriteLock",
    "RtlDeleteElementGenericTable2",
    "SamIImpersonateNullSession",
    "SampGetDisableSingleObjectRepl",
    "SampIsAccountBuiltIn",
    "SampExamineSid",
    "SamrEnumerateUsersInDomain2",
    "SampAllocateNextCurrentRidFromIndex",
    "SampSetComputerObjectDsName",
    "SampAuditAccountNameChange",
    "SamrQueryInformationDomain",
    "SamIHandleObjectUpdate",
    "SamIFree_SAMPR_ULONG_ARRAY",
    "SamIQueryServerRole2",
    "SampGetExtendedAttribute",
    "SamrSetInformationGroup",
    "SampGetReverseMembershipTransitive",
    "SampSetAdminPassword",
    "SampExtendDefinedDomains",
    "SampIsServiceRunning",
    "SampGetSidAttribute",
    "SamIPromoteUndo",
    "SamIFreeSecurityAttributesInfo",
    "SampCommitBufferedWrites",
    "SampCreateAliasInDomain",
    "SampCreateUserInDomain",
    "SamIRemoveDSNameFromAlias",
    "SamrQuerySecurityObject",
    "SampUpdateComputedUserAccountControlBits",
    "SampGetDomainObjectFromIndex",
    "SamIGetResourceGroupMembershipsTransitive",
    "SampDsMakeAttrBlock",
    "SampGetHasNeverTime",
    "SampIsBuiltinDomain",
    "SampStoreObjectAttributes",
    "SampFreeOemGroupInfo",
    "SamrLookupIdsInDomain",
    "SampReplaceUserV1aFixed",
    "SampGetCurrentOwnerAndPrimaryGroup",
    "SampValidatePwdSettingAttempt",
    "SamrValidatePassword",
    "SampRetrieveMultipleCredentials",
    "SamrAddMemberToAlias",
    "SampChangeGroupAccountName",
    "SamIFreeDecodedClaimsSet",
    "SampGetUserAccountSettings",
    "SampIsDomainHosted",
    "SamIGetUserLogonInformation2",
    "SampAcquireSamLockExclusive",
    "SamIDemote",
    "SampAuditGroupTypeChange",
    "SamrCreateUser2InDomain",
    "SampGetUserAccountControlComputed",
    "SamISetMachinePassword",
    "SampRegObjToDsObj",
    "SampGetUlongArrayAttribute",
    "SampAuditAccountEnableDisableChange",
    "SampBuildSamProtection",
    "SampDsIsRunning",
    "SampGetObjectSD",
    "SampGetDomainSidFromIndex",
    "SamrOpenAlias",
    "SampFreeOemUserInfo",
    "SamIIsExtendedSidMode",
    "SamrDeleteAlias",
    "SampLogPrint",
    "SamISetPasswordInfoOnDc",
    "SampSetTransactionWithinDomain",
    "SampGetDomainContextFromIndex",
    "SamDsExtFree",
    "SampNetLogonNotificationRequired",
    "SamrEnumerateUsersInDomain",
    "SampImpersonateClient",
    "SampSetGlobalDsSids",
    "SampNotifyAuditChange",
    "SampGetLogLevel",
    "SampGetObjectTypeNameFromIndex",
    "SampAccountControlToFlags",
    "SampCreateFullSid",
    "SampCreateAccountContext2",
    "SampChangeUserAccountName",
    "SampSetAccessAttribute",
    "SamINT4UpgradeInProgress",
    "SamrOpenGroup",
    "SamIGetDefaultAdministratorName",
    "SampGetDisableRSOOnPDCForward",
    "SampStringFromGuid",
    "SampComputePasswordExpired",
    "SampSetDSRMPasswordWorker",
    "SamILookupNamesInDomain",
    "SampCompareDisplayStrings",
    "SampSetExtendedAttributeAccess",
    "SampChangeAliasAccountName",
    "SamIGetUserLogonInformation3",
    "SampDsInitializeSingleDomain",
    "SampDeleteDsDirsToDeleteKey",
    "SamIRetrieveMultiplePrimaryCredentials",
    "SampUpdateAccountDisabledFlag",
    "SamIPurgeSecrets",
    "SAM_MIDL_user_free",
    "SampReadExtendedAttributes",
    "RtlInitializeGenericTable2",
    "SampSetFixedAttributes",
    "SampAcquireReadLock",
    "SampGetNoGcLogonEnforceNTLMCheck",
    "SamrQueryDisplayInformation",
    "SampDsChangePasswordUser",
    "SampFreeMachineInfo",
    "SamIFreeOidList",
    "SampCurrentThreadOwnsLock",
    "SamIResetBadPwdCountOnPdc",
    "SamIDemoteUndo",
    "RtlInsertElementGenericTable2",
    "SampNeedUserAccountSettingsDuringQuery",
    "SampCalculateLmAndNtOwfPasswords",
    "SampDsSetBuiltinDomainPolicy",
    "RtlLookupElementGenericTable2",
    "SampDsUpdateContextAttributes",
    "SampRetrieveUserV1aFixed",
    "SampGetDownLevelDomainControllersPresent",
    "SamIIsDownlevelDcUpgrade",
    "SamIDoFSMORoleChange",
    "SamIChangePasswordForeignUser",
    "SamIUnLoadDownlevelDatabase",
    "SampAcquireWriteLock",
    "SamINotifyRoleChange",
    "SamIQueryServerRole",
    "SamIRetrievePrimaryCredentials",
    "SampUpdatePerformanceCounters",
    "SamIGetAliasMembership",
    "SampAddSameDomainMemberToGlobalOrUniversalGroup",
    "SamDsExtAlloc",
    "SampRenameKrbtgtAccount",
    "SamrCloseHandle",
    "SamIDecodeClaimsBlob",
    "SampSetPasswordInfoOnPdcByIndex",
    "SamIIsRebootAfterPromotion",
    "SampUpgradeUserParmsActual",
    "SamrDeleteUser",
    "SampDeReferenceContext",
    "SamILookupNamesBySid",
    "SamIFreeLookupSidsInfo",
    "SampReleaseReadLock",
    "SamIMixedDomain2",
    "SampDuplicateGroupInfo",
    "SampDuplicateOemGroupInfo",
    "SampGetWillNeverTime",
    "SampAddNonLocalDomainRelativeMemberships",
    "SampAuditAnyEvent",
    "SampConvertUiListToApiList",
    "SampGetDisableResetBadPwdCountForward",
    "SamrOpenDomain",
    "SampIsSetupInProgress",
    "SampBuildDsNameFromSid",
    "SampGetUnicodeStringAttribute",
    "SamIConnect",
    "SampGetNewAccountSecurityNt4",
    "SamIDecodeClaimsBlobIntoClaimsSet",
    "SampRemoveUserFromGroup",
    "SampInvalidateDomainCache",
    "SampRemoveAccountFromGroupMembers",
    "SamITransformClaims",
    "SampSetTransactionDomain",
    "SampWriteGroupType",
    "SampIncreaseBadPwdCountLoopback",
    "SampPasswordChangeNotify",
    "SampGetAccountDomainInfo",
    "SampGetSamSubsystemName",
    "SamIFree_SAMPR_DISPLAY_INFO_BUFFER",
    "SampCheckSidType",
    "SampFlagsToAccountControl",
    "SamIFreeLookupNamesInfo",
    "SamIFreeVoid",
    "SampRemoveSameDomainMemberFromGlobalOrUniversalGroup",
    "SampDsGetPrimaryDomainStart",
    "SamIFree_SAMPR_GET_GROUPS_BUFFER",
    "SamIValidateAccountName",
    "SampGetNoGcLogonEnforceKerberosIpCheck",
    "SamIFree_UserInternal6Information",
    "SampValidateDomainControllerCreation",
    "SamrGetAliasMembership",
    "SampGetDomainSidFromAccountContext",
    "SamrGetGroupsForUser",
    "SamrLookupNamesInDomain2",
    "SamIValidateNewAccountName",
    "SampNotifyReplicatedInChange",
    "SamISetPasswordForeignUser2",
    "SampGetPasswordMustChangeWithUF_UAC",
    "SampAssignPrimaryGroup",
    "SampGetAccessAttribute",
    "SamIMixedDomain",
    "SampTraceEvent",
    "SampCreateGroupInDomain",
    "SampGetDisableOutboundRSO",
    "SampSetUserAccountControl",
    "SampIncrementNetlogonChangeLogSerialNumber",
    "SampFreeUnicodeString",
    "SampReleaseSamLockExclusive",
    "SamrQueryInformationUser",
    "SampSetUnicodeStringAttribute",
    "SamICreateKrbTgt",
    "SampCheckForAccountLockout",
    "SampPasswordChangeNotifyWorker",
    "SampRevertToSelf",
    "SampValidateDomainCacheCallback",
    "SamIConvertSecurityAttributesToClaimsBlob",
    "SampUsingDsData",
    "SampQueryCapabilities",
    "SampSetPassword",
    "SamICopyCurrentDomainAccountSettings",
    "SamIPromote",
    "SampRetrieveUserPasswords",
    "SampDuplicateUserInfo",
    "SampDecryptCredentialData",
    "SamIFreeSidAndAttributesList",
    "SamIClaimIsValid",
    "SampPositionOfHighestBit",
    "SamIFree_SAMPR_DOMAIN_INFO_BUFFER",
    "SamIQueryAccountSecretsCachability",
    "SampGetServerObjectName",
    "SampGetSuccessAccountAuditingEnabled",
    "SampDsSetDomainPolicy",
    "SamIUpdateLogonStatistics",
    "SamISetAuditingInformation",
    "SampIncrementActiveThreads",
    "SampRtlWellKnownPrivilegeCheck",
    "SamrQueryInformationUser2",
    "SampGetNextUnmodifiedRidFromIndex",
    "SampWriteEventLog",
    "SamIGetUserLogonInformation",
    "SamISetPasswordForeignUser3",
    "SampAlInvalidateAliasInformation",
    "SampAuditSidHistory",
    "SamrCreateUserInDomain",
    "SampGetDomainServerRoleFromIndex",
    "SampGetDomainObjectFromAccountContext",
    "SampAddDeltaTime",
    "SampDsConvertReadAttrBlock",
    "SamIFreeClaimsBlob",
    "SamIAddDSNameToAlias",
    "SamILoadDownlevelDatabase",
    "SamrRemoveMemberFromAlias",
    "SampApplyDomainUpdatesForAllDomains",
    "SamrSetInformationAlias",
    "SampDeleteKeyForPostBootPromote",
    "SampGetIgnoreGCFailures",
    "SampFreeGroupInfo",
    "SamIUPNFromUserHandle",
    "SampAddAccountsAndApplyMemberships",
    "SampCheckGroupTypeBits",
    "SampIsAuditingEnabled",
    "SampDeltaChangeNotify",
    "SampLookupContext",
    "SampRetrieveGroupV1Fixed",
    "SampDeleteContext",
    "SampAddUserToGroup",
    "SampGetDomainUpgradeTasks",
    "SampSetSerialNumberDomain2",
    "SampDsSetPasswordUser",
    "SampAddAccountToGroupMembers",
    "SampMarkPerAttributeInvalidFromWhichFields",
    "SampGetExternalNameFromIndex",
    "SampGetDnsDomainNameFromIndex",
    "SampValidateRegAttributes",
    "SampConnect",
    "SampRecordSystemSchemaVerisonInRegistry",
    "SamIAccountRestrictions",
    "SampDecrementActiveThreads",
    "SamrOpenUser",
    "SampFreeUserInfo",
    "SamrRemoveMemberFromGroup",
    "SamILookupSidsByName",
    "SampDuplicateMachineInfo",
    "SampSplitSid",
    "SamIOpenUserByAlternateId",
    "SamIInitialize",
    "SamIQueryRealmList",
    "SamIStorePrimaryCredentials",
    "SamrSetSecurityObject",
    "SamIIsSetupInProgress",
    "SampSetPasswordInfoOnPdcByHandle",
    "SAM_MIDL_user_allocate",
    "SampDuplicateOemUserInfo",
    "SamIUninitialize",
    "SampGetBehaviorVersion",
    "SamIFree_SAMPR_USER_INFO_BUFFER",
    "SampSetAttributeAccess",
    "SampGetSerialNumberDomain2",
    "SamrRidToSid",
    "SamIReplaceDownlevelDatabase",
    "SamrLookupNamesInDomain",
    "SampCreateDefaultUPN",
    "SampGetFixedAttributes",
    "SamIGetConfigurationOidList",
    "SamIFree_SAMPR_ENUMERATION_BUFFER"
  ],
  "sas.dll": [
    "SendSAS"
  ],
  "sbe.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "sbeio.dll": [
    "DVRCreateDVRFileSink",
    "DVRCreateDVRFileSource"
  ],
  "sberes.dll": "No exports",
  "scansetting.dll": [
    "ProfilesDialog",
    "GetDefaultProfileScan",
    "ProgDlgTakeFgIfShowing",
    "DllMain",
    "DllCanUnloadNow",
    "GetImageDialog"
  ],
  "scavengeui.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "sccls.dll": [
    "ScClassInstaller"
  ],
  "scecli.dll": [
    "SceEnumerateServices",
    "SceGetTimeStamp",
    "SceSetupBackupSecurity",
    "SceFreeProfileMemory",
    "SceStartTransaction",
    "DeltaNotify",
    "SceUpdateSecurityProfile",
    "SceDcPromoteSecurity",
    "SceSetupGenerateTemplate",
    "SceCommitTransaction",
    "SceGetObjectChildren",
    "SceNotifyPolicyDelta",
    "SceSetupUpdateSecurityFile",
    "SceSvcUpdateInfo",
    "SceGetScpProfileDescription",
    "SceSetupConfigureServices",
    "SceFreeMemory",
    "ConvertSecurityDescriptorToText",
    "DllRegisterServer",
    "SceRollbackTransaction",
    "SceOpenProfile",
    "SceCopyBaseProfile",
    "SceAnalyzeSystem",
    "SceCreateDirectory",
    "SceAppendSecurityProfileInfo",
    "DllUnregisterServer",
    "SceIsSystemDatabase",
    "SceSvcGetInformationTemplate",
    "SceCloseProfile",
    "SceGetDatabaseSetting",
    "SceGetDbTime",
    "SceSetupUnwindSecurityFile",
    "SceSetupUpdateSecurityKey",
    "SceDcPromoCreateGPOsInSysvolEx",
    "SceOpenPolicy",
    "SceEnforceSecurityPolicyPropagation",
    "SceSysPrep",
    "SceGenerateRollback",
    "SceSetDatabaseSetting",
    "SceGetServerProductType",
    "SceSetupMoveSecurityFile",
    "SceSvcQueryInfo",
    "SceCompareNameList",
    "SceAddToNameList",
    "SceSvcConvertTextToSD",
    "SceDcPromoCreateGPOsInSysvol",
    "SceBrowseDatabaseTable",
    "SceConfigureConvertedFileSecurity",
    "SceGetAreas",
    "SceWriteSecurityProfileInfo",
    "SceGetAnalysisAreaSummary",
    "SceCompareSecurityDescriptors",
    "SceLookupPrivRightName",
    "SceAddToObjectList",
    "SceSvcFree",
    "SceGetSecurityProfileInfo",
    "InitializeChangeNotify",
    "SceRegisterRegValues",
    "SceSetupSystemByInfName",
    "SceAddToNameStatusList",
    "SceDcPromoteSecurityEx",
    "SceSvcConvertSDToText",
    "SceGenerateGroupPolicy",
    "SceGetObjectSecurity",
    "SceSetupUpdateSecurityService",
    "SceConfigureSystem",
    "SceSvcSetInformationTemplate",
    "SceUpdateObjectInfo",
    "SceSvcSetInfo",
    "SceProcessSecurityPolicyGPOEx",
    "SceSetupRootSecurity",
    "SceProcessSecurityPolicyGPO"
  ],
  "scesrv.dll": [
    "ScesrvInitializeServer",
    "ScesrvTerminateServer"
  ],
  "scext.dll": [
    "ScExtInitialize"
  ],
  "schannel.dll": [
    "AcquireCredentialsHandleA",
    "UnsealMessage",
    "InitSecurityInterfaceW",
    "SslEmptyCacheW",
    "AcceptSecurityContext",
    "RevertSecurityContext",
    "FreeCredentialsHandle",
    "VerifySignature",
    "QuerySecurityPackageInfoW",
    "SslCrackCertificate",
    "QuerySecurityPackageInfoA",
    "QueryContextAttributesW",
    "SslGetServerIdentity",
    "SslFreeCertificate",
    "SslEmptyCacheA",
    "QueryContextAttributesA",
    "SpLsaModeInitialize",
    "DeleteSecurityContext",
    "SslGetMaximumKeySize",
    "AcquireCredentialsHandleW",
    "MakeSignature",
    "FreeContextBuffer",
    "SslLoadCertificate",
    "InitSecurityInterfaceA",
    "EnumerateSecurityPackagesA",
    "SslFreeCustomBuffer",
    "InitializeSecurityContextA",
    "SealMessage",
    "SslGenerateRandomBits",
    "CompleteAuthToken",
    "EnumerateSecurityPackagesW",
    "ApplyControlToken",
    "SpUserModeInitialize",
    "ImpersonateSecurityContext",
    "InitializeSecurityContextW"
  ],
  "schedcli.dll": [
    "NetScheduleJobAdd",
    "NetScheduleJobDel",
    "NetScheduleJobEnum",
    "NetScheduleJobGetInfo"
  ],
  "schedsvc.dll": [
    "ServiceMain"
  ],
  "scksp.dll": [
    "GetKeyStorageInterface",
    "DllMain"
  ],
  "scripto.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "scrobj.dll": [
    "GenerateTypeLib",
    "DllRegisterServerEx",
    "DllRegisterServerExW",
    "DllUnregisterServerEx",
    "DllRegisterServerExA",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllRegisterServer",
    "GenerateTypeLibW",
    "DllUnregisterServer"
  ],
  "scrptadm.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "CreateParserObject"
  ],
  "scrrun.dll": [
    "DLLGetDocumentation",
    "DllRegisterServer",
    "DoOpenPipeStream",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "sdcpl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "sdengin2.dll": [
    "ExecuteScheduledBackup",
    "DllGetClassObject",
    "DllCanUnloadNow",
    "SdCheck",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "sdhcinst.dll": [
    "SdClassCoInstaller",
    "SdClassInstall"
  ],
  "sdiageng.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "sdiagprv.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "sdiagschd.dll": [
    "DllCanUnloadNow",
    "EnableScheduledDiagnostics",
    "DllGetClassObject",
    "GetScheduledDiagnosticsExecutionLevel"
  ],
  "sdohlp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "sdrsvc.dll": [
    "ServiceMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "sdshext.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "sechost.dll": [
    "I_ScSendPnPMessage",
    "ChangeServiceConfigW",
    "EnumServicesStatusExW",
    "ChangeServiceConfigA",
    "QueryServiceConfigW",
    "LsaLookupSids",
    "CredGetSessionTypes",
    "LsaLookupGetDomainInfo",
    "StartServiceA",
    "CredDeleteA",
    "DeleteService",
    "CredFindBestCredentialW",
    "EnumerateIdentityProviders",
    "AuditSetSystemPolicy",
    "I_ScRegisterDeviceNotification",
    "LocalGetConditionForString",
    "LsaICLookupSidsWithCreds",
    "LsaICLookupSids",
    "LsaICLookupNames",
    "I_ScRpcBindW",
    "SetServiceStatus",
    "I_ScPnPGetServiceName",
    "LsaICLookupNamesWithCreds",
    "LookupAccountSidLocalA",
    "LsaLookupOpenLocalPolicy",
    "I_ScSetServiceBitsA",
    "CredGetTargetInfoA",
    "LsaCreateSecret",
    "StartServiceCtrlDispatcherW",
    "ConvertStringSecurityDescriptorToSecurityDescriptorW",
    "LsaRetrievePrivateData",
    "LsaLookupTranslateSids",
    "CredUnprotectW",
    "I_ScRpcBindA",
    "AuditComputeEffectivePolicyBySid",
    "CredWriteDomainCredentialsA",
    "CredEnumerateA",
    "I_ScUnregisterDeviceNotification",
    "CreateServiceW",
    "EnumDependentServicesW",
    "ControlService",
    "CredReadW",
    "LsaFreeMemory",
    "CredWriteDomainCredentialsW",
    "CredProtectW",
    "CredParseUserNameWithType",
    "CredFindBestCredentialA",
    "NotifyServiceStatusChangeA",
    "StartServiceCtrlDispatcherA",
    "GetIdentityProviderInfoByGUID",
    "I_ScValidatePnPService",
    "ReleaseIdentityProviderEnumContext",
    "CredReadByTokenHandle",
    "CredProfileLoadedEx",
    "LsaLookupNames2",
    "LsaStorePrivateData",
    "RegisterServiceCtrlHandlerW",
    "CloseServiceHandle",
    "CredRestoreCredentials",
    "CredEncryptAndMarshalBinaryBlob",
    "ChangeServiceConfig2W",
    "CredpEncodeCredential",
    "CredpConvertOneCredentialSize",
    "I_QueryTagInformation",
    "LocalGetStringForCondition",
    "I_ScBroadcastServiceControlMessage",
    "QueryServiceStatusEx",
    "QueryServiceDynamicInformation",
    "I_ScSetServiceBitsW",
    "RegisterServiceCtrlHandlerA",
    "CredProtectA",
    "CredpConvertCredential",
    "LsaLookupFreeMemory",
    "I_ScIsSecurityProcess",
    "CredpEncodeSecret",
    "AuditQuerySystemPolicy",
    "LsaQuerySecret",
    "CredMarshalCredentialW",
    "ControlServiceExA",
    "WaitServiceState",
    "QueryServiceObjectSecurity",
    "CredIsProtectedW",
    "CredBackupCredentials",
    "CredReadA",
    "OpenSCManagerA",
    "SetServiceObjectSecurity",
    "CredpConvertTargetInfo",
    "ConvertStringSidToSidW",
    "CredReadDomainCredentialsA",
    "CredReadDomainCredentialsW",
    "ConvertSidToStringSidW",
    "StartServiceW",
    "CredMarshalCredentialA",
    "LsaEnumerateAccountRights",
    "LsaLookupClose",
    "LsaSetSecret",
    "CreateServiceA",
    "LsaAddAccountRights",
    "OpenServiceA",
    "NotifyServiceStatusChange",
    "CredFree",
    "LookupAccountNameLocalA",
    "CredIsMarshaledCredentialW",
    "CredpDecodeCredential",
    "LsaEnumerateAccountsWithUserRight",
    "LsaClose",
    "I_ScQueryServiceConfig",
    "LsaQueryInformationPolicy",
    "CredUnmarshalCredentialA",
    "LsaRemoveAccountRights",
    "CredEnumerateW",
    "LsaLookupManageSidNameMapping",
    "QueryServiceConfigA",
    "RegisterServiceCtrlHandlerExW",
    "CredGetTargetInfoW",
    "OpenServiceW",
    "ChangeServiceConfig2A",
    "QueryServiceConfig2A",
    "GetIdentityProviderInfoByName",
    "QueryServiceStatus",
    "LookupAccountSidLocalW",
    "UnsubscribeServiceChangeNotifications",
    "CredWriteA",
    "LsaLookupTranslateNames",
    "ConvertSecurityDescriptorToStringSecurityDescriptorW",
    "NotifyServiceStatusChangeW",
    "LookupAccountNameLocalW",
    "LsaOpenPolicy",
    "RegisterServiceCtrlHandlerExA",
    "LsaOpenSecret",
    "CredUnmarshalCredentialW",
    "CredWriteW",
    "OpenSCManagerW",
    "GetDefaultIdentityProvider",
    "CredProfileLoaded",
    "SubscribeServiceChangeNotifications",
    "CredProfileUnloaded",
    "I_ScSendTSMessage",
    "QueryServiceConfig2W",
    "LocalGetReferencedTokenTypesForCondition",
    "CredDeleteW",
    "LsaLookupSids2",
    "CredIsProtectedA",
    "CredUnprotectA",
    "LsaSetInformationPolicy",
    "AuditFree",
    "ControlServiceExW"
  ],
  "seclogon.dll": [
    "SvcEntry_Seclogon",
    "SvchostPushServiceGlobals"
  ],
  "secproc.dll": [
    "SPGetLicenseAttribute",
    "SPEncryptUpdate",
    "SPCreateEncryptor",
    "SPAttest",
    "SPGetInfo",
    "SPEncryptFinal",
    "SPSign",
    "SPBindLicense",
    "SPGetBoundRightKey",
    "SPCloseHandle",
    "SPEncrypt",
    "SPCreateEnablingPrincipal",
    "SPGetLicenseObject",
    "SPRegisterRevocationList",
    "SPDecrypt",
    "SPGetCurrentTime",
    "SPGetProcAddress",
    "SPIsActivated",
    "SPCommit",
    "SPEnableAndEncrypt",
    "SPEnablePublishingLicense",
    "SPCreateSecurityProcessor",
    "SPCheckEnvironmentSecurity",
    "SPCreatePCE",
    "SPDecryptUpdate",
    "SPGetLicenseAttributeCount",
    "SPLoadLibrary",
    "SPGetLicenseObjectCount",
    "SPCreateDecryptor",
    "SPDecryptFinal"
  ],
  "secproc_isv.dll": [
    "SPGetLicenseAttribute",
    "SPEncryptUpdate",
    "SPCreateEncryptor",
    "SPAttest",
    "SPGetInfo",
    "SPEncryptFinal",
    "SPSign",
    "SPBindLicense",
    "SPGetBoundRightKey",
    "SPCloseHandle",
    "SPEncrypt",
    "SPCreateEnablingPrincipal",
    "SPGetLicenseObject",
    "SPRegisterRevocationList",
    "SPDecrypt",
    "SPGetCurrentTime",
    "SPGetProcAddress",
    "SPIsActivated",
    "SPCommit",
    "SPEnableAndEncrypt",
    "SPEnablePublishingLicense",
    "SPCreateSecurityProcessor",
    "SPCheckEnvironmentSecurity",
    "SPCreatePCE",
    "SPDecryptUpdate",
    "SPGetLicenseAttributeCount",
    "SPLoadLibrary",
    "SPGetLicenseObjectCount",
    "SPCreateDecryptor",
    "SPDecryptFinal"
  ],
  "secproc_ssp.dll": [
    "SPGetLicenseAttribute",
    "SPEncryptUpdate",
    "SPCreateEncryptor",
    "SPAttest",
    "SPGetInfo",
    "SPEncryptFinal",
    "SPSign",
    "SPBindLicense",
    "SPGetBoundRightKey",
    "SPCloseHandle",
    "SPEncrypt",
    "SPCreateEnablingPrincipal",
    "SPGetLicenseObject",
    "SPRegisterRevocationList",
    "SPDecrypt",
    "SPGetCurrentTime",
    "SPGetProcAddress",
    "SPIsActivated",
    "SPCommit",
    "SPEnableAndEncrypt",
    "SPEnablePublishingLicense",
    "SPCreateSecurityProcessor",
    "SPCheckEnvironmentSecurity",
    "SPCreatePCE",
    "SPDecryptUpdate",
    "SPGetLicenseAttributeCount",
    "SPLoadLibrary",
    "SPGetLicenseObjectCount",
    "SPCreateDecryptor",
    "SPDecryptFinal"
  ],
  "secproc_ssp_isv.dll": [
    "SPGetLicenseAttribute",
    "SPEncryptUpdate",
    "SPCreateEncryptor",
    "SPAttest",
    "SPGetInfo",
    "SPEncryptFinal",
    "SPSign",
    "SPBindLicense",
    "SPGetBoundRightKey",
    "SPCloseHandle",
    "SPEncrypt",
    "SPCreateEnablingPrincipal",
    "SPGetLicenseObject",
    "SPRegisterRevocationList",
    "SPDecrypt",
    "SPGetCurrentTime",
    "SPGetProcAddress",
    "SPIsActivated",
    "SPCommit",
    "SPEnableAndEncrypt",
    "SPEnablePublishingLicense",
    "SPCreateSecurityProcessor",
    "SPCheckEnvironmentSecurity",
    "SPCreatePCE",
    "SPDecryptUpdate",
    "SPGetLicenseAttributeCount",
    "SPLoadLibrary",
    "SPGetLicenseObjectCount",
    "SPCreateDecryptor",
    "SPDecryptFinal"
  ],
  "secur32.dll": [
    "AcquireCredentialsHandleA",
    "AcceptSecurityContext",
    "RevertSecurityContext",
    "SspiMarshalAuthIdentity",
    "QuerySecurityPackageInfoW",
    "GetSecurityUserInfo",
    "QueryContextAttributesW",
    "TranslateNameA",
    "LsaRegisterLogonProcess",
    "CredMarshalTargetInfo",
    "SaslIdentifyPackageW",
    "AddSecurityPackageW",
    "ImportSecurityContextA",
    "DeleteSecurityContext",
    "AddCredentialsW",
    "SspiPrepareForCredWrite",
    "SetCredentialsAttributesA",
    "SspiFreeAuthIdentity",
    "SaslIdentifyPackageA",
    "AddSecurityPackageA",
    "ExportSecurityContext",
    "SeciFreeCallContext",
    "DecryptMessage",
    "SaslGetContextOption",
    "SecpTranslateNameEx",
    "EnumerateSecurityPackagesW",
    "ChangeAccountPasswordW",
    "ImpersonateSecurityContext",
    "SspiGetTargetHostName",
    "InitializeSecurityContextW",
    "SecpFreeMemory",
    "LsaLogonUser",
    "LsaRegisterPolicyChangeNotification",
    "SspiDecryptAuthIdentity",
    "SetContextAttributesA",
    "QuerySecurityContextToken",
    "UnsealMessage",
    "ImportSecurityContextW",
    "SetCredentialsAttributesW",
    "SaslGetProfilePackageA",
    "LsaDeregisterLogonProcess",
    "SaslGetProfilePackageW",
    "FreeCredentialsHandle",
    "VerifySignature",
    "LsaLookupAuthenticationPackage",
    "QuerySecurityPackageInfoA",
    "SaslEnumerateProfilesW",
    "QueryContextAttributesA",
    "AcquireCredentialsHandleW",
    "SaslAcceptSecurityContext",
    "MakeSignature",
    "FreeContextBuffer",
    "TranslateNameW",
    "LsaFreeReturnBuffer",
    "EncryptMessage",
    "LsaGetLogonSessionData",
    "SspiCompareAuthIdentities",
    "CredUnmarshalTargetInfo",
    "SealMessage",
    "LsaEnumerateLogonSessions",
    "GetComputerObjectNameA",
    "LsaConnectUntrusted",
    "InitSecurityInterfaceW",
    "SetContextAttributesW",
    "SeciAllocateAndSetCallFlags",
    "SspiIsAuthIdentityEncrypted",
    "SspiUnmarshalAuthIdentity",
    "SeciAllocateAndSetIPAddress",
    "SecpTranslateName",
    "CollectLsaPerformanceData",
    "GetUserNameExA",
    "SaslEnumerateProfilesA",
    "SspiCopyAuthIdentity",
    "CloseLsaPerformanceData",
    "OpenLsaPerformanceData",
    "LsaUnregisterPolicyChangeNotification",
    "GetComputerObjectNameW",
    "SspiPrepareForCredRead",
    "SaslInitializeSecurityContextW",
    "SspiExcludePackage",
    "SspiEncodeStringsAsAuthIdentity",
    "QueryCredentialsAttributesW",
    "SspiEncodeAuthIdentityAsStrings",
    "AddCredentialsA",
    "GetUserNameExW",
    "SaslInitializeSecurityContextA",
    "QueryCredentialsAttributesA",
    "SspiZeroAuthIdentity",
    "SspiEncryptAuthIdentity",
    "InitSecurityInterfaceA",
    "EnumerateSecurityPackagesA",
    "InitializeSecurityContextA",
    "SspiLocalFree",
    "DeleteSecurityPackageA",
    "CompleteAuthToken",
    "SspiValidateAuthIdentity",
    "DeleteSecurityPackageW",
    "ApplyControlToken",
    "SaslSetContextOption",
    "LsaCallAuthenticationPackage",
    "ChangeAccountPasswordA"
  ],
  "security.dll": [
    "AcquireCredentialsHandleA",
    "QuerySecurityContextToken",
    "UnsealMessage",
    "ImportSecurityContextW",
    "InitSecurityInterfaceW",
    "AcceptSecurityContext",
    "RevertSecurityContext",
    "FreeCredentialsHandle",
    "VerifySignature",
    "QuerySecurityPackageInfoW",
    "QuerySecurityPackageInfoA",
    "QueryContextAttributesW",
    "AddSecurityPackageW",
    "ImportSecurityContextA",
    "QueryContextAttributesA",
    "DeleteSecurityContext",
    "AcquireCredentialsHandleW",
    "MakeSignature",
    "FreeContextBuffer",
    "QueryCredentialsAttributesA",
    "EncryptMessage",
    "InitSecurityInterfaceA",
    "EnumerateSecurityPackagesA",
    "InitializeSecurityContextA",
    "AddSecurityPackageA",
    "ExportSecurityContext",
    "DecryptMessage",
    "QueryCredentialsAttributesW",
    "DeleteSecurityPackageA",
    "CompleteAuthToken",
    "SealMessage",
    "DeleteSecurityPackageW",
    "EnumerateSecurityPackagesW",
    "ApplyControlToken",
    "ImpersonateSecurityContext",
    "InitializeSecurityContextW"
  ],
  "sendmail.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "sensrsvc.dll": [
    "ServiceCtrlHandler",
    "ServiceMain"
  ],
  "serialui.dll": [
    "drvGetDefaultCommConfigW",
    "drvSetDefaultCommConfigA",
    "drvCommConfigDialogW",
    "drvSetDefaultCommConfigW",
    "drvCommConfigDialogA",
    "drvGetDefaultCommConfigA"
  ],
  "serwvdrv.dll": [
    "DriverProc",
    "widMessage",
    "wodMessage"
  ],
  "setbcdlocale.dll": [
    "OnMachineUILanguageSwitch"
  ],
  "setupapi.dll": [
    "pSetupDiInvalidateHelperModules",
    "CM_Is_Version_Available",
    "CM_Install_DevNodeW",
    "pSetupFree",
    "CM_Run_Detection",
    "SetupDiInstallClassExW",
    "pSetupMalloc",
    "Remote_CM_Query_And_Remove_SubTree",
    "pSetupCreateTextLogSectionW",
    "SetupDiGetINFClassA",
    "SetupDiGetDeviceInfoListDetailW",
    "Remote_CM_Add_ID",
    "SetupDiGetDeviceInterfacePropertyW",
    "SetupDiGetDeviceInstanceIdA",
    "CM_Get_Device_ID_List_SizeW",
    "Remote_CM_Set_Class_Property",
    "SetupDiCreateDevRegKeyA",
    "CM_Get_DevNode_Custom_PropertyA",
    "CM_Is_Version_Available_Ex",
    "SetupQueueDeleteW",
    "SetupDiGetHwProfileFriendlyNameExW",
    "SetupDiRemoveDeviceInterface",
    "SetupInstallFromInfSectionW",
    "SetupCommitFileQueueW",
    "CM_Get_Device_Interface_List_Size_ExW",
    "SetupEnumPublishedInfW",
    "CMP_GetServerSideDeviceInstallFlags",
    "SetupGetInfFileListA",
    "SetupGetInfDriverStoreLocationA",
    "SetupDiGetDeviceInstanceIdW",
    "SetupDiGetClassInstallParamsA",
    "SetupDiBuildClassInfoListExW",
    "pSetupRegistryDelnode",
    "DriverStoreEnumDriverPackageW",
    "SetupLogErrorA",
    "CM_Set_Class_Registry_PropertyA",
    "CM_Get_Hardware_Profile_InfoA",
    "Remote_CM_Get_DevNode_Property_Keys",
    "pSetupGuidFromString",
    "SetupOpenAppendInfFileW",
    "CM_Set_HW_Prof_FlagsW",
    "SetupAddSectionToDiskSpaceListA",
    "SetupDiRemoveDevice",
    "SetupDiGetDeviceInfoListDetailA",
    "SetupOpenMasterInf",
    "CM_Get_First_Log_Conf_Ex",
    "CM_Delete_Class_Key",
    "SetupInstallFileA",
    "SetupDiSetDeviceRegistryPropertyW",
    "SetupDiSetDeviceInterfacePropertyW",
    "CM_First_Range",
    "CM_Get_Device_ID_List_Size_ExW",
    "SetupGetFileCompressionInfoA",
    "CM_Get_Device_ID_List_ExA",
    "Remote_CM_Unregister_Device_Interface",
    "SetupDiDestroyDriverInfoList",
    "pSetupValidateDriverPackage",
    "SetupGetSourceFileSizeA",
    "CM_Free_Resource_Conflict_Handle",
    "SetupDiCreateDeviceInfoListExW",
    "SetupSetSourceListW",
    "pSetupLoadIndirectString",
    "CM_Duplicate_PowerScheme",
    "SetupDiGetSelectedDriverA",
    "SetupDiClassGuidsFromNameExA",
    "Remote_CM_Set_DevNode_Registry_Property",
    "SetupDiSetClassPropertyExW",
    "CM_Open_Device_Interface_KeyA",
    "SetupDiCreateDeviceInfoListExA",
    "CM_Free_Res_Des",
    "PnpIsFileAclIntact",
    "CM_Disconnect_Machine",
    "SetupDiReportDriverNotFoundError",
    "CM_Query_Remove_SubTree_Ex",
    "SetupGetBackupInformationA",
    "SetupQueueRenameSectionW",
    "pSetupStringTableStringFromId",
    "CM_Get_Version_Ex",
    "SetupInstallFileExA",
    "pSetupCenterWindowRelativeToParent",
    "CM_Get_Device_Interface_ListW",
    "Local_CM_Add_Driver_Package_Worker",
    "SetupDiGetClassDevsExW",
    "Remote_CM_Free_Res_Des",
    "pSetupIsGuidNull",
    "SetupDiGetDeviceInstallParamsA",
    "SetupQueryDrivesInDiskSpaceListW",
    "CM_Get_Sibling",
    "CM_Request_Device_Eject_ExA",
    "CM_Delete_Driver_PackageW",
    "SetupDiCreateDevRegKeyW",
    "SetupDiOpenClassRegKey",
    "Remote_CM_Get_Class_Property",
    "SetupAddToSourceListW",
    "CM_Get_Class_NameW",
    "SetupQueueDefaultCopyA",
    "CM_Enumerate_Enumerators_ExW",
    "SetupDiOpenDeviceInterfaceRegKey",
    "pSetupInstallCatalog",
    "SetupGetInfPublishedNameW",
    "SetupDiGetDeviceInterfaceAlias",
    "DriverStoreDeleteDriverPackageW",
    "CM_Open_Device_Interface_Key_ExW",
    "CM_Enable_DevNode_Ex",
    "pSetupOpenAndMapFileForRead",
    "CM_Query_And_Remove_SubTreeA",
    "Remote_CM_Get_Device_Interface_List",
    "Remote_CM_Get_HW_Prof_Flags",
    "Remote_CM_Query_Arbitrator_Free_Data",
    "CM_Disable_DevNode",
    "CM_Request_Device_EjectA",
    "CM_Test_Range_Available",
    "SetupDiCreateDeviceInfoA",
    "SetupEnumInfSectionsA",
    "SetupConfigureWmiFromInfSectionA",
    "SetupDiOpenDeviceInterfaceW",
    "SetupAdjustDiskSpaceListW",
    "SetupLogFileA",
    "Remote_CM_Get_Class_Registry_Property",
    "SetupGetStringFieldA",
    "SetupUninstallOEMInfW",
    "CM_Create_Range_List",
    "Remote_CM_Modify_Res_Des",
    "SetupInitializeFileLogA",
    "SetupQuerySpaceRequiredOnDriveA",
    "CM_Get_Device_Interface_List_Size_ExA",
    "SetupAddToDiskSpaceListW",
    "CM_Is_Dock_Station_Present_Ex",
    "CM_Add_Empty_Log_Conf_Ex",
    "Remote_CM_Get_Device_ID_List_Size",
    "SetupSetNonInteractiveMode",
    "SetupCopyOEMInfA",
    "CM_Get_Device_Interface_List_ExA",
    "CM_Set_ActiveScheme",
    "SetupFindNextMatchLineW",
    "DriverStoreFindDriverPackageW",
    "SetupInstallFilesFromInfSectionA",
    "SetupPrepareQueueForRestoreW",
    "SetupDiRestartDevices",
    "DriverStoreAddDriverPackageA",
    "pSetupSetGlobalFlags",
    "SetupQueryInfFileInformationW",
    "CM_Remove_SubTree",
    "CM_Modify_Res_Des_Ex",
    "SetupRemoveSectionFromDiskSpaceListW",
    "pSetupInfSetDigitalSignatureInfo",
    "SetupQueryInfOriginalFileInformationA",
    "DriverStoreEnumDriverPackageA",
    "CM_Get_Device_ID_List_ExW",
    "SetupDiGetDeviceRegistryPropertyA",
    "SetupQueryInfVersionInformationW",
    "CM_Free_Log_Conf",
    "CM_Query_And_Remove_SubTreeW",
    "pSetupStringTableGetExtraData",
    "SetupQueueDeleteA",
    "pSetupGetInfSections",
    "SetupQueueRenameA",
    "SetupInstallFileW",
    "CM_Get_Parent",
    "CM_Get_Device_Interface_Alias_ExW",
    "pSetupWriteLogEntry",
    "SetupDiClassNameFromGuidW",
    "CM_Get_Hardware_Profile_Info_ExA",
    "SetupRemoveFileLogEntryW",
    "pSetupDoLastKnownGoodBackup",
    "pSetupGetDriverDate",
    "pSetupSetDriverPackageRestorePoint",
    "SetupDiGetHwProfileListExW",
    "SetupTerminateFileLog",
    "SetupGetInfDriverStoreLocationW",
    "CM_Delete_Device_Interface_KeyW",
    "CM_Get_Sibling_Ex",
    "CM_Open_Class_KeyA",
    "Remote_CM_Get_Device_Interface_Property",
    "SetupDiSelectBestCompatDrv",
    "SetupOpenAppendInfFileA",
    "pSetupUninstallCatalog",
    "CM_Invert_Range_List",
    "Remote_CM_Get_Class_Property_Keys",
    "pSetupStringFromGuid",
    "Remote_CM_Query_Resource_Conflict_List_Worker",
    "CM_Get_DevNode_Custom_PropertyW",
    "pSetupStringTableInitializeEx",
    "CM_Get_DevNode_Status",
    "pSetupVerifyQueuedCatalogs",
    "CM_Set_DevNode_Registry_PropertyW",
    "SetupGetSourceInfoA",
    "SetupScanFileQueueA",
    "DoesUserHavePrivilege",
    "SetupFindFirstLineA",
    "pSetupShouldDeviceBeExcluded",
    "CM_Register_Device_Interface_ExW",
    "SetupSetSourceListA",
    "CM_Get_DevNode_Registry_PropertyW",
    "Remote_CM_Get_Device_Interface_List_Size",
    "Remote_CM_Locate_DevNode_Worker",
    "PnpIsFileContentIntact",
    "Remote_CM_Install_DevNode",
    "SetupPromptReboot",
    "Remote_CM_Free_Log_Conf",
    "Remote_CM_Get_DevNode_Registry_Property",
    "SetupDiGetActualSectionToInstallExA",
    "pSetupDiCrimsonLogDeviceInstall",
    "CM_Request_Eject_PC_Ex",
    "SetupDiGetDeviceInterfacePropertyKeys",
    "SetupDiGetDriverInfoDetailA",
    "pSetupAccessRunOnceNodeList",
    "Remote_CM_Get_DevNode_Custom_Property",
    "CMP_WaitServicesAvailable",
    "pSetupDoesUserHavePrivilege",
    "SetupDiBuildClassInfoList",
    "SetupDiSetClassInstallParamsA",
    "SetupDiDrawMiniIcon",
    "SetupInitializeFileLogW",
    "SetupQueueDeleteSectionW",
    "SetupDecompressOrCopyFileA",
    "SetupCreateDiskSpaceListW",
    "SetupDiCreateDeviceInterfaceRegKeyW",
    "SetupDiOpenDeviceInfoW",
    "SetupOpenInfFileW",
    "pSetupAddMiniIconToList",
    "SetupDiGetINFClassW",
    "CM_Add_ID_ExW",
    "SetupDiGetClassRegistryPropertyA",
    "SetupRemoveInstallSectionFromDiskSpaceListW",
    "pSetupInfIsInbox",
    "SetupScanFileQueue",
    "SetupInstallFromInfSectionA",
    "SetupDiCreateDeviceInterfaceRegKeyA",
    "CM_Locate_DevNodeW",
    "CM_Move_DevNode",
    "SetupCopyErrorA",
    "SetupInstallLogCloseEventGroup",
    "CM_Connect_MachineA",
    "SetupDuplicateDiskSpaceListA",
    "pSetupInfGetDigitalSignatureInfo",
    "CM_Delete_Class_Key_Ex",
    "CMP_Report_LogOn",
    "SetupDiGetSelectedDriverW",
    "SetupGetThreadLogToken",
    "SetupDiInstallDriverFiles",
    "SetupAddToDiskSpaceListA",
    "SetupDiGetClassImageListExA",
    "SetupRenameErrorA",
    "SetupDiBuildDriverInfoList",
    "pSetupGetIndirectStringsFromDriverInfo",
    "CM_Detect_Resource_Conflict",
    "CM_Get_DevNode_Registry_Property_ExW",
    "SetupDiGetCustomDevicePropertyA",
    "CM_Get_Class_Key_Name_ExW",
    "CM_Delete_Device_Interface_Key_ExA",
    "SetupGetLineCountW",
    "Remote_CM_Is_Dock_Station_Present",
    "SetupDefaultQueueCallback",
    "CM_Free_Log_Conf_Handle",
    "SetupDiGetDeviceInterfaceDetailA",
    "CM_Get_Log_Conf_Priority_Ex",
    "Remote_CM_Delete_Class_Key",
    "CM_Query_And_Remove_SubTree_ExW",
    "SetupDefaultQueueCallbackA",
    "SetupDiEnumDriverInfoW",
    "CM_Modify_Res_Des",
    "CM_Get_Next_Log_Conf_Ex",
    "SetupDeleteErrorW",
    "CM_Get_Device_Interface_List_SizeA",
    "CM_Set_Class_Registry_PropertyW",
    "SetupDiGetClassInstallParamsW",
    "CM_Open_DevNode_Key",
    "SetupDiSetClassPropertyW",
    "CM_Set_DevNode_Problem_Ex",
    "CM_Get_Device_ID_Size_Ex",
    "CM_Get_HW_Prof_FlagsA",
    "CM_Get_Depth_Ex",
    "CM_Get_Next_Res_Des_Ex",
    "DriverStoreDeleteDriverPackageA",
    "pSetupGetQueueFlags",
    "SetupInitDefaultQueueCallbackEx",
    "Remote_CM_Get_DevNode_Status",
    "Remote_CM_Create_DevNode",
    "SetupPromptForDiskW",
    "SetupDiGetClassDevPropertySheetsW",
    "CM_Get_Device_Interface_ListA",
    "pSetupStringTableInitialize",
    "SetupDuplicateDiskSpaceListW",
    "SetupDiGetClassDescriptionExW",
    "SetupVerifyInfFileW",
    "Remote_CM_Set_DevNode_Problem",
    "SetupDiApplyPowerScheme",
    "SetupInstallServicesFromInfSectionExW",
    "pSetupSetQueueFlags",
    "SetupDiDeleteDeviceInterfaceData",
    "SetupDiSetDriverInstallParamsA",
    "CM_Import_PowerScheme",
    "pSetupCreateTextLogSectionA",
    "Remote_CM_Is_Version_Available",
    "SetupLogErrorW",
    "SetupDiGetClassImageList",
    "CM_Query_And_Remove_SubTree_ExA",
    "SetupUninstallNewlyCopiedInfs",
    "CM_Get_Child",
    "CM_Enumerate_EnumeratorsA",
    "CM_Set_HW_Prof_Flags_ExA",
    "SetupDiInstallDevice",
    "SetupRemoveFromSourceListA",
    "SetupDiGetHwProfileFriendlyNameW",
    "CM_Install_DevNode_ExW",
    "SetupWriteTextLog",
    "pSetupUnicodeToMultiByte",
    "SetupGetFileCompressionInfoExA",
    "SetupFindNextMatchLineA",
    "CM_Get_Device_IDA",
    "SetupDestroyDiskSpaceList",
    "Remote_CM_Open_DevNode_Key",
    "SetupQuerySourceListA",
    "SetupGetLineCountA",
    "Remote_CM_Get_DevNode_Property",
    "SetupDiEnumDeviceInterfaces",
    "pSetupGetField",
    "Remote_CM_Disconnect_Machine_Worker",
    "Remote_CM_Delete_Device_Interface_Key",
    "SetupDefaultQueueCallbackW",
    "SetupDiClassGuidsFromNameA",
    "Remote_CM_Get_Device_Interface_Alias",
    "CM_Get_Device_ID_List_Size_ExA",
    "SetupFindNextLine",
    "SetupDiSetClassRegistryPropertyW",
    "CM_Create_DevNode_ExA",
    "SetupIterateCabinetA",
    "SetupSetDirectoryIdW",
    "pSetupStringTableSetExtraData",
    "CM_Get_Device_Interface_List_ExW",
    "Remote_CM_Delete_DevNode_Key",
    "SetupDiAskForOEMDisk",
    "SetupRemoveFileLogEntryA",
    "CM_Create_DevNodeA",
    "Remote_CM_Setup_DevNode",
    "SetupDiSetClassRegistryPropertyA",
    "pSetupDiGetStrongNameForDriverNode",
    "SetupDiReportAdditionalSoftwareRequested",
    "CM_Open_DevNode_Key_Ex",
    "SetupCloseFileQueue",
    "SetupDiCreateDeviceInterfaceW",
    "Remote_CM_Enumerate_Enumerators",
    "SetupDiReportPnPDeviceProblem",
    "SetupSetPlatformPathOverrideA",
    "CM_Register_Device_Driver",
    "Remote_CM_Set_Device_Interface_Property",
    "SetupDiGetClassDescriptionW",
    "Remote_CM_Get_Parent",
    "SetupRemoveFromDiskSpaceListW",
    "CM_Is_Dock_Station_Present",
    "ExtensionPropSheetPageProc",
    "SetupDiEnumDeviceInfo",
    "pSetupIsUserTrustedInstaller",
    "SetupCommitFileQueue",
    "CM_Get_Resource_Conflict_DetailsA",
    "pSetupIsUserAdmin",
    "CM_Add_IDW",
    "Remote_CM_Set_Class_Registry_Property",
    "CM_Intersect_Range_List",
    "SetupGetMultiSzFieldA",
    "SetupDiReportDeviceInstallError",
    "CM_Open_Device_Interface_KeyW",
    "SetupAdjustDiskSpaceListA",
    "CM_Get_Device_ID_ExW",
    "SetupDiLoadClassIcon",
    "SetupDiEnumDriverInfoA",
    "pSetupModifyGlobalFlags",
    "SetupDiGetDriverInstallParamsA",
    "SetupGetIntField",
    "SetupQueryInfVersionInformationA",
    "SetupCloseInfFile",
    "SetupFreeSourceListW",
    "CM_Enumerate_Classes_Ex",
    "pSetupMultiByteToUnicode",
    "SetupWriteTextLogError",
    "pSetupStringTableEnum",
    "SetupDiGetHwProfileFriendlyNameA",
    "SetupDiSetDevicePropertyW",
    "SetupCreateDiskSpaceListA",
    "SetupDiMoveDuplicateDevice",
    "CM_Get_Next_Res_Des",
    "CM_RestoreAll_DefaultPowerSchemes",
    "SetupDiReportDriverPackageImportationError",
    "Remote_CM_Get_Next_Res_Des",
    "SetupGetLineTextA",
    "SetupSetDirectoryIdA",
    "SetupDiGetClassDevsW",
    "SetupDiGetDriverInstallParamsW",
    "Local_CM_Delete_Driver_Package_Worker",
    "SetupDiOpenDeviceInterfaceA",
    "SetupDiGetDevicePropertyKeys",
    "pSetupGetGlobalFlags",
    "Remote_CM_Request_Eject_PC",
    "SetupFindFirstLineW",
    "pSetupDiBuildInfoDataFromStrongName",
    "pSetupStringTableLookUpString",
    "pSetupWriteLogError",
    "Remote_CM_Get_Next_Log_Conf",
    "SetupDiCreateDeviceInterfaceA",
    "CM_Get_Hardware_Profile_InfoW",
    "CM_Request_Device_Eject_ExW",
    "CM_Register_Device_Driver_Ex",
    "SetupInstallFileExW",
    "Remote_CM_Open_Class_Key",
    "Remote_CM_Set_HW_Prof",
    "SetupDiGetClassDevPropertySheetsA",
    "SetupAddToSourceListA",
    "SetupCopyOEMInfW",
    "SetupQueueCopySectionW",
    "InstallHinfSectionA",
    "SetupGetTargetPathW",
    "SetupGetSourceFileLocationW",
    "pSetupHandleFailedVerification",
    "CM_Setup_DevNode_Ex",
    "CM_Unregister_Device_InterfaceW",
    "Remote_CM_Get_Depth",
    "CM_Get_Device_Interface_Alias_ExA",
    "CM_Get_Parent_Ex",
    "SetupDiGetDriverInfoDetailW",
    "SetupInstallFilesFromInfSectionW",
    "SetupQueueCopySectionA",
    "CM_Request_Eject_PC",
    "pSetupGetRealSystemTime",
    "CM_Add_Empty_Log_Conf",
    "CM_Get_DevNode_Custom_Property_ExW",
    "SetupDiSetDeviceInterfaceDefault",
    "pSetupIsLocalSystem",
    "PnpRepairWindowsProtectedDriver",
    "CM_Set_HW_Prof_Ex",
    "SetupDiGetClassPropertyW",
    "SetupDecompressOrCopyFileW",
    "CMP_WaitNoPendingInstallEvents",
    "CM_Reenumerate_DevNode",
    "SetupGetInfInformationA",
    "SetupDiGetClassBitmapIndex",
    "Remote_CM_Reenumerate_DevNode",
    "CM_Disable_DevNode_Ex",
    "pSetupMakeSurePathExists",
    "CM_Add_Res_Des",
    "Remote_CM_Get_Sibling",
    "CM_Get_Hardware_Profile_Info_ExW",
    "SetupGetSourceInfoW",
    "SetupGetFileQueueFlags",
    "SetupDiGetDeviceRegistryPropertyW",
    "SetupGetFieldCount",
    "SetupUninstallOEMInfA",
    "SetupBackupErrorW",
    "CM_Set_DevNode_Registry_Property_ExW",
    "SetupAddInstallSectionToDiskSpaceListA",
    "CM_Get_Class_Name_ExW",
    "SetupDiGetClassDevsA",
    "CM_Next_Range",
    "SetupDiGetHwProfileFriendlyNameExA",
    "SetupQueueCopyIndirectW",
    "SetupQueryInfFileInformationA",
    "CM_Unregister_Device_InterfaceA",
    "Remote_CM_Request_Device_Eject",
    "SetupDiRegisterDeviceInfo",
    "CM_Get_Class_Key_NameW",
    "CM_Free_Res_Des_Ex",
    "SetupDiGetClassPropertyExW",
    "SetupDiSetDeviceInstallParamsW",
    "SetupQueryDrivesInDiskSpaceListA",
    "CM_Get_Class_Key_Name_ExA",
    "SetupDiCreateDeviceInfoList",
    "CM_Get_Class_Name_ExA",
    "SetupQueueCopyIndirectA",
    "SetupLogFileW",
    "SetupDiGetDevicePropertyW",
    "SetupRemoveFromSourceListW",
    "SetupQueueDefaultCopyW",
    "SetupInstallServicesFromInfSectionA",
    "SetupDiSetClassInstallParamsW",
    "CM_Open_Class_Key_ExW",
    "CM_Query_Resource_Conflict_List",
    "DriverStoreAddDriverPackageW",
    "CM_Dup_Range_List",
    "CM_Locate_DevNode_ExA",
    "SetupDiGetActualSectionToInstallExW",
    "SetupDiGetDeviceInterfaceDetailW",
    "CM_Get_Class_NameA",
    "Remote_CM_Query_Arbitrator_Free_Size",
    "SetupTermDefaultQueueCallback",
    "CM_Run_Detection_Ex",
    "Remote_CM_Get_Hardware_Profile_Info",
    "Remote_CM_Run_Detection",
    "SetupDiChangeState",
    "CM_Get_Device_Interface_AliasA",
    "Remote_CM_Add_Empty_Log_Conf",
    "SetupBackupErrorA",
    "SetupDiGetCustomDevicePropertyW",
    "CM_Create_DevNodeW",
    "MyRealloc",
    "SetupDiReportGenericDriverInstalled",
    "SetupGetSourceFileLocationA",
    "CM_Get_DevNode_Registry_PropertyA",
    "Remote_CMP_GetServerSideDeviceInstallFlags",
    "Remote_CM_Get_Global_State",
    "CM_Remove_SubTree_Ex",
    "Remote_CM_Get_Log_Conf_Priority",
    "SetupDiSetDeviceInstallParamsA",
    "SetupDiSetDeviceRegistryPropertyA",
    "SetupOpenLog",
    "CM_Get_Depth",
    "CM_Uninstall_DevNode",
    "SetupDiClassGuidsFromNameExW",
    "CM_Set_DevNode_Registry_PropertyA",
    "SetupGetLineTextW",
    "Remote_CM_Register_Device_Interface",
    "CM_Query_Arbitrator_Free_Data",
    "CM_Get_Res_Des_Data_Size",
    "CM_Get_Res_Des_Data_Size_Ex",
    "SetupOpenInfFileA",
    "SetupQuerySpaceRequiredOnDriveW",
    "SetupDiUnremoveDevice",
    "SetupInstallServicesFromInfSectionW",
    "SetupWriteTextLogInfLine",
    "SetupScanFileQueueW",
    "VerifyCatalogFile",
    "CM_Get_Global_State_Ex",
    "SetupConfigureWmiFromInfSectionW",
    "SetupDiGetClassRegistryPropertyW",
    "Remote_CM_Get_Child",
    "SetupVerifyInfFileA",
    "SetupSetFileQueueAlternatePlatformA",
    "SetupDiDeleteDeviceInterfaceRegKey",
    "CM_Write_UserPowerKey",
    "SetupDiDestroyDeviceInfoList",
    "CM_Get_Class_Registry_PropertyA",
    "Remote_CM_Get_Class_Name",
    "pSetupAddTagToGroupOrderListEntry",
    "pSetupStringTableAddString",
    "SetupDiSetDriverInstallParamsW",
    "SetupGetBinaryField",
    "SetupDiBuildClassInfoListExA",
    "SetupRenameErrorW",
    "CM_Set_DevNode_Registry_Property_ExA",
    "Remote_CM_Disable_DevNode",
    "Remote_CM_Enable_DevNode",
    "CM_Get_Resource_Conflict_Count",
    "CM_Delete_DevNode_Key",
    "Remote_CM_Get_Res_Des_Data_Size",
    "SetupDiDestroyClassImageList",
    "SetupGetTargetPathA",
    "CM_Get_Device_ID_Size",
    "InstallCatalog",
    "pSetupIsBiDiLocalizedSystemEx",
    "CMP_Init_Detection",
    "SetupDiInstallClassW",
    "pSetupGetDriverVersion",
    "CMP_GetBlockedDriverInfo",
    "CM_Move_DevNode_Ex",
    "CM_Register_Device_InterfaceW",
    "pSetupCaptureAndConvertAnsiArg",
    "CM_Reenumerate_DevNode_Ex",
    "SetupInitDefaultQueueCallback",
    "CM_Get_Child_Ex",
    "CM_Set_HW_Prof_Flags_ExW",
    "CM_Get_Next_Log_Conf",
    "pGetDriverPackageHash",
    "SetupAddInstallSectionToDiskSpaceListW",
    "SetupDiClassNameFromGuidExW",
    "pSetupGetCurrentDriverSigningPolicy",
    "CM_Add_IDA",
    "CM_Get_HW_Prof_Flags_ExW",
    "SetupSetFileQueueFlags",
    "SetupGetFileCompressionInfoExW",
    "pSetupUnmapAndCloseFile",
    "SetupDiClassNameFromGuidA",
    "CM_Delete_Device_Interface_KeyA",
    "SetupDeleteErrorA",
    "SetupDiGetSelectedDevice",
    "SetupDiInstallClassExA",
    "CM_Get_Log_Conf_Priority",
    "CM_Create_DevNode_ExW",
    "SetupRemoveInstallSectionFromDiskSpaceListA",
    "CM_Enumerate_Enumerators_ExA",
    "pSetupDestroyRunOnceNodeList",
    "CM_Locate_DevNode_ExW",
    "PnpEnumDrpFile",
    "CM_Get_Res_Des_Data",
    "SetupQueryInfOriginalFileInformationW",
    "Remote_CM_Get_Version",
    "SetupSetThreadLogToken",
    "Remote_CM_Get_Res_Des_Data",
    "CM_Uninstall_DevNode_Ex",
    "Remote_CM_Enumerate_Classes",
    "CM_Open_Device_Interface_Key_ExA",
    "SetupCloseLog",
    "SetupDiGetClassDevsExA",
    "pSetupStringTableAddStringEx",
    "CM_Add_ID_ExA",
    "CM_Restore_DefaultPowerScheme",
    "pSetupRealloc",
    "CM_Set_HW_Prof_FlagsA",
    "CM_Get_Resource_Conflict_DetailsW",
    "pSetupOutOfMemory",
    "SetupQueryFileLogW",
    "SetupQueueCopyW",
    "SetupSetDirectoryIdExW",
    "SetupGetFileCompressionInfoW",
    "CM_Get_Version",
    "CM_Open_Class_Key_ExA",
    "CM_Get_Device_IDW",
    "CM_Query_Arbitrator_Free_Data_Ex",
    "CM_Add_Range",
    "IsUserAdmin",
    "CM_Detect_Resource_Conflict_Ex",
    "SetupAddSectionToDiskSpaceListW",
    "SetupGetMultiSzFieldW",
    "SetupGetNonInteractiveMode",
    "CM_Register_Device_Interface_ExA",
    "SetupDiGetClassImageListExW",
    "SetupGetFileQueueCount",
    "Remote_CM_Set_HW_Prof_Flags",
    "Remote_CM_Connect_Machine_Worker",
    "SetupEnumPublishedInfA",
    "SetupQueueRenameSectionA",
    "CM_Free_Range_List",
    "CM_Set_HW_Prof",
    "pSetupEnablePrivilege",
    "SetupPromptForDiskA",
    "Remote_CM_Register_Device_Driver",
    "SetupRemoveSectionFromDiskSpaceListA",
    "SetupDiDeleteDevRegKey",
    "pSetupQueryMultiSzValueToArray",
    "CM_Add_Res_Des_Ex",
    "CM_Free_Log_Conf_Ex",
    "CM_Setup_DevNode",
    "SetupGetInfFileListW",
    "SetupDiClassNameFromGuidExA",
    "SetupGetStringFieldW",
    "SetupQueryFileLogA",
    "CM_Query_Remove_SubTree",
    "SetupDiCallClassInstaller",
    "SetupDiGetClassDescriptionExA",
    "SetupDiGetClassPropertyKeys",
    "pSetupStringTableLookUpStringEx",
    "SetupSetPlatformPathOverrideW",
    "SetupInstallServicesFromInfSectionExA",
    "pSetupAppendPath",
    "pSetupGetFileTitle",
    "CM_Unregister_Device_Interface_ExA",
    "InstallHinfSectionW",
    "SetupDiDeleteDeviceInfo",
    "CM_Request_Device_EjectW",
    "SetupDiGetClassImageIndex",
    "pSetupRetrieveServiceConfig",
    "CM_Get_DevNode_Status_Ex",
    "SetupDiGetClassDescriptionA",
    "CM_Get_Global_State",
    "CM_Set_DevNode_Problem",
    "pSetupStringTableStringFromIdEx",
    "Remote_CM_Uninstall_DevNode",
    "SetupDiSelectOEMDrv",
    "SetupEnumInfSectionsW",
    "SetupQueueRenameW",
    "CM_Delete_DevNode_Key_Ex",
    "CM_Get_Class_Key_NameA",
    "SetupDiGetDeviceInstallParamsW",
    "CM_Get_Device_ID_List_SizeA",
    "SetupFreeSourceListA",
    "Remote_CM_Get_Device_Interface_Property_Keys",
    "SetupSetDirectoryIdExA",
    "Remote_CM_Get_Device_ID_List",
    "CM_Connect_MachineW",
    "CM_Delete_PowerScheme",
    "SetupGetInfInformationW",
    "pSetupCloseTextLogSection",
    "SetupDiGetActualSectionToInstallW",
    "Local_CM_Install_DevNode_Worker",
    "DriverStoreFindDriverPackageA",
    "SetupIterateCabinetW",
    "SetupQueueCopyA",
    "Remote_CM_Set_DevNode_Property",
    "SetupQuerySourceListW",
    "SetupGetLineByIndexW",
    "SetupDiInstallDeviceInterfaces",
    "SetupRemoveFromDiskSpaceListA",
    "SetupGetSourceFileSizeW",
    "SetupInstallLogCreateEventGroup",
    "Remote_CM_Open_Device_Interface_Key",
    "SetupDiOpenDeviceInfoA",
    "SetupDiRegisterCoDeviceInstallers",
    "SetupDiOpenClassRegKeyExW",
    "SetupDiLoadDeviceIcon",
    "SetupDiSetSelectedDriverA",
    "CM_Apply_PowerScheme",
    "CM_Delete_Range",
    "CM_Get_Class_Registry_PropertyW",
    "SetupDiInstallClassA",
    "Remote_CM_Add_Res_Des",
    "SetupGetBackupInformationW",
    "CM_Get_Device_Interface_List_SizeW",
    "SetupSetFileQueueAlternatePlatformW",
    "CM_Query_Arbitrator_Free_Size",
    "SetupDiGetWizardPage",
    "CM_Get_Res_Des_Data_Ex",
    "CM_Get_First_Log_Conf",
    "CM_Register_Device_InterfaceA",
    "SetupDiCreateDeviceInfoW",
    "SetupGetInfSections",
    "CM_Get_Device_ID_ListW",
    "CM_Locate_DevNodeA",
    "pSetupVerifyCatalogFile",
    "SetupPrepareQueueForRestoreA",
    "CM_Query_Arbitrator_Free_Size_Ex",
    "pSetupConcatenatePaths",
    "SetupDiSelectDevice",
    "SetupDiGetClassPropertyKeysExW",
    "SetupDiGetDeviceInfoListClass",
    "CM_Find_Range",
    "CM_Merge_Range_List",
    "CM_Get_DevNode_Custom_Property_ExA",
    "Remote_CM_Get_First_Log_Conf",
    "CM_Enumerate_Classes",
    "CM_Add_Driver_PackageW",
    "SetupCopyErrorW",
    "SetupDiGetActualModelsSectionW",
    "Remote_CMP_WaitServicesAvailable",
    "SetupDiSetSelectedDriverW",
    "CM_Free_Res_Des_Handle",
    "UnicodeToMultiByte",
    "SetupGetInfPublishedNameA",
    "SetupQueueDeleteSectionA",
    "SetupDiGetHwProfileList",
    "pSetupStringTableDuplicate",
    "SetupDiCancelDriverInfoSearch",
    "SetupOpenFileQueue",
    "CM_Get_Device_ID_ExA",
    "CM_Get_Device_ID_ListA",
    "CM_Enable_DevNode",
    "CM_Enumerate_EnumeratorsW",
    "pSetupDuplicateString",
    "SetupDiGetActualSectionToInstallA",
    "InstallHinfSection",
    "CM_Get_HW_Prof_FlagsW",
    "MyFree",
    "SetupDiGetActualModelsSectionA",
    "SetupDiSetSelectedDevice",
    "SetupGetLineByIndexA",
    "CM_Unregister_Device_Interface_ExW",
    "CM_Get_Device_Interface_AliasW",
    "SetupDiClassGuidsFromNameW",
    "CM_Get_HW_Prof_Flags_ExA",
    "SetupCommitFileQueueA",
    "CM_Delete_Device_Interface_Key_ExW",
    "PnpIsFilePnpDriver",
    "CM_Open_Class_KeyW",
    "SetupCancelTemporarySourceList",
    "SetupDiOpenDevRegKey",
    "pSetupSetArrayToMultiSzValue",
    "SetupDiOpenClassRegKeyExA",
    "CM_Get_DevNode_Registry_Property_ExA",
    "pSetupStringTableDestroy",
    "MyMalloc",
    "SetupDiGetHwProfileListExA"
  ],
  "setupcln.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "setupetw.dll": "No exports",
  "sfc.dll": [
    "SfcGetNextProtectedFile",
    "SRSetRestorePoint",
    "SRSetRestorePointW",
    "SRSetRestorePointA",
    "SfcIsFileProtected",
    "SfcIsKeyProtected",
    "SfpVerifyFile"
  ],
  "sfc_os.dll": [
    "SfcGetNextProtectedFile",
    "SfcFileException",
    "SfcClose",
    "SfcInstallProtectedFiles",
    "SfpInstallCatalog",
    "SfcTerminateWatcherThread",
    "SfpDeleteCatalog",
    "SfpVerifyFile",
    "BeginFileMapEnumeration",
    "SRSetRestorePointA",
    "SfcConnectToServer",
    "SfcInitProt",
    "GetNextFileMapContent",
    "SfcInitiateScan",
    "CloseFileMapEnumeration",
    "SfcIsFileProtected",
    "SfcIsKeyProtected",
    "SRSetRestorePointW"
  ],
  "shacct.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "sharemediacpl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "shdocvw.dll": [
    "HlinkFrameNavigateNHL",
    "SoftwareUpdateMessageBox",
    "OpenURL",
    "AddUrlToFavorites",
    "DoPrivacyDlg",
    "URLQualifyA",
    "SetShellOfflineState",
    "DoAddToFavDlgW",
    "HlinkFindFrame",
    "SHAddSubscribeFavorite",
    "DoOrganizeFavDlgW",
    "DllCanUnloadNow",
    "HlinkFrameNavigate",
    "DoOrganizeFavDlg",
    "ImportPrivacySettings",
    "SetQueryNetSessionCount",
    "DoFileDownloadEx",
    "DllGetClassObject",
    "DoAddToFavDlg",
    "URLQualifyW",
    "SHGetIDispatchForFolder",
    "DllRegisterWindowClasses",
    "DllGetVersion",
    "DoFileDownload"
  ],
  "shell32.dll": [
    "SHCoCreateInstance",
    "SHBindToFolderIDListParent",
    "SheChangeDirExW",
    "SHCreateDirectoryExA",
    "Control_RunDLL",
    "SHInvokePrinterCommandW",
    "GetFileNameFromBrowse",
    "ShellAboutW",
    "SHGetFileInfo",
    "ILCreateFromPath",
    "ILFindLastID",
    "SHMapPIDLToSystemImageListIndex",
    "SHCreateItemFromParsingName",
    "Control_RunDLLAsUserW",
    "RealShellExecuteExW",
    "SheChangeDirA",
    "Shell_NotifyIconW",
    "SHCreateShellItemArrayFromShellItem",
    "SHDestroyPropSheetExtArray",
    "StgMakeUniqueName",
    "PifMgr_OpenProperties",
    "StrRChrA",
    "DragQueryFileAorW",
    "SheGetDirA",
    "StrRChrIW",
    "ExtractIconW",
    "SHParseDisplayName",
    "SHSetInstanceExplorer",
    "Shell_GetCachedImageIndex",
    "DAD_DragEnterEx",
    "SHLoadNonloadedIconOverlayIdentifiers",
    "SHShowManageLibraryUI",
    "SHILCreateFromPath",
    "SHBrowseForFolder",
    "Shell_GetCachedImageIndexA",
    "SHGetPathFromIDList",
    "DAD_DragMove",
    "SHCreateDefaultContextMenu",
    "SHBindToFolderIDListParentEx",
    "AssocGetDetailsOfPropKey",
    "SHGetDriveMedia",
    "SHEnumerateUnreadMailAccountsW",
    "Options_RunDLLW",
    "SHGetFolderLocation",
    "CDefFolderMenu_Create2",
    "ILGetSize",
    "SHGetFileInfoA",
    "WaitForExplorerRestartW",
    "SHUpdateImageA",
    "RealDriveType",
    "SHChangeNotifyDeregister",
    "SHGetPropertyStoreFromParsingName",
    "SHAppBarMessage",
    "SHSetDefaultProperties",
    "RunAsNewUser_RunDLLW",
    "RealShellExecuteA",
    "SHPropStgWriteMultiple",
    "SHPathPrepareForWriteA",
    "SHCreateShellItemArrayFromIDLists",
    "SHGetNameFromIDList",
    "SetCurrentProcessExplicitAppUserModelID",
    "SHCreateShellItemArray",
    "DllRegisterServer",
    "SHDefExtractIconW",
    "ILFindChild",
    "SHCreateDirectoryExWWorker",
    "SHGetFolderPathAWorker",
    "StrRChrIA",
    "DoEnvironmentSubstA",
    "SHAddFromPropSheetExtArray",
    "PathIsSlowA",
    "PathResolve",
    "SHSetTemporaryPropertyForItem",
    "SHAddToRecentDocs",
    "ExtractAssociatedIconA",
    "SHSetUnreadMailCountW",
    "StrRStrIA",
    "RealShellExecuteW",
    "InitNetworkAddressControl",
    "SHGetIconOverlayIndexW",
    "ShellExecuteA",
    "StrRStrA",
    "SHCreateQueryCancelAutoPlayMoniker",
    "DragQueryPoint",
    "SHGetRealIDL",
    "SHPropStgCreate",
    "Shell_NotifyIconA",
    "PathIsExeWorker",
    "SHSetFolderPathW",
    "SHGetFolderPathWWorker",
    "SHHelpShortcuts_RunDLL",
    "SHIsFileAvailableOffline",
    "DAD_DragEnterEx2",
    "PrintersGetCommand_RunDLL",
    "CommandLineToArgvW",
    "SHReplaceFromPropSheetExtArray",
    "IsNetDrive",
    "OpenAs_RunDLLW",
    "SHRemoveLocalizedName",
    "SHInvokePrinterCommandA",
    "ShellExec_RunDLL",
    "DAD_SetDragImage",
    "PathMakeUniqueName",
    "SHGetKnownFolderIDList",
    "Control_RunDLLW",
    "SHCreateFileExtractIconW",
    "SHSetLocalizedName",
    "SHChangeNotify",
    "SHChangeNotification_Lock",
    "ILSaveToStream",
    "ILLoadFromStreamEx",
    "PathYetAnotherMakeUniqueName",
    "SHGetKnownFolderItem",
    "Options_RunDLLA",
    "SHCreateDataObject",
    "SHOpenPropSheetW",
    "SHAddDefaultPropertiesByExt",
    "SHLimitInputEdit",
    "ExtractIconEx",
    "SHPropStgReadMultiple",
    "SHGetSpecialFolderPathAWorker",
    "SHGetDesktopFolderWorker",
    "SHGetLocalizedName",
    "SHCreateDirectory",
    "SHChangeNotification_Unlock",
    "IsLFNDriveW",
    "FreeIconList",
    "ExtractAssociatedIconExA",
    "WriteCabinetState",
    "SHOpenFolderAndSelectItems",
    "StrNCmpW",
    "SHGetFileInfoWWorker",
    "OpenAs_RunDLLA",
    "SHCoCreateInstanceWorker",
    "ILClone",
    "GetCurrentProcessExplicitAppUserModelID",
    "SHOpenWithDialog",
    "ShellExec_RunDLLA",
    "RegenerateUserEnvironment",
    "AssocCreateForClasses",
    "SHCreateProcessAsUserW",
    "SHResolveLibrary",
    "SHGetPathFromIDListW",
    "ShellExecuteEx",
    "SHGetFolderPathW",
    "SHGetImageList",
    "ILCloneFirst",
    "SHEvaluateSystemCommandTemplate",
    "PickIconDlg",
    "SHFind_InitMenuPopup",
    "StrChrIA",
    "DragQueryFileW",
    "SHBrowseForFolderA",
    "ILCreateFromPathA",
    "Control_RunDLLA",
    "SHBrowseForFolderW",
    "Shell_NotifyIcon",
    "SHSetFolderPathA",
    "ShellExecuteExW",
    "DAD_AutoScroll",
    "SHLoadInProc",
    "SHCLSIDFromString",
    "SHGetInstanceExplorer",
    "SHGetFolderPathA",
    "SHStartNetConnectionDialogW",
    "ShellExecuteW",
    "DllCanUnloadNow",
    "SHGetFolderPathEx",
    "SheSetCurDrive",
    "SHGetIDListFromObject",
    "StrCmpNW",
    "SHCreateShellFolderView",
    "ILRemoveLastID",
    "FindExecutableA",
    "StrChrW",
    "DllInstall",
    "SHBindToParent",
    "DuplicateIcon",
    "DAD_DragLeave",
    "RestartDialog",
    "SHDefExtractIconA",
    "SHGetDataFromIDListA",
    "DAD_ShowDragImage",
    "SHAlloc",
    "SHGetUnreadMailCountW",
    "PathIsExe",
    "SHGetDiskFreeSpaceA",
    "ExtractAssociatedIconExW",
    "ShellExecuteExA",
    "SHHelpShortcuts_RunDLLW",
    "PrintersGetCommand_RunDLLA",
    "SHGetDiskFreeSpaceExA",
    "FindExecutableW",
    "SHCreateShellItem",
    "LaunchMSHelp_RunDLLW",
    "SHGetKnownFolderPath",
    "ExtractIconA",
    "PrintersGetCommand_RunDLLW",
    "Win32DeleteFile",
    "SHEmptyRecycleBinA",
    "SHShellFolderView_Message",
    "SHHandleUpdateImage",
    "SHSimpleIDListFromPath",
    "DragQueryFileA",
    "SHPathPrepareForWriteW",
    "DllGetVersion",
    "StrStrIW",
    "SHDoDragDrop",
    "SHBindToObject",
    "SHGetFolderPathAndSubDirWWorker",
    "Shell_GetCachedImageIndexW",
    "SHFileOperationW",
    "SHFreeNameMappings",
    "SHAssocEnumHandlers",
    "DoEnvironmentSubstW",
    "StrChrIW",
    "SHUpdateImageW",
    "DragFinish",
    "SHAssocEnumHandlersForProtocolByApplication",
    "SHCreateItemFromIDList",
    "SHGetFolderLocationWorker",
    "StrCmpNA",
    "SHObjectProperties",
    "SHGetFolderPathAndSubDirA",
    "SHCreateLocalServerRunDll",
    "IsLFNDriveA",
    "InternalExtractIconListW",
    "SHGetDataFromIDListW",
    "StrChrA",
    "StrNCmpA",
    "SHGetDesktopFolder",
    "SHCreateDirectoryExW",
    "SHRestricted",
    "SHQueryRecycleBinW",
    "StrStrW",
    "SHEnableServiceObject",
    "StrNCmpIA",
    "ILIsEqual",
    "DragQueryFile",
    "SHCreatePropSheetExtArray",
    "SHGetSetFolderCustomSettings",
    "ILCreateFromPathW",
    "CIDLData_CreateFromIDArray",
    "PifMgr_GetProperties",
    "SHGetNewLinkInfoW",
    "ShellExec_RunDLLW",
    "SHGetPropertyStoreFromIDList",
    "ReadCabinetState",
    "SHValidateUNC",
    "SHGetInstanceExplorerWorker",
    "DllGetActivationFactory",
    "ShellHookProc",
    "ILGetNext",
    "SHGetSpecialFolderPathWWorker",
    "StrStrIA",
    "Shell_NotifyIconGetRect",
    "SHCreateItemFromRelativeName",
    "SHCreateDefaultPropertiesOp",
    "PathCleanupSpecWorker",
    "SHGetFileInfoW",
    "SHFree",
    "PifMgr_CloseProperties",
    "DllGetClassObject",
    "ILIsParent",
    "Shell_GetImageLists",
    "StrCmpNIW",
    "DriveType",
    "ShellMessageBoxA",
    "SHCreateStdEnumFmtEtc",
    "SHGetItemFromObject",
    "InternalExtractIconListA",
    "IsLFNDrive",
    "SHMultiFileProperties",
    "SHCreateShellItemArrayFromDataObject",
    "SHGetMalloc",
    "SHFileOperation",
    "DllUnregisterServer",
    "SHGetSpecialFolderLocation",
    "Shell_MergeMenus",
    "SHGetTemporaryPropertyForItem",
    "StrStrA",
    "IsUserAnAdmin",
    "SHGetNewLinkInfoA",
    "PifMgr_SetProperties",
    "SHTestTokenMembership",
    "ShellAboutA",
    "ShellMessageBoxW",
    "SHGetSpecialFolderPathW",
    "SHGetAttributesFromDataObject",
    "SHGetPathFromIDListA",
    "SHFileOperationA",
    "RestartDialogEx",
    "ILCombine",
    "SHCloneSpecialIDList",
    "SHFindFiles",
    "WOWShellExecute",
    "StrCmpNIA",
    "RealShellExecuteExA",
    "SHGetSpecialFolderPathA",
    "SHQueryUserNotificationState",
    "SHGetFolderPathAndSubDirW",
    "DragAcceptFiles",
    "SHChangeNotifyRegisterThread",
    "SHFlushSFCache",
    "PathQualify",
    "OpenRegStream",
    "SHGetSettings",
    "SHSetKnownFolderPathWorker",
    "SHCreateDefaultExtractIcon",
    "PathGetShortPath",
    "SHGetKnownFolderPathWorker",
    "SHGetDiskFreeSpaceExW",
    "PrepareDiscForBurnRunDllW",
    "CheckEscapesW",
    "ExtractIconExA",
    "SHFormatDrive",
    "SHGetItemFromDataObject",
    "PathIsSlowW",
    "SHGetSetSettings",
    "PathCleanupSpec",
    "SHHelpShortcuts_RunDLLA",
    "Options_RunDLL",
    "SHGetIconOverlayIndexA",
    "SHSetKnownFolderPath",
    "AppCompat_RunDLLW",
    "SHCreateShellFolderViewEx",
    "SHChangeNotifyRegister",
    "StrRChrW",
    "OpenAs_RunDLL",
    "SHExtractIconsW",
    "ILAppendID",
    "SHChangeNotifySuspendResume",
    "SHGetNewLinkInfo",
    "SHGetStockIconInfo",
    "StrNCmpIW",
    "SignalFileOpen",
    "SHCreateItemWithParent",
    "SHCreateAssociationRegistration",
    "ILFree",
    "ExtractIconExW",
    "StrRStrIW",
    "SHEmptyRecycleBinW",
    "SHQueryRecycleBinA",
    "SHCreateItemInKnownFolder",
    "StrRStrW",
    "SHGetPropertyStoreForWindow",
    "SHUpdateRecycleBinIcon",
    "SHGetPathFromIDListEx",
    "ExtractAssociatedIconW"
  ],
  "shellstyle.dll": "No exports",
  "shfolder.dll": [
    "SHGetFolderPathA",
    "SHGetFolderPathW"
  ],
  "shgina.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "shimeng.dll": [
    "SE_DynamicShim",
    "SE_InstallAfterInit",
    "SE_ProcessDying",
    "SE_DllLoaded",
    "SE_InstallBeforeInit",
    "SE_IsShimDll",
    "SE_GetHookAPIs",
    "SE_GetShimCount",
    "SE_GetMaxShimCount",
    "SE_DllUnloaded",
    "SE_GetProcAddressIgnoreIncExc"
  ],
  "shimgvw.dll": [
    "ImageView_Fullscreen",
    "ImageView_FullscreenW",
    "imageview_fullscreenW",
    "ImageView_FullscreenA",
    "ImageView_PrintToA",
    "ImageView_PrintToW",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "ImageView_PrintTo"
  ],
  "shlwapi.dll": [
    "StrCmpW",
    "SHDeleteValueW",
    "SHSkipJunction",
    "SHOpenRegStream2W",
    "SHReleaseThreadRef",
    "wnsprintfW",
    "UrlGetPartW",
    "StrCpyNW",
    "UrlGetLocationA",
    "UrlUnescapeA",
    "SHQueryValueExA",
    "PathFindNextComponentA",
    "PathMakeSystemFolderA",
    "PathIsSystemFolderW",
    "PathRemoveFileSpecA",
    "PathAddBackslashW",
    "PathIsDirectoryA",
    "StrToIntA",
    "SHRegDeleteEmptyUSKeyA",
    "ChrCmpIW",
    "SHCopyKeyA",
    "PathFindExtensionA",
    "SHFormatDateTimeA",
    "PathCreateFromUrlAlloc",
    "StrRChrA",
    "PathQuoteSpacesA",
    "PathParseIconLocationA",
    "SHRegGetValueFromHKCUHKLM",
    "StrRChrIW",
    "SHRegSetPathW",
    "SHUnicodeToAnsiCP",
    "SHAnsiToAnsi",
    "StrRetToBufW",
    "StrStrNW",
    "SHRegGetIntW",
    "SHRegQueryInfoUSKeyA",
    "SHEnumValueW",
    "PathUndecorateA",
    "ConnectToConnectionPoint",
    "SHRegCreateUSKeyW",
    "PathIsFileSpecA",
    "SHRegWriteUSValueW",
    "SHDeleteKeyA",
    "PathBuildRootW",
    "UrlApplySchemeA",
    "AssocCreate",
    "SHUnicodeToUnicode",
    "StrCSpnW",
    "StrCmpCW",
    "PathRemoveExtensionW",
    "SHRegisterValidateTemplate",
    "IStream_WritePidl",
    "StrIsIntlEqualA",
    "UrlEscapeA",
    "SHRegGetUSValueW",
    "SHPropertyBag_WriteBSTR",
    "PathIsPrefixW",
    "SHIsChildOrSelf",
    "StrCSpnIA",
    "SHGetThreadRef",
    "StrRChrIA",
    "PathCanonicalizeA",
    "SHCopyKeyW",
    "PathIsUNCA",
    "StrRetToBufA",
    "SHEnumKeyExW",
    "IUnknown_SetSite",
    "SHRegSetPathA",
    "PathStripToRootW",
    "PathFindSuffixArrayW",
    "SHCreateShellPalette",
    "StrRStrIA",
    "StrCSpnA",
    "SHRegEnumUSValueW",
    "PathIsUNCW",
    "ChrCmpIA",
    "PathRemoveBackslashW",
    "UrlHashW",
    "SHLoadIndirectString",
    "GetAcceptLanguagesA",
    "StrCatW",
    "PathRemoveFileSpecW",
    "PathGetCharTypeW",
    "PathFindExtensionW",
    "PathIsURLA",
    "SHCreateStreamOnFileA",
    "SHSetValueW",
    "PathCommonPrefixA",
    "ColorHLSToRGB",
    "SHOpenRegStreamA",
    "SHQueryInfoKeyA",
    "PathRelativePathToA",
    "StrRetToBSTR",
    "PathIsContentTypeA",
    "PathFileExistsA",
    "PathSetDlgItemPathA",
    "SHDeleteKeyW",
    "StrToInt64ExA",
    "PathRemoveBlanksW",
    "SHUnicodeToAnsi",
    "PathUnmakeSystemFolderA",
    "PathCompactPathW",
    "PathStripPathW",
    "StrCatBuffA",
    "StrDupA",
    "StrCmpLogicalW",
    "PathIsNetworkPathW",
    "PathUnmakeSystemFolderW",
    "StrSpnW",
    "IStream_Write",
    "PathAppendW",
    "StrCpyW",
    "StrTrimA",
    "IUnknown_AtomicRelease",
    "SHRegCloseUSKey",
    "SHSendMessageBroadcastA",
    "PathUnExpandEnvStringsW",
    "SHRegEnumUSKeyA",
    "IUnknown_QueryStatus",
    "PathIsRelativeA",
    "UrlIsOpaqueW",
    "SHRegEnumUSKeyW",
    "IUnknown_QueryService",
    "StrFormatByteSizeA",
    "PathCombineA",
    "PathIsDirectoryEmptyW",
    "SHCreateThreadWithHandle",
    "PathMatchSpecExA",
    "PathCombineW",
    "PathSkipRootA",
    "SHStripMneumonicW",
    "PathFileExistsAndAttributesW",
    "SHRegQueryInfoUSKeyW",
    "UrlFixupW",
    "AssocQueryStringByKeyA",
    "PathCompactPathExA",
    "StrChrIA",
    "SHUnlockShared",
    "SHRegOpenUSKeyW",
    "UrlCompareW",
    "GetMenuPosFromID",
    "StrCmpCA",
    "StrStrNIW",
    "UrlGetLocationW",
    "SHSetThreadRef",
    "UrlCanonicalizeW",
    "PathMatchSpecExW",
    "StrPBrkA",
    "PathGetDriveNumberA",
    "StrToIntExA",
    "IStream_ReadPidl",
    "StrRetToStrA",
    "StrFromTimeIntervalA",
    "IUnknown_Exec",
    "SHAutoComplete",
    "StrCmpNCA",
    "SHRegCreateUSKeyA",
    "ParseURLA",
    "StrChrNW",
    "UrlGetPartA",
    "SHRegQueryUSValueW",
    "StrCmpNW",
    "SHAnsiToUnicode",
    "SHCreateMemStream",
    "SHRegGetValueW",
    "SHRegSetUSValueA",
    "StrCatBuffW",
    "AssocQueryKeyW",
    "SHStripMneumonicA",
    "StrCmpNCW",
    "UrlIsW",
    "PathSetDlgItemPathW",
    "SHPropertyBag_ReadStrAlloc",
    "PathGetArgsA",
    "QISearch",
    "HashData",
    "UrlCreateFromPathA",
    "GUIDFromStringW",
    "StrChrW",
    "UrlCombineW",
    "ColorRGBToHLS",
    "UrlCombineA",
    "SHCreateThread",
    "PathAddExtensionW",
    "PathIsFileSpecW",
    "SHRegOpenUSKeyA",
    "SHEnumValueA",
    "IUnknown_GetSite",
    "wnsprintfA",
    "SHRegGetBoolUSValueW",
    "PathRemoveArgsW",
    "PathAppendA",
    "PathCanonicalizeW",
    "SHPackDispParamsV",
    "UrlHashA",
    "PathGetDriveNumberW",
    "PathStripToRootA",
    "IStream_Reset",
    "IsInternetESCEnabled",
    "SHRegGetUSValueA",
    "IsOS",
    "IUnknown_GetWindow",
    "AssocQueryStringW",
    "SHGetValueW",
    "UrlIsNoHistoryW",
    "ParseURLW",
    "SHRegSetUSValueW",
    "PathCommonPrefixW",
    "SHGetValueA",
    "SHRegDuplicateHKey",
    "PathIsPrefixA",
    "IStream_Read",
    "PathSearchAndQualifyW",
    "PathIsContentTypeW",
    "StrIsIntlEqualW",
    "ColorAdjustLuma",
    "DllGetVersion",
    "StrFormatKBSizeA",
    "SHGetViewStatePropertyBag",
    "PathRenameExtensionW",
    "PathAddBackslashA",
    "StrCatChainW",
    "StrFromTimeIntervalW",
    "PathIsLFNFileSpecW",
    "PathFileExistsW",
    "StrStrIW",
    "IsCharSpaceA",
    "PathMakePrettyA",
    "StrSpnA",
    "SHDeleteValueA",
    "PathCreateFromUrlW",
    "PathIsRootA",
    "SHSetValueA",
    "SHRegWriteUSValueA",
    "IntlStrEqWorkerW",
    "SHRegDeleteUSValueA",
    "StrChrIW",
    "StrFormatByteSizeW",
    "SHDeleteEmptyKeyA",
    "UrlIsNoHistoryA",
    "IntlStrEqWorkerA",
    "AssocGetPerceivedType",
    "SHRunIndirectRegClientCommand",
    "PathIsLFNFileSpecA",
    "PathFindOnPathW",
    "StrCmpNA",
    "PathRenameExtensionA",
    "SHIsLowMemoryMachine",
    "StrNCatA",
    "StrNCatW",
    "PathMakePrettyW",
    "PathIsSameRootW",
    "PathCompactPathA",
    "StrChrA",
    "IsCharSpaceW",
    "StrStrW",
    "StrCmpNICW",
    "SHRegQueryUSValueA",
    "SHQueryValueExW",
    "SHRegDeleteUSValueW",
    "AssocQueryStringByKeyW",
    "StrToIntExW",
    "PathRelativePathToW",
    "StrCmpICA",
    "PathSkipRootW",
    "SHStrDupW",
    "WhichPlatform",
    "PathFindSuffixArrayA",
    "SHGetInverseCMAP",
    "UrlEscapeW",
    "PathAddExtensionA",
    "SHLockShared",
    "PathCreateFromUrlA",
    "GetAcceptLanguagesW",
    "StrFormatKBSizeW",
    "StrRetToStrW",
    "PathUnquoteSpacesW",
    "PathMatchSpecA",
    "PathFindFileNameA",
    "SHRegGetBoolValueFromHKCUHKLM",
    "SHRegEnumUSValueA",
    "StrToInt64ExW",
    "IStream_WriteStr",
    "IStream_Copy",
    "UrlApplySchemeW",
    "SHQueryInfoKeyW",
    "MLLoadLibraryW",
    "SHCreateStreamOnFileW",
    "UrlCanonicalizeA",
    "PathStripPathA",
    "SHCreateStreamWrapper",
    "SHRegGetPathA",
    "PathQuoteSpacesW",
    "PathMatchSpecW",
    "StrStrIA",
    "StrFormatByteSize64A",
    "SHMessageBoxCheckW",
    "SHDeleteOrphanKeyW",
    "UrlCreateFromPathW",
    "IStream_Size",
    "DllGetClassObject",
    "PathRemoveBlanksA",
    "SHDeleteEmptyKeyW",
    "SHFormatDateTimeW",
    "PathUnExpandEnvStringsA",
    "StrCmpNIW",
    "ShellMessageBoxA",
    "PathFindFileNameW",
    "PathIsSystemFolderA",
    "StrCmpNICA",
    "wvnsprintfW",
    "PathIsUNCServerShareW",
    "SHRegGetBoolUSValueA",
    "MLFreeLibrary",
    "PathMakeSystemFolderW",
    "SHOpenRegStream2A",
    "StrDupW",
    "StrCSpnIW",
    "SHRegGetValueA",
    "SHCreateStreamOnFileEx",
    "StrStrA",
    "IStream_ReadStr",
    "UrlIsA",
    "ShellMessageBoxW",
    "AssocQueryKeyA",
    "StrFormatByteSizeEx",
    "PathUnquoteSpacesA",
    "SHRegGetPathW",
    "SHOpenRegStreamW",
    "PathIsRootW",
    "PathGetArgsW",
    "PathSearchAndQualifyA",
    "StrCmpNIA",
    "UrlUnescapeW",
    "PathIsUNCServerW",
    "PathIsSameRootA",
    "PathGetCharTypeA",
    "PathFindOnPathA",
    "AssocQueryStringA",
    "StrCmpICW",
    "PathIsUNCServerShareA",
    "PathBuildRootA",
    "SHEnumKeyExA",
    "UrlCompareA",
    "SHStrDupA",
    "wvnsprintfA",
    "PathIsDirectoryEmptyA",
    "PathCompactPathExW",
    "PathRemoveBackslashA",
    "SHRegDeleteEmptyUSKeyW",
    "StrTrimW",
    "SHMessageBoxCheckA",
    "SHDeleteOrphanKeyA",
    "PathParseIconLocationW",
    "SHSendMessageBroadcastW",
    "PathRemoveExtensionA",
    "SHFreeShared",
    "PathRemoveArgsA",
    "StrRChrW",
    "PathUndecorateW",
    "PathIsDirectoryW",
    "StrPBrkW",
    "PathIsURLW",
    "PathFindNextComponentW",
    "PathIsNetworkPathA",
    "StrRStrIW",
    "MLLoadLibraryA",
    "PathIsRelativeW",
    "IUnknown_Set",
    "AssocIsDangerous",
    "DelayLoadFailureHook",
    "StrCmpIW",
    "SHAllocShared",
    "StrToIntW",
    "StrChrNIW",
    "UrlIsOpaqueA",
    "PathIsUNCServerA",
    "SHCreateThreadRef"
  ],
  "shpafact.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "shsetup.dll": [
    "SHUnattendedSetup",
    "SHUnattendedSetupW",
    "Sysprep_Generalize_Shell",
    "Sysprep_Cleanup_Shell",
    "Sysprep_Specialize_Shell",
    "SHUnattendedSetupA"
  ],
  "shsvcs.dll": [
    "CreateHardwareEventMoniker",
    "HardwareDetectionServiceMain"
  ],
  "shunimpl.dll": "No exports",
  "shwebsvc.dll": [
    "DllCanUnloadNow",
    "PublishRunDll",
    "DllGetClassObject",
    "AddNetPlaceRunDll"
  ],
  "signdrv.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "sisbkup.dll": [
    "SisFreeAllocatedMemory",
    "SisCreateRestoreStructure",
    "SisFreeBackupStructure",
    "SisRestoredCommonStoreFile",
    "SisRestoredLink",
    "SisFreeRestoreStructure",
    "SisCreateBackupStructure",
    "SisCSFilesToBackupForLink"
  ],
  "slc.dll": [
    "SLGetPolicyInformationDWORD",
    "SLGetProductSkuInformation",
    "SLUninstallLicense",
    "SLpGetGenuineLocal",
    "SLGenerateOfflineInstallationIdEx",
    "SLpUpdateComponentTokens",
    "SLGetPKeyId",
    "SLInstallProofOfPurchase",
    "SLGetGenuineInformation",
    "SLRegisterEvent",
    "SLConsumeWindowsRight",
    "SLGetLicenseInformation",
    "SLGetLicense",
    "SLUnregisterWindowsEvent",
    "SLGetPKeyInformation",
    "SLIsWindowsGenuineLocal",
    "SLGetLicenseFileId",
    "SLSetCurrentProductKey",
    "SLConsumeRight",
    "SLUnregisterEvent",
    "SLRegisterWindowsEvent",
    "SLGenerateOfflineInstallationId",
    "SLGetInstalledProductKeyIds",
    "SLpCheckProductKey",
    "SLGetApplicationInformation",
    "SLReArmWindows",
    "SLOpen",
    "SLDepositOfflineConfirmationIdEx",
    "SLGetSLIDList",
    "SLSetGenuineInformation",
    "SLGetLicensingStatusInformation",
    "SLGetWindowsInformationDWORD",
    "SLGetWindowsInformation",
    "SLGetPolicyInformation",
    "SLGetServiceInformation",
    "SLInstallLicense",
    "SLClose",
    "SLDepositOfflineConfirmationId",
    "SLUninstallProofOfPurchase",
    "SLFireEvent",
    "SLpProcessOemProductKey"
  ],
  "slcext.dll": [
    "SLGetPackageProperties",
    "SLInstallPackage",
    "SLGetServerStatus",
    "SLGetPackageProductKey",
    "SLGetPackageToken",
    "SLAcquireGenuineTicket",
    "SLActivateProduct",
    "SLUninstallPackage",
    "SLGetReferralInformation"
  ],
  "slwga.dll": [
    "SLIsGenuineLocal"
  ],
  "smbwmiv2.dll": [
    "DllUnregisterServer",
    "DllMain",
    "GetProviderClassID",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "MI_Main"
  ],
  "smspace.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "snmpapi.dll": [
    "SnmpSvcSetLogLevel",
    "SnmpSvcGetUptime",
    "SnmpUtilAsnAnyFree",
    "SnmpUtilAsnAnyCpy",
    "SnmpUtilUnicodeToUTF8",
    "SnmpUtilMemFree",
    "SnmpUtilUTF8ToUnicode",
    "SnmpTfxQuery",
    "SnmpUtilAnsiToUnicode",
    "SnmpUtilOidCmp",
    "SnmpUtilMemReAlloc",
    "SnmpUtilUnicodeToAnsi",
    "SnmpUtilDbgPrint",
    "SnmpSvcAddrIsIpx",
    "SnmpSvcAddrToSocket",
    "SnmpUtilVarBindListFree",
    "SnmpUtilOidToA",
    "SnmpUtilOctetsNCmp",
    "SnmpUtilIdsToA",
    "SnmpSvcGetUptimeFromTime",
    "SnmpUtilOidFree",
    "SnmpUtilOctetsFree",
    "SnmpTfxClose",
    "SnmpUtilOctetsCmp",
    "SnmpUtilPrintOid",
    "SnmpSvcInitUptime",
    "SnmpUtilOidNCmp",
    "SnmpUtilVarBindFree",
    "SnmpUtilOidAppend",
    "SnmpUtilPrintAsnAny",
    "SnmpSvcGetEnterpriseOID",
    "SnmpUtilVarBindListCpy",
    "SnmpUtilOidCpy",
    "SnmpUtilVarBindCpy",
    "SnmpTfxOpen",
    "SnmpUtilOctetsCpy",
    "SnmpSvcSetLogType",
    "SnmpUtilMemAlloc"
  ],
  "softkbd.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "softpub.dll": [
    "DriverFinalPolicy",
    "SoftpubCheckCert",
    "OfficeInitializePolicy",
    "SoftpubAuthenticode",
    "SoftpubCleanup",
    "SoftpubInitialize",
    "DllRegisterServer",
    "DllUnregisterServer",
    "OpenPersonalTrustDBDialog",
    "SoftpubLoadMessage",
    "OfficeCleanupPolicy",
    "SoftpubFreeDefUsageCallData",
    "SoftpubLoadSignature",
    "GenericChainFinalProv",
    "SoftpubDumpStructure",
    "HTTPSCertificateTrust",
    "GenericChainCertificateTrust",
    "SoftpubDefCertInit",
    "SoftpubLoadDefUsageCallData",
    "FindCertsByIssuer",
    "DriverInitializePolicy",
    "DriverCleanupPolicy",
    "HTTPSFinalProv",
    "AddPersonalTrustDBPages"
  ],
  "spbcd.dll": [
    "Sysprep_Generalize_Bcd",
    "Sysprep_Specialize_Bcd"
  ],
  "spfileq.dll": [
    "SpFileQueueFileInUse",
    "SpFileQueueSetFlags",
    "SpFileQueueClose",
    "SpFileQueueNodeGetSourceFilename",
    "SpFileQueueGetFlags",
    "SpFileQueueNodeRemove",
    "SpFileQueueRename",
    "SpFileQueueCommit",
    "SpFileQueueNodeGetSecurityDescriptor",
    "SpFileQueueGetQueueCount",
    "SpFileQueueNodeGetSourcePath",
    "SpFileQueueOpen",
    "SpFileQueueNodeGetTargetDirectory",
    "SpFileQueueNodeGetStyleFlags",
    "SpFileQueueDelete",
    "SpFileQueueNodeGetSourceRootPath",
    "SpFileQueueNodeGetTargetFilename",
    "SpFileQueueCopy"
  ],
  "spmpm.dll": [
    "Sysprep_Generalize_MountPointManager"
  ],
  "spnet.dll": [
    "Sysprep_Clean_Net",
    "Sysprep_Generalize_Net"
  ],
  "spoolss.dll": [
    "DeletePrinterKeyW",
    "CallRouterFindFirstPrinterChangeNotification",
    "ReallocSplStr",
    "AllocSplStr",
    "DllReallocSplStr",
    "GetServerPolicy",
    "DllAllocSplMem",
    "AddPortExW",
    "StartDocPrinterW",
    "SpoolerHasInitialized",
    "ReportJobProcessingProgress",
    "RemoteFindFirstPrinterChangeNotification",
    "RouterGetPrintClassObject",
    "RouterRegisterForPrintAsyncNotifications",
    "AddPortW",
    "SplCloseSpoolFileHandle",
    "GetSpoolerTlsIndexes",
    "RouterFreeBidiMem",
    "CreatePrinterIC",
    "MarshallDownStructure",
    "OpenPrinterW",
    "EnumPrinterDataW",
    "UndoAlignRpcPtr",
    "RouterAllocBidiResponseContainer",
    "DeletePrinterDriverExW",
    "AddPrinterW",
    "DllAllocSplStr",
    "ReplyPrinterChangeNotification",
    "AddPrinterDriverExW",
    "ConfigurePortW",
    "ReadPrinter",
    "FindClosePrinterChangeNotification",
    "PackStrings",
    "SetJobW",
    "SplQueryUserInfo",
    "SplPromptUIInUsersSession",
    "SplUnregisterForDeviceEvents",
    "UndoAlignKMPtr",
    "DeletePortW",
    "GetPrinterDriverExW",
    "GetShrinkedSize",
    "UpdatePrinterRegAll",
    "FormatRegistryKeyForPrinter",
    "AddPerMachineConnectionW",
    "SplUnregisterForSessionEvents",
    "EnumPrinterDriversW",
    "RouterInternalGetPrinterDriver",
    "SplCommitSpoolData",
    "AddJobW",
    "DeletePrintProcessorW",
    "MarshallUpStructure",
    "AbortPrinter",
    "DeletePrinterDriverW",
    "EnumPerMachineConnectionsW",
    "DeletePrinterDataW",
    "SpoolerFindFirstPrinterChangeNotification",
    "SetPrinterDataExW",
    "SpoolerRefreshPrinterChangeNotification",
    "EnumPrintProcessorDatatypesW",
    "AppendPrinterNotifyInfoData",
    "EnumPrinterDataExW",
    "DllFreeSplMem",
    "GetJobAttributes",
    "RouterFreeBidiResponseContainer",
    "DeletePrintProvidorW",
    "RevertToPrinterSelf",
    "EnumPrinterKeyW",
    "bGetDevModePerUser",
    "CallDrvDevModeConversion",
    "PrinterHandleRundown",
    "AddPrinterConnectionW",
    "PackStringToEOB",
    "RouterUnregisterForPrintAsyncNotifications",
    "AdjustPointersInStructuresArray",
    "BuildOtherNamesFromMachineName",
    "CacheCreateAndAddNode",
    "CacheCreateAndAddNodeWithIPAddresses",
    "DeletePerMachineConnectionW",
    "FlushPrinter",
    "MarshallUpStructuresArray",
    "SplInitializeWinSpoolDrv",
    "SplGetSpoolFileInfo",
    "PrinterMessageBoxW",
    "CacheIsNameInNodeList",
    "RouterBroadcastMessage",
    "DeletePrinterIC",
    "IsNameTheLocalMachineOrAClusterSpooler",
    "SplDriverUnloadComplete",
    "SplGetUserSidStringFromToken",
    "EnumPortsW",
    "OldGetPrinterDriverW",
    "AddMonitorW",
    "SplShutDownRouter",
    "SplIsSessionZero",
    "PartialReplyPrinterChangeNotification",
    "RouterAllocBidiMem",
    "SplReadPrinter",
    "ProvidorFindFirstPrinterChangeNotification",
    "AdjustPointers",
    "SpoolerFreePrinterNotifyInfo",
    "DeletePrinterDataExW",
    "DllFreeSplStr",
    "MarshallDownStructuresArray",
    "FreeOtherNames",
    "OpenPrinterExW",
    "EndPagePrinter",
    "GetPrinterDriverDirectoryW",
    "SpoolerFindNextPrinterChangeNotification",
    "GetPrinterDriverW",
    "AllowRemoteCalls",
    "GetPrinterW",
    "RouterFindCompatibleDriver",
    "ClosePrinter",
    "SetPrinterW",
    "ResetPrinterW",
    "bSetDevModePerUser",
    "WaitForSpoolerInitialization",
    "SetPortW",
    "RouterFreePrinterNotifyInfo",
    "MIDL_user_free1",
    "AlignKMPtr",
    "AddPrinterExW",
    "EnumPrintersW",
    "RouterAddPrinterConnection2",
    "RouterDeletePrinterDriverPackage",
    "OpenPrinterPort2W",
    "RouterRefreshPrinterChangeNotification",
    "FormatPrinterForRegistryKey",
    "SpoolerInit",
    "AddPrinterDriverW",
    "ReplyPrinterChangeNotificationEx",
    "CacheAddName",
    "AlignRpcPtr",
    "SplGetClientUserHandle",
    "GetPrintProcessorDirectoryW",
    "IsNamedPipeRpcCall",
    "RouterFindNextPrinterChangeNotification",
    "AddFormW",
    "DeletePrinter",
    "SendRecvBidiData",
    "DeletePrinterConnectionW",
    "InitializeRouter",
    "AddPrintProcessorW",
    "ImpersonatePrinterClient",
    "RouterFindFirstPrinterChangeNotification",
    "MakeOffset",
    "StartPagePrinter",
    "UpdatePrinterRegUser",
    "ReplyOpenPrinter",
    "RouterUploadPrinterDriverPackage",
    "SetFormW",
    "WaitForPrinterChange",
    "GetPrinterDataW",
    "GetNetworkId",
    "DllReallocSplMem",
    "RouterGetPrinterDriverPackagePath",
    "RouterReplyPrinter",
    "AddPrintProvidorW",
    "SplProcessSessionEvent",
    "ProvidorFindClosePrinterChangeNotification",
    "DllMain",
    "SplProcessPnPEvent",
    "SpoolerFindClosePrinterChangeNotification",
    "MakePTR",
    "OpenPrinter2W",
    "GetPrinterDataExW",
    "XcvDataW",
    "CheckLocalCall",
    "EnumMonitorsW",
    "RouterSpoolerSetPolicy",
    "ReallocSplMem",
    "UpdateBufferSize",
    "CacheDeleteNode",
    "EndDocPrinter",
    "ScheduleJob",
    "EnumPrintProcessorsW",
    "MIDL_user_allocate1",
    "SeekPrinter",
    "WritePrinter",
    "GetFormW",
    "CacheIsNameCluster",
    "RouterCorePrinterDriverInstalled",
    "ReplyClosePrinter",
    "SetPrinterDataW",
    "RouterCreatePrintAsyncNotificationChannel",
    "RouterGetCorePrinterDrivers",
    "GetJobW",
    "SplRegisterForDeviceEvents",
    "DeleteFormW",
    "SplIsUpgrade",
    "DeleteMonitorW",
    "EnumJobsW",
    "GetJobAttributesEx",
    "EnumFormsW",
    "PlayGdiScriptOnPrinterIC",
    "SplRegisterForSessionEvents",
    "RouterInstallPrinterDriverFromPackage",
    "RouterAllocPrinterNotifyInfo"
  ],
  "spopk.dll": [
    "Sysprep_Clean_Opk",
    "Sysprep_Specialize_Opk",
    "Sysprep_Generalize_Opk"
  ],
  "spp.dll": [
    "SppFreeClientPropArray",
    "SxTracerDebuggerBreak",
    "SppFreeExternalGroupPropArray",
    "SppFreeMetadataProp",
    "SppFreeBadWritersArray",
    "SxTracerShouldTrackFailure",
    "SxTracerGetThreadContextRetail",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "SppFreeGroupPropArray",
    "SxTracerGetThreadContextDebug",
    "DllUnregisterServer"
  ],
  "sppc.dll": [
    "SLUnloadApplicationPolicies",
    "SLGetPolicyInformationDWORD",
    "SLGetProductSkuInformation",
    "SLSetAuthenticationData",
    "SLUninstallLicense",
    "SLReArm",
    "SLGetAuthenticationResult",
    "SLInstallProofOfPurchaseEx",
    "SLGenerateOfflineInstallationIdEx",
    "SLPersistApplicationPolicies",
    "SLGetPKeyId",
    "SLUnregisterPlugin",
    "SLpTriggerServiceWorker",
    "SLInstallProofOfPurchase",
    "SLGetGenuineInformation",
    "SLpGenerateTokenActivationChallenge",
    "SLRegisterEvent",
    "SLGetLicenseInformation",
    "SLGetLicense",
    "SLGetPKeyInformation",
    "SLpDepositTokenActivationResponse",
    "SLGetLicenseFileId",
    "SLGetEncryptedPIDEx",
    "SLIsGenuineLocalEx",
    "SLSetCurrentProductKey",
    "SLConsumeRight",
    "SLUnregisterEvent",
    "SLpGetMachineUGUID",
    "SLGenerateOfflineInstallationId",
    "SLGetInstalledProductKeyIds",
    "SLGetApplicationInformation",
    "SLpGetGenuineBlob",
    "SLpVLActivateProduct",
    "SLPersistRTSPayloadOverride",
    "SLpGetMSPidInformation",
    "SLpGetTokenActivationGrantInfo",
    "SLOpen",
    "SLDepositMigrationBlob",
    "SLGatherMigrationBlob",
    "SLDepositOfflineConfirmationIdEx",
    "SLGetSLIDList",
    "SLSetGenuineInformation",
    "SLpGetLicenseAcquisitionInfo",
    "SLGetLicensingStatusInformation",
    "SLLoadApplicationPolicies",
    "SLGetPolicyInformation",
    "SLGetServiceInformation",
    "SLInstallLicense",
    "SLClose",
    "SLDepositOfflineConfirmationId",
    "SLGetApplicationPolicy",
    "SLFireEvent",
    "SLUninstallProofOfPurchase",
    "SLCallServer",
    "SLpAuthenticateGenuineTicketResponse",
    "SLpGetGenuineLocal",
    "SLRegisterPlugin",
    "SLpBeginGenuineTicketTransaction"
  ],
  "sppcext.dll": [
    "SLGetServerStatus",
    "SLFreeTokenActivationGrants",
    "SLFreeTokenActivationCertificates",
    "SLDepositTokenActivationResponse",
    "SLGetPackageProductKey",
    "SLGetGenuineInformationEx",
    "DllCanUnloadNow",
    "SLGetTokenActivationGrants",
    "SLInitialize",
    "SLAcquireGenuineTicketForAppId",
    "SLGetPackageProperties",
    "SLSignTokenActivationChallenge",
    "SLGenerateTokenActivationChallenge",
    "SLUninstallPackage",
    "SLAcquireGenuineTicket",
    "DllGetClassObject",
    "SLInstallPackage",
    "SLGetPackageToken",
    "SLGetTokenActivationCertificates",
    "SLActivateProduct",
    "SLGetReferralInformation"
  ],
  "sppcomapi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "sppcommdlg.dll": [
    "SLUXActivationWizard"
  ],
  "sppinst.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "sppnp.dll": [
    "Sysprep_Generalize_Pnp",
    "Sysprep_Generalize_Pnp_Drivers",
    "Sysprep_Respecialize_Pnp",
    "Sysprep_Specialize_Pnp"
  ],
  "sppobjs.dll": [
    "SppPluginCanUnloadNow",
    "SppPluginCreateInstance",
    "SppPluginShutdown",
    "SppPluginVersion",
    "SppPluginInitialize"
  ],
  "sppwinob.dll": [
    "SppPluginCanUnloadNow",
    "SppPluginCreateInstance",
    "SppPluginShutdown",
    "SppPluginVersion",
    "SppPluginInitialize"
  ],
  "sppwmi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "spwinsat.dll": [
    "Sysprep_Clean_WinSAT"
  ],
  "spwizeng.dll": [
    "private: __thiscall CCursor::CCursor(void)",
    "public: long __thiscall CGenericNavWindow::OnGetButtons(unsigned int,unsigned int,long,int &)",
    "public: class WizardStrategy & __thiscall WizardStrategy::operator=(class WizardStrategy const &)",
    "public: virtual struct HICON__ * __stdcall CWndObj::get_Cursor(void)",
    "public: int __thiscall CResourceModule::UnregisterObserver(struct IResourceModuleEvent *)",
    "public: void __stdcall CRichEditControl::SetTextColor(unsigned long)",
    "public: void __stdcall WizardPage::SetHWnd(struct HWND__ *)",
    "public: void __thiscall CCustomButtonEx::SetBackgroundHDC(struct HDC__ *)",
    "protected: virtual long __stdcall CWndObj::OnSettingChange(unsigned int,long)",
    "public: virtual void __thiscall LanguageSelectionDialogBase::OnResourceChanged(int &)",
    "public: __thiscall CCustomGraphicEx::CCustomGraphicEx(class CCustomGraphicEx const &)",
    "public: int __thiscall PIDStringView::InsertString(int,unsigned short const *)",
    "public: __thiscall CGenericNavWindow::CGenericNavWindow(class CGenericNavWindow const &)",
    "public: class CAttachDataDlg & __thiscall CAttachDataDlg::operator=(class CAttachDataDlg const &)",
    "public: __thiscall CDIB::~CDIB(void)",
    "public: __thiscall CAttachDataDlg::~CAttachDataDlg(void)",
    "public: long __thiscall LanguageSelectionDialogBase::OnLanguageChange(unsigned short,unsigned short,struct HWND__ *,int &)",
    "public: unsigned long __stdcall WizardPage::GetButtons(void)",
    "public: virtual class WizardPage * __stdcall WizardEx::Next(class WizardNode *)",
    "public: __thiscall ATL::CSimpleArray >::CSimpleArray >(class ATL::CSimpleArray > const &)",
    "private: void __thiscall WizardUI::RemoveFonts(void)",
    "const CDrawBackground::`vftable'",
    "public: unsigned short __thiscall ATL::CSimpleStringT::operator[](int)const",
    "public: void __stdcall WizardRoot::ReloadAllStandardButtons(void)",
    "public: virtual void __stdcall CWndObj::set_ClsStyle(unsigned long)",
    "public: __thiscall CAttachDataDlg::CAttachDataDlg(struct HINSTANCE__ *,struct HINSTANCE__ *)",
    "public: int __thiscall ATL::CStringT > >::Delete(int,int)",
    "public: long __thiscall CGenericNavWindow::OnDisplayChange(unsigned int,unsigned int,long,int &)",
    "public: unsigned short const * __thiscall MyString::GetString(void)",
    "public: virtual void __thiscall SimpleDialogBase::SetActive(int &)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,struct KEYBOARD * const &)",
    "public: int __stdcall CHighContrast::Initialize(void)",
    "public: long __thiscall WizardUI::SetUserSelectedLocale(unsigned short *)",
    "public: long __thiscall CGenericNavWindow::OnCancel(unsigned short,unsigned short,struct HWND__ *,int &)",
    "public: class ChoiceWizStrategy & __thiscall ChoiceWizStrategy::operator=(class ChoiceWizStrategy const &)",
    "public: virtual int __thiscall WizardHandler::NotifyWizFinish(int &)",
    "struct HFONT__ * __stdcall GetHwndFont(struct HWND__ *,struct tagLOGFONTW *)",
    "public: int & __thiscall WizardRoot::CommandHandled(void)",
    "public: __thiscall SimpleDialogBase::SimpleDialogBase(void)",
    "const AppWindow::`vftable'{for `IWndProp'}",
    "public: __thiscall CAnimationControl::CAnimationControl(class CAnimationControl const &)",
    "public: __thiscall NavigationStack::NavigationStack(class NavigationStack const &)",
    "public: __thiscall WizardUI::~WizardUI(void)",
    "public: long __thiscall CGenericNavWindow::OnDrawItem(unsigned int,unsigned int,long,int &)",
    "public: virtual __thiscall WizardCollection::~WizardCollection(void)",
    "public: class WizardRoot & __thiscall WizardRoot::operator=(class WizardRoot const &)",
    "public: void __stdcall AppWindow::GetNavRect(struct tagRECT *)",
    "public: virtual void __stdcall CWndObj::SetMdi(struct IWndObj *)",
    "public: void __stdcall CAnimationControl::SetTransparentColor(unsigned long)",
    "private: __thiscall Win32Navigator::Win32Navigator(void)",
    "protected: virtual long __stdcall AppWindow::OnSetBitmap(unsigned int,unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnQueryOpen(unsigned int,long)",
    "public: long __thiscall WizardUI::SetUserSelectedTargetLanguage(unsigned short *)",
    "public: virtual __thiscall CScreenText::~CScreenText(void)",
    "class ATL::CStringT > > __stdcall CStringGetWindowsDirectory(void)",
    "public: __thiscall ICreateNavbarWnd::ICreateNavbarWnd(class ICreateNavbarWnd const &)",
    "public: virtual __thiscall PIDStringView::~PIDStringView(void)",
    "public: class WizardRoot * __stdcall WizardPage::GetDialog(void)",
    "public: void __thiscall ATL::CSimpleStringT::ReleaseBuffer(int)",
    "public: unsigned short * __thiscall ATL::CSimpleStringT::GetBuffer(void)",
    "public: virtual int __thiscall LanguageSelectionDialogBase::IsWDS(void)",
    "private: long __thiscall CWndObj::v_DefWndProc(unsigned int,unsigned int,long)",
    "private: void __thiscall WizardUI::ShowWindows(void)",
    "public: __thiscall NavigationStack::NavigationStack(void)",
    "private: int __thiscall LanguageSelectionDialogBase::ShowError(struct HINSTANCE__ *,unsigned long)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimRight(unsigned short)",
    "public: class BranchWizStrategy & __thiscall BranchWizStrategy::operator=(class BranchWizStrategy const &)",
    "public: virtual __thiscall CCritSec::~CCritSec(void)",
    "public: virtual struct tagPOINT * __stdcall CWndObj::get_Position(void)",
    "public: int __thiscall CDIB::IsInitialized(void)",
    "public: __thiscall ICreateProgressWnd::ICreateProgressWnd(void)",
    "private: void __thiscall LanguageSelectionDialogBase::ReadSelectedLanguage(void)",
    "public: struct LOCALE * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(struct tagVARIANT const &)",
    "protected: virtual long __stdcall CWndObj::OnLButtonDblClk(unsigned int,long)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimRight(unsigned short const *)",
    "int __stdcall SetTextStyle(struct HWND__ *,int,int,int,int,int)",
    "public: struct KEYBOARD * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: unsigned short * __thiscall ATL::CSimpleStringT::LockBuffer(void)",
    "public: class CScreenText & __thiscall CScreenText::operator=(class CScreenText const &)",
    "public: struct LANGUAGE * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: virtual void __stdcall CWndObj::set_Size(struct tagSIZE *)",
    "public: virtual class WizardNode * __thiscall WizardBranch::CreateNode(unsigned int,class WizardEx *,class WizardUI *)",
    "public: __thiscall Navigator::Navigator(class Navigator const &)",
    "public: virtual __thiscall CCtlText::~CCtlText(void)",
    "protected: virtual long __stdcall AppWindow::OnClose(unsigned int,long)",
    "public: unsigned short * __thiscall WizardUI::GetUserSelectedLDId(void)",
    "public: int __thiscall ATL::CStringT > >::Remove(unsigned short)",
    "public: int __thiscall WizardUI::StartUI(class ProtoPageList const *)",
    "public: class WizardCollection & __thiscall WizardCollection::operator=(class WizardCollection const &)",
    "private: static class WizardUI * WizardUI::s_pWizardUI",
    "public: void __thiscall ATL::CStringT > >::AppendFormatV(unsigned short const *,char *)",
    "public: void __cdecl ATL::CStringT > >::FormatMessageW(unsigned int,...)",
    "public: int __stdcall AppWindow::Init(unsigned int,unsigned int,unsigned int)",
    "public: virtual struct HMENU__ * __stdcall CWndObj::get_Menu(void)",
    "public: __thiscall LanguageSelectionDialogBase::LanguageSelectionDialogBase(void)",
    "public: void __thiscall WizardUI::SetCancelNoShow(int)",
    "protected: virtual long __stdcall AppWindow::OnDestroy(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnCtlColorBtn(unsigned int,long)",
    "public: unsigned short * __thiscall ATL::CSimpleStringT::GetBuffer(int)",
    "public: __thiscall CAttachDataDlg::CAttachDataDlg(class CAttachDataDlg const &)",
    "public: struct HBRUSH__ * __stdcall CHighContrast::GetBkBrush(struct HBRUSH__ *)",
    "protected: virtual long __stdcall CWndObj::OnChar(unsigned int,long)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(unsigned short)",
    "public: class WizardNode * __stdcall NavigationStack::GetTop(void)",
    "public: unsigned long __stdcall CHighContrast::GetTextColor(unsigned long)",
    "public: virtual void __thiscall CDrawItem::ComposeOffscreen(struct HWND__ *)",
    "public: virtual void __stdcall CWndObj::Move(struct tagPOINT *)",
    "public: int __stdcall CCustomGraphicEx::Init(struct HWND__ *,unsigned int)",
    "private: int __thiscall WizardUI::IsFunctionKeys(struct HWND__ *,struct tagMSG *)",
    "public: int __thiscall CAnimation::Stop(void)",
    "public: virtual void __stdcall CWndObj::set_Template(unsigned long)",
    "public: unsigned int __stdcall WizardEx::GetMaxCount(void)",
    "public: void __thiscall ATL::CSimpleStringT::Truncate(int)",
    "protected: virtual long __stdcall CWndObj::OnUser(unsigned int,unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnGetTextLength(unsigned int,long)",
    "public: __thiscall IResourceModuleEvent::IResourceModuleEvent(void)",
    "public: __thiscall SummaryWizStrategy::SummaryWizStrategy(class WizardEx *)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Mid(int,int)const",
    "public: long __thiscall CGenericNavWindow::OnDestroy(unsigned int,unsigned int,long,int &)",
    "public: void * __thiscall WizardUI::GetUiMutex(void)",
    "public: struct IResourceModuleEvent & __thiscall IResourceModuleEvent::operator=(struct IResourceModuleEvent const &)",
    "public: __thiscall MyString::MyString(void)",
    "public: virtual __thiscall ScrWindow::~ScrWindow(void)",
    "const CScreenDIB::`vftable'",
    "public: __thiscall CDrawBackground::CDrawBackground(class CDrawBackground const &)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(char)",
    "private: virtual __thiscall CCursor::~CCursor(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned char const *)",
    "public: __thiscall CDrawItemComposite::CDrawItemComposite(void)",
    "public: virtual __thiscall WizardPage::~WizardPage(void)",
    "public: int (__stdcall*__stdcall WizardPage::GetWindowProc(void))(struct HWND__ *,unsigned int,unsigned int,long)",
    "protected: virtual long __stdcall AppWindow::OnSetButtons(unsigned int,unsigned int,long)",
    "public: __thiscall CCustomButtonEx::CCustomButtonEx(class CCustomButtonEx const &)",
    "public: virtual struct HWND__ * __stdcall CWndObj::get_hWnd(void)",
    "public: struct HWND__ * __thiscall WizardHandler::Hdlg(void)",
    "public: class WizardPage * & __thiscall WizardRoot::PageData(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned char const *,struct ATL::IAtlStringMgr *)",
    "protected: virtual long __stdcall AppWindow::OnCommand(unsigned int,long)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(char)",
    "public: __thiscall CResourceModule::~CResourceModule(void)",
    "public: __thiscall Wizard_PageDesciption::Wizard_PageDesciption(class Wizard_PageDesciption const &)",
    "public: virtual void __thiscall WizardDialogPost::SetActive(int &)",
    "public: int __thiscall CDIB::GetAllowMirror(void)",
    "protected: virtual long __stdcall CWndObj::OnSetCursor(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnQuit(unsigned int,long)",
    "public: virtual int __thiscall LanguageNeutralSelectionDialogBase::ProcessWindowMessage(struct HWND__ *,unsigned int,unsigned int,long,long &,unsigned long)",
    "private: virtual __thiscall Win32Navigator::~Win32Navigator(void)",
    "public: __thiscall WizardHandler::WizardHandler(void)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,struct KEYBOARD * const &)",
    "public: class Win32Navigator & __thiscall Win32Navigator::operator=(class Win32Navigator const &)",
    "public: virtual void __thiscall WizardRoot::SetActive(void)",
    "public: unsigned short const * __thiscall ATL::CSimpleStringT::GetString(void)const",
    "public: virtual unsigned long __stdcall CWndObj::get_WndID(void)",
    "public: virtual __thiscall NavWindow::~NavWindow(void)",
    "private: static long __stdcall LanguageNeutralSelectionDialogBase::LangNeutralLVSubProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: __thiscall CResourceModule::CResourceModule(struct HINSTANCE__ *,unsigned short const *)",
    "public: void __thiscall WizardUI::SetCanceled(int)",
    "protected: virtual long __stdcall CWndObj::OnNCHitTest(unsigned int,long)",
    "public: struct LANGUAGE * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "protected: virtual long __stdcall CWndObj::OnChildActivate(unsigned int,long)",
    "public: __thiscall LanguageNeutralSelectionDialogBase::LanguageNeutralSelectionDialogBase(void)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator=(unsigned short const *)",
    "public: void __thiscall CDrawItem::SetPosition(unsigned long,unsigned long)",
    "public: virtual void __stdcall CWndObj::set_Alpha(unsigned long)",
    "public: __thiscall PageContainer::PageContainer(void)",
    "const WizardEx::`vftable'{for `INavigationNode'}",
    "protected: virtual long __stdcall CWndObj::OnRegistered(unsigned int,unsigned int,long)",
    "public: virtual void __thiscall WizardRoot::OnResourceChanged(void)",
    "public: class WizardPage * __thiscall WizardUI::GetWizardPageWithPageIndex(int)",
    "protected: virtual long __stdcall CWndObj::OnCaptureChanged(unsigned int,long)",
    "private: unsigned int __thiscall LanguageSelectionDialogBase::PopulateLayeredDriverList(void)",
    "private: unsigned int __thiscall LanguageSelectionDialogBase::PopulateKeyboardList(void)",
    "protected: virtual long __stdcall CWndObj::OnAskCBFormatName(unsigned int,long)",
    "public: class CCustomButtonEx * __stdcall WizardRoot::InitStandardButton(unsigned int)",
    "private: static struct ATL::CStringData * __cdecl ATL::CSimpleStringT::CloneData(struct ATL::CStringData *)",
    "public: int __stdcall CCtlText::Init(struct HWND__ *,unsigned int)",
    "public: int __thiscall ATL::CStringT > >::FindOneOf(unsigned short const *)const",
    "public: long __thiscall CGenericNavWindow::OnBack(unsigned short,unsigned short,struct HWND__ *,int &)",
    "public: unsigned short const * __stdcall Wizard_PageDesciption::GetResourceLocName(void)",
    "public: virtual int __thiscall CDrawBackground::Draw(struct HDC__ *)",
    "public: void __stdcall PageContainer::SetCurrentPage(int)",
    "public: int __thiscall ATL::CSimpleArray >::Add(struct LOCALE * const &)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short const *,int)",
    "public: int __stdcall PageContainer::IsDialogMessageW(struct tagMSG *)",
    "long __stdcall TextFitsInWindow(struct HWND__ *,class ATL::CStringT > >)",
    "public: struct HBITMAP__ * __stdcall CHighContrast::LoadBitmapW(struct HINSTANCE__ *,unsigned int,int,int,unsigned int)",
    "public: virtual int (__stdcall*__thiscall WizardRoot::GetWindowProc(void))(struct HWND__ *,unsigned int,unsigned int,long)",
    "private: void __thiscall CGenericNavWindow::InitDialog(struct HWND__ *)",
    "public: __thiscall WizardVariation::WizardVariation(class WizardVariation const &)",
    "public: void __thiscall WizardUI::SetAppWindow(class AppWindow *)",
    "protected: virtual long __stdcall CWndObj::OnEraseBkGnd(unsigned int,long)",
    "public: __thiscall ATL::CSimpleStringT::operator unsigned short const *(void)const",
    "private: void __thiscall WizardUI::DestroyWindows(void)",
    "public: void __stdcall CRichEditControl::InitializeWithMsftEdit(struct HWND__ *)",
    "const CHighContrast::`vftable'",
    "public: __thiscall CWndObj::CWndObj(void)",
    "public: int __thiscall ATL::CStringT > >::Collate(unsigned short const *)const",
    "public: virtual unsigned long __stdcall CWndObj::Release(void)",
    "protected: virtual long __stdcall CWndObj::OnRenderAllFormats(unsigned int,long)",
    "public: class CDrawItem & __thiscall CDrawItem::operator=(class CDrawItem const &)",
    "public: void __cdecl ATL::CStringT > >::FormatMessageW(unsigned short const *,...)",
    "public: struct ATL::IAtlStringMgr * __thiscall ATL::CStringT > >::GetManager(void)const",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::MakeUpper(void)",
    "public: void __stdcall WizardNode::SetIndex(unsigned int)",
    "public: struct HWND__ * __stdcall PageContainer::GetPageHwndFromPageIndex(int)",
    "protected: virtual long __stdcall CWndObj::OnRButtonUp(unsigned int,long)",
    "public: void __thiscall CCustomButtonEx::ReloadCaptions(struct HINSTANCE__ *)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(struct tagVARIANT const &)",
    "public: unsigned short * __thiscall WizardUI::GetUserSelectedUILanguage(void)",
    "protected: virtual long __stdcall CWndObj::OnTimer(unsigned int,long)",
    "public: __thiscall LanguageNeutralSelectionDialogBase::LanguageNeutralSelectionDialogBase(class LanguageNeutralSelectionDialogBase const &)",
    "public: __thiscall SimpleSize::SimpleSize(int,int)",
    "public: virtual void __stdcall CWndObj::add_WexStyle(unsigned long)",
    "public: class WizardNode * __stdcall NavigationStack::GetElement(int)",
    "public: void __stdcall WizardEx::SetPageList(class WizardNode * *)",
    "private: int __thiscall PIDStringView::v_MakePidString(void)",
    "public: class WizardNode * __stdcall NavigationStack::Pop(void)",
    "public: struct LOCALE * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: __thiscall ProtoPageDimensions::ProtoPageDimensions(void)",
    "public: __thiscall WizardStrategy::WizardStrategy(class WizardStrategy const &)",
    "public: void __thiscall ProtoPageDimensions::PseudoToScreenCoordinate(int &,int &)",
    "public: int __stdcall NavigationStack::GetSize(void)",
    "public: __thiscall WizardHandler::WizardHandler(class WizardHandler const &)",
    "private: static class CHighContrast * CHighContrast::m_hcInstance",
    "protected: virtual long __stdcall CWndObj::OnCtlColorScrollbar(unsigned int,long)",
    "const NavigationStack::`vftable'",
    "public: struct HINSTANCE__ * __thiscall WizardUI::GetResourceInstanceLoc(void)",
    "protected: virtual long __stdcall AppWindow::OnGetButtons(unsigned int,unsigned int,long)",
    "public: class WizardPage * __thiscall WizardHandler::PageData(void)",
    "public: virtual void __stdcall CWndObj::set_Type(unsigned long)",
    "public: virtual void __stdcall CWndObj::clr_WexStyle(unsigned long)",
    "public: class NavigationStack & __thiscall NavigationStack::operator=(class NavigationStack const &)",
    "public: int __thiscall CCursor::EnteringTrackedWnd(struct HWND__ *)",
    "public: virtual int __stdcall CWndObj::Post(unsigned int,unsigned int,long)",
    "protected: virtual long __stdcall AppWindow::OnActivate(unsigned int,long)",
    "public: void __stdcall PageContainer::TearDown(void)",
    "public: unsigned long __thiscall WizardUI::WaitForSingleObjectMessageSafeEx(void *,unsigned long,int)",
    "protected: virtual long __stdcall CWndObj::OnPaintClipboard(unsigned int,long)",
    "protected: static int VariationWizStrategy::m_CurrentVariation",
    "public: int __thiscall CAnimation::Start(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char const *,int,struct ATL::IAtlStringMgr *)",
    "public: unsigned long __thiscall CDIB::GetTransparentColor(void)",
    "public: int __thiscall ATL::CSimpleArray >::Add(unsigned short * const &)",
    "public: int __thiscall ATL::CSimpleStringT::GetLength(void)const",
    "public: long __thiscall LanguageSelectionDialogBase::OnInitDialog(unsigned int,unsigned int,long,int &)",
    "public: void __thiscall ATL::CSimpleStringT::UnlockBuffer(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(char)",
    "public: static int __cdecl ATL::CSimpleStringT::StringLength(unsigned short const *)",
    "public: unsigned short const * __thiscall PIDStringView::GetPidStr(void)",
    "public: class ScrWindow * __thiscall WizardUI::GetScrWindow(void)",
    "public: class CHighContrast & __thiscall CHighContrast::operator=(class CHighContrast const &)",
    "public: static unsigned short __stdcall WizardUI::GetAppBitmap(void)",
    "protected: virtual long __stdcall CWndObj::OnChangeCBChain(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnDestroyClipboard(unsigned int,long)",
    "public: int __thiscall WizardUI::GetShowScreenWindow(void)",
    "private: static unsigned long __stdcall WizardUI::WizardThreadProc(void *)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(struct LANGUAGE * const &)",
    "public: virtual int __thiscall WizardHandler::NotifyWizCancel(int &)",
    "public: unsigned short * __thiscall WizardUI::GetUserSelectedHideOOBELang(void)",
    "public: class WizardDialogPost & __thiscall WizardDialogPost::operator=(class WizardDialogPost const &)",
    "private: int __thiscall WizardUI::InitFonts(struct HINSTANCE__ *)",
    "public: struct HINSTANCE__ * __stdcall WizardPage::GetResourceInstanceNonLoc(void)",
    "public: __thiscall WizardBranch::WizardBranch(unsigned int,class Wiz_Node * *)",
    "public: virtual unsigned short const * __stdcall CWndObj::get_Class(void)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator=(class ATL::CSimpleStringT const &)",
    "public: void __stdcall WizardRoot::MyPropSheet_SetWizButtons(unsigned long)",
    "public: void __thiscall WizardUI::RepositionAllWindows(unsigned int,long)",
    "public: __thiscall SimpleWizStrategy::SimpleWizStrategy(class WizardEx *)",
    "public: void __thiscall CAttachDataDlg::DestroyDialog(unsigned int,unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnDeviceChange(unsigned int,long)",
    "public: unsigned long __stdcall Wizard_PageDesciption::GetTitle(void)",
    "const CCursor::`vftable'",
    "protected: virtual long __stdcall CWndObj::OnApp(unsigned int,unsigned int,long)",
    "public: long __thiscall WizardDialogPre::OnInitDialog(unsigned int,unsigned int,long,int &)",
    "public: __thiscall WizardUI::WizardUI(void)",
    "int __stdcall dlgProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "private: static long (__stdcall* LanguageNeutralSelectionDialogBase::s_OldLangNeutralLVProc)(struct HWND__ *,unsigned int,unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnActivateApp(unsigned int,long)",
    "public: __thiscall ProtoPageList::ProtoPageList(class WizardDesciption *,unsigned long,unsigned long,unsigned long,int,class ICreateProgressWnd *,int,struct tagSIZE *,class ICreateNavbarWnd *,struct ProtoPageDimensions,unsigned long,unsigned long,int)",
    "private: int __thiscall CWndObj::v_Unregister(void)",
    "public: long __thiscall LanguageNeutralSelectionDialogBase::OnKeyUp(unsigned int,unsigned int,long,int &)",
    "const WizardRoot::`vftable'",
    "public: static void __stdcall CAttachDataDlg::InitDialog(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: unsigned int __stdcall WizardNode::GetPageIndex(void)",
    "public: void __thiscall CWndObj::WMFree(void)",
    "protected: virtual long __stdcall CWndObj::OnSizing(unsigned int,long)",
    "public: int __thiscall ATL::CStringT > >::LoadStringW(struct HINSTANCE__ *,unsigned int)",
    "public: long __thiscall WizardDialogPre::OnDestroy(unsigned int,unsigned int,long,int &)",
    "protected: virtual long __stdcall CWndObj::OnShowWindow(unsigned int,long)",
    "public: int __thiscall ATL::CStringT > >::Find(unsigned short,int)const",
    "private: static unsigned long __stdcall CRichEditControl::EditStreamCallbackUnicode(unsigned long,unsigned char *,long,long *)",
    "const CAnimation::`vftable'",
    "public: __thiscall WizardEx::WizardEx(class WizardEx const &)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Tokenize(unsigned short const *,int &)const",
    "public: static void __stdcall CCursor::FreeInstance(void)",
    "protected: virtual long __stdcall CWndObj::OnExitSizeMove(unsigned int,long)",
    "const WizardCollection::`vftable'",
    "protected: virtual long __stdcall CWndObj::OnMoving(unsigned int,long)",
    "public: class SimpleWizStrategy & __thiscall SimpleWizStrategy::operator=(class SimpleWizStrategy const &)",
    "public: static void __stdcall CCustomButtonEx::Destroy(class CCustomButtonEx *)",
    "public: class Wiz_Node & __thiscall Wiz_Node::operator=(class Wiz_Node const &)",
    "public: void __thiscall CDrawItem::SetHwndDest(struct HWND__ *)",
    "public: static class CCustomButtonEx * __stdcall CCustomButtonEx::Create(struct HINSTANCE__ *,struct HINSTANCE__ *,struct HWND__ *,struct HDC__ *,struct HWND__ *)",
    "class ATL::CStringT > > __stdcall CStringGetWindowText(struct HWND__ *)",
    "protected: virtual long __stdcall CWndObj::OnActivate(unsigned int,long)",
    "public: __thiscall ATL::CSimpleArray >::~CSimpleArray >(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char const *,int)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(class ATL::CSimpleStringT const &)",
    "public: static long __stdcall CAttachDataDlg::WindowProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: struct HWND__ * & __thiscall CGenericNavWindow::Hdlg(void)",
    "public: static void __cdecl ATL::CStringT > >::Construct(class ATL::CStringT > > *)",
    "public: virtual __thiscall CWndObj::~CWndObj(void)",
    "public: virtual class WizardPage * __thiscall VariationWizStrategy::NextPage(int,class WizardNode *)",
    "public: virtual int __stdcall CWndObj::Init(struct IWndObj *)",
    "public: class ATL::CSimpleArray > & __thiscall ATL::CSimpleArray >::operator=(class ATL::CSimpleArray > const &)",
    "private: void __thiscall WizardUI::DestroyNavWindow(void)",
    "public: int __thiscall WizardUI::AddPage(class WizardPage *)",
    "public: virtual void __thiscall CCritSec::Enter(void)",
    "public: int __thiscall ATL::CSimpleArray >::Find(struct KEYBOARD * const &)const",
    "void __stdcall SetDlgItemTextFromResID(struct HWND__ *,unsigned int,struct HINSTANCE__ *,unsigned int)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short const *)",
    "void __stdcall ShowReadMoreWnd(struct HINSTANCE__ *,struct HWND__ *,unsigned int,unsigned int,unsigned int)",
    "public: int __thiscall ATL::CStringT > >::LoadStringW(struct HINSTANCE__ *,unsigned int,unsigned short)",
    "public: int __thiscall CDIB::CreateFromHwnd(struct HWND__ *)",
    "public: class LanguageNeutralSelectionDialogBase & __thiscall LanguageNeutralSelectionDialogBase::operator=(class LanguageNeutralSelectionDialogBase const &)",
    "public: __thiscall WizardPage::WizardPage(unsigned int,unsigned int,class WizardEx *,class WizardUI *)",
    "protected: static void __cdecl ATL::CSimpleStringT::ThrowMemoryException(void)",
    "public: long __thiscall LanguageNeutralSelectionDialogBase::OnCustomDraw(int,struct tagNMHDR *,int &)",
    "public: struct KEYBOARD * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: struct SimpleSize __thiscall ProtoPageDimensions::GetAppWindowOffset(void)",
    "public: void __thiscall ATL::CSimpleStringT::SetString(unsigned short const *,int)",
    "public: virtual void __stdcall CWndObj::set_Cursor(struct HICON__ *)",
    "protected: virtual long __stdcall CWndObj::OnVScrollClipboard(unsigned int,long)",
    "const CCtlText::`vftable'",
    "public: virtual int __thiscall WizardRoot::NotifyWizFinish(void)",
    "public: long __thiscall SimpleDialogBase::OnCtlColorStatic(unsigned int,unsigned int,long,int &)",
    "public: class WizardPage * __thiscall WizardUI::GetCurrentPage(void)",
    "public: struct IResourceModuleEvent * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: __thiscall CAnimation::CAnimation(class CAnimation const &)",
    "public: class AppWindow * __thiscall WizardUI::GetAppWindow(void)",
    "public: virtual void __thiscall WizardHandler::SetActive(int &)",
    "public: int __thiscall WizardUI::Initialize(class CResourceModule *,class CResourceModule *)",
    "public: void __thiscall ATL::CSimpleStringT::SetString(unsigned short const *)",
    "public: __thiscall CRichEditControl::CRichEditControl(void)",
    "private: int __thiscall CWndObj::v_WndCreate(void)",
    "public: __thiscall LanguageNeutralSelectionDialogBase::~LanguageNeutralSelectionDialogBase(void)",
    "public: struct HWND__ * & __thiscall WizardRoot::Hdlg(void)",
    "public: int __thiscall WizardHandler::CanPageBeActivatedWrapper(enum Direction,int *)",
    "struct HFONT__ * __stdcall CreateModifiedFont(struct HDC__ *,struct tagLOGFONTW *,int,int,int,int)",
    "int __stdcall utlGetCtlRect(struct HWND__ *,struct HWND__ *,struct tagRECT *)",
    "public: int __thiscall CAnimation::Load(struct HINSTANCE__ *,unsigned int,unsigned long,int,long,long)",
    "private: static void __stdcall WizardUI::SetWizUI(class WizardUI *)",
    "public: void __stdcall PageContainer::SetFontSize(int)",
    "public: struct SimpleSize __thiscall ProtoPageDimensions::GetScaledBackgroundBitmapSize(void)",
    "public: int __thiscall CResourceModuleFactory::ResetLanguage(void)",
    "public: virtual int __thiscall SimpleDialogBase::ProcessWindowMessage(struct HWND__ *,unsigned int,unsigned int,long,long &,unsigned long)",
    "public: int __thiscall CDIB::LoadScaled(struct HINSTANCE__ *,unsigned int,long,long,unsigned long,int)",
    "public: virtual unsigned long __stdcall CWndObj::get_BackColor(void)",
    "protected: virtual long __stdcall CWndObj::OnEnable(unsigned int,long)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(struct ATL::IAtlStringMgr *)",
    "public: class WizardNode & __thiscall WizardNode::operator=(class WizardNode const &)",
    "public: virtual __thiscall WizardNode::~WizardNode(void)",
    "private: void __thiscall PageContainer::v_SetCurrentPageInternal(int,int)",
    "public: void __stdcall WizardEx::SetMaxCount(unsigned int)",
    "public: __thiscall PIDStringView::PIDStringView(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(unsigned short)",
    "const CScreenText::`vftable'",
    "public: virtual int __thiscall LanguageNeutralSelectionDialogBase::CanPageBeActivated(enum Direction,int *)",
    "private: void __thiscall LanguageSelectionDialogBase::ReadSelectedLayeredDriver(void)",
    "public: virtual unsigned long __stdcall CWndObj::get_TextColor(void)",
    "public: virtual int __thiscall LanguageSelectionDialogBase::ProcessWindowMessage(struct HWND__ *,unsigned int,unsigned int,long,long &,unsigned long)",
    "public: void __thiscall WizardUI::SleepMessageSafe(unsigned long)",
    "const WizardDesciption::`vftable'",
    "public: __thiscall SimpleDialogBase::SimpleDialogBase(class SimpleDialogBase const &)",
    "private: void __thiscall ATL::CSimpleStringT::SetLength(int)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(struct tagVARIANT const &)",
    "public: __thiscall CDrawBackground::CDrawBackground(void)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::SpanIncluding(unsigned short const *)const",
    "public: int __thiscall WizardUI::EndUI(void)",
    "public: static class CHighContrast * __stdcall CHighContrast::GetInstance(void)",
    "public: void __thiscall CCursor::SetCursorWait(void)",
    "class ATL::CStringT > > __stdcall CStringGetModuleFileName(struct HINSTANCE__ *)",
    "public: __thiscall WizardDialogPre::WizardDialogPre(void)",
    "public: void __thiscall CWndObj::WMInit(struct HWND__ *)",
    "public: __thiscall WizardCollection::WizardCollection(class WizardCollection const &)",
    "public: static void __cdecl ATL::CSimpleStringT::CopyCharsOverlapped(unsigned short *,unsigned short const *,int)",
    "public: virtual class WizardPage * __stdcall WizardEx::Back(class WizardNode *)",
    "public: virtual class WizardPage * __thiscall BranchWizStrategy::NextPage(int,class WizardNode *)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Left(int)const",
    "protected: virtual long __stdcall CWndObj::OnRenderFormat(unsigned int,long)",
    "private: void __thiscall WizardUI::DestroyPropertySheet(void)",
    "protected: virtual long __stdcall CWndObj::OnNCCreate(unsigned int,long)",
    "public: class CCtlText & __thiscall CCtlText::operator=(class CCtlText const &)",
    "private: static struct INavigator * Navigator::instance",
    "public: __thiscall ATL::CSimpleArray >::CSimpleArray >(void)",
    "public: __thiscall CCritSec::CCritSec(class CCritSec const &)",
    "public: class CCritSec & __thiscall CCritSec::operator=(class CCritSec const &)",
    "public: __thiscall NavWindow::NavWindow(class AppWindow *)",
    "public: long __thiscall WizardUI::SetUserSelectedKeyboardType(unsigned short *)",
    "public: static struct ProtoPageDimensions * __stdcall WizardUI::GetAppDimensions(void)",
    "public: virtual __thiscall BranchWizStrategy::~BranchWizStrategy(void)",
    "public: virtual int __stdcall CWndObj::IsDlgMsg(struct tagMSG *)",
    "private: class ATL::CStringT > > __thiscall LanguageSelectionDialogBase::GetSelectedLanguage(void)",
    "public: virtual int __thiscall CAttachDataDlg::ProcessWindowMessage(struct HWND__ *,unsigned int,unsigned int,long,long &,unsigned long)",
    "public: long __thiscall WizardUI::SetUserSelectedUILanguage(unsigned short *)",
    "public: class LanguageSelectionDialogBase & __thiscall LanguageSelectionDialogBase::operator=(class LanguageSelectionDialogBase const &)",
    "public: class WizardBranch & __thiscall WizardBranch::operator=(class WizardBranch const &)",
    "public: static class CCustomButtonEx * __stdcall CCustomButtonEx::CreateIndirect(struct HINSTANCE__ *,struct HINSTANCE__ *,struct HWND__ *,unsigned int,struct _Button_Data * const)",
    "public: struct LOCALE * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: int __thiscall ATL::CSimpleArray >::Find(struct LOCALE * const &)const",
    "public: void __stdcall WizardPage::Initialize(unsigned long,unsigned long,unsigned long,class WizardRoot *,unsigned short const *,unsigned short const *)",
    "public: void __stdcall WizardRoot::DestroyStandardButton(class CCustomButtonEx *)",
    "public: void __thiscall CDIB::SetAllowMirror(int)",
    "public: int __thiscall ATL::CStringT > >::GetEnvironmentVariableW(unsigned short const *)",
    "public: virtual unsigned short const * __stdcall CWndObj::get_Title(void)",
    "public: void __stdcall WizardEx::SetPageListItem(int,class WizardNode *)",
    "protected: virtual long __stdcall AppWindow::OnWmxClose(unsigned int,unsigned int,long)",
    "protected: virtual long __stdcall AppWindow::OnBack(unsigned int,unsigned int,long)",
    "protected: virtual long __stdcall ScrWindow::OnCommand(unsigned int,long)",
    "private: void __thiscall CAnimationControl::v_Clr(unsigned long)",
    "public: virtual void __stdcall Win32Navigator::RequestGoNext(int)",
    "const WizardSummary::`vftable'",
    "public: struct HDC__ * __stdcall ScrWindow::GetScrImage(void)",
    "public: virtual int __thiscall WizardRoot::CanPageBeActivated(enum Direction,int *)",
    "protected: virtual long __stdcall ScrWindow::OnSetCursor(unsigned int,long)",
    "public: unsigned int __stdcall WizardNode::GetIndex(void)",
    "void __stdcall SPWE_CloseCurrentMessageBox(void)",
    "public: unsigned long __thiscall WizardUI::WaitForSingleObjectMessageSafe(void *,unsigned long)",
    "public: unsigned short const * __stdcall WizardPage::GetResourceStringLoc(void)",
    "public: static void __cdecl ATL::CSimpleStringT::CopyChars(unsigned short *,unsigned short const *,int)",
    "public: int __thiscall ATL::CStringT > >::Insert(int,unsigned short)",
    "public: long __thiscall CGenericNavWindow::OnCtlColor(unsigned int,unsigned int,long,int &)",
    "protected: virtual long __stdcall CWndObj::OnDeadChar(unsigned int,long)",
    "public: void __thiscall CAnimation::SetTransparentColor(unsigned long)",
    "public: class CCustomButtonEx * __thiscall WizardHandler::ButtonContinue(void)",
    "public: class ICreateNavbarWnd & __thiscall ICreateNavbarWnd::operator=(class ICreateNavbarWnd const &)",
    "public: virtual void __stdcall CWndObj::set_WndStyle(unsigned long)",
    "public: virtual int __thiscall WizardRoot::NotifyWizBack(void)",
    "void __stdcall ShowReadMoreWndHtml(struct HINSTANCE__ *,struct HWND__ *,unsigned int,unsigned short const *,unsigned int)",
    "public: void __stdcall CRichEditControl::SetTextNoFormat(unsigned short const *)",
    "const CWndObj::`vftable'{for `IWndProp'}",
    "public: __thiscall CDrawItemComposite::CDrawItemComposite(class CDrawItemComposite const &)",
    "public: __thiscall WizardDialogPost::WizardDialogPost(class WizardDialogPost const &)",
    "public: __thiscall IResourceModuleEvent::IResourceModuleEvent(struct IResourceModuleEvent const &)",
    "protected: virtual long __stdcall CWndObj::OnPowerBroadcast(unsigned int,long)",
    "public: class MyString & __thiscall MyString::operator=(class MyString const &)",
    "public: class WizardEx & __thiscall WizardEx::operator=(class WizardEx const &)",
    "unsigned long __cdecl FormatVarMessage(unsigned long,void const *,unsigned long,unsigned long,unsigned short *,unsigned long,...)",
    "public: int __thiscall CDrawItem::Draw(struct HWND__ *)",
    "const CAttachDataDlg::`vftable'",
    "const WizardVariation::`vftable'",
    "public: class NavWindow & __thiscall NavWindow::operator=(class NavWindow const &)",
    "protected: virtual long __stdcall CWndObj::OnDestroy(unsigned int,long)",
    "private: __thiscall CHighContrast::CHighContrast(void)",
    "private: unsigned long __thiscall CHighContrast::v_GetHCBkColor(void)",
    "protected: virtual long __stdcall AppWindow::OnSetCursor(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnLButtonUp(unsigned int,long)",
    "public: virtual class WizardPage * __stdcall Navigator::Next(class WizardNode *)",
    "public: virtual int __stdcall WizardPage::Reset(void)",
    "public: virtual int __thiscall CDrawItemComposite::Draw(struct HDC__ *)",
    "public: int __thiscall ATL::CStringT > >::Insert(int,unsigned short const *)",
    "protected: virtual long __stdcall CWndObj::OnHotKey(unsigned int,long)",
    "public: static long __stdcall CGenericNavWindow::WindowProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: virtual class WizardPage * __stdcall WizardEx::GetPage(void)",
    "public: __thiscall CScreenDIB::CScreenDIB(class CScreenDIB const &)",
    "public: class CCustomButtonEx & __thiscall CCustomButtonEx::operator=(class CCustomButtonEx const &)",
    "private: unsigned long __thiscall CDIB::StorageWidthBytes(void)const",
    "private: void __thiscall AppWindow::v_InitSurface(unsigned int)",
    "private: void __thiscall CCtlText::v_Clr(unsigned long)",
    "public: virtual void __stdcall CWndObj::Show(unsigned long)",
    "public: class CCursor & __thiscall CCursor::operator=(class CCursor const &)",
    "public: void __stdcall WizardRoot::Reload(void)",
    "public: int __stdcall PageContainer::GetCurrentPageIndex(void)",
    "public: int __thiscall MyString::InsertChar(int,unsigned short)",
    "public: long __thiscall WizardDialogPost::OnCtlColorStatic(unsigned int,unsigned int,long,int &)",
    "public: virtual void __thiscall CScreenText::ComposeOffscreen(struct HWND__ *)",
    "public: virtual __thiscall WizardDesciption::~WizardDesciption(void)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,unsigned short * const &)",
    "public: virtual void __stdcall CWndObj::set_Class(unsigned short const *)",
    "public: class CCustomButtonEx * & __thiscall WizardRoot::ButtonFinish(void)",
    "public: virtual __thiscall CAnimation::~CAnimation(void)",
    "private: void __thiscall WizardUI::CreateAppWindow(void)",
    "public: class CScreenDIB & __thiscall CScreenDIB::operator=(class CScreenDIB const &)",
    "public: int __thiscall CScreenText::Init(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimRight(void)",
    "public: class SummaryWizStrategy & __thiscall SummaryWizStrategy::operator=(class SummaryWizStrategy const &)",
    "public: virtual void __thiscall WizardRoot::KillActive(void)",
    "public: virtual void __thiscall WizardDialogPre::SetActive(int &)",
    "const AppWindow::`vftable'{for `IWndObj'}",
    "public: long __thiscall LanguageSelectionDialogBase::OnCommandContinue(unsigned short,unsigned short,struct HWND__ *,int &)",
    "protected: virtual long __stdcall CWndObj::OnDevmodeChange(unsigned int,long)",
    "const NavWindow::`vftable'",
    "public: __thiscall WizardSummary::WizardSummary(unsigned int,class Wiz_Node * *)",
    "public: int __thiscall ProtoPageDimensions::GetNavBarHeight(void)",
    "public: struct IResourceModuleEvent * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: virtual void __stdcall CWndObj::Show(void)",
    "private: struct ATL::CStringData * __thiscall ATL::CSimpleStringT::GetData(void)const",
    "protected: virtual long __stdcall CWndObj::OnClose(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnKillFocus(unsigned int,long)",
    "public: static class CCursor * __stdcall CCursor::GetInstance(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char const *)",
    "int __stdcall SPWE_MessageBox(struct HWND__ *,struct HINSTANCE__ *,unsigned short const *,unsigned short const *,unsigned int,int (__stdcall*)(struct HWND__ *,unsigned int,unsigned int,long),unsigned int,int)",
    "private: void __thiscall CWndObj::v_ClrProps(void)",
    "private: virtual __thiscall Navigator::~Navigator(void)",
    "protected: virtual long __stdcall CWndObj::OnSetRedraw(unsigned int,long)",
    "public: __thiscall CScreenText::CScreenText(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short const *,struct ATL::IAtlStringMgr *)",
    "public: static int __stdcall CResourceModule::ChangeUiLanguage(unsigned short const *)",
    "public: unsigned int __thiscall CDIB::GetBitsPerPixel(void)",
    "public: virtual void __stdcall CWndObj::set_Instance(struct HINSTANCE__ *)",
    "public: void __thiscall CCursor::SetCursorStateForButton(unsigned int)",
    "private: void __thiscall ScrWindow::v_InitSurface(void)",
    "public: __thiscall WizardBranch::WizardBranch(class WizardBranch const &)",
    "int __stdcall MessageBoxFromMessage(struct HINSTANCE__ *,struct HWND__ *,unsigned int,unsigned int,unsigned int)",
    "protected: virtual long __stdcall CWndObj::OnExitMenuLoop(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnParentNotify(unsigned int,long)",
    "public: virtual int __thiscall WizardDialogPost::ProcessWindowMessage(struct HWND__ *,unsigned int,unsigned int,long,long &,unsigned long)",
    "public: class WizardHandler & __thiscall WizardHandler::operator=(class WizardHandler const &)",
    "const Win32Navigator::`vftable'",
    "public: int __stdcall PageContainer::GetMaxPageIndex(void)",
    "protected: virtual long __stdcall CWndObj::OnInitDialog(unsigned int,long)",
    "const SimpleDialogBase::`vftable'",
    "const PageContainer::`vftable'",
    "private: int __thiscall CCtlText::v_Chk(unsigned long)",
    "private: void __thiscall WizardUI::CreateScrWindow(void)",
    "private: void __thiscall CDIB::MakeFullyOpaque(void)",
    "public: virtual int __thiscall LanguageNeutralSelectionDialogBase::ShowLanguageNeutralSelectionUI(void)",
    "const CDrawItem::`vftable'",
    "const SummaryWizStrategy::`vftable'",
    "protected: virtual long __stdcall CWndObj::OnContextMenu(unsigned int,long)",
    "public: void __stdcall CRichEditControl::Initialize(struct HWND__ *,unsigned short const *)",
    "public: void __thiscall WizardHandler::Init(class WizardRoot *)",
    "public: __thiscall CCtlText::CCtlText(void)",
    "protected: static void __cdecl ATL::CSimpleStringT::Concatenate(class ATL::CSimpleStringT &,unsigned short const *,int,unsigned short const *,int)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(char const *)",
    "const WizardBranch::`vftable'",
    "private: int __thiscall CDIB::DrawAlphaBlended(struct HDC__ *,int,int,struct tagRECT)",
    "protected: virtual long __stdcall ScrWindow::OnCreate(unsigned int,long)",
    "public: __thiscall ProtoPageDimensions::ProtoPageDimensions(struct SimpleRect,struct SimpleSize,int,int,struct SimpleSize,struct SimpleSize,float,float)",
    "public: unsigned long __stdcall WizardPage::GetTemplate(void)",
    "public: __thiscall LanguageSelectionDialogBase::LanguageSelectionDialogBase(class LanguageSelectionDialogBase const &)",
    "const CGenericNavWindow::`vftable'",
    "public: virtual unsigned long __stdcall CWndObj::get_Alpha(void)",
    "public: struct ProtoPageDimensions & __thiscall ProtoPageDimensions::operator=(struct ProtoPageDimensions const &)",
    "void __stdcall ShowMigrationReport(struct HINSTANCE__ *,struct HWND__ *,unsigned int,unsigned short const *,unsigned int)",
    "const ScrWindow::`vftable'{for `IWndObj'}",
    "protected: virtual long __stdcall CWndObj::OnNCCalcSize(unsigned int,long)",
    "public: int __stdcall PageContainer::Reset(int)",
    "public: void __thiscall ATL::CSimpleStringT::Empty(void)",
    "public: virtual void __stdcall CWndObj::clr_WndStyle(unsigned long)",
    "private: int __thiscall CDIB::Load32FromOther(class CDIB *)",
    "public: class CCustomButtonEx * & __thiscall WizardRoot::ButtonContinue(void)",
    "const CCritSec::`vftable'",
    "void * __stdcall LoadHtmlResource(struct HINSTANCE__ *,unsigned short const *,unsigned long *)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,struct IResourceModuleEvent * const &)",
    "public: virtual int __thiscall CAnimation::Draw(struct HDC__ *)",
    "public: virtual int __thiscall CScreenDIB::Draw(struct HDC__ *)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(unsigned short const *)",
    "public: int __stdcall CCustomGraphicEx::SetGraphic(class CDrawItem *)",
    "private: void __thiscall CResourceModule::v_NotifyObservers(void)",
    "protected: virtual long __stdcall CWndObj::OnCharToItem(unsigned int,long)",
    "public: virtual struct HICON__ * __stdcall CWndObj::get_Icon(void)",
    "public: static struct HDC__ * __stdcall WizardUI::HdcBackground(void)",
    "const PIDStringView::`vftable'",
    "const Wizard_PageDesciption::`vftable'",
    "public: int __stdcall NavigationStack::Push(class WizardNode *)",
    "public: virtual __thiscall AppWindow::~AppWindow(void)",
    "public: long __thiscall WizardDialogPre::OnEraseBkGnd(unsigned int,unsigned int,long,int &)",
    "public: class AppWindow & __thiscall AppWindow::operator=(class AppWindow const &)",
    "const Navigator::`vftable'",
    "public: class CDIB & __thiscall CDIB::operator=(class CDIB const &)",
    "public: virtual __thiscall CScreenDIB::~CScreenDIB(void)",
    "public: __thiscall WizardSummary::WizardSummary(class WizardSummary const &)",
    "public: class PageContainer * __thiscall WizardUI::GetPageContainer(void)",
    "public: void __stdcall CAnimationControl::SetAllowMirror(int)",
    "private: static int LanguageSelectionDialogBase::bLangUiShown",
    "public: unsigned int __thiscall WizardUI::GetFontSize(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(class ATL::CSimpleStringT const &)",
    "public: virtual void __stdcall CWndObj::set_Parent(struct HWND__ *)",
    "public: void __stdcall WizardEx::SetStrategy(class WizardStrategy *)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(unsigned short const *)",
    "public: static struct HWND__ * __stdcall WizardUI::HwndBackground(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short,int)",
    "public: class SimpleDialogBase & __thiscall SimpleDialogBase::operator=(class SimpleDialogBase const &)",
    "public: class CResourceModule * __thiscall CResourceModuleFactory::GetResourceModule(void)",
    "public: virtual __thiscall WizardEx::~WizardEx(void)",
    "public: void __stdcall CRichEditControl::SetTextMode(unsigned int)",
    "public: virtual int __thiscall CScreenText::Draw(struct HDC__ *)",
    "public: struct HWND__ * __thiscall WizardUI::GetNavHWnd(void)",
    "protected: virtual void __thiscall WizardVariation::GetCurrentVariation(void)",
    "void __stdcall SetControlFonts(struct HWND__ *)",
    "int __stdcall ShowReadMoreWnd(struct HINSTANCE__ *,struct HWND__ *,unsigned int,unsigned short const *,unsigned int)",
    "public: class CGenericNavWindow & __thiscall CGenericNavWindow::operator=(class CGenericNavWindow const &)",
    "public: class WizardStrategy * __stdcall WizardEx::GetStrategy(void)",
    "public: static void __stdcall CHighContrast::FreeInstance(void)",
    "public: virtual __thiscall CAnimationControl::~CAnimationControl(void)",
    "private: virtual void __thiscall WizardHandler::FirstVisit(void)",
    "protected: virtual long __stdcall CWndObj::OnCtlColorMsgbox(unsigned int,long)",
    "public: void __stdcall AppWindow::GetWizardRect(struct tagRECT *)",
    "public: virtual __thiscall WizardRoot::~WizardRoot(void)",
    "public: virtual int __thiscall WizardRoot::NotifyWizNext(void)",
    "public: void __thiscall ATL::CStringT > >::OemToCharA(void)",
    "private: virtual __thiscall CCustomButtonEx::~CCustomButtonEx(void)",
    "private: void __thiscall LanguageSelectionDialogBase::ReadSelectedLocale(void)",
    "protected: virtual long __stdcall CWndObj::OnSysColorChange(unsigned int,long)",
    "public: int __thiscall CDIB::DumpToFile(unsigned short const *)",
    "public: virtual class WizardNode * __thiscall Wizard_PageDesciption::CreateNode(unsigned int,class WizardEx *,class WizardUI *)",
    "public: void __thiscall CResourceModuleFactory::Init(struct HINSTANCE__ *)",
    "public: void __stdcall AppWindow::SetActiveAppWnd(struct HWND__ *)",
    "public: virtual void __stdcall CWndObj::add_WndStyle(unsigned long)",
    "public: class WizardRoot * __thiscall WizardHandler::GetRoot(void)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(struct KEYBOARD * const &)",
    "public: static void __stdcall Navigator::FreeInstance(void)",
    "public: __thiscall CCustomGraphicEx::CCustomGraphicEx(void)",
    "protected: virtual long __stdcall CWndObj::OnCtlColorStatic(unsigned int,long)",
    "public: __thiscall SimpleSize::SimpleSize(void)",
    "public: virtual int __thiscall CGenericNavWindow::ProcessWindowMessage(struct HWND__ *,unsigned int,unsigned int,long,long &,unsigned long)",
    "public: void __stdcall PageContainer::ReinstantiatePages(void)",
    "public: void __thiscall LanguageSelectionDialogBase::LoadStringResources(void)",
    "public: void __stdcall PageContainer::ShowWindow(int)",
    "private: __thiscall CCustomButtonEx::CCustomButtonEx(void)",
    "public: int __thiscall CDIB::LoadScaledFromOther(class CDIB *,long,long,int)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimLeft(unsigned short const *)",
    "private: static int WizardVariation::m_CurrentVariation",
    "public: virtual int __thiscall WizardRoot::NotifyWizCancel(void)",
    "public: virtual void __stdcall CWndObj::set_Position(struct tagPOINT *)",
    "public: virtual __thiscall SimpleWizStrategy::~SimpleWizStrategy(void)",
    "public: static struct HWND__ * __stdcall WizardUI::HwndProgress(void)",
    "public: void __thiscall CAnimation::Pulse(void)",
    "const CDrawItemComposite::`vftable'",
    "int __stdcall MySetWindowText(struct HWND__ *,unsigned int,class ATL::CStringT > >)",
    "public: int __thiscall CDrawItem::Draw(void)",
    "public: virtual void __stdcall CWndObj::set_WexStyle(unsigned long)",
    "public: __thiscall CResourceModule::CResourceModule(class CResourceModule const &)",
    "public: int __stdcall CAnimationControl::Init(struct HWND__ *,unsigned int,struct HINSTANCE__ *,unsigned int,unsigned long,int,int)",
    "public: int __thiscall ATL::CSimpleArray >::Find(struct LANGUAGE * const &)const",
    "public: virtual void __thiscall CDrawItemComposite::ComposeOffscreen(struct HWND__ *)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(unsigned char)",
    "public: void __thiscall CDrawItem::SetHdcDest(struct HDC__ *)",
    "protected: virtual long __stdcall CWndObj::OnMenuSelect(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnVScroll(unsigned int,long)",
    "public: int __thiscall ATL::CStringT > >::Find(unsigned short const *,int)const",
    "public: virtual unsigned long __stdcall CWndObj::get_WndStyle(void)",
    "public: int __thiscall ATL::CStringT > >::LoadStringW(unsigned int)",
    "public: virtual __thiscall WizardVariation::~WizardVariation(void)",
    "public: virtual class WizardPage * __stdcall Navigator::Back(class WizardNode *)",
    "public: void __thiscall ATL::CStringT > >::FormatV(unsigned short const *,char *)",
    "private: static struct HDC__ * WizardUI::s_hdcScreenBackground",
    "public: __thiscall ATL::CStringT > >::CStringT > >(struct tagVARIANT const &,struct ATL::IAtlStringMgr *)",
    "const ScrWindow::`vftable'{for `IWndProp'}",
    "protected: virtual long __stdcall ScrWindow::OnDeviceChange(unsigned int,long)",
    "public: int __thiscall CDIB::Load(struct HINSTANCE__ *,unsigned int,unsigned long,int)",
    "public: unsigned short * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: __thiscall WizardStrategy::WizardStrategy(class WizardEx *)",
    "public: void __thiscall CAnimation::SetAllowMirror(int)",
    "public: struct SimpleSize __thiscall ProtoPageDimensions::GetScreenBitmapSize(void)",
    "public: virtual void __stdcall CWndObj::set_Title(unsigned short const *)",
    "public: void __thiscall WizardUI::SetFontSize(unsigned int)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(char const *)",
    "public: void __thiscall CDIB::Unload(void)",
    "protected: virtual long __stdcall CWndObj::OnEndSession(unsigned int,long)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::Trim(void)",
    "public: void __stdcall CRichEditControl::SetRichTextAnsi(char const *,unsigned long *)",
    "public: void __stdcall CRichEditControl::SetBackGroundColor(unsigned long)",
    "public: void __thiscall ATL::CSimpleStringT::AppendChar(unsigned short)",
    "int __stdcall CenterRelativeToWindow(struct HWND__ *,struct HWND__ *,unsigned int)",
    "public: __thiscall ATL::CSimpleStringT::CSimpleStringT(class ATL::CSimpleStringT const &)",
    "public: virtual int __thiscall LanguageSelectionDialogBase::CanPageBeActivated(enum Direction,int *)",
    "public: virtual int __thiscall WizardHandler::NotifyWizBack(int &)",
    "public: virtual void __thiscall WizardHandler::KillActive(int &)",
    "private: void __thiscall WizardUI::DestroyProgressWindow(void)",
    "public: void __thiscall ATL::CStringT > >::FormatMessageV(unsigned short const *,char * *)",
    "public: virtual int __thiscall LanguageSelectionDialogBase::ProcessLanguageSelection(int &)",
    "public: unsigned int __stdcall WizardEx::GetPageIndex(void)",
    "public: void __thiscall ATL::CSimpleStringT::Append(class ATL::CSimpleStringT const &)",
    "public: static class CCustomButtonEx * __stdcall CCustomButtonEx::CreateEx(struct HINSTANCE__ *,struct HINSTANCE__ *,struct HWND__ *,unsigned int,struct _Button_Data * const,struct HDC__ *,struct HWND__ *)",
    "public: __thiscall WizardDialogPre::WizardDialogPre(class WizardDialogPre const &)",
    "public: virtual class WizardNode * __thiscall WizardSummary::CreateNode(unsigned int,class WizardEx *,class WizardUI *)",
    "public: __thiscall WizardDesciption::WizardDesciption(class WizardDesciption const &)",
    "private: void __thiscall CAnimationControl::v_Set(unsigned long)",
    "private: static unsigned long __stdcall CRichEditControl::EditStreamCallbackAnsi(unsigned long,unsigned char *,long,long *)",
    "public: virtual __thiscall CDrawBackground::~CDrawBackground(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimLeft(void)",
    "public: class WizardEx * __stdcall WizardNode::GetParent(void)",
    "int __stdcall MessageBoxFromMessage(struct HINSTANCE__ *,struct HWND__ *,unsigned short const *,unsigned int,unsigned int)",
    "public: __thiscall CScreenText::CScreenText(class CScreenText const &)",
    "private: int __thiscall WizardUI::IsMinimizeRequest(struct tagMSG *)",
    "public: virtual class WizardNode * __thiscall WizardDesciption::CreateNode(unsigned int,class WizardEx *,class WizardUI *)",
    "public: unsigned short * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "protected: virtual long __stdcall AppWindow::OnGetDefID(unsigned int,unsigned int,long)",
    "public: __thiscall ATL::CSimpleStringT::operator class ATL::CSimpleStringT &(void)",
    "public: virtual class WizardPage * __thiscall SummaryWizStrategy::NextPage(int,class WizardNode *)",
    "public: virtual int __thiscall WizardDialogPre::ProcessWindowMessage(struct HWND__ *,unsigned int,unsigned int,long,long &,unsigned long)",
    "public: void __cdecl ATL::CStringT > >::Format(unsigned int,...)",
    "public: void __stdcall WizardNode::SetPageIndex(unsigned int)",
    "public: int __stdcall CHighContrast::IsHighContrast(void)",
    "private: void __thiscall Win32Navigator::v_DoPageChange(enum Direction,class WizardPage *)",
    "public: virtual void __stdcall Win32Navigator::SetFirstPage(class WizardPage *)",
    "public: void __stdcall PageContainer::AddPage(class WizardPage *)",
    "public: void __stdcall WizardRoot::DestroyAllStandardButtons(void)",
    "public: unsigned short const * __stdcall Wizard_PageDesciption::GetResourceNonLocName(void)",
    "public: int __thiscall MyString::RemoveChar(int)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,struct LOCALE * const &)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::Trim(unsigned short)",
    "private: void __thiscall WizardUI::CenterApp(struct HWND__ *,struct tagRECT)",
    "private: void __thiscall CCtlText::v_Set(unsigned long)",
    "public: unsigned short * __thiscall WizardUI::GetUserSelectedKeyboardType(void)",
    "protected: virtual long __stdcall CWndObj::OnSysChar(unsigned int,long)",
    "public: __thiscall WizardRoot::WizardRoot(void)",
    "public: int __thiscall ATL::CSimpleArray >::Find(struct IResourceModuleEvent * const &)const",
    "public: long __thiscall CDIB::DibWidth(void)const",
    "public: struct HWND__ * __thiscall WizardUI::GetAppHWnd(void)",
    "public: virtual int __stdcall CWndObj::Send(unsigned int,unsigned int,long)",
    "public: class WizardPage * __stdcall WizardEx::GetFirstPage(void)",
    "public: class ScrWindow & __thiscall ScrWindow::operator=(class ScrWindow const &)",
    "int __stdcall MyDynamicSetWindowText(struct HWND__ *,unsigned int,class ATL::CStringT > >)",
    "private: static void __stdcall CDIB::BlendNormal32(class CDIB *,class CDIB *)",
    "private: void __thiscall LanguageSelectionDialogBase::ReadSelectedKeyboardType(void)",
    "protected: virtual long __stdcall CWndObj::OnGetDlgCode(unsigned int,long)",
    "public: __thiscall NavWindow::NavWindow(class NavWindow const &)",
    "public: long __thiscall LanguageNeutralSelectionDialogBase::OnMouseOver(int,struct tagNMHDR *,int &)",
    "public: __thiscall CCursor::CCursor(class CCursor const &)",
    "private: static class CCursor * CCursor::s_pCursor",
    "protected: virtual long __stdcall CWndObj::OnRButtonDown(unsigned int,long)",
    "private: int __thiscall CWndObj::v_Register(void)",
    "public: struct HWND__ * __thiscall WizardUI::GetScrHWnd(void)",
    "private: class ATL::CStringT > > __thiscall LanguageSelectionDialogBase::GetSelectedLocale(void)",
    "public: virtual __thiscall NavigationStack::~NavigationStack(void)",
    "protected: virtual long __stdcall AppWindow::OnEraseBkGnd(unsigned int,long)",
    "public: __thiscall CResourceModule::CResourceModule(struct HINSTANCE__ *)",
    "public: int __thiscall ATL::CStringT > >::Replace(unsigned short,unsigned short)",
    "public: virtual __thiscall Wizard_PageDesciption::~Wizard_PageDesciption(void)",
    "public: virtual long __stdcall CWndObj::QueryInterface(struct _GUID const &,void * *)",
    "public: unsigned long __stdcall CHighContrast::GetBkColor(unsigned long)",
    "public: virtual void __stdcall CWndObj::set_BackColor(unsigned long)",
    "public: static void __stdcall Win32Navigator::FreeInstance(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char const *,struct ATL::IAtlStringMgr *)",
    "public: int __stdcall ScrWindow::Init(unsigned int)",
    "public: virtual void __stdcall CWndObj::set_WndID(unsigned long)",
    "private: void __thiscall PageContainer::v_Clr(unsigned long)",
    "public: __thiscall ICreateProgressWnd::ICreateProgressWnd(class ICreateProgressWnd const &)",
    "public: virtual void __thiscall WizardHandler::InitPage(void)",
    "private: int __thiscall CAnimationControl::v_Chk(unsigned long)",
    "protected: virtual long __stdcall CWndObj::OnCtlColorDlg(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnEnterIdle(unsigned int,long)",
    "private: void __thiscall ATL::CSimpleStringT::Attach(struct ATL::CStringData *)",
    "public: __thiscall SimpleRect::SimpleRect(int,int,int,int)",
    "public: void __cdecl ATL::CStringT > >::AppendFormat(unsigned int,...)",
    "const CCustomGraphicEx::`vftable'",
    "const CWndObj::`vftable'{for `IWndObj'}",
    "protected: virtual long __stdcall ScrWindow::OnActivate(unsigned int,long)",
    "private: static void __stdcall WizardUI::DeleteBackground(void)",
    "protected: virtual long __stdcall CWndObj::OnNotify(unsigned int,long)",
    "public: struct SimpleSize __thiscall ProtoPageDimensions::GetAppWindowSize(void)",
    "public: virtual __thiscall WizardBranch::~WizardBranch(void)",
    "private: void __thiscall WizardUI::CreatePropertySheet(void)",
    "protected: virtual long __stdcall CWndObj::OnMouseMove(unsigned int,long)",
    "public: virtual struct HINSTANCE__ * __stdcall CWndObj::get_Instance(void)",
    "public: void __thiscall CResourceModuleFactory::Uninit(void)",
    "public: static class CCustomButtonEx * __stdcall CCustomButtonEx::Create(struct HINSTANCE__ *,struct HINSTANCE__ *,struct HWND__ *,unsigned int)",
    "protected: virtual long __stdcall CWndObj::OnSize(unsigned int,long)",
    "private: void __thiscall AppWindow::v_SetWindowTitle(void)",
    "public: unsigned short * __thiscall ATL::CStringT > >::SetSysString(unsigned short * *)const",
    "private: static void __stdcall WizardUI::ResetWizUI(void)",
    "public: int __thiscall ProtoPageDimensions::IsStandardSizing(void)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,struct LANGUAGE * const &)",
    "const IResourceModuleEvent::`vftable'",
    "protected: virtual long __stdcall ScrWindow::OnDestroy(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnHelp(unsigned int,long)",
    "public: struct HINSTANCE__ * __thiscall CResourceModuleFactory::GetResourceInstance(void)",
    "public: static class WizardUI * __stdcall WizardUI::GetWizUI(void)",
    "public: int __thiscall CScreenDIB::Load(struct HINSTANCE__ *,unsigned int,unsigned long)",
    "protected: virtual long __stdcall ScrWindow::OnEraseBkGnd(unsigned int,long)",
    "public: __thiscall Wiz_Node::Wiz_Node(class Wiz_Node const &)",
    "public: virtual class WizardPage * __stdcall Navigator::Cancel(void)",
    "public: __thiscall BranchWizStrategy::BranchWizStrategy(class WizardEx *)",
    "public: void __thiscall ATL::CSimpleStringT::Preallocate(int)",
    "public: int __thiscall ATL::CSimpleArray >::Find(unsigned short * const &)const",
    "protected: virtual long __stdcall CWndObj::OnGetMinMaxInfo(unsigned int,long)",
    "public: __thiscall WizardCollection::WizardCollection(unsigned int,unsigned int,class Wiz_Node * *)",
    "const WizardDialogPost::`vftable'",
    "public: __thiscall ATL::CStringT > >::CStringT > >(void)",
    "public: __thiscall VariationWizStrategy::VariationWizStrategy(class WizardEx *,class ATL::CSimpleMap > const &,int)",
    "public: virtual __thiscall PageContainer::~PageContainer(void)",
    "private: long __thiscall LanguageNeutralSelectionDialogBase::DrawLVItem(struct tagNMLVCUSTOMDRAW *)",
    "class ATL::CStringT > > __stdcall CStringExpandEnvironmentStrings(class ATL::CStringT > >)",
    "private: int __thiscall WizardUI::CreateProgressWindow(void)",
    "private: unsigned short * __thiscall ATL::CSimpleStringT::PrepareWrite(int)",
    "public: class CAnimationControl & __thiscall CAnimationControl::operator=(class CAnimationControl const &)",
    "public: int __thiscall CDrawBackground::Load(struct HWND__ *,struct HDC__ *,struct HWND__ *)",
    "const WizardDialogPre::`vftable'",
    "protected: virtual long __stdcall CWndObj::OnNCPaint(unsigned int,long)",
    "private: void __thiscall ScrWindow::v_SetWindowTitle(void)",
    "private: int __thiscall WizardUI::CreateNavWindow(void)",
    "private: void __thiscall PageContainer::v_CreatePage(int,int)",
    "protected: virtual long __stdcall CWndObj::OnKeyUp(unsigned int,long)",
    "public: long __thiscall WizardDialogPost::OnCommandCancel(unsigned short,unsigned short,struct HWND__ *,int &)",
    "public: struct HWND__ * __stdcall PageContainer::GetContainerHwnd(void)",
    "public: virtual int __stdcall WizardEx::Reset(void)",
    "const WizardPage::`vftable'",
    "public: virtual unsigned long __stdcall CWndObj::get_WexStyle(void)",
    "public: __thiscall ATL::CStringT > >::~CStringT > >(void)",
    "public: void __thiscall CResourceModuleFactory::Init(struct HINSTANCE__ *,unsigned short const *)",
    "const CCustomButtonEx::`vftable'",
    "public: struct HINSTANCE__ * __stdcall WizardPage::GetResourceInstanceLoc(void)",
    "public: int __thiscall ProtoPageDimensions::IsInitialized(void)",
    "private: int __thiscall NavigationStack::v_Chk(unsigned long)",
    "protected: virtual long __stdcall CWndObj::OnCreate(unsigned int,long)",
    "public: virtual void __stdcall Win32Navigator::RequestFinish(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char,int)",
    "public: long __thiscall WizardUI::SetUserSelectedLDId(unsigned short *)",
    "public: struct HDC__ * __stdcall AppWindow::GetAppImage(void)",
    "public: __thiscall Win32Navigator::Win32Navigator(class Win32Navigator const &)",
    "public: struct SimpleRect __thiscall ProtoPageDimensions::GetAppWindowInBackgroundBitmap(void)",
    "public: struct LANGUAGE * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: virtual void __stdcall Win32Navigator::DoCancel(void)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Mid(int)const",
    "protected: virtual long __stdcall CWndObj::OnCompareItem(unsigned int,long)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimLeft(unsigned short)",
    "public: unsigned long __stdcall WizardPage::GetTitle(void)",
    "protected: virtual long __stdcall CWndObj::OnLButtonDown(unsigned int,long)",
    "private: void __thiscall WizardUI::LoadFontInfo(void)",
    "public: int __thiscall CResourceModule::ResetLanguage(void)",
    "public: struct IResourceModuleEvent * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: virtual unsigned long __stdcall CWndObj::get_ClsStyle(void)",
    "protected: virtual long __stdcall AppWindow::OnPaint(unsigned int,long)",
    "public: void __thiscall CDIB::ConvertColorKeyToAlpha(void)",
    "public: unsigned long __thiscall WizardUI::WaitForMultipleObjectsMessageSafeEx(unsigned long,void * const *,int,unsigned long,int)",
    "public: __thiscall CCtlText::CCtlText(class CCtlText const &)",
    "public: virtual __thiscall WizardStrategy::~WizardStrategy(void)",
    "public: static class Win32Navigator * __stdcall Win32Navigator::getInstance(void)",
    "public: __thiscall WizardDialogPost::WizardDialogPost(void)",
    "protected: virtual long __stdcall CWndObj::OnKeyDown(unsigned int,long)",
    "public: __thiscall AppWindow::AppWindow(class WizardUI *,unsigned int)",
    "const Wiz_Node::`vftable'",
    "public: class CDIB const & __thiscall CScreenDIB::GetDib(void)",
    "public: class WizardEx * __thiscall WizardCollection::CreateNodeHelper(unsigned int,class WizardEx *,class WizardUI *)",
    "public: virtual int __thiscall WizardHandler::NotifyWizNext(int &)",
    "public: __thiscall WizardDesciption::WizardDesciption(unsigned int,class Wiz_Node * *)",
    "private: void __thiscall NavigationStack::v_Clr(unsigned long)",
    "public: __thiscall SimpleWizStrategy::SimpleWizStrategy(class SimpleWizStrategy const &)",
    "public: class CCustomGraphicEx & __thiscall CCustomGraphicEx::operator=(class CCustomGraphicEx const &)",
    "private: long __thiscall WizardUI::SetLanguageString(unsigned short * *,unsigned short *)",
    "protected: virtual long __stdcall CWndObj::OnFontChange(unsigned int,long)",
    "public: int __thiscall PIDStringView::ReplaceString(int,int,unsigned short const *)",
    "private: void __thiscall WizardUI::MessagePump(void)",
    "public: virtual __thiscall CDrawItem::~CDrawItem(void)",
    "public: class CResourceModuleFactory & __thiscall CResourceModuleFactory::operator=(class CResourceModuleFactory const &)",
    "public: virtual __thiscall VariationWizStrategy::~VariationWizStrategy(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short const *,int,struct ATL::IAtlStringMgr *)",
    "int __stdcall MessageBoxFromMessageWithTimeout(struct HINSTANCE__ *,struct HWND__ *,unsigned short const *,unsigned int,unsigned int,unsigned int,int)",
    "const CAnimationControl::`vftable'",
    "public: __thiscall ATL::CSimpleStringT::CSimpleStringT(struct ATL::IAtlStringMgr *)",
    "public: long __thiscall LanguageNeutralSelectionDialogBase::OnInitDialog(unsigned int,unsigned int,long,int &)",
    "public: struct HINSTANCE__ * __thiscall WizardUI::GetResourceInstanceNonLoc(void)",
    "public: virtual __thiscall CCustomGraphicEx::~CCustomGraphicEx(void)",
    "public: class CDrawItemComposite & __thiscall CDrawItemComposite::operator=(class CDrawItemComposite const &)",
    "private: void __thiscall NavigationStack::v_Set(unsigned long)",
    "int __stdcall PaintWindowRegion(struct HWND__ *)",
    "protected: virtual long __stdcall ScrWindow::OnUser(unsigned int,unsigned int,long)",
    "protected: virtual long __stdcall ScrWindow::OnRegistered(unsigned int,unsigned int,long)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::Trim(unsigned short const *)",
    "public: unsigned long __stdcall Wizard_PageDesciption::GetTemplate(void)",
    "public: unsigned long __thiscall WizardUI::GetFontCharSet(void)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(unsigned short * const &)",
    "public: struct SimpleSize & __thiscall SimpleSize::operator=(struct SimpleSize const &)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(struct IResourceModuleEvent * const &)",
    "public: virtual int __thiscall LanguageSelectionDialogBase::ShowLanguageSelectionUI(void)",
    "public: int __thiscall CScreenText::SetFont(struct HFONT__ *)",
    "const VariationWizStrategy::`vftable'",
    "protected: virtual long __stdcall CWndObj::OnSysCommand(unsigned int,long)",
    "public: virtual struct tagSIZE * __stdcall CWndObj::get_Size(void)",
    "public: void __thiscall ProtoPageDimensions::ScreenToPseudoCoordinate(int &,int &)",
    "public: class WizardDialogPre & __thiscall WizardDialogPre::operator=(class WizardDialogPre const &)",
    "public: void __thiscall ATL::CSimpleStringT::SetManager(struct ATL::IAtlStringMgr *)",
    "public: long __thiscall CGenericNavWindow::OnPaint(unsigned int,unsigned int,long,int &)",
    "private: unsigned int __thiscall LanguageSelectionDialogBase::PopulateLanguageList(void)",
    "public: void __stdcall CCtlText::SetText(struct HWND__ *,struct HFONT__ *,unsigned long,unsigned short const *)",
    "public: void __thiscall CDrawItemComposite::AddItem(class CDrawItem *)",
    "public: int __thiscall CDIB::Draw(struct HDC__ *,int,int)",
    "private: void __thiscall WizardUI::CreateWindows(void)",
    "class ATL::CStringT > > __stdcall CStringGetPrivateProfileString(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: int __thiscall ATL::CStringT > >::Compare(unsigned short const *)const",
    "protected: class WizardPage * __thiscall ChoiceWizStrategy::NextPageHelper(int,class WizardNode *)",
    "protected: virtual long __stdcall CWndObj::OnRButtonDblClk(unsigned int,long)",
    "public: __thiscall CAnimation::CAnimation(void)",
    "public: __thiscall CAnimationControl::CAnimationControl(void)",
    "public: int __thiscall CDIB::Draw(struct HDC__ *,int,int,struct tagRECT)",
    "public: long __thiscall WizardDialogPre::OnDrawItem(unsigned int,unsigned int,long,int &)",
    "public: virtual void __thiscall CCritSec::Leave(void)",
    "public: static void __cdecl ATL::CSimpleStringT::CopyChars(unsigned short *,unsigned int,unsigned short const *,int)",
    "private: static class Win32Navigator * Win32Navigator::m_instance",
    "private: void __thiscall LanguageNeutralSelectionDialogBase::InitLangNeutralLV(void)",
    "public: virtual __thiscall Wiz_Node::~Wiz_Node(void)",
    "public: void __thiscall WizardUI::SetNavHWnd(struct HWND__ *)",
    "public: virtual __thiscall SummaryWizStrategy::~SummaryWizStrategy(void)",
    "public: virtual class WizardHandler * __thiscall WizardRoot::GetPageHandler(void)",
    "public: class ICreateProgressWnd & __thiscall ICreateProgressWnd::operator=(class ICreateProgressWnd const &)",
    "private: bool __thiscall ATL::CStringT > >::CheckImplicitLoad(void const *)",
    "public: __thiscall ProtoPageList::ProtoPageList(void)",
    "public: void * __stdcall WizardPage::GetData(void)",
    "public: virtual void __thiscall WizardHandler::OnResourceChanged(int &)",
    "public: unsigned long __stdcall WizardRoot::MyPropSheet_GetWizButtons(void)",
    "private: int __thiscall WizardUI::InstallFont(struct HINSTANCE__ *)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,struct LANGUAGE * const &)",
    "public: class CCustomButtonEx * __thiscall WizardHandler::ButtonFinish(void)",
    "protected: virtual long __stdcall CWndObj::OnGetText(unsigned int,long)",
    "public: int __thiscall MyString::InsertString(int,unsigned short const *)",
    "public: void __stdcall WizardNode::SetWizUI(class WizardUI *)",
    "int __stdcall GetHwndLogFont(struct HWND__ *,struct tagLOGFONTW *)",
    "public: virtual void __stdcall CWndObj::Update(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::MakeLower(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(unsigned char)",
    "public: long __thiscall CGenericNavWindow::OnSetBitmap(unsigned int,unsigned int,long,int &)",
    "public: int __thiscall WizardUI::GetCancelNoShow(void)",
    "public: virtual __thiscall ChoiceWizStrategy::~ChoiceWizStrategy(void)",
    "private: void __thiscall CWndObj::v_Set(unsigned long)",
    "public: __thiscall CCritSec::CCritSec(void)",
    "public: __thiscall CHighContrast::CHighContrast(class CHighContrast const &)",
    "protected: virtual long __stdcall AppWindow::OnUser(unsigned int,unsigned int,long)",
    "public: __thiscall ScrWindow::ScrWindow(class ScrWindow const &)",
    "public: int __thiscall ATL::CStringT > >::CollateNoCase(unsigned short const *)const",
    "public: int __thiscall CDIB::Resize(long,long)",
    "public: void __cdecl ATL::CStringT > >::AppendFormat(unsigned short const *,...)",
    "public: void __cdecl ATL::CStringT > >::Format(unsigned short const *,...)",
    "public: class WizardUI & __thiscall WizardUI::operator=(class WizardUI const &)",
    "public: void __stdcall PageContainer::ShowUI(struct HWND__ *,class WizardPage *)",
    "public: virtual void __stdcall Win32Navigator::RequestGoBack(void)",
    "private: int __thiscall PIDStringView::v_IsValid(unsigned short)",
    "private: void __thiscall ATL::CSimpleStringT::Reallocate(int)",
    "public: int __thiscall ATL::CStringT > >::Replace(unsigned short const *,unsigned short const *)",
    "private: void __thiscall ATL::CSimpleStringT::Fork(int)",
    "public: class PIDStringView & __thiscall PIDStringView::operator=(class PIDStringView const &)",
    "public: __thiscall VariationWizStrategy::VariationWizStrategy(class VariationWizStrategy const &)",
    "public: unsigned short * __thiscall WizardUI::GetUserSelectedLocale(void)",
    "public: virtual class WizardNode * __thiscall WizardVariation::CreateNode(unsigned int,class WizardEx *,class WizardUI *)",
    "public: virtual void __stdcall CWndObj::set_TextColor(unsigned long)",
    "public: class CAnimation & __thiscall CAnimation::operator=(class CAnimation const &)",
    "public: class WizardSummary & __thiscall WizardSummary::operator=(class WizardSummary const &)",
    "public: class WizardUI * __stdcall WizardNode::GetWizUI(void)",
    "private: static int Navigator::bWeAllocatedInstance",
    "public: __thiscall SummaryWizStrategy::SummaryWizStrategy(class SummaryWizStrategy const &)",
    "struct HBITMAP__ * __stdcall SpwLoadBitmap(struct HINSTANCE__ *,unsigned int,int,int,unsigned int)",
    "public: __thiscall CDrawItem::CDrawItem(class CDrawItem const &)",
    "public: void __thiscall ATL::CSimpleStringT::ReleaseBufferSetLength(int)",
    "protected: virtual long __stdcall AppWindow::OnSetCaption(unsigned int,unsigned int,long)",
    "protected: virtual long __stdcall AppWindow::OnCancel(unsigned int,unsigned int,long)",
    "public: static int __stdcall LanguageSelectionDialogBase::IsLanguageSelectionUiShown(void)",
    "public: virtual __thiscall CGenericNavWindow::~CGenericNavWindow(void)",
    "public: int __thiscall WizardUI::WaitForUIEnd(void)",
    "public: unsigned short * __thiscall ATL::CSimpleStringT::GetBufferSetLength(int)",
    "public: virtual void __stdcall CWndObj::set_Icon(struct HICON__ *)",
    "public: unsigned short __thiscall ATL::CSimpleStringT::GetAt(int)const",
    "protected: virtual long __stdcall ScrWindow::OnWmxClose(unsigned int,unsigned int,long)",
    "public: virtual void __stdcall Win32Navigator::RequestCancel(void)",
    "public: void __thiscall ATL::CSimpleStringT::SetAt(int,unsigned short)",
    "public: void __thiscall CCursor::SetCursorState(unsigned int)",
    "private: int __thiscall CRichEditControl::v_IsRtf(void)",
    "public: __thiscall AppWindow::AppWindow(class AppWindow const &)",
    "public: __thiscall CGenericNavWindow::CGenericNavWindow(class AppWindow *)",
    "public: __thiscall CResourceModule::CResourceModule(unsigned short const *)",
    "public: int __thiscall CScreenText::SetText(struct HWND__ *,unsigned short const *)",
    "public: virtual class WizardPage * __stdcall WizardEx::Next(int,class WizardNode *)",
    "protected: virtual long __stdcall CWndObj::OnPower(unsigned int,long)",
    "public: void __thiscall ATL::CSimpleArray >::RemoveAll(void)",
    "public: __thiscall ScrWindow::ScrWindow(class WizardUI *,unsigned int)",
    "public: static class CCustomButtonEx * __stdcall CCustomButtonEx::Create(struct HINSTANCE__ *,struct HINSTANCE__ *,struct HWND__ *)",
    "protected: virtual long __stdcall ScrWindow::OnDisplayChange(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnDrawItem(unsigned int,long)",
    "public: int __thiscall ATL::CSimpleArray >::RemoveAt(int)",
    "public: void __thiscall ATL::CStringT > >::CharToOemA(void)",
    "public: void __thiscall ATL::CSimpleStringT::FreeExtra(void)",
    "public: static unsigned short __stdcall WizardUI::GetScreenBitmap(void)",
    "const LanguageNeutralSelectionDialogBase::`vftable'",
    "protected: virtual long __stdcall CWndObj::OnMeasureItem(unsigned int,long)",
    "public: int __thiscall ATL::CSimpleStringT::GetAllocLength(void)const",
    "public: long __thiscall LanguageSelectionDialogBase::OnLocaleChange(unsigned short,unsigned short,struct HWND__ *,int &)",
    "const ICreateNavbarWnd::`vftable'",
    "public: class CWndObj & __thiscall CWndObj::operator=(class CWndObj const &)",
    "public: virtual unsigned long __stdcall CWndObj::AddRef(void)",
    "private: void __thiscall PageContainer::v_Set(unsigned long)",
    "public: unsigned int __stdcall WizardNode::GetType(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(class ATL::CStringT > > const &)",
    "private: void __thiscall WizardUI::DestroyScrWindow(void)",
    "public: __thiscall ATL::CStringT > >::operator class ATL::CSimpleStringT &(void)",
    "public: struct ProgressCreateStruct & __thiscall ProgressCreateStruct::operator=(struct ProgressCreateStruct const &)",
    "protected: virtual long __stdcall CWndObj::OnHScroll(unsigned int,long)",
    "private: void __thiscall CWndObj::v_Clr(unsigned long)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::SpanExcluding(unsigned short const *)const",
    "public: struct PageDef & __thiscall PageDef::operator=(struct PageDef const &)",
    "private: void __thiscall WizardUI::HideSplashScreen(void)",
    "public: virtual void __stdcall CWndObj::Size(struct tagSIZE *)",
    "public: int __thiscall CDIB::DrawOpaque(struct HDC__ *,int,int)",
    "protected: virtual long __stdcall CWndObj::OnNull(unsigned int,long)",
    "public: void __thiscall MyString::ClearString(void)",
    "const WizardStrategy::`vftable'",
    "void __stdcall StretchControlToWindow(struct HWND__ *,unsigned int,unsigned int)",
    "private: static unsigned short * CResourceModule::s_szUiLanguage",
    "protected: virtual long __stdcall CWndObj::OnQueryEndSession(unsigned int,long)",
    "public: struct ATL::IAtlStringMgr * __thiscall ATL::CSimpleStringT::GetManager(void)const",
    "public: int __thiscall CCursor::LeavingTrackedWnd(struct HWND__ *)",
    "public: virtual __thiscall WizardSummary::~WizardSummary(void)",
    "public: void __thiscall PIDStringView::ClearString(void)",
    "private: void __thiscall CDrawBackground::v_Unload(void)",
    "public: void __thiscall WizardUI::EnableInput(int)",
    "public: long __thiscall WizardDialogPost::OnCommandBack(unsigned short,unsigned short,struct HWND__ *,int &)",
    "public: long __thiscall WizardDialogPost::OnCommandFinish(unsigned short,unsigned short,struct HWND__ *,int &)",
    "public: bool __thiscall ATL::CSimpleStringT::IsEmpty(void)const",
    "public: unsigned long __thiscall WizardUI::WaitForMultipleObjectsMessageSafe(unsigned long,void * const *,int,unsigned long)",
    "public: static int __cdecl ATL::CSimpleStringT::StringLength(char const *)",
    "public: static void __stdcall Navigator::setInstance(struct INavigator *)",
    "private: void __thiscall WizardUI::RepositionAppWindow(void)",
    "public: __thiscall SimpleRect::SimpleRect(void)",
    "const ChoiceWizStrategy::`vftable'",
    "void __stdcall MoveControl(struct HWND__ *,unsigned int,long,long)",
    "public: int __thiscall MyString::RemoveString(int,int)",
    "public: __thiscall ATL::CSimpleStringT::~CSimpleStringT(void)",
    "public: unsigned int __thiscall Wiz_Node::GetWizNodeType(void)",
    "public: virtual struct HWND__ * __stdcall CWndObj::get_Parent(void)",
    "private: int __thiscall CWndObj::v_Chk(unsigned long)",
    "protected: virtual long __stdcall CWndObj::OnMenuChar(unsigned int,long)",
    "public: void __thiscall ATL::CSimpleStringT::Append(unsigned short const *,int)",
    "public: unsigned short const * __thiscall WizardUI::GetFontName(void)",
    "public: __thiscall ATL::CSimpleStringT::CSimpleStringT(unsigned short const *,struct ATL::IAtlStringMgr *)",
    "private: void __thiscall WizardUI::DestroyAppWindow(void)",
    "protected: virtual long __stdcall CWndObj::OnMouseLeave(unsigned int,long)",
    "public: class CRichEditControl & __thiscall CRichEditControl::operator=(class CRichEditControl const &)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(unsigned short const *)",
    "public: unsigned long __stdcall Wizard_PageDesciption::GetButtons(void)",
    "private: void __thiscall WizardUI::RepositionProgressWindow(unsigned int,long)",
    "public: void __thiscall CDIB::MirrorImage(void)",
    "void __stdcall ShowReadMoreWndHtmlFromResource(struct HINSTANCE__ *,struct HWND__ *,unsigned int,unsigned short const *,unsigned short const *,unsigned int)",
    "public: __thiscall WizardPage::WizardPage(class WizardPage const &)",
    "private: void __thiscall CResourceModule::LoadLibraryW(void)",
    "public: __thiscall LanguageSelectionDialogBase::~LanguageSelectionDialogBase(void)",
    "public: static class CCustomButtonEx * __stdcall CCustomButtonEx::CreateEx(struct HINSTANCE__ *,struct HINSTANCE__ *,struct HWND__ *,struct _Button_Data * const,struct HDC__ *,struct HWND__ *)",
    "long __stdcall wndProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "private: static struct HBITMAP__ * WizardUI::s_hbmpScreenBackgroundOld",
    "protected: virtual long __stdcall CWndObj::OnCommand(unsigned int,long)",
    "int __stdcall SmartSetWindowText(struct HWND__ *,unsigned int,class ATL::CStringT > >)",
    "protected: virtual long __stdcall CWndObj::OnWindowPosChanging(unsigned int,long)",
    "public: __thiscall CWndObj::CWndObj(class CWndObj const &)",
    "public: __thiscall CDrawItem::CDrawItem(void)",
    "public: __thiscall CScreenDIB::CScreenDIB(void)",
    "public: class WizardPage & __thiscall WizardPage::operator=(class WizardPage const &)",
    "public: int __thiscall CDIB::DrawOpaque(struct HDC__ *,int,int,struct tagRECT)",
    "protected: virtual long __stdcall ScrWindow::OnClose(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnGetIcon(unsigned int,long)",
    "public: long __thiscall CGenericNavWindow::OnSetCaption(unsigned int,unsigned int,long,int &)",
    "protected: virtual long __stdcall CWndObj::OnSetFocus(unsigned int,long)",
    "public: static class CCustomButtonEx * __stdcall CCustomButtonEx::Create(struct HINSTANCE__ *,struct HINSTANCE__ *,struct HWND__ *,unsigned int,struct HDC__ *,struct HWND__ *)",
    "int __stdcall MessageBoxFromMessageWithTimeout(struct HINSTANCE__ *,struct HWND__ *,unsigned int,unsigned int,unsigned int,unsigned int,int)",
    "public: struct HWND__ * __thiscall CAttachDataDlg::Hdlg(void)",
    "public: void __thiscall WizardUI::SetAppHWnd(struct HWND__ *)",
    "public: __thiscall CDIB::CDIB(void)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,struct LOCALE * const &)",
    "private: int __thiscall CDIB::DrawCore(struct HDC__ *,int,int,struct tagRECT,int)",
    "public: class WizardPage * __thiscall WizardUI::GetCancelPage(void)",
    "protected: virtual long __stdcall CWndObj::OnDeleteItem(unsigned int,long)",
    "public: class NavigationStack * __thiscall WizardUI::Stack(void)",
    "public: int __thiscall PIDStringView::RemoveString(int,int,int)",
    "public: void __stdcall WizardNode::SetParent(class WizardEx *)",
    "public: int __thiscall ATL::CStringT > >::ReverseFind(unsigned short)const",
    "protected: virtual long __stdcall CWndObj::OnCompacting(unsigned int,long)",
    "protected: virtual long __stdcall ScrWindow::OnPaint(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnCancelMode(unsigned int,long)",
    "public: int __thiscall ATL::CSimpleArray >::Add(struct LANGUAGE * const &)",
    "public: __thiscall WizardNode::WizardNode(unsigned int,unsigned int,class WizardEx *,class WizardUI *)",
    "public: int __thiscall WizardUI::ResetLanguage(unsigned short const *)",
    "public: void __stdcall WizardNode::SetType(unsigned int)",
    "public: class CDIB * __stdcall AppWindow::GetAppDib(void)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,struct IResourceModuleEvent * const &)",
    "public: __thiscall ICreateNavbarWnd::ICreateNavbarWnd(void)",
    "protected: virtual long __stdcall CWndObj::OnPaint(unsigned int,long)",
    "protected: virtual long __stdcall AppWindow::OnRegistered(unsigned int,unsigned int,long)",
    "public: long __thiscall CWndObj::WMHandler(unsigned int,unsigned int,long)",
    "const SimpleWizStrategy::`vftable'",
    "public: class WizardRoot * (__stdcall*__stdcall Wizard_PageDesciption::GetCreateWizardDialog(void))(class WizardPage *)",
    "private: static long CCursor::s_lInitialized",
    "public: int __thiscall WizardUI::GetCanceled(void)",
    "protected: virtual long __stdcall AppWindow::OnDeviceChange(unsigned int,long)",
    "public: virtual class WizardPage * __stdcall WizardPage::GetPage(void)",
    "public: int __stdcall AppWindow::IsAppMirrored(void)",
    "public: int __thiscall ProtoPageDimensions::GetBottomMargin(void)",
    "public: struct SimpleRect & __thiscall SimpleRect::operator=(struct SimpleRect const &)",
    "protected: virtual long __stdcall CWndObj::OnSizeClipboard(unsigned int,long)",
    "public: __thiscall BranchWizStrategy::BranchWizStrategy(class BranchWizStrategy const &)",
    "public: __thiscall Wiz_Node::Wiz_Node(unsigned int)",
    "public: int __thiscall ATL::CStringT > >::CompareNoCase(unsigned short const *)const",
    "public: struct tagRECT & __thiscall CGenericNavWindow::RectDest(void)",
    "public: unsigned short * __thiscall WizardUI::GetUserSelectedTargetLanguage(void)",
    "private: int __thiscall WizardUI::IsCancelRequest(struct tagMSG *)",
    "public: virtual __thiscall CDrawItemComposite::~CDrawItemComposite(void)",
    "public: long __thiscall LanguageNeutralSelectionDialogBase::OnLanguageSelect(int,struct tagNMHDR *,int &)",
    "public: void __thiscall WizardUI::SetScrWindow(class ScrWindow *)",
    "public: class Navigator & __thiscall Navigator::operator=(class Navigator const &)",
    "public: int __thiscall ATL::CSimpleArray >::Add(struct IResourceModuleEvent * const &)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(unsigned short)",
    "protected: virtual long __stdcall CWndObj::OnSetText(unsigned int,long)",
    "const WizardHandler::`vftable'",
    "private: struct HINSTANCE__ * __thiscall CResourceModule::v_LoadLibrary(unsigned short const *,unsigned short const *)",
    "protected: virtual long __stdcall CWndObj::OnMove(unsigned int,long)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(struct LOCALE * const &)",
    "public: virtual void __stdcall CWndObj::set_Menu(struct HMENU__ *)",
    "private: void __thiscall PageContainer::v_DestroyAllCachedPages(void)",
    "public: void __thiscall CCursor::ClearCursorWait(void)",
    "public: long __thiscall WizardDialogPost::OnCommandContinue(unsigned short,unsigned short,struct HWND__ *,int &)",
    "struct HICON__ * __stdcall CreateMirroredIcon(struct HICON__ *)",
    "protected: virtual long __stdcall CWndObj::OnDisplayChange(unsigned int,long)",
    "public: long __thiscall CGenericNavWindow::OnSetButtons(unsigned int,unsigned int,long,int &)",
    "public: class ATL::CStringT > > __stdcall WizardRoot::GetPageName(void)",
    "private: void __thiscall CResourceModule::v_ReleaseResource(struct HINSTANCE__ *)",
    "public: __thiscall ChoiceWizStrategy::ChoiceWizStrategy(class ChoiceWizStrategy const &)",
    "protected: virtual long __stdcall CWndObj::OnEnterSizeMove(unsigned int,long)",
    "public: __thiscall PIDStringView::PIDStringView(class PIDStringView const &)",
    "public: class CDrawBackground & __thiscall CDrawBackground::operator=(class CDrawBackground const &)",
    "public: void __thiscall WizardUI::ShowScreenWindow(int)",
    "private: int __thiscall WizardUI::IsControlKeys(struct HWND__ *,struct tagMSG *)",
    "private: void __thiscall WizardUI::CalcAppSize(void)",
    "public: long __thiscall CDIB::DibHeight(void)const",
    "public: void __stdcall CRichEditControl::SetText(unsigned short const *)",
    "protected: virtual long __stdcall CWndObj::OnWindowPosChanged(unsigned int,long)",
    "public: __thiscall WizardNode::WizardNode(class WizardNode const &)",
    "public: int __thiscall CScreenText::SetColor(unsigned long)",
    "const LanguageSelectionDialogBase::`vftable'",
    "private: void __thiscall LanguageNeutralSelectionDialogBase::ProcessSelectedLanguage(void)",
    "public: void __stdcall ScrWindow::GetScrRect(struct tagRECT *)",
    "protected: virtual long __stdcall CWndObj::OnNCDestroy(unsigned int,long)",
    "public: struct HINSTANCE__ * __thiscall CResourceModule::GetResourceInstance(void)",
    "public: __thiscall ATL::CSimpleStringT::CSimpleStringT(unsigned short const *,int,struct ATL::IAtlStringMgr *)",
    "public: __thiscall WizardNode::WizardNode(void)",
    "public: void __thiscall ATL::CSimpleStringT::Append(unsigned short const *)",
    "public: int __thiscall ATL::CSimpleArray >::Add(struct KEYBOARD * const &)",
    "protected: virtual long __stdcall CWndObj::OnDrawClipboard(unsigned int,long)",
    "public: int __thiscall CDrawItem::Refresh(void)",
    "private: int __thiscall WizardUI::NeedToRedrawNavWindow(void)",
    "protected: virtual long __stdcall CWndObj::OnEnterMenuLoop(unsigned int,long)",
    "public: unsigned short * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: virtual int __thiscall LanguageNeutralSelectionDialogBase::IsWDS(void)",
    "public: void __stdcall WizardRoot::InitAllStandardButtons(void)",
    "public: class PageContainer & __thiscall PageContainer::operator=(class PageContainer const &)",
    "protected: virtual long __stdcall CWndObj::OnDropFiles(unsigned int,long)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::MakeReverse(void)",
    "public: virtual class WizardPage * __stdcall Navigator::Next(int,class WizardNode *)",
    "private: int __thiscall CDIB::DrawColorKey(struct HDC__ *,int,int,struct tagRECT)",
    "const WizardEx::`vftable'{for `WizardNode'}",
    "private: void __thiscall WizardUI::PumpMessage(struct tagMSG)",
    "protected: virtual long __stdcall CWndObj::OnCancelJournal(unsigned int,long)",
    "public: void __stdcall CHighContrast::TestHighcontrast(int)",
    "private: int __thiscall NavigationStack::v_ChkStack(void)",
    "public: void __stdcall WizardPage::SetData(void *)",
    "protected: virtual void __thiscall CGenericNavWindow::InitButtons(void)",
    "public: virtual __thiscall ICreateProgressWnd::~ICreateProgressWnd(void)",
    "protected: virtual long __stdcall CWndObj::OnCtlColorEdit(unsigned int,long)",
    "public: __thiscall WizardVariation::WizardVariation(unsigned int,class Wiz_Node * *,class ATL::CSimpleMap > const &,unsigned short const *)",
    "protected: virtual long __stdcall CWndObj::OnCopyData(unsigned int,long)",
    "public: __thiscall Wizard_PageDesciption::Wizard_PageDesciption(unsigned long,unsigned short const *,unsigned short const *,unsigned long,class WizardRoot * (__stdcall*)(class WizardPage *),unsigned long)",
    "private: virtual int __thiscall WizardHandler::CanPageBeActivated(enum Direction,int *)",
    "public: class WizardNode * * __stdcall WizardEx::GetPageList(void)",
    "public: class WizardPage * __stdcall PageContainer::GetWizardPageWithIndex(int)",
    "public: virtual void __stdcall Win32Navigator::RequestGoNext(void)",
    "public: virtual void __stdcall Win32Navigator::DoGoToPageIndex(int)",
    "public: struct HWND__ * __stdcall PageContainer::GetCurrentPageHwnd(void)",
    "public: __thiscall PageContainer::PageContainer(class PageContainer const &)",
    "public: __thiscall WizardEx::WizardEx(void)",
    "public: int __thiscall CResourceModule::RegisterObserver(struct IResourceModuleEvent *)",
    "protected: virtual long __stdcall CWndObj::OnMouseActivate(unsigned int,long)",
    "public: __thiscall ChoiceWizStrategy::ChoiceWizStrategy(class WizardEx *)",
    "public: struct KEYBOARD * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: int __thiscall ProtoPageDimensions::Init(void)",
    "const BranchWizStrategy::`vftable'",
    "private: void __thiscall WizardUI::RepositionNavWindow(unsigned int,long)",
    "public: static struct INavigator * __stdcall Navigator::getInstance(void)",
    "public: void __thiscall CDIB::SetTransparentColor(unsigned long)",
    "private: void __thiscall CGenericNavWindow::DestroyDialog(void)",
    "const WizardNode::`vftable'",
    "public: __thiscall ProtoPageList::ProtoPageList(class ProtoPageList const &)",
    "private: __thiscall Navigator::Navigator(void)",
    "public: struct HWND__ * __stdcall WizardPage::GetHWnd(void)",
    "private: class ATL::CStringT > > __thiscall PIDStringView::v_MakeValidString(unsigned short const *)",
    "public: long __thiscall WizardUI::SetUserSelectedHideOOBELang(unsigned short *)",
    "private: int __thiscall LanguageSelectionDialogBase::PopulateLocaleList(void)",
    "private: int __thiscall PageContainer::v_Chk(unsigned long)",
    "protected: virtual long __stdcall CWndObj::OnCtlColorListbox(unsigned int,long)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,unsigned short * const &)",
    "public: virtual __thiscall ICreateNavbarWnd::~ICreateNavbarWnd(void)",
    "public: void __stdcall AppWindow::LoadBackground(void)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Right(int)const",
    "private: int __thiscall CWndObj::v_DlgCreate(void)",
    "public: class Wizard_PageDesciption & __thiscall Wizard_PageDesciption::operator=(class Wizard_PageDesciption const &)",
    "public: long __thiscall CGenericNavWindow::OnInitDialog(unsigned int,unsigned int,long,int &)",
    "public: unsigned short * __thiscall ATL::CStringT > >::AllocSysString(void)const",
    "private: virtual __thiscall CHighContrast::~CHighContrast(void)",
    "public: class WizardDesciption & __thiscall WizardDesciption::operator=(class WizardDesciption const &)",
    "public: int __stdcall AppWindow::ResetLanguage(void)",
    "private: void __thiscall ATL::CSimpleStringT::PrepareWrite2(int)",
    "private: void __thiscall CGenericNavWindow::InitSurface(void)",
    "public: virtual void __stdcall CWndObj::Hide(void)",
    "public: class WizardNode * __stdcall WizardEx::GetPageListItem(int)",
    "public: __thiscall WizardRoot::WizardRoot(class WizardRoot const &)",
    "public: int __thiscall ATL::CSimpleArray >::GetSize(void)const",
    "public: class ProtoPageList & __thiscall ProtoPageList::operator=(class ProtoPageList const &)",
    "public: class CResourceModule & __thiscall CResourceModule::operator=(class CResourceModule const &)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(unsigned char const *)",
    "public: static void __cdecl ATL::CSimpleStringT::CopyCharsOverlapped(unsigned short *,unsigned int,unsigned short const *,int)",
    "public: struct HDC__ * __thiscall CDIB::GetHdc(void)const",
    "public: __thiscall ATL::CStringT > >::CStringT > >(class ATL::CStringT > > const &)",
    "public: virtual class WizardPage * __thiscall SimpleWizStrategy::NextPage(int,class WizardNode *)",
    "const ICreateProgressWnd::`vftable'",
    "public: void __stdcall AppWindow::GetAppRect(struct tagRECT *)",
    "public: int __stdcall WizardRoot::SetTextStyle(int,float,int,int,int)",
    "protected: virtual long __stdcall AppWindow::OnCreate(unsigned int,long)",
    "public: static class CCustomButtonEx * __stdcall CCustomButtonEx::CreateIndirect(struct HINSTANCE__ *,struct HINSTANCE__ *,struct HWND__ *,struct _Button_Data * const)"
  ],
  "spwizimg.dll": "No exports",
  "spwizres.dll": "No exports",
  "spwmp.dll": [
    "Sysprep_Generalize_WMP",
    "Sysprep_Clean_WMP"
  ],
  "sqlcecompact40.dll": [
    "SeRebuild",
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "sqlceoledb40.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "sqlceqp40.dll": [
    "DllCanUnloadNow",
    "DllMain",
    "DllGetClassObject"
  ],
  "sqlcese40.dll": [
    "SqlCeGetDatabaseProps",
    "SqlCeSetDatabaseInfo",
    "SqlCeGetPropChangeInfo",
    "SqlCeGetRecordChangeInfo",
    "InitSerialization",
    "EnableStorePlayback",
    "SqlCeStreamSeek",
    "SqlCeSetSessionOption",
    "SqlCeFlushDBVol",
    "SqlCeTrackDatabase",
    "SqlCeAttachCustomTrackingData",
    "SqlCeGetCustomTrackingData",
    "SqlCeCreateDatabase",
    "SqlCeRemoveDatabaseTracking",
    "SqlCeBeginSyncSession",
    "SqlCeEndTransaction",
    "SqlCeDeleteRecord",
    "SqlCeGetDatabaseSession",
    "SuspendStoreOperation",
    "SqlCeOnServerLoad",
    "SqlCeWriteRecordProps",
    "SqlCeCreateSession",
    "SqlCeOpenDatabase",
    "SqlCeStreamRead",
    "SqlCeAddSyncPartner",
    "SqlCeBeginTransaction",
    "SqlCeChangeDatabaseLCID",
    "SqlCeStreamWrite",
    "EnableCedbFailpoint",
    "SqlCeEnumDBVolumes",
    "SqlCeCloseHandle",
    "SqlCeFindNextChangedRecord",
    "DllCanUnloadNow",
    "SqlCeReadRecordProps",
    "SqlCeRemoveDatabaseProps",
    "SqlCeEndSyncSession",
    "SqlCePurgeTrackingData",
    "SqlCeFreeNotification",
    "SqlCeOidGetInfo",
    "SqlCeFindNextDatabase",
    "SqlCeAddDatabaseProps",
    "EnableStoreTracing",
    "SqlCeGetChangedRecordCnt",
    "SqlCeOpenStream",
    "SqlCeGetChangedRecords",
    "DllGetClassObject",
    "SqlCeStreamSetSize",
    "SqlCeStreamSaveChanges",
    "SqlCeMarkRecord",
    "SqlCeMountDBVol",
    "SqlCePurgeTrackingGenerations",
    "SqlCeRemoveSyncPartner",
    "SqlCeGetDBInformationByHandle",
    "SqlCeFindFirstDatabase",
    "SqlCeOpenDatabaseEx",
    "SqlCeDeleteDatabase",
    "SqlCeUninitialize",
    "SqlCeSeekDatabase",
    "SqlCeTrackProperty",
    "SqlCeUnmountDBVol"
  ],
  "sqlsrv32.dll": [
    "SQLSetStmtAttrW",
    "SQLGetData",
    "SQLParamOptions",
    "SQLGetConnectAttrW",
    "SQLMoreResults",
    "BCP_moretext",
    "SQLStatisticsW",
    "SQLEndTran",
    "BCP_readfmt",
    "SQLBindCol",
    "SQLGetEnvAttr",
    "SQLNumParams",
    "SQLNumResultCols",
    "SQLSpecialColumnsW",
    "ConfigDSNW",
    "SQLSetDescFieldW",
    "WizDatabaseDlgProc",
    "WizIntSecurityDlgProc",
    "SQLNativeSqlW",
    "LibMain",
    "SQLGetDiagFieldW",
    "BCP_collen",
    "SQLTablePrivilegesW",
    "SQLForeignKeysW",
    "SQLRowCount",
    "SQLFreeStmt",
    "SQLPutData",
    "SQLExtendedFetch",
    "SQLDescribeParam",
    "BCP_writefmt",
    "BCP_control",
    "BCP_colfmt",
    "SQLCloseCursor",
    "WizLanguageDlgProc",
    "BCP_sendrow",
    "SQLGetDescFieldW",
    "SQLConnectW",
    "SQLGetCursorNameW",
    "SQLTablesW",
    "SQLParamData",
    "TestDlgProc",
    "SQLProcedureColumnsW",
    "SQLColAttributeW",
    "SQLSetDescRec",
    "SQLAllocHandle",
    "BCP_getcolfmt",
    "SQLFetch",
    "SQLGetFunctions",
    "ConfigDriverW",
    "BCP_exec",
    "SQLGetDescRecW",
    "SQLBrowseConnectW",
    "SQLGetConnectOptionW",
    "SQLExecute",
    "BCP_done",
    "SQLCancel",
    "SQLExecDirectW",
    "BCP_columns",
    "SQLSetConnectAttrW",
    "SQLBulkOperations",
    "SQLGetStmtAttrW",
    "BCP_batch",
    "SQLBindParameter",
    "SQLGetTypeInfoW",
    "BCP_init",
    "SQLPrimaryKeysW",
    "ConnectDlgProc",
    "SQLGetInfoW",
    "SQLColumnPrivilegesW",
    "SQLSetConnectOptionW",
    "SQLSetEnvAttr",
    "SQLSetScrollOptions",
    "WizDSNDlgProc",
    "FinishDlgProc",
    "SQLColumnsW",
    "SQLSetCursorNameW",
    "SQLDisconnect",
    "SQLDriverConnectW",
    "SQLSetPos",
    "SQLDebug",
    "BCP_bind",
    "SQLProceduresW",
    "SQLFreeHandle",
    "SQLDescribeColW",
    "SQLGetDiagRecW",
    "SQLPrepareW",
    "BCP_colptr",
    "SQLFetchScroll",
    "SQLCopyDesc",
    "BCP_setcolfmt"
  ],
  "sqlunirl.dll": [
    "_FindFirstFile_@8",
    "_GetTimeFormat_@24",
    "_GetGlyphOutline_@28",
    "_LookupPrivilegeName_@16",
    "_CommDlg_OpenSave_GetFolderPath@12",
    "_GetCharWidth_@16",
    "_PolyTextOut_@12",
    "_LoadLibraryEx_@12",
    "_SetComputerName_@4",
    "_GlobalFindAtom_@4",
    "_OutputDebugString_@4",
    "_GetDefaultCommConfig_@12",
    "_SendMessageTimeout_@28",
    "_DragQueryFile_@16",
    "_FindResourceEx_@16",
    "_tsystem",
    "_MAKEINTRESOURCE@4",
    "_CharUpperBuff_@8",
    "_WinHelp@16",
    "_GetWindowsDirectory_@8",
    "_CreateEvent_@16",
    "_NDdeSetShareSecurity_@16",
    "_OpenEventLog_@8",
    "_GetCharWidth32_@16",
    "_OpenSemaphore_@12",
    "_RegDeleteValue_@8",
    "_RegSetValueEx_@24",
    "_SendMessage@16",
    "_SHGetFileInfo_@20",
    "_SetVolumeLabel_@8",
    "_SetWindowsHook_@8",
    "_TextOut@20",
    "_QueryDosDevice_@12",
    "_RegUnLoadKey_@8",
    "_lstrcat_@8",
    "_EnumFontFamiliesEx_@20",
    "_FindResource@12",
    "_ShellExecute_@24",
    "_DefFrameProc_@20",
    "_OemToChar_@8",
    "_GetPrivateProfileString_@24",
    "_CreateColorSpace_@4",
    "_SetWindowsHookEx_@16",
    "_CreateProcess_@40",
    "_CreatePropertySheetPage_@4",
    "_PageSetupDlg_@4",
    "_NDdeShareAdd_@20",
    "_LoadImage_@24",
    "_GetWindowText@12",
    "_OpenFileMapping_@12",
    "_RegCreateKey_@12",
    "_EnumICMProfiles_@12",
    "_GetTempPath_@8",
    "_CommConfigDialog_@12",
    "_SHGetPathFromIDList_@8",
    "__lopen_@8",
    "_MoveFile@8",
    "_AppendMenu_@16",
    "_WaitNamedPipe_@8",
    "_FreeEnvironmentStrings@4",
    "_CreateMetaFile_@4",
    "_RegisterClipboardFormat_@4",
    "_GetModuleFileName@12",
    "_CreateDirectoryEx_@12",
    "_LoadString@16",
    "_GetCommandLine_@0",
    "_GlobalAddAtom_@4",
    "_DispatchMessage_@4",
    "_BeginUpdateResource_@8",
    "_OemToCharBuff_@12",
    "_DrawState_@40",
    "_CharPrev_@8",
    "_ShellAbout_@16",
    "_LoadLibrary@4",
    "_SendMessageCallback_@24",
    "_CreateService_@52",
    "_GetFileAttributesEx_@12",
    "_RegReplaceKey_@16",
    "_WriteProfileSection_@8",
    "_CreateProcessAsUser_@44",
    "_NDdeGetErrorString_@12",
    "_GetClipboardFormatName_@12",
    "_RemoveDirectory_@4",
    "_RegRestoreKey_@12",
    "_ObjectPrivilegeAuditAlarm_@24",
    "_FindNextFile_@8",
    "_CreateDialogIndirectParam@20",
    "_GetCharABCWidths_@16",
    "_CharUpper@4",
    "_ttof",
    "_PostThreadMessage_@16",
    "_DrawText@20",
    "_GetPrivateProfileSectionNames_@12",
    "_CreateWindowEx@48",
    "_GetEnhMetaFile_@4",
    "_CopyFileEx_@24",
    "_TranslateAccelerator@12",
    "_ExtTextOut@32",
    "_GrayString_@36",
    "_SHBrowseForFolder_@4",
    "_LookupAccountName_@28",
    "_OpenWaitableTimer_@12",
    "_WritePrivateProfileSection_@12",
    "_ChooseColor_@4",
    "__lcreat_@8",
    "_DefineDosDevice_@12",
    "_GetObject@12",
    "_WriteConsoleInput_@16",
    "_lstrcpyn_@12",
    "_GetClassInfo@12",
    "_PrivilegedServiceAuditAlarm_@20",
    "_ReadEventLog_@28",
    "_GetFileTitle@12",
    "_GetToolsFilePath@16",
    "_CreateSemaphore_@16",
    "_CreateScalableFontResource_@16",
    "_GetTempFileName_@16",
    "_GetLogicalDriveStrings_@8",
    "_OpenSCManager_@12",
    "_FindWindow_@8",
    "_NDdeSetTrustedShare_@12",
    "_GetEnvironmentStrings_@4",
    "_RegCreateKeyEx_@36",
    "_GetUnicodeRedirectionLayer@0",
    "_MapVirtualKey_@8",
    "_NDdeTrustedShareEnum_@24",
    "_AddFontResource_@4",
    "_BuildCommDCBAndTimeouts_@12",
    "_CreateNamedPipe_@32",
    "_GetMessage_@16",
    "_LogonUser_@24",
    "_GetComputerName@8",
    "_ModifyMenu_@20",
    "_tfopen",
    "_ClearEventLog_@8",
    "_EnumWindowStations_@8",
    "_UpdateResource_@24",
    "_CreateFont@56",
    "_lstrcpy_@8",
    "_GetDiskFreeSpaceEx@16",
    "_NDdeGetTrustedShare_@20",
    "_ReportEvent_@36",
    "_MessageBox@16",
    "_CreateDC_@16",
    "_SystemParametersInfo_@16",
    "_GetProp@8",
    "_LoadAccelerators_@8",
    "_OpenEvent_@12",
    "_GetSaveFileName@4",
    "_ChangeMenu_@20",
    "_GetBinaryType_@8",
    "_GetServiceKeyName_@16",
    "_NDdeShareGetInfo_@28",
    "_NDdeIsValidAppTopicList_@4",
    "_NDdeShareDel_@12",
    "_GetWindowTextLength@4",
    "_NDdeGetShareSecurity_@24",
    "_EnumDesktops_@12",
    "_GetDiskFreeSpace_@20",
    "_GetDateFormat_@24",
    "newWideCharFromMultiByte",
    "_BroadcastSystemMessage_@20",
    "_CallMsgFilter_@8",
    "_EnumDisplaySettings_@12",
    "_GetLogColorSpace_@12",
    "_CreateMailslot_@16",
    "_EndUpdateResource_@8",
    "_DeleteFile@4",
    "_GetProfileString_@20",
    "_IsCharAlphaNumeric_@4",
    "_VkKeyScanEx_@8",
    "_FindAtom_@4",
    "_SearchPath_@24",
    "_MessageBoxIndirect_@4",
    "_InitiateSystemShutdown_@20",
    "_SetWindowLong@12",
    "_CreateDialogParam_@20",
    "_LookupPrivilegeValue_@12",
    "_GetDriveType_@4",
    "_IsBadStringPtr_@8",
    "_SetDefaultCommConfig_@12",
    "_SetCurrentDirectory_@4",
    "_InsertMenu_@20",
    "_GlobalGetAtomName_@12",
    "_OpenMutex_@12",
    "_GetClassName_@12",
    "_SetFileSecurity_@12",
    "_GetFileVersionInfoSize_@8",
    "_RegDeleteKey_@8",
    "_SetUserObjectInformation_@16",
    "_GetCharacterPlacement_@24",
    "_CreateFileMapping_@24",
    "_VerQueryValue_@16",
    "_FindFirstFileEx_@24",
    "_GetMenuString_@20",
    "_DefWindowProc@16",
    "_WriteProfileString_@12",
    "_GetClassInfoEx_@12",
    "_ReadConsoleInput_@16",
    "_GetPrivateProfileStruct_@20",
    "_CreateEnhMetaFile_@16",
    "_GetICMProfile_@12",
    "_LoadMenu@8",
    "_GetSystemDirectory_@8",
    "_CharLower@4",
    "_DialogBoxParam_@20",
    "_lstrcmp_@8",
    "_IsCharUpper_@4",
    "_GetLocaleInfo_@16",
    "_CopyAcceleratorTable_@12",
    "_SetProp@12",
    "_GetPrivateProfileSection_@16",
    "_ReplaceText_@4",
    "_SendDlgItemMessage@20",
    "_CreateDirectory_@8",
    "_SetWindowText@8",
    "_RegisterWindowMessage_@4",
    "_CharLowerBuff_@8",
    "_InsertMenuItem_@16",
    "_GetNamedPipeHandleState_@28",
    "_RegisterServiceCtrlHandler_@8",
    "_QueryServiceConfig_@16",
    "_SetDlgItemText@12",
    "_DlgDirList_@20",
    "_WritePrivateProfileString_@16",
    "_ChangeDisplaySettings_@8",
    "_CreateDesktop_@24",
    "AllocConvertMultiSZNameToA",
    "_RemoveProp@8",
    "_Shell_NotifyIcon_@8",
    "_ObjectDeleteAuditAlarm_@12",
    "_RegQueryValueEx_@24",
    "_AccessCheckAndAuditAlarm_@44",
    "_VkKeyScan_@4",
    "_EnumServicesStatus_@32",
    "_OpenDesktop_@16",
    "_CreateStatusWindow_@16",
    "newMultiByteFromWideCharEx",
    "_DlgDirSelectEx_@16",
    "_GetCharWidthFloat_@16",
    "_RegQueryInfoKey_@48",
    "_DlgDirSelectComboBoxEx_@16",
    "_RegisterEventSource_@8",
    "_DrawTextEx_@24",
    "_EnumProps_@8",
    "_GetPrivateProfileInt_@16",
    "_FatalAppExit_@8",
    "_CommDlg_OpenSave_GetFilePath@12",
    "_CommDlg_OpenSave_GetSpec@12",
    "_LoadIcon@8",
    "_SHFileOperation_@4",
    "_GetProfileSection_@12",
    "_GetFileVersionInfo_@16",
    "_GetOutlineTextMetrics_@12",
    "_GetVolumeInformation_@32",
    "_QueryServiceLockStatus_@16",
    "_GetMenuItemInfo_@16",
    "_CopyFile_@12",
    "_PropertySheet_@4",
    "_GetVersionEx@4",
    "_ExtractIconEx_@20",
    "_GetKerningPairs_@12",
    "_NDdeShareSetInfo_@24",
    "_CompareString_@24",
    "_FormatMessage@28",
    "_EnumResourceNames_@16",
    "_GetServiceDisplayName_@16",
    "_strerror_@4",
    "_wvsprintf_@12",
    "_RegEnumKey_@16",
    "_CallWindowProc@20",
    "_trename",
    "_RegisterClass_@4",
    "_MessageBoxEx_@20",
    "_GetTextFace_@12",
    "_WritePrivateProfileStruct_@20",
    "_OpenService_@12",
    "_PrintDlg_@4",
    "_OpenFile_@12",
    "_DeviceCapabilities_@20",
    "_PostMessage@16",
    "_EnumResourceLanguages_@20",
    "_ResetDC_@8",
    "_RemoveFontResource_@4",
    "_NDdeShareEnum_@24",
    "_CreateIC_@16",
    "_GetAtomName_@12",
    "_LoadMenuIndirect_@4",
    "_GetUserObjectInformation_@20",
    "newMultiByteFromWideCharSize",
    "AllocConvertMultiSZNameToAEx",
    "_GetWindowLong@8",
    "_ExtractAssociatedIcon_@12",
    "_UnregisterClass_@8",
    "_EnumFonts_@16",
    "_NDdeIsValidShareName_@4",
    "AbortSystemShutdown_",
    "__lwrite_@12",
    "_LoadKeyboardLayout_@8",
    "_BuildCommDCB_@8",
    "_ObjectOpenAuditAlarm_@48",
    "_GetFileAttributes_@4",
    "_LookupPrivilegeDisplayName_@20",
    "_GetModuleHandle_@4",
    "_CreateAcceleratorTable_@8",
    "_LoadBitmap@8",
    "_GetMetaFile_@4",
    "_StartDoc@8",
    "_EnumDependentServices_@24",
    "_CharToOemBuff_@12",
    "_ShellExecuteEx_@4",
    "_CreateFontIndirect@4",
    "_GetCompressedFileSize_@8",
    "_GetKeyNameText_@12",
    "_FindFirstChangeNotification_@12",
    "_MapVirtualKeyEx_@12",
    "_FindText_@4",
    "_RegConnectRegistry_@12",
    "_GetUserName@8",
    "_GetDlgItemText@16",
    "_IsCharAlpha_@4",
    "_GetProcAddress_@8",
    "_GetShortPathName_@12",
    "_GetProfileInt_@12",
    "_FindExecutable_@12",
    "_PeekMessage@20",
    "_RegOpenKey_@12",
    "_EnumFontFamilies_@16",
    "newMultiByteFromWideChar",
    "_LoadCursorFromFile_@4",
    "_CreateMDIWindow_@40",
    "_RegOpenKeyEx_@20",
    "_RegSaveKey_@12",
    "_CreateFile@28",
    "_GetCharABCWidthsFloat_@16",
    "__hwrite_@12",
    "ConvertMultiSZNameToW",
    "_GetTextExtentPoint@16",
    "_RegEnumValue_@32",
    "_CreateWindowStation_@16",
    "_OpenBackupEventLog_@8",
    "_GetTabbedTextExtent_@20",
    "_GetDiskFreeSpaceEx_@16",
    "_LoadCursor@8",
    "_BackupEventLog_@8",
    "_StartServiceCtrlDispatcher_@4",
    "_CharNext_@4",
    "_SendNotifyMessage_@16",
    "_DefMDIChildProc_@16",
    "_SetICMProfile_@8",
    "_RegisterClassEx_@4",
    "_CallNamedPipe_@28",
    "_SetEnvironmentVariable_@8",
    "_CreateMutex_@12",
    "_StartService_@12",
    "_SetMenuItemInfo_@16",
    "_MoveFileEx_@12",
    "_SetClassLong_@12",
    "_CreateWaitableTimer_@12",
    "_GetCurrentHwProfile_@4",
    "_OpenWindowStation_@12",
    "_RegSetValue_@20",
    "_RegQueryMultipleValues_@20",
    "_GetKeyboardLayoutName_@4",
    "_FindWindowEx_@16",
    "_AddAtom_@4",
    "_DlgDirListComboBox_@20",
    "_CharToOem_@8",
    "_IsDialogMessage@8",
    "_EnumResourceTypes_@12",
    "_GetFileSecurity_@20",
    "_ChooseFont_@4",
    "_GetFullPathName_@16",
    "_lstrcmpi_@8",
    "_GetOpenFileName@4",
    "_GetClassLong_@8",
    "_GetEnhMetaFileDescription_@12",
    "_ChangeServiceConfig_@44",
    "_GetTextExtentPoint32@16",
    "_LookupAccountSid_@28",
    "wsprintf_",
    "_RegQueryValue_@16",
    "_GetTextExtentExPoint_@28",
    "_CopyEnhMetaFile_@8",
    "_RegLoadKey_@12",
    "_ExpandEnvironmentStrings_@12",
    "_ExtractIcon_@12",
    "_DialogBoxIndirectParam_@20",
    "_DefDlgProc_@16",
    "_TabbedTextOut_@32",
    "_GetEnvironmentVariable_@12",
    "_EnumPropsEx_@12",
    "_ObjectCloseAuditAlarm_@12",
    "_CopyMetaFile_@8",
    "_SetFileAttributes_@8",
    "_IsCharLower_@4",
    "_RegEnumKeyEx_@32",
    "_GetTextMetrics@8",
    "_GetCurrentDirectory_@8"
  ],
  "sqlwid.dll": [
    "OpenFile_",
    "_hwrite_",
    "GetProcAddress_",
    "_lcreat_",
    "wstrlen",
    "GetEnvironmentStrings_",
    "_ttof",
    "_lwrite_",
    "_lopen_",
    "strerror_"
  ],
  "sqlwoa.dll": [
    "_GetDlgItemText@16",
    "_CreateDialogIndirectParam@20",
    "_SetWindowLong@12",
    "_GetWindowTextLength@4",
    "_GetTextExtentPoint32@16",
    "_GetFileTitle@12",
    "_CommDlg_OpenSave_GetFolderPath@12",
    "_CreateFont@56",
    "_CharUpper@4",
    "_GetModuleFileName@12",
    "_LoadString@16",
    "_PostMessage@16",
    "_DrawText@20",
    "_GetVersionEx@4",
    "AllocConvertMultiSZNameToA",
    "_CreateWindowEx@48",
    "_LoadMenu@8",
    "_PeekMessage@20",
    "_RemoveProp@8",
    "newWideCharFromMultiByte",
    "_CharLower@4",
    "_GetDiskFreeSpaceEx@16",
    "_FormatMessage@28",
    "_LoadBitmap@8",
    "_LoadLibrary@4",
    "newMultiByteFromWideChar",
    "_TranslateAccelerator@12",
    "_MessageBox@16",
    "_ExtTextOut@32",
    "_StartDoc@8",
    "newMultiByteFromWideCharSize",
    "_SetProp@12",
    "_tsystem",
    "_CreateFile@28",
    "_GetWindowLong@8",
    "_MAKEINTRESOURCE@4",
    "_WinHelp@16",
    "_CreateFontIndirect@4",
    "newMultiByteFromWideCharEx",
    "ConvertMultiSZNameToW",
    "_GetTextExtentPoint@16",
    "_SendDlgItemMessage@20",
    "_GetWindowText@12",
    "_SetWindowText@8",
    "_SendMessage@16",
    "_CallWindowProc@20",
    "_DeleteFile@4",
    "_GetComputerName@8",
    "_GetProp@8",
    "_LoadCursor@8",
    "_tfopen",
    "_trename",
    "_IsDialogMessage@8",
    "_MoveFile@8",
    "_TextOut@20",
    "_GetSaveFileName@4",
    "_GetClassInfo@12",
    "_GetUserName@8",
    "_GetObject@12",
    "_CommDlg_OpenSave_GetFilePath@12",
    "_CommDlg_OpenSave_GetSpec@12",
    "_GetTextMetrics@8",
    "_LoadIcon@8",
    "_FreeEnvironmentStrings@4",
    "_GetOpenFileName@4",
    "_FindResource@12",
    "_SetDlgItemText@12",
    "_DefWindowProc@16"
  ],
  "sqmapi.dll": [
    "SqmCheckEscalationSetDWord64",
    "SqmFlushSession",
    "SqmSetBits",
    "SqmGetMachineId",
    "SqmCheckEscalationSetDWord",
    "SqmGetSession",
    "SqmTimerAddToAverage",
    "SqmSetIfMin",
    "SqmSetEscalationInfo",
    "SqmGetLastUploadTime",
    "SqmCleanup",
    "SqmCheckEscalationSetString",
    "SqmStartSession",
    "SqmSetDWord64",
    "SqmWaitForUploadComplete",
    "SqmSetMachineId",
    "SqmReadSharedUserId",
    "SqmSetAppVersion",
    "SqmIsWindowsOptedIn",
    "SqmSetString",
    "SqmGetSessionStartTime",
    "SqmSetBool",
    "SqmTimerStart",
    "SqmGetUserId",
    "SqmStartUpload",
    "SqmAddToStreamString",
    "SqmGetFlags",
    "SqmIsNamespaceEnabled",
    "SqmSet",
    "SqmLoadEscalationManifest",
    "SqmSetCurrentTimeAsUploadTime",
    "SqmCheckEscalationAddToStreamString",
    "SqmEndSessionEx",
    "SqmIncrement",
    "SqmWriteSharedMachineId",
    "SqmAddToStreamDWord",
    "SqmAddToStream",
    "SqmSysprepCleanup",
    "SqmGetEnabled",
    "SqmReadSharedMachineId",
    "SqmAddToStreamV",
    "SqmGetInstrumentationProperty",
    "SqmSetIfMax",
    "SqmAddToAverage",
    "SqmEndSession",
    "SqmAddToStreamDWord64",
    "SqmSysprepGeneralize",
    "SqmTimerAccumulate",
    "SqmTimerRecord",
    "SqmUnattendedSetup",
    "SqmClearFlags",
    "SqmSetEnabled",
    "SqmGetEscalationRuleStatus",
    "SqmSetUserId",
    "SqmCreateNewId",
    "SqmSysprepSpecialize",
    "SqmCheckEscalationAddToStreamDWord64",
    "SqmWriteSharedUserId",
    "SqmCheckEscalationAddToStreamDWord",
    "SqmUnloadEscalationManifest",
    "SqmStartUploadEx",
    "SqmSetAppId",
    "SqmSetFlags"
  ],
  "srchadmin.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "ProcessGroupPolicy",
    "CPlApplet"
  ],
  "srclient.dll": [
    "EnableSR",
    "EnableSREx",
    "SRSetRestorePointInternal",
    "SetSRStateAfterSetup",
    "EnableSRInternal",
    "DisableSR",
    "SRSetRestorePointA",
    "DisableSRInternal",
    "SRNewSystemId",
    "SysprepCleanup",
    "SRRemoveRestorePoint",
    "SRSetRestorePointW",
    "SysprepGeneralize"
  ],
  "srcore.dll": [
    "ShutdownContinuation",
    "SrFreeRpPropArray",
    "SrFreeRestoreStatus",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "srhelper.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "srm.dll": "No exports",
  "srm_ps.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "srmclient.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "srmlib.dll": "No exports",
  "srmscan.dll": [
    "SrmUtcFileTimeToLocalFileTime",
    "SrmIsNameInExpression",
    "SrmCalculateCrcHash",
    "SrmCreateOrDeleteNotificationScheduledTask",
    "SrmLocalFileTimeToUtcFileTime",
    "SrmEnsureSystemVolumeInformationFolder",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "SrmIsInCluster",
    "SrmValidateNamespaceRoots"
  ],
  "srmshell.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "srmstormod.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "srmtrace.dll": [
    "SrmIsTracingEnabledPerThread",
    "SrmGetTracingContextPerThread",
    "SrmTraceMessage",
    "SrmTraceUninitialize",
    "SrmSetTracingContextPerThread",
    "SrmTraceInitialize",
    "SrmIsTracingEnabledOnModule",
    "SrmIsTracingEnabled",
    "SrmGetTracingSequenceNumber",
    "SrmGetTracingModuleInfo",
    "SrmIsTracingEnabledOnFunction"
  ],
  "srrstr.dll": [
    "SRGetCplPropPage"
  ],
  "srumapi.dll": [
    "SruUnregisterRealTimeStats",
    "DllGetClassObject",
    "SruFreeRecordSet",
    "SruRegisterRealTimeStats",
    "DllCanUnloadNow",
    "SruQueryStats",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "srumsvc.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "srvcli.dll": [
    "NetSessionGetInfo",
    "LocalShareGetInfo",
    "LocalShareAdd",
    "NetpsNameCompare",
    "NetServerTransportAddEx",
    "NetShareDelSticky",
    "LocalShareSetInfo",
    "LocalFileEnum",
    "NetServerAliasDel",
    "NetServerStatisticsGet",
    "NetShareGetInfo",
    "NetShareDel",
    "LocalSessionGetInfo",
    "NetFileEnum",
    "NetShareAdd",
    "NetConnectionEnum",
    "NetServerAliasEnum",
    "LocalAliasGet",
    "NetRemoteTOD",
    "I_NetServerSetServiceBits",
    "NetServerComputerNameDel",
    "NetServerDiskEnum",
    "NetFileClose",
    "NetShareEnum",
    "NetpsNameValidate",
    "NetServerTransportDel",
    "NetServerTransportEnum",
    "LocalFileGetInfo",
    "NetShareCheck",
    "NetShareEnumSticky",
    "NetFileGetInfo",
    "NetServerTransportAdd",
    "LocalShareDelEx",
    "NetServerAliasAdd",
    "I_NetServerSetServiceBitsEx",
    "NetpsPathCanonicalize",
    "NetpsNameCanonicalize",
    "NetpsPathCompare",
    "NetSessionDel",
    "LocalFileClose",
    "NetSessionEnum",
    "NetServerSetInfo",
    "NetServerComputerNameAdd",
    "NetServerGetInfo",
    "I_NetDfsGetVersion",
    "LocalSessionEnum",
    "LocalShareEnum",
    "NetShareDelEx",
    "NetShareSetInfo",
    "NetpsPathType",
    "LocalSessionDel"
  ],
  "srvsvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "srwmi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "sscore.dll": [
    "SsCoreFileNotifyClose",
    "SsCoreDeregisterNetnameForMultichannel",
    "SsCoreNodeSetInfo",
    "SsCoreUnlockVolumes",
    "SsCoreShareAddEx",
    "SsCoreSessionEnlist",
    "SsCoreShareCleanup",
    "SsCoreAliasDelEx",
    "SsCoreFreeBuffer",
    "SsCoreAliasAddEx",
    "SsCoreAliasAdd",
    "SsCoreFileEnum",
    "SsCoreFileDel",
    "SsCoreServerTransportSetInfo",
    "SsCoreShareDel",
    "SsCoreShareAdd",
    "SsCoreInvalidationRequest",
    "SsCoreShareSetInfo",
    "SsCoreShareGetInfo",
    "SsCoreRegisterNetnameForMultichannel",
    "SsCoreSessionDel",
    "SsCoreShareShutdownForScope",
    "SsCoreInitializeEx",
    "SsCoreLockVolumes",
    "SsCoreUninitialize",
    "SsCoreInitialize",
    "SsCoreSessionEnum",
    "SsCoreAliasDel"
  ],
  "sscoreext.dll": [
    "SsCoreExtMiOperationOptionsSetResourceUriPrefix",
    "SsCoreExtMiApplicationNewOperationOptions",
    "SsCoreExtMiApplicationNewParameterSet",
    "SsCoreExtMiInstanceDelete",
    "SsCoreExtMiApplicationNewSession",
    "SsCoreExtMiApplicationInitialize",
    "SsCoreExtMiInstanceAddElement",
    "SsCoreExtMiOperationGetInstance",
    "SsCoreExtMiApplicationClose",
    "SsCoreExtMiSessionInvoke",
    "SsCoreExtMiOperationOptionsDelete",
    "SsCoreExtMiOperationClose",
    "SsCoreExtMiSessionClose"
  ],
  "ssdpapi.dll": [
    "FindServices",
    "FindServicesCallback",
    "FindServicesEx",
    "FreeSsdpMessage",
    "DHSetICSInterfaces",
    "RegisterAliveNotificationOnNetworkEx",
    "DeregisterNotification",
    "RegisterNotificationEx",
    "GetNextServiceEx",
    "FreeSsdpMessageEx",
    "DisableFirewallRule",
    "FindServicesCancel",
    "SsdpStartup",
    "EnableFirewallRule",
    "FindServicesCallbackEx",
    "EndRegisterPropChangeNotificationEx",
    "CleanupCache",
    "SsdpCleanup",
    "BeginRegisterPropChangeNotificationEx",
    "RegisterService",
    "FindServicesOnNetworkCallbackEx",
    "RegisterServiceEx",
    "DeregisterService",
    "GetFirstService",
    "FindServicesClose",
    "DHSetICSOff",
    "GetFirstServiceEx",
    "RegisterNotification",
    "GetNextService"
  ],
  "ssdpsrv.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "sspicli.dll": [
    "AcquireCredentialsHandleA",
    "LogonUserExExW",
    "SspiUnmarshalAuthIdentityInternal",
    "AcceptSecurityContext",
    "RevertSecurityContext",
    "SspiMarshalAuthIdentity",
    "QuerySecurityPackageInfoW",
    "GetSecurityUserInfo",
    "QueryContextAttributesW",
    "LsaRegisterLogonProcess",
    "CredMarshalTargetInfo",
    "SaslIdentifyPackageW",
    "AddSecurityPackageW",
    "ImportSecurityContextA",
    "DeleteSecurityContext",
    "AddCredentialsW",
    "SspiPrepareForCredWrite",
    "SetCredentialsAttributesA",
    "SspiEncryptAuthIdentityEx",
    "SspiFreeAuthIdentity",
    "SaslIdentifyPackageA",
    "AddSecurityPackageA",
    "ExportSecurityContext",
    "SeciFreeCallContext",
    "DecryptMessage",
    "SaslGetContextOption",
    "EnumerateSecurityPackagesW",
    "ChangeAccountPasswordW",
    "ImpersonateSecurityContext",
    "SspiGetTargetHostName",
    "InitializeSecurityContextW",
    "LsaLogonUser",
    "LsaRegisterPolicyChangeNotification",
    "SspiDecryptAuthIdentity",
    "SetContextAttributesA",
    "QuerySecurityContextToken",
    "UnsealMessage",
    "ImportSecurityContextW",
    "SetCredentialsAttributesW",
    "SaslGetProfilePackageA",
    "LsaDeregisterLogonProcess",
    "SaslGetProfilePackageW",
    "FreeCredentialsHandle",
    "VerifySignature",
    "LsaLookupAuthenticationPackage",
    "QuerySecurityPackageInfoA",
    "SaslEnumerateProfilesW",
    "QueryContextAttributesA",
    "AcquireCredentialsHandleW",
    "SaslAcceptSecurityContext",
    "MakeSignature",
    "FreeContextBuffer",
    "LsaFreeReturnBuffer",
    "EncryptMessage",
    "LsaGetLogonSessionData",
    "SspiCompareAuthIdentities",
    "CredUnmarshalTargetInfo",
    "SealMessage",
    "SecCacheSspiPackages",
    "LsaEnumerateLogonSessions",
    "LsaConnectUntrusted",
    "InitSecurityInterfaceW",
    "SetContextAttributesW",
    "SeciAllocateAndSetCallFlags",
    "SspiIsAuthIdentityEncrypted",
    "SspiUnmarshalAuthIdentity",
    "SspiDecryptAuthIdentityEx",
    "SeciAllocateAndSetIPAddress",
    "SecInitUserModeContext",
    "GetUserNameExA",
    "SecDeleteUserModeContext",
    "SaslEnumerateProfilesA",
    "SspiCopyAuthIdentity",
    "LsaUnregisterPolicyChangeNotification",
    "SspiPrepareForCredRead",
    "SaslInitializeSecurityContextW",
    "SspiExcludePackage",
    "SspiEncodeStringsAsAuthIdentity",
    "QueryCredentialsAttributesW",
    "SspiEncodeAuthIdentityAsStrings",
    "AddCredentialsA",
    "SspiGetComputerNameForSPN",
    "GetUserNameExW",
    "SaslInitializeSecurityContextA",
    "QueryCredentialsAttributesA",
    "SspiZeroAuthIdentity",
    "SspiEncryptAuthIdentity",
    "InitSecurityInterfaceA",
    "EnumerateSecurityPackagesA",
    "InitializeSecurityContextA",
    "SspiLocalFree",
    "DeleteSecurityPackageA",
    "CompleteAuthToken",
    "SspiValidateAuthIdentity",
    "DeleteSecurityPackageW",
    "ApplyControlToken",
    "SaslSetContextOption",
    "LsaCallAuthenticationPackage",
    "ChangeAccountPasswordA"
  ],
  "sspisrv.dll": [
    "SspiSrvClientCallback",
    "SspiSrvInitialize"
  ],
  "sstpsvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "stclient.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "sti.dll": [
    "public: void __thiscall BUFFER_CHAIN_ITEM::`default constructor closure'(void)",
    "SelectDeviceDialog2",
    "public: void __thiscall BUFFER_CHAIN_ITEM::SetUsed(unsigned long)",
    "public: __thiscall BUFFER_CHAIN::~BUFFER_CHAIN(void)",
    "public: __thiscall BUFFER::BUFFER(unsigned int)",
    "DllRegisterServer",
    "DllUnregisterServer",
    "public: void __thiscall BUFFER::`default constructor closure'(void)",
    "DllCanUnloadNow",
    "MigrateRegisteredSTIAppsForWIAEvents",
    "public: __thiscall BUFFER::~BUFFER(void)",
    "StiCreateInstance",
    "public: __thiscall BUFFER_CHAIN_ITEM::~BUFFER_CHAIN_ITEM(void)",
    "public: unsigned int __thiscall BUFFER::QuerySize(void)const",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "public: __thiscall BUFFER_CHAIN::BUFFER_CHAIN(void)",
    "StiCreateInstanceW",
    "public: unsigned long __thiscall BUFFER_CHAIN_ITEM::QueryUsed(void)const",
    "public: __thiscall BUFFER_CHAIN_ITEM::BUFFER_CHAIN_ITEM(unsigned int)",
    "public: void * __thiscall BUFFER::QueryPtr(void)const"
  ],
  "sti_ci.dll": [
    "DestroyWiaDeviceList",
    "SetWiaDeviceProperty",
    "CreateWiaDeviceList",
    "GetWiaDeviceProperty",
    "InstallWiaService",
    "ClassInstall",
    "InstallWiaDevice",
    "DisableWiaDevice",
    "UninstallWiaDevice",
    "WiaAddDevice",
    "WiaCreatePortList",
    "WiaRemoveDevice",
    "CoinstallerEntry",
    "EnableWiaDevice",
    "int __stdcall WiaDeviceEnum(void)",
    "WiaDestroyPortList",
    "AddDevice"
  ],
  "stobject.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "storagewmi.dll": [
    "DllUnregisterServer",
    "DllMain",
    "GetProviderClassID",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "MI_Main"
  ],
  "storagewmi_passthru.dll": [
    "CreatePassThrough"
  ],
  "storewuauth.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "streamci.dll": [
    "StreamingDeviceClassInstaller",
    "StreamingDeviceSetup",
    "StreamingDeviceRemoveA",
    "StreamingDeviceRemoveW",
    "StreamingDeviceSetupA",
    "StreamingDeviceRemove",
    "SwEnumCoInstaller",
    "StreamingDeviceSetupW"
  ],
  "sud.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "svsvc.dll": [
    "ServiceCtrlHandler",
    "ServiceMain"
  ],
  "swprv.dll": [
    "ServiceMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "sxproxy.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "sxs.dll": [
    "SxsOleAut32MapIIDOrCLSIDToTypeLibrary",
    "CreateAssemblyCache",
    "SxsRunDllInstallAssemblyW",
    "SxsFindClrClassInformation",
    "SxsLookupClrGuid",
    "SxsQueryManifestInformation",
    "SxsOleAut32RedirectTypeLibrary",
    "SxsOleAut32MapReferenceClsidToConfiguredClsid",
    "SxspGenerateManifestPathOnAssemblyIdentity",
    "SxsGenerateActivationContext",
    "SxsOleAut32MapConfiguredClsidToReferenceClsid",
    "SxsProbeAssemblyInstallation",
    "CreateAssemblyNameObject",
    "SxsUninstallW",
    "SxsOleAut32MapIIDToTLBPath",
    "SxsBeginAssemblyInstall",
    "SxsRunDllInstallAssembly",
    "SxsInstallW",
    "SxsOleAut32MapIIDToProxyStubCLSID",
    "SxsFindClrSurrogateInformation",
    "SxsEndAssemblyInstall"
  ],
  "sxshared.dll": [
    "HRESULTFromNTSTATUS",
    "SxTracerDebuggerBreak",
    "Win32FromHRESULT",
    "Win32FromNTSTATUS",
    "SxTracerShouldTrackFailure",
    "SxTracerGetThreadContextRetail",
    "GetLastFailureAsHRESULT",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "SxTracerGetThreadContextDebug",
    "DllUnregisterServer"
  ],
  "sxssrv.dll": [
    "ServerDllInitialization"
  ],
  "sxsstore.dll": [
    "SxsStoreFinalize",
    "DllMain",
    "DllGetClassObject",
    "SxsStoreInitialize"
  ],
  "synceng.dll": [
    "BeginReconciliation",
    "RemoveTwinFromTwinList",
    "ReleaseTwinHandle",
    "DeleteTwin",
    "DestroyRecList",
    "SaveBriefcase",
    "CreateFolderTwinList",
    "RemoveAllTwinsFromTwinList",
    "GetFolderTwinStatus",
    "CountSourceFolderTwins",
    "AddFolderTwin",
    "CompareFileStamps",
    "AddObjectTwin",
    "AnyTwins",
    "GetFileStamp",
    "EndReconciliation",
    "CreateTwinList",
    "ReconcileItem",
    "GetVolumeDescription",
    "FindNextBriefcase",
    "IsPathOnVolume",
    "CloseBriefcase",
    "AddAllTwinsToTwinList",
    "FindFirstBriefcase",
    "ClearBriefcaseCache",
    "GetObjectTwinHandle",
    "CreateRecList",
    "IsFolderTwin",
    "IsOrphanObjectTwin",
    "FindBriefcaseClose",
    "DestroyTwinList",
    "AddTwinToTwinList",
    "OpenBriefcase",
    "DeleteBriefcase",
    "DestroyFolderTwinList",
    "GetOpenBriefcaseInfo"
  ],
  "syncui.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "Briefcase_IntroW"
  ],
  "sysclass.dll": [
    "StorageCoInstaller"
  ],
  "sysmain.dll": [
    "CloseReadyBoostPerfData",
    "RDBMgmtLaunchPropertiesW",
    "DllGetClassObject",
    "PfSvUnattendCallback",
    "CollectReadyBoostPerfData",
    "AgPdLoad",
    "DllUnregisterServer",
    "GetProviderClassID",
    "PfSvSysprepCleanup",
    "AgGlLoad",
    "AgTwLoad",
    "DllCanUnloadNow",
    "SysMtServiceMain",
    "PfSvWsSwapAssessmentTask",
    "DllRegisterServer",
    "OpenReadyBoostPerfData",
    "MI_Main"
  ],
  "sysntfy.dll": [
    "SysNotifyStopServer",
    "SysNotifyStartServer"
  ],
  "syssetup.dll": [
    "AsrFreeContext",
    "AsrAddSifEntryA",
    "AsrAddSifEntryW",
    "AsrCreateStateFileA",
    "SetupSetDisplay",
    "SetupInfObjectInstallActionW",
    "AsrCreateStateFileW",
    "AsrRestorePlugPlayRegistryData",
    "SetupChangeFontSize",
    "GetAnswerFileSetting",
    "WaitForSamService"
  ],
  "systemcpl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "TSChannel.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "TSErrRedir.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "TSWorkspace.dll": [
    "WorkspaceStatusNotify",
    "RADCProcessGroupPolicyEx",
    "TaskUpdateWorkspacesIfNeeded",
    "WorkspaceSilentSetupW",
    "TaskUpdateWorkspaces2",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "WorkspaceStatusNotify2",
    "TaskUpdateWorkspaces"
  ],
  "TSpkg.dll": [
    "SpLsaModeInitialize",
    "SpUserModeInitialize"
  ],
  "TabSvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "Tabbtn.dll": [
    "public: void __thiscall ATL::CSimpleMap >::RemoveAll(void)",
    "public: long __thiscall CActions::Init(void)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,struct ACTION * const &)",
    "public: int __thiscall ATL::CSimpleMap >::RemoveAt(int)",
    "public: unsigned long __thiscall ATL::CSimpleMap >::ReverseLookup(class CButtonImages * const &)const",
    "public: class COrientation * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "private: long __thiscall CButtonMonitor::ProcessEvent(unsigned long,int)",
    "public: __thiscall ATL::CSimpleArray >::~CSimpleArray >(void)",
    "public: long __thiscall CButtonConfig::RegReadOrientationSeq(void)",
    "private: long __thiscall CButtonMonitor::OnActionSetOrientation(class CButtonAction *,int,int)",
    "private: long __thiscall CButtonMonitor::ReleaseDownButtons(void)",
    "public: unsigned short const * __thiscall COrientation::GetKeyName(void)",
    "public: int __thiscall ATL::CSimpleMap >::Add(unsigned long const &,class CButtonImages * const &)",
    "public: class ATL::CSimpleArray > & __thiscall ATL::CSimpleArray >::operator=(class ATL::CSimpleArray > const &)",
    "public: class CButtonConfig & __thiscall CButtonConfig::operator=(class CButtonConfig const &)",
    "public: long __thiscall CButtonConfig::LoadSettings(void)",
    "public: unsigned long __thiscall COrientation::GetMode(void)",
    "public: __thiscall CButtonSettings::CButtonSettings(class CButtonSettings const &)",
    "public: class CButtonImages * & __thiscall ATL::CSimpleMap >::GetValueAt(int)const",
    "public: __thiscall ATL::CSimpleArray >::CSimpleArray >(class ATL::CSimpleArray > const &)",
    "private: long __thiscall CButtonMonitor::DoButtonAction(class CButtonAction *,unsigned long,int,int)",
    "public: class CButtonImages * __thiscall ATL::CSimpleMap >::Lookup(unsigned long const &)const",
    "public: long __thiscall CButtonAction::Clone(class CButtonAction * *)const",
    "public: struct HBITMAP__ * __thiscall CButtonSettings::GetDetailImage(unsigned long,unsigned long)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,class CButtonSetting * const &)",
    "public: __thiscall CButtonMonitor::CButtonMonitor(void)",
    "public: unsigned long __thiscall CButtonSetting::GetId(void)",
    "private: int __thiscall CButtonMonitor::InSession0(void)",
    "public: class CActions & __thiscall CActions::operator=(class CActions const &)",
    "HandleTabletButtonMessages",
    "public: struct ACTION * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "private: long __thiscall CButtonMonitor::DoBuiltInAction(class CButtonAction *,int,int)",
    "public: unsigned short const * __thiscall COrientation::GetDescription(void)",
    "public: struct HBITMAP__ * __thiscall CButtonSettings::GetLocationImage(unsigned long,unsigned long)",
    "public: __thiscall CActions::~CActions(void)",
    "public: static void __stdcall CButtonMonitor::WinEventProc(struct HWINEVENTHOOK__ *,unsigned long,struct HWND__ *,long,long,unsigned long,unsigned long)",
    "public: class CButtonAction & __thiscall CButtonAction::operator=(class CButtonAction const &)",
    "public: int __thiscall CButtonAction::IsSameAction(class CButtonAction const *)const",
    "public: long __thiscall CButtonMonitor::UnregisterButtonDevices(void)",
    "public: class COrientation & __thiscall COrientation::operator=(class COrientation const &)",
    "public: class CHidButton & __thiscall CHidButton::operator=(class CHidButton const &)",
    "public: long __thiscall CButtonSettings::GetButtonFromId(unsigned long,class CButtonSetting * *)",
    "public: unsigned long __thiscall CButtonSettings::GetFnKeyButtonId(void)",
    "public: long __thiscall CButtonSetting::MakeAllUserActionsEqual(unsigned long)",
    "public: long __thiscall CFunctionNotification::Show(void)",
    "public: int __thiscall ATL::CSimpleArray >::Add(struct ACTION * const &)",
    "public: class CButtonSetting * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: class CButtonAction * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: int __thiscall ATL::CSimpleArray >::Remove(class COrientation * const &)",
    "public: static unsigned long CButtonMonitor::sm_dwPopupCount",
    "public: void __thiscall ATL::CSimpleArray >::RemoveAll(void)",
    "public: __thiscall CButtonSetting::CButtonSetting(class CButtonSetting const &)",
    "UninitializeTabletButtons",
    "public: int __thiscall ATL::CSimpleArray >::Find(class CButtonAction * const &)const",
    "public: int __thiscall ATL::CSimpleArray >::RemoveAt(int)",
    "public: long __thiscall CButtonMonitor::RegisterButtonDevices(void)",
    "public: unsigned long __thiscall CButtonConfig::GetOrientSeqCount(void)const",
    "public: long __thiscall CButtonMonitor::Init(struct HWND__ *)",
    "private: int __thiscall CButtonMonitor::ShouldSendEscapeForBack(void)",
    "public: __thiscall CButtonConfig::CButtonConfig(class CButtonConfig const &)",
    "public: class CButtonAction * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "private: long __thiscall CButtonMonitor::OnActionLaunchApp(class CButtonAction *,int,int)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,class CButtonAction * const &)",
    "public: long __thiscall CHidButton::DispatchHidBtnEvents(struct HRAWINPUT__ *)",
    "public: long __thiscall CButtonConfig::Init(int)",
    "public: struct ACTION * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "private: static void __stdcall CButtonMonitor::SendVKey(unsigned char,unsigned char,int)",
    "public: class CButtonSetting & __thiscall CButtonSetting::operator=(class CButtonSetting const &)",
    "public: class CButtonConfig * __thiscall CButtonMonitor::GetButtonConfig(void)",
    "public: unsigned long __thiscall CButtonAction::GetRegType(void)const",
    "public: struct ACTION * __thiscall CActions::FindActionById(unsigned long)",
    "public: struct ACTION * __thiscall CActions::GetActionAt(int)",
    "public: __thiscall CButtonMonitor::CButtonMonitor(class CButtonMonitor const &)",
    "public: int __thiscall CButtonAction::CanRepeat(void)const",
    "public: long __thiscall COrientation::Init(struct HKEY__ *)",
    "public: unsigned long const __thiscall CButtonAction::GetDataDWORD(void)const",
    "private: void __thiscall CButtonConfig::ResetDeprecatedAction(class CButtonAction *)",
    "private: int __thiscall CHidButton::GetHidBtnUsages(struct _hidbtndev *,struct tagRAWINPUT *,unsigned short,unsigned short,struct _USAGE_AND_PAGE *,unsigned long *)",
    "public: long __thiscall CButtonConfig::RegReadButtonsSettings(void)",
    "public: long __thiscall CFunctionNotification::Hide(void)",
    "public: int __thiscall ATL::CSimpleArray >::Add(class CButtonSetting * const &)",
    "public: int __thiscall CHidButton::UnregisterHidBtnDevice(struct _hidbtndev *,unsigned long *)",
    "public: __thiscall ATL::CSimpleArray >::CSimpleArray >(void)",
    "public: __thiscall CButtonSettings::~CButtonSettings(void)",
    "private: void __thiscall CButtonMonitor::OnButtonUp(unsigned int,long)",
    "private: long __thiscall CButtonMonitor::OnActionUnknown(class CButtonAction *,int,int)",
    "public: static int __stdcall CButtonMonitor::IsActionUnsupported(unsigned long)",
    "public: unsigned long & __thiscall ATL::CSimpleMap >::GetKeyAt(int)const",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,class COrientation * const &)",
    "public: unsigned long __thiscall COrientation::GetDefSeq(void)",
    "public: int __thiscall ATL::CSimpleArray >::Add(class CButtonAction * const &)",
    "public: class ATL::CSimpleMap > & __thiscall ATL::CSimpleMap >::operator=(class ATL::CSimpleMap > const &)",
    "public: unsigned short const * __thiscall CButtonConfig::GetDisplayOrientationName(unsigned long)",
    "private: void __thiscall CButtonMonitor::OnInput(unsigned int,long)",
    "public: class CFunctionNotification & __thiscall CFunctionNotification::operator=(class CFunctionNotification const &)",
    "public: static long __stdcall CFunctionNotification::WindowProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "private: static long __stdcall CButtonMonitor::ShowWindowSwitchWindow(void)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,class CButtonSetting * const &)",
    "public: void __thiscall ATL::CSimpleMap >::InternalSetAtIndex(int,unsigned long const &,class CButtonImages * const &)",
    "public: struct ACTION * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: void __thiscall CButtonMonitor::OnMessage(unsigned int,unsigned int,long)",
    "public: __thiscall CButtonSetting::CButtonSetting(void)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(class CButtonAction * const &)",
    "private: long __thiscall CButtonMonitor::OnActionSendKey(class CButtonAction *,int,int)",
    "public: static long __stdcall CButtonMonitor::CreateExtendedActionObject(struct IUnknown * *)",
    "public: unsigned long __thiscall CButtonSetting::GetFlags(void)",
    "private: void __thiscall CButtonMonitor::OnRepeatTimer(void)",
    "public: __thiscall CActions::CActions(void)",
    "public: class CButtonSetting * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "private: void __thiscall CButtonMonitor::OnDisplayChange(unsigned int,long)",
    "private: long __thiscall CButtonMonitor::ReleaseRepeatOrHoldButton(void)",
    "private: long __thiscall CButtonMonitor::NotifyFnMode(int)",
    "public: int __thiscall CActions::GetCount(void)",
    "private: void __thiscall CButtonMonitor::OnHoldTimer(void)",
    "public: class CButtonSetting * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "private: long __thiscall CFunctionNotification::CreateTrayWindow(void)",
    "private: long __thiscall CButtonMonitor::OnActionWindowsFlip3d(class CButtonAction *,int,int)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(class CButtonSetting * const &)",
    "public: int __thiscall CButtonSettings::GetButtonCount(void)const",
    "private: long __thiscall CButtonMonitor::OnActionAppCommand(class CButtonAction *,int,int)",
    "public: __thiscall CButtonSetting::~CButtonSetting(void)",
    "public: long __thiscall CButtonAction::Set(class CButtonAction const *)",
    "private: long __thiscall CButtonMonitor::OnActionWindowsFlip(class CButtonAction *,int,int)",
    "public: __thiscall CHidButton::~CHidButton(void)",
    "public: static long __stdcall CButtonConfig::RegReadAndAllocate(struct HKEY__ *,unsigned short const *,unsigned long *,unsigned char * *,unsigned long *)",
    "public: int __thiscall ATL::CSimpleArray >::Find(class COrientation * const &)const",
    "private: void __thiscall CButtonMonitor::OnButtonDown(unsigned int,long)",
    "public: static int __stdcall CButtonAction::IsActionRepeatable(unsigned long)",
    "public: long __thiscall CButtonConfig::RegReadButtonSetting(struct HKEY__ *,int,int)",
    "private: long __thiscall CButtonMonitor::OnActionContextMenu(class CButtonAction *,int,int)",
    "public: __thiscall CButtonConfig::CButtonConfig(void)",
    "private: long __thiscall CButtonMonitor::OnActionDisplayOff(class CButtonAction *,int,int)",
    "public: __thiscall CHidButton::CHidButton(struct HWND__ *,unsigned int,unsigned int)",
    "public: class COrientation * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: __thiscall CFunctionNotification::~CFunctionNotification(void)",
    "public: long __thiscall CButtonConfig::SaveSettings(void)",
    "public: __thiscall ATL::CSimpleMap >::~CSimpleMap >(void)",
    "private: void __thiscall CButtonMonitor::OnFnKeyTimer(void)",
    "public: int __thiscall ATL::CSimpleMap >::SetAt(unsigned long const &,class CButtonImages * const &)",
    "public: unsigned long __thiscall CButtonAction::GetSize(void)const",
    "public: class CButtonSettings & __thiscall CButtonSettings::operator=(class CButtonSettings const &)",
    "InitializeTabletButtons",
    "private: void __thiscall CButtonMonitor::OnSettingChange(unsigned int,long)",
    "public: __thiscall CFunctionNotification::CFunctionNotification(void)",
    "public: int __thiscall ATL::CSimpleMap >::Remove(unsigned long const &)",
    "public: class COrientation * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: void __thiscall CButtonConfig::RegReadActions(struct HKEY__ *,class CButtonSetting *,int)",
    "public: long __thiscall CButtonConfig::UpdateButtonRates(void)",
    "public: __thiscall ATL::CSimpleMap >::CSimpleMap >(void)",
    "private: void __thiscall CButtonMonitor::OnTimer(unsigned int,long)",
    "public: struct _hidbtndev * __thiscall CHidButton::RegisterHidBtnDevice(void *,unsigned long *)",
    "public: unsigned short const * __thiscall CButtonSettings::GetButtonName(int)const",
    "public: void __thiscall CButtonAction::SetId(unsigned long)",
    "private: int __thiscall CButtonSettings::LoadImageDLL(void)",
    "public: int __thiscall CButtonSettings::ShouldButtonShowUI(int)const",
    "public: void __thiscall CButtonConfig::UpdateCurrentDisplayOrientation(void)",
    "public: unsigned short const * __thiscall CButtonSetting::GetButtonName(void)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,class COrientation * const &)",
    "public: int __thiscall ATL::CSimpleArray >::Find(struct ACTION * const &)const",
    "public: unsigned short const * __thiscall CButtonSetting::GetDisallowedActions(void)",
    "public: long __thiscall CButtonConfig::RegReadDisplayOrientations(void)",
    "public: __thiscall COrientation::COrientation(void)",
    "public: long __thiscall CButtonSettings::GetButtonIds(unsigned long *,int)const",
    "public: int __thiscall ATL::CSimpleMap >::FindVal(class CButtonImages * const &)const",
    "public: int __thiscall ATL::CSimpleMap >::FindKey(unsigned long const &)const",
    "public: enum BUTTONACTION_TYPE const __thiscall CButtonAction::GetButtonActionType(void)const",
    "private: long __thiscall CButtonMonitor::ExecuteObject(unsigned short const *,unsigned short const *)",
    "private: long __thiscall CButtonMonitor::RegisterForPopups(void)",
    "public: __thiscall COrientation::~COrientation(void)",
    "public: class CButtonAction * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: int __thiscall ATL::CSimpleArray >::Find(class CButtonSetting * const &)const",
    "private: long __thiscall CButtonMonitor::OnActionMouseWheel(class CButtonAction *,int,int)",
    "public: int __thiscall ATL::CSimpleMap >::GetSize(void)const",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,class CButtonAction * const &)",
    "public: __thiscall CButtonMonitor::~CButtonMonitor(void)",
    "private: long __thiscall CButtonMonitor::SendAppCommand(unsigned short)",
    "public: unsigned long __thiscall CButtonConfig::GetOrientSeq(unsigned int)const",
    "public: int __thiscall ATL::CSimpleMap >::SetAtIndex(int,unsigned long const &,class CButtonImages * const &)",
    "public: __thiscall CActions::CActions(class CActions const &)",
    "public: unsigned short const * __thiscall CButtonSetting::GetAllowedActions(void)",
    "public: struct _hidbtndev * __thiscall CHidButton::FindDeviceByHandle(void *)",
    "public: unsigned long __thiscall CButtonAction::GetId(void)const",
    "public: unsigned long __thiscall CButtonAction::GetOrientationMode(void)const",
    "public: __thiscall CButtonAction::CButtonAction(enum BUTTONACTION_TYPE)",
    "public: unsigned char * __thiscall CButtonAction::GetData(void)const",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,struct ACTION * const &)",
    "public: int __thiscall ATL::CSimpleArray >::Add(class COrientation * const &)",
    "private: static void __stdcall CButtonMonitor::SendModKeys(unsigned char,int)",
    "public: __thiscall CButtonSettings::CButtonSettings(void)",
    "public: __thiscall CButtonConfig::~CButtonConfig(void)",
    "public: long __thiscall CButtonAction::SetData(unsigned char * const,unsigned long)",
    "public: __thiscall CButtonAction::~CButtonAction(void)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(struct ACTION * const &)",
    "private: void __thiscall CButtonMonitor::SetDisplayPower(int)",
    "public: class CButtonMonitor & __thiscall CButtonMonitor::operator=(class CButtonMonitor const &)",
    "public: unsigned long __thiscall CButtonSettings::GetButtonIdFromIndex(unsigned long)",
    "private: long __thiscall CButtonMonitor::SetDisplayOrientation(int)",
    "public: int __thiscall ATL::CSimpleArray >::GetSize(void)const",
    "public: long __thiscall CButtonAction::SetDataDWORD(unsigned long)",
    "private: long __thiscall CButtonMonitor::ProcessAction(unsigned long,int)",
    "public: unsigned long __thiscall CButtonConfig::GetCurrentDisplayOrientation(void)",
    "public: void __thiscall CButtonAction::FreeData(void)",
    "private: int __thiscall CHidButton::FindUsage(struct _USAGE_AND_PAGE *,unsigned long,unsigned short,unsigned short)",
    "public: long __thiscall CButtonSetting::GetActionFromOrientation(unsigned long,class CButtonAction * *,class CButtonAction * *,class CButtonAction * *)"
  ],
  "TabbtnEx.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "TapiMigPlugin.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "TapiSysprep.dll": [
    "TapiSysPrepClean"
  ],
  "TaskSchdPS.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "TimeBrokerClient.dll": [
    "TbUpdateEvent",
    "TbQueryEventData",
    "TbEnumerateEvents",
    "TbCreateEvent",
    "TbDeleteEvent"
  ],
  "TimeBrokerServer.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "TimeDateMUICallback.dll": [
    "OnMachineUILanguageSwitch"
  ],
  "TimeSyncTask.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "TpmTasks.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "TsPnPRdrCoInstaller.dll": [
    "TsPnPRdrCoInstaller"
  ],
  "TsUsbGDCoInstaller.dll": [
    "TsUsbGDCoInstaller"
  ],
  "TsUsbRedirectionGroupPolicyExtension.dll": [
    "ExecuteProcessGroupPolicyEx",
    "ExecuteProcessGroupPolicyExWithError",
    "ProcessGroupPolicyEx"
  ],
  "TtlsAuth.dll": [
    "EapPeerGetInfo",
    "EapPeerFreeMemory",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "EapPeerFreeErrorMemory",
    "DllUnregisterServer"
  ],
  "TtlsCfg.dll": [
    "EapPeerGetConfigBlobAndUserBlob",
    "EapPeerGetNextPageGuid",
    "DllRegisterServer",
    "DllUnregisterServer",
    "EapPeerInvokeInteractiveUI",
    "EapPeerConfigXml2Blob",
    "EapPeerConfigBlob2Xml",
    "EapPeerCredentialsXml2Blob",
    "EapPeerFreeMemory",
    "EapPeerGetMethodProperties",
    "DllCanUnloadNow",
    "EapPeerQueryInteractiveUIInputFields",
    "EapPeerQueryUIBlobFromInteractiveUIInputFields",
    "EapPeerCreateMethodConfiguration",
    "EapPeerInvokeConfigUI",
    "DllGetClassObject",
    "EapPeerFreeErrorMemory",
    "EapPeerQueryUserBlobFromCredentialInputFields",
    "EapPeerQueryCredentialInputFields",
    "EapPeerGetIdentityPageGuid",
    "EapPeerInvokeIdentityUI"
  ],
  "t2embed.dll": [
    "TTGetNewFontName",
    "TTRunValidationTestsEx",
    "TTDeleteEmbeddedFont",
    "_TTEmbedFontFromFileA@52",
    "_TTIsEmbeddingEnabled@8",
    "TTGetEmbeddedFontInfo",
    "_TTLoadEmbeddedFont@40",
    "_TTEmbedFont@44",
    "_TTCharToUnicode@24",
    "TTEnableEmbeddingForFacename",
    "TTIsEmbeddingEnabledForFacename",
    "TTEmbedFont",
    "TTRunValidationTests",
    "TTEmbedFontEx",
    "_TTGetEmbeddingType@8",
    "_TTEnableEmbeddingForFacename@8",
    "_TTRunValidationTests@8",
    "TTLoadEmbeddedFont",
    "TTCharToUnicode",
    "TTEmbedFontFromFileA",
    "_TTGetEmbeddedFontInfo@28",
    "_TTIsEmbeddingEnabledForFacename@8",
    "_TTDeleteEmbeddedFont@12",
    "TTGetEmbeddingType",
    "TTIsEmbeddingEnabled"
  ],
  "tapi3.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "tapi32.dll": [
    "lineConfigDialogA",
    "phoneGetIDW",
    "phoneSetButtonInfo",
    "LocWizardDlgProc",
    "lineDialW",
    "internalPerformance",
    "lineGatherDigitsA",
    "lineGetAddressIDW",
    "NonAsyncEventThread",
    "lineGetAgentCapsA",
    "phoneInitializeExW",
    "lineRemoveFromConference",
    "lineGetLineDevStatusA",
    "lineAddProviderW",
    "phoneGetIDA",
    "lineConfigDialogW",
    "phoneGetButtonInfoA",
    "lineClose",
    "lineGetAddressID",
    "phoneGetHookSwitch",
    "lineGetMessage",
    "lineCreateAgentA",
    "lineTranslateDialog",
    "phoneClose",
    "lineSwapHold",
    "lineSetNumRings",
    "lineHandoff",
    "lineSetTollListW",
    "phoneSetVolume",
    "lineGetIconW",
    "lineSetupConferenceW",
    "lineSetAppPriority",
    "lineSetAppSpecific",
    "lineSetCallTreatment",
    "lineBlindTransferW",
    "lineSetQueueMeasurementPeriod",
    "lineSetupTransferA",
    "lineGetQueueListA",
    "lineShutdown",
    "phoneGetIconW",
    "lineSetMediaMode",
    "lineNegotiateAPIVersion",
    "phoneSetDisplay",
    "tapiGetLocationInfoW",
    "linePrepareAddToConference",
    "lineHold",
    "lineGetTranslateCapsW",
    "lineOpenA",
    "lineGetAddressStatusW",
    "lineSetAgentStateEx",
    "lineMonitorTones",
    "lineSetTollListA",
    "MMCGetPhoneStatus",
    "lineGetDevCapsA",
    "internalConfig",
    "lineParkW",
    "lineGetAddressStatusA",
    "phoneInitialize",
    "lineOpen",
    "phoneGetDevCapsA",
    "lineGetAgentActivityListW",
    "lineGetAddressStatus",
    "phoneConfigDialogA",
    "lineCreateAgentW",
    "lineGenerateDigitsA",
    "lineGetCallInfo",
    "MMCGetLineInfo",
    "lineConfigDialogEditW",
    "tapiRequestDrop",
    "phoneGetDevCapsW",
    "lineDrop",
    "MMCSetPhoneInfo",
    "tapiGetLocationInfoA",
    "linePickupW",
    "lineGetAgentStatusA",
    "lineGetRequest",
    "lineMakeCallW",
    "MMCShutdown",
    "lineGetNewCalls",
    "lineSetLineDevStatus",
    "phoneNegotiateExtVersion",
    "MMCInitialize",
    "phoneGetLamp",
    "phoneSetHookSwitch",
    "lineGetAppPriorityW",
    "lineSetStatusMessages",
    "lineCreateAgentSessionW",
    "lineGetProxyStatus",
    "phoneNegotiateAPIVersion",
    "lineMonitorDigits",
    "lineForward",
    "lineGetDevConfig",
    "lineSetupTransfer",
    "phoneSetRing",
    "lineHandoffW",
    "lineGetAgentInfo",
    "lineGetGroupListW",
    "lineGetCallInfoA",
    "lineSetCurrentLocation",
    "phoneGetIcon",
    "phoneGetIconA",
    "lineAddProvider",
    "lineSetAgentActivity",
    "lineGetAddressCapsA",
    "MMCGetPhoneInfo",
    "lineInitializeExA",
    "lineGetQueueInfo",
    "lineGetProviderList",
    "lineUnpark",
    "lineRedirectW",
    "lineGetDevCaps",
    "phoneGetButtonInfo",
    "lineSetCallParams",
    "phoneSetButtonInfoA",
    "lineGetAddressCapsW",
    "MMCAddProvider",
    "lineGatherDigits",
    "lineSetupConferenceA",
    "lineConfigDialogEditA",
    "TAPIWndProc",
    "lineAnswer",
    "lineInitialize",
    "lineUncompleteCall",
    "lineReleaseUserUserInfo",
    "tapiRequestMakeCallW",
    "lineProxyResponse",
    "lineTranslateAddress",
    "lineBlindTransfer",
    "lineGetConfRelatedCalls",
    "lineGetAgentSessionList",
    "lineSetAgentSessionState",
    "MMCGetProviderList",
    "phoneSetButtonInfoW",
    "lineCompleteTransfer",
    "lineGetDevCapsW",
    "lineSetMediaControl",
    "lineGetStatusMessages",
    "MMCConfigProvider",
    "lineGetIDA",
    "phoneGetStatusMessages",
    "lineDeallocateCall",
    "lineMakeCallA",
    "internalCreateDefLocation",
    "lineGetAppPriority",
    "lineSetAppPriorityA",
    "lineUnparkA",
    "lineConfigProvider",
    "lineRedirect",
    "lineSetTollList",
    "LOpenDialAsst",
    "phoneGetRing",
    "lineGetIconA",
    "lineOpenW",
    "phoneGetVolume",
    "phoneInitializeExA",
    "phoneSetGain",
    "lineCompleteCall",
    "lineTranslateDialogW",
    "lineGetCallInfoW",
    "lineSetDevConfigA",
    "tapiGetLocationInfo",
    "phoneSetStatusMessages",
    "phoneGetData",
    "lineDial",
    "phoneGetButtonInfoW",
    "lineConfigDialog",
    "phoneDevSpecific",
    "MMCGetAvailableProviders",
    "internalRemoveLocation",
    "lineGetDevConfigW",
    "lineGetID",
    "lineGetProviderListW",
    "lineGetQueueListW",
    "lineGetAddressCaps",
    "lineGetLineDevStatusW",
    "linePrepareAddToConferenceW",
    "lineSetAgentGroup",
    "lineSetCallQualityOfService",
    "internalNewLocationW",
    "lineGetNumRings",
    "MMCGetDeviceFlags",
    "lineTranslateDialogA",
    "linePark",
    "lineSetupConference",
    "lineBlindTransferA",
    "lineForwardA",
    "lineTranslateAddressA",
    "lineGetCountry",
    "lineSendUserUserInfo",
    "lineDevSpecific",
    "phoneGetID",
    "lineSetAppPriorityW",
    "lineSetupTransferW",
    "phoneConfigDialog",
    "lineSetDevConfigW",
    "phoneGetMessage",
    "lineRegisterRequestRecipient",
    "lineGetAgentCapsW",
    "lineGenerateDigits",
    "lineGetRequestW",
    "tapiRequestMediaCall",
    "lineSetTerminal",
    "lineSecureCall",
    "lineGetTranslateCapsA",
    "phoneShutdown",
    "lineGetAgentStatusW",
    "lineGetAgentGroupListW",
    "phoneGetDisplay",
    "linePrepareAddToConferenceA",
    "lineAddToConference",
    "lineUnhold",
    "lineGetIcon",
    "lineGatherDigitsW",
    "lineMonitorMedia",
    "lineGetLineDevStatus",
    "internalRenameLocationW",
    "MMCRemoveProvider",
    "lineDialA",
    "phoneGetGain",
    "lineGetProviderListA",
    "lineRemoveProvider",
    "lineProxyMessage",
    "linePickup",
    "lineGetCallStatus",
    "lineRedirectA",
    "lineGetAgentGroupListA",
    "lineGenerateTone",
    "lineGetAgentActivityListA",
    "lineGetCountryW",
    "lineGetIDW",
    "GetTapi16CallbackMsg",
    "phoneGetDevCaps",
    "phoneOpen",
    "tapiRequestMakeCallA",
    "lineSetAgentState",
    "lineInitializeExW",
    "lineCreateAgentSessionA",
    "lineSetAgentMeasurementPeriod",
    "phoneGetStatus",
    "lineGetAddressIDA",
    "tapiRequestMediaCallA",
    "lineGetRequestA",
    "tapiRequestMakeCall",
    "MMCGetLineStatus",
    "lineGenerateDigitsW",
    "MMCSetLineInfo",
    "lineAgentSpecific",
    "lineHandoffA",
    "lineDevSpecificFeature",
    "lineSetCallPrivilege",
    "lineSetDevConfig",
    "phoneGetStatusA",
    "tapiRequestMediaCallW",
    "linePickupA",
    "lineParkA",
    "lineUnparkW",
    "lineGetAgentSessionInfo",
    "lineGetTranslateCaps",
    "lineGetCountryA",
    "lineSetCallData",
    "lineTranslateAddressW",
    "lineAccept",
    "LAddrParamsInited",
    "lineMakeCall",
    "MMCGetServerConfig",
    "MMCSetServerConfig",
    "lineGetAppPriorityA",
    "lineConfigDialogEdit",
    "lineForwardW",
    "lineGetDevConfigA",
    "phoneConfigDialogW",
    "lineGetGroupListA",
    "lineNegotiateExtVersion",
    "lineAddProviderA",
    "phoneSetData",
    "phoneSetLamp",
    "TUISPIDLLCallback",
    "phoneGetStatusW"
  ],
  "tapilua.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "tapiperf.dll": [
    "OpenTapiPerformanceData",
    "CloseTapiPerformanceData",
    "CollectTapiPerformanceData"
  ],
  "tapisrv.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "tapiui.dll": "No exports",
  "taskbarcpl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "taskcomp.dll": [
    "ShutdownAdapter",
    "InitializeAdapter",
    "SetSdNotification",
    "UpdateJobStatus",
    "IsRegistering",
    "RegisterTaskNotification",
    "DeleteTaskNotification"
  ],
  "taskschd.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "tbs.dll": [
    "Tbsip_Cancel_Commands",
    "Tbsi_Revoke_Attestation",
    "Tbsip_Submit_Command",
    "Tbsip_Submit_Command_NonBlocking",
    "Tbsip_TestMorBit",
    "Tbsi_Context_Create",
    "Tbsi_Get_TCG_Log",
    "Tbsi_GetDeviceInfo",
    "Tbsip_Context_Close",
    "Tbsi_Get_OwnerAuth",
    "Tbsi_Physical_Presence_Command"
  ],
  "tcpipcfg.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "tcpmib.dll": [
    "public: virtual unsigned long __thiscall CTcpMib::GetNextRequestId(unsigned long *)",
    "private: long __thiscall CTcpMib::GetDeviceIdFromIni(unsigned short const *,unsigned long,unsigned short *,unsigned long,unsigned long *)",
    "public: unsigned long __thiscall CTcpMib::SnmpGet(char const *,char const *,struct SnmpVarBindList *)",
    "public: virtual __thiscall CTcpMibABC::~CTcpMibABC(void)",
    "public: virtual int __thiscall CTcpMib::SupportsPrinterMib(char const *,char const *,unsigned long,int *)",
    "public: virtual long __thiscall CTcpMib::GetDeviceId(unsigned short const *,unsigned long,unsigned short *,unsigned long,unsigned long *)",
    "public: virtual long __thiscall CTcpMib::GetPortList(unsigned short const *,unsigned char *,unsigned long,unsigned long *)",
    "private: static unsigned long __stdcall CTcpMib::SnmpCallback(void *,struct HWND__ *,unsigned int,unsigned int,long,void *)",
    "public: __thiscall CTcpMibABC::CTcpMibABC(void)",
    "private: long __thiscall CTcpMib::GetDeviceIdFromMib(unsigned short const *,unsigned long,unsigned short *,unsigned long,unsigned long *)",
    "public: class CTcpMib & __thiscall CTcpMib::operator=(class CTcpMib const &)",
    "public: virtual unsigned long __thiscall CTcpMib::RegisterDeviceStatusCallback(unsigned long (__stdcall*)(int,char const *,char const *,unsigned long,unsigned long,unsigned long),void * *)",
    "public: __thiscall CTcpMib::CTcpMib(void)",
    "public: virtual unsigned long __thiscall CTcpMib::RequestDeviceStatus(void *,unsigned long,unsigned short const *,unsigned short const *,unsigned long)",
    "public: __thiscall CTcpMibABC::CTcpMibABC(class CTcpMibABC const &)",
    "private: static unsigned long __stdcall CTcpMib::GetStatusFromVBL(void *,struct smiVALUE *,struct smiVALUE *,struct smiVALUE *)",
    "public: virtual unsigned long __thiscall CTcpMib::SnmpGetNext(char const *,char const *,struct AsnObjectIdentifier *,struct SnmpVarBindList *)",
    "public: unsigned long __thiscall CTcpMib::SnmpGetNext(char const *,char const *,struct SnmpVarBindList *)",
    "public: virtual __thiscall CTcpMib::~CTcpMib(void)",
    "public: virtual unsigned long __thiscall CTcpMib::SnmpGet(char const *,char const *,char const *,struct SnmpVarBindList *)",
    "private: long __thiscall CTcpMib::GetPortListFromIni(unsigned short const *,unsigned char *,unsigned long,unsigned long *)",
    "public: virtual unsigned long __thiscall CTcpMib::SnmpGet(char const *,char const *,struct AsnObjectIdentifier *,struct SnmpVarBindList *)",
    "public: virtual void __thiscall CTcpMib::UnInitSnmp(void)",
    "private: long __thiscall CTcpMib::GetPortListFromMib(unsigned short const *,unsigned char *,unsigned long,unsigned long *)",
    "public: virtual unsigned long __thiscall CTcpMib::GetDeviceDescription(char const *,char const *,unsigned long,unsigned short *,unsigned long)",
    "private: static int __stdcall CTcpMib::MapAsynchToPortStatus(unsigned long,struct _PORT_INFO_3W *)",
    "const CTcpMibABC::`vftable'",
    "public: int __thiscall CTcpMib::IsValid(void)const",
    "const CTcpMib::`vftable'",
    "GetTcpMibPtr",
    "public: virtual unsigned long __thiscall CTcpMib::InitSnmp(void)",
    "private: long __thiscall CTcpMib::SupportsPortMonMib(unsigned short const *,int *)",
    "public: class CTcpMibABC & __thiscall CTcpMibABC::operator=(class CTcpMibABC const &)",
    "public: virtual int __thiscall CTcpMib::RFC1157ToString(struct SnmpVarBind *,unsigned short *,unsigned long,unsigned long *)",
    "public: __thiscall CTcpMib::CTcpMib(class CTcpMib const &)"
  ],
  "tcpmon.dll": [
    "public: __thiscall CTcpMibABC::CTcpMibABC(void)",
    "public: virtual unsigned long __thiscall CPortABC::Read(void * const,unsigned char *,unsigned long,unsigned long *)",
    "public: virtual __thiscall CTcpMibABC::~CTcpMibABC(void)",
    "public: virtual __thiscall CPortABC::~CPortABC(void)",
    "public: __thiscall CPortABC::CPortABC(class CPortABC const &)",
    "public: __thiscall CTcpMibABC::CTcpMibABC(class CTcpMibABC const &)",
    "const CPortABC::`vftable'",
    "public: __thiscall CPortABC::CPortABC(void)",
    "public: class CTcpMibABC & __thiscall CTcpMibABC::operator=(class CTcpMibABC const &)",
    "InitializePrintMonitor2",
    "const CTcpMibABC::`vftable'",
    "public: class CPortABC & __thiscall CPortABC::operator=(class CPortABC const &)"
  ],
  "tcpmonui.dll": [
    "LocalAddPortUI",
    "public: __thiscall CTcpMibABC::CTcpMibABC(void)",
    "public: virtual unsigned long __thiscall CPortABC::Read(void * const,unsigned char *,unsigned long,unsigned long *)",
    "public: virtual __thiscall CPortABC::~CPortABC(void)",
    "InitializePrintMonitorUI2",
    "public: __thiscall CPortABC::CPortABC(class CPortABC const &)",
    "public: virtual __thiscall CTcpMibABC::~CTcpMibABC(void)",
    "public: __thiscall CTcpMibABC::CTcpMibABC(class CTcpMibABC const &)",
    "const CPortABC::`vftable'",
    "LocalConfigurePortUI",
    "public: __thiscall CPortABC::CPortABC(void)",
    "public: class CTcpMibABC & __thiscall CTcpMibABC::operator=(class CTcpMibABC const &)",
    "const CTcpMibABC::`vftable'",
    "public: class CPortABC & __thiscall CPortABC::operator=(class CPortABC const &)",
    "InitializePrintMonitorUI"
  ],
  "tdh.dll": [
    "TdhGetWppMessage",
    "TdhEnumerateProviders",
    "TdhSetDecodingParameter",
    "TdhCloseDecodingHandle",
    "TdhEnumerateRemoteWBEMProviders",
    "TdhGetDecodingParameter",
    "TdhQueryProviderFieldInformation",
    "DllCanUnloadNow",
    "TdhLoadManifestFromBinary",
    "TdhGetAllEventsInformation",
    "TdhFormatProperty",
    "TdhEnumerateProviderFilters",
    "TdhGetEventInformation",
    "TdhEnumerateRemoteWBEMProviderFieldInformation",
    "TdhGetWppProperty",
    "TdhEnumerateProviderFieldInformation",
    "TdhGetEventMapInformation",
    "TdhGetPropertyOffsetAndSize",
    "DllGetClassObject",
    "TdhGetPropertySize",
    "TdhLoadManifest",
    "TdhGetProperty",
    "TdhOpenDecodingHandle",
    "TdhQueryRemoteWBEMProviderFieldInformation",
    "TdhUnloadManifest"
  ],
  "termmgr.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "termsrv.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "thawbrkr.dll": [
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "themecpl.dll": [
    "DllCanUnloadNow",
    "OpenThemeActionW",
    "DllGetClassObject"
  ],
  "themeservice.dll": [
    "ThemeServiceMain"
  ],
  "themeui.dll": [
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject"
  ],
  "threadpoolwinrt.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllMain",
    "DllGetClassObject"
  ],
  "thumbcache.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "tlscsp.dll": [
    "LsCsp_DecryptEnvelopedData",
    "LsCsp_StoreSecret",
    "TLSCspShutdown",
    "TLSCspStartInstallCertificateThread",
    "TLSCspInit",
    "LsCsp_EncryptHwid",
    "LsCsp_GetServerData",
    "LsCsp_RetrieveSecret",
    "TLSFreeTSCertificate",
    "TLSGetTSCertificate"
  ],
  "tpmcompc.dll": [
    "DllMain",
    "CHOOSER2_PickTargetComputer"
  ],
  "tpmvsc.dll": [
    "VCardImportRsaKey",
    "VCardUnblockPin",
    "VCardAuthenticatePin",
    "VCardOpen",
    "VCardCreateKey",
    "VCardEncrypt",
    "VCardGetChallenge",
    "DllRegisterServer",
    "DllUnregisterServer",
    "VCardClose",
    "VCardGetPinLength",
    "DllCanUnloadNow",
    "VCardGetKeyType",
    "VCardExportRsaPubKey",
    "VCardChangePin",
    "VCardSetResponse",
    "VCardGetTransportKeyAlg",
    "VCardStorageDecrypt",
    "VCardImportSymKey",
    "VCardInvalidateChallenge",
    "TpmVCardDestroy",
    "DllGetClassObject",
    "VCardDeleteKey",
    "VCardResetPin",
    "VCardDeinitialize",
    "VCardStorageEncrypt",
    "VCardDeauthenticate",
    "VCardDecrypt",
    "TpmVCardCreate",
    "VCardInitialize",
    "VCardSignHash"
  ],
  "tquery.dll": [
    "public: virtual void __thiscall CMemDeSerStream::SkipWChar(unsigned long)",
    "public: static void __stdcall CDriveInfo::GetDrive(unsigned short const *,unsigned short *)",
    "public: virtual unsigned char __thiscall CMemDeSerStream::GetByte(void)",
    "public: virtual void __thiscall CMemSerStream::PutULong(unsigned long)",
    "public: __thiscall CDriveInfo::CDriveInfo(unsigned short const *,unsigned long)",
    "public: __thiscall CPidLookupTable::~CPidLookupTable(void)",
    "public: virtual unsigned short * __thiscall CMemDeSerStream::GetWString(void)",
    "public: virtual long __thiscall CMemDeSerStream::GetLong(void)",
    "public: void __thiscall CFullPropSpec::SetProperty(unsigned long)",
    "public: virtual void __thiscall CMemSerStream::PutDouble(double)",
    "AccessRetailTracer",
    "public: virtual void __thiscall CMemSerStream::PutGUID(struct _GUID const &)",
    "public: __thiscall CFullPath::CFullPath(unsigned short const *)",
    "DllGetClassObject",
    "AccessDebugTracer",
    "ExternPropagateEventToOpenQueries",
    "public: virtual void __thiscall CMemSerStream::PutWString(unsigned short const *)",
    "public: virtual void __thiscall CMemDeSerStream::SkipByte(void)",
    "void * __stdcall ciNewNoThrow(unsigned int)",
    "public: virtual void __thiscall CMemDeSerStream::SkipLong(void)",
    "public: virtual void __thiscall CMemDeSerStream::SkipUShort(void)",
    "public: virtual double __thiscall CMemDeSerStream::GetDouble(void)",
    "public: void __thiscall CFullPath::MakePath(unsigned short const *)",
    "public: virtual float __thiscall CMemDeSerStream::GetFloat(void)",
    "public: virtual void __thiscall CMemSerStream::PutChar(char const *,unsigned long)",
    "public: virtual unsigned long __thiscall CMemDeSerStream::GetULong(void)",
    "public: unsigned long __thiscall CDriveInfo::GetSectorSize(void)",
    "DllUnregisterServer",
    "void __stdcall ciDelete(void *)",
    "public: __thiscall CPidLookupTable::CPidLookupTable(void)",
    "public: virtual void __thiscall CMemDeSerStream::SkipDouble(void)",
    "CreateSecurityStoreStorage",
    "PerfmonClose",
    "public: void __thiscall CUnNormalizer::UnNormalizeKey(class CKeyBuf const &,struct tagPROPVARIANT &,unsigned short *,unsigned long)",
    "public: virtual void __thiscall CMemSerStream::PutByte(unsigned char)",
    "void * __stdcall ciNew(unsigned int)",
    "public: virtual void __thiscall CMemDeSerStream::SkipChar(unsigned long)",
    "PerfmonIDXCollect",
    "CreatePropMapperStorage",
    "public: virtual void __thiscall CMemDeSerStream::GetWChar(unsigned short *,unsigned long)",
    "public: virtual void __thiscall CMemSerStream::PutFloat(float)",
    "protected: void __thiscall CAllocStorageVariant::ResetType(class PMemoryAllocator &)",
    "public: void __thiscall CDriveInfo::GetDiskSpace(__int64 &,__int64 &)",
    "public: virtual unsigned short __thiscall CMemDeSerStream::GetUShort(void)",
    "ExceptInitialize",
    "PerfmonOpen",
    "public: virtual char * __thiscall CMemDeSerStream::GetString(void)",
    "public: virtual void __thiscall CMemSerStream::PutLong(long)",
    "public: class PRcovStorageObj * __thiscall CiStorage::QueryPidLookupTable(unsigned long)",
    "public: void __thiscall CCiFile::Read(void)",
    "public: virtual void __thiscall CMemDeSerStream::GetBlob(unsigned char *,unsigned long)",
    "public: virtual void __thiscall CMemDeSerStream::SkipBlob(unsigned long)",
    "RetailTracerDisable",
    "CIState",
    "public: int __thiscall CFullPropSpec::SetProperty(unsigned short const *)",
    "public: virtual unsigned long __thiscall CMemDeSerStream::PeekULong(void)",
    "public: __thiscall CUnNormalizer::CUnNormalizer(void)",
    "public: virtual void __thiscall CMemSerStream::PutBlob(unsigned char const *,unsigned long)",
    "public: __thiscall XAct::XAct(void)",
    "PerfmonIDXClose",
    "public: __thiscall CFullPropSpec::CFullPropSpec(class CFullPropSpec const &)",
    "_ForceMasterMerge@16",
    "RetailTracerEnable",
    "public: virtual void __thiscall CMemDeSerStream::SkipFloat(void)",
    "UseLowFragmentationHeap",
    "PerfmonCollect",
    "public: virtual void __thiscall CMemSerStream::PutString(char const *)",
    "public: __thiscall CMemSerStream::CMemSerStream(unsigned char *,unsigned long)",
    "public: int __thiscall CDriveInfo::IsWriteProtected(void)",
    "public: int __thiscall CPidLookupTable::Init(class PRcovStorageObj *)",
    "DllRegisterServer",
    "PerfmonIDXOpen",
    "public: void __thiscall CStorageVariant::SetLPWSTR(unsigned short const *,unsigned int)",
    "RetailTracerReleaseAll",
    "public: static int __stdcall CDriveInfo::ContainsDrive(unsigned short const *)",
    "public: virtual __thiscall CPhysStorage::~CPhysStorage(void)",
    "DllCanUnloadNow",
    "public: __thiscall CiStorage::CiStorage(unsigned short const *,unsigned long,struct ICiCAdviseStatus *,unsigned long,int)",
    "public: virtual void __thiscall CMemDeSerStream::SkipGUID(void)",
    "public: unsigned long __thiscall CPidLookupTable::EnumerateProperty(class CFullPropSpec &,unsigned int &)",
    "public: virtual void __thiscall CMemDeSerStream::SkipULong(void)",
    "class CCoTaskAllocator CoTaskAllocator",
    "public: virtual __thiscall CMemSerStream::~CMemSerStream(void)",
    "public: virtual void __thiscall CMemSerStream::PutWChar(unsigned short const *,unsigned long)",
    "public: virtual __thiscall CiStorage::~CiStorage(void)",
    "public: virtual void __thiscall CMemDeSerStream::GetChar(char *,unsigned long)",
    "public: virtual void __thiscall CMemSerStream::PutUShort(unsigned short)",
    "public: int __thiscall CDriveInfo::IsSameDrive(unsigned short const *)",
    "_NtQuerySystemInformation@16",
    "public: virtual void __thiscall CMemDeSerStream::GetGUID(struct _GUID &)"
  ],
  "traffic.dll": [
    "TcDeregisterClient",
    "TcSetFlowW",
    "TcOpenInterfaceA",
    "TcOpenInterfaceW",
    "TcRegisterClient",
    "TcSetFlowA",
    "TcQueryFlowA",
    "TcModifyFlow",
    "TcGetFlowNameW",
    "TcDeleteFilter",
    "TcQueryInterface",
    "TcSetInterface",
    "TcAddFilter",
    "TcEnumerateInterfaces",
    "TcDeleteFlow",
    "TcGetInterfaceList",
    "TcQueryFlowW",
    "TcEnumerateFlows",
    "TcCloseInterface",
    "TcGetFlowNameA",
    "TcSetSocketFlow",
    "TcAddFlow"
  ],
  "trkwks.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "tsbyuv.dll": [
    "DriverProc"
  ],
  "tscfgwmi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "tsddd.dll": "No exports",
  "tsgqec.dll": [
    "InitializeQec",
    "UninitializeQec"
  ],
  "tsmf.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "tspubwmi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "tssrvlic.dll": [
    "SrvLicInitialize",
    "LoadPolicy",
    "Shutdown"
  ],
  "tvratings.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "twext.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "twinapi.dll": [
    "DllGetActivationFactory",
    "PsmBlockAppStateChangeCompletion",
    "BiPtDeleteEvent",
    "BiSetActiveSessionForPackage",
    "PsmRegisterApplicationNotification",
    "BiPtFreeMemory",
    "PsmQueryApplicationList",
    "PsmUnblockAppStateChangeCompletion",
    "PsmWaitForAppResume",
    "BiPtSignalEvent",
    "PsmShutdownApplication",
    "BiNotifyNewSession",
    "BiPtQuerySystemStateBroadcastChannels",
    "PsmUnregisterAppStateChangeNotification",
    "BiChangeSessionState",
    "BiPtQueryWorkItem",
    "DllCanUnloadNow",
    "BiPtActivateWorkItem",
    "PsmSetApplicationState",
    "PsmIsProcessInApplication",
    "BiPtAssociateActivationProxy",
    "BiPtEnumerateBrokeredEvents",
    "DllGetClassObject",
    "BiResetActiveSessionForPackage",
    "PsmQueryCurrentAppState",
    "BiUpdateLockScreenApplications",
    "PsmQueryProcessList",
    "PsmRegisterAppStateChangeNotification",
    "PsmQueryApplicationInformation",
    "BiChangeApplicationStateForPackageName",
    "BiPtQueryBrokeredEvent",
    "BiPtCreateEventForPackageName",
    "BiPtSignalMultipleEvents",
    "BiPtAssociateApplicationExtensionClass",
    "BiPtDisassociateWorkItem",
    "BiPtEnumerateWorkItemsForPackageName"
  ],
  "twinui.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "txflog.dll": [
    "DllGetClassObject"
  ],
  "txfw32.dll": [
    "TxfLogDestroyReadContext",
    "TxfLogRecordGetFileName",
    "TxfLogCreateFileReadContext",
    "TxfLogRecordGetGenericType",
    "TxfLogReadRecords",
    "TxfLogCreateRangeReadContext",
    "TxfSetThreadMiniVersionForCreate",
    "TxfGetThreadMiniVersionForCreate",
    "TxfReadMetadataInfo"
  ],
  "tzres.dll": "No exports",
  "UIAnimation.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "UIAutomationCore.dll": [
    "UiaGetReservedNotSupportedValue",
    "UiaGetReservedMixedAttributeValue",
    "TextRange_Select",
    "TextPattern_GetSelection",
    "UiaRaiseAsyncContentLoadedEvent",
    "TextRange_ScrollIntoView",
    "TextRange_GetEnclosingElement",
    "LegacyIAccessiblePattern_DoDefaultAction",
    "UiaEventRemoveWindow",
    "ScrollPattern_SetScrollPercent",
    "TextRange_GetChildren",
    "TextRange_Clone",
    "ItemContainerPattern_FindItemByProperty",
    "LegacyIAccessiblePattern_SetValue",
    "UiaSetFocus",
    "UiaRaiseAutomationPropertyChangedEvent",
    "DllGetClassObject",
    "LegacyIAccessiblePattern_GetIAccessible",
    "UiaGetPatternProvider",
    "TextRange_RemoveFromSelection",
    "SelectionItemPattern_Select",
    "UiaNodeFromPoint",
    "SelectionItemPattern_RemoveFromSelection",
    "SynchronizedInputPattern_Cancel",
    "WindowPattern_WaitForInputIdle",
    "UiaPatternRelease",
    "TextRange_MoveEndpointByRange",
    "TextPattern_GetVisibleRanges",
    "UiaHostProviderFromHwnd",
    "UiaLookupId",
    "ValuePattern_SetValue",
    "ScrollPattern_Scroll",
    "TransformPattern_Move",
    "UiaDisconnectAllProviders",
    "DllUnregisterServer",
    "TextPattern_get_DocumentRange",
    "TogglePattern_Toggle",
    "ExpandCollapsePattern_Collapse",
    "UiaTextRangeRelease",
    "UiaGetErrorDescription",
    "TextRange_GetAttributeValue",
    "TextRange_ExpandToEnclosingUnit",
    "UiaNodeRelease",
    "UiaRaiseAutomationEvent",
    "UiaProviderFromIAccessible",
    "TextPattern_RangeFromChild",
    "TextRange_FindText",
    "RangeValuePattern_SetValue",
    "TextRange_CompareEndpoints",
    "UiaFind",
    "MultipleViewPattern_SetCurrentView",
    "UiaHTextRangeFromVariant",
    "UiaNodeFromProvider",
    "TextPattern_RangeFromPoint",
    "UiaEventAddWindow",
    "MultipleViewPattern_GetViewName",
    "UiaReturnRawElementProvider",
    "TransformPattern_Rotate",
    "ScrollItemPattern_ScrollIntoView",
    "UiaRegisterProviderCallback",
    "UiaHUiaNodeFromVariant",
    "DockPattern_SetDockPosition",
    "UiaRemoveEvent",
    "GridPattern_GetItem",
    "WindowPattern_SetWindowVisualState",
    "UiaClientsAreListening",
    "UiaHasServerSideProvider",
    "LegacyIAccessiblePattern_Select",
    "SelectionItemPattern_AddToSelection",
    "InvokePattern_Invoke",
    "UiaNavigate",
    "TextRange_Compare",
    "ExpandCollapsePattern_Expand",
    "VirtualizedItemPattern_Realize",
    "TextRange_MoveEndpointByUnit",
    "UiaNodeFromHandle",
    "TextRange_FindAttribute",
    "UiaIAccessibleFromProvider",
    "DllRegisterServer",
    "UiaProviderForNonClient",
    "TextPattern_get_SupportedTextSelection",
    "TextRange_GetText",
    "DllCanUnloadNow",
    "TextRange_Move",
    "UiaNodeFromFocus",
    "UiaRaiseStructureChangedEvent",
    "TextRange_GetBoundingRectangles",
    "WindowPattern_Close",
    "TextRange_AddToSelection",
    "SynchronizedInputPattern_StartListening",
    "UiaHPatternObjectFromVariant",
    "UiaGetRootNode",
    "UiaGetPropertyValue",
    "UiaAddEvent",
    "TransformPattern_Resize",
    "UiaGetUpdatedCache",
    "UiaGetRuntimeId",
    "UiaDisconnectProvider"
  ],
  "UIAutomationCoreRes.dll": "No exports",
  "UIRibbon.dll": [
    "DllCanUnloadNow",
    "DllMain",
    "DllGetClassObject"
  ],
  "UIRibbonRes.dll": "No exports",
  "UXInit.dll": [
    "ThemeWatchForStart",
    "ThemeUserTSReconnect",
    "ThemesOnLogoff",
    "ThemesOnTerminateSession",
    "ThemesOnLogon",
    "ThemesOnDisconnect",
    "ThemesOnReconnect",
    "ThemeUserLogoff",
    "ThemesOnCreateSession",
    "ThemesOnEarlyCreateSession",
    "ThemeUserStartShell",
    "ThemeUserLogon"
  ],
  "UserAccountControlSettings.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "UserLanguageProfileCallback.dll": [
    "OnUserProfileChanged"
  ],
  "UserLanguagesCpl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "uDWM.dll": "No exports",
  "ubpm.dll": [
    "UbpmGenerateTrigger",
    "UbpmOpenTriggerConsumerHandle",
    "UbpmTerminate",
    "UbpmApiBufferFree",
    "UbpmAcquireBackgroundExecutionMode",
    "UbpmOpenRootHandle",
    "UbpmGenerateNotification",
    "UbpmCloseTriggerProviderHandle",
    "UbpmRegisterTriggerConsumer",
    "UbpmInitialize",
    "UbpmConfigureTriggerConsumer",
    "UbpmReleaseBackgroundExecutionMode",
    "UbpmUnregisterTriggerProvider",
    "UbpmControl",
    "UbpmCloseRootHandle",
    "UbpmCloseTriggerConsumerHandle",
    "UbpmQueryTriggerConsumerStatus",
    "UbpmRegisterTriggerProvider",
    "UbpmUnregisterTriggerConsumer",
    "UbpmControlTriggerConsumer",
    "UbpmOpenTriggerProviderHandle"
  ],
  "ucmhc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "udhisapi.dll": [
    "HttpExtensionProc",
    "GetExtensionVersion",
    "TerminateExtension"
  ],
  "uexfat.dll": [
    "public: unsigned long __thiscall FAT::QueryAllocatedClusters(void)const",
    "public: virtual __thiscall EXFAT_VOL::~EXFAT_VOL(void)",
    "public: unsigned long __thiscall FAT::AllocChain(class EXFATBITMAP *,unsigned long,unsigned long *)",
    "public: unsigned char __thiscall EXFAT_DIRENT::SetStartingCluster(unsigned long)",
    "public: __thiscall EXFATDIR::EXFATDIR(void)",
    "public: unsigned char __thiscall EXFAT_DIRENT::VerifyAndFixPhase2(class EXFATBITMAP *,class EXFATBITMAP *,class WSTRING *,unsigned char,unsigned char,unsigned char,enum FIX_LEVEL,unsigned char *,class MESSAGE *)",
    "public: void __thiscall FAT::FreeChain(class EXFATBITMAP *,unsigned long)",
    "Recover",
    "public: __thiscall EXFAT_VOL::EXFAT_VOL(void)",
    "Format",
    "public: __int64 __thiscall EXFAT_DIRENT::QueryFileSize(void)",
    "public: unsigned char __thiscall CLUSTER_CHAIN::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class EXFAT_SA *,class FAT const *,unsigned long,unsigned long,unsigned char)",
    "public: unsigned char __thiscall EXFATDIR::Initialize(class HMEM *,class LOG_IO_DP_DRIVE *,class EXFAT_SA *,class FAT const *,unsigned long,unsigned long,unsigned char)",
    "FormatEx",
    "public: virtual __thiscall EXFAT_DIRENT::~EXFAT_DIRENT(void)",
    "public: unsigned char __thiscall CLUSTER_CHAIN::ReadAndRecordBadSectors(class EXFATSECRUNBITMAP *)",
    "public: virtual unsigned char __thiscall CLUSTER_CHAIN::Read(void)",
    "public: unsigned long __thiscall FAT::QueryLengthOfChain(unsigned long,unsigned long *)const",
    "public: virtual __thiscall EXFATDIR::~EXFATDIR(void)",
    "Chkdsk",
    "public: unsigned char __thiscall CLUSTER_CHAIN::WriteAndSkipBadSectors(void)",
    "GetFilesystemInformation",
    "public: __thiscall CLUSTER_CHAIN::CLUSTER_CHAIN(void)",
    "public: virtual __thiscall CLUSTER_CHAIN::~CLUSTER_CHAIN(void)",
    "public: virtual __thiscall EXFAT_SA::~EXFAT_SA(void)",
    "public: __thiscall EXFAT_DIRENT::EXFAT_DIRENT(void)",
    "public: __thiscall EXFAT_SA::EXFAT_SA(void)",
    "public: unsigned long __thiscall FAT::QueryNthCluster(unsigned long,unsigned long)const",
    "public: unsigned long __thiscall EXFAT_DIRENT::QueryStartingCluster(void)",
    "ChkdskEx",
    "public: unsigned char __thiscall EXFAT_DIRENT::Initialize(class EXFAT_SA *,void *,class EXFATDIR *,unsigned long)",
    "public: unsigned char __thiscall EXFAT_DIRENT::SetFileSize(__int64)",
    "public: virtual unsigned char __thiscall CLUSTER_CHAIN::Write(void)",
    "public: unsigned char __thiscall EXFAT_SA::Initialize(class LOG_IO_DP_DRIVE *,class MESSAGE *)",
    "public: enum FORMAT_ERROR_CODE __thiscall EXFAT_VOL::Initialize(class WSTRING const *,class MESSAGE *,unsigned char,unsigned char,enum _MEDIA_TYPE,unsigned char,unsigned char)"
  ],
  "ufat.dll": [
    "public: unsigned char __thiscall FAT_DIRENT::Initialize(void *,unsigned char)",
    "public: virtual __thiscall EA_HEADER::~EA_HEADER(void)",
    "public: __thiscall REAL_FAT_SA::REAL_FAT_SA(void)",
    "public: unsigned char __thiscall FAT_DIRENT::QueryCreationTime(union _LARGE_INTEGER *)const",
    "public: __thiscall EA_SET::EA_SET(void)",
    "public: unsigned long __thiscall FAT::QueryAllocatedClusters(void)const",
    "public: struct _EA * __thiscall EA_SET::GetEa(unsigned long,long *,unsigned char *)",
    "public: unsigned char __thiscall FAT_DIRENT::QueryName(class WSTRING *)const",
    "public: unsigned char __thiscall FAT_DIRENT::IsValidLastAccessTime(void)const",
    "public: __thiscall FAT_DIRENT::FAT_DIRENT(void)",
    "Recover",
    "public: void __thiscall FAT::FreeChain(unsigned long)",
    "public: unsigned char __thiscall CLUSTER_CHAIN::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class FAT_SA *,class FAT const *,unsigned long,unsigned long)",
    "public: unsigned char __thiscall EA_HEADER::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class FAT_SA *,class FAT const *,unsigned long,unsigned long)",
    "public: unsigned char __thiscall FAT_DIRENT::QueryLastWriteTime(union _LARGE_INTEGER *)const",
    "Format",
    "public: unsigned char __thiscall FAT_DIRENT::QueryLastAccessTime(union _LARGE_INTEGER *)const",
    "public: unsigned char __thiscall REAL_FAT_SA::InitFATChkDirty(class LOG_IO_DP_DRIVE *,class MESSAGE *)",
    "public: __thiscall ROOTDIR::ROOTDIR(void)",
    "FormatEx",
    "public: __thiscall EA_HEADER::EA_HEADER(void)",
    "public: virtual unsigned char __thiscall CLUSTER_CHAIN::Read(void)",
    "public: unsigned long __thiscall FAT::QueryLengthOfChain(unsigned long,unsigned long *)const",
    "public: virtual __thiscall ROOTDIR::~ROOTDIR(void)",
    "public: unsigned char __thiscall EA_SET::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class FAT_SA *,class FAT const *,unsigned long,unsigned long)",
    "public: virtual unsigned char __thiscall EA_SET::Read(void)",
    "public: unsigned long __thiscall REAL_FAT_SA::QueryFreeSectors(void)const",
    "public: unsigned short __thiscall EA_HEADER::QueryEaSetClusterNumber(unsigned short)const",
    "private: unsigned long __thiscall FAT::Index12(unsigned long)const",
    "public: virtual __thiscall FAT_DIRENT::~FAT_DIRENT(void)",
    "public: unsigned char __thiscall FAT_DIRENT::IsValidCreationTime(void)const",
    "public: unsigned char __thiscall FILEDIR::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class FAT_SA *,class FAT const *,unsigned long)",
    "public: unsigned long __thiscall FAT_SA::QueryFileStartingCluster(class WSTRING const *,class HMEM *,class FATDIR * *,unsigned char *,class FAT_DIRENT *)",
    "Chkdsk",
    "public: virtual __thiscall FILEDIR::~FILEDIR(void)",
    "public: unsigned char __thiscall FATDIR::QueryLongName(long,class WSTRING *)",
    "public: unsigned char __thiscall FAT_SA::QueryCensusAndRelocate(struct _CENSUS_REPORT *,class INTSTACK *,unsigned char *)",
    "public: unsigned long __thiscall FAT::AllocChain(unsigned long,unsigned long *)",
    "GetFilesystemInformation",
    "public: virtual unsigned char __thiscall REAL_FAT_SA::Initialize(class LOG_IO_DP_DRIVE *,class MESSAGE *,unsigned char)",
    "public: __thiscall CLUSTER_CHAIN::CLUSTER_CHAIN(void)",
    "public: virtual __thiscall CLUSTER_CHAIN::~CLUSTER_CHAIN(void)",
    "public: unsigned char __thiscall FAT_DIRENT::IsValidLastWriteTime(void)const",
    "public: unsigned char __thiscall ROOTDIR::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,unsigned long,long)",
    "public: unsigned long __thiscall FAT::QueryNthCluster(unsigned long,unsigned long)const",
    "public: virtual __thiscall EA_SET::~EA_SET(void)",
    "public: unsigned char __thiscall FAT_DIRENT::Initialize(void *)",
    "ChkdskEx",
    "public: __thiscall FILEDIR::FILEDIR(void)",
    "public: void * __thiscall FATDIR::SearchForDirEntry(class WSTRING const *)",
    "private: void __thiscall FAT::Set12(unsigned long,unsigned long)",
    "public: virtual __thiscall REAL_FAT_SA::~REAL_FAT_SA(void)",
    "public: __thiscall FAT_SA::FAT_SA(void)",
    "public: virtual unsigned char __thiscall CLUSTER_CHAIN::Write(void)",
    "public: virtual unsigned char __thiscall REAL_FAT_SA::Read(class MESSAGE *)",
    "public: virtual __thiscall FAT_SA::~FAT_SA(void)"
  ],
  "uicom.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "uireng.dll": [
    "UirUpdateRecordingSession",
    "UirStartRecordingSession",
    "UirInitializeEngine",
    "UirGetScreenComment",
    "UirResumeRecordingSession",
    "UirPauseRecordingSession",
    "UirStopRecordingSession",
    "UirUninitializeEngine"
  ],
  "ulib.dll": [
    "public: virtual unsigned char __thiscall STREAM_MESSAGE::Set(unsigned long,enum MESSAGE_TYPE,unsigned long)",
    "public: unsigned char __thiscall SVILOGFILES::Initialize(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long)",
    "public: __thiscall BDSTRING::BDSTRING(void)",
    "public: virtual void __cdecl PROGRAM::Fatal(unsigned long,unsigned long,char *,...)const",
    "public: static void __stdcall SYSTEM::DisplaySystemError(unsigned long,int)",
    "public: __thiscall PATH_ARGUMENT::PATH_ARGUMENT(void)",
    "public: void * __thiscall MEM_ALLOCATOR::Allocate(unsigned long)",
    "public: __thiscall CHKDSK_MESSAGE::CHKDSK_MESSAGE(void)",
    "public: unsigned char __thiscall TIMEINFO::QueryDate(class WSTRING *)const",
    "protected: __thiscall OBJECT::OBJECT(void)",
    "public: virtual __thiscall FSN_FILTER::~FSN_FILTER(void)",
    "const WSTRING::`vftable'",
    "private: static unsigned char WSTRING::_UseConsoleConversions",
    "protected: void __thiscall WSTRING::PutString(unsigned short *)",
    "public: void __thiscall BSTRING::DeleteChAt(unsigned long,unsigned long)",
    "public: unsigned char __thiscall PATH::AppendBase(class WSTRING const *,unsigned char)",
    "public: enum PATH_ANALYZE_CODE __thiscall PATH::AnalyzePath(class WSTRING *,class PATH *,class WSTRING *)",
    "public: __thiscall FSN_FILTER::FSN_FILTER(void)",
    "public: unsigned char __thiscall WSTRING::Replace(unsigned long,unsigned long,class WSTRING const *,unsigned long,unsigned long)",
    "private: static unsigned char WSTRING::_UseAnsiConversions",
    "public: unsigned char __thiscall PATH::EndsWithDelimiter(void)const",
    "public: class WSTRING * __thiscall ARGUMENT::GetLexeme(void)",
    "public: __thiscall MEM_ALLOCATOR::MEM_ALLOCATOR(void)",
    "public: unsigned char __thiscall PATH::TruncateBase(void)",
    "public: unsigned char __thiscall MESSAGE::QueryPackedLog(class HMEM *,unsigned long *)",
    "public: unsigned long __thiscall BSTRING::NextChar(unsigned long)",
    "public: __thiscall FLAG_ARGUMENT::FLAG_ARGUMENT(void)",
    "public: unsigned char __thiscall COMM_DEVICE::CommitState(void)",
    "public: __thiscall TIMEINFO_ARGUMENT::TIMEINFO_ARGUMENT(void)",
    "public: virtual __thiscall CHKDSK_MESSAGE::~CHKDSK_MESSAGE(void)",
    "public: unsigned char __thiscall TIMEINFO::ConvertToUTC(void)",
    "public: virtual __thiscall COMM_DEVICE::~COMM_DEVICE(void)",
    "public: unsigned char __thiscall MESSAGE::LogMessage(class WSTRING const *)",
    "public: class FSN_DIRECTORY * __thiscall FSN_DIRECTORY::CreateDirectoryPath(class PATH const *)const",
    "public: unsigned char __thiscall TIMEINFO::ConvertToLocal(void)",
    "public: static void __stdcall WSTRING::SetConsoleConversions(void)",
    "public: unsigned char __thiscall CHKDSK_MESSAGE::Initialize(class STREAM *,class STREAM *,class STREAM *)",
    "class MACHINE MachinePlatform",
    "public: virtual __thiscall DSTRING::~DSTRING(void)",
    "public: unsigned char __thiscall FSN_FILTER::Initialize(void)",
    "protected: void __thiscall WSTRING::Construct(void)",
    "public: static unsigned short * __stdcall WSTRING::SkipWhite(unsigned short *)",
    "public: unsigned char __thiscall SCREEN::ChangeScreenSize(unsigned short,unsigned short,unsigned char *)",
    "public: class WSTRING & __thiscall WSTRING::operator=(class WSTRING const &)",
    "public: virtual unsigned char __thiscall MESSAGE::IsSuppressedMessage(unsigned char)",
    "public: class WSTRING * __thiscall PATH::QueryFullPathString(void)const",
    "public: virtual unsigned char __cdecl FSTRING::SPrintfAppend(unsigned short const *,...)",
    "public: unsigned char __thiscall BITVECTOR::QuerySetBit(unsigned long,unsigned long)const",
    "public: unsigned long __thiscall OBJECT::QueryClassId(void)const",
    "public: static int (__stdcall*__stdcall SYSTEM::QueryLibraryEntryPoint(class WSTRING const *,class WSTRING const *,void * *))(void)",
    "public: void __thiscall ARGUMENT_LEXEMIZER::SetNoSpcBetweenDstAndSwitch(unsigned char)",
    "public: unsigned char __thiscall MESSAGE::IsLoggingEnabled(void)",
    "public: virtual unsigned char __thiscall CHKDSK_MESSAGE::Set(unsigned long,enum MESSAGE_TYPE,unsigned long)",
    "public: unsigned char __thiscall STRING_ARRAY::Initialize(unsigned long,unsigned long,unsigned long)",
    "public: unsigned long __thiscall WSTRING::Strrchr(unsigned short,unsigned long)const",
    "public: unsigned char __thiscall SCREEN::EraseScreenAndResetAttribute(void)",
    "public: __thiscall DSTRING::DSTRING(class DSTRING const &)",
    "public: static int __stdcall WSTRING::Strcmpis(unsigned short *,unsigned short *)",
    "public: long __thiscall WSTRING::Stricmp(class WSTRING const *,unsigned long,unsigned long,unsigned long,unsigned long)const",
    "public: void __thiscall ARGUMENT_LEXEMIZER::PutSwitches(class WSTRING const *)",
    "public: static class FILE_STREAM * __stdcall FILE_STREAM::Cast(class OBJECT const *)",
    "public: unsigned long __thiscall WSTRING::Strspn(class WSTRING const *,unsigned long)const",
    "public: __thiscall FSTRING::FSTRING(void)",
    "public: long __thiscall WSTRING::Strcmp(class WSTRING const *,unsigned long,unsigned long,unsigned long,unsigned long)const",
    "public: virtual unsigned char __cdecl PROGRAM::DisplayMessage(unsigned long,enum MESSAGE_TYPE,char *,...)const",
    "public: unsigned char __thiscall WSTRING::operator<(class WSTRING const &)const",
    "protected: __thiscall ITERATOR::ITERATOR(void)",
    "public: __thiscall BYTE_STREAM::BYTE_STREAM(void)",
    "public: virtual unsigned char __thiscall FSTRING::Resize(unsigned long)",
    "protected: void __thiscall BSTRING::PutString(char *,unsigned long)",
    "public: unsigned long __thiscall WSTRING::SyncLength(void)",
    "public: virtual void __thiscall PROGRAM::Usage(void)const",
    "public: unsigned char __thiscall FSN_FILTER::DoesNodeMatch(class FSNODE *)",
    "private: void __thiscall BDSTRING::Construct(void)",
    "public: __thiscall MEM_BLOCK_MGR::MEM_BLOCK_MGR(void)",
    "private: static unsigned char __stdcall WSTRING::ConvertUnicodeToOemN(char *,unsigned long,unsigned long *,unsigned short *,unsigned long)",
    "public: class PATH * __thiscall PATH::QueryMountPointPath(void)",
    "public: __thiscall COMM_DEVICE::COMM_DEVICE(void)",
    "public: unsigned char __thiscall LIST::Initialize(void)",
    "public: static class KEYBOARD * __stdcall KEYBOARD::Cast(class OBJECT const *)",
    "public: virtual class OBJECT * __thiscall ARRAY::Remove(class ITERATOR *)",
    "public: class ARRAY * __thiscall FSN_DIRECTORY::QueryFsnodeArray(class FSN_FILTER *)const",
    "public: unsigned char __thiscall COMM_DEVICE::SetXon(unsigned char)",
    "public: unsigned char __thiscall FSN_DIRECTORY::IsEmpty(void)const",
    "public: unsigned char __thiscall COMM_DEVICE::QueryTimeOut(void)const",
    "public: unsigned char __thiscall STREAM_MESSAGE::Initialize(class STREAM *,class STREAM *,class STREAM *)",
    "public: unsigned char __thiscall STRING_ARGUMENT::Initialize(char *)",
    "public: unsigned char __thiscall TIMEINFO::operator<(class TIMEINFO)const",
    "public: virtual __thiscall HMEM::~HMEM(void)",
    "public: unsigned char __thiscall FSN_FILE::Copy(class PATH *,enum _COPY_ERROR *,unsigned long,unsigned long (__stdcall*)(union _LARGE_INTEGER,union _LARGE_INTEGER,union _LARGE_INTEGER,union _LARGE_INTEGER,unsigned long,unsigned long,void *,void *,void *),void *,int *)const",
    "public: __thiscall WSTRING::WSTRING(class WSTRING const &)",
    "public: unsigned char __thiscall BITVECTOR::QueryResetBit(unsigned long,unsigned long)const",
    "public: virtual __thiscall ARGUMENT_LEXEMIZER::~ARGUMENT_LEXEMIZER(void)",
    "public: class WSTRING * __thiscall WSTRING::QueryString(unsigned long,unsigned long)const",
    "public: unsigned char __thiscall SVILOGFILES::DeleteOldest(void)",
    "public: unsigned char __thiscall CLASS_DESCRIPTOR::Initialize(void)",
    "public: unsigned char __thiscall COMM_DEVICE::SetDataBits(unsigned long)",
    "public: unsigned char __thiscall FLAG_ARGUMENT::Initialize(class WSTRING *)",
    "public: virtual unsigned char __thiscall CHKDSK_MESSAGE::SqmExport(unsigned char (__cdecl*)(void *,unsigned long,unsigned char,char *,...),void *)",
    "public: char * __thiscall WSTRING::QuerySTR(unsigned long,unsigned long,char *,unsigned long,unsigned char)const",
    "public: void __thiscall SCREEN::QueryScreenSize(unsigned short *,unsigned short *,unsigned short *,unsigned short *)const",
    "private: unsigned char __thiscall DSTRING::SPrintfWorker(unsigned short const *,char *)",
    "public: void __thiscall BITVECTOR::SetBit(unsigned long,unsigned long)",
    "public: class PATH * __thiscall PATH::QueryFullPath(void)const",
    "public: __thiscall SCREEN::SCREEN(void)",
    "public: virtual unsigned char __cdecl DSTRING::SPrintfAppend(unsigned short const *,...)",
    "public: class WSTRING * __thiscall WSTRING::Strupr(unsigned long,unsigned long)",
    "public: __thiscall LIST::LIST(void)",
    "public: unsigned char __thiscall KEYBOARD::EnableLineMode(void)",
    "public: void __thiscall ARGUMENT_LEXEMIZER::PutSwitches(char const *)",
    "public: static unsigned char __cdecl SQMEXPORT::SqmExport(void *,unsigned long,unsigned char,char *,...)",
    "public: unsigned long __thiscall BITVECTOR::SetSize(unsigned long,enum BIT)",
    "public: unsigned char __thiscall PATH::Initialize(class PATH const *,unsigned char)",
    "public: void __thiscall ARGUMENT_LEXEMIZER::PutSeparators(char const *)",
    "public: unsigned char __thiscall BSTRING::ReplaceWithChars(unsigned long,unsigned long,char,unsigned long)",
    "public: static class SCREEN * __stdcall SCREEN::Cast(class OBJECT const *)",
    "public: __thiscall BITVECTOR::BITVECTOR(void)",
    "public: static unsigned char __stdcall SYSTEM::QueryCurrentDosDriveName(class WSTRING *)",
    "public: static void __stdcall SYSTEM::FreeLibraryHandle(void *)",
    "public: class WSTRING * __thiscall PATH::QueryGuidString(class WSTRING *,unsigned char *,class WSTRING *)",
    "public: unsigned char __thiscall FSNODE::UseAlternateName(void)",
    "const BDSTRING::`vftable'",
    "public: static void __stdcall WSTRING::ResetConversions(void)",
    "public: unsigned short const * __thiscall WSTRING::GetWSTR(void)const",
    "public: unsigned char __thiscall SORTED_LIST::Initialize(unsigned char)",
    "public: unsigned char __thiscall HMEM::Initialize(void)",
    "public: class ARRAY * __thiscall PATH::QueryComponentArray(class ARRAY *)const",
    "public: void __thiscall ARGUMENT_LEXEMIZER::PutMultipleSwitch(char const *)",
    "public: unsigned long __thiscall WSTRING::Truncate(unsigned long)",
    "public: static class FSN_DIRECTORY * __stdcall SYSTEM::QueryDirectory(class PATH const *,unsigned char)",
    "public: unsigned char __thiscall COMM_DEVICE::SetOdsr(unsigned char)",
    "protected: void __thiscall BSTRING::Construct(void)",
    "public: unsigned char __thiscall PATH_ARGUMENT::Initialize(char *,unsigned char)",
    "public: static enum FILE_TYPE __stdcall SYSTEM::QueryFileType(class WSTRING const *)",
    "public: unsigned char __thiscall PRINT_STREAM::Initialize(class PATH const *)",
    "public: unsigned char __thiscall FILE_STREAM::ReadAt(unsigned char *,unsigned long,__int64,enum SEEKORIGIN,unsigned long *)",
    "public: unsigned char __thiscall MEM_BLOCK_MGR::Free(void *)",
    "public: virtual __thiscall MESSAGE_ID_COUNT::~MESSAGE_ID_COUNT(void)",
    "public: long __thiscall WSTRING::Stricmp(class WSTRING const *,unsigned long)const",
    "public: virtual unsigned char __thiscall BDSTRING::Resize(unsigned long)",
    "public: void __thiscall PATH::TruncateNameAtColon(void)",
    "public: unsigned char __thiscall WSTRING::Split(class ARRAY *,class WSTRING const *,unsigned char)const",
    "public: unsigned char __thiscall MACHINE::Initialize(void)",
    "public: unsigned char __thiscall MESSAGE::LogOnly(void)",
    "public: virtual __thiscall MULTIPLE_PATH_ARGUMENT::~MULTIPLE_PATH_ARGUMENT(void)",
    "public: virtual unsigned char __thiscall MESSAGE::IsInSetup(void)",
    "public: class FSTRING & __thiscall FSTRING::operator=(class FSTRING const &)",
    "public: static unsigned char __stdcall SYSTEM::QueryLocalTimeFromUTime(class TIMEINFO const *,class TIMEINFO *)",
    "public: class OBJECT * __thiscall ARRAY::OrderedSearch(class OBJECT *,void * *)",
    "public: unsigned char __thiscall ARRAY::Insert(class OBJECT *,unsigned long)",
    "public: unsigned char __thiscall MESSAGE::DisplayMsg(unsigned long)",
    "public: static int __stdcall MBSTR::Strcmps(char *,char *)",
    "public: unsigned char __thiscall PATH::AppendString(class WSTRING const *)",
    "public: unsigned char __thiscall HMEM::Resize(unsigned long,unsigned long)",
    "public: long __thiscall ADMINFILEPRIVS::EnablePrivileges(void)",
    "public: class FILE_STREAM * __thiscall FSN_FILE::QueryStream(enum STREAMACCESS,unsigned long)",
    "public: unsigned char __thiscall PATH::HasWildCard(void)const",
    "public: __thiscall SORTED_LIST::SORTED_LIST(void)",
    "public: unsigned long __thiscall WSTRING::Strchr(unsigned short,unsigned long)const",
    "public: static unsigned char __stdcall KEYBOARD::EnableBreakHandling(void)",
    "class STREAM * __stdcall Get_Standard_Input_Stream(void)",
    "public: unsigned char __thiscall KEYBOARD::Initialize(unsigned char,unsigned char)",
    "public: unsigned char __thiscall WSTRING::Strcat(class WSTRING const *)",
    "public: unsigned char __thiscall COMM_DEVICE::SetDtrControl(enum DTR_CONTROL)",
    "public: unsigned char __thiscall WSTRING::Initialize(class WSTRING const *,unsigned long,unsigned long)",
    "class STREAM * __stdcall Get_Standard_Error_Stream(void)",
    "public: virtual unsigned char __thiscall CHKDSK_MESSAGE::IsYesResponse(unsigned char)",
    "public: class CLASS_DESCRIPTOR const * __thiscall OBJECT::GetClassDescriptor(void)const",
    "public: virtual __thiscall OBJECT::~OBJECT(void)",
    "public: unsigned char __thiscall TIMEINFO_ARGUMENT::Initialize(char *)",
    "public: unsigned short * __thiscall WSTRING::QueryWSTR(unsigned long,unsigned long,unsigned short *,unsigned long,unsigned char)const",
    "public: __thiscall MESSAGE::MESSAGE(void)",
    "public: unsigned long __thiscall BSTRING::Strchr(char,unsigned long)const",
    "public: unsigned char __thiscall PATH::Initialize(class WSTRING const *,unsigned char)",
    "public: static class WSTRING * __stdcall SYSTEM::QueryEnvironmentVariable(class WSTRING const *)",
    "public: unsigned char __thiscall FSN_DIRECTORY::DeleteDirectory(void)",
    "public: class PATH * __thiscall PATH::QueryPath(void)const",
    "public: unsigned char __thiscall PATH::Initialize(unsigned short const *,unsigned char)",
    "public: virtual void * __thiscall CONT_MEM::Acquire(unsigned long,unsigned long)",
    "class STREAM * __stdcall Get_Standard_Output_Stream(void)",
    "public: virtual __thiscall MESSAGE::~MESSAGE(void)",
    "public: void __thiscall TIMEINFO::Initialize(class TIMEINFO const *)",
    "public: virtual __thiscall ARRAY::~ARRAY(void)",
    "public: static void __stdcall WSTRING::SetAnsiConversions(void)",
    "public: unsigned char __thiscall WSTRING::Initialize(char const *,unsigned long)",
    "public: unsigned char __cdecl MESSAGE::DisplayMsg(unsigned long,enum MESSAGE_TYPE,unsigned long,char const *,...)",
    "public: virtual unsigned char __thiscall STREAM_MESSAGE::IsYesResponse(unsigned char)",
    "public: unsigned char __thiscall STREAM::WriteByte(unsigned char)",
    "public: unsigned char __thiscall WSTRING::operator!=(class WSTRING const &)const",
    "public: __thiscall ARRAY::ARRAY(void)",
    "public: unsigned char __thiscall FSNODE::WorkOnReparsePoint(unsigned char)",
    "public: unsigned char __thiscall SCREEN::Initialize(void)",
    "public: static unsigned char __cdecl SQMEXPORT::FileExport(void *,unsigned long,unsigned char,char *,...)",
    "public: static int __stdcall MBSTR::Strcmpis(char *,char *)",
    "public: unsigned char __thiscall ARGUMENT_LEXEMIZER::DoParsing(class ARRAY *)",
    "public: unsigned char __thiscall KEYBOARD::Flush(void)",
    "public: void __thiscall BITVECTOR::Initialize(unsigned long *,unsigned long)",
    "const BSTRING::`vftable'",
    "public: unsigned char __thiscall ARGUMENT_LEXEMIZER::PrepareToParse(class WSTRING *)",
    "public: unsigned char __thiscall SCREEN::MoveCursorTo(unsigned short,unsigned short)",
    "void __stdcall TrackMsgId(class ARRAY *,unsigned long)",
    "public: class WSTRING * __thiscall PATH::QueryRoot(void)",
    "public: unsigned char __thiscall PATH::ModifyName(class WSTRING const *)",
    "public: unsigned char __thiscall STREAM::ReadMbLine(char *,unsigned long,unsigned long *,unsigned char,unsigned long)",
    "public: virtual unsigned char __thiscall MESSAGE::QueryStringInput(class WSTRING *)",
    "public: unsigned char __thiscall BSTRING::Initialize(void)",
    "public: unsigned char __thiscall MESSAGE::QueryNextLoggedMessage(class FSTRING *)",
    "public: unsigned char __thiscall FLAG_ARGUMENT::Initialize(char *)",
    "public: void __thiscall ARGUMENT_LEXEMIZER::SetCaseSensitive(unsigned char)",
    "public: unsigned char __thiscall COMM_DEVICE::SetRtsControl(enum RTS_CONTROL)",
    "public: class FSNODE * __thiscall FSN_DIRECTORY::GetNext(void * *,unsigned long *)",
    "public: unsigned short __thiscall WSTRING::SetChAt(unsigned short,unsigned long)",
    "public: unsigned char __thiscall REST_OF_LINE_ARGUMENT::Initialize(void)",
    "public: virtual unsigned char __thiscall MESSAGE::IsYesResponse(unsigned char)",
    "public: __thiscall MESSAGE_ID_COUNT::MESSAGE_ID_COUNT(void)",
    "public: virtual class STREAM * __thiscall PROGRAM::GetStandardOutput(void)",
    "public: virtual unsigned char __thiscall STRING_ARRAY::Sort(unsigned char)",
    "public: virtual unsigned long __cdecl MESSAGE::SelectResponse(unsigned long,...)",
    "public: unsigned char __thiscall WSTRING::operator>(class WSTRING const &)const",
    "public: class WSTRING * __thiscall FSTRING::Initialize(unsigned short *,unsigned long)",
    "public: unsigned char __thiscall MESSAGE::DumpDataToLog(void *,unsigned long)",
    "public: __thiscall LONG_ARGUMENT::LONG_ARGUMENT(void)",
    "public: virtual unsigned char __thiscall PROGRAM::DisplayMessage(unsigned long,enum MESSAGE_TYPE)const",
    "public: unsigned char __thiscall FSN_FILTER::SetTimeInfo(class TIMEINFO const *,enum FSN_TIME,unsigned short)",
    "public: unsigned char __thiscall WSTRING::operator>=(class WSTRING const &)const",
    "public: unsigned char __thiscall MESSAGE::Initialize(void)",
    "public: unsigned char __thiscall TIMEINFO::Initialize(struct _FILETIME *)",
    "public: virtual __thiscall STREAM_MESSAGE::~STREAM_MESSAGE(void)",
    "public: unsigned char __thiscall COMM_DEVICE::SetTimeOut(unsigned char)",
    "public: unsigned char __thiscall SVILOGFILES::NewLogFileName(class WSTRING *)",
    "public: virtual unsigned long __thiscall SORTED_LIST::QueryMemberCount(void)const",
    "public: void __thiscall ARGUMENT_LEXEMIZER::PutMultipleSwitch(class WSTRING const *)",
    "public: unsigned long __thiscall WSTRING::Strcspn(class WSTRING const *,unsigned long)const",
    "public: unsigned char __thiscall MESSAGE::LogMsg(unsigned long)",
    "public: unsigned char __thiscall MESSAGE::SetLogOnly(unsigned char)",
    "public: virtual unsigned char __thiscall BDSTRING::NewBuf(unsigned long)",
    "public: static class WSTRING * __stdcall SYSTEM::QueryVolumeLabel(class PATH *,struct _VOL_SERIAL_NUMBER *)",
    "const OBJECT::`vftable'",
    "public: virtual unsigned char __thiscall MESSAGE::IsKeyPressed(unsigned long,unsigned long)",
    "public: __thiscall CONT_MEM::CONT_MEM(void)",
    "public: __thiscall MACHINE::MACHINE(void)",
    "public: __thiscall OBJECT::OBJECT(class OBJECT const &)",
    "public: unsigned char __thiscall MACHINE::IsFMR(void)",
    "public: __thiscall CLASS_DESCRIPTOR::CLASS_DESCRIPTOR(void)",
    "public: static char * __stdcall MBSTR::Strstr(char *,char *)",
    "public: unsigned char __thiscall ARRAY::OrderedInsert(class OBJECT *,void * *)",
    "public: virtual __thiscall BDSTRING::~BDSTRING(void)",
    "public: unsigned char __thiscall FSNODE::SetAttributes(unsigned long,unsigned long *)",
    "public: virtual __thiscall SORTED_LIST::~SORTED_LIST(void)",
    "public: class WSTRING * __thiscall ARGUMENT::GetPattern(void)",
    "public: long __thiscall WSTRING::Strcmp(class WSTRING const *)const",
    "public: __thiscall STREAM_MESSAGE::STREAM_MESSAGE(void)",
    "public: int * __thiscall KEYBOARD::GetPFlagBreak(void)const",
    "public: unsigned char __thiscall WSTRING::Initialize(long)",
    "public: unsigned long __thiscall WSTRING::QueryByteCount(void)const",
    "public: static class PATH * __stdcall SYSTEM::SearchPathW(class WSTRING *,class WSTRING *)",
    "public: virtual unsigned char __thiscall SORTED_LIST::DeleteAllMembers(void)",
    "public: unsigned char __thiscall FSN_FILTER::SetFileName(class WSTRING const *)",
    "public: static enum DRIVE_TYPE __stdcall SYSTEM::QueryDriveType(class WSTRING const *)",
    "private: unsigned long __thiscall BITVECTOR::ComputeCountSet(void)const",
    "public: __thiscall MULTIPLE_PATH_ARGUMENT::MULTIPLE_PATH_ARGUMENT(void)",
    "public: virtual unsigned char __cdecl DSTRING::SPrintf(unsigned short const *,...)",
    "public: unsigned char __thiscall PATH::IsDrive(void)const",
    "public: static int __stdcall WSTRING::Strcmp(unsigned short *,unsigned short *)",
    "public: static unsigned char __stdcall SYSTEM::IsCorrectVersion(void)",
    "const FSTRING::`vftable'",
    "public: void __thiscall MESSAGE::Unlock(void)",
    "public: static unsigned char __stdcall SQMEXPORT::UploadSqmFromFile(void *)",
    "public: virtual __thiscall MEM_BLOCK_MGR::~MEM_BLOCK_MGR(void)",
    "public: __thiscall ARGUMENT_LEXEMIZER::ARGUMENT_LEXEMIZER(void)",
    "public: virtual __thiscall MEM_ALLOCATOR::~MEM_ALLOCATOR(void)",
    "public: __thiscall FSTRING::FSTRING(class FSTRING const &)",
    "public: virtual unsigned char __thiscall MESSAGE::IsInAutoChk(void)",
    "public: static class FSN_FILE * __stdcall SYSTEM::MakeFile(class PATH const *)",
    "public: virtual unsigned char __thiscall SEQUENTIAL_CONTAINER::DeleteAllMembers(void)",
    "public: virtual void * __thiscall HMEM::Acquire(unsigned long,unsigned long)",
    "public: class BSTRING & __thiscall BSTRING::operator=(class BSTRING const &)",
    "public: unsigned char __thiscall ARGUMENT::IsValueSet(void)",
    "unsigned char __stdcall Export(class ARRAY *,unsigned char (__cdecl*)(void *,unsigned long,unsigned char,char *,...),void *)",
    "public: __thiscall ADMINFILEPRIVS::~ADMINFILEPRIVS(void)",
    "public: virtual __thiscall BSTRING::~BSTRING(void)",
    "public: static unsigned char __stdcall KEYBOARD::DisableBreakHandling(void)",
    "public: unsigned char __thiscall WSTRING::QueryNumber(long *,unsigned long,unsigned long)const",
    "public: unsigned char __thiscall BSTRING::Initialize(char const *,unsigned long)",
    "public: unsigned char __thiscall STREAM::ReadLine(class WSTRING *,unsigned char)",
    "protected: void __thiscall OBJECT::Construct(void)",
    "public: __thiscall PRINT_STREAM::PRINT_STREAM(void)",
    "public: static class FSN_DIRECTORY * __stdcall SYSTEM::MakeDirectory(class PATH const *,class PATH const *,enum _COPY_ERROR *,unsigned long (__stdcall*)(union _LARGE_INTEGER,union _LARGE_INTEGER,union _LARGE_INTEGER,union _LARGE_INTEGER,unsigned long,unsigned long,void *,void *,void *),void *,int *,unsigned long)",
    "public: class PATH * __thiscall PATH::QueryWCExpansion(class PATH *)",
    "protected: __thiscall BSTRING::BSTRING(void)",
    "public: class OBJECT & __thiscall OBJECT::operator=(class OBJECT const &)",
    "public: virtual unsigned char __thiscall SORTED_LIST::Put(class OBJECT *)",
    "public: unsigned char __thiscall COMM_DEVICE::SetBaudRate(unsigned long)",
    "public: unsigned char __thiscall LIST::Insert(class OBJECT *,class ITERATOR *)",
    "public: static int (__stdcall*__stdcall SYSTEM::QueryNextLibraryEntryPoint(void *,class WSTRING const *))(void)",
    "public: static void __stdcall WSTRING::SetOemConversions(void)",
    "public: virtual unsigned long __thiscall LIST::QueryMemberCount(void)const",
    "public: void __thiscall WSTRING::DeleteChAt(unsigned long,unsigned long)",
    "private: static unsigned char WSTRING::_UseAnsiConversionsPrev",
    "public: unsigned char __thiscall PATH::SetName(class WSTRING const *)",
    "public: static class FSN_FILE * __stdcall SYSTEM::MakeTemporaryFile(class WSTRING const *,class PATH const *)",
    "public: virtual unsigned char __thiscall ARRAY::DeleteAllMembers(void)",
    "public: unsigned char __thiscall MULTIPLE_PATH_ARGUMENT::Initialize(char *,unsigned char,unsigned char)",
    "public: long __thiscall WSTRING::Stricmp(class WSTRING const *)const",
    "public: __thiscall BSTRING::BSTRING(class BSTRING const &)",
    "public: unsigned char __cdecl MESSAGE::DisplayMsg(unsigned long,char const *,...)",
    "public: virtual class OBJECT * __thiscall ITERATOR::FindNext(class OBJECT const *)",
    "public: virtual __thiscall LIST::~LIST(void)",
    "public: unsigned char __thiscall SCREEN::EraseScreen(void)",
    "public: unsigned short __thiscall WSTRING::QueryChAt(unsigned long)const",
    "public: unsigned long __thiscall WSTRING::Strstr(class WSTRING const *)const",
    "public: virtual __thiscall TIMEINFO_ARGUMENT::~TIMEINFO_ARGUMENT(void)",
    "public: unsigned char __thiscall COMM_DEVICE::SetParity(enum PARITY)",
    "public: virtual void __thiscall PROGRAM::ValidateVersion(unsigned long,unsigned long)const",
    "public: virtual __thiscall ITERATOR::~ITERATOR(void)",
    "public: unsigned char __thiscall COMM_DEVICE::Initialize(class PATH const *,unsigned char *)",
    "public: virtual __thiscall BYTE_STREAM::~BYTE_STREAM(void)",
    "public: unsigned char __thiscall ARRAY::Initialize(unsigned long,unsigned long)",
    "public: virtual __thiscall BITVECTOR::~BITVECTOR(void)",
    "public: void __thiscall MESSAGE::SetLoggingEnabled(unsigned char)",
    "public: unsigned char __thiscall SVILOGFILES::ShiftLogs(unsigned short const *)",
    "public: static class OBJECT * __stdcall ARRAY::GetCompareArgument(void *)",
    "public: class DSTRING & __thiscall DSTRING::operator=(class DSTRING const &)",
    "public: unsigned char __cdecl MESSAGE::Log(char const *,...)",
    "public: unsigned char __thiscall TIMEINFO::Initialize(void)",
    "public: void __thiscall PATH::TruncateDelimiter(void)",
    "public: unsigned char __thiscall COMM_DEVICE::SetStopBits(enum STOPBITS)",
    "public: unsigned char __thiscall FSN_FILTER::SetFileName(char const *)",
    "public: unsigned char __thiscall WSTRING::InsertString(unsigned long,class WSTRING const *,unsigned long,unsigned long)",
    "public: virtual unsigned char __thiscall DSTRING::NewBuf(unsigned long)",
    "public: virtual __thiscall SCREEN::~SCREEN(void)",
    "public: static unsigned char __cdecl BASE_SYSTEM::QueryResourceString(class WSTRING *,unsigned long,char const *,...)",
    "private: static int __stdcall WSTRING::CheckSpace(unsigned short *)",
    "public: unsigned char __thiscall SCREEN::SetCodePage(unsigned long)",
    "public: __thiscall HMEM::HMEM(void)",
    "public: void __thiscall MESSAGE::ResetLoggingIterator(void)",
    "public: unsigned char __thiscall BYTE_STREAM::Initialize(class STREAM *,unsigned long)",
    "public: unsigned char __thiscall WSTRING::operator<=(class WSTRING const &)const",
    "public: void * __thiscall MEM_BLOCK_MGR::Alloc(void)",
    "public: __thiscall KEYBOARD::KEYBOARD(void)",
    "public: unsigned char __thiscall CONT_MEM::Initialize(void *,unsigned long)",
    "public: __thiscall TIMEINFO::TIMEINFO(void)",
    "public: unsigned char __thiscall PATH::PathWasTooBig(void)",
    "public: virtual __thiscall PRINT_STREAM::~PRINT_STREAM(void)",
    "public: unsigned char __thiscall SVILOGFILES::GetHandleNewLogFile(void * *)",
    "public: unsigned char __thiscall STREAM::ReadWLine(unsigned short *,unsigned long,unsigned long *,unsigned char,unsigned long)",
    "public: static unsigned char __stdcall SYSTEM::GetFileSecurityBackup(class PATH const *,unsigned long,struct _SECURITY_ATTRIBUTES *,unsigned long *)",
    "public: virtual unsigned char __thiscall ARRAY::Sort(unsigned char)",
    "public: static unsigned char __stdcall BASE_SYSTEM::QueryResourceStringV(class WSTRING *,unsigned long,char const *,char *)",
    "public: void __thiscall BITVECTOR::ResetBit(unsigned long,unsigned long)",
    "public: virtual class STREAM * __thiscall PROGRAM::GetStandardError(void)",
    "public: __thiscall ADMINFILEPRIVS::ADMINFILEPRIVS(void)",
    "public: unsigned char __thiscall OBJECT::IsSameObject(class OBJECT const *)const",
    "protected: __thiscall WSTRING::WSTRING(void)",
    "public: unsigned char __thiscall FSN_DIRECTORY::Traverse(void *,class FSN_FILTER *,class PATH *,unsigned char (__stdcall*)(void *,class FSNODE *,class PATH *))const",
    "public: unsigned char __thiscall BITVECTOR::Initialize(unsigned long,enum BIT,unsigned long *)",
    "public: class WSTRING * __thiscall WSTRING::Strlwr(void)",
    "public: static unsigned char __stdcall SYSTEM::QueryWindowsErrorMessage(unsigned long,class WSTRING *)",
    "private: static unsigned char WSTRING::_UseConsoleConversionsPrev",
    "public: unsigned char __thiscall PATH::SetDevice(class WSTRING const *)",
    "public: unsigned char __thiscall PATH::AppendDelimiter(void)",
    "protected: __thiscall PROGRAM::PROGRAM(void)",
    "public: static void __stdcall PROGRAM::ExitProgram(unsigned long)",
    "public: virtual unsigned char __cdecl FSTRING::SPrintf(unsigned short const *,...)",
    "public: void __thiscall ARGUMENT_LEXEMIZER::SetAllowSwitchGlomming(unsigned char)",
    "public: unsigned char __thiscall COMM_DEVICE::SetIdsr(unsigned char)",
    "public: unsigned char __thiscall MACHINE::IsPCAT(void)",
    "public: virtual class ITERATOR * __thiscall SORTED_LIST::QueryIterator(void)const",
    "void * __stdcall UlibRealloc(void *,unsigned long)",
    "public: static int __stdcall MBSTR::Stricmp(char *,char *)",
    "public: unsigned char __thiscall WSTRING::Strcat(unsigned short const *)",
    "public: virtual unsigned char __thiscall MESSAGE::SetDotsOnly(unsigned char)",
    "private: unsigned char __thiscall BYTE_STREAM::FillAndReadByte(unsigned char *)",
    "public: unsigned char __thiscall WSTRING::ReplaceWithChars(unsigned long,unsigned long,unsigned short,unsigned long)",
    "public: long __thiscall ADMINFILEPRIVS::RestorePrivileges(void)",
    "public: virtual unsigned char __thiscall DSTRING::Resize(unsigned long)",
    "public: __thiscall STRING_ARRAY::STRING_ARRAY(void)",
    "public: class WSTRING * __thiscall WSTRING::Strupr(void)",
    "public: virtual unsigned char __thiscall ARRAY::Put(class OBJECT *)",
    "public: static class PATH * __stdcall SYSTEM::QuerySystemDirectory(void)",
    "public: unsigned char __thiscall TIMEINFO::QueryTime(class WSTRING *)const",
    "public: __thiscall BDSTRING::BDSTRING(class BDSTRING const &)",
    "public: virtual unsigned long __thiscall ARRAY::QueryMemberCount(void)const",
    "private: static unsigned char __stdcall WSTRING::ConvertOemToUnicodeN(unsigned short *,unsigned long,unsigned long *,char *,unsigned long)",
    "public: class WSTRING * __thiscall ARGUMENT_LEXEMIZER::GetLexemeAt(unsigned long)",
    "public: virtual __thiscall FSTRING::~FSTRING(void)",
    "public: class BDSTRING & __thiscall BDSTRING::operator=(class BDSTRING const &)",
    "public: virtual class OBJECT * __thiscall ARRAY::GetAt(unsigned long)const",
    "public: unsigned char __thiscall WSTRING::Initialize(void)",
    "public: unsigned char __thiscall MESSAGE::DisplayMsg(unsigned long,enum MESSAGE_TYPE,unsigned long)",
    "public: unsigned char __thiscall MEM_BLOCK_MGR::Initialize(unsigned long,unsigned long)",
    "public: static void __stdcall SQMEXPORT::SqmExportOnError(unsigned long,unsigned long,unsigned char,unsigned char,unsigned __int64,struct _GUID)",
    "public: static unsigned __int64 __stdcall MESSAGE::MakeFileToken(char const *)",
    "public: virtual __thiscall STRING_ARGUMENT::~STRING_ARGUMENT(void)",
    "public: virtual class STREAM * __thiscall PROGRAM::GetStandardInput(void)",
    "public: virtual unsigned char __thiscall LIST::Put(class OBJECT *)",
    "public: virtual unsigned char __thiscall MESSAGE::WaitForUserSignal(void)",
    "public: virtual class OBJECT * __thiscall ARRAY::RemoveAt(unsigned long)",
    "public: unsigned char __thiscall TIMEINFO::operator>(class TIMEINFO)const",
    "public: void __thiscall MESSAGE::Lock(void)",
    "public: virtual class ITERATOR * __thiscall LIST::QueryIterator(void)const",
    "public: static class FSN_FILE * __stdcall SYSTEM::QueryFile(class PATH const *,unsigned char,unsigned char *)",
    "public: char * __thiscall BSTRING::QuerySTR(unsigned long,unsigned long,char *,unsigned long,unsigned char)const",
    "public: unsigned char __thiscall PROGRAM::Initialize(unsigned long,unsigned long,unsigned long)",
    "public: virtual unsigned char __thiscall FSTRING::NewBuf(unsigned long)",
    "public: __thiscall STRING_ARGUMENT::STRING_ARGUMENT(void)",
    "public: virtual unsigned char __thiscall ARRAY::Sort(int (__cdecl*)(void *,void *))",
    "public: static unsigned char __stdcall KEYBOARD::GotABreak(void)",
    "public: unsigned char __thiscall KEYBOARD::DisableLineMode(void)",
    "public: class WSTRING * __thiscall WSTRING::Strlwr(unsigned long,unsigned long)",
    "protected: void __thiscall WSTRING::PutString(unsigned short *,unsigned long)",
    "public: unsigned char __cdecl MESSAGE::LogMsg(unsigned long,char const *,...)",
    "public: unsigned long __thiscall BSTRING::QueryChCount(void)const",
    "public: __thiscall DSTRING::DSTRING(void)",
    "public: unsigned char __thiscall ARGUMENT_LEXEMIZER::Initialize(class ARRAY *)",
    "public: unsigned long __thiscall SCREEN::QueryCodePage(void)",
    "public: virtual __thiscall WSTRING::~WSTRING(void)",
    "public: unsigned char __thiscall KEYBOARD::IsKeyAvailable(unsigned char *)const",
    "public: unsigned char __thiscall PATH::IsGuidVolName(void)",
    "public: unsigned char __thiscall LONG_ARGUMENT::Initialize(char *)",
    "public: unsigned char __thiscall FSN_FILTER::SetAttributes(unsigned long,unsigned long,unsigned long)",
    "public: class WSTRING * __thiscall ARGUMENT_LEXEMIZER::QueryInvalidArgument(void)",
    "public: static char * __stdcall MBSTR::CharNextW(char *)",
    "private: void __thiscall DSTRING::Construct(void)",
    "public: __thiscall ITERATOR::ITERATOR(class ITERATOR const &)",
    "public: static int __stdcall WSTRING::Stricmp(unsigned short *,unsigned short *)",
    "public: unsigned char __thiscall WSTRING::operator==(class WSTRING const &)const",
    "const ITERATOR::`vftable'",
    "public: unsigned char __cdecl MESSAGE::Display(char const *,...)",
    "public: class ITERATOR & __thiscall ITERATOR::operator=(class ITERATOR const &)",
    "public: virtual long __thiscall OBJECT::Compare(class OBJECT const *)const",
    "const DSTRING::`vftable'",
    "public: unsigned char __thiscall COMM_DEVICE::SetOcts(unsigned char)",
    "public: virtual void __thiscall KEYBOARD::DoNotRestoreConsoleMode(void)",
    "public: virtual __thiscall PATH_ARGUMENT::~PATH_ARGUMENT(void)",
    "public: unsigned char __thiscall MEM_ALLOCATOR::Initialize(unsigned __int64,unsigned long)",
    "public: virtual __thiscall PROGRAM::~PROGRAM(void)",
    "void * __stdcall FindFirstFileW(class PATH const *,struct _WIN32_FIND_DATAW *)",
    "public: static unsigned char __stdcall SYSTEM::RemoveNode(class FSNODE * *,unsigned char)",
    "public: long __thiscall WSTRING::Strcmp(class WSTRING const *,unsigned long)const",
    "public: virtual void __thiscall PROGRAM::Fatal(void)const",
    "protected: void __thiscall OBJECT::SetClassDescriptor(class CLASS_DESCRIPTOR const *)",
    "public: __thiscall PATH::PATH(void)",
    "public: virtual __thiscall PATH::~PATH(void)",
    "public: static int __stdcall WSTRING::Strcmps(unsigned short *,unsigned short *)",
    "public: __thiscall REST_OF_LINE_ARGUMENT::REST_OF_LINE_ARGUMENT(void)",
    "public: unsigned long __thiscall WSTRING::QueryChCount(void)const",
    "public: unsigned char __thiscall OBJECT::IsSameClass(class OBJECT const *)const",
    "public: unsigned char __thiscall SCREEN::SetOutputCodePage(unsigned long)",
    "public: unsigned char __thiscall WSTRING::Initialize(unsigned short const *,unsigned long)",
    "public: virtual class ITERATOR * __thiscall ARRAY::QueryIterator(void)const"
  ],
  "umb.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "umdmxfrm.dll": [
    "GetXformInfo"
  ],
  "umpnpmgr.dll": [
    "PlugPlayServiceMain",
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "umpo.dll": [
    "UmpoNotifyKernelPowerPolicyChanged",
    "UmpoInternalConvertGuidToString",
    "UmpoInternalGetActiveSchemeGuid",
    "UmpoInternalIsSettingRangeDefined",
    "UmpoNotifyKernelAllPowerPolicyChanged",
    "PtrUmpoHandle",
    "UmpoGetActiveScheme",
    "UmpoFree",
    "UmpoAlpcSendPowerMessage",
    "UmpoTraceAdaptiveDimTimeout",
    "UmpoInternalDataAccessorToString",
    "PtrUmpoOnAcPower",
    "UmpoReadFromUserPowerKey",
    "UmpoEnumerate",
    "PtrUmpoDebug",
    "UmpoInternalCloseUserPowerKey",
    "UmpoWriteToUserPowerKey",
    "UmpoMain",
    "UmpoSetActiveScheme",
    "UmpoInternalAccessCheck",
    "UmpoInternalOpenUserPowerKey",
    "UmpoInternalOpenGUIDSubKey",
    "UmpoNotificationHandler",
    "UmpoReadFromSystemPowerKey",
    "PtrUmpoProviderHandle",
    "UmpoAllocate"
  ],
  "umpoext.dll": [
    "DllMain",
    "ExtensionInit"
  ],
  "umpowmi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "umrdp.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "unattend.dll": [
    "UnattendCtxDeserializeFile",
    "UnattendCtxGetExpandedStringByNode",
    "UnattendIsNodeValid",
    "UnattendCtxGetNodeChild",
    "UnattendCtxSerialize",
    "UnattendGetImplicitContext",
    "UnattendCtxCleanup",
    "UnattendCtxOpenNodeByNode",
    "UnattendGetString",
    "UnattendCtxCancelModify",
    "UnattendFreeSetting",
    "UnattendCtxDeserializeString",
    "UnattendFindAnswerFile",
    "UnattendCtxGetCount",
    "UnattendAddResults",
    "UnattendCtxRemoveAttr",
    "UnattendCtxSetString",
    "UnattendFindFileFromCmdLine",
    "UnattendCtxCommitModify",
    "UnattendFindAnswerFileWithResults",
    "UnattendMarkPassUsedInCtx",
    "UnattendCtxGetNodeAttr",
    "UnattendCtxAddOrModifyNodeText",
    "UnattendCtxPrettyPrint",
    "UnattendGetCount",
    "UnattendCtxGetUlong",
    "DllMain",
    "UnattendCtxSpliceTrees",
    "UnattendFreeResults",
    "UnattendGetFirstFailingSetting",
    "DllCanUnloadNow",
    "UnattendCtxEnumGet",
    "UnattendCtxGetString",
    "UnattendCtxGetUlongByNode",
    "UnattendFreeNode",
    "UnattendCtxGetShowUIFromNode",
    "UnattendUsedPassesExistInCtx",
    "UnattendCtxGetLongByNode",
    "UnattendCtxOpenNode",
    "UnattendCtxReplaceNode",
    "UnattendDeserializeWithResults",
    "UnattendCtxGetEnumValue",
    "UnattendCtxSerializeToBuffer",
    "UnattendCtxBeginModify",
    "UnattendCtxSetNodeName",
    "UnattendIsPassUnusedInCtx",
    "UnattendCtxSetStringByNode",
    "UnattendCtxSerializeSettingsStream",
    "UnattendEnumFree",
    "UnattendCtxGetFlagByNode",
    "UnattendCtxGetRootNode",
    "UnattendCtxGetCountByNode",
    "UnattendCtxDeserialize",
    "UnattendGetFlag",
    "UnattendCtxGetLong",
    "UnattendCtxGetShowUI",
    "UnattendCtxSerializeToStreamFromNode",
    "UnattendCtxGetExpandedString",
    "UnattendFindAnswerFileSkipPantherFolder",
    "UnattendCleanup",
    "UnattendCtxEnumOrderedSubNodes",
    "UnattendCtxGetFlag",
    "UnattendCtxReplaceMatchedNodesWithText",
    "UnattendCtxSerializeToBufferFromNode",
    "UnattendCtxSerializeToStream",
    "UnattendCtxCompareNodes",
    "UnattendCtxDeserializeWithResults",
    "UnattendCtxGetNodeValue",
    "UnattendCtxGetEnumValueByNode",
    "UnattendFormatPath",
    "UnattendCtxDeserializeBuffer",
    "UnattendCtxRemoveNode",
    "UnattendCtxGetStringByNode"
  ],
  "unimdmat.dll": [
    "UmOpenModem",
    "UmSetSpeakerPhoneState",
    "UmDuplicateDeviceHandle",
    "UmGetDiagnostics",
    "UmAnswerModem",
    "UmSetPassthroughMode",
    "UmInitModem",
    "UmHangupModem",
    "UmInitializeModemDriver",
    "UmIssueCommand",
    "UmDialModem",
    "UmMonitorModem",
    "UmDeinitializeModemDriver",
    "UmAbortCurrentModemCommand",
    "UmLogStringA",
    "UmWaveAction",
    "UmLogDiagnostics",
    "UmGenerateDigit",
    "UmCloseModem"
  ],
  "uniplat.dll": [
    "MonitorHandle",
    "UmPlatformInitialize",
    "ResetCallCount",
    "UnimodemWriteFileEx",
    "ReinitOverStruct",
    "StopMonitorThread",
    "StopMonitoringHandle",
    "CancelUnimodemTimer",
    "AllocateOverStructEx",
    "UnimodemNotifyTSP",
    "CallEnding",
    "DestroyOverStructPool",
    "CallBeginning",
    "FreeOverStruct",
    "FreeUnimodemTimer",
    "SetUnimodemTimer",
    "UnimodemWaitCommEventEx",
    "CreateOverStructPool",
    "UnimodemQueueUserAPC",
    "UnimodemReadFileEx",
    "WinntIsWorkstation",
    "SyncDeviceIoControl",
    "StartMonitorThread",
    "UnimodemDeviceIoControlEx",
    "UmPlatformDeinitialize",
    "CreateUnimodemTimer"
  ],
  "untfs.dll": [
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::Write(void)",
    "public: unsigned char __thiscall NTFS_LOG_FILE::Initialize(class NTFS_MASTER_FILE_TABLE *)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::QueryEntry(unsigned long,void *,unsigned long,struct _INDEX_ENTRY * *,class NTFS_INDEX_BUFFER * *,unsigned char *)",
    "public: __thiscall NTFS_REFLECTED_MASTER_FILE_TABLE::NTFS_REFLECTED_MASTER_FILE_TABLE(void)",
    "public: struct _INDEX_ENTRY const * __thiscall NTFS_INDEX_TREE::GetNext(unsigned long *,unsigned char *,unsigned char)",
    "public: void __thiscall NTFS_CLUSTER_RUN::Relocate(class BIG_INT)",
    "private: static void __stdcall NTFS_MFT_INFO::ComputeFileNameSignature(unsigned long,struct _FILE_NAME *,unsigned char * const)",
    "public: unsigned char __thiscall NTFS_MFT_INFO::Initialize(class BIG_INT,class NTFS_UPCASE_TABLE *,unsigned char,unsigned char,unsigned __int64)",
    "public: virtual __thiscall NTFS_BITMAP_FILE::~NTFS_BITMAP_FILE(void)",
    "public: unsigned char __thiscall NTFS_EXTENT_LIST::AddExtent(class BIG_INT,class BIG_INT,class BIG_INT)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::SafeQueryAttribute(unsigned long,class NTFS_ATTRIBUTE *,class NTFS_ATTRIBUTE *,class WSTRING *)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::QueryDuplicatedInformation(struct _DUPLICATED_INFORMATION *)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE::Prefetch(class BIG_INT,unsigned long)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::InsertEntry(unsigned long,void *,struct _MFT_SEGMENT_REFERENCE,unsigned char)",
    "public: virtual __thiscall NTFS_ATTRIBUTE::~NTFS_ATTRIBUTE(void)",
    "public: virtual __thiscall NTFS_CLUSTER_RUN::~NTFS_CLUSTER_RUN(void)",
    "public: unsigned char __thiscall NTFS_SA::QueryClusterFactor(void)const",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Initialize(class NTFS_FRS_STRUCTURE *,class NTFS_MASTER_FILE_TABLE *)",
    "public: unsigned char __thiscall NTFS_SA::SetVolumeFlag(unsigned short,unsigned char *)",
    "public: __thiscall NTFS_FRS_STRUCTURE::NTFS_FRS_STRUCTURE(void)",
    "public: __thiscall NTFS_SA::NTFS_SA(void)",
    "public: virtual __thiscall NTFS_VOLUME_FILE::~NTFS_VOLUME_FILE(void)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::AddSecurityDescriptor(enum _CANNED_SECURITY_TYPE,class NTFS_BITMAP *)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::AddFileNameAttribute(struct _FILE_NAME *)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::IsAttributePresent(unsigned long,class WSTRING const *,unsigned char)",
    "Extend",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::Initialize(class MEM *,class NTFS_ATTRIBUTE *,class BIG_INT,unsigned long,class BIG_INT,unsigned long,class NTFS_UPCASE_TABLE *)",
    "public: unsigned char __thiscall NTFS_BITMAP::WriteModified(class NTFS_ATTRIBUTE *,class NTFS_BITMAP *)",
    "public: unsigned char __thiscall NTFS_EXTENT_LIST::QueryLcnFromVcn(class BIG_INT,class BIG_INT *,class BIG_INT *)const",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Initialize(void)",
    "public: __thiscall NTFS_FILE_RECORD_SEGMENT::NTFS_FILE_RECORD_SEGMENT(void)",
    "GetFilesystemInformation",
    "public: unsigned char __thiscall NTFS_REFLECTED_MASTER_FILE_TABLE::Initialize(class NTFS_MASTER_FILE_TABLE *)",
    "public: struct _ATTRIBUTE_LIST_ENTRY const * __thiscall NTFS_ATTRIBUTE_LIST::GetNextAttributeListEntry(struct _ATTRIBUTE_LIST_ENTRY const *)const",
    "public: unsigned char __thiscall NTFS_SA::QueryFrsFromPath(class WSTRING const *,class NTFS_MASTER_FILE_TABLE *,class NTFS_BITMAP *,class NTFS_FILE_RECORD_SEGMENT *,unsigned char *,unsigned char *)",
    "public: __thiscall NTFS_UPCASE_FILE::NTFS_UPCASE_FILE(void)",
    "public: virtual __thiscall NTFS_UPCASE_TABLE::~NTFS_UPCASE_TABLE(void)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::QueryAttribute(class NTFS_ATTRIBUTE *,unsigned char *,unsigned long,class WSTRING const *)",
    "public: static unsigned long __stdcall NTFS_SA::QueryDefaultClustersPerIndexBuffer(class DP_DRIVE const *,unsigned long)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::QueryAttributeByOrdinal(class NTFS_ATTRIBUTE *,unsigned char *,unsigned long,unsigned long)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::ReadAt(class BIG_INT)",
    "public: unsigned char __thiscall NTFS_BITMAP::Initialize(class BIG_INT,unsigned char,class LOG_IO_DP_DRIVE *,unsigned long,unsigned char)",
    "public: static struct _MFT_SEGMENT_REFERENCE __stdcall NTFS_MFT_INFO::QuerySegmentReference(void *)",
    "public: __thiscall NTFS_ATTRIBUTE_LIST::NTFS_ATTRIBUTE_LIST(void)",
    "public: unsigned char __thiscall NTFS_MFT_FILE::Initialize(class LOG_IO_DP_DRIVE *,class BIG_INT,unsigned long,unsigned long,class BIG_INT,class NTFS_BITMAP *,class NTFS_UPCASE_TABLE *,class NTFS_ATTRIBUTE *)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE_LIST::QueryNextEntry(struct _ATTR_LIST_CURR_ENTRY *,unsigned long *,class BIG_INT *,struct _MFT_SEGMENT_REFERENCE *,unsigned short *,class WSTRING *)const",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Create(struct _STANDARD_INFORMATION const *,unsigned short)",
    "public: unsigned char __thiscall NTFS_SA::Read(class MESSAGE *)",
    "Recover",
    "Format",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE_RECORD::Initialize(class IO_DP_DRIVE *,void *)",
    "public: virtual __thiscall NTFS_ATTRIBUTE_LIST::~NTFS_ATTRIBUTE_LIST(void)",
    "public: virtual unsigned char __thiscall NTFS_ATTRIBUTE::Resize(class BIG_INT,class NTFS_BITMAP *)",
    "public: virtual __thiscall NTFS_MFT_INFO::~NTFS_MFT_INFO(void)",
    "public: __thiscall NTFS_BITMAP_FILE::NTFS_BITMAP_FILE(void)",
    "public: unsigned long __thiscall NTFS_EXTENT_LIST::QueryNumberOfExtents(void)const",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::Prefetch(class BIG_INT,class BIG_INT)",
    "public: unsigned char __thiscall NTFS_LOG_FILE::CreateDataAttribute(class BIG_INT,unsigned long,class NTFS_BITMAP *)",
    "public: __thiscall NTFS_EXTENT_LIST::NTFS_EXTENT_LIST(void)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Flush(class NTFS_BITMAP *,class NTFS_INDEX_TREE *,unsigned char)",
    "public: virtual __thiscall NTFS_EXTENT_LIST::~NTFS_EXTENT_LIST(void)",
    "Chkdsk",
    "public: virtual __thiscall NTFS_BOOT_FILE::~NTFS_BOOT_FILE(void)",
    "public: virtual __thiscall NTFS_SA::~NTFS_SA(void)",
    "public: __thiscall NTFS_MFT_FILE::NTFS_MFT_FILE(void)",
    "public: __thiscall NTFS_ATTRIBUTE::NTFS_ATTRIBUTE(void)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE::Initialize(class LOG_IO_DP_DRIVE *,unsigned long,class NTFS_EXTENT_LIST const *,class BIG_INT,class BIG_INT,unsigned long,class WSTRING const *,unsigned short)",
    "public: static unsigned char __stdcall NTFS_SA::IsNtfsName(struct _FILE_NAME const *)",
    "public: unsigned char __thiscall NTFS_EXTENT_LIST::QueryExtent(unsigned long,class BIG_INT *,class BIG_INT *,class BIG_INT *)const",
    "public: unsigned short __thiscall NTFS_SA::QueryVolumeFlagsAndLabel(unsigned char *,unsigned char *,unsigned char *,class WSTRING *)",
    "public: virtual unsigned char __thiscall NTFS_MFT_FILE::Read(void)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Initialize(class BIG_INT,unsigned long,class NTFS_MASTER_FILE_TABLE *)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::Initialize(class LOG_IO_DP_DRIVE *,unsigned long,class NTFS_BITMAP *,class NTFS_UPCASE_TABLE *,unsigned long,class NTFS_FILE_RECORD_SEGMENT *,class WSTRING const *)",
    "public: unsigned char __thiscall NTFS_EXTENT_LIST::Initialize(class BIG_INT,class BIG_INT)",
    "FormatCorruptionRecordA",
    "public: unsigned char __thiscall NTFS_BOOT_FILE::Initialize(class NTFS_MASTER_FILE_TABLE *)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::Read(class BIG_INT)",
    "public: virtual __thiscall NTFS_ATTRIBUTE_DEFINITION_TABLE::~NTFS_ATTRIBUTE_DEFINITION_TABLE(void)",
    "public: unsigned char __thiscall NTFS_SA::Initialize(class LOG_IO_DP_DRIVE *,class MESSAGE *,class BIG_INT,class BIG_INT)",
    "public: __thiscall NTFS_LOG_FILE::NTFS_LOG_FILE(void)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Initialize(class BIG_INT,class NTFS_MFT_FILE *)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::Initialize(struct _FILE_RECORD_SEGMENT_HEADER *,class NTFS_ATTRIBUTE *,class BIG_INT,unsigned long,unsigned long,class BIG_INT,unsigned long,class NTFS_UPCASE_TABLE *)",
    "public: static unsigned char __stdcall NTFS_SA::IsDosName(struct _FILE_NAME const *)",
    "public: unsigned char __thiscall NTFS_UPCASE_TABLE::Initialize(class NTFS_ATTRIBUTE *,unsigned __int64 *)",
    "public: __thiscall NTFS_INDEX_TREE::NTFS_INDEX_TREE(void)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::QueryFileSizes(class BIG_INT *,class BIG_INT *,unsigned char *)",
    "public: virtual __thiscall NTFS_LOG_FILE::~NTFS_LOG_FILE(void)",
    "public: virtual __thiscall NTFS_MFT_FILE::~NTFS_MFT_FILE(void)",
    "CreateFormatCorruptionRecordContext",
    "public: unsigned char __thiscall NTFS_BITMAP::Write(class NTFS_ATTRIBUTE *,class NTFS_BITMAP *)",
    "public: unsigned char __thiscall NTFS_MASTER_FILE_TABLE::AllocateFileRecordSegment(class BIG_INT *,unsigned char)",
    "public: unsigned char __thiscall NTFS_MASTER_FILE_TABLE::Extend(unsigned long)",
    "public: virtual unsigned char __thiscall NTFS_ATTRIBUTE::Write(void const *,class BIG_INT,unsigned long,unsigned long *,class NTFS_BITMAP *)",
    "FormatCorruptionRecordW",
    "public: __thiscall NTFS_VOLUME_FILE::NTFS_VOLUME_FILE(void)",
    "public: void * __thiscall NTFS_FRS_STRUCTURE::GetNextAttributeRecord(void const *,class MESSAGE *,unsigned char *)",
    "public: virtual __thiscall NTFS_ATTRIBUTE_RECORD::~NTFS_ATTRIBUTE_RECORD(void)",
    "public: unsigned char __thiscall NTFS_BAD_CLUSTER_FILE::Initialize(class NTFS_MASTER_FILE_TABLE *)",
    "FormatEx",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::ResetIterator(unsigned char)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::QueryFileReference(unsigned long,void *,unsigned long,struct _MFT_SEGMENT_REFERENCE *,unsigned char *)",
    "public: virtual unsigned char __thiscall NTFS_FRS_STRUCTURE::Read(void)",
    "public: __thiscall NTFS_BOOT_FILE::NTFS_BOOT_FILE(void)",
    "public: virtual unsigned char __thiscall NTFS_ATTRIBUTE::MakeNonresident(class NTFS_BITMAP *)",
    "public: unsigned char __thiscall NTFS_SA::WriteRemainingBootCode(void)",
    "public: unsigned char __thiscall NTFS_CLUSTER_RUN::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class BIG_INT,unsigned long,unsigned long)",
    "SetWriteViewCacheVolumeName",
    "public: static unsigned char __stdcall NTFS_SA::GetRootFrsIndex(class NTFS_MFT_FILE *,class NTFS_FILE_RECORD_SEGMENT *,class NTFS_INDEX_TREE *)",
    "public: virtual __thiscall NTFS_BAD_CLUSTER_FILE::~NTFS_BAD_CLUSTER_FILE(void)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::CopyIterator(class NTFS_INDEX_TREE *)",
    "public: static unsigned char __stdcall NTFS_MFT_INFO::CompareDupInfo(void *,struct _FILE_NAME *)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::ReadAgain(class BIG_INT)",
    "ChkdskEx",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::Save(class NTFS_FILE_RECORD_SEGMENT *)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Initialize(class BIG_INT,class NTFS_MASTER_FILE_TABLE *)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::AddSecurityDescriptorData(class NTFS_ATTRIBUTE *,void *,struct _SECURITY_ENTRY * *,unsigned long,enum _CANNED_SECURITY_TYPE,class NTFS_BITMAP *,unsigned char)",
    "public: unsigned char __thiscall NTFS_BITMAP::IsFree(class BIG_INT,class BIG_INT)const",
    "public: virtual __thiscall NTFS_BITMAP::~NTFS_BITMAP(void)",
    "public: __thiscall NTFS_CLUSTER_RUN::NTFS_CLUSTER_RUN(void)",
    "long __stdcall NtfsUpcaseCompare(unsigned short const *,unsigned long,unsigned short const *,unsigned long,class NTFS_UPCASE_TABLE const *,unsigned char)",
    "public: virtual __thiscall NTFS_FRS_STRUCTURE::~NTFS_FRS_STRUCTURE(void)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::Initialize(unsigned long,class LOG_IO_DP_DRIVE *,unsigned long,class NTFS_BITMAP *,class NTFS_UPCASE_TABLE *,unsigned long,unsigned long,unsigned long,class WSTRING const *)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class BIG_INT,unsigned long,class BIG_INT,unsigned long,class NTFS_UPCASE_TABLE *,unsigned long)",
    "public: virtual __thiscall NTFS_UPCASE_FILE::~NTFS_UPCASE_FILE(void)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::QueryAttributeList(class NTFS_ATTRIBUTE_LIST *)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE_RECORD::QueryExtentList(class NTFS_EXTENT_LIST *)const",
    "public: __thiscall NTFS_ATTRIBUTE_DEFINITION_TABLE::NTFS_ATTRIBUTE_DEFINITION_TABLE(void)",
    "public: unsigned char __thiscall NTFS_BITMAP::IsAllocated(class BIG_INT,class BIG_INT)const",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::Initialize(class MEM *,class NTFS_ATTRIBUTE *,class BIG_INT,unsigned long,unsigned long,class BIG_INT,unsigned long,class NTFS_UPCASE_TABLE *)",
    "public: unsigned char __thiscall NTFS_VOLUME_FILE::Initialize(class LOG_IO_DP_DRIVE *,class NTFS_MASTER_FILE_TABLE *,class NTFS_FILE_RECORD_SEGMENT *,class NTFS_INDEX_TREE *,struct _VOLUME_INFORMATION *,class WSTRING *,enum FIX_LEVEL)",
    "public: static unsigned char __stdcall NTFS_MFT_INFO::CompareFileName(void *,unsigned long,struct _FILE_NAME *,unsigned short *)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE_RECORD::QueryName(class WSTRING *)const",
    "public: unsigned char __thiscall NTFS_SA::TakeCensus(class NTFS_MASTER_FILE_TABLE *,unsigned long,struct NTFS_CENSUS_INFO *)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE::Initialize(class LOG_IO_DP_DRIVE *,unsigned long,void const *,unsigned long,unsigned long,class WSTRING const *,unsigned short)",
    "public: virtual __thiscall NTFS_REFLECTED_MASTER_FILE_TABLE::~NTFS_REFLECTED_MASTER_FILE_TABLE(void)",
    "public: static unsigned char __stdcall NTFS_MFT_INFO::QueryFlags(void *,unsigned short)",
    "public: virtual unsigned char __thiscall NTFS_ATTRIBUTE::SetSparse(class BIG_INT,class NTFS_BITMAP *,unsigned char)",
    "public: __thiscall NTFS_BAD_CLUSTER_FILE::NTFS_BAD_CLUSTER_FILE(void)",
    "public: unsigned char __thiscall NTFS_BITMAP_FILE::Initialize(class NTFS_MASTER_FILE_TABLE *)",
    "public: __thiscall NTFS_BITMAP::NTFS_BITMAP(void)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE_LIST::ReadList(void)",
    "public: __thiscall NTFS_UPCASE_TABLE::NTFS_UPCASE_TABLE(void)",
    "public: __thiscall NTFS_ATTRIBUTE_RECORD::NTFS_ATTRIBUTE_RECORD(void)",
    "DeleteFormatCorruptionRecordContext",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE::Read(void *,class BIG_INT,unsigned long,unsigned long *)",
    "public: unsigned char __thiscall NTFS_UPCASE_FILE::Initialize(class NTFS_MASTER_FILE_TABLE *)",
    "public: virtual __thiscall NTFS_FILE_RECORD_SEGMENT::~NTFS_FILE_RECORD_SEGMENT(void)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE_DEFINITION_TABLE::Initialize(class NTFS_MASTER_FILE_TABLE *,unsigned char)",
    "public: unsigned char __thiscall NTFS_MFT_FILE::Flush(void)",
    "public: virtual unsigned char __thiscall NTFS_ATTRIBUTE::InsertIntoFile(class NTFS_FILE_RECORD_SEGMENT *,class NTFS_BITMAP *)",
    "public: unsigned char __thiscall NTFS_MFT_INFO::Initialize(void)",
    "SetOriginalVolumeName",
    "public: virtual unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Write(void)",
    "public: static unsigned long __stdcall NTFS_SA::QuerySectorsInElementaryStructures(class DP_DRIVE *,unsigned long,unsigned long,unsigned long,unsigned long)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::ReadNext(class BIG_INT)",
    "private: static void __stdcall NTFS_MFT_INFO::ComputeDupInfoSignature(struct _DUPLICATED_INFORMATION *,unsigned char * const)",
    "public: virtual unsigned char __thiscall NTFS_SA::Read(void)",
    "public: virtual __thiscall NTFS_INDEX_TREE::~NTFS_INDEX_TREE(void)",
    "public: __thiscall NTFS_MFT_INFO::NTFS_MFT_INFO(void)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::QueryAttributeListAttribute(class NTFS_ATTRIBUTE *,unsigned char *)",
    "public: unsigned char __thiscall NTFS_SA::CreateElementaryStructures(class NTFS_BITMAP *,unsigned long,unsigned long,unsigned long,unsigned long,class NUMBER_SET const *,unsigned char,unsigned char,unsigned char,class MESSAGE *,struct BIOS_PARAMETER_BLOCK *,class WSTRING const *)"
  ],
  "upnp.dll": [
    "DllUnregisterServer",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "HrRehydratorCreateServiceObject"
  ],
  "upnphost.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "ureg.dll": [
    "public: unsigned char __thiscall REGISTRY::QueryKeyInfo(enum _PREDEFINED_KEY,class WSTRING const *,class WSTRING const *,class REGISTRY_KEY_INFO *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::QueryKeySecurity(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO const *,unsigned long,void * *,unsigned long *)",
    "public: __thiscall REGISTRY::REGISTRY(void)",
    "public: unsigned char __thiscall REGISTRY::RestoreKeyFromFile(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class WSTRING const *,unsigned char,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::Initialize(class WSTRING const *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::DoesValueExist(enum _PREDEFINED_KEY,class WSTRING const *,class WSTRING const *,class WSTRING const *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::DoesKeyExist(enum _PREDEFINED_KEY,class WSTRING const *,class WSTRING const *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::IsAccessAllowed(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,unsigned long,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::QuerySubKeysInfo(enum _PREDEFINED_KEY,class WSTRING const *,class WSTRING const *,class ARRAY *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY_KEY_INFO::Initialize(class WSTRING const *,class WSTRING const *,unsigned long,class WSTRING const *,struct _SECURITY_ATTRIBUTES *)",
    "public: unsigned char __thiscall REGISTRY::AddValueEntry(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class REGISTRY_VALUE_ENTRY const *,unsigned char,unsigned long *)",
    "public: virtual __thiscall REGISTRY::~REGISTRY(void)",
    "public: unsigned char __thiscall REGISTRY::EnableRootNotification(enum _PREDEFINED_KEY,void *,unsigned long,unsigned char)",
    "public: unsigned char __thiscall REGISTRY::UpdateKeyInfo(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,unsigned long *)",
    "public: __thiscall REGISTRY_VALUE_ENTRY::REGISTRY_VALUE_ENTRY(void)",
    "public: unsigned char __thiscall REGISTRY::DeleteValueEntry(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class WSTRING const *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::CreateKey(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class REGISTRY_KEY_INFO *,unsigned long *,unsigned char)",
    "public: unsigned char __thiscall REGISTRY::SetKeySecurity(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,unsigned long,void *,unsigned long *,unsigned char)",
    "public: __thiscall REGISTRY_KEY_INFO::REGISTRY_KEY_INFO(void)",
    "public: unsigned char __thiscall REGISTRY::DeleteKey(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class WSTRING const *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::SaveKeyToFile(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class WSTRING const *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY_VALUE_ENTRY::Initialize(class WSTRING const *,unsigned long,enum _REG_TYPE,unsigned char const *,unsigned long)",
    "public: unsigned char __thiscall REGISTRY::UnLoadHive(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::QueryValues(enum _PREDEFINED_KEY,class WSTRING const *,class WSTRING const *,class ARRAY *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::LoadHive(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class WSTRING const *,unsigned long *)"
  ],
  "url.dll": [
    "TelnetProtocolHandlerA",
    "OpenURLA",
    "MIMEAssociationDialogW",
    "MailToProtocolHandler",
    "TranslateURLW",
    "URLAssociationDialogW",
    "FileProtocolHandler",
    "OpenURL",
    "InetIsOffline",
    "FileProtocolHandlerA",
    "AddMIMEFileTypesPS",
    "MailToProtocolHandlerA",
    "TelnetProtocolHandler",
    "MIMEAssociationDialogA",
    "AutodialHookCallback",
    "URLAssociationDialogA",
    "TranslateURLA"
  ],
  "urlmon.dll": [
    "HlinkSimpleNavigateToMoniker",
    "FindMimeFromData",
    "DllInstall",
    "QueryClsidAssociation",
    "DllRegisterServerEx",
    "CreateIUriBuilder",
    "IntlPercentEncodeNormalize",
    "ReleaseBindInfo",
    "CoInternetFeatureSettingsChanged",
    "CoInternetParseUrl",
    "IECompatLogCSSFix",
    "URLOpenBlockingStreamW",
    "CDLGetLongPathNameA",
    "IsValidURL",
    "PrivateCoInstall",
    "CORPolicyProvider",
    "IsStringProperty",
    "IsJITInProgress",
    "AsyncInstallDistributionUnit",
    "CoInternetCreateSecurityManager",
    "DllGetClassObject",
    "ShowTrustAlertDialog",
    "URLDownloadA",
    "ShouldShowIntranetWarningSecband",
    "FindMediaType",
    "HlinkGoForward",
    "RevokeFormatEnumerator",
    "CreateUri",
    "CreateAsyncBindCtxEx",
    "CreateFormatEnumerator",
    "CoInternetIsFeatureEnabledForUrl",
    "GetAddSitesFileUrl",
    "CoInternetSetFeatureEnabled",
    "CoInternetGetSession",
    "MkParseDisplayNameEx",
    "RegisterWebPlatformPermanentSecurityManager",
    "CoInternetIsFeatureZoneElevationEnabled",
    "GetUrlmonThreadNotificationHwnd",
    "DllUnregisterServer",
    "IEInstallScope",
    "ShouldDisplayPunycodeForUri",
    "URLDownloadToFileA",
    "FindMediaTypeClass",
    "GetClassURL",
    "CoInternetIsFeatureEnabled",
    "GetZoneFromAlternateDataStreamEx",
    "UrlMkGetSessionOption",
    "GetLabelsFromNamedHost",
    "GetSoftwareUpdateInfo",
    "CreateAsyncBindCtx",
    "CoInternetCanonicalizeIUri",
    "UnregisterWebPlatformPermanentSecurityManager",
    "CoInternetGetSecurityUrlEx",
    "Extract",
    "CoInternetIsFeatureEnabledForIUri",
    "CoGetClassObjectFromURL",
    "IEDllLoader",
    "IsLoggingEnabledW",
    "CDLGetLongPathNameW",
    "CopyStgMedium",
    "ObtainUserAgentString",
    "CoInternetCompareUrl",
    "URLOpenStreamA",
    "URLDownloadToFileW",
    "GetMarkOfTheWeb",
    "CoInternetCombineUrl",
    "CompareSecurityIds",
    "IsDWORDProperty",
    "RevokeBindStatusCallback",
    "AsyncGetClassBits",
    "RegisterFormatEnumerator",
    "CreateURLMoniker",
    "CoInternetCreateZoneManager",
    "URLOpenPullStreamA",
    "CoInternetQueryInfo",
    "FileBearsMarkOfTheWeb",
    "URLDownloadW",
    "UrlmonCleanupCurrentThread",
    "HlinkSimpleNavigateToString",
    "UrlMkSetSessionOption",
    "BindAsyncMoniker",
    "URLDownloadToCacheFileA",
    "GetPortFromUrlScheme",
    "GetComponentIDFromCLSSPEC",
    "SetSoftwareUpdateAdvertisementState",
    "RegisterBindStatusCallback",
    "CreateURLMonikerEx",
    "HlinkNavigateMoniker",
    "IsIntranetAvailable",
    "HlinkGoBack",
    "IsAsyncMoniker",
    "RegisterMediaTypes",
    "CreateURLMonikerEx2",
    "GetIDNFlagsForUri",
    "CopyBindInfo",
    "CreateUriPriv",
    "CreateUriFromMultiByteString",
    "GetPropertyName",
    "URLOpenStreamW",
    "FaultInIEFeature",
    "CoInternetParseIUri",
    "DllRegisterServer",
    "GetPropertyFromName",
    "URLOpenPullStreamW",
    "GetClassFileOrMime",
    "QueryAssociations",
    "DllCanUnloadNow",
    "CoInstall",
    "URLOpenBlockingStreamA",
    "ZonesReInit",
    "CreateUriWithFragment",
    "CoInternetCombineIUri",
    "WriteHitLogging",
    "HlinkNavigateString",
    "CompatFlagsFromClsid",
    "RegisterMediaTypeClass",
    "UrlMkBuildVersion",
    "CoInternetGetSecurityUrl",
    "IsLoggingEnabledA",
    "CoInternetCombineUrlEx",
    "CoInternetGetProtocolFlags",
    "URLDownloadToCacheFileW",
    "GetIUriPriv",
    "GetIUriPriv2"
  ],
  "usbceip.dll": [
    "UsbCeip_Execute",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "usbmon.dll": [
    "DllMain",
    "InitializePrintMonitor2"
  ],
  "usbperf.dll": [
    "OpenUsbPerformanceData",
    "CollectUsbPerformanceData",
    "CloseUsbPerformanceData"
  ],
  "usbui.dll": [
    "USBDevicePropPageProvider",
    "USBHubPropPageProvider",
    "USBErrorHandler",
    "USBControllerPropPageProvider",
    "USBHubPowerPage",
    "CPlApplet",
    "USBControllerBandwidthPage",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "UsbControlPanelApplet"
  ],
  "user32.dll": [
    "CancelShutdown",
    "DlgDirListW",
    "SetProcessDPIAware",
    "UpdatePerUserSystemParameters",
    "GetWindowRgn",
    "BuildReasonArray",
    "GetComboBoxInfo",
    "EndDeferWindowPosEx",
    "InvalidateRect",
    "IsWindowRedirectedForPrint",
    "SendInput",
    "SetInternalWindowPos",
    "DwmValidateWindow",
    "GetPointerFrameInfo",
    "GetRawInputData",
    "GetScrollBarInfo",
    "GetWindowCompositionAttribute",
    "FindWindowExW",
    "TileChildWindows",
    "ClipCursor",
    "GetMagnificationDesktopMagnification",
    "EnumPropsExA",
    "RemoveClipboardFormatListener",
    "EnumDisplaySettingsExW",
    "NotifyOverlayWindow",
    "CreateWindowIndirect",
    "PostMessageA",
    "GetCaretBlinkTime",
    "CreateSystemThreads",
    "DdeQueryNextServer",
    "DrawTextExW",
    "GetKeyboardState",
    "GetPointerDeviceProperties",
    "GetMenuStringA",
    "OemToCharBuffW",
    "CtxInitUser32",
    "DrawFocusRect",
    "SendIMEMessageExA",
    "LoadStringW",
    "DragObject",
    "OpenDesktopW",
    "MenuWindowProcW",
    "AnyPopup",
    "GetWindowModuleFileName",
    "RegisterUserApiHook",
    "EnumDesktopsW",
    "ToAscii",
    "SetRectEmpty",
    "DlgDirListComboBoxW",
    "LoadAcceleratorsW",
    "IsServerSideWindow",
    "GetWindowBand",
    "GhostWindowFromHungWindow",
    "CreateIcon",
    "DdeFreeDataHandle",
    "KillTimer",
    "GetNextDlgTabItem",
    "wsprintfA",
    "GetMenuItemID",
    "DlgDirListA",
    "CreateDesktopExA",
    "DdeCmpStringHandles",
    "DdePostAdvise",
    "DdeGetData",
    "SetMenuContextHelpId",
    "GetPhysicalCursorPos",
    "CalcMenuBar",
    "InitializeTouchInjection",
    "GetPointerDeviceCursors",
    "LoadKeyboardLayoutW",
    "RegisterRawInputDevices",
    "ValidateRect",
    "CopyAcceleratorTableW",
    "VkKeyScanW",
    "DdeQueryConvInfo",
    "GetProcessUIContextInformation",
    "MessageBoxTimeoutW",
    "ChangeWindowMessageFilter",
    "RegisterClassExW",
    "RegisterPowerSettingNotification",
    "GetWindowDC",
    "TranslateAcceleratorW",
    "SetWindowLongA",
    "ChangeWindowMessageFilterEx",
    "DialogBoxIndirectParamA",
    "CharNextW",
    "DdeGetQualityOfService",
    "GetWindowLongA",
    "SkipPointerFrameMessages",
    "SetLayeredWindowAttributes",
    "GetProgmanWindow",
    "IsDialogMessage",
    "SetMessageQueue",
    "GetGuiResources",
    "UnregisterHotKey",
    "DdeUninitialize",
    "SwitchDesktopWithFade",
    "DdeCreateStringHandleW",
    "CreateIconFromResourceEx",
    "SetDlgItemTextA",
    "PeekMessageW",
    "DialogBoxParamW",
    "DisplayExitWindowsWarnings",
    "GetKeyboardLayout",
    "GetIconInfoExA",
    "ToUnicodeEx",
    "EnumDisplayMonitors",
    "WindowFromPhysicalPoint",
    "CloseGestureInfoHandle",
    "VTagOutput",
    "DefMDIChildProcA",
    "ShowStartGlass",
    "SwitchDesktop",
    "EnterReaderModeHelper",
    "QuerySendMessage",
    "GetDesktopID",
    "EnumDisplayDevicesA",
    "GetKeyNameTextA",
    "UnloadKeyboardLayout",
    "PaintMonitor",
    "SetProcessWindowStation",
    "UnhookWindowsHookEx",
    "DefDlgProcW",
    "VkKeyScanExA",
    "LoadMenuIndirectW",
    "DestroyIcon",
    "GetClassInfoA",
    "InsertMenuItemA",
    "MBToWCSExt",
    "SetGestureConfig",
    "CharUpperW",
    "RegisterErrorReportingDialog",
    "LoadImageA",
    "ReuseDDElParam",
    "GetWindowTextLengthW",
    "UpdateWindowTransform",
    "MB_GetString",
    "SetWindowsHookA",
    "ToUnicode",
    "SendMessageA",
    "GetPointerDevice",
    "IsDialogMessageA",
    "InternalGetWindowText",
    "EditWndProc",
    "IsHungAppWindow",
    "SetShellWindowEx",
    "MessageBoxW",
    "ShowWindow",
    "IMPQueryIMEA",
    "GetMenuInfo",
    "ChangeDisplaySettingsA",
    "SetProgmanWindow",
    "DestroyMenu",
    "GetPointerType",
    "CreateWindowStationW",
    "IsInDesktopWindowBand",
    "RegisterClipboardFormatW",
    "ReplyMessage",
    "EnumPropsExW",
    "LoadMenuIndirectA",
    "DoSoundConnect",
    "mouse_event",
    "GetMenuStringW",
    "SetDlgItemInt",
    "GetPropA",
    "GetDlgItemTextW",
    "GetMonitorInfoW",
    "SetDoubleClickTime",
    "UserLpkPSMTextOut",
    "CharToOemA",
    "CheckProcessForClipboardAccess",
    "MapVirtualKeyA",
    "DwmGetDxSharedSurface",
    "SendMessageTimeoutA",
    "SetImmersiveBackgroundWindow",
    "LoadStringA",
    "QueryDisplayConfig",
    "GetAltTabInfoA",
    "GetIconInfo",
    "SetMessageExtraInfo",
    "DwmGetRemoteSessionOcclusionEvent",
    "SendMessageTimeoutW",
    "DispatchMessageW",
    "ClientToScreen",
    "DrawStateA",
    "EnumDisplaySettingsExA",
    "EnumWindows",
    "GetMouseMovePointsEx",
    "GetTaskmanWindow",
    "ChangeDisplaySettingsW",
    "GetPointerDevices",
    "GetPointerFramePenInfo",
    "HideCaret",
    "PrivateExtractIconsA",
    "EnumPropsA",
    "SetDlgItemTextW",
    "SetPhysicalCursorPos",
    "PrivateRegisterICSProc",
    "TabbedTextOutW",
    "VRipOutput",
    "GetPointerCursorId",
    "ArrangeIconicWindows",
    "GetWindowCompositionInfo",
    "GetNextDlgGroupItem",
    "GetDC",
    "GetWindowMinimizeRect",
    "ReasonCodeNeedsBugID",
    "GetWindowRect",
    "IsWindow",
    "_UserTestTokenForInteractive",
    "BlockInput",
    "GetIconInfoExW",
    "EnableMenuItem",
    "DdeConnect",
    "GetAsyncKeyState",
    "CheckWindowThreadDesktop",
    "GetRegisteredRawInputDevices",
    "ShowSystemCursor",
    "gSharedInfo",
    "CharLowerBuffA",
    "LoadKeyboardLayoutEx",
    "GetPropW",
    "ScrollWindowEx",
    "GetCapture",
    "SetRect",
    "MsgWaitForMultipleObjectsEx",
    "DrawMenuBarTemp",
    "SetCaretBlinkTime",
    "IsCharUpperA",
    "SetUserObjectInformationW",
    "GetWindowTextW",
    "CreateIconIndirect",
    "GetAutoRotationState",
    "GetShellWindow",
    "InSendMessageEx",
    "GetClipboardViewer",
    "TranslateMDISysAccel",
    "GetRawInputDeviceInfoW",
    "SetUserObjectInformationA",
    "TranslateMessage",
    "EnumClipboardFormats",
    "SetThreadDesktop",
    "ValidateRgn",
    "MessageBoxIndirectW",
    "RegisterSessionPort",
    "PostMessageW",
    "DdeGetLastError",
    "GetWindow",
    "DdeQueryStringW",
    "ShowCursor",
    "ResolveDesktopForWOW",
    "SetScrollInfo",
    "LoadCursorFromFileA",
    "UnhookWindowsHook",
    "InitializeLpkHooks",
    "DrawCaption",
    "GetCIMSSM",
    "ScrollDC",
    "UnregisterDeviceNotification",
    "CharLowerA",
    "GetInputState",
    "EnumDisplayDevicesW",
    "WINNLSEnableIME",
    "GetProcessWindowStation",
    "SetScrollPos",
    "AttachThreadInput",
    "CharNextA",
    "DefDlgProcA",
    "GetKBCodePage",
    "SetSysColors",
    "DdeSetUserHandle",
    "DialogBoxParamA",
    "GetWindowTextA",
    "ShowWindowAsync",
    "WCSToMBEx",
    "DestroyDCompositionHwndTarget",
    "LockWorkStation",
    "GetMenuState",
    "GetMagnificationLensCtxInformation",
    "CreateMenu",
    "DdeClientTransaction",
    "ChangeClipboardChain",
    "ModifyMenuW",
    "CheckMenuItem",
    "IsDlgButtonChecked",
    "ChangeMenuW",
    "CreateDesktopW",
    "GetMessageExtraInfo",
    "CreateDialogIndirectParamA",
    "DrawStateW",
    "SetWindowsHookExW",
    "CopyAcceleratorTableA",
    "CharToOemBuffA",
    "DestroyCursor",
    "ReleaseCapture",
    "CallWindowProcA",
    "ScreenToClient",
    "GetSendMessageReceiver",
    "MapVirtualKeyExA",
    "CharUpperBuffA",
    "ControlMagnification",
    "GetDlgItemInt",
    "PackTouchHitTestingProximityEvaluation",
    "DlgDirSelectExW",
    "SetParent",
    "TrackPopupMenu",
    "CallMsgFilterA",
    "CreatePopupMenu",
    "AllowSetForegroundWindow",
    "CsrBroadcastSystemMessageExW",
    "GetClipboardFormatNameW",
    "SetWindowTextW",
    "GetClipCursor",
    "IsIconic",
    "SetDeskWallpaper",
    "DestroyReasons",
    "OemKeyScan",
    "TranslateMessageEx",
    "WINNLSGetEnableStatus",
    "IsCharUpperW",
    "GetWindowFeedbackSetting",
    "SendNotifyMessageA",
    "MonitorFromPoint",
    "SignalRedirectionStartComplete",
    "SetClassLongA",
    "SetDebugErrorLevel",
    "GetCursor",
    "GetClassLongA",
    "SystemParametersInfoW",
    "ChangeDisplaySettingsExW",
    "MessageBoxTimeoutA",
    "RegisterSystemThread",
    "ShutdownBlockReasonCreate",
    "CreateDialogParamA",
    "OpenClipboard",
    "ShutdownBlockReasonQuery",
    "IMPSetIMEW",
    "LoadMenuW",
    "ReasonCodeNeedsComment",
    "GetUserObjectInformationA",
    "IsDialogMessageW",
    "DlgDirSelectExA",
    "DeferWindowPos",
    "LoadBitmapA",
    "DrawTextExA",
    "PaintDesktop",
    "GetWindowInfo",
    "RegisterTouchWindow",
    "DdeFreeStringHandle",
    "DrawCaptionTempW",
    "SetWindowRgn",
    "BroadcastSystemMessageA",
    "CloseWindowStation",
    "TranslateAcceleratorA",
    "WindowFromPoint",
    "TrackMouseEvent",
    "CharUpperA",
    "GetMenuCheckMarkDimensions",
    "GetLastInputInfo",
    "GetPointerTouchInfoHistory",
    "CreateCaret",
    "IsWindowInDestroy",
    "PhysicalToLogicalPoint",
    "RegisterMessagePumpHook",
    "IMPQueryIMEW",
    "CascadeChildWindows",
    "GetKeyboardType",
    "BroadcastSystemMessageExW",
    "WindowFromDC",
    "EnumChildWindows",
    "IsClipboardFormatAvailable",
    "SoundSentry",
    "DefRawInputProc",
    "CreateDesktopExW",
    "PackDDElParam",
    "SetUserObjectSecurity",
    "GetClassInfoW",
    "RegisterClassExA",
    "UserLpkTabbedTextOut",
    "DdeDisconnect",
    "DragDetect",
    "IsMenu",
    "IsCharAlphaA",
    "DrawEdge",
    "CallMsgFilterW",
    "CreateDialogParamW",
    "GetPointerInfo",
    "AppendMenuW",
    "DisplayConfigGetDeviceInfo",
    "GetTabbedTextExtentA",
    "HungWindowFromGhostWindow",
    "MsgWaitForMultipleObjects",
    "LockWindowUpdate",
    "GetPointerDeviceRects",
    "SetClipboardData",
    "UnpackDDElParam",
    "GetReasonTitleFromReasonCode",
    "PostThreadMessageA",
    "ShowScrollBar",
    "DdeSetQualityOfService",
    "UnregisterUserApiHook",
    "WINNLSGetIMEHotkey",
    "GetPointerInfoHistory",
    "SendDlgItemMessageA",
    "CreateAcceleratorTableA",
    "UnregisterClassW",
    "CheckRadioButton",
    "EnumDesktopWindows",
    "AdjustWindowRect",
    "GetMenuItemRect",
    "EndDialog",
    "EndDeferWindowPos",
    "FrostCrashedWindow",
    "EnumWindowStationsW",
    "RealGetWindowClass",
    "SetWindowStationUser",
    "SetCursorPos",
    "MessageBoxA",
    "DdeAbandonTransaction",
    "IsMouseInPointerEnabled",
    "DrawMenuBar",
    "DestroyCaret",
    "DdeReconnect",
    "MapWindowPoints",
    "GetClassInfoExA",
    "GetWindowThreadProcessId",
    "ShowOwnedPopups",
    "SetCursor",
    "SetFocus",
    "DwmStopRedirection",
    "DdeInitializeA",
    "RealGetWindowClassA",
    "CreateDCompositionHwndTarget",
    "DrawTextA",
    "DdeNameService",
    "CharPrevA",
    "IsRectEmpty",
    "GetRawPointerDeviceData",
    "MapVirtualKeyExW",
    "BringWindowToTop",
    "CheckDBCSEnabledExt",
    "UpdateWindow",
    "CopyIcon",
    "IsCharAlphaNumericA",
    "DestroyWindow",
    "ReleaseDC",
    "ChildWindowFromPointEx",
    "MessageBoxIndirectA",
    "SendIMEMessageExW",
    "EnableScrollBar",
    "LoadLocalFonts",
    "BroadcastSystemMessage",
    "gapfnScSendMessage",
    "RealGetWindowClassW",
    "GetWindowContextHelpId",
    "SetPropA",
    "GetClassLongW",
    "InsertMenuA",
    "AllowForegroundActivation",
    "DdeCreateStringHandleA",
    "GetActiveWindow",
    "GetClassInfoExW",
    "SetKeyboardState",
    "UnhookWinEvent",
    "UpdateLayeredWindow",
    "GetMessageTime",
    "IntersectRect",
    "DialogBoxIndirectParamAorW",
    "GetDisplayConfigBufferSizes",
    "RegisterPointerDeviceNotifications",
    "EnumWindowStationsA",
    "PrintWindow",
    "TranslateAccelerator",
    "UserRegisterWowHandlers",
    "CharNextExA",
    "DoSoundDisconnect",
    "GetCaretPos",
    "DdeInitializeW",
    "SetClipboardViewer",
    "OpenWindowStationA",
    "DdeEnableCallback",
    "GetRawInputDeviceInfoA",
    "CallMsgFilter",
    "SetClassLongW",
    "RegisterClassA",
    "UnregisterMessagePumpHook",
    "GetKeyboardLayoutNameA",
    "DisableProcessWindowsGhosting",
    "UnregisterClassA",
    "WinHelpA",
    "GetMenuDefaultItem",
    "GetSubMenu",
    "SetProcessRestrictionExemption",
    "IsImmersiveProcess",
    "DrawIcon",
    "RegisterServicesProcess",
    "GetCursorFrameInfo",
    "PrivateExtractIconExA",
    "GetSystemMenu",
    "RegisterHotKey",
    "WinHelpW",
    "SoftModalMessageBox",
    "GetMenuContextHelpId",
    "LoadIconA",
    "GetMenuItemCount",
    "LoadIconW",
    "MBToWCSEx",
    "GetScrollPos",
    "LoadKeyboardLayoutA",
    "DdeKeepStringHandle",
    "SetScrollRange",
    "DefWindowProcA",
    "UnregisterSuspendResumeNotification",
    "GetTitleBarInfo",
    "WaitForInputIdle",
    "SetThreadInputBlocked",
    "UserRealizePalette",
    "EndPaint",
    "IsCharLowerW",
    "GetAppCompatFlags2",
    "CharUpperBuffW",
    "GetInputLocaleInfo",
    "OpenIcon",
    "SetWindowCompositionAttribute",
    "CreateMDIWindowA",
    "RegisterTasklist",
    "MenuItemFromPoint",
    "OpenInputDesktop",
    "RegisterClipboardFormatA",
    "DdeAccessData",
    "CreateMDIWindowW",
    "EnumDisplaySettingsA",
    "IsQueueAttached",
    "ClientThreadSetup",
    "DdeUnaccessData",
    "IsWinEventHookInstalled",
    "SetCursorContents",
    "GetUpdateRect",
    "SetWindowPos",
    "UserClientDllInitialize",
    "DwmStartRedirection",
    "GetClassNameA",
    "GetPointerPenInfo",
    "GetPointerTouchInfo",
    "GetSysColor",
    "CharLowerW",
    "GetListBoxInfo",
    "GetClassNameW",
    "InsertMenuW",
    "OffsetRect",
    "PostThreadMessageW",
    "GetInternalWindowPos",
    "SetProcessDefaultLayout",
    "DefFrameProcA",
    "DeferWindowPosAndBand",
    "ModifyMenuA",
    "GetDCEx",
    "CountClipboardFormats",
    "GetPointerPenInfoHistory",
    "UserHandleGrantAccess",
    "OemToCharW",
    "GetSystemMetrics",
    "IsWow64Message",
    "SetTimer",
    "CreateAcceleratorTableW",
    "SendNotifyMessageW",
    "SetSysColorsTemp",
    "GetMenuBarInfo",
    "IsSETEnabled",
    "OemToCharBuffA",
    "GetDlgItemTextA",
    "CharToOemBuffW",
    "RegisterBSDRWindow",
    "EnableMouseInPointer",
    "PaintMenuBar",
    "LoadMenuA",
    "SetActiveWindow",
    "CreateIconFromResource",
    "QueryBSDRWindow",
    "SetSystemCursor",
    "UpdateDefaultDesktopThumbnail",
    "IMPGetIMEA",
    "PrivateExtractIconExW",
    "IMPSetIMEA",
    "GetWindowTextLengthA",
    "GetMagnificationDesktopColorEffect",
    "ConsoleControl",
    "DrawAnimatedRects",
    "ToAsciiEx",
    "AppendMenuA",
    "DestroyAcceleratorTable",
    "IsCharAlphaNumericW",
    "PtInRect",
    "DialogBoxIndirectParamW",
    "AlignRects",
    "CascadeWindows",
    "SetTaskmanWindow",
    "SwapMouseButton",
    "CharPrevW",
    "CharPrevExA",
    "SendMessageW",
    "GetMessageW",
    "GetClientRect",
    "SetMagnificationDesktopColorEffect",
    "SetMenu",
    "CreateWindowStationA",
    "GetClassWord",
    "UnregisterTouchWindow",
    "ChangeMenuA",
    "DdeDisconnectList",
    "CreateDialogIndirectParamAorW",
    "GetPriorityClipboardFormat",
    "CheckDlgButton",
    "SetMagnificationLensCtxInformation",
    "CreateDesktopA",
    "GrayStringA",
    "DrawIconEx",
    "SendDlgItemMessageW",
    "SetWindowPlacement",
    "SetDisplayAutoRotationPreferences",
    "CheckProcessSession",
    "UnlockWindowStation",
    "SetPropW",
    "GetInputDesktop",
    "CopyImage",
    "PostQuitMessage",
    "GetPointerFrameInfoHistory",
    "SetMirrorRendering",
    "wvsprintfW",
    "GetDisplayAutoRotationPreferences",
    "GetParent",
    "ChangeDisplaySettingsExA",
    "RegisterTouchHitTestingWindow",
    "RedrawWindow",
    "GetUserObjectInformationW",
    "SetWindowWord",
    "CreateWindowExA",
    "InjectTouchInput",
    "RealChildWindowFromPoint",
    "LockSetForegroundWindow",
    "GetPointerFramePenInfoHistory",
    "GetClipboardFormatNameA",
    "CalculatePopupWindowPosition",
    "GetMenuItemInfoW",
    "GetUpdateRgn",
    "DispatchMessageA",
    "DwmLockScreenUpdates",
    "EqualRect",
    "EndTask",
    "MapDialogRect",
    "SetWindowDisplayAffinity",
    "GetDesktopWindow",
    "OpenWindowStationW",
    "HiliteMenuItem",
    "GetWindowPlacement",
    "RemoveMenu",
    "SetWindowRgnEx",
    "SetClassWord",
    "CharToOemW",
    "AnimateWindow",
    "InternalGetWindowIcon",
    "EnumDesktopsA",
    "GetWindowDisplayAffinity",
    "EndMenu",
    "CreateCursor",
    "GetGUIThreadInfo",
    "IMPGetIMEW",
    "UnregisterSessionPort",
    "LookupIconIdFromDirectoryEx",
    "LookupIconIdFromDirectory",
    "MonitorFromRect",
    "DefMDIChildProcW",
    "IsCharLowerA",
    "RegisterWindowMessageW",
    "RemovePropW",
    "SetWindowsHookW",
    "DlgDirListComboBoxA",
    "GetUnpredictedMessagePos",
    "IsWindowVisible",
    "GetKeyboardLayoutList",
    "GetLayeredWindowAttributes",
    "GetUserObjectSecurity",
    "GetWindowModuleFileNameA",
    "SendMessageCallbackW",
    "SetWindowContextHelpId",
    "SetCapture",
    "GetMenuItemInfoA",
    "DdeConnectList",
    "GetAltTabInfoW",
    "DdeImpersonateClient",
    "MonitorFromWindow",
    "keybd_event",
    "RegisterLogonProcess",
    "RegisterShellHookWindow",
    "RegisterDeviceNotificationW",
    "GetOpenClipboardWindow",
    "DeleteMenu",
    "GetWinStationInfo",
    "GetWindowRgnEx",
    "RegisterPointerInputTarget",
    "SetLastErrorEx",
    "UnregisterPointerInputTarget",
    "ActivateKeyboardLayout",
    "DeviceEventWorker",
    "EmptyClipboard",
    "GetThreadDesktop",
    "SetWindowBand",
    "DefWindowProcW",
    "wvsprintfA",
    "DrawFrameControl",
    "GetAltTabInfo",
    "GetCursorPos",
    "GetClipboardData",
    "GetWindowModuleFileNameW",
    "WaitMessage",
    "SetCaretPos",
    "InsertMenuItemW",
    "SetMenuDefaultItem",
    "DefFrameProcW",
    "ExitWindowsEx",
    "GetMessagePos",
    "LogicalToPhysicalPoint",
    "GetTabbedTextExtentW",
    "LoadRemoteFonts",
    "ShutdownBlockReasonDestroy",
    "GetGestureInfo",
    "FillRect",
    "CreateWindowExW",
    "DisplayConfigSetDeviceInfo",
    "ScrollChildren",
    "CreateWindowInBand",
    "GetTopWindow",
    "GetKeyNameTextW",
    "WaitForRedirectionStartComplete",
    "ImpersonateDdeClientWindow",
    "RegisterDeviceNotificationA",
    "DrawCaptionTempA",
    "GetDlgItem",
    "CreateDialogIndirectParamW",
    "DrawFrame",
    "CloseTouchInputHandle",
    "SetMenuItemInfoW",
    "DlgDirSelectComboBoxExW",
    "GetClipboardOwner",
    "MessageBeep",
    "GetTouchInputInfo",
    "IsWindowEnabled",
    "IsTopLevelWindow",
    "SetWindowCompositionTransition",
    "SetWindowsHookExA",
    "TrackPopupMenuEx",
    "CliImmSetHotKey",
    "FlashWindowEx",
    "GetSysColorBrush",
    "SystemParametersInfoA",
    "OpenThreadDesktop",
    "BroadcastSystemMessageW",
    "InvalidateRgn",
    "CloseWindow",
    "NotifyWinEvent",
    "GetMenu",
    "GetAncestor",
    "IsChild",
    "GetDialogBaseUnits",
    "EnableWindow",
    "GetMessageA",
    "LoadImageW",
    "SetMagnificationDesktopMagnification",
    "IsThreadMessageQueueAttached",
    "SetWindowTextA",
    "EnumThreadWindows",
    "DwmGetRemoteSessionOcclusionState",
    "DlgDirSelectComboBoxExA",
    "SetShellWindow",
    "IsCharAlphaW",
    "RecordShutdownReason",
    "IsTouchWindow",
    "wsprintfW",
    "IsGUIThread",
    "GetMonitorInfoA",
    "LoadBitmapW",
    "CheckMenuRadioItem",
    "GetDoubleClickTime",
    "LockWindowStation",
    "CloseClipboard",
    "UnionRect",
    "BroadcastSystemMessageExA",
    "EvaluateProximityToRect",
    "GetClipboardSequenceNumber",
    "GetWindowWord",
    "MenuWindowProcA",
    "DeregisterShellHookWindow",
    "ChildWindowFromPoint",
    "GetGestureConfig",
    "SetMenuItemBitmaps",
    "EnumDisplaySettingsW",
    "SetWindowLongW",
    "CharLowerBuffW",
    "SetMenuItemInfoA",
    "InSendMessage",
    "MoveWindow",
    "RegisterGhostWindow",
    "EvaluateProximityToPolygon",
    "SetWinEventHook",
    "UpdateLayeredWindowIndirect",
    "CopyRect",
    "MessageBoxExW",
    "RegisterSuspendResumeNotification",
    "UnregisterPowerSettingNotification",
    "MessageBoxExA",
    "RegisterWindowMessageA",
    "GetGestureExtraArgs",
    "RegisterClassW",
    "FindWindowA",
    "LoadAcceleratorsA",
    "IsThreadDesktopComposited",
    "AddClipboardFormatListener",
    "GetUpdatedClipboardFormats",
    "FrameRect",
    "User32InitializeImmEntryTable",
    "InvertRect",
    "GetRawInputBuffer",
    "GetProcessDefaultLayout",
    "CallWindowProcW",
    "IsZoomed",
    "GetCursorInfo",
    "BeginDeferWindowPos",
    "GrayStringW",
    "SwitchToThisWindow",
    "BeginPaint",
    "TabbedTextOutA",
    "GetTopLevelWindow",
    "VkKeyScanExW",
    "ExcludeUpdateRgn",
    "GetKeyState",
    "EnableSessionForMMCSS",
    "GetDlgCtrlID",
    "AdjustWindowRectEx",
    "SetForegroundWindow",
    "TileWindows",
    "GetPointerFrameTouchInfo",
    "FindWindowExA",
    "GetWindowRgnBox",
    "GetForegroundWindow",
    "SetWindowFeedbackSetting",
    "ScrollWindow",
    "LoadCursorA",
    "SetCoalescableTimer",
    "PrivateExtractIconsW",
    "RemovePropA",
    "GetFocus",
    "GetLastActivePopup",
    "OpenDesktopA",
    "DrawTextW",
    "ShowCaret",
    "MapVirtualKeyW",
    "SubtractRect",
    "IsProcessDPIAware",
    "DdeQueryStringA",
    "FindWindowW",
    "GetClipboardAccessToken",
    "PeekMessageA",
    "CallNextHookEx",
    "GetRawInputDeviceList",
    "LoadCursorFromFileW",
    "GetScrollRange",
    "SetSystemMenu",
    "GetAppCompatFlags",
    "GetPointerFrameTouchInfoHistory",
    "LoadCursorW",
    "EnumPropsW",
    "FreeDDElParam",
    "GetWindowLongW",
    "GetScrollInfo",
    "InflateRect",
    "DdeAddData",
    "FlashWindow",
    "CloseDesktop",
    "IsWindowUnicode",
    "OemToCharA",
    "VkKeyScanA",
    "GetCurrentInputMessageSource",
    "GetKeyboardLayoutNameW",
    "SendMessageCallbackA",
    "RegisterFrostWindow",
    "DdeCreateDataHandle",
    "SetDisplayConfig",
    "SetMenuInfo",
    "GetQueueStatus"
  ],
  "usercpl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "userenv.dll": [
    "GetAllUsersProfileDirectoryA",
    "GetNextFgPolicyRefreshInfo",
    "AreThereVisibleLogoffScripts",
    "FreeGPOListA",
    "GetPreviousFgPolicyRefreshInfo",
    "UnloadUserProfile",
    "GetAppContainerFolderPath",
    "ExpandEnvironmentStringsForUserA",
    "RefreshPolicyEx",
    "RsopResetPolicySettingStatus",
    "GetUserProfileDirectoryA",
    "CreateEnvironmentBlock",
    "GetDefaultUserProfileDirectoryA",
    "WaitForUserPolicyForegroundProcessing",
    "DeleteProfileW",
    "GetProfilesDirectoryW",
    "CreateAppContainerProfile",
    "DllRegisterServer",
    "DestroyEnvironmentBlock",
    "GetGPOListA",
    "DllUnregisterServer",
    "ForceSyncFgPolicy",
    "UnregisterGPNotification",
    "RsopAccessCheckByType",
    "GetProfilesDirectoryA",
    "GetDefaultUserProfileDirectoryW",
    "GetGPOListW",
    "RefreshPolicy",
    "RsopSetPolicySettingStatus",
    "GetProfileType",
    "GetAllUsersProfileDirectoryW",
    "ExpandEnvironmentStringsForUserW",
    "DllGetContractDescription",
    "DllCanUnloadNow",
    "ProcessGroupPolicyCompleted",
    "FreeGPOListW",
    "GetAppliedGPOListW",
    "LeaveCriticalPolicySection",
    "GenerateGPNotification",
    "GetUserProfileDirectoryW",
    "EnterCriticalPolicySection",
    "RegisterGPNotification",
    "RsopFileAccessCheck",
    "LoadUserProfileA",
    "GetAppContainerRegistryLocation",
    "LoadUserProfileW",
    "DllGetClassObject",
    "ProcessGroupPolicyCompletedEx",
    "HasPolicyForegroundProcessingCompleted",
    "AreThereVisibleShutdownScripts",
    "DeleteAppContainerProfile",
    "WaitForMachinePolicyForegroundProcessing",
    "CreateProfile",
    "DeleteProfileA",
    "DeriveAppContainerSidFromAppContainerName",
    "RsopLoggingEnabled",
    "GetAppliedGPOListA"
  ],
  "userinitext.dll": [
    "PerformXForestLogonCheck",
    "IsTSAppCompatOn",
    "CreateExplorerSessionKey",
    "ImmWorker",
    "ProcesRemoteSessionInitialCommand",
    "SetShellDesktopSwitchEvent",
    "IsSubDesktopSession",
    "SetupHotKeyForKeyboardLayout",
    "DisplayMessageAndExitWindows",
    "LoadRemoteFontsAndInitMiscWorker",
    "ProcessTermSrvIniFiles"
  ],
  "usp10.dll": [
    "ScriptApplyDigitSubstitution",
    "ScriptStringValidate",
    "ScriptGetLogicalWidths",
    "ScriptStringCPtoX",
    "UspAllocCache",
    "ScriptItemize",
    "ScriptJustify",
    "ScriptApplyLogicalWidth",
    "ScriptLayout",
    "ScriptCPtoX",
    "ScriptString_pSize",
    "ScriptStringGetLogicalWidths",
    "ScriptString_pLogAttr",
    "ScriptPlace",
    "LpkPresent",
    "ScriptGetFontAlternateGlyphs",
    "ScriptXtoCP",
    "ScriptGetCMap",
    "UspAllocTemp",
    "ScriptGetFontScriptTags",
    "ScriptGetFontFeatureTags",
    "ScriptIsComplex",
    "ScriptCacheGetHeight",
    "ScriptRecordDigitSubstitution",
    "ScriptTextOut",
    "ScriptPositionSingleGlyph",
    "ScriptFreeCache",
    "ScriptGetFontLanguageTags",
    "ScriptShape",
    "ScriptItemizeOpenType",
    "ScriptBreak",
    "ScriptStringGetOrder",
    "ScriptStringXtoCP",
    "ScriptPlaceOpenType",
    "ScriptSubstituteSingleGlyph",
    "ScriptStringAnalyse",
    "ScriptGetGlyphABCWidth",
    "ScriptGetProperties",
    "ScriptGetFontProperties",
    "ScriptStringFree",
    "ScriptString_pcOutChars",
    "ScriptStringOut",
    "UspFreeMem",
    "ScriptShapeOpenType"
  ],
  "ustprov.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "utildll.dll": [
    "CalculateDiffTime",
    "DateTimeString",
    "NetBIOSDeviceEnumerate",
    "ElapsedTimeString",
    "IsPartOfDomain",
    "StrProcessState",
    "CompareElapsedTime",
    "GetSystemMessageA",
    "EnumerateMultiUserServers",
    "GetUnknownString",
    "QueryCurrentWinStation",
    "NetworkDeviceEnumerate",
    "InstallModem",
    "ParseDecoratedAsyncDeviceName",
    "GetSystemMessageW",
    "StrAsyncConnectState",
    "TestUserForAdmin",
    "RegGetNetworkServiceName",
    "StrSystemWaitReason",
    "AsyncDeviceEnumerate",
    "FormDecoratedAsyncDeviceName",
    "RegGetNetworkDeviceName",
    "SetupAsyncCdConfig",
    "InitializeAnonymousUserCompareList",
    "HaveAnonymousUsersChanged",
    "CtxGetAnyDCName",
    "CurrentDateTimeString",
    "ConfigureModem",
    "CachedGetUserFromSid",
    "CalculateElapsedTime",
    "StrConnectState",
    "WinEnumerateDevices",
    "GetAssociatedPortName",
    "StandardErrorMessage",
    "GetUserFromSid",
    "StrSdClass"
  ],
  "uudf.dll": [
    "Format",
    "public: __thiscall METADATA_PARTITION::METADATA_PARTITION(void)",
    "public: __thiscall UDF_SA::UDF_SA(void)",
    "FormatEx",
    "public: unsigned char __thiscall UDF_LVOL::ReadFromDisk(class UDF_SA *,class MESSAGE *,class VDS *)",
    "Chkdsk",
    "public: __thiscall UDF_LVOL::UDF_LVOL(void)",
    "ChkdskEx",
    "public: __thiscall UDF_VOL::UDF_VOL(void)",
    "public: unsigned char __thiscall UDF_LVOL::CreateOnDisk(class UDF_SA *,class MESSAGE *,class VDS *,struct EXTENTAD *,unsigned long,struct EXTENTAD *)",
    "public: unsigned char __thiscall UDF_SA::Initialize(class LOG_IO_DP_DRIVE *,class MESSAGE *,unsigned short)",
    "GetFilesystemInformation",
    "public: virtual __thiscall UDF_VOL::~UDF_VOL(void)",
    "public: virtual __thiscall UDF_LVOL::~UDF_LVOL(void)",
    "public: virtual __thiscall METADATA_PARTITION::~METADATA_PARTITION(void)",
    "public: virtual __thiscall UDF_SA::~UDF_SA(void)",
    "Recover",
    "public: enum FORMAT_ERROR_CODE __thiscall UDF_VOL::Initialize(class WSTRING const *,class MESSAGE *,unsigned char,unsigned short,unsigned char,unsigned char,unsigned char)"
  ],
  "uxlib.dll": [
    "private: static class ILoadDriver * CLoadDriver::s_Instance",
    "public: virtual class CLayeredDriver __thiscall CLayeredDrivers::GetLayeredDriver(class ATL::CStringT > >)",
    "private: void __thiscall CImageData::v_AddLanguage(unsigned short const *,unsigned short const *,int)",
    "public: class CLanguages & __thiscall CLanguages::operator=(class CLanguages const &)",
    "public: virtual int __thiscall CLayeredDrivers::Initialize(class ATL::CStringT > >,class ATL::CStringT > >)",
    "public: __thiscall ATL::CSimpleArray >::CSimpleArray >(class ATL::CSimpleArray > const &)",
    "public: unsigned short __thiscall ATL::CSimpleStringT::operator[](int)const",
    "public: int __thiscall ATL::CSimpleArray >::Find(class CDriverItem const &)const",
    "public: static int __stdcall CInternationalUtils::GetShowLangKeyboard(void)",
    "public: int __thiscall ATL::CStringT > >::Delete(int,int)",
    "public: __thiscall CKeyboardLayouts::CKeyboardLayouts(class CKeyboardLayouts const &)",
    "public: class CLayeredDrivers & __thiscall CLayeredDrivers::operator=(class CLayeredDrivers const &)",
    "public: virtual unsigned short * __thiscall CImageData::GetDescription(void)",
    "public: __thiscall IProductKeyModule::IProductKeyModule(class IProductKeyModule const &)",
    "public: void __thiscall ATL::CSimpleStringT::ReleaseBuffer(int)",
    "private: int __thiscall CProductKeyModule::IsVolumeLicensingKeyValid(void)",
    "public: unsigned short * __thiscall ATL::CSimpleStringT::GetBuffer(void)",
    "public: int __thiscall PIDUtilStringView::RemoveString(int,int,int)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimRight(unsigned short)",
    "public: virtual void __thiscall CImageData::SetEditionName(unsigned short *)",
    "public: unsigned short const * __thiscall PIDUtilStringView::GetPidStr(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(struct tagVARIANT const &)",
    "public: unsigned short * __thiscall ATL::CSimpleStringT::LockBuffer(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimRight(unsigned short const *)",
    "public: int __thiscall ATL::CStringT > >::Remove(unsigned short)",
    "private: static class IImageData * CImageData::s_Instance",
    "public: void __thiscall ATL::CStringT > >::AppendFormatV(unsigned short const *,char *)",
    "public: __thiscall CLanguages::CLanguages(class CLanguages const &)",
    "public: void __cdecl ATL::CStringT > >::FormatMessageW(unsigned int,...)",
    "public: class ATL::CStringT > > __thiscall CLayeredDriver::GetID(void)",
    "private: int __thiscall CKeyboardLayouts::v_PopulateKeyboardLayouts(void)",
    "public: unsigned short * __thiscall ATL::CSimpleStringT::GetBuffer(int)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(unsigned short)",
    "public: struct _BLOCKED_REASON * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: virtual int __thiscall CProductKeyModule::Initialize(void *)",
    "private: void __thiscall CProductKeyModule::SetProductKey(class ATL::CStringT > >)",
    "public: void __thiscall ATL::CSimpleStringT::Truncate(int)",
    "public: void __thiscall MyUtilString::ClearString(void)",
    "public: __thiscall CLanguages::~CLanguages(void)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Mid(int,int)const",
    "public: __thiscall CLocales::CLocales(class CLocales const &)",
    "private: int __thiscall CKeyboardLayouts::v_LoadInputProcs(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(char)",
    "public: __thiscall CLanguages::CLanguages(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned char const *)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned char const *,struct ATL::IAtlStringMgr *)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(char)",
    "public: static int __stdcall CInternationalUtils::SetTargetLayeredDriver(class ATL::CStringT > >)",
    "public: unsigned short const * __thiscall ATL::CSimpleStringT::GetString(void)const",
    "public: static int __stdcall CInternationalUtils::IsLanguageEnabled(class ATL::CStringT > >,class ATL::CStringT > >)",
    "public: virtual int __thiscall CKeyboardLayouts::SetUILanguage(class ATL::CStringT > >)",
    "public: struct _BLOCKED_REASON * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: int __thiscall ATL::CSimpleArray >::Add(class CDriverItem const &)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator=(unsigned short const *)",
    "public: static int __stdcall CInternationalUtils::SetTargetLocale(class ATL::CStringT > >)",
    "public: int __thiscall ATL::CStringT > >::FindOneOf(unsigned short const *)const",
    "private: static struct ATL::CStringData * __cdecl ATL::CSimpleStringT::CloneData(struct ATL::CStringData *)",
    "public: class ATL::CStringT > > __thiscall CLocale::GetLocaleName(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short const *,int)",
    "private: void __thiscall CLayeredDrivers::v_DeleteLayeredDrivers(void)",
    "public: static void __stdcall CImageData::SetInstance(class IImageData *)",
    "public: int __thiscall MyUtilString::RemoveString(int,int)",
    "public: __thiscall ATL::CSimpleStringT::operator unsigned short const *(void)const",
    "public: int __thiscall ATL::CStringT > >::Collate(unsigned short const *)const",
    "public: void __cdecl ATL::CStringT > >::FormatMessageW(unsigned short const *,...)",
    "public: virtual class CKeyboardLayout __thiscall CKeyboardLayouts::GetLayout(class ATL::CStringT > >)",
    "public: virtual unsigned short * __thiscall CImageData::GetImageIdentifier(void)",
    "public: struct ATL::IAtlStringMgr * __thiscall ATL::CStringT > >::GetManager(void)const",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::MakeUpper(void)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(struct _BLOCKED_REASON * const &)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(struct tagVARIANT const &)",
    "public: __thiscall CKeyboardLayouts::~CKeyboardLayouts(void)",
    "public: virtual unsigned int __thiscall CLoadDriver::GetCount(void)",
    "public: class MyUtilString & __thiscall MyUtilString::operator=(class MyUtilString const &)",
    "public: __thiscall IImageData::IImageData(class IImageData const &)",
    "public: static int __stdcall CInternationalUtils::SetTargetLanguage(class ATL::CStringT > >)",
    "public: int __thiscall ATL::CSimpleArray >::Find(struct _BLOCKED_REASON * const &)const",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char const *,int,struct ATL::IAtlStringMgr *)",
    "public: int __thiscall ATL::CSimpleStringT::GetLength(void)const",
    "public: void __thiscall ATL::CSimpleStringT::UnlockBuffer(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(char)",
    "public: static int __cdecl ATL::CSimpleStringT::StringLength(unsigned short const *)",
    "private: virtual __thiscall CLoadDriver::~CLoadDriver(void)",
    "public: virtual class CLanguage __thiscall CLanguages::GetLanguageFromLocalizedName(class ATL::CStringT > >)",
    "private: void __thiscall CKeyboardLayouts::v_DeleteKeyboardLayouts(void)",
    "private: int __thiscall CProductKeyModule::IsDigitalMarkerKeyValid(void)",
    "public: virtual int __thiscall CLanguages::SetUILanguage(class ATL::CStringT > >)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator=(class ATL::CSimpleStringT const &)",
    "const IImageData::`vftable'",
    "private: unsigned short * __thiscall CImageData::v_GetBBStr(unsigned short const *,unsigned short const *)",
    "private: unsigned long __thiscall CImageData::v_GetBBVal(unsigned short const *,unsigned short const *,unsigned long)",
    "public: class CDriverItem const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: class ATL::CStringT > > __thiscall CKeyboardLayout::GetLayoutID(void)",
    "const CImageData::`vftable'",
    "public: virtual int __thiscall CLoadDriver::GetDriverListAsync(class ATL::CStringT > >,int,void (__stdcall*)(void *,int),void *)",
    "public: int __thiscall ATL::CStringT > >::LoadStringW(struct HINSTANCE__ *,unsigned int)",
    "public: int __thiscall ATL::CStringT > >::Find(unsigned short,int)const",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Tokenize(unsigned short const *,int &)const",
    "public: virtual class CLanguage __thiscall CLanguages::GetLanguage(int)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(class ATL::CSimpleStringT const &)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char const *,int)",
    "public: __thiscall ATL::CSimpleArray >::~CSimpleArray >(void)",
    "public: static void __cdecl ATL::CStringT > >::Construct(class ATL::CStringT > > *)",
    "public: virtual unsigned short * __thiscall CImageData::GetColumnDataAtIndex(unsigned int)",
    "public: class ATL::CSimpleArray > & __thiscall ATL::CSimpleArray >::operator=(class ATL::CSimpleArray > const &)",
    "public: class CKeyboardLayout & __thiscall CKeyboardLayout::operator=(class CKeyboardLayout const &)",
    "public: int __thiscall ATL::CSimpleArray >::Add(class CLanguageItem const &)",
    "private: void __thiscall CImageData::v_GetBlockedReasons(unsigned short const *)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short const *)",
    "public: int __thiscall ATL::CStringT > >::LoadStringW(struct HINSTANCE__ *,unsigned int,unsigned short)",
    "public: class CInternationalUtils & __thiscall CInternationalUtils::operator=(class CInternationalUtils const &)",
    "protected: static void __cdecl ATL::CSimpleStringT::ThrowMemoryException(void)",
    "public: void __thiscall ATL::CSimpleStringT::SetString(unsigned short const *,int)",
    "public: static int __stdcall CInternationalUtils::SetUILanguage(class ATL::CStringT > >)",
    "public: __thiscall CKeyboardLayout::CKeyboardLayout(class ATL::CStringT > >,class ATL::CStringT > >)",
    "public: __thiscall CLocale::CLocale(class CLocale const &)",
    "public: void __thiscall ATL::CSimpleStringT::SetString(unsigned short const *)",
    "public: class CProductKeyModule & __thiscall CProductKeyModule::operator=(class CProductKeyModule const &)",
    "public: virtual int __thiscall CKeyboardLayouts::Initialize(class ATL::CStringT > >,class ATL::CStringT > >)",
    "const IProductKeyModule::`vftable'",
    "public: __thiscall CLayeredDriver::CLayeredDriver(class ATL::CStringT > >,class ATL::CStringT > >)",
    "public: virtual class CLocale __thiscall CLocales::GetLocale(int)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(struct ATL::IAtlStringMgr *)",
    "public: virtual int __thiscall CLanguages::GetLanguageCount(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(unsigned short)",
    "public: __thiscall CLoadDriver::CLoadDriver(class CLoadDriver const &)",
    "const CLanguages::`vftable'",
    "public: virtual int __thiscall CLayeredDrivers::GetLayeredDriverCount(void)",
    "public: class ATL::CStringT > > __thiscall CLanguage::GetNativeName(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(struct tagVARIANT const &)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(class CDriverItem const &)",
    "private: void __thiscall ATL::CSimpleStringT::SetLength(int)",
    "public: __thiscall CKeyboardLayout::~CKeyboardLayout(void)",
    "public: class CLocale * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::SpanIncluding(unsigned short const *)const",
    "public: __thiscall IImageData::IImageData(void)",
    "private: int __thiscall CLocales::v_PopulateLocales(void)",
    "public: static void __cdecl ATL::CSimpleStringT::CopyCharsOverlapped(unsigned short *,unsigned short const *,int)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Left(int)const",
    "public: static int __stdcall CInternationalUtils::SetHideOOBELang(class ATL::CStringT > >)",
    "public: class CLocale * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: virtual int __thiscall CProductKeyModule::ValidateProductKey(void *,unsigned short *,void (__stdcall*)(void *,unsigned int))",
    "public: virtual int __thiscall CImageData::Initialize(void *)",
    "public: virtual int __thiscall CKeyboardLayouts::GetLayoutCount(void)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,class CDriverItem const &)",
    "private: int __thiscall PIDUtilStringView::v_MakePidString(void)",
    "public: __thiscall ATL::CSimpleArray >::CSimpleArray >(void)",
    "const CProductKeyModule::`vftable'",
    "private: static int __stdcall CLocales::v_EnumLocalesProc(unsigned short *,unsigned long,long)",
    "public: int __thiscall ATL::CStringT > >::GetEnvironmentVariableW(unsigned short const *)",
    "public: class ATL::CStringT > > __thiscall CLayeredDriver::GetName(void)",
    "public: static void __cdecl ATL::CSimpleStringT::CopyChars(unsigned short *,unsigned short const *,int)",
    "public: int __thiscall ATL::CStringT > >::Insert(int,unsigned short)",
    "public: class IProductKeyModule & __thiscall IProductKeyModule::operator=(class IProductKeyModule const &)",
    "public: __thiscall CLocale::~CLocale(void)",
    "public: class CLanguageItem & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: __thiscall COSK::COSK(void)",
    "public: virtual __thiscall PIDUtilStringView::~PIDUtilStringView(void)",
    "const CKeyboardLayouts::`vftable'",
    "public: int __thiscall ATL::CStringT > >::Insert(int,unsigned short const *)",
    "private: class ATL::CStringT > > __thiscall PIDUtilStringView::v_MakeValidString(unsigned short const *)",
    "public: virtual int __thiscall CLocales::Initialize(class ATL::CStringT > >)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimRight(void)",
    "public: class CLayeredDriver & __thiscall CLayeredDriver::operator=(class CLayeredDriver const &)",
    "private: struct ATL::CStringData * __thiscall ATL::CSimpleStringT::GetData(void)const",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char const *)",
    "public: class ATL::CStringT > > __thiscall CKeyboardLayout::GetLayoutName(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short const *,struct ATL::IAtlStringMgr *)",
    "public: virtual int __thiscall CLocales::SetUILanguage(class ATL::CStringT > >)",
    "public: __thiscall CLocales::~CLocales(void)",
    "public: virtual int __thiscall CLoadDriver::GetShowFlagEarlyF6(void)",
    "public: void * __thiscall COSK::ShowOSK(int,unsigned short *,unsigned short *)",
    "public: int __thiscall ATL::CSimpleArray >::Add(struct _BLOCKED_REASON * const &)",
    "private: void __thiscall CImageData::v_GetAvailableLanguages(unsigned short const *)",
    "public: __thiscall CLocales::CLocales(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(char const *)",
    "protected: static void __cdecl ATL::CSimpleStringT::Concatenate(class ATL::CSimpleStringT &,unsigned short const *,int,unsigned short const *,int)",
    "const CLayeredDrivers::`vftable'",
    "public: __thiscall CLayeredDrivers::~CLayeredDrivers(void)",
    "private: int __thiscall PIDUtilStringView::v_IsValid(unsigned short)",
    "public: static class ILoadDriver * __stdcall CLoadDriver::GetInstance(void)",
    "public: void __thiscall ATL::CSimpleStringT::Empty(void)",
    "public: class ATL::CStringT > > __thiscall CLanguage::GetLocalizedName(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(unsigned short const *)",
    "public: virtual int __thiscall CLayeredDrivers::SetUILanguage(class ATL::CStringT > >)",
    "public: class PIDUtilStringView & __thiscall PIDUtilStringView::operator=(class PIDUtilStringView const &)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(class ATL::CSimpleStringT const &)",
    "const CLocales::`vftable'",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(unsigned short const *)",
    "public: int __thiscall MyUtilString::InsertChar(int,unsigned short)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short,int)",
    "public: class CLocale & __thiscall CLocale::operator=(class CLocale const &)",
    "public: static class ATL::CStringT > > __stdcall CInternationalUtils::GetLanguage(void)",
    "public: virtual int __thiscall CLoadDriver::SetHardwareFilter(int)",
    "public: void __thiscall ATL::CStringT > >::OemToCharA(void)",
    "private: int __thiscall CLayeredDrivers::v_PopulateLayeredDrivers(void)",
    "public: virtual class CLayeredDriver __thiscall CLayeredDrivers::operator[](int)",
    "private: class ATL::CStringT > > __thiscall CLanguages::v_GetLangIniPath(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimLeft(unsigned short const *)",
    "public: class CLocales & __thiscall CLocales::operator=(class CLocales const &)",
    "public: virtual class CKeyboardLayout __thiscall CKeyboardLayouts::GetLayout(int)",
    "public: virtual class CLanguage __thiscall CLanguages::GetDefaultFallbackLanguage(void)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(class CLocale * const &)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(unsigned char)",
    "public: virtual int __thiscall CLoadDriver::CanReadMedia(void)",
    "public: int __thiscall ATL::CStringT > >::Find(unsigned short const *,int)const",
    "public: virtual class CLocale __thiscall CLocales::GetLocale(class ATL::CStringT > >)",
    "public: int __thiscall ATL::CStringT > >::LoadStringW(unsigned int)",
    "public: void __thiscall ATL::CStringT > >::FormatV(unsigned short const *,char *)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(struct tagVARIANT const &,struct ATL::IAtlStringMgr *)",
    "public: int __thiscall PIDUtilStringView::InsertString(int,unsigned short const *)",
    "public: __thiscall PIDUtilStringView::PIDUtilStringView(class PIDUtilStringView const &)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(char const *)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::Trim(void)",
    "public: class CDriverItem & __thiscall ATL::CSimpleArray >::operator[](int)",
    "private: class CLanguage * __thiscall CLanguages::v_InitLanguage(class ATL::CStringT > >)",
    "private: void __thiscall CLanguages::v_DeleteLanguages(void)",
    "public: void __thiscall ATL::CSimpleStringT::AppendChar(unsigned short)",
    "public: __thiscall ATL::CSimpleStringT::CSimpleStringT(class ATL::CSimpleStringT const &)",
    "public: void __thiscall ATL::CStringT > >::FormatMessageV(unsigned short const *,char * *)",
    "private: __thiscall CLoadDriver::CLoadDriver(void)",
    "public: virtual int __thiscall CProductKeyModule::GetShowFlag(void)",
    "private: virtual __thiscall CImageData::~CImageData(void)",
    "public: void __thiscall ATL::CSimpleStringT::Append(class ATL::CSimpleStringT const &)",
    "public: virtual int __thiscall CLoadDriver::Initialize(void *)",
    "private: long __thiscall CProductKeyModule::ValidatePid(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimLeft(void)",
    "public: __thiscall CLanguage::~CLanguage(void)",
    "private: void __thiscall CImageData::v_AddBlockedReason(unsigned short const *,unsigned short const *)",
    "public: __thiscall CInternationalUtils::CInternationalUtils(void)",
    "public: __thiscall ATL::CSimpleStringT::operator class ATL::CSimpleStringT &(void)",
    "public: class CKeyboardLayouts & __thiscall CKeyboardLayouts::operator=(class CKeyboardLayouts const &)",
    "public: void __cdecl ATL::CStringT > >::Format(unsigned int,...)",
    "public: virtual int __thiscall CLocales::GetLocaleCount(void)",
    "public: __thiscall PIDUtilStringView::PIDUtilStringView(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::Trim(unsigned short)",
    "public: virtual class CLanguage __thiscall CLanguages::GetLanguageFromNativeDisplayName(class ATL::CStringT > >)",
    "public: class CLanguageItem const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: virtual int __thiscall CImageData::PopulateImageData(unsigned short const *,unsigned short *,int,struct HINSTANCE__ *)",
    "public: __thiscall COSK::~COSK(void)",
    "public: int __thiscall ATL::CStringT > >::Replace(unsigned short,unsigned short)",
    "public: struct _BLOCKED_REASON * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char const *,struct ATL::IAtlStringMgr *)",
    "public: int __thiscall MyUtilString::InsertString(int,unsigned short const *)",
    "public: void __cdecl ATL::CStringT > >::AppendFormat(unsigned int,...)",
    "private: void __thiscall ATL::CSimpleStringT::Attach(struct ATL::CStringData *)",
    "public: virtual class CLayeredDriver __thiscall CLayeredDrivers::GetLayeredDriver(int)",
    "public: static void __stdcall CLoadDriver::SetInstance(class ILoadDriver *)",
    "public: unsigned short * __thiscall ATL::CStringT > >::SetSysString(unsigned short * *)const",
    "public: __thiscall CLayeredDriver::CLayeredDriver(class CLayeredDriver const &)",
    "public: virtual unsigned short * __thiscall CImageData::GetDefaultLanguage(void)",
    "public: static class ATL::CStringT > > __stdcall CInternationalUtils::GetLocale(void)",
    "public: void __thiscall ATL::CSimpleStringT::Preallocate(int)",
    "public: class ATL::CStringT > > __thiscall CLanguage::GetAbbrevName(void)",
    "public: virtual void __thiscall CLoadDriver::ClearDriverList(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(void)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,class CLanguageItem const &)",
    "private: int __thiscall CKeyboardLayouts::v_InitInputProcs(void)",
    "private: unsigned short * __thiscall ATL::CSimpleStringT::PrepareWrite(int)",
    "public: virtual int __thiscall CLoadDriver::GetDefault(void)",
    "public: static int __stdcall CInternationalUtils::GetShowLangNeutral(void)",
    "public: __thiscall ATL::CStringT > >::~CStringT > >(void)",
    "public: virtual void __thiscall CImageData::SetFoundationFlag(int)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char,int)",
    "private: int __thiscall CLanguages::v_PopulateLanguages(void)",
    "public: virtual int __thiscall CLanguages::Initialize(void)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(class CLanguageItem const &)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,class CDriverItem const &)",
    "private: unsigned short * __thiscall CImageData::v_BuildKey(unsigned short const *,unsigned short const *)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Mid(int)const",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimLeft(unsigned short)",
    "private: int __thiscall CLoadDriver::PopulateDriverList(void)",
    "public: virtual class CLanguage __thiscall CLanguages::operator[](int)",
    "private: __thiscall CImageData::CImageData(void)",
    "public: __thiscall CProductKeyModule::CProductKeyModule(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short const *,int,struct ATL::IAtlStringMgr *)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,struct _BLOCKED_REASON * const &)",
    "public: __thiscall ATL::CSimpleStringT::CSimpleStringT(struct ATL::IAtlStringMgr *)",
    "public: int __thiscall CLanguages::GetLanguageNativeDisplayNameCount(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::Trim(unsigned short const *)",
    "public: virtual int __thiscall CProductKeyModule::SetActivation(unsigned long)",
    "public: static int __stdcall CInternationalUtils::SetTargetKeyboard(class ATL::CStringT > >)",
    "public: class CDriverItem * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: void __thiscall ATL::CSimpleStringT::SetManager(struct ATL::IAtlStringMgr *)",
    "public: int __thiscall ATL::CStringT > >::Compare(unsigned short const *)const",
    "public: static void __cdecl ATL::CSimpleStringT::CopyChars(unsigned short *,unsigned int,unsigned short const *,int)",
    "public: virtual class CDriverItem & __thiscall CLoadDriver::operator[](unsigned int)",
    "public: class COSK & __thiscall COSK::operator=(class COSK const &)",
    "public: __thiscall CLanguage::CLanguage(class CLanguage const &)",
    "private: bool __thiscall ATL::CStringT > >::CheckImplicitLoad(void const *)",
    "public: __thiscall CLayeredDrivers::CLayeredDrivers(void)",
    "public: class CLanguage & __thiscall CLanguage::operator=(class CLanguage const &)",
    "public: class CKeyboardLayout __thiscall CKeyboardLayouts::GetDefaultLayout(void)",
    "public: __thiscall CLayeredDrivers::CLayeredDrivers(class CLayeredDrivers const &)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,struct _BLOCKED_REASON * const &)",
    "public: virtual class CLanguage __thiscall CLanguages::GetLanguageFromNativeName(class ATL::CStringT > >)",
    "public: virtual int __thiscall CLoadDriver::InstallDriver(long,void (__stdcall*)(void *,int),void *)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::MakeLower(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(unsigned char)",
    "public: int __thiscall ATL::CStringT > >::CollateNoCase(unsigned short const *)const",
    "public: void __cdecl ATL::CStringT > >::Format(unsigned short const *,...)",
    "public: __thiscall MyUtilString::MyUtilString(void)",
    "public: void __cdecl ATL::CStringT > >::AppendFormat(unsigned short const *,...)",
    "public: __thiscall CProductKeyModule::CProductKeyModule(class CProductKeyModule const &)",
    "private: void __thiscall ATL::CSimpleStringT::Reallocate(int)",
    "public: int __thiscall ATL::CStringT > >::Replace(unsigned short const *,unsigned short const *)",
    "private: void __thiscall ATL::CSimpleStringT::Fork(int)",
    "public: __thiscall CInternationalUtils::~CInternationalUtils(void)",
    "public: virtual void __thiscall CImageData::FreeInstance(void)",
    "public: class CImageData & __thiscall CImageData::operator=(class CImageData const &)",
    "public: class CLoadDriver & __thiscall CLoadDriver::operator=(class CLoadDriver const &)",
    "private: void __thiscall CImageData::v_FreeLanguages(void)",
    "public: __thiscall CImageData::CImageData(class CImageData const &)",
    "public: void __thiscall ATL::CSimpleStringT::ReleaseBufferSetLength(int)",
    "public: __thiscall CLocale::CLocale(class ATL::CStringT > >,class ATL::CStringT > >)",
    "private: unsigned short * __thiscall CImageData::v_CopyStr(unsigned short const *)",
    "public: unsigned short * __thiscall ATL::CSimpleStringT::GetBufferSetLength(int)",
    "public: unsigned short __thiscall ATL::CSimpleStringT::GetAt(int)const",
    "public: class ATL::CStringT > > __thiscall CLocale::GetAbbrevName(void)",
    "public: void __thiscall ATL::CSimpleStringT::SetAt(int,unsigned short)",
    "public: virtual int __thiscall CImageData::GetFoundationFlag(void)",
    "public: virtual unsigned int __thiscall CProductKeyModule::OnCallback(struct WDS_DATA const *)",
    "public: int __thiscall MyUtilString::RemoveChar(int)",
    "public: void __thiscall ATL::CSimpleArray >::RemoveAll(void)",
    "public: int __thiscall ATL::CSimpleArray >::RemoveAt(int)",
    "public: void __thiscall ATL::CStringT > >::CharToOemA(void)",
    "public: void __thiscall ATL::CSimpleStringT::FreeExtra(void)",
    "public: void __thiscall PIDUtilStringView::ClearString(void)",
    "public: int __thiscall ATL::CSimpleStringT::GetAllocLength(void)const",
    "public: int __thiscall PIDUtilStringView::ReplaceString(int,int,unsigned short const *)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(class ATL::CStringT > > const &)",
    "public: __thiscall ATL::CStringT > >::operator class ATL::CSimpleStringT &(void)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::SpanExcluding(unsigned short const *)const",
    "public: class CLanguageItem * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,class CLocale * const &)",
    "const PIDUtilStringView::`vftable'",
    "public: __thiscall CKeyboardLayouts::CKeyboardLayouts(void)",
    "public: struct ATL::IAtlStringMgr * __thiscall ATL::CSimpleStringT::GetManager(void)const",
    "public: bool __thiscall ATL::CSimpleStringT::IsEmpty(void)const",
    "public: __thiscall CLayeredDriver::~CLayeredDriver(void)",
    "public: static int __cdecl ATL::CSimpleStringT::StringLength(char const *)",
    "public: __thiscall ATL::CSimpleStringT::~CSimpleStringT(void)",
    "public: virtual class CLanguageItem & __thiscall CImageData::operator[](unsigned int)",
    "public: void __thiscall ATL::CSimpleStringT::Append(unsigned short const *,int)",
    "public: int __thiscall COSK::CloseOSK(void *)",
    "public: __thiscall ATL::CSimpleStringT::CSimpleStringT(unsigned short const *,struct ATL::IAtlStringMgr *)",
    "public: __thiscall IProductKeyModule::IProductKeyModule(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(unsigned short const *)",
    "public: virtual unsigned short * __thiscall CImageData::GetEditionName(void)",
    "public: virtual int __thiscall CLayeredDrivers::SetLocale(class ATL::CStringT > >)",
    "private: static void __stdcall CLoadDriver::StaticScanCallback(enum WDS_EVENT_RESULT,struct WDS_DATA const *,void *)",
    "public: virtual unsigned int __thiscall CImageData::GetCount(void)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,class CLocale * const &)",
    "public: int __thiscall ATL::CSimpleArray >::Find(class CLanguageItem const &)const",
    "public: int __thiscall ATL::CStringT > >::ReverseFind(unsigned short)const",
    "public: class CLocale * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "private: void __thiscall CImageData::v_FreeReasons(void)",
    "public: class IImageData & __thiscall IImageData::operator=(class IImageData const &)",
    "public: int __thiscall ATL::CStringT > >::CompareNoCase(unsigned short const *)const",
    "private: unsigned short * __thiscall CImageData::v_GetArchitectureName(struct HINSTANCE__ *,unsigned long)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(unsigned short)",
    "public: virtual class CKeyboardLayout __thiscall CKeyboardLayouts::operator[](int)",
    "public: int __thiscall ATL::CSimpleArray >::Add(class CLocale * const &)",
    "public: virtual class CLocale __thiscall CLocales::operator[](int)",
    "public: __thiscall ATL::CSimpleStringT::CSimpleStringT(unsigned short const *,int,struct ATL::IAtlStringMgr *)",
    "public: void __thiscall ATL::CSimpleStringT::Append(unsigned short const *)",
    "private: static void __stdcall CLoadDriver::StaticInstallCallback(enum WDS_EVENT_RESULT,struct WDS_DATA const *,void *)",
    "public: __thiscall CKeyboardLayout::CKeyboardLayout(class CKeyboardLayout const &)",
    "public: static class ATL::CStringT > > __stdcall CInternationalUtils::GetKeyboard(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::MakeReverse(void)",
    "public: static long __stdcall CInternationalUtils::PublishLanguageGatherEvent(void *)",
    "public: __thiscall CLanguage::CLanguage(class ATL::CStringT > >,class ATL::CStringT > >,class ATL::CStringT > >,class ATL::CStringT > >)",
    "public: unsigned short const * __thiscall MyUtilString::GetString(void)",
    "public: int __thiscall ATL::CSimpleArray >::Find(class CLocale * const &)const",
    "const CLoadDriver::`vftable'",
    "public: class ATL::CStringT > > __thiscall CLanguage::GetNativeDisplayName(void)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Right(int)const",
    "public: unsigned short * __thiscall ATL::CStringT > >::AllocSysString(void)const",
    "private: void __thiscall ATL::CSimpleStringT::PrepareWrite2(int)",
    "public: virtual int __thiscall CLoadDriver::GetHardwareFilter(void)",
    "public: int __thiscall ATL::CSimpleArray >::GetSize(void)const",
    "public: static void __cdecl ATL::CSimpleStringT::CopyCharsOverlapped(unsigned short *,unsigned int,unsigned short const *,int)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(unsigned char const *)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(class ATL::CStringT > > const &)",
    "public: static class IImageData * __stdcall CImageData::GetInstance(void)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,class CLanguageItem const &)"
  ],
  "uxlibres.dll": "No exports",
  "uxtheme.dll": [
    "DllGetActivationFactory",
    "IsThemePartDefined",
    "GetThemePartSize",
    "GetThemeSysInt",
    "DrawThemeParentBackgroundEx",
    "GetThemeSysString",
    "GetWindowTheme",
    "GetThemeSysSize",
    "GetThemeBackgroundRegion",
    "GetThemeBackgroundExtent",
    "EnableTheming",
    "SetWindowTheme",
    "GetThemeBool",
    "BufferedPaintClear",
    "GetThemeSysFont",
    "DllGetClassObject",
    "DrawThemeIcon",
    "GetThemeAnimationProperty",
    "BufferedPaintUnInit",
    "UpdatePanningFeedback",
    "IsThemeDialogTextureEnabled",
    "GetThemeAnimationTransform",
    "GetThemeString",
    "OpenThemeDataEx",
    "GetThemeAppProperties",
    "GetThemeEnumValue",
    "GetThemeStream",
    "SetThemeAppProperties",
    "GetThemeMetric",
    "IsCompositionActive",
    "GetThemeMargins",
    "GetBufferedPaintTargetRect",
    "GetThemeFilename",
    "CloseThemeData",
    "GetThemeSysColor",
    "GetBufferedPaintDC",
    "GetThemePropertyOrigin",
    "DrawThemeBackgroundEx",
    "GetCurrentThemeName",
    "BeginPanningFeedback",
    "GetThemeFont",
    "IsThemeActive",
    "GetBufferedPaintTargetDC",
    "GetThemeSysBool",
    "BufferedPaintSetAlpha",
    "DrawThemeEdge",
    "EndPanningFeedback",
    "BufferedPaintInit",
    "GetThemeTransitionDuration",
    "GetThemeDocumentationProperty",
    "EndBufferedPaint",
    "IsThemeBackgroundPartiallyTransparent",
    "GetThemeInt",
    "SetWindowThemeAttribute",
    "GetThemePosition",
    "GetThemeColor",
    "DrawThemeParentBackground",
    "GetThemeIntList",
    "GetThemeTextExtent",
    "ThemeInitApiHook",
    "HitTestThemeBackground",
    "GetThemeBackgroundContentRect",
    "IsAppThemed",
    "EnableThemeDialogTexture",
    "BeginBufferedAnimation",
    "GetBufferedPaintBits",
    "GetThemeSysColorBrush",
    "GetThemeRect",
    "DllCanUnloadNow",
    "BeginBufferedPaint",
    "GetThemeTextMetrics",
    "EndBufferedAnimation",
    "GetThemeBitmap",
    "DrawThemeTextEx",
    "OpenThemeData",
    "BufferedPaintRenderAnimation",
    "BufferedPaintStopAllAnimations",
    "DrawThemeText",
    "GetThemeTimingFunction",
    "DrawThemeBackground"
  ],
  "VAN.dll": [
    "RunVANW",
    "RunVANUI",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "VIDRESZR.DLL": [
    "CreateInstance",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "Vault.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "VaultRoaming.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "VmApplicationHealthMonitorProxy.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "VmdCoinstall.dll": [
    "VmdCoinstaller"
  ],
  "VscMgrPS.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "vaultcli.dll": [
    "DllGetActivationFactory",
    "VaultOpenVault",
    "VaultEnumerateVaults",
    "VaultGetItem",
    "VaultAddItem",
    "VaultCloseVault",
    "VaultEnumerateItems",
    "VaultFree",
    "VaultRemoveItem",
    "VaultGetItemType",
    "VaultCreateItemType",
    "VaultEnumerateItemTypes",
    "VaultGetInformation",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "VaultFindItems",
    "VaultDeleteItemType"
  ],
  "vaultsvc.dll": [
    "ServiceMain",
    "VaultSvcStopCallback"
  ],
  "vbajet32.dll": [
    "LoadExprSrvDll",
    "VBAGetExprSrv"
  ],
  "vbscript.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "vdmdbg.dll": [
    "VDMBreakThread",
    "VDMProcessException",
    "VDMGetPointer",
    "VDMSetDbgFlags",
    "VDMGetSegmentInfo",
    "VDMModuleFirst",
    "VDMEnumTaskWOW",
    "VDMGlobalNext",
    "VDMGetSymbol",
    "VDMStartTaskInWOW",
    "VDMGetSegtablePointer",
    "VDMGetSelectorModule",
    "VDMEnumProcessWOW",
    "VDMGetDbgFlags",
    "VDMGetAddrExpression",
    "VDMEnumTaskWOWEx",
    "VDMTerminateTaskWOW",
    "VDMDetectWOW",
    "VDMGetThreadContext",
    "VDMModuleNext",
    "VDMSetThreadContext",
    "VDMIsModuleLoaded",
    "VDMKillWOW",
    "VDMGetThreadSelectorEntry",
    "VDMSetContext",
    "VDMGetContext",
    "VDMGlobalFirst",
    "VDMGetModuleSelector"
  ],
  "vds_ps.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "vdsbas.dll": [
    "public: __thiscall CVdsPtr::operator unsigned short *(void)const",
    "public: struct _DRIVE_LAYOUT_INFORMATION_EX * __thiscall CVdsPtr::operator->(void)const",
    "private: void __thiscall CRtlSharedLock::AcquireRead(void)",
    "public: int __thiscall CRtlSharedLock::CurrentThreadIsWriter(void)",
    "public: __thiscall CPrvEnumObject::CPrvEnumObject(void)",
    "public: unsigned short * __thiscall CVdsHeapPtr::operator=(unsigned short *)",
    "public: struct _VDS_DRIVE_LAYOUT_INFORMATION_EX * __thiscall CVdsPtr::Detach(void)",
    "public: void __thiscall CVdsPtr::Attach(unsigned short *)",
    "public: struct _VDS_DRIVE_LAYOUT_INFORMATION_EX * * __thiscall CVdsPtr::operator&(void)",
    "public: __thiscall CVdsHeapPtr::CVdsHeapPtr(void)",
    "public: struct _AUCTION_THREAD_PARAMETER * __thiscall CVdsPtr::Detach(void)",
    "public: __thiscall CRtlSharedLock::CRtlSharedLock(void)",
    "public: __thiscall CVdsPnPNotificationBase::~CVdsPnPNotificationBase(void)",
    "public: void * __thiscall CVdsHandleImpl<4294967295>::Detach(void)",
    "private: void __thiscall CRtlSharedLock::AcquireWrite(void)",
    "public: int __thiscall CVdsAsyncObjectBase::IsCancelRequested(void)",
    "public: __thiscall CRtlSharedLock::~CRtlSharedLock(void)",
    "DllRegisterServer",
    "public: void __thiscall CVdsPtr::Attach(struct _VDS_DRIVE_LAYOUT_INFORMATION_EX *)",
    "public: __thiscall CVdsHandleImpl<0>::CVdsHandleImpl<0>(void)",
    "public: __thiscall CVdsHeapPtr::~CVdsHeapPtr(void)",
    "DllUnregisterServer",
    "public: __thiscall CVdsHandleImpl<4294967295>::CVdsHandleImpl<4294967295>(void)",
    "public: bool __thiscall CVdsPtr::operator!=(unsigned char *)const",
    "public: bool __thiscall CVdsPtr::operator==(unsigned char *)const",
    "public: void __thiscall CRtlList::`default constructor closure'(void)",
    "public: void __thiscall CVdsAsyncObjectBase::DisallowCancel(void)",
    "public: void __thiscall CVdsAsyncObjectBase::SetOutput(struct _VDS_ASYNC_OUTPUT)",
    "public: void * __thiscall CVdsHandleImpl<0>::operator=(void *)",
    "public: struct _VDS_DRIVE_LAYOUT_INFORMATION_EX * __thiscall CVdsHeapPtr::operator=(struct _VDS_DRIVE_LAYOUT_INFORMATION_EX *)",
    "public: struct _AUCTION_THREAD_PARAMETER * __thiscall CVdsPtr::operator->(void)const",
    "public: void * * __thiscall CVdsHandleImpl<4294967295>::operator&(void)",
    "public: void __thiscall CVdsPtr::Attach(struct _DRIVE_LAYOUT_INFORMATION_EX *)",
    "public: struct _DRIVE_LAYOUT_INFORMATION_EX * * __thiscall CVdsPtr::operator&(void)",
    "public: __thiscall CVdsPtr::operator unsigned char *(void)const",
    "public: bool __thiscall CVdsPtr::operator==(unsigned short *)const",
    "public: bool __thiscall CVdsPtr::operator==(struct _AUCTION_THREAD_PARAMETER *)const",
    "private: void __thiscall CRtlSharedLock::Release(void)",
    "void __stdcall StopReferenceHistory(void)",
    "DllCanUnloadNow",
    "public: __thiscall CVdsCriticalSection::CVdsCriticalSection(struct _RTL_CRITICAL_SECTION *)",
    "public: __thiscall CVdsPnPNotificationBase::CVdsPnPNotificationBase(void)",
    "public: __thiscall CVdsPtr::operator struct _VDS_DRIVE_LAYOUT_INFORMATION_EX *(void)const",
    "public: int __thiscall CVdsTraceSettings::m_NoDebuggerLogging(void)",
    "public: struct _AUCTION_THREAD_PARAMETER * __thiscall CVdsHeapPtr::operator=(struct _AUCTION_THREAD_PARAMETER *)",
    "public: __thiscall CPrvEnumObject::~CPrvEnumObject(void)",
    "public: void __thiscall CRtlMap::`default constructor closure'(void)",
    "public: __thiscall CVdsPtr::~CVdsPtr(void)",
    "public: void __thiscall CVdsAsyncObjectBase::SetOutputType(enum _VDS_ASYNC_OUTPUT_TYPE)",
    "public: bool __thiscall CVdsHandleImpl<0>::operator==(void *)const",
    "public: enum _VDS_ASYNC_OUTPUT_TYPE __thiscall CVdsAsyncObjectBase::GetOutputType(void)",
    "public: void __thiscall CVdsAsyncObjectBase::AllowCancel(void)",
    "DllGetClassObject",
    "public: unsigned char * __thiscall CVdsHeapPtr::operator=(unsigned char *)",
    "public: __thiscall CVdsHandleImpl<4294967295>::~CVdsHandleImpl<4294967295>(void)",
    "public: void __thiscall CVdsHandleImpl<4294967295>::Close(void)",
    "public: struct _VDS_DRIVE_LAYOUT_INFORMATION_EX * __thiscall CVdsPtr::operator->(void)const",
    "public: unsigned short * __thiscall CVdsPtr::Detach(void)",
    "public: __thiscall CVdsPtr::CVdsPtr(void)",
    "public: __thiscall CVdsCriticalSection::~CVdsCriticalSection(void)",
    "public: __thiscall CVdsUnlockIt::CVdsUnlockIt(long &)",
    "private: void __thiscall CRtlSharedLock::Downgrade(void)",
    "public: void __thiscall CPrvEnumObject::SetPositionToLast(void)",
    "private: void __thiscall CRtlSharedLock::Upgrade(void)",
    "public: __thiscall CVdsPtr::operator struct _DRIVE_LAYOUT_INFORMATION_EX *(void)const",
    "public: __thiscall CVdsUnlockIt::~CVdsUnlockIt(void)",
    "public: int __thiscall CVdsTraceSettings::m_ExtraLogging(void)",
    "public: __thiscall CVdsPtr::operator struct _AUCTION_THREAD_PARAMETER *(void)const",
    "public: void __thiscall CVdsAsyncObjectBase::ZeroAsyncOut(void)",
    "public: struct _DRIVE_LAYOUT_INFORMATION_EX * __thiscall CVdsPtr::Detach(void)",
    "public: __thiscall CVdsHandleImpl<0>::~CVdsHandleImpl<0>(void)",
    "unsigned long __stdcall StartReferenceHistory(void)",
    "public: __thiscall CVdsHandleImpl<4294967295>::operator void *(void)"
  ],
  "vdsdyn.dll": [
    "public: __thiscall CPrvEnumObject::CPrvEnumObject(void)",
    "private: void __thiscall CRtlSharedLock::AcquireRead(void)",
    "public: int __thiscall CRtlSharedLock::CurrentThreadIsWriter(void)",
    "public: __thiscall CRtlSharedLock::CRtlSharedLock(void)",
    "public: __thiscall CVdsPnPNotificationBase::~CVdsPnPNotificationBase(void)",
    "private: void __thiscall CRtlSharedLock::AcquireWrite(void)",
    "public: int __thiscall CVdsAsyncObjectBase::IsCancelRequested(void)",
    "public: __thiscall CRtlSharedLock::~CRtlSharedLock(void)",
    "DllRegisterServer",
    "public: void __thiscall CRtlList::`default constructor closure'(void)",
    "DllUnregisterServer",
    "public: void __thiscall CVdsAsyncObjectBase::DisallowCancel(void)",
    "public: void __thiscall CVdsAsyncObjectBase::SetOutput(struct _VDS_ASYNC_OUTPUT)",
    "void __stdcall StopReferenceHistory(void)",
    "private: void __thiscall CRtlSharedLock::Release(void)",
    "DllCanUnloadNow",
    "public: __thiscall CVdsCriticalSection::CVdsCriticalSection(struct _RTL_CRITICAL_SECTION *)",
    "public: __thiscall CVdsPnPNotificationBase::CVdsPnPNotificationBase(void)",
    "public: int __thiscall CVdsTraceSettings::m_NoDebuggerLogging(void)",
    "public: __thiscall CPrvEnumObject::~CPrvEnumObject(void)",
    "public: void __thiscall CRtlMap::`default constructor closure'(void)",
    "public: void __thiscall CVdsAsyncObjectBase::SetOutputType(enum _VDS_ASYNC_OUTPUT_TYPE)",
    "public: enum _VDS_ASYNC_OUTPUT_TYPE __thiscall CVdsAsyncObjectBase::GetOutputType(void)",
    "public: void __thiscall CVdsAsyncObjectBase::AllowCancel(void)",
    "DllGetClassObject",
    "public: __thiscall CVdsUnlockIt::CVdsUnlockIt(long &)",
    "public: __thiscall CVdsCriticalSection::~CVdsCriticalSection(void)",
    "private: void __thiscall CRtlSharedLock::Downgrade(void)",
    "public: void __thiscall CPrvEnumObject::SetPositionToLast(void)",
    "private: void __thiscall CRtlSharedLock::Upgrade(void)",
    "public: __thiscall CVdsUnlockIt::~CVdsUnlockIt(void)",
    "public: int __thiscall CVdsTraceSettings::m_ExtraLogging(void)",
    "public: void __thiscall CVdsAsyncObjectBase::ZeroAsyncOut(void)",
    "unsigned long __stdcall StartReferenceHistory(void)"
  ],
  "vdsutil.dll": [
    "int __stdcall IsEfiFirmware(void)",
    "long __stdcall UnInitializeGlobalResouce(void)",
    "unsigned char __stdcall IsLoggingEnabledW(void)",
    "public: virtual long __stdcall CVdsAsyncObjectBase::Cancel(void)",
    "long __stdcall VdsWmiSetStringInInstance(struct IWbemClassObject *,unsigned short *,unsigned short *)",
    "void __stdcall LogWarning(unsigned short *,unsigned long,unsigned long,void *,unsigned long,unsigned long,unsigned short *,char *)",
    "void __stdcall GarbageCollectDriveLetters(void)",
    "long __stdcall VdsIscsiIpsecIdToIpAddress(unsigned char,unsigned long,unsigned char *,struct _VDS_IPADDRESS *)",
    "_VdsDisableCOMFatalExceptionHandling@0",
    "public: void * __thiscall CVdsHandleImpl<4294967295>::operator=(void *)",
    "long __stdcall VdsWmiSetUlonglongInInstance(struct IWbemClassObject *,unsigned short *,unsigned __int64)",
    "private: static long __stdcall CVdsPnPNotificationBase::WindowProcEntry(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: long __thiscall CVdsWmiVariantObjectArrayEnum::Detach(void)",
    "unsigned long __stdcall GetVolumeUniqueId(struct _VDS_VOLUME_PROP2 *)",
    "_DllMain@12",
    "long __stdcall VdsIscsiCacheSessionDevices(struct IEnumWbemClassObject *,struct _VDSISCSI_SESSION_DEVICES_CACHE * *)",
    "long __stdcall VdsWmiCreateClassInstance(struct IWbemServices *,unsigned short *,struct IWbemClassObject * *)",
    "public: int __thiscall CRtlList::InsertHeadPointer(void *)",
    "public: int __thiscall CRtlMap::Find(class CRtlEntry &,class CRtlEntry *)",
    "public: void * __thiscall CRtlListIter::GetEntryPointer(void)",
    "unsigned char * __stdcall VdsParseDeviceID(struct _STORAGE_DEVICE_ID_DESCRIPTOR *,unsigned short *)",
    "unsigned long __stdcall GetDeviceRegistryProperty(unsigned long,unsigned long,unsigned char * *,unsigned long)",
    "long __stdcall AllocateAndGetVolumePathName(unsigned short const *,unsigned short * *)",
    "long __stdcall VdsWmiGetUlonglongFromInstance(struct IWbemClassObject *,unsigned short *,unsigned __int64 *)",
    "void __cdecl VdsTraceW(unsigned long,unsigned short *,...)",
    "unsigned long __stdcall GetRegistryValue(struct HKEY__ *,unsigned short *,unsigned short *,void * *,unsigned long &)",
    "public: int __thiscall CRtlList::InsertTailPointer(void *)",
    "long __stdcall GetFileSystemRecognitionName(void *,unsigned short * *)",
    "unsigned long __stdcall LockVolume(void *,unsigned char)",
    "int __stdcall VdsHeapFree(void *,unsigned long,void *)",
    "void __stdcall StopReferenceHistory(void)",
    "public: __thiscall CVdsTraceSettings::CVdsTraceSettings(void)",
    "long __stdcall VdsWmiSetByteInInstance(struct IWbemClassObject *,unsigned short *,unsigned char)",
    "public: void __thiscall CRtlList::Remove(class CRtlListIter &)",
    "public: class CRtlEntry * __thiscall CRtlListIter::GetEntry(void)",
    "void (__stdcall*__stdcall GetFMIFSFormatEx2Routine(void))(unsigned short *,enum _FMIFS_MEDIA_TYPE,unsigned short *,struct FMIFS_FORMATEX2_PARAM *,unsigned char (__stdcall*)(enum _FMIFS_PACKET_TYPE,unsigned long,void *))",
    "public: static unsigned long __stdcall CVdsAsyncObjectBase::Initialize(void)",
    "public: __thiscall CVdsAsyncObjectBase::CVdsAsyncObjectBase(void)",
    "public: void __thiscall CRtlMap::`default constructor closure'(void)",
    "unsigned long __stdcall VdsRegKeyGetDWord(unsigned short const *,unsigned short const *,unsigned long *)",
    "public: void __thiscall CVdsPnPNotificationBase::Unregister(struct _NotificationListeningRequest *)",
    "public: bool __thiscall CVdsHandleImpl<4294967295>::operator==(void *)const",
    "public: virtual __thiscall CRtlMap::~CRtlMap(void)",
    "public: int __thiscall CRtlMap::Insert(class CRtlEntry &,class CRtlEntry &)",
    "public: __thiscall CVdsUnlockIt::CVdsUnlockIt(long &)",
    "long __stdcall InvalidateDiskCache(unsigned short *)",
    "unsigned short * __stdcall VdsAllocateEmptyString(void)",
    "unsigned long __stdcall IsDiskReadOnly(void *,unsigned char *)",
    "void __stdcall ReInitializeRundownProtection(struct _RUNDOWN_REF *)",
    "unsigned long __stdcall GetDeviceId(void *,struct _SP_DEVINFO_DATA *,unsigned short * *)",
    "unsigned long __stdcall VdsDoesDiskHaveArcPath(unsigned long,unsigned char *)",
    "long __stdcall GetVolumeGuidPathnames(unsigned short *,unsigned long *,unsigned short * * *)",
    "public: long __thiscall CVdsWmiVariantObjectArrayEnum::Reset(void)",
    "void __stdcall VdsAssert(char const *,unsigned int,char const *)",
    "public: int __thiscall CRtlMap::Remove(class CRtlEntry &)",
    "public: class CRtlListIter __thiscall CRtlList::End(void)",
    "unsigned char __stdcall IsRamDrive(unsigned short *)",
    "unsigned long __stdcall CreateDeviceInfoSet(unsigned short *,void * *,struct _SP_DEVINFO_DATA *)",
    "private: static unsigned long __stdcall CVdsPnPNotificationBase::NotificationThreadEntry(void *)",
    "long __stdcall GetBootDiskNumber(unsigned long *,unsigned long * *)",
    "void __stdcall InitializeRundownProtection(struct _RUNDOWN_REF *)",
    "long __stdcall DeleteBcdObjects(struct _VDS_PARTITION_IDENTITY *)",
    "void __stdcall LogEvent(unsigned short *,unsigned long,unsigned short,unsigned long,void *,unsigned long,unsigned short * * const)",
    "public: int __thiscall CVdsAsyncObjectBase::IsFinished(void)",
    "int __stdcall IsDeviceFullyInstalled(unsigned short *)",
    "public: long __thiscall CVdsWmiVariantObjectArrayEnum::Next(struct IWbemClassObject * *)",
    "public: __thiscall CVdsPnPNotificationBase::~CVdsPnPNotificationBase(void)",
    "long __stdcall VdsWmiGetObjectFromInstance(struct IWbemClassObject *,unsigned short *,struct IWbemClassObject * *)",
    "public: virtual long __stdcall CPrvEnumObject::Clone(struct IEnumVdsObject * *)",
    "public: unsigned long __thiscall CVdsPnPNotificationBase::RegisterHandle(void *,void * *)",
    "long __stdcall VdsIscsiGetIpAddressFromInstance(struct IWbemClassObject *,unsigned short *,struct _VDS_IPADDRESS *)",
    "long __stdcall MirrorBcdObjects(struct _VDS_PARTITION_IDENTITY *,struct _VDS_PARTITION_IDENTITY *)",
    "long __stdcall VdsIscsiIsIscsiLun(struct IWbemClassObject *,struct _VDSISCSI_SESSION_DEVICES_CACHE *,int *)",
    "void __stdcall LogError(unsigned short *,unsigned long,unsigned long,void *,unsigned long,unsigned long,unsigned short *,char *)",
    "public: void __thiscall CVdsPnPNotificationBase::UnregisterHandle(void *)",
    "public: __thiscall CGlobalResource::~CGlobalResource(void)",
    "public: void __thiscall CVdsAsyncObjectBase::SetOutput(struct _VDS_ASYNC_OUTPUT)",
    "unsigned long __stdcall LockDismountVolume(void *,int,unsigned char)",
    "public: struct HWND__ * __thiscall CVdsPnPNotificationBase::GetWindowHandle(void)",
    "void __stdcall ReleaseRundownProtection(struct _RUNDOWN_REF *)",
    "unsigned long __stdcall MountVolume(unsigned short *)",
    "unsigned long __stdcall GetDeviceAndMediaType(unsigned short *,void *,unsigned long *,unsigned long *)",
    "public: int __thiscall CRtlList::InsertHead(class CRtlEntry &)",
    "unsigned char (__stdcall*__stdcall GetFMIFSGetDefaultFilesystemRoutine(void))(struct FMIFS_DEF_FS_PARAM *,struct FMIFS_DEF_FS_OUT *,unsigned long *)",
    "void * __stdcall VdsHeapAlloc(void *,unsigned long,unsigned long)",
    "int __stdcall IsMediaPresent(void *)",
    "void __stdcall LogInfo(unsigned short *,unsigned long,unsigned long,void *,unsigned long,unsigned short *,char *)",
    "int __stdcall VdsIscsiCheckEqualIpAddress(struct _VDS_IPADDRESS,struct _VDS_IPADDRESS)",
    "long __stdcall VdsWmiSetBoolInInstance(struct IWbemClassObject *,unsigned short *,int)",
    "public: int __thiscall CRtlList::InsertTail(class CRtlEntry &)",
    "unsigned long __stdcall GetStorageAccessAlignmentProperty(void *,struct _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR *)",
    "void __stdcall VdsTraceExWHelper(unsigned long,unsigned long,unsigned short *,char *)",
    "long __stdcall VdsWmiGetObjectInVariantObjectArray(struct IWbemClassObject *,unsigned short *,long,struct IWbemClassObject * *)",
    "long __stdcall VdsAllocateString(unsigned short *,unsigned short * *)",
    "long __stdcall VdsWmiGetByteInVariantByteArray(struct IWbemClassObject *,unsigned short *,long,unsigned char *)",
    "public: int __thiscall CRtlList::Insert(class CRtlListIter &,class CRtlEntry &)",
    "public: void __thiscall CPrvEnumObject::Clear(void)",
    "long __stdcall AssignTempVolumeName(unsigned short *,unsigned short * const)",
    "public: void __thiscall CVdsAsyncObjectBase::AllowCancel(void)",
    "unsigned long __stdcall GetDeviceLocationPath(enum _VDS_STORAGE_BUS_TYPE,unsigned long,struct _SCSI_ADDRESS,unsigned short * *)",
    "void __stdcall RemoveTempVolumeName(unsigned short *,unsigned short *)",
    "private: unsigned long __thiscall CVdsPnPNotificationBase::NotificationThread(void *)",
    "int __stdcall IsNoAutoMount(void)",
    "long __stdcall VdsWmiSetObjectInInstance(struct IWbemClassObject *,unsigned short *,struct IWbemClassObject *)",
    "unsigned long __stdcall GetMediaGeometry(void *,struct _VDS_DISK_PROP *)",
    "long __stdcall VdsWmiConnectToNamespace(unsigned short *,struct IWbemLocator * *,struct IWbemServices * *)",
    "private: void __thiscall CRtlSharedLock::Downgrade(void)",
    "public: void __thiscall CRtlList::RemoveAll(void)",
    "public: void __thiscall CVdsAsyncObjectBase::Signal(void)",
    "long __stdcall GetVolumePath(struct _MOUNTMGR_MOUNT_POINT *,struct _MOUNTMGR_MOUNT_POINTS *,unsigned short * *)",
    "public: void __thiscall CPrvEnumObject::SetPositionToLast(void)",
    "unsigned char (__stdcall*__stdcall GetFMIFSQueryDeviceInfo(void))(unsigned short *,struct _FMIFS_DEVICE_INFORMATION *,unsigned long)",
    "private: unsigned long __thiscall CVdsPnPNotificationBase::CreateListenThread(void)",
    "private: void __thiscall CRtlSharedLock::Upgrade(void)",
    "unsigned long __stdcall GetIsRemovable(void *,int *)",
    "unsigned long __stdcall GetMediaGeometry(void *,unsigned long,struct _DISK_GEOMETRY_EX * *)",
    "public: int __thiscall CVdsTraceSettings::m_ExtraLogging(void)",
    "long __stdcall GetSystemVolumeHandle(void * *)",
    "unsigned long __stdcall InitializeSecurityDescriptor(unsigned long,void *,struct _ACL * *,void * *,void * *,void * *)",
    "public: class CRtlMapIter __thiscall CRtlMap::Begin(void)",
    "unsigned char __stdcall AcquireRundownProtection(struct _RUNDOWN_REF *)",
    "unsigned long __stdcall GetInterfaceDetailData(void *,struct _SP_DEVICE_INTERFACE_DATA *,struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W * *)",
    "unsigned long __stdcall StartReferenceHistory(void)",
    "long __stdcall GetBootFromDiskNumber(unsigned long *)",
    "public: __thiscall CVdsHandleImpl<4294967295>::operator void *(void)",
    "long __stdcall QueryObjects(struct IUnknown *,struct IEnumVdsObject * *,struct _RTL_CRITICAL_SECTION &)",
    "long __stdcall VdsIscsiSetIpAddressInInstance(struct IWbemServices *,struct IWbemClassObject *,unsigned short *,struct _VDS_IPADDRESS *)",
    "int __stdcall IsDriveLetter(unsigned short *)",
    "public: __thiscall CVdsCallTracer::CVdsCallTracer(unsigned long,char const *)",
    "long __stdcall VdsWmiCallMethod(struct IWbemServices *,struct IWbemClassObject *,unsigned short *,struct IWbemClassObject *,struct IWbemClassObject * *)",
    "unsigned long __stdcall GetDeviceLocation(void *,struct _VDS_DISK_PROP *)",
    "long __stdcall UnregisterProvider(struct _GUID)",
    "unsigned long __stdcall SetDiskLayout(void *,struct _DRIVE_LAYOUT_INFORMATION_EX *)",
    "public: int __thiscall CRtlMap::InsertUnique(class CRtlEntry &,class CRtlEntry &)",
    "public: void __thiscall CRtlList::`default constructor closure'(void)",
    "void __stdcall VdsTraceExHelper(unsigned long,unsigned long,char *,char *)",
    "unsigned long __stdcall AddEventSource(unsigned short *,struct HINSTANCE__ *)",
    "long __stdcall VdsWmiCopyToVariantByteArray(struct IWbemClassObject *,unsigned short *,long,unsigned char *)",
    "public: __thiscall CVdsAsyncObjectBase::~CVdsAsyncObjectBase(void)",
    "public: void __thiscall CVdsPnPNotificationBase::Uninitialize(void)",
    "unsigned long __stdcall RemoveEventSource(unsigned short *)",
    "long __stdcall VdsWmiCopyFromVariantByteArray(struct IWbemClassObject *,unsigned short *,long,unsigned char *)",
    "public: int __thiscall CRtlMap::FindPtr(class CRtlEntry &,class CRtlEntry * *)",
    "long __stdcall GetDefaultAlignment(unsigned long *,unsigned __int64,enum _VDS_PARTITION_STYLE,unsigned long,unsigned long,unsigned char *)",
    "public: virtual long __stdcall CVdsAsyncObjectBase::QueryStatus(long *,unsigned long *)",
    "public: __thiscall CVdsCriticalSection::CVdsCriticalSection(struct _RTL_CRITICAL_SECTION *)",
    "public: __thiscall CVdsPnPNotificationBase::CVdsPnPNotificationBase(void)",
    "unsigned long __stdcall WriteBootCode(void *)",
    "public: int __thiscall CVdsTraceSettings::m_NoDebuggerLogging(void)",
    "void __stdcall WaitForRundownProtectionRelease(struct _RUNDOWN_REF *)",
    "public: void __thiscall CVdsAsyncObjectBase::SetOutputType(enum _VDS_ASYNC_OUTPUT_TYPE)",
    "long __stdcall QueryObjects(struct IUnknown *,struct IEnumVdsObject * *)",
    "public: static void __stdcall CVdsAsyncObjectBase::Uninitialize(void)",
    "int __stdcall DeleteNetworkShare(unsigned short *)",
    "public: virtual long __stdcall CPrvEnumObject::Reset(void)",
    "unsigned long __stdcall VdsInitializeCriticalSection(struct _RTL_CRITICAL_SECTION *)",
    "long __stdcall GuidToString(struct _GUID *,unsigned short *,unsigned long)",
    "public: __thiscall CVdsHandleImpl<4294967295>::~CVdsHandleImpl<4294967295>(void)",
    "public: __thiscall CVdsWmiVariantObjectArrayEnum::CVdsWmiVariantObjectArrayEnum(void)",
    "long __stdcall VdsIscsiIpAddressToString(struct _VDS_IPADDRESS *,unsigned long,unsigned short *)",
    "int __stdcall IsServer(void)",
    "unsigned long __stdcall GetDiskOfflineReason(void *,enum _VDS_DISK_OFFLINE_REASON *)",
    "long __stdcall VdsWmiGetByteFromInstance(struct IWbemClassObject *,unsigned short *,unsigned char *)",
    "public: class CRtlListIter __thiscall CRtlList::Begin(void)",
    "unsigned char (__stdcall*__stdcall GetFMIFSQueryDeviceInfoByHandle(void))(void *,struct _FMIFS_DEVICE_INFORMATION *,unsigned long)",
    "unsigned long __stdcall OpenDevice(unsigned short *,unsigned long,void * *)",
    "public: void __thiscall CRtlMap::RemoveAll(int)",
    "unsigned long __stdcall GetMediaGeometryEx(void *,struct _VDS_DISK_PROP2 *)",
    "void __cdecl VdsTraceEx(unsigned long,unsigned long,char *,...)",
    "public: __thiscall CVdsCallTracer::~CVdsCallTracer(void)",
    "public: class CRtlMapIter & __thiscall CRtlMapIter::Next(void)",
    "long __stdcall VdsWmiGetMethodArgumentObject(struct IWbemServices *,unsigned short *,unsigned short *,struct IWbemClassObject * *)",
    "public: virtual long __stdcall CPrvEnumObject::Skip(unsigned long)",
    "public: __thiscall CRtlMap::CRtlMap(unsigned long,void (__stdcall*)(class CRtlEntry *),void (__stdcall*)(class CRtlEntry *))",
    "private: void __thiscall CRtlSharedLock::AcquireRead(void)",
    "public: __thiscall CPrvEnumObject::CPrvEnumObject(void)",
    "public: int __thiscall CRtlSharedLock::CurrentThreadIsWriter(void)",
    "public: __thiscall CVdsWmiVariantObjectArrayEnum::~CVdsWmiVariantObjectArrayEnum(void)",
    "unsigned char (__stdcall*__stdcall GetFMIFSEnableCompressionRoutine(void))(unsigned short *,unsigned short)",
    "unsigned long __stdcall GetDiskLayout(void *,struct _DRIVE_LAYOUT_INFORMATION_EX * *)",
    "long __stdcall GetVolumeName(unsigned short *,unsigned long,unsigned short *)",
    "long __stdcall GetDiskIdentifiers(unsigned short const *,unsigned short const *,unsigned short * *,unsigned short *)",
    "unsigned long __stdcall IsDiskClustered(void *,unsigned char *,unsigned char *,unsigned char *,unsigned char *)",
    "public: __thiscall CRtlSharedLock::CRtlSharedLock(void)",
    "long __stdcall VdsWmiGetUlongFromInstance(struct IWbemClassObject *,unsigned short *,unsigned long *)",
    "private: void __thiscall CRtlSharedLock::AcquireWrite(void)",
    "public: int __thiscall CVdsAsyncObjectBase::IsCancelRequested(void)",
    "long __stdcall VdsWmiFindInstanceOfClass(struct IWbemServices *,unsigned short *,unsigned short *,struct IWbemClassObject * *)",
    "public: __thiscall CRtlSharedLock::~CRtlSharedLock(void)",
    "public: int __thiscall CRtlList::InsertPointer(class CRtlListIter &,void *)",
    "public: __thiscall CVdsHandleImpl<4294967295>::CVdsHandleImpl<4294967295>(void)",
    "public: long __thiscall CVdsAsyncObjectBase::WaitImpl(long *)",
    "unsigned long __stdcall GetDeviceNumber(void *,struct _STORAGE_DEVICE_NUMBER *)",
    "long __stdcall IsLocalComputer(unsigned short *)",
    "public: unsigned long __thiscall CVdsPnPNotificationBase::Initialize(void)",
    "public: void __thiscall CVdsAsyncObjectBase::DisallowCancel(void)",
    "unsigned long __stdcall GetDeviceLocationEx(void *,unsigned long,struct _VDS_DISK_PROP2 *)",
    "public: __thiscall CRtlList::~CRtlList(void)",
    "unsigned long __stdcall GetDeviceName(void *,int,unsigned long,unsigned short *)",
    "unsigned long __stdcall GetVolumeDiskExtentInfo(void *,struct _VOLUME_DISK_EXTENTS * *)",
    "unsigned long __stdcall GetVolumeSize(unsigned short *,unsigned __int64 *)",
    "void __stdcall RundownCompleted(struct _RUNDOWN_REF *)",
    "unsigned long __stdcall GetDeviceManufacturerInfo(void *,unsigned short * *,unsigned short * *,unsigned short * *,unsigned short * *)",
    "void __cdecl VdsTrace(unsigned long,char *,...)",
    "long __stdcall VdsIscsiIpAddressToIpsecId(struct _VDS_IPADDRESS *,unsigned char *,unsigned long *,unsigned char * *)",
    "private: void __thiscall CRtlSharedLock::Release(void)",
    "long __stdcall RegisterProvider(struct _GUID,struct _GUID,unsigned short *,enum _VDS_PROVIDER_TYPE,unsigned short *,unsigned short *,struct _GUID)",
    "public: class CRtlListIter & __thiscall CRtlListIter::Next(void)",
    "public: __thiscall CRtlList::CRtlList(void (__stdcall*)(class CRtlEntry *))",
    "public: int __thiscall CRtlListIter::IsDone(void)",
    "unsigned char * __stdcall VdsBinaryToAscii(unsigned char *,unsigned long,unsigned long *)",
    "public: class CRtlList & __thiscall CRtlList::operator=(class CRtlList &)",
    "public: class CRtlListEntry * __thiscall CRtlListIter::GetNode(void)",
    "long __stdcall VdsWmiGetBoolFromInstance(struct IWbemClassObject *,unsigned short *,int *)",
    "unsigned long __stdcall IsDiskCurrentStateReadOnly(void *,unsigned char *)",
    "public: __thiscall CGlobalResource::CGlobalResource(void)",
    "public: __thiscall CPrvEnumObject::~CPrvEnumObject(void)",
    "void __cdecl VdsTraceExW(unsigned long,unsigned long,unsigned short *,...)",
    "void __stdcall CoFreeStringArray(unsigned short * *,long)",
    "public: void __thiscall CVdsAsyncObjectBase::SetCompletionStatus(long,unsigned long)",
    "public: enum _VDS_ASYNC_OUTPUT_TYPE __thiscall CVdsAsyncObjectBase::GetOutputType(void)",
    "public: long __thiscall CGlobalResource::Initialize(void)",
    "int __stdcall IsWinPE(void)",
    "long __stdcall IoctlMountmgrQueryPointsDevicePath(unsigned short *,struct _MOUNTMGR_MOUNT_POINTS * *)",
    "public: virtual long __stdcall CPrvEnumObject::Next(unsigned long,struct IUnknown * *,unsigned long *)",
    "unsigned long __stdcall GetDiskFlags(void *,unsigned char *,unsigned char *,unsigned char *)",
    "public: __thiscall CVdsCriticalSection::~CVdsCriticalSection(void)",
    "long __stdcall GetBootVolumeHandle(void * *)",
    "long __stdcall VdsWmiSetUlongInInstance(struct IWbemClassObject *,unsigned short *,unsigned long)",
    "long __stdcall VdsWmiCreateVariantArray(unsigned short,long,struct tagVARIANT *)",
    "public: class CRtlListIter & __thiscall CRtlListIter::Prev(void)",
    "public: unsigned long __thiscall CVdsPnPNotificationBase::Register(struct _NotificationListeningRequest *,unsigned long)",
    "public: __thiscall CVdsUnlockIt::~CVdsUnlockIt(void)",
    "public: long __thiscall CVdsWmiVariantObjectArrayEnum::Attach(struct tagVARIANT *)",
    "public: void __thiscall CVdsAsyncObjectBase::ZeroAsyncOut(void)",
    "public: long __thiscall CPrvEnumObject::Append(struct IUnknown *)",
    "unsigned long __stdcall GetPartitionInformation(void *,struct _PARTITION_INFORMATION_EX *)",
    "unsigned long __stdcall GetDeviceRegistryProperty(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned char * *,unsigned long)"
  ],
  "vdsvd.dll": [
    "public: __thiscall CPrvEnumObject::CPrvEnumObject(void)",
    "private: void __thiscall CRtlSharedLock::AcquireRead(void)",
    "public: int __thiscall CRtlSharedLock::CurrentThreadIsWriter(void)",
    "public: __thiscall CRtlSharedLock::CRtlSharedLock(void)",
    "public: __thiscall CVdsPnPNotificationBase::~CVdsPnPNotificationBase(void)",
    "private: void __thiscall CRtlSharedLock::AcquireWrite(void)",
    "public: int __thiscall CVdsAsyncObjectBase::IsCancelRequested(void)",
    "public: __thiscall CRtlSharedLock::~CRtlSharedLock(void)",
    "DllRegisterServer",
    "public: void __thiscall CRtlList::`default constructor closure'(void)",
    "DllUnregisterServer",
    "public: void __thiscall CVdsAsyncObjectBase::DisallowCancel(void)",
    "public: void __thiscall CVdsAsyncObjectBase::SetOutput(struct _VDS_ASYNC_OUTPUT)",
    "void __stdcall StopReferenceHistory(void)",
    "private: void __thiscall CRtlSharedLock::Release(void)",
    "DllCanUnloadNow",
    "public: __thiscall CVdsCriticalSection::CVdsCriticalSection(struct _RTL_CRITICAL_SECTION *)",
    "public: __thiscall CVdsPnPNotificationBase::CVdsPnPNotificationBase(void)",
    "public: int __thiscall CVdsTraceSettings::m_NoDebuggerLogging(void)",
    "public: __thiscall CPrvEnumObject::~CPrvEnumObject(void)",
    "public: void __thiscall CRtlMap::`default constructor closure'(void)",
    "public: void __thiscall CVdsAsyncObjectBase::SetOutputType(enum _VDS_ASYNC_OUTPUT_TYPE)",
    "public: enum _VDS_ASYNC_OUTPUT_TYPE __thiscall CVdsAsyncObjectBase::GetOutputType(void)",
    "public: void __thiscall CVdsAsyncObjectBase::AllowCancel(void)",
    "DllGetClassObject",
    "public: __thiscall CVdsUnlockIt::CVdsUnlockIt(long &)",
    "public: __thiscall CVdsCriticalSection::~CVdsCriticalSection(void)",
    "private: void __thiscall CRtlSharedLock::Downgrade(void)",
    "public: void __thiscall CPrvEnumObject::SetPositionToLast(void)",
    "private: void __thiscall CRtlSharedLock::Upgrade(void)",
    "public: __thiscall CVdsUnlockIt::~CVdsUnlockIt(void)",
    "public: int __thiscall CVdsTraceSettings::m_ExtraLogging(void)",
    "public: void __thiscall CVdsAsyncObjectBase::ZeroAsyncOut(void)",
    "unsigned long __stdcall StartReferenceHistory(void)"
  ],
  "verifier.dll": [
    "VerifierDeleteFreeMemoryCallback",
    "VerifierEnableFaultInjectionTargetRange",
    "VerifierEnumerateResource",
    "VerifierIsDllEntryActive",
    "VerifierCreateRpcPageHeap",
    "AVrfAPILookupCallback",
    "VerifierSetRuntimeFlags",
    "VerifierAddFreeMemoryCallback",
    "VerifierDisableFaultInjectionExclusionRange",
    "VerifierIsCurrentThreadHoldingLocks",
    "VerifierDisableFaultInjectionTargetRange",
    "VerifierSetFaultInjectionProbability",
    "VerifierGetPropertyValueByName",
    "VerifierForceNormalHeap",
    "VerifierDestroyRpcPageHeap",
    "VerifierSetFlags",
    "VerifierGetInfoForException",
    "VerifierStopMessage",
    "VerifierEnableFaultInjectionExclusionRange",
    "VerifierIsPerUserSettingsEnabled",
    "VerifierGetProviderHelper",
    "VerifierQueryRuntimeFlags",
    "VerifierIsAddressInAnyPageHeap",
    "VerifierGetMemoryForDump",
    "VerifierCheckPageHeapAllocation"
  ],
  "version.dll": [
    "GetFileVersionInfoSizeExA",
    "VerLanguageNameA",
    "GetFileVersionInfoSizeW",
    "GetFileVersionInfoByHandle",
    "GetFileVersionInfoSizeA",
    "VerQueryValueA",
    "GetFileVersionInfoExW",
    "GetFileVersionInfoSizeExW",
    "VerFindFileW",
    "VerQueryValueW",
    "VerInstallFileW",
    "VerInstallFileA",
    "VerFindFileA",
    "GetFileVersionInfoW",
    "GetFileVersionInfoExA",
    "VerLanguageNameW",
    "GetFileVersionInfoA"
  ],
  "vfwwdm32.dll": [
    "VfwWdm",
    "DllMain",
    "DriverProc"
  ],
  "virtdisk.dll": [
    "MirrorVirtualDisk",
    "GetVirtualDiskMetadata",
    "CompactVirtualDisk",
    "MergeVirtualDisk",
    "SetVirtualDiskMetadata",
    "GetVirtualDiskPhysicalPath",
    "CreateVirtualDisk",
    "DeleteVirtualDiskMetadata",
    "OpenVirtualDisk",
    "GetVirtualDiskOperationProgress",
    "EnumerateVirtualDiskMetadata",
    "GetStorageDependencyInformation",
    "GetVirtualDiskInformation",
    "DetachVirtualDisk",
    "AddVirtualDiskParent",
    "ResizeVirtualDisk",
    "ExpandVirtualDisk",
    "SetVirtualDiskInformation",
    "BreakMirrorVirtualDisk",
    "AttachVirtualDisk"
  ],
  "vmbuspipe.dll": [
    "VmbusPipeClientEnumeratePipes",
    "VmbusPipeClientOpenChannel",
    "VmbusPipeClientWaitChannel",
    "VmbusPipeServerOfferChannel",
    "VmbusPipeServerConnectPipe"
  ],
  "vmbusres.dll": "No exports",
  "vmicres.dll": "No exports",
  "vmictimeprovider.dll": [
    "TimeProvOpen",
    "TimeProvCommand",
    "TimeProvClose"
  ],
  "vmrdvcore.dll": [
    "VmRdvCore_TerminateInstance",
    "VmRdvCore_CreateInstance",
    "VmRdvCore_GetInstance"
  ],
  "vmstorfltres.dll": "No exports",
  "vpnike.dll": [
    "InitializeServerProtocolEngine",
    "UninitializeProtocolEngine",
    "InitializeProtocolEngine",
    "UninitializeServerProtocolEngine",
    "SendMessageToProtocolEngine"
  ],
  "vpnikeapi.dll": [
    "GetTrafficSelectorsRequest",
    "CancelProcessEapAuthPacket",
    "GetServerEapAuthRequestPacket",
    "ProcessConfigurationPayloadReply",
    "FreeEapAuthPacket",
    "UpdateTunnel",
    "ProcessEapAuthPacket",
    "ProcessTrafficSelectorsRequest",
    "CreateTunnel",
    "CloseTunnel",
    "FreeTrafficSelectors",
    "NewRasIncomingCall",
    "FreeEapAuthAttributes",
    "GetNewTunnelID",
    "ProcessConfigurationPayloadRequest",
    "ProcessTrafficSelectorsReply",
    "FreeConfigurationPayloadBuffer",
    "RemoveTrafficSelectors",
    "GetConfigurationPayloadRequest",
    "FreeIDPayloadBuffer",
    "GetIDPayload",
    "ProcessAdditionalAddressNotification",
    "QueryEapAuthAttributes"
  ],
  "vss_ps.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "vssapi.dll": [
    "public: long __stdcall CVssWriter::Initialize(struct _GUID,unsigned short const *,enum VSS_USAGE_TYPE,enum VSS_SOURCE_TYPE,enum _VSS_APPLICATION_LEVEL,unsigned long,enum VSS_ALTERNATE_WRITER_STATE,bool,unsigned short const *)",
    "CreateWriterEx",
    "public: virtual bool __stdcall CVssJetWriter::OnPrepareBackupEnd(class IVssWriterComponents *,bool)",
    "public: virtual bool __stdcall CVssWriter::OnVSSShutdown(void)",
    "protected: long __stdcall CVssJetWriter::GetContext(void)const",
    "public: virtual bool __stdcall CVssWriter::OnPostRestore(class IVssWriterComponents *)",
    "public: virtual bool __stdcall CVssJetWriter::OnBackupCompleteEnd(class IVssWriterComponents *,bool)",
    "protected: enum _VSS_APPLICATION_LEVEL __stdcall CVssJetWriter::GetCurrentLevel(void)const",
    "public: virtual void __stdcall CVssJetWriter::OnAbortEnd(void)",
    "protected: bool __stdcall CVssJetWriter::IsPartialFileSupportEnabled(void)const",
    "protected: struct _GUID __stdcall CVssJetWriter::GetCurrentSnapshotSetId(void)const",
    "DllGetClassObject",
    "public: virtual __thiscall CVssWriter::~CVssWriter(void)",
    "protected: unsigned short const * * __stdcall CVssWriter::GetCurrentVolumeArray(void)const",
    "public: __thiscall CVssJetWriter::CVssJetWriter(void)",
    "protected: bool __stdcall CVssWriter::IsPartialFileSupportEnabled(void)const",
    "VssFreeSnapshotProperties",
    "public: virtual void __stdcall CVssJetWriter::OnAbortBegin(void)",
    "protected: enum _VSS_RESTORE_TYPE __stdcall CVssWriter::GetRestoreType(void)const",
    "protected: long __stdcall CVssWriter::SetWriterFailure(long)",
    "protected: bool __stdcall CVssWriter::AreComponentsSelected(void)const",
    "protected: enum _VSS_RESTORE_TYPE __stdcall CVssJetWriter::GetRestoreType(void)const",
    "CreateVssBackupComponentsInternal",
    "public: virtual bool __stdcall CVssWriter::OnBackupComplete(class IVssWriterComponents *)",
    "protected: unsigned int __stdcall CVssWriter::GetCurrentVolumeCount(void)const",
    "public: virtual bool __stdcall CVssWriter::OnBackupShutdown(struct _GUID)",
    "public: virtual bool __stdcall CVssJetWriter::OnThawBegin(void)",
    "public: virtual bool __stdcall CVssJetWriter::OnIdentify(class IVssCreateWriterMetadata *)",
    "IsVolumeSnapshotted",
    "VssFreeSnapshotPropertiesInternal",
    "protected: bool __stdcall CVssJetWriter::AreComponentsSelected(void)const",
    "public: virtual bool __stdcall CVssJetWriter::OnBackupCompleteBegin(class IVssWriterComponents *)",
    "protected: long __stdcall CVssJetWriter::SetWriterFailure(long)",
    "CreateWriter",
    "GetProviderMgmtInterfaceInternal",
    "public: virtual bool __stdcall CVssJetWriter::OnPrepareBackupBegin(class IVssWriterComponents *)",
    "protected: unsigned int __stdcall CVssJetWriter::GetCurrentVolumeCount(void)const",
    "public: virtual bool __stdcall CVssJetWriter::OnPostSnapshot(class IVssWriterComponents *)",
    "GetProviderMgmtInterface",
    "long __stdcall CreateVssBackupComponents(class IVssBackupComponents * *)",
    "public: virtual bool __stdcall CVssWriter::OnVSSApplicationStartup(void)",
    "protected: long __stdcall CVssWriter::GetContext(void)const",
    "protected: enum _VSS_APPLICATION_LEVEL __stdcall CVssWriter::GetCurrentLevel(void)const",
    "long __stdcall LoadVssSnapshotSetDescription(unsigned short const *,class IVssSnapshotSetDescription * *,struct _GUID)",
    "protected: enum _VSS_BACKUP_TYPE __stdcall CVssJetWriter::GetBackupType(void)const",
    "protected: bool __stdcall CVssWriter::IsBootableSystemStateBackedUp(void)const",
    "protected: enum _VSS_BACKUP_TYPE __stdcall CVssWriter::GetBackupType(void)const",
    "long __stdcall CreateVssExamineWriterMetadata(unsigned short *,class IVssExamineWriterMetadata * *)",
    "public: virtual bool __stdcall CVssJetWriter::OnPostRestoreBegin(class IVssWriterComponents *)",
    "public: virtual bool __stdcall CVssJetWriter::OnPrepareSnapshotEnd(bool)",
    "public: virtual bool __stdcall CVssJetWriter::OnThawEnd(bool)",
    "public: __thiscall CVssWriter::CVssWriter(void)",
    "public: virtual bool __stdcall CVssWriter::OnPrepareBackup(class IVssWriterComponents *)",
    "protected: long __stdcall CVssWriter::GetSnapshotDeviceName(unsigned short const *,unsigned short const * *)const",
    "protected: struct _GUID __stdcall CVssWriter::GetCurrentSnapshotSetId(void)const",
    "public: virtual bool __stdcall CVssWriter::OnBackOffIOOnVolume(unsigned short *,struct _GUID,struct _GUID)",
    "public: virtual bool __stdcall CVssJetWriter::OnPreRestoreBegin(class IVssWriterComponents *)",
    "public: long __stdcall CVssWriter::Subscribe(unsigned long)",
    "protected: long __stdcall CVssJetWriter::GetSnapshotDeviceName(unsigned short const *,unsigned short const * *)const",
    "protected: bool __stdcall CVssJetWriter::IsPathAffected(unsigned short const *)const",
    "protected: bool __stdcall CVssWriter::IsPathAffected(unsigned short const *)const",
    "public: virtual bool __stdcall CVssWriter::OnPostSnapshot(class IVssWriterComponents *)",
    "public: virtual bool __stdcall CVssJetWriter::OnPreRestoreEnd(class IVssWriterComponents *,bool)",
    "public: virtual bool __stdcall CVssJetWriter::OnPrepareSnapshotBegin(void)",
    "public: long __stdcall CVssJetWriter::Initialize(struct _GUID,unsigned short const *,bool,bool,unsigned short const *,unsigned short const *,unsigned long)",
    "public: virtual bool __stdcall CVssWriter::OnIdentify(class IVssCreateWriterMetadata *)",
    "public: virtual bool __stdcall CVssWriter::OnPreRestore(class IVssWriterComponents *)",
    "public: long __stdcall CVssWriter::Unsubscribe(void)",
    "DllCanUnloadNow",
    "CreateVssExpressWriterInternal",
    "IsVolumeSnapshottedInternal",
    "public: virtual bool __stdcall CVssWriter::OnContinueIOOnVolume(unsigned short *,struct _GUID,struct _GUID)",
    "public: virtual __thiscall CVssJetWriter::~CVssJetWriter(void)",
    "ShouldBlockRevertInternal",
    "protected: bool __stdcall CVssJetWriter::IsBootableSystemStateBackedUp(void)const",
    "protected: unsigned short const * * __stdcall CVssJetWriter::GetCurrentVolumeArray(void)const",
    "public: void __stdcall CVssJetWriter::Uninitialize(void)",
    "CreateVssExamineWriterMetadataInternal",
    "public: virtual bool __stdcall CVssJetWriter::OnFreezeEnd(bool)",
    "long __stdcall CreateVssSnapshotSetDescription(struct _GUID,long,class IVssSnapshotSetDescription * *)",
    "public: long __stdcall CVssWriter::InstallAlternateWriter(struct _GUID,struct _GUID)",
    "public: virtual bool __stdcall CVssJetWriter::OnFreezeBegin(void)",
    "public: virtual bool __stdcall CVssJetWriter::OnPostRestoreEnd(class IVssWriterComponents *,bool)",
    "ShouldBlockRevert"
  ],
  "vsstrace.dll": [
    "VssIsTracingEnabled",
    "VssSetDebugReport",
    "VssTraceBinary",
    "VssGetTracingModuleInfo",
    "VssTraceInitialize",
    "VssIsTracingEnabledOnFunction",
    "VssIsKernelDebuggerAttached",
    "VssIsTracingEnabledOnModule",
    "VssIsTracingEnabledPerThread",
    "VssTraceUninitialize",
    "VssTraceMessage",
    "VssSetTracingContextPerThread",
    "VssGetTracingSequenceNumber",
    "AssertFail",
    "VssGetTracingContextPerThread"
  ],
  "WABSyncProvider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "WFSR.dll": "No exports",
  "WINSRPC.DLL": [
    "WinsBackup",
    "WinsResetCounters",
    "WinsDoStaticInit",
    "WinsDoScavengingNew",
    "WinsRestore",
    "WinsTrigger",
    "WinsSetPriorityClass",
    "WinsUnbind",
    "WinsSetFlags",
    "WinsSyncUp",
    "WinsUBind",
    "WinsWorkerThdUpd",
    "WinsStatusWHdl",
    "WinsDelDbRecs",
    "WinsDeleteWins",
    "WinsCheckAccess",
    "WinsStatus",
    "WinsAllocMem",
    "WinsTombstoneDbRecs",
    "WinsStatusNew",
    "WinsABind",
    "WinsFreeMem",
    "WinsPullRange",
    "WinsGetNameAndAdd",
    "WinsRecordAction",
    "WinsGetDbRecsByName",
    "WinsGetBrowserNames",
    "WinsRestoreEx",
    "WinsGetDbRecs",
    "WinsDoScavenging",
    "WinsTerm"
  ],
  "WLanConn.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "WLanHC.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "WMADMOD.DLL": [
    "CreateInstance",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WMADMOE.DLL": [
    "CreateInstance",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WMALFXGFXDSP.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "WMASF.DLL": [
    "ASFReadHeaderFromFileHandle",
    "ASFCreateIndexMaker",
    "ASFReadHeaderFromFile",
    "ASFPresTimeToTime",
    "ASFGUIDFromCodecID",
    "ASFCreateMediaObjectIndexMaker",
    "CreateAsfCellPoolAllocator",
    "ASFGetHeaderObject",
    "ASFGetStreamPropertiesObject",
    "ASFFindStreamPropertiesObject",
    "ASFSendTimeToPresTime",
    "ASFPresDeltaTimeToTime",
    "ASFFindRootObject",
    "ASFTimeToPresTime",
    "ASFTimeToSendTime",
    "ASFPresTimeToSendTime",
    "ASFAddPresDelta",
    "ASFCreateLibrary",
    "ASFCreateIndexMakerFileSink",
    "ASFCreateStreamSelector",
    "ASFSendTimeToTime",
    "ASFFindHeaderObject",
    "ASFCreateIOMonitor",
    "ASFGUIDToCodecID",
    "ASFTimeToPresDeltaTime",
    "ASFWriteHeaderToFile",
    "ASFGetDataUnitInfo",
    "ASFCreateBitrateTracker",
    "ASFPresFullToDelta",
    "ASFGetRootObject",
    "ASFSetDataUnitInfo",
    "ASFCalculatePresDelta",
    "ASFAddSendDelta",
    "ASFGetTimeBase",
    "ASFPresDeltaToFull"
  ],
  "WMNetMgr.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "WMPhoto.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "WMSPDMOD.DLL": [
    "CreateInstance",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WMSPDMOE.DLL": [
    "CreateInstance",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WMVCORE.DLL": [
    "WMCreateBackupRestorerPrivate",
    "WMCreateReader",
    "WMCreateReaderPriv",
    "DllRegisterServer",
    "WMCheckURLExtension",
    "WMCreateWriterFileSink",
    "WMCreateWriterPushSink",
    "WMValidateData",
    "WMCreateWriter",
    "WMCreateWriterNetworkSink",
    "WMIsAvailableOffline",
    "WMCreateProfileManager",
    "WMCreateLicenseRevocationAgentPrivate",
    "WMCreateIndexer",
    "WMCreateSyncReaderPriv",
    "WMCreateWriterPriv",
    "WMIsContentProtected",
    "WMCheckURLScheme",
    "WMCreateEditor",
    "WMCreateSyncReader",
    "WMCreateBackupRestorer"
  ],
  "WMVDECOD.DLL": [
    "CreateInstance",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WMVENCOD.DLL": [
    "CreateInstance",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WMVSDECD.DLL": [
    "CreateInstance",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WMVSENCD.DLL": [
    "CreateInstance",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WMVXENCD.DLL": [
    "CreateInstance",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WPDShServiceObj.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "WPDSp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "WSClient.dll": [
    "WSLicenseUninstallLicense",
    "WSLicenseGetOAuthServiceTicket",
    "WSLicenseClose",
    "WSNotifyOOBECompletion",
    "GetApplicationURL",
    "AcquireDeveloperLicense",
    "CheckDeveloperLicense",
    "WSLicenseGetFeatureLicenseResults",
    "WSLicenseRefreshLicense",
    "g_bPrintFromClientDLL",
    "DllCanUnloadNow",
    "WSLicenseRetrieveMachineID",
    "WSLicenseSpecializeState",
    "WSNotifyPackageInstalled",
    "WSpTLRW",
    "WSTriggerOOBEFileValidation",
    "RemoveDeveloperLicense",
    "WSLicenseGetDevInstalledApps",
    "WSLicenseOpen",
    "WSEvaluatePackage",
    "WSLicenseFilterValidAppCategoryIds",
    "WSLicenseGetLicensesForProducts",
    "WSLicenseCleanUpState",
    "DllGetClassObject",
    "WSLicenseGetAllValidAppCategoryIds",
    "WSLicenseGetProductLicenseResults",
    "WSGetEvaluatePackageAttempted",
    "RefreshBannedAppsList",
    "WSLicenseRevokeLicenses",
    "WSLicenseInstallLicense",
    "WSCallServer"
  ],
  "WSDApi.dll": [
    "WSDCreateHttpTransport",
    "WSDCompareEndpoints",
    "WSDCopyNameList",
    "WSDXMLCleanupElement",
    "WSDXMLAddChild",
    "WSDCreateOutboundAttachment",
    "WSDXMLBuildAnyForSingleElement",
    "WSDGenerateRandomDelay",
    "WSDXMLAddSibling",
    "WSDCreateUdpAddress",
    "WSDGetConfigurationOption",
    "WSDGenerateFaultEx",
    "WSDCreateDeviceHost",
    "WSDCreateDeviceProxy",
    "WSDCreateUdpMessageParameters",
    "WSDCreateDiscoveryProvider",
    "WSDXMLCompareNames",
    "WSDCreateHttpAddress",
    "WSDDetachLinkedMemory",
    "WSDCreateDeviceProxy2",
    "WSDAttachLinkedMemory",
    "WSDUriDecode",
    "WSDCreateMetadataAgent",
    "WSDAllocateLinkedMemory",
    "WSDCancelNetworkChangeNotify",
    "WSDGenerateFault",
    "WSDCopyEndpoint",
    "WSDSetConfigurationOption",
    "WSDCreateDeviceHostAdvanced",
    "WSDAddFirewallCheck",
    "WSDCreateHttpMessageParameters",
    "WSDNotifyNetworkChange",
    "WSDCreateDiscoveryPublisher2",
    "WSDFreeLinkedMemory",
    "WSDCreateDiscoveryPublisher",
    "WSDCreateUdpTransport",
    "WSDCreateDiscoveryProvider2",
    "WSDUriEncode",
    "WSDCreateDeviceProxyAdvanced",
    "WSDProcessFault",
    "WSDCreateDeviceHost2",
    "WSDXMLGetValueFromAny",
    "WSDXMLGetNameFromBuiltinNamespace",
    "WSDRemoveFirewallCheck",
    "WSDXMLCreateContext"
  ],
  "WSDMon.dll": [
    "InitializePrintMonitor2"
  ],
  "WSDPrintProxy.DLL": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "WSDScanProxy.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "WSHTCPIP.DLL": [
    "WSHIoctl",
    "WSHStringToAddress",
    "WSHAddressToString",
    "WSHOpenSocket2",
    "WSHGetWinsockMapping",
    "WSHGetProviderGuid",
    "WSHEnumProtocols",
    "WSHJoinLeaf",
    "WSHNotify",
    "WSHGetWildcardSockaddr",
    "WSHOpenSocket",
    "WSHSetSocketInformation",
    "WSHGetSockaddrType",
    "WSHGetBroadcastSockaddr",
    "WSHGetWSAProtocolInfo",
    "WSHGetSocketInformation"
  ],
  "WSManMigrationPlugin.dll": [
    "public: __thiscall SafeMap_Iterator::~SafeMap_Iterator(void)",
    "public: bool __thiscall SafeMap_Iterator::IsValid(void)const",
    "protected: void __thiscall SafeMap_Iterator::SkipOrphans(void)",
    "const SafeMap >::`vftable'",
    "public: __thiscall SafeMap >::~SafeMap >(void)",
    "public: virtual void __thiscall SafeMap >::Acquire(void)const",
    "DllRegisterServer",
    "public: class SafeMap > & __thiscall SafeMap >::AsReference(void)",
    "public: void __thiscall SafeMap_Lock >::Acquire(void)",
    "DllUnregisterServer",
    "public: __thiscall SafeMap_Lock >::~SafeMap_Lock >(void)",
    "public: bool __thiscall SafeMap_Lock >::Acquired(void)",
    "public: __thiscall SafeMap >::SafeMap >(void)",
    "DllMain",
    "public: virtual void __thiscall SafeMap >::Release(void)const",
    "public: __thiscall SafeMap_Lock >::SafeMap_Lock >(class SafeMap > const &,bool)",
    "DllCanUnloadNow",
    "public: unsigned long __thiscall CWSManCriticalSection::GetInitError(void)const",
    "public: __thiscall SafeMap_Iterator::SafeMap_Iterator(class SafeMap > &,bool)",
    "public: virtual bool __thiscall SafeMap >::DeInitialize(class IRequestContext &)",
    "public: class SafeMap > & __thiscall SafeMap_Iterator::GetMap(void)const",
    "DllGetClassObject",
    "public: class SafeMap > const & __thiscall SafeMap_Lock >::GetMap(void)const",
    "protected: class STLMap & __thiscall SafeMap_Iterator::Data(void)const",
    "public: void __thiscall SafeMap_Iterator::Reset(void)",
    "public: virtual bool __thiscall SafeMap >::Initialize(class IRequestContext &)",
    "public: __thiscall CWSManCriticalSectionWithConditionVar::~CWSManCriticalSectionWithConditionVar(void)"
  ],
  "WSService.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "WSShared.dll": [
    "DllGetActivationFactory",
    "public: static long __stdcall CWSSharedUtils::FreeAuthBrokerContext(void *)",
    "public: static long __stdcall CWSSharedUtils::GetProxyCredentialsUsingSSPIPFC(struct HWND__ *,unsigned short const *,unsigned long,unsigned short * *,unsigned short * *)",
    "public: __thiscall StoreInAppInformation::StoreInAppInformation(void)",
    "public: static long __stdcall CWSSharedUtils::GetServiceUrlInfoFromSqr(struct HWND__ *,enum StoreServiceName,int,void *,unsigned short * *,unsigned short * *,unsigned short * *)",
    "public: __thiscall tagStoreAppInformation::tagStoreAppInformation(void)",
    "public: static long __stdcall CWSSharedUtils::GetProductInformationFromWeb(struct _GUID,unsigned short const *,void *,struct tagStoreAppInformation * *)",
    "public: class CWSSharedUtils & __thiscall CWSSharedUtils::operator=(class CWSSharedUtils const &)",
    "public: __thiscall StoreServiceInformation::~StoreServiceInformation(void)",
    "public: __thiscall tagStoreAppInformation::~tagStoreAppInformation(void)",
    "DllCanUnloadNow",
    "public: static long __stdcall CWSSharedUtils::GetBannedAppsListFromWeb(unsigned char * *,unsigned int *)",
    "public: static long __stdcall CWSSharedUtils::GetCallingAppWindowHandle(struct HWND__ * *)",
    "public: static long __stdcall CWSSharedUtils::GetFormattedPrice(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short * *)",
    "public: __thiscall StoreServiceInformation::StoreServiceInformation(void)",
    "public: static long __stdcall CWSSharedUtils::GetCoreWindow(struct Windows::UI::Core::ICoreWindow * *)",
    "public: static long __stdcall CWSSharedUtils::WSFetchReceipt(struct _GUID *,unsigned short * *,struct _GUID *)",
    "DllGetClassObject",
    "public: __thiscall StoreInAppInformation::~StoreInAppInformation(void)",
    "public: static long __stdcall CWSSharedUtils::GetWindowHandle(struct Windows::UI::Core::ICoreWindow *,struct HWND__ * *)",
    "public: static long __stdcall CWSSharedUtils::GetCallingAppPackageFamilyName(unsigned short * *)",
    "public: static long __stdcall CWSSharedUtils::GetAuthBrokerContext(enum AuthBrokerScenarioName,unsigned long,struct HWND__ *,void * *)",
    "public: static long __stdcall CWSSharedUtils::GetDevLicenseInfoFromSqr(struct HWND__ *,void *,unsigned short * *,unsigned short * *,unsigned short * *,unsigned short * *,unsigned short * *)"
  ],
  "WSSync.dll": [
    "WSLicenseGetMachineID",
    "WSLicenseParseReceiptResponse",
    "WSLicenseFree",
    "WSEvaluatePackageRemediationState",
    "WSLicenseRemoveDevice",
    "WSCreateAcquireLicenseChallenge",
    "WSGetDebuggingHeader",
    "WSLicenseInitialize",
    "WSLicenseGetMyAppsList",
    "WSAcquireLicense",
    "g_bPrint",
    "WSSetDebuggingHeader",
    "WSGetLOBEnabledSKUFlag",
    "WSParseLicenseResponse",
    "WSSyncLicenses",
    "WSLicenseGetDeviceList",
    "WSGetLastSyncTime",
    "WSGetAddonKeyInstalledFlag",
    "WSCallActivateAppxLOBSKU",
    "WSLicenseGetOemLicenseList"
  ],
  "WUDFCoinstaller.dll": [
    "CoDeviceInstall"
  ],
  "WUDFPlatform.dll": [
    "WudfWaitForDebugger",
    "ShutdownPlatformLibrary",
    "InitializePlatformLibrary",
    "WdfGetLpcInterface",
    "GetAndInitializePlatformObject",
    "WudfIsKernelDebuggerPresent",
    "WudfIsAnyDebuggerPresent",
    "DllMain",
    "ClearPlatformTestingCallbacks",
    "SetPlatformTestingCallbacks",
    "WudfDebugBreakPoint",
    "WudfIsUserDebuggerPresent",
    "PlatformUnhandledExceptionFilter",
    "DllGetClassObject",
    "GetPlatformObject"
  ],
  "WUDFSvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "WUDFx.dll": [
    "DllCanUnloadNow",
    "Microsoft_WDF_UMDF_Version",
    "DllGetClassObject"
  ],
  "WUSettingsProvider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "WWanAPI.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "WWanHC.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "WavDest.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "WcnApi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "WcnEapAuthProxy.dll": [
    "WcnEapPluginGetInfo"
  ],
  "WcnEapPeerProxy.dll": [
    "EapPeerFreeMemory",
    "EapPeerFreeErrorMemory",
    "EapPeerGetInfo",
    "EapPeerGetMethodProperties"
  ],
  "WcnNetsh.dll": [
    "GetResourceString",
    "InitHelperDll"
  ],
  "WcsPlugInService.dll": [
    "DllCanUnloadNow",
    "ServiceMain",
    "DllGetClassObject"
  ],
  "Wdfres.dll": "No exports",
  "WebClnt.dll": [
    "DavClose",
    "ServiceMain",
    "DavInit",
    "SvchostPushServiceGlobals"
  ],
  "WebcamUi.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Websocket.dll": [
    "WebSocketCreateServerHandle",
    "WebSocketGetGlobalProperty",
    "WebSocketReceive",
    "WebSocketGetAction",
    "WebSocketEndClientHandshake",
    "WebSocketBeginServerHandshake",
    "WebSocketBeginClientHandshake",
    "WebSocketCompleteAction",
    "WebSocketSend",
    "WebSocketAbortHandle",
    "WebSocketEndServerHandshake",
    "WebSocketDeleteHandle",
    "WebSocketCreateClientHandle"
  ],
  "WfHC.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "WinFax.dll": [
    "FaxFreeBuffer",
    "FaxGetLoggingCategoriesA",
    "FaxSetPortW",
    "FaxEnableRoutingMethodW",
    "FaxSendDocumentForBroadcastW",
    "FaxConnectFaxServerA",
    "FaxEnableRoutingMethodA",
    "FaxSendDocumentForBroadcastA",
    "FaxStartPrintJobA",
    "FaxGetPortW",
    "FaxConnectFaxServerW",
    "FaxEnumRoutingMethodsW",
    "FaxSendDocumentW",
    "FaxEnumGlobalRoutingInfoA",
    "FaxGetDeviceStatusA",
    "FaxAccessCheck",
    "FaxEnumJobsA",
    "FaxSetGlobalRoutingInfoA",
    "FaxRegisterServiceProviderW",
    "FaxEnumPortsW",
    "FaxEnumRoutingMethodsA",
    "FaxEnumPortsA",
    "FaxGetJobW",
    "FaxSetJobA",
    "FaxSetJobW",
    "FaxSetLoggingCategoriesW",
    "FaxCompleteJobParamsW",
    "FaxUnregisterServiceProviderW",
    "FaxPrintCoverPageW",
    "FaxGetPortA",
    "FaxOpenPort",
    "FaxStartPrintJobW",
    "FaxGetRoutingInfoW",
    "FaxRegisterRoutingExtensionW",
    "FaxSetConfigurationA",
    "FaxGetPageData",
    "FaxSendDocumentA",
    "FaxAbort",
    "FaxSetPortA",
    "FaxGetRoutingInfoA",
    "FaxPrintCoverPageA",
    "FaxGetConfigurationA",
    "FaxSetLoggingCategoriesA",
    "FaxGetJobA",
    "FaxSetRoutingInfoA",
    "FaxSetConfigurationW",
    "FaxEnumJobsW",
    "FaxSetGlobalRoutingInfoW",
    "FaxClose",
    "FaxCompleteJobParamsA",
    "FaxGetDeviceStatusW",
    "FaxEnumGlobalRoutingInfoW",
    "FaxGetConfigurationW",
    "FaxInitializeEventQueue",
    "FaxGetLoggingCategoriesW",
    "FaxSetRoutingInfoW"
  ],
  "WinMsoIrmProtector.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "WinOpcIrmProtector.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "WinSATAPI.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "WinSCard.dll": [
    "SCardGetDeviceTypeIdA",
    "SCardWriteCacheW",
    "SCardForgetReaderGroupW",
    "SCardIntroduceReaderGroupW",
    "SCardIntroduceCardTypeW",
    "SCardReadCacheA",
    "SCardGetStatusChangeA",
    "SCardBeginTransaction",
    "SCardSetCardTypeProviderNameA",
    "SCardGetCardTypeProviderNameA",
    "SCardGetTransmitCount",
    "SCardConnectA",
    "SCardSetCardTypeProviderNameW",
    "SCardDisconnect",
    "SCardState",
    "SCardListCardsW",
    "SCardListCardsA",
    "SCardSetAttrib",
    "SCardGetReaderIconA",
    "SCardListInterfacesW",
    "SCardLocateCardsByATRA",
    "SCardIntroduceReaderGroupA",
    "SCardListReaderGroupsW",
    "SCardListReadersW",
    "SCardAddReaderToGroupA",
    "SCardRemoveReaderFromGroupA",
    "SCardGetReaderIconW",
    "SCardGetCardTypeProviderNameW",
    "SCardAddReaderToGroupW",
    "SCardReadCacheW",
    "SCardEndTransaction",
    "SCardReconnect",
    "SCardForgetCardTypeA",
    "SCardListInterfacesA",
    "SCardListReaderGroupsA",
    "SCardListReadersWithDeviceInstanceIdA",
    "SCardForgetCardTypeW",
    "SCardGetProviderIdA",
    "SCardLocateCardsA",
    "SCardStatusW",
    "SCardStatusA",
    "SCardListReadersWithDeviceInstanceIdW",
    "SCardConnectW",
    "SCardAccessNewReaderEvent",
    "SCardForgetReaderW",
    "SCardIsValidContext",
    "SCardGetDeviceTypeIdW",
    "SCardFreeMemory",
    "SCardEstablishContext",
    "SCardReleaseNewReaderEvent",
    "SCardGetReaderDeviceInstanceIdW",
    "SCardIntroduceCardTypeA",
    "SCardGetReaderDeviceInstanceIdA",
    "SCardRemoveReaderFromGroupW",
    "SCardGetAttrib",
    "g_rgSCardRawPci",
    "SCardReleaseStartedEvent",
    "ClassInstall32",
    "SCardGetProviderIdW",
    "SCardForgetReaderGroupA",
    "g_rgSCardT0Pci",
    "SCardListReadersA",
    "SCardIntroduceReaderW",
    "SCardIntroduceReaderA",
    "g_rgSCardT1Pci",
    "SCardWriteCacheA",
    "SCardReleaseContext",
    "SCardCancel",
    "SCardReleaseAllEvents",
    "SCardLocateCardsW",
    "SCardLocateCardsByATRW",
    "SCardTransmit",
    "SCardControl",
    "SCardGetStatusChangeW",
    "SCardForgetReaderA",
    "SCardAudit",
    "SCardAccessStartedEvent"
  ],
  "WinSync.dll": "No exports",
  "WinSyncMetastore.dll": "No exports",
  "WinSyncProviders.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "WinTypes.dll": [
    "DllGetActivationFactory",
    "RoGetMetaDataFile",
    "RoCreateNonAgilePropertySet",
    "RoGetBufferMarshaler",
    "RoResolveNamespace",
    "DllCanUnloadNow",
    "RoParseTypeName",
    "DllGetClassObject"
  ],
  "Windows.ApplicationModel.Background.SystemEventsBroker.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.ApplicationModel.Background.TimeBroker.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.ApplicationModel.Store.TestingFramework.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.ApplicationModel.Store.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.ApplicationModel.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.Devices.Enumeration.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.Devices.Enumeration.ps.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "Windows.Devices.Geolocation.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.Devices.Portable.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.Devices.Printers.Extensions.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.Devices.Sensors.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.Globalization.Fontgroups.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "GetPreferredFont",
    "DllGetClassObject"
  ],
  "Windows.Globalization.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.Graphics.Printing.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.Graphics.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.Help.Runtime.dll": "No exports",
  "Windows.Media.Devices.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.Media.MediaControl.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.Media.Renewal.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.Media.Streaming.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.Media.Streaming.ps.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "Windows.Media.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.Networking.BackgroundTransfer.dll": [
    "DllGetActivationFactory",
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "Windows.Networking.Connectivity.dll": [
    "DllGetActivationFactory",
    "CreateHostNameFromSockAddr",
    "CreateNetworkAdapterFromGuid",
    "CreateHostNameFromString",
    "CreateEndpointPairFromSockAddrs",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "SetHostNameMediaStreamingMode",
    "DllUnregisterServer"
  ],
  "Windows.Networking.NetworkOperators.HotspotAuthentication.dll": [
    "DllGetActivationFactory",
    "RegisterHotspotProfile",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "CleanupHotspotProfiles"
  ],
  "Windows.Networking.Proximity.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.Networking.Sockets.PushEnabledApplication.dll": [
    "DllGetActivationFactory",
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "Windows.Networking.dll": [
    "DllGetActivationFactory",
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "SetSocketMediaStreamingMode",
    "DllUnregisterServer"
  ],
  "Windows.Security.Authentication.OnlineId.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.Security.Credentials.UI.CredentialPicker.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.Storage.ApplicationData.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject",
    "CleanupTemporaryState"
  ],
  "Windows.Storage.Compression.dll": [
    "DllGetActivationFactory",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "Windows.System.Display.dll": [
    "DllGetActivationFactory",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "Windows.System.Profile.HardwareId.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.System.RemoteDesktop.dll": [
    "DllGetActivationFactory",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "Windows.UI.Immersive.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.UI.Input.Inking.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "Windows.UI.Xaml.dll": [
    "DllGetActivationFactory",
    "GetStringRawBuffer",
    "DeleteString",
    "CreateString",
    "DllMain",
    "GenerateBinaryGenericXaml",
    "FreeBinaryGenericXaml",
    "DllCanUnloadNow",
    "GetDependencyObjectAddress",
    "GetStringLen",
    "CreateXamlUIPresenter"
  ],
  "Windows.UI.dll": [
    "DllGetActivationFactory",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "Windows.Web.dll": [
    "DllGetActivationFactory",
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "WindowsCodecs.dll": [
    "IWICBitmap_Lock_Proxy",
    "IWICComponentInfo_GetSpecVersion_Proxy",
    "IWICBitmapFrameDecode_GetThumbnail_Proxy",
    "WICMapShortNameToGuid",
    "IWICBitmapCodecInfo_GetMimeTypes_Proxy",
    "IWICImagingFactory_CreateBitmapClipper_Proxy",
    "IWICBitmapFrameEncode_SetSize_Proxy",
    "IWICBitmapScaler_Initialize_Proxy",
    "IWICPalette_InitializeFromBitmap_Proxy",
    "IWICStream_InitializeFromIStream_Proxy",
    "IWICBitmapEncoder_CreateNewFrame_Proxy",
    "IWICBitmapDecoder_GetThumbnail_Proxy",
    "IWICColorContext_InitializeFromMemory_Proxy",
    "IWICBitmapCodecInfo_DoesSupportLossless_Proxy",
    "IWICComponentFactory_CreateMetadataWriterFromReader_Proxy",
    "IWICImagingFactory_CreateStream_Proxy",
    "WICCreateBitmapFromSectionEx",
    "IWICBitmap_SetPalette_Proxy",
    "WICConvertBitmapSource",
    "IEnumString_Reset_WIC_Proxy",
    "IWICMetadataQueryWriter_SetMetadataByName_Proxy",
    "IWICPalette_GetType_Proxy",
    "IWICMetadataQueryReader_GetEnumerator_Proxy",
    "DllGetClassObject",
    "IWICMetadataBlockReader_GetCount_Proxy",
    "WICSerializeMetadataContent",
    "IWICBitmapFrameDecode_GetMetadataQueryReader_Proxy",
    "IWICBitmapSource_CopyPalette_Proxy",
    "IWICPixelFormatInfo_GetChannelMask_Proxy",
    "IWICImagingFactory_CreateEncoder_Proxy",
    "IWICImagingFactory_CreateBitmapFromHBITMAP_Proxy",
    "IWICBitmapCodecInfo_GetFileExtensions_Proxy",
    "IWICImagingFactory_CreateBitmapFromMemory_Proxy",
    "IWICBitmapDecoder_GetDecoderInfo_Proxy",
    "IWICBitmapDecoder_GetMetadataQueryReader_Proxy",
    "IWICBitmapLock_GetStride_Proxy",
    "IWICImagingFactory_CreateFormatConverter_Proxy",
    "IWICImagingFactory_CreatePalette_Proxy",
    "IWICComponentFactory_CreateQueryWriterFromBlockWriter_Proxy",
    "IWICComponentInfo_GetVersion_Proxy",
    "WICCreateColorContext_Proxy",
    "IWICBitmapDecoder_GetPreview_Proxy",
    "IWICBitmapEncoder_Initialize_Proxy",
    "IEnumString_Next_WIC_Proxy",
    "WICMapSchemaToName",
    "IWICBitmapEncoder_Commit_Proxy",
    "IPropertyBag2_Write_Proxy",
    "IWICFastMetadataEncoder_GetMetadataQueryWriter_Proxy",
    "IWICBitmapCodecInfo_GetDeviceManufacturer_Proxy",
    "IWICPixelFormatInfo_GetBitsPerPixel_Proxy",
    "IWICImagingFactory_CreateBitmapScaler_Proxy",
    "IWICImagingFactory_CreateFastMetadataEncoderFromDecoder_Proxy",
    "IWICImagingFactory_CreateDecoderFromFilename_Proxy",
    "IWICFormatConverter_Initialize_Proxy",
    "WICMatchMetadataContent",
    "IWICComponentInfo_GetAuthor_Proxy",
    "IWICBitmapEncoder_SetPalette_Proxy",
    "IWICBitmapCodecInfo_GetDeviceModels_Proxy",
    "IWICImagingFactory_CreateQueryWriterFromReader_Proxy",
    "IWICPalette_InitializeFromPalette_Proxy",
    "IWICPalette_InitializePredefined_Proxy",
    "WICGetMetadataContentSize",
    "WICSetEncoderFormat_Proxy",
    "WICCreateImagingFactory_Proxy",
    "IWICBitmapCodecInfo_DoesSupportMultiframe_Proxy",
    "IWICPixelFormatInfo_GetChannelCount_Proxy",
    "IWICMetadataQueryReader_GetContainerFormat_Proxy",
    "IWICBitmapSource_GetResolution_Proxy",
    "IWICBitmapFrameEncode_GetMetadataQueryWriter_Proxy",
    "IWICBitmapSource_GetPixelFormat_Proxy",
    "IWICImagingFactory_CreateBitmapFlipRotator_Proxy",
    "IWICBitmapLock_GetDataPointer_STA_Proxy",
    "IWICBitmapFrameEncode_Initialize_Proxy",
    "IWICComponentInfo_GetCLSID_Proxy",
    "IWICBitmapDecoder_CopyPalette_Proxy",
    "IWICImagingFactory_CreateDecoderFromFileHandle_Proxy",
    "IWICBitmapDecoder_GetColorContexts_Proxy",
    "IWICBitmapDecoder_GetFrameCount_Proxy",
    "IWICBitmapFrameEncode_SetThumbnail_Proxy",
    "IWICBitmapSource_CopyPixels_Proxy",
    "IWICBitmapDecoder_GetFrame_Proxy",
    "WICMapGuidToShortName",
    "IWICBitmapEncoder_GetMetadataQueryWriter_Proxy",
    "IWICBitmapFrameDecode_GetColorContexts_Proxy",
    "IWICImagingFactory_CreateFastMetadataEncoderFromFrameDecode_Proxy",
    "IWICBitmapFrameEncode_SetColorContexts_Proxy",
    "IWICPalette_InitializeCustom_Proxy",
    "IWICImagingFactory_CreateComponentInfo_Proxy",
    "IWICBitmapFlipRotator_Initialize_Proxy",
    "IWICBitmapCodecInfo_GetContainerFormat_Proxy",
    "IWICMetadataQueryReader_GetLocation_Proxy",
    "IWICFastMetadataEncoder_Commit_Proxy",
    "IWICBitmapEncoder_GetEncoderInfo_Proxy",
    "IWICStream_InitializeFromMemory_Proxy",
    "IWICPalette_GetColorCount_Proxy",
    "IWICBitmapEncoder_SetThumbnail_Proxy",
    "WICCreateBitmapFromSection",
    "IWICMetadataBlockReader_GetReaderByIndex_Proxy",
    "IWICBitmapSource_GetSize_Proxy",
    "IWICBitmapCodecInfo_DoesSupportAnimation_Proxy",
    "IWICBitmapFrameEncode_SetResolution_Proxy",
    "IWICImagingFactory_CreateDecoderFromStream_Proxy",
    "IWICBitmapFrameEncode_Commit_Proxy",
    "IWICBitmapFrameEncode_WriteSource_Proxy",
    "IWICImagingFactory_CreateBitmapFromSource_Proxy",
    "IWICComponentInfo_GetFriendlyName_Proxy",
    "IWICImagingFactory_CreateBitmap_Proxy",
    "IWICMetadataQueryReader_GetMetadataByName_Proxy",
    "IWICImagingFactory_CreateQueryWriter_Proxy",
    "IWICImagingFactory_CreateBitmapFromHICON_Proxy",
    "IWICPalette_GetColors_Proxy",
    "IWICBitmap_SetResolution_Proxy",
    "IWICPalette_HasAlpha_Proxy",
    "IWICMetadataQueryWriter_RemoveMetadataByName_Proxy",
    "IWICBitmapClipper_Initialize_Proxy"
  ],
  "WindowsCodecsExt.dll": [
    "WICCreateColorTransform_Proxy",
    "DllGetClassObject",
    "IWICColorTransform_Initialize_Proxy"
  ],
  "Winlangdb.dll": [
    "IsImeInputMethod",
    "Bcp47GetLocalizedName",
    "GetInputMethodDescription",
    "GetInputMethodProperties",
    "IsImmersiveInputMethod",
    "IsoScriptGetLocalizedName",
    "TransformInputMethodsForLanguageId",
    "IsTouchEnabledInputMethod",
    "LanguagesDatabaseGetChildLanguages",
    "LanguagesDatabaseHasChildren",
    "GetInputMethodTileName",
    "Bcp47GetNativeName",
    "GetCompatibleInputMethodsForLanguage",
    "Bcp47GetLocalizedScript",
    "GetDefaultInputMethodForLanguage",
    "EnsureLanguageProfileExists",
    "TransformInputMethodsForLanguage",
    "GetLanguageNames",
    "SetUserLanguages",
    "Bcp47GetEnglishName"
  ],
  "WlS0WndH.dll": [
    "Session0ViewerWindowProcHook"
  ],
  "WlanMM.dll": [
    "DllGetClassObject",
    "DllCanUnloadNow",
    "StartDiagnosticsW",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "WlanRadioManager.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "Wldap32.dll": [
    "ldap_control_free",
    "ldap_ufn2dnW",
    "ldap_create_page_controlW",
    "ldap_escape_filter_elementW",
    "ldap_openW",
    "ldap_search_stW",
    "ldap_modify_ext_sA",
    "ldap_get_values_lenA",
    "ldap_get_values",
    "cldap_openW",
    "ldap_sasl_bind_sW",
    "ldap_parse_page_control",
    "ldap_modify_extA",
    "ldap_modify_ext",
    "ldap_bind_sA",
    "ldap_simple_bind_s",
    "ldap_sslinitA",
    "ldap_modrdnA",
    "ldap_add_sA",
    "ldap_modrdn2W",
    "ldap_free_controlsW",
    "ldap_compare_ext_s",
    "ldap_cleanup",
    "ldap_extended_operation_sW",
    "ldap_modrdn2A",
    "ldap_count_valuesA",
    "ber_scanf",
    "ldap_search_init_pageW",
    "ldap_deleteW",
    "ldap_parse_vlv_controlW",
    "ldap_startup",
    "ldap_add_sW",
    "ldap_extended_operation",
    "ldap_search_ext_sW",
    "ldap_modify_ext_sW",
    "ldap_memfree",
    "ldap_modrdn2_sA",
    "ldap_addW",
    "ldap_close_extended_op",
    "ldap_bind_s",
    "ldap_modrdn2_s",
    "ldap_first_reference",
    "ldap_memfreeA",
    "ldap_delete",
    "ber_free",
    "ldap_count_references",
    "ldap_count_values",
    "ldap_parse_reference",
    "ldap_compareW",
    "ldap_delete_ext",
    "ldap_get_dn",
    "ber_first_element",
    "ldap_count_entries",
    "ldap_delete_sA",
    "ldap_modrdn_sA",
    "cldap_open",
    "ldap_next_attribute",
    "ldap_extended_operationW",
    "ldap_delete_ext_sW",
    "ldap_next_attributeA",
    "ldap_bind_sW",
    "ldap_conn_from_msg",
    "ldap_deleteA",
    "ber_init",
    "ldap_explode_dnW",
    "ldap_add_ext_s",
    "ldap_bind",
    "ldap_compare_sW",
    "ldap_control_freeA",
    "ldap_modify_sA",
    "ldap_compare_extA",
    "ldap_modrdnW",
    "ldap_abandon",
    "ldap_add_ext",
    "ldap_search_ext_sA",
    "ldap_stop_tls_s",
    "ldap_compare_extW",
    "ldap_escape_filter_elementA",
    "ldap_modify_extW",
    "ldap_dn2ufn",
    "ldap_value_free_len",
    "ldap_unbind_s",
    "LdapUnicodeToUTF8",
    "ldap_encode_sort_controlW",
    "ldap_simple_bindA",
    "ldap_get_option",
    "ldap_check_filterW",
    "ldap_delete_ext_s",
    "ldap_search_s",
    "ldap_memfreeW",
    "ber_peek_tag",
    "ber_skip_tag",
    "ldap_create_vlv_controlW",
    "ldap_first_entry",
    "ldap_parse_sort_controlW",
    "ldap_search_ext_s",
    "ldap_err2string",
    "ldap_modify_s",
    "ldap_dn2ufnA",
    "ldap_parse_resultA",
    "ldap_sslinitW",
    "ldap_create_sort_control",
    "LdapUTF8ToUnicode",
    "ldap_first_attributeA",
    "ldap_controls_freeA",
    "ldap_check_filterA",
    "ldap_value_freeW",
    "ldap_search_extW",
    "ldap_compare_sA",
    "ldap_result2error",
    "ldap_search_sW",
    "ldap_create_sort_controlA",
    "ldap_get_values_lenW",
    "ldap_set_dbg_routine",
    "ldap_start_tls_sW",
    "ldap_unbind",
    "ldap_first_attributeW",
    "ldap_free_controlsA",
    "ber_bvdup",
    "ldap_err2stringA",
    "ldap_create_sort_controlW",
    "ldap_modrdn2_sW",
    "ldap_escape_filter_element",
    "cldap_openA",
    "ldap_delete_extW",
    "ldap_initA",
    "ldap_modrdn_s",
    "ldap_set_option",
    "ldap_simple_bindW",
    "ldap_init",
    "ldap_set_optionW",
    "ldap_search_ext",
    "ldap_set_dbg_flags",
    "ldap_count_values_len",
    "ldap_delete_s",
    "ldap_parse_result",
    "ldap_search",
    "ldap_add_s",
    "ldap_next_reference",
    "ldap_rename_extA",
    "ldap_get_paged_count",
    "ldap_connect",
    "ldap_next_entry",
    "ldap_modify_sW",
    "ldap_search_st",
    "ldap_result",
    "ldap_parse_page_controlW",
    "ldap_compare_s",
    "ldap_add",
    "ldap_delete_extA",
    "ldap_first_attribute",
    "ldap_controls_free",
    "ldap_modify",
    "ldap_rename_ext_sW",
    "ldap_search_extA",
    "ldap_next_attributeW",
    "ldap_free_controls",
    "ldap_bindW",
    "ldap_sslinit",
    "ldap_controls_freeW",
    "ldap_simple_bind_sA",
    "ldap_add_ext_sA",
    "ldap_modify_ext_s",
    "ldap_simple_bind_sW",
    "ldap_start_tls_sA",
    "ldap_extended_operationA",
    "ldap_parse_referenceW",
    "ldap_extended_operation_sA",
    "ldap_searchA",
    "ldap_searchW",
    "ldap_get_dnW",
    "ldap_delete_ext_sA",
    "ldap_parse_resultW",
    "ldap_modrdn_sW",
    "ldap_compare_ext",
    "ber_flatten",
    "ldap_ufn2dnA",
    "ldap_get_optionA",
    "ldap_add_ext_sW",
    "ldap_compareA",
    "ber_printf",
    "ldap_get_dnA",
    "ldap_ufn2dn",
    "ldap_value_free",
    "ldap_parse_extended_resultW",
    "ldap_dn2ufnW",
    "ldap_parse_referenceA",
    "ber_next_element",
    "ldap_compare_ext_sA",
    "ldap_err2stringW",
    "ldap_create_page_control",
    "ldap_get_valuesW",
    "ldap_modifyW",
    "ldap_compare_ext_sW",
    "ldap_encode_sort_controlA",
    "ldap_get_valuesA",
    "ldap_openA",
    "ldap_rename_ext",
    "ldap_sasl_bindW",
    "ldap_get_values_len",
    "ldap_sasl_bindA",
    "ldap_parse_extended_resultA",
    "ldap_simple_bind",
    "ldap_get_optionW",
    "ldap_bindA",
    "LdapGetLastError",
    "ber_bvecfree",
    "ldap_compare",
    "ldap_perror",
    "ldap_parse_page_controlA",
    "ber_alloc_t",
    "LdapMapErrorToWin32",
    "ldap_open",
    "ber_bvfree",
    "ldap_addA",
    "ldap_modifyA",
    "ldap_parse_sort_controlA",
    "ldap_rename_ext_s",
    "ldap_search_init_pageA",
    "ldap_search_stA",
    "ldap_add_extW",
    "ldap_delete_sW",
    "ldap_count_valuesW",
    "ldap_modrdn2",
    "ldap_get_next_page",
    "ldap_initW",
    "ldap_rename_ext_sA",
    "ldap_parse_sort_control",
    "ldap_value_freeA",
    "ldap_search_abandon_page",
    "ldap_explode_dnA",
    "ldap_add_extA",
    "ldap_explode_dn",
    "ldap_msgfree",
    "ldap_rename_extW",
    "ldap_search_sA",
    "ldap_get_next_page_s",
    "ldap_control_freeW",
    "ldap_create_page_controlA",
    "ldap_modrdn",
    "ldap_parse_vlv_controlA",
    "ldap_sasl_bind_sA",
    "ldap_set_optionA",
    "ldap_search_init_page",
    "ldap_create_vlv_controlA"
  ],
  "Wpc.dll": [
    "void __stdcall DisplayString::Create(unsigned short (&)[260],class TimeSpan const &)",
    "ApplyParentalControlsW",
    "void __stdcall DisplayString::Create(unsigned short (&)[260],class CategoryList const &)",
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "WpcWebSync.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "WsmAgent.dll": [
    "public: unsigned long __thiscall CWSManCriticalSection::GetInitError(void)const",
    "DllUnregisterServer",
    "DllMain",
    "GetProviderClassID",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "public: __thiscall CWSManCriticalSectionWithConditionVar::~CWSManCriticalSectionWithConditionVar(void)",
    "MI_Main"
  ],
  "WsmAuto.dll": [
    "private: void __thiscall AutoCleanup,struct _WSMAN_OPTION *>::ReleasePtr(void)",
    "public: __thiscall AutoLocalFree::~AutoLocalFree(void)",
    "public: class Locale::Resources * __thiscall AutoCleanup,class Locale::Resources *>::Detach(void)",
    "public: __thiscall AutoCleanup::AutoCleanup(struct HINSTANCE__ *)",
    "public: __thiscall EtwCorrelationHelper::EtwCorrelationHelper(class EtwCorrelationHelper const &)",
    "public: void __thiscall BufferFormatter::SetFormatterMode(enum PacketFormatter::Charset,enum PacketFormatter::Charset)",
    "public: enum PacketFormatter::Charset __thiscall PacketFormatter::GetCharset(void)const",
    "public: unsigned long __thiscall BufferFormatter::GetError(void)const",
    "public: __thiscall ILifeTimeMgmt::ILifeTimeMgmt(class ILifeTimeMgmt const &)",
    "public: class AutoChainContext & __thiscall AutoCleanup::operator=(struct _CERT_CHAIN_CONTEXT const *)",
    "public: __thiscall AutoCoTaskMemFree::AutoCoTaskMemFree(void *)",
    "public: virtual bool __thiscall CErrorContext::IsGeneratingError(void)const",
    "public: class AutoSecurityDescriptor & __thiscall AutoSecurityDescriptor::operator=(void *)",
    "public: virtual void __thiscall CRequestContext::RecordOutOfMemory(void)",
    "private: class AutoMIInstance & __thiscall AutoCleanup::Me(void)",
    "public: __thiscall AutoFwXmlCloseParser::AutoFwXmlCloseParser(void *)",
    "public: virtual bool __thiscall SafeMap >::DeInitialize(class IRequestContext &)",
    "public: int __thiscall CRequestContext::RecordHtmlError(unsigned long,unsigned short const *,unsigned long)",
    "public: __thiscall SimpleQueue::SimpleQueue(void)",
    "public: class EventLog & __thiscall EventLog::operator=(class EventLog const &)",
    "public: __thiscall AutoImpersonateUser::~AutoImpersonateUser(void)",
    "public: unsigned long __thiscall CRequestContext::SetMachineName(unsigned short const *)",
    "private: class AutoLocalFree & __thiscall AutoCleanup::Me(void)",
    "private: class AutoHandle & __thiscall AutoCleanup::Me(void)",
    "protected: bool __thiscall ILoader::CreateInstance(class IRequestContext &)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CRequestContext *>::Me(void)",
    "private: void __thiscall AutoCleanup,class Locale::Resources *>::ReleasePtr(void)",
    "public: unsigned long __thiscall CWSManResourceNoResourceUri::GetOptionCount(void)",
    "public: bool __thiscall BufferFormatter::IsInCommitMode(void)",
    "public: class AutoHandle & __thiscall AutoHandle::operator=(void *)",
    "public: virtual void __thiscall CErrorContext::SetGeneratingError(void)",
    "public: __thiscall AutoRegKey::AutoRegKey(void)",
    "public: bool __thiscall AutoCleanup,unsigned short *>::operator!(void)const",
    "public: unsigned char * __thiscall BufferFormatter::Detach(void)",
    "public: __thiscall AutoDelete::AutoDelete(class Locale::Resources *)",
    "public: class CWSManSecurityUI * __thiscall AutoCleanup,class CWSManSecurityUI *>::operator->(void)",
    "public: class AutoBstr & __thiscall AutoBstr::operator=(unsigned short *)",
    "public: __thiscall AutoChainContext::AutoChainContext(void)",
    "public: __thiscall AutoCleanup,class CWSManSecurityUI *>::AutoCleanup,class CWSManSecurityUI *>(class CWSManSecurityUI *)",
    "private: class AutoDeleteVector & __thiscall AutoCleanup,struct _WSMAN_OPTION *>::Me(void)",
    "const BufferFormatter::`vftable'",
    "public: class AutoBstr & __thiscall AutoCleanup::operator=(unsigned short *)",
    "public: __thiscall AutoCleanup::AutoCleanup(struct HKEY__ *)",
    "public: virtual void __thiscall SafeMap >::Acquire(void)const",
    "public: __thiscall ILifeTimeMgmt::ILifeTimeMgmt(void)",
    "public: int __thiscall CRequestContext::IsCIM_Error(void)",
    "public: void __thiscall FastLock::AcquireShared(void)",
    "private: void __thiscall AutoCleanup,unsigned short const * *>::ReleasePtr(void)",
    "public: void __thiscall ChildLifeTimeManager::WaitForAllChildrenToUnregister(unsigned long)",
    "public: __thiscall OwnLock::OwnLock(class FastLock &)",
    "public: virtual unsigned char * __thiscall BufferFormatter::GetBuffer(void)",
    "public: class AutoImpersonateUser & __thiscall AutoCleanup::operator=(void *)",
    "public: __thiscall AutoLocalFree::AutoLocalFree(void)",
    "public: __thiscall SafeMap_Iterator::SafeMap_Iterator(class SafeMap > &,bool)",
    "public: long __thiscall ChildLifeTimeManager::GetChildCount(void)const",
    "public: __thiscall AutoRegKey::AutoRegKey(struct HKEY__ *)",
    "public: __thiscall AutoCleanup,unsigned short const * *>::~AutoCleanup,unsigned short const * *>(void)",
    "public: __thiscall AutoLocalFree::AutoLocalFree(void *)",
    "public: int __thiscall CRequestContext::HasFaultXML(void)const",
    "public: virtual void __thiscall BufferFormatter::Reset(void)",
    "public: __thiscall AutoCleanup,unsigned short *>::~AutoCleanup,unsigned short *>(void)",
    "public: __thiscall AutoFwXmlCloseParser::~AutoFwXmlCloseParser(void)",
    "public: class AutoCertContext & __thiscall AutoCleanup::operator=(struct _CERT_CONTEXT const *)",
    "public: bool __thiscall SafeMap_Iterator::IsValid(void)const",
    "private: class AutoDeleteVector & __thiscall AutoCleanup,unsigned char *>::Me(void)",
    "public: class AutoEnvironmentBlock & __thiscall AutoCleanup::operator=(void *)",
    "public: class AutoLocalFree & __thiscall AutoLocalFree::operator=(void *)",
    "public: __thiscall AutoSecurityDescriptor::~AutoSecurityDescriptor(void)",
    "public: __thiscall AutoMIInstance::AutoMIInstance(void)",
    "DllRegisterServer",
    "public: class AutoBstrNoAlloc & __thiscall AutoBstrNoAlloc::operator=(unsigned short *)",
    "public: __thiscall AutoBstrNoAlloc::AutoBstrNoAlloc(unsigned short *)",
    "public: __thiscall OwnLock::~OwnLock(void)",
    "public: __thiscall AutoCleanup,class CWSManSecurityUI *>::operator class CWSManSecurityUI *(void)",
    "private: void __thiscall AutoCleanup,unsigned short *>::ReleasePtr(void)",
    "public: virtual unsigned short const * __thiscall CRequestContext::GetFaultXML(void)const",
    "public: __thiscall BufferFormatter::BufferFormatter(void)",
    "public: bool __thiscall ChildLifeTimeManager::RegisterChild(void)",
    "public: int __thiscall CRequestContext::RecordSoapError(unsigned long,struct _FWXML_ELEMENT *)",
    "public: class AutoRegKey & __thiscall AutoRegKey::operator=(struct HKEY__ *)",
    "public: void __thiscall ChildLifeTimeManager::UnregisterChild(void)",
    "public: __thiscall ChildLifeTimeManager::ChildLifeTimeManager(void)",
    "protected: class STLMap & __thiscall SafeMap_Iterator::Data(void)const",
    "public: __thiscall AutoDeleteVector::AutoDeleteVector(unsigned short *)",
    "const CircularBufferFormatter::`vftable'",
    "public: __thiscall LoaderSerializer::LoaderSerializer(bool (__thiscall Locale::Resources::*)(class IRequestContext &),bool (__thiscall Locale::Resources::*)(class IRequestContext &))",
    "private: class AutoFree & __thiscall AutoCleanup,unsigned char *>::Me(void)",
    "public: class AutoObject & __thiscall AutoCleanup::operator=(struct WSMAN_OBJECT *)",
    "private: class AutoBstrNoAlloc & __thiscall AutoCleanup::Me(void)",
    "public: class ChildLifeTimeManager & __thiscall ChildLifeTimeManager::operator=(class ChildLifeTimeManager const &)",
    "public: __thiscall ILoader::ILoader(bool (__thiscall Locale::Resources::*)(class IRequestContext &),bool (__thiscall Locale::Resources::*)(class IRequestContext &))",
    "public: class AutoMIClass & __thiscall AutoMIClass::operator=(struct _MI_Class *)",
    "public: virtual __thiscall BufferFormatter::~BufferFormatter(void)",
    "public: __thiscall SafeMap >::~SafeMap >(void)",
    "public: __thiscall AutoImpersonateUser::AutoImpersonateUser(void)",
    "private: void __thiscall AutoCleanup,class CRequestContext *>::ReleasePtr(void)",
    "public: void __thiscall SafeMap_Lock >::Acquire(void)",
    "public: bool __thiscall AutoCleanup,class CWSManSecurityUI *>::operator!(void)const",
    "private: void __thiscall AutoCleanup,unsigned char *>::ReleasePtr(void)",
    "public: unsigned short const * __thiscall XmlReader::GetBuffer(void)",
    "public: __thiscall AutoCleanup,unsigned short *>::operator unsigned short *(void)",
    "public: class AutoObject & __thiscall AutoObject::operator=(struct WSMAN_OBJECT *)",
    "public: __thiscall AutoWaitHandle::AutoWaitHandle(void *)",
    "public: class AutoRegKey & __thiscall AutoCleanup::operator=(struct HKEY__ *)",
    "public: virtual __thiscall CWSManResource::~CWSManResource(void)",
    "const EtwCorrelationHelper::`vftable'",
    "private: class AutoFwXmlCloseParser & __thiscall AutoCleanup::Me(void)",
    "public: void __thiscall CircularBufferFormatter::SetMaxEnvelopeSize(unsigned long)",
    "public: virtual unsigned short const * __thiscall CErrorContext::GetFaultXML(void)const",
    "public: __thiscall AutoObject::~AutoObject(void)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class CWSManSecurityUI *)",
    "public: __thiscall AutoCertContext::AutoCertContext(struct _CERT_CONTEXT const *)",
    "public: __thiscall AutoDeleteVector::AutoDeleteVector(void)",
    "private: class AutoLibrary & __thiscall AutoCleanup::Me(void)",
    "public: __thiscall AutoCleanup,class CRequestContext *>::~AutoCleanup,class CRequestContext *>(void)",
    "public: unsigned int __thiscall XmlReader::GetLength(void)",
    "public: bool __thiscall SimpleQueue::empty(void)const",
    "public: unsigned short * __thiscall AutoCleanup,unsigned short *>::Detach(void)",
    "public: __thiscall SimpleQueue::~SimpleQueue(void)",
    "private: class AutoWaitHandle & __thiscall AutoCleanup::Me(void)",
    "public: __thiscall AutoRelease::~AutoRelease(void)",
    "public: __thiscall AutoMIClass::AutoMIClass(struct _MI_Class *)",
    "public: __thiscall AutoObject::AutoObject(struct WSMAN_OBJECT *)",
    "private: class AutoDelete & __thiscall AutoCleanup,class Locale::Resources *>::Me(void)",
    "public: __thiscall AutoRelease::AutoRelease(void)",
    "public: enum PacketFormatter::Charset __thiscall PacketFormatter::GetBomIndex(void)const",
    "const CWSManResource::`vftable'",
    "public: void * __thiscall XmlReader::GetParser(void)",
    "public: virtual bool __thiscall SafeMap >::Initialize(class IRequestContext &)",
    "private: class AutoCertContext & __thiscall AutoCleanup::Me(void)",
    "public: class AutoCoTaskMemFree & __thiscall AutoCoTaskMemFree::operator=(void *)",
    "public: virtual __thiscall EtwCorrelationHelper::~EtwCorrelationHelper(void)",
    "public: __thiscall AutoLibrary::AutoLibrary(void)",
    "public: __thiscall AutoDelete::~AutoDelete(void)",
    "public: __thiscall AutoCleanup,unsigned char *>::AutoCleanup,unsigned char *>(unsigned char *)",
    "public: void __thiscall FastLock::ReleaseShared(void)",
    "public: class AutoCoTaskMemFree & __thiscall AutoCleanup::operator=(void *)",
    "public: __thiscall AutoCleanup::AutoCleanup(unsigned short *)",
    "public: __thiscall AutoEnvironmentBlock::AutoEnvironmentBlock(void *)",
    "public: unsigned long __thiscall CWSManCriticalSection::GetInitError(void)const",
    "public: virtual long __thiscall ILifeTimeMgmt::AddRef(void)",
    "public: void __thiscall CRequestContext::RecordProviderFailure(unsigned long,int,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: __thiscall AutoCleanup::AutoCleanup(struct _MI_Instance *)",
    "public: class AutoRelease & __thiscall AutoCleanup,class CWSManSecurityUI *>::operator=(class CWSManSecurityUI *)",
    "public: __thiscall AutoMIInstance::AutoMIInstance(struct _MI_Instance *)",
    "public: virtual void __thiscall CircularBufferFormatter::SetUpdateMode(enum BufferFormatter::Mode)",
    "public: int __thiscall CRequestContext::ProcessContext(int,struct _WSMAN_EVENTS_RESULT *)",
    "public: __thiscall AutoHandle::AutoHandle(void *)",
    "public: class AutoLocalFree & __thiscall AutoCleanup::operator=(void *)",
    "private: class AutoImpersonateUser & __thiscall AutoCleanup::Me(void)",
    "public: __thiscall AutoCleanup,struct _WSMAN_OPTION *>::~AutoCleanup,struct _WSMAN_OPTION *>(void)",
    "public: void __thiscall FastLock::AcquireExclusive(void)",
    "private: class AutoRegKey & __thiscall AutoCleanup::Me(void)",
    "public: __thiscall AutoMIInstance::~AutoMIInstance(void)",
    "public: class AutoImpersonateUser & __thiscall AutoImpersonateUser::operator=(void *)",
    "const ILifeTimeMgmt::`vftable'",
    "public: __thiscall SafeMap_Lock >::SafeMap_Lock >(class SafeMap > const &,bool)",
    "public: __thiscall AutoCleanup,struct _WSMAN_OPTION *>::operator struct _WSMAN_OPTION *(void)",
    "DllCanUnloadNow",
    "public: unsigned char * __thiscall AutoCleanup,unsigned char *>::Detach(void)",
    "public: __thiscall AutoRelease::AutoRelease(class CRequestContext *)",
    "public: __thiscall CWSManResource::CWSManResource(int)",
    "public: class AutoWaitHandle & __thiscall AutoWaitHandle::operator=(void *)",
    "public: unsigned short const * __thiscall CRequestContext::GetLocaleString(void)",
    "private: class AutoDeleteVector & __thiscall AutoCleanup,unsigned short *>::Me(void)",
    "public: class AutoMIInstance & __thiscall AutoCleanup::operator=(struct _MI_Instance *)",
    "public: __thiscall AutoRegKey::~AutoRegKey(void)",
    "private: class AutoCoTaskMemFree & __thiscall AutoCleanup::Me(void)",
    "public: void __thiscall SafeMap_Iterator::Reset(void)",
    "public: __thiscall AutoCleanup,class CRequestContext *>::AutoCleanup,class CRequestContext *>(class CRequestContext *)",
    "public: __thiscall AutoDeleteVector::~AutoDeleteVector(void)",
    "public: class AutoFwXmlCloseParser & __thiscall AutoFwXmlCloseParser::operator=(void *)",
    "public: __thiscall AutoBstrNoAlloc::~AutoBstrNoAlloc(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CWSManSecurityUI *>::Me(void)",
    "public: class AutoEnvironmentBlock & __thiscall AutoEnvironmentBlock::operator=(void *)",
    "private: int __thiscall CRequestContext::HasHtmlError(void)const",
    "private: class AutoEnvironmentBlock & __thiscall AutoCleanup::Me(void)",
    "public: __thiscall AutoMIClass::AutoMIClass(void)",
    "public: __thiscall AutoSecurityDescriptor::AutoSecurityDescriptor(void *)",
    "public: __thiscall AutoCleanup::AutoCleanup(struct _MI_Class *)",
    "public: struct _WSMAN_OPTION * __thiscall CWSManResourceNoResourceUri::GetOptions(void)",
    "public: virtual unsigned long __thiscall CRequestContext::GetMessageId(void)const",
    "public: virtual __thiscall CircularBufferFormatter::~CircularBufferFormatter(void)",
    "public: __thiscall AutoWaitHandle::~AutoWaitHandle(void)",
    "public: unsigned short const * * __thiscall CWSManResourceNoResourceUri::GetOptionTypes(void)",
    "public: class Locale::Resources * __thiscall LoaderSerializer::GetInstance(class IRequestContext &)",
    "public: virtual void __thiscall CRequestContext::RecordAccessDenied(void)",
    "const SafeMap >::`vftable'",
    "public: bool __thiscall ILoader::IsEmpty(void)const",
    "public: void __thiscall FastLock::ReleaseExclusive(void)",
    "public: __thiscall ChildLifeTimeManager::~ChildLifeTimeManager(void)",
    "public: class SafeMap > & __thiscall SafeMap >::AsReference(void)",
    "public: __thiscall AutoCleanup,class Locale::Resources *>::AutoCleanup,class Locale::Resources *>(class Locale::Resources *)",
    "public: __thiscall AutoCleanup::AutoCleanup(void *)",
    "public: virtual __thiscall IRequestContext::~IRequestContext(void)",
    "public: __thiscall AutoHandle::~AutoHandle(void)",
    "public: class AutoSecurityDescriptor & __thiscall AutoCleanup::operator=(void *)",
    "public: __thiscall AutoChainContext::~AutoChainContext(void)",
    "public: enum PacketFormatter::Charset __thiscall BufferFormatter::GetFormatterMode(void)",
    "public: __thiscall AutoCertContext::~AutoCertContext(void)",
    "private: class AutoMIClass & __thiscall AutoCleanup::Me(void)",
    "public: class AutoMIClass & __thiscall AutoCleanup::operator=(struct _MI_Class *)",
    "public: __thiscall AutoSecurityDescriptor::AutoSecurityDescriptor(void)",
    "public: int __thiscall CWSManResourceNoResourceUri::GetOptionsMustUnderstandValue(void)",
    "private: class AutoBstr & __thiscall AutoCleanup::Me(void)",
    "public: void __thiscall CRequestContext::LogErrorCode(void)",
    "public: __thiscall SafeMap_Lock >::~SafeMap_Lock >(void)",
    "public: class Locale & __thiscall CRequestContext::GetLocale(void)",
    "public: class AutoBstrNoAlloc & __thiscall AutoCleanup::operator=(unsigned short *)",
    "private: void __thiscall ChildLifeTimeManager::WakeAllWaitingOnNoOfChildren(void)",
    "public: bool __thiscall SafeMap_Lock >::Acquired(void)",
    "public: __thiscall AutoCleanup,class Locale::Resources *>::operator class Locale::Resources *(void)",
    "public: virtual void __thiscall SafeMap >::Release(void)const",
    "public: class AutoFwXmlCloseParser & __thiscall AutoCleanup::operator=(void *)",
    "private: class AutoDeleteVector & __thiscall AutoCleanup,unsigned short const * *>::Me(void)",
    "public: __thiscall AutoCleanup::AutoCleanup(struct WSMAN_OBJECT *)",
    "public: class SafeMap > & __thiscall SafeMap_Iterator::GetMap(void)const",
    "public: void __thiscall CErrorContext::SetExtraLogInfo(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: class AutoDeleteVector & __thiscall AutoDeleteVector::operator=(unsigned short *)",
    "public: __thiscall AutoBstr::AutoBstr(unsigned short *)",
    "public: virtual int __thiscall CErrorContext::Passed(void)const",
    "public: bool __thiscall Locale::UsingDefaultLCID(void)",
    "public: __thiscall ILoader::~ILoader(void)",
    "public: virtual int __thiscall CErrorContext::UseDefaultConfig(void)const",
    "public: __thiscall CWSManCriticalSectionWithConditionVar::~CWSManCriticalSectionWithConditionVar(void)",
    "public: __thiscall CircularBufferFormatter::CircularBufferFormatter(void)",
    "public: __thiscall AutoWaitHandle::AutoWaitHandle(void)",
    "public: __thiscall LoaderSerializer::~LoaderSerializer(void)",
    "protected: void __thiscall SafeMap_Iterator::SkipOrphans(void)",
    "public: unsigned long __thiscall BufferFormatter::GetBufferSize(void)const",
    "public: virtual void __thiscall CircularBufferFormatter::Reset(void)",
    "protected: __thiscall IRequestContext::IRequestContext(void)",
    "public: bool __thiscall CRequestContext::SetLocale(unsigned short const *,unsigned long)",
    "public: int __thiscall CRequestContext::ProcessContext(int,struct _WSMAN_ENUMERATOR_RESULT *)",
    "public: __thiscall ShareLock::~ShareLock(void)",
    "public: __thiscall AutoCertContext::AutoCertContext(void)",
    "public: __thiscall AutoFree::AutoFree(unsigned char *)",
    "public: class CRequestContext * __thiscall AutoCleanup,class CRequestContext *>::operator->(void)",
    "public: class AutoWaitHandle & __thiscall AutoCleanup::operator=(void *)",
    "public: __thiscall AutoObject::AutoObject(void)",
    "public: class AutoHandle & __thiscall AutoCleanup::operator=(void *)",
    "public: bool __thiscall AutoCleanup,class CRequestContext *>::operator!(void)const",
    "private: class AutoDelete & __thiscall AutoCleanup,unsigned short *>::Me(void)",
    "public: __thiscall AutoCoTaskMemFree::~AutoCoTaskMemFree(void)",
    "public: virtual __thiscall ILifeTimeMgmt::~ILifeTimeMgmt(void)",
    "public: __thiscall AutoCleanup,unsigned short *>::AutoCleanup,unsigned short *>(unsigned short *)",
    "public: __thiscall FastLock::FastLock(void)",
    "public: __thiscall SafeMap_Iterator::~SafeMap_Iterator(void)",
    "public: __thiscall AutoBstrNoAlloc::AutoBstrNoAlloc(void)",
    "private: void __thiscall AutoCleanup::ReleasePtr(void)",
    "public: class PacketFormatter & __thiscall PacketFormatter::operator=(class PacketFormatter const &)",
    "public: virtual int __thiscall CRequestContext::RecordSoapError(unsigned long,unsigned short const *)",
    "public: __thiscall SafeMap >::SafeMap >(void)",
    "public: class SimpleQueue & __thiscall SimpleQueue::operator=(class SimpleQueue const &)",
    "public: __thiscall AutoCleanup,unsigned char *>::operator unsigned char *(void)",
    "public: virtual unsigned long __thiscall CErrorContext::GetErrorCode(void)const",
    "public: int __thiscall CRequestContext::ProcessContext(int,struct _WSMAN_STATUS *)",
    "DllGetClassObject",
    "public: class SafeMap > const & __thiscall SafeMap_Lock >::GetMap(void)const",
    "public: __thiscall AutoCleanup,class CWSManSecurityUI *>::~AutoCleanup,class CWSManSecurityUI *>(void)",
    "public: class AutoLibrary & __thiscall AutoLibrary::operator=(struct HINSTANCE__ *)",
    "private: class AutoChainContext & __thiscall AutoCleanup::Me(void)",
    "public: __thiscall AutoHandle::AutoHandle(void)",
    "public: unsigned long __thiscall Locale::GetLCID(void)",
    "public: virtual unsigned char const * __thiscall BufferFormatter::GetBuffer(void)const",
    "public: int __thiscall CRequestContext::RecordHtmlError(unsigned long,struct _FWXML_ELEMENT *)",
    "public: __thiscall AutoCleanup,unsigned short const * *>::operator unsigned short const * *(void)",
    "public: __thiscall AutoCleanup::~AutoCleanup(void)",
    "public: class AutoMIInstance & __thiscall AutoMIInstance::operator=(struct _MI_Instance *)",
    "DllUnregisterServer",
    "public: __thiscall AutoFwXmlCloseParser::AutoFwXmlCloseParser(void)",
    "public: void __thiscall SimpleQueue::pop(void)",
    "public: __thiscall AutoLibrary::AutoLibrary(struct HINSTANCE__ *)",
    "public: __thiscall Loader::~Loader(void)",
    "public: virtual unsigned long __thiscall BufferFormatter::GetSpaceUsed(bool)const",
    "public: __thiscall AutoBstr::~AutoBstr(void)",
    "public: __thiscall AutoCleanup,class Locale::Resources *>::~AutoCleanup,class Locale::Resources *>(void)",
    "public: __thiscall AutoCleanup::operator void *(void)",
    "public: __thiscall AutoCleanup,unsigned char *>::operator unsigned char * const(void)const",
    "public: __thiscall BufferFormatter::BufferFormatter(unsigned char *,unsigned long)",
    "public: class AutoChainContext & __thiscall AutoChainContext::operator=(struct _CERT_CHAIN_CONTEXT const *)",
    "public: virtual unsigned long __thiscall CErrorContext::GetMessageId(void)const",
    "public: virtual long __thiscall ILifeTimeMgmt::Release(void (__stdcall*)(void *),void *)",
    "public: int __thiscall CRequestContext::ProcessContext(int,struct _WSMAN_RESULT *)",
    "public: virtual void __thiscall CErrorContext::SetCIM_Error(void)",
    "public: class FastLock & __thiscall FastLock::operator=(class FastLock const &)",
    "public: __thiscall AutoChainContext::AutoChainContext(struct _CERT_CHAIN_CONTEXT const *)",
    "private: class AutoSecurityDescriptor & __thiscall AutoCleanup::Me(void)",
    "public: void __thiscall CErrorContext::`default constructor closure'(void)",
    "public: __thiscall AutoEnvironmentBlock::~AutoEnvironmentBlock(void)",
    "public: __thiscall AutoCleanup::AutoCleanup(struct _CERT_CONTEXT const *)",
    "public: class ILifeTimeMgmt & __thiscall ILifeTimeMgmt::operator=(class ILifeTimeMgmt const &)",
    "protected: class Locale::Resources * __thiscall ILoader::GetObjectW(void)const",
    "public: virtual unsigned long __thiscall CircularBufferFormatter::PrepareToCommitWithSize(unsigned long)",
    "public: __thiscall AutoMIClass::~AutoMIClass(void)",
    "public: __thiscall AutoImpersonateUser::AutoImpersonateUser(void *)",
    "public: class AutoLibrary & __thiscall AutoCleanup::operator=(struct HINSTANCE__ *)",
    "public: virtual void __thiscall CRequestContext::RecordFailure(unsigned long)",
    "public: void __thiscall IRequestContext::RecordMIFailure(enum _MI_Result,unsigned long)",
    "public: __thiscall AutoFree::~AutoFree(void)",
    "public: __thiscall AutoCleanup::AutoCleanup(struct _CERT_CHAIN_CONTEXT const *)",
    "public: long __thiscall ILifeTimeMgmt::GetRefCount(void)",
    "public: class AutoDeleteVector & __thiscall AutoCleanup,unsigned short *>::operator=(unsigned short *)",
    "public: class EtwCorrelationHelper & __thiscall EtwCorrelationHelper::operator=(class EtwCorrelationHelper const &)",
    "private: class AutoObject & __thiscall AutoCleanup::Me(void)",
    "public: __thiscall AutoCleanup,unsigned char *>::~AutoCleanup,unsigned char *>(void)",
    "public: bool __thiscall ChildLifeTimeManager::IsActive(void)",
    "public: __thiscall ShareLock::ShareLock(class FastLock &)",
    "public: virtual void __thiscall BufferFormatter::SetUpdateMode(enum BufferFormatter::Mode)",
    "public: void __thiscall ChildLifeTimeManager::Shutdown(void)",
    "public: virtual unsigned char const * __thiscall CircularBufferFormatter::GetBuffer(void)const",
    "public: class AutoCertContext & __thiscall AutoCertContext::operator=(struct _CERT_CONTEXT const *)",
    "public: virtual int __thiscall CErrorContext::ProviderFailure(void)const",
    "public: __thiscall AutoCoTaskMemFree::AutoCoTaskMemFree(void)",
    "const IRequestContext::`vftable'",
    "public: __thiscall AutoCleanup::AutoCleanup(void)",
    "public: __thiscall AutoEnvironmentBlock::AutoEnvironmentBlock(void)",
    "public: void __thiscall CWSManResourceNoResourceUri::SetOptionsMustUnderstandValue(int)",
    "private: void __thiscall AutoCleanup,class CWSManSecurityUI *>::ReleasePtr(void)",
    "public: __thiscall AutoBstr::AutoBstr(void)",
    "public: virtual void __thiscall CRequestContext::SetCIM_Error(void)",
    "public: virtual unsigned long __thiscall BufferFormatter::GetCalculationSize(bool)const",
    "public: __thiscall AutoLibrary::~AutoLibrary(void)",
    "public: bool __thiscall ILoader::FreeInstance(class IRequestContext &,bool)"
  ],
  "WsmRes.dll": "No exports",
  "WsmSvc.dll": [
    "WSManCloseSession",
    "private: void __thiscall AutoCleanup,struct _WSMAN_OPTION *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,struct IWbemPathKeyList *>::AutoCleanup,struct IWbemPathKeyList *>(struct IWbemPathKeyList *)",
    "public: virtual void __thiscall CBaseConfigCache::OnChange(enum ConfigChangeSources,unsigned long,enum ConfigChangeSeverityType)",
    "public: __thiscall AutoDelete::AutoDelete(struct _WSMAN_STREAM_ID_SET *)",
    "WSManAckEvents",
    "protected: int __thiscall CWSManResourceNoResourceUri::StringConcatenate(unsigned short * &,unsigned long &,unsigned long,unsigned short *)",
    "public: __thiscall AutoCleanup >,class SafeMap_Iterator *>::AutoCleanup >,class SafeMap_Iterator *>(class SafeMap_Iterator *)",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IWbemContext *>::Me(void)",
    "public: __thiscall AutoLocalFree::~AutoLocalFree(void)",
    "public: unsigned short const * __thiscall Locale::GetString(void)",
    "public: static class CConfigManager * __stdcall CConfigManager::GetFirstConfigManagerForListener(unsigned short const *)",
    "public: __thiscall AutoCleanup::AutoCleanup(struct HINSTANCE__ *)",
    "public: virtual __thiscall CWSManResourceNoResourceUri::~CWSManResourceNoResourceUri(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class XmlReader *>::Me(void)",
    "public: __thiscall AutoCleanup,class TSTRBUFFER *>::~AutoCleanup,class TSTRBUFFER *>(void)",
    "public: unsigned long __thiscall OnHTTPInitialize::GetSuccessCode(void)const",
    "public: bool __thiscall AutoCleanup,struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *>::operator!(void)const",
    "public: enum PacketFormatter::Charset __thiscall PacketFormatter::GetCharset(void)const",
    "public: class AutoDelete > & __thiscall AutoCleanup >,class SafeSet *>::operator=(class SafeSet *)",
    "public: __thiscall AutoRelease::AutoRelease(struct IWbemObjectTextSrc *)",
    "public: class AutoChainContext & __thiscall AutoCleanup::operator=(struct _CERT_CHAIN_CONTEXT const *)",
    "public: __thiscall AutoCleanup,class WSMan::Client::DisconnectOperation *>::~AutoCleanup,class WSMan::Client::DisconnectOperation *>(void)",
    "public: class CWSManGroupPolicyManager * __thiscall AutoCleanup,class CWSManGroupPolicyManager *>::Detach(void)",
    "public: void __thiscall UserRecord::ResetProfileCount(void)",
    "public: class AutoSecurityDescriptor & __thiscall AutoSecurityDescriptor::operator=(void *)",
    "int __stdcall DeleteKey(class IRequestContext *,unsigned short const *,unsigned short const *)",
    "public: class WSMan::Client::ReconnectOperation * __thiscall AutoCleanup,class WSMan::Client::ReconnectOperation *>::operator->(void)",
    "public: __thiscall AutoCleanup,class CredUIDllLoader *>::operator class CredUIDllLoader *(void)",
    "private: void __thiscall AutoCleanup,class WSMan::Client::ConnectShellOperation *>::ReleasePtr(void)",
    "private: class AutoMIInstance & __thiscall AutoCleanup::Me(void)",
    "public: unsigned short const * * __thiscall AutoCleanup,unsigned short const * *>::Detach(void)",
    "FwXmlGetReferenceXmlFromElement",
    "public: long __thiscall TSTRBUFFER::AppendChar(unsigned short)",
    "public: bool __thiscall SafeMap >::Add(struct UserKey const &,class BlockedRecord * const &,class IRequestContext &)",
    "protected: class IpHlpApiDllLoader * __thiscall ILoader::GetObjectW(void)const",
    "public: static class CConfigManager * __stdcall CConfigManager::GetFirstConfigManagerForTable(enum WSMANTableConfigType,unsigned short const *)",
    "public: void __thiscall UserRecord::SetProfileHandle(__int64)",
    "public: void __thiscall SafeMap_Lock >::Release(void)",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetSubscriptionId(void)const",
    "public: int __thiscall CRequestContext::RecordHtmlError(unsigned long,unsigned short const *,unsigned long)",
    "public: __thiscall AutoCleanup,class CCommonConfigSettings *>::operator class CCommonConfigSettings *(void)",
    "int __stdcall StringCchEquals(unsigned short const *,unsigned short const *)",
    "public: virtual unsigned long __thiscall BufferFormatter::PrepareToCommitWithSize(unsigned long)",
    "public: class WSMan::Client::Shell * * __thiscall AutoCleanup,class WSMan::Client::Shell *>::Storage(void)",
    "public: static unsigned long const ExtendedSemantic::Progress",
    "public: __thiscall AutoCleanup,class CShellUriSettings *>::operator class CShellUriSettings *(void)",
    "FwXmlFindAttributeEx",
    "public: virtual class BufferFormatter & __thiscall BufferFormatter::operator<<(class BufferFormatterDataXmlEscape &)",
    "private: class AutoHandle & __thiscall AutoCleanup::Me(void)",
    "public: __thiscall AutoCleanup,class ServiceSoapProcessor *>::AutoCleanup,class ServiceSoapProcessor *>(class ServiceSoapProcessor *)",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IEnumWbemClassObject *>::Me(void)",
    "private: void __thiscall AutoCleanup,class SubscriptionEnumerator *>::ReleasePtr(void)",
    "public: bool __thiscall SafeMap >::Add(class StringKeyCI const &,struct WSManHttpListener::USER_CONTEXT_INFO const &,class IRequestContext &)",
    "private: void __thiscall AutoCleanup,class WSMan::Client::ReconnectOperation *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class TSTRBUFFER *>::AutoCleanup,class TSTRBUFFER *>(void)",
    "private: void __thiscall AutoCleanup,class Locale::Resources *>::ReleasePtr(void)",
    "protected: int __thiscall RBUFFER::ReallocStorage(unsigned int)",
    "public: class CWSManGroupPolicyCache * __thiscall AutoCleanup,class CWSManGroupPolicyCache *>::Detach(void)",
    "FwGetRootElement",
    "public: static int __stdcall CWSManGroupPolicyManager::Shutdown(void)",
    "public: class CCertMapping * const & __thiscall SafeSet_Iterator::operator*(void)const",
    "public: struct IWbemQuery * __thiscall AutoCleanup,struct IWbemQuery *>::operator->(void)const",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(struct IErrorInfo *)",
    "public: class Locale & __thiscall Locale::operator=(class Locale const &)",
    "public: __thiscall AutoCleanup,struct IUnknown *>::AutoCleanup,struct IUnknown *>(void)",
    "public: unsigned short * * __thiscall AutoCleanup,unsigned short * *>::Detach(void)",
    "public: struct IWbemPath * __thiscall AutoCleanup,struct IWbemPath *>::Detach(void)",
    "public: void __thiscall SafeMap_Iterator::LowerBound(class Locale::Key const &)",
    "public: virtual int __thiscall CCommonConfigSettings::AllowClientCertificate(void)const",
    "public: struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE * __thiscall AutoCleanup,struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *>::operator->(void)const",
    "private: virtual int __thiscall CClientConfigCache::InitializeSourcesHelper(class IRequestContext *,int)",
    "private: void __thiscall AutoCleanup,struct _WSMAN_STREAM_ID_SET *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class ShellInfo *>::AutoCleanup,class ShellInfo *>(class ShellInfo *)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class IRequestContext *)",
    "public: struct _MI_Class * __thiscall AutoCleanup::Detach(void)",
    "public: __thiscall AutoCleanup,struct IErrorInfo *>::AutoCleanup,struct IErrorInfo *>(struct IErrorInfo *)",
    "public: class AutoRelease & __thiscall AutoCleanup,class WSMan::Client::Application *>::operator=(class WSMan::Client::Application *)",
    "private: int __thiscall CConfigManager::InitCfgMgr(class WSMANCONFIGTABLE_IDENTITY *,struct HKEY__ *,struct HKEY__ *)",
    "public: int __thiscall CConfigManager::GetString(class IRequestContext *,enum ConfigSetting,unsigned long,unsigned short *,unsigned long *,enum WSManConfigSource *)",
    "private: void __thiscall AutoCleanup >,class Handle *>::ReleasePtr(void)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class CertHash *)",
    "private: class AutoRelease & __thiscall AutoCleanup,class UserRecord *>::Me(void)",
    "public: bool __thiscall AutoCleanup,class TSTRBUFFER *>::operator!(void)const",
    "int __stdcall MakeUrlBinding(unsigned long,unsigned short *,unsigned long *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: class QuotaRecord const * __thiscall UserRecord::GetQuotaRecord(void)const",
    "public: __thiscall CWSManResourceNoResourceUri::CWSManResourceNoResourceUri(int)",
    "public: __thiscall AutoCleanup,unsigned short *>::operator unsigned short * const(void)const",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetAction(void)const",
    "public: virtual class BufferFormatter & __thiscall BufferFormatter::operator<<(class BufferFormatterDataPCWSTR &)",
    "private: void __thiscall AutoCleanup,unsigned short const * *>::ReleasePtr(void)",
    "const PacketParser::`vftable'",
    "public: __thiscall AutoCleanup::operator struct _CERT_CONTEXT const *(void)",
    "private: static class FastLock CConfigManager::s_lock",
    "public: __thiscall AutoCleanup::operator struct _MI_Instance *(void)",
    "public: class GeneralSinkEx * * __thiscall AutoCleanup,class GeneralSinkEx *>::Storage(void)",
    "public: void __thiscall CServiceConfigCache::CServiceWatcher::Discard(void)",
    "public: class RunAsConfiguration * __thiscall AutoCleanup,class RunAsConfiguration *>::operator->(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class WSMan::Client::Command *>::Me(void)",
    "public: __thiscall AutoDeleteVector::AutoDeleteVector(int *)",
    "WSManProvCreate",
    "public: virtual void __thiscall CErrorContext::SetFault(unsigned long,unsigned long,unsigned long,unsigned short const *)",
    "private: int __thiscall CWSManGroupPolicyManager::GetStringInternal(class IRequestContext *,enum WSManGroupPolicySetting,unsigned long,unsigned long,unsigned short *,unsigned long *,enum WSManGroupPolicySettingState *)",
    "public: __thiscall AutoCleanup,class TSTRBUFFER *>::AutoCleanup,class TSTRBUFFER *>(class TSTRBUFFER *)",
    "public: __thiscall AutoDelete > >::AutoDelete > >(void)",
    "public: __thiscall AutoCleanup,class EnumSinkEx *>::AutoCleanup,class EnumSinkEx *>(class EnumSinkEx *)",
    "private: void __thiscall AutoCleanup,class CWSManEPR *>::ReleasePtr(void)",
    "public: virtual unsigned long __thiscall CCommonConfigSettings::GetMaxBatchItems(void)",
    "public: class AutoRelease & __thiscall AutoCleanup,struct IWbemQuery *>::operator=(struct IWbemQuery *)",
    "private: void __thiscall AutoCleanup,class IQueryDASHSMASHInterface *>::ReleasePtr(void)",
    "public: struct _WINRS_RUN_COMMAND_ARG * __thiscall AutoCleanup,struct _WINRS_RUN_COMMAND_ARG *>::operator->(void)const",
    "public: class AutoRelease & __thiscall AutoCleanup,class CServiceConfigCache *>::operator=(class CServiceConfigCache *)",
    "public: __thiscall AutoCleanup,unsigned short const * *>::~AutoCleanup,unsigned short const * *>(void)",
    "public: static void __stdcall WSMan::EventHandler::WriteSoapA(struct _EVENT_DESCRIPTOR const &,char const *,unsigned long)",
    "public: int __thiscall CRequestContext::HasFaultXML(void)const",
    "public: __thiscall AutoCleanup,unsigned short *>::~AutoCleanup,unsigned short *>(void)",
    "public: __thiscall AutoCleanup,class CServiceCommonConfigSettings *>::AutoCleanup,class CServiceCommonConfigSettings *>(class CServiceCommonConfigSettings *)",
    "public: class AutoEnvironmentBlock & __thiscall AutoCleanup::operator=(void *)",
    "int __stdcall StringToDword(unsigned short const *,unsigned long *)",
    "public: __thiscall AutoCleanup,struct IUnknown *>::operator struct IUnknown *(void)",
    "public: __thiscall AutoCleanup,struct IAppHostElement *>::~AutoCleanup,struct IAppHostElement *>(void)",
    "private: void __thiscall WSMan::EventHandler::WriteSoapMessageW_BE(struct _EVENT_DESCRIPTOR const &,unsigned short const *,unsigned long)",
    "public: __thiscall AutoCleanup,struct IAppHostPropertyCollection *>::AutoCleanup,struct IAppHostPropertyCollection *>(struct IAppHostPropertyCollection *)",
    "public: __thiscall AutoCleanup,struct IAppHostConfigException *>::~AutoCleanup,struct IAppHostConfigException *>(void)",
    "public: __thiscall AutoDelete > >::~AutoDelete > >(void)",
    "public: __thiscall AutoCleanup,class WSManHttpListener *>::~AutoCleanup,class WSManHttpListener *>(void)",
    "public: __thiscall AutoDeleteVector::AutoDeleteVector(struct _WINRS_RUN_COMMAND_ARG *)",
    "public: unsigned short const * __thiscall CWSManResourceNoResourceUri::GetFragmentDialect(void)",
    "public: __thiscall AutoCleanup,class ConfigNotification *>::operator class ConfigNotification *(void)",
    "public: bool __thiscall AutoCleanup,struct IWbemContext *>::operator!(void)const",
    "private: void __thiscall AutoCleanup > >,class std::vector > *>::ReleasePtr(void)",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetRequestedDataLocale(void)const",
    "private: virtual void __thiscall CRequestContext::SetFault(unsigned long,unsigned long,unsigned long,unsigned short const *)",
    "public: __thiscall AutoCleanup,class MachineName *>::~AutoCleanup,class MachineName *>(void)",
    "public: virtual unsigned long __thiscall UserRecord::AuthzComplete(void *,void *,enum UserAuthzRecord::AdministratorType,unsigned long,unsigned short const *)",
    "public: class AutoDeleteVector & __thiscall AutoDeleteVector::operator=(unsigned short * *)",
    "private: virtual class CCommonConfigSettings * __thiscall CServiceConfigCache::ReadDefaultSettings(class IRequestContext *)",
    "public: class AutoRegKey & __thiscall AutoRegKey::operator=(struct HKEY__ *)",
    "public: virtual unsigned long __stdcall CWSManSecurityUI::AddRef(void)",
    "private: void __thiscall AutoCleanup >,class SafeSet *>::ReleasePtr(void)",
    "public: void __thiscall CServiceConfigCache::ChangeLogging(enum ErrorLogging)",
    "public: bool __thiscall SafeSet::Add(class CShellUriSettings * const &,class IRequestContext &)",
    "public: __thiscall AutoCleanup,struct IEnumWbemClassObject *>::operator struct IEnumWbemClassObject * const(void)const",
    "protected: virtual void __thiscall CBaseConfigCache::PostError(unsigned long)",
    "WSManEnumeratorObjectCount",
    "public: __thiscall AutoCleanup,class EnumSinkEx *>::AutoCleanup,class EnumSinkEx *>(void)",
    "public: bool __thiscall SafeMap >::Add(void * const &,struct Empty const &,class IRequestContext &)",
    "public: __thiscall CWSManCriticalSection::~CWSManCriticalSection(void)",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetBookmarkXml(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::ProxySelection *>::~AutoCleanup,class WSMan::Client::ProxySelection *>(void)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(struct IWbemQuery *)",
    "public: class ChildLifeTimeManager & __thiscall ChildLifeTimeManager::operator=(class ChildLifeTimeManager const &)",
    "private: class AutoRelease & __thiscall AutoCleanup,class IISConfigSettings *>::Me(void)",
    "public: __thiscall SafeMap >::~SafeMap >(void)",
    "private: void __thiscall AutoCleanup,class CRequestContext *>::ReleasePtr(void)",
    "public: __thiscall AutoRelease::AutoRelease(class WSManHttpListener *)",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetSourceSubscriptionId(void)const",
    "public: bool __thiscall SafeMap >::Remove(class CListenerOperation * const &)",
    "public: __thiscall AutoCleanup,class CConfigChangeSource *>::AutoCleanup,class CConfigChangeSource *>(class CConfigChangeSource *)",
    "public: bool __thiscall AutoCleanup >,class SafeSet *>::operator!(void)const",
    "WSManRunShellCommandEx",
    "private: void __thiscall AutoCleanup,unsigned char *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,unsigned short *>::operator unsigned short *(void)",
    "public: void * * __thiscall AutoCleanup::Storage(void)",
    "private: void __thiscall AutoCleanup,struct IAppHostProperty *>::ReleasePtr(void)",
    "public: __thiscall AutoRelease::AutoRelease(struct IWbemLocator *)",
    "public: struct IWbemQualifierSet * __thiscall AutoCleanup,struct IWbemQualifierSet *>::operator->(void)const",
    "private: void __thiscall AutoCleanup,class CRemoteSession *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,struct CWSManIPFilter::IPRange *>::operator struct CWSManIPFilter::IPRange *(void)",
    "public: virtual __thiscall CWSManResource::~CWSManResource(void)",
    "public: struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE * __thiscall AutoCleanup,struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *>::Detach(void)",
    "public: virtual int __thiscall CErrorContext::RecordSoapError(unsigned long,unsigned short const *)",
    "public: __thiscall OnHTTPInitialize::OnHTTPInitialize(void)",
    "public: unsigned long __thiscall CWSManCriticalSectionWithConditionVar::WaitForConditionVar(unsigned long)",
    "private: void __thiscall AutoCleanup,struct _WINRS_RUN_COMMAND_ARG *>::ReleasePtr(void)",
    "private: int __thiscall CWSManSecurityUI::CreateRenderingInformation(class IRequestContext *)",
    "public: class AutoDelete & __thiscall AutoCleanup,class WSMANCONFIGTABLE_IDENTITY *>::operator=(class WSMANCONFIGTABLE_IDENTITY *)",
    "public: class AutoDelete & __thiscall AutoCleanup,class CServiceConfigCache::CServiceWatcher *>::operator=(class CServiceConfigCache::CServiceWatcher *)",
    "public: void __thiscall CircularBufferFormatter::SetMaxEnvelopeSize(unsigned long)",
    "public: virtual int __thiscall CWSManEPR::IsEPR(void)",
    "public: struct IWbemClassObject * __thiscall AutoCleanup,struct IWbemClassObject *>::operator->(void)const",
    "public: __thiscall AutoCleanup,struct IWbemClassObject *>::AutoCleanup,struct IWbemClassObject *>(void)",
    "public: __thiscall AutoDelete::AutoDelete(class WSMan::EventHandler *)",
    "protected: class WSMan::EventHandler * __thiscall ILoader::GetObjectW(void)const",
    "protected: int __thiscall ConfigRegistry::CheckSharedSSLConfiguration(class IRequestContext *,unsigned short const *,unsigned short const *,int,int *)",
    "public: class WSMan::Client::Command * __thiscall AutoCleanup,class WSMan::Client::Command *>::operator->(void)",
    "private: class AutoLibrary & __thiscall AutoCleanup::Me(void)",
    "public: __thiscall AutoCleanup,struct IAppHostChildElementCollection *>::AutoCleanup,struct IAppHostChildElementCollection *>(struct IAppHostChildElementCollection *)",
    "private: static class FastLock CServiceConfigCache::s_mapLock",
    "public: static unsigned long __stdcall CClientConfigCache::GetCacheCount(void)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(struct IClientSecurity *)",
    "public: class InboundRequestDetails * __thiscall AutoCleanup,class InboundRequestDetails *>::operator->(void)",
    "public: __thiscall AutoCleanup,struct IUnknown *>::operator struct IUnknown * const(void)const",
    "public: class IWSManGroupPolicyPublisher & __thiscall IWSManGroupPolicyPublisher::operator=(class IWSManGroupPolicyPublisher const &)",
    "public: __thiscall AutoCleanup,class CRequestContext *>::~AutoCleanup,class CRequestContext *>(void)",
    "public: class AutoDelete & __thiscall AutoCleanup,char *>::operator=(char *)",
    "public: __thiscall AutoCleanup,class WSMan::Client::ReconnectOperation *>::operator class WSMan::Client::ReconnectOperation *(void)",
    "public: __thiscall AutoDelete::AutoDelete(unsigned short *)",
    "public: static void __stdcall EventLog::Error(unsigned long,unsigned short,unsigned short const * *)",
    "public: bool __thiscall SimpleQueue::empty(void)const",
    "protected: virtual int __thiscall CBaseConfigCache::InitializeSourcesHelper(class IRequestContext *,int)",
    "public: unsigned short * * __thiscall AutoCleanup,unsigned short * *>::operator->(void)",
    "public: class UserAuthzRecord & __thiscall UserAuthzRecord::operator=(class UserAuthzRecord const &)",
    "private: class AutoRelease & __thiscall AutoCleanup,class HostMappingTable *>::Me(void)",
    "public: class CSecurity::NetworkServiceSid * __thiscall AutoCleanup,class CSecurity::NetworkServiceSid *>::Detach(void)",
    "public: unsigned short * __thiscall AutoCleanup,unsigned short *>::operator->(void)const",
    "public: __thiscall AutoCleanup,struct _CONFIG_UPDATE *>::AutoCleanup,struct _CONFIG_UPDATE *>(struct _CONFIG_UPDATE *)",
    "protected: int __thiscall ConfigRegistry::Init(void)",
    "public: unsigned short const * __thiscall PacketParser::ReferenceParameters::GetReferenceProperties(void)const",
    "public: __thiscall AutoCleanup,unsigned short const * *>::operator unsigned short const * * const(void)const",
    "public: class WmiEnumContext * __thiscall AutoCleanup,class WmiEnumContext *>::operator->(void)const",
    "public: static unsigned long const ExtendedSemantic::NoSemantics",
    "private: class AutoRelease & __thiscall AutoCleanup,class WSMan::Client::CreateShellOperation *>::Me(void)",
    "public: void __thiscall PacketParser::PacketElement::PutOverrideValue(unsigned short const *)",
    "public: __thiscall AutoRelease::AutoRelease(class CConfigManager *)",
    "public: struct _GUID & __thiscall PacketParser::GetCorrelationId(void)",
    "public: bool __thiscall AutoCleanup,struct IWbemServices *>::operator!(void)const",
    "public: __thiscall AutoDeleteVector::AutoDeleteVector(void *)",
    "public: bool __thiscall SafeMap >::Add(unsigned __int64 const &,class RobustConnectionBuffer::SendPacketArgs * const &,class IRequestContext &)",
    "private: class AutoDelete > & __thiscall AutoCleanup >,class SafeSet_Iterator *>::Me(void)",
    "public: enum PacketFormatter::Charset __thiscall PacketFormatter::GetBomIndex(void)const",
    "public: static void __stdcall EventLog::Error(unsigned long)",
    "public: __thiscall AutoCleanup,unsigned short const * *>::AutoCleanup,unsigned short const * *>(unsigned short const * *)",
    "private: void __thiscall AutoCleanup,class CClientConfigCache *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::DeleteShellOperation *>::~AutoCleanup,class WSMan::Client::DeleteShellOperation *>(void)",
    "public: long __thiscall SBUFFER::Append(class SBUFFER *)",
    "public: virtual bool __thiscall SafeMap >::Initialize(class IRequestContext &)",
    "private: int __thiscall PacketParser::ParseResourceUri(class IRequestContext *,struct _FWXML_ELEMENT *,int)",
    "private: class AutoCertContext & __thiscall AutoCleanup::Me(void)",
    "private: class AutoDelete > > & __thiscall AutoCleanup > >,class std::set > *>::Me(void)",
    "public: struct FWXML_DOCUMENT * __thiscall PacketParser::GetXmlDoc(void)",
    "private: void __thiscall AutoCleanup,class CCommonConfigSettings *>::ReleasePtr(void)",
    "public: class AutoCoTaskMemFree & __thiscall AutoCoTaskMemFree::operator=(void *)",
    "public: virtual __thiscall EtwCorrelationHelper::~EtwCorrelationHelper(void)",
    "public: __thiscall AutoCleanup,class PacketCreator *>::AutoCleanup,class PacketCreator *>(class PacketCreator *)",
    "public: __thiscall AutoLibrary::AutoLibrary(void)",
    "public: class WSMan::Client::DeleteShellOperation * __thiscall AutoCleanup,class WSMan::Client::DeleteShellOperation *>::operator->(void)",
    "public: __thiscall AutoRelease::AutoRelease(class WSMan::Client::SignalOperation *)",
    "public: static class CWSManResource * __stdcall CWSManResource::Parse(class IRequestContext *,unsigned short const *,int)",
    "public: virtual __thiscall CCommonConfigSettings::~CCommonConfigSettings(void)",
    "WSManPluginShutdown",
    "public: class WSMan::Client::SessionOptions::OptionValue * & __thiscall SafeMap_Iterator::operator*(void)const",
    "public: class AutoCoTaskMemFree & __thiscall AutoCleanup::operator=(void *)",
    "private: class AutoRelease & __thiscall AutoCleanup,class IRequestContext *>::Me(void)",
    "WSManPluginAuthzUserComplete",
    "public: bool __thiscall SafeMap >::Add(struct PluginKey const &,unsigned long const &,class IRequestContext &)",
    "public: __thiscall AutoCleanup,struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *>::~AutoCleanup,struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *>(void)",
    "public: bool __thiscall SafeMap >::Add(class CShellUriSettings * const &,struct Empty const &,class IRequestContext &)",
    "public: __thiscall AutoCleanup,struct IAppHostElementCollection *>::AutoCleanup,struct IAppHostElementCollection *>(struct IAppHostElementCollection *)",
    "private: void __thiscall AutoCleanup,class CWSManGroupPolicyCache *>::ReleasePtr(void)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class PacketParser *)",
    "public: __thiscall AutoCleanup,class ExpiredOperationIdRecord *>::AutoCleanup,class ExpiredOperationIdRecord *>(class ExpiredOperationIdRecord *)",
    "public: __thiscall AutoDelete::AutoDelete(class EnumSinkEx *)",
    "private: long __thiscall CWSManGroupPolicyManager::QueryRegValue(class IRequestContext *,struct _WSMAN_POLICY_INFO const *,unsigned long *,unsigned long,unsigned char *,unsigned long *)",
    "public: static class CWinRSPluginConfigCache * __stdcall CWinRSPluginConfigCache::GetConfigCache(class IRequestContext *,enum ErrorLogging,int)",
    "public: __thiscall AutoCleanup::AutoCleanup(struct _MI_Instance *)",
    "public: __thiscall AutoCleanup,class CWinRSPluginConfigSettings *>::AutoCleanup,class CWinRSPluginConfigSettings *>(class CWinRSPluginConfigSettings *)",
    "public: class AutoDeleteVector & __thiscall AutoDeleteVector::operator=(struct _WINRS_RUN_COMMAND_ARG *)",
    "public: class AutoRelease & __thiscall AutoCleanup,class CWinRSPluginConfigSettings *>::operator=(class CWinRSPluginConfigSettings *)",
    "public: bool __thiscall AutoCleanup,class CWSManEPR *>::operator!(void)const",
    "public: struct IWbemQualifierSet * __thiscall AutoCleanup,struct IWbemQualifierSet *>::operator->(void)",
    "public: struct IAppHostConfigException * __thiscall AutoCleanup,struct IAppHostConfigException *>::operator->(void)",
    "private: void __thiscall AutoCleanup >,class SafeSet_Iterator *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class CredUIDllLoader *>::~AutoCleanup,class CredUIDllLoader *>(void)",
    "public: static void __stdcall WSMan::EventHandler::EnsureActivityIdOnThread(void)",
    "public: static class CWSManResource * __stdcall CWSManResource::ParseResourceLocator(class IRequestContext *,struct _WSMAN_RESOURCE_LOCATOR *)",
    "public: __thiscall AutoReleaseEx::AutoReleaseEx(class WSMan::Client::Shell *)",
    "public: long __thiscall TSTRBUFFER::AppendXmlEndElemWithPrefix(unsigned short const *,unsigned short const *)",
    "private: class AutoDelete & __thiscall AutoCleanup,class IpHlpApiDllLoader *>::Me(void)",
    "public: __thiscall AutoRelease::AutoRelease(struct IWbemQuery *)",
    "public: int __thiscall CWSManCriticalSection::DoesThreadOwnLock(void)",
    "protected: int __thiscall ConfigRegistry::ClearRegistryKeys(class IRequestContext *)",
    "public: class ExtendedSemantic & __thiscall ExtendedSemantic::operator=(class ExtendedSemantic const &)",
    "int __stdcall StringToDword(char const *,unsigned long *)",
    "public: class AutoLocalFree & __thiscall AutoCleanup::operator=(void *)",
    "private: class AutoImpersonateUser & __thiscall AutoCleanup::Me(void)",
    "public: struct _WSMAN_RESOURCE_LOCATOR * __thiscall CWSManResource::GetLocator(void)",
    "public: void __thiscall FastLock::AcquireExclusive(void)",
    "public: class CListenerReceive * __thiscall AutoCleanup,class CListenerReceive *>::operator->(void)",
    "public: class AutoImpersonateUser & __thiscall AutoImpersonateUser::operator=(void *)",
    "public: class PacketParser::SessionId & __thiscall PacketParser::SessionId::operator=(class PacketParser::SessionId const &)",
    "private: static class AutoRelease CWinRSPluginConfigCache::s_cacheMap",
    "const ILifeTimeMgmt::`vftable'",
    "public: bool __thiscall UserRecord::IsInteractive(void)const",
    "public: class PacketParser::ReferenceParameters const & __thiscall PacketParser::GetReplyToXml(void)const",
    "public: __thiscall AutoCleanup,class IPCSoapProcessor *>::~AutoCleanup,class IPCSoapProcessor *>(void)",
    "public: __thiscall AutoCleanup,class GeneralSinkEx *>::~AutoCleanup,class GeneralSinkEx *>(void)",
    "public: __thiscall AutoRelease::AutoRelease(class CRequestContext *)",
    "public: __thiscall AutoRelease::AutoRelease(class WSMan::Client::ReconnectOperation *)",
    "public: class AutoRelease & __thiscall AutoCleanup,class ISubscription *>::operator=(class ISubscription *)",
    "const CWSManResourceNoResourceUri::`vftable'",
    "public: __thiscall SBUFFER::SBUFFER(void)",
    "public: struct IErrorInfo * * __thiscall AutoCleanup,struct IErrorInfo *>::Storage(void)",
    "public: __thiscall PacketParser::~PacketParser(void)",
    "private: __thiscall CServiceConfigCache::CServiceWatcher::CServiceWatcher(class CServiceConfigCache *,class IServiceConfigObserver *)",
    "public: virtual void __cdecl CRequestContext::InternalFailure(unsigned long,...)",
    "public: class User32DllLoader * __thiscall AutoCleanup,class User32DllLoader *>::Detach(void)",
    "public: int __thiscall PacketParser::PacketElement::IsMustUnderstand(void)const",
    "public: void __thiscall SafeMap_Iterator::Reset(void)",
    "public: bool __thiscall SafeMap >::Remove(class StringKeyCI const &)",
    "public: __thiscall AutoDeleteVector::~AutoDeleteVector(void)",
    "FwXmlCompareElementNameEx",
    "FwXmlParserCreate",
    "private: long __thiscall CConfigManager::QueryRegValue(struct _CONFIG_INFO *,unsigned long *,unsigned long,unsigned char *,unsigned long *)",
    "public: __thiscall AutoCleanup,struct IWbemQualifierSet *>::AutoCleanup,struct IWbemQualifierSet *>(void)",
    "public: struct IWbemPathKeyList * __thiscall AutoCleanup,struct IWbemPathKeyList *>::operator->(void)",
    "public: __thiscall AutoRelease::AutoRelease(class WSMan::Client::ConnectShellOperation *)",
    "FwXmlGetChild",
    "private: class AutoRelease & __thiscall AutoCleanup,class CWSManEPR *>::Me(void)",
    "public: class AutoDelete & __thiscall AutoCleanup,class EnumSinkEx *>::operator=(class EnumSinkEx *)",
    "public: void __thiscall PacketParser::FreeXmlStructure(void)",
    "int __stdcall StringCchEqualsCI(unsigned short const *,unsigned short const *)",
    "public: union _LARGE_INTEGER const __thiscall SimpleQueue::back(void)const",
    "private: int __thiscall XmlReader::Parse(class IRequestContext *)",
    "public: __thiscall AutoCleanup,struct IWbemObjectTextSrc *>::~AutoCleanup,struct IWbemObjectTextSrc *>(void)",
    "private: bool __thiscall WSMan::EventHandler::EventProviderEnabled(void)",
    "private: class AutoEnvironmentBlock & __thiscall AutoCleanup::Me(void)",
    "private: int __thiscall CRequestContext::HasHtmlError(void)const",
    "public: __thiscall AutoRelease::AutoRelease(class CClientConfigSettings *)",
    "public: virtual class BufferFormatter & __thiscall BufferFormatter::operator<<(unsigned long)",
    "public: __thiscall AutoCleanup,class CWSManGroupPolicyManager *>::AutoCleanup,class CWSManGroupPolicyManager *>(class CWSManGroupPolicyManager *)",
    "public: __thiscall AutoCleanup,struct IUnknown *>::~AutoCleanup,struct IUnknown *>(void)",
    "RegisterModule",
    "public: __thiscall AutoCleanup,class ConfigUpdate *>::~AutoCleanup,class ConfigUpdate *>(void)",
    "public: __thiscall AutoCleanup >,class SafeSet *>::AutoCleanup >,class SafeSet *>(class SafeSet *)",
    "public: __thiscall AutoCleanup > >,class std::set > *>::operator class std::set > *(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class MachineName *>::Me(void)",
    "public: __thiscall AutoCleanup,struct IWbemClassObject *>::~AutoCleanup,struct IWbemClassObject *>(void)",
    "public: virtual int __thiscall CCommonConfigSettings::AllowUnencrypted(void)const",
    "public: __thiscall AutoCleanup >,class SafeSet_Iterator *>::AutoCleanup >,class SafeSet_Iterator *>(class SafeSet_Iterator *)",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IAppHostElementCollection *>::Me(void)",
    "public: static class CConfigManager * __stdcall CConfigManager::GetFirstConfigManagerForShellUri(unsigned short const *)",
    "public: __thiscall XmlReader::~XmlReader(void)",
    "public: struct IAppHostElementCollection * * __thiscall AutoCleanup,struct IAppHostElementCollection *>::Storage(void)",
    "public: __thiscall AutoDelete::AutoDelete(class CCertMapping *)",
    "protected: static int __stdcall ConfigRegistry::DeleteSubkeys(class IRequestContext *,struct HKEY__ *,unsigned short const *,int,int)",
    "public: __thiscall AutoCleanup,class IQueryDASHSMASHInterface *>::operator class IQueryDASHSMASHInterface *(void)",
    "public: int __thiscall PacketParser::ValidateHeaders(class IRequestContext *,unsigned long)",
    "public: virtual unsigned short * * __thiscall PacketParser::GetBufferPtr(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CRemoteOperation *>::Me(void)",
    "private: int __thiscall PacketParser::ParseActivityId(class IRequestContext *,struct _FWXML_ELEMENT *,int)",
    "public: unsigned short const * * __thiscall CWSManResourceNoResourceUri::GetOptionTypes(void)",
    "private: void __thiscall AutoCleanup,class IRequestContext *>::ReleasePtr(void)",
    "const SafeMap >::`vftable'",
    "public: class AutoDelete & __thiscall AutoCleanup,class GeneralSinkEx *>::operator=(class GeneralSinkEx *)",
    "public: class ExpiredOperationIdRecord * __thiscall AutoCleanup,class ExpiredOperationIdRecord *>::operator->(void)",
    "WSManDisconnectShell",
    "public: class MachineName * __thiscall AutoCleanup,class MachineName *>::Detach(void)",
    "public: __thiscall AutoCleanup,class IChannelObserverFactory *>::AutoCleanup,class IChannelObserverFactory *>(class IChannelObserverFactory *)",
    "FwXmlGetSimpleContent",
    "public: __thiscall AutoCleanup,unsigned short *>::AutoCleanup,unsigned short *>(void)",
    "public: class AutoRelease & __thiscall AutoCleanup,struct IWbemLocator *>::operator=(struct IWbemLocator *)",
    "public: class Packet * __thiscall AutoCleanup,class Packet *>::Detach(void)",
    "public: __thiscall AutoCleanup::AutoCleanup(void *)",
    "private: bool __thiscall WSMan::EventHandler::EventEnabled(struct _EVENT_DESCRIPTOR const &)",
    "public: __thiscall AutoCleanup,class CSecurity::NetworkServiceSid *>::operator class CSecurity::NetworkServiceSid *(void)",
    "public: class AutoSecurityDescriptor & __thiscall AutoCleanup::operator=(void *)",
    "public: enum PacketFormatter::Charset __thiscall BufferFormatter::GetFormatterMode(void)",
    "public: struct _FWXML_ELEMENT * __thiscall XmlReader::GetRoot(void)",
    "const CWinRSPluginConfigCache::`vftable'{for `IConfigChangeObserver'}",
    "FwXmlGetSimpleContentEx",
    "public: __thiscall AutoCleanup,class CListenerSettings *>::~AutoCleanup,class CListenerSettings *>(void)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class GeneralSinkEx *)",
    "private: void __thiscall AutoCleanup,class WSMANCONFIGTABLE_IDENTITY *>::ReleasePtr(void)",
    "public: virtual unsigned long __thiscall CCommonConfigSettings::GetMaxBatchSize(void)",
    "public: static void * __stdcall WSManMemory::ReAlloc(void *,unsigned int,int,enum _NitsFaultMode)",
    "private: unsigned long __thiscall CRequestContext::DecodeFaultObjectProviderMessage(struct _FWXML_ELEMENT *,unsigned short const * &)",
    "public: bool __thiscall AutoCleanup,unsigned char *>::operator!(void)const",
    "WSManRunShellCommand",
    "public: unsigned short const * __thiscall TSTRBUFFER::Next(unsigned short const *)const",
    "public: struct IWbemPath * * __thiscall AutoCleanup,struct IWbemPath *>::Storage(void)",
    "public: class WSMan::Client::SessionOptions::OptionValue * __thiscall AutoCleanup,class WSMan::Client::SessionOptions::OptionValue *>::operator->(void)",
    "public: virtual unsigned short * __thiscall CRequestContext::GetExtendedErrorString(void)",
    "public: virtual void __thiscall CRequestContext::SetExtendedErrorString(unsigned short *)",
    "public: __thiscall AutoCleanup >,class Handle *>::operator class Handle *(void)",
    "public: __thiscall AutoCleanup,class CWSManGroupPolicyCache *>::~AutoCleanup,class CWSManGroupPolicyCache *>(void)",
    "private: int __thiscall CConfigManager::RetrieveTableIdentity(struct HKEY__ *,class WSMANCONFIGTABLE_IDENTITY *)",
    "public: __thiscall AutoRelease::AutoRelease(class CCommonConfigSettings *)",
    "public: int __thiscall CWSManResourceNoResourceUri::GetOptionsMustUnderstandValue(void)",
    "public: __thiscall AutoCleanup,class CRequestContext *>::operator class CRequestContext *(void)",
    "public: __thiscall IConfigChangeObserver::IConfigChangeObserver(void)",
    "public: __thiscall AutoDelete::AutoDelete(class IQueryDASHSMASHInterface *)",
    "private: class AutoDelete & __thiscall AutoCleanup,class WSMan::Client::SessionOptions::OptionValue *>::Me(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CListenerShell *>::Me(void)",
    "private: void __thiscall AutoCleanup,class CConfigManager *>::ReleasePtr(void)",
    "public: struct UserKey __thiscall UserRecord::GetKey(void)const",
    "public: void __thiscall PacketParser::PacketElement::PutValue(unsigned __int64,int)",
    "public: static class CConfigManager * __stdcall CConfigManager::GetConfigManagerForListener(class LISTENER_IDENTITY *,class IRequestContext *)",
    "public: __thiscall AutoCleanup,class CCertMapping *>::~AutoCleanup,class CCertMapping *>(void)",
    "public: __thiscall AutoCleanup,class RobustConnectionBuffer::SendPacketArgs *>::~AutoCleanup,class RobustConnectionBuffer::SendPacketArgs *>(void)",
    "public: class PacketParser::Fragment const & __thiscall PacketParser::GetFragment(void)const",
    "public: static unsigned long const ExtendedSemantic::Verbose",
    "public: unsigned __int64 __thiscall PacketParser::PacketElement::GetValue(void)const",
    "private: class AutoRelease & __thiscall AutoCleanup,class ShellInfo *>::Me(void)",
    "public: __thiscall AutoCleanup,class CServiceConfigCache *>::operator class CServiceConfigCache *(void)",
    "public: __thiscall PacketParser::NotUnderstandSoapHeader::NotUnderstandSoapHeader(void)",
    "public: class Locale & __thiscall CRequestContext::GetLocale(void)",
    "public: int __thiscall CWSManResourceNoResourceUri::HasOption(unsigned short const *)",
    "public: class AutoBstrNoAlloc & __thiscall AutoCleanup::operator=(unsigned short *)",
    "public: long __thiscall TSTRBUFFER::AppendXmlElemWithNamespace(unsigned short const *,unsigned short const *,unsigned short const *,int,unsigned long,struct _XML_ATTRIB *)",
    "public: class CWSManResource * __thiscall AutoCleanup,class CWSManResource *>::operator->(void)",
    "public: __thiscall AutoCleanup,class CWSManSession *>::~AutoCleanup,class CWSManSession *>(void)",
    "private: void __thiscall AutoCleanup,struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *>::ReleasePtr(void)",
    "public: class ServiceSoapProcessor * __thiscall AutoCleanup,class ServiceSoapProcessor *>::Detach(void)",
    "public: __thiscall AutoRelease::AutoRelease(struct IWbemPathKeyList *)",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IErrorInfo *>::Me(void)",
    "public: __thiscall AutoCleanup,class BlockedRecord *>::AutoCleanup,class BlockedRecord *>(class BlockedRecord *)",
    "private: static class AutoRelease CConfigManager::s_config",
    "public: class PacketCreator * * __thiscall AutoCleanup,class PacketCreator *>::Storage(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CWSManObject *>::Me(void)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class CServiceCommonConfigSettings *)",
    "public: class AutoDelete & __thiscall AutoCleanup,class XmlReader *>::operator=(class XmlReader *)",
    "public: class ConfigUpdate * __thiscall AutoCleanup,class ConfigUpdate *>::operator->(void)",
    "public: __thiscall AutoCleanup,struct IWbemPath *>::operator struct IWbemPath * const(void)const",
    "private: void __thiscall AutoCleanup,struct IWbemPathKeyList *>::ReleasePtr(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IWbemClassObject *>::Me(void)",
    "WSManDeliverEvent",
    "public: void __thiscall CErrorContext::SetExtraLogInfo(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: class AutoDelete & __thiscall AutoCleanup,class CObserverConfigChangeErrors *>::operator=(class CObserverConfigChangeErrors *)",
    "public: class AutoDeleteVector & __thiscall AutoDeleteVector::operator=(unsigned short *)",
    "public: __thiscall AutoCleanup,struct IClientSecurity *>::AutoCleanup,struct IClientSecurity *>(void)",
    "public: void __thiscall SafeMap >::Clear(void)",
    "public: virtual int __thiscall CErrorContext::Passed(void)const",
    "public: bool __thiscall Locale::UsingDefaultLCID(void)",
    "public: __thiscall AutoCleanup > >,class std::vector > *>::AutoCleanup > >,class std::vector > *>(class std::vector > *)",
    "private: class AutoDelete & __thiscall AutoCleanup,class EnumSinkEx *>::Me(void)",
    "public: enum UserAuthzRecord::AdministratorType __thiscall UserRecord::GetUserAdministratorType(void)const",
    "void __stdcall PrintReleaseTrace(void *,long)",
    "public: class AutoRelease & __thiscall AutoCleanup,struct IWbemQualifierSet *>::operator=(struct IWbemQualifierSet *)",
    "public: __thiscall AutoCleanup,class CWSManResource *>::~AutoCleanup,class CWSManResource *>(void)",
    "public: bool __thiscall AutoCleanup,class CWinRSPluginConfigCache *>::operator!(void)const",
    "public: __thiscall LoaderSerializer::~LoaderSerializer(void)",
    "public: class CWSManGroupPolicyManager * __thiscall AutoCleanup,class CWSManGroupPolicyManager *>::operator->(void)",
    "protected: void __thiscall SafeMap_Iterator::SkipOrphans(void)",
    "public: struct IAppHostProperty * * __thiscall AutoCleanup,struct IAppHostProperty *>::Storage(void)",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetSelectorSetXml(void)",
    "public: virtual void __thiscall CircularBufferFormatter::Reset(void)",
    "protected: __thiscall IRequestContext::IRequestContext(void)",
    "public: void __thiscall PacketParser::OverrideMaxEnvelopeSize(unsigned long)",
    "public: __thiscall AutoCleanup,struct IAppHostProperty *>::~AutoCleanup,struct IAppHostProperty *>(void)",
    "public: __thiscall AutoCleanup,struct IWbemClassObject *>::AutoCleanup,struct IWbemClassObject *>(struct IWbemClassObject *)",
    "public: __thiscall AutoRelease::AutoRelease(struct IWbemPath *)",
    "public: class AutoDeleteVector & __thiscall AutoCleanup,unsigned char *>::operator=(unsigned char *)",
    "public: __thiscall AutoCleanup,struct IWbemContext *>::AutoCleanup,struct IWbemContext *>(struct IWbemContext *)",
    "private: class AutoDelete & __thiscall AutoCleanup,class WSManMemCryptManager *>::Me(void)",
    "public: class CRequestContext * __thiscall AutoCleanup,class CRequestContext *>::operator->(void)",
    "private: int __thiscall CConfigManager::InitCfgMgr(class WSMANCONFIGTABLE_IDENTITY *)",
    "private: int __thiscall PacketParser::ParseHeaders(class CRequestContext *,class CServiceCommonConfigSettings *)",
    "public: struct IAppHostAdminManager * __thiscall AutoCleanup,struct IAppHostAdminManager *>::operator->(void)",
    "public: __thiscall AutoCleanup,struct IEnumWbemClassObject *>::operator struct IEnumWbemClassObject *(void)",
    "private: int __thiscall CWSManResource::StoreData(class IRequestContext *,unsigned short const *,unsigned short const *,unsigned short const *,struct _WSMAN_SELECTOR_SET *,struct _WSMAN_OPTION_SET *)",
    "public: class AutoHandle & __thiscall AutoCleanup::operator=(void *)",
    "public: void * __thiscall UserRecord::GetImpersonationToken(void)",
    "private: void __thiscall AutoCleanup,class CListenerReceive *>::ReleasePtr(void)",
    "public: struct IWbemQualifierSet * * __thiscall AutoCleanup,struct IWbemQualifierSet *>::Storage(void)",
    "public: __int64 __thiscall UserRecord::GetProfileHandle(void)",
    "public: __thiscall RBUFFER::RBUFFER(unsigned char *,unsigned int)",
    "public: __thiscall AutoRelease::AutoRelease(class CRemoteSession *)",
    "public: bool __thiscall AutoCleanup,struct IUnknown *>::operator!(void)const",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetLocale(void)const",
    "public: struct IAppHostConfigException * * __thiscall AutoCleanup,struct IAppHostConfigException *>::Storage(void)",
    "public: unsigned short const * __thiscall CWSManResource::GetOriginalUri(void)",
    "FwXmlGetBooleanValue",
    "public: __thiscall AutoDelete::AutoDelete(class CSecurity::AdminSid *)",
    "public: struct IWbemObjectTextSrc * __thiscall AutoCleanup,struct IWbemObjectTextSrc *>::Detach(void)",
    "WSManPluginGetConfiguration",
    "public: static void __stdcall EventLog::Warning(unsigned long,unsigned short,unsigned short const * *)",
    "public: __thiscall LoaderSerializer::LoaderSerializer(bool (__thiscall WSMan::EventHandler::*)(class IRequestContext &),bool (__thiscall WSMan::EventHandler::*)(class IRequestContext &))",
    "public: __thiscall AutoBstrNoAlloc::AutoBstrNoAlloc(void)",
    "private: void __thiscall AutoCleanup,class CRemoteOperation *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class PacketCreator *>::~AutoCleanup,class PacketCreator *>(void)",
    "public: static void __stdcall WSManMemory::Free(void *,int)",
    "public: long __thiscall TSTRBUFFER::SetExactCharSize(unsigned int)",
    "public: __thiscall SafeSet_Iterator::~SafeSet_Iterator(void)",
    "public: __thiscall AutoCleanup,class CWinRSPluginConfigCache *>::AutoCleanup,class CWinRSPluginConfigCache *>(class CWinRSPluginConfigCache *)",
    "FwXmlParsePrefixedXML",
    "public: __thiscall AutoCleanup,class WSMan::EventHandler *>::~AutoCleanup,class WSMan::EventHandler *>(void)",
    "public: __thiscall AutoCleanup,struct IAppHostElement *>::operator struct IAppHostElement *(void)",
    "public: struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE * __thiscall AutoCleanup,struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *>::operator->(void)",
    "public: static void __stdcall CClientConfigCache::EnsureNoActiveCaches(void)",
    "public: __thiscall AutoCleanup,class UserRecord *>::~AutoCleanup,class UserRecord *>(void)",
    "public: __thiscall AutoCleanup,class WSManMemCryptManager *>::AutoCleanup,class WSManMemCryptManager *>(class WSManMemCryptManager *)",
    "public: virtual void __thiscall CErrorContext::Reset(int)",
    "public: __thiscall PacketParser::MessageId::~MessageId(void)",
    "public: __thiscall AutoCleanup,class CShellUriSettings *>::AutoCleanup,class CShellUriSettings *>(class CShellUriSettings *)",
    "WSManCloseSessionHandle",
    "public: class CListenerSettings * __thiscall AutoCleanup,class CListenerSettings *>::Detach(void)",
    "public: struct CWSManIPFilter::IPRange * __thiscall AutoCleanup,struct CWSManIPFilter::IPRange *>::Detach(void)",
    "public: unsigned short const * __thiscall CWSManResourceNoResourceUri::GetKeyValue(unsigned short const *)",
    "public: __thiscall PacketParser::MessageId::MessageId(void)",
    "protected: enum ErrorLogging __thiscall CBaseConfigCache::LogReadErrors(enum ConfigChangeSources)",
    "public: class CListenerOperation * const & __thiscall SafeSet_Iterator::operator*(void)const",
    "private: int __thiscall PacketParser::ParseShellCompression(class IRequestContext *,struct _FWXML_ELEMENT *,int)",
    "public: __thiscall AutoCleanup,struct IWbemQuery *>::AutoCleanup,struct IWbemQuery *>(struct IWbemQuery *)",
    "public: enum PacketFormatter::Charset __thiscall PacketFormatter::GetFormat(void)const",
    "public: __thiscall AutoRelease::AutoRelease(struct IWbemClassObject *)",
    "public: __thiscall PacketFormatter::PacketFormatter(void)",
    "public: __thiscall AutoCleanup,class CCommonConfigSettings *>::AutoCleanup,class CCommonConfigSettings *>(class CCommonConfigSettings *)",
    "public: class AutoDelete > > & __thiscall AutoCleanup > >,class std::vector > *>::operator=(class std::vector > *)",
    "public: struct IAppHostPropertyCollection * * __thiscall AutoCleanup,struct IAppHostPropertyCollection *>::Storage(void)",
    "public: class SafeMap > const & __thiscall SafeMap_Lock >::GetMap(void)const",
    "public: __thiscall AutoCleanup,class CServiceCommonConfigSettings *>::~AutoCleanup,class CServiceCommonConfigSettings *>(void)",
    "public: __thiscall AutoCleanup >,class SimpleStack *>::AutoCleanup >,class SimpleStack *>(class SimpleStack *)",
    "public: __thiscall ILoader::ILoader(bool (__thiscall IpHlpApiDllLoader::*)(class IRequestContext &),bool (__thiscall IpHlpApiDllLoader::*)(class IRequestContext &))",
    "public: static class CConfigManager * __stdcall CConfigManager::GetConfigManagerForTable(class WSMANCONFIGTABLE_IDENTITY *,class IRequestContext *)",
    "public: struct IWbemObjectTextSrc * __thiscall AutoCleanup,struct IWbemObjectTextSrc *>::operator->(void)const",
    "public: class Locale & __thiscall PacketParser::GetLocaleHelper(void)",
    "private: class AutoChainContext & __thiscall AutoCleanup::Me(void)",
    "private: static class CBaseConfigCache * __stdcall CServiceConfigCache::AllocCache(void)",
    "public: __thiscall AutoRelease::AutoRelease(class CBaseConfigCache::CConfigCacheMap *)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class CCommonConfigSettings *)",
    "public: void * __thiscall UserRecord::GetToken(void)",
    "public: void __thiscall UserRecord::IncreaseProfileCount(void)",
    "private: void __thiscall AutoCleanup,class IpHlpApiDllLoader *>::ReleasePtr(void)",
    "public: __thiscall AutoRelease::AutoRelease(struct IAppHostConfigException *)",
    "public: static int __stdcall CConfigManager::Shutdown(void)",
    "public: class XmlReader * __thiscall AutoCleanup,class XmlReader *>::Detach(void)",
    "public: __thiscall AutoCleanup,class CCommonConfigSettings *>::~AutoCleanup,class CCommonConfigSettings *>(void)",
    "private: void __thiscall WSMan::EventHandler::WriteSoapMessageW(struct _EVENT_DESCRIPTOR const &,unsigned short const *,unsigned long)",
    "private: int __thiscall CConfigManager::RetrieveListenerIdentity(struct HKEY__ *,unsigned short *,unsigned short * *,class LISTENER_IDENTITY *)",
    "public: int __thiscall CRequestContext::RecordHtmlError(unsigned long,struct _FWXML_ELEMENT *)",
    "public: class WSManMemCryptManager * __thiscall LoaderSerializer::GetInstance(class IRequestContext &)",
    "public: __thiscall AutoCleanup,class CServiceConfigCache::CServiceWatcher *>::~AutoCleanup,class CServiceConfigCache::CServiceWatcher *>(void)",
    "public: struct IWbemServices * __thiscall AutoCleanup,struct IWbemServices *>::Detach(void)",
    "public: __thiscall AutoCleanup,unsigned char *>::AutoCleanup,unsigned char *>(void)",
    "public: __thiscall AutoRelease::AutoRelease(struct IAppHostAdminManager *)",
    "public: long __thiscall UserRecord::Release(void)",
    "public: __thiscall ILoader::ILoader(bool (__thiscall SubscriptionManager::*)(class IRequestContext &),bool (__thiscall SubscriptionManager::*)(class IRequestContext &))",
    "private: class AutoDelete & __thiscall AutoCleanup,class CConfigChangeSource *>::Me(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class IPCSoapProcessor *>::Me(void)",
    "public: __thiscall AutoCleanup,class Catalog::SecurityEntry *>::~AutoCleanup,class Catalog::SecurityEntry *>(void)",
    "public: __thiscall AutoCleanup,class CRemoteOperation *>::AutoCleanup,class CRemoteOperation *>(class CRemoteOperation *)",
    "public: bool __thiscall AutoCleanup,class InboundRequestDetails *>::operator!(void)const",
    "private: void __thiscall AutoCleanup,class CBaseConfigCache *>::ReleasePtr(void)",
    "FwXmlGetEntryNameEx",
    "WSManReconnectShell",
    "public: __thiscall AutoBstr::~AutoBstr(void)",
    "public: class SubscriptionEnumerator * __thiscall AutoCleanup,class SubscriptionEnumerator *>::operator->(void)",
    "FwXmlDecodeXmlEscapes",
    "public: __thiscall AutoCleanup,class Locale::Resources *>::~AutoCleanup,class Locale::Resources *>(void)",
    "public: __thiscall AutoRelease::AutoRelease(class WSMan::Client::SendOperation *)",
    "public: virtual void __cdecl CRequestContext::RecordFailure(enum _MI_Result,unsigned long,unsigned long,...)",
    "public: struct IWbemPath * __thiscall AutoCleanup,struct IWbemPath *>::operator->(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,struct _SID *>::Me(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::Shell *>::operator class WSMan::Client::Shell *(void)",
    "WSManEnumeratorAddEvent",
    "public: __thiscall AutoRelease::AutoRelease(class GeneralSinkEx *)",
    "public: __thiscall BufferFormatter::BufferFormatter(unsigned char *,unsigned long)",
    "public: struct IWbemLocator * __thiscall AutoCleanup,struct IWbemLocator *>::operator->(void)",
    "public: __thiscall AutoCleanup,class InboundRequestDetails *>::operator class InboundRequestDetails * const(void)const",
    "public: __thiscall AutoCleanup,struct IWbemPathKeyList *>::operator struct IWbemPathKeyList *(void)",
    "FwXmlGetElementNamespacePrefix",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IWbemLocator *>::Me(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class CertHash *>::Me(void)",
    "public: int __thiscall CWSManResourceNoResourceUri::ClearOptions(void)",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetOperationId(void)const",
    "public: __thiscall UserAuthzRecord::UserAuthzRecord(void)",
    "public: __thiscall AutoChainContext::AutoChainContext(struct _CERT_CHAIN_CONTEXT const *)",
    "public: class ExpiredOperationIdRecord * __thiscall AutoCleanup,class ExpiredOperationIdRecord *>::Detach(void)",
    "public: __thiscall AutoEnvironmentBlock::~AutoEnvironmentBlock(void)",
    "public: class ILifeTimeMgmt & __thiscall ILifeTimeMgmt::operator=(class ILifeTimeMgmt const &)",
    "private: void __thiscall WSMan::EventHandler::WriteSoapMessageA(struct _EVENT_DESCRIPTOR const &,char const *,unsigned long)",
    "public: struct IWbemQuery * __thiscall AutoCleanup,struct IWbemQuery *>::Detach(void)",
    "public: bool __thiscall AutoCleanup,struct IWbemClassObject *>::operator!(void)const",
    "public: virtual unsigned long __thiscall CircularBufferFormatter::PrepareToCommitWithSize(unsigned long)",
    "public: __thiscall AutoMIClass::~AutoMIClass(void)",
    "private: void __thiscall AutoCleanup,class InboundRequestDetails *>::ReleasePtr(void)",
    "public: class CConfigChangeSource * __thiscall AutoCleanup,class CConfigChangeSource *>::operator->(void)",
    "public: __thiscall AutoCleanup,class CServiceConfigCache::CServiceWatcher *>::AutoCleanup,class CServiceConfigCache::CServiceWatcher *>(class CServiceConfigCache::CServiceWatcher *)",
    "public: __thiscall AutoRelease::AutoRelease(struct IAppHostElement *)",
    "private: int __thiscall CConfigManager::RetrieveShellUriIdentity(struct HKEY__ *,class SHELLURI_IDENTITY *)",
    "public: static unsigned short * __stdcall WSManMemory::AllocBstrLen(unsigned short const *,unsigned int,int,int)",
    "private: class AutoReleaseEx & __thiscall AutoCleanup,class HostMappingTableEntry *>::Me(void)",
    "public: bool __thiscall UserRecord::UseClientToken(void)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class WmiEnumContext *)",
    "public: unsigned char * __thiscall AutoCleanup,unsigned char *>::operator->(void)const",
    "long __stdcall SafeStringToUI64(unsigned short const *,unsigned char,int,unsigned __int64 *,class IRequestContext *,unsigned long)",
    "public: unsigned short * * * __thiscall AutoCleanup,unsigned short * *>::Storage(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class GeneralSinkEx *>::Me(void)",
    "public: class CRemoteSession * __thiscall AutoCleanup,class CRemoteSession *>::operator->(void)",
    "public: class CListenerOperation * const & __thiscall SafeSet_Iterator::operator->(void)const",
    "private: void __thiscall AutoCleanup,struct IWbemObjectTextSrc *>::ReleasePtr(void)",
    "public: virtual class BufferFormatter & __thiscall BufferFormatter::operator<<(class BufferFormatterDataPUCHAR &)",
    "public: class NtDsApiDllLoader * __thiscall LoaderSerializer::GetInstance(class IRequestContext &)",
    "public: class SBUFFER & __thiscall SBUFFER::operator=(class SBUFFER const &)",
    "private: static int const PacketFormatter::NUM_BOMS",
    "const SafeSet::`vftable'",
    "WSManEncodeObjectEx",
    "WSManGetErrorMessage",
    "public: __thiscall AutoCleanup::AutoCleanup(struct _CERT_CHAIN_CONTEXT const *)",
    "public: class ISpecification * __thiscall AutoCleanup,class ISpecification *>::operator->(void)const",
    "public: __thiscall AutoDelete >::AutoDelete >(void)",
    "private: void __thiscall AutoCleanup,class Packet *>::ReleasePtr(void)",
    "public: __thiscall RBUFFER::~RBUFFER(void)",
    "public: bool __thiscall AutoCleanup,struct IClientSecurity *>::operator!(void)const",
    "public: __thiscall LoaderSerializer::LoaderSerializer(bool (__thiscall Shell32DllLoader::*)(class IRequestContext &),bool (__thiscall Shell32DllLoader::*)(class IRequestContext &))",
    "public: struct IAppHostElement * * __thiscall AutoCleanup,struct IAppHostElement *>::Storage(void)",
    "public: void __thiscall ExtendedSemantic::SetErrorAction(enum _MI_OperationCallback_ResponseType,enum _MI_CallbackMode)",
    "public: void __thiscall PacketParser::PacketElement::PutOverrideValue(unsigned long)",
    "public: virtual void __thiscall CErrorContext::RecordFailure(struct _WSMAN_FAULT_OBJECT *)",
    "private: static class CBaseConfigCache * __stdcall CClientConfigCache::AllocCache(void)",
    "public: __thiscall AutoCleanup,class GeneralSinkEx *>::operator class GeneralSinkEx * const(void)const",
    "protected: class CSecurity::InteractiveSid * __thiscall ILoader::GetObjectW(void)const",
    "public: __thiscall AutoCleanup,unsigned char *>::~AutoCleanup,unsigned char *>(void)",
    "WSManProvDelete",
    "public: __thiscall AutoDelete::AutoDelete(class PacketCreator *)",
    "public: __thiscall AutoCleanup::operator struct HKEY__ *(void)",
    "WSManPull",
    "public: virtual void __thiscall CErrorContext::SetExtendedErrorString(unsigned short *)",
    "public: class ShlWApiDllLoader * __thiscall LoaderSerializer::GetInstance(class IRequestContext &)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class CBaseConfigCache *)",
    "public: void __thiscall ChildLifeTimeManager::Shutdown(void)",
    "public: virtual unsigned char const * __thiscall CircularBufferFormatter::GetBuffer(void)const",
    "public: bool __thiscall SoapSemanticConverter::ParseResponse(struct _FWXML_ELEMENT *,unsigned long *,bool *,class IRequestContext *)",
    "public: class AutoDeleteVector & __thiscall AutoDeleteVector::operator=(struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *)",
    "private: long __thiscall CConfigManager::GetPolicyValueForConfigSetting(enum ConfigSetting,unsigned long,unsigned short *,unsigned long *,enum WSManGroupPolicySettingState *,class IRequestContext *)",
    "private: void __thiscall AutoCleanup,class CWSManResource *>::ReleasePtr(void)",
    "public: unsigned short const * __thiscall PacketParser::Fragment::GetPath(void)const",
    "const IRequestContext::`vftable'",
    "public: class IRequestContext * __thiscall AutoCleanup,class IRequestContext *>::Detach(void)",
    "StopSoapProcessor",
    "FwXmlParseStream",
    "private: class AutoDelete & __thiscall AutoCleanup,class CSecurity::NetworkServiceSid *>::Me(void)",
    "public: bool __thiscall AutoCleanup,class CConfigManager *>::operator!(void)const",
    "public: __thiscall AutoRelease::AutoRelease(class CWSManGroupPolicyManager *)",
    "public: __thiscall AutoCleanup,class PushSubscription *>::~AutoCleanup,class PushSubscription *>(void)",
    "WSManDeinitialize",
    "int __stdcall StringCchStartsWithCI(unsigned short const *,unsigned short const *)",
    "public: static bool __stdcall Locale::Validate(struct _WSMAN_DATA *)",
    "public: __thiscall AutoCleanup,class CListenerSettings *>::operator class CListenerSettings *(void)",
    "public: bool __thiscall SafeMap >::IsValid(void)const",
    "public: __thiscall AutoCleanup,class WmiEnumContext *>::~AutoCleanup,class WmiEnumContext *>(void)",
    "public: virtual unsigned long __thiscall BufferFormatter::GetCalculationSize(bool)const",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class WSMan::Client::Application *)",
    "public: __thiscall CRequestContext::CRequestContext(unsigned short const *)",
    "public: bool __thiscall AutoCleanup,void *>::operator!(void)const",
    "WSManPluginReportContext",
    "private: void __thiscall AutoCleanup,class TSTRBUFFER *>::ReleasePtr(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IAppHostProperty *>::Me(void)",
    "public: bool __thiscall PacketFormatter::SetBOM(class Packet *)",
    "public: __thiscall AutoCleanup,void *>::AutoCleanup,void *>(void *)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class WSMANCONFIGTABLE_IDENTITY *)",
    "public: class CWinRSPluginConfigCache * __thiscall AutoCleanup,class CWinRSPluginConfigCache *>::operator->(void)const",
    "public: __thiscall EtwCorrelationHelper::EtwCorrelationHelper(class EtwCorrelationHelper const &)",
    "public: static int __stdcall CSecurity::ExtractSidFromToken(class IRequestContext *,void *,class AutoLocalFree &)",
    "FwXmlGetElementName",
    "public: __thiscall AutoRelease::AutoRelease(class CServiceCommonConfigSettings *)",
    "public: void __thiscall BufferFormatter::SetFormatterMode(enum PacketFormatter::Charset,enum PacketFormatter::Charset)",
    "public: __thiscall AutoCleanup,struct IWbemPathKeyList *>::operator struct IWbemPathKeyList * const(void)const",
    "public: int __thiscall CWSManResourceNoResourceUri::AddKey(unsigned short const *,unsigned short const *,class IRequestContext *)",
    "public: static int __stdcall CConfigManager::ReadTableRegistryKey(class IRequestContext *,class WSMANCONFIGTABLE_IDENTITY *,unsigned short *)",
    "private: int __thiscall CWSManGroupPolicyManager::ValidateInt(class IRequestContext *,struct _WSMAN_POLICY_INFO const *,unsigned long)",
    "public: virtual long __stdcall CWSManSecurityUI::SetSecurity(unsigned long,void *)",
    "public: __thiscall AutoCleanup,class ServiceSoapProcessor *>::operator class ServiceSoapProcessor *(void)",
    "public: void * __thiscall AutoCleanup::Detach(void)",
    "private: void __thiscall AutoCleanup,class CWinRSPluginConfigSettings *>::ReleasePtr(void)",
    "public: unsigned int __thiscall SBUFFER::GetSizeInUse(void)const",
    "public: __thiscall AutoCleanup,struct IWbemQuery *>::operator struct IWbemQuery * const(void)const",
    "public: unsigned long __thiscall BufferFormatter::GetError(void)const",
    "public: __thiscall ILifeTimeMgmt::ILifeTimeMgmt(class ILifeTimeMgmt const &)",
    "public: __thiscall AutoDelete::AutoDelete(class Catalog::SecurityEntry *)",
    "public: unsigned short * * __thiscall AutoCleanup::Storage(void)",
    "public: struct _FWXML_ELEMENT * __thiscall PacketParser::GetSoapHeaders(void)",
    "public: unsigned int __thiscall TSTRBUFFER::GetCharInUse(void)const",
    "private: void __thiscall CBaseConfigCache::SetErrorState(class CRequestContext *,unsigned long)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class CServiceConfigCache::CServiceWatcher *)",
    "CreateProvHost",
    "public: __thiscall AutoDelete::AutoDelete(class CSecurity::NetworkServiceSid *)",
    "public: virtual bool __thiscall CErrorContext::IsGeneratingError(void)const",
    "public: virtual void __thiscall CRequestContext::RecordOutOfMemory(void)",
    "public: __thiscall AutoCleanup,class MachineName *>::AutoCleanup,class MachineName *>(class MachineName *)",
    "private: void __thiscall AutoCleanup,struct IEnumWbemClassObject *>::ReleasePtr(void)",
    "private: class AutoDeleteVector & __thiscall AutoCleanup,unsigned short const *>::Me(void)",
    "private: void __thiscall WSMan::EventHandler::EventWrite(struct _EVENT_DESCRIPTOR const &,unsigned long,struct _EVENT_DATA_DESCRIPTOR *)",
    "protected: void __thiscall CBaseConfigCache::Shutdown(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::SessionOptions::OptionValue *>::operator class WSMan::Client::SessionOptions::OptionValue *(void)",
    "public: unsigned long __thiscall PacketFormatter::Encode(class Packet * *)const",
    "private: int __thiscall PacketParser::ParseSelectors(class IRequestContext *,struct _FWXML_ELEMENT *,int)",
    "public: __thiscall SimpleQueue::SimpleQueue(void)",
    "WSManPluginReceiveResult",
    "public: class EventLog & __thiscall EventLog::operator=(class EventLog const &)",
    "public: __thiscall AutoImpersonateUser::~AutoImpersonateUser(void)",
    "public: class AutoRelease & __thiscall AutoCleanup,class UserRecord *>::operator=(class UserRecord *)",
    "public: static void __stdcall UserRecord::Initialize(class UserRecord &,struct UserRecord::Initializer const &)",
    "public: bool __thiscall Locale::GetMessageW(unsigned long,char * *,unsigned short *,unsigned long)const",
    "void __stdcall RemoveHttpsCertificate(unsigned short const *,unsigned short const *)",
    "public: unsigned long __thiscall CRequestContext::SetMachineName(unsigned short const *)",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IUnknown *>::Me(void)",
    "public: virtual int __thiscall CCommonConfigSettings::AllowNegotiate(void)const",
    "public: __thiscall AutoCleanup > >,class std::vector > *>::operator class std::vector > * const(void)const",
    "protected: class SubscriptionManager * __thiscall ILoader::GetObjectW(void)const",
    "public: void __thiscall CWSManCriticalSection::Acquire(void)",
    "public: bool __thiscall BufferFormatter::IsInCommitMode(void)",
    "public: unsigned short const * __cdecl Locale::GetMessageAlloc(class AutoLocalFree &,unsigned long,...)const",
    "const CServiceConfigCache::`vftable'{for `IConfigChangeObserver'}",
    "public: struct _MI_Instance * __thiscall AutoCleanup::Detach(void)",
    "private: void __thiscall AutoCleanup,struct IAppHostElementCollection *>::ReleasePtr(void)",
    "public: __thiscall AutoRegKey::AutoRegKey(void)",
    "int __stdcall StringCchEndsWithCI(unsigned short const *,unsigned short const *)",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetMaxEnvelopeSize(void)const",
    "public: __thiscall AutoCleanup,class SubscriptionManager *>::~AutoCleanup,class SubscriptionManager *>(void)",
    "protected: int __thiscall ConfigRegistry::ValidateTrustedHosts(class IRequestContext *,unsigned short const *)",
    "private: long __thiscall LoaderSerializer::Down(void)",
    "public: __thiscall AutoCleanup,class IChannelObserverFactory *>::~AutoCleanup,class IChannelObserverFactory *>(void)",
    "private: void __thiscall AutoCleanup,class NtDsApiDllLoader *>::ReleasePtr(void)",
    "public: virtual int __thiscall CCommonConfigSettings::AllowBasic(void)const",
    "public: __thiscall AutoCleanup,class GPApiManager *>::~AutoCleanup,class GPApiManager *>(void)",
    "public: __thiscall AutoCleanup,class WSMANCONFIGTABLE_IDENTITY *>::~AutoCleanup,class WSMANCONFIGTABLE_IDENTITY *>(void)",
    "private: class AutoDeleteVector & __thiscall AutoCleanup,struct _WSMAN_OPTION *>::Me(void)",
    "FwXmlCompareElementName",
    "FwXmlHasText",
    "public: class AutoBstr & __thiscall AutoCleanup::operator=(unsigned short *)",
    "public: virtual void __thiscall SafeMap >::Acquire(void)const",
    "public: __thiscall AutoCleanup,class EnumSinkEx *>::operator class EnumSinkEx * const(void)const",
    "public: __thiscall AutoDelete::AutoDelete(class IpHlpApiDllLoader *)",
    "public: static void __stdcall EventLog::Info(unsigned long,unsigned short,unsigned short const * *)",
    "public: struct IUnknown * __thiscall AutoCleanup,struct IUnknown *>::Detach(void)",
    "public: __thiscall TSTRBUFFER::TSTRBUFFER(void)",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetMessageId(void)const",
    "public: __thiscall ILifeTimeMgmt::ILifeTimeMgmt(void)",
    "public: int __thiscall CWSManResourceNoResourceUri::ClearKeys(void)",
    "WSManCloseShell",
    "private: long __thiscall CConfigManager::GetPolicyValueForConfigSetting(enum ConfigSetting,unsigned long *,enum WSManGroupPolicySettingState *,class IRequestContext *)",
    "StartSoapProcessor",
    "public: class UniqueStringOverflow * __thiscall AutoCleanup,class UniqueStringOverflow *>::operator->(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class WmiEnumContext *>::Me(void)",
    "public: virtual void __cdecl CRequestContext::InternalHResult(unsigned long,unsigned long,...)",
    "public: __thiscall AutoCleanup,class InboundRequestDetails *>::operator class InboundRequestDetails *(void)",
    "public: class CRemoteSession * __thiscall AutoCleanup,class CRemoteSession *>::Detach(void)",
    "public: unsigned short const * __thiscall CResourceAlias::Uri(void)",
    "public: class AutoRelease & __thiscall AutoCleanup,class EnumSinkEx *>::operator=(class EnumSinkEx *)",
    "public: class CBaseConfigCache * __thiscall AutoCleanup,class CBaseConfigCache *>::operator->(void)",
    "public: static void __stdcall WSMan::EventHandler::CreateActivityId(struct _GUID &)",
    "public: __thiscall AutoCleanup,struct CWSManIPFilter::IPRange *>::~AutoCleanup,struct CWSManIPFilter::IPRange *>(void)",
    "public: __thiscall SafeMap_Iterator::SafeMap_Iterator(class SafeMap > &,bool)",
    "public: bool __thiscall SafeMap >::Add(class StringKeyStore const &,class ServerFullDuplexChannel * const &,class IRequestContext &)",
    "FwXmlUpdatePrefixes",
    "public: long __thiscall ChildLifeTimeManager::GetChildCount(void)const",
    "public: __thiscall AutoCleanup,struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *>::AutoCleanup,struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *>(void)",
    "private: class AutoReleaseEx & __thiscall AutoCleanup,class WSMan::Client::Shell *>::Me(void)",
    "public: __thiscall AutoLocalFree::AutoLocalFree(void *)",
    "private: void __thiscall AutoCleanup >,class SimpleStack *>::ReleasePtr(void)",
    "public: __thiscall ILoader::ILoader(bool (__thiscall WSMan::EventHandler::*)(class IRequestContext &),bool (__thiscall WSMan::EventHandler::*)(class IRequestContext &))",
    "public: class EnumSinkEx * __thiscall AutoCleanup,class EnumSinkEx *>::operator->(void)const",
    "public: __thiscall AutoFwXmlCloseParser::~AutoFwXmlCloseParser(void)",
    "protected: static void __stdcall CBaseConfigCache::RemoveAll(class FastLock *,class AutoRelease &)",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IAppHostPropertyCollection *>::Me(void)",
    "public: class SemanticMessage * __thiscall SoapSemanticConverter::ParseEvent(struct _FWXML_ELEMENT *,unsigned long *,class IRequestContext *)",
    "public: __thiscall AutoMIInstance::AutoMIInstance(void)",
    "public: __thiscall AutoCleanup,class HostMappingTable *>::~AutoCleanup,class HostMappingTable *>(void)",
    "private: long __thiscall LoaderSerializer::Up(void)",
    "public: class AutoBstrNoAlloc & __thiscall AutoBstrNoAlloc::operator=(unsigned short *)",
    "public: __thiscall AutoCleanup,struct IWbemQualifierSet *>::~AutoCleanup,struct IWbemQualifierSet *>(void)",
    "private: void __thiscall AutoCleanup,class WSMan::Client::SendOperation *>::ReleasePtr(void)",
    "public: class TSTRBUFFER * * __thiscall AutoCleanup,class TSTRBUFFER *>::Storage(void)",
    "protected: int __thiscall ConfigRegistry::ValidateInt(class IRequestContext *,struct _CONFIG_INFO *,unsigned long,unsigned short const *)",
    "public: __thiscall AutoBstrNoAlloc::AutoBstrNoAlloc(unsigned short *)",
    "public: __thiscall AutoCleanup,class CServiceConfigSettings *>::AutoCleanup,class CServiceConfigSettings *>(class CServiceConfigSettings *)",
    "public: __thiscall AutoCleanup,class CListenerSettings *>::AutoCleanup,class CListenerSettings *>(class CListenerSettings *)",
    "public: __thiscall AutoCleanup,struct IEnumWbemClassObject *>::AutoCleanup,struct IEnumWbemClassObject *>(struct IEnumWbemClassObject *)",
    "private: void __thiscall AutoCleanup,class HostMappingTableEntry *>::ReleasePtr(void)",
    "WSManRemoveSubscriptionManagerInternal",
    "private: void __thiscall AutoCleanup,unsigned short *>::ReleasePtr(void)",
    "public: bool __thiscall SafeMap >::Add(class StringKeyCI const &,struct Empty const &,class IRequestContext &)",
    "public: class CWinRSPluginConfigCache * __thiscall AutoCleanup,class CWinRSPluginConfigCache *>::Detach(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::CreateShellOperation *>::~AutoCleanup,class WSMan::Client::CreateShellOperation *>(void)",
    "public: static void __stdcall WSMan::EventHandler::Write(struct _EVENT_DESCRIPTOR const &,unsigned long,struct _EVENT_DATA_DESCRIPTOR *)",
    "private: static class FastLock CWinRSPluginConfigCache::s_mapLock",
    "public: __thiscall AutoCleanup,struct _SID *>::~AutoCleanup,struct _SID *>(void)",
    "public: virtual unsigned short const * __thiscall CRequestContext::GetFaultXML(void)const",
    "private: static class CBaseConfigCache * __stdcall CBaseConfigCache::FindExisting(class CBaseConfigCache::CConfigCacheMap *,unsigned short const *,enum ErrorLogging)",
    "public: __thiscall LoaderSerializer::LoaderSerializer(bool (__thiscall WSManMemCryptManager::*)(class IRequestContext &),bool (__thiscall WSManMemCryptManager::*)(class IRequestContext &))",
    "private: int __thiscall PacketParser::ParseMachineID(class IRequestContext *,struct _FWXML_ELEMENT *)",
    "public: static void __stdcall EventLog::Error(unsigned long,unsigned short const *)",
    "WSManCreateInternal",
    "public: __thiscall AutoRelease::AutoRelease(class WSMan::Client::Command *)",
    "public: static bool __stdcall Locale::Validate(unsigned short const *)",
    "const CircularBufferFormatter::`vftable'",
    "public: __thiscall LoaderSerializer::LoaderSerializer(bool (__thiscall Locale::Resources::*)(class IRequestContext &),bool (__thiscall Locale::Resources::*)(class IRequestContext &))",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(struct IWbemPath *)",
    "public: struct IWbemPathKeyList * * __thiscall AutoCleanup,struct IWbemPathKeyList *>::Storage(void)",
    "public: bool __thiscall Locale::SetLocale(unsigned long,unsigned short const *,class IRequestContext *)",
    "FwXmlGetElementNameEx",
    "public: __thiscall AutoCleanup,class IISConfigSettings *>::AutoCleanup,class IISConfigSettings *>(class IISConfigSettings *)",
    "public: class WSMan::Client::SendOperation * __thiscall AutoCleanup,class WSMan::Client::SendOperation *>::operator->(void)",
    "private: class AutoBstrNoAlloc & __thiscall AutoCleanup::Me(void)",
    "public: class SafeSet_Iterator & __thiscall SafeMap >::GetDestructorIter(void)",
    "public: unsigned short const * __thiscall Locale::GetMessageEmpty(class AutoLocalFree &,unsigned long)const",
    "public: virtual unsigned long __thiscall CircularBufferFormatter::GrowBuffer(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CClientConfigSettings *>::Me(void)",
    "WSManCloseSubscriptionHandle",
    "public: struct IErrorInfo * __thiscall AutoCleanup,struct IErrorInfo *>::operator->(void)",
    "GetServiceSecurity",
    "private: int __thiscall PacketParser::ParseFaultTo(class IRequestContext *,struct _FWXML_ELEMENT *,int)",
    "public: unsigned long __thiscall SoapSemanticConverter::CreateResponse(unsigned long,enum _MI_OperationCallback_ResponseType,class BufferFormatter &,class IRequestContext *)",
    "public: class AutoDelete & __thiscall AutoCleanup,class CConfigChangeSource *>::operator=(class CConfigChangeSource *)",
    "public: static int __stdcall CConfigManager::ReadCredentialsFromCredmanStore(class IRequestContext *,unsigned short *,unsigned short *)",
    "public: struct _WINRS_RUN_COMMAND_ARG * __thiscall AutoCleanup,struct _WINRS_RUN_COMMAND_ARG *>::operator->(void)",
    "public: bool __thiscall AutoCleanup > >,class std::set > *>::operator!(void)const",
    "private: void __thiscall AutoCleanup,class EnumSinkEx *>::ReleasePtr(void)",
    "public: static int __stdcall CConfigManager::DeleteCredentialsFromCredmanStore(class IRequestContext *,unsigned short *)",
    "private: static class AutoRelease CClientConfigCache::s_cacheMap",
    "private: class AutoRelease & __thiscall AutoCleanup,class CWSManGroupPolicyCache *>::Me(void)",
    "public: __thiscall AutoCleanup,class WmiEnumContext *>::operator class WmiEnumContext *(void)",
    "WSManDeleteInternal",
    "public: __thiscall AutoCleanup,class IPCSoapProcessor *>::operator class IPCSoapProcessor *(void)",
    "public: class AutoReleaseEx & __thiscall AutoReleaseEx::operator=(class WSMan::Client::Shell *)",
    "public: int __thiscall CWSManResourceNoResourceUri::SetFragmentPath(unsigned short const *,class IRequestContext *)",
    "public: __thiscall AutoCleanup,struct IWbemPathKeyList *>::~AutoCleanup,struct IWbemPathKeyList *>(void)",
    "public: __thiscall AutoWaitHandle::AutoWaitHandle(void *)",
    "private: class AutoRelease & __thiscall AutoCleanup,class EnumSinkEx *>::Me(void)",
    "public: static class CServiceConfigCache * __stdcall CServiceConfigCache::GetConfigCache(class IRequestContext *,enum ErrorLogging,int)",
    "private: void __thiscall CResourceAlias::StoreExpansion(unsigned short const *,struct _ALIAS_INFORMATION *)",
    "private: static class FastLock CClientConfigCache::s_mapLock",
    "private: class AutoDeleteVector & __thiscall AutoCleanup,struct _CONFIG_UPDATE *>::Me(void)",
    "public: virtual void __cdecl CErrorContext::RecordFailure(enum _MI_Result,unsigned long,unsigned long,...)",
    "WSManSignalShell",
    "public: virtual unsigned short const * __thiscall CErrorContext::GetFaultXML(void)const",
    "private: int __thiscall PacketParser::ParseMaxEnvelopeSize(class IRequestContext *,struct _FWXML_ELEMENT *,int,class CServiceCommonConfigSettings *)",
    "public: __thiscall AutoObject::~AutoObject(void)",
    "public: __thiscall AutoCleanup,class CSecurity::NetworkServiceSid *>::AutoCleanup,class CSecurity::NetworkServiceSid *>(class CSecurity::NetworkServiceSid *)",
    "public: __thiscall AutoCleanup,class CWSManEPR *>::operator class CWSManEPR * const(void)const",
    "private: virtual __thiscall CWSManGroupPolicyManager::~CWSManGroupPolicyManager(void)",
    "FwXmlGetNormalizedString",
    "public: unsigned int __thiscall RBUFFER::QuerySize(void)const",
    "private: int __thiscall CRequestContext::RecordXml(unsigned long,struct _FWXML_ELEMENT *,unsigned long)",
    "private: void __thiscall AutoCleanup,class IPCSoapProcessor *>::ReleasePtr(void)",
    "WSManDecodeObject",
    "public: virtual int __thiscall CWSManGroupPolicyManager::NotifyObservers(class IRequestContext *,class IWSManGroupPolicyCacheDataProvider *)",
    "private: void __thiscall AutoCleanup,class UniqueStringOverflow *>::ReleasePtr(void)",
    "public: struct _CERT_CONTEXT const * __thiscall AutoCleanup::Detach(void)",
    "public: class AutoDeleteVector & __thiscall AutoDeleteVector::operator=(unsigned char *)",
    "private: class AutoDelete & __thiscall AutoCleanup,class ServiceSoapProcessor *>::Me(void)",
    "FwXmlGetAttributeNamespacePrefix",
    "public: unsigned int __thiscall XmlReader::GetLength(void)",
    "public: __thiscall AutoCleanup,class WSManHttpListener *>::AutoCleanup,class WSManHttpListener *>(class WSManHttpListener *)",
    "public: class ConfigRegistry & __thiscall ConfigRegistry::operator=(class ConfigRegistry const &)",
    "private: int __thiscall CBaseConfigCache::AddToMap(class IRequestContext *,class AutoLocalFree &)",
    "private: __thiscall CWinRSPluginConfigCache::CWinRSPluginConfigCache(void)",
    "public: __thiscall AutoCleanup,class BlockedRecord *>::operator class BlockedRecord *(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::ConnectShellOperation *>::operator class WSMan::Client::ConnectShellOperation *(void)",
    "FwXmlNumChildren",
    "const CServiceConfigCache::`vftable'{for `ILifeTimeMgmt'}",
    "public: __thiscall SimpleQueue::~SimpleQueue(void)",
    "public: void * const * __thiscall SafeSet::operator[](void * const &)const",
    "private: void __thiscall AutoCleanup,class PushSubscribeOperation *>::ReleasePtr(void)",
    "protected: static int __stdcall ConfigRegistry::DeleteConfigKey(class IRequestContext *,unsigned short const *,unsigned short const *,int)",
    "public: int __thiscall CConfigManager::NextListener(void)",
    "public: __thiscall AutoCleanup,class IQueryDASHSMASHInterface *>::~AutoCleanup,class IQueryDASHSMASHInterface *>(void)",
    "public: class AutoDelete & __thiscall AutoCleanup,class IQueryDASHSMASHInterface *>::operator=(class IQueryDASHSMASHInterface *)",
    "private: int __thiscall PacketParser::ParseDataLocale(class IRequestContext *,struct _FWXML_ELEMENT *,int)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class XmlReader *)",
    "private: unsigned long __thiscall CRequestContext::DecodeFaultObject(unsigned short const *,unsigned long,unsigned short const * &,unsigned short const * &,unsigned short const * &)",
    "public: __thiscall AutoCleanup,class Catalog::SecurityEntry *>::AutoCleanup,class Catalog::SecurityEntry *>(class Catalog::SecurityEntry *)",
    "public: __thiscall AutoDelete::AutoDelete(class User32DllLoader *)",
    "private: int __thiscall PacketParser::ParseOptions(class IRequestContext *,struct _FWXML_ELEMENT *,int)",
    "public: class AutoRelease & __thiscall AutoCleanup,struct IWbemPath *>::operator=(struct IWbemPath *)",
    "public: class GPApiManager * __thiscall AutoCleanup,class GPApiManager *>::operator->(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::SendOperation *>::AutoCleanup,class WSMan::Client::SendOperation *>(class WSMan::Client::SendOperation *)",
    "public: __thiscall AutoCleanup,struct IWbemObjectTextSrc *>::AutoCleanup,struct IWbemObjectTextSrc *>(struct IWbemObjectTextSrc *)",
    "public: struct IWbemContext * __thiscall AutoCleanup,struct IWbemContext *>::operator->(void)",
    "SubscriptionsProvEnumerate",
    "FwXmlGetAttributeValueDWord",
    "public: virtual int __thiscall CWSManResourceNoResourceUri::IsEPR(void)",
    "public: __thiscall AutoRelease::AutoRelease(void)",
    "WSManGetInternalEx",
    "EnumServiceUserResources",
    "public: class ISpecification * __thiscall AutoCleanup,class ISpecification *>::Detach(void)",
    "const CWSManResource::`vftable'",
    "public: union _LARGE_INTEGER const __thiscall SimpleQueue::front(void)const",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IWbemServices *>::Me(void)",
    "public: __thiscall AutoCleanup,struct IClientSecurity *>::AutoCleanup,struct IClientSecurity *>(struct IClientSecurity *)",
    "public: __thiscall AutoCleanup,class BlockedRecord *>::~AutoCleanup,class BlockedRecord *>(void)",
    "WSManCloseCommand",
    "public: class std::set > * __thiscall AutoCleanup > >,class std::set > *>::operator->(void)",
    "public: virtual __thiscall CClientConfigCache::~CClientConfigCache(void)",
    "public: __thiscall AutoCleanup,class ShlWApiDllLoader *>::~AutoCleanup,class ShlWApiDllLoader *>(void)",
    "protected: int __thiscall CBaseConfigCache::InitializeSources(class IRequestContext *,int,int)",
    "private: class AutoRelease & __thiscall AutoCleanup,class WSMan::Client::ReconnectOperation *>::Me(void)",
    "public: __thiscall ILoader::ILoader(bool (__thiscall CSecurity::InteractiveSid::*)(class IRequestContext &),bool (__thiscall CSecurity::InteractiveSid::*)(class IRequestContext &))",
    "public: class ConfigNotification * __thiscall AutoCleanup,class ConfigNotification *>::operator->(void)",
    "public: class ExpiredOperationIdRecord * & __thiscall SafeMap_Iterator::operator->(void)const",
    "public: void __thiscall FastLock::ReleaseShared(void)",
    "public: __thiscall AutoCleanup,class CBaseConfigCache::CConfigCacheMap *>::AutoCleanup,class CBaseConfigCache::CConfigCacheMap *>(class CBaseConfigCache::CConfigCacheMap *)",
    "public: __thiscall AutoCleanup,struct IWbemContext *>::AutoCleanup,struct IWbemContext *>(void)",
    "public: class CWSManGroupPolicyCache * __thiscall AutoCleanup,class CWSManGroupPolicyCache *>::operator->(void)",
    "public: __thiscall SoapSemanticConverter::SoapSemanticConverter(void)",
    "public: __thiscall AutoCleanup,int *>::~AutoCleanup,int *>(void)",
    "private: void __thiscall AutoCleanup,struct IWbemLocator *>::ReleasePtr(void)",
    "public: class AutoDelete & __thiscall AutoCleanup,class Catalog::SecurityEntry *>::operator=(class Catalog::SecurityEntry *)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class CWinRSPluginConfigSettings *)",
    "public: virtual unsigned long __thiscall BufferFormatter::GrowBuffer(unsigned long)",
    "public: __thiscall AutoCleanup,struct IAppHostChildElementCollection *>::operator struct IAppHostChildElementCollection *(void)",
    "public: __thiscall AutoCleanup,class User32DllLoader *>::AutoCleanup,class User32DllLoader *>(class User32DllLoader *)",
    "public: class CWSManResource * __thiscall AutoCleanup,class CWSManResource *>::Detach(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class WSMan::Client::SendOperation *>::Me(void)",
    "public: static void __stdcall WSMan::EventHandler::GetActivityIdOnCurrentThread(struct _GUID &)",
    "private: void __thiscall AutoCleanup,class GeneralSinkEx *>::ReleasePtr(void)",
    "public: unsigned long __thiscall CWSManCriticalSection::GetInitError(void)const",
    "public: void __thiscall CRequestContext::RecordProviderFailure(unsigned long,int,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: unsigned short const * __thiscall PacketParser::Fragment::GetDialect(void)const",
    "public: __thiscall AutoCleanup,class TSTRBUFFER *>::operator class TSTRBUFFER * const(void)const",
    "public: class AutoDelete > & __thiscall AutoCleanup >,class SafeSet_Iterator *>::operator=(class SafeSet_Iterator *)",
    "public: __thiscall AutoCleanup,class CServiceCommonConfigSettings *>::operator class CServiceCommonConfigSettings *(void)",
    "public: __thiscall UserAuthzRecord::UserAuthzRecord(class UserAuthzRecord const &)",
    "public: __thiscall AutoCleanup,struct IWbemLocator *>::operator struct IWbemLocator * const(void)const",
    "public: class IRequestContext * * __thiscall AutoCleanup,class IRequestContext *>::Storage(void)",
    "public: class PacketParser::Fragment & __thiscall PacketParser::Fragment::operator=(class PacketParser::Fragment const &)",
    "private: virtual class CCommonConfigSettings * __thiscall CWinRSPluginConfigCache::ReadCurrentSettings(class IRequestContext *,enum ErrorLogging)",
    "public: virtual void __thiscall CircularBufferFormatter::SetUpdateMode(enum BufferFormatter::Mode)",
    "public: __thiscall AutoHandle::AutoHandle(void *)",
    "public: __thiscall AutoCleanup,struct CWSManIPFilter::IPRange *>::AutoCleanup,struct CWSManIPFilter::IPRange *>(struct CWSManIPFilter::IPRange *)",
    "public: bool __thiscall SafeSet::Add(void * const &,class IRequestContext &)",
    "WSManPluginGetOperationParameters",
    "public: __thiscall AutoCleanup,class CConfigChangeSource *>::operator class CConfigChangeSource *(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class SubscriptionManager *>::Me(void)",
    "private: class AutoDeleteVector & __thiscall AutoCleanup,struct _WINRS_RUN_COMMAND_ARG *>::Me(void)",
    "public: __thiscall AutoDelete::AutoDelete(class WmiEnumContext *)",
    "public: class EnumSinkEx * __thiscall AutoCleanup,class EnumSinkEx *>::operator->(void)",
    "private: void __thiscall AutoCleanup,struct IWbemQuery *>::ReleasePtr(void)",
    "public: __thiscall AutoMIInstance::~AutoMIInstance(void)",
    "protected: virtual int __thiscall CBaseConfigCache::PostChange(class IRequestContext *,class CCommonConfigSettings *,class CCommonConfigSettings *)",
    "public: __thiscall PacketParser::PacketElement::PacketElement(void)",
    "public: __thiscall AutoDelete::AutoDelete(class CBaseConfigCache *)",
    "public: __thiscall AutoCleanup,class CClientConfigSettings *>::operator class CClientConfigSettings *(void)",
    "public: __thiscall CWSManResource::CWSManResource(int)",
    "public: __thiscall AutoDelete::AutoDelete(class ExpiredOperationIdRecord *)",
    "public: class WSMan::Client::SendOperation * * __thiscall AutoCleanup,class WSMan::Client::SendOperation *>::Storage(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::DisconnectOperation *>::operator class WSMan::Client::DisconnectOperation *(void)",
    "public: unsigned short const * * __thiscall AutoCleanup,unsigned short const * *>::operator->(void)",
    "public: class CRequestContext * __thiscall AutoCleanup,class CRequestContext *>::Detach(void)",
    "public: class CBaseConfigCache * __thiscall AutoCleanup,class CBaseConfigCache *>::Detach(void)",
    "public: class AutoDeleteVector & __thiscall AutoCleanup,void *>::operator=(void *)",
    "public: class SoapSemanticConverter & __thiscall SoapSemanticConverter::operator=(class SoapSemanticConverter const &)",
    "public: __thiscall AutoCleanup,class ISpecification *>::~AutoCleanup,class ISpecification *>(void)",
    "WSManPluginStartup",
    "public: class WmiEnumContext * __thiscall AutoCleanup,class WmiEnumContext *>::Detach(void)",
    "public: static class CConfigManager * __stdcall CConfigManager::GetConfigManagerForCertMapping(class CERTMAPPING_IDENTITY *,class IRequestContext *)",
    "void __stdcall RemoveHttpsBinding(unsigned short const *)",
    "public: __thiscall AutoCleanup,struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *>::AutoCleanup,struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *>(struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *)",
    "public: int __thiscall CWSManGroupPolicyManager::GetInt(class IRequestContext *,enum WSManGroupPolicySetting,unsigned long *,enum WSManGroupPolicySettingState *)",
    "const CWSManEPR::`vftable'",
    "private: bool __thiscall SoapSemanticConverter::GetActionType(unsigned short const *,enum _MI_OperationCallback_ResponseType *,enum _MI_CallbackMode *,class IRequestContext *)",
    "public: __thiscall AutoCleanup,class ConfigUpdate *>::operator class ConfigUpdate *(void)",
    "public: class IQueryDASHSMASHInterface * __thiscall AutoCleanup,class IQueryDASHSMASHInterface *>::Detach(void)",
    "public: __thiscall AutoCleanup,struct IWbemQualifierSet *>::operator struct IWbemQualifierSet * const(void)const",
    "public: virtual unsigned long __thiscall CircularBufferFormatter::GetCalculationSize(bool)const",
    "public: class WSMan::Client::SignalOperation * __thiscall AutoCleanup,class WSMan::Client::SignalOperation *>::Detach(void)",
    "public: struct HKEY__ * * __thiscall AutoCleanup::Storage(void)",
    "public: __thiscall AutoCleanup,class CRequestContext *>::AutoCleanup,class CRequestContext *>(class CRequestContext *)",
    "public: long __thiscall TSTRBUFFER::Append(unsigned short const *,unsigned int,unsigned int)",
    "public: __thiscall AutoCleanup,int *>::AutoCleanup,int *>(int *)",
    "private: void __thiscall AutoCleanup,class CWSManGroupPolicyManager *>::ReleasePtr(void)",
    "protected: int __thiscall RBUFFER::IsDynAlloced(void)const",
    "public: __thiscall AutoBstrNoAlloc::~AutoBstrNoAlloc(void)",
    "public: bool __thiscall SafeMap >::Add(class StringKeyStore const &,class ExpiredOperationIdRecord * const &,class IRequestContext &)",
    "public: unsigned short const * __thiscall CWSManResource::GetBaseUri(void)",
    "public: long __thiscall TSTRBUFFER::AppendXmlStartItem(void)",
    "public: struct IEnumWbemClassObject * * __thiscall AutoCleanup,struct IEnumWbemClassObject *>::Storage(void)",
    "public: class ExpiredOperationIdRecord * & __thiscall SafeMap_Iterator::operator*(void)const",
    "public: __thiscall ILoader::ILoader(bool (__thiscall NtDsApiDllLoader::*)(class IRequestContext &),bool (__thiscall NtDsApiDllLoader::*)(class IRequestContext &))",
    "public: class AutoDelete > & __thiscall AutoCleanup >,class SafeMap_Iterator *>::operator=(class SafeMap_Iterator *)",
    "public: virtual __thiscall CErrorContext::~CErrorContext(void)",
    "public: struct IWbemServices * __thiscall AutoCleanup,struct IWbemServices *>::operator->(void)",
    "public: __thiscall AutoCleanup::AutoCleanup(struct _MI_Class *)",
    "public: class WSMan::Client::SendOperation * __thiscall AutoCleanup,class WSMan::Client::SendOperation *>::Detach(void)",
    "public: struct _WSMAN_OPTION * __thiscall CWSManResourceNoResourceUri::GetOptions(void)",
    "public: class AutoRelease & __thiscall AutoCleanup,class CRequestContext *>::operator=(class CRequestContext *)",
    "public: unsigned short const * __thiscall UserRecord::GetUserNameW(void)",
    "public: class AutoDelete & __thiscall AutoCleanup,class ConfigUpdate *>::operator=(class ConfigUpdate *)",
    "public: __thiscall AutoCleanup >,class Handle *>::~AutoCleanup >,class Handle *>(void)",
    "protected: int __thiscall ConfigRegistry::ValidateIPFilter(class IRequestContext *,enum ConfigSetting,unsigned short const *)",
    "public: virtual unsigned char * __thiscall CircularBufferFormatter::GetBuffer(void)",
    "public: bool __thiscall SafeMap >::Add(class Locale::Key const &,unsigned long const &,class IRequestContext &)",
    "public: __thiscall CResourceAlias::CResourceAlias(unsigned short const *)",
    "public: static void __stdcall EventLog::Warning(unsigned long)",
    "FwXmlGetNamespaceForPrefix",
    "public: __thiscall AutoCleanup,struct IWbemObjectTextSrc *>::operator struct IWbemObjectTextSrc * const(void)const",
    "public: static bool __stdcall WSMan::EventHandler::IsEventProviderEnabled(void)",
    "public: __thiscall AutoCleanup,char *>::~AutoCleanup,char *>(void)",
    "public: __thiscall AutoCleanup,class CWSManResource *>::operator class CWSManResource * const(void)const",
    "WSManCloseOperation",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class InboundRequestDetails *)",
    "public: class WSMan::Client::CreateShellOperation * __thiscall AutoCleanup,class WSMan::Client::CreateShellOperation *>::operator->(void)",
    "public: __thiscall AutoDelete::AutoDelete(class IChannelObserverFactory *)",
    "public: virtual void __thiscall CRequestContext::RecordAccessDenied(void)",
    "public: __thiscall AutoCleanup,class WSManMemCryptManager *>::operator class WSManMemCryptManager *(void)",
    "WSManCloseEnumeratorHandle",
    "private: void __thiscall AutoCleanup,struct IUnknown *>::ReleasePtr(void)",
    "public: struct _WSMAN_STREAM_ID_SET * __thiscall AutoCleanup,struct _WSMAN_STREAM_ID_SET *>::Detach(void)",
    "public: __thiscall AutoCleanup,class UniqueStringOverflow *>::operator class UniqueStringOverflow *(void)",
    "public: __thiscall XmlReader::XmlReader(void)",
    "private: class AutoDeleteVector & __thiscall AutoCleanup,int *>::Me(void)",
    "public: __thiscall AutoCleanup,class CWSManEPR *>::operator class CWSManEPR *(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class ShlWApiDllLoader *>::Me(void)",
    "public: __thiscall AutoCleanup,class NtDsApiDllLoader *>::AutoCleanup,class NtDsApiDllLoader *>(class NtDsApiDllLoader *)",
    "public: __thiscall AutoCleanup,struct _WSMAN_STREAM_ID_SET *>::~AutoCleanup,struct _WSMAN_STREAM_ID_SET *>(void)",
    "private: unsigned long __thiscall CRequestContext::DecodeFaultObjectProvider(struct _FWXML_ELEMENT *,unsigned short const * &,unsigned short const * &)",
    "public: __thiscall AutoCleanup,class WSMan::Client::CreateShellOperation *>::operator class WSMan::Client::CreateShellOperation *(void)",
    "const CErrorContext::`vftable'",
    "public: __thiscall AutoCleanup,class PushSubscribeOperation *>::~AutoCleanup,class PushSubscribeOperation *>(void)",
    "public: __thiscall AutoDelete::AutoDelete(class SubscriptionManager *)",
    "public: static void __stdcall CServiceConfigCache::EnsureNoActiveCaches(void)",
    "protected: int __thiscall CWSManResourceNoResourceUri::ProcessFragmentDialect(class IRequestContext *,unsigned short const *,unsigned long)",
    "public: __thiscall SoapSemanticConverter::~SoapSemanticConverter(void)",
    "public: class CServiceConfigSettings * __thiscall AutoCleanup,class CServiceConfigSettings *>::Detach(void)",
    "public: class CSecurity::InteractiveSid * __thiscall AutoCleanup,class CSecurity::InteractiveSid *>::Detach(void)",
    "public: __thiscall AutoSecurityDescriptor::AutoSecurityDescriptor(void)",
    "private: void __thiscall AutoCleanup,class WmiEnumContext *>::ReleasePtr(void)",
    "protected: int __thiscall ConfigRegistry::ValidateHostnameAndCertificateCN(class IRequestContext *,unsigned short const *,unsigned short const *)",
    "public: class SafeMap_Iterator & __thiscall SafeMap_Iterator::Initialize(void)",
    "public: __thiscall AutoCleanup,class PacketParser *>::~AutoCleanup,class PacketParser *>(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CWSManSession *>::Me(void)",
    "public: static unsigned long const ExtendedSemantic::StreamingOutput",
    "int __stdcall StringCchStartsWith(unsigned short const *,unsigned short const *)",
    "public: __thiscall AutoCleanup,class UserRecord *>::AutoCleanup,class UserRecord *>(class UserRecord *)",
    "private: void __thiscall AutoCleanup,class IISConfigSettings *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class ExpiredOperationIdRecord *>::operator class ExpiredOperationIdRecord *(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CBaseConfigCache *>::Me(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class WSMan::Client::Application *>::Me(void)",
    "public: struct IWbemObjectTextSrc * __thiscall AutoCleanup,struct IWbemObjectTextSrc *>::operator->(void)",
    "public: struct IWbemQuery * * __thiscall AutoCleanup,struct IWbemQuery *>::Storage(void)",
    "protected: int __thiscall CWSManResourceNoResourceUri::ProcessKey(class IRequestContext *,unsigned short const *,unsigned short const *)",
    "public: unsigned short const * __thiscall AutoCleanup,unsigned short const *>::Detach(void)",
    "public: __thiscall AutoCleanup,class CRemoteOperation *>::~AutoCleanup,class CRemoteOperation *>(void)",
    "public: virtual void __thiscall CErrorContext::SetProviderFailure(int)",
    "public: __thiscall SafeSet::~SafeSet(void)",
    "public: class Packet * __thiscall PacketParser::GetRemainderPacket(class IRequestContext *)",
    "private: class AutoBstr & __thiscall AutoCleanup::Me(void)",
    "protected: int __thiscall ConfigRegistry::CreateKey(class IRequestContext *,unsigned short const *,struct HKEY__ * *,unsigned short const *,unsigned long,unsigned long *)",
    "public: __thiscall AutoCleanup,struct IWbemPath *>::AutoCleanup,struct IWbemPath *>(struct IWbemPath *)",
    "public: class AutoDeleteVector & __thiscall AutoDeleteVector::operator=(unsigned short const * *)",
    "public: __thiscall AutoDelete::AutoDelete(class CSecurity::InteractiveSid *)",
    "public: __thiscall SafeMap_Lock >::~SafeMap_Lock >(void)",
    "public: int __thiscall PacketParser::PacketElement::IsFound(void)const",
    "public: class AutoLocklessItemRecycle & __thiscall AutoCleanup,class Packet *>::operator=(class Packet *)",
    "public: struct IAppHostProperty * __thiscall AutoCleanup,struct IAppHostProperty *>::operator->(void)",
    "public: struct _WINRS_RUN_COMMAND_ARG * __thiscall AutoCleanup,struct _WINRS_RUN_COMMAND_ARG *>::Detach(void)",
    "public: unsigned short * __thiscall AutoCleanup::operator->(void)",
    "public: struct IAppHostChildElementCollection * __thiscall AutoCleanup,struct IAppHostChildElementCollection *>::operator->(void)",
    "public: static void __stdcall WSMan::EventHandler::WriteSoapW_BE(struct _EVENT_DESCRIPTOR const &,unsigned short const *,unsigned long)",
    "private: class AutoRelease & __thiscall AutoCleanup,class WSMan::Client::Shell *>::Me(void)",
    "public: __thiscall AutoCleanup,class CertHash *>::~AutoCleanup,class CertHash *>(void)",
    "public: class IQueryDASHSMASHInterface * __thiscall AutoCleanup,class IQueryDASHSMASHInterface *>::operator->(void)",
    "private: unsigned long __thiscall SoapSemanticConverter::GetEventType(unsigned short const *,class IRequestContext *)",
    "private: void __thiscall AutoCleanup,class CConfigChangeSource *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,unsigned short const *>::AutoCleanup,unsigned short const *>(unsigned short const *)",
    "public: static void __stdcall CWinRSPluginConfigCache::ProviderShutdownCleanup(void)",
    "private: virtual class CCommonConfigSettings * __thiscall CServiceConfigCache::ReadCurrentSettings(class IRequestContext *,enum ErrorLogging)",
    "WSManCreateSessionInternal",
    "public: __thiscall AutoCleanup >,class SafeSet_Iterator *>::operator class SafeSet_Iterator *(void)",
    "public: __thiscall AutoCleanup,class CShellUriSettings *>::~AutoCleanup,class CShellUriSettings *>(void)",
    "public: class PacketParser::NotUnderstandSoapHeader & __thiscall PacketParser::NotUnderstandSoapHeader::operator=(class PacketParser::NotUnderstandSoapHeader const &)",
    "public: class CCertMapping * __thiscall AutoCleanup,class CCertMapping *>::Detach(void)",
    "private: class AutoDeleteVector & __thiscall AutoCleanup,unsigned short const * *>::Me(void)",
    "public: class SafeMap > & __thiscall SafeMap_Iterator::GetMap(void)const",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(struct IEnumWbemClassObject *)",
    "public: struct IErrorInfo * __thiscall AutoCleanup,struct IErrorInfo *>::Detach(void)",
    "private: void __thiscall AutoCleanup,unsigned short const *>::ReleasePtr(void)",
    "public: bool __thiscall SafeSet::Add(class CListenerOperation * const &,class IRequestContext &)",
    "public: class InboundRequestDetails * __thiscall AutoCleanup,class InboundRequestDetails *>::operator->(void)const",
    "public: __thiscall AutoCleanup,class User32DllLoader *>::operator class User32DllLoader *(void)",
    "int __stdcall MoveSettingsToMigrationKey(class IRequestContext *,bool)",
    "private: static class AutoRelease CWSManGroupPolicyManager::s_policyManager",
    "public: __thiscall AutoCleanup,class CConfigChangeSource *>::~AutoCleanup,class CConfigChangeSource *>(void)",
    "public: class AutoDelete > & __thiscall AutoDelete >::operator=(class SafeMap_Iterator *)",
    "private: void __thiscall CRequestContext::RecordFailure(unsigned long,unsigned long,char * *)",
    "public: virtual int __thiscall CErrorContext::UseDefaultConfig(void)const",
    "public: __thiscall AutoRelease::AutoRelease(class CServiceConfigCache *)",
    "public: bool __thiscall AutoCleanup,struct IWbemQualifierSet *>::operator!(void)const",
    "public: class AutoDelete & __thiscall AutoCleanup,class ISpecification *>::operator=(class ISpecification *)",
    "public: __thiscall CWSManCriticalSectionWithConditionVar::~CWSManCriticalSectionWithConditionVar(void)",
    "public: __thiscall Loader::Loader(void)",
    "public: class AutoRelease & __thiscall AutoCleanup,struct IWbemPathKeyList *>::operator=(struct IWbemPathKeyList *)",
    "public: __thiscall AutoWaitHandle::AutoWaitHandle(void)",
    "private: void __thiscall AutoCleanup,class CListenerShell *>::ReleasePtr(void)",
    "public: class WSMan::Client::ReceiveOperation * __thiscall AutoCleanup,class WSMan::Client::ReceiveOperation *>::Detach(void)",
    "public: unsigned short const * __thiscall PacketParser::NotUnderstandSoapHeader::GetNamespacePrefix(void)const",
    "public: class IRequestContext * __thiscall AutoCleanup,class IRequestContext *>::operator->(void)const",
    "private: virtual void __thiscall CServiceConfigCache::PostError(unsigned long)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class CWSManResource *)",
    "public: __thiscall AutoCleanup,class CWinRSPluginConfigSettings *>::~AutoCleanup,class CWinRSPluginConfigSettings *>(void)",
    "public: static int __stdcall CSecurity::RevertToSelf(void)",
    "private: void __thiscall AutoCleanup,class CSecurity::AdminSid *>::ReleasePtr(void)",
    "public: unsigned long __thiscall BufferFormatter::GetBufferSize(void)const",
    "public: __thiscall AutoCleanup,class CBaseConfigCache::CConfigCacheMap *>::~AutoCleanup,class CBaseConfigCache::CConfigCacheMap *>(void)",
    "public: __thiscall AutoRelease::AutoRelease(struct IClientSecurity *)",
    "public: struct IAppHostChildElementCollection * * __thiscall AutoCleanup,struct IAppHostChildElementCollection *>::Storage(void)",
    "WSManEnumeratorAddObject",
    "public: class AutoReleaseEx & __thiscall AutoCleanup,class WSMan::Client::Shell *>::operator=(class WSMan::Client::Shell *)",
    "public: class AutoDeleteVector & __thiscall AutoDeleteVector::operator=(struct _CONFIG_UPDATE *)",
    "public: class AutoDeleteVector & __thiscall AutoCleanup,unsigned short * *>::operator=(unsigned short * *)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class PacketCreator *)",
    "public: int __thiscall CConfigManager::GetInt(class IRequestContext *,enum ConfigSetting,unsigned long *,enum WSManConfigSource *)",
    "public: class AutoRelease & __thiscall AutoCleanup,struct IWbemObjectTextSrc *>::operator=(struct IWbemObjectTextSrc *)",
    "public: __thiscall AutoCertContext::AutoCertContext(void)",
    "public: class CertHash * __thiscall AutoCleanup,class CertHash *>::Detach(void)",
    "public: class RBUFFER & __thiscall RBUFFER::operator=(class RBUFFER const &)",
    "public: long __thiscall TSTRBUFFER::Copy(unsigned short const *)",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetOptionsSetXml(void)",
    "private: void __thiscall AutoCleanup,class RobustConnectionBuffer::SendPacketArgs *>::ReleasePtr(void)",
    "public: unsigned long __thiscall SoapSemanticConverter::CreateAnEvent(unsigned long,class SemanticMessage *,class BufferFormatter &,class IRequestContext *)",
    "private: class AutoDelete & __thiscall AutoCleanup,struct CWSManIPFilter::IPRange *>::Me(void)",
    "public: class AutoDeleteVector & __thiscall AutoCleanup,struct _WSMAN_OPTION *>::operator=(struct _WSMAN_OPTION *)",
    "public: class AutoLocklessItemRecycle & __thiscall AutoLocklessItemRecycle::operator=(class Packet *)",
    "int __stdcall UninstallMigration(class IRequestContext *)",
    "private: class AutoDelete & __thiscall AutoCleanup,unsigned short *>::Me(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class PushSubscribeOperation *>::Me(void)",
    "public: struct _FWXML_ELEMENT * __thiscall PacketParser::GetSoapBody(void)",
    "public: __thiscall AutoCleanup,class CertHash *>::operator class CertHash *(void)",
    "public: class IWSManGroupPolicyObserver & __thiscall IWSManGroupPolicyObserver::operator=(class IWSManGroupPolicyObserver const &)",
    "public: static int __stdcall CSecurity::BeginRevertToSelf(void * *,unsigned long)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CWSManGroupPolicyManager *>::Me(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class WSManHttpListener *>::Me(void)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class CWSManGroupPolicyManager *)",
    "public: __thiscall AutoCleanup,struct IWbemContext *>::~AutoCleanup,struct IWbemContext *>(void)",
    "private: void __thiscall AutoCleanup > >,class std::set > *>::ReleasePtr(void)",
    "public: __thiscall AutoRelease::AutoRelease(struct IEnumWbemClassObject *)",
    "public: __thiscall AutoCleanup,class XmlReader *>::operator class XmlReader *(void)",
    "public: bool __thiscall AutoCleanup,class WmiEnumContext *>::operator!(void)const",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class GPApiManager *)",
    "public: __thiscall AutoDelete >::AutoDelete >(class SafeSet *)",
    "private: class AutoLocklessItemRecycle & __thiscall AutoCleanup,class Packet *>::Me(void)",
    "public: bool __thiscall WSMan::EventHandler::DeInitialize(class IRequestContext &)",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetTo(void)const",
    "private: __thiscall CConfigManager::CConfigManager(void)",
    "FwXmlCloseParser",
    "public: class ShlWApiDllLoader * __thiscall AutoCleanup,class ShlWApiDllLoader *>::Detach(void)",
    "SetServiceSecurity",
    "public: __thiscall LoaderSerializer::LoaderSerializer(bool (__thiscall User32DllLoader::*)(class IRequestContext &),bool (__thiscall User32DllLoader::*)(class IRequestContext &))",
    "public: __thiscall Locale::Locale(class Locale const &)",
    "public: __thiscall SafeMap >::SafeMap >(void)",
    "public: __thiscall AutoCleanup,struct IWbemLocator *>::~AutoCleanup,struct IWbemLocator *>(void)",
    "public: class AutoRelease & __thiscall AutoCleanup,class CCommonConfigSettings *>::operator=(class CCommonConfigSettings *)",
    "public: long __thiscall TSTRBUFFER::SetSize(unsigned int,unsigned int)",
    "public: static int __stdcall ConfigUpdate::AddDefaultPlugins(class IRequestContext *,int)",
    "public: class CWSManEPR * __thiscall AutoCleanup,class CWSManEPR *>::Detach(void)",
    "public: static bool __stdcall WSMan::EventHandler::IsEventEnabled(struct _EVENT_DESCRIPTOR const &)",
    "public: __thiscall AutoCleanup,struct IWbemServices *>::AutoCleanup,struct IWbemServices *>(void)",
    "public: __thiscall PacketParser::ReferenceParameters::ReferenceParameters(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IWbemPathKeyList *>::Me(void)",
    "public: __thiscall AutoCleanup,class ShlWApiDllLoader *>::operator class ShlWApiDllLoader *(void)",
    "public: class SimpleQueue & __thiscall SimpleQueue::operator=(class SimpleQueue const &)",
    "public: class AutoDeleteVector & __thiscall AutoDeleteVector::operator=(unsigned short const *)",
    "public: __thiscall AutoCleanup,class WSMan::Client::Shell *>::operator class WSMan::Client::Shell * const(void)const",
    "public: __thiscall AutoCleanup,class CListenerReceive::MasterReceiveData *>::~AutoCleanup,class CListenerReceive::MasterReceiveData *>(void)",
    "private: void __thiscall AutoCleanup,class PushSubscription *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,struct _WINRS_RUN_COMMAND_ARG *>::~AutoCleanup,struct _WINRS_RUN_COMMAND_ARG *>(void)",
    "public: class TSTRBUFFER * __thiscall AutoCleanup,class TSTRBUFFER *>::Detach(void)",
    "public: bool __thiscall AutoCleanup,char *>::operator!(void)const",
    "public: struct _MI_Instance * * __thiscall AutoCleanup::Storage(void)",
    "public: __thiscall AutoDelete::AutoDelete(class WSMANCONFIGTABLE_IDENTITY *)",
    "public: bool __thiscall CConfigManager::IsCurrentListenerCompat(void)const",
    "public: __thiscall AutoCleanup,class ConfigNotification *>::~AutoCleanup,class ConfigNotification *>(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class WSMan::Client::DeleteShellOperation *>::Me(void)",
    "public: struct IWbemPath * __thiscall AutoCleanup,struct IWbemPath *>::operator->(void)const",
    "public: __thiscall AutoCleanup,struct IWbemLocator *>::AutoCleanup,struct IWbemLocator *>(void)",
    "public: __thiscall AutoCleanup,class CListenerMasterOperation *>::~AutoCleanup,class CListenerMasterOperation *>(void)",
    "public: unsigned long __thiscall PacketFormatter::Decode(class Packet * *)const",
    "FwXmlFindAttribute",
    "public: class AutoLibrary & __thiscall AutoLibrary::operator=(struct HINSTANCE__ *)",
    "public: __thiscall AutoCleanup,class WSMANCONFIGTABLE_IDENTITY *>::operator class WSMANCONFIGTABLE_IDENTITY *(void)",
    "public: long __thiscall TSTRBUFFER::AppendXmlElemWithNamespaceAndPrefix(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,int,unsigned long,struct _XML_ATTRIB *)",
    "public: class CWinRSPluginConfigSettings * __thiscall AutoCleanup,class CWinRSPluginConfigSettings *>::Detach(void)",
    "public: class WSMan::Client::Command * * __thiscall AutoCleanup,class WSMan::Client::Command *>::Storage(void)",
    "private: void __thiscall AutoCleanup,char *>::ReleasePtr(void)",
    "private: int __thiscall CConfigManager::RetrieveCertMappingIdentity(struct HKEY__ *,class CERTMAPPING_IDENTITY *)",
    "public: bool __thiscall AutoCleanup,class IQueryDASHSMASHInterface *>::operator!(void)const",
    "public: class AutoRelease & __thiscall AutoCleanup,class CWinRSPluginConfigCache *>::operator=(class CWinRSPluginConfigCache *)",
    "public: int __thiscall RBUFFER::Resize(unsigned int,unsigned int)",
    "MI_Application_InitializeV1",
    "public: unsigned long __thiscall Locale::GetLCID(void)",
    "protected: int __thiscall ConfigRegistry::SetFinishValue(class IRequestContext *)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class CConfigManager *)",
    "public: virtual void __cdecl CRequestContext::RecordFailure(unsigned long,unsigned long,...)",
    "public: bool __thiscall AutoCleanup,class CRemoteSession *>::operator!(void)const",
    "public: __thiscall AutoCleanup,class Packet *>::operator class Packet *(void)",
    "public: virtual unsigned char const * __thiscall BufferFormatter::GetBuffer(void)const",
    "private: struct _ALIAS_INFORMATION * __thiscall CResourceAlias::FindMatch(unsigned short const *)",
    "public: __thiscall AutoCleanup > > >,class std::queue > > *>::~AutoCleanup > > >,class std::queue > > *>(void)",
    "public: struct _GUID & __thiscall PacketParser::GetSessionIdGuid(void)",
    "public: struct IWbemQuery * __thiscall AutoCleanup,struct IWbemQuery *>::operator->(void)",
    "protected: class CCommonConfigSettings * __thiscall CBaseConfigCache::GetCurrentSettings(class IRequestContext *)",
    "public: __thiscall AutoCleanup::~AutoCleanup(void)",
    "public: class AutoMIInstance & __thiscall AutoMIInstance::operator=(struct _MI_Instance *)",
    "public: __thiscall AutoFwXmlCloseParser::AutoFwXmlCloseParser(void)",
    "private: void __thiscall AutoCleanup,class CSecurity::NetworkServiceSid *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::ReceiveOperation *>::operator class WSMan::Client::ReceiveOperation *(void)",
    "public: int __thiscall CConfigManager::GetCurrentCertMappingIdentity(class CERTMAPPING_IDENTITY *,class IRequestContext *)",
    "public: __thiscall PacketParser::OperationId::OperationId(void)",
    "FwXmlCompareElementNameLen",
    "public: __thiscall AutoCleanup,class Shell32DllLoader *>::~AutoCleanup,class Shell32DllLoader *>(void)",
    "public: __thiscall AutoDelete::AutoDelete(class RobustConnectionBuffer::SendPacketArgs *)",
    "public: void __thiscall XmlReader::RtlSecureZeroMemory(void)",
    "WSManProvEnumerate",
    "public: class AutoFree & __thiscall AutoFree::operator=(unsigned char *)",
    "public: __thiscall Loader::~Loader(void)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class ISubscription *)",
    "public: class Handle * __thiscall AutoCleanup >,class Handle *>::operator->(void)",
    "public: struct IWbemPathKeyList * __thiscall AutoCleanup,struct IWbemPathKeyList *>::operator->(void)const",
    "FwGetParsedDocument",
    "public: int __thiscall CWSManResource::StoreData(class IRequestContext *,unsigned short const *)",
    "WSManPluginOperationComplete",
    "public: class BlockedRecord * * __thiscall SafeMap >::operator[](struct UserKey const &)",
    "public: __thiscall AutoCleanup::operator void *(void)",
    "public: virtual unsigned long __thiscall BufferFormatter::GrowBuffer(void)",
    "protected: int __thiscall ConfigRegistry::ValidateUrlPrefix(class IRequestContext *,unsigned short const *)",
    "public: class Catalog::SecurityEntry * __thiscall AutoCleanup,class Catalog::SecurityEntry *>::Detach(void)",
    "protected: void __thiscall CBaseConfigCache::DoOnChange(enum ConfigChangeSources,unsigned long,enum ConfigChangeSeverityType)",
    "public: __thiscall AutoCleanup > >,class std::set > *>::AutoCleanup > >,class std::set > *>(class std::set > *)",
    "public: __thiscall AutoCleanup,class CWSManGroupPolicyManager *>::~AutoCleanup,class CWSManGroupPolicyManager *>(void)",
    "public: virtual unsigned long __thiscall CErrorContext::GetMessageId(void)const",
    "public: virtual __thiscall CWSManEPR::~CWSManEPR(void)",
    "public: __thiscall AutoCleanup,struct IWbemClassObject *>::operator struct IWbemClassObject *(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class RobustConnectionBuffer::SendPacketArgs *>::Me(void)",
    "public: virtual long __thiscall ILifeTimeMgmt::Release(void (__stdcall*)(void *),void *)",
    "public: virtual void __thiscall CErrorContext::SetCIM_Error(void)",
    "private: void __thiscall AutoCleanup,class WSMan::Client::Shell *>::ReleasePtr(void)",
    "public: class AutoDeleteVector & __thiscall AutoCleanup,unsigned short const * *>::operator=(unsigned short const * *)",
    "public: __thiscall AutoDelete >::AutoDelete >(class Handle *)",
    "public: class FastLock & __thiscall FastLock::operator=(class FastLock const &)",
    "public: virtual void __thiscall CRequestContext::CopyTo(class IRequestContext *)const",
    "public: __thiscall AutoCleanup,struct IWbemLocator *>::AutoCleanup,struct IWbemLocator *>(struct IWbemLocator *)",
    "public: void __thiscall CErrorContext::`default constructor closure'(void)",
    "private: void __thiscall AutoCleanup,class CWSManObject *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class ISpecification *>::AutoCleanup,class ISpecification *>(class ISpecification *)",
    "public: class WSMan::Client::ReceiveOperation * * __thiscall AutoCleanup,class WSMan::Client::ReceiveOperation *>::Storage(void)",
    "public: __thiscall AutoCleanup,struct IWbemLocator *>::operator struct IWbemLocator *(void)",
    "public: bool __thiscall PacketFormatter::SetBOM(unsigned char const *,unsigned long)",
    "public: void __thiscall CWSManCriticalSectionWithConditionVar::WakeAllWaitingForConditionVar(void)",
    "public: class AutoDelete > > & __thiscall AutoDelete > >::operator=(class std::set > *)",
    "public: __thiscall AutoRelease::AutoRelease(class WSMan::Client::ReceiveOperation *)",
    "public: __thiscall AutoDeleteVector::AutoDeleteVector(unsigned char *)",
    "public: static int __stdcall CConfigManager::GetIISConfiguration(class IRequestContext *,unsigned short const *,class XmlReader * *)",
    "public: struct IWbemLocator * __thiscall AutoCleanup,struct IWbemLocator *>::Detach(void)",
    "public: class BlockedRecord * __thiscall AutoCleanup,class BlockedRecord *>::operator->(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CRemoteSession *>::Me(void)",
    "public: __thiscall AutoCleanup,class IpHlpApiDllLoader *>::~AutoCleanup,class IpHlpApiDllLoader *>(void)",
    "public: __thiscall AutoCleanup,class UniqueStringOverflow *>::AutoCleanup,class UniqueStringOverflow *>(class UniqueStringOverflow *)",
    "public: static int __stdcall CConfigManager::IsAutoListenerConfigurationOn(class IRequestContext *,int *)",
    "private: void __thiscall AutoCleanup >,class SafeMap_Iterator *>::ReleasePtr(void)",
    "WSManCreatePushSubscription",
    "public: bool __thiscall UserRecord::IsAdmin(void)const",
    "public: class WSManHttpListener * __thiscall AutoCleanup,class WSManHttpListener *>::operator->(void)",
    "public: class UserRecord * __thiscall AutoCleanup,class UserRecord *>::operator->(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class RunAsConfiguration *>::Me(void)",
    "public: bool __thiscall SafeMap >::Add(class CListenerOperation * const &,struct Empty const &,class IRequestContext &)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class CRequestContext *)",
    "public: long __thiscall ILifeTimeMgmt::GetRefCount(void)",
    "public: static int __stdcall CConfigManager::ReadCertMappingRegistryKey(class IRequestContext *,class CERTMAPPING_IDENTITY *,unsigned short *)",
    "public: __thiscall AutoCleanup,struct IWbemServices *>::~AutoCleanup,struct IWbemServices *>(void)",
    "public: __thiscall AutoCleanup,class ISpecification *>::AutoCleanup,class ISpecification *>(void)",
    "public: struct IUnknown * * __thiscall AutoCleanup,struct IUnknown *>::Storage(void)",
    "public: class PacketParser::PacketElement & __thiscall PacketParser::PacketElement::operator=(class PacketParser::PacketElement const &)",
    "FwXmlIsSimpleContentOrEmpty",
    "public: __thiscall AutoCleanup,class WSMan::Client::SessionOptions::OptionValue *>::~AutoCleanup,class WSMan::Client::SessionOptions::OptionValue *>(void)",
    "public: int __thiscall CConfigManager::GetCurrentShellUriIdentity(class SHELLURI_IDENTITY *,class IRequestContext *)",
    "public: virtual int __thiscall CWSManResourceNoResourceUri::BuildSelectorSet(class BufferFormatter &)",
    "public: void __thiscall RBUFFER::FreeMemory(void)",
    "private: class AutoDelete > & __thiscall AutoCleanup >,class SimpleStack *>::Me(void)",
    "public: __thiscall AutoCleanup,class IISConfigSettings *>::operator class IISConfigSettings *(void)",
    "public: struct _CERT_CHAIN_CONTEXT const * * __thiscall AutoCleanup::Storage(void)",
    "public: __thiscall AutoCleanup,struct IClientSecurity *>::operator struct IClientSecurity *(void)",
    "public: virtual void __thiscall BufferFormatter::SetUpdateMode(enum BufferFormatter::Mode)",
    "public: __thiscall AutoCleanup,class CServiceConfigSettings *>::operator class CServiceConfigSettings *(void)",
    "public: __thiscall AutoCleanup,class CConfigManager *>::operator class CConfigManager *(void)",
    "private: class AutoDelete > & __thiscall AutoCleanup >,class SafeSet *>::Me(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class TSTRBUFFER *>::Me(void)",
    "public: long __thiscall TSTRBUFFER::AppendXmlEndItem(void)",
    "private: int __thiscall PacketParser::ParseFragment(class IRequestContext *,struct _FWXML_ELEMENT *,int)",
    "private: static int __stdcall CBaseConfigCache::InitMap(class IRequestContext *,class AutoRelease &)",
    "public: struct _MI_Class * * __thiscall AutoCleanup::Storage(void)",
    "public: __thiscall AutoCleanup,class CSecurity::InteractiveSid *>::~AutoCleanup,class CSecurity::InteractiveSid *>(void)",
    "public: __thiscall AutoCleanup,struct IClientSecurity *>::~AutoCleanup,struct IClientSecurity *>(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::CreateShellOperation *>::AutoCleanup,class WSMan::Client::CreateShellOperation *>(class WSMan::Client::CreateShellOperation *)",
    "private: int __thiscall PacketParser::ParseReplyTo(class IRequestContext *,struct _FWXML_ELEMENT *)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class GeneralSinkEx *)",
    "FwXmlNumAttributes",
    "public: int __thiscall CWSManResourceNoResourceUri::ParseHeaders(class IRequestContext *,struct _FWXML_ELEMENT *,struct _FWXML_ELEMENT *,struct _FWXML_ELEMENT *)",
    "public: __thiscall AutoCleanup::AutoCleanup(void)",
    "public: __thiscall IWSManGroupPolicyObserver::IWSManGroupPolicyObserver(class IWSManGroupPolicyObserver const &)",
    "public: static void __stdcall EventLog::Info(unsigned long,unsigned short const *)",
    "public: void __thiscall RBUFFER::`default constructor closure'(void)",
    "public: __thiscall AutoCleanup,struct IWbemObjectTextSrc *>::AutoCleanup,struct IWbemObjectTextSrc *>(void)",
    "public: struct IClientSecurity * __thiscall AutoCleanup,struct IClientSecurity *>::operator->(void)const",
    "private: void __thiscall AutoCleanup,class ExpiredOperationIdRecord *>::ReleasePtr(void)",
    "private: void __thiscall AutoCleanup,class CListenerSettings *>::ReleasePtr(void)",
    "public: __thiscall IConfigChangeObserver::IConfigChangeObserver(class IConfigChangeObserver const &)",
    "protected: class CSecurity::NetworkServiceSid * __thiscall ILoader::GetObjectW(void)const",
    "public: __thiscall AutoBstr::AutoBstr(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::Command *>::operator class WSMan::Client::Command *(void)",
    "public: __thiscall CErrorContext::CErrorContext(bool)",
    "private: class AutoDelete & __thiscall AutoCleanup,class Shell32DllLoader *>::Me(void)",
    "private: void __thiscall AutoCleanup,struct IClientSecurity *>::ReleasePtr(void)",
    "public: void __thiscall UserRecord::DecreaseProfileCount(void)",
    "protected: class Shell32DllLoader * __thiscall ILoader::GetObjectW(void)const",
    "public: __thiscall ILoader::ILoader(bool (__thiscall ShlWApiDllLoader::*)(class IRequestContext &),bool (__thiscall ShlWApiDllLoader::*)(class IRequestContext &))",
    "public: struct _WSMAN_STREAM_ID_SET * __thiscall AutoCleanup,struct _WSMAN_STREAM_ID_SET *>::operator->(void)",
    "public: __thiscall AutoRelease::AutoRelease(struct IWbemContext *)",
    "public: class Locale::Resources * __thiscall AutoCleanup,class Locale::Resources *>::Detach(void)",
    "protected: int __thiscall ConfigRegistry::ValidateCBTHardeningLevel(class IRequestContext *,unsigned short const *)",
    "public: __thiscall AutoFree::AutoFree(void)",
    "private: void __thiscall AutoCleanup,class CWSManSession *>::ReleasePtr(void)",
    "public: __thiscall AutoDeleteVector::AutoDeleteVector(char *)",
    "private: __thiscall CWSManGroupPolicyManager::CWSManGroupPolicyManager(void)",
    "public: __thiscall AutoCleanup > >,class std::vector > *>::~AutoCleanup > >,class std::vector > *>(void)",
    "public: struct _CERT_CHAIN_CONTEXT const * __thiscall AutoCleanup::operator->(void)",
    "private: void __thiscall AutoCleanup,class RunAsConfiguration *>::ReleasePtr(void)",
    "public: __thiscall AutoDelete::AutoDelete(class TSTRBUFFER *)",
    "public: __thiscall AutoCleanup,unsigned short const *>::operator unsigned short const *(void)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class EnumSinkEx *)",
    "public: class CWSManObject * __thiscall AutoCleanup,class CWSManObject *>::Detach(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CWinRSPluginConfigCache *>::Me(void)",
    "FwXmlFindChildElementEx",
    "public: __thiscall OnHTTPInitialize::~OnHTTPInitialize(void)",
    "public: int __thiscall PacketParser::ParseSubscriptionAgentPacket(class CRequestContext *,class Packet *,class CServiceConfigSettings *)",
    "public: long __thiscall TSTRBUFFER::AppendXmlElemWithPrefix(unsigned short const *,unsigned short const *,unsigned short const *,int,unsigned long,struct _XML_ATTRIB *)",
    "private: class AutoDelete & __thiscall AutoCleanup,class CBaseConfigCache *>::Me(void)",
    "public: class EnumSinkEx * * __thiscall AutoCleanup,class EnumSinkEx *>::Storage(void)",
    "public: static void __stdcall EventLog::Warning(unsigned long,unsigned short const *)",
    "private: void __thiscall AutoCleanup,class CServiceConfigCache *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,struct IWbemServices *>::AutoCleanup,struct IWbemServices *>(struct IWbemServices *)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class IChannelObserverFactory *)",
    "WSManDeleteInternalEx",
    "public: class WSMan::Client::SignalOperation * __thiscall AutoCleanup,class WSMan::Client::SignalOperation *>::operator->(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::Shell *>::~AutoCleanup,class WSMan::Client::Shell *>(void)",
    "public: __thiscall AutoFwXmlCloseParser::AutoFwXmlCloseParser(void *)",
    "public: static void * __stdcall CSecurity::GetToken(void)",
    "public: struct IEnumWbemClassObject * __thiscall AutoCleanup,struct IEnumWbemClassObject *>::operator->(void)const",
    "public: int __thiscall PacketParser::ParsePacket(class CRequestContext *,class Packet *,class CServiceCommonConfigSettings *)",
    "public: __thiscall AutoCleanup,struct IErrorInfo *>::operator struct IErrorInfo *(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class PacketParser *>::Me(void)",
    "public: class AutoRelease & __thiscall AutoCleanup,struct IEnumWbemClassObject *>::operator=(struct IEnumWbemClassObject *)",
    "public: virtual bool __thiscall SafeMap >::DeInitialize(class IRequestContext &)",
    "public: bool __thiscall AutoCleanup,struct IErrorInfo *>::operator!(void)const",
    "public: __thiscall AutoDelete::AutoDelete(class WSManMemCryptManager *)",
    "public: __thiscall AutoCleanup,class CClientConfigCache *>::~AutoCleanup,class CClientConfigCache *>(void)",
    "FwXmlGetAttributeNameEx",
    "public: struct _WSMAN_OPTION * __thiscall AutoCleanup,struct _WSMAN_OPTION *>::Detach(void)",
    "protected: class CSecurity::AdminSid * __thiscall ILoader::GetObjectW(void)const",
    "public: __thiscall AutoDelete::AutoDelete(class CWSManResource *)",
    "public: class IPCSoapProcessor * __thiscall AutoCleanup,class IPCSoapProcessor *>::Detach(void)",
    "private: virtual __thiscall CServiceConfigCache::~CServiceConfigCache(void)",
    "public: unsigned long __thiscall PacketParser::MessageId::CopyString(unsigned short const *,int)",
    "public: void __thiscall PacketParser::OverrideTimeout(unsigned long)",
    "public: __thiscall AutoCleanup,class CBaseConfigCache *>::operator class CBaseConfigCache *(void)",
    "private: class AutoLocalFree & __thiscall AutoCleanup::Me(void)",
    "public: __thiscall AutoCleanup,struct IAppHostAdminManager *>::AutoCleanup,struct IAppHostAdminManager *>(struct IAppHostAdminManager *)",
    "public: class WSMan::Client::SessionOptions::OptionValue * __thiscall AutoCleanup,class WSMan::Client::SessionOptions::OptionValue *>::Detach(void)",
    "public: static void __stdcall Locale::ShutdownLocaleMap(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::Application *>::~AutoCleanup,class WSMan::Client::Application *>(void)",
    "public: class BlockedRecord * __thiscall AutoCleanup,class BlockedRecord *>::Detach(void)",
    "public: bool __thiscall AutoCleanup,struct IWbemPathKeyList *>::operator!(void)const",
    "private: class AutoRelease & __thiscall AutoCleanup,class CRequestContext *>::Me(void)",
    "public: __thiscall AutoCleanup,class CSecurity::NetworkServiceSid *>::~AutoCleanup,class CSecurity::NetworkServiceSid *>(void)",
    "public: __thiscall AutoCleanup,class ExpiredOperationIdRecord *>::~AutoCleanup,class ExpiredOperationIdRecord *>(void)",
    "public: int __thiscall RBUFFER::Resize(unsigned int)",
    "public: class AutoHandle & __thiscall AutoHandle::operator=(void *)",
    "WSManPluginObjectAndEprResult",
    "public: virtual unsigned long __thiscall CCommonConfigSettings::GetMaxEnvelopeSize(void)",
    "private: int __thiscall PacketParser::ParseHeader(class CRequestContext *,struct _FWXML_ELEMENT *,int,class CServiceCommonConfigSettings *)",
    "public: struct _FWXML_ELEMENT * __thiscall SoapSemanticConverter::GetDescriptionElement(struct _FWXML_ELEMENT *,class IRequestContext *)",
    "public: __thiscall AutoCleanup,class ISpecification *>::operator class ISpecification *(void)",
    "public: class ConfigNotification * __thiscall CConfigManager::RegisterConfigChangeNotification(void *)",
    "public: int __thiscall CWSManResourceNoResourceUri::ParseOptionSet(class IRequestContext *,struct _FWXML_ELEMENT *)",
    "public: bool __thiscall AutoCleanup,unsigned short *>::operator!(void)const",
    "public: __thiscall AutoCleanup,class IQueryDASHSMASHInterface *>::AutoCleanup,class IQueryDASHSMASHInterface *>(void)",
    "public: void __thiscall PacketParser::Fragment::PutValue(unsigned short const *,unsigned short const *,int)",
    "public: int __thiscall CWSManResourceNoResourceUri::AddOption(unsigned short const *,unsigned short const *,int,class IRequestContext *)",
    "public: __thiscall AutoCleanup,class CClientConfigSettings *>::AutoCleanup,class CClientConfigSettings *>(class CClientConfigSettings *)",
    "public: class RobustConnectionBuffer::SendPacketArgs * __thiscall AutoCleanup,class RobustConnectionBuffer::SendPacketArgs *>::operator->(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::SignalOperation *>::AutoCleanup,class WSMan::Client::SignalOperation *>(class WSMan::Client::SignalOperation *)",
    "public: __thiscall AutoCleanup,struct IAppHostElement *>::AutoCleanup,struct IAppHostElement *>(struct IAppHostElement *)",
    "public: __thiscall AutoCleanup,struct IWbemPath *>::AutoCleanup,struct IWbemPath *>(void)",
    "private: void __thiscall AutoCleanup,class WSMan::Client::DeleteShellOperation *>::ReleasePtr(void)",
    "protected: int __thiscall RBUFFER::IsValid(void)const",
    "public: __thiscall AutoCleanup,struct _WINRS_RUN_COMMAND_ARG *>::operator struct _WINRS_RUN_COMMAND_ARG *(void)",
    "private: void __thiscall AutoCleanup,class ShellInfo *>::ReleasePtr(void)",
    "private: static int const PacketFormatter::NUM_CHARSETS",
    "public: class Catalog::SecurityEntry * __thiscall AutoCleanup,class Catalog::SecurityEntry *>::operator->(void)",
    "public: static unsigned long __stdcall CServiceConfigCache::GetCacheCount(void)",
    "public: unsigned long __thiscall PacketParser::SessionId::CreateSessionGuid(unsigned short const *,int)",
    "public: long __thiscall TSTRBUFFER::AppendXmlStartElem(unsigned short const *,int,unsigned long,struct _XML_ATTRIB *)",
    "public: class CWinRSPluginConfigSettings * __thiscall AutoCleanup,class CWinRSPluginConfigSettings *>::operator->(void)",
    "public: __thiscall AutoCleanup,struct IWbemClassObject *>::operator struct IWbemClassObject * const(void)const",
    "public: __thiscall AutoRelease::AutoRelease(class WSMan::Client::DisconnectOperation *)",
    "public: __thiscall AutoCleanup,class CWinRSPluginConfigCache *>::operator class CWinRSPluginConfigCache * const(void)const",
    "public: unsigned short const * __thiscall PacketParser::NotUnderstandSoapHeader::GetNamespaceUrl(void)const",
    "public: class NtDsApiDllLoader * __thiscall AutoCleanup,class NtDsApiDllLoader *>::Detach(void)",
    "public: __thiscall AutoCleanup,class PacketParser *>::operator class PacketParser *(void)",
    "public: void __thiscall FastLock::AcquireShared(void)",
    "private: void __thiscall AutoCleanup,class CClientConfigSettings *>::ReleasePtr(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IAppHostConfigException *>::Me(void)",
    "public: class Shell32DllLoader * __thiscall AutoCleanup,class Shell32DllLoader *>::Detach(void)",
    "public: __thiscall OwnLock::OwnLock(class FastLock &)",
    "public: __thiscall AutoCleanup,class ShellInfo *>::~AutoCleanup,class ShellInfo *>(void)",
    "public: static void __stdcall WSManMemory::FreeBstr(unsigned short *,int,int)",
    "public: struct HKEY__ * __thiscall AutoCleanup::Detach(void)",
    "public: __thiscall AutoCleanup,class CWSManObject *>::AutoCleanup,class CWSManObject *>(class CWSManObject *)",
    "public: virtual long __stdcall CWSManSecurityUI::QueryInterface(struct _GUID const &,void * *)",
    "public: __thiscall AutoCleanup >,class Handle *>::AutoCleanup >,class Handle *>(class Handle *)",
    "public: void __thiscall SBUFFER::FreeMemory(void)",
    "public: __thiscall AutoCleanup,unsigned short * *>::~AutoCleanup,unsigned short * *>(void)",
    "public: class AutoImpersonateUser & __thiscall AutoCleanup::operator=(void *)",
    "public: virtual __thiscall IWSManGroupPolicyObserver::~IWSManGroupPolicyObserver(void)",
    "public: class IConfigChangeObserver & __thiscall IConfigChangeObserver::operator=(class IConfigChangeObserver const &)",
    "private: static struct PacketFormatter::BOMInfo const * const PacketFormatter::BOMS",
    "public: class SafeSet * __thiscall AutoCleanup >,class SafeSet *>::Detach(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IAppHostChildElementCollection *>::Me(void)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class Catalog::SecurityEntry *)",
    "public: int __thiscall PacketParser::IsIdentifyPacket(void)const",
    "public: __thiscall AutoCleanup,class ServiceSoapProcessor *>::~AutoCleanup,class ServiceSoapProcessor *>(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class CSecurity::InteractiveSid *>::Me(void)",
    "public: struct IWbemClassObject * __thiscall AutoCleanup,struct IWbemClassObject *>::Detach(void)",
    "public: struct WSManHttpListener::USER_CONTEXT_INFO * __thiscall SafeMap >::operator[](class StringKeyCI const &)",
    "private: void __thiscall AutoCleanup,class GPApiManager *>::ReleasePtr(void)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class CServiceConfigSettings *)",
    "public: __thiscall AutoCleanup,struct _WSMAN_OPTION *>::AutoCleanup,struct _WSMAN_OPTION *>(struct _WSMAN_OPTION *)",
    "private: void __thiscall AutoCleanup,class CWinRSPluginConfigCache *>::ReleasePtr(void)",
    "public: struct IWbemLocator * * __thiscall AutoCleanup,struct IWbemLocator *>::Storage(void)",
    "public: __thiscall AutoCleanup,class CListenerReceive *>::~AutoCleanup,class CListenerReceive *>(void)",
    "public: __thiscall AutoRegKey::AutoRegKey(struct HKEY__ *)",
    "public: long __thiscall TSTRBUFFER::AppendXmlStartElemWithPrefix(unsigned short const *,unsigned short const *,int,unsigned long,struct _XML_ATTRIB *)",
    "public: struct IUnknown * __thiscall AutoCleanup,struct IUnknown *>::operator->(void)const",
    "public: virtual void __thiscall BufferFormatter::Reset(void)",
    "public: __thiscall AutoCleanup,struct IAppHostPropertyCollection *>::~AutoCleanup,struct IAppHostPropertyCollection *>(void)",
    "public: class AutoCertContext & __thiscall AutoCleanup::operator=(struct _CERT_CONTEXT const *)",
    "public: __thiscall AutoCleanup > >,class std::set > *>::~AutoCleanup > >,class std::set > *>(void)",
    "public: int __thiscall CWSManGroupPolicyManager::GetBool(class IRequestContext *,enum WSManGroupPolicySetting,int *,enum WSManGroupPolicySettingState *)",
    "public: __thiscall AutoRelease::AutoRelease(class CWSManGroupPolicyCache *)",
    "public: __thiscall AutoCleanup,void *>::operator void *(void)",
    "public: __thiscall AutoCleanup,class CWSManEPR *>::~AutoCleanup,class CWSManEPR *>(void)",
    "public: class AutoDelete & __thiscall AutoCleanup,class PacketParser *>::operator=(class PacketParser *)",
    "public: unsigned short * __thiscall AutoCleanup::operator->(void)const",
    "protected: __thiscall CBaseConfigCache::CBaseConfigCache(enum CConfigChangeSource::ConfigLocation,class FastLock *,class CBaseConfigCache::CConfigCacheMap *)",
    "public: __thiscall AutoCleanup,class CObserverConfigChangeErrors *>::operator class CObserverConfigChangeErrors *(void)",
    "const IConfigChangeObserver::`vftable'",
    "public: void __thiscall PacketParser::FreePacket(void)",
    "protected: __thiscall ConfigRegistry::ConfigRegistry(void)",
    "public: __thiscall AutoCleanup,class Packet *>::~AutoCleanup,class Packet *>(void)",
    "public: virtual unsigned long __thiscall CCommonConfigSettings::GetMinEnvelopeSize(void)",
    "public: bool __thiscall SafeMap >::Remove(unsigned __int64 const &)",
    "public: __thiscall OwnLock::~OwnLock(void)",
    "private: int __thiscall CWSManEPR::ProcessRefParameters(class IRequestContext *,struct _FWXML_ELEMENT *)",
    "private: void __thiscall AutoCleanup,class WSMan::Client::DisconnectOperation *>::ReleasePtr(void)",
    "public: __thiscall LoaderSerializer::LoaderSerializer(bool (__thiscall SubscriptionManager::*)(class IRequestContext &),bool (__thiscall SubscriptionManager::*)(class IRequestContext &))",
    "public: virtual void __cdecl CErrorContext::RecordFailure(unsigned long,unsigned long,...)",
    "private: class AutoRelease & __thiscall AutoCleanup,class InboundRequestDetails *>::Me(void)",
    "public: bool __thiscall SafeMap >::Add(class CCertMapping * const &,struct Empty const &,class IRequestContext &)",
    "public: virtual unsigned long __thiscall PacketParser::GetBufferLength(void)",
    "public: bool __thiscall AutoCleanup,class CWSManResource *>::operator!(void)const",
    "public: class AutoDelete & __thiscall AutoCleanup,class TSTRBUFFER *>::operator=(class TSTRBUFFER *)",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetResourceUri(void)const",
    "public: int __thiscall CRequestContext::RecordSoapError(unsigned long,struct _FWXML_ELEMENT *)",
    "public: __thiscall SBUFFER::~SBUFFER(void)",
    "public: __thiscall AutoCleanup,unsigned short * *>::operator unsigned short * * const(void)const",
    "public: class WSMan::Client::DisconnectOperation * __thiscall AutoCleanup,class WSMan::Client::DisconnectOperation *>::operator->(void)",
    "const CWinRSPluginConfigCache::`vftable'{for `ILifeTimeMgmt'}",
    "public: unsigned long __thiscall CircularBufferFormatter::RegisterChunkBoundary(void)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class CRemoteOperation *)",
    "public: void __thiscall TSTRBUFFER::GetWsmanData(struct _WSMAN_DATA *)",
    "public: __thiscall AutoCleanup,class CSecurity::InteractiveSid *>::operator class CSecurity::InteractiveSid *(void)",
    "public: __thiscall AutoDelete::AutoDelete(class ShlWApiDllLoader *)",
    "private: int __thiscall CWSManGroupPolicyManager::RegisterForPolicyNotification(class IRequestContext *,int)",
    "public: __thiscall AutoCleanup,class WSMan::Client::ReconnectOperation *>::AutoCleanup,class WSMan::Client::ReconnectOperation *>(class WSMan::Client::ReconnectOperation *)",
    "private: class AutoFree & __thiscall AutoCleanup,unsigned char *>::Me(void)",
    "public: class AutoObject & __thiscall AutoCleanup::operator=(struct WSMAN_OBJECT *)",
    "public: class ConfigUpdate * __thiscall AutoCleanup,class ConfigUpdate *>::Detach(void)",
    "public: __thiscall ILoader::ILoader(bool (__thiscall WSManMemCryptManager::*)(class IRequestContext &),bool (__thiscall WSManMemCryptManager::*)(class IRequestContext &))",
    "public: __thiscall ILoader::ILoader(bool (__thiscall Locale::Resources::*)(class IRequestContext &),bool (__thiscall Locale::Resources::*)(class IRequestContext &))",
    "public: class WSMan::Client::Application * __thiscall AutoCleanup,class WSMan::Client::Application *>::Detach(void)",
    "public: __thiscall AutoCleanup,class CSecurity::AdminSid *>::~AutoCleanup,class CSecurity::AdminSid *>(void)",
    "public: class AutoMIClass & __thiscall AutoMIClass::operator=(struct _MI_Class *)",
    "public: virtual __thiscall BufferFormatter::~BufferFormatter(void)",
    "public: unsigned short * __thiscall AutoCleanup,unsigned short *>::operator->(void)",
    "public: virtual long __stdcall CWSManSecurityUI::MapGeneric(struct _GUID const *,unsigned char *,unsigned long *)",
    "public: struct _WINRS_RUN_COMMAND_ARG * * __thiscall AutoCleanup,struct _WINRS_RUN_COMMAND_ARG *>::Storage(void)",
    "public: void __thiscall CircularBufferFormatter::DropData(unsigned long)",
    "public: __thiscall AutoDeleteVector::AutoDeleteVector(unsigned short const * *)",
    "public: virtual void __thiscall CErrorContext::RecordFailure(unsigned long)",
    "public: class CWSManEPR * * __thiscall AutoCleanup,class CWSManEPR *>::Storage(void)",
    "public: class PacketParser::NotUnderstandSoapHeader const & __thiscall PacketParser::GetNotUnderstandHeader(void)const",
    "public: class AutoRelease & __thiscall AutoCleanup,class WSManHttpListener *>::operator=(class WSManHttpListener *)",
    "public: unsigned short const * __thiscall XmlReader::GetBuffer(void)",
    "public: class AutoRelease & __thiscall AutoCleanup,class CConfigManager *>::operator=(class CConfigManager *)",
    "public: bool __thiscall SafeMap >::Remove(class StringKeyStore const &)",
    "public: int __thiscall CConfigManager::GetConfigXml(class IRequestContext *,unsigned short const * *,class XmlReader * *,int *)",
    "public: __thiscall AutoCleanup,class CServiceConfigCache *>::AutoCleanup,class CServiceConfigCache *>(class CServiceConfigCache *)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(struct IWbemServices *)",
    "public: __thiscall AutoDelete::AutoDelete(class GeneralSinkEx *)",
    "public: __thiscall TSTRBUFFER::~TSTRBUFFER(void)",
    "public: __thiscall AutoCleanup,class CWSManGroupPolicyCache *>::AutoCleanup,class CWSManGroupPolicyCache *>(class CWSManGroupPolicyCache *)",
    "public: static void __stdcall WSMan::EventHandler::FormatDataDescriptor(struct _EVENT_DATA_DESCRIPTOR &,char const *)",
    "protected: int __thiscall RBUFFER::GetNewStorage(unsigned int)",
    "public: virtual int __thiscall CRequestContext::ProcessContext(int,unsigned long *,struct _WSMAN_FAULT_OBJECT *)",
    "private: class AutoDelete & __thiscall AutoCleanup,class WSMANCONFIGTABLE_IDENTITY *>::Me(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class CServiceConfigCache::CServiceWatcher *>::Me(void)",
    "protected: __thiscall ConfigRegistry::~ConfigRegistry(void)",
    "public: class CShellUriSettings * const & __thiscall SafeSet_Iterator::operator*(void)const",
    "public: int __thiscall CWSManResourceNoResourceUri::SetFragmentDialect(unsigned short const *,class IRequestContext *)",
    "public: class WmiEnumContext * __thiscall AutoCleanup,class WmiEnumContext *>::operator->(void)",
    "public: bool __thiscall Locale::SetThreadUILanguage(class IRequestContext *)",
    "public: static class CWSManResource * __stdcall CWSManResource::Parse(class IRequestContext *,unsigned short const *,unsigned short const *,unsigned short const *,struct _WSMAN_SELECTOR_SET *,struct _WSMAN_OPTION_SET *,int)",
    "private: class AutoDelete > & __thiscall AutoCleanup >,class SafeMap_Iterator *>::Me(void)",
    "public: __thiscall AutoCleanup,struct IWbemQualifierSet *>::operator struct IWbemQualifierSet *(void)",
    "public: virtual void __thiscall CRequestContext::RecordProviderFailure(struct _WSMAN_FAULT_OBJECT *,unsigned short const *,unsigned short const *)",
    "public: __thiscall AutoCleanup,struct IWbemPathKeyList *>::AutoCleanup,struct IWbemPathKeyList *>(void)",
    "public: __thiscall AutoCleanup,class RunAsConfiguration *>::~AutoCleanup,class RunAsConfiguration *>(void)",
    "public: __thiscall AutoCleanup,char *>::operator char *(void)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(struct IUnknown *)",
    "public: __thiscall AutoCleanup,struct _WINRS_RUN_COMMAND_ARG *>::AutoCleanup,struct _WINRS_RUN_COMMAND_ARG *>(struct _WINRS_RUN_COMMAND_ARG *)",
    "public: class AutoDelete & __thiscall AutoCleanup,class SubscriptionEnumerator *>::operator=(class SubscriptionEnumerator *)",
    "public: __thiscall LoaderSerializer::LoaderSerializer(bool (__thiscall IpHlpApiDllLoader::*)(class IRequestContext &),bool (__thiscall IpHlpApiDllLoader::*)(class IRequestContext &))",
    "public: unsigned long & __thiscall SafeMap_Iterator::operator*(void)const",
    "public: unsigned short * __thiscall AutoCleanup,unsigned short *>::Detach(void)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(struct IWbemPathKeyList *)",
    "private: class AutoWaitHandle & __thiscall AutoCleanup::Me(void)",
    "public: __thiscall AutoCleanup,class IRequestContext *>::operator class IRequestContext *(void)",
    "public: __thiscall AutoCleanup,class IQueryDASHSMASHInterface *>::operator class IQueryDASHSMASHInterface * const(void)const",
    "public: __thiscall AutoCleanup,class SubscriptionEnumerator *>::AutoCleanup,class SubscriptionEnumerator *>(class SubscriptionEnumerator *)",
    "public: __thiscall AutoRelease::~AutoRelease(void)",
    "public: __thiscall LoaderSerializer::LoaderSerializer(bool (__thiscall MachineName::*)(class IRequestContext &),bool (__thiscall MachineName::*)(class IRequestContext &))",
    "public: virtual __thiscall CConfigManager::~CConfigManager(void)",
    "public: virtual int __thiscall CCommonConfigSettings::AllowKerberos(void)const",
    "public: __thiscall PacketParser::OperationId::~OperationId(void)",
    "public: class AutoRelease & __thiscall AutoCleanup,struct IWbemClassObject *>::operator=(struct IWbemClassObject *)",
    "public: void __thiscall SafeMap_Iterator::Release(void)",
    "int __stdcall WSManMemoryOperation(enum WSMANMEMOPERATION,void *,unsigned long,unsigned long)",
    "WSManSetSessionOption",
    "private: void __thiscall AutoCleanup,class BlockedRecord *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::SignalOperation *>::~AutoCleanup,class WSMan::Client::SignalOperation *>(void)",
    "public: bool __thiscall AutoCleanup::operator!(void)const",
    "public: class WSMan::Client::Shell * __thiscall AutoCleanup,class WSMan::Client::Shell *>::operator->(void)",
    "public: __thiscall ILoader::ILoader(bool (__thiscall Shell32DllLoader::*)(class IRequestContext &),bool (__thiscall Shell32DllLoader::*)(class IRequestContext &))",
    "private: class AutoDelete & __thiscall AutoCleanup,class Locale::Resources *>::Me(void)",
    "public: __thiscall AutoCleanup,class NtDsApiDllLoader *>::operator class NtDsApiDllLoader *(void)",
    "public: int __thiscall CConfigManager::NextCertMapping(void)",
    "WSManPluginObjectResult",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class CWinRSPluginConfigCache *)",
    "public: void __thiscall Locale::Reset(void)",
    "public: class PacketParser::ReferenceParameters const & __thiscall PacketParser::GetFaultToXml(void)const",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class CBaseConfigCache::CConfigCacheMap *)",
    "public: struct IClientSecurity * __thiscall AutoCleanup,struct IClientSecurity *>::operator->(void)",
    "public: virtual __thiscall IConfigChangeObserver::~IConfigChangeObserver(void)",
    "public: void * __thiscall XmlReader::GetParser(void)",
    "public: __thiscall AutoCleanup,class CWinRSPluginConfigCache *>::~AutoCleanup,class CWinRSPluginConfigCache *>(void)",
    "public: class ServiceSoapProcessor * __thiscall AutoCleanup,class ServiceSoapProcessor *>::operator->(void)",
    "protected: class User32DllLoader * __thiscall ILoader::GetObjectW(void)const",
    "private: void __thiscall AutoCleanup,struct IWbemQualifierSet *>::ReleasePtr(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CWSManResource *>::Me(void)",
    "private: void __thiscall AutoCleanup,class WSMan::Client::Application *>::ReleasePtr(void)",
    "public: int __thiscall CWSManResourceNoResourceUri::UpdateKey(class IRequestContext *,unsigned short const *,unsigned short const *)",
    "public: __thiscall CWSManEPR::CWSManEPR(int)",
    "WSManCloseEnumerationHandle",
    "public: __thiscall AutoCleanup,struct IWbemContext *>::operator struct IWbemContext *(void)",
    "WSManEncodeObjectInternal",
    "public: class AutoDelete & __thiscall AutoCleanup,class UniqueStringOverflow *>::operator=(class UniqueStringOverflow *)",
    "public: __thiscall AutoCleanup,class IISConfigSettings *>::~AutoCleanup,class IISConfigSettings *>(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class CObserverConfigChangeErrors *>::Me(void)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class CWSManResource *)",
    "public: __thiscall AutoCleanup,class CSecurity::AdminSid *>::operator class CSecurity::AdminSid *(void)",
    "public: __thiscall AutoDelete::~AutoDelete(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::ReceiveOperation *>::AutoCleanup,class WSMan::Client::ReceiveOperation *>(class WSMan::Client::ReceiveOperation *)",
    "public: __thiscall AutoCleanup,unsigned char *>::AutoCleanup,unsigned char *>(unsigned char *)",
    "WSManReceiveShellOutput",
    "public: __thiscall CWSManCriticalSection::CWSManCriticalSection(void)",
    "public: __thiscall AutoCleanup,class ISubscription *>::~AutoCleanup,class ISubscription *>(void)",
    "public: class Shell32DllLoader * __thiscall LoaderSerializer::GetInstance(class IRequestContext &)",
    "public: class CServiceConfigSettings::CertThumbprintMappedSet & __thiscall SafeMap_Iterator::operator*(void)const",
    "public: bool __thiscall AutoCleanup,class ConfigUpdate *>::operator!(void)const",
    "public: unsigned long __thiscall CRequestContext::SetMachineName(void)",
    "public: struct _WSMAN_KEY * __thiscall CWSManResourceNoResourceUri::GetKeys(void)",
    "FwXmlIsTrueValue",
    "public: __thiscall AutoCleanup::AutoCleanup(unsigned short *)",
    "public: class CListenerSettings * __thiscall AutoCleanup,class CListenerSettings *>::operator->(void)",
    "public: __thiscall AutoCleanup,class CBaseConfigCache::CConfigCacheMap *>::operator class CBaseConfigCache::CConfigCacheMap *(void)",
    "public: __thiscall AutoEnvironmentBlock::AutoEnvironmentBlock(void *)",
    "int __stdcall UpdateHttpsCertificate(class IRequestContext *,unsigned short const *,unsigned short const *,unsigned short const *,int *,int,struct _GUID)",
    "private: void __thiscall AutoCleanup,struct IWbemContext *>::ReleasePtr(void)",
    "protected: class MachineName * __thiscall ILoader::GetObjectW(void)const",
    "const CWSManGroupPolicyManager::`vftable'",
    "public: static unsigned long const ExtendedSemantic::Confirm",
    "public: __thiscall AutoCleanup,class IRequestContext *>::operator class IRequestContext * const(void)const",
    "WSManPluginAuthzOperationComplete",
    "public: class XmlReader * __thiscall AutoCleanup,class XmlReader *>::operator->(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::ReconnectOperation *>::~AutoCleanup,class WSMan::Client::ReconnectOperation *>(void)",
    "public: __thiscall AutoMIInstance::AutoMIInstance(struct _MI_Instance *)",
    "public: __thiscall AutoRelease::AutoRelease(class CWinRSPluginConfigSettings *)",
    "public: __thiscall AutoRelease::AutoRelease(class CWSManResource *)",
    "public: __thiscall AutoCleanup,struct IWbemPath *>::~AutoCleanup,struct IWbemPath *>(void)",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetMachineId(void)const",
    "private: void __thiscall AutoCleanup,class WSManMemCryptManager *>::ReleasePtr(void)",
    "private: void __thiscall AutoCleanup > > >,class std::queue > > *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup >,class SafeSet *>::~AutoCleanup >,class SafeSet *>(void)",
    "public: virtual void __cdecl CErrorContext::RecordAccessDeniedWithDetail(unsigned long,...)",
    "public: static unsigned long const ExtendedSemantic::ErrorAction",
    "public: __thiscall AutoCleanup,struct _WSMAN_OPTION *>::~AutoCleanup,struct _WSMAN_OPTION *>(void)",
    "FwXmlGetBuffer",
    "public: bool __thiscall SafeMap >::Remove(struct UserKey const &)",
    "public: class AutoDelete > > & __thiscall AutoCleanup > >,class std::set > *>::operator=(class std::set > *)",
    "public: struct IWbemClassObject * * __thiscall AutoCleanup,struct IWbemClassObject *>::Storage(void)",
    "public: int __thiscall CConfigManager::NextRow(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class WSMan::Client::SignalOperation *>::Me(void)",
    "public: class Packet * * __thiscall AutoCleanup,class Packet *>::Storage(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class CListenerReceive::MasterReceiveData *>::Me(void)",
    "int __stdcall ClearSubKeys(struct HKEY__ *,class IRequestContext *)",
    "public: __thiscall SafeMap_Lock >::SafeMap_Lock >(class SafeMap > const &,bool)",
    "public: __thiscall AutoCleanup,struct _WSMAN_OPTION *>::operator struct _WSMAN_OPTION *(void)",
    "public: unsigned short const * * __thiscall AutoCleanup,unsigned short const * *>::operator->(void)const",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class CWSManEPR *)",
    "WSManCreateEnumeratorInternal",
    "public: bool __thiscall UserRecord::ApplyQuota(enum OperationType,class IRequestContext &,class Catalog::Provider const *,class CServiceConfigSettings *)",
    "public: long __thiscall TSTRBUFFER::Append(unsigned short const *)",
    "public: virtual unsigned long __thiscall CCommonConfigSettings::GetMinBatchSize(void)",
    "public: static int __stdcall CSecurity::DuplicateCurrentToken(void * *,unsigned long,struct _SECURITY_ATTRIBUTES *,enum _SECURITY_IMPERSONATION_LEVEL,enum _TOKEN_TYPE,int)",
    "public: int __thiscall SafeMap >::Size(void)const",
    "private: void __thiscall AutoCleanup,class MachineName *>::ReleasePtr(void)",
    "public: class AutoMIInstance & __thiscall AutoCleanup::operator=(struct _MI_Instance *)",
    "public: bool __thiscall AutoCleanup,class GeneralSinkEx *>::operator!(void)const",
    "public: class SubscriptionManager * __thiscall AutoCleanup,class SubscriptionManager *>::Detach(void)",
    "public: bool __thiscall UserRecord::AddRef(class IRequestContext &)",
    "private: class AutoCoTaskMemFree & __thiscall AutoCleanup::Me(void)",
    "private: void __thiscall AutoCleanup,class WSMan::Client::CreateShellOperation *>::ReleasePtr(void)",
    "public: void * * __thiscall AutoCleanup,void *>::Storage(void)",
    "private: unsigned short const * __thiscall CWSManGroupPolicyManager::GetPolicyLocation(struct _WSMAN_POLICY_INFO const *)",
    "protected: class NtDsApiDllLoader * __thiscall ILoader::GetObjectW(void)const",
    "public: __thiscall AutoCleanup,class CWSManGroupPolicyCache *>::operator class CWSManGroupPolicyCache *(void)",
    "public: __thiscall AutoRelease::AutoRelease(class WSMan::Client::Shell *)",
    "private: class AutoDeleteVector & __thiscall AutoCleanup,struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *>::Me(void)",
    "public: class CWSManEPR * __thiscall AutoCleanup,class CWSManEPR *>::operator->(void)const",
    "WSManConnectShell",
    "public: __thiscall AutoDeleteVector::AutoDeleteVector(struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *)",
    "public: class WSMan::EventHandler * __thiscall LoaderSerializer::GetInstance(class IRequestContext &)",
    "public: static void __stdcall WSMan::EventHandler::FormatDataDescriptor(struct _EVENT_DATA_DESCRIPTOR &,unsigned short &)",
    "public: __thiscall AutoRelease::AutoRelease(class CBaseConfigCache *)",
    "public: __thiscall AutoCleanup,class EnumSinkEx *>::~AutoCleanup,class EnumSinkEx *>(void)",
    "public: __thiscall AutoCleanup,struct _SID *>::AutoCleanup,struct _SID *>(struct _SID *)",
    "private: void __thiscall AutoCleanup,struct IAppHostChildElementCollection *>::ReleasePtr(void)",
    "public: class CShellUriSettings * __thiscall AutoCleanup,class CShellUriSettings *>::operator->(void)",
    "public: struct IWbemServices * * __thiscall AutoCleanup,struct IWbemServices *>::Storage(void)",
    "public: __thiscall WSMan::EventHandler::~EventHandler(void)",
    "public: int __thiscall CWSManResource::SetUri(unsigned short const *,class IRequestContext *)",
    "public: class AutoEnvironmentBlock & __thiscall AutoEnvironmentBlock::operator=(void *)",
    "public: __thiscall LoaderSerializer::LoaderSerializer(bool (__thiscall CSecurity::NetworkServiceSid::*)(class IRequestContext &),bool (__thiscall CSecurity::NetworkServiceSid::*)(class IRequestContext &))",
    "public: __thiscall AutoCleanup >,class SimpleStack *>::~AutoCleanup >,class SimpleStack *>(void)",
    "public: static class CConfigManager * __stdcall CConfigManager::GetConfigManager(void)",
    "public: __thiscall AutoCleanup,unsigned short * *>::AutoCleanup,unsigned short * *>(void)",
    "public: unsigned long __thiscall PacketFormatter::Encode(unsigned short const *,unsigned long,unsigned char *,unsigned long,unsigned char * *,unsigned long *,bool)const",
    "WSManCloseObjectHandle",
    "private: int __thiscall CRequestContext::RecordText(unsigned long,unsigned short const *,unsigned int,unsigned long)",
    "public: __thiscall AutoMIClass::AutoMIClass(void)",
    "unsigned short * __stdcall StringTrimWhitespace(unsigned short *)",
    "public: class AutoRelease & __thiscall AutoCleanup,class CWSManEPR *>::operator=(class CWSManEPR *)",
    "public: unsigned short const * * __thiscall AutoCleanup,unsigned short const *>::Storage(void)",
    "public: int __thiscall CConfigManager::IsCurrentListenerAutoConfigured(class IRequestContext *,int *)",
    "public: unsigned long __thiscall SimpleQueue::push(union _LARGE_INTEGER)",
    "public: class ExpiredOperationIdRecord * * __thiscall SafeMap >::operator[](class StringKeyStore const &)",
    "public: class WSMan::Client::ConnectShellOperation * __thiscall AutoCleanup,class WSMan::Client::ConnectShellOperation *>::operator->(void)",
    "public: __thiscall AutoDelete::AutoDelete(class MachineName *)",
    "public: unsigned short const * __thiscall CWSManResourceNoResourceUri::GetOptionValue(unsigned short const *)",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetDataLocale(void)const",
    "public: static int __stdcall CSecurity::ImpersonateUserOrSelf(enum CallSiteId,void *)",
    "public: virtual unsigned long __thiscall CRequestContext::GetMessageId(void)const",
    "public: static void __stdcall WSMan::EventHandler::FormatDataDescriptor(struct _EVENT_DATA_DESCRIPTOR &,unsigned short const *)",
    "public: class AutoDelete > & __thiscall AutoDelete >::operator=(class SafeSet_Iterator *)",
    "public: virtual __thiscall CircularBufferFormatter::~CircularBufferFormatter(void)",
    "private: int __thiscall CWSManGroupPolicyManager::DeInitialize(void)",
    "public: __thiscall AutoWaitHandle::~AutoWaitHandle(void)",
    "public: class WSMan::Client::SessionOptions::OptionValue * * __thiscall SafeMap >::operator[](enum WSManSessionOption const &)",
    "public: __thiscall AutoCleanup,class CWinRSPluginConfigCache *>::operator class CWinRSPluginConfigCache *(void)",
    "protected: void __thiscall RBUFFER::SetValid(int)",
    "public: class IpHlpApiDllLoader * __thiscall LoaderSerializer::GetInstance(class IRequestContext &)",
    "public: virtual int __thiscall CWSManResourceNoResourceUri::BuildFragmentTransfer(class BufferFormatter &)",
    "WSManPullEvents",
    "public: virtual class BufferFormatter & __thiscall BufferFormatter::operator<<(class BufferFormatterDataFormatULONGLONG &)",
    "public: class AutoRelease & __thiscall AutoCleanup,class CClientConfigSettings *>::operator=(class CClientConfigSettings *)",
    "public: class CServiceCommonConfigSettings * __thiscall AutoCleanup,class CServiceCommonConfigSettings *>::operator->(void)",
    "public: static void __stdcall EventLog::ReportEventW(unsigned short,unsigned long,unsigned short,unsigned short const * *)",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetRequestedLocale(void)const",
    "public: long __thiscall TSTRBUFFER::AppendXmlElem(unsigned short const *,unsigned short const *,int,unsigned long,struct _XML_ATTRIB *)",
    "public: static unsigned long const ExtendedSemantic::Warning",
    "public: virtual long __stdcall CWSManSecurityUI::GetObjectInformation(struct _SI_OBJECT_INFO *)",
    "public: class Locale::Resources * __thiscall LoaderSerializer::GetInstance(class IRequestContext &)",
    "mi_clientFT_V1",
    "private: class AutoRelease & __thiscall AutoCleanup,class PushSubscription *>::Me(void)",
    "private: int __thiscall CWSManGroupPolicyManager::ValidateString(class IRequestContext *,struct _WSMAN_POLICY_INFO const *,unsigned short const *)",
    "public: int __thiscall CWSManResourceNoResourceUri::BuildOptionSet(class BufferFormatter &)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class CRemoteSession *)",
    "public: __thiscall AutoCleanup,class ISubscription *>::AutoCleanup,class ISubscription *>(class ISubscription *)",
    "public: bool __thiscall ILoader::IsEmpty(void)const",
    "public: void __thiscall FastLock::ReleaseExclusive(void)",
    "public: class TSTRBUFFER * __thiscall AutoCleanup,class TSTRBUFFER *>::operator->(void)",
    "public: __thiscall AutoCleanup,class Locale::Resources *>::AutoCleanup,class Locale::Resources *>(class Locale::Resources *)",
    "private: int __thiscall PacketParser::ParseAction(class IRequestContext *,struct _FWXML_ELEMENT *,bool)",
    "public: unsigned long __thiscall CWSManResourceNoResourceUri::GetKeyCount(void)",
    "FwXmlCompareElementNameSpace",
    "private: class AutoRelease & __thiscall AutoCleanup,class ConfigNotification *>::Me(void)",
    "public: __thiscall AutoChainContext::~AutoChainContext(void)",
    "public: __thiscall AutoCleanup,unsigned short const * *>::AutoCleanup,unsigned short const * *>(void)",
    "public: class SubscriptionManager * __thiscall LoaderSerializer::GetInstance(class IRequestContext &)",
    "public: __thiscall AutoCleanup,unsigned short const *>::~AutoCleanup,unsigned short const *>(void)",
    "public: unsigned char * __thiscall AutoCleanup,unsigned char *>::operator->(void)",
    "private: void __thiscall AutoCleanup,class PacketParser *>::ReleasePtr(void)",
    "protected: bool __thiscall CWSManResourceNoResourceUri::ResizeOptionList(unsigned int,class IRequestContext &)",
    "private: void __thiscall AutoCleanup,class CListenerCommand *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class CCertMapping *>::operator class CCertMapping *(void)",
    "private: void __thiscall AutoCleanup,class WSMan::Client::Command *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class MachineName *>::operator class MachineName *(void)",
    "public: int __thiscall CConfigManager::GetBool(class IRequestContext *,enum ConfigSetting,int *,enum WSManConfigSource *)",
    "public: void __thiscall UserRecord::ReleaseQuota(enum OperationType,class Catalog::Provider const *)",
    "public: class GeneralSinkEx * __thiscall AutoCleanup,class GeneralSinkEx *>::Detach(void)",
    "public: unsigned long __thiscall PacketParser::PacketElement::GetValue(void)const",
    "public: void __thiscall PacketParser::NotUnderstandSoapHeader::PutValue(unsigned short const *,unsigned short const *,unsigned short const *)",
    "private: void __thiscall AutoCleanup,class IChannelObserverFactory *>::ReleasePtr(void)",
    "public: static int __stdcall CSecurity::EndRevertToSelf(void *)",
    "unsigned short * __stdcall CopyString(class IRequestContext *,enum CallSiteId,unsigned short const *)",
    "public: __thiscall AutoCleanup,class WmiEnumContext *>::AutoCleanup,class WmiEnumContext *>(void)",
    "FwXmlNumConsecutiveChildrenWithName",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class CObserverConfigChangeErrors *)",
    "public: class IQueryDASHSMASHInterface * * __thiscall AutoCleanup,class IQueryDASHSMASHInterface *>::Storage(void)",
    "public: virtual long __stdcall CWSManSecurityUI::GetAccessRights(struct _GUID const *,unsigned long,struct _SI_ACCESS * *,unsigned long *,unsigned long *)",
    "public: __thiscall AutoCleanup,class UserRecord *>::operator class UserRecord * const(void)const",
    "public: __thiscall AutoCleanup,class CListenerCommand *>::~AutoCleanup,class CListenerCommand *>(void)",
    "WSManInvokeInternalEx",
    "public: __thiscall AutoCleanup >,class SafeSet *>::operator class SafeSet *(void)",
    "int __stdcall WSManPostThreadMessageW(unsigned long,unsigned int,unsigned int,long)",
    "public: __thiscall AutoCleanup,class HostMappingTableEntry *>::~AutoCleanup,class HostMappingTableEntry *>(void)",
    "public: bool __thiscall AutoCleanup,unsigned short * *>::operator!(void)const",
    "public: __thiscall IWSManGroupPolicyPublisher::IWSManGroupPolicyPublisher(void)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(struct IWbemObjectTextSrc *)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class ISpecification *)",
    "public: class AutoRelease & __thiscall AutoCleanup,struct IUnknown *>::operator=(struct IUnknown *)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class CClientConfigSettings *)",
    "private: int __thiscall CWSManEPR::ProcessEPR(class IRequestContext *,struct _FWXML_ELEMENT *)",
    "public: class CListenerReceive::MasterReceiveData * __thiscall AutoCleanup,class CListenerReceive::MasterReceiveData *>::operator->(void)",
    "private: void __thiscall AutoCleanup,struct IAppHostElement *>::ReleasePtr(void)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(struct IWbemLocator *)",
    "public: __thiscall AutoDelete::AutoDelete(class CredUIDllLoader *)",
    "public: class AutoRelease & __thiscall AutoCleanup,class CWSManResource *>::operator=(class CWSManResource *)",
    "public: __thiscall AutoCleanup,class CSecurity::AdminSid *>::AutoCleanup,class CSecurity::AdminSid *>(class CSecurity::AdminSid *)",
    "public: virtual void __thiscall SafeMap >::Release(void)const",
    "public: class AutoRelease & __thiscall AutoCleanup,class CServiceCommonConfigSettings *>::operator=(class CServiceCommonConfigSettings *)",
    "public: __thiscall AutoCleanup::operator unsigned short *(void)",
    "public: class CRemoteSession * __thiscall AutoCleanup,class CRemoteSession *>::operator->(void)const",
    "public: __thiscall CRequestContext::CRequestContext(void)",
    "WSManClosePublisherHandle",
    "private: void __thiscall AutoCleanup,class CListenerMasterOperation *>::ReleasePtr(void)",
    "private: int __thiscall CConfigManager::GetStringInternal(class IRequestContext *,enum ConfigSetting,unsigned long,unsigned long,unsigned short *,unsigned long *,enum WSManConfigSource *)",
    "public: void __thiscall PacketParser::ParseStream(class CRequestContext *,class ITransportReceiver *,class Packet *,class CServiceCommonConfigSettings *)",
    "private: class AutoDelete & __thiscall AutoCleanup,class ExpiredOperationIdRecord *>::Me(void)",
    "public: __thiscall AutoDelete::AutoDelete(class CertHash *)",
    "public: class AutoRelease & __thiscall AutoCleanup,class CWSManGroupPolicyManager *>::operator=(class CWSManGroupPolicyManager *)",
    "unsigned short * __stdcall CopyString(unsigned short const *,int const &,class IRequestContext &)",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetTimeout(void)const",
    "public: unsigned long * __thiscall SafeMap >::operator[](class StringKeyCI const &)",
    "public: struct IUnknown * __thiscall AutoCleanup,struct IUnknown *>::operator->(void)",
    "public: __thiscall PacketParser::Fragment::Fragment(void)",
    "public: __thiscall AutoCleanup,struct IAppHostElementCollection *>::~AutoCleanup,struct IAppHostElementCollection *>(void)",
    "public: __thiscall ILoader::~ILoader(void)",
    "public: __thiscall AutoCleanup,unsigned short * *>::operator unsigned short * *(void)",
    "private: unsigned long __thiscall PacketParser::ReferenceParameters::SetXml(class BufferFormatter &,struct _FWXML_ELEMENT *)",
    "public: virtual void __thiscall CErrorContext::RecordProviderFailure(struct _WSMAN_FAULT_OBJECT *,unsigned short const *,unsigned short const *)",
    "public: bool __thiscall SafeMap >::Add(class StringKeyCI const &,unsigned long const &,class IRequestContext &)",
    "public: class CServiceConfigCache::CServiceWatcher * __thiscall CServiceConfigCache::WatchForChanges(class IRequestContext *,class IServiceConfigObserver *)",
    "public: __thiscall AutoCleanup,class CWSManObject *>::~AutoCleanup,class CWSManObject *>(void)",
    "private: void __thiscall AutoCleanup,class WSMan::Client::ReceiveOperation *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class IpHlpApiDllLoader *>::operator class IpHlpApiDllLoader *(void)",
    "FwXmlIsEmpty",
    "public: __thiscall AutoDelete::AutoDelete(class RunAsConfiguration *)",
    "public: void * __thiscall AutoCleanup::operator->(void)",
    "public: class PacketPool & __thiscall PacketParser::GetPacketPool(void)",
    "private: int __thiscall PacketParser::ParseLocale(class IRequestContext *,struct _FWXML_ELEMENT *,int)",
    "public: int __thiscall CRequestContext::ProcessContext(int,struct _WSMAN_ENUMERATOR_RESULT *)",
    "private: __thiscall CClientConfigCache::CClientConfigCache(void)",
    "public: __thiscall AutoCleanup,struct IAppHostConfigException *>::AutoCleanup,struct IAppHostConfigException *>(struct IAppHostConfigException *)",
    "public: __thiscall AutoCleanup,class HostMappingTableEntry *>::AutoCleanup,class HostMappingTableEntry *>(class HostMappingTableEntry *)",
    "public: __thiscall AutoDelete::AutoDelete(void)",
    "private: int __thiscall CConfigManager::CreateAutoConfiguredListener(class IRequestContext *,class LISTENER_IDENTITY *)",
    "private: class AutoDelete & __thiscall AutoCleanup,class CWSManEPR *>::Me(void)",
    "public: struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE * * __thiscall AutoCleanup,struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *>::Storage(void)",
    "public: class AutoWaitHandle & __thiscall AutoCleanup::operator=(void *)",
    "WSManInvokeInternal",
    "WSManPluginObjectAndBookmarkResult",
    "public: unsigned short const * __thiscall TSTRBUFFER::First(void)const",
    "public: __thiscall AutoDelete::AutoDelete(class CListenerSettings *)",
    "protected: int __thiscall CWSManResourceNoResourceUri::ProcessOption(class IRequestContext *,unsigned short const *,unsigned short const *,unsigned short const *,int)",
    "public: bool __thiscall AutoCleanup,class CRequestContext *>::operator!(void)const",
    "private: void __thiscall AutoCleanup,class CBaseConfigCache::CConfigCacheMap *>::ReleasePtr(void)",
    "public: void __thiscall CWSManCriticalSection::Release(void)",
    "public: virtual class BufferFormatter & __thiscall BufferFormatter::operator<<(class BufferFormatterDataFormatDWORD &)",
    "public: __thiscall AutoCoTaskMemFree::~AutoCoTaskMemFree(void)",
    "FwXmlGetRemainder",
    "private: class AutoDelete & __thiscall AutoCleanup,class GeneralSinkEx *>::Me(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IAppHostAdminManager *>::Me(void)",
    "public: __thiscall AutoCleanup,unsigned short *>::AutoCleanup,unsigned short *>(unsigned short *)",
    "public: class AutoRelease & __thiscall AutoCleanup,class IRequestContext *>::operator=(class IRequestContext *)",
    "public: class AutoDelete & __thiscall AutoCleanup,class CWSManResource *>::operator=(class CWSManResource *)",
    "public: __thiscall FastLock::FastLock(void)",
    "public: class AutoDeleteVector & __thiscall AutoCleanup,struct _WINRS_RUN_COMMAND_ARG *>::operator=(struct _WINRS_RUN_COMMAND_ARG *)",
    "FwXmlIsMustUnderstand",
    "public: __thiscall AutoCleanup,class WSMan::Client::ProxyManager *>::~AutoCleanup,class WSMan::Client::ProxyManager *>(void)",
    "private: bool __thiscall SoapSemanticConverter::GetPromptType(unsigned short const *,enum _MI_PromptType *,class IRequestContext *)",
    "private: void __thiscall AutoCleanup,struct _SID *>::ReleasePtr(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class CCertMapping *>::Me(void)",
    "public: class AutoDelete & __thiscall AutoCleanup,unsigned short *>::operator=(unsigned short *)",
    "private: class AutoDelete & __thiscall AutoCleanup,class ISpecification *>::Me(void)",
    "public: struct IWbemPathKeyList * __thiscall AutoCleanup,struct IWbemPathKeyList *>::Detach(void)",
    "WSManProvPut",
    "private: void __thiscall AutoCleanup::ReleasePtr(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CServiceConfigSettings *>::Me(void)",
    "public: unsigned short * __thiscall AutoCleanup::Detach(void)",
    "public: class PacketFormatter & __thiscall PacketFormatter::operator=(class PacketFormatter const &)",
    "public: __thiscall AutoCleanup,class ISpecification *>::operator class ISpecification * const(void)const",
    "public: long __thiscall SBUFFER::Append(unsigned char *,unsigned int)",
    "public: __thiscall AutoCleanup,class TSTRBUFFER *>::operator class TSTRBUFFER *(void)",
    "public: __thiscall AutoCleanup,struct IWbemServices *>::operator struct IWbemServices * const(void)const",
    "public: __thiscall AutoCleanup,class GeneralSinkEx *>::AutoCleanup,class GeneralSinkEx *>(class GeneralSinkEx *)",
    "public: class User32DllLoader * __thiscall LoaderSerializer::GetInstance(class IRequestContext &)",
    "public: class std::vector > * __thiscall AutoCleanup > >,class std::vector > *>::operator->(void)",
    "public: __thiscall AutoRelease::AutoRelease(class CWSManObject *)",
    "public: virtual __thiscall CBaseConfigCache::~CBaseConfigCache(void)",
    "public: void __thiscall CRequestContext::CompleteWithErrorContext(struct _WSMAN_PLUGIN_REQUEST *)",
    "private: virtual class CCommonConfigSettings * __thiscall CWinRSPluginConfigCache::ReadDefaultSettings(class IRequestContext *)",
    "public: __thiscall AutoCleanup,class CServiceConfigCache::CServiceWatcher *>::operator class CServiceConfigCache::CServiceWatcher *(void)",
    "public: __thiscall AutoCleanup,unsigned char *>::operator unsigned char *(void)",
    "public: __thiscall AutoCleanup,class CServiceConfigCache *>::~AutoCleanup,class CServiceConfigCache *>(void)",
    "public: virtual unsigned long __thiscall CErrorContext::GetErrorCode(void)const",
    "public: virtual __thiscall CRequestContext::~CRequestContext(void)",
    "public: virtual unsigned long __stdcall CWSManSecurityUI::Release(void)",
    "public: __thiscall AutoCleanup,class CBaseConfigCache *>::AutoCleanup,class CBaseConfigCache *>(class CBaseConfigCache *)",
    "public: class IRequestContext * __thiscall AutoCleanup,class IRequestContext *>::operator->(void)",
    "public: __thiscall AutoRelease::AutoRelease(class CRemoteOperation *)",
    "public: virtual bool __thiscall PacketParser::WaitForMore(void)",
    "public: void * __thiscall AutoCleanup::operator->(void)const",
    "public: unsigned short const * __thiscall CWSManResourceNoResourceUri::GetFragmentPath(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CConfigManager *>::Me(void)",
    "public: class CSecurity::NetworkServiceSid * __thiscall LoaderSerializer::GetInstance(class IRequestContext &)",
    "public: __thiscall AutoCleanup::operator unsigned short * const(void)const",
    "public: unsigned long __thiscall PacketParser::ReferenceParameters::PutValue(struct _FWXML_ELEMENT *,int)",
    "public: __thiscall WSMan::EventHandler::EventHandler(void)",
    "private: struct _FWXML_ELEMENT * __thiscall SoapSemanticConverter::GetEventTypeAndResponseElement(struct _FWXML_ELEMENT *,unsigned long *,class IRequestContext *)",
    "public: unsigned short const * __thiscall CWSManResource::GetUri(void)",
    "WSManReconnectShellCommand",
    "FwIsXmlEscapedProperly",
    "public: __thiscall AutoCleanup,class CertHash *>::AutoCleanup,class CertHash *>(class CertHash *)",
    "public: __thiscall AutoCleanup,class NtDsApiDllLoader *>::~AutoCleanup,class NtDsApiDllLoader *>(void)",
    "public: class AutoDeleteVector & __thiscall AutoCleanup,struct _CONFIG_UPDATE *>::operator=(struct _CONFIG_UPDATE *)",
    "public: __thiscall AutoHandle::AutoHandle(void)",
    "protected: class CredUIDllLoader * __thiscall ILoader::GetObjectW(void)const",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(struct IWbemContext *)",
    "private: void __thiscall AutoCleanup,class CServiceConfigCache::CServiceWatcher *>::ReleasePtr(void)",
    "public: class CredUIDllLoader * __thiscall AutoCleanup,class CredUIDllLoader *>::Detach(void)",
    "private: int __thiscall PacketParser::ParseMessageId(class IRequestContext *,struct _FWXML_ELEMENT *,bool)",
    "public: __thiscall AutoCleanup,unsigned short const * *>::operator unsigned short const * *(void)",
    "public: class Locale & __thiscall PacketParser::GetDataLocaleHelper(void)",
    "public: class CWinRSPluginConfigSettings * __thiscall CWinRSPluginConfigCache::GetCurrentSettings(class IRequestContext *)",
    "public: bool __thiscall AutoCleanup,struct _WINRS_RUN_COMMAND_ARG *>::operator!(void)const",
    "public: __thiscall AutoCleanup,struct IAppHostChildElementCollection *>::~AutoCleanup,struct IAppHostChildElementCollection *>(void)",
    "private: void __thiscall AutoCleanup,class WSMan::EventHandler *>::ReleasePtr(void)",
    "private: int __thiscall PacketParser::ParseSessionId(class IRequestContext *,struct _FWXML_ELEMENT *,int)",
    "public: void __thiscall SimpleQueue::pop(void)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(struct IWbemQualifierSet *)",
    "public: __thiscall AutoLibrary::AutoLibrary(struct HINSTANCE__ *)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(unsigned short *)",
    "WSManProvGet",
    "private: void __thiscall AutoCleanup,class UserRecord *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class XmlReader *>::AutoCleanup,class XmlReader *>(class XmlReader *)",
    "private: void __thiscall AutoCleanup,class ISubscription *>::ReleasePtr(void)",
    "public: virtual void __thiscall CRequestContext::RecordFailure(struct _WSMAN_FAULT_OBJECT *)",
    "WSManProvInvoke",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IClientSecurity *>::Me(void)",
    "public: struct CWSManIPFilter::IPRange * * __thiscall AutoCleanup,struct CWSManIPFilter::IPRange *>::Storage(void)",
    "public: class CServiceConfigSettings * __thiscall CServiceConfigCache::GetCurrentSettings(class IRequestContext *)",
    "public: class WSMANCONFIGTABLE_IDENTITY * __thiscall AutoCleanup,class WSMANCONFIGTABLE_IDENTITY *>::operator->(void)",
    "private: void __thiscall AutoCleanup,class CShellUriSettings *>::ReleasePtr(void)",
    "public: static int __stdcall CConfigManager::WriteCredentialsToCredmanStore(class IRequestContext *,unsigned short *,unsigned short *,int)",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IWbemQualifierSet *>::Me(void)",
    "public: char * __thiscall AutoCleanup,char *>::Detach(void)",
    "const CWSManSecurityUI::`vftable'",
    "public: __thiscall AutoRelease::AutoRelease(class WSMan::Client::DeleteShellOperation *)",
    "public: __thiscall AutoDelete::AutoDelete(class CShellUriSettings *)",
    "public: __thiscall CWSManSecurityUI::~CWSManSecurityUI(void)",
    "public: __thiscall AutoCleanup > >,class std::vector > *>::operator class std::vector > *(void)",
    "private: bool __thiscall Locale::Format(unsigned long,char * *,void * *,unsigned short *,unsigned long,unsigned short,enum CallSiteId)const",
    "public: static class CClientConfigCache * __stdcall CClientConfigCache::GetConfigCache(class IRequestContext *,int)",
    "public: bool __thiscall SoapSemanticConverter::IsEvent(struct _FWXML_ELEMENT *)",
    "FwXmlCreateXmlFromElement",
    "public: __thiscall ILoader::ILoader(bool (__thiscall MachineName::*)(class IRequestContext &),bool (__thiscall MachineName::*)(class IRequestContext &))",
    "const UserRecord::`vftable'",
    "public: __thiscall AutoRelease::AutoRelease(struct IWbemServices *)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class ServiceSoapProcessor *)",
    "public: int __thiscall CRequestContext::ProcessContext(int,struct _WSMAN_RESULT *)",
    "public: __thiscall AutoCleanup,class CBaseConfigCache *>::~AutoCleanup,class CBaseConfigCache *>(void)",
    "public: __thiscall AutoCleanup,class IQueryDASHSMASHInterface *>::AutoCleanup,class IQueryDASHSMASHInterface *>(class IQueryDASHSMASHInterface *)",
    "private: void __thiscall AutoCleanup,struct CWSManIPFilter::IPRange *>::ReleasePtr(void)",
    "private: class AutoDelete > & __thiscall AutoCleanup >,class Handle *>::Me(void)",
    "private: class AutoSecurityDescriptor & __thiscall AutoCleanup::Me(void)",
    "private: void __thiscall AutoCleanup,class CListenerReceive::MasterReceiveData *>::ReleasePtr(void)",
    "public: class AutoDelete & __thiscall AutoCleanup,class ServiceSoapProcessor *>::operator=(class ServiceSoapProcessor *)",
    "public: bool __thiscall AutoCleanup,unsigned short const * *>::operator!(void)const",
    "public: __thiscall AutoCleanup::AutoCleanup(struct _CERT_CONTEXT const *)",
    "private: class AutoDelete & __thiscall AutoCleanup,class UniqueStringOverflow *>::Me(void)",
    "public: static class CWSManGroupPolicyManager * __stdcall CWSManGroupPolicyManager::GetGroupPolicyManager(class IRequestContext *,unsigned short const *)",
    "public: __thiscall AutoCleanup,class WSMan::EventHandler *>::operator class WSMan::EventHandler *(void)",
    "public: unsigned short * __thiscall TSTRBUFFER::GetStrPtr(void)",
    "public: class CShellUriSettings * __thiscall AutoCleanup,class CShellUriSettings *>::Detach(void)",
    "private: void __thiscall AutoCleanup,struct IWbemClassObject *>::ReleasePtr(void)",
    "public: int __thiscall CConfigManager::NextShellUri(void)",
    "public: __thiscall AutoCleanup,class PacketParser *>::AutoCleanup,class PacketParser *>(class PacketParser *)",
    "const UserAuthzRecord::`vftable'",
    "public: __thiscall AutoCleanup,struct IWbemQuery *>::operator struct IWbemQuery *(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class WSMan::Client::DisconnectOperation *>::Me(void)",
    "public: virtual int __thiscall CRequestContext::ProcessContext(int,struct _WSMAN_ERROR *)",
    "public: __thiscall AutoCleanup::operator struct HINSTANCE__ *(void)",
    "private: static void __stdcall CWSManGroupPolicyManager::LogNotificationEvent(unsigned long)",
    "public: __thiscall AutoRelease::AutoRelease(class CWSManEPR *)",
    "public: __thiscall SafeSet::SafeSet(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::Application *>::AutoCleanup,class WSMan::Client::Application *>(class WSMan::Client::Application *)",
    "public: bool __thiscall AutoCleanup,struct IWbemObjectTextSrc *>::operator!(void)const",
    "public: __thiscall AutoCleanup,class WmiEnumContext *>::AutoCleanup,class WmiEnumContext *>(class WmiEnumContext *)",
    "public: void __thiscall IRequestContext::RecordMIFailure(enum _MI_Result,unsigned long)",
    "public: __thiscall AutoDeleteVector::AutoDeleteVector(struct _WSMAN_OPTION *)",
    "void __stdcall PrintUnregisterWaitTrace(void *)",
    "public: bool __thiscall AutoCleanup,struct IWbemLocator *>::operator!(void)const",
    "public: __thiscall AutoFree::~AutoFree(void)",
    "public: virtual void __thiscall CErrorContext::RecordOutOfMemory(void)",
    "public: __thiscall AutoCleanup,class RobustConnectionBuffer::SendPacketArgs *>::AutoCleanup,class RobustConnectionBuffer::SendPacketArgs *>(class RobustConnectionBuffer::SendPacketArgs *)",
    "public: bool __thiscall AutoCleanup,class CClientConfigSettings *>::operator!(void)const",
    "public: struct IAppHostElementCollection * __thiscall AutoCleanup,struct IAppHostElementCollection *>::operator->(void)",
    "public: __thiscall AutoCleanup,class IRequestContext *>::AutoCleanup,class IRequestContext *>(void)",
    "public: class AutoDeleteVector & __thiscall AutoCleanup,unsigned short *>::operator=(unsigned short *)",
    "public: class AutoDelete & __thiscall AutoCleanup,class GPApiManager *>::operator=(class GPApiManager *)",
    "public: class EtwCorrelationHelper & __thiscall EtwCorrelationHelper::operator=(class EtwCorrelationHelper const &)",
    "public: class WSMan::Client::Shell * __thiscall AutoCleanup,class WSMan::Client::Shell *>::Detach(void)",
    "public: static void * __stdcall WSManMemory::GetHeap(void)",
    "private: class AutoObject & __thiscall AutoCleanup::Me(void)",
    "protected: virtual int __thiscall CWSManEPR::InternalParse(class IRequestContext *)",
    "public: unsigned long * __thiscall SafeMap >::operator[](struct PluginKey const &)",
    "public: int __thiscall CConfigManager::GetSetting(class IRequestContext *,enum ConfigSetting,unsigned long,unsigned short *,unsigned long *,enum WSManConfigSource *)",
    "public: __thiscall SafeMap_Iterator::operator bool(void)const",
    "public: bool __thiscall ChildLifeTimeManager::IsActive(void)",
    "public: __thiscall ShareLock::ShareLock(class FastLock &)",
    "public: class AutoDelete & __thiscall AutoCleanup,class PacketCreator *>::operator=(class PacketCreator *)",
    "FwXmlIsNull",
    "public: class XmlReader * * __thiscall AutoCleanup,class XmlReader *>::Storage(void)",
    "public: class AutoCertContext & __thiscall AutoCertContext::operator=(struct _CERT_CONTEXT const *)",
    "public: __thiscall AutoCleanup,class WSMan::Client::SessionOptions::OptionValue *>::AutoCleanup,class WSMan::Client::SessionOptions::OptionValue *>(class WSMan::Client::SessionOptions::OptionValue *)",
    "public: virtual int __thiscall CErrorContext::ProviderFailure(void)const",
    "private: class AutoDelete & __thiscall AutoCleanup,class Catalog::SecurityEntry *>::Me(void)",
    "public: int __thiscall CConfigManager::GetCurrentTableIdentity(class WSMANCONFIGTABLE_IDENTITY *,class IRequestContext *)",
    "public: class CWinRSPluginConfigCache * __thiscall AutoCleanup,class CWinRSPluginConfigCache *>::operator->(void)",
    "public: __thiscall AutoCleanup,class CClientConfigSettings *>::~AutoCleanup,class CClientConfigSettings *>(void)",
    "private: void __thiscall AutoCleanup,class CertHash *>::ReleasePtr(void)",
    "public: __thiscall ILoader::ILoader(bool (__thiscall User32DllLoader::*)(class IRequestContext &),bool (__thiscall User32DllLoader::*)(class IRequestContext &))",
    "public: __thiscall AutoCoTaskMemFree::AutoCoTaskMemFree(void)",
    "public: __thiscall AutoEnvironmentBlock::AutoEnvironmentBlock(void)",
    "public: __thiscall AutoLocklessItemRecycle::AutoLocklessItemRecycle(class Packet *)",
    "public: int __thiscall CWSManSecurityUI::Init(unsigned short *,unsigned short *,class IRequestContext *)",
    "public: class AutoDelete & __thiscall AutoCleanup,class IChannelObserverFactory *>::operator=(class IChannelObserverFactory *)",
    "class Catalog * __stdcall GetServiceCatalog(void)",
    "public: struct IErrorInfo * __thiscall AutoCleanup,struct IErrorInfo *>::operator->(void)const",
    "FwXmlAddAttributeToAttributeList",
    "public: virtual void __thiscall CRequestContext::Reset(int)",
    "public: void __thiscall PacketParser::PacketElement::Reset(bool)",
    "private: class AutoDelete & __thiscall AutoCleanup,class PacketCreator *>::Me(void)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class UserRecord *)",
    "public: __thiscall AutoCleanup,struct IWbemContext *>::operator struct IWbemContext * const(void)const",
    "public: __thiscall AutoLibrary::~AutoLibrary(void)",
    "public: struct IWbemContext * __thiscall AutoCleanup,struct IWbemContext *>::operator->(void)const",
    "public: int __thiscall CConfigManager::GetCurrentListenerIdentity(class LISTENER_IDENTITY *,class IRequestContext *)",
    "public: __thiscall AutoCleanup,class CWSManEPR *>::AutoCleanup,class CWSManEPR *>(void)",
    "public: int __thiscall CWSManCriticalSection::IsValid(void)const",
    "private: void __thiscall AutoCleanup,unsigned short * *>::ReleasePtr(void)",
    "public: static void __stdcall WSMan::EventHandler::WriteSoapW(struct _EVENT_DESCRIPTOR const &,unsigned short const *,unsigned long)",
    "public: class CBaseConfigCache::CConfigCacheMap * __thiscall AutoCleanup,class CBaseConfigCache::CConfigCacheMap *>::operator->(void)",
    "public: __thiscall LoaderSerializer::LoaderSerializer(bool (__thiscall CSecurity::InteractiveSid::*)(class IRequestContext &),bool (__thiscall CSecurity::InteractiveSid::*)(class IRequestContext &))",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class ConfigUpdate *)",
    "public: static unsigned long const ExtendedSemantic::Debug",
    "public: virtual unsigned long __thiscall CCommonConfigSettings::GetMinBatchItems(void)",
    "public: virtual __thiscall IWSManGroupPolicyPublisher::~IWSManGroupPolicyPublisher(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CServiceConfigCache *>::Me(void)",
    "public: __thiscall AutoCleanup,struct _CONFIG_UPDATE *>::~AutoCleanup,struct _CONFIG_UPDATE *>(void)",
    "public: __thiscall AutoCleanup,struct _CONFIG_UPDATE *>::operator struct _CONFIG_UPDATE *(void)",
    "public: __thiscall AutoCleanup,struct IAppHostAdminManager *>::~AutoCleanup,struct IAppHostAdminManager *>(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::SendOperation *>::~AutoCleanup,class WSMan::Client::SendOperation *>(void)",
    "private: void __thiscall AutoCleanup,class CCertMapping *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class GPApiManager *>::AutoCleanup,class GPApiManager *>(class GPApiManager *)",
    "public: __thiscall AutoCleanup,class WSMan::Client::DisconnectOperation *>::AutoCleanup,class WSMan::Client::DisconnectOperation *>(class WSMan::Client::DisconnectOperation *)",
    "protected: int __thiscall CWSManResourceNoResourceUri::ProcessFragmentPath(class IRequestContext *,unsigned short const *,unsigned long)",
    "public: __thiscall AutoCleanup,class GeneralSinkEx *>::AutoCleanup,class GeneralSinkEx *>(void)",
    "public: unsigned long __thiscall PacketFormatter::GetCharsetLen(void)const",
    "public: class CClientConfigSettings * __thiscall AutoCleanup,class CClientConfigSettings *>::operator->(void)",
    "public: __thiscall RBUFFER::RBUFFER(unsigned int)",
    "private: bool __thiscall Locale::FormatWithFallback(unsigned long,char * *,void * *,unsigned short *,unsigned long)const",
    "public: class StringKeyCI const & __thiscall SafeMap_Iterator::Key(void)const",
    "public: __thiscall AutoCoTaskMemFree::AutoCoTaskMemFree(void *)",
    "public: class CertHash * __thiscall AutoCleanup,class CertHash *>::operator->(void)",
    "public: __thiscall UserRecord::~UserRecord(void)",
    "public: __thiscall AutoCleanup,struct IAppHostElementCollection *>::operator struct IAppHostElementCollection *(void)",
    "public: __thiscall AutoDelete::AutoDelete(class NtDsApiDllLoader *)",
    "public: __thiscall AutoCleanup,struct IWbemPath *>::operator struct IWbemPath *(void)",
    "public: class AutoDelete & __thiscall AutoCleanup,class WmiEnumContext *>::operator=(class WmiEnumContext *)",
    "public: struct IWbemServices * __thiscall AutoCleanup,struct IWbemServices *>::operator->(void)const",
    "public: class CCertMapping * __thiscall AutoCleanup,class CCertMapping *>::operator->(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::DeleteShellOperation *>::AutoCleanup,class WSMan::Client::DeleteShellOperation *>(class WSMan::Client::DeleteShellOperation *)",
    "public: __thiscall AutoCleanup,struct IWbemQualifierSet *>::AutoCleanup,struct IWbemQualifierSet *>(struct IWbemQualifierSet *)",
    "public: static void __stdcall WSMan::EventHandler::FormatDataDescriptor(struct _EVENT_DATA_DESCRIPTOR &,long &)",
    "private: class AutoRelease & __thiscall AutoCleanup,class ISubscription *>::Me(void)",
    "public: __thiscall ILoader::ILoader(bool (__thiscall CredUIDllLoader::*)(class IRequestContext &),bool (__thiscall CredUIDllLoader::*)(class IRequestContext &))",
    "FwXmlGetSimpleContentEx2",
    "public: static int __stdcall CSecurity::IsLocalSystemSid(void *)",
    "private: void __thiscall AutoCleanup,class CServiceConfigSettings *>::ReleasePtr(void)",
    "public: class IQueryDASHSMASHInterface * __thiscall AutoCleanup,class IQueryDASHSMASHInterface *>::operator->(void)const",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class EnumSinkEx *)",
    "private: class AutoDeleteVector & __thiscall AutoCleanup,char *>::Me(void)",
    "public: __thiscall AutoCleanup,class CObserverConfigChangeErrors *>::AutoCleanup,class CObserverConfigChangeErrors *>(class CObserverConfigChangeErrors *)",
    "FwXmlNumChildrenWithName",
    "public: __thiscall AutoCleanup,class Shell32DllLoader *>::operator class Shell32DllLoader *(void)",
    "WSManConnectShellCommand",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class TSTRBUFFER *)",
    "private: class AutoRelease & __thiscall AutoCleanup,class WSMan::Client::ProxyManager *>::Me(void)",
    "public: class GeneralSinkEx * __thiscall AutoCleanup,class GeneralSinkEx *>::operator->(void)const",
    "public: __thiscall AutoCleanup,struct IEnumWbemClassObject *>::~AutoCleanup,struct IEnumWbemClassObject *>(void)",
    "public: class StringKeyCI const * __thiscall SafeMap >::Key(class StringKeyCI const &)const",
    "private: void __thiscall AutoCleanup,class WSMan::Client::SessionOptions::OptionValue *>::ReleasePtr(void)",
    "public: int __thiscall CConfigManager::IsPolicyControlledSetting(class IRequestContext *,enum ConfigSetting,int *)",
    "public: struct _GUID & __thiscall PacketParser::SessionId::GetSessionIdGuid(void)",
    "protected: bool __thiscall ILoader::CreateInstance(class IRequestContext &)",
    "int __stdcall EnableAllPrivileges(unsigned char * *)",
    "public: __thiscall AutoCleanup >,class SafeMap_Iterator *>::~AutoCleanup >,class SafeMap_Iterator *>(void)",
    "public: unsigned long __thiscall CWSManResourceNoResourceUri::GetOptionCount(void)",
    "public: class CSecurity::InteractiveSid * __thiscall LoaderSerializer::GetInstance(class IRequestContext &)",
    "public: virtual void __thiscall CErrorContext::SetGeneratingError(void)",
    "public: void __thiscall SafeMap_Iterator::operator++(int)",
    "public: class AutoRelease & __thiscall AutoCleanup,struct IErrorInfo *>::operator=(struct IErrorInfo *)",
    "public: bool __thiscall WSMan::EventHandler::Initialize(class IRequestContext &)",
    "public: __thiscall AutoRelease::AutoRelease(class CServiceConfigSettings *)",
    "public: class CWinRSPluginConfigCache * * __thiscall AutoCleanup,class CWinRSPluginConfigCache *>::Storage(void)",
    "public: long __thiscall TSTRBUFFER::AppendXmlStartElemWithNamespaces(unsigned short const *,unsigned long,struct _XML_NAMESPACE_PREFIX *,int,unsigned long,struct _XML_ATTRIB *)",
    "protected: virtual int __thiscall CWSManResource::InternalParse(class IRequestContext *)",
    "public: virtual void __cdecl CErrorContext::InternalHResult(unsigned long,unsigned long,...)",
    "public: __thiscall AutoCleanup,struct IWbemQuery *>::AutoCleanup,struct IWbemQuery *>(void)",
    "public: unsigned char * __thiscall BufferFormatter::Detach(void)",
    "public: class CSecurity::AdminSid * __thiscall LoaderSerializer::GetInstance(class IRequestContext &)",
    "public: __thiscall AutoDelete::AutoDelete(class Locale::Resources *)",
    "public: int __thiscall CWSManResource::ProcessUri(class IRequestContext *,unsigned short const *,unsigned long)",
    "public: __thiscall AutoCleanup,class WSMan::Client::SendOperation *>::operator class WSMan::Client::SendOperation *(void)",
    "public: __thiscall AutoCleanup,class ConfigUpdate *>::AutoCleanup,class ConfigUpdate *>(class ConfigUpdate *)",
    "const CRequestContext::`vftable'{for `EtwCorrelationHelper'}",
    "public: bool __thiscall SoapSemanticConverter::IsStreamingEvent(struct _FWXML_ELEMENT *,class IRequestContext *)",
    "public: unsigned char * * __thiscall AutoCleanup,unsigned char *>::Storage(void)",
    "public: class AutoBstr & __thiscall AutoBstr::operator=(unsigned short *)",
    "public: __thiscall AutoChainContext::AutoChainContext(void)",
    "WSManCreateInternalEx",
    "private: void __thiscall AutoCleanup,class ISpecification *>::ReleasePtr(void)",
    "public: class Locale::Key const & __thiscall SafeMap_Iterator::Key(void)const",
    "private: int __thiscall PacketParser::ParseSubscriptionID(class IRequestContext *,struct _FWXML_ELEMENT *,int)",
    "public: __thiscall AutoRelease::AutoRelease(struct IWbemQualifierSet *)",
    "public: class AutoRelease & __thiscall AutoCleanup,struct IClientSecurity *>::operator=(struct IClientSecurity *)",
    "const BufferFormatter::`vftable'",
    "public: static void * __stdcall CSecurity::GetSid(void)",
    "public: char const * __thiscall PacketFormatter::GetCharsetName(void)const",
    "public: __thiscall AutoCleanup,class GeneralSinkEx *>::operator class GeneralSinkEx *(void)",
    "public: __thiscall AutoCleanup::AutoCleanup(struct HKEY__ *)",
    "private: int __thiscall CWSManEPR::ProcessRefProperties(class IRequestContext *,struct _FWXML_ELEMENT *)",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetSessionId(void)const",
    "public: __thiscall AutoCleanup,class UniqueStringOverflow *>::~AutoCleanup,class UniqueStringOverflow *>(void)",
    "public: class ISpecification * __thiscall AutoCleanup,class ISpecification *>::operator->(void)",
    "private: void __thiscall AutoCleanup,class Catalog::SecurityEntry *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup >,class SafeSet_Iterator *>::~AutoCleanup >,class SafeSet_Iterator *>(void)",
    "public: int __thiscall CRequestContext::IsCIM_Error(void)",
    "public: void __thiscall ChildLifeTimeManager::WaitForAllChildrenToUnregister(unsigned long)",
    "private: void __thiscall AutoCleanup,class WSManHttpListener *>::ReleasePtr(void)",
    "public: int __thiscall XmlReader::Init(class IRequestContext *,unsigned short const *)",
    "WSManCreateSession",
    "public: virtual unsigned char * __thiscall BufferFormatter::GetBuffer(void)",
    "public: __thiscall AutoRelease::AutoRelease(class ISubscription *)",
    "const CClientConfigCache::`vftable'{for `ILifeTimeMgmt'}",
    "public: __thiscall AutoLocalFree::AutoLocalFree(void)",
    "public: __thiscall AutoCleanup,class WSManMemCryptManager *>::~AutoCleanup,class WSManMemCryptManager *>(void)",
    "public: int __thiscall PacketParser::ExtractContextId(unsigned short const * *,unsigned long,unsigned short const *)",
    "public: virtual unsigned long __thiscall CCommonConfigSettings::GetMaxTimeOut(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CListenerCommand *>::Me(void)",
    "private: class AutoDeleteVector & __thiscall AutoCleanup,void *>::Me(void)",
    "public: __thiscall AutoCleanup,class Catalog::SecurityEntry *>::operator class Catalog::SecurityEntry *(void)",
    "public: __thiscall AutoDelete::AutoDelete(class WSMan::Client::SessionOptions::OptionValue *)",
    "public: __thiscall AutoCleanup,class IRequestContext *>::~AutoCleanup,class IRequestContext *>(void)",
    "public: void __thiscall PacketParser::PacketElement::PutValue(unsigned short const *,int)",
    "public: __thiscall AutoDelete::AutoDelete(class XmlReader *)",
    "public: __thiscall AutoCleanup,struct _SID *>::operator struct _SID *(void)",
    "public: __thiscall AutoCleanup,class EnumSinkEx *>::operator class EnumSinkEx *(void)",
    "public: __thiscall AutoCleanup,class WmiEnumContext *>::operator class WmiEnumContext * const(void)const",
    "private: int __thiscall PacketParser::ParseToAddress(class CRequestContext *,struct _FWXML_ELEMENT *)",
    "WSManInitialize",
    "private: class AutoDeleteVector & __thiscall AutoCleanup,unsigned char *>::Me(void)",
    "public: bool __thiscall SafeMap_Iterator::IsValid(void)const",
    "public: class AutoLocalFree & __thiscall AutoLocalFree::operator=(void *)",
    "public: __thiscall AutoRelease::AutoRelease(struct IErrorInfo *)",
    "public: __thiscall AutoSecurityDescriptor::~AutoSecurityDescriptor(void)",
    "public: static void __stdcall WSMan::EventHandler::GenerateTransferId(struct _EVENT_DESCRIPTOR const &,struct _GUID const *,struct _GUID const *)",
    "public: __thiscall AutoCleanup,class CRemoteSession *>::AutoCleanup,class CRemoteSession *>(class CRemoteSession *)",
    "WSManEnumerateInternalEx",
    "public: __thiscall AutoCleanup,class WSMan::Client::ConnectShellOperation *>::AutoCleanup,class WSMan::Client::ConnectShellOperation *>(class WSMan::Client::ConnectShellOperation *)",
    "public: class AutoRelease & __thiscall AutoCleanup,class CServiceConfigSettings *>::operator=(class CServiceConfigSettings *)",
    "private: int __thiscall PacketParser::ParsePacketInternal(class CRequestContext *,struct _FWXML_ELEMENT *,class CServiceCommonConfigSettings *)",
    "public: unsigned long __thiscall CRequestContext::SetMachineName(unsigned short const *,unsigned int)",
    "void __stdcall PrintHandleTrace(void *)",
    "public: __thiscall AutoCleanup,class Packet *>::AutoCleanup,class Packet *>(class Packet *)",
    "public: virtual unsigned long __thiscall CCommonConfigSettings::GetMinTimeOut(void)",
    "public: void __thiscall PacketParser::PacketElement::PutValue(struct _FWXML_ELEMENT *,int)",
    "int __stdcall IsStringNullOrEmpty(unsigned short const *)",
    "public: class WSMan::EventHandler * __thiscall AutoCleanup,class WSMan::EventHandler *>::Detach(void)",
    "public: static void __stdcall EventLog::Info(unsigned long)",
    "public: struct IWbemContext * * __thiscall AutoCleanup,struct IWbemContext *>::Storage(void)",
    "public: void __thiscall UserRecord::Reset(void)",
    "public: int __thiscall PacketParser::ExtractShellId(class CRequestContext *,unsigned short *,unsigned long)",
    "public: class SafeMap_Iterator * __thiscall AutoCleanup >,class SafeMap_Iterator *>::operator->(void)",
    "public: __thiscall BufferFormatter::BufferFormatter(void)",
    "WSManPluginInteractiveCallback",
    "public: bool __thiscall ChildLifeTimeManager::RegisterChild(void)",
    "WSManCreateShellEx",
    "public: virtual void __cdecl CRequestContext::RecordHresult(unsigned long,unsigned long,...)",
    "public: void __thiscall ChildLifeTimeManager::UnregisterChild(void)",
    "public: static class CConfigManager * __stdcall CConfigManager::GetConfigManagerForShellUri(class SHELLURI_IDENTITY *,class IRequestContext *)",
    "public: void __thiscall PacketParser::EndOfStream(unsigned long)",
    "public: __thiscall ChildLifeTimeManager::ChildLifeTimeManager(void)",
    "public: class WSManMemCryptManager * __thiscall AutoCleanup,class WSManMemCryptManager *>::Detach(void)",
    "public: long __thiscall TSTRBUFFER::AppendEscapeXmlContent(unsigned short const *,bool)",
    "protected: class STLMap & __thiscall SafeMap_Iterator::Data(void)const",
    "WSManCreatePullSubscription",
    "private: void __thiscall AutoCleanup,class ConfigUpdate *>::ReleasePtr(void)",
    "public: __thiscall AutoDeleteVector::AutoDeleteVector(unsigned short *)",
    "public: void __thiscall TSTRBUFFER::Reset(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class CSecurity::AdminSid *>::Me(void)",
    "private: int __thiscall PacketParser::ParseBookmark(class IRequestContext *,struct _FWXML_ELEMENT *,int)",
    "private: void __thiscall AutoCleanup,class CSecurity::InteractiveSid *>::ReleasePtr(void)",
    "private: static struct PacketFormatter::CharsetInfo const * const PacketFormatter::CHARSETS",
    "public: class EnumSinkEx * __thiscall AutoCleanup,class EnumSinkEx *>::Detach(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::Command *>::~AutoCleanup,class WSMan::Client::Command *>(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CServiceCommonConfigSettings *>::Me(void)",
    "WSManEnumeratorBatchPolicyViolated",
    "public: __thiscall AutoCleanup,class CServiceConfigSettings *>::~AutoCleanup,class CServiceConfigSettings *>(void)",
    "public: int __thiscall PacketParser::IsNonOperativePacket(void)const",
    "public: __thiscall AutoCleanup,struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *>::operator struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *(void)",
    "WSManPutInternal",
    "private: int __thiscall PacketParser::ParseOperationId(class IRequestContext *,struct _FWXML_ELEMENT *,int)",
    "public: __thiscall ILoader::ILoader(bool (__thiscall CSecurity::NetworkServiceSid::*)(class IRequestContext &),bool (__thiscall CSecurity::NetworkServiceSid::*)(class IRequestContext &))",
    "public: __thiscall AutoImpersonateUser::AutoImpersonateUser(void)",
    "public: __thiscall PacketParser::SessionId::SessionId(void)",
    "public: class SafeSet_Iterator * __thiscall AutoCleanup >,class SafeSet_Iterator *>::operator->(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class ConfigUpdate *>::Me(void)",
    "WSManSendShellInput",
    "public: class CServiceConfigCache::CServiceWatcher * __thiscall AutoCleanup,class CServiceConfigCache::CServiceWatcher *>::Detach(void)",
    "public: void __thiscall SafeMap_Lock >::Acquire(void)",
    "public: __thiscall AutoCleanup,struct IAppHostProperty *>::AutoCleanup,struct IAppHostProperty *>(struct IAppHostProperty *)",
    "private: void __thiscall AutoCleanup,class ConfigNotification *>::ReleasePtr(void)",
    "public: virtual long __thiscall CBaseConfigCache::Release(void (__stdcall*)(void *),void *)",
    "private: class AutoDelete & __thiscall AutoCleanup,class CListenerSettings *>::Me(void)",
    "public: class AutoObject & __thiscall AutoObject::operator=(struct WSMAN_OBJECT *)",
    "public: void __thiscall UserRecord::Refresh(void)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class RunAsConfiguration *)",
    "private: static class CBaseConfigCache * __stdcall CWinRSPluginConfigCache::AllocCache(void)",
    "private: void __thiscall AutoCleanup,class CServiceCommonConfigSettings *>::ReleasePtr(void)",
    "WSManConstructError",
    "private: void __thiscall AutoCleanup,void *>::ReleasePtr(void)",
    "public: class AutoRegKey & __thiscall AutoCleanup::operator=(struct HKEY__ *)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CListenerMasterOperation *>::Me(void)",
    "public: struct IEnumWbemClassObject * __thiscall AutoCleanup,struct IEnumWbemClassObject *>::operator->(void)",
    "private: void __thiscall AutoCleanup,class XmlReader *>::ReleasePtr(void)",
    "const EtwCorrelationHelper::`vftable'",
    "public: virtual void __cdecl CErrorContext::InternalFailure(unsigned long,...)",
    "private: class AutoFwXmlCloseParser & __thiscall AutoCleanup::Me(void)",
    "WSManEnumerateInternal",
    "private: void __thiscall CRequestContext::GetFaultXMLPrivate(char * *,unsigned long,int,unsigned long,unsigned long,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: long __thiscall TSTRBUFFER::InsertAtPosition(unsigned short const *,unsigned int)",
    "public: __thiscall AutoDelete > > >::~AutoDelete > > >(void)",
    "public: __thiscall CWSManCriticalSectionWithConditionVar::CWSManCriticalSectionWithConditionVar(void)",
    "public: struct IWbemClassObject * __thiscall AutoCleanup,struct IWbemClassObject *>::operator->(void)",
    "public: virtual int __thiscall CWSManEPR::BuildSelectorSet(class BufferFormatter &)",
    "public: virtual int __thiscall CCommonConfigSettings::AllowCredSsp(void)const",
    "public: __thiscall AutoCertContext::AutoCertContext(struct _CERT_CONTEXT const *)",
    "int __stdcall RestoreAllPrivileges(struct _TOKEN_PRIVILEGES *)",
    "protected: static class CBaseConfigCache * __stdcall CBaseConfigCache::GetConfigCache(class IRequestContext *,enum ErrorLogging,class CBaseConfigCache * (__stdcall*)(void),class FastLock *,class AutoRelease &,int)",
    "public: __thiscall AutoDeleteVector::AutoDeleteVector(void)",
    "public: __thiscall AutoDelete::AutoDelete(class Shell32DllLoader *)",
    "public: __thiscall AutoCleanup,class SubscriptionManager *>::operator class SubscriptionManager *(void)",
    "public: bool __thiscall PacketParser::AddPacket(class Packet *,bool,bool,bool)",
    "public: __thiscall AutoDelete::AutoDelete(class CServiceConfigCache::CServiceWatcher *)",
    "public: __thiscall AutoCleanup,class InboundRequestDetails *>::~AutoCleanup,class InboundRequestDetails *>(void)",
    "private: int __thiscall CWSManGroupPolicyManager::Initialize(class IRequestContext *,unsigned short const *)",
    "public: __thiscall AutoCleanup,class IPCSoapProcessor *>::AutoCleanup,class IPCSoapProcessor *>(class IPCSoapProcessor *)",
    "public: void __thiscall CRequestContext::LogErrorMessage(void)",
    "WSManPluginReportCompletion",
    "public: class CServiceConfigSettings::CertThumbprintMappedSet * __thiscall SafeMap >::operator[](class CertThumbprintKey const &)",
    "public: __thiscall AutoCleanup,class WSMANCONFIGTABLE_IDENTITY *>::AutoCleanup,class WSMANCONFIGTABLE_IDENTITY *>(class WSMANCONFIGTABLE_IDENTITY *)",
    "public: __thiscall AutoCleanup,class PacketCreator *>::operator class PacketCreator *(void)",
    "private: void __thiscall AutoCleanup,class ShlWApiDllLoader *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class IRequestContext *>::AutoCleanup,class IRequestContext *>(class IRequestContext *)",
    "public: bool __thiscall SafeSet::Add(class StringKeyCI const &,class IRequestContext &)",
    "public: class CConfigManager * __thiscall AutoCleanup,class CConfigManager *>::operator->(void)",
    "public: class IChannelObserverFactory * __thiscall AutoCleanup,class IChannelObserverFactory *>::operator->(void)",
    "public: __thiscall AutoCleanup,class SubscriptionManager *>::AutoCleanup,class SubscriptionManager *>(class SubscriptionManager *)",
    "public: int __thiscall CWSManResourceNoResourceUri::AddOptionSet(struct _WSMAN_OPTION_SET *,class IRequestContext *)",
    "public: long __thiscall TSTRBUFFER::AppendXmlStartFragment(void)",
    "FwXmlCompareAttributeNameEx",
    "public: __thiscall AutoCleanup,struct IClientSecurity *>::operator struct IClientSecurity * const(void)const",
    "public: __thiscall AutoMIClass::AutoMIClass(struct _MI_Class *)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class CServiceConfigCache *)",
    "public: int __thiscall CWSManCriticalSection::TryAcquire(void)",
    "private: class AutoDelete > > & __thiscall AutoCleanup > >,class std::vector > *>::Me(void)",
    "private: void __thiscall AutoCleanup,struct IAppHostPropertyCollection *>::ReleasePtr(void)",
    "public: __thiscall AutoObject::AutoObject(struct WSMAN_OBJECT *)",
    "private: void __thiscall AutoCleanup,class User32DllLoader *>::ReleasePtr(void)",
    "public: static void __stdcall WSMan::EventHandler::FormatDataDescriptor(struct _EVENT_DATA_DESCRIPTOR &,unsigned long &)",
    "public: __thiscall AutoCleanup,class IChannelObserverFactory *>::operator class IChannelObserverFactory *(void)",
    "protected: void __thiscall RBUFFER::VerifyState(void)const",
    "public: __thiscall AutoCleanup,struct _WSMAN_STREAM_ID_SET *>::operator struct _WSMAN_STREAM_ID_SET *(void)",
    "public: __thiscall AutoCleanup,void *>::~AutoCleanup,void *>(void)",
    "public: __thiscall AutoCleanup,struct _WINRS_RUN_COMMAND_ARG *>::AutoCleanup,struct _WINRS_RUN_COMMAND_ARG *>(void)",
    "public: __thiscall PacketParser::PacketParser(void)",
    "protected: static int __stdcall ConfigRegistry::DeleteValues(class IRequestContext *,struct HKEY__ *)",
    "public: __thiscall AutoCleanup,struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *>::operator struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE * const(void)const",
    "public: __thiscall AutoCleanup,class IpHlpApiDllLoader *>::AutoCleanup,class IpHlpApiDllLoader *>(class IpHlpApiDllLoader *)",
    "public: __thiscall AutoCleanup,class User32DllLoader *>::~AutoCleanup,class User32DllLoader *>(void)",
    "public: class CWSManObject * __thiscall AutoCleanup,class CWSManObject *>::operator->(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class SubscriptionEnumerator *>::Me(void)",
    "public: class AutoDeleteVector & __thiscall AutoCleanup,unsigned short const *>::operator=(unsigned short const *)",
    "public: class PacketCreator * __thiscall AutoCleanup,class PacketCreator *>::operator->(void)",
    "public: virtual long __stdcall CWSManSecurityUI::GetInheritTypes(struct _SI_INHERIT_TYPE * *,unsigned long *)",
    "private: static class Loader Locale::g_Resources",
    "private: int __thiscall CWSManGroupPolicyManager::UnregisterPolicyNotification(void)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(struct IWbemClassObject *)",
    "private: void __thiscall AutoCleanup,struct _CONFIG_UPDATE *>::ReleasePtr(void)",
    "public: __thiscall UserRecord::UserRecord(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class IQueryDASHSMASHInterface *>::Me(void)",
    "public: __thiscall AutoCleanup,class CWSManResource *>::operator class CWSManResource *(void)",
    "int __stdcall StringIsBlank(unsigned short const *)",
    "long __stdcall WrapperCoSetProxyBlanket(struct IUnknown *,unsigned long,unsigned long,unsigned short *,unsigned long,unsigned long,void *,unsigned long,enum BehaviourForNoInterfaceError)",
    "public: __thiscall AutoCleanup,class CObserverConfigChangeErrors *>::~AutoCleanup,class CObserverConfigChangeErrors *>(void)",
    "public: class IPCSoapProcessor * __thiscall AutoCleanup,class IPCSoapProcessor *>::operator->(void)",
    "public: __thiscall AutoCleanup,struct IEnumWbemClassObject *>::AutoCleanup,struct IEnumWbemClassObject *>(void)",
    "public: class AutoDelete > & __thiscall AutoDelete >::operator=(class SafeSet *)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class SubscriptionEnumerator *)",
    "private: void __thiscall AutoCleanup,class CredUIDllLoader *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class WSMan::EventHandler *>::AutoCleanup,class WSMan::EventHandler *>(class WSMan::EventHandler *)",
    "private: class AutoDeleteVector & __thiscall AutoCleanup,unsigned short * *>::Me(void)",
    "protected: class ShlWApiDllLoader * __thiscall ILoader::GetObjectW(void)const",
    "public: class ISpecification * * __thiscall AutoCleanup,class ISpecification *>::Storage(void)",
    "public: class AutoDeleteVector & __thiscall AutoDeleteVector::operator=(void *)",
    "WSManPluginAuthzQueryQuotaComplete",
    "private: class AutoDelete & __thiscall AutoCleanup,class BlockedRecord *>::Me(void)",
    "public: virtual long __thiscall ILifeTimeMgmt::AddRef(void)",
    "public: __thiscall LoaderSerializer::LoaderSerializer(bool (__thiscall ShlWApiDllLoader::*)(class IRequestContext &),bool (__thiscall ShlWApiDllLoader::*)(class IRequestContext &))",
    "public: bool __thiscall LoaderSerializer::FreeInstance(class IRequestContext &,bool)",
    "private: class AutoRelease & __thiscall AutoCleanup,class WSMan::Client::ConnectShellOperation *>::Me(void)",
    "public: void __thiscall TSTRBUFFER::TruncateAt(unsigned int)",
    "WSManEnumeratorNextObject",
    "public: unsigned short * * __thiscall AutoCleanup,unsigned short * *>::operator->(void)const",
    "private: unsigned long __thiscall CRequestContext::DecodeFaultObject(struct _FWXML_ELEMENT *,unsigned short const * &,unsigned short const * &,unsigned short const * &)",
    "public: bool __thiscall SafeMap >::IsEmpty(void)const",
    "public: __thiscall AutoCleanup >,class SafeMap_Iterator *>::operator class SafeMap_Iterator *(void)",
    "public: __thiscall IWSManGroupPolicyObserver::IWSManGroupPolicyObserver(void)",
    "private: virtual __thiscall CWinRSPluginConfigCache::~CWinRSPluginConfigCache(void)",
    "protected: long __thiscall ConfigRegistry::OpenRegKey(struct _CONFIG_INFO *,unsigned long,class WSMANCONFIGTABLE_IDENTITY *,class AutoRegKey *,struct HKEY__ *)",
    "private: void __thiscall AutoCleanup,struct IErrorInfo *>::ReleasePtr(void)",
    "public: int __thiscall CRequestContext::ProcessContext(int,struct _WSMAN_EVENTS_RESULT *)",
    "public: long __thiscall TSTRBUFFER::AppendXmlStartElemWithNamespacesAndPrefixes(unsigned short const *,unsigned short const *,unsigned long,struct _XML_NAMESPACE_PREFIX *,int,unsigned long,struct _XML_ATTRIB *)",
    "public: __thiscall AutoCleanup,class WSMan::Client::SignalOperation *>::operator class WSMan::Client::SignalOperation *(void)",
    "public: virtual void __cdecl CErrorContext::RecordHresult(unsigned long,unsigned long,...)",
    "public: __thiscall AutoRelease::AutoRelease(class ConfigNotification *)",
    "public: class CWSManEPR * __thiscall AutoCleanup,class CWSManEPR *>::operator->(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IWbemQuery *>::Me(void)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(char *)",
    "unsigned short * __stdcall MakeUrlBinding(class IRequestContext *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CCommonConfigSettings *>::Me(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,struct _WSMAN_STREAM_ID_SET *>::Me(void)",
    "private: class AutoRegKey & __thiscall AutoCleanup::Me(void)",
    "public: __thiscall AutoCleanup,class RunAsConfiguration *>::AutoCleanup,class RunAsConfiguration *>(class RunAsConfiguration *)",
    "private: void __thiscall AutoCleanup,struct IAppHostAdminManager *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup::operator void * const(void)const",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetShellCompressionType(void)const",
    "private: virtual class CCommonConfigSettings * __thiscall CClientConfigCache::ReadCurrentSettings(class IRequestContext *,enum ErrorLogging)",
    "public: unsigned char * __thiscall AutoCleanup,unsigned char *>::Detach(void)",
    "public: class AutoWaitHandle & __thiscall AutoWaitHandle::operator=(void *)",
    "public: unsigned short const * __thiscall CRequestContext::GetLocaleString(void)",
    "public: __thiscall CWSManSecurityUI::CWSManSecurityUI(void)",
    "public: long __thiscall TSTRBUFFER::AllocSysString(unsigned short * *)const",
    "public: unsigned short * * __thiscall AutoCleanup,unsigned short *>::Storage(void)",
    "private: class AutoDeleteVector & __thiscall AutoCleanup,unsigned short *>::Me(void)",
    "private: void __thiscall AutoCleanup,class HostMappingTable *>::ReleasePtr(void)",
    "private: static void __stdcall CWSManGroupPolicyManager::_PolicyChangedCallback(void *,unsigned char)",
    "WSManGetSessionOptionAsString",
    "public: __thiscall AutoCleanup,class CWinRSPluginConfigSettings *>::operator class CWinRSPluginConfigSettings *(void)",
    "public: void __thiscall PacketFormatter::SetCharsetAndBom(enum PacketFormatter::Charset,enum PacketFormatter::Charset)",
    "public: bool __thiscall PacketFormatter::SetCharset(char const *,unsigned long,bool,bool *)",
    "private: class AutoDelete & __thiscall AutoCleanup,class CWSManResource *>::Me(void)",
    "public: class AutoRelease & __thiscall AutoCleanup,class CRemoteSession *>::operator=(class CRemoteSession *)",
    "private: void __thiscall AutoCleanup,class WSMan::Client::ProxyManager *>::ReleasePtr(void)",
    "private: int __thiscall CServiceConfigCache::RemoveObserver(class IServiceConfigObserver *)",
    "public: long __thiscall TSTRBUFFER::AppendXmlStartElemWithNamespaceAndPrefix(unsigned short const *,unsigned short const *,unsigned short const *,int,unsigned long,struct _XML_ATTRIB *)",
    "public: __thiscall AutoCleanup,class GPApiManager *>::operator class GPApiManager *(void)",
    "public: __thiscall AutoRegKey::~AutoRegKey(void)",
    "SvchostPushServiceGlobals",
    "public: class CClientConfigSettings * __thiscall CClientConfigCache::GetCurrentSettings(class IRequestContext *)",
    "WSManIdentifyInternal",
    "protected: class WSManMemCryptManager * __thiscall ILoader::GetObjectW(void)const",
    "private: class AutoRelease & __thiscall AutoCleanup,class CWinRSPluginConfigSettings *>::Me(void)",
    "public: class AutoFwXmlCloseParser & __thiscall AutoFwXmlCloseParser::operator=(void *)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class CConfigChangeSource *)",
    "public: unsigned short const * * * __thiscall AutoCleanup,unsigned short const * *>::Storage(void)",
    "public: class CServiceConfigCache::CServiceWatcher * __thiscall AutoCleanup,class CServiceConfigCache::CServiceWatcher *>::operator->(void)",
    "public: class AutoRelease & __thiscall AutoCleanup,class CBaseConfigCache *>::operator=(class CBaseConfigCache *)",
    "public: __thiscall AutoCleanup,struct _WINRS_RUN_COMMAND_ARG *>::operator struct _WINRS_RUN_COMMAND_ARG * const(void)const",
    "public: class GeneralSinkEx * __thiscall AutoCleanup,class GeneralSinkEx *>::operator->(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::DeleteShellOperation *>::operator class WSMan::Client::DeleteShellOperation *(void)",
    "private: static class CBaseConfigCache * __stdcall CBaseConfigCache::CreateNew(class IRequestContext *,class CBaseConfigCache::CConfigCacheMap *,class CBaseConfigCache * (__stdcall*)(void),enum ErrorLogging,int)",
    "private: class AutoDelete & __thiscall AutoCleanup,class User32DllLoader *>::Me(void)",
    "public: struct IClientSecurity * __thiscall AutoCleanup,struct IClientSecurity *>::Detach(void)",
    "public: __thiscall AutoCleanup,struct IWbemServices *>::operator struct IWbemServices *(void)",
    "private: int __thiscall CWSManResource::StoreDataFromResourceLocator(class IRequestContext *,struct _WSMAN_RESOURCE_LOCATOR *)",
    "public: __thiscall AutoSecurityDescriptor::AutoSecurityDescriptor(void *)",
    "public: void * __thiscall RBUFFER::QueryPtr(void)const",
    "public: __thiscall AutoDelete >::~AutoDelete >(void)",
    "public: class AutoFree & __thiscall AutoCleanup,unsigned char *>::operator=(unsigned char *)",
    "const CBaseConfigCache::`vftable'{for `ILifeTimeMgmt'}",
    "public: class CClientConfigSettings * __thiscall AutoCleanup,class CClientConfigSettings *>::Detach(void)",
    "FwXmlCompareName",
    "private: class AutoDelete & __thiscall AutoCleanup,class GPApiManager *>::Me(void)",
    "public: __thiscall AutoCleanup,class CWSManGroupPolicyManager *>::operator class CWSManGroupPolicyManager *(void)",
    "public: bool __thiscall AutoCleanup,struct IWbemQuery *>::operator!(void)const",
    "public: __thiscall AutoDelete::AutoDelete(class ConfigUpdate *)",
    "public: struct IWbemLocator * __thiscall AutoCleanup,struct IWbemLocator *>::operator->(void)const",
    "public: __thiscall LoaderSerializer::LoaderSerializer(bool (__thiscall NtDsApiDllLoader::*)(class IRequestContext &),bool (__thiscall NtDsApiDllLoader::*)(class IRequestContext &))",
    "const IWSManGroupPolicyObserver::`vftable'",
    "public: __thiscall AutoCleanup,class WSMan::Client::ConnectShellOperation *>::~AutoCleanup,class WSMan::Client::ConnectShellOperation *>(void)",
    "public: static class CConfigManager * __stdcall CConfigManager::GetFirstConfigManagerForCertMapping(unsigned short const *)",
    "public: class AutoDelete > > & __thiscall AutoDelete > >::operator=(class std::vector > *)",
    "public: virtual unsigned long __thiscall CircularBufferFormatter::GetSpaceUsed(bool)const",
    "public: __thiscall AutoDelete::AutoDelete(class CWSManEPR *)",
    "public: __thiscall ILoader::ILoader(bool (__thiscall CSecurity::AdminSid::*)(class IRequestContext &),bool (__thiscall CSecurity::AdminSid::*)(class IRequestContext &))",
    "public: class WSMan::Client::Command * __thiscall AutoCleanup,class WSMan::Client::Command *>::Detach(void)",
    "public: struct _FWXML_ELEMENT * __thiscall PacketParser::PacketElement::GetValue(void)const",
    "public: __thiscall ChildLifeTimeManager::~ChildLifeTimeManager(void)",
    "private: void __thiscall CWSManGroupPolicyManager::PolicyChanged(unsigned char)",
    "public: class SafeMap > & __thiscall SafeMap >::AsReference(void)",
    "public: __thiscall AutoCleanup,class CRemoteSession *>::~AutoCleanup,class CRemoteSession *>(void)",
    "public: __thiscall AutoCleanup,class CWinRSPluginConfigCache *>::AutoCleanup,class CWinRSPluginConfigCache *>(void)",
    "public: __thiscall AutoCleanup,class ISubscription *>::operator class ISubscription *(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CClientConfigCache *>::Me(void)",
    "public: __thiscall AutoHandle::~AutoHandle(void)",
    "public: virtual __thiscall IRequestContext::~IRequestContext(void)",
    "public: virtual class BufferFormatter & __thiscall BufferFormatter::operator<<(struct _FWXML_ELEMENT *)",
    "protected: int __thiscall CWSManResourceNoResourceUri::ProcessNestedEPR(class IRequestContext *,unsigned short const *,struct _FWXML_ELEMENT *)",
    "public: __thiscall AutoCleanup,struct IUnknown *>::AutoCleanup,struct IUnknown *>(struct IUnknown *)",
    "private: class AutoRelease & __thiscall AutoCleanup,class WSMan::Client::ReceiveOperation *>::Me(void)",
    "public: virtual void __thiscall CErrorContext::RecordAccessDenied(void)",
    "public: __thiscall AutoCleanup,class CCertMapping *>::AutoCleanup,class CCertMapping *>(class CCertMapping *)",
    "public: __thiscall AutoCertContext::~AutoCertContext(void)",
    "public: static int __stdcall CConfigManager::ReadShellUriRegistryKey(class IRequestContext *,class SHELLURI_IDENTITY *,unsigned short *)",
    "private: class AutoDelete & __thiscall AutoCleanup,class IChannelObserverFactory *>::Me(void)",
    "private: class AutoMIClass & __thiscall AutoCleanup::Me(void)",
    "FwXmlGetElementNamespaceUrl",
    "public: void __thiscall CErrorContext::LogErrorCode(void)",
    "public: __thiscall AutoRelease::AutoRelease(class IRequestContext *)",
    "public: __thiscall AutoCleanup,class SubscriptionEnumerator *>::~AutoCleanup,class SubscriptionEnumerator *>(void)",
    "public: class AutoDeleteVector & __thiscall AutoCleanup,char *>::operator=(char *)",
    "public: virtual void __cdecl CRequestContext::RecordAccessDeniedWithDetail(unsigned long,...)",
    "private: void __thiscall AutoCleanup,struct IWbemPath *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class UserRecord *>::operator class UserRecord *(void)",
    "FwXmlGetAttributeValue",
    "public: class AutoMIClass & __thiscall AutoCleanup::operator=(struct _MI_Class *)",
    "public: static void * __stdcall WSManMemory::Alloc(unsigned int,int,enum _NitsFaultMode)",
    "public: __thiscall AutoCleanup,class CWSManEPR *>::AutoCleanup,class CWSManEPR *>(class CWSManEPR *)",
    "private: static class FastLock CWSManGroupPolicyManager::s_lock",
    "public: __thiscall AutoCleanup,class CConfigManager *>::~AutoCleanup,class CConfigManager *>(void)",
    "public: __thiscall AutoDeleteVector::AutoDeleteVector(unsigned short * *)",
    "private: void __thiscall AutoCleanup,class WSMan::Client::SignalOperation *>::ReleasePtr(void)",
    "int __stdcall HandleMigration(class WSManMigrationContext *)",
    "private: void __thiscall AutoCleanup,class CObserverConfigChangeErrors *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class ConfigNotification *>::AutoCleanup,class ConfigNotification *>(class ConfigNotification *)",
    "public: __thiscall ExtendedSemantic::ExtendedSemantic(unsigned long)",
    "public: __thiscall AutoDelete > >::AutoDelete > >(class std::set > *)",
    "public: __thiscall AutoReleaseEx::~AutoReleaseEx(void)",
    "public: class AutoDelete & __thiscall AutoCleanup,class CertHash *>::operator=(class CertHash *)",
    "public: struct IWbemObjectTextSrc * * __thiscall AutoCleanup,struct IWbemObjectTextSrc *>::Storage(void)",
    "public: class AutoDeleteVector & __thiscall AutoDeleteVector::operator=(struct _WSMAN_OPTION *)",
    "WSManAddSubscriptionManagerInternal",
    "public: void __thiscall CRequestContext::LogErrorCode(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IWbemObjectTextSrc *>::Me(void)",
    "public: __thiscall AutoCleanup,class CListenerShell *>::~AutoCleanup,class CListenerShell *>(void)",
    "public: __thiscall AutoCleanup,struct IErrorInfo *>::~AutoCleanup,struct IErrorInfo *>(void)",
    "private: int __thiscall CBaseConfigCache::RemoveFromMap(void)",
    "public: class CConfigManager * __thiscall AutoCleanup,class CConfigManager *>::Detach(void)",
    "private: void __thiscall ChildLifeTimeManager::WakeAllWaitingOnNoOfChildren(void)",
    "public: bool __thiscall SafeSet::Add(class CCertMapping * const &,class IRequestContext &)",
    "public: class AutoRelease & __thiscall AutoCleanup,struct IWbemServices *>::operator=(struct IWbemServices *)",
    "public: virtual unsigned long __thiscall CCommonConfigSettings::GetMinBatchTimeout(void)",
    "public: class MachineName * __thiscall LoaderSerializer::GetInstance(class IRequestContext &)",
    "public: bool __thiscall SafeMap_Lock >::Acquired(void)",
    "public: class AutoDelete & __thiscall AutoCleanup,class RunAsConfiguration *>::operator=(class RunAsConfiguration *)",
    "public: long __thiscall TSTRBUFFER::AppendXmlStartElemWithNamespace(unsigned short const *,unsigned short const *,int,unsigned long,struct _XML_ATTRIB *)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CBaseConfigCache::CConfigCacheMap *>::Me(void)",
    "public: __thiscall AutoCleanup,class Locale::Resources *>::operator class Locale::Resources *(void)",
    "public: class CSecurity::AdminSid * __thiscall AutoCleanup,class CSecurity::AdminSid *>::Detach(void)",
    "public: int __thiscall CWSManGroupPolicyManager::GetString(class IRequestContext *,enum WSManGroupPolicySetting,unsigned long,unsigned short *,unsigned long *,enum WSManGroupPolicySettingState *)",
    "public: virtual void __thiscall CErrorContext::SetConfigToUseDefaults(int)",
    "public: __thiscall SafeSet_Iterator::SafeSet_Iterator(class SafeSet &)",
    "public: static int __stdcall CConfigManager::UpdateCredentialsInCredmanStore(class IRequestContext *,unsigned short *,unsigned short *)",
    "public: virtual unsigned long __thiscall CircularBufferFormatter::GrowBuffer(unsigned long)",
    "public: class AutoFwXmlCloseParser & __thiscall AutoCleanup::operator=(void *)",
    "public: class IpHlpApiDllLoader * __thiscall AutoCleanup,class IpHlpApiDllLoader *>::Detach(void)",
    "public: __thiscall CResourceAlias::~CResourceAlias(void)",
    "public: __thiscall AutoCleanup,struct _WSMAN_STREAM_ID_SET *>::AutoCleanup,struct _WSMAN_STREAM_ID_SET *>(struct _WSMAN_STREAM_ID_SET *)",
    "public: class AutoRelease & __thiscall AutoCleanup,class GeneralSinkEx *>::operator=(class GeneralSinkEx *)",
    "private: void __thiscall AutoCleanup,class Shell32DllLoader *>::ReleasePtr(void)",
    "protected: int __thiscall ConfigRegistry::ValidateCertificateHash(class IRequestContext *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: class Packet * __thiscall PacketParser::GetPacket(void)",
    "public: long __thiscall UserRecord::GetProfileCount(void)",
    "public: __thiscall AutoCleanup::AutoCleanup(struct WSMAN_OBJECT *)",
    "private: void __thiscall AutoCleanup,struct IAppHostConfigException *>::ReleasePtr(void)",
    "public: class Handle * __thiscall AutoCleanup >,class Handle *>::Detach(void)",
    "public: bool __thiscall AutoCleanup,class IRequestContext *>::operator!(void)const",
    "public: struct IWbemQualifierSet * __thiscall AutoCleanup,struct IWbemQualifierSet *>::Detach(void)",
    "public: __thiscall AutoCleanup,class WSMan::Client::Shell *>::AutoCleanup,class WSMan::Client::Shell *>(class WSMan::Client::Shell *)",
    "public: __thiscall AutoBstr::AutoBstr(unsigned short *)",
    "public: __thiscall AutoCleanup,class InboundRequestDetails *>::AutoCleanup,class InboundRequestDetails *>(class InboundRequestDetails *)",
    "const CConfigManager::`vftable'",
    "public: __thiscall AutoCleanup,class CredUIDllLoader *>::AutoCleanup,class CredUIDllLoader *>(class CredUIDllLoader *)",
    "public: __thiscall AutoCleanup,class WSMan::Client::Command *>::AutoCleanup,class WSMan::Client::Command *>(class WSMan::Client::Command *)",
    "public: virtual int __thiscall CWSManGroupPolicyManager::UnSubscribe(class IRequestContext *,class IWSManGroupPolicyObserver *)",
    "private: virtual int __thiscall CServiceConfigCache::PostChange(class IRequestContext *,class CCommonConfigSettings *,class CCommonConfigSettings *)",
    "public: __thiscall AutoCleanup,unsigned short * *>::AutoCleanup,unsigned short * *>(unsigned short * *)",
    "private: class AutoRelease & __thiscall AutoCleanup,class WSMan::Client::ProxySelection *>::Me(void)",
    "private: class AutoDelete & __thiscall AutoCleanup,class CredUIDllLoader *>::Me(void)",
    "public: virtual int __thiscall CErrorContext::ProcessContext(int,struct _WSMAN_ERROR *)",
    "public: class std::set > * __thiscall AutoCleanup > >,class std::set > *>::Detach(void)",
    "public: __thiscall CircularBufferFormatter::CircularBufferFormatter(void)",
    "public: __thiscall AutoCleanup::operator struct _MI_Class *(void)",
    "public: virtual void __thiscall CErrorContext::CopyTo(class IRequestContext *)const",
    "int __stdcall UpdateHttpsBinding(class IRequestContext *,unsigned short const *,unsigned short const *,int *)",
    "public: __thiscall IWSManGroupPolicyPublisher::IWSManGroupPolicyPublisher(class IWSManGroupPolicyPublisher const &)",
    "public: __thiscall AutoRelease::AutoRelease(class EnumSinkEx *)",
    "private: unsigned long __thiscall PacketParser::ParseRobustConnectionAckSequenceId(unsigned __int64 *)",
    "public: bool __thiscall AutoCleanup,class EnumSinkEx *>::operator!(void)const",
    "WSManCreateShell",
    "public: class WSMan::Client::ReceiveOperation * __thiscall AutoCleanup,class WSMan::Client::ReceiveOperation *>::operator->(void)",
    "public: int __thiscall XmlReader::Init(class IRequestContext *,struct WSMAN_OBJECT *)",
    "public: bool __thiscall CRequestContext::SetLocale(unsigned short const *,unsigned long)",
    "WSManPutInternalEx",
    "protected: int __thiscall CBaseConfigCache::Init(class IRequestContext *,int)",
    "public: class AutoDelete & __thiscall AutoCleanup,class BlockedRecord *>::operator=(class BlockedRecord *)",
    "public: unsigned short const * __thiscall TSTRBUFFER::QueryStr(void)const",
    "public: long __thiscall TSTRBUFFER::AppendXmlEndFragment(void)",
    "FwXmlParseText",
    "public: class TSTRBUFFER * __thiscall AutoCleanup,class TSTRBUFFER *>::operator->(void)const",
    "public: __thiscall ShareLock::~ShareLock(void)",
    "public: __thiscall AutoCleanup,class CRemoteSession *>::operator class CRemoteSession *(void)",
    "public: __thiscall AutoFree::AutoFree(unsigned char *)",
    "public: __thiscall AutoCleanup,char *>::AutoCleanup,char *>(char *)",
    "const CClientConfigCache::`vftable'{for `IConfigChangeObserver'}",
    "protected: static int __stdcall ConfigRegistry::DeleteKey(class IRequestContext *,unsigned short const *,int)",
    "public: __thiscall AutoObject::AutoObject(void)",
    "public: class AutoRelease & __thiscall AutoCleanup,struct IWbemContext *>::operator=(struct IWbemContext *)",
    "public: __thiscall CServiceConfigCache::CServiceWatcher::~CServiceWatcher(void)",
    "public: class CCommonConfigSettings * __thiscall AutoCleanup,class CCommonConfigSettings *>::Detach(void)",
    "public: class PacketParser * __thiscall AutoCleanup,class PacketParser *>::operator->(void)",
    "public: __thiscall LoaderSerializer::LoaderSerializer(bool (__thiscall CredUIDllLoader::*)(class IRequestContext &),bool (__thiscall CredUIDllLoader::*)(class IRequestContext &))",
    "public: __thiscall AutoCleanup,class WSMan::Client::ReceiveOperation *>::~AutoCleanup,class WSMan::Client::ReceiveOperation *>(void)",
    "private: void __thiscall AutoCleanup,class WSMan::Client::ProxySelection *>::ReleasePtr(void)",
    "public: virtual __thiscall ILifeTimeMgmt::~ILifeTimeMgmt(void)",
    "public: class CServiceConfigCache * __thiscall AutoCleanup,class CServiceConfigCache *>::operator->(void)",
    "const IWSManGroupPolicyPublisher::`vftable'",
    "public: __thiscall SafeSet_Iterator::SafeSet_Iterator(class SafeMap > &,bool)",
    "public: __thiscall AutoCleanup,class CWSManResource *>::AutoCleanup,class CWSManResource *>(class CWSManResource *)",
    "WSManPluginFreeRequestDetails",
    "public: class WSMan::Client::SignalOperation * * __thiscall AutoCleanup,class WSMan::Client::SignalOperation *>::Storage(void)",
    "ServiceMain",
    "public: unsigned short * __thiscall CWSManSecurityUI::GetUpdatedSDDL(class IRequestContext *)",
    "FwXmlGetAttribute",
    "public: static unsigned short * __stdcall WSManMemory::AllocBstr(unsigned short const *,int,int)",
    "public: virtual void __thiscall UserRecord::QuotaComplete(struct _WSMAN_AUTHZ_QUOTA *,unsigned long,unsigned short const *)",
    "public: __thiscall SafeMap_Iterator::~SafeMap_Iterator(void)",
    "public: class AutoDeleteVector & __thiscall AutoCleanup,struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *>::operator=(struct _WINRS_CREATE_SHELL_ENVIRONMENT_VARIABLE *)",
    "public: struct IWbemContext * __thiscall AutoCleanup,struct IWbemContext *>::Detach(void)",
    "public: class CServiceConfigSettings * __thiscall AutoCleanup,class CServiceConfigSettings *>::operator->(void)",
    "public: __thiscall AutoDelete::AutoDelete(struct _SID *)",
    "private: int __thiscall CRequestContext::AddMessage(unsigned short const *,char * *)",
    "public: bool __thiscall AutoCleanup,class ISpecification *>::operator!(void)const",
    "FwXmlFindChildElement",
    "WSManEncodeObject",
    "private: virtual class CCommonConfigSettings * __thiscall CClientConfigCache::ReadDefaultSettings(class IRequestContext *)",
    "private: static class AutoRelease CServiceConfigCache::s_cacheMap",
    "public: __thiscall AutoCleanup,struct IErrorInfo *>::AutoCleanup,struct IErrorInfo *>(void)",
    "public: virtual int __thiscall CRequestContext::RecordSoapError(unsigned long,unsigned short const *)",
    "public: long __thiscall TSTRBUFFER::AppendEscapeXmlAttribute(unsigned short const *,unsigned short)",
    "private: int __thiscall PacketParser::ParseSequenceId(class IRequestContext *,struct _FWXML_ELEMENT *)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class BlockedRecord *)",
    "public: class CredUIDllLoader * __thiscall LoaderSerializer::GetInstance(class IRequestContext &)",
    "public: __thiscall AutoCleanup,class CSecurity::InteractiveSid *>::AutoCleanup,class CSecurity::InteractiveSid *>(class CSecurity::InteractiveSid *)",
    "public: int __thiscall CConfigManager::GetSecurityDescriptor(class IRequestContext *,enum ConfigSetting,void * *,enum WSManConfigSource *)",
    "public: int __thiscall CRequestContext::ProcessContext(int,struct _WSMAN_STATUS *)",
    "public: virtual long __stdcall CWSManSecurityUI::GetSecurity(unsigned long,void * *,int)",
    "private: class AutoDelete & __thiscall AutoCleanup,char *>::Me(void)",
    "public: __thiscall PacketParser::ReferenceParameters::~ReferenceParameters(void)",
    "public: __thiscall AutoRelease::AutoRelease(class IPCSoapProcessor *)",
    "public: struct IClientSecurity * * __thiscall AutoCleanup,struct IClientSecurity *>::Storage(void)",
    "FwXmlIsSimpleContent",
    "public: class AutoRelease & __thiscall AutoCleanup,class InboundRequestDetails *>::operator=(class InboundRequestDetails *)",
    "public: bool __thiscall AutoCleanup,class RunAsConfiguration *>::operator!(void)const",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class IQueryDASHSMASHInterface *)",
    "public: unsigned short const * __thiscall PacketParser::ReferenceParameters::GetReferenceParameters(void)const",
    "public: bool __thiscall SafeMap >::Add(class CertThumbprintKey const &,class CServiceConfigSettings::CertThumbprintMappedSet const &,class IRequestContext &)",
    "public: void __thiscall PacketFormatter::SetCharset(enum PacketFormatter::Charset)",
    "private: int __thiscall PacketParser::ParseTimeout(class IRequestContext *,struct _FWXML_ELEMENT *,int,class CServiceCommonConfigSettings *)",
    "public: void __thiscall SBUFFER::SetSizeInUse(unsigned int)",
    "private: class AutoRelease & __thiscall AutoCleanup,class CListenerReceive *>::Me(void)",
    "public: class RobustConnectionBuffer::SendPacketArgs * * __thiscall SafeMap >::operator[](unsigned __int64 const &)",
    "private: void __thiscall AutoCleanup,int *>::ReleasePtr(void)",
    "public: class WSMan::Client::Shell * __thiscall AutoCleanup,class WSMan::Client::Shell *>::operator->(void)const",
    "FwXmlEncodeXmlEscapes",
    "private: class AutoDelete > > > & __thiscall AutoCleanup > > >,class std::queue > > *>::Me(void)",
    "public: struct _CERT_CONTEXT const * * __thiscall AutoCleanup::Storage(void)",
    "public: struct IEnumWbemClassObject * __thiscall AutoCleanup,struct IEnumWbemClassObject *>::Detach(void)",
    "public: __thiscall Locale::Locale(class IRequestContext *)",
    "public: void __thiscall PacketParser::PacketElement::PutValue(unsigned long,int)",
    "protected: int __thiscall CBaseConfigCache::AddSource(class IRequestContext *,class CConfigChangeSource *)",
    "public: virtual int __thiscall CErrorContext::ProcessContext(int,unsigned long *,struct _WSMAN_FAULT_OBJECT *)",
    "private: class AutoDelete & __thiscall AutoCleanup,class WSMan::EventHandler *>::Me(void)",
    "public: struct IAppHostAdminManager * * __thiscall AutoCleanup,struct IAppHostAdminManager *>::Storage(void)",
    "public: class AutoDelete & __thiscall AutoDelete::operator=(class UniqueStringOverflow *)",
    "public: virtual unsigned long __thiscall BufferFormatter::GetSpaceUsed(bool)const",
    "private: void __thiscall AutoCleanup,class SubscriptionManager *>::ReleasePtr(void)",
    "protected: int __thiscall ConfigRegistry::ValidateString(class IRequestContext *,struct _CONFIG_INFO *,unsigned short const *)",
    "public: __thiscall AutoRelease::AutoRelease(struct IUnknown *)",
    "public: class AutoDeleteVector & __thiscall AutoDeleteVector::operator=(char *)",
    "WSManDeliverEndSubscriptionNotification",
    "public: __thiscall AutoCleanup,unsigned char *>::operator unsigned char * const(void)const",
    "private: class AutoDelete & __thiscall AutoCleanup,class CShellUriSettings *>::Me(void)",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IAppHostElement *>::Me(void)",
    "public: __thiscall AutoRelease::AutoRelease(class WSMan::Client::CreateShellOperation *)",
    "public: __thiscall AutoCleanup,class CConfigManager *>::AutoCleanup,class CConfigManager *>(class CConfigManager *)",
    "public: class AutoChainContext & __thiscall AutoChainContext::operator=(struct _CERT_CHAIN_CONTEXT const *)",
    "public: virtual int __thiscall CWSManGroupPolicyManager::Subscribe(class IRequestContext *,class IWSManGroupPolicyObserver *,int)",
    "public: long __thiscall TSTRBUFFER::AppendXmlEndElem(unsigned short const *)",
    "public: class AutoRelease & __thiscall AutoCleanup,class CRemoteOperation *>::operator=(class CRemoteOperation *)",
    "private: class AutoDelete & __thiscall AutoCleanup,class NtDsApiDllLoader *>::Me(void)",
    "private: void __thiscall WSMan::EventHandler::GenerateTransferIdImp(struct _EVENT_DESCRIPTOR const &,struct _GUID const *,struct _GUID const *)",
    "public: __thiscall AutoRelease::AutoRelease(class CWinRSPluginConfigCache *)",
    "const CRequestContext::`vftable'{for `CErrorContext'}",
    "private: unsigned long __thiscall CRequestContext::DecodeFaultReason(struct _FWXML_ELEMENT *,unsigned short const * &)",
    "public: class PacketParser::PacketElement const & __thiscall PacketParser::GetSequenceId(void)const",
    "public: class SafeMap_Iterator & __thiscall SafeMap >::GetDestructorIter(void)",
    "void __stdcall WSManError(unsigned short const *,unsigned long,unsigned short const *,unsigned long,class IRequestContext *)",
    "protected: class Locale::Resources * __thiscall ILoader::GetObjectW(void)const",
    "public: bool __thiscall AutoCleanup,class SubscriptionEnumerator *>::operator!(void)const",
    "public: unsigned short const * __thiscall PacketParser::PacketElement::GetValue(void)const",
    "public: __thiscall AutoImpersonateUser::AutoImpersonateUser(void *)",
    "public: class AutoLibrary & __thiscall AutoCleanup::operator=(struct HINSTANCE__ *)",
    "const CBaseConfigCache::`vftable'{for `IConfigChangeObserver'}",
    "public: __thiscall AutoCleanup,int *>::operator int *(void)",
    "public: __thiscall AutoLocklessItemRecycle::AutoLocklessItemRecycle(void)",
    "public: virtual void __thiscall CRequestContext::RecordFailure(unsigned long)",
    "private: class AutoRelease & __thiscall AutoCleanup,struct IWbemPath *>::Me(void)",
    "public: class AutoRelease & __thiscall AutoRelease::operator=(class WSManHttpListener *)",
    "public: __thiscall AutoCleanup,struct IWbemQuery *>::~AutoCleanup,struct IWbemQuery *>(void)",
    "FwXmlCompareAttributeName",
    "private: void __thiscall AutoCleanup,class ServiceSoapProcessor *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,struct IErrorInfo *>::operator struct IErrorInfo * const(void)const",
    "public: class SafeSet * __thiscall AutoCleanup >,class SafeSet *>::operator->(void)",
    "public: int __thiscall CConfigManager::HandleAutoConfiguredListener(class IRequestContext *,class LISTENER_IDENTITY *)",
    "public: __thiscall Locale::Locale(void)",
    "public: __thiscall AutoReleaseEx::AutoReleaseEx(void)",
    "public: class AutoRelease & __thiscall AutoCleanup,class CBaseConfigCache::CConfigCacheMap *>::operator=(class CBaseConfigCache::CConfigCacheMap *)",
    "public: class WmiEnumContext * * __thiscall AutoCleanup,class WmiEnumContext *>::Storage(void)",
    "public: bool __thiscall AutoCleanup,struct IEnumWbemClassObject *>::operator!(void)const",
    "public: __thiscall AutoCleanup,class CWSManObject *>::operator class CWSManObject *(void)",
    "private: __thiscall CServiceConfigCache::CServiceConfigCache(void)",
    "public: __thiscall AutoCleanup,class ShlWApiDllLoader *>::AutoCleanup,class ShlWApiDllLoader *>(class ShlWApiDllLoader *)",
    "protected: int __thiscall ConfigRegistry::ApplySecurity(class IRequestContext *,struct HKEY__ *,unsigned short const *,unsigned short const *)",
    "public: class ServerFullDuplexChannel * * __thiscall SafeMap >::operator[](class StringKeyStore const &)",
    "public: static class CWSManEPR * __stdcall CWSManEPR::ParseEprElement(class IRequestContext *,struct _FWXML_ELEMENT *)",
    "private: void __thiscall AutoCleanup,struct IWbemServices *>::ReleasePtr(void)",
    "public: __thiscall AutoCleanup,class Shell32DllLoader *>::AutoCleanup,class Shell32DllLoader *>(class Shell32DllLoader *)",
    "public: __thiscall AutoDelete::AutoDelete(class ISpecification *)",
    "public: virtual void __thiscall CBaseConfigCache::LogError(unsigned long,unsigned long)",
    "WSManGetSessionOptionAsDword",
    "public: struct _MI_Class * __thiscall AutoCleanup::operator->(void)",
    "public: virtual long __stdcall CWSManSecurityUI::PropertySheetPageCallback(struct HWND__ *,unsigned int,enum _SI_PAGE_TYPE)",
    "public: unsigned long __thiscall PacketParser::ParseRobustConnectionMessages(enum PacketParser::PacketType *,bool *,unsigned __int64 *,unsigned __int64 *)",
    "public: bool __thiscall SafeMap >::Add(enum WSManSessionOption const &,class WSMan::Client::SessionOptions::OptionValue * const &,class IRequestContext &)",
    "public: virtual unsigned short * __thiscall CErrorContext::GetExtendedErrorString(void)",
    "public: struct IAppHostPropertyCollection * __thiscall AutoCleanup,struct IAppHostPropertyCollection *>::operator->(void)",
    "public: __thiscall LoaderSerializer::LoaderSerializer(bool (__thiscall CSecurity::AdminSid::*)(class IRequestContext &),bool (__thiscall CSecurity::AdminSid::*)(class IRequestContext &))",
    "private: void __thiscall AutoCleanup,class PacketCreator *>::ReleasePtr(void)",
    "private: void __thiscall PacketParser::ResetRobustConnectionHeaders(void)",
    "public: __thiscall AutoCleanup,struct IWbemObjectTextSrc *>::operator struct IWbemObjectTextSrc *(void)",
    "public: __thiscall AutoLocklessItemRecycle::~AutoLocklessItemRecycle(void)",
    "public: void __thiscall CWSManResourceNoResourceUri::SetOptionsMustUnderstandValue(int)",
    "public: __thiscall AutoCleanup,class XmlReader *>::~AutoCleanup,class XmlReader *>(void)",
    "public: bool __thiscall AutoCleanup,struct IWbemPath *>::operator!(void)const",
    "WSManGetInternal",
    "public: virtual void __thiscall CRequestContext::SetCIM_Error(void)",
    "public: bool __thiscall ILoader::FreeInstance(class IRequestContext &,bool)"
  ],
  "WsmWmiPl.dll": [
    "public: __thiscall SafeMap_Iterator::~SafeMap_Iterator(void)",
    "public: bool __thiscall SafeMap_Iterator::IsValid(void)const",
    "WSManProvSubscribe",
    "protected: void __thiscall SafeMap_Iterator::SkipOrphans(void)",
    "const SafeMap >::`vftable'",
    "WSManProvIdentify",
    "public: __thiscall SafeMap >::~SafeMap >(void)",
    "public: virtual void __thiscall SafeMap >::Acquire(void)const",
    "WSManProvPut",
    "WSManPluginShutdown",
    "WSManProvDelete",
    "public: class SafeMap > & __thiscall SafeMap >::AsReference(void)",
    "public: void __thiscall SafeMap_Lock >::Acquire(void)",
    "public: __thiscall SafeMap_Lock >::~SafeMap_Lock >(void)",
    "WSManProvUnsubscribe",
    "public: bool __thiscall SafeMap_Lock >::Acquired(void)",
    "public: __thiscall SafeMap >::SafeMap >(void)",
    "public: virtual void __thiscall SafeMap >::Release(void)const",
    "WSManProvEnumerate",
    "public: __thiscall SafeMap_Lock >::SafeMap_Lock >(class SafeMap > const &,bool)",
    "WSManProvGet",
    "WSManProvInvoke",
    "WSManProvCreate",
    "public: unsigned long __thiscall CWSManCriticalSection::GetInitError(void)const",
    "WSManPluginStartup",
    "public: __thiscall SafeMap_Iterator::SafeMap_Iterator(class SafeMap > &,bool)",
    "public: virtual bool __thiscall SafeMap >::DeInitialize(class IRequestContext &)",
    "public: class SafeMap > & __thiscall SafeMap_Iterator::GetMap(void)const",
    "public: class SafeMap > const & __thiscall SafeMap_Lock >::GetMap(void)const",
    "WSManProvPullEvents",
    "protected: class STLMap & __thiscall SafeMap_Iterator::Data(void)const",
    "public: void __thiscall SafeMap_Iterator::Reset(void)",
    "public: virtual bool __thiscall SafeMap >::Initialize(class IRequestContext &)",
    "public: __thiscall CWSManCriticalSectionWithConditionVar::~CWSManCriticalSectionWithConditionVar(void)"
  ],
  "WwaApi.dll": [
    "DllGetActivationFactory",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "WwanRadioManager.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "Wwanadvui.dll": [
    "DllCanUnloadNow",
    "DllMain",
    "DllGetClassObject",
    "DoModalPropSheet"
  ],
  "Wwanpref.dll": [
    "DllCanUnloadNow",
    "DllMain",
    "DllGetClassObject"
  ],
  "w32time.dll": [
    "fnW32TmSetServiceStatus",
    "W32TimeDcPromo",
    "W32TimeQueryNtpProviderConfiguration",
    "W32TimeQueryConfig",
    "W32TimeQueryStatus",
    "W32TimeLog",
    "TimeProvClose",
    "W32TimeQuerySource",
    "SvchostEntry_W32Time",
    "DllInstall",
    "DllRegisterServer",
    "TimeProvOpen",
    "DllUnregisterServer",
    "W32TimeSetConfig",
    "W32TimeBufferFree",
    "W32TimeVerifyJoinConfig",
    "W32TmServiceMain",
    "W32TimeSyncNow",
    "TimeProvCommand",
    "W32TimeQueryNTPProviderStatus",
    "W32TimeQueryHardwareProviderStatus",
    "W32TimeQueryConfiguration",
    "fnW32TmI_ScSetServiceBits",
    "W32TimeDeleteConfig",
    "SvchostPushServiceGlobals",
    "W32TimeVerifyUnjoinConfig",
    "W32TimeGetNetlogonServiceBits",
    "fnW32TmRegisterServiceCtrlHandlerEx"
  ],
  "w32topl.dll": [
    "ToplGetAlwaysSchedule",
    "ToplScheduleCacheDestroy",
    "ToplAddEdgeToGraph",
    "ToplGraphSetVertexIter",
    "ToplVertexSetId",
    "ToplHeapIsEmpty",
    "ToplScheduleIsEqual",
    "ToplDeleteComponents",
    "ToplScheduleNumEntries",
    "ToplEdgeCreate",
    "ToplListCreate",
    "ToplGraphFindEdgesForMST",
    "ToplEdgeFree",
    "ToplListRemoveElem",
    "ToplScheduleCacheCreate",
    "ToplDeleteGraphState",
    "ToplSTHeapExtractMin",
    "ToplListFree",
    "ToplVertexSetParent",
    "ToplScheduleImport",
    "ToplGraphDestroy",
    "ToplSTHeapInit",
    "ToplEdgeInit",
    "ToplGraphFree",
    "ToplEdgeDestroy",
    "ToplHeapExtractMin",
    "ToplSTHeapAdd",
    "ToplEdgeSetFromVertex",
    "ToplEdgeGetWeight",
    "ToplListSetIter",
    "ToplGraphMakeRing",
    "ToplScheduleMaxUnavailable",
    "ToplScheduleValid",
    "ToplIsToplException",
    "ToplSetAllocator",
    "ToplGetSpanningTreeEdgesForVtx",
    "ToplGraphRemoveVertex",
    "ToplSTHeapCostReduced",
    "ToplVertexNumberOfInEdges",
    "ToplMakeGraphState",
    "ToplVertexFree",
    "ToplScheduleDuration",
    "ToplVertexGetOutEdge",
    "ToplEdgeDisassociate",
    "ToplVertexGetParent",
    "ToplVertexNumberOfOutEdges",
    "ToplEdgeAssociate",
    "ToplEdgeSetToVertex",
    "ToplEdgeGetToVertex",
    "ToplPScheduleValid",
    "ToplEdgeGetFromVertex",
    "ToplVertexCreate",
    "ToplVertexInit",
    "ToplIterCreate",
    "ToplSTHeapDestroy",
    "ToplHeapCreate",
    "ToplEdgeSetWeight",
    "ToplDeleteSpanningTreeEdges",
    "ToplListAddElem",
    "ToplVertexGetInEdge",
    "ToplHeapDestroy",
    "ToplIterGetObject",
    "ToplIterAdvance",
    "ToplScheduleMerge",
    "ToplFree",
    "ToplScheduleExportReadonly",
    "ToplGraphCreate",
    "ToplHeapInsert",
    "ToplVertexGetId",
    "ToplAddEdgeSetToGraph",
    "ToplGraphAddVertex",
    "ToplIterFree",
    "ToplEdgeSetVtx",
    "ToplVertexDestroy",
    "ToplHeapIsElementOf",
    "ToplScheduleCreate",
    "ToplListNumberOfElements",
    "ToplGraphInit",
    "ToplGraphNumberOfVertices"
  ],
  "wavemsp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wbemcomn.dll": [
    "public: __thiscall CEnterWbemCriticalSection::~CEnterWbemCriticalSection(void)",
    "protected: int __thiscall CAbstractQl1Parser::trailing_const_expr(void)",
    "public: __thiscall CFlexArray::CFlexArray(class CFlexArray &)",
    "public: struct _ACL * __thiscall CNtAcl::GetPtr(void)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::AddAllProperties(void)",
    "public: void * __thiscall CNtSid::GetPtr(void)",
    "private: static unsigned short const * const CWbemInstallObject::m_pwszAutoRecoverPath",
    "public: void __thiscall CInstructionQueue::BreakWait(void)",
    "public: __thiscall CWbemInstallObject::CWbemInstallObject(void)",
    "public: __thiscall CVarVector::~CVarVector(void)",
    "public: __thiscall CLockableFlexArray::CLockableFlexArray(void)",
    "public: int __thiscall CWQLScanner::GetReferencedAliases(class CWStringArray &)",
    "public: class CExecQueue & __thiscall CExecQueue::operator=(class CExecQueue &)",
    "public: class WString & __thiscall WString::StripToToken(unsigned short,int)",
    "protected: int __thiscall CAbstractQl1Parser::parse(int)",
    "public: __thiscall CStaticCritSec::CStaticCritSec(void)",
    "public: int __thiscall CNtSecurityDescriptor::GetDacl(class CNtAcl &)",
    "protected: virtual void __thiscall CExecQueue::AdjustPriorityForPassing(class CExecRequest *)",
    "public: long __thiscall CInstructionQueue::Remove(class CInstructionTest *,class CTimerInstruction * *)",
    "public: virtual unsigned long __stdcall CUnk::AddRef(void)",
    "public: int __thiscall CHaltable::IsHalted(void)",
    "public: static long __stdcall CPublishWMIOperationEvent::PublishESSDrop(unsigned short *,unsigned short *)",
    "public: virtual void __thiscall CContainerControl::AddRef(struct IUnknown *)",
    "public: long __thiscall CHaltable::ResumeAll(void)",
    "public: void __thiscall CBuffer::`default constructor closure'(void)",
    "public: unsigned short * __thiscall CVarVector::GetText(long,long)",
    "public: __thiscall CVar::CVar(class CVar const &)",
    "public: __thiscall CHaltable::CHaltable(class CHaltable const &)",
    "public: __thiscall CInsertionString::CInsertionString(void)",
    "protected: int __thiscall CAbstractQl1Parser::leading_ident_expr(void)",
    "public: __thiscall CVar::operator struct _FILETIME(void)",
    "public: __thiscall CNtAce::CNtAce(struct _ACCESS_ALLOWED_ACE *)",
    "public: int __thiscall CVarVector::GetElementSize(void)",
    "protected: virtual unsigned long __thiscall CExecQueue::CalcSitOutPenalty(long)",
    "unsigned long __stdcall GetLoggingLevelEnabled(void)",
    "public: static long __stdcall CWbemInstallObject::FlushRepository(void)",
    "public: virtual long __stdcall CWbemCallSecurity::ImpersonateClient(void)",
    "public: void __thiscall CUnk::`default constructor closure'(void)",
    "protected: class CWbemInterval __thiscall CInstructionQueue::TimeToWait(void)",
    "public: virtual bool __thiscall CNtAce::Serialize(unsigned char *,unsigned int)",
    "public: int __thiscall CNtAcl::DeleteAce(int)",
    "private: __thiscall CWbemCallSecurity::CWbemCallSecurity(void)",
    "private: __thiscall CWbemCallSecurity::CWbemCallSecurity(class CWbemCallSecurity const &)",
    "public: unsigned long __thiscall CNtSid::GetStatus(void)",
    "int __stdcall SetObjectAccess2(void *)",
    "public: void __thiscall QL_LEVEL_1_RPN_EXPRESSION::AddRef(void)",
    "public: void __thiscall CFlexArray::SetSize(int)",
    "protected: int __thiscall CDateTimeParser::TimeFormat6(unsigned short const *,int)",
    "public: __thiscall CNtAcl::CNtAcl(struct _ACL *)",
    "public: bool __thiscall CClientOpsNode::HasChildren(void)",
    "public: __thiscall CNtAce::CNtAce(void)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::AddAllAggregationProperties(void)",
    "public: int __thiscall CFlexArray::Add(void *)",
    "public: void __thiscall CSafeArray::SetRawArrayMaxElement(int)",
    "public: unsigned long __thiscall CWMITraceSettings::GetAreaFlags(void)",
    "public: long __thiscall CVarVector::InternalRawArrayAccess(void)",
    "const CUnkInternal::`vftable'",
    "protected: __thiscall CDateTimeParser::CDateTimeParser(void)",
    "protected: int __thiscall CDateTimeParser::TimeFormat9(unsigned short const *,int)",
    "public: int __thiscall CSafeArray::SetVariantAt(int,struct tagVARIANT *)",
    "public: void * __thiscall CPropertyName::GetHandle(void)",
    "public: bool __thiscall CTraceSessionControl::IsEnabled(void)",
    "public: static unsigned long __stdcall CExecQueue::QueueUnblockedWaitForSingleObject(void *,unsigned long)",
    "public: struct tagSAFEARRAY * __thiscall CSafeArray::GetArray(void)",
    "public: int __thiscall CVarVector::Status(void)",
    "public: int __thiscall CSafeArray::AddLong(long)",
    "public: __thiscall CVar::CVar(short)",
    "public: class CVar & __thiscall CVarVector::operator[](int)",
    "protected: int __thiscall CAbstractQl1Parser::aggregate_by(void)",
    "public: void __thiscall CStaticCritSec::Enter(void)",
    "protected: int __thiscall CDateTimeParser::DateFormat14(unsigned short const *,unsigned short const *,int)",
    "public: int __thiscall WString::operator>=(unsigned short const *)const",
    "protected: int __thiscall CMRCICompression::CompressFileV1(int,int,unsigned long,enum CMRCICompression::CompressionLevel,class CMRCIControl *)",
    "public: int __thiscall CVarVector::DoesVectorTypeMatchArrayType(void)",
    "public: char * __thiscall WString::GetLPSTR(void)const",
    "public: short __thiscall CVar::GetShort(void)",
    "private: static void * CMUILocale::m_fSetThreadPreferredUILanguages",
    "public: class WString2 __thiscall WString2::EscapeQuotes(void)const",
    "public: __thiscall CQl1ParseSink::CQl1ParseSink(class CQl1ParseSink const &)",
    "public: class CWbemTime __thiscall CEventLogRecord::GetCreationTime(void)",
    "protected: void __thiscall CAbstractQl1Parser::AddAppropriateToken(struct _tag_WbemQl1Token const &)",
    "private: static class std::map,class wbem_allocator > * CWbemInstallObject::m_pEnvironmentMap",
    "public: int __thiscall CVarVector::operator==(class CVarVector &)",
    "public: int __thiscall CNtSid::GetTextSid(unsigned short *,unsigned long *)",
    "public: int __thiscall CPersistentConfig::GetPersistentCfgValue(unsigned long,unsigned long &)",
    "public: bool __thiscall CFlexQueue::Requeue(void *)",
    "public: __thiscall CWStringArray::CWStringArray(int,int)",
    "public: int __thiscall CSafeArray::Trim(void)",
    "protected: int __thiscall CAbstractQl1Parser::comp_operator(void)",
    "public: static unsigned long __stdcall CExecQueue::QueueWaitForSingleObject(void *,unsigned long)",
    "public: __thiscall CNtSecurityDescriptor::CNtSecurityDescriptor(class CNtSecurityDescriptor &)",
    "public: unsigned long __thiscall CBuffer::GetIndex(void)",
    "public: class CWbemInterval & __thiscall CWbemInterval::operator=(class CWbemInterval const &)",
    "public: int __thiscall Registry::SetBinary(unsigned short const *,unsigned char *,unsigned long)",
    "public: long __thiscall CSafeArray::GetLongAt(int)",
    "public: __thiscall CVar::CVar(unsigned char)",
    "public: char * __thiscall CVar::GetLPSTR(void)",
    "public: unsigned short * __thiscall CSafeArray::GetBSTRAt(int)",
    "public: static long __stdcall CMUILocale::GetPreferredLanguages(unsigned long,unsigned short * *,unsigned long *)",
    "public: unsigned short * __thiscall CTextTemplate::Apply(struct IWbemClassObject *)",
    "public: int __thiscall CFlexArray::Size(void)const",
    "protected: int __thiscall CEventLog::AddRecord(class CEventLogRecord *)",
    "protected: void __thiscall CSmallArrayBlob::Initialize(int)",
    "public: long __thiscall CNtSecurityDescriptor::GetSacl(class CNtAcl * *)",
    "public: virtual bool __thiscall C9XAce::Deserialize(unsigned char *)",
    "public: unsigned long __thiscall CCircularQueue::GetNextElement(struct LOG_ELEMENT * *)",
    "public: __thiscall CStaticCritSec::~CStaticCritSec(void)",
    "public: int __thiscall CPropertyName::operator==(struct _tag_WbemPropertyName const &)",
    "public: int __thiscall QL1_Parser::GetQueryClass(unsigned short *,int)",
    "protected: int __thiscall CDateTimeParser::DateFormat9(unsigned short const *,unsigned short const *,int)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::AddHavingToken(struct _tag_WbemQl1Token const &)",
    "public: __thiscall CContainerControl::CContainerControl(class CContainerControl const &)",
    "private: void __thiscall CBaseMrciCompression::mrci1outstring(unsigned int,unsigned int)",
    "public: int __thiscall WString2::operator>(unsigned short const *)const",
    "public: void __thiscall CTextTemplate::`default constructor closure'(void)",
    "public: int __thiscall CWbemTime::operator>(class CWbemTime const &)const",
    "const CIdentityTest::`vftable'",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::SetCountQuery(void)",
    "protected: int __thiscall CAbstractQl1Parser::aggregation_params(void)",
    "protected: int __thiscall CDateTimeParser::DateFormat13(unsigned short const *,unsigned short const *,int)",
    "private: int __thiscall CWQLScanner::BuildSWQLColRef(class CFlexArray &,struct SWQLColRef &)",
    "public: __thiscall C9XAce::C9XAce(class C9XAce const &)",
    "public: int __thiscall CInstructionQueue::IsEmpty(void)",
    "protected: int __thiscall CAbstractQl1Parser::term(void)",
    "protected: virtual void __thiscall CTimerGenerator::NotifyStoppingThread(void)",
    "public: __thiscall CDateTimeParser::CDateTimeParser(unsigned short const *)",
    "private: void __thiscall WString2::DeleteString(bool)",
    "public: virtual __thiscall CTimerGenerator::~CTimerGenerator(void)",
    "void __stdcall Set_WPP_INIT_TRACING_Call_State(bool)",
    "protected: int __thiscall CDateTimeParser::IsValidColonMillisecond(unsigned short *,unsigned short const *)",
    "private: unsigned short * __thiscall CTextTemplate::ProcessArray(struct tagVARIANT const &,unsigned short *)",
    "public: void __thiscall CTextTemplate::SetTemplate(unsigned short const *)",
    "public: static void * __stdcall CMUILocale::_Alloc(unsigned int)",
    "public: static unsigned long (__stdcall* CPublishWMIOperationEvent::m_fEventActivityIdControl)(unsigned long,struct _GUID *)",
    "private: static class CCritSec CClientOpsNode::m_csGlobal",
    "public: __thiscall CVar::~CVar(void)",
    "public: __thiscall CMRCICompression::CMRCICompression(void)",
    "public: virtual unsigned long __stdcall CWbemCallSecurity::Release(void)",
    "protected: int __thiscall CDateTimeParser::TimeFormat3(unsigned short const *,int)",
    "long __stdcall WbemVariantChangeType(struct tagVARIANT *,struct tagVARIANT *,unsigned short)",
    "public: static void __stdcall CWbemInstallObject::Shutdown(void)",
    "public: __thiscall CContainerControl::CContainerControl(struct IUnknown *)",
    "protected: __thiscall CWbemTime::CWbemTime(__int64)",
    "public: __thiscall CVarVector::CVarVector(int,struct tagSAFEARRAY *,int)",
    "private: static int CStaticCritSec::anyFailed_",
    "public: class CContainerControl & __thiscall CContainerControl::operator=(class CContainerControl const &)",
    "public: static long __stdcall CWbemInstallObject::CoGetClassObject(struct _GUID const &,unsigned long,struct _COSERVERINFO *,struct _GUID const &,void * *)",
    "public: int __thiscall CWQLScanner::Parse(void)",
    "const CNtAce::`vftable'",
    "public: struct SNtAbsoluteSD * __thiscall CNtSecurityDescriptor::GetAbsoluteCopy(void)",
    "public: static void __stdcall CWbemInstallObject::UnregisterCMIFlushRepositoryCacheHook(void)",
    "public: unsigned short * __thiscall CVar::GetBSTR(void)",
    "private: static class CCritSec CPublishWMIOperationEvent::m_csFunctionPointers",
    "public: int __thiscall WString::operator<(unsigned short const *)const",
    "public: static class CWbemInterval __stdcall CBasicUnloadInstruction::staticRead(struct IWbemServices *,struct IWbemContext *,unsigned short const *)",
    "public: __thiscall CEventLogRecord::CEventLogRecord(unsigned short,struct _EVENT_DESCRIPTOR const &,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString)",
    "public: int __thiscall CWStringArray::ReplaceAt(int,unsigned short *)",
    "public: __thiscall CExecQueue::CExecQueue(void)",
    "public: unsigned char __thiscall CDateTimeParser::GetDay(void)",
    "long __stdcall GetSecurityDescriptorFromParameters(class CNtSecurityDescriptor *,struct IWbemClassObject *,bool *,class CNtSecurityDescriptor * *,unsigned long *)",
    "public: int __thiscall WString2::operator>=(unsigned short const *)const",
    "public: virtual __thiscall CMinMaxLimitControl::~CMinMaxLimitControl(void)",
    "public: struct tagSAFEARRAY * __thiscall CVarVector::GetNewSafeArray(void)",
    "private: void __thiscall CLike::FinalizeMatchState(void)",
    "public: __thiscall CIdentityTest::CIdentityTest(class CIdentityTest const &)",
    "public: void * __thiscall CNtSecurityDescriptor::GetPtr(void)",
    "public: class CSmallArrayBlob * __thiscall CSmallArrayBlob::SetAt(int,void *,void * *)",
    "long __stdcall RemoveFileFromAutoRecoverFolder(unsigned short const *)",
    "public: virtual int __thiscall CUnk::Initialize(void)",
    "protected: virtual void __thiscall CExecQueue::AdjustInitialPriority(class CExecRequest *)",
    "protected: void __thiscall CEventLogRecord::AddInsertionString(class CInsertionString &)",
    "protected: int __thiscall CAbstractQl1Parser::typed_constant(void)",
    "public: static long __stdcall CPublishWMIOperationEvent::PublishStop(unsigned long,long,unsigned short *)",
    "public: static long __stdcall CMUILocale::LocaleName_To_LCID(unsigned short const *,bool *,unsigned long *)",
    "public: __thiscall CSafeArray::CSafeArray(int,int,int,int)",
    "public: class CWQLScanner & __thiscall CWQLScanner::operator=(class CWQLScanner &)",
    "public: static long __stdcall CPublishWMIOperationEvent::PublishClientRequestFailure(unsigned short const *,unsigned short *,unsigned short *,unsigned long,unsigned short *,unsigned short const *,long,unsigned short const *)",
    "public: __thiscall CPropertyName::~CPropertyName(void)",
    "protected: int __thiscall CDateTimeParser::DateFormat7(unsigned short const *,int)",
    "long __stdcall ChangeVariantToCIMTYPE(struct tagVARIANT *,struct tagVARIANT *,long)",
    "public: unsigned int __thiscall CMRCICompression::UncompressBuffer(unsigned char *,unsigned long,unsigned char *,unsigned long,enum CMRCICompression::CompressionLevel)",
    "public: unsigned short const * * __thiscall CWStringArray::GetArrayPtr(void)",
    "public: __thiscall CVar::operator double(void)",
    "public: long __thiscall CHaltable::WaitForResumption(void)",
    "protected: virtual void __thiscall CExecQueue::UninitializeThread(void)",
    "public: static void * __cdecl CWin32DefaultArena::WbemMemAlloc(unsigned long)",
    "public: static int __stdcall CWin32DefaultArena::WbemHeapInitialize(void *)",
    "public: class CWbemTime __thiscall CWbemTime::operator+(class CWbemInterval const &)const",
    "public: virtual __thiscall CRegistryMinMaxLimitControl::~CRegistryMinMaxLimitControl(void)",
    "public: int __thiscall CNtSid::IsValid(void)",
    "public: class CUnk & __thiscall CUnk::operator=(class CUnk const &)",
    "public: class CNtAce * __thiscall CNtAcl::GetAce(int)",
    "public: long __thiscall CHaltable::Resume(void)",
    "public: unsigned short const * __thiscall CWbemCallSecurity::GetCallerIdentity(void)",
    "public: __thiscall CVarVector::CVarVector(int,int,int)",
    "public: int __thiscall CVar::ChangeTypeToEx(unsigned short,unsigned long)",
    "public: void * __thiscall CSmallArrayBlob::GetAt(int)const",
    "public: __thiscall CInsertionString::CInsertionString(class CInsertionString const &)",
    "public: double __thiscall CSafeArray::GetDoubleAt(int)",
    "protected: int __thiscall CDateTimeParser::DateFormat2(unsigned short const *,int)",
    "void __stdcall SetWMITraceSession(void *)",
    "public: void __thiscall CExecQueue::SetOverflowIdleTimeout(unsigned long)",
    "public: long __thiscall CBuffer::ReadLPWSTR(unsigned short const * &)",
    "public: static long __stdcall CWbemTime::GetLocalOffsetForDate(struct _SYSTEMTIME const *)",
    "public: virtual void __thiscall CNtAce::SetFlags(long)",
    "public: void __thiscall CVar::SetSafeArray(int,struct tagSAFEARRAY *)",
    "public: void __thiscall CClientOpsNode::AddChild(class CClientOpsNode *)",
    "public: int __thiscall CWbemCriticalSection::Enter(unsigned long)",
    "public: static void __stdcall CWbemInstallObject::SetRegistryPathCIMOM(unsigned short const *)",
    "public: int __thiscall CVarVector::InsertAt(int,class CVar &)",
    "public: long __thiscall CInstructionQueue::Dequeue(class CTimerInstruction * &,class CWbemTime &)",
    "public: __thiscall CExecQueue::~CExecQueue(void)",
    "public: class MD5 & __thiscall MD5::operator=(class MD5 const &)",
    "public: virtual __thiscall CLimitControl::~CLimitControl(void)",
    "public: __thiscall CNtSecurityDescriptor::~CNtSecurityDescriptor(void)",
    "private: static unsigned char const CLike::sNoMatch",
    "public: int __thiscall CWStringArray::Add(unsigned short const *)",
    "public: unsigned long __thiscall CBuffer::GetSize(void)",
    "public: int __thiscall CVarVector::Size(void)",
    "int __stdcall _IsValidElementName(unsigned short const *,unsigned long,unsigned short const *)",
    "protected: int __thiscall CDateTimeParser::IsValidYearNumber(unsigned short *,unsigned short const *,int)",
    "private: int __thiscall CSafeArray::AddScalar(union SA_ArrayScalar)",
    "public: void * * __thiscall CSmallArrayBlob::GetArrayPtr(void)",
    "public: int __thiscall CNtAcl::AddAce(class CNtAce *)",
    "long __stdcall CopyFileToAutorecover(unsigned short *,unsigned short *,int)",
    "const CLifeControl::`vftable'",
    "public: virtual void __thiscall CBasicUnloadInstruction::Release(void)",
    "public: __thiscall CTraceSessionControl::CTraceSessionControl(void)",
    "public: __thiscall CBasicUnloadInstruction::CBasicUnloadInstruction(class CWbemInterval)",
    "public: void __thiscall QL_LEVEL_1_RPN_EXPRESSION::Dump(char const *)",
    "public: long __thiscall CRegistryMinMaxLimitControl::Reread(void)",
    "private: void __thiscall CClientOpsNode::UpdateChildren(class CClientOpsNode *)",
    "public: virtual void * __thiscall CWin32DefaultArena::Realloc(void *,unsigned long)",
    "public: class WString2 & __thiscall WString2::operator+=(unsigned short const *)",
    "private: void __thiscall CWQLScanner::ClearTableRefs(void)",
    "public: int __thiscall CVarVector::ToUI4(void)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::AddToken(struct _tag_WbemQl1Token const &)",
    "public: short __thiscall CSafeArray::GetBoolAt(int)",
    "public: virtual void __thiscall CExecRequest::DumpError(void)",
    "public: __thiscall CCheckedInCritSec::~CCheckedInCritSec(void)",
    "private: void __thiscall CBuffer::EnsureSize(unsigned long)",
    "private: static unsigned char (__stdcall* CPublishWMIOperationEvent::m_fEventEnabled)(unsigned __int64,struct _EVENT_DESCRIPTOR const *)",
    "public: struct tagSAFEARRAY * __thiscall CVarVector::GetSafeArray(int)",
    "public: int __thiscall CWbemTime::operator<=(class CWbemTime const &)const",
    "public: __thiscall CMinMaxLimitControl::CMinMaxLimitControl(class CMinMaxLimitControl const &)",
    "public: unsigned int __thiscall CBaseMrciCompression::Mrci2Decompress(unsigned char *,unsigned int,unsigned char *,unsigned int)",
    "public: __thiscall CClientOpsNode::CClientOpsNode(void)",
    "public: class CWbemTime __thiscall CWbemTime::operator+(class CWbemTimeSpan const &)const",
    "public: int __thiscall WString::operator>(unsigned short const *)const",
    "public: static void __stdcall CWbemInstallObject::SetOffline(bool)",
    "protected: int __thiscall CDateTimeParser::DateFormat8(unsigned short const *,int)",
    "public: void * __thiscall CClientOpsNode::GetInfo(void)",
    "public: void __thiscall CMinMaxLimitControl::SetSleepAtMax(unsigned long)",
    "public: int __thiscall CWbemTime::SetFileTime(struct _FILETIME const &)",
    "public: void __thiscall CVar::SetShort(short)",
    "public: struct IUnknown * __thiscall CSafeArray::GetUnknownAt(int)",
    "public: int __thiscall CFlexQueue::GetQueueSize(void)const",
    "protected: virtual void __thiscall CTimerGenerator::NotifyStartingThread(void)",
    "public: int __thiscall CEnterWbemCriticalSection::IsEntered(void)",
    "public: struct _ACCESS_ALLOWED_ACE * __thiscall CNtAce::GetPtr(void)",
    "protected: int __thiscall CDateTimeParser::DateFormat15(unsigned short const *,int)",
    "public: int __thiscall CNtAcl::GetAclSizeInfo(unsigned long *,unsigned long *)",
    "public: __thiscall CBasicUnloadInstruction::CBasicUnloadInstruction(class CBasicUnloadInstruction const &)",
    "private: static bool CWbemInstallObject::m_bOffline",
    "public: __thiscall CQl1ParseSink::CQl1ParseSink(void)",
    "public: void * & __thiscall CFlexArray::operator[](int)",
    "public: int __thiscall WString2::Length(void)const",
    "public: void __thiscall CClientOpsNode::Lock(void)",
    "private: int __thiscall CSafeArray::SetScalarAt(int,union SA_ArrayScalar)",
    "public: class CClientOpsNode * __thiscall CClientOpsNode::GetChildren(void)",
    "public: float __thiscall CSafeArray::GetFloatAt(int)",
    "public: __thiscall CHaltable::CHaltable(void)",
    "public: void __thiscall CPropertyName::operator=(class CPropertyName const &)",
    "public: void __thiscall CSafeArray::SetGrowGranularity(int)",
    "int __stdcall WbemSetMachineShutdown(int)",
    "public: __thiscall WString::WString(unsigned long,struct HINSTANCE__ *)",
    "public: class CIdentityTest & __thiscall CIdentityTest::operator=(class CIdentityTest const &)",
    "int __stdcall IsValidElementName(unsigned short const *,unsigned long)",
    "protected: static void __stdcall CAbstractQl1Parser::InitToken(struct _tag_WbemQl1Token *)",
    "public: int __thiscall CSafeArray::AddUnknown(struct IUnknown *)",
    "public: unsigned int __thiscall CMRCICompression::CompressBuffer(unsigned char *,unsigned long,unsigned char *,unsigned long,enum CMRCICompression::CompressionLevel)",
    "public: __thiscall CAbstractQl1Parser::CAbstractQl1Parser(class CGenLexSource *)",
    "public: int __thiscall WString2::ExtractToken(unsigned short const *,class WString2 &)",
    "public: __thiscall CArena::CArena(class CArena const &)",
    "public: virtual int __thiscall CIdentityTest::operator()(class CTimerInstruction *)",
    "private: struct WSLexToken * __thiscall CWQLScanner::ExtractNext(int)",
    "public: __thiscall WString2::WString2(unsigned int)",
    "protected: static unsigned long __stdcall CAbstractQl1Parser::TranslateIntrinsic(unsigned short const *)",
    "public: void __thiscall CFlexQueue::`default constructor closure'(void)",
    "public: int __thiscall CDateTimeParser::IsValidDateTime(void)",
    "protected: int __thiscall CDateTimeParser::TimeFormat2(unsigned short const *,int)",
    "public: int __thiscall CSafeArray::SetUnknownAt(int,struct IUnknown *)",
    "private: bool __thiscall CIdentitySecurity::EncryptedCall(void)",
    "public: int __thiscall QL1_Parser::Parse(struct QL_LEVEL_1_RPN_EXPRESSION * *)",
    "public: __thiscall CVar::operator class CVarVector *(void)",
    "protected: unsigned short const * __thiscall CAbstractQl1Parser::GetSinglePropertyName(void)",
    "public: virtual unsigned long __thiscall C9XAce::GetAccessMask(void)",
    "public: int __thiscall CSmallArrayBlob::Size(void)const",
    "public: unsigned long __thiscall CExecQueue::GetSitoutPenalty(void)",
    "public: virtual long __stdcall CWbemCallSecurity::QueryInterface(struct _GUID const &,void * *)",
    "public: unsigned long __thiscall CNtSecurityDescriptor::GetSize(void)",
    "public: int __thiscall CWStringArray::FindStr(unsigned short const *,int)",
    "public: unsigned char __thiscall CDateTimeParser::GetMinutes(void)",
    "public: int __thiscall Registry::SetDWORDStr(unsigned short const *,unsigned long)",
    "public: class CInstructionQueue & __thiscall CInstructionQueue::operator=(class CInstructionQueue const &)",
    "public: unsigned short * __thiscall CWStringArray::GetAt(int)const",
    "public: __thiscall CExecRequest::CExecRequest(void)",
    "public: class CNtSid * __thiscall CNtAce::GetSid(void)",
    "public: void __thiscall CWStringArray::Compress(void)",
    "public: __thiscall WString2::~WString2(void)",
    "public: __thiscall CLike::~CLike(void)",
    "public: struct tagSAFEARRAY * __thiscall CVar::GetNewSafeArray(void)",
    "public: class CLike & __thiscall CLike::operator=(class CLike const &)",
    "public: __thiscall C9XAce::C9XAce(void)",
    "public: class CBasicUnloadInstruction & __thiscall CBasicUnloadInstruction::operator=(class CBasicUnloadInstruction const &)",
    "protected: static long CExecQueue::mstatic_lNumInits",
    "unsigned short * __stdcall GetWMIADAPCmdLine(int)",
    "public: class CWbemCriticalSection & __thiscall CWbemCriticalSection::operator=(class CWbemCriticalSection const &)",
    "protected: int __thiscall CDateTimeParser::IsValidMinuteNumber(unsigned short *,unsigned short const *)",
    "public: class CWbemInterval __thiscall CWbemInterval::operator+(class CWbemInterval)const",
    "unsigned long mstatic_dwTlsIndex",
    "int __stdcall IsValidElementName2(unsigned short const *,unsigned long,int)",
    "public: int __thiscall CInsertionString::IsEmpty(void)",
    "public: __thiscall CPropertyName::CPropertyName(void)",
    "public: int __thiscall CWStringArray::Size(void)const",
    "public: void * const * __thiscall CSmallArrayBlob::GetArrayPtr(void)const",
    "public: virtual long __thiscall CMinMaxLimitControl::Add(unsigned long,unsigned long,unsigned long *)",
    "public: unsigned short * __thiscall WString2::UnbindPtr(void)",
    "protected: static int __cdecl CSmallArrayBlob::CompareEls(void const *,void const *)",
    "public: int __thiscall CDMTFParser::GetValue(int)",
    "public: unsigned short * __thiscall CPropertyName::GetText(void)",
    "long __stdcall GetAccessToken(void * &)",
    "public: struct IUnknown * __thiscall CUnk::GetUnknown(void)",
    "public: class CVar & __thiscall CVar::operator=(class CVar const &)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::SetAggregationTolerance(struct _tag_WbemQl1Tolerance const &)",
    "void __stdcall DumpClientOps(class CClientOpsNode *)",
    "public: int __thiscall CVar::SetVariant(struct tagVARIANT *,int)",
    "private: void __thiscall CSafeArray::Fatal(char const *)",
    "public: void __thiscall CVar::SetRaw(int,void *,int)",
    "public: unsigned long __thiscall CUnkInternal::InternalAddRef(void)",
    "public: int __thiscall Registry::GetQWORD(unsigned short const *,unsigned __int64 *)",
    "protected: int __thiscall CDateTimeParser::DateFormat4(unsigned short const *,int)",
    "public: int __thiscall WString2::operator<(unsigned short const *)const",
    "public: __thiscall CTextTemplate::CTextTemplate(unsigned short const *)",
    "public: virtual long __thiscall CWbemCallSecurity::GetActiveImpersonation(void)",
    "public: __thiscall CVar::CVar(int,class auto_bstr)",
    "public: class CSafeArray & __thiscall CSafeArray::operator=(class CSafeArray &)",
    "public: long __thiscall CUnkInternal::InternalQueryInterface(struct _GUID const &,void * *)",
    "public: __thiscall CVar::operator short(void)",
    "public: void __thiscall CExecQueue::Shutdown(void)",
    "public: void __thiscall CPropertyName::SetHandle(void *)",
    "public: void __thiscall CExecRequest::SetPriority(long)",
    "const SZLess::`vftable'",
    "public: class WString2 & __thiscall WString2::operator=(unsigned short const *)",
    "public: void __thiscall CExecQueue::Leave(void)",
    "private: void __thiscall CBaseMrciCompression::mrci2outstring(unsigned int,unsigned int)",
    "public: __thiscall CNtSecurityDescriptor::CNtSecurityDescriptor(void)",
    "public: void __thiscall CLockableFlexArray::Lock(void)",
    "public: __thiscall QL_LEVEL_1_RPN_EXPRESSION::QL_LEVEL_1_RPN_EXPRESSION(struct QL_LEVEL_1_RPN_EXPRESSION const &)",
    "public: void __thiscall CEventLog::`default constructor closure'(void)",
    "public: void __thiscall CWbemTime::operator=(class CWbemTime const &)",
    "public: static int __stdcall CVarVector::IsValidVectorArray(int,struct tagSAFEARRAY *)",
    "public: virtual __thiscall CExecRequest::~CExecRequest(void)",
    "public: virtual int __thiscall C9XAce::GetFlags(void)",
    "public: static int __stdcall CWin32DefaultArena::WbemSysReAllocStringLen(unsigned short * *,unsigned short const *,unsigned int)",
    "unsigned long __stdcall WMIControlCallback(unsigned __int64,unsigned char *,unsigned long *)",
    "public: int __thiscall WString::ExtractToken(unsigned short,class WString &)",
    "public: __thiscall CDMTFParser::CDMTFParser(unsigned short const *)",
    "public: unsigned short * __thiscall WString2::GetLToken(unsigned short)const",
    "public: int __thiscall CWbemTime::SetSystemTime(struct _SYSTEMTIME const &)",
    "public: struct IUnknown * __thiscall CVar::GetEmbeddedObject(void)",
    "protected: int __thiscall CAbstractQl1Parser::term2(void)",
    "private: static void * CMUILocale::m_fLCIDToLocaleName",
    "public: int __thiscall CWbemInterval::IsFinite(void)const",
    "public: __thiscall CDatePart::~CDatePart(void)",
    "public: void __thiscall CWbemCriticalSection::Leave(void)",
    "public: int __thiscall CMRCICompression::CompressFile(unsigned short const *,unsigned short const *,unsigned long,enum CMRCICompression::CompressionLevel,class CMRCIControl *)",
    "public: bool __thiscall SZLess::operator()(unsigned short const * const &,unsigned short const * const &)const",
    "public: long __thiscall CSafeArray::Access(void * *)",
    "public: int __thiscall CSafeArray::SetDoubleAt(int,double)",
    "public: virtual long __thiscall CMinMaxLimitControl::Remove(unsigned long)",
    "public: double __thiscall CVar::GetDouble(void)",
    "private: static class CCritSec CMUILocale::m_csFunctionPointers",
    "public: static unsigned short * __stdcall CWin32DefaultArena::WbemSysAllocStringByteLen(char const *,unsigned int)",
    "public: struct QL_LEVEL_1_TOKEN & __thiscall QL_LEVEL_1_TOKEN::operator=(struct QL_LEVEL_1_TOKEN const &)",
    "public: virtual unsigned long __thiscall CNtAce::GetAccessMask(void)",
    "private: void __thiscall CClientOpsNode::Insert(class CClientOpsNode *)",
    "const CMinMaxLimitControl::`vftable'",
    "public: __thiscall CClientOpsNode::~CClientOpsNode(void)",
    "public: __thiscall CWbemTime::CWbemTime(void)",
    "public: void __thiscall CVar::SetVarVector(class CVarVector *,int)",
    "public: static unsigned short * __stdcall QL1_Parser::ReplaceClassName(struct QL_LEVEL_1_RPN_EXPRESSION *,unsigned short const *)",
    "public: static int __stdcall CMRCICompression::GetCompressedFileInfo(unsigned short const *,enum CMRCICompression::CompressionLevel &,unsigned long &,struct _FILETIME &,__int64 &)",
    "public: virtual long __thiscall CTimerInstruction::MarkForRemoval(void)",
    "public: class CLimitControl & __thiscall CLimitControl::operator=(class CLimitControl const &)",
    "public: int __thiscall CDateTimeParser::FillDMTF(unsigned short *,unsigned int)",
    "public: class CIdentitySecurity & __thiscall CIdentitySecurity::operator=(class CIdentitySecurity const &)",
    "public: unsigned long __thiscall CTraceSessionControl::Enable(void)",
    "public: struct IUnknown * __thiscall CUnkInternal::GetUnknown(void)",
    "public: __thiscall CNtAcl::CNtAcl(class CNtAcl const &)",
    "public: __thiscall CLifeControl::CLifeControl(class CLifeControl const &)",
    "public: virtual long __stdcall CBuffer::Stat(struct tagSTATSTG *,unsigned long)",
    "public: static int __stdcall CWin32DefaultArena::WbemSysReAllocString(unsigned short * *,unsigned short const *)",
    "public: int __thiscall CWbemTime::GetFILETIME(struct _FILETIME *)const",
    "public: static void __stdcall MD5::Transform(void *,unsigned int,unsigned char * const)",
    "const CBaseAce::`vftable'",
    "public: void __thiscall CWMITraceSettings::SetTraceLevel(unsigned char)",
    "public: class WString2 & __thiscall WString2::StripToToken(unsigned short,int)",
    "public: virtual long __stdcall CBuffer::Write(void const *,unsigned long,unsigned long *)",
    "public: class CLifeControl & __thiscall CLifeControl::operator=(class CLifeControl const &)",
    "public: __thiscall CWin32DefaultArena::CWin32DefaultArena(class CWin32DefaultArena const &)",
    "public: __thiscall WString::~WString(void)",
    "protected: int __thiscall CAbstractQl1Parser::trailing_prop_expr(void)",
    "public: __thiscall CVar::operator char(void)",
    "public: virtual long __stdcall CBuffer::Seek(union _LARGE_INTEGER,unsigned long,union _ULARGE_INTEGER *)",
    "public: float __thiscall CVar::GetFloat(void)",
    "public: void __thiscall CSmallArrayBlob::Sort(void)",
    "public: void __thiscall QL_LEVEL_1_RPN_EXPRESSION::AddToken(struct QL_LEVEL_1_TOKEN const &)",
    "public: static bool __stdcall CWbemInstallObject::IsOffline(void)",
    "private: void __thiscall WString2::AppendBuffer(unsigned short const *,unsigned int)",
    "public: void __thiscall CFlexArray::Compress(void)",
    "private: int __thiscall CWQLScanner::Pushback(struct WSLexToken *)",
    "protected: int __thiscall CDateTimeParser::CheckDMTFDateTimeFormatInternal(unsigned short const *)",
    "public: bool __thiscall CLike::Match(unsigned short const *)",
    "protected: static unsigned long __stdcall CExecQueue::_ThreadEntry(void *)",
    "public: static int __stdcall CStaticCritSec::anyFailure(void)",
    "protected: bool __thiscall CLike::DoLike(unsigned short const *,unsigned short const *,unsigned short)",
    "public: __thiscall SZLess::SZLess(struct SZLess const &)",
    "public: int __thiscall CFlexArray::RemoveAt(int)",
    "public: class CVarVector & __thiscall CVarVector::operator=(class CVarVector &)",
    "public: static void __stdcall CWbemInstallObject::InitMap(void)",
    "const CRegistryMinMaxLimitControl::`vftable'",
    "public: static long __stdcall CMUILocale::_GetThreadPreferredUILanguages(unsigned long,unsigned long *,unsigned short *,unsigned long *)",
    "public: int __thiscall CWbemTime::IsFinite(void)const",
    "public: static long __stdcall CMUILocale::_LocaleNameToLCID(unsigned short *,unsigned long,unsigned long *)",
    "public: virtual long __stdcall CBuffer::UnlockRegion(union _ULARGE_INTEGER,union _ULARGE_INTEGER,unsigned long)",
    "public: class CWMITraceSettings & __thiscall CWMITraceSettings::operator=(class CWMITraceSettings const &)",
    "public: unsigned short const * __thiscall CEventLogRecord::GetStringAt(int)",
    "public: __thiscall QL_LEVEL_1_TOKEN::QL_LEVEL_1_TOKEN(struct QL_LEVEL_1_TOKEN const &)",
    "protected: int __thiscall CAbstractQl1Parser::simple_expr(void)",
    "public: int __thiscall CNtSecurityDescriptor::IsValid(void)",
    "public: void __thiscall CLockableFlexArray::Unlock(void)",
    "public: __thiscall CNtSid::CNtSid(class CNtSid const &)",
    "public: __thiscall CWQLScanner::~CWQLScanner(void)",
    "public: unsigned short * __thiscall WString::GetLToken(unsigned short)const",
    "public: static int __stdcall CVarVector::IsValidVectorType(int)",
    "public: void __thiscall CCritSec::Enter(void)",
    "public: int __thiscall CVar::SetLPWSTR(unsigned short *,int)",
    "public: class CCritSec & __thiscall CCritSec::operator=(class CCritSec const &)",
    "public: unsigned short const * __thiscall CInsertionString::GetString(void)",
    "public: void __thiscall CVar::SetUnknown(struct IUnknown *)",
    "public: virtual class CWbemTime __thiscall CBasicUnloadInstruction::GetFirstFiringTime(void)const",
    "public: __thiscall CBuffer::~CBuffer(void)",
    "public: class CClientOpsNode * __thiscall CClientOpsNode::GetPrevious(void)",
    "void __stdcall _DoTraceHRFailure_(long)",
    "public: __thiscall CEnterWbemCriticalSection::CEnterWbemCriticalSection(class CWbemCriticalSection *,unsigned long)",
    "public: short __thiscall CSafeArray::GetShortAt(int)",
    "protected: int __thiscall CDateTimeParser::TimeFormat1(unsigned short const *,int)",
    "public: void __thiscall CVar::FillVariant(struct tagVARIANT *,int)",
    "public: class WString __thiscall WString::EscapeQuotes(void)const",
    "public: long __thiscall CWbemCriticalSection::GetRecursionCount(void)",
    "public: void __thiscall CSmallArrayBlob::Trim(void)",
    "public: void __thiscall CMemoryLog::SetLogingEnabled(bool)",
    "public: __thiscall WString2::WString2(unsigned long,struct HINSTANCE__ *)",
    "public: void __thiscall CVar::Empty(void)",
    "public: static unsigned short const * __stdcall CWbemInstallObject::GetRepositoryFolder(void)",
    "public: void __thiscall CPropertyName::Init(void)",
    "public: static unsigned long __stdcall CWbemInstallObject::ExpandEnvironmentStringsW(unsigned short const *,unsigned short *,unsigned long)",
    "public: static int __cdecl CWin32DefaultArena::WbemMemFree(void *)",
    "public: __thiscall CEventLog::CEventLog(class CEventLog const &)",
    "public: __thiscall WString::operator unsigned short *(void)",
    "public: class CBaseAce & __thiscall CBaseAce::operator=(class CBaseAce const &)",
    "public: virtual __thiscall CHaltable::~CHaltable(void)",
    "public: __thiscall CInsertionString::~CInsertionString(void)",
    "public: __thiscall CNtSid::~CNtSid(void)",
    "public: class WString2 & __thiscall WString2::operator=(class WString2 const &)",
    "public: long __thiscall CInstructionQueue::GetNumInstructions(void)",
    "public: static void __stdcall CWStringArray::Intersection(class CWStringArray &,class CWStringArray &,class CWStringArray &)",
    "protected: int __thiscall CDateTimeParser::IsValidDotMillisecond(unsigned short *,unsigned short const *)",
    "public: int __thiscall Registry::GetBinary(unsigned short const *,unsigned char * *,unsigned long *)",
    "public: void __thiscall CVar::SetByte(unsigned char)",
    "public: unsigned short __thiscall WString2::operator[](int)const",
    "public: void __thiscall CWbemInterval::operator+=(class CWbemInterval)",
    "public: unsigned short * __thiscall CSafeArray::GetBSTRAtThrow(int)",
    "public: void __thiscall CVar::SetAsNull(void)",
    "public: int __thiscall CWbemTime::operator>=(class CWbemTime const &)const",
    "public: __thiscall CInstructionTest::CInstructionTest(void)",
    "public: int __thiscall CWbemTime::GetSYSTEMTIME(struct _SYSTEMTIME *)const",
    "public: int __thiscall CNtSid::GetInfo(unsigned short * *,unsigned short * *,unsigned long *)",
    "public: void __thiscall CVar::SetCanDelete(int)",
    "public: unsigned long __thiscall CNtAcl::GetStatus(void)",
    "public: __thiscall CLifeControl::CLifeControl(void)",
    "public: __thiscall CVarVector::CVarVector(class CVarVector &)",
    "public: int __thiscall CSafeArray::AddBSTR(unsigned short *)",
    "protected: int __thiscall CAbstractQl1Parser::expr(void)",
    "public: unsigned int __thiscall CBaseMrciCompression::Mrci1MaxCompress(unsigned char *,unsigned int,unsigned char *,unsigned int)",
    "public: __thiscall C9XAce::C9XAce(unsigned long,unsigned long,unsigned long,unsigned short *)",
    "public: void __thiscall QL_LEVEL_1_TOKEN::Dump(struct _iobuf *)",
    "public: static int __stdcall CNtSecurity::IsUserInGroup(void *,class CNtSid &,int *)",
    "public: static unsigned long __cdecl CWin32DefaultArena::WbemMemSize(void *)",
    "protected: int __thiscall CDateTimeParser::IsValidDayNumber(unsigned short *,unsigned short const *)",
    "public: __thiscall CUnkInternal::CUnkInternal(class CUnkInternal const &)",
    "public: class CNtAcl * __thiscall CNtSecurityDescriptor::GetDacl(void)",
    "protected: virtual void __thiscall CExecQueue::ShutdownThread(class CExecQueue::CThreadRecord *)",
    "public: int __thiscall CNtSid::CopyTo(void *)",
    "public: __thiscall CVar::operator unsigned short(void)",
    "public: long __thiscall CInstructionQueue::Enqueue(class CWbemTime,class CTimerInstruction *)",
    "protected: int __thiscall CAbstractQl1Parser::aggregate_within(void)",
    "public: __thiscall CEventLogRecord::CEventLogRecord(class CEventLogRecord &)",
    "const CExecRequest::`vftable'",
    "public: __thiscall CVar::operator unsigned long(void)",
    "public: static long __stdcall CMUILocale::ms_XXX_Locale_From_LCID(unsigned long,unsigned short * *)",
    "public: __thiscall CMRCIControl::CMRCIControl(void)",
    "protected: int __thiscall CDateTimeParser::CheckDateFormat(unsigned short const *,int)",
    "protected: void __thiscall CFlexQueue::IncrementIndex(int &)",
    "void __stdcall BlobAssign(struct tagBLOB *,void *,unsigned long,int)",
    "public: class WString2 & __thiscall WString2::operator+=(class WString2 const &)",
    "protected: int __thiscall CDateTimeParser::DateFormat10(unsigned short const *,unsigned short const *,int)",
    "int __stdcall IsLocalService(void *)",
    "public: class CTraceSessionControl & __thiscall CTraceSessionControl::operator=(class CTraceSessionControl const &)",
    "public: int __thiscall CWQLScanner::GetReferencedTables(class CWStringArray &)",
    "public: class CNtSecurityDescriptor & __thiscall CNtSecurityDescriptor::operator=(class CNtSecurityDescriptor &)",
    "protected: void __thiscall CDMTFParser::ParseAbsolute(unsigned short const *)",
    "public: int __thiscall CVar::ToUI4(void)",
    "public: int __thiscall Registry::GetDWORD(unsigned short const *,unsigned long *)",
    "public: __thiscall CWbemInterval::CWbemInterval(void)",
    "public: virtual int __thiscall CNtAce::GetType(void)",
    "public: static void * __stdcall CWin32DefaultArena::WbemMemReAlloc(void *,unsigned long)",
    "public: static long __stdcall CPublishWMIOperationEvent::Publish(unsigned short *,unsigned long,unsigned long,unsigned short *,unsigned short *,unsigned short *,unsigned long,unsigned short *)",
    "void __stdcall _ThrowMemoryException_(void)",
    "public: class CInstructionTest & __thiscall CInstructionTest::operator=(class CInstructionTest const &)",
    "const CArena::`vftable'",
    "const CWbemCallSecurity::`vftable'",
    "private: static struct ClsidDllMapping * CWbemInstallObject::m_rgClsidDllMap",
    "public: class QL1_Parser & __thiscall QL1_Parser::operator=(class QL1_Parser const &)",
    "public: class CCircularQueue & __thiscall CCircularQueue::operator=(class CCircularQueue const &)",
    "public: __thiscall CPublishWMIOperationEvent::~CPublishWMIOperationEvent(void)",
    "public: class WString & __thiscall WString::operator=(unsigned short const *)",
    "public: int __thiscall CNtAce::GetSid(class CNtSid &)",
    "public: static long __stdcall CMUILocale::CheckLangNeutral(unsigned short const *,bool *)",
    "public: class CWStringArray & __thiscall CWStringArray::operator=(class CWStringArray &)",
    "public: void * __thiscall CFlexArray::operator[](int)const",
    "public: virtual int __thiscall CWin32DefaultArena::Free(void *)",
    "public: __thiscall CInsertionString::CInsertionString(char const *)",
    "public: class CLockableFlexArray & __thiscall CLockableFlexArray::operator=(class CLockableFlexArray &)",
    "public: unsigned char __thiscall CVar::GetByte(void)",
    "public: virtual __thiscall CUnkInternal::~CUnkInternal(void)",
    "public: void __thiscall CVar::SetChar(char)",
    "public: virtual long __thiscall CWbemCallSecurity::CloneThreadContext(int)",
    "public: int __thiscall CPersistentConfig::SetPersistentCfgValue(unsigned long,unsigned long)",
    "public: __thiscall CBaseAce::CBaseAce(class CBaseAce const &)",
    "public: static long __stdcall CPublishWMIOperationEvent::Init(void)",
    "public: void __thiscall CWMITraceSettings::SetAreaFlags(unsigned long)",
    "public: static void __stdcall CWbemInstallObject::SetAutoRecoverFolder(unsigned short const *)",
    "public: int __thiscall CSafeArray::Size(void)",
    "protected: int __thiscall CAbstractQl1Parser::class_name(void)",
    "public: void __thiscall CVar::SetWord(unsigned short)",
    "private: static struct DllModuleHandle * CWbemInstallObject::m_rgDllModules",
    "public: int __thiscall CVar::SetLPSTR(char *,int)",
    "public: __thiscall CVar::operator unsigned short *(void)",
    "long __stdcall EnableAllPrivileges(unsigned long)",
    "public: unsigned short __thiscall WString::operator[](int)const",
    "public: __thiscall QL_LEVEL_1_RPN_EXPRESSION::QL_LEVEL_1_RPN_EXPRESSION(void)",
    "protected: virtual int __thiscall CAbstractQl1Parser::Next(int)",
    "public: __thiscall CUnkInternal::CUnkInternal(class CLifeControl *)",
    "public: unsigned long __thiscall CTraceSessionControl::Initialize(unsigned short const *)",
    "public: int __thiscall CNtSecurityDescriptor::SetOwner(class CNtSid *)",
    "public: int __thiscall CWStringArray::InsertAt(int,unsigned short const *)",
    "public: void __thiscall CClientOpsNode::SetInfo(void *)",
    "public: long __thiscall CExecQueue::EnqueueAndWait(class CExecRequest *)",
    "const CTimerInstruction::`vftable'",
    "public: int __thiscall CNtAcl::ContainsSid(class CNtSid &,unsigned char &)",
    "private: long __thiscall CMUILocaleList::AddLocale(unsigned short const *,enum CMUILocale::LocaleType,unsigned long)",
    "protected: int __thiscall CAbstractQl1Parser::trailing_ident_expr(void)",
    "public: static long __stdcall CPublishWMIOperationEvent::GetFunctionPointers(void)",
    "public: void __thiscall CCheckedInCritSec::Leave(void)",
    "public: long __thiscall CDatePart::GetPart(int,int *)",
    "public: __thiscall CCritSec::~CCritSec(void)",
    "public: class CQl1ParseSink & __thiscall CQl1ParseSink::operator=(class CQl1ParseSink const &)",
    "public: virtual unsigned long __stdcall CWbemCallSecurity::AddRef(void)",
    "const CInstructionTest::`vftable'",
    "public: void __thiscall CBuffer::Reset(void)",
    "private: unsigned short * __thiscall CTextTemplate::ReturnEscapedReturns(unsigned short *)",
    "public: __thiscall CInCritSec::~CInCritSec(void)",
    "public: void __thiscall CBasicUnloadInstruction::Terminate(void)",
    "public: void __thiscall CExecQueue::Release(void)",
    "public: int __thiscall CVarVector::GetType(void)",
    "public: static void __stdcall CWin32DefaultArena::WbemHeapFree(void)",
    "protected: int __thiscall CAbstractQl1Parser::expr2(void)",
    "public: int __thiscall WString::ExtractToken(unsigned short const *,class WString &)",
    "public: virtual bool __thiscall C9XAce::Serialize(unsigned char *,unsigned int)",
    "public: void __thiscall WString::Empty(void)",
    "public: static long __stdcall CMUILocale::SetPreferredLanguages(unsigned long,unsigned short const *,unsigned long *)",
    "public: int __thiscall Registry::MoveToSubkey(unsigned short const *)",
    "public: __thiscall CLike::CLike(class CLike const &)",
    "public: void * __thiscall CFlexQueue::Dequeue(void)",
    "protected: void __thiscall CDateTimeParser::GetPreferedDateFormat(void)",
    "public: int __thiscall CEventLog::Close(void)",
    "public: unsigned char __thiscall CDateTimeParser::GetMonth(void)",
    "public: __thiscall WString::WString(class WString const &)",
    "public: static long __stdcall CWbemInstallObject::AddEnvironmentValue(unsigned short const *,unsigned short const *)",
    "protected: int __thiscall CAbstractQl1Parser::tolerance(void)",
    "const QL_LEVEL_1_RPN_EXPRESSION::`vftable'",
    "protected: virtual int __thiscall CExecQueue::CreateNewThread(void)",
    "public: unsigned short * __thiscall WString::UnbindPtr(void)",
    "void * __stdcall GetWMITraceSession(void)",
    "public: static int __stdcall CWin32DefaultArena::ValidateMemSize(int)",
    "public: class CStaticCritSec & __thiscall CStaticCritSec::operator=(class CStaticCritSec const &)",
    "public: virtual __thiscall CTimerInstruction::~CTimerInstruction(void)",
    "public: static long __stdcall CMUILocale::_SetThreadPreferredUILanguages(unsigned long,unsigned short const *,unsigned long *)",
    "private: void __thiscall CMemoryLog::CaptureStackTrace(void * * const)",
    "public: class CNtSid * __thiscall CNtSecurityDescriptor::GetOwner(void)",
    "public: virtual long __stdcall CBuffer::Commit(unsigned long)",
    "public: char __thiscall CVar::GetChar(void)",
    "public: __thiscall CVar::CVar(unsigned long)",
    "protected: int __thiscall CAbstractQl1Parser::rel_operator(void)",
    "const CBasicUnloadInstruction::`vftable'",
    "public: void __thiscall CVar::SetClsId(struct _GUID *,int)",
    "public: virtual void __thiscall C9XAce::SetFlags(long)",
    "protected: class CSmallArrayBlob * __thiscall CSmallArrayBlob::Grow(void)",
    "public: class WString2 & __thiscall WString2::TruncAtLToken(unsigned short)",
    "public: static unsigned short const * __stdcall CWbemInstallObject::GetRegistryPathWbem(void)",
    "public: class CNtAce & __thiscall CNtAce::operator=(class CNtAce const &)",
    "public: __thiscall CNtSid::CNtSid(void)",
    "public: __thiscall CExecRequest::CExecRequest(class CExecRequest const &)",
    "public: virtual __thiscall CAbstractQl1Parser::~CAbstractQl1Parser(void)",
    "public: int __thiscall CVarVector::ToSingleChar(void)",
    "public: long __thiscall CVarVector::GetRawArrayData(void *,int)",
    "public: __thiscall CTimerInstruction::CTimerInstruction(class CTimerInstruction const &)",
    "public: int __thiscall CFlexArray::EnsureExtent(int)",
    "protected: __thiscall CWbemInterval::CWbemInterval(unsigned long)",
    "protected: static void __stdcall CExecQueue::InitTls(void)",
    "private: static long __stdcall CWbemInstallObject::GetEnvironmentValue(unsigned short const *,unsigned short const * *)",
    "protected: int __thiscall CAbstractQl1Parser::equiv_operator(void)",
    "protected: virtual unsigned long __thiscall CExecQueue::GetIdleTimeout(class CExecQueue::CThreadRecord *)",
    "public: static unsigned long __stdcall CTraceSessionControl::Query(unsigned __int64,unsigned short *,class CWMITraceSettings * *)",
    "private: static void * CMUILocale::m_fLocaleNameToLCID",
    "public: __thiscall CNtAce::CNtAce(unsigned long,unsigned long,unsigned long,class CNtSid &)",
    "public: void __thiscall CVar::SetBool(short)",
    "protected: void __thiscall CDateTimeParser::GetLocalInfoAndAlloc(unsigned long,unsigned short * &)",
    "public: void __thiscall CVar::SetDWORD(unsigned long)",
    "public: __thiscall CVar::CVar(int,struct tagSAFEARRAY *)",
    "int __stdcall ReadUI64(unsigned short const *,unsigned __int64 &)",
    "public: class CClientOpsNode & __thiscall CClientOpsNode::operator=(class CClientOpsNode const &)",
    "public: void __thiscall CVar::SetLong(long)",
    "public: static long __stdcall CMUILocale::ms_XXX_Locale_To_LCID(unsigned short const *,unsigned long *)",
    "protected: int __thiscall CDateTimeParser::DateFormat12(unsigned short const *,unsigned short const *,int)",
    "protected: int __thiscall CAbstractQl1Parser::finalize(void)",
    "public: __thiscall CNtAce::CNtAce(class CNtAce const &)",
    "public: class CWbemInterval __thiscall CWbemTime::operator-(class CWbemTime const &)const",
    "public: __thiscall CMRCICompression::~CMRCICompression(void)",
    "public: __thiscall WString::WString(char const *)",
    "public: __thiscall CInsertionString::CInsertionString(unsigned short const *)",
    "public: virtual int __thiscall CNtAce::GetFlags(void)",
    "private: void __thiscall CLike::SwitchRow(unsigned int,unsigned char * &,unsigned char * &)",
    "public: void __thiscall WString::Unquote(void)",
    "public: unsigned int __thiscall CDateTimeParser::GetMicroseconds(void)",
    "public: int __thiscall CFlexArray::CopyDataFrom(class CFlexArray const &)",
    "protected: int __thiscall CAbstractQl1Parser::is_operator(void)",
    "protected: virtual unsigned long __thiscall CExecQueue::UnblockedWaitForSingleObject(void *,unsigned long,class CExecQueue::CThreadRecord *)",
    "public: __thiscall CInstructionQueue::~CInstructionQueue(void)",
    "long __stdcall BuildOperationInfo(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short * *)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::SetClassName(unsigned short const *)",
    "public: __thiscall Registry::Registry(unsigned short const *,unsigned long)",
    "public: __thiscall CEventLog::~CEventLog(void)",
    "public: int __thiscall CVarVector::CompareTo(class CVarVector &,int)",
    "public: virtual void __thiscall CContainerControl::ObjectDestroyed(struct IUnknown *)",
    "public: long __thiscall CExecRequest::GetPriority(void)",
    "public: __thiscall WString2::WString2(class WString2 const &)",
    "public: int __thiscall CVarVector::MakeOptimized(int,int,int)",
    "public: short __thiscall CVar::GetBool(void)",
    "public: static int __stdcall CDateTimeParser::CheckDMTFDateTimeFormat(unsigned short const *,int,int)",
    "protected: unsigned short * __thiscall CDateTimeParser::AllocAmPm(void)",
    "public: __thiscall CInCritSec::CInCritSec(struct _RTL_CRITICAL_SECTION *)",
    "public: class CFlexQueue & __thiscall CFlexQueue::operator=(class CFlexQueue const &)",
    "public: int __thiscall CFlexArray::InsertAt(int,void *)",
    "public: int __thiscall CWbemTime::SetDMTF(unsigned short const *)",
    "public: static long __stdcall CMUILocale::LCID_To_ms_XXX_Format(unsigned long,unsigned short *,unsigned int)",
    "public: void * __thiscall CFlexArray::GetAt(int)const",
    "long __stdcall UnregisterDllAppid(struct _GUID)",
    "protected: void __thiscall CDMTFParser::ParseInterval(unsigned short const *)",
    "public: void __thiscall CFlexArray::DebugDump(void)",
    "public: int __thiscall CVar::CanDelete(void)",
    "public: int __thiscall CSafeArray::AddShort(short)",
    "protected: bool __thiscall CFlexQueue::Grow(void)",
    "public: int __thiscall CVar::ToSingleChar(void)",
    "public: virtual __thiscall C9XAce::~C9XAce(void)",
    "public: long __thiscall CExecQueue::EnqueueWithoutSleep(class CExecRequest *,void * *)",
    "public: class CSmallArrayBlob & __thiscall CSmallArrayBlob::operator=(class CSmallArrayBlob const &)",
    "private: long __thiscall CMUILocaleList::AddCulture(unsigned short const *,enum CMUILocale::LocaleType,unsigned long)",
    "private: unsigned int __thiscall CBaseMrciCompression::getbits(unsigned int)",
    "public: virtual class CWbemTime __thiscall CBasicUnloadInstruction::GetNextFiringTime(class CWbemTime,long *)const",
    "int __stdcall IsNT(void)",
    "public: void __thiscall CVarVector::SetRawArrayBinding(int)",
    "public: unsigned long __thiscall CVar::GetDWORD(void)",
    "bool __stdcall Get_WPP_INIT_TRACING_Call_State(void)",
    "public: int __thiscall CMRCICompression::UncompressFile(unsigned short const *,unsigned short const *)",
    "public: virtual unsigned long __stdcall CBuffer::Release(void)",
    "public: __thiscall CWbemCriticalSection::CWbemCriticalSection(void)",
    "public: int __thiscall CNtSecurityDescriptor::HasOwner(void)",
    "public: __thiscall CRegistryMinMaxLimitControl::CRegistryMinMaxLimitControl(int,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: class WString2 & __thiscall WString2::TruncAtRToken(unsigned short)",
    "public: int __thiscall CSafeArray::AddDouble(double)",
    "public: int __thiscall CSafeArray::SetFloatAt(int,float)",
    "public: static long __stdcall CMUILocale::_GetSystemDefaultLocale(unsigned short * *,unsigned long)",
    "public: int __thiscall CVar::operator==(class CVar &)",
    "public: __thiscall CNtAcl::~CNtAcl(void)",
    "public: int __thiscall CNtAcl::GetAce(int,class CNtAce &)",
    "public: __thiscall CFlexArray::CFlexArray(int,int)",
    "public: __thiscall CBaseAce::CBaseAce(void)",
    "public: int __thiscall Registry::GetStr(unsigned short const *,unsigned short * *)",
    "public: int __thiscall CSafeArray::GetRawData(void *,int)",
    "public: void __thiscall CWQLScanner::Dump(void)",
    "public: unsigned long __thiscall CWbemInterval::GetSeconds(void)const",
    "bool __stdcall IsPrivilegePresent(void *,long)",
    "public: int __thiscall WString2::operator<=(unsigned short const *)const",
    "public: void __thiscall CExecRequest::SetWhenDoneHandle(void *)",
    "const CContainerControl::`vftable'",
    "public: __thiscall CWMITraceSettings::CWMITraceSettings(void)",
    "void __stdcall RegisterDLL(struct HINSTANCE__ *,struct _GUID,unsigned short *,unsigned short *,unsigned short *)",
    "public: __thiscall CNtAce::CNtAce(unsigned long,unsigned long,unsigned long,unsigned short *)",
    "public: __thiscall CVar::CVar(struct _FILETIME *)",
    "public: __thiscall CVar::CVar(char *,int)",
    "public: virtual __thiscall CUnk::~CUnk(void)",
    "public: __thiscall CExecQueue::CExecQueue(class CExecQueue &)",
    "public: void __thiscall CFlexArray::Trim(void)",
    "public: void __thiscall CVar::SetEmbeddedObject(struct IUnknown *)",
    "public: void __thiscall CExecQueue::AddRef(void)",
    "public: class WString & __thiscall WString::operator+=(unsigned short const *)",
    "public: __thiscall CArena::CArena(void)",
    "public: void __thiscall CVar::SetFileTime(struct _FILETIME *)",
    "public: __thiscall QL1_Parser::QL1_Parser(class CGenLexSource *)",
    "public: void __thiscall CVar::SetBlob(struct tagBLOB *,int)",
    "protected: virtual class CExecRequest * __thiscall CExecQueue::SearchForSuitableRequest(class CExecQueue::CThreadRecord *)",
    "public: int __thiscall CVar::IsDataNull(void)",
    "public: __thiscall CMUILocaleList::CMUILocaleList(void)",
    "private: static long __stdcall CWbemInstallObject::ExpandVariableValue(unsigned short const *,unsigned short *,unsigned int,unsigned int *)",
    "public: int __thiscall CNtAcl::Resize(unsigned long)",
    "public: virtual long __stdcall CWbemCallSecurity::RevertToSelf(void)",
    "public: static unsigned short const * __stdcall CWbemInstallObject::GetRegistryPathCIMOM(void)",
    "public: static void __stdcall CWbemInstallObject::SetBinaryPath(unsigned short const *)",
    "unsigned long __stdcall WMIControlClientOpsCallback(unsigned __int64,unsigned char *,unsigned long *)",
    "public: void __thiscall CExecQueue::SetThreadLimits(long,long,long)",
    "public: __thiscall WString2::operator unsigned short *(void)",
    "public: __thiscall CBuffer::CBuffer(unsigned char *,unsigned long,int)",
    "protected: int __thiscall CDateTimeParser::IsValidAmPmString(unsigned short *,unsigned short const *,unsigned short * * const)",
    "public: unsigned char __thiscall CDateTimeParser::GetSeconds(void)",
    "const CExecQueue::`vftable'",
    "public: int __thiscall CEventLog::Report(unsigned short,struct _EVENT_DESCRIPTOR const &,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString)",
    "public: __thiscall Registry::Registry(struct HKEY__ *,unsigned long,unsigned long,unsigned short const *)",
    "public: void __thiscall CVar::SetDispatch(struct IDispatch *)",
    "public: void __thiscall CMemoryLog::Write(void *,unsigned long)",
    "public: __thiscall CIdentityTest::CIdentityTest(class CTimerInstruction *)",
    "public: virtual unsigned long __thiscall CNtAce::GetStatus(void)",
    "public: long __thiscall CInstructionQueue::WaitAndPeek(class CTimerInstruction * &,class CWbemTime &)",
    "public: unsigned short * __thiscall CVar::GetTypeText(void)",
    "public: static void __stdcall CWStringArray::Difference(class CWStringArray &,class CWStringArray &,class CWStringArray &)",
    "public: void __thiscall CMinMaxLimitControl::SetMin(unsigned long)",
    "public: class Registry & __thiscall Registry::operator=(class Registry const &)",
    "public: int __thiscall Registry::SetQWORD(unsigned short const *,unsigned __int64)",
    "public: int __thiscall Registry::GetDWORDStr(unsigned short const *,unsigned long *)",
    "private: void __thiscall WString::DeleteString(unsigned short *)",
    "public: unsigned long __thiscall CWMITraceSettings::ReadFromRegistry(unsigned short const *)",
    "protected: virtual unsigned long __thiscall CExecQueue::WaitForSingleObjectWhileBusy(void *,unsigned long,class CExecQueue::CThreadRecord *)",
    "protected: void __thiscall CSmallArrayBlob::CopyData(class CSmallArrayBlob *)",
    "public: void __thiscall CFlexArray::Empty(void)",
    "public: void __thiscall WString2::Unquote(void)",
    "public: __thiscall CVar::CVar(float)",
    "public: class CBaseMrciCompression & __thiscall CBaseMrciCompression::operator=(class CBaseMrciCompression const &)",
    "public: class SHA256 & __thiscall SHA256::operator=(class SHA256 const &)",
    "public: virtual __thiscall QL1_Parser::~QL1_Parser(void)",
    "public: virtual void __thiscall CContainerControl::Release(struct IUnknown *)",
    "public: __thiscall CVar::operator float(void)",
    "public: __thiscall CVar::CVar(void)",
    "public: __thiscall CWbemTime::CWbemTime(class CWbemTime const &)",
    "public: class CNtSid & __thiscall CNtSid::operator=(class CNtSid const &)",
    "public: virtual long __stdcall CUnkInternal::QueryInterface(struct _GUID const &,void * *)",
    "protected: int __thiscall CDateTimeParser::TimeFormat8(unsigned short const *,int)",
    "public: struct SZLess & __thiscall SZLess::operator=(struct SZLess const &)",
    "public: int __thiscall Registry::Open(struct HKEY__ *,unsigned short const *,unsigned long)",
    "public: long __thiscall CVar::GetLong(void)",
    "public: int __thiscall WString::Length(void)const",
    "protected: int __thiscall CMRCICompression::UncompressFileV1(int,int)",
    "public: __thiscall CCircularQueue::CCircularQueue(void)",
    "public: int __thiscall CWStringArray::RemoveAt(int)",
    "public: class WString2 & __thiscall WString2::operator+=(unsigned short)",
    "const CAbstractQl1Parser::`vftable'",
    "public: __thiscall CTimerGenerator::CTimerGenerator(void)",
    "public: class CSmallArrayBlob * __thiscall CSmallArrayBlob::RemoveAt(int,void * *)",
    "public: void __thiscall QL_LEVEL_1_RPN_EXPRESSION::Release(void)",
    "public: class CDateTimeParser & __thiscall CDateTimeParser::operator=(class CDateTimeParser const &)",
    "protected: int __thiscall CDateTimeParser::CheckTimeFormat(unsigned short const *,int)",
    "public: virtual int __stdcall CWbemCallSecurity::IsImpersonating(void)",
    "public: virtual unsigned long __stdcall CUnk::Release(void)",
    "public: static class CWbemTime __stdcall CWbemTime::GetTickCount(void)",
    "protected: int __thiscall CDateTimeParser::TimeFormat7(unsigned short const *,int)",
    "public: void * __thiscall CSmallArrayBlob::operator[](int)const",
    "public: unsigned short * __thiscall QL_LEVEL_1_TOKEN::GetText(void)",
    "public: int __thiscall CWStringArray::SetAt(int,unsigned short const *)",
    "public: void __thiscall CExecQueue::Enter(void)",
    "public: __thiscall CHex::CHex(long)",
    "protected: void __thiscall CDMTFParser::ParseDate(unsigned short const *)",
    "public: virtual unsigned long __thiscall C9XAce::GetStatus(void)",
    "public: __thiscall CUnk::CUnk(class CLifeControl *,struct IUnknown *)",
    "private: static void * CMUILocale::m_fGetLocaleInfoEx",
    "public: int __thiscall CIdentitySecurity::AccessCheck(void)",
    "public: virtual long __thiscall CTimerGenerator::Shutdown(void)",
    "public: __thiscall CWStringArray::~CWStringArray(void)",
    "public: virtual long __stdcall CBuffer::Clone(struct IStream * *)",
    "public: int __thiscall CWbemInterval::IsZero(void)const",
    "int __stdcall WbemGetMachineShutdown(void)",
    "public: class CMemoryLog & __thiscall CMemoryLog::operator=(class CMemoryLog const &)",
    "long __stdcall ComposeName(unsigned short *,unsigned short * *)",
    "int __stdcall bAreWeLocal(unsigned short *)",
    "private: int __thiscall CTextTemplate::IsEmbeddedObjectProperty(unsigned short *)",
    "private: void __thiscall CSafeArray::CheckType(int)",
    "public: virtual long __thiscall CWbemCallSecurity::GetPotentialImpersonation(void)",
    "public: class CMUILocaleList & __thiscall CMUILocaleList::operator=(class CMUILocaleList const &)",
    "protected: virtual void __thiscall CExecQueue::LogError(class CExecRequest *,int)",
    "public: static void __stdcall CWbemInstallObject::FreeMap(void)",
    "public: int __thiscall Registry::SetStr(unsigned short const *,unsigned short const *)",
    "public: int __thiscall CVar::SetBSTR(unsigned short *)",
    "public: void __thiscall CFlexArray::Sort(void)",
    "public: __thiscall CVar::operator struct tagBLOB *(void)",
    "private: void __thiscall CTimerGenerator::EnsureRunning(void)",
    "int __cdecl ErrorTrace(char,char const *,...)",
    "public: class CDMTFParser & __thiscall CDMTFParser::operator=(class CDMTFParser const &)",
    "protected: void __thiscall CInstructionQueue::TouchHead(void)",
    "public: __thiscall CWin32DefaultArena::CWin32DefaultArena(void)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::AddAggregationProperty(class CPropertyName const &)",
    "public: static class CSmallArrayBlob * __stdcall CSmallArrayBlob::CreateBlob(int)",
    "public: __thiscall CIdentityTest::~CIdentityTest(void)",
    "public: virtual int __thiscall C9XAce::GetType(void)",
    "public: struct tagVARIANT * __thiscall CVar::GetNewVariant(void)",
    "public: class CPublishWMIOperationEvent & __thiscall CPublishWMIOperationEvent::operator=(class CPublishWMIOperationEvent const &)",
    "public: unsigned long __thiscall CNtSecurityDescriptor::GetStatus(void)",
    "private: static long (__stdcall* CWbemInstallObject::m_pfFlushCache)(int)",
    "public: void __thiscall CFlexArray::Bind(class CFlexArray &)",
    "public: __thiscall CVar::CVar(char)",
    "public: int __thiscall CSafeArray::AddVariant(struct tagVARIANT *)",
    "long __stdcall RetrieveSidFromToken(void *,class CNtSid &)",
    "public: unsigned short __thiscall CVar::GetWord(void)",
    "public: int __thiscall CVar::GetType(void)",
    "public: bool __thiscall CHaltable::isValid(void)",
    "public: unsigned char __thiscall CDateTimeParser::GetHours(void)",
    "public: unsigned short __thiscall CEventLogRecord::GetNumStrings(void)",
    "public: unsigned short * __thiscall CVar::GetLPWSTR(void)",
    "public: static unsigned long __stdcall CTraceSessionControl::Start(struct _GUID const *,class CWMITraceSettings *)",
    "public: class CUnkInternal & __thiscall CUnkInternal::operator=(class CUnkInternal const &)",
    "private: class CWbemCallSecurity & __thiscall CWbemCallSecurity::operator=(class CWbemCallSecurity const &)",
    "public: __thiscall CNtSecurityDescriptor::CNtSecurityDescriptor(void *)",
    "public: unsigned long __thiscall CNtSid::GetSize(void)",
    "int __stdcall LoggingLevelEnabled(unsigned long)",
    "protected: void __thiscall CFlexQueue::DecrementIndex(int &)",
    "public: __thiscall CVar::operator struct _GUID *(void)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::AddProperty(class CPropertyName const &)",
    "private: union SA_ArrayScalar __thiscall CSafeArray::GetScalarAt(int)",
    "public: void * * __thiscall CFlexArray::GetArrayPtr(void)",
    "public: class CCheckedInCritSec & __thiscall CCheckedInCritSec::operator=(class CCheckedInCritSec const &)",
    "public: int __thiscall CNtSecurityDescriptor::SetSacl(class CNtAcl *)",
    "public: static unsigned short * __stdcall CVar::TypeToText(int)",
    "const CBuffer::`vftable'",
    "public: static void __stdcall CWStringArray::Union(class CWStringArray &,class CWStringArray &,class CWStringArray &)",
    "public: unsigned long __thiscall CWMITraceSettings::WriteToRegistry(unsigned short const *)",
    "unsigned short * __stdcall ExtractMachineName(unsigned short *)",
    "public: unsigned int __thiscall CDateTimeParser::GetYear(void)",
    "private: int __thiscall CWQLScanner::Next(void)",
    "public: class CEnterWbemCriticalSection & __thiscall CEnterWbemCriticalSection::operator=(class CEnterWbemCriticalSection const &)",
    "public: __thiscall CEventLog::CEventLog(unsigned short const *,struct _GUID const &,unsigned long)",
    "public: long __thiscall CNtSecurityDescriptor::GetDacl(class CNtAcl * *)",
    "public: __thiscall CTimerGenerator::CTimerGenerator(class CTimerGenerator const &)",
    "public: struct _GUID * __thiscall CVar::GetClsId(void)",
    "protected: virtual void __thiscall CExecQueue::SitOutPenalty(long)",
    "public: class CInCritSec & __thiscall CInCritSec::operator=(class CInCritSec const &)",
    "public: int __thiscall CCheckedInCritSec::IsEntered(void)",
    "public: __thiscall CTextTemplate::CTextTemplate(class CTextTemplate const &)",
    "public: void * __thiscall CVar::GetRawData(void)",
    "public: int __thiscall CMRCIControl::AbortRequested(void)",
    "public: __thiscall CVar::operator char *(void)",
    "public: virtual __thiscall CBasicUnloadInstruction::~CBasicUnloadInstruction(void)",
    "public: int __thiscall CVarVector::SetRawArraySize(int)",
    "public: __thiscall CPropertyName::CPropertyName(class CPropertyName const &)",
    "public: __thiscall Registry::Registry(void)",
    "protected: int __thiscall CAbstractQl1Parser::prop_list(void)",
    "public: void __thiscall CVarVector::FillCVarAt(int,class CVar &)",
    "public: long __thiscall CHaltable::Halt(void)",
    "public: class WString & __thiscall WString::StripWs(int)",
    "private: static struct HINSTANCE__ * CPublishWMIOperationEvent::m_hAdvAPI32",
    "public: class WString & __thiscall WString::operator+=(unsigned short)",
    "public: bool __thiscall CDMTFParser::IsWildcard(int)",
    "public: __thiscall CBuffer::CBuffer(class CBuffer const &)",
    "private: int __thiscall CWQLScanner::ReduceSql92Joins(void)",
    "private: static void * CMUILocale::m_fGetThreadPreferredUILanguages",
    "protected: class CSmallArrayBlob * __thiscall CSmallArrayBlob::EnsureExtent(int)",
    "void __stdcall AdjustPrivIfLocalSystem(void *)",
    "public: class CExecRequest & __thiscall CExecRequest::operator=(class CExecRequest const &)",
    "private: int __thiscall CWQLScanner::SelectList(void)",
    "public: __thiscall CWStringArray::CWStringArray(class CWStringArray &)",
    "public: int __thiscall CVar::IsNull(void)",
    "public: __thiscall WString2::WString2(unsigned short const *)",
    "public: virtual long __thiscall CLimitControl::AddMember(void)",
    "public: __thiscall CVar::CVar(int,unsigned short *)",
    "public: class WString2 & __thiscall WString2::StripWs(int)",
    "public: int __thiscall CWStringArray::DeleteStr(int)",
    "private: void __thiscall CBaseMrciCompression::charbuf(unsigned int)",
    "public: __thiscall CLockableFlexArray::CLockableFlexArray(class CLockableFlexArray &)",
    "public: static long __stdcall CWbemInstallObject::CoCreateInstance(struct _GUID const &,struct IUnknown *,unsigned long,struct _GUID const &,void * *)",
    "protected: int __thiscall CAbstractQl1Parser::FlipOperator(int)",
    "public: struct _FILETIME __thiscall CVar::GetFileTime(void)",
    "public: __thiscall CVar::operator unsigned char(void)",
    "protected: class CSmallArrayBlob * __thiscall CSmallArrayBlob::Shrink(void)",
    "public: __thiscall Registry::~Registry(void)",
    "public: int __thiscall CSafeArray::AddBool(short)",
    "public: long __thiscall CWbemCriticalSection::GetLockCount(void)",
    "public: unsigned short const * __thiscall CMUILocaleList::GetLocales(void)",
    "public: int __thiscall Registry::SetExpandStr(unsigned short const *,unsigned short const *)",
    "public: __thiscall CVar::CVar(struct _GUID *,int)",
    "public: int __thiscall CSafeArray::ElementSize(void)",
    "public: int __thiscall CSafeArray::SetDispatchAt(int,struct IDispatch *)",
    "public: int __thiscall WString2::EqualNoCase(unsigned short const *)const",
    "protected: void __thiscall CDateTimeParser::ResetDate(int)",
    "public: void __thiscall CVar::SetDouble(double)",
    "public: __thiscall CRegistryMinMaxLimitControl::CRegistryMinMaxLimitControl(class CRegistryMinMaxLimitControl const &)",
    "public: __thiscall WString2::operator unsigned short const *(void)const",
    "public: static class CWbemTime __stdcall CWbemTime::GetInfinity(void)",
    "protected: virtual void __thiscall CExecQueue::ThreadMain(class CExecQueue::CThreadRecord *)",
    "public: __thiscall CInstructionQueue::CInstructionQueue(void)",
    "public: __thiscall QL1_Parser::QL1_Parser(class QL1_Parser const &)",
    "protected: int __thiscall CAbstractQl1Parser::opt_where(void)",
    "public: __thiscall CLike::CLike(unsigned short const *,unsigned short)",
    "public: __thiscall CCritSec::CCritSec(void)",
    "int __stdcall ReadI64(unsigned short const *,__int64 &)",
    "private: void __thiscall CTextTemplate::ConcatWithoutQuotes(class WString2 &,unsigned short * &)",
    "public: void * __thiscall CExecRequest::GetWhenDoneHandle(void)",
    "private: static unsigned long (__stdcall* CPublishWMIOperationEvent::m_fEventRegister)(struct _GUID const *,void (__stdcall*)(struct _GUID const *,unsigned long,unsigned char,unsigned __int64,unsigned __int64,struct _EVENT_FILTER_DESCRIPTOR *,void *),void *,unsigned __int64 *)",
    "public: void * __thiscall CFlexQueue::Unqueue(void)",
    "public: virtual __thiscall CNtAce::~CNtAce(void)",
    "public: int __thiscall CWbemInterval::operator<(class CWbemInterval)",
    "public: __thiscall QL_LEVEL_1_RPN_EXPRESSION::~QL_LEVEL_1_RPN_EXPRESSION(void)",
    "public: virtual void __thiscall CQl1ParseSink::InOrder(long)",
    "public: long __thiscall CTimerGenerator::Set(class CTimerInstruction *,class CWbemTime)",
    "public: class CMRCIControl & __thiscall CMRCIControl::operator=(class CMRCIControl const &)",
    "public: class CMinMaxLimitControl & __thiscall CMinMaxLimitControl::operator=(class CMinMaxLimitControl const &)",
    "protected: virtual int __thiscall CExecQueue::IsAppropriateThread(void)",
    "public: __thiscall CSafeArray::CSafeArray(struct tagSAFEARRAY *,int,int,int)",
    "public: int __thiscall CVarVector::RemoveAt(int)",
    "public: int __thiscall CNtSecurityDescriptor::SetGroup(class CNtSid *)",
    "private: static unsigned char const CLike::sMatachedWithWildcardChar",
    "public: void __thiscall CExecQueue::SetRequestLimits(long,long,long)",
    "const CQl1ParseSink::`vftable'",
    "public: void __thiscall CPropertyName::Empty(void)",
    "protected: int __thiscall CEventLog::SearchForRecord(class CEventLogRecord *)",
    "public: int __thiscall WString2::ExtractToken(unsigned short,class WString2 &)",
    "public: virtual unsigned long __stdcall CBuffer::AddRef(void)",
    "private: void __thiscall CWQLScanner::ClearPropRefs(void)",
    "public: unsigned long __thiscall CTraceSessionControl::Disable(void)",
    "public: int __thiscall CWQLScanner::CountQuery(void)",
    "public: int __thiscall Registry::SetDWORD(unsigned short const *,unsigned long)",
    "public: int __thiscall CDateTimeParser::GetUTC(void)",
    "public: bool __thiscall CTraceSessionControl::HasToBeEnabled(void)",
    "public: void __thiscall CClientOpsNode::Unlock(void)",
    "private: long __thiscall CIdentitySecurity::RetrieveSidFromCall(class CNtSid &)",
    "int __stdcall CriticalFailADAPTrace(char const *)",
    "public: unsigned char * __thiscall CBuffer::GetRawData(void)",
    "public: static void __stdcall CWbemInstallObject::RegisterCMIFlushRepositoryCacheHook(long (__stdcall*)(int))",
    "const C9XAce::`vftable'",
    "public: int __thiscall CNtSecurityDescriptor::SetFromAbsoluteCopy(struct SNtAbsoluteSD *)",
    "protected: virtual int __thiscall CExecQueue::Execute(class CExecQueue::CThreadRecord *)",
    "public: virtual long __thiscall CExecQueue::Enqueue(class CExecRequest *,void * *)",
    "public: class CVar & __thiscall CVarVector::GetAt(int)",
    "public: static class CWbemInterval __stdcall CWbemInterval::GetInfinity(void)",
    "private: __thiscall CWbemCallSecurity::~CWbemCallSecurity(void)",
    "public: void __thiscall CWStringArray::`default constructor closure'(void)",
    "public: static int __stdcall CExecQueue::IsSTAThread(void)",
    "void __stdcall BlobClear(struct tagBLOB *)",
    "public: __thiscall CTimerInstruction::CTimerInstruction(void)",
    "public: virtual long __stdcall CBuffer::CopyTo(struct IStream *,union _ULARGE_INTEGER,union _ULARGE_INTEGER *,union _ULARGE_INTEGER *)",
    "public: virtual void * __thiscall CWin32DefaultArena::Alloc(unsigned long)",
    "protected: void __thiscall CPropertyName::EnsureAllocated(long)",
    "public: unsigned short const * __thiscall CPropertyName::GetStringAt(long)const",
    "public: struct IUnknown * __thiscall CVar::GetUnknown(void)",
    "public: __thiscall CNtSid::CNtSid(enum CNtSid::SidType)",
    "public: virtual long __stdcall CBuffer::SetSize(union _ULARGE_INTEGER)",
    "public: struct QL_LEVEL_1_TOKEN & __thiscall QL_LEVEL_1_TOKEN::operator=(struct _tag_WbemQl1Token const &)",
    "protected: int __thiscall CDateTimeParser::IsValidMonthNumber(unsigned short *,unsigned short const *)",
    "public: int __thiscall CAbstractQl1Parser::CurrentLine(void)",
    "public: class CBuffer & __thiscall CBuffer::operator=(class CBuffer const &)",
    "public: int __thiscall CSafeArray::SetBoolAt(int,short)",
    "public: void __thiscall CFlexArray::`default constructor closure'(void)",
    "public: __thiscall WString2::WString2(void)",
    "public: unsigned long __thiscall CWMITraceSettings::SetDefaultValues(void)",
    "public: int __thiscall CWbemTime::IsZero(void)const",
    "public: __thiscall SZLess::SZLess(void)",
    "public: class C9XAce & __thiscall C9XAce::operator=(class C9XAce const &)",
    "public: static int __stdcall CDateTimeParser::CheckDMTFDateTimeInterval(unsigned short const *)",
    "public: unsigned int __thiscall CBaseMrciCompression::Mrci1Decompress(unsigned char *,unsigned int,unsigned char *,unsigned int)",
    "public: __thiscall CInsertionString::CInsertionString(long)",
    "protected: int __thiscall CDateTimeParser::DateFormat5(unsigned short const *,int)",
    "public: class CFlexArray & __thiscall CFlexArray::operator=(class CFlexArray &)",
    "public: __thiscall WString2::WString2(unsigned short *,int)",
    "public: void __thiscall CMRCIControl::Reset(void)",
    "public: void __thiscall WString::BindPtr(unsigned short *)",
    "public: virtual int __thiscall CBasicUnloadInstruction::GetInstructionType(void)",
    "protected: virtual long __thiscall CExecQueue::InitializeThread(void)",
    "protected: bool __thiscall CLike::MatchSet(unsigned short const *,unsigned short const *,int &)",
    "public: void __thiscall CSafeArray::Empty(void)",
    "public: static unsigned short * __stdcall CWin32DefaultArena::WbemSysAllocStringLen(unsigned short const *,unsigned int)",
    "int __stdcall IsLocalConnection(struct IUnknown *)",
    "public: __thiscall WString::WString(void)",
    "public: __thiscall CIdentitySecurity::~CIdentitySecurity(void)",
    "protected: virtual int __thiscall CExecQueue::IsSuitableThread(class CExecQueue::CThreadRecord *,class CExecRequest *)",
    "int __cdecl DebugTrace(char,char const *,...)",
    "private: int __thiscall CWQLScanner::StripWhereClause(void)",
    "private: static void * CMUILocale::m_fGetSystemDefaultLocaleName",
    "protected: virtual int __thiscall CExecQueue::IsIdleTooLong(class CExecQueue::CThreadRecord *,unsigned long)",
    "protected: void __thiscall CDateTimeParser::ResetTime(int)",
    "private: void __thiscall WString2::CopyBuffer(unsigned short const *,unsigned int)",
    "protected: int __thiscall CDateTimeParser::DateFormat6(unsigned short const *,int)",
    "private: int __thiscall CWbemTime::GetDMTF(int,unsigned long,unsigned short *)",
    "public: bool __thiscall CDMTFParser::IsInterval(void)",
    "public: long __thiscall CBuffer::WriteLPWSTR(unsigned short const *)",
    "public: __thiscall CIdentitySecurity::CIdentitySecurity(bool)",
    "public: int __thiscall Registry::GetType(unsigned short const *,unsigned long *)",
    "public: int __thiscall WString::operator<=(unsigned short const *)const",
    "protected: void __thiscall CAbstractQl1Parser::DeletePropertyName(void)",
    "public: int __thiscall CVar::SetBSTR(class auto_bstr)",
    "public: int __thiscall CVar::GetOleType(void)",
    "private: static unsigned short const * const CWbemInstallObject::m_pwszRepositoryPath",
    "int __stdcall WinPEKey(void)",
    "private: int __thiscall CWQLScanner::ExtractSelectType(void)",
    "public: unsigned short * __thiscall CVar::GetText(long,long,unsigned short const *)",
    "public: int __thiscall CSafeArray::AddDispatch(struct IDispatch *)",
    "public: int __thiscall CVarVector::Add(class CVar *)",
    "private: long __thiscall CMUILocaleList::AppendCulture(unsigned short const *)",
    "public: virtual long __stdcall CBuffer::LockRegion(union _ULARGE_INTEGER,union _ULARGE_INTEGER,unsigned long)",
    "public: unsigned short * __thiscall CWMITraceSettings::GetSessionName(void)",
    "public: virtual unsigned long __stdcall CUnkInternal::Release(void)",
    "int __stdcall EnablePrivilege(unsigned long,long)",
    "public: int __thiscall CNtAcl::GetNumAces(void)",
    "public: virtual __thiscall SZLess::~SZLess(void)",
    "public: struct tagVARIANT __thiscall CSafeArray::GetVariantAt(int)",
    "public: virtual int __thiscall CContainerControl::ObjectCreated(struct IUnknown *)",
    "public: class CClientOpsNode * __thiscall CClientOpsNode::GetNext(void)",
    "public: static void __stdcall CStaticCritSec::SetFailure(void)",
    "class CClientOpsNode * __stdcall GetGlobalClientOps(void)",
    "public: class CWbemTimeSpan & __thiscall CWbemTimeSpan::operator=(class CWbemTimeSpan const &)",
    "public: bool __thiscall CDMTFParser::IsValid(void)",
    "public: __thiscall CMemoryLog::CMemoryLog(void)",
    "public: class CWbemTime __thiscall CWbemTime::operator-(class CWbemTimeSpan const &)const",
    "public: int __thiscall CAbstractQl1Parser::Parse(class CQl1ParseSink *,int)",
    "public: static int __stdcall CWin32DefaultArena::WbemOutOfMemory(void)",
    "public: __thiscall CWQLScanner::CWQLScanner(class CWQLScanner &)",
    "public: long __thiscall CMUILocaleList::Initialize(unsigned short *,bool)",
    "protected: int __thiscall CDateTimeParser::DateFormat3(unsigned short const *,int)",
    "public: class CRegistryMinMaxLimitControl & __thiscall CRegistryMinMaxLimitControl::operator=(class CRegistryMinMaxLimitControl const &)",
    "public: __thiscall CLockableFlexArray::~CLockableFlexArray(void)",
    "public: __thiscall CLimitControl::CLimitControl(class CLimitControl const &)",
    "public: void __thiscall CExecQueue::SetIdleTimeout(unsigned long)",
    "protected: int __thiscall CDateTimeParser::TimeFormat5(unsigned short const *,int)",
    "protected: int __thiscall CAbstractQl1Parser::prop_list_2(void)",
    "public: class CNtAcl * __thiscall CNtSecurityDescriptor::GetSacl(void)",
    "public: unsigned short const * __thiscall CLike::GetExpression(void)",
    "public: unsigned short * __thiscall CWQLScanner::AliasToTable(unsigned short *)",
    "public: static long __stdcall CPublishWMIOperationEvent::PublishRepUpdate(unsigned long,unsigned short *,unsigned long,struct IWbemContext *)",
    "protected: int __thiscall CDMTFParser::ParsePart(unsigned short const *,int,int,int *,int,int)",
    "public: void __thiscall CMemoryLog::Write(long)",
    "private: static unsigned short const * const CWbemInstallObject::m_pwszRegistryPathWbem",
    "public: int __thiscall CSafeArray::Status(void)",
    "public: static void * __stdcall CWin32DefaultArena::GetArenaHeap(void)",
    "public: __thiscall CLimitControl::CLimitControl(void)",
    "public: static long __stdcall CMUILocale::GetPreferredLanguages(unsigned short * *,unsigned long *)",
    "public: static long __stdcall CMUILocale::LCID_To_Culture_Format(unsigned long,unsigned short *,unsigned int)",
    "public: unsigned long __thiscall CWbemCriticalSection::GetOwningThreadId(void)",
    "public: __thiscall CVarVector::CVarVector(void)",
    "public: static unsigned __int64 CPublishWMIOperationEvent::m_publisher",
    "const CUnk::`vftable'",
    "public: void __thiscall CTimerGenerator::ScheduleFreeUnusedLibraries(void)",
    "private: int __thiscall CWQLScanner::ReduceSql89Joins(void)",
    "public: virtual long __thiscall CLimitControl::RemoveMember(void)",
    "public: __thiscall CFlexQueue::~CFlexQueue(void)",
    "public: void __thiscall CFlexQueue::ResetQueue(void)",
    "public: unsigned long __thiscall CUnkInternal::InternalRelease(void)",
    "public: class CNtSecurity & __thiscall CNtSecurity::operator=(class CNtSecurity const &)",
    "public: int __thiscall WString::EqualNoCase(unsigned short const *)const",
    "int __stdcall isunialphanum(unsigned short)",
    "public: bool __thiscall CNtSid::IsUser(void)",
    "public: int __thiscall CSafeArray::SetByteAt(int,unsigned char)",
    "public: unsigned short const * const & __thiscall WString2::GetStringPointerByRef(void)const",
    "long __stdcall TestDirExistAndCreateWithSDIfNotThere(unsigned short *,unsigned short *)",
    "public: __thiscall CDMTFParser::~CDMTFParser(void)",
    "public: void __thiscall CWbemTime::Set100nss(__int64)",
    "public: __thiscall CVar::CVar(struct tagBLOB *,int)",
    "public: unsigned long __thiscall CNtAcl::GetSize(void)",
    "public: class CInsertionString & __thiscall CInsertionString::operator=(class CInsertionString const &)",
    "public: void __thiscall CMRCIControl::AbortCompression(void)",
    "public: class WString & __thiscall WString::operator=(class WString const &)",
    "public: static long __stdcall CPublishWMIOperationEvent::IsEventEnabled(struct _EVENT_DESCRIPTOR const &)",
    "int __stdcall IsNtSetupRunning(void)",
    "public: __thiscall CUnk::CUnk(class CUnk const &)",
    "void __stdcall UnRegisterDLL(struct _GUID,unsigned short *)",
    "public: struct IUnknown * __thiscall CUnk::GetInnerUnknown(void)",
    "public: static unsigned short * __stdcall CWin32DefaultArena::WbemSysAllocString(unsigned short const *)",
    "public: static void __stdcall SHA256::Transform(void *,unsigned int,unsigned char * const)",
    "private: unsigned short * __thiscall CTextTemplate::HandleEmbeddedObjectProperties(unsigned short *,struct IWbemClassObject *)",
    "public: void __thiscall CStaticCritSec::Leave(void)",
    "public: void __thiscall CMinMaxLimitControl::SetMax(unsigned long)",
    "protected: class CSmallArrayBlob * __thiscall CSmallArrayBlob::ShrinkIfNeeded(void)",
    "public: static void __stdcall CWbemInstallObject::SetRepositoryFolder(unsigned short const *)",
    "public: void * * __thiscall CSmallArrayBlob::CloneData(void)",
    "public: class CTimerGenerator & __thiscall CTimerGenerator::operator=(class CTimerGenerator const &)",
    "public: class CMUILocale & __thiscall CMUILocale::operator=(class CMUILocale const &)",
    "int __stdcall IsInAdminGroup(void)",
    "public: virtual long __stdcall CBuffer::QueryInterface(struct _GUID const &,void * *)",
    "public: virtual unsigned long __thiscall CNtAce::GetSerializedSize(void)",
    "public: char * __thiscall WString2::GetLPSTR(void)const",
    "public: __thiscall CDateTimeParser::~CDateTimeParser(void)",
    "public: long __thiscall CBuffer::Advance(unsigned long)",
    "public: int __thiscall CVarVector::IsOptimized(void)",
    "public: class CDatePart & __thiscall CDatePart::operator=(class CDatePart const &)",
    "public: int __thiscall CSafeArray::SetRawData(void *,int,int)",
    "public: int __thiscall CVar::Status(void)",
    "protected: int __thiscall CDateTimeParser::TimeFormat4(unsigned short const *,int)",
    "public: int __thiscall CVar::ChangeTypeTo(unsigned short)",
    "private: void __thiscall CVar::Init(void)",
    "public: int __thiscall CSafeArray::GetActualVarType(unsigned short *)",
    "public: int __thiscall CSafeArray::GetType(void)",
    "long __stdcall WbemSetDynamicCloaking(struct IUnknown *,unsigned long,unsigned long)",
    "public: unsigned long __thiscall CNtAce::GetSize(void)",
    "unsigned long __stdcall BreakOnDbgAndRenterLoop(void)",
    "public: void __thiscall CVarVector::Empty(void)",
    "public: struct tagSAFEARRAY * __thiscall CSafeArray::GetArrayCopy(void)",
    "public: __thiscall CInsertionString::CInsertionString(class CHex)",
    "class CMemoryLog * __stdcall GetMemLogObject(void)",
    "public: struct tagBLOB * __thiscall CVar::GetBlob(void)",
    "public: virtual unsigned long __thiscall CWbemCallSecurity::GetAuthenticationId(struct _LUID &)",
    "public: __thiscall CWbemCriticalSection::~CWbemCriticalSection(void)",
    "public: __thiscall QL_LEVEL_1_TOKEN::QL_LEVEL_1_TOKEN(void)",
    "private: void __thiscall CBaseMrciCompression::mrci2outsingle(unsigned int)",
    "public: long __thiscall CNtSid::GetTextSid(unsigned short * *)",
    "public: long __thiscall CVarVector::SetRawArrayData(void *,int,int)",
    "const CLimitControl::`vftable'",
    "public: unsigned int __thiscall CBaseMrciCompression::Mrci2MaxCompress(unsigned char *,unsigned int,unsigned char *,unsigned int)",
    "private: static unsigned long (__stdcall* CPublishWMIOperationEvent::m_fEventWrite)(unsigned __int64,struct _EVENT_DESCRIPTOR *,unsigned long,struct _EVENT_DATA_DESCRIPTOR *)",
    "public: static long __stdcall CPublishWMIOperationEvent::PublishProviderStarted(unsigned short *,long,unsigned short *,unsigned long,unsigned short *)",
    "public: __thiscall WString::WString(unsigned short const *)",
    "private: void __thiscall CBaseMrciCompression::putbits(unsigned int,unsigned int)",
    "public: unsigned char __thiscall CWMITraceSettings::GetTraceLevel(void)",
    "public: static int __stdcall CMUILocale::_Free(void *)",
    "public: __thiscall CFlexQueue::CFlexQueue(int)",
    "public: int __thiscall CNtSecurityDescriptor::SetDacl(class CNtAcl *)",
    "public: long __thiscall CVarVector::AccessRawArray(void * *)",
    "public: void __thiscall CCritSec::Leave(void)",
    "public: int __thiscall CSafeArray::SetShortAt(int,short)",
    "public: __thiscall CCheckedInCritSec::CCheckedInCritSec(class CCritSec *)",
    "public: long __thiscall CDatePart::SetDate(unsigned short const *)",
    "public: static unsigned short const * __stdcall CWbemInstallObject::GetBinaryPath(void)",
    "public: struct QL_LEVEL_1_RPN_EXPRESSION & __thiscall QL_LEVEL_1_RPN_EXPRESSION::operator=(struct QL_LEVEL_1_RPN_EXPRESSION const &)",
    "protected: static void __stdcall CExecQueue::Register(class CExecQueue::CThreadRecord *)",
    "int __stdcall IsNetworkService(void *)",
    "public: void __thiscall CSafeArray::SetDestructorPolicy(int)",
    "public: __thiscall QL_LEVEL_1_TOKEN::~QL_LEVEL_1_TOKEN(void)",
    "int __stdcall isunialpha(unsigned short)",
    "public: void __thiscall CNtAcl::`default constructor closure'(void)",
    "public: void __thiscall WString2::BindPtr(unsigned short *)",
    "public: int __thiscall CSafeArray::SetLongAt(int,long)",
    "public: static long __stdcall CMUILocale::_LCIDToLocaleName(unsigned long,unsigned short *,int,unsigned long)",
    "public: class WString __thiscall WString::operator()(int,int)const",
    "public: long __thiscall CMUILocaleList::GetFirst_ms_XXX_Locale(unsigned short * *)",
    "public: void __thiscall CWStringArray::Empty(void)",
    "private: long __thiscall CWbemCallSecurity::CloneThreadToken(unsigned long)",
    "protected: virtual int __thiscall CExecQueue::IsSTA(void)",
    "public: void __thiscall CBasicUnloadInstruction::SetInterval(class CWbemInterval &)",
    "public: int __thiscall WString2::Equal(unsigned short const *)const",
    "public: int __thiscall Registry::SetMultiStr(unsigned short const *,unsigned short *,unsigned long)",
    "public: unsigned short * __thiscall CWStringArray::operator[](int)const",
    "public: long __thiscall CDatePart::SetDate(char const *)",
    "public: int __thiscall CWbemInterval::operator>(class CWbemInterval)",
    "public: __thiscall CWQLScanner::CWQLScanner(class CGenLexSource *)",
    "public: __thiscall CTextTemplate::~CTextTemplate(void)",
    "public: class CExecRequest * __thiscall CExecRequest::GetNext(void)",
    "public: __thiscall CMinMaxLimitControl::CMinMaxLimitControl(int,unsigned short const *)",
    "public: class WString2 __thiscall WString2::operator()(int,int)const",
    "protected: virtual int __thiscall CExecQueue::DoesNeedNewThread(class CExecRequest *)",
    "public: class CWin32DefaultArena & __thiscall CWin32DefaultArena::operator=(class CWin32DefaultArena const &)",
    "public: __thiscall CWin32DefaultArena::~CWin32DefaultArena(void)",
    "private: void __thiscall CBaseMrciCompression::inithash(void)",
    "protected: int __thiscall CAbstractQl1Parser::trailing_or_null(void)",
    "public: class CPersistentConfig & __thiscall CPersistentConfig::operator=(class CPersistentConfig const &)",
    "private: static bool __stdcall CWbemInstallObject::IsInitialized(void)",
    "protected: static int __cdecl CFlexArray::CompareEls(void const *,void const *)",
    "private: void __thiscall CBaseMrciCompression::outlength(unsigned int)",
    "public: __thiscall CNtSid::CNtSid(void *)",
    "public: void __thiscall CVar::SetFloat(float)",
    "public: void __thiscall CExecRequest::SetNext(class CExecRequest *)",
    "public: __thiscall CNtSid::CNtSid(unsigned short *)",
    "public: class WString & __thiscall WString::TruncAtRToken(unsigned short)",
    "public: class CWbemInterval __thiscall CWbemTime::RemainsUntil(class CWbemTime const &)const",
    "public: __thiscall CVar::CVar(unsigned short)",
    "private: long __thiscall CMUILocaleList::AppendLocale(unsigned short const *)",
    "public: class CFlexArray const * __thiscall CWQLScanner::GetSelectedColumns(void)",
    "public: struct _EVENT_TRACE_PROPERTIES * __thiscall CWMITraceSettings::GetEventTraceProperties(void)",
    "public: __thiscall CAbstractQl1Parser::CAbstractQl1Parser(class CAbstractQl1Parser const &)",
    "const QL1_Parser::`vftable'",
    "private: unsigned int __thiscall CBaseMrciCompression::getbit(void)",
    "public: virtual unsigned short const * __thiscall CExecQueue::GetType(void)",
    "public: struct IDispatch * __thiscall CVar::GetDispatch(void)",
    "public: static void __stdcall CWbemInstallObject::SetRegistryPathWbem(unsigned short const *)",
    "public: void __thiscall CFlexArray::SetAt(int,void *)",
    "public: virtual unsigned long __thiscall C9XAce::GetSerializedSize(void)",
    "public: class CMRCICompression & __thiscall CMRCICompression::operator=(class CMRCICompression const &)",
    "protected: int __thiscall CAbstractQl1Parser::opt_having(void)",
    "public: __int64 __thiscall CWbemTime::Get100nss(void)const",
    "public: int __thiscall CWbemTime::operator<(class CWbemTime const &)const",
    "public: static long __stdcall CPublishWMIOperationEvent::PublishRepDelete(unsigned long,unsigned short *,struct IWbemContext *)",
    "public: int __thiscall CNtAcl::IsValid(void)",
    "long __stdcall BuildSecurityDescriptorParameter(struct IWbemServices *,struct IWbemContext *,class CNtSecurityDescriptor *,struct IWbemClassObject *)",
    "protected: int __thiscall CDateTimeParser::IsValidSecondNumber(unsigned short *,unsigned short const *)",
    "public: int __thiscall CSafeArray::AddByte(unsigned char)",
    "public: long __thiscall CBuffer::SetSize(unsigned long)",
    "public: static class CWbemTime __stdcall CWbemTime::GetZero(void)",
    "public: void * const * __thiscall CFlexArray::GetArrayPtr(void)const",
    "public: virtual unsigned long __stdcall CUnkInternal::AddRef(void)",
    "public: class CWbemInstallObject & __thiscall CWbemInstallObject::operator=(class CWbemInstallObject const &)",
    "public: __thiscall CVar::CVar(short,int)",
    "public: virtual int __thiscall CUnk::OnInitialize(void)",
    "public: void * __thiscall CFlexQueue::Peek(void)",
    "public: class WString & __thiscall WString::operator+=(class WString const &)",
    "struct hostent * __stdcall GetFQDN_Ipv4(unsigned short *)",
    "public: int __thiscall CVarVector::Add(class CVar &)",
    "protected: int __thiscall CDateTimeParser::IsValidHourNumber(unsigned short *,unsigned short const *)",
    "public: int __thiscall CEventLog::Open(void)",
    "const CHaltable::`vftable'",
    "public: void __thiscall CWbemInterval::SetMilliseconds(unsigned long)",
    "int __stdcall IsW2KOrMore(void)",
    "public: class CArena & __thiscall CArena::operator=(class CArena const &)",
    "public: class CSmallArrayBlob * __thiscall CSmallArrayBlob::InsertAt(int,void *)",
    "public: int __thiscall CSafeArray::SetBSTRAt(int,unsigned short *)",
    "public: class CHaltable & __thiscall CHaltable::operator=(class CHaltable const &)",
    "public: int __thiscall CVar::CompareTo(class CVar &,int)",
    "private: static struct HINSTANCE__ * CMUILocale::m_hKernel32",
    "private: long __thiscall CIdentitySecurity::GetSidFromThreadOrProcess(class CNtSid &)",
    "public: void __thiscall CCheckedInCritSec::Enter(void)",
    "public: __thiscall CDatePart::CDatePart(void)",
    "public: class CNtAcl & __thiscall CNtAcl::operator=(class CNtAcl const &)",
    "public: __thiscall WString::WString(unsigned short *,int)",
    "private: static unsigned short const * const CWbemInstallObject::m_pwszBinaryPath",
    "private: void __thiscall CBaseMrciCompression::expandstring(unsigned char * *,unsigned int,unsigned int)",
    "public: void __thiscall CLike::SetExpression(unsigned short const *,unsigned short)",
    "public: bool __thiscall CExecRequest::IsOk(void)",
    "protected: int __thiscall CAbstractQl1Parser::opt_aggregation(void)",
    "public: class CNtSid * __thiscall CNtSecurityDescriptor::GetGroup(void)",
    "private: static unsigned long (__stdcall* CPublishWMIOperationEvent::m_fEventUnregister)(unsigned __int64)",
    "public: virtual __thiscall CBaseAce::~CBaseAce(void)",
    "public: long __thiscall CPropertyName::GetNumElements(void)const",
    "private: void __thiscall CWQLScanner::ClearTokens(void)",
    "public: class CVarVector * __thiscall CVar::GetVarVector(void)",
    "public: int __thiscall CVar::DumpText(struct _iobuf *)",
    "public: int __thiscall WString::Equal(unsigned short const *)const",
    "public: void __thiscall CWStringArray::Sort(void)",
    "public: __thiscall CVar::CVar(long)",
    "unsigned long __stdcall GetQFDN_Ipv6(unsigned short *,unsigned short *,int,int)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::SetTolerance(struct _tag_WbemQl1Tolerance const &)",
    "public: long __thiscall CVarVector::UnaccessRawArray(void)",
    "public: static long __stdcall CMUILocale::_GetSystemDefaultLocaleName(unsigned short * *)",
    "private: static long __stdcall CMUILocale::GetFunctionPointers(void)",
    "public: __thiscall Registry::Registry(struct HKEY__ *,unsigned long,unsigned short const *)",
    "public: virtual long __stdcall CBuffer::Revert(void)",
    "protected: __thiscall CBasicUnloadInstruction::CBasicUnloadInstruction(void)",
    "public: __thiscall WString::operator unsigned short const *(void)const",
    "public: static void __stdcall MD5::ContinueTransform(void *,unsigned int,unsigned char * const)",
    "public: bool __thiscall CFlexQueue::Enqueue(void *)",
    "public: virtual void * __thiscall CWbemCallSecurity::GetToken(void)",
    "protected: int __thiscall CDateTimeParser::DateFormat11(unsigned short const *,unsigned short const *,int)",
    "public: class CTimerInstruction & __thiscall CTimerInstruction::operator=(class CTimerInstruction const &)",
    "public: void * * __thiscall CFlexArray::UnbindPtr(void)",
    "int __stdcall IsAdmin(void *)",
    "const CWin32DefaultArena::`vftable'",
    "public: unsigned short const * __thiscall CMUILocaleList::GetCultures(void)",
    "protected: int __thiscall CDateTimeParser::IsValidYearMonthDayNumber(unsigned short *)",
    "protected: void __thiscall CDateTimeParser::ResetDateTime(int)",
    "public: unsigned short const * const & __thiscall WString::GetStringPointerByRef(void)const",
    "public: class CTextTemplate & __thiscall CTextTemplate::operator=(class CTextTemplate const &)",
    "public: __thiscall CVar::CVar(class CVarVector *,int)",
    "public: __thiscall WString2::WString2(char const *)",
    "struct tagBLOB __stdcall BlobCopy(struct tagBLOB const *)",
    "public: long __thiscall CNtSecurityDescriptor::DeleteSacl(void)",
    "protected: int __thiscall CAbstractQl1Parser::property_name(void)",
    "public: __thiscall CMUILocaleList::~CMUILocaleList(void)",
    "public: virtual bool __thiscall CNtAce::Deserialize(unsigned char *)",
    "public: int __thiscall CSafeArray::AddFloat(float)",
    "public: static void __stdcall CWbemInstallObject::CleanUp(void)",
    "public: __thiscall CSafeArray::~CSafeArray(void)",
    "public: bool __thiscall CDMTFParser::IsUsed(int)",
    "public: class WString & __thiscall WString::TruncAtLToken(unsigned short)",
    "public: __thiscall CFlexArray::~CFlexArray(void)",
    "public: virtual long __stdcall CWbemCallSecurity::QueryBlanket(unsigned long *,unsigned long *,unsigned short * *,unsigned long *,unsigned long *,void * *,unsigned long *)",
    "long __stdcall RetrieveSidFromCall(class CNtSid &)",
    "public: unsigned short * __thiscall CAbstractQl1Parser::CurrentToken(void)",
    "private: unsigned short * __thiscall CTextTemplate::GetPropertyFromIUnknown(unsigned short *,struct IUnknown *)",
    "public: int __thiscall WString::WildcardTest(unsigned short const *)const",
    "public: int __thiscall CEventLogRecord::operator==(class CEventLogRecord const &)",
    "public: long __thiscall CTimerGenerator::Remove(class CInstructionTest *)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::SetAggregated(void)",
    "public: long __thiscall CSafeArray::Unaccess(void)",
    "public: void __thiscall CClientOpsNode::RemoveSelf(void)",
    "public: struct IDispatch * __thiscall CSafeArray::GetDispatchAt(int)",
    "protected: long __thiscall CMinMaxLimitControl::ComputePenalty(unsigned long,unsigned long,unsigned long *,int *)",
    "public: virtual void __thiscall CBasicUnloadInstruction::AddRef(void)",
    "public: long __thiscall Registry::GetLastError(void)",
    "public: __thiscall CNtAcl::CNtAcl(unsigned long)",
    "const CTimerGenerator::`vftable'",
    "public: __thiscall CHex::operator long(void)",
    "private: static unsigned char const CLike::sMatachedWithOneChar",
    "public: void __thiscall CPropertyName::operator=(struct _tag_WbemPropertyName const &)",
    "public: int __thiscall Registry::DeleteValue(unsigned short const *)",
    "public: void __thiscall WString2::Empty(void)",
    "public: int __thiscall CSafeArray::RemoveAt(int)",
    "public: static class IWbemCallSecurity * __stdcall CWbemCallSecurity::CreateInst(void)",
    "public: unsigned short * __thiscall Registry::GetMultiStr(unsigned short const *,unsigned long &)",
    "public: static unsigned long __stdcall CExecQueue::GetTlsIndex(void)",
    "public: class CNtAcl * __thiscall CNtAcl::OrderAces(void)",
    "public: __thiscall CVar::CVar(struct tagVARIANT *)",
    "public: int __thiscall CDateTimeParser::SetDateTime(unsigned short const *)",
    "public: __thiscall CSafeArray::CSafeArray(class CSafeArray &)",
    "public: class CWbemInterval __thiscall CWbemInterval::operator*(double)const",
    "public: static void __stdcall CWin32DefaultArena::WbemSysFreeString(unsigned short *)",
    "public: class CAbstractQl1Parser & __thiscall CAbstractQl1Parser::operator=(class CAbstractQl1Parser const &)",
    "private: static unsigned short const * const CWbemInstallObject::m_pwszRegistryPathCIMOM",
    "long __stdcall Throttle(unsigned long,unsigned long,unsigned long,unsigned long,unsigned long)",
    "private: void __thiscall CBaseMrciCompression::mrci1outsingle(unsigned int)",
    "public: __thiscall CLike::CLike(void)",
    "public: __thiscall CIdentitySecurity::CIdentitySecurity(class CIdentitySecurity const &)",
    "private: static unsigned long __stdcall CTimerGenerator::SchedulerThread(void *)",
    "public: static unsigned long (__stdcall* CPublishWMIOperationEvent::m_fEventWriteTransfer)(unsigned __int64,struct _EVENT_DESCRIPTOR const *,struct _GUID const *,struct _GUID const *,unsigned long,struct _EVENT_DATA_DESCRIPTOR *)",
    "public: class CHex & __thiscall CHex::operator=(class CHex const &)",
    "public: long __thiscall CInstructionQueue::Change(class CTimerInstruction *,class CWbemTime)",
    "public: static unsigned short const * __stdcall CWbemInstallObject::GetAutoRecoverFolder(void)",
    "public: unsigned short * __thiscall QL_LEVEL_1_RPN_EXPRESSION::GetText(void)",
    "public: virtual long __stdcall CUnk::QueryInterface(struct _GUID const &,void * *)",
    "public: __thiscall CWbemTimeSpan::CWbemTimeSpan(int,int,int,int,int,int,int)",
    "public: __thiscall CEventLogRecord::~CEventLogRecord(void)",
    "protected: int __thiscall CDateTimeParser::DateFormat1(unsigned short const *,int)",
    "public: unsigned long __thiscall CWbemInterval::GetMilliseconds(void)const",
    "public: unsigned char __thiscall CSafeArray::GetByteAt(int)",
    "public: __thiscall CWbemInstallObject::~CWbemInstallObject(void)",
    "public: void __thiscall CPropertyName::AddElement(unsigned short const *)",
    "public: static class CWbemCallSecurity * __stdcall CWbemCallSecurity::MakeInternalCopyOfThread(void)",
    "long __stdcall RegisterDllAppid(struct HINSTANCE__ *,struct _GUID,unsigned short *,unsigned short *,unsigned short *,unsigned short *)",
    "public: __thiscall CInstructionTest::CInstructionTest(class CInstructionTest const &)",
    "public: __thiscall CVar::CVar(unsigned short *,int)",
    "private: void __thiscall CLike::EnsureMatchState(unsigned int)",
    "public: __thiscall CVar::CVar(double)",
    "public: static long __stdcall CPublishWMIOperationEvent::PublishProviderInfo(unsigned long,unsigned short *,unsigned long,unsigned short *,unsigned short *,unsigned short *,struct IWbemContext *)",
    "public: int __thiscall CNtSid::operator==(class CNtSid &)",
    "int __stdcall NormalizeCimDateTime(unsigned short const *,unsigned short * *)",
    "public: __thiscall CVar::operator long(void)",
    "public: virtual long __stdcall CBuffer::Read(void *,unsigned long,unsigned long *)",
    "protected: int __thiscall CDateTimeParser::IsValidMonthString(unsigned short *,unsigned short const *,unsigned short * * const,unsigned short * * const)",
    "protected: int __thiscall CAbstractQl1Parser::parse_property_name(class CPropertyName &)"
  ],
  "wbiosrvc.dll": [
    "ServiceMain"
  ],
  "wcmapi.dll": [
    "WcmExitConnectedStandby",
    "WcmBeginIgnoreProfileList",
    "WcmResetIgnoreProfileList",
    "WcmEnumInterfaces",
    "WcmEnterConnectedStandby",
    "WcmOrderConnection",
    "WcmCloseHandle",
    "WcmExitNetQuiet",
    "WcmEnterNetQuiet",
    "WcmGetProfileList",
    "WcmEndIgnoreProfileList",
    "WcmSetProfileList",
    "WcmFreeMemory",
    "WcmGetInterfaceToken",
    "WcmSetParameter",
    "WcmQueryParameter",
    "WcmOpenHandle",
    "WcmSetProperty",
    "WcmQueryProperty"
  ],
  "wcmcsp.dll": [
    "WlanCspInit",
    "WlanCspDeInit",
    "EthernetCspInit",
    "WwanCspDeInit",
    "EthernetCspDeInit",
    "WwanCspInit"
  ],
  "wcmsvc.dll": [
    "CdeGetProfileListForInterface",
    "CdeGetProfileList",
    "CdeQueryParameter",
    "SvchostPushServiceGlobals",
    "CdeGetEntireProfileList",
    "CdeSetParameter",
    "WcmSvcMain"
  ],
  "wcncsvc.dll": [
    "WcnServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "wcnwiz.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wdc.dll": [
    "WdcParseLegacyFile",
    "WdcRunTaskAsInteractiveUser",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wdi.dll": [
    "WdiGetClientActivityId",
    "WdiDiagnose",
    "WdiGetResult",
    "WdiCancel",
    "WdiGetParameterCount",
    "WdiSetProblemDetectionResult",
    "WdiGetQueuedResolutionId",
    "WdiIsQueuedResolutionAdmin",
    "WdiGetScenarioInstanceId",
    "WdiCloseInstance",
    "WdiGetInstanceId",
    "WdiGetParameterData",
    "WdiGetClientLCID",
    "WdiSetProgress",
    "WdipLaunchLocalHost",
    "WdiGetLoggerSnapshotPath",
    "WdiGetParameterName",
    "WdiGetProgress",
    "DllCanUnloadNow",
    "WdiGetQueuedResolutionPriority",
    "WdiGetScenarioIcon",
    "WdiGetScenarioInstances",
    "WdiGetParameterByName",
    "WdiGetParameterByIndex",
    "WdipLaunchRunDLLUserHost",
    "WdiAddFileToInstance",
    "WdiGetParameterDiagnosticModuleId",
    "WdiDeleteQueuedResolution",
    "WdiGetQueuedResolutionAudience",
    "WdiGetParameterDataLength",
    "WdiLaunchQueuedResolution",
    "WdiOpenInstance",
    "DllGetClassObject",
    "WdiGetScenarioInstanceFilePath",
    "WdiGetScenarioTypeName",
    "WdiGetInstanceFilePath",
    "WdiGetDiagnosticModuleId",
    "WdiGetEvent",
    "WdiGetScenarioSourceName",
    "WdiGetScenarioInstanceCreatedDate",
    "WdiGetQueuedResolutionName",
    "WdiRevertToSelf",
    "WdiGetParameterFlags",
    "WdiGetQueuedResolutionExpirationDate",
    "WdiSetResolution",
    "ServiceMain",
    "WdiAddParameter",
    "WdiCreateInstance",
    "WdiGetScenarioInfo",
    "WdiQueueCurrentResolution",
    "WdiSetFeedback",
    "WdiImpersonateClient",
    "WdiResolve"
  ],
  "wdiasqmmodule.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "wdigest.dll": [
    "SpLsaModeInitialize",
    "SsiCredentialsUpdateFree",
    "SsiCredentialsUpdateNotify",
    "CredentialUpdateRegister",
    "SpInitialize",
    "SpUserModeInitialize",
    "SpInstanceInit",
    "CredentialUpdateNotify",
    "CredentialUpdateFree"
  ],
  "wdscore.dll": [
    "WdsInitializeDataUInt64",
    "WdsEnumFirstBlackboardItem",
    "WdsUnlockExecutionGroup",
    "WdsEnumFirstCollectionValue",
    "WdsAddModule",
    "public: __thiscall CDynamicArray::~CDynamicArray(void)",
    "WdsGetCurrentExecutionGroup",
    "WdsGetBlackboardValue",
    "public: unsigned __int64 & __thiscall CDynamicArray::operator[](unsigned int)",
    "WdsSetupLogMessageW",
    "WdsDeleteEvent",
    "WdsEnumNextBlackboardItem",
    "ConstructPartialMsgVA",
    "WdsInitializeDataStringA",
    "WdsInitializeDataStringW",
    "WdsDeleteBlackboardValue",
    "public: int __thiscall CDynamicArray::Add(unsigned __int64 &)",
    "WdsUnsubscribe",
    "public: struct SKey * __thiscall CDynamicArray::operator->(void)const",
    "WdsIterateQueue",
    "WdsPublishImmediateAsync",
    "ConstructPartialMsgIfW",
    "WdsPublishImmediateEx",
    "WdsLogRegStockProviders",
    "WdsIsDiagnosticModeEnabled",
    "WdsIterateOfflineQueue",
    "StartMinorTask",
    "public: __thiscall CDynamicArray::operator struct SValue *(void)const",
    "public: struct CBlackboardFactory::SKeeperEntry & __thiscall CDynamicArray::ElementAt(unsigned int)",
    "WdsLogCreate",
    "public: unsigned int __thiscall CDynamicArray::GetSize(void)const",
    "WdsSeqFree",
    "protected: void __thiscall CDynamicArray::Init(unsigned int)",
    "WdsSetupLogInit",
    "WdsFreeCollection",
    "WdsGetTempDir",
    "WdsEnableExitEx",
    "public: int __thiscall CDynamicArray::Add(struct CBlackboardFactory::SKeeperEntry &)",
    "WdsGetPointer",
    "public: __thiscall CDynamicArray::CDynamicArray(unsigned int)",
    "public: int __thiscall CDynamicArray::Add(struct SEnumBinContext * &)",
    "WdsDuplicateData",
    "WdsEnableExit",
    "WdsValidBlackboard",
    "WdsInitializeDataBinary",
    "WdsPublishOffline",
    "EndMinorTask",
    "WdsSetBlackboardValue",
    "WdsCollectionGetValue",
    "public: void __thiscall CDynamicArray::RemoveItemFromTail(void)",
    "GetMinorTaskA",
    "WdsLogDestroy",
    "WdsExecuteWorkQueue",
    "WdsAllocCollection",
    "EndMajorTask",
    "ConstructPartialMsgVW",
    "WdsExitImmediately",
    "public: unsigned short & __thiscall CDynamicArray::ElementAt(unsigned int)",
    "WdsGetBlackboardStringA",
    "WdsAddUsmtLogStack",
    "g_bEnableDiagnosticMode",
    "WdsUnpackCollection",
    "WdsLockExecutionGroup",
    "WdsUnsubscribeEx",
    "WdsPublish",
    "WdsPublishEx",
    "WdsGetAssertFlags",
    "public: struct SValue * __thiscall CDynamicArray::operator->(void)const",
    "GetMajorTaskA",
    "GetMajorTask",
    "WdsExitImmediatelyEx",
    "ConstructPartialMsgIfA",
    "CurrentIP",
    "StartMajorTask",
    "public: struct SEnumBinContext * & __thiscall CDynamicArray::operator[](unsigned int)",
    "WdsGetBlackboardUintPtr",
    "GetMinorTask",
    "WdsSubscribeEx",
    "WdsSeqAlloc",
    "public: class CDynamicArray & __thiscall CDynamicArray::operator=(class CDynamicArray const &)",
    "WdsCopyBlackboardItemsEx",
    "public: int __thiscall CDynamicArray::SetSize(unsigned long)",
    "public: int __thiscall CDynamicArray::Add(struct CBlackboardFactory::SKeeperEntry &,unsigned int &)",
    "public: void __thiscall CDynamicArray::RemoveAll(void)",
    "WdsLogUnRegisterProvider",
    "WdsExecuteWorkQueue2",
    "WdsSetAssertFlags",
    "public: __thiscall CDynamicArray::operator unsigned short *(void)const",
    "WdsInitializeDataUInt32",
    "WdsSetupLogMessageA",
    "WdsGetBlackboardBinaryData",
    "WdsLockBlackboardValue",
    "WdsLogUnRegStockProviders",
    "WdsLogStructuredException",
    "WdsPackCollection",
    "WdsGetBlackboardStringW",
    "WdsSetupLogDestroy",
    "WdsFreeData",
    "g_Kernel32",
    "WdsCollectionAddValue",
    "public: __thiscall CDynamicArray::operator struct SKey *(void)const",
    "WdsCopyBlackboardItems",
    "WdsInitializeCallbackArray",
    "WdsSetNextExecutionGroup",
    "WdsLogRegisterProvider",
    "WdsSetUILanguage",
    "WdsExecuteWorkQueueEx",
    "public: unsigned char * __thiscall CDynamicArray::GetBuffer(unsigned int)",
    "public: unsigned short * __thiscall CDynamicArray::GetBuffer(unsigned int)",
    "WdsDestroyBlackboard",
    "WdsEnumNextCollectionValue",
    "WdsTerminate",
    "public: void __thiscall CDynamicArray::`default constructor closure'(void)",
    "WdsEnableDiagnosticMode",
    "WdsAbortBlackboardItemEnum",
    "WdsGetSetupLog",
    "WdsInitialize",
    "WdsCreateBlackboard",
    "WdsGenericSetupLogInit",
    "public: struct SValue * __thiscall CDynamicArray::GetBuffer(unsigned int)"
  ],
  "webcheck.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "webio.dll": [
    "WebPalFreeSocketCtx",
    "WebPalCreateDnsCacheCtx",
    "WebPalInitializeTwTimer",
    "WebPalCreateSocketCtx",
    "WebPalSetTwTimer",
    "WebPalCancelTwTimer",
    "WebPalTerminateTwTimer",
    "WebPalFreeDnsCacheCtx",
    "WebPalCanScavengeDnsCache",
    "WebPalIsImplemented"
  ],
  "webservices.dll": [
    "WsTrimXmlWhitespace",
    "WsGetOperationContextProperty",
    "WsStartReaderCanonicalization",
    "WsGetErrorProperty",
    "WsReadChars",
    "WsFreeHeap",
    "WsResetServiceProxy",
    "WsCreateXmlBuffer",
    "WsReadArray",
    "WsGetMessageProperty",
    "WsWriteEndAttribute",
    "WsAcceptChannel",
    "WsGetPolicyProperty",
    "WsGetHeader",
    "WsGetMetadataProperty",
    "WsRemoveMappedHeader",
    "WsAddressMessage",
    "WsAddMappedHeader",
    "WsPushBytes",
    "WsSetInput",
    "WsEncodeUrl",
    "WsResetHeap",
    "WsReadToStartElement",
    "WsCreateServiceProxy",
    "WsCloseListener",
    "WsGetReaderProperty",
    "WsReadMessageStart",
    "WsFlushBody",
    "WsReadXmlBuffer",
    "WsCall",
    "WsRevokeSecurityContext",
    "WsSetChannelProperty",
    "WsWriteXmlBufferToBytes",
    "WsAbandonMessage",
    "WsReadType",
    "WsSetOutput",
    "WsReadXmlBufferFromBytes",
    "WsGetPolicyAlternativeCount",
    "WsCreateWriter",
    "WsStartWriterCanonicalization",
    "WsResetListener",
    "WsGetFaultErrorProperty",
    "WsResetServiceHost",
    "WsGetMappedHeader",
    "WsOpenListener",
    "WsGetServiceProxyProperty",
    "WsCreateChannelForListener",
    "WsAbortChannel",
    "WsCreateXmlSecurityToken",
    "WsFindAttribute",
    "WsGetMissingMetadataDocumentAddress",
    "WsGetHeaderAttributes",
    "WsReadEndpointAddressExtension",
    "WsGetFaultErrorDetail",
    "WsOpenChannel",
    "WsInitializeMessage",
    "WsAsyncExecute",
    "WsResetMetadata",
    "WsSendReplyMessage",
    "WsPullBytes",
    "WsReadBody",
    "WsGetNamespaceFromPrefix",
    "WsGetCustomHeader",
    "WsCopyError",
    "WsCloseServiceProxy",
    "WsGetSecurityContextProperty",
    "WsReadStartAttribute",
    "WsWriteBody",
    "WsGetListenerProperty",
    "WsCloseChannel",
    "WsReadEndAttribute",
    "WsWriteXmlBuffer",
    "WsSetErrorProperty",
    "WsReadMetadata",
    "WsCreateChannel",
    "WsAbortListener",
    "WsGetErrorString",
    "WsRemoveCustomHeader",
    "WsWriteValue",
    "WsFreeError",
    "WsCloseServiceHost",
    "WsOpenServiceProxy",
    "WsSendMessage",
    "WsGetChannelProperty",
    "WsWriteEndStartElement",
    "WsCreateServiceHost",
    "WsWriteEnvelopeEnd",
    "WsGetSecurityTokenProperty",
    "WsFillBody",
    "WsAlloc",
    "WsMoveReader",
    "WsCombineUrl",
    "WsWriteEnvelopeStart",
    "WsWriteAttribute",
    "WsWriteText",
    "WsFreeMessage",
    "WsCreateError",
    "WsReadAttribute",
    "WsFreeChannel",
    "WsFlushWriter",
    "WsRemoveHeader",
    "WsWriteNode",
    "WsGetDictionary",
    "WsWriteMessageEnd",
    "WsWriteXmlnsAttribute",
    "WsWriteArray",
    "WsSendFaultMessageForError",
    "WsReadElement",
    "WsFreeMetadata",
    "WsGetWriterProperty",
    "WsEndWriterCanonicalization",
    "WsWriteQualifiedName",
    "WsSetHeader",
    "WsAddErrorString",
    "WsGetHeapProperty",
    "WsGetReaderNode",
    "WsReceiveMessage",
    "WsWriteMessageStart",
    "WsCreateFaultFromError",
    "WsReadStartElement",
    "WsRegisterOperationForCancel",
    "WsSetFaultErrorDetail",
    "WsCheckMustUnderstandHeaders",
    "WsCreateMessage",
    "WsEndReaderCanonicalization",
    "WsGetPrefixFromNamespace",
    "WsMatchPolicyAlternative",
    "WsCreateHeap",
    "WsReadQualifiedName",
    "WsSetInputToBuffer",
    "WsSetReaderPosition",
    "WsShutdownSessionChannel",
    "WsWriteBytes",
    "WsGetMetadataEndpoints",
    "WsReadNode",
    "WsCreateReader",
    "WsWriteElement",
    "WsCreateMessageForChannel",
    "WsWriteEndElement",
    "WsWriteStartElement",
    "WsRequestSecurityToken",
    "WsFreeReader",
    "WsReadValue",
    "WsReadEnvelopeStart",
    "WsFreeSecurityToken",
    "WsFillReader",
    "WsCopyNode",
    "WsGetXmlAttribute",
    "WsResetMessage",
    "WsMoveWriter",
    "WsCreateMetadata",
    "WsReadEndElement",
    "WsAbortServiceHost",
    "WsSetWriterPosition",
    "WsAbortServiceProxy",
    "WsWriteEndCData",
    "WsGetWriterPosition",
    "WsReadMessageEnd",
    "WsRemoveNode",
    "WsReadCharsUtf8",
    "WsFreeWriter",
    "WsWriteCharsUtf8",
    "WsWriteStartAttribute",
    "WsSetFaultErrorProperty",
    "WsReadBytes",
    "WsSetOutputToBuffer",
    "WsWriteType",
    "WsRequestReply",
    "WsSetListenerProperty",
    "WsOpenServiceHost",
    "WsXmlStringEquals",
    "WsFreeListener",
    "WsAbandonCall",
    "WsGetReaderPosition",
    "WsWriteChars",
    "WsCreateServiceProxyFromTemplate",
    "WsGetServiceHostProperty",
    "WsDateTimeToFileTime",
    "WsMarkHeaderAsUnderstood",
    "WsResetError",
    "WsAddCustomHeader",
    "WsSetMessageProperty",
    "WsFileTimeToDateTime",
    "WsResetChannel",
    "WsVerifyXmlNCName",
    "WsFreeServiceProxy",
    "WsCreateListener",
    "WsCreateServiceEndpointFromTemplate",
    "WsSkipNode",
    "WsDecodeUrl",
    "WsFreeServiceHost",
    "WsReadEnvelopeEnd",
    "WsWriteStartCData"
  ],
  "wecapi.dll": [
    "EcGetSubscriptionProperty",
    "EcRemoveObjectArrayElement",
    "EcSaveSubscription",
    "EcDeleteSubscription",
    "EcRetrySubscription",
    "EcGetObjectArrayProperty",
    "EcIsConfigRequired",
    "EcEnumNextSubscription",
    "EcGetSubscriptionRunTimeStatus",
    "EcSetSubscriptionProperty",
    "EcSetObjectArrayProperty",
    "EcInsertObjectArrayElement",
    "EcOpenSubscriptionEnum",
    "EcOpenSubscription",
    "EcQuickConfig",
    "EcClose",
    "EcGetObjectArraySize"
  ],
  "wecsvc.dll": [
    "ServiceMain",
    "DllRegisterServer",
    "SvchostPushServiceGlobals",
    "DllUnregisterServer"
  ],
  "wer.dll": [
    "WerReportAddFile",
    "WerpSetDynamicParameter",
    "WerpGetEventType",
    "WerpGetSigParamByIndex",
    "WerpDeleteReport",
    "WerpGetNumFiles",
    "WerpSvcReportFromMachineQueue",
    "WerpGetResponseId",
    "WerpIsOnBattery",
    "WerpEnumerateStoreNext",
    "WerpDownloadResponse",
    "WerpCreateMachineStore",
    "WerpAddSecondaryParameter",
    "WerpAddMemoryBlock",
    "WerpOpenMachineQueue",
    "WerpGetBucketId",
    "WerSysprepGeneralize",
    "WerpGetWow64Process",
    "WerpUpdateReportResponse",
    "WerReportSetParameter",
    "WerpOpenMachineArchive",
    "WerpShowUpsellUI",
    "WerpDestroyWerString",
    "WerReportCloseHandle",
    "WerSysprepSpecialize",
    "WerpGetDynamicParameter",
    "WerReportSetUIOption",
    "WerpAddFile",
    "WerpGetNumLoadedModules",
    "WerpEnumerateStoreStart",
    "WerpSetReportTime",
    "WerpDownloadResponseTemplate",
    "WerpGetLegacyBucketId",
    "WerpRestartApplication",
    "WerpGetStorePath",
    "WerpSetReportNamespaceParameter",
    "WerpCancelUpload",
    "WerpCloseStore",
    "WerpIsTransportAvailable",
    "WerpSetDefaultUserConsent",
    "WerpCreateIntegratorReportId",
    "WerpArchiveReport",
    "WerpLoadReportFromBuffer",
    "WerpAddAppCompatData",
    "WerpCancelResponseDownload",
    "WerpAddTextToReport",
    "WerpGetReportFinalConsent",
    "WerAddExcludedApplication",
    "WerpGetReportFlags",
    "WerRemoveExcludedApplication",
    "WerReportSubmit",
    "WerpReserveMachineQueueReportDir",
    "WerpSetReportFlags",
    "WerReportAddDump",
    "WerpFreeString",
    "WerpGetFileByIndex",
    "WerpReportCancel",
    "WerpSubmitReportFromStore",
    "WerpAddExtendedDiagData",
    "WerpLaunchResponse",
    "WerpExtractReportFiles",
    "WerpLoadReport",
    "WerReportCreate",
    "WerpGetReportSettings",
    "WerpPromtUser",
    "WerpOpenUserArchive",
    "WerpGetIntegratorReportId",
    "WerpGetTextFromReport",
    "WerpGetWerStringData",
    "WerpGetStoreType",
    "WerpGetNumSecParams",
    "WerpSetIntegratorReportId",
    "WerpGetResponseUrl",
    "WerpSetReportUploadContextToken",
    "WerpValidateReportKey",
    "WerpAddRegisteredDataToReport",
    "WerpOpenUserQueue",
    "WerpGetReportConsent",
    "WerpCreateUserStore",
    "WerpSetReportInformation",
    "WerpSetEventName",
    "WerpGetNumSigParams",
    "WerSysprepCleanup",
    "WerpGetSecParamByIndex",
    "WerpGetReportType",
    "WerpGetStoreLocation",
    "WerUnattendedSetup",
    "WerpGetFilePathByIndex",
    "WerpGetReportInformation",
    "WerpSetCallBack",
    "WerpGetReportTime",
    "WerpGetUploadTime",
    "WerpGetLoadedModuleByIndex",
    "WerpPruneStore",
    "WerpGetUIParamByIndex",
    "WerpIsDisabled",
    "WerpDownloadResponseOnly"
  ],
  "werconcpl.dll": [
    "WerpIsResponseApplicable",
    "DllCanUnloadNow",
    "ShowCEIPDialogW",
    "DllGetClassObject",
    "LaunchErcAppW"
  ],
  "wercplsupport.dll": [
    "SvchostPushServiceGlobals",
    "WerComGetAdminStores",
    "WerComGetUserStores",
    "ServiceMain",
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "werdiagcontroller.dll": [
    "StartFDR",
    "QueryOriginalBucket",
    "StartAppRecorder"
  ],
  "wersvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "werui.dll": [
    "WerUIDelete",
    "WerUIGetUserSelection",
    "WerUIWaitForUserAction",
    "WerUIPromptForSecondLevel",
    "WerUICreate",
    "WerUIShowUpsell",
    "WerUIPromptUser",
    "WerUITerminate",
    "WerUIStart",
    "WerUIUpdateUIForState",
    "WerUIUpdateStateProgress"
  ],
  "wevtapi.dll": [
    "EvtSetChannelConfigProperty",
    "EvtIntRetractConfig",
    "EvtIntCreateLocalLogfile",
    "EvtGetObjectArraySize",
    "EvtIntRenderResourceEventTemplate",
    "EvtNextChannelPath",
    "EvtIntGetClassicLogDisplayName",
    "EvtGetExtendedStatus",
    "EvtClose",
    "EvtSeek",
    "EvtQuery",
    "EvtOpenChannelEnum",
    "EvtOpenLog",
    "EvtNextEventMetadata",
    "EvtSetObjectArrayProperty",
    "EvtCreateRenderContext",
    "EvtGetEventInfo",
    "EvtGetQueryInfo",
    "EvtOpenEventMetadataEnum",
    "EvtGetPublisherMetadataProperty",
    "EvtRender",
    "EvtIntCreateBinXMLFromCustomXML",
    "EvtGetEventMetadataProperty",
    "EvtCreateBookmark",
    "EvtFormatMessage",
    "EvtIntReportAuthzEventAndSourceAsync",
    "EvtIntReportEventAndSourceAsync",
    "EvtArchiveExportedLog",
    "EvtNext",
    "EvtOpenChannelConfig",
    "EvtOpenSession",
    "EvtCancel",
    "EvtExportLog",
    "EvtClearLog",
    "EvtNextPublisherId",
    "EvtGetChannelConfigProperty",
    "EvtUpdateBookmark",
    "EvtGetLogInfo",
    "EvtIntSysprepCleanup",
    "EvtOpenPublisherMetadata",
    "EvtIntWriteXmlEventToLocalLogfile",
    "EvtSaveChannelConfig",
    "EvtSubscribe",
    "EvtGetObjectArrayProperty",
    "EvtIntAssertConfig",
    "EvtOpenPublisherEnum"
  ],
  "wevtfwd.dll": [
    "WSManProvPullEvents",
    "WSManProvSubscribe",
    "WSManProvUnsubscribe",
    "WSManPluginStartup",
    "WSManPluginShutdown"
  ],
  "wevtsvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "wfapigp.dll": "No exports",
  "wfdprov.dll": [
    "WFDProvConfigureAndProvisionDevice",
    "WFDProvGetInfo",
    "WFDProvInitialize",
    "WFDProvDeinitialize"
  ],
  "whealogr.dll": [
    "t87",
    "t2",
    "t83",
    "t84",
    "t67",
    "t76.m1",
    "t46",
    "t23",
    "t91",
    "t75.m1",
    "t82.m9",
    "t33",
    "t86",
    "t17",
    "t20",
    "t54",
    "t39",
    "t50",
    "t40",
    "t11",
    "t66",
    "t48",
    "t81.m0",
    "t8",
    "t12",
    "t30",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "t75",
    "t88",
    "t51",
    "t25",
    "t44",
    "t89",
    "t76",
    "t56",
    "t36",
    "t64",
    "t79.m1",
    "t72.m0",
    "t34",
    "t32",
    "t13",
    "t31",
    "t5",
    "t6",
    "t16",
    "t59",
    "t69",
    "t85",
    "t74.m1",
    "t14",
    "t63",
    "t45",
    "t53",
    "t18",
    "t80",
    "t10",
    "t72.m6",
    "t77",
    "t38",
    "t65",
    "t57",
    "t77.m1",
    "t15",
    "t72.m3",
    "t80.m10",
    "t71",
    "t62",
    "t19",
    "t72.m2",
    "t55",
    "t81",
    "t9",
    "t7",
    "t61",
    "t74",
    "t82",
    "t52",
    "t60",
    "t73",
    "WdiDiagnosticModuleMain",
    "t26",
    "t78.m1",
    "t2.m1",
    "t42",
    "t3",
    "t49",
    "t47",
    "t93.m3",
    "t4",
    "t78",
    "t72",
    "t90",
    "t92",
    "t22",
    "t28",
    "t72.m5",
    "t21",
    "t41",
    "WdiHandleInstance",
    "t24",
    "t43",
    "t93",
    "t58",
    "t68",
    "t37",
    "t27",
    "t72.m4",
    "t72.m1",
    "t79"
  ],
  "whhelper.dll": [
    "InitHelperDll"
  ],
  "wiaaut.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wiadefui.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wiadss.dll": [
    "FindImportDSByDeviceName",
    "CloseFindContext",
    "UnloadImportDS",
    "FindFirstImportDS",
    "GetLoaderStatus",
    "FindNextImportDS",
    "LoadImportDS"
  ],
  "wiarpc.dll": [
    "public: void __thiscall BUFFER_CHAIN_ITEM::`default constructor closure'(void)",
    "public: void __thiscall BUFFER_CHAIN_ITEM::SetUsed(unsigned long)",
    "public: __thiscall BUFFER_CHAIN::BUFFER_CHAIN(void)",
    "public: __thiscall BUFFER_CHAIN::~BUFFER_CHAIN(void)",
    "public: __thiscall BUFFER::~BUFFER(void)",
    "public: __thiscall BUFFER::BUFFER(unsigned int)",
    "ServiceMain",
    "public: unsigned long __thiscall BUFFER_CHAIN_ITEM::QueryUsed(void)const",
    "public: void __thiscall BUFFER::`default constructor closure'(void)",
    "public: __thiscall BUFFER_CHAIN_ITEM::~BUFFER_CHAIN_ITEM(void)",
    "public: unsigned int __thiscall BUFFER::QuerySize(void)const",
    "public: __thiscall BUFFER_CHAIN_ITEM::BUFFER_CHAIN_ITEM(unsigned int)",
    "public: void * __thiscall BUFFER::QueryPtr(void)const"
  ],
  "wiascanprofiles.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wiaservc.dll": [
    "wiasDownSampleBuffer",
    "wiasWritePropLong",
    "wiasIsPropChanged",
    "wiasFreePropContext",
    "wiasCreateDrvItem",
    "wiasWriteBufToFile",
    "wiasSetValidRangeLong",
    "wiasSetPropChanged",
    "wiasGetRootItem",
    "wiasSetValidListFloat",
    "wiasParseEndorserString",
    "wiasUpdateValidFormat",
    "DllRegisterServer",
    "wiasSetValidListStr",
    "wiasSendEndOfPage",
    "wiasWriteMultiple",
    "wiasGetChangedValueGuid",
    "DllUnregisterServer",
    "wiasReadPropStr",
    "wiasWritePageBufToFile",
    "wiasWritePropGuid",
    "wiasGetChangedValueLong",
    "wiasSetItemPropAttribs",
    "wiasSetValidListGuid",
    "wiasGetChangedValueFloat",
    "wiasSetValidRangeFloat",
    "wiasWritePropFloat",
    "wiasQueueEvent",
    "wiasReadPropGuid",
    "wiasReadPropFloat",
    "wiasReadPropLong",
    "wiasUpdateScanRect",
    "wiasSetPropertyAttributes",
    "wiasSetValidFlag",
    "wiasGetDrvItem",
    "wiasReadPropBin",
    "wiasCreateChildAppItem",
    "wiasWritePropStr",
    "wiasCreatePropContext",
    "wiasDebugError",
    "wiasGetChildrenContexts",
    "wiasGetChangedValueStr",
    "wiasDebugTrace",
    "wiasGetPropertyAttributes",
    "wiasPrintDebugHResult",
    "wiasValidateItemProperties",
    "wiasGetItemType",
    "wiasGetImageInformation",
    "wiasSetValidListLong",
    "wiasCreateLogInstance",
    "wiasSetItemPropNames",
    "wiasWritePageBufToStream",
    "ServiceMain",
    "wiasFormatArgs",
    "wiasGetContextFromName",
    "wiasWritePropBin",
    "wiasReadMultiple"
  ],
  "wiashext.dll": [
    "AddDeviceWasChosenA",
    "AddDeviceWasChosen",
    "DoDeleteAllItems",
    "MakeFullPidlForDevice",
    "AddDeviceWasChosenW",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wiatrace.dll": [
    "WIATRACE_DecrementIndentLevel",
    "WIATRACE_Term",
    "WIATRACE_SetTraceSettings",
    "WIATRACE_GetTraceSettings",
    "WIATRACE_IncrementIndentLevel",
    "WIATRACE_OutputString",
    "WIATRACE_GetIndentLevel",
    "WIATRACE_Init"
  ],
  "wimgapi.dll": [
    "WIMSetTemporaryPath",
    "WIMEnumImageFiles",
    "WIMGetAttributes",
    "WIMGetMountedImageHandle",
    "WIMApplyImage",
    "WIMRegisterLogFile",
    "WIMSetReferenceFile",
    "WIMFindFirstImageFile",
    "WIMSetFileIOCallbackTemporaryPath",
    "WIMDeleteImageMounts",
    "WIMGetMountedImageInfo",
    "WIMRegisterMessageCallback",
    "WIMCreateImageFile",
    "WIMExportImage",
    "WIMGetMountedImages",
    "WIMGetMessageCallbackCount",
    "WIMRemountImage",
    "DllMain",
    "WIMExtractImagePath",
    "WIMUnregisterMessageCallback",
    "DllCanUnloadNow",
    "WIMGetImageInformation",
    "WIMCloseHandle",
    "WIMMountImage",
    "WIMUnmountImage",
    "WIMGetMountedImageInfoFromHandle",
    "WIMCaptureImage",
    "WIMSetImageInformation",
    "WIMSplitFile",
    "WIMReadImageFile",
    "WIMInitFileIOCallbacks",
    "WIMUnregisterLogFile",
    "WIMDeleteImage",
    "WIMMountImageHandle",
    "WIMFindNextImageFile",
    "WIMSetBootImage",
    "WIMLoadImage",
    "WIMGetImageCount",
    "WIMCreateFile",
    "WIMUnmountImageHandle",
    "WIMCopyFile",
    "WIMCommitImageHandle"
  ],
  "win32spl.dll": [
    "DllMain",
    "InitializePrintProvidor",
    "InitializePrintMonitor2"
  ],
  "winbio.dll": [
    "WinBioUnregisterEventMonitor",
    "WinBioRegisterServiceMonitor",
    "_BioLogonIdentifiedUser",
    "WinBioAsyncMonitorFrameworkChanges",
    "WinBioEnrollCapture",
    "WinBioDeleteTemplate",
    "WinBioRemoveCredential",
    "WinBioControlUnitPrivileged",
    "WinBioGetCredentialState",
    "WinBioNotifyPasswordChange",
    "WinBioRemoveAllCredentials",
    "WinBioEnumEnrollments",
    "WinBioControlUnit",
    "WinBioEnumBiometricUnits",
    "WinBioAsyncEnumBiometricUnits",
    "WinBioEnrollBegin",
    "WinBioIdentify",
    "WinBioEnumServiceProviders",
    "WinBioVerify",
    "WinBioCloseSession",
    "WinBioIdentifyWithCallback",
    "WinBioWait",
    "WinBioGetDomainLogonSetting",
    "WinBioReleaseFocus",
    "WinBioAsyncOpenSession",
    "WinBioAcquireFocus",
    "WinBioVerifyWithCallback",
    "WinBioCaptureSampleWithCallback",
    "WinBioCancel",
    "WinBioGetLogonSetting",
    "WinBioAsyncEnumServiceProviders",
    "WinBioFree",
    "WinBioLocateSensorWithCallback",
    "WinBioEnrollCommit",
    "WinBioGetProperty",
    "WinBioCaptureSample",
    "WinBioGetEnabledSetting",
    "WinBioEnrollCaptureWithCallback",
    "WinBioLockUnit",
    "WinBioRegisterEventMonitor",
    "WinBioAsyncOpenFramework",
    "WinBioEnumDatabases",
    "WinBioCloseFramework",
    "WinBioLogonIdentifiedUser",
    "WinBioOpenSession",
    "WinBioUnregisterServiceMonitor",
    "WinBioRemoveAllDomainCredentials",
    "WinBioEnrollDiscard",
    "WinBioSetCredential",
    "WinBioUnlockUnit",
    "WinBioAsyncEnumDatabases",
    "WinBioLocateSensor"
  ],
  "winbrand.dll": [
    "GetInstalledEULAPath",
    "BrandingFormatString",
    "BrandingLoadBitmap",
    "BrandingLoadIcon",
    "GetEULAFile",
    "EulaFreeBuffer",
    "InstallEULA",
    "BrandingLoadImage",
    "BrandingLoadString",
    "BrandingLoadCursor",
    "GetHinstanceByNameSpace",
    "GetEULAInCurrentUILanguage"
  ],
  "wincredprovider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "windows.immersiveshell.serviceprovider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "windowslivelogin.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "winethc.dll": [
    "DllRegisterServer",
    "ForceProxyDetectionOnNextRun",
    "SetAutoDetectProxyFlagForUser",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "winhttp.dll": [
    "WinHttpReceiveResponse",
    "WinHttpPalIsImplemented",
    "WinHttpAutoProxySvcMain",
    "WinHttpFreeProxyResult",
    "WinHttpGetDefaultProxyConfiguration",
    "WinHttpPalCreateCmSessionReference",
    "WinHttpCheckPlatform",
    "WinHttpPalDllUnload",
    "WinHttpWebSocketClose",
    "WinHttpCrackUrl",
    "WinHttpQueryAuthSchemes",
    "WinHttpReadData",
    "WinHttpWriteData",
    "WinHttpTimeToSystemTime",
    "WinHttpCreateUrl",
    "WinHttpSetTimeouts",
    "WinHttpSetStatusCallback",
    "WinHttpOpenRequest",
    "WinHttpPalAcquireNextInterface",
    "DllCanUnloadNow",
    "WinHttpSetOption",
    "WinHttpPalFreeRequestCtx",
    "WinHttpPalOnSendRequestComplete",
    "WinHttpSendRequest",
    "WinHttpCreateProxyResolver",
    "WinHttpGetIEProxyConfigForCurrentUser",
    "WinHttpOpen",
    "WinHttpQueryHeaders",
    "WinHttpPalGetProxyCreds",
    "WinHttpPalCreateRequestCtx",
    "WinHttpDetectAutoProxyConfigUrl",
    "WinHttpTimeFromSystemTime",
    "WinHttpAddRequestHeaders",
    "Private1",
    "WinHttpPalAcquireNextInterfaceAsync",
    "WinHttpWebSocketReceive",
    "WinHttpSetDefaultProxyConfiguration",
    "WinHttpPalFreeProxyInfo",
    "DllGetClassObject",
    "WinHttpWebSocketCompleteUpgrade",
    "WinHttpWebSocketShutdown",
    "WinHttpCloseHandle",
    "WinHttpQueryOption",
    "WinHttpPalGetProxyForCurrentInterface",
    "WinHttpConnect",
    "WinHttpWebSocketSend",
    "WinHttpQueryDataAvailable",
    "WinHttpPalCancelRequest",
    "SvchostPushServiceGlobals",
    "WinHttpGetProxyForUrl",
    "WinHttpGetProxyResult",
    "WinHttpPalDllInit",
    "WinHttpResetAutoProxy",
    "WinHttpWebSocketQueryCloseStatus",
    "WinHttpGetProxyForUrlEx",
    "WinHttpSetCredentials"
  ],
  "wininet.dll": [
    "InternetCheckConnectionW",
    "FindNextUrlCacheEntryA",
    "RegisterUrlCacheNotification",
    "UrlCacheCheckEntriesExist",
    "InternetAttemptConnect",
    "InternetGetSecurityInfoByURL",
    "InternetConfirmZoneCrossingA",
    "HttpSendRequestExW",
    "InternetQueryOptionW",
    "FtpRemoveDirectoryA",
    "FindFirstUrlCacheEntryExA",
    "WinInetPalGetProxySettings",
    "ReadUrlCacheEntryStreamEx",
    "InternetSetCookieA",
    "PrivacyGetZonePreferenceW",
    "DispatchAPICall",
    "FtpCreateDirectoryA",
    "ReadUrlCacheEntryStream",
    "FindNextUrlCacheContainerW",
    "WinInetPalTrackKeepAliveSocket",
    "WinInetPalRegisterKeepAlivePurgeCallback",
    "InternetSecurityProtocolToStringA",
    "FtpPutFileA",
    "SetUrlCacheEntryInfoW",
    "WinInetPalFreeResolveHostFsmCtx",
    "IncrementUrlCacheHeaderData",
    "InternetDialA",
    "FtpFindFirstFileW",
    "GetUrlCacheEntryBinaryBlob",
    "SetUrlCacheHeaderData",
    "WinInetPalGetAppContainerRegistryLocation",
    "UrlCacheSetGlobalLimit",
    "WinInetPalOnResolveHostFsm",
    "InternetClearAllPerSiteCookieDecisions",
    "AppCacheFreeDownloadList",
    "GopherGetAttributeW",
    "UrlCacheCloseEntryHandle",
    "InternetGetCertByURL",
    "FtpPutFileEx",
    "InternetOpenUrlW",
    "InternetGetConnectedStateEx",
    "AppCacheGetFallbackUrl",
    "InternetCheckConnectionA",
    "FtpDeleteFileW",
    "WinInetPalFreeGetConnectionFsmCtx",
    "InternetGetProxyForUrl",
    "InternetSetDialStateA",
    "InternetAutodialHangup",
    "InternetDial",
    "InternetGetCookieA",
    "FtpCreateDirectoryW",
    "UrlCacheGetContentPaths",
    "FtpDeleteFileA",
    "RunOnceUrlCache",
    "FtpOpenFileA",
    "InternetOpenA",
    "LoadUrlCacheContent",
    "InternetGetPerSiteCookieDecisionA",
    "FtpRenameFileW",
    "DllRegisterServer",
    "InternetQueryDataAvailable",
    "AppCacheLookup",
    "WinInetPalFreeServerInfoCtx",
    "FindNextUrlCacheEntryExA",
    "InternetTimeToSystemTimeA",
    "UrlCacheCreateContainer",
    "FtpSetCurrentDirectoryW",
    "InternetCrackUrlW",
    "FtpGetFileW",
    "WinInetPalFreeRequestCtx",
    "InternetCloseHandle",
    "InternetDialW",
    "WinInetPalCreateGetConnectionFsmContext",
    "InternetReadFile",
    "GopherFindFirstFileW",
    "UrlCacheGetGlobalLimit",
    "InternetAutodialCallback",
    "CreateUrlCacheContainerA",
    "ResumeSuspendedDownload",
    "DeleteUrlCacheGroup",
    "InternetCombineUrlW",
    "InternetSecurityProtocolToStringW",
    "WinInetPalCreateICSocketContext2",
    "GopherCreateLocatorW",
    "HttpQueryInfoA",
    "FtpRenameFileA",
    "HttpOpenRequestA",
    "InternetSetOptionA",
    "UrlCacheReloadSettings",
    "ForceNexusLookup",
    "DeleteUrlCacheEntryW",
    "InternetShowSecurityInfoByURL",
    "HttpSendRequestW",
    "CommitUrlCacheEntryBinaryBlob",
    "InternetSetStatusCallbackA",
    "DeleteIE3Cache",
    "HttpWebSocketCompleteUpgrade",
    "InternetConfirmZoneCrossing",
    "InternetCreateUrlA",
    "InternetGetConnectedState",
    "FtpSetCurrentDirectoryA",
    "FtpRemoveDirectoryW",
    "GetUrlCacheEntryInfoExA",
    "GetUrlCacheConfigInfoA",
    "HttpWebSocketShutdown",
    "FtpGetFileSize",
    "InternetGetConnectedStateExW",
    "AppCacheDuplicateHandle",
    "RetrieveUrlCacheEntryStreamW",
    "WinInetPalCanPurgeKeepAliveSocket",
    "AppCacheCheckManifest",
    "DeleteUrlCacheContainerA",
    "HttpCheckDavCompliance",
    "DeleteUrlCacheContainerW",
    "AppCacheDeleteIEGroup",
    "InternetCombineUrlA",
    "FtpCommandW",
    "InternetGetLastResponseInfoA",
    "InternetSetStatusCallbackW",
    "WinInetPalOnHttpSendRequestFsmComplete",
    "InternetGetLastResponseInfoW",
    "WinInetPalFilterServerInfo",
    "WinInetPalOnGlobalDataTerminate",
    "DeleteWpadCacheForNetworks",
    "InternetSetCookieExA",
    "InternetConfirmZoneCrossingW",
    "AppCacheGetGroupList",
    "HttpOpenDependencyHandle",
    "CreateUrlCacheEntryExW",
    "InternetAlgIdToStringA",
    "InternetSetCookieW",
    "CreateMD5SSOHash",
    "FindNextUrlCacheEntryW",
    "HttpAddRequestHeadersW",
    "InternetSetDialState",
    "InternetQueryFortezzaStatus",
    "HttpSendRequestExA",
    "FtpFindFirstFileA",
    "WinInetPalOnSendRequest",
    "InternetOpenUrlA",
    "IsUrlCacheEntryExpiredW",
    "CommitUrlCacheEntryA",
    "SetUrlCacheGroupAttributeA",
    "FreeUrlCacheSpaceW",
    "DllCanUnloadNow",
    "ShowX509EncodedCertificate",
    "GopherGetLocatorTypeW",
    "InternetGetSecurityInfoByURLW",
    "GetUrlCacheEntryInfoA",
    "InternetShowSecurityInfoByURLW",
    "SetUrlCacheGroupAttributeW",
    "HttpDuplicateDependencyHandle",
    "InternetTimeFromSystemTime",
    "InternetQueryOptionA",
    "FindFirstUrlCacheEntryA",
    "InternetFindNextFileW",
    "SetUrlCacheEntryGroupW",
    "InternetEnumPerSiteCookieDecisionA",
    "WinInetPalCreateICSocketContext",
    "DllInstall",
    "UrlCacheRetrieveEntryStream",
    "InternetTimeFromSystemTimeA",
    "InternetWriteFileExA",
    "WinInetPalCreateRequestContext",
    "UpdateUrlCacheContentPath",
    "FindFirstUrlCacheGroup",
    "WinInetPalFreeBackgroundConnectionFsmCtx",
    "AppCacheGetInfo",
    "RetrieveUrlCacheEntryFileA",
    "FtpGetCurrentDirectoryW",
    "FindFirstUrlCacheContainerA",
    "UrlCacheContainerSetEntryMaximumAge",
    "CreateUrlCacheGroup",
    "InternetTimeToSystemTime",
    "CreateUrlCacheEntryA",
    "WinInetPalPurgeKeepAliveSockets",
    "WinInetPalTransferKeepAliveSocket",
    "InternetCreateUrlW",
    "HttpCloseDependencyHandle",
    "WinInetPalCreateResolveHostFsmContext",
    "InternetLockRequestFile",
    "InternetEnumPerSiteCookieDecisionW",
    "InternetOpenW",
    "InternetSetDialStateW",
    "InternetCrackUrlA",
    "UrlCacheReadEntryStream",
    "SetUrlCacheConfigInfoA",
    "InternetSetStatusCallback",
    "FindFirstUrlCacheContainerW",
    "WinInetPalOnInternetQueryOptionA",
    "ParseX509EncodedCertificateForListBoxEntry",
    "FtpPutFileW",
    "InternetSetPerSiteCookieDecisionA",
    "FindFirstUrlCacheEntryExW",
    "InternetGetCertByURLA",
    "RetrieveUrlCacheEntryStreamA",
    "AppCacheDeleteGroup",
    "InternetGetCookieW",
    "HttpWebSocketSend",
    "FindFirstUrlCacheEntryW",
    "FindNextUrlCacheContainerA",
    "HttpPushClose",
    "GopherGetAttributeA",
    "InternetTimeFromSystemTimeW",
    "InternetSetCookieExW",
    "InternetErrorDlg",
    "_GetFileExtensionFromUrl",
    "FtpGetFileEx",
    "InternetSetOptionW",
    "InternetUnlockRequestFile",
    "InternetWriteFileExW",
    "WinInetPalCloneRequestContext",
    "InternetSetFilePointer",
    "IsHostInProxyBypassList",
    "HttpWebSocketQueryCloseStatus",
    "UrlZonesDetach",
    "WinInetPalOnGlobalDataInitialize",
    "WinInetPalCreateBackgroundConnectionFsmContext",
    "FindNextUrlCacheGroup",
    "WinInetPalCreateServerInfoLookupContext",
    "InternetConnectW",
    "HttpPushEnable",
    "WinInetPalImplemented",
    "ForceNexusLookupExW",
    "AppCacheCloseHandle",
    "AppCacheGetManifestUrl",
    "UnlockUrlCacheEntryFile",
    "UnlockUrlCacheEntryStream",
    "GopherOpenFileA",
    "InternetFindNextFileA",
    "HttpQueryInfoW",
    "RetrieveUrlCacheEntryFileW",
    "InternetGoOnlineA",
    "WinInetPalSelectThreadOverrideTimeout",
    "InternetGoOnline",
    "UrlCacheGetEntryInfo",
    "FtpGetFileA",
    "InternetAutodial",
    "InternetGetConnectedStateExA",
    "WinInetPalIsPerProcessOption",
    "GetUrlCacheGroupAttributeW",
    "GetUrlCacheEntryInfoW",
    "HttpEndRequestA",
    "GetUrlCacheEntryInfoExW",
    "HttpWebSocketClose",
    "InternetFortezzaCommand",
    "WinInetPalFreeProxySettings",
    "FindCloseUrlCache",
    "WinInetPalFreeSocketCtx",
    "InternetCanonicalizeUrlA",
    "HttpAddRequestHeadersA",
    "InternetReadFileExA",
    "InternetInitializeAutoProxyDll",
    "CreateUrlCacheEntryW",
    "AppCacheGetDownloadList",
    "WinInetPalOnInternetSetOptionA",
    "InternetConnectA",
    "SetUrlCacheConfigInfoW",
    "SetUrlCacheEntryGroup",
    "WinInetPalOnInternetCloseHandle",
    "DllGetClassObject",
    "InternetTimeToSystemTimeW",
    "HttpPushWait",
    "InternetReadFileExW",
    "ShowCertificate",
    "UnlockUrlCacheEntryFileW",
    "DllUnregisterServer",
    "WinInetPalCreateCServerInfoContext",
    "IsUrlCacheEntryExpiredA",
    "HttpOpenRequestW",
    "InternetGetPerSiteCookieDecisionW",
    "InternetGetCookieExW",
    "SetUrlCacheEntryGroupA",
    "ShowClientAuthCerts",
    "InternetSetOptionExW",
    "InternetSetPerSiteCookieDecisionW",
    "InternetFreeProxyInfoList",
    "AppCacheFreeIESpace",
    "GopherOpenFileW",
    "FtpOpenFileW",
    "DeleteUrlCacheEntry",
    "AppCacheFreeGroupList",
    "UrlCacheFreeEntryInfo",
    "AppCacheGetIEGroupList",
    "DetectAutoProxyUrl",
    "InternetWriteFile",
    "GetUrlCacheGroupAttributeA",
    "UnlockUrlCacheEntryFileA",
    "InternetGoOnlineW",
    "InternetShowSecurityInfoByURLA",
    "InternetCanonicalizeUrlW",
    "PrivacySetZonePreferenceW",
    "HttpEndRequestW",
    "HttpSendRequestA",
    "InternetGetSecurityInfoByURLA",
    "FindNextUrlCacheEntryExW",
    "FtpGetCurrentDirectoryA",
    "UrlCacheUpdateEntryExtraData",
    "SetUrlCacheEntryInfoA",
    "HttpWebSocketReceive",
    "ShowSecurityInfo",
    "WinInetPalInternetGetConnectedStateExW",
    "InternetHangUp",
    "FreeUrlCacheSpaceA",
    "UrlCacheRetrieveEntryFile",
    "AppCacheFinalize",
    "GopherGetLocatorTypeA",
    "GopherFindFirstFileA",
    "FtpCommandA",
    "DeleteUrlCacheEntryA",
    "GetProxyDllInfo",
    "InternetSetOptionExA",
    "GetUrlCacheHeaderData",
    "InternetGetCookieExA",
    "GopherCreateLocatorA",
    "CreateUrlCacheContainerW",
    "InternetAlgIdToStringW",
    "GetUrlCacheConfigInfoW",
    "CommitUrlCacheEntryW"
  ],
  "wininitext.dll": [
    "UIStartupWorker",
    "WinStationSystemShutdownStartedWorker",
    "StartLoadingFontsWorker",
    "UnregisterSession0ViewerWindowHookDll",
    "WaitForWinstationShutdown",
    "GetLoggedOnUserCount",
    "PrimaryTerminalAndHookWorker"
  ],
  "winipsec.dll": [
    "OpenTunnelFilterHandle",
    "CloseTransportFilterHandle",
    "EnumMMSAs",
    "GetQMPolicy",
    "GetMMPolicyByID",
    "QueryIPSecStatistics",
    "MatchMMFilter",
    "SetTransportFilterEx",
    "AddTunnelFilter",
    "GetTransportFilter",
    "GetMMAuthMethods",
    "OpenTransportFilterHandleEx",
    "InitiateIKENegotiation",
    "EnumTransportFiltersEx",
    "OpenTransportFilterHandle",
    "EnumMMFilters",
    "MatchTransportFilter",
    "DeleteTransportFilter",
    "OpenMMFilterHandle",
    "SetQMPolicy",
    "CloseMMFilterHandle",
    "SetMMFilter",
    "DeleteMMFilter",
    "DeleteMMSAs",
    "EnumTunnelFilters",
    "SetMMFilterEx",
    "AddMMFilter",
    "AddTransportFilterEx",
    "AddQMPolicy",
    "AddSAs",
    "GetMMFilterEx",
    "MatchMMFilterEx",
    "SPDApiBufferAllocate",
    "DllMain",
    "GetMMPolicy",
    "EnumMMPolicies",
    "SetMMAuthMethods",
    "DeleteTunnelFilter",
    "QueryIKENegotiationStatus",
    "SPDApiBufferFree",
    "OpenMMFilterHandleEx",
    "QueryIKENotifyData",
    "EnumIPSecInterfaces",
    "EnumMMFiltersEx",
    "EnumQMSAs",
    "EnumMMAuthMethods",
    "RegisterIKENotifyClient",
    "CloseIKENotifyHandle",
    "DeleteQMSAs",
    "CloseTunnelFilterHandle",
    "SetConfigurationVariables",
    "EnumQMPolicies",
    "SetTransportFilter",
    "DeleteMMAuthMethods",
    "GetQMPolicyByID",
    "DeleteQMPolicy",
    "MatchTunnelFilter",
    "QuerySpdPolicyState",
    "EnumTransportFilters",
    "AddTransportFilter",
    "AddMMAuthMethods",
    "DeleteMMPolicy",
    "AddMMFilterEx",
    "GetTunnelFilter",
    "QueryIKEStatistics",
    "CloseIKENegotiationHandle",
    "AddMMPolicy",
    "SetTunnelFilter",
    "GetConfigurationVariables",
    "SetMMPolicy",
    "GetTransportFilterEx",
    "MatchTransportFilterEx",
    "GetMMFilter"
  ],
  "winmde.dll": [
    "MFCreateNetVRoot",
    "MFCreateWinMDEOpCenter",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "winmm.dll": [
    "mciGetErrorStringA",
    "mmioDescend",
    "waveOutPrepareHeader",
    "NotifyCallbackData",
    "midiStreamStop",
    "waveOutGetErrorTextA",
    "mxd32Message",
    "mmioStringToFOURCCW",
    "midiStreamOut",
    "timeEndPeriod",
    "mmioSetInfo",
    "midiInPrepareHeader",
    "mciSetYieldProc",
    "WOW32DriverCallback",
    "mciDriverNotify",
    "waveOutSetVolume",
    "midiOutSetVolume",
    "waveInUnprepareHeader",
    "midiInAddBuffer",
    "wid32Message",
    "midiInClose",
    "midiOutReset",
    "mmioSetBuffer",
    "mixerGetControlDetailsW",
    "midiInGetErrorTextW",
    "waveInGetErrorTextA",
    "waveInStart",
    "midiInStart",
    "waveOutGetDevCapsA",
    "mciSendCommandA",
    "waveOutGetErrorTextW",
    "midiOutGetVolume",
    "mid32Message",
    "waveInMessage",
    "midiOutClose",
    "waveInGetDevCapsA",
    "waveInClose",
    "mciSetDriverData",
    "mmTaskSignal",
    "timeGetSystemTime",
    "WOW32ResolveMultiMediaHandle",
    "joyGetPos",
    "midiStreamRestart",
    "mmioAscend",
    "tid32Message",
    "waveOutClose",
    "auxGetVolume",
    "midiConnect",
    "mmioSendMessage",
    "joyGetPosEx",
    "mmioAdvance",
    "sndPlaySoundA",
    "waveInGetPosition",
    "midiInGetDevCapsW",
    "waveInReset",
    "WOWAppExit",
    "mixerGetID",
    "midiOutMessage",
    "midiOutGetDevCapsA",
    "timeSetEvent",
    "waveOutGetDevCapsW",
    "mmTaskBlock",
    "DefDriverProc",
    "auxGetDevCapsA",
    "midiInReset",
    "GetDriverModuleHandle",
    "mixerGetLineInfoA",
    "waveOutGetPlaybackRate",
    "joyConfigChanged",
    "midiInStop",
    "mciSendCommandW",
    "midiInOpen",
    "midiInUnprepareHeader",
    "midiOutLongMsg",
    "mciGetCreatorTask",
    "joySetCapture",
    "waveOutPause",
    "timeGetDevCaps",
    "midiOutGetNumDevs",
    "joyGetDevCapsW",
    "timeGetTime",
    "waveOutOpen",
    "mmsystemGetVersion",
    "mciFreeCommandResource",
    "midiOutGetErrorTextW",
    "midiOutPrepareHeader",
    "mciGetErrorStringW",
    "mciGetDeviceIDA",
    "waveOutGetPosition",
    "midiOutGetErrorTextA",
    "auxGetDevCapsW",
    "auxOutMessage",
    "mciGetDriverData",
    "wod32Message",
    "joy32Message",
    "mmioSeek",
    "midiInGetNumDevs",
    "waveInStop",
    "midiStreamClose",
    "mmTaskYield",
    "mmTaskCreate",
    "mciSendStringA",
    "mciGetDeviceIDFromElementIDA",
    "mmioCreateChunk",
    "waveOutGetNumDevs",
    "joyGetNumDevs",
    "mixerGetLineControlsA",
    "PlaySoundW",
    "waveOutWrite",
    "CloseDriver",
    "DriverCallback",
    "waveOutGetVolume",
    "mmioRead",
    "midiOutOpen",
    "midiOutGetDevCapsW",
    "joySetThreshold",
    "timeKillEvent",
    "mmioInstallIOProcA",
    "mmioFlush",
    "mixerGetControlDetailsA",
    "waveInAddBuffer",
    "auxGetNumDevs",
    "midiOutCacheDrumPatches",
    "mci32Message",
    "waveOutRestart",
    "sndPlaySoundW",
    "midiStreamProperty",
    "midiOutGetID",
    "mmioStringToFOURCCA",
    "midiInGetErrorTextA",
    "mmDrvInstall",
    "PlaySound",
    "waveInOpen",
    "OpenDriver",
    "mmioGetInfo",
    "waveOutUnprepareHeader",
    "midiStreamPause",
    "midiInGetID",
    "midiStreamOpen",
    "mmioOpenA",
    "mixerGetDevCapsW",
    "midiInMessage",
    "waveOutMessage",
    "joyGetThreshold",
    "mixerGetLineInfoW",
    "mciGetDeviceIDW",
    "mmioRenameA",
    "waveInGetErrorTextW",
    "midiDisconnect",
    "waveInPrepareHeader",
    "mixerMessage",
    "mod32Message",
    "waveOutGetID",
    "timeBeginPeriod",
    "mmioClose",
    "mciExecute",
    "mixerGetNumDevs",
    "mixerClose",
    "mmGetCurrentTask",
    "waveInGetNumDevs",
    "SendDriverMessage",
    "mixerGetDevCapsA",
    "waveInGetDevCapsW",
    "mixerOpen",
    "waveOutBreakLoop",
    "DrvGetModuleHandle",
    "mciDriverYield",
    "mmioRenameW",
    "midiOutShortMsg",
    "joyGetDevCapsA",
    "aux32Message",
    "mciLoadCommandResource",
    "mixerSetControlDetails",
    "waveOutSetPlaybackRate",
    "PlaySoundA",
    "midiOutUnprepareHeader",
    "joyReleaseCapture",
    "auxSetVolume",
    "mmioInstallIOProcW",
    "waveOutSetPitch",
    "mixerGetLineControlsW",
    "waveOutGetPitch",
    "midiOutCachePatches",
    "mciGetYieldProc",
    "midiStreamPosition",
    "mmioWrite",
    "waveInGetID",
    "mmioOpenW",
    "mciSendStringW",
    "midiInGetDevCapsA",
    "mciGetDeviceIDFromElementIDW",
    "waveOutReset"
  ],
  "winmmbase.dll": [
    "winmmbaseFreeMMEHandles",
    "mmioDescend",
    "waveOutPrepareHeader",
    "midiStreamStop",
    "waveOutGetErrorTextA",
    "mmioStringToFOURCCW",
    "midiStreamOut",
    "mmioSetInfo",
    "midiInPrepareHeader",
    "waveOutSetVolume",
    "midiOutSetVolume",
    "waveInUnprepareHeader",
    "midiInAddBuffer",
    "midiInClose",
    "midiOutReset",
    "mmioSetBuffer",
    "mixerGetControlDetailsW",
    "midiInGetErrorTextW",
    "waveInGetErrorTextA",
    "waveInStart",
    "midiInStart",
    "waveOutGetDevCapsA",
    "waveOutGetErrorTextW",
    "winmmbaseGetWOWHandle",
    "midiOutGetVolume",
    "waveInMessage",
    "midiOutClose",
    "waveInGetDevCapsA",
    "waveInClose",
    "mmTaskSignal",
    "joyGetPos",
    "midiStreamRestart",
    "mmioAscend",
    "waveOutClose",
    "auxGetVolume",
    "midiConnect",
    "mmioSendMessage",
    "joyGetPosEx",
    "mmioAdvance",
    "waveInGetPosition",
    "midiInGetDevCapsW",
    "waveInReset",
    "midiOutMessage",
    "mixerGetID",
    "midiOutGetDevCapsA",
    "waveOutGetDevCapsW",
    "mmTaskBlock",
    "DefDriverProc",
    "auxGetDevCapsA",
    "midiInReset",
    "GetDriverModuleHandle",
    "mixerGetLineInfoA",
    "waveOutGetPlaybackRate",
    "joyConfigChanged",
    "midiInStop",
    "midiInOpen",
    "midiInUnprepareHeader",
    "midiOutLongMsg",
    "joySetCapture",
    "waveOutPause",
    "midiOutGetNumDevs",
    "joyGetDevCapsW",
    "waveOutOpen",
    "midiOutGetErrorTextW",
    "midiOutPrepareHeader",
    "waveOutGetPosition",
    "midiOutGetErrorTextA",
    "auxGetDevCapsW",
    "auxOutMessage",
    "mmioSeek",
    "midiInGetNumDevs",
    "waveInStop",
    "midiStreamClose",
    "mmTaskYield",
    "mmTaskCreate",
    "mmioCreateChunk",
    "waveOutGetNumDevs",
    "joyGetNumDevs",
    "mixerGetLineControlsA",
    "waveOutWrite",
    "CloseDriver",
    "DriverCallback",
    "waveOutGetVolume",
    "mmioRead",
    "midiOutOpen",
    "midiOutGetDevCapsW",
    "joySetThreshold",
    "winmmbaseSetWOWHandle",
    "mmioInstallIOProcA",
    "mmioFlush",
    "mixerGetControlDetailsA",
    "waveInAddBuffer",
    "auxGetNumDevs",
    "midiOutCacheDrumPatches",
    "waveOutRestart",
    "midiStreamProperty",
    "midiOutGetID",
    "mmioStringToFOURCCA",
    "midiInGetErrorTextA",
    "mmDrvInstall",
    "waveInOpen",
    "OpenDriver",
    "winmmbaseHandle32FromHandle16",
    "mmioGetInfo",
    "waveOutUnprepareHeader",
    "midiStreamPause",
    "midiInGetID",
    "midiStreamOpen",
    "mmioOpenA",
    "mixerGetDevCapsW",
    "midiInMessage",
    "waveOutMessage",
    "joyGetThreshold",
    "mixerGetLineInfoW",
    "mmioRenameA",
    "waveInGetErrorTextW",
    "midiDisconnect",
    "waveInPrepareHeader",
    "mixerMessage",
    "waveOutGetID",
    "mmioClose",
    "mixerGetNumDevs",
    "mixerClose",
    "mmGetCurrentTask",
    "waveInGetNumDevs",
    "SendDriverMessage",
    "mixerGetDevCapsA",
    "waveInGetDevCapsW",
    "mixerOpen",
    "waveOutBreakLoop",
    "DrvGetModuleHandle",
    "mmioRenameW",
    "midiOutShortMsg",
    "joyGetDevCapsA",
    "mixerSetControlDetails",
    "waveOutSetPlaybackRate",
    "midiOutUnprepareHeader",
    "joyReleaseCapture",
    "auxSetVolume",
    "mmioInstallIOProcW",
    "waveOutSetPitch",
    "mixerGetLineControlsW",
    "waveOutGetPitch",
    "midiOutCachePatches",
    "midiStreamPosition",
    "waveInGetID",
    "mmioWrite",
    "mmioOpenW",
    "midiInGetDevCapsA",
    "waveOutReset"
  ],
  "winnsi.dll": [
    "NsiRpcEnumerateObjectsAllParameters",
    "NsiRpcRegisterChangeNotification",
    "NsiRpcGetParameter",
    "NsiDisconnectFromServer",
    "NsiRpcRegisterChangeNotificationEx",
    "NsiRpcGetParameterEx",
    "NsiConnectToServer",
    "NsiRpcGetAllParameters",
    "NsiRpcSetParameter",
    "NsiRpcSetParameterEx",
    "NsiRpcDeregisterChangeNotification",
    "NsiRpcSetAllParameters",
    "NsiRpcDeregisterChangeNotificationEx",
    "NsiRpcSetAllParametersEx",
    "NsiRpcGetAllParametersEx"
  ],
  "winrnr.dll": [
    "NSPStartup",
    "RemoveNTDSProvider",
    "InstallNTDSProvider"
  ],
  "winrscmd.dll": [
    "public: __thiscall SafeMap_Iterator::~SafeMap_Iterator(void)",
    "public: bool __thiscall SafeMap_Iterator::IsValid(void)const",
    "protected: void __thiscall SafeMap_Iterator::SkipOrphans(void)",
    "const SafeMap >::`vftable'",
    "public: __thiscall SafeMap >::~SafeMap >(void)",
    "public: virtual void __thiscall SafeMap >::Acquire(void)const",
    "WSManPluginShutdown",
    "public: class SafeMap > & __thiscall SafeMap >::AsReference(void)",
    "public: void __thiscall SafeMap_Lock >::Acquire(void)",
    "public: __thiscall SafeMap_Lock >::~SafeMap_Lock >(void)",
    "WSManPluginSignal",
    "public: bool __thiscall SafeMap_Lock >::Acquired(void)",
    "public: __thiscall SafeMap >::SafeMap >(void)",
    "WSManPluginShell",
    "public: virtual void __thiscall SafeMap >::Release(void)const",
    "public: __thiscall SafeMap_Lock >::SafeMap_Lock >(class SafeMap > const &,bool)",
    "WSManPluginReleaseShellContext",
    "public: unsigned long __thiscall CWSManCriticalSection::GetInitError(void)const",
    "WSManPluginReleaseCommandContext",
    "WSManPluginStartup",
    "public: __thiscall SafeMap_Iterator::SafeMap_Iterator(class SafeMap > &,bool)",
    "public: virtual bool __thiscall SafeMap >::DeInitialize(class IRequestContext &)",
    "public: class SafeMap > & __thiscall SafeMap_Iterator::GetMap(void)const",
    "WSManPluginReceive",
    "public: class SafeMap > const & __thiscall SafeMap_Lock >::GetMap(void)const",
    "WSManPluginCommand",
    "protected: class STLMap & __thiscall SafeMap_Iterator::Data(void)const",
    "WSManPluginSend",
    "public: void __thiscall SafeMap_Iterator::Reset(void)",
    "public: virtual bool __thiscall SafeMap >::Initialize(class IRequestContext &)",
    "public: __thiscall CWSManCriticalSectionWithConditionVar::~CWSManCriticalSectionWithConditionVar(void)"
  ],
  "winrsmgr.dll": "No exports",
  "winrssrv.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "winshfhc.dll": [
    "MRTComponent_Generalize"
  ],
  "winsku.dll": [
    "SkuFreeBuffer",
    "SkuGetEditionEulaFilePath"
  ],
  "winsockhc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "winsrv.dll": [
    "UserServerDllInitialization"
  ],
  "winsta.dll": [
    "ServerLicensingOpenW",
    "_WinStationNotifyDisconnectPipe",
    "WinStationConnectAndLockDesktop",
    "WinStationAutoReconnect",
    "WinStationQueryAllowConcurrentConnections",
    "WinStationGetChildSessionId",
    "WinStationSetRenderHint",
    "RemoteAssistancePrepareSystemRestore",
    "WinStationCheckAccess",
    "WinStationFreePropertyValue",
    "WinStationWaitSystemEvent",
    "WinStationEnumerate_IndexedA",
    "ServerLicensingUnloadPolicy",
    "WinStationEnumerateW",
    "WinStationRenameA",
    "_WinStationReadRegistry",
    "WinStationGetUserProfile",
    "ServerLicensingLoadPolicy",
    "WinStationGetCurrentSessionCapabilities",
    "WinStationUnRegisterConsoleNotification",
    "_WinStationShadowTargetSetup",
    "WinStationNegotiateSession",
    "WinStationEnumerateLicenses",
    "WinStationFreeGAPMemory",
    "WinStationNameFromLogonIdW",
    "WinStationRedirectLogonMessage",
    "WinStationCloseServer",
    "WinStationRedirectLogonStatus",
    "_WinStationUpdateSettings",
    "WinStationRenameW",
    "_NWLogonQueryAdmin",
    "ServerSetInternetConnectorStatus",
    "WinStationRedirectLogonError",
    "LogonIdFromWinStationNameW",
    "WinStationEnumerateExW",
    "ServerLicensingOpenA",
    "_WinStationAnnoyancePopup",
    "WinStationRegisterCurrentSessionNotificationEvent",
    "_WinStationBeepOpen",
    "WinStationGetUserCredentials",
    "WinStationFreeUserCredentials",
    "WinStationGetConnectionProperty",
    "WinStationSetInformationW",
    "WinStationSwitchToServicesSession",
    "WinStationVirtualOpen",
    "_WinStationBreakPoint",
    "WinStationSendMessageW",
    "WinStationSendWindowMessage",
    "ServerLicensingGetPolicyInformationA",
    "WinStationGetAllProcesses",
    "_WinStationNotifyLogoff",
    "ServerLicensingDeactivateCurrentPolicy",
    "WinStationOpenServerExA",
    "WinStationQueryLicense",
    "WinStationGetRedirectAuthInfo",
    "WinStationSystemShutdownStarted",
    "WinStationCheckLoopBack",
    "WinStationActivateLicense",
    "WinStationConnectA",
    "WinStationGetCurrentSessionTerminalName",
    "WinStationQueryLogonCredentialsW",
    "WinStationGetAllSessionsEx",
    "WinStationRedirectLogonBeginPainting",
    "_WinStationReInitializeSecurity",
    "WinStationQueryEnforcementCore",
    "WinStationServerPing",
    "WinStationInstallLicense",
    "WinStationTerminateGlassReplacementSession",
    "_WinStationGetApplicationInfo",
    "WinStationShutdownSystem",
    "WinStationPreCreateGlassReplacementSession",
    "WTSRegisterSessionNotificationEx",
    "_WinStationNotifyLogon",
    "WinStationGetLanAdapterNameA",
    "_WinStationNotifyNewSession",
    "WinStationCreateChildSessionTransport",
    "_WinStationUpdateClientCachedCredentials",
    "WinStationGetCurrentSessionConnectionProperty",
    "ServerLicensingGetPolicyInformationW",
    "WinStationGetTermSrvCountersValue",
    "ServerLicensingClose",
    "WinStationIsChildSessionsEnabled",
    "WinStationGetMachinePolicy",
    "WinStationQueryInformationW",
    "WinStationConnectCallback",
    "WinStationSetAutologonPassword",
    "WinStationRegisterConsoleNotificationEx",
    "WinStationQuerySessionVirtualIP",
    "WinStationIsCurrentSessionRemoteable",
    "WinStationQueryCurrentSessionInformation",
    "ServerLicensingGetPolicy",
    "WinStationOpenServerExW",
    "WinStationTerminateProcess",
    "WinStationGetInitialApplication",
    "WinStationVirtualOpenEx",
    "WinStationRedirectErrorMessage",
    "WinStationOpenServerW",
    "WinStationGetProcessSid",
    "WinStationGetDeviceId",
    "WinStationGenerateLicense",
    "ServerGetInternetConnectorStatus",
    "_WinStationShadowTarget2",
    "WinStationSetInformationA",
    "WinStationShadow",
    "WinStationIsSessionRemoteable",
    "WinStationSetPoolCount",
    "WinStationNameFromLogonIdA",
    "_WinStationCheckForApplicationName",
    "WinStationBroadcastSystemMessage",
    "WinStationFreeMemory",
    "WinStationEnableChildSessions",
    "LogonIdFromWinStationNameA",
    "ServerQueryInetConnectorInformationA",
    "WinStationFreeEXECENVDATAEX",
    "ServerLicensingSetPolicy",
    "WinStationIsSessionPermitted",
    "WinStationRemoveLicense",
    "_WinStationUpdateUserConfig",
    "WinStationEnumerateProcesses",
    "WinStationGetSessionIds",
    "WinStationGetUserCertificates",
    "WinStationRegisterConsoleNotification",
    "WinStationConnectW",
    "_WinStationFUSCanRemoteUserDisconnect",
    "ServerLicensingFreePolicyInformation",
    "WinStationGetAllSessionsW",
    "_WinStationCallback",
    "WinStationGetLoggedOnCount",
    "ServerLicensingGetAvailablePolicyIds",
    "WTSUnRegisterSessionNotificationEx",
    "WinStationConnectEx",
    "WinStationGetLanAdapterNameW",
    "WinStationQueryInformationA",
    "WinStationSendMessageA",
    "WinStationVerify",
    "WinStationDisconnect",
    "WinStationNtsdDebug",
    "WinStationReportUIResult",
    "WinStationUserLoginAccessCheck",
    "WinStationRegisterNotificationEvent",
    "_WinStationShadowTarget",
    "WinStationRegisterConsoleNotificationEx2",
    "WinStationEnumerate_IndexedW",
    "WinStationUnRegisterNotificationEvent",
    "_WinStationWaitForConnect",
    "WinStationIsHelpAssistantSession",
    "WinStationSystemShutdownWait",
    "WinStationReset",
    "_NWLogonSetAdmin",
    "WinStationQueryUpdateRequired",
    "WinStationShadowStop",
    "WinStationRevertFromServicesSession",
    "WinStationFreeConsoleNotification",
    "WinStationOpenServerA",
    "_WinStationSessionInitialized",
    "WinStationEnumerateA",
    "WinStationFreeUserCertificates",
    "_WinStationOpenSessionDirectory",
    "ServerQueryInetConnectorInformationW"
  ],
  "wintrust.dll": [
    "TrustOpenStores",
    "DriverFinalPolicy",
    "WintrustSetDefaultIncludePEPageHashes",
    "CryptCATAdminResolveCatalogPath",
    "WVTAsn1SpcSpAgencyInfoDecode",
    "WVTAsn1SpcPeImageDataEncode",
    "OpenPersonalTrustDBDialogEx",
    "CryptCATGetAttrInfo",
    "CryptCATAdminAddCatalog",
    "WTHelperIsChainedToMicrosoft",
    "WTHelperOpenKnownStores",
    "CryptCATCDFEnumMembersByCDFTagEx",
    "WTHelperCertIsSelfSigned",
    "CryptCATGetMemberInfo",
    "CryptCATEnumerateAttr",
    "CryptCATAdminPauseServiceForBackup",
    "CryptCATEnumerateMember",
    "WVTAsn1CatMemberInfoDecode",
    "WintrustRemoveActionID",
    "OfficeCleanupPolicy",
    "WintrustCertificateTrust",
    "CryptCATCDFEnumCatAttributes",
    "WVTAsn1CatNameValueDecode",
    "GenericChainFinalProv",
    "CryptCATEnumerateCatAttr",
    "MsCatFreeHashTag",
    "WVTAsn1CatMemberInfoEncode",
    "HTTPSCertificateTrust",
    "GenericChainCertificateTrust",
    "CryptSIPGetSignedDataMsg",
    "WVTAsn1SpcSpOpusInfoDecode",
    "CryptCATCatalogInfoFromContext",
    "WTHelperGetAgencyInfo",
    "CryptSIPCreateIndirectData",
    "IsCatalogFile",
    "WVTAsn1CatMemberInfo2Encode",
    "CryptSIPPutSignedDataMsg",
    "WVTAsn1SpcMinimalCriteriaInfoEncode",
    "mssip32DllRegisterServer",
    "CryptCATPutCatAttrInfo",
    "mscat32DllRegisterServer",
    "WVTAsn1SpcMinimalCriteriaInfoDecode",
    "WintrustGetDefaultForUsage",
    "CryptSIPGetRegWorkingFlags",
    "CatalogCompactHashDatabase",
    "SoftpubCleanup",
    "WVTAsn1SpcSpOpusInfoEncode",
    "TrustFindIssuerCertificate",
    "CryptCATClose",
    "DllUnregisterServer",
    "WVTAsn1SpcSigInfoEncode",
    "OpenPersonalTrustDBDialog",
    "CryptCATCDFOpen",
    "SoftpubLoadMessage",
    "CryptCATPutMemberInfo",
    "WTHelperGetProvCertFromChain",
    "WVTAsn1SpcStatementTypeDecode",
    "mscat32DllUnregisterServer",
    "CryptCATPutAttrInfo",
    "CryptSIPGetInfo",
    "CryptCATAdminAcquireContext2",
    "WVTAsn1SpcIndirectDataContentDecode",
    "SoftpubDumpStructure",
    "WVTAsn1SpcSpAgencyInfoEncode",
    "CryptCATAllocSortedMemberInfo",
    "WTHelperGetFileName",
    "CryptCATFreeSortedMemberInfo",
    "SoftpubLoadDefUsageCallData",
    "WVTAsn1CatMemberInfo2Decode",
    "FindCertsByIssuer",
    "DriverCleanupPolicy",
    "HTTPSFinalProv",
    "CryptCATCDFEnumAttributesWithCDFTag",
    "WTHelperCheckCertUsage",
    "AddPersonalTrustDBPages",
    "WTHelperGetFileHash",
    "CryptSIPVerifyIndirectData",
    "WVTAsn1SpcFinancialCriteriaInfoDecode",
    "SoftpubCheckCert",
    "OfficeInitializePolicy",
    "TrustFreeDecode",
    "WTHelperGetKnownUsages",
    "WTHelperIsInRootStore",
    "WVTAsn1SpcFinancialCriteriaInfoEncode",
    "mssip32DllUnregisterServer",
    "WVTAsn1SpcPeImageDataDecode",
    "CryptCATHandleFromStore",
    "WTHelperGetProvPrivateDataFromChain",
    "CryptCATAdminEnumCatalogFromHash",
    "SoftpubDllUnregisterServer",
    "SoftpubFreeDefUsageCallData",
    "WVTAsn1CatNameValueEncode",
    "WintrustAddDefaultForUsage",
    "CryptSIPRemoveSignedDataMsg",
    "CryptCATAdminCalcHashFromFileHandle",
    "SoftpubDllRegisterServer",
    "TrustIsCertificateSelfSigned",
    "CryptCATAdminReleaseContext",
    "WVTAsn1SpcSigInfoDecode",
    "WinVerifyTrustEx",
    "WintrustLoadFunctionPointers",
    "WTHelperCertFindIssuerCertificate",
    "WVTAsn1SpcIndirectDataContentEncode",
    "WVTAsn1SpcLinkEncode",
    "CryptCATCDFEnumMembers",
    "TrustDecode",
    "WinVerifyTrust",
    "CryptCATAdminRemoveCatalog",
    "CryptCATOpen",
    "MsCatConstructHashTag",
    "WTHelperGetFileHandle",
    "CryptCATCDFClose",
    "SoftpubAuthenticode",
    "WVTAsn1SpcLinkDecode",
    "SoftpubInitialize",
    "CryptCATGetCatAttrInfo",
    "DllRegisterServer",
    "CryptCATCDFEnumAttributes",
    "WintrustAddActionID",
    "CryptCATAdminCalcHashFromFileHandle2",
    "WTGetSignatureInfo",
    "WTHelperProvDataFromStateData",
    "WTHelperGetProvSignerFromChain",
    "CryptCATAdminAcquireContext",
    "WVTAsn1SpcStatementTypeEncode",
    "CryptCATVerifyMember",
    "CryptCATAdminReleaseCatalogContext",
    "CryptCATCDFEnumMembersByCDFTag",
    "SoftpubLoadSignature",
    "CryptSIPGetCaps",
    "WTHelperCertCheckValidSignature",
    "SoftpubDefCertInit",
    "DriverInitializePolicy",
    "WintrustSetRegPolicyFlags",
    "WintrustGetRegPolicyFlags",
    "CryptCATStoreFromHandle",
    "WTHelperIsChainedToMicrosoftFromStateData",
    "CryptCATPersistStore"
  ],
  "winusb.dll": [
    "WinUsb_GetPowerPolicy",
    "WinUsb_GetAssociatedInterface",
    "WinUsb_WritePipe",
    "WinUsb_ParseDescriptors",
    "WinUsb_QueryDeviceInformation",
    "WinUsb_ParseConfigurationDescriptor",
    "WinUsb_QueryPipe",
    "WinUsb_SetCurrentAlternateSetting",
    "WinUsb_GetPipePolicy",
    "WinUsb_FlushPipe",
    "WinUsb_GetOverlappedResult",
    "WinUsb_GetDescriptor",
    "WinUsb_Initialize",
    "WinUsb_AbortPipe",
    "WinUsb_SetPowerPolicy",
    "WinUsb_ReadPipe",
    "WinUsb_ResetPipe",
    "WinUsb_SetPipePolicy",
    "WinUsb_Free",
    "WinUsb_GetCurrentAlternateSetting",
    "WinUsb_QueryInterfaceSettings",
    "WinUsb_ControlTransfer"
  ],
  "wisp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "witnesswmiv2provider.dll": [
    "WitnessWmiInitialize",
    "DllUnregisterServer",
    "WitnessWmiTerminate",
    "DllMain",
    "GetProviderClassID",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "MI_Main"
  ],
  "wkscli.dll": [
    "NetWkstaSetInfo",
    "NetUseDel",
    "NetUseGetInfo",
    "NetWkstaTransportEnum",
    "NetGetJoinableOUs",
    "NetWkstaTransportDel",
    "NetJoinDomain",
    "NetRenameMachineInDomain",
    "NetAddAlternateComputerName",
    "NetSetPrimaryComputerName",
    "NetUnjoinDomain",
    "NetGetJoinInformation",
    "NetWkstaUserEnum",
    "NetWkstaGetInfo",
    "NetWkstaTransportAdd",
    "NetWkstaStatisticsGet",
    "NetValidateName",
    "NetEnumerateComputerNames",
    "NetWkstaUserSetInfo",
    "NetUseAdd",
    "NetRemoveAlternateComputerName",
    "NetUseEnum",
    "NetWkstaUserGetInfo"
  ],
  "wkspbrokerAx.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllInstall",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wksprtPS.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "wkssvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "wlanapi.dll": [
    "WlanWcmGetProfileList",
    "WlanLowPrivSetInterface",
    "WFDGetDefaultGroupProfileInt",
    "WFDGetOOBBlob",
    "WlanGetNetworkBssList",
    "WFDSetPropertyInt",
    "QueryNetconVirtualCharacteristic",
    "WlanHostedNetworkStartUsing",
    "WlanGetProfileSsidList",
    "WlanRenameProfile",
    "WFDOpenHandle",
    "WlanFreeMemory",
    "WFDFlushVisibleDeviceListInt",
    "WlanLowPrivEnumInterfaces",
    "WlanGetProfileIndex",
    "QueryNetconStatus",
    "WFDParseProfileXmlInt",
    "WFDPairCancelInt",
    "WlanDeinitPlapParams",
    "WlanRefreshConnections",
    "WlanIsActiveConsoleUser",
    "WFDCloseHandle",
    "WlanDoPlap",
    "WFDStartOpenSession",
    "WlanSetUIForwardingNetworkList",
    "WlanQueryAutoConfigParameter",
    "WlanQueryCreateAllUserProfileRestricted",
    "WlanSetAutoConfigParameter",
    "WlanHostedNetworkQueryProperty",
    "WlanHostedNetworkQueryStatus",
    "WFDPairSelectCeremonyInt",
    "WlanHostedNetworkSetProperty",
    "WlanEnumInterfaces",
    "WlanGetProfileCustomUserData",
    "WlanQueryInterface",
    "WlanParseProfileXmlBasicSettings",
    "WlanSetProfilePosition",
    "WlanGetStoredRadioState",
    "WFDForceDisconnectInt",
    "WlanSsidToDisplayName",
    "WlanHostedNetworkSetWCNSettings",
    "WlanExtractPsdIEDataList",
    "WlanGetProfileEapUserDataInfo",
    "WlanLowPrivFreeMemory",
    "WFDCancelOpenSession",
    "WlanHostedNetworkQuerySecondaryKey",
    "WFDCloseLegacySessionInt",
    "WlanHostedNetworkStopUsing",
    "WlanIsUIRequestPending",
    "WFDAcceptConnectRequestAndOpenSessionInt",
    "WlanStoreRadioStateOnEnteringAirPlaneMode",
    "WlanSetInterface",
    "WFDDeclineGroupRequestInt",
    "WFDIsWiFiDirectRunningOnWiFiAdapter",
    "WFDCloseSessionInt",
    "WlanQueryPlapCredentials",
    "WlanWcmGetInterface",
    "WFDStartUsingGroupInt",
    "WlanWfdGOSetWCNSettings",
    "WlanQueryPreConnectInput",
    "WFDParseOOBBlob",
    "WFDGetProfileKeyInfoInt",
    "WlanGetSecuritySettings",
    "WlanStringToSsid",
    "WlanLowPrivOpenHandle",
    "WFDRegisterNotificationInt",
    "WlanRegisterNotification",
    "WlanConnectWithInput",
    "WlanGenerateProfileXmlBasicSettings",
    "WlanWcmSetInterface",
    "WFDOpenHandleInt",
    "WlanHostedNetworkInitSettings",
    "WlanSetAllUserProfileRestricted",
    "WFDGetVisibleDevicesInt",
    "WlanSetProfileCustomUserData",
    "WlanWfdGetPeerInfo",
    "WlanInitPlapParams",
    "WFDCloseHandleInt",
    "WlanCancelPlap",
    "WlanSetSecuritySettings",
    "WFDCancelConnectorPairWithOOB",
    "WlanSendUIResponse",
    "WlanGetProfile",
    "WlanStartAP",
    "WFDCancelOpenSessionInt",
    "WlanHostedNetworkFreeWCNSettings",
    "WlanEnumAllInterfaces",
    "WlanGetFilterList",
    "WlanSetProfile",
    "WFDStartConnectorPairWithOOB",
    "WlanSetPsdIEDataList",
    "WlanScan",
    "WlanHostedNetworkHlpQueryEverUsed",
    "WlanConnect",
    "WlanReasonCodeToString",
    "WlanWfdStartGO",
    "WlanHostedNetworkForceStart",
    "WFDSetAdditionalIEsInt",
    "WlanGetAvailableNetworkList",
    "WlanSetProfileEapXmlUserData",
    "WFDUpdateDeviceVisibility",
    "WlanDisconnect",
    "WFDSetSecondaryDeviceTypeListInt",
    "WlanStopAP",
    "WFDOpenLegacySession",
    "WlanHostedNetworkRefreshSecuritySettings",
    "WlanCloseHandle",
    "WlanGetProfileKeyInfo",
    "WFDIsInterfaceWiFiDirect",
    "WlanIhvControl",
    "WFDCloseSession",
    "WlanLowPrivCloseHandle",
    "WFDStopUsingGroupInt",
    "WFDAcceptGroupRequestAndOpenSessionInt",
    "WlanQueryVirtualInterfaceType",
    "WlanConnectEx",
    "WlanOpenHandle",
    "WFDPairWithDeviceAndOpenSessionInt",
    "WlanGetProfileMetadata",
    "WlanSetProfileMetadata",
    "WlanGetInterfaceCapability",
    "WlanSaveTemporaryProfile",
    "WlanHostedNetworkSetSecondaryKey",
    "WlanGetRadioInformation",
    "WlanDeleteProfile",
    "WlanIsNetworkSuppressed",
    "WlanGetMFPNegotiated",
    "WlanHostedNetworkQueryWCNSettings",
    "WFDDiscoverDevicesInt",
    "WlanSetProfileList",
    "WFDPairCancelByDeviceAddressInt",
    "WlanLowPrivQueryInterface",
    "WlanSetProfileEapUserData",
    "WlanPrivateGetAvailableNetworkList",
    "WFDCancelListenerPairWithOOB",
    "WFDPairEnumerateCeremoniesInt",
    "WFDStartListenerPairWithOOB",
    "WlanSignalValueToBar",
    "WFDStartOpenSessionInt",
    "WlanSetFilterList",
    "WlanRemoveUIForwardingNetworkList",
    "WlanAllocateMemory",
    "WFDCloseOOBPairingSession",
    "WlanInternalScan",
    "WlanGetProfileList",
    "WFDFreeMemoryInt",
    "WFDOpenLegacySessionInt",
    "WlanWfdStopGO",
    "WlanRegisterVirtualStationNotification",
    "WFDLowPrivIsWfdSupportedInt",
    "WFDQueryPropertyInt",
    "WFDDeclineConnectRequestInt",
    "WlanHostedNetworkForceStop"
  ],
  "wlancfg.dll": [
    "GetResourceString",
    "InitHelperDll"
  ],
  "wlandlg.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wlangpui.dll": [
    "GetWmiPolicyAsXML",
    "DllRegisterServer",
    "GetAdPolicyAsXML",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wlanhlp.dll": [
    "WlanWcmGetProfileList",
    "WlanLowPrivSetInterface",
    "WFDGetDefaultGroupProfileInt",
    "WFDGetOOBBlob",
    "WFDSetPropertyInt",
    "QueryNetconVirtualCharacteristic",
    "WlanGetProfileSsidList",
    "WFDFlushVisibleDeviceListInt",
    "WlanLowPrivEnumInterfaces",
    "WlanGetProfileIndex",
    "QueryNetconStatus",
    "WFDParseProfileXmlInt",
    "WFDPairCancelInt",
    "WlanDeinitPlapParams",
    "WlanRefreshConnections",
    "WlanSetUIForwardingNetworkList",
    "WlanDoPlap",
    "WlanQueryCreateAllUserProfileRestricted",
    "WFDPairSelectCeremonyInt",
    "WlanParseProfileXmlBasicSettings",
    "WlanGetStoredRadioState",
    "WFDForceDisconnectInt",
    "WlanHostedNetworkSetWCNSettings",
    "WlanGetProfileEapUserDataInfo",
    "WlanLowPrivFreeMemory",
    "WFDCloseLegacySessionInt",
    "WlanIsUIRequestPending",
    "WFDAcceptConnectRequestAndOpenSessionInt",
    "WlanStoreRadioStateOnEnteringAirPlaneMode",
    "WFDDeclineGroupRequestInt",
    "WFDIsWiFiDirectRunningOnWiFiAdapter",
    "WFDCloseSessionInt",
    "WlanQueryPlapCredentials",
    "WlanWcmGetInterface",
    "WFDStartUsingGroupInt",
    "WlanWfdGOSetWCNSettings",
    "WlanQueryPreConnectInput",
    "WFDParseOOBBlob",
    "WFDGetProfileKeyInfoInt",
    "WlanLowPrivOpenHandle",
    "WFDRegisterNotificationInt",
    "WlanConnectWithInput",
    "WlanGenerateProfileXmlBasicSettings",
    "WlanWcmSetInterface",
    "WFDOpenHandleInt",
    "WlanSetAllUserProfileRestricted",
    "WFDGetVisibleDevicesInt",
    "WlanWfdGetPeerInfo",
    "WlanInitPlapParams",
    "WFDCloseHandleInt",
    "WlanCancelPlap",
    "WFDCancelConnectorPairWithOOB",
    "WlanSendUIResponse",
    "WlanStartAP",
    "WFDCancelOpenSessionInt",
    "WlanHostedNetworkFreeWCNSettings",
    "WlanEnumAllInterfaces",
    "WFDStartConnectorPairWithOOB",
    "WlanHostedNetworkHlpQueryEverUsed",
    "WlanWfdStartGO",
    "WFDSetAdditionalIEsInt",
    "WlanStopAP",
    "WFDSetSecondaryDeviceTypeListInt",
    "WlanGetProfileKeyInfo",
    "WFDIsInterfaceWiFiDirect",
    "WlanLowPrivCloseHandle",
    "WFDStopUsingGroupInt",
    "WFDAcceptGroupRequestAndOpenSessionInt",
    "WlanQueryVirtualInterfaceType",
    "WFDPairWithDeviceAndOpenSessionInt",
    "WlanGetProfileMetadata",
    "WlanSetProfileMetadata",
    "WlanGetRadioInformation",
    "WlanIsNetworkSuppressed",
    "WlanGetMFPNegotiated",
    "WlanHostedNetworkQueryWCNSettings",
    "WFDDiscoverDevicesInt",
    "WFDPairCancelByDeviceAddressInt",
    "WlanLowPrivQueryInterface",
    "WlanPrivateGetAvailableNetworkList",
    "WFDCancelListenerPairWithOOB",
    "WFDPairEnumerateCeremoniesInt",
    "WFDStartListenerPairWithOOB",
    "WFDStartOpenSessionInt",
    "WlanRemoveUIForwardingNetworkList",
    "WFDCloseOOBPairingSession",
    "WlanInternalScan",
    "WFDFreeMemoryInt",
    "WFDOpenLegacySessionInt",
    "WlanWfdStopGO",
    "WFDLowPrivIsWfdSupportedInt",
    "WFDQueryPropertyInt",
    "WFDDeclineConnectRequestInt"
  ],
  "wlaninst.dll": [
    "WlanDeviceClassCoInstaller"
  ],
  "wlanmsm.dll": [
    "FatMsmDeInit",
    "Dot11MsmInit",
    "Dot11MsmDeInit",
    "FatMsmInit",
    "InitializeDll"
  ],
  "wlanpref.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wlansec.dll": [
    "MSMSecDeinitializeAdapter",
    "MSMSecFreeMemory",
    "MSMSecFreeIntfState",
    "MSMSecConnectionHealthCheck",
    "MSMSecSetAPSecondaryPSK",
    "MSMSecQueryIntfState",
    "MSMSecSetAPPeerKey",
    "MSMSecRemoveAPPeerKey",
    "MSMSecRecvPacket",
    "MSMSecIsUIRequestPending",
    "MSMSecSendPktCompletion",
    "MSMSecSetRuntimeState",
    "MSMSecQueryAPPeerPSKIndex",
    "MSMSecUIResponse",
    "MSMSecFreeProfile",
    "MSMSecPerformPostAssociateSecurity",
    "MSMSecFreePeerState",
    "MSMSecPerformPreAssociateSecurity",
    "MSMSecProcessSessionChange",
    "MSMSecStopPostAssociateSecurity",
    "MSMSecRecvIndication",
    "MSMSecSetWcnOneXEnable",
    "MSMSecInitialize",
    "MSMSecStopSecurity",
    "MSMSecCreateDiscoveryProfiles",
    "MSMSecRedoSecurity",
    "MSMSecDeinitialize",
    "MSMSecPerformCapabilityMatch",
    "MSMSecQueryPeerState",
    "MSMSecInitializeAdapter"
  ],
  "wlansvc.dll": [
    "WLNotifyOnLogoff",
    "WLNotifyOnLogon",
    "SvchostPushServiceGlobals",
    "WlanSvcMain"
  ],
  "wlanui.dll": [
    "WLInvokeProfileUIFromXMLFile",
    "WLInvokeProfileUI",
    "WLFreeProfile",
    "WLFreeProfileXml",
    "WlanUIEditProfile",
    "DllGetClassObject"
  ],
  "wlanutil.dll": [
    "WlanSignalValueToBar",
    "WlanIsActiveConsoleUser",
    "WlanSsidToDisplayName",
    "WlanStringToSsid"
  ],
  "wlgpclnt.dll": [
    "GenerateWLANPolicy",
    "WLGPAInit",
    "WLGPADeInit",
    "ProcessWLANPolicyEx"
  ],
  "wlidcli.dll": [
    "CancelPendingRequest",
    "DllInstall",
    "CreateIdentityHandleEx",
    "DecryptWithSessionKey",
    "UpdateUserAssociatedDeviceProperties",
    "EnumerateCertificates",
    "CloseIdentityHandle",
    "NextIdentity",
    "UIEndWaitDialog",
    "LogonIdentityExSSO",
    "PassportFreeMemory",
    "GetAssertion",
    "Initialize",
    "EncryptWithSessionKeyEx",
    "GetExtendedError",
    "UICollectCredential",
    "CreateLinkedIdentityHandle",
    "LogonIdentity",
    "EnumerateUserAssociatedDevices",
    "IDCRL_GetSpecifiedProtectionKey",
    "IsMappedError",
    "DllGetClassObject",
    "GetCertificate",
    "GetAuthenticationStatus",
    "GetWebAuthUrlEx",
    "SetExtendedProperty",
    "SendOneTimeCode",
    "GetDefaultUserForTarget",
    "GetErrorMessage",
    "IDCRL_GetLatestProtectionKey",
    "GetConfigDWORDValue",
    "UnPackErrorBlob",
    "SetIdcrlOptions",
    "EnumerateDeviceID",
    "ProvisionDeviceId",
    "SetIdentityProperty",
    "DllUnregisterServer",
    "InitializeEx",
    "GetWebAuthUrl",
    "SetCredential",
    "HasPersistedCredential",
    "GetDeviceIdEx",
    "GetHIPChallenge",
    "UIShowWaitDialog",
    "GenerateDeviceToken",
    "Uninitialize",
    "VerifyAssertion",
    "GetAuthState",
    "AuthIdentityToServiceEx",
    "InitializeIDCRLTraceBuffer",
    "OpenAuthenticatedBrowser",
    "DisassociateDeviceFromUser",
    "GetExtendedProperty",
    "GetRealmInfo",
    "SetUserExtendedProperty",
    "RemoveChangeNotificationCallback",
    "RemoveUserFromSsoGroup",
    "EnumIdentitiesWithCachedCredentials",
    "GetDeviceId",
    "SetChangeNotificationCallback",
    "FlushIDCRLTraceBuffer",
    "GetUsersFromSsoGroup",
    "GetDeviceShortLivedToken",
    "GetUserExtendedProperty",
    "GetIdentityProperty",
    "VerifyCertificate",
    "GenerateCertToken",
    "GetIdentityPropertyByName",
    "AuthIdentityToService",
    "DecryptWithSessionKeyEx",
    "RenewDeviceId",
    "SetDefaultUserForTarget",
    "CloseEnumIdentitiesHandle",
    "GetServiceConfig",
    "StartTracing",
    "AddUserToSsoGroup",
    "LogonIdentityExWithUI",
    "DllRegisterServer",
    "SetIdentityCallback",
    "GetDefaultNoUISSOUser",
    "DeProvisionDeviceId",
    "AssociateDeviceToUser",
    "SetHIPSolution",
    "DllCanUnloadNow",
    "LogonIdentityEx",
    "GetResponseForHttpChallenge",
    "PersistCredential",
    "GetAuthStateEx",
    "IsDeviceIDAdmin",
    "SetDeviceConsent",
    "InitializeApp",
    "SendWatsonReport",
    "CreateIdentityHandle",
    "EncryptWithSessionKey",
    "RemovePersistedCredential",
    "StopTracing"
  ],
  "wlidcredprov.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wlidfdp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wlidnsp.dll": [
    "NSPStartup",
    "DllRegisterServer",
    "NSPCleanup",
    "DllUnregisterServer"
  ],
  "wlidprov.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wlidres.dll": "No exports",
  "wlidsvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "wlroamextension.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "wmcodecdspps.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wmdmlog.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wmdmps.dll": [
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllUnregisterServer"
  ],
  "wmdrmdev.dll": [
    "WMCreateDeviceRegistrationPriv",
    "DllRegisterServer"
  ],
  "wmdrmnet.dll": [
    "WMCreateDRMTranscryptionManagerPriv",
    "DllRegisterServer",
    "WMCreateDRMTranscryptorPriv"
  ],
  "wmdrmsdk.dll": [
    "WMDRMCreateProvider",
    "_WMDRMCreateProvider",
    "MFWMDRMOutputTrustAuthority_CreateInstance",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "WMDRMShutdown",
    "WMDRMStartup",
    "DllUnregisterServer"
  ],
  "wmerror.dll": "No exports",
  "wmi.dll": [
    "GetTraceEnableLevel",
    "UnregisterTraceGuids",
    "ControlTraceA",
    "WmiSetSingleInstanceW",
    "WmiDevInstToInstanceNameA",
    "WmiSetSingleItemA",
    "WmiExecuteMethodW",
    "WmiQueryGuidInformation",
    "WmiFreeBuffer",
    "ControlTraceW",
    "RegisterTraceGuidsW",
    "RemoveTraceCallback",
    "WmiMofEnumerateResourcesA",
    "WmiNotificationRegistrationW",
    "CreateTraceInstanceId",
    "WmiFileHandleToInstanceNameW",
    "StartTraceA",
    "WmiExecuteMethodA",
    "WmiCloseBlock",
    "TraceEvent",
    "WmiDevInstToInstanceNameW",
    "WmiSetSingleInstanceA",
    "OpenTraceW",
    "WmiQuerySingleInstanceW",
    "WmiQueryAllDataW",
    "TraceEventInstance",
    "ProcessTrace",
    "WmiMofEnumerateResourcesW",
    "EnableTrace",
    "RegisterTraceGuidsA",
    "GetTraceLoggerHandle",
    "SetTraceCallback",
    "CloseTrace",
    "WmiEnumerateGuids",
    "StartTraceW",
    "QueryAllTracesA",
    "GetTraceEnableFlags",
    "WmiSetSingleItemW",
    "WmiOpenBlock",
    "WmiQueryAllDataA",
    "WmiQuerySingleInstanceA",
    "QueryAllTracesW",
    "WmiFileHandleToInstanceNameA",
    "WmiNotificationRegistrationA",
    "OpenTraceA"
  ],
  "wmiclnt.dll": [
    "WmiSetSingleInstanceW",
    "WmiDevInstToInstanceNameA",
    "WmiSetSingleItemA",
    "WmiExecuteMethodW",
    "WmiQueryGuidInformation",
    "WmiFreeBuffer",
    "WmiMofEnumerateResourcesA",
    "WmiNotificationRegistrationW",
    "WmiFileHandleToInstanceNameW",
    "WmiExecuteMethodA",
    "WmiCloseBlock",
    "WmiDevInstToInstanceNameW",
    "WmiSetSingleInstanceA",
    "WmiQuerySingleInstanceW",
    "WmiQueryAllDataW",
    "WmiMofEnumerateResourcesW",
    "WmiQuerySingleInstanceMultipleW",
    "WmiEnumerateGuids",
    "WmiReceiveNotificationsW",
    "WmiReceiveNotificationsA",
    "WmiQueryAllDataMultipleW",
    "WmiQueryAllDataMultipleA",
    "WmiSetSingleItemW",
    "WmiQuerySingleInstanceMultipleA",
    "WmiOpenBlock",
    "WmiQueryAllDataA",
    "WmiQuerySingleInstanceA",
    "WmiNotificationRegistrationA",
    "WmiFileHandleToInstanceNameA"
  ],
  "wmicmiplugin.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wmidcom.dll": [
    "public: class CAutoSetActivityId & __thiscall CAutoSetActivityId::operator=(class CAutoSetActivityId const &)",
    "public: class CCritSec & __thiscall CCritSec::operator=(class CCritSec const &)",
    "public: __thiscall CCritSec::CCritSec(void)",
    "public: __thiscall CCritSec::~CCritSec(void)",
    "MI_Application_InitializeV1"
  ],
  "wmidx.dll": [
    "WMCreateASFChopper"
  ],
  "wmiprop.dll": [
    "WmiPropCoInstaller"
  ],
  "wmitomi.dll": [
    "public: class CAutoSetActivityId & __thiscall CAutoSetActivityId::operator=(class CAutoSetActivityId const &)",
    "public: __thiscall MIServer::MIServer(void)",
    "Adapter_DllCanUnloadNow",
    "Adapter_CreateAdapterObject",
    "public: class CCritSec & __thiscall CCritSec::operator=(class CCritSec const &)",
    "Adapter_RegisterDLL",
    "public: __thiscall CCritSec::CCritSec(void)",
    "public: __thiscall CCritSec::~CCritSec(void)",
    "public: class MIServer & __thiscall MIServer::operator=(class MIServer const &)",
    "Adapter_UnRegisterDLL",
    "public: long __thiscall AdapterContextBase::SetAdapter(struct IUnknown *)",
    "Adapter_DllGetClassObject"
  ],
  "wmp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wmpdxm.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wmpeffects.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wmploc.DLL": "No exports",
  "wmpmde.dll": [
    "MFCreateNetVRoot",
    "MFCreateWMPMDEOpCenter",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wmpps.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wmpshell.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wmsgapi.dll": [
    "WmsgSendPSPMessage",
    "WmsgBroadcastMessage",
    "WmsgPostNotifyMessage",
    "WmsgPostMessage",
    "WmsgBroadcastNotifyMessage",
    "WmsgSendMessage"
  ],
  "wmvdspa.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "workerdd.dll": "No exports",
  "wow32.dll": [
    "WOWGetVDMPointerFix",
    "WOWYield16",
    "GetCommShadowMSR",
    "CopyDropFilesFrom32",
    "W32Dispatch",
    "WOWGetVDMPointerUnfix",
    "WOW32DriverCallback",
    "WOWGetVDMPointer",
    "WOW32ResolveMemory",
    "WOW32ResolveHandle",
    "WOWGlobalFree16",
    "WOWDirectedYield16",
    "WOWGlobalUnlock16",
    "WOWCallback16Ex",
    "WOWGlobalAlloc16",
    "WOWHandle16",
    "CopyDropFilesFrom16",
    "WOWHandle32",
    "W32HungAppNotifyThread",
    "WOWCallback16",
    "GetCommHandle",
    "WOWGlobalUnlockFree16",
    "WOWUseMciavi16",
    "WOWGlobalLockSize16",
    "W32Init",
    "WOWFreeMetafile",
    "WOWGlobalLock16",
    "WOWGlobalAllocLock16"
  ],
  "wpccpl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wpcsvc.dll": [
    "ServiceMain"
  ],
  "wpd_ci.dll": [
    "CoDeviceInstall",
    "WpdClassInstaller",
    "DoCmd",
    "MigrateMTPDevicesInstalledAsMSC",
    "RescanBus"
  ],
  "wpdbusenum.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "wpdshext.dll": [
    "_CDefFolderMenu_MergeMenu@16",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wpdwcn.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wpnapps.dll": [
    "DllCanUnloadNow",
    "DllGetActivationFactory",
    "DllGetClassObject"
  ],
  "wpncore.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wpninprc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wpnprv.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wpnsruprov.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "SruUninitializeProvider",
    "SruInitializeProvider"
  ],
  "ws2_32.dll": [
    "WahOpenNotificationHandleHelper",
    "WSARecvDisconnect",
    "ntohl",
    "WSAEnumNameSpaceProvidersA",
    "inet_ntoa",
    "WSASetServiceA",
    "WSCSetApplicationCategoryEx",
    "connect",
    "WSALookupServiceBeginA",
    "WSASetBlockingHook",
    "inet_pton",
    "WSANtohs",
    "WahOpenHandleHelper",
    "GetAddrInfoExW",
    "WSARecv",
    "WSCDeinstallProvider",
    "WSALookupServiceBeginW",
    "WSAProviderConfigChange",
    "htonl",
    "setsockopt",
    "WSCGetProviderPath",
    "WSCInstallProvider",
    "WSCUpdateProvider",
    "WahEnableNonIFSHandleSupport",
    "WSCWriteProviderOrderEx",
    "WSAAsyncGetHostByAddr",
    "WSAGetServiceClassNameByClassIdW",
    "recvfrom",
    "WSAIoctl",
    "WSALookupServiceNextW",
    "WSCGetApplicationCategory",
    "WSACreateEvent",
    "WahCreateNotificationHandle",
    "WSANSPIoctl",
    "WSAAsyncGetProtoByName",
    "WSAHtonl",
    "WSCInstallProviderAndChains",
    "WSCGetProviderInfo",
    "WahCreateHandleContextTable",
    "gethostbyaddr",
    "WSCDeinstallProviderEx",
    "WSASetEvent",
    "WSAAsyncGetHostByName",
    "WSAStringToAddressA",
    "recv",
    "WSCGetApplicationCategoryEx",
    "WSALookupServiceNextA",
    "WSAEnumProtocolsW",
    "SetAddrInfoExA",
    "WahWriteLSPEvent",
    "WSASetLastError",
    "WSACleanup",
    "WahDestroyHandleContextTable",
    "WahReferenceContextByHandle",
    "getaddrinfo",
    "shutdown",
    "WSCInstallNameSpaceEx2",
    "FreeAddrInfoExW",
    "WahRemoveHandleContext",
    "WPUGetProviderPathEx",
    "WahWaitForNotification",
    "inet_ntop",
    "WahOpenCurrentThread",
    "inet_addr",
    "WSCEnumProtocolsEx",
    "WSCSetApplicationCategory",
    "WahCreateSocketHandle",
    "accept",
    "getsockopt",
    "WSAAdvertiseProvider",
    "WSAGetQOSByName",
    "WSCUnInstallNameSpaceEx2",
    "getservbyname",
    "socket",
    "WSAConnectByList",
    "WSACloseEvent",
    "WSAEnumNameSpaceProvidersW",
    "WSApSetPostRoutine",
    "getsockname",
    "WSAAddressToStringW",
    "WSAConnectByNameA",
    "WahNotifyAllProcesses",
    "WPUCompleteOverlappedRequest",
    "sendto",
    "WSAEnumNetworkEvents",
    "WSAJoinLeaf",
    "WSAGetServiceClassInfoA",
    "WSASocketA",
    "GetAddrInfoW",
    "WahCloseHandleHelper",
    "WSCInstallNameSpaceEx",
    "WSAEventSelect",
    "WSAIsBlocking",
    "WSAEnumNameSpaceProvidersExA",
    "WSASocketW",
    "getnameinfo",
    "WSCSetProviderInfo",
    "WSAWaitForMultipleEvents",
    "WSAInstallServiceClassW",
    "WSAConnectByNameW",
    "WahOpenApcHelper",
    "WSCInstallNameSpace",
    "WSALookupServiceEnd",
    "getservbyport",
    "WSAConnect",
    "WSAHtons",
    "getpeername",
    "WahCloseNotificationHandleHelper",
    "WSAUnhookBlockingHook",
    "GetAddrInfoExA",
    "FreeAddrInfoEx",
    "bind",
    "WahCloseApcHelper",
    "WSAAsyncGetServByName",
    "ntohs",
    "InetPtonW",
    "WSAAsyncGetServByPort",
    "WSCWriteProviderOrder",
    "WSAEnumProtocolsA",
    "WSAStartup",
    "gethostbyname",
    "WSCEnumProtocols",
    "WSASendDisconnect",
    "InetNtopW",
    "WSAStringToAddressW",
    "WSAEnumNameSpaceProvidersExW",
    "WSAInstallServiceClassA",
    "WSAAddressToStringA",
    "WSANtohl",
    "WSAUnadvertiseProvider",
    "WSCUnInstallNameSpace",
    "WSADuplicateSocketA",
    "WSCInstallProviderEx",
    "send",
    "WSASend",
    "GetHostNameW",
    "WSAAccept",
    "WSASendTo",
    "getprotobynumber",
    "listen",
    "__WSAFDIsSet",
    "WSCEnableNSProvider",
    "WSADuplicateSocketW",
    "WahCompleteRequest",
    "WahCloseThread",
    "WSCUpdateProviderEx",
    "WSASendMsg",
    "WSAGetOverlappedResult",
    "WahCloseSocketHandle",
    "ioctlsocket",
    "WSAAsyncGetProtoByNumber",
    "WahEnumerateHandleContexts",
    "WSARemoveServiceClass",
    "gethostname",
    "WSAAsyncSelect",
    "WSAPoll",
    "getprotobyname",
    "WSASetServiceW",
    "freeaddrinfo",
    "GetAddrInfoExCancel",
    "SetAddrInfoExW",
    "select",
    "WSARecvFrom",
    "WahDisableNonIFSHandleSupport",
    "closesocket",
    "WSAResetEvent",
    "WSAProviderCompleteAsyncCall",
    "FreeAddrInfoW",
    "WSAGetLastError",
    "WahQueueUserApc",
    "WEP",
    "WahInsertHandleContext",
    "GetAddrInfoExOverlappedResult",
    "WSACancelBlockingCall",
    "WSACancelAsyncRequest",
    "GetNameInfoW",
    "htons",
    "WSAGetServiceClassNameByClassIdA",
    "WSAGetServiceClassInfoW",
    "WSCWriteNameSpaceOrder"
  ],
  "ws2help.dll": [
    "WahDestroyHandleContextTable",
    "WahReferenceContextByHandle",
    "WahOpenNotificationHandleHelper",
    "WahOpenApcHelper",
    "WahCloseSocketHandle",
    "WahEnumerateHandleContexts",
    "WahCloseNotificationHandleHelper",
    "WahRemoveHandleContext",
    "WahWaitForNotification",
    "WahOpenHandleHelper",
    "WahOpenCurrentThread",
    "WahCloseApcHelper",
    "WahDisableNonIFSHandleSupport",
    "WahCreateSocketHandle",
    "WahEnableNonIFSHandleSupport",
    "WahQueueUserApc",
    "WahCreateNotificationHandle",
    "WahNotifyAllProcesses",
    "WahInsertHandleContext",
    "WahCreateHandleContextTable",
    "WahCloseHandleHelper",
    "WahWriteLSPEvent",
    "WahCompleteRequest",
    "WahCloseThread"
  ],
  "wscapi.dll": [
    "wscLuaSettingsFix",
    "WscGetAntiMalwareUri",
    "wscFirewallGetStatus",
    "WscRegisterForChanges",
    "wscIsDefenderAntivirusSupported",
    "IID_IWSCProductList",
    "wscAutoUpdatesGetStatus",
    "wscProductInfoFree",
    "WscQueryAntiMalwareUri",
    "wscAntiSpywareGetStatus",
    "wscAutoUpdatesEnableScheduledMode",
    "wscGeneralSecurityGetStatus",
    "wscAntiVirusGetStatus",
    "wscRegisterSecurityProduct",
    "DllCanUnloadNow",
    "wscRegisterChangeNotification",
    "CLSID_WSCProductList",
    "wscPing",
    "wscGetAlertStatus",
    "wscIeSettingsFix",
    "IID_IWscProduct",
    "wscShowAMSCN",
    "DllGetClassObject",
    "wscAntiVirusExpiredBeyondThreshold",
    "wscOverrideComponentStatus",
    "wscIcfEnable",
    "WscUnRegisterChanges",
    "WscGetSecurityProviderHealth",
    "LIBID_wscAPILib",
    "wscUnregisterSecurityProduct",
    "wscUpdateProductStatus",
    "wscUnRegisterChangeNotification"
  ],
  "wscinterop.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wscisvif.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wscproxystub.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wscsvc.dll": [
    "ServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "wsdchngr.dll": [
    "WSDCHNGRChallengeDeviceClass",
    "WSDCHNGRRegisterDeviceToChallenge",
    "WSDCHNGRInitialize",
    "WSDCHNGRShutdown"
  ],
  "wsecedit.dll": [
    "DllCanUnloadNow",
    "TranslateAceMasksAndCondition",
    "InvokeCAPEACLEditor",
    "DllGetClassObject"
  ],
  "wsepno.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wshbth.dll": [
    "WSHIoctl",
    "NSPStartup",
    "WSHStringToAddress",
    "WSHAddressToString",
    "WSHGetWinsockMapping",
    "WSHOpenSocket2",
    "WSHGetProviderGuid",
    "WSHEnumProtocols",
    "WSHJoinLeaf",
    "WSHNotify",
    "WSHGetWildcardSockaddr",
    "WSHOpenSocket",
    "WSHSetSocketInformation",
    "WSHGetSockaddrType",
    "WSHGetBroadcastSockaddr",
    "WSHGetWSAProtocolInfo",
    "WSHGetSocketInformation"
  ],
  "wshcon.dll": [
    "DLLGetDocumentation",
    "DllRegisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wshelper.dll": [
    "InitHelperDll"
  ],
  "wshext.dll": [
    "IsFileSupportedName",
    "RemoveSignedDataMsg",
    "DllGetClassObject",
    "DllRegisterServer",
    "CreateIndirectData",
    "GetSignedDataMsg",
    "DllCanUnloadNow",
    "VerifyIndirectData",
    "PutSignedDataMsg",
    "DllUnregisterServer"
  ],
  "wship6.dll": [
    "WSHIoctl",
    "WSHStringToAddress",
    "WSHAddressToString",
    "WSHOpenSocket2",
    "WSHGetWinsockMapping",
    "WSHGetProviderGuid",
    "WSHEnumProtocols",
    "WSHJoinLeaf",
    "WSHNotify",
    "WSHGetWildcardSockaddr",
    "WSHOpenSocket",
    "WSHSetSocketInformation",
    "WSHGetSockaddrType",
    "WSHGetWSAProtocolInfo",
    "WSHGetSocketInformation"
  ],
  "wshirda.dll": [
    "WSHIoctl",
    "WSHGetWinsockMapping",
    "WSHGetProviderGuid",
    "WSHEnumProtocols",
    "WSHNotify",
    "WSHGetWildcardSockaddr",
    "WSHOpenSocket",
    "WSHSetSocketInformation",
    "WSHGetSockaddrType",
    "WSHGetWSAProtocolInfo",
    "WSHGetSocketInformation"
  ],
  "wshnetbs.dll": [
    "WSHGetWinsockMapping",
    "WSHGetProviderGuid",
    "WSHEnumProtocols",
    "WSHNotify",
    "WSHGetWildcardSockaddr",
    "WSHOpenSocket",
    "WSHSetSocketInformation",
    "WSHGetSockaddrType",
    "WSHGetSocketInformation"
  ],
  "wshqos.dll": [
    "WSHIoctl",
    "WSHStringToAddress",
    "WSHAddressToString",
    "WSHOpenSocket2",
    "WSHGetWinsockMapping",
    "WSHGetProviderGuid",
    "WSHEnumProtocols",
    "WSHJoinLeaf",
    "WSHNotify",
    "WSHGetWildcardSockaddr",
    "WSHOpenSocket",
    "WSHSetSocketInformation",
    "WSHGetSockaddrType",
    "WSHGetWSAProtocolInfo",
    "WSHGetSocketInformation"
  ],
  "wshrm.dll": [
    "WSHIoctl",
    "WSHStringToAddress",
    "WSHAddressToString",
    "WSHOpenSocket2",
    "WSHGetWinsockMapping",
    "WSHGetProviderGuid",
    "WSHEnumProtocols",
    "WSHJoinLeaf",
    "WSHNotify",
    "WSHGetWildcardSockaddr",
    "WSHOpenSocket",
    "WSHSetSocketInformation",
    "WSHGetSockaddrType",
    "WSHGetBroadcastSockaddr",
    "WSHGetWSAProtocolInfo",
    "WSHGetSocketInformation"
  ],
  "wsmplpxy.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wsnmp32.dll": [
    "SnmpListenEx",
    "SnmpSetRetransmitMode",
    "SnmpStartupEx",
    "SnmpGetRetransmitMode",
    "SnmpStartup",
    "SnmpOpen",
    "SnmpStrToContext",
    "SnmpCreateVbl",
    "SnmpContextToStr",
    "SnmpOidCompare",
    "_SnmpConveyAgentAddress@4",
    "SnmpRegister",
    "SnmpRecvMsg",
    "SnmpGetVb",
    "SnmpSetRetry",
    "SnmpOidCopy",
    "SnmpDuplicateVbl",
    "SnmpClose",
    "SnmpCreatePdu",
    "SnmpDuplicatePdu",
    "SnmpFreePdu",
    "SnmpCleanupEx",
    "SnmpGetTimeout",
    "SnmpEntityToStr",
    "SnmpFreeContext",
    "SnmpFreeDescriptor",
    "SnmpFreeEntity",
    "SnmpListen",
    "_SnmpSetAgentAddress@4",
    "SnmpCreateSession",
    "SnmpStrToOid",
    "SnmpGetTranslateMode",
    "SnmpFreeVbl",
    "SnmpEncodeMsg",
    "SnmpGetPduData",
    "SnmpSendMsg",
    "SnmpDecodeMsg",
    "SnmpDeleteVb",
    "SnmpCountVbl",
    "SnmpGetRetry",
    "SnmpGetVendorInfo",
    "SnmpOidToStr",
    "SnmpCancelMsg",
    "SnmpCleanup",
    "SnmpSetPduData",
    "SnmpSetTimeout",
    "SnmpSetVb",
    "SnmpSetPort",
    "SnmpStrToEntity",
    "SnmpSetTranslateMode",
    "SnmpGetLastError"
  ],
  "wsock32.dll": [
    "GetAddressByNameW",
    "GetTypeByNameW",
    "GetAddressByNameA",
    "ntohl",
    "ioctlsocket",
    "shutdown",
    "WSAAsyncGetProtoByNumber",
    "getpeername",
    "gethostname",
    "inet_ntoa",
    "WSAAsyncSelect",
    "GetTypeByNameA",
    "connect",
    "getprotobyname",
    "WSASetBlockingHook",
    "WSAUnhookBlockingHook",
    "NPLoadNameSpaces",
    "getnetbyname",
    "bind",
    "htonl",
    "inet_addr",
    "select",
    "GetNameByTypeA",
    "WSAAsyncGetServByName",
    "dn_expand",
    "closesocket",
    "ntohs",
    "setsockopt",
    "rresvport",
    "SetServiceW",
    "accept",
    "WSAAsyncGetServByPort",
    "getservbyname",
    "WSAGetLastError",
    "getsockopt",
    "WSAStartup",
    "socket",
    "WSAAsyncGetHostByAddr",
    "getsockname",
    "gethostbyname",
    "WSApSetPostRoutine",
    "recvfrom",
    "s_perror",
    "EnumProtocolsA",
    "MigrateWinsockConfiguration",
    "EnumProtocolsW",
    "WEP",
    "WSAAsyncGetProtoByName",
    "GetAcceptExSockaddrs",
    "rcmd",
    "sethostname",
    "sendto",
    "SetServiceA",
    "WSARecvEx",
    "gethostbyaddr",
    "send",
    "inet_network",
    "GetNameByTypeW",
    "TransmitFile",
    "WSAAsyncGetHostByName",
    "getprotobynumber",
    "WSAIsBlocking",
    "GetServiceA",
    "rexec",
    "WSACancelBlockingCall",
    "AcceptEx",
    "recv",
    "GetServiceW",
    "listen",
    "WSACancelAsyncRequest",
    "htons",
    "__WSAFDIsSet",
    "WSASetLastError",
    "getservbyport",
    "WSACleanup"
  ],
  "wtsapi32.dll": [
    "WTSEnumerateProcessesW",
    "WTSVirtualChannelQuery",
    "WTSEnumerateSessionsW",
    "WTSEnumerateListenersW",
    "WTSEnumerateListenersA",
    "WTSSetSessionInformationW",
    "WTSCloseServer",
    "WTSVirtualChannelClose",
    "WTSEnumerateSessionsExW",
    "WTSQuerySessionInformationA",
    "WTSVirtualChannelPurgeOutput",
    "WTSOpenServerW",
    "WTSQueryUserConfigA",
    "WTSRegisterSessionNotification",
    "WTSVirtualChannelOpen",
    "WTSStopRemoteControlSession",
    "WTSVirtualChannelRead",
    "WTSSetUserConfigA",
    "WTSQueryUserToken",
    "WTSFreeMemoryExW",
    "WTSIsChildSessionsEnabled",
    "WTSEnumerateServersW",
    "WTSStartRemoteControlSessionA",
    "WTSVirtualChannelPurgeInput",
    "WTSSetListenerSecurityA",
    "WTSEnumerateProcessesExW",
    "WTSSetListenerSecurityW",
    "WTSUnRegisterSessionNotificationEx",
    "WTSShutdownSystem",
    "WTSEnableChildSessions",
    "WTSDisconnectSession",
    "WTSQueryListenerConfigW",
    "WTSEnumerateSessionsA",
    "WTSQueryListenerConfigA",
    "WTSUnRegisterSessionNotification",
    "WTSVirtualChannelOpenEx",
    "WTSEnumerateProcessesA",
    "WTSConnectSessionA",
    "WTSCreateListenerW",
    "WTSOpenServerExW",
    "WTSSetSessionInformationA",
    "WTSEnumerateSessionsExA",
    "WTSQuerySessionInformationW",
    "WTSTerminateProcess",
    "WTSSendMessageW",
    "WTSSetRenderHint",
    "WTSWaitSystemEvent",
    "WTSEnumerateProcessesExA",
    "WTSSetUserConfigW",
    "WTSFreeMemoryExA",
    "WTSStartRemoteControlSessionW",
    "WTSLogoffSession",
    "WTSEnumerateServersA",
    "WTSGetListenerSecurityW",
    "WTSQueryUserConfigW",
    "WTSGetListenerSecurityA",
    "WTSRegisterSessionNotificationEx",
    "WTSGetChildSessionId",
    "WTSOpenServerExA",
    "WTSSendMessageA",
    "WTSVirtualChannelWrite",
    "WTSConnectSessionW",
    "WTSOpenServerA",
    "WTSCreateListenerA",
    "WTSFreeMemory"
  ],
  "wuaext.dll": [
    "IsWuAppDisabledByPolicy",
    "GetAutoUpdateNotification",
    "AutoUpdateNotificationSkipped"
  ],
  "wuapi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wuaueng.dll": [
    "GetAUOptionsEx",
    "WUAutoUpdateAtShutdown",
    "RegisterServiceVersion",
    "ServiceHandler",
    "GeneralizeForImaging",
    "DllMain",
    "ServiceMain",
    "WUServiceMain",
    "WUCheckForUpdatesAtShutdown",
    "GetEngineStatusInfo",
    "DllInstall",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wucltux.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wudriver.dll": [
    "OpenCDMContext",
    "LogDriverNotFound",
    "QueryDetectionFiles",
    "CancelCDMOperation",
    "DownloadUpdatedFiles",
    "DownloadIsInternetAvailable",
    "OpenCDMContextEx",
    "FindMatchingDriver",
    "DetFilesDownloaded",
    "CloseCDMContext"
  ],
  "wups.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wups2.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wushareduxresources.dll": "No exports",
  "wuwebv.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wvc.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "wwancfg.dll": [
    "GetResourceString",
    "InitHelperDll"
  ],
  "wwanconn.dll": [
    "DllCanUnloadNow",
    "DllMain",
    "DllGetClassObject"
  ],
  "wwaninst.dll": [
    "WwanDeviceClassCoInstaller"
  ],
  "wwanmm.dll": [
    "DllCanUnloadNow",
    "StartDiagnosticsW",
    "DllGetClassObject"
  ],
  "wwanprotdim.dll": [
    "DimInitialize"
  ],
  "wwansvc.dll": [
    "WwanSvcMain",
    "SvchostPushServiceGlobals"
  ],
  "wwapi.dll": [
    "Wwan2OpenDeviceServiceDataSession",
    "Wwan2CloseHandle",
    "WwanScan",
    "WwanCloseHandle",
    "WwanAllocateMemory",
    "Wwan2OpenDeviceServiceCommandSession",
    "Wwan2QueryInterfaces",
    "WwanSetProfileMetaData",
    "WwanRegister",
    "Wwan2CloseDeviceServiceDataSession",
    "Wwan2SendDeviceServiceCommand",
    "WwanSetSmsConfiguration",
    "WwanUssdRequest",
    "WwanSmsRead",
    "WwanSmsDelete",
    "WwanGetProfileIstream",
    "WwanGetProfileHomeProviderName",
    "WwanEnumerateInterfaces",
    "Wwan2EnumerateDeviceServices",
    "WwanAuthChallenge",
    "WwanGetProfileIndex",
    "WwanConnect",
    "WwanFreeMemory",
    "Wwan2CloseDeviceServiceCommandSession",
    "WwanGetProfileList",
    "WwanDeleteProfile",
    "Wwan2OpenHandle",
    "WwanGetProfileMetaData",
    "WwanSetInterface",
    "WwanSetProfile",
    "Wwan2WriteDeviceServiceData",
    "WwanRegisterNotification",
    "Wwan2QueryDeviceServiceSupportedCommands",
    "WwanQueryInterface",
    "WwanConvertToInterfaceObject",
    "WwanDisconnect",
    "WwanGetProfile",
    "Wwan2RegisterNotification",
    "Wwan2SubscribePowerStateEvents",
    "WwanConnectByActivityId",
    "WwanSmsSend",
    "WwanOpenHandle"
  ],
  "XAudio2_8.dll": [
    "CreateFX",
    "CreateAudioVolumeMeter",
    "X3DAudioCalculate",
    "X3DAudioInitialize",
    "XAudio2Create",
    "CreateAudioReverb"
  ],
  "XInput1_4.dll": [
    "XInputGetState",
    "XInputGetBatteryInformation",
    "XInputGetKeystroke",
    "XInputGetCapabilities",
    "DllMain",
    "XInputSetState",
    "XInputGetAudioDeviceIds",
    "XInputEnable"
  ],
  "XInput9_1_0.dll": [
    "XInputGetDSoundAudioDeviceGuids",
    "XInputGetState",
    "XInputGetCapabilities",
    "DllMain",
    "XInputSetState"
  ],
  "XPSSHHDR.dll": [
    "DllCanUnloadNow",
    "DllMain",
    "DllGetClassObject"
  ],
  "XpsFilt.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "XpsGdiConverter.dll": "No exports",
  "XpsPrint.dll": [
    "StartXpsPrintJob",
    "StartXpsPrintJob1",
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "XpsRasterService.dll": [
    "DllCanUnloadNow",
    "DrvPopulateFilterServices"
  ],
  "xmlfilter.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "xmllite.dll": [
    "CreateXmlReader",
    "CreateXmlWriter",
    "CreateXmlWriterOutputWithEncodingName",
    "CreateXmlReaderInputWithEncodingName",
    "CreateXmlWriterOutputWithEncodingCodePage",
    "CreateXmlReaderInputWithEncodingCodePage"
  ],
  "xmlprovi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "xolehlp.dll": [
    "DtcGetTransactionManagerEx",
    "ThawLocalTransactionManagers",
    "DtcGetTransactionManager",
    "DtcGetTransactionManagerExW",
    "GetDtcLocaleResourceHandle",
    "DtcGetTransactionManagerExA",
    "DtcGetTransactionManagerC",
    "FreezeLocalTransactionManagers"
  ],
  "xpsservices.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "xpssvcs.dll": [
    "DDLogHelper",
    "CreateContainerConsumer",
    "CreateReachPackageReceiver",
    "CreateStreamReceiverOnFileHandle",
    "CreateStreamSenderOnFileHandle",
    "CreateContainerProducer",
    "CreateStreamSenderOnIStream",
    "CreateSeekableBuffer",
    "CreateReachPackageSender"
  ],
  "xwizards.dll": [
    "XWRegisterHost",
    "XWRegisterPageWithPage",
    "XWRegisterTaskWithHost",
    "XWUnregisterPage",
    "XWRegisterPageWithTask",
    "XWUnregisterTaskPageLink",
    "RunPropertySheetW",
    "ProcessXMLFileA",
    "XWUnregisterHost",
    "RunWizardA",
    "XWProcessXMLFile",
    "ResetRegistrationA",
    "XWUnregisterHostTaskLink",
    "DllCanUnloadNow",
    "XWUnregisterPagesLink",
    "ResetRegistrationW",
    "RunWizardW",
    "DllGetClassObject",
    "ProcessXMLFileW",
    "RunPropertySheetA",
    "XWUnregisterTask"
  ],
  "xwreg.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "xwtpdui.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "xwtpw32.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "zipfldr.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "RouteTheCall"
  ]
}