{
  "ACCTRES.dll": "No exports",
  "AUDIOKSE.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "ActionCenter.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "ActionCenterCPL.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "ActionQueue.dll": [
    "GenerateActionQueue",
    "ProcessActionQueue"
  ],
  "AdmTmpl.dll": [
    "CreateCmtStoreObject",
    "DllCanUnloadNow",
    "CreateParserObject",
    "DllGetClassObject"
  ],
  "AltTab.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "AppIdPolicyEngineApi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "Apphlpdm.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "AudioEng.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "AERT_Allocate",
    "DllGetClassObject",
    "DllRegisterServer",
    "AERT_Free"
  ],
  "AudioSes.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "AuditNativeSnapIn.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "AuditPolicyGPInterop.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "AuthFWGP.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "AuthFWSnapin.dll": "No exports",
  "AuthFWWizFwk.dll": "No exports",
  "AuxiliaryDisplayApi.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "AuxiliaryDisplayClassInstaller.dll": [
    "WindowsSideShowClassInstaller",
    "WindowsSideShow_Sysprep_Generalize"
  ],
  "AuxiliaryDisplayCpl.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "AuxiliaryDisplayDriverLib.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "Microsoft_WDF_UMDF_Version",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "AuxiliaryDisplayServices.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "Microsoft_WDF_UMDF_Version",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "AxInstSv.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "AzSqlExt.dll": [
    "xp_AzManRemoveUserFromRole",
    "xp_AzManDeleteRole",
    "__GetXpVersion",
    "AzGenerateAudit",
    "xp_AzManAddUserToRole",
    "xp_AzManAddRole"
  ],
  "aaclient.dll": [
    "OpenKeyReader",
    "LoadClientAdapter",
    "OpenKeyReaderWriter",
    "g_fnStartTransport"
  ],
  "accessibilitycpl.dll": [
    "DllInstall",
    "DllUnregisterServer",
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "acledit.dll": [
    "SedSystemAclEditor",
    "EditOwnerInfo",
    "DllMain",
    "SedTakeOwnership",
    "EditAuditInfo",
    "SedDiscretionaryAclEditor",
    "EditPermissionInfo",
    "FMExtensionProcW"
  ],
  "aclui.dll": [
    "EditSecurity",
    "EditSecurityAdvanced",
    "IID_ISecurityInformation",
    "CreateSecurityPage"
  ],
  "acppage.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "GetExeFromLnk"
  ],
  "acproxy.dll": [
    "PerformAutochkOperations"
  ],
  "activeds.dll": [
    "ADsBuildVarArrayStr",
    "ADsSetLastError",
    "ADsGetObject",
    "ADsOpenObject",
    "SecurityDescriptorToBinarySD",
    "PropVariantToAdsType2",
    "ADsEnumerateNext",
    "PropVariantToAdsType",
    "AdsTypeToPropVariant",
    "ConvertSecDescriptorToVariant",
    "ADsEncodeBinaryData",
    "ADsFreeEnumerator",
    "ADsGetLastError",
    "AdsTypeToPropVariant2",
    "AllocADsStr",
    "ReallocADsMem",
    "ConvertSecurityDescriptorToSecDes",
    "AdsFreeAdsValues",
    "ReallocADsStr",
    "ADsDecodeBinaryData",
    "DllCanUnloadNow",
    "FreeADsStr",
    "FreeADsMem",
    "ADsBuildVarArrayInt",
    "BinarySDToSecurityDescriptor",
    "ConvertTrusteeToSid",
    "DllGetClassObject",
    "ADsBuildEnumerator",
    "AllocADsMem"
  ],
  "actxprxy.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "admparse.dll": [
    "AdmFinished",
    "GetFontInfo",
    "AdmInit",
    "AdmReset",
    "AdmSaveData",
    "DllMain",
    "ResetAdmDirtyFlag",
    "CreateAdmUi",
    "CheckDuplicateKeys",
    "IsAdmDirty",
    "AdmClose",
    "GetAdmCategories"
  ],
  "adprovider.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "adsldp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "adsldpc.dll": [
    "MapLDAPTypeToADSType",
    "IsGCNamespace",
    "ConvertSidToU2Trustee",
    "public: long __thiscall CLexer::InitializePath(unsigned short *)",
    "ADsCreateAttributeDefinition",
    "LdapDeleteExtS",
    "BuildADsPathFromLDAPPath2",
    "ADsEnumAttributes",
    "ADsFreeColumn",
    "Component",
    "SchemaGetStringsFromStringTable",
    "LdapGetSyntaxOfAttributeOnServer",
    "public: void __thiscall CLexer::SetAtDisabler(int)",
    "ADsCreateDSObject",
    "LdapTypeFreeLdapModList",
    "ADsGetNextColumnName",
    "LdapTypeToAdsTypeDNWithString",
    "LdapModDnS",
    "LdapAddExtS",
    "LdapGetDn",
    "LdapDeleteS",
    "LdapTypeToAdsTypeGeneralizedTime",
    "BuildADsParentPathFromObjectInfo",
    "ADsHelperGetCurrentRowMessage",
    "ADsObject",
    "ADsDeleteAttributeDefinition",
    "ADsGetNextRow",
    "PathName",
    "LdapCountEntries",
    "LdapGetSchemaObjectCount",
    "LdapCreatePageControl",
    "LdapcSetStickyServer",
    "ADsDecodeBinaryData",
    "AdsTypeToLdapTypeCopyConstruct",
    "LdapSearchAbandonPage",
    "GetDomainDNSNameForDomain",
    "LdapGetValuesLen",
    "LdapInitializeSearchPreferences",
    "AllocADsMem",
    "ADSIOpenDSObject",
    "ConvertU2TrusteeToSid",
    "LdapMsgFree",
    "ADSICreateDSObject",
    "LdapSearch",
    "ADSICloseDSObject",
    "ReadSecurityDescriptorControlType",
    "ADsGetObjectAttributes",
    "SortAndRemoveDuplicateOIDs",
    "ADSIExecuteSearch",
    "LdapTypeFreeLdapModObject",
    "LdapControlFree",
    "ADsEncodeBinaryData",
    "ADSIGetFirstRow",
    "public: void __thiscall CLexer::SetFSlashDisabler(int)",
    "ADsGetPreviousRow",
    "LdapCloseObject",
    "BuildADsParentPath",
    "ReallocADsMem",
    "ADSIGetNextColumnName",
    "ADsDeleteDSObject",
    "LdapGetSubSchemaSubEntryPath",
    "LdapSearchS",
    "LdapCrackUserDNtoNTLMUser2",
    "ADsAbandonSearch",
    "ADsGetColumn",
    "ADsSetSearchPreference",
    "public: __thiscall CLexer::~CLexer(void)",
    "LdapGetValues",
    "LdapOpenObject2",
    "FreeObjectInfo",
    "ADsCreateClassDefinition",
    "ADsWriteAttributeDefinition",
    "ADSIModifyRdn",
    "ADSISetSearchPreference",
    "BuildADsParentPathFromObjectInfo2",
    "AdsTypeToLdapTypeCopyTime",
    "LdapCompareExt",
    "LdapcKeepHandleAround",
    "SchemaGetClassInfo",
    "ADSIAbandonSearch",
    "ADsSetLastError",
    "LdapReadAttributeFast",
    "AdsTypeToLdapTypeCopyDNWithString",
    "LdapControlsFree",
    "LdapTypeBinaryToString",
    "AdsTypeToLdapTypeCopyDNWithBinary",
    "BuildLDAPPathFromADsPath2",
    "ADSIGetObjectAttributes",
    "AdsTypeToLdapTypeCopyGeneralizedTime",
    "GetServerAndPort",
    "LdapModifyExtS",
    "GetLDAPTypeName",
    "ADSIPrint",
    "BerEncodingQuotaControl",
    "UnMarshallLDAPToLDAPSynID",
    "LdapReadAttribute",
    "LdapFirstAttribute",
    "LdapTypeCopyConstruct",
    "ADsGetLastError",
    "BuildLDAPPathFromADsPath",
    "FindSearchTableIndex",
    "LdapMakeSchemaCacheObsolete",
    "SchemaGetPropertyInfoByIndex",
    "SchemaIsClassAContainer",
    "SchemaGetObjectCount",
    "SchemaGetClassInfoByIndex",
    "SchemaClose",
    "BuildADsPathFromParent",
    "FreeADsMem",
    "LdapParseResult",
    "LdapReadAttribute2",
    "ADSIGetNextRow",
    "ADsCloseSearchHandle",
    "LdapGetSyntaxIdOfAttribute",
    "ConvertSidToString",
    "ReadServerSupportsIsADControl",
    "LdapFirstEntry",
    "ADSISetObjectAttributes",
    "LdapValueFreeLen",
    "LdapSearchST",
    "ADSIFreeColumn",
    "ADSIGetPreviousRow",
    "LdapTypeToAdsTypeCopyConstruct",
    "LdapOpenObject",
    "LdapSearchInitPage",
    "BerBvFree",
    "ADSICloseSearchHandle",
    "ADsGetFirstRow",
    "ADsDeleteClassDefinition",
    "LdapCacheAddRef",
    "LdapMemFree",
    "public: long __thiscall CLexer::GetNextToken(unsigned short *,unsigned long *)",
    "ReadPagingSupportedAttr",
    "LdapGetNextPageS",
    "ADSIGetColumn",
    "FindEntryInSearchTable",
    "LdapTypeToAdsTypeUTCTime",
    "public: __thiscall CLexer::CLexer(void)",
    "MapADSTypeToLDAPType",
    "AllocADsStr",
    "SchemaGetSyntaxOfAttribute",
    "LdapNextAttribute",
    "GetSyntaxOfAttribute",
    "LdapResult",
    "LdapSearchExtS",
    "LdapTypeToAdsTypeDNWithBinary",
    "LdapAddS",
    "ReadServerSupportsIsADAMControl",
    "InitObjectInfo",
    "ADsExecuteSearch",
    "ADsWriteClassDefinition",
    "SchemaAddRef",
    "AdsTypeFreeAdsObjects",
    "ChangeSeparator",
    "LdapTypeFreeLdapObjects",
    "LdapValueFree",
    "ReallocADsStr",
    "LdapAttributeFree",
    "ADSIDeleteDSObject",
    "LdapNextEntry",
    "GetDisplayName",
    "public: void __thiscall CLexer::SetExclaimnationDisabler(int)",
    "ADsEnumClasses",
    "LdapParsePageControl",
    "SchemaGetPropertyInfo",
    "ADsCreateDSObjectExt",
    "FreeADsStr",
    "LdapRenameExtS",
    "SchemaOpen",
    "LdapModifyS",
    "intcmp",
    "GetDefaultServer",
    "LdapIsClassNameValidOnServer",
    "BuildADsPathFromLDAPPath",
    "ADsSetObjectAttributes"
  ],
  "adsmsext.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "adsnt.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "adtschema.dll": "No exports",
  "advapi32.dll": [
    "GetSidLengthRequired",
    "AreAnyAccessesGranted",
    "WmiSetSingleInstanceA",
    "OpenThreadToken",
    "GetManagedApplications",
    "SetSecurityDescriptorGroup",
    "QueryAllTracesA",
    "EventWriteStartScenario",
    "CryptVerifySignatureW",
    "RegisterWaitChainCOMCallback",
    "EventRegister",
    "RegQueryReflectionKey",
    "SystemFunction015",
    "AuditLookupSubCategoryNameW",
    "CredMarshalCredentialW",
    "EnumDependentServicesW",
    "CredpConvertCredential",
    "LsaSetQuotasForAccount",
    "ConvertStringSidToSidA",
    "EventWriteTransfer",
    "GetAce",
    "ObjectCloseAuditAlarmW",
    "CloseEncryptedFileRaw",
    "ConvertStringSidToSidW",
    "CryptSetKeyParam",
    "RegSaveKeyExW",
    "SetServiceObjectSecurity",
    "CryptSetProviderExW",
    "RegOpenUserClassesRoot",
    "CryptDestroyKey",
    "GetMultipleTrusteeOperationW",
    "LsaSetForestTrustInformation",
    "AccessCheckByTypeResultListAndAuditAlarmByHandleW",
    "GetInheritanceSourceA",
    "AuditQueryGlobalSaclA",
    "ConvertSidToStringSidA",
    "LogonUserExExW",
    "GetSecurityDescriptorRMControl",
    "I_QueryTagInformation",
    "SystemFunction002",
    "SystemFunction033",
    "AllocateAndInitializeSid",
    "SystemFunction005",
    "RegOpenCurrentUser",
    "CryptGenRandom",
    "QueryServiceConfigA",
    "CryptDuplicateKey",
    "RegQueryMultipleValuesA",
    "NotifyServiceStatusChangeA",
    "GetTrusteeTypeW",
    "MD5Final",
    "AuditQueryGlobalSaclW",
    "EnumServicesStatusExW",
    "ControlTraceA",
    "ImpersonateSelf",
    "SetEntriesInAuditListA",
    "AuditLookupCategoryNameW",
    "LsaQueryInformationPolicy",
    "CryptImportKey",
    "WmiMofEnumerateResourcesW",
    "RegGetKeySecurity",
    "SystemFunction010",
    "BuildTrusteeWithNameA",
    "AddAccessAllowedObjectAce",
    "BuildExplicitAccessWithNameW",
    "SystemFunction014",
    "GetInformationCodeAuthzLevelW",
    "CancelOverlappedAccess",
    "MakeAbsoluteSD",
    "AuditLookupCategoryNameA",
    "LookupPrivilegeNameW",
    "FreeSid",
    "EventProviderEnabled",
    "ComputeAccessTokenFromCodeAuthzLevel",
    "ConvertSDToStringSDRootDomainW",
    "WmiFreeBuffer",
    "AddAccessAllowedAceEx",
    "DuplicateEncryptionInfoFile",
    "MakeSelfRelativeSD",
    "BuildSecurityDescriptorW",
    "RegCreateKeyExA",
    "PerfStopProvider",
    "GetThreadWaitChain",
    "RegEnumKeyExW",
    "SystemFunction019",
    "SystemFunction013",
    "NotifyServiceStatusChangeW",
    "SetEncryptedFileMetadata",
    "LsaOpenAccount",
    "QueryTraceW",
    "ElfCloseEventLog",
    "LsaICLookupNames",
    "LsaSetSecret",
    "CredWriteDomainCredentialsA",
    "InitiateSystemShutdownW",
    "CredpEncodeCredential",
    "CloseServiceHandle",
    "RegQueryValueExW",
    "CryptDestroyHash",
    "RegQueryValueA",
    "PerfSetULongLongCounterValue",
    "SaferiRecordEventLogEntry",
    "EnumerateTraceGuids",
    "OpenBackupEventLogA",
    "RegLoadAppKeyW",
    "CredFindBestCredentialA",
    "AddAuditAccessAce",
    "AuditSetPerUserPolicy",
    "RegQueryValueExA",
    "SetKernelObjectSecurity",
    "ConvertToAutoInheritPrivateObjectSecurity",
    "WmiReceiveNotificationsA",
    "PerfDeleteCounters",
    "RegDeleteKeyExW",
    "BackupEventLogW",
    "SystemFunction026",
    "AuditEnumerateSubCategories",
    "LsaICLookupSidsWithCreds",
    "LsaCreateSecret",
    "RegSetKeyValueW",
    "QueryServiceStatusEx",
    "MD4Final",
    "ChangeServiceConfig2W",
    "AccessCheckByType",
    "CryptEncrypt",
    "GetNamedSecurityInfoExA",
    "WmiSetSingleItemA",
    "GetMultipleTrusteeW",
    "TraceMessage",
    "SystemFunction021",
    "SystemFunction016",
    "CredMarshalCredentialA",
    "CredReadByTokenHandle",
    "ImpersonateLoggedOnUser",
    "GetNamedSecurityInfoExW",
    "SetUserFileEncryptionKeyEx",
    "WmiMofEnumerateResourcesA",
    "CreateCodeAuthzLevel",
    "AuditSetGlobalSaclW",
    "CryptEnumProviderTypesW",
    "GetWindowsAccountDomainSid",
    "ElfFlushEventLog",
    "SetNamedSecurityInfoA",
    "CryptSetProviderW",
    "SetPrivateObjectSecurityEx",
    "PerfIncrementULongLongCounterValue",
    "CreatePrivateObjectSecurityEx",
    "UnregisterTraceGuids",
    "RegisterTraceGuidsA",
    "ReadEventLogW",
    "SystemFunction024",
    "SetNamedSecurityInfoW",
    "CreateProcessAsUserA",
    "LsaICLookupNamesWithCreds",
    "LsaEnumerateTrustedDomainsEx",
    "WmiQueryAllDataMultipleW",
    "SystemFunction030",
    "EventWriteEndScenario",
    "AuditSetSystemPolicy",
    "PerfDeleteInstance",
    "RegDeleteValueA",
    "SetInformationCodeAuthzPolicyW",
    "GetLocalManagedApplications",
    "LsaLookupPrivilegeName",
    "LookupPrivilegeDisplayNameA",
    "RegGetValueW",
    "GetTraceLoggerHandle",
    "ImpersonateAnonymousToken",
    "SetFileSecurityA",
    "WmiCloseBlock",
    "LookupSecurityDescriptorPartsA",
    "OpenServiceA",
    "GetTraceEnableFlags",
    "CreateTraceInstanceId",
    "LsaQueryTrustedDomainInfoByName",
    "GetNumberOfEventLogRecords",
    "GetTrusteeNameW",
    "EventAccessQuery",
    "AddMandatoryAce",
    "RegConnectRegistryExW",
    "LsaFreeMemory",
    "CredpEncodeSecret",
    "DeleteAce",
    "SetThreadToken",
    "RegLoadMUIStringW",
    "A_SHAUpdate",
    "CryptGetUserKey",
    "QueryServiceConfig2W",
    "GetSecurityDescriptorGroup",
    "RegEnumValueW",
    "ReportEventA",
    "SetSecurityInfoExA",
    "GetInformationCodeAuthzPolicyW",
    "RegReplaceKeyW",
    "GetMultipleTrusteeA",
    "CryptEnumProvidersA",
    "StartServiceCtrlDispatcherW",
    "GetUserNameW",
    "LogonUserExW",
    "InitializeSid",
    "LsaLookupNames",
    "SystemFunction028",
    "AddAce",
    "SystemFunction007",
    "AuditQuerySystemPolicy",
    "GetFileSecurityW",
    "CryptHashSessionKey",
    "MD5Update",
    "SetEntriesInAclA",
    "IsValidRelativeSecurityDescriptor",
    "GetAccessPermissionsForObjectA",
    "TreeSetNamedSecurityInfoA",
    "BuildTrusteeWithSidW",
    "OpenEncryptedFileRawW",
    "ControlService",
    "OpenSCManagerA",
    "LsaLookupNames2",
    "RegQueryMultipleValuesW",
    "AccessCheckByTypeAndAuditAlarmA",
    "SetSecurityDescriptorDacl",
    "GetTokenInformation",
    "DestroyPrivateObjectSecurity",
    "SaferGetLevelInformation",
    "CryptEnumProviderTypesA",
    "PerfSetULongCounterValue",
    "EventWriteEx",
    "ProcessIdleTasks",
    "RegOpenKeyW",
    "GetSecurityDescriptorSacl",
    "CredRenameW",
    "CryptEnumProvidersW",
    "ObjectDeleteAuditAlarmA",
    "SetInformationCodeAuthzLevelW",
    "RegisterTraceGuidsW",
    "WmiOpenBlock",
    "WmiQueryAllDataW",
    "EnableTraceEx2",
    "I_ScSetServiceBitsA",
    "ConvertStringSDToSDRootDomainA",
    "TrusteeAccessToObjectW",
    "ConvertSecurityDescriptorToAccessW",
    "GetEventLogInformation",
    "QueryAllTracesW",
    "LsaSetInformationTrustedDomain",
    "WmiSetSingleInstanceW",
    "StartServiceA",
    "AuditLookupSubCategoryNameA",
    "RegDisablePredefinedCacheEx",
    "GetSecurityInfo",
    "GetLengthSid",
    "StartServiceCtrlDispatcherA",
    "I_ScSetServiceBitsW",
    "RegEnableReflectionKey",
    "PerfEnumerateCounterSetInstances",
    "CredUnmarshalCredentialA",
    "SystemFunction004",
    "OpenTraceW",
    "FreeEncryptedFileMetadata",
    "RegSaveKeyA",
    "SaferGetPolicyInformation",
    "LogonUserExA",
    "PerfAddCounters",
    "SystemFunction003",
    "TreeResetNamedSecurityInfoW",
    "SystemFunction011",
    "EnumServicesStatusW",
    "LsaOpenTrustedDomainByName",
    "RegisterIdleTask",
    "CryptReleaseContext",
    "CredUnmarshalCredentialW",
    "ChangeServiceConfigA",
    "ElfOpenEventLogA",
    "ConvertStringSecurityDescriptorToSecurityDescriptorA",
    "RegNotifyChangeKeyValue",
    "SetSecurityDescriptorControl",
    "SystemFunction031",
    "UsePinForEncryptedFilesA",
    "CryptGetKeyParam",
    "UpdateTraceW",
    "QueryServiceConfigW",
    "ElfOpenBackupEventLogW",
    "FlushTraceW",
    "GetSidIdentifierAuthority",
    "ElfReportEventW",
    "EncryptionDisable",
    "LsaSetInformationPolicy",
    "RegSetValueExA",
    "EventActivityIdControl",
    "BuildTrusteeWithNameW",
    "GetTrusteeTypeA",
    "MD4Update",
    "RegLoadKeyW",
    "CredProtectW",
    "CryptVerifySignatureA",
    "WmiQueryGuidInformation",
    "BuildTrusteeWithSidA",
    "RegGetValueA",
    "AuditLookupCategoryGuidFromCategoryId",
    "EqualDomainSid",
    "ProcessTrace",
    "BackupEventLogA",
    "CloseCodeAuthzLevel",
    "IsWellKnownSid",
    "ConvertSecurityDescriptorToStringSecurityDescriptorW",
    "SaferCloseLevel",
    "ClearEventLogW",
    "GetNamedSecurityInfoW",
    "LsaQuerySecret",
    "CreateProcessWithTokenW",
    "SaferRecordEventLogEntry",
    "SystemFunction009",
    "RegSetKeyValueA",
    "RegLoadAppKeyA",
    "BuildTrusteeWithObjectsAndNameW",
    "GetAuditedPermissionsFromAclA",
    "ElfOpenEventLogW",
    "RegFlushKey",
    "SetSecurityDescriptorRMControl",
    "WmiSetSingleItemW",
    "ElfOpenBackupEventLogA",
    "SaferiPopulateDefaultsInRegistry",
    "PrivilegeCheck",
    "WmiEnumerateGuids",
    "WmiQuerySingleInstanceMultipleA",
    "RegDisableReflectionKey",
    "PerfCloseQueryHandle",
    "SystemFunction020",
    "InitiateSystemShutdownExA",
    "AbortSystemShutdownA",
    "ReportEventW",
    "CredEncryptAndMarshalBinaryBlob",
    "ControlServiceExA",
    "CryptHashData",
    "RegDeleteTreeA",
    "RegReplaceKeyA",
    "CredWriteDomainCredentialsW",
    "CryptExportKey",
    "LsaOpenSecret",
    "RegSaveKeyW",
    "UninstallApplication",
    "CryptGetHashParam",
    "OpenSCManagerW",
    "RegDeleteValueW",
    "LsaCreateTrustedDomain",
    "InitializeSecurityDescriptor",
    "LookupPrivilegeDisplayNameW",
    "BuildImpersonateTrusteeA",
    "CryptGenKey",
    "GetServiceKeyNameW",
    "CredIsProtectedA",
    "RegDeleteKeyTransactedW",
    "A_SHAFinal",
    "CryptSignHashW",
    "RegConnectRegistryExA",
    "StopTraceA",
    "A_SHAInit",
    "ElfBackupEventLogFileW",
    "CredProfileUnloaded",
    "AccessCheckAndAuditAlarmA",
    "AddAccessDeniedAce",
    "LsaAddPrivilegesToAccount",
    "SystemFunction018",
    "WmiDevInstToInstanceNameA",
    "ConvertSidToStringSidW",
    "ElfReportEventA",
    "LsaSetTrustedDomainInformation",
    "LsaSetDomainInformationPolicy",
    "EventWriteString",
    "SetSecurityDescriptorOwner",
    "LookupPrivilegeNameA",
    "CreateWellKnownSid",
    "CryptAcquireContextA",
    "FindFirstFreeAce",
    "CryptSignHashA",
    "AuditComputeEffectivePolicyBySid",
    "GetSecurityDescriptorDacl",
    "CredGetSessionTypes",
    "RegUnLoadKeyA",
    "PerfSetCounterSetInfo",
    "GetOldestEventLogRecord",
    "ImpersonateNamedPipeClient",
    "MD5Init",
    "PerfQueryCounterData",
    "PerfQueryCounterInfo",
    "BuildSecurityDescriptorA",
    "FileEncryptionStatusW",
    "AdjustTokenPrivileges",
    "QueryServiceLockStatusW",
    "ReadEncryptedFileRaw",
    "CredDeleteW",
    "SystemFunction001",
    "RegRestoreKeyW",
    "SetUserFileEncryptionKey",
    "RegDeleteKeyExA",
    "ElfReadEventLogA",
    "ConvertAccessToSecurityDescriptorA",
    "LsaRemovePrivilegesFromAccount",
    "AccessCheckByTypeResultListAndAuditAlarmW",
    "RegDeleteKeyA",
    "ObjectPrivilegeAuditAlarmA",
    "ConvertSecurityDescriptorToAccessNamedW",
    "TreeResetNamedSecurityInfoA",
    "ConvertStringSDToSDDomainA",
    "ElfRegisterEventSourceA",
    "RegConnectRegistryW",
    "AccessCheckByTypeResultList",
    "UnregisterIdleTask",
    "I_ScValidatePnPService",
    "IsValidSecurityDescriptor",
    "WmiQueryAllDataMultipleA",
    "SetAclInformation",
    "LsaICLookupSids",
    "LsaQueryDomainInformationPolicy",
    "ElfChangeNotify",
    "LsaEnumerateAccounts",
    "WmiDevInstToInstanceNameW",
    "IsValidSid",
    "LookupPrivilegeValueW",
    "AbortSystemShutdownW",
    "AllocateLocallyUniqueId",
    "LsaDeleteTrustedDomain",
    "AddConditionalAce",
    "LogonUserA",
    "LookupAccountNameA",
    "MSChapSrvChangePassword",
    "FlushEfsCache",
    "CredEnumerateA",
    "LsaCreateAccount",
    "CredGetTargetInfoW",
    "QueryServiceStatus",
    "SystemFunction023",
    "I_ScSendPnPMessage",
    "GetAccessPermissionsForObjectW",
    "RegOpenKeyTransactedW",
    "SaferIdentifyLevel",
    "LsaGetSystemAccessAccount",
    "OpenTraceA",
    "GetCurrentHwProfileA",
    "GetSecurityDescriptorLength",
    "ObjectOpenAuditAlarmA",
    "ElfReadEventLogW",
    "WmiQuerySingleInstanceMultipleW",
    "AddAuditAccessAceEx",
    "PerfOpenQueryHandle",
    "CredDeleteA",
    "PerfQueryCounterSetRegistrationInfo",
    "GetEncryptedFileMetadata",
    "RegRestoreKeyA",
    "CredpDecodeCredential",
    "DuplicateToken",
    "SaferiIsExecutableFileType",
    "RegRenameKey",
    "RegCloseKey",
    "GetManagedApplicationCategories",
    "WmiQuerySingleInstanceA",
    "TrusteeAccessToObjectA",
    "MakeAbsoluteSD2",
    "SystemFunction006",
    "AddAccessDeniedObjectAce",
    "EnableTraceEx",
    "ElfDeregisterEventSource",
    "LsaSetTrustedDomainInfoByName",
    "LsaGetUserName",
    "BuildExplicitAccessWithNameA",
    "CredRestoreCredentials",
    "EncryptedFileKeyInfo",
    "SaferiCompareTokenLevels",
    "RegCreateKeyTransactedA",
    "GetFileSecurityA",
    "ElfOldestRecord",
    "IsTextUnicode",
    "CredReadDomainCredentialsA",
    "AddAccessAllowedAce",
    "CryptDuplicateHash",
    "SystemFunction022",
    "OpenProcessToken",
    "EventAccessRemove",
    "RegDeleteKeyValueW",
    "ObjectOpenAuditAlarmW",
    "RegOpenKeyA",
    "QueryTraceA",
    "NotifyServiceStatusChange",
    "GetEffectiveRightsFromAclW",
    "RegisterServiceCtrlHandlerW",
    "OpenEventLogW",
    "RegDeleteKeyTransactedA",
    "CryptGetProvParam",
    "CommandLineFromMsiDescriptor",
    "LsaCreateTrustedDomainEx",
    "SystemFunction027",
    "SetSecurityInfoExW",
    "WmiFileHandleToInstanceNameW",
    "RegOverridePredefKey",
    "TraceEventInstance",
    "CreatePrivateObjectSecurity",
    "NotifyChangeEventLog",
    "GetSecurityInfoExW",
    "CredIsMarshaledCredentialW",
    "GetInheritanceSourceW",
    "RegEnumKeyW",
    "CredWriteW",
    "LsaDelete",
    "BuildImpersonateExplicitAccessWithNameW",
    "GetTrusteeFormW",
    "StopTraceW",
    "EnumDependentServicesA",
    "CryptGetDefaultProviderW",
    "RegLoadKeyA",
    "GetPrivateObjectSecurity",
    "GetUserNameA",
    "AuditQueryPerUserPolicy",
    "CredReadA",
    "RegSetValueA",
    "EnumerateTraceGuidsEx",
    "CloseTrace",
    "OpenEncryptedFileRawA",
    "CredFindBestCredentialW",
    "WmiNotificationRegistrationA",
    "EventWrite",
    "CryptDecrypt",
    "RegisterServiceCtrlHandlerExA",
    "SaferiSearchMatchingHashRules",
    "I_ScPnPGetServiceName",
    "GetServiceDisplayNameW",
    "EncryptFileW",
    "AccessCheckByTypeAndAuditAlarmW",
    "LockServiceDatabase",
    "RegDisablePredefinedCache",
    "RegDeleteKeyW",
    "SaferComputeTokenFromLevel",
    "CryptGetDefaultProviderA",
    "ConvertAccessToSecurityDescriptorW",
    "RevertToSelf",
    "I_ScSendTSMessage",
    "SystemFunction040",
    "RegEnumKeyA",
    "PerfDecrementULongCounterValue",
    "LsaOpenTrustedDomain",
    "MSChapSrvChangePassword2",
    "GetMultipleTrusteeOperationA",
    "AdjustTokenGroups",
    "LsaStorePrivateData",
    "TreeSetNamedSecurityInfoW",
    "ElfNumberOfRecords",
    "GetKernelObjectSecurity",
    "SystemFunction012",
    "SystemFunction041",
    "SetServiceBits",
    "PrivilegedServiceAuditAlarmW",
    "LsaSetSecurityObject",
    "DeleteService",
    "SetTokenInformation",
    "AuditEnumerateCategories",
    "RegOpenKeyExW",
    "CopySid",
    "PerfQueryInstance",
    "ReadEventLogA",
    "ConvertSecurityDescriptorToStringSecurityDescriptorA",
    "DecryptFileA",
    "UnlockServiceDatabase",
    "PerfStartProviderEx",
    "AreAllAccessesGranted",
    "AuditLookupCategoryIdFromCategoryGuid",
    "CryptContextAddRef",
    "SetServiceStatus",
    "ControlServiceExW",
    "SaferSetLevelInformation",
    "UpdateTraceA",
    "AuditEnumeratePerUserPolicy",
    "LsaAddAccountRights",
    "CredIsProtectedW",
    "InitiateShutdownA",
    "LsaNtStatusToWinError",
    "CreateProcessAsUserW",
    "LsaEnumeratePrivileges",
    "CreateRestrictedToken",
    "RegCreateKeyW",
    "CredBackupCredentials",
    "CryptAcquireContextW",
    "CredpConvertTargetInfo",
    "LsaLookupSids",
    "GetNamedSecurityInfoA",
    "AddAccessDeniedAceEx",
    "AddAuditAccessObjectAce",
    "ConvertSecurityDescriptorToAccessA",
    "GetServiceKeyNameA",
    "LsaQueryTrustedDomainInfo",
    "OpenEventLogA",
    "MD4Init",
    "LsaRemoveAccountRights",
    "ProcessIdleTasksW",
    "IsTokenUntrusted",
    "AuditFree",
    "RegOpenKeyExA",
    "LookupAccountNameW",
    "TraceMessageVa",
    "GetExplicitEntriesFromAclA",
    "CryptSetProviderExA",
    "EnumServicesStatusA",
    "CryptSetProvParam",
    "FreeInheritedFromArray",
    "MapGenericMask",
    "RegSetValueExW",
    "ConvertStringSDToSDDomainW",
    "LsaGetRemoteUserName",
    "TraceSetInformation",
    "InstallApplication",
    "PerfIncrementULongCounterValue",
    "SetPrivateObjectSecurity",
    "CredProfileLoaded",
    "RegCopyTreeW",
    "RegConnectRegistryA",
    "CreateServiceA",
    "RegCreateKeyTransactedW",
    "LsaEnumerateTrustedDomains",
    "IsTokenRestricted",
    "RegisterEventSourceA",
    "GetCurrentHwProfileW",
    "RegSaveKeyExA",
    "GetAuditedPermissionsFromAclW",
    "GetSecurityInfoExA",
    "LsaSetSystemAccessAccount",
    "SystemFunction029",
    "RegSetValueW",
    "RegisterServiceCtrlHandlerExW",
    "RemoveUsersFromEncryptedFile",
    "AccessCheckByTypeResultListAndAuditAlarmByHandleA",
    "LsaEnumerateAccountRights",
    "EnableTrace",
    "CredUnprotectA",
    "LsaOpenPolicy",
    "DeregisterEventSource",
    "LsaLookupPrivilegeValue",
    "SetEntriesInAccessListA",
    "ClearEventLogA",
    "CloseThreadWaitChainSession",
    "CredGetTargetInfoA",
    "ElfBackupEventLogFileA",
    "AuditSetGlobalSaclA",
    "ElfRegisterEventSourceW",
    "StartServiceW",
    "SaferCreateLevel",
    "PerfSetCounterRefValue",
    "LookupAccountSidW",
    "WmiExecuteMethodW",
    "BuildImpersonateTrusteeW",
    "LsaLookupPrivilegeDisplayName",
    "CreateServiceW",
    "RegDeleteTreeW",
    "DecryptFileW",
    "AccessCheckAndAuditAlarmW",
    "DuplicateTokenEx",
    "FreeEncryptionCertificateHashList",
    "ObjectPrivilegeAuditAlarmW",
    "NotifyBootConfigStatus",
    "InitiateShutdownW",
    "ConvertSecurityDescriptorToAccessNamedA",
    "ConvertStringSecurityDescriptorToSecurityDescriptorW",
    "AddUsersToEncryptedFileEx",
    "IsValidAcl",
    "LsaQueryForestTrustInformation",
    "WmiFileHandleToInstanceNameA",
    "RegCopyTreeA",
    "OpenBackupEventLogW",
    "LsaClearAuditLog",
    "ChangeServiceConfigW",
    "PerfEnumerateCounterSet",
    "WmiExecuteMethodA",
    "RegisterServiceCtrlHandlerA",
    "WmiQueryAllDataA",
    "EventUnregister",
    "RegSetKeySecurity",
    "EqualPrefixSid",
    "CredIsMarshaledCredentialA",
    "LsaManageSidNameMapping",
    "SystemFunction017",
    "CredWriteA",
    "UsePinForEncryptedFilesW",
    "RegCreateKeyA",
    "SystemFunction036",
    "OpenThreadWaitChainSession",
    "CryptSetProviderA",
    "LookupAccountSidA",
    "RegEnumValueA",
    "QueryUsersOnEncryptedFile",
    "InitiateSystemShutdownA",
    "CloseEventLog",
    "AccessCheck",
    "ChangeServiceConfig2A",
    "CredProtectA",
    "RegQueryValueW",
    "GetEffectiveRightsFromAclA",
    "I_ScIsSecurityProcess",
    "CredReadW",
    "CryptCreateHash",
    "InitiateSystemShutdownExW",
    "PrivilegedServiceAuditAlarmA",
    "LsaOpenPolicySce",
    "EqualSid",
    "CredReadDomainCredentialsW",
    "RemoveTraceCallback",
    "GetServiceDisplayNameA",
    "QueryRecoveryAgentsOnEncryptedFile",
    "CredFree",
    "GetAclInformation",
    "SystemFunction034",
    "EventEnabled",
    "BuildTrusteeWithObjectsAndSidA",
    "IdentifyCodeAuthzLevelW",
    "RegCreateKeyExW",
    "LookupPrivilegeValueA",
    "SystemFunction032",
    "ControlTraceW",
    "CredRenameA",
    "AccessCheckByTypeResultListAndAuditAlarmA",
    "GetTrusteeFormA",
    "GetSecurityDescriptorControl",
    "InitializeAcl",
    "ObjectDeleteAuditAlarmW",
    "GetTrusteeNameA",
    "SetNamedSecurityInfoExA",
    "LsaClose",
    "SetTraceCallback",
    "ObjectCloseAuditAlarmA",
    "LookupSecurityDescriptorPartsW",
    "FileEncryptionStatusA",
    "LsaEnumerateAccountsWithUserRight",
    "RegUnLoadKeyW",
    "SetEntriesInAuditListW",
    "ElfReportEventAndSourceW",
    "SetSecurityDescriptorSacl",
    "StartTraceA",
    "RegDeleteKeyValueA",
    "WmiQuerySingleInstanceW",
    "GetExplicitEntriesFromAclW",
    "QueryServiceLockStatusA",
    "BuildImpersonateExplicitAccessWithNameA",
    "CredEnumerateW",
    "CredUnprotectW",
    "SetFileSecurityW",
    "EnumServiceGroupW",
    "RegEnumKeyExA",
    "SaferiIsDllAllowed",
    "BuildTrusteeWithObjectsAndSidW",
    "SaferiChangeRegistryScope",
    "PerfCreateInstance",
    "EnumServicesStatusExA",
    "CreateProcessWithLogonW",
    "FreeEncryptedFileKeyInfo",
    "PerfStartProvider",
    "RegLoadMUIStringA",
    "LsaGetQuotasForAccount",
    "SystemFunction008",
    "AddUsersToEncryptedFile",
    "RegisterEventSourceW",
    "CreatePrivateObjectSecurityWithMultipleInheritance",
    "QueryServiceConfig2A",
    "RegQueryInfoKeyW",
    "GetOverlappedAccessResults",
    "ElfClearEventLogFileA",
    "LsaQueryInfoTrustedDomain",
    "AuditQuerySecurity",
    "PerfDecrementULongLongCounterValue",
    "OpenServiceW",
    "SaferSetPolicyInformation",
    "TraceEvent",
    "SetEntriesInAccessListW",
    "LsaQuerySecurityObject",
    "SetEntriesInAclW",
    "SetSecurityAccessMask",
    "ConvertSDToStringSDRootDomainA",
    "I_ScQueryServiceConfig",
    "GetTraceEnableLevel",
    "QueryServiceObjectSecurity",
    "LsaEnumeratePrivilegesOfAccount",
    "CredpConvertOneCredentialSize",
    "WmiReceiveNotificationsW",
    "ElfClearEventLogFileW",
    "QuerySecurityAccessMask",
    "StartTraceW",
    "I_ScGetCurrentGroupStateW",
    "FlushTraceA",
    "CheckTokenMembership",
    "SystemFunction025",
    "GetSecurityDescriptorOwner",
    "LogonUserW",
    "AuditComputeEffectivePolicyByToken",
    "SetSecurityInfo",
    "CryptSetHashParam",
    "CryptDeriveKey",
    "GetSidSubAuthority",
    "WriteEncryptedFileRaw",
    "AuditSetSecurity",
    "EventAccessControl",
    "GetSidSubAuthorityCount",
    "EncryptFileA",
    "RegQueryInfoKeyA",
    "GetLocalManagedApplicationData",
    "SystemFunction035",
    "WmiNotificationRegistrationW",
    "BuildTrusteeWithObjectsAndNameA",
    "RegOpenKeyTransactedA",
    "ConvertStringSDToSDRootDomainW",
    "LsaRetrievePrivateData",
    "SetNamedSecurityInfoExW"
  ],
  "advpack.dll": [
    "RegisterOCXW",
    "TranslateInfString",
    "ExtractFilesA",
    "FileSaveRestoreOnINF",
    "AdvInstallFileW",
    "DelNode",
    "SetPerUserSecValuesA",
    "GetVersionFromFile",
    "RegSaveRestoreA",
    "RegSaveRestoreOnINF",
    "NeedRebootInit",
    "SetPerUserSecValues",
    "OpenINFEngine",
    "RebootCheckOnInstall",
    "GetVersionFromFileW",
    "AddDelBackupEntryW",
    "UserUnInstStubWrapper",
    "TranslateInfStringExA",
    "RegisterOCX",
    "ExecuteCabW",
    "RegSaveRestoreOnINFW",
    "UserUnInstStubWrapperW",
    "AddDelBackupEntryA",
    "ExtractFilesW",
    "TranslateInfStringEx",
    "OpenINFEngineA",
    "LaunchINFSection",
    "GetVersionFromFileExW",
    "LaunchINFSectionExW",
    "RegSaveRestoreOnINFA",
    "AdvInstallFileA",
    "LaunchINFSectionExA",
    "ExecuteCabA",
    "LaunchINFSectionW",
    "FileSaveRestoreW",
    "AdvInstallFile",
    "DoInfInstallA",
    "FileSaveMarkNotExistW",
    "GetVersionFromFileA",
    "UserInstStubWrapperW",
    "FileSaveRestoreA",
    "RegSaveRestore",
    "TranslateInfStringA",
    "FileSaveMarkNotExist",
    "RunSetupCommandA",
    "RegRestoreAllA",
    "DoInfInstallW",
    "NeedReboot",
    "UserInstStubWrapperA",
    "OpenINFEngineW",
    "RegInstall",
    "FileSaveMarkNotExistA",
    "RebootCheckOnInstallA",
    "ExtractFiles",
    "UserUnInstStubWrapperA",
    "LaunchINFSectionA",
    "RegRestoreAllW",
    "FileSaveRestore",
    "DoInfInstall",
    "GetVersionFromFileExA",
    "FileSaveRestoreOnINFW",
    "AddDelBackupEntry",
    "RunSetupCommandW",
    "UserInstStubWrapper",
    "RegSaveRestoreW",
    "DelNodeA",
    "IsNTAdmin",
    "LaunchINFSectionEx",
    "DelNodeW",
    "RegInstallW",
    "DelNodeRunDLL32A",
    "TranslateInfStringExW",
    "RebootCheckOnInstallW",
    "RunSetupCommand",
    "RegInstallA",
    "CloseINFEngine",
    "ExecuteCab",
    "DelNodeRunDLL32W",
    "TranslateInfStringW",
    "SetPerUserSecValuesW",
    "FileSaveRestoreOnINFA",
    "DelNodeRunDLL32",
    "GetVersionFromFileEx",
    "RegRestoreAll"
  ],
  "aecache.dll": [
    "Sysprep_Clean_AECache"
  ],
  "aeevts.dll": "No exports",
  "aeinv.dll": [
    "CollectMatchingInfo",
    "CreateSoftwareInventory",
    "CollectMatchingInformation"
  ],
  "aelupsvc.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "aepdu.dll": [
    "AePduRunUpdateW"
  ],
  "aepic.dll": [
    "PicRetrieveFileInfo",
    "PicFreeFileInfo"
  ],
  "amstream.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "amxread.dll": [
    "AmxGetTypeMemberInformation",
    "AmxGetStdFnManifestID",
    "AmxGetStdFnHint",
    "AmxSetCurrentStdFnParamByIndex",
    "AmxGetTypeSize",
    "AmxGetStdFnReturnValueSize",
    "AmxGetStdFnParamIndirection",
    "AmxSetGroupByID",
    "AmxGetTimeStamp",
    "AmxGetRecordType",
    "AmxGetTypeName",
    "AmxGetTypeManifestID",
    "AmxGetTableName",
    "AmxGetStdFnOrdinal",
    "AmxGetTypeMemberSize",
    "AmxGetStdFnForwardedAttribute",
    "AmxGetTypeNumberOfMembers",
    "AmxGetTypeMemberOffset",
    "AmxGetTypeMemberTag",
    "AmxGetStdFnFlags",
    "AmxGetRecordID",
    "AmxGetStdFnCallingConvention",
    "AmxGetStdFnRVA",
    "AmxUnLoadStringTable",
    "AmxGetStdFnForwardedName",
    "AmxGetModuleType",
    "AmxGetStdFnParamFlags",
    "AmxGetTotalVolumes",
    "AmxGetTypeMemberFlags",
    "AmxGetTypeMemberManifestID",
    "AmxGetTypeModuleID",
    "AmxGetType",
    "AmxIsEOF",
    "AmxGetStdFnName",
    "AmxGetStdFnParamName",
    "AmxGetStdFnParamModifier",
    "AmxGetSignature",
    "AmxGetProviderName",
    "AmxGetStdFnInformation",
    "AmxCloseManifest",
    "AmxGetModuleGroupName",
    "AmxGetStdFnTotalParamsSize",
    "AmxGetTypeMemberBaseTypeID",
    "AmxGetRecordStatus",
    "AmxGetCharacteristics",
    "AmxGetStdFnParamBaseTypeID",
    "AmxGetStdFnParamSize",
    "AmxResetBuffer",
    "AmxGetStdFnReturnValueIndirection",
    "AmxSetTableByOID",
    "AmxIsBOF",
    "AmxRead",
    "AmxSetCurrentTypeMemberByIndex",
    "AmxGetTypeMemberIndirection",
    "AmxGetRecordVolumeID",
    "AmxGetStdFnReturnValueBaseTypeID",
    "AmxGetTypeMemberName",
    "AmxGetProviderDescription",
    "AmxGetTypeMemberTypeID",
    "AmxGetStdFnParamTypeID",
    "AmxGetStdFnParamInformation",
    "AmxGetVersion",
    "AmxGetStdFnNumberOfParams",
    "AmxOpenManifest",
    "AmxGetStdFnReturnValueTypeID",
    "AmxGetTypeInformation",
    "AmxGetRecordDataSize"
  ],
  "apds.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "HxGetObjectCMI",
    "DllRegisterServer"
  ],
  "api-ms-win-core-console-l1-1-0.dll": [
    "GetConsoleOutputCP",
    "GetConsoleCP",
    "PeekConsoleInputA",
    "WriteConsoleW",
    "AllocConsole",
    "ReadConsoleW",
    "GetConsoleMode",
    "ReadConsoleA",
    "WriteConsoleA",
    "GetNumberOfConsoleInputEvents",
    "ReadConsoleInputA",
    "ReadConsoleInputW",
    "SetConsoleMode",
    "SetConsoleCtrlHandler"
  ],
  "api-ms-win-core-datetime-l1-1-0.dll": [
    "GetDateFormatA",
    "GetDateFormatW",
    "GetTimeFormatW",
    "GetTimeFormatA"
  ],
  "api-ms-win-core-debug-l1-1-0.dll": [
    "OutputDebugStringW",
    "OutputDebugStringA",
    "DebugBreak",
    "IsDebuggerPresent"
  ],
  "api-ms-win-core-delayload-l1-1-0.dll": [
    "DelayLoadFailureHook"
  ],
  "api-ms-win-core-errorhandling-l1-1-0.dll": [
    "GetErrorMode",
    "SetUnhandledExceptionFilter",
    "SetErrorMode",
    "UnhandledExceptionFilter",
    "SetLastError",
    "GetLastError",
    "RaiseException"
  ],
  "api-ms-win-core-fibers-l1-1-0.dll": [
    "FlsSetValue",
    "FlsAlloc",
    "FlsGetValue",
    "FlsFree"
  ],
  "api-ms-win-core-file-l1-1-0.dll": [
    "GetFullPathNameA",
    "GetLongPathNameA",
    "GetVolumeInformationByHandleW",
    "FindFirstChangeNotificationW",
    "FindCloseChangeNotification",
    "CreateDirectoryA",
    "DefineDosDeviceW",
    "GetDiskFreeSpaceA",
    "GetLongPathNameW",
    "SetFileInformationByHandle",
    "SetFileTime",
    "FindNextFileW",
    "GetFileAttributesExW",
    "GetVolumePathNameW",
    "GetLogicalDrives",
    "GetFileSizeEx",
    "CreateFileW",
    "GetFinalPathNameByHandleW",
    "FindVolumeClose",
    "FindFirstFileExA",
    "GetDriveTypeW",
    "SetFileAttributesW",
    "GetDiskFreeSpaceExW",
    "GetFileAttributesExA",
    "GetFileType",
    "FindFirstFileW",
    "FindClose",
    "FindNextChangeNotification",
    "GetFullPathNameW",
    "DeleteFileW",
    "GetFileInformationByHandle",
    "RemoveDirectoryA",
    "GetDriveTypeA",
    "GetTempFileNameW",
    "FlushFileBuffers",
    "FindFirstChangeNotificationA",
    "FindFirstFileA",
    "FindNextFileA",
    "GetDiskFreeSpaceW",
    "SetFileValidData",
    "GetLogicalDriveStringsW",
    "FileTimeToLocalFileTime",
    "SetFilePointerEx",
    "DeleteFileA",
    "RemoveDirectoryW",
    "ReadFileScatter",
    "CreateDirectoryW",
    "WriteFileEx",
    "WriteFile",
    "DeleteVolumeMountPointW",
    "CreateFileA",
    "SetFilePointer",
    "GetDiskFreeSpaceExA",
    "LockFileEx",
    "SetFileAttributesA",
    "GetShortPathNameW",
    "GetFinalPathNameByHandleA",
    "FindFirstFileExW",
    "LocalFileTimeToFileTime",
    "UnlockFileEx",
    "CompareFileTime",
    "FindNextVolumeW",
    "GetFileAttributesA",
    "GetFileAttributesW",
    "QueryDosDeviceW",
    "FindFirstVolumeW",
    "SetEndOfFile",
    "FileTimeToSystemTime",
    "GetVolumeInformationW",
    "GetFileTime",
    "GetFileSize",
    "LockFile",
    "UnlockFile",
    "ReadFileEx",
    "ReadFile",
    "WriteFileGather"
  ],
  "api-ms-win-core-handle-l1-1-0.dll": [
    "SetHandleInformation",
    "GetHandleInformation",
    "CloseHandle",
    "DuplicateHandle"
  ],
  "api-ms-win-core-heap-l1-1-0.dll": [
    "HeapCreate",
    "HeapAlloc",
    "HeapValidate",
    "HeapReAlloc",
    "HeapCompact",
    "HeapLock",
    "HeapQueryInformation",
    "HeapWalk",
    "HeapSize",
    "HeapSummary",
    "GetProcessHeaps",
    "HeapUnlock",
    "HeapSetInformation",
    "GetProcessHeap",
    "HeapDestroy",
    "HeapFree"
  ],
  "api-ms-win-core-interlocked-l1-1-0.dll": [
    "InterlockedPopEntrySList",
    "InterlockedCompareExchange64",
    "InitializeSListHead",
    "InterlockedFlushSList",
    "InterlockedIncrement",
    "InterlockedExchange",
    "InterlockedDecrement",
    "InterlockedPushListSList",
    "QueryDepthSList",
    "InterlockedPushEntrySList",
    "InterlockedCompareExchange",
    "InterlockedExchangeAdd"
  ],
  "api-ms-win-core-io-l1-1-0.dll": [
    "CreateIoCompletionPort",
    "CancelIoEx",
    "DeviceIoControl",
    "GetQueuedCompletionStatusEx",
    "GetOverlappedResult",
    "GetQueuedCompletionStatus",
    "PostQueuedCompletionStatus"
  ],
  "api-ms-win-core-libraryloader-l1-1-0.dll": [
    "GetProcAddress",
    "LoadLibraryExA",
    "FindResourceExW",
    "GetModuleHandleA",
    "LockResource",
    "LoadStringA",
    "FindStringOrdinal",
    "FreeResource",
    "LoadStringW",
    "GetModuleHandleExW",
    "LoadResource",
    "GetModuleFileNameW",
    "FreeLibraryAndExitThread",
    "GetModuleFileNameA",
    "FreeLibrary",
    "DisableThreadLibraryCalls",
    "SizeofResource",
    "LoadLibraryExW",
    "GetModuleHandleW",
    "GetModuleHandleExA"
  ],
  "api-ms-win-core-localization-l1-1-0.dll": [
    "GetLocaleInfoW",
    "GetNLSVersionEx",
    "GetACP",
    "IsValidLocaleName",
    "GetThreadPreferredUILanguages",
    "LocaleNameToLCID",
    "GetLocaleInfoEx",
    "FindNLSString",
    "IsNLSDefinedString",
    "GetCalendarInfoW",
    "NlsUpdateSystemLocale",
    "GetUserPreferredUILanguages",
    "VerLanguageNameA",
    "GetSystemDefaultLCID",
    "GetCPFileNameFromRegistry",
    "NlsUpdateLocale",
    "SetLocaleInfoW",
    "GetProcessPreferredUILanguages",
    "SetThreadLocale",
    "GetUILanguageInfo",
    "GetFileMUIPath",
    "ConvertDefaultLocale",
    "NlsWriteEtwEvent",
    "NlsEventDataDescCreate",
    "LCMapStringEx",
    "GetCPInfoExW",
    "NlsGetCacheUpdateCount",
    "FindNLSStringEx",
    "SetCalendarInfoW",
    "LCMapStringW",
    "VerLanguageNameW",
    "GetUserDefaultLCID",
    "IsValidLanguageGroup",
    "GetNLSVersion",
    "NlsCheckPolicy",
    "GetOEMCP",
    "IsValidLocale",
    "GetCPInfo",
    "GetSystemPreferredUILanguages",
    "GetFileMUIInfo",
    "IsValidCodePage",
    "ResolveLocaleName",
    "GetThreadUILanguage",
    "GetThreadLocale",
    "GetCalendarInfoEx",
    "GetSystemDefaultLangID",
    "GetUserDefaultLangID"
  ],
  "api-ms-win-core-localregistry-l1-1-0.dll": [
    "RegEnumValueW",
    "RegSetValueExW",
    "RegNotifyChangeKeyValue",
    "RegDeleteTreeA",
    "RegRestoreKeyW",
    "RegDeleteTreeW",
    "RegQueryInfoKeyW",
    "RegDeleteKeyExA",
    "RegGetKeySecurity",
    "RegQueryValueExA",
    "RegCreateKeyExW",
    "RegDeleteValueW",
    "RegDeleteKeyExW",
    "RegSetValueExA",
    "RegDeleteValueA",
    "RegOpenKeyExW",
    "RegRestoreKeyA",
    "RegGetValueW",
    "RegSaveKeyExA",
    "RegLoadKeyW",
    "RegUnLoadKeyW",
    "RegLoadKeyA",
    "RegDisablePredefinedCacheEx",
    "RegCloseKey",
    "RegSaveKeyExW",
    "RegSetKeySecurity",
    "RegGetValueA",
    "RegOpenUserClassesRoot",
    "RegEnumValueA",
    "RegCreateKeyExA",
    "RegEnumKeyExW",
    "RegEnumKeyExA",
    "RegOpenCurrentUser",
    "RegUnLoadKeyA",
    "RegLoadMUIStringW",
    "RegQueryInfoKeyA",
    "RegFlushKey",
    "RegLoadMUIStringA",
    "RegQueryValueExW",
    "RegOpenKeyExA"
  ],
  "api-ms-win-core-memory-l1-1-0.dll": [
    "UnmapViewOfFile",
    "ReadProcessMemory",
    "FlushViewOfFile",
    "VirtualProtectEx",
    "MapViewOfFile",
    "MapViewOfFileEx",
    "VirtualFreeEx",
    "VirtualProtect",
    "CreateFileMappingW",
    "OpenFileMappingW",
    "VirtualAllocEx",
    "VirtualAlloc",
    "VirtualQueryEx",
    "WriteProcessMemory",
    "VirtualQuery",
    "VirtualFree"
  ],
  "api-ms-win-core-misc-l1-1-0.dll": [
    "NeedCurrentDirectoryForExePathW",
    "lstrcmpiA",
    "FatalAppExitA",
    "GlobalAlloc",
    "GlobalFree",
    "Sleep",
    "Wow64RevertWow64FsRedirection",
    "IsProcessInJob",
    "NeedCurrentDirectoryForExePathA",
    "PulseEvent",
    "LocalLock",
    "lstrcmp",
    "lstrcmpi",
    "lstrcmpW",
    "LCMapStringA",
    "EnumSystemLocalesA",
    "Wow64DisableWow64FsRedirection",
    "lstrlen",
    "IsWow64Process",
    "LocalAlloc",
    "LocalFree",
    "SetHandleCount",
    "lstrcmpA",
    "lstrcmpiW",
    "lstrcpynW",
    "lstrlenW",
    "LocalReAlloc",
    "FormatMessageA",
    "lstrcpynA",
    "FatalAppExitW",
    "lstrcpyn",
    "lstrlenA",
    "LocalUnlock",
    "FormatMessageW"
  ],
  "api-ms-win-core-namedpipe-l1-1-0.dll": [
    "DisconnectNamedPipe",
    "CreatePipe",
    "GetNamedPipeClientComputerNameW",
    "CreateNamedPipeW",
    "PeekNamedPipe",
    "SetNamedPipeHandleState",
    "TransactNamedPipe",
    "ConnectNamedPipe",
    "GetNamedPipeAttribute",
    "ImpersonateNamedPipeClient",
    "WaitNamedPipeW"
  ],
  "api-ms-win-core-processenvironment-l1-1-0.dll": [
    "SetEnvironmentVariableA",
    "GetCurrentDirectoryW",
    "SetEnvironmentStringsW",
    "SetStdHandle",
    "FreeEnvironmentStringsA",
    "SetStdHandleEx",
    "GetCurrentDirectoryA",
    "SetCurrentDirectoryA",
    "SetEnvironmentVariableW",
    "FreeEnvironmentStringsW",
    "GetEnvironmentStringsA",
    "SearchPathW",
    "GetEnvironmentVariableW",
    "SetCurrentDirectoryW",
    "ExpandEnvironmentStringsW",
    "ExpandEnvironmentStringsA",
    "GetEnvironmentStrings",
    "GetStdHandle",
    "GetCommandLineA",
    "GetEnvironmentVariableA",
    "GetEnvironmentStringsW",
    "GetCommandLineW"
  ],
  "api-ms-win-core-processthreads-l1-1-0.dll": [
    "TlsSetValue",
    "GetCurrentProcess",
    "CreateRemoteThreadEx",
    "SetThreadPriorityBoost",
    "SetProcessAffinityUpdateMode",
    "OpenThreadToken",
    "SetProcessShutdownParameters",
    "DeleteProcThreadAttributeList",
    "GetExitCodeProcess",
    "GetExitCodeThread",
    "TlsFree",
    "GetProcessId",
    "CreateThread",
    "QueryProcessAffinityUpdateMode",
    "TerminateProcess",
    "TerminateThread",
    "SetThreadPriority",
    "ExitThread",
    "GetCurrentProcessId",
    "GetCurrentThread",
    "UpdateProcThreadAttribute",
    "GetProcessIdOfThread",
    "FlushProcessWriteBuffers",
    "TlsAlloc",
    "CreateProcessAsUserW",
    "TlsGetValue",
    "OpenThread",
    "GetThreadPriorityBoost",
    "CreateProcessW",
    "GetProcessVersion",
    "InitializeProcThreadAttributeList",
    "SuspendThread",
    "GetThreadPriority",
    "GetCurrentThreadId",
    "ProcessIdToSessionId",
    "QueueUserAPC",
    "ExitProcess",
    "GetPriorityClass",
    "SetPriorityClass",
    "CreateProcessA",
    "GetProcessTimes",
    "SetThreadStackGuarantee",
    "CreateRemoteThread",
    "GetThreadId",
    "SetThreadToken",
    "ResumeThread",
    "OpenProcessToken",
    "SwitchToThread",
    "GetStartupInfoW"
  ],
  "api-ms-win-core-profile-l1-1-0.dll": [
    "QueryPerformanceCounter",
    "QueryPerformanceFrequency"
  ],
  "api-ms-win-core-rtlsupport-l1-1-0.dll": [
    "RtlUnwind",
    "RtlFillMemory",
    "RtlCaptureStackBackTrace",
    "RtlCaptureContext"
  ],
  "api-ms-win-core-string-l1-1-0.dll": [
    "WideCharToMultiByte",
    "GetStringTypeW",
    "MultiByteToWideChar",
    "CompareStringEx",
    "CompareStringOrdinal",
    "FoldStringW",
    "CompareStringW",
    "GetStringTypeExW"
  ],
  "api-ms-win-core-synch-l1-1-0.dll": [
    "CreateEventExW",
    "CreateMutexExW",
    "OpenSemaphoreW",
    "OpenMutexW",
    "SetWaitableTimer",
    "WaitForMultipleObjectsEx",
    "DeleteCriticalSection",
    "InitializeCriticalSection",
    "SetWaitableTimerEx",
    "InitializeSRWLock",
    "CreateWaitableTimerExW",
    "ReleaseMutex",
    "CreateSemaphoreExW",
    "LeaveCriticalSection",
    "SetEvent",
    "ReleaseSemaphore",
    "CreateEventA",
    "OpenProcess",
    "CreateEventW",
    "CancelWaitableTimer",
    "AcquireSRWLockShared",
    "InitializeCriticalSectionAndSpinCount",
    "CreateMutexW",
    "CreateEventExA",
    "ResetEvent",
    "TryEnterCriticalSection",
    "ReleaseSRWLockExclusive",
    "ReleaseSRWLockShared",
    "CreateMutexA",
    "InitializeCriticalSectionEx",
    "WaitForSingleObject",
    "OpenEventA",
    "OpenWaitableTimerW",
    "EnterCriticalSection",
    "TryAcquireSRWLockShared",
    "CreateMutexExA",
    "AcquireSRWLockExclusive",
    "TryAcquireSRWLockExclusive",
    "WaitForSingleObjectEx",
    "SleepEx",
    "SetCriticalSectionSpinCount",
    "OpenEventW"
  ],
  "api-ms-win-core-sysinfo-l1-1-0.dll": [
    "GetTimeZoneInformation",
    "GetComputerNameExA",
    "GetVersionExW",
    "GetSystemWindowsDirectoryA",
    "GetSystemTimeAdjustment",
    "GetSystemTime",
    "GetLogicalProcessorInformation",
    "SystemTimeToTzSpecificLocalTime",
    "GetTimeZoneInformationForYear",
    "GetLocalTime",
    "GetSystemInfo",
    "TzSpecificLocalTimeToSystemTime",
    "GetComputerNameExW",
    "SetLocalTime",
    "GetTickCount",
    "GetSystemDirectoryA",
    "GetSystemWindowsDirectoryW",
    "GetDynamicTimeZoneInformation",
    "GlobalMemoryStatusEx",
    "GetSystemDirectoryW",
    "GetWindowsDirectoryW",
    "GetWindowsDirectoryA",
    "GetTickCount64",
    "GetLogicalProcessorInformationEx",
    "GetVersion",
    "GetSystemTimeAsFileTime",
    "SystemTimeToFileTime",
    "GetVersionExA"
  ],
  "api-ms-win-core-threadpool-l1-1-0.dll": [
    "SetThreadpoolTimer",
    "WaitForThreadpoolTimerCallbacks",
    "StartThreadpoolIo",
    "SetThreadpoolWait",
    "SetThreadpoolThreadMinimum",
    "DeleteTimerQueueEx",
    "WaitForThreadpoolWaitCallbacks",
    "CreateThreadpool",
    "DeleteTimerQueueTimer",
    "RegisterWaitForSingleObjectEx",
    "QueryThreadpoolStackInformation",
    "FreeLibraryWhenCallbackReturns",
    "CreateThreadpoolWait",
    "IsThreadpoolTimerSet",
    "DisassociateCurrentThreadFromCallback",
    "CloseThreadpoolWait",
    "CloseThreadpoolIo",
    "CallbackMayRunLong",
    "CreateThreadpoolCleanupGroup",
    "UnregisterWaitEx",
    "SetThreadpoolThreadMaximum",
    "SetEventWhenCallbackReturns",
    "SetThreadpoolStackInformation",
    "TrySubmitThreadpoolCallback",
    "WaitForThreadpoolWorkCallbacks",
    "CancelThreadpoolIo",
    "CloseThreadpool",
    "CloseThreadpoolWork",
    "CreateThreadpoolTimer",
    "CloseThreadpoolCleanupGroup",
    "LeaveCriticalSectionWhenCallbackReturns",
    "WaitForThreadpoolIoCallbacks",
    "CloseThreadpoolTimer",
    "SubmitThreadpoolWork",
    "CloseThreadpoolCleanupGroupMembers",
    "ReleaseMutexWhenCallbackReturns",
    "ReleaseSemaphoreWhenCallbackReturns",
    "CreateThreadpoolWork",
    "CreateTimerQueueTimer",
    "CreateTimerQueue",
    "CreateThreadpoolIo",
    "ChangeTimerQueueTimer"
  ],
  "api-ms-win-core-util-l1-1-0.dll": [
    "EncodeSystemPointer",
    "EncodePointer",
    "DecodePointer",
    "Beep",
    "DecodeSystemPointer"
  ],
  "api-ms-win-core-xstate-l1-1-0.dll": [
    "RtlInitializeExtendedContext",
    "RtlLocateExtendedFeature",
    "RtlSetExtendedFeaturesMask",
    "RtlGetEnabledExtendedFeatures",
    "RtlGetExtendedFeaturesMask",
    "RtlGetExtendedContextLength",
    "RtlLocateLegacyContext",
    "RtlCopyExtendedContext"
  ],
  "api-ms-win-security-base-l1-1-0.dll": [
    "AdjustTokenPrivileges",
    "GetSecurityDescriptorGroup",
    "GetSidLengthRequired",
    "MapGenericMask",
    "AreAnyAccessesGranted",
    "SetPrivateObjectSecurity",
    "SetSecurityDescriptorGroup",
    "AccessCheckByTypeResultListAndAuditAlarmW",
    "IsTokenRestricted",
    "GetAce",
    "InitializeSid",
    "ObjectCloseAuditAlarmW",
    "AddAce",
    "AccessCheckByTypeResultList",
    "IsValidSecurityDescriptor",
    "GetFileSecurityW",
    "SetAclInformation",
    "IsValidRelativeSecurityDescriptor",
    "AccessCheckByTypeResultListAndAuditAlarmByHandleW",
    "GetSecurityDescriptorRMControl",
    "IsValidSid",
    "AllocateAndInitializeSid",
    "AllocateLocallyUniqueId",
    "SetSecurityDescriptorDacl",
    "ImpersonateSelf",
    "GetTokenInformation",
    "DestroyPrivateObjectSecurity",
    "GetSecurityDescriptorSacl",
    "AccessCheckAndAuditAlarmW",
    "DuplicateTokenEx",
    "GetSecurityDescriptorLength",
    "ObjectPrivilegeAuditAlarmW",
    "AddAuditAccessAceEx",
    "AddAccessAllowedObjectAce",
    "MakeAbsoluteSD",
    "DuplicateToken",
    "IsValidAcl",
    "FreeSid",
    "GetLengthSid",
    "EqualPrefixSid",
    "AddAccessAllowedAceEx",
    "MakeAbsoluteSD2",
    "MakeSelfRelativeSD",
    "AddAccessDeniedObjectAce",
    "AddAccessAllowedAce",
    "AccessCheck",
    "ObjectOpenAuditAlarmW",
    "EqualSid",
    "SetSecurityDescriptorControl",
    "GetAclInformation",
    "AddAuditAccessAce",
    "SetKernelObjectSecurity",
    "ConvertToAutoInheritPrivateObjectSecurity",
    "GetSidIdentifierAuthority",
    "CreatePrivateObjectSecurity",
    "GetSecurityDescriptorControl",
    "InitializeAcl",
    "ObjectDeleteAuditAlarmW",
    "SetSecurityDescriptorSacl",
    "GetPrivateObjectSecurity",
    "EqualDomainSid",
    "AccessCheckByType",
    "IsWellKnownSid",
    "AccessCheckByTypeAndAuditAlarmW",
    "ImpersonateLoggedOnUser",
    "SetFileSecurityW",
    "GetWindowsAccountDomainSid",
    "SetSecurityDescriptorRMControl",
    "RevertToSelf",
    "SetPrivateObjectSecurityEx",
    "PrivilegeCheck",
    "CreatePrivateObjectSecurityEx",
    "CreatePrivateObjectSecurityWithMultipleInheritance",
    "AdjustTokenGroups",
    "GetKernelObjectSecurity",
    "PrivilegedServiceAuditAlarmW",
    "SetTokenInformation",
    "CopySid",
    "InitializeSecurityDescriptor",
    "AreAllAccessesGranted",
    "ImpersonateAnonymousToken",
    "SetSecurityAccessMask",
    "QuerySecurityAccessMask",
    "CheckTokenMembership",
    "CreateRestrictedToken",
    "GetSecurityDescriptorOwner",
    "AddAccessDeniedAce",
    "AddMandatoryAce",
    "AddAccessDeniedAceEx",
    "GetSidSubAuthority",
    "AddAuditAccessObjectAce",
    "SetSecurityDescriptorOwner",
    "DeleteAce",
    "CreateWellKnownSid",
    "GetSecurityDescriptorDacl",
    "FindFirstFreeAce",
    "GetSidSubAuthorityCount"
  ],
  "api-ms-win-security-lsalookup-l1-1-0.dll": [
    "LookupAccountSidLocalW",
    "LsaLookupClose",
    "LookupAccountNameLocalW",
    "LsaLookupGetDomainInfo",
    "LookupAccountSidLocalA",
    "LookupAccountNameLocalA",
    "LsaLookupOpenLocalPolicy",
    "LsaLookupFreeMemory",
    "LsaLookupManageSidNameMapping",
    "LsaLookupTranslateSids",
    "LsaLookupTranslateNames"
  ],
  "api-ms-win-security-sddl-l1-1-0.dll": [
    "ConvertSecurityDescriptorToStringSecurityDescriptorW",
    "ConvertStringSidToSidW",
    "ConvertStringSecurityDescriptorToSecurityDescriptorW",
    "ConvertSidToStringSidW"
  ],
  "api-ms-win-service-core-l1-1-0.dll": [
    "StartServiceCtrlDispatcherW",
    "SetServiceStatus",
    "RegisterServiceCtrlHandlerExW"
  ],
  "api-ms-win-service-management-l1-1-0.dll": [
    "CreateServiceW",
    "StartServiceW",
    "OpenServiceW",
    "ControlServiceExW",
    "OpenSCManagerW",
    "CloseServiceHandle",
    "DeleteService"
  ],
  "api-ms-win-service-management-l2-1-0.dll": [
    "SetServiceObjectSecurity",
    "ChangeServiceConfig2W",
    "QueryServiceObjectSecurity",
    "QueryServiceConfigW",
    "ChangeServiceConfigW",
    "QueryServiceStatusEx",
    "QueryServiceConfig2W",
    "NotifyServiceStatusChangeW"
  ],
  "api-ms-win-service-winsvc-l1-1-0.dll": [
    "I_ScSendPnPMessage",
    "RegisterServiceCtrlHandlerW",
    "ChangeServiceConfigA",
    "ControlServiceExA",
    "QueryServiceConfig2A",
    "I_ScRpcBindA",
    "CreateServiceA",
    "I_ScQueryServiceConfig",
    "StartServiceA",
    "OpenServiceA",
    "RegisterServiceCtrlHandlerA",
    "StartServiceCtrlDispatcherA",
    "I_ScValidatePnPService",
    "I_ScRpcBindW",
    "RegisterServiceCtrlHandlerExA",
    "I_ScPnPGetServiceName",
    "I_QueryTagInformation",
    "I_ScBroadcastServiceControlMessage",
    "OpenSCManagerA",
    "ControlService",
    "QueryServiceConfigA",
    "ChangeServiceConfig2A",
    "NotifyServiceStatusChangeA",
    "I_ScSendTSMessage",
    "I_ScIsSecurityProcess",
    "QueryServiceStatus"
  ],
  "apilogen.dll": [
    "LeInitialize",
    "LeWriteExceptionData",
    "LeTraceFunctionCall",
    "LeWriteManifestData",
    "LeWriteProcessData",
    "LeUninitialize"
  ],
  "apircl.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "ITUseDefaultObjectLookupOrder",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "apisetschema.dll": "No exports",
  "apphelp.dll": [
    "SdbUnregisterDatabase",
    "ApphelpShowDialog",
    "SdbReadBinaryTag",
    "SdbFreeDatabaseInformation",
    "SdbQueryDataEx",
    "SdbEnumMsiTransforms",
    "SE_GetHookAPIs",
    "SdbQueryFlagMask",
    "SdbFindCustomActionForPackage",
    "SdbQueryData",
    "SdbReadDWORDTag",
    "SE_LdrEntryRemoved",
    "SdbCloseDatabaseWrite",
    "SdbReadBYTETagRef",
    "SdbGetTagDataSize",
    "SdbGetStandardDatabaseGUID",
    "SdbDeletePermLayerKeys",
    "SdbTagRefToTagID",
    "SdbAddLayerTagRefToQuery",
    "SdbFindFirstTag",
    "ApphelpFixMsiPackageExe",
    "SdbReadApphelpData",
    "ShimDbgPrint",
    "SetPermLayerState",
    "SdbGetNthUserSdb",
    "SdbOpenApphelpDetailsDatabaseSP",
    "SdbReadQWORDTag",
    "ApphelpCheckRunApp",
    "SE_DllLoaded",
    "SdbBuildCompatEnvVariables",
    "SdbReadMsiTransformInfo",
    "SdbGrabMatchingInfo",
    "GetPermLayers",
    "SdbGetDatabaseInformationByName",
    "SdbGetMatchingExe",
    "ApphelpCheckInstallShieldPackage",
    "ApphelpGetMsiProperties",
    "SdbReadWORDTagRef",
    "SdbCommitIndexes",
    "SdbLoadString",
    "SdbBeginWriteListTag",
    "SdbStopIndexing",
    "SdbApphelpNotifyEx",
    "SdbReadPatchBits",
    "SdbGetShowDebugInfoOption",
    "ApphelpCheckExe",
    "SdbGetShowDebugInfoOptionValue",
    "SdbWriteBYTETag",
    "SdbQueryReinstallUpgrade",
    "SdbApphelpNotify",
    "SE_InstallBeforeInit",
    "SdbFindNextStringIndexedTag",
    "SdbGetDatabaseGUID",
    "SdbWriteNULLTag",
    "SdbTagToString",
    "SdbGetFileAttributes",
    "SdbCreateDatabase",
    "SdbGetFileImageTypeEx",
    "SdbEscapeApphelpURL",
    "SdbPackAppCompatData",
    "SdbGetPDBFromGUID",
    "SdbReadWORDTag",
    "ApphelpCheckRunAppEx",
    "SdbMakeIndexKeyFromString",
    "SdbWriteBinaryTagFromFile",
    "SdbWriteStringRefTag",
    "SdbGetIndex",
    "SdbStringDuplicate",
    "SdbReadStringTag",
    "SdbWriteWORDTag",
    "SdbTagIDToTagRef",
    "SdbWriteQWORDTag",
    "SdbInitDatabaseEx",
    "SdbWriteBinaryTag",
    "SdbCreateHelpCenterURL",
    "ShimFlushCache",
    "SdbQueryContext",
    "SdbUnpackAppCompatData",
    "SetPermLayers",
    "SdbGUIDFromString",
    "SdbGetImageType",
    "SdbInitDatabase",
    "ApphelpParseModuleData",
    "SdbStringReplace",
    "ApphelpCreateAppcompatData",
    "SdbStartIndexing",
    "SdbGetDllPath",
    "SdbGetNextChild",
    "SdbIsStandardDatabase",
    "SdbDeclareIndex",
    "SdbOpenLocalDatabase",
    "SdbGetBinaryTagData",
    "ApphelpFreeFileAttributes",
    "SdbReadApphelpDetailsData",
    "SdbIsTagrefFromMainDB",
    "SdbFindNextTagRef",
    "SdbQueryName",
    "SdbCreateMsiTransformFile",
    "SdbWriteStringTag",
    "SdbOpenApphelpInformationByID",
    "SdbFindFirstDWORDIndexedTag",
    "SdbFreeFlagInfo",
    "SdbGUIDToString",
    "SdbGetItemFromItemRef",
    "SdbFindNextMsiPackage",
    "SdbReadDWORDTagRef",
    "SdbFindNextGUIDIndexedTag",
    "SdbGetMsiPackageInformation",
    "ApphelpGetShimDebugLevel",
    "SE_GetMaxShimCount",
    "SdbReadBYTETag",
    "ApphelpCheckModule",
    "SdbFreeFileInfo",
    "SdbFindFirstNamedTag",
    "SdbEndWriteListTag",
    "SdbIsTagrefFromLocalDB",
    "SdbGetDatabaseMatch",
    "SdbFindFirstGUIDIndexedTag",
    "SdbReadEntryInformation",
    "SdbSetEntryFlags",
    "SdbShowApphelpFromQuery",
    "SdbOpenApphelpResourceFile",
    "SdbApphelpNotifyEx2",
    "SdbWriteDWORDTag",
    "SdbGetFirstChild",
    "SdbSetPermLayerKeys",
    "SdbQueryApphelpInformation",
    "SdbFindFirstMsiPackage_Str",
    "SdbGetStringTagPtr",
    "ApphelpQueryModuleData",
    "SdbCloseLocalDatabase",
    "SdbGetLocalPDB",
    "SdbGetDatabaseInformation",
    "ApphelpFixMsiPackage",
    "SdbIsNullGUID",
    "SE_DllUnloaded",
    "ApphelpCheckIME",
    "SdbDumpSearchPathPartCaches",
    "SdbGetAppCompatDataSize",
    "ApphelpQueryModuleDataEx",
    "ShimDumpCache",
    "SdbReadStringTagRef",
    "SdbGetTagFromTagID",
    "ApphelpGetNTVDMInfo",
    "SdbQueryDataExTagID",
    "SdbRegisterDatabaseEx",
    "SdbFindNextTag",
    "SdbReadQWORDTagRef",
    "SdbGetFileInfo",
    "ApphelpCheckShellObject",
    "SdbGetFileImageType",
    "SdbShowApphelpDialog",
    "SdbCloseDatabase",
    "SE_GetShimCount",
    "SdbFreeFileAttributes",
    "SdbGetLayerName",
    "SdbQueryFlagInfo",
    "SE_DynamicShim",
    "SE_IsShimDll",
    "SdbFormatAttribute",
    "ApphelpCheckMsiPackage",
    "SdbGetDatabaseVersion",
    "SdbRegisterDatabase",
    "SdbWriteStringTagDirect",
    "SdbOpenDatabase",
    "SdbFindFirstMsiPackage",
    "SdbGetAppPatchDir",
    "SdbQueryBlockUpgrade",
    "SdbFindNextDWORDIndexedTag",
    "SE_GetProcAddressIgnoreIncExc",
    "SdbGetNamedLayer",
    "SdbReleaseDatabase",
    "SdbSetApphelpDebugParameters",
    "SdbReleaseMatchingExe",
    "SdbOpenDbFromGuid",
    "SdbStringReplaceArray",
    "SdbGrabMatchingInfoEx",
    "SdbSetImageType",
    "SdbGetEntryFlags",
    "SE_InstallAfterInit",
    "SdbCloseApphelpInformation",
    "SdbFindFirstTagRef",
    "SdbFindMsiPackageByID",
    "SdbGetPermLayerKeys",
    "ApphelpGetFileAttributes",
    "AllowPermLayer",
    "SdbFindFirstStringIndexedTag",
    "SdbResolveDatabase",
    "SE_ProcessDying",
    "SdbOpenApphelpInformation",
    "SdbGetDatabaseID",
    "ApphelpUpdateCacheEntry",
    "SE_GetProcAddressLoad",
    "SdbOpenApphelpDetailsDatabase",
    "SdbGetLayerTagRef"
  ],
  "appidapi.dll": [
    "AppIDDecodeAttributeString",
    "AppIDFreeAttributeString",
    "AppIDEncodeAttributeString",
    "AppIDGetFileAttributes",
    "AppIDReleaseFileAttributes"
  ],
  "appidsvc.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "appinfo.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "appmgmts.dll": [
    "GenerateGroupPolicy",
    "CsEnumApps",
    "CsGetClassStorePath",
    "ProcessGroupPolicyObjectsEx",
    "CsGetClassStore",
    "CsUnregisterAppCategory",
    "CsServerGetClassStore",
    "IID_IClassAdmin",
    "CsRegisterAppCategory",
    "CsCreateClassStore",
    "ReleasePackageDetail",
    "ReleaseAppCategoryInfoList",
    "DllCanUnloadNow",
    "ReleasePackageInfo",
    "CsGetAppCategories",
    "CsSetOptions",
    "DllGetClassObject",
    "CsGetClassAccess",
    "ServiceMain"
  ],
  "appmgr.dll": [
    "DllCanUnloadNow",
    "GenerateScript",
    "DllGetClassObject"
  ],
  "apss.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "WMCreateStreamForURL",
    "ITUseDefaultObjectLookupOrder",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "asferror.dll": "No exports",
  "asycfilt.dll": [
    "DllCanUnloadNow",
    "FilterCreateInstance"
  ],
  "atl.dll": [
    "AtlWaitWithMessageLoop",
    "AtlModuleRegisterClassObjects",
    "AtlModuleExtractCreateWndData",
    "AtlModuleLoadTypeLib",
    "AtlFreeMarshalStream",
    "AtlSetErrorInfo",
    "AtlAxCreateDialogW",
    "DllRegisterServer",
    "AtlInternalQueryInterface",
    "AtlModuleAddCreateWndData",
    "AtlModuleTerm",
    "AtlModuleAddTermFunc",
    "AtlModuleUnregisterServer",
    "DllUnregisterServer",
    "AtlModuleRegisterWndClassInfoW",
    "AtlSetErrorInfo2",
    "AtlModuleGetClassObject",
    "AtlAxCreateControlEx",
    "AtlAxWinInit",
    "AtlModuleRegisterTypeLib",
    "AtlAxAttachControl",
    "AtlComQIPtrAssign",
    "AtlModuleUnRegisterTypeLib",
    "AtlModuleUnregisterServerEx",
    "AtlAdvise",
    "AtlUnmarshalPtr",
    "AtlAxGetControl",
    "AtlDevModeW2A",
    "AtlGetVersion",
    "AtlMarshalPtrInProc",
    "AtlIPersistPropertyBag_Load",
    "AtlComPtrAssign",
    "AtlAxDialogBoxW",
    "AtlIPersistStreamInit_Load",
    "AtlAxCreateDialogA",
    "AtlIPersistStreamInit_GetSizeMax",
    "AtlModuleRevokeClassObjects",
    "AtlModuleUpdateRegistryFromResourceD",
    "AtlPixelToHiMetric",
    "AtlModuleRegisterServer",
    "AtlHiMetricToPixel",
    "AtlAxCreateControl",
    "AtlAxGetHost",
    "AtlCreateTargetDC",
    "DllCanUnloadNow",
    "AtlGetObjectSourceInterface",
    "AtlModuleInit",
    "AtlRegisterClassCategoriesHelper",
    "AtlModuleRegisterWndClassInfoA",
    "AtlUnadvise",
    "AtlIPersistPropertyBag_Save",
    "AtlIPersistStreamInit_Save",
    "DllGetClassObject",
    "AtlAxDialogBoxA"
  ],
  "audiodev.dll": [
    "_GUIDFromStringW@8",
    "_ParseURLW@8",
    "_SHInvokeCommandOnContextMenu@20",
    "_SHLoadRegUIStringW@16",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "_SHUnicodeToAnsi@12",
    "_GetUIVersion@0",
    "_CIDLData_CreateFromIDArray@16",
    "_SHAnsiToUnicode@12",
    "_SHCoCreateInstanceAC@20",
    "_SHGetMenuFromID@8",
    "_SHGetObjectCompatFlags@8",
    "_CDefFolderMenu_MergeMenu@16",
    "_SHStringFromGUIDW@12",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "audiosrv.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "auditcse.dll": [
    "GenerateGroupPolicy",
    "ProcessGroupPolicyEx"
  ],
  "auditpolmsg.dll": "No exports",
  "authfwcfg.dll": [
    "GetResourceString",
    "InitHelperDll"
  ],
  "authui.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "authz.dll": [
    "AuthziAccessCheckEx",
    "AuthziInitializeAuditEvent",
    "AuthziFreeAuditEventType",
    "AuthziFreeAuditQueue",
    "AuthziModifyAuditEventType",
    "AuthzFreeContext",
    "AuthzFreeAuditEvent",
    "AuthzInitializeObjectAccessAuditEvent",
    "AuthzRegisterSecurityEventSource",
    "AuthziModifySecurityAttributes",
    "AuthzUnregisterSecurityEventSource",
    "AuthzEnumerateSecurityEventSources",
    "AuthziQuerySecurityAttributes",
    "AuthziModifyAuditEvent2",
    "AuthziInitializeAuditParamsFromArray",
    "AuthzOpenObjectAudit",
    "AuthzInitializeContextFromSid",
    "AuthziModifyAuditEvent",
    "AuthzInitializeObjectAccessAuditEvent2",
    "AuthzInitializeContextFromToken",
    "AuthzInstallSecurityEventSource",
    "AuthziInitializeAuditQueue",
    "AuthzCachedAccessCheck",
    "AuthzUninstallSecurityEventSource",
    "AuthzFreeHandle",
    "AuthzReportSecurityEventFromParams",
    "AuthzInitializeResourceManager",
    "AuthzReportSecurityEvent",
    "AuthzFreeResourceManager",
    "AuthzEvaluateSacl",
    "AuthziCheckContextMembership",
    "AuthzAddSidsToContext",
    "AuthzAccessCheck",
    "AuthziInitializeContextFromSid",
    "AuthziGenerateAdminAlertAuditW",
    "AuthziLogAuditEvent",
    "AuthziModifyAuditQueue",
    "AuthzInitializeContextFromAuthzContext",
    "AuthziInitializeAuditParams",
    "AuthziAllocateAuditParams",
    "AuthziFreeAuditParams",
    "AuthziInitializeAuditParamsWithRM",
    "AuthzGetInformationFromContext",
    "AuthzModifySecurityAttributes",
    "AuthziSourceAudit",
    "AuthziInitializeAuditEventType"
  ],
  "autoplay.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "avicap32.dll": [
    "capGetDriverDescriptionA",
    "capCreateCaptureWindowW",
    "AppCleanup",
    "capGetDriverDescriptionW",
    "videoThunk32",
    "capCreateCaptureWindowA"
  ],
  "avifil32.dll": [
    "EditStreamCopy",
    "AVIPutFileOnClipboard",
    "AVISaveOptionsFree",
    "AVISaveOptions",
    "AVIFileInfoW",
    "AVIStreamFindSample",
    "AVIStreamOpenFromFileW",
    "CreateEditableStream",
    "AVIBuildFilter",
    "EditStreamSetName",
    "AVIFileCreateStreamW",
    "AVIFileOpenW",
    "EditStreamCut",
    "AVIFileAddRef",
    "AVIFileGetStream",
    "AVIStreamWriteData",
    "AVIStreamInfo",
    "AVIFileWriteData",
    "AVIFileReadData",
    "AVIStreamStart",
    "AVIFileRelease",
    "AVIMakeCompressedStream",
    "AVIFileExit",
    "AVIStreamSampleToTime",
    "AVIStreamInfoA",
    "EditStreamSetInfoA",
    "AVIFileCreateStreamA",
    "AVIFileInit",
    "AVIMakeStreamFromClipboard",
    "IID_IAVIFile",
    "AVIStreamLength",
    "AVIFileOpen",
    "AVIStreamGetFrameOpen",
    "AVISave",
    "AVIStreamInfoW",
    "AVIStreamGetFrameClose",
    "AVIFileCreateStream",
    "AVIStreamOpenFromFile",
    "AVIStreamReadFormat",
    "AVIStreamWrite",
    "IID_IGetFrame",
    "AVIGetFromClipboard",
    "AVIStreamEndStreaming",
    "AVIStreamTimeToSample",
    "EditStreamSetNameW",
    "AVISaveVA",
    "AVIBuildFilterW",
    "AVIStreamAddRef",
    "EditStreamClone",
    "AVIStreamCreate",
    "EditStreamSetInfo",
    "IID_IAVIEditStream",
    "AVIClearClipboard",
    "EditStreamSetNameA",
    "AVISaveA",
    "AVISaveW",
    "AVIStreamBeginStreaming",
    "AVIStreamGetFrame",
    "AVIFileOpenA",
    "EditStreamSetInfoW",
    "IID_IAVIStream",
    "DllCanUnloadNow",
    "AVIStreamRelease",
    "AVIStreamOpenFromFileA",
    "AVIBuildFilterA",
    "AVIFileEndRecord",
    "AVIMakeFileFromStreams",
    "AVISaveV",
    "AVIFileInfoA",
    "AVISaveVW",
    "DllGetClassObject",
    "EditStreamPaste",
    "AVIFileInfo",
    "AVIStreamRead",
    "AVIStreamSetFormat",
    "AVIStreamReadData"
  ],
  "avrt.dll": [
    "AvSetMmThreadPriority",
    "AvQuerySystemResponsiveness",
    "AvRtDeleteThreadOrderingGroup",
    "AvRtCreateThreadOrderingGroupExW",
    "AvSetMmMaxThreadCharacteristicsA",
    "AvSetMmMaxThreadCharacteristicsW",
    "AvSetMmThreadCharacteristicsA",
    "AvSetMmThreadCharacteristicsW",
    "AvRevertMmThreadCharacteristics",
    "AvRtWaitOnThreadOrderingGroup",
    "AvRtCreateThreadOrderingGroupExA",
    "AvRtLeaveThreadOrderingGroup",
    "AvRtJoinThreadOrderingGroup",
    "AvRtCreateThreadOrderingGroup"
  ],
  "azroles.dll": [
    "AzTaskOpen",
    "AzSubmit",
    "AzApplicationOpen",
    "AzApplicationEnum",
    "DllRegisterServer",
    "AzRoleCreate",
    "AzRoleDelete",
    "AzContextGetAssignedScopesPage",
    "DllUnregisterServer",
    "AzFreeMemory",
    "AzInitializeContextFromToken",
    "AzContextGetRoles",
    "AzSetProperty",
    "AzGroupDelete",
    "AzRoleEnum",
    "AzTaskCreate",
    "AzApplicationCreate",
    "AzInitialize",
    "AzInitializeContextFromName",
    "AzGroupOpen",
    "AzScopeDelete",
    "AzTaskDelete",
    "AzOperationDelete",
    "AzScopeEnum",
    "AzGroupEnum",
    "AzOperationOpen",
    "AzApplicationDelete",
    "AzCloseHandle",
    "AzTaskEnum",
    "AzUpdateCache",
    "AzGroupCreate",
    "AzGetProperty",
    "AzOperationEnum",
    "AzContextAccessCheck",
    "DllCanUnloadNow",
    "AzOperationCreate",
    "AzRoleOpen",
    "AzApplicationClose",
    "AzScopeCreate",
    "AzAddPropertyItem",
    "AzAuthorizationStoreDelete",
    "AzScopeOpen",
    "DllGetClassObject",
    "AzRemovePropertyItem"
  ],
  "azroleui.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "BFE.DLL": [
    "BfeOnServiceStartTypeChange",
    "BfeGetDirectDispatchTable",
    "SvchostPushServiceGlobals",
    "BfeServiceMain"
  ],
  "BOOTVID.DLL": [
    "VidBitBlt",
    "VidResetDisplay",
    "VidSetTextColor",
    "VidInitialize",
    "VidDisplayStringXY",
    "VidCleanUp",
    "VidBufferToScreenBlt",
    "VidSolidColorFill",
    "VidSetScrollRegion",
    "VidDisplayString",
    "VidScreenToBufferBlt"
  ],
  "BWUnpairElevated.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "BdeHdCfgLib.dll": [
    "private: void __thiscall CDriveConfiguration::Cleanup(void)",
    "private: long __thiscall CBdeCfgLibraryLoader::InitializeAndHoldLibrary_Thread(void)",
    "public: bool __thiscall CBdeCfgLibraryLoader::LibraryLoaded(void)",
    "protected: long __thiscall CBcdWmiWrapper::ExecuteMethod(unsigned short const *,struct IWbemClassObject *,struct IWbemClassObject * *)",
    "BdeCfgLogFailedTarget",
    "BdeCfgLogEnumExtent",
    "BdeCfgCountGPTPartitions",
    "public: __thiscall CBcdWmiWrapper::CBcdWmiWrapper(class CBcdWmiWrapper const &)",
    "BdeCfgGetNtfsVolumeSize",
    "BdeCfgDetectWinREVolumeName",
    "public: unsigned long __thiscall CDriveConfiguration::GetTargetPartitionNumber(void)",
    "public: class CBcdWmiWrapper & __thiscall CBcdWmiWrapper::operator=(class CBcdWmiWrapper const &)",
    "private: long __thiscall CBcdWmiWrapper::InitializeNamespace(void)",
    "public: long __thiscall CDriveConfiguration::QueryStepPercentComplete(unsigned long *)",
    "public: bool __thiscall CDriveConfiguration::ActionRequiresCreate(void)",
    "public: long __thiscall CBcdStore::OpenStore(unsigned short const *,class CBcdStore * *)",
    "public: long __thiscall CBdeCfgLibraryLoader::Load(void)",
    "private: long __thiscall CDriveConfiguration::Thread_Initialize(void)",
    "BdeCfgFindVolumeWithProp",
    "BdeCfgMoveWinRE",
    "BdeCfgShrinkSimpleVolume",
    "BdeCfgIsElevated",
    "BdeCfgGetVolumeFromId",
    "BdeCfgInitialize",
    "public: void __thiscall CBdeCfgLibraryLoader::Unload(void)",
    "private: long __thiscall CBdeCfgLibraryLoader::InitializeAndHoldLibrary(void)",
    "BdeCfgSecureFormatPartition",
    "BdeCfgCheckAndGetBootVolume",
    "BdeCfgFindRecoveryPartitionGPT",
    "public: bool __thiscall CDriveConfiguration::ActionRequiresShrink(void)",
    "public: long __thiscall CBcdStore::ImportSystemStore(unsigned short const *)",
    "private: static void __cdecl CDriveConfiguration::DriveConfigurationEntry(void *)",
    "public: bool __thiscall CDriveConfiguration::Initialized(void)",
    "BdeCfgCreateWinREPartitionGPT",
    "BdeCfgLogCandidateDrive",
    "BdeCfgDetectWinRESize",
    "BdeCfgLogDetectedWinRE",
    "private: long __thiscall CDriveConfiguration::DetectTargetDrive(struct IVdsVolume *)",
    "BdeCfgLogWarning",
    "public: unsigned __int64 __thiscall CDriveConfiguration::GetTargetPartitionSize(void)",
    "BdeCfgLoadErrorString",
    "protected: long __thiscall CBcdWmiWrapper::InitializeClass(unsigned short const *)",
    "BdeCfgLogError",
    "BdeCfgLogFoundUnallocatedExtent",
    "protected: __thiscall CBcdWmiWrapper::CBcdWmiWrapper(void)",
    "public: long __thiscall CDriveConfiguration::GetInitializationResult(void)",
    "BdeCfgIsDiskConfiguredForBitLocker",
    "protected: long __thiscall CBcdWmiWrapper::CreateInParams(unsigned short const *,struct IWbemClassObject * *)",
    "public: long __thiscall CDriveConfiguration::ConfigureDrive(void)",
    "public: static long __stdcall CBcdStore::CreateClass(class CBcdStore * *)",
    "public: class CDriveConfiguration & __thiscall CDriveConfiguration::operator=(class CDriveConfiguration const &)",
    "public: unsigned short __thiscall CDriveConfiguration::GetTargetDriveLetter(void)",
    "protected: struct IWbemServices * __thiscall CBcdWmiWrapper::GetNamespace(void)",
    "const CBcdStore::`vftable'",
    "public: unsigned long __thiscall CDriveConfiguration::GetStepExecutionOrder(enum _BDECFG_STEP_ID)",
    "BdeCfgCalculateSizeRequirements",
    "BdeCfgIsWinREOnOSVolume",
    "BdeCfgFindLargestUnallocatedExtent",
    "BdeCfgLoadResourceString",
    "BdeCfgRestart",
    "BdeCfgGetVolumeDisk",
    "BdeCfgMigrateBootHive",
    "BdeCfgGetVolumeDriveLetter",
    "public: bool __thiscall CDriveConfiguration::ActionRequiresMerge(void)",
    "public: long __thiscall CBcdStore::ExportSystemStore(unsigned short const *)",
    "public: class CBcdStore & __thiscall CBcdStore::operator=(class CBcdStore const &)",
    "protected: __thiscall CBcdStore::CBcdStore(void)",
    "protected: long __thiscall CBcdWmiWrapper::InitializeInstance(struct IWbemServices *,struct IWbemClassObject *)",
    "private: long __thiscall CDriveConfiguration::InitializeFromParams(struct IVdsVolume *)",
    "public: long __thiscall CDriveConfiguration::IsMergeTargetWinRE(int *)",
    "public: long __thiscall CDriveConfiguration::GetConfigurationResult(void)",
    "public: long __thiscall CDriveConfiguration::Initialize(struct _BDECFG_PARAMS const *,struct _BDECFG_SIZE_REQUIREMENTS * const,class IConfigurationProgress *)",
    "public: unsigned long __thiscall CDriveConfiguration::GetTargetDiskNumber(void)",
    "private: static void __cdecl CBdeCfgLibraryLoader::InitializeAndHoldLibraryEntry(void *)",
    "public: unsigned long __thiscall CDriveConfiguration::GetNumberOfSteps(void)",
    "public: unsigned short __thiscall CDriveConfiguration::GetNewDriveLetter(void)",
    "BdeCfgCleanupOldBootFiles",
    "protected: virtual __thiscall CBcdWmiWrapper::~CBcdWmiWrapper(void)",
    "public: long __thiscall CBcdStore::RemapObjectDevices(unsigned short const *,unsigned short const *)",
    "public: __thiscall CDriveConfiguration::~CDriveConfiguration(void)",
    "private: long __thiscall CDriveConfiguration::SetConfigurationStep(enum _BDECFG_STEP_ID)",
    "BdeCfgGetBootVolume",
    "public: __thiscall CBcdStore::CBcdStore(class CBcdStore const &)",
    "BdeCfgGetMaxShrinkSize",
    "BdeCfgFindCandidateVolumes",
    "public: __thiscall CBdeCfgLibraryLoader::~CBdeCfgLibraryLoader(void)",
    "const CBcdWmiWrapper::`vftable'",
    "private: static void __cdecl CDriveConfiguration::CancelConfigurationEntry(void *)",
    "public: __thiscall CDriveConfiguration::CDriveConfiguration(void)",
    "BdeCfgLogInit",
    "private: static void __cdecl CDriveConfiguration::InitializeEntry(void *)",
    "BdeCfgLogClose",
    "BdeCfgUninitialize",
    "public: class CBdeCfgLibraryLoader & __thiscall CBdeCfgLibraryLoader::operator=(class CBdeCfgLibraryLoader const &)",
    "public: enum BDECFG_ACTION_TYPE __thiscall CDriveConfiguration::GetActionType(void)",
    "BdeCfgCanCreateActivePartOnDisk",
    "private: long __thiscall CDriveConfiguration::Thread_ConfigureDrive(void)",
    "public: long __thiscall CDriveConfiguration::CancelConfiguration(void)",
    "public: unsigned __int64 __thiscall CDriveConfiguration::GetShrinkSize(void)",
    "BdeCfgCheckVolumeAsCandidate",
    "public: __thiscall CBdeCfgLibraryLoader::CBdeCfgLibraryLoader(void)",
    "BdeCfgGetDeviceNameFromVolume",
    "BdeCfgFindBasicVolumeExtent",
    "BdeCfgFindVolumeWithName",
    "BdeCfgLogCommandLineParams",
    "private: long __thiscall CDriveConfiguration::CancelConfiguration_Thread(void)",
    "BdeCfgDisableWinRE",
    "public: virtual __thiscall CBcdStore::~CBcdStore(void)"
  ],
  "BioCredProv.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "BlbEvents.dll": "No exports",
  "BthMtpContextHandler.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "basecsp.dll": [
    "CPDeriveKey",
    "CPImportKey",
    "CPDestroyHash",
    "CPSetKeyParam",
    "CPGetHashParam",
    "CPSignHash",
    "CPDecrypt",
    "DllRegisterServer",
    "CPGetProvParam",
    "CPGetKeyParam",
    "CPDestroyKey",
    "CPEncrypt",
    "DllUnregisterServer",
    "CPSetHashParam",
    "CPHashSessionKey",
    "CPSetProvParam",
    "CPAcquireContext",
    "CPReleaseContext",
    "CPHashData",
    "CPCreateHash",
    "CPGenKey",
    "CPDuplicateKey",
    "CPVerifySignature",
    "CPAcquireContextW",
    "CPGenRandom",
    "CPExportKey",
    "CPGetUserKey",
    "CPDuplicateHash"
  ],
  "basesrv.dll": [
    "ServerDllInitialization",
    "BaseSetProcessCreateNotify",
    "BaseSrvRegisterSxS",
    "BaseSrvNlsUpdateRegistryCache",
    "BaseSrvNlsLogon"
  ],
  "batmeter.dll": [
    "SubscribeBatteryUpdateNotification",
    "GetBatMeterIconAnimationUpdate",
    "IsBatteryLevelCritical",
    "GetBatMeterIconAnimationTimeDelay",
    "PowerCapabilities",
    "UpdateBatteryDataAsync",
    "GetBatteryInfo",
    "CreateBatteryData",
    "BatMeterOnDeviceChange",
    "UnsubscribeBatteryUpdateNotification",
    "GetBatMeterIconAnimationState",
    "IsBatteryBad",
    "UpdateBatteryData",
    "CleanupBatteryData",
    "SetBatteryLevel",
    "QueryBatteryData",
    "GetBatteryWorkingState",
    "SetBatteryWorkingState",
    "IsBatteryLevelReserve",
    "IsBatteryLevelLow",
    "GetBatteryStatusText",
    "GetBatteryDetails"
  ],
  "batt.dll": [
    "BatteryClassInstall",
    "BatteryClassCoInstaller"
  ],
  "bcdprov.dll": [
    "DllRegisterServer",
    "DllGetClassObject",
    "DllMain"
  ],
  "bcdsrv.dll": [
    "DllRegisterServer",
    "DllGetClassObject",
    "DllMain"
  ],
  "bcrypt.dll": [
    "BCryptEnumContexts",
    "BCryptGetProperty",
    "BCryptSetContextFunctionProperty",
    "BCryptDestroyKey",
    "BCryptRegisterConfigChangeNotify",
    "BCryptAddContextFunctionProvider",
    "BCryptRegisterProvider",
    "BCryptFreeBuffer",
    "BCryptImportKeyPair",
    "BCryptEnumAlgorithms",
    "BCryptEnumContextFunctionProviders",
    "BCryptDuplicateKey",
    "BCryptDuplicateHash",
    "BCryptCloseAlgorithmProvider",
    "BCryptResolveProviders",
    "BCryptUnregisterConfigChangeNotify",
    "BCryptRemoveContextFunction",
    "BCryptAddContextFunction",
    "BCryptDeriveKeyCapi",
    "BCryptDestroyHash",
    "BCryptDeriveKey",
    "BCryptDestroySecret",
    "BCryptFinalizeKeyPair",
    "BCryptQueryContextFunctionConfiguration",
    "BCryptSignHash",
    "BCryptUnregisterProvider",
    "BCryptEnumContextFunctions",
    "BCryptFinishHash",
    "BCryptOpenAlgorithmProvider",
    "BCryptSetProperty",
    "BCryptCreateHash",
    "BCryptDeriveKeyPBKDF2",
    "BCryptDeleteContext",
    "BCryptGenerateSymmetricKey",
    "BCryptEnumProviders",
    "BCryptQueryProviderRegistration",
    "BCryptQueryContextConfiguration",
    "BCryptHashData",
    "BCryptGetFipsAlgorithmMode",
    "BCryptConfigureContextFunction",
    "BCryptEncrypt",
    "BCryptGenRandom",
    "BCryptGenerateKeyPair",
    "BCryptEnumRegisteredProviders",
    "BCryptImportKey",
    "BCryptDecrypt",
    "BCryptSecretAgreement",
    "BCryptCreateContext",
    "BCryptConfigureContext",
    "BCryptQueryContextFunctionProperty",
    "BCryptRemoveContextFunctionProvider",
    "BCryptSetAuditingInterface",
    "BCryptVerifySignature",
    "BCryptExportKey"
  ],
  "bcryptprimitives.dll": [
    "GetAsymmetricEncryptionInterface",
    "GetSecretAgreementInterface",
    "GetSignatureInterface",
    "GetCipherInterface",
    "GetHashInterface",
    "GetRngInterface"
  ],
  "bderepair.dll": [
    "FveCreateRestoreContext",
    "FveAuthWithPasswordW",
    "FveAuthWithKey",
    "FveSupplyKeyPackage",
    "FveGetMetadataFromRestoreContext",
    "FveSupplyInformationBlock",
    "FveDestroyRestoreContext",
    "FveDecryptData"
  ],
  "bdesvc.dll": [
    "ServiceMain"
  ],
  "bdeui.dll": [
    "private: long __thiscall BuiVolume::FormatNameAndMountPoint(void)",
    "public: bool __thiscall VolumeFveStatus::HasExternalKey(void)",
    "long __stdcall BuisDetectExistingWizard(unsigned short const *,unsigned short const *,unsigned short const *,void * *)",
    "public: long __thiscall BuiVolume::Disable(void)",
    "public: class VolumeFveStatus & __thiscall VolumeFveStatus::operator=(class VolumeFveStatus const &)",
    "private: long __thiscall BuiVolume::BasicDispatch(long,unsigned short const *,int *,long *)",
    "public: long __thiscall BuiVolume::UnlockWithPassword(unsigned short const *,int *)",
    "private: long __thiscall BuiVolume::AllowForegroundWindowDisplay(void)",
    "private: long __thiscall BuiVolume::ProxyGetPasswordId(unsigned short * *)",
    "public: bool __thiscall VolumeFveStatus::IsEncrypted(void)",
    "public: long __thiscall BuiVolume::AttemptAutoUnlock(void)",
    "private: long __thiscall BuiVolume::BasicDispatch(long,unsigned short const *,unsigned short * *)",
    "bool __stdcall BuisIsFipsEnabled(void)",
    "private: long __thiscall BuiVolume::ProxyUnlockVolumeWithSmartCard(struct HWND__ *,int *)",
    "public: bool __thiscall VolumeFveStatus::IsPartiallyConverted(void)",
    "public: long __thiscall BuiVolume::Decrypt(void)",
    "public: bool __thiscall VolumeFveStatus::FailedDryRun(void)",
    "public: bool __thiscall VolumeFveStatus::IsDecrypting(void)",
    "public: bool __thiscall VolumeFveStatus::IsConverting(void)",
    "public: bool __thiscall BuiVolume::HasAutoUnlockVolumesBound(void)",
    "private: long __thiscall BuiVolume::ProxyNeedsDiscoveryVolumeUpdate(int *)",
    "public: bool __thiscall VolumeFveStatus::IsEncrypting(void)",
    "private: long __thiscall BuiVolume::ProxyUnlockVolumeWithKey(unsigned short const *,int *)",
    "public: void __thiscall BuiVolume::ResetStatusRefreshing(void)",
    "public: void __thiscall BuiVolume::SetProxyObject(struct IDispatch *)",
    "private: long __thiscall BuiVolume::BasicDispatch(long,unsigned short const *,unsigned short const *,int *,long *)",
    "public: bool __thiscall VolumeFveStatus::IsRoamingDevice(void)",
    "public: __thiscall VolumeFveStatus::VolumeFveStatus(unsigned long,long)",
    "public: bool __thiscall BuiVolume::IsAutoUnlockEnabled(void)",
    "public: bool __thiscall VolumeFveStatus::HasSmartCardProtector(void)",
    "public: bool __thiscall VolumeFveStatus::IsSecure(void)",
    "public: double __thiscall BuiVolume::GetConvertedPercent(void)",
    "private: long __thiscall BuiVolume::ProxyUnlockVolumeWithPassword(unsigned short const *,int *)",
    "private: bool __thiscall BuiVolume::CanRefreshStatus(void)",
    "private: long __thiscall BuiVolume::FindMountPoint(void)",
    "public: void __thiscall BuiVolume::ResumeStatusRefreshing(void)",
    "private: long __thiscall BuiVolume::ProxyLaunchUpdate(void)",
    "long __stdcall BuisLaunchHelp(struct _GUID const &)",
    "private: long __thiscall BuiVolume::Dispatch(long,struct tagDISPPARAMS *,struct tagVARIANT *)",
    "public: long __thiscall BuiVolume::Init(unsigned short *)",
    "public: long __thiscall BuiVolume::PauseConversion(void)",
    "public: static unsigned int const BuiVolume::NO_DRIVE_LETTER",
    "public: long __thiscall BuiVolume::NeedsDiscoveryVolumeUpdate(int *)",
    "private: long __thiscall BuiVolume::ProxyPauseConversion(void)",
    "private: long __thiscall BuiVolume::ProxyGetProcessId(unsigned long *)",
    "public: bool __thiscall BuiVolume::RequiresElevation(void)",
    "private: long __thiscall BuiVolume::ProxyEnableAutoUnlock(void)",
    "private: long __thiscall BuiVolume::ProxyDisable(void)",
    "private: long __thiscall BuiVolume::BasicDispatch(long,unsigned short const *,long *)",
    "public: static void __stdcall BuiVolume::DeleteVolumeList(struct _BuiVolumeNode * *)",
    "private: long __thiscall BuiVolume::BasicDispatch(long,unsigned short const *,unsigned short const *,long *)",
    "private: long __thiscall BuiVolume::ProxyAttemptAutoUnlock(void)",
    "public: class BuiVolume & __thiscall BuiVolume::operator=(class BuiVolume const &)",
    "public: long __thiscall VolumeFveStatus::GetLastConvertStatus(void)",
    "public: bool __thiscall VolumeFveStatus::IsOn(void)",
    "private: long __thiscall BuiVolume::ProxyDecrypt(void)",
    "private: long __thiscall BuiVolume::ProxyGetDescription(unsigned short * *)",
    "public: long __thiscall BuiVolume::RefreshStatus(bool)",
    "public: long __thiscall BuiVolume::ResumeConversion(void)",
    "private: long __thiscall BuiVolume::ProxyResumeConversion(void)",
    "private: long __thiscall BuiVolume::ProxyServiceDiscoveryVolume(void)",
    "public: long __thiscall BuiVolume::ImplicitPauseConversion(void)",
    "public: long __thiscall BuiVolume::GetDescription(unsigned short * *)",
    "private: long __thiscall BuiVolume::ProxyAreVolumesBound(void)",
    "private: long __thiscall BuiVolume::BasicDispatch(long,unsigned short const *,struct tagVARIANT *)",
    "public: long __thiscall BuiVolume::UnlockWithPassphrase(unsigned short const *,int *)",
    "public: bool __thiscall VolumeFveStatus::HasPassphraseProtector(void)",
    "public: long __thiscall BuiVolume::GetPasswordId(unsigned short * *)",
    "public: static long __stdcall BuiVolume::GetAllVolumes(struct _BuiVolumeNode * *)",
    "public: long __thiscall BuiVolume::LaunchWizard(unsigned short)",
    "public: unsigned long __thiscall VolumeFveStatus::GetStatusFlags(void)",
    "long __stdcall BuisCreateProxyObject(struct IDispatch * *)",
    "protected: __thiscall VolumeFveStatus::VolumeFveStatus(void)",
    "public: bool __thiscall VolumeFveStatus::HasRecoveryData(void)",
    "public: __thiscall BuiVolume::BuiVolume(bool)",
    "private: long __thiscall BuiVolume::Dispatch(long,struct tagDISPPARAMS *,long *)",
    "public: bool __thiscall VolumeFveStatus::IsLocked(void)",
    "public: long __thiscall BuiVolume::EnableAutoUnlock(void)",
    "public: bool __thiscall VolumeFveStatus::HasPinProtector(void)",
    "public: __thiscall BuiVolume::BuiVolume(void)",
    "private: long __thiscall BuiVolume::ProxyImplicitPauseConversion(void)",
    "public: bool __thiscall BuiVolume::IsServerSku(void)",
    "long __stdcall BuisCreateElevatedProxyObject(struct HWND__ *,struct IDispatch * *)",
    "long __stdcall BuisIsHardwareReadyForConversion(void)",
    "public: long __thiscall BuiVolume::LaunchUpdate(void)",
    "public: bool __thiscall VolumeFveStatus::IsDecrypted(void)",
    "public: bool __thiscall VolumeFveStatus::NeedsRestart(void)",
    "public: bool __thiscall VolumeFveStatus::IsFveNotifyNecessary(void)",
    "public: bool __thiscall VolumeFveStatus::HasRecoveryPassword(void)",
    "private: long __thiscall BuiVolume::ProxyIsAutoUnlockEnabled(void)",
    "public: long __thiscall BuiVolume::UnlockWithKey(unsigned short const *,int *)",
    "public: bool __thiscall VolumeFveStatus::IsOsVolume(void)",
    "public: bool __thiscall VolumeFveStatus::IsDisabled(void)",
    "public: bool __thiscall VolumeFveStatus::HasStartupKeyProtector(void)",
    "public: bool __thiscall VolumeFveStatus::IsPaused(void)",
    "private: long __thiscall BuiVolume::ProxyLaunchWizard(unsigned short)",
    "private: long __thiscall BuiVolume::ProxyUnlockVolumeWithPassphrase(unsigned short const *,int *)",
    "public: void __thiscall BuiVolume::ClearProxyObject(void)",
    "public: bool __thiscall VolumeFveStatus::HasTpmProtector(void)",
    "public: static long __stdcall BuiVolume::GetOsVolume(class BuiVolume * *)",
    "public: __thiscall BuiVolume::~BuiVolume(void)",
    "private: void __thiscall BuiVolume::InitMembers(void)",
    "public: long __thiscall BuiVolume::ServiceDiscoveryVolume(void)",
    "public: long __thiscall BuiVolume::UnlockWithSmartCard(struct HWND__ *,int *)",
    "public: void __thiscall BuiVolume::SuspendStatusRefreshing(void)"
  ],
  "bidispl.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "biocpl.dll": [
    "WinBioPiiCleanup",
    "WinBioRemovePiiRunDll",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "WinBioInvokeFmaRunDll"
  ],
  "bitsigd.dll": [
    "UninitializeEx",
    "private: static struct GenericStringHandle::StringData GenericStringHandle::s_EmptyString",
    "InitializeEx"
  ],
  "bitsperf.dll": [
    "PerfMon_Close",
    "public: unsigned long __thiscall CPerfMon::Initialize(int)",
    "PerfMon_Collect",
    "private: void __thiscall CPerfMon::DetermineObjectsToCollect(struct CPerfMon::__OBJECT_ORD *)const",
    "private: unsigned char * __thiscall CPerfMon::GetCounter(struct CPerfMon::__COUNTER_ID *,struct CPerfMon::__INSTANCE_ID *)",
    "public: unsigned long __thiscall CPerfMon::Collect(unsigned short *,unsigned char * *,unsigned long *,unsigned long *)",
    "public: long * __thiscall CPerfMon::GetCounter32(struct CPerfMon::__COUNTER_ID *,struct CPerfMon::__INSTANCE_ID *)",
    "private: unsigned long __thiscall CPerfMon::InitializePerfMon(int)",
    "private: unsigned long __thiscall CPerfMon::CalcBytesForPerfObject(struct CPerfMon::__OBJECT_ORD *)const",
    "private: int __thiscall CPerfMon::IsValidObjOrd(struct CPerfMon::__OBJECT_ORD *)const",
    "private: struct CPerfMon::_PERF_ITEM * __thiscall CPerfMon::CounterIdToPerfItem(struct CPerfMon::__COUNTER_ID *)const",
    "private: unsigned long __thiscall CPerfMon::VerifyPerfItemTable(void)",
    "private: unsigned long __thiscall CPerfMon::CollectAnObject(struct CPerfMon::__OBJECT_ORD *,unsigned char * *)const",
    "public: __thiscall CPerfMon::CPerfMon(unsigned short *,struct CPerfMon::_PERF_ITEM *)",
    "private: int __thiscall CPerfMon::IsValidInstId(struct CPerfMon::__OBJECT_ORD *,struct CPerfMon::__INSTANCE_ID *)const",
    "private: struct CPerfMon::_PERF_ITEM * __thiscall CPerfMon::CounterOrdToPerfItem(struct CPerfMon::__OBJECT_ORD *,struct CPerfMon::__COUNTER_ORD *)const",
    "PerfMon_Open",
    "private: void __thiscall CPerfMon::CalcPerfMetrics(struct CPerfMon::__OBJECT_ORD *,struct CPerfMon::__INSTANCE_ID *,struct CPerfMon::_PERF_METRICS *,struct CPerfMon::_PERF_ITEM * *)const",
    "private: int __thiscall CPerfMon::ConvertInstIdToInUseInstId(struct CPerfMon::__OBJECT_ORD *,struct CPerfMon::__INSTANCE_ID *)const",
    "private: int __thiscall CPerfMon::ObjectOrdToPerfItemIndex(struct CPerfMon::__OBJECT_ORD *)const",
    "private: struct CPerfMon::__OBJECT_ORD * __thiscall CPerfMon::CounterIdToObjectOrd(struct CPerfMon::__COUNTER_ID *,int *)const",
    "private: unsigned long __thiscall CPerfMon::CollectAllObjects(unsigned short *,unsigned char * *,unsigned long *,unsigned long *)const",
    "private: struct CPerfMon::__OBJECT_ORD * __thiscall CPerfMon::ObjectIdToObjectOrd(struct CPerfMon::__OBJECT_ID *)const",
    "private: int __thiscall CPerfMon::IdToPerfItemIndex(int,unsigned long)const",
    "public: __thiscall CPerfMon::~CPerfMon(void)",
    "private: struct CPerfMon::_PERF_ITEM * __thiscall CPerfMon::ObjectOrdToPerfItem(struct CPerfMon::__OBJECT_ORD *)const",
    "private: int __thiscall CPerfMon::HowManyInstancesAreInUse(struct CPerfMon::__OBJECT_ORD *)const",
    "public: __int64 * __thiscall CPerfMon::GetCounter64(struct CPerfMon::__COUNTER_ID *,struct CPerfMon::__INSTANCE_ID *)",
    "public: class CPerfMon & __thiscall CPerfMon::operator=(class CPerfMon const &)",
    "private: int __thiscall CPerfMon::ObjectIdToPerfItemIndex(struct CPerfMon::__OBJECT_ID *)const",
    "private: int __thiscall CPerfMon::CounterIdToPerfItemIndex(struct CPerfMon::__COUNTER_ID *,int *)const",
    "private: struct CPerfMon::_PERF_ITEM * __thiscall CPerfMon::ObjectIdToPerfItem(struct CPerfMon::__OBJECT_ID *)const"
  ],
  "bitsprx2.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "bitsprx3.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "bitsprx4.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "bitsprx5.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "bitsprx6.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "blackbox.dll": [
    "IBlackBox_CreateInstanceEx",
    "IBlackBox_CreateInstance2",
    "IBlackBox_CreateInstance",
    "DllMain",
    "DllUnregisterServer",
    "IBlackBox_DestroyInstance",
    "IBlackBox_CreateInstanceEx2",
    "DllRegisterServer"
  ],
  "blb_ps.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "blbres.dll": "No exports",
  "bootres.dll": "No exports",
  "bootstr.dll": "No exports",
  "brdgcfg.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "bridgeres.dll": "No exports",
  "browcli.dll": [
    "I_BrowserQueryEmulatedDomains",
    "I_BrowserResetStatistics",
    "I_BrowserServerEnum",
    "NetServerEnumEx",
    "I_BrowserQueryStatistics",
    "I_BrowserResetNetlogonState",
    "I_BrowserDebugCall",
    "NetServerEnum",
    "I_BrowserDebugTrace",
    "I_BrowserQueryOtherDomains",
    "I_BrowserSetNetlogonState",
    "NetBrowserStatisticsGet"
  ],
  "browser.dll": [
    "I_BrowserServerEnumForXactsrv",
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "browseui.dll": [
    "DllGetVersion"
  ],
  "bthci.dll": [
    "BluetoothClassInstaller"
  ],
  "bthpanapi.dll": [
    "BluetoothFindNetworkClose",
    "BluetoothDisconnectFromNetwork",
    "BluetoothGetNetworkInterfaceId",
    "BluetoothUnregisterNetworkNotifications",
    "BluetoothRegisterNetworkNotifications",
    "BluetoothConnectToNetwork",
    "BluetoothFindFirstNetwork",
    "BluetoothCloseNetworkHandle",
    "BluetoothFindNextNetwork",
    "BluetoothGetNetworkAddress",
    "BluetoothGetNetworkName",
    "BluetoothGetNetworkContainerId",
    "BluetoothGetNetworkStatus",
    "BluetoothGetNetworkAvailableRoles"
  ],
  "bthserv.dll": [
    "ServiceMain"
  ],
  "btpanui.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "CHxReadingStringIME.dll": [
    "GetReadingString",
    "ShowReadingWindow"
  ],
  "CIRCoInst.dll": [
    "IRCoInstaller"
  ],
  "COLORCNV.DLL": [
    "CreateInstance",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "CPFilters.dll": [
    "UpdateWMDRM",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "UpdatePlayready",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "CRPPresentation.dll": [
    "PresentationAttendeeGetControlLevel",
    "PresentationAttendeeSetControlLevel",
    "PresentationSetColorDepth",
    "PresentationStart",
    "PresentationAttendeeGetName",
    "PresentationCreateInvitation",
    "PresentationEnableAppSharing",
    "PresentationParseInvitation",
    "PresentationUpdateSharedRect",
    "PresentationProjectorConnect",
    "PresentationProjectorGetName",
    "PresentationProjectorConnectUrl",
    "PresentationSetDefaultControlLevel",
    "PresentationGetResolution",
    "PresentationStop",
    "PresentationPause",
    "PresentationProjectorSetControlLevel",
    "PresentationAttendeeDisconnect"
  ],
  "C_G18030.DLL": [
    "NlsDllCodePageTranslation"
  ],
  "C_IS2022.DLL": [
    "NlsDllCodePageTranslation"
  ],
  "C_ISCII.DLL": [
    "NlsDllCodePageTranslation"
  ],
  "CardGames.dll": "No exports",
  "CertEnroll.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "CertEnrollUI.dll": [
    "CreateUIObject"
  ],
  "CertPolEng.dll": [
    "PstGetCertificates",
    "PstGetUserNameForCertificate",
    "PstValidate",
    "PstMapCertificate",
    "PstGetTrustAnchors",
    "PstAcquirePrivateKey"
  ],
  "CscMig.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "cabinet.dll": [
    "FDICopy",
    "FDICreate",
    "FCIFlushCabinet",
    "FDIDestroy",
    "FCIAddFile",
    "Extract",
    "FCICreate",
    "GetDllVersion",
    "FDIIsCabinet",
    "DeleteExtractedFiles",
    "FDITruncateCabinet",
    "FCIFlushFolder",
    "FCIDestroy",
    "DllGetVersion"
  ],
  "cabview.dll": [
    "DllCanUnloadNow",
    "Uninstall",
    "DllGetClassObject"
  ],
  "capiprovider.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "capisp.dll": [
    "CryptoSysPrep_Clean",
    "CAPISysPrep_Generalize",
    "CryptoSysPrep_Specialize"
  ],
  "catsrv.dll": [
    "long __stdcall CancelWriteICR(struct IComponentRecords * *)",
    "GetCatalogCRMClerk",
    "long __stdcall GetReadICR(int,struct IComponentRecords * *)",
    "long __stdcall GetWriteICR(struct IComponentRecords * *)",
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "long __stdcall SaveWriteICR(struct IComponentRecords * *)",
    "OpenComponentLibraryTS",
    "CreateComponentLibraryTS",
    "DllGetClassObject",
    "GetAppImport",
    "DllRegisterServer",
    "void __stdcall ReleaseReadICR(struct IComponentRecords * *)"
  ],
  "catsrvps.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "catsrvut.dll": [
    "WinlogonHandlePendingInfOperations",
    "public: __thiscall CComPlusObject::CComPlusObject(class CComPlusObject const &)",
    "public: class CComPlusInterface & __thiscall CComPlusInterface::operator=(class CComPlusInterface const &)",
    "DllRegisterServer",
    "CreateComRegDBWriter",
    "public: struct ITypeLib * __thiscall CComPlusTypelib::GetITypeLib(void)",
    "RunMTSToCom",
    "public: __thiscall CComPlusComponent::CComPlusComponent(class CComPlusComponent const &)",
    "public: __thiscall CComPlusInterface::CComPlusInterface(class CComPlusInterface const &)",
    "public: class CComPlusObject & __thiscall CComPlusObject::operator=(class CComPlusObject const &)",
    "DllUnregisterServer",
    "QueryUserDllW",
    "public: class CComPlusMethod & __thiscall CComPlusMethod::operator=(class CComPlusMethod const &)",
    "public: __thiscall CComPlusMethod::CComPlusMethod(class CComPlusMethod const &)",
    "COMPlusUninstallActionW",
    "FindAssemblyModulesW",
    "const CComPlusObject::`vftable'",
    "DestroyComRegDBWriter",
    "public: class CComPlusComponent & __thiscall CComPlusComponent::operator=(class CComPlusComponent const &)",
    "public: virtual __thiscall CComPlusComponent::~CComPlusComponent(void)",
    "const CComPlusComponent::`vftable'",
    "RegDBBackup",
    "StartMTSTOCOM",
    "public: virtual __thiscall CComPlusInterface::~CComPlusInterface(void)",
    "SysprepComplus",
    "ManagedRequestW",
    "DllCanUnloadNow",
    "RegDBRestore",
    "const CComPlusInterface::`vftable'",
    "const CComPlusMethod::`vftable'",
    "DllGetClassObject",
    "public: class CComPlusTypelib & __thiscall CComPlusTypelib::operator=(class CComPlusTypelib const &)",
    "CGMIsAdministrator",
    "SysprepComplus2"
  ],
  "cca.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "cdd.dll": "No exports",
  "cdosys.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "certCredProvider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "certcli.dll": [
    "CACertTypeSetSecurity",
    "CACreateAutoEnrollmentObjectEx",
    "CARemoveCACertificateTypeEx",
    "CACountCertTypes",
    "CAOIDCreateNew",
    "CACertTypeUnregisterQuery",
    "CAFindCertTypeByName",
    "CAIsCertTypeCurrent",
    "CACertTypeRegisterQuery",
    "CAUpdateCAEx",
    "CAOIDSetPropertyEx",
    "CAOIDFreeLdapURL",
    "CAOIDGetPropertyEx",
    "CAOIDAddEx",
    "CADeleteLocalAutoEnrollmentObject",
    "CACreateLocalAutoEnrollmentObject",
    "CASetCertTypeKeySpec",
    "CAIsCertTypeCurrentEx",
    "CAGetCACertificate",
    "CADeleteCAEx",
    "CAGetCertTypeFlagsEx",
    "CAOIDDelete",
    "CAOIDFreeProperty",
    "CACertTypeQuery",
    "CAOIDAdd",
    "CASetCertTypeFlagsEx",
    "CAGetCertTypeFlags",
    "CAFindByCertType",
    "CACloseCertType",
    "CAUpdateCA",
    "CACountCAs",
    "CAUpdateCertType",
    "CAGetCertTypePropertyEx",
    "CACertTypeAccessCheck",
    "CAGetCAProperty",
    "CAGetCertTypeProperty",
    "DllCanUnloadNow",
    "CAEnumFirstCA",
    "CACreateCertType",
    "CAEnumCertTypesForCA",
    "CADeleteCertTypeEx",
    "DllGetClassObject",
    "CAGetConfigStringFromUIPicker",
    "CASetCertTypeFlags",
    "CAInstallDefaultCertType",
    "CASetCAFlags",
    "CASetCAProperty",
    "CAEnumNextCA",
    "CARemoveCACertificateType",
    "CASetCAExpiration",
    "CASetCertTypeProperty",
    "CAGetCAExpiration",
    "CASetCACertificate",
    "CAGetCertTypeExpiration",
    "CACertTypeAccessCheckEx",
    "GetProxyDllInfo",
    "CAFindByIssuerDN",
    "CAOIDGetProperty",
    "CAEnumNextCertType",
    "CAOIDSetProperty",
    "CAGetCertTypeExtensionsEx",
    "CAGetCertTypeExtensions",
    "CAOIDCreateNewEx",
    "CAOIDGetLdapURL",
    "CADCSetCertTypePropertyEx",
    "CAGetCASecurity",
    "CAEnumCertTypes",
    "CAOIDDeleteEx",
    "CADeleteCA",
    "CACreateNewCA",
    "CAFreeCAProperty",
    "CAGetCAFlags",
    "CAAccessCheck",
    "CAAccessCheckEx",
    "CAGetDN",
    "CAAddCACertificateType",
    "DllRegisterServer",
    "CACertTypeGetSecurity",
    "DllUnregisterServer",
    "CAUpdateCertTypeEx",
    "CADeleteCertType",
    "CAFindByName",
    "CASetCertTypePropertyEx",
    "CASetCertTypeExpiration",
    "CACertTypeAuthzAccessCheck",
    "CAFreeCertTypeProperty",
    "CASetCASecurity",
    "CASetCertTypeExtension",
    "CACloneCertType",
    "CAEnumCertTypesForCAEx",
    "CAFreeCertTypeExtensions",
    "CAInstallDefaultCertTypeEx",
    "DllInstall",
    "CACloseCA",
    "CAAddCACertificateTypeEx",
    "CAEnumCertTypesEx",
    "CAGetCertTypeKeySpec"
  ],
  "certenc.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "certmgr.dll": [
    "DllInstall",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "certprop.dll": [
    "ScPolicyServiceMain",
    "SvchostPushServiceGlobals",
    "CertPropServiceMain"
  ],
  "cewmdm.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "cfgbkend.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "IID_ISettingsComp2",
    "IID_ICfgComp",
    "DllGetClassObject",
    "IID_ISettingsComp",
    "DllRegisterServer",
    "CLSID_CfgComp"
  ],
  "cfgmgr32.dll": [
    "CMP_UnregisterNotification",
    "CM_Get_Hardware_Profile_Info_ExW",
    "CM_Get_Resource_Conflict_Count",
    "CM_Query_And_Remove_SubTree_ExA",
    "CM_Get_Class_NameA",
    "CM_Setup_DevNode_Ex",
    "CM_Get_Device_ID_ExA",
    "CM_Set_HW_Prof",
    "CM_Request_Eject_PC",
    "CM_Create_DevNodeW",
    "CM_Delete_DevNode_Key_Ex",
    "CM_Get_Device_IDW",
    "CM_Enumerate_Classes_Ex",
    "CM_Get_DevNode_Registry_PropertyW",
    "CM_Set_HW_Prof_Flags_ExW",
    "CM_Get_Device_Interface_Alias_ExA",
    "CM_Set_DevNode_Property_ExW",
    "CM_Get_Sibling_Ex",
    "CM_Get_DevNode_Property_Keys",
    "CM_Set_Device_Interface_Property_ExW",
    "CM_Add_Driver_Package_ExW",
    "CMP_GetServerSideDeviceInstallFlags",
    "CM_Duplicate_PowerScheme",
    "CM_Get_Device_Interface_Property_KeysW",
    "CM_Remove_SubTree_Ex",
    "CM_Query_Remove_SubTree_Ex",
    "CM_Free_Log_Conf_Handle",
    "CM_Get_Device_Interface_List_ExW",
    "CM_Get_Class_Registry_PropertyW",
    "CM_Locate_DevNodeA",
    "CM_Free_Resource_Conflict_Handle",
    "CM_Get_Next_Res_Des",
    "CM_Query_And_Remove_SubTreeA",
    "CM_MapCrToWin32Err",
    "CM_Open_Class_Key_ExA",
    "CM_Reenumerate_DevNode",
    "CM_Restore_DefaultPowerScheme",
    "CM_Set_Class_PropertyW",
    "CM_Get_Device_Interface_PropertyW",
    "CM_Query_Resource_Conflict_List",
    "CM_Install_DevNodeW",
    "CM_Enumerate_EnumeratorsA",
    "CM_Add_Res_Des",
    "CM_Get_Sibling",
    "CM_Intersect_Range_List",
    "CM_Set_DevNode_Problem",
    "CM_Locate_DevNodeW",
    "CM_Request_Device_EjectW",
    "CM_Locate_DevNode_ExA",
    "CM_Register_Device_Driver",
    "CM_Detect_Resource_Conflict",
    "CM_Disconnect_Machine",
    "CM_Reenumerate_DevNode_Ex",
    "CM_Delete_Class_Key",
    "CM_Delete_DevNode_Key",
    "CM_Unregister_Device_InterfaceA",
    "CM_Get_Depth_Ex",
    "CM_Get_Class_Property_Keys_Ex",
    "CM_Enable_DevNode",
    "CM_Set_HW_Prof_FlagsA",
    "CM_Free_Log_Conf",
    "CM_Create_DevNodeA",
    "CM_Get_Device_Interface_Property_ExW",
    "CM_Get_Class_Key_Name_ExW",
    "CM_Delete_Device_Interface_Key_ExW",
    "CM_Get_DevNode_Registry_Property_ExW",
    "CM_Get_Device_Interface_ListA",
    "CM_Register_Device_InterfaceA",
    "CM_Set_DevNode_Registry_Property_ExA",
    "CM_Is_Dock_Station_Present",
    "CM_Query_Arbitrator_Free_Size_Ex",
    "CM_Get_Device_ID_List_ExA",
    "CM_Get_Device_ID_List_ExW",
    "CM_Get_Res_Des_Data",
    "CM_Move_DevNode_Ex",
    "CM_Set_Class_Property_ExW",
    "CM_Get_DevNode_Registry_Property_ExA",
    "CM_Get_Device_Interface_AliasW",
    "CM_Get_DevNode_Property_Keys_Ex",
    "CM_Get_Parent_Ex",
    "CM_Get_Child_Ex",
    "CM_First_Range",
    "CM_Delete_Device_Interface_Key_ExA",
    "CM_Enumerate_Enumerators_ExA",
    "CM_Get_Device_ID_List_Size_ExA",
    "CM_Get_Res_Des_Data_Size_Ex",
    "CM_Request_Eject_PC_Ex",
    "CM_Enumerate_Classes",
    "CM_Free_Res_Des",
    "CM_Free_Res_Des_Ex",
    "CM_RestoreAll_DefaultPowerSchemes",
    "CM_Setup_DevNode",
    "CM_Open_Class_KeyW",
    "CM_Set_HW_Prof_Ex",
    "CM_Get_Device_Interface_List_SizeW",
    "CM_Set_DevNode_Registry_PropertyW",
    "CM_Query_Arbitrator_Free_Data",
    "CM_Unregister_Device_InterfaceW",
    "CM_Free_Range_List",
    "CM_Query_Remove_SubTree",
    "CM_Get_Device_Interface_List_Size_ExA",
    "CM_Get_Child",
    "CM_Get_DevNode_Status",
    "CM_Get_Device_ID_Size_Ex",
    "CM_Get_Version",
    "CM_Add_Driver_PackageW",
    "CM_Locate_DevNode_ExW",
    "CM_Add_Empty_Log_Conf_Ex",
    "CM_Modify_Res_Des",
    "CM_Get_Device_Interface_AliasA",
    "CM_Request_Device_EjectA",
    "CM_Create_DevNode_ExA",
    "CM_Get_Depth",
    "CM_Connect_MachineW",
    "CM_Register_Device_Driver_Ex",
    "CM_Get_Device_IDA",
    "CM_Get_Class_Registry_PropertyA",
    "CM_Get_Global_State_Ex",
    "CM_Modify_Res_Des_Ex",
    "CM_Get_Class_NameW",
    "CM_Get_Device_Interface_List_ExA",
    "CM_Run_Detection",
    "CM_Set_ActiveScheme",
    "CM_Delete_Driver_PackageW",
    "CM_Enable_DevNode_Ex",
    "CM_Get_Resource_Conflict_DetailsA",
    "CM_Get_Device_Interface_Alias_ExW",
    "CM_Get_Log_Conf_Priority",
    "CM_Delete_Device_Interface_KeyW",
    "CM_Get_Class_Key_Name_ExA",
    "CM_Get_Device_ID_List_SizeW",
    "CM_Install_DevNode_ExW",
    "CM_Disable_DevNode",
    "CM_Open_Device_Interface_Key_ExA",
    "CM_Uninstall_DevNode",
    "CM_Open_Device_Interface_KeyA",
    "CM_Get_Class_Name_ExA",
    "CM_Get_HW_Prof_Flags_ExA",
    "CM_Get_Device_ID_ExW",
    "CMP_WaitNoPendingInstallEvents",
    "CM_Get_Class_PropertyW",
    "CM_Get_Device_ID_ListW",
    "CM_Get_Hardware_Profile_InfoW",
    "CM_Get_HW_Prof_FlagsA",
    "CM_Get_Device_Interface_List_Size_ExW",
    "CM_Delete_Class_Key_Ex",
    "CMP_RegisterNotification",
    "CM_Move_DevNode",
    "CM_Unregister_Device_Interface_ExA",
    "CM_Disable_DevNode_Ex",
    "CM_Get_Global_State",
    "CM_Get_First_Log_Conf_Ex",
    "CM_Delete_Device_Interface_KeyA",
    "CM_Get_DevNode_PropertyW",
    "CMP_WaitServicesAvailable",
    "CM_Enumerate_Enumerators_ExW",
    "CM_Import_PowerScheme",
    "CM_Remove_SubTree",
    "CM_Add_Range",
    "CM_Register_Device_InterfaceW",
    "CM_Set_HW_Prof_Flags_ExA",
    "CM_Set_Class_Registry_PropertyA",
    "CM_Get_DevNode_Custom_PropertyA",
    "CM_Set_DevNode_Registry_PropertyA",
    "CM_Set_DevNode_Registry_Property_ExW",
    "CM_Create_Range_List",
    "CM_Get_Hardware_Profile_Info_ExA",
    "CM_Add_Empty_Log_Conf",
    "CM_Open_Device_Interface_Key_ExW",
    "CM_Get_Next_Log_Conf",
    "CM_Get_Next_Log_Conf_Ex",
    "CM_Detect_Resource_Conflict_Ex",
    "CM_Uninstall_DevNode_Ex",
    "CM_Set_DevNode_Problem_Ex",
    "CM_Invert_Range_List",
    "CM_Is_Dock_Station_Present_Ex",
    "CM_Is_Version_Available_Ex",
    "CM_Get_Class_Property_ExW",
    "CM_Get_DevNode_Property_ExW",
    "CM_Get_DevNode_Status_Ex",
    "CM_Get_Device_ID_List_Size_ExW",
    "CMP_GetBlockedDriverInfo",
    "CM_Is_Version_Available",
    "CM_Apply_PowerScheme",
    "CM_Next_Range",
    "CM_Get_Device_Interface_ListW",
    "CM_Get_First_Log_Conf",
    "CM_Get_Log_Conf_Priority_Ex",
    "CM_Get_Parent",
    "CMP_Init_Detection",
    "CM_Get_Class_Property_Keys",
    "CM_Get_DevNode_Custom_Property_ExA",
    "CM_Set_Class_Registry_PropertyW",
    "CM_Open_Device_Interface_KeyW",
    "CM_Get_Res_Des_Data_Size",
    "CM_Query_Arbitrator_Free_Size",
    "CM_Get_Resource_Conflict_DetailsW",
    "CM_Test_Range_Available",
    "CM_Get_DevNode_Registry_PropertyA",
    "CM_Get_Device_ID_ListA",
    "CM_Get_Res_Des_Data_Ex",
    "CMP_Report_LogOn",
    "CM_Delete_Driver_Package_ExW",
    "CM_Add_IDA",
    "CM_Get_Device_Interface_Property_Keys_ExW",
    "CM_Open_DevNode_Key",
    "CM_Open_Class_Key_ExW",
    "CM_Enumerate_EnumeratorsW",
    "CM_Get_HW_Prof_FlagsW",
    "CM_Register_Device_Interface_ExW",
    "CM_Open_DevNode_Key_Ex",
    "CM_Get_Class_Name_ExW",
    "CM_Query_And_Remove_SubTreeW",
    "CM_Add_IDW",
    "CM_Set_HW_Prof_FlagsW",
    "CM_Get_Hardware_Profile_InfoA",
    "CM_Find_Range",
    "CM_Unregister_Device_Interface_ExW",
    "CM_Add_ID_ExW",
    "CM_Get_Device_Interface_List_SizeA",
    "CM_Free_Log_Conf_Ex",
    "CM_Run_Detection_Ex",
    "CM_Query_And_Remove_SubTree_ExW",
    "CM_Get_Device_ID_List_SizeA",
    "CM_Open_Class_KeyA",
    "CM_Query_Arbitrator_Free_Data_Ex",
    "CM_Delete_PowerScheme",
    "CM_Delete_Range",
    "CM_Get_DevNode_Custom_PropertyW",
    "CM_Get_Next_Res_Des_Ex",
    "CM_Merge_Range_List",
    "CM_MapCrToSpErr",
    "CM_Set_DevNode_PropertyW",
    "CM_Dup_Range_List",
    "CM_Get_Class_Key_NameW",
    "CM_Get_Version_Ex",
    "CM_Write_UserPowerKey",
    "CM_Register_Device_Interface_ExA",
    "CM_Get_Class_Key_NameA",
    "CM_Get_HW_Prof_Flags_ExW",
    "CM_Request_Device_Eject_ExA",
    "CM_Get_Device_ID_Size",
    "CM_Set_Device_Interface_PropertyW",
    "CM_Create_DevNode_ExW",
    "CM_Request_Device_Eject_ExW",
    "CM_Free_Res_Des_Handle",
    "CM_Add_ID_ExA",
    "CM_Connect_MachineA",
    "CM_Get_DevNode_Custom_Property_ExW",
    "CM_Add_Res_Des_Ex"
  ],
  "chkwudrv.dll": [
    "WUFindMatchingDriver",
    "CancelWUOperation",
    "IsWUAvailable",
    "WUInstallBestUpdate",
    "ReleaseWUContext",
    "OpenWUContext",
    "RemoveWUDirectory",
    "WUDownloadUpdatedFiles",
    "WUExpandUpdateToPath"
  ],
  "chsbrkr.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "chtbrkr.dll": [
    "CreateWBInstance",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "CreateSmartLexInstance",
    "CreateMyProperNounInstance",
    "CreateMyRuleLexInstance",
    "CreateLexInstance",
    "CreateTermLearnInstance",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "ci.dll": [
    "CiGetPEInformation",
    "CiInitialize",
    "CiFreePolicyInfo",
    "CiVerifyHashInCatalog",
    "CiCheckSignedFile",
    "CiFindPageHashesInCatalog",
    "CiFindPageHashesInSignedFile"
  ],
  "cic.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "clb.dll": [
    "ClbSetColumnWidths",
    "ClbAddData",
    "ClbStyleW",
    "ClbWndProc",
    "CustomControlInfoW"
  ],
  "clbcatq.dll": [
    "InprocServer32FromString",
    "ComPlusRemoteAccessEnabled",
    "DowngradeAPL",
    "SetupOpen",
    "ComPlusEnableRemoteAccess",
    "ActivatorUpdateForIsRouterChanges",
    "GetSimpleTableDispenser",
    "ComPlusPartitionsEnabled",
    "DllRegisterServer",
    "ServerGetApplicationType",
    "CLSIDFromStringByBitness",
    "CreateComponentLibraryEx",
    "DllUnregisterServer",
    "UpdateFromComponentChange",
    "SetSetupSave",
    "ComPlusEnablePartitions",
    "ComPlusMigrate",
    "GetGlobalBabyJITEnabled",
    "SetupSave",
    "OpenComponentLibraryOnStreamEx",
    "OpenComponentLibraryEx",
    "GetCatalogObject2",
    "OpenComponentLibraryOnMemEx",
    "DllCanUnloadNow",
    "CheckMemoryGates",
    "SetSetupOpen",
    "GetComputerObject",
    "DllGetClassObject",
    "CoRegCleanup",
    "UpdateFromAppChange",
    "DeleteAllActivatorsForClsid",
    "GetCatalogObject"
  ],
  "clfsw32.dll": [
    "RegisterManageableLogClient",
    "PrepareLogArchive",
    "RemoveLogContainerSet",
    "ReadLogArchiveMetadata",
    "GetNextLogArchiveExtent",
    "FlushLogToLsn",
    "LsnLess",
    "ReadLogRecord",
    "GetLogReservationInfo",
    "AdvanceLogBase",
    "SetLogArchiveMode",
    "LsnInvalid",
    "DeleteLogFile",
    "RemoveLogContainer",
    "DeleteLogByHandle",
    "LsnRecordSequence",
    "ReadLogNotification",
    "LsnBlockOffset",
    "TerminateReadLog",
    "CloseAndResetLogFile",
    "GetLogFileInformation",
    "LsnNull",
    "CreateLogMarshallingArea",
    "CreateLogFile",
    "ReadLogRestartArea",
    "CLFS_LSN_NULL",
    "CreateLogContainerScanContext",
    "FreeReservedLog",
    "DumpLogRecords",
    "AlignReservedLog",
    "RemoveLogPolicy",
    "ReadNextLogRecord",
    "SetLogArchiveTail",
    "ValidateLog",
    "LogTailAdvanceFailure",
    "ReadPreviousLogRestartArea",
    "LsnIncrement",
    "LsnCreate",
    "ScanLogContainers",
    "CLFS_LSN_INVALID",
    "ReserveAndAppendLogAligned",
    "FlushLogBuffers",
    "RegisterForLogWriteNotification",
    "LsnEqual",
    "DeregisterManageableLogClient",
    "SetLogFileSizeWithPolicy",
    "TerminateLogArchive",
    "AddLogContainer",
    "WriteLogRestartArea",
    "GetLogIoStatistics",
    "LsnGreater",
    "InstallLogPolicy",
    "QueryLogPolicy",
    "AddLogContainerSet",
    "DeleteLogMarshallingArea",
    "AllocReservedLog",
    "GetLogContainerName",
    "HandleLogFull",
    "LsnContainer",
    "LsnDecrement",
    "ReserveAndAppendLog",
    "SetEndOfLog",
    "TruncateLog"
  ],
  "cliconfg.dll": [
    "OnInitDialogMain",
    "CPlApplet",
    "ClientConfigureAddEdit"
  ],
  "clusapi.dll": [
    "SetClusterServiceAccountPassword",
    "GetClusterResourceTypeKey",
    "RemoveResourceFromClusterSharedVolumes",
    "ClusterEnumEx",
    "ClusterNodeGetEnumCount",
    "ClusterRegBatchAddCommand",
    "GetClusterGroupKey",
    "ClusterNodeCloseEnumEx",
    "FailClusterResource",
    "DeleteClusterGroup",
    "CreateClusterNotifyPort",
    "SetClusterName",
    "OpenClusterNode",
    "ClusterRegEnumValue",
    "OpenClusterNetwork",
    "SetClusterNetworkPriorityOrder",
    "SetClusterResourceName",
    "ClusterRegSetKeySecurity",
    "ClusterNetInterfaceControl",
    "ClusterRegCreateBatch",
    "ClusterNetworkEnum",
    "ClusterRegQueryInfoKey",
    "ClusterResourceOpenEnum",
    "CloseCluster",
    "ClusterGroupEnum",
    "OpenClusterResourceEx",
    "ClusterGetEnumCountEx",
    "OnlineClusterResource",
    "OpenClusterResource",
    "SetClusterGroupName",
    "SetClusterResourceDependencyExpression",
    "OpenClusterGroupEx",
    "ClusterNodeOpenEnumEx",
    "ClusterNetworkOpenEnum",
    "OfflineClusterGroup",
    "ClusterRegCreateBatchNotifyPort",
    "GetClusterNetInterfaceKey",
    "PauseClusterNode",
    "GetClusterNotify",
    "ClusterNodeGetEnumCountEx",
    "OpenClusterNetInterfaceEx",
    "OpenClusterGroup",
    "GetClusterQuorumResource",
    "ClusterResourceCloseEnum",
    "BackupClusterDatabase",
    "GetClusterResourceState",
    "GetClusterNodeId",
    "AddClusterResourceNode",
    "GetClusterNetInterface",
    "CreateClusterGroup",
    "CloseClusterNetwork",
    "AddClusterNode",
    "OpenClusterEx",
    "ClusterRegQueryValue",
    "ClusterNodeOpenEnum",
    "ClusterRegCloseBatchNotifyPort",
    "DestroyClusterGroup",
    "GetClusterFromGroup",
    "EvictClusterNode",
    "GetClusterResourceNetworkName",
    "MoveClusterGroup",
    "ChangeClusterResourceGroup",
    "ClusterRegGetBatchNotification",
    "ClusterRegBatchCloseNotification",
    "OpenCluster",
    "ClusterRegEnumKey",
    "SetClusterNetworkName",
    "IsFileOnClusterSharedVolume",
    "SetClusterQuorumResource",
    "ClusterNetworkCloseEnum",
    "RestoreClusterDatabase",
    "OpenClusterNetInterface",
    "ClusterResourceTypeCloseEnum",
    "CreateClusterResourceType",
    "ClusterRegGetKeySecurity",
    "ClusterRegDeleteValue",
    "GetClusterSharedVolumeNameForFile",
    "GetClusterNetworkKey",
    "SetClusterGroupNodeList",
    "ClusterResourceTypeEnum",
    "ClusterResourceTypeControl",
    "GetClusterFromNode",
    "OnlineClusterGroup",
    "GetClusterResourceKey",
    "GetClusterFromNetwork",
    "GetClusterNodeKey",
    "ClusterGetEnumCount",
    "CanResourceBeDependent",
    "DestroyCluster",
    "EvictClusterNodeEx",
    "CloseClusterGroup",
    "ClusterEnum",
    "ClusterResourceControl",
    "ClusterOpenEnum",
    "GetClusterGroupState",
    "ResumeClusterNode",
    "DeleteClusterResourceType",
    "GetClusterFromResource",
    "ClusterNetworkControl",
    "CreateClusterResource",
    "CloseClusterNotifyPort",
    "ClusterRegDeleteKey",
    "ClusterRegOpenKey",
    "ClusterResourceEnum",
    "AddClusterResourceDependency",
    "OpenClusterNetworkEx",
    "GetClusterNetworkState",
    "GetNodeClusterState",
    "GetClusterInformation",
    "RegisterClusterNotify",
    "CloseClusterNode",
    "ClusterGroupGetEnumCount",
    "GetClusterKey",
    "OfflineClusterResource",
    "ClusterNodeCloseEnum",
    "ClusterRegBatchReadCommand",
    "ClusterOpenEnumEx",
    "ClusterRegSetValue",
    "CloseClusterResource",
    "DeleteClusterResource",
    "GetClusterFromNetInterface",
    "ClusterRegCloseBatch",
    "ClusterRegCreateKey",
    "ClusterGroupOpenEnum",
    "GetClusterResourceDependencyExpression",
    "ClusterResourceGetEnumCount",
    "GetClusterNetInterfaceState",
    "ClusterCloseEnumEx",
    "RemoveClusterResourceNode",
    "ClusterResourceTypeGetEnumCount",
    "AddResourceToClusterSharedVolumes",
    "ClusterCloseEnum",
    "ClusterGroupCloseEnum",
    "CreateCluster",
    "ClusterGroupControl",
    "ClusterNodeControl",
    "ClusterRegCloseKey",
    "ClusterNodeEnumEx",
    "CloseClusterNetInterface",
    "RemoveClusterResourceDependency",
    "ClusterNodeEnum",
    "ClusterResourceTypeOpenEnum",
    "ClusterSharedVolumeClearBackupState",
    "OpenClusterNodeEx",
    "ClusterControl",
    "ClusterNetworkGetEnumCount",
    "GetClusterNetworkId",
    "GetClusterNodeState"
  ],
  "cmcfg32.dll": [
    "_CMConfig@8",
    "CMConfig",
    "CMConfigEx",
    "CmstpExtensionProc2",
    "CmstpExtensionProc"
  ],
  "cmdial32.dll": [
    "RasCustomDialDlg",
    "RasCustomEntryDlg",
    "CmCustomHangUp",
    "CmCustomDialDlg",
    "GetCustomProperty",
    "RasCustomDeleteEntryNotify",
    "RasCustomDial",
    "_InetDialHandler@16",
    "AutoDialFunc",
    "_AutoDialFunc@16",
    "RasCustomHangUp",
    "InetDialHandler",
    "CmReConnect"
  ],
  "cmicryptinstall.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "cmifw.dll": [
    "DllCanUnloadNow",
    "EnableGroupW",
    "unattendW",
    "DllGetClassObject"
  ],
  "cmipnpinstall.dll": [
    "DllCanUnloadNow",
    "OnlineSetupPNPInstall",
    "DllGetClassObject"
  ],
  "cmlua.dll": [
    "_GetCoCreateInstanceAsAdminHandle",
    "_SetShieldButton",
    "DllMain",
    "DllCanUnloadNow",
    "DllRelease",
    "_SetShieldIcon",
    "DllAddRef",
    "_RemoveShieldIcon",
    "DllGetClassObject",
    "_ThrowErrorBox"
  ],
  "cmncliM.dll": [
    "ZSetPreferAppearanceIndex",
    "ZGetGameGlobalPointer",
    "ZWindowHide",
    "ZGetStockObject",
    "ZShellDataStorePreferences",
    "WRectToZRect",
    "ZLListGetData",
    "ZLListNew",
    "ZClientDllInitGlobals",
    "ZCRoomGetRoomOptions",
    "ZPAGetUserID",
    "ZWindowInvalidate",
    "ZCRoomUnblockMessages",
    "ZWindowIsDialogMessage",
    "ZRectOffset",
    "ZResourceGetHINSTANCE",
    "ZWindowInit",
    "ZResourceNew",
    "ZWindowGetHWND",
    "ZGetPreferAppearanceRamdonChecked",
    "ZResourceInit",
    "ZCRoomGetSeatUserId",
    "ZRandom",
    "ZWindowDraw",
    "UserMainRun",
    "UserMainStop",
    "ZLListRemoveType",
    "ZRectToWRect",
    "ZShellGameShell",
    "ZSetWindowUserData",
    "ZShellCreateGraphicalAccessibility",
    "ZLListGetNext",
    "ZShellResourceManager",
    "ZShellDataStoreUI",
    "ZPointInRect",
    "ZShellZoneShell",
    "ZFontNew",
    "ZResourceDelete",
    "UserMainInit",
    "ZTimerInit",
    "ZTimerNew",
    "ZLListRemove",
    "DllCanUnloadNow",
    "ZIsSoundOn",
    "DllGetClassObject",
    "ZSetGameGlobalPointer",
    "ZGetClientGlobalPointer",
    "ZLListFind",
    "ZLListEnumerate",
    "ZLListAdd",
    "ZFontInit",
    "ZCRoomGetPlayerInfo",
    "ZWindowIsMessageGameRenderAllowed",
    "ZSendMessage",
    "ZWindowNew",
    "ZPointToWPoint",
    "UserMainDisabled",
    "ZSetClientGlobalPointer",
    "ZFontDelete",
    "ZLListDelete",
    "ZWindowIsVisible",
    "ZTimerDelete",
    "ZCRoomSendZPANudgeMessage",
    "ZIsLayoutRTL",
    "ZWindowDelete",
    "ZWindowWinGetWnd",
    "z_memset",
    "ZClientDllDeleteGlobals",
    "ZWindowShow",
    "ZPromptOnExit",
    "ZShellLobbyDataStore",
    "ZAlert",
    "ZCRoomExit",
    "ZTimerSetTimeout",
    "ZCenterRectToRect",
    "z_memcpy",
    "ZLListGetFirst",
    "ZTimerGetTimeout",
    "DisplayFatalApplicationErrorMessage",
    "ZGetPreferAppearanceIndex",
    "ZCRoomBlockMessages",
    "ZGetCursorPosition",
    "ZWindowSetAllowMessageGameRender",
    "WPointToZPoint",
    "CreateZoneShell",
    "ZCRoomSendZPAMessage"
  ],
  "cmpbk32.dll": [
    "PhoneBookGetPhoneDUNA",
    "PhoneBookGetCountryId",
    "PhoneBookCopyFilter",
    "PhoneBookGetPhoneType",
    "PhoneBookEnumRegions",
    "PhoneBookEnumCountries",
    "PhoneBookGetCountryNameA",
    "PhoneBookGetPhoneDispA",
    "PhoneBookGetPhoneDescA",
    "PhoneBookMatchFilter",
    "PhoneBookFreeFilter",
    "PhoneBookGetRegionNameA",
    "PhoneBookGetCountryNameW",
    "PhoneBookUnload",
    "PhoneBookEnumNumbers",
    "PhoneBookLoad",
    "PhoneBookEnumNumbersWithRegionsZero",
    "PhoneBookHasPhoneType",
    "PhoneBookParseInfoA",
    "PhoneBookGetCurrentCountryId",
    "PhoneBookGetPhoneCanonicalA",
    "PhoneBookMergeChanges",
    "PhoneBookGetPhoneNonCanonicalA"
  ],
  "cmstplua.dll": [
    "DllMain",
    "DllCanUnloadNow",
    "DllRelease",
    "DllAddRef",
    "DllGetClassObject"
  ],
  "cmutil.dll": [
    "public: long __thiscall CmLogFile::Start(int)",
    "public: void __thiscall CIniW::SetEntryFromIdx(unsigned long)",
    "public: struct HINSTANCE__ * __thiscall CIniA::GetHInst(void)const",
    "MakeBold",
    "protected: int __thiscall CIniA::CIniA_WriteEntryToReg(struct HKEY__ *,char const *,char const *,unsigned char const *,unsigned long,unsigned long)const",
    "CmIsSpaceW",
    "public: int __thiscall CmLogFile::IsEnabled(void)",
    "public: void __thiscall CIniA::SetSection(char const *)",
    "public: static unsigned long const CIniW::kMaxValueLength",
    "public: void __thiscall CIniW::SetFile(unsigned short const *)",
    "public: void __thiscall CIniW::WPPB(unsigned short const *,unsigned short const *,int)",
    "WzToSz",
    "CmCompareStringA",
    "public: void __thiscall CIniW::SetReadICSData(int)",
    "public: char const * __thiscall CIniA::GetPrimaryFile(void)const",
    "public: void __thiscall CIniW::SetRegPath(unsigned short const *)",
    "public: struct HINSTANCE__ * __thiscall CIniW::GetHInst(void)const",
    "public: void __thiscall CIniA::SetRegPath(char const *)",
    "GetOSMinorVersion",
    "public: void __thiscall CRandom::Init(unsigned long)",
    "CmIsIPv6AddressW",
    "CmMalloc",
    "public: unsigned short * __thiscall CIniW::GPPS(unsigned short const *,unsigned short const *,unsigned short const *)const",
    "CmAtolW",
    "public: void __thiscall CIniA::SetPrimaryRegPath(char const *)",
    "public: long __thiscall CmLogFile::Stop(void)",
    "public: void __thiscall CIniA::SetHInst(struct HINSTANCE__ *)",
    "CmIsIPv6AddressA",
    "IsFarEastNonOSR2Win95",
    "public: class CRandom & __thiscall CRandom::operator=(class CRandom const &)",
    "public: void __thiscall CIniW::SetHInst(struct HINSTANCE__ *)",
    "public: __thiscall CmLogFile::~CmLogFile(void)",
    "public: __thiscall CIniA::CIniA(struct HINSTANCE__ *,char const *,char const *,char const *,char const *)",
    "CmStrrchrA",
    "public: void __thiscall CIniA::WPPB(char const *,char const *,int)",
    "public: void __thiscall CIniW::SetPrimaryRegPath(unsigned short const *)",
    "public: class CIniA & __thiscall CIniA::operator=(class CIniA const &)",
    "GetOSMajorVersion",
    "public: __thiscall CmLogFile::CmLogFile(void)",
    "public: int __thiscall CRandom::Generate(void)",
    "private: long __thiscall CmLogFile::CloseFile(void)",
    "public: char const * __thiscall CIniA::GetSection(void)const",
    "protected: int __thiscall CIniA::CIniA_DeleteEntryFromReg(struct HKEY__ *,char const *,char const *)const",
    "public: long __thiscall CmLogFile::Init(struct HINSTANCE__ *,int,unsigned short const *)",
    "private: void __thiscall CmLogFile::FormatWrite(enum _CMLOG_ITEM,unsigned short *)",
    "public: long __thiscall CmLogFile::DeInit(void)",
    "public: void __thiscall CIniW::`default constructor closure'(void)",
    "GetOSVersion",
    "public: char const * __thiscall CIniA::GetFile(void)const",
    "CmLoadStringW",
    "public: long __thiscall CmLogFile::SetParams(int,unsigned long,char const *)",
    "CmFmtMsgA",
    "CmConvertStrToIPv6AddrW",
    "CmStrStrA",
    "CmStrCharStuffingW",
    "CmWinHelp",
    "CmStrTrimW",
    "public: void __cdecl CmLogFile::Log(enum _CMLOG_ITEM,...)",
    "CmFmtMsgW",
    "CmStripPathAndExtW",
    "CmStrCpyAllocW",
    "private: long __thiscall CmLogFile::OpenFile(void)",
    "public: __thiscall CIniA::~CIniA(void)",
    "CmStrtokA",
    "CmRealloc",
    "public: char * __thiscall CIniA::GPPS(char const *,char const *,char const *)const",
    "public: void __thiscall CIniW::SetWriteICSData(int)",
    "public: __thiscall CRandom::CRandom(unsigned int)",
    "CmStrCatAllocW",
    "public: unsigned short const * __thiscall CIniW::GetRegPath(void)const",
    "public: void __thiscall CIniA::`default constructor closure'(void)",
    "CmStrtokW",
    "public: unsigned long __thiscall CIniA::GPPI(char const *,char const *,unsigned long)const",
    "public: void __thiscall CIniW::SetPrimaryFile(unsigned short const *)",
    "public: int __thiscall CIniW::GPPB(unsigned short const *,unsigned short const *,int)const",
    "public: void __thiscall CIniA::SetWriteICSData(int)",
    "WzToSzWithAlloc",
    "GetOSBuildNumber",
    "public: __thiscall CIniW::~CIniW(void)",
    "public: long __thiscall CmLogFile::SetParams(int,unsigned long,unsigned short const *)",
    "public: unsigned short const * __thiscall CIniW::GetSection(void)const",
    "public: void __thiscall CIniA::SetEntry(char const *)",
    "IsLogonAsSystem",
    "public: unsigned short const * __thiscall CIniW::GetPrimaryRegPath(void)const",
    "public: void __thiscall CIniW::WPPS(unsigned short const *,unsigned short const *,unsigned short const *)",
    "protected: unsigned char * __thiscall CIniW::CIniW_GetEntryFromReg(struct HKEY__ *,unsigned short const *,unsigned short const *,unsigned long,unsigned long)const",
    "public: unsigned long __thiscall CIniW::GPPI(unsigned short const *,unsigned short const *,unsigned long)const",
    "CmStrCharStuffingA",
    "public: int __thiscall CIniA::GPPB(char const *,char const *,int)const",
    "CmBuildFullPathFromRelativeA",
    "public: void __thiscall CIniA::Clear(void)",
    "CmStrrchrW",
    "public: unsigned short const * __thiscall CmLogFile::GetLogFilePath(void)",
    "public: void __thiscall CIniA::SetPrimaryFile(char const *)",
    "CmEndOfStrW",
    "protected: char * __thiscall CIniA::LoadEntry(char const *)const",
    "public: void __thiscall CIniW::Clear(void)",
    "public: void __thiscall CIniW::SetEntry(unsigned short const *)",
    "CmParsePathW",
    "CmConvertRelativePathW",
    "CmStrStrW",
    "public: void __thiscall CmLogFile::Clear(int)",
    "CmConvertStrToIPv6AddrA",
    "protected: int __thiscall CIniW::CIniW_DeleteEntryFromReg(struct HKEY__ *,unsigned short const *,unsigned short const *)const",
    "public: class CIniW & __thiscall CIniW::operator=(class CIniW const &)",
    "public: void __thiscall CIniA::SetEntryFromIdx(unsigned long)",
    "SzToWz",
    "public: char const * __thiscall CIniA::GetRegPath(void)const",
    "CmLoadSmallIconA",
    "CmIsDigitW",
    "CmStrCatAllocA",
    "CmLoadIconA",
    "CmStrCharCountW",
    "SzToWzWithAlloc",
    "public: void __thiscall CIniW::SetSection(unsigned short const *)",
    "CmBuildFullPathFromRelativeW",
    "public: void __thiscall CIniA::SetFile(char const *)",
    "public: void __thiscall CIniA::WPPI(char const *,char const *,unsigned long)",
    "CmLoadSmallIconW",
    "private: long __thiscall CmLogFile::Write(unsigned short *)",
    "public: char * __thiscall CIniA::LoadSection(char const *)const",
    "CmLoadImageW",
    "protected: unsigned short * __thiscall CIniW::LoadEntry(unsigned short const *)const",
    "CmStrCharCountA",
    "CmStrchrW",
    "public: unsigned short const * __thiscall CIniW::GetPrimaryFile(void)const",
    "protected: int __thiscall CIniW::CIniW_WriteEntryToReg(struct HKEY__ *,unsigned short const *,unsigned short const *,unsigned char const *,unsigned long,unsigned long)const",
    "CmCompareStringW",
    "public: void __thiscall CmLogFile::Banner(void)",
    "public: void __thiscall CIniW::WPPI(unsigned short const *,unsigned short const *,unsigned long)",
    "CmStrchrA",
    "ReleaseBold",
    "public: void __thiscall CIniA::WPPS(char const *,char const *,char const *)",
    "protected: static void __stdcall CIniA::CIni_SetFile(char * *,char const *)",
    "CmMoveMemory",
    "protected: static void __stdcall CIniW::CIni_SetFile(unsigned short * *,unsigned short const *)",
    "public: void __thiscall CIniW::SetICSDataPath(unsigned short const *)",
    "CmAtolA",
    "CmFree",
    "CmStripFileNameW",
    "protected: unsigned char * __thiscall CIniA::CIniA_GetEntryFromReg(struct HKEY__ *,char const *,char const *,unsigned long,unsigned long)const",
    "public: void __thiscall CIniA::SetReadICSData(int)",
    "CmLoadIconW",
    "public: __thiscall CIniW::CIniW(struct HINSTANCE__ *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "CmStrCpyAllocA",
    "public: long __thiscall CmLogFile::Init(struct HINSTANCE__ *,int,char const *)",
    "public: class CmLogFile & __thiscall CmLogFile::operator=(class CmLogFile const &)",
    "public: unsigned short * __thiscall CIniW::LoadSection(unsigned short const *)const",
    "public: void __thiscall CIniA::SetICSDataPath(char const *)",
    "public: char const * __thiscall CIniA::GetPrimaryRegPath(void)const",
    "public: __thiscall CRandom::CRandom(void)",
    "public: unsigned short const * __thiscall CIniW::GetFile(void)const"
  ],
  "cngaudit.dll": [
    "CngGetAuditFunctionTable"
  ],
  "cngprovider.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "cnvfat.dll": [
    "ConvertFAT",
    "IsConversionAvailable"
  ],
  "cofiredm.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "colbact.dll": [
    "GetClassInfoForCurrentUser",
    "DllUnregisterServer",
    "PartitionAccessCheck",
    "DllGetClassObject",
    "GetDefaultPartitionForCurrentUser",
    "DllRegisterServer",
    "GetDefaultPartitionForSid"
  ],
  "colorui.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "LaunchColorCpl",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "comcat.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "comctl32.dll": [
    "FlatSB_EnableScrollBar",
    "ImageList_ReplaceIcon",
    "ImageList_Remove",
    "ImageList_Merge",
    "PropertySheetA",
    "DSA_Create",
    "ImageList_LoadImage",
    "DSA_DeleteAllItems",
    "DSA_Destroy",
    "_TrackMouseEvent",
    "MakeDragList",
    "ImageList_DragEnter",
    "DPA_LoadStream",
    "FlatSB_GetScrollProp",
    "FreeMRUList",
    "ImageList_LoadImageA",
    "DPA_GetPtrIndex",
    "ImageList_GetBkColor",
    "DPA_Grow",
    "CreatePropertySheetPageA",
    "ImageList_LoadImageW",
    "UninitializeFlatSB",
    "DSA_InsertItem",
    "ImageList_Create",
    "ImageList_GetImageCount",
    "ImageList_Read",
    "ImageList_DragLeave",
    "ImageList_BeginDrag",
    "ImageList_Replace",
    "ImageList_SetOverlayImage",
    "ImageList_DrawIndirect",
    "GetMUILanguage",
    "FlatSB_SetScrollProp",
    "FlatSB_GetScrollPos",
    "ImageList_GetIcon",
    "DPA_SaveStream",
    "DSA_GetItem",
    "DrawStatusTextW",
    "ImageList_Copy",
    "CreateStatusWindowW",
    "FlatSB_ShowScrollBar",
    "FlatSB_SetScrollInfo",
    "ImageList_Add",
    "DPA_Clone",
    "CreateToolbar",
    "ImageList_SetFlags",
    "GetEffectiveClientRect",
    "PropertySheetW",
    "FlatSB_SetScrollPos",
    "ImageList_SetFilter",
    "DPA_Merge",
    "DestroyPropertySheetPage",
    "DPA_Destroy",
    "DrawStatusText",
    "ImageList_Write",
    "MenuHelp",
    "ImageList_Draw",
    "ImageList_GetIconSize",
    "InitCommonControls",
    "RegisterClassNameW",
    "ImageList_SetBkColor",
    "ImageList_SetIconSize",
    "DSA_DeleteItem",
    "DrawStatusTextA",
    "CreateStatusWindow",
    "DPA_SetPtr",
    "FlatSB_GetScrollInfo",
    "FlatSB_SetScrollRange",
    "ImageList_AddMasked",
    "InitializeFlatSB",
    "DPA_CreateEx",
    "CreatePropertySheetPage",
    "RemoveWindowSubclass",
    "CreateToolbarEx",
    "DPA_DeleteAllPtrs",
    "InitCommonControlsEx",
    "ImageList_GetFlags",
    "EnumMRUListW",
    "DSA_EnumCallback",
    "DPA_DestroyCallback",
    "ImageList_SetDragCursorImage",
    "CreateStatusWindowA",
    "DPA_GetPtr",
    "DllGetVersion",
    "DPA_Create",
    "ImageList_GetImageRect",
    "ImageList_GetDragImage",
    "PropertySheet",
    "Str_SetPtrW",
    "DefSubclassProc",
    "ShowHideMenuCtl",
    "ImageList_DragShowNolock",
    "CreateUpDownControl",
    "ImageList_AddIcon",
    "DPA_EnumCallback",
    "CreateMRUListW",
    "SetWindowSubclass",
    "CreatePropertySheetPageW",
    "ImageList_SetImageCount",
    "DPA_Sort",
    "ImageList_DragMove",
    "DPA_Search",
    "InitMUILanguage",
    "ImageList_DrawEx",
    "ImageList_EndDrag",
    "DPA_DeletePtr",
    "DSA_SetItem",
    "DSA_GetItemPtr",
    "ImageList_GetImageInfo",
    "FlatSB_GetScrollRange",
    "DrawInsert",
    "DPA_InsertPtr",
    "LBItemFromPt",
    "AddMRUStringW",
    "DSA_DestroyCallback",
    "ImageList_Duplicate",
    "CreateMappedBitmap",
    "ImageList_Destroy"
  ],
  "comdlg32.dll": [
    "GetOpenFileNameW",
    "FindTextW",
    "PrintDlgExA",
    "WantArrows",
    "ReplaceTextA",
    "GetSaveFileNameW",
    "CommDlgExtendedError",
    "GetFileTitleA",
    "GetFileTitleW",
    "ReplaceTextW",
    "GetOpenFileNameA",
    "dwOKSubclass",
    "ChooseColorA",
    "ChooseColorW",
    "PageSetupDlgA",
    "PrintDlgExW",
    "Ssync_ANSI_UNICODE_Struct_For_WOW",
    "PageSetupDlgW",
    "PrintDlgA",
    "FindTextA",
    "PrintDlgW",
    "DllCanUnloadNow",
    "LoadAlterBitmap",
    "ChooseFontW",
    "GetSaveFileNameA",
    "DllGetClassObject",
    "ChooseFontA",
    "dwLBSubclass"
  ],
  "compstui.dll": [
    "GetCPSUIUserData",
    "SetCPSUIUserData",
    "CommonPropertySheetUIA",
    "CommonPropertySheetUIW"
  ],
  "comrepl.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "comres.dll": "No exports",
  "comsnap.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "InstallDsExtension",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "comsvcs.dll": [
    "ComSvcsLogError",
    "CoEnterServiceDomain",
    "RecycleSurrogate",
    "DispManGetContext",
    "DllRegisterServer",
    "GetMTAThreadPoolMetrics",
    "MTSCreateActivity",
    "DllUnregisterServer",
    "CoLeaveServiceDomain",
    "CosGetCallContext",
    "ComSvcsExceptionFilter",
    "GetTrkSvrObject",
    "GetObjectContext",
    "GetManagedExtensions",
    "MiniDumpW",
    "CoLoadServices",
    "DllCanUnloadNow",
    "SafeRef",
    "CoCreateActivity",
    "DllGetClassObject"
  ],
  "comuid.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "CreateDCOMSecurityUIPage"
  ],
  "connect.dll": [
    "HrIsInternetConnected",
    "IsInternetConnectedGUID",
    "DllCanUnloadNow",
    "IsInternetConnected",
    "IsUniqueConnectionName",
    "GetInternetConnected",
    "HrIsInternetConnectedGUID",
    "CreateVPNConnection",
    "DllGetClassObject",
    "AddConnectionOptionListEntries",
    "UnregisterPagesLink",
    "RegisterPageWithPage",
    "UnregisterPage",
    "GetNetworkConnected",
    "GetVPNConnected"
  ],
  "console.dll": [
    "CPlApplet"
  ],
  "corpol.dll": [
    "CORLockDownProvider",
    "GetPublisher",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "GetUnsignedPermissions",
    "CORPolicyProvider",
    "CORPolicyEE",
    "DllRegisterServer"
  ],
  "correngine.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "credssp.dll": [
    "SpAcquireCredentialsHandleW",
    "SpQuerySecurityContextToken",
    "SpVerifySignature",
    "SpAcceptSecurityContext",
    "SpQuerySecurityPackageInfoW",
    "SpRevertSecurityContext",
    "SpQueryCredentialsAttributesW",
    "SpExportSecurityContext",
    "SpSetContextAttributesW",
    "SpImportSecurityContextW",
    "SpFreeContextBuffer",
    "SpApplyControlToken",
    "SpInitializeSecurityContextW",
    "SpDecryptMessage",
    "SpEncryptMessage",
    "SpCompleteAuthToken",
    "SpEnumerateSecurityPackagesW",
    "SpQueryContextAttributesW",
    "SpAddCredentialsW",
    "SpImpersonateSecurityContext",
    "SpChangeAccountPasswordW",
    "InitSecurityInterfaceW",
    "SpDeleteSecurityContext",
    "SpSetCredentialsAttributesW",
    "SpMakeSignature",
    "SpFreeCredentialsHandle"
  ],
  "credui.dll": [
    "CredUIPromptForWindowsCredentialsA",
    "CredUnPackAuthenticationBufferA",
    "SspiUpdateCredentials",
    "CredUIInitControls",
    "CredUIPromptForWindowsCredentialsWorker",
    "CredUICmdLinePromptForCredentialsA",
    "SspiPromptForCredentialsW",
    "CredPackAuthenticationBufferW",
    "SspiIsPromptingNeeded",
    "DllRegisterServer",
    "CredUIStoreSSOCredA",
    "CredUIConfirmCredentialsW",
    "SspiPromptForCredentialsA",
    "DllUnregisterServer",
    "CredUIPromptForCredentialsA",
    "CredUIReadSSOCredW",
    "CredUIConfirmCredentialsA",
    "CredUIParseUserNameA",
    "CredPackAuthenticationBufferA",
    "CredUICmdLinePromptForCredentialsW",
    "CredUIPromptForWindowsCredentialsW",
    "SspiGetCredUIContext",
    "SspiUnmarshalCredUIContext",
    "CredUnPackAuthenticationBufferW",
    "CredUIReadSSOCredA",
    "CredUIStoreSSOCredW",
    "DllCanUnloadNow",
    "CredUIParseUserNameW",
    "DllGetClassObject",
    "CredUIPromptForCredentialsW"
  ],
  "crtdll.dll": [
    "_mbsncat",
    "_seterrormode",
    "__iscsym",
    "_strlwr",
    "_unloaddll",
    "_strnextc",
    "strcspn",
    "_heapchk",
    "strtod",
    "remove",
    "_mkdir",
    "_controlfp",
    "_ismbbalpha",
    "localeconv",
    "fputc",
    "_rmdir",
    "setlocale",
    "_CIlog",
    "iswupper",
    "_sopen",
    "_fputwchar",
    "_tzset",
    "_fpieee_flt",
    "tanh",
    "_flsbuf",
    "wcstombs",
    "iscntrl",
    "_spawnve",
    "wcscpy",
    "_cpumode_dll",
    "isgraph",
    "_splitpath",
    "isprint",
    "_flushall",
    "rand",
    "_lsearch",
    "_tempnam",
    "rename",
    "_strdec",
    "_getdcwd",
    "div",
    "fabs",
    "ftell",
    "cos",
    "cosh",
    "swprintf",
    "putchar",
    "_gcvt",
    "_wcsrev",
    "_ctype",
    "_spawnlp",
    "_putw",
    "_osminor_dll",
    "_fileinfo_dll",
    "_spawnvpe",
    "_heapwalk",
    "_mbccpy",
    "_ismbstrail",
    "_pipe",
    "difftime",
    "_mbcjmstojis",
    "_chdir",
    "_cscanf",
    "rewind",
    "_strupr",
    "__argv_dll",
    "_CIatan2",
    "_CIpow",
    "asctime",
    "fclose",
    "_CIsinh",
    "_filbuf",
    "_mbsnicmp",
    "_getche",
    "_fullpath",
    "_fpreset",
    "_pwctype_dll",
    "clock",
    "_ismbbgraph",
    "_ismbcspace",
    "_execvp",
    "_CItan",
    "_swab",
    "_stat",
    "__fpecode",
    "_strdate",
    "_mbsnbcnt",
    "_copysign",
    "_mbslwr",
    "atof",
    "wcsncpy",
    "iswctype",
    "_ungetch",
    "_fdopen",
    "_basemajor_dll",
    "_mbbtombc",
    "_cwait",
    "_popen",
    "_CIasin",
    "_memccpy",
    "_CIlog10",
    "_mbsdup",
    "free",
    "_j1",
    "_lseek",
    "strtoul",
    "_cprintf",
    "wcstoul",
    "ispunct",
    "_endthread",
    "_fsopen",
    "strcmp",
    "_kbhit",
    "_ultoa",
    "vwprintf",
    "_cexit",
    "_ismbckata",
    "isalpha",
    "vsprintf",
    "_heapset",
    "getc",
    "_osver_dll",
    "_lrotr",
    "_mbsnbcpy",
    "_ismbclegal",
    "_execvpe",
    "fmod",
    "void __cdecl operator delete(void *)",
    "_rotr",
    "_mbsicmp",
    "_mbscspn",
    "_ismbbprint",
    "_fcvt",
    "acos",
    "atoi",
    "iswpunct",
    "_getpid",
    "clearerr",
    "_mbsninc",
    "_execve",
    "_getdiskfree",
    "_mbsnextc",
    "wcspbrk",
    "_open_osfhandle",
    "wcslen",
    "_ismbbkalnum",
    "_setjmp",
    "_snprintf",
    "sscanf",
    "wscanf",
    "atol",
    "_mbctohira",
    "_putch",
    "_ismbcdigit",
    "ceil",
    "_wcsnset",
    "_execv",
    "_iob",
    "_statusfp",
    "_y0",
    "strtok",
    "_mbsdec",
    "is_wctype",
    "scanf",
    "_ltoa",
    "_strset",
    "_getw",
    "_ismbclower",
    "_mbsspnp",
    "_ftol",
    "_snwprintf",
    "tan",
    "_mktemp",
    "_itow",
    "_mbsupr",
    "_except_handler2",
    "_mbctombb",
    "_fgetchar",
    "_osversion_dll",
    "tmpnam",
    "_vsnwprintf",
    "_CIsin",
    "_ismbslead",
    "wcstol",
    "_getdllprocaddr",
    "_environ_dll",
    "fgetpos",
    "wctomb",
    "_ismbcprint",
    "_ftime",
    "_mbsbtype",
    "strlen",
    "_CIatan",
    "_mbsncpy",
    "_dup2",
    "_fcloseall",
    "_local_unwind2",
    "atexit",
    "_strerror",
    "_stricoll",
    "isalnum",
    "_control87",
    "strncpy",
    "raise",
    "_chsize",
    "_strninc",
    "_mbstok",
    "_toupper",
    "_ltow",
    "int (__cdecl*__cdecl _set_new_handler(int (__cdecl*)(unsigned int)))(unsigned int)",
    "_tolower",
    "_mbbtype",
    "_strnicmp",
    "_execl",
    "_strnset",
    "_mbscmp",
    "_eof",
    "_mbctype",
    "memmove",
    "_mbctolower",
    "_mbsnbset",
    "_dup",
    "_getsystime",
    "islower",
    "_fpclass",
    "strcat",
    "wcsrchr",
    "exit",
    "time",
    "memcmp",
    "abort",
    "ctime",
    "_beginthread",
    "_execlp",
    "_osmode_dll",
    "_unlink",
    "system",
    "_XcptFilter",
    "getenv",
    "_execle",
    "memset",
    "_isctype",
    "_setmode",
    "sqrt",
    "_purecall",
    "_cgets",
    "frexp",
    "_ismbcl1",
    "_j0",
    "_getcwd",
    "fgetwc",
    "iswascii",
    "_fstat",
    "_strrev",
    "_ultow",
    "fwrite",
    "_getdrive",
    "sinh",
    "_jn",
    "_ismbbpunct",
    "realloc",
    "_mbsstr",
    "_pgmptr_dll",
    "_spawnlpe",
    "_CIfmod",
    "_CIcosh",
    "_errno",
    "_yn",
    "_msize",
    "log",
    "strncat",
    "_mbschr",
    "_pctype_dll",
    "_cabs",
    "_cputs",
    "_getch",
    "_loaddll",
    "memcpy",
    "swscanf",
    "_mbclen",
    "_initterm",
    "freopen",
    "_mbscpy",
    "wcsspn",
    "_hypot",
    "_spawnl",
    "log10",
    "_heapmin",
    "_CIsqrt",
    "_finite",
    "_winmajor_dll",
    "_write",
    "setbuf",
    "_exit",
    "_mbspbrk",
    "_findclose",
    "_commode_dll",
    "_ismbcalpha",
    "_memicmp",
    "_scalb",
    "_wcslwr",
    "isxdigit",
    "_pclose",
    "strtol",
    "_strtime",
    "void * __cdecl operator new(unsigned int)",
    "vfwprintf",
    "fscanf",
    "fopen",
    "strxfrm",
    "asin",
    "modf",
    "pow",
    "_aexit_rtn_dll",
    "_logb",
    "mbstowcs",
    "__iscsymf",
    "fprintf",
    "_lfind",
    "_wcsicoll",
    "_mbsinc",
    "tmpfile",
    "_strspnp",
    "_global_unwind2",
    "ldexp",
    "_matherr",
    "_ismbcupper",
    "_clearfp",
    "_locking",
    "_wcsdup",
    "_wcsupr",
    "fputs",
    "__toascii",
    "strchr",
    "malloc",
    "_itoa",
    "sin",
    "_expand",
    "_mbstrlen",
    "wcsstr",
    "_tell",
    "_ismbblead",
    "_commit",
    "_makepath",
    "_stricmp",
    "sprintf",
    "_wcsicmp",
    "_mbsnset",
    "ldiv",
    "fflush",
    "fgetc",
    "_mbsset",
    "iswspace",
    "wcschr",
    "setvbuf",
    "floor",
    "_wtoi",
    "_umask",
    "strerror",
    "_daylight_dll",
    "vprintf",
    "_mbctoupper",
    "_creat",
    "_isatty",
    "_rmtmp",
    "_baseminor_dll",
    "_utime",
    "_ismbcsymbol",
    "_assert",
    "isdigit",
    "feof",
    "_mbsrev",
    "_strcmpi",
    "_strinc",
    "strrchr",
    "_filelength",
    "strftime",
    "wcstod",
    "iswcntrl",
    "_findfirst",
    "__argc_dll",
    "_mbslen",
    "_sys_errlist",
    "_acmdln_dll",
    "_searchenv",
    "_ecvt",
    "_strncnt",
    "ungetwc",
    "_c_exit",
    "putc",
    "isleadbyte",
    "fseek",
    "_CIcos",
    "vswprintf",
    "_close",
    "iswalpha",
    "iswgraph",
    "__mb_cur_max_dll",
    "_execlpe",
    "_mbcjistojms",
    "__dllonexit",
    "_fputchar",
    "_wtol",
    "toupper",
    "calloc",
    "labs",
    "localtime",
    "_mbsnbcat",
    "fwprintf",
    "__GetMainArgs",
    "_sleep",
    "iswprint",
    "_lrotl",
    "_strdup",
    "__isascii",
    "strcpy",
    "wcsncat",
    "_ismbchira",
    "_CIexp",
    "__threadhandle",
    "isupper",
    "_ismbbtrail",
    "_osmajor_dll",
    "_open",
    "_wcsnicmp",
    "_winminor_dll",
    "signal",
    "wcscat",
    "_baseversion_dll",
    "_chmod",
    "_getdrives",
    "_ismbbalnum",
    "_putenv",
    "_chgsign",
    "srand",
    "iswalnum",
    "puts",
    "__pxcptinfoptrs",
    "_setsystime",
    "strpbrk",
    "wcsxfrm",
    "_spawnv",
    "mbtowc",
    "ungetc",
    "_mbsrchr",
    "_ismbbkpunct",
    "wcsftime",
    "exp",
    "strstr",
    "_CItanh",
    "_futime",
    "wcscspn",
    "qsort",
    "_y1",
    "_winver_dll",
    "_read",
    "fgets",
    "perror",
    "_HUGE_dll",
    "_ismbbkana",
    "__doserrno",
    "ferror",
    "fsetpos",
    "mblen",
    "longjmp",
    "strcoll",
    "_nextafter",
    "fputwc",
    "_wcsset",
    "_mbscat",
    "iswdigit",
    "strncmp",
    "tolower",
    "_isnan",
    "_findnext",
    "iswxdigit",
    "strspn",
    "_fmode_dll",
    "bsearch",
    "wcsncmp",
    "memchr",
    "mktime",
    "_onexit",
    "_mbctokata",
    "_mbsncmp",
    "_mbsspn",
    "gmtime",
    "_spawnle",
    "fwscanf",
    "abs",
    "fread",
    "gets",
    "isspace",
    "_sys_nerr_dll",
    "_timezone_dll",
    "_fileno",
    "atan2",
    "printf",
    "_chdrive",
    "towlower",
    "_fgetwchar",
    "_beep",
    "vfprintf",
    "_mbsnbcmp",
    "iswlower",
    "wprintf",
    "atan",
    "_tzname",
    "_mbsnccnt",
    "towupper",
    "wcscmp",
    "_rotl",
    "getchar",
    "wcstok",
    "_ismbcl0",
    "_spawnvp",
    "_ismbcl2",
    "_mbsnbicmp",
    "__threadid",
    "wcscoll",
    "_abnormal_termination",
    "_amsg_exit",
    "_get_osfhandle",
    "_CIacos",
    "_vsnprintf",
    "_access"
  ],
  "crypt32.dll": [
    "I_CryptTouchLruEntry",
    "PFXExportCertStore",
    "CertStrToNameW",
    "CertSerializeCRLStoreElement",
    "CryptHashPublicKeyInfo",
    "CertRDNValueToStrA",
    "CryptImportPublicKeyInfoEx",
    "CertDuplicateCertificateChain",
    "CryptSignAndEncryptMessage",
    "CertDuplicateCRLContext",
    "CertOpenServerOcspResponse",
    "CertEnumCertificatesInStore",
    "CryptMemRealloc",
    "CryptMsgDuplicate",
    "CryptSIPAddProvider",
    "CertFreeCertificateChain",
    "CryptInstallDefaultContext",
    "CertGetIntendedKeyUsage",
    "CertVerifyCertificateChainPolicy",
    "CryptRegisterOIDInfo",
    "CertFreeCTLContext",
    "CryptGetKeyIdentifierProperty",
    "CryptSIPPutSignedDataMsg",
    "I_CryptRegisterSmartCardStore",
    "CertSelectCertificateChains",
    "CertDuplicateStore",
    "CertFindSubjectInCTL",
    "CertVerifyCRLRevocation",
    "CryptAcquireCertificatePrivateKey",
    "CryptVerifyMessageHash",
    "CertFreeCRLContext",
    "CertAddCTLLinkToStore",
    "CertVerifyValidityNesting",
    "CryptSIPGetSignedDataMsg",
    "CryptUnregisterOIDFunction",
    "CryptMsgControl",
    "CryptBinaryToStringA",
    "CryptVerifyDetachedMessageHash",
    "CertVerifyCRLTimeValidity",
    "CryptDecryptMessage",
    "CryptUnprotectMemory",
    "CertOpenSystemStoreW",
    "I_CryptAddSmartCardCertToStore",
    "CertAddRefServerOcspResponseContext",
    "CertAddEncodedCertificateToSystemStoreA",
    "CertGetCertificateContextProperty",
    "CryptStringToBinaryW",
    "CertCloseServerOcspResponse",
    "CertEnumSubjectInSortedCTL",
    "CertFindCTLInStore",
    "CertFindRDNAttr",
    "CryptMsgCountersign",
    "I_CryptInstallAsn1Module",
    "I_CryptDisableLruOfEntries",
    "CertAddCertificateContextToStore",
    "CertVerifySubjectCertificateContext",
    "CertSetCTLContextProperty",
    "CryptProtectMemory",
    "CryptSignMessage",
    "I_CryptGetLruEntryData",
    "I_CryptRemoveLruEntry",
    "RegDeleteValueU",
    "CertCreateContext",
    "RegCreateKeyExU",
    "CertGetIssuerCertificateFromStore",
    "I_CryptSetTls",
    "CryptQueryObject",
    "I_CryptDetachTls",
    "I_CryptGetDefaultCryptProv",
    "CryptDecodeObjectEx",
    "CertIsValidCRLForCertificate",
    "CertSetCRLContextProperty",
    "CryptBinaryToStringW",
    "CryptSIPLoad",
    "CryptSIPRemoveSignedDataMsg",
    "CryptSignAndEncodeCertificate",
    "CertEnumCRLContextProperties",
    "CryptInstallOIDFunctionAddress",
    "I_CertProtectFunction",
    "CryptSIPRetrieveSubjectGuidForCatalogFile",
    "CryptDecodeObject",
    "CertGetCertificateChain",
    "CryptMemFree",
    "CertSerializeCTLStoreElement",
    "CertVerifyTimeValidity",
    "CryptFindLocalizedName",
    "CertEnumSystemStoreLocation",
    "CryptSetOIDFunctionValue",
    "CryptVerifySignatureU",
    "CertGetCTLContextProperty",
    "CryptSetKeyIdentifierProperty",
    "CryptEnumOIDFunction",
    "I_CertSrvProtectFunction",
    "CertGetCRLContextProperty",
    "CertGetSubjectCertificateFromStore",
    "CertGetNameStringA",
    "CertFreeServerOcspResponseContext",
    "CertGetPublicKeyLength",
    "CertOIDToAlgId",
    "CertSaveStore",
    "CryptInitOIDFunctionSet",
    "CryptRegisterOIDFunction",
    "PFXVerifyPassword",
    "CertSetCertificateContextProperty",
    "I_CryptReadTrustedPublisherDWORDValueFromRegistry",
    "CryptGetDefaultOIDDllList",
    "CertAddCRLLinkToStore",
    "CertUnregisterSystemStore",
    "CryptEnumOIDInfo",
    "I_CryptGetTls",
    "CertDeleteCertificateFromStore",
    "CertFindAttribute",
    "CryptFormatObject",
    "CertEnumCRLsInStore",
    "CertAddEncodedCTLToStore",
    "CertEnumPhysicalStore",
    "CertRegisterSystemStore",
    "I_CryptInstallOssGlobal",
    "CryptExportPKCS8",
    "PFXIsPFXBlob",
    "RegCreateHKCUKeyExU",
    "CertStrToNameA",
    "CryptHashCertificate",
    "CertAddStoreToCollection",
    "CryptProtectData",
    "CryptStringToBinaryA",
    "I_CryptCreateLruEntry",
    "I_CryptUninstallOssGlobal",
    "I_CryptGetAsn1Encoder",
    "CertOpenStore",
    "CryptDecodeMessage",
    "CertNameToStrW",
    "CertGetCRLFromStore",
    "I_CryptUnregisterSmartCardStore",
    "CryptExportPublicKeyInfoEx",
    "RegEnumValueU",
    "PFXExportCertStore2",
    "CryptFindOIDInfo",
    "CryptExportPublicKeyInfo",
    "CryptSIPCreateIndirectData",
    "CertEnumCTLContextProperties",
    "RegOpenKeyExU",
    "CertDeleteCRLFromStore",
    "CertCompareCertificate",
    "CertVerifyCTLUsage",
    "CryptUnregisterDefaultOIDFunction",
    "CryptSIPRemoveProvider",
    "CryptVerifyCertificateSignatureEx",
    "I_CryptGetDefaultCryptProvForEncrypt",
    "CertControlStore",
    "CryptEncodeObject",
    "CertResyncCertificateChainEngine",
    "I_CryptGetOssGlobal",
    "RegQueryValueExU",
    "CertRegisterPhysicalStore",
    "CertCreateCertificateContext",
    "CryptUnregisterOIDInfo",
    "CertFreeCertificateChainEngine",
    "CryptMemAlloc",
    "CertAddEncodedCertificateToSystemStoreW",
    "CryptExportPublicKeyInfoFromBCryptKeyHandle",
    "CertGetStoreProperty",
    "CryptImportPublicKeyInfoEx2",
    "CertRDNValueToStrW",
    "RegSetValueExU",
    "CryptUpdateProtectedState",
    "CertCompareCertificateName",
    "CryptHashMessage",
    "CertAddEncodedCertificateToStore",
    "CryptSIPVerifyIndirectData",
    "CertNameToStrA",
    "CertGetServerOcspResponseContext",
    "CertAddCTLContextToStore",
    "CertCreateCTLEntryFromCertificateContextProperties",
    "CertDeleteCTLFromStore",
    "CertDuplicateCTLContext",
    "I_CryptReleaseLruEntry",
    "CertFreeCertificateContext",
    "CryptMsgSignCTL",
    "CryptLoadSip",
    "CertAddSerializedElementToStore",
    "CertRemoveEnhancedKeyUsageIdentifier",
    "CertSetStoreProperty",
    "CryptSIPRetrieveSubjectGuid",
    "CertAddEncodedCRLToStore",
    "CertSetCertificateContextPropertiesFromCTLEntry",
    "CryptImportPKCS8",
    "CryptVerifyMessageSignatureWithKey",
    "CryptMsgEncodeAndSignCTL",
    "CryptCreateKeyIdentifierFromCSP",
    "I_CryptCreateLruCache",
    "CertGetValidUsages",
    "I_CryptFindLruEntryData",
    "CryptVerifyMessageSignature",
    "CryptMsgUpdate",
    "I_CryptAllocTls",
    "I_CryptGetFileVersion",
    "CertCreateCRLContext",
    "I_CryptFreeLruCache",
    "CertFindChainInStore",
    "CertCreateCertificateChainEngine",
    "CryptImportPublicKeyInfo",
    "CryptUninstallDefaultContext",
    "CryptGetOIDFunctionValue",
    "CryptVerifyDetachedMessageSignature",
    "I_CryptFindLruEntry",
    "CryptMsgVerifyCountersignatureEncodedEx",
    "CryptMsgClose",
    "I_CryptAddRefLruEntry",
    "CryptEnumKeyIdentifierProperties",
    "CertAddRefServerOcspResponse",
    "CertUnregisterPhysicalStore",
    "CertEnumSystemStore",
    "I_CryptFindSmartCardCertInStore",
    "RegQueryInfoKeyU",
    "I_CertDiagControl",
    "CryptMsgGetParam",
    "I_CryptFreeTls",
    "CryptGetMessageSignerCount",
    "CryptVerifyTimeStampSignature",
    "CryptUnprotectData",
    "CryptCloseAsyncHandle",
    "CryptHashToBeSigned",
    "CertVerifyRevocation",
    "CryptFindCertificateKeyProvInfo",
    "CryptMsgOpenToEncode",
    "CryptMsgCalculateEncodedLength",
    "CertFindCertificateInStore",
    "I_CryptFlushLruCache",
    "CryptSetProviderU",
    "CryptEncodeObjectEx",
    "CryptGetOIDFunctionAddress",
    "I_CryptEnumMatchingLruEntries",
    "PFXImportCertStore",
    "CertAddEnhancedKeyUsageIdentifier",
    "CryptVerifyCertificateSignature",
    "RegOpenHKCUKeyExU",
    "I_CertSyncStore",
    "I_CryptInsertLruEntry",
    "CertRemoveStoreFromCollection",
    "CertComparePublicKeyInfo",
    "CryptRegisterDefaultOIDFunction",
    "CertFindSubjectInSortedCTL",
    "CryptEnumProvidersU",
    "CertAddCertificateLinkToStore",
    "CryptMsgOpenToDecode",
    "CryptMsgVerifyCountersignatureEncoded",
    "CertCompareIntegerBlob",
    "CertFindCRLInStore",
    "CertCloseStore",
    "CertIsRDNAttrsInCertificateName",
    "CryptSignCertificate",
    "CryptFreeOIDFunctionAddress",
    "CryptGetMessageCertificates",
    "CertGetNameStringW",
    "I_CryptUninstallAsn1Module",
    "CertRetrieveLogoOrBiometricInfo",
    "CertFindCertificateInCRL",
    "I_CryptGetAsn1Decoder",
    "CryptMsgGetAndVerifySigner",
    "I_CryptEnableLruOfEntries",
    "CertOpenSystemStoreA",
    "CryptSignMessageWithKey",
    "CryptAcquireContextU",
    "CryptMsgCountersignEncoded",
    "I_CryptWalkAllLruCacheEntries",
    "CertFindExtension",
    "CryptEncryptMessage",
    "CryptSetAsyncParam",
    "CertDuplicateCertificateContext",
    "CryptCreateAsyncHandle",
    "CryptGetAsyncParam",
    "CryptDecryptAndVerifyMessageSignature",
    "CertGetEnhancedKeyUsage",
    "CertCreateSelfSignCertificate",
    "CertFreeCertificateChainList",
    "CertAlgIdToOID",
    "CryptRetrieveTimeStamp",
    "CryptSignHashU",
    "CryptGetDefaultOIDFunctionAddress",
    "CertEnumCertificateContextProperties",
    "CertCreateCTLContext",
    "CertSetEnhancedKeyUsage",
    "I_CertUpdateStore",
    "CertSerializeCertificateStoreElement",
    "CreateFileU",
    "CertEnumCTLsInStore",
    "I_CryptGetLruEntryIdentifier",
    "CertAddCRLContextToStore",
    "CryptHashCertificate2",
    "PFXExportCertStoreEx"
  ],
  "cryptbase.dll": [
    "SystemFunction005",
    "SystemFunction003",
    "SystemFunction001",
    "SystemFunction034",
    "SystemFunction041",
    "SystemFunction036",
    "SystemFunction028",
    "SystemFunction004",
    "SystemFunction040",
    "SystemFunction002",
    "SystemFunction029"
  ],
  "cryptdlg.dll": [
    "CertConfigureTrustW",
    "EncodeRecipientID",
    "CertViewPropertiesA",
    "DllRegisterServer",
    "CertModifyCertificatesToTrust",
    "CertViewPropertiesW",
    "DllUnregisterServer",
    "FormatPKIXEmailProtection",
    "GetFriendlyNameOfCertA",
    "CertTrustFinalPolicy",
    "GetFriendlyNameOfCertW",
    "CertSelectCertificateW",
    "FormatVerisignExtension",
    "CertTrustCleanup",
    "EncodeAttrSequence",
    "CertConfigureTrustA",
    "CertTrustCertPolicy",
    "DecodeRecipientID",
    "CertSelectCertificateA",
    "DecodeAttrSequence",
    "CertTrustInit"
  ],
  "cryptdll.dll": [
    "CDLocateRng",
    "CDLocateCheckSum",
    "CDBuildVect",
    "CDLocateCSystem",
    "CDRegisterCheckSum",
    "aesCTSDecryptMsg",
    "CDRegisterRng",
    "CDGenerateRandomBits",
    "CDFindCommonCSystem",
    "HMACwithSHA",
    "aesCTSEncryptMsg",
    "MD5Update",
    "PBKDF2",
    "CDBuildIntegrityVect",
    "CDFindCommonCSystemWithKey",
    "CDRegisterCSystem",
    "MD5Final",
    "MD5Init",
    "CDGetIntegrityVect"
  ],
  "cryptext.dll": [
    "CryptExtOpenP7R",
    "CryptExtAddSPCW",
    "CryptExtOpenCERW",
    "CryptExtAddCRLW",
    "CryptExtOpenCRL",
    "DllRegisterServer",
    "CryptExtOpenCRLW",
    "DllUnregisterServer",
    "CryptExtOpenP7RW",
    "CryptExtOpenCATW",
    "CryptExtAddPFX",
    "CryptExtAddP7R",
    "CryptExtAddCERW",
    "CryptExtAddSPC",
    "CryptExtOpenPKCS7",
    "CryptExtAddCER",
    "CryptExtAddCRL",
    "CryptExtAddCTL",
    "CryptExtAddPFXW",
    "CryptExtOpenCTLW",
    "CryptExtOpenSTRW",
    "CryptExtOpenCAT",
    "CryptExtOpenSTR",
    "DllCanUnloadNow",
    "CryptExtAddP7RW",
    "CryptExtOpenCTL",
    "CryptExtOpenCER",
    "CryptExtOpenPKCS7W",
    "DllGetClassObject",
    "CryptExtAddCTLW"
  ],
  "cryptnet.dll": [
    "CryptRetrieveObjectByUrlW",
    "I_CryptNetGetHostNameFromUrl",
    "CryptInstallCancelRetrieval",
    "DllRegisterServer",
    "I_CryptNetSetUrlCachePreFetchInfo",
    "CryptCancelAsyncRetrieval",
    "DllUnregisterServer",
    "I_CryptConvertIriToAsciiOrUnicode",
    "CryptFlushTimeValidObject",
    "I_CryptNetGetConnectivity",
    "CryptGetObjectUrl",
    "I_CryptNetEnumUrlCacheEntry",
    "I_CryptNetGetUserDsStoreUrl",
    "CryptUninstallCancelRetrieval",
    "CertDllVerifyRevocation",
    "LdapProvOpenStore",
    "CryptGetTimeValidObject",
    "CryptRetrieveObjectByUrlA",
    "CertDllVerifyCTLUsage",
    "I_CryptNetSetUrlCacheFlushInfo"
  ],
  "cryptsp.dll": [
    "CryptSetProviderExA",
    "CryptSetProvParam",
    "CryptGetProvParam",
    "CryptHashData",
    "CryptImportKey",
    "CryptEnumProvidersW",
    "CryptExportKey",
    "CryptGetKeyParam",
    "CryptCreateHash",
    "CryptGetHashParam",
    "CryptVerifySignatureW",
    "CryptEnumProvidersA",
    "CryptContextAddRef",
    "CryptGenKey",
    "CryptGetDefaultProviderW",
    "CheckSignatureInFile",
    "CryptSetKeyParam",
    "CryptVerifySignatureA",
    "CryptEnumProviderTypesA",
    "CryptHashSessionKey",
    "CryptSetProviderExW",
    "CryptSignHashW",
    "CryptDestroyKey",
    "CryptEncrypt",
    "CryptDecrypt",
    "CryptSetProviderA",
    "CryptAcquireContextW",
    "CryptSetHashParam",
    "CryptDeriveKey",
    "CryptGenRandom",
    "CryptDuplicateKey",
    "CryptDuplicateHash",
    "CryptAcquireContextA",
    "CryptGetDefaultProviderA",
    "CryptSignHashA",
    "CryptEnumProviderTypesW",
    "CryptSetProviderW",
    "SystemFunction035",
    "CryptReleaseContext",
    "CryptGetUserKey",
    "CryptDestroyHash"
  ],
  "cryptsvc.dll": [
    "CryptServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "cryptui.dll": [
    "CryptUIDlgSelectPolicyServer",
    "CryptUIDlgViewCertificateA",
    "CryptUIDlgViewCRLA",
    "CryptUIDlgCertMgr",
    "CryptUIDlgSelectCertificateFromStore",
    "CryptUIViewExpiringCerts",
    "CryptUIWizImport",
    "CryptUIWizQueryCertRequestNoDS",
    "CryptUIFreeCertificatePropertiesPagesW",
    "EnrollmentCOMObjectFactory_getInstance",
    "CryptUIFreeCertificatePropertiesPagesA",
    "DllRegisterServer",
    "CryptUIDlgSelectCA",
    "CryptUIGetCertificatePropertiesPagesA",
    "CryptUIDlgViewCTLW",
    "CryptUIStartCertMgr",
    "CryptUIWizCreateCertRequestNoDS",
    "CryptUIDlgSelectStoreA",
    "DllUnregisterServer",
    "CryptUIDlgFreeCAContext",
    "CryptUIWizExport",
    "ACUIProviderInvokeUI",
    "RetrievePKCS7FromCA",
    "CryptUIFreeViewSignaturesPagesA",
    "CryptUIDlgViewSignerInfoW",
    "CryptUIWizCertRequest",
    "CryptUIWizDigitalSign",
    "CryptUIDlgViewCRLW",
    "CryptUIDlgViewCertificatePropertiesW",
    "CryptUIWizFreeDigitalSignContext",
    "WizardFree",
    "CryptUIDlgFreePolicyServerContext",
    "CryptUIWizFreeCertRequestNoDS",
    "CryptUIDlgSelectCertificateA",
    "CertSelectionGetSerializedBlob",
    "CryptUIWizBuildCTL",
    "CryptUIDlgAddPolicyServer",
    "CryptUIDlgPropertyPolicy",
    "CryptUIDlgViewContext",
    "CryptUIDlgViewCTLA",
    "CryptUIFreeViewSignaturesPagesW",
    "CryptUIGetCertificatePropertiesPagesW",
    "CryptUIGetViewSignaturesPagesW",
    "CryptUIWizSubmitCertRequestNoDS",
    "CryptUIGetViewSignaturesPagesA",
    "CryptUIDlgViewSignerInfoA",
    "CryptUIDlgViewCertificateW",
    "I_CryptUIProtectFailure",
    "LocalEnrollNoDS",
    "CryptUIDlgSelectCertificateW",
    "LocalEnroll",
    "CryptUIDlgSelectStoreW",
    "I_CryptUIProtect",
    "CryptUIDlgViewCertificatePropertiesA"
  ],
  "cryptxml.dll": [
    "CryptXmlGetReference",
    "CryptXmlSign",
    "CryptXmlCreateReference",
    "CryptXmlImportPublicKey",
    "CryptXmlVerifySignature",
    "CryptXmlOpenToEncode",
    "CryptXmlGetAlgorithmInfo",
    "CryptXmlGetTransforms",
    "CryptXmlDigestReference",
    "CryptXmlOpenToDecode",
    "CryptXmlGetDocContext",
    "CryptXmlAddObject",
    "CryptXmlEncode",
    "CryptXmlEnumAlgorithmInfo",
    "CryptXmlFindAlgorithmInfo",
    "CryptXmlSetHMACSecret",
    "CryptXmlGetStatus",
    "CryptXmlClose",
    "CryptXmlGetSignature"
  ],
  "cscapi.dll": [
    "CscNetApiGetInterface",
    "CscSearchApiGetInterface",
    "OfflineFilesEnable",
    "OfflineFilesQueryStatus"
  ],
  "cscdll.dll": [
    "CSCDeleteW",
    "CSCEnumForStatsExW",
    "CSCSetMaxSpace",
    "CSCFindFirstFileW",
    "CSCTransitionServerOnlineW",
    "CSCQueryFileStatusW",
    "CSCDoEnableDisable",
    "CSCTransitionPathOnline",
    "CSCIsServerOfflineW",
    "CSCPinFileW",
    "CSCEnumForStatsW",
    "CSCDisconnectPath",
    "CSCFindFirstFileForSidW",
    "CSCFindClose",
    "CSCUnpinFileW",
    "CSCIsCSCEnabled",
    "CSCIsPathOffline",
    "CSCFindNextFileW"
  ],
  "cscobj.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "ProcessGroupPolicy",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "cscsvc.dll": [
    "CscServiceMain",
    "CscTestGetInterface"
  ],
  "cscui.dll": [
    "CPlApplet",
    "CSCUIInitialize",
    "DllUnregisterServer",
    "CSCOptions_RunDLL",
    "DllCanUnloadNow",
    "CSCOptions_RunDLLW",
    "CSCOptions_RunDLLA",
    "DllGetClassObject",
    "CSCUISetState",
    "DllRegisterServer",
    "CSCUIRemoveFolderFromCache",
    "CSCUIOptionsPropertySheet"
  ],
  "csrsrv.dll": [
    "CsrConnectToUser",
    "CsrValidateMessageString",
    "CsrSetBackgroundPriority",
    "CsrCreateThread",
    "CsrDereferenceThread",
    "CsrCreateRemoteThread",
    "CsrQueryApiPort",
    "CsrUnlockProcess",
    "CsrImpersonateClient",
    "CsrLockedReferenceProcess",
    "CsrDestroyThread",
    "CsrCallServerFromServer",
    "CsrUnhandledExceptionFilter",
    "CsrRegisterClientThreadSetup",
    "CsrLockThreadByClientId",
    "CsrReferenceThread",
    "CsrDestroyProcess",
    "CsrShutdownProcesses",
    "CsrDereferenceProcess",
    "CsrAddStaticServerThread",
    "CsrValidateMessageBuffer",
    "CsrSetForegroundPriority",
    "CsrRevertToSelf",
    "CsrDeferredCreateProcess",
    "CsrGetProcessLuid",
    "CsrReplyToMessage",
    "CsrServerInitialization",
    "CsrUnlockThread",
    "CsrExecServerThread",
    "CsrLockProcessByClientId",
    "CsrCreateProcess"
  ],
  "ctl3d32.dll": [
    "Ctl3dUnAutoSubclass",
    "StaticWndProc3d",
    "Ctl3dAutoSubclassEx",
    "Ctl3dUnsubclassCtl",
    "Ctl3dSubclassDlg",
    "Ctl3dRegister",
    "Ctl3dIsAutoSubclass",
    "Ctl3dUnregister",
    "BtnWndProc3d",
    "EditWndProc3d",
    "Ctl3dGetVer",
    "Ctl3dSetStyle",
    "Ctl3dSubclassDlgEx",
    "ListWndProc3d",
    "Ctl3dColorChange",
    "Ctl3dWinIniChange",
    "Ctl3dCtlColorEx",
    "Ctl3dSubclassCtlEx",
    "Ctl3dCtlColor",
    "Ctl3dDlgProc",
    "ComboWndProc3d",
    "Ctl3dAutoSubclass",
    "Ctl3dEnabled",
    "Ctl3dDlgFramePaint",
    "Ctl3dSubclassCtl"
  ],
  "DDACLSys.dll": [
    "DDACLSys_Specialize"
  ],
  "DDOIProxy.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DDORes.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DHCPQEC.DLL": [
    "DhcpQecEnableTracing",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "InitializeQec",
    "UninitializeQec"
  ],
  "DShowRdpFilter.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "DWrite.dll": [
    "DWriteCreateFactory"
  ],
  "DXP.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "DXPTaskRingtone.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "DeviceCenter.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DeviceDisplayStatusManager.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DeviceMetadataParsers.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DevicePairing.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DevicePairingFolder.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DevicePairingHandler.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "DevicePairingProxy.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "DeviceUxRes.dll": "No exports",
  "DfsShlEx.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "DiagCpl.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "Display.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "DocumentPerformanceEvents.dll": "No exports",
  "DxpTaskSync.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "d2d1.dll": [
    "D2D1MakeSkewMatrix",
    "D2D1CreateFactory",
    "D2D1MakeRotateMatrix",
    "D2D1IsMatrixInvertible",
    "D2D1InvertMatrix"
  ],
  "d3d10.dll": [
    "D3D10DisassembleShader",
    "D3D10CreateDeviceAndSwapChain",
    "D3D10StateBlockMaskDisableAll",
    "D3D10ReflectShader",
    "D3D10GetGeometryShaderProfile",
    "D3D10GetVersion",
    "D3D10CreateEffectFromMemory",
    "D3D10StateBlockMaskDisableCapture",
    "D3D10CreateBlob",
    "D3D10DisassembleEffect",
    "D3D10GetPixelShaderProfile",
    "D3D10GetVertexShaderProfile",
    "D3D10GetOutputSignatureBlob",
    "D3D10StateBlockMaskGetSetting",
    "D3D10PreprocessShader",
    "D3D10CreateEffectPoolFromMemory",
    "D3D10GetInputAndOutputSignatureBlob",
    "D3D10StateBlockMaskEnableCapture",
    "D3D10CompileShader",
    "D3D10StateBlockMaskUnion",
    "D3D10GetShaderDebugInfo",
    "D3D10StateBlockMaskEnableAll",
    "D3D10StateBlockMaskIntersect",
    "D3D10CompileEffectFromMemory",
    "D3D10StateBlockMaskDifference",
    "D3D10RegisterLayers",
    "D3D10CreateStateBlock",
    "D3D10CreateDevice",
    "D3D10GetInputSignatureBlob"
  ],
  "d3d10_1.dll": [
    "D3D10DisassembleShader",
    "D3D10StateBlockMaskDisableAll",
    "D3D10ReflectShader",
    "D3D10GetGeometryShaderProfile",
    "D3D10CreateDevice1",
    "D3D10GetVersion",
    "D3D10CreateEffectFromMemory",
    "D3D10StateBlockMaskDisableCapture",
    "D3D10CreateBlob",
    "D3D10DisassembleEffect",
    "D3D10GetPixelShaderProfile",
    "D3D10GetVertexShaderProfile",
    "D3D10GetOutputSignatureBlob",
    "D3D10StateBlockMaskGetSetting",
    "D3D10PreprocessShader",
    "D3D10CreateEffectPoolFromMemory",
    "D3D10GetInputAndOutputSignatureBlob",
    "D3D10StateBlockMaskEnableCapture",
    "D3D10CompileShader",
    "D3D10StateBlockMaskUnion",
    "D3D10CreateDeviceAndSwapChain1",
    "D3D10GetShaderDebugInfo",
    "D3D10StateBlockMaskEnableAll",
    "D3D10StateBlockMaskIntersect",
    "D3D10CompileEffectFromMemory",
    "D3D10StateBlockMaskDifference",
    "D3D10RegisterLayers",
    "D3D10CreateStateBlock",
    "D3D10GetInputSignatureBlob"
  ],
  "d3d10_1core.dll": [
    "D3DKMTSetDisplayPrivateDriverFormat",
    "D3DKMTPresent",
    "D3DKMTSetAllocationPriority",
    "D3DKMTGetContextSchedulingPriority",
    "D3D10CoreGetVersion",
    "D3DKMTCreateAllocation",
    "D3DKMTGetMultisampleMethodList",
    "OpenAdapter10",
    "D3DKMTRender",
    "D3DKMTCreateContext",
    "D3DKMTDestroyDevice",
    "D3DKMTDestroySynchronizationObject",
    "D3D10CoreCreateDevice1",
    "D3DKMTOpenResource",
    "D3DKMTSetGammaRamp",
    "D3DKMTOpenAdapterFromHdc",
    "D3DKMTWaitForVerticalBlankEvent",
    "D3DKMTDestroyContext",
    "D3D10CoreGetSupportedVersions",
    "D3DKMTGetDisplayModeList",
    "OpenAdapter10_2",
    "D3DKMTGetDeviceState",
    "D3DKMTQueryResourceInfo",
    "D3DKMTSignalSynchronizationObject",
    "D3DKMTQueryAdapterInfo",
    "D3DKMTLock",
    "D3DKMTSetVidPnSourceOwner",
    "D3DKMTWaitForSynchronizationObject",
    "D3DKMTGetRuntimeData",
    "D3DKMTGetSharedPrimaryHandle",
    "D3DKMTCloseAdapter",
    "D3DKMTCreateSynchronizationObject",
    "D3DKMTEscape",
    "D3DKMTSetContextSchedulingPriority",
    "D3DKMTSetDisplayMode",
    "D3DKMTCreateDevice",
    "D3D10CoreRegisterLayers",
    "D3DKMTDestroyAllocation",
    "D3DKMTUnlock",
    "D3DKMTQueryAllocationResidency"
  ],
  "d3d10core.dll": [
    "D3DKMTSetDisplayPrivateDriverFormat",
    "D3DKMTPresent",
    "D3DKMTSetAllocationPriority",
    "D3DKMTGetContextSchedulingPriority",
    "D3D10CoreGetVersion",
    "D3DKMTCreateAllocation",
    "D3DKMTGetMultisampleMethodList",
    "OpenAdapter10",
    "D3DKMTRender",
    "D3DKMTCreateContext",
    "D3DKMTDestroyDevice",
    "D3DKMTDestroySynchronizationObject",
    "D3DKMTOpenResource",
    "D3DKMTSetGammaRamp",
    "D3DKMTOpenAdapterFromHdc",
    "D3DKMTWaitForVerticalBlankEvent",
    "D3DKMTDestroyContext",
    "D3D10CoreGetSupportedVersions",
    "D3DKMTGetDisplayModeList",
    "OpenAdapter10_2",
    "D3DKMTGetDeviceState",
    "D3DKMTQueryResourceInfo",
    "D3DKMTSignalSynchronizationObject",
    "D3DKMTQueryAdapterInfo",
    "D3DKMTLock",
    "D3DKMTSetVidPnSourceOwner",
    "D3D10CoreCreateDevice",
    "D3DKMTWaitForSynchronizationObject",
    "D3DKMTGetRuntimeData",
    "D3DKMTGetSharedPrimaryHandle",
    "D3DKMTCloseAdapter",
    "D3DKMTCreateSynchronizationObject",
    "D3DKMTEscape",
    "D3DKMTSetContextSchedulingPriority",
    "D3DKMTSetDisplayMode",
    "D3DKMTCreateDevice",
    "D3D10CoreRegisterLayers",
    "D3DKMTDestroyAllocation",
    "D3DKMTUnlock",
    "D3DKMTQueryAllocationResidency"
  ],
  "d3d10level9.dll": [
    "D3DKMTSetDisplayPrivateDriverFormat",
    "D3DKMTPresent",
    "D3DKMTSetAllocationPriority",
    "D3D10CreateDeviceExternalImplementation",
    "D3DKMTGetContextSchedulingPriority",
    "D3D10CheckLevel9Hardware",
    "D3DKMTCreateAllocation",
    "D3DKMTSignalSynchronizationObject2",
    "D3DKMTCreateAllocation2",
    "D3DKMTGetMultisampleMethodList",
    "OpenAdapter10",
    "D3DKMTOpenAdapterFromGdiDisplayName",
    "D3DKMTRender",
    "D3DKMTSetDeviceSchedulingPriority",
    "D3DKMTCreateContext",
    "D3DKMTDestroyDevice",
    "D3DKMTDestroySynchronizationObject",
    "D3D10Level9DumpJournal",
    "D3DKMTAcquireKeyedMutex",
    "D3DKMTOpenResource",
    "D3DKMTSetGammaRamp",
    "D3DKMTCreateSynchronizationObject2",
    "D3DKMTOpenResource2",
    "D3DKMTGetDeviceSchedulingPriority",
    "D3DKMTWaitForVerticalBlankEvent",
    "D3DKMTOpenKeyedMutex",
    "D3DKMTDestroyContext",
    "OpenAdapter10_2",
    "D3DKMTGetDisplayModeList",
    "D3DKMTOpenSynchronizationObject",
    "D3DKMTGetDeviceState",
    "D3D11CreateDeviceExternalImplementation",
    "D3DKMTQueryResourceInfo",
    "D3DKMTSignalSynchronizationObject",
    "D3DKMTQueryAdapterInfo",
    "D3DKMTLock",
    "D3DKMTSetVidPnSourceOwner",
    "D3DKMTWaitForSynchronizationObject",
    "D3DKMTReleaseKeyedMutex",
    "D3DKMTGetRuntimeData",
    "D3DKMTDestroyKeyedMutex",
    "D3DKMTGetSharedPrimaryHandle",
    "D3DKMTCreateKeyedMutex",
    "D3DKMTWaitForSynchronizationObject2",
    "D3DKMTCloseAdapter",
    "D3DKMTCreateSynchronizationObject",
    "D3DKMTEscape",
    "D3DKMTOpenAdapterFromDeviceName",
    "D3DKMTSetContextSchedulingPriority",
    "D3DKMTSetDisplayMode",
    "D3DKMTCreateDevice",
    "D3DKMTUnlock",
    "D3DKMTDestroyAllocation",
    "D3DKMTQueryAllocationResidency",
    "D3DKMTSetQueuedLimit"
  ],
  "d3d10warp.dll": [
    "D3DKMTSetDisplayPrivateDriverFormat",
    "D3DKMTPresent",
    "D3DKMTSetAllocationPriority",
    "D3DKMTGetContextSchedulingPriority",
    "D3DKMTCreateAllocation",
    "D3DKMTGetMultisampleMethodList",
    "OpenAdapter10",
    "D3DKMTOpenAdapterFromGdiDisplayName",
    "D3DKMTRender",
    "D3DKMTSetDeviceSchedulingPriority",
    "D3DKMTCreateContext",
    "D3DKMTDestroyDevice",
    "D3DKMTDestroySynchronizationObject",
    "D3DKMTOpenResource",
    "D3DKMTSetGammaRamp",
    "D3DKMTGetDeviceSchedulingPriority",
    "D3DKMTWaitForVerticalBlankEvent",
    "D3DKMTDestroyContext",
    "OpenAdapter10_2",
    "D3DKMTGetDisplayModeList",
    "D3DKMTGetDeviceState",
    "D3DKMTQueryResourceInfo",
    "D3DKMTSignalSynchronizationObject",
    "D3DKMTQueryAdapterInfo",
    "D3DKMTLock",
    "D3DKMTSetVidPnSourceOwner",
    "D3DKMTWaitForSynchronizationObject",
    "D3DKMTGetRuntimeData",
    "D3DKMTGetSharedPrimaryHandle",
    "D3DKMTCloseAdapter",
    "D3DKMTCreateSynchronizationObject",
    "D3D10RefGetLastCreation",
    "D3DKMTEscape",
    "D3DKMTOpenAdapterFromDeviceName",
    "D3DKMTSetContextSchedulingPriority",
    "D3DKMTSetDisplayMode",
    "D3DKMTCreateDevice",
    "D3DKMTUnlock",
    "D3DKMTDestroyAllocation",
    "SetInfoQueue",
    "D3DKMTQueryAllocationResidency"
  ],
  "d3d11.dll": [
    "D3DKMTSetDisplayPrivateDriverFormat",
    "D3DKMTPresent",
    "D3DKMTSetAllocationPriority",
    "D3DKMTGetContextSchedulingPriority",
    "D3DKMTCreateAllocation",
    "D3DKMTGetMultisampleMethodList",
    "OpenAdapter10",
    "D3DKMTRender",
    "D3DKMTCreateContext",
    "D3DKMTDestroySynchronizationObject",
    "D3D11CoreRegisterLayers",
    "D3DKMTDestroyDevice",
    "D3DKMTOpenResource",
    "D3DKMTSetGammaRamp",
    "D3DKMTOpenAdapterFromHdc",
    "D3D11CreateDevice",
    "D3DKMTWaitForVerticalBlankEvent",
    "D3DKMTDestroyContext",
    "OpenAdapter10_2",
    "D3DKMTGetDisplayModeList",
    "D3D11CoreCreateDevice",
    "D3DKMTGetDeviceState",
    "D3D11CoreCreateLayeredDevice",
    "D3DKMTQueryResourceInfo",
    "D3DKMTSignalSynchronizationObject",
    "D3DKMTQueryAdapterInfo",
    "D3DKMTLock",
    "D3D11CreateDeviceAndSwapChain",
    "D3DKMTSetVidPnSourceOwner",
    "D3DKMTWaitForSynchronizationObject",
    "D3DKMTGetRuntimeData",
    "D3DKMTGetSharedPrimaryHandle",
    "D3D11CoreGetLayeredDeviceSize",
    "D3DKMTCloseAdapter",
    "D3DKMTCreateSynchronizationObject",
    "D3DKMTEscape",
    "D3DKMTSetContextSchedulingPriority",
    "D3DKMTSetDisplayMode",
    "D3DKMTCreateDevice",
    "D3DKMTUnlock",
    "D3DKMTDestroyAllocation",
    "D3DKMTQueryAllocationResidency"
  ],
  "d3d8.dll": [
    "DebugSetMute",
    "ValidatePixelShader",
    "Direct3DCreate8",
    "ValidateVertexShader"
  ],
  "d3d8thk.dll": [
    "OsThunkDdUpdateOverlay",
    "OsThunkDdRenderMoComp",
    "OsThunkDdLockD3D",
    "OsThunkDdColorControl",
    "OsThunkDdQueryDirectDrawObject",
    "OsThunkDdSetOverlayPosition",
    "OsThunkDdAlphaBlt",
    "OsThunkDdGetMoCompFormats",
    "OsThunkDdSetExclusiveMode",
    "OsThunkDdBeginMoCompFrame",
    "OsThunkDdCreateD3DBuffer",
    "OsThunkDdDestroyD3DBuffer",
    "OsThunkDdAttachSurface",
    "OsThunkDdFlipToGDISurface",
    "OsThunkDdDeleteSurfaceObject",
    "OsThunkDdGetDriverState",
    "OsThunkDdGetMoCompGuids",
    "OsThunkDdCreateDirectDrawObject",
    "OsThunkD3dValidateTextureStageState",
    "OsThunkDdReenableDirectDrawObject",
    "OsThunkDdCreateMoComp",
    "OsThunkDdSetColorKey",
    "OsThunkDdFlip",
    "OsThunkDdCreateSurface",
    "OsThunkDdUnlock",
    "OsThunkDdWaitForVerticalBlank",
    "OsThunkDdQueryMoCompStatus",
    "OsThunkDdDestroyMoComp",
    "OsThunkDdDestroySurface",
    "OsThunkD3dContextDestroy",
    "OsThunkDdSetGammaRamp",
    "OsThunkDdGetMoCompBuffInfo",
    "OsThunkDdLock",
    "OsThunkDdUnlockD3D",
    "OsThunkDdEndMoCompFrame",
    "OsThunkDdGetDC",
    "OsThunkDdUnattachSurface",
    "OsThunkDdGetScanLine",
    "OsThunkDdCreateSurfaceObject",
    "OsThunkDdCanCreateD3DBuffer",
    "OsThunkDdCreateSurfaceEx",
    "OsThunkDdReleaseDC",
    "OsThunkDdGetDxHandle",
    "OsThunkDdGetBltStatus",
    "OsThunkDdResetVisrgn",
    "OsThunkDdBlt",
    "OsThunkD3dContextCreate",
    "OsThunkDdGetAvailDriverMemory",
    "OsThunkD3dContextDestroyAll",
    "OsThunkDdGetInternalMoCompInfo",
    "OsThunkDdGetDriverInfo",
    "OsThunkDdDeleteDirectDrawObject",
    "OsThunkDdGetFlipStatus",
    "OsThunkDdCanCreateSurface",
    "OsThunkD3dDrawPrimitives2",
    "OsThunkDdAddAttachedSurface"
  ],
  "d3d9.dll": [
    "DebugSetLevel",
    "Direct3DCreate9",
    "D3DPERF_SetMarker",
    "D3DPERF_GetStatus",
    "D3DPERF_QueryRepeatFrame",
    "D3DPERF_SetOptions",
    "Direct3DCreate9Ex",
    "DebugSetMute",
    "D3DPERF_EndEvent",
    "D3DPERF_BeginEvent",
    "PSGPError",
    "Direct3DShaderValidatorCreate9",
    "D3DPERF_SetRegion",
    "PSGPSampleTexture"
  ],
  "d3dim.dll": [
    "Direct3DCreateDevice",
    "Direct3DCreate",
    "FlushD3DDevices",
    "FlushD3DDevices2",
    "D3DFree",
    "PaletteAssociateNotify",
    "D3DMalloc",
    "Direct3D_HALCleanUp",
    "Direct3DCreateTexture",
    "SurfaceFlipNotify",
    "Direct3DGetSWRastZPixFmts",
    "PaletteUpdateNotify",
    "D3DRealloc"
  ],
  "d3dim700.dll": [
    "SetLOD",
    "Direct3DCreateDevice",
    "GetPriority",
    "D3DBreakVBLock",
    "Direct3DCreate",
    "DestroyTexture",
    "FlushD3DDevices",
    "D3DFree",
    "GetLOD",
    "PaletteAssociateNotify",
    "D3DMalloc",
    "Direct3D_HALCleanUp",
    "SurfaceFlipNotify",
    "D3DRealloc",
    "D3DTextureUpdate",
    "PaletteUpdateNotify",
    "CreateTexture",
    "SetPriority"
  ],
  "d3dramp.dll": [
    "RampOldTri",
    "g_RampOld_BeadTbl"
  ],
  "d3dxof.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DirectXFileCreate"
  ],
  "dataclen.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "davclnt.dll": [
    "NPCancelConnection",
    "NPGetResourceParent",
    "NPAddConnection3",
    "NPEnumResource",
    "NPGetCaps",
    "DavRegisterAuthCallback",
    "NPGetResourceInformation",
    "DavInvalidateCache",
    "NPCloseEnum",
    "DavGetDiskSpaceUsage",
    "DavFreeUsedDiskSpace",
    "NPGetConnection",
    "DllMain",
    "DavCancelConnectionsToServer",
    "NPAddConnection",
    "DavUnregisterAuthCallback",
    "NPGetUser",
    "DllCanUnloadNow",
    "NPGetUniversalName",
    "DllGetClassObject",
    "NPFormatNetworkName",
    "NPOpenEnum",
    "DavGetTheLockOwnerOfTheFile"
  ],
  "davhlpr.dll": [
    "DavFlushFile",
    "DavGetServerPortAndPhysicalName",
    "DavGetUNCFromHTTPPath",
    "DavGetExtendedError",
    "DavCheckAndConvertHttpUrlToUncName",
    "DavDeleteConnection",
    "DavRemoveDummyShareFromFileName",
    "UtfUrlStrToWideStr",
    "DavGetHTTPFromUNCPath",
    "WideStrToUtfUrlStr",
    "DavAddConnection",
    "DavRemoveDummyShareFromFileNameEx"
  ],
  "dbgeng.dll": [
    "DebugConnect",
    "DebugConnectWide",
    "DebugCreate"
  ],
  "dbghelp.dll": [
    "SymSrvStoreSupplementW",
    "SymAddSourceStreamW",
    "SymGetTypeInfo",
    "SymGetLinePrev",
    "ImageDirectoryEntryToData",
    "FindDebugInfoFileEx",
    "SymFindFileInPathW",
    "SymFromTokenW",
    "UnmapDebugInformation",
    "SymGetSymFromName64",
    "ExtensionApiVersion",
    "SymNextW",
    "block",
    "SymEnumSymbolsW",
    "SymInitialize",
    "SymMatchString",
    "omap",
    "EnumerateLoadedModules",
    "SymEnumTypesByNameW",
    "SymGetLineFromAddr64",
    "SymSrvGetFileIndexInfo",
    "SymFromNameW",
    "SymMatchFileName",
    "ImageRvaToSection",
    "SymEnumSymbolsForAddrW",
    "SymPrevW",
    "MakeSureDirectoryPathExists",
    "SymGetSymbolFile",
    "SymGetModuleBase64",
    "SymFindExecutableImageW",
    "SymMatchFileNameW",
    "SymSetContext",
    "SymGetUnwindInfo",
    "SymMatchStringA",
    "SymSrvGetFileIndexesW",
    "SymEnumerateSymbolsW",
    "SymFindExecutableImage",
    "MiniDumpWriteDump",
    "GetTimestampForLoadedLibrary",
    "SymGetScope",
    "SymSetScopeFromIndex",
    "homedir",
    "SymGetSourceVarFromTokenW",
    "SymGetModuleInfo64",
    "SymGetSymFromName",
    "lmi",
    "SymGetModuleInfoW64",
    "StackWalk",
    "SymGetSourceFileTokenW",
    "FindExecutableImageEx",
    "SymEnumLines",
    "SymFunctionTableAccess64",
    "SymEnumTypes",
    "ImageNtHeader",
    "vc7fpo",
    "SymDeleteSymbol",
    "SymGetSourceFile",
    "SymEnumerateModules",
    "SymSrvGetSupplementW",
    "SymGetModuleInfoW",
    "SymGetSourceVarFromToken",
    "SymSetSearchPathW",
    "SymGetSymNext64",
    "SymUnloadModule64",
    "SymEnumTypesByName",
    "SymFunctionTableAccess",
    "SymEnumSourceLinesW",
    "SymGetLineFromAddr",
    "SymSrvStoreFile",
    "SymGetSymPrev64",
    "SymRegisterCallbackW64",
    "SymFindDebugInfoFile",
    "SymFindDebugInfoFileW",
    "SymGetLinePrev64",
    "SymGetOmaps",
    "SymGetLinePrevW64",
    "SymGetSearchPath",
    "SymSrvGetFileIndexStringW",
    "SymUnDName64",
    "SymGetLineNext64",
    "SymSrvIsStore",
    "SymSetHomeDirectory",
    "EnumerateLoadedModulesW64",
    "SymRefreshModuleList",
    "SymGetLineFromNameW64",
    "DbgHelpCreateUserDump",
    "SymSetScopeFromAddr",
    "WinDbgExtensionDllInit",
    "EnumerateLoadedModulesExW",
    "SymSrvStoreFileW",
    "SymGetSourceFileFromToken",
    "SymSrvGetSupplement",
    "SymUnDName",
    "SymInitializeW",
    "SymEnumerateModulesW64",
    "EnumDirTreeW",
    "stack_force_ebp",
    "UnDecorateSymbolName",
    "SymFromToken",
    "SymAddSymbol",
    "SymEnumerateSymbolsW64",
    "FindDebugInfoFileExW",
    "FindFileInPath",
    "SymGetLineNext",
    "SymSrvGetFileIndexes",
    "StackWalk64",
    "SymGetLineFromName64",
    "SymGetSearchPathW",
    "SymLoadModule64",
    "SymEnumerateModules64",
    "FindDebugInfoFile",
    "SymGetOptions",
    "SymEnumProcesses",
    "SymSrvIsStoreW",
    "itoldyouso",
    "SymDeleteSymbolW",
    "MapDebugInformation",
    "SymGetScopeW",
    "SymSrvDeltaName",
    "SymGetSourceFileFromTokenW",
    "SymAddSourceStreamA",
    "SymFromName",
    "SymEnumSym",
    "SymAddSymbolW",
    "symsrv",
    "SymLoadModuleEx",
    "SymEnumLinesW",
    "SearchTreeForFile",
    "ImageDirectoryEntryToDataEx",
    "SymUnloadModule",
    "fptr",
    "SymEnumSourceFilesW",
    "SymGetFileLineOffsets64",
    "sym",
    "SymRegisterFunctionEntryCallback",
    "ImagehlpApiVersion",
    "SymEnumSymbols",
    "chksym",
    "SymEnumerateSymbols",
    "SymGetTypeFromName",
    "SymSetParentWindow",
    "SymCleanup",
    "SymEnumerateSymbols64",
    "SymGetLineNextW64",
    "SymEnumSourceLines",
    "SymGetLineFromName",
    "SymSrvGetFileIndexString",
    "SymMatchStringW",
    "ImageRvaToVa",
    "SymSearchW",
    "EnumerateLoadedModulesEx",
    "SymLoadModuleExW",
    "SymGetTypeFromNameW",
    "SymRegisterCallback64",
    "ImagehlpApiVersionEx",
    "SymFromAddrW",
    "SymGetLineFromAddrW64",
    "SymSrvGetFileIndexInfoW",
    "SymFromAddr",
    "SymGetModuleBase",
    "SymGetTypeInfoEx",
    "FindExecutableImage",
    "SymAddSourceStream",
    "EnumerateLoadedModules64",
    "SymFindFileInPath",
    "SymSetHomeDirectoryW",
    "SymGetSourceFileW",
    "SymSetSearchPath",
    "stackdbg",
    "SymGetSymFromAddr",
    "SearchTreeForFileW",
    "SymEnumSourceFileTokens",
    "SymPrev",
    "UnDecorateSymbolNameW",
    "dbghelp",
    "srcfiles",
    "DbgHelpCreateUserDumpW",
    "SymGetSymbolFileW",
    "SymGetSymPrev",
    "SymLoadModule",
    "dh",
    "FindFileInSearchPath",
    "MiniDumpReadDumpStream",
    "SymNext",
    "SymFromIndex",
    "SymEnumTypesW",
    "SymGetHomeDirectoryW",
    "SymFromIndexW",
    "SymGetSymFromAddr64",
    "SymGetHomeDirectory",
    "SymRegisterFunctionEntryCallback64",
    "SymEnumSourceFiles",
    "SymEnumSymbolsForAddr",
    "SymSrvStoreSupplement",
    "FindExecutableImageExW",
    "SymSetOptions",
    "SymRegisterCallback",
    "SymSrvDeltaNameW",
    "lminfo",
    "SymGetSourceFileToken",
    "SymGetSymNext",
    "SymGetOmapBlockBase",
    "SymGetModuleInfo",
    "SymSearch",
    "EnumDirTree"
  ],
  "dbnetlib.dll": [
    "ConnectionOption",
    "InitSessionEx",
    "ConnectionServerEnumW",
    "ConnectionObjectSize",
    "GenClientContextEx",
    "ConnectionError",
    "ConnectionGetSvrUser",
    "ConnectionSqlVer",
    "ConnectionErrorW",
    "InitEnumServers",
    "ConnectionServerEnum",
    "ConnectionWrite",
    "GenClientContext",
    "TermSessionEx",
    "ConnectionMode",
    "ConnectionOpen",
    "ConnectionClose",
    "InitSession",
    "TermSSPIPackage",
    "GetNextEnumeration",
    "ConnectionWriteOOB",
    "ConnectionRead",
    "TermSession",
    "ConnectionOpenW",
    "ConnectionVer",
    "InitSSPIPackage",
    "ConnectionCheckForData",
    "ConnectionFlushCache",
    "ConnectionTransact",
    "CloseEnumServers",
    "ConnectionStatus"
  ],
  "dbnmpntw.dll": [
    "ConnectionRead",
    "ConnectionServerEnum",
    "ConnectionServerEnumW",
    "ConnectionError",
    "ConnectionOpenW",
    "ConnectionWrite",
    "ConnectionMode",
    "ConnectionOpen",
    "ConnectionClose",
    "ConnectionVer",
    "ConnectionCheckForData",
    "ConnectionTransact",
    "ConnectionObjectSize",
    "ConnectionWriteOOB",
    "ConnectionErrorW",
    "ConnectionStatus"
  ],
  "dciman32.dll": [
    "DCIEnum",
    "DCISetSrcDestClip",
    "WinWatchOpen",
    "GetDCRegionData",
    "DCICloseProvider",
    "DCIDraw",
    "DCIEndAccess",
    "DCISetDestination",
    "WinWatchDidStatusChange",
    "DCIOpenProvider",
    "DCISetClipList",
    "DCICreateOverlay",
    "DCICreatePrimary",
    "WinWatchGetClipList",
    "WinWatchNotify",
    "DCICreateOffscreen",
    "DCIDestroy",
    "DCIBeginAccess",
    "GetWindowRegionData",
    "WinWatchClose"
  ],
  "ddraw.dll": [
    "DirectDrawCreateEx",
    "DirectDrawCreateClipper",
    "DirectDrawEnumerateExA",
    "GetDDSurfaceLocal",
    "AcquireDDThreadLock",
    "DDInternalUnlock",
    "DSoundHelp",
    "DDInternalLock",
    "DirectDrawEnumerateW",
    "D3DParseUnknownCommand",
    "RegisterSpecialCase",
    "DDGetAttachedSurfaceLcl",
    "DirectDrawEnumerateA",
    "DirectDrawEnumerateExW",
    "CompleteCreateSysmemSurface",
    "SetAppCompatData",
    "DllCanUnloadNow",
    "ReleaseDDThreadLock",
    "GetOLEThunkData",
    "DirectDrawCreate",
    "DllGetClassObject",
    "GetSurfaceFromDC"
  ],
  "ddrawex.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "defaultlocationcpl.dll": [
    "DllCanUnloadNow",
    "RequestDLPPermissionsInternalW",
    "RequestDLPPermissionsInternalA",
    "DllGetClassObject"
  ],
  "defragproxy.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "defragsvc.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "ServiceMain"
  ],
  "deskadp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "deskmon.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "deskperf.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "devenum.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "devmgr.dll": [
    "DeviceCreateHardwarePageCustom",
    "DeviceAdvancedPropertiesA",
    "DeviceProblemWizardW",
    "DeviceProperties_RunDLLA",
    "DevicePropertiesW",
    "DevicePropertiesExW",
    "DllRegisterServer",
    "DllUnregisterServer",
    "DeviceProblenWizard_RunDLLW",
    "DeviceProblenWizard_RunDLLA",
    "DeviceProblemWizardA",
    "DeviceAdvancedPropertiesW",
    "DeviceManager_ExecuteW",
    "DeviceProblemTextA",
    "DevicePropertiesA",
    "DeviceManager_ExecuteA",
    "DllCanUnloadNow",
    "DeviceProperties_RunDLLW",
    "DllGetClassObject",
    "DevicePropertiesExA",
    "DeviceProblemTextW",
    "DeviceCreateHardwarePageEx",
    "DeviceCreateHardwarePage"
  ],
  "devobj.dll": [
    "DevObjOpenDeviceInterface",
    "DevObjCreateDeviceInterfaceRegKey",
    "DevObjDeleteAllInterfacesForDevice",
    "DevObjSetDeviceProperty",
    "DevObjSetDeviceInterfaceDefault",
    "DevObjSetDeviceInterfaceProperty",
    "DevObjGetClassProperty",
    "DevObjCreateDeviceInterface",
    "DevObjEnumDeviceInterfaces",
    "DevObjCreateDeviceInfo",
    "DevObjEnumDeviceInfo",
    "DevObjDeleteDeviceInterfaceRegKey",
    "DevObjGetDeviceInstanceId",
    "DevObjRemoveDeviceInterface",
    "DevObjRegisterDeviceInfo",
    "DevObjOpenDevRegKey",
    "DevObjBuildClassInfoList",
    "DevObjDeleteDevice",
    "DevObjOpenClassRegKey",
    "DevObjSetClassProperty",
    "DevObjGetClassDescription",
    "DevObjOpenDeviceInterfaceRegKey",
    "DevObjDeleteDeviceInterfaceData",
    "DevObjDeleteDevRegKey",
    "DevObjOpenDeviceInfo",
    "DevObjGetDeviceInfoDetail",
    "DevObjDestroyDeviceInfoList",
    "DevObjSetClassRegistryProperty",
    "DevObjGetDeviceInterfaceDetail",
    "DevObjGetClassPropertyKeys",
    "DevObjLocateDevice",
    "DevObjSetDeviceRegistryProperty",
    "DevObjClassGuidsFromName",
    "DevObjDeleteDeviceInfo",
    "DevObjCreateDevRegKey",
    "DevObjClassNameFromGuid",
    "DevObjGetDeviceProperty",
    "DevObjGetDeviceInfoListClass",
    "DevObjGetDeviceInterfacePropertyKeys",
    "DevObjGetClassDevs",
    "DevObjGetDeviceInterfaceProperty",
    "DevObjGetDeviceRegistryProperty",
    "DevObjCreateDeviceInfoList",
    "DevObjSetDeviceInfoDetail",
    "DevObjGetClassRegistryProperty",
    "DevObjGetDevicePropertyKeys",
    "DevObjGetDeviceInfoListDetail",
    "DevObjGetDeviceInterfaceAlias"
  ],
  "devrtl.dll": [
    "DevRtlCreateTextLogSectionA",
    "NdxTableGetPropertyTypeCount",
    "DevRtlWriteTextLog",
    "DevRtlCloseTextLogSection",
    "NdxTableGetPropertyValue",
    "NdxTableRemoveObject",
    "NdxTableAddObject",
    "NdxTableRemoveObjectFromList",
    "NdxTableSetPropertyValue",
    "NdxTableGetObjectTypeCount",
    "NdxTableObjectFromPointer",
    "NdxTableAddObjectToList",
    "DevRtlGetThreadLogToken",
    "NdxTableClose",
    "NdxTableNextObject",
    "NdxTableFirstObject",
    "NdxTableObjectFromName",
    "NdxTableGetPropertyTypeClass",
    "NdxTableGetObjectName",
    "NdxTableSetObjectPointer",
    "NdxTableOpen",
    "NdxTableSetTypeDefinition",
    "NdxTableGetObjectType",
    "NdxTableGetPropertyTypeName",
    "DevRtlWriteTextLogError",
    "NdxTableFirstObjectInList",
    "DevRtlCreateTextLogSectionW",
    "NdxTableGetObjectTypeName",
    "DevRtlSetThreadLogToken"
  ],
  "dfdts.dll": [
    "DfdGetDefaultPolicyAndSMART",
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "dfscli.dll": [
    "NetDfsAddStdRoot",
    "NetDfsAddFtRoot",
    "NetDfsRemove",
    "I_NetDfsIsThisADomainName",
    "NetDfsManagerInitialize",
    "NetDfsGetSecurity",
    "NetDfsRemoveFtRoot",
    "NetDfsRemoveStdRoot",
    "NetDfsManagerSendSiteInfo",
    "NetDfsGetDcAddress",
    "NetDfsRemoveFtRootForced",
    "NetDfsRename",
    "NetDfsSetSecurity",
    "NetDfsSetInfo",
    "NetDfsAdd",
    "NetDfsMove",
    "NetDfsRemoveRootTarget",
    "NetDfsAddRootTarget",
    "NetDfsGetStdContainerSecurity",
    "NetDfsSetStdContainerSecurity",
    "NetDfsEnum",
    "NetDfsGetInfo",
    "NetDfsGetFtContainerSecurity",
    "NetDfsAddStdRootForced",
    "NetDfsGetSupportedNamespaceVersion",
    "NetDfsGetClientInfo",
    "NetDfsManagerGetConfigInfo",
    "NetDfsSetFtContainerSecurity",
    "NetDfsSetClientInfo"
  ],
  "dfshim.dll": [
    "ShOpenVerbApplication",
    "ParseManifest",
    "GetDeploymentDataFromManifest",
    "GetUserStore",
    "ShArpMaintain",
    "ShOpenVerbExtension",
    "ShOpenVerbExtensionW",
    "LaunchApplication",
    "ShOpenVerbShortcutW",
    "CleanOnlineAppCache",
    "CreateActContext",
    "ShArpMaintainW",
    "GetUserStateManager",
    "KillService",
    "ShOpenVerbShortcut",
    "DllCanUnloadNow",
    "GetCurrentActContext",
    "CreateCMSFromXml",
    "DllGetClassObject",
    "ShOpenVerbApplicationW"
  ],
  "dhcpcmonitor.dll": [
    "InitHelperDll"
  ],
  "dhcpcore.dll": [
    "DhcpGlobalTerminateEvent",
    "DhcpGlobalIsShuttingDown",
    "DhcpGlobalServiceSyncEvent",
    "ServiceMain"
  ],
  "dhcpcore6.dll": [
    "Dhcpv6Main"
  ],
  "dhcpcsvc.dll": [
    "DhcpAcquireParameters",
    "DhcpNotifyConfigChange",
    "McastRequestAddress",
    "DhcpDeRegisterParamChange",
    "DhcpLeaseIpAddressEx",
    "DhcpReleaseParameters",
    "DhcpRegisterOptions",
    "DhcpSetFallbackParams",
    "DhcpSetClientId",
    "DhcpNotifyMediaReconnected",
    "DhcpFreeEnumeratedInterfaces",
    "DhcpGlobalServiceSyncEvent",
    "DhcpRenewIpAddressLease",
    "McastRenewAddress",
    "DhcpGetClassId",
    "DhcpGetClientId",
    "DhcpFreeMem",
    "DhcpRequestOptions",
    "McastReleaseAddress",
    "DhcpGetTraceArray",
    "DhcpOpenGlobalEvent",
    "DhcpRequestCachedParams",
    "DhcpSetClassId",
    "DhcpGetNotificationStatus",
    "DhcpEnumInterfaces",
    "DhcpNotifyConfigChangeEx",
    "DhcpGlobalTerminateEvent",
    "DhcpReleaseIpAddressLease",
    "DhcpIsEnabled",
    "DhcpGlobalIsShuttingDown",
    "DhcpRemoveDNSRegistrations",
    "DhcpEnableTracing",
    "DhcpEnableDhcp",
    "DhcpSetMSFTVendorSpecificOptions",
    "Dhcpv4CheckServerAvailability",
    "DhcpHandlePnPEvent",
    "DhcpDelPersistentRequestParams",
    "DhcpGetDhcpServicedConnections",
    "DhcpGetFallbackParams",
    "McastEnumerateScopes",
    "DhcpDeRegisterConnectionStateNotification",
    "DhcpEnumClasses",
    "DhcpQueryLeaseInfo",
    "DhcpRenewIpAddressLeaseEx",
    "DhcpLeaseIpAddress",
    "DhcpRequestParams",
    "McastGenUID",
    "Dhcpv4EnableDhcpEx",
    "DhcpQueryLeaseInfoEx",
    "DhcpPersistentRequestParams",
    "McastApiStartup",
    "DhcpCApiInitialize",
    "DhcpAcquireParametersByBroadcast",
    "DhcpGetOriginalSubnetMask",
    "DhcpReleaseIpAddressLeaseEx",
    "DhcpUndoRequestParams",
    "DhcpFreeLeaseInfo",
    "DhcpClient_Generalize",
    "DhcpFallbackRefreshParams",
    "DhcpRegisterConnectionStateNotification",
    "DhcpStaticRefreshParams",
    "McastApiCleanup",
    "DhcpRegisterParamChange",
    "DhcpDeRegisterOptions",
    "DhcpCApiCleanup"
  ],
  "dhcpcsvc6.dll": [
    "Dhcpv6AcquireParameters",
    "Dhcpv6RenewPrefix",
    "Dhcpv6FreeLeaseInfo",
    "Dhcpv6GetTraceArray",
    "Dhcpv6IsEnabled",
    "Dhcpv6RequestPrefix",
    "Dhcpv6ReleasePrefixEx",
    "Dhcpv6SetUserClass",
    "Dhcpv6RenewPrefixEx",
    "Dhcpv6ReleaseParameters",
    "Dhcpv6CancelOperation",
    "Dhcpv6RequestPrefixEx",
    "Dhcpv6GetUserClasses",
    "Dhcpv6QueryLeaseInfo",
    "Dhcpv6EnableTracing",
    "Dhcpv6ReleasePrefix",
    "Dhcpv6RequestParams"
  ],
  "dhcpsapi.dll": [
    "DhcpDeleteClass",
    "DhcpGetOptionValue",
    "DhcpServerBackupDatabase",
    "DhcpAddSubnetElement",
    "DhcpGetAllOptionValuesV6",
    "DhcpAddServer",
    "DhcpServerAuditlogParamsFree",
    "DhcpEnumOptions",
    "DhcpDeleteServer",
    "DhcpScanMDatabase",
    "DhcpEnumSubnetElementsV4",
    "DhcpEnumSubnetElements",
    "DhcpCreateOptionV5",
    "DhcpEnumClassesV6",
    "DhcpGetServerSpecificStrings",
    "DhcpRemoveOptionValue",
    "DhcpGetSubnetInfoVQ",
    "DhcpServerSetConfigV6",
    "DhcpSetOptionValueV6",
    "DhcpGetMibInfoVQ",
    "DhcpSetOptionValueV5",
    "DhcpDeleteSuperScopeV4",
    "DhcpCreateSubnetVQ",
    "DhcpEnumSubnetClientsVQ",
    "DhcpEnumSubnetClientsFilterStatusInfo",
    "DhcpGetVersion",
    "DhcpSetClientInfoV6",
    "DhcpSetSubnetInfo",
    "DhcpGetMibInfo",
    "DhcpEnumSubnetElementsV6",
    "DhcpGetClientInfoVQ",
    "DhcpEnumSubnetElementsV5",
    "DhcpGetMibInfoV5",
    "DhcpSetThreadOptions",
    "DhcpAddFilterV4",
    "DhcpEnumMScopeClients",
    "DhcpEnumMScopeElements",
    "DhcpCreateClassV6",
    "DhcpSetFilterV4",
    "DhcpCreateClientInfoV4",
    "DhcpSetOptionValue",
    "DhcpServerSetConfig",
    "DhcpServerSetConfigV4",
    "DhcpGetOptionValueV5",
    "DhcpModifyClass",
    "DhcpGetAllOptionsV6",
    "DhcpGetClientOptions",
    "DhcpSetOptionInfoV6",
    "DhcpSetOptionValuesV5",
    "DhcpDeleteClientInfo",
    "DhcpDeleteClassV6",
    "DhcpGetClientInfoV4",
    "DhcpAddMScopeElement",
    "DhcpSetMScopeInfo",
    "DhcpRemoveSubnetElementV5",
    "DhcpCreateSubnetV6",
    "DhcpGetAllOptionValues",
    "DhcpEnumClasses",
    "DhcpSetSuperScopeV4",
    "DhcpGetMScopeInfo",
    "DhcpCreateOptionV6",
    "DhcpRemoveOptionValueV6",
    "DhcpScanDatabase",
    "DhcpEnumSubnets",
    "DhcpSetClientInfo",
    "DhcpGetFilterV4",
    "DhcpCreateClientInfoVQ",
    "DhcpRemoveOptionV6",
    "DhcpRemoveSubnetElementV4",
    "DhcpCreateOption",
    "DhcpGetMibInfoV6",
    "DhcpDeleteMScope",
    "DhcpServerQueryDnsRegCredentials",
    "DhcpGetServerBindingInfo",
    "DhcpEnumSubnetClients",
    "DhcpGetOptionInfoV5",
    "DhcpServerSetConfigVQ",
    "DhcpAddSubnetElementV4",
    "DhcpServerSetDnsRegCredentialsV5",
    "DhcpServerGetConfigV6",
    "DhcpDeleteClientInfoV6",
    "DhcpGetClassInfo",
    "DhcpGetOptionValueV6",
    "DhcpEnumServers",
    "DhcpEnumSubnetClientsV6",
    "DhcpRemoveSubnetElementV6",
    "DhcpSetOptionInfoV5",
    "DhcpEnumOptionValuesV5",
    "DhcpGetClientInfoV6",
    "DhcpAuditLogSetParams",
    "DhcpSetServerBindingInfo",
    "DhcpGetOptionInfo",
    "DhcpSetClientInfoVQ",
    "DhcpRemoveSubnetElement",
    "DhcpServerRestoreDatabase",
    "DhcpSetClientInfoV4",
    "DhcpRemoveOptionV5",
    "DhcpRemoveOptionValueV5",
    "DhcpSetSubnetInfoV6",
    "DhcpDeleteMClientInfo",
    "DhcpSetOptionValues",
    "DhcpDsClearHostServerEntries",
    "DhcpEnumOptionValuesV6",
    "DhcpDeleteSubnetV6",
    "DhcpGetSubnetDelayOffer",
    "DhcpServerQueryAttribute",
    "DhcpEnumOptionValues",
    "DhcpGetAllOptions",
    "DhcpCreateClientInfo",
    "DhcpAddSubnetElementV6",
    "DhcpGetSubnetInfoV6",
    "DhcpServerRedoAuthorization",
    "DhcpModifyClassV6",
    "DhcpServerGetConfig",
    "DhcpAddSubnetElementV5",
    "DhcpAddSecurityGroup",
    "DhcpServerSetDnsRegCredentials",
    "DhcpSetOptionInfo",
    "DhcpCreateSubnet",
    "DhcpGetOptionInfoV6",
    "DhcpCreateClass",
    "DhcpServerQueryAttributes",
    "DhcpDsInit",
    "DhcpRpcFreeMemory",
    "DhcpGetClientInfo",
    "DhcpEnumSubnetClientsV4",
    "DhcpRemoveMScopeElement",
    "DhcpDeleteFilterV4",
    "DhcpEnumSubnetsV6",
    "DhcpEnumOptionsV5",
    "DhcpEnumOptionsV6",
    "DhcpAuditLogGetParams",
    "DhcpDsCleanup",
    "DhcpGetThreadOptions",
    "DhcpRemoveOption",
    "DhcpServerGetConfigVQ",
    "DhcpEnumMScopes",
    "DhcpSetSubnetDelayOffer",
    "DhcpGetMCastMibInfo",
    "DhcpServerGetConfigV4",
    "DhcpEnumFilterV4",
    "DhcpGetServerBindingInfoV6",
    "DhcpDeleteSubnet",
    "DhcpSetSubnetInfoVQ",
    "DhcpEnumSubnetClientsV5",
    "DhcpGetSubnetInfo",
    "DhcpGetSuperScopeInfoV4",
    "DhcpSetServerBindingInfoV6"
  ],
  "diagperf.dll": [
    "WdiDiagnosticModuleMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "DllGetClassObject",
    "WdiHandleInstance",
    "DllRegisterServer"
  ],
  "difxapi.dll": [
    "DriverPackageInstallW",
    "DIFXAPISetLogCallbackA",
    "DriverPackagePreinstallA",
    "DriverPackagePreinstallW",
    "DriverPackageGetPathA",
    "DriverPackageUninstallW",
    "SetDifxLogCallbackA",
    "SetDifxLogCallbackW",
    "DIFXAPISetLogCallbackW",
    "DriverPackageInstallA",
    "DriverPackageGetPathW",
    "DriverPackageUninstallA"
  ],
  "dimsjob.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dimsroam.dll": [
    "DimsRoamEntry"
  ],
  "dinput.dll": [
    "DllUnregisterServer",
    "DirectInputCreateW",
    "DllCanUnloadNow",
    "DirectInputCreateEx",
    "DirectInputCreateA",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dinput8.dll": [
    "DirectInput8Create",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "diskcopy.dll": [
    "DllCanUnloadNow",
    "DiskCopyRunDllW",
    "DiskCopyRunDll",
    "DllGetClassObject"
  ],
  "dispci.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance",
    "DisplayClassInstaller"
  ],
  "dispex.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "dmband.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dmcompos.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dmdlgs.dll": [
    "public: void __thiscall CTaskData::GetRegionColorStructPtr(struct _REGION_COLORS * *,int &)",
    "DllCanUnloadNow",
    "public: class CWnd * __thiscall CTaskData::GetOcxFrameCWndPtr(void)",
    "public: __int64 __thiscall CDMNodeObj::GetLdmObjectId(void)",
    "public: void __thiscall CDataCache::AddLDMObjMapEntry(struct _LDM_OBJ_MAP_ENTRY *)",
    "public: class CString __thiscall CDataCache::GetServerName(void)",
    "public: unsigned long __thiscall CDMNodeObj::GetNumMembers(void)",
    "DllGetClassObject",
    "public: unsigned long __thiscall CDataCache::GetVolumeCount(void)",
    "DllRegisterServer",
    "public: unsigned long __thiscall CDataCache::GetDiskCount(void)",
    "void __stdcall FreeArrayOfStrings(struct arrayOfStrings *)"
  ],
  "dmdskmgr.dll": [
    "public: int __thiscall CDMNodeObj::OnlyContiguousExtendAllowed(void)",
    "public: int __thiscall CTaskData::IsPostLonghornVdsVersion(void)",
    "public: void __thiscall CContextMenu::DoDelete(long)",
    "public: enum _LAYOUT_TYPES __thiscall CDMNodeObj::GetLayoutType(void)",
    "public: unsigned long __thiscall CDMNodeObj::GetNumRegions(void)",
    "int __stdcall FindDriveLetterHelper(struct driveletterinfo *,int,__int64,unsigned short &)",
    "public: class CDMNodeObj * __thiscall CDataCache::CreateNodeObjAndAddToMap(int,enum _NODEOBJ_TYPES,class CDataCache *,void *,__int64)",
    "int __stdcall CompareDiskNames(long,long)",
    "public: int __thiscall CDMNodeObj::IsOemPartition(void)",
    "public: void __thiscall CDMNodeObj::GetLongName(class CString &,int)",
    "public: void __thiscall CDataCache::PopulateEncapsulateData(struct ENCAPSULATE_DATA *)",
    "public: unsigned long __thiscall CDataCache::GetVolumeCount(void)",
    "public: int __thiscall CDataCache::FindRegionPtrOnDiskFromRegionId(class CDMNodeObj *,__int64,class CDMNodeObj * *,struct __POSITION * &)",
    "public: int __thiscall CDMNodeObj::VolumeContainsActiveRegion(void)",
    "public: void __thiscall CTaskData::GetRegionColorStructPtr(struct _REGION_COLORS * *,int &)",
    "GetPropertyPageData",
    "protected: void __thiscall CDataCache::GetMinMaxPartitionSizes(long,__int64 &,__int64 &)",
    "public: __int64 __thiscall CDMNodeObj::GetUsableContiguousSpaceInMB(void)",
    "public: int __thiscall CDMNodeObj::ContainsSystemInformation(void)",
    "public: class CString __thiscall CTaskData::GetServerName(void)",
    "public: void __thiscall CDMNodeObj::EnumVolumeMembers(long * *,long &)",
    "public: void __thiscall CDataCache::FillDeviceInstanceId(unsigned short *,unsigned short *)",
    "public: int __thiscall CDMNodeObj::IsRevertable(void)",
    "public: int __thiscall CDataCache::HasNTFSwithDriveLetter(void)",
    "public: int __thiscall CTaskData::IsWolfpack(void)",
    "public: void __thiscall CTaskData::GetDiskCookiesToEncap(unsigned long &,long * *)",
    "public: void __thiscall CTaskData::FilterCookiesBigEnoughForFTRepair(unsigned long &,long *,long * *,__int64,class CDMNodeObj *)",
    "int __stdcall namecmp(unsigned short const *,unsigned short const *)",
    "public: void __thiscall CDMNodeObj::GetSizeString(class CString &)",
    "public: int __thiscall CDMNodeObj::IsDiskEmpty(void)",
    "public: int __thiscall CDMNodeObj::ContainsActivePartition(void)",
    "public: int __thiscall CDMNodeObj::GetVolumeStatus(class CString &)",
    "public: int __thiscall CDMNodeObj::GetRegionInfo(struct regioninfoex &)",
    "protected: void __thiscall CDataCache::GetDiskCookies(unsigned long &,long * *)",
    "public: class CDMNodeObj * __thiscall CDMNodeObj::GetParentDiskPtr(void)",
    "public: int __thiscall CDMNodeObj::GetPort(void)",
    "public: int __thiscall CDMNodeObj::IsFirstFreeRegion(void)",
    "public: void __thiscall CDMNodeObj::SetFSId(__int64)",
    "public: unsigned long __thiscall CDMNodeObj::GetExtendedRegionColor(void)",
    "public: void __thiscall CDataCache::AddFileSystemInfoToCache(unsigned long,struct filesysteminfo *)",
    "public: int __thiscall CDMNodeObj::IsCurrBootVolume(void)",
    "public: int __thiscall CDMNodeObj::IsEECoveredGPTDisk(void)",
    "public: void __thiscall CDMComponentData::ChangeRow(class CDMScopeNode *,long)",
    "public: void __thiscall CDMNodeObj::GetSizeMB(__int64 &)",
    "public: void __thiscall CTaskData::GetDiskCookiesForSig(unsigned long &,long * *)",
    "public: int __thiscall CTaskData::FindRegionPtrFromRegionId(__int64,class CDMNodeObj * *)",
    "public: int __thiscall CDMNodeObj::ContainsBootIniPartition(void)",
    "public: void __thiscall CDMNodeObj::GetFileSystemName(class CString &)",
    "void __stdcall CookieSort(long *,unsigned int,unsigned int,unsigned int,int (__stdcall*)(long,long))",
    "public: int __thiscall CDMNodeObj::ContainsSystemPartition(void)",
    "public: int __thiscall CDataCache::GetBootPort(void)",
    "public: void __thiscall CDMNodeObj::EnumDiskRegions(long * *,long &)",
    "public: int __thiscall CTaskData::GetAssignedDriveLetter(long,unsigned short &)",
    "public: __int64 __thiscall CDMNodeObj::GetStartOffset(void)",
    "public: int __thiscall CDMNodeObj::ContainsLogicalDrvBootPartition(void)",
    "public: void __thiscall CDMNodeObj::GetName(class CString &)",
    "public: void __thiscall CDMNodeObj::GetStorageType(class CString &,int)",
    "public: unsigned long __thiscall CDMNodeObj::GetMaxPartitionCount(void)",
    "public: unsigned long __thiscall CDMNodeObj::GetColorRef(void)",
    "public: void __thiscall CDMNodeObj::GetShortName(class CString &)",
    "public: long __thiscall CDMNodeObj::IsExtendedPartitionCreated(void)",
    "public: void __thiscall CTaskData::GetDiskCookiesForAddMirror(long,unsigned long &,long * *)",
    "public: int __thiscall CDMNodeObj::ContainsRealSystemPartition(void)",
    "public: void __thiscall CDataCache::DeleteEncapsulateData(struct ENCAPSULATE_DATA *)",
    "public: void __thiscall CDMSnapin::UpDateConsoleView(long)",
    "LoadPropertyPageData",
    "public: int __thiscall CDataCache::HasVMDisk(void)",
    "public: void __thiscall CTaskData::GetOtherDisksFromVolCookie(long,unsigned long &,long * *)",
    "__int64 __stdcall ConvertBytesToMB(__int64)",
    "public: void __thiscall CDMComponentData::ReloadData(class CDMScopeNode *)",
    "public: class CDMNodeObj * __thiscall CDMNodeObj::GetParentVolumePtr(void)",
    "public: void __thiscall CTaskData::SetUIState(unsigned long)",
    "public: int __thiscall CDMNodeObj::IsFreeSpaceFollowed(__int64)",
    "public: int __thiscall CDMNodeObj::HasExtendedPartition(void)",
    "public: int __thiscall CDataCache::IsNEC_98Server(void)",
    "public: void __thiscall CTaskData::GetDiskCookiesForUpgrade(unsigned long &,long * *)",
    "public: void __thiscall CDMComponentData::RefreshDiskView(class CDMScopeNode *)",
    "public: void __thiscall CDMNodeObj::EnumFirstVolumeMember(long &,long &)",
    "public: int __thiscall CDMNodeObj::ContainsPageFile(void)",
    "public: unsigned long __thiscall CDMNodeObj::GetDeviceState(void)",
    "public: int __thiscall CDMNodeObj::GetDiskInfo(struct diskinfoex &)",
    "public: long __thiscall CContextMenu::ShowContextMenu(class CWnd *,long,long,long)",
    "public: void __thiscall CTaskData::GetMinMaxPartitionSizes(long,__int64 &,__int64 &)",
    "public: int __thiscall CDataCache::IsAlpha(void)",
    "public: void __thiscall CDataCache::SetVolumeList(struct volumeinfo *,unsigned long,class CTaskData *)",
    "public: int __thiscall CDataCache::FindDiskPtrFromDiskId(__int64,class CDMNodeObj * *)",
    "public: void __thiscall CDMComponentData::SetOcxViewTypeForce(class CDMScopeNode *)",
    "public: int __thiscall CDMNodeObj::IsHiddenRegion(void)",
    "public: long __thiscall CDMNodeObj::GetFlags(void)",
    "public: int __thiscall CDMNodeObj::ContainsESPPartition(void)",
    "__int64 __stdcall ConvertMBToBytes(__int64)",
    "public: int __thiscall CDataCache::FindCookieAndRemoveFromList(long,class CList *)",
    "public: int __thiscall CDataCache::IsPreLonghornVdsVersion(void)",
    "public: void __thiscall CDataCache::AddRegionToVolumeMemberList(class CDMNodeObj *)",
    "public: int __thiscall CDMNodeObj::ContainsBootIniPartitionForWolfpack(void)",
    "public: int __thiscall CDataCache::FindDriveLetter(__int64,unsigned short &)",
    "public: void __thiscall CDataCache::DeleteDiskGroupData(struct DISK_GROUP_DATA *)",
    "public: int __thiscall CDataCache::SupportMirror(void)",
    "public: int __thiscall CDataCache::FindRegionPtrFromRegionId(__int64,class CDMNodeObj * *)",
    "public: void __thiscall CDataCache::PopulateDiskGroupData(struct DISK_GROUP_DATA *)",
    "public: int __thiscall CDMNodeObj::IsMbrEEPartition(void)",
    "public: void __thiscall CDMSnapin::SetDescriptionBarText(long)",
    "void __stdcall GetPartitionStyleStringHelper(enum _PARTITIONSTYLE,class CString &,int,unsigned long,unsigned long,int)",
    "public: int __thiscall CDataCache::IsDynamic1394(void)",
    "public: unsigned long __thiscall CTaskData::GetUIState(void)",
    "public: class CDMNodeObj * __thiscall CTaskData::GetDMDataObjPtrFromId(__int64)",
    "public: void __thiscall CDMComponentData::AddRow(class CDMScopeNode *,long)",
    "public: void __thiscall CDataCache::AdjustRegionCountInLegendList(enum _REGIONTYPE,int,class CTaskData *)",
    "public: void __thiscall CDMNodeObj::GetPartitionStyleString(class CString &,int)",
    "public: struct HWND__ * __thiscall CDMComponentData::GetMMCWindow(void)",
    "DllCanUnloadNow",
    "public: void __thiscall CDataCache::GetFileSystemTypes(unsigned long &,struct ifilesysteminfo * *)",
    "public: int __thiscall CTaskData::IsNTServer(void)",
    "public: int __thiscall CDMNodeObj::IsCurrSystemVolume(void)",
    "public: int __thiscall CDataCache::IsPostLonghornVdsVersion(void)",
    "public: int __thiscall CDMNodeObj::ContainsSubDiskNeedResync(void)",
    "public: class CString __thiscall CDataCache::GetServerName(void)",
    "public: int __thiscall CDMNodeObj::CanHaveGPT(void)",
    "DllGetClassObject",
    "public: int __thiscall CDMNodeObj::IsESPPartition(void)",
    "public: int __thiscall CTaskData::IsAlpha(void)",
    "public: unsigned long __thiscall CDataCache::GetDiskCount(void)",
    "int __stdcall IsMbrEEPartition(struct regioninfoex &)",
    "public: int __thiscall CDataCache::IsEfi(void)",
    "public: int __thiscall CDMSnapin::GetResultPane(long,class CDMResultPane * *)",
    "public: int __thiscall CTaskData::IsSecureSystemPartition(void)",
    "public: void __thiscall CDMComponentData::LoadData(class CDMScopeNode *,long)",
    "void __stdcall ParseDeviceName(int *,int *,int *,unsigned short *)",
    "IsRequestPending",
    "public: void __thiscall CContextMenu::DoRevertToNT4(long,int)",
    "public: void __thiscall CDataCache::CreateShortDiskName(struct diskinfoex &)",
    "public: unsigned long __thiscall CDMNodeObj::GetLogicalDriveCount(void)",
    "public: unsigned int __thiscall CDMNodeObj::GetIconId(int)",
    "public: void __thiscall CTaskData::GetDiskCookies(unsigned long &,long * *,int,unsigned long,int)",
    "public: void __thiscall CTaskData::GetDiskCookiesWithFreeSpace(unsigned long &,long * *)",
    "public: int __thiscall CTaskData::IsNEC_98Server(void)",
    "public: void __thiscall CDataCache::DeleteRegionFromVolumeMemberList(class CDMNodeObj *)",
    "public: __int64 __thiscall CDMNodeObj::GetUnallocSpace(int)",
    "public: void __thiscall CDMComponentData::EmptyOcxViewData(class CDMScopeNode *)",
    "public: int __thiscall CDMNodeObj::ContainsBootVolumesNumberChange(__int64,int *)",
    "public: void __thiscall CDataCache::AdjustVolumeCountInLegendList(enum _VOLUMELAYOUT,int,class CTaskData *)",
    "int __stdcall IsHiddenRegion(struct regioninfoex &)",
    "class CString __stdcall GetStringFromRc(unsigned long)",
    "public: __int64 __thiscall CDataCache::GetLastKnownState(__int64)",
    "public: void __thiscall CDataCache::SetDriveLetterInUse(unsigned short,int)",
    "public: int __thiscall CTaskData::SupportGpt(void)",
    "public: void __thiscall CTaskData::GetDiskCookiesForCreateVolume(unsigned long &,long * *)",
    "public: __thiscall CDataCache::CDataCache(void)",
    "public: void __thiscall CDataCache::DeleteLists(void)",
    "public: int __thiscall CDMNodeObj::IsDiskReadOnly(void)",
    "public: int __thiscall CDMNodeObj::IsNEC_98Disk(void)",
    "public: int __thiscall CDataCache::SupportGpt(void)",
    "public: unsigned long __thiscall CDMNodeObj::GetPrimaryPartitionCount(void)",
    "public: int __thiscall CDMNodeObj::IsActive(void)",
    "public: int __thiscall CDMNodeObj::IsDiskOffline(void)",
    "public: void __thiscall CDMNodeObj::GetFileSystemSize(long &)",
    "public: void __thiscall CTaskData::FindDriveLetter(__int64,unsigned short &)",
    "public: void __thiscall CDMNodeObj::GetDriveLetter(unsigned short &)",
    "public: void __thiscall CTaskData::FilterCookiesBigEnoughForRAID5Repair(unsigned long &,long *,long * *,__int64,class CDMNodeObj *)",
    "public: void __thiscall CDMNodeObj::MarkDiskForLastVolume(class CDMNodeObj *)",
    "public: int __thiscall CTaskData::IsPreLonghornVdsVersion(void)",
    "public: void __thiscall CContextMenu::PopUpInit(class CDMNodeObj *,int &,int &,int)",
    "public: int __thiscall CTaskData::IsLocalMachine(void)",
    "public: void __thiscall CDMNodeObj::GetDiskTypeName(class CString &)",
    "public: void __thiscall CTaskData::EnumNTFSwithDriveLetter(int *,unsigned short * *)",
    "public: void __thiscall CDMComponentData::UIStateChange(class CDMScopeNode *,unsigned long)",
    "public: int __thiscall CTaskData::HasNTFSwithDriveLetter(void)",
    "public: int __thiscall CDMNodeObj::IsUpgradeable(void)",
    "public: int __thiscall CDMNodeObj::IsFTVolume(void)",
    "public: class CDMComponentData * __thiscall CDataCache::GetComponentData(void)",
    "public: int __thiscall CDMScopeNodeCollection::GetScopeNode(long,class CDMScopeNode * *)",
    "public: int __thiscall CDMNodeObj::GetOfflineReasonText(class CString &)",
    "public: unsigned long __thiscall CDMNodeObj::GetDeviceType(void)",
    "public: int __thiscall CDMNodeObj::EnhancedIsUpgradeable(class CTaskData *)",
    "public: long __thiscall CDMNodeObj::IsVolumeArrived(__int64,enum _LAYOUT_TYPES)",
    "public: int __thiscall CTaskData::IsEfi(void)",
    "public: int __thiscall CDMNodeObj::GetDiskSpec(struct diskspec &)",
    "public: void __thiscall CTaskData::GetDriveLetters(short &,unsigned short * *,unsigned short)",
    "public: int __thiscall CDMNodeObj::IsVolumeSimple(void)",
    "public: long __thiscall CContextMenu::Command(long,struct IDataObject *,long)",
    "protected: void __thiscall CDataCache::GetDriveLetters(short &,unsigned short * *,unsigned short)",
    "int __stdcall GetDiskStatusHelper(struct diskinfoex *,class CString &,int)",
    "public: void __thiscall CDMComponentData::DeleteRow(class CDMScopeNode *,long)",
    "public: int __thiscall CDataCache::IsWolfpack(void)",
    "public: void __thiscall CDMNodeObj::GetFileSystemLabel(class CString &)",
    "public: void __thiscall CTaskData::EnumDisks(unsigned long &,long * *)",
    "public: short __thiscall CTaskData::GetIVolumeClientVersion(void)",
    "public: int __thiscall CDMNodeObj::IsMember(class CDMNodeObj *)",
    "public: class CWnd * __thiscall CTaskData::GetOcxFrameCWndPtr(void)",
    "__int64 __stdcall RoundUpToMB(__int64)",
    "public: void __thiscall CDMNodeObj::MarkDisksForLastVolume(void)",
    "public: void __thiscall CDataCache::AddLDMObjMapEntry(struct _LDM_OBJ_MAP_ENTRY *)",
    "public: int __thiscall CDMNodeObj::IsInFlux(void)",
    "public: long __thiscall CDMNodeObj::GetVolumeFileSystemTypes(unsigned long &,struct ilhfilesysteminfo * *)",
    "public: enum _PARTITIONSTYLE __thiscall CDMNodeObj::GetPartitionStyle(void)",
    "public: enum _STORAGE_TYPES __thiscall CDMNodeObj::GetStorageType(void)",
    "DllRegisterServer",
    "public: unsigned long __thiscall CDMNodeObj::GetDeviceAttributes(void)",
    "public: void __thiscall CDMNodeObj::GetObjectId(__int64 &)",
    "public: class CDMNodeObj * __thiscall CDataCache::CreateRegionNodeObj(class CDMNodeObj *,struct regioninfoex *)",
    "public: int __thiscall CDMComponentData::GetScopeNodeForResultPane(long,class CDMScopeNode * *)",
    "public: unsigned short * __thiscall CDataCache::FindDeviceInstanceId(__int64)",
    "public: int __thiscall CDMNodeObj::GetPatternRef(void)",
    "public: void __thiscall CTaskData::GetDiskInfoFromVolCookie(long,int &,unsigned long &,long * *,unsigned long,int)",
    "public: __int64 __thiscall CDMNodeObj::GetShrinkableSizeInMB(void)",
    "public: int __thiscall CDataCache::IsPersonalOrLapTopServer(void)",
    "public: int __thiscall CTaskData::GetBootPort(void)",
    "public: int __thiscall CDataCache::FindFileSystem(__int64,struct filesysteminfo &)",
    "public: void __thiscall CDMNodeObj::RecalculateSpace(void)",
    "public: int __thiscall CTaskData::FindFileSystem(__int64,struct filesysteminfo &)",
    "public: void __thiscall CDMNodeObj::GetMaxAdjustedFreeSize(__int64 &)",
    "public: void __thiscall CDataCache::AddFileSystemInfoToListAndMap(unsigned long,struct filesysteminfo *)",
    "public: void __thiscall CDMNodeObj::GetSize(__int64 &,int)",
    "public: class CDMNodeObj * __thiscall CDMNodeObj::GetRegionByOffset(__int64)",
    "public: void __thiscall CTaskData::GetFileSystemTypes(unsigned long &,struct ifilesysteminfo * *)",
    "public: __int64 __thiscall CDMNodeObj::GetVolumeTotalSizeMB(void)",
    "public: int __thiscall CDMNodeObj::ContainsFVEPartition(void)",
    "protected: void __thiscall CDataCache::GetVolumeCookies(unsigned long &,long * *)",
    "public: int __thiscall CDMNodeObj::GetStatus(void)",
    "public: int __thiscall CDMNodeObj::GetFileSystemType(void)",
    "public: int __thiscall CDMNodeObj::GetImageNum(void)",
    "public: __thiscall CDMNodeObj::~CDMNodeObj(void)",
    "public: virtual __thiscall CDataCache::~CDataCache(void)",
    "public: void __thiscall CContextMenu::RefreshFileSys(long)",
    "public: int __thiscall CDMNodeObj::GetResultStringArray(class CStringArray &)",
    "public: int __thiscall CDMNodeObj::GetVolumeInfo(struct volumeinfo &)",
    "public: unsigned long __thiscall CDMNodeObj::GetNumMembers(void)",
    "public: short __thiscall CDMNodeObj::GetIVolumeClientVersion(void)",
    "public: int __thiscall CDMNodeObj::IsUnknownPartition(void)",
    "public: void __thiscall CTaskData::EnumVolumes(unsigned long &,long * *)",
    "public: void __thiscall CDataCache::CreateVolumeList(void)",
    "public: void __thiscall CDataCache::SetDiskList(struct diskinfoex *,unsigned long)",
    "public: void __thiscall CTaskData::GetDiskCookiesForExtendVolume(long,unsigned long &,long * *)",
    "public: void __thiscall CDataCache::CreateDiskList(void)",
    "public: int __thiscall CDataCache::SupportRaid5(void)",
    "void __stdcall GetDiskTypeNameHelper(struct diskinfoex *,class CString &,unsigned short)",
    "public: __int64 __thiscall CDMNodeObj::GetLdmObjectId(void)",
    "public: int __thiscall CDMNodeObj::IsFakeVolume(void)",
    "public: void __thiscall CDataCache::EnumNTFSwithDriveLetter(int *,unsigned short * *)",
    "public: int __thiscall CDMNodeObj::GetExtraRegionStatus(class CString &,int)",
    "public: void __thiscall CDMComponentData::SetOcxViewType(class CDMScopeNode *)",
    "public: long __thiscall CDMNodeObj::IsConvertSuccess(int)",
    "public: int __thiscall CDMNodeObj::GetDiskStatus(class CString &)"
  ],
  "dmdskres.dll": "No exports",
  "dmdskres2.dll": "No exports",
  "dmime.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dmintf.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo"
  ],
  "dmloader.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dmocx.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dmrc.dll": [
    "DMrcGetProperties",
    "DMrcQueryHardwareId",
    "DMrcExit",
    "DMrcQueryModelId",
    "DMrcInit",
    "DMrcQueryClose"
  ],
  "dmscript.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dmstyle.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dmsynth.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dmusic.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dmutil.dll": [
    "LowNtWriteFile",
    "IsPersonalSKU",
    "RgszwFromArgs",
    "LowNtReadFile",
    "AddEntryBootFileGpt",
    "ShowMessage",
    "DynamicSupport",
    "AddEntryBootFileMbr",
    "DisplayErrorRgszw",
    "DmCommonNtOpenFile",
    "FreeRgszw",
    "LowGetPartitionInfo",
    "SzwFromSza",
    "LowAcquirePrivilege",
    "RgszwFromValist",
    "SzwDupSzw",
    "DllMain",
    "SafeLoadVdsService",
    "FTraceValist",
    "GetErrorData",
    "FTrace",
    "DisplayError",
    "GetSystemVolume",
    "LowNtAddBootEntry",
    "LowNtReadOnlyAttributeOff",
    "CoDisableDynamicVolumes",
    "RgszwDupRgszw",
    "GetInstallDirectoryPath",
    "ShowMessageValist",
    "TranslateError"
  ],
  "dmvdsitf.dll": [
    "public: void __thiscall CTaskData::GetRegionColorStructPtr(struct _REGION_COLORS * *,int &)",
    "CreateDataCacheZ",
    "public: class CWnd * __thiscall CTaskData::GetOcxFrameCWndPtr(void)",
    "LoadPropertyPageData",
    "public: __int64 __thiscall CDMNodeObj::GetLdmObjectId(void)",
    "CreateServerRequestsZ",
    "public: void __thiscall CDataCache::AddLDMObjMapEntry(struct _LDM_OBJ_MAP_ENTRY *)",
    "public: class CString __thiscall CDataCache::GetServerName(void)",
    "public: unsigned long __thiscall CDMNodeObj::GetNumMembers(void)",
    "public: unsigned long __thiscall CDataCache::GetVolumeCount(void)",
    "public: unsigned long __thiscall CDataCache::GetDiskCount(void)"
  ],
  "dnsapi.dll": [
    "Dns_FreeMsgBuf",
    "DnsApiAllocZero",
    "HostsFile_Open",
    "NetInfo_GetAdapterByAddress",
    "DnsUpdateTest_UTF8",
    "DnsQuery_W",
    "Dns_SkipPacketName",
    "DnsStatusString",
    "Dns_WriteDottedNameToPacket",
    "DnsFreePolicyConfig",
    "Dns_SendEx",
    "DnsUpdateTest_A",
    "Query_Main",
    "Send_MessagePrivate",
    "DnsValidateServerArray_W",
    "Dns_AddRecordsToMessage",
    "DnsLogIt",
    "DnsNotifyResolverEx",
    "DnsFlushResolverCache",
    "Reg_FreeUpdateInfo",
    "DnsLogIn",
    "DnsFindAuthoritativeZone",
    "IpHelp_IsAddrOnLink",
    "BreakRecordsIntoBlob",
    "Dns_InitializeMsgBuf",
    "DnsFree",
    "NetInfo_GetAdapterByName",
    "DnsScreenLocalAddrsForRegistration",
    "DnsValidateServerArray_A",
    "DnsFreeProxyName",
    "Dns_ParseMessage",
    "DnsGetBufferLengthForStringCopy",
    "DnsUnicodeToUtf8",
    "DnsValidateName_W",
    "DnsValidateUtf8Byte",
    "Dns_ReadPacketNameAllocate",
    "DnsNameCompare_UTF8",
    "DnsNetworkInfo_CreateFromFAZ",
    "DnsRecordSetDetach",
    "DnsGetDnsServerList",
    "DnsRecordSetCopyEx",
    "Reg_GetValueEx",
    "GetCurrentTimeInSeconds",
    "DnsIpv6StringToAddress",
    "Dns_OpenTcpConnectionAndSend",
    "DnsApiFree",
    "DnsNameCompareEx_UTF8",
    "DnsRecordStringForWritableType",
    "DnsGetPolicyTableInfo",
    "DnsIsStringCountValidForTextType",
    "DnsRemoveRegistrations",
    "DnsQueryExW",
    "Send_OpenTcpConnectionAndSend",
    "Socket_ClearMessageSockets",
    "DnsNameCopy",
    "Socket_InitWinsock",
    "NetInfo_Build",
    "Send_AndRecvUdpWithParam",
    "Socket_CacheCleanup",
    "DnsDhcpSrvRegisterTerm",
    "DnsDhcpSrvRegisterHostNameEx",
    "Dns_CreateMulticastSocket",
    "DnsNameCompare_W",
    "DnsApiAlloc",
    "Dns_UpdateLibEx",
    "Security_ContextListTimeout",
    "DnsRecordStringForType",
    "DnsGetDomainName",
    "DnsCreateStandardDnsNameCopy",
    "DnsDhcpSrvRegisterInitialize",
    "Dns_SetRecordsSection",
    "DnsDowncaseDnsNameLabel",
    "DnsFreeConfigStructure",
    "NetInfo_ResetServerPriorities",
    "HostsFile_ReadLine",
    "Dns_CreateSocket",
    "DnsDhcpRegisterAddrs",
    "DnsSetConfigDword",
    "DnsNotifyResolver",
    "Reg_ReadUpdateInfo",
    "DnsNameCompare_A",
    "DnsTraceServerConfig",
    "DnsValidateServer_W",
    "Dns_PingAdapterServers",
    "Dns_WriteQuestionToMessage",
    "Dns_WriteRecordStructureToPacketEx",
    "Trace_Reset",
    "Socket_JoinMulticast",
    "Dns_CreateSocketEx",
    "CombineRecordsInBlob",
    "Socket_CreateMulticast",
    "DnsAllocateRecord",
    "DnsModifyRecordsInSet_UTF8",
    "DnsQueryConfigAllocEx",
    "DnsRecordSetCompare",
    "Dns_ReadRecordStructureFromPacket",
    "DnsDhcpRemoveRegistrations",
    "Dns_ReadPacketName",
    "DnsValidateName_UTF8",
    "DnsRegisterClusterAddress",
    "DnsDhcpSrvRegisterHostName",
    "DnsAcquireContextHandle_W",
    "DnsReplaceRecordSetA",
    "DnsGetLastFailedUpdateInfo",
    "DnsLogOut",
    "NetInfo_IsForUpdate",
    "Socket_Create",
    "DnsGetProxyInformation",
    "DnsUpdateMachinePresence",
    "Dns_RecvTcp",
    "DnsDhcpRegisterTerm",
    "DnsGlobals",
    "DnsMapRcodeToStatus",
    "DnsModifyRecordsInSet_W",
    "DnsRecordListFree",
    "Dns_CloseConnection",
    "Faz_AreServerListsInSameNameSpace",
    "DnsStringCopyAllocateEx",
    "DnsIpv6AddressToString",
    "Dns_SkipToRecord",
    "NetInfo_Free",
    "Dns_SetRecordDatalength",
    "DnsApiHeapReset",
    "DnsGetCacheDataTable",
    "DnsGetPrimaryDomainName_A",
    "Socket_SetTtl",
    "Update_ReplaceAddressRecordsW",
    "Socket_RecvFrom",
    "Socket_CacheInit",
    "Dns_FindAuthoritativeZoneLib",
    "DnsDhcpSrvRegisterInit",
    "NetInfo_Copy",
    "DnsUtf8ToUnicode",
    "Dns_ParsePacketRecord",
    "Socket_CleanupWinsock",
    "DnsRecordCompare",
    "DnsRecordBuild_W",
    "DnsNameCompareEx_A",
    "Socket_CloseMessageSockets",
    "Dns_SetRecordsTtl",
    "DnsLogInit",
    "DnsQueryExA",
    "DnsValidateNameOrIp_TempW",
    "DnsValidateServer_A",
    "DnsApiRealloc",
    "DnsResolverOp",
    "Socket_SetMulticastInterface",
    "DnsExtractRecordsFromMessage_UTF8",
    "Dns_AllocateMsgBuf",
    "DnsQueryConfigDword",
    "DnsNetworkInformation_CreateFromFAZ",
    "QueryDirectEx",
    "DnsReplaceRecordSetUTF8",
    "ExtraInfo_Init",
    "DnsUpdateTest_W",
    "DnsFlushResolverCacheEntry_UTF8",
    "Dns_CleanupWinsock",
    "NetInfo_UpdateServerReachability",
    "DnsFlushResolverCacheEntry_A",
    "DnsNameCompareEx_W",
    "NetInfo_IsAddrConfig",
    "DnsAsyncRegisterTerm",
    "Socket_CloseEx",
    "DnsApiSetDebugGlobals",
    "DnsValidateName_A",
    "Dns_SendAndRecvUdp",
    "DnsWriteReverseNameStringForIpAddress",
    "DnsRecordBuild_UTF8",
    "Dns_GetRandomXid",
    "DnsAsyncRegisterHostAddrs",
    "Dns_BuildPacket",
    "DnsLogEvent",
    "DnsDhcpRegisterHostAddrs",
    "DnsAsyncRegisterInit",
    "DnsIsStatusRcode",
    "DnsUpdate",
    "DnsQuery_A",
    "Socket_SetMulticastLoopBack",
    "FlushDnsPolicyUnreachableStatus",
    "NetInfo_Clean",
    "NetInfo_GetAdapterByInterfaceIndex",
    "DnsCreateStringCopy",
    "DnsIsAMailboxType",
    "DnsLogTime",
    "DnsQuery_UTF8",
    "Dns_UpdateLib",
    "DnsModifyRecordsInSet_A",
    "DnsDhcpSrvRegisterHostAddrEx",
    "DnsCreateReverseNameStringForIpAddress",
    "DnsGetProxyInfoPrivate",
    "DnsNameCopyAllocate",
    "DnsRecordCopyEx",
    "DnsWriteQuestionToBuffer_UTF8",
    "Dns_InitializeMsgRemoteSockaddr",
    "Socket_TcpListen",
    "Dns_ExtractRecordsFromMessage",
    "Local_GetRecordsForLocalNameEx",
    "DnsAcquireContextHandle_A",
    "Reg_ReadGlobalsEx",
    "Util_IsIp6Running",
    "DnsWriteQuestionToBuffer_W",
    "Dns_CloseSocket",
    "HostsFile_Close",
    "DnsExtractRecordsFromMessage_W",
    "DnsReleaseContextHandle",
    "Dns_InitializeWinsock",
    "DnsDhcpSrvRegisterHostAddr",
    "Local_GetRecordsForLocalName",
    "DnsRecordTypeForName",
    "DnsReplaceRecordSetW",
    "DnsCopyStringEx",
    "DnsQueryExUTF8",
    "DnsDhcpRegisterInit",
    "DnsGetPolicyTableInfoPrivate",
    "DnsNotifyResolverClusterIp",
    "Dns_ResetNetworkInfo",
    "DnsFlushResolverCacheEntry_W",
    "DnsQueryConfig"
  ],
  "dnscmmc.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dnsext.dll": "No exports",
  "dnshc.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dnsrslvr.dll": [
    "LoadGPExtension",
    "SvchostPushServiceGlobals",
    "Reg_DoRegisterAdapter",
    "ServiceMain"
  ],
  "docprop.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "dot3api.dll": [
    "Dot3InitPlapParams",
    "Dot3CancelPlap",
    "Dot3UIResponse",
    "Dot3DoPlap",
    "Dot3GetInterfaceState",
    "Dot3ReasonCodeToString",
    "Dot3GetProfile",
    "Dot3QueryUIRequest",
    "QueryNetconStatus",
    "Dot3FreeMemory",
    "Dot3RegisterNotification",
    "Dot3EnumInterfaces",
    "Dot3ReConnect",
    "Dot3SetProfileEapUserData",
    "Dot3DeinitPlapParams",
    "Dot3GetCurrentProfile",
    "Dot3QueryPlapCredentials",
    "Dot3GetProfileEapUserDataInfo",
    "Dot3QueryAutoConfigParameter",
    "Dot3SetAutoConfigParameter",
    "Dot3DeleteProfile",
    "Dot3CloseHandle",
    "Dot3SetInterface",
    "Dot3OpenHandle",
    "Dot3SetProfile"
  ],
  "dot3cfg.dll": [
    "GetResourceString",
    "InitHelperDll"
  ],
  "dot3dlg.dll": [
    "Dot3ACOnBalloonClick",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "Dot3ACCanShowBalloon",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dot3gpclnt.dll": [
    "LANGPAInit",
    "LANGPADeInit",
    "DeserializeLANPolicy",
    "GenerateLANPolicy",
    "ProcessLANPolicyEx"
  ],
  "dot3gpui.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dot3hc.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dot3msm.dll": [
    "Dot3MsmDeInitAdapter",
    "Dot3MsmInitAdapter",
    "Dot3MsmDeInit",
    "Dot3MsmSetRuntimeState",
    "Dot3SetPortAuthenticationState",
    "Dot3MsmConnect",
    "Dot3MsmFreeMemory",
    "Dot3MsmIndicateSessionChange",
    "Dot3MsmUIResponse",
    "Dot3MsmFreeProfile",
    "Dot3MsmInit",
    "DllMain",
    "Dot3MsmQueryPendingUIRequest",
    "Dot3MsmQueryMediaState",
    "Dot3MsmReAuthenticate",
    "Dot3ReasonCodeMsmToString",
    "Dot3MsmQueryState",
    "Dot3MsmDisconnect",
    "Dot3MsmValidateProfile",
    "Dot3MsmCreateDefaultProfile"
  ],
  "dot3svc.dll": [
    "LanNotifyOnLogon",
    "SvchostPushServiceGlobals",
    "Dot3SvcMain",
    "LanNotifyOnLogoff"
  ],
  "dot3ui.dll": [
    "Dot3CreatePsPage"
  ],
  "dpapiprovider.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dplayx.dll": [
    "DirectPlayEnumerateW",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "gdwDPlaySPRefCount",
    "DirectPlayCreate",
    "DirectPlayEnumerateA",
    "DllGetClassObject",
    "DirectPlayLobbyCreateA",
    "DllRegisterServer",
    "DirectPlayEnumerate",
    "DirectPlayLobbyCreateW"
  ],
  "dpmodemx.dll": [
    "SPInit"
  ],
  "dpnaddr.dll": [
    "DirectPlay8AddressCreate"
  ],
  "dpnathlp.dll": [
    "DirectPlayNATHelpCreate",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dpnet.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DirectPlay8Create",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dpnhpast.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dpnhupnp.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dpnlobby.dll": [
    "DirectPlay8LobbyCreate"
  ],
  "dps.dll": [
    "ServiceMain"
  ],
  "dpwsockx.dll": [
    "DPWS_GetEnumPort",
    "SPInit",
    "DPWS_BuildIPMessageHeader"
  ],
  "dpx.dll": [
    "DpxFreeMemory",
    "DpxRestoreJob",
    "DpxNewJob"
  ],
  "drmmgrtn.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "drmv2clt.dll": [
    "MakeEscapedURL",
    "DllUnregisterServer",
    "CreateDRMRightsManager",
    "LaunchURL",
    "Sysprep",
    "DllRegisterServer"
  ],
  "drprov.dll": [
    "NPGetConnection",
    "NPCancelConnection",
    "NPGetResourceParent",
    "NPAddConnection3",
    "NPCloseEnum",
    "NPGetUniversalName",
    "NPEnumResource",
    "NPAddConnection",
    "NPGetCaps",
    "NPGetResourceInformation",
    "NPOpenEnum"
  ],
  "drt.dll": [
    "DrtRegisterKey",
    "DrtGetInstanceName",
    "DrtOpen",
    "DrtStartPartitionDetection",
    "DrtUpdateKey",
    "DrtGetSearchPath",
    "DrtStartSearch",
    "DrtUnregisterKey",
    "DrtEndSearch",
    "DrtGetSearchResultSize",
    "DrtClose",
    "DrtFlushCache",
    "DrtGetSearchPathSize",
    "DrtGetSearchResult",
    "DrtPingPeer",
    "DrtGetCacheStatsEx",
    "DrtGetInstanceNameSize",
    "DrtGetEventData",
    "DrtGetEventDataSize",
    "DrtContinueSearch"
  ],
  "drtprov.dll": [
    "DrtDeletePnrpBootstrapResolver",
    "DrtCreateNullSecurityProvider",
    "DrtDeleteDnsBootstrapResolver",
    "DrtCreatePnrpBootstrapResolver",
    "DrtCreateDnsBootstrapResolver",
    "DrtCreateDerivedKeySecurityProvider",
    "DrtDeleteNullSecurityProvider",
    "DrtCreateDerivedKey",
    "DrtDeleteDerivedKeySecurityProvider"
  ],
  "drttransport.dll": [
    "DrtCreateIpv6UdpTransport",
    "DrtDeleteIpv6UdpTransport"
  ],
  "drvstore.dll": [
    "DriverStoreOfflineDeleteDriverPackageA",
    "DriverStoreEnumW",
    "DriverStoreOfflineEnumDriverPackageW",
    "DriverStoreUnreflectCriticalW",
    "DriverStoreOfflineAddDriverPackageW",
    "DriverStoreOpenW",
    "DriverPackageOpenW",
    "DriverStoreUnreflectW",
    "DriverStoreOfflineFindDriverPackageA",
    "DriverPackageEnumFilesW",
    "DriverStoreOfflineAddDriverPackageA",
    "DriverStoreOfflineEnumPublishedInfW",
    "DriverStoreReflectCriticalW",
    "DriverStoreDeleteW",
    "DriverPackageEnumDriversW",
    "DriverStoreImportW",
    "DriverStoreOfflineDeleteDriverPackageW",
    "DriverStoreUnpublishW",
    "DriverStoreOfflineEnumDriverPackageA",
    "DriverStoreClose",
    "DriverStoreOfflineFindDriverPackageW",
    "pServerImportDriverPackage",
    "DriverStoreFindW",
    "DriverPackageGetVersionInfoW",
    "DriverStorePublishW",
    "DriverStoreReflectW",
    "DriverStoreSetLogContext",
    "pServerDeleteDriverPackage",
    "DriverPackageEnumRegKeysW",
    "DriverStoreOfflineEnumPublishedInfA",
    "DriverPackageClose",
    "DriverPackageEnumServicesW"
  ],
  "ds32gt.dll": [
    "Dispatch"
  ],
  "dsauth.dll": [
    "StoreCollectAttributes",
    "StoreDeleteObject",
    "StoreInitHandle",
    "StoreCreateObjectVA",
    "DhcpDsGetRoot",
    "StoreBeginSearch",
    "StoreEndSearch",
    "DhcpDsSetLists",
    "StoreSetSearchOneLevel",
    "StoreGetHandle",
    "StoreCleanupHandle",
    "DhcpDsAddServer",
    "DhcpDeleteServerDS",
    "DhcpAddServerDS",
    "DhcpDsEnumServers",
    "StoreSearchGetNext",
    "DhcpDsDelServer",
    "DhcpDsValidateService",
    "DhcpDsCleanupDS",
    "StoreSetSearchSubTree",
    "DhcpDsGetAttribs",
    "DhcpDsInitDS",
    "DhcpDsGetLists",
    "DhcpEnumServersDS"
  ],
  "dsdmo.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dskquota.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "ProcessGroupPolicy"
  ],
  "dskquoui.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "dsound.dll": [
    "DirectSoundCaptureCreate8",
    "DirectSoundCreate",
    "DirectSoundCaptureCreate",
    "GetDeviceID",
    "DllCanUnloadNow",
    "DirectSoundEnumerateW",
    "DirectSoundCaptureEnumerateA",
    "DirectSoundFullDuplexCreate",
    "DirectSoundCreate8",
    "DllGetClassObject",
    "DirectSoundCaptureEnumerateW",
    "DirectSoundEnumerateA"
  ],
  "dsprop.dll": [
    "ADsPropSendErrorMessage",
    "DllRegisterServer",
    "DSPROP_GetGCSearchOnDomain",
    "DllUnregisterServer",
    "Smart_PADS_ATTR_INFO__Empty",
    "ADsPropShowErrorDialog",
    "ErrMsgParam",
    "CrackName",
    "ErrMsg",
    "FindSheet",
    "ADsPropCheckIfWritable",
    "CheckADsError",
    "ADsPropSetHwnd",
    "ADsPropGetInitInfo",
    "ReportError",
    "MsgBox",
    "ADsPropSetHwndWithTitle",
    "IsSheetAlreadyUp",
    "PostADsPropSheet",
    "DllCanUnloadNow",
    "BringSheetToForeground",
    "DllGetClassObject",
    "ADsPropCreateNotifyObj"
  ],
  "dsquery.dll": [
    "DllInstall",
    "OpenSavedDsQuery",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "OpenQueryWindow",
    "OpenSavedDsQueryW",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dsrole.dll": [
    "DsRoleCancel",
    "DsRoleGetDcOperationProgress",
    "DsRoleGetDcOperationResults",
    "DsRoleDemoteDc",
    "DsRoleAbortDownlevelServerUpgrade",
    "DsRoleDcAsReplica",
    "DsRoleDnsNameToFlatName",
    "DsRoleGetPrimaryDomainInformation",
    "DsRoleIfmHandleFree",
    "DsRoleServerSaveStateForUpgrade",
    "DsRoleUpgradeDownlevelServer",
    "DsRoleDcAsDc",
    "DsRoleFreeMemory",
    "DsRoleGetDatabaseFacts"
  ],
  "dssec.dll": [
    "DSEditSecurity",
    "DSCreateSecurityPage",
    "DllCanUnloadNow",
    "DSCreateISecurityInfoObject",
    "DSCreateISecurityInfoObjectEx",
    "DllGetClassObject"
  ],
  "dssenh.dll": [
    "CPDeriveKey",
    "CPImportKey",
    "CPDestroyHash",
    "CPSetKeyParam",
    "CPGetHashParam",
    "CPSignHash",
    "CPDecrypt",
    "DllRegisterServer",
    "CPGetProvParam",
    "CPGetKeyParam",
    "CPDestroyKey",
    "CPEncrypt",
    "DllUnregisterServer",
    "CPSetHashParam",
    "CPHashSessionKey",
    "CPSetProvParam",
    "CPAcquireContext",
    "CPReleaseContext",
    "CPHashData",
    "CPCreateHash",
    "CPGenKey",
    "CPDuplicateKey",
    "CPVerifySignature",
    "CPGenRandom",
    "CPExportKey",
    "CPGetUserKey",
    "CPDuplicateHash"
  ],
  "dsuiext.dll": [
    "DllInstall",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DsBrowseForContainerA",
    "DsGetIcon",
    "DllGetClassObject",
    "DllRegisterServer",
    "DsBrowseForContainerW",
    "DsGetFriendlyClassName"
  ],
  "dswave.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dtsh.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "dui70.dll": [
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::HWNDHost::GetClassInfoPtr(void)",
    "public: __thiscall DirectUI::Expandable::Expandable(void)",
    "public: static long __stdcall DirectUI::RefPointElement::Register(void)",
    "public: virtual long __thiscall DirectUI::CCBaseScrollBar::SetPosition(int)",
    "public: __thiscall DirectUI::PText::PText(void)",
    "public: class DirectUI::DUIXmlParser * __thiscall DirectUI::DUIFactory::GetParser(void)",
    "public: void __thiscall DirectUI::LinkedList::Add(class DirectUI::LinkedListNode *)",
    "private: long __thiscall DirectUI::Element::_PostSourceChange(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Viewer::GetClassInfoW(void)",
    "public: struct tagSIZE __thiscall DirectUI::XBaby::GetContentDesiredSize(int,int)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::AutoButton::GetClassInfoW(void)",
    "protected: virtual void __thiscall DirectUI::Element::OnUnHosted(class DirectUI::Element *)",
    "public: static int DirectUI::Schema::GridPattern",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accRole(struct tagVARIANT,struct tagVARIANT *)",
    "const DirectUI::Combobox::`vftable'",
    "public: static long __stdcall DirectUI::CCTreeView::Register(void)",
    "public: static void __stdcall DirectUI::Page::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: __thiscall DirectUI::Navigator::Navigator(void)",
    "public: class DirectUI::Element const * __thiscall DirectUI::ElementProvider::GetElementKey(void)",
    "public: virtual long __stdcall DirectUI::ScrollProvider::Scroll(enum ScrollAmount,enum ScrollAmount)",
    "protected: long __thiscall DirectUI::ElementProxy::GetFragmentRoot(struct IRawElementProviderFragmentRoot * *)",
    "public: long __thiscall DirectUI::Element::SetFontFace(unsigned short const *)",
    "public: virtual void __thiscall DirectUI::CCPushButton::OnInput(struct DirectUI::InputEvent *)",
    "const DirectUI::SelectionProxy::`vftable'",
    "public: static int DirectUI::Schema::AutomationFocusChangedEvent",
    "public: int __thiscall DirectUI::Value::GetInt(void)",
    "public: long __thiscall DirectUI::Element::SetFontSize(int)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateColor(unsigned long,unsigned long,unsigned char)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Progress::s_pClassInfo",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::LastDSConstProp(void)",
    "private: static class DirectUI::UiaArray * DirectUI::ElementProviderManager::g_pArrayPprv",
    "private: static struct DirectUI::IClassInfo * DirectUI::Page::s_pClassInfo",
    "protected: long __thiscall DirectUI::HWNDHost::SetThemeChanged(int)",
    "public: virtual void __thiscall DirectUI::CCBase::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: __thiscall DirectUI::SelectionProxy::SelectionProxy(class DirectUI::SelectionProxy const &)",
    "public: int __thiscall DirectUI::Element::GetY(void)",
    "protected: int __thiscall DirectUI::HWNDHost::GetThemeChanged(void)",
    "public: virtual __thiscall DirectUI::Selector::~Selector(void)",
    "public: long __thiscall DirectUI::XBaby::SetToHost(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::Element::QueueDefaultAction(void)",
    "public: class DirectUI::CCListView & __thiscall DirectUI::CCListView::operator=(class DirectUI::CCListView const &)",
    "public: virtual struct HWND__ * __thiscall DirectUI::XElement::CreateHWND(struct HWND__ *)",
    "public: virtual long __stdcall DirectUI::GridItemProvider::get_ContainingGrid(struct IRawElementProviderSimple * *)",
    "public: static long __stdcall DirectUI::VerticalFlowLayout::Create(int,int *,class DirectUI::Value * *)",
    "public: long __thiscall DirectUI::Combobox::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: unsigned int __thiscall DirectUI::Element::_GetNeedsLayout(void)",
    "public: long __thiscall DirectUI::Expandable::SetExpanded(bool)",
    "public: __thiscall DirectUI::ExpandCollapseProvider::ExpandCollapseProvider(void)",
    "unsigned long DirectUI::g_dwElSlot",
    "public: unsigned short const * __thiscall DirectUI::Element::GetAccHelp(class DirectUI::Value * *)",
    "private: static void __stdcall DirectUI::EventManager::GetExpandCollapseState(struct tagVARIANT *)",
    "protected: virtual void __thiscall DirectUI::Proxy::OnInvoke(unsigned int,void *)",
    "public: long __thiscall DirectUI::Progress::SetPosition(int)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCTreeView::GetClassInfoW(void)",
    "public: virtual void __thiscall DirectUI::Expando::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateStyleSheet(class DirectUI::StyleSheet *)",
    "public: void __thiscall DirectUI::LinkedList::Remove(class DirectUI::LinkedListNode *)",
    "public: virtual __thiscall DirectUI::Navigator::~Navigator(void)",
    "public: int __thiscall DirectUI::AnimationStrip::GetFrameWidth(void)",
    "public: int __thiscall DirectUI::NavScoring::TrackScore(class DirectUI::Element *,class DirectUI::Element *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseLiteralColor(unsigned short const *,unsigned long *)",
    "public: static long __stdcall DirectUI::CCListBox::Register(void)",
    "public: static long __stdcall DirectUI::RowLayout::Create(int,int *,class DirectUI::Value * *)",
    "public: virtual long __stdcall DirectUI::Element::QueryInterface(struct _GUID const &,void * *)",
    "const DirectUI::CCPushButton::`vftable'",
    "const DirectUI::HWNDElementAccessible::`vftable'{for `IServiceProvider'}",
    "public: bool __thiscall DirectUI::Edit::GetWantTabs(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetAtomZero(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::SelectorNoDefault::GetClassInfoPtr(void)",
    "public: long __thiscall DirectUI::Element::SetContentGraphic(unsigned short const *,unsigned short,unsigned short)",
    "public: static void __stdcall DirectUI::ExpandoButtonGlyph::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: class DirectUI::ElementWithHWND & __thiscall DirectUI::ElementWithHWND::operator=(class DirectUI::ElementWithHWND const &)",
    "public: long __thiscall DirectUI::HWNDElement::SetWrapKeyboardNavigate(bool)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnCompositionChanged(void)",
    "public: __thiscall DirectUI::IXProviderCP::IXProviderCP(class DirectUI::IXProviderCP const &)",
    "public: __thiscall DirectUI::BaseScrollViewer::BaseScrollViewer(class DirectUI::BaseScrollViewer const &)",
    "public: long __thiscall DirectUI::ElementProvider::DoInvokeArgs(int,class DirectUI::ProviderProxy * (__stdcall*)(class DirectUI::Element *),char *)",
    "public: int __thiscall DirectUI::Element::GetAnimation(void)",
    "public: static long __stdcall DirectUI::SelectorNoDefault::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: unsigned short const * __thiscall DirectUI::Bind::GetProperty(class DirectUI::Value * *)",
    "public: long __thiscall DirectUI::Element::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: __thiscall DirectUI::ScrollItemProxy::ScrollItemProxy(class DirectUI::ScrollItemProxy const &)",
    "public: static int DirectUI::Schema::Selection_CanSelectMultiple_Property",
    "public: __thiscall DirectUI::ElementProvider::ElementProvider(void)",
    "public: __thiscall DirectUI::LinkedList::LinkedList(void)",
    "public: static class DirectUI::ElementProvider * __stdcall DirectUI::ElementProviderManager::Find(class DirectUI::Element *)",
    "public: int __thiscall DirectUI::VerticalFlowLayout::GetLine(class DirectUI::Element *,class DirectUI::Element *)",
    "protected: virtual void __thiscall DirectUI::TaskPage::OnListenerDetach(class DirectUI::Element *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCPushButton::HasShieldProp(void)",
    "public: long __thiscall DirectUI::Combobox::SetSelection(int)",
    "public: virtual long __stdcall DirectUI::ScrollProvider::get_VerticalScrollPercent(double *)",
    "public: static int DirectUI::Schema::SelectionInvalidatedEvent",
    "protected: long __thiscall DirectUI::DUIXmlParser::_RecordElementStyleSheet(unsigned short const *,bool)",
    "public: static long __stdcall DirectUI::ElementProviderManager::Init(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Viewer::YScrollableProp(void)",
    "public: long __thiscall DirectUI::DUIXmlParser::SetXML(unsigned short const *,struct HINSTANCE__ *,struct HINSTANCE__ *)",
    "public: virtual long __stdcall DirectUI::TableProvider::get_RowOrColumnMajor(enum RowOrColumnMajor *)",
    "public: void __thiscall DirectUI::HWNDElement::FlushWorkingSet(void)",
    "public: void __thiscall DirectUI::Element::StopAnimation(unsigned int)",
    "public: void __thiscall DirectUI::NativeHWNDHost::Destroy(void)",
    "public: bool __thiscall DirectUI::Button::GetPressed(void)",
    "public: __thiscall DirectUI::TableItemProxy::TableItemProxy(void)",
    "private: long __thiscall DirectUI::SelectorSelectionItemProxy::Select(void)",
    "public: long __thiscall DirectUI::Movie::SetDrawOutlines(bool)",
    "public: static int DirectUI::Schema::ToolTipOpenedEvent",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accFocus(struct tagVARIANT *)",
    "public: virtual void __thiscall DirectUI::NineGridLayout::OnRemove(class DirectUI::Element *,class DirectUI::Element * *,unsigned int)",
    "public: static long __stdcall DirectUI::EventManager::AdviseEventAdded(int,struct tagSAFEARRAY *)",
    "public: void __thiscall DirectUI::CCPushButton::`default constructor closure'(void)",
    "public: virtual void __thiscall DirectUI::Layout::DoLayout(class DirectUI::Element *,int,int)",
    "public: long __thiscall DirectUI::Navigator::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: __thiscall DirectUI::Viewer::Viewer(class DirectUI::Viewer const &)",
    "public: static int DirectUI::Schema::Scroll_VerticalViewSize_Property",
    "const DirectUI::Movie::`vftable'",
    "public: static int DirectUI::Schema::Value_IsReadOnly_Property",
    "public: virtual struct HWND__ * __thiscall DirectUI::CCBaseScrollBar::CreateHWND(struct HWND__ *)",
    "public: virtual __thiscall DirectUI::HWNDHostClientAccessible::~HWNDHostClientAccessible(void)",
    "public: virtual unsigned long __stdcall DirectUI::ScrollItemProvider::Release(void)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::ElementProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: class DirectUI::NineGridLayout & __thiscall DirectUI::NineGridLayout::operator=(class DirectUI::NineGridLayout const &)",
    "public: __thiscall DirectUI::RepeatButton::RepeatButton(class DirectUI::RepeatButton const &)",
    "const DirectUI::NativeHWNDHost::`vftable'",
    "public: class DirectUI::RowLayout & __thiscall DirectUI::RowLayout::operator=(class DirectUI::RowLayout const &)",
    "public: static int DirectUI::Schema::TreeItemControlType",
    "protected: virtual void __thiscall DirectUI::SelectionItemProxy::Init(class DirectUI::Element *)",
    "const DirectUI::VerticalFlowLayout::`vftable'",
    "public: virtual void __thiscall DirectUI::BorderLayout::DoLayout(class DirectUI::Element *,int,int)",
    "public: virtual void __thiscall DirectUI::DialogElement::OnKeyFocusMoved(class DirectUI::Element *,class DirectUI::Element *)",
    "public: __thiscall DirectUI::CCCheckBox::CCCheckBox(unsigned long)",
    "public: static long __stdcall DirectUI::Edit::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static int DirectUI::Schema::SelectionItem_SelectionContainer_Property",
    "public: __thiscall DirectUI::ToggleProxy::ToggleProxy(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Macro::GetClassInfoW(void)",
    "public: struct DirectUI::IDataEntry & __thiscall DirectUI::IDataEntry::operator=(struct DirectUI::IDataEntry const &)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseSysMetricInt(struct DirectUI::ParserTools::ExprNode const *,int *)",
    "public: static enum DirectUI::Schema::Pattern __stdcall DirectUI::Schema::PatternFromPatternId(int)",
    "protected: static void __stdcall DirectUI::HWNDHost::AttachCtrlSubclassProc(struct HWND__ *)",
    "protected: virtual void __thiscall DirectUI::TaskPage::OnListenedPropertyChanged(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::FillLayout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "protected: virtual void __thiscall DirectUI::GridItemProxy::Init(class DirectUI::Element *)",
    "public: bool __thiscall DirectUI::CCPushButton::GetOverrideButtonBackground(void)",
    "public: virtual long __thiscall DirectUI::Pages::Add(class DirectUI::Element * *,unsigned int)",
    "public: __thiscall DirectUI::Element::Element(class DirectUI::Element const &)",
    "public: static int DirectUI::Schema::CalendarControlType",
    "protected: virtual long __thiscall DirectUI::TaskPage::LoadPage(class DirectUI::HWNDElement *,struct HINSTANCE__ *,class DirectUI::Element * *,class DirectUI::DUIXmlParser * *)",
    "public: __thiscall DirectUI::ResourceModuleHandles::~ResourceModuleHandles(void)",
    "public: static long __stdcall DirectUI::InvokeManager::GetInvokeHelper(class DirectUI::InvokeHelper * *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::RefPointElement::GetClassInfoPtr(void)",
    "public: long __thiscall DirectUI::CCTrackBar::SetRangeMin(int)",
    "public: long __thiscall DirectUI::Element::SetSheet(class DirectUI::StyleSheet *)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::XBaby::GetAdjacent(class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::AnimationStrip::FrameWidthProp(void)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnInput(struct DirectUI::InputEvent *)",
    "public: class DirectUI::XHost & __thiscall DirectUI::XHost::operator=(class DirectUI::XHost const &)",
    "public: long __thiscall DirectUI::DUIXmlParser::SetPreprocessedXML(unsigned short const *,struct HINSTANCE__ *,struct HINSTANCE__ *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::BaseScrollViewer::YBarVisibilityProp(void)",
    "public: virtual struct HWND__ * __thiscall DirectUI::Combobox::CreateHWND(struct HWND__ *)",
    "public: class DirectUI::DynamicArray * __thiscall DirectUI::Value::GetElementList(void)",
    "public: __thiscall DirectUI::CCBase::CCBase(class DirectUI::CCBase const &)",
    "public: class DirectUI::FillLayout & __thiscall DirectUI::FillLayout::operator=(class DirectUI::FillLayout const &)",
    "public: void __thiscall DirectUI::BaseScrollBar::OnPositionChanged(class DirectUI::Value *)",
    "public: virtual __thiscall DirectUI::Bind::~Bind(void)",
    "protected: virtual void __thiscall DirectUI::ProviderProxy::Init(class DirectUI::Element *)",
    "public: void __thiscall DirectUI::Movie::Rewind(void)",
    "public: static int DirectUI::Schema::InvokeInvokedEvent",
    "public: long __thiscall DirectUI::CCBase::SetWinStyle(int)",
    "const DirectUI::ElementProvider::`vftable'{for `IRawElementProviderFragment'}",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnGetDlgCode(struct tagMSG *,long *)",
    "public: static int DirectUI::Schema::FrameworkId",
    "public: __thiscall DirectUI::ISBLeak::ISBLeak(void)",
    "public: __thiscall DirectUI::CCBaseCheckRadioButton::CCBaseCheckRadioButton(class DirectUI::CCBaseCheckRadioButton const &)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Navigator::GetClassInfoW(void)",
    "public: static int DirectUI::Schema::RadioButtonControlType",
    "public: virtual long __stdcall DirectUI::GridItemProvider::get_Column(int *)",
    "public: static bool (__stdcall*__stdcall DirectUI::Schema::PfnIsSupportedFromPattern(enum DirectUI::Schema::Pattern))(class DirectUI::Element *)",
    "protected: void __thiscall DirectUI::HWNDHost::SyncVisible(void)",
    "public: __thiscall DirectUI::ScrollProxy::ScrollProxy(class DirectUI::ScrollProxy const &)",
    "private: long __thiscall DirectUI::AnimationStrip::LoadCommonControlExports(void)",
    "public: virtual void __thiscall DirectUI::XElement::OnEvent(struct DirectUI::Event *)",
    "public: __thiscall DirectUI::HWNDElement::HWNDElement(void)",
    "public: __thiscall DirectUI::ShellBorderLayout::ShellBorderLayout(void)",
    "const DirectUI::CCHScrollBar::`vftable'{for `DirectUI::BaseScrollBar'}",
    "public: int __thiscall DirectUI::Element::GetShortcut(void)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::TableItemProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: static void __stdcall DirectUI::Thumb::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCHScrollBar::GetClassInfoPtr(void)",
    "public: static long __stdcall DirectUI::XElement::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::SelectorSelectionItemProxy::`vftable'",
    "UiaHideOnGetObject",
    "public: virtual long __stdcall DirectUI::TableItemProvider::GetColumnHeaderItems(struct tagSAFEARRAY * *)",
    "public: static long __stdcall DirectUI::DialogElement::Create(struct HWND__ *,bool,unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual void __thiscall DirectUI::StyledScrollViewer::OnListenedPropertyChanged(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "const DirectUI::AccessibleButton::`vftable'",
    "public: static bool __stdcall DirectUI::GridProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: bool __thiscall DirectUI::Button::GetCaptured(void)",
    "public: virtual __thiscall DirectUI::TaskPage::~TaskPage(void)",
    "GetThemeHandle",
    "public: virtual long __stdcall DirectUI::XProvider::SetButtonClassAcceptsEnterKey(bool)",
    "public: bool __thiscall DirectUI::Element::HasContent(void)",
    "public: static long __stdcall DirectUI::HWNDElement::Register(void)",
    "protected: virtual void __thiscall DirectUI::ScrollProxy::Init(class DirectUI::Element *)",
    "public: int __thiscall DirectUI::BaseScrollViewer::GetYBarVisibility(void)",
    "public: virtual int __thiscall DirectUI::ScrollBar::GetPosition(void)",
    "private: long __thiscall DirectUI::GridProxy::GetItem(unsigned int,unsigned int,struct IRawElementProviderSimple * *)",
    "public: virtual void __thiscall DirectUI::AutoButton::OnEvent(struct DirectUI::Event *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Movie::GetClassInfoPtr(void)",
    "public: virtual void __thiscall DirectUI::DialogElement::OnListenedEvent(class DirectUI::Element *,struct DirectUI::Event *)",
    "public: static long __stdcall DirectUI::XResourceProvider::Create(class DirectUI::XResourceProvider * *)",
    "public: __thiscall DirectUI::XElement::XElement(void)",
    "public: static class UID __stdcall DirectUI::Navigator::ActionInitiated(void)",
    "private: long __thiscall DirectUI::GridItemProxy::GetRow(int *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::HeightProp(void)",
    "protected: virtual void __thiscall DirectUI::TableItemProxy::Init(class DirectUI::Element *)",
    "public: int __thiscall DirectUI::Element::IsRoot(void)",
    "public: bool __thiscall DirectUI::BaseScrollViewer::GetXScrollable(void)",
    "public: static long __stdcall DirectUI::VerticalFlowLayout::Create(bool,unsigned int,unsigned int,unsigned int,class DirectUI::Layout * *)",
    "public: unsigned short __thiscall DirectUI::HWNDElement::GetUIState(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::CompositingQualityProp(void)",
    "public: static long __stdcall DirectUI::EventManager::FireStructureChangedEvent(class DirectUI::Element *,enum StructureChangeType)",
    "public: long __thiscall DirectUI::UnknownElement::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "const DirectUI::IXElementCP::`vftable'",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetSizeZero(void)",
    "public: static int DirectUI::Schema::GridItemPattern",
    "public: void __thiscall DirectUI::FlowLayout::Initialize(bool,unsigned int,unsigned int,unsigned int)",
    "public: class DirectUI::Value & __thiscall DirectUI::Value::operator=(class DirectUI::Value const &)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::put_accValue(struct tagVARIANT,unsigned short *)",
    "private: long __thiscall DirectUI::AnimationStrip::Start(void)",
    "public: long __thiscall DirectUI::Macro::SetExpand(unsigned short const *)",
    "public: virtual long __stdcall DirectUI::TableProvider::GetRowHeaders(struct tagSAFEARRAY * *)",
    "public: static void __stdcall DirectUI::SelectorNoDefault::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: __thiscall DirectUI::BorderLayout::BorderLayout(void)",
    "public: static int DirectUI::Schema::Scroll_HorizontalScrollPercent_Property",
    "private: static void __stdcall DirectUI::Element::_VoidPCNotifyTree(int,class DirectUI::DeferCycle *)",
    "public: static long __stdcall DirectUI::CCTrackBar::Register(void)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::Layout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: class DirectUI::Viewer & __thiscall DirectUI::Viewer::operator=(class DirectUI::Viewer const &)",
    "const DirectUI::Edit::`vftable'",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::DialogElement::GetDefaultButton(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseSGraphicGraphic(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: static class UID __stdcall DirectUI::Selector::SelectionChange(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::LocationProp(void)",
    "private: static struct DirectUI::Schema::RoleMap const * const DirectUI::Schema::_roleMapping",
    "public: int __thiscall DirectUI::Element::GetBackgroundStdColor(void)",
    "public: static int DirectUI::Schema::AccessKeyProperty",
    "public: class DirectUI::Repeater & __thiscall DirectUI::Repeater::operator=(class DirectUI::Repeater const &)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Progress::GetClassInfoW(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::AnimationStrip::FrameIndexProp(void)",
    "public: void __thiscall DirectUI::NavScoring::Init(class DirectUI::Element *,int,struct DirectUI::NavReference const *)",
    "public: int __thiscall DirectUI::CCTrackBar::GetLineSize(void)",
    "public: static bool __stdcall DirectUI::RangeValueProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: class DirectUI::Clipper & __thiscall DirectUI::Clipper::operator=(class DirectUI::Clipper const &)",
    "public: virtual long __stdcall DirectUI::SelectionItemProvider::get_SelectionContainer(struct IRawElementProviderSimple * *)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnGroupChanged(int,bool)",
    "public: int __thiscall DirectUI::Element::GetDirection(void)",
    "public: virtual void __thiscall DirectUI::Browser::OnEvent(struct DirectUI::Event *)",
    "const DirectUI::Page::`vftable'",
    "public: long __thiscall DirectUI::Progress::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: virtual void __thiscall DirectUI::CCTrackBar::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Selector::SelectionProp(void)",
    "public: static long __stdcall DirectUI::GridLayout::Create(int,int,class DirectUI::Layout * *)",
    "public: long __thiscall DirectUI::DialogElement::SetRegisteredDefaultButton(class DirectUI::Element *)",
    "const DirectUI::HWNDHostClientAccessible::`vftable'{for `IEnumVARIANT'}",
    "public: virtual bool __thiscall DirectUI::CCBaseCheckRadioButton::OnLostDialogFocus(class DirectUI::DialogElement *)",
    "public: static long __stdcall DirectUI::Macro::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::ExpandCollapseProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: virtual long __stdcall DirectUI::GridItemProvider::get_Row(int *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::MinSizeProp(void)",
    "public: long __thiscall DirectUI::DUIXmlParser::SetXMLFromResource(unsigned short const *,struct HINSTANCE__ *,struct HINSTANCE__ *)",
    "protected: long __thiscall DirectUI::XBaby::Initialize(class DirectUI::IXElementCP *,class DirectUI::XProvider *,struct HWND__ *,class DirectUI::Element *,unsigned long *)",
    "public: __thiscall DirectUI::Proxy::Proxy(class DirectUI::Proxy const &)",
    "public: long __thiscall DirectUI::Edit::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: struct DirectUI::NavScoring & __thiscall DirectUI::NavScoring::operator=(struct DirectUI::NavScoring const &)",
    "public: virtual void __thiscall DirectUI::Button::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static long __stdcall DirectUI::HWNDHost::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: __thiscall DirectUI::HWNDElementProxy::HWNDElementProxy(void)",
    "public: long __thiscall DirectUI::Selector::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: class DirectUI::LinkedListNode & __thiscall DirectUI::LinkedListNode::operator=(class DirectUI::LinkedListNode const &)",
    "public: struct HINSTANCE__ * __thiscall DirectUI::DUIXmlParser::GetHInstance(void)",
    "public: virtual long __stdcall DirectUI::RangeValueProvider::get_Minimum(double *)",
    "private: long __thiscall DirectUI::ScrollProxy::GetViewer(class DirectUI::Viewer * *)",
    "protected: unsigned int __thiscall DirectUI::GridLayout::GetCurrentRows(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::CCBase::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::DrawOutlinesProp(void)",
    "public: virtual bool __thiscall DirectUI::ScrollBar::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: bool __thiscall DirectUI::Element::EnsureVisible(unsigned int)",
    "public: virtual void __thiscall DirectUI::NineGridLayout::DoLayout(class DirectUI::Element *,int,int)",
    "public: void __thiscall DirectUI::CritSecLock::Unlock(void)",
    "private: void __thiscall DirectUI::PushButton::FireHostEvent(class DirectUI::Element *,bool)",
    "public: __thiscall DirectUI::ProgressRangeValueProxy::ProgressRangeValueProxy(class DirectUI::ProgressRangeValueProxy const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCBaseScrollBar::TrackingProp(void)",
    "public: long __thiscall DirectUI::Movie::SetSmoothingMode(int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::FontStyleProp(void)",
    "public: virtual void __thiscall DirectUI::AccessibleButton::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual int __thiscall DirectUI::CCBaseScrollBar::GetMaximum(void)",
    "public: virtual void __thiscall DirectUI::Edit::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static long __stdcall DirectUI::FontCache::InitThread(void)",
    "public: virtual __thiscall DirectUI::ElementWithHWND::~ElementWithHWND(void)",
    "public: __thiscall DirectUI::NativeHWNDHost::NativeHWNDHost(void)",
    "public: class DirectUI::XElement & __thiscall DirectUI::XElement::operator=(class DirectUI::XElement const &)",
    "public: virtual class DirectUI::Element const volatile * __thiscall DirectUI::ElementProvider::GetElement(void)",
    "private: long __thiscall DirectUI::NavigatorSelectionItemProxy::GetIsSelected(class DirectUI::Browser *,int *)",
    "public: __thiscall DirectUI::NativeHWNDHost::NativeHWNDHost(class DirectUI::NativeHWNDHost const &)",
    "public: virtual long __stdcall DirectUI::RangeValueProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Repeater::GetClassInfoW(void)",
    "public: virtual bool __thiscall DirectUI::RadioButtonGlyph::OnReceivedDialogFocus(class DirectUI::DialogElement *)",
    "const DirectUI::SelectorSelectionProxy::`vftable'",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Movie::GetClassInfoW(void)",
    "public: bool __thiscall DirectUI::Edit::GetMultiline(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ClassProp(void)",
    "public: long __thiscall DirectUI::Element::SetShortcut(int)",
    "private: static long __stdcall DirectUI::EventManager::HandleAccRoleEvent(struct IRawElementProviderSimple *,class DirectUI::Value *,class DirectUI::Value *)",
    "public: class DirectUI::BaseScrollBar & __thiscall DirectUI::BaseScrollBar::operator=(class DirectUI::BaseScrollBar const &)",
    "public: virtual bool __thiscall DirectUI::CCTreeView::OnNotify(unsigned int,unsigned int,long,long *)",
    "public: static bool __stdcall DirectUI::ToggleProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: virtual void __thiscall DirectUI::Element::OnInput(struct DirectUI::InputEvent *)",
    "public: struct HWND__ * __thiscall DirectUI::HWNDHost::GetHWNDParent(void)",
    "public: long __thiscall DirectUI::Element::SetBackgroundStdColor(int)",
    "public: int __thiscall DirectUI::CCListBox::DeleteString(int)",
    "public: static class UID __stdcall DirectUI::Browser::Leaving(void)",
    "public: void __thiscall DirectUI::BaseScrollBar::OnMaximumChanged(class DirectUI::Value *)",
    "private: void __thiscall DirectUI::HWNDHost::UnvirtualizePosition(void)",
    "const DirectUI::ScrollProvider::`vftable'",
    "public: int __thiscall DirectUI::Element::GetBorderStdColor(void)",
    "protected: static struct DirectUI::DUIXmlParser::FunctionDefinition const * const DirectUI::DUIXmlParser::s_fdGraphic",
    "public: class DirectUI::Element * __thiscall DirectUI::Selector::GetSelection(void)",
    "public: virtual long __thiscall DirectUI::ToggleProxy::DoMethod(int,char *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Edit::GetClassInfoW(void)",
    "public: class DirectUI::Schema & __thiscall DirectUI::Schema::operator=(class DirectUI::Schema const &)",
    "public: static long __stdcall DirectUI::CCSysLink::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::BaseScrollViewer::YOffsetProp(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCAVI::s_pClassInfo",
    "public: virtual __thiscall DirectUI::CCPushButton::~CCPushButton(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accState(struct tagVARIANT,struct tagVARIANT *)",
    "public: void __thiscall DirectUI::ElementProvider::TossElement(void)",
    "public: __thiscall DirectUI::ScrollBar::ScrollBar(void)",
    "public: static void __stdcall DirectUI::CCVScrollBar::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: long __thiscall DirectUI::AutoButton::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: static long __stdcall DirectUI::CCListBox::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static long __stdcall DirectUI::Viewer::Register(void)",
    "public: static long __stdcall DirectUI::Browser::Register(void)",
    "private: static long __stdcall DirectUI::TaskPage::StaticXHostSubclassProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "PurgeThemeHandles",
    "public: virtual void __thiscall DirectUI::DialogElement::OnListenerDetach(class DirectUI::Element *)",
    "public: __thiscall DirectUI::CCListBox::CCListBox(class DirectUI::CCListBox const &)",
    "public: static long __stdcall DirectUI::FlowLayout::Create(bool,unsigned int,unsigned int,unsigned int,class DirectUI::Layout * *)",
    "public: void __thiscall DirectUI::CCAVI::Stop(void)",
    "public: static class DirectUI::Element * __stdcall DirectUI::HWNDElement::GetKeyFocusedElement(void)",
    "public: virtual struct DirectUI::PropertyInfo const * __thiscall DirectUI::ClassInfoBase::EnumPropertyInfo(unsigned int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::SizeInLayoutProp(void)",
    "public: static void __stdcall DirectUI::CCTreeView::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual void __thiscall DirectUI::TableLayout::DoLayout(class DirectUI::Element *,int,int)",
    "private: int __thiscall DirectUI::Browser::FireNavigate(unsigned short)",
    "private: long __thiscall DirectUI::TaskPage::LoadPage(class DirectUI::Element * *,class DirectUI::Element *,class DirectUI::DUIXmlParser * *)",
    "private: void __thiscall DirectUI::BorderLayout::SetClient(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::CCTreeView::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::VerticalFlowLayout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "private: static struct DirectUI::IClassInfo * DirectUI::HWNDHost::s_pClassInfo",
    "private: static long __stdcall DirectUI::EventManager::GetInt(struct tagVARIANT *,class DirectUI::Value *)",
    "protected: virtual struct HWND__ * __thiscall DirectUI::HWNDHost::CreateHWND(struct HWND__ *)",
    "public: static long __stdcall DirectUI::Combobox::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::CCBaseScrollBar::`vftable'{for `DirectUI::BaseScrollBar'}",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::ToggleProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::AutoButton::Register(void)",
    "public: virtual int __thiscall DirectUI::ClassInfoBase::Release(void)",
    "public: static long __stdcall DirectUI::Element::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCBase::GetClassInfoW(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::BackgroundProp(void)",
    "public: long __thiscall DirectUI::TextGraphic::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: static int DirectUI::Schema::GridItem_Parent_Property",
    "public: virtual bool __thiscall DirectUI::Edit::OnNotify(unsigned int,unsigned int,long,long *)",
    "public: static long __stdcall DirectUI::EventManager::AdviseEventRemoved(int,struct tagSAFEARRAY *)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accValue(struct tagVARIANT,unsigned short * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::EnabledProp(void)",
    "protected: long __thiscall DirectUI::ElementProxy::GetRuntimeId(struct tagSAFEARRAY * *)",
    "public: static long __stdcall DirectUI::Viewer::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_EnterOnCurrentThread(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::GetIDsOfNames(struct _GUID const &,unsigned short * *,unsigned int,unsigned long,long *)",
    "public: virtual void __thiscall DirectUI::HWNDHost::OnDestroy(void)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetAccItemType(class DirectUI::Value * *)",
    "const DirectUI::ElementProvider::`vftable'{for `IRawElementProviderAdviseEvents'}",
    "public: static void __stdcall DirectUI::StyledScrollViewer::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::GridItemProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accDescription(struct tagVARIANT,unsigned short * *)",
    "public: int __thiscall DirectUI::Element::GetDPI(void)",
    "public: __thiscall DirectUI::Selector::Selector(class DirectUI::Selector const &)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetLayoutNull(void)",
    "public: virtual struct HINSTANCE__ * __thiscall DirectUI::ClassInfoBase::GetModule(void)const",
    "public: long __thiscall DirectUI::Movie::SetCompositingQuality(int)",
    "const DirectUI::HWNDHostAccessible::`vftable'{for `IAccIdentity'}",
    "public: static int DirectUI::Schema::TextTextSelectionChangedEvent",
    "private: static struct DirectUI::IClassInfo * DirectUI::Expandable::s_pClassInfo",
    "public: static long __stdcall DirectUI::AnimationStrip::Register(void)",
    "public: virtual long __stdcall DirectUI::ScrollProvider::get_HorizontalViewSize(double *)",
    "public: virtual long __stdcall DirectUI::ScrollProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: void __thiscall DirectUI::VerticalFlowLayout::Initialize(bool,unsigned int,unsigned int,unsigned int)",
    "public: static void __stdcall DirectUI::RepeatButton::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual bool __thiscall DirectUI::ExpandoButtonGlyph::OnReceivedDialogFocus(class DirectUI::DialogElement *)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accState(struct tagVARIANT,struct tagVARIANT *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::InitializeParserFromXmlLiteReader(struct IXmlReader *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::GetParserCommon(class DirectUI::DUIXmlParser * *)",
    "public: void __thiscall DirectUI::Element::PaintFocusRect(struct HDC__ *,struct tagRECT const *,struct tagRECT const *)",
    "public: bool __thiscall DirectUI::Element::GetVisible(void)",
    "public: class DirectUI::CCBaseScrollBar & __thiscall DirectUI::CCBaseScrollBar::operator=(class DirectUI::CCBaseScrollBar const &)",
    "private: long __thiscall DirectUI::ToggleProxy::GetToggleState(enum ToggleState *)",
    "public: static int DirectUI::Schema::RuntimeIdProperty",
    "public: virtual long __thiscall DirectUI::BrowserSelectionProxy::DoMethod(int,char *)",
    "StrToID",
    "public: class DirectUI::Expando & __thiscall DirectUI::Expando::operator=(class DirectUI::Expando const &)",
    "public: int __thiscall DirectUI::Element::GetHeight(void)",
    "public: virtual void __thiscall DirectUI::DialogElement::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCPushButton::GetClassInfoPtr(void)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accParent(struct IDispatch * *)",
    "public: long __thiscall DirectUI::XBaby::GetHostedElementID(unsigned short *)",
    "public: __thiscall DirectUI::AutoButton::AutoButton(class DirectUI::AutoButton const &)",
    "public: bool __thiscall DirectUI::Element::GetKeyWithin(void)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accDescription(struct tagVARIANT,unsigned short * *)",
    "public: static long __stdcall DirectUI::Clipper::Register(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::BorderColorProp(void)",
    "public: __thiscall DirectUI::XResourceProvider::XResourceProvider(class DirectUI::XResourceProvider const &)",
    "public: static long __stdcall DirectUI::Movie::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: __thiscall DirectUI::NineGridLayout::NineGridLayout(void)",
    "public: class DirectUI::CCCommandLink & __thiscall DirectUI::CCCommandLink::operator=(class DirectUI::CCCommandLink const &)",
    "public: __thiscall DirectUI::DCSurface::DCSurface(class DirectUI::DCSurface const &)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCListBox::s_pClassInfo",
    "protected: virtual void __thiscall DirectUI::AnimationStrip::OnDestroy(void)",
    "protected: __thiscall DirectUI::ProviderProxy::ProviderProxy(void)",
    "const DirectUI::AnimationStrip::`vftable'",
    "public: long __thiscall DirectUI::Element::SetValue(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *)",
    "public: static int DirectUI::Schema::ExpandCollapse_ExpandCollapseState_Property",
    "public: struct _TREEITEM * __thiscall DirectUI::CCTreeView::InsertItem(unsigned short *,unsigned int,struct _TREEITEM * const,struct _TREEITEM * const)",
    "public: __thiscall DirectUI::InvokeProvider::InvokeProvider(void)",
    "public: virtual void __thiscall DirectUI::Movie::OnEvent(struct DirectUI::Event *)",
    "public: void __thiscall DirectUI::InvokeHelper::Uninit(void)",
    "public: virtual long __stdcall DirectUI::GridProvider::get_RowCount(int *)",
    "public: static void __stdcall DirectUI::FontCache::UninitProcess(void)",
    "public: bool __thiscall DirectUI::Element::NeedsDSUpdate(void)",
    "public: long __thiscall DirectUI::Element::SetForegroundStdColor(int)",
    "public: static int DirectUI::Schema::AutomationPropertyChangedEvent",
    "public: static void __stdcall DirectUI::CCBaseCheckRadioButton::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: struct tagRECT const * __thiscall DirectUI::Element::GetPadding(class DirectUI::Value * *)",
    "public: static bool __stdcall DirectUI::GridItemProxy::IsPatternSupported(class DirectUI::Element *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::BaseScrollViewer::s_pClassInfo",
    "public: long __thiscall DirectUI::Viewer::SetYScrollable(bool)",
    "GetFontCache",
    "public: virtual long __stdcall DirectUI::XProvider::SetRegisteredDefaultButton(class DirectUI::Element *)",
    "protected: virtual long __thiscall DirectUI::TaskPage::OnWizNext(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Progress::MinimumProp(void)",
    "public: virtual void __thiscall DirectUI::RowLayout::DoLayout(class DirectUI::Element *,int,int)",
    "public: virtual void __thiscall DirectUI::Layout::OnLayoutPosChanged(class DirectUI::Element *,class DirectUI::Element *,int,int)",
    "public: static bool __stdcall DirectUI::ValueProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::XProvider::Initialize(class DirectUI::Element *,class DirectUI::IXProviderCP *)",
    "public: long __thiscall DirectUI::Element::SetForegroundColor(unsigned long,unsigned long,unsigned char)",
    "public: struct tagPOINT const * __thiscall DirectUI::Element::GetLocation(class DirectUI::Value * *)",
    "public: static long __stdcall DirectUI::CCBaseScrollBar::Register(void)",
    "private: bool __thiscall DirectUI::Element::TryPattern(double,double,struct tagPOINT *,struct tagRECT const &)",
    "private: void __thiscall DirectUI::BaseScrollViewer::CheckScroll(class DirectUI::BaseScrollBar *,int,int,int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::PixelOffsetModeProp(void)",
    "private: static unsigned int const (* DirectUI::HWNDHost::g_rgMouseMap)[3]",
    "public: virtual long __thiscall DirectUI::XResourceProvider::CreateParserCP(class DirectUI::DUIXmlParser * *)",
    "public: class DirectUI::CritSecLock & __thiscall DirectUI::CritSecLock::operator=(class DirectUI::CritSecLock const &)",
    "public: virtual void __thiscall DirectUI::ClassInfoBase::RemoveChild(void)",
    "const DirectUI::DCSurface::`vftable'",
    "public: static long __stdcall DirectUI::EventManager::EndDefer(class DirectUI::Element *)",
    "public: __thiscall DirectUI::SafeArrayAccessor::~SafeArrayAccessor(void)",
    "public: long __thiscall DirectUI::Viewer::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: static int DirectUI::Schema::SelectionItemPattern",
    "public: virtual __thiscall DirectUI::StyledScrollViewer::~StyledScrollViewer(void)",
    "public: static unsigned int __stdcall DirectUI::Surface::GetSurfaceType(enum DirectUI::Surface::EType)",
    "public: int __thiscall DirectUI::Edit::GetPasswordCharacter(void)",
    "public: virtual unsigned long __stdcall DirectUI::SelectionItemProvider::AddRef(void)",
    "protected: virtual long __thiscall DirectUI::StyledScrollViewer::AddChildren(void)",
    "public: __thiscall DirectUI::RefcountBase::RefcountBase(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Repeater::GetClassInfoPtr(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Element::s_pClassInfo",
    "protected: long __thiscall DirectUI::ElementProxy::GetLabel(struct tagVARIANT *)",
    "public: long __thiscall DirectUI::Element::SetBackgroundColor(unsigned long)",
    "public: class DirectUI::BorderLayout & __thiscall DirectUI::BorderLayout::operator=(class DirectUI::BorderLayout const &)",
    "public: int __thiscall DirectUI::Element::GetAccState(void)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnEvent(struct DirectUI::Event *)",
    "public: __thiscall DirectUI::TextGraphic::TextGraphic(class DirectUI::TextGraphic const &)",
    "const DirectUI::SelectionProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: __thiscall DirectUI::RangeValueProvider::RangeValueProvider(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::ScrollBar::s_pClassInfo",
    "const DirectUI::ExpandCollapseProxy::`vftable'",
    "public: class DirectUI::Expandable & __thiscall DirectUI::Expandable::operator=(class DirectUI::Expandable const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::PushButton::EnforceSizeProp(void)",
    "public: static void __stdcall DirectUI::Selector::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static int DirectUI::Schema::ComboBoxControlType",
    "public: class DirectUI::LinkedList & __thiscall DirectUI::LinkedList::operator=(class DirectUI::LinkedList const &)",
    "public: __thiscall DirectUI::CCListBox::CCListBox(void)",
    "public: static long __stdcall DirectUI::ScrollViewer::Register(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseIntValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: __thiscall DirectUI::GridLayout::GridLayout(class DirectUI::GridLayout const &)",
    "public: __thiscall DirectUI::AutoVariant::AutoVariant(void)",
    "StartMessagePump",
    "public: __thiscall DirectUI::RadioButtonGlyph::RadioButtonGlyph(class DirectUI::RadioButtonGlyph const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccHelpProp(void)",
    "public: long __thiscall DirectUI::Element::SetBorderStyle(int)",
    "private: static struct DirectUI::IClassInfo * DirectUI::ElementWithHWND::s_pClassInfo",
    "protected: virtual void __thiscall DirectUI::CCTrackBar::PostCreate(struct HWND__ *)",
    "public: long __thiscall DirectUI::NativeHWNDHost::Initialize(unsigned short const *,unsigned short const *,struct HWND__ *,struct HICON__ *,int,int,int,int,int,int,struct HINSTANCE__ *,unsigned int)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::ContextSensitiveHelp(int)",
    "private: static long __stdcall DirectUI::Value::StrDupW(unsigned short const *,unsigned short * *)",
    "protected: virtual bool __thiscall DirectUI::TaskPage::OnListenedPropertyChanging(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static long __stdcall DirectUI::CheckBoxGlyph::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "private: int __thiscall DirectUI::TaskPage::OnWndMsg(unsigned int,unsigned int,long,long *)",
    "public: static long (__stdcall* DirectUI::Schema::UiaHostProviderFromHwnd)(struct HWND__ *,struct IRawElementProviderSimple * *)",
    "public: static long __stdcall DirectUI::CCListView::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::TableProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: static int DirectUI::Schema::Scroll_VerticalScrollPercent_Property",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ScrollBar::LineProp(void)",
    "const DirectUI::ScrollBarRangeValueProxy::`vftable'",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseMagnitude(unsigned short const *,int *)",
    "public: static long __stdcall DirectUI::CCSysLink::Register(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCCheckBox::GetClassInfoW(void)",
    "const DirectUI::HWNDHostAccessible::`vftable'{for `IOleWindow'}",
    "public: void __thiscall DirectUI::Element::InvokeAnimation(unsigned int,unsigned int,float,float,bool)",
    "public: long __thiscall DirectUI::Element::SetFontQuality(int)",
    "const DirectUI::Repeater::`vftable'",
    "public: long __thiscall DirectUI::Element::SetValue(struct DirectUI::PropertyInfo const * (__stdcall*)(void),int,class DirectUI::Value *)",
    "public: virtual __thiscall DirectUI::FillLayout::~FillLayout(void)",
    "public: long __thiscall DirectUI::Element::SetBorderColor(unsigned long)",
    "public: virtual bool __thiscall DirectUI::CCBase::OnCustomDraw(struct tagNMCUSTOMDRAWINFO *,long *)",
    "public: __thiscall DirectUI::Layout::Layout(void)",
    "public: long __thiscall DirectUI::CCPushButton::SetOverrideButtonBackground(bool)",
    "public: __thiscall DirectUI::ProgressRangeValueProxy::ProgressRangeValueProxy(void)",
    "public: long __thiscall DirectUI::Element::SetWindowActive(bool)",
    "public: virtual unsigned long __stdcall DirectUI::RangeValueProvider::Release(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Macro::GetClassInfoPtr(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::AutoStopProp(void)",
    "private: static class DirectUI::UiaArray * DirectUI::InvokeManager::g_pArrayInvokeHelper",
    "const DirectUI::Thumb::`vftable'",
    "public: static void __stdcall DirectUI::CCListBox::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::NineGridLayout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "protected: virtual void __thiscall DirectUI::BrowserSelectionProxy::Init(class DirectUI::Element *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Bind::GetClassInfoW(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetRectZero(void)",
    "public: static int DirectUI::Schema::PaneControlType",
    "public: class DirectUI::ScrollProxy & __thiscall DirectUI::ScrollProxy::operator=(class DirectUI::ScrollProxy const &)",
    "public: long __thiscall DirectUI::DialogElement::SetDefaultButtonTracking(bool)",
    "public: static int DirectUI::Schema::SliderControlType",
    "public: virtual long __stdcall DirectUI::GridItemProvider::get_RowSpan(int *)",
    "public: virtual __thiscall DirectUI::TextGraphic::~TextGraphic(void)",
    "public: __thiscall DirectUI::HWNDElementAccessible::HWNDElementAccessible(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ShadowIntensityProp(void)",
    "public: long __thiscall DirectUI::Movie::LoadFromResource(struct HINSTANCE__ *,int)",
    "public: bool __thiscall DirectUI::Element::HasBorder(void)",
    "public: long __thiscall DirectUI::CCTrackBar::SetThumbPosition(int)",
    "const DirectUI::SelectionItemProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "protected: virtual void __thiscall DirectUI::ToggleProxy::Init(class DirectUI::Element *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ParentProp(void)",
    "public: static long __stdcall DirectUI::PatternProvider::Create(class DirectUI::ElementProvider *,struct IUnknown * *)",
    "public: static void __stdcall DirectUI::Element::InitDefaultFontSize(void)",
    "private: void __thiscall DirectUI::AnimationStrip::UnloadCommonControlExports(void)",
    "protected: long __thiscall DirectUI::Element::_SetValue(struct DirectUI::PropertyInfo const * (__stdcall*)(void),int,class DirectUI::Value *,bool)",
    "public: virtual bool __thiscall DirectUI::Viewer::EnsureVisible(int,int,int,int)",
    "public: long __thiscall DirectUI::HWNDElementAccessible::Initialize(class DirectUI::HWNDElement *)",
    "public: __thiscall DirectUI::Layout::Layout(class DirectUI::Layout const &)",
    "public: class DirectUI::HWNDElement & __thiscall DirectUI::HWNDElement::operator=(class DirectUI::HWNDElement const &)",
    "protected: static long __stdcall DirectUI::DUIXmlParser::GetXmlLiteDll(struct HINSTANCE__ * *)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accChild(struct tagVARIANT,struct IDispatch * *)",
    "public: static long __stdcall DirectUI::NativeHWNDHost::Create(unsigned short const *,unsigned short const *,struct HWND__ *,struct HICON__ *,int,int,int,int,int,int,struct HINSTANCE__ *,unsigned int,class DirectUI::NativeHWNDHost * *)",
    "public: long __thiscall DirectUI::Button::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: long __thiscall DirectUI::Element::Remove(class DirectUI::Element *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCProgressBar::s_pClassInfo",
    "private: static unsigned int const DirectUI::InvokeHelper::s_uInvokeHelperMsg",
    "public: static int DirectUI::Schema::Scroll_VerticallyScrollable_Property",
    "private: long __thiscall DirectUI::SelectorSelectionItemProxy::GetSelectionContainer(struct IRawElementProviderSimple * *)",
    "public: static int DirectUI::Schema::TreeControlType",
    "public: int __thiscall DirectUI::CallstackTracker::CaptureCallstackFrames(void)",
    "public: virtual bool __thiscall DirectUI::XBaby::OnChildLostFocus(class DirectUI::Element *)",
    "public: virtual void __thiscall DirectUI::CCSysLink::OnInput(struct DirectUI::InputEvent *)",
    "public: long __thiscall DirectUI::Element::SetBorderStdColor(int)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::GridLayout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: virtual long __thiscall DirectUI::ScrollBar::SetMaximum(int)",
    "public: long __thiscall DirectUI::Button::SetPressed(bool)",
    "public: bool __thiscall DirectUI::Element::HasPadding(void)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::ShellBorderLayout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "private: static struct DirectUI::IClassInfo * DirectUI::AccessibleButton::s_pClassInfo",
    "public: long __thiscall DirectUI::CheckBoxGlyph::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: void __thiscall DirectUI::HWNDElement::SetParentSizeControl(bool)",
    "public: static class UID __stdcall DirectUI::Edit::Enter(void)",
    "GetScreenDPI",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::DialogElement::RegisteredDefaultButtonProp(void)",
    "public: class DirectUI::StyleSheet & __thiscall DirectUI::StyleSheet::operator=(class DirectUI::StyleSheet const &)",
    "public: bool __thiscall DirectUI::Element::HasMargin(void)",
    "public: virtual long __stdcall DirectUI::ExpandCollapseProvider::get_ExpandCollapseState(enum ExpandCollapseState *)",
    "public: class DirectUI::Value * __thiscall DirectUI::Element::GetValue(struct DirectUI::PropertyInfo const * (__stdcall*)(void),int,struct DirectUI::UpdateCache *)",
    "public: long __thiscall DirectUI::Element::SetAccDefAction(unsigned short const *)",
    "public: static int DirectUI::Schema::ValuePattern",
    "public: virtual void __thiscall DirectUI::Selector::OnKeyFocusMoved(class DirectUI::Element *,class DirectUI::Element *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::DialogElement::GetClassInfoW(void)",
    "const DirectUI::DuiAccessible::`vftable'{for `IOleWindow'}",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCRadioButton::GetClassInfoW(void)",
    "private: static bool __stdcall DirectUI::ElementProviderManager::FindProviderCallback(class DirectUI::ElementProvider *,void *)",
    "public: static long __stdcall DirectUI::NativeHWNDHost::Create(unsigned short const *,struct HWND__ *,struct HICON__ *,int,int,int,int,int,int,unsigned int,class DirectUI::NativeHWNDHost * *)",
    "protected: __thiscall DirectUI::SelectionProxy::SelectionProxy(void)",
    "protected: long __thiscall DirectUI::ElementProxy::GetBoundingRect(struct UiaRect *)",
    "public: bool __thiscall DirectUI::Movie::GetRepeat(void)",
    "public: long __thiscall DirectUI::Element::GetRootRelativeBounds(struct tagRECT *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCCommandLink::GetClassInfoPtr(void)",
    "const DirectUI::FontCache::`vftable'",
    "public: static int DirectUI::Schema::HasKeyboardFocusProperty",
    "public: bool __thiscall DirectUI::Element::IsDefaultCAlign(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Combobox::GetClassInfoPtr(void)",
    "public: unsigned short const * __thiscall DirectUI::Bind::GetConnect(class DirectUI::Value * *)",
    "public: virtual void __thiscall DirectUI::BaseScrollViewer::OnListenedPropertyChanged(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static int DirectUI::Schema::GridItem_RowSpan_Property",
    "public: bool __thiscall DirectUI::Element::GetAbsorbsShortcut(void)",
    "public: static long __stdcall DirectUI::Bind::Register(void)",
    "const DirectUI::ProgressRangeValueProxy::`vftable'",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCBaseScrollBar::LineProp(void)",
    "public: long __thiscall DirectUI::Element::SetAnimation(int)",
    "public: static long __stdcall DirectUI::XBaby::Create(class DirectUI::IXElementCP *,class DirectUI::XProvider *,struct HWND__ *,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: __thiscall DirectUI::LinkedList::~LinkedList(void)",
    "public: static void __stdcall DirectUI::Movie::RawActionProc(struct GMA_ACTIONINFO *)",
    "public: virtual int __thiscall DirectUI::ScrollBar::GetLine(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Repeater::s_pClassInfo",
    "public: void __thiscall DirectUI::Value::AddRef(void)",
    "RegisterXControls",
    "public: long __thiscall DirectUI::Progress::SetMinimum(int)",
    "public: static int DirectUI::Schema::RangeValue_LargeChange_Property",
    "public: unsigned short const * __thiscall DirectUI::Navigator::GetTargetPage(class DirectUI::Value * *)",
    "public: virtual long __stdcall DirectUI::TableItemProvider::GetRowHeaderItems(struct tagSAFEARRAY * *)",
    "public: int __thiscall DirectUI::Element::GetWidth(void)",
    "public: static int DirectUI::Schema::TextControlType",
    "public: static int DirectUI::Schema::RangeValue_IsReadOnly_Property",
    "public: bool __thiscall DirectUI::Element::GetWindowActive(void)",
    "public: void __thiscall DirectUI::NativeHWNDHost::HideWindow(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccItemStatusProp(void)",
    "StopMessagePump",
    "private: void __thiscall DirectUI::InvokeHelper::OnInvoke(struct DirectUI::InvokeHelper::InvokeArgs *)",
    "private: class DirectUI::Element * __thiscall DirectUI::Element::FindDescendentWorker(unsigned short)",
    "public: __thiscall DirectUI::UnknownElement::UnknownElement(void)",
    "public: long __thiscall DirectUI::BaseScrollViewer::SetYScrollable(bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCBaseScrollBar::MaximumProp(void)",
    "public: virtual long __stdcall DirectUI::ElementProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: long __thiscall DirectUI::Element::SetActive(int)",
    "public: virtual long __stdcall DirectUI::XProvider::SetParameter(struct _GUID const &,void *)",
    "public: __thiscall DirectUI::ScrollViewer::ScrollViewer(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateSize(int,int)",
    "public: long __thiscall DirectUI::DUIXmlParser::LookupElement(struct IXmlReader *,unsigned short const *,struct HINSTANCE__ *,struct DirectUI::IClassInfo * *)",
    "public: static int DirectUI::Schema::TableItemPattern",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ActiveProp(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::XElement::GetClassInfoW(void)",
    "public: int __thiscall DirectUI::CCTrackBar::GetRangeMax(void)",
    "const DirectUI::XProvider::`vftable'",
    "public: long __thiscall DirectUI::CCCommandLink::SetNote(unsigned short const *)",
    "public: long __thiscall DirectUI::Element::SetAccRole(int)",
    "public: long __thiscall DirectUI::RadioButtonGlyph::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: __thiscall DirectUI::StyledScrollViewer::StyledScrollViewer(class DirectUI::StyledScrollViewer const &)",
    "public: static bool __stdcall DirectUI::Element::IsValidValue(struct DirectUI::PropertyInfo const *,class DirectUI::Value *)",
    "protected: virtual long __thiscall DirectUI::ScrollBar::CreateButtons(void)",
    "public: static long __stdcall DirectUI::XBaby::Register(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::HWNDHost::BackgroundOwnerIDProp(void)",
    "protected: long __thiscall DirectUI::ElementProxy::GetContent(struct tagVARIANT *,struct IAccessible *)",
    "protected: virtual void __thiscall DirectUI::Element::_SelfLayoutDoLayout(int,int)",
    "public: static long __stdcall DirectUI::TableLayout::InternalCreate(int,int,int,int *,class DirectUI::Layout * *)",
    "public: static bool __stdcall DirectUI::TableItemProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::AnimationStrip::SetFrameWidth(int)",
    "public: static int DirectUI::Schema::TogglePattern",
    "public: class DirectUI::ElementProviderManager & __thiscall DirectUI::ElementProviderManager::operator=(class DirectUI::ElementProviderManager const &)",
    "public: unsigned short const * __thiscall DirectUI::Macro::GetExpand(class DirectUI::Value * *)",
    "public: virtual bool __thiscall DirectUI::Element::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCVScrollBar::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: long __thiscall DirectUI::Element::SetBackgroundColor(unsigned short const *,int,int)",
    "public: int __thiscall DirectUI::BaseScrollViewer::GetPinning(void)",
    "public: int __thiscall DirectUI::Element::GetTooltipMaxWidth(void)",
    "public: long __thiscall DirectUI::ClassInfoBase::Register(void)",
    "public: static void __stdcall DirectUI::Pages::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "protected: long __thiscall DirectUI::ElementProxy::GetProviderOptions(enum ProviderOptions *)",
    "public: __thiscall DirectUI::ClassInfoBase::ClassInfoBase(void)",
    "public: bool __thiscall DirectUI::Element::IsDefaultCursor(void)",
    "public: virtual long __thiscall DirectUI::TableItemProxy::DoMethod(int,char *)",
    "public: bool __thiscall DirectUI::Value::IsEqual(class DirectUI::Value *)",
    "public: class DirectUI::CCBaseCheckRadioButton & __thiscall DirectUI::CCBaseCheckRadioButton::operator=(class DirectUI::CCBaseCheckRadioButton const &)",
    "public: long __thiscall DirectUI::Element::SetLayout(class DirectUI::Layout *)",
    "public: virtual unsigned long __stdcall DirectUI::ScrollItemProvider::AddRef(void)",
    "public: void __thiscall DirectUI::Element::InvokeAnimation(int,unsigned int)",
    "public: static void __stdcall DirectUI::Repeater::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: long __thiscall DirectUI::DialogElement::SetHandleEnterKey(bool)",
    "public: unsigned int __thiscall DirectUI::Pages::GetCount(void)",
    "public: struct DirectUI::AccessibleButton::ACCESSIBLEROLE & __thiscall DirectUI::AccessibleButton::ACCESSIBLEROLE::operator=(struct DirectUI::AccessibleButton::ACCESSIBLEROLE const &)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::ElementWithHWND::GetClassInfoPtr(void)",
    "public: virtual long __thiscall DirectUI::ScrollBar::SetPage(int)",
    "public: bool __thiscall DirectUI::Element::IsWordWrap(void)",
    "public: void __thiscall DirectUI::HWNDElement::SetFocus(bool)",
    "public: long __thiscall DirectUI::Element::SortChildren(int (__cdecl*)(void const *,void const *))",
    "public: virtual __thiscall DirectUI::CCTreeView::~CCTreeView(void)",
    "public: long __thiscall DirectUI::DialogElement::SetButtonClassAcceptsEnterKey(bool)",
    "public: __thiscall DirectUI::TaskPage::TaskPage(class DirectUI::TaskPage const &)",
    "public: static int DirectUI::Schema::GridItem_Row_Property",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::TableProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: int __thiscall DirectUI::ScrollBar::GetOrder(void)",
    "protected: long __thiscall DirectUI::DuiAccessible::GetDispatchFromElement(class DirectUI::Element *,struct IDispatch * *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Clipper::GetClassInfoPtr(void)",
    "public: __thiscall DirectUI::AutoLock::~AutoLock(void)",
    "public: virtual int __thiscall DirectUI::ScrollBar::GetMaximum(void)",
    "UnInitThread",
    "public: __thiscall DirectUI::Progress::Progress(void)",
    "public: long __thiscall DirectUI::Movie::SetAutoStart(bool)",
    "public: virtual void __thiscall DirectUI::DialogElement::OnListenerAttach(class DirectUI::Element *)",
    "protected: void __thiscall DirectUI::Element::_OnFontPropChanged(class DirectUI::Value *)",
    "public: class DirectUI::Page & __thiscall DirectUI::Page::operator=(class DirectUI::Page const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::DesiredSizeProp(void)",
    "public: virtual __thiscall DirectUI::Element::~Element(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::accSelect(long,struct tagVARIANT)",
    "public: long __thiscall DirectUI::BaseScrollViewer::Initialize(class DirectUI::Element *,unsigned long *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCCommandLink::s_pClassInfo",
    "public: long __thiscall DirectUI::AnimationStrip::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::GetTypeInfo(unsigned int,unsigned long,struct ITypeInfo * *)",
    "public: virtual __thiscall DirectUI::PatternProvider::~PatternProvider(void)",
    "public: long __thiscall DirectUI::Bind::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: virtual void __thiscall DirectUI::HWNDHost::OnWindowStyleChanged(unsigned int,struct tagSTYLESTRUCT const *)",
    "private: static int __stdcall DirectUI::CallstackTracker::InitFailed(void)",
    "public: class DirectUI::CCRadioButton & __thiscall DirectUI::CCRadioButton::operator=(class DirectUI::CCRadioButton const &)",
    "public: virtual __thiscall DirectUI::GridItemProvider::~GridItemProvider(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateAtom(unsigned short)",
    "public: __thiscall DirectUI::Surface::Surface(class DirectUI::Surface const &)",
    "public: virtual bool __thiscall DirectUI::Element::IsContentProtected(void)",
    "public: static int DirectUI::Schema::SplitButtonControlType",
    "public: virtual void __thiscall DirectUI::Combobox::OnHosted(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::Element::SetBorderGradientColor(unsigned long,unsigned long,unsigned char)",
    "public: class DirectUI::VerticalFlowLayout & __thiscall DirectUI::VerticalFlowLayout::operator=(class DirectUI::VerticalFlowLayout const &)",
    "public: static int DirectUI::Schema::CheckBoxControlType",
    "public: virtual long __stdcall DirectUI::DuiAccessible::ContextSensitiveHelp(int)",
    "private: void __thiscall DirectUI::Movie::advanceFrameActionStop(void)",
    "public: static void __stdcall DirectUI::AnimationStrip::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: __thiscall DirectUI::Page::Page(class DirectUI::Page const &)",
    "public: __thiscall DirectUI::CCTrackBar::CCTrackBar(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accRole(struct tagVARIANT,struct tagVARIANT *)",
    "private: virtual long __thiscall DirectUI::TaskPage::CreateParserCP(class DirectUI::DUIXmlParser * *)",
    "public: __thiscall DirectUI::HWNDHostAccessible::HWNDHostAccessible(void)",
    "public: long __thiscall DirectUI::RepeatButton::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: virtual __thiscall DirectUI::GridProvider::~GridProvider(void)",
    "public: virtual void __thiscall DirectUI::BaseScrollBar::PageUp(unsigned int)",
    "public: static long __stdcall DirectUI::Expando::Register(void)",
    "public: virtual __thiscall DirectUI::CCProgressBar::~CCProgressBar(void)",
    "public: int __thiscall DirectUI::FlowLayout::GetLine(class DirectUI::Element *,class DirectUI::Element *)",
    "public: int __thiscall DirectUI::Element::GetForegroundStdColor(void)",
    "public: struct tagSIZE const * __thiscall DirectUI::Element::GetMinSize(class DirectUI::Value * *)",
    "public: __thiscall DirectUI::CCBaseScrollBar::CCBaseScrollBar(unsigned long)",
    "public: static void __stdcall DirectUI::Expando::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual long __stdcall DirectUI::ElementProvider::GetPropertyValue(int,struct tagVARIANT *)",
    "public: __thiscall DirectUI::Clipper::Clipper(class DirectUI::Clipper const &)",
    "public: static long __stdcall DirectUI::RepeatButton::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::accDoDefaultAction(struct tagVARIANT)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnThemeChanged(struct DirectUI::ThemeChangedEvent *)",
    "public: void __thiscall DirectUI::NineGridLayout::Initialize(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Clipper::GetClassInfoW(void)",
    "protected: int __thiscall DirectUI::ElementProxy::_UsesUIAProxies(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::Clone(struct IEnumVARIANT * *)",
    "public: static void __stdcall DirectUI::CCBaseScrollBar::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: void __thiscall DirectUI::CCBase::SetNotifyHandler(int (__stdcall*)(unsigned int,unsigned int,long,long *,void *),void *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseDFCFill(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: static int DirectUI::Schema::MenuClosedEvent",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Progress::MaximumProp(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseGraphicHelper(bool,struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "private: static void * DirectUI::CallstackTracker::s_hProcess",
    "private: static struct DirectUI::IClassInfo * DirectUI::ScrollViewer::s_pClassInfo",
    "public: static class UID __stdcall DirectUI::Browser::Entered(void)",
    "public: static int DirectUI::Schema::NullControlType",
    "protected: long __thiscall DirectUI::DUIXmlParser::GetValueParser(class DirectUI::ParserTools::ValueParser * *)",
    "public: void __thiscall DirectUI::Element::RemoveListener(struct DirectUI::IElementListener *)",
    "private: static int DirectUI::CallstackTracker::s_fInitFailed",
    "public: class DirectUI::UnknownElement & __thiscall DirectUI::UnknownElement::operator=(class DirectUI::UnknownElement const &)",
    "public: bool __thiscall DirectUI::Movie::GetAutoStop(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accHelpTopic(unsigned short * *,struct tagVARIANT,long *)",
    "public: virtual long __thiscall DirectUI::Element::GetAccessibleImpl(struct IAccessible * *)",
    "public: static int DirectUI::Schema::DataGridControlType",
    "public: virtual long __stdcall DirectUI::DuiAccessible::GetTypeInfoCount(unsigned int *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseRect(struct DirectUI::ParserTools::ExprNode const *,struct tagRECT *)",
    "public: virtual long __thiscall DirectUI::Element::Insert(class DirectUI::Element * *,unsigned int,unsigned int)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseDTBFill(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetBoolFalse(void)",
    "public: static long __stdcall DirectUI::CCRadioButton::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual bool __thiscall DirectUI::HWNDHost::OnCtrlThemeChanged(unsigned int,unsigned int,long,long *)",
    "public: __thiscall DirectUI::Movie::Movie(void)",
    "public: virtual long __thiscall DirectUI::NativeHWNDHost::OnMessage(unsigned int,unsigned int,long,long *)",
    "private: long __thiscall DirectUI::SelectorSelectionProxy::GetIsSelectionRequired(int *)",
    "public: static long __stdcall DirectUI::FontCache::InitProcess(void)",
    "public: __thiscall DirectUI::XProvider::XProvider(class DirectUI::XProvider const &)",
    "public: static long __stdcall DirectUI::PushButton::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual __thiscall DirectUI::VerticalFlowLayout::~VerticalFlowLayout(void)",
    "public: void __thiscall DirectUI::DUIXmlParser::EnableDesignMode(void)",
    "public: static void __stdcall DirectUI::Element::_AddDependency(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,struct DirectUI::DepRecs *,class DirectUI::DeferCycle *,long *)",
    "const DirectUI::RefPointElement::`vftable'",
    "public: virtual bool __thiscall DirectUI::CCBase::OnNotify(unsigned int,unsigned int,long,long *)",
    "const DirectUI::ExpandCollapseProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::ScrollBar::GetClassInfoW(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::RefPointElement::ReferencePointProp(void)",
    "public: void __thiscall DirectUI::CCBaseScrollBar::`default constructor closure'(void)",
    "public: static class UID __stdcall DirectUI::XElement::UnhandledSyschar(void)",
    "public: virtual long __stdcall DirectUI::ScrollProvider::SetScrollPercent(double,double)",
    "public: class DirectUI::Element * __thiscall DirectUI::Element::GetMouseWithinChild(void)",
    "public: static void __stdcall DirectUI::TextGraphic::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static long __stdcall DirectUI::Selector::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static int DirectUI::Schema::StatusBarControlType",
    "public: class DirectUI::InvokeProxy & __thiscall DirectUI::InvokeProxy::operator=(class DirectUI::InvokeProxy const &)",
    "private: static class DirectUI::UiaArray * DirectUI::EventManager::g_pArrayPropertyEvent",
    "public: virtual void __thiscall DirectUI::Element::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "RegisterStandardControls",
    "public: static long __stdcall DirectUI::Element::_DisplayNodeCallback(struct HGADGET__ *,void *,struct EventMsg *)",
    "public: static class DirectUI::SelectionItemProxy * __stdcall DirectUI::SelectionItemProxy::Create(class DirectUI::Element *)",
    "public: virtual __thiscall DirectUI::ExpandoButtonGlyph::~ExpandoButtonGlyph(void)",
    "public: static int __stdcall DirectUI::Schema::LookupAccessibleRole(int,bool *)",
    "public: virtual long __thiscall DirectUI::DuiAccessible::Disconnect(void)",
    "InitThread",
    "const DirectUI::ElementProvider::`vftable'{for `IRawElementProviderSimple'}",
    "private: static long __stdcall DirectUI::EventManager::HandleAccPatternChange(class DirectUI::Element *,struct IRawElementProviderSimple *,unsigned int,unsigned int,int,struct tagVARIANT *,struct tagVARIANT *,void (__stdcall*)(struct tagVARIANT *))",
    "public: static long __stdcall DirectUI::FillLayout::Create(class DirectUI::Layout * *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Element::GetClassInfoPtr(void)",
    "public: __thiscall DirectUI::Page::Page(void)",
    "public: __thiscall DirectUI::Macro::Macro(void)",
    "public: static class DirectUI::TableProxy * __stdcall DirectUI::TableProxy::Create(class DirectUI::Element *)",
    "public: virtual __thiscall DirectUI::Page::~Page(void)",
    "protected: virtual long __thiscall DirectUI::TaskPage::OnWizBack(void)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accChildCount(long *)",
    "public: static long __stdcall DirectUI::Button::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCAVI::GetClassInfoPtr(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ContentProp(void)",
    "public: virtual int __thiscall DirectUI::HWNDHost::OnAdjustWindowSize(int,int,unsigned int)",
    "public: static void __stdcall DirectUI::CCRadioButton::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "ColorFromEnumI",
    "public: static long __stdcall DirectUI::HWNDElement::Create(struct HWND__ *,bool,unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::AddRulesToStyleSheet(struct IXmlReader *,class DirectUI::StyleSheet *,unsigned short const *,class DirectUI::DynamicArray *,class DirectUI::DynamicArray *)",
    "protected: virtual class DirectUI::BaseScrollBar * __thiscall DirectUI::StyledScrollViewer::GetVScroll(void)",
    "public: long __thiscall DirectUI::Element::SetAccValue(unsigned short const *)",
    "private: void __thiscall DirectUI::Element::_BroadcastEventWorker(struct DirectUI::Event *)",
    "protected: virtual long __thiscall DirectUI::TaskPage::OnReset(void)",
    "public: bool __thiscall DirectUI::CCRadioButton::GetAutoGrouping(void)",
    "public: void __thiscall DirectUI::Element::UpdateLayout(void)",
    "public: virtual long __stdcall DirectUI::SelectionProvider::QueryInterface(struct _GUID const &,void * *)",
    "private: static void __stdcall DirectUI::TaskPage::StaticXmlParserError(unsigned short const *,unsigned short const *,int,void *)",
    "public: unsigned short __thiscall DirectUI::HWNDHost::GetBackgroundOwnerID(void)",
    "public: virtual struct tagSIZE __thiscall DirectUI::VerticalFlowLayout::UpdateDesiredSize(class DirectUI::Element *,int,int,class DirectUI::Surface *)",
    "private: static long __stdcall DirectUI::EventManager::HandleRangeValue(class DirectUI::Element *,struct IRawElementProviderSimple *,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static long __stdcall DirectUI::DialogElement::Register(void)",
    "public: static long __stdcall DirectUI::Repeater::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccValueProp(void)",
    "public: static int DirectUI::Schema::HelpTextProperty",
    "public: unsigned short const * __thiscall DirectUI::Element::GetAccDesc(class DirectUI::Value * *)",
    "public: virtual void __thiscall DirectUI::XBaby::OnThemeChanged(struct DirectUI::ThemeChangedEvent *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::CreateLayout(struct DirectUI::ParserTools::ExprNode const *,long (__stdcall*)(int,int *,class DirectUI::Value * *))",
    "public: void __thiscall DirectUI::CCCheckBox::`default constructor closure'(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::accLocation(long *,long *,long *,long *,struct tagVARIANT)",
    "public: static int DirectUI::Schema::VirtualizedItemPattern",
    "public: virtual __thiscall DirectUI::HWNDHost::~HWNDHost(void)",
    "private: unsigned __int64 __thiscall DirectUI::CallstackTracker::GetModuleBase(void *,unsigned __int64)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateAtom(unsigned short const *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Expando::s_pClassInfo",
    "protected: void __thiscall DirectUI::HWNDHost::SyncParent(void)",
    "public: static long __stdcall DirectUI::CCCheckBox::Register(void)",
    "public: long __thiscall DirectUI::Element::Insert(class DirectUI::Element *,unsigned int)",
    "protected: virtual long __thiscall DirectUI::Repeater::BuildElement(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Expando::GetClassInfoPtr(void)",
    "public: class DirectUI::TaskPage & __thiscall DirectUI::TaskPage::operator=(class DirectUI::TaskPage const &)",
    "const DirectUI::Viewer::`vftable'",
    "protected: long __cdecl DirectUI::ElementProvider::DoInvoke(int,...)",
    "public: static long (__stdcall* DirectUI::Schema::UiaRaiseStructureChangedEvent)(struct IRawElementProviderSimple *,enum StructureChangeType,int *,int)",
    "public: void __thiscall DirectUI::Movie::Forward(void)",
    "public: static long __stdcall DirectUI::ScrollBar::Create(bool,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::PathProp(void)",
    "public: __thiscall DirectUI::InvokeHelper::InvokeHelper(void)",
    "public: bool __thiscall DirectUI::Element::GetMouseFocused(void)",
    "public: static long __stdcall DirectUI::BaseScrollViewer::Register(void)",
    "public: virtual long __stdcall DirectUI::ScrollProvider::get_HorizontalScrollPercent(double *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Button::GetClassInfoW(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Navigator::s_pClassInfo",
    "protected: static bool __stdcall DirectUI::HWNDElement::FindShortcutRecursive(unsigned short,class DirectUI::Element *,class DirectUI::Element * *,int *,int *,int)",
    "const DirectUI::GridProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "protected: virtual void __thiscall DirectUI::SelectorSelectionItemProxy::Init(class DirectUI::Element *)",
    "public: struct DirectUI::NavReference & __thiscall DirectUI::NavReference::operator=(struct DirectUI::NavReference const &)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCSysLink::GetClassInfoPtr(void)",
    "public: static bool __stdcall DirectUI::InvokeProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Progress::GetClassInfoPtr(void)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCCommandLink::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: unsigned short * __thiscall DirectUI::Value::ToString(unsigned short *,unsigned int)const",
    "private: static unsigned short DirectUI::Expando::_atmClipper",
    "public: static long __stdcall DirectUI::RefPointElement::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: class DirectUI::ResourceModuleHandles & __thiscall DirectUI::ResourceModuleHandles::operator=(class DirectUI::ResourceModuleHandles const &)",
    "public: static long __stdcall DirectUI::Navigator::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: __thiscall DirectUI::ExpandoButtonGlyph::ExpandoButtonGlyph(void)",
    "public: int __thiscall DirectUI::CCTrackBar::GetThumbPosition(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateGraphic(unsigned short const *,unsigned short,unsigned short,struct HINSTANCE__ *,bool,bool)",
    "public: bool __thiscall DirectUI::HWNDElement::ShowAccel(void)",
    "public: class DirectUI::DUIXmlParser & __thiscall DirectUI::DUIXmlParser::operator=(class DirectUI::DUIXmlParser const &)",
    "public: __thiscall DirectUI::GridItemProxy::GridItemProxy(class DirectUI::GridItemProxy const &)",
    "public: virtual __thiscall DirectUI::RefPointElement::~RefPointElement(void)",
    "public: static class DirectUI::ScrollProxy * __stdcall DirectUI::ScrollProxy::Create(class DirectUI::Element *)",
    "public: virtual void __thiscall DirectUI::Element::HandleUiaPropertyChangingListener(struct DirectUI::PropertyInfo const *)",
    "public: __thiscall DirectUI::IDataEntry::IDataEntry(struct DirectUI::IDataEntry const &)",
    "public: virtual long __thiscall DirectUI::CCBaseScrollBar::SetPage(int)",
    "public: struct HWND__ * __thiscall DirectUI::XElement::GetInnerHWND(void)",
    "public: static void __stdcall DirectUI::InvokeManager::Close(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateRect(int,int,int,int)",
    "public: __thiscall DirectUI::StyleSheet::StyleSheet(void)",
    "public: __thiscall DirectUI::Expando::Expando(void)",
    "const DirectUI::RadioButtonGlyph::`vftable'",
    "public: class DirectUI::Element * __thiscall DirectUI::NativeHWNDHost::GetElement(void)",
    "public: void __thiscall DirectUI::Movie::Resume(void)",
    "public: static long __stdcall DirectUI::CheckBoxGlyph::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "protected: __thiscall DirectUI::RangeValueProxy::RangeValueProxy(void)",
    "public: void __thiscall DirectUI::HWNDElement::ShowUIState(bool,bool)",
    "private: bool __thiscall DirectUI::Element::TryLinePattern(struct tagPOINT *,struct tagRECT const &)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Page::GetClassInfoPtr(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::DialogElement::DefaultButtonTrackingProp(void)",
    "public: virtual bool __thiscall DirectUI::HWNDHost::OnSinkThemeChanged(unsigned int,unsigned int,long,long *)",
    "const DirectUI::XBaby::`vftable'{for `DirectUI::IElementListener'}",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::CustomProp(void)",
    "public: struct DirectUI::IDataEngine & __thiscall DirectUI::IDataEngine::operator=(struct DirectUI::IDataEngine const &)",
    "const DirectUI::InvokeProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: void __thiscall DirectUI::NativeHWNDHost::Host(class DirectUI::Element *)",
    "public: virtual unsigned short const * __thiscall DirectUI::Edit::GetContentStringAsDisplayed(class DirectUI::Value * *)",
    "public: virtual long __stdcall DirectUI::XProvider::Navigate(int,bool *)",
    "const DirectUI::TableItemProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: virtual unsigned long __stdcall DirectUI::GridProvider::Release(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::ScrollViewer::GetClassInfoW(void)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::ExpandCollapseProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "private: bool __thiscall DirectUI::Viewer::InternalEnsureVisible(int,int,int,int)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::DialogElement::GetClassInfoPtr(void)",
    "public: virtual bool __thiscall DirectUI::CCBase::OnLostDialogFocus(class DirectUI::DialogElement *)",
    "public: long __thiscall DirectUI::Element::SetEncodedContentString(unsigned short const *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Edit::GetClassInfoPtr(void)",
    "public: virtual void __thiscall DirectUI::DialogElement::OnInput(struct DirectUI::InputEvent *)",
    "const DirectUI::TableProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: long __thiscall DirectUI::Element::SetOverhang(bool)",
    "public: void __thiscall DirectUI::Element::StartDefer(unsigned long *)",
    "public: __thiscall DirectUI::Repeater::Repeater(class DirectUI::Repeater const &)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::AccessibleButton::GetClassInfoPtr(void)",
    "public: static long __stdcall DirectUI::XHost::WndProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: virtual __thiscall DirectUI::HWNDHostAccessible::~HWNDHostAccessible(void)",
    "private: long __thiscall DirectUI::GridItemProxy::GetContainingGrid(struct IRawElementProviderSimple * *)",
    "const DirectUI::HWNDElementProvider::`vftable'{for `IRawElementProviderSimple'}",
    "public: unsigned short __thiscall DirectUI::Element::GetShortcutChar(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateDFCFill(unsigned int,unsigned int)",
    "RegisterMiscControls",
    "const DirectUI::TableItemProvider::`vftable'",
    "public: virtual int __thiscall DirectUI::Combobox::OnAdjustWindowSize(int,int,unsigned int)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::BaseScrollViewer::GetClassInfoW(void)",
    "public: long __thiscall DirectUI::Element::SetPadding(int,int,int,int)",
    "public: virtual long __stdcall DirectUI::ElementProvider::GetPatternProvider(int,struct IUnknown * *)",
    "public: __thiscall DirectUI::CCProgressBar::CCProgressBar(class DirectUI::CCProgressBar const &)",
    "public: static long __stdcall DirectUI::FlowLayout::Create(int,int *,class DirectUI::Value * *)",
    "DUIDrawShadowText",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetBoolTrue(void)",
    "private: static int const DirectUI::EventManager::cChangeBulk",
    "public: virtual void __thiscall DirectUI::CCPushButton::OnSelectedPropertyChanged(void)",
    "public: virtual void __thiscall DirectUI::Combobox::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: __thiscall DirectUI::RowLayout::RowLayout(class DirectUI::RowLayout const &)",
    "public: bool __thiscall DirectUI::DialogElement::GetDefaultButtonTracking(void)",
    "public: unsigned long __thiscall DirectUI::CCTreeView::SetStyle(unsigned long)",
    "public: virtual __thiscall DirectUI::DialogElement::~DialogElement(void)",
    "public: virtual void __thiscall DirectUI::CCBase::OnInput(struct DirectUI::InputEvent *)",
    "private: void __thiscall DirectUI::DUIFactory::ClearParser(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::PaddingProp(void)",
    "private: int __thiscall DirectUI::Element::_CachedValueIsEqual(struct DirectUI::PropertyInfo const *,class DirectUI::Element *)",
    "const DirectUI::BaseScrollViewer::`vftable'{for `DirectUI::Element'}",
    "protected: virtual void __thiscall DirectUI::GridProxy::Init(class DirectUI::Element *)",
    "public: static void __stdcall DirectUI::AutoButton::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "const DirectUI::GridProvider::`vftable'",
    "protected: static struct DirectUI::DUIXmlParser::FunctionDefinition const * const DirectUI::DUIXmlParser::s_fdClr",
    "public: virtual __thiscall DirectUI::ScrollBar::~ScrollBar(void)",
    "public: long __thiscall DirectUI::Element::SetDirection(int)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseSizeValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::FontWeightProp(void)",
    "public: static int DirectUI::Schema::ListControlType",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Selector::GetClassInfoPtr(void)",
    "public: virtual long __stdcall DirectUI::RangeValueProvider::get_IsReadOnly(int *)",
    "public: virtual bool __thiscall DirectUI::Element::GetKeyFocused(void)",
    "private: bool __thiscall DirectUI::HWNDHost::HaveWin32Focus(void)",
    "public: static int __stdcall DirectUI::CallstackTracker::Init(void)",
    "public: virtual void __thiscall DirectUI::Macro::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static long __stdcall DirectUI::RowLayout::Create(int,unsigned int,unsigned int,class DirectUI::Layout * *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::BorderLayout::UpdateDesiredSize(class DirectUI::Element *,int,int,class DirectUI::Surface *)",
    "protected: void __thiscall DirectUI::Macro::ResolveBindings(void)",
    "public: static void __stdcall DirectUI::AccessibleButton::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: void __thiscall DirectUI::Element::FireEvent(struct DirectUI::Event *,bool,bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::DPIProp(void)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::Skip(unsigned long)",
    "public: static long __stdcall DirectUI::HWNDHost::Create(unsigned int,unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::XElement::s_pClassInfo",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::RefPointElement::ActualReferencePointProp(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::GetPropValPairInfo(struct DirectUI::LINEINFO,struct DirectUI::IClassInfo *,unsigned short const *,unsigned short const *,struct DirectUI::PropertyInfo const * *,class DirectUI::Value * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseTheme(struct DirectUI::ParserTools::ExprNode const *,void * *)",
    "public: class DirectUI::CCCheckBox & __thiscall DirectUI::CCCheckBox::operator=(class DirectUI::CCCheckBox const &)",
    "public: __thiscall DirectUI::BaseScrollBar::BaseScrollBar(class DirectUI::BaseScrollBar const &)",
    "public: static void __stdcall DirectUI::ScrollViewer::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: void __thiscall DirectUI::Element::_UpdateLayoutPosition(int,int)",
    "public: __thiscall DirectUI::CCVScrollBar::CCVScrollBar(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::Initialize(void)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetFont(class DirectUI::Value * *)",
    "public: virtual long __stdcall DirectUI::RangeValueProvider::SetValue(double)",
    "protected: unsigned int __thiscall DirectUI::GridLayout::GetCurrentCols(int)",
    "public: virtual void __thiscall DirectUI::FillLayout::DoLayout(class DirectUI::Element *,int,int)",
    "GetElementMacro",
    "public: virtual long __stdcall DirectUI::ElementProvider::get_ProviderOptions(enum ProviderOptions *)",
    "public: static void __stdcall DirectUI::Viewer::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: struct DirectUI::Fill const * __thiscall DirectUI::Element::GetBorderColor(class DirectUI::Value * *)",
    "public: long __thiscall DirectUI::ScrollBar::Initialize(bool,class DirectUI::Element *,unsigned long *)",
    "public: static int DirectUI::Schema::IsOffscreen",
    "public: virtual long __stdcall DirectUI::RangeValueProvider::get_Value(double *)",
    "RegisterMacroControls",
    "public: virtual __thiscall DirectUI::BaseScrollViewer::~BaseScrollViewer(void)",
    "public: static long __stdcall DirectUI::EventManager::EventListener(class DirectUI::Element *,struct DirectUI::Event *)",
    "protected: long __thiscall DirectUI::DuiAccessible::GetAccNameFromContent(unsigned short * *)",
    "public: long __thiscall DirectUI::Element::SetBorderThickness(int,int,int,int)",
    "public: static bool __stdcall DirectUI::ClassInfoBase::ClassExist(struct DirectUI::IClassInfo * *,struct DirectUI::PropertyInfo const * const *,unsigned int,struct DirectUI::IClassInfo *,struct HINSTANCE__ *,unsigned short const *,bool)",
    "private: static long __stdcall DirectUI::EventManager::RaiseGeometryEvents(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::AutoButton::s_pClassInfo",
    "public: class DirectUI::AnimationStrip & __thiscall DirectUI::AnimationStrip::operator=(class DirectUI::AnimationStrip const &)",
    "public: void __thiscall DirectUI::XHost::DestroyWindow(void)",
    "const DirectUI::HWNDHostClientAccessible::`vftable'{for `IAccIdentity'}",
    "private: void __thiscall DirectUI::CallstackTracker::FillSymbolInfo(struct DirectUI::CallstackTracker::STACK_SYMBOL_INFO *,unsigned __int64)",
    "public: __thiscall DirectUI::CCPushButton::CCPushButton(class DirectUI::CCPushButton const &)",
    "public: bool __thiscall DirectUI::ScrollBar::GetVertical(void)",
    "public: long __thiscall DirectUI::Element::SetTooltip(bool)",
    "private: static int __stdcall DirectUI::CallstackTracker::DllsLoaded(void)",
    "public: virtual void __thiscall DirectUI::Layout::Attach(class DirectUI::Element *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::AutoButton::GetClassInfoPtr(void)",
    "public: __thiscall DirectUI::TableProxy::TableProxy(class DirectUI::TableProxy const &)",
    "PreprocessBuffer",
    "public: bool __thiscall DirectUI::Edit::GetDirty(void)",
    "protected: void __thiscall DirectUI::DUIXmlParser::ReturnValueParser(class DirectUI::ParserTools::ValueParser *)",
    "public: virtual void __thiscall DirectUI::ScrollViewer::OnListenedPropertyChanged(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "const DirectUI::XElement::`vftable'{for `DirectUI::HWNDHost'}",
    "public: virtual unsigned long __stdcall DirectUI::InvokeProvider::Release(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accSelection(struct tagVARIANT *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::XBaby::s_pClassInfo",
    "const DirectUI::Progress::`vftable'",
    "public: virtual long __thiscall DirectUI::SelectorSelectionProxy::DoMethod(int,char *)",
    "public: virtual void __thiscall DirectUI::TextGraphic::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Viewer::XOffsetProp(void)",
    "const DirectUI::GridItemProvider::`vftable'",
    "const DirectUI::ScrollViewer::`vftable'{for `DirectUI::IElementListener'}",
    "public: static int DirectUI::Schema::TitleBarControlType",
    "public: __thiscall DirectUI::CCPushButton::CCPushButton(unsigned long)",
    "public: virtual struct tagSIZE __thiscall DirectUI::TableLayout::UpdateDesiredSize(class DirectUI::Element *,int,int,class DirectUI::Surface *)",
    "public: virtual int __stdcall DirectUI::XProvider::FindElementWithShortcutAndDoDefaultAction(unsigned short,int)",
    "public: virtual long __stdcall DirectUI::HWNDElementAccessible::get_accParent(struct IDispatch * *)",
    "public: bool __thiscall DirectUI::Element::IsRTL(void)",
    "public: virtual bool __thiscall DirectUI::CheckBoxGlyph::OnReceivedDialogFocus(class DirectUI::DialogElement *)",
    "NotifyAccessibilityEvent",
    "protected: long __thiscall DirectUI::Element::_RemoveLocalValue(struct DirectUI::PropertyInfo const * (__stdcall*)(void),bool)",
    "private: void __thiscall DirectUI::Element::_GetBuriedSheetDependencies(struct DirectUI::PropertyInfo const *,class DirectUI::Element *,struct DirectUI::DepRecs *,class DirectUI::DeferCycle *,long *)",
    "public: struct HWND__ * __thiscall DirectUI::NativeHWNDHost::GetHWND(void)",
    "public: virtual unsigned long __stdcall DirectUI::ToggleProvider::Release(void)",
    "public: static long __stdcall DirectUI::CCCommandLink::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static long __stdcall DirectUI::Thumb::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: void __thiscall DirectUI::Movie::Pause(void)",
    "public: virtual __thiscall DirectUI::HWNDElement::~HWNDElement(void)",
    "protected: class DirectUI::Element * __thiscall DirectUI::HWNDHost::GetBackgroundOwner(void)",
    "public: virtual int __thiscall DirectUI::ScrollBar::GetMinimum(void)",
    "const DirectUI::HWNDHostClientAccessible::`vftable'{for `IOleWindow'}",
    "public: static long __stdcall DirectUI::BorderLayout::Create(int,int *,class DirectUI::Value * *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::RadioButtonGlyph::GetClassInfoW(void)",
    "const DirectUI::HWNDElementAccessible::`vftable'{for `IEnumVARIANT'}",
    "public: static long __stdcall DirectUI::Page::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: struct tagPOINT const * __thiscall DirectUI::RefPointElement::GetActualReferencePoint(class DirectUI::Value * *)",
    "public: virtual long __thiscall DirectUI::CCPushButton::DefaultAction(void)",
    "public: void __thiscall DirectUI::DUIXmlParser::_DestroyTables(void)",
    "public: __thiscall DirectUI::DUIFactory::DUIFactory(struct HWND__ *)",
    "public: virtual unsigned long __stdcall DirectUI::GridItemProvider::AddRef(void)",
    "public: long __thiscall DirectUI::Edit::SetWantTabs(bool)",
    "private: static long __stdcall DirectUI::EventManager::HandleSelectedChange(struct IRawElementProviderSimple *,class DirectUI::Value *)",
    "public: virtual __thiscall DirectUI::RepeatButton::~RepeatButton(void)",
    "public: class DirectUI::StyleSheet * __thiscall DirectUI::Element::GetSheet(void)",
    "public: virtual long __thiscall DirectUI::TableProxy::DoMethod(int,char *)",
    "const DirectUI::Navigator::`vftable'",
    "public: virtual void __thiscall DirectUI::ClassInfoBase::Destroy(void)",
    "public: virtual bool __thiscall DirectUI::HWNDHost::OnNotify(unsigned int,unsigned int,long,long *)",
    "public: virtual long __stdcall DirectUI::GridProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::Layout::UpdateDesiredSize(class DirectUI::Element *,int,int,class DirectUI::Surface *)",
    "public: static long __stdcall DirectUI::EventManager::OnToolTip(class DirectUI::Element *,unsigned long)",
    "public: __thiscall DirectUI::DUIXmlParser::DUIXmlParser(class DirectUI::DUIXmlParser const &)",
    "const DirectUI::SelectionItemProxy::`vftable'",
    "public: __thiscall DirectUI::FontCheckOut::~FontCheckOut(void)",
    "protected: virtual void __thiscall DirectUI::SelectionProxy::Init(class DirectUI::Element *)",
    "public: virtual unsigned long __stdcall DirectUI::SelectionProvider::Release(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::CreateXmlReader(struct IXmlReader * *)",
    "protected: virtual long __thiscall DirectUI::ScrollViewer::CreateScrollBars(void)",
    "public: static class UID __stdcall DirectUI::Movie::AdvanceFrame(void)",
    "public: bool __thiscall DirectUI::Element::GetMouseWithin(void)",
    "public: __thiscall DirectUI::TableItemProvider::TableItemProvider(void)",
    "public: static long __stdcall DirectUI::FillLayout::Create(int,int *,class DirectUI::Value * *)",
    "public: long __thiscall DirectUI::Element::DestroyAll(bool)",
    "const DirectUI::HWNDHost::`vftable'",
    "public: long __thiscall DirectUI::Element::SetAccDesc(unsigned short const *)",
    "public: __thiscall DirectUI::GridItemProxy::GridItemProxy(void)",
    "public: long __thiscall DirectUI::CCBase::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: virtual void __thiscall DirectUI::CCCommandLink::OnSelectedPropertyChanged(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCRadioButton::AutoGroupingProp(void)",
    "public: void __thiscall DirectUI::Element::PostEvent(struct DirectUI::Event *)",
    "InitPreprocessor",
    "public: static long __stdcall DirectUI::AccessibleButton::Register(void)",
    "public: static long __stdcall DirectUI::Progress::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: __thiscall DirectUI::HWNDHostClientAccessible::HWNDHostClientAccessible(void)",
    "public: __thiscall DirectUI::Expandable::Expandable(class DirectUI::Expandable const &)",
    "private: static struct DirectUI::IClassInfo * DirectUI::SelectorNoDefault::s_pClassInfo",
    "protected: virtual void __thiscall DirectUI::Element::ActivateTooltip(class DirectUI::Element *,unsigned long)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::AccessibleButton::GetClassInfoW(void)",
    "public: class DirectUI::EventManager & __thiscall DirectUI::EventManager::operator=(class DirectUI::EventManager const &)",
    "public: __thiscall DirectUI::CCRadioButton::CCRadioButton(void)",
    "private: static class DirectUI::InvokeHelper * __stdcall DirectUI::InvokeManager::FindInvokeHelper(unsigned int *)",
    "public: int __thiscall DirectUI::Element::GetBorderStyle(void)",
    "private: long __thiscall DirectUI::ValueProxy::SetValue(unsigned short const *)",
    "private: static struct DirectUI::Schema::PatternMap const * const DirectUI::Schema::g_patternMapping",
    "const DirectUI::HWNDHostAccessible::`vftable'{for `IServiceProvider'}",
    "public: __thiscall DirectUI::CCTreeView::CCTreeView(class DirectUI::CCTreeView const &)",
    "public: virtual long __stdcall DirectUI::TableProvider::GetColumnHeaders(struct tagSAFEARRAY * *)",
    "private: static long __stdcall DirectUI::EventManager::RaiseStructureEvents(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateColor(unsigned long)",
    "protected: virtual void __thiscall DirectUI::Element::RemoveTooltip(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::CCTrackBar::SetRangeMax(int)",
    "public: static unsigned int const DirectUI::XElement::s_uNavigateOutMsg",
    "public: static void __stdcall DirectUI::CCHScrollBar::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: long __thiscall DirectUI::Movie::SetAutoStop(bool)",
    "public: long __thiscall DirectUI::SafeArrayAccessor::Access(struct tagSAFEARRAY *,unsigned short)",
    "const DirectUI::SelectorNoDefault::`vftable'",
    "public: static long __stdcall DirectUI::CCRadioButton::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseSGraphicHelper(bool,struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: __thiscall DirectUI::TableLayout::TableLayout(class DirectUI::TableLayout const &)",
    "public: static int DirectUI::Schema::RangeValue_Minimum_Property",
    "protected: static long __stdcall DirectUI::HWNDHost::CtrlSubclassProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "protected: unsigned int __thiscall DirectUI::GridLayout::GetCurrentRows(int)",
    "public: long __thiscall DirectUI::DUIFactory::LoadFromFile(unsigned short const *,unsigned short const *,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual __thiscall DirectUI::CCRadioButton::~CCRadioButton(void)",
    "public: long __thiscall DirectUI::HWNDHost::SetBackgroundOwnerID(unsigned short const *)",
    "const DirectUI::BaseScrollBar::`vftable'",
    "public: __thiscall DirectUI::TableProvider::TableProvider(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_RecordSetElementProperties(struct IXmlReader *)",
    "public: long __thiscall DirectUI::Element::SetFont(unsigned short const *)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::FlowLayout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: virtual long __stdcall DirectUI::ElementProvider::AdviseEventAdded(int,struct tagSAFEARRAY *)",
    "public: int __thiscall DirectUI::Element::GetShadowIntensity(void)",
    "public: void __thiscall DirectUI::DUIXmlParser::SetUnknownAttrCallback(bool (__stdcall*)(unsigned short const *,void *),void *)",
    "public: static long __stdcall DirectUI::Element::UnRegister(struct DirectUI::IClassInfo * *)",
    "public: virtual bool __thiscall DirectUI::XElement::OnMessage(unsigned int,unsigned int,long,long *)",
    "public: virtual bool __thiscall DirectUI::HWNDHost::GetKeyFocused(void)",
    "BrushFromEnumI",
    "private: static bool DirectUI::EventManager::g_fWantAnyEvent",
    "public: long __thiscall DirectUI::ScrollBar::SetProportional(bool)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accHelp(struct tagVARIANT,unsigned short * *)",
    "public: static int DirectUI::Schema::ListItemControlType",
    "private: virtual void __thiscall DirectUI::TaskPage::DestroyCP(void)",
    "public: virtual unsigned long __stdcall DirectUI::TableItemProvider::Release(void)",
    "public: struct DirectUI::ISBLeak & __thiscall DirectUI::ISBLeak::operator=(struct DirectUI::ISBLeak const &)",
    "public: virtual struct DirectUI::PropertyInfo const * __thiscall DirectUI::ClassInfoBase::GetByClassIndex(unsigned int)",
    "public: class DirectUI::IXProviderCP & __thiscall DirectUI::IXProviderCP::operator=(class DirectUI::IXProviderCP const &)",
    "public: class DirectUI::CCHScrollBar & __thiscall DirectUI::CCHScrollBar::operator=(class DirectUI::CCHScrollBar const &)",
    "public: static void __stdcall DirectUI::CCProgressBar::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual __thiscall DirectUI::Progress::~Progress(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CheckBoxGlyph::GetClassInfoW(void)",
    "public: virtual bool __thiscall DirectUI::XElement::OnSysChar(unsigned short)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::HWNDElement::GetClassInfoW(void)",
    "public: static int DirectUI::Schema::ProcessIdProperty",
    "public: unsigned short __thiscall DirectUI::Value::GetAtom(void)",
    "const DirectUI::CCTrackBar::`vftable'",
    "public: void __thiscall DirectUI::Element::MapElementPoint(class DirectUI::Element *,struct tagPOINT const *,struct tagPOINT *)",
    "private: long __thiscall DirectUI::ScrollProxy::GetScrollable(bool,int *)",
    "public: static long __stdcall DirectUI::CCCommandLink::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static void __stdcall DirectUI::DialogElement::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: struct HINSTANCE__ * __thiscall DirectUI::DUIXmlParser::GetResourceHInstance(void)",
    "protected: long __thiscall DirectUI::TaskPage::PropSheet_SendMessage(unsigned int,unsigned int,long)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::XBaby::GetClassInfoPtr(void)",
    "protected: void __thiscall DirectUI::Expando::UpdateChildren(class DirectUI::Value *)",
    "public: void __thiscall DirectUI::HWNDElement::SetScreenCenter(bool)",
    "public: virtual __thiscall DirectUI::Button::~Button(void)",
    "public: void __thiscall DirectUI::Element::PaintStringContent(struct HDC__ *,struct tagRECT const *,class DirectUI::Value *,int)",
    "public: struct DirectUI::IXProvider * __thiscall DirectUI::XElement::GetProvider(void)",
    "protected: virtual long __thiscall DirectUI::CCTreeView::_OnItemChanged(struct tagTVITEMCHANGE const *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCVScrollBar::GetClassInfoW(void)",
    "public: static void __stdcall DirectUI::CCAVI::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: bool __thiscall DirectUI::Movie::GetDrawOutlines(void)",
    "public: virtual __thiscall DirectUI::RadioButtonGlyph::~RadioButtonGlyph(void)",
    "public: __thiscall DirectUI::HWNDHost::HWNDHost(class DirectUI::HWNDHost const &)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_RecordElementWithChildren(struct IXmlReader *,bool,unsigned short * *)",
    "public: static int DirectUI::Schema::HyperlinkControlType",
    "public: virtual long __thiscall DirectUI::ScrollBarRangeValueProxy::DoMethod(int,char *)",
    "public: static long __stdcall DirectUI::Proxy::SyncCallback(struct HGADGET__ *,void *,struct EventMsg *)",
    "public: static int DirectUI::Schema::Grid_RowCount_Property",
    "public: long __thiscall DirectUI::Button::SetCaptured(bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Combobox::SelectionProp(void)",
    "public: class DirectUI::Element * __thiscall DirectUI::Element::GetImmediateChild(class DirectUI::Element *)",
    "public: virtual void __thiscall DirectUI::SelectorNoDefault::OnEvent(struct DirectUI::Event *)",
    "public: __thiscall DirectUI::AnimationStrip::AnimationStrip(void)",
    "public: virtual void __thiscall DirectUI::Movie::Paint(struct HDC__ *,struct tagRECT const *,struct tagRECT const *,struct tagRECT *,struct tagRECT *)",
    "HStrDup",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::RadioButtonGlyph::GetClassInfoPtr(void)",
    "public: virtual long __thiscall DirectUI::CCBaseScrollBar::SetLine(int)",
    "public: virtual void __thiscall DirectUI::ScrollViewer::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static int DirectUI::Schema::RangeValue_Maximum_Property",
    "public: long __thiscall DirectUI::ScrollBar::SetVertical(bool)",
    "public: virtual void __thiscall DirectUI::Element::OnDestroy(void)",
    "public: static int DirectUI::Schema::Table_RowHeaders_Property",
    "protected: void __thiscall DirectUI::Layout::SetCacheDirty(void)",
    "public: int __thiscall DirectUI::Element::GetColorize(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accDefaultAction(struct tagVARIANT,unsigned short * *)",
    "private: static long volatile DirectUI::ResourceModuleHandles::g_cRefCount",
    "public: virtual bool __thiscall DirectUI::CCBaseScrollBar::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: long __thiscall DirectUI::Element::SetX(int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::BaseScrollViewer::XBarVisibilityProp(void)",
    "public: static long __stdcall DirectUI::HWNDElementAccessible::Create(class DirectUI::HWNDElement *,class DirectUI::DuiAccessible * *)",
    "const DirectUI::GridItemProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: static int DirectUI::Schema::WindowControlType",
    "private: long __thiscall DirectUI::ScrollProxy::SetScrollPercent(double,double)",
    "public: int __thiscall DirectUI::Element::_SetNeedsLayout(unsigned int)",
    "public: static int DirectUI::Schema::StructureChangedEvent",
    "public: static long __stdcall DirectUI::XResourceProvider::Create(struct HINSTANCE__ *,unsigned short const *,unsigned short const *,unsigned short const *,class DirectUI::XResourceProvider * *)",
    "public: class DirectUI::DCSurface & __thiscall DirectUI::DCSurface::operator=(class DirectUI::DCSurface const &)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Bind::s_pClassInfo",
    "public: bool __thiscall DirectUI::Element::EnsureVisible(void)",
    "public: static long __stdcall DirectUI::Pages::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual long __stdcall DirectUI::XProvider::IsDescendent(class DirectUI::Element *,bool *)",
    "public: void __thiscall DirectUI::XBaby::ForceThemeChange(unsigned int,long)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseGTMarRect(struct DirectUI::ParserTools::ExprNode const *,struct tagRECT *)",
    "public: virtual __thiscall DirectUI::ScrollProvider::~ScrollProvider(void)",
    "public: class DirectUI::ClassInfoBase & __thiscall DirectUI::ClassInfoBase::operator=(class DirectUI::ClassInfoBase const &)",
    "public: static void __stdcall DirectUI::CCTrackBar::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "const DirectUI::DialogElement::`vftable'{for `DirectUI::IElementListener'}",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Pages::GetClassInfoPtr(void)",
    "public: static int DirectUI::Schema::AutomationIdProperty",
    "public: __thiscall DirectUI::Button::Button(void)",
    "public: static int DirectUI::Schema::ExpandCollapsePattern",
    "private: long __thiscall DirectUI::SelectorSelectionItemProxy::AddToSelection(void)",
    "public: virtual void __thiscall DirectUI::HWNDHost::OnInput(struct DirectUI::InputEvent *)",
    "ProcessAlphaBitmapI",
    "public: virtual void __thiscall DirectUI::XElement::SetKeyFocus(void)",
    "public: virtual long __stdcall DirectUI::ToggleProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: static long __stdcall DirectUI::DuiAccessible::Create(class DirectUI::Element *,class DirectUI::DuiAccessible * *)",
    "public: static int DirectUI::Schema::CultureProperty",
    "public: struct DirectUI::IDataEntry * __thiscall DirectUI::Macro::GetDataEntry(void)",
    "public: static long __stdcall DirectUI::PText::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: __thiscall DirectUI::XProvider::XProvider(void)",
    "public: __thiscall DirectUI::ToggleProxy::ToggleProxy(class DirectUI::ToggleProxy const &)",
    "const DirectUI::Expando::`vftable'",
    "public: virtual __thiscall DirectUI::Macro::~Macro(void)",
    "public: static class DirectUI::ToggleProxy * __stdcall DirectUI::ToggleProxy::Create(class DirectUI::Element *)",
    "protected: static bool __stdcall DirectUI::DUIXmlParser::IsThemeClassName(struct DirectUI::ParserTools::ExprNode const *)",
    "protected: static void __stdcall DirectUI::Element::_InvalidateCachedDSConstraints(class DirectUI::Element *)",
    "public: __thiscall DirectUI::CCCheckBox::CCCheckBox(class DirectUI::CCCheckBox const &)",
    "public: virtual void __thiscall DirectUI::VerticalFlowLayout::DoLayout(class DirectUI::Element *,int,int)",
    "public: virtual int __thiscall DirectUI::ScrollBar::GetPage(void)",
    "InitProcessPriv",
    "protected: virtual long __thiscall DirectUI::TaskPage::LoadParser(class DirectUI::DUIXmlParser * *)",
    "public: bool __thiscall DirectUI::HWNDElement::IsLastElement(class DirectUI::Element *)",
    "public: static int DirectUI::Schema::ScrollPattern",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::HighDPIProp(void)",
    "const DirectUI::XBaby::`vftable'{for `DirectUI::HWNDElement'}",
    "const DirectUI::RowLayout::`vftable'",
    "public: static enum DirectUI::Schema::Event __stdcall DirectUI::Schema::EventFromEventId(int)",
    "public: static long __stdcall DirectUI::CCRadioButton::Register(void)",
    "public: int __thiscall DirectUI::Element::GetFontWeight(void)",
    "public: static void __stdcall DirectUI::Edit::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual __thiscall DirectUI::CCListView::~CCListView(void)",
    "public: long __thiscall DirectUI::Movie::SetInterpolationMode(int)",
    "public: virtual void __thiscall DirectUI::BaseScrollViewer::OnListenerAttach(class DirectUI::Element *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Selector::GetClassInfoW(void)",
    "public: void * __thiscall DirectUI::Value::GetImage(bool)",
    "public: long __thiscall DirectUI::Element::SetAlpha(int)",
    "public: __thiscall DirectUI::PushButton::PushButton(class DirectUI::PushButton const &)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnDestroy(void)",
    "public: static long __stdcall DirectUI::Movie::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static long __stdcall DirectUI::CCTreeView::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseResStr(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: virtual unsigned int __thiscall DirectUI::ClassInfoBase::GetGlobalIndex(void)const",
    "public: long __thiscall DirectUI::AnimationStrip::SetFrameDuration(int)",
    "public: static long __stdcall DirectUI::CCListView::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: void __thiscall DirectUI::DUIXmlParser::SetUnavailableIcon(struct HICON__ *)",
    "public: static long __stdcall DirectUI::CCHScrollBar::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "protected: long __thiscall DirectUI::ElementProxy::GetAutomationId(struct tagVARIANT *)",
    "public: __thiscall DirectUI::SelectorSelectionItemProxy::SelectorSelectionItemProxy(class DirectUI::SelectorSelectionItemProxy const &)",
    "public: int __thiscall DirectUI::Value::GetRefCount(void)const",
    "public: virtual long __stdcall DirectUI::DuiAccessible::GetWindow(struct HWND__ * *)",
    "public: virtual long __thiscall DirectUI::ScrollBar::SetPosition(int)",
    "public: __thiscall DirectUI::TableProxy::TableProxy(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::PlayAllFramesModeProp(void)",
    "public: static bool __stdcall DirectUI::SelectionProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::RefPointElement::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::Edit::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: static class DirectUI::RangeValueProxy * __stdcall DirectUI::RangeValueProxy::Create(class DirectUI::Element *)",
    "public: void __thiscall DirectUI::BaseScrollBar::SetPinned(bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::MarginProp(void)",
    "public: long __thiscall DirectUI::Element::SetAccHelp(unsigned short const *)",
    "const DirectUI::ElementProxy::`vftable'",
    "public: virtual unsigned short const * __thiscall DirectUI::TextGraphic::GetContentStringAsDisplayed(class DirectUI::Value * *)",
    "private: long __thiscall DirectUI::BrowserSelectionProxy::GetSelection(struct tagSAFEARRAY * *)",
    "private: static long __stdcall DirectUI::Schema::LookupPropertyInfos(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateGraphic(struct HENHMETAFILE__ *,struct HENHMETAFILE__ *)",
    "protected: virtual long __thiscall DirectUI::TaskPage::OnWizFinish(void)",
    "public: virtual long __thiscall DirectUI::SelectionProxy::DoMethod(int,char *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCListBox::GetClassInfoPtr(void)",
    "public: long __thiscall DirectUI::BaseScrollViewer::SetYOffset(int)",
    "const DirectUI::ScrollProxy::`vftable'",
    "const DirectUI::DuiAccessible::`vftable'{for `IAccIdentity'}",
    "protected: long __thiscall DirectUI::Element::_RemoveLocalValue(struct DirectUI::PropertyInfo const *,bool)",
    "protected: static struct tagSIZE __stdcall DirectUI::FlowLayout::SizeZero(void)",
    "public: unsigned int __thiscall DirectUI::Layout::GetLayoutChildCount(class DirectUI::Element *)",
    "public: static class DirectUI::Element * __stdcall DirectUI::DuiNavigate::Navigate(class DirectUI::Element *,class DirectUI::DynamicArray *,int)",
    "public: virtual enum DirectUI::Surface::EType __thiscall DirectUI::DCSurface::GetType(void)const",
    "public: virtual long __stdcall DirectUI::DuiAccessible::QueryInterface(struct _GUID const &,void * *)",
    "public: static void __stdcall DirectUI::EventManager::Close(void)",
    "public: virtual bool __thiscall DirectUI::CCPushButton::OnNotify(unsigned int,unsigned int,long,long *)",
    "public: int __thiscall DirectUI::CallstackTracker::EnumCallstackFrames(void (__stdcall*)(char const *,char const *,unsigned long,unsigned long))",
    "private: static struct DirectUI::IClassInfo * DirectUI::CheckBoxGlyph::s_pClassInfo",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Edit::MaxLengthProp(void)",
    "public: virtual __thiscall DirectUI::Expando::~Expando(void)",
    "public: virtual bool __thiscall DirectUI::RadioButtonGlyph::OnLostDialogFocus(class DirectUI::DialogElement *)",
    "public: long __thiscall DirectUI::CCBaseScrollBar::SetTracking(bool)",
    "public: static class DirectUI::SelectionProxy * __stdcall DirectUI::SelectionProxy::Create(class DirectUI::Element *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ScrollBar::ProportionalProp(void)",
    "public: static int DirectUI::Schema::LabeledByProperty",
    "public: bool __thiscall DirectUI::Value::GetBool(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::MouseFocusedProp(void)",
    "public: class DirectUI::PushButton & __thiscall DirectUI::PushButton::operator=(class DirectUI::PushButton const &)",
    "public: static int DirectUI::Schema::ClassNameProperty",
    "public: static long __stdcall DirectUI::Macro::Register(void)",
    "private: void __thiscall DirectUI::Element::_SyncRedrawStyle(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::TextGraphic::GetClassInfoPtr(void)",
    "public: static int DirectUI::Schema::SelectionPattern",
    "public: virtual __thiscall DirectUI::CCCheckBox::~CCCheckBox(void)",
    "public: static long __stdcall DirectUI::RepeatButton::Register(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::QueryService(struct _GUID const &,struct _GUID const &,void * *)",
    "public: static int DirectUI::Schema::MenuControlType",
    "DrawShadowTextEx",
    "public: static long __stdcall DirectUI::CCHScrollBar::Register(void)",
    "protected: long __thiscall DirectUI::HWNDElementProxy::GetFocus(struct IRawElementProviderFragment * *)",
    "public: virtual __thiscall DirectUI::CCHScrollBar::~CCHScrollBar(void)",
    "public: virtual void __thiscall DirectUI::Layout::Detach(class DirectUI::Element *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateGraphic(struct HICON__ *,bool,bool,bool)",
    "public: static long __stdcall DirectUI::BorderLayout::Create(class DirectUI::Layout * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseNumber(struct DirectUI::ParserTools::ExprNode const *,int *)",
    "public: virtual unsigned int __thiscall DirectUI::ClassInfoBase::GetPICount(void)const",
    "public: class DirectUI::StyledScrollViewer & __thiscall DirectUI::StyledScrollViewer::operator=(class DirectUI::StyledScrollViewer const &)",
    "protected: virtual long __thiscall DirectUI::HWNDElementProvider::Init(class DirectUI::HWNDElement *,class DirectUI::InvokeHelper *)",
    "public: struct DirectUI::Graphic * __thiscall DirectUI::Value::GetGraphic(void)",
    "public: virtual __thiscall DirectUI::UnknownElement::~UnknownElement(void)",
    "public: long __thiscall DirectUI::HWNDHostAccessible::Initialize(class DirectUI::Element *,struct IAccessible *)",
    "const DirectUI::HWNDElement::`vftable'",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::ScrollViewer::GetClassInfoPtr(void)",
    "public: virtual __thiscall DirectUI::CheckBoxGlyph::~CheckBoxGlyph(void)",
    "public: virtual unsigned int __thiscall DirectUI::Element::MessageCallback(struct tagGMSG *)",
    "public: virtual __thiscall DirectUI::Viewer::~Viewer(void)",
    "public: int __thiscall DirectUI::BaseScrollViewer::GetXOffset(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ChildrenProp(void)",
    "public: __thiscall DirectUI::RefPointElement::RefPointElement(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateElementRef(class DirectUI::Element *)",
    "public: void __thiscall DirectUI::Movie::doAction(struct GMA_ACTIONINFO *)",
    "public: bool __thiscall DirectUI::Element::IsHosted(void)",
    "public: virtual unsigned long __stdcall DirectUI::SelectionItemProvider::Release(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCTrackBar::ThumbPositionProp(void)",
    "public: static int DirectUI::Schema::RangeValue_SmallChange_Property",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Combobox::GetClassInfoW(void)",
    "public: bool __thiscall DirectUI::Viewer::GetYScrollable(void)",
    "public: static class UID __stdcall DirectUI::Element::AnimationChange(void)",
    "public: class DirectUI::PText & __thiscall DirectUI::PText::operator=(class DirectUI::PText const &)",
    "public: virtual void __thiscall DirectUI::ShellBorderLayout::OnAdd(class DirectUI::Element *,class DirectUI::Element * *,unsigned int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCCommandLink::NoteProp(void)",
    "private: long __thiscall DirectUI::TaskPage::LoadComCtl32(void)",
    "public: __thiscall DirectUI::BorderLayout::BorderLayout(class DirectUI::BorderLayout const &)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseStyleSheets(struct IXmlReader *)",
    "public: void __thiscall DirectUI::Element::Detach(class DirectUI::DeferCycle *)",
    "const DirectUI::CCBaseScrollBar::`vftable'{for `DirectUI::CCBase'}",
    "public: virtual long __stdcall DirectUI::DuiAccessible::Skip(unsigned long)",
    "public: class DirectUI::Button & __thiscall DirectUI::Button::operator=(class DirectUI::Button const &)",
    "public: __thiscall DirectUI::RowLayout::RowLayout(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseIconGraphic(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: static int DirectUI::Schema::RangeValuePattern",
    "public: __thiscall DirectUI::CCTreeView::CCTreeView(unsigned long)",
    "public: long __thiscall DirectUI::Element::SetTooltipMaxWidth(int)",
    "public: virtual void __thiscall DirectUI::HWNDHost::Paint(struct HDC__ *,struct tagRECT const *,struct tagRECT const *,struct tagRECT *,struct tagRECT *)",
    "public: long __thiscall DirectUI::Element::Add(class DirectUI::Element *,int (__cdecl*)(void const *,void const *))",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Element::GetClassInfoW(void)",
    "public: __thiscall DirectUI::BrowserSelectionProxy::BrowserSelectionProxy(void)",
    "public: virtual long __stdcall DirectUI::RangeValueProvider::get_SmallChange(double *)",
    "public: static void __stdcall DirectUI::CCCommandLink::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: void __thiscall DirectUI::XHost::Host(class DirectUI::Element *)",
    "public: virtual __thiscall DirectUI::CCBaseCheckRadioButton::~CCBaseCheckRadioButton(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::KeyFocusedProp(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::Invoke(long,struct _GUID const &,unsigned long,unsigned short,struct tagDISPPARAMS *,struct tagVARIANT *,struct tagEXCEPINFO *,unsigned int *)",
    "protected: virtual struct tagSIZE __thiscall DirectUI::Element::_SelfLayoutUpdateDesiredSize(int,int,class DirectUI::Surface *)",
    "public: void __thiscall DirectUI::TableLayout::Initialize(int,int,int,int *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ContentAlignProp(void)",
    "public: static int DirectUI::Schema::IsControlElementProperty",
    "public: static int DirectUI::Schema::ItemContainerPattern",
    "public: static int DirectUI::Schema::Value_Value_Property",
    "protected: class DirectUI::Element * __thiscall DirectUI::TaskPage::GetElement(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accKeyboardShortcut(struct tagVARIANT,unsigned short * *)",
    "IsUIAutomationProviderEnabled",
    "const DirectUI::IDataEngine::`vftable'",
    "public: static enum DirectUI::Surface::EType __stdcall DirectUI::Surface::GetSurfaceType(unsigned int)",
    "public: virtual long __stdcall DirectUI::ValueProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: __thiscall DirectUI::CCListView::CCListView(class DirectUI::CCListView const &)",
    "const DirectUI::Selector::`vftable'",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCBaseCheckRadioButton::GetClassInfoPtr(void)",
    "public: static class DirectUI::GridItemProxy * __stdcall DirectUI::GridItemProxy::Create(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::HWNDElement::StaticWndProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "const DirectUI::HWNDElementAccessible::`vftable'{for `IAccIdentity'}",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCPushButton::GetContentSize(int,int,class DirectUI::Surface *)",
    "protected: virtual struct HWND__ * __thiscall DirectUI::Edit::CreateHWND(struct HWND__ *,bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::FontQualityProp(void)",
    "public: static long __stdcall DirectUI::Edit::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::XProp(void)",
    "public: virtual void __thiscall DirectUI::XElement::OnInput(struct DirectUI::InputEvent *)",
    "protected: long __cdecl DirectUI::PatternProvider::DoInvoke(int,...)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateCursor(struct HICON__ *)",
    "public: virtual long __stdcall DirectUI::SelectionItemProvider::AddToSelection(void)",
    "public: static long __stdcall DirectUI::CCBase::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: class DirectUI::DialogElement & __thiscall DirectUI::DialogElement::operator=(class DirectUI::DialogElement const &)",
    "public: virtual __thiscall DirectUI::CCBase::~CCBase(void)",
    "public: virtual bool __thiscall DirectUI::XBaby::OnChildReceivedFocus(class DirectUI::Element *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCProgressBar::GetClassInfoW(void)",
    "public: __thiscall DirectUI::DUIXmlParser::DUIXmlParser(void)",
    "const DirectUI::HWNDHostAccessible::`vftable'{for `IEnumVARIANT'}",
    "public: static int DirectUI::Schema::AcceleratorKeyProperty",
    "public: virtual void __thiscall DirectUI::ScrollBar::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "private: void __thiscall DirectUI::HWNDHost::SyncColorsAndFonts(void)",
    "private: void __thiscall DirectUI::HWNDHost::_DeleteCtrlWnd(void)",
    "public: class DirectUI::CCSysLink & __thiscall DirectUI::CCSysLink::operator=(class DirectUI::CCSysLink const &)",
    "public: virtual long __thiscall DirectUI::Expando::Add(class DirectUI::Element * *,unsigned int)",
    "public: __thiscall DirectUI::ScrollViewer::ScrollViewer(class DirectUI::ScrollViewer const &)",
    "public: static int DirectUI::Schema::ItemStatusProperty",
    "public: __thiscall DirectUI::BaseScrollViewer::BaseScrollViewer(void)",
    "public: long __thiscall DirectUI::Bind::SetProperty(unsigned short const *)",
    "public: class DirectUI::Element * __thiscall DirectUI::HWNDElement::ElementFromPoint(struct tagPOINT *)",
    "public: static long __stdcall DirectUI::ExpandoButtonGlyph::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual __thiscall DirectUI::ClassInfoBase::~ClassInfoBase(void)",
    "public: virtual unsigned long __stdcall DirectUI::ValueProvider::AddRef(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::KeyWithinProp(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Browser::s_pClassInfo",
    "public: void __thiscall DirectUI::Macro::SetDataEntry(struct DirectUI::IDataEntry *,class DirectUI::Element *)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accName(struct tagVARIANT,unsigned short * *)",
    "public: int __thiscall DirectUI::AnimationStrip::GetFrameIndex(void)",
    "public: bool __thiscall DirectUI::Element::GetClickablePoint(struct tagPOINT *)",
    "private: static int const DirectUI::CallstackTracker::STACKDEPTH",
    "public: bool __thiscall DirectUI::DialogElement::GetHandleEnterKey(void)",
    "const DirectUI::ScrollProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: static int DirectUI::Schema::ControlTypeProperty",
    "public: __thiscall DirectUI::ScrollBarRangeValueProxy::ScrollBarRangeValueProxy(void)",
    "public: static long __stdcall DirectUI::CCCheckBox::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: __thiscall DirectUI::DuiAccessible::DuiAccessible(void)",
    "public: class DirectUI::StyleSheet * __thiscall DirectUI::Value::GetStyleSheet(void)",
    "public: long __thiscall DirectUI::Viewer::SetYOffset(int)",
    "public: int __thiscall DirectUI::Element::GetActive(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accValue(struct tagVARIANT,unsigned short * *)",
    "public: virtual __thiscall DirectUI::RangeValueProvider::~RangeValueProvider(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_RecordElementTrees(struct IXmlReader *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccRoleProp(void)",
    "public: virtual unsigned long __stdcall DirectUI::XProvider::Release(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateDTBFill(unsigned short const *,int,int)",
    "const DirectUI::FillLayout::`vftable'",
    "public: static long (__stdcall* DirectUI::Schema::UiaRaiseAutomationPropertyChangedEvent)(struct IRawElementProviderSimple *,int,struct tagVARIANT,struct tagVARIANT)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseRectValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: static void __stdcall DirectUI::Macro::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static void __stdcall DirectUI::Layout::UpdateLayoutRect(class DirectUI::Element *,int,int,class DirectUI::Element *,int,int,int,int)",
    "public: virtual long __stdcall DirectUI::ScrollProvider::get_VerticallyScrollable(int *)",
    "public: struct DirectUI::DUIXmlParser::FunctionDefinition & __thiscall DirectUI::DUIXmlParser::FunctionDefinition::operator=(struct DirectUI::DUIXmlParser::FunctionDefinition const &)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCSysLink::GetClassInfoW(void)",
    "public: static long __stdcall DirectUI::Repeater::Register(void)",
    "public: virtual long __stdcall DirectUI::ElementProvider::AdviseEventRemoved(int,struct tagSAFEARRAY *)",
    "public: virtual void __thiscall DirectUI::ScrollBar::OnEvent(struct DirectUI::Event *)",
    "public: __thiscall DirectUI::IXElementCP::IXElementCP(class DirectUI::IXElementCP const &)",
    "protected: void __thiscall DirectUI::DialogElement::SetRegisteredDefaultButtonSelectedState(bool)",
    "const DirectUI::XResourceProvider::`vftable'",
    "public: static long __stdcall DirectUI::AutoButton::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::HWNDElementProvider::`vftable'{for `IRawElementProviderFragment'}",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::TextGraphic::SideGraphicProp(void)",
    "protected: bool __thiscall DirectUI::HWNDHost::GetStaticColor(struct HDC__ *,struct HBRUSH__ * *)",
    "public: void __thiscall DirectUI::CCBaseScrollBar::SyncScrollBar(void)",
    "public: class DirectUI::TableLayout & __thiscall DirectUI::TableLayout::operator=(class DirectUI::TableLayout const &)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Macro::s_pClassInfo",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::QueryInterface(struct _GUID const &,void * *)",
    "public: bool __thiscall DirectUI::PushButton::GetEnforceSize(void)",
    "public: bool __thiscall DirectUI::HWNDElement::IsFirstElement(class DirectUI::Element *)",
    "private: void __thiscall DirectUI::Element::_FlushDS(class DirectUI::DeferCycle *)",
    "public: long __thiscall DirectUI::Movie::SetPath(unsigned short const *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::TextGlowSizeProp(void)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::BorderLayout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: __thiscall DirectUI::SafeArrayAccessor::SafeArrayAccessor(void)",
    "public: virtual long __stdcall DirectUI::XProvider::ForceThemeChange(unsigned int,long)",
    "public: static long __stdcall DirectUI::Thumb::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: bool __thiscall DirectUI::Element::GetHighDPI(void)",
    "public: virtual long __stdcall DirectUI::ExpandCollapseProvider::Expand(void)",
    "public: class DirectUI::TextGraphic & __thiscall DirectUI::TextGraphic::operator=(class DirectUI::TextGraphic const &)",
    "public: long __thiscall DirectUI::Element::SetLayoutPos(int)",
    "protected: void __thiscall DirectUI::HWNDHost::SyncDirection(void)",
    "private: long __thiscall DirectUI::HWNDHost::GetAccessibleImpl(struct IAccessible * *,bool)",
    "public: long __thiscall DirectUI::Pages::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: struct _TREEITEM * __thiscall DirectUI::CCTreeView::InsertItem(struct tagTVINSERTSTRUCTW const *)",
    "private: bool __thiscall DirectUI::Element::IsPointValid(double,double)",
    "public: void __thiscall DirectUI::BorderLayout::Initialize(void)",
    "const DirectUI::NavigatorSelectionItemProxy::`vftable'",
    "private: static struct DirectUI::AccessibleButton::ACCESSIBLEROLE const * __stdcall DirectUI::AccessibleButton::FindAccessibleRole(int)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::HWNDElementProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: class DirectUI::Expression & __thiscall DirectUI::Expression::operator=(class DirectUI::Expression const &)",
    "const DirectUI::HWNDHostClientAccessible::`vftable'{for `IAccessible'}",
    "public: static int DirectUI::Schema::LayoutInvalidatedEvent",
    "public: class DirectUI::XProvider & __thiscall DirectUI::XProvider::operator=(class DirectUI::XProvider const &)",
    "const DirectUI::ValueProvider::`vftable'{for `DirectUI::IProvider'}",
    "const DirectUI::RangeValueProvider::`vftable'",
    "private: static long __stdcall DirectUI::EventManager::HandleVisibilityChange(class DirectUI::Element *,unsigned int)",
    "public: static long __stdcall DirectUI::CCPushButton::Register(void)",
    "public: static class DirectUI::RefPointElement * __stdcall DirectUI::RefPointElement::Locate(class DirectUI::Element *)",
    "private: void __thiscall DirectUI::AnimationStrip::Stop(void)",
    "public: long __thiscall DirectUI::Element::Add(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::RefcountBase::AddRef(void)",
    "public: __thiscall DirectUI::CritSecLock::~CritSecLock(void)",
    "public: class DirectUI::RangeValueProxy & __thiscall DirectUI::RangeValueProxy::operator=(class DirectUI::RangeValueProxy const &)",
    "public: virtual void __thiscall DirectUI::BaseScrollViewer::OnListenedInput(class DirectUI::Element *,struct DirectUI::InputEvent *)",
    "public: class DirectUI::AutoLock & __thiscall DirectUI::AutoLock::operator=(class DirectUI::AutoLock const &)",
    "private: static long __stdcall DirectUI::EventManager::GetString(struct tagVARIANT *,class DirectUI::Value *)",
    "public: virtual void __thiscall DirectUI::SelectorNoDefault::OnKeyFocusMoved(class DirectUI::Element *,class DirectUI::Element *)",
    "public: bool __thiscall DirectUI::Movie::GetPlayAllFramesMode(void)",
    "public: static long __stdcall DirectUI::Button::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static long __stdcall DirectUI::DUIXmlParser::Create(class DirectUI::DUIXmlParser * *,class DirectUI::Value * (__stdcall*)(unsigned short const *,void *),void *,void (__stdcall*)(unsigned short const *,unsigned short const *,int,void *),void *)",
    "protected: long __thiscall DirectUI::ElementProxy::IsPatternSupported(enum DirectUI::Schema::Pattern,bool *)",
    "public: long __thiscall DirectUI::Element::SetCursorHandle(struct HICON__ *)",
    "public: bool __thiscall DirectUI::CCPushButton::GetHasShield(void)",
    "public: virtual void __thiscall DirectUI::Expando::OnEvent(struct DirectUI::Event *)",
    "protected: void __thiscall DirectUI::HWNDHost::SyncForeground(void)",
    "public: __thiscall DirectUI::XResourceProvider::XResourceProvider(void)",
    "protected: virtual void __thiscall DirectUI::Element::UpdateTooltip(class DirectUI::Element *)",
    "public: static int DirectUI::Schema::Table_RowOrColumnMajor_Property",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCAVI::GetClassInfoW(void)",
    "protected: void __thiscall DirectUI::DUIXmlParser::SendParseError(unsigned short const *,unsigned short const *,struct IXmlReader *,long)",
    "public: static int DirectUI::Schema::TransformPattern",
    "public: static bool __stdcall DirectUI::HWNDElement::FindShortcut(unsigned short,class DirectUI::Element *,class DirectUI::Element * *,int *,int *,int)",
    "const DirectUI::NineGridLayout::`vftable'",
    "public: virtual unsigned int __thiscall DirectUI::HWNDHost::MessageCallback(struct tagGMSG *)",
    "public: bool __thiscall DirectUI::XElement::IsDescendent(class DirectUI::Element *)",
    "private: void __thiscall DirectUI::DUIXmlParser::SetParseState(enum DirectUI::_DUI_PARSE_STATE)",
    "public: bool __thiscall DirectUI::BaseScrollViewer::GetYScrollable(void)",
    "public: int __thiscall DirectUI::Element::GetAlpha(void)",
    "public: __thiscall DirectUI::XElement::XElement(class DirectUI::XElement const &)",
    "public: static long __stdcall DirectUI::CCVScrollBar::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::ToggleProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: __thiscall DirectUI::GridProxy::GridProxy(class DirectUI::GridProxy const &)",
    "public: int __thiscall DirectUI::SafeArrayAccessor::Count(void)",
    "public: int __thiscall DirectUI::Movie::GetSmoothingMode(void)",
    "public: void __thiscall DirectUI::NativeHWNDHost::DestroyWindow(void)",
    "public: virtual bool __thiscall DirectUI::CCBaseScrollBar::GetProportional(void)",
    "public: static int DirectUI::Schema::EditControlType",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccDescProp(void)",
    "public: __thiscall DirectUI::HWNDElementProxy::HWNDElementProxy(class DirectUI::HWNDElementProxy const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Bind::ConnectProp(void)",
    "public: struct tagPOINT const * __thiscall DirectUI::RefPointElement::GetReferencePoint(class DirectUI::Value * *)",
    "public: static int DirectUI::Schema::SeparatorControlType",
    "public: void __thiscall DirectUI::XElement::FreeProvider(void)",
    "const DirectUI::ScrollItemProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: int __thiscall DirectUI::BaseScrollViewer::GetXBarVisibility(void)",
    "public: static int DirectUI::Schema::MenuBarControlType",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ShortcutProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Viewer::YOffsetProp(void)",
    "public: struct tagSIZE const * __thiscall DirectUI::Element::GetDesiredSize(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accChildCount(long *)",
    "public: virtual long __stdcall DirectUI::XProvider::GetHostedElementID(unsigned short *)",
    "public: unsigned short const * __thiscall DirectUI::Movie::GetPath(class DirectUI::Value * *)",
    "public: static long __stdcall DirectUI::CCTrackBar::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static long __stdcall DirectUI::XBaby::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: long __thiscall DirectUI::RowLayout::Initialize(int,unsigned int,unsigned int)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::RepeatButton::GetClassInfoPtr(void)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCSysLink::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: __thiscall DirectUI::NavigatorSelectionItemProxy::NavigatorSelectionItemProxy(void)",
    "public: virtual bool __thiscall DirectUI::ClassInfoBase::IsValidProperty(struct DirectUI::PropertyInfo const *)const",
    "public: virtual void __thiscall DirectUI::RepeatButton::OnInput(struct DirectUI::InputEvent *)",
    "public: virtual unsigned long __stdcall DirectUI::ScrollProvider::Release(void)",
    "public: __thiscall DirectUI::Viewer::Viewer(void)",
    "public: static int DirectUI::Schema::AsyncContentLoadedEvent",
    "public: static void __stdcall DirectUI::InvokeManager::CloseThread(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::UnknownElement::GetClassInfoPtr(void)",
    "public: __thiscall DirectUI::Macro::Macro(class DirectUI::Macro const &)",
    "public: int __thiscall DirectUI::Element::_GetChangesUpdatePass(void)",
    "public: long __thiscall DirectUI::Element::SetAccItemStatus(unsigned short const *)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::RangeValueProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::TextGraphic::GetClassInfoW(void)",
    "public: __thiscall DirectUI::ValueProxy::ValueProxy(void)",
    "public: virtual long __stdcall DirectUI::SelectionItemProvider::get_IsSelected(int *)",
    "protected: static int __stdcall DirectUI::DUIXmlParser::QuerySysMetric(int)",
    "public: long __thiscall DirectUI::Movie::SetPlayAllFramesMode(bool)",
    "protected: long __thiscall DirectUI::DUIXmlParser::CreateXmlReaderFromHGLOBAL(void *,struct IXmlReader * *)",
    "public: class DirectUI::GridLayout & __thiscall DirectUI::GridLayout::operator=(class DirectUI::GridLayout const &)",
    "const DirectUI::GridProxy::`vftable'",
    "public: virtual void __thiscall DirectUI::Navigator::OnEvent(struct DirectUI::Event *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCListBox::GetContentSize(int,int,class DirectUI::Surface *)",
    "private: void __thiscall DirectUI::HWNDHost::ApplySinkRegion(struct tagRECT const *,bool)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::accNavigate(long,struct tagVARIANT,struct tagVARIANT *)",
    "public: virtual void __thiscall DirectUI::ClassInfoBase::AddRef(void)",
    "public: void __thiscall DirectUI::Pages::SetNoBrowseOnFirstAdd(void)",
    "protected: virtual class DirectUI::BaseScrollBar * __thiscall DirectUI::ScrollViewer::GetHScroll(void)",
    "const DirectUI::ElementWithHWND::`vftable'",
    "public: static int DirectUI::Schema::IsContentElementProperty",
    "public: virtual void __thiscall DirectUI::ShellBorderLayout::OnLayoutPosChanged(class DirectUI::Element *,class DirectUI::Element *,int,int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Macro::ExpandProp(void)",
    "private: static unsigned long (__stdcall* DirectUI::CallstackTracker::s_pfnSymSetOptions)(unsigned long)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::put_accValue(struct tagVARIANT,unsigned short *)",
    "public: long __thiscall DirectUI::CCListView::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "protected: virtual void __thiscall DirectUI::CCBaseCheckRadioButton::PostCreate(struct HWND__ *)",
    "public: static int DirectUI::Schema::ClickablePointProperty",
    "protected: class DirectUI::Element * __thiscall DirectUI::XProvider::GetRoot(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::SelectedProp(void)",
    "public: long __thiscall DirectUI::Movie::SetPixelOffsetMode(int)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCBase::GetClassInfoPtr(void)",
    "public: static long __stdcall DirectUI::Bind::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: void __thiscall DirectUI::NativeHWNDHost::ShowWindow(int)",
    "public: void __thiscall DirectUI::Repeater::SetDataEngine(struct DirectUI::IDataEngine *)",
    "public: virtual unsigned long __stdcall DirectUI::ExpandCollapseProvider::Release(void)",
    "public: bool __thiscall DirectUI::BaseScrollBar::IsPinned(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_RecordInstantiateElement(struct IXmlReader *,unsigned short * *)",
    "const DirectUI::SelectionProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCBaseScrollBar::PositionProp(void)",
    "public: __thiscall DirectUI::CCBaseCheckRadioButton::CCBaseCheckRadioButton(unsigned long)",
    "public: static long __stdcall DirectUI::ShellBorderLayout::Create(int,int *,class DirectUI::Value * *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::RefPointElement::GetClassInfoW(void)",
    "public: __thiscall DirectUI::IXProviderCP::IXProviderCP(void)",
    "public: virtual void __thiscall DirectUI::BaseScrollBar::LineDown(unsigned int)",
    "public: int __thiscall DirectUI::CCBase::GetWinStyle(void)",
    "public: class DirectUI::Browser * __thiscall DirectUI::Navigator::GetBrowser(void)",
    "private: static long __stdcall DirectUI::EventManager::HandleAccChange(class DirectUI::Element *,struct IRawElementProviderSimple *,class DirectUI::Value *,class DirectUI::Value *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::CreateStyleSheet(struct IXmlReader *,unsigned short const *,class DirectUI::StyleSheet * *)",
    "public: virtual bool __thiscall DirectUI::ExpandoButtonGlyph::OnLostDialogFocus(class DirectUI::DialogElement *)",
    "public: virtual void __thiscall DirectUI::BaseScrollBar::End(void)",
    "public: void __thiscall DirectUI::Layout::Destroy(void)",
    "public: virtual unsigned long __stdcall DirectUI::ElementProvider::Release(void)",
    "public: bool __thiscall DirectUI::Element::HasLayout(void)",
    "private: long __thiscall DirectUI::ValueProxy::GetIsReadOnly(int *)",
    "public: struct HWND__ * __thiscall DirectUI::XHost::GetHWND(void)",
    "public: long __thiscall DirectUI::Edit::SetMaxLength(int)",
    "private: static struct _RTL_CRITICAL_SECTION DirectUI::EventManager::g_cs",
    "public: static long __stdcall DirectUI::PushButton::Register(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCBaseCheckRadioButton::GetClassInfoW(void)",
    "const DirectUI::CCListView::`vftable'",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateGraphic(struct HBITMAP__ *,unsigned char,unsigned int,bool,bool,bool)",
    "public: __thiscall DirectUI::DCSurface::DCSurface(struct HDC__ *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetCursorNull(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCListView::GetClassInfoPtr(void)",
    "private: static int __stdcall DirectUI::CallstackTracker::InitializeSymbols(void)",
    "public: int __thiscall DirectUI::Element::GetX(void)",
    "public: virtual __thiscall DirectUI::CCAVI::~CCAVI(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCListView::GetClassInfoW(void)",
    "const DirectUI::FlowLayout::`vftable'",
    "public: __thiscall DirectUI::CCListView::CCListView(void)",
    "public: virtual void __thiscall DirectUI::Element::SetKeyFocus(void)",
    "public: __thiscall DirectUI::CCBase::CCBase(unsigned long,unsigned short const *)",
    "const DirectUI::Surface::`vftable'",
    "protected: virtual bool __thiscall DirectUI::TaskPage::OnMessage(unsigned int,unsigned int,long,long *)",
    "public: static void __stdcall DirectUI::Combobox::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "protected: static struct DirectUI::DUIXmlParser::FunctionDefinition const * const DirectUI::DUIXmlParser::s_fdString",
    "public: struct tagRECT const * __thiscall DirectUI::Value::GetRect(void)",
    "private: long __thiscall DirectUI::ShellBorderLayout::_CalcTabOrder(class DirectUI::Element *)",
    "public: class DirectUI::Edit & __thiscall DirectUI::Edit::operator=(class DirectUI::Edit const &)",
    "public: static class UID __stdcall DirectUI::Element::KeyboardNavigate(void)",
    "public: __thiscall DirectUI::RepeatButton::RepeatButton(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_RecordSetValue(struct IXmlReader *,unsigned short const *,unsigned short const *)",
    "protected: virtual class DirectUI::Element * __thiscall DirectUI::TaskPage::OnQueryInitialFocus(void)",
    "public: virtual __thiscall DirectUI::CCListBox::~CCListBox(void)",
    "public: __thiscall DirectUI::Edit::Edit(void)",
    "public: __thiscall DirectUI::SelectionItemProvider::SelectionItemProvider(void)",
    "public: int __thiscall DirectUI::Element::GetFontStyle(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateBool(bool)",
    "const DirectUI::Macro::`vftable'",
    "public: bool __thiscall DirectUI::Edit::GetThemedBorder(void)",
    "public: class DirectUI::Browser & __thiscall DirectUI::Browser::operator=(class DirectUI::Browser const &)",
    "public: __thiscall DirectUI::CheckBoxGlyph::CheckBoxGlyph(class DirectUI::CheckBoxGlyph const &)",
    "public: virtual bool __thiscall DirectUI::DialogElement::OnListenedPropertyChanging(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual long __stdcall DirectUI::ScrollItemProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: virtual __thiscall DirectUI::AccessibleButton::~AccessibleButton(void)",
    "public: long __thiscall DirectUI::DUIFactory::LoadFromBuffer(unsigned short const *,unsigned int,unsigned short const *,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::IDataEntry::`vftable'",
    "public: void __thiscall DirectUI::ElementProvider::TossPatternProvider(enum DirectUI::Schema::Pattern)",
    "public: virtual struct tagSIZE __thiscall DirectUI::Viewer::_SelfLayoutUpdateDesiredSize(int,int,class DirectUI::Surface *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseGTFStr(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: virtual long __stdcall DirectUI::XProvider::GetDesiredSize(int,int,struct tagSIZE *)",
    "protected: void __thiscall DirectUI::HWNDHost::PrintRTLControl(struct HDC__ *,struct HDC__ *,struct tagRECT const &)",
    "public: __thiscall DirectUI::TaskPage::TaskPage(void)",
    "public: class DirectUI::ScrollItemProxy & __thiscall DirectUI::ScrollItemProxy::operator=(class DirectUI::ScrollItemProxy const &)",
    "public: static long __stdcall DirectUI::Pages::Register(void)",
    "const DirectUI::DUIXmlParser::`vftable'",
    "UnInitProcessPriv",
    "public: long __thiscall DirectUI::Element::SetVisible(bool)",
    "public: void __cdecl DirectUI::DUIFactory::SetError(unsigned short const *,...)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseGraphicValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::CreateXmlReaderInputWithEncodingName(struct IStream *,unsigned short const *,struct IUnknown * *)",
    "protected: virtual void __thiscall DirectUI::RangeValueProxy::Init(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::Selector::Register(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCTrackBar::GetClassInfoPtr(void)",
    "public: struct DirectUI::CellInfo * __thiscall DirectUI::TableLayout::GetCellInfo(int)",
    "public: virtual __thiscall DirectUI::IDataEntry::~IDataEntry(void)",
    "const DirectUI::CCRadioButton::`vftable'",
    "public: __thiscall DirectUI::StyledScrollViewer::StyledScrollViewer(void)",
    "public: bool __thiscall DirectUI::Element::GetTooltip(void)",
    "public: static long __stdcall DirectUI::StyledScrollViewer::Register(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCCheckBox::GetClassInfoPtr(void)",
    "const DirectUI::HWNDHostAccessible::`vftable'{for `IAccessible'}",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::ScrollBar::GetElement(void)",
    "public: virtual long __stdcall DirectUI::HWNDElementProvider::GetFocus(struct IRawElementProviderFragment * *)",
    "public: virtual long __thiscall DirectUI::HWNDElement::GetAccessibleImpl(struct IAccessible * *)",
    "public: void __thiscall DirectUI::Element::DoubleBuffered(bool)",
    "public: virtual long __thiscall DirectUI::ScrollBar::SetLine(int)",
    "public: virtual struct tagSIZE __thiscall DirectUI::Clipper::_SelfLayoutUpdateDesiredSize(int,int,class DirectUI::Surface *)",
    "public: __thiscall DirectUI::FillLayout::FillLayout(void)",
    "public: class DirectUI::ValueProxy & __thiscall DirectUI::ValueProxy::operator=(class DirectUI::ValueProxy const &)",
    "public: __thiscall DirectUI::CheckBoxGlyph::CheckBoxGlyph(void)",
    "public: long __thiscall DirectUI::CCBaseScrollBar::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "private: unsigned int __thiscall DirectUI::Edit::GetTextHeight(void)",
    "public: __thiscall DirectUI::UnknownElement::UnknownElement(class DirectUI::UnknownElement const &)",
    "public: struct HGADGET__ * __thiscall DirectUI::Element::GetDisplayNode(void)",
    "public: virtual void __thiscall DirectUI::Element::OnGroupChanged(int,bool)",
    "public: static int DirectUI::Schema::LocalizedControlTypeProperty",
    "public: virtual __thiscall DirectUI::DCSurface::~DCSurface(void)",
    "public: static long __stdcall DirectUI::Expandable::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual struct HWND__ * __thiscall DirectUI::HWNDHost::GetHWND(void)",
    "public: virtual long __stdcall DirectUI::ToggleProvider::Toggle(void)",
    "const DirectUI::ShellBorderLayout::`vftable'",
    "public: long __thiscall DirectUI::ResourceModuleHandles::GetHandle(unsigned short const *,struct HINSTANCE__ * *)",
    "public: static int DirectUI::Schema::RangeValue_Value_Property",
    "public: void __thiscall DirectUI::Element::EnableUiaEvents(bool)",
    "protected: long __thiscall DirectUI::ElementProxy::Navigate(enum NavigateDirection,struct IRawElementProviderFragment * *)",
    "const DirectUI::GridProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: virtual long __thiscall DirectUI::CCBaseScrollBar::SetMinimum(int)",
    "public: static long __stdcall DirectUI::RadioButtonGlyph::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::Browser::`vftable'",
    "public: class DirectUI::Movie & __thiscall DirectUI::Movie::operator=(class DirectUI::Movie const &)",
    "public: static class DirectUI::Element * __stdcall DirectUI::DuiAccessible::GetAccessibleParent(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::GridLayout::Create(int,int *,class DirectUI::Value * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ScrollBar::VerticalProp(void)",
    "public: virtual void __thiscall DirectUI::PushButton::OnHosted(class DirectUI::Element *)",
    "public: virtual long __thiscall DirectUI::NavigatorSelectionItemProxy::DoMethod(int,char *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCBaseScrollBar::MinimumProp(void)",
    "protected: void __thiscall DirectUI::Element::MarkSelfLayout(void)",
    "public: static void __stdcall DirectUI::ElementProviderManager::Remove(class DirectUI::ElementProvider *)",
    "public: void __thiscall DirectUI::NativeHWNDHost::SaveFocus(void)",
    "public: long __thiscall DirectUI::Browser::Initialize(class DirectUI::Element *,unsigned long *)",
    "const DirectUI::CCAVI::`vftable'",
    "public: static long __stdcall DirectUI::CCHScrollBar::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "private: long __thiscall DirectUI::NavigatorSelectionItemProxy::AddToSelection(class DirectUI::Browser *)",
    "RegisterCommonControls",
    "public: virtual bool __thiscall DirectUI::CCSysLink::OnReceivedDialogFocus(class DirectUI::DialogElement *)",
    "public: virtual __thiscall DirectUI::Edit::~Edit(void)",
    "public: virtual __thiscall DirectUI::ScrollItemProvider::~ScrollItemProvider(void)",
    "public: long __thiscall DirectUI::Edit::SetThemedBorder(bool)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::XBaby::GetFocusableElement(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseImageGraphic(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: static int DirectUI::Schema::ButtonControlType",
    "public: virtual bool __thiscall DirectUI::DialogElement::ClickDefaultButton(void)",
    "public: virtual bool __thiscall DirectUI::Edit::IsContentProtected(void)",
    "public: static long __stdcall DirectUI::ScrollBar::Register(void)",
    "public: int __thiscall DirectUI::Viewer::GetYOffset(void)",
    "public: __thiscall DirectUI::CCSysLink::CCSysLink(void)",
    "public: virtual bool __thiscall DirectUI::ClassInfoBase::IsSubclassOf(struct DirectUI::IClassInfo *)const",
    "public: virtual void __thiscall DirectUI::Element::OnMouseFocusMoved(class DirectUI::Element *,class DirectUI::Element *)",
    "public: static int DirectUI::Schema::Scroll_HorizontalViewSize_Property",
    "protected: virtual bool __thiscall DirectUI::HWNDHost::EraseBkgnd(struct HDC__ *,long *)",
    "public: static class DirectUI::Element * __stdcall DirectUI::RefPointElement::FindRefPoint(class DirectUI::Element *,struct tagPOINT *)",
    "private: void __thiscall DirectUI::Element::_SyncVisible(void)",
    "public: virtual long __stdcall DirectUI::ElementProvider::SetFocus(void)",
    "public: class DirectUI::DeferCycle * __thiscall DirectUI::Element::GetDeferObject(void)",
    "public: class DirectUI::Combobox & __thiscall DirectUI::Combobox::operator=(class DirectUI::Combobox const &)",
    "public: virtual void __thiscall DirectUI::Movie::OnDestroy(void)",
    "protected: static struct DirectUI::DUIXmlParser::FunctionDefinition const * const DirectUI::DUIXmlParser::s_fdInt",
    "public: long __thiscall DirectUI::Element::SetID(unsigned short const *)",
    "public: __thiscall DirectUI::ValueProvider::ValueProvider(void)",
    "public: virtual void __thiscall DirectUI::ShellBorderLayout::OnRemove(class DirectUI::Element *,class DirectUI::Element * *,unsigned int)",
    "public: static long __stdcall DirectUI::ExpandoButtonGlyph::Register(void)",
    "public: __thiscall DirectUI::XHost::~XHost(void)",
    "public: virtual struct tagSIZE __thiscall DirectUI::PushButton::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::StyledScrollViewer::GetClassInfoW(void)",
    "private: long __thiscall DirectUI::ScrollProxy::ScrollToHorizontalPosition(int,bool)",
    "public: virtual bool __thiscall DirectUI::BaseScrollViewer::OnListenedPropertyChanging(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: class DirectUI::SelectionProxy & __thiscall DirectUI::SelectionProxy::operator=(class DirectUI::SelectionProxy const &)",
    "public: virtual __thiscall DirectUI::SelectionProvider::~SelectionProvider(void)",
    "public: virtual long __stdcall DirectUI::XProvider::CreateDUI(class DirectUI::IXElementCP *,struct HWND__ * *)",
    "public: __thiscall DirectUI::InvokeProxy::InvokeProxy(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetElementNull(void)",
    "public: void __thiscall DirectUI::XHost::Destroy(void)",
    "public: virtual long __stdcall DirectUI::TableItemProvider::QueryInterface(struct _GUID const &,void * *)",
    "const DirectUI::TaskPage::`vftable'{for `DirectUI::IElementListener'}",
    "public: long __thiscall DirectUI::Element::SetShadowIntensity(int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccStateProp(void)",
    "public: virtual bool __thiscall DirectUI::CCBaseScrollBar::OnMessage(unsigned int,unsigned int,long,long *)",
    "public: virtual __thiscall DirectUI::AutoButton::~AutoButton(void)",
    "public: long __thiscall DirectUI::Element::SetContentAlign(int)",
    "private: static long __stdcall DirectUI::EventManager::RaiseStructureChangedEvent(class DirectUI::Element *,enum StructureChangeType)",
    "UnicodeToMultiByte",
    "public: long __thiscall DirectUI::Edit::SetMultiline(bool)",
    "public: static long __stdcall DirectUI::RepeatButton::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual unsigned long __stdcall DirectUI::ValueProvider::Release(void)",
    "public: void __thiscall DirectUI::Element::PaintBorder(struct HDC__ *,class DirectUI::Value *,struct tagRECT *,struct tagRECT const &)",
    "public: long __thiscall DirectUI::PushButton::SetEnforceSize(bool)",
    "public: virtual long __stdcall DirectUI::SelectionItemProvider::RemoveFromSelection(void)",
    "public: bool __thiscall DirectUI::AnimationStrip::GetPlay(void)",
    "public: long __thiscall DirectUI::DUIXmlParser::GetSheet(unsigned short const *,class DirectUI::Value * *)",
    "protected: virtual void __thiscall DirectUI::TaskPage::InitPropSheetPage(struct _PROPSHEETPAGEW *)",
    "public: virtual bool __thiscall DirectUI::CheckBoxGlyph::OnLostDialogFocus(class DirectUI::DialogElement *)",
    "private: static int (__stdcall* DirectUI::CallstackTracker::s_pfnSymInitialize)(void *,char const *,int)",
    "public: static class UID __stdcall DirectUI::HWNDElement::CompositionChange(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Edit::s_pClassInfo",
    "public: class DirectUI::HWNDHost & __thiscall DirectUI::HWNDHost::operator=(class DirectUI::HWNDHost const &)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Selector::s_pClassInfo",
    "private: static struct DirectUI::IClassInfo * DirectUI::PushButton::s_pClassInfo",
    "public: static class UID __stdcall DirectUI::AutoButton::Toggle(void)",
    "const DirectUI::ToggleProvider::`vftable'",
    "public: long __thiscall DirectUI::Element::SetWidth(int)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::GetWindow(struct HWND__ * *)",
    "public: long __thiscall DirectUI::Movie::LoadFromPath(unsigned short const *)",
    "public: static long __stdcall DirectUI::StyleSheet::Create(class DirectUI::StyleSheet * *)",
    "public: long __thiscall DirectUI::HWNDHost::SetTransparent(bool)",
    "public: static void __stdcall DirectUI::ElementProviderManager::Close(void)",
    "public: bool __thiscall DirectUI::Expandable::GetExpanded(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Page::GetClassInfoW(void)",
    "public: bool __thiscall DirectUI::DialogElement::GetButtonClassAcceptsEnterKey(void)",
    "protected: virtual long __thiscall DirectUI::TaskPage::OnSetActive(void)",
    "protected: void __thiscall DirectUI::XProvider::SetHandleEnterKey(bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::BorderStyleProp(void)",
    "const DirectUI::TaskPage::`vftable'{for `DirectUI::IXProviderCP'}",
    "public: static long __stdcall DirectUI::XElement::Register(void)",
    "public: long __thiscall DirectUI::Element::SetMargin(int,int,int,int)",
    "public: static long __stdcall DirectUI::CCProgressBar::Register(void)",
    "public: virtual long __thiscall DirectUI::BaseScrollViewer::Add(class DirectUI::Element * *,unsigned int)",
    "public: class DirectUI::CallstackTracker & __thiscall DirectUI::CallstackTracker::operator=(class DirectUI::CallstackTracker const &)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateCursor(unsigned short const *)",
    "public: void __thiscall DirectUI::Element::PaintContent(struct HDC__ *,struct tagRECT const *)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetClass(class DirectUI::Value * *)",
    "public: long __thiscall DirectUI::Element::SetSelected(bool)",
    "public: class DirectUI::Layout * __thiscall DirectUI::Value::GetLayout(void)",
    "protected: struct HFONT__ * __thiscall DirectUI::HWNDHost::GetFont(void)",
    "public: __thiscall DirectUI::CCRadioButton::CCRadioButton(class DirectUI::CCRadioButton const &)",
    "private: long __thiscall DirectUI::BrowserSelectionProxy::GetIsSelectionRequired(int *)",
    "public: static int DirectUI::Schema::WindowPattern",
    "public: static long __stdcall DirectUI::RadioButtonGlyph::Register(void)",
    "public: static class DirectUI::HWNDElementProxy * __stdcall DirectUI::HWNDElementProxy::Create(class DirectUI::HWNDElement *)",
    "private: static long __stdcall DirectUI::EventManager::AddRectangleChange(class DirectUI::Element *,bool,bool)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::SelectorNoDefault::GetClassInfoW(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCTreeView::GetClassInfoPtr(void)",
    "public: struct tagSIZE const * __thiscall DirectUI::Element::GetExtent(class DirectUI::Value * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::IDProp(void)",
    "public: long __thiscall DirectUI::Macro::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: static int DirectUI::Schema::SelectionItemElementSelectedEvent",
    "public: long __thiscall DirectUI::BaseScrollViewer::SetXOffset(int)",
    "public: virtual void __thiscall DirectUI::Browser::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::CursorProp(void)",
    "public: virtual bool __thiscall DirectUI::CCPushButton::OnReceivedDialogFocus(class DirectUI::DialogElement *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Thumb::GetClassInfoPtr(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetPointZero(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseRGBColor(struct DirectUI::ParserTools::ExprNode const *,unsigned long *)",
    "const DirectUI::BaseScrollViewer::`vftable'{for `DirectUI::IElementListener'}",
    "const DirectUI::BorderLayout::`vftable'",
    "private: long __thiscall DirectUI::ScrollProxy::ScrollToVerticalPosition(int,bool)",
    "public: virtual long __stdcall DirectUI::SelectionProvider::get_CanSelectMultiple(int *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Expando::GetClassInfoW(void)",
    "private: static int __stdcall DirectUI::CallstackTracker::InitializeDllInfo(void)",
    "public: static long __stdcall DirectUI::EventManager::Init(void)",
    "const DirectUI::DuiAccessible::`vftable'{for `IEnumVARIANT'}",
    "public: static long __stdcall DirectUI::ElementWithHWND::Register(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accChild(struct tagVARIANT,struct IDispatch * *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetUnset(void)",
    "public: virtual long __stdcall DirectUI::ElementProvider::get_FragmentRoot(struct IRawElementProviderFragmentRoot * *)",
    "private: static int const DirectUI::CallstackTracker::INITIALSTACKSKIP",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCPushButton::s_pClassInfo",
    "private: void __thiscall DirectUI::Element::_InheritProperties(void)",
    "public: long __thiscall DirectUI::AutoThread::Init(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccNameProp(void)",
    "public: static class UID __stdcall DirectUI::Combobox::SelectionChange(void)",
    "private: static struct API_VERSION * (__stdcall* DirectUI::CallstackTracker::s_pfnImagehlpApiVersionEx)(struct API_VERSION *)",
    "public: class DirectUI::Thumb & __thiscall DirectUI::Thumb::operator=(class DirectUI::Thumb const &)",
    "public: static int DirectUI::Schema::NewNativeWindowHandleProperty",
    "const DirectUI::ToggleProxy::`vftable'",
    "public: virtual void __thiscall DirectUI::XBaby::OnNoChildWithShortcutFound(struct DirectUI::KeyboardEvent *)",
    "public: bool __thiscall DirectUI::Element::IsSelfLayout(void)",
    "public: static void __stdcall DirectUI::Browser::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static int DirectUI::Schema::ImageControlType",
    "public: virtual long __thiscall DirectUI::HWNDElement::CreateStyleParser(class DirectUI::DUIXmlParser * *)",
    "public: virtual void __thiscall DirectUI::NineGridLayout::OnAdd(class DirectUI::Element *,class DirectUI::Element * *,unsigned int)",
    "public: __thiscall DirectUI::IXElementCP::IXElementCP(void)",
    "private: void __thiscall DirectUI::Element::_UpdatePropertyInCache(struct DirectUI::PropertyInfo const *)",
    "public: static long __stdcall DirectUI::CCProgressBar::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual void __thiscall DirectUI::HWNDHost::OnEvent(struct DirectUI::Event *)",
    "private: long __thiscall DirectUI::Element::_PreSourceChange(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: __thiscall DirectUI::SelectorSelectionProxy::SelectorSelectionProxy(void)",
    "public: int __thiscall DirectUI::Progress::GetMaximum(void)",
    "public: long __thiscall DirectUI::Element::SetAccessible(bool)",
    "public: static long __stdcall DirectUI::CCPushButton::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static void __stdcall DirectUI::PushButton::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCTrackBar::GetClassInfoW(void)",
    "public: static int __stdcall DirectUI::Element::_MarkElementForLayout(class DirectUI::Element *,unsigned int)",
    "public: static void __stdcall DirectUI::RadioButtonGlyph::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "protected: virtual void __thiscall DirectUI::AnimationStrip::Paint(struct HDC__ *,struct tagRECT const *,struct tagRECT const *,struct tagRECT *,struct tagRECT *)",
    "public: virtual long __thiscall DirectUI::InvokeProxy::DoMethod(int,char *)",
    "public: virtual unsigned long __stdcall DirectUI::XProvider::AddRef(void)",
    "public: int __thiscall DirectUI::Combobox::AddString(unsigned short const *)",
    "private: virtual long __thiscall DirectUI::TaskPage::CreateDUICP(class DirectUI::HWNDElement *,struct HWND__ *,struct HWND__ *,class DirectUI::Element * *,class DirectUI::DUIXmlParser * *)",
    "private: void __thiscall DirectUI::NineGridLayout::_UpdateTileList(int,class DirectUI::Element *)",
    "public: bool __thiscall DirectUI::Element::IsValidAccessor(struct DirectUI::PropertyInfo const *,int,bool)",
    "public: static class UID __stdcall DirectUI::HWNDElement::ThemeChange(void)",
    "public: __thiscall DirectUI::SelectorNoDefault::SelectorNoDefault(void)",
    "public: __thiscall DirectUI::GridProxy::GridProxy(void)",
    "public: virtual bool __thiscall DirectUI::CCRadioButton::OnNotify(unsigned int,unsigned int,long,long *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseSysMetricStr(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: static long __stdcall DirectUI::CCAVI::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual bool __thiscall DirectUI::PText::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "protected: virtual void __thiscall DirectUI::SelectorSelectionProxy::Init(class DirectUI::Element *)",
    "public: static int DirectUI::Schema::SpinnerControlType",
    "void __stdcall DumpDuiTree(class DirectUI::Element *,int)",
    "public: static bool __stdcall DirectUI::EventManager::WantEvent(enum DirectUI::Schema::Event)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Expandable::GetClassInfoW(void)",
    "private: void __thiscall DirectUI::HWNDHost::GetSinkRect(struct tagRECT const *,struct tagRECT *)",
    "protected: virtual void __thiscall DirectUI::TaskPage::OnListenedEvent(class DirectUI::Element *,struct DirectUI::Event *)",
    "public: class DirectUI::BaseScrollViewer & __thiscall DirectUI::BaseScrollViewer::operator=(class DirectUI::BaseScrollViewer const &)",
    "public: __thiscall DirectUI::HWNDHost::HWNDHost(void)",
    "public: virtual void __thiscall DirectUI::Selector::OnEvent(struct DirectUI::Event *)",
    "public: __thiscall DirectUI::HWNDElementProvider::HWNDElementProvider(void)",
    "public: class DirectUI::Layout * __thiscall DirectUI::Element::GetLayout(class DirectUI::Value * *)",
    "public: static void __stdcall DirectUI::UnknownElement::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::ScrollItemProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: class DirectUI::Element * __thiscall DirectUI::Browser::GetCurrentPage(void)",
    "private: static long __stdcall DirectUI::EventManager::RaiseGeometryEventWorker(struct DirectUI::RectangleChange *,bool,bool,bool,bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ScrollBar::PageProp(void)",
    "public: int __thiscall DirectUI::Movie::GetCompositingQuality(void)",
    "public: virtual long __thiscall DirectUI::XResourceProvider::CreateDUICP(class DirectUI::HWNDElement *,struct HWND__ *,struct HWND__ *,class DirectUI::Element * *,class DirectUI::DUIXmlParser * *)",
    "public: virtual long __thiscall DirectUI::ScrollProxy::DoMethod(int,char *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::FontProp(void)",
    "public: virtual long __thiscall DirectUI::Button::DefaultAction(void)",
    "public: static long __stdcall DirectUI::CCTrackBar::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static long __stdcall DirectUI::HWNDElementProvider::Create(class DirectUI::HWNDElement *,class DirectUI::InvokeHelper *,class DirectUI::HWNDElementProvider * *)",
    "public: bool __thiscall DirectUI::CCBaseScrollBar::GetTracking(void)",
    "public: static int DirectUI::Schema::IsKeyboardFocusableProperty",
    "public: struct DirectUI::Fill const * __thiscall DirectUI::Element::GetBackgroundColor(class DirectUI::Value * *)",
    "protected: virtual class DirectUI::BaseScrollBar * __thiscall DirectUI::ScrollViewer::GetVScroll(void)",
    "public: static int DirectUI::Schema::TabItemControlType",
    "private: static struct DirectUI::AccessibleButton::ACCESSIBLEROLE const * const DirectUI::AccessibleButton::c_rgar",
    "public: __thiscall DirectUI::CritSecLock::CritSecLock(struct _RTL_CRITICAL_SECTION *)",
    "public: virtual void __thiscall DirectUI::RefPointElement::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: long __thiscall DirectUI::Element::Destroy(bool)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::YProp(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::_RecordElementLayout(struct IXmlReader *,unsigned short const *)",
    "public: static long __stdcall DirectUI::SelectorNoDefault::Register(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseColor(struct DirectUI::ParserTools::ExprNode const *,unsigned long *)",
    "public: static long __stdcall DirectUI::ShellBorderLayout::Create(class DirectUI::Layout * *)",
    "const DirectUI::UnknownElement::`vftable'",
    "public: static long __stdcall DirectUI::AccessibleButton::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: void __thiscall DirectUI::BaseScrollBar::OnPageChanged(class DirectUI::Value *)",
    "GetElementDataEntry",
    "protected: __thiscall DirectUI::SelectionItemProxy::SelectionItemProxy(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::DialogElement::ButtonClassAcceptsEnterKeyProp(void)",
    "public: virtual bool __thiscall DirectUI::ClassInfoBase::IsGlobal(void)const",
    "public: virtual long __thiscall DirectUI::Macro::Add(class DirectUI::Element * *,unsigned int)",
    "public: __thiscall DirectUI::XBaby::XBaby(void)",
    "public: virtual __thiscall DirectUI::Combobox::~Combobox(void)",
    "public: static void __stdcall DirectUI::CallstackTracker::Uninit(void)",
    "protected: struct HWND__ * __thiscall DirectUI::HWNDHost::CreateAccNameLabel(struct HWND__ *)",
    "public: void __thiscall DirectUI::NavReference::Init(class DirectUI::Element *,struct tagRECT *)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::Next(unsigned long,struct tagVARIANT *,unsigned long *)",
    "protected: void __thiscall DirectUI::AnimationStrip::AdvanceFrame(void)",
    "public: virtual __thiscall DirectUI::Thumb::~Thumb(void)",
    "public: unsigned short __thiscall DirectUI::Browser::GetCurrentPageID(void)",
    "public: virtual void __thiscall DirectUI::BaseScrollViewer::OnInput(struct DirectUI::InputEvent *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::SheetProp(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::StyledScrollViewer::GetClassInfoPtr(void)",
    "public: __thiscall DirectUI::IDataEngine::IDataEngine(void)",
    "public: static long __stdcall DirectUI::ElementProviderManager::Add(class DirectUI::ElementProvider *)",
    "protected: virtual void __thiscall DirectUI::Element::OnHosted(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::CCListView::Register(void)",
    "const DirectUI::ScrollProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: static bool __stdcall DirectUI::SelectionItemProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: static long (__stdcall* DirectUI::Schema::UiaRaiseAutomationEvent)(struct IRawElementProviderSimple *,int)",
    "public: struct tagPOINT const * __thiscall DirectUI::Value::GetPoint(void)",
    "public: virtual __thiscall DirectUI::FlowLayout::~FlowLayout(void)",
    "private: static bool DirectUI::Schema::g_fInited",
    "public: virtual long __thiscall DirectUI::Element::Add(class DirectUI::Element * *,unsigned int)",
    "public: static int DirectUI::Schema::ToolBarControlType",
    "protected: static unsigned short __stdcall DirectUI::Expando::Clipper(void)",
    "public: __thiscall DirectUI::AccessibleButton::AccessibleButton(class DirectUI::AccessibleButton const &)",
    "protected: virtual long __thiscall DirectUI::TaskPage::OnQueryCancel(void)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetAccNameAsDisplayed(class DirectUI::Value * *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCListView::s_pClassInfo",
    "private: static struct DirectUI::Schema::PatternInfo const * const DirectUI::Schema::g_patternInfoTable",
    "public: __thiscall DirectUI::FontCache::FontCache(void)",
    "public: class DirectUI::Element * __thiscall DirectUI::DialogElement::GetRegisteredDefaultButton(void)",
    "public: long __thiscall DirectUI::NativeHWNDHost::Initialize(unsigned short const *,struct HWND__ *,struct HICON__ *,int,int,int,int,int,int,unsigned int)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCTreeView::s_pClassInfo",
    "public: virtual void __thiscall DirectUI::DialogElement::OnListenedPropertyChanged(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static long __stdcall DirectUI::XElement::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual long __stdcall DirectUI::TableProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: class DirectUI::AccessibleButton & __thiscall DirectUI::AccessibleButton::operator=(class DirectUI::AccessibleButton const &)",
    "public: static long __stdcall DirectUI::Page::Register(void)",
    "private: static long __stdcall DirectUI::Schema::LookupPatternInfos(void)",
    "public: static int DirectUI::Schema::DataItemControlType",
    "public: virtual void __thiscall DirectUI::HWNDElement::RemoveTooltip(class DirectUI::Element *)",
    "protected: void __thiscall DirectUI::HWNDHost::SyncFont(void)",
    "public: class DirectUI::NavigatorSelectionItemProxy & __thiscall DirectUI::NavigatorSelectionItemProxy::operator=(class DirectUI::NavigatorSelectionItemProxy const &)",
    "public: virtual long __thiscall DirectUI::ProgressRangeValueProxy::DoMethod(int,char *)",
    "protected: long __thiscall DirectUI::Element::_SetValue(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,bool)",
    "public: long __thiscall DirectUI::DUIXmlParser::SetXMLFromResource(unsigned int,struct HINSTANCE__ *,struct HINSTANCE__ *)",
    "public: virtual long __thiscall DirectUI::ElementProxy::DoMethod(int,char *)",
    "public: virtual bool __thiscall DirectUI::Viewer::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static long __stdcall DirectUI::CCSysLink::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static long __stdcall DirectUI::Navigator::Register(void)",
    "const DirectUI::IXProviderCP::`vftable'",
    "private: static long __stdcall DirectUI::EventManager::HandleAccStateChange(struct IRawElementProviderSimple *,unsigned int,unsigned int,int,struct tagVARIANT *,struct tagVARIANT *)",
    "public: int __thiscall DirectUI::Combobox::GetSelection(void)",
    "public: long __thiscall DirectUI::CCProgressBar::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::DialogElement::s_pClassInfo",
    "const DirectUI::ScrollBar::`vftable'{for `DirectUI::BaseScrollBar'}",
    "public: long __thiscall DirectUI::TaskPage::DUICreatePropertySheetPage(struct HINSTANCE__ *)",
    "public: __thiscall DirectUI::TableItemProxy::TableItemProxy(class DirectUI::TableItemProxy const &)",
    "public: virtual __thiscall DirectUI::NineGridLayout::~NineGridLayout(void)",
    "public: virtual bool __thiscall DirectUI::XElement::OnSinkThemeChanged(unsigned int,unsigned int,long,long *)",
    "public: void __thiscall DirectUI::Movie::Play(void)",
    "private: static long __stdcall DirectUI::EventManager::HandleStringProp(struct IRawElementProviderSimple *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::BaseScrollViewer::GetClassInfoPtr(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Progress::PositionProp(void)",
    "public: virtual void __thiscall DirectUI::HWNDElement::ActivateTooltip(class DirectUI::Element *,unsigned long)",
    "public: virtual struct tagSIZE __thiscall DirectUI::NineGridLayout::UpdateDesiredSize(class DirectUI::Element *,int,int,class DirectUI::Surface *)",
    "protected: void __thiscall DirectUI::DUIXmlParser::SendParseError(unsigned short const *,unsigned short const *,int,int,long)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateElementList(class DirectUI::DynamicArray *)",
    "public: virtual void __thiscall DirectUI::Element::HandleUiaDestroyListener(void)",
    "public: static int DirectUI::Schema::Scroll_HorizontallyScrollable_Property",
    "const DirectUI::RefcountBase::`vftable'",
    "public: __thiscall DirectUI::CCCommandLink::CCCommandLink(unsigned long)",
    "public: static long __stdcall DirectUI::Schema::Init(void)",
    "public: __thiscall DirectUI::IProvider::IProvider(class DirectUI::IProvider const &)",
    "protected: struct tagSIZE __thiscall DirectUI::FlowLayout::BuildCacheInfo(class DirectUI::Element *,int,int,class DirectUI::Surface *,bool)",
    "public: virtual long __stdcall DirectUI::ToggleProvider::get_ToggleState(enum ToggleState *)",
    "public: virtual void __thiscall DirectUI::BaseScrollBar::LineUp(unsigned int)",
    "public: virtual bool __thiscall DirectUI::CCPushButton::GetButtonColor(struct HDC__ *,struct HBRUSH__ * *)",
    "public: virtual void __thiscall DirectUI::CCProgressBar::OnInput(struct DirectUI::InputEvent *)",
    "const DirectUI::HWNDElementProvider::`vftable'{for `IRawElementProviderAdviseEvents'}",
    "public: virtual bool __thiscall DirectUI::TextGraphic::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "const DirectUI::RepeatButton::`vftable'",
    "public: static long __stdcall DirectUI::NineGridLayout::Create(int,int *,class DirectUI::Value * *)",
    "public: virtual long __stdcall DirectUI::RangeValueProvider::get_LargeChange(double *)",
    "const DirectUI::TableProxy::`vftable'",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Expandable::ExpandedProp(void)",
    "public: int __thiscall DirectUI::CCListBox::GetCount(void)",
    "public: __thiscall DirectUI::PushButton::PushButton(void)",
    "public: static long __stdcall DirectUI::RadioButtonGlyph::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: unsigned long __stdcall DirectUI::Element::Release(void)",
    "public: class DirectUI::ProgressRangeValueProxy & __thiscall DirectUI::ProgressRangeValueProxy::operator=(class DirectUI::ProgressRangeValueProxy const &)",
    "public: long __thiscall DirectUI::DUIXmlParser::UpdateSheets(class DirectUI::Element *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Button::GetClassInfoPtr(void)",
    "public: long __thiscall DirectUI::Page::Initialize(class DirectUI::Element *,unsigned long *)",
    "const DirectUI::ScrollBar::`vftable'{for `DirectUI::Element'}",
    "public: virtual long __stdcall DirectUI::ScrollProvider::get_VerticalViewSize(double *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::RepeatProp(void)",
    "public: virtual void __thiscall DirectUI::DialogElement::OnListenedInput(class DirectUI::Element *,struct DirectUI::InputEvent *)",
    "public: class DirectUI::Navigator & __thiscall DirectUI::Navigator::operator=(class DirectUI::Navigator const &)",
    "public: void __thiscall DirectUI::CCTreeView::`default constructor closure'(void)",
    "const DirectUI::HWNDHostClientAccessible::`vftable'{for `IServiceProvider'}",
    "public: virtual __thiscall DirectUI::CCBaseScrollBar::~CCBaseScrollBar(void)",
    "public: static long __stdcall DirectUI::StyledScrollViewer::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::GetIdentityString(unsigned long,unsigned char * *,unsigned long *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::BaseScrollViewer::XOffsetProp(void)",
    "public: unsigned short __thiscall DirectUI::Element::GetID(void)",
    "public: long __thiscall DirectUI::Element::RemoveLocalValue(struct DirectUI::PropertyInfo const *)",
    "public: void __thiscall DirectUI::XBaby::CacheParser(class DirectUI::DUIXmlParser *)",
    "public: int __thiscall DirectUI::Movie::GetPixelOffsetMode(void)",
    "public: static int DirectUI::Schema::WindowWindowOpenedEvent",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::XBaby::GetClassInfoW(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCTrackBar::s_pClassInfo",
    "public: __thiscall DirectUI::XBaby::XBaby(class DirectUI::XBaby const &)",
    "public: static int DirectUI::Schema::InvokePattern",
    "public: static void __stdcall DirectUI::Clipper::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: void __thiscall DirectUI::BaseScrollBar::OnMinimumChanged(class DirectUI::Value *)",
    "public: class DirectUI::Element * __thiscall DirectUI::Pages::GetPage(unsigned short const *)",
    "const DirectUI::CheckBoxGlyph::`vftable'",
    "public: static int DirectUI::Schema::BoundingRectangleProperty",
    "private: static struct DirectUI::IClassInfo * DirectUI::UnknownElement::s_pClassInfo",
    "public: virtual __thiscall DirectUI::ValueProvider::~ValueProvider(void)",
    "private: long __thiscall DirectUI::GridItemProxy::GetColumn(int *)",
    "EnableAnimations",
    "public: static int DirectUI::Schema::DockPattern",
    "public: static long __stdcall DirectUI::XProvider::Create(class DirectUI::Element *,class DirectUI::IXProviderCP *,class DirectUI::XProvider * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseStringValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: __thiscall DirectUI::VerticalFlowLayout::VerticalFlowLayout(void)",
    "public: virtual struct tagSIZE __thiscall DirectUI::Element::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: struct HWND__ * __thiscall DirectUI::TaskPage::GetParentHWND(void)",
    "public: class DirectUI::Selector & __thiscall DirectUI::Selector::operator=(class DirectUI::Selector const &)",
    "public: virtual unsigned long __stdcall DirectUI::DuiAccessible::AddRef(void)",
    "const DirectUI::SelectionItemProvider::`vftable'",
    "const DirectUI::CCTreeView::`vftable'",
    "public: long __thiscall DirectUI::Element::SetAccState(int)",
    "public: __thiscall DirectUI::IDataEntry::IDataEntry(void)",
    "public: __thiscall DirectUI::NavigatorSelectionItemProxy::NavigatorSelectionItemProxy(class DirectUI::NavigatorSelectionItemProxy const &)",
    "public: static long __stdcall DirectUI::ElementProvider::Create(class DirectUI::Element *,class DirectUI::InvokeHelper *,class DirectUI::ElementProvider * *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCListBox::GetClassInfoW(void)",
    "public: int __thiscall DirectUI::Layout::GetLayoutIndexFromChild(class DirectUI::Element *,class DirectUI::Element *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCHScrollBar::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: virtual void __thiscall DirectUI::ClassInfoBase::AssertPIZeroRef(void)const",
    "public: virtual void __thiscall DirectUI::Combobox::OnInput(struct DirectUI::InputEvent *)",
    "public: void __thiscall DirectUI::Element::_EndOptimizedLayoutQ(void)",
    "public: __thiscall DirectUI::AutoThread::AutoThread(void)",
    "public: void __thiscall DirectUI::DUIXmlParser::Destroy(void)",
    "RegisterExtendedControls",
    "public: class DirectUI::TableItemProxy & __thiscall DirectUI::TableItemProxy::operator=(class DirectUI::TableItemProxy const &)",
    "public: class DirectUI::CCTrackBar & __thiscall DirectUI::CCTrackBar::operator=(class DirectUI::CCTrackBar const &)",
    "public: long __thiscall DirectUI::Element::SetHeight(int)",
    "public: virtual void __thiscall DirectUI::PatternProvider::Init(class DirectUI::ElementProvider *)",
    "public: static int DirectUI::Schema::SelectionItem_IsSelected_Property",
    "public: static void __stdcall DirectUI::Movie::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual __thiscall DirectUI::RowLayout::~RowLayout(void)",
    "public: virtual void __thiscall DirectUI::DialogElement::OnGetDlgCode(struct tagMSG *,long *)",
    "public: class DirectUI::SelectorSelectionProxy & __thiscall DirectUI::SelectorSelectionProxy::operator=(class DirectUI::SelectorSelectionProxy const &)",
    "public: bool __thiscall DirectUI::Element::UiaEvents(void)",
    "public: int __thiscall DirectUI::AnimationStrip::GetFrameDuration(void)",
    "private: static long __stdcall DirectUI::Schema::GetProcs(void)",
    "public: virtual void __thiscall DirectUI::Progress::Paint(struct HDC__ *,struct tagRECT const *,struct tagRECT const *,struct tagRECT *,struct tagRECT *)",
    "public: __thiscall DirectUI::Selector::Selector(void)",
    "public: virtual void __thiscall DirectUI::Thumb::OnInput(struct DirectUI::InputEvent *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetStringNull(void)",
    "public: static long __stdcall DirectUI::CCBase::Register(void)",
    "public: void __thiscall DirectUI::CCBase::`default constructor closure'(void)",
    "public: __thiscall DirectUI::CCBaseScrollBar::CCBaseScrollBar(class DirectUI::CCBaseScrollBar const &)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateLayout(class DirectUI::Layout *)",
    "public: __thiscall DirectUI::SelectionItemProxy::SelectionItemProxy(class DirectUI::SelectionItemProxy const &)",
    "protected: virtual void __thiscall DirectUI::ScrollItemProxy::Init(class DirectUI::Element *)",
    "protected: void __thiscall DirectUI::Proxy::Invoke(unsigned int,void *)",
    "public: __thiscall DirectUI::GridLayout::GridLayout(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::HWNDHost::ThemeChangedProp(void)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnNoChildWithShortcutFound(struct DirectUI::KeyboardEvent *)",
    "public: static long __stdcall DirectUI::AnimationStrip::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::CCListBox::`vftable'",
    "public: long __thiscall DirectUI::Movie::SetRepeat(bool)",
    "public: class DirectUI::Pages & __thiscall DirectUI::Pages::operator=(class DirectUI::Pages const &)",
    "public: static void __stdcall DirectUI::Expandable::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::GridProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::Layout::Create(class DirectUI::Layout * *)",
    "const DirectUI::CCSysLink::`vftable'",
    "public: long __thiscall DirectUI::Element::SetFontWeight(int)",
    "public: virtual __thiscall DirectUI::HWNDElementAccessible::~HWNDElementAccessible(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::AnimationStrip::s_pClassInfo",
    "public: int __thiscall DirectUI::Value::GetType(void)const",
    "private: static long __stdcall DirectUI::EventManager::GetBool(struct tagVARIANT *,class DirectUI::Value *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::RowLayout::UpdateDesiredSize(class DirectUI::Element *,int,int,class DirectUI::Surface *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseARGBColor(struct DirectUI::ParserTools::ExprNode const *,unsigned long *)",
    "public: class DirectUI::ScrollViewer & __thiscall DirectUI::ScrollViewer::operator=(class DirectUI::ScrollViewer const &)",
    "public: static long __stdcall DirectUI::TextGraphic::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::RepeatButton::GetClassInfoW(void)",
    "public: class DirectUI::Value * (__stdcall*__thiscall DirectUI::DUIXmlParser::GetGetSheetCallback(void))(unsigned short const *,void *)",
    "const DirectUI::DuiAccessible::`vftable'{for `IServiceProvider'}",
    "public: static long __stdcall DirectUI::CCProgressBar::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: __thiscall DirectUI::AutoVariant::~AutoVariant(void)",
    "public: __thiscall DirectUI::Browser::Browser(class DirectUI::Browser const &)",
    "public: long __thiscall DirectUI::Viewer::SetXScrollable(bool)",
    "public: bool __thiscall DirectUI::Element::IsDescendent(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::Element::SetAccName(unsigned short const *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::FillLayout::UpdateDesiredSize(class DirectUI::Element *,int,int,class DirectUI::Surface *)",
    "protected: virtual void __thiscall DirectUI::TaskPage::OnListenedInput(class DirectUI::Element *,struct DirectUI::InputEvent *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AnimationProp(void)",
    "private: void __thiscall DirectUI::Value::_ZeroRelease(void)",
    "protected: virtual unsigned int __thiscall DirectUI::TaskPage::GetPageRCID(void)",
    "public: __thiscall DirectUI::Surface::Surface(void)",
    "private: long __thiscall DirectUI::Element::_GetDependencies(struct DirectUI::PropertyInfo const *,int,struct DirectUI::DepRecs *,int,class DirectUI::Value *,class DirectUI::DeferCycle *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCTreeView::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: void __thiscall DirectUI::CCTreeView::SetItemState(struct _TREEITEM *,unsigned int)",
    "private: static int __stdcall DirectUI::HWNDHost::_SinkWndProc(void *,struct HWND__ *,unsigned int,unsigned int,long,long *)",
    "public: void __thiscall DirectUI::DuiAccessible::Initialize(class DirectUI::Element *)",
    "public: virtual long __stdcall DirectUI::HWNDHostClientAccessible::get_accParent(struct IDispatch * *)",
    "public: virtual unsigned short const * __thiscall DirectUI::Element::GetContentStringAsDisplayed(class DirectUI::Value * *)",
    "public: class DirectUI::RepeatButton & __thiscall DirectUI::RepeatButton::operator=(class DirectUI::RepeatButton const &)",
    "public: __thiscall DirectUI::FontCache::FontCache(class DirectUI::FontCache const &)",
    "public: void __thiscall DirectUI::Element::_ClearNeedsLayout(void)",
    "public: __thiscall DirectUI::Browser::Browser(void)",
    "protected: virtual long __thiscall DirectUI::CCTreeView::_OnGetInfoTip(struct tagNMTVGETINFOTIPW const *)",
    "public: __thiscall DirectUI::IDataEngine::IDataEngine(struct DirectUI::IDataEngine const &)",
    "public: __thiscall DirectUI::GridProvider::GridProvider(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ScrollBar::PositionProp(void)",
    "private: static int __stdcall DirectUI::CallstackTracker::IsCorrectImageHlpVersion(void)",
    "private: static bool * DirectUI::EventManager::g_eventRegisteredMap",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseLiteral(struct DirectUI::ParserTools::ExprNode const *,unsigned short const * *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCPushButton::EstimateContentSize(int,int,class DirectUI::Surface *)",
    "public: int __thiscall DirectUI::CCListBox::AddString(unsigned short const *)",
    "public: virtual void __thiscall DirectUI::GridLayout::DoLayout(class DirectUI::Element *,int,int)",
    "public: virtual void __thiscall DirectUI::CCBaseCheckRadioButton::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "private: long __thiscall DirectUI::ScrollProxy::ScrollLine(bool,bool)",
    "public: virtual void __thiscall DirectUI::CCCheckBox::OnInput(struct DirectUI::InputEvent *)",
    "public: class DirectUI::ScrollBar & __thiscall DirectUI::ScrollBar::operator=(class DirectUI::ScrollBar const &)",
    "protected: void __thiscall DirectUI::AnimationStrip::OnAction(struct GMA_ACTIONINFO *)",
    "const DirectUI::HWNDElementProvider::`vftable'",
    "public: virtual long __thiscall DirectUI::HWNDElement::WndProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: __thiscall DirectUI::ScrollProxy::ScrollProxy(void)",
    "public: virtual void __thiscall DirectUI::XBaby::OnWmThemeChanged(unsigned int,long)",
    "private: static struct DirectUI::CallstackTracker::IMGHLPFN_LOAD * DirectUI::CallstackTracker::s_ImageHlpFuncList",
    "protected: static void __stdcall DirectUI::Element::_FlushLayout(class DirectUI::Element *,class DirectUI::DeferCycle *)",
    "public: virtual void __thiscall DirectUI::BorderLayout::OnLayoutPosChanged(class DirectUI::Element *,class DirectUI::Element *,int,int)",
    "public: long __thiscall DirectUI::Element::SetForegroundColor(unsigned long,unsigned long,unsigned long,unsigned char)",
    "private: static int (__stdcall* DirectUI::CallstackTracker::s_pfnSymFromAddr)(void *,unsigned __int64,unsigned __int64 *,struct _SYMBOL_INFO *)",
    "public: long __thiscall DirectUI::XElement::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: long __thiscall DirectUI::AnimationStrip::SetFrameIndex(int)",
    "public: struct HDC__ * __thiscall DirectUI::DCSurface::GetHDC(void)",
    "public: static long (__stdcall* DirectUI::Schema::UiaReturnRawElementProvider)(struct HWND__ *,unsigned int,long,struct IRawElementProviderSimple *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::PText::s_pClassInfo",
    "public: static bool __stdcall DirectUI::ScrollItemProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: class DirectUI::CCProgressBar & __thiscall DirectUI::CCProgressBar::operator=(class DirectUI::CCProgressBar const &)",
    "public: long __thiscall DirectUI::Element::SetCursor(unsigned short const *)",
    "protected: virtual void __thiscall DirectUI::TaskPage::OnListenerAttach(class DirectUI::Element *)",
    "public: static long __stdcall DirectUI::CCAVI::Register(void)",
    "public: virtual bool __thiscall DirectUI::CCPushButton::OnLostDialogFocus(class DirectUI::DialogElement *)",
    "public: virtual long __thiscall DirectUI::XBaby::CreateStyleParser(class DirectUI::DUIXmlParser * *)",
    "public: static void __stdcall DirectUI::Element::_TransferGroupFlags(class DirectUI::Element *,int)",
    "public: __thiscall DirectUI::Edit::Edit(class DirectUI::Edit const &)",
    "public: virtual long __stdcall DirectUI::ScrollItemProvider::ScrollIntoView(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateString(unsigned short const *,struct HINSTANCE__ *)",
    "public: virtual void __thiscall DirectUI::BaseScrollViewer::OnListenerDetach(class DirectUI::Element *)",
    "public: __thiscall DirectUI::Thumb::Thumb(class DirectUI::Thumb const &)",
    "public: long __thiscall DirectUI::BaseScrollViewer::SetXScrollable(bool)",
    "public: virtual bool __thiscall DirectUI::Combobox::OnNotify(unsigned int,unsigned int,long,long *)",
    "public: static class UID __stdcall DirectUI::BaseScrollBar::Scroll(void)",
    "public: class DirectUI::AutoButton & __thiscall DirectUI::AutoButton::operator=(class DirectUI::AutoButton const &)",
    "protected: static struct DirectUI::DUIXmlParser::FunctionDefinition const * const DirectUI::DUIXmlParser::s_fdFill",
    "public: static long __stdcall DirectUI::HWNDHost::Register(void)",
    "protected: static unsigned short const * __stdcall DirectUI::DUIXmlParser::QuerySysMetricStr(int,unsigned short *,unsigned int)",
    "public: void __thiscall DirectUI::AccessibleButton::Recalc(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Bind::PropertyProp(void)",
    "public: static int DirectUI::Schema::TableControlType",
    "public: virtual long __thiscall DirectUI::ValueProxy::DoMethod(int,char *)",
    "public: static long __stdcall DirectUI::Element::Register(void)",
    "public: struct DirectUI::Cursor * __thiscall DirectUI::Value::GetCursor(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseResid(struct DirectUI::ParserTools::ExprNode const *,unsigned short const * *)",
    "public: virtual long __thiscall DirectUI::Selector::SetSelection(class DirectUI::Element *)",
    "public: void __thiscall DirectUI::Element::BroadcastEvent(struct DirectUI::Event *)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accName(struct tagVARIANT,unsigned short * *)",
    "public: static class DirectUI::ExpandCollapseProxy * __stdcall DirectUI::ExpandCollapseProxy::Create(class DirectUI::Element *)",
    "public: virtual void __thiscall DirectUI::DialogElement::OnDestroy(void)",
    "public: virtual long __stdcall DirectUI::HWNDElementProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::WidthProp(void)",
    "public: int __thiscall DirectUI::Element::GetFontSize(void)",
    "public: virtual long __stdcall DirectUI::GridProvider::get_ColumnCount(int *)",
    "public: class DirectUI::DynamicArray * __thiscall DirectUI::Element::GetChildren(class DirectUI::Value * *)",
    "public: void __thiscall DirectUI::HWNDElement::DelayActivateTooltip(void)",
    "public: int __thiscall DirectUI::Element::GetTextGlowSize(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateEncodedString(unsigned short const *)",
    "public: unsigned int __thiscall DirectUI::CCTreeView::GetItemState(struct _TREEITEM * const)",
    "public: virtual void __thiscall DirectUI::Layout::OnAdd(class DirectUI::Element *,class DirectUI::Element * *,unsigned int)",
    "public: class DirectUI::Element * __thiscall DirectUI::XHost::GetElement(void)",
    "const DirectUI::Bind::`vftable'",
    "public: __thiscall DirectUI::VerticalFlowLayout::VerticalFlowLayout(class DirectUI::VerticalFlowLayout const &)",
    "public: class DirectUI::SelectorSelectionItemProxy & __thiscall DirectUI::SelectorSelectionItemProxy::operator=(class DirectUI::SelectorSelectionItemProxy const &)",
    "private: void __thiscall DirectUI::Element::_SyncBackground(void)",
    "public: static bool __stdcall DirectUI::ExpandCollapseProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: static void __stdcall DirectUI::CCPushButton::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseGradientFill(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: __thiscall DirectUI::CCCommandLink::CCCommandLink(class DirectUI::CCCommandLink const &)",
    "public: __thiscall DirectUI::CCHScrollBar::CCHScrollBar(class DirectUI::CCHScrollBar const &)",
    "public: virtual __thiscall DirectUI::SelectorNoDefault::~SelectorNoDefault(void)",
    "public: static int DirectUI::Schema::TablePattern",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCVScrollBar::s_pClassInfo",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateExpression(class DirectUI::Expression *)",
    "public: class DirectUI::Surface & __thiscall DirectUI::Surface::operator=(class DirectUI::Surface const &)",
    "public: long __thiscall DirectUI::Element::SetFontStyle(int)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::ExpandoButtonGlyph::GetClassInfoPtr(void)",
    "public: virtual __thiscall DirectUI::ToggleProvider::~ToggleProvider(void)",
    "public: virtual __thiscall DirectUI::TableItemProvider::~TableItemProvider(void)",
    "public: virtual bool __thiscall DirectUI::Element::OnPropertyChanging(struct DirectUI::PropertyInfo *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "protected: virtual void __thiscall DirectUI::NavigatorSelectionItemProxy::Init(class DirectUI::Element *)",
    "public: class DirectUI::ShellBorderLayout & __thiscall DirectUI::ShellBorderLayout::operator=(class DirectUI::ShellBorderLayout const &)",
    "public: void __thiscall DirectUI::Element::PaintBackground(struct HDC__ *,class DirectUI::Value *,struct tagRECT const &,struct tagRECT const &,struct tagRECT const &,struct tagRECT const &)",
    "public: static bool __stdcall DirectUI::EventManager::WantPropertyEvent(int)",
    "public: static long __stdcall DirectUI::RowLayout::Create(unsigned int,unsigned int,class DirectUI::Layout * *)",
    "const DirectUI::ToggleProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: static void __stdcall DirectUI::Button::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::PText::GetClassInfoW(void)",
    "public: long __thiscall DirectUI::Repeater::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: static void __stdcall DirectUI::PText::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: class DirectUI::LinkedListNode * __thiscall DirectUI::LinkedList::RemoveTail(void)",
    "public: void __thiscall DirectUI::XHost::HideWindow(void)",
    "public: virtual __thiscall DirectUI::InvokeHelper::~InvokeHelper(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Thumb::GetClassInfoW(void)",
    "RegisterBaseControls",
    "public: __thiscall DirectUI::InvokeProxy::InvokeProxy(class DirectUI::InvokeProxy const &)",
    "public: static void __stdcall DirectUI::CCListView::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::Clone(struct IEnumVARIANT * *)",
    "public: virtual long __stdcall DirectUI::ElementProvider::get_BoundingRectangle(struct UiaRect *)",
    "public: class DirectUI::Element * __thiscall DirectUI::Element::FindDescendent(unsigned short)",
    "public: static long __stdcall DirectUI::TextGraphic::Register(void)",
    "private: static unsigned __int64 (__stdcall* DirectUI::CallstackTracker::s_pfnSymLoadModule64)(void *,void *,char const *,char const *,unsigned __int64,unsigned long)",
    "public: __thiscall DirectUI::ElementProxy::ElementProxy(class DirectUI::ElementProxy const &)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::Element::GetAdjacent(class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: virtual long __stdcall DirectUI::SelectionProvider::GetSelection(struct tagSAFEARRAY * *)",
    "public: bool __thiscall DirectUI::HWNDHost::GetOptimizeMove(void)",
    "public: static struct _RTL_CRITICAL_SECTION DirectUI::ElementProviderManager::g_cs",
    "public: virtual bool __thiscall DirectUI::ScrollBar::GetProportional(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ForegroundProp(void)",
    "public: __thiscall DirectUI::FontCheckOut::FontCheckOut(class DirectUI::Element *,struct HDC__ *)",
    "public: long __thiscall DirectUI::AccessibleButton::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: int __thiscall DirectUI::NativeHWNDHost::RestoreFocus(void)",
    "const DirectUI::RangeValueProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: __thiscall DirectUI::CCSysLink::CCSysLink(class DirectUI::CCSysLink const &)",
    "const DirectUI::Clipper::`vftable'",
    "public: static unsigned int __stdcall DirectUI::NativeHWNDHost::AsyncDestroyMsg(void)",
    "public: int __thiscall DirectUI::Progress::GetMinimum(void)",
    "private: static int __stdcall DirectUI::HWNDHost::_CtrlWndProc(void *,struct HWND__ *,unsigned int,unsigned int,long,long *)",
    "protected: virtual void __thiscall DirectUI::ExpandCollapseProxy::Init(class DirectUI::Element *)",
    "public: virtual __thiscall DirectUI::Proxy::~Proxy(void)",
    "public: __thiscall DirectUI::TextGraphic::TextGraphic(void)",
    "public: virtual bool __thiscall DirectUI::Element::IsRTLReading(void)",
    "public: void __thiscall DirectUI::Expression::Destroy(void)",
    "public: static long __stdcall DirectUI::Combobox::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static long __stdcall DirectUI::UnknownElement::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "protected: virtual long __thiscall DirectUI::ElementProvider::Init(class DirectUI::Element *,class DirectUI::InvokeHelper *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::MapPropertyNameToPropertyInfo(struct DirectUI::LINEINFO,struct DirectUI::IClassInfo *,unsigned short const *,struct DirectUI::PropertyInfo const * *)",
    "public: static int DirectUI::Schema::TabControlType",
    "public: virtual __thiscall DirectUI::PushButton::~PushButton(void)",
    "public: unsigned short const * __thiscall DirectUI::CCCommandLink::GetNote(class DirectUI::Value * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::TooltipMaxWidthProp(void)",
    "public: __thiscall DirectUI::StyleSheet::StyleSheet(class DirectUI::StyleSheet const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Edit::ThemedBorderProp(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseQuotedString(struct DirectUI::ParserTools::ExprNode const *,unsigned short const * *)",
    "public: class DirectUI::Proxy & __thiscall DirectUI::Proxy::operator=(class DirectUI::Proxy const &)",
    "protected: long __thiscall DirectUI::ElementProxy::GetProperty(struct tagVARIANT *,int)",
    "RegisterAllControls",
    "const DirectUI::CCVScrollBar::`vftable'{for `DirectUI::CCBase'}",
    "public: __thiscall DirectUI::AutoLock::AutoLock(struct _RTL_CRITICAL_SECTION *)",
    "public: static long __stdcall DirectUI::Expando::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: __thiscall DirectUI::ResourceModuleHandles::ResourceModuleHandles(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::GetPropValPairInfo(struct IXmlReader *,struct DirectUI::IClassInfo *,unsigned short const *,unsigned short const *,struct DirectUI::PropertyInfo const * *,class DirectUI::Value * *)",
    "public: virtual __thiscall DirectUI::AnimationStrip::~AnimationStrip(void)",
    "public: long __thiscall DirectUI::XResourceProvider::Initialize(struct HINSTANCE__ *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "const DirectUI::ScrollViewer::`vftable'{for `DirectUI::Element'}",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::HWNDHost::TransparentProp(void)",
    "public: int __thiscall DirectUI::BaseScrollViewer::GetYOffset(void)",
    "public: virtual bool __thiscall DirectUI::CCBase::OnReceivedDialogFocus(class DirectUI::DialogElement *)",
    "public: static int DirectUI::Schema::Grid_ColumnCount_Property",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Viewer::GetClassInfoPtr(void)",
    "const DirectUI::TableItemProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "const DirectUI::HWNDElementProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCVScrollBar::GetClassInfoPtr(void)",
    "public: virtual __thiscall DirectUI::CCSysLink::~CCSysLink(void)",
    "public: virtual struct tagSIZE __thiscall DirectUI::Progress::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::ExpandoButtonGlyph::GetClassInfoW(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetSheetNull(void)",
    "public: virtual __thiscall DirectUI::ScrollViewer::~ScrollViewer(void)",
    "private: static struct DirectUI::Schema::EventMap const * const DirectUI::Schema::g_eventMapping",
    "public: static int DirectUI::Schema::GroupControlType",
    "protected: static bool __stdcall DirectUI::DialogElement::IsButtonEnabledAndVisible(class DirectUI::Element *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseLiteralColorInt(unsigned short const *,int *)",
    "public: static long __stdcall DirectUI::InvokeManager::Init(void)",
    "protected: void __thiscall DirectUI::DUIXmlParser::_LeaveOnCurrentThread(void)",
    "public: long __thiscall DirectUI::Element::GetEncodedContentString(unsigned short *,unsigned int)",
    "public: float __thiscall DirectUI::Element::GetTreeAlphaLevel(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Navigator::GetClassInfoPtr(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::ScrollBar::GetClassInfoPtr(void)",
    "public: void __thiscall DirectUI::XHost::ShowWindow(int)",
    "public: bool __thiscall DirectUI::HWNDElement::ShowFocus(void)",
    "protected: void __thiscall DirectUI::Element::MarkHosted(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::RefPointElement::s_pClassInfo",
    "public: static class UID __stdcall DirectUI::Thumb::Drag(void)",
    "public: virtual long __stdcall DirectUI::SelectionItemProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: class DirectUI::SelectorNoDefault & __thiscall DirectUI::SelectorNoDefault::operator=(class DirectUI::SelectorNoDefault const &)",
    "public: virtual void __thiscall DirectUI::BaseScrollBar::PageDown(unsigned int)",
    "public: static int DirectUI::Schema::MultipleViewPattern",
    "public: struct DirectUI::Fill const * __thiscall DirectUI::Value::GetFill(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateFill(struct DirectUI::Fill const &)",
    "ElementFromGadget",
    "public: long __thiscall DirectUI::Element::RemoveAll(void)",
    "public: static long __stdcall DirectUI::CCVScrollBar::Register(void)",
    "const DirectUI::PText::`vftable'",
    "public: virtual long __stdcall DirectUI::DuiAccessible::get_accParent(struct IDispatch * *)",
    "public: virtual void __thiscall DirectUI::Viewer::OnInput(struct DirectUI::InputEvent *)",
    "protected: void __thiscall DirectUI::HWNDHost::SyncBackground(void)",
    "public: int __thiscall DirectUI::Element::GetFontQuality(void)",
    "private: class DirectUI::Value * __thiscall DirectUI::Element::_GetSpecifiedValueIgnoreCache(struct DirectUI::PropertyInfo const *)",
    "protected: virtual struct HWND__ * __thiscall DirectUI::Edit::CreateHWND(struct HWND__ *)",
    "public: static int (__stdcall* DirectUI::Schema::UiaLookupId)(enum AutomationIdentifierType,struct _GUID const *)",
    "public: bool __thiscall DirectUI::Element::HasChildren(void)",
    "public: struct tagSIZE const * __thiscall DirectUI::Value::GetSize(void)",
    "public: void __thiscall DirectUI::DUIXmlParser::SetDefaultHInstance(struct HINSTANCE__ *)",
    "private: unsigned int __thiscall DirectUI::Element::GetCommonDrawTextFlags(int)",
    "public: long __thiscall DirectUI::Clipper::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: static int DirectUI::Schema::DocumentControlType",
    "public: static int DirectUI::Schema::Orientation",
    "SetDefAction",
    "public: virtual __thiscall DirectUI::BorderLayout::~BorderLayout(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccItemTypeProp(void)",
    "public: virtual void __thiscall DirectUI::CCBaseScrollBar::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::DirectionProp(void)",
    "protected: long __thiscall DirectUI::DuiAccessible::GetAccName(struct tagVARIANT,int,unsigned short * *)",
    "const DirectUI::InvokeProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: virtual __thiscall DirectUI::ShellBorderLayout::~ShellBorderLayout(void)",
    "const DirectUI::StyleSheet::`vftable'",
    "protected: struct DirectUI::LINEINFO __thiscall DirectUI::DUIXmlParser::_GetLineInfo(struct IXmlReader *)",
    "public: virtual unsigned long __stdcall DirectUI::TableProvider::Release(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccessibleProp(void)",
    "public: virtual long __thiscall DirectUI::CCBase::DefaultAction(void)",
    "public: __thiscall DirectUI::RefPointElement::RefPointElement(class DirectUI::RefPointElement const &)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetUnavailable(void)",
    "public: __thiscall DirectUI::HWNDElement::HWNDElement(class DirectUI::HWNDElement const &)",
    "public: int __thiscall DirectUI::Element::GetIndex(void)",
    "public: static int DirectUI::Schema::Selection_Selection_Property",
    "public: virtual long __thiscall DirectUI::HWNDElementProxy::DoMethod(int,char *)",
    "const DirectUI::HWNDElementAccessible::`vftable'{for `IAccessible'}",
    "public: __thiscall DirectUI::CCAVI::CCAVI(void)",
    "protected: static unsigned short __stdcall DirectUI::Expando::Arrow(void)",
    "public: __thiscall DirectUI::SelectorSelectionProxy::SelectorSelectionProxy(class DirectUI::SelectorSelectionProxy const &)",
    "private: void __thiscall DirectUI::TaskPage::FreeComCtl32(void)",
    "public: __thiscall DirectUI::ToggleProvider::ToggleProvider(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCRadioButton::GetClassInfoPtr(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::HWNDHost::OptimizeMoveProp(void)",
    "private: long __thiscall DirectUI::ValueProxy::GetValue(unsigned short * *)",
    "public: __thiscall DirectUI::DialogElement::DialogElement(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Edit::WantTabsProp(void)",
    "private: class DirectUI::BaseScrollBar * __thiscall DirectUI::ScrollProxy::GetScrollBar(bool)",
    "public: long __thiscall DirectUI::Element::SetContentString(unsigned short const *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::AnimationStrip::FrameDurationProp(void)",
    "public: virtual void __thiscall DirectUI::Element::OnKeyFocusMoved(class DirectUI::Element *,class DirectUI::Element *)",
    "public: __thiscall DirectUI::RangeValueProxy::RangeValueProxy(class DirectUI::RangeValueProxy const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Edit::DirtyProp(void)",
    "public: long __thiscall DirectUI::Element::SetCompositedText(bool)",
    "public: static long __stdcall DirectUI::TableLayout::Create(int,int *,class DirectUI::Value * *)",
    "public: __thiscall DirectUI::Combobox::Combobox(void)",
    "public: class DirectUI::BrowserSelectionProxy & __thiscall DirectUI::BrowserSelectionProxy::operator=(class DirectUI::BrowserSelectionProxy const &)",
    "public: virtual int __thiscall DirectUI::CCBaseScrollBar::GetLine(void)",
    "public: virtual int __thiscall DirectUI::CCBaseScrollBar::GetPage(void)",
    "public: __thiscall DirectUI::Combobox::Combobox(class DirectUI::Combobox const &)",
    "public: long __thiscall DirectUI::XProvider::CreateParser(class DirectUI::DUIXmlParser * *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCBaseScrollBar::GetClassInfoPtr(void)",
    "public: virtual long __stdcall DirectUI::XProvider::CanSetFocus(bool *)",
    "UiaOnToolTip",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accSelection(struct tagVARIANT *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::BaseScrollViewer::PinningProp(void)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::InvokeProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: virtual unsigned long __stdcall DirectUI::InvokeProvider::AddRef(void)",
    "const DirectUI::DialogElement::`vftable'{for `DirectUI::HWNDElement'}",
    "public: virtual void __thiscall DirectUI::Button::OnInput(struct DirectUI::InputEvent *)",
    "public: static bool __stdcall DirectUI::Element::_SetGroupChanges(class DirectUI::Element *,int,class DirectUI::DeferCycle *)",
    "public: virtual long __thiscall DirectUI::SelectorSelectionItemProxy::DoMethod(int,char *)",
    "public: __thiscall DirectUI::Progress::Progress(class DirectUI::Progress const &)",
    "public: virtual unsigned long __stdcall DirectUI::GridProvider::AddRef(void)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetAccName(class DirectUI::Value * *)",
    "public: virtual unsigned long __stdcall DirectUI::HWNDElementProvider::AddRef(void)",
    "public: static void __stdcall DirectUI::Element::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCBaseScrollBar::PageProp(void)",
    "public: virtual unsigned long __stdcall DirectUI::TableItemProvider::AddRef(void)",
    "public: virtual void __thiscall DirectUI::Edit::OnInput(struct DirectUI::InputEvent *)",
    "private: static struct DirectUI::Schema::PropertyInfo const * const DirectUI::Schema::g_propertyInfoTable",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accHelp(struct tagVARIANT,unsigned short * *)",
    "void __stdcall DumpDuiProperties(class DirectUI::Element *)",
    "public: virtual void __thiscall DirectUI::Element::HandleUiaEventListener(struct DirectUI::Event *)",
    "public: static void __stdcall DirectUI::Navigator::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "const DirectUI::CCHScrollBar::`vftable'{for `DirectUI::CCBase'}",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::TooltipProp(void)",
    "protected: struct tagSIZE __thiscall DirectUI::VerticalFlowLayout::BuildCacheInfo(class DirectUI::Element *,int,int,class DirectUI::Surface *,bool)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCBase::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: static long __stdcall DirectUI::Clipper::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static class DirectUI::HWNDElement * __stdcall DirectUI::HWNDElement::GetFocusedHWNDElement(void)",
    "public: virtual long __stdcall DirectUI::ScrollProvider::get_HorizontallyScrollable(int *)",
    "public: virtual __thiscall DirectUI::PText::~PText(void)",
    "public: class DirectUI::RefPointElement & __thiscall DirectUI::RefPointElement::operator=(class DirectUI::RefPointElement const &)",
    "public: class DirectUI::Element * __thiscall DirectUI::Element::GetRoot(void)",
    "public: bool __thiscall DirectUI::HWNDElement::GetWrapKeyboardNavigate(void)",
    "public: static int DirectUI::Schema::SelectionItemElementRemovedFromSelectionEvent",
    "public: long __thiscall DirectUI::DUIFactory::LoadFromResource(struct HINSTANCE__ *,unsigned short const *,unsigned short const *,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *,unsigned short const *)",
    "public: long __thiscall DirectUI::XHost::Initialize(class DirectUI::IXElementCP *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Bind::GetClassInfoPtr(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseLibrary(struct DirectUI::ParserTools::ExprNode const *,struct HINSTANCE__ * *)",
    "public: virtual unsigned long __stdcall DirectUI::ToggleProvider::AddRef(void)",
    "private: static long __stdcall DirectUI::Schema::LookupEventInfos(void)",
    "public: static int DirectUI::Schema::ProgressBarControlType",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::QueryService(struct _GUID const &,struct _GUID const &,void * *)",
    "CreateDUIWrapper",
    "private: static long __stdcall DirectUI::EventManager::HandleChildrenEvent(class DirectUI::Element *,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ScrollBar::MaximumProp(void)",
    "public: virtual __thiscall DirectUI::TableLayout::~TableLayout(void)",
    "protected: virtual unsigned short const * __thiscall DirectUI::TaskPage::GetPageResID(void)",
    "private: class DirectUI::Value * __thiscall DirectUI::Element::_GetSpecifiedValue(struct DirectUI::PropertyInfo const *,struct DirectUI::UpdateCache *)",
    "public: virtual long __thiscall DirectUI::RangeValueProxy::DoMethod(int,char *)",
    "public: static int DirectUI::Schema::ItemTypeProperty",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::GetIdentityString(unsigned long,unsigned char * *,unsigned long *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCBase::s_pClassInfo",
    "public: static int DirectUI::Schema::Toggle_ToggleState_Property",
    "public: long __thiscall DirectUI::HWNDElement::Initialize(struct HWND__ *,bool,unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: virtual void __thiscall DirectUI::Movie::OnHosted(class DirectUI::Element *)",
    "const DirectUI::Layout::`vftable'",
    "const DirectUI::HWNDElementAccessible::`vftable'{for `IOleWindow'}",
    "public: bool __thiscall DirectUI::Element::GetOverhang(void)",
    "public: virtual unsigned int __thiscall DirectUI::Edit::MessageCallback(struct tagGMSG *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::AnimationStrip::PlayProp(void)",
    "protected: long __thiscall DirectUI::HWNDElementProxy::ElementFromPoint(double,double,struct IRawElementProviderFragment * *)",
    "public: class DirectUI::Pages * __thiscall DirectUI::Browser::GetPages(void)",
    "public: static long __stdcall DirectUI::Progress::Register(void)",
    "public: static int __stdcall DirectUI::Element::_MarkElementForDS(class DirectUI::Element *)",
    "public: virtual __thiscall DirectUI::CCCommandLink::~CCCommandLink(void)",
    "public: long __thiscall DirectUI::Element::SetAccItemType(unsigned short const *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCPushButton::OverrideButtonBackgroundProp(void)",
    "public: int __thiscall DirectUI::Element::GetLayoutPos(void)",
    "public: static long __stdcall DirectUI::CCCheckBox::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: class DirectUI::DUIFactory & __thiscall DirectUI::DUIFactory::operator=(class DirectUI::DUIFactory const &)",
    "public: virtual void __thiscall DirectUI::Element::HandleUiaPropertyListener(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual long __stdcall DirectUI::HWNDHostClientAccessible::get_accRole(struct tagVARIANT,struct tagVARIANT *)",
    "public: virtual void __thiscall DirectUI::BaseScrollViewer::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual long __thiscall DirectUI::SelectorNoDefault::SetSelection(class DirectUI::Element *)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accHelpTopic(unsigned short * *,struct tagVARIANT,long *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCBaseCheckRadioButton::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: class DirectUI::ExpandoButtonGlyph & __thiscall DirectUI::ExpandoButtonGlyph::operator=(class DirectUI::ExpandoButtonGlyph const &)",
    "DisableAnimations",
    "private: void __thiscall DirectUI::ShellBorderLayout::_Reset(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::BorderThicknessProp(void)",
    "public: virtual void __thiscall DirectUI::Element::OnEvent(struct DirectUI::Event *)",
    "protected: virtual class DirectUI::BaseScrollBar * __thiscall DirectUI::StyledScrollViewer::GetHScroll(void)",
    "public: virtual __thiscall DirectUI::RefcountBase::~RefcountBase(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCCommandLink::GetClassInfoW(void)",
    "protected: static struct DirectUI::DUIXmlParser::FunctionDefinition const * const DirectUI::DUIXmlParser::s_fdRect",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::Next(unsigned long,struct tagVARIANT *,unsigned long *)",
    "public: static class DirectUI::GridProxy * __stdcall DirectUI::GridProxy::Create(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::CCRadioButton::SetAutoGrouping(bool)",
    "const DirectUI::ValueProvider::`vftable'",
    "public: class DirectUI::DeferCycle * __thiscall DirectUI::Element::TestDeferObject(void)",
    "public: long __thiscall DirectUI::Navigator::SetTargetPage(unsigned short const *)",
    "public: virtual __thiscall DirectUI::Browser::~Browser(void)",
    "private: static struct DirectUI::Schema::EventInfo const * const DirectUI::Schema::g_eventInfoTable",
    "public: virtual bool __thiscall DirectUI::CCSysLink::OnLostDialogFocus(class DirectUI::DialogElement *)",
    "public: static void __stdcall DirectUI::FontCache::UninitThread(void)",
    "protected: void __thiscall DirectUI::HWNDHost::SyncRect(unsigned int,bool)",
    "public: __thiscall DirectUI::FlowLayout::FlowLayout(void)",
    "public: __thiscall DirectUI::Pages::Pages(void)",
    "public: virtual void __thiscall DirectUI::CCRadioButton::OnInput(struct DirectUI::InputEvent *)",
    "const DirectUI::Proxy::`vftable'",
    "public: static void __stdcall DirectUI::CheckBoxGlyph::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static int DirectUI::Schema::MenuItemControlType",
    "public: __thiscall DirectUI::FillLayout::FillLayout(class DirectUI::FillLayout const &)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::accSelect(long,struct tagVARIANT)",
    "public: __thiscall DirectUI::ElementWithHWND::ElementWithHWND(void)",
    "public: static long __stdcall DirectUI::ScrollBar::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::InvokeProvider::`vftable'",
    "public: class DirectUI::DuiNavigate & __thiscall DirectUI::DuiNavigate::operator=(class DirectUI::DuiNavigate const &)",
    "public: virtual long __thiscall DirectUI::CCBaseScrollBar::SetMaximum(int)",
    "UiaOnDestroySink",
    "protected: virtual void __thiscall DirectUI::ElementProxy::Init(class DirectUI::Element *)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::Selector::GetAdjacent(class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: void __thiscall DirectUI::DUIXmlParser::SetGetSheetCallback(class DirectUI::Value * (__stdcall*)(unsigned short const *,void *),void *)",
    "public: long __thiscall DirectUI::RefPointElement::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "const DirectUI::CCVScrollBar::`vftable'{for `DirectUI::BaseScrollBar'}",
    "public: long __thiscall DirectUI::Element::SetAbsorbsShortcut(bool)",
    "public: long __thiscall DirectUI::Element::SetMinSize(int,int)",
    "public: virtual unsigned short const * __thiscall DirectUI::ClassInfoBase::GetName(void)const",
    "public: static void __stdcall DirectUI::ScrollBar::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: class DirectUI::ElementProxy & __thiscall DirectUI::ElementProxy::operator=(class DirectUI::ElementProxy const &)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetNull(void)",
    "public: long __thiscall DirectUI::SelectorNoDefault::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: class DirectUI::NativeHWNDHost & __thiscall DirectUI::NativeHWNDHost::operator=(class DirectUI::NativeHWNDHost const &)",
    "public: long __thiscall DirectUI::Element::SetEnabled(bool)",
    "public: __thiscall DirectUI::SelectionProvider::SelectionProvider(void)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accKeyboardShortcut(struct tagVARIANT,unsigned short * *)",
    "const DirectUI::StyledScrollViewer::`vftable'{for `DirectUI::IElementListener'}",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCTrackBar::RangeMaxProp(void)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::PatternProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::DUIXmlParser::CreateElement(unsigned short const *,class DirectUI::Element *,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::GridLayout::`vftable'",
    "public: bool __thiscall DirectUI::Element::IsDestroyed(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::OverhangProp(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CCProgressBar::GetClassInfoPtr(void)",
    "public: __thiscall DirectUI::ScrollItemProxy::ScrollItemProxy(void)",
    "public: static int DirectUI::Schema::GridItem_Column_Property",
    "const DirectUI::ISBLeak::`vftable'",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Browser::GetClassInfoW(void)",
    "public: static long __stdcall DirectUI::HWNDHostClientAccessible::Create(class DirectUI::Element *,struct IAccessible *,class DirectUI::DuiAccessible * *)",
    "private: void __thiscall DirectUI::Navigator::FireNavigationEvent(void)",
    "public: virtual void __thiscall DirectUI::Selector::OnInput(struct DirectUI::InputEvent *)",
    "public: __thiscall DirectUI::ExpandoButtonGlyph::ExpandoButtonGlyph(class DirectUI::ExpandoButtonGlyph const &)",
    "public: class DirectUI::CCPushButton & __thiscall DirectUI::CCPushButton::operator=(class DirectUI::CCPushButton const &)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::PushButton::GetClassInfoPtr(void)",
    "public: virtual __thiscall DirectUI::Layout::~Layout(void)",
    "private: static struct DirectUI::Schema::ControlInfo const * const DirectUI::Schema::g_controlInfoTable",
    "private: static struct DirectUI::IClassInfo * DirectUI::StyledScrollViewer::s_pClassInfo",
    "public: static int DirectUI::Schema::ToolTipClosedEvent",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Viewer::XScrollableProp(void)",
    "public: __thiscall DirectUI::ScrollBar::ScrollBar(class DirectUI::ScrollBar const &)",
    "public: virtual long __stdcall DirectUI::SelectionProvider::get_IsSelectionRequired(int *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCHScrollBar::s_pClassInfo",
    "public: void __thiscall DirectUI::Element::_UpdateLayoutSize(int,int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCTrackBar::RangeMinProp(void)",
    "public: virtual __thiscall DirectUI::SelectionItemProvider::~SelectionItemProvider(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCBaseScrollBar::GetClassInfoW(void)",
    "public: __thiscall DirectUI::XHost::XHost(void)",
    "public: virtual void __thiscall DirectUI::BaseScrollBar::Home(void)",
    "public: static int DirectUI::Schema::ThumbControlType",
    "public: long __thiscall DirectUI::BaseScrollViewer::SetXBarVisibility(int)",
    "public: static int DirectUI::Schema::HeaderControlType",
    "public: virtual int __stdcall DirectUI::XProvider::ClickDefaultButton(void)",
    "const DirectUI::Button::`vftable'",
    "public: static void __stdcall DirectUI::ElementWithHWND::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual void __thiscall DirectUI::NineGridLayout::OnLayoutPosChanged(class DirectUI::Element *,class DirectUI::Element *,int,int)",
    "public: void __thiscall DirectUI::FillLayout::Initialize(void)",
    "private: class DirectUI::Value * __thiscall DirectUI::Element::_GetComputedValue(struct DirectUI::PropertyInfo const *,struct DirectUI::UpdateCache *)",
    "public: bool __thiscall DirectUI::Element::HasAnimation(void)",
    "public: static int DirectUI::Schema::WindowWindowClosedEvent",
    "public: static class DirectUI::ScrollItemProxy * __stdcall DirectUI::ScrollItemProxy::Create(class DirectUI::Element *)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::RowLayout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: __thiscall DirectUI::AutoButton::AutoButton(void)",
    "public: virtual void __thiscall DirectUI::HWNDElement::UpdateTooltip(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::Element::SetTextGlowSize(int)",
    "public: static class UID __stdcall DirectUI::Button::Click(void)",
    "public: void __thiscall DirectUI::Macro::SetParser(class DirectUI::DUIXmlParser *)",
    "protected: virtual void __thiscall DirectUI::ScrollBarRangeValueProxy::Init(class DirectUI::Element *)",
    "public: virtual __thiscall DirectUI::ElementProvider::~ElementProvider(void)",
    "public: class DirectUI::Element & __thiscall DirectUI::Element::operator=(class DirectUI::Element const &)",
    "public: static long __stdcall DirectUI::ExpandoButtonGlyph::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "protected: void __thiscall DirectUI::HWNDHost::SyncStyle(void)",
    "protected: unsigned int __thiscall DirectUI::GridLayout::GetCurrentCols(class DirectUI::Element *)",
    "public: virtual __thiscall DirectUI::CCVScrollBar::~CCVScrollBar(void)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::ValueProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: virtual void __thiscall DirectUI::Viewer::OnEvent(struct DirectUI::Event *)",
    "public: long __thiscall DirectUI::RefPointElement::SetReferencePoint(int,int)",
    "public: static int DirectUI::Schema::ScrollBarControlType",
    "private: void __thiscall DirectUI::CCAVI::OpenAnimation(struct HWND__ *)",
    "public: static void __stdcall DirectUI::EventManager::DestroyListener(class DirectUI::Element *)",
    "public: static int DirectUI::Schema::TableItem_ColumnHeaderItems_Property",
    "protected: virtual long __thiscall DirectUI::StyledScrollViewer::CreateScrollBars(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::BaseScrollViewer::XScrollableProp(void)",
    "public: __thiscall DirectUI::NineGridLayout::NineGridLayout(class DirectUI::NineGridLayout const &)",
    "const DirectUI::ExpandoButtonGlyph::`vftable'",
    "public: __thiscall DirectUI::ScrollItemProvider::ScrollItemProvider(void)",
    "public: __thiscall DirectUI::ClassInfoBase::ClassInfoBase(class DirectUI::ClassInfoBase const &)",
    "public: int __thiscall DirectUI::Viewer::GetXOffset(void)",
    "public: static bool __stdcall DirectUI::ScrollProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: virtual unsigned long __stdcall DirectUI::GridItemProvider::Release(void)",
    "const DirectUI::TableItemProxy::`vftable'",
    "public: __thiscall DirectUI::SafeArrayAccessor::operator int *(void)",
    "public: __thiscall DirectUI::FlowLayout::FlowLayout(class DirectUI::FlowLayout const &)",
    "public: void __thiscall DirectUI::Element::MarkNeedsDSUpdate(void)",
    "private: static void __stdcall DirectUI::RepeatButton::_RepeatButtonActionCallback(struct GMA_ACTIONINFO *)",
    "public: virtual struct tagSIZE __thiscall DirectUI::GridLayout::UpdateDesiredSize(class DirectUI::Element *,int,int,class DirectUI::Surface *)",
    "public: virtual long __stdcall DirectUI::InvokeProvider::Invoke(void)",
    "public: virtual void __thiscall DirectUI::Element::OnPropertyChanged(struct DirectUI::PropertyInfo *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: class DirectUI::CCTreeView & __thiscall DirectUI::CCTreeView::operator=(class DirectUI::CCTreeView const &)",
    "public: virtual void __thiscall DirectUI::PushButton::OnUnHosted(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::InvokeHelper::DoInvoke(int,class DirectUI::ElementProvider *,class DirectUI::ProviderProxy * (__stdcall*)(class DirectUI::Element *),char *)",
    "public: long __thiscall DirectUI::Bind::SetConnect(unsigned short const *)",
    "public: __thiscall DirectUI::CallstackTracker::CallstackTracker(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetElListNull(void)",
    "public: __thiscall DirectUI::ExpandCollapseProxy::ExpandCollapseProxy(class DirectUI::ExpandCollapseProxy const &)",
    "FlushThemeHandles",
    "public: void __thiscall DirectUI::Element::EndDefer(unsigned long)",
    "public: static long __stdcall DirectUI::DuiAccessible::AccNavigate(class DirectUI::Element *,long,class DirectUI::Element * *)",
    "public: bool __thiscall DirectUI::Element::GetSelected(void)",
    "public: static int DirectUI::Schema::IsEnabledProperty",
    "public: unsigned short const * __thiscall DirectUI::Element::GetAccValue(class DirectUI::Value * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseAtomValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetAccDefAction(class DirectUI::Value * *)",
    "public: virtual __thiscall DirectUI::XElement::~XElement(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Expandable::GetClassInfoPtr(void)",
    "public: bool __thiscall DirectUI::Viewer::GetXScrollable(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::HWNDHost::GetClassInfoW(void)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::Reset(void)",
    "public: virtual void __thiscall DirectUI::BorderLayout::OnAdd(class DirectUI::Element *,class DirectUI::Element * *,unsigned int)",
    "public: static long __stdcall DirectUI::ScrollViewer::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: class DirectUI::HWNDElementProxy & __thiscall DirectUI::HWNDElementProxy::operator=(class DirectUI::HWNDElementProxy const &)",
    "RegisterBrowserControls",
    "private: static struct DirectUI::IClassInfo * DirectUI::TextGraphic::s_pClassInfo",
    "public: static class UID __stdcall DirectUI::Browser::StartNavigate(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::RepeatButton::s_pClassInfo",
    "protected: bool __thiscall DirectUI::HWNDHost::IsMoveDeferred(void)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetContentString(class DirectUI::Value * *)",
    "public: void * __thiscall DirectUI::DUIXmlParser::GetSheetContext(void)",
    "public: static void __stdcall DirectUI::BaseScrollViewer::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static long __stdcall DirectUI::CCVScrollBar::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: __thiscall DirectUI::DialogElement::DialogElement(class DirectUI::DialogElement const &)",
    "const DirectUI::ScrollItemProxy::`vftable'",
    "public: void __thiscall DirectUI::DUIXmlParser::SetParseErrorCallback(void (__stdcall*)(unsigned short const *,unsigned short const *,int,void *),void *)",
    "public: virtual long __stdcall DirectUI::ValueProvider::get_IsReadOnly(int *)",
    "public: virtual unsigned long __stdcall DirectUI::RangeValueProvider::AddRef(void)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "private: static int (__stdcall* DirectUI::CallstackTracker::s_pfnSymGetModuleInfo64)(void *,unsigned __int64,struct _IMAGEHLP_MODULE64 *)",
    "private: static int __stdcall DirectUI::InvokeHelper::_WndProc(void *,struct HWND__ *,unsigned int,unsigned int,long,long *)",
    "public: __thiscall DirectUI::AnimationStrip::AnimationStrip(class DirectUI::AnimationStrip const &)",
    "private: long __thiscall DirectUI::Element::_PreSourceChange(struct DirectUI::PropertyInfo const * (__stdcall*)(void),int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: int __thiscall DirectUI::Element::GetAccRole(void)",
    "const DirectUI::TableProvider::`vftable'",
    "public: virtual void __thiscall DirectUI::CCPushButton::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::TableLayout::GetAdjacent(class DirectUI::Element *,class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseBoolValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: virtual bool __thiscall DirectUI::DialogElement::OnChildReceivedFocus(class DirectUI::Element *)",
    "public: int __thiscall DirectUI::Element::GetContentAlign(void)",
    "public: static class DirectUI::InvokeProxy * __stdcall DirectUI::InvokeProxy::Create(class DirectUI::Element *)",
    "const DirectUI::RangeValueProvider::`vftable'{for `DirectUI::IProvider'}",
    "protected: virtual void __thiscall DirectUI::CCBase::PostCreate(struct HWND__ *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::CheckBoxGlyph::GetClassInfoPtr(void)",
    "private: static bool __stdcall DirectUI::EventManager::WantEvent(enum DirectUI::Schema::Event,int)",
    "public: virtual void __thiscall DirectUI::HWNDElement::OnWmThemeChanged(unsigned int,long)",
    "public: virtual bool __thiscall DirectUI::CCTrackBar::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: virtual long __stdcall DirectUI::HWNDElementProvider::ElementProviderFromPoint(double,double,struct IRawElementProviderFragment * *)",
    "const DirectUI::ValueProxy::`vftable'",
    "public: class DirectUI::RadioButtonGlyph & __thiscall DirectUI::RadioButtonGlyph::operator=(class DirectUI::RadioButtonGlyph const &)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Pages::s_pClassInfo",
    "public: long __thiscall DirectUI::Element::SetBackgroundColor(unsigned long,unsigned long,unsigned long,unsigned char)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::AnimationStrip::GetClassInfoW(void)",
    "public: __thiscall DirectUI::PText::PText(class DirectUI::PText const &)",
    "public: static void __stdcall DirectUI::CCCheckBox::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "protected: virtual void __thiscall DirectUI::InvokeProxy::Init(class DirectUI::Element *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::FontSizeProp(void)",
    "private: static long __stdcall DirectUI::EventManager::RaiseVisibilityEvents(void)",
    "public: static long __stdcall DirectUI::Thumb::Register(void)",
    "public: static unsigned int const DirectUI::XElement::s_uButtonFocusChangeMsg",
    "public: virtual __thiscall DirectUI::Clipper::~Clipper(void)",
    "public: virtual bool __thiscall DirectUI::DialogElement::OnChildLostFocus(class DirectUI::Element *)",
    "const DirectUI::CCCheckBox::`vftable'",
    "public: class DirectUI::Element * __thiscall DirectUI::Element::GetParent(void)",
    "private: class DirectUI::Value * __thiscall DirectUI::Element::_GetLocalValueFromVM(struct DirectUI::PropertyInfo const *)",
    "public: static long __stdcall DirectUI::EventManager::PropertyChangingListener(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,bool *)",
    "public: __thiscall DirectUI::BaseScrollBar::BaseScrollBar(void)",
    "public: static class DirectUI::ElementProxy * __stdcall DirectUI::ElementProxy::Create(class DirectUI::Element *)",
    "public: __thiscall DirectUI::ProviderProxy::ProviderProxy(class DirectUI::ProviderProxy const &)",
    "public: virtual long __stdcall DirectUI::XProvider::SetFocus(class DirectUI::Element *)",
    "public: int __thiscall DirectUI::NavScoring::Try(class DirectUI::Element *,int,struct DirectUI::NavReference const *,unsigned long)",
    "public: long __thiscall DirectUI::PText::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: virtual void __thiscall DirectUI::Viewer::_SelfLayoutDoLayout(int,int)",
    "protected: long __thiscall DirectUI::AnimationStrip::LoadImagesIntoAnimationStrip(void)",
    "public: class DirectUI::CCAVI & __thiscall DirectUI::CCAVI::operator=(class DirectUI::CCAVI const &)",
    "public: __thiscall DirectUI::CallstackTracker::~CallstackTracker(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::Reset(void)",
    "public: virtual unsigned long __stdcall DirectUI::TableProvider::AddRef(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCBaseCheckRadioButton::s_pClassInfo",
    "public: long __thiscall DirectUI::Element::SetForegroundColor(unsigned long)",
    "private: static long __stdcall DirectUI::Schema::LookupControlInfos(void)",
    "public: class DirectUI::Expression * __thiscall DirectUI::Value::GetExpression(void)",
    "public: virtual __thiscall DirectUI::IDataEngine::~IDataEngine(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::put_accName(struct tagVARIANT,unsigned short *)",
    "public: long __thiscall DirectUI::Element::AddListener(struct DirectUI::IElementListener *)",
    "public: __thiscall DirectUI::Button::Button(class DirectUI::Button const &)",
    "public: bool __thiscall DirectUI::BaseScrollBar::OnPageChanging(class DirectUI::Value *)",
    "public: class DirectUI::Element * __thiscall DirectUI::Element::GetKeyWithinChild(void)",
    "public: long __thiscall DirectUI::HWNDHost::SetOptimizeMove(bool)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::Pages::GetClassInfoW(void)",
    "public: virtual __thiscall DirectUI::Repeater::~Repeater(void)",
    "protected: int __thiscall DirectUI::HWNDHost::VerifyParentage(void)",
    "const DirectUI::Expandable::`vftable'",
    "private: long __thiscall DirectUI::GridProxy::GetRowCount(int *)",
    "public: __thiscall DirectUI::ShellBorderLayout::ShellBorderLayout(class DirectUI::ShellBorderLayout const &)",
    "public: static void __stdcall DirectUI::HWNDElement::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: __thiscall DirectUI::CCHScrollBar::CCHScrollBar(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::LayoutProp(void)",
    "public: virtual long __thiscall DirectUI::HWNDHost::GetAccessibleImpl(struct IAccessible * *)",
    "public: virtual void __thiscall DirectUI::HWNDElementProxy::Init(class DirectUI::HWNDElement *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::DialogElement::HandleEnterKeyProp(void)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::SelectionProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "const DirectUI::SelectionItemProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: virtual long __stdcall DirectUI::XProvider::SetDefaultButtonTracking(bool)",
    "protected: virtual void __thiscall DirectUI::AnimationStrip::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: int __thiscall DirectUI::Movie::GetInterpolationMode(void)",
    "public: virtual unsigned long __stdcall DirectUI::ElementProvider::AddRef(void)",
    "public: __thiscall DirectUI::Clipper::Clipper(void)",
    "public: virtual long __thiscall DirectUI::Element::Remove(class DirectUI::Element * *,unsigned int)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateInt(int)",
    "const DirectUI::BrowserSelectionProxy::`vftable'",
    "public: bool __thiscall DirectUI::Element::IsCompositedText(void)",
    "public: virtual unsigned long __stdcall DirectUI::ScrollProvider::AddRef(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::WindowActiveProp(void)",
    "public: static long __stdcall DirectUI::Schema::CreatePatternProvider(enum DirectUI::Schema::Pattern,class DirectUI::ElementProvider *,struct IUnknown * *)",
    "public: long __thiscall DirectUI::Element::SetStdCursor(int)",
    "public: struct tagSIZE __thiscall DirectUI::Element::_UpdateDesiredSize(int,int,class DirectUI::Surface *)",
    "public: class DirectUI::FontCheckOut & __thiscall DirectUI::FontCheckOut::operator=(class DirectUI::FontCheckOut const &)",
    "public: class DirectUI::CCVScrollBar & __thiscall DirectUI::CCVScrollBar::operator=(class DirectUI::CCVScrollBar const &)",
    "protected: void __thiscall DirectUI::CCPushButton::SetDefaultState(unsigned long,unsigned long)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accDefaultAction(struct tagVARIANT,unsigned short * *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreatePoint(int,int)",
    "const DirectUI::DuiAccessible::`vftable'{for `IAccessible'}",
    "public: virtual unsigned long __stdcall DirectUI::DuiAccessible::Release(void)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::ScrollProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::InterpolationModeProp(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Thumb::s_pClassInfo",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ScrollBar::MinimumProp(void)",
    "public: bool __thiscall DirectUI::HWNDHost::GetTransparent(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::VisibleProp(void)",
    "const DirectUI::InvokeProxy::`vftable'",
    "public: long __thiscall DirectUI::HWNDHost::Initialize(unsigned int,unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: virtual long __thiscall DirectUI::Element::GetElementProviderImpl(class DirectUI::InvokeHelper *,class DirectUI::ElementProvider * *)",
    "public: __thiscall DirectUI::AutoThread::~AutoThread(void)",
    "protected: virtual void __thiscall DirectUI::ProgressRangeValueProxy::Init(class DirectUI::Element *)",
    "private: long __thiscall DirectUI::ScrollProxy::GetViewSize(bool,double *)",
    "public: __thiscall DirectUI::BrowserSelectionProxy::BrowserSelectionProxy(class DirectUI::BrowserSelectionProxy const &)",
    "private: static struct _RTL_CRITICAL_SECTION DirectUI::InvokeManager::g_cs",
    "public: static int DirectUI::Schema::MenuOpenedEvent",
    "public: class DirectUI::Element * __thiscall DirectUI::Value::GetElement(void)",
    "public: unsigned long __thiscall DirectUI::CCTreeView::GetStyle(void)",
    "public: virtual void __thiscall DirectUI::BaseScrollViewer::OnEvent(struct DirectUI::Event *)",
    "public: long __thiscall DirectUI::ClassInfoBase::Initialize(struct HINSTANCE__ *,unsigned short const *,bool,struct DirectUI::PropertyInfo const * const *,unsigned int)",
    "public: static int DirectUI::Schema::ScrollItemPattern",
    "public: virtual long __thiscall DirectUI::Element::DefaultAction(void)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetColorTrans(void)",
    "public: virtual struct tagSIZE __thiscall DirectUI::ScrollBar::_SelfLayoutUpdateDesiredSize(int,int,class DirectUI::Surface *)",
    "public: void __thiscall DirectUI::Element::_StartOptimizedLayoutQ(void)",
    "public: virtual long __thiscall DirectUI::SelectionItemProxy::DoMethod(int,char *)",
    "public: int __thiscall DirectUI::Edit::GetMaxLength(void)",
    "private: static unsigned short DirectUI::Expando::_atmArrow",
    "public: __thiscall DirectUI::AccessibleButton::AccessibleButton(void)",
    "public: int __thiscall DirectUI::InvokeHelper::Init(unsigned long)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetFontFace(class DirectUI::Value * *)",
    "public: virtual __thiscall DirectUI::InvokeProvider::~InvokeProvider(void)",
    "const DirectUI::ValueProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "private: long __thiscall DirectUI::ScrollProxy::ScrollPage(bool,bool)",
    "public: __thiscall DirectUI::PatternProvider::PatternProvider(void)",
    "public: __thiscall DirectUI::TaskPage::operator struct _PSP *(void)",
    "public: static int DirectUI::Schema::GridItem_ColumnSpan_Property",
    "public: virtual bool __thiscall DirectUI::HWNDElement::CanSetFocus(void)",
    "public: virtual long __stdcall DirectUI::ElementProvider::GetEmbeddedFragmentRoots(struct tagSAFEARRAY * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseFillValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "const DirectUI::XElement::`vftable'{for `DirectUI::IXElementCP'}",
    "public: static class UID __stdcall DirectUI::PushButton::Hosted(void)",
    "public: virtual __thiscall DirectUI::DuiAccessible::~DuiAccessible(void)",
    "public: virtual bool __thiscall DirectUI::Button::OnLostDialogFocus(class DirectUI::DialogElement *)",
    "public: static long __stdcall DirectUI::Movie::Register(void)",
    "public: static long __stdcall DirectUI::Combobox::Register(void)",
    "public: virtual int __thiscall DirectUI::ClassInfoBase::GetChildren(void)const",
    "public: virtual bool __thiscall DirectUI::CCCheckBox::OnNotify(unsigned int,unsigned int,long,long *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseArgs(struct DirectUI::ParserTools::ExprNode const *,union DirectUI::DUIXmlParser::ParsedArg *,unsigned int,char const *)",
    "IsPalette",
    "public: static long __stdcall DirectUI::NativeHWNDHost::WndProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::FontFaceProp(void)",
    "public: class DirectUI::CCListBox & __thiscall DirectUI::CCListBox::operator=(class DirectUI::CCListBox const &)",
    "public: virtual void __thiscall DirectUI::FlowLayout::DoLayout(class DirectUI::Element *,int,int)",
    "public: static class UID __stdcall DirectUI::Button::Context(void)",
    "public: __thiscall DirectUI::IProvider::IProvider(void)",
    "public: bool __thiscall DirectUI::BaseScrollBar::IsScrollable(void)",
    "public: static void __stdcall DirectUI::Progress::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "MultiByteToUnicode",
    "public: class DirectUI::FlowLayout & __thiscall DirectUI::FlowLayout::operator=(class DirectUI::FlowLayout const &)",
    "public: class DirectUI::IProvider & __thiscall DirectUI::IProvider::operator=(class DirectUI::IProvider const &)",
    "protected: virtual void __thiscall DirectUI::TableProxy::Init(class DirectUI::Element *)",
    "public: bool __thiscall DirectUI::BaseScrollBar::OnPositionChanging(class DirectUI::Value *)",
    "public: __thiscall DirectUI::ElementProxy::ElementProxy(void)",
    "public: int __thiscall DirectUI::CCTrackBar::GetRangeMin(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Combobox::s_pClassInfo",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::accDoDefaultAction(struct tagVARIANT)",
    "protected: virtual void __thiscall DirectUI::ValueProxy::Init(class DirectUI::Element *)",
    "public: virtual struct HWND__ * __thiscall DirectUI::XElement::GetNotificationSinkHWND(void)",
    "const DirectUI::ScrollItemProvider::`vftable'{for `DirectUI::IProvider'}",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseLiteralNumber(unsigned short const *,int *)",
    "public: virtual long __stdcall DirectUI::ValueProvider::SetValue(unsigned short const *)",
    "const DirectUI::Element::`vftable'",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseRectRect(struct DirectUI::ParserTools::ExprNode const *,struct tagRECT *)",
    "public: unsigned short const * __thiscall DirectUI::Element::GetAccItemStatus(class DirectUI::Value * *)",
    "public: static long __stdcall DirectUI::Expandable::Register(void)",
    "public: __thiscall DirectUI::CCVScrollBar::CCVScrollBar(class DirectUI::CCVScrollBar const &)",
    "public: __thiscall DirectUI::CCAVI::CCAVI(class DirectUI::CCAVI const &)",
    "public: __thiscall DirectUI::Movie::Movie(class DirectUI::Movie const &)",
    "public: virtual struct tagSIZE __thiscall DirectUI::CCListView::GetContentSize(int,int,class DirectUI::Surface *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::ExpandoButtonGlyph::s_pClassInfo",
    "public: class DirectUI::XResourceProvider & __thiscall DirectUI::XResourceProvider::operator=(class DirectUI::XResourceProvider const &)",
    "protected: long __thiscall DirectUI::DUIXmlParser::MapPropertyEnumValue(struct DirectUI::EnumMap const *,unsigned short const *,int *)",
    "public: long __thiscall DirectUI::Progress::SetMaximum(int)",
    "public: __thiscall DirectUI::SelectorNoDefault::SelectorNoDefault(class DirectUI::SelectorNoDefault const &)",
    "public: static class DirectUI::TableItemProxy * __stdcall DirectUI::TableItemProxy::Create(class DirectUI::Element *)",
    "public: class DirectUI::CCBase & __thiscall DirectUI::CCBase::operator=(class DirectUI::CCBase const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::ExtentProp(void)",
    "public: virtual long __thiscall DirectUI::HWNDElementAccessible::Disconnect(void)",
    "public: virtual __thiscall DirectUI::Pages::~Pages(void)",
    "const DirectUI::PatternProvider::`vftable'{for `DirectUI::IProvider'}",
    "public: struct tagRECT const * __thiscall DirectUI::Element::GetMargin(class DirectUI::Value * *)",
    "public: virtual void __thiscall DirectUI::HWNDHost::SetKeyFocus(void)",
    "UiaOnGetObject",
    "const DirectUI::HWNDElementProxy::`vftable'",
    "private: long __thiscall DirectUI::ScrollProxy::GetScrollPercent(bool,double *)",
    "public: __thiscall DirectUI::Navigator::Navigator(class DirectUI::Navigator const &)",
    "public: virtual void __thiscall DirectUI::Viewer::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "const DirectUI::Pages::`vftable'",
    "public: class DirectUI::Value * __thiscall DirectUI::Element::GetValue(struct DirectUI::PropertyInfo const *,int,struct DirectUI::UpdateCache *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::ScrollBar::OrderProp(void)",
    "public: virtual void __thiscall DirectUI::XResourceProvider::DestroyCP(void)",
    "public: void __thiscall DirectUI::NativeHWNDHost::SetDefaultFocusID(unsigned short const *)",
    "public: virtual struct HWND__ * __thiscall DirectUI::CCBase::CreateHWND(struct HWND__ *)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::get_accFocus(struct tagVARIANT *)",
    "public: long __thiscall DirectUI::ExpandoButtonGlyph::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: __thiscall DirectUI::Bind::Bind(class DirectUI::Bind const &)",
    "const DirectUI::InvokeHelper::`vftable'",
    "public: virtual class DirectUI::Element * __thiscall DirectUI::CCBaseScrollBar::GetElement(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::PushButton::GetClassInfoW(void)",
    "private: static void __stdcall DirectUI::EventManager::GetToggleState(struct tagVARIANT *)",
    "public: class DirectUI::IXElementCP & __thiscall DirectUI::IXElementCP::operator=(class DirectUI::IXElementCP const &)",
    "public: class DirectUI::Element * __thiscall DirectUI::Layout::GetChildFromLayoutIndex(class DirectUI::Element *,int,class DirectUI::DynamicArray *)",
    "public: class DirectUI::Macro & __thiscall DirectUI::Macro::operator=(class DirectUI::Macro const &)",
    "public: virtual long __stdcall DirectUI::GridItemProvider::get_ColumnSpan(int *)",
    "public: virtual void __thiscall DirectUI::BorderLayout::OnRemove(class DirectUI::Element *,class DirectUI::Element * *,unsigned int)",
    "public: __thiscall DirectUI::Repeater::Repeater(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Button::s_pClassInfo",
    "public: void __thiscall DirectUI::CCAVI::Play(struct HWND__ *)",
    "public: static long __stdcall DirectUI::CCBaseCheckRadioButton::Register(void)",
    "ForceDebugBreak",
    "public: __thiscall DirectUI::CCProgressBar::CCProgressBar(void)",
    "public: class DirectUI::SelectionItemProxy & __thiscall DirectUI::SelectionItemProxy::operator=(class DirectUI::SelectionItemProxy const &)",
    "public: class DirectUI::GridItemProxy & __thiscall DirectUI::GridItemProxy::operator=(class DirectUI::GridItemProxy const &)",
    "public: static unsigned int const DirectUI::XElement::s_uUnhandledSyscharMsg",
    "public: static int DirectUI::Schema::ToolTipControlType",
    "public: virtual void __thiscall DirectUI::Element::Paint(struct HDC__ *,struct tagRECT const *,struct tagRECT const *,struct tagRECT *,struct tagRECT *)",
    "public: class DirectUI::CheckBoxGlyph & __thiscall DirectUI::CheckBoxGlyph::operator=(class DirectUI::CheckBoxGlyph const &)",
    "public: long __thiscall DirectUI::Element::SetContentGraphic(unsigned short const *,unsigned char,unsigned int)",
    "public: virtual bool __thiscall DirectUI::XBaby::CanSetFocus(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCPushButton::GetClassInfoW(void)",
    "public: virtual __thiscall DirectUI::HWNDElementProvider::~HWNDElementProvider(void)",
    "public: long __thiscall DirectUI::RefcountBase::Release(void)",
    "public: __thiscall DirectUI::Element::Element(void)",
    "protected: virtual long __thiscall DirectUI::Macro::BuildElement(void)",
    "protected: void __thiscall DirectUI::HWNDHost::SyncText(void)",
    "private: class DirectUI::Element * __thiscall DirectUI::Viewer::GetContent(void)",
    "public: class DirectUI::Progress & __thiscall DirectUI::Progress::operator=(class DirectUI::Progress const &)",
    "private: static unsigned short (__stdcall* DirectUI::CallstackTracker::s_pfnRtlCaptureStackBackTrace)(unsigned long,unsigned long,void * *,unsigned long *)",
    "public: long __thiscall DirectUI::Edit::SetPasswordCharacter(int)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::UnknownElement::GetClassInfoW(void)",
    "public: static long __stdcall DirectUI::CCCommandLink::Register(void)",
    "public: static long __stdcall DirectUI::EventManager::PropertyListener(class DirectUI::Element *,struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: long __thiscall DirectUI::ScrollBar::SetOrder(int)",
    "private: static long __stdcall DirectUI::EventManager::HandleScrollPos(class DirectUI::Element *,struct IRawElementProviderSimple *,class DirectUI::Value *,class DirectUI::Value *)",
    "const DirectUI::CCCommandLink::`vftable'",
    "public: virtual struct tagSIZE __thiscall DirectUI::Combobox::GetContentSize(int,int,class DirectUI::Surface *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::AutoStartProp(void)",
    "public: virtual long __stdcall DirectUI::DuiAccessible::accHitTest(long,long,struct tagVARIANT *)",
    "protected: virtual long __thiscall DirectUI::TaskPage::OnKillActive(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseGTCColor(struct DirectUI::ParserTools::ExprNode const *,unsigned long *)",
    "public: __thiscall DirectUI::DUIFactory::~DUIFactory(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Movie::SmoothingModeProp(void)",
    "public: virtual long __stdcall DirectUI::ValueProvider::get_Value(unsigned short * *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCBaseScrollBar::s_pClassInfo",
    "public: virtual long __stdcall DirectUI::SelectionItemProvider::Select(void)",
    "private: unsigned short * __thiscall DirectUI::Element::RemoveShortcutFromName(unsigned short const *)",
    "public: static bool __stdcall DirectUI::TableProxy::IsPatternSupported(class DirectUI::Element *)",
    "public: virtual __thiscall DirectUI::CCTrackBar::~CCTrackBar(void)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::ElementWithHWND::GetClassInfoW(void)",
    "protected: virtual void __thiscall DirectUI::HWNDHost::OnUnHosted(class DirectUI::Element *)",
    "public: virtual long __stdcall DirectUI::InvokeProvider::QueryInterface(struct _GUID const &,void * *)",
    "private: void __thiscall DirectUI::Movie::advanceFrameActionStart(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Button::PressedProp(void)",
    "public: class DirectUI::XBaby & __thiscall DirectUI::XBaby::operator=(class DirectUI::XBaby const &)",
    "const DirectUI::TextGraphic::`vftable'",
    "public: static int DirectUI::Schema::Table_ColumnHeaders_Property",
    "protected: static void __stdcall DirectUI::AnimationStrip::RawActionProc(struct GMA_ACTIONINFO *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::Browser::GetClassInfoPtr(void)",
    "public: virtual void __thiscall DirectUI::HWNDHost::SetWindowDirection(struct HWND__ *)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCCheckBox::s_pClassInfo",
    "public: class DirectUI::ExpandCollapseProxy & __thiscall DirectUI::ExpandCollapseProxy::operator=(class DirectUI::ExpandCollapseProxy const &)",
    "const DirectUI::CCBase::`vftable'",
    "const DirectUI::SelectionProvider::`vftable'",
    "public: static long __stdcall DirectUI::NineGridLayout::Create(class DirectUI::Layout * *)",
    "public: static void __stdcall DirectUI::CCBase::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: __thiscall DirectUI::SelectorSelectionItemProxy::SelectorSelectionItemProxy(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Edit::PasswordCharacterProp(void)",
    "public: static long __stdcall DirectUI::CCAVI::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Navigator::TargetPageProp(void)",
    "public: struct tagRECT const * __thiscall DirectUI::Element::GetBorderThickness(class DirectUI::Value * *)",
    "public: static void __stdcall DirectUI::XBaby::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: class DirectUI::ScrollBarRangeValueProxy & __thiscall DirectUI::ScrollBarRangeValueProxy::operator=(class DirectUI::ScrollBarRangeValueProxy const &)",
    "public: __thiscall DirectUI::TableLayout::TableLayout(void)",
    "public: virtual long __thiscall DirectUI::ScrollItemProxy::DoMethod(int,char *)",
    "public: static long __stdcall DirectUI::UnknownElement::Register(void)",
    "public: static long __stdcall DirectUI::HWNDHostAccessible::Create(class DirectUI::Element *,struct IAccessible *,class DirectUI::DuiAccessible * *)",
    "public: static int DirectUI::Schema::NameProperty",
    "private: void __thiscall DirectUI::Edit::PropertyChangedCore(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,struct HWND__ *)",
    "public: static int DirectUI::Schema::IsPasswordProperty",
    "public: virtual __thiscall DirectUI::XBaby::~XBaby(void)",
    "public: virtual bool __thiscall DirectUI::Element::EnsureVisible(int,int,int,int)",
    "public: virtual unsigned long __stdcall DirectUI::ExpandCollapseProvider::AddRef(void)",
    "public: virtual unsigned long __stdcall DirectUI::HWNDElementProvider::Release(void)",
    "public: virtual void __thiscall DirectUI::XBaby::SetKeyFocus(void)",
    "const DirectUI::TableLayout::`vftable'",
    "public: static long __stdcall DirectUI::UnknownElement::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseLayoutValue(struct DirectUI::ParserTools::ExprNode const *)",
    "public: class DirectUI::GridProxy & __thiscall DirectUI::GridProxy::operator=(class DirectUI::GridProxy const &)",
    "public: class DirectUI::ProviderProxy & __thiscall DirectUI::ProviderProxy::operator=(class DirectUI::ProviderProxy const &)",
    "public: virtual __thiscall DirectUI::Surface::~Surface(void)",
    "public: class DirectUI::TableProxy & __thiscall DirectUI::TableProxy::operator=(class DirectUI::TableProxy const &)",
    "private: long __thiscall DirectUI::ScrollProxy::Scroll(enum ScrollAmount,enum ScrollAmount)",
    "public: static void __stdcall DirectUI::Bind::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseFunction(unsigned short const *,struct DirectUI::ParserTools::ExprNode const *,union DirectUI::DUIXmlParser::ParsedArg *,unsigned int,char const *)",
    "public: class DirectUI::InvokeManager & __thiscall DirectUI::InvokeManager::operator=(class DirectUI::InvokeManager const &)",
    "public: virtual long __stdcall DirectUI::HWNDHostClientAccessible::accNavigate(long,struct tagVARIANT,struct tagVARIANT *)",
    "protected: long __thiscall DirectUI::ElementProxy::SetString(struct tagVARIANT *,unsigned short const * (__thiscall DirectUI::Element::*)(class DirectUI::Value * *))",
    "public: virtual void __thiscall DirectUI::CCCommandLink::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static class DirectUI::ValueProxy * __stdcall DirectUI::ValueProxy::Create(class DirectUI::Element *)",
    "private: long __thiscall DirectUI::ScrollProxy::SetPercent(class DirectUI::BaseScrollBar *,double)",
    "public: unsigned short const * __thiscall DirectUI::Value::GetString(void)",
    "public: class DirectUI::AutoThread & __thiscall DirectUI::AutoThread::operator=(class DirectUI::AutoThread const &)",
    "public: class DirectUI::FontCache & __thiscall DirectUI::FontCache::operator=(class DirectUI::FontCache const &)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetIntZero(void)",
    "public: class DirectUI::AutoVariant & __thiscall DirectUI::AutoVariant::operator=(class DirectUI::AutoVariant const &)",
    "public: class DirectUI::Element * __thiscall DirectUI::Pages::GetPage(unsigned int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::LayoutPosProp(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCSysLink::s_pClassInfo",
    "public: virtual bool __thiscall DirectUI::HWNDHost::OnMessage(unsigned int,unsigned int,long,long *)",
    "public: static void __stdcall DirectUI::RefPointElement::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual long __thiscall DirectUI::GridProxy::DoMethod(int,char *)",
    "public: __thiscall DirectUI::Proxy::Proxy(void)",
    "public: virtual bool __thiscall DirectUI::HWNDHost::OnSysChar(unsigned short)",
    "public: __thiscall DirectUI::ValueProxy::ValueProxy(class DirectUI::ValueProxy const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AlphaProp(void)",
    "public: void __thiscall DirectUI::PText::SetDataEntry(struct DirectUI::IDataEntry *)",
    "public: virtual __thiscall DirectUI::DUIXmlParser::~DUIXmlParser(void)",
    "const DirectUI::StyledScrollViewer::`vftable'{for `DirectUI::Element'}",
    "public: virtual struct HWND__ * __thiscall DirectUI::HWNDElement::GetHWND(void)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseGraphicGraphic(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "public: virtual int __thiscall DirectUI::CCBaseScrollBar::GetMinimum(void)",
    "private: static long __stdcall DirectUI::EventManager::RaiseChildRemovedEvent(struct DirectUI::ElementRuntimeId const &,class DirectUI::Element *)",
    "const DirectUI::AutoButton::`vftable'",
    "public: __thiscall DirectUI::Thumb::Thumb(void)",
    "public: __thiscall DirectUI::Pages::Pages(class DirectUI::Pages const &)",
    "public: virtual void __thiscall DirectUI::DialogElement::UpdateChildFocus(class DirectUI::Element *,class DirectUI::Element *)",
    "public: long __thiscall DirectUI::Element::SetClass(unsigned short const *)",
    "public: class DirectUI::ToggleProxy & __thiscall DirectUI::ToggleProxy::operator=(class DirectUI::ToggleProxy const &)",
    "private: static struct DirectUI::IClassInfo * DirectUI::HWNDElement::s_pClassInfo",
    "const DirectUI::ExpandCollapseProvider::`vftable'",
    "public: __thiscall DirectUI::Expando::Expando(class DirectUI::Expando const &)",
    "public: virtual struct tagSIZE __thiscall DirectUI::FlowLayout::UpdateDesiredSize(class DirectUI::Element *,int,int,class DirectUI::Surface *)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::GetExprNull(void)",
    "private: static void __stdcall DirectUI::DUIFactory::s_XMLParseError(unsigned short const *,unsigned short const *,int,void *)",
    "public: struct DirectUI::Fill const * __thiscall DirectUI::Element::GetForegroundColor(class DirectUI::Value * *)",
    "public: virtual long __stdcall DirectUI::ElementProvider::Navigate(enum NavigateDirection,struct IRawElementProviderFragment * *)",
    "public: long __thiscall DirectUI::BaseScrollViewer::SetPinning(int)",
    "public: static long __stdcall DirectUI::CheckBoxGlyph::Register(void)",
    "public: class DirectUI::Layout & __thiscall DirectUI::Layout::operator=(class DirectUI::Layout const &)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCTrackBar::LineSizeProp(void)",
    "public: long __thiscall DirectUI::AnimationStrip::SetPlay(bool)",
    "public: static int DirectUI::Schema::Selection_IsSelectionRequired_Property",
    "public: virtual long __thiscall DirectUI::ExpandCollapseProxy::DoMethod(int,char *)",
    "public: virtual void __thiscall DirectUI::BaseScrollViewer::OnListenedEvent(class DirectUI::Element *,struct DirectUI::Event *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParsePointValue(struct DirectUI::ParserTools::ExprNode const *,class DirectUI::Value * *)",
    "protected: long __thiscall DirectUI::DUIXmlParser::ParseGTMetInt(struct DirectUI::ParserTools::ExprNode const *,int *)",
    "public: long __thiscall DirectUI::Viewer::SetXOffset(int)",
    "public: __thiscall DirectUI::ExpandCollapseProxy::ExpandCollapseProxy(void)",
    "public: __thiscall DirectUI::ISBLeak::ISBLeak(struct DirectUI::ISBLeak const &)",
    "protected: static struct tagSIZE __stdcall DirectUI::VerticalFlowLayout::SizeZero(void)",
    "public: virtual bool __thiscall DirectUI::BaseScrollViewer::OnPropertyChanging(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::XElement::GetClassInfoPtr(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Button::CapturedProp(void)",
    "public: long __thiscall DirectUI::BaseScrollViewer::SetYBarVisibility(int)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::accHitTest(long,long,struct tagVARIANT *)",
    "public: virtual void __thiscall DirectUI::Clipper::_SelfLayoutDoLayout(int,int)",
    "public: virtual struct DirectUI::IClassInfo * __thiscall DirectUI::CCHScrollBar::GetClassInfoW(void)",
    "public: virtual void __thiscall DirectUI::XBaby::OnEvent(struct DirectUI::Event *)",
    "public: long __thiscall DirectUI::Expando::Initialize(class DirectUI::Element *,unsigned long *)",
    "public: static int DirectUI::Schema::TextPattern",
    "public: static long __stdcall DirectUI::Browser::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: long __thiscall DirectUI::Edit::SetDirty(bool)",
    "public: virtual __thiscall DirectUI::Expandable::~Expandable(void)",
    "const DirectUI::ElementProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: static int DirectUI::Schema::CustomControlType",
    "const DirectUI::ScrollItemProvider::`vftable'",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::HWNDElement::GetClassInfoPtr(void)",
    "public: virtual __thiscall DirectUI::GridLayout::~GridLayout(void)",
    "private: class DirectUI::Value * __thiscall DirectUI::Element::_GetLocalValue(struct DirectUI::PropertyInfo const *)",
    "public: virtual long __thiscall DirectUI::GridItemProxy::DoMethod(int,char *)",
    "public: long __thiscall DirectUI::Element::RemoveLocalValue(struct DirectUI::PropertyInfo const * (__stdcall*)(void))",
    "public: static long __stdcall DirectUI::Edit::Register(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::CCBase::WinStyleProp(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Viewer::s_pClassInfo",
    "public: virtual void __thiscall DirectUI::HWNDHost::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "private: static long __stdcall DirectUI::EventManager::HandleBoolProp(class DirectUI::Element *,bool (__stdcall*)(class DirectUI::Element *),struct IRawElementProviderSimple *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AccDefActionProp(void)",
    "public: long __thiscall DirectUI::Element::SetBackgroundColor(unsigned long,unsigned long,unsigned char)",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateColor(unsigned long,unsigned long,unsigned long,unsigned char)",
    "public: bool __thiscall DirectUI::Element::GetEnabled(void)",
    "const DirectUI::GridItemProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::PosInLayoutProp(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::MouseWithinProp(void)",
    "protected: virtual long __thiscall DirectUI::ScrollViewer::AddChildren(void)",
    "public: virtual __thiscall DirectUI::Movie::~Movie(void)",
    "private: bool __thiscall DirectUI::Element::TrySparsePattern(struct tagPOINT *,struct tagRECT const &)",
    "public: class DirectUI::Element * __thiscall DirectUI::Element::GetTopLevel(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::Movie::s_pClassInfo",
    "public: virtual long __stdcall DirectUI::ElementProvider::GetRuntimeId(struct tagSAFEARRAY * *)",
    "public: long __thiscall DirectUI::DUIXmlParser::LookupElement(struct DirectUI::LINEINFO,unsigned short const *,struct HINSTANCE__ *,struct DirectUI::IClassInfo * *)",
    "protected: void __thiscall DirectUI::BaseScrollViewer::FireAnimationChangeEvent(bool)",
    "public: virtual long __stdcall DirectUI::GridItemProvider::QueryInterface(struct _GUID const &,void * *)",
    "const DirectUI::IProvider::`vftable'",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Edit::MultilineProp(void)",
    "const DirectUI::PatternProvider::`vftable'{for `DirectUI::RefcountBase'}",
    "public: static int DirectUI::Schema::HeaderItemControlType",
    "public: virtual void __thiscall DirectUI::Selector::OnPropertyChanged(struct DirectUI::PropertyInfo const *,int,class DirectUI::Value *,class DirectUI::Value *)",
    "protected: virtual void __thiscall DirectUI::CCAVI::PostCreate(struct HWND__ *)",
    "public: bool __thiscall DirectUI::Movie::GetAutoStart(void)",
    "public: int __thiscall DirectUI::Progress::GetPosition(void)",
    "HrSysAllocString",
    "public: class DirectUI::Bind & __thiscall DirectUI::Bind::operator=(class DirectUI::Bind const &)",
    "public: virtual long __thiscall DirectUI::HWNDHostAccessible::Disconnect(void)",
    "public: static long __stdcall DirectUI::CCListBox::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual __thiscall DirectUI::NativeHWNDHost::~NativeHWNDHost(void)",
    "public: void __thiscall DirectUI::GridLayout::Initialize(int,int)",
    "public: long __thiscall DirectUI::Element::SetBackgroundColor(struct DirectUI::Fill const &)",
    "CreateDUIWrapperEx",
    "const DirectUI::ProviderProxy::`vftable'",
    "private: long __thiscall DirectUI::GridProxy::GetColumnCount(int *)",
    "protected: void __thiscall DirectUI::CCCommandLink::SyncNoteAndGlyph(struct HWND__ *)",
    "public: virtual long __stdcall DirectUI::ElementProvider::get_HostRawElementProvider(struct IRawElementProviderSimple * *)",
    "const DirectUI::CCBaseCheckRadioButton::`vftable'",
    "public: static class DirectUI::Value * __stdcall DirectUI::Value::CreateGraphic(unsigned short const *,unsigned char,unsigned int,unsigned short,unsigned short,struct HINSTANCE__ *,bool,bool)",
    "protected: bool __thiscall DirectUI::Layout::IsCacheDirty(void)",
    "public: static long __stdcall DirectUI::ElementWithHWND::Create(class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "const DirectUI::PushButton::`vftable'",
    "private: static struct DirectUI::IClassInfo * DirectUI::Clipper::s_pClassInfo",
    "public: virtual long __stdcall DirectUI::ExpandCollapseProvider::QueryInterface(struct _GUID const &,void * *)",
    "public: void __thiscall DirectUI::HWNDElement::ToggleUIState(bool,bool)",
    "public: static void __stdcall DirectUI::HWNDHost::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "CreateDUIWrapperFromResource",
    "public: long __thiscall DirectUI::CCTrackBar::SetLineSize(int)",
    "protected: void __thiscall DirectUI::ElementProxy::GetControlType(struct tagVARIANT *,struct IAccessible *)",
    "private: static long __stdcall DirectUI::EventManager::HandleAccDesc(class DirectUI::Element *,struct IRawElementProviderSimple *,class DirectUI::Value *,class DirectUI::Value *)",
    "public: static void __stdcall DirectUI::XElement::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: virtual long __stdcall DirectUI::XProvider::QueryInterface(struct _GUID const &,void * *)",
    "IsAnimationsEnabled",
    "public: virtual void __thiscall DirectUI::Layout::OnRemove(class DirectUI::Element *,class DirectUI::Element * *,unsigned int)",
    "public: __thiscall DirectUI::ScrollProvider::ScrollProvider(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::CCRadioButton::s_pClassInfo",
    "private: static struct HINSTANCE__ * DirectUI::CallstackTracker::s_hinstNtDll",
    "public: void __thiscall DirectUI::Layout::Initialize(void)",
    "public: virtual __thiscall DirectUI::TableProvider::~TableProvider(void)",
    "const DirectUI::CCProgressBar::`vftable'",
    "protected: long __thiscall DirectUI::ElementProxy::GetHwnd(struct HWND__ * *)",
    "public: __thiscall DirectUI::CCTrackBar::CCTrackBar(class DirectUI::CCTrackBar const &)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::PText::GetClassInfoPtr(void)",
    "public: virtual class DirectUI::ProviderProxy * (__stdcall*__thiscall DirectUI::SelectionItemProvider::GetProxyCreator(void))(class DirectUI::Element *)",
    "private: int __thiscall DirectUI::BaseScrollBar::GetPageInc(void)",
    "public: static int DirectUI::Schema::TableItem_RowHeaderItems_Property",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::CompositedTextProp(void)",
    "public: static struct _RTL_CRITICAL_SECTION * __stdcall DirectUI::Element::GetFactoryLock(void)",
    "public: virtual bool __thiscall DirectUI::Button::OnReceivedDialogFocus(class DirectUI::DialogElement *)",
    "public: void __thiscall DirectUI::HWNDHost::Detach(void)",
    "public: void __thiscall DirectUI::Value::Release(void)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::accLocation(long *,long *,long *,long *,struct tagVARIANT)",
    "public: static void __stdcall DirectUI::CCSysLink::SetClassInfoPtr(struct DirectUI::IClassInfo *)",
    "public: static long __stdcall DirectUI::XHost::Create(class DirectUI::IXElementCP *,class DirectUI::XHost * *)",
    "public: long __thiscall DirectUI::Thumb::Initialize(unsigned int,class DirectUI::Element *,unsigned long *)",
    "public: unsigned long __stdcall DirectUI::Element::AddRef(void)",
    "public: __thiscall DirectUI::RadioButtonGlyph::RadioButtonGlyph(void)",
    "public: virtual void __thiscall DirectUI::ClassInfoBase::AddChild(void)",
    "public: virtual unsigned long __stdcall DirectUI::SelectionProvider::AddRef(void)",
    "protected: virtual void __thiscall DirectUI::CCCommandLink::PostCreate(struct HWND__ *)",
    "public: static long __stdcall DirectUI::PText::Register(void)",
    "public: virtual long __stdcall DirectUI::RangeValueProvider::get_Maximum(double *)",
    "public: long __thiscall DirectUI::HWNDHost::GetClientAccessibleImpl(struct IAccessible * *)",
    "public: void __thiscall DirectUI::CCCommandLink::`default constructor closure'(void)",
    "public: virtual __thiscall DirectUI::ExpandCollapseProvider::~ExpandCollapseProvider(void)",
    "public: virtual bool __thiscall DirectUI::CCPushButton::OnMessage(unsigned int,unsigned int,long,long *)",
    "public: virtual long __stdcall DirectUI::GridProvider::GetItem(int,int,struct IRawElementProviderSimple * *)",
    "public: long __thiscall DirectUI::XElement::SetProvider(struct IUnknown *)",
    "public: virtual void __thiscall DirectUI::ScrollBar::_SelfLayoutDoLayout(int,int)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::accNavigate(long,struct tagVARIANT,struct tagVARIANT *)",
    "public: long __thiscall DirectUI::DUIXmlParser::_InitializeTables(void)",
    "protected: void __thiscall DirectUI::Layout::ClearCacheDirty(void)",
    "public: bool __thiscall DirectUI::Element::GetAccessible(void)",
    "private: static struct HINSTANCE__ * DirectUI::CallstackTracker::s_hinstImageHlp",
    "public: __thiscall DirectUI::ElementWithHWND::ElementWithHWND(class DirectUI::ElementWithHWND const &)",
    "const DirectUI::RangeValueProxy::`vftable'",
    "public: virtual int __thiscall DirectUI::CCBaseScrollBar::GetPosition(void)",
    "public: static struct DirectUI::IClassInfo * __stdcall DirectUI::AnimationStrip::GetClassInfoPtr(void)",
    "public: long __thiscall DirectUI::DUIFactory::CreateParser(void)",
    "public: __thiscall DirectUI::GridItemProvider::GridItemProvider(void)",
    "private: static struct DirectUI::IClassInfo * DirectUI::RadioButtonGlyph::s_pClassInfo",
    "public: __thiscall DirectUI::Bind::Bind(void)",
    "public: virtual bool __thiscall DirectUI::CCTrackBar::OnMessage(unsigned int,unsigned int,long,long *)",
    "public: virtual long __stdcall DirectUI::ExpandCollapseProvider::Collapse(void)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::HWNDElement::WrapKeyboardNavigateProp(void)",
    "public: static int DirectUI::Schema::SelectionItemElementAddedToSelectionEvent",
    "BlurBitmap",
    "protected: virtual void __thiscall DirectUI::HWNDHost::OnHosted(class DirectUI::Element *)",
    "public: long __thiscall DirectUI::Element::SetY(int)",
    "public: virtual __thiscall DirectUI::XProvider::~XProvider(void)",
    "public: static long __stdcall DirectUI::Button::Register(void)",
    "public: __thiscall DirectUI::ScrollBarRangeValueProxy::ScrollBarRangeValueProxy(class DirectUI::ScrollBarRangeValueProxy const &)",
    "public: static bool __stdcall DirectUI::EventManager::FWantAnyEvent(class DirectUI::Element *)",
    "const DirectUI::ClassInfoBase::`vftable'",
    "const DirectUI::GridItemProxy::`vftable'",
    "public: static long __stdcall DirectUI::CCPushButton::Create(unsigned int,class DirectUI::Element *,unsigned long *,class DirectUI::Element * *)",
    "public: virtual long __stdcall DirectUI::HWNDHostAccessible::put_accName(struct tagVARIANT,unsigned short *)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::BaseScrollViewer::YScrollableProp(void)",
    "public: class DirectUI::DUIXmlParser * __thiscall DirectUI::DUIFactory::DetachParser(void)",
    "public: virtual bool __thiscall DirectUI::CCBaseCheckRadioButton::OnReceivedDialogFocus(class DirectUI::DialogElement *)",
    "public: virtual long __thiscall DirectUI::ScrollBar::SetMinimum(int)",
    "public: static struct DirectUI::PropertyInfo const * __stdcall DirectUI::Element::AbsorbsShortcutProp(void)"
  ],
  "duser.dll": [
    "RegisterGadgetMessage",
    "DUserBuildGadget",
    "GetGadgetProperty",
    "SetGadgetFocusEx",
    "AutoTrace",
    "DUserFindClass",
    "GetStdColorF",
    "SetGadgetFillF",
    "SetGadgetRect",
    "RemoveGadgetMessageHandler",
    "DUserSendMethod",
    "DUserGetScalePRID",
    "GetGadgetBufferInfo",
    "SetGadgetRotation",
    "GetDUserModule",
    "FindGadgetFromPoint",
    "SetGadgetStyle",
    "DUserGetAlphaPRID",
    "SetGadgetMessageFilter",
    "SetGadgetScale",
    "RegisterGadgetProperty",
    "UtilGetColor",
    "GetGadgetSize",
    "SetGadgetFillI",
    "GetGadgetRotation",
    "GetStdColorI",
    "IsInsideContext",
    "BuildAnimation",
    "WaitMessageEx",
    "DUserPostMethod",
    "DUserCastHandle",
    "GetGadget",
    "BuildInterpolation",
    "GetGadgetFocus",
    "UnregisterGadgetMessage",
    "GetActionTimeslice",
    "DeleteHandle",
    "GetGadgetRgn",
    "SetGadgetFocus",
    "DUserCastClass",
    "DisableContainerHwnd",
    "SetActionTimeslice",
    "IsGadgetParentChainStyle",
    "GetGadgetRect",
    "MapGadgetPoints",
    "GetStdColorPenF",
    "DUserRegisterStub",
    "UtilDrawBlendRect",
    "RemoveGadgetProperty",
    "GetStdColorBrushI",
    "PeekMessageExA",
    "SetGadgetParent",
    "SetGadgetBufferInfo",
    "GetGadgetScale",
    "GetMessageExA",
    "DUserPostEvent",
    "LookupGadgetTicket",
    "InitGadgetComponent",
    "ForwardGadgetMessage",
    "GetDebug",
    "GetGadgetCenterPoint",
    "UnregisterGadgetMessageString",
    "AddGadgetMessageHandler",
    "DUserGetRectPRID",
    "GetStdColorName",
    "FindGadgetMessages",
    "UtilBuildFont",
    "GetMessageExW",
    "DllMain",
    "InvalidateGadget",
    "SetGadgetCenterPoint",
    "DUserSendEvent",
    "DUserFlushDeferredMessages",
    "DUserFlushMessages",
    "DUserGetRotatePRID",
    "AttachWndProcA",
    "GetStdPalette",
    "GetGadgetTicket",
    "SetGadgetProperty",
    "UnregisterGadgetProperty",
    "DUserDeleteGadget",
    "GetStdColorBrushF",
    "IsStartDelete",
    "BuildDropTarget",
    "InitGadgets",
    "DUserRegisterSuper",
    "GetGadgetStyle",
    "PeekMessageExW",
    "AttachWndProcW",
    "EnumGadgets",
    "UtilDrawOutlineRect",
    "GetGadgetMessageFilter",
    "CreateAction",
    "DUserStopAnimation",
    "DUserCastDirect",
    "DrawGadgetTree",
    "GetGadgetRootInfo",
    "SetGadgetRootInfo",
    "DUserGetGutsData",
    "RegisterGadgetMessageString",
    "DUserInstanceOf",
    "GetGadgetAnimation",
    "FireGadgetMessages",
    "GetStdColorPenI",
    "CreateGadget",
    "DUserRegisterGuts",
    "UtilSetBackground",
    "FindStdColor",
    "SetGadgetOrder",
    "DetachWndProc"
  ],
  "dwmapi.dll": [
    "DwmSetDxFrameDuration",
    "DwmGetTransportAttributes",
    "DwmSetPresentParameters",
    "DwmGetWindowAttribute",
    "DwmModifyPreviousDxFrameDuration",
    "DwmUnregisterThumbnail",
    "DwmEnableComposition",
    "DwmEnableBlurBehindWindow",
    "DwmGetGraphicsStreamClient",
    "DwmQueryThumbnailSourceSize",
    "DwmDefWindowProc",
    "DwmSetWindowAttribute",
    "DwmAttachMilContent",
    "DwmInvalidateIconicBitmaps",
    "DwmDetachMilContent",
    "DwmIsCompositionEnabled",
    "DwmSetIconicThumbnail",
    "DwmEnableMMCSS",
    "DwmRegisterThumbnail",
    "DwmSetIconicLivePreviewBitmap",
    "DwmFlush",
    "DwmGetGraphicsStreamTransformHint",
    "DwmGetColorizationColor",
    "DwmGetCompositionTimingInfo",
    "DwmExtendFrameIntoClientArea",
    "DwmUpdateThumbnailProperties"
  ],
  "dwmcore.dll": [
    "MilCompositionEngine_GetFeedbackReader",
    "MilComposition_WaitForNextMessage",
    "MilCrossThreadPacketTransport_Create",
    "MilChannel_EndCommand",
    "MilCompositionEngine_DeinitializePartitionManager",
    "MilTransport_DisconnectTransport",
    "MilConnection_CreateChannel",
    "MilTransport_Close",
    "MilTransport_CreateTransportParameters",
    "MilCompositionEngine_InitializePartitionManager",
    "MilConnection_RecordUCE",
    "MilVisualTarget_AttachToHwnd",
    "MilCoreClientIsDwm",
    "MilChannel_CommitChannel",
    "MilChannel_SetNotificationWindow",
    "MilConnectionManager_NotifyHostEvent",
    "MilUtility_GetTileBrushMapping",
    "MilCommandTransport_AddRef",
    "MilComposition_SyncFlush",
    "MilTransport_Create",
    "MilTransport_CreateFromPacketTransport",
    "MilPlayer_Create",
    "MilResource_SendCommandBitmapSource",
    "MILCreateFactory",
    "MilPlayer_Process",
    "MilChannel_SetReceiveBroadcastMessages",
    "MIL3DCalcProjected2DBounds",
    "MilConnection_ClearSfmEventOnPartition",
    "MilChannel_GetMarshalType",
    "MilResource_SendCommand",
    "MilConnection_HandleSfmEventOnPartition",
    "MilChannel_BeginCommand",
    "MilCommandTransport_Release",
    "MilResource_ReleaseOnChannel",
    "MilChannel_AppendCommandData",
    "MilTransport_Open",
    "MilTransport_PostPacket",
    "MilResource_DuplicateHandle",
    "MilVersionCheck",
    "MilTransport_AddRef",
    "MilCompositionEngine_GetComposedEventId",
    "MilConnection_DestroyChannel",
    "MilTransport_CreateSurfaceManager",
    "MilTransport_Release",
    "MilTransport_ShutDownConnectionManager",
    "MilResource_CreateOrAddRefOnChannel",
    "MilComposition_PeekNextMessage",
    "MIL3DCalcBrushToIdealSampleSpace",
    "MilChannel_FreeSyncCommandReplay",
    "SetMilPerfInstrumentationFlags",
    "MilVisualTarget_DetachFromHwnd",
    "MilChannel_SendSyncCommand",
    "MilCompositionEngine_UpdateSchedulerSettings",
    "MilTransport_InitializeConnectionManager"
  ],
  "dwmredir.dll": [
    "DwmRedirectionManagerPlayingVideo",
    "DwmRedirectionManagerLockMemoryAllocations",
    "DwmRedirectionManagerDispatchMessage",
    "DwmRedirectionManagerWaitForMultipleObjects",
    "DwmRedirectionManagerShutdown",
    "DwmRedirectionManagerSetClientChannel",
    "DwmRedirectionManagerFailMessage",
    "DwmRedirectionManagerEnableMMCSS",
    "DwmRedirectionManagerInitialize",
    "DwmRedirectionManagerShouldRemainOnHibernate",
    "DwmRedirectionManagerSetClientRenderTarget",
    "DwmInitializeTransport",
    "DwmShutdownTransport",
    "DwmVersionCheck"
  ],
  "dxdiagn.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dxgi.dll": [
    "D3DKMTSetDisplayPrivateDriverFormat",
    "D3DKMTPresent",
    "D3DKMTSetAllocationPriority",
    "D3DKMTGetContextSchedulingPriority",
    "DXGID3D10CreateLayeredDevice",
    "D3DKMTCreateAllocation",
    "DXGID3D10GetLayeredDeviceSize",
    "D3DKMTGetMultisampleMethodList",
    "OpenAdapter10",
    "D3DKMTRender",
    "D3DKMTCreateContext",
    "D3DKMTDestroyDevice",
    "D3DKMTDestroySynchronizationObject",
    "D3DKMTOpenResource",
    "D3DKMTSetGammaRamp",
    "D3DKMTOpenAdapterFromHdc",
    "D3DKMTWaitForVerticalBlankEvent",
    "DXGIReportAdapterConfiguration",
    "D3DKMTDestroyContext",
    "D3DKMTGetDisplayModeList",
    "OpenAdapter10_2",
    "D3DKMTGetDeviceState",
    "D3DKMTQueryResourceInfo",
    "D3DKMTSignalSynchronizationObject",
    "D3DKMTQueryAdapterInfo",
    "D3DKMTLock",
    "D3DKMTSetVidPnSourceOwner",
    "D3DKMTWaitForSynchronizationObject",
    "DXGID3D10RegisterLayers",
    "D3DKMTGetRuntimeData",
    "D3DKMTGetSharedPrimaryHandle",
    "DXGIDumpJournal",
    "D3DKMTCloseAdapter",
    "D3DKMTCreateSynchronizationObject",
    "D3DKMTEscape",
    "DXGID3D10CreateDevice",
    "D3DKMTSetContextSchedulingPriority",
    "CreateDXGIFactory",
    "D3DKMTCreateDevice",
    "D3DKMTSetDisplayMode",
    "D3DKMTDestroyAllocation",
    "D3DKMTUnlock",
    "D3DKMTQueryAllocationResidency",
    "CreateDXGIFactory1"
  ],
  "dxmasf.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dxpps.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "dxtmsft.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllEnumClassObjects",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "dxtrans.dll": [
    "void __stdcall DXOverArray(class DXPMSAMPLE *,class DXPMSAMPLE const *,unsigned long)",
    "void __stdcall DXOverArrayMMX(class DXPMSAMPLE *,class DXPMSAMPLE const *,unsigned long)",
    "void __stdcall DXLinearInterpolateArray(class DXBASESAMPLE const *,struct DXLIMAPINFO *,class DXBASESAMPLE *,unsigned long)",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "void __stdcall DXConstOverArray(class DXPMSAMPLE *,class DXPMSAMPLE const &,unsigned long)",
    "void __stdcall DXConstUnderArray(class DXPMSAMPLE *,class DXPMSAMPLE const &,unsigned long)",
    "void __stdcall DXDitherArray(struct DXDITHERDESC const *)",
    "DllGetClassObject",
    "DllEnumClassObjects",
    "DllRegisterServer"
  ],
  "dxva2.dll": [
    "SetMonitorRedGreenOrBlueDrive",
    "GetMonitorCapabilities",
    "GetMonitorColorTemperature",
    "CapabilitiesRequestAndCapabilitiesReply",
    "GetMonitorDisplayAreaPosition",
    "GetMonitorRedGreenOrBlueDrive",
    "SaveCurrentMonitorSettings",
    "RestoreMonitorFactoryDefaults",
    "GetMonitorDisplayAreaSize",
    "GetMonitorContrast",
    "DegaussMonitor",
    "GetNumberOfPhysicalMonitorsFromHMONITOR",
    "GetPhysicalMonitorsFromIDirect3DDevice9",
    "GetMonitorBrightness",
    "SaveCurrentSettings",
    "SetMonitorContrast",
    "SetMonitorBrightness",
    "GetPhysicalMonitorsFromHMONITOR",
    "SetVCPFeature",
    "DestroyPhysicalMonitors",
    "SetMonitorColorTemperature",
    "OPMGetVideoOutputsFromHMONITOR",
    "SetMonitorDisplayAreaSize",
    "GetVCPFeatureAndVCPFeatureReply",
    "SetMonitorDisplayAreaPosition",
    "RestoreMonitorFactoryColorDefaults",
    "OPMGetVideoOutputsFromIDirect3DDevice9Object",
    "GetNumberOfPhysicalMonitorsFromIDirect3DDevice9",
    "DXVA2CreateDirect3DDeviceManager9",
    "GetTimingReport",
    "GetMonitorRedGreenOrBlueGain",
    "SetMonitorRedGreenOrBlueGain",
    "DXVAHD_CreateDevice",
    "GetCapabilitiesStringLength",
    "DXVA2CreateVideoService",
    "GetMonitorTechnologyType",
    "DestroyPhysicalMonitor"
  ],
  "EAPQEC.DLL": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "InitializeQec",
    "UninitializeQec"
  ],
  "ELSCore.dll": [
    "MappingFreePropertyBag",
    "MappingRecognizeText",
    "MappingFreeServices",
    "MappingDoAction",
    "MappingGetServices"
  ],
  "EhStorAPI.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "EhStorPwdMgr.dll": [
    "EnhancedStoragePasswordInitDisk",
    "EnhancedStoragePasswordConfig",
    "DllMain"
  ],
  "EhStorShell.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "EncDec.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "EncDump.dll": [
    "EncryptDumpFile"
  ],
  "ExplorerFrame.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllGetVersion"
  ],
  "eapp3hst.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "eappcfg.dll": [
    "EapHostPeerQueryCredentialInputFields",
    "EapHostPeerQueryUserBlobFromCredentialInputFields",
    "EapHostPeerCredentialsXml2Blob",
    "EapHostPeerQueryUIBlobFromInteractiveUIInputFields",
    "EapHostPeerGetMethods",
    "EapHostPeerGetMethodProperties",
    "EapHostPeerInvokeConfigUI",
    "EapHostPeerInvokeIdentityUI",
    "EapHostPeerFreeErrorMemory",
    "EapHostPeerFreeMemory",
    "EapHostPeerConfigXml2Blob",
    "EapHostPeerInvokeInteractiveUI",
    "EapHostPeerConfigBlob2Xml",
    "EapHostPeerQueryInteractiveUIInputFields"
  ],
  "eappgnui.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "EapPeerFreeErrorMemory",
    "EapPeerFreeMemory",
    "DllGetClassObject",
    "DllRegisterServer",
    "EapPeerInvokeIdentityUI"
  ],
  "eapphost.dll": [
    "InitializeEapHost",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "UninitializeEapHost",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "eappprxy.dll": [
    "EapHostPeerClearConnection",
    "EapHostPeerFreeRuntimeMemory",
    "EapHostPeerGetIdentity",
    "EapHostPeerSetUIContext",
    "EapHostPeerEndSession",
    "EapHostPeerGetUIContext",
    "EapHostPeerSetResponseAttributes",
    "EapHostPeerGetResult",
    "EapHostPeerFreeEapError",
    "EapHostPeerBeginSession",
    "EapHostPeerGetSendPacket",
    "EapHostPeerInitialize",
    "EapHostPeerGetAuthStatus",
    "EapHostPeerProcessReceivedPacket",
    "EapHostPeerUninitialize",
    "EapHostPeerGetResponseAttributes"
  ],
  "eapsvc.dll": [
    "ServiceMain"
  ],
  "efsadu.dll": [
    "EfsUIUtilEnrollEfsCertificateEx",
    "AddUserToObjectW",
    "EfsUIUtilShowBalloonAndWait",
    "EfsUIUtilPromptForPin",
    "EfsUIUtilCreateSelfSignedCertificate",
    "BackCurrentEfsCert",
    "EfsDetail",
    "EfsUIUtilEnrollEfsCertificate",
    "EfsUIUtilEncryptMyDocuments",
    "EfsUIUtilInstallDra",
    "EfsUIUtilSelectCard",
    "EfsUIUtilPromptForPinDialog",
    "EfsUIUtilCheckScardStatus",
    "EfsUIUtilKeyBackup"
  ],
  "efscore.dll": [
    "EfsInitialize",
    "EfsDllQueryRecoveryAgentsSrv",
    "EfsDllGetLocalFileName",
    "EfsDllDisabled",
    "EfsUnInitialize",
    "EfsDllShareDecline",
    "EfsDllWriteFileRaw",
    "EfsDllDecryptFek",
    "EfsDllFreeHeap",
    "EfsDllOpenFileRaw",
    "EfsDllSsoFlushUserCache",
    "EfsDllGetLogFile",
    "EfsDllFreeUserInfo",
    "EfsDllUnloadUserProfile",
    "EfsDllUsePinForEncryptedFilesSrv",
    "EfsDllAddUsersToFileSrv",
    "EfsDllEncryptFileSrv",
    "EfsDllGetUserInfo",
    "EfsDllConstructEFS",
    "EfsDllGetVolumeRoot",
    "EfsDllErrorToNtStatus",
    "EfsDllDuplicateEncryptionInfoFileSrv",
    "EfsDllFileKeyInfoSrv",
    "EfsDllDecryptFileSrv",
    "EfsDllRemoveUsersFromFileSrv",
    "EfsDllValidateEfsStream",
    "EfsDllLoadUserProfile",
    "EfsDllOnSessionChange",
    "EfsDllQueryUsersOnFileSrv",
    "EfsDllMarkFileForDelete",
    "EfsDllReadFileRaw",
    "EfsDllAllocateHeap",
    "EfsDllSetFileEncryptionKeySrv",
    "EfsDllIsNonEfsSKU",
    "EfsDllCloseFileRaw"
  ],
  "efslsaext.dll": [
    "InitializeLsaExtension"
  ],
  "efssvc.dll": [
    "EfsServiceMain"
  ],
  "efsutil.dll": [
    "EfsUtilReleaseUserKey",
    "EfsUtilGetCurrentKey",
    "EfsUtilIsSmartcardKey",
    "EfsUtilGetProvider",
    "EfsUtilIsSmartcardProvider",
    "EfsUtilGetSmartcardProviderName",
    "EfsUtilGetUserKey",
    "EfsUtilGetCurrentKey_Deprecated",
    "EfsUtilCheckCurrentKeyCapabilities",
    "EfsUtilApplyGroupPolicy",
    "EfsUtilGetCurrentUserInformation",
    "EfsUtilReleaseProvider",
    "EfsUtilSetSmartcardPin",
    "EfsUtilSmartcardCredsNeededError",
    "EfsUtilGetCertContextFromCertHash",
    "EfsUtilSetCurrentKey",
    "EfsUtilCreateSelfSignedCertificate"
  ],
  "els.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "elsTrans.dll": [
    "EnumServices",
    "InitService",
    "FreeService",
    "FreePropertyBag",
    "RecognizeText",
    "DoAction"
  ],
  "elslad.dll": [
    "InitService",
    "FreeService",
    "FreePropertyBag",
    "RecognizeText",
    "DoAction"
  ],
  "encapi.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "energy.dll": [
    "EnergyWizard_TransformReport",
    "EnergyWizard_CreateEnergyWizard",
    "EnergyWizard_GetLogEntryCounts",
    "EnergyWizard_CancelTrace",
    "EnergyWizard_SaveReport",
    "EnergyWizard_CollectTrace",
    "EnergyWizard_DestroyEnergyWizard",
    "EnergyWizard_DefaultTraceDuration",
    "EnergyWizard_SqmAnalysis",
    "EnergyWizard_Analyze"
  ],
  "eqossnap.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "es.dll": [
    "NotifyLogonUser",
    "DllCanUnloadNow",
    "SvchostPushServiceGlobals",
    "LCEControlServer",
    "DllGetClassObject",
    "NotifyLogoffUser",
    "ServiceMain"
  ],
  "esent.dll": [
    "JetSnapshotStart",
    "JetEndDatabaseIncrementalReseedW",
    "JetGetLogInfoA",
    "JetBeginTransaction",
    "JetDeleteColumn2W",
    "JetCreateDatabaseA",
    "JetReadFile",
    "JetOSSnapshotFreezeA@16",
    "JetGetRecordPosition",
    "JetGetLogInfo",
    "JetConvertDDLA",
    "JetOpenDatabaseA@20",
    "JetResetCounter",
    "JetDelete@8",
    "JetCreateIndex3W",
    "JetGetIndexInfoW@28",
    "JetGetAttachInfoInstanceW@16",
    "JetRenameColumn",
    "JetEndDatabaseIncrementalReseedW@20",
    "JetCloseFile",
    "JetGetCurrentIndexW",
    "JetMove@16",
    "JetConfigureProcessForCrashDump@4",
    "JetTruncateLogInstance@4",
    "JetBackupInstanceW@16",
    "JetOpenDatabaseW",
    "JetBeginSurrogateBackup@16",
    "JetSetIndexRange",
    "JetEndSession@8",
    "JetCreateDatabaseA@20",
    "JetDelete",
    "JetDupSession",
    "JetCreateTableColumnIndexA@12",
    "JetGotoBookmark@16",
    "JetInit3A",
    "JetOSSnapshotEnd",
    "JetEnableMultiInstanceW",
    "JetSetCurrentIndex4",
    "JetRestore2A",
    "JetGetPageInfo2",
    "JetRestore2A@12",
    "JetCreateInstanceA",
    "JetTerm",
    "JetGetInstanceInfoA",
    "JetDeleteIndexW",
    "JetGetInstanceInfoW@8",
    "JetCreateDatabaseWithStreaming",
    "JetStopBackupInstance",
    "JetGetAttachInfoInstance",
    "JetFreeBuffer@4",
    "JetGetLogInfoInstanceW",
    "JetOpenDatabase",
    "JetGetLock@12",
    "JetRenameTable",
    "JetOSSnapshotGetFreezeInfo",
    "JetCreateTableColumnIndex3W@12",
    "JetSetSystemParameterW@20",
    "JetGetInstanceMiscInfo",
    "JetGetSystemParameterW",
    "JetOpenFileA",
    "JetAttachDatabase2A@16",
    "JetSetTableSequential",
    "JetGetColumnInfoA",
    "JetIdle",
    "JetCompactA@24",
    "JetTerm@4",
    "JetEnableFaultInjection",
    "JetUpgradeDatabaseA",
    "JetComputeStats@8",
    "JetSetColumn@28",
    "JetRenameColumnA",
    "JetGetAttachInfoW@12",
    "JetOSSnapshotGetFreezeInfoA@16",
    "JetOSSnapshotPrepare@8",
    "JetMakeKey@20",
    "JetSetColumnDefaultValueA",
    "JetAttachDatabaseA@12",
    "JetInit3",
    "JetIntersectIndexes",
    "JetGetSystemParameterA",
    "JetSnapshotStartW@12",
    "JetSetTableSequential@12",
    "JetRegisterCallback@24",
    "JetAttachDatabase2W",
    "JetRemoveLogfileA",
    "JetSetCurrentIndex2A",
    "JetGetLogInfoInstance2W@20",
    "JetGetTableInfoA@20",
    "JetCreateTableColumnIndex3A",
    "JetGetDatabaseInfo",
    "JetBackupInstanceW",
    "JetGetMaxDatabaseSize",
    "JetGetDatabasePages",
    "JetGetSystemParameterW@24",
    "JetResetTableSequential@12",
    "JetDeleteIndexW@12",
    "JetGetRecordSize",
    "JetGetLogFileInfo",
    "JetCreateIndex2A",
    "JetTest@4",
    "JetGetObjectInfoW",
    "JetStopService",
    "JetRestoreInstanceA@16",
    "JetBeginExternalBackupInstance@8",
    "JetGetObjectInfoW@32",
    "JetRenameColumnW",
    "JetSetColumnDefaultValueW",
    "JetRestore2W@12",
    "JetGetInstanceMiscInfo@16",
    "JetDupCursor@16",
    "JetRegisterCallback",
    "JetGetAttachInfoInstanceW",
    "JetExternalRestore2A@40",
    "JetStopBackup",
    "JetBackupW@12",
    "JetGrowDatabase@16",
    "JetOSSnapshotFreezeA",
    "JetRetrieveTaggedColumnList",
    "JetCreateTableColumnIndex",
    "JetDefragment2W",
    "JetDeleteIndex",
    "JetSetDatabaseSizeA@16",
    "JetDeleteTableA",
    "JetAddColumnA@28",
    "JetSetSystemParameter",
    "JetGetAttachInfoW",
    "JetCreateInstance2A",
    "JetDefragment2A@28",
    "JetGetInstanceInfo",
    "JetExternalRestoreW@32",
    "JetOpenTempTable2@28",
    "JetOSSnapshotGetFreezeInfoW@16",
    "JetRetrieveKey",
    "JetUpgradeDatabaseW",
    "JetUpdate2@24",
    "JetGetLogInfoInstance2A",
    "JetSetMaxDatabaseSize",
    "JetTracing",
    "JetGetVersion@8",
    "JetCreateDatabaseWithStreamingW",
    "JetRenameTableW",
    "JetEndExternalBackupInstance2@8",
    "JetRetrieveColumns",
    "JetRemoveLogfileW",
    "JetGetTableColumnInfoW",
    "JetCreateInstance2A@16",
    "JetSetCurrentIndex3",
    "JetUpdate",
    "JetSeek@12",
    "JetAttachDatabaseA",
    "JetGetLogFileInfoA",
    "JetDeleteTableA@12",
    "JetSetSessionContext",
    "JetCompactA",
    "JetRestoreInstanceW@16",
    "JetResetSessionContext@4",
    "JetExternalRestoreA",
    "JetOSSnapshotTruncateLogInstance@12",
    "JetOpenFileSectionInstanceW@28",
    "JetConvertDDL",
    "JetInit2@8",
    "JetCreateTableColumnIndex2A",
    "JetAttachDatabaseWithStreaming",
    "JetAttachDatabaseWithStreamingW@24",
    "JetOpenTableA",
    "JetRemoveLogfileW@12",
    "JetSetDatabaseSize",
    "JetCreateIndex3A",
    "JetDatabaseScan",
    "JetDetachDatabase2W",
    "JetCreateIndexW@28",
    "JetSetCurrentIndex4A",
    "JetUnregisterCallback@16",
    "JetGetTableColumnInfo",
    "JetGetAttachInfoA@12",
    "JetAddColumnW",
    "JetSetResourceParam",
    "JetOSSnapshotThaw@8",
    "JetSetColumns",
    "JetConvertDDLW@20",
    "JetCreateDatabase2A",
    "JetBeginExternalBackup@4",
    "JetEndExternalBackupInstance@4",
    "JetStopBackup@0",
    "JetCloseTable",
    "JetCreateIndex2",
    "JetDefragment3W@32",
    "JetSetCurrentIndex3W",
    "JetSetMaxDatabaseSize@16",
    "JetGetLock",
    "JetIntersectIndexes@20",
    "DebugExtensionUninitialize@0",
    "JetStopBackupInstance@4",
    "JetDeleteColumn2A",
    "JetEnableMultiInstanceA",
    "JetRenameTableW@16",
    "JetSetResourceParam@16",
    "JetDefragment3A@32",
    "JetBeginSessionW",
    "JetPrepareUpdate@12",
    "JetGrowDatabase",
    "JetSetCurrentIndexW",
    "JetGetSessionInfo@16",
    "JetDetachDatabase2",
    "JetGetAttachInfoInstanceA",
    "JetEnumerateColumns@40",
    "JetAttachDatabase",
    "JetOSSnapshotTruncateLog",
    "JetGetLogInfoW",
    "JetGetRecordSize2@16",
    "JetAttachDatabaseWithStreamingA",
    "JetPrepareToCommitTransaction@16",
    "JetCloseFileInstance@8",
    "JetCreateIndexA",
    "JetDeleteColumnW@12",
    "JetFreeBuffer",
    "JetOpenFile",
    "JetSetSystemParameterA@20",
    "JetBeginTransaction@4",
    "JetTest",
    "JetGetTableInfoW",
    "JetGetIndexInfoW",
    "DebugExtensionInitialize",
    "JetGetRecordSize2",
    "JetCompactW@24",
    "JetOpenTableA@28",
    "JetCreateTableColumnIndex3A@12",
    "JetGetVersion",
    "JetGetLogInfoW@12",
    "JetDetachDatabase2A",
    "JetRestoreW",
    "JetGetResourceParam@16",
    "ese",
    "JetGetDatabaseInfoW",
    "JetCreateDatabaseWithStreamingA@28",
    "JetEscrowUpdate@36",
    "JetEndDatabaseIncrementalReseedA@20",
    "JetRestoreA",
    "JetCreateIndex2A@16",
    "JetSetLS",
    "JetExternalRestore2",
    "JetSetColumnDefaultValueW@28",
    "JetGetCounter",
    "JetBackupA",
    "JetGetTruncateLogInfoInstanceA",
    "JetOSSnapshotGetFreezeInfoW",
    "JetEnableMultiInstance",
    "JetOSSnapshotPrepare",
    "JetExternalRestore2W",
    "JetRetrieveKey@24",
    "JetSetDatabaseSizeW",
    "JetMove",
    "JetCreateIndex2W",
    "JetSetCurrentIndexA@12",
    "JetDeleteColumnA",
    "JetOpenFileInstance",
    "JetBeginDatabaseIncrementalReseed",
    "JetEndSurrogateBackup",
    "JetSetCurrentIndex2",
    "JetOSSnapshotFreezeW@16",
    "DebugExtensionNotify@12",
    "JetExternalRestore2A",
    "JetOpenTemporaryTable@8",
    "JetSetCurrentIndex4W@24",
    "JetDupCursor",
    "JetGotoPosition@12",
    "JetCreateTableA",
    "JetGetPageInfo",
    "JetSnapshotStartA",
    "JetOpenFileInstanceA",
    "JetDeleteTable",
    "JetRestore2W",
    "JetOpenTableW",
    "JetSnapshotStartW",
    "JetGetDatabaseFileInfo",
    "JetGetPageInfo2@24",
    "JetCreateInstance2",
    "JetGetLogInfoInstanceW@16",
    "JetOpenTable",
    "JetTerm2",
    "JetUpdate@20",
    "JetCreateTableColumnIndex2A@12",
    "JetCloseFileInstance",
    "JetSetCurrentIndex3W@20",
    "JetGetDatabasePages@32",
    "JetReadFile@16",
    "JetCompact",
    "JetGetColumnInfoA@28",
    "JetGetColumnInfo",
    "JetGetLogFileInfoA@16",
    "JetGetLogInfoInstance2A@20",
    "JetCreateTableColumnIndex2W",
    "JetGetLogInfoInstance",
    "JetGetTableInfoW@20",
    "JetGetIndexInfo",
    "JetCreateTableColumnIndex2W@12",
    "JetDeleteTableW",
    "JetOSSnapshotTruncateLogInstance",
    "JetDetachDatabaseW@8",
    "JetCloseTable@8",
    "JetDBUtilitiesA@4",
    "JetInit",
    "JetGetRecordSize@16",
    "JetDeleteTableW@12",
    "JetOSSnapshotPrepareInstance",
    "JetRestoreInstanceA",
    "JetDBUtilitiesA",
    "JetStopService@0",
    "JetExternalRestoreA@32",
    "JetExternalRestore2W@40",
    "JetOpenFileA@16",
    "JetOpenTempTable2",
    "JetSetColumnDefaultValue",
    "JetCreateInstance",
    "JetGetAttachInfoInstanceA@16",
    "JetOSSnapshotTruncateLog@8",
    "JetRenameColumnW@20",
    "JetDefragment3",
    "JetCreateDatabase2A@20",
    "JetIndexRecordCount@16",
    "JetRestoreA@8",
    "JetGetCounter@12",
    "JetConvertDDLA@20",
    "JetDatabaseScan@24",
    "JetGetObjectInfoA@32",
    "JetCreateTableA@24",
    "JetGetColumnInfoW@28",
    "JetInit@4",
    "JetOSSnapshotAbort",
    "JetOSSnapshotFreeze",
    "JetGetLogFileInfoW",
    "JetCreateDatabaseWithStreamingW@28",
    "JetAttachDatabaseWithStreamingA@24",
    "JetGetThreadStats",
    "JetBeginDatabaseIncrementalReseedW@12",
    "JetGetTruncateLogInfoInstanceW",
    "JetOpenFileW",
    "JetDeleteColumnW",
    "JetPrereadKeys@28",
    "JetBackupA@12",
    "JetDefragmentW",
    "JetDeleteColumn",
    "JetBeginSessionW@16",
    "JetRestoreInstanceW",
    "JetResetTableSequential",
    "JetPrereadKeys",
    "JetGetLS@16",
    "JetOSSnapshotFreezeW",
    "JetDetachDatabaseA",
    "JetTruncateLog",
    "JetTruncateLog@0",
    "JetSnapshotStop@8",
    "JetRestoreW@8",
    "JetGetLogInfoInstanceA",
    "JetUpgradeDatabaseA@16",
    "JetGetDatabaseFileInfoA@16",
    "JetGetTableIndexInfoA",
    "JetRetrieveColumn",
    "JetGetLogFileInfoW@16",
    "JetGetDatabaseFileInfoA",
    "JetOSSnapshotGetFreezeInfoA",
    "JetStopServiceInstance@4",
    "JetGetCursorInfo@20",
    "JetGetInstanceInfoA@8",
    "JetOSSnapshotThaw",
    "JetCreateTableColumnIndex2",
    "JetIndexRecordCount",
    "JetOpenDatabaseW@20",
    "JetOSSnapshotPrepareInstance@12",
    "JetDetachDatabaseW",
    "JetGetDatabaseFileInfoW@16",
    "JetGetCurrentIndexW@16",
    "JetBeginExternalBackupInstance",
    "JetGetCursorInfo",
    "JetAddColumn",
    "JetComputeStats",
    "JetCreateTableW@24",
    "JetGetTableIndexInfoW",
    "JetAttachDatabase2",
    "JetCreateTableColumnIndex3W",
    "JetCreateDatabase",
    "JetSetIndexRange@12",
    "JetPatchDatabasePages",
    "JetResetSessionContext",
    "JetEndExternalBackup",
    "JetCommitTransaction",
    "JetCreateIndexW",
    "JetGetTruncateLogInfoInstanceA@16",
    "JetDeleteColumn2W@16",
    "JetMakeKey",
    "JetRetrieveColumns@16",
    "JetGetSessionInfo",
    "JetSetCurrentIndex2W",
    "JetGetResourceParam",
    "JetDefragmentW@24",
    "JetSetCurrentIndex3A",
    "JetRestoreInstance",
    "JetReadFileInstance",
    "JetStopServiceInstance",
    "JetSetCurrentIndex",
    "JetOpenTableW@28",
    "JetGotoBookmark",
    "JetGetCurrentIndexA",
    "JetGetRecordPosition@16",
    "JetDefragment2",
    "JetEndExternalBackupInstance",
    "JetDefragment2W@28",
    "JetAddColumnA",
    "JetGetCurrentIndex",
    "JetDefragment3A",
    "JetDBUtilitiesW@4",
    "JetDefragment2A",
    "JetInit2",
    "JetBeginDatabaseIncrementalReseedA",
    "JetGetAttachInfo",
    "JetOpenFileSectionInstance",
    "JetPrepareUpdate",
    "JetCreateTableColumnIndexW@12",
    "JetDeleteIndexA",
    "JetGetObjectInfo",
    "JetOpenFileSectionInstanceA",
    "JetCloseFile@4",
    "JetSnapshotStartA@12",
    "JetExternalRestoreW",
    "JetGetTableInfo",
    "JetGetTableInfoA",
    "JetCreateTableColumnIndexA",
    "JetOpenDatabaseA",
    "JetBeginSession",
    "JetOpenFileInstanceW@20",
    "JetExternalRestore",
    "JetSeek",
    "JetCreateIndex2W@16",
    "JetDeleteColumnA@12",
    "JetEndDatabaseIncrementalReseed",
    "JetEscrowUpdate",
    "JetInit3W@12",
    "JetSetSystemParameterW",
    "JetCompactW",
    "JetBeginSessionA@16",
    "JetEndSurrogateBackup@8",
    "JetCreateDatabaseW",
    "JetGetDatabaseFileInfoW",
    "JetEnableFaultInjection@16",
    "JetRestore",
    "JetTracing@12",
    "JetGetTruncateLogInfoInstanceW@16",
    "JetRestore2",
    "JetDeleteColumn2",
    "JetBackup",
    "JetTruncateLogInstance",
    "JetUpgradeDatabase",
    "JetGetBookmark",
    "JetCloseDatabase",
    "JetGetAttachInfoA",
    "JetDefragmentA",
    "JetSetCurrentIndexA",
    "JetAttachDatabase2A",
    "JetGetThreadStats@8",
    "JetOpenTempTable3@28",
    "JetCreateInstance2W",
    "JetDetachDatabase2A@12",
    "JetCreateDatabaseWithStreamingA",
    "JetDetachDatabase",
    "JetGetLS",
    "JetGetSecondaryIndexBookmark@36",
    "JetGotoSecondaryIndexBookmark@28",
    "JetUpgradeDatabaseW@16",
    "JetGetMaxDatabaseSize@16",
    "JetOSSnapshotEnd@8",
    "JetGetLogInfoA@12",
    "JetGetTruncateLogInfoInstance",
    "JetRenameTableA@16",
    "DebugExtensionNotify",
    "JetCreateTable",
    "JetAttachDatabaseW@12",
    "JetGetObjectInfoA",
    "JetBackupW",
    "JetSetCurrentIndex2A@16",
    "JetBeginTransaction2",
    "JetAttachDatabaseW",
    "JetRemoveLogfileA@12",
    "JetGotoSecondaryIndexBookmark",
    "JetBackupInstance",
    "JetBeginExternalBackup",
    "DebugExtensionInitialize@8",
    "JetAttachDatabase2W@16",
    "JetSetSystemParameterA",
    "JetGetTableColumnInfoW@24",
    "JetSetDatabaseSizeA",
    "JetTerm2@8",
    "JetSetCurrentIndex2W@16",
    "JetCreateInstanceW@8",
    "JetConfigureProcessForCrashDump",
    "DebugExtensionUninitialize",
    "JetBackupInstanceA",
    "JetEnableMultiInstanceW@12",
    "JetBeginDatabaseIncrementalReseedW",
    "JetDeleteColumn2A@16",
    "JetIdle@8",
    "JetCreateDatabase2",
    "JetEnableMultiInstanceA@12",
    "JetInit3A@12",
    "JetOpenTempTable@24",
    "JetAttachDatabaseWithStreamingW",
    "JetRetrieveTaggedColumnList@28",
    "JetDetachDatabaseA@8",
    "JetResetCounter@8",
    "JetCreateDatabase2W@20",
    "JetOpenFileInstanceW",
    "JetPatchDatabasePagesA@28",
    "JetOpenTempTable",
    "JetSetColumns@16",
    "JetOpenFileW@16",
    "JetSetCurrentIndex4W",
    "JetGetLogInfoInstance2",
    "JetGetIndexInfoA",
    "JetOpenTemporaryTable",
    "JetOpenFileInstanceA@20",
    "JetCreateInstance2W@16",
    "JetGetIndexInfoA@28",
    "JetBeginTransaction2@8",
    "JetGetLogInfoInstance2W",
    "JetGetCurrentIndexA@16",
    "JetDeleteIndexA@12",
    "JetSetColumnDefaultValueA@28",
    "JetSetSessionContext@8",
    "JetDefragmentA@24",
    "JetRetrieveColumn@32",
    "JetGotoPosition",
    "JetGetDatabaseInfoW@20",
    "JetEndDatabaseIncrementalReseedA",
    "JetDBUtilities",
    "JetEnumerateColumns",
    "JetPatchDatabasePagesW@28",
    "JetCreateInstanceW",
    "JetCreateDatabase2W",
    "JetBeginDatabaseIncrementalReseedA@12",
    "JetGetBookmark@20",
    "JetGetSystemParameter",
    "JetGetDatabaseInfoA@20",
    "ese@8",
    "JetGetTableColumnInfoA",
    "JetCreateIndex",
    "JetOpenFileSectionInstanceA@28",
    "JetCreateIndexA@28",
    "JetOpenFileSectionInstanceW",
    "JetRenameColumnA@20",
    "JetGetColumnInfoW",
    "JetUnregisterCallback",
    "JetSetCurrentIndex4A@24",
    "JetBeginSurrogateBackup",
    "JetConvertDDLW",
    "JetSetLS@16",
    "JetCreateDatabaseW@20",
    "JetDefragment",
    "JetEndExternalBackupInstance2",
    "JetPatchDatabasePagesA",
    "JetDetachDatabase2W@12",
    "JetGetSecondaryIndexBookmark",
    "JetPrepareToCommitTransaction",
    "JetSetCurrentIndexW@12",
    "JetDBUtilitiesW",
    "JetRollback",
    "JetCreateInstanceA@8",
    "JetGetTableColumnInfoA@24",
    "JetBeginSessionA",
    "JetDupSession@8",
    "JetCloseDatabase@12",
    "JetSetColumn",
    "JetUpdate2",
    "JetCreateTableW",
    "JetGetPageInfo@24",
    "JetAddColumnW@28",
    "JetSetCurrentIndex3A@20",
    "JetDefragment3W",
    "JetSetDatabaseSizeW@16",
    "JetGetTableIndexInfo",
    "JetSnapshotStop",
    "JetGetSystemParameterA@24",
    "JetReadFileInstance@20",
    "JetRenameTableA",
    "JetGetTableIndexInfoA@24",
    "JetCommitTransaction@8",
    "JetGetInstanceInfoW",
    "JetBackupInstanceA@16",
    "JetGetTableIndexInfoW@24",
    "JetEndSession",
    "JetOSSnapshotAbort@8",
    "JetCreateTableColumnIndexW",
    "JetGetDatabaseInfoA",
    "JetGetLogInfoInstanceA@16",
    "JetPatchDatabasePagesW",
    "JetInit3W",
    "JetEndExternalBackup@0",
    "JetRollback@8",
    "JetOpenTempTable3"
  ],
  "esentprf.dll": [
    "OpenPerformanceData",
    "CollectPerformanceData",
    "ClosePerformanceData"
  ],
  "eventcls.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "evr.dll": [
    "MFCreateVideoMediaTypeFromVideoInfoHeader",
    "MFIsFormatYUV",
    "DllRegisterServer",
    "MFConvertColorInfoFromDXVA",
    "DllUnregisterServer",
    "MFCreateVideoMediaTypeFromSubtype",
    "MFCreateVideoMediaType",
    "MFCopyImage",
    "MFGetPlaneSize",
    "MFCreateDXSurfaceBuffer",
    "MFCreateVideoOTA",
    "MFCreateVideoMixerAndPresenter",
    "MFGetStrideForBitmapInfoHeader",
    "MFCreateVideoMediaTypeFromVideoInfoHeader2",
    "MFCreateVideoPresenter",
    "MFCreateVideoMediaTypeFromBitMapInfoHeader",
    "MFCreateVideoSampleAllocator",
    "MFConvertColorInfoToDXVA",
    "MFConvertToFP16Array",
    "MFCreateVideoMixer",
    "MFCreateVideoPresenter2",
    "DllCanUnloadNow",
    "MFGetUncompressedVideoFormat",
    "MFConvertFromFP16Array",
    "MFInitVideoFormat",
    "DllGetClassObject",
    "MFInitVideoFormat_RGB",
    "MFCreateVideoSampleFromSurface"
  ],
  "expsrv.dll": [
    "__vbaVarImp",
    "_adj_fprem",
    "rtcLog",
    "rtcByteValueBstr",
    "__vbaFpUI1",
    "rtcChangeDir",
    "rtcMidCharVar",
    "__vbaUI1Var",
    "__vbaLsetFixstrFree",
    "__vbaPut3",
    "__vbaVarSetUnkAddref",
    "rtcLeftVar",
    "rtcVarFromVar",
    "BASIC_DISPINTERFACE_GetTICount",
    "EbGetHandleOfExecutingProject",
    "rtDecFromVar",
    "GetMemObj",
    "PutMem8",
    "__vbaLateIdCallSt",
    "_CIlog",
    "__vbaExitProc",
    "__vbaI2Cy",
    "__vbaVargVar",
    "__vbaRsetFixstr",
    "rtcSetDateBstr",
    "EVENT_SINK_Release",
    "__vbaStrAryToUnicode",
    "rtcGetTimeVar",
    "__vbaForEachVar",
    "__vbaInStr",
    "EbLibraryLoad",
    "rtcGetDayOfMonth",
    "VarPtr",
    "__vbaCyFix",
    "__vbaLateMemNamedCallLd",
    "rtcFormatCurrency",
    "GetMemVar",
    "__vbaVar2Vec",
    "rtcIsEmpty",
    "__vbaVargParmRef",
    "PutMemVar",
    "__vbaVarTextCmpEq",
    "rtcCos",
    "GetMem4",
    "__vbaR4ForNextCheck",
    "__vbaForEachCollAd",
    "__vbaVargVarCopy",
    "rtcQBColor",
    "ProcCallEngine",
    "_adj_fdiv_m64",
    "rtcRightTrimVar",
    "__vbaVargVarMove",
    "__vbaCyStr",
    "__vbaRedimPreserveVar2",
    "__vbaVarTstNe",
    "rtcTrimVar",
    "rtcLenCharVar",
    "__vbaBoolStr",
    "__vbaVarCmpLe",
    "IID_IVbaHost",
    "__vbaStrI2",
    "rtcSpaceVar",
    "rtcSin",
    "__vbaVarEqv",
    "PutMem2",
    "__vbaVarIndexLoad",
    "rtcMakeDir",
    "__vbaPutOwner4",
    "__vbaVarCopy",
    "__vbaVarAdd",
    "rtcSetDateVar",
    "__vbaStrR4",
    "_adj_fdivr_m32",
    "TipInvokeMethod2",
    "__vbaFailedFriend",
    "__vbaStrR8",
    "__vbaStrFixstr",
    "__vbaGosub",
    "rtcDateFromVar",
    "_CItan",
    "__vbaVarLateMemCallLdRf",
    "PutMemNewObj",
    "__vbaEraseKeepData",
    "__vbaNextEachCollObj",
    "rtcCharValueBstr",
    "__vbaDerefAry1",
    "BASIC_CLASS_Release",
    "__vbaObjIs",
    "__vbaR4Var",
    "rtcStrReverse",
    "__vbaVarSetVarAddref",
    "rtcOctVarFromVar",
    "__vbaWriteFile",
    "GetMemEvent",
    "__vbaStrCmp",
    "__vbaVarTstLt",
    "__vbaGenerateBoundsError",
    "__vbaCyInt",
    "__vbaCopyBytes",
    "__vbaPowerR8",
    "__vbaErrorOverflow",
    "rtcFileCopy",
    "SetMemEvent",
    "rtcBstrFromByte",
    "_adj_fptan",
    "__vbaMidStmtBstr",
    "__vbaRedimPreserve",
    "__vbaGetOwner4",
    "__vbaVarLateMemCallLd",
    "__vbaVarTextLikeVar",
    "__vbaMidStmtVar",
    "rtBoolFromErrVar",
    "rtcFormatNumber",
    "rtUI1FromErrVar",
    "rtcTrimBstr",
    "PutMemEvent",
    "__vbaPutFxStr4",
    "__vbaVarTextCmpGe",
    "rtcIRR",
    "__vbaStrCat",
    "rtcCurrentDir",
    "__vbaVarNeg",
    "__vbaFreeObjList",
    "EVENT_SINK_GetIDsOfNames",
    "PutMemObj",
    "__vbaGet4",
    "GetMemStr",
    "__vbaErase",
    "EbGetVBAObject",
    "__vbaSetSystemError",
    "rtcIsArray",
    "__vbaFPInt",
    "__vbaObjSetAddref",
    "rtcInStr",
    "__vbaCyMul",
    "__vbaVarAbs",
    "rtcFileWidth",
    "__vbaDateVar",
    "rtcMidBstr",
    "rtcNPV",
    "__vbaExitEachAry",
    "rtcImmediateIf",
    "__vbaNextEachCollAd",
    "rtcJoin",
    "EVENT_SINK_QueryInterface",
    "__vbaCastObj",
    "__vbaStrDate",
    "rtcSendKeys",
    "__vbaVarIndexStore",
    "rtcEnvironVar",
    "__vbaLateMemSt",
    "EVENT_SINK_AddRef",
    "rtcSetTimeVar",
    "rtcRightBstr",
    "__vbaFpI4",
    "rtcMonthName",
    "TipUnloadInstance",
    "_adj_fdiv_r",
    "Zombie_GetIDsOfNames",
    "__vbaStrErrVarCopy",
    "__vbaVarLike",
    "__vbaVarDup",
    "__vbaStrVarCopy",
    "__vbaVarVargNofree",
    "__vbaCyVar",
    "__vbaRecUniToAnsi",
    "__vbaNextEachVar",
    "__vbaI2Sgn",
    "__vbaMidStmtVarB",
    "_adj_fpatan",
    "CreateIExprSrvObj",
    "__vbaFreeVarList",
    "TipCreateInstanceEx",
    "rtcInputCount",
    "GetMem8",
    "__vbaVarXor",
    "__vbaVarTextTstGt",
    "rtcBeep",
    "PutMemStr",
    "__vbaPrintObj",
    "__vbaCheckTypeVar",
    "__vbaVarLateMemCallSt",
    "rtcVarFromError",
    "rtcGetSecondOfMinute",
    "__vbaCySub",
    "__vbaVarTextTstGe",
    "__vbaLenBstrB",
    "__vbaAryRecMove",
    "__vbaFileLock",
    "__vbaLateIdStAd",
    "__vbaCyI4",
    "rtcLeftTrimBstr",
    "__vbaVargUnkAddref",
    "__vbaVarIndexLoadRefLock",
    "__vbaGosubReturn",
    "__vbaBoolVar",
    "__vbaObjSet",
    "rtcPackDate",
    "__vbaI2Str",
    "__vbaR8Cy",
    "__vbaStrTextLike",
    "rtcCommandBstr",
    "__vbaRefVarAry",
    "__vbaVarLateMemStAd",
    "rtcPackTime",
    "GetMemNewObj",
    "rtcSetCurrentCalendar",
    "__vbaVarCmpEq",
    "rtcNPer",
    "rtcWeekdayName",
    "_CIsin",
    "__vbaVarDiv",
    "__vbaVarTextTstEq",
    "rtcIPMT",
    "rtcCompareBstr",
    "__vbaInStrVar",
    "__vbaHresultCheckObj",
    "__vbaCySgn",
    "__vbaLsetFixstr",
    "rtcRandomNext",
    "__vbaFreeObj",
    "rtcCreateObject",
    "__vbaLbound",
    "EVENT_SINK2_Release",
    "_CIatan",
    "rtcGetSetting",
    "__vbaFpCDblR8",
    "rtcIsError",
    "rtcUpperCaseVar",
    "__vbaExitEachColl",
    "__vbaR8Sgn",
    "rtcInputCountVar",
    "Zombie_GetTypeInfo",
    "__vbaPutFxStr3",
    "rtcPPMT",
    "__vbaR4Sgn",
    "__vbaVarSetUnk",
    "__vbaDerefAry",
    "__vbaFreeVarg",
    "__vbaLenVar",
    "__vbaLateMemCall",
    "__vbaForEachAry",
    "EbGetErrorInfo",
    "__vbaUnkVar",
    "rtcHexBstrFromVar",
    "__vbaFixstrConstruct",
    "__vbaVargObj",
    "__vbaCyAdd",
    "__vbaVarSetObj",
    "__vbaLateMemNamedCallSt",
    "__vbaI4ErrVar",
    "__vbaFreeStrList",
    "__vbaCyI2",
    "rtcFormatPercent",
    "__vbaStrUI1",
    "rtcCommandVar",
    "rtcBstrFromChar",
    "__vbaUI1I2",
    "__vbaForEachCollObj",
    "__vbaVarCmpGt",
    "__vbaLateIdNamedCallSt",
    "__vbaStopExe",
    "rtI4FromErrVar",
    "rtcVarType",
    "__vbaVarSetObjAddref",
    "__vbaVargObjAddref",
    "__vbaBoolErrVar",
    "__vbaPutOwner3",
    "rtcIsNumeric",
    "Zombie_QueryInterface",
    "__vbaObjVar",
    "__vbaAryDestruct",
    "rtcChangeDrive",
    "rtcErrObj",
    "rtcShell",
    "rtcInputCharCount",
    "__vbaLateIdNamedCall",
    "__vbaI2Var",
    "__vbaVarFix",
    "GetMem1",
    "rtcTan",
    "rtBstrFromErrVar",
    "rtcGetMinuteOfHour",
    "__vbaCyForNext",
    "EbLibraryUnload",
    "__vbaCyErrVar",
    "rtcGetAllSettings",
    "rtcDeleteSetting",
    "rtcFileLen",
    "rtcLeftCharBstr",
    "rtcGetObject",
    "rtcGetTimeValue",
    "__vbaVarTextTstNe",
    "rtcGetDateVar",
    "BASIC_CLASS_Invoke",
    "__vbaStrBool",
    "__vbaVarAnd",
    "rtcFileLocation",
    "__vbaVerifyVarObj",
    "__vbaI4ForNextCheck",
    "rtcInputBox",
    "rtcRound",
    "EbGetObjConnectionCounts",
    "rtcGetMonthOfYear",
    "rtcRandomize",
    "rtcGetTimeBstr",
    "__vbaEnd",
    "__vbaRedimVar",
    "__vbaVarTextCmpNe",
    "__vbaFpR4",
    "__vbaExitEachVar",
    "PutMem4",
    "__vbaGetFxStr4",
    "rtcFileReset",
    "__vbaNew2",
    "__vbaVarLateMemSt",
    "rtcCVErrFromVar",
    "__vbaRsetFixstrFree",
    "__vbaR8IntI4",
    "__vbaVarMul",
    "rtcChoose",
    "rtcInStrRev",
    "rtcGetCurrentCalendar",
    "__vbaStrCopy",
    "__vbaR8ForNextCheck",
    "__vbaLateIdCallLd",
    "rtcVarBstrFromByte",
    "_CIsqrt",
    "__vbaFpR8",
    "__vbaDateStr",
    "rtCyFromErrVar",
    "__vbaFileOpen",
    "rtcSpaceBstr",
    "EbSetContextWorkerThread",
    "__vbaR8ErrVar",
    "__vbaLateIdSt",
    "DllFunctionCall",
    "__vbaFpCSngR8",
    "__vbaStr2Vec",
    "__vbaNextEachAry",
    "__vbaFpI2",
    "__vbaGetFxStr3",
    "Zombie_GetTypeInfoCount",
    "__vbaUdtVar",
    "__vbaVarForNext",
    "rtcFilter",
    "rtcLenVar",
    "__vbaFPFix",
    "__vbaInStrB",
    "rtcSLN",
    "rtcDatePart",
    "__vbaLateIdNamedCallLd",
    "rtcStrConvVar",
    "rtcEndOfFile",
    "__vbaInputFile",
    "__vbaLenBstr",
    "rtcAppleScript",
    "__vbaAryVar",
    "EbDestroyContext",
    "rtcHexVarFromVar",
    "__vbaFileCloseAll",
    "__vbaRedimVar2",
    "__vbaStrCy",
    "__vbaI2Abs",
    "rtcDDB",
    "Zombie_AddRef",
    "__vbaI4Abs",
    "__vbaR8Str",
    "__vbaAryUnlock",
    "BASIC_CLASS_QueryInterface",
    "rtcMidVar",
    "Zombie_Invoke",
    "rtcSplit",
    "__vbaError",
    "__vbaAryVarVarg",
    "__vbaChkstk",
    "__vbaLateIdCall",
    "__vbaAryRebase1Var",
    "__vbaStrI4",
    "__vbaI4Var",
    "__vbaLineInputStr",
    "__vbaVarTstLe",
    "__vbaGosubFree",
    "__vbaLateMemNamedStAd",
    "rtcRemoveDir",
    "__vbaUI1Sgn",
    "__vbaCyForInit",
    "__vbaVarErrI4",
    "rtcIMEStatus",
    "__vbaAryConstruct",
    "__vbaUbound",
    "__vbaI2ForNextCheck",
    "rtcDoEvents",
    "__vbaR8IntI2",
    "__vbaCastObjVar",
    "rtcDir",
    "__vbaStrToUnicode",
    "rtcLeftBstr",
    "__vbaR4Cy",
    "rtcPartition",
    "rtcPV",
    "__vbaVarNot",
    "__vbaR8Var",
    "__vbaVarForInit",
    "__vbaStrAryToAnsi",
    "__vbaVarIndexLoadRef",
    "EbResetProject",
    "_allmul",
    "rtcLeftCharVar",
    "__vbaCopyBytesZero",
    "__vbaVarTstGt",
    "rtcFileAttributes",
    "_adj_fdiv_m32i",
    "rtcGetDayOfWeek",
    "rtcArray",
    "rtcIsObject",
    "__vbaHresultCheckNonvirt",
    "__vbaStrLike",
    "__vbaVargVarRef",
    "__vbaRecAnsiToUni",
    "rtcInStrChar",
    "__vbaNameFile",
    "rtcIntVar",
    "_CIcos",
    "__vbaI4Str",
    "rtcVarBstrFromAnsi",
    "rtcAnsiValueBstr",
    "rtcGetDateValue",
    "__vbaResume",
    "rtcMIRR",
    "__vbaFreeStr",
    "rtcRightVar",
    "rtcGetPresentDate",
    "__vbaAryConstruct2",
    "__vbaR4Str",
    "EbCreateContext",
    "rtcSaveSetting",
    "__vbaR4ErrVar",
    "rtcStrFromVar",
    "__vbaStrTextCmp",
    "__vbaUI1I4",
    "TipInvokeMethod",
    "rtI2FromErrVar",
    "rtcBstrFromFormatVar",
    "__vbaVarTextCmpLe",
    "__vbaI4Sgn",
    "__vbaVargUnk",
    "rtcEnvironBstr",
    "__vbaCyUI1",
    "__vbaUI1ErrVar",
    "__vbaGet3",
    "_adj_fdivr_m16i",
    "__vbaI2ErrVar",
    "__vbaLateIdNamedStAd",
    "__vbaLateMemStAd",
    "_CIexp",
    "__vbaVarSub",
    "rtcCreateObject2",
    "__vbaFileSeek",
    "__vbaVarIndexStoreObj",
    "__vbaCyMulI2",
    "__vbaUI1Cy",
    "MethCallEngine",
    "__vbaStrVarVal",
    "__vbaVarTstGe",
    "__vbaStrToAnsi",
    "__vbaFileClose",
    "__vbaVarCmpNe",
    "rtcGetFileAttr",
    "__vbaGetOwner3",
    "rtcVarDateFromVar",
    "__vbaVarZero",
    "__vbaDateR8",
    "__vbaRecDestruct",
    "CopyRecord",
    "__vbaPrintFile",
    "rtcCallByName",
    "rtcGetDateBstr",
    "__vbaVarSetVar",
    "GetMem2",
    "__vbaCheckType",
    "rtcGetHostLCID",
    "rtcFV",
    "__vbaLenVarB",
    "__vbaRedimPreserveVar",
    "__vbaVarTextTstLe",
    "__vbaVarDateVar",
    "TipSetOption",
    "__vbaI4Cy",
    "__vbaLateMemCallLd",
    "rtcRgb",
    "__vbaDateR4",
    "rtcSwitch",
    "__vbaStrMove",
    "__vbaVarCmpLt",
    "_adj_fprem1",
    "rtcGetErl",
    "rtcSetTimeBstr",
    "rtcStringVar",
    "__vbaRaiseEvent",
    "rtcFileDateTime",
    "rtcRightCharVar",
    "rtcCurrentDirBstr",
    "rtcIsNull",
    "__vbaFpCy",
    "__vbaHresultCheck",
    "SetMemObj",
    "SetMemNewObj",
    "rtcInputCharCountVar",
    "rtcMacId",
    "__vbaFreeVar",
    "__vbaR8FixI4",
    "rtcKillFiles",
    "__vbaRecAssign",
    "PutMem1",
    "rtcStringBstr",
    "__vbaAryLock",
    "Zombie_Release",
    "__vbaVarMod",
    "EVENT_SINK_Invoke",
    "__vbaExceptHandler",
    "TipGetAddressOfPredeclaredInstance",
    "rtcDateAdd",
    "__vbaLateMemNamedCall",
    "__vbaVarCat",
    "__vbaR8FixI2",
    "__vbaBoolVarNull",
    "__vbaOnGoCheck",
    "__vbaRedim",
    "rtcTypeName",
    "rtcExp",
    "BASIC_CLASS_AddRef",
    "rtcLowerCaseVar",
    "rtcIsMissing",
    "__vbaVarTextTstLt",
    "_adj_fdivr_m32i",
    "__vbaPut4",
    "_adj_fdiv_m16i",
    "__vbaLateMemCallSt",
    "__vbaVarCmpGe",
    "rtcMsgBox",
    "BASIC_CLASS_GetIDsOfNames",
    "rtcRightTrimBstr",
    "__vbaStrComp",
    "rtcOctBstrFromVar",
    "__vbaAryMove",
    "__vbaObjAddref",
    "EVENT_SINK2_AddRef",
    "__vbaFPException",
    "__vbaVarIdiv",
    "__vbaVarMove",
    "rtcMidCharBstr",
    "__vbaVarPow",
    "EbLoadRunTime",
    "rtcBstrFromError",
    "rtcGetHourOfDay",
    "EbIsProjectOnStack",
    "rtcFileSeek",
    "rtcVarStrFromVar",
    "__vbaVarOr",
    "rtcGetYear",
    "__vbaForEachCollVar",
    "__vbaI2I4",
    "__vbaNew",
    "rtcFileLength",
    "__vbaCyAbs",
    "rtcAbsVar",
    "_adj_fdivr_m64",
    "__vbaUI1Str",
    "__vbaVarTextCmpLt",
    "__vbaVarTextLike",
    "rtcLeftTrimVar",
    "rtcFormatDateTime",
    "_adj_fdiv_m32",
    "__vbaCVarAryUdt",
    "SetMemVar",
    "BASIC_DISPINTERFACE_GetTypeInfo",
    "rtcAtn",
    "rtcSYD",
    "__vbaAryCopy",
    "__vbaOnError",
    "rtcFixVar",
    "rtcPMT",
    "__vbaInStrVarB",
    "__vbaVarTextCmpGt",
    "TipCreateInstanceProject2",
    "rtR8FromErrVar",
    "rtcFreeFile",
    "__vbaStrVarMove",
    "rtcDateDiff",
    "__vbaStrCompVar",
    "rtcSetFileAttr",
    "EbResetProjectNormal",
    "__vbaRecDestructAnsi",
    "__vbaVarInt",
    "rtcIsDate",
    "rtcReplace",
    "rtcStrConvVar2",
    "rtcR8ValFromBstr",
    "rtcAppActivate",
    "__vbaLineInputVar",
    "__vbaMidStmtBstrB",
    "__vbaLdZeroAry",
    "__vbaFpCDblR4",
    "rtcGetTimer",
    "rtcSgnVar",
    "__vbaFpCSngR4",
    "__vbaFpCmpCy",
    "rtcUpperCaseBstr",
    "__vbaAryRecCopy",
    "__vbaEraseNoPop",
    "__vbaVarLikeVar",
    "TipUnloadProject",
    "__vbaNextEachCollVar",
    "rtcSqr",
    "rtcBstrFromAnsi",
    "__vbaVarTstEq",
    "rtR4FromErrVar",
    "rtcVarBstrFromChar",
    "rtcRate",
    "rtcLowerCaseBstr",
    "rtcVarFromFormatVar",
    "rtcRightCharBstr"
  ],
  "FDResPub.dll": [
    "FDResPub_MainHosted",
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "FWPUCLNT.DLL": [
    "WSASetSocketPeerTargetName",
    "FwpmLayerSetSecurityInfoByKey0",
    "FwpmSubLayerAdd0",
    "IPsecSaDbSetSecurityInfo0",
    "IPsecKeyModuleAdd0",
    "IPsecSaContextEnum0",
    "FwpmNetEventsSetSecurityInfo0",
    "FwpsGetInProcReplicaOffset0",
    "IkeextSaDbSetSecurityInfo0",
    "FwpmEngineOpen0",
    "IkeextGetConfigParameters0",
    "FwpmLayerDestroyEnumHandle0",
    "IPsecSaContextGetSpi0",
    "FwpsAleGetPortStatus0",
    "FwpmEngineSetSecurityInfo0",
    "FwpmProviderAdd0",
    "IkeextSaDeleteById0",
    "IkeextGetStatistics0",
    "FwpmLayerGetById0",
    "FwpmCalloutDeleteById0",
    "FwpmProviderContextCreateEnumHandle0",
    "NamespaceCallout",
    "WSAImpersonateSocketPeer",
    "FwpmSystemPortsGet0",
    "FwpmNetEventsLost0",
    "FwpmSubLayerSubscribeChanges0",
    "FwpmTransactionAbort0",
    "FwpsQueryIPsecDosFWUsed0",
    "IPsecSaContextGetById0",
    "FwpmFilterSetSecurityInfoByKey0",
    "FwpsAleEndpointGetById0",
    "FwpmFilterSubscribeChanges0",
    "FwpsClassifyUser0",
    "IPsecDospStateEnum0",
    "WSARevertImpersonation",
    "FwpmNetEventDestroyEnumHandle0",
    "FwpmCalloutGetByKey0",
    "FwpmFilterGetSecurityInfoByKey0",
    "FwpmCalloutGetSecurityInfoByKey0",
    "FwpmSubLayerCreateEnumHandle0",
    "FwpsLayerCreateInProcReplica0",
    "FwpmTraceRestoreDefaults0",
    "IPsecSaDbGetSecurityInfo0",
    "FwpmProviderContextEnum0",
    "FwpmIPsecTunnelAdd1",
    "FwpmSubLayerSubscriptionsGet0",
    "IPsecDospStateCreateEnumHandle0",
    "FwpsAleEndpointDestroyEnumHandle0",
    "FwpmFilterSubscriptionsGet0",
    "FwpmCalloutUnsubscribeChanges0",
    "FwpmEngineSetOption0",
    "FwpmCalloutDestroyEnumHandle0",
    "FwpmLayerCreateEnumHandle0",
    "FwpmLayerGetByKey0",
    "FwpmIPsecTunnelAddConditions0",
    "FwpsLayerReleaseInProcReplica0",
    "FwpmProviderUnsubscribeChanges0",
    "FwpmGetAppIdFromFileName0",
    "FwpmSystemPortsUnsubscribe0",
    "FwpmSubLayerEnum0",
    "IPsecSaContextSetSpi0",
    "IPsecSaContextDestroyEnumHandle0",
    "IPsecSaCreateEnumHandle0",
    "FwpmCalloutSubscribeChanges0",
    "FwpmProviderGetByKey0",
    "FwpsFreeMemory0",
    "FwpsAleEndpointSetSecurityInfo0",
    "FwpmProviderEnum0",
    "FwpsAleEndpointGetSecurityInfo0",
    "FwpmEventProviderCreate0",
    "FwpmProviderContextGetById1",
    "FwpmNetEventSubscriptionsGet0",
    "FwpmFilterCreateEnumHandle0",
    "FwpmProviderContextDeleteByKey0",
    "FwpmProviderDestroyEnumHandle0",
    "FwpmSubLayerSetSecurityInfoByKey0",
    "FwpmSubLayerGetByKey0",
    "FwpmSessionCreateEnumHandle0",
    "FwpmCalloutSetSecurityInfoByKey0",
    "IPsecSaContextGetSpi1",
    "IPsecSaInitiateAsync0",
    "IPsecSaContextEnum1",
    "FwpmSubLayerGetSecurityInfoByKey0",
    "FwpmIPsecTunnelAdd0",
    "FwpmProviderContextAdd1",
    "GetUnifiedTraceHandle",
    "WSASetSocketSecurity",
    "IPsecGetStatistics0",
    "FwpmProviderContextGetById0",
    "FwpsAleEndpointCreateEnumHandle0",
    "FwpmFilterGetById0",
    "FwpmEngineGetSecurityInfo0",
    "FwpmTransactionCommit0",
    "FwpmProviderGetSecurityInfoByKey0",
    "FwpmFilterEnum0",
    "IPsecSaContextCreateEnumHandle0",
    "FwpmLayerGetSecurityInfoByKey0",
    "IkeextSaUpdateAdditionalAddressesByTunnelId0",
    "FwpmNetEventEnum0",
    "IPsecSaEnum0",
    "FwpmEngineClose0",
    "FwpmFilterUnsubscribeChanges0",
    "FwpmProviderContextEnum1",
    "FwpmProviderContextSubscribeChanges0",
    "FwpmProviderSetSecurityInfoByKey0",
    "FwpmFilterAdd0",
    "FwpmNetEventUnsubscribe0",
    "IPsecDospStateDestroyEnumHandle0",
    "WSAQuerySocketSecurity",
    "FwpmLayerEnum0",
    "IPsecKeyModuleDelete0",
    "IPsecGetStatistics1",
    "IPsecDospSetSecurityInfo0",
    "IkeextSaGetById0",
    "IkeextSaDestroyEnumHandle0",
    "FwpmCalloutSubscriptionsGet0",
    "IPsecSaContextDeleteById0",
    "IPsecSaContextUpdate0",
    "IPsecSaContextGetById1",
    "IkeextSaEnum0",
    "FwpmEventProviderDestroy0",
    "FwpmCalloutDeleteByKey0",
    "FwpmNetEventsGetSecurityInfo0",
    "FwpmProviderSubscribeChanges0",
    "FwpmEngineGetOption0",
    "IkeextSaDbGetSecurityInfo0",
    "IkeextSaGetById1",
    "FwpmProviderContextGetSecurityInfoByKey0",
    "FwpsOpenToken0",
    "FwpmSessionDestroyEnumHandle0",
    "FwpmProviderContextDestroyEnumHandle0",
    "FwpmProcessNameResolutionEvent0",
    "FwpmCalloutAdd0",
    "IPsecSaContextAddOutbound0",
    "FwpmSubLayerUnsubscribeChanges0",
    "FwpmProviderContextSubscriptionsGet0",
    "IPsecSaContextCreate1",
    "FwpmSubLayerDeleteByKey0",
    "WSADeleteSocketPeerTargetName",
    "FwpsQueryIPsecOffloadDone0",
    "IPsecSaContextCreate0",
    "FwpmProviderContextGetByKey0",
    "IkeextSaUpdatePreferredAddressesByTunnelId0",
    "IkeextSaEnum1",
    "FwpmProviderContextUnsubscribeChanges0",
    "FwpmEventProviderFireNetEvent0",
    "FwpmNetEventSubscribe0",
    "IkeextSetConfigParameters0",
    "FwpsAleExplicitCredentialsQuery0",
    "IPsecSaContextAddOutbound1",
    "FwpmTransactionBegin0",
    "FwpmEventProviderIsNetEventTypeEnabled0",
    "FwpmProviderContextDeleteById0",
    "FwpmNetEventCreateEnumHandle0",
    "IPsecKeyModuleUpdateAcquire0",
    "IPsecSaContextExpire0",
    "FwpmSubLayerDestroyEnumHandle0",
    "FwpmFilterDestroyEnumHandle0",
    "FwpmCalloutCreateEnumHandle0",
    "FwpmProviderContextAdd0",
    "FwpmIPsecTunnelDeleteByKey0",
    "IPsecDospGetSecurityInfo0",
    "FwpmDiagnoseNetFailure0",
    "FwpmSessionEnum0",
    "FwpmProviderCreateEnumHandle0",
    "IPsecSaContextAddInbound1",
    "IPsecDospGetStatistics0",
    "FwpmFreeMemory0",
    "FwpmCalloutEnum0",
    "FwpmProviderContextGetByKey1",
    "FwpmFilterDeleteById0",
    "FwpmProviderSubscriptionsGet0",
    "FwpmSystemPortsSubscribe0",
    "FwpmProviderDeleteByKey0",
    "IPsecSaDestroyEnumHandle0",
    "IPsecSaContextAddInbound0",
    "IkeextSaCreateEnumHandle0",
    "IkeextGetStatistics1",
    "FwpsAleEndpointEnum0",
    "FwpmCalloutGetById0",
    "FwpmNetEventEnum1",
    "IPsecSaEnum1",
    "FwpmProviderContextSetSecurityInfoByKey0",
    "FwpmFilterDeleteByKey0",
    "FwpmFilterGetByKey0"
  ],
  "FXSAPI.dll": [
    "FaxSetArchiveConfigurationW",
    "FaxAddOutboundRuleW",
    "FaxGetArchiveConfigurationW",
    "FaxSetReceiptsConfigurationW",
    "FaxAddOutboundGroupA",
    "FaxSetPortExA",
    "FaxRegisterForServerEventsEx",
    "FaxGetActivityLoggingConfigurationW",
    "FaxRegisterForServerEvents",
    "FaxEnumMessagesW",
    "IsDeviceVirtual",
    "FaxGetReceiptsOptions",
    "FaxGetServicePrintersA",
    "FaxRemoveMessage",
    "FaxSendDocumentA",
    "FaxSetOutboundGroupA",
    "FaxEnableRoutingMethodW",
    "FaxEnumOutboundRulesW",
    "FaxGetSenderInfoA",
    "FaxGetMessageTiffW",
    "FaxGetVersion",
    "FaxGetMessageW",
    "FaxSetSecurity",
    "FaxStartPrintJob2W",
    "FaxGetExtensionDataW",
    "FaxEnumRoutingExtensionsA",
    "FaxSendDocumentExA",
    "FaxGetJobExW",
    "FaxSetGlobalRoutingInfoA",
    "FaxGetSenderInfoW",
    "FaxUnregisterRoutingExtensionW",
    "FaxEnumPortsA",
    "FaxEnumPortsExW",
    "FaxCheckValidFaxFolder",
    "FaxGetExtensionDataA",
    "FaxGetJobEx2",
    "FaxSetOutboxConfiguration",
    "FaxStartMessagesEnum",
    "FaxGetConfigWizardUsed",
    "FaxPrintCoverPageW",
    "FaxEnumAccounts",
    "FaxSetConfigurationA",
    "FaxEndMessagesEnum",
    "FaxEnumGlobalRoutingInfoW",
    "FaxRegisterRoutingExtensionW",
    "FaxSendDocumentForBroadcastA",
    "FaxGetJobA",
    "FaxGetMessageTiffA",
    "FaxRemoveOutboundRule",
    "FaxGetPortExW",
    "FaxInitializeEventQueue",
    "FaxGetSenderInformation",
    "FaxGetCountryListA",
    "FaxFreeSenderInformation",
    "FaxGetGeneralConfiguration",
    "FaxEnumPortsExA",
    "FaxGetServicePrintersW",
    "FaxEnumOutboundRulesA",
    "FaxSetOutboundRuleA",
    "FaxSetQueue",
    "FaxPrintCoverPageA",
    "FaxSetRoutingInfoW",
    "FaxGetPortExA",
    "FaxGetConfigurationA",
    "FaxSetLoggingCategoriesW",
    "FaxSetRoutingInfoA",
    "FaxAccessCheck",
    "FaxGetJobW",
    "FaxGetRoutingInfoW",
    "FaxCompleteJobParamsA",
    "FaxSetDeviceOrderInGroupA",
    "FaxGetJobExA",
    "FaxSetPortExW",
    "FaxEnumPortsW",
    "FaxSetSecurityEx2",
    "FaxSetSenderInformation",
    "FaxStartMessagesEnumEx",
    "FaxOpenPort",
    "FaxUnregisterServiceProviderExW",
    "FaxSendDocumentEx2",
    "FaxGetArchiveConfigurationA",
    "FaxCreateAccount",
    "FaxGetServerSKU",
    "FaxSetOutboundGroupW",
    "FaxGetPortW",
    "FaxGetSecurity",
    "FaxSetConfigurationW",
    "FaxCompleteJobParamsW",
    "FaxGetMessageEx",
    "FaxGetReceiptsConfigurationW",
    "FaxSetPortW",
    "FaxGetSecurityEx",
    "FaxSetActivityLoggingConfigurationW",
    "FaxAnswerCall",
    "FaxGetRecipientInfoA",
    "FaxGetOutboxConfiguration",
    "FaxGetReceiptsConfigurationA",
    "FaxAccessCheckEx2",
    "FaxConnectFaxServerA",
    "FaxGetRecipientInfoW",
    "FaxRelease",
    "FaxGetMessageA",
    "FaxSendDocumentExW",
    "FaxSetReceiptsConfigurationA",
    "FaxUnregisterRoutingExtensionA",
    "FaxAddOutboundGroupW",
    "FaxGetLoggingCategoriesW",
    "FaxGetSecurityEx2",
    "FaxSetExtensionDataA",
    "FaxAbort",
    "FaxGetActivityLoggingConfigurationA",
    "FaxReAssignMessage",
    "FaxEnumRoutingExtensionsW",
    "FaxEnumRoutingMethodsW",
    "FaxEnumJobsExW",
    "FaxSetMessage",
    "FaxGetPersonalCoverPagesOption",
    "FaxConnectFaxServerW",
    "FaxGetRoutingInfoA",
    "FaxGetServerActivity",
    "FaxSetJobA",
    "FaxSetArchiveConfigurationA",
    "FaxGetReportedServerAPIVersion",
    "FaxGetLoggingCategoriesA",
    "FaxSendDocumentForBroadcastW",
    "FaxSetJobW",
    "FaxSetOutboundRuleW",
    "FaxEnumerateProvidersA",
    "FaxRegisterServiceProviderExA",
    "FaxUnregisterForServerEvents",
    "FaxEnumOutboundGroupsA",
    "FaxEnumRoutingMethodsA",
    "FaxGetCountryListW",
    "FaxSendDocumentW",
    "FaxSetConfigWizardUsed",
    "FaxEnumJobsEx2",
    "FaxGetDeviceStatusA",
    "FaxSetActivityLoggingConfigurationA",
    "FaxSetLoggingCategoriesA",
    "FaxGetPageData",
    "FaxEnumGlobalRoutingInfoA",
    "FaxFreeBuffer",
    "FXSAPIInitialize",
    "FaxUnregisterServiceProviderExA",
    "FaxStartPrintJobW",
    "FaxGetQueueStates",
    "FaxEnumMessagesEx",
    "FaxEnumOutboundGroupsW",
    "FaxEnumerateProvidersW",
    "FaxEnableRoutingMethodA",
    "FaxEnumMessagesA",
    "FaxClose",
    "FaxDeleteAccount",
    "FaxSetGlobalRoutingInfoW",
    "FaxEnumJobsW",
    "FaxGetConfigurationW",
    "FaxSetExtensionDataW",
    "FaxRemoveOutboundGroupA",
    "FaxGetAccountInfo",
    "FaxStartPrintJobA",
    "FaxRemoveOutboundGroupW",
    "FXSAPIFree",
    "FaxEnumJobsExA",
    "FaxGetDeviceStatusW",
    "FaxRefreshArchive",
    "FaxAccessCheckEx",
    "FaxSetGeneralConfiguration",
    "FaxSetDeviceOrderInGroupW",
    "FaxSetPortA",
    "FaxRegisterServiceProviderExW",
    "FaxEnumJobsA",
    "FaxGetRecipientsLimit",
    "FaxGetPortA",
    "FaxAddOutboundRuleA",
    "FaxGetConfigOption"
  ],
  "FXSCOM.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "FXSCOMEX.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "FXSCOMPOSE.dll": [
    "HrSelectEmailRecipient",
    "DllMain",
    "HrInitAddressBook",
    "HrDeInitAddressBook",
    "HrFaxComposePreTranslateAccelerator",
    "HrInvokeAddressBook",
    "HrGetDraftsListViewInfo",
    "HrNewFaxComposeUI",
    "HrNewFaxComposeUIFromFile",
    "HrDeinitComposeFormDll",
    "HrAddressBookPreTranslateAccelerator",
    "HrInitComposeFormDll",
    "HrNewTiffViewUIFromFile",
    "HrFreeDraftsListViewInfo",
    "FaxComposeFreeBuffer"
  ],
  "FXSCOMPOSERES.dll": "No exports",
  "FXSEVENT.dll": "No exports",
  "FXSEXT32.dll": [
    "ExchEntryPoint"
  ],
  "FXSMON.dll": [
    "InitializePrintMonitor2"
  ],
  "FXSRESM.dll": "No exports",
  "FXSROUTE.dll": [
    "FaxRouteStore",
    "FaxRouteGetRoutingInfo",
    "FaxRouteEmail",
    "FaxRouteDeviceChangeNotification",
    "FaxExtInitializeConfig",
    "FaxRouteConfigure",
    "FaxRouteDeviceEnable",
    "FaxRoutePrint",
    "FaxRouteInitialize",
    "FaxRouteSetRoutingInfo"
  ],
  "FXSST.dll": [
    "FaxMonitorShutdown",
    "IsFaxMessage",
    "FaxMonitorStartup",
    "DllMain"
  ],
  "FXST30.dll": [
    "FaxDevSend",
    "FaxDevShutdown",
    "FaxDevInitialize",
    "DllMain",
    "FaxDevEndJob",
    "FaxDevStartJob",
    "FaxDevReportStatus",
    "FaxExtInitializeConfig",
    "FaxDevReceive",
    "FaxDevAbortOperation"
  ],
  "FXSTIFF.dll": [
    "TiffClose",
    "ScanMhSegment",
    "FXSTIFFInitialize",
    "MemoryMapTiffFile",
    "TiffExtractFirstPage",
    "MergeTiffFiles",
    "TiffCreate",
    "PrintTiffFile",
    "TiffEndPageForInMemoryConversion",
    "GetMsTagString",
    "TiffLimitTagNumber",
    "TiffUncompressMmrPage",
    "TiffUncompressMmrPageRaw",
    "TiffWriteRaw",
    "TiffGetCurrentPageData",
    "ConvertTiffFileToValidFaxFormat",
    "TiffSeekToPage",
    "TiffAddMsTags",
    "ConvMmrPageToMrSameRes",
    "TiffEncodeLinesMmrCompression",
    "TiffPrint",
    "FreeMsTagInfo",
    "ScanMrSegment",
    "TiffStartPage",
    "GetW2kMsTiffTags",
    "MmrAddBranding",
    "TiffGetIFDSize",
    "TiffRead",
    "TiffStartPageForInMemoryConversion",
    "TiffPrintDC",
    "GetMsTagDwordLong",
    "TiffGetIFDData",
    "TiffOpen",
    "ConvMmrPageHiResToMrLoRes",
    "FindNextEol",
    "ConvMmrPageToMh",
    "TiffSetNextIFDOffset",
    "GetMsTagFileTime",
    "TiffSetCurrentPageParams",
    "TiffRecoverGoodPages",
    "TiffPostProcessFast",
    "TiffEndPage"
  ],
  "FXSUTILITY.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer",
    "SendToFaxRecipient",
    "CanSendToFaxRecipient"
  ],
  "FXSXP32.dll": [
    "XPProviderInit",
    "ServiceEntry"
  ],
  "Faultrep.dll": [
    "ReportHang",
    "AddERExcludedApplicationW",
    "CancelHangReporting",
    "CheckPerUserCrossProcessThrottle",
    "DllCanUnloadNow",
    "WerReportHang",
    "AddERExcludedApplicationA",
    "WerpInitiateCrashReporting",
    "DllGetClassObject",
    "UpdatePerUserLastCrossProcessCollectionTime",
    "ReportFault"
  ],
  "FeedbackTool.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "ShowWizardW"
  ],
  "FirewallAPI.dll": [
    "FWFreeProducts",
    "FWEnumMainModeRules",
    "FwCopyMMRule",
    "IcfGetDynamicFwPorts",
    "FwSetGlobalConfig",
    "FwICFProfileToWfProfile",
    "FWFreeAdapters",
    "FwUniteWFAddressesContents",
    "FWFreePhase2SAs",
    "IcfGetTickets",
    "FWSetConfig",
    "FwEnableMemTracing",
    "FwAddrChangeSourceShutdown",
    "FwCopyMainModeRule",
    "FWEnumConnectionSecurityRules",
    "FWRestoreGPODefaults",
    "FWFreePhase1SAs",
    "IcfDisconnect",
    "IsPortOrICMPAllowed",
    "FWEnumNetworks",
    "IcfChangeNotificationCreate",
    "FWEnumAuthenticationSets",
    "FWDeleteAllFirewallRules",
    "FWCopyFirewallRule",
    "FWDeletePhase2SAs",
    "FwOpenPolicyStore",
    "FwDeleteSet",
    "FWClosePolicyStore",
    "FwFreeWFRule",
    "FWFreeConnectionSecurityRules",
    "FWDiagGetAppList",
    "FWVerifyConnectionSecurityRule",
    "FWIndicatePortInUse",
    "FWVerifyConnectionSecurityRuleQuery",
    "FWAddConnectionSecurityRule",
    "FwCSRuleEmpty",
    "FWQueryAuthenticationSets",
    "FwAnalyzeFirewallPolicyOnProfile",
    "FwFreeAddresses",
    "FWChangeNotificationCreate",
    "FwParseAddressToken",
    "Isv4Orv6AddressesEmpty",
    "IsAddressesEmpty",
    "FwDestroyLocalTempStore",
    "FWImportPolicy",
    "FwGetGlobalConfigFromLocalTempStore",
    "FWDeleteAllAuthenticationSets",
    "IsRuleOldGlobalOpenPort",
    "FWSetFirewallRule",
    "FwGetConfig",
    "FwAddSet",
    "FWSetCryptoSet",
    "FwChangeSourceSignalStart",
    "FWQueryCryptoSets",
    "FwPortsToBstr",
    "FWEnumAdapters",
    "FWFreeFirewallRule",
    "OpenPortOrAuthAppAddrToString",
    "FwSddlStringVerify",
    "CreateDefaultPerInterfaceOpenPortRule",
    "FwCopyAuthSet",
    "FWGetConfig2",
    "FwRuleResolveFlags",
    "FwMMRuleVerify",
    "FwMigrateLegacyAuthenticatedBypassSddl",
    "IsRuleOpenPortOrAuthApp",
    "FWFreeNetworks",
    "FwCopyPortsContents",
    "FwCopyICMPTypeCode",
    "FWVerifyAuthenticationSet",
    "FWSetConnectionSecurityRule",
    "FwVerifyNoHeapLeaks",
    "FwEmptyWFAddresses",
    "FWEnumPhase2SAs",
    "IsRulePerInterfaceOpenPort",
    "FwDeleteAllRules",
    "FwEmptyWFRule",
    "FwAnalyzeFirewallPolicy",
    "FwGetAddressesAsString",
    "FwStringToAddresses",
    "FWRegisterProduct",
    "FWAddFirewallRule",
    "FWDeleteAuthenticationSet",
    "FwEnumRules",
    "FWVerifyFirewallRule",
    "FwCopyRule",
    "FWAddCryptoSet",
    "FwAdvPolicyDecodeFirewallRule",
    "FwChangeSourceSignal",
    "FwWfProtocolToICFProtocol",
    "FwIPV4RangeContainsMulticast",
    "FWDeleteAllConnectionSecurityRules",
    "FwGetCurrentProfile",
    "FwGetGlobalConfig",
    "CalculateOpenPortOrAuthAppAddrStringSize",
    "IsPortsEmpty",
    "FWGetConfig",
    "FreeAbsoluteInterfaces",
    "FwResolveIndirectString",
    "FWDeleteAllMainModeRules",
    "DllCanUnloadNow",
    "FWChangeNotificationDestroy",
    "FWCopyConnectionSecurityRule",
    "FWEnumPhase1SAs",
    "FWQueryFirewallRules",
    "FwMigrateLegacySettings",
    "CreateDefaultPerInterfaceIcmpRule",
    "FwClosePolicyStore",
    "DllGetClassObject",
    "FWFreeDiagAppList",
    "FwCSRuleVerify",
    "FWFreeFirewallRules",
    "FwSetResolveFlags",
    "FwCopyCryptoSet",
    "FWFreeMainModeRule",
    "FwCopyCSRule",
    "FwSetSet",
    "FWSetGPHelperFnPtrs",
    "IcfAddrChangeNotificationCreate",
    "FWGetGlobalConfig",
    "FwFreeRules",
    "FwSetRule",
    "IcfGetOperationalMode",
    "IcfGetCurrentProfileType",
    "FWVerifyMainModeRuleQuery",
    "GetDisabledInterfaces",
    "FwCreateLocalTempStore",
    "FWDeleteFirewallRule",
    "FwAddRule",
    "FwDoNothingOnObject",
    "FWResetIndicatedPortInUse",
    "IcfFreeDynamicFwPorts",
    "IsRuleOldAuthApp",
    "FWVerifyCryptoSet",
    "IsRulePerInterfaceIcmp",
    "FWFreeAuthenticationSets",
    "FWDeletePhase1SAs",
    "FWFreeConnectionSecurityRule",
    "FWFreeAuthenticationSet",
    "FWDeleteAllCryptoSets",
    "FwEnumSets",
    "FwIsRemoteManagementEnabled",
    "FWDeleteConnectionSecurityRule",
    "FWResolveGPONames",
    "FwChangeSourceInitialize",
    "FWEnumProducts",
    "FwCopyPortRange",
    "FWVerifyAuthenticationSetQuery",
    "FWVerifyFirewallRuleQuery",
    "IcfOpenDynamicFwPortWithoutSocket",
    "FWSetGlobalConfig",
    "FwBstrToPorts",
    "FWFreeCryptoSets",
    "FWEnumFirewallRules",
    "IcfFreeProfile",
    "FWFreeMainModeRules",
    "FWGPLock",
    "FwActivate",
    "FWCopyCryptoSet",
    "FwCopyWFAddressesContents",
    "FwICFProtocolToWfProtocol",
    "FwSetConfig",
    "FWChangeTransactionalState",
    "FwIPV6RangeContainsMulticast",
    "FwChangeSourceShutdown",
    "FWStatusMessageFromStatusCode",
    "FwVerifyWFRuleSemantics",
    "FWSetMainModeRule",
    "FWVerifyCryptoSetQuery",
    "FWDeleteMainModeRule",
    "FwCopyLUID",
    "FwIsGroupPolicyEnforced",
    "FWGPUnlock",
    "IcfChangeNotificationDestroy",
    "FWFreeCryptoSet",
    "DllRegisterServer",
    "FwAlloc",
    "FWSetAuthenticationSet",
    "FwAddrChangeSourceInitialize",
    "IcfSubNetsGetScope",
    "FWGetIndicatedPortInUse",
    "DllUnregisterServer",
    "FwDeleteAllSets",
    "FwFreeSets",
    "MakeAbsoluteInterfaces",
    "FwCopyPlatform",
    "FWAddAuthenticationSet",
    "FWDeleteCryptoSet",
    "FWEnumCryptoSets",
    "FWAddMainModeRule",
    "FwReduceObjectsToVersion",
    "FWRestoreDefaults",
    "FWVerifyMainModeRule",
    "GetOpenPortOrAuthAppAddrScope",
    "FwDeleteRule",
    "FWOpenPolicyStore",
    "IcfFreeTickets",
    "LoadGPExtensionDll",
    "FwAdvPolicyEncodeRule",
    "ValidatePortOrAppAddressString",
    "IcfIsPortAllowed",
    "FWGetGlobalConfig2",
    "FwAllocCheckSize",
    "FWFreeFirewallRulesOld",
    "FwAddrChangeSourceSignal",
    "FwGetVersionField",
    "FwSetMemLeakPolicy",
    "IcfConnect",
    "FWQueryConnectionSecurityRules",
    "FwFree",
    "FWQueryMainModeRules",
    "FWUnregisterProduct",
    "FWRevertTransaction",
    "FWCopyAuthenticationSet",
    "IcfGetProfile",
    "FWExportPolicy"
  ],
  "FirewallControlPanel.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "ShowNotificationDialogW",
    "ShowWarningDialogW",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "FntCache.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "FwRemoteSvr.dll": [
    "FwRpcAPIsShutdown",
    "FwRpcAPIsInitialize"
  ],
  "f3ahvoas.dll": [
    "FujitsuOyayubiControl",
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "fdBth.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "fdBthProxy.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "fdPHost.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "fdPnp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "fdProxy.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "fdSSDP.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "FdphostSessionChange",
    "DllGetClassObject",
    "DllRegisterServer",
    "FdphostSetComContext"
  ],
  "fdWCN.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "fdWNet.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "fdWSD.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "FdphostSessionChange",
    "DllGetClassObject",
    "DllRegisterServer",
    "FdphostSetComContext"
  ],
  "fde.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "fdeploy.dll": [
    "GenerateGroupPolicy",
    "ProcessGroupPolicyEx"
  ],
  "fdprint.dll": [
    "DllUnregisterServer",
    "InvokeTaskW",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "feclient.dll": [
    "EfsUtilGetCurrentKey",
    "FeClientInitialize"
  ],
  "filemgmt.dll": [
    "DllUnregisterServer",
    "CacheSettingsDlg",
    "DllCanUnloadNow",
    "CacheSettingsDlg2",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "findnetprinters.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "fltLib.dll": [
    "FilterClose",
    "FilterVolumeInstanceFindFirst",
    "FilterInstanceFindClose",
    "FilterLoad",
    "FilterVolumeInstanceFindNext",
    "FilterVolumeFindClose",
    "FilterDetach",
    "FilterAttachAtAltitude",
    "FilterInstanceFindFirst",
    "FilterGetDosName",
    "FilterInstanceCreate",
    "FilterFindClose",
    "FilterFindFirst",
    "FilterGetInformation",
    "FilterVolumeFindFirst",
    "FilterCreate",
    "FilterVolumeClose",
    "FilterInstanceClose",
    "FilterInstanceGetInformation",
    "FilterAttach",
    "FilterGetMessage",
    "FilterFindNext",
    "FilterVolumeFindNext",
    "FilterInstanceFindNext",
    "FilterUnload",
    "FilterSendMessage",
    "FilterConnectCommunicationPort",
    "FilterReplyMessage",
    "FilterVolumeInstanceFindClose"
  ],
  "fmifs.dll": [
    "EnableVolumeCompression",
    "FormatEx",
    "ChkdskEx",
    "Extend",
    "DiskCopy",
    "ComputeFmMediaType",
    "GetDefaultFileSystem",
    "Chkdsk",
    "QueryDeviceInformationByHandle",
    "QueryFileSystemName",
    "FormatEx2",
    "SetLabel",
    "QueryAvailableFileSystemFormat",
    "QueryLatestFileSystemVersion",
    "QueryDeviceInformation",
    "Format",
    "QuerySupportedMedia"
  ],
  "fontext.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "InstallFontFile"
  ],
  "fontsub.dll": [
    "CreateFontPackage",
    "MergeFontPackage"
  ],
  "fphc.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "framebuf.dll": "No exports",
  "framedyn.dll": [
    "public: int __thiscall WBEMTime::Gettime_t(long *)const",
    "public: __thiscall CFrameworkQueryEx::CFrameworkQueryEx(void)",
    "public: int __thiscall ParsedObjectPath::AddKeyRefEx(unsigned short const *,struct tagVARIANT const *)",
    "public: void __thiscall CHString::ReleaseBuffer(int)",
    "protected: long __thiscall Provider::ValidateFlags(long,enum Provider::FlagDefs)",
    "public: __thiscall CWinMsgEvent::CWinMsgEvent(void)",
    "public: __thiscall CWinMsgEvent::~CWinMsgEvent(void)",
    "private: void __thiscall CWbemProviderGlue::AddFlushPtr(void *)",
    "unsigned long __stdcall NormalizePath(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,class CHString &)",
    "protected: virtual long __thiscall Provider::ValidateMethodFlags(long)",
    "public: static long __stdcall CWbemProviderGlue::GetInstanceByPath(unsigned short const *,class CInstance * *,class MethodContext *)",
    "public: unsigned short __thiscall CHString::operator[](int)const",
    "public: unsigned long __thiscall CRegistry::GetCurrentBinaryKeyValue(unsigned short const *,unsigned char *,unsigned long *)",
    "public: long __thiscall CRegistry::CreateOpen(struct HKEY__ *,unsigned short const *,unsigned short *,unsigned long,unsigned long,struct _SECURITY_ATTRIBUTES *,unsigned long *)",
    "protected: static long __stdcall CWbemProviderGlue::DecrementMapCount(class CWbemGlueFactory const *)",
    "const CWinMsgEvent::`vftable'",
    "class CHString __stdcall operator+(class CHString const &,unsigned short const *)",
    "private: int __thiscall CObjectPathParser::ns_or_class(void)",
    "public: unsigned long __thiscall CRegistry::GetLongestClassStringSize(void)",
    "public: virtual long __stdcall CWbemProviderGlue::CreateInstanceEnum(unsigned short * const,long,struct IWbemContext *,struct IEnumWbemClassObject * *)",
    "protected: void __thiscall CHString::AllocBeforeWrite(int)",
    "public: void * * __thiscall CHPtrArray::GetData(void)",
    "public: int __thiscall WBEMTime::operator!=(class WBEMTime const &)const",
    "protected: void __thiscall CWinMsgEvent::UnRegisterAllMessages(void)",
    "private: static int CWbemProviderGlue::s_bInitted",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator=(unsigned short * const)",
    "public: int __thiscall CHStringArray::Append(class CHStringArray const &)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(unsigned short const *,unsigned long &)",
    "public: unsigned __int64 __thiscall WBEMTimeSpan::GetTime(void)const",
    "private: void __thiscall CRegistry::SetDefaultValues(void)",
    "protected: bool __thiscall Provider::GetLocalInstancePath(class CInstance const *,class CHString &)",
    "public: unsigned short * __thiscall CFrameworkQuery::GetQueryClassName(void)",
    "private: struct IWbemServices * __stdcall CWbemProviderGlue::InternalGetNamespaceConnection(unsigned short const *)",
    "public: __thiscall CHPtrArray::~CHPtrArray(void)",
    "class CHString __stdcall operator+(class CHString const &,unsigned short)",
    "public: long __thiscall CRegistry::EnumerateAndGetValues(unsigned long &,unsigned short * &,unsigned char * &)",
    "public: void __thiscall CHString::MakeLower(void)",
    "private: int __thiscall CObjectPathParser::propname(void)",
    "public: class MethodContext * __thiscall CInstance::GetMethodContext(void)const",
    "protected: virtual long __thiscall Provider::DeleteInstance(class CInstance const &,long)",
    "private: static void __stdcall CWinMsgEvent::WindowsDispatch(void)",
    "public: virtual long __stdcall CWbemProviderGlue::Initialize(unsigned short *,long,unsigned short *,unsigned short *,struct IWbemServices *,struct IWbemContext *,struct IWbemProviderInitSink *)",
    "public: __thiscall CFrameworkQuery::CFrameworkQuery(void)",
    "public: class MethodContext & __thiscall MethodContext::operator=(class MethodContext const &)",
    "public: __thiscall ParsedObjectPath::ParsedObjectPath(void)",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator-=(class WBEMTimeSpan const &)",
    "public: __thiscall CRegistrySearch::CRegistrySearch(void)",
    "public: __thiscall CWbemGlueFactory::CWbemGlueFactory(long *)",
    "public: void __thiscall WBEMTime::Clear(void)",
    "public: unsigned long __thiscall CRegistry::GetValueCount(void)",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(long const &)",
    "public: void __thiscall CHString::MakeUpper(void)",
    "public: class WBEMTimeSpan __thiscall WBEMTimeSpan::operator-(class WBEMTimeSpan const &)const",
    "private: long __thiscall CRegistry::myRegQueryValueEx(struct HKEY__ *,unsigned short const *,unsigned long *,unsigned long *,unsigned char *,unsigned long *)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(struct HKEY__ *,unsigned short const *,unsigned long &)",
    "private: static void __stdcall CWbemProviderGlue::UnlockProviderMap(void)",
    "protected: virtual void __thiscall Provider::Flush(void)",
    "private: static class CCritSec CWbemProviderGlue::m_csFlushPtrs",
    "public: long __thiscall CRegistry::OpenLocalMachineKeyAndReadValue(unsigned short const *,unsigned short const *,class CHString &)",
    "public: static int __stdcall CWbemProviderGlue::FrameworkLoginDLL(unsigned short const *,long *)",
    "public: __thiscall CHString::CHString(void)",
    "protected: virtual long __thiscall Provider::ValidateEnumerationFlags(long)",
    "private: long __thiscall Provider::DeleteInstance(struct ParsedObjectPath *,long,class MethodContext *)",
    "public: static int __stdcall CWbemProviderGlue::FrameworkLogoffDLL(unsigned short const *)",
    "private: static long __stdcall CWbemProviderGlue::CheckImpersonationLevel(void)",
    "public: __thiscall CFrameworkQueryEx::CFrameworkQueryEx(class CFrameworkQueryEx const &)",
    "public: int __thiscall CHStringArray::Add(unsigned short const *)",
    "public: void __thiscall CHPtrArray::SetAt(int,void *)",
    "public: virtual unsigned long __stdcall CWbemGlueFactory::Release(void)",
    "public: __thiscall CHString::CHString(char const *)",
    "private: long __thiscall CRegistry::myRegEnumValue(struct HKEY__ *,unsigned long,unsigned short *,unsigned long *,unsigned long *,unsigned long *,unsigned char *,unsigned long *)",
    "private: static class CHString Provider::s_strComputerName",
    "public: static long __stdcall CWbemProviderGlue::GetAllInstancesAsynch(unsigned short const *,class Provider *,long (__stdcall*)(class Provider *,class CInstance *,class MethodContext *,void *),unsigned short const *,class MethodContext *,void *)",
    "public: void __thiscall CHString::TrimLeft(void)",
    "public: void __thiscall ProviderLog::LocalLogMessage(unsigned short const *,unsigned short const *,int,enum ProviderLog::LogLevel)",
    "private: int __thiscall CObjectPathParser::ns_list(void)",
    "public: class CHString const & __thiscall CHString::operator+=(class CHString const &)",
    "public: virtual long __stdcall CWbemGlueFactory::QueryInterface(struct _GUID const &,void * *)",
    "public: bool __thiscall CInstance::SetByte(unsigned short const *,unsigned char)",
    "protected: virtual void __thiscall CThreadBase::OnFinalRelease(void)",
    "protected: virtual long __thiscall Provider::ExecQuery(class MethodContext *,class CFrameworkQuery &,long)",
    "public: class WBEMTime & __thiscall WBEMTime::operator=(class WBEMTime const &)",
    "public: struct IWbemClassObject * __thiscall CInstance::GetClassObjectInterface(void)",
    "public: virtual long __stdcall CWbemProviderGlue::CancelAsyncCall(struct IWbemObjectSink *)",
    "public: struct KeyRef & __thiscall KeyRef::operator=(struct KeyRef const &)",
    "const MethodContext::`vftable'",
    "public: class WBEMTimeSpan __thiscall WBEMTime::operator-(class WBEMTime const &)",
    "private: static void __stdcall CWinMsgEvent::DestroyMsgWindow(void)",
    "public: virtual long __stdcall CWbemProviderGlue::DeleteInstanceAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: bool __thiscall CInstance::GetTimeSpan(unsigned short const *,class WBEMTimeSpan &)const",
    "protected: virtual long __thiscall Provider::ValidateDeletionFlags(long)",
    "public: int __thiscall WBEMTimeSpan::operator<(class WBEMTimeSpan const &)const",
    "public: static long __stdcall WBEMTime::GetLocalOffsetForDate(struct _FILETIME const *)",
    "public: long __thiscall CThreadBase::AddRef(void)",
    "public: void * __thiscall CHPtrArray::GetAt(int)const",
    "private: static class CCritSec CWinMsgEvent::mg_csWindowLock",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyValue(unsigned short const *,class CHString &)",
    "public: void __cdecl ProviderLog::LocalLogMessage(unsigned short const *,int,enum ProviderLog::LogLevel,unsigned short const *,...)",
    "public: virtual __thiscall Provider::~Provider(void)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(struct _FILETIME const &)",
    "public: void __thiscall CThreadBase::EndRead(void)",
    "public: int __thiscall CHString::GetLength(void)const",
    "public: __thiscall Provider::Provider(unsigned short const *,unsigned short const *)",
    "public: virtual long __stdcall CWbemProviderGlue::ExecQuery(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IEnumWbemClassObject * *)",
    "public: class WBEMTime __thiscall WBEMTime::operator-(class WBEMTimeSpan const &)const",
    "public: int __thiscall WBEMTimeSpan::operator<=(class WBEMTimeSpan const &)const",
    "public: long __thiscall CFrameworkQuery::Init(unsigned short * const,unsigned short * const,long,class CHString &)",
    "private: static int Provider::initFailed_",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(int,int,int,int,int,int,int)",
    "public: bool __thiscall CInstance::SetCHString(unsigned short const *,char const *)",
    "public: int __thiscall CHPtrArray::Add(void *)",
    "public: void __thiscall CHPtrArray::InsertAt(int,class CHPtrArray *)",
    "private: static int CRegistry::s_fPlatformSet",
    "public: virtual long __stdcall CWbemProviderGlue::PutInstanceAsync(struct IWbemClassObject *,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "private: static struct HWND__ * CWinMsgEvent::mg_hWnd",
    "public: __thiscall WBEMTime::WBEMTime(struct _FILETIME const &)",
    "private: unsigned long __thiscall CRegistry::GetCurrentRawSubKeyValue(unsigned short const *,void *,unsigned long *,unsigned long *)",
    "private: int __thiscall Provider::SetKeyFromParsedObjectPath(class CInstance *,struct ParsedObjectPath *)",
    "public: class CHString const & __thiscall CHString::operator=(char)",
    "public: static int __stdcall CWbemProviderGlue::FrameworkLogoffDLL(unsigned short const *,long *)",
    "private: static class std::multimap,class std::allocator > CWinMsgEvent::mg_oSinkMap",
    "private: int __thiscall CObjectPathParser::ident_becomes_class(void)",
    "public: bool __thiscall CFrameworkQuery::IsPropertyRequired(unsigned short const *)",
    "public: static long __stdcall CWbemProviderGlue::GetEmptyInstance(class MethodContext *,unsigned short const *,class CInstance * *,unsigned short const *)",
    "public: void __thiscall CHString::MakeReverse(void)",
    "const Provider::`vftable'",
    "public: __thiscall CHString::CHString(unsigned char const *)",
    "public: __thiscall CWbemGlueFactory::~CWbemGlueFactory(void)",
    "public: __thiscall WBEMTime::WBEMTime(void)",
    "private: static class CCritSec CWbemProviderGlue::m_csStatusObject",
    "protected: virtual long __thiscall Provider::PutInstance(class CInstance const &,long)",
    "public: static struct IWbemServices * __stdcall CWbemProviderGlue::GetNamespaceConnection(unsigned short const *)",
    "public: void const * * __thiscall CHPtrArray::GetData(void)const",
    "public: __thiscall CInstance::CInstance(class CInstance const &)",
    "public: void __cdecl CHString::FormatMessageW(unsigned int,...)",
    "private: static void __stdcall CWbemProviderGlue::LockFactoryMap(void)",
    "public: unsigned short * __thiscall ParsedObjectPath::GetParentNamespacePart(void)",
    "private: void __thiscall CThreadBase::Lock(void)",
    "protected: void __thiscall CHString::ConcatInPlace(int,unsigned short const *)",
    "public: class CObjectPathParser & __thiscall CObjectPathParser::operator=(class CObjectPathParser const &)",
    "private: static void __stdcall Provider::InitComputerName(void)",
    "private: static unsigned long CWbemProviderGlue::s_dwPlatform",
    "public: unsigned __int64 __thiscall WBEMTime::GetTime(void)const",
    "private: int __thiscall CObjectPathParser::keyref(void)",
    "public: void __thiscall CHStringArray::SetSize(int,int)",
    "public: __thiscall CWinMsgEvent::CWinMsgEvent(class CWinMsgEvent const &)",
    "public: virtual __thiscall ProviderLog::~ProviderLog(void)",
    "public: void __thiscall CHPtrArray::FreeExtra(void)",
    "public: void __thiscall CHString::Release(void)",
    "public: void __thiscall CHString::TrimRight(void)",
    "protected: void __thiscall CHString::AssignCopy(int,unsigned short const *)",
    "public: bool __thiscall CInstance::SetVariant(unsigned short const *,struct tagVARIANT const &)",
    "public: void __thiscall CWbemGlueFactory::Destroy(void)",
    "public: int __thiscall CRegistrySearch::LocateKeyByNameOrValueName(struct HKEY__ *,unsigned short const *,unsigned short const *,unsigned short const * *,unsigned long,class CHString &,class CHString &)",
    "public: class CHString const & __thiscall CHString::operator=(unsigned short)",
    "public: unsigned short * __thiscall WBEMTime::GetDMTFNonNtfs(void)const",
    "private: static unsigned long CWbemProviderGlue::s_dwMajorVersion",
    "public: __thiscall CHStringArray::~CHStringArray(void)",
    "public: int __thiscall WBEMTimeSpan::GetFILETIME(struct _FILETIME *)const",
    "public: unsigned long __thiscall CRegistry::DeleteCurrentKeyValue(unsigned short const *)",
    "public: static long __stdcall CWbemProviderGlue::GetInstanceKeysByPath(unsigned short const *,class CInstance * *,class MethodContext *)",
    "public: virtual long __stdcall CWbemGlueFactory::LockServer(int)",
    "public: bool __thiscall CInstance::SetWBEMINT16(unsigned short const *,short const &)",
    "public: static unsigned short * __stdcall CObjectPathParser::GetRelativePath(unsigned short *)",
    "protected: void __thiscall CHString::Init(void)",
    "private: static void __stdcall CWbemProviderGlue::UnlockFactoryMap(void)",
    "public: bool __thiscall CInstance::GetByte(unsigned short const *,unsigned char &)const",
    "public: unsigned long __thiscall CRegistry::GetCurrentBinaryKeyValue(unsigned short const *,class CHString &)",
    "private: static class std::map,class std::allocator > CWbemProviderGlue::s_factorymap",
    "public: class CHString const & __thiscall CHString::operator+=(char)",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator=(long const &)",
    "public: int __thiscall WBEMTime::GetSYSTEMTIME(struct _SYSTEMTIME *)const",
    "public: bool __thiscall MethodContext::SetStatusObject(struct IWbemClassObject *)",
    "public: virtual long __stdcall CWbemProviderGlue::QueryObjectSink(long,struct IWbemObjectSink * *)",
    "public: int __thiscall CAutoEvent::Signal(void)",
    "public: __thiscall CObjectPathParser::CObjectPathParser(enum ObjectParserFlags)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(struct HKEY__ *,unsigned short const *,class CHStringArray &)",
    "public: class CHString __thiscall CHString::Mid(int,int)const",
    "public: virtual __thiscall CInstance::~CInstance(void)",
    "public: bool __thiscall CInstance::GetDateTime(unsigned short const *,class WBEMTime &)const",
    "public: virtual long __stdcall CWbemProviderGlue::DeleteClass(unsigned short * const,long,struct IWbemContext *,struct IWbemCallResult * *)",
    "private: static long CWbemProviderGlue::s_lObjects",
    "private: static class std::set,class std::allocator > CWbemProviderGlue::m_FlushPtrs",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(struct tm const &)",
    "protected: virtual long __thiscall Provider::GetObject(class CInstance *,long,class CFrameworkQuery &)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(long const &)",
    "public: virtual long __stdcall CWbemProviderGlue::OpenNamespace(unsigned short * const,long,struct IWbemContext *,struct IWbemServices * *,struct IWbemCallResult * *)",
    "public: int __thiscall WBEMTime::SetDMTF(unsigned short * const)",
    "const CWbemGlueFactory::`vftable'",
    "private: static int __stdcall CRegistry::SetPlatformID(void)",
    "public: virtual __thiscall CThreadBase::~CThreadBase(void)",
    "public: class CWbemProviderGlue & __thiscall CWbemProviderGlue::operator=(class CWbemProviderGlue const &)",
    "public: __thiscall CRegistry::CRegistry(void)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator+=(class WBEMTimeSpan const &)",
    "public: __thiscall CRegistry::CRegistry(class CRegistry const &)",
    "public: int __thiscall ParsedObjectPath::AddNamespace(unsigned short const *)",
    "private: int __thiscall CObjectPathParser::ns_or_server(void)",
    "public: long __thiscall CRegistry::Open(struct HKEY__ *,unsigned short const *,unsigned long)",
    "protected: unsigned long __thiscall CFrameworkQuery::IsInList(class CHStringArray const &,unsigned short const *)",
    "public: int __thiscall CHString::Find(unsigned short const *)const",
    "public: class CHString * __thiscall CHStringArray::GetData(void)",
    "public: virtual void __thiscall MethodContext::QueryPostProcess(void)",
    "private: int __thiscall CObjectPathParser::objref(void)",
    "public: bool __thiscall CInstance::GetVariant(unsigned short const *,struct tagVARIANT &)const",
    "public: unsigned long __thiscall CRegistry::GetLongestValueData(void)",
    "const CWbemProviderGlue::`vftable'{for `IWbemServices'}",
    "public: int __thiscall CFrameworkQueryEx::IsNTokenAnd(class CHStringArray &,class CHPtrArray &)",
    "public: class CWinMsgEvent & __thiscall CWinMsgEvent::operator=(class CWinMsgEvent const &)",
    "public: __thiscall CWbemGlueFactory::CWbemGlueFactory(void)",
    "public: __thiscall CHString::CHString(unsigned short const *,int)",
    "public: bool __thiscall CInstance::GetStatus(unsigned short const *,bool &,unsigned short &)const",
    "private: int __thiscall Provider::ValidateIMOSPointer(void)",
    "public: int __thiscall CFrameworkQueryEx::Is3TokenOR(unsigned short const *,unsigned short const *,struct tagVARIANT &,struct tagVARIANT &)",
    "public: bool __thiscall CInstance::SetWORD(unsigned short const *,unsigned short)",
    "public: int __thiscall WBEMTime::operator>=(class WBEMTime const &)const",
    "public: __thiscall CWbemProviderGlue::CWbemProviderGlue(long *)",
    "class CHString __stdcall operator+(class CHString const &,class CHString const &)",
    "private: long __thiscall Provider::CreateInstanceEnum(class MethodContext *,long)",
    "public: int __thiscall WBEMTime::GetFILETIME(struct _FILETIME *)const",
    "public: static long __stdcall CWbemProviderGlue::GetInstancePropertiesByPath(unsigned short const *,class CInstance * *,class MethodContext *,class CHStringArray &)",
    "public: virtual unsigned long __stdcall CWbemProviderGlue::Release(void)",
    "public: static void __stdcall CHString::Release(struct CHStringData *)",
    "public: unsigned short * __thiscall CHString::GetBuffer(int)",
    "public: class CHString & __thiscall CHStringArray::ElementAt(int)",
    "public: virtual long __stdcall CWbemProviderGlue::QueryInterface(struct _GUID const &,void * *)",
    "public: bool __thiscall CInstance::SetCharSplat(unsigned short const *,char const *)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyValue(unsigned short const *,void *,unsigned long *)",
    "public: __thiscall CThreadBase::CThreadBase(class CThreadBase const &)",
    "public: bool __thiscall CInstance::SetStringArray(unsigned short const *,struct tagSAFEARRAY const &)",
    "protected: static long __stdcall CWbemProviderGlue::IncrementMapCount(class CWbemGlueFactory const *)",
    "public: __thiscall MethodContext::MethodContext(struct IWbemContext *,class CWbemProviderGlue *)",
    "public: bool __thiscall CInstance::SetWBEMINT64(unsigned short const *,unsigned __int64)",
    "private: void __thiscall CRegistry::PrepareToReOpen(void)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(unsigned short * const)",
    "public: bool __thiscall CInstance::GetWCHAR(unsigned short const *,unsigned short * *)const",
    "private: int __thiscall CObjectPathParser::keyref_list(void)",
    "public: virtual __thiscall MethodContext::~MethodContext(void)",
    "public: unsigned short * __thiscall WBEMTime::GetDMTF(int)const",
    "public: long __thiscall CFrameworkQueryEx::GetValuesForProp(unsigned short const *,class std::vector > &)",
    "public: __thiscall CInstance::CInstance(struct IWbemClassObject *,class MethodContext *)",
    "private: int __thiscall CObjectPathParser::ident_becomes_ns(void)",
    "public: bool __thiscall CInstance::GetDWORD(unsigned short const *,unsigned long &)const",
    "private: static class CCritSec CWbemProviderGlue::s_csFactoryMap",
    "public: int __thiscall CHString::Collate(unsigned short const *)const",
    "public: void __thiscall CThreadBase::EndWrite(void)",
    "private: long __thiscall Provider::ExecuteQuery(class MethodContext *,class CFrameworkQuery &,long)",
    "public: bool __thiscall CInstance::SetDOUBLE(unsigned short const *,double)",
    "public: static class CWbemGlueFactory * __stdcall CWbemGlueFactory::Create(void)",
    "public: int __thiscall CRegistrySearch::FreeSearchList(int,class CHPtrArray &)",
    "private: unsigned long __thiscall CRegistry::GetCurrentRawKeyValue(struct HKEY__ *,unsigned short const *,void *,unsigned long *,unsigned long *)",
    "public: bool __thiscall CInstance::Setbool(unsigned short const *,bool)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(unsigned short const *,class CHStringArray &)",
    "public: int __thiscall ParsedObjectPath::AddKeyRef(struct KeyRef *)",
    "private: int __thiscall CObjectPathParser::objref_rest(void)",
    "private: long __thiscall CRegistry::myRegQueryInfoKey(struct HKEY__ *,unsigned short *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,struct _FILETIME *)",
    "public: int __thiscall CHStringArray::GetSize(void)const",
    "public: void __thiscall CHPtrArray::SetSize(int,int)",
    "public: void __thiscall CHStringArray::SetAt(int,unsigned short const *)",
    "public: virtual long __stdcall CWbemProviderGlue::CancelAsyncRequest(long)",
    "public: class Provider & __thiscall Provider::operator=(class Provider const &)",
    "private: int __thiscall CObjectPathParser::NextToken(void)",
    "public: __thiscall CThreadBase::CThreadBase(enum CThreadBase::THREAD_SAFETY_MECHANISM)",
    "public: bool __thiscall CInstance::GetWBEMINT64(unsigned short const *,unsigned __int64 &)const",
    "public: long __thiscall MethodContext::AddRef(void)",
    "private: static class CCritSec CWinMsgEvent::mg_csMapLock",
    "public: class CHString const * __thiscall CHStringArray::GetData(void)const",
    "public: static int __stdcall Provider::initFailed(void)",
    "public: void __cdecl CHString::Format(unsigned short const *,...)",
    "public: static unsigned short const * __stdcall CWbemProviderGlue::GetCSDVersion(void)",
    "protected: class CHString const & __thiscall Provider::GetProviderName(void)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(struct HKEY__ *,unsigned short const *,class CHString &)",
    "protected: class CHString const & __thiscall Provider::GetNamespace(void)",
    "public: static int __stdcall CWbemProviderGlue::FrameworkLoginDLL(unsigned short const *)",
    "public: unsigned short __thiscall CHString::GetAt(int)const",
    "private: long __thiscall Provider::PutInstance(struct IWbemClassObject *,long,class MethodContext *)",
    "class CHString __stdcall operator+(unsigned short,class CHString const &)",
    "public: class CHString const & __thiscall CHString::operator+=(unsigned short)",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(void)",
    "private: static int __stdcall CWinMsgEvent::CtrlHandlerRoutine(unsigned long)",
    "public: bool __thiscall CInstance::SetCHString(unsigned short const *,class CHString const &)",
    "public: class CHString const & __thiscall CHString::operator=(unsigned short const *)",
    "private: void __thiscall CRegistrySearch::CheckAndAddToList(class CRegistry *,class CHString,class CHString,class CHPtrArray &,class CHString,class CHString,int)",
    "protected: virtual long __thiscall Provider::ValidatePutInstanceFlags(long)",
    "private: int __thiscall CObjectPathParser::begin_parse(void)",
    "public: int __thiscall WBEMTimeSpan::operator>=(class WBEMTimeSpan const &)const",
    "private: static struct HWND__ * __stdcall CWinMsgEvent::CreateMsgWindow(void)",
    "public: virtual long __stdcall CWbemProviderGlue::PutInstance(struct IWbemClassObject *,long,struct IWbemContext *,struct IWbemCallResult * *)",
    "public: void __thiscall CHStringArray::RemoveAll(void)",
    "public: unsigned long __thiscall CRegistry::GetCurrentBinaryKeyValue(struct HKEY__ *,unsigned short const *,unsigned char *,unsigned long *)",
    "public: long __thiscall CRegistry::DeleteKey(class CHString *)",
    "public: int __thiscall CHString::GetAllocLength(void)const",
    "public: __thiscall WBEMTime::WBEMTime(struct _SYSTEMTIME const &)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(unsigned short const *,class CHString &)",
    "public: static long __stdcall CWbemProviderGlue::FillInstance(class CInstance *,unsigned short const *)",
    "private: static long __stdcall CWinMsgEvent::MsgWndProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: void __thiscall CHString::FormatV(unsigned short const *,char *)",
    "public: void __thiscall CHString::SetAt(int,unsigned short)",
    "public: __thiscall CreateMutexAsProcess::~CreateMutexAsProcess(void)",
    "public: int __thiscall CHPtrArray::GetUpperBound(void)const",
    "private: void __thiscall ProviderLog::CheckFileSize(union _LARGE_INTEGER &,class CHString const &)",
    "private: static unsigned short * CWbemProviderGlue::s_wstrCSDVersion",
    "private: long __thiscall CRegistry::myRegCreateKeyEx(struct HKEY__ *,unsigned short const *,unsigned long,unsigned short *,unsigned long,unsigned long,struct _SECURITY_ATTRIBUTES * const,struct HKEY__ * *,unsigned long *)",
    "public: bool __thiscall CInstance::SetCharSplat(unsigned short const *,unsigned short const *)",
    "public: __thiscall CWbemProviderGlue::CWbemProviderGlue(class CWbemProviderGlue const &)",
    "public: long __thiscall CFrameworkQuery::GetValuesForProp(unsigned short const *,class std::vector > &)",
    "public: virtual long __stdcall CWbemProviderGlue::GetObject(unsigned short * const,long,struct IWbemContext *,struct IWbemClassObject * *,struct IWbemCallResult * *)",
    "public: int __thiscall WBEMTime::operator==(class WBEMTime const &)const",
    "public: bool __thiscall CInstance::SetWCHARSplat(unsigned short const *,unsigned short const *)",
    "public: bool __thiscall WBEMTimeSpan::IsOk(void)const",
    "public: void __thiscall CHPtrArray::Copy(class CHPtrArray const &)",
    "public: unsigned short * __thiscall ParsedObjectPath::GetNamespacePart(void)",
    "protected: virtual long __thiscall Provider::GetObject(class CInstance *,long)",
    "public: bool __thiscall CInstance::SetWBEMINT64(unsigned short const *,class CHString const &)",
    "private: int __thiscall CObjectPathParser::keyref_term(void)",
    "private: static struct IWbemClassObject * __stdcall CWbemProviderGlue::GetStatusObject(class MethodContext *,unsigned short const *)",
    "protected: bool __thiscall CWinMsgEvent::UnRegisterMessage(unsigned int,int)",
    "public: virtual long __stdcall CWbemProviderGlue::PutClassAsync(struct IWbemClassObject *,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: bool __thiscall CInstance::Getbool(unsigned short const *,bool &)const",
    "protected: int __thiscall CFrameworkQuery::IsReference(unsigned short const *)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyName(class CHString &)",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator+=(class WBEMTimeSpan const &)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyPath(class CHString &)",
    "public: void __thiscall CObjectPathParser::Free(struct ParsedObjectPath *)",
    "public: void __thiscall CHString::FreeExtra(void)",
    "protected: void __thiscall CHString::ConcatCopy(int,unsigned short const *,int,unsigned short const *)",
    "public: void __thiscall CFrameworkQueryEx::GetPropertyBitMask(class CHPtrArray const &,void *)",
    "public: __thiscall MethodContext::MethodContext(class MethodContext const &)",
    "public: class CHString __thiscall CHString::SpanExcluding(unsigned short const *)const",
    "public: class CHString & __thiscall CHStringArray::operator[](int)",
    "public: class CHString const & __thiscall CHString::operator+=(unsigned short const *)",
    "public: static long __stdcall CWbemProviderGlue::GetAllInstances(unsigned short const *,class TRefPointerCollection *,unsigned short const *,class MethodContext *)",
    "private: void __thiscall CObjectPathParser::Zero(void)",
    "public: virtual long __stdcall CWbemProviderGlue::CreateClassEnum(unsigned short * const,long,struct IWbemContext *,struct IEnumWbemClassObject * *)",
    "private: static void __stdcall CWinMsgEvent::CreateMsgProvider(void)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(struct _SYSTEMTIME const &)",
    "public: int __thiscall WBEMTime::operator>(class WBEMTime const &)const",
    "public: static void __stdcall CWbemProviderGlue::FrameworkLogoff(unsigned short const *,unsigned short const *)",
    "private: int __thiscall CObjectPathParser::key_const(void)",
    "public: int __thiscall CHString::LoadStringW(unsigned int)",
    "public: virtual bool __thiscall CFrameworkQueryEx::IsExtended(void)",
    "public: static int __stdcall CObjectPathParser::Unparse(struct ParsedObjectPath *,unsigned short * *)",
    "public: class CHString __thiscall CHString::Mid(int)const",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(unsigned short const *,class CHString &)",
    "public: virtual long __stdcall CWbemProviderGlue::CreateInstanceEnumAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: class CHString __thiscall CHStringArray::GetAt(int)const",
    "private: unsigned long __thiscall CRegistry::OpenSubKey(void)",
    "private: void __thiscall CWbemProviderGlue::FlushAll(void)",
    "public: __thiscall CWbemProviderGlue::~CWbemProviderGlue(void)",
    "public: void * & __thiscall CHPtrArray::operator[](int)",
    "const CThreadBase::`vftable'",
    "public: long __thiscall MethodContext::Release(void)",
    "public: static void __stdcall CWbemProviderGlue::FrameworkLogin(unsigned short const *,class Provider *,unsigned short const *)",
    "public: __thiscall CWbemProviderGlue::CWbemProviderGlue(void)",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(unsigned short * const)",
    "protected: void __thiscall CHString::AllocBuffer(int)",
    "public: int __thiscall WBEMTime::GetStructtm(struct tm *)const",
    "public: unsigned long __thiscall CRegistry::DeleteCurrentKeyValue(struct HKEY__ *,unsigned short const *)",
    "public: unsigned long __thiscall CAutoEvent::Wait(unsigned long)",
    "public: void __thiscall CThreadBase::`default constructor closure'(void)",
    "public: unsigned short * __thiscall ParsedObjectPath::GetKeyString(void)",
    "public: class CRegistrySearch & __thiscall CRegistrySearch::operator=(class CRegistrySearch const &)",
    "public: __thiscall ProviderLog::ProviderLog(void)",
    "public: static unsigned long __stdcall CWbemProviderGlue::GetPlatform(void)",
    "protected: void __thiscall CWinMsgEvent::RegisterForMessage(unsigned int,int)",
    "protected: static void __stdcall CWbemProviderGlue::AddToFactoryMap(class CWbemGlueFactory const *,long *)",
    "protected: virtual long __thiscall Provider::ExecMethod(class CInstance const &,unsigned short * const,class CInstance *,class CInstance *,long)",
    "public: int __thiscall CHString::Compare(unsigned short const *)const",
    "public: class CAutoEvent & __thiscall CAutoEvent::operator=(class CAutoEvent const &)",
    "public: static struct IWbemServices * __stdcall CWbemProviderGlue::GetNamespaceConnection(unsigned short const *,class MethodContext *)",
    "public: __thiscall WBEMTime::WBEMTime(unsigned short * const)",
    "public: bool __thiscall CFrameworkQuery::AllPropertiesAreRequired(void)",
    "private: static class Provider * __stdcall CWbemProviderGlue::AddProviderToMap(unsigned short const *,unsigned short const *,class Provider *)",
    "public: class WBEMTimeSpan & __thiscall WBEMTimeSpan::operator=(class WBEMTimeSpan const &)",
    "public: void * & __thiscall CHPtrArray::ElementAt(int)",
    "protected: virtual long __thiscall Provider::EnumerateInstances(class MethodContext *,long)",
    "public: void __thiscall CHPtrArray::RemoveAll(void)",
    "public: class CInstance & __thiscall CInstance::operator=(class CInstance const &)",
    "public: __thiscall CObjectPathParser::~CObjectPathParser(void)",
    "public: int __thiscall WBEMTimeSpan::operator>(class WBEMTimeSpan const &)const",
    "public: struct IWbemClassObject * __thiscall MethodContext::GetStatusObject(void)",
    "public: class CFrameworkQuery & __thiscall CFrameworkQuery::operator=(class CFrameworkQuery const &)",
    "public: virtual long __stdcall CWbemProviderGlue::DeleteInstance(unsigned short * const,long,struct IWbemContext *,struct IWbemCallResult * *)",
    "public: void __thiscall CFrameworkQuery::Init2(struct IWbemClassObject *)",
    "public: class WBEMTime __thiscall WBEMTime::operator+(class WBEMTimeSpan const &)const",
    "public: class CHString __thiscall CHString::Right(int)const",
    "public: virtual long __stdcall CWbemGlueFactory::CreateInstance(struct IUnknown *,struct _GUID const &,void * *)",
    "public: __thiscall CRegistry::~CRegistry(void)",
    "const CFrameworkQueryEx::`vftable'",
    "_DoCmd@16",
    "protected: virtual long __thiscall Provider::ValidateGetObjFlags(long)",
    "public: class CThreadBase & __thiscall CThreadBase::operator=(class CThreadBase const &)",
    "public: static long __stdcall CWbemProviderGlue::GetAllDerivedInstancesAsynch(unsigned short const *,class Provider *,long (__stdcall*)(class Provider *,class CInstance *,class MethodContext *,void *),unsigned short const *,class MethodContext *,void *)",
    "public: virtual struct IWbemContext * __thiscall MethodContext::GetIWBEMContext(void)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(struct HKEY__ *,unsigned short const *,class CHString &)",
    "public: unsigned long __thiscall CRegistry::GetLongestSubKeySize(void)",
    "private: long __thiscall Provider::ExecMethod(struct ParsedObjectPath *,unsigned short *,long,class CInstance *,class CInstance *,class MethodContext *)",
    "public: unsigned short * __thiscall CHString::GetBufferSetLength(int)",
    "private: long __thiscall CRegistry::myRegOpenKeyEx(struct HKEY__ *,unsigned short const *,unsigned long,unsigned long,struct HKEY__ * *)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyCount(void)",
    "protected: void __thiscall CHString::AllocCopy(class CHString &,int,int,int)const",
    "private: static unsigned long __stdcall CWinMsgEvent::dwThreadProc(void *)",
    "public: int __thiscall CThreadBase::BeginWrite(unsigned long)",
    "public: int __thiscall CObjectPathParser::Parse(unsigned short const *,struct ParsedObjectPath * *)",
    "public: bool __thiscall CInstance::SetDWORD(unsigned short const *,unsigned long)",
    "public: virtual long __stdcall CWbemProviderGlue::GetObjectAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: int __thiscall CHString::CompareNoCase(unsigned short const *)const",
    "public: long __thiscall CInstance::Release(void)",
    "protected: void __thiscall CHString::CopyBeforeWrite(void)",
    "private: int __thiscall CObjectPathParser::optional_objref(void)",
    "const ProviderLog::`vftable'",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(struct _FILETIME const &)",
    "public: long __thiscall CInstance::AddRef(void)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator-=(class WBEMTimeSpan const &)",
    "public: unsigned short * __thiscall WBEMTimeSpan::GetBSTR(void)const",
    "private: long __thiscall CWbemProviderGlue::NullOutUnsetProperties(struct IWbemClassObject *,struct IWbemClassObject * *,struct tagVARIANT const &)",
    "public: void __thiscall CHPtrArray::InsertAt(int,void *,int)",
    "public: __thiscall CRegistrySearch::CRegistrySearch(class CRegistrySearch const &)",
    "public: bool __thiscall CInstance::GetWBEMINT64(unsigned short const *,__int64 &)const",
    "protected: class CInstance * __thiscall Provider::CreateNewInstance(class MethodContext *)",
    "public: bool __thiscall CInstance::SetNull(unsigned short const *)",
    "protected: struct CHStringData * __thiscall CHString::GetData(void)const",
    "public: static long __stdcall CWbemProviderGlue::GetEmptyInstance(unsigned short const *,class CInstance * *,unsigned short const *)",
    "public: class CHString __thiscall CHString::Left(int)const",
    "public: static long __stdcall CWbemProviderGlue::GetAllDerivedInstances(unsigned short const *,class TRefPointerCollection *,class MethodContext *,unsigned short const *)",
    "private: struct IWbemClassObject * __thiscall Provider::GetClassObjectInterface(class MethodContext *)",
    "private: void __thiscall CThreadBase::Unlock(void)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(struct HKEY__ *,unsigned short const *,unsigned long &)",
    "public: bool __thiscall CInstance::GetWORD(unsigned short const *,unsigned short &)const",
    "private: static class std::map,class std::allocator > CWbemProviderGlue::s_providersmap",
    "public: bool __thiscall CInstance::SetWBEMINT64(unsigned short const *,__int64)",
    "protected: class CHString __thiscall Provider::MakeLocalPath(class CHString const &)",
    "public: enum ProviderLog::LogLevel __thiscall ProviderLog::IsLoggingOn(class CHString *)",
    "public: int __thiscall CHString::ReverseFind(unsigned short)const",
    "private: static void * CWinMsgEvent::mg_hDevNotify",
    "public: __thiscall CRegistrySearch::~CRegistrySearch(void)",
    "public: static long __stdcall WBEMTime::GetLocalOffsetForDate(struct tm const *)",
    "public: void __thiscall CFrameworkQuery::GetRequiredProperties(class CHStringArray &)",
    "public: void __thiscall CObjectPathParser::`default constructor closure'(void)",
    "public: unsigned long __thiscall CRegistry::NextSubKey(void)",
    "public: long __thiscall CThreadBase::Release(void)",
    "public: bool __thiscall CInstance::SetCHString(unsigned short const *,unsigned short const *)",
    "public: int __thiscall CHPtrArray::Append(class CHPtrArray const &)",
    "public: class CHString const & __thiscall CFrameworkQuery::GetQuery(void)",
    "protected: static void __stdcall CWbemProviderGlue::RemoveFromFactoryMap(class CWbemGlueFactory const *)",
    "protected: virtual long __thiscall Provider::ValidateQueryFlags(long)",
    "public: __thiscall CWbemGlueFactory::CWbemGlueFactory(class CWbemGlueFactory const &)",
    "public: int __thiscall CHString::FindOneOf(unsigned short const *)const",
    "public: void __thiscall CHStringArray::FreeExtra(void)",
    "public: virtual long __stdcall CWbemProviderGlue::ExecMethod(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IWbemClassObject *,struct IWbemClassObject * *,struct IWbemCallResult * *)",
    "public: void __thiscall CHStringArray::SetAtGrow(int,unsigned short const *)",
    "public: class CWbemGlueFactory & __thiscall CWbemGlueFactory::operator=(class CWbemGlueFactory const &)",
    "private: static void __stdcall CWbemProviderGlue::Init(void)",
    "public: void __thiscall CHPtrArray::RemoveAt(int,int)",
    "public: virtual long __stdcall CWbemProviderGlue::PutClass(struct IWbemClassObject *,long,struct IWbemContext *,struct IWbemCallResult * *)",
    "class CHString __stdcall operator+(unsigned short const *,class CHString const &)",
    "void __stdcall SetCHStringResourceHandle(struct HINSTANCE__ *)",
    "private: long __thiscall CRegistry::myRegDeleteKey(struct HKEY__ *,unsigned short const *)",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator=(struct _FILETIME const &)",
    "public: __thiscall CHString::CHString(unsigned short const *)",
    "public: int __thiscall CHString::IsEmpty(void)const",
    "public: unsigned long __thiscall CRegistry::OpenCurrentUser(unsigned short const *,unsigned long)",
    "protected: long __thiscall Provider::Commit(class CInstance *,bool)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValueExpand(struct HKEY__ *,unsigned short const *,class CHString &)",
    "const CWbemProviderGlue::`vftable'{for `IWbemProviderInit'}",
    "protected: class CHString const & __thiscall CFrameworkQuery::GetNamespace(void)",
    "public: bool __thiscall CInstance::GetEmbeddedObject(unsigned short const *,class CInstance * *,class MethodContext *)const",
    "public: class CHString __thiscall CHString::SpanIncluding(unsigned short const *)const",
    "public: int __thiscall CHString::Find(unsigned short)const",
    "public: bool __thiscall CInstance::GetCHString(unsigned short const *,class CHString &)const",
    "public: bool __thiscall CInstance::GetDOUBLE(unsigned short const *,double &)const",
    "public: bool __thiscall CInstance::SetTimeSpan(unsigned short const *,class WBEMTimeSpan const &)",
    "public: class WBEMTimeSpan __thiscall WBEMTimeSpan::operator+(class WBEMTimeSpan const &)const",
    "public: int __thiscall ParsedObjectPath::IsClass(void)",
    "public: __thiscall CHPtrArray::CHPtrArray(void)",
    "public: class CFrameworkQueryEx & __thiscall CFrameworkQueryEx::operator=(class CFrameworkQueryEx const &)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(struct HKEY__ *,unsigned short const *,class CHStringArray &)",
    "public: static bool __stdcall CWbemProviderGlue::SetStatusObject(class MethodContext *,unsigned short const *,unsigned short const *,long,struct tagSAFEARRAY const *,struct tagSAFEARRAY const *)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(unsigned short const *,class CHStringArray &)",
    "public: static class CWbemGlueFactory * __stdcall CWbemGlueFactory::Create(long *)",
    "public: __thiscall std::_Lockit::~_Lockit(void)",
    "public: class CHString const & __thiscall CHString::operator=(char const *)",
    "public: class CHString const & __thiscall CHString::operator=(class CHString *)",
    "private: static class CCritSec CWbemProviderGlue::s_csProviderMap",
    "private: void __thiscall CObjectPathParser::Empty(void)",
    "protected: int __thiscall CHString::LoadStringW(unsigned int,unsigned short *,unsigned int)",
    "public: class CHString __thiscall CHStringArray::operator[](int)const",
    "private: long __thiscall CWbemProviderGlue::PreProcessPutInstanceParms(struct IWbemClassObject *,struct IWbemClassObject * *,struct IWbemContext *)",
    "public: class CHString const & __thiscall CHString::operator=(unsigned char const *)",
    "public: bool __thiscall CInstance::SetEmbeddedObject(unsigned short const *,class CInstance &)",
    "public: int __thiscall CHPtrArray::GetSize(void)const",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(unsigned short const *,unsigned long &)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyValue(unsigned short const *,unsigned long &)",
    "public: static long __stdcall WBEMTime::GetLocalOffsetForDate(long const &)",
    "public: __thiscall CHString::CHString(class CHString const &)",
    "public: __thiscall ProviderLog::ProviderLog(class ProviderLog const &)",
    "public: class CRegistry & __thiscall CRegistry::operator=(class CRegistry const &)",
    "private: long __thiscall CRegistry::myRegDeleteValue(struct HKEY__ *,unsigned short const *)",
    "public: __thiscall std::_Lockit::_Lockit(void)",
    "private: class CWbemProviderGlue * __thiscall MethodContext::GetProviderGlue(void)",
    "private: static long __stdcall CWbemProviderGlue::GetInstanceFromCIMOM(unsigned short const *,unsigned short const *,class MethodContext *,class CInstance * *)",
    "public: int __thiscall WBEMTimeSpan::operator==(class WBEMTimeSpan const &)const",
    "public: void __thiscall CRegistry::Close(void)",
    "protected: static long __stdcall CWbemProviderGlue::DecrementMapCount(long *)",
    "public: int __thiscall ParsedObjectPath::IsInstance(void)",
    "public: long __thiscall CInstance::Commit(void)",
    "public: static bool __stdcall CWbemProviderGlue::IsDerivedFrom(unsigned short const *,unsigned short const *,class MethodContext *,unsigned short const *)",
    "public: virtual long __stdcall CWbemProviderGlue::ExecNotificationQueryAsync(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: int __thiscall WBEMTimeSpan::operator!=(class WBEMTimeSpan const &)const",
    "public: __thiscall Provider::Provider(class Provider const &)",
    "public: bool __thiscall CInstance::SetDateTime(unsigned short const *,class WBEMTime const &)",
    "public: __thiscall CAutoEvent::~CAutoEvent(void)",
    "public: class ProviderLog & __thiscall ProviderLog::operator=(class ProviderLog const &)",
    "public: void __thiscall CHPtrArray::SetAtGrow(int,void *)",
    "public: unsigned short * __thiscall WBEMTime::GetBSTR(void)const",
    "public: long __thiscall CRegistry::DeleteValue(unsigned short const *)",
    "public: void __cdecl CHString::FormatMessageW(unsigned short const *,...)",
    "public: __thiscall ParsedObjectPath::~ParsedObjectPath(void)",
    "public: long __thiscall CFrameworkQuery::Init(struct ParsedObjectPath *,struct IWbemContext *,unsigned short const *,class CHString &)",
    "public: __thiscall KeyRef::~KeyRef(void)",
    "public: __thiscall CHStringArray::CHStringArray(void)",
    "public: static long __stdcall CWbemProviderGlue::FillInstance(class MethodContext *,class CInstance *)",
    "public: int __thiscall CHStringArray::GetUpperBound(void)const",
    "public: void __thiscall CHStringArray::Copy(class CHStringArray const &)",
    "protected: static long __stdcall CWbemProviderGlue::IncrementMapCount(long *)",
    "public: unsigned long __thiscall CRegistry::GetLongestValueName(void)",
    "public: int __thiscall ParsedObjectPath::IsObject(void)",
    "public: __thiscall CFrameworkQuery::CFrameworkQuery(class CFrameworkQuery const &)",
    "public: virtual long __stdcall CWbemProviderGlue::ExecQueryAsync(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: __thiscall KeyRef::KeyRef(void)",
    "public: static void __stdcall CWbemProviderGlue::IncrementObjectCount(void)",
    "public: virtual long __stdcall CWbemProviderGlue::ExecNotificationQuery(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IEnumWbemClassObject * *)",
    "public: __thiscall CHString::CHString(unsigned short,int)",
    "private: static void __stdcall CWbemProviderGlue::UnInit(void)",
    "private: void __thiscall CRegistry::CloseSubKey(void)",
    "public: int __thiscall ParsedObjectPath::IsRelative(unsigned short const *,unsigned short const *)",
    "public: static unsigned long __stdcall CWbemProviderGlue::GetOSMajorVersion(void)",
    "public: bool __thiscall CInstance::IsNull(unsigned short const *)const",
    "public: virtual long __thiscall CFrameworkQueryEx::InitEx(unsigned short * const,unsigned short * const,long,class CHString &)",
    "public: bool __thiscall WBEMTime::IsOk(void)const",
    "private: void __thiscall CFrameworkQuery::Reset(void)",
    "class CCritSec g_cs",
    "public: __thiscall CHString::operator unsigned short const *(void)const",
    "private: static void * CWinMsgEvent::mg_hThreadPumpHandle",
    "public: int __thiscall WBEMTime::operator<=(class WBEMTime const &)const",
    "private: int __thiscall CObjectPathParser::ns_list_rest(void)",
    "protected: bool __thiscall Provider::SetCreationClassName(class CInstance *)",
    "public: __thiscall WBEMTime::WBEMTime(struct tm const &)",
    "public: static long __stdcall WBEMTime::GetLocalOffsetForDate(struct _SYSTEMTIME const *)",
    "public: __thiscall CHString::~CHString(void)",
    "public: long __thiscall CRegistry::OpenAndEnumerateSubKeys(struct HKEY__ *,unsigned short const *,unsigned long)",
    "public: int __thiscall WBEMTime::operator<(class WBEMTime const &)const",
    "private: long __thiscall Provider::GetObject(struct ParsedObjectPath *,class MethodContext *,long)",
    "public: __thiscall KeyRef::KeyRef(unsigned short const *,struct tagVARIANT const *)",
    "public: void * __thiscall CHPtrArray::operator[](int)const",
    "public: bool __thiscall CInstance::GetStringArray(unsigned short const *,struct tagSAFEARRAY * &)const",
    "public: void __thiscall CHStringArray::InsertAt(int,class CHStringArray *)",
    "public: long __thiscall CFrameworkQuery::GetValuesForProp(unsigned short const *,class CHStringArray &)",
    "public: void __cdecl CHString::Format(unsigned int,...)",
    "class ProviderLog captainsLog",
    "public: bool __thiscall CInstance::GetWBEMINT16(unsigned short const *,short &)const",
    "public: __thiscall CreateMutexAsProcess::CreateMutexAsProcess(unsigned short const *)",
    "public: virtual long __stdcall CWbemProviderGlue::CreateClassEnumAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: bool __thiscall CInstance::GetWBEMINT64(unsigned short const *,class CHString &)const",
    "public: void __thiscall CHString::Empty(void)",
    "public: class CHPtrArray & __thiscall CHPtrArray::operator=(class CHPtrArray const &)",
    "public: void __thiscall CRegistry::RewindSubKeys(void)",
    "public: virtual unsigned long __stdcall CWbemGlueFactory::AddRef(void)",
    "const CInstance::`vftable'",
    "public: int __thiscall WBEMTimeSpan::Gettime_t(long *)const",
    "public: virtual unsigned long __stdcall CWbemProviderGlue::AddRef(void)",
    "public: unsigned short * __thiscall CRegistry::GetClassNameW(void)",
    "private: long __thiscall CRegistry::myRegSetValueEx(struct HKEY__ *,unsigned short const *,unsigned long,unsigned long,unsigned char const *,unsigned long)",
    "private: static void __stdcall CWbemProviderGlue::LockProviderMap(void)",
    "public: struct ParsedObjectPath & __thiscall ParsedObjectPath::operator=(struct ParsedObjectPath const &)",
    "public: int __thiscall ParsedObjectPath::SetClassName(unsigned short const *)",
    "public: void __thiscall ParsedObjectPath::ClearKeys(void)",
    "public: bool __thiscall CInstance::SetCharSplat(unsigned short const *,unsigned long)",
    "public: virtual long __stdcall CWbemProviderGlue::DeleteClassAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: static long __stdcall CWbemProviderGlue::GetInstancesByQueryAsynch(unsigned short const *,class Provider *,long (__stdcall*)(class Provider *,class CInstance *,class MethodContext *,void *),unsigned short const *,class MethodContext *,void *)",
    "private: static class Provider * __stdcall CWbemProviderGlue::SearchMapForProvider(unsigned short const *,unsigned short const *)",
    "private: static struct IWbemClassObject * CWbemProviderGlue::m_pStatusObject",
    "public: virtual long __stdcall CWbemProviderGlue::ExecMethodAsync(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IWbemClassObject *,struct IWbemObjectSink *)",
    "public: class CHStringArray & __thiscall CHStringArray::operator=(class CHStringArray const &)",
    "public: void __thiscall CHStringArray::RemoveAt(int,int)",
    "protected: static long * __stdcall CWbemProviderGlue::GetMapCountPtr(class CWbemGlueFactory const *)",
    "public: int __thiscall ParsedObjectPath::AddKeyRef(unsigned short const *,struct tagVARIANT const *)",
    "protected: void __thiscall CInstance::LogError(unsigned short const *,unsigned short const *,unsigned short const *,long)const",
    "private: static unsigned long CRegistry::s_dwPlatform",
    "public: __thiscall CFrameworkQuery::~CFrameworkQuery(void)",
    "public: int __thiscall CRegistrySearch::SearchAndBuildList(class CHString,class CHPtrArray &,class CHString,class CHString,int,struct HKEY__ *)",
    "public: int __thiscall CThreadBase::BeginRead(unsigned long)",
    "private: static void __stdcall CWbemProviderGlue::GetComputerNameW(class CHString &)",
    "public: bool __thiscall CFrameworkQuery::KeysOnly(void)",
    "public: unsigned short * __thiscall CHString::LockBuffer(void)",
    "public: __thiscall CFrameworkQueryEx::~CFrameworkQueryEx(void)",
    "public: struct HKEY__ * __thiscall CRegistry::GethKey(void)",
    "public: void __thiscall WBEMTimeSpan::Clear(void)",
    "protected: class CHString const & __thiscall Provider::GetLocalComputerName(void)",
    "public: class CHString const & __thiscall CHString::operator=(class CHString const &)",
    "private: long __thiscall CRegistry::myRegEnumKey(struct HKEY__ *,unsigned long,unsigned short *,unsigned long)",
    "public: class CreateMutexAsProcess & __thiscall CreateMutexAsProcess::operator=(class CreateMutexAsProcess const &)",
    "public: static long __stdcall CWbemProviderGlue::DecrementObjectCount(void)",
    "private: static class CAutoEvent CWinMsgEvent::mg_aeCreateWindow",
    "public: void __thiscall CHStringArray::InsertAt(int,unsigned short const *,int)",
    "public: static long __stdcall CWbemProviderGlue::GetInstancesByQuery(unsigned short const *,class TRefPointerCollection *,class MethodContext *,unsigned short const *)",
    "protected: static int __stdcall CHString::SafeStrlen(unsigned short const *)",
    "public: __thiscall WBEMTime::WBEMTime(long const &)",
    "public: void __thiscall CHString::UnlockBuffer(void)",
    "public: __thiscall CAutoEvent::CAutoEvent(void)",
    "public: unsigned short * __thiscall CHString::AllocSysString(void)const",
    "public: int __thiscall ParsedObjectPath::IsLocal(unsigned short const *)"
  ],
  "framedynos.dll": [
    "public: int __thiscall WBEMTime::Gettime_t(long *)const",
    "public: __thiscall CFrameworkQueryEx::CFrameworkQueryEx(void)",
    "public: int __thiscall ParsedObjectPath::AddKeyRefEx(unsigned short const *,struct tagVARIANT const *)",
    "public: void __thiscall CHString::ReleaseBuffer(int)",
    "protected: long __thiscall Provider::ValidateFlags(long,enum Provider::FlagDefs)",
    "public: __thiscall CWinMsgEvent::CWinMsgEvent(void)",
    "public: __thiscall CWinMsgEvent::~CWinMsgEvent(void)",
    "private: void __thiscall CWbemProviderGlue::AddFlushPtr(void *)",
    "unsigned long __stdcall NormalizePath(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,class CHString &)",
    "protected: virtual long __thiscall Provider::ValidateMethodFlags(long)",
    "public: static long __stdcall CWbemProviderGlue::GetInstanceByPath(unsigned short const *,class CInstance * *,class MethodContext *)",
    "public: unsigned short __thiscall CHString::operator[](int)const",
    "public: unsigned long __thiscall CRegistry::GetCurrentBinaryKeyValue(unsigned short const *,unsigned char *,unsigned long *)",
    "public: long __thiscall CRegistry::CreateOpen(struct HKEY__ *,unsigned short const *,unsigned short *,unsigned long,unsigned long,struct _SECURITY_ATTRIBUTES *,unsigned long *)",
    "protected: static long __stdcall CWbemProviderGlue::DecrementMapCount(class CWbemGlueFactory const *)",
    "const CWinMsgEvent::`vftable'",
    "class CHString __stdcall operator+(class CHString const &,unsigned short const *)",
    "private: int __thiscall CObjectPathParser::ns_or_class(void)",
    "public: unsigned long __thiscall CRegistry::GetLongestClassStringSize(void)",
    "public: virtual long __stdcall CWbemProviderGlue::CreateInstanceEnum(unsigned short * const,long,struct IWbemContext *,struct IEnumWbemClassObject * *)",
    "protected: void __thiscall CHString::AllocBeforeWrite(int)",
    "public: void * * __thiscall CHPtrArray::GetData(void)",
    "public: int __thiscall WBEMTime::operator!=(class WBEMTime const &)const",
    "protected: void __thiscall CWinMsgEvent::UnRegisterAllMessages(void)",
    "private: static int CWbemProviderGlue::s_bInitted",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator=(unsigned short * const)",
    "public: int __thiscall CHStringArray::Append(class CHStringArray const &)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(unsigned short const *,unsigned long &)",
    "public: unsigned __int64 __thiscall WBEMTimeSpan::GetTime(void)const",
    "private: void __thiscall CRegistry::SetDefaultValues(void)",
    "protected: bool __thiscall Provider::GetLocalInstancePath(class CInstance const *,class CHString &)",
    "public: unsigned short * __thiscall CFrameworkQuery::GetQueryClassName(void)",
    "private: struct IWbemServices * __stdcall CWbemProviderGlue::InternalGetNamespaceConnection(unsigned short const *)",
    "public: __thiscall CHPtrArray::~CHPtrArray(void)",
    "class CHString __stdcall operator+(class CHString const &,unsigned short)",
    "public: long __thiscall CRegistry::EnumerateAndGetValues(unsigned long &,unsigned short * &,unsigned char * &)",
    "public: void __thiscall CHString::MakeLower(void)",
    "private: int __thiscall CObjectPathParser::propname(void)",
    "public: class MethodContext * __thiscall CInstance::GetMethodContext(void)const",
    "protected: virtual long __thiscall Provider::DeleteInstance(class CInstance const &,long)",
    "private: static void __stdcall CWinMsgEvent::WindowsDispatch(void)",
    "public: virtual long __stdcall CWbemProviderGlue::Initialize(unsigned short *,long,unsigned short *,unsigned short *,struct IWbemServices *,struct IWbemContext *,struct IWbemProviderInitSink *)",
    "public: __thiscall CFrameworkQuery::CFrameworkQuery(void)",
    "public: class MethodContext & __thiscall MethodContext::operator=(class MethodContext const &)",
    "public: __thiscall ParsedObjectPath::ParsedObjectPath(void)",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator-=(class WBEMTimeSpan const &)",
    "public: __thiscall CRegistrySearch::CRegistrySearch(void)",
    "public: __thiscall CWbemGlueFactory::CWbemGlueFactory(long *)",
    "public: void __thiscall WBEMTime::Clear(void)",
    "public: unsigned long __thiscall CRegistry::GetValueCount(void)",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(long const &)",
    "public: void __thiscall CHString::MakeUpper(void)",
    "public: class WBEMTimeSpan __thiscall WBEMTimeSpan::operator-(class WBEMTimeSpan const &)const",
    "private: long __thiscall CRegistry::myRegQueryValueEx(struct HKEY__ *,unsigned short const *,unsigned long *,unsigned long *,unsigned char *,unsigned long *)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(struct HKEY__ *,unsigned short const *,unsigned long &)",
    "private: static void __stdcall CWbemProviderGlue::UnlockProviderMap(void)",
    "protected: virtual void __thiscall Provider::Flush(void)",
    "private: static class CCritSec CWbemProviderGlue::m_csFlushPtrs",
    "public: long __thiscall CRegistry::OpenLocalMachineKeyAndReadValue(unsigned short const *,unsigned short const *,class CHString &)",
    "public: static int __stdcall CWbemProviderGlue::FrameworkLoginDLL(unsigned short const *,long *)",
    "public: __thiscall CHString::CHString(void)",
    "protected: virtual long __thiscall Provider::ValidateEnumerationFlags(long)",
    "private: long __thiscall Provider::DeleteInstance(struct ParsedObjectPath *,long,class MethodContext *)",
    "public: static int __stdcall CWbemProviderGlue::FrameworkLogoffDLL(unsigned short const *)",
    "private: static long __stdcall CWbemProviderGlue::CheckImpersonationLevel(void)",
    "public: __thiscall CFrameworkQueryEx::CFrameworkQueryEx(class CFrameworkQueryEx const &)",
    "public: int __thiscall CHStringArray::Add(unsigned short const *)",
    "public: void __thiscall CHPtrArray::SetAt(int,void *)",
    "public: virtual unsigned long __stdcall CWbemGlueFactory::Release(void)",
    "public: __thiscall CHString::CHString(char const *)",
    "private: long __thiscall CRegistry::myRegEnumValue(struct HKEY__ *,unsigned long,unsigned short *,unsigned long *,unsigned long *,unsigned long *,unsigned char *,unsigned long *)",
    "private: static class CHString Provider::s_strComputerName",
    "public: static long __stdcall CWbemProviderGlue::GetAllInstancesAsynch(unsigned short const *,class Provider *,long (__stdcall*)(class Provider *,class CInstance *,class MethodContext *,void *),unsigned short const *,class MethodContext *,void *)",
    "public: void __thiscall CHString::TrimLeft(void)",
    "public: void __thiscall ProviderLog::LocalLogMessage(unsigned short const *,unsigned short const *,int,enum ProviderLog::LogLevel)",
    "private: int __thiscall CObjectPathParser::ns_list(void)",
    "public: class CHString const & __thiscall CHString::operator+=(class CHString const &)",
    "public: virtual long __stdcall CWbemGlueFactory::QueryInterface(struct _GUID const &,void * *)",
    "public: bool __thiscall CInstance::SetByte(unsigned short const *,unsigned char)",
    "protected: virtual void __thiscall CThreadBase::OnFinalRelease(void)",
    "protected: virtual long __thiscall Provider::ExecQuery(class MethodContext *,class CFrameworkQuery &,long)",
    "public: class WBEMTime & __thiscall WBEMTime::operator=(class WBEMTime const &)",
    "public: struct IWbemClassObject * __thiscall CInstance::GetClassObjectInterface(void)",
    "public: virtual long __stdcall CWbemProviderGlue::CancelAsyncCall(struct IWbemObjectSink *)",
    "public: struct KeyRef & __thiscall KeyRef::operator=(struct KeyRef const &)",
    "const MethodContext::`vftable'",
    "public: class WBEMTimeSpan __thiscall WBEMTime::operator-(class WBEMTime const &)",
    "private: static void __stdcall CWinMsgEvent::DestroyMsgWindow(void)",
    "public: virtual long __stdcall CWbemProviderGlue::DeleteInstanceAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: bool __thiscall CInstance::GetTimeSpan(unsigned short const *,class WBEMTimeSpan &)const",
    "protected: virtual long __thiscall Provider::ValidateDeletionFlags(long)",
    "public: int __thiscall WBEMTimeSpan::operator<(class WBEMTimeSpan const &)const",
    "public: static long __stdcall WBEMTime::GetLocalOffsetForDate(struct _FILETIME const *)",
    "public: long __thiscall CThreadBase::AddRef(void)",
    "public: void * __thiscall CHPtrArray::GetAt(int)const",
    "private: static class CCritSec CWinMsgEvent::mg_csWindowLock",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyValue(unsigned short const *,class CHString &)",
    "public: void __cdecl ProviderLog::LocalLogMessage(unsigned short const *,int,enum ProviderLog::LogLevel,unsigned short const *,...)",
    "public: virtual __thiscall Provider::~Provider(void)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(struct _FILETIME const &)",
    "public: void __thiscall CThreadBase::EndRead(void)",
    "public: int __thiscall CHString::GetLength(void)const",
    "public: __thiscall Provider::Provider(unsigned short const *,unsigned short const *)",
    "public: virtual long __stdcall CWbemProviderGlue::ExecQuery(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IEnumWbemClassObject * *)",
    "public: class WBEMTime __thiscall WBEMTime::operator-(class WBEMTimeSpan const &)const",
    "public: int __thiscall WBEMTimeSpan::operator<=(class WBEMTimeSpan const &)const",
    "public: long __thiscall CFrameworkQuery::Init(unsigned short * const,unsigned short * const,long,class CHString &)",
    "private: static int Provider::initFailed_",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(int,int,int,int,int,int,int)",
    "public: bool __thiscall CInstance::SetCHString(unsigned short const *,char const *)",
    "public: int __thiscall CHPtrArray::Add(void *)",
    "public: void __thiscall CHPtrArray::InsertAt(int,class CHPtrArray *)",
    "private: static int CRegistry::s_fPlatformSet",
    "public: virtual long __stdcall CWbemProviderGlue::PutInstanceAsync(struct IWbemClassObject *,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "private: static struct HWND__ * CWinMsgEvent::mg_hWnd",
    "public: __thiscall WBEMTime::WBEMTime(struct _FILETIME const &)",
    "private: unsigned long __thiscall CRegistry::GetCurrentRawSubKeyValue(unsigned short const *,void *,unsigned long *,unsigned long *)",
    "private: int __thiscall Provider::SetKeyFromParsedObjectPath(class CInstance *,struct ParsedObjectPath *)",
    "public: class CHString const & __thiscall CHString::operator=(char)",
    "public: static int __stdcall CWbemProviderGlue::FrameworkLogoffDLL(unsigned short const *,long *)",
    "private: int __thiscall CObjectPathParser::ident_becomes_class(void)",
    "public: bool __thiscall CFrameworkQuery::IsPropertyRequired(unsigned short const *)",
    "public: static long __stdcall CWbemProviderGlue::GetEmptyInstance(class MethodContext *,unsigned short const *,class CInstance * *,unsigned short const *)",
    "public: void __thiscall CHString::MakeReverse(void)",
    "const Provider::`vftable'",
    "public: __thiscall CHString::CHString(unsigned char const *)",
    "public: __thiscall CWbemGlueFactory::~CWbemGlueFactory(void)",
    "public: __thiscall WBEMTime::WBEMTime(void)",
    "private: static class CCritSec CWbemProviderGlue::m_csStatusObject",
    "protected: virtual long __thiscall Provider::PutInstance(class CInstance const &,long)",
    "public: static struct IWbemServices * __stdcall CWbemProviderGlue::GetNamespaceConnection(unsigned short const *)",
    "public: void const * * __thiscall CHPtrArray::GetData(void)const",
    "public: __thiscall CInstance::CInstance(class CInstance const &)",
    "public: void __cdecl CHString::FormatMessageW(unsigned int,...)",
    "private: static class std::map,class std::allocator > > CWbemProviderGlue::s_factorymap",
    "private: static void __stdcall CWbemProviderGlue::LockFactoryMap(void)",
    "public: unsigned short * __thiscall ParsedObjectPath::GetParentNamespacePart(void)",
    "private: void __thiscall CThreadBase::Lock(void)",
    "protected: void __thiscall CHString::ConcatInPlace(int,unsigned short const *)",
    "public: class CObjectPathParser & __thiscall CObjectPathParser::operator=(class CObjectPathParser const &)",
    "private: static void __stdcall Provider::InitComputerName(void)",
    "private: static unsigned long CWbemProviderGlue::s_dwPlatform",
    "public: unsigned __int64 __thiscall WBEMTime::GetTime(void)const",
    "private: int __thiscall CObjectPathParser::keyref(void)",
    "public: void __thiscall CHStringArray::SetSize(int,int)",
    "public: __thiscall CWinMsgEvent::CWinMsgEvent(class CWinMsgEvent const &)",
    "public: virtual __thiscall ProviderLog::~ProviderLog(void)",
    "public: void __thiscall CHPtrArray::FreeExtra(void)",
    "public: void __thiscall CHString::Release(void)",
    "public: void __thiscall CHString::TrimRight(void)",
    "protected: void __thiscall CHString::AssignCopy(int,unsigned short const *)",
    "public: bool __thiscall CInstance::SetVariant(unsigned short const *,struct tagVARIANT const &)",
    "public: void __thiscall CWbemGlueFactory::Destroy(void)",
    "public: int __thiscall CRegistrySearch::LocateKeyByNameOrValueName(struct HKEY__ *,unsigned short const *,unsigned short const *,unsigned short const * *,unsigned long,class CHString &,class CHString &)",
    "public: class CHString const & __thiscall CHString::operator=(unsigned short)",
    "public: unsigned short * __thiscall WBEMTime::GetDMTFNonNtfs(void)const",
    "private: static unsigned long CWbemProviderGlue::s_dwMajorVersion",
    "public: __thiscall CHStringArray::~CHStringArray(void)",
    "private: static class std::multimap,class std::allocator > > CWinMsgEvent::mg_oSinkMap",
    "public: int __thiscall WBEMTimeSpan::GetFILETIME(struct _FILETIME *)const",
    "public: unsigned long __thiscall CRegistry::DeleteCurrentKeyValue(unsigned short const *)",
    "public: static long __stdcall CWbemProviderGlue::GetInstanceKeysByPath(unsigned short const *,class CInstance * *,class MethodContext *)",
    "public: virtual long __stdcall CWbemGlueFactory::LockServer(int)",
    "public: bool __thiscall CInstance::SetWBEMINT16(unsigned short const *,short const &)",
    "public: static unsigned short * __stdcall CObjectPathParser::GetRelativePath(unsigned short *)",
    "protected: void __thiscall CHString::Init(void)",
    "private: static void __stdcall CWbemProviderGlue::UnlockFactoryMap(void)",
    "public: bool __thiscall CInstance::GetByte(unsigned short const *,unsigned char &)const",
    "public: unsigned long __thiscall CRegistry::GetCurrentBinaryKeyValue(unsigned short const *,class CHString &)",
    "public: class CHString const & __thiscall CHString::operator+=(char)",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator=(long const &)",
    "public: int __thiscall WBEMTime::GetSYSTEMTIME(struct _SYSTEMTIME *)const",
    "public: bool __thiscall MethodContext::SetStatusObject(struct IWbemClassObject *)",
    "public: virtual long __stdcall CWbemProviderGlue::QueryObjectSink(long,struct IWbemObjectSink * *)",
    "public: int __thiscall CAutoEvent::Signal(void)",
    "public: __thiscall CObjectPathParser::CObjectPathParser(enum ObjectParserFlags)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(struct HKEY__ *,unsigned short const *,class CHStringArray &)",
    "public: class CHString __thiscall CHString::Mid(int,int)const",
    "public: virtual __thiscall CInstance::~CInstance(void)",
    "public: bool __thiscall CInstance::GetDateTime(unsigned short const *,class WBEMTime &)const",
    "public: virtual long __stdcall CWbemProviderGlue::DeleteClass(unsigned short * const,long,struct IWbemContext *,struct IWbemCallResult * *)",
    "private: static long CWbemProviderGlue::s_lObjects",
    "private: static class std::set,class std::allocator > CWbemProviderGlue::m_FlushPtrs",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(struct tm const &)",
    "protected: virtual long __thiscall Provider::GetObject(class CInstance *,long,class CFrameworkQuery &)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(long const &)",
    "public: virtual long __stdcall CWbemProviderGlue::OpenNamespace(unsigned short * const,long,struct IWbemContext *,struct IWbemServices * *,struct IWbemCallResult * *)",
    "public: int __thiscall WBEMTime::SetDMTF(unsigned short * const)",
    "const CWbemGlueFactory::`vftable'",
    "private: static int __stdcall CRegistry::SetPlatformID(void)",
    "public: virtual __thiscall CThreadBase::~CThreadBase(void)",
    "public: class CWbemProviderGlue & __thiscall CWbemProviderGlue::operator=(class CWbemProviderGlue const &)",
    "public: __thiscall CRegistry::CRegistry(void)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator+=(class WBEMTimeSpan const &)",
    "public: __thiscall CRegistry::CRegistry(class CRegistry const &)",
    "private: static class std::map,class std::allocator > > CWbemProviderGlue::s_providersmap",
    "public: int __thiscall ParsedObjectPath::AddNamespace(unsigned short const *)",
    "private: int __thiscall CObjectPathParser::ns_or_server(void)",
    "public: long __thiscall CRegistry::Open(struct HKEY__ *,unsigned short const *,unsigned long)",
    "protected: unsigned long __thiscall CFrameworkQuery::IsInList(class CHStringArray const &,unsigned short const *)",
    "public: int __thiscall CHString::Find(unsigned short const *)const",
    "public: class CHString * __thiscall CHStringArray::GetData(void)",
    "public: virtual void __thiscall MethodContext::QueryPostProcess(void)",
    "private: int __thiscall CObjectPathParser::objref(void)",
    "public: bool __thiscall CInstance::GetVariant(unsigned short const *,struct tagVARIANT &)const",
    "public: unsigned long __thiscall CRegistry::GetLongestValueData(void)",
    "const CWbemProviderGlue::`vftable'{for `IWbemServices'}",
    "public: int __thiscall CFrameworkQueryEx::IsNTokenAnd(class CHStringArray &,class CHPtrArray &)",
    "public: class CWinMsgEvent & __thiscall CWinMsgEvent::operator=(class CWinMsgEvent const &)",
    "public: __thiscall CWbemGlueFactory::CWbemGlueFactory(void)",
    "public: __thiscall CHString::CHString(unsigned short const *,int)",
    "public: bool __thiscall CInstance::GetStatus(unsigned short const *,bool &,unsigned short &)const",
    "private: int __thiscall Provider::ValidateIMOSPointer(void)",
    "public: int __thiscall CFrameworkQueryEx::Is3TokenOR(unsigned short const *,unsigned short const *,struct tagVARIANT &,struct tagVARIANT &)",
    "public: bool __thiscall CInstance::SetWORD(unsigned short const *,unsigned short)",
    "public: int __thiscall WBEMTime::operator>=(class WBEMTime const &)const",
    "public: __thiscall CWbemProviderGlue::CWbemProviderGlue(long *)",
    "class CHString __stdcall operator+(class CHString const &,class CHString const &)",
    "private: long __thiscall Provider::CreateInstanceEnum(class MethodContext *,long)",
    "public: int __thiscall WBEMTime::GetFILETIME(struct _FILETIME *)const",
    "public: static long __stdcall CWbemProviderGlue::GetInstancePropertiesByPath(unsigned short const *,class CInstance * *,class MethodContext *,class CHStringArray &)",
    "public: virtual unsigned long __stdcall CWbemProviderGlue::Release(void)",
    "public: static void __stdcall CHString::Release(struct CHStringData *)",
    "public: unsigned short * __thiscall CHString::GetBuffer(int)",
    "public: class CHString & __thiscall CHStringArray::ElementAt(int)",
    "public: virtual long __stdcall CWbemProviderGlue::QueryInterface(struct _GUID const &,void * *)",
    "public: bool __thiscall CInstance::SetCharSplat(unsigned short const *,char const *)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyValue(unsigned short const *,void *,unsigned long *)",
    "public: __thiscall CThreadBase::CThreadBase(class CThreadBase const &)",
    "public: bool __thiscall CInstance::SetStringArray(unsigned short const *,struct tagSAFEARRAY const &)",
    "protected: static long __stdcall CWbemProviderGlue::IncrementMapCount(class CWbemGlueFactory const *)",
    "public: __thiscall MethodContext::MethodContext(struct IWbemContext *,class CWbemProviderGlue *)",
    "public: bool __thiscall CInstance::SetWBEMINT64(unsigned short const *,unsigned __int64)",
    "private: void __thiscall CRegistry::PrepareToReOpen(void)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(unsigned short * const)",
    "public: bool __thiscall CInstance::GetWCHAR(unsigned short const *,unsigned short * *)const",
    "private: int __thiscall CObjectPathParser::keyref_list(void)",
    "public: virtual __thiscall MethodContext::~MethodContext(void)",
    "public: unsigned short * __thiscall WBEMTime::GetDMTF(int)const",
    "public: long __thiscall CFrameworkQueryEx::GetValuesForProp(unsigned short const *,class std::vector > &)",
    "public: __thiscall CInstance::CInstance(struct IWbemClassObject *,class MethodContext *)",
    "private: int __thiscall CObjectPathParser::ident_becomes_ns(void)",
    "public: bool __thiscall CInstance::GetDWORD(unsigned short const *,unsigned long &)const",
    "private: static class CCritSec CWbemProviderGlue::s_csFactoryMap",
    "public: int __thiscall CHString::Collate(unsigned short const *)const",
    "public: void __thiscall CThreadBase::EndWrite(void)",
    "private: long __thiscall Provider::ExecuteQuery(class MethodContext *,class CFrameworkQuery &,long)",
    "public: bool __thiscall CInstance::SetDOUBLE(unsigned short const *,double)",
    "public: static class CWbemGlueFactory * __stdcall CWbemGlueFactory::Create(void)",
    "public: int __thiscall CRegistrySearch::FreeSearchList(int,class CHPtrArray &)",
    "private: unsigned long __thiscall CRegistry::GetCurrentRawKeyValue(struct HKEY__ *,unsigned short const *,void *,unsigned long *,unsigned long *)",
    "public: bool __thiscall CInstance::Setbool(unsigned short const *,bool)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(unsigned short const *,class CHStringArray &)",
    "public: int __thiscall ParsedObjectPath::AddKeyRef(struct KeyRef *)",
    "private: int __thiscall CObjectPathParser::objref_rest(void)",
    "private: long __thiscall CRegistry::myRegQueryInfoKey(struct HKEY__ *,unsigned short *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,struct _FILETIME *)",
    "public: int __thiscall CHStringArray::GetSize(void)const",
    "public: void __thiscall CHPtrArray::SetSize(int,int)",
    "public: void __thiscall CHStringArray::SetAt(int,unsigned short const *)",
    "public: virtual long __stdcall CWbemProviderGlue::CancelAsyncRequest(long)",
    "public: class Provider & __thiscall Provider::operator=(class Provider const &)",
    "private: int __thiscall CObjectPathParser::NextToken(void)",
    "public: __thiscall CThreadBase::CThreadBase(enum CThreadBase::THREAD_SAFETY_MECHANISM)",
    "public: bool __thiscall CInstance::GetWBEMINT64(unsigned short const *,unsigned __int64 &)const",
    "public: long __thiscall MethodContext::AddRef(void)",
    "private: static class CCritSec CWinMsgEvent::mg_csMapLock",
    "public: class CHString const * __thiscall CHStringArray::GetData(void)const",
    "public: static int __stdcall Provider::initFailed(void)",
    "public: void __cdecl CHString::Format(unsigned short const *,...)",
    "public: static unsigned short const * __stdcall CWbemProviderGlue::GetCSDVersion(void)",
    "protected: class CHString const & __thiscall Provider::GetProviderName(void)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(struct HKEY__ *,unsigned short const *,class CHString &)",
    "protected: class CHString const & __thiscall Provider::GetNamespace(void)",
    "public: static int __stdcall CWbemProviderGlue::FrameworkLoginDLL(unsigned short const *)",
    "public: unsigned short __thiscall CHString::GetAt(int)const",
    "private: long __thiscall Provider::PutInstance(struct IWbemClassObject *,long,class MethodContext *)",
    "class CHString __stdcall operator+(unsigned short,class CHString const &)",
    "public: class CHString const & __thiscall CHString::operator+=(unsigned short)",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(void)",
    "private: static int __stdcall CWinMsgEvent::CtrlHandlerRoutine(unsigned long)",
    "public: bool __thiscall CInstance::SetCHString(unsigned short const *,class CHString const &)",
    "public: class CHString const & __thiscall CHString::operator=(unsigned short const *)",
    "private: void __thiscall CRegistrySearch::CheckAndAddToList(class CRegistry *,class CHString,class CHString,class CHPtrArray &,class CHString,class CHString,int)",
    "protected: virtual long __thiscall Provider::ValidatePutInstanceFlags(long)",
    "private: int __thiscall CObjectPathParser::begin_parse(void)",
    "public: int __thiscall WBEMTimeSpan::operator>=(class WBEMTimeSpan const &)const",
    "private: static struct HWND__ * __stdcall CWinMsgEvent::CreateMsgWindow(void)",
    "public: virtual long __stdcall CWbemProviderGlue::PutInstance(struct IWbemClassObject *,long,struct IWbemContext *,struct IWbemCallResult * *)",
    "public: void __thiscall CHStringArray::RemoveAll(void)",
    "public: unsigned long __thiscall CRegistry::GetCurrentBinaryKeyValue(struct HKEY__ *,unsigned short const *,unsigned char *,unsigned long *)",
    "public: long __thiscall CRegistry::DeleteKey(class CHString *)",
    "public: int __thiscall CHString::GetAllocLength(void)const",
    "public: __thiscall WBEMTime::WBEMTime(struct _SYSTEMTIME const &)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(unsigned short const *,class CHString &)",
    "public: static long __stdcall CWbemProviderGlue::FillInstance(class CInstance *,unsigned short const *)",
    "private: static long __stdcall CWinMsgEvent::MsgWndProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: void __thiscall CHString::FormatV(unsigned short const *,char *)",
    "public: void __thiscall CHString::SetAt(int,unsigned short)",
    "public: __thiscall CreateMutexAsProcess::~CreateMutexAsProcess(void)",
    "public: int __thiscall CHPtrArray::GetUpperBound(void)const",
    "private: void __thiscall ProviderLog::CheckFileSize(union _LARGE_INTEGER &,class CHString const &)",
    "private: static unsigned short * CWbemProviderGlue::s_wstrCSDVersion",
    "private: long __thiscall CRegistry::myRegCreateKeyEx(struct HKEY__ *,unsigned short const *,unsigned long,unsigned short *,unsigned long,unsigned long,struct _SECURITY_ATTRIBUTES * const,struct HKEY__ * *,unsigned long *)",
    "public: bool __thiscall CInstance::SetCharSplat(unsigned short const *,unsigned short const *)",
    "public: __thiscall CWbemProviderGlue::CWbemProviderGlue(class CWbemProviderGlue const &)",
    "public: long __thiscall CFrameworkQuery::GetValuesForProp(unsigned short const *,class std::vector > &)",
    "public: virtual long __stdcall CWbemProviderGlue::GetObject(unsigned short * const,long,struct IWbemContext *,struct IWbemClassObject * *,struct IWbemCallResult * *)",
    "public: int __thiscall WBEMTime::operator==(class WBEMTime const &)const",
    "public: bool __thiscall CInstance::SetWCHARSplat(unsigned short const *,unsigned short const *)",
    "public: bool __thiscall WBEMTimeSpan::IsOk(void)const",
    "public: void __thiscall CHPtrArray::Copy(class CHPtrArray const &)",
    "public: unsigned short * __thiscall ParsedObjectPath::GetNamespacePart(void)",
    "protected: virtual long __thiscall Provider::GetObject(class CInstance *,long)",
    "public: bool __thiscall CInstance::SetWBEMINT64(unsigned short const *,class CHString const &)",
    "private: int __thiscall CObjectPathParser::keyref_term(void)",
    "private: static struct IWbemClassObject * __stdcall CWbemProviderGlue::GetStatusObject(class MethodContext *,unsigned short const *)",
    "protected: bool __thiscall CWinMsgEvent::UnRegisterMessage(unsigned int,int)",
    "public: virtual long __stdcall CWbemProviderGlue::PutClassAsync(struct IWbemClassObject *,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: bool __thiscall CInstance::Getbool(unsigned short const *,bool &)const",
    "protected: int __thiscall CFrameworkQuery::IsReference(unsigned short const *)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyName(class CHString &)",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator+=(class WBEMTimeSpan const &)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyPath(class CHString &)",
    "public: void __thiscall CObjectPathParser::Free(struct ParsedObjectPath *)",
    "public: void __thiscall CHString::FreeExtra(void)",
    "protected: void __thiscall CHString::ConcatCopy(int,unsigned short const *,int,unsigned short const *)",
    "public: void __thiscall CFrameworkQueryEx::GetPropertyBitMask(class CHPtrArray const &,void *)",
    "public: __thiscall MethodContext::MethodContext(class MethodContext const &)",
    "public: class CHString __thiscall CHString::SpanExcluding(unsigned short const *)const",
    "public: class CHString & __thiscall CHStringArray::operator[](int)",
    "public: class CHString const & __thiscall CHString::operator+=(unsigned short const *)",
    "public: static long __stdcall CWbemProviderGlue::GetAllInstances(unsigned short const *,class TRefPointerCollection *,unsigned short const *,class MethodContext *)",
    "private: void __thiscall CObjectPathParser::Zero(void)",
    "public: virtual long __stdcall CWbemProviderGlue::CreateClassEnum(unsigned short * const,long,struct IWbemContext *,struct IEnumWbemClassObject * *)",
    "private: static void __stdcall CWinMsgEvent::CreateMsgProvider(void)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator=(struct _SYSTEMTIME const &)",
    "public: int __thiscall WBEMTime::operator>(class WBEMTime const &)const",
    "public: static void __stdcall CWbemProviderGlue::FrameworkLogoff(unsigned short const *,unsigned short const *)",
    "private: int __thiscall CObjectPathParser::key_const(void)",
    "public: int __thiscall CHString::LoadStringW(unsigned int)",
    "public: virtual bool __thiscall CFrameworkQueryEx::IsExtended(void)",
    "public: static int __stdcall CObjectPathParser::Unparse(struct ParsedObjectPath *,unsigned short * *)",
    "public: class CHString __thiscall CHString::Mid(int)const",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(unsigned short const *,class CHString &)",
    "public: virtual long __stdcall CWbemProviderGlue::CreateInstanceEnumAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: class CHString __thiscall CHStringArray::GetAt(int)const",
    "private: unsigned long __thiscall CRegistry::OpenSubKey(void)",
    "private: void __thiscall CWbemProviderGlue::FlushAll(void)",
    "public: __thiscall CWbemProviderGlue::~CWbemProviderGlue(void)",
    "public: void * & __thiscall CHPtrArray::operator[](int)",
    "const CThreadBase::`vftable'",
    "public: long __thiscall MethodContext::Release(void)",
    "public: static void __stdcall CWbemProviderGlue::FrameworkLogin(unsigned short const *,class Provider *,unsigned short const *)",
    "public: __thiscall CWbemProviderGlue::CWbemProviderGlue(void)",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(unsigned short * const)",
    "protected: void __thiscall CHString::AllocBuffer(int)",
    "public: int __thiscall WBEMTime::GetStructtm(struct tm *)const",
    "public: unsigned long __thiscall CRegistry::DeleteCurrentKeyValue(struct HKEY__ *,unsigned short const *)",
    "public: unsigned long __thiscall CAutoEvent::Wait(unsigned long)",
    "public: void __thiscall CThreadBase::`default constructor closure'(void)",
    "public: unsigned short * __thiscall ParsedObjectPath::GetKeyString(void)",
    "public: class CRegistrySearch & __thiscall CRegistrySearch::operator=(class CRegistrySearch const &)",
    "public: __thiscall ProviderLog::ProviderLog(void)",
    "public: static unsigned long __stdcall CWbemProviderGlue::GetPlatform(void)",
    "protected: void __thiscall CWinMsgEvent::RegisterForMessage(unsigned int,int)",
    "protected: static void __stdcall CWbemProviderGlue::AddToFactoryMap(class CWbemGlueFactory const *,long *)",
    "protected: virtual long __thiscall Provider::ExecMethod(class CInstance const &,unsigned short * const,class CInstance *,class CInstance *,long)",
    "public: int __thiscall CHString::Compare(unsigned short const *)const",
    "public: class CAutoEvent & __thiscall CAutoEvent::operator=(class CAutoEvent const &)",
    "public: static struct IWbemServices * __stdcall CWbemProviderGlue::GetNamespaceConnection(unsigned short const *,class MethodContext *)",
    "public: __thiscall WBEMTime::WBEMTime(unsigned short * const)",
    "public: bool __thiscall CFrameworkQuery::AllPropertiesAreRequired(void)",
    "private: static class Provider * __stdcall CWbemProviderGlue::AddProviderToMap(unsigned short const *,unsigned short const *,class Provider *)",
    "public: class WBEMTimeSpan & __thiscall WBEMTimeSpan::operator=(class WBEMTimeSpan const &)",
    "public: void * & __thiscall CHPtrArray::ElementAt(int)",
    "protected: virtual long __thiscall Provider::EnumerateInstances(class MethodContext *,long)",
    "public: void __thiscall CHPtrArray::RemoveAll(void)",
    "public: class CInstance & __thiscall CInstance::operator=(class CInstance const &)",
    "public: __thiscall CObjectPathParser::~CObjectPathParser(void)",
    "public: int __thiscall WBEMTimeSpan::operator>(class WBEMTimeSpan const &)const",
    "public: struct IWbemClassObject * __thiscall MethodContext::GetStatusObject(void)",
    "public: class CFrameworkQuery & __thiscall CFrameworkQuery::operator=(class CFrameworkQuery const &)",
    "public: virtual long __stdcall CWbemProviderGlue::DeleteInstance(unsigned short * const,long,struct IWbemContext *,struct IWbemCallResult * *)",
    "public: void __thiscall CFrameworkQuery::Init2(struct IWbemClassObject *)",
    "public: class WBEMTime __thiscall WBEMTime::operator+(class WBEMTimeSpan const &)const",
    "public: class CHString __thiscall CHString::Right(int)const",
    "public: virtual long __stdcall CWbemGlueFactory::CreateInstance(struct IUnknown *,struct _GUID const &,void * *)",
    "public: __thiscall CRegistry::~CRegistry(void)",
    "const CFrameworkQueryEx::`vftable'",
    "_DoCmd@16",
    "protected: virtual long __thiscall Provider::ValidateGetObjFlags(long)",
    "public: class CThreadBase & __thiscall CThreadBase::operator=(class CThreadBase const &)",
    "public: static long __stdcall CWbemProviderGlue::GetAllDerivedInstancesAsynch(unsigned short const *,class Provider *,long (__stdcall*)(class Provider *,class CInstance *,class MethodContext *,void *),unsigned short const *,class MethodContext *,void *)",
    "public: virtual struct IWbemContext * __thiscall MethodContext::GetIWBEMContext(void)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(struct HKEY__ *,unsigned short const *,class CHString &)",
    "public: unsigned long __thiscall CRegistry::GetLongestSubKeySize(void)",
    "private: long __thiscall Provider::ExecMethod(struct ParsedObjectPath *,unsigned short *,long,class CInstance *,class CInstance *,class MethodContext *)",
    "public: unsigned short * __thiscall CHString::GetBufferSetLength(int)",
    "private: long __thiscall CRegistry::myRegOpenKeyEx(struct HKEY__ *,unsigned short const *,unsigned long,unsigned long,struct HKEY__ * *)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyCount(void)",
    "protected: void __thiscall CHString::AllocCopy(class CHString &,int,int,int)const",
    "private: static unsigned long __stdcall CWinMsgEvent::dwThreadProc(void *)",
    "public: int __thiscall CThreadBase::BeginWrite(unsigned long)",
    "public: int __thiscall CObjectPathParser::Parse(unsigned short const *,struct ParsedObjectPath * *)",
    "public: bool __thiscall CInstance::SetDWORD(unsigned short const *,unsigned long)",
    "public: virtual long __stdcall CWbemProviderGlue::GetObjectAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: int __thiscall CHString::CompareNoCase(unsigned short const *)const",
    "public: long __thiscall CInstance::Release(void)",
    "protected: void __thiscall CHString::CopyBeforeWrite(void)",
    "private: int __thiscall CObjectPathParser::optional_objref(void)",
    "const ProviderLog::`vftable'",
    "public: __thiscall WBEMTimeSpan::WBEMTimeSpan(struct _FILETIME const &)",
    "public: long __thiscall CInstance::AddRef(void)",
    "public: class WBEMTime const & __thiscall WBEMTime::operator-=(class WBEMTimeSpan const &)",
    "public: unsigned short * __thiscall WBEMTimeSpan::GetBSTR(void)const",
    "private: long __thiscall CWbemProviderGlue::NullOutUnsetProperties(struct IWbemClassObject *,struct IWbemClassObject * *,struct tagVARIANT const &)",
    "public: void __thiscall CHPtrArray::InsertAt(int,void *,int)",
    "public: __thiscall CRegistrySearch::CRegistrySearch(class CRegistrySearch const &)",
    "public: bool __thiscall CInstance::GetWBEMINT64(unsigned short const *,__int64 &)const",
    "protected: class CInstance * __thiscall Provider::CreateNewInstance(class MethodContext *)",
    "public: bool __thiscall CInstance::SetNull(unsigned short const *)",
    "protected: struct CHStringData * __thiscall CHString::GetData(void)const",
    "public: static long __stdcall CWbemProviderGlue::GetEmptyInstance(unsigned short const *,class CInstance * *,unsigned short const *)",
    "public: class CHString __thiscall CHString::Left(int)const",
    "public: static long __stdcall CWbemProviderGlue::GetAllDerivedInstances(unsigned short const *,class TRefPointerCollection *,class MethodContext *,unsigned short const *)",
    "private: struct IWbemClassObject * __thiscall Provider::GetClassObjectInterface(class MethodContext *)",
    "private: void __thiscall CThreadBase::Unlock(void)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(struct HKEY__ *,unsigned short const *,unsigned long &)",
    "public: bool __thiscall CInstance::GetWORD(unsigned short const *,unsigned short &)const",
    "public: enum ProviderLog::LogLevel __thiscall ProviderLog::IsLoggingOn(class CHString *)",
    "public: bool __thiscall CInstance::SetWBEMINT64(unsigned short const *,__int64)",
    "protected: class CHString __thiscall Provider::MakeLocalPath(class CHString const &)",
    "public: int __thiscall CHString::ReverseFind(unsigned short)const",
    "public: static long __stdcall WBEMTime::GetLocalOffsetForDate(struct tm const *)",
    "private: static void * CWinMsgEvent::mg_hDevNotify",
    "public: __thiscall CRegistrySearch::~CRegistrySearch(void)",
    "public: void __thiscall CFrameworkQuery::GetRequiredProperties(class CHStringArray &)",
    "public: void __thiscall CObjectPathParser::`default constructor closure'(void)",
    "public: unsigned long __thiscall CRegistry::NextSubKey(void)",
    "public: long __thiscall CThreadBase::Release(void)",
    "public: bool __thiscall CInstance::SetCHString(unsigned short const *,unsigned short const *)",
    "public: int __thiscall CHPtrArray::Append(class CHPtrArray const &)",
    "public: class CHString const & __thiscall CFrameworkQuery::GetQuery(void)",
    "protected: static void __stdcall CWbemProviderGlue::RemoveFromFactoryMap(class CWbemGlueFactory const *)",
    "protected: virtual long __thiscall Provider::ValidateQueryFlags(long)",
    "public: __thiscall CWbemGlueFactory::CWbemGlueFactory(class CWbemGlueFactory const &)",
    "public: int __thiscall CHString::FindOneOf(unsigned short const *)const",
    "public: void __thiscall CHStringArray::FreeExtra(void)",
    "public: virtual long __stdcall CWbemProviderGlue::ExecMethod(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IWbemClassObject *,struct IWbemClassObject * *,struct IWbemCallResult * *)",
    "public: void __thiscall CHStringArray::SetAtGrow(int,unsigned short const *)",
    "public: class CWbemGlueFactory & __thiscall CWbemGlueFactory::operator=(class CWbemGlueFactory const &)",
    "private: static void __stdcall CWbemProviderGlue::Init(void)",
    "public: void __thiscall CHPtrArray::RemoveAt(int,int)",
    "public: virtual long __stdcall CWbemProviderGlue::PutClass(struct IWbemClassObject *,long,struct IWbemContext *,struct IWbemCallResult * *)",
    "class CHString __stdcall operator+(unsigned short const *,class CHString const &)",
    "void __stdcall SetCHStringResourceHandle(struct HINSTANCE__ *)",
    "private: long __thiscall CRegistry::myRegDeleteKey(struct HKEY__ *,unsigned short const *)",
    "public: class WBEMTimeSpan const & __thiscall WBEMTimeSpan::operator=(struct _FILETIME const &)",
    "public: __thiscall CHString::CHString(unsigned short const *)",
    "public: int __thiscall CHString::IsEmpty(void)const",
    "public: unsigned long __thiscall CRegistry::OpenCurrentUser(unsigned short const *,unsigned long)",
    "protected: long __thiscall Provider::Commit(class CInstance *,bool)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValueExpand(struct HKEY__ *,unsigned short const *,class CHString &)",
    "const CWbemProviderGlue::`vftable'{for `IWbemProviderInit'}",
    "protected: class CHString const & __thiscall CFrameworkQuery::GetNamespace(void)",
    "public: bool __thiscall CInstance::GetEmbeddedObject(unsigned short const *,class CInstance * *,class MethodContext *)const",
    "public: class CHString __thiscall CHString::SpanIncluding(unsigned short const *)const",
    "public: int __thiscall CHString::Find(unsigned short)const",
    "public: bool __thiscall CInstance::GetCHString(unsigned short const *,class CHString &)const",
    "public: bool __thiscall CInstance::GetDOUBLE(unsigned short const *,double &)const",
    "public: bool __thiscall CInstance::SetTimeSpan(unsigned short const *,class WBEMTimeSpan const &)",
    "public: class WBEMTimeSpan __thiscall WBEMTimeSpan::operator+(class WBEMTimeSpan const &)const",
    "public: int __thiscall ParsedObjectPath::IsClass(void)",
    "public: __thiscall CHPtrArray::CHPtrArray(void)",
    "public: class CFrameworkQueryEx & __thiscall CFrameworkQueryEx::operator=(class CFrameworkQueryEx const &)",
    "public: unsigned long __thiscall CRegistry::GetCurrentKeyValue(struct HKEY__ *,unsigned short const *,class CHStringArray &)",
    "public: static bool __stdcall CWbemProviderGlue::SetStatusObject(class MethodContext *,unsigned short const *,unsigned short const *,long,struct tagSAFEARRAY const *,struct tagSAFEARRAY const *)",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(unsigned short const *,class CHStringArray &)",
    "public: static class CWbemGlueFactory * __stdcall CWbemGlueFactory::Create(long *)",
    "public: class CHString const & __thiscall CHString::operator=(char const *)",
    "public: class CHString const & __thiscall CHString::operator=(class CHString *)",
    "private: static class CCritSec CWbemProviderGlue::s_csProviderMap",
    "private: void __thiscall CObjectPathParser::Empty(void)",
    "protected: int __thiscall CHString::LoadStringW(unsigned int,unsigned short *,unsigned int)",
    "public: class CHString __thiscall CHStringArray::operator[](int)const",
    "private: long __thiscall CWbemProviderGlue::PreProcessPutInstanceParms(struct IWbemClassObject *,struct IWbemClassObject * *,struct IWbemContext *)",
    "public: class CHString const & __thiscall CHString::operator=(unsigned char const *)",
    "public: bool __thiscall CInstance::SetEmbeddedObject(unsigned short const *,class CInstance &)",
    "public: int __thiscall CHPtrArray::GetSize(void)const",
    "public: unsigned long __thiscall CRegistry::SetCurrentKeyValue(unsigned short const *,unsigned long &)",
    "public: unsigned long __thiscall CRegistry::GetCurrentSubKeyValue(unsigned short const *,unsigned long &)",
    "public: static long __stdcall WBEMTime::GetLocalOffsetForDate(long const &)",
    "public: __thiscall CHString::CHString(class CHString const &)",
    "public: __thiscall ProviderLog::ProviderLog(class ProviderLog const &)",
    "public: class CRegistry & __thiscall CRegistry::operator=(class CRegistry const &)",
    "private: long __thiscall CRegistry::myRegDeleteValue(struct HKEY__ *,unsigned short const *)",
    "private: class CWbemProviderGlue * __thiscall MethodContext::GetProviderGlue(void)",
    "private: static long __stdcall CWbemProviderGlue::GetInstanceFromCIMOM(unsigned short const *,unsigned short const *,class MethodContext *,class CInstance * *)",
    "public: int __thiscall WBEMTimeSpan::operator==(class WBEMTimeSpan const &)const",
    "public: void __thiscall CRegistry::Close(void)",
    "protected: static long __stdcall CWbemProviderGlue::DecrementMapCount(long *)",
    "public: int __thiscall ParsedObjectPath::IsInstance(void)",
    "public: long __thiscall CInstance::Commit(void)",
    "public: static bool __stdcall CWbemProviderGlue::IsDerivedFrom(unsigned short const *,unsigned short const *,class MethodContext *,unsigned short const *)",
    "public: virtual long __stdcall CWbemProviderGlue::ExecNotificationQueryAsync(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: int __thiscall WBEMTimeSpan::operator!=(class WBEMTimeSpan const &)const",
    "public: __thiscall Provider::Provider(class Provider const &)",
    "public: bool __thiscall CInstance::SetDateTime(unsigned short const *,class WBEMTime const &)",
    "public: __thiscall CAutoEvent::~CAutoEvent(void)",
    "public: class ProviderLog & __thiscall ProviderLog::operator=(class ProviderLog const &)",
    "public: void __thiscall CHPtrArray::SetAtGrow(int,void *)",
    "public: unsigned short * __thiscall WBEMTime::GetBSTR(void)const",
    "public: long __thiscall CRegistry::DeleteValue(unsigned short const *)",
    "public: void __cdecl CHString::FormatMessageW(unsigned short const *,...)",
    "public: __thiscall ParsedObjectPath::~ParsedObjectPath(void)",
    "public: long __thiscall CFrameworkQuery::Init(struct ParsedObjectPath *,struct IWbemContext *,unsigned short const *,class CHString &)",
    "public: __thiscall KeyRef::~KeyRef(void)",
    "public: __thiscall CHStringArray::CHStringArray(void)",
    "public: static long __stdcall CWbemProviderGlue::FillInstance(class MethodContext *,class CInstance *)",
    "public: int __thiscall CHStringArray::GetUpperBound(void)const",
    "public: void __thiscall CHStringArray::Copy(class CHStringArray const &)",
    "protected: static long __stdcall CWbemProviderGlue::IncrementMapCount(long *)",
    "public: unsigned long __thiscall CRegistry::GetLongestValueName(void)",
    "public: int __thiscall ParsedObjectPath::IsObject(void)",
    "public: __thiscall CFrameworkQuery::CFrameworkQuery(class CFrameworkQuery const &)",
    "public: virtual long __stdcall CWbemProviderGlue::ExecQueryAsync(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: __thiscall KeyRef::KeyRef(void)",
    "public: static void __stdcall CWbemProviderGlue::IncrementObjectCount(void)",
    "public: virtual long __stdcall CWbemProviderGlue::ExecNotificationQuery(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IEnumWbemClassObject * *)",
    "public: __thiscall CHString::CHString(unsigned short,int)",
    "private: static void __stdcall CWbemProviderGlue::UnInit(void)",
    "private: void __thiscall CRegistry::CloseSubKey(void)",
    "public: int __thiscall ParsedObjectPath::IsRelative(unsigned short const *,unsigned short const *)",
    "public: static unsigned long __stdcall CWbemProviderGlue::GetOSMajorVersion(void)",
    "public: bool __thiscall CInstance::IsNull(unsigned short const *)const",
    "public: virtual long __thiscall CFrameworkQueryEx::InitEx(unsigned short * const,unsigned short * const,long,class CHString &)",
    "public: bool __thiscall WBEMTime::IsOk(void)const",
    "private: void __thiscall CFrameworkQuery::Reset(void)",
    "public: __thiscall CHString::operator unsigned short const *(void)const",
    "private: static void * CWinMsgEvent::mg_hThreadPumpHandle",
    "public: int __thiscall WBEMTime::operator<=(class WBEMTime const &)const",
    "private: int __thiscall CObjectPathParser::ns_list_rest(void)",
    "protected: bool __thiscall Provider::SetCreationClassName(class CInstance *)",
    "public: __thiscall WBEMTime::WBEMTime(struct tm const &)",
    "public: static long __stdcall WBEMTime::GetLocalOffsetForDate(struct _SYSTEMTIME const *)",
    "public: __thiscall CHString::~CHString(void)",
    "public: long __thiscall CRegistry::OpenAndEnumerateSubKeys(struct HKEY__ *,unsigned short const *,unsigned long)",
    "public: int __thiscall WBEMTime::operator<(class WBEMTime const &)const",
    "private: long __thiscall Provider::GetObject(struct ParsedObjectPath *,class MethodContext *,long)",
    "public: __thiscall KeyRef::KeyRef(unsigned short const *,struct tagVARIANT const *)",
    "public: void * __thiscall CHPtrArray::operator[](int)const",
    "public: bool __thiscall CInstance::GetStringArray(unsigned short const *,struct tagSAFEARRAY * &)const",
    "public: void __thiscall CHStringArray::InsertAt(int,class CHStringArray *)",
    "public: long __thiscall CFrameworkQuery::GetValuesForProp(unsigned short const *,class CHStringArray &)",
    "public: void __cdecl CHString::Format(unsigned int,...)",
    "class ProviderLog captainsLog",
    "public: bool __thiscall CInstance::GetWBEMINT16(unsigned short const *,short &)const",
    "public: __thiscall CreateMutexAsProcess::CreateMutexAsProcess(unsigned short const *)",
    "public: virtual long __stdcall CWbemProviderGlue::CreateClassEnumAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: bool __thiscall CInstance::GetWBEMINT64(unsigned short const *,class CHString &)const",
    "public: void __thiscall CHString::Empty(void)",
    "public: class CHPtrArray & __thiscall CHPtrArray::operator=(class CHPtrArray const &)",
    "public: void __thiscall CRegistry::RewindSubKeys(void)",
    "public: virtual unsigned long __stdcall CWbemGlueFactory::AddRef(void)",
    "const CInstance::`vftable'",
    "public: int __thiscall WBEMTimeSpan::Gettime_t(long *)const",
    "public: virtual unsigned long __stdcall CWbemProviderGlue::AddRef(void)",
    "public: unsigned short * __thiscall CRegistry::GetClassNameW(void)",
    "private: long __thiscall CRegistry::myRegSetValueEx(struct HKEY__ *,unsigned short const *,unsigned long,unsigned long,unsigned char const *,unsigned long)",
    "private: static void __stdcall CWbemProviderGlue::LockProviderMap(void)",
    "public: struct ParsedObjectPath & __thiscall ParsedObjectPath::operator=(struct ParsedObjectPath const &)",
    "public: int __thiscall ParsedObjectPath::SetClassName(unsigned short const *)",
    "public: void __thiscall ParsedObjectPath::ClearKeys(void)",
    "public: bool __thiscall CInstance::SetCharSplat(unsigned short const *,unsigned long)",
    "public: virtual long __stdcall CWbemProviderGlue::DeleteClassAsync(unsigned short * const,long,struct IWbemContext *,struct IWbemObjectSink *)",
    "public: static long __stdcall CWbemProviderGlue::GetInstancesByQueryAsynch(unsigned short const *,class Provider *,long (__stdcall*)(class Provider *,class CInstance *,class MethodContext *,void *),unsigned short const *,class MethodContext *,void *)",
    "private: static class Provider * __stdcall CWbemProviderGlue::SearchMapForProvider(unsigned short const *,unsigned short const *)",
    "private: static struct IWbemClassObject * CWbemProviderGlue::m_pStatusObject",
    "public: virtual long __stdcall CWbemProviderGlue::ExecMethodAsync(unsigned short * const,unsigned short * const,long,struct IWbemContext *,struct IWbemClassObject *,struct IWbemObjectSink *)",
    "public: class CHStringArray & __thiscall CHStringArray::operator=(class CHStringArray const &)",
    "public: void __thiscall CHStringArray::RemoveAt(int,int)",
    "protected: static long * __stdcall CWbemProviderGlue::GetMapCountPtr(class CWbemGlueFactory const *)",
    "public: int __thiscall ParsedObjectPath::AddKeyRef(unsigned short const *,struct tagVARIANT const *)",
    "protected: void __thiscall CInstance::LogError(unsigned short const *,unsigned short const *,unsigned short const *,long)const",
    "private: static unsigned long CRegistry::s_dwPlatform",
    "public: __thiscall CFrameworkQuery::~CFrameworkQuery(void)",
    "public: int __thiscall CRegistrySearch::SearchAndBuildList(class CHString,class CHPtrArray &,class CHString,class CHString,int,struct HKEY__ *)",
    "public: int __thiscall CThreadBase::BeginRead(unsigned long)",
    "private: static void __stdcall CWbemProviderGlue::GetComputerNameW(class CHString &)",
    "public: bool __thiscall CFrameworkQuery::KeysOnly(void)",
    "public: unsigned short * __thiscall CHString::LockBuffer(void)",
    "public: __thiscall CFrameworkQueryEx::~CFrameworkQueryEx(void)",
    "public: struct HKEY__ * __thiscall CRegistry::GethKey(void)",
    "public: void __thiscall WBEMTimeSpan::Clear(void)",
    "protected: class CHString const & __thiscall Provider::GetLocalComputerName(void)",
    "public: class CHString const & __thiscall CHString::operator=(class CHString const &)",
    "private: long __thiscall CRegistry::myRegEnumKey(struct HKEY__ *,unsigned long,unsigned short *,unsigned long)",
    "public: class CreateMutexAsProcess & __thiscall CreateMutexAsProcess::operator=(class CreateMutexAsProcess const &)",
    "public: static long __stdcall CWbemProviderGlue::DecrementObjectCount(void)",
    "private: static class CAutoEvent CWinMsgEvent::mg_aeCreateWindow",
    "public: void __thiscall CHStringArray::InsertAt(int,unsigned short const *,int)",
    "public: static long __stdcall CWbemProviderGlue::GetInstancesByQuery(unsigned short const *,class TRefPointerCollection *,class MethodContext *,unsigned short const *)",
    "protected: static int __stdcall CHString::SafeStrlen(unsigned short const *)",
    "public: __thiscall WBEMTime::WBEMTime(long const &)",
    "public: void __thiscall CHString::UnlockBuffer(void)",
    "public: __thiscall CAutoEvent::CAutoEvent(void)",
    "public: unsigned short * __thiscall CHString::AllocSysString(void)const",
    "public: int __thiscall ParsedObjectPath::IsLocal(unsigned short const *)"
  ],
  "fthsvc.dll": [
    "FthSysprepSpecialize",
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "fundisc.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "fveRecover.dll": [
    "FveRecoverWizard",
    "public: __thiscall VolumeFveStatus::VolumeFveStatus(unsigned long,long)",
    "public: long __thiscall VolumeFveStatus::GetLastConvertStatus(void)",
    "public: class BuiVolume & __thiscall BuiVolume::operator=(class BuiVolume const &)",
    "public: bool __thiscall VolumeFveStatus::IsOn(void)",
    "public: bool __thiscall VolumeFveStatus::IsDecrypted(void)",
    "public: bool __thiscall VolumeFveStatus::NeedsRestart(void)",
    "public: bool __thiscall VolumeFveStatus::IsFveNotifyNecessary(void)",
    "public: bool __thiscall VolumeFveStatus::HasRecoveryPassword(void)",
    "public: bool __thiscall VolumeFveStatus::HasSmartCardProtector(void)",
    "public: bool __thiscall VolumeFveStatus::HasExternalKey(void)",
    "public: bool __thiscall VolumeFveStatus::IsOsVolume(void)",
    "public: class VolumeFveStatus & __thiscall VolumeFveStatus::operator=(class VolumeFveStatus const &)",
    "public: bool __thiscall VolumeFveStatus::IsSecure(void)",
    "public: bool __thiscall VolumeFveStatus::IsDisabled(void)",
    "public: bool __thiscall VolumeFveStatus::HasPassphraseProtector(void)",
    "public: bool __thiscall VolumeFveStatus::IsEncrypted(void)",
    "public: bool __thiscall VolumeFveStatus::IsPartiallyConverted(void)",
    "public: unsigned long __thiscall VolumeFveStatus::GetStatusFlags(void)",
    "public: bool __thiscall VolumeFveStatus::FailedDryRun(void)",
    "public: bool __thiscall VolumeFveStatus::IsDecrypting(void)",
    "public: bool __thiscall VolumeFveStatus::IsConverting(void)",
    "protected: __thiscall VolumeFveStatus::VolumeFveStatus(void)",
    "public: static unsigned int const BuiVolume::NO_DRIVE_LETTER",
    "public: bool __thiscall VolumeFveStatus::HasStartupKeyProtector(void)",
    "public: bool __thiscall VolumeFveStatus::IsPaused(void)",
    "public: bool __thiscall VolumeFveStatus::HasRecoveryData(void)",
    "public: bool __thiscall VolumeFveStatus::IsEncrypting(void)",
    "public: bool __thiscall VolumeFveStatus::IsLocked(void)",
    "public: bool __thiscall VolumeFveStatus::HasTpmProtector(void)",
    "public: bool __thiscall VolumeFveStatus::HasPinProtector(void)",
    "public: bool __thiscall VolumeFveStatus::IsRoamingDevice(void)"
  ],
  "fveapi.dll": [
    "FveConversionPause",
    "FveDiscardChanges",
    "FveConversionStopEx",
    "FveAuthElementReadExternalKeyW",
    "FveEnableRawAccess",
    "FveAuthElementToRecoveryPasswordW",
    "FveIsBoundDataVolume",
    "FveOpenVolumeW",
    "FveClearUserFlags",
    "FveConversionEncryptPendingReboot",
    "FveDraCertPresentInRegistry",
    "FveIsRecoveryPasswordValidW",
    "FveCloseVolume",
    "FveSetAllowKeyExport",
    "FveIsHybridVolumeW",
    "FveAuthElementWriteExternalKeyW",
    "FveEnableRawAccessEx",
    "FveGetKeyPackage",
    "FveCheckTpmCapability",
    "FveEnableRawAccessW",
    "FveKeyManagement",
    "FveIsHardwareReadyForConversion",
    "FveConversionStop",
    "FveGetAllowKeyExport",
    "FveGetAuthMethodGuids",
    "FveAuthElementFromPassPhraseW",
    "FveIsVolumeEncryptable",
    "FveUpgradeVolume",
    "FveAuthElementGetKeyFileNameW",
    "FveUnbindDataVolume",
    "FveAttemptAutoUnlock",
    "FveIsBoundDataVolumeToOSVolume",
    "FveAuthElementFromPinW",
    "FveEraseDrive",
    "FveGetUserFlags",
    "FveIsAnyDataVolumeBoundToOSVolume",
    "FveUnlockVolume",
    "FveUpdatePinW",
    "FveGetAuthMethodInformation",
    "FveRevertVolume",
    "FveGetFveMethod",
    "FveConversionResume",
    "FveGetStatusW",
    "FveBackupRecoveryInformationToAD",
    "FveSetUserFlags",
    "FveSetFveMethod",
    "FveDeleteAuthMethod",
    "FveLockVolume",
    "FveApplyGroupPolicy",
    "InternalFveIsVolumeEncrypted",
    "FveAddAuthMethodInformation",
    "FveBindDataVolume",
    "FveAuthElementFromRecoveryPasswordW",
    "FveGetDescriptionW",
    "FveGetFipsAllowDisabled",
    "FveServiceDiscoveryVolume",
    "FveUnbindAllDataVolumeFromOSVolume",
    "FveGetIdentificationFieldW",
    "FveIsHybridVolume",
    "FveCommitChanges",
    "FveNotifyVolumeAfterFormat",
    "FveIsRecoveryPasswordGroupValidW",
    "FveInitVolume",
    "FveNeedsDiscoveryVolumeUpdate",
    "FveGetDataSet",
    "FveSetFipsAllowDisabled",
    "FveGetStatus",
    "FveSetDescriptionW",
    "FveGetIdentity",
    "FveSetIdentificationFieldW",
    "FveUnlockVolumeWithAccessMode",
    "FveConversionDecrypt",
    "FveConversionEncrypt"
  ],
  "fveapibase.dll": [
    "FveConversionPause",
    "FveDiscardChanges",
    "FveConversionStopEx",
    "FveAuthElementReadExternalKeyW",
    "FveEnableRawAccess",
    "FveAuthElementToRecoveryPasswordW",
    "FveOpenVolumeW",
    "FveClearUserFlags",
    "FveIsRecoveryPasswordValidW",
    "FveCloseVolume",
    "FveSetAllowKeyExport",
    "FveAuthElementWriteExternalKeyW",
    "FveGetKeyPackage",
    "FveIsHardwareReadyForConversion",
    "FveConversionStop",
    "FveGetAllowKeyExport",
    "FveGetAuthMethodGuids",
    "FveAuthElementFromPassPhraseW",
    "FveIsVolumeEncryptable",
    "FveUpgradeVolume",
    "FveAuthElementGetKeyFileNameW",
    "FveAuthElementFromPinW",
    "FveEraseDrive",
    "FveGetUserFlags",
    "FveGetAuthMethodInformation",
    "FveRevertVolume",
    "FveGetFveMethod",
    "FveConversionResume",
    "FveGetStatusW",
    "FveSetUserFlags",
    "FveSetFveMethod",
    "FveLockVolume",
    "InternalFveIsVolumeEncrypted",
    "FveAuthElementFromRecoveryPasswordW",
    "FveGetFipsAllowDisabled",
    "FveNotifyVolumeAfterFormat",
    "FveCommitChanges",
    "FveIsRecoveryPasswordGroupValidW",
    "FveGetDataSet",
    "FveSetFipsAllowDisabled",
    "FveGetStatus",
    "FveGetIdentity",
    "FveConversionDecrypt"
  ],
  "fvecerts.dll": [
    "FveCertIsValidCertInfo",
    "FveCertGetCertHashFromCertContext",
    "FveCertFilterForValidCertificates",
    "FveCertIsAlternateCert",
    "FveCertGetPublicKeyHandle",
    "FveCertFreeCertInfo",
    "FveCertFindValidCertificates",
    "FveCertGetCertContextFromCert",
    "FveCertGetCertContextFromPfx",
    "FveCertCreateCertInfo",
    "FveCertCanCertificateBeAdded",
    "FveCertGetPrivateKeyHandle"
  ],
  "fvecpl.dll": [
    "public: __thiscall VolumeFveStatus::VolumeFveStatus(unsigned long,long)",
    "public: class BuiVolume & __thiscall BuiVolume::operator=(class BuiVolume const &)",
    "public: long __thiscall VolumeFveStatus::GetLastConvertStatus(void)",
    "public: bool __thiscall VolumeFveStatus::IsOn(void)",
    "public: bool __thiscall VolumeFveStatus::IsDecrypted(void)",
    "public: bool __thiscall VolumeFveStatus::NeedsRestart(void)",
    "public: bool __thiscall VolumeFveStatus::IsFveNotifyNecessary(void)",
    "DllRegisterServer",
    "public: bool __thiscall VolumeFveStatus::HasRecoveryPassword(void)",
    "public: bool __thiscall VolumeFveStatus::HasSmartCardProtector(void)",
    "public: bool __thiscall VolumeFveStatus::HasExternalKey(void)",
    "public: bool __thiscall VolumeFveStatus::IsOsVolume(void)",
    "public: class VolumeFveStatus & __thiscall VolumeFveStatus::operator=(class VolumeFveStatus const &)",
    "public: bool __thiscall VolumeFveStatus::IsSecure(void)",
    "DllUnregisterServer",
    "public: bool __thiscall VolumeFveStatus::IsDisabled(void)",
    "public: bool __thiscall VolumeFveStatus::HasPassphraseProtector(void)",
    "public: bool __thiscall VolumeFveStatus::IsEncrypted(void)",
    "public: bool __thiscall VolumeFveStatus::IsPartiallyConverted(void)",
    "public: unsigned long __thiscall VolumeFveStatus::GetStatusFlags(void)",
    "public: bool __thiscall VolumeFveStatus::FailedDryRun(void)",
    "public: bool __thiscall VolumeFveStatus::IsDecrypting(void)",
    "public: bool __thiscall VolumeFveStatus::IsConverting(void)",
    "protected: __thiscall VolumeFveStatus::VolumeFveStatus(void)",
    "public: static unsigned int const BuiVolume::NO_DRIVE_LETTER",
    "public: bool __thiscall VolumeFveStatus::HasStartupKeyProtector(void)",
    "public: bool __thiscall VolumeFveStatus::IsPaused(void)",
    "public: bool __thiscall VolumeFveStatus::HasRecoveryData(void)",
    "DllCanUnloadNow",
    "public: bool __thiscall VolumeFveStatus::IsEncrypting(void)",
    "public: bool __thiscall VolumeFveStatus::IsLocked(void)",
    "public: bool __thiscall VolumeFveStatus::HasTpmProtector(void)",
    "DllGetClassObject",
    "public: bool __thiscall VolumeFveStatus::HasPinProtector(void)",
    "public: bool __thiscall VolumeFveStatus::IsRoamingDevice(void)"
  ],
  "fveui.dll": [
    "DllCanUnloadNow",
    "FveuiUserSelectSmartCard",
    "DllGetClassObject",
    "FveuiUserSelectCert"
  ],
  "fvewiz.dll": [
    "public: __thiscall VolumeFveStatus::VolumeFveStatus(unsigned long,long)",
    "public: class BuiVolume & __thiscall BuiVolume::operator=(class BuiVolume const &)",
    "public: long __thiscall VolumeFveStatus::GetLastConvertStatus(void)",
    "public: bool __thiscall VolumeFveStatus::IsOn(void)",
    "public: bool __thiscall VolumeFveStatus::IsDecrypted(void)",
    "public: bool __thiscall VolumeFveStatus::NeedsRestart(void)",
    "public: bool __thiscall VolumeFveStatus::IsFveNotifyNecessary(void)",
    "public: bool __thiscall VolumeFveStatus::HasRecoveryPassword(void)",
    "public: bool __thiscall VolumeFveStatus::HasSmartCardProtector(void)",
    "public: bool __thiscall VolumeFveStatus::HasExternalKey(void)",
    "public: bool __thiscall VolumeFveStatus::IsOsVolume(void)",
    "public: class VolumeFveStatus & __thiscall VolumeFveStatus::operator=(class VolumeFveStatus const &)",
    "public: bool __thiscall VolumeFveStatus::IsSecure(void)",
    "FveuiWizard",
    "public: bool __thiscall VolumeFveStatus::IsDisabled(void)",
    "public: bool __thiscall VolumeFveStatus::HasPassphraseProtector(void)",
    "public: bool __thiscall VolumeFveStatus::IsEncrypted(void)",
    "FveuipClearFveWizOnStartup",
    "public: bool __thiscall VolumeFveStatus::IsPartiallyConverted(void)",
    "public: unsigned long __thiscall VolumeFveStatus::GetStatusFlags(void)",
    "public: bool __thiscall VolumeFveStatus::FailedDryRun(void)",
    "public: bool __thiscall VolumeFveStatus::IsDecrypting(void)",
    "public: bool __thiscall VolumeFveStatus::IsConverting(void)",
    "protected: __thiscall VolumeFveStatus::VolumeFveStatus(void)",
    "public: static unsigned int const BuiVolume::NO_DRIVE_LETTER",
    "public: bool __thiscall VolumeFveStatus::HasStartupKeyProtector(void)",
    "public: bool __thiscall VolumeFveStatus::IsPaused(void)",
    "public: bool __thiscall VolumeFveStatus::HasRecoveryData(void)",
    "public: bool __thiscall VolumeFveStatus::IsEncrypting(void)",
    "public: bool __thiscall VolumeFveStatus::IsLocked(void)",
    "public: bool __thiscall VolumeFveStatus::HasTpmProtector(void)",
    "public: bool __thiscall VolumeFveStatus::HasPinProtector(void)",
    "public: bool __thiscall VolumeFveStatus::IsRoamingDevice(void)"
  ],
  "fwcfg.dll": [
    "InitHelperDll"
  ],
  "GameUXLegacyGDFs.dll": "No exports",
  "Groupinghc.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "gacinstall.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "gameux.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "GameUXShimW"
  ],
  "gcdef.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "gdi32.dll": [
    "TextOutA",
    "BitBlt",
    "GetRegionData",
    "GetGraphicsMode",
    "EnumFontFamiliesW",
    "GdiEntry9",
    "DdEntry39",
    "EngCreateDeviceBitmap",
    "HT_Get8BPPMaskPalette",
    "GetGlyphOutline",
    "GetColorAdjustment",
    "DdEntry19",
    "ResetDCW",
    "DdEntry45",
    "PolylineTo",
    "DdEntry17",
    "DdEntry42",
    "CreatePolygonRgn",
    "UpdateColors",
    "D3DKMTCheckExclusiveOwnership",
    "BRUSHOBJ_pvGetRbrush",
    "EngQueryEMFInfo",
    "DdEntry30",
    "GdiGetCharDimensions",
    "bInitSystemAndFontsDirectoriesW",
    "GdiReleaseLocalDC",
    "D3DKMTCheckVidPnExclusiveOwnership",
    "MoveToEx",
    "D3DKMTGetRuntimeData",
    "D3DKMTDestroyKeyedMutex",
    "GetObjectType",
    "GdiPlayScript",
    "PolyBezier",
    "CreateDIBPatternBrush",
    "CreateScalableFontResourceW",
    "DdEntry34",
    "GetColorSpace",
    "D3DKMTUnlock",
    "RemoveFontResourceTracking",
    "DdEntry23",
    "SetICMMode",
    "EngStretchBltROP",
    "AddFontResourceTracking",
    "CreateDiscardableBitmap",
    "EndPage",
    "GdiPlayDCScript",
    "PtInRegion",
    "GetArcDirection",
    "GetTextFaceA",
    "EngDeleteSemaphore",
    "DdEntry6",
    "SetDIBColorTable",
    "MaskBlt",
    "CreateDIBSection",
    "SetBrushOrgEx",
    "GdiRealizationInfo",
    "D3DKMTSetProcessSchedulingPriorityClass",
    "GetViewportExtEx",
    "SetBrushAttributes",
    "D3DKMTDestroyContext",
    "D3DKMTUpdateOverlay",
    "DPtoLP",
    "EndFormPage",
    "EngAlphaBlend",
    "GdiCleanCacheDC",
    "CreateOPMProtectedOutputs",
    "GetDCOrgEx",
    "StretchBlt",
    "FONTOBJ_pvTrueTypeFontFile",
    "D3DKMTCreateSynchronizationObject",
    "GdiConvertFont",
    "SetBitmapBits",
    "ScaleViewportExtEx",
    "DdEntry41",
    "D3DKMTSharedPrimaryLockNotification",
    "GdiIsScreenDC",
    "PathToRegion",
    "SetWindowExtEx",
    "EngComputeGlyphSet",
    "SetLayout",
    "SetMetaFileBitsEx",
    "GdiConsoleTextOut",
    "BeginPath",
    "DDCCISaveCurrentSettings",
    "AddFontResourceExW",
    "GetRasterizerCaps",
    "GetBoundsRect",
    "EngBitBlt",
    "RemoveFontResourceExW",
    "DdEntry36",
    "CreateHalftonePalette",
    "GetTextAlign",
    "SetBkColor",
    "FillRgn",
    "SetMetaRgn",
    "SetBitmapAttributes",
    "SetColorAdjustment",
    "GetLogColorSpaceA",
    "ChoosePixelFormat",
    "GetICMProfileW",
    "GdiFixUpHandle",
    "DDCCIGetCapabilitiesString",
    "GetCharWidthW",
    "GetTextFaceAliasW",
    "GdiEntry10",
    "DdNotifyFullscreenSpriteUpdate",
    "GetPhysicalMonitorDescription",
    "EngGetPrinterDataFileName",
    "GetStockObject",
    "EndDoc",
    "GetSystemPaletteEntries",
    "IsValidEnhMetaRecordOffExt",
    "RoundRect",
    "EnumFontFamiliesExA",
    "DdEntry18",
    "SetBoundsRect",
    "StrokeAndFillPath",
    "DdEntry46",
    "GdiSwapBuffers",
    "EngCopyBits",
    "GetMetaFileW",
    "DdEntry9",
    "EndGdiRendering",
    "GetKerningPairs",
    "GetSuggestedOPMProtectedOutputArraySize",
    "GdiConvertBitmapV5",
    "GdiConvertBrush",
    "GetCharWidthFloatA",
    "PATHOBJ_bEnum",
    "DdEntry24",
    "CombineRgn",
    "GetPixelFormat",
    "GdiPlayJournal",
    "GetGlyphOutlineWow",
    "QueryFontAssocStatus",
    "SetDIBits",
    "CreateMetaFileA",
    "PATHOBJ_vGetBounds",
    "CreateEllipticRgn",
    "SetColorSpace",
    "GetTextMetricsW",
    "GetStringBitmapA",
    "DdEntry14",
    "CreatePen",
    "CreateRectRgnIndirect",
    "DdEntry26",
    "GetEnhMetaFileDescriptionW",
    "CopyMetaFileA",
    "EnumFontsW",
    "GdiPlayPageEMF",
    "GetRgnBox",
    "CreateDCA",
    "DDCCIGetTimingReport",
    "DdEntry40",
    "PlayEnhMetaFile",
    "ExtCreatePen",
    "GdiValidateHandle",
    "PlayEnhMetaFileRecord",
    "GdiEntry5",
    "SelectFontLocal",
    "GetCharABCWidthsI",
    "GetCurrentObject",
    "UnloadNetworkFonts",
    "GetETM",
    "LineDDA",
    "SetPolyFillMode",
    "PolyBezierTo",
    "FONTOBJ_pQueryGlyphAttrs",
    "STROBJ_bGetAdvanceWidths",
    "D3DKMTWaitForIdle",
    "SetTextJustification",
    "SetROP2",
    "SetPaletteEntries",
    "FontIsLinked",
    "D3DKMTDestroySynchronizationObject",
    "GdiDeleteLocalDC",
    "GetCharABCWidthsW",
    "GetTextExtentPointW",
    "GetOPMInformation",
    "GetFontData",
    "GetCharABCWidthsFloatA",
    "DDCCIGetCapabilitiesStringLength",
    "D3DKMTOpenSynchronizationObject",
    "GetCharABCWidthsFloatW",
    "GetWorldTransform",
    "D3DKMTGetDeviceState",
    "CreateFontA",
    "DdEntry50",
    "XFORMOBJ_bApplyXform",
    "GdiGetDC",
    "EngUnicodeToMultiByteN",
    "EudcUnloadLinkW",
    "EngStrokePath",
    "FlattenPath",
    "XLATEOBJ_piVector",
    "GetEnhMetaFilePaletteEntries",
    "PolyPolygon",
    "EngAssociateSurface",
    "DdEntry3",
    "GdiAddFontResourceW",
    "GetPolyFillMode",
    "LineTo",
    "EngLockSurface",
    "EngFreeModule",
    "GetOutlineTextMetricsW",
    "GdiConvertPalette",
    "GetNearestColor",
    "StartDocW",
    "D3DKMTSetDisplayPrivateDriverFormat",
    "PtVisible",
    "EnumFontFamiliesExW",
    "CreatePatternBrush",
    "EnumMetaFile",
    "D3DKMTOpenAdapterFromGdiDisplayName",
    "FONTOBJ_pifi",
    "AnimatePalette",
    "GdiResetDCEMF",
    "GetRandomRgn",
    "CreateFontIndirectW",
    "EudcLoadLinkW",
    "ExtFloodFill",
    "SetGraphicsMode",
    "PolyTextOutA",
    "GdiGetSpoolFileHandle",
    "D3DKMTConfigureSharedResource",
    "Escape",
    "DeleteObject",
    "DdEntry1",
    "EngStrokeAndFillPath",
    "FONTOBJ_cGetGlyphs",
    "GdiEntry6",
    "D3DKMTSharedPrimaryUnLockNotification",
    "CreateRoundRectRgn",
    "GdiEntry8",
    "D3DKMTSignalSynchronizationObject",
    "OffsetRgn",
    "SetPixelV",
    "GetEUDCTimeStamp",
    "AbortDoc",
    "GdiEntry13",
    "GetCharWidthI",
    "GdiGetPageHandle",
    "GetStretchBltMode",
    "AddFontResourceA",
    "EngCreateSemaphore",
    "BRUSHOBJ_pvAllocRbrush",
    "D3DKMTCloseAdapter",
    "FrameRgn",
    "D3DKMTCreateDCFromMemory",
    "GdiEntry4",
    "D3DKMTOpenAdapterFromDeviceName",
    "DdEntry21",
    "GetCertificateSize",
    "GdiConvertEnhMetaFile",
    "GdiConvertMetaFilePict",
    "ModifyWorldTransform",
    "GetNearestPaletteIndex",
    "Polyline",
    "SetStretchBltMode",
    "GdiConvertRegion",
    "D3DKMTGetMultisampleMethodList",
    "SelectObject",
    "GdiEndPageEMF",
    "GetTextCharsetInfo",
    "CreateICA",
    "PATHOBJ_vEnumStartClipLines",
    "Chord",
    "DdEntry22",
    "Polygon",
    "GdiDeleteSpoolFileHandle",
    "GetTextExtentExPointW",
    "D3DKMTGetScanLine",
    "SelectClipRgn",
    "EnableEUDC",
    "ArcTo",
    "GetBrushAttributes",
    "EnumObjects",
    "D3DKMTGetDisplayModeList",
    "GetWindowExtEx",
    "GetCharABCWidthsA",
    "Rectangle",
    "DescribePixelFormat",
    "GdiAlphaBlend",
    "AngleArc",
    "DdEntry44",
    "GetCharWidthInfo",
    "Arc",
    "GetCertificate",
    "EngStretchBlt",
    "DdEntry47",
    "GetTextFaceW",
    "PatBlt",
    "CreateEllipticRgnIndirect",
    "EngMultiByteToWideChar",
    "CancelDC",
    "GetMetaRgn",
    "D3DKMTCreateDevice",
    "GetFontFileData",
    "CreatePenIndirect",
    "SelectClipPath",
    "BRUSHOBJ_hGetColorTransform",
    "XLATEOBJ_iXlate",
    "GetBkMode",
    "TextOutW",
    "DdEntry32",
    "D3DKMTInvalidateActiveVidPn",
    "ClearBitmapAttributes",
    "GdiDescribePixelFormat",
    "IntersectClipRect",
    "GetFontRealizationInfo",
    "GetMapMode",
    "gdiPlaySpoolStream",
    "D3DKMTCreateOverlay",
    "GetEnhMetaFileA",
    "StrokePath",
    "GdiConvertToDevmodeW",
    "GdiInitSpool",
    "GetWindowOrgEx",
    "D3DKMTOpenKeyedMutex",
    "GdiPlayPrivatePageEMF",
    "CreatePolyPolygonRgn",
    "GetWinMetaFileBits",
    "DestroyPhysicalMonitorInternal",
    "EngCreatePalette",
    "GetFontAssocStatus",
    "DdQueryVisRgnUniqueness",
    "D3DKMTDestroyDCFromMemory",
    "D3DKMTSetVidPnSourceOwner",
    "GdiQueryTable",
    "DdEntry28",
    "GetTextMetricsA",
    "CreateFontW",
    "GdiAddGlsBounds",
    "GetMetaFileA",
    "GetViewportOrgEx",
    "SetSystemPaletteUse",
    "EngDeleteSurface",
    "ClearBrushAttributes",
    "AddFontResourceW",
    "EngDeletePath",
    "EngDeletePalette",
    "DdEntry52",
    "SetRectRgn",
    "EngEraseSurface",
    "D3DKMTGetContextSchedulingPriority",
    "GetPaletteEntries",
    "D3DKMTSignalSynchronizationObject2",
    "DdEntry56",
    "GetStringBitmapW",
    "GdiEntry12",
    "GetEnhMetaFileHeader",
    "XFORMOBJ_iGetXform",
    "CreateBitmapFromDxSurface",
    "DdDestroyFullscreenSprite",
    "CreateFontIndirectExA",
    "GetGlyphIndicesA",
    "DDCCISetVCPFeature",
    "GdiReleaseDC",
    "D3DKMTOpenResource2",
    "DrawEscape",
    "GdiSetLastError",
    "GetEUDCTimeStampExW",
    "CLIPOBJ_bEnum",
    "DeleteEnhMetaFile",
    "GetFontLanguageInfo",
    "GdiGetCodePage",
    "DeleteDC",
    "GetTextExtentPoint32A",
    "DDCCIGetVCPFeature",
    "CreateFontIndirectA",
    "DdEntry31",
    "GdiPrinterThunk",
    "DdEntry20",
    "D3DKMTLock",
    "PolyPatBlt",
    "SetRelAbs",
    "STROBJ_dwGetCodePage",
    "D3DKMTGetSharedPrimaryHandle",
    "PolyPolyline",
    "GdiGetLocalBrush",
    "EngCheckAbort",
    "CreateBitmap",
    "GetOPMRandomNumber",
    "SetWindowOrgEx",
    "GdiEntry16",
    "GdiGetLocalFont",
    "D3DKMTSetQueuedLimit",
    "EnumICMProfilesW",
    "FONTOBJ_vGetInfo",
    "GetTextExtentExPointWPri",
    "SetWorldTransform",
    "DdEntry4",
    "SetAbortProc",
    "GetNumberOfPhysicalMonitors",
    "DeviceCapabilitiesExA",
    "DeleteColorSpace",
    "GetEnhMetaFilePixelFormat",
    "EngWideCharToMultiByte",
    "GetCharWidthA",
    "DdEntry33",
    "GetLogColorSpaceW",
    "AddFontResourceExA",
    "ExtEscape",
    "D3DKMTDestroyDevice",
    "D3DKMTAcquireKeyedMutex",
    "StartPage",
    "GdiConvertBitmap",
    "CreateRectRgn",
    "GdiIsMetaPrintDC",
    "EngDeleteClip",
    "DdEntry11",
    "GetCOPPCompatibleOPMInformation",
    "DdEntry53",
    "D3DKMTOpenAdapterFromHdc",
    "GetCharWidth32W",
    "STROBJ_bEnum",
    "UpdateICMRegKeyA",
    "GetAspectRatioFilterEx",
    "SetEnhMetaFileBits",
    "DeleteMetaFile",
    "PolyDraw",
    "SetPixel",
    "EnumFontsA",
    "RectInRegion",
    "GdiEntry14",
    "RectVisible",
    "BeginGdiRendering",
    "GdiSetServerAttr",
    "SetDCBrushColor",
    "InvertRgn",
    "DdEntry5",
    "CreateMetaFileW",
    "GetMetaFileBitsEx",
    "HT_Get8BPPFormatPalette",
    "CreateCompatibleDC",
    "SetBkMode",
    "CLIPOBJ_cEnumStart",
    "GdiCreateLocalEnhMetaFile",
    "GdiGetSpoolMessage",
    "D3DKMTEscape",
    "EnumICMProfilesA",
    "SetTextCharacterExtra",
    "DdCreateFullscreenSprite",
    "DdEntry27",
    "GetBitmapDimensionEx",
    "EqualRgn",
    "GetROP2",
    "GetTransform",
    "GdiStartDocEMF",
    "GdiGetDevmodeForPage",
    "cGetTTFFromFOT",
    "D3DKMTPresent",
    "DeviceCapabilitiesExW",
    "D3DKMTCheckOcclusion",
    "D3DKMTCreateAllocation2",
    "CreateBitmapIndirect",
    "EngGradientFill",
    "EnumEnhMetaFile",
    "DdEntry12",
    "ExtTextOutA",
    "TranslateCharsetInfo",
    "GetDCPenColor",
    "FONTOBJ_cGetAllGlyphHandles",
    "EngTextOut",
    "WidenPath",
    "DdEntry49",
    "D3DKMTSetGammaRamp",
    "D3DKMTCreateSynchronizationObject2",
    "GdiEntry7",
    "RemoveFontResourceExA",
    "EngMarkBandingSurface",
    "GetHFONT",
    "GdiFullscreenControl",
    "EngCreateClip",
    "EngLoadModule",
    "DdEntry10",
    "SwapBuffers",
    "OffsetWindowOrgEx",
    "SetBitmapDimensionEx",
    "GetFontResourceInfoW",
    "GetKerningPairsW",
    "DdEntry16",
    "ExtCreateRegion",
    "GdiConvertAndCheckDC",
    "GetPixel",
    "D3DKMTGetPresentHistory",
    "ExtTextOutW",
    "GdiComment",
    "XLATEOBJ_cGetPalette",
    "GetObjectA",
    "D3DKMTSetDisplayMode",
    "GetDeviceCaps",
    "PolyTextOutW",
    "CloseMetaFile",
    "GetCharWidth32A",
    "RemoveFontMemResourceEx",
    "SetICMProfileA",
    "EngGetCurrentCodePage",
    "CreateScalableFontResourceA",
    "EngAcquireSemaphore",
    "EngFillPath",
    "GdiSetPixelFormat",
    "GetKerningPairsA",
    "CreateEnhMetaFileA",
    "RemoveFontResourceA",
    "SetMagicColors",
    "GetEnhMetaFileW",
    "CloseFigure",
    "DdEntry37",
    "GetLayout",
    "GetBrushOrgEx",
    "bMakePathNameW",
    "GetFontUnicodeRanges",
    "DdEntry13",
    "D3DKMTOpenResource",
    "Pie",
    "EngFindResource",
    "StartDocA",
    "GetTextCharacterExtra",
    "FONTOBJ_pxoGetXform",
    "GdiEntry3",
    "GetGlyphOutlineA",
    "GetDIBits",
    "RealizePalette",
    "PlayMetaFileRecord",
    "SetViewportExtEx",
    "D3DKMTQueryResourceInfo",
    "SelectPalette",
    "SetVirtualResolution",
    "GetEnhMetaFileDescriptionA",
    "GetSystemPaletteUse",
    "XLATEOBJ_hGetColorTransform",
    "STROBJ_vEnumStart",
    "SetTextAlign",
    "GetClipRgn",
    "SetDCPenColor",
    "STROBJ_bEnumPositionsOnly",
    "EndPath",
    "D3DKMTCreateKeyedMutex",
    "StretchDIBits",
    "GetTextColor",
    "GetGlyphOutlineW",
    "D3DKMTDestroyAllocation",
    "AnyLinkedFonts",
    "FixBrushOrgEx",
    "D3DKMTCheckSharedResourceAccess",
    "D3DKMTCreateAllocation",
    "ExcludeClipRect",
    "SetWinMetaFileBits",
    "SetDIBitsToDevice",
    "PATHOBJ_bEnumClipLines",
    "GetOutlineTextMetricsA",
    "EngTransparentBlt",
    "GdiIsMetaFileDC",
    "DdEntry54",
    "EngCreateBitmap",
    "D3DKMTCreateContext",
    "CreateColorSpaceW",
    "RemoveFontResourceW",
    "DestroyOPMProtectedOutput",
    "GdiStartPageEMF",
    "CreateColorSpaceA",
    "DdEntry0",
    "CopyMetaFileW",
    "SetViewportOrgEx",
    "D3DKMTQueryStatistics",
    "CombineTransform",
    "GdiGetLocalDC",
    "GetTextExtentExPointA",
    "D3DKMTWaitForVerticalBlankEvent",
    "GdiTransparentBlt",
    "CreatePalette",
    "BRUSHOBJ_ulGetBrushColor",
    "GetCharacterPlacementW",
    "GetClipBox",
    "D3DKMTCheckMonitorPowerState",
    "D3DKMTQueryAdapterInfo",
    "GdiIsPlayMetafileDC",
    "SelectBrushLocal",
    "DdEntry7",
    "GetTextExtentExPointI",
    "SaveDC",
    "GetDCBrushColor",
    "DdEntry55",
    "SetArcDirection",
    "GdiEntry1",
    "EngLineTo",
    "D3DKMTSetAllocationPriority",
    "GetRelAbs",
    "CopyEnhMetaFileW",
    "PlayMetaFile",
    "GetBkColor",
    "GdiGetPageCount",
    "GetDeviceGammaRamp",
    "D3DKMTGetPresentQueueEvent",
    "D3DKMTRender",
    "IsValidEnhMetaRecord",
    "SetFontEnumeration",
    "GetEnhMetaFileBits",
    "D3DKMTGetProcessSchedulingPriorityClass",
    "CreateSolidBrush",
    "SetLayoutWidth",
    "GetICMProfileA",
    "GetMiterLimit",
    "ColorMatchToTarget",
    "GdiGetBitmapBitsSize",
    "RestoreDC",
    "ColorCorrectPalette",
    "SetMapperFlags",
    "GdiDllInitialize",
    "CreateDCW",
    "CreateFontIndirectExW",
    "GetTextCharset",
    "DdEntry8",
    "SetOPMSigningKeyAndSequenceNumbers",
    "GetDIBColorTable",
    "GdiEntry11",
    "UpdateICMRegKeyW",
    "CreateEnhMetaFileW",
    "SetICMProfileW",
    "OffsetClipRgn",
    "GetTextExtentPointI",
    "OffsetViewportOrgEx",
    "EnumFontFamiliesA",
    "GdiGetBatchLimit",
    "AddFontMemResourceEx",
    "GdiDrawStream",
    "GdiGradientFill",
    "DdEntry15",
    "FloodFill",
    "EngGetDriverName",
    "DdEntry2",
    "ResizePalette",
    "GetBitmapAttributes",
    "DdEntry29",
    "DdEntry51",
    "GetBitmapBits",
    "D3DKMTDestroyOverlay",
    "SetPixelFormat",
    "CreateDIBitmap",
    "CopyEnhMetaFileA",
    "GdiSetAttrs",
    "EngPlgBlt",
    "GdiAddGlsRecord",
    "EngCreateDeviceSurface",
    "GdiSetBatchLimit",
    "GdiEntry2",
    "NamedEscape",
    "D3DKMTReleaseProcessVidPnSourceOwners",
    "D3DKMTWaitForSynchronizationObject",
    "D3DKMTReleaseKeyedMutex",
    "GetPhysicalMonitors",
    "Ellipse",
    "GdiLoadType1Fonts",
    "D3DKMTFlipOverlay",
    "PlgBlt",
    "D3DKMTWaitForSynchronizationObject2",
    "GetFontFileInfo",
    "GdiEndDocEMF",
    "D3DKMTSetContextSchedulingPriority",
    "CreateHatchBrush",
    "ConfigureOPMProtectedOutput",
    "SetMiterLimit",
    "DdEntry25",
    "FONTOBJ_pfdg",
    "FillPath",
    "SetMapMode",
    "D3DKMTGetOverlayState",
    "GetCurrentPositionEx",
    "GetObjectW",
    "GdiConvertDC",
    "GdiPlayEMF",
    "GetCharWidthFloatW",
    "DdEntry35",
    "DdEntry48",
    "DdEntry38",
    "EngMultiByteToUnicodeN",
    "StartFormPage",
    "CheckColorsInGamut",
    "GdiFlush",
    "GetCharacterPlacementA",
    "CreateBrushIndirect",
    "DdEntry43",
    "GdiCreateLocalMetaFilePict",
    "GdiQueryFonts",
    "EngPaint",
    "EngQueryLocalTime",
    "GdiArtificialDecrementDriver",
    "SetTextColor",
    "GetTextExtentPoint32W",
    "EngUnlockSurface",
    "ScaleWindowExtEx",
    "CreateDIBPatternBrushPt",
    "AbortPath",
    "MirrorRgn",
    "ResetDCA",
    "PaintRgn",
    "GetTextExtentPointA",
    "UnrealizeObject",
    "CreateCompatibleBitmap",
    "ExtSelectClipRgn",
    "CreateICW",
    "GdiProcessSetup",
    "D3DKMTPollDisplayChildren",
    "GetPath",
    "GdiInitializeLanguagePack",
    "CloseEnhMetaFile",
    "LPtoDP",
    "PATHOBJ_vEnumStart",
    "GdiEntry15",
    "EngReleaseSemaphore",
    "CLIPOBJ_ppoGetPath",
    "D3DKMTQueryAllocationResidency",
    "GetGlyphIndicesW",
    "SetDeviceGammaRamp"
  ],
  "getuname.dll": [
    "GetUName"
  ],
  "glmf32.dll": [
    "glsDataPointer",
    "glsUnreadFunc",
    "glsIsContext",
    "glsHeaderi",
    "glsHeaderubz",
    "glsGetContextListubz",
    "glsAbortCall",
    "glsLongHigh",
    "glsUCS2toUTF8z",
    "glsGetError",
    "glsIsUTF8String",
    "glsContext",
    "glsNumubv",
    "glsError",
    "glsBlock",
    "glsNumus",
    "glsLongLow",
    "glsUTF8toUCS2z",
    "glsNumbv",
    "glsGetContextFunc",
    "glsUTF8toUCS1z",
    "glsDeleteStream",
    "glsCaptureFlags",
    "glsHeaderf",
    "glsIsContextStream",
    "glsNumfv",
    "glsGetCaptureExecTable",
    "__glsParser_print",
    "glsNumusv",
    "glsGetStreamType",
    "glsCommandString",
    "glsHeaderLayeri",
    "glsGetOpcodes",
    "glsNumf",
    "glsBinary",
    "glsGetConstiv",
    "glsCommandFunc",
    "glsGetHeaderi",
    "glsGetCommandAttrib",
    "glsNumsv",
    "glsSwapBuffers",
    "glsGetStreamCRC32",
    "glsWritePrefix",
    "glsCaptureFunc",
    "glsGetConstubz",
    "glsGetHeaderiv",
    "glsGetHeaderf",
    "__glsString_appendChar",
    "glsHeaderfv",
    "glsEndCapture",
    "glsGetCaptureDispatchTable",
    "glsNumui",
    "glsPixelSetup",
    "glsHeaderLayerf",
    "glsGetCurrentContext",
    "glsGetCaptureFlags",
    "glsBeginObj",
    "glsUpdateCaptureExecTable",
    "glsHeaderGLRCi",
    "glsGetHeaderfv",
    "glsULongHigh",
    "glsHeaderiv",
    "glsGetHeaderubz",
    "glsGetOpcodeCount",
    "glsUTF8toUCS4",
    "glsUTF8toUCSz",
    "glsGetCommandFunc",
    "glsGetGLRCi",
    "glsNumulv",
    "glsEnumString",
    "glsGetCommandAlignment",
    "glsNumb",
    "glsLong",
    "glsNuml",
    "glsChannel",
    "glsULong",
    "glsGenContext",
    "glsDeleteContext",
    "glsNums",
    "glsCommandAPI",
    "glsGLRCLayer",
    "glsEndObj",
    "glsReadPrefix",
    "glsGetAllContexts",
    "glsPad",
    "glsGetStreamSize",
    "__glsParser_create",
    "glsNumiv",
    "glsAppRef",
    "glsGetCurrentTime",
    "glsNumdv",
    "glsCharubz",
    "glsULongLow",
    "glsNumul",
    "glsCopyStream",
    "glsDisplayMapfv",
    "glsComment",
    "glsGetContextListl",
    "glsGetLayeri",
    "glsNumub",
    "glsCallArrayInContext",
    "glsEndGLS",
    "glsUTF8toUCS4z",
    "glsGLRC",
    "glsFlush",
    "glsUCS4toUTF8",
    "glsNumd",
    "glsBeginGLS",
    "glsGetLayerf",
    "glsWriteFunc",
    "glsGetContexti",
    "glsUCS4toUTF8z",
    "glsNumuiv",
    "glsUnsupportedCommand",
    "glsRequireExtension",
    "glsPixelSetupGen",
    "glsGetContextubz",
    "glsDeleteReadPrefix",
    "glsNullCommandFunc",
    "glsGetStreamReadName",
    "glsUCStoUTF8z",
    "glsReadFunc",
    "glsGetConsti",
    "glsGetContextPointer",
    "glsNumi",
    "__glsString_init",
    "glsGetStreamAttrib",
    "glsBeginCapture",
    "glsNumlv",
    "glsIsExtensionSupported",
    "glsUCS1toUTF8z",
    "glsCallArray",
    "__glsString_assign",
    "glsCallStream"
  ],
  "glu32.dll": [
    "gluTessProperty",
    "gluNewQuadric",
    "gluNurbsProperty",
    "gluEndSurface",
    "gluBeginSurface",
    "gluQuadricOrientation",
    "gluCylinder",
    "gluTessEndPolygon",
    "gluOrtho2D",
    "gluBeginPolygon",
    "gluTessBeginPolygon",
    "gluDeleteNurbsRenderer",
    "gluEndTrim",
    "gluQuadricNormals",
    "gluNurbsSurface",
    "gluNewTess",
    "gluScaleImage",
    "gluSphere",
    "gluGetString",
    "gluProject",
    "gluGetTessProperty",
    "gluLoadSamplingMatrices",
    "gluNurbsCurve",
    "gluQuadricCallback",
    "gluTessVertex",
    "gluGetNurbsProperty",
    "gluEndCurve",
    "gluBuild1DMipmaps",
    "gluTessEndContour",
    "gluTessCallback",
    "gluPerspective",
    "gluTessBeginContour",
    "gluTessNormal",
    "gluPwlCurve",
    "gluBuild2DMipmaps",
    "gluBeginTrim",
    "gluErrorString",
    "gluErrorUnicodeStringEXT",
    "gluBeginCurve",
    "gluEndPolygon",
    "gluLookAt",
    "gluNewNurbsRenderer",
    "gluNextContour",
    "gluUnProject",
    "gluQuadricTexture",
    "gluDeleteTess",
    "gluPickMatrix",
    "gluNurbsCallback",
    "gluDisk",
    "gluDeleteQuadric",
    "gluQuadricDrawStyle",
    "gluPartialDisk"
  ],
  "gpapi.dll": [
    "GetNextFgPolicyRefreshInfoInternal",
    "EnterCriticalPolicySectionInternal",
    "GetGPOListInternalW",
    "RegisterGPNotificationInternal",
    "FreeGPOListInternalA",
    "WaitForUserPolicyForegroundProcessingInternal",
    "GetAppliedGPOListInternalW",
    "GetAppliedGPOListInternalA",
    "UnregisterGPNotificationInternal",
    "GetGPOListInternalA",
    "RsopLoggingEnabledInternal",
    "RefreshPolicyExInternal",
    "FreeGPOListInternalW",
    "LeaveCriticalPolicySectionInternal",
    "WaitForMachinePolicyForegroundProcessingInternal",
    "GetPreviousFgPolicyRefreshInfoInternal",
    "ForceSyncFgPolicyInternal",
    "RefreshPolicyInternal"
  ],
  "gpedit.dll": [
    "DeleteAllGPOLinks",
    "CreateGPOLink",
    "BrowseForGPO",
    "DllCanUnloadNow",
    "ExportRSoPData",
    "DeleteGPOLink",
    "DllGetClassObject",
    "ImportRSoPData"
  ],
  "gpprefcl.dll": [
    "GenerateGroupPolicyNetworkOptions",
    "ProcessGroupPolicyLocUsAndGroups",
    "ProcessGroupPolicyDrives",
    "GenerateGroupPolicyFiles",
    "ProcessGroupPolicyExEnviron",
    "ProcessGroupPolicyExFolders",
    "ProcessGroupPolicyExShortcuts",
    "GenerateGroupPolicyStartMenu",
    "ProcessGroupPolicyExFolderOptions",
    "DllRegisterServer",
    "GenerateGroupPolicyIniFile",
    "ProcessGroupPolicyExRegionOptions",
    "ProcessGroupPolicyExApplications",
    "GenerateGroupPolicyDataSources",
    "ProcessGroupPolicyExLocUsAndGroups",
    "GenerateGroupPolicyDevices",
    "ProcessGroupPolicyExPrinters",
    "DllUnregisterServer",
    "GenerateGroupPolicyPrinters",
    "GenerateGroupPolicyNetShares",
    "ProcessGroupPolicyExPowerOptions",
    "GenerateGroupPolicyApplications",
    "ProcessGroupPolicyExNetworkOptions",
    "GenerateGroupPolicyFolderOptions",
    "ProcessGroupPolicyNetShares",
    "GenerateGroupPolicyFolders",
    "ProcessGroupPolicyExInternet",
    "GenerateGroupPolicyShortcuts",
    "GenerateGroupPolicyPowerOptions",
    "ProcessGroupPolicyNetworkOptions",
    "ProcessGroupPolicyStartMenu",
    "ProcessGroupPolicyExSchedTasks",
    "ProcessGroupPolicyExFiles",
    "ProcessGroupPolicyEnviron",
    "ProcessGroupPolicyRegionOptions",
    "ProcessGroupPolicyExServices",
    "GenerateGroupPolicyRegionOptions",
    "GenerateGroupPolicyServices",
    "ProcessGroupPolicyFolders",
    "GenerateGroupPolicyEnviron",
    "GenerateGroupPolicyDrives",
    "ProcessGroupPolicyDevices",
    "ProcessGroupPolicyPrinters",
    "ProcessGroupPolicyServices",
    "GenerateGroupPolicyLocUsAndGroups",
    "ProcessGroupPolicyExNetShares",
    "ProcessGroupPolicyDataSources",
    "ProcessGroupPolicyPowerOptions",
    "ProcessGroupPolicyIniFile",
    "ProcessGroupPolicyRegistry",
    "ProcessGroupPolicyExRegistry",
    "ProcessGroupPolicyInternet",
    "ProcessGroupPolicyExDrives",
    "ProcessGroupPolicyExIniFile",
    "ProcessGroupPolicyExStartMenu",
    "DllCanUnloadNow",
    "ProcessGroupPolicyExDataSources",
    "ProcessGroupPolicyExDevices",
    "ProcessGroupPolicyFolderOptions",
    "ProcessGroupPolicyApplications",
    "DllGetClassObject",
    "GenerateGroupPolicyRegistry",
    "ProcessGroupPolicySchedTasks",
    "GenerateGroupPolicyInternet",
    "GenerateGroupPolicySchedTasks",
    "ProcessGroupPolicyShortcuts",
    "ProcessGroupPolicyFiles"
  ],
  "gpprnext.dll": [
    "PrinterGenerateGroupPolicy",
    "PrinterProcessGroupPolicyEx",
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "PrinterProcessGroupPolicy",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "gpscript.dll": [
    "GenerateScriptsGroupPolicy",
    "ScrRegGPOListToWbem",
    "ProcessScriptsGroupPolicyEx",
    "ProcessScriptsGroupPolicy"
  ],
  "gpsvc.dll": [
    "RsopFileAccessCheckInternal",
    "RsopAccessCheckByTypeInternal",
    "DllCanUnloadNow",
    "GenerateRsopPolicy",
    "SvchostPushServiceGlobals",
    "ProcessGroupPolicyCompletedExInternal",
    "DllGetClassObject",
    "RsopSetPolicySettingStatusInternal",
    "GroupPolicyClientServiceMain",
    "ProcessGroupPolicyCompletedInternal",
    "RsopResetPolicySettingStatusInternal"
  ],
  "gptext.dll": [
    "DllUnregisterServer",
    "ProcessTCPIPPolicy",
    "ProcessConnectivityPlatformPolicy",
    "DllRegisterServer",
    "ProcessPSCHEDPolicy",
    "ProcessEQoSPolicy"
  ],
  "HelpPaneProxy.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "HotStartUserAgent.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "hal.dll": [
    "HalEnumerateEnvironmentVariablesEx",
    "IoSetPartitionInformation",
    "HalQueryDisplayParameters",
    "HalAllocateAdapterChannel",
    "WRITE_PORT_ULONG",
    "KeAcquireInStackQueuedSpinLockRaiseToSynch",
    "KeReleaseInStackQueuedSpinLock",
    "HalFreeHardwareCounters",
    "HalStopProfileInterrupt",
    "KeGetCurrentIrql",
    "HalRequestIpi",
    "KfAcquireSpinLock",
    "HalAllocateCrashDumpRegisters",
    "HalConvertDeviceIdtToIrql",
    "ExAcquireFastMutex",
    "HalCalibratePerformanceCounter",
    "HalGetEnvironmentVariable",
    "HalInitializeBios",
    "KeAcquireSpinLockRaiseToSynch",
    "HalSetTimeIncrement",
    "ExReleaseFastMutex",
    "HalSetEnvironmentVariable",
    "HalRequestClockInterrupt",
    "HalAssignSlotResources",
    "KeAcquireQueuedSpinLockRaiseToSynch",
    "READ_PORT_BUFFER_UCHAR",
    "HalGetVectorInput",
    "READ_PORT_USHORT",
    "HalSetBusData",
    "HalAdjustResourceList",
    "HalBeginSystemInterrupt",
    "HalGetInterruptVector",
    "HalInitializeProcessor",
    "HalQueryEnvironmentVariableInfoEx",
    "HalInitializeOnResume",
    "KdComPortInUse",
    "HalEndSystemInterrupt",
    "ExTryToAcquireFastMutex",
    "x86BiosFreeBuffer",
    "HalBugCheckSystem",
    "HalHandleNMI",
    "KeFlushWriteBuffer",
    "READ_PORT_ULONG",
    "IoMapTransfer",
    "HalSetRealTimeClock",
    "HalSetDisplayParameters",
    "IoWritePartitionTable",
    "IoReadPartitionTable",
    "HalDisableInterrupt",
    "HalReadDmaCounter",
    "KfLowerIrql",
    "HalStartProfileInterrupt",
    "HalGetEnvironmentVariableEx",
    "KeAcquireQueuedSpinLock",
    "HalQueryMaximumProcessorCount",
    "WRITE_PORT_UCHAR",
    "HalRequestSoftwareInterrupt",
    "HalQueryRealTimeClock",
    "HalDisplayString",
    "HalTranslateBusAddress",
    "x86BiosReadMemory",
    "HalAllProcessorsStarted",
    "KeStallExecutionProcessor",
    "HalStartNextProcessor",
    "HalStartDynamicProcessor",
    "KeRaiseIrqlToSynchLevel",
    "HalRegisterDynamicProcessor",
    "READ_PORT_UCHAR",
    "HalGetInterruptTargetInformation",
    "x86BiosWriteMemory",
    "READ_PORT_BUFFER_ULONG",
    "WRITE_PORT_BUFFER_USHORT",
    "HalFreeCommonBuffer",
    "HalClearSoftwareInterrupt",
    "KeReleaseSpinLock",
    "READ_PORT_BUFFER_USHORT",
    "KeQueryPerformanceCounter",
    "HalGetAdapter",
    "IoFlushAdapterBuffers",
    "KeTryToAcquireQueuedSpinLock",
    "HalProcessorIdle",
    "WRITE_PORT_BUFFER_UCHAR",
    "KeRaiseIrql",
    "KfReleaseSpinLock",
    "HalReportResourceUsage",
    "HalSetEnvironmentVariableEx",
    "HalRegisterErrataCallbacks",
    "WRITE_PORT_USHORT",
    "HalAllocateCommonBuffer",
    "HalGetBusData",
    "KeReleaseQueuedSpinLock",
    "KeAcquireInStackQueuedSpinLock",
    "HalMcUpdateReadPCIConfig",
    "HalInitSystem",
    "WRITE_PORT_BUFFER_ULONG",
    "HalReturnToFirmware",
    "IoFreeMapRegisters",
    "HalSetProfileInterval",
    "KeLowerIrql",
    "HalEnableInterrupt",
    "HalAcquireDisplayOwnership",
    "HalGetMemoryCachingRequirements",
    "HalAllocateHardwareCounters",
    "HalMakeBeep",
    "HalSystemVectorDispatchEntry",
    "IoFreeAdapterChannel",
    "x86BiosCall",
    "HalSetBusDataByOffset",
    "KfRaiseIrql",
    "HalGetProcessorIdByNtNumber",
    "x86BiosAllocateBuffer",
    "KeRaiseIrqlToDpcLevel",
    "KeAcquireSpinLock",
    "KeTryToAcquireQueuedSpinLockRaiseToSynch",
    "HalGetMessageRoutingInfo",
    "HalGetBusDataByOffset",
    "HalFlushCommonBuffer"
  ],
  "halacpi.dll": [
    "HalEnumerateEnvironmentVariablesEx",
    "IoSetPartitionInformation",
    "HalQueryDisplayParameters",
    "HalAllocateAdapterChannel",
    "WRITE_PORT_ULONG",
    "KeAcquireInStackQueuedSpinLockRaiseToSynch",
    "KeReleaseInStackQueuedSpinLock",
    "HalFreeHardwareCounters",
    "HalStopProfileInterrupt",
    "KeGetCurrentIrql",
    "HalRequestIpi",
    "KfAcquireSpinLock",
    "HalAllocateCrashDumpRegisters",
    "HalConvertDeviceIdtToIrql",
    "ExAcquireFastMutex",
    "HalCalibratePerformanceCounter",
    "HalGetEnvironmentVariable",
    "HalInitializeBios",
    "KeAcquireSpinLockRaiseToSynch",
    "HalSetTimeIncrement",
    "ExReleaseFastMutex",
    "HalSetEnvironmentVariable",
    "HalRequestClockInterrupt",
    "HalAssignSlotResources",
    "KeAcquireQueuedSpinLockRaiseToSynch",
    "READ_PORT_BUFFER_UCHAR",
    "HalGetVectorInput",
    "READ_PORT_USHORT",
    "HalSetBusData",
    "HalAdjustResourceList",
    "HalBeginSystemInterrupt",
    "HalGetInterruptVector",
    "HalInitializeProcessor",
    "HalQueryEnvironmentVariableInfoEx",
    "HalInitializeOnResume",
    "KdComPortInUse",
    "HalEndSystemInterrupt",
    "ExTryToAcquireFastMutex",
    "x86BiosFreeBuffer",
    "HalBugCheckSystem",
    "HalHandleNMI",
    "KeFlushWriteBuffer",
    "READ_PORT_ULONG",
    "IoMapTransfer",
    "HalSetRealTimeClock",
    "HalSetDisplayParameters",
    "IoWritePartitionTable",
    "IoReadPartitionTable",
    "HalDisableInterrupt",
    "HalReadDmaCounter",
    "KfLowerIrql",
    "HalStartProfileInterrupt",
    "HalGetEnvironmentVariableEx",
    "KeAcquireQueuedSpinLock",
    "HalQueryMaximumProcessorCount",
    "WRITE_PORT_UCHAR",
    "HalRequestSoftwareInterrupt",
    "HalQueryRealTimeClock",
    "HalDisplayString",
    "HalTranslateBusAddress",
    "x86BiosReadMemory",
    "HalAllProcessorsStarted",
    "KeStallExecutionProcessor",
    "HalStartNextProcessor",
    "HalStartDynamicProcessor",
    "KeRaiseIrqlToSynchLevel",
    "HalRegisterDynamicProcessor",
    "READ_PORT_UCHAR",
    "HalGetInterruptTargetInformation",
    "x86BiosWriteMemory",
    "READ_PORT_BUFFER_ULONG",
    "WRITE_PORT_BUFFER_USHORT",
    "HalFreeCommonBuffer",
    "HalClearSoftwareInterrupt",
    "KeReleaseSpinLock",
    "READ_PORT_BUFFER_USHORT",
    "KeQueryPerformanceCounter",
    "HalGetAdapter",
    "IoFlushAdapterBuffers",
    "KeTryToAcquireQueuedSpinLock",
    "HalProcessorIdle",
    "WRITE_PORT_BUFFER_UCHAR",
    "KeRaiseIrql",
    "KfReleaseSpinLock",
    "HalReportResourceUsage",
    "HalSetEnvironmentVariableEx",
    "HalRegisterErrataCallbacks",
    "WRITE_PORT_USHORT",
    "HalAllocateCommonBuffer",
    "HalGetBusData",
    "KeReleaseQueuedSpinLock",
    "KeAcquireInStackQueuedSpinLock",
    "HalMcUpdateReadPCIConfig",
    "HalInitSystem",
    "WRITE_PORT_BUFFER_ULONG",
    "HalReturnToFirmware",
    "IoFreeMapRegisters",
    "HalSetProfileInterval",
    "KeLowerIrql",
    "HalEnableInterrupt",
    "HalAcquireDisplayOwnership",
    "HalGetMemoryCachingRequirements",
    "HalAllocateHardwareCounters",
    "HalMakeBeep",
    "HalSystemVectorDispatchEntry",
    "IoFreeAdapterChannel",
    "x86BiosCall",
    "HalSetBusDataByOffset",
    "KfRaiseIrql",
    "HalGetProcessorIdByNtNumber",
    "x86BiosAllocateBuffer",
    "KeRaiseIrqlToDpcLevel",
    "KeAcquireSpinLock",
    "KeTryToAcquireQueuedSpinLockRaiseToSynch",
    "HalGetMessageRoutingInfo",
    "HalGetBusDataByOffset",
    "HalFlushCommonBuffer"
  ],
  "halmacpi.dll": [
    "HalEnumerateEnvironmentVariablesEx",
    "IoSetPartitionInformation",
    "HalQueryDisplayParameters",
    "HalAllocateAdapterChannel",
    "WRITE_PORT_ULONG",
    "KeAcquireInStackQueuedSpinLockRaiseToSynch",
    "KeReleaseInStackQueuedSpinLock",
    "HalFreeHardwareCounters",
    "HalStopProfileInterrupt",
    "KeGetCurrentIrql",
    "HalRequestIpi",
    "KfAcquireSpinLock",
    "HalAllocateCrashDumpRegisters",
    "HalConvertDeviceIdtToIrql",
    "ExAcquireFastMutex",
    "HalCalibratePerformanceCounter",
    "HalGetEnvironmentVariable",
    "HalInitializeBios",
    "KeAcquireSpinLockRaiseToSynch",
    "HalSetTimeIncrement",
    "ExReleaseFastMutex",
    "HalSetEnvironmentVariable",
    "HalRequestClockInterrupt",
    "HalAssignSlotResources",
    "KeAcquireQueuedSpinLockRaiseToSynch",
    "READ_PORT_BUFFER_UCHAR",
    "HalGetVectorInput",
    "READ_PORT_USHORT",
    "HalSetBusData",
    "HalAdjustResourceList",
    "HalBeginSystemInterrupt",
    "HalGetInterruptVector",
    "HalInitializeProcessor",
    "HalQueryEnvironmentVariableInfoEx",
    "HalInitializeOnResume",
    "KdComPortInUse",
    "HalEndSystemInterrupt",
    "ExTryToAcquireFastMutex",
    "x86BiosFreeBuffer",
    "HalBugCheckSystem",
    "HalHandleNMI",
    "KeFlushWriteBuffer",
    "READ_PORT_ULONG",
    "IoMapTransfer",
    "HalSetRealTimeClock",
    "HalSetDisplayParameters",
    "IoWritePartitionTable",
    "IoReadPartitionTable",
    "HalDisableInterrupt",
    "HalReadDmaCounter",
    "KfLowerIrql",
    "HalStartProfileInterrupt",
    "HalGetEnvironmentVariableEx",
    "KeAcquireQueuedSpinLock",
    "HalQueryMaximumProcessorCount",
    "WRITE_PORT_UCHAR",
    "HalRequestSoftwareInterrupt",
    "HalQueryRealTimeClock",
    "HalDisplayString",
    "HalTranslateBusAddress",
    "x86BiosReadMemory",
    "HalAllProcessorsStarted",
    "KeStallExecutionProcessor",
    "HalStartNextProcessor",
    "HalStartDynamicProcessor",
    "KeRaiseIrqlToSynchLevel",
    "HalRegisterDynamicProcessor",
    "READ_PORT_UCHAR",
    "HalGetInterruptTargetInformation",
    "x86BiosWriteMemory",
    "READ_PORT_BUFFER_ULONG",
    "WRITE_PORT_BUFFER_USHORT",
    "HalFreeCommonBuffer",
    "HalClearSoftwareInterrupt",
    "KeReleaseSpinLock",
    "READ_PORT_BUFFER_USHORT",
    "KeQueryPerformanceCounter",
    "HalGetAdapter",
    "IoFlushAdapterBuffers",
    "KeTryToAcquireQueuedSpinLock",
    "HalProcessorIdle",
    "WRITE_PORT_BUFFER_UCHAR",
    "KeRaiseIrql",
    "KfReleaseSpinLock",
    "HalReportResourceUsage",
    "HalSetEnvironmentVariableEx",
    "HalRegisterErrataCallbacks",
    "WRITE_PORT_USHORT",
    "HalAllocateCommonBuffer",
    "HalGetBusData",
    "KeReleaseQueuedSpinLock",
    "KeAcquireInStackQueuedSpinLock",
    "HalMcUpdateReadPCIConfig",
    "HalInitSystem",
    "WRITE_PORT_BUFFER_ULONG",
    "HalReturnToFirmware",
    "IoFreeMapRegisters",
    "HalSetProfileInterval",
    "KeLowerIrql",
    "HalEnableInterrupt",
    "HalAcquireDisplayOwnership",
    "HalGetMemoryCachingRequirements",
    "HalAllocateHardwareCounters",
    "HalMakeBeep",
    "HalSystemVectorDispatchEntry",
    "IoFreeAdapterChannel",
    "x86BiosCall",
    "HalSetBusDataByOffset",
    "KfRaiseIrql",
    "HalGetProcessorIdByNtNumber",
    "x86BiosAllocateBuffer",
    "KeRaiseIrqlToDpcLevel",
    "KeAcquireSpinLock",
    "KeTryToAcquireQueuedSpinLockRaiseToSynch",
    "HalGetMessageRoutingInfo",
    "HalGetBusDataByOffset",
    "HalFlushCommonBuffer"
  ],
  "hbaapi.dll": [
    "HBA_RegisterLibraryV2",
    "SMHBA_GetPortType",
    "HBA_CloseAdapter",
    "HBA_SetBindingSupport",
    "HBA_ResetStatistics",
    "HBA_GetBindingCapability",
    "HBA_SendReportLUNs",
    "SMHBA_SetPersistentBinding",
    "SMHBA_GetBindingCapability",
    "SMHBA_RegisterForAdapterAddEvents",
    "HBA_GetAdapterName",
    "SMHBA_GetDiscoveredPortAttributes",
    "SMHBA_GetLUNStatistics",
    "HBA_ScsiReadCapacityV2",
    "SMHBA_ScsiReadCapacity",
    "HBA_SendRPS",
    "SMHBA_GetFCPhyAttributes",
    "HBA_GetPortAttributesByWWN",
    "SMHBA_GetAdapterPortAttributes",
    "HBA_ScsiInquiryV2",
    "HBA_RegisterForAdapterEvents",
    "SMHBA_RegisterForAdapterPortEvents",
    "SMHBA_RemovePersistentBinding",
    "HBA_ScsiReportLUNsV2",
    "SMHBA_RegisterForTargetEvents",
    "SMHBA_SetBindingSupport",
    "SMHBA_ScsiInquiry",
    "HBA_GetFcpTargetMappingV2",
    "HBA_OpenAdapter",
    "HBA_RegisterForLinkEvents",
    "HBA_RegisterForTargetEvents",
    "HBA_RemoveCallback",
    "SMHBA_GetAdapterAttributes",
    "HBA_OpenAdapterByWWN",
    "SMHBA_RemoveAllPersistentBindings",
    "HBA_RegisterForAdapterAddEvents",
    "HBA_SendRPL",
    "HBA_GetAdapterPortAttributes",
    "SMHBA_RegisterForAdapterPortStatEvents",
    "HBA_GetFCPStatistics",
    "HBA_GetFcpPersistentBinding",
    "SMHBA_GetBindingSupport",
    "HBA_GetVersion",
    "SMHBA_GetProtocolStatistics",
    "HBA_RegisterForAdapterPortEvents",
    "SMHBA_ScsiReportLuns",
    "SMHBA_GetPortAttributesByWWN",
    "SMHBA_GetPhyStatistics",
    "HBA_GetNumberOfAdapters",
    "HBA_RemovePersistentBinding",
    "SMHBA_RegisterLibrary",
    "HBA_SendSRL",
    "SMHBA_GetVendorLibraryAttributes",
    "HbaGetAdapterNameByDeviceInstanceId",
    "HBA_RemoveAllPersistentBindings",
    "HBA_SendCTPassThru",
    "HBA_RefreshAdapterConfiguration",
    "SMHBA_RegisterForAdapterEvents",
    "SMHBA_GetWrapperLibraryAttributes",
    "HBA_SetRNIDMgmtInfo",
    "HBA_GetWrapperLibraryAttributes",
    "HBA_GetDiscoveredPortAttributes",
    "HBA_LoadLibrary",
    "SMHBA_GetNumberOfPorts",
    "SMHBA_SendSMPPassThru",
    "HBA_SendRLS",
    "HBA_SendLIRR",
    "HBA_SendScsiInquiry",
    "SMHBA_SendECHO",
    "SMHBA_GetTargetMapping",
    "SMHBA_SendTEST",
    "HBA_GetBindingSupport",
    "HBA_RegisterForAdapterPortStatEvents",
    "SMHBA_GetSASPhyAttributes",
    "HBA_GetAdapterAttributes",
    "HBA_GetFcpTargetMapping",
    "HBA_GetRNIDMgmtInfo",
    "SMHBA_RegisterForAdapterPhyStatEvents",
    "HBA_SendRNIDV2",
    "HBA_GetFC4Statistics",
    "HBA_GetEventBuffer",
    "HBA_GetPortStatistics",
    "HBA_GetPersistentBindingV2",
    "SMHBA_GetVersion",
    "SMHBA_GetPersistentBinding",
    "HBA_SetPersistentBindingV2",
    "HBA_SendReadCapacity",
    "HBA_GetVendorLibraryAttributes",
    "HBA_SendRNID",
    "HBA_RefreshInformation",
    "HBA_FreeLibrary",
    "HBA_RegisterLibrary",
    "HBA_SendCTPassThruV2"
  ],
  "hcproviders.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "hgcpl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "hgprint.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "hhsetup.dll": [
    "private: unsigned long __thiscall CCollection::AllocCopyValue(class CParseXML *,char *,char * *)",
    "public: void __thiscall CLocation::SetTitle(unsigned short const *)",
    "public: unsigned long __thiscall CCollection::DeleteFolder(class CFolder *)",
    "public: unsigned long __thiscall CCollection::Close(void)",
    "public: int __thiscall CCollection::GetFindMergedCHMS(void)",
    "public: void __thiscall CFolder::SetParent(class CFolder *)",
    "private: void __thiscall CCollection::DeleteChildren(class CFolder * *)",
    "public: void __thiscall CFolder::SetFirstChildFolder(class CFolder *)",
    "private: void __thiscall CCollection::DeleteFolders(class CFolder * *)",
    "public: char * __thiscall CLocation::GetVolume(void)",
    "public: class CColList * __thiscall CCollection::AddCollection(void)",
    "public: void __thiscall CTitle::SetId(char const *)",
    "private: unsigned long __thiscall CCollection::CheckTitleRef(unsigned short const *,unsigned short)",
    "public: __thiscall CLocation::CLocation(void)",
    "public: class CTitle * __thiscall CCollection::FindTitle(unsigned short const *,unsigned short)",
    "public: unsigned long __thiscall CTitle::AddLocationHistory(unsigned long,char const *,char const *,char const *,class CLocation const *,char const *,char const *,int)",
    "public: unsigned short const * __thiscall CLocation::GetTitleW(void)",
    "public: class CTitle * __thiscall CCollection::FindTitle(char const *,unsigned short)",
    "public: char * __thiscall CCollection::GetSampleLocation(void)",
    "public: char * __thiscall CLocation::GetPath(void)",
    "public: unsigned short const * __thiscall CCollection::GetCollectionFileNameW(void)",
    "public: class CFIFOString & __thiscall CFIFOString::operator=(class CFIFOString const &)",
    "unsigned long __stdcall AllocSetValue(char const *,char * *)",
    "public: unsigned short const * __thiscall CCollection::GetSampleLocationW(void)",
    "public: void __thiscall CTitle::SetLanguage(unsigned short)",
    "public: unsigned long __thiscall CFIFOString::GetTail(char * *)",
    "public: class CCollection & __thiscall CCollection::operator=(class CCollection const &)",
    "public: unsigned long __thiscall CCollection::GetRefTitleCount(void)",
    "public: unsigned short __thiscall CFolder::GetLanguage(void)",
    "private: unsigned long __thiscall CCollection::HandleTitle(class CParseXML *,char *)",
    "public: __thiscall CPointerList::~CPointerList(void)",
    "public: unsigned short __thiscall CTitle::GetLanguage(void)",
    "public: class CFolder * __thiscall CCollection::AddFolder(unsigned short const *,unsigned long,unsigned long *,unsigned short)",
    "public: class CFolder * __thiscall CFolder::AddChildFolder(char const *,unsigned long,unsigned long *,unsigned short)",
    "public: void __thiscall CFolder::SetExTitlePtr(class CExTitle *)",
    "public: __thiscall CPointerList::CPointerList(void)",
    "public: class CLocation * __thiscall CCollection::FindLocation(char const *,unsigned int *)",
    "public: char * __thiscall CLocation::GetTitle(void)",
    "public: class CLocation * __thiscall CCollection::FirstLocation(void)",
    "private: unsigned long __thiscall CCollection::AddRefedTitle(class CFolder *)",
    "public: class CFolder & __thiscall CFolder::operator=(class CFolder const &)",
    "public: unsigned long __thiscall CCollection::Save(void)",
    "public: void __thiscall CFolder::SetNextFolder(class CFolder *)",
    "public: unsigned long __thiscall CFolder::GetOrder(void)",
    "public: void __thiscall CCollection::AddRef(void)",
    "public: void __thiscall CTitle::SetNextTitle(class CTitle *)",
    "private: int __thiscall CCollection::WriteFolders(class CFolder * *)",
    "public: int __thiscall CCollection::IsDirty(void)",
    "public: void __thiscall CLocation::SetPath(unsigned short const *)",
    "public: class CLocation & __thiscall CLocation::operator=(class CLocation const &)",
    "public: class CFolder * __thiscall CFolder::GetFirstChildFolder(void)",
    "public: unsigned long __thiscall CCollection::Open(char const *)",
    "private: void __thiscall CCollection::wssResetNextColNum(void)",
    "public: void __thiscall CFolder::SetOrder(unsigned long)",
    "public: void __thiscall CLocation::SetVolume(unsigned short const *)",
    "public: __thiscall CCollection::CCollection(void)",
    "public: class CFolder * __thiscall CFolder::GetNextFolder(void)",
    "public: unsigned long __thiscall CCollection::Open(unsigned short const *)",
    "public: __thiscall CFolder::CFolder(void)",
    "private: class CLocation * __thiscall CCollection::NewLocation(void)",
    "public: class CPointerList & __thiscall CPointerList::operator=(class CPointerList const &)",
    "public: void __thiscall CLocation::SetId(char const *)",
    "public: __thiscall CFolder::~CFolder(void)",
    "public: unsigned long __thiscall CCollection::GetColNo(void)",
    "public: void __thiscall CLocation::SetId(unsigned short const *)",
    "public: unsigned long __thiscall CTitle::AddLocationHistory(unsigned long,unsigned short const *,unsigned short const *,unsigned short const *,class CLocation const *,unsigned short const *,unsigned short const *,int)",
    "public: void __thiscall CFolder::SetTitle(char const *)",
    "public: __thiscall CCollection::~CCollection(void)",
    "public: void __thiscall CCollection::DecrementRefTitleCount(void)",
    "public: class CFolder * __thiscall CCollection::AddFolder(char const *,unsigned long,unsigned long *,unsigned short)",
    "public: void __thiscall CCollection::Dirty(void)",
    "private: unsigned long __thiscall CCollection::HandleFolder(class CParseXML *,char *)",
    "public: class CTitle & __thiscall CTitle::operator=(class CTitle const &)",
    "public: void __thiscall CCollection::RemoveCollectionEntry(char const *)",
    "public: struct ListItem * __thiscall CPointerList::First(void)",
    "public: struct LocationHistory * __thiscall CTitle::NewLocationHistory(void)",
    "public: int __thiscall CCollection::MergeKeywords(unsigned short *)",
    "private: unsigned long __thiscall CCollection::ParseFile(char const *)",
    "public: class CFolder * __thiscall CCollection::GetRootFolder(void)",
    "public: unsigned short const * __thiscall CLocation::GetIdW(void)",
    "public: void __thiscall CCollection::SetMasterCHM(unsigned short const *,unsigned short)",
    "public: __thiscall CFIFOString::CFIFOString(void)",
    "public: __thiscall CFIFOString::~CFIFOString(void)",
    "public: int __thiscall CCollection::MergeKeywords(char *)",
    "private: unsigned long __thiscall CCollection::DeleteTitle(class CTitle *)",
    "private: unsigned long __thiscall CCollection::Release(void)",
    "public: void __thiscall CCollection::ConfirmTitles(void)",
    "public: char * __thiscall CTitle::GetId(void)",
    "public: unsigned short const * __thiscall CLocation::GetPathW(void)",
    "public: void __thiscall CCollection::SetVersion(unsigned long)",
    "private: void __thiscall CCollection::DeleteLocalFiles(struct LocationHistory *,class CTitle *)",
    "public: __thiscall CLocation::~CLocation(void)",
    "public: class CFolder * __thiscall CCollection::GetVisableRootFolder(void)",
    "public: __thiscall CTitle::CTitle(void)",
    "public: struct LocationHistory * __thiscall CTitle::GetLocation(unsigned long)",
    "public: char * __thiscall CFolder::GetTitle(void)",
    "public: unsigned short const * __thiscall CLocation::GetVolumeW(void)",
    "public: unsigned long __thiscall CCollection::RemoveCollection(int)",
    "public: void __thiscall CCollection::SetSampleLocation(char const *)",
    "public: void __thiscall CCollection::IncrementRefTitleCount(void)",
    "private: int __thiscall CCollection::WriteFolder(class CFolder * *)",
    "public: unsigned short const * __thiscall CTitle::GetIdW(void)",
    "public: class CColList * __thiscall CCollection::FindCollection(char const *)",
    "private: unsigned long __thiscall CCollection::DeleteLocation(class CLocation *)",
    "public: void __thiscall CLocation::SetTitle(char const *)",
    "public: class CLocation * __thiscall CCollection::AddLocation(char const *,char const *,char const *,char const *,unsigned long *)",
    "public: class CTitle * __thiscall CCollection::GetFirstTitle(void)",
    "private: unsigned long __thiscall CCollection::CheckTitleRef(char const *,unsigned short)",
    "public: unsigned short const * __thiscall CFolder::GetTitleW(void)",
    "public: int __thiscall CCollection::GetMasterCHM(char * *,unsigned short *)",
    "public: void __thiscall CFolder::SetTitle(unsigned short const *)",
    "public: unsigned long __thiscall CCollection::GetVersion(void)",
    "public: int __thiscall CFolder::bIsVisable(void)",
    "public: unsigned short __thiscall CCollection::GetLangId(char const *)",
    "public: class CTitle * __thiscall CCollection::AddTitle(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short,unsigned int,class CLocation *,unsigned long *,int,unsigned short const *)",
    "public: void __thiscall CTitle::SetId(unsigned short const *)",
    "public: int __thiscall CCollection::GetMasterCHM(unsigned short * *,unsigned short *)",
    "public: void __thiscall CCollection::SetSampleLocation(unsigned short const *)",
    "private: class CTitle * __thiscall CCollection::NewTitle(void)",
    "public: void __thiscall CFolder::SetLanguage(unsigned short)",
    "public: __thiscall CTitle::~CTitle(void)",
    "public: class CFolder * __thiscall CFolder::AddChildFolder(unsigned short const *,unsigned long,unsigned long *,unsigned short)",
    "public: void __thiscall CLocation::SetPath(char const *)",
    "public: char const * __thiscall CCollection::GetCollectionFileName(void)",
    "public: struct ListItem * __thiscall CPointerList::Add(void *)",
    "public: void __thiscall CLocation::SetNextLocation(class CLocation *)",
    "public: class CLocation * __thiscall CCollection::FindLocation(unsigned short const *,unsigned int *)",
    "public: class CLocation * __thiscall CCollection::AddLocation(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned long *)",
    "public: class CTitle * __thiscall CTitle::GetNextTitle(void)",
    "public: unsigned long __thiscall CFolder::AddChildFolder(class CFolder *)",
    "public: class CTitle * __thiscall CCollection::AddTitle(char const *,char const *,char const *,char const *,char const *,unsigned short,unsigned int,class CLocation *,unsigned long *,int,char const *)",
    "public: class CLocation * __thiscall CLocation::GetNextLocation(void)",
    "public: struct ListItem * __thiscall CPointerList::Next(struct ListItem *)",
    "public: void __thiscall CLocation::SetVolume(char const *)",
    "public: void __thiscall CFIFOString::RemoveAll(void)",
    "public: void __thiscall CPointerList::RemoveAll(void)",
    "public: char * __thiscall CLocation::GetId(void)const",
    "private: unsigned long __thiscall CCollection::HandleCollectionEntry(class CParseXML *,char *)",
    "public: unsigned long __thiscall CFIFOString::AddTail(char *)",
    "public: unsigned short __thiscall CCollection::GetLangId(unsigned short const *)",
    "public: void __thiscall CCollection::SetFindMergedCHMS(int)",
    "public: void __thiscall CCollection::SetMasterCHM(char const *,unsigned short)",
    "private: unsigned long __thiscall CCollection::HandleCollection(class CParseXML *,char *)",
    "public: class CFolder * __thiscall CFolder::GetParent(void)",
    "private: unsigned long __thiscall CCollection::HandleLocation(class CParseXML *,char *)"
  ],
  "hid.dll": [
    "HidP_GetCaps",
    "HidD_SetOutputReport",
    "HidD_FlushQueue",
    "HidP_SetUsageValueArray",
    "HidD_Hello",
    "HidP_MaxDataListLength",
    "HidP_GetData",
    "HidD_GetConfiguration",
    "HidP_GetLinkCollectionNodes",
    "HidP_GetButtonCaps",
    "HidP_GetSpecificValueCaps",
    "HidP_GetUsageValueArray",
    "HidP_GetSpecificButtonCaps",
    "HidP_SetData",
    "HidP_SetUsageValue",
    "HidD_SetFeature",
    "HidP_TranslateUsagesToI8042ScanCodes",
    "HidP_GetValueCaps",
    "HidD_GetFeature",
    "HidP_UnsetUsages",
    "HidP_GetUsages",
    "HidP_SetScaledUsageValue",
    "HidP_GetUsageValue",
    "HidD_GetIndexedString",
    "HidP_MaxUsageListLength",
    "HidD_GetInputReport",
    "HidD_GetNumInputBuffers",
    "HidD_GetPhysicalDescriptor",
    "HidD_GetSerialNumberString",
    "HidP_GetScaledUsageValue",
    "HidP_UsageListDifference",
    "HidD_GetProductString",
    "HidD_GetAttributes",
    "HidD_GetManufacturerString",
    "HidD_GetMsGenreDescriptor",
    "HidD_GetPreparsedData",
    "HidD_FreePreparsedData",
    "HidD_SetConfiguration",
    "HidP_InitializeReportForID",
    "HidD_SetNumInputBuffers",
    "HidP_GetUsagesEx",
    "HidP_SetUsages",
    "HidP_GetExtendedAttributes",
    "HidD_GetHidGuid"
  ],
  "hidserv.dll": [
    "InstallHidserv",
    "ServiceMain"
  ],
  "hlink.dll": [
    "HlinkIsShortcut",
    "HlinkResolveMonikerForData",
    "HlinkOnRenameDocument",
    "HlinkCreateFromString",
    "OleSaveToStreamEx",
    "DllRegisterServer",
    "HlinkCreateShortcutFromString",
    "HlinkCreateExtensionServices",
    "HlinkCreateShortcutFromMoniker",
    "HlinkCreateFromData",
    "DllUnregisterServer",
    "HlinkOnNavigate",
    "HlinkCreateBrowseContext",
    "HlinkUpdateStackItem",
    "HlinkCreateFromMoniker",
    "HlinkNavigate",
    "HlinkPreprocessMoniker",
    "HlinkParseDisplayName",
    "HlinkResolveShortcut",
    "HlinkQueryCreateFromData",
    "HlinkGetValueFromParams",
    "HlinkCreateShortcut",
    "HlinkResolveShortcutToMoniker",
    "HlinkTranslateURL",
    "HlinkGetSpecialReference",
    "HlinkNavigateToStringReference",
    "HlinkResolveShortcutToString",
    "HlinkSetSpecialReference",
    "DllCanUnloadNow",
    "HlinkClone",
    "DllGetClassObject",
    "HlinkResolveStringForData"
  ],
  "hnetcfg.dll": [
    "HNetSharingAndFirewallSettingsDlg",
    "DllUnregisterServer",
    "HNetDeleteRasConnection",
    "DllCanUnloadNow",
    "HNetGetSharingServicesPage",
    "RegisterClassObjects",
    "ReleaseSingletons",
    "RevokeClassObjects",
    "HNetSharedAccessSettingsDlg",
    "HNetGetFirewallSettingsPage",
    "DllGetClassObject",
    "HNetFreeSharingServicesPage",
    "DllRegisterServer",
    "WinBomConfigureWindowsFirewall"
  ],
  "hnetmon.dll": [
    "InitHelperDll"
  ],
  "hotplug.dll": [
    "HotPlugDriverBlockedW",
    "HotPlugSafeRemovalDriveNotificationW",
    "CPlApplet",
    "HotPlugWarmEjectVetoedW",
    "HotPlugStandbyVetoedW",
    "HotPlugChildWithInvalidIdW",
    "HotPlugSafeRemovalNotificationW",
    "HotPlugEjectDevice",
    "HotPlugEjectVetoedW",
    "HotPlugRemovalVetoedW",
    "HotPlugEjectDeviceEx",
    "HotPlugHibernateVetoedW"
  ],
  "httpapi.dll": [
    "HttpReceiveRequestEntityBody",
    "HttpShutdownRequestQueue",
    "HttpFlushResponseCache",
    "HttpGetCounters",
    "HttpCloseServerSession",
    "HttpControlService",
    "HttpCloseUrlGroup",
    "HttpSendHttpResponse",
    "HttpSetRequestQueueProperty",
    "HttpAddUrl",
    "HttpReadFragmentFromCache",
    "HttpSetUrlGroupProperty",
    "HttpCreateUrlGroup",
    "HttpQueryServerSessionProperty",
    "HttpCloseRequestQueue",
    "HttpQueryServiceConfiguration",
    "HttpReceiveClientCertificate",
    "HttpInitialize",
    "HttpDeleteServiceConfiguration",
    "HttpAddUrlToUrlGroup",
    "HttpCreateServerSession",
    "HttpWaitForDisconnectEx",
    "HttpQueryRequestQueueProperty",
    "HttpCreateHttpHandle",
    "HttpRemoveUrl",
    "HttpWaitForDisconnect",
    "HttpTerminate",
    "HttpAddFragmentToCache",
    "HttpCreateRequestQueue",
    "HttpReceiveHttpRequest",
    "HttpWaitForDemandStart",
    "HttpSetServiceConfiguration",
    "HttpRemoveUrlFromUrlGroup",
    "HttpSendResponseEntityBody",
    "HttpQueryUrlGroupProperty",
    "HttpSetServerSessionProperty",
    "HttpCancelHttpRequest"
  ],
  "htui.dll": [
    "DllMain",
    "HTUI_DeviceColorAdjustmentA",
    "HTUI_DeviceColorAdjustmentW",
    "HTUI_ColorAdjustmentA",
    "HTUI_ColorAdjustmentW",
    "HTUI_DeviceColorAdjustment",
    "HTUI_ColorAdjustment"
  ],
  "IDStore.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "IKEEXT.DLL": [
    "IkeServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "IMJP10K.DLL": [
    "KnlClose",
    "DllCanUnloadNowDone",
    "CreateIImeKnlDictInstance",
    "RgSetGakusyuu",
    "KnlInit",
    "DllRegisterServer",
    "CreateIImeKbdInstance",
    "CreateIFELanguageInstance",
    "DllUnregisterServer",
    "KnlTerm",
    "SQMDataToKernel",
    "init_config",
    "CleanDicThreadFunc",
    "CheckFileType",
    "CreateIImeConvertInstance",
    "CreateIFEDictionary2Instance",
    "CreateIRegManInstance",
    "ShutdownKnlDll",
    "DllCanUnloadNow",
    "reload_config",
    "CreateIFEDictionaryInstance",
    "DllGetClassObject",
    "CreateIFECommonInstance",
    "KnlOpen"
  ],
  "INETRES.dll": "No exports",
  "IPBusEnum.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "IPBusEnumProxy.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "IPHLPAPI.DLL": [
    "DisableMediaSense",
    "_PfBindInterfaceToIndex@16",
    "GetPerTcp6ConnectionEStats",
    "GetBestInterfaceEx",
    "Icmp6SendEcho2",
    "ConvertRemoteInterfaceAliasToLuid",
    "InternalSetTeredoPort",
    "IpReleaseAddress",
    "InternalGetUnicastIpAddressEntry",
    "CreatePersistentTcpPortReservation",
    "ConvertInterfaceLuidToIndex",
    "InternalSetIfEntry",
    "ConvertInterfaceNameToLuidW",
    "InternalCreateIpNetEntry",
    "NotifyStableUnicastIpAddressTable",
    "InitializeUnicastIpAddressEntry",
    "SetPerTcp6ConnectionStats",
    "GetInterfaceInfo",
    "GetIpPathEntry",
    "InternalGetTunnelPhysicalAdapter",
    "SetIfEntry",
    "ConvertInterfaceLuidToGuid",
    "_PfRemoveGlobalFilterFromInterface@8",
    "ConvertIpv4MaskToLength",
    "InternalGetTcp6Table2",
    "DeleteUnicastIpAddressEntry",
    "GetOwnerModuleFromPidAndInfo",
    "_PfGetInterfaceStatistics@16",
    "_PfRebindFilters@8",
    "GetTeredoPort",
    "ConvertRemoteInterfaceLuidToGuid",
    "GetIpPathTable",
    "GetPerTcp6ConnectionStats",
    "SetSessionCompartmentId",
    "InternalGetIfTable2",
    "GetIfEntry2",
    "IcmpSendEcho2Ex",
    "GetIpStatistics",
    "_PfRemoveFiltersFromInterface@20",
    "ConvertGuidToStringW",
    "CreateUnicastIpAddressEntry",
    "ConvertInterfaceLuidToNameA",
    "ConvertStringToGuidA",
    "SetNetworkInformation",
    "GetAdaptersAddresses",
    "CPNatfwtDestroyProviderInstance",
    "GetIpForwardEntry2",
    "InternalCreateIpForwardEntry",
    "InternalGetUdpTableEx",
    "CancelMibChangeNotify2",
    "InternalGetUdpTableWithOwnerModule",
    "FlushIpNetTable",
    "CreateAnycastIpAddressEntry",
    "InternalFindInterfaceByAddress",
    "GetUnicastIpAddressTable",
    "AddIPAddress",
    "SetPerTcpConnectionStats",
    "GetIfStackTable",
    "GetIpInterfaceEntry",
    "ConvertStringToGuidW",
    "IcmpSendEcho",
    "GetUdp6Table",
    "AllocateAndGetIpAddrTableFromStack",
    "InternalSetUnicastIpAddressEntry",
    "GetAdapterOrderMap",
    "NotifyUnicastIpAddressChange",
    "SetIpNetEntry",
    "GetMulticastIpAddressTable",
    "NotifyRouteChange2",
    "CreateProxyArpEntry",
    "InternalGetForwardIpTable2",
    "InternalGetMulticastIpAddressEntry",
    "InternalCreateAnycastIpAddressEntry",
    "InternalGetUdpTable",
    "SetCurrentThreadCompartmentId",
    "NotifyAddrChange",
    "ConvertInterfaceNameToLuidA",
    "SetIpInterfaceEntry",
    "_PfUnBindInterface@4",
    "DeleteIPAddress",
    "register_icmp",
    "ConvertGuidToStringA",
    "InternalDeleteIpForwardEntry",
    "_PfCreateInterface@24",
    "InternalSetIpNetEntry",
    "Icmp6CreateFile",
    "_PfSetLogBuffer@28",
    "InternalDeleteAnycastIpAddressEntry",
    "InternalGetAnycastIpAddressEntry",
    "DeletePersistentTcpPortReservation",
    "GetIpNetTable2",
    "if_nametoindex",
    "ResolveNeighbor",
    "IcmpCreateFile",
    "LookupPersistentTcpPortReservation",
    "GetUdpTable",
    "DeleteIpNetEntry",
    "GetAdapterIndex",
    "GetAdaptersInfo",
    "CreatePersistentUdpPortReservation",
    "InternalGetTcpTable2",
    "_PfMakeLog@4",
    "ConvertLengthToIpv4Mask",
    "InternalGetTcp6TableWithOwnerModule",
    "if_indextoname",
    "CreateIpNetEntry2",
    "GetMulticastIpAddressEntry",
    "RestoreMediaSense",
    "GetAnycastIpAddressTable",
    "GetUdpStatisticsEx",
    "GetUnicastIpAddressEntry",
    "InternalGetUnicastIpAddressTable",
    "InternalGetIpInterfaceEntry",
    "GetBestRoute",
    "GetIfTable2",
    "GetIpInterfaceTable",
    "CPNatfwtRegisterProviderInstance",
    "SendARP",
    "ConvertInterfaceLuidToAlias",
    "DeleteIpForwardEntry2",
    "GetIfTable2Ex",
    "InternalCreateIpForwardEntry2",
    "GetNetworkParams",
    "InternalDeleteUnicastIpAddressEntry",
    "GetIfTable",
    "InternalGetIpForwardEntry2",
    "NTTimeToNTPTime",
    "NotifyIpInterfaceChange",
    "GetPerTcpConnectionStats",
    "ConvertInterfacePhysicalAddressToLuid",
    "CreateSortedAddressPairs",
    "InternalSetIpForwardEntry2",
    "SetIpForwardEntry",
    "DeleteAnycastIpAddressEntry",
    "GetRTTAndHopCount",
    "InternalGetIpNetTable2",
    "Icmp6ParseReplies",
    "GetCurrentThreadCompartmentId",
    "GetFriendlyIfIndex",
    "InitializeIpForwardEntry",
    "GetExtendedUdpTable",
    "InternalDeleteIpNetEntry",
    "InternalSetTcpEntry",
    "SetIpForwardEntry2",
    "InternalGetTcpTableEx",
    "SetTcpEntry",
    "InternalGetUdpTableWithOwnerPid",
    "_PfBindInterfaceToIPAddress@12",
    "InitializeIpInterfaceEntry",
    "GetOwnerModuleFromUdpEntry",
    "InternalGetIfTable",
    "SetIpStatisticsEx",
    "FlushIpPathTable",
    "GetUdpStatistics",
    "InternalCreateUnicastIpAddressEntry",
    "InternalGetIpInterfaceTable",
    "CPNatfwtIndicateReceivedBuffers",
    "InternalSetIpForwardEntry",
    "CreateIpForwardEntry",
    "FreeMibTable",
    "GetInvertedIfStackTable",
    "DeleteProxyArpEntry",
    "NTPTimeToNTFileTime",
    "GetTcp6Table2",
    "GetTcpStatistics",
    "ResolveIpNetEntry2",
    "SetIpNetEntry2",
    "InternalSetIpInterfaceEntry",
    "ConvertRemoteInterfaceLuidToAlias",
    "FlushIpNetTable2",
    "AllocateAndGetInterfaceInfoFromStack",
    "GetOwnerModuleFromUdp6Entry",
    "GetOwnerModuleFromTcp6Entry",
    "IcmpCloseHandle",
    "NhpAllocateAndGetInterfaceInfoFromStack",
    "GetIpStatisticsEx",
    "_PfRemoveFilterHandles@12",
    "InternalSetIpNetEntry2",
    "GetIpForwardTable",
    "GetPerAdapterInfo",
    "InternalDeleteIpForwardEntry2",
    "IpRenewAddress",
    "ConvertStringToInterfacePhysicalAddress",
    "GetSessionCompartmentId",
    "GetBestInterface",
    "ConvertInterfaceIndexToLuid",
    "InternalDeleteIpNetEntry2",
    "DeleteIpForwardEntry",
    "_PfAddGlobalFilterToInterface@8",
    "InternalSetIpStats",
    "CreateIpForwardEntry2",
    "_PfDeleteLog@0",
    "InternalGetMulticastIpAddressTable",
    "GetIpErrorString",
    "InternalCleanupPersistentStore",
    "GetAnycastIpAddressEntry",
    "ConvertInterfaceAliasToLuid",
    "InternalGetTcpTable",
    "NotifyRouteChange",
    "GetIfEntry",
    "GetIpAddrTable",
    "_PfDeleteInterface@4",
    "CreateIpNetEntry",
    "_PfAddFiltersToInterface@24",
    "NotifyTeredoPortChange",
    "GetNumberOfInterfaces",
    "ConvertRemoteInterfaceLuidToIndex",
    "CancelIPChangeNotify",
    "GetIpForwardTable2",
    "GetTcpStatisticsEx",
    "InternalGetTcp6TableWithOwnerPid",
    "LookupPersistentUdpPortReservation",
    "ParseNetworkString",
    "ConvertRemoteInterfaceGuidToLuid",
    "SetIpTTL",
    "InternalCreateIpNetEntry2",
    "SetUnicastIpAddressEntry",
    "InternalGetUdp6TableWithOwnerModule",
    "GetUniDirectionalAdapterInfo",
    "GetIpNetTable",
    "CPNatfwtDeregisterProviderInstance",
    "NhGetInterfaceDescriptionFromGuid",
    "GetTcpTable",
    "InternalGetUdp6TableWithOwnerPid",
    "SetAdapterIpAddress",
    "do_echo_req",
    "ConvertInterfaceGuidToLuid",
    "SetPerTcp6ConnectionEStats",
    "do_echo_rep",
    "GetBestRoute2",
    "InternalGetTcpTableWithOwnerModule",
    "GetTcp6Table",
    "InternalGetIpAddrTable",
    "InternalGetIpNetTable",
    "GetIcmpStatisticsEx",
    "IcmpSendEcho2",
    "GetOwnerModuleFromTcpEntry",
    "InternalGetIpNetEntry2",
    "NhGetGuidFromInterfaceName",
    "GetIpNetEntry2",
    "NhGetInterfaceNameFromGuid",
    "InternalGetIfEntry2",
    "DeletePersistentUdpPortReservation",
    "CPNatfwtCreateProviderInstance",
    "IcmpParseReplies",
    "InternalGetAnycastIpAddressTable",
    "_PfTestPacket@20",
    "GetNetworkInformation",
    "GetPerTcpConnectionEStats",
    "NhGetInterfaceNameFromDeviceGuid",
    "UnenableRouter",
    "GetIcmpStatistics",
    "ConvertInterfaceLuidToNameW",
    "GetExtendedTcpTable",
    "DeleteIpNetEntry2",
    "GetTcpTable2",
    "EnableRouter",
    "ConvertRemoteInterfaceIndexToLuid",
    "InternalGetTcpTableWithOwnerPid",
    "SetPerTcpConnectionEStats",
    "InternalGetIpForwardTable",
    "SetIpStatistics"
  ],
  "IPSECSVC.DLL": [
    "SpdServiceMain"
  ],
  "IasMigPlugin.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "IcCoinstall.dll": [
    "IcCoinstaller"
  ],
  "IconCodecService.dll": "No exports",
  "IdListen.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "InkEd.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "iTVData.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "ias.dll": [
    "ServiceMain"
  ],
  "iasacct.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "iasads.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "iasdatastore.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "iashlpr.dll": [
    "ConfigureIas",
    "DllUnregisterServer",
    "InitializeIas",
    "DllCanUnloadNow",
    "ShutdownIas",
    "DoRequest",
    "DoRequestAsync",
    "SetOptionIas",
    "MemAllocIas",
    "DllGetClassObject",
    "MemReallocIas",
    "AllocateAttributes",
    "DllRegisterServer",
    "GetOptionIas",
    "FreeAttributes",
    "MemFreeIas"
  ],
  "iasnap.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "iaspolcy.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "iasrad.dll": [
    "public: long __thiscall VSAFilter::radiusToIAS(struct IAttributesRaw *)const",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "public: long __thiscall VSAFilter::radiusFromIAS(struct IAttributesRaw *,int)const",
    "DllGetClassObject",
    "public: long __thiscall VSAFilter::radiusToIAS(unsigned char *,unsigned long,class IASTL::IASAttributeVector &)const",
    "public: long __thiscall VSAFilter::shutdown(void)",
    "DllRegisterServer",
    "public: long __thiscall VSAFilter::initialize(void)"
  ],
  "iasrecst.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "iassam.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "IASParmsQueryUserProperty"
  ],
  "iassdo.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "iassvcs.dll": [
    "IASGetProductLimits",
    "IASUninitialize",
    "IASAdler32",
    "DllRegisterServer",
    "IASGetDictionary",
    "DllUnregisterServer",
    "IASAllocateUniqueID",
    "IASRadiusCrypt",
    "IASGetLocalDictionary",
    "IASGlobalUnlock",
    "IASInitialize",
    "IASRegisterComponent",
    "IASGlobalLock",
    "IASReportEvent",
    "IASRequestThread",
    "IASReportLicenseViolation",
    "IASVariantChangeType",
    "IASGetHostByName",
    "DllCanUnloadNow",
    "IASReportSecurityEvent",
    "IASSetMaxThreadIdle",
    "DllGetClassObject",
    "IASSetMaxNumberOfThreads"
  ],
  "icaapi.dll": [
    "IcaCdWaitForSingleObject",
    "IcaStackIoControl",
    "IcaSystemTrace",
    "IcaStackCallback",
    "IcaChannelTrace",
    "IcaStackClose",
    "IcaStackConnectionClose",
    "IcaStackConnectionAccept",
    "IcaChannelIoControl",
    "_IcaStackIoControl",
    "IcaStackOpen",
    "IcaStackConnectionRequest",
    "IcaStackReconnect",
    "IcaCdIoControl",
    "IcaClose",
    "IcaStackTerminate",
    "IcaChannelOpen",
    "IcaStackCreateShadowEndpoint",
    "IcaStackLock",
    "IcaStackTrace",
    "IcaStackUnlock",
    "IcaStackIoControlNoConnLock",
    "IcaCdCreateThread",
    "IcaIoControl",
    "IcaPushConsoleStack",
    "IcaChannelClose",
    "IcaStackQueryLocalAddress",
    "IcaStackQueryState",
    "IcaTrace",
    "IcaStackConnectionWait",
    "IcaStackDisconnect",
    "IcaMemoryAllocate",
    "IcaCdWaitForMultipleObjects",
    "IcaOpen",
    "IcaMemoryFree"
  ],
  "icardie.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "icardres.dll": "No exports",
  "icfupgd.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "MigrateSettingsW",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "icm32.dll": [
    "CMTranslateRGB",
    "CMCreateTransformW",
    "CMTranslateColors",
    "CMCheckColors",
    "CMCreateProfile",
    "CMTranslateRGBsExt",
    "CMDeleteTransform",
    "CMConvertColorNameToIndex",
    "CMCreateProfileW",
    "CMGetInfo",
    "CMConvertIndexToColorName",
    "CMCreateDeviceLinkProfile",
    "CMCreateTransformExtW",
    "CMCreateTransformExt",
    "CMCreateTransform",
    "CMIsProfileValid",
    "CMGetNamedProfileInfo",
    "CMCheckColorsInGamut",
    "CMCheckRGBs",
    "CMCreateMultiProfileTransform",
    "CMTranslateRGBs"
  ],
  "icmp.dll": [
    "IcmpSendEcho",
    "do_echo_req",
    "IcmpParseReplies",
    "do_echo_rep",
    "IcmpCloseHandle",
    "register_icmp",
    "IcmpCreateFile",
    "IcmpSendEcho2"
  ],
  "icmui.dll": [
    "SetupColorMatchingW",
    "SetupColorMatchingA"
  ],
  "icsigd.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "idndl.dll": [
    "DownlevelGetLocaleScripts",
    "DownlevelGetStringScripts",
    "DownlevelVerifyScripts"
  ],
  "ieakeng.dll": [
    "ShowInetcpl",
    "SetProxyDlg",
    "ModifyZones",
    "ErrorMessageBox",
    "NewUrl",
    "GetAdmWindowHandle",
    "BToolbar_Save",
    "GetFavoritesNumber",
    "SaveHomePage",
    "GetGlobalInt",
    "ImportQuickLinks",
    "ExportRSSFeeds",
    "ImportAuthCode",
    "ModifyFavorite",
    "CheckVer",
    "ExportRegValue2Inf",
    "SetDefaultSearchProv",
    "SetOrClearVersionInfo",
    "MoveADMWindow",
    "ExportRegKey2Inf",
    "DestroyADMWindow",
    "ImportFavorites",
    "CreateADMWindow",
    "ImportFavoritesCmd",
    "InitializeSearch",
    "MigrateToOldFavorites",
    "SaveADMItem",
    "MoveDownFavorite",
    "GetFavoriteUrl",
    "BToolbar_Remove",
    "DeleteADMItems",
    "DeleteADMItem",
    "BToolbar_Init",
    "CanDeleteADM",
    "ImportRSSFeeds",
    "IsAnimBitmapFileValid",
    "DeleteFavorite",
    "ResetAdmFiles",
    "SaveAndCleanupSearch",
    "LoadADMFiles",
    "ModifyAuthCode",
    "BuildPalette",
    "ExportFavorites",
    "IsADMFileVisible",
    "ImportADMFile",
    "CheckField",
    "ShowADMWindow",
    "TestURL",
    "GetProxyDlg",
    "ImportRatings",
    "CopyAnimBmp",
    "MoveUpFavorite",
    "SaveAdmFiles",
    "SetGlobalInt",
    "ImportPrograms",
    "ImportSearchProviders",
    "GetFavoritesMaxNumber",
    "ImportConnectSet",
    "NewFolder",
    "GetAdmFileList",
    "CopyLogoBmp",
    "AddEditSearchProvider",
    "SetADMWindowText",
    "CheckForDupKeys",
    "SelectADMItem",
    "BrowseForFile",
    "ExportQuickLinks",
    "ExportRegTree2Inf",
    "GetBaseFileName",
    "BToolbar_Edit",
    "InitializeHomePage",
    "ImportZones",
    "GetFavoritesInfoTip",
    "GenerateNewVersionStr",
    "IsBitmapFileValid",
    "ProcessFavSelChange",
    "RemoveSearchProv",
    "GetURLLinkType",
    "AddADMItem",
    "ModifyRatings",
    "DoReboot",
    "MigrateFavorites",
    "BrowseForFolder",
    "CleanupSearch",
    "DisplayADMItem",
    "IsFavoriteItem",
    "ImportHomePage"
  ],
  "ieaksie.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "ieakui.dll": "No exports",
  "ieapfltr.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "iedkcs32.dll": [
    "GenerateGroupPolicy",
    "CallInternetInitializeAutoProxyDll",
    "ProcessGroupPolicy",
    "BrandICW",
    "BrandIE4",
    "DllRegisterServer",
    "InternetInitializeAutoProxyDll",
    "BrandICW2",
    "BrandIEActiveSetup",
    "BrandCleanInstallStubs",
    "DllUnregisterServer",
    "ProcessGroupPolicyForActivitiesEx",
    "Clear",
    "ProcessGroupPolicyForZoneMap",
    "ProcessGroupPolicyForActivities",
    "BrandIntra",
    "BrandInternetExplorer",
    "CloseRASConnections",
    "ProcessGroupPolicyEx",
    "BrandMe",
    "BrandExternal"
  ],
  "ieframe.dll": [
    "DoPrivacyDlg",
    "DoFileDownload",
    "IEInPrivateFilteringEnabled",
    "IERegisterWritableRegistryKey",
    "IECreateFile",
    "IEIsProtectedModeProcess",
    "HlinkFrameNavigateNHL",
    "IELaunchURL",
    "IELaunchManageAddOnsUI",
    "IEGetFileAttributesEx",
    "IEUnregisterWritableRegistry",
    "DllRegisterServer",
    "IEGetWriteableFolderPath",
    "IEDeleteFile",
    "DllUnregisterServer",
    "IEGetProtectedModeCookie",
    "URLQualifyW",
    "SetQueryNetSessionCount",
    "HlinkFrameNavigate",
    "ImportCookieFileByProcessW",
    "IERegisterWritableRegistryValue",
    "URLQualifyA",
    "IECreateDirectory",
    "DoOrganizeFavDlg",
    "IEIsProtectedModeURL",
    "SHAddSubscribeFavorite",
    "ExportCookieFileByProcessW",
    "IEIsInPrivateBrowsing",
    "OpenURL",
    "HlinkFindFrame",
    "AddUrlToFavorites",
    "IESetProtectedModeCookie",
    "DoAddToFavDlg",
    "DoOrganizeFavDlgW",
    "DoAddToFavDlgW",
    "IERemoveDirectory",
    "IEGetWriteableHKCU",
    "IEAssociateThreadWithTab",
    "IERegSetValueEx",
    "IESaveFile",
    "DllGetVersion",
    "IECancelSaveFile",
    "IEMoveFileEx",
    "ImportPrivacySettings",
    "DllInstall",
    "IEShowSaveFileDialog",
    "DllCanUnloadNow",
    "IEFindFirstFile",
    "IERefreshElevationPolicy",
    "SoftwareUpdateMessageBox",
    "DllGetClassObject",
    "IEDisassociateThreadWithTab",
    "IERegCreateKeyEx"
  ],
  "iepeers.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllEnumClassObjects",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "iernonce.dll": [
    "RunOnceExProcess",
    "InitCallback"
  ],
  "iertutil.dll": [
    "RevertImpersonate",
    "ResetIEExtensibility",
    "ResetIERegistrySettings",
    "DllCanUnloadNow",
    "IEGetProcessModule",
    "ImpersonateUser",
    "DllGetClassObject",
    "IERT_DelayLoadFailureHook",
    "IEGetFrameUtilExports",
    "IEGetTabWindowExports"
  ],
  "iesetup.dll": [
    "IEApplyCurrentHardening",
    "IEHardenAdmin",
    "IEShowHardeningDialog",
    "IEHardenLMSettings",
    "IEHardenAdminNow",
    "IEHardenMachineNow",
    "IEHardenUser"
  ],
  "iesysprep.dll": [
    "Sysprep_Generalize_IE",
    "Sysprep_Cleanup_IE",
    "Sysprep_Specialize_IE"
  ],
  "ieui.dll": [
    "RegisterGadgetMessage",
    "DUserBuildGadget",
    "GetGadgetProperty",
    "SetGadgetFocusEx",
    "AutoTrace",
    "DUserFindClass",
    "GetStdColorF",
    "SetGadgetFillF",
    "SetGadgetRect",
    "RemoveGadgetMessageHandler",
    "DUserSendMethod",
    "DUserGetScalePRID",
    "GetGadgetBufferInfo",
    "SetGadgetRotation",
    "GetDUserModule",
    "FindGadgetFromPoint",
    "SetGadgetStyle",
    "DUserGetAlphaPRID",
    "SetGadgetMessageFilter",
    "SetGadgetScale",
    "RegisterGadgetProperty",
    "UtilGetColor",
    "GetGadgetSize",
    "SetGadgetFillI",
    "GetGadgetRotation",
    "GetStdColorI",
    "IsInsideContext",
    "BuildAnimation",
    "WaitMessageEx",
    "DUserPostMethod",
    "DUserCastHandle",
    "GetGadget",
    "BuildInterpolation",
    "GetGadgetFocus",
    "UnregisterGadgetMessage",
    "GetActionTimeslice",
    "DeleteHandle",
    "GetGadgetRgn",
    "SetGadgetFocus",
    "DUserCastClass",
    "DisableContainerHwnd",
    "SetActionTimeslice",
    "IsGadgetParentChainStyle",
    "GetGadgetRect",
    "MapGadgetPoints",
    "GetStdColorPenF",
    "DUserRegisterStub",
    "UtilDrawBlendRect",
    "RemoveGadgetProperty",
    "GetStdColorBrushI",
    "PeekMessageExA",
    "SetGadgetParent",
    "SetGadgetBufferInfo",
    "GetGadgetScale",
    "GetMessageExA",
    "DUserPostEvent",
    "LookupGadgetTicket",
    "InitGadgetComponent",
    "ForwardGadgetMessage",
    "GetDebug",
    "GetGadgetCenterPoint",
    "UnregisterGadgetMessageString",
    "AddGadgetMessageHandler",
    "DUserGetRectPRID",
    "GetStdColorName",
    "FindGadgetMessages",
    "UtilBuildFont",
    "GetMessageExW",
    "DllMain",
    "InvalidateGadget",
    "SetGadgetCenterPoint",
    "DUserSendEvent",
    "DUserFlushDeferredMessages",
    "DUserFlushMessages",
    "DUserGetRotatePRID",
    "AttachWndProcA",
    "GetStdPalette",
    "GetGadgetTicket",
    "SetGadgetProperty",
    "UnregisterGadgetProperty",
    "DUserDeleteGadget",
    "GetStdColorBrushF",
    "IsStartDelete",
    "BuildDropTarget",
    "InitGadgets",
    "DUserRegisterSuper",
    "GetGadgetStyle",
    "PeekMessageExW",
    "AttachWndProcW",
    "EnumGadgets",
    "UtilDrawOutlineRect",
    "GetGadgetMessageFilter",
    "CreateAction",
    "DUserStopAnimation",
    "DUserCastDirect",
    "DrawGadgetTree",
    "GetGadgetRootInfo",
    "SetGadgetRootInfo",
    "DUserGetGutsData",
    "RegisterGadgetMessageString",
    "DUserInstanceOf",
    "GetGadgetAnimation",
    "FireGadgetMessages",
    "GetStdColorPenI",
    "CreateGadget",
    "DUserRegisterGuts",
    "UtilSetBackground",
    "FindStdColor",
    "SetGadgetOrder",
    "DetachWndProc"
  ],
  "ifmon.dll": [
    "InitHelperDll"
  ],
  "ifsutil.dll": [
    "public: virtual __thiscall CANNED_SECURITY::~CANNED_SECURITY(void)",
    "public: void __thiscall IO_DP_DRIVE::QueryCacheSize(unsigned __int64 *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QuerySystemMemory(unsigned long *,unsigned __int64 *,unsigned __int64 *,unsigned __int64 *)",
    "public: unsigned char __thiscall SNAPSHOT::CheckSnapshotPresence(void)",
    "public: unsigned char __thiscall VOL_LIODPDRV::ChkDsk(enum FIX_LEVEL,class MESSAGE *,unsigned long,unsigned long,unsigned short,unsigned long *,class WSTRING const *)",
    "public: unsigned char __thiscall DP_DRIVE::WaitForUnit(class MESSAGE *)",
    "public: __thiscall READ_MODIFY_WRITE_CACHE::READ_MODIFY_WRITE_CACHE(void)",
    "public: static unsigned char __stdcall IFS_SYSTEM::EnableVolumeCompression(class WSTRING const *)",
    "public: class IO_DP_DRIVE * __thiscall SUPERAREA::GetDrive(void)",
    "public: void * __thiscall TLINK::QueryDisjointRangeAndAssignBuffer(class BIG_INT *,unsigned short *,unsigned short *,void *,unsigned long,void *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryUdfMediaNeedsVat(void)",
    "public: static unsigned char __stdcall VOL_LIODPDRV::QueryAutochkTimeOut(unsigned long *)",
    "public: unsigned char __thiscall POW_CACHE::Initialize(class IO_DP_DRIVE *)",
    "private: __thiscall SNAPSHOT::SNAPSHOT(void)",
    "void __stdcall NotifyFveAfterFormat(class DSTRING *)",
    "public: void __thiscall DP_DRIVE::SetSectors(class BIG_INT)",
    "public: unsigned char __thiscall DP_DRIVE::WaitForWriteCompletion(class MESSAGE *)",
    "public: unsigned char __thiscall SPARSE_SET::Add(class SPARSE_SET const *)",
    "public: unsigned char __thiscall DIGRAPH::Initialize(unsigned long)",
    "public: unsigned char __thiscall DP_DRIVE::QueryDiscStatus(unsigned long *,unsigned long *)",
    "public: unsigned char __thiscall IO_DP_DRIVE::InvalidateVolume(void)",
    "public: __thiscall MOUNT_POINT_TUPLE::MOUNT_POINT_TUPLE(void)",
    "public: void __thiscall SPARSE_SET::DumpHashTable(void)",
    "public: unsigned char __thiscall DIGRAPH::SearchForMatch(unsigned long,class BITVECTOR *,class NUMBER_SET *,unsigned char *,class BIG_INT *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryFirstBlockInLastNonEmptySession(unsigned long *)",
    "public: unsigned char __thiscall READ_WRITE_CACHE::Initialize(class IO_DP_DRIVE *,unsigned long)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryFileSystemName(class WSTRING const *,class WSTRING *,long *,class WSTRING *)",
    "public: unsigned char __thiscall DP_DRIVE::CreateTrack(unsigned long,unsigned char,enum DP_DRIVE::NwaType)",
    "public: unsigned char __thiscall LOG_IO_DP_DRIVE::SetSystemId(unsigned char)",
    "public: unsigned char __thiscall MOUNT_POINT_MAP::GetAt(unsigned long,class WSTRING *,class WSTRING *)",
    "public: void * __thiscall DP_DRIVE::QueryDriveHandle(void)const",
    "public: unsigned char __thiscall DP_DRIVE::Initialize(class WSTRING const *,class WSTRING const *,class MESSAGE *,unsigned char,unsigned char)",
    "public: unsigned char __thiscall IO_DP_DRIVE::Read(class BIG_INT,unsigned long,void *)",
    "public: void __thiscall BIG_INT::Set(unsigned char,unsigned char const *)",
    "public: unsigned char __thiscall TLINK::Initialize(unsigned short)",
    "protected: enum FORMAT_ERROR_CODE __thiscall VOL_LIODPDRV::Initialize(class WSTRING const *,class SUPERAREA *,class MESSAGE *,unsigned char,unsigned char,enum _MEDIA_TYPE,unsigned short,unsigned char,unsigned int,unsigned char)",
    "public: unsigned char __thiscall DIGRAPH::RemoveEdge(unsigned long,unsigned long)",
    "public: unsigned char __thiscall DP_DRIVE::QueryOpenSessionBounds(unsigned long *,unsigned long *)",
    "public: unsigned long __thiscall DIGRAPH::QueryNumParents(unsigned long)const",
    "public: void __thiscall INTSTACK::Pop(unsigned long)",
    "public: void __thiscall MEDIA_TRACK_INFORMATION::Initialize(struct _TRACK_INFORMATION2 *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::IsFileSystemEnabled(class WSTRING const *,unsigned char *)",
    "public: void __thiscall MEDIA_TRACK_INFORMATION_SORTED_BY_SIZE::Initialize(class MEDIA_TRACK_INFORMATION *)",
    "public: __thiscall LOG_IO_DP_DRIVE::LOG_IO_DP_DRIVE(void)",
    "public: virtual unsigned long __thiscall DP_DRIVE::QuerySectorSize(void)const",
    "public: class BIG_INT & __thiscall TLINK::GetNextDataSlot(void)",
    "public: static unsigned char __stdcall AUTOREG::IsEntryPresent(class WSTRING const *)",
    "public: unsigned char __thiscall IO_DP_DRIVE::Verify(class BIG_INT,class BIG_INT)",
    "public: unsigned char __thiscall DP_DRIVE::SendSonyMSRequestSenseCmd(struct _SENSE_DATA *)",
    "public: unsigned char __thiscall READ_CACHE::Initialize(class IO_DP_DRIVE *,unsigned long)",
    "public: void * __thiscall TLINK::GetSortedNext(void *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryHotPlugInfo(void)const",
    "public: unsigned char __thiscall DP_DRIVE::ReinitiateBackgroundFormat(void)",
    "public: void * __thiscall TLINK::GetNext(void *)",
    "public: void * __thiscall TLINK::GetBuffer(void *)",
    "public: unsigned char __thiscall WRITE_ONCE_CACHE::Initialize(class IO_DP_DRIVE *,unsigned long,unsigned long,unsigned long)",
    "public: virtual __thiscall SECRUN::~SECRUN(void)",
    "public: static void __stdcall DRIVE_CACHE::SetPhaseSubPhase(unsigned short *,unsigned short *)",
    "public: unsigned char __thiscall DIGRAPH::AddEdge(unsigned long,unsigned long)",
    "public: virtual __thiscall INTSTACK::~INTSTACK(void)",
    "public: unsigned __int64 __thiscall BLOCK_CACHE::GetPerfFreq(void)",
    "public: unsigned char __thiscall CANNED_SECURITY::Initialize(void)",
    "public: __thiscall SECRUN::SECRUN(void)",
    "public: __thiscall POW_TRACK::POW_TRACK(void)",
    "public: static unsigned char __stdcall IFS_SYSTEM::EnableVolumeUpgrade(class WSTRING const *)",
    "int __stdcall DiskCopyMainLoop(class WSTRING const *,class WSTRING const *,class WSTRING const *,class WSTRING const *,unsigned char,class MESSAGE *,class MESSAGE *)",
    "public: virtual unsigned long __thiscall DP_DRIVE::QueryWriteBlockSize(void)const",
    "public: static long __stdcall DP_DRIVE::QueryNtfsSupportInfo(void *,unsigned char *)",
    "public: __thiscall CANNED_SECURITY::CANNED_SECURITY(void)",
    "public: unsigned char __thiscall SPARSE_SET::Check(class BIG_INT)",
    "public: __thiscall WRITE_ONCE_CACHE::WRITE_ONCE_CACHE(void)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryProcessPrivateMemory(void *,unsigned __int64 *)",
    "public: virtual void __thiscall BLOCK_CACHE::QueryCacheSize(unsigned __int64 *)",
    "public: __thiscall READ_WRITE_CACHE::READ_WRITE_CACHE(void)",
    "public: unsigned char __thiscall DP_DRIVE::QueryHighestTrackAddress(unsigned long *)",
    "public: unsigned short const * __thiscall VOL_LIODPDRV::GetFileSystemName(void)",
    "public: class BIG_INT & __thiscall TLINK::GetData(unsigned short)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryFileSystemNameByHandle(void *,class WSTRING *,long *,class WSTRING *)",
    "public: unsigned char __thiscall VOL_LIODPDRV::ForceAutochk(unsigned char,unsigned long,unsigned long,unsigned short,class WSTRING const *)",
    "private: virtual __thiscall SNAPSHOT::~SNAPSHOT(void)",
    "public: class BIG_INT __thiscall NUMBER_SET::QueryNumber(class BIG_INT)const",
    "public: static class CANNED_SECURITY * __stdcall IFS_SYSTEM::GetCannedSecurity(void)",
    "public: __thiscall MOUNT_POINT_MAP::MOUNT_POINT_MAP(void)",
    "public: unsigned char __thiscall INTSTACK::Initialize(void)",
    "public: unsigned char __thiscall SPARSE_SET::Initialize(void)",
    "public: unsigned char __thiscall IO_DP_DRIVE::Lock(void)",
    "public: unsigned char __thiscall MOUNT_POINT_MAP::AddVolumeName(class WSTRING *,class WSTRING *)",
    "public: unsigned char __thiscall NUMBER_SET::AddStart(class BIG_INT)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryStorageDeviceProperty(void *,class DSTRING *,class DSTRING *,class DSTRING *,unsigned char *,unsigned char *)",
    "public: unsigned char __thiscall DP_DRIVE::IsUdfMediaWritable(void)",
    "public: unsigned char __thiscall DP_DRIVE::ReinitializeDriveParameters(class MESSAGE *)",
    "public: unsigned long __thiscall DP_DRIVE::QueryPhysicalSectorSize(void)",
    "public: __thiscall TLINK::TLINK(void)",
    "public: unsigned short __thiscall DP_DRIVE::QueryEccBlockSizeInSectors(void)",
    "public: unsigned char __thiscall IO_DP_DRIVE::HardRead(class BIG_INT,unsigned long,void *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryUdfMediaHasPow(void)",
    "public: virtual __thiscall VOL_LIODPDRV::~VOL_LIODPDRV(void)",
    "public: virtual __thiscall NUMBER_SET::~NUMBER_SET(void)",
    "public: unsigned char __thiscall NUMBER_SET::AddNext(class BIG_INT)",
    "public: unsigned char __thiscall READ_AHEAD_CACHE::Initialize(class IO_DP_DRIVE *,unsigned long,unsigned long)",
    "public: void * __thiscall TLINK::GetSortedFirst(void)",
    "public: unsigned char __thiscall SPARSE_SET::CheckAndAdd(class BIG_INT,unsigned char *)",
    "public: void * __thiscall CANNED_SECURITY::GetCannedSecurityDescriptor(enum _CANNED_SECURITY_TYPE,unsigned long *)",
    "public: unsigned char __thiscall NUMBER_SET::QueryContainingRange(class BIG_INT,class BIG_INT *,class BIG_INT *)const",
    "public: void __thiscall IO_DP_DRIVE::SetCache(class DRIVE_CACHE *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryMediaByte(void)const",
    "public: __thiscall BLOCK_CACHE::BLOCK_CACHE(void)",
    "public: unsigned char __thiscall FORMAT_SQM::Export(int)",
    "public: unsigned char __thiscall SECRUN::Initialize(class MEM *,class IO_DP_DRIVE *,class BIG_INT,unsigned long)",
    "public: __thiscall POW_CACHE::POW_CACHE(void)",
    "public: static unsigned char __stdcall AUTOREG::IsEntryPresent(class WSTRING const *,class WSTRING const *)",
    "public: unsigned long __thiscall DIGRAPH::QueryNumChildren(unsigned long)const",
    "public: void __thiscall NUMBER_SET::QueryDisjointRange(unsigned long,class BIG_INT *,class BIG_INT *)const",
    "public: static unsigned long __stdcall SUPERAREA::ComputeVolId(unsigned long)",
    "public: unsigned char __thiscall BLOCK_CACHE::Initialize(class IO_DP_DRIVE *)",
    "public: __thiscall NUMBER_SET::NUMBER_SET(void)",
    "public: void __thiscall IO_DP_DRIVE::AdjustCacheSize(__int64)",
    "public: unsigned char __thiscall DP_DRIVE::QueryFirstBlockInLastSession(unsigned long *)",
    "public: unsigned char __thiscall LOG_IO_DP_DRIVE::Initialize(class WSTRING const *,class MESSAGE *,unsigned char,unsigned short)",
    "public: unsigned char __thiscall POW_CACHE::Initialize(unsigned long,unsigned long,unsigned long,unsigned long,unsigned long)",
    "public: unsigned char __thiscall DP_DRIVE::SendSonyMSTestUnitReadyCmd(struct _SENSE_DATA *)",
    "public: static void __stdcall IFS_SYSTEM::QueryNtfsTime(union _LARGE_INTEGER *)",
    "public: static unsigned char __stdcall AUTOREG::DeleteEntry(class WSTRING const *,class WSTRING const *)",
    "public: unsigned char __thiscall NUMBER_SET::CheckAndAdd(class BIG_INT,unsigned char *)",
    "public: unsigned char __thiscall READ_MODIFY_WRITE_CACHE::Initialize(class IO_DP_DRIVE *,unsigned long,unsigned long,unsigned char,unsigned char)",
    "unsigned char __stdcall GetDefaultFileSystemIfs(struct FMIFS_DEF_FS_PARAM *,struct FMIFS_DEF_FS_OUT *,unsigned long *)",
    "public: void __thiscall TLINK::Sort(void)",
    "unsigned char __stdcall RegisterExtensionCallbacks(struct _CALLBACK_REGISTRATION *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::DosDriveNameToNtDriveName(class WSTRING const *,class WSTRING *)",
    "public: unsigned short __thiscall TLINK::QueryMemberCount(void)const",
    "public: static unsigned char __stdcall SNAPSHOT::ReleaseVolumeSnapshot(class SNAPSHOT *)",
    "public: unsigned char __thiscall NUMBER_SET::RemoveAll(void)",
    "public: unsigned char __thiscall IO_DP_DRIVE::Prefetch(class BIG_INT,unsigned long)",
    "public: unsigned char __thiscall NUMBER_SET::Initialize(void)",
    "public: class BIG_INT & __thiscall TLINK::GetData(void *)",
    "public: unsigned char __thiscall LOG_IO_DP_DRIVE::Write(class BIG_INT,unsigned long,void *)",
    "public: virtual void __thiscall BLOCK_CACHE::AdjustCacheSize(__int64)",
    "public: unsigned char __thiscall LOG_IO_DP_DRIVE::Read(class BIG_INT,unsigned long,void *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryUdfMediaSupportsQuickGrow(void)",
    "public: unsigned char __thiscall DP_DRIVE::Initialize(class WSTRING const *,class MESSAGE *,unsigned char,unsigned char,unsigned short)",
    "public: static unsigned char __stdcall VOL_LIODPDRV::SetAutochkTimeOut(unsigned long)",
    "public: unsigned char __thiscall MOUNT_POINT_MAP::QueryVolumeName(class WSTRING *,class WSTRING *)",
    "private: unsigned char __thiscall SNAPSHOT::Initialize(unsigned short *)",
    "public: unsigned char __thiscall DP_DRIVE::SetPowTrackConfiguration(unsigned char)",
    "public: static unsigned char __stdcall AUTOREG::DeleteEntry(class WSTRING const *,unsigned char)",
    "public: virtual __thiscall SUPERAREA::~SUPERAREA(void)",
    "public: unsigned long __thiscall DP_DRIVE::QueryUdfMediaType(void)",
    "protected: __thiscall VOL_LIODPDRV::VOL_LIODPDRV(void)",
    "public: static unsigned char __stdcall IFS_SYSTEM::FileSetAttributes(class WSTRING const *,unsigned long,unsigned long *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryVolumeBounds(unsigned long *,unsigned long *)",
    "public: static unsigned char __stdcall AUTOREG::IsFrontEndPresent(class WSTRING const *,class WSTRING const *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::IsThisNtfs(class BIG_INT,unsigned long,void *)",
    "public: unsigned char __thiscall NUMBER_SET::Remove(class BIG_INT,class BIG_INT)",
    "public: unsigned char __thiscall SPARSE_SET::Add(class BIG_INT)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryProcessorInformation(class DSTRING *,unsigned long *,unsigned __int64 *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::DismountVolume(class WSTRING const *)",
    "public: __thiscall SPARSE_SET::SPARSE_SET(void)",
    "public: __thiscall MEDIA_TRACK_INFORMATION::MEDIA_TRACK_INFORMATION(void)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryFreeDiskSpace(class WSTRING const *,class BIG_INT *)",
    "public: unsigned char __thiscall NUMBER_SET::Add(class NUMBER_SET const *)",
    "public: unsigned char __thiscall DIGRAPH::EliminateCycles(class CONTAINER *,unsigned char *)",
    "public: static unsigned char __stdcall AUTOREG::AddEntry(class WSTRING const *)",
    "public: unsigned char __thiscall DP_DRIVE::SendSonyMSFormatCmd(unsigned char)",
    "public: unsigned char __thiscall DP_DRIVE::SendSonyMSModeSenseCmd(struct SONY_MS_MODE_SENSE_DATA *)",
    "public: virtual __thiscall MOUNT_POINT_MAP::~MOUNT_POINT_MAP(void)",
    "public: virtual class BIG_INT __thiscall DP_DRIVE::QuerySectors(void)const",
    "public: virtual __thiscall LOG_IO_DP_DRIVE::~LOG_IO_DP_DRIVE(void)",
    "public: unsigned char __thiscall NUMBER_SET::Add(class BIG_INT,class BIG_INT)",
    "public: unsigned char __thiscall NUMBER_SET::CheckAndRemove(class BIG_INT,unsigned char *)",
    "public: unsigned char __thiscall IO_DP_DRIVE::SqmExport(class WSTRING const *,unsigned char (__cdecl*)(void *,unsigned long,unsigned char,char *,...),void *)",
    "public: unsigned short * __thiscall SNAPSHOT::GetSnapshotGlobalDeviceName(void)",
    "public: unsigned short __thiscall TLINK::QuerySize(void)const",
    "public: static unsigned long __stdcall IFS_SYSTEM::QueryPageSize(void)",
    "public: static unsigned char __stdcall IFS_SYSTEM::IsVolumeDirty(class WSTRING *,unsigned char *,unsigned char *,long *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryFreeBlocksInLastTrack(unsigned long *)",
    "public: unsigned char __thiscall NUMBER_SET::Remove(class NUMBER_SET const *)",
    "public: virtual unsigned char __thiscall BLOCK_CACHE::SqmExport(unsigned char (__cdecl*)(void *,unsigned long,unsigned char,char *,...),void *)",
    "public: void __thiscall TLINK::ShellSort(void)",
    "public: unsigned char __thiscall DP_DRIVE::QueryNextWritableAddress(unsigned long *,enum DP_DRIVE::NwaType)",
    "public: unsigned char __thiscall VOL_LIODPDRV::Recover(class WSTRING const *,class MESSAGE *)",
    "public: unsigned char __thiscall IO_DP_DRIVE::FlushCache(void)",
    "public: __thiscall DIGRAPH::DIGRAPH(void)",
    "public: __thiscall DIGRAPH_EDGE::DIGRAPH_EDGE(void)",
    "public: unsigned char __thiscall NUMBER_SET::Add(class BIG_INT)",
    "public: void * __thiscall TLINK::GetFirst(void)",
    "public: __thiscall READ_AHEAD_CACHE::READ_AHEAD_CACHE(void)",
    "public: unsigned char __thiscall IO_DP_DRIVE::IssueDeleteNotification(unsigned __int64,unsigned long)",
    "public: unsigned char __thiscall IO_DP_DRIVE::DismountAndLock(void)",
    "public: static void __stdcall IFS_SYSTEM::GetSystemTime(struct _TIME_FIELDS *)",
    "protected: unsigned char __thiscall SUPERAREA::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,unsigned long,class MESSAGE *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryRewritableMOSupport(void)",
    "public: class IO_DP_DRIVE * __thiscall SECRUN::GetDrive(void)",
    "public: static unsigned char __stdcall AUTOREG::PushEntry(class WSTRING const *)",
    "public: unsigned char __thiscall VOL_LIODPDRV::SetVolumeLabelAndPrintFormatReport(class WSTRING const *,class MESSAGE *)",
    "protected: __thiscall SUPERAREA::SUPERAREA(void)",
    "public: unsigned long __thiscall POW_CACHE::QuerySectorSize(void)",
    "public: static unsigned char __stdcall DP_DRIVE::QueryMrwSupport(void *)",
    "public: unsigned char __thiscall DIGRAPH::QueryParents(unsigned long,class NUMBER_SET *)const",
    "public: unsigned char __thiscall DP_DRIVE::ReadFormattableCapacity(unsigned char,unsigned long *,unsigned char *,unsigned long *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::NtDriveNameToDosDriveName(class WSTRING const *,class WSTRING *)",
    "public: __thiscall READ_CACHE::READ_CACHE(void)",
    "public: unsigned char __thiscall DP_DRIVE::SendSonyMSInquiryCmd(struct SONY_MS_INQUIRY_DATA *)",
    "public: unsigned char __thiscall SPARSE_SET::RemoveAll(void)",
    "public: unsigned char __thiscall LOG_IO_DP_DRIVE::Initialize(class WSTRING const *,class WSTRING const *,class MESSAGE *,unsigned char)",
    "public: unsigned char __thiscall DP_DRIVE::SendPowLowLevelFormat(class MESSAGE *)",
    "public: unsigned char __thiscall MOUNT_POINT_MAP::Initialize(void)",
    "public: virtual unsigned char __thiscall SECRUN::Read(void)",
    "public: unsigned char __thiscall IO_DP_DRIVE::Write(class BIG_INT,unsigned long,void *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryStorageAdapterProperty(void *,class DSTRING *,class DSTRING *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QuerySystemVersion(class DSTRING *)",
    "public: unsigned char __thiscall VOL_LIODPDRV::SetFileSystemName(unsigned short const *)",
    "public: static unsigned char __stdcall DP_DRIVE::QueryFreeBlocksInLastTrack(void *,unsigned long *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::FormatScaleTotalFreeClusters(unsigned __int64,unsigned __int64,unsigned long *,unsigned long *,unsigned __int64 *,unsigned __int64 *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryCanonicalNtDriveName(class WSTRING const *,class WSTRING *)",
    "public: unsigned char __thiscall DIGRAPH::QueryParentsWithChildren(class NUMBER_SET *,unsigned long)const",
    "public: unsigned char __thiscall DP_DRIVE::InitializePowTrackConfiguration(unsigned char,unsigned char *)",
    "public: void __thiscall DP_DRIVE::CloseDriveHandle(void)",
    "public: unsigned char __thiscall FORMAT_SQM::Initialize(class DP_DRIVE *,unsigned short const *,unsigned long,unsigned long)",
    "public: virtual __thiscall DIGRAPH::~DIGRAPH(void)",
    "public: unsigned char __thiscall DIGRAPH::QueryChildren(unsigned long,class NUMBER_SET *)const",
    "public: void __thiscall BIG_INT::QueryCompressedInteger(unsigned char *,unsigned char *)const",
    "public: unsigned short * __thiscall SNAPSHOT::GetSnapshotNtDeviceName(void)",
    "protected: unsigned char __thiscall VOL_LIODPDRV::Initialize(class WSTRING const *,class WSTRING const *,class SUPERAREA *,class MESSAGE *,unsigned char)",
    "public: unsigned char __thiscall NUMBER_SET::DoesIntersectSet(class BIG_INT,class BIG_INT)const",
    "public: virtual unsigned char __thiscall SECRUN::Write(void)",
    "public: class MEDIA_TRACK_INFORMATION * __thiscall MEDIA_TRACK_INFORMATION::CreateTrack(unsigned long,unsigned char)",
    "public: virtual enum FORMAT_ERROR_CODE __thiscall VOL_LIODPDRV::WriteEntireDrive(class MESSAGE *,void *,unsigned long,unsigned int,unsigned int)",
    "public: static unsigned char __stdcall SNAPSHOT::GetVolumeSnapshot(class WSTRING *,class SNAPSHOT * *)",
    "public: unsigned char __thiscall DP_DRIVE::QueryLastWritableAddress(unsigned long *,enum DP_DRIVE::NwaType)",
    "public: class MESSAGE * __thiscall IO_DP_DRIVE::GetMessageW(void)",
    "public: unsigned char __thiscall IO_DP_DRIVE::PowForceAllocation(unsigned long,unsigned long,unsigned long *,enum DP_DRIVE::NwaType)",
    "public: virtual __thiscall DP_DRIVE::~DP_DRIVE(void)",
    "public: virtual __thiscall TLINK::~TLINK(void)",
    "public: __thiscall INTSTACK::INTSTACK(void)",
    "public: unsigned char __thiscall DP_DRIVE::IsATformat(void)const",
    "unsigned char __stdcall InvalidateFve(class DSTRING *,class MESSAGE *,struct _FORMATEX_FN_PARAM *)",
    "public: static long __stdcall SUPERAREA::GenerateLabelNotification(class WSTRING const *,class WSTRING *,struct _FILE_FS_SIZE_INFORMATION *,struct _FILE_FS_VOLUME_INFORMATION *)",
    "public: unsigned char __thiscall INTSTACK::ReverseCopy(class INTSTACK *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::IsThisUdf(class LOG_IO_DP_DRIVE *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::IsArcSystemPartition(class WSTRING const *,unsigned char *)",
    "public: unsigned char __thiscall INTSTACK::Push(class BIG_INT)",
    "public: class MESSAGE * __thiscall SUPERAREA::GetMessageW(void)",
    "public: unsigned char __thiscall DP_DRIVE::QueryUdfMediaSupportsBackgroundFormat(void)",
    "public: unsigned char __thiscall IO_DP_DRIVE::Verify(class BIG_INT,class BIG_INT,class NUMBER_SET *)",
    "public: unsigned char __thiscall IO_DP_DRIVE::HardWrite(class BIG_INT,unsigned long,void *,unsigned char)",
    "public: enum _MEDIA_TYPE __thiscall DP_DRIVE::QueryRecommendedMediaType(void)const",
    "public: static unsigned char __stdcall IFS_SYSTEM::WriteToFile(class WSTRING const *,void *,unsigned long,unsigned char)",
    "public: unsigned char __thiscall DP_DRIVE::QueryLastRecordedAddress(unsigned long *)",
    "public: class BIG_INT __thiscall INTSTACK::Look(unsigned long)const",
    "public: static unsigned char __stdcall IFS_SYSTEM::QueryNtfsVersion(unsigned char *,unsigned char *,class LOG_IO_DP_DRIVE *,void *)",
    "public: virtual __thiscall SPARSE_SET::~SPARSE_SET(void)",
    "void __stdcall RestoreThreadExecutionState(long,unsigned long)",
    "public: unsigned char __thiscall DP_DRIVE::QueryUdfMediaNeedsLowLevelFormat(void)",
    "public: unsigned char __thiscall SPARSE_SET::CheckAndRemove(class BIG_INT,unsigned char *)",
    "public: static void __stdcall DRIVE_CACHE::GetPhaseSubPhase(unsigned short * *,unsigned short * *)",
    "public: unsigned char __thiscall MOUNT_POINT_MAP::QueryDriveName(class WSTRING *,class WSTRING *)",
    "public: enum FORMAT_ERROR_CODE __thiscall VOL_LIODPDRV::Format(class WSTRING const *,class MESSAGE *,unsigned long,unsigned long,unsigned long)",
    "public: virtual __thiscall BLOCK_CACHE::~BLOCK_CACHE(void)",
    "public: enum DRIVE_TYPE __thiscall DP_DRIVE::QueryDriveType(void)const",
    "public: static unsigned char __stdcall IFS_SYSTEM::CheckValidSecurityDescriptor(unsigned long,struct _SECURITY_DESCRIPTOR *)",
    "public: __thiscall DP_DRIVE::DP_DRIVE(void)",
    "public: unsigned char __thiscall MOUNT_POINT_MAP::AddDriveName(class WSTRING *,class WSTRING *)",
    "public: static unsigned char __stdcall IFS_SYSTEM::EnableFileSystem(class WSTRING const *)",
    "public: void __thiscall DP_DRIVE::SetLastStatus(long)",
    "public: unsigned char __thiscall NUMBER_SET::Remove(class BIG_INT)",
    "public: unsigned char __thiscall DP_DRIVE::QueryUdfMediaNeedsSparing(void)"
  ],
  "ifsutilx.dll": [
    "unsigned char __stdcall CreateVolumeSnapshot(unsigned short *,struct _SNAPSHOT_DATA * *)",
    "unsigned char __stdcall ReleaseVolumeSnapshot(struct _SNAPSHOT_DATA *)",
    "unsigned char __stdcall CheckSnapshotPresence(struct _SNAPSHOT_DATA *)",
    "unsigned char __stdcall InitializeCOM(unsigned char *)",
    "void __stdcall UninitializeCOM(void)"
  ],
  "igdDiag.dll": [
    "DetectNAT",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "imagehlp.dll": [
    "SymGetTypeInfo",
    "SymGetLinePrev",
    "ImageDirectoryEntryToData",
    "FindDebugInfoFileEx",
    "ReBaseImage64",
    "SymFindFileInPathW",
    "UnmapDebugInformation",
    "SymGetSymFromName64",
    "ReBaseImage",
    "SymInitialize",
    "SymMatchString",
    "EnumerateLoadedModules",
    "SymEnumTypesByNameW",
    "SymGetLineFromAddr64",
    "SetImageConfigInformation",
    "SymMatchFileName",
    "ImageRvaToSection",
    "MakeSureDirectoryPathExists",
    "SymGetSymbolFile",
    "ImageGetDigestStream",
    "SymGetModuleBase64",
    "SymMatchFileNameW",
    "SymSetContext",
    "SymSrvGetFileIndexesW",
    "SymMatchStringA",
    "SymEnumerateSymbolsW",
    "GetTimestampForLoadedLibrary",
    "SymSetScopeFromIndex",
    "SymGetSourceVarFromTokenW",
    "SymGetModuleInfo64",
    "SymGetSymFromName",
    "SymGetModuleInfoW64",
    "StackWalk",
    "MapFileAndCheckSumA",
    "SymGetSourceFileTokenW",
    "FindExecutableImageEx",
    "SymFunctionTableAccess64",
    "SymEnumTypes",
    "ImageNtHeader",
    "SymEnumerateModules",
    "SymGetModuleInfoW",
    "SymGetSymNext64",
    "SymUnloadModule64",
    "SymEnumTypesByName",
    "RemovePrivateCvSymbolic",
    "SymFunctionTableAccess",
    "SymGetLineFromAddr",
    "ImageGetCertificateHeader",
    "SymGetSymPrev64",
    "SplitSymbols",
    "SymGetLinePrev64",
    "SymGetSearchPath",
    "SymSrvGetFileIndexStringW",
    "SymUnDName64",
    "SymGetLineNext64",
    "GetImageConfigInformation",
    "EnumerateLoadedModulesW64",
    "ImageRemoveCertificate",
    "SymSetScopeFromAddr",
    "ImageLoad",
    "EnumerateLoadedModulesExW",
    "ImageEnumerateCertificates",
    "BindImage",
    "SymUnDName",
    "UnDecorateSymbolName",
    "SymEnumerateSymbolsW64",
    "FindFileInPath",
    "SymGetLineNext",
    "SymSrvGetFileIndexes",
    "StackWalk64",
    "SymGetLineFromName64",
    "SymLoadModule64",
    "SymEnumerateModules64",
    "FindDebugInfoFile",
    "SymGetOptions",
    "ImageAddCertificate",
    "MapDebugInformation",
    "GetImageUnusedHeaderBytes",
    "SymGetSourceFileFromTokenW",
    "SymFromName",
    "SymEnumSym",
    "SearchTreeForFile",
    "ImageDirectoryEntryToDataEx",
    "SymUnloadModule",
    "ImageGetCertificateData",
    "SymRegisterFunctionEntryCallback",
    "ImagehlpApiVersion",
    "SymEnumSymbols",
    "SymEnumerateSymbols",
    "SymGetTypeFromName",
    "SymCleanup",
    "SymEnumerateSymbols64",
    "CheckSumMappedFile",
    "MapAndLoad",
    "SymGetLineFromName",
    "SymSrvGetFileIndexString",
    "BindImageEx",
    "RemoveRelocations",
    "ImageRvaToVa",
    "SymMatchStringW",
    "EnumerateLoadedModulesEx",
    "SymRegisterCallback64",
    "SymGetTypeFromNameW",
    "ImagehlpApiVersionEx",
    "SymFromAddr",
    "SymGetModuleBase",
    "SymGetTypeInfoEx",
    "FindExecutableImage",
    "EnumerateLoadedModules64",
    "SymFindFileInPath",
    "SymSetSearchPath",
    "UnMapAndLoad",
    "ImageUnload",
    "SymGetSymFromAddr",
    "SymGetSymbolFileW",
    "RemovePrivateCvSymbolicEx",
    "SymGetSymPrev",
    "SymLoadModule",
    "FindFileInSearchPath",
    "SymEnumTypesW",
    "SymGetSymFromAddr64",
    "SymRegisterFunctionEntryCallback64",
    "UpdateDebugInfoFileEx",
    "SymEnumSymbolsForAddr",
    "SymSetOptions",
    "SymRegisterCallback",
    "TouchFileTimes",
    "SymGetSymNext",
    "MapFileAndCheckSumW",
    "SymGetModuleInfo",
    "UpdateDebugInfoFile"
  ],
  "imageres.dll": "No exports",
  "imagesp1.dll": "No exports",
  "imapi.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "imapi2.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "imapi2fs.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "imgutil.dll": [
    "GetMaxMIMEIDBytes",
    "DitherTo8",
    "DllCanUnloadNow",
    "CreateMIMEMap",
    "ComputeInvCMAP",
    "CreateDDrawSurfaceOnDIB",
    "DecodeImageEx",
    "DllGetClassObject",
    "DecodeImage",
    "IdentifyMIMEType",
    "SniffStream"
  ],
  "imm32.dll": [
    "ImmGetIMCLockCount",
    "ImmTranslateMessage",
    "ImmEnumRegisterWordA",
    "ImmInstallIMEW",
    "ImmIMPGetIMEW",
    "ImmInstallIMEA",
    "ImmGetStatusWindowPos",
    "ImmIMPSetIMEA",
    "ImmGenerateMessage",
    "ImmRequestMessageA",
    "ImmGetIMEFileNameA",
    "CtfImmIsGuidMapEnable",
    "CtfImmGetTMAEFlags",
    "ImmEscapeA",
    "ImmEnumInputContext",
    "ImmFreeLayout",
    "ImmEscapeW",
    "ImmGetRegisterWordStyleW",
    "ImmGetConversionListW",
    "ImmGetIMEFileNameW",
    "ImmSetCandidateWindow",
    "ImmAssociateContextEx",
    "ImmCreateSoftKeyboard",
    "ImmReleaseContext",
    "ImmGetImeMenuItemsW",
    "ImmDisableTextFrameService",
    "ImmSetCompositionStringW",
    "ImmConfigureIMEW",
    "ImmGetCompositionWindow",
    "ImmWINNLSGetIMEHotkey",
    "ImmDestroyIMCC",
    "CtfImmSetCiceroStartInThread",
    "ImmGetCompositionStringW",
    "CtfImmGenerateMessage",
    "ImmSendIMEMessageExA",
    "ImmGetIMCCSize",
    "ImmLoadLayout",
    "ImmUnregisterWordA",
    "CtfImmGetIMEFileName",
    "ImmGetCompositionFontA",
    "ImmGetImeMenuItemsA",
    "CtfImmGetCompatibleKeyboardLayout",
    "ImmGetImeInfoEx",
    "CtfImmRestoreToolbarWnd",
    "ImmGetCandidateListW",
    "ImmGetRegisterWordStyleA",
    "ImmWINNLSEnableIME",
    "ImmDisableIME",
    "ImmGetContext",
    "ImmDisableIme",
    "ImmEnumRegisterWordW",
    "ImmSystemHandler",
    "ImmGetCandidateWindow",
    "CtfImmIsTextFrameServiceDisabled",
    "ImmGetCandidateListA",
    "CtfImmNotify",
    "ImmGetCompositionFontW",
    "ImmRequestMessageW",
    "ImmUnlockImeDpi",
    "CtfImmTIMActivate",
    "ImmGetVirtualKey",
    "ImmIMPQueryIMEA",
    "ImmRegisterClient",
    "ImmIsUIMessageW",
    "ImmGetOpenStatus",
    "ImmIsIME",
    "ImmLockClientImc",
    "CtfImmGetGuidAtom",
    "ImmLoadIME",
    "CtfImmDispatchDefImeMessage",
    "ImmReSizeIMCC",
    "ImmSetConversionStatus",
    "ImmLockIMCC",
    "ImmPutImeMenuItemsIntoMappedFile",
    "CtfImmSetAppCompatFlags",
    "ImmGetCompositionStringA",
    "ImmSimulateHotKey",
    "ImmGetDescriptionW",
    "ImmGetProperty",
    "ImmGetDefaultIMEWnd",
    "ImmIsUIMessageA",
    "ImmIMPSetIMEW",
    "CtfImmLastEnabledWndDestroy",
    "CtfImmCoUninitialize",
    "ImmCallImeConsoleIME",
    "ImmSetStatusWindowPos",
    "ImmShowSoftKeyboard",
    "ImmGetGuideLineA",
    "ImmProcessKey",
    "ImmUnlockIMC",
    "ImmGetConversionListA",
    "ImmCreateIMCC",
    "CtfImmSetDefaultRemoteKeyboardLayout",
    "ImmGetHotKey",
    "ImmAssociateContext",
    "ImmRegisterWordA",
    "ImmLockImeDpi",
    "ImmGetIMCCLockCount",
    "ImmDestroySoftKeyboard",
    "ImmRegisterWordW",
    "ImmSetActiveContextConsoleIME",
    "ImmSetCompositionFontW",
    "ImmUnlockIMCC",
    "CtfImmIsCiceroEnabled",
    "CtfImmHideToolbarWnd",
    "CtfImmAppCompatEnableIMEonProtectedCode",
    "ImmGetCandidateListCountW",
    "GetKeyboardLayoutCP",
    "ImmSetCompositionFontA",
    "ImmSetActiveContext",
    "ImmGetCandidateListCountA",
    "ImmIMPQueryIMEW",
    "ImmActivateLayout",
    "ImmSetCompositionStringA",
    "ImmSetHotKey",
    "ImmUnlockClientImc",
    "ImmSetCompositionWindow",
    "CtfImmEnterCoInitCountSkipMode",
    "CtfImmLeaveCoInitCountSkipMode",
    "CtfImmIsCiceroStartedInThread",
    "ImmGetConversionStatus",
    "ImmLockIMC",
    "ImmGetDescriptionA",
    "ImmSetOpenStatus",
    "ImmGetAppCompatFlags",
    "ImmCreateContext",
    "ImmGetGuideLineW",
    "ImmSendIMEMessageExW",
    "ImmNotifyIME",
    "ImmWINNLSGetEnableStatus",
    "ImmDestroyContext",
    "ImmConfigureIMEA",
    "ImmIMPGetIMEA",
    "ImmUnregisterWordW"
  ],
  "inetcomm.dll": [
    "MimeOleEncodeHeader",
    "EssMLHistoryDecodeEx",
    "MimeOleSMimeCapRelease",
    "EssSecurityLabelEncodeEx",
    "MimeOleFileTimeToInetDate",
    "MimeEditIsSafeToRun",
    "EssSignCertificateDecodeEx",
    "HrFreeAttachData",
    "RichMimeEdit_CreateInstance",
    "MimeOleSMimeCapGetHashAlg",
    "MimeOleSetPropA",
    "EssContentHintEncodeEx",
    "MimeOleParseRfc822Address",
    "MimeOleGetCodePageCharset",
    "MimeOleGetExtContentType",
    "MimeGetAddressFormatW",
    "MimeOleCreatePropertySet",
    "HrAttachDataFromBodyPart",
    "MimeOleSMimeCapsFromDlg",
    "MimeOleGetContentTypeExt",
    "MimeOleSetBodyPropA",
    "MimeOleGetFileInfo",
    "MimeOleUnEscapeStringInPlaceW",
    "MimeOleSetCompatMode",
    "MimeOleGetRelatedSection",
    "MimeOleAlgStrengthFromSMimeCap",
    "MimeOleSetBodyPropW",
    "MimeOleClearDirtyTree",
    "HrSaveAttachToFile",
    "MimeOleGetPropertySchema",
    "EssReceiptRequestEncodeEx",
    "HrGetAttachIconByFile",
    "MimeOleCreateByteStream",
    "MimeOleSMimeCapAddCert",
    "HrDoAttachmentVerb",
    "MimeEditCreateMimeDocument",
    "MimeEditGetBackgroundImageUrl",
    "MimeEditDocumentFromStream",
    "MimeOleCreateVirtualStream",
    "MimeOleSetDefaultCharset",
    "MimeOleCreateSecurity",
    "MimeOleGetCharsetInfo",
    "MimeOleCreateHeaderTable",
    "CreateNNTPTransport",
    "MimeOleGenerateCID",
    "EssReceiptEncodeEx",
    "MimeOleSetPropW",
    "MimeOleInetDateToFileTime",
    "MimeEditViewSource",
    "MimeOleGetBodyPropA",
    "DllCanUnloadNow",
    "MimeOleGetInternat",
    "DllGetClassObject",
    "MimeOleGetCertsFromThumbprints",
    "MimeOleGenerateFileName",
    "MimeOleParseMhtmlUrl",
    "MimeOleCreateBody",
    "HrSaveAttachmentAs",
    "MimeOleGenerateMID",
    "HrAttachDataFromFile",
    "MimeOleFindCharset",
    "MimeOleGetFileInfoW",
    "MimeOleGetAllocator",
    "CreateRASTransport",
    "HrAthGetFileName",
    "EssReceiptRequestDecodeEx",
    "MimeOleCreateHashTable",
    "MimeOleGetPropA",
    "EssMLHistoryEncodeEx",
    "HrGetDisplayNameWithSizeForFile",
    "MimeOleCreateMessageParts",
    "HrAthGetFileNameW",
    "EssKeyExchPreferenceEncodeEx",
    "HrGetLastOpenFileDirectoryW",
    "HrGetAttachIcon",
    "MimeOleSMimeCapInit",
    "EssKeyExchPreferenceDecodeEx",
    "CreateSMTPTransport",
    "MimeOleSMimeCapAddSMimeCap",
    "EssContentHintDecodeEx",
    "MimeOleGetDefaultCharset",
    "MimeOleDecodeHeader",
    "MimeOleGetPropW",
    "MimeOleUnEscapeStringInPlace",
    "MimeOleParseRfc822AddressW",
    "MimeOleConvertEnrichedToHTML",
    "EssReceiptDecodeEx",
    "CreateIMAPTransport",
    "MimeOleSMimeCapsFull",
    "MimeOleSMimeCapGetEncAlg",
    "MimeOleObjectFromMoniker",
    "MimeOleSMimeCapsToDlg",
    "EssSecurityLabelDecodeEx",
    "EssSignCertificateEncodeEx",
    "MimeOleCreateMessage",
    "MimeOleAlgNameFromSMimeCap",
    "CreateIMAPTransport2",
    "GetDllMajorVersion",
    "CreateRangeList",
    "MimeOleGetCodePageInfo",
    "HrCreateDisplayNameWithSizeForFile",
    "MimeOleGetBodyPropW",
    "CreatePOP3Transport",
    "MimeOleGetFileExtension",
    "HrGetLastOpenFileDirectory",
    "MimeOleOpenFileStream",
    "MimeOleStripHeaders",
    "CreateCommunityTransport"
  ],
  "inetmib1.dll": [
    "SnmpExtensionQuery",
    "SnmpExtensionInitEx",
    "SnmpExtensionTrap",
    "SnmpExtensionInit"
  ],
  "inetpp.dll": [
    "InitializePrintProvidor"
  ],
  "inetppui.dll": [
    "InitializePrintMonitorUI"
  ],
  "infocardapi.dll": [
    "HashCore",
    "FreeToken",
    "GetBrowserToken",
    "GetKeyedHash",
    "GenerateDerivedKey",
    "DllRegisterServer",
    "TransformBlock",
    "VerifyHash",
    "DllUnregisterServer",
    "HashFinal",
    "GetToken",
    "ManageCardSpace",
    "GetCryptoTransform",
    "ImportInformationCard",
    "EnsureServiceRunning",
    "CloseCryptoHandle",
    "DllCanUnloadNow",
    "Decrypt",
    "Encrypt",
    "TransformFinalBlock",
    "SignHash",
    "DllGetClassObject"
  ],
  "input.dll": [
    "SaveDefaultUserInputSettings",
    "SaveSystemAcctInputSettings",
    "GetDefaultLayout",
    "CPlApplet",
    "InstallLayoutOrTip",
    "InputDll_DownlevelInitialize",
    "InstallLayoutOrTipUserReg",
    "InputDll_DownlevelEnumLayoutOrTipForSetup",
    "InputDll_DownlevelSetUILanguage",
    "InputDll_DownlevelUninitialize",
    "GetLayoutDescription",
    "SetDefaultLayoutOrTip",
    "QueryLayoutOrTipStringUserReg",
    "QueryLayoutOrTipString",
    "EnumLayoutOrTipForSetup",
    "EnumEnabledLayoutOrTip"
  ],
  "inseng.dll": [
    "CheckTrust",
    "DownloadFile",
    "DllCanUnloadNow",
    "CheckForVersionConflict",
    "CheckTrustEx",
    "DllGetClassObject",
    "GetICifRWFileFromFile",
    "GetICifFileFromFile",
    "PurgeDownloadDirectory"
  ],
  "iologmsg.dll": "No exports",
  "iphlpsvc.dll": [
    "IphlpsvcSysprepGeneralize",
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "ipnathlp.dll": [
    "SvchostPushServiceGlobals",
    "NatQueryInformationRedirectHandle",
    "NatCreateDynamicRedirect",
    "NhCreateStreamSocket",
    "NhDeleteSocket",
    "NatReleasePortReservation",
    "NhCreateDatagramSocket",
    "NatCancelRedirect",
    "NhAcquireFixedLengthBuffer",
    "NatShutdownTranslator",
    "NatCreateDynamicFullRedirect",
    "NhWriteDatagramSocket",
    "NatCreateRedirectEx",
    "NhAcquireVariableLengthBuffer",
    "NatCreateRedirect",
    "RegisterProtocol",
    "NhReadStreamSocket",
    "NhWriteStreamSocket",
    "NatAcquirePortReservation",
    "NhReadDatagramSocket",
    "NatLookupAndQueryInformationSessionMapping",
    "NatQueryInformationRedirect",
    "NhReleaseBuffer",
    "NatCancelDynamicRedirect",
    "NatShutdownPortReservation",
    "NatInitializePortReservation",
    "NhInitializeBufferManagement",
    "NhAcceptStreamSocket",
    "NhInitializeTraceManagement",
    "NatInitializeTranslator",
    "NatCreateDynamicRedirectEx",
    "ServiceMain"
  ],
  "iprop.dll": [
    "StgCreatePropSetStg",
    "PropVariantClear",
    "FreePropVariantArray",
    "FmtIdToPropStgName",
    "PropStgNameToFmtId",
    "StgCreatePropStg",
    "StgOpenPropStg",
    "PropVariantCopy"
  ],
  "iprtprio.dll": [
    "SetPriorityInfo",
    "GetPriorityInfo",
    "ComputeRouteMetric"
  ],
  "iprtrmgr.dll": [
    "StartRouter",
    "MapInterfaceToAdapter"
  ],
  "ipsecsnp.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "ipsmsnap.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "irclass.dll": [
    "IrSIRClassCoInstaller",
    "IrSIRPortPropPageProvider"
  ],
  "irmon.dll": [
    "ServiceHandler",
    "ServiceMain"
  ],
  "iscsicpl.dll": [
    "CPlApplet"
  ],
  "iscsidsc.dll": [
    "RemovePersistentIScsiDeviceW",
    "AddISNSServerA",
    "RemoveIScsiSendTargetPortalA",
    "GetIScsiIKEInfoA",
    "GetIScsiIKEInfoW",
    "ReportIScsiTargetsA",
    "ReportIScsiPersistentLoginsW",
    "ReportActiveIScsiTargetMappingsA",
    "ReportPersistentIScsiDevicesA",
    "RefreshISNSServerW",
    "SetIScsiTunnelModeOuterAddressA",
    "AddIScsiStaticTargetA",
    "GetIScsiTargetInformationA",
    "SendScsiReadCapacity",
    "SendScsiInquiry",
    "AddRadiusServerW",
    "ReportIScsiInitiatorListW",
    "AddPersistentIScsiDeviceW",
    "GetIScsiInitiatorNodeNameA",
    "ReportISNSServerListW",
    "RemoveIScsiStaticTargetW",
    "RefreshIScsiSendTargetPortalW",
    "ReportIScsiInitiatorListA",
    "GetDevicesForIScsiSessionA",
    "ReportIScsiSendTargetPortalsW",
    "GetIScsiSessionListA",
    "RefreshIScsiSendTargetPortalA",
    "RemoveIScsiPersistentTargetW",
    "ReportRadiusServerListW",
    "RemoveRadiusServerA",
    "SetIScsiInitiatorNodeNameW",
    "GetIScsiVersionInformation",
    "ReportIScsiTargetPortalsW",
    "RefreshISNSServerA",
    "LoginIScsiTargetW",
    "ReportRadiusServerListA",
    "GetDevicesForIScsiSessionW",
    "SetIScsiIKEInfoA",
    "SetIScsiInitiatorRADIUSSharedSecret",
    "SendScsiReportLuns",
    "DllMain",
    "AddIScsiConnectionW",
    "AddIScsiSendTargetPortalW",
    "RemovePersistentIScsiDeviceA",
    "GetIScsiSessionListEx",
    "SetupPersistentIScsiDevices",
    "ReportISNSServerListA",
    "GetIScsiInitiatorNodeNameW",
    "RemoveRadiusServerW",
    "GetIScsiSessionListW",
    "ReportIScsiPersistentLoginsA",
    "RemoveIScsiStaticTargetA",
    "AddIScsiSendTargetPortalA",
    "ReportIScsiSendTargetPortalsExA",
    "RemoveIScsiPersistentTargetA",
    "SetIScsiIKEInfoW",
    "LogoutIScsiTarget",
    "ClearPersistentIScsiDevices",
    "SetIScsiGroupPresharedKey",
    "AddRadiusServerA",
    "AddIScsiConnectionA",
    "AddPersistentIScsiDeviceA",
    "LoginIScsiTargetA",
    "AddIScsiStaticTargetW",
    "RemoveISNSServerW",
    "RemoveISNSServerA",
    "ReportIScsiSendTargetPortalsA",
    "AddISNSServerW",
    "SetIScsiInitiatorCHAPSharedSecret",
    "SetupPersistentIScsiVolumes",
    "RemoveIScsiSendTargetPortalW",
    "GetIScsiTargetInformationW",
    "SetIScsiTunnelModeOuterAddressW",
    "SetIScsiInitiatorNodeNameA",
    "ReportPersistentIScsiDevicesW",
    "ReportIScsiTargetPortalsA",
    "ReportIScsiSendTargetPortalsExW",
    "RemoveIScsiConnection",
    "ReportActiveIScsiTargetMappingsW",
    "ReportIScsiTargetsW"
  ],
  "iscsied.dll": [
    "DiscpLoadGPSettings",
    "DllMain"
  ],
  "iscsiexe.dll": [
    "SvchostPushServiceGlobals",
    "DiscpEstablishServiceLinkage",
    "ServiceMain"
  ],
  "iscsilog.dll": "No exports",
  "iscsium.dll": [
    "DiscpAnsiToUnicode",
    "DiscpFreeProcessMemory",
    "DiscpCopyUnicodeString",
    "DiscpValidateiSCSIString",
    "DiscpParseKeyValue",
    "DiscpUnicodeToUTF8",
    "DiscpMapiSCSIString",
    "DiscpRegisterDebugMask",
    "DiscpGenerateiScsiNameFromComputerName",
    "DiscpEnumerateRegistryValues",
    "DiscpTimebomb",
    "DiscpIsDNSAddress",
    "DiscpPadDataBlock",
    "DiscpLoadSystemLibrary",
    "DiscpEnableWinsock",
    "DiscpAnsiCharsToString",
    "DiscpCopyToCountedString",
    "DiscpAllocProcessMemory",
    "DiscpQueryAllData",
    "DiscpGetRegistryValue",
    "DiscpTextAddrToBinary",
    "DiscpDebugPrintX",
    "DiscpParseAllData",
    "DiscpEstablishIrpPump",
    "DiscpGetPnpDeviceId",
    "DiscpEnableEventlog",
    "DiscpRegisterHeap",
    "DiscpDisestablishIrpPump",
    "DiscpEstablishTCPSocket",
    "DiscpParseSingleInstance",
    "DiscpDisableEventlog",
    "DiscpPnpDeviceInterfaceToInstanceName",
    "DiscpOpenRegistryKey",
    "DiscpExecuteMethod",
    "DiscpGuidToString",
    "DiscpDisableWinsock",
    "DiscpEnumerateDeviceInterfaces",
    "DllMain",
    "DiscpEnableLogToFile",
    "DiscpReportEventlog",
    "DiscpSendIrpRequest",
    "DiscpUTF8ToUnicode",
    "DiscpFreeMemory",
    "DiscpIdKeyToString",
    "DiscpAllocMemory",
    "DiscpQuerySingleInstance",
    "DiscpDisableLogToFile",
    "DiscpRegCloseKey",
    "DiscpRegisterDeviceInterfaceNotification",
    "DiscpUnicodeToAnsiSize",
    "DiscpIsStringInList",
    "DiscpRemoveStringFromMultiSzList",
    "DiscpAddStringToMultiSzList",
    "DiscpFreeDeviceInterfaceList",
    "DiscpCopyStringToAnsi",
    "DiscpDecryptBuffer",
    "DiscpDuplicateString",
    "DiscpSockAddrToText",
    "DiscpULongAddList",
    "DiscpRegisterForDeviceInterfaceNotfication",
    "DiscpReportEventlogWithStatus",
    "Discpxtoi",
    "DiscpXtoI",
    "DiscpCopyString",
    "DiscpAnsiToUnicodeSize",
    "DiscpSetRegistryValue",
    "DiscpEncryptBuffer",
    "DiscpAlignDataStruct",
    "DiscpUnicodeToAnsi",
    "DiscpGetStringFromDataBlock"
  ],
  "iscsiwmi.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "itircl.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "itss.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "iyuv_32.dll": [
    "DriverDialogProc",
    "DriverProc",
    "AboutDialogProc",
    "DllMain"
  ],
  "jnwmon.dll": [
    "InitializePrintMonitor2"
  ],
  "jscript.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "jsproxy.dll": [
    "InternetInitializeAutoProxyDll",
    "InternetGetProxyInfo",
    "InternetGetProxyInfoEx",
    "InternetInitializeAutoProxyDllEx",
    "InternetDeInitializeAutoProxyDllEx",
    "InternetDeInitializeAutoProxyDll"
  ],
  "KBDA1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDA2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDA3.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDAL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDARME.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDARMW.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDAZE.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDAZEL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBASH.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBE.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBENE.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBGPH.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBGPH1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBHC.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBLR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBU.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDBULG.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDCA.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDCAN.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDCR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDCZ.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDCZ1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDCZ2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDDA.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDDIV1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDDIV2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDDV.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDES.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDEST.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDFA.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDFC.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDFI.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDFI1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDFO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDFR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDGAE.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDGEO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDGKL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDGR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDGR1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDGRLND.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHAU.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHE.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHE220.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHE319.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHEB.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHELA2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHELA3.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHEPT.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHU.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDHU1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDIBO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDIC.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINASA.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINBE1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINBE2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINBEN.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINDEV.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINGUJ.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINHIN.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINKAN.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINMAL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINMAR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINORI.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINPUN.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINTAM.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINTEL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDINUK2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDIR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDIT.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDIT142.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDIULAT.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDJPN.DLL": [
    "KbdNlsLayerDescriptor",
    "KbdLayerRealDllFileNT4",
    "KbdLayerDescriptor",
    "KbdLayerMultiDescriptor",
    "KbdLayerRealDllFile"
  ],
  "KBDKAZ.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDKHMR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDKOR.DLL": [
    "KbdNlsLayerDescriptor",
    "KbdLayerRealDllFileNT4",
    "KbdLayerDescriptor",
    "KbdLayerMultiDescriptor",
    "KbdLayerRealDllFile"
  ],
  "KBDKYR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDLA.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDLAO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDLT.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDLT1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDLT2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDLV.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDLV1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDMAC.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDMACST.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDMAORI.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDMLT47.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDMLT48.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDMON.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDMONMO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDNE.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDNEPR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDNO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDNO1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDNSO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDPASH.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDPL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDPL1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDPO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDRO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDROPR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDROST.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDRU.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDRU1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSF.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSG.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSL1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSMSFI.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSMSNO.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSN1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSOREX.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSORS1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSORST.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSP.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSW.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSW09.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSYR1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDSYR2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTAJIK.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTAT.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTH0.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTH1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTH2.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTH3.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTIPRC.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTUF.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTUQ.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDTURME.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUGHR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUGHR1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUK.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUKX.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUR1.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDURDU.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUS.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUSA.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUSL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUSR.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUSX.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDUZB.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDVNTC.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDWOL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDYAK.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDYBA.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDYCC.DLL": [
    "KbdLayerDescriptor"
  ],
  "KBDYCL.DLL": [
    "KbdLayerDescriptor"
  ],
  "KMSVC.DLL": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "ServiceMain"
  ],
  "KernelBase.dll": [
    "GetSidLengthRequired",
    "lstrcmpiA",
    "AreAnyAccessesGranted",
    "GlobalFree",
    "OpenThreadToken",
    "FindNextFileW",
    "GetProcAddress",
    "SetSecurityDescriptorGroup",
    "GetCalendarInfoW",
    "GetModuleHandleA",
    "GetVersionExW",
    "InvalidateTzSpecificCache",
    "VerLanguageNameA",
    "InitializeSRWLock",
    "Internal_EnumSystemLocales",
    "GetSystemDefaultLCID",
    "GetFileAttributesExA",
    "GetLogicalProcessorInformation",
    "LoadStringW",
    "GetAce",
    "GetLocalTime",
    "ObjectCloseAuditAlarmW",
    "UpdateProcThreadAttribute",
    "GetSystemInfo",
    "NlsDispatchAnsiEnumProc",
    "FlushProcessWriteBuffers",
    "ReleaseSRWLockExclusive",
    "ReleaseSRWLockShared",
    "GetUserDefaultLCID",
    "GetUserInfoWord",
    "HeapSummary",
    "WriteFileEx",
    "AccessCheckByTypeResultListAndAuditAlarmByHandleW",
    "SuspendThread",
    "GetSecurityDescriptorRMControl",
    "GetOEMCP",
    "AllocateAndInitializeSid",
    "FileTimeToSystemTime",
    "GetVolumeInformationW",
    "ImpersonateSelf",
    "UnlockFile",
    "ReadFile",
    "GetCommandLineW",
    "GetLocaleInfoW",
    "CreateDirectoryA",
    "GetDiskFreeSpaceA",
    "DeleteCriticalSection",
    "HeapWalk",
    "LocaleNameToLCID",
    "DeleteTimerQueueEx",
    "AddAccessAllowedObjectAce",
    "SetFileApisToOEM",
    "EnumDateFormatsExW",
    "WideCharToMultiByte",
    "NlsUpdateLocale",
    "CreateIoCompletionPort",
    "MakeAbsoluteSD",
    "GetSystemTime",
    "SetEnvironmentVariableW",
    "GetFileInformationByHandle",
    "FreeSid",
    "GetModuleHandleExW",
    "InitializeCriticalSectionAndSpinCount",
    "CreateEventExA",
    "AddAccessAllowedAceEx",
    "MakeSelfRelativeSD",
    "QueryDepthSList",
    "SubmitThreadpoolWork",
    "QueryDosDeviceW",
    "DuplicateHandle",
    "ResolveLocaleName",
    "GetThreadUILanguage",
    "GetStartupInfoW",
    "lstrcpyn",
    "SetCriticalSectionSpinCount",
    "NlsValidateLocale",
    "GetUserDefaultLangID",
    "InterlockedCompareExchange",
    "OpenMutexW",
    "SetProcessAffinityUpdateMode",
    "AddAuditAccessAce",
    "Sleep",
    "GetLocaleInfoEx",
    "FindNLSString",
    "IsNLSDefinedString",
    "SetKernelObjectSecurity",
    "ConvertToAutoInheritPrivateObjectSecurity",
    "DeleteTimerQueueTimer",
    "CreateFileMappingNumaW",
    "QueryThreadpoolStackInformation",
    "BemFreeReference",
    "SetThreadLocale",
    "MapViewOfFileEx",
    "CloseThreadpoolIo",
    "CallbackMayRunLong",
    "HeapAlloc",
    "EncodeSystemPointer",
    "AccessCheckByType",
    "SetLocalTime",
    "ProcessIdToSessionId",
    "LocalAlloc",
    "ImpersonateLoggedOnUser",
    "WaitForSingleObject",
    "OutputDebugStringA",
    "SetNamedPipeHandleState",
    "CloseThreadpoolCleanupGroupMembers",
    "FlushViewOfFile",
    "BemFreeContract",
    "FlsGetValue",
    "CompareStringEx",
    "GetFileMUIInfo",
    "lstrcpynA",
    "GetWindowsAccountDomainSid",
    "GetProcessHeaps",
    "GetFileTime",
    "GetProcessHeap",
    "SetPrivateObjectSecurityEx",
    "CreatePrivateObjectSecurityEx",
    "GetVersionExA",
    "GetComputerNameExA",
    "GetUserDefaultUILanguage",
    "MultiByteToWideChar",
    "Wow64RevertWow64FsRedirection",
    "LockResource",
    "EnumTimeFormatsEx",
    "QueryPerformanceCounter",
    "FlsAlloc",
    "FindStringOrdinal",
    "Internal_EnumSystemCodePages",
    "GetStringTypeW",
    "FlsSetValue",
    "GetCurrentProcessId",
    "FindNextChangeNotification",
    "ImpersonateAnonymousToken",
    "GetLastError",
    "FlushFileBuffers",
    "FindFirstFileA",
    "OpenRegKey",
    "GetEraNameCountedString",
    "TzSpecificLocalTimeToSystemTime",
    "GetCPHashNode",
    "HeapLock",
    "BaseReleaseProcessDllPath",
    "CompareStringA",
    "AddMandatoryAce",
    "CloseThreadpoolWork",
    "CreateThreadpoolTimer",
    "GetQueuedCompletionStatus",
    "DeleteAce",
    "LocalFree",
    "SetThreadToken",
    "LocalReAlloc",
    "ConnectNamedPipe",
    "WaitForSingleObjectEx",
    "WriteProcessMemory",
    "GetSecurityDescriptorGroup",
    "SetThreadpoolTimer",
    "CreateMutexExW",
    "FindCloseChangeNotification",
    "StartThreadpoolIo",
    "GetLongPathNameW",
    "SetThreadPriorityBoost",
    "SetProcessShutdownParameters",
    "InitializeCriticalSection",
    "InterlockedExchangeAdd",
    "LoadStringA",
    "SetFileAttributesW",
    "FindFirstFileExA",
    "lstrcmp",
    "InitializeSid",
    "VirtualAlloc",
    "GetHandleInformation",
    "AddAce",
    "lstrcmpi",
    "UnregisterWaitEx",
    "GetFileSecurityW",
    "lstrlen",
    "IsValidRelativeSecurityDescriptor",
    "CompareStringOrdinal",
    "DeviceIoControl",
    "SetThreadpoolStackInformation",
    "InterlockedPushListSList",
    "GetStringTypeA",
    "ReadFileScatter",
    "BaseInvalidateProcessSearchPathCache",
    "GetCommandLineA",
    "BaseInvalidateDllSearchPathCache",
    "FindFirstFileExW",
    "GetSystemPreferredUILanguages",
    "GetSystemWindowsDirectoryW",
    "SetPriorityClass",
    "GetDynamicTimeZoneInformation",
    "GetEnvironmentStringsW",
    "LoadLibraryExW",
    "WaitForThreadpoolIoCallbacks",
    "GetFileAttributesW",
    "SetSecurityDescriptorDacl",
    "GetThreadLocale",
    "GetTokenInformation",
    "DestroyPrivateObjectSecurity",
    "WriteFileGather",
    "GetFullPathNameA",
    "EnumTimeFormatsW",
    "FatalAppExitA",
    "GetSecurityDescriptorSacl",
    "GetACP",
    "WaitForMultipleObjectsEx",
    "IsValidLocaleName",
    "SetLastError",
    "SetWaitableTimerEx",
    "BaseReleaseProcessExePath",
    "FindVolumeClose",
    "DisassociateCurrentThreadFromCallback",
    "lstrcmpW",
    "LoadResource",
    "GetLengthSid",
    "NlsGetCacheUpdateCount",
    "GetNamedPipeClientComputerNameW",
    "SetCurrentDirectoryW",
    "EnumSystemLocalesA",
    "FreeLibraryAndExitThread",
    "InitializeProcThreadAttributeList",
    "WriteFile",
    "ExitProcess",
    "NlsCheckPolicy",
    "UnlockFileEx",
    "lstrcmpA",
    "GetProcessTimes",
    "GetStringTableEntry",
    "lstrcpynW",
    "GetThreadId",
    "EnterCriticalSection",
    "CreateMutexExA",
    "CreateTimerQueue",
    "DeleteFileW",
    "lstrlenA",
    "LocalUnlock",
    "EnumCalendarInfoExW",
    "CreatePipe",
    "OpenSemaphoreW",
    "FindFirstChangeNotificationW",
    "SetSecurityDescriptorControl",
    "LoadLibraryExA",
    "SetThreadpoolWait",
    "FlsFree",
    "SetStdHandle",
    "InterlockedPushEntrySList",
    "GetSidIdentifierAuthority",
    "HeapCreate",
    "NlsEventDataDescCreate",
    "LCMapStringEx",
    "GetStringTypeExW",
    "BaseDllMapResourceIdW",
    "FindNLSStringEx",
    "EqualDomainSid",
    "IsWellKnownSid",
    "GetQueuedCompletionStatusEx",
    "IsDBCSLeadByteEx",
    "GetTickCount",
    "CreateFileA",
    "CreateMutexA",
    "Internal_EnumDateFormats",
    "DisableThreadLibraryCalls",
    "GetPriorityClass",
    "GetCurrencyFormatEx",
    "lstrlenW",
    "TryAcquireSRWLockExclusive",
    "SetSecurityDescriptorRMControl",
    "VirtualFreeEx",
    "GetLogicalProcessorInformationEx",
    "DecodeSystemPointer",
    "GetNamedPipeAttribute",
    "PrivilegeCheck",
    "NeedCurrentDirectoryForExePathW",
    "GlobalAlloc",
    "CreateRemoteThreadEx",
    "VirtualProtectEx",
    "SetThreadpoolThreadMinimum",
    "CreateFileMappingW",
    "CreateSemaphoreExW",
    "InitializeSecurityDescriptor",
    "NlsGetACPFromLocale",
    "GetSystemTimeAdjustment",
    "ExitThread",
    "GetProcessPreferredUILanguages",
    "OpenProcess",
    "SpecialMBToWC",
    "VirtualQuery",
    "CreateThreadpoolCleanupGroup",
    "DisconnectNamedPipe",
    "TryEnterCriticalSection",
    "CheckGroupPolicyEnabled",
    "SetThreadpoolThreadMaximum",
    "InterlockedFlushSList",
    "AddAccessDeniedAce",
    "GetCurrentThreadId",
    "GetSystemDirectoryA",
    "SetSecurityDescriptorOwner",
    "KernelBaseGetGlobalData",
    "lstrcmpiW",
    "CreateRemoteThread",
    "CreateWellKnownSid",
    "GetSecurityDescriptorDacl",
    "FindFirstFreeAce",
    "CreateThreadpoolWork",
    "GetWindowsDirectoryW",
    "ResumeThread",
    "ImpersonateNamedPipeClient",
    "GetSystemDefaultLangID",
    "ChangeTimerQueueTimer",
    "AdjustTokenPrivileges",
    "CreateEventExW",
    "CancelIoEx",
    "TlsSetValue",
    "AccessCheckByTypeResultListAndAuditAlarmW",
    "GetVolumePathNameW",
    "PostQueuedCompletionStatus",
    "QueryProcessAffinityUpdateMode",
    "IsProcessInJob",
    "NeedCurrentDirectoryForExePathA",
    "GetCurrentDirectoryA",
    "PulseEvent",
    "GetFullPathNameW",
    "CloseThreadpoolWait",
    "CreateEventA",
    "AccessCheckByTypeResultList",
    "HeapFree",
    "SearchPathW",
    "FindNextFileA",
    "IsValidSecurityDescriptor",
    "TlsGetValue",
    "InitializeSListHead",
    "DeleteFileA",
    "GetErrorMode",
    "SetAclInformation",
    "LCMapStringW",
    "ExpandEnvironmentStringsA",
    "IsWow64Process",
    "IsValidLocale",
    "IsValidSid",
    "LocalFileTimeToFileTime",
    "EnumCalendarInfoW",
    "InterlockedPopEntrySList",
    "OpenWaitableTimerW",
    "CloseThreadpoolTimer",
    "Internal_EnumTimeFormats",
    "InternalLcidToName",
    "AllocateLocallyUniqueId",
    "SwitchToThread",
    "FatalAppExitW",
    "AcquireSRWLockExclusive",
    "GetUserInfo",
    "GetModuleHandleW",
    "GetLongPathNameA",
    "WaitForThreadpoolTimerCallbacks",
    "SetFileInformationByHandle",
    "GetSecurityDescriptorLength",
    "AddAuditAccessAceEx",
    "VirtualAllocEx",
    "GetUserDefaultLocaleName",
    "HeapValidate",
    "GetDriveTypeW",
    "EnumLanguageGroupLocalesW",
    "FreeLibraryWhenCallbackReturns",
    "DuplicateToken",
    "IsThreadpoolTimerSet",
    "FreeEnvironmentStringsW",
    "OpenThread",
    "InterlockedIncrement",
    "HeapCompact",
    "MakeAbsoluteSD2",
    "IsValidLanguageGroup",
    "AddAccessDeniedObjectAce",
    "GetThreadPriority",
    "InitializeCriticalSectionEx",
    "AddAccessAllowedAce",
    "Internal_EnumSystemLanguageGroups",
    "LoadStringByReference",
    "FindFirstVolumeW",
    "OpenProcessToken",
    "TryAcquireSRWLockShared",
    "ObjectOpenAuditAlarmW",
    "GetComputerNameExW",
    "GetModuleHandleExA",
    "GetVolumeInformationByHandleW",
    "GetPtrCalDataArray",
    "GetNLSVersionEx",
    "GetCurrentProcess",
    "DefineDosDeviceW",
    "GetNumberFormatEx",
    "DeleteProcThreadAttributeList",
    "LoadStringBaseExW",
    "CreatePrivateObjectSecurity",
    "RegisterWaitForSingleObjectEx",
    "TerminateThread",
    "GetFileType",
    "FindFirstFileW",
    "SetLocaleInfoW",
    "SetEvent",
    "CreateThreadpoolWait",
    "LocalLock",
    "SetErrorMode",
    "QueryPerformanceFrequency",
    "GetPrivateObjectSecurity",
    "GetDiskFreeSpaceW",
    "TlsAlloc",
    "CloseHandle",
    "SetEventWhenCallbackReturns",
    "EnumSystemLocalesEx",
    "GetCurrencyFormatW",
    "OpenFileMappingW",
    "AccessCheckByTypeAndAuditAlarmW",
    "CompareFileTime",
    "EnumUILanguagesW",
    "GetFallbackDisplayName",
    "TransactNamedPipe",
    "GetNamedLocaleHashNode",
    "EnumSystemLocalesW",
    "EnumSystemLanguageGroupsW",
    "GetWindowsDirectoryA",
    "SetEndOfFile",
    "RevertToSelf",
    "NlsIsUserDefaultLocale",
    "FindResourceExW",
    "FormatMessageW",
    "AdjustTokenGroups",
    "GetKernelObjectSecurity",
    "MapViewOfFile",
    "GetExitCodeProcess",
    "PrivilegedServiceAuditAlarmW",
    "GetExitCodeThread",
    "GetFileAttributesExW",
    "GetProcessId",
    "NlsUpdateSystemLocale",
    "CreateThread",
    "BemCopyReference",
    "SetTokenInformation",
    "CreateWaitableTimerExW",
    "TerminateProcess",
    "CopySid",
    "UnmapViewOfFile",
    "GetCPFileNameFromRegistry",
    "LeaveCriticalSection",
    "AreAllAccessesGranted",
    "ReleaseSemaphore",
    "GetModuleFileNameW",
    "FileTimeToLocalFileTime",
    "ExpandEnvironmentStringsW",
    "GetThreadPriorityBoost",
    "VerLanguageNameW",
    "GetSystemDefaultUILanguage",
    "CreateRestrictedToken",
    "GetEnvironmentStrings",
    "TrySubmitThreadpoolCallback",
    "SetFilePointer",
    "SetFileAttributesA",
    "AddAccessDeniedAceEx",
    "AddAuditAccessObjectAce",
    "OpenEventA",
    "GlobalMemoryStatusEx",
    "ReleaseMutexWhenCallbackReturns",
    "GetTickCount64",
    "GetVersion",
    "RaiseException",
    "OpenEventW",
    "SetEnvironmentVariableA",
    "MapGenericMask",
    "GetSystemDefaultLocaleName",
    "HeapQueryInformation",
    "Beep",
    "SetPrivateObjectSecurity",
    "GetLogicalDrives",
    "GetUserPreferredUILanguages",
    "SetStdHandleEx",
    "ReleaseMutex",
    "GetLocaleInfoHelper",
    "GetSystemWindowsDirectoryA",
    "ReadProcessMemory",
    "IsTokenRestricted",
    "SetCurrentDirectoryA",
    "FindClose",
    "SetHandleInformation",
    "RemoveDirectoryA",
    "CreateEventW",
    "CancelWaitableTimer",
    "AcquireSRWLockShared",
    "DebugBreak",
    "GetTempFileNameW",
    "FindFirstChangeNotificationA",
    "SetFileValidData",
    "ResetEvent",
    "LCMapStringA",
    "GetPtrCalData",
    "NotifyMountMgr",
    "GetOverlappedResult",
    "CancelThreadpoolIo",
    "GetEnvironmentVariableA",
    "ReleaseSemaphoreWhenCallbackReturns",
    "FormatMessageA",
    "LCIDToLocaleName",
    "CreateThreadpoolIo",
    "GetCalendarInfoEx",
    "EnumDateFormatsExEx",
    "GetSystemTimeAsFileTime",
    "SleepEx",
    "VirtualProtect",
    "IsDebuggerPresent",
    "EnumDateFormatsW",
    "EncodePointer",
    "HeapReAlloc",
    "InterlockedExchange",
    "AccessCheckAndAuditAlarmW",
    "DuplicateTokenEx",
    "HeapUnlock",
    "ObjectPrivilegeAuditAlarmW",
    "Internal_EnumCalendarInfo",
    "CompareStringW",
    "FreeEnvironmentStringsA",
    "VirtualQueryEx",
    "GetFileSizeEx",
    "SetThreadPriority",
    "GetDiskFreeSpaceExW",
    "BemCreateReference",
    "IsValidAcl",
    "GetFileMUIPath",
    "FoldStringW",
    "ConvertDefaultLocale",
    "NlsWriteEtwEvent",
    "GetCPInfoExW",
    "CreateMutexW",
    "EnumSystemCodePagesW",
    "EqualPrefixSid",
    "GetEnvironmentVariableW",
    "SetFilePointerEx",
    "PeekNamedPipe",
    "GetProcessVersion",
    "HeapSetInformation",
    "FreeLibrary",
    "MapViewOfFileExNuma",
    "SetFileApisToANSI",
    "LeaveCriticalSectionWhenCallbackReturns",
    "SetHandleCount",
    "TlsFree",
    "FindNextVolumeW",
    "SetThreadStackGuarantee",
    "AccessCheck",
    "BaseGetProcessDllPath",
    "GetFileSize",
    "LockFile",
    "ReadFileEx",
    "SystemTimeToFileTime",
    "EqualSid",
    "GetTimeZoneInformation",
    "SetEnvironmentStringsW",
    "GetAclInformation",
    "SetWaitableTimer",
    "InterlockedDecrement",
    "SetFileTime",
    "GetNumberFormatW",
    "WaitForThreadpoolWaitCallbacks",
    "CreateThreadpool",
    "AreFileApisANSI",
    "EnumCalendarInfoExEx",
    "VirtualFree",
    "CreateFileW",
    "VirtualAllocExNuma",
    "GetSecurityDescriptorControl",
    "InitializeAcl",
    "ObjectDeleteAuditAlarmW",
    "GetUILanguageInfo",
    "HeapSize",
    "GetDriveTypeA",
    "SetSecurityDescriptorSacl",
    "GetEnvironmentStringsA",
    "CreateNamedPipeW",
    "WaitNamedPipeW",
    "NotifyRedirectedStringChange",
    "GetProcessIdOfThread",
    "BemCreateContractFrom",
    "GetLogicalDriveStringsW",
    "OutputDebugStringW",
    "BaseGetProcessExePath",
    "IsDBCSLeadByte",
    "GetNLSVersion",
    "GetModuleFileNameA",
    "QueueUserAPC",
    "CloseThreadpoolCleanupGroup",
    "SetFileSecurityW",
    "GetCPInfo",
    "GetFileAttributesA",
    "GetLocaleInfoA",
    "GetSystemDirectoryW",
    "IsValidCodePage",
    "DeleteVolumeMountPointW",
    "BaseDllFreeResourceId",
    "CreatePrivateObjectSecurityWithMultipleInheritance",
    "GetCurrentDirectoryW",
    "GetThreadPreferredUILanguages",
    "Internal_EnumUILanguages",
    "GetCalendar",
    "Internal_EnumLanguageGroupLocales",
    "GetFinalPathNameByHandleW",
    "FreeResource",
    "GetCurrentThread",
    "SystemTimeToTzSpecificLocalTime",
    "SetSecurityAccessMask",
    "GetTimeZoneInformationForYear",
    "QuerySecurityAccessMask",
    "SetCalendarInfoW",
    "Wow64DisableWow64FsRedirection",
    "RemoveDirectoryW",
    "DecodePointer",
    "CreateDirectoryW",
    "CheckTokenMembership",
    "WaitForThreadpoolWorkCallbacks",
    "GetSecurityDescriptorOwner",
    "CloseThreadpool",
    "GetDiskFreeSpaceExA",
    "LockFileEx",
    "GetStdHandle",
    "GetShortPathNameW",
    "GetFinalPathNameByHandleA",
    "GetSidSubAuthority",
    "SizeofResource",
    "InterlockedCompareExchange64",
    "GetSidSubAuthorityCount",
    "CreateTimerQueueTimer",
    "HeapDestroy"
  ],
  "kbd101.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbd101a.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbd101b.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbd101c.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbd103.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbd106.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbd106n.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdax2.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdgeoer.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdgeoqw.dll": [
    "KbdLayerDescriptor"
  ],
  "kbdibm02.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdlk41a.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdnec.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdnec95.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdnecat.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kbdnecnt.dll": [
    "KbdLayerDescriptor",
    "KbdNlsLayerDescriptor"
  ],
  "kd1394.dll": [
    "KdReceivePacket",
    "KdSendPacket",
    "KdRestore",
    "KdD3Transition",
    "KdDebuggerInitialize0",
    "KdSave",
    "KdDebuggerInitialize1",
    "KdD0Transition"
  ],
  "kdcom.dll": [
    "KdReceivePacket",
    "KdSendPacket",
    "KdRestore",
    "KdD3Transition",
    "KdDebuggerInitialize0",
    "KdSave",
    "KdDebuggerInitialize1",
    "KdD0Transition"
  ],
  "kdusb.dll": [
    "KdReceivePacket",
    "KdSendPacket",
    "KdRestore",
    "KdD3Transition",
    "KdDebuggerInitialize0",
    "KdSave",
    "KdDebuggerInitialize1",
    "KdD0Transition"
  ],
  "kerberos.dll": [
    "KerbCreateTokenFromTicket",
    "KerbDomainChangeCallback",
    "DllMain",
    "SpInstanceInit",
    "KerbMakeKdcCall",
    "KerbKdcCallBack",
    "SpLsaModeInitialize",
    "SpInitialize",
    "SpUserModeInitialize",
    "KerbIsInitialized"
  ],
  "kernel32.dll": [
    "OpenThreadToken",
    "OpenSemaphoreA",
    "SetVolumeMountPointW",
    "GetCommMask",
    "Thread32Next",
    "GetLocalTime",
    "RegSaveKeyExW",
    "GetBinaryType",
    "ReleaseSRWLockShared",
    "GetOEMCP",
    "RegOpenCurrentUser",
    "GetTimeFormatA",
    "CreateFiberEx",
    "GetProfileStringA",
    "LZDone",
    "GetDiskFreeSpaceA",
    "WriteConsoleInputVDMA",
    "GlobalUnfix",
    "EscapeCommFunction",
    "SetFileApisToOEM",
    "GetDateFormatA",
    "VerifyScripts",
    "RegisterWowExec",
    "GetSystemWow64DirectoryA",
    "OpenProfileUserMapping",
    "RegEnumKeyExW",
    "SetHandleContext",
    "SubmitThreadpoolWork",
    "GlobalCompact",
    "lstrcpyW",
    "Heap32Next",
    "GetProfileSectionW",
    "GetUserDefaultLangID",
    "CheckRemoteDebuggerPresent",
    "OpenMutexW",
    "GetStartupInfoA",
    "SetProcessAffinityUpdateMode",
    "RegQueryValueExA",
    "GetLocaleInfoEx",
    "IsNLSDefinedString",
    "DeleteTimerQueueTimer",
    "RegDeleteKeyExW",
    "CreateMailslotW",
    "SetThreadLocale",
    "CloseThreadpoolIo",
    "UnregisterApplicationRecoveryCallback",
    "VerSetConditionMask",
    "AddVectoredExceptionHandler",
    "SetLocalTime",
    "LZOpenFileA",
    "GetVolumeInformationA",
    "InitAtomTable",
    "CloseThreadpoolCleanupGroupMembers",
    "GetCurrentConsoleFont",
    "MapUserPhysicalPagesScatter",
    "WriteConsoleInputVDMW",
    "FindAtomW",
    "GetProcessHeaps",
    "GetFileTime",
    "SetConsoleMaximumWindowSize",
    "CreateBoundaryDescriptorW",
    "EnumTimeFormatsEx",
    "GetCommState",
    "AddSecureMemoryCacheCallback",
    "UnregisterWait",
    "PowerCreateRequest",
    "GetCurrentProcessId",
    "CreateSemaphoreW",
    "GetFileAttributesTransactedW",
    "GetLastError",
    "SetInformationJobObject",
    "PeekConsoleInputW",
    "GetTapeStatus",
    "TzSpecificLocalTimeToSystemTime",
    "Process32FirstW",
    "GetConsoleCursorInfo",
    "CloseThreadpoolWork",
    "GetConsoleKeyboardLayoutNameW",
    "SetThreadToken",
    "GetNextVDMCommand",
    "CreateSymbolicLinkTransactedW",
    "FindCloseChangeNotification",
    "InitializeCriticalSection",
    "ReplaceFileW",
    "FindFirstFileTransactedA",
    "GetPhysicallyInstalledSystemMemory",
    "GetSystemFileCacheSize",
    "FindFirstFileExA",
    "IdnToNameprepUnicode",
    "ReadFileScatter",
    "WaitCommEvent",
    "GetEnvironmentStringsW",
    "LoadLibraryExW",
    "BaseCleanupAppcompatCacheSupport",
    "GetFullPathNameA",
    "EnumTimeFormatsW",
    "WaitForMultipleObjectsEx",
    "GetACP",
    "CreateProcessInternalW",
    "Module32Next",
    "TerminateJobObject",
    "GetComputerNameA",
    "GetCurrentProcessorNumber",
    "SetConsoleOutputCP",
    "QueryInformationJobObject",
    "SetCurrentDirectoryW",
    "FatalExit",
    "UnlockFileEx",
    "GetProcessTimes",
    "GetThreadId",
    "LocalUnlock",
    "RegNotifyChangeKeyValue",
    "LoadLibraryExA",
    "SetDynamicTimeZoneInformation",
    "GetNumaAvailableMemoryNodeEx",
    "HeapCreate",
    "GetConsoleOutputCP",
    "GetMailslotInfo",
    "RegisterWaitForSingleObject",
    "SetDefaultCommConfigA",
    "DebugBreakProcess",
    "LCMapStringEx",
    "SortCloseHandle",
    "SetConsoleCtrlHandler",
    "GetConsoleInputWaitHandle",
    "GetStringTypeExW",
    "DeleteFileTransactedW",
    "GetQueuedCompletionStatusEx",
    "CreateFileA",
    "CreateMutexA",
    "GetCurrencyFormatEx",
    "GlobalFindAtomA",
    "GetNativeSystemInfo",
    "CreateTapePartition",
    "WriteConsoleOutputA",
    "NeedCurrentDirectoryForExePathW",
    "SetThreadpoolThreadMinimum",
    "QueryIdleProcessorCycleTime",
    "CreateConsoleScreenBuffer",
    "CreateWaitableTimerExA",
    "K32InitializeProcessForWsWatch",
    "CreateFiber",
    "DisconnectNamedPipe",
    "GlobalSize",
    "TryEnterCriticalSection",
    "BaseUpdateAppcompatCache",
    "WritePrivateProfileStructA",
    "GetSystemDirectoryA",
    "ConvertNLSDayOfWeekToWin32DayOfWeek",
    "lstrcmpiW",
    "LZCopy",
    "AttachConsole",
    "EndUpdateResourceA",
    "WerSetFlags",
    "QueryProcessAffinityUpdateMode",
    "CreateBoundaryDescriptorA",
    "FreeConsole",
    "IsProcessInJob",
    "WerpStringLookup",
    "CreateEventA",
    "TlsGetValue",
    "InitializeSListHead",
    "LoadLibraryW",
    "GetVolumePathNamesForVolumeNameA",
    "SetThreadErrorMode",
    "GetProcessHandleCount",
    "GetDurationFormatEx",
    "RegKrnInitialize",
    "GetExtendedFeaturesMask",
    "FatalAppExitW",
    "WriteProfileSectionA",
    "SetFileIoOverlappedRange",
    "EnableThreadProfiling",
    "SetConsoleCursorMode",
    "RemoveDirectoryTransactedA",
    "QueryUnbiasedInterruptTime",
    "K32EnumProcesses",
    "GetUserDefaultLocaleName",
    "IsBadHugeWritePtr",
    "WaitNamedPipeA",
    "GetDriveTypeW",
    "GetLargePageMinimum",
    "WerRegisterMemoryBlock",
    "HeapCompact",
    "GetDevicePowerState",
    "EnumResourceTypesW",
    "UTUnRegister",
    "SetConsoleCursor",
    "GetNumberFormatEx",
    "AddAtomA",
    "SetFileBandwidthReservation",
    "SetConsoleTitleA",
    "FindFirstFileW",
    "GetFirmwareEnvironmentVariableA",
    "LocalLock",
    "GetDiskFreeSpaceW",
    "CloseHandle",
    "GetConsoleScreenBufferInfo",
    "AllocateUserPhysicalPages",
    "LocateExtendedFeature",
    "CreateProcessA",
    "UnregisterApplicationRestart",
    "SetThreadPreferredUILanguages",
    "GlobalUnWire",
    "DeleteAtom",
    "DeleteTimerQueue",
    "FindResourceExW",
    "FormatMessageW",
    "LZCloseFile",
    "GetExitCodeProcess",
    "GetFileAttributesExW",
    "ClearCommError",
    "GetSystemRegistryQuota",
    "CreateThread",
    "CreateWaitableTimerExW",
    "CreateNamedPipeA",
    "BasepFreeAppCompatData",
    "Process32NextW",
    "BasepAnsiStringToDynamicUnicodeString",
    "ExpandEnvironmentStringsW",
    "GetThreadPriorityBoost",
    "VerLanguageNameW",
    "GetCalendarDateFormat",
    "GetSystemDefaultUILanguage",
    "TrySubmitThreadpoolCallback",
    "Module32First",
    "PowerSetRequest",
    "GetDateFormatEx",
    "OpenEventA",
    "SetMailslotInfo",
    "GetVersion",
    "GlobalFindAtomW",
    "RaiseException",
    "SetEnvironmentVariableA",
    "BeginUpdateResourceW",
    "SetThreadUILanguage",
    "GetConsoleAliasExesLengthW",
    "GetLogicalDrives",
    "SetTapeParameters",
    "GetFileInformationByHandleEx",
    "ReadProcessMemory",
    "FindClose",
    "SetHandleInformation",
    "WriteConsoleOutputAttribute",
    "GetTempFileNameW",
    "CreateActCtxW",
    "SetFileValidData",
    "ResetEvent",
    "RegisterConsoleOS2",
    "WriteConsoleOutputW",
    "BaseCheckRunApp",
    "WinExec",
    "EnumResourceTypesExA",
    "SetThreadExecutionState",
    "GetApplicationRecoveryCallback",
    "CreateThreadpoolIo",
    "Toolhelp32ReadProcessMemory",
    "SleepEx",
    "GetConsoleCharType",
    "SetDefaultCommConfigW",
    "FillConsoleOutputCharacterW",
    "HeapUnlock",
    "_lclose",
    "CompareStringW",
    "FreeEnvironmentStringsA",
    "GetFileSizeEx",
    "EnumResourceNamesExW",
    "WerpNotifyLoadStringResourceEx",
    "ConvertDefaultLocale",
    "NlsWriteEtwEvent",
    "AllocConsole",
    "GetNumaNodeNumberFromHandle",
    "GetCommTimeouts",
    "CancelDeviceWakeupRequest",
    "GetConsoleCommandHistoryLengthW",
    "SetConsoleWindowInfo",
    "FreeLibrary",
    "CreateDirectoryExW",
    "LeaveCriticalSectionWhenCallbackReturns",
    "CreateSemaphoreExA",
    "SetHandleCount",
    "GetFileSize",
    "GetNumaProximityNodeEx",
    "ReadFileEx",
    "GetPrivateProfileSectionNamesA",
    "GetTimeZoneInformation",
    "SetClientTimeZoneInformation",
    "GetConsoleAliasesLengthA",
    "CreateThreadpool",
    "CreateFileW",
    "EnumSystemCodePagesA",
    "lstrcatA",
    "GlobalHandle",
    "GetPrivateProfileIntA",
    "HeapSize",
    "InitOnceComplete",
    "CreateToolhelp32Snapshot",
    "EnumResourceLanguagesExA",
    "OutputDebugStringW",
    "LocalSize",
    "GetConsoleDisplayMode",
    "MoveFileWithProgressW",
    "CreateSymbolicLinkA",
    "SetThreadIdealProcessorEx",
    "SetDllDirectoryA",
    "GetCPInfo",
    "RegEnumKeyExA",
    "CreateJobObjectW",
    "GetCurrentDirectoryW",
    "SetMessageWaitingIndicator",
    "IsNormalizedString",
    "ConvertThreadToFiberEx",
    "GetGeoInfoA",
    "GetNumaNodeProcessorMaskEx",
    "SystemTimeToTzSpecificLocalTime",
    "GetConsoleInputExeNameA",
    "SetThreadAffinityMask",
    "RegisterWaitForInputIdle",
    "SortGetHandle",
    "GetConsoleCP",
    "SetCalendarInfoW",
    "CreateProcessInternalA",
    "DecodePointer",
    "UpdateResourceA",
    "WriteProfileStringW",
    "SetConsoleTextAttribute",
    "CopyFileExW",
    "GetComputerNameW",
    "ReadDirectoryChangesW",
    "lstrcmpiA",
    "Module32FirstW",
    "GetDateFormatW",
    "GetProcAddress",
    "K32EnumProcessModules",
    "GetModuleHandleA",
    "GetStringTypeExA",
    "GlobalMemoryStatus",
    "EnumDateFormatsA",
    "GetConsoleWindow",
    "ReplacePartitionUnit",
    "GetConsoleAliasExesA",
    "RegOpenUserClassesRoot",
    "ReleaseSRWLockExclusive",
    "GetExpandedNameW",
    "GetUserDefaultLCID",
    "BasepMapModuleHandle",
    "GetDefaultCommConfigA",
    "BasepCheckWinSaferRestrictions",
    "FileTimeToSystemTime",
    "ReadConsoleA",
    "GetVolumeInformationW",
    "InitOnceBeginInitialize",
    "BaseVerifyUnicodeString",
    "ReadFile",
    "CreateDirectoryA",
    "GetNamedPipeServerSessionId",
    "HeapWalk",
    "SetConsoleTitleW",
    "EnumDateFormatsExW",
    "BaseIsAppcompatInfrastructureDisabled",
    "GetTimeFormatEx",
    "GetAtomNameA",
    "ReadConsoleOutputAttribute",
    "InitializeCriticalSectionAndSpinCount",
    "GetLongPathNameTransactedA",
    "WakeAllConditionVariable",
    "CreateSocketHandle",
    "GetCurrentConsoleFontEx",
    "EnumResourceLanguagesW",
    "WriteConsoleInputA",
    "ExpungeConsoleCommandHistoryA",
    "SetFirmwareEnvironmentVariableW",
    "DuplicateHandle",
    "SetConsoleDisplayMode",
    "GetAtomNameW",
    "GetProfileStringW",
    "GetStartupInfoW",
    "GetLogicalDriveStringsA",
    "RegQueryValueExW",
    "RemoveLocalAlternateComputerNameA",
    "GetVolumeNameForVolumeMountPointA",
    "WakeConditionVariable",
    "GetTapePosition",
    "ReOpenFile",
    "RegisterConsoleVDM",
    "HeapAlloc",
    "OpenFileById",
    "PowerClearRequest",
    "DosPathToSessionPathA",
    "GetCommModemStatus",
    "ProcessIdToSessionId",
    "GetThreadContext",
    "CompareStringEx",
    "lstrcpynA",
    "FindResourceW",
    "SetConsoleNlsMode",
    "ReadConsoleOutputW",
    "GetVersionExA",
    "BaseSetLastNTError",
    "SetConsoleKeyShortcuts",
    "QueryPerformanceCounter",
    "GetFullPathNameTransactedA",
    "DuplicateConsoleHandle",
    "FindNextChangeNotification",
    "GetDefaultCommConfigW",
    "GlobalGetAtomNameA",
    "CheckElevationEnabled",
    "FlushFileBuffers",
    "FindFirstVolumeMountPointW",
    "GetEraNameCountedString",
    "GetNamedPipeHandleStateW",
    "PrivCopyFileExW",
    "LocalFree",
    "SetProcessWorkingSetSize",
    "ConnectNamedPipe",
    "GetCalendarSupportedDateRange",
    "WaitForSingleObjectEx",
    "SetConsoleCP",
    "GetBinaryTypeW",
    "SetConsoleCursorPosition",
    "RegEnumValueW",
    "WriteConsoleW",
    "SleepConditionVariableCS",
    "GetShortPathNameA",
    "SetProcessShutdownParameters",
    "SetDllDirectoryW",
    "InterlockedExchangeAdd",
    "SetFileAttributesW",
    "WerpInitiateRemoteRecovery",
    "GetConsoleAliasesA",
    "CheckNameLegalDOS8Dot3A",
    "lstrcmp",
    "GetProcessDEPPolicy",
    "InitOnceInitialize",
    "FindActCtxSectionStringA",
    "WritePrivateProfileSectionW",
    "lstrlen",
    "SetThreadpoolStackInformation",
    "BasepCheckAppCompat",
    "InterlockedPushListSList",
    "GetCommandLineA",
    "DebugActiveProcessStop",
    "GetSystemWindowsDirectoryW",
    "WaitForThreadpoolIoCallbacks",
    "NormalizeString",
    "GetThreadTimes",
    "WriteFileGather",
    "VerifyVersionInfoA",
    "VirtualUnlock",
    "ConvertSystemTimeToCalDateTime",
    "SetLastError",
    "RegisterConsoleIME",
    "GetActiveProcessorGroupCount",
    "DisassociateCurrentThreadFromCallback",
    "SetVDMCurrentDirectories",
    "RtlCaptureStackBackTrace",
    "GetTempFileNameA",
    "InitializeProcThreadAttributeList",
    "ExitProcess",
    "CopyFileA",
    "CreateTimerQueue",
    "Wow64SetThreadContext",
    "DeleteFileW",
    "ConvertCalDateTimeToSystemTime",
    "GetSystemPowerStatus",
    "FindFirstChangeNotificationW",
    "K32GetDeviceDriverFileNameA",
    "BeginUpdateResourceA",
    "DefineDosDeviceA",
    "GetConsoleOriginalTitleA",
    "RegLoadKeyW",
    "VDMConsoleOperation",
    "FindNLSStringEx",
    "RegGetValueA",
    "SetEnvironmentStringsA",
    "BaseDumpAppcompatCache",
    "EnumCalendarInfoA",
    "GetApplicationRestartSettings",
    "BackupWrite",
    "RegFlushKey",
    "GetLogicalProcessorInformationEx",
    "DecodeSystemPointer",
    "EnumLanguageGroupLocalesA",
    "Module32NextW",
    "WaitForMultipleObjects",
    "RegDeleteTreeA",
    "GlobalAlloc",
    "K32QueryWorkingSetEx",
    "RtlUnwind",
    "GetThreadIOPendingFlag",
    "CreateSemaphoreExW",
    "DeactivateActCtx",
    "LZRead",
    "GetTapeParameters",
    "FindVolumeMountPointClose",
    "GetNumberOfConsoleFonts",
    "WriteProfileSectionW",
    "GetCurrentThreadId",
    "GetProfileIntW",
    "AddConsoleAliasA",
    "Wow64EnableWow64FsRedirection",
    "FileTimeToDosDateTime",
    "AddAtomW",
    "CreateThreadpoolWork",
    "RegUnLoadKeyA",
    "GetSystemDefaultLangID",
    "RegRestoreKeyW",
    "TlsSetValue",
    "GetProductInfo",
    "GetConsoleMode",
    "K32GetDeviceDriverBaseNameW",
    "RegDeleteKeyExA",
    "FindNextStreamW",
    "SetLocaleInfoA",
    "BaseGenerateAppCompatData",
    "RemoveDirectoryTransactedW",
    "GlobalAddAtomW",
    "DeleteFileA",
    "GetPrivateProfileStructW",
    "LCMapStringW",
    "BasepCheckBadapp",
    "GetCompressedFileSizeA",
    "SetSystemFileCacheSize",
    "FillConsoleOutputAttribute",
    "GetTempPathW",
    "IsValidLocale",
    "SetCommState",
    "EnumCalendarInfoW",
    "WerUnregisterRuntimeExceptionModule",
    "BasepAllocateActivationContextActivationBlock",
    "GetProfileIntA",
    "GetThreadErrorMode",
    "GetModuleHandleW",
    "OpenFile",
    "GetNamedPipeInfo",
    "DisableThreadProfiling",
    "EnumLanguageGroupLocalesW",
    "IsThreadpoolTimerSet",
    "FreeEnvironmentStringsW",
    "OpenThread",
    "LZOpenFileW",
    "FindFirstVolumeW",
    "TryAcquireSRWLockShared",
    "GetVolumeInformationByHandleW",
    "IdnToAscii",
    "InitOnceExecuteOnce",
    "GetNLSVersionEx",
    "InitializeExtendedContext",
    "BaseThreadInitThunk",
    "LoadStringBaseExW",
    "GetConsoleHardwareState",
    "RegisterWaitForSingleObjectEx",
    "TerminateThread",
    "FindActCtxSectionGuid",
    "GetProcessWorkingSetSize",
    "CreateDirectoryTransactedA",
    "IsValidCalDateTime",
    "GetPrivateProfileStringA",
    "TlsAlloc",
    "SetProcessDEPPolicy",
    "GetSystemFirmwareTable",
    "WriteTapemark",
    "DosDateTimeToFileTime",
    "CompareFileTime",
    "CopyFileW",
    "CmdBatNotification",
    "GetComPlusPackageInstallStatus",
    "QueryThreadCycleTime",
    "MapViewOfFile",
    "GetCalendarMonthsInYear",
    "GetDllDirectoryW",
    "GetNumberOfConsoleInputEvents",
    "GetProcessId",
    "NlsUpdateSystemLocale",
    "CreateMemoryResourceNotification",
    "GetModuleFileNameW",
    "CopyFileExA",
    "SetCurrentConsoleFontEx",
    "_lwrite",
    "SetCommTimeouts",
    "Thread32First",
    "FreeUserPhysicalPages",
    "K32EmptyWorkingSet",
    "ZombifyActCtx",
    "CreateSemaphoreA",
    "ReleaseMutexWhenCallbackReturns",
    "GetTickCount64",
    "ReadConsoleInputExA",
    "RegOpenKeyExA",
    "LZClose",
    "GetSystemDefaultLocaleName",
    "HeapQueryInformation",
    "DeleteBoundaryDescriptor",
    "CreateWaitableTimerW",
    "SetConsoleMode",
    "CopyFileTransactedW",
    "DnsHostnameToComputerNameA",
    "SetUnhandledExceptionFilter",
    "RegSaveKeyExA",
    "GetExpandedNameA",
    "CancelWaitableTimer",
    "AcquireSRWLockShared",
    "EnumResourceNamesExA",
    "FindFirstChangeNotificationA",
    "_lread",
    "Heap32First",
    "GetOverlappedResult",
    "SetProcessPreferredUILanguages",
    "ClosePrivateNamespace",
    "GetCPInfoExA",
    "GetCalendarInfoA",
    "GetLargestConsoleWindowSize",
    "GetEnvironmentVariableA",
    "GlobalReAlloc",
    "SwitchToFiber",
    "ReleaseSemaphoreWhenCallbackReturns",
    "LCIDToLocaleName",
    "GetSystemTimeAsFileTime",
    "VirtualProtect",
    "BaseDllReadWriteIniFile",
    "IsDebuggerPresent",
    "CreateHardLinkTransactedA",
    "EnumDateFormatsW",
    "SetComputerNameExA",
    "EnumResourceLanguagesExW",
    "CreatePrivateNamespaceA",
    "IsBadHugeReadPtr",
    "GetDiskFreeSpaceExW",
    "IsBadStringPtrA",
    "VerifyVersionInfoW",
    "RegSetKeySecurity",
    "GetMaximumProcessorGroupCount",
    "RegEnumValueA",
    "FindNextFileNameW",
    "LockFile",
    "EnumTimeFormatsA",
    "CreateMailslotA",
    "SetFileTime",
    "RegCreateKeyExW",
    "AllocateUserPhysicalPagesNuma",
    "SetTimeZoneInformation",
    "VirtualAllocExNuma",
    "RtlMoveMemory",
    "FlushConsoleInputBuffer",
    "CreateNamedPipeW",
    "QueryFullProcessImageNameW",
    "RequestDeviceWakeup",
    "GetLogicalDriveStringsW",
    "GetCommConfig",
    "IsDBCSLeadByte",
    "SetTermsrvAppInstallMode",
    "FillConsoleOutputCharacterA",
    "GetCurrentActCtx",
    "GetSystemDirectoryW",
    "Process32First",
    "DeleteVolumeMountPointW",
    "GetConsoleAliasesLengthW",
    "SetConsoleIcon",
    "GetThreadPreferredUILanguages",
    "FreeResource",
    "BaseCheckAppcompatCacheEx",
    "GetCurrentThread",
    "CreateDirectoryW",
    "ApplicationRecoveryFinished",
    "ActivateActCtx",
    "MoveFileExA",
    "GetNumaProcessorNode",
    "GetStdHandle",
    "EnumCalendarInfoExA",
    "GetCommProperties",
    "GetConsoleScreenBufferInfoEx",
    "SetConsoleHistoryInfo",
    "GetProcessGroupAffinity",
    "CommConfigDialogA",
    "SetThreadIdealProcessor",
    "LocalCompact",
    "GetConsoleAliasA",
    "GetConsoleAliasExesLengthA",
    "OpenWaitableTimerA",
    "FindNextFileW",
    "SetSystemPowerState",
    "GetCalendarInfoW",
    "VerLanguageNameA",
    "QueryDosDeviceA",
    "GetSystemDefaultLCID",
    "K32GetModuleFileNameExW",
    "K32GetWsChanges",
    "NotifyUILanguageChange",
    "SetTimerQueueTimer",
    "GetLogicalProcessorInformation",
    "RegKrnGetGlobalState",
    "WriteConsoleInputW",
    "QueryThreadProfiling",
    "GetSystemInfo",
    "FlushProcessWriteBuffers",
    "Wow64GetThreadSelectorEntry",
    "SetTapePosition",
    "RegisterApplicationRecoveryCallback",
    "WriteFileEx",
    "LocalHandle",
    "ShowConsoleCursor",
    "ReplaceFile",
    "ReleaseActCtx",
    "GetCommandLineW",
    "CancelIo",
    "GetLocaleInfoW",
    "GetCalendarWeekNumber",
    "LocaleNameToLCID",
    "DeleteCriticalSection",
    "RegGetKeySecurity",
    "DeleteTimerQueueEx",
    "ReadThreadProfilingData",
    "GetVolumePathNameA",
    "K32GetProcessMemoryInfo",
    "EnumerateLocalComputerNamesA",
    "WideCharToMultiByte",
    "GetSystemTime",
    "SetEnvironmentVariableW",
    "SetFileAttributesTransactedA",
    "EnumResourceNamesW",
    "DnsHostnameToComputerNameW",
    "GetModuleHandleExW",
    "IsCalendarLeapYear",
    "CreateEventExA",
    "GetConsoleTitleW",
    "RtlFillMemory",
    "RegCreateKeyExA",
    "IsBadWritePtr",
    "QueryDosDeviceW",
    "lstrcpyn",
    "SetConsoleInputExeNameW",
    "InterlockedCompareExchange",
    "Basep8BitStringToDynamicUnicodeString",
    "Sleep",
    "FindNLSString",
    "RaiseFailFastException",
    "CreateFileMappingNumaW",
    "FindFirstStreamW",
    "BasepFreeActivationContextActivationBlock",
    "GetWriteWatch",
    "MapViewOfFileEx",
    "GetNamedPipeServerProcessId",
    "GetLongPathNameTransactedW",
    "WaitForSingleObject",
    "OutputDebugStringA",
    "FlushViewOfFile",
    "GetFileMUIInfo",
    "SetConsoleNumberOfCommandsW",
    "SetVolumeLabelW",
    "GetProcessHeap",
    "GetComputerNameExA",
    "MultiByteToWideChar",
    "Wow64RevertWow64FsRedirection",
    "LockResource",
    "BaseFlushAppcompatCache",
    "FindStringOrdinal",
    "GetStringTypeW",
    "FlsSetValue",
    "FindFirstFileA",
    "GetNumaHighestNodeNumber",
    "HeapLock",
    "CompareStringA",
    "BuildCommDCBAndTimeoutsW",
    "_hwrite",
    "FindAtomA",
    "LocateLegacyContext",
    "GetCurrentProcessorNumberEx",
    "CreateDirectoryTransactedW",
    "GetLongPathNameW",
    "SetThreadPriorityBoost",
    "FindFirstFileTransactedW",
    "Heap32ListNext",
    "VerifyConsoleIoHandle",
    "WriteConsoleA",
    "VirtualAlloc",
    "lstrcmpi",
    "GetNumaNodeProcessorMask",
    "GetProcessWorkingSetSizeEx",
    "CompareStringOrdinal",
    "SetThreadContext",
    "EnumerateLocalComputerNamesW",
    "SetProcessAffinityMask",
    "CreateJobSet",
    "FindFirstFileExW",
    "GetSystemPreferredUILanguages",
    "SetPriorityClass",
    "GetDynamicTimeZoneInformation",
    "SetSystemTimeAdjustment",
    "TransmitCommChar",
    "DelayLoadFailureHook",
    "GetConsoleInputExeNameW",
    "DebugActiveProcess",
    "CreateDirectoryExA",
    "FatalAppExitA",
    "SetThreadGroupAffinity",
    "CopyExtendedContext",
    "GetConsoleFontSize",
    "FindVolumeClose",
    "CreateFileTransactedA",
    "K32GetModuleFileNameExA",
    "RegDisablePredefinedCacheEx",
    "lstrcmpW",
    "LoadResource",
    "AddConsoleAliasW",
    "MoveFileExW",
    "WriteConsoleOutputCharacterA",
    "EnumSystemLocalesA",
    "FreeLibraryAndExitThread",
    "GetCurrencyFormatA",
    "PurgeComm",
    "GetFileAttributesTransactedA",
    "SetConsoleFont",
    "lstrcmpA",
    "GetProcessShutdownParameters",
    "CreateMutexExA",
    "WritePrivateProfileStringW",
    "EnumCalendarInfoExW",
    "SetConsoleNumberOfCommandsA",
    "SetConsolePalette",
    "CreatePipe",
    "LoadStringBaseW",
    "ReadConsoleOutputCharacterW",
    "SetThreadpoolWait",
    "SetStdHandle",
    "RegSetValueExA",
    "FindResourceA",
    "SetFileShortNameA",
    "FindFirstVolumeA",
    "GlobalDeleteAtom",
    "K32EnumDeviceDrivers",
    "NlsEventDataDescCreate",
    "Wow64GetThreadContext",
    "K32GetMappedFileNameW",
    "GetPrivateProfileSectionA",
    "GetMaximumProcessorCount",
    "K32GetDeviceDriverFileNameW",
    "DisableThreadLibraryCalls",
    "GetPriorityClass",
    "DosPathToSessionPathW",
    "VirtualFreeEx",
    "GetNamedPipeClientProcessId",
    "SignalObjectAndWait",
    "GetProcessAffinityMask",
    "IsThreadAFiber",
    "VirtualProtectEx",
    "AddSIDToBoundaryDescriptor",
    "_lopen",
    "CreateFileMappingW",
    "RegDeleteValueW",
    "SetFileCompletionNotificationModes",
    "LZSeek",
    "SetLocalPrimaryComputerNameW",
    "ContinueDebugEvent",
    "InitializeConditionVariable",
    "GetProfileSectionA",
    "GetSystemTimeAdjustment",
    "ExitThread",
    "OpenProcess",
    "VirtualQuery",
    "CreateThreadpoolCleanupGroup",
    "OpenMutexA",
    "EnumDateFormatsExA",
    "GenerateConsoleCtrlEvent",
    "WTSGetActiveConsoleSessionId",
    "RequestWakeupLatency",
    "BuildCommDCBAndTimeoutsA",
    "CreateRemoteThread",
    "GetWindowsDirectoryW",
    "SetConsoleScreenBufferInfoEx",
    "AssignProcessToJobObject",
    "K32EnumPageFilesW",
    "GetVolumePathNameW",
    "PostQueuedCompletionStatus",
    "NeedCurrentDirectoryForExePathA",
    "GetCurrentDirectoryA",
    "MoveFileTransactedA",
    "GetFullPathNameW",
    "GetCalendarDifferenceInDays",
    "SearchPathW",
    "FindNextFileA",
    "ResetWriteWatch",
    "SetConsoleMenuClose",
    "GetPrivateProfileIntW",
    "IsWow64Process",
    "GetFirmwareEnvironmentVariableW",
    "LocalFileTimeToFileTime",
    "CloseThreadpoolTimer",
    "AcquireSRWLockExclusive",
    "SetConsoleScreenBufferSize",
    "GetLongPathNameA",
    "SetFileInformationByHandle",
    "EnumResourceTypesA",
    "RegRestoreKeyA",
    "K32EnumPageFilesA",
    "OpenConsoleW",
    "WaitForDebugEvent",
    "InterlockedIncrement",
    "IsValidLanguageGroup",
    "GetThreadPriority",
    "CreateFileMappingNumaA",
    "GetThreadGroupAffinity",
    "Wow64SuspendThread",
    "GetModuleHandleExA",
    "LZCreateFileW",
    "SetConsoleHardwareState",
    "CheckElevation",
    "GetConsoleHistoryInfo",
    "_lcreat",
    "CopyFileTransactedA",
    "SetLocaleInfoW",
    "SetEvent",
    "QueryPerformanceFrequency",
    "SetEventWhenCallbackReturns",
    "CallNamedPipeA",
    "SetComputerNameW",
    "RemoveVectoredExceptionHandler",
    "TransactNamedPipe",
    "SetEndOfFile",
    "_llseek",
    "SleepConditionVariableSRW",
    "CreateActCtxA",
    "OpenPrivateNamespaceW",
    "GetExitCodeThread",
    "FindFirstFileNameW",
    "RegOpenKeyExW",
    "UnmapViewOfFile",
    "LeaveCriticalSection",
    "WritePrivateProfileStringA",
    "CreateSymbolicLinkW",
    "ReleaseSemaphore",
    "GetCompressedFileSizeW",
    "FindFirstFileNameTransactedW",
    "ExitVDM",
    "FileTimeToLocalFileTime",
    "CreateProcessAsUserW",
    "SetNamedPipeAttribute",
    "lstrcpyA",
    "RestoreLastError",
    "GetEnvironmentStrings",
    "SetFileAttributesA",
    "K32EnumProcessModulesEx",
    "GlobalMemoryStatusEx",
    "CreateHardLinkTransactedW",
    "LocalShrink",
    "OpenJobObjectW",
    "GetVolumeNameForVolumeMountPointW",
    "FindResourceExA",
    "SetStdHandleEx",
    "GetSystemWindowsDirectoryA",
    "GetFileBandwidthReservation",
    "SetCurrentDirectoryA",
    "GetNamedPipeClientSessionId",
    "SetFirmwareEnvironmentVariableA",
    "DebugBreak",
    "LCMapStringA",
    "WerUnregisterMemoryBlock",
    "K32GetProcessImageFileNameW",
    "UnhandledExceptionFilter",
    "SetupComm",
    "FormatMessageA",
    "ConvertThreadToFiber",
    "IsCalendarLeapDay",
    "GetCalendarInfoEx",
    "RegDeleteTreeW",
    "InterlockedExchange",
    "VirtualQueryEx",
    "WritePrivateProfileStructW",
    "SetThreadPriority",
    "OpenFileMappingA",
    "GetFileMUIPath",
    "FoldStringW",
    "DeleteVolumeMountPointA",
    "GetCPInfoExW",
    "CreateMutexW",
    "EnumSystemCodePagesW",
    "QueryProcessCycleTime",
    "PeekNamedPipe",
    "SetProcessWorkingSetSizeEx",
    "LZInit",
    "SetFileApisToANSI",
    "GetBinaryTypeA",
    "SetThreadStackGuarantee",
    "InvalidateConsoleDIBits",
    "SystemTimeToFileTime",
    "SetWaitableTimer",
    "AddLocalAlternateComputerNameW",
    "GetNumberFormatW",
    "SetComPlusPackageInstallStatus",
    "VirtualFree",
    "EnumCalendarInfoExEx",
    "FindFirstVolumeMountPointA",
    "EnumResourceTypesExW",
    "RegUnLoadKeyW",
    "GetDriveTypeA",
    "GlobalGetAtomNameW",
    "GetProcessIdOfThread",
    "GetModuleFileNameA",
    "QueueUserAPC",
    "CloseThreadpoolCleanupGroup",
    "GetUserGeoID",
    "K32GetMappedFileNameA",
    "UnregisterConsoleIME",
    "SetComputerNameA",
    "GetFileAttributesA",
    "GetLocaleInfoA",
    "RemoveLocalAlternateComputerNameW",
    "RegLoadMUIStringA",
    "IsBadCodePtr",
    "SetExtendedFeaturesMask",
    "RegQueryInfoKeyW",
    "SetProcessPriorityBoost",
    "MoveFileTransactedW",
    "SetConsoleLocalEUDC",
    "K32GetModuleBaseNameA",
    "EnumUILanguagesA",
    "GetTimeZoneInformationForYear",
    "SetLocalPrimaryComputerNameA",
    "Wow64DisableWow64FsRedirection",
    "AdjustCalendarDate",
    "WaitForThreadpoolWorkCallbacks",
    "SetComputerNameExW",
    "LockFileEx",
    "GetFinalPathNameByHandleA",
    "UTRegister",
    "GetNamedPipeHandleStateA",
    "RegQueryInfoKeyA",
    "HeapDestroy",
    "FindFirstStreamTransactedW",
    "GlobalFree",
    "GetVersionExW",
    "InitializeSRWLock",
    "ConsoleMenuControl",
    "DeleteFileTransactedA",
    "CtrlRoutine",
    "GetFileAttributesExA",
    "LZStart",
    "GetCalendarDateFormatEx",
    "CreateWaitableTimerA",
    "ReadConsoleInputW",
    "UpdateProcThreadAttribute",
    "CloseProfileUserMapping",
    "GetConsoleCommandHistoryLengthA",
    "lstrcatW",
    "HeapSummary",
    "SuspendThread",
    "GetNumaProcessorNodeEx",
    "SetFileAttributesTransactedW",
    "GetPrivateProfileStringW",
    "UnlockFile",
    "GetPrivateProfileStructA",
    "GlobalFlags",
    "IsBadReadPtr",
    "_hread",
    "NlsUpdateLocale",
    "CreateIoCompletionPort",
    "GetFileInformationByHandle",
    "DebugSetProcessKillOnExit",
    "GetSystemTimes",
    "QueueUserWorkItem",
    "GetExtendedContextLength",
    "CreateFileTransactedW",
    "K32GetWsChangesEx",
    "QueryDepthSList",
    "GlobalAddAtomA",
    "ResolveLocaleName",
    "GetThreadUILanguage",
    "SetCriticalSectionSpinCount",
    "GetDllDirectoryA",
    "K32GetModuleInformation",
    "GetTempPathA",
    "K32GetProcessImageFileNameA",
    "QueryThreadpoolStackInformation",
    "CallbackMayRunLong",
    "LoadLibraryA",
    "SearchPathA",
    "EncodeSystemPointer",
    "LocalAlloc",
    "SetNamedPipeHandleState",
    "BaseFormatObjectAttributes",
    "FlsGetValue",
    "GetNumberOfConsoleMouseButtons",
    "GetConsoleNlsMode",
    "GetUserDefaultUILanguage",
    "WriteProfileStringA",
    "BaseGetNamedObjectDirectory",
    "AddVectoredContinueHandler",
    "RegDeleteValueA",
    "FlsAlloc",
    "AddIntegrityLabelToBoundaryDescriptor",
    "RegGetValueW",
    "WerpNotifyLoadStringResource",
    "GetConsoleProcessList",
    "BindIoCompletionCallback",
    "GetConsoleCursorMode",
    "CreateThreadpoolTimer",
    "GetQueuedCompletionStatus",
    "TermsrvAppInstallMode",
    "LocalReAlloc",
    "GetPrivateProfileSectionNamesW",
    "RegLoadMUIStringW",
    "WriteProcessMemory",
    "GetVolumePathNamesForVolumeNameW",
    "CreateMutexExW",
    "SetThreadpoolTimer",
    "StartThreadpoolIo",
    "CheckForReadOnlyResource",
    "GetEnabledExtendedFeatures",
    "DeleteFiber",
    "GetConsoleFontInfo",
    "GetHandleInformation",
    "UnregisterWaitEx",
    "DeviceIoControl",
    "GetStringTypeA",
    "GetFileAttributesW",
    "GetNamedPipeClientComputerNameA",
    "SetConsoleInputExeNameA",
    "UpdateCalendarDayOfWeek",
    "CheckNameLegalDOS8Dot3W",
    "GetThreadLocale",
    "CallNamedPipeW",
    "WerRegisterFile",
    "GetCompressedFileSizeTransactedW",
    "GetDurationFormat",
    "IsValidLocaleName",
    "SetWaitableTimerEx",
    "GetProcessPriorityBoost",
    "FindNextVolumeA",
    "UpdateResourceW",
    "NlsGetCacheUpdateCount",
    "GetNamedPipeClientComputerNameW",
    "GetHandleContext",
    "K32GetDeviceDriverBaseNameA",
    "WriteFile",
    "GetProcessIoCounters",
    "NlsCheckPolicy",
    "GetConsoleSelectionInfo",
    "lstrcpynW",
    "BaseInitAppcompatCacheSupport",
    "EnterCriticalSection",
    "SetVolumeLabelA",
    "lstrlenA",
    "OpenSemaphoreW",
    "GetConsoleOriginalTitleW",
    "CreateJobObjectA",
    "ScrollConsoleScreenBufferA",
    "GetConsoleAliasW",
    "FlsFree",
    "EnumResourceLanguagesA",
    "InterlockedPushEntrySList",
    "LoadModule",
    "CompareCalendarDates",
    "GetFullPathNameTransactedW",
    "GetThreadIdealProcessorEx",
    "RemoveSecureMemoryCacheCallback",
    "SetVolumeMountPointA",
    "ReadConsoleW",
    "IsDBCSLeadByteEx",
    "GetTickCount",
    "RtlZeroMemory",
    "ConvertFiberToThread",
    "EraseTape",
    "GetVDMCurrentDirectories",
    "lstrlenW",
    "K32QueryWorkingSet",
    "TryAcquireSRWLockExclusive",
    "GetNamedPipeAttribute",
    "GetSystemDEPPolicy",
    "CreateRemoteThreadEx",
    "Process32Next",
    "SetSearchPathMode",
    "GetProcessPreferredUILanguages",
    "IsBadStringPtrW",
    "SetThreadpoolThreadMaximum",
    "InterlockedFlushSList",
    "WriteConsoleOutputCharacterW",
    "LocalFlags",
    "GetConsoleCommandHistoryA",
    "PrivMoveFileIdentityW",
    "ResumeThread",
    "WerUnregisterFile",
    "ChangeTimerQueueTimer",
    "ScrollConsoleScreenBufferW",
    "MoveFileA",
    "CreateEventExW",
    "VDMOperationStarted",
    "CancelIoEx",
    "GetNumaProximityNode",
    "CancelSynchronousIo",
    "CreatePrivateNamespaceW",
    "BackupRead",
    "PulseEvent",
    "IsSystemResumeAutomatic",
    "CloseThreadpoolWait",
    "CommConfigDialogW",
    "HeapFree",
    "QueryMemoryResourceNotification",
    "GetErrorMode",
    "ExpandEnvironmentStringsA",
    "ReadConsoleOutputCharacterA",
    "SetLastConsoleEventActive",
    "GetSystemWow64DirectoryW",
    "FindNextVolumeMountPointA",
    "GetConsoleKeyboardLayoutNameA",
    "InterlockedPopEntrySList",
    "OpenWaitableTimerW",
    "MoveFileW",
    "SwitchToThread",
    "GetStringScripts",
    "CloseConsoleHandle",
    "IsProcessorFeaturePresent",
    "BackupSeek",
    "ClearCommBreak",
    "WaitForThreadpoolTimerCallbacks",
    "VirtualAllocEx",
    "RemoveVectoredContinueHandler",
    "HeapValidate",
    "CreateHardLinkW",
    "GetActiveProcessorCount",
    "FreeLibraryWhenCallbackReturns",
    "K32GetModuleBaseNameW",
    "ReplaceFileA",
    "RegCloseKey",
    "WerGetFlags",
    "CopyLZFile",
    "InitializeCriticalSectionEx",
    "MoveFileWithProgressA",
    "WerRegisterRuntimeExceptionModule",
    "BaseCheckAppcompatCache",
    "OpenProcessToken",
    "GetComputerNameExW",
    "SetFileShortNameW",
    "SetConsoleCursorInfo",
    "GetCurrentProcess",
    "DefineDosDeviceW",
    "SetConsoleActiveScreenBuffer",
    "DeleteProcThreadAttributeList",
    "OpenPrivateNamespaceA",
    "lstrcpy",
    "GetNumaAvailableMemoryNode",
    "GetFileType",
    "QueryActCtxW",
    "CreateThreadpoolWait",
    "SetErrorMode",
    "GetCalendarDaysInMonth",
    "RegLoadKeyA",
    "IsCalendarLeapMonth",
    "QueryActCtxSettingsW",
    "CreateProcessW",
    "EnumSystemLocalesEx",
    "GetCurrencyFormatW",
    "OpenFileMappingW",
    "GetThreadSelectorEntry",
    "FindActCtxSectionStringW",
    "EnumUILanguagesW",
    "EnumSystemLocalesW",
    "EnumSystemLanguageGroupsW",
    "GetWindowsDirectoryA",
    "IsTimeZoneRedirectionEnabled",
    "RegisterApplicationRestart",
    "GetConsoleAliasesW",
    "LoadAppInitDlls",
    "EndUpdateResourceW",
    "TlsFree",
    "SetUserGeoID",
    "TerminateProcess",
    "VirtualLock",
    "SetCommBreak",
    "ExpungeConsoleCommandHistoryW",
    "SetFilePointer",
    "CancelTimerQueueTimer",
    "BuildCommDCBA",
    "OpenEventW",
    "RegSetValueExW",
    "OpenJobObjectA",
    "GetTimeFormatW",
    "Beep",
    "EnumSystemGeoID",
    "GetUserPreferredUILanguages",
    "GlobalWire",
    "ReleaseMutex",
    "GetConsoleCommandHistoryW",
    "EnumResourceNamesA",
    "RemoveDirectoryA",
    "SetConsoleOS2OemFormat",
    "CreateEventW",
    "lstrcat",
    "NotifyMountMgr",
    "CancelThreadpoolIo",
    "WritePrivateProfileSectionA",
    "ReadConsoleInputA",
    "WerpNotifyUseStringResource",
    "EnumDateFormatsExEx",
    "RtlCaptureContext",
    "GlobalUnlock",
    "EncodePointer",
    "HeapReAlloc",
    "FindNextVolumeMountPointW",
    "FlushInstructionCache",
    "PeekConsoleInputA",
    "GetNumberFormatA",
    "ReadConsoleInputExW",
    "BaseQueryModuleData",
    "ReadConsoleOutputA",
    "GetProcessorSystemCycleTime",
    "GetEnvironmentVariableW",
    "SetFilePointerEx",
    "GetCompressedFileSizeTransactedA",
    "GetProcessVersion",
    "EnumSystemLanguageGroupsA",
    "HeapSetInformation",
    "MapViewOfFileExNuma",
    "SetCalendarInfoA",
    "FindNextVolumeW",
    "GetConsoleAliasExesW",
    "IdnToUnicode",
    "FoldStringA",
    "CreateSymbolicLinkTransactedA",
    "AddRefActCtx",
    "SetEnvironmentStringsW",
    "PrepareTape",
    "InterlockedDecrement",
    "WaitForThreadpoolWaitCallbacks",
    "AreFileApisANSI",
    "AddLocalAlternateComputerNameA",
    "QueryIdleProcessorCycleTimeEx",
    "SetCommMask",
    "GetUILanguageInfo",
    "GetEnvironmentStringsA",
    "WaitNamedPipeW",
    "GetConsoleTitleA",
    "EnumSystemFirmwareTables",
    "GetNLSVersion",
    "SetSystemTime",
    "IsValidCodePage",
    "MulDiv",
    "SetCommConfig",
    "BaseFormatTimeOut",
    "GlobalLock",
    "CreateHardLinkA",
    "RegisterWowBaseHandlers",
    "GetFinalPathNameByHandleW",
    "GetPrivateProfileSectionW",
    "BuildCommDCBW",
    "Heap32ListFirst",
    "MapUserPhysicalPages",
    "ApplicationRecoveryInProgress",
    "GlobalFix",
    "RemoveDirectoryW",
    "CloseThreadpool",
    "GetDiskFreeSpaceExA",
    "GetShortPathNameW",
    "SizeofResource",
    "InterlockedCompareExchange64",
    "CreateFileMappingA",
    "QueryFullProcessImageNameA",
    "K32GetPerformanceInfo",
    "CreateTimerQueueTimer",
    "WerpCleanupMessageMapping",
    "GetGeoInfoW"
  ],
  "kernelceip.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "keyiso.dll": [
    "KeyIsoServiceMain",
    "KeyIsoSetAuditingInterface"
  ],
  "keymgr.dll": [
    "PRShowRestoreFromMsginaW",
    "PRShowRestoreWizardW",
    "CPlApplet",
    "KRShowKeyMgr",
    "DllMain",
    "PRShowSaveFromMsginaW",
    "DllCanUnloadNow",
    "PRShowRestoreWizardExW",
    "PRShowSaveWizardExW",
    "DllGetClassObject"
  ],
  "korwbrkr.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "ksuser.dll": [
    "KsCreatePin",
    "KsCreateClock",
    "KsCreateTopologyNode",
    "KsCreateAllocator"
  ],
  "ktmw32.dll": [
    "RenameTransactionManager",
    "GetEnlistmentId",
    "GetCurrentClockTransactionManager",
    "OpenTransaction",
    "GetTransactionInformation",
    "PrivPropagationFailed",
    "OpenResourceManager",
    "CreateResourceManager",
    "GetEnlistmentRecoveryInformation",
    "PrivPropagationComplete",
    "RollbackTransaction",
    "CommitEnlistment",
    "PrivCreateTransaction",
    "PrePrepareComplete",
    "PrivIsLogWritableTransactionManager",
    "SinglePhaseReject",
    "CommitComplete",
    "CommitTransaction",
    "GetTransactionId",
    "CreateEnlistment",
    "CreateTransaction",
    "PrivRegisterProtocolAddressInformation",
    "OpenTransactionManager",
    "RollbackComplete",
    "SetEnlistmentRecoveryInformation",
    "GetNotificationResourceManager",
    "RecoverTransactionManager",
    "RollbackEnlistment",
    "SetResourceManagerCompletionPort",
    "ReadOnlyEnlistment",
    "RecoverEnlistment",
    "GetNotificationResourceManagerAsync",
    "RollforwardTransactionManager",
    "PrePrepareEnlistment",
    "CreateTransactionManager",
    "RollbackTransactionAsync",
    "RecoverResourceManager",
    "OpenEnlistment",
    "GetTransactionManagerId",
    "OpenTransactionManagerById",
    "PrepareEnlistment",
    "CommitTransactionAsync",
    "PrepareComplete",
    "SetTransactionInformation"
  ],
  "L2SecHC.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "LAPRXY.DLL": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "LangCleanupSysprepAction.dll": [
    "Sysprep_Generalize_MUILangCleanup"
  ],
  "ListSvc.dll": [
    "ListenerServiceMain",
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "LocationApi.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "l2gpstore.dll": [
    "L2GPPolicyStoreOpen",
    "L2GPPolicyStoreClose",
    "L2GPPolicyDataDeleteAll",
    "L2GPPolicyDataDelete",
    "L2GPPolicyFreeMem",
    "L2GPPolicyDataRead",
    "L2GPPolicyDataWrite"
  ],
  "l2nacp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "licmgr10.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "linkinfo.dll": [
    "CreateLinkInfoA",
    "ResolveLinkInfoW",
    "ResolveLinkInfo",
    "IsValidLinkInfo",
    "CreateLinkInfo",
    "CreateLinkInfoW",
    "CompareLinkInfoReferents",
    "GetLinkInfoData",
    "GetCanonicalPathInfoW",
    "ResolveLinkInfoA",
    "DestroyLinkInfo",
    "GetCanonicalPathInfoA",
    "DisconnectLinkInfo",
    "GetCanonicalPathInfo",
    "CompareLinkInfoVolumes"
  ],
  "lltdapi.dll": [
    "DllCanUnloadNow",
    "LLTDCreateEnumerator",
    "DllGetClassObject",
    "LLTDCreateMapper",
    "LLTDCreateNode",
    "LLTDCreateMapFromXML"
  ],
  "lltdres.dll": "No exports",
  "lltdsvc.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "lmhsvc.dll": [
    "ServiceMain"
  ],
  "loadperf.dll": [
    "BackupPerfRegistryToFileW",
    "LpAcquireInstallationMutex",
    "InstallPerfDllW",
    "UnloadPerfCounterTextStringsW",
    "LoadPerfCounterTextStringsW",
    "LpReleaseInstallationMutex",
    "UpdatePerfNameFilesA",
    "UpdatePerfNameFilesW",
    "SetServiceAsTrustedW",
    "LoadPerfCounterTextStringsA",
    "InstallPerfDllA",
    "SetServiceAsTrustedA",
    "RestorePerfRegistryFromFileW",
    "UnloadPerfCounterTextStringsA"
  ],
  "localsec.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject"
  ],
  "localspl.dll": [
    "SplDeletePrinterKey",
    "SplGetForm",
    "SplSetPrinterExtraEx",
    "SplEnumMonitors",
    "SplEnumPrinterData",
    "SplEndPagePrinter",
    "SplGetPrinterExtraEx",
    "SplCloseSpooler",
    "LocalEnumForms",
    "SplPowerEvent",
    "SplAddPrinter",
    "SplClosePrinter",
    "SplGetPrintClassObject_4CSR",
    "SplSetPrinterExtra",
    "SplGetJobExtra",
    "SplEnumPrintProcessorDatatypes",
    "SplSetDriverUpdateStatus",
    "OpenPrintProcessor",
    "SplEnumPrinterKey",
    "SplSetPrinterData",
    "SplWritePrinter",
    "SplGetPrintProcCacheData",
    "SplSetPrinter",
    "SplEnumPrintProcessors",
    "SplDeletePrinterData",
    "InitializePrintProvidor",
    "PrintDocumentOnPrintProcessor",
    "SplCopyNumberOfFiles",
    "SplDeletePrintProcCacheData",
    "LocalAddForm",
    "GetPrintProcessorCapabilities",
    "ClosePrintProcessor",
    "SplGetPrinterDriverEx",
    "SplEnumPorts",
    "EnumPrintProcessorDatatypesW",
    "SplOpenPrinter",
    "LclPromptUIPerSessionUser",
    "SplConfigChange",
    "LclIsSessionZero",
    "ControlPrintProcessor",
    "SplGetPrinter",
    "SplDeletePrinter",
    "SplAddPortEx",
    "SplGetJob",
    "LocalSetForm",
    "SplGetPrinterDataEx",
    "SplAddForm",
    "SplEndDocPrinter",
    "SplStartDocPrinter",
    "SplDeleteForm",
    "SplDriverEvent",
    "SplStartPagePrinter",
    "SplDeletePrinterDataEx",
    "SplGetPrinterData",
    "SplReenumeratePorts",
    "SplIsDriverInstalled",
    "SplCreateSpooler",
    "SplDeleteSpooler",
    "SplGetDriverUpdateStatus",
    "SplAddJob",
    "SplGetPrinterDriver",
    "SplSetPrintProcCacheData",
    "LocalReadPrinter",
    "SplAbortPrinter",
    "SplEnumPrintProcCacheData",
    "InitializePrintMonitor2",
    "SplEnumPrinterDataEx",
    "SplSetJob",
    "DllMain",
    "SplGetLocalDevMode",
    "SplLoadLibraryTheCopyFileModule",
    "SplEnumPrinters",
    "SplXcvData",
    "SplGetPrinterDriverDirectory",
    "SplNotifyServerStatus",
    "SplPlayGdiScriptOnPrinterIC",
    "SplDeletePort",
    "SplAddPrinterDriverEx",
    "SplAddPort",
    "SplAddMonitor",
    "SplDeletePrinterIC",
    "SplMonitorIsInstalled",
    "SplDeleteMonitor",
    "SplEnumForms",
    "SplSetJobError",
    "SplEnumJobs",
    "SplDeletePrinterWithJobs",
    "LocalDeleteForm",
    "SplAddPrintProcessor",
    "SplGetPrintProcessorDirectory",
    "SplSetJobExtra",
    "SplSetForm",
    "SplScheduleJob",
    "SplIsCompatibleDriver",
    "SplEnumPrinterDrivers",
    "SplGetPrintClassObject",
    "SplCopyFileEvent",
    "SplCreatePrinterIC",
    "SplDeletePrintProcessor",
    "SplReportJobProcessingProgress",
    "SplGetPrinterExtra",
    "SplSetPrinterDataEx",
    "SplIsLocalDriverAvailable",
    "SplResetPrinter",
    "SplDeletePrinterDriverEx",
    "SplGetDriverDir"
  ],
  "localui.dll": [
    "InitializePrintMonitorUI"
  ],
  "loghours.dll": [
    "DialinHoursDialog",
    "DirSyncScheduleDialog",
    "DirSyncScheduleDialogEx",
    "ReplicationScheduleDialog",
    "ConnectionScheduleDialog",
    "LogonScheduleDialog",
    "ConnectionScheduleDialogEx",
    "ReplicationScheduleDialogEx",
    "DialinHoursDialogEx",
    "LogonScheduleDialogEx"
  ],
  "logoncli.dll": [
    "I_NetLogonSamLogonEx",
    "I_NetServerPasswordSet",
    "I_NetGetDCList",
    "I_NetServerTrustPasswordsGet",
    "NlBindingAddServerToCache",
    "DsAddressToSiteNamesExA",
    "DsGetSiteNameA",
    "I_NetLogonSamLogon",
    "I_NetServerAuthenticate2",
    "I_NetLogonGetDomainInfo",
    "DsAddressToSiteNamesA",
    "I_NetLogonControl",
    "NetLogonSetServiceBits",
    "I_NetDatabaseSync",
    "NetEnumerateTrustedDomains",
    "I_NetLogonSamLogoff",
    "DsDeregisterDnsHostRecordsA",
    "I_NetlogonGetTrustRid",
    "DsGetDcNextA",
    "DsGetDcSiteCoverageA",
    "DsMergeForestTrustInformationW",
    "I_NetLogonUasLogon",
    "DsGetDcNameWithAccountA",
    "DsGetSiteNameW",
    "I_NetAccountDeltas",
    "DsDeregisterDnsHostRecordsW",
    "I_NetServerGetTrustInfo",
    "DsGetDcSiteCoverageW",
    "NetLogonGetTimeServiceParentDomain",
    "I_NetServerReqChallenge",
    "I_NetDatabaseRedo",
    "DsGetDcNameA",
    "I_NetLogonGetCapabilities",
    "NetAddServiceAccount",
    "DsGetDcOpenW",
    "DsGetForestTrustInformationW",
    "NetGetAnyDCName",
    "DsGetDcNameWithAccountW",
    "I_NetServerAuthenticate3",
    "DsGetDcOpenA",
    "I_NetLogonSendToSam",
    "I_NetLogonSamLogonWithFlags",
    "I_NetDatabaseDeltas",
    "NetGetDCName",
    "NetIsServiceAccount",
    "NlBindingRemoveServerFromCache",
    "I_NetlogonComputeClientDigest",
    "DsAddressToSiteNamesW",
    "NetEnumerateServiceAccounts",
    "DsGetDcCloseW",
    "NetRemoveServiceAccount",
    "DsGetDcNextW",
    "I_RpcExtInitializeExtensionPoint",
    "I_NetServerPasswordSet2",
    "I_NetGetForestTrustInformation",
    "NlBindingSetAuthInfo",
    "I_DsUpdateReadOnlyServerDnsRecords",
    "DsGetDcNameW",
    "I_NetChainSetClientAttributes",
    "DsAddressToSiteNamesExW",
    "I_NetDatabaseSync2",
    "DsValidateSubnetNameA",
    "I_NetLogonControl2",
    "DsEnumerateDomainTrustsA",
    "DsEnumerateDomainTrustsW",
    "DsValidateSubnetNameW",
    "I_NetLogonUasLogoff",
    "NetQueryServiceAccount",
    "I_NetAccountSync",
    "I_NetChainSetClientAttributes2",
    "I_NetlogonComputeServerDigest",
    "I_NetServerPasswordGet",
    "I_NetServerAuthenticate"
  ],
  "lpk.dll": [
    "LpkDrawTextEx",
    "LpkDllInitialize",
    "LpkTabbedTextOut",
    "LpkEditControl",
    "LpkGetTextExtentExPoint",
    "LpkExtTextOut",
    "ftsWordBreak",
    "LpkPSMTextOut",
    "LpkUseGDIWidthCache",
    "LpkInitialize",
    "LpkGetCharacterPlacement"
  ],
  "lpksetupproxyserv.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "lsasrv.dll": [
    "LsaIAddNamesToLogonSession",
    "LsaIFreeForestTrustInfo",
    "LsaIFreeHeap",
    "LsaIFree_LSAPR_CR_CIPHER_VALUE",
    "LsaIFreeReturnBuffer",
    "LsaIForestTrustFindMatch",
    "LsaIAuditLogonEx",
    "LsaIFree_LSAP_UPN_SUFFIXES",
    "LsaIGetSiteName",
    "LsaIAuditLogonUsingExplicitCreds",
    "LsaIEqualSupplementalTokenInfo",
    "LsaIOpenPolicyTrusted",
    "LsaISetUserFlags",
    "LsarSetInformationPolicy",
    "LsaIQueryUpnSuffixes",
    "LsaIIsLastInteractiveLogonInfoEnabled",
    "LsaIWriteAuditEvent",
    "LsaIClearOldSyskey",
    "LsaIDsNotifiedObjectChange",
    "LsaIChangeSecretCipherKey",
    "LsaIEfsAcceptSmartcardCredentials",
    "LsaIUpdateKerbMaxTokenSize",
    "LsaIAuditNotifyPackageLoad",
    "LsaIAllocateHeapZero",
    "LsaISetTokenDacl",
    "LsarOpenPolicy",
    "LsarQueryDomainInformationPolicy",
    "LsaISafeMode",
    "LsaISetSupplementalTokenInfo",
    "LsaIReplicateClientObject",
    "LsapCheckBootMode",
    "LsaIGetSupplementalTokenInfo",
    "LsaIFree_LSAPR_POLICY_DOMAIN_INFORMATION",
    "LsaIGetForestTrustInformation",
    "LsaIQuerySiteInfo",
    "LsaILookupWellKnownName",
    "LsaIGetNbAndDnsDomainNames",
    "LsaISetLogonInfo",
    "LsaIFree_LSAP_SITENAME_INFO",
    "LsaICallPackageEx",
    "LsaINotifyNetlogonParametersChangeW",
    "LsaIIsLocalHost",
    "LsarLookupSids",
    "LsarClose",
    "LsaICryptUnprotectData",
    "LsaIFree_LSAPR_PRIVILEGE_SET",
    "LsaIFree_LSAPR_TRUST_INFORMATION",
    "LsaIKerberosRegisterTrustNotification",
    "LsaIRegisterPolicyChangeNotificationCallback",
    "LsaICallPackage",
    "LsaIFree_LSAI_SECRET_ENUM_BUFFER",
    "LsarSetSecret",
    "InitializeLsaExtension",
    "LsaIFree_LSAPR_POLICY_INFORMATION",
    "LsaIGetNameFromLuid",
    "LsaIValidateTargetInfo",
    "LsaIQuerySubnetInfo",
    "LsaIImpersonateClient",
    "LsaIIsDomainWithinForest",
    "LsaIFree_LSAP_SITE_INFO",
    "LsaIAdtAuditingEnabledBySubCategory",
    "LsaIIsDsPaused",
    "LsaIAuditInitializeParametersAndWriteEvent",
    "LsaIAuditSamEvent",
    "LsarQuerySecret",
    "LsarQueryTrustedDomainInfoByName",
    "LsarQueryInformationPolicy",
    "LsaIAuditPasswordAccessEvent",
    "LsaIRegisterNotification",
    "LsaIModifyPerformanceCounter",
    "LsaISetNewSyskey",
    "LsapDsDebugInitialize",
    "LsaISetupWasRun",
    "LsaIAllocateHeap",
    "LsaIIsSuppressChannelBindingInfo",
    "LsaIFree_LSA_FOREST_TRUST_COLLISION_INFORMATION",
    "LsaIGetLogonGuid",
    "LsaISetClientDnsHostName",
    "LsaIFree_LSAPR_ACCOUNT_ENUM_BUFFER",
    "ServiceInit",
    "LsaIFilterSids",
    "LsarCreateSecret",
    "LsaISetPackageAttrInLogonSession",
    "LsaICancelNotification",
    "LsaINotifyGCStatusChange",
    "LsaIReferenceCredHandle",
    "LsarSetTrustedDomainInfoByName",
    "LsaINoMoreWin2KDomain",
    "LsaIUpdateForestTrustInformation",
    "LsapDsInitializeDsStateInfo",
    "LsaIFree_LSAPR_TRANSLATED_NAMES",
    "LsaINotifyChangeNotification",
    "LsaICallPackagePassthrough",
    "LsaIAdjustTokenObjectIntegrity",
    "LsaIUnregisterPolicyChangeNotificationCallback",
    "LsarDeleteObject",
    "LsaIGetCallInfo",
    "LsaIAuditKerberosLogon",
    "LsaIAuditAccountLogon",
    "LsaIEqualLogonProcessName",
    "LsaIFree_LSAPR_UNICODE_STRING_BUFFER",
    "LsaIFree_LSAPR_UNICODE_STRING",
    "LsaIHealthCheck",
    "LsaIUnregisterAllPolicyChangeNotificationCallback",
    "LsaIAuditKdcEvent",
    "LsarOpenSecret",
    "LsarEnumerateTrustedDomainsEx",
    "LsaIFree_LSAPR_TRUSTED_ENUM_BUFFER",
    "LsaIAdtAuditingEnabledByCategory",
    "LsaISetLogonGuidInLogonSession",
    "LsaIFree_LSAPR_TRUSTED_DOMAIN_INFO",
    "LsaIQueryInformationPolicyTrusted",
    "LsaIAuditReplay",
    "LsaIFilterNamespace",
    "LsapAuOpenSam",
    "LsaICryptUnprotectDataEx",
    "LsaINotifyPasswordChanged",
    "LsaIUpdateLogonSession",
    "LsaIVerifyCachability",
    "LsaIFree_LSAP_SUBNET_INFO",
    "LsaIFree_LSAI_PRIVATE_DATA",
    "LsaIFreeSupplementalTokenInfo",
    "LsaICryptProtectDataEx",
    "LsaIAuditAccountLogonEx",
    "LsaIDereferenceCredHandle",
    "LsaIUnregisterLogonSessionCallback",
    "LsaICryptProtectData",
    "LsaIFree_LSAPR_TRUSTED_ENUM_BUFFER_EX",
    "LsaIQueryForestTrustInfo",
    "LsaIRegisterLogonSessionCallback",
    "LsaIFree_LSA_FOREST_TRUST_INFORMATION",
    "LsaIQueryPackageAttrInLogonSession",
    "LsaIGetNego2Package",
    "LsaIFree_LSAPR_PRIVILEGE_ENUM_BUFFER",
    "LsaISamIndicatedDsStarted",
    "LsapInitLsa",
    "LsaIFree_LSAPR_REFERENCED_DOMAIN_LIST",
    "LsaIFree_LSAPR_SR_SECURITY_DESCRIPTOR",
    "LsaIFree_LSAPR_TRANSLATED_SIDS"
  ],
  "lsmproxy.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "luainstall.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "lz32.dll": [
    "LZRead",
    "LZCopy",
    "LZClose",
    "LZCreateFileW",
    "LZOpenFileW",
    "LZCloseFile",
    "GetExpandedNameW",
    "LZInit",
    "LZStart",
    "GetExpandedNameA",
    "CopyLZFile",
    "LZOpenFileA",
    "LZDone",
    "LZSeek"
  ],
  "MCEWMDRMNDBootstrap.dll": [
    "ShutdownMCENDBootstrap",
    "CreateMCENDBootstrap",
    "StartupMCENDBootstrap"
  ],
  "MFPlay.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "MFPCreateMediaPlayer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "MFWMAAEC.DLL": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "MMDevAPI.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "MP3DMOD.DLL": [
    "CreateInstance",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "MP43DECD.DLL": [
    "CreateInstance",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "MP4SDECD.DLL": [
    "CreateInstance",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "MPG4DECD.DLL": [
    "CreateInstance",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "MPSSVC.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "MSAC3ENC.DLL": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "MSMPEG2ENC.DLL": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "MSVidCtl.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "MUILanguageCleanup.dll": [
    "OnUILanguageRemove",
    "OnMachineUILanguageInit",
    "OnUILanguageAdd",
    "OnMachineUILanguageClear",
    "OnMachineUILanguageSwitch"
  ],
  "Magnification.dll": [
    "MagGetWindowSource",
    "MagSetImageScalingCallback",
    "MagGetWindowFilterList",
    "MagGetWindowTransform",
    "MagSetWindowSource",
    "MagInitialize",
    "MagGetColorEffect",
    "MagSetColorEffect",
    "MagSetWindowTransform",
    "MagSetWindowFilterList",
    "MagUninitialize",
    "MagGetImageScalingCallback"
  ],
  "Mcx2Svc.dll": [
    "ServiceMain"
  ],
  "McxDriv.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "Mcx2Install"
  ],
  "MediaMetadataHandler.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "MsCtfMonitor.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "InitLocalMsCtfMonitor",
    "DllGetClassObject",
    "DoMsCtfMonitor",
    "DllRegisterServer",
    "UninitLocalMsCtfMonitor"
  ],
  "MsPbdaCoInst.dll": [
    "CoInstallerEntry"
  ],
  "MsRdpWebAccess.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "MsiCofire.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance",
    "DllMain"
  ],
  "mapi32.dll": [
    "MAPIOpenFormMgr@8",
    "cmc_act_on",
    "UNKOBJ_ScAllocateMore@16",
    "FBadRowSet@4",
    "PpropFindProp@12",
    "HrGetOmiProvidersFlags",
    "MAPIDeinitIdle@0",
    "LPropCompareProp@8",
    "SwapPlong@8",
    "FBadSortOrderSet@4",
    "cmc_query_configuration",
    "ChangeIdleRoutine@28",
    "HrComposeEID@28",
    "HrSetOneProp@8",
    "GetOutlookVersion",
    "FtDivFtBogus@20",
    "FBadColumnSet@4",
    "SzFindSz@8",
    "UFromSz@4",
    "cmc_logoff",
    "GetOutlookVersion@0",
    "RTFSync",
    "ScRelocNotifications@20",
    "MAPISendDocuments",
    "ScDupPropset@16",
    "__CPPValidateParameters@8",
    "FreeProws@4",
    "FBadProp@4",
    "EnableIdleRoutine@8",
    "ScBinFromHexBounded@12",
    "HrAddColumnsEx@20",
    "ScCountNotifications@12",
    "GetTnefStreamCodepage",
    "HrValidateParameters@8",
    "UNKOBJ_Free@8",
    "UlFromSzHex@4",
    "SetAttribIMsgOnIStg@16",
    "HrAddColumns@16",
    "PropCopyMore@16",
    "FtgRegisterIdleRoutine@20",
    "cmc_free",
    "MAPIFreeBuffer@4",
    "MNLS_lstrcpyW@8",
    "OpenTnefStream@28",
    "HrSzFromEntryID@12",
    "LaunchWizard@20",
    "MAPIDeleteMail",
    "cmc_read",
    "HrSetOmiProvidersFlagsInvalid",
    "ScCopyProps@16",
    "MAPILogoff",
    "SzFindCh@8",
    "CloseIMsgSession@4",
    "FGetComponentPath@20",
    "BMAPIResolveName",
    "DeinitMapiUtil@0",
    "FtAdcFt@20",
    "HrValidateIPMSubtree@20",
    "MNLS_lstrlenW@4",
    "HrAllocAdviseSink@12",
    "HrDecomposeEID@28",
    "cmc_look_up",
    "MAPIAdminProfiles@8",
    "MAPIOpenLocalFormContainer",
    "ScRelocProps@20",
    "EncodeID@12",
    "MAPIInitialize",
    "FtMulDw@12",
    "MNLS_IsBadStringPtrW@8",
    "BMAPIReadMail",
    "HrDispatchNotifications@4",
    "ScCopyNotifications@16",
    "CreateTable@36",
    "MNLS_WideCharToMultiByte@32",
    "BMAPIGetAddress",
    "MAPIAllocateBuffer",
    "__ValidateParameters@8",
    "MAPIUninitialize",
    "WrapCompressedRTFStream",
    "BMAPISendMail",
    "BMAPIGetReadMail",
    "DeregisterIdleRoutine@4",
    "cmc_send_documents",
    "UNKOBJ_ScSzFromIdsAlloc@20",
    "MAPIGetDefaultMalloc@0",
    "MAPIAllocateMore",
    "MAPIReadMail",
    "FtMulDwDw@8",
    "UlAddRef@4",
    "OpenIMsgOnIStg@44",
    "MAPIResolveName",
    "DllCanUnloadNow",
    "HrDecomposeMsgID@24",
    "UlRelease@4",
    "DllGetClassObject",
    "FGetComponentPath",
    "OpenStreamOnFile",
    "FBadRglpNameID@8",
    "HrGetOmiProvidersFlags@8",
    "MAPIAdminProfiles",
    "MAPIAllocateMore@12",
    "FBinFromHex@8",
    "cmc_logon",
    "ScCreateConversationIndex@16",
    "GetTnefStreamCodepage@12",
    "WrapStoreEntryID@24",
    "OpenTnefStreamEx@32",
    "MNLS_MultiByteToWideChar@24",
    "FtSubFt@16",
    "FEqualNames@8",
    "InstallFilterHook@4",
    "SwapPword@8",
    "FBadRow@4",
    "BMAPIDetails",
    "FtNegFt@8",
    "UNKOBJ_FreeRows@8",
    "OpenTnefStream",
    "MAPIDetails",
    "MAPILogonEx@20",
    "UlPropSize@4",
    "ScGenerateMuid@4",
    "IsBadBoundedStringPtr@8",
    "FBadRestriction@4",
    "ScCountProps@12",
    "MAPIInitIdle@4",
    "ScInitMapiUtil@4",
    "MNLS_lstrcmpW@8",
    "FreePadrlist@4",
    "OpenIMsgSession@12",
    "ScMAPIXFromSMAPI",
    "MAPIFindNext",
    "LAUNCHWIZARD",
    "SzFindLastCh@8",
    "MapStorageSCode@4",
    "RTFSync@12",
    "MAPIInitialize@4",
    "MAPILogon",
    "ScMAPIXFromCMC",
    "MAPISaveMail",
    "WrapCompressedRTFStream@12",
    "FDecodeID@12",
    "FBadEntryList@4",
    "HrIStorageFromStream@16",
    "MAPIOpenLocalFormContainer@4",
    "WrapProgress@20",
    "MAPIAllocateBuffer@8",
    "HrGetOneProp@12",
    "UNKOBJ_COFree@8",
    "LpValFindProp@12",
    "HexFromBin@12",
    "BMAPISaveMail",
    "FBadRglpszW@8",
    "GetAttribIMsgOnIStg@12",
    "OpenStreamOnFile@24",
    "FtAddFt@16",
    "MAPIAddress",
    "CbOfEncoded@4",
    "FPropCompareProp@12",
    "MAPISendMail",
    "MAPIFreeBuffer",
    "HrSetOmiProvidersFlagsInvalid@4",
    "UNKOBJ_ScCOAllocate@12",
    "HrEntryIDFromSz@12",
    "BuildDisplayTable@40",
    "HrComposeMsgID@24",
    "CchOfEncoding@4",
    "CreateIProp@24",
    "HrQueryAllRows@24",
    "OpenTnefStreamEx",
    "cmc_send",
    "BMAPIAddress",
    "MNLS_CompareStringW@24",
    "UNKOBJ_ScAllocate@12",
    "FBadRglpszA@8",
    "MAPILogonEx",
    "ScLocalPathFromUNC@12",
    "MAPIOpenFormMgr",
    "UNKOBJ_ScCOReallocate@12",
    "PRProviderInit",
    "ScUNCFromLocalPath@12",
    "FPropExists@8",
    "HrThisThreadAdviseSink@8",
    "FixMAPI@0",
    "MAPIUninitialize@0",
    "FPropContainsProp@12",
    "FixMAPI",
    "cmc_list",
    "FBadPropTag@4",
    "BMAPIFindNext"
  ],
  "mapistub.dll": [
    "MAPIOpenFormMgr@8",
    "cmc_act_on",
    "UNKOBJ_ScAllocateMore@16",
    "FBadRowSet@4",
    "PpropFindProp@12",
    "HrGetOmiProvidersFlags",
    "MAPIDeinitIdle@0",
    "LPropCompareProp@8",
    "SwapPlong@8",
    "FBadSortOrderSet@4",
    "cmc_query_configuration",
    "ChangeIdleRoutine@28",
    "HrComposeEID@28",
    "HrSetOneProp@8",
    "GetOutlookVersion",
    "FtDivFtBogus@20",
    "FBadColumnSet@4",
    "SzFindSz@8",
    "UFromSz@4",
    "cmc_logoff",
    "GetOutlookVersion@0",
    "RTFSync",
    "ScRelocNotifications@20",
    "MAPISendDocuments",
    "ScDupPropset@16",
    "__CPPValidateParameters@8",
    "FreeProws@4",
    "FBadProp@4",
    "EnableIdleRoutine@8",
    "ScBinFromHexBounded@12",
    "HrAddColumnsEx@20",
    "ScCountNotifications@12",
    "GetTnefStreamCodepage",
    "HrValidateParameters@8",
    "UNKOBJ_Free@8",
    "UlFromSzHex@4",
    "SetAttribIMsgOnIStg@16",
    "HrAddColumns@16",
    "PropCopyMore@16",
    "FtgRegisterIdleRoutine@20",
    "cmc_free",
    "MAPIFreeBuffer@4",
    "MNLS_lstrcpyW@8",
    "OpenTnefStream@28",
    "HrSzFromEntryID@12",
    "LaunchWizard@20",
    "MAPIDeleteMail",
    "cmc_read",
    "HrSetOmiProvidersFlagsInvalid",
    "ScCopyProps@16",
    "MAPILogoff",
    "SzFindCh@8",
    "CloseIMsgSession@4",
    "FGetComponentPath@20",
    "BMAPIResolveName",
    "DeinitMapiUtil@0",
    "FtAdcFt@20",
    "HrValidateIPMSubtree@20",
    "MNLS_lstrlenW@4",
    "HrAllocAdviseSink@12",
    "HrDecomposeEID@28",
    "cmc_look_up",
    "MAPIAdminProfiles@8",
    "MAPIOpenLocalFormContainer",
    "ScRelocProps@20",
    "EncodeID@12",
    "MAPIInitialize",
    "FtMulDw@12",
    "MNLS_IsBadStringPtrW@8",
    "BMAPIReadMail",
    "HrDispatchNotifications@4",
    "ScCopyNotifications@16",
    "CreateTable@36",
    "MNLS_WideCharToMultiByte@32",
    "BMAPIGetAddress",
    "MAPIAllocateBuffer",
    "__ValidateParameters@8",
    "MAPIUninitialize",
    "WrapCompressedRTFStream",
    "BMAPISendMail",
    "BMAPIGetReadMail",
    "DeregisterIdleRoutine@4",
    "cmc_send_documents",
    "UNKOBJ_ScSzFromIdsAlloc@20",
    "MAPIGetDefaultMalloc@0",
    "MAPIAllocateMore",
    "MAPIReadMail",
    "FtMulDwDw@8",
    "UlAddRef@4",
    "OpenIMsgOnIStg@44",
    "MAPIResolveName",
    "DllCanUnloadNow",
    "HrDecomposeMsgID@24",
    "UlRelease@4",
    "DllGetClassObject",
    "FGetComponentPath",
    "OpenStreamOnFile",
    "FBadRglpNameID@8",
    "HrGetOmiProvidersFlags@8",
    "MAPIAdminProfiles",
    "MAPIAllocateMore@12",
    "FBinFromHex@8",
    "cmc_logon",
    "ScCreateConversationIndex@16",
    "GetTnefStreamCodepage@12",
    "WrapStoreEntryID@24",
    "OpenTnefStreamEx@32",
    "MNLS_MultiByteToWideChar@24",
    "FtSubFt@16",
    "FEqualNames@8",
    "InstallFilterHook@4",
    "SwapPword@8",
    "FBadRow@4",
    "BMAPIDetails",
    "FtNegFt@8",
    "UNKOBJ_FreeRows@8",
    "OpenTnefStream",
    "MAPIDetails",
    "MAPILogonEx@20",
    "UlPropSize@4",
    "ScGenerateMuid@4",
    "IsBadBoundedStringPtr@8",
    "FBadRestriction@4",
    "ScCountProps@12",
    "MAPIInitIdle@4",
    "ScInitMapiUtil@4",
    "MNLS_lstrcmpW@8",
    "FreePadrlist@4",
    "OpenIMsgSession@12",
    "ScMAPIXFromSMAPI",
    "MAPIFindNext",
    "LAUNCHWIZARD",
    "SzFindLastCh@8",
    "MapStorageSCode@4",
    "RTFSync@12",
    "MAPIInitialize@4",
    "MAPILogon",
    "ScMAPIXFromCMC",
    "MAPISaveMail",
    "WrapCompressedRTFStream@12",
    "FDecodeID@12",
    "FBadEntryList@4",
    "HrIStorageFromStream@16",
    "MAPIOpenLocalFormContainer@4",
    "WrapProgress@20",
    "MAPIAllocateBuffer@8",
    "HrGetOneProp@12",
    "UNKOBJ_COFree@8",
    "LpValFindProp@12",
    "HexFromBin@12",
    "BMAPISaveMail",
    "FBadRglpszW@8",
    "GetAttribIMsgOnIStg@12",
    "OpenStreamOnFile@24",
    "FtAddFt@16",
    "MAPIAddress",
    "CbOfEncoded@4",
    "FPropCompareProp@12",
    "MAPISendMail",
    "MAPIFreeBuffer",
    "HrSetOmiProvidersFlagsInvalid@4",
    "UNKOBJ_ScCOAllocate@12",
    "HrEntryIDFromSz@12",
    "BuildDisplayTable@40",
    "HrComposeMsgID@24",
    "CchOfEncoding@4",
    "CreateIProp@24",
    "HrQueryAllRows@24",
    "OpenTnefStreamEx",
    "cmc_send",
    "BMAPIAddress",
    "MNLS_CompareStringW@24",
    "UNKOBJ_ScAllocate@12",
    "FBadRglpszA@8",
    "MAPILogonEx",
    "ScLocalPathFromUNC@12",
    "MAPIOpenFormMgr",
    "UNKOBJ_ScCOReallocate@12",
    "PRProviderInit",
    "ScUNCFromLocalPath@12",
    "FPropExists@8",
    "HrThisThreadAdviseSink@8",
    "FixMAPI@0",
    "MAPIUninitialize@0",
    "FPropContainsProp@12",
    "FixMAPI",
    "cmc_list",
    "FBadPropTag@4",
    "BMAPIFindNext"
  ],
  "mciavi32.dll": [
    "DriverProc",
    "KeyboardHookProc"
  ],
  "mcicda.dll": [
    "DriverProc"
  ],
  "mciqtz32.dll": [
    "DriverProc"
  ],
  "mciseq.dll": [
    "DriverProc"
  ],
  "mciwave.dll": [
    "DriverProc"
  ],
  "mcmde.dll": [
    "MFCreateNetPresentationTarget",
    "DllUnregisterServer",
    "MFCreateNetVRoot",
    "DllCanUnloadNow",
    "MFCreateRtspSinkV10",
    "MFCreateMDEOpCenter",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "mcsrchPH.dll": [
    "private: long __thiscall CGuideSource::FindColumnIndexByName(struct tagDBCOLUMNINFO *,unsigned long,unsigned short *,unsigned long *)",
    "private: static __int64 const CGuideSource::m_i64TicksPerDay",
    "private: long __thiscall CGuideSource::CopyFileTimeDataToTarget(unsigned char *,struct tagDBBINDING &,struct _FILETIME &)",
    "private: long __thiscall CGuideSource::OpenDatabase(void)",
    "public: __thiscall CGuideSource::~CGuideSource(void)",
    "private: long __thiscall CGuideSource::ReadEPGRegistryInfo(void)",
    "private: static int const CGuideSource::m_ciIdRadixDec",
    "private: static int const CGuideSource::m_iDaysPer100Years",
    "private: long __thiscall CGuideSource::CopyWSTRDataToTarget(unsigned char *,struct tagDBBINDING &,unsigned short *,unsigned int)",
    "public: __thiscall CGuideSource::CGuideSource(void)",
    "DllRegisterServer",
    "private: static __int64 const CGuideSource::m_i64FileTimeOffset",
    "private: static __int64 const CGuideSource::m_i64TicksPerSecond",
    "private: static int const CGuideSource::m_iDaysPer400Years",
    "private: long __thiscall CGuideSource::ReadDatabaseFilename(struct HKEY__ *)",
    "DllUnregisterServer",
    "private: long __thiscall CGuideSource::ReadFlushIntervalOverride(struct HKEY__ *)",
    "private: long __thiscall CGuideSource::CloseDatabase(void)",
    "private: static __int64 const CGuideSource::m_i64TicksPerMinute",
    "private: long __thiscall CGuideSource::SetDefaultDatabaseFilename(unsigned long)",
    "public: long __thiscall CGuideSource::ReleaseProgramRow(struct _ProgramData *)",
    "private: long __thiscall CGuideSource::GetAccessor(class CTable *)",
    "private: static long const CGuideSource::m_clNoOverrideSentinel",
    "private: long __thiscall CGuideSource::ReadDatabaseSizeOverride(struct HKEY__ *)",
    "private: static int const CGuideSource::m_iDaysTo1601",
    "public: __thiscall CGuideSource::CGuideSource(class CGuideSource const &)",
    "private: static __int64 const CGuideSource::m_i64TicksPerHour",
    "public: long __thiscall CGuideSource::GetNextPersonRow(struct _PersonData *)",
    "private: long __thiscall CGuideSource::ReadBufferSizeOverride(struct HKEY__ *)",
    "public: long __thiscall CGuideSource::GetPersonRowBasedOnId(unsigned short *,struct _PersonData *)",
    "private: long __thiscall CGuideSource::CopyInt64DataToTarget(unsigned char *,struct tagDBBINDING &,unsigned short *,unsigned int)",
    "public: long __thiscall CGuideSource::Initialize(void)",
    "public: long __thiscall CGuideSource::GetProgramRowBasedOnId(unsigned short *,struct _ProgramData *)",
    "private: long __thiscall CGuideSource::InitializeTable(class CTable *)",
    "private: static int const CGuideSource::m_ciIdRadixHex",
    "private: long __thiscall CGuideSource::GetExtrasForThisProgram(struct _ProgramData *)",
    "private: static __int64 const CGuideSource::m_i64TicksPerMillisecond",
    "private: static int const CGuideSource::m_iDaysPerYear",
    "DllCanUnloadNow",
    "public: long __thiscall CGuideSource::ReleasePersonRow(struct _PersonData *)",
    "private: long __thiscall CGuideSource::ReadEPGClientId(struct HKEY__ *)",
    "DllGetClassObject",
    "public: long __thiscall CGuideSource::GetNextProgramRow(struct _ProgramData *)",
    "private: static int const CGuideSource::m_iDaysPer4Years",
    "private: long __thiscall CGuideSource::GetRowset(class CTable *)"
  ],
  "mctres.dll": "No exports",
  "mcupdate_AuthenticAMD.dll": "No exports",
  "mcupdate_GenuineIntel.dll": "No exports",
  "mdminst.dll": [
    "ClassInstall32"
  ],
  "memdiag.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mf.dll": [
    "MFCreateASFMediaSinkActivate",
    "MFCreateASFProfile",
    "MFCreateDrmNetNDSchemePlugin",
    "MFCreate3GPMediaSink",
    "MFCreateFileBlockMap",
    "MFCreateSequencerSource",
    "MFCreateTranscodeProfile",
    "MFCreateAggregateSource",
    "MFCreateSimpleTypeHandler",
    "MFCreateCacheManager",
    "MFCreateSequencerSourceRemoteStream",
    "AppendPropVariant",
    "ConvertPropVariant",
    "MFCreateTopologyNode",
    "MFCreateUrlmonSchemePlugin",
    "MFCreateASFIndexerByteStream",
    "MFCreateTopology",
    "MFCreateASFSplitter",
    "MFCreateCredentialCache",
    "MFCreateSecureHttpSchemePlugin",
    "MFCreateDeviceSourceActivate",
    "MFCreateAudioRendererActivate",
    "MFCreateSAMIByteStreamPlugin",
    "MFCreateNetSchemePlugin",
    "MFCreateASFByteStreamPlugin",
    "MFCreateASFMultiplexer",
    "MFCreateNSCByteStreamPlugin",
    "ExtractPropVariant",
    "MFEnumDeviceSources",
    "MFCreateMP3MediaSink",
    "MFGetSupportedSchemes",
    "MFCreateASFMediaSink",
    "MFGetSupportedMimeTypes",
    "MFCreateByteCacheFile",
    "MFGetMultipleServiceProviders",
    "MFReadSequencerSegmentOffset",
    "MFCreateStandardQualityManager",
    "MFGetService",
    "MFCreateSampleCopierMFT",
    "MFCreatePMPServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "MFCreateWMAEncoderActivate",
    "MFCreateTopoLoader",
    "MFShutdownObject",
    "MFCreateVideoRenderer",
    "MFCreateSequencerSegmentOffset",
    "MFCreateHttpSchemePlugin",
    "MFCreateFileSchemePlugin",
    "MFCreateVideoRendererActivate",
    "MFCreateDeviceSource",
    "MFCreatePMPMediaSession",
    "MFCreateProxyLocator",
    "MFCreateRemoteDesktopPlugin",
    "MFCreateSampleGrabberSinkActivate",
    "MergePropertyStore",
    "MFCreateASFStreamingMediaSink",
    "MFCreateASFIndexer",
    "MFCreateAudioRenderer",
    "MFCreateMP3ByteStreamPlugin",
    "MFTranscodeGetAudioOutputAvailableTypes",
    "MFGetTopoNodeCurrentType",
    "MFCreateAppSourceProxy",
    "CreateNamedPropertyStore",
    "MFCreatePresentationDescriptorFromASFProfile",
    "MFCreatePresentationClock",
    "MFRequireProtectedEnvironment",
    "DllRegisterServer",
    "MFCreateMediaProcessor",
    "CopyPropertyStore",
    "DllUnregisterServer",
    "MFCreatePMPHost",
    "MFCreateTranscodeSinkActivate",
    "MFCreateASFContentInfo",
    "MFCreateASFProfileFromPresentationDescriptor",
    "MFCreateMediaSession",
    "MFCreateWMVEncoderActivate",
    "MFCreateMPEG4MediaSink",
    "MFCreateTranscodeTopology",
    "MFCreateLPCMByteStreamPlugin",
    "MFCreateASFStreamingMediaSinkActivate",
    "MFCreateASFStreamSelector",
    "MFCreateSourceResolver"
  ],
  "mf3216.dll": [
    "Mf3216DllInitialize",
    "ConvertEmfToWmf"
  ],
  "mfAACEnc.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "mfc40.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mfc40u.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mfc42.dll": [
    "public: static struct CRuntimeClass const CDataPathProperty::classCDataPathProperty",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "public: static struct CRuntimeClass const CCachedDataPathProperty::classCCachedDataPathProperty",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "mfc42u.dll": [
    "public: static struct CRuntimeClass const CDataPathProperty::classCDataPathProperty",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "public: static struct CRuntimeClass const CCachedDataPathProperty::classCCachedDataPathProperty",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "mfc70.dll": "No exports",
  "mfcsubs.dll": [
    "bool __stdcall operator>=(unsigned short const *,class CString const &)",
    "public: class CString * __thiscall CStringArray::GetData(void)",
    "public: class CString const & __thiscall CString::operator+=(char)",
    "public: struct __POSITION * __thiscall CMapStringToPtr::GetStartPosition(void)const",
    "const CStringArray::`vftable'",
    "public: void __thiscall CString::UnlockBuffer(void)",
    "bool __stdcall operator<=(unsigned short const *,class CString const &)",
    "public: void __thiscall CStringArray::SetSize(int,int)",
    "public: class CString const & __thiscall CString::operator=(char const *)",
    "public: __thiscall CString::operator unsigned short const *(void)const",
    "public: void __thiscall CStringArray::FreeExtra(void)",
    "public: __thiscall CString::CString(char const *)",
    "public: virtual __thiscall CObject::~CObject(void)",
    "protected: struct CStringData * __thiscall CString::GetData(void)const",
    "void __stdcall ConstructElements(class CString *,int)",
    "public: class CString __thiscall CString::SpanExcluding(unsigned short const *)const",
    "public: int __thiscall CMapStringToPtr::RemoveKey(unsigned short const *)",
    "bool __stdcall operator!=(class CString const &,unsigned short const *)",
    "public: int __thiscall CString::LoadStringW(unsigned int)",
    "public: virtual int __thiscall CSyncObject::Unlock(long,long *)",
    "bool __stdcall operator<(class CString const &,class CString const &)",
    "class CString __stdcall operator+(class CString const &,unsigned short const *)",
    "public: void __thiscall CString::MakeReverse(void)",
    "public: void __thiscall CString::TrimLeft(void)",
    "public: virtual int __thiscall CCriticalSection::Unlock(void)",
    "public: unsigned short * __thiscall CString::LockBuffer(void)",
    "protected: struct CMapStringToPtr::CAssoc * __thiscall CMapStringToPtr::GetAssocAt(unsigned short const *,unsigned int &)const",
    "public: virtual __thiscall CSyncObject::~CSyncObject(void)",
    "protected: void __thiscall CString::ConcatCopy(int,unsigned short const *,int,unsigned short const *)",
    "public: void __thiscall CString::MakeUpper(void)",
    "protected: void __thiscall CString::FormatV(unsigned short const *,char *)",
    "public: int __thiscall CStringArray::Append(class CStringArray const &)",
    "bool __stdcall operator<(class CString const &,unsigned short const *)",
    "protected: void __thiscall CString::CopyBeforeWrite(void)",
    "public: __thiscall CString::CString(class CString const &)",
    "protected: void __thiscall CString::ConcatInPlace(int,unsigned short const *)",
    "public: __thiscall CMapStringToPtr::CMapStringToPtr(int)",
    "bool __stdcall operator!=(unsigned short const *,class CString const &)",
    "const CObject::`vftable'",
    "public: void __thiscall CStringArray::InsertAt(int,class CStringArray *)",
    "public: class CString const & __thiscall CString::operator=(unsigned short const *)",
    "public: class CString const & __thiscall CString::operator=(unsigned char const *)",
    "public: __thiscall CString::~CString(void)",
    "public: int __thiscall CString::FindOneOf(unsigned short const *)const",
    "public: int __thiscall CString::ReverseFind(unsigned short)const",
    "protected: static void __stdcall CString::Release(struct CStringData *)",
    "public: int __thiscall CString::Find(unsigned short const *)const",
    "protected: void __thiscall CMapStringToPtr::FreeAssoc(struct CMapStringToPtr::CAssoc *)",
    "public: void __thiscall CStringArray::Copy(class CStringArray const &)",
    "public: class CString const & __thiscall CString::operator+=(unsigned short)",
    "class CString __stdcall operator+(class CString const &,class CString const &)",
    "class CString __stdcall operator+(class CString const &,unsigned short)",
    "public: unsigned short __thiscall CString::GetAt(int)const",
    "public: class CString __thiscall CStringArray::GetAt(int)const",
    "public: class CString const & __thiscall CString::operator+=(class CString const &)",
    "public: class CString const & __thiscall CString::operator+=(unsigned short const *)",
    "protected: void __thiscall CString::Release(void)",
    "public: void __thiscall CStringArray::RemoveAt(int,int)",
    "public: __thiscall CSyncObject::operator void *(void)const",
    "bool __stdcall operator<=(class CString const &,unsigned short const *)",
    "protected: struct CMapStringToPtr::CAssoc * __thiscall CMapStringToPtr::NewAssoc(void)",
    "const CCriticalSection::`vftable'",
    "public: unsigned short __thiscall CString::operator[](int)const",
    "public: class CString __thiscall CString::Right(int)const",
    "protected: void __thiscall CString::AllocBuffer(int)",
    "public: int __thiscall CString::GetLength(void)const",
    "public: __thiscall CString::CString(unsigned char const *)",
    "public: void __thiscall CStringArray::RemoveAll(void)",
    "public: class CString __thiscall CString::Left(int)const",
    "class CString __stdcall operator+(unsigned short const *,class CString const &)",
    "public: virtual int __thiscall CSyncObject::Lock(unsigned long)",
    "public: class CString const & __thiscall CString::operator=(class CString const &)",
    "public: struct CPlex & __thiscall CPlex::operator=(struct CPlex const &)",
    "public: __thiscall CCriticalSection::CCriticalSection(void)",
    "public: void __thiscall CString::ReleaseBuffer(int)",
    "public: __thiscall CString::CString(unsigned short const *)",
    "public: class CString __thiscall CString::Mid(int,int)const",
    "public: void __thiscall CString::Empty(void)",
    "bool __stdcall operator==(class CString const &,unsigned short const *)",
    "public: int __thiscall CString::GetAllocLength(void)const",
    "public: int __thiscall CMapStringToPtr::Lookup(unsigned short const *,void * &)const",
    "public: unsigned short * __thiscall CString::GetBuffer(int)",
    "public: void __thiscall CStringArray::SetAt(int,unsigned short const *)",
    "public: void __thiscall CStringArray::InsertAt(int,unsigned short const *,int)",
    "bool __stdcall operator>(unsigned short const *,class CString const &)",
    "class CString __stdcall operator+(char,class CString const &)",
    "public: class CString const * __thiscall CStringArray::GetData(void)const",
    "public: void __thiscall CPlex::FreeDataChain(void)",
    "public: int __thiscall CString::Find(unsigned short)const",
    "public: __thiscall CString::CString(void)",
    "public: void * & __thiscall CMapStringToPtr::operator[](unsigned short const *)",
    "public: virtual int __thiscall CCriticalSection::Lock(unsigned long)",
    "public: void __thiscall CString::SetAt(int,unsigned short)",
    "public: void __thiscall CStringArray::SetAtGrow(int,unsigned short const *)",
    "public: void __cdecl CString::FormatMessageW(unsigned short const *,...)",
    "void __stdcall CopyElements(class CString *,class CString const *,int)",
    "public: __thiscall CString::CString(unsigned short const *,int)",
    "int __stdcall AfxLoadString(unsigned int,unsigned short *,unsigned int)",
    "public: void __thiscall CMapStringToPtr::`default constructor closure'(void)",
    "const CSyncObject::`vftable'",
    "public: int __thiscall CStringArray::Add(unsigned short const *)",
    "protected: void __thiscall CString::AllocCopy(class CString &,unsigned int,unsigned int,unsigned int)const",
    "public: class CString & __thiscall CStringArray::ElementAt(int)",
    "public: void __thiscall CMapStringToPtr::GetNextAssoc(struct __POSITION * &,class CString &,void * &)const",
    "class CString __stdcall operator+(class CString const &,char)",
    "protected: void __thiscall CString::AllocBeforeWrite(int)",
    "public: int __thiscall CMapStringToPtr::LookupKey(unsigned short const *,unsigned short const * &)const",
    "public: __thiscall CString::CString(unsigned short,int)",
    "bool __stdcall operator>=(class CString const &,class CString const &)",
    "public: __thiscall CStringArray::CStringArray(void)",
    "unsigned int __stdcall HashKey(struct _GUID const &)",
    "unsigned short * __stdcall AfxA2WHelper(unsigned short *,char const *,int)",
    "bool __stdcall operator!=(class CString const &,class CString const &)",
    "public: void __thiscall CString::TrimRight(void)",
    "public: void __thiscall CMapStringToPtr::InitHashTable(unsigned int,int)",
    "bool __stdcall operator>(class CString const &,unsigned short const *)",
    "public: unsigned short * __thiscall CString::GetBufferSetLength(int)",
    "public: int __thiscall CMapStringToPtr::GetCount(void)const",
    "protected: __thiscall CObject::CObject(void)",
    "bool __stdcall operator==(class CString const &,class CString const &)",
    "public: int __thiscall CMapStringToPtr::IsEmpty(void)const",
    "unsigned int __stdcall HashKey(unsigned short const *)",
    "protected: static int __stdcall CString::SafeStrlen(unsigned short const *)",
    "protected: void __thiscall CString::Init(void)",
    "public: int __thiscall CString::IsEmpty(void)const",
    "public: virtual __thiscall CMapStringToPtr::~CMapStringToPtr(void)",
    "public: static struct CPlex * __stdcall CPlex::Create(struct CPlex * &,unsigned int,unsigned int)",
    "unsigned int __stdcall HashKey(char const *)",
    "public: int __thiscall CString::CompareNoCase(unsigned short const *)const",
    "public: __thiscall CCriticalSection::operator struct _RTL_CRITICAL_SECTION *(void)",
    "public: int __thiscall CString::Compare(unsigned short const *)const",
    "public: class CString __thiscall CStringArray::operator[](int)const",
    "public: void __cdecl CString::FormatMessageW(unsigned int,...)",
    "protected: void __thiscall CString::AssignCopy(int,unsigned short const *)",
    "bool __stdcall operator<(unsigned short const *,class CString const &)",
    "public: class CString & __thiscall CStringArray::operator[](int)",
    "public: int __thiscall CCriticalSection::Lock(void)",
    "public: class CString __thiscall CString::Mid(int)const",
    "bool __stdcall operator>(class CString const &,class CString const &)",
    "public: void * __thiscall CPlex::data(void)",
    "public: class CString __thiscall CString::SpanIncluding(unsigned short const *)const",
    "public: int __thiscall CString::Collate(unsigned short const *)const",
    "bool __stdcall operator>=(class CString const &,unsigned short const *)",
    "class CString const & __stdcall AfxGetEmptyString(void)",
    "public: unsigned int __thiscall CMapStringToPtr::GetHashTableSize(void)const",
    "int __stdcall AfxExtractSubString(class CString &,unsigned short const *,int,unsigned short)",
    "bool __stdcall operator==(unsigned short const *,class CString const &)",
    "public: virtual __thiscall CStringArray::~CStringArray(void)",
    "public: void __cdecl CString::Format(unsigned short const *,...)",
    "public: void __thiscall CMapStringToPtr::RemoveAll(void)",
    "public: virtual __thiscall CCriticalSection::~CCriticalSection(void)",
    "public: __thiscall CSyncObject::CSyncObject(unsigned short const *)",
    "public: void __thiscall CMapStringToPtr::SetAt(unsigned short const *,void *)",
    "public: void __thiscall CString::MakeLower(void)",
    "public: int __thiscall CStringArray::GetUpperBound(void)const",
    "public: int __thiscall CStringArray::GetSize(void)const",
    "public: unsigned int __thiscall CMapStringToPtr::HashKey(unsigned short const *)const",
    "void __stdcall DestructElements(class CString *,int)",
    "bool __stdcall operator<=(class CString const &,class CString const &)",
    "public: void __thiscall CString::FreeExtra(void)",
    "public: class CString const & __thiscall CString::operator=(unsigned short)",
    "public: void __cdecl CString::Format(unsigned int,...)",
    "class CString __stdcall operator+(unsigned short,class CString const &)",
    "char * __stdcall AfxW2AHelper(char *,unsigned short const *,int)",
    "const CMapStringToPtr::`vftable'",
    "public: class CString const & __thiscall CString::operator=(char)"
  ],
  "mfds.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mfdvdec.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "mferror.dll": "No exports",
  "mfh264enc.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mfmjpegdec.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "mfplat.dll": [
    "MFCreateAlignedMemoryBuffer",
    "MFCreatePresentationDescriptor",
    "MFCancelWorkItem",
    "MFCreateMFVideoFormatFromMFMediaType",
    "MFCreateAMMediaTypeFromMFMediaType",
    "MFGetIoPortHandle",
    "CreatePropVariant",
    "MFStartup",
    "MFAverageTimePerFrameToFrameRate",
    "MFCancelCreateFile",
    "MFInitAMMediaTypeFromMFMediaType",
    "MFCreateEventQueue",
    "MFTUnregisterLocal",
    "MFGetTimerPeriodicity",
    "MFCreateCollection",
    "MFCreateAudioMediaType",
    "MFCreateMediaBufferWrapper",
    "MFIsQueueThread",
    "MFInitMediaTypeFromMPEG1VideoInfo",
    "MFCreateWaveFormatExFromMFMediaType",
    "MFCreateURLFromPath",
    "MFRecordError",
    "MFCreateStreamDescriptor",
    "MFCreateSample",
    "MFLockWorkQueue",
    "MFEndRegisterWorkQueueWithMMCSS",
    "MFGetConfigurationString",
    "MFGetConfigurationDWORD",
    "MFCreateTempFile",
    "ValidateWaveFormat",
    "MFInitMediaTypeFromMPEG2VideoInfo",
    "MFInitVideoFormat",
    "MFGetConfigurationStore",
    "MFScheduleWorkItemEx",
    "MFTraceError",
    "MFInitMediaTypeFromWaveFormatEx",
    "MFCompareFullToPartialMediaType",
    "GetD3DFormatFromMFSubtype",
    "MFCreateMediaType",
    "MFCreateSocket",
    "MFPutWorkItemEx",
    "MFGetConfigurationPolicy",
    "MFGetPrivateWorkqueues",
    "MFDeserializeAttributesFromStream",
    "MFCreateMediaEvent",
    "MFGetRandomNumber",
    "MFJoinIoPort",
    "MFCreateSystemUnderlyingClock",
    "MFBeginCreateFile",
    "MFGetSystemTime",
    "MFEndUnregisterWorkQueueWithMMCSS",
    "MFCreateVideoMediaTypeFromSubtype",
    "MFIsFeatureEnabled",
    "MFBeginRegisterWorkQueueWithMMCSS",
    "MFAllocateWorkQueueEx",
    "MFFreeAdaptersAddresses",
    "MFAppendCollection",
    "MFCompareSockaddrAddresses",
    "MFCreateUdpSockets",
    "LFGetGlobalPool",
    "MFRemovePeriodicCallback",
    "MFConvertColorInfoToDXVA",
    "MFConvertToFP16Array",
    "MFSetSockaddrAny",
    "MFAddPeriodicCallback",
    "MFCreateMemoryBuffer",
    "MFTraceFuncEnter",
    "MFUnwrapMediaType",
    "MFGetNumericNameFromSockaddr",
    "GetAMSubtypeFromD3DFormat",
    "MFCreatePathFromURL",
    "MFTRegisterLocalByCLSID",
    "MFStreamDescriptorProtectMediaType",
    "MFHeapAlloc",
    "MFAllocateWorkQueue",
    "MFCreateMemoryStream",
    "MFTEnumEx",
    "MFTRegister",
    "MFTUnregister",
    "MFGetSockaddrFromNumericName",
    "MFInitMediaTypeFromAMMediaType",
    "MFCopyImage",
    "MFHeapFree",
    "MFGetAdaptersAddresses",
    "MFTEnum",
    "MFBlockThread",
    "MFDeserializePresentationDescriptor",
    "MFCalculateImageSize",
    "MFDeserializeEvent",
    "MFValidateMediaTypeSize",
    "MFCreateVideoMediaTypeFromVideoInfoHeader2",
    "MFllMulDiv",
    "MFCreateTransformActivate",
    "MFGetPlatform",
    "MFTUnregisterLocalByCLSID",
    "MFCreateSystemTimeSource",
    "MFCreateLegacyMediaBufferOnMFMediaBuffer",
    "MFSerializeEvent",
    "MFCreateGuid",
    "MFGetWorkQueueMMCSSTaskId",
    "MFFrameRateToAverageTimePerFrame",
    "MFPlatformBigEndian",
    "MFInitAttributesFromBlob",
    "MFGetUncompressedVideoFormat",
    "PropVariantFromStream",
    "MFCreateAsyncResult",
    "MFCreateVideoMediaTypeFromBitMapInfoHeaderEx",
    "MFCreateAttributes",
    "MFTGetInfo",
    "MFInvokeCallback",
    "MFInitMediaTypeFromMFVideoFormat",
    "MFBeginGetHostByName",
    "MFBeginUnregisterWorkQueueWithMMCSS",
    "MFCreateVideoMediaTypeFromVideoInfoHeader",
    "MFInitMediaTypeFromVideoInfoHeader2",
    "MFConvertColorInfoFromDXVA",
    "MFLockPlatform",
    "MFUnblockThread",
    "MFWrapMediaType",
    "MFGetAttributesAsBlobSize",
    "MFCreateVideoMediaType",
    "MFSerializeMediaTypeToStream",
    "MFInitMediaTypeFromVideoInfoHeader",
    "MFGetPlaneSize",
    "MFCreateMFByteStreamOnStream",
    "MFGetAttributesAsBlob",
    "MFGetStrideForBitmapInfoHeader",
    "MFGetPluginControl",
    "MFShutdown",
    "MFScheduleWorkItem",
    "MFPlatformLittleEndian",
    "MFPutWorkItem",
    "MFTRegisterLocal",
    "MFDeserializeMediaTypeFromStream",
    "CreatePropertyStore",
    "MFCreateVideoMediaTypeFromBitMapInfoHeader",
    "MFEndGetHostByName",
    "MFGetMFTMerit",
    "PropVariantToStream",
    "CopyPropVariant",
    "MFCreateSocketListener",
    "MFCalculateBitmapImageSize",
    "DestroyPropVariant",
    "MFUnlockPlatform",
    "MFUnlockWorkQueue",
    "MFSerializeAttributesToStream",
    "MFConvertFromFP16Array",
    "MFCreateMediaTypeFromRepresentation",
    "MFSerializePresentationDescriptor",
    "MFCreateSourceResolver",
    "MFGetWorkQueueMMCSSClass",
    "MFInitVideoFormat_RGB",
    "MFEndCreateFile",
    "FormatTagFromWfx",
    "MFCreateFile"
  ],
  "mfps.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "mfreadwrite.dll": [
    "MFCreateSourceReaderFromByteStream",
    "MFCreateSourceReaderFromMediaSource",
    "DllCanUnloadNow",
    "MFCreateSinkWriterFromMediaSink",
    "MFCreateSourceReaderFromURL",
    "DllGetClassObject",
    "MFCreateSinkWriterFromURL"
  ],
  "mfvdsp.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mgmtapi.dll": [
    "SnmpMgrRequest",
    "SnmpMgrOpen",
    "SnmpMgrClose",
    "SnmpMgrStrToOid",
    "SnmpMgrCtl",
    "SnmpMgrTrapListen",
    "SnmpMgrGetTrap",
    "SnmpMgrOidToStr",
    "SnmpMgrGetTrapEx"
  ],
  "microsoft-windows-hal-events.dll": "No exports",
  "microsoft-windows-kernel-power-events.dll": "No exports",
  "microsoft-windows-kernel-processor-power-events.dll": "No exports",
  "midimap.dll": [
    "modMessage",
    "DriverProc",
    "modmCallback"
  ],
  "migisol.dll": [
    "public: virtual long __thiscall CIlAdvapi32::RegDeleteKeyW(struct HKEY__ *,unsigned short const *)",
    "public: virtual void __thiscall CIlKernel32::EnterCriticalSection(struct _RTL_CRITICAL_SECTION *)",
    "private: static struct SC_HANDLE__ * (__stdcall* CIlNt4Advapi32::m_OpenSCManagerW)(unsigned short const *,unsigned short const *,unsigned long)",
    "public: virtual unsigned long __thiscall CIlKernel32::GetPrivateProfileStringW(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short *,unsigned long,unsigned short const *)",
    "public: virtual int __thiscall CIlNt4Advapi32::EncryptFileW(unsigned short const *)",
    "public: virtual int __thiscall CIlWs2_32::send(unsigned int,char const *,int,int)",
    "public: virtual int __thiscall CIlWs2_32::WSAStartup(unsigned short,struct WSAData *)",
    "public: virtual int __thiscall CIlKernel32::GetLocaleInfoW(unsigned long,unsigned long,unsigned short *,int)",
    "public: __thiscall CIlIphlpapi::CIlIphlpapi(class CIlIphlpapi const &)",
    "public: virtual void * __thiscall CIlKernel32::GetCurrentProcess(void)",
    "public: void __thiscall CIlNt4Advapi32::release_QueryServiceConfigW(void)",
    "public: __thiscall CIlMuisetupapi::CIlMuisetupapi(void)",
    "private: static unsigned long __stdcall CIlNt4Netapi32::IlNetUserGetLocalGroups(unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *)",
    "public: virtual int __thiscall CIlAdvapi32::CryptDestroyKey(unsigned long)",
    "public: virtual int __thiscall CIlWs2_32::getsockname(unsigned int,struct sockaddr *,int *)",
    "public: virtual void * __thiscall CIlKernel32::HeapReAlloc(void *,unsigned long,void *,unsigned long)",
    "public: virtual int __thiscall CIlKernel32::UnmapViewOfFile(void const *)",
    "public: virtual int __thiscall CIlWs2_32::WSAGetLastError(void)",
    "public: class CIlNt4User32 & __thiscall CIlNt4User32::operator=(class CIlNt4User32 const &)",
    "private: static unsigned long (__stdcall* CIlNt4Netapi32::m_NetLocalGroupAddMembers)(unsigned short const *,unsigned short const *,unsigned long,unsigned char *,unsigned long)",
    "public: __thiscall CIlSetupapi::CIlSetupapi(void)",
    "public: virtual int __thiscall CIlAdvapi32::LookupAccountSidW(unsigned short const *,void *,unsigned short *,unsigned long *,unsigned short *,unsigned long *,enum _SID_NAME_USE *)",
    "private: static unsigned long __stdcall CIlNt4Netapi32::IlNetApiBufferFree(void *)",
    "private: static void * __stdcall CIlNt4Setupapi::IlSetupDiGetClassDevsExW(struct _GUID const *,unsigned short const *,struct HWND__ *,unsigned long,void *,unsigned short const *,void *)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountChangeServiceConfigW",
    "public: void __thiscall CIlNt4Setupapi::release_SetupOpenFileQueue(void)",
    "struct IW2kNetapi32Interface * g_Nt4Netapi32",
    "public: virtual unsigned int __thiscall CIlWs2_32::accept(unsigned int,struct sockaddr *,int *)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiDestroyDeviceInfoList(void *)",
    "public: void __thiscall CIlNt4Kernel32::release_CreateToolhelp32Snapshot(void)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiDestroyDeviceInfoList",
    "public: void __thiscall CIlNt4Netapi32::release_NetUserGetLocalGroups(void)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_UnlockServiceDatabase)(void *)",
    "public: __thiscall CIlNt6Userenv::CIlNt6Userenv(class CIlNt6Userenv const &)",
    "public: virtual unsigned long __thiscall CIlKernel32::GetLogicalDrives(void)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountLockServiceDatabase",
    "public: virtual int __thiscall CIlWs2_32::select(int,struct fd_set *,struct fd_set *,struct fd_set *,struct timeval const *)",
    "private: static int (__stdcall* CIlNt4Kernel32::m_RegisterWaitForSingleObject)(void * *,void *,void (__stdcall*)(void *,unsigned char),void *,unsigned long,unsigned long)",
    "public: class CIlNt4Userenv & __thiscall CIlNt4Userenv::operator=(class CIlNt4Userenv const &)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiOpenDeviceInfoW(void *,unsigned short const *,struct HWND__ *,unsigned long,struct _SP_DEVINFO_DATA *)",
    "public: virtual long __thiscall CIlAdvapi32::RegSetKeySecurity(struct HKEY__ *,unsigned long,void *)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_StartServiceW)(struct SC_HANDLE__ *,unsigned long,unsigned short const * *)",
    "public: virtual int __thiscall CIlAdvapi32::GetSecurityDescriptorDacl(void *,int *,struct _ACL * *,int *)",
    "private: static void * (__stdcall* CIlNt4Kernel32::m_CreateToolhelp32Snapshot)(unsigned long,unsigned long)",
    "public: virtual int __thiscall CIlWs2_32::listen(unsigned int,int)",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_ConvertSidToStringSidW(void))(void *,unsigned short * *)",
    "public: virtual unsigned long __thiscall CIlKernel32::GetTickCount(void)",
    "public: void __thiscall CIlNt4Netapi32::release_NetLocalGroupAdd(void)",
    "public: virtual void * __thiscall CIlKernel32::VirtualAlloc(void *,unsigned long,unsigned long,unsigned long)",
    "public: virtual unsigned long __thiscall CIlKernel32::SetFilePointer(void *,long,long *,unsigned long)",
    "const CIlWs2_32::`vftable'",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiDestroyDriverInfoList(void *,struct _SP_DEVINFO_DATA *,unsigned long)",
    "public: virtual void * __thiscall CIlNt4Setupapi::SetupDiCreateDeviceInfoListExW(struct _GUID const *,struct HWND__ *,unsigned short const *,void *)",
    "public: __thiscall CIlNt6Userenv::CIlNt6Userenv(void)",
    "public: virtual int __thiscall CIlWs2_32::shutdown(unsigned int,int)",
    "class CIlUser32 IlUser32",
    "public: int (__stdcall*__thiscall CIlNt4Kernel32::get_GlobalMemoryStatusEx(void))(struct _MEMORYSTATUSEX *)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiGetDeviceInstallParamsW(void *,struct _SP_DEVINFO_DATA *,struct _SP_DEVINSTALL_PARAMS_W *)",
    "public: virtual int __thiscall CIlKernel32::GetDiskFreeSpaceW(unsigned short const *,unsigned long *,unsigned long *,unsigned long *,unsigned long *)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiDestroyDriverInfoList(void)",
    "public: class CIlShell32 & __thiscall CIlShell32::operator=(class CIlShell32 const &)",
    "public: virtual int __thiscall CIlAdvapi32::CryptDuplicateHash(unsigned long,unsigned long *,unsigned long,unsigned long *)",
    "public: virtual int __thiscall CIlAdvapi32::GetTokenInformation(void *,enum _TOKEN_INFORMATION_CLASS,void *,unsigned long,unsigned long *)",
    "struct IWimgapiInterface * g_Wimgapi",
    "private: static int __stdcall CIlW2kDynWs2_32::Ilgetnameinfo(struct sockaddr const *,int,char *,unsigned long,char *,unsigned long,int)",
    "private: static unsigned long __stdcall CIlNt4Netapi32::IlNetLocalGroupAdd(unsigned short const *,unsigned long,unsigned char *,unsigned long *)",
    "public: virtual int __thiscall CIlSetupapi::SetupGetLineTextW(struct _INFCONTEXT *,void *,unsigned short const *,unsigned short const *,unsigned short *,unsigned long,unsigned long *)",
    "public: virtual int __thiscall CIlKernel32::GetVersionExA(struct _OSVERSIONINFOA *)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupQueryInfOriginalFileInformationW)(struct _SP_INF_INFORMATION *,unsigned int,struct _SP_ALTPLATFORM_INFO_V2 *,struct _SP_ORIGINAL_FILE_INFO_W *)",
    "public: class CIlDeplorch & __thiscall CIlDeplorch::operator=(class CIlDeplorch const &)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountQueryServiceConfigW",
    "public: virtual int __thiscall CIlVersion::VerQueryValueW(void * const,unsigned short const *,void * *,unsigned int *)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiGetDeviceInterfaceDetailW)(void *,struct _SP_DEVICE_INTERFACE_DATA *,struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W *,unsigned long,unsigned long *,struct _SP_DEVINFO_DATA *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiGetDeviceRegistryPropertyW(void))(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long *,unsigned char *,unsigned long,unsigned long *)",
    "struct IOle32Interface * g_Ole32",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiCreateDeviceInfoListExW(void)",
    "public: __thiscall CIlUser32::CIlUser32(class CIlUser32 const &)",
    "public: void * (__stdcall*__thiscall CIlNt4Advapi32::get_LockServiceDatabase(void))(struct SC_HANDLE__ *)",
    "public: virtual void * __thiscall CIlKernel32::HeapCreate(unsigned long,unsigned long,unsigned long)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_ConvertSecurityDescriptorToStringSecurityDescriptorW)(void *,unsigned long,unsigned long,unsigned short * *,unsigned long *)",
    "public: virtual unsigned int __thiscall CIlKernel32::SetErrorMode(unsigned int)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiBuildDriverInfoList(void *,struct _SP_DEVINFO_DATA *,unsigned long)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiGetDriverInfoDetailW(void *,struct _SP_DEVINFO_DATA *,struct _SP_DRVINFO_DATA_V2_W *,struct _SP_DRVINFO_DETAIL_DATA_W *,unsigned long,unsigned long *)",
    "public: __thiscall CIlUser32::CIlUser32(void)",
    "public: __thiscall CIlMuisetupapi::CIlMuisetupapi(class CIlMuisetupapi const &)",
    "public: virtual int __thiscall CIlAdvapi32::GetSecurityDescriptorGroup(void *,void * *,int *)",
    "public: virtual int __thiscall CIlAdvapi32::InitializeSecurityDescriptor(void *,unsigned long)",
    "private: static int (__stdcall* CIlNt4Userenv::m_CreateUserProfileExW)(void *,unsigned short const *,unsigned short const *,unsigned short *,unsigned long,int)",
    "private: static unsigned long CIlNt4Kernel32::m_RefCountGetSystemWindowsDirectoryW",
    "private: static int (__stdcall* CIlW2kDynWs2_32::m_getaddrinfo)(char const *,char const *,struct addrinfo const *,struct addrinfo * *)",
    "public: virtual void __thiscall CIlOle32::CoUninitialize(void)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiGetDeviceInterfaceDetailW(void)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiEnumDeviceInterfaces)(void *,struct _SP_DEVINFO_DATA *,struct _GUID const *,unsigned long,struct _SP_DEVICE_INTERFACE_DATA *)",
    "public: virtual unsigned long __thiscall CIlKernel32::WaitForMultipleObjects(unsigned long,void * const *,int,unsigned long)",
    "public: virtual void * __thiscall CIlNt4Kernel32::CreateToolhelp32Snapshot(unsigned long,unsigned long)",
    "private: static unsigned long CIlNt4Netapi32::m_RefCountNetUserAdd",
    "const CIlNt4Netapi32::`vftable'",
    "class CIlVersion IlVersion",
    "public: virtual int __thiscall CIlNt4User32::LockSetForegroundWindow(unsigned int)",
    "private: static void * (__stdcall* CIlNt4Advapi32::m_LockServiceDatabase)(struct SC_HANDLE__ *)",
    "public: virtual unsigned short * __thiscall CIlKernel32::GetCommandLineW(void)",
    "public: void * (__stdcall*__thiscall CIlNt4Kernel32::get_CreateToolhelp32Snapshot(void))(unsigned long,unsigned long)",
    "const CIlNt4Advapi32::`vftable'",
    "public: void * (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiCreateDeviceInfoListExW(void))(struct _GUID const *,struct HWND__ *,unsigned short const *,void *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupQueryInfOriginalFileInformationW(void))(struct _SP_INF_INFORMATION *,unsigned int,struct _SP_ALTPLATFORM_INFO_V2 *,struct _SP_ORIGINAL_FILE_INFO_W *)",
    "private: static int __stdcall CIlNt4Advapi32::IlEnumServicesStatusExW(struct SC_HANDLE__ *,enum _SC_ENUM_TYPE,unsigned long,unsigned long,unsigned char *,unsigned long,unsigned long *,unsigned long *,unsigned long *,unsigned short const *)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupQueryInfOriginalFileInformationW(struct _SP_INF_INFORMATION *,unsigned int,struct _SP_ALTPLATFORM_INFO_V2 *,struct _SP_ORIGINAL_FILE_INFO_W *)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountConvertSidToStringSidW",
    "public: virtual int __thiscall CIlKernel32::FindClose(void *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiDestroyDriverInfoList",
    "public: unsigned long (__stdcall*__thiscall CIlNt4Netapi32::get_NetWkstaGetInfo(void))(unsigned short *,unsigned long,unsigned char * *)",
    "private: static int __stdcall CIlNt4Advapi32::IlUnlockServiceDatabase(void *)",
    "public: virtual unsigned long __thiscall CIlVersion::GetFileVersionInfoSizeW(unsigned short const *,unsigned long *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiSetSelectedDriverW(void))(void *,struct _SP_DEVINFO_DATA *,struct _SP_DRVINFO_DATA_V2_W *)",
    "public: virtual int __thiscall CIlAdvapi32::CryptDecrypt(unsigned long,unsigned long,int,unsigned long,unsigned char *,unsigned long *)",
    "public: virtual int __thiscall CIlKernel32::CreateProcessW(unsigned short const *,unsigned short *,struct _SECURITY_ATTRIBUTES *,struct _SECURITY_ATTRIBUTES *,int,unsigned long,void *,unsigned short const *,struct _STARTUPINFOW *,struct _PROCESS_INFORMATION *)",
    "public: virtual unsigned short __thiscall CIlWs2_32::htons(unsigned short)",
    "public: int (__stdcall*__thiscall CIlNt4Kernel32::get_Process32NextW(void))(void *,struct tagPROCESSENTRY32W *)",
    "public: virtual int __thiscall CIlKernel32::TerminateProcess(void *,unsigned int)",
    "public: virtual int __thiscall CIlNt4Advapi32::ConvertStringSecurityDescriptorToSecurityDescriptorW(unsigned short const *,unsigned long,void * *,unsigned long *)",
    "public: virtual int __thiscall CIlWs2_32::ioctlsocket(unsigned int,long,unsigned long *)",
    "public: virtual void * __thiscall CIlKernel32::GlobalFree(void *)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountStartServiceW",
    "public: virtual int __thiscall CIlKernel32::MoveFileExW(unsigned short const *,unsigned short const *,unsigned long)",
    "public: __thiscall CIlVersion::CIlVersion(void)",
    "public: virtual void * __thiscall CIlWimgapi::WIMLoadImage(void *,unsigned long)",
    "public: void __thiscall CIlNt4Netapi32::release_NetLocalGroupEnum(void)",
    "class CIlAdvapi32 IlAdvapi32",
    "public: virtual int __thiscall CIlNt4Advapi32::CreateWellKnownSid(enum WELL_KNOWN_SID_TYPE,void *,void *,unsigned long *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiGetClassDevsExW",
    "public: virtual unsigned long __thiscall CIlKernel32::GetFileAttributesW(unsigned short const *)",
    "public: __thiscall CIlAdvapi32::CIlAdvapi32(class CIlAdvapi32 const &)",
    "public: virtual unsigned int __thiscall CIlShell32::ExtractIconExW(unsigned short const *,int,struct HICON__ * *,struct HICON__ * *,unsigned int)",
    "private: static unsigned long CIlW2kDynWs2_32::m_RefCountfreeaddrinfo",
    "struct IW2kUserenvInterface * g_Nt4Userenv",
    "private: static int __stdcall CIlNt4Kernel32::IlGlobalMemoryStatusEx(struct _MEMORYSTATUSEX *)",
    "public: class CDynLib & __thiscall CDynLib::operator=(class CDynLib const &)",
    "public: virtual int __thiscall CIlAdvapi32::GetUserNameW(unsigned short *,unsigned long *)",
    "public: virtual void * __thiscall CIlKernel32::OpenProcess(unsigned long,int,unsigned long)",
    "public: virtual int __thiscall CIlNt4Kernel32::RegisterWaitForSingleObject(void * *,void *,void (__stdcall*)(void *,unsigned char),void *,unsigned long,unsigned long)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiEnumDriverInfoW(void))(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long,struct _SP_DRVINFO_DATA_V2_W *)",
    "public: virtual long __thiscall CIlAdvapi32::RegFlushKey(struct HKEY__ *)",
    "public: void __thiscall CIlNt4Advapi32::release_CreateServiceW(void)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiDestroyDriverInfoList(void *,struct _SP_DEVINFO_DATA *,unsigned long)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiSetSelectedDriverW",
    "public: virtual int __thiscall CIlAdvapi32::CryptSetKeyParam(unsigned long,unsigned long,unsigned char const *,unsigned long)",
    "public: virtual int __thiscall CIlAdvapi32::CryptHashData(unsigned long,unsigned char const *,unsigned long,unsigned long)",
    "public: virtual int __thiscall CIlUser32::PostMessageW(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: virtual unsigned long __thiscall CIlKernel32::GlobalSize(void *)",
    "public: virtual void __thiscall CIlW2kDynWs2_32::freeaddrinfo(struct addrinfo *)",
    "private: static unsigned long CIlNt4Netapi32::m_RefCountNetLocalGroupAddMembers",
    "private: static unsigned long CIlNt4Netapi32::m_RefCountNetLocalGroupEnum",
    "public: __thiscall CIlNt4Netapi32::CIlNt4Netapi32(class CIlNt4Netapi32 const &)",
    "class CIlOle32 IlOle32",
    "public: virtual int __thiscall CIlNt4Advapi32::InitiateSystemShutdownExW(unsigned short *,unsigned short *,unsigned long,int,int,unsigned long)",
    "public: virtual int __thiscall CIlWs2_32::sendto(unsigned int,char const *,int,int,struct sockaddr const *,int)",
    "public: virtual long __thiscall CIlAdvapi32::RegLoadKeyW(struct HKEY__ *,unsigned short const *,unsigned short const *)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupQueryInfOriginalFileInformationW(void)",
    "public: virtual void * __thiscall CIlOle32::CoTaskMemAlloc(unsigned long)",
    "private: static struct SC_HANDLE__ * (__stdcall* CIlNt4Advapi32::m_CreateServiceW)(struct SC_HANDLE__ *,unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned long,unsigned long,unsigned short const *,unsigned short const *,unsigned long *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "private: static int (__stdcall* CIlNt4Kernel32::m_Process32NextW)(void *,struct tagPROCESSENTRY32W *)",
    "public: virtual int __thiscall CIlShell32::ShellExecuteExW(struct _SHELLEXECUTEINFOW *)",
    "public: __thiscall CIlWimgapi::CIlWimgapi(void)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountConvertSecurityDescriptorToStringSecurityDescriptorW",
    "public: virtual int __thiscall CIlAdvapi32::CryptGetKeyParam(unsigned long,unsigned long,unsigned char *,unsigned long *,unsigned long)",
    "public: void __thiscall CIlNt4Advapi32::release_UnlockServiceDatabase(void)",
    "public: virtual int __thiscall CIlKernel32::ResetEvent(void *)",
    "public: virtual int __thiscall CIlKernel32::HeapDestroy(void *)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiGetDeviceInstallParamsW(void *,struct _SP_DEVINFO_DATA *,struct _SP_DEVINSTALL_PARAMS_W *)",
    "private: static int (__stdcall* CIlNt4Kernel32::m_Process32FirstW)(void *,struct tagPROCESSENTRY32W *)",
    "public: virtual unsigned int __thiscall CIlKernel32::GetTempFileNameW(unsigned short const *,unsigned short const *,unsigned int,unsigned short *)",
    "public: virtual int __thiscall CIlKernel32::SetFileAttributesW(unsigned short const *,unsigned long)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiGetDeviceInterfaceDetailW(void *,struct _SP_DEVICE_INTERFACE_DATA *,struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W *,unsigned long,unsigned long *,struct _SP_DEVINFO_DATA *)",
    "class CIlNt4Kernel32 IlNt4Kernel32",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_ChangeServiceConfigW(void))(struct SC_HANDLE__ *,unsigned long,unsigned long,unsigned long,unsigned short const *,unsigned short const *,unsigned long *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: class CIlNt6Userenv & __thiscall CIlNt6Userenv::operator=(class CIlNt6Userenv const &)",
    "public: virtual long __thiscall CIlAdvapi32::RegCreateKeyExW(struct HKEY__ *,unsigned short const *,unsigned long,unsigned short *,unsigned long,unsigned long,struct _SECURITY_ATTRIBUTES *,struct HKEY__ * *,unsigned long *)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiGetDeviceRegistryPropertyW(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long *,unsigned char *,unsigned long,unsigned long *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiCreateDeviceInfoListExW",
    "public: class CIlOle32 & __thiscall CIlOle32::operator=(class CIlOle32 const &)",
    "public: void __thiscall CIlNt4Kernel32::release_Process32NextW(void)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiEnumDriverInfoW)(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long,struct _SP_DRVINFO_DATA_V2_W *)",
    "public: virtual int __thiscall CIlAdvapi32::CryptDeriveKey(unsigned long,unsigned int,unsigned long,unsigned long,unsigned long *)",
    "public: virtual long __thiscall CIlNt6Userenv::CreateProfile(unsigned short const *,unsigned short const *,unsigned short *,unsigned long)",
    "private: static struct SC_HANDLE__ * __stdcall CIlNt4Advapi32::IlOpenServiceW(struct SC_HANDLE__ *,unsigned short const *,unsigned long)",
    "struct IMuisetupapiInterface * g_Muisetupapi",
    "class CIlKernel32 IlKernel32",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupGetInfInformationW(void const *,unsigned long,struct _SP_INF_INFORMATION *,unsigned long,unsigned long *)",
    "const CIlWimgapi::`vftable'",
    "class CIlDeplorch IlDeplorch",
    "private: static void * __stdcall CIlNt4Kernel32::IlCreateToolhelp32Snapshot(unsigned long,unsigned long)",
    "const CIlOleaut32::`vftable'",
    "public: virtual void __thiscall CIlKernel32::InitializeCriticalSection(struct _RTL_CRITICAL_SECTION *)",
    "public: virtual long __thiscall CIlOle32::GetHGlobalFromStream(struct IStream *,void * *)",
    "public: unsigned long (__stdcall*__thiscall CIlNt4Netapi32::get_NetUserEnum(void))(unsigned short const *,unsigned long,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *,unsigned long *)",
    "public: virtual int __thiscall CIlAdvapi32::OpenProcessToken(void *,unsigned long,void * *)",
    "public: int (__stdcall*__thiscall CIlNt4Kernel32::get_RegisterWaitForSingleObject(void))(void * *,void *,void (__stdcall*)(void *,unsigned char),void *,unsigned long,unsigned long)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountCloseServiceHandle",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_ConvertStringSecurityDescriptorToSecurityDescriptorW(void))(unsigned short const *,unsigned long,void * *,unsigned long *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiGetDriverInfoDetailW(void))(void *,struct _SP_DEVINFO_DATA *,struct _SP_DRVINFO_DATA_V2_W *,struct _SP_DRVINFO_DETAIL_DATA_W *,unsigned long,unsigned long *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupQueryInfOriginalFileInformationW",
    "public: virtual int __thiscall CIlKernel32::SetFileTime(void *,struct _FILETIME const *,struct _FILETIME const *,struct _FILETIME const *)",
    "public: virtual unsigned long __thiscall CIlNt4Netapi32::NetApiBufferFree(void *)",
    "public: virtual unsigned long __thiscall CIlWs2_32::htonl(unsigned long)",
    "private: static int __stdcall CIlNt4Kernel32::IlProcess32FirstW(void *,struct tagPROCESSENTRY32W *)",
    "private: static unsigned int __stdcall CIlNt4Kernel32::IlGetSystemWindowsDirectoryW(unsigned short *,unsigned int)",
    "const CIlNt4Kernel32::`vftable'",
    "public: virtual int __thiscall CIlKernel32::GlobalUnlock(void *)",
    "public: virtual int __thiscall CIlNt4Advapi32::QueryServiceConfigW(struct SC_HANDLE__ *,struct _QUERY_SERVICE_CONFIGW *,unsigned long,unsigned long *)",
    "private: static int (__stdcall* CIlNt4Kernel32::m_GlobalMemoryStatusEx)(struct _MEMORYSTATUSEX *)",
    "public: void __thiscall CIlNt4Advapi32::release_OpenSCManagerW(void)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiCallClassInstaller(void))(unsigned int,void *,struct _SP_DEVINFO_DATA *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiDestroyDriverInfoList(void))(void *,struct _SP_DEVINFO_DATA *,unsigned long)",
    "public: virtual int (__stdcall*__thiscall CIlW2kDynWs2_32::get_getnameinfo(void))(struct sockaddr const *,int,char *,unsigned long,char *,unsigned long,int)",
    "public: virtual unsigned long __thiscall CIlKernel32::GetLogicalDriveStringsW(unsigned long,unsigned short *)",
    "public: virtual void * __thiscall CIlKernel32::GlobalLock(void *)",
    "public: virtual int __thiscall CIlKernel32::SetEvent(void *)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_EncryptFileW)(unsigned short const *)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiDestroyDeviceInfoList(void)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiBuildDriverInfoList(void *,struct _SP_DEVINFO_DATA *,unsigned long)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiEnumDeviceInfo(void *,unsigned long,struct _SP_DEVINFO_DATA *)",
    "public: virtual int __thiscall CIlVersion::GetFileVersionInfoW(unsigned short const *,unsigned long,unsigned long,void *)",
    "public: __thiscall CIlW2kDynWs2_32::CIlW2kDynWs2_32(void)",
    "public: class CIlNt4Advapi32 & __thiscall CIlNt4Advapi32::operator=(class CIlNt4Advapi32 const &)",
    "public: void __thiscall CIlNt4Advapi32::release_LockServiceDatabase(void)",
    "struct IW2kUser32Interface * g_Nt4User32",
    "private: static int (__stdcall* CIlNt4Advapi32::m_ConvertStringSecurityDescriptorToSecurityDescriptorW)(unsigned short const *,unsigned long,void * *,unsigned long *)",
    "public: __thiscall CIlNt4User32::CIlNt4User32(void)",
    "public: virtual unsigned long __thiscall CIlNt4Netapi32::NetUserDel(unsigned short const *,unsigned short const *)",
    "private: static unsigned long CIlNt4User32::m_RefCountLockSetForegroundWindow",
    "public: virtual int __thiscall CIlSetupapi::SetupGetStringFieldW(struct _INFCONTEXT *,unsigned long,unsigned short *,unsigned long,unsigned long *)",
    "public: virtual void * __thiscall CIlNt4Setupapi::SetupOpenFileQueue(void)",
    "public: virtual int __thiscall CIlWimgapi::WIMSetTemporaryPath(void *,unsigned short *)",
    "public: void __thiscall CIlNt4Netapi32::release_NetUserDel(void)",
    "public: __thiscall CIlNt4Kernel32::CIlNt4Kernel32(void)",
    "public: virtual int __thiscall CIlKernel32::GetOverlappedResult(void *,struct _OVERLAPPED *,unsigned long *,int)",
    "private: static unsigned long CIlNt4Kernel32::m_RefCountCreateToolhelp32Snapshot",
    "public: virtual int __thiscall CIlWs2_32::setsockopt(unsigned int,int,int,char const *,int)",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_ConvertSecurityDescriptorToStringSecurityDescriptorW(void))(void *,unsigned long,unsigned long,unsigned short * *,unsigned long *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiSetDeviceInstallParamsW(void))(void *,struct _SP_DEVINFO_DATA *,struct _SP_DEVINSTALL_PARAMS_W *)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupScanFileQueueW)(void *,unsigned long,struct HWND__ *,unsigned int (__stdcall*)(void *,unsigned int,unsigned int,unsigned int),void *,unsigned long *)",
    "public: virtual long __thiscall CIlOleaut32::VariantClear(struct tagVARIANT *)",
    "public: void __thiscall CIlNt4Advapi32::release_StartServiceW(void)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiSetSelectedDriverW(void)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupGetInfInformationW)(void const *,unsigned long,struct _SP_INF_INFORMATION *,unsigned long,unsigned long *)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_QueryServiceConfigW)(struct SC_HANDLE__ *,struct _QUERY_SERVICE_CONFIGW *,unsigned long,unsigned long *)",
    "public: virtual void __thiscall CIlKernel32::Sleep(unsigned long)",
    "private: static int __stdcall CIlW2kDynWs2_32::Ilgetaddrinfo(char const *,char const *,struct addrinfo const *,struct addrinfo * *)",
    "protected: void __thiscall CDynLib::ReleaseProc(int (__stdcall*&)(void),unsigned long &)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiGetDeviceInterfaceDetailW(void))(void *,struct _SP_DEVICE_INTERFACE_DATA *,struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W *,unsigned long,unsigned long *,struct _SP_DEVINFO_DATA *)",
    "private: static void * __stdcall CIlNt4Setupapi::IlSetupDiCreateDeviceInfoListExW(struct _GUID const *,struct HWND__ *,unsigned short const *,void *)",
    "public: virtual long __thiscall CIlOle32::CoInitialize(void *)",
    "public: virtual void __thiscall CIlW2kDynWs2_32::release_getaddrinfo(void)",
    "public: virtual unsigned long __thiscall CIlMuisetupapi::GetUpgradeLanguage(unsigned short *,unsigned int,unsigned int)",
    "private: static unsigned long __stdcall CIlNt4Netapi32::IlNetUserDel(unsigned short const *,unsigned short const *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiEnumDeviceInfo",
    "public: virtual int __thiscall CIlWs2_32::recv(unsigned int,char *,int,int)",
    "struct IDeplorchInterface * g_Deplorch",
    "public: class CIlMuisetupapi & __thiscall CIlMuisetupapi::operator=(class CIlMuisetupapi const &)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiOpenDeviceInfoW(void)",
    "class CIlWs2_32 IlWs2_32",
    "private: static struct HKEY__ * (__stdcall* CIlNt4Setupapi::m_SetupDiOpenDevRegKey)(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long,unsigned long,unsigned long)",
    "public: class CIlWs2_32 & __thiscall CIlWs2_32::operator=(class CIlWs2_32 const &)",
    "private: static unsigned long CIlNt6Userenv::m_RefCountCreateProfile",
    "public: virtual struct HICON__ * __thiscall CIlUser32::LoadIconW(struct HINSTANCE__ *,unsigned short const *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupCloseFileQueue",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiEnumDeviceInfo)(void *,unsigned long,struct _SP_DEVINFO_DATA *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiEnumDeviceInterfaces(void))(void *,struct _SP_DEVINFO_DATA *,struct _GUID const *,unsigned long,struct _SP_DEVICE_INTERFACE_DATA *)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_CreateWellKnownSid)(enum WELL_KNOWN_SID_TYPE,void *,void *,unsigned long *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupGetInfInformationW(void))(void const *,unsigned long,struct _SP_INF_INFORMATION *,unsigned long,unsigned long *)",
    "public: virtual int __thiscall CIlKernel32::RemoveDirectoryW(unsigned short const *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiSetDeviceInstallParamsW",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiSetDeviceInstallParamsW)(void *,struct _SP_DEVINFO_DATA *,struct _SP_DEVINSTALL_PARAMS_W *)",
    "public: class CIlNt4Setupapi & __thiscall CIlNt4Setupapi::operator=(class CIlNt4Setupapi const &)",
    "class CIlNt4Userenv IlNt4Userenv",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiGetDeviceInstallParamsW(void)",
    "public: virtual void * __thiscall CIlKernel32::GetProcessHeap(void)",
    "public: virtual long __thiscall CIlAdvapi32::RegOpenKeyExW(struct HKEY__ *,unsigned short const *,unsigned long,unsigned long,struct HKEY__ * *)",
    "public: virtual int __thiscall CIlKernel32::GetExitCodeProcess(void *,unsigned long *)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountUnlockServiceDatabase",
    "public: virtual void __thiscall CIlKernel32::GetSystemInfo(struct _SYSTEM_INFO *)",
    "public: virtual void * __thiscall CIlWimgapi::WIMCreateFile(unsigned short *,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long *)",
    "public: virtual int __thiscall CIlAdvapi32::CryptReleaseContext(unsigned long,unsigned long)",
    "public: virtual void __thiscall CIlKernel32::RaiseException(unsigned long,unsigned long,unsigned long,unsigned long const *)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiSetDeviceInstallParamsW(void *,struct _SP_DEVINFO_DATA *,struct _SP_DEVINSTALL_PARAMS_W *)",
    "struct IW2kKernel32Interface * g_Nt4Kernel32",
    "private: static unsigned long CIlW2kDynWs2_32::m_RefCountgetaddrinfo",
    "public: __thiscall CIlNt4Netapi32::CIlNt4Netapi32(void)",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_ConvertStringSidToSidW(void))(unsigned short *,void * *)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountInitiateSystemShutdownExW",
    "public: virtual int __thiscall CIlNt4Userenv::CreateUserProfileExW(void *,unsigned short const *,unsigned short const *,unsigned short *,unsigned long,int)",
    "struct IAdvapi32Interface * g_Advapi32",
    "public: void __thiscall CIlNt4Netapi32::release_NetUserEnum(void)",
    "private: static unsigned long (__stdcall* CIlNt4Netapi32::m_NetUserDel)(unsigned short const *,unsigned short const *)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiDestroyDriverInfoList)(void *,struct _SP_DEVINFO_DATA *,unsigned long)",
    "public: virtual int __thiscall CIlDeplorch::SysprepIsStagedOS(void)",
    "public: long (__stdcall*__thiscall CIlNt6Userenv::get_CreateProfile(void))(unsigned short const *,unsigned short const *,unsigned short *,unsigned long)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiBuildDriverInfoList)(void *,struct _SP_DEVINFO_DATA *,unsigned long)",
    "public: virtual int __thiscall CIlWs2_32::recvfrom(unsigned int,char *,int,int,struct sockaddr *,int *)",
    "public: virtual void * __thiscall CIlSetupapi::SetupOpenInfFileW(unsigned short const *,unsigned short const *,unsigned long,unsigned int *)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiGetDeviceRegistryPropertyW(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long *,unsigned char *,unsigned long,unsigned long *)",
    "private: static unsigned long CIlNt4Netapi32::m_RefCountNetUserEnum",
    "public: virtual long __thiscall CIlAdvapi32::RegUnLoadKeyW(struct HKEY__ *,unsigned short const *)",
    "private: static int (__stdcall* CIlNt4User32::m_LockSetForegroundWindow)(unsigned int)",
    "public: void __thiscall CIlNt4Advapi32::release_EnumServicesStatusExW(void)",
    "public: virtual int __thiscall CIlAdvapi32::IsValidSid(void *)",
    "public: virtual unsigned long __thiscall CIlAdvapi32::SetSecurityInfo(void *,enum _SE_OBJECT_TYPE,unsigned long,void *,void *,struct _ACL *,struct _ACL *)",
    "public: virtual long __thiscall CIlOle32::CreateStreamOnHGlobal(void *,int,struct IStream * *)",
    "const CIlOle32::`vftable'",
    "public: virtual int __thiscall CIlAdvapi32::AdjustTokenPrivileges(void *,int,struct _TOKEN_PRIVILEGES *,unsigned long,struct _TOKEN_PRIVILEGES *,unsigned long *)",
    "public: virtual int __thiscall CIlAdvapi32::SetSecurityDescriptorOwner(void *,void *,int)",
    "public: int (__stdcall*__thiscall CIlNt4Userenv::get_CreateUserProfileExW(void))(void *,unsigned short const *,unsigned short const *,unsigned short *,unsigned long,int)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupCloseFileQueue(void *)",
    "public: virtual int __thiscall CIlAdvapi32::CryptGenRandom(unsigned long,unsigned long,unsigned char *)",
    "public: virtual void __thiscall CIlKernel32::GlobalMemoryStatus(struct _MEMORYSTATUS *)",
    "private: static long (__stdcall* CIlNt6Userenv::m_CreateProfile)(unsigned short const *,unsigned short const *,unsigned short *,unsigned long)",
    "private: static int __stdcall CIlNt4Advapi32::IlConvertStringSecurityDescriptorToSecurityDescriptorW(unsigned short const *,unsigned long,void * *,unsigned long *)",
    "public: unsigned long (__stdcall*__thiscall CIlNt4Netapi32::get_NetUserDel(void))(unsigned short const *,unsigned short const *)",
    "public: void __thiscall CIlNt6Userenv::release_CreateProfile(void)",
    "public: __thiscall CIlW2kDynWs2_32::CIlW2kDynWs2_32(class CIlW2kDynWs2_32 const &)",
    "public: virtual struct HKEY__ * __thiscall CIlNt4Setupapi::SetupDiOpenDevRegKey(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long,unsigned long,unsigned long)",
    "class CIlIphlpapi IlIphlpapi",
    "public: __thiscall CIlOleaut32::CIlOleaut32(class CIlOleaut32 const &)",
    "public: virtual int __thiscall CIlKernel32::FreeLibrary(struct HINSTANCE__ *)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiSetDeviceInstallParamsW(void)",
    "class CIlNt4User32 IlNt4User32",
    "public: virtual long __thiscall CIlAdvapi32::RegQueryInfoKeyW(struct HKEY__ *,unsigned short *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,unsigned long *,struct _FILETIME *)",
    "public: void __thiscall CIlNt4Advapi32::release_EncryptFileW(void)",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_StartServiceW(void))(struct SC_HANDLE__ *,unsigned long,unsigned short const * *)",
    "public: void __thiscall CIlNt4User32::release_LockSetForegroundWindow(void)",
    "struct IVersionInterface * g_Version",
    "public: unsigned long (__stdcall*__thiscall CIlNt4Netapi32::get_NetLocalGroupEnum(void))(unsigned short const *,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *,unsigned long *)",
    "public: virtual unsigned long __thiscall CIlAdvapi32::GetSecurityInfo(void *,enum _SE_OBJECT_TYPE,unsigned long,void * *,void * *,struct _ACL * *,struct _ACL * *,void * *)",
    "class CIlMuisetupapi IlMuisetupapi",
    "public: virtual int __thiscall CIlAdvapi32::CryptDestroyHash(unsigned long)",
    "public: __thiscall CIlNt4Setupapi::CIlNt4Setupapi(void)",
    "private: static void __stdcall CIlW2kDynWs2_32::Ilfreeaddrinfo(struct addrinfo *)",
    "public: virtual int __thiscall CIlWs2_32::closesocket(unsigned int)",
    "public: virtual void * __thiscall CIlNt4Advapi32::LockServiceDatabase(struct SC_HANDLE__ *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiEnumDriverInfoW",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiGetClassDevsW",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiEnumDeviceInfo(void)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiGetDeviceInterfaceDetailW",
    "public: virtual int __thiscall CIlWs2_32::WSACleanup(void)",
    "public: virtual int __thiscall CIlAdvapi32::GetSecurityDescriptorSacl(void *,int *,struct _ACL * *,int *)",
    "private: static unsigned long CIlNt4Kernel32::m_RefCountProcess32NextW",
    "protected: __thiscall CDynLib::CDynLib(void)",
    "public: virtual unsigned long __thiscall CIlKernel32::GetLastError(void)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiOpenDeviceInfoW",
    "private: static unsigned long CIlNt4Kernel32::m_RefCountProcess32FirstW",
    "public: virtual int __thiscall CIlAdvapi32::CryptDuplicateKey(unsigned long,unsigned long *,unsigned long,unsigned long *)",
    "public: void __thiscall CIlNt4Advapi32::release_ConvertSecurityDescriptorToStringSecurityDescriptorW(void)",
    "public: void __thiscall CIlNt4Advapi32::release_InitiateSystemShutdownExW(void)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiEnumDriverInfoW(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long,struct _SP_DRVINFO_DATA_V2_W *)",
    "const CIlUser32::`vftable'",
    "public: virtual int __thiscall CIlAdvapi32::CryptCreateHash(unsigned long,unsigned int,unsigned long,unsigned long,unsigned long *)",
    "public: virtual unsigned long __thiscall CIlNt4Netapi32::NetUserAdd(unsigned short const *,unsigned long,unsigned char *,unsigned long *)",
    "public: virtual struct HINSTANCE__ * __thiscall CIlKernel32::LoadLibraryW(unsigned short const *)",
    "private: static unsigned long __stdcall CIlNt4Netapi32::IlNetLocalGroupAddMembers(unsigned short const *,unsigned short const *,unsigned long,unsigned char *,unsigned long)",
    "public: virtual int __thiscall CIlNt4Advapi32::ConvertSecurityDescriptorToStringSecurityDescriptorW(void *,unsigned long,unsigned long,unsigned short * *,unsigned long *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiCallClassInstaller",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiSetSelectedDriverW(void *,struct _SP_DEVINFO_DATA *,struct _SP_DRVINFO_DATA_V2_W *)",
    "struct ISetupapiInterface * g_Setupapi",
    "private: static unsigned long (__stdcall* CIlNt4Netapi32::m_NetLocalGroupAdd)(unsigned short const *,unsigned long,unsigned char *,unsigned long *)",
    "private: static unsigned int (__stdcall* CIlNt4Kernel32::m_GetSystemWindowsDirectoryW)(unsigned short *,unsigned int)",
    "struct IOleaut32Interface * g_Oleaut32",
    "public: virtual int __thiscall CIlKernel32::GetVolumeInformationW(unsigned short const *,unsigned short *,unsigned long,unsigned long *,unsigned long *,unsigned long *,unsigned short *,unsigned long)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountCreateWellKnownSid",
    "public: virtual int __thiscall CIlNt4Advapi32::CloseServiceHandle(struct SC_HANDLE__ *)",
    "public: void __thiscall CIlNt4Kernel32::release_Process32FirstW(void)",
    "public: virtual void * __thiscall CIlNt4Setupapi::SetupDiGetClassDevsExW(struct _GUID const *,unsigned short const *,struct HWND__ *,unsigned long,void *,unsigned short const *,void *)",
    "class CIlNt4Netapi32 IlNt4Netapi32",
    "const CIlDeplorch::`vftable'",
    "private: static void * __stdcall CIlNt4Setupapi::IlSetupDiGetClassDevsW(struct _GUID const *,unsigned short const *,struct HWND__ *,unsigned long)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiGetDeviceInstallParamsW",
    "public: virtual int __thiscall CIlSetupapi::SetupFindFirstLineW(void *,unsigned short const *,unsigned short const *,struct _INFCONTEXT *)",
    "const CIlNt6Userenv::`vftable'",
    "private: static unsigned long CIlNt4Netapi32::m_RefCountNetWkstaGetInfo",
    "public: virtual unsigned long __thiscall CIlKernel32::GetFullPathNameW(unsigned short const *,unsigned long,unsigned short *,unsigned short * *)",
    "private: static int __stdcall CIlNt4Advapi32::IlConvertSidToStringSidW(void *,unsigned short * *)",
    "public: virtual unsigned long __thiscall CIlKernel32::WaitForSingleObject(void *,unsigned long)",
    "public: virtual int __thiscall CIlKernel32::GetVersionExW(struct _OSVERSIONINFOW *)",
    "public: unsigned long (__stdcall*__thiscall CIlNt4Netapi32::get_NetUserAdd(void))(unsigned short const *,unsigned long,unsigned char *,unsigned long *)",
    "public: __thiscall CIlNt4Userenv::CIlNt4Userenv(class CIlNt4Userenv const &)",
    "public: virtual unsigned long __thiscall CIlAdvapi32::SetNamedSecurityInfoW(unsigned short *,enum _SE_OBJECT_TYPE,unsigned long,void *,void *,struct _ACL *,struct _ACL *)",
    "public: virtual unsigned long __thiscall CIlNt4Netapi32::NetUserGetLocalGroups(unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *)",
    "public: __thiscall CIlNt4Userenv::CIlNt4Userenv(void)",
    "public: virtual unsigned int __thiscall CIlWs2_32::socket(int,int,int)",
    "public: virtual long __thiscall CIlAdvapi32::RegEnumValueW(struct HKEY__ *,unsigned long,unsigned short *,unsigned long *,unsigned long *,unsigned long *,unsigned char *,unsigned long *)",
    "public: virtual int __thiscall CIlWimgapi::WIMApplyImage(void *,unsigned short *,unsigned long)",
    "public: void __thiscall CIlNt4Kernel32::release_GetSystemWindowsDirectoryW(void)",
    "public: virtual int __thiscall CIlAdvapi32::AllocateAndInitializeSid(struct _SID_IDENTIFIER_AUTHORITY *,unsigned char,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,void * *)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupScanFileQueueW(void)",
    "public: __thiscall CIlAdvapi32::CIlAdvapi32(void)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiSetSelectedDriverW)(void *,struct _SP_DEVINFO_DATA *,struct _SP_DRVINFO_DATA_V2_W *)",
    "const CIlMuisetupapi::`vftable'",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_QueryServiceConfigW(void))(struct SC_HANDLE__ *,struct _QUERY_SERVICE_CONFIGW *,unsigned long,unsigned long *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiGetDeviceInstallParamsW(void))(void *,struct _SP_DEVINFO_DATA *,struct _SP_DEVINSTALL_PARAMS_W *)",
    "private: static long __stdcall CIlNt6Userenv::IlCreateProfile(unsigned short const *,unsigned short const *,unsigned short *,unsigned long)",
    "private: static int __stdcall CIlNt4Kernel32::IlRegisterWaitForSingleObject(void * *,void *,void (__stdcall*)(void *,unsigned char),void *,unsigned long,unsigned long)",
    "public: virtual int __thiscall CIlWimgapi::WIMCloseHandle(void *)",
    "public: virtual void * __thiscall CIlKernel32::CreateFileMappingW(void *,struct _SECURITY_ATTRIBUTES *,unsigned long,unsigned long,unsigned long,unsigned short const *)",
    "public: void __thiscall CIlNt4Advapi32::release_CloseServiceHandle(void)",
    "private: static unsigned long (__stdcall* CIlNt4Netapi32::m_NetUserAdd)(unsigned short const *,unsigned long,unsigned char *,unsigned long *)",
    "private: static unsigned long __stdcall CIlNt4Netapi32::IlNetWkstaGetInfo(unsigned short *,unsigned long,unsigned char * *)",
    "struct IWs2_32Interface * g_Ws2_32",
    "public: void __thiscall CIlNt4Advapi32::release_ConvertStringSidToSidW(void)",
    "public: virtual int __thiscall CIlAdvapi32::CryptEncrypt(unsigned long,unsigned long,int,unsigned long,unsigned char *,unsigned long *,unsigned long)",
    "public: virtual unsigned long __thiscall CIlKernel32::ExpandEnvironmentStringsW(unsigned short const *,unsigned short *,unsigned long)",
    "struct IW2kAdvapi32Interface * g_Nt4Advapi32",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountCreateServiceW",
    "private: static unsigned long CIlNt4Kernel32::m_RefCountRegisterWaitForSingleObject",
    "public: virtual unsigned long __thiscall CIlKernel32::GetFileType(void *)",
    "class CIlSetupapi IlSetupapi",
    "const CIlKernel32::`vftable'",
    "struct IUser32Interface * g_User32",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiBuildDriverInfoList",
    "private: static void * (__stdcall* CIlNt4Setupapi::m_SetupDiCreateDeviceInfoListExW)(struct _GUID const *,struct HWND__ *,unsigned short const *,void *)",
    "public: virtual unsigned int __thiscall CIlKernel32::GetDriveTypeW(unsigned short const *)",
    "class CIlOleaut32 IlOleaut32",
    "public: virtual struct hostent * __thiscall CIlWs2_32::gethostbyname(char const *)",
    "public: virtual unsigned long __thiscall CIlNt4Netapi32::NetLocalGroupAdd(unsigned short const *,unsigned long,unsigned char *,unsigned long *)",
    "public: virtual void * __thiscall CIlKernel32::GlobalAlloc(unsigned int,unsigned long)",
    "const CIlSetupapi::`vftable'",
    "public: virtual void * __thiscall CIlKernel32::MapViewOfFile(void *,unsigned long,unsigned long,unsigned long,unsigned long)",
    "public: __thiscall CIlWimgapi::CIlWimgapi(class CIlWimgapi const &)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiCallClassInstaller(unsigned int,void *,struct _SP_DEVINFO_DATA *)",
    "public: virtual int __thiscall CIlAdvapi32::CryptGetHashParam(unsigned long,unsigned long,unsigned char *,unsigned long *,unsigned long)",
    "public: virtual void * __thiscall CIlKernel32::OpenEventW(unsigned long,int,unsigned short const *)",
    "private: static unsigned long CIlNt4Netapi32::m_RefCountNetUserGetLocalGroups",
    "public: virtual int __thiscall CIlNt4Advapi32::ConvertSidToStringSidW(void *,unsigned short * *)",
    "public: void __thiscall CIlNt4Advapi32::release_CreateWellKnownSid(void)",
    "private: static int __stdcall CIlNt4Advapi32::IlCloseServiceHandle(struct SC_HANDLE__ *)",
    "public: void * (__stdcall*__thiscall CIlNt4Setupapi::get_SetupOpenFileQueue(void))(void)",
    "public: void * (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiGetClassDevsExW(void))(struct _GUID const *,unsigned short const *,struct HWND__ *,unsigned long,void *,unsigned short const *,void *)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiOpenDeviceInfoW(void *,unsigned short const *,struct HWND__ *,unsigned long,struct _SP_DEVINFO_DATA *)",
    "private: static int (__stdcall* CIlW2kDynWs2_32::m_getnameinfo)(struct sockaddr const *,int,char *,unsigned long,char *,unsigned long,int)",
    "public: virtual int __thiscall CIlKernel32::GetComputerNameW(unsigned short *,unsigned long *)",
    "public: virtual int __thiscall CIlKernel32::CreateProcessA(char const *,char *,struct _SECURITY_ATTRIBUTES *,struct _SECURITY_ATTRIBUTES *,int,unsigned long,void *,char const *,struct _STARTUPINFOA *,struct _PROCESS_INFORMATION *)",
    "public: __thiscall CIlNt4Kernel32::CIlNt4Kernel32(class CIlNt4Kernel32 const &)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiCallClassInstaller(unsigned int,void *,struct _SP_DEVINFO_DATA *)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiGetClassDevsW(void)",
    "public: unsigned long (__stdcall*__thiscall CIlNt4Netapi32::get_NetLocalGroupAdd(void))(unsigned short const *,unsigned long,unsigned char *,unsigned long *)",
    "public: virtual int __thiscall CIlAdvapi32::GetSecurityDescriptorOwner(void *,void * *,int *)",
    "private: static int __stdcall CIlNt4Advapi32::IlEncryptFileW(unsigned short const *)",
    "public: virtual unsigned long __thiscall CIlKernel32::GetFileSize(void *,unsigned long *)",
    "private: static unsigned long (__stdcall* CIlNt4Netapi32::m_NetUserEnum)(unsigned short const *,unsigned long,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *,unsigned long *)",
    "public: virtual void * __thiscall CIlKernel32::CreateEventW(struct _SECURITY_ATTRIBUTES *,int,int,unsigned short const *)",
    "public: __thiscall CIlNt4Advapi32::CIlNt4Advapi32(class CIlNt4Advapi32 const &)",
    "public: virtual void * __thiscall CIlKernel32::HeapAlloc(void *,unsigned long,unsigned long)",
    "public: virtual int __thiscall CIlKernel32::FindNextFileW(void *,struct _WIN32_FIND_DATAW *)",
    "public: struct SC_HANDLE__ * (__stdcall*__thiscall CIlNt4Advapi32::get_CreateServiceW(void))(struct SC_HANDLE__ *,unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned long,unsigned long,unsigned short const *,unsigned short const *,unsigned long *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: virtual int __thiscall CIlNt4Advapi32::StartServiceW(struct SC_HANDLE__ *,unsigned long,unsigned short const * *)",
    "public: virtual unsigned long __thiscall CIlKernel32::GetCurrentThreadId(void)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupQueryInfOriginalFileInformationW(struct _SP_INF_INFORMATION *,unsigned int,struct _SP_ALTPLATFORM_INFO_V2 *,struct _SP_ORIGINAL_FILE_INFO_W *)",
    "public: virtual unsigned long __thiscall CIlMuisetupapi::GetUpgradeLanguageEx(unsigned short *,unsigned int,unsigned int,unsigned short const *)",
    "class CIlNt6Userenv IlNt6Userenv",
    "public: unsigned long (__stdcall*__thiscall CIlNt4Netapi32::get_NetUserGetLocalGroups(void))(unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *)",
    "class CIlShell32 IlShell32",
    "public: virtual int __thiscall CIlWs2_32::bind(unsigned int,struct sockaddr const *,int)",
    "private: static void * __stdcall CIlNt4Setupapi::IlSetupOpenFileQueue(void)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupCloseFileQueue(void))(void *)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupCloseFileQueue(void)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiOpenDevRegKey(void)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiCallClassInstaller)(unsigned int,void *,struct _SP_DEVINFO_DATA *)",
    "public: void __thiscall CIlNt4Netapi32::release_NetUserAdd(void)",
    "struct IW2kSetupapiInterface * g_Nt4Setupapi",
    "public: virtual int (__stdcall*__thiscall CIlKernel32::GetProcAddress(struct HINSTANCE__ *,char const *))(void)",
    "public: void * (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiGetClassDevsW(void))(struct _GUID const *,unsigned short const *,struct HWND__ *,unsigned long)",
    "private: static unsigned long (__stdcall* CIlNt4Netapi32::m_NetApiBufferFree)(void *)",
    "public: class CIlSetupapi & __thiscall CIlSetupapi::operator=(class CIlSetupapi const &)",
    "public: class CIlKernel32 & __thiscall CIlKernel32::operator=(class CIlKernel32 const &)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiGetDriverInfoDetailW",
    "public: void __thiscall CIlNt4Userenv::release_CreateUserProfileExW(void)",
    "class CIlNt4Setupapi IlNt4Setupapi",
    "public: void __thiscall CIlNt4Setupapi::release_SetupGetInfInformationW(void)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiCallClassInstaller(void)",
    "public: virtual int __thiscall CIlWs2_32::__WSAFDIsSet(unsigned int,struct fd_set *)",
    "public: virtual struct SC_HANDLE__ * __thiscall CIlNt4Advapi32::OpenSCManagerW(unsigned short const *,unsigned short const *,unsigned long)",
    "public: virtual void * __thiscall CIlKernel32::FindFirstFileW(unsigned short const *,struct _WIN32_FIND_DATAW *)",
    "public: void __thiscall CIlNt4Kernel32::release_RegisterWaitForSingleObject(void)",
    "struct IIphlpapiInterface * g_Iphlpapi",
    "public: virtual unsigned long __thiscall CIlKernel32::GetTempPathW(unsigned long,unsigned short *)",
    "public: virtual unsigned int __thiscall CIlNt4Kernel32::GetSystemWindowsDirectoryW(unsigned short *,unsigned int)",
    "private: static unsigned long CIlW2kDynWs2_32::m_RefCountgetnameinfo",
    "public: class CIlVersion & __thiscall CIlVersion::operator=(class CIlVersion const &)",
    "const CIlVersion::`vftable'",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupCloseFileQueue(void *)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupGetInfInformationW(void const *,unsigned long,struct _SP_INF_INFORMATION *,unsigned long,unsigned long *)",
    "private: static int __stdcall CIlNt4Advapi32::IlChangeServiceConfigW(struct SC_HANDLE__ *,unsigned long,unsigned long,unsigned long,unsigned short const *,unsigned short const *,unsigned long *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "private: static unsigned long (__stdcall* CIlNt4Netapi32::m_NetUserGetLocalGroups)(unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiEnumDeviceInterfaces(void *,struct _SP_DEVINFO_DATA *,struct _GUID const *,unsigned long,struct _SP_DEVICE_INTERFACE_DATA *)",
    "public: __thiscall CIlWs2_32::CIlWs2_32(void)",
    "public: virtual int __thiscall CIlKernel32::VirtualFree(void *,unsigned long,unsigned long)",
    "public: __thiscall CIlSetupapi::CIlSetupapi(class CIlSetupapi const &)",
    "public: void __thiscall CIlNt4Advapi32::release_ConvertSidToStringSidW(void)",
    "public: virtual int __thiscall CIlWs2_32::WSAIoctl(unsigned int,unsigned long,void *,unsigned long,void *,unsigned long,unsigned long *,struct _OVERLAPPED *,void (__stdcall*)(unsigned long,unsigned long,struct _OVERLAPPED *,unsigned long))",
    "public: virtual unsigned long __thiscall CIlNt4Netapi32::NetLocalGroupAddMembers(unsigned short const *,unsigned short const *,unsigned long,unsigned char *,unsigned long)",
    "public: __thiscall CIlOle32::CIlOle32(class CIlOle32 const &)",
    "public: class CIlNt4Netapi32 & __thiscall CIlNt4Netapi32::operator=(class CIlNt4Netapi32 const &)",
    "private: static int __stdcall CIlNt4Advapi32::IlConvertStringSidToSidW(unsigned short *,void * *)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiEnumDriverInfoW(void)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountOpenSCManagerW",
    "public: void __thiscall CIlNt4Netapi32::release_NetWkstaGetInfo(void)",
    "const CIlNt4Userenv::`vftable'",
    "public: virtual void __thiscall CIlW2kDynWs2_32::release_freeaddrinfo(void)",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_InitiateSystemShutdownExW(void))(unsigned short *,unsigned short *,unsigned long,int,int,unsigned long)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountEncryptFileW",
    "public: virtual unsigned int __thiscall CIlKernel32::GetWindowsDirectoryW(unsigned short *,unsigned int)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiOpenDevRegKey",
    "public: class CIlW2kDynWs2_32 & __thiscall CIlW2kDynWs2_32::operator=(class CIlW2kDynWs2_32 const &)",
    "struct IKernel32Interface * g_Kernel32",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_EnumServicesStatusExW(void))(struct SC_HANDLE__ *,enum _SC_ENUM_TYPE,unsigned long,unsigned long,unsigned char *,unsigned long,unsigned long *,unsigned long *,unsigned long *,unsigned short const *)",
    "public: virtual unsigned long __thiscall CIlNt4Netapi32::NetUserEnum(unsigned short const *,unsigned long,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *,unsigned long *)",
    "const CIlNt4Setupapi::`vftable'",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiSetSelectedDriverW(void *,struct _SP_DEVINFO_DATA *,struct _SP_DRVINFO_DATA_V2_W *)",
    "public: virtual int __thiscall CIlKernel32::MoveFileW(unsigned short const *,unsigned short const *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiEnumDeviceInfo(void))(void *,unsigned long,struct _SP_DEVINFO_DATA *)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_CloseServiceHandle)(struct SC_HANDLE__ *)",
    "private: static int __stdcall CIlNt4User32::IlLockSetForegroundWindow(unsigned int)",
    "public: virtual int __thiscall CIlNt4Advapi32::UnlockServiceDatabase(void *)",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_EncryptFileW(void))(unsigned short const *)",
    "public: virtual int __thiscall CIlKernel32::SetEndOfFile(void *)",
    "public: virtual int __thiscall CIlKernel32::CloseHandle(void *)",
    "public: virtual int __thiscall CIlKernel32::CreateDirectoryW(unsigned short const *,struct _SECURITY_ATTRIBUTES *)",
    "public: virtual void __thiscall CIlW2kDynWs2_32::release_getnameinfo(void)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_ConvertStringSidToSidW)(unsigned short *,void * *)",
    "public: virtual long __thiscall CIlAdvapi32::RegEnumKeyExW(struct HKEY__ *,unsigned long,unsigned short *,unsigned long *,unsigned long *,unsigned short *,unsigned long *,struct _FILETIME *)",
    "public: virtual struct SC_HANDLE__ * __thiscall CIlNt4Advapi32::OpenServiceW(struct SC_HANDLE__ *,unsigned short const *,unsigned long)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiGetDeviceRegistryPropertyW(void)",
    "public: __thiscall CIlDeplorch::CIlDeplorch(class CIlDeplorch const &)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiGetDeviceInterfaceDetailW(void *,struct _SP_DEVICE_INTERFACE_DATA *,struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W *,unsigned long,unsigned long *,struct _SP_DEVINFO_DATA *)",
    "public: virtual unsigned long __thiscall CIlNt4Netapi32::NetWkstaGetInfo(unsigned short *,unsigned long,unsigned char * *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiGetDeviceRegistryPropertyW",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupDiEnumDeviceInterfaces",
    "public: virtual int __thiscall CIlW2kDynWs2_32::getaddrinfo(char const *,char const *,struct addrinfo const *,struct addrinfo * *)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiGetDeviceInstallParamsW)(void *,struct _SP_DEVINFO_DATA *,struct _SP_DEVINSTALL_PARAMS_W *)",
    "public: unsigned long (__stdcall*__thiscall CIlNt4Netapi32::get_NetApiBufferFree(void))(void *)",
    "public: void __thiscall CIlNt4Advapi32::release_ChangeServiceConfigW(void)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_EnumServicesStatusExW)(struct SC_HANDLE__ *,enum _SC_ENUM_TYPE,unsigned long,unsigned long,unsigned char *,unsigned long,unsigned long *,unsigned long *,unsigned long *,unsigned short const *)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupScanFileQueueW(void *,unsigned long,struct HWND__ *,unsigned int (__stdcall*)(void *,unsigned int,unsigned int,unsigned int),void *,unsigned long *)",
    "private: static void * __stdcall CIlNt4Advapi32::IlLockServiceDatabase(struct SC_HANDLE__ *)",
    "public: __thiscall CIlIphlpapi::CIlIphlpapi(void)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupOpenFileQueue",
    "public: virtual int __thiscall CIlNt4Kernel32::Process32FirstW(void *,struct tagPROCESSENTRY32W *)",
    "public: virtual void __thiscall CIlKernel32::SetLastError(unsigned long)",
    "public: void __thiscall CIlNt4Kernel32::release_GlobalMemoryStatusEx(void)",
    "class CIlW2kDynWs2_32 IlW2kDynWs2_32",
    "struct INt6UserenvInterface * g_Nt6Userenv",
    "const CIlW2kDynWs2_32::`vftable'",
    "public: virtual int __thiscall CIlWs2_32::connect(unsigned int,struct sockaddr const *,int)",
    "public: class CIlWimgapi & __thiscall CIlWimgapi::operator=(class CIlWimgapi const &)",
    "public: virtual void * __thiscall CIlKernel32::CreateThread(struct _SECURITY_ATTRIBUTES *,unsigned long,unsigned long (__stdcall*)(void *),void *,unsigned long,unsigned long *)",
    "public: virtual int __thiscall CIlAdvapi32::EqualSid(void *,void *)",
    "private: static unsigned long __stdcall CIlNt4Netapi32::IlNetLocalGroupEnum(unsigned short const *,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *,unsigned long *)",
    "public: virtual int __thiscall CIlAdvapi32::LookupPrivilegeValueW(unsigned short const *,unsigned short const *,struct _LUID *)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountConvertStringSecurityDescriptorToSecurityDescriptorW",
    "public: virtual void __thiscall CIlKernel32::ExitProcess(unsigned int)",
    "public: virtual int __thiscall CIlWimgapi::WIMUnregisterMessageCallback(void *,int (__stdcall*)(void))",
    "public: virtual int __thiscall CIlW2kDynWs2_32::getnameinfo(struct sockaddr const *,int,char *,unsigned long,char *,unsigned long,int)",
    "public: __thiscall CIlDeplorch::CIlDeplorch(void)",
    "private: static int __stdcall CIlNt4Advapi32::IlStartServiceW(struct SC_HANDLE__ *,unsigned long,unsigned short const * *)",
    "private: static unsigned long (__stdcall* CIlNt4Netapi32::m_NetWkstaGetInfo)(unsigned short *,unsigned long,unsigned char * *)",
    "private: static void (__stdcall* CIlW2kDynWs2_32::m_freeaddrinfo)(struct addrinfo *)",
    "public: virtual int __thiscall CIlKernel32::ReadFile(void *,void *,unsigned long,unsigned long *,struct _OVERLAPPED *)",
    "public: virtual int __thiscall CIlNt4Advapi32::EnumServicesStatusExW(struct SC_HANDLE__ *,enum _SC_ENUM_TYPE,unsigned long,unsigned long,unsigned char *,unsigned long,unsigned long *,unsigned long *,unsigned long *,unsigned short const *)",
    "private: static int __stdcall CIlNt4Advapi32::IlQueryServiceConfigW(struct SC_HANDLE__ *,struct _QUERY_SERVICE_CONFIGW *,unsigned long,unsigned long *)",
    "private: static void * (__stdcall* CIlNt4Setupapi::m_SetupDiGetClassDevsW)(struct _GUID const *,unsigned short const *,struct HWND__ *,unsigned long)",
    "public: class CIlNt4Kernel32 & __thiscall CIlNt4Kernel32::operator=(class CIlNt4Kernel32 const &)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiOpenDeviceInfoW(void))(void *,unsigned short const *,struct HWND__ *,unsigned long,struct _SP_DEVINFO_DATA *)",
    "public: unsigned long (__stdcall*__thiscall CIlNt4Netapi32::get_NetLocalGroupAddMembers(void))(unsigned short const *,unsigned short const *,unsigned long,unsigned char *,unsigned long)",
    "public: virtual int __thiscall CIlUser32::MessageBoxA(struct HWND__ *,char const *,char const *,unsigned int)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiOpenDeviceInfoW)(void *,unsigned short const *,struct HWND__ *,unsigned long,struct _SP_DEVINFO_DATA *)",
    "protected: int (__stdcall*__thiscall CDynLib::GetIlProc(unsigned short const *,char const *,int (__stdcall*)(void),int (__stdcall*&)(void),unsigned long &))(void)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiEnumDriverInfoW(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long,struct _SP_DRVINFO_DATA_V2_W *)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiBuildDriverInfoList(void)",
    "public: virtual int __thiscall CIlNt4Advapi32::ConvertStringSidToSidW(unsigned short *,void * *)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountConvertStringSidToSidW",
    "public: virtual int __thiscall CIlUser32::MessageBoxW(struct HWND__ *,unsigned short const *,unsigned short const *,unsigned int)",
    "public: virtual char * __thiscall CIlWs2_32::inet_ntoa(struct in_addr)",
    "public: virtual void * __thiscall CIlNt4Setupapi::SetupDiGetClassDevsW(struct _GUID const *,unsigned short const *,struct HWND__ *,unsigned long)",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_CreateWellKnownSid(void))(enum WELL_KNOWN_SID_TYPE,void *,void *,unsigned long *)",
    "public: virtual int __thiscall CIlNt4Kernel32::GlobalMemoryStatusEx(struct _MEMORYSTATUSEX *)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupScanFileQueueW(void *,unsigned long,struct HWND__ *,unsigned int (__stdcall*)(void *,unsigned int,unsigned int,unsigned int),void *,unsigned long *)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountOpenServiceW",
    "private: static int (__stdcall* CIlNt4Advapi32::m_ChangeServiceConfigW)(struct SC_HANDLE__ *,unsigned long,unsigned long,unsigned long,unsigned short const *,unsigned short const *,unsigned long *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: virtual void * __thiscall CIlAdvapi32::FreeSid(void *)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiDestroyDeviceInfoList(void))(void *)",
    "public: __thiscall CIlOle32::CIlOle32(void)",
    "public: __thiscall CIlWs2_32::CIlWs2_32(class CIlWs2_32 const &)",
    "public: virtual int __thiscall CIlWs2_32::getsockopt(unsigned int,int,int,char *,int *)",
    "public: virtual int __thiscall CIlWs2_32::gethostname(char *,int)",
    "public: void __thiscall CIlNt4Advapi32::release_ConvertStringSecurityDescriptorToSecurityDescriptorW(void)",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_UnlockServiceDatabase(void))(void *)",
    "public: virtual int __thiscall CIlKernel32::CopyFileW(unsigned short const *,unsigned short const *,int)",
    "private: static int __stdcall CIlNt4Kernel32::IlProcess32NextW(void *,struct tagPROCESSENTRY32W *)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_ConvertSidToStringSidW)(void *,unsigned short * *)",
    "private: static struct SC_HANDLE__ * __stdcall CIlNt4Advapi32::IlCreateServiceW(struct SC_HANDLE__ *,unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned long,unsigned long,unsigned short const *,unsigned short const *,unsigned long *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: class CIlIphlpapi & __thiscall CIlIphlpapi::operator=(class CIlIphlpapi const &)",
    "public: virtual int __thiscall CIlNt4Kernel32::Process32NextW(void *,struct tagPROCESSENTRY32W *)",
    "public: __thiscall CIlKernel32::CIlKernel32(class CIlKernel32 const &)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiBuildDriverInfoList(void))(void *,struct _SP_DEVINFO_DATA *,unsigned long)",
    "public: __thiscall CIlNt4Setupapi::CIlNt4Setupapi(class CIlNt4Setupapi const &)",
    "private: static unsigned long (__stdcall* CIlNt4Netapi32::m_NetLocalGroupEnum)(unsigned short const *,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *,unsigned long *)",
    "public: virtual void __thiscall CIlOle32::CoTaskMemFree(void *)",
    "public: virtual void __thiscall CIlKernel32::DeleteCriticalSection(struct _RTL_CRITICAL_SECTION *)",
    "public: virtual long __thiscall CIlAdvapi32::RegQueryValueExW(struct HKEY__ *,unsigned short const *,unsigned long *,unsigned long *,unsigned char *,unsigned long *)",
    "public: int (__stdcall*__thiscall CIlNt4Advapi32::get_CloseServiceHandle(void))(struct SC_HANDLE__ *)",
    "public: __thiscall CIlShell32::CIlShell32(class CIlShell32 const &)",
    "public: virtual long __thiscall CIlAdvapi32::RegDeleteValueW(struct HKEY__ *,unsigned short const *)",
    "private: static unsigned long CIlNt4Netapi32::m_RefCountNetLocalGroupAdd",
    "private: static unsigned long CIlNt4Netapi32::m_RefCountNetUserDel",
    "private: static void * (__stdcall* CIlNt4Setupapi::m_SetupOpenFileQueue)(void)",
    "public: virtual int __thiscall CIlKernel32::WriteFile(void *,void const *,unsigned long,unsigned long *,struct _OVERLAPPED *)",
    "public: virtual struct SC_HANDLE__ * __thiscall CIlNt4Advapi32::CreateServiceW(struct SC_HANDLE__ *,unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned long,unsigned long,unsigned short const *,unsigned short const *,unsigned long *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "const CIlAdvapi32::`vftable'",
    "public: virtual long __thiscall CIlOle32::CoInitializeEx(void *,unsigned long)",
    "public: virtual void __thiscall CIlKernel32::DebugBreak(void)",
    "public: void __thiscall CIlNt4Advapi32::release_OpenServiceW(void)",
    "public: virtual int (__stdcall*__thiscall CIlW2kDynWs2_32::get_getaddrinfo(void))(char const *,char const *,struct addrinfo const *,struct addrinfo * *)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupCloseFileQueue)(void *)",
    "private: static struct SC_HANDLE__ * (__stdcall* CIlNt4Advapi32::m_OpenServiceW)(struct SC_HANDLE__ *,unsigned short const *,unsigned long)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiSetDeviceInstallParamsW(void *,struct _SP_DEVINFO_DATA *,struct _SP_DEVINSTALL_PARAMS_W *)",
    "struct IShell32Interface * g_Shell32",
    "public: virtual int __thiscall CIlKernel32::DuplicateHandle(void *,void *,void *,void * *,unsigned long,int,unsigned long)",
    "public: virtual unsigned long __thiscall CIlIphlpapi::GetIpAddrTable(struct _MIB_IPADDRTABLE *,unsigned long *,int)",
    "private: static struct HKEY__ * __stdcall CIlNt4Setupapi::IlSetupDiOpenDevRegKey(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long,unsigned long,unsigned long)",
    "public: virtual int __thiscall CIlKernel32::HeapWalk(void *,struct _PROCESS_HEAP_ENTRY *)",
    "public: virtual long __thiscall CIlAdvapi32::RegCloseKey(struct HKEY__ *)",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiDestroyDeviceInfoList)(void *)",
    "private: static int __stdcall CIlNt4Advapi32::IlConvertSecurityDescriptorToStringSecurityDescriptorW(void *,unsigned long,unsigned long,unsigned short * *,unsigned long *)",
    "public: class CIlOleaut32 & __thiscall CIlOleaut32::operator=(class CIlOleaut32 const &)",
    "public: struct SC_HANDLE__ * (__stdcall*__thiscall CIlNt4Advapi32::get_OpenSCManagerW(void))(unsigned short const *,unsigned short const *,unsigned long)",
    "private: static int (__stdcall* CIlNt4Advapi32::m_InitiateSystemShutdownExW)(unsigned short *,unsigned short *,unsigned long,int,int,unsigned long)",
    "public: virtual void __thiscall CIlKernel32::LeaveCriticalSection(struct _RTL_CRITICAL_SECTION *)",
    "public: __thiscall CIlShell32::CIlShell32(void)",
    "public: virtual int __thiscall CIlKernel32::GetDiskFreeSpaceExW(unsigned short const *,union _ULARGE_INTEGER *,union _ULARGE_INTEGER *,union _ULARGE_INTEGER *)",
    "public: __thiscall CIlVersion::CIlVersion(class CIlVersion const &)",
    "public: class CIlUser32 & __thiscall CIlUser32::operator=(class CIlUser32 const &)",
    "public: __thiscall CIlKernel32::CIlKernel32(void)",
    "public: __thiscall CIlKernel32::~CIlKernel32(void)",
    "private: static unsigned long CIlNt4Netapi32::m_RefCountNetApiBufferFree",
    "public: __thiscall CIlNt4User32::CIlNt4User32(class CIlNt4User32 const &)",
    "public: int (__stdcall*__thiscall CIlNt4Setupapi::get_SetupScanFileQueueW(void))(void *,unsigned long,struct HWND__ *,unsigned int (__stdcall*)(void *,unsigned int,unsigned int,unsigned int),void *,unsigned long *)",
    "class CIlWimgapi IlWimgapi",
    "public: unsigned int (__stdcall*__thiscall CIlNt4Kernel32::get_GetSystemWindowsDirectoryW(void))(unsigned short *,unsigned int)",
    "public: virtual int __thiscall CIlSetupapi::SetupFindNextLine(struct _INFCONTEXT *,struct _INFCONTEXT *)",
    "public: virtual long __thiscall CIlAdvapi32::RegSetValueExW(struct HKEY__ *,unsigned short const *,unsigned long,unsigned long,unsigned char const *,unsigned long)",
    "private: static unsigned long CIlNt4Advapi32::m_RefCountEnumServicesStatusExW",
    "public: virtual unsigned long __thiscall CIlWs2_32::inet_addr(char const *)",
    "const CIlIphlpapi::`vftable'",
    "public: void __thiscall CIlNt4Netapi32::release_NetLocalGroupAddMembers(void)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupGetInfInformationW",
    "public: virtual unsigned long __thiscall CIlKernel32::HeapCompact(void *,unsigned long)",
    "private: static unsigned long __stdcall CIlNt4Netapi32::IlNetUserEnum(unsigned short const *,unsigned long,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *,unsigned long *)",
    "public: int (__stdcall*__thiscall CIlNt4User32::get_LockSetForegroundWindow(void))(unsigned int)",
    "public: virtual unsigned long __thiscall CIlNt4Netapi32::NetLocalGroupEnum(unsigned short const *,unsigned long,unsigned char * *,unsigned long,unsigned long *,unsigned long *,unsigned long *)",
    "private: static unsigned long CIlNt4Setupapi::m_RefCountSetupScanFileQueueW",
    "private: static struct SC_HANDLE__ * __stdcall CIlNt4Advapi32::IlOpenSCManagerW(unsigned short const *,unsigned short const *,unsigned long)",
    "public: struct SC_HANDLE__ * (__stdcall*__thiscall CIlNt4Advapi32::get_OpenServiceW(void))(struct SC_HANDLE__ *,unsigned short const *,unsigned long)",
    "public: __thiscall CIlOleaut32::CIlOleaut32(void)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiDestroyDeviceInfoList(void *)",
    "public: void __thiscall CIlNt4Netapi32::release_NetApiBufferFree(void)",
    "const CIlShell32::`vftable'",
    "struct IlW2kDynWs2_32Interface * g_W2kWs2_32",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiGetClassDevsExW(void)",
    "public: virtual int __thiscall CIlKernel32::DeleteFileW(unsigned short const *)",
    "public: virtual int __thiscall CIlAdvapi32::CryptAcquireContextW(unsigned long *,unsigned short const *,unsigned short const *,unsigned long,unsigned long)",
    "public: virtual int __thiscall CIlNt4Setupapi::SetupDiEnumDeviceInterfaces(void *,struct _SP_DEVINFO_DATA *,struct _GUID const *,unsigned long,struct _SP_DEVICE_INTERFACE_DATA *)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiEnumDeviceInterfaces(void)",
    "private: static int __stdcall CIlNt4Userenv::IlCreateUserProfileExW(void *,unsigned short const *,unsigned short const *,unsigned short *,unsigned long,int)",
    "private: static void * (__stdcall* CIlNt4Setupapi::m_SetupDiGetClassDevsExW)(struct _GUID const *,unsigned short const *,struct HWND__ *,unsigned long,void *,unsigned short const *,void *)",
    "public: virtual int __thiscall CIlKernel32::HeapValidate(void *,unsigned long,void const *)",
    "public: virtual int __thiscall CIlAdvapi32::LookupAccountNameW(unsigned short const *,unsigned short const *,void *,unsigned long *,unsigned short *,unsigned long *,enum _SID_NAME_USE *)",
    "public: virtual int __thiscall CIlNt4Advapi32::ChangeServiceConfigW(struct SC_HANDLE__ *,unsigned long,unsigned long,unsigned long,unsigned short const *,unsigned short const *,unsigned long *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "public: virtual unsigned long __thiscall CIlKernel32::GetShortPathNameW(unsigned short const *,unsigned short *,unsigned long)",
    "public: virtual void * __thiscall CIlKernel32::CreateFileW(unsigned short const *,unsigned long,unsigned long,struct _SECURITY_ATTRIBUTES *,unsigned long,unsigned long,void *)",
    "public: virtual void __thiscall CIlSetupapi::SetupCloseInfFile(void *)",
    "class CIlNt4Advapi32 IlNt4Advapi32",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiGetDriverInfoDetailW)(void *,struct _SP_DEVINFO_DATA *,struct _SP_DRVINFO_DATA_V2_W *,struct _SP_DRVINFO_DETAIL_DATA_W *,unsigned long,unsigned long *)",
    "public: struct HKEY__ * (__stdcall*__thiscall CIlNt4Setupapi::get_SetupDiOpenDevRegKey(void))(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long,unsigned long,unsigned long)",
    "public: int (__stdcall*__thiscall CIlNt4Kernel32::get_Process32FirstW(void))(void *,struct tagPROCESSENTRY32W *)",
    "public: __thiscall CIlNt4Advapi32::CIlNt4Advapi32(void)",
    "public: virtual int __thiscall CIlKernel32::HeapFree(void *,unsigned long,void *)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiEnumDeviceInfo(void *,unsigned long,struct _SP_DEVINFO_DATA *)",
    "private: static unsigned long CIlNt4Userenv::m_RefCountCreateUserProfileExW",
    "const CIlNt4User32::`vftable'",
    "private: static int __stdcall CIlNt4Advapi32::IlCreateWellKnownSid(enum WELL_KNOWN_SID_TYPE,void *,void *,unsigned long *)",
    "public: class CIlAdvapi32 & __thiscall CIlAdvapi32::operator=(class CIlAdvapi32 const &)",
    "private: static unsigned long CIlNt4Kernel32::m_RefCountGlobalMemoryStatusEx",
    "private: static int (__stdcall* CIlNt4Setupapi::m_SetupDiGetDeviceRegistryPropertyW)(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned long *,unsigned char *,unsigned long,unsigned long *)",
    "public: virtual void (__stdcall*__thiscall CIlW2kDynWs2_32::get_freeaddrinfo(void))(struct addrinfo *)",
    "private: static unsigned long __stdcall CIlNt4Netapi32::IlNetUserAdd(unsigned short const *,unsigned long,unsigned char *,unsigned long *)",
    "public: virtual unsigned long __thiscall CIlWimgapi::WIMRegisterMessageCallback(void *,int (__stdcall*)(void),void *)",
    "private: static int __stdcall CIlNt4Advapi32::IlInitiateSystemShutdownExW(unsigned short *,unsigned short *,unsigned long,int,int,unsigned long)",
    "public: virtual long __thiscall CIlOle32::CoCreateInstance(struct _GUID const &,struct IUnknown *,unsigned long,struct _GUID const &,void * *)",
    "public: void __thiscall CIlNt4Setupapi::release_SetupDiGetDriverInfoDetailW(void)",
    "private: static int __stdcall CIlNt4Setupapi::IlSetupDiGetDriverInfoDetailW(void *,struct _SP_DEVINFO_DATA *,struct _SP_DRVINFO_DATA_V2_W *,struct _SP_DRVINFO_DETAIL_DATA_W *,unsigned long,unsigned long *)"
  ],
  "miguiresource.dll": "No exports",
  "mimefilt.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mlang.dll": [
    "LcidToRfc1766A",
    "ConvertINetMultiByteToUnicode",
    "DllCanUnloadNow",
    "Rfc1766ToLcidW",
    "ConvertINetReset",
    "GetGlobalFontLinkObject",
    "ConvertINetUnicodeToMultiByte",
    "ConvertINetString",
    "LcidToRfc1766W",
    "DllGetClassObject",
    "Rfc1766ToLcidA",
    "IsConvertINetStringAvailable"
  ],
  "mmcbase.dll": [
    "public: void __thiscall CEventBuffer::Lock(void)",
    "public: static long __stdcall BookKeeping::UnregisterThread(int,unsigned long)",
    "int __stdcall MMC_PickIconDlg(struct HWND__ *,unsigned short *,unsigned int,int *)",
    "public: void __thiscall mmcerror::SC::SetSnapinName(unsigned short const *)",
    "LeaveModalLoop",
    "class CEventSource & __stdcall GetComObjectEventSource(void)",
    "public: static struct HINSTANCE__ * __stdcall mmcerror::SC::GetHinst(void)",
    "public: static unsigned short const * __stdcall BookKeeping::GetSnapinModuleName(int)",
    "int __stdcall MMCErrorBox(unsigned int,unsigned int)",
    "class mmcerror::SC __stdcall ScFromMMC(long)",
    "public: class mmcerror::SC & __thiscall mmcerror::SC::FromWin32(long)",
    "public: __thiscall CEventBuffer::~CEventBuffer(void)",
    "public: static bool __stdcall ItemHandle::IsValid(class ItemHandle const *)",
    "void __stdcall FormatErrorShort(class mmcerror::SC,unsigned int,unsigned short *)",
    "public: static class SnapinBookkeepingInfo const & __stdcall BookKeeping::FindSnapin(int)",
    "public: static long __stdcall CMMCWatsonAPI::ExceptionFilter(struct _EXCEPTION_POINTERS *,int)",
    "public: static void __stdcall BookKeeping::MMCNullInterface(int,unsigned short const *,unsigned short const *)",
    "private: __thiscall CMMCStrongReferences::CMMCStrongReferences(void)",
    "public: __thiscall CEventBuffer::CEventBuffer(void)",
    "private: static struct HINSTANCE__ * mmcerror::SC::s_hInst",
    "public: void __thiscall mmcerror::SC::`default constructor closure'(void)",
    "long __stdcall MMCUpdateRegistry(int,class CObjectRegParams const *,class CControlRegParams const *)",
    "private: static class CMMCStrongReferences & __stdcall CMMCStrongReferences::GetSingletonObject(void)",
    "void __stdcall TraceSnapinError(unsigned short const *,class mmcerror::SC const &)",
    "public: static bool __stdcall BookKeeping::AddSnapinInterface(struct IUnknown *,unsigned short const *,int &)",
    "public: void __thiscall mmcerror::SC::CheckCallingThreadID(void)",
    "public: static void __stdcall BookKeeping::InvalidInterface(int,unsigned short const *,unsigned short const *)",
    "_GetAllocCounters@0",
    "public: static bool (__stdcall*__stdcall BookKeeping::RegisterSnapinInterfaceErrorHandler(bool (__stdcall*)(class SnapinBookkeepingInfo &,enum BookKeeping::_SnapinError,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,struct _EXCEPTION_POINTERS *)))(class SnapinBookkeepingInfo &,enum BookKeeping::_SnapinError,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,struct _EXCEPTION_POINTERS *)",
    "public: class CEventLock & __thiscall CEventLock::operator=(class CEventLock const &)",
    "public: __thiscall mmcerror::SC::operator bool(void)const",
    "public: void __thiscall mmcerror::SC::Throw(long)",
    "public: bool __thiscall mmcerror::SC::IsError(void)const",
    "long __stdcall SCODEFromSc(class mmcerror::SC const &)",
    "public: __thiscall CEventLock::CEventLock(void)",
    "class CEventBuffer & __stdcall GetEventBuffer(void)",
    "void __stdcall FormatErrorString(unsigned short const *,class mmcerror::SC,unsigned int,unsigned short *,int)",
    "public: void __thiscall mmcerror::SC::FatalError(void)const",
    "public: long __thiscall mmcerror::SC::ToHr(void)const",
    "public: static void __stdcall mmcerror::SC::SetMainThreadID(unsigned long)",
    "public: static long __stdcall BookKeeping::InitInstance(void)",
    "public: int __thiscall mmcerror::SC::operator!(void)const",
    "struct HINSTANCE__ * __stdcall GetStringModule(void)",
    "EnterModalLoop",
    "private: static struct HWND__ * mmcerror::SC::s_hWndModal",
    "public: static long __stdcall BookKeeping::FindAllSnapinUIThreads(int,unsigned long * *,unsigned long *)",
    "private: unsigned long __thiscall CMMCStrongReferences::InternalRelease(void)",
    "public: static long __stdcall BookKeeping::DumpWatsonTables(void *,unsigned short const *,int)",
    "public: static long __stdcall BookKeeping::ReleaseSnapinInterface(struct IUnknown *,int)",
    "private: unsigned long __thiscall CMMCStrongReferences::InternalAddRef(void)",
    "public: static unsigned short const * __stdcall mmcerror::SC::GetHelpFile(void)",
    "private: class mmcerror::SC __thiscall CEventBuffer::ScFlushPostponed(void)",
    "public: static bool __stdcall BookKeeping::EnableDiagnosticMessageBox(bool)",
    "public: static long __stdcall BookKeeping::UnregisterAllSnapinInstanceThreads(int)",
    "public: bool __thiscall mmcerror::SC::operator==(long)const",
    "public: static void __stdcall BookKeeping::MMCInterfaceMethodException(int,unsigned short const *,unsigned short const *,unsigned long,struct _EXCEPTION_POINTERS *,enum BookKeeping::_SnapinError)",
    "public: class mmcerror::SC & __thiscall mmcerror::SC::operator=(long)",
    "public: class mmcerror::SC & __thiscall mmcerror::SC::FromMMC(long)",
    "public: static long __stdcall BookKeeping::RemoveItem(void *)",
    "public: static unsigned long __stdcall CMMCStrongReferences::Release(void)",
    "public: __thiscall CEventLock::~CEventLock(void)",
    "public: static long __stdcall BookKeeping::RegisterThread(int,int,unsigned long,enum BookKeeping::SnapinThreadFlags)",
    "public: void __thiscall mmcerror::SC::Clear(void)",
    "public: long __thiscall mmcerror::SC::GetCode(void)const",
    "void __stdcall TraceError(unsigned short const *,class mmcerror::SC const &)",
    "public: static void __stdcall BookKeeping::MMCInterfaceError(int,unsigned short const *,unsigned short const *)",
    "public: unsigned long __thiscall mmcerror::SC::GetHelpID(void)",
    "public: void __thiscall mmcerror::SC::Trace_(void)const",
    "public: bool __thiscall mmcerror::SC::operator!=(class mmcerror::SC const &)const",
    "private: static class CConsoleEventDispatcher * CConsoleEventDispatcherProvider::s_pDispatcher",
    "public: static class mmcerror::SC __stdcall CConsoleEventDispatcherProvider::ScSetConsoleEventDispatcher(class CConsoleEventDispatcher *)",
    "public: static bool __stdcall CMMCStrongReferences::LastRefReleased(void)",
    "public: bool __thiscall mmcerror::SC::operator!=(long)const",
    "public: static void __stdcall BookKeeping::InvalidMMCInterfaceRelease(int,unsigned short const *,unsigned short const *)",
    "private: static unsigned long mmcerror::SC::s_dwMainThreadID",
    "public: static class mmcerror::SC __stdcall CConsoleEventDispatcherProvider::ScGetConsoleEventDispatcher(class CConsoleEventDispatcher * &)",
    "public: static void __stdcall mmcerror::SC::SetHWnd(struct HWND__ *)",
    "public: static void __stdcall BookKeeping::InterfaceMethodActivationContextException(int,unsigned short const *,unsigned short const *,unsigned long,struct _EXCEPTION_POINTERS *)",
    "public: class CMMCStrongReferences & __thiscall CMMCStrongReferences::operator=(class CMMCStrongReferences const &)",
    "public: void __thiscall mmcerror::SC::TraceAndClear(void)",
    "int __stdcall MMCErrorBox(unsigned int,class mmcerror::SC,unsigned int)",
    "public: bool __thiscall CEventBuffer::IsLocked(void)",
    "public: unsigned short const * __thiscall mmcerror::SC::GetSnapinName(void)const",
    "public: __thiscall mmcerror::SC::SC(class mmcerror::SC const &)",
    "InsideModalLoop",
    "public: class mmcerror::SC & __thiscall mmcerror::SC::FromLastError(void)",
    "public: bool __thiscall mmcerror::SC::operator==(class mmcerror::SC const &)const",
    "public: void __thiscall CEventBuffer::Unlock(void)",
    "public: __thiscall CEventBuffer::CEventBuffer(class CEventBuffer const &)",
    "private: void __thiscall mmcerror::SC::MakeSc(enum mmcerror::SC::facility_type,long)",
    "public: static long __stdcall BookKeeping::LKResult2HRESULT(long)",
    "int __stdcall MMCErrorBox(unsigned short const *,class mmcerror::SC,unsigned int)",
    "public: static void __stdcall BookKeeping::InterfaceMethodException(int,unsigned short const *,unsigned short const *,unsigned long,struct _EXCEPTION_POINTERS *)",
    "public: class mmcerror::SC __thiscall CEventBuffer::ScEmitOrPostpone(struct IDispatch *,long,class ATL::CComVariant *,int)",
    "public: static void __stdcall BookKeeping::InterfaceFailure(int,unsigned short const *,unsigned short const *)",
    "public: void __thiscall mmcerror::SC::Throw(void)",
    "public: static long __stdcall BookKeeping::FindAllSnapinUIThreads(unsigned long * *,unsigned long *)",
    "public: unsigned short const * __thiscall mmcerror::SC::GetFunctionName(void)const",
    "public: static struct HWND__ * __stdcall mmcerror::SC::GetHWnd(void)",
    "int __stdcall MMCErrorBox(unsigned short const *,unsigned int)",
    "public: static unsigned long __stdcall mmcerror::SC::GetMainThreadID(void)",
    "private: static struct HWND__ * mmcerror::SC::s_hWnd",
    "public: static void __stdcall BookKeeping::InterfaceNotFound(int,unsigned short const *)",
    "public: static class ItemHandle * __stdcall BookKeeping::FindItem(void *)",
    "int __stdcall MMCErrorBox(class mmcerror::SC,unsigned int)",
    "long __stdcall HrFromSc(class mmcerror::SC const &)",
    "private: static unsigned int mmcerror::SC::s_CallDepth",
    "public: static bool __stdcall BookKeeping::FxSnapinException(int,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,int,struct HWND__ *)",
    "ReportFxSnapinException",
    "public: static long __stdcall BookKeeping::AddSnapin(unsigned short const *,int &)",
    "public: static class SnapinBookkeepingInfo const & __stdcall BookKeeping::FindSnapin(unsigned short const *)",
    "public: class CEventBuffer & __thiscall CEventBuffer::operator=(class CEventBuffer const &)",
    "public: static struct HWND__ * __stdcall mmcerror::SC::SetModalHWND(struct HWND__ *)",
    "public: static unsigned short const * __stdcall BookKeeping::GetSnapinName(int)",
    "public: class mmcerror::SC & __thiscall mmcerror::SC::operator=(class mmcerror::SC const &)",
    "public: static void __stdcall mmcerror::SC::SetHinst(struct HINSTANCE__ *)",
    "public: static unsigned long __stdcall CMMCStrongReferences::AddRef(void)",
    "public: static class SnapinBookkeepingInfo const & __stdcall BookKeeping::FindSnapin(struct IUnknown *)",
    "long __stdcall LoadStandardOverlays(struct _IMAGELIST *,int,int *,int *)",
    "public: static int __stdcall BookKeeping::GetNewSnapinInstanceId(void)",
    "public: __thiscall mmcerror::SC::~SC(void)",
    "public: __thiscall mmcerror::SC::SC(long)",
    "public: void __thiscall mmcerror::SC::GetErrorMessage(unsigned int,unsigned short *)const",
    "public: static void __stdcall BookKeeping::MMCInterfaceLeak(int,unsigned short const *)",
    "void __stdcall FormatErrorIds(unsigned int,class mmcerror::SC,unsigned int,unsigned short *)",
    "private: bool __thiscall CMMCStrongReferences::InternalLastRefReleased(void)",
    "public: static void __stdcall BookKeeping::InvalidMMCInterface(int,unsigned short const *,unsigned short const *)",
    "public: static struct HWND__ * __stdcall mmcerror::SC::GetModalHWND(void)",
    "public: static long __stdcall BookKeeping::AddItem(class ItemHandle &)",
    "public: static void __stdcall CMMCWatsonAPI::ForceException(int)",
    "private: enum mmcerror::SC::facility_type __thiscall mmcerror::SC::GetFacility(void)const",
    "public: void __thiscall mmcerror::SC::SetFunctionName(unsigned short const *)"
  ],
  "mmci.dll": [
    "MediaClassInstaller",
    "mmWOW64MediaClassInstallerA"
  ],
  "mmcico.dll": [
    "MediaClassCoInstaller"
  ],
  "mmcndmgr.dll": [
    "DllUnregisterServer",
    "CreateExecutivePlatform",
    "DllCanUnloadNow",
    "_GetAllocCounters@0",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "mmcshext.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mmcss.dll": [
    "ServiceMain",
    "ToServiceMain"
  ],
  "mmres.dll": "No exports",
  "modemui.dll": [
    "ModemCplDlgProc",
    "drvGetDefaultCommConfigA",
    "UnimodemDevConfigDialog",
    "ModemPropPagesProvider",
    "QueryModemForCountrySettings",
    "drvCommConfigDialogA",
    "UnimodemGetExtendedCaps",
    "CountryRunOnce",
    "drvSetDefaultCommConfigW",
    "UnimodemGetDefaultCommConfig",
    "drvSetDefaultCommConfigA",
    "InvokeControlPanel",
    "drvCommConfigDialogW",
    "drvGetDefaultCommConfigW"
  ],
  "montr_ci.dll": [
    "MonitorClassInstaller"
  ],
  "moricons.dll": "No exports",
  "mpr.dll": [
    "WNetDirectoryNotifyW",
    "WNetGetConnection2W",
    "WNetOpenEnumA",
    "WNetGetUniversalNameA",
    "WNetOpenEnumW",
    "WNetAddConnection3A",
    "WNetPropertyDialogA",
    "WNetAddConnection2W",
    "WNetAddConnectionA",
    "WNetFormatNetworkNameA",
    "MultinetGetConnectionPerformanceW",
    "WNetConnectionDialog1A",
    "WNetSetConnectionW",
    "WNetGetConnection3A",
    "WNetGetNetworkInformationW",
    "WNetDirectoryNotifyA",
    "WNetCloseEnum",
    "WNetGetProviderNameW",
    "WNetGetLastErrorW",
    "WNetGetPropertyTextA",
    "MultinetGetErrorTextA",
    "WNetPropertyDialogW",
    "WNetGetConnection3W",
    "WNetGetResourceInformationW",
    "WNetSetLastErrorA",
    "WNetGetProviderTypeW",
    "WNetGetNetworkInformationA",
    "WNetPasswordChangeNotify",
    "WNetConnectionDialog2",
    "WNetAddConnectionW",
    "WNetDisconnectDialog1W",
    "WNetGetProviderNameA",
    "WNetUseConnectionA",
    "I_MprSaveConn",
    "WNetDisconnectDialog2",
    "WNetGetDirectoryTypeW",
    "WNetDisconnectDialog1A",
    "WNetGetResourceInformationA",
    "WNetCancelConnectionA",
    "WNetGetSearchDialog",
    "WNetGetHomeDirectoryW",
    "WNetGetUserW",
    "WNetLogonNotify",
    "WNetRestoreSingleConnectionW",
    "WNetGetResourceParentW",
    "MultinetGetConnectionPerformanceA",
    "WNetCancelConnectionW",
    "WNetGetConnection2A",
    "WNetSetLastErrorW",
    "WNetFormatNetworkNameW",
    "WNetEnumResourceA",
    "WNetConnectionDialog1W",
    "WNetGetLastErrorA",
    "WNetGetProviderTypeA",
    "WNetUseConnectionW",
    "WNetCancelConnection2A",
    "WNetDisconnectDialog",
    "WNetGetConnectionA",
    "WNetGetPropertyTextW",
    "WNetGetResourceParentA",
    "WNetGetDirectoryTypeA",
    "WNetEnumResourceW",
    "WNetSupportGlobalEnum",
    "WNetConnectionDialog",
    "WNetAddConnection3W",
    "WNetCancelConnection2W",
    "WNetGetConnectionW",
    "WNetGetUserA",
    "WNetSetConnectionA",
    "MultinetGetErrorTextW",
    "WNetClearConnections",
    "WNetGetUniversalNameW",
    "WNetAddConnection2A",
    "WNetRestoreAllConnectionsW"
  ],
  "mprapi.dll": [
    "MprConfigServerSetInfoEx",
    "CompressPhoneNumber",
    "MprConfigInterfaceTransportSetInfo",
    "MprAdminServerGetCredentials",
    "MprAdminInterfaceSetCredentialsEx",
    "MprAdminMIBEntryGetFirst",
    "MprAdminMIBServerConnect",
    "MprAdminTransportCreate",
    "MprConfigInterfaceCreate",
    "MprAdminGetPDCServer",
    "MprConfigFilterGetInfo",
    "MprAdminInterfaceGetCredentials",
    "MprAdminIsServiceInitialized",
    "MprAdminUserReadProfFlags",
    "MprAdminConnectionEnumEx",
    "MprConfigInterfaceGetInfo",
    "MprAdminMIBEntryGetNext",
    "MprConfigInterfaceTransportRemove",
    "MprConfigFilterSetInfo",
    "MprAdminServerGetInfoEx",
    "MprAdminServerConnect",
    "MprAdminServerSetInfo",
    "MprAdminInterfaceCreate",
    "MprAdminInterfaceTransportSetInfo",
    "MprConfigInterfaceTransportGetHandle",
    "MprAdminInterfaceTransportRemove",
    "MprConfigTransportGetInfo",
    "MprAdminDeviceEnum",
    "MprAdminInterfaceDeviceSetInfo",
    "MprConfigServerGetInfo",
    "MprAdminInterfaceGetCredentialsEx",
    "MprDomainQueryRasServer",
    "MprInfoBlockRemove",
    "MprAdminUserGetInfo",
    "MprAdminUserWriteProfFlags",
    "MprAdminInterfaceDisconnect",
    "MprAdminRegisterConnectionNotification",
    "MprAdminInterfaceGetHandle",
    "MprAdminConnectionEnum",
    "MprAdminInterfaceUpdatePhonebookInfo",
    "MprAdminPortReset",
    "MprConfigServerBackup",
    "MprAdminSendUserMessage",
    "MprConfigInterfaceTransportGetInfo",
    "MprAdminPortEnum",
    "MprInfoBlockQuerySize",
    "MprAdminInterfaceSetInfo",
    "MprConfigInterfaceEnum",
    "MprConfigTransportSetInfo",
    "MprAdminMIBEntrySet",
    "MprAdminInterfaceEnum",
    "MprAdminConnectionClearStats",
    "MprAdminUserServerDisconnect",
    "MprConfigServerGetInfoEx",
    "MprAdminInterfaceConnect",
    "MprAdminInterfaceTransportAdd",
    "MprAdminUserOpen",
    "MprAdminMIBEntryDelete",
    "MprAdminMIBEntryGet",
    "MprAdminConnectionGetInfo",
    "MprAdminMIBBufferFree",
    "MprConfigInterfaceTransportAdd",
    "MprAdminConnectionGetInfoEx",
    "MprConfigTransportGetHandle",
    "MprAdminEstablishDomainRasServer",
    "MprAdminPortClearStats",
    "MprAdminInterfaceSetCredentials",
    "MprAdminUserSetInfo",
    "MprConfigInterfaceGetHandle",
    "MprInfoBlockFind",
    "MprAdminInterfaceQueryUpdateResult",
    "MprConfigTransportCreate",
    "MprConfigTransportEnum",
    "MprAdminIsServiceRunning",
    "MprConfigServerConnect",
    "MprAdminUpdateConnection",
    "MprAdminGetErrorString",
    "MprConfigGetFriendlyName",
    "MprAdminServerDisconnect",
    "MprAdminUpgradeUsers",
    "MprAdminServerSetInfoEx",
    "MprAdminDeregisterConnectionNotification",
    "MprAdminInterfaceTransportGetInfo",
    "MprConfigInterfaceDelete",
    "MprAdminUserRead",
    "MprInfoCreate",
    "MprConfigServerInstall",
    "MprConfigInterfaceTransportEnum",
    "MprAdminMIBEntryCreate",
    "MprDomainRegisterRasServer",
    "RasPrivilegeAndCallBackNumber",
    "MprConfigGetGuidName",
    "MprGetUsrParams",
    "MprConfigServerRefresh",
    "MprConfigServerSetInfo",
    "MprInfoDelete",
    "MprConfigBufferFree",
    "MprPortSetUsage",
    "MprInfoDuplicate",
    "MprAdminMIBServerDisconnect",
    "MprAdminInterfaceDeviceGetInfo",
    "MprAdminConnectionRemoveQuarantine",
    "MprAdminUserServerConnect",
    "MprConfigTransportDelete",
    "MprConfigServerDisconnect",
    "MprAdminServerGetInfo",
    "MprAdminUserWrite",
    "MprAdminTransportGetInfo",
    "MprAdminPortGetInfo",
    "MprAdminInterfaceUpdateRoutes",
    "MprInfoBlockSet",
    "MprAdminInterfaceGetInfo",
    "MprAdminPortDisconnect",
    "MprAdminUserClose",
    "MprConfigInterfaceSetInfo",
    "MprAdminTransportSetInfo",
    "MprAdminIsDomainRasServer",
    "MprAdminInterfaceDelete",
    "MprAdminBufferFree",
    "MprConfigServerRestore",
    "MprInfoRemoveAll",
    "MprAdminServerSetCredentials",
    "MprInfoBlockAdd"
  ],
  "mprddm.dll": [
    "DDMAdminPortReset",
    "IfObjectLoadPhonebookInfo",
    "DDMAdminConnectionGetInfoEx",
    "DDMAdminPortEnum",
    "RasAuthProviderFreeAttributes",
    "DDMAdminServerSetInfoEx",
    "DDMAdminUpdateConnection",
    "DDMServiceInitialize",
    "DDMRegisterConnectionNotification",
    "RasAcctProviderInterimAccounting",
    "DDMPostCleanup",
    "DDMGetIdentityAttributes",
    "DDMAdminInterfaceConnect",
    "DDMDisconnectInterface",
    "RasAcctProviderInitialize",
    "RasAcctProviderStopAccounting",
    "DDMAdminConnectionEnum",
    "RasAuthProviderTerminate",
    "DDMSendUserMessage",
    "RasAcctConfigChangeNotification",
    "RasAcctProviderTerminate",
    "DDMAdminPortDisconnect",
    "DDMAdminServerGetInfo",
    "DDMAdminServerGetInfoEx",
    "RasAcctProviderFreeAttributes",
    "RasAuthProviderInitialize",
    "DDMServicePostListens",
    "RasAuthProviderAuthenticateUser",
    "DDMAdminRemoveQuarantine",
    "RasAcctProviderStartAccounting",
    "DDMAdminConnectionClearStats",
    "DDMAdminPortGetInfo",
    "DDMAdminInterfaceDisconnect",
    "DDMAdminConnectionGetInfo",
    "RasAuthConfigChangeNotification",
    "IfObjectInitiatePersistentConnections",
    "DDMTransportCreate",
    "DDMConnectInterface",
    "DDMAdminConnectionEnumEx",
    "DDMAdminPortClearStats",
    "DDMAdminServerSetInfo",
    "IfObjectNotifyOfReachabilityChange",
    "IfObjectSetDialoutHoursRestriction",
    "IfObjectFreePhonebookContext"
  ],
  "mprdim.dll": [
    "ServiceMain"
  ],
  "mprmsg.dll": [
    "MprmsgGetErrorString"
  ],
  "msaatext.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "msacm32.dll": [
    "acmFormatTagDetailsW",
    "acmDriverPriority",
    "acmFilterTagDetailsA",
    "acmFilterChooseA",
    "acmStreamSize",
    "acmDriverEnum",
    "acmGetVersion",
    "acmStreamReset",
    "acmFilterTagEnumW",
    "acmDriverRemove",
    "acmFilterChooseW",
    "acmDriverOpen",
    "acmFormatTagEnumA",
    "acmFormatChooseW",
    "XRegThunkEntry",
    "acmDriverDetailsA",
    "acmFilterDetailsA",
    "acmDriverClose",
    "acmStreamConvert",
    "acmStreamOpen",
    "acmFilterTagDetailsW",
    "acmDriverMessage",
    "acmDriverDetailsW",
    "acmFilterDetailsW",
    "acmFilterTagEnumA",
    "acmFormatSuggest",
    "acmStreamUnprepareHeader",
    "acmFilterEnumA",
    "acmStreamMessage",
    "acmStreamClose",
    "acmDriverID",
    "acmFormatEnumA",
    "acmFormatChooseA",
    "acmStreamPrepareHeader",
    "acmDriverAddW",
    "acmFormatEnumW",
    "acmFormatDetailsW",
    "acmDriverAddA",
    "acmFilterEnumW",
    "acmFormatTagDetailsA",
    "acmMetrics",
    "acmFormatTagEnumW",
    "acmFormatDetailsA",
    "acmMessage32"
  ],
  "msafd.dll": [
    "WSPStartup"
  ],
  "msasn1.dll": [
    "ASN1DEREncUTF8String",
    "ASN1octetstring_cmp",
    "ASN1BEREncRemoveZeroBits2",
    "ASN1char32string_cmp",
    "ASN1CEREncUTCTime",
    "ASN1CEREncGeneralizedTime",
    "ASN1_CreateDecoder",
    "ASN1charstring_free",
    "ASN1_SetDecoderOption",
    "ASN1BEREncBool",
    "ASN1DecAlloc",
    "ASN1CEREncBitString",
    "ASN1BERDecChar32String",
    "ASN1BEREncExplicitTag",
    "ASN1BEREncFlush",
    "ASN1_Decode",
    "ASN1BEREncObjectIdentifier",
    "ASN1CEREncOctetString",
    "ASN1BERDecPeekTag",
    "ASN1DEREncChar16String",
    "ASN1_Encode",
    "ASN1_CloseEncoder",
    "ASN1char16string_cmp",
    "ASN1_CreateModule",
    "ASN1objectidentifier_free",
    "ASN1BERDecSXVal",
    "ASN1DEREncBeginBlk",
    "ASN1CEREncMultibyteString",
    "ASN1BERDecCharString",
    "ASN1BERDecSkip",
    "ASN1intxisuint32",
    "ASN1BEREncEoid",
    "ASN1objectidentifier_cmp",
    "ASN1CEREncFlushBlkElement",
    "ASN1CEREncChar32String",
    "ASN1_CloseEncoder2",
    "ASN1BEREncDouble",
    "ASN1BEREncSX",
    "ASN1BEREoid_free",
    "ASN1ztchar16string_cmp",
    "ASN1_FreeEncoded",
    "ASN1DEREncEndBlk",
    "ASN1BEREncZeroMultibyteString",
    "ASN1BERDecU16Val",
    "ASN1BERDecBool",
    "ASN1CEREncEndBlk",
    "ASN1BERDecFlush",
    "ASN1DEREncFlushBlkElement",
    "ASN1intx2uint32",
    "ASN1BERDecExplicitTag",
    "ASN1BERDecNull",
    "ASN1BERDecCheck",
    "ASN1ztchar16string_free",
    "ASN1BERDecObjectIdentifier",
    "ASN1BERDecOctetString2",
    "ASN1BERDecZeroChar16String",
    "ASN1DecSetError",
    "ASN1char16string_free",
    "ASN1intx_setuint32",
    "ASN1BERDecS8Val",
    "ASN1DecRealloc",
    "ASN1octetstring_free",
    "ASN1BERDecZeroCharString",
    "ASN1intx_sub",
    "ASN1EncSetError",
    "ASN1utf8string_free",
    "ASN1CEREncCharString",
    "ASN1BERDecUTF8String",
    "ASN1utctime_cmp",
    "ASN1intx2int32",
    "ASN1BEREncUTCTime",
    "ASN1BEREncTag",
    "ASN1ztchar32string_free",
    "ASN1DEREncUTCTime",
    "ASN1BERDecZeroChar32String",
    "ASN1BERDecS32Val",
    "ASN1BEREoid2DotVal",
    "ASN1_FreeDecoded",
    "ASN1BERDecS16Val",
    "ASN1bitstring_free",
    "ASN1intx_add",
    "ASN1Free",
    "ASN1BERDotVal2Eoid",
    "ASN1BEREncCharString",
    "ASN1BEREncCheck",
    "ASN1BERDecObjectIdentifier2",
    "ASN1BERDecTag",
    "ASN1generalizedtime_cmp",
    "ASN1BEREncBitString",
    "ASN1open_cmp",
    "ASN1DEREncMultibyteString",
    "ASN1_SetEncoderOption",
    "ASN1BERDecLength",
    "ASN1BEREncNull",
    "ASN1DEREncChar32String",
    "ASN1BERDecU32Val",
    "ASN1BEREncEndOfContents",
    "ASN1BEREncGeneralizedTime",
    "ASN1_CreateDecoderEx",
    "ASN1BERDecOpenType",
    "ASN1bitstring_cmp",
    "ASN1BERDecBitString2",
    "ASN1BERDecOpenType2",
    "ASN1DEREncCharString",
    "ASN1uint32_uoctets",
    "ASN1BERDecEndOfContents",
    "ASN1charstring_cmp",
    "ASN1_GetDecoderOption",
    "ASN1DEREncGeneralizedTime",
    "ASN1BERDecOctetString",
    "ASN1intx_uoctets",
    "ASN1BEREncObjectIdentifier2",
    "ASN1BEREncMultibyteString",
    "ASN1BEREncOctetString",
    "ASN1intx_cmp",
    "ASN1BERDecNotEndOfContents",
    "ASN1_CreateEncoder",
    "ASN1CEREncChar16String",
    "ASN1DEREncBitString",
    "ASN1_CloseModule",
    "ASN1BEREncChar32String",
    "ASN1objectidentifier2_cmp",
    "ASN1BEREncUTF8String",
    "ASN1BEREncChar16String",
    "ASN1BEREncU32",
    "ASN1BERDecEoid",
    "ASN1_GetEncoderOption",
    "ASN1DEREncNewBlkElement",
    "ASN1BERDecChar16String",
    "ASN1intx_free",
    "ASN1ztchar32string_cmp",
    "ASN1BERDecZeroMultibyteString",
    "ASN1_CloseDecoder",
    "ASN1BERDecBitString",
    "ASN1char32string_free",
    "ASN1BERDecGeneralizedTime",
    "ASN1CEREncNewBlkElement",
    "ASN1DEREncOctetString",
    "ASN1BERDecMultibyteString",
    "ASN1BERDecUTCTime",
    "ASN1DEREncZeroMultibyteString",
    "ASN1BEREncS32",
    "ASN1CEREncBeginBlk",
    "ASN1ztcharstring_free",
    "ASN1BEREncRemoveZeroBits",
    "ASN1BEREncOpenType",
    "ASN1CEREncZeroMultibyteString",
    "ASN1open_free",
    "ASN1BERDecDouble",
    "ASN1BERDecU8Val",
    "ASN1BEREncLength",
    "ASN1ztcharstring_cmp"
  ],
  "msaudite.dll": "No exports",
  "mscandui.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mscat32.dll": [
    "CryptCATClose",
    "CryptCATAdminAcquireContext",
    "CryptCATCatalogInfoFromContext",
    "CryptCATGetMemberInfo",
    "MsCatFreeHashTag",
    "CryptCATCDFEnumMembers",
    "DllRegisterServer",
    "CatalogCompactHashDatabase",
    "MsCatConstructHashTag",
    "CryptCATCDFEnumCatAttributes",
    "CryptCATAdminReleaseCatalogContext",
    "DllUnregisterServer",
    "CryptCATPutMemberInfo",
    "CryptCATAdminCalcHashFromFileHandle",
    "CryptCATAdminReleaseContext",
    "CryptCATPutCatAttrInfo",
    "CryptCATGetCatAttrInfo",
    "CryptCATGetAttrInfo",
    "CryptCATEnumerateCatAttr",
    "CryptCATEnumerateMember",
    "CryptCATCDFEnumAttributesWithCDFTag",
    "CryptCATCDFEnumMembersByCDFTagEx",
    "CryptCATPutAttrInfo",
    "CryptCATCDFClose",
    "CryptCATStoreFromHandle",
    "CryptCATOpen",
    "CryptCATPersistStore",
    "CryptCATVerifyMember",
    "CryptCATCDFEnumMembersByCDFTag",
    "CryptCATHandleFromStore",
    "CryptCATAdminAddCatalog",
    "CryptCATCDFEnumAttributes",
    "CryptCATCDFOpen",
    "CryptCATEnumerateAttr",
    "IsCatalogFile",
    "CryptCATAdminEnumCatalogFromHash"
  ],
  "msclmd.dll": [
    "CardAcquireContext"
  ],
  "mscms.dll": [
    "GetColorDirectoryA",
    "GetPS2ColorSpaceArray",
    "GetPS2ColorRenderingDictionary",
    "ColorCplReleaseProfileProperties",
    "ConvertColorNameToIndex",
    "AssociateColorProfileWithDeviceA",
    "CheckBitmapBits",
    "UnregisterCMMA",
    "ColorCplSetUsePerUserProfiles",
    "TranslateBitmapBits",
    "DccwSetDisplayProfileAssociationList",
    "WcsGpCanInstallOrUninstallProfiles",
    "InstallColorProfileA",
    "ColorCplLoadAssociationList",
    "GetColorProfileHeader",
    "SpoolerCopyFileEvent",
    "WcsEnumColorProfilesSize",
    "InternalRefreshCalibration",
    "SetColorProfileElementReference",
    "CheckColors",
    "AssociateColorProfileWithDeviceW",
    "WcsGetUsePerUserProfiles",
    "SetColorProfileElement",
    "ColorCplInitialize",
    "WcsOpenColorProfileA",
    "CreateProfileFromLogColorSpaceA",
    "GenerateCopyFilePaths",
    "DccwCreateDisplayProfileAssociationList",
    "CloseColorProfile",
    "ColorCplSaveAssociationList",
    "WcsOpenColorProfileW",
    "CreateColorTransformA",
    "WcsGetDefaultColorProfileSize",
    "WcsGetCalibrationManagementState",
    "WcsCheckColors",
    "CreateDeviceLinkProfile",
    "IsColorProfileTagPresent",
    "DeviceRenameEvent",
    "WcsDisassociateColorProfileFromDevice",
    "InternalGetPS2ColorSpaceArray",
    "SetColorProfileElementSize",
    "WcsCreateIccProfile",
    "CreateProfileFromLogColorSpaceW",
    "DccwGetDisplayProfileAssociationList",
    "InstallColorProfileW",
    "InternalGetPS2PreviewCRD",
    "GetCountColorProfileElements",
    "WcsSetUsePerUserProfiles",
    "DllCanUnloadNow",
    "RegisterCMMA",
    "UninstallColorProfileA",
    "DllGetClassObject",
    "WcsGetDefaultRenderingIntent",
    "DccwGetGamutSize",
    "EnumColorProfilesA",
    "ConvertIndexToColorName",
    "WcsAssociateColorProfileWithDevice",
    "WcsTranslateColors",
    "OpenColorProfileW",
    "SelectCMM",
    "ColorCplGetDefaultProfileScope",
    "RegisterCMMW",
    "IsColorProfileValid",
    "ColorCplOverwritePerUserAssociationList",
    "InternalWcsAssociateColorProfileWithDevice",
    "DccwReleaseDisplayProfileAssociationList",
    "GetColorProfileElementTag",
    "UnregisterCMMW",
    "DisassociateColorProfileFromDeviceW",
    "GetStandardColorSpaceProfileW",
    "ColorCplGetDefaultRenderingIntentScope",
    "InternalSetDeviceConfig",
    "OpenColorProfileA",
    "InternalGetPS2ColorRenderingDictionary",
    "EnumColorProfilesW",
    "SetStandardColorSpaceProfileW",
    "InternalGetPS2CSAFromLCS",
    "GetPS2ColorRenderingIntent",
    "ColorCplGetProfileProperties",
    "SetColorProfileHeader",
    "WcsSetDefaultRenderingIntent",
    "ColorCplResetSystemWideAssociationListChangedWarning",
    "GetNamedProfileInfo",
    "WcsSetDefaultColorProfile",
    "CreateColorTransformW",
    "OpenDisplay",
    "DeleteColorTransform",
    "GetCMMInfo",
    "GetColorProfileElement",
    "WcsSetCalibrationManagementState",
    "UninstallColorProfileW",
    "SetStandardColorSpaceProfileA",
    "ColorCplHasSystemWideAssociationListChanged",
    "GetColorDirectoryW",
    "WcsEnumColorProfiles",
    "CloseDisplay",
    "DisassociateColorProfileFromDeviceA",
    "WcsGetDefaultColorProfile",
    "TranslateColors",
    "ColorCplMergeAssociationLists",
    "ColorCplUninitialize",
    "CreateMultiProfileTransform",
    "GetColorProfileFromHandle",
    "InternalGetDeviceConfig",
    "GetStandardColorSpaceProfileA"
  ],
  "mscoree.dll": [
    "GetHashFromFile",
    "ND_WI8",
    "CoInitializeCor",
    "StrongNameKeyGen",
    "GetHashFromHandle",
    "LockClrVersion",
    "GetXMLElementAttribute",
    "StrongNameSignatureVerification",
    "CorMarkThreadInThreadPool",
    "GetCORSystemDirectory",
    "StrongNameSignatureVerificationFromImage",
    "GetPermissionRequests",
    "GetCORVersion",
    "CoEEShutDownCOM",
    "CorBindToRuntimeByCfg",
    "StrongNameGetPublicKey",
    "GetFileVersion",
    "GetCORRequiredVersion",
    "ND_WU1",
    "StrongNameSignatureGenerationEx",
    "StrongNameGetBlob",
    "TranslateSecurityAttributes",
    "LogHelp_LogAssert",
    "SetTargetForVTableEntry",
    "ND_WI4",
    "CoUninitializeCor",
    "StrongNameTokenFromAssembly",
    "GetProcessExecutableHeap",
    "IEE",
    "StrongNameHashSize",
    "CorBindToRuntimeByPath",
    "GetAssemblyMDImport",
    "CorBindToRuntimeHost",
    "CorDllMainWorker",
    "EEDllRegisterServer",
    "RuntimeOpenImage",
    "EEDllGetClassObjectFromClass",
    "LoadStringRC",
    "LoadLibraryShim",
    "CloseCtrs",
    "GetVersionFromProcess",
    "ClrCreateManagedInstance",
    "_CorExeMain",
    "ND_RI4",
    "StrongNameSignatureGeneration",
    "ND_CopyObjDst",
    "CallFunctionShim",
    "LogHelp_TerminateOnAssert",
    "GetHashFromBlob",
    "ND_RI2",
    "GetMetaDataInternalInterfaceFromPublic",
    "StrongNameKeyGenEx",
    "GetMetaDataInternalInterface",
    "StrongNameGetBlobFromImage",
    "ND_WI2",
    "CorBindToCurrentRuntime",
    "GetRequestedRuntimeVersion",
    "DllCanUnloadNow",
    "GetHashFromFileW",
    "DllGetClassObject",
    "GetCORRootDirectory",
    "GetHashFromAssemblyFile",
    "LoadLibraryWithPolicyShim",
    "CoUninitializeEE",
    "_CorDllMain",
    "StrongNameSignatureSize",
    "OpenCtrs",
    "InitErrors",
    "GetStartupFlags",
    "GetPrivateContextsPerfCounters",
    "GetXMLElement",
    "GetCompileInfo",
    "EEDllUnregisterServer",
    "StrongNameErrorInfo",
    "RunDll32ShimW",
    "GetRequestedRuntimeVersionForCLSID",
    "CoInitializeEE",
    "CreateConfigStream",
    "LogHelp_NoGuiOnAssert",
    "StrongNameKeyDelete",
    "GetHostConfigurationFile",
    "GetTokenForVTableEntry",
    "ND_CopyObjSrc",
    "RuntimeOSHandle",
    "CorGetSvc",
    "StrongNameSignatureVerificationEx",
    "ND_RU1",
    "ReOpenMetaDataWithMemoryEx",
    "InitSSAutoEnterThread",
    "_CorExeMain2",
    "_CorImageUnloading",
    "MetaDataGetDispenser",
    "CorBindToRuntimeByPathEx",
    "GetMetaDataPublicInterfaceFromInternal",
    "StrongNameFreeBuffer",
    "UpdateError",
    "CorExitProcess",
    "_CorValidateImage",
    "ND_RI8",
    "GetTargetForVTableEntry",
    "GetRequestedRuntimeInfo",
    "DllRegisterServer",
    "CorTickleSvc",
    "StrongNameTokenFromPublicKey",
    "CorBindToRuntimeEx",
    "DllUnregisterServer",
    "LoadStringRCEx",
    "CorIsLatestSvc",
    "RuntimeReleaseHandle",
    "GetXMLObject",
    "StrongNameCompareAssemblies",
    "PostError",
    "CreateDebuggingInterfaceFromVersion",
    "StrongNameKeyInstall",
    "CorBindToRuntime",
    "GetRealProcAddress",
    "CollectCtrs",
    "GetHashFromAssemblyFileW",
    "StrongNameTokenFromAssemblyEx",
    "ReOpenMetaDataWithMemory"
  ],
  "mscorier.dll": "No exports",
  "mscories.dll": [
    "Install",
    "Uninstall"
  ],
  "mscpx32r.dLL": "No exports",
  "mscpxl32.dLL": [
    "ConfigureDlgProc",
    "SQLDataSourceToDriver",
    "SQLDriverToDataSource",
    "ConfigTranslator"
  ],
  "msctf.dll": [
    "CtfImeToAsciiEx",
    "TF_InvalidAssemblyListCacheIfExist",
    "TF_GetThreadMgr",
    "SetInputScopeXML",
    "TF_CreateCategoryMgr",
    "CtfImeCreateInputContext",
    "CtfImeDestroyInputContext",
    "TF_GetInitSystemFlags",
    "TF_CanUninitialize",
    "TF_Notify",
    "CtfImeUnregisterWord",
    "CtfImeEscapeEx",
    "DllRegisterServer",
    "CtfImeGetGuidAtom",
    "CtfImeInquireExW",
    "CtfImeSelect",
    "CtfImeDestroyThreadMgr",
    "DllUnregisterServer",
    "CtfImeConversionList",
    "TF_UninitSystem",
    "CtfImeSetCompositionString",
    "CtfImeSetActiveContext",
    "TF_CreateDisplayAttributeMgr",
    "TF_IsCtfmonRunning",
    "CtfImeCreateThreadMgr",
    "SetInputScope",
    "CtfImeEscape",
    "SetInputScopes",
    "TF_MapCompatibleHKL",
    "CtfImeDestroy",
    "CtfImeGetRegisterWordStyle",
    "TF_WaitForInitialized",
    "TF_CreateCicLoadMutex",
    "TF_SetShowFloatingStatus",
    "TF_GetShowFloatingStatus",
    "CtfImeRegisterWord",
    "TF_CreateLangBarMgr",
    "CtfImeIsGuidMapEnable",
    "SetInputScopes2",
    "TF_IsThreadWithFlags",
    "CtfImeInquire",
    "CtfImeSetFocus",
    "CtfImeConfigure",
    "CtfImeAssociateFocus",
    "TF_GetInputScope",
    "TF_SendLangBandMsg",
    "CtfImeDispatchDefImeMessage",
    "CtfImeIsIME",
    "TF_CreateLangBarItemMgr",
    "TF_InitSystem",
    "TF_SetDefaultRemoteKeyboardLayout",
    "TF_MapCompatibleKeyboardTip",
    "TF_CreateInputProcessorProfiles",
    "TF_CreateThreadMgr",
    "TF_GetAppCompatFlags",
    "DllCanUnloadNow",
    "TF_GetCompatibleKeyboardLayout",
    "TF_GetThreadFlags",
    "CtfImeProcessKey",
    "TF_GetGlobalCompartment",
    "TF_SetThreadFlags",
    "CtfImeProcessCicHotkey",
    "CtfImeSelectEx",
    "TF_CUASAppFix",
    "TF_CleanUpPrivateMessages",
    "CtfNotifyIME",
    "DllGetClassObject",
    "CtfImeEnumRegisterWord",
    "TF_RunInputCPL",
    "TF_CreateCicLoadWinStaMutex",
    "TF_PostAllThreadMsg"
  ],
  "msctfp.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "msctfui.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "msdadiag.dll": [
    "DllBidEntryPoint"
  ],
  "msdart.dll": [
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<2,1,1,1,3,2>::LockType(void)",
    "private: bool __thiscall CLKRLinearHashTable::_ReadOrWriteLock(void)const",
    "public: void __thiscall CLKRLinearHashTable::ReadUnlock(void)const",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<5,2,2,1,3,2>::LockType(void)",
    "public: void __thiscall CReaderWriterLock3AR::ReadLock(void)",
    "private: static long __stdcall CReaderWriterLock3::_CurrentThreadId(void)",
    "public: __thiscall CReaderWriterLock3::~CReaderWriterLock3(void)",
    "private: static int (__stdcall* CCriticalSection::sm_pfnTryEnterCriticalSection)(struct _RTL_CRITICAL_SECTION *)",
    "private: int __thiscall CLKRHashTable::_SubTableIndex(class CLKRLinearHashTable *)const",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::FindKey(unsigned long,void const * *)const",
    "private: bool __thiscall CReaderWriterLock3AR::_TryWriteLock(long)",
    "public: static int __cdecl CMdVersionInfo::IsMillnm(void)",
    "public: void __thiscall CSmallSpinLock::ReadLock(void)",
    "private: void __thiscall CSpinLock::_Lock(void)",
    "long const * const `public: static long const * __stdcall CLKRHashTableStats::BucketSizes(void)'::`2'::s_aBucketSizes",
    "public: static double __stdcall CFakeLock::GetDefaultSpinAdjustmentFactor(void)",
    "public: static int __cdecl CMdVersionInfo::IsWinNt4orLater(void)",
    "public: void __thiscall CSpinLock::ReadUnlock(void)",
    "public: __thiscall CLockedSingleList::CLockedSingleList(void)",
    "public: void __thiscall CReaderWriterLock3AR::ReadUnlock(void)",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<1,1,3,1,3,2>::PerLockSpin(void)",
    "public: void __thiscall CSpinLock::ConvertExclusiveToShared(void)",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<6,2,2,1,3,2>::Recursion(void)",
    "public: long __thiscall CEXAutoBackupFile::UndoBackup(void)",
    "private: void __thiscall CReaderWriterLock::_ReadLockSpin(void)",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<3,1,1,1,1,1>::Recursion(void)",
    "public: void __thiscall CCritSec::WriteLock(void)",
    "public: class CMdVersionInfo & __thiscall CMdVersionInfo::operator=(class CMdVersionInfo const &)",
    "public: class CLockBase<1,1,3,1,3,2> & __thiscall CLockBase<1,1,3,1,3,2>::operator=(class CLockBase<1,1,3,1,3,2> const &)",
    "public: bool __thiscall CLKRLinearHashTable::IsWriteLocked(void)const",
    "private: class CBucket * __thiscall CLKRLinearHashTable::_Bucket(unsigned long)const",
    "public: void const * __thiscall CLKRHashTable_Iterator::Record(void)const",
    "private: static class CLockedDoubleList CLKRLinearHashTable::sm_llGlobalList",
    "public: bool __thiscall CCritSec::ReadOrWriteLock(void)",
    "private: void __thiscall CLKRLinearHashTable::_BucketLock(class CBucket * const,enum LK_LOCKTYPE)const",
    "public: bool __thiscall CLKRHashTable::Erase(class CLKRHashTable_Iterator &)",
    "protected: static double CReaderWriterLock::sm_dblDfltSpinAdjFctr",
    "private: class CLKRLinearHashTable * * __thiscall CLKRHashTable::_AllocateSubTableArray(unsigned int)",
    "public: void __thiscall CSmallSpinLock::WriteUnlock(void)",
    "private: class CSegment * & __thiscall CLKRLinearHashTable::_Segment(unsigned long)const",
    "public: void __thiscall CLKRHashTable::WriteLock(void)",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<6,2,2,1,3,2>::WaitType(void)",
    "private: bool __thiscall CReaderWriterLock3AR::_CmpExch(long,long)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_InsertRecord(void const *,unsigned long,bool,void const * *,class CLKRLinearHashTable_Iterator *)",
    "public: __thiscall CReaderWriterLock::~CReaderWriterLock(void)",
    "public: static double __stdcall CReaderWriterLock3::GetDefaultSpinAdjustmentFactor(void)",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<7,2,1,1,3,2>::MutexType(void)",
    "public: unsigned short __thiscall CSpinLock::GetSpinCount(void)const",
    "public: static unsigned short const * __stdcall CReaderWriterLock3::ClassName(void)",
    "public: bool __thiscall CFakeLock::IsReadLocked(void)const",
    "private: bool __thiscall CReaderWriterLock3AR::_TryReadLockRecursive(void)",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<7,2,1,1,3,2>::QueueType(void)",
    "public: void __thiscall CReaderWriterLock3AR::ReadOrWriteUnlock(bool)",
    "public: __thiscall CExFileOperation::~CExFileOperation(void)",
    "public: static void __cdecl CMdVersionInfo::ReleaseVersionInfo(void)",
    "public: __thiscall CExFileOperation::CExFileOperation(void)",
    "public: void __thiscall CCritSec::ConvertSharedToExclusive(void)",
    "UMSEnterCSWraper",
    "public: __thiscall CLockedSingleList::~CLockedSingleList(void)",
    "public: void __thiscall CLKRHashTable::ReadLock(void)const",
    "public: class CDoubleList & __thiscall CDoubleList::operator=(class CDoubleList const &)",
    "FXMemAttach",
    "public: bool __thiscall CReaderWriterLock::IsReadUnlocked(void)const",
    "const CLKRhashDefaultAllocator::`vftable'",
    "public: bool __thiscall CReaderWriterLock::TryReadLock(void)",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<5,2,2,1,3,2>::Recursion(void)",
    "public: void __thiscall CLKRHashTable::ConvertExclusiveToShared(void)const",
    "protected: static unsigned short CSmallSpinLock::sm_wDefaultSpinCount",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_SplitRecordSet(class CNodeClump *,class CNodeClump *,unsigned long,unsigned long,unsigned long,class CNodeClump *)",
    "public: unsigned short __thiscall CFakeLock::GetSpinCount(void)const",
    "private: void __thiscall CReaderWriterLock3::_LockSpin(enum CReaderWriterLock3::SPIN_TYPE)",
    "public: static int __cdecl CMdVersionInfo::IsWin98(void)",
    "protected: void __thiscall CLKRLinearHashTable_Iterator::_AddRef(int)const",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<1,1,3,1,3,2>::MutexType(void)",
    "public: class CListEntry const * __thiscall CDoubleList::HeadNode(void)const",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::FindKey(unsigned long,void const * *)const",
    "public: void __thiscall CDoubleList::InsertHead(class CListEntry * const)",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<3,1,1,1,1,1>::QueueType(void)",
    "public: unsigned long __thiscall CLKRLinearHashTable::ApplyIf(enum LK_PREDICATE (__stdcall*)(void const *,void *),enum LK_ACTION (__stdcall*)(void const *,void *),void *,enum LK_LOCKTYPE)",
    "public: void __thiscall CReaderWriterLock2::ConvertSharedToExclusive(void)",
    "public: __thiscall CLKRHashTableStats::CLKRHashTableStats(void)",
    "public: void __thiscall CReaderWriterLock2::WriteLock(void)",
    "public: void __thiscall CReaderWriterLock3::ReadOrWriteUnlock(bool)",
    "public: class CReaderWriterLock3AR & __thiscall CReaderWriterLock3AR::operator=(class CReaderWriterLock3AR const &)",
    "public: bool __thiscall CSmallSpinLock::SetSpinCount(unsigned short)",
    "private: bool __thiscall CReaderWriterLock3::_TryReadLock(void)",
    "public: void __thiscall CLKRHashTable::ReadUnlock(void)const",
    "private: class CSegment * __thiscall CLKRLinearHashTable::_AllocateSegment(void)const",
    "public: void __thiscall CLockedDoubleList::Unlock(void)",
    "public: void __thiscall CReaderWriterLock3AR::ConvertExclusiveToShared(void)",
    "public: bool __thiscall CLKRLinearHashTable::IsUsable(void)const",
    "private: class CNodeClump * __thiscall CLKRLinearHashTable::_AllocateNodeClump(void)",
    "MpHeapAlloc",
    "public: bool __thiscall CCritSec::IsWriteUnlocked(void)const",
    "private: bool __thiscall CReaderWriterLock2::_CmpExch(long,long)",
    "private: class CLKRLinearHashTable * __thiscall CLKRHashTable::_AllocateSubTable(char const *,unsigned long const (__stdcall*)(void const *),unsigned long (__stdcall*)(unsigned long),bool (__stdcall*)(unsigned long,unsigned long),void (__stdcall*)(void const *,int),double,unsigned long,class CLKRHashTable *,bool,bool)",
    "public: bool __thiscall CFakeLock::IsReadUnlocked(void)const",
    "private: void __thiscall CReaderWriterLock::_LockSpin(bool)",
    "public: bool __thiscall CSpinLock::SetSpinCount(unsigned short)",
    "public: bool __thiscall CLKRHashTable_Iterator::operator!=(class CLKRHashTable_Iterator const &)const",
    "public: bool __thiscall CReaderWriterLock::IsWriteLocked(void)const",
    "public: static int __cdecl CMdVersionInfo::IsWinNT(void)",
    "public: static void __stdcall CSpinLock::SetDefaultSpinCount(unsigned short)",
    "private: void __thiscall CReaderWriterLock3AR::_WriteLockSpin(void)",
    "public: void __thiscall CSpinLock::ReadOrWriteUnlock(bool)",
    "private: class CLKRLinearHashTable * __thiscall CLKRHashTable::_SubTable(unsigned long)const",
    "public: __thiscall CLKRHashTable_Iterator::CLKRHashTable_Iterator(void)",
    "public: static unsigned short const * __stdcall CReaderWriterLock::ClassName(void)",
    "_DllMain@12",
    "private: void __thiscall CLKRLinearHashTable::_TableUnlock(enum LK_LOCKTYPE)",
    "public: unsigned short __thiscall CCritSec::GetSpinCount(void)const",
    "public: void __thiscall CLKRLinearHashTable::WriteUnlock(void)const",
    "public: static enum LK_TABLESIZE __stdcall CLKRLinearHashTable::NumSubTables(unsigned long &,unsigned long &,bool)",
    "public: void __thiscall CLockedSingleList::Lock(void)",
    "public: bool __thiscall CLKRHashTable::IsReadLocked(void)const",
    "public: static void __stdcall CReaderWriterLock3AR::SetDefaultSpinCount(unsigned short)",
    "public: unsigned short __thiscall CReaderWriterLock::GetSpinCount(void)const",
    "public: void __thiscall CLockedSingleList::Push(class CSingleListEntry * const)",
    "public: bool __thiscall CLockedDoubleList::IsUnlocked(void)const",
    "public: bool __thiscall CLKRLinearHashTable::ValidSignature(void)const",
    "protected: static double CSmallSpinLock::sm_dblDfltSpinAdjFctr",
    "public: void __thiscall CFakeLock::WriteLock(void)",
    "public: void __thiscall CLKRLinearHashTable::ConvertSharedToExclusive(void)const",
    "public: void __thiscall CLKRHashTable::SetBucketLockSpinCount(unsigned short)",
    "public: long __thiscall CEXAutoBackupFile::RestoreFile(void)",
    "public: bool __thiscall CLKRLinearHashTable::Find(unsigned long,class CLKRLinearHashTable_Iterator &)",
    "public: bool __thiscall CReaderWriterLock2::IsWriteUnlocked(void)const",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<5,2,2,1,3,2>::MutexType(void)",
    "public: bool __thiscall CLKRLinearHashTable_Iterator::IsValid(void)const",
    "private: bool __thiscall CReaderWriterLock2::_TryReadLock(void)",
    "public: bool __thiscall CLockedSingleList::IsLocked(void)const",
    "public: void __thiscall CLockedSingleList::Unlock(void)",
    "public: __thiscall CLKRLinearHashTable_Iterator::~CLKRLinearHashTable_Iterator(void)",
    "public: static void __stdcall CFakeLock::SetDefaultSpinCount(unsigned short)",
    "protected: static double CReaderWriterLock3::sm_dblDfltSpinAdjFctr",
    "public: bool __thiscall CLockedDoubleList::IsEmpty(void)const",
    "public: bool __thiscall CLKRHashTable::EqualRange(unsigned long,class CLKRHashTable_Iterator &,class CLKRHashTable_Iterator &)",
    "public: static unsigned short const * __stdcall CSpinLock::ClassName(void)",
    "public: class CFakeLock & __thiscall CFakeLock::operator=(class CFakeLock const &)",
    "SetIUMS",
    "private: unsigned long __thiscall CLKRLinearHashTable::_Apply(enum LK_ACTION (__stdcall*)(void const *,void *),void *,enum LK_LOCKTYPE,enum LK_PREDICATE &)",
    "public: bool __thiscall CLKRHashTable_Iterator::IsValid(void)const",
    "private: unsigned long const __thiscall CLKRHashTable::_ExtractKey(void const *)const",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<5,2,2,1,3,2>::PerLockSpin(void)",
    "private: void __thiscall CSpinLock::_LockSpin(void)",
    "public: static unsigned long __stdcall CCritSec::SetSpinCount(class CCriticalSection * *,unsigned long)",
    "public: void __thiscall CCritSec::ReadOrWriteUnlock(bool)",
    "public: static unsigned short __stdcall CReaderWriterLock3AR::GetDefaultSpinCount(void)",
    "public: void __thiscall CLockedDoubleList::Lock(void)",
    "protected: static double CReaderWriterLock2::sm_dblDfltSpinAdjFctr",
    "private: bool __thiscall CReaderWriterLock3::_TryWriteLock(long)",
    "private: bool __thiscall CLKRLinearHashTable::_FreeNodeClump(class CNodeClump *)",
    "public: bool __thiscall CReaderWriterLock3AR::ReadOrWriteLock(void)",
    "MpHeapReAlloc",
    "public: class CListEntry * __thiscall CLockedDoubleList::RemoveHead(void)",
    "public: class CLKRHashTable_Iterator __thiscall CLKRHashTable::Begin(void)",
    "public: class CLockBase<7,2,1,1,3,2> & __thiscall CLockBase<7,2,1,1,3,2>::operator=(class CLockBase<7,2,1,1,3,2> const &)",
    "public: __thiscall CDoubleList::CDoubleList(void)",
    "public: bool __thiscall CLKRHashTable::MultiKeys(void)const",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::DeleteRecord(void const *)",
    "private: bool __thiscall CLKRLinearHashTable::_Erase(class CLKRLinearHashTable_Iterator &,unsigned long)",
    "public: __thiscall CEXAutoBackupFile::CEXAutoBackupFile(void)",
    "public: void __thiscall CSpinLock::WriteLock(void)",
    "private: long __thiscall CExFileOperation::_setFileSecurity(unsigned short const *)",
    "protected: bool __thiscall CLKRHashTable_Iterator::_Increment(bool)",
    "public: static int __cdecl CMdVersionInfo::IsWin9x(void)",
    "public: static void __stdcall CReaderWriterLock::SetDefaultSpinCount(unsigned short)",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<1,1,3,1,3,2>::LockType(void)",
    "private: void __thiscall CReaderWriterLock2::_ReadLockSpin(void)",
    "private: void __thiscall CLKRLinearHashTable::_BucketUnlock(class CBucket * const,enum LK_LOCKTYPE)const",
    "private: bool __thiscall CLKRHashTable::_IsValidIterator(class CLKRHashTable_Iterator const &)const",
    "public: int __thiscall CLKRLinearHashTable::NumSubTables(void)const",
    "public: bool __thiscall CCritSec::IsWriteLocked(void)const",
    "public: bool __thiscall CLKRHashTable::Insert(void const *,class CLKRHashTable_Iterator &,bool)",
    "public: int __thiscall CLKRLinearHashTable::CheckTable(void)const",
    "public: static void __stdcall CCritSec::SetDefaultSpinCount(unsigned short)",
    "public: bool __thiscall CLKRHashTable_Iterator::operator==(class CLKRHashTable_Iterator const &)const",
    "public: class CLockBase<4,1,1,2,3,3> & __thiscall CLockBase<4,1,1,2,3,3>::operator=(class CLockBase<4,1,1,2,3,3> const &)",
    "public: void __thiscall CReaderWriterLock::ReadLock(void)",
    "public: unsigned short __thiscall CLKRHashTable::GetTableLockSpinCount(void)const",
    "public: void __thiscall CSpinLock::ConvertSharedToExclusive(void)",
    "public: void __thiscall CLockedDoubleList::RemoveEntry(class CListEntry * const)",
    "MPDeleteCriticalSection",
    "private: void __thiscall CLKRHashTable::_InsertThisIntoGlobalList(void)",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::DeleteRecord(void const *)",
    "public: bool __thiscall CLockedDoubleList::IsLocked(void)const",
    "public: class CSingleListEntry * __thiscall CLockedSingleList::Pop(void)",
    "public: static unsigned short __stdcall CReaderWriterLock2::GetDefaultSpinCount(void)",
    "public: unsigned short __thiscall CLKRLinearHashTable::GetTableLockSpinCount(void)const",
    "public: class CSingleList & __thiscall CSingleList::operator=(class CSingleList const &)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_MergeRecordSets(class CBucket *,class CNodeClump *,class CNodeClump *)",
    "public: bool __thiscall CDoubleList::IsEmpty(void)const",
    "public: __thiscall CCritSec::CCritSec(void)",
    "MpGetHeapHandle",
    "public: bool __thiscall CLKRLinearHashTable::Insert(void const *,class CLKRLinearHashTable_Iterator &,bool)",
    "public: void __thiscall CSingleList::Push(class CSingleListEntry * const)",
    "private: bool __thiscall CReaderWriterLock::_TryReadLock(void)",
    "public: static double __stdcall CReaderWriterLock::GetDefaultSpinAdjustmentFactor(void)",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::FindRecord(void const *)const",
    "public: class CListEntry * __thiscall CLockedDoubleList::Last(void)",
    "public: void __thiscall CReaderWriterLock::WriteLock(void)",
    "public: bool __thiscall CFakeLock::TryReadLock(void)",
    "public: bool __thiscall CReaderWriterLock3::TryConvertSharedToExclusive(void)",
    "public: class CListEntry const * __thiscall CLockedDoubleList::HeadNode(void)const",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::DeleteKey(unsigned long)",
    "private: void __thiscall CReaderWriterLock3::_WriteLockSpin(void)",
    "public: static void __stdcall CReaderWriterLock::SetDefaultSpinAdjustmentFactor(double)",
    "public: __thiscall CSpinLock::CSpinLock(void)",
    "public: int __thiscall CEXAutoBackupFile::fHaveBackup(void)",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<2,1,1,1,3,2>::Recursion(void)",
    "private: long __thiscall CExFileOperation::_getFileSecurity(unsigned short const *)",
    "public: bool __thiscall CLKRHashTable::ValidSignature(void)const",
    "protected: static unsigned short CReaderWriterLock3AR::sm_wDefaultSpinCount",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::FindRecord(void const *)const",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<8,2,1,1,3,2>::MutexType(void)",
    "public: class CLKRLinearHashTable_Iterator __thiscall CLKRLinearHashTable::End(void)",
    "public: long __thiscall CExFileOperation::FODeleteFile(unsigned short const *)",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<3,1,1,1,1,1>::PerLockSpin(void)",
    "public: void __thiscall CFakeLock::ReadUnlock(void)",
    "public: static double __stdcall CSmallSpinLock::GetDefaultSpinAdjustmentFactor(void)",
    "public: static unsigned short const * __stdcall CCritSec::ClassName(void)",
    "public: unsigned short __thiscall CReaderWriterLock3AR::GetSpinCount(void)const",
    "public: static unsigned short const * __stdcall CLKRHashTable::ClassName(void)",
    "public: bool __thiscall CReaderWriterLock3AR::SetSpinCount(unsigned short)",
    "public: class CListEntry * __thiscall CDoubleList::Last(void)const",
    "mpMalloc",
    "public: bool __thiscall CCritSec::TryReadLock(void)",
    "protected: static double CReaderWriterLock3AR::sm_dblDfltSpinAdjFctr",
    "public: int __thiscall CEXAutoBackupFile::GetBackupFile(unsigned short * *)",
    "MpHeapSize",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<4,1,1,2,3,3>::QueueType(void)",
    "SetMemHook",
    "public: class CSingleListEntry * __thiscall CSingleList::Pop(void)",
    "public: class CReaderWriterLock2 & __thiscall CReaderWriterLock2::operator=(class CReaderWriterLock2 const &)",
    "public: static unsigned short const * __stdcall CReaderWriterLock2::ClassName(void)",
    "public: __thiscall CReaderWriterLock3AR::CReaderWriterLock3AR(void)",
    "public: void __thiscall CSpinLock::ReadLock(void)",
    "public: bool __thiscall CReaderWriterLock2::IsReadLocked(void)const",
    "public: bool __thiscall CReaderWriterLock3::IsReadLocked(void)const",
    "public: __thiscall CLKRHashTable::CLKRHashTable(char const *,unsigned long const (__stdcall*)(void const *),unsigned long (__stdcall*)(unsigned long),bool (__stdcall*)(unsigned long,unsigned long),void (__stdcall*)(void const *,int),double,unsigned long,unsigned long,bool,bool,class CLKRhashAllocator *)",
    "MPCSInitialize",
    "public: bool __thiscall CLKRLinearHashTable::MultiKeys(void)const",
    "public: static unsigned short __stdcall CReaderWriterLock3::GetDefaultSpinCount(void)",
    "public: bool __thiscall CSpinLock::IsWriteLocked(void)const",
    "private: unsigned long __thiscall CLKRLinearHashTable::_CalcKeyHash(unsigned long)const",
    "public: long __thiscall CEXAutoBackupFile::BackupFile(unsigned short const *)",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<8,2,1,1,3,2>::PerLockSpin(void)",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<2,1,1,1,3,2>::WaitType(void)",
    "public: __thiscall CLockedDoubleList::CLockedDoubleList(void)",
    "private: unsigned long const __thiscall CLKRLinearHashTable::_ExtractKey(void const *)const",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<2,1,1,1,3,2>::QueueType(void)",
    "DllBidEntryPoint",
    "public: __thiscall CFakeLock::~CFakeLock(void)",
    "public: void __thiscall CReaderWriterLock3::ConvertSharedToExclusive(void)",
    "private: bool __thiscall CLKRLinearHashTable::_DeleteNode(class CBucket * const,class CNodeClump * &,class CNodeClump * &,int &)",
    "public: static unsigned short __stdcall CSpinLock::GetDefaultSpinCount(void)",
    "private: bool __thiscall CSmallSpinLock::_TryLock(void)",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<4,1,1,2,3,3>::LockType(void)",
    "public: void __thiscall CLKRLinearHashTable::ConvertExclusiveToShared(void)const",
    "public: __thiscall CSingleList::CSingleList(void)",
    "public: class CLockedDoubleList & __thiscall CLockedDoubleList::operator=(class CLockedDoubleList const &)",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<3,1,1,1,1,1>::WaitType(void)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_DeleteKey(unsigned long,unsigned long)",
    "public: unsigned short __thiscall CReaderWriterLock2::GetSpinCount(void)const",
    "public: class CCritSec & __thiscall CCritSec::operator=(class CCritSec const &)",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<8,2,1,1,3,2>::Recursion(void)",
    "public: virtual void * __thiscall CLKRhashDefaultAllocator::Alloc(unsigned int,enum CLKRhashAllocator::Type)",
    "private: static unsigned long (__stdcall* CCriticalSection::sm_pfnSetCriticalSectionSpinCount)(struct _RTL_CRITICAL_SECTION *,unsigned long)",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<4,1,1,2,3,3>::Recursion(void)",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<2,1,1,1,3,2>::MutexType(void)",
    "protected: static unsigned short CFakeLock::sm_wDefaultSpinCount",
    "public: void __thiscall CReaderWriterLock::WriteUnlock(void)",
    "FXMemDetach",
    "public: unsigned long const __thiscall CLKRHashTable_Iterator::Key(void)const",
    "public: int __thiscall CLKRHashTable::NumSubTables(void)const",
    "public: static double __stdcall CReaderWriterLock3AR::GetDefaultSpinAdjustmentFactor(void)",
    "private: void __thiscall CLKRLinearHashTable::_TableLock(enum LK_LOCKTYPE)",
    "private: void __thiscall CReaderWriterLock3::_ReadLockSpin(enum CReaderWriterLock3::SPIN_TYPE)",
    "public: bool __thiscall CFakeLock::IsWriteLocked(void)const",
    "public: int __thiscall CLKRHashTable::CheckTable(void)const",
    "public: virtual unsigned short const * __thiscall CLKRhashDefaultAllocator::ClassName(void)",
    "public: unsigned long __thiscall CLKRLinearHashTable::Size(void)const",
    "public: class CEXAutoBackupFile & __thiscall CEXAutoBackupFile::operator=(class CEXAutoBackupFile const &)",
    "protected: static double CSpinLock::sm_dblDfltSpinAdjFctr",
    "public: bool __thiscall CCritSec::TryWriteLock(void)",
    "public: class CListEntry * __thiscall CDoubleList::First(void)const",
    "private: bool __thiscall CLKRHashTable::_FreeSubTableArray(class CLKRLinearHashTable * *)",
    "public: static void __stdcall CReaderWriterLock3::SetDefaultSpinAdjustmentFactor(double)",
    "public: bool __thiscall CReaderWriterLock3AR::IsReadUnlocked(void)const",
    "public: static int __cdecl CMdVersionInfo::IsWinNT4(void)",
    "private: unsigned long __thiscall CLKRLinearHashTable::_H1(unsigned long)const",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<1,1,3,1,3,2>::Recursion(void)",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<1,1,3,1,3,2>::WaitType(void)",
    "public: class CReaderWriterLock3 & __thiscall CReaderWriterLock3::operator=(class CReaderWriterLock3 const &)",
    "private: static long __stdcall CReaderWriterLock3AR::_CurrentThreadId(void)",
    "public: unsigned long __thiscall CLKRLinearHashTable::Apply(enum LK_ACTION (__stdcall*)(void const *,void *),void *,enum LK_LOCKTYPE)",
    "public: bool __thiscall CSpinLock::TryWriteLock(void)",
    "public: void __thiscall CCritSec::ConvertExclusiveToShared(void)",
    "public: void const * __thiscall CLKRLinearHashTable_Iterator::Record(void)const",
    "public: bool __thiscall CLKRLinearHashTable::EqualRange(unsigned long,class CLKRLinearHashTable_Iterator &,class CLKRLinearHashTable_Iterator &)",
    "public: class CLockBase<6,2,2,1,3,2> & __thiscall CLockBase<6,2,2,1,3,2>::operator=(class CLockBase<6,2,2,1,3,2> const &)",
    "public: unsigned long __thiscall CLKRLinearHashTable::DeleteIf(enum LK_PREDICATE (__stdcall*)(void const *,void *),void *)",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<3,1,1,1,1,1>::MutexType(void)",
    "public: __thiscall CLockedDoubleList::~CLockedDoubleList(void)",
    "private: bool __thiscall CReaderWriterLock3AR::_TryReadLock(void)",
    "public: bool __thiscall CSpinLock::IsWriteUnlocked(void)const",
    "private: static enum LK_PREDICATE __stdcall CLKRLinearHashTable::_PredTrue(void const *,void *)",
    "public: __thiscall CReaderWriterLock3AR::~CReaderWriterLock3AR(void)",
    "public: class CListEntry * __thiscall CLockedDoubleList::RemoveTail(void)",
    "private: class CDirEntry * __thiscall CLKRLinearHashTable::_AllocateSegmentDirectory(unsigned int)",
    "private: void __thiscall CLKRLinearHashTable::_BucketReadLock(class CBucket * const)const",
    "public: class CLKRHashTable_Iterator & __thiscall CLKRHashTable_Iterator::operator=(class CLKRHashTable_Iterator const &)",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::InsertRecord(void const *,bool,void const * *)",
    "public: __thiscall CReaderWriterLock2::CReaderWriterLock2(void)",
    "public: __thiscall CEXAutoBackupFile::CEXAutoBackupFile(unsigned short const *)",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<1,1,3,1,3,2>::QueueType(void)",
    "public: bool __thiscall CLKRHashTable::IsWriteUnlocked(void)const",
    "private: void __thiscall CLKRLinearHashTable::_BucketReadUnlock(class CBucket * const)const",
    "public: bool __thiscall CReaderWriterLock3AR::IsWriteUnlocked(void)const",
    "public: static void __stdcall CReaderWriterLock3AR::SetDefaultSpinAdjustmentFactor(double)",
    "private: void __thiscall CSpinLock::_Unlock(void)",
    "public: class CSmallSpinLock & __thiscall CSmallSpinLock::operator=(class CSmallSpinLock const &)",
    "private: int __thiscall CLKRLinearHashTable::_IsNodeCompact(class CBucket * const)const",
    "public: __thiscall CLKRHashTable_Iterator::~CLKRHashTable_Iterator(void)",
    "private: static unsigned long __stdcall CLKRLinearHashTable::_H1(unsigned long,unsigned long)",
    "public: static long __stdcall CLKRHashTableStats::BucketIndex(long)",
    "public: bool __thiscall CLKRLinearHashTable_Iterator::operator!=(class CLKRLinearHashTable_Iterator const &)const",
    "public: class CLockBase<3,1,1,1,1,1> & __thiscall CLockBase<3,1,1,1,1,1>::operator=(class CLockBase<3,1,1,1,1,1> const &)",
    "public: void __thiscall CSmallSpinLock::ConvertExclusiveToShared(void)",
    "public: class CListEntry * __thiscall CDoubleList::RemoveTail(void)",
    "public: bool __thiscall CSmallSpinLock::IsWriteLocked(void)const",
    "private: static int __cdecl CMdVersionInfo::InitializeVersionInfo(void)",
    "public: bool __thiscall CLKRLinearHashTable::IsReadLocked(void)const",
    "public: bool __thiscall CFakeLock::IsWriteUnlocked(void)const",
    "public: bool __thiscall CReaderWriterLock::TryWriteLock(void)",
    "public: bool __thiscall CFakeLock::SetSpinCount(unsigned short)",
    "public: void __thiscall CLKRLinearHashTable::ReadLock(void)const",
    "public: class CLockBase<5,2,2,1,3,2> & __thiscall CLockBase<5,2,2,1,3,2>::operator=(class CLockBase<5,2,2,1,3,2> const &)",
    "public: bool __thiscall CReaderWriterLock3AR::IsReadLocked(void)const",
    "private: void __thiscall CReaderWriterLock3AR::_LockSpin(enum CReaderWriterLock3AR::SPIN_TYPE)",
    "private: __thiscall CLKRLinearHashTable::CLKRLinearHashTable(char const *,unsigned long const (__stdcall*)(void const *),unsigned long (__stdcall*)(unsigned long),bool (__stdcall*)(unsigned long,unsigned long),void (__stdcall*)(void const *,int),double,unsigned long,class CLKRHashTable *,bool,bool,class CLKRhashAllocator *)",
    "public: void __thiscall CLKRHashTable::WriteUnlock(void)const",
    "public: class CLKRHashTableStats & __thiscall CLKRHashTableStats::operator=(class CLKRHashTableStats const &)",
    "public: unsigned short __thiscall CLKRHashTable::GetBucketLockSpinCount(void)const",
    "public: void __thiscall CLockedDoubleList::InsertHead(class CListEntry * const)",
    "private: bool __thiscall CSpinLock::_IsLocked(void)const",
    "private: static class CLKRhashDefaultAllocator CLKRHashTable::sm_DefaultAllocator",
    "protected: static unsigned short CReaderWriterLock::sm_wDefaultSpinCount",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<3,1,1,1,1,1>::LockType(void)",
    "public: __thiscall CReaderWriterLock3::CReaderWriterLock3(void)",
    "public: static void __stdcall CSpinLock::SetDefaultSpinAdjustmentFactor(double)",
    "protected: static unsigned short CCritSec::sm_wDefaultSpinCount",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<7,2,1,1,3,2>::PerLockSpin(void)",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<5,2,2,1,3,2>::QueueType(void)",
    "public: unsigned long __thiscall CLKRHashTable::DeleteIf(enum LK_PREDICATE (__stdcall*)(void const *,void *),void *)",
    "public: static unsigned short const * __stdcall CLKRLinearHashTable::ClassName(void)",
    "public: bool __thiscall CCritSec::IsReadLocked(void)const",
    "public: void __thiscall CFakeLock::ReadLock(void)",
    "public: void __thiscall CReaderWriterLock::ConvertExclusiveToShared(void)",
    "public: bool __thiscall CReaderWriterLock3AR::TryReadOrWriteLock(bool &)",
    "public: void __thiscall CCritSec::ReadLock(void)",
    "MPInitializeCriticalSectionAndSpinCount",
    "private: bool __thiscall CLKRLinearHashTable::_IsValidIterator(class CLKRLinearHashTable_Iterator const &)const",
    "public: void __thiscall CReaderWriterLock2::ReadLock(void)",
    "private: static unsigned long __stdcall CLKRLinearHashTable::_H0(unsigned long,unsigned long)",
    "private: unsigned long __thiscall CLKRLinearHashTable::_DeleteIf(enum LK_PREDICATE (__stdcall*)(void const *,void *),void *,enum LK_PREDICATE &)",
    "public: void __thiscall CReaderWriterLock3AR::ConvertSharedToExclusive(void)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_Expand(void)",
    "GetIUMS",
    "public: __thiscall CLKRLinearHashTable_Iterator::CLKRLinearHashTable_Iterator(class CLKRLinearHashTable_Iterator const &)",
    "public: bool __thiscall CLKRHashTable::IsValid(void)const",
    "public: static unsigned short const * __stdcall CSmallSpinLock::ClassName(void)",
    "public: void __thiscall CLockedDoubleList::InsertTail(class CListEntry * const)",
    "public: bool __thiscall CLKRLinearHashTable::Erase(class CLKRLinearHashTable_Iterator &)",
    "private: bool __thiscall CLKRHashTable::_FreeSubTable(class CLKRLinearHashTable *)",
    "public: bool __thiscall CLockedSingleList::IsUnlocked(void)const",
    "public: class CLKRHashTableStats __thiscall CLKRHashTable::GetStatistics(void)const",
    "public: void __thiscall CFakeLock::ConvertExclusiveToShared(void)",
    "public: void __thiscall CFakeLock::ReadOrWriteUnlock(bool)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_SetSegVars(enum LK_TABLESIZE,unsigned long)",
    "public: bool __thiscall CReaderWriterLock2::TryWriteLock(void)",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<5,2,2,1,3,2>::WaitType(void)",
    "public: static int __cdecl CMdVersionInfo::IsWin95(void)",
    "public: unsigned short __thiscall CReaderWriterLock3::GetSpinCount(void)const",
    "public: __thiscall CSmallSpinLock::CSmallSpinLock(void)",
    "public: bool __thiscall CSpinLock::IsReadLocked(void)const",
    "public: unsigned long const __thiscall CLKRLinearHashTable_Iterator::Key(void)const",
    "private: void __thiscall CLKRLinearHashTable::_AddRefRecord(void const *,int)const",
    "protected: __thiscall CLKRHashTable_Iterator::CLKRHashTable_Iterator(class CLKRHashTable *,short)",
    "public: bool __thiscall CSpinLock::ReadOrWriteLock(void)",
    "public: static void __stdcall CReaderWriterLock2::SetDefaultSpinCount(unsigned short)",
    "public: bool __thiscall CReaderWriterLock3::IsWriteUnlocked(void)const",
    "public: bool __thiscall CSmallSpinLock::TryWriteLock(void)",
    "protected: static unsigned short CReaderWriterLock3::sm_wDefaultSpinCount",
    "public: unsigned long __thiscall CLKRLinearHashTable::MaxSize(void)const",
    "public: void __thiscall CLKRHashTable::SetTableLockSpinCount(unsigned short)",
    "public: static unsigned short __stdcall CCritSec::GetDefaultSpinCount(void)",
    "public: bool __thiscall CReaderWriterLock3AR::TryReadLock(void)",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<6,2,2,1,3,2>::PerLockSpin(void)",
    "public: void __thiscall CReaderWriterLock::ReadUnlock(void)",
    "private: bool __thiscall CReaderWriterLock3::_TryWriteLock2(void)",
    "private: bool __thiscall CReaderWriterLock::_TryWriteLock(void)",
    "public: bool __thiscall CReaderWriterLock3::TryWriteLock(void)",
    "protected: static double CFakeLock::sm_dblDfltSpinAdjFctr",
    "protected: static unsigned short CSpinLock::sm_wDefaultSpinCount",
    "public: bool __thiscall CSmallSpinLock::IsReadUnlocked(void)const",
    "public: class CListEntry * __thiscall CLockedDoubleList::First(void)",
    "public: bool __thiscall CCritSec::SetSpinCount(unsigned short)",
    "private: bool __thiscall CLKRLinearHashTable::_FreeSegment(class CSegment *)const",
    "public: bool __thiscall CReaderWriterLock::IsReadLocked(void)const",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<6,2,2,1,3,2>::QueueType(void)",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<7,2,1,1,3,2>::WaitType(void)",
    "public: bool __thiscall CReaderWriterLock3::TryReadLock(void)",
    "public: unsigned short __thiscall CLKRLinearHashTable::GetBucketLockSpinCount(void)const",
    "public: bool __thiscall CReaderWriterLock::SetSpinCount(unsigned short)",
    "public: class CLKRHashTableStats __thiscall CLKRLinearHashTable::GetStatistics(void)const",
    "private: void __thiscall CLKRLinearHashTable::_BucketWriteLock(class CBucket * const)const",
    "private: void __thiscall CLKRLinearHashTable::_ReadOrWriteUnlock(bool)const",
    "public: bool __thiscall CLKRLinearHashTable::IsWriteUnlocked(void)const",
    "public: __thiscall CLKRLinearHashTable::~CLKRLinearHashTable(void)",
    "private: bool __thiscall CSpinLock::_TryLock(void)",
    "public: void __thiscall CLKRLinearHashTable::WriteLock(void)",
    "public: bool __thiscall CSmallSpinLock::TryReadLock(void)",
    "public: static double __stdcall CReaderWriterLock2::GetDefaultSpinAdjustmentFactor(void)",
    "public: __thiscall CLKRHashTable_Iterator::CLKRHashTable_Iterator(class CLKRHashTable_Iterator const &)",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<4,1,1,2,3,3>::PerLockSpin(void)",
    "public: bool __thiscall CReaderWriterLock2::SetSpinCount(unsigned short)",
    "public: void __thiscall CReaderWriterLock3AR::WriteLock(void)",
    "public: static int __cdecl CMdVersionInfo::IsWin98orLater(void)",
    "MpHeapFree",
    "unsigned long __cdecl MpHeapCompact(void *)",
    "public: void __thiscall CSmallSpinLock::ReadUnlock(void)",
    "private: unsigned long __thiscall CLKRLinearHashTable::_ApplyIf(enum LK_PREDICATE (__stdcall*)(void const *,void *),enum LK_ACTION (__stdcall*)(void const *,void *),void *,enum LK_LOCKTYPE,enum LK_PREDICATE &)",
    "public: __thiscall CLKRLinearHashTable::CLKRLinearHashTable(char const *,unsigned long const (__stdcall*)(void const *),unsigned long (__stdcall*)(unsigned long),bool (__stdcall*)(unsigned long,unsigned long),void (__stdcall*)(void const *,int),double,unsigned long,unsigned long,bool,bool,class CLKRhashAllocator *)",
    "private: static struct _OSVERSIONINFOW * CMdVersionInfo::sm_lpOSVERSIONINFO",
    "public: bool __thiscall CLKRHashTable::Find(unsigned long,class CLKRHashTable_Iterator &)",
    "MpHeapValidate",
    "public: static void __stdcall CReaderWriterLock2::SetDefaultSpinAdjustmentFactor(double)",
    "public: __thiscall CSingleList::~CSingleList(void)",
    "public: void __thiscall CReaderWriterLock3AR::WriteUnlock(void)",
    "_IrtlAssert@16",
    "public: unsigned long __thiscall CLKRHashTable::Apply(enum LK_ACTION (__stdcall*)(void const *,void *),void *,enum LK_LOCKTYPE)",
    "private: bool __thiscall CReaderWriterLock3::_TryReadLockRecursive(void)",
    "public: void __thiscall CLKRHashTable::Clear(void)",
    "MpHeapDestroy",
    "private: bool __thiscall CReaderWriterLock::_CmpExch(long,long)",
    "private: void __thiscall CLKRLinearHashTable::_Clear(bool)",
    "public: void __thiscall CFakeLock::ConvertSharedToExclusive(void)",
    "public: long __thiscall CExFileOperation::FOMoveFile(unsigned short const *,unsigned short const *)",
    "public: class CLockBase<8,2,1,1,3,2> & __thiscall CLockBase<8,2,1,1,3,2>::operator=(class CLockBase<8,2,1,1,3,2> const &)",
    "public: __thiscall CLKRLinearHashTable_Iterator::CLKRLinearHashTable_Iterator(void)",
    "public: void __thiscall CCritSec::ReadUnlock(void)",
    "public: __thiscall CLKRhashDefaultAllocator::CLKRhashDefaultAllocator(void)",
    "public: void __thiscall CLKRLinearHashTable::SetTableLockSpinCount(unsigned short)",
    "public: static void __stdcall CReaderWriterLock3::SetDefaultSpinCount(unsigned short)",
    "public: bool __thiscall CReaderWriterLock3AR::TryConvertSharedToExclusive(void)",
    "public: bool __thiscall CLKRHashTable::Erase(class CLKRHashTable_Iterator &,class CLKRHashTable_Iterator &)",
    "mpFree",
    "public: bool __thiscall CLKRLinearHashTable::IsValid(void)const",
    "public: static unsigned short __stdcall CFakeLock::GetDefaultSpinCount(void)",
    "private: void __thiscall CReaderWriterLock2::_LockSpin(bool)",
    "private: unsigned long __thiscall CLKRLinearHashTable::_SegIndex(unsigned long)const",
    "public: bool __thiscall CReaderWriterLock3::IsWriteLocked(void)const",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_Contract(void)",
    "MpHeapCreate",
    "public: __thiscall CLKRHashTable::~CLKRHashTable(void)",
    "public: __thiscall CSpinLock::~CSpinLock(void)",
    "public: static unsigned short const * __stdcall CReaderWriterLock3AR::ClassName(void)",
    "private: void __thiscall CReaderWriterLock::_WriteLockSpin(void)",
    "public: static unsigned short const * __stdcall CFakeLock::ClassName(void)",
    "public: class CReaderWriterLock & __thiscall CReaderWriterLock::operator=(class CReaderWriterLock const &)",
    "protected: static unsigned short CReaderWriterLock2::sm_wDefaultSpinCount",
    "private: bool __thiscall CReaderWriterLock3::_CmpExch(long,long)",
    "public: bool __thiscall CLockedSingleList::IsEmpty(void)const",
    "public: void __thiscall CSmallSpinLock::WriteLock(void)",
    "public: bool __thiscall CLKRLinearHashTable::IsReadUnlocked(void)const",
    "public: static void __stdcall CSmallSpinLock::SetDefaultSpinCount(unsigned short)",
    "public: static void __stdcall CFakeLock::SetDefaultSpinAdjustmentFactor(double)",
    "public: void __thiscall CSpinLock::WriteUnlock(void)",
    "public: static long __stdcall CLKRHashTableStats::BucketSize(long)",
    "_GetAllocCounters@0",
    "private: void __thiscall CReaderWriterLock3AR::_ReadLockSpin(enum CReaderWriterLock3AR::SPIN_TYPE)",
    "public: __thiscall CEXAutoBackupFile::~CEXAutoBackupFile(void)",
    "public: bool __thiscall CReaderWriterLock2::IsWriteLocked(void)const",
    "private: unsigned long __thiscall CLKRLinearHashTable::_BucketAddress(unsigned long)const",
    "MPInitializeCriticalSection",
    "public: __thiscall CSmallSpinLock::~CSmallSpinLock(void)",
    "public: static int __cdecl CMdVersionInfo::IsWin2korLater(void)",
    "private: unsigned long __thiscall CLKRHashTable::_CalcKeyHash(unsigned long)const",
    "public: bool __thiscall CReaderWriterLock2::IsReadUnlocked(void)const",
    "public: bool __thiscall CReaderWriterLock2::TryReadLock(void)",
    "public: bool __thiscall CSmallSpinLock::IsReadLocked(void)const",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<4,1,1,2,3,3>::MutexType(void)",
    "public: static unsigned short __stdcall CSmallSpinLock::GetDefaultSpinCount(void)",
    "private: bool __thiscall CReaderWriterLock3AR::_TryWriteLock2(void)",
    "private: class CBucket * __thiscall CLKRLinearHashTable::_FindBucket(unsigned long,bool)const",
    "public: void __thiscall CReaderWriterLock2::ReadUnlock(void)",
    "private: void __thiscall CLKRLinearHashTable::_RemoveThisFromGlobalList(void)",
    "public: class CLKRLinearHashTable_Iterator & __thiscall CLKRLinearHashTable_Iterator::operator=(class CLKRLinearHashTable_Iterator const &)",
    "public: enum LK_RETCODE __thiscall CLKRHashTable::DeleteKey(unsigned long)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_FindKey(unsigned long,unsigned long,void const * *,class CLKRLinearHashTable_Iterator *)const",
    "public: void __thiscall CReaderWriterLock3::ConvertExclusiveToShared(void)",
    "private: static class CLockedDoubleList CLKRHashTable::sm_llGlobalList",
    "public: bool __thiscall CSpinLock::IsReadUnlocked(void)const",
    "public: void __thiscall CLKRHashTable::ConvertSharedToExclusive(void)const",
    "public: static double __stdcall CSpinLock::GetDefaultSpinAdjustmentFactor(void)",
    "public: static long const * __stdcall CLKRHashTableStats::BucketSizes(void)",
    "public: bool __thiscall CLKRHashTable::IsWriteLocked(void)const",
    "private: bool __thiscall CLKRLinearHashTable::_EqualKeys(unsigned long,unsigned long)const",
    "public: virtual bool __thiscall CLKRhashDefaultAllocator::Free(void *,enum CLKRhashAllocator::Type)",
    "public: static unsigned short __stdcall CReaderWriterLock::GetDefaultSpinCount(void)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_DeleteRecord(void const *,unsigned long)",
    "public: bool __thiscall CCritSec::IsReadUnlocked(void)const",
    "IrtlTrace",
    "public: void __thiscall CReaderWriterLock3::ReadLock(void)",
    "public: bool __thiscall CReaderWriterLock::IsWriteUnlocked(void)const",
    "public: static enum LOCK_RECURSION __stdcall CLockBase<7,2,1,1,3,2>::Recursion(void)",
    "private: unsigned long __thiscall CLKRLinearHashTable::_H0(unsigned long)const",
    "public: bool __thiscall CSingleList::IsEmpty(void)const",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<6,2,2,1,3,2>::LockType(void)",
    "public: class CExFileOperation & __thiscall CExFileOperation::operator=(class CExFileOperation const &)",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<8,2,1,1,3,2>::WaitType(void)",
    "public: void __thiscall CReaderWriterLock2::ConvertExclusiveToShared(void)",
    "public: static int __cdecl CMdVersionInfo::IsWin2k(void)",
    "public: void __thiscall CReaderWriterLock2::WriteUnlock(void)",
    "private: void __thiscall CSmallSpinLock::_LockSpin(void)",
    "public: void __thiscall CSmallSpinLock::ConvertSharedToExclusive(void)",
    "private: void __thiscall CLKRLinearHashTable::_BucketWriteUnlock(class CBucket * const)const",
    "public: bool __thiscall CReaderWriterLock3::IsReadUnlocked(void)const",
    "public: bool __thiscall CSmallSpinLock::IsWriteUnlocked(void)const",
    "public: __thiscall CReaderWriterLock2::~CReaderWriterLock2(void)",
    "public: long __thiscall CExFileOperation::FOReplaceFile(unsigned short const *,unsigned short const *)",
    "public: void __thiscall CSingleList::Swap(class CSingleList &)",
    "public: void __thiscall CLKRLinearHashTable::Clear(void)",
    "public: bool __thiscall CLKRHashTable_Iterator::Increment(void)",
    "private: bool __thiscall CReaderWriterLock2::_TryWriteLock(long)",
    "protected: __thiscall CLKRLinearHashTable_Iterator::CLKRLinearHashTable_Iterator(class CLKRLinearHashTable *,class CNodeClump *,unsigned long,short)",
    "public: unsigned long __thiscall CLKRHashTable::ApplyIf(enum LK_PREDICATE (__stdcall*)(void const *,void *),enum LK_ACTION (__stdcall*)(void const *,void *),void *,enum LK_LOCKTYPE)",
    "public: void __thiscall CFakeLock::WriteUnlock(void)",
    "public: bool __thiscall CReaderWriterLock3AR::IsWriteLocked(void)const",
    "public: __thiscall CCritSec::~CCritSec(void)",
    "public: static enum LOCK_PERLOCK_SPIN __stdcall CLockBase<2,1,1,1,3,2>::PerLockSpin(void)",
    "public: bool __thiscall CSpinLock::TryReadLock(void)",
    "public: static void __stdcall CDoubleList::RemoveEntry(class CListEntry * const)",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<7,2,1,1,3,2>::LockType(void)",
    "public: class CLockBase<2,1,1,1,3,2> & __thiscall CLockBase<2,1,1,1,3,2>::operator=(class CLockBase<2,1,1,1,3,2> const &)",
    "public: static double __stdcall CCritSec::GetDefaultSpinAdjustmentFactor(void)",
    "public: void __thiscall CReaderWriterLock3::WriteUnlock(void)",
    "public: static enum LOCK_WAIT_TYPE __stdcall CLockBase<4,1,1,2,3,3>::WaitType(void)",
    "public: bool __thiscall CLKRLinearHashTable::Erase(class CLKRLinearHashTable_Iterator &,class CLKRLinearHashTable_Iterator &)",
    "public: bool __thiscall CLKRLinearHashTable_Iterator::Increment(void)",
    "public: void __thiscall CReaderWriterLock::ConvertSharedToExclusive(void)",
    "public: __thiscall CFakeLock::CFakeLock(void)",
    "public: long __thiscall CExFileOperation::FOCopyFileDACLS(unsigned short const *,unsigned short const *)",
    "public: bool __thiscall CReaderWriterLock3AR::TryWriteLock(void)",
    "public: void __thiscall CReaderWriterLock3::ReadUnlock(void)",
    "public: class CListEntry * __thiscall CDoubleList::RemoveHead(void)",
    "public: bool __thiscall CReaderWriterLock3::ReadOrWriteLock(void)",
    "public: bool __thiscall CReaderWriterLock3::SetSpinCount(unsigned short)",
    "public: unsigned long __thiscall CLKRHashTable::Size(void)const",
    "public: enum LK_RETCODE __thiscall CLKRLinearHashTable::InsertRecord(void const *,bool,void const * *)",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_FindRecord(void const *,unsigned long)const",
    "public: void __thiscall CReaderWriterLock3::WriteLock(void)",
    "public: bool __thiscall CFakeLock::TryWriteLock(void)",
    "public: unsigned long __thiscall CLKRHashTable::MaxSize(void)const",
    "public: bool __thiscall CReaderWriterLock3::TryReadOrWriteLock(bool &)",
    "protected: static double CCritSec::sm_dblDfltSpinAdjFctr",
    "private: void __thiscall CReaderWriterLock2::_WriteLockSpin(void)",
    "private: static long __stdcall CSpinLock::_CurrentThreadId(void)",
    "public: static void __stdcall CCritSec::SetDefaultSpinAdjustmentFactor(double)",
    "public: void __thiscall CDoubleList::InsertTail(class CListEntry * const)",
    "public: static void __stdcall CSmallSpinLock::SetDefaultSpinAdjustmentFactor(double)",
    "public: __thiscall CReaderWriterLock::CReaderWriterLock(void)",
    "public: class CLKRHashTable_Iterator __thiscall CLKRHashTable::End(void)",
    "public: static int __cdecl CMdVersionInfo::GetVersionExW(struct _OSVERSIONINFOW *)",
    "public: class CSpinLock & __thiscall CSpinLock::operator=(class CSpinLock const &)",
    "private: static long __stdcall CSmallSpinLock::_CurrentThreadId(void)",
    "protected: bool __thiscall CLKRLinearHashTable_Iterator::_Increment(bool)",
    "public: static enum LOCK_RW_MUTEX __stdcall CLockBase<6,2,2,1,3,2>::MutexType(void)",
    "mpCalloc",
    "mpRealloc",
    "private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_Initialize(unsigned long const (__stdcall*)(void const *),unsigned long (__stdcall*)(unsigned long),bool (__stdcall*)(unsigned long,unsigned long),void (__stdcall*)(void const *,int),char const *,double,unsigned long)",
    "public: void __thiscall CCritSec::WriteUnlock(void)",
    "public: void __thiscall CLKRLinearHashTable::SetBucketLockSpinCount(unsigned short)",
    "private: bool __thiscall CLKRLinearHashTable::_FreeSegmentDirectory(void)",
    "public: class CLKRLinearHashTable_Iterator __thiscall CLKRLinearHashTable::Begin(void)",
    "private: void __thiscall CLKRLinearHashTable::_InsertThisIntoGlobalList(void)",
    "public: __thiscall CDoubleList::~CDoubleList(void)",
    "MPCSUninitialize",
    "private: void __thiscall CLKRHashTable::_RemoveThisFromGlobalList(void)",
    "public: static enum LK_TABLESIZE __stdcall CLKRHashTable::NumSubTables(unsigned long &,unsigned long &,bool)",
    "public: class CLockedSingleList & __thiscall CLockedSingleList::operator=(class CLockedSingleList const &)",
    "public: bool __thiscall CLKRHashTable::IsUsable(void)const",
    "public: bool __thiscall CLKRLinearHashTable_Iterator::operator==(class CLKRLinearHashTable_Iterator const &)const",
    "public: unsigned short __thiscall CSmallSpinLock::GetSpinCount(void)const",
    "public: static enum LOCK_QUEUE_TYPE __stdcall CLockBase<8,2,1,1,3,2>::QueueType(void)",
    "public: bool __thiscall CLKRHashTable::IsReadUnlocked(void)const",
    "long __stdcall CreateHolder(struct IGPDispenser *,int,unsigned int,struct IGPHolder * *)",
    "public: bool __thiscall CFakeLock::ReadOrWriteLock(void)",
    "public: long __thiscall CExFileOperation::FOCopyFile(unsigned short const *,unsigned short const *,int)",
    "public: static enum LOCK_LOCKTYPE __stdcall CLockBase<8,2,1,1,3,2>::LockType(void)"
  ],
  "msdelta.dll": [
    "GetDeltaInfoA",
    "ApplyDeltaW",
    "GetDeltaInfoB",
    "ApplyDeltaProvidedB",
    "CreateDeltaW",
    "CreateDeltaA",
    "GetDeltaInfoW",
    "GetDeltaSignatureA",
    "CreateDeltaB",
    "GetDeltaSignatureB",
    "DeltaFree",
    "DeltaNormalizeProvidedB",
    "ApplyDeltaB",
    "GetDeltaSignatureW",
    "ApplyDeltaA"
  ],
  "msdmo.dll": [
    "MoFreeMediaType",
    "DMOStrToGuidW",
    "DMOStrToGuidA",
    "DMOGetTypes",
    "DMOGetName",
    "DMORegister",
    "DMOUnregister",
    "MoDuplicateMediaType",
    "DMOEnum",
    "MoCopyMediaType",
    "MoCreateMediaType",
    "DMOGuidToStrA",
    "DMOGuidToStrW",
    "MoInitMediaType",
    "MoDeleteMediaType"
  ],
  "msdri.dll": [
    "CoInstallerEntry",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "msdrm.dll": [
    "DRMGetIssuanceLicenseInfo",
    "DRMRegisterProtectedWindow",
    "DRMGetServiceLocation",
    "DRMSetUsagePolicy",
    "DRMAttest",
    "DRMCloseHandle",
    "DRMGetInfo",
    "DRMCreateEnablingPrincipal",
    "DRMClosePubHandle",
    "__AddMachineCertToLicenseStore",
    "DRMGetIssuanceLicenseTemplate",
    "DRMCheckSecurity",
    "DRMGetNameAndDescription",
    "DRMGetUsers",
    "DRMGetUnboundLicenseAttribute",
    "DRMLoadLibrary",
    "DRMGetBoundLicenseAttribute",
    "DRMDeconstructCertificateChain",
    "DRMGetUserRights",
    "DRMGetRightExtendedInfo",
    "DRMParseUnboundLicense",
    "DRMCreateClientSession",
    "DRMGetApplicationSpecificData",
    "DRMGetSecurityProvider",
    "DRMIsActivated",
    "DRMSetGlobalOptions",
    "DRMGetTime",
    "DRMCreateBoundLicense",
    "DRMAddLicense",
    "DRMCreateUser",
    "DRMGetProcAddress",
    "DRMConstructCertificateChain",
    "DRMSetRevocationPoint",
    "DllCanUnloadNow",
    "DRMGetUnboundLicenseObject",
    "DllGetClassObject",
    "DRMCreateIssuanceLicense",
    "DRMIsWindowProtected",
    "DRMGetBoundLicenseAttributeCount",
    "DRMCreateLicenseStorageSession",
    "DRMClearAllRights",
    "DRMRegisterRevocationList",
    "DRMGetBoundLicenseObject",
    "DRMGetUserInfo",
    "DRMAcquireAdvisories",
    "DRMGetEnvironmentInfo",
    "DRMAddRightWithUser",
    "DRMGetMetaData",
    "DRMSetIntervalTime",
    "DRMGetCertificateChainCount",
    "DRMRegisterContent",
    "DRMInitEnvironment",
    "DRMDecrypt",
    "DRMCloseSession",
    "DRMGetRightInfo",
    "DRMDuplicateHandle",
    "DRMDuplicateSession",
    "DRMAcquireIssuanceLicenseTemplate",
    "DRMEncrypt",
    "DRMGetSignedIssuanceLicense",
    "DRMDecode",
    "DRMSetMetaData",
    "DRMAcquireLicense",
    "DRMCreateEnablingBitsEncryptor",
    "DRMGetClientVersion",
    "DRMGetUnboundLicenseAttributeCount",
    "DRMVerify",
    "DRMCloseEnvironmentHandle",
    "DllRegisterServer",
    "DRMCreateRight",
    "DRMGetSignedIssuanceLicenseEx",
    "DRMDuplicateEnvironmentHandle",
    "DllUnregisterServer",
    "DRMCloseQueryHandle",
    "DRMDuplicatePubHandle",
    "DRMGetRevocationPoint",
    "DRMSetNameAndDescription",
    "DRMEnumerateLicense",
    "DRMRepair",
    "DRMGetIntervalTime",
    "DRMGetUnboundLicenseObjectCount",
    "DRMActivate",
    "DRMGetUsagePolicy",
    "DRMGetOwnerLicense",
    "DRMSetApplicationSpecificData",
    "DRMEncode",
    "DRMCreateEnablingBitsDecryptor",
    "DRMDeleteLicense",
    "DRMGetBoundLicenseObjectCount"
  ],
  "msdtcVSp1res.dll": "No exports",
  "msdtckrm.dll": [
    "KtmRmServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "msdtclog.dll": [
    "DllUnregisterServer",
    "int __stdcall DllGetDTCLOG(struct _GUID const &,struct _GUID const &,void * *)",
    "public: static void __stdcall CLogMgr::DeleteInstance(class CLogMgr *)",
    "DllGetDTCLOG2",
    "DllGetClassObject",
    "DllRegisterServer",
    "public: static long __stdcall CLogMgr::CreateInstance(class CLogMgr * *,struct IUnknown *)"
  ],
  "msdtcprx.dll": [
    "long __stdcall RemoveDtc(unsigned short *,unsigned short *,unsigned short *)",
    "DTC_XaClose",
    "DTC_XaEnd",
    "DTC_XaCommit",
    "CreateTmInstanceForRemoteAdmin",
    "long __stdcall InstallContacts(struct ITmInstance *)",
    "long __stdcall InstallDtc(struct ITmInstance *,unsigned short *,unsigned short *,unsigned short *,unsigned short *,unsigned long,unsigned long,unsigned short *,int)",
    "DllRegisterServer",
    "int __stdcall GetDtcLogPath(unsigned long,unsigned short *)",
    "DTC_XaPrepare",
    "public: static long __stdcall CTmProxyCore::CreateInstance(class CTmProxyCore * *,struct IUnknown *)",
    "DllUnregisterServer",
    "CreateLegacyTmInstance",
    "DTC_XaForget",
    "CreateRemoteProxyTmInstance",
    "UpgradeApplySuccess",
    "SysPrepDtcGeneralize",
    "SysPrepDtcCleanup",
    "DllGetDTCUtilObject",
    "DTC_XaRollback",
    "DllGetDTCProxy",
    "ContactToNameObject",
    "GetTmInstance",
    "DTC_XaRecover",
    "DTC_XaOpen",
    "DllGetDTCConnectionManager",
    "DTC_XaComplete",
    "ShutDownCM",
    "DTC_XaStart",
    "long __stdcall DeployDtc(void)",
    "long __stdcall InstallDtcClient(unsigned short *,unsigned long,unsigned long)",
    "DllGetClassObject",
    "SysPrepDtcSpecialize",
    "CreateLocalTmInstance",
    "public: static long __stdcall CNameService::Create(class CNameService * *)",
    "DllGetTransactionManagerCore"
  ],
  "msdtctm.dll": [
    "ASCWrapClassFactory",
    "DtcMainExt",
    "ASCDefer",
    "_GetTipFunctionalityWorking@0",
    "ASCWrapObject",
    "ASCDeliverDeferred",
    "_SetTipFunctionalityWorking@4",
    "DllGetClassObject",
    "ASCGetSafeReference",
    "public: static long __stdcall CTm::CreateInstance(class CTm * *,struct IUnknown *)"
  ],
  "msdtcuiu.dll": [
    "DtcPerfCollect",
    "DtcPerfOpen",
    "DtcPerfClose",
    "DllUnregisterServer",
    "DllGetClassObject",
    "PerfDllRegisterServer",
    "DllRegisterServer"
  ],
  "msexch40.dll": [
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msexcl40.dll": [
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msfeeds.dll": [
    "MsfeedsCreateInstance",
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "msfeedsbs.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "msftedit.dll": [
    "RichEditANSIWndProc",
    "IID_ITextHost",
    "IID_ITextHost2",
    "RichComboBoxWndProc",
    "RichEdit10ANSIWndProc",
    "RichListBoxWndProc",
    "SetCustomTextOutHandlerEx",
    "RichEditWndProc",
    "CreateTextServices",
    "IID_IRichEditOleCallback",
    "IID_IRichEditOle",
    "REExtendedRegisterClass",
    "DllGetVersion",
    "IID_ITextServices"
  ],
  "mshtml.dll": [
    "PrintHTML",
    "IERegisterXMLNS",
    "DllCanUnloadNow",
    "CreateHTMLPropertyPage",
    "RunHTMLApplication",
    "ShowHTMLDialogEx",
    "IEIsXMLNSRegistered",
    "MatchExactGetIDsOfNames",
    "DllEnumClassObjects",
    "DllGetClassObject",
    "ShowHTMLDialog",
    "ConvertAndEscapePostData",
    "ShowModelessHTMLDialog",
    "ClearPhishingFilterData",
    "ShowModalDialog"
  ],
  "mshtmled.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllEnumClassObjects",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "mshtmler.dll": "No exports",
  "msi.dll": [
    "MsiRecordSetStreamA",
    "MsiGetComponentStateW",
    "MsiConfigureFeatureA",
    "MsiDatabaseGetPrimaryKeysA",
    "MsiGetComponentPathW",
    "MsiGetFeatureValidStatesA",
    "MsiDeterminePatchSequenceA",
    "MsiFormatRecordW",
    "MsiApplyMultiplePatchesW",
    "MsiGetPatchFileListA",
    "MsiDatabaseGenerateTransformA",
    "MsiGetShortcutTargetA",
    "MsiProvideAssemblyA",
    "MsiConfigureProductW",
    "MsiQueryFeatureStateExA",
    "MsiGetProductInfoW",
    "MsiGetFeatureStateA",
    "MsiProvideComponentA",
    "MsiConfigureProductExW",
    "MsiInvalidateFeatureCache",
    "MsiSourceListAddMediaDiskA",
    "MsiSourceListEnumMediaDisksA",
    "MsiSourceListEnumSourcesA",
    "MsiSourceListGetInfoW",
    "MsiSummaryInfoSetPropertyA",
    "MsiViewClose",
    "MsiInstallProductW",
    "MsiEnumComponentsW",
    "MsiDeleteUserDataA",
    "MsiEnumComponentCostsW",
    "MsiAdvertiseScriptA",
    "MsiGetPatchInfoW",
    "MsiProvideQualifiedComponentW",
    "MsiVerifyPackageW",
    "MsiUseFeatureA",
    "MsiSummaryInfoGetPropertyA",
    "MsiDatabaseIsTablePersistentW",
    "MsiSetInstallLevel",
    "MsiRecordDataSize",
    "MsiSetTargetPathW",
    "MsiDetermineApplicablePatchesA",
    "MsiProcessAdvertiseScriptA",
    "MsiSummaryInfoGetPropertyCount",
    "MsiGetComponentPathA",
    "MsiEnableLogA",
    "MsiRecordSetInteger",
    "MsiCreateAndVerifyInstallerDirectory",
    "MsiEnableLogW",
    "MsiGetProductInfoExA",
    "MsiGetSourcePathW",
    "MsiDatabaseGenerateTransformW",
    "MsiCreateRecord",
    "MsiCollectUserInfoA",
    "MsiGetComponentPathExA",
    "MsiGetFileHashA",
    "MsiCollectUserInfoW",
    "MsiCloseAllHandles",
    "MsiGetProductInfoExW",
    "MsiGetUserInfoW",
    "Migrate10CachedPackagesA",
    "MsiOpenDatabaseA",
    "MsiOpenDatabaseW",
    "MsiPreviewDialogA",
    "MsiAdvertiseProductExA",
    "MsiGetShortcutTargetW",
    "MsiSetTargetPathA",
    "MsiProvideQualifiedComponentExW",
    "MsiVerifyDiskSpace",
    "MsiGetLastErrorRecord",
    "MsiQueryComponentStateA",
    "MsiProvideComponentFromDescriptorW",
    "MsiGetFileSignatureInformationA",
    "MsiSetPropertyA",
    "MsiViewModify",
    "MsiInstallMissingFileA",
    "MsiDeleteUserDataW",
    "MsiEndTransaction",
    "MsiGetPatchInfoExW",
    "MsiConfigureProductExA",
    "MsiLoadStringW",
    "MsiGetPropertyA",
    "MsiSourceListClearSourceW",
    "MsiRecordReadStream",
    "MsiRecordSetStringW",
    "MsiGetFileVersionW",
    "MsiVerifyPackageA",
    "MsiEnumProductsA",
    "MsiSourceListForceResolutionExW",
    "MsiNotifySidChangeA",
    "MsiEnumProductsW",
    "MsiGetTargetPathA",
    "MsiSummaryInfoSetPropertyW",
    "MsiGetFeatureStateW",
    "MsiInstallMissingComponentA",
    "MsiSetOfflineContextW",
    "MsiDecomposeDescriptorW",
    "MsiOpenPackageExA",
    "MsiSourceListAddSourceA",
    "MsiSourceListClearMediaDiskA",
    "MsiSetExternalUIRecord",
    "MsiGetProductInfoFromScriptA",
    "MsiEvaluateConditionW",
    "MsiGetProductPropertyW",
    "MsiRecordGetStringA",
    "MsiBeginTransactionA",
    "MsiGetFileVersionA",
    "QueryInstanceCount",
    "MsiMessageBoxA",
    "MsiApplyPatchW",
    "MsiUseFeatureExA",
    "MsiGetProductPropertyA",
    "MsiProvideQualifiedComponentA",
    "MsiViewGetColumnInfo",
    "MsiEnumFeaturesA",
    "MsiEnumClientsW",
    "MsiEnumProductsExW",
    "MsiFormatRecordA",
    "MsiGetPropertyW",
    "MsiCloseHandle",
    "MsiEnumRelatedProductsA",
    "MsiGetFileHashW",
    "MsiOpenPackageA",
    "MsiGetLanguage",
    "MsiExtractPatchXMLDataW",
    "MsiPreviewDialogW",
    "MsiReinstallFeatureFromDescriptorW",
    "MsiApplyPatchA",
    "MsiEnumRelatedProductsW",
    "MsiGetFeatureInfoW",
    "MsiDatabaseMergeA",
    "MsiGetFileSignatureInformationW",
    "MsiRemovePatchesW",
    "MsiInstallProductA",
    "MsiQueryFeatureStateFromDescriptorA",
    "MsiReinstallProductW",
    "MsiSourceListAddSourceW",
    "MsiBeginTransactionW",
    "MsiConfigureFeatureFromDescriptorW",
    "MsiConfigureProductA",
    "MsiRecordSetStringA",
    "MsiDeterminePatchSequenceW",
    "MsiEnumClientsExA",
    "MsiSetFeatureStateW",
    "MsiUseFeatureW",
    "MsiSourceListClearAllW",
    "MsiInstallMissingComponentW",
    "MsiSourceListClearAllA",
    "MsiSourceListSetInfoA",
    "MsiProvideQualifiedComponentExA",
    "MsiSourceListClearAllExW",
    "MsiConfigureFeatureFromDescriptorA",
    "MsiGetSourcePathA",
    "MsiGetProductCodeW",
    "DllCanUnloadNow",
    "MsiUseFeatureExW",
    "MsiReinstallProductA",
    "MsiEnumPatchesExA",
    "MsiApplyMultiplePatchesA",
    "MsiEnableUIPreview",
    "MsiMessageBoxExA",
    "DllGetClassObject",
    "MsiViewGetErrorA",
    "MsiEnumComponentCostsA",
    "MsiReinstallFeatureA",
    "MsiGetPatchInfoExA",
    "MsiConfigureFeatureW",
    "MsiViewFetch",
    "MsiRecordGetInteger",
    "MsiGetComponentPathExW",
    "MsiSetComponentStateA",
    "MsiSourceListEnumSourcesW",
    "MsiProvideComponentW",
    "MsiDecomposeDescriptorA",
    "MsiGetFeatureCostW",
    "MsiSetFeatureAttributesA",
    "MsiSummaryInfoPersist",
    "MsiOpenPackageW",
    "MsiSourceListGetInfoA",
    "MsiDatabaseIsTablePersistentA",
    "MsiEnumClientsA",
    "MsiEnumFeaturesW",
    "MsiReinstallFeatureW",
    "MsiDatabaseOpenViewA",
    "MsiSetComponentStateW",
    "MsiDatabaseImportW",
    "MsiLoadStringA",
    "MsiDatabaseCommit",
    "MsiSetFeatureStateA",
    "MsiAdvertiseProductA",
    "MsiProcessMessage",
    "MsiGetDatabaseState",
    "MsiEnumClientsExW",
    "MsiGetProductInfoFromScriptW",
    "MsiSourceListForceResolutionExA",
    "MsiOpenPackageExW",
    "MsiSourceListAddMediaDiskW",
    "MsiSourceListClearMediaDiskW",
    "MsiDatabaseApplyTransformA",
    "MsiDatabaseImportA",
    "MsiGetComponentStateA",
    "MsiGetFeatureInfoA",
    "MsiDatabaseOpenViewW",
    "MsiGetFeatureUsageW",
    "MsiGetProductCodeFromPackageCodeA",
    "MsiGetProductInfoA",
    "MsiInstallMissingFileW",
    "MsiLocateComponentA",
    "MsiSetFeatureAttributesW",
    "DllGetVersion",
    "MsiSetPropertyW",
    "MsiSourceListAddSourceExA",
    "MsiGetTargetPathW",
    "MsiSetExternalUIA",
    "MsiIsProductElevatedW",
    "MsiProvideAssemblyW",
    "MsiCreateTransformSummaryInfoA",
    "MsiPreviewBillboardA",
    "Migrate10CachedPackagesW",
    "MsiDatabaseMergeW",
    "MsiRecordGetStringW",
    "MsiAdvertiseScriptW",
    "MsiEnumComponentQualifiersW",
    "MsiCreateTransformSummaryInfoW",
    "MsiGetSummaryInformationA",
    "MsiMessageBoxExW",
    "MsiEnumPatchesExW",
    "MsiRecordIsNull",
    "MsiQueryFeatureStateExW",
    "MsiQueryComponentStateW",
    "MsiRecordClearData",
    "MsiEvaluateConditionA",
    "MsiSequenceA",
    "MsiGetUserInfoA",
    "MsiProvideComponentFromDescriptorA",
    "MsiDatabaseExportA",
    "MsiEnumComponentQualifiersA",
    "MsiSetInternalUI",
    "MsiSourceListEnumMediaDisksW",
    "MsiQueryFeatureStateA",
    "MsiMessageBoxW",
    "MsiSourceListForceResolutionA",
    "MsiAdvertiseProductW",
    "MsiGetActiveDatabase",
    "MsiSourceListClearSourceA",
    "MsiReinstallFeatureFromDescriptorA",
    "DllRegisterServer",
    "MsiDatabaseApplyTransformW",
    "MsiEnumComponentsExA",
    "MsiSourceListSetInfoW",
    "MsiIsProductElevatedA",
    "MsiEnumProductsExA",
    "MsiEnumComponentsA",
    "MsiGetProductCodeA",
    "DllUnregisterServer",
    "MsiSetMode",
    "MsiDetermineApplicablePatchesW",
    "MsiRecordGetFieldCount",
    "MsiGetSummaryInformationW",
    "MsiOpenProductW",
    "MsiPreviewBillboardW",
    "MsiExtractPatchXMLDataA",
    "MsiSourceListClearAllExA",
    "MsiAdvertiseProductExW",
    "MsiEnumComponentsExW",
    "MsiQueryFeatureStateFromDescriptorW",
    "MsiEnumPatchesW",
    "MsiProcessAdvertiseScriptW",
    "MsiGetFeatureCostA",
    "MsiJoinTransaction",
    "MsiEnumPatchesA",
    "MsiViewGetErrorW",
    "MsiGetMode",
    "MsiNotifySidChangeW",
    "MsiDatabaseExportW",
    "MsiGetPatchInfoA",
    "MsiSequenceW",
    "MsiSetExternalUIW",
    "MsiDoActionW",
    "MsiDoActionA",
    "MsiOpenProductA",
    "MsiQueryFeatureStateW",
    "MsiGetFeatureUsageA",
    "MsiGetPatchFileListW",
    "MsiQueryProductStateA",
    "MsiViewExecute",
    "MsiDatabaseGetPrimaryKeysW",
    "MsiGetFeatureValidStatesW",
    "MsiGetProductCodeFromPackageCodeW",
    "MsiQueryProductStateW",
    "MsiRemovePatchesA",
    "MsiSourceListAddSourceExW",
    "MsiSourceListForceResolutionW",
    "MsiRecordSetStreamW",
    "MsiSummaryInfoGetPropertyW",
    "MsiLocateComponentW"
  ],
  "msidcrl30.dll": [
    "BuildServiceTokenRequestEx",
    "RemovePersistedCredential",
    "VerifyCertificate",
    "CreateIdentityHandle",
    "CreatePassportAuthUIContext",
    "HasPersistedCredential",
    "PassportFreeMemory",
    "AuthIdentityToServiceEx",
    "LogonIdentity",
    "Uninitialize",
    "CloseIdentityHandle",
    "Initialize",
    "LogonIdentityEx",
    "GetAuthState",
    "GetIdentityPropertyByName",
    "SetIdentityCallback",
    "SetIdentityProperty",
    "SetCredential",
    "GetIdentityProperty",
    "class ATL::CStringT > > g_strResponse",
    "PutTokenResponseEx",
    "class ATL::CStringT > > g_strRequest",
    "GetPreferredAuthUIContextSize",
    "EnumIdentitiesWithCachedCredentials",
    "BuildAuthTokenRequestEx",
    "LogonIdentityWithUI",
    "CancelPendingRequest",
    "PutTokenResponse",
    "CloseEnumIdentitiesHandle",
    "GetAuthStateEx",
    "DestroyPassportAuthUIContext",
    "GetCertificate",
    "BuildAuthTokenRequest",
    "PersistCredential",
    "AuthIdentityToService",
    "BuildServiceTokenRequest",
    "InitializeEx",
    "MoveAuthUIContext",
    "NextIdentity",
    "GetWebAuthUrl"
  ],
  "msident.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "msidle.dll": "No exports",
  "msidntld.dll": "No exports",
  "msieftp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "msihnd.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "msiltcfg.dll": [
    "MsiReinstallProductW",
    "MsiProvideComponentFromDescriptorW",
    "MsiGetComponentPathW",
    "MsiSetInternalUI",
    "MsiAdvertiseScriptW",
    "MsiDecomposeDescriptorW",
    "MsiQueryProductStateW",
    "ShutdownMsi",
    "MsiGetProductInfoW",
    "RestartMsi",
    "MsiConfigureProductExW",
    "MsiQueryFeatureStateW",
    "MsiIsProductElevatedW",
    "MsiQueryFeatureStateFromDescriptorW"
  ],
  "msimg32.dll": [
    "GradientFill",
    "TransparentBlt",
    "AlphaBlend",
    "vSetDdrawflag",
    "DllInitialize"
  ],
  "msimsg.dll": "No exports",
  "msimtf.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "MsimtfIsGuidMapEnable",
    "DllGetClassObject",
    "MsimtfIsWindowFiltered",
    "DllRegisterServer"
  ],
  "msisip.dll": [
    "MsiSIPIsMyTypeOfFile",
    "MsiSIPRemoveSignedDataMsg",
    "DllUnregisterServer",
    "MsiSIPPutSignedDataMsg",
    "MsiSIPGetSignedDataMsg",
    "MsiSIPCreateIndirectData",
    "MsiSIPVerifyIndirectData",
    "DllRegisterServer"
  ],
  "msjet40.dll": [
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msjetoledb40.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "msjint40.dll": [
    "CchLszOfId2"
  ],
  "msjter40.dll": [
    "JetErrIDARawMessage",
    "JetErrFormattedMessage",
    "JetErrIDAForError",
    "JetErrRawMessage"
  ],
  "msjtes40.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "msls31.dll": [
    "LsCreateLine",
    "LsSetBreaking",
    "LsQueryFLineEmpty",
    "LsGetLineDur",
    "LsdnSetAbsBaseLine",
    "LsGetTatenakayokoLsimethods",
    "LsQueryLineCpPpoint",
    "LsGetRubyLsimethods",
    "LsSqueezeSubline",
    "LsGetHihLsimethods",
    "LsSetCompression",
    "LsMatchPresSubline",
    "LsdnResetPenNode",
    "LsDestroyLine",
    "LssbGetPlsrunsFromSubline",
    "LsdnResetObjDim",
    "LssbGetNumberDnodesInSubline",
    "LsFetchAppendToCurrentSublineResume",
    "LsGetReverseLsimethods",
    "LsCreateContext",
    "LsLwMultDivR",
    "LsExpandSubline",
    "LsdnModifyParaEnding",
    "LssbGetDurTrailWithPensInSubline",
    "LsdnFinishByPen",
    "LsdnFinishDeleteAll",
    "LsFinishCurrentSubline",
    "LsdnSubmitSublines",
    "LsdnSetRigidDup",
    "LsPointUV2FromPointUV1",
    "LsEnumLine",
    "LsDisplaySubline",
    "LsQueryCpPpointSubline",
    "LsDisplayLine",
    "LssbFDonePresSubline",
    "LsdnFinishRegular",
    "LsdnDistribute",
    "LsAppendRunToCurrentSubline",
    "LsGetSpecialEffectsSubline",
    "LsSetBreakSubline",
    "LsGetMinDurBreaks",
    "LsFetchAppendToCurrentSubline",
    "LsGetWarichuLsimethods",
    "LsSetDoc",
    "LsQueryTextCellDetails",
    "LsdnSkipCurTab",
    "LssbFIsSublineEmpty",
    "LssbGetDurTrailInSubline",
    "LsTruncateSubline",
    "LsEnumSubline",
    "LsdnGetFormatDepth",
    "LsSetExpansion",
    "LsdnFinishByOneChar",
    "LsdnResolvePrevTab",
    "LsSetModWidthPairs",
    "LsFindNextBreakSubline",
    "LsDestroySubline",
    "LsFindPrevBreakSubline",
    "LsPointXYFromPointUV",
    "LssbGetObjDimSubline",
    "LsDestroyContext",
    "LsdnGetCurTabInfo",
    "LssbGetVisibleDcpInSubline",
    "LsdnFinishRegularAddAdvancePen",
    "LsQueryLineDup",
    "LsModifyLineHeight",
    "LsdnFinishBySubline",
    "LsCreateSubline",
    "LssbGetDupSubline",
    "LsResetRMInCurrentSubline",
    "LssbFDoneDisplay",
    "LsCompressSubline",
    "LsdnGetDup",
    "LsdnFinishDelete",
    "LsdnQueryPenNode",
    "LsQueryPointPcpSubline",
    "LsdnQueryObjDimRange",
    "LsQueryLinePointPcp",
    "LsForceBreakSubline"
  ],
  "msltus40.dll": [
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msmmsp.dll": [
    "MountMgr_Generalize",
    "_DllMain@12",
    "unsigned long __stdcall MountMgr_Specialize(void)",
    "unsigned long __stdcall MountMgr_Cleanup(void)"
  ],
  "msmpeg2adec.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "msmpeg2vdec.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "public: long __thiscall CVIDEOfilter::GetSurface(int,unsigned char *,long)",
    "public: long __thiscall CVIDEOfilter::GetSurfaceSize(int,long *)",
    "public: long __thiscall CVIDEOfilter::LoadSurface(int,unsigned char *,unsigned long)",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "msnetobj.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "msobjs.dll": "No exports",
  "msoeacct.dll": [
    "PropUtil_HrAddBinaryToSTRW",
    "DllCanUnloadNow",
    "GetDllMajorVersion",
    "HrCreateAccountManager",
    "PropUtil_HrAddSZToSTRW",
    "PropUtil_HrAddDWORDToSTRW",
    "DllGetClassObject",
    "ValidEmailAddress"
  ],
  "msoert2.dll": [
    "UlStripWhitespace",
    "CreateNotify",
    "HrIsStreamUnicode",
    "UlStripWhitespaceW",
    "HrDecodeObject",
    "GenerateUniqueFileNameW",
    "DeleteTempFile",
    "HrCheckTridentMenu",
    "IUnknownList_CreateInstance",
    "HrCreateTridentMenu",
    "CreateLogFile",
    "GetHtmlCharset",
    "strtrim",
    "IVoidPtrList_CreateInstance",
    "MessageBoxInstW",
    "UpdateRebarBandColors",
    "IsPrint",
    "StrToUintW",
    "HrStreamSeekCur",
    "CreateTempFile",
    "ReplaceCharsW",
    "FIsValidFileNameCharW",
    "CchFileTimeToDateTimeW",
    "FBuildTempPath",
    "GenerateUniqueFileName",
    "OpenFileStreamWithFlagsW",
    "PszSkipWhiteA",
    "ShellUtil_GetSpecialFolderPath",
    "StrToUintA",
    "UnlocStrEqNW",
    "PszSkipWhiteW",
    "HrCopyStream",
    "GetTopMostParent",
    "CrackNotificationPackage",
    "HrFindInetTimeZone",
    "HrSetDirtyFlagImpl",
    "OpenFileStreamShare",
    "HrRewindStream",
    "WriteStreamToFileW",
    "strtrimW",
    "StripCRLF",
    "HrGetElementImpl",
    "HrCopyStreamCB",
    "HrFillRasCombo",
    "PVGetCertificateParam",
    "FBuildTempPathW",
    "HrStreamSeekSet",
    "FMissingCert",
    "FIsEmptyW",
    "HrIStreamToBSTR",
    "PVDecodeObject",
    "HrIndexOfMonth",
    "HrCreatePhonebookEntry",
    "DllCanUnloadNow",
    "CleanupFileNameInPlaceW",
    "WriteStreamToFileHandle",
    "FInitializeRichEdit",
    "FIsHTMLFileW",
    "PszDupW",
    "DllGetClassObject",
    "FIsHTMLFile",
    "PszScanToCharA",
    "HrGetBodyElement",
    "CryptAllocFunc",
    "HrCopyStreamToByte",
    "FIsSpaceA",
    "CryptFreeFunc",
    "FreeTempFileList",
    "IsValidFileIfFileUrlW",
    "IsHttpUrlW",
    "HrCopyLockBytesToStream",
    "PszDayFromIndex",
    "PszToANSI",
    "FIsEmptyA",
    "IsHttpUrlA",
    "HrGetMsgParam",
    "WriteStreamToFile",
    "HrLPSZToBSTR",
    "CenterDialog",
    "HrBSTRToLPSZ",
    "GetStoreRootDirectoryFromRegistryEntry",
    "FIsValidFileNameCharA",
    "OpenFileStreamShareW",
    "fGetBrowserUrlEncoding",
    "HrGetStreamSize",
    "CreateDataObject",
    "HrStreamSeekBegin",
    "IDrawText",
    "RicheditStreamIn",
    "GetRichEdClassStringW",
    "BrowseForFolderW",
    "GetStoreRootDirectoryFromRegistryEntryW",
    "RicheditStreamOut",
    "HrStreamSeekEnd",
    "StreamSubStringMatchW",
    "CreateSystemHandleName",
    "CleanupGlobalTempFiles",
    "PszEscapeMenuStringA",
    "AppendTempFileList",
    "ChConvertFromHex",
    "CreateEnumFormatEtc",
    "IsDigit",
    "CleanupFileNameInPlaceA",
    "MessageBoxInst",
    "PszAllocW",
    "OpenFileStream",
    "SetFontOnRichEd",
    "StrTokExA",
    "CreateStreamOnHFile",
    "CreateTempFileStream",
    "PszDupA",
    "CreateStreamOnHFileW",
    "PszAllocA",
    "HrGetStyleSheet",
    "DeleteTempFileOnShutdownEx",
    "HrSafeGetStreamSize",
    "_MSG",
    "PszFromANSIStreamA",
    "PszScanToWhiteA",
    "ReplaceChars",
    "GetExePath",
    "OpenFileStreamW",
    "HrGetCertKeyUsage",
    "StrTokExW",
    "PszMonthFromIndex",
    "HrStreamToByte",
    "HrGetCertificateParam",
    "FIsSpaceW",
    "PVGetMsgParam",
    "GetDllMajorVersion",
    "HrCopyStreamCBEndOnCRLF",
    "PszEscapeMenuStringW",
    "HrEditPhonebookEntryW",
    "HrIStreamWToBSTR",
    "HrLPSZCPToBSTR",
    "CreateTempFileW",
    "HrIndexOfWeek",
    "CchFileTimeToDateTimeSz",
    "BrowseForFolder",
    "PszToUnicode",
    "CopyRegistry",
    "HrGetStreamPos",
    "SzGetCertificateEmailAddress",
    "IsUpper"
  ],
  "msorc32r.dll": "No exports",
  "msorcl32.dll": [
    "SQLDescribeCol",
    "SQLDisconnect",
    "SQLDriverConnect",
    "SQLSetConnectOption",
    "SQLBindCol",
    "SQLRowCount",
    "SQLExecute",
    "SQLFreeEnv",
    "SQLGetTypeInfo",
    "LoadByOrdinal",
    "SQLFreeStmt",
    "SQLSetStmtOption",
    "SQLTables",
    "DllRegisterServer",
    "SQLSpecialColumns",
    "SQLAllocConnect",
    "SQLPrepare",
    "SQLBrowseConnect",
    "SQLStatistics",
    "DllUnregisterServer",
    "SQLAllocEnv",
    "SQLColAttributes",
    "SQLProcedures",
    "SQLColumns",
    "SQLNativeSql",
    "SQLForeignKeys",
    "SQLAllocStmt",
    "SQLNumParams",
    "SQLExecDirect",
    "SQLFreeConnect",
    "SQLNumResultCols",
    "SQLProcedureColumns",
    "SQLExtendedFetch",
    "SQLGetConnectOption",
    "SQLParamData",
    "DllMain",
    "SQLFetch",
    "SQLBindParameter",
    "SQLSetPos",
    "SQLSetScrollOptions",
    "SQLMoreResults",
    "SQLCancel",
    "SQLError",
    "SQLTransact",
    "SQLGetInfo",
    "SQLDescribeParam",
    "ConfigDSN",
    "SQLConnect",
    "SQLGetCursorName",
    "SQLGetData",
    "SQLGetStmtOption",
    "SQLPrimaryKeys",
    "SQLPutData",
    "SQLSetCursorName"
  ],
  "mspatcha.dll": [
    "TestApplyPatchToFileW",
    "NormalizeFileForPatchSignature",
    "GetFilePatchSignatureA",
    "ApplyPatchToFileExW",
    "ApplyPatchToFileA",
    "GetFilePatchSignatureByHandle",
    "GetFilePatchSignatureW",
    "TestApplyPatchToFileA",
    "ApplyPatchToFileByHandlesEx",
    "TestApplyPatchToFileByHandles",
    "ApplyPatchToFileByHandles",
    "TestApplyPatchToFileByBuffers",
    "ApplyPatchToFileExA",
    "ApplyPatchToFileByBuffers",
    "ApplyPatchToFileW",
    "GetFilePatchSignatureByBuffer"
  ],
  "mspbda.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mspbde40.dll": [
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msports.dll": [
    "ComDBClaimNextFreePort",
    "ComDBClaimPort",
    "SerialDisplayAdvancedSettings",
    "ComDBOpen",
    "ComDBGetCurrentPortUsage",
    "PortsClassInstaller",
    "ComDBResizeDatabase",
    "SerialPortPropPageProvider",
    "ParallelPortPropPageProvider",
    "ComDBClose",
    "ComDBReleasePort"
  ],
  "msprivs.dll": "No exports",
  "msrahc.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "msrating.dll": [
    "RatingAccessDeniedDialogW",
    "ClickedOnRAT",
    "RatingCustomRemoveRatingHelper",
    "RatingClickedOnRATInternal",
    "RatingEnable",
    "RatingCustomSetDefaultBureau",
    "RatingAddToApprovedSites",
    "RatingSetupUI",
    "ChangeSupervisorPassword",
    "RatingObtainCancel",
    "RatingCustomInit",
    "RatingObtainQuery",
    "RatingObtainQueryW",
    "VerifySupervisorPassword",
    "RatingAccessDeniedDialog2",
    "RatingAccessDeniedDialog2W",
    "RatingAddPropertyPages",
    "RatingAccessDeniedDialog",
    "RatingEnabledQuery",
    "RatingCheckUserAccessW",
    "RatingFreeDetails",
    "RatingEnableW",
    "RatingClickedOnPRFInternal",
    "RatingCustomAddRatingHelper",
    "ClickedOnPRF",
    "RatingCustomCrackData",
    "RatingCustomSetUserOptions",
    "DllCanUnloadNow",
    "RatingCustomDeleteCrackedData",
    "RatingCustomAddRatingSystem",
    "RatingInit",
    "DllGetClassObject",
    "RatingSetupUIW",
    "RatingCheckUserAccess"
  ],
  "msrd2x40.dll": [
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msrd3x40.dll": [
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msrdc.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "msrepl40.dll": "No exports",
  "msrle32.dll": [
    "DriverProc"
  ],
  "msscntrs.dll": [
    "Collect",
    "DllUnregisterServer",
    "Open",
    "Close",
    "DllRegisterServer"
  ],
  "msscp.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mssha.dll": [
    "MsShaUnInitialize",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "MsShaInitialize"
  ],
  "msshavmsg.dll": "No exports",
  "msshooks.dll": [
    "LoadMSSearchHooks"
  ],
  "mssign32.dll": [
    "PvkPrivateKeySaveA",
    "PvkPrivateKeyAcquireContext",
    "SignerSignEx",
    "PvkFreeCryptProv",
    "PvkPrivateKeyLoad",
    "SignerTimeStamp",
    "FreeCryptProvFromCert",
    "PvkGetCryptProv",
    "DllRegisterServer",
    "GetCryptProvFromCertEx",
    "PvkPrivateKeyAcquireContextA",
    "PvkPrivateKeySaveToMemoryA",
    "DllUnregisterServer",
    "PvkPrivateKeyReleaseContext",
    "PvkPrivateKeyAcquireContextFromMemoryA",
    "SignerAddTimeStampResponse",
    "FreeCryptProvFromCertEx",
    "PvkPrivateKeyAcquireContextFromMemory",
    "SignerFreeSignerContext",
    "PvkPrivateKeySaveToMemory",
    "SignerTimeStampEx2",
    "GetCryptProvFromCert",
    "SignerTimeStampEx",
    "SignerAddTimeStampResponseEx",
    "SpcGetCertFromKey",
    "PvkPrivateKeySave",
    "PvkPrivateKeyLoadA",
    "SignerCreateTimeStampRequest",
    "PvkPrivateKeyReleaseContextA",
    "SignerSign",
    "PvkPrivateKeyLoadFromMemoryA",
    "SignError",
    "PvkPrivateKeyLoadFromMemory"
  ],
  "mssip32.dll": [
    "CryptSIPGetInfo",
    "CryptSIPCreateIndirectData",
    "DllUnregisterServer",
    "CryptSIPGetRegWorkingFlags",
    "CryptSIPRemoveSignedDataMsg",
    "CryptSIPGetSignedDataMsg",
    "CryptSIPVerifyIndirectData",
    "DllRegisterServer",
    "CryptSIPPutSignedDataMsg"
  ],
  "mssitlb.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mssph.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mssphtb.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mssprxy.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "mssrch.dll": [
    "public: virtual long __stdcall CSearchServiceObj::SetServiceStatusObj(struct IDCOMServiceStatus *)",
    "MSSrch_SysPrep_Cleanup",
    "DllRegisterServer",
    "public: virtual long __stdcall CSearchServiceObj::Shutdown(void)",
    "public: virtual long __stdcall CSearchServiceObj::Initialize(void)",
    "MSSUncompressText",
    "DllUnregisterServer",
    "GetCatalogManager",
    "DecodeText",
    "public: static int __stdcall CSearchServiceObj::Cleanup(void)",
    "public: __thiscall CSearchServiceObj::CSearchServiceObj(void)",
    "public: virtual long __stdcall CSearchServiceObj::DeleteFilterPool(unsigned long)",
    "const CSearchServiceObj::`vftable'",
    "public: __thiscall CSearchServiceObj::~CSearchServiceObj(void)",
    "public: virtual long __stdcall CSearchServiceObj::LogonNotification(void)",
    "GetPropStoreManager",
    "public: virtual long __stdcall CSearchServiceObj::Start(void)",
    "DllCanUnloadNow",
    "MSSCompressText",
    "DllGetClassObject",
    "public: virtual long __stdcall CSearchServiceObj::Stop(int)",
    "ConcatVectValues",
    "public: class CSearchServiceObj & __thiscall CSearchServiceObj::operator=(class CSearchServiceObj const &)",
    "public: __thiscall CSearchServiceObj::CSearchServiceObj(class CSearchServiceObj const &)"
  ],
  "mssvp.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "msswch.dll": "No exports",
  "mstask.dll": [
    "_SetNetScheduleAccountInformation@12",
    "GetNetScheduleAccountInformation",
    "_SASetAccountInformation@20",
    "_ConvertAtJobsToTasks@0",
    "SASetNSAccountInformation",
    "NetrJobDel",
    "_NetrJobDel@12",
    "_NetrJobEnum@20",
    "SAGetNSAccountInformation",
    "_NetrJobAdd@12",
    "_SASetNSAccountInformation@12",
    "SAGetAccountInformation",
    "NetrJobEnum",
    "SASetAccountInformation",
    "NetrJobAdd",
    "NetrJobGetInfo",
    "_GetNetScheduleAccountInformation@12",
    "SetNetScheduleAccountInformation",
    "_SAGetAccountInformation@16",
    "_SAGetNSAccountInformation@12",
    "_DllCanUnloadNow@0",
    "ConvertAtJobsToTasks",
    "DllCanUnloadNow",
    "_DllGetClassObject@12",
    "_NetrJobGetInfo@12",
    "DllGetClassObject"
  ],
  "mstext40.dll": [
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "mstime.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllEnumClassObjects",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "mstscax.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetTscCtlVer",
    "DllGetClassObject",
    "DllRegisterServer",
    "RegisterTransportExtDll"
  ],
  "msutb.dll": [
    "SetRegisterLangBand",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "GetChildTipbar",
    "DllGetClassObject",
    "DllRegisterServer",
    "GetPopupTipbar",
    "ClosePopupTipbar"
  ],
  "msv1_0.dll": [
    "DllMain",
    "SpInstanceInit",
    "MsvGetLogonAttemptCount",
    "MsvSamValidate",
    "LsaApLogonTerminated",
    "MsvSamLogoff",
    "Msv1_0SubAuthenticationPresent",
    "LsaApLogonUserEx2",
    "SpLsaModeInitialize",
    "LsaApCallPackage",
    "MsvIsLocalhostAliases",
    "SpInitialize",
    "LsaApCallPackageUntrusted",
    "Msv1_0ExportSubAuthenticationRoutine",
    "LsaApInitializePackage",
    "MsvValidateTarget",
    "SpUserModeInitialize",
    "LsaApCallPackagePassthrough"
  ],
  "msvbvm60.dll": [
    "__vbaVarImp",
    "_adj_fprem",
    "rtcLog",
    "rtcByteValueBstr",
    "__vbaFpUI1",
    "rtcChangeDir",
    "rtcMidCharVar",
    "__vbaUI1Var",
    "__vbaLsetFixstrFree",
    "__vbaPut3",
    "__vbaVarSetUnkAddref",
    "rtcLeftVar",
    "rtcVarFromVar",
    "BASIC_DISPINTERFACE_GetTICount",
    "EbGetHandleOfExecutingProject",
    "VBDllCanUnloadNow",
    "rtDecFromVar",
    "GetMemObj",
    "PutMem8",
    "__vbaLateIdCallSt",
    "_CIlog",
    "__vbaExitProc",
    "__vbaI2Cy",
    "__vbaVargVar",
    "__vbaRsetFixstr",
    "rtcSetDateBstr",
    "EVENT_SINK_Release",
    "__vbaStrAryToUnicode",
    "rtcGetTimeVar",
    "__vbaForEachVar",
    "__vbaInStr",
    "EbLibraryLoad",
    "rtcGetDayOfMonth",
    "VarPtr",
    "__vbaCyFix",
    "__vbaLateMemNamedCallLd",
    "rtcFormatCurrency",
    "GetMemVar",
    "__vbaVar2Vec",
    "rtcIsEmpty",
    "__vbaVargParmRef",
    "PutMemVar",
    "__vbaVarTextCmpEq",
    "rtcCos",
    "GetMem4",
    "__vbaR4ForNextCheck",
    "__vbaForEachCollAd",
    "__vbaVargVarCopy",
    "rtcQBColor",
    "ProcCallEngine",
    "_adj_fdiv_m64",
    "rtcRightTrimVar",
    "__vbaVargVarMove",
    "__vbaCyStr",
    "__vbaRedimPreserveVar2",
    "__vbaVarTstNe",
    "rtcTrimVar",
    "rtcLenCharVar",
    "__vbaBoolStr",
    "__vbaVarCmpLe",
    "IID_IVbaHost",
    "__vbaStrI2",
    "rtcSpaceVar",
    "rtcSin",
    "__vbaVarEqv",
    "PutMem2",
    "__vbaVarIndexLoad",
    "rtcMakeDir",
    "__vbaPutOwner4",
    "__vbaVarCopy",
    "__vbaVarAdd",
    "rtcSetDateVar",
    "__vbaStrR4",
    "_adj_fdivr_m32",
    "TipInvokeMethod2",
    "__vbaFailedFriend",
    "__vbaStrR8",
    "__vbaStrFixstr",
    "__vbaGosub",
    "rtcDateFromVar",
    "_CItan",
    "__vbaVarLateMemCallLdRf",
    "PutMemNewObj",
    "__vbaEraseKeepData",
    "__vbaNextEachCollObj",
    "rtcCharValueBstr",
    "__vbaDerefAry1",
    "BASIC_CLASS_Release",
    "__vbaObjIs",
    "__vbaR4Var",
    "rtcStrReverse",
    "__vbaVarSetVarAddref",
    "rtcOctVarFromVar",
    "__vbaWriteFile",
    "GetMemEvent",
    "__vbaStrCmp",
    "__vbaVarTstLt",
    "__vbaGenerateBoundsError",
    "__vbaCyInt",
    "__vbaCopyBytes",
    "__vbaPowerR8",
    "__vbaErrorOverflow",
    "rtcFileCopy",
    "SetMemEvent",
    "rtcBstrFromByte",
    "_adj_fptan",
    "__vbaMidStmtBstr",
    "__vbaRedimPreserve",
    "__vbaGetOwner4",
    "__vbaVarLateMemCallLd",
    "__vbaVarTextLikeVar",
    "__vbaMidStmtVar",
    "UserDllMain",
    "rtBoolFromErrVar",
    "rtcFormatNumber",
    "rtUI1FromErrVar",
    "rtcTrimBstr",
    "PutMemEvent",
    "__vbaPutFxStr4",
    "__vbaVarTextCmpGe",
    "rtcIRR",
    "__vbaStrCat",
    "rtcCurrentDir",
    "__vbaVarNeg",
    "__vbaFreeObjList",
    "EVENT_SINK_GetIDsOfNames",
    "PutMemObj",
    "__vbaGet4",
    "GetMemStr",
    "__vbaErase",
    "EbGetVBAObject",
    "__vbaSetSystemError",
    "rtcIsArray",
    "__vbaFPInt",
    "__vbaObjSetAddref",
    "rtcInStr",
    "__vbaCyMul",
    "__vbaVarAbs",
    "rtcFileWidth",
    "__vbaDateVar",
    "rtcMidBstr",
    "rtcNPV",
    "__vbaExitEachAry",
    "rtcImmediateIf",
    "__vbaNextEachCollAd",
    "rtcJoin",
    "EVENT_SINK_QueryInterface",
    "__vbaCastObj",
    "__vbaStrDate",
    "rtcSendKeys",
    "__vbaVarIndexStore",
    "rtcEnvironVar",
    "__vbaLateMemSt",
    "EVENT_SINK_AddRef",
    "rtcSetTimeVar",
    "rtcRightBstr",
    "__vbaFpI4",
    "rtcMonthName",
    "TipUnloadInstance",
    "_adj_fdiv_r",
    "Zombie_GetIDsOfNames",
    "__vbaStrErrVarCopy",
    "__vbaVarLike",
    "__vbaVarDup",
    "__vbaStrVarCopy",
    "__vbaVarVargNofree",
    "__vbaCyVar",
    "__vbaRecUniToAnsi",
    "__vbaNextEachVar",
    "__vbaI2Sgn",
    "__vbaMidStmtVarB",
    "_adj_fpatan",
    "CreateIExprSrvObj",
    "__vbaFreeVarList",
    "TipCreateInstanceEx",
    "rtcInputCount",
    "GetMem8",
    "__vbaVarXor",
    "__vbaVarTextTstGt",
    "rtcBeep",
    "PutMemStr",
    "__vbaPrintObj",
    "__vbaCheckTypeVar",
    "__vbaVarLateMemCallSt",
    "rtcVarFromError",
    "rtcGetSecondOfMinute",
    "__vbaCySub",
    "__vbaVarTextTstGe",
    "__vbaLenBstrB",
    "__vbaAryRecMove",
    "__vbaFileLock",
    "__vbaLateIdStAd",
    "__vbaCyI4",
    "rtcLeftTrimBstr",
    "__vbaVargUnkAddref",
    "__vbaVarIndexLoadRefLock",
    "__vbaGosubReturn",
    "__vbaBoolVar",
    "__vbaObjSet",
    "rtcPackDate",
    "__vbaI2Str",
    "__vbaR8Cy",
    "__vbaStrTextLike",
    "rtcCommandBstr",
    "__vbaRefVarAry",
    "__vbaVarLateMemStAd",
    "rtcPackTime",
    "GetMemNewObj",
    "rtcSetCurrentCalendar",
    "__vbaVarCmpEq",
    "rtcNPer",
    "rtcWeekdayName",
    "_CIsin",
    "__vbaVarDiv",
    "__vbaVarTextTstEq",
    "rtcIPMT",
    "rtcCompareBstr",
    "__vbaInStrVar",
    "__vbaHresultCheckObj",
    "__vbaCySgn",
    "__vbaLsetFixstr",
    "rtcRandomNext",
    "__vbaFreeObj",
    "rtcCreateObject",
    "__vbaLbound",
    "EVENT_SINK2_Release",
    "_CIatan",
    "rtcGetSetting",
    "__vbaFpCDblR8",
    "rtcIsError",
    "rtcUpperCaseVar",
    "__vbaExitEachColl",
    "__vbaR8Sgn",
    "rtcInputCountVar",
    "Zombie_GetTypeInfo",
    "__vbaPutFxStr3",
    "rtcPPMT",
    "__vbaR4Sgn",
    "__vbaVarSetUnk",
    "__vbaLenVar",
    "__vbaDerefAry",
    "__vbaFreeVarg",
    "__vbaLateMemCall",
    "__vbaForEachAry",
    "EbGetErrorInfo",
    "__vbaUnkVar",
    "rtcHexBstrFromVar",
    "__vbaFixstrConstruct",
    "__vbaVargObj",
    "__vbaCyAdd",
    "__vbaVarSetObj",
    "__vbaLateMemNamedCallSt",
    "__vbaI4ErrVar",
    "__vbaFreeStrList",
    "__vbaCyI2",
    "rtcFormatPercent",
    "__vbaStrUI1",
    "rtcCommandVar",
    "rtcBstrFromChar",
    "__vbaUI1I2",
    "__vbaForEachCollObj",
    "__vbaVarCmpGt",
    "__vbaLateIdNamedCallSt",
    "__vbaStopExe",
    "rtI4FromErrVar",
    "rtcVarType",
    "DllRegisterServer",
    "__vbaVarSetObjAddref",
    "__vbaVargObjAddref",
    "__vbaBoolErrVar",
    "__vbaPutOwner3",
    "rtcIsNumeric",
    "Zombie_QueryInterface",
    "__vbaObjVar",
    "__vbaAryDestruct",
    "rtcChangeDrive",
    "rtcErrObj",
    "rtcShell",
    "rtcInputCharCount",
    "__vbaLateIdNamedCall",
    "__vbaI2Var",
    "__vbaVarFix",
    "GetMem1",
    "rtcTan",
    "rtBstrFromErrVar",
    "rtcGetMinuteOfHour",
    "__vbaCyForNext",
    "EbLibraryUnload",
    "__vbaCyErrVar",
    "rtcGetAllSettings",
    "rtcDeleteSetting",
    "rtcFileLen",
    "rtcLeftCharBstr",
    "rtcGetObject",
    "rtcGetTimeValue",
    "__vbaVarTextTstNe",
    "rtcGetDateVar",
    "BASIC_CLASS_Invoke",
    "__vbaStrBool",
    "__vbaVarAnd",
    "rtcFileLocation",
    "__vbaVerifyVarObj",
    "__vbaI4ForNextCheck",
    "rtcInputBox",
    "rtcRound",
    "EbGetObjConnectionCounts",
    "rtcGetMonthOfYear",
    "rtcRandomize",
    "rtcGetTimeBstr",
    "__vbaEnd",
    "__vbaRedimVar",
    "__vbaVarTextCmpNe",
    "__vbaFpR4",
    "__vbaExitEachVar",
    "PutMem4",
    "__vbaGetFxStr4",
    "rtcFileReset",
    "__vbaNew2",
    "__vbaVarLateMemSt",
    "rtcCVErrFromVar",
    "__vbaRsetFixstrFree",
    "__vbaR8IntI4",
    "__vbaVarMul",
    "rtcChoose",
    "rtcInStrRev",
    "rtcGetCurrentCalendar",
    "__vbaStrCopy",
    "__vbaR8ForNextCheck",
    "__vbaLateIdCallLd",
    "rtcVarBstrFromByte",
    "_CIsqrt",
    "__vbaFpR8",
    "__vbaDateStr",
    "rtCyFromErrVar",
    "__vbaFileOpen",
    "rtcSpaceBstr",
    "EbSetContextWorkerThread",
    "__vbaR8ErrVar",
    "__vbaLateIdSt",
    "DllFunctionCall",
    "__vbaFpCSngR8",
    "__vbaStr2Vec",
    "__vbaNextEachAry",
    "__vbaFpI2",
    "__vbaGetFxStr3",
    "Zombie_GetTypeInfoCount",
    "__vbaUdtVar",
    "__vbaVarForNext",
    "rtcFilter",
    "rtcLenVar",
    "__vbaFPFix",
    "__vbaInStrB",
    "rtcSLN",
    "rtcDatePart",
    "__vbaLateIdNamedCallLd",
    "rtcStrConvVar",
    "rtcEndOfFile",
    "__vbaInputFile",
    "__vbaLenBstr",
    "rtcAppleScript",
    "__vbaAryVar",
    "EbDestroyContext",
    "VBDllGetClassObject",
    "rtcHexVarFromVar",
    "__vbaFileCloseAll",
    "__vbaRedimVar2",
    "__vbaStrCy",
    "__vbaI2Abs",
    "rtcDDB",
    "Zombie_AddRef",
    "DllCanUnloadNow",
    "__vbaI4Abs",
    "__vbaR8Str",
    "__vbaAryUnlock",
    "BASIC_CLASS_QueryInterface",
    "ThunRTMain",
    "Zombie_Invoke",
    "rtcMidVar",
    "rtcSplit",
    "__vbaError",
    "__vbaAryVarVarg",
    "__vbaChkstk",
    "__vbaLateIdCall",
    "__vbaAryRebase1Var",
    "__vbaStrI4",
    "__vbaI4Var",
    "__vbaLineInputStr",
    "__vbaVarTstLe",
    "__vbaGosubFree",
    "__vbaLateMemNamedStAd",
    "rtcRemoveDir",
    "__vbaUI1Sgn",
    "__vbaCyForInit",
    "__vbaVarErrI4",
    "rtcIMEStatus",
    "__vbaAryConstruct",
    "__vbaUbound",
    "__vbaI2ForNextCheck",
    "rtcDoEvents",
    "__vbaR8IntI2",
    "__vbaCastObjVar",
    "rtcDir",
    "__vbaStrToUnicode",
    "rtcLeftBstr",
    "__vbaR4Cy",
    "rtcPartition",
    "rtcPV",
    "__vbaVarNot",
    "__vbaR8Var",
    "__vbaVarForInit",
    "__vbaStrAryToAnsi",
    "__vbaVarIndexLoadRef",
    "EbResetProject",
    "_allmul",
    "rtcLeftCharVar",
    "__vbaCopyBytesZero",
    "__vbaVarTstGt",
    "rtcFileAttributes",
    "_adj_fdiv_m32i",
    "rtcGetDayOfWeek",
    "rtcArray",
    "rtcIsObject",
    "__vbaHresultCheckNonvirt",
    "__vbaStrLike",
    "__vbaVargVarRef",
    "__vbaRecAnsiToUni",
    "rtcInStrChar",
    "__vbaNameFile",
    "rtcIntVar",
    "_CIcos",
    "__vbaI4Str",
    "rtcVarBstrFromAnsi",
    "rtcAnsiValueBstr",
    "rtcGetDateValue",
    "__vbaResume",
    "rtcMIRR",
    "__vbaFreeStr",
    "rtcRightVar",
    "rtcGetPresentDate",
    "__vbaAryConstruct2",
    "__vbaR4Str",
    "EbCreateContext",
    "rtcSaveSetting",
    "__vbaR4ErrVar",
    "rtcStrFromVar",
    "__vbaStrTextCmp",
    "__vbaUI1I4",
    "TipInvokeMethod",
    "VBDllUnRegisterServer",
    "rtI2FromErrVar",
    "rtcBstrFromFormatVar",
    "__vbaVarTextCmpLe",
    "__vbaI4Sgn",
    "__vbaVargUnk",
    "rtcEnvironBstr",
    "__vbaCyUI1",
    "__vbaUI1ErrVar",
    "__vbaGet3",
    "_adj_fdivr_m16i",
    "__vbaI2ErrVar",
    "__vbaLateIdNamedStAd",
    "__vbaLateMemStAd",
    "_CIexp",
    "__vbaVarSub",
    "rtcCreateObject2",
    "__vbaFileSeek",
    "__vbaVarIndexStoreObj",
    "__vbaCyMulI2",
    "__vbaUI1Cy",
    "MethCallEngine",
    "__vbaStrVarVal",
    "__vbaVarTstGe",
    "__vbaStrToAnsi",
    "__vbaFileClose",
    "__vbaVarCmpNe",
    "rtcGetFileAttr",
    "__vbaGetOwner3",
    "rtcVarDateFromVar",
    "__vbaVarZero",
    "__vbaDateR8",
    "__vbaRecDestruct",
    "CopyRecord",
    "__vbaPrintFile",
    "rtcCallByName",
    "rtcGetDateBstr",
    "__vbaVarSetVar",
    "GetMem2",
    "__vbaCheckType",
    "rtcGetHostLCID",
    "rtcFV",
    "__vbaLenVarB",
    "__vbaRedimPreserveVar",
    "__vbaVarTextTstLe",
    "__vbaVarDateVar",
    "TipSetOption",
    "VBDllRegisterServer",
    "__vbaI4Cy",
    "__vbaLateMemCallLd",
    "rtcRgb",
    "__vbaDateR4",
    "rtcSwitch",
    "__vbaStrMove",
    "__vbaVarCmpLt",
    "_adj_fprem1",
    "rtcGetErl",
    "rtcSetTimeBstr",
    "rtcStringVar",
    "__vbaRaiseEvent",
    "rtcFileDateTime",
    "rtcRightCharVar",
    "rtcCurrentDirBstr",
    "rtcIsNull",
    "__vbaFpCy",
    "__vbaHresultCheck",
    "SetMemObj",
    "SetMemNewObj",
    "rtcInputCharCountVar",
    "rtcMacId",
    "__vbaFreeVar",
    "__vbaR8FixI4",
    "rtcKillFiles",
    "__vbaRecAssign",
    "PutMem1",
    "rtcStringBstr",
    "__vbaAryLock",
    "Zombie_Release",
    "__vbaVarMod",
    "EVENT_SINK_Invoke",
    "__vbaExceptHandler",
    "TipGetAddressOfPredeclaredInstance",
    "rtcDateAdd",
    "__vbaLateMemNamedCall",
    "__vbaVarCat",
    "__vbaR8FixI2",
    "__vbaBoolVarNull",
    "__vbaOnGoCheck",
    "__vbaRedim",
    "rtcTypeName",
    "rtcExp",
    "BASIC_CLASS_AddRef",
    "rtcLowerCaseVar",
    "rtcIsMissing",
    "__vbaVarTextTstLt",
    "_adj_fdivr_m32i",
    "__vbaPut4",
    "_adj_fdiv_m16i",
    "__vbaLateMemCallSt",
    "__vbaVarCmpGe",
    "rtcMsgBox",
    "DllGetClassObject",
    "BASIC_CLASS_GetIDsOfNames",
    "rtcRightTrimBstr",
    "__vbaStrComp",
    "rtcOctBstrFromVar",
    "__vbaAryMove",
    "__vbaObjAddref",
    "EVENT_SINK2_AddRef",
    "__vbaFPException",
    "__vbaVarIdiv",
    "__vbaVarMove",
    "rtcMidCharBstr",
    "__vbaVarPow",
    "EbLoadRunTime",
    "rtcBstrFromError",
    "rtcGetHourOfDay",
    "EbIsProjectOnStack",
    "rtcFileSeek",
    "rtcVarStrFromVar",
    "__vbaVarOr",
    "rtcGetYear",
    "__vbaForEachCollVar",
    "__vbaI2I4",
    "__vbaNew",
    "rtcFileLength",
    "__vbaCyAbs",
    "rtcAbsVar",
    "_adj_fdivr_m64",
    "__vbaUI1Str",
    "__vbaVarTextCmpLt",
    "__vbaVarTextLike",
    "rtcLeftTrimVar",
    "DLLGetDocumentation",
    "rtcFormatDateTime",
    "_adj_fdiv_m32",
    "__vbaCVarAryUdt",
    "SetMemVar",
    "BASIC_DISPINTERFACE_GetTypeInfo",
    "rtcAtn",
    "rtcSYD",
    "__vbaAryCopy",
    "__vbaOnError",
    "rtcFixVar",
    "rtcPMT",
    "__vbaInStrVarB",
    "__vbaVarTextCmpGt",
    "TipCreateInstanceProject2",
    "rtR8FromErrVar",
    "rtcFreeFile",
    "__vbaStrVarMove",
    "rtcDateDiff",
    "__vbaStrCompVar",
    "rtcSetFileAttr",
    "EbResetProjectNormal",
    "__vbaRecDestructAnsi",
    "__vbaVarInt",
    "rtcIsDate",
    "rtcReplace",
    "DllUnregisterServer",
    "rtcStrConvVar2",
    "rtcR8ValFromBstr",
    "rtcAppActivate",
    "__vbaLineInputVar",
    "__vbaMidStmtBstrB",
    "__vbaLdZeroAry",
    "__vbaFpCDblR4",
    "rtcGetTimer",
    "rtcSgnVar",
    "__vbaFpCSngR4",
    "__vbaFpCmpCy",
    "rtcUpperCaseBstr",
    "__vbaAryRecCopy",
    "__vbaEraseNoPop",
    "__vbaVarLikeVar",
    "TipUnloadProject",
    "__vbaNextEachCollVar",
    "rtcSqr",
    "__vbaAptOffset",
    "rtcBstrFromAnsi",
    "__vbaVarTstEq",
    "rtR4FromErrVar",
    "rtcVarBstrFromChar",
    "rtcRate",
    "rtcLowerCaseBstr",
    "rtcVarFromFormatVar",
    "rtcRightCharBstr"
  ],
  "msvcirt.dll": [
    "public: static int const filebuf::openprot",
    "public: virtual __thiscall stdiostream::~stdiostream(void)",
    "public: __thiscall ostream_withassign::ostream_withassign(class streambuf *)",
    "public: virtual void * __thiscall ifstream::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall ostrstream::`scalar deleting destructor'(unsigned int)",
    "public: class istream & __thiscall istream::operator>>(unsigned long &)",
    "private: static struct _CRT_CRITICAL_SECTION ios::x_lockc",
    "public: void __thiscall stdiostream::`vbase destructor'(void)",
    "public: class istream & __thiscall istream::get(char &)",
    "public: class istream & __thiscall istream::operator>>(float &)",
    "public: class ostream & __thiscall ostream::write(signed char const *,int)",
    "public: __thiscall istrstream::istrstream(class istrstream const &)",
    "public: virtual __thiscall ostream::~ostream(void)",
    "public: class strstreambuf & __thiscall strstreambuf::operator=(class strstreambuf const &)",
    "public: virtual void * __thiscall fstream::`scalar deleting destructor'(unsigned int)",
    "public: class streambuf * __thiscall ofstream::setbuf(char *,int)",
    "protected: void __thiscall ios::init(class streambuf *)",
    "public: virtual void * __thiscall stdiostream::`scalar deleting destructor'(unsigned int)",
    "public: virtual int __thiscall strstreambuf::underflow(void)",
    "public: virtual void * __thiscall istream::`vector deleting destructor'(unsigned int)",
    "public: class istream & __thiscall istream::read(char *,int)",
    "public: __thiscall ofstream::ofstream(char const *,int,int)",
    "public: class ostream & __thiscall ostream::operator<<(char)",
    "private: static int ios::sunk_with_stdio",
    "public: class ostream & __thiscall ostream::write(unsigned char const *,int)",
    "protected: char * __thiscall streambuf::pbase(void)const",
    "public: class ostream & __thiscall ostream::operator<<(unsigned char)",
    "public: virtual int __thiscall strstreambuf::sync(void)",
    "public: class ostream & __thiscall ostream::operator<<(double)",
    "public: int __thiscall ifstream::fd(void)const",
    "public: __thiscall streambuf::streambuf(class streambuf const &)",
    "public: virtual __thiscall istream_withassign::~istream_withassign(void)",
    "public: class strstreambuf * __thiscall strstream::rdbuf(void)const",
    "protected: __thiscall ostream::ostream(class ostream const &)",
    "public: __thiscall istream_withassign::istream_withassign(class istream_withassign const &)",
    "public: virtual void * __thiscall ifstream::`scalar deleting destructor'(unsigned int)",
    "class ostream & __cdecl flush(class ostream &)",
    "public: class ofstream & __thiscall ofstream::operator=(class ofstream const &)",
    "public: class istream & __thiscall istream::operator>>(class istream & (__cdecl*)(class istream &))",
    "public: __thiscall istrstream::istrstream(char *)",
    "public: __thiscall stdiostream::stdiostream(struct _iobuf *)",
    "public: class istream & __thiscall istream::get(signed char &)",
    "public: __thiscall istream_withassign::istream_withassign(void)",
    "public: class Iostream_init & __thiscall Iostream_init::operator=(class Iostream_init const &)",
    "public: virtual void * __thiscall stdiobuf::`vector deleting destructor'(unsigned int)",
    "public: class istream & __thiscall istream::operator>>(int &)",
    "public: virtual void * __thiscall ofstream::`vector deleting destructor'(unsigned int)",
    "_mtunlock",
    "const strstream::`vbtable'{for `ostream'}",
    "public: int __thiscall ifstream::setmode(int)",
    "__dummy_export",
    "public: virtual long __thiscall strstreambuf::seekoff(long,enum ios::seek_dir,int)",
    "public: char * __thiscall istrstream::str(void)",
    "public: __thiscall logic_error::logic_error(char const * const &)",
    "public: class istream & __thiscall istream::operator>>(long &)",
    "public: class istream & __thiscall istream::get(unsigned char *,int,char)",
    "const fstream::`vbtable'{for `ostream'}",
    "public: int __thiscall streambuf::sbumpc(void)",
    "class ostream_withassign cerr",
    "public: __thiscall fstream::fstream(int,char *,int)",
    "public: virtual void * __thiscall streambuf::`scalar deleting destructor'(unsigned int)",
    "public: int __thiscall istream::sync(void)",
    "const istream_withassign::`vbtable'",
    "public: int __thiscall streambuf::out_waiting(void)const",
    "private: int __thiscall istream::getint(char *)",
    "public: class ostream & __thiscall ostream::put(char)",
    "public: __thiscall ostream_withassign::ostream_withassign(void)",
    "const istream::`vbtable'",
    "public: __thiscall exception::exception(class exception const &)",
    "public: int __thiscall ios::rdstate(void)const",
    "protected: void __thiscall streambuf::setb(char *,char *,int)",
    "public: void __thiscall ostrstream::`vbase destructor'(void)",
    "public: int __thiscall streambuf::sputn(char const *,int)",
    "public: virtual __thiscall istrstream::~istrstream(void)",
    "protected: char * __thiscall streambuf::pptr(void)const",
    "public: virtual void * __thiscall strstream::`scalar deleting destructor'(unsigned int)",
    "public: class filebuf * __thiscall fstream::rdbuf(void)const",
    "public: __thiscall strstreambuf::strstreambuf(int)",
    "public: void __thiscall ostream_withassign::`vbase destructor'(void)",
    "protected: char * __thiscall streambuf::epptr(void)const",
    "public: int __thiscall ios::precision(int)",
    "public: long & __thiscall ios::iword(int)const",
    "protected: int __thiscall streambuf::allocate(void)",
    "protected: char * __thiscall streambuf::base(void)const",
    "public: class streambuf * __thiscall fstream::setbuf(char *,int)",
    "public: __thiscall ifstream::ifstream(int,char *,int)",
    "public: void __thiscall ios::clear(int)",
    "public: virtual void * __thiscall strstreambuf::`scalar deleting destructor'(unsigned int)",
    "public: void __thiscall istream::isfx(void)",
    "public: class ostream & __thiscall ostream::operator<<(class ostream & (__cdecl*)(class ostream &))",
    "private: int __thiscall istream::getdouble(char *,int)",
    "public: __thiscall strstreambuf::strstreambuf(unsigned char *,int,unsigned char *)",
    "public: __thiscall fstream::fstream(char const *,int,int)",
    "private: static int ios::fLockcInit",
    "public: void __thiscall ifstream::close(void)",
    "public: __thiscall fstream::fstream(class fstream const &)",
    "public: __thiscall strstreambuf::strstreambuf(class strstreambuf const &)",
    "public: void __cdecl ios::clrlock(void)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned long)",
    "public: class istream & __thiscall istream::operator>>(unsigned char &)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned short)",
    "const strstreambuf::`vftable'",
    "public: __thiscall ofstream::ofstream(void)",
    "public: class ostream & __thiscall ostream::operator<<(long double)",
    "public: int __thiscall ostrstream::pcount(void)const",
    "public: void __cdecl ios::lock(void)",
    "const strstream::`vftable'",
    "public: int __thiscall ios::precision(void)const",
    "const ostream::`vbtable'",
    "protected: __thiscall ostream::ostream(void)",
    "public: void __thiscall streambuf::dbp(void)",
    "public: void __thiscall streambuf::clrlock(void)",
    "public: class istream & __thiscall istream::operator>>(short &)",
    "const logic_error::`vftable'",
    "public: class ostream * __thiscall ios::tie(void)const",
    "public: class ostream & __thiscall ostream::operator<<(class streambuf *)",
    "public: virtual long __thiscall streambuf::seekoff(long,enum ios::seek_dir,int)",
    "public: virtual void * __thiscall istream_withassign::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall istrstream::`scalar deleting destructor'(unsigned int)",
    "public: int __thiscall ios::operator!(void)const",
    "public: virtual __thiscall iostream::~iostream(void)",
    "public: virtual void * __thiscall exception::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall logic_error::`vector deleting destructor'(unsigned int)",
    "public: static int __cdecl ios::xalloc(void)",
    "public: virtual int __thiscall strstreambuf::overflow(int)",
    "public: class istream & __thiscall istream::getline(char *,int,char)",
    "public: void __cdecl ios::unlockbuf(void)",
    "const ofstream::`vftable'",
    "protected: int __thiscall streambuf::blen(void)const",
    "protected: __thiscall ios::ios(void)",
    "public: virtual void * __thiscall ostrstream::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall filebuf::`scalar deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall istream::`scalar deleting destructor'(unsigned int)",
    "public: class ostream & __thiscall ostream::operator<<(signed char const *)",
    "public: int __thiscall ios::eof(void)const",
    "public: void __thiscall streambuf::unlock(void)",
    "public: void __thiscall istream_withassign::`vbase destructor'(void)",
    "public: int __thiscall stdiobuf::setrwbuf(int,int)",
    "public: class istream & __thiscall istream::operator>>(unsigned short &)",
    "const iostream::`vbtable'{for `istream'}",
    "public: __thiscall Iostream_init::~Iostream_init(void)",
    "protected: class ostream & __thiscall ostream::operator=(class streambuf *)",
    "class istream & __cdecl ws(class istream &)",
    "public: virtual void * __thiscall logic_error::`scalar deleting destructor'(unsigned int)",
    "public: __thiscall ostrstream::ostrstream(char *,int,int)",
    "public: void __thiscall ostream::`vbase destructor'(void)",
    "public: long __thiscall ios::unsetf(long)",
    "public: virtual __thiscall strstream::~strstream(void)",
    "public: __thiscall ifstream::ifstream(char const *,int,int)",
    "public: __thiscall filebuf::filebuf(class filebuf const &)",
    "const fstream::`vbtable'{for `istream'}",
    "public: class streambuf & __thiscall streambuf::operator=(class streambuf const &)",
    "protected: class istream & __thiscall istream::get(char *,int,int)",
    "protected: void __thiscall streambuf::setg(char *,char *,char *)",
    "const stdiobuf::`vftable'",
    "public: __thiscall Iostream_init::Iostream_init(void)",
    "public: class istream & __thiscall istream::operator>>(char *)",
    "public: class strstream & __thiscall strstream::operator=(class strstream &)",
    "public: virtual long __thiscall streambuf::seekpos(long,int)",
    "public: void __thiscall streambuf::stossc(void)",
    "const fstream::`vftable'",
    "protected: __thiscall streambuf::streambuf(char *,int)",
    "class istream_withassign cin",
    "public: virtual void * __thiscall istrstream::`vector deleting destructor'(unsigned int)",
    "private: static int ios::x_curindex",
    "public: class istream & __thiscall istream::get(char *,int,char)",
    "public: class ostream & __thiscall ostream::operator<<(signed char)",
    "public: __thiscall filebuf::filebuf(int)",
    "public: class ostream & __thiscall ostream::operator<<(unsigned char const *)",
    "public: __thiscall stdiobuf::stdiobuf(struct _iobuf *)",
    "public: class ostream & __thiscall ostream_withassign::operator=(class ostream const &)",
    "public: void __cdecl ios::lockbuf(void)",
    "public: class strstreambuf * __thiscall ostrstream::rdbuf(void)const",
    "public: __thiscall strstreambuf::strstreambuf(void)",
    "public: void * & __thiscall ios::pword(int)const",
    "public: class filebuf * __thiscall ofstream::rdbuf(void)const",
    "const istrstream::`vbtable'",
    "public: virtual __thiscall strstreambuf::~strstreambuf(void)",
    "public: class stdiostream & __thiscall stdiostream::operator=(class stdiostream &)",
    "protected: static void __cdecl ios::lockc(void)",
    "public: __thiscall ofstream::ofstream(class ofstream const &)",
    "public: virtual __thiscall ofstream::~ofstream(void)",
    "public: class ostream & __thiscall ostream::operator<<(long)",
    "public: class ostream_withassign & __thiscall ostream_withassign::operator=(class ostream_withassign const &)",
    "private: class ostream & __thiscall ostream::writepad(char const *,char const *)",
    "public: virtual void * __thiscall fstream::`vector deleting destructor'(unsigned int)",
    "public: class ostream & __thiscall ostream::operator<<(float)",
    "public: virtual int __thiscall filebuf::overflow(int)",
    "public: int __thiscall streambuf::in_avail(void)const",
    "public: virtual __thiscall ostream_withassign::~ostream_withassign(void)",
    "public: void __thiscall streambuf::lock(void)",
    "public: void __thiscall strstream::`vbase destructor'(void)",
    "protected: void __thiscall streambuf::gbump(int)",
    "public: class istream_withassign & __thiscall istream_withassign::operator=(class istream_withassign const &)",
    "class ios & __cdecl hex(class ios &)",
    "class ios & __cdecl oct(class ios &)",
    "public: virtual int __thiscall streambuf::xsputn(char const *,int)",
    "public: class istream & __thiscall istream::operator>>(signed char &)",
    "public: virtual char const * __thiscall exception::what(void)const",
    "public: __thiscall ofstream::ofstream(int,char *,int)",
    "public: int __thiscall ios::delbuf(void)const",
    "public: int __thiscall ofstream::is_open(void)const",
    "public: void __thiscall iostream::`vbase destructor'(void)",
    "public: int __thiscall ios::good(void)const",
    "public: int __thiscall strstream::pcount(void)const",
    "public: static int const filebuf::sh_read",
    "public: int __thiscall filebuf::setmode(int)",
    "public: class istream & __thiscall istream::seekg(long)",
    "const ifstream::`vbtable'",
    "public: __thiscall ostrstream::ostrstream(void)",
    "public: __thiscall stdiostream::stdiostream(class stdiostream const &)",
    "protected: class iostream & __thiscall iostream::operator=(class iostream &)",
    "public: virtual void * __thiscall ios::`scalar deleting destructor'(unsigned int)",
    "public: void __thiscall streambuf::setlock(void)",
    "public: __thiscall strstream::strstream(void)",
    "public: __thiscall ostream::ostream(class streambuf *)",
    "public: char * __thiscall strstreambuf::str(void)",
    "public: int __thiscall ofstream::fd(void)const",
    "public: int __thiscall ios::width(void)const",
    "public: virtual int __thiscall stdiobuf::overflow(int)",
    "public: virtual int __thiscall stdiobuf::pbackfail(int)",
    "protected: char * __thiscall streambuf::egptr(void)const",
    "public: int __thiscall ifstream::is_open(void)const",
    "public: class istream & __thiscall istream::get(signed char *,int,char)",
    "public: virtual void * __thiscall streambuf::`vector deleting destructor'(unsigned int)",
    "const ostream_withassign::`vftable'",
    "public: __thiscall stdiobuf::stdiobuf(class stdiobuf const &)",
    "public: void __cdecl ios::unlock(void)",
    "public: virtual void * __thiscall ostream_withassign::`vector deleting destructor'(unsigned int)",
    "public: class stdiobuf & __thiscall stdiobuf::operator=(class stdiobuf const &)",
    "public: class streambuf * __thiscall ifstream::setbuf(char *,int)",
    "protected: virtual int __thiscall streambuf::doallocate(void)",
    "protected: __thiscall istream::istream(class istream const &)",
    "public: void __cdecl ios::setlock(void)",
    "public: class fstream & __thiscall fstream::operator=(class fstream &)",
    "public: virtual int __thiscall filebuf::sync(void)",
    "public: long __thiscall ostream::tellp(void)",
    "public: void __thiscall fstream::attach(int)",
    "protected: void __thiscall streambuf::unbuffered(int)",
    "class ios & __cdecl dec(class ios &)",
    "public: void __thiscall fstream::close(void)",
    "protected: void __thiscall streambuf::setp(char *,char *)",
    "public: void __thiscall istream::eatwhite(void)",
    "const stdiostream::`vftable'",
    "public: __thiscall exception::exception(void)",
    "public: virtual __thiscall streambuf::~streambuf(void)",
    "public: int __thiscall istream::gcount(void)const",
    "public: virtual void * __thiscall iostream::`scalar deleting destructor'(unsigned int)",
    "protected: int __thiscall streambuf::unbuffered(void)const",
    "public: class filebuf & __thiscall filebuf::operator=(class filebuf const &)",
    "public: void __thiscall fstream::open(char const *,int,int)",
    "public: virtual void * __thiscall strstream::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall ios::`vector deleting destructor'(unsigned int)",
    "public: class istream & __thiscall istream::operator>>(long double &)",
    "public: virtual class streambuf * __thiscall streambuf::setbuf(char *,int)",
    "public: int __thiscall ios::fail(void)const",
    "const stdiostream::`vbtable'{for `ostream'}",
    "const strstream::`vbtable'{for `istream'}",
    "public: void __thiscall ofstream::close(void)",
    "public: __thiscall filebuf::filebuf(int,char *,int)",
    "public: void __thiscall ifstream::open(char const *,int,int)",
    "class ostream & __cdecl ends(class ostream &)",
    "public: class istream & __thiscall istream::operator>>(signed char *)",
    "public: class filebuf * __thiscall filebuf::close(void)",
    "public: class istream & __thiscall istream::seekg(long,enum ios::seek_dir)",
    "const istrstream::`vftable'",
    "public: int __thiscall ostream::opfx(void)",
    "public: __thiscall logic_error::logic_error(class logic_error const &)",
    "public: int __thiscall streambuf::sputbackc(char)",
    "public: void __thiscall ofstream::`vbase destructor'(void)",
    "public: __thiscall strstream::strstream(class strstream const &)",
    "public: char __thiscall ios::fill(char)",
    "public: class ostream & __thiscall ostream::write(char const *,int)",
    "public: int __thiscall streambuf::sgetc(void)",
    "const streambuf::`vftable'",
    "public: int __thiscall fstream::fd(void)const",
    "public: __thiscall filebuf::filebuf(void)",
    "public: __thiscall istream::istream(class streambuf *)",
    "const istream::`vftable'",
    "public: __thiscall Iostream_init::Iostream_init(class ios &,int)",
    "const exception::`vftable'",
    "public: virtual __thiscall fstream::~fstream(void)",
    "protected: char * __thiscall streambuf::gptr(void)const",
    "public: __thiscall ostrstream::ostrstream(class ostrstream const &)",
    "public: int __thiscall fstream::setmode(int)",
    "public: virtual class streambuf * __thiscall filebuf::setbuf(char *,int)",
    "public: class exception & __thiscall exception::operator=(class exception const &)",
    "public: int __thiscall istream::peek(void)",
    "public: class ostream & __thiscall ostream::operator<<(short)",
    "class ostream_withassign clog",
    "public: virtual long __thiscall stdiobuf::seekoff(long,enum ios::seek_dir,int)",
    "public: class istream & __thiscall istream_withassign::operator=(class streambuf *)",
    "public: void __thiscall ifstream::attach(int)",
    "public: char * __thiscall ostrstream::str(void)",
    "public: int __thiscall ios::bad(void)const",
    "const ostrstream::`vftable'",
    "const ofstream::`vbtable'",
    "public: virtual int __thiscall streambuf::sync(void)",
    "public: __thiscall fstream::fstream(int)",
    "public: virtual void * __thiscall strstreambuf::`vector deleting destructor'(unsigned int)",
    "public: class istream & __thiscall istream::read(signed char *,int)",
    "public: class istrstream & __thiscall istrstream::operator=(class istrstream const &)",
    "public: virtual void * __thiscall ofstream::`scalar deleting destructor'(unsigned int)",
    "public: char __thiscall ios::fill(void)const",
    "public: class ostream & __thiscall ostream::put(signed char)",
    "public: class ostream & __thiscall ostream::seekp(long,enum ios::seek_dir)",
    "public: virtual void * __thiscall ostream::`vector deleting destructor'(unsigned int)",
    "protected: struct _CRT_CRITICAL_SECTION * __thiscall streambuf::lockptr(void)",
    "public: __thiscall fstream::fstream(void)",
    "public: int __thiscall ios::width(int)",
    "public: class ostream & __thiscall ostream::put(unsigned char)",
    "public: virtual __thiscall ostrstream::~ostrstream(void)",
    "public: int __thiscall streambuf::sgetn(char *,int)",
    "public: void __thiscall ios::delbuf(int)",
    "public: virtual __thiscall exception::~exception(void)",
    "public: long __thiscall ios::setf(long)",
    "public: void __thiscall ostream::osfx(void)",
    "public: class ostream & __thiscall ostream::operator<<(class ios & (__cdecl*)(class ios &))",
    "public: class ostream & __thiscall ostream::operator<<(unsigned int)",
    "public: class istream & __thiscall istream_withassign::operator=(class istream const &)",
    "protected: char * __thiscall streambuf::eback(void)const",
    "public: class ostream & __thiscall ostream::seekp(long)",
    "public: class ostream * __thiscall ios::tie(class ostream *)",
    "public: long __thiscall istream::tellg(void)",
    "protected: class istream & __thiscall istream::operator=(class streambuf *)",
    "public: long __thiscall ios::flags(long)",
    "public: virtual int __thiscall streambuf::xsgetn(char *,int)",
    "protected: static void __cdecl ios::unlockc(void)",
    "public: class istream & __thiscall istream::operator>>(double &)",
    "public: class filebuf * __thiscall filebuf::attach(int)",
    "public: struct _iobuf * __thiscall stdiobuf::stdiofile(void)",
    "public: virtual int __thiscall filebuf::underflow(void)",
    "public: virtual void * __thiscall ostream::`scalar deleting destructor'(unsigned int)",
    "public: void __thiscall istream::`vbase destructor'(void)",
    "public: static long __cdecl ios::bitalloc(void)",
    "public: static int const filebuf::text",
    "public: virtual void * __thiscall stdiobuf::`scalar deleting destructor'(unsigned int)",
    "public: class filebuf * __thiscall ifstream::rdbuf(void)const",
    "private: static long ios::x_maxbit",
    "public: class istream & __thiscall istream::get(class streambuf &,char)",
    "public: class strstreambuf * __thiscall istrstream::rdbuf(void)const",
    "public: int __thiscall ofstream::setmode(int)",
    "public: void __thiscall istrstream::`vbase destructor'(void)",
    "public: class ostream & __thiscall ostream_withassign::operator=(class streambuf *)",
    "protected: __thiscall iostream::iostream(void)",
    "public: static int const filebuf::sh_write",
    "protected: void __thiscall streambuf::pbump(int)",
    "public: __thiscall ios::operator void *(void)const",
    "public: class istream & __thiscall istream::putback(char)",
    "protected: __thiscall streambuf::streambuf(void)",
    "const istream_withassign::`vftable'",
    "const iostream::`vbtable'{for `ostream'}",
    "const ostream_withassign::`vbtable'",
    "public: char * __thiscall strstream::str(void)",
    "public: class istream & __thiscall istream::get(unsigned char &)",
    "public: static int const filebuf::binary",
    "public: int __thiscall filebuf::fd(void)const",
    "public: virtual void * __thiscall ostream_withassign::`scalar deleting destructor'(unsigned int)",
    "public: class ostream & __thiscall ostream::operator<<(char const *)",
    "public: class istream & __thiscall istream::getline(unsigned char *,int,char)",
    "protected: virtual int __thiscall strstreambuf::doallocate(void)",
    "_mtlock",
    "public: __thiscall iostream::iostream(class streambuf *)",
    "public: class istream & __thiscall istream::operator>>(unsigned char *)",
    "public: virtual __thiscall logic_error::~logic_error(void)",
    "public: __thiscall ios::ios(class streambuf *)",
    "public: class ostream & __thiscall ostream::operator<<(int)",
    "public: class ifstream & __thiscall ifstream::operator=(class ifstream const &)",
    "protected: class ostream & __thiscall ostream::operator=(class ostream const &)",
    "const iostream::`vftable'",
    "public: long __thiscall ios::flags(void)const",
    "public: class istream & __thiscall istream::read(unsigned char *,int)",
    "class ostream_withassign cout",
    "const ostrstream::`vbtable'",
    "public: __thiscall ofstream::ofstream(int)",
    "public: __thiscall ostream_withassign::ostream_withassign(class ostream_withassign const &)",
    "public: int __thiscall filebuf::is_open(void)const",
    "public: long __thiscall ios::setf(long,long)",
    "public: virtual __thiscall ifstream::~ifstream(void)",
    "public: virtual void * __thiscall iostream::`vector deleting destructor'(unsigned int)",
    "public: static void __cdecl ios::sync_with_stdio(void)",
    "protected: __thiscall ios::ios(class ios const &)",
    "public: class ostream & __thiscall ostream::operator<<(void const *)",
    "protected: struct _CRT_CRITICAL_SECTION * __thiscall ios::lockptr(void)",
    "public: class istream & __thiscall istream::ignore(int,int)",
    "const ifstream::`vftable'",
    "public: class ostrstream & __thiscall ostrstream::operator=(class ostrstream const &)",
    "public: static long const ios::basefield",
    "public: class istream & __thiscall istream::getline(signed char *,int,char)",
    "public: int __thiscall istream::get(void)",
    "public: class stdiobuf * __thiscall stdiostream::rdbuf(void)const",
    "const ostream::`vftable'",
    "public: __thiscall istrstream::istrstream(char *,int)",
    "public: int __thiscall streambuf::snextc(void)",
    "public: void __thiscall ofstream::attach(int)",
    "public: virtual int __thiscall streambuf::pbackfail(int)",
    "public: static long const ios::floatfield",
    "protected: class iostream & __thiscall iostream::operator=(class streambuf *)",
    "public: static int const filebuf::sh_none",
    "protected: char * __thiscall streambuf::ebuf(void)const",
    "private: static long * ios::x_statebuf",
    "public: virtual int __thiscall stdiobuf::sync(void)",
    "public: __thiscall strstreambuf::strstreambuf(void * (__cdecl*)(long),void (__cdecl*)(void *))",
    "public: static long const ios::adjustfield",
    "public: virtual void * __thiscall exception::`scalar deleting destructor'(unsigned int)",
    "const filebuf::`vftable'",
    "public: virtual void * __thiscall stdiostream::`vector deleting destructor'(unsigned int)",
    "public: void __thiscall fstream::`vbase destructor'(void)",
    "protected: class ios & __thiscall ios::operator=(class ios const &)",
    "public: __thiscall exception::exception(char const * const &)",
    "public: void __thiscall ofstream::open(char const *,int,int)",
    "public: class istream & __thiscall istream::operator>>(unsigned int &)",
    "public: virtual void * __thiscall filebuf::`vector deleting destructor'(unsigned int)",
    "public: class filebuf * __thiscall filebuf::open(char const *,int,int)",
    "public: int __thiscall streambuf::sputc(int)",
    "public: __thiscall strstream::strstream(char *,int,int)",
    "public: __thiscall ifstream::ifstream(void)",
    "public: class istream & __thiscall istream::operator>>(char &)",
    "public: class logic_error & __thiscall logic_error::operator=(class logic_error const &)",
    "public: virtual void * __thiscall istream_withassign::`scalar deleting destructor'(unsigned int)",
    "protected: __thiscall istream::istream(void)",
    "public: __thiscall ifstream::ifstream(int)",
    "public: int __thiscall istream::ipfx(int)",
    "public: virtual int __thiscall stdiobuf::underflow(void)",
    "public: void __thiscall ifstream::`vbase destructor'(void)",
    "class ostream & __cdecl endl(class ostream &)",
    "public: virtual __thiscall ios::~ios(void)",
    "public: __thiscall istream_withassign::istream_withassign(class streambuf *)",
    "const stdiostream::`vbtable'{for `istream'}",
    "public: class ostream & __thiscall ostream::flush(void)",
    "public: class streambuf * __thiscall ios::rdbuf(void)const",
    "public: int __thiscall fstream::is_open(void)const",
    "public: virtual __thiscall filebuf::~filebuf(void)",
    "public: __thiscall ifstream::ifstream(class ifstream const &)",
    "public: void __thiscall strstreambuf::freeze(int)",
    "public: virtual long __thiscall filebuf::seekoff(long,enum ios::seek_dir,int)",
    "public: virtual __thiscall stdiobuf::~stdiobuf(void)",
    "protected: __thiscall iostream::iostream(class iostream const &)",
    "public: class istream & __thiscall istream::operator>>(class streambuf *)",
    "public: class istream & __thiscall istream::operator>>(class ios & (__cdecl*)(class ios &))",
    "public: virtual class streambuf * __thiscall strstreambuf::setbuf(char *,int)",
    "protected: class istream & __thiscall istream::operator=(class istream const &)",
    "public: __thiscall strstreambuf::strstreambuf(char *,int,char *)",
    "const ios::`vftable'",
    "public: virtual __thiscall istream::~istream(void)"
  ],
  "msvcp60.dll": [
    "const std::_Mpunct::`vftable'",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::read(unsigned short *,int)",
    "class std::complex __cdecl std::sinh(class std::complex const &)",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Mpunct::negative_sign(void)const",
    "public: char & __thiscall std::basic_string,class std::allocator >::operator[](unsigned int)",
    "public: char const * __thiscall std::basic_string,class std::allocator >::data(void)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(long double)",
    "protected: static void __cdecl std::ctype::_Term(void)",
    "public: static int __cdecl std::ios_base::xalloc(void)",
    "public: int __thiscall std::basic_streambuf >::sputn(char const *,int)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::putback(unsigned short)",
    "public: class std::fpos __thiscall std::basic_ostream >::tellp(void)",
    "class std::complex & __cdecl std::operator*=(class std::complex &,class std::complex const &)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::_Mpunct::do_grouping(void)const",
    "public: __thiscall std::range_error::range_error(class std::basic_string,class std::allocator > const &)",
    "public: bool __thiscall std::basic_ifstream >::is_open(void)const",
    "public: struct _Collvec __thiscall std::_Locinfo::_Getcoll(void)const",
    "public: __thiscall std::basic_ostream >::basic_ostream >(enum std::_Uninitialized)",
    "_Hugeval",
    "bool __cdecl std::operator>=(class std::basic_string,class std::allocator > const &,char const *)",
    "public: virtual __thiscall std::_Mpunct::~_Mpunct(void)",
    "__Wcrtomb_lk",
    "public: static float __cdecl std::_Ctr::ldexp(float,int)",
    "protected: char * __thiscall std::basic_streambuf >::pbase(void)const",
    "public: static bool __cdecl std::numeric_limits::epsilon(void)",
    "public: __thiscall std::basic_filebuf >::basic_filebuf >(struct _iobuf *)",
    "public: static class std::locale::id std::numpunct::id",
    "class std::basic_istream > & __cdecl std::getline(class std::basic_istream > &,class std::basic_string,class std::allocator > &,unsigned short)",
    "public: static unsigned long __cdecl std::numeric_limits::signaling_NaN(void)",
    "protected: void __thiscall std::basic_stringbuf,class std::allocator >::_Init(char const *,unsigned int,int)",
    "public: class std::allocator __thiscall std::basic_string,class std::allocator >::get_allocator(void)const",
    "btowc",
    "public: void __thiscall std::ios_base::setstate(short)",
    "public: static char * __cdecl std::char_traits::copy(char *,char const *,unsigned int)",
    "protected: virtual bool __thiscall std::codecvt_base::do_always_noconv(void)const",
    "public: void __thiscall std::basic_ofstream >::close(void)",
    "class std::basic_ostream > & __cdecl std::operator<< >(class std::basic_ostream > &,signed char)",
    "public: static unsigned int __cdecl std::locale::facet::_Getcat(void)",
    "public: __thiscall std::_Locinfo::_Locinfo(int,char const *)",
    "public: __thiscall std::num_get > >::num_get > >(class std::_Locinfo const &,unsigned int)",
    "public: static float __cdecl std::_Ctr::cos(float)",
    "public: void __thiscall std::basic_ifstream >::open(char const *,int)",
    "_Eps",
    "public: virtual __thiscall std::messages::~messages(void)",
    "protected: virtual class std::fpos __thiscall std::basic_streambuf >::seekpos(class std::fpos,int)",
    "public: struct std::money_base::pattern __thiscall std::_Mpunct::neg_format(void)const",
    "const std::bad_cast::`vftable'",
    "public: static class std::locale::id std::collate::id",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,signed char &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(long &)",
    "public: virtual __thiscall std::bad_cast::~bad_cast(void)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,long double &)const",
    "bool __cdecl std::operator==,class std::allocator >(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekoff(long,enum std::ios_base::seekdir,int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(unsigned short const *,unsigned int,unsigned int)const",
    "class std::complex __cdecl std::operator+(long double const &,class std::complex const &)",
    "protected: virtual class std::fpos __thiscall std::basic_filebuf >::seekoff(long,enum std::ios_base::seekdir,int)",
    "bool __cdecl std::operator!=(class std::complex const &,class std::complex const &)",
    "protected: virtual int __thiscall std::basic_filebuf >::uflow(void)",
    "class std::complex __cdecl std::operator-(double const &,class std::complex const &)",
    "const std::basic_fstream >::`vbtable'{for `std::basic_istream >'}",
    "public: static signed char __cdecl std::numeric_limits::quiet_NaN(void)",
    "class std::basic_ostream > std::cout",
    "class std::basic_ostream > & __cdecl std::operator<<,class std::allocator >(class std::basic_ostream > &,class std::basic_string,class std::allocator > const &)",
    "_FSnan",
    "public: static class std::locale __cdecl std::locale::empty(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(unsigned short &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned short const *,unsigned int)",
    "public: __thiscall std::basic_stringbuf,class std::allocator >::basic_stringbuf,class std::allocator >(class std::basic_stringbuf,class std::allocator > const &)",
    "private: static int std::ios_base::_Index",
    "public: static long double __cdecl std::numeric_limits::infinity(void)",
    "public: void __thiscall std::basic_fstream >::open(char const *,int)",
    "protected: void __thiscall std::money_put > >::_Init(class std::_Locinfo const &)",
    "public: __thiscall std::basic_stringstream,class std::allocator >::basic_stringstream,class std::allocator >(class std::basic_stringstream,class std::allocator > const &)",
    "bool __cdecl std::operator>(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(unsigned short *,int,unsigned short)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,unsigned long)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(unsigned short *,int,unsigned short)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,double)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(char,unsigned int)const",
    "public: static unsigned int __cdecl std::messages::_Getcat(void)",
    "class std::complex __cdecl std::polar(double const &)",
    "protected: void __thiscall std::basic_streambuf >::setp(char *,char *,char *)",
    "public: virtual __thiscall std::locale::facet::~facet(void)",
    "bool __cdecl std::operator<=(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: class std::locale __thiscall std::basic_streambuf >::pubimbue(class std::locale const &)",
    "public: static double __cdecl std::_Ctr::_Nanv(double)",
    "public: unsigned short __thiscall std::basic_ios >::widen(char)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,unsigned int,char)",
    "public: __thiscall std::bad_alloc::bad_alloc(char const *)",
    "public: virtual __thiscall std::messages_base::~messages_base(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(char,unsigned int)const",
    "class std::complex __cdecl std::operator*(double const &,class std::complex const &)",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::begin(void)",
    "bool __cdecl std::operator<=,class std::allocator >(class std::basic_string,class std::allocator > const &,char const *)",
    "public: __thiscall std::locale::~locale(void)",
    "protected: void __thiscall std::basic_streambuf >::pbump(int)",
    "public: static unsigned long __cdecl std::numeric_limits::min(void)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::collate::do_transform(char const *,char const *)const",
    "class std::complex __cdecl std::log(class std::complex const &)",
    "public: __thiscall std::moneypunct::moneypunct(unsigned int)",
    "struct std::_Smanip __cdecl std::setprecision(int)",
    "class std::complex __cdecl std::pow(class std::complex const &,float const &)",
    "public: class std::ostreambuf_iterator > __thiscall std::time_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,struct tm const *,unsigned short const *,unsigned short const *)const",
    "public: double __thiscall std::_Complex_base::imag(double const &)",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::erase(unsigned short *,unsigned short *)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(unsigned int)",
    "bool __cdecl std::operator<,class std::allocator >(class std::basic_string,class std::allocator > const &,char const *)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,double)const",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator/=(float const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,char const *)",
    "public: void __thiscall std::basic_stringstream,class std::allocator >::`vbase destructor'(void)",
    "public: __thiscall std::time_get > >::time_get > >(class std::_Locinfo const &,unsigned int)",
    "public: static unsigned short __cdecl std::char_traits::not_eof(unsigned short const &)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "private: class std::ostreambuf_iterator > __thiscall std::money_put > >::_Putmfld(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,bool,class std::basic_string,class std::allocator >)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(char const *,char const *)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,unsigned short const *,unsigned int)const",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,char const *,unsigned int)const",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned int,unsigned short,class std::allocator const &)",
    "public: int __thiscall std::ios_base::flags(void)const",
    "public: __thiscall std::num_get > >::num_get > >(unsigned int)",
    "public: static signed char __cdecl std::numeric_limits::denorm_min(void)",
    "public: unsigned short & __thiscall std::basic_string,class std::allocator >::operator[](unsigned int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(unsigned short const *,unsigned int,unsigned int)const",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,long double)const",
    "protected: void __thiscall std::time_get > >::_Init(class std::_Locinfo const &)",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekpos(class std::fpos,int)",
    "public: __thiscall std::strstream::strstream(char *,int,int)",
    "public: static unsigned long __cdecl std::numeric_limits::infinity(void)",
    "public: long & __thiscall std::ios_base::iword(int)",
    "private: void __thiscall std::basic_string,class std::allocator >::_Split(void)",
    "const std::num_get > >::`vftable'",
    "protected: virtual void __thiscall std::bad_cast::_Doraise(void)const",
    "public: int __thiscall std::basic_istream >::get(void)",
    "public: void * __thiscall std::_Timevec::_Getptr(void)const",
    "float __cdecl std::_Fabs(class std::complex const &,int *)",
    "bool __cdecl std::operator!=(float const &,class std::complex const &)",
    "class std::basic_ostream > std::wcerr",
    "protected: virtual int __thiscall std::basic_streambuf >::overflow(int)",
    "protected: virtual int __thiscall std::_Mpunct::do_frac_digits(void)const",
    "_Strxfrm",
    "public: static long double __cdecl std::_Ctr::_Nanv(long double)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+,class std::allocator >(class std::basic_string,class std::allocator > const &,char)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::flush(void)",
    "const std::out_of_range::`vftable'",
    "public: class std::__non_rtti_object & __thiscall std::__non_rtti_object::operator=(class std::__non_rtti_object const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::ios_base & (__cdecl*)(class std::ios_base &))",
    "struct std::_Smanip __cdecl std::resetiosflags(int)",
    "const std::ctype_base::`vftable'",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,char)",
    "public: class std::basic_ifstream > & __thiscall std::basic_ifstream >::operator=(class std::basic_ifstream > const &)",
    "protected: virtual void __thiscall std::overflow_error::_Doraise(void)const",
    "public: void __thiscall std::basic_fstream >::open(char const *,short)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(char,unsigned int)const",
    "protected: void __thiscall std::basic_stringbuf,class std::allocator >::_Init(unsigned short const *,unsigned int,int)",
    "public: __thiscall std::_Timevec::_Timevec(void *)",
    "public: __thiscall std::domain_error::domain_error(class std::domain_error const &)",
    "public: static int __cdecl std::numeric_limits::epsilon(void)",
    "public: char const & __thiscall std::basic_string,class std::allocator >::operator[](unsigned int)const",
    "protected: virtual class std::fpos __thiscall std::basic_streambuf >::seekoff(long,enum std::ios_base::seekdir,int)",
    "public: char const * __thiscall std::ctype::scan_not(short,char const *,char const *)const",
    "bool __cdecl std::operator<(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "protected: void __thiscall std::basic_streambuf >::setg(char *,char *,char *)",
    "public: __thiscall std::_Timevec::_Timevec(class std::_Timevec const &)",
    "public: char const * __thiscall std::_Locinfo::_Getfalse(void)const",
    "const std::moneypunct::`vftable'",
    "public: static unsigned short const * __cdecl std::char_traits::find(unsigned short const *,unsigned int,unsigned short const &)",
    "public: virtual __thiscall std::strstream::~strstream(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::basic_istream > & (__cdecl*)(class std::basic_istream > &))",
    "class std::basic_string,class std::allocator > __cdecl std::operator+,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: class std::basic_filebuf > * __thiscall std::basic_fstream >::rdbuf(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,unsigned short const *)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,signed char)",
    "public: double __thiscall std::_Complex_base::real(void)const",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,bool &)const",
    "private: static int __cdecl std::num_get > >::_Getifld(char *,class std::istreambuf_iterator > &,class std::istreambuf_iterator > &,int,class std::locale const &)",
    "public: static class std::locale::id std::money_put > >::id",
    "protected: void __thiscall std::basic_streambuf >::_Init(unsigned short * *,unsigned short * *,int *,unsigned short * *,unsigned short * *,int *)",
    "bool __cdecl std::uncaught_exception(void)",
    "public: static bool __cdecl std::char_traits::lt(char const &,char const &)",
    "class std::basic_istream > & __cdecl std::operator>>,float>(class std::basic_istream > &,class std::complex &)",
    "public: class std::locale::id & __thiscall std::locale::id::operator=(class std::locale::id const &)",
    "public: virtual __thiscall std::bad_typeid::~bad_typeid(void)",
    "public: void __thiscall std::basic_ostringstream,class std::allocator >::`default constructor closure'(void)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned int &)const",
    "public: static short __cdecl std::_Ctr::_Exp(double *,double,short)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(unsigned short const *,unsigned int)const",
    "protected: void __thiscall std::num_get > >::_Init(class std::_Locinfo const &)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(short)",
    "public: virtual __thiscall std::underflow_error::~underflow_error(void)",
    "public: virtual __thiscall std::__non_rtti_object::~__non_rtti_object(void)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Rep(class std::ostreambuf_iterator >,unsigned short,unsigned int)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,char)",
    "public: class std::logic_error & __thiscall std::logic_error::operator=(class std::logic_error const &)",
    "public: class std::istreambuf_iterator > __thiscall std::money_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,bool,class std::ios_base &,int &,class std::basic_string,class std::allocator > &)const",
    "public: char __thiscall std::basic_ios >::narrow(unsigned short,char)const",
    "public: char const * __thiscall std::_Locinfo::_Getyes(void)const",
    "_FRteps",
    "private: void __thiscall std::_Mpunct::_Makpat(struct std::money_base::pattern &,char,char,char)",
    "public: static char __cdecl std::numeric_limits::round_error(void)",
    "public: static unsigned int __cdecl std::time_put > >::_Getcat(void)",
    "public: void __thiscall std::num_get > >::`default constructor closure'(void)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,class std::complex const &)",
    "class std::basic_istream > & __cdecl std::getline,class std::allocator >(class std::basic_istream > &,class std::basic_string,class std::allocator > &)",
    "public: virtual __thiscall std::money_put > >::~money_put > >(void)",
    "bool __cdecl std::operator==(double const &,class std::complex const &)",
    "class std::complex __cdecl std::operator/(double const &,class std::complex const &)",
    "class std::basic_ostream > & __cdecl std::endl(class std::basic_ostream > &)",
    "public: char __thiscall std::ctype::narrow(unsigned short,char)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(char &)",
    "public: static class std::locale::id std::num_get > >::id",
    "protected: unsigned short * __thiscall std::basic_streambuf >::pbase(void)const",
    "public: static float __cdecl std::_Ctr::atan2(float,float)",
    "private: void __thiscall std::basic_string,class std::allocator >::_Freeze(void)",
    "public: static float __cdecl std::_Ctr::exp(float)",
    "const std::basic_fstream >::`vbtable'{for `std::basic_ostream >'}",
    "public: unsigned short const * __thiscall std::basic_string,class std::allocator >::c_str(void)const",
    "public: __thiscall std::time_get > >::time_get > >(unsigned int)",
    "bool __cdecl std::operator>(char const *,class std::basic_string,class std::allocator > const &)",
    "public: static char __cdecl std::numeric_limits::denorm_min(void)",
    "public: class std::bad_alloc & __thiscall std::bad_alloc::operator=(class std::bad_alloc const &)",
    "public: int __thiscall std::codecvt::out(int &,char const *,char const *,char const * &,char *,char *,char * &)const",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(char const *,char const *,class std::allocator const &)",
    "public: char const * __thiscall std::_Locinfo::_Gettrue(void)const",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::end(void)",
    "const std::messages::`vftable'",
    "public: static class std::locale::id std::time_put > >::id",
    "protected: virtual char __thiscall std::numpunct::do_thousands_sep(void)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::numpunct::grouping(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(unsigned short const *)",
    "public: static bool __cdecl std::ios_base::sync_with_stdio(bool)",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_filebuf >::setbuf(unsigned short *,int)",
    "bool __cdecl std::operator>,class std::allocator >(class std::basic_string,class std::allocator > const &,char const *)",
    "public: __thiscall std::_Complex_base::_Complex_base(double const &,double const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(char const *,unsigned int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,char const *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,char const *,unsigned int)",
    "public: int __thiscall std::basic_streambuf >::sgetn(char *,int)",
    "public: void __thiscall std::bad_typeid::`default constructor closure'(void)",
    "public: void __thiscall std::basic_fstream >::`vbase destructor'(void)",
    "class std::basic_ostream > & __cdecl std::operator<< >(class std::basic_ostream > &,unsigned short)",
    "public: void __thiscall std::basic_ios >::setstate(int,bool)",
    "_Toupper",
    "public: static unsigned long __cdecl std::numeric_limits::denorm_min(void)",
    "bool __cdecl std::operator==(class std::complex const &,long double const &)",
    "bool __cdecl std::operator<=(class std::basic_string,class std::allocator > const &,char const *)",
    "protected: void __thiscall std::codecvt::_Init(class std::_Locinfo const &)",
    "const std::time_put > >::`vftable'",
    "bool __cdecl std::operator!=,class std::allocator >(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(float &)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator+=(float const &)",
    "public: void __thiscall std::basic_string,class std::allocator >::resize(unsigned int)",
    "long double __cdecl std::norm(class std::complex const &)",
    "wctype",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(unsigned short const *,unsigned int,unsigned int)const",
    "struct std::_Smanip __cdecl std::setw(int)",
    "public: __thiscall std::basic_ifstream >::basic_ifstream >(char const *,int)",
    "public: class std::range_error & __thiscall std::range_error::operator=(class std::range_error const &)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,class std::complex &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::time_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,struct tm const *,char,char)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(unsigned short const *,unsigned int,unsigned int)const",
    "public: void __thiscall std::basic_fstream >::close(void)",
    "public: char const * __thiscall std::_Locinfo::_Getno(void)const",
    "double __cdecl std::norm(class std::complex const &)",
    "private: static unsigned short * __cdecl std::basic_string,class std::allocator >::_Psum(unsigned short *,unsigned int)",
    "bool __cdecl std::operator==,class std::allocator >(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "bool __cdecl std::operator!=,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: static bool __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,double)const",
    "public: int __thiscall std::ios_base::width(void)const",
    "public: class std::_Timevec __thiscall std::_Locinfo::_Gettnames(void)const",
    "public: static unsigned short __cdecl std::numeric_limits::denorm_min(void)",
    "public: unsigned short const * __thiscall std::ctype::toupper(unsigned short *,unsigned short const *)const",
    "public: static int __cdecl std::char_traits::compare(unsigned short const *,unsigned short const *,unsigned int)",
    "wcrtomb",
    "public: void __thiscall std::basic_istream >::`vbase destructor'(void)",
    "protected: void __thiscall std::basic_filebuf >::_Init(struct _iobuf *,enum std::basic_filebuf >::_Initfl)",
    "class std::basic_ostream > & __cdecl std::operator<< >(class std::basic_ostream > &,char const *)",
    "protected: virtual struct std::money_base::pattern __thiscall std::_Mpunct::do_pos_format(void)const",
    "public: __thiscall std::basic_filebuf >::basic_filebuf >(class std::basic_filebuf > const &)",
    "public: static float __cdecl std::_Ctr::_Nanv(float)",
    "public: static float __cdecl std::numeric_limits::min(void)",
    "public: static float __cdecl std::numeric_limits::max(void)",
    "public: __thiscall std::domain_error::domain_error(class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator=(class std::basic_ostream > const &)",
    "_FEps",
    "protected: virtual int __thiscall std::basic_streambuf >::underflow(void)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Iput(class std::ostreambuf_iterator >,class std::ios_base &,char,char *,unsigned int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,unsigned int,unsigned short)",
    "public: static void __cdecl std::char_traits::assign(char &,char const &)",
    "protected: void __thiscall std::collate::_Init(class std::_Locinfo const &)",
    "public: static long double __cdecl std::numeric_limits::round_error(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned short const *)",
    "public: class std::bad_cast & __thiscall std::bad_cast::operator=(class std::bad_cast const &)",
    "public: void __thiscall std::basic_stringbuf,class std::allocator >::str(class std::basic_string,class std::allocator > const &)",
    "protected: virtual int __thiscall std::codecvt::do_length(int &,unsigned short const *,unsigned short const *,unsigned int)const",
    "protected: unsigned short * __thiscall std::basic_streambuf >::pptr(void)const",
    "public: __thiscall std::bad_cast::bad_cast(char const *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned int,char,class std::allocator const &)",
    "protected: void __thiscall std::time_put > >::_Init(class std::_Locinfo const &)",
    "public: __thiscall std::_Complex_base::_Complex_base(float const &,float const &)",
    "class std::complex __cdecl std::log10(class std::complex const &)",
    "public: __thiscall std::ostrstream::ostrstream(char *,int,int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned short const *,unsigned short const *)",
    "public: static unsigned int __cdecl std::ctype::_Getcat(void)",
    "protected: void __thiscall std::money_get > >::_Init(class std::_Locinfo const &)",
    "bool __cdecl std::operator>=(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(char,class std::basic_string,class std::allocator > const &)",
    "class std::basic_istream > & __cdecl std::operator>>,class std::allocator >(class std::basic_istream > &,class std::basic_string,class std::allocator > &)",
    "public: class std::basic_ios > & __thiscall std::basic_ios >::copyfmt(class std::basic_ios > const &)",
    "public: void __thiscall std::locale::facet::`default constructor closure'(void)",
    "const std::basic_ostream >::`vbtable'",
    "public: int __thiscall std::codecvt::in(int &,char const *,char const *,char const * &,unsigned short *,unsigned short *,unsigned short * &)const",
    "class std::complex __cdecl std::operator+(double const &,class std::complex const &)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,signed char *)",
    "class std::complex __cdecl std::polar(double const &,double const &)",
    "private: class std::ostreambuf_iterator > __thiscall std::money_put > >::_Putmfld(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,bool,class std::basic_string,class std::allocator >)const",
    "protected: virtual unsigned short __thiscall std::basic_filebuf >::pbackfail(unsigned short)",
    "_FXbig",
    "protected: virtual int __thiscall std::codecvt_base::do_encoding(void)const",
    "public: static short __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,long &)const",
    "protected: virtual int __thiscall std::strstreambuf::pbackfail(int)",
    "public: class std::locale & __thiscall std::locale::_Addfac(class std::locale::facet *,unsigned int,unsigned int)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::money_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,bool,class std::ios_base &,int &,long double &)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,unsigned short const *,unsigned int)",
    "public: void __thiscall std::strstreambuf::freeze(bool)",
    "public: virtual __thiscall std::time_get > >::~time_get > >(void)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::collate::do_transform(unsigned short const *,unsigned short const *)const",
    "public: void __thiscall std::basic_string,class std::allocator >::insert(unsigned short *,unsigned short const *,unsigned short const *)",
    "const std::basic_ifstream >::`vbtable'",
    "public: int __thiscall std::codecvt_base::max_length(void)const",
    "public: class std::basic_streambuf > * __thiscall std::basic_ios >::rdbuf(class std::basic_streambuf > *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,unsigned short const *)",
    "public: class std::ostreambuf_iterator > __thiscall std::money_put > >::put(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,class std::basic_string,class std::allocator > const &)const",
    "public: void __thiscall std::basic_ifstream >::open(char const *,short)",
    "public: static unsigned short __cdecl std::char_traits::to_int_type(unsigned short const &)",
    "public: class std::basic_ostream > * __thiscall std::basic_ios >::tie(void)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(class std::basic_streambuf > &,char)",
    "public: static unsigned int __cdecl std::numpunct::_Getcat(void)",
    "_Cosh",
    "int `protected: void __thiscall std::basic_filebuf >::_Init(struct _iobuf *,enum std::basic_filebuf >::_Initfl)'::`2'::_Stinit",
    "public: __thiscall std::moneypunct::moneypunct(class std::_Locinfo const &,unsigned int)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,class std::basic_string,class std::allocator > &)",
    "public: class std::numeric_limits & __thiscall std::numeric_limits::operator=(class std::numeric_limits const &)",
    "public: static unsigned char __cdecl std::numeric_limits::round_error(void)",
    "const std::basic_ios >::`vftable'",
    "public: __thiscall std::ios_base::operator void *(void)const",
    "struct std::nothrow_t const std::nothrow",
    "public: char __thiscall std::ctype::tolower(char)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_stringstream,class std::allocator >::str(void)const",
    "private: static class std::ostreambuf_iterator > __cdecl std::money_put > >::_Put(class std::ostreambuf_iterator >,unsigned short const *,unsigned int)",
    "public: __thiscall std::logic_error::logic_error(class std::basic_string,class std::allocator > const &)",
    "_LDenorm",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,unsigned int,unsigned short)",
    "public: __thiscall std::ctype::ctype(class std::_Locinfo const &,unsigned int)",
    "public: virtual __thiscall std::strstreambuf::~strstreambuf(void)",
    "public: static unsigned int __cdecl std::num_get > >::_Getcat(void)",
    "class std::basic_istream > & __cdecl std::operator>> >(class std::basic_istream > &,unsigned short &)",
    "private: void __thiscall std::ios_base::_Callfns(enum std::ios_base::event)",
    "bool __cdecl std::operator>=,class std::allocator >(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: float __thiscall std::_Complex_base::imag(void)const",
    "public: int __thiscall std::basic_istream >::readsome(char *,int)",
    "_LSnan",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(long)",
    "public: void __thiscall std::basic_string,class std::allocator >::insert(char *,unsigned int,char)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(char const *)",
    "private: __thiscall std::locale::locale(class std::locale::_Locimp *)",
    "protected: void __thiscall std::basic_streambuf >::setp(char *,char *)",
    "double __cdecl std::abs(class std::complex const &)",
    "public: long double __thiscall std::_Complex_base::imag(void)const",
    "public: __thiscall std::locale::locale(class std::locale const &,class std::locale const &,int)",
    "public: class std::basic_ostream > * __thiscall std::basic_ios >::tie(class std::basic_ostream > *)",
    "public: __thiscall std::complex::complex(class std::complex const &)",
    "public: class std::basic_string,class std::allocator > __thiscall std::numpunct::truename(void)const",
    "public: static unsigned int __cdecl std::num_put > >::_Getcat(void)",
    "bool __cdecl std::operator>,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "class std::complex __cdecl std::operator-(float const &,class std::complex const &)",
    "class std::basic_ostream > std::wcout",
    "public: static double __cdecl std::numeric_limits::epsilon(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator=(class std::basic_istream > const &)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(bool)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::_Pninc(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::unget(void)",
    "double const `double __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_Xl",
    "public: unsigned short __thiscall std::basic_ios >::fill(void)const",
    "public: virtual __thiscall std::runtime_error::~runtime_error(void)",
    "class std::complex __cdecl std::operator/(class std::complex const &,double const &)",
    "_FExp",
    "public: __thiscall std::money_put > >::money_put > >(unsigned int)",
    "bool __cdecl std::operator>=(char const *,class std::basic_string,class std::allocator > const &)",
    "public: bool __thiscall std::ios_base::fail(void)const",
    "protected: virtual int __thiscall std::codecvt::do_encoding(void)const",
    "public: virtual __thiscall std::basic_stringbuf,class std::allocator >::~basic_stringbuf,class std::allocator >(void)",
    "public: unsigned short const * __thiscall std::ctype::is(unsigned short const *,unsigned short const *,short *)const",
    "public: bool __thiscall std::basic_fstream >::is_open(void)const",
    "protected: virtual int __thiscall std::collate::do_compare(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)const",
    "class std::complex __cdecl std::operator*(float const &,class std::complex const &)",
    "protected: virtual int __thiscall std::codecvt::do_max_length(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned short const *,unsigned int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(unsigned short,unsigned int)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(unsigned short)",
    "public: unsigned short __thiscall std::_Mpunct::decimal_point(void)const",
    "public: bool __thiscall std::locale::operator()(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)const",
    "protected: virtual unsigned short __thiscall std::basic_filebuf >::overflow(unsigned short)",
    "protected: virtual int __thiscall std::codecvt_base::do_max_length(void)const",
    "class std::complex & __cdecl std::operator/=(class std::complex &,class std::complex const &)",
    "public: char __thiscall std::basic_ios >::fill(void)const",
    "const std::overflow_error::`vftable'",
    "public: static class std::locale::id std::num_put > >::id",
    "bool __cdecl std::operator!=(class std::complex const &,double const &)",
    "public: char * __thiscall std::basic_string,class std::allocator >::begin(void)",
    "bool __cdecl std::operator!=,class std::allocator >(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "const std::basic_istringstream,class std::allocator >::`vbtable'",
    "public: __thiscall std::codecvt_base::codecvt_base(unsigned int)",
    "protected: virtual unsigned short __thiscall std::ctype::do_tolower(unsigned short)const",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned short const *)const",
    "class std::basic_istream > & __cdecl std::getline,class std::allocator >(class std::basic_istream > &,class std::basic_string,class std::allocator > &,unsigned short)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::egptr(void)const",
    "public: class std::_Locinfo & __thiscall std::_Locinfo::operator=(class std::_Locinfo const &)",
    "protected: void __thiscall std::messages::_Init(class std::_Locinfo const &)",
    "public: virtual __thiscall std::num_get > >::~num_get > >(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::copy(unsigned short *,unsigned int,unsigned int)const",
    "class std::basic_istream > & __cdecl std::operator>>,long double>(class std::basic_istream > &,class std::complex &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,void const *)const",
    "public: void __thiscall std::basic_string,class std::allocator >::insert(unsigned short *,unsigned int,unsigned short)",
    "float __cdecl std::abs(class std::complex const &)",
    "public: static signed char __cdecl std::numeric_limits::epsilon(void)",
    "protected: virtual int __thiscall std::strstreambuf::underflow(void)",
    "const std::basic_stringstream,class std::allocator >::`vftable'",
    "private: static class std::ostreambuf_iterator > __cdecl std::money_put > >::_Rep(class std::ostreambuf_iterator >,char,unsigned int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(char const *,unsigned int)const",
    "class std::complex __cdecl std::operator/(float const &,class std::complex const &)",
    "_Exp",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(char const *,char const *)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(float)",
    "public: __thiscall std::basic_fstream >::basic_fstream >(void)",
    "public: class std::complex & __thiscall std::complex::operator=(float const &)",
    "public: long __thiscall std::collate::hash(char const *,char const *)const",
    "public: static bool __cdecl std::char_traits::eq(unsigned short const &,unsigned short const &)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,double &)const",
    "public: static long double __cdecl std::_Ctr::_Sinh(long double,long double)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,unsigned int,unsigned short)",
    "public: class std::basic_stringbuf,class std::allocator > * __thiscall std::basic_stringstream,class std::allocator >::rdbuf(void)const",
    "public: bool __thiscall std::locale::_Iscloc(void)const",
    "protected: __thiscall std::basic_ios >::basic_ios >(void)",
    "public: unsigned short __thiscall std::_Mpunct::thousands_sep(void)const",
    "float __cdecl std::arg(class std::complex const &)",
    "protected: void __thiscall std::basic_stringbuf,class std::allocator >::_Tidy(void)",
    "public: class std::locale::facet const * __thiscall std::locale::_Getfacet(unsigned int,bool)const",
    "class std::complex __cdecl std::operator+(class std::complex const &,float const &)",
    "protected: virtual char const * __thiscall std::ctype::do_tolower(char *,char const *)const",
    "protected: virtual void __thiscall std::bad_typeid::_Doraise(void)const",
    "const std::ctype::`vftable'",
    "bool __cdecl std::operator>=,class std::allocator >(class std::basic_string,class std::allocator > const &,char const *)",
    "public: __thiscall std::ios_base::Init::~Init(void)",
    "public: unsigned short __thiscall std::ctype::tolower(unsigned short)const",
    "public: static signed char __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: void __thiscall std::codecvt::`default constructor closure'(void)",
    "public: virtual __thiscall std::ctype::~ctype(void)",
    "_Stof",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,float &)const",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Put(class std::ostreambuf_iterator >,char const *,unsigned int)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,signed char const *)",
    "public: bool __thiscall std::ios_base::eof(void)const",
    "public: void __thiscall std::basic_ostream >::osfx(void)",
    "const std::basic_ifstream >::`vftable'",
    "public: __thiscall std::_Locinfo::_Locinfo(class std::_Locinfo const &)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(char const *,unsigned int,class std::allocator const &)",
    "class std::basic_ostream > & __cdecl std::flush(class std::basic_ostream > &)",
    "protected: virtual class std::fpos __thiscall std::strstreambuf::seekpos(class std::fpos,int)",
    "class std::basic_istream > std::wcin",
    "const std::bad_typeid::`vftable'",
    "public: void __thiscall std::basic_string,class std::allocator >::insert(char *,char const *,char const *)",
    "public: class std::basic_string,class std::allocator > __thiscall std::numpunct::falsename(void)const",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,unsigned char &)",
    "public: static unsigned int __cdecl std::numeric_limits::min(void)",
    "public: static unsigned short __cdecl std::char_traits::to_char_type(unsigned short const &)",
    "bool __cdecl std::operator==,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: static float __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(unsigned short const *,unsigned int)const",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,char const *)const",
    "float __cdecl std::norm(class std::complex const &)",
    "protected: virtual int __thiscall std::codecvt::do_length(int &,char const *,char const *,unsigned int)const",
    "class std::complex __cdecl std::operator*(class std::complex const &,double const &)",
    "bool __cdecl std::operator!=(class std::complex const &,long double const &)",
    "public: __thiscall std::basic_stringstream,class std::allocator >::basic_stringstream,class std::allocator >(class std::basic_string,class std::allocator > const &,int)",
    "protected: virtual int __thiscall std::basic_streambuf >::sync(void)",
    "private: void __thiscall std::basic_string,class std::allocator >::_Eos(unsigned int)",
    "public: struct std::money_base::pattern __thiscall std::_Mpunct::pos_format(void)const",
    "bool __cdecl std::operator<=,class std::allocator >(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(char const *)",
    "const std::basic_fstream >::`vftable'",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned short const *,unsigned int,class std::allocator const &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,void const *)const",
    "public: class std::basic_stringstream,class std::allocator > & __thiscall std::basic_stringstream,class std::allocator >::operator=(class std::basic_stringstream,class std::allocator > const &)",
    "public: void __thiscall std::ios_base::unsetf(int)",
    "public: __thiscall std::ctype_base::ctype_base(unsigned int)",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_monthname(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: class std::bad_exception & __thiscall std::bad_exception::operator=(class std::bad_exception const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,unsigned short const *)",
    "public: __thiscall std::_Complex_base::_Complex_base(long double const &,long double const &)",
    "protected: void __thiscall std::_Mpunct::_Init(class std::_Locinfo const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(unsigned short const *,unsigned int)const",
    "protected: virtual unsigned short __thiscall std::ctype::do_widen(char)const",
    "class std::basic_string,class std::allocator > __cdecl std::operator+,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned short)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "protected: virtual int __thiscall std::basic_filebuf >::overflow(int)",
    "public: class std::ostreambuf_iterator > __thiscall std::time_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,struct tm const *,char const *,char const *)const",
    "public: unsigned short __thiscall std::numpunct::thousands_sep(void)const",
    "public: static double __cdecl std::_Ctr::pow(double,double)",
    "public: int __thiscall std::basic_streambuf >::sgetn(unsigned short *,int)",
    "public: static unsigned long __cdecl std::numeric_limits::epsilon(void)",
    "public: class std::basic_filebuf > * __thiscall std::basic_ofstream >::rdbuf(void)const",
    "public: static unsigned int __cdecl std::money_get > >::_Getcat(void)",
    "public: int __thiscall std::codecvt::length(int &,char const *,char const *,unsigned int)const",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator/=(long double const &)",
    "public: __thiscall std::bad_exception::bad_exception(char const *)",
    "public: char const * __thiscall std::ctype::widen(char const *,char const *,char *)const",
    "public: void __thiscall std::codecvt_base::`default constructor closure'(void)",
    "class std::basic_ostream > & __cdecl std::operator<< >(class std::basic_ostream > &,short const *)",
    "public: class std::basic_streambuf > * __thiscall std::basic_ios >::rdbuf(void)const",
    "public: static long double __cdecl std::_Ctr::atan2(long double,long double)",
    "public: __thiscall std::ios_base::ios_base(class std::ios_base const &)",
    "public: static short __cdecl std::numeric_limits::quiet_NaN(void)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::money_put > >::do_put(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,long double)const",
    "public: static long double __cdecl std::numeric_limits::max(void)",
    "public: static char __cdecl std::numeric_limits::max(void)",
    "public: void __thiscall std::basic_string,class std::allocator >::resize(unsigned int,unsigned short)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(char const *)",
    "protected: virtual void __thiscall std::bad_exception::_Doraise(void)const",
    "public: float __thiscall std::_Complex_base::imag(float const &)",
    "public: long __thiscall std::collate::hash(unsigned short const *,unsigned short const *)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,char const *,unsigned int)",
    "public: class std::basic_fstream > & __thiscall std::basic_fstream >::operator=(class std::basic_fstream > const &)",
    "public: static double __cdecl std::_Ctr::atan2(double,double)",
    "public: __thiscall std::basic_ofstream >::basic_ofstream >(char const *,int)",
    "public: unsigned short const * __thiscall std::basic_string,class std::allocator >::begin(void)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::put(char)",
    "_FDenorm",
    "const std::locale::facet::`vftable'",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(char const *,unsigned int)",
    "public: static bool __cdecl std::char_traits::eq_int_type(int const &,int const &)",
    "public: static class std::locale __cdecl std::locale::global(class std::locale const &)",
    "public: void __thiscall std::num_put > >::`default constructor closure'(void)",
    "public: class std::istreambuf_iterator > __thiscall std::money_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,bool,class std::ios_base &,int &,long double &)const",
    "protected: virtual int __thiscall std::time_get > >::do_date_order(void)const",
    "public: static float __cdecl std::_Ctr::sqrt(float)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned long &)const",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned int &)const",
    "public: static unsigned short __cdecl std::numeric_limits::round_error(void)",
    "public: class std::basic_filebuf > * __thiscall std::basic_filebuf >::open(char const *,int)",
    "public: static unsigned short * __cdecl std::char_traits::copy(unsigned short *,unsigned short const *,unsigned int)",
    "protected: virtual int __thiscall std::basic_stringbuf,class std::allocator >::underflow(void)",
    "protected: virtual char const * __thiscall std::ctype::do_widen(char const *,char const *,unsigned short *)const",
    "public: class std::reverse_iterator __thiscall std::basic_string,class std::allocator >::rend(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(char const *,unsigned int,unsigned int)const",
    "public: __thiscall std::basic_istream >::basic_istream >(class std::basic_istream > const &)",
    "public: class std::locale __thiscall std::basic_ios >::imbue(class std::locale const &)",
    "class std::complex __cdecl std::operator/(class std::complex const &,float const &)",
    "mbrlen",
    "public: static long double __cdecl std::_Ctr::ldexp(long double,int)",
    "_FDscale",
    "public: void __thiscall std::basic_ostringstream,class std::allocator >::str(class std::basic_string,class std::allocator > const &)",
    "protected: __thiscall std::ios_base::ios_base(void)",
    "const std::__non_rtti_object::`vftable'",
    "protected: virtual char __thiscall std::ctype::do_tolower(char)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::write(char const *,int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::capacity(void)const",
    "const std::money_base::`vftable'",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(char,unsigned int)const",
    "public: static unsigned char __cdecl std::numeric_limits::infinity(void)",
    "public: static char __cdecl std::numeric_limits::quiet_NaN(void)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,unsigned char)",
    "void __cdecl std::_Xran(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned int,unsigned short)",
    "public: static double __cdecl std::_Ctr::_Cosh(double,double)",
    "protected: virtual void __thiscall std::length_error::_Doraise(void)const",
    "class std::complex __cdecl std::pow(class std::complex const &,long double const &)",
    "protected: virtual char const * __thiscall std::ctype::do_toupper(char *,char const *)const",
    "public: static bool __cdecl std::_Ctr::_Isnan(long double)",
    "const std::basic_ostringstream,class std::allocator >::`vftable'",
    "public: char const * __thiscall std::basic_string,class std::allocator >::c_str(void)const",
    "public: class std::basic_ofstream > & __thiscall std::basic_ofstream >::operator=(class std::basic_ofstream > const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(char const *,unsigned int,unsigned int)const",
    "public: __thiscall std::time_base::time_base(unsigned int)",
    "public: void __thiscall std::ios_base::exceptions(int)",
    "class std::complex & __cdecl std::operator-=(class std::complex &,class std::complex const &)",
    "public: __thiscall std::ios_base::Init::Init(void)",
    "public: static double __cdecl std::numeric_limits::max(void)",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_filebuf >::setbuf(char *,int)",
    "public: class std::basic_filebuf > * __thiscall std::basic_filebuf >::close(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(char *,int,char)",
    "private: static class std::ostreambuf_iterator > __cdecl std::money_put > >::_Put(class std::ostreambuf_iterator >,char const *,unsigned int)",
    "const std::codecvt_base::`vftable'",
    "bool __cdecl std::operator<,class std::allocator >(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "class std::complex __cdecl std::pow(class std::complex const &,int)",
    "public: char const * __thiscall std::_Locinfo::_Getdays(void)const",
    "_Rteps",
    "bool __cdecl std::operator==(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "protected: virtual void __thiscall std::domain_error::_Doraise(void)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(class std::basic_string,class std::allocator > const &)",
    "public: static long __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: static unsigned int __cdecl std::_Mpunct::_Getcat(void)",
    "wctob",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(unsigned short,unsigned int)const",
    "public: void __thiscall std::basic_ofstream >::open(char const *,int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::erase(unsigned int,unsigned int)",
    "public: static unsigned int __cdecl std::numeric_limits::signaling_NaN(void)",
    "bool __cdecl std::operator>(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+,class std::allocator >(class std::basic_string,class std::allocator > const &,char const *)",
    "protected: virtual unsigned short __thiscall std::basic_stringbuf,class std::allocator >::overflow(unsigned short)",
    "public: void __thiscall std::basic_string,class std::allocator >::`default constructor closure'(void)",
    "public: static float __cdecl std::numeric_limits::denorm_min(void)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+,class std::allocator >(unsigned short,class std::basic_string,class std::allocator > const &)",
    "public: bool __thiscall std::locale::operator!=(class std::locale const &)const",
    "public: static long double __cdecl std::_Ctr::sin(long double)",
    "bool __cdecl std::operator<=,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: int __thiscall std::collate::compare(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)const",
    "private: void __thiscall std::basic_string,class std::allocator >::_Tidy(bool)",
    "public: static long __cdecl std::numeric_limits::epsilon(void)",
    "public: virtual __thiscall std::basic_ofstream >::~basic_ofstream >(void)",
    "public: __thiscall std::basic_ostream >::basic_ostream >(class std::basic_streambuf > *,bool,bool)",
    "public: static float __cdecl std::_Ctr::log(float)",
    "public: char __thiscall std::basic_ios >::fill(char)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,class std::basic_string,class std::allocator > const &)const",
    "_FDtest",
    "public: unsigned short __thiscall std::basic_istream >::get(void)",
    "public: __thiscall std::_Mpunct::_Mpunct(class std::_Locinfo const &,unsigned int,bool)",
    "public: virtual __thiscall std::overflow_error::~overflow_error(void)",
    "public: __thiscall std::complex::complex(float const &,float const &)",
    "public: unsigned short __thiscall std::numpunct::decimal_point(void)const",
    "public: __thiscall std::basic_ostream >::basic_ostream >(class std::basic_ostream > const &)",
    "public: static unsigned short * __cdecl std::char_traits::assign(unsigned short *,unsigned int,unsigned short const &)",
    "public: class std::_Ctr & __thiscall std::_Ctr::operator=(class std::_Ctr const &)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::seekp(class std::fpos)",
    "private: static unsigned int __cdecl std::basic_string,class std::allocator >::_Pdif(char const *,char const *)",
    "public: __thiscall std::basic_string,class std::allocator >::~basic_string,class std::allocator >(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(short &)",
    "class std::basic_ostream > & __cdecl std::operator<< >(class std::basic_ostream > &,char)",
    "public: void __thiscall std::basic_ios >::setstate(short)",
    "public: bool __thiscall std::ctype::is(short,char)const",
    "class std::complex __cdecl std::cosh(class std::complex const &)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(class std::basic_string,class std::allocator > const &)",
    "public: char __thiscall std::ctype::narrow(char,char)const",
    "class std::basic_istream > & __cdecl std::getline(class std::basic_istream > &,class std::basic_string,class std::allocator > &)",
    "protected: void __thiscall std::strstreambuf::_Init(int,char *,char *,int)",
    "public: static unsigned long __cdecl std::numeric_limits::max(void)",
    "class std::basic_ostream > & __cdecl std::operator<<,float>(class std::basic_ostream > &,class std::complex const &)",
    "public: class std::ostreambuf_iterator > __thiscall std::money_put > >::put(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,long double)const",
    "public: unsigned short __thiscall std::basic_streambuf >::sbumpc(void)",
    "class std::basic_istream > & __cdecl std::operator>> >(class std::basic_istream > &,unsigned char *)",
    "public: int __thiscall std::ios_base::flags(int)",
    "const std::messages_base::`vftable'",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator+=(double const &)",
    "class std::basic_istream > & __cdecl std::operator>> >(class std::basic_istream > &,char *)",
    "public: __thiscall std::basic_iostream >::basic_iostream >(class std::basic_streambuf > *)",
    "public: class std::basic_string,class std::allocator > __thiscall std::collate::transform(char const *,char const *)const",
    "public: virtual __thiscall std::collate::~collate(void)",
    "class std::basic_ostream > & __cdecl std::operator<<,long double>(class std::basic_ostream > &,class std::complex const &)",
    "public: class std::basic_filebuf > & __thiscall std::basic_filebuf >::operator=(class std::basic_filebuf > const &)",
    "public: bool __thiscall std::basic_istream >::ipfx(bool)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator*=(float const &)",
    "class std::basic_ostream > std::wclog",
    "public: static class std::locale::id std::codecvt::id",
    "public: unsigned short __thiscall std::basic_istream >::peek(void)",
    "public: static unsigned short __cdecl std::numeric_limits::signaling_NaN(void)",
    "private: void __thiscall std::basic_string,class std::allocator >::_Copy(unsigned int)",
    "bool __cdecl std::operator==(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: void __thiscall std::ios_base::setstate(int,bool)",
    "public: virtual __thiscall std::istrstream::~istrstream(void)",
    "public: static unsigned short __cdecl std::numeric_limits::quiet_NaN(void)",
    "class std::complex __cdecl std::operator+(class std::complex const &)",
    "public: char const * __thiscall std::ctype::tolower(char *,char const *)const",
    "protected: virtual int __thiscall std::basic_streambuf >::uflow(void)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+,class std::allocator >(char,class std::basic_string,class std::allocator > const &)",
    "protected: char * __thiscall std::basic_streambuf >::epptr(void)const",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_date(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "class std::basic_istream > & __cdecl std::ws(class std::basic_istream > &)",
    "class std::basic_istream > & __cdecl std::operator>>,double>(class std::basic_istream > &,class std::complex &)",
    "private: static int std::locale::id::_Id_cnt",
    "bool __cdecl std::operator<,class std::allocator >(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "public: __thiscall std::_Locinfo::~_Locinfo(void)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,short *)",
    "public: static float __cdecl std::numeric_limits::epsilon(void)",
    "__int64 const std::_Fpz",
    "public: long double __thiscall std::_Complex_base::real(void)const",
    "public: void __thiscall std::basic_ifstream >::close(void)",
    "public: virtual __thiscall std::time_put > >::~time_put > >(void)",
    "public: __thiscall std::locale::locale(class std::locale const &,char const *,int)",
    "public: int __thiscall std::basic_streambuf >::snextc(void)",
    "const std::basic_stringbuf,class std::allocator >::`vftable'",
    "public: static unsigned short __cdecl std::numeric_limits::min(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(char *,int)",
    "protected: virtual char __thiscall std::ctype::do_narrow(unsigned short,char)const",
    "protected: virtual int __thiscall std::basic_stringbuf,class std::allocator >::pbackfail(int)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(char const *,unsigned int)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned int,char)",
    "mbrtowc",
    "class std::complex __cdecl std::operator*(class std::complex const &,class std::complex const &)",
    "public: static int __cdecl std::char_traits::compare(char const *,char const *,unsigned int)",
    "public: class std::basic_streambuf > & __thiscall std::basic_streambuf >::operator=(class std::basic_streambuf > const &)",
    "const std::time_get > >::`vftable'",
    "protected: virtual int __thiscall std::basic_streambuf >::xsputn(unsigned short const *,int)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,bool &)const",
    "public: static char __cdecl std::numeric_limits::epsilon(void)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,long)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,unsigned int,char)",
    "public: void __thiscall std::basic_istringstream,class std::allocator >::str(class std::basic_string,class std::allocator > const &)",
    "const std::time_base::`vftable'",
    "protected: void __thiscall std::numpunct::_Init(class std::_Locinfo const &)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::_Mpunct::do_positive_sign(void)const",
    "public: virtual char const * __thiscall std::logic_error::what(void)const",
    "bool __cdecl std::operator>,class std::allocator >(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "class std::complex __cdecl std::operator/(long double const &,class std::complex const &)",
    "protected: void __thiscall std::ctype::_Init(class std::_Locinfo const &)",
    "const std::bad_alloc::`vftable'",
    "protected: virtual int __thiscall std::messages::do_open(class std::basic_string,class std::allocator > const &,class std::locale const &)const",
    "bool __cdecl std::operator!=(class std::basic_string,class std::allocator > const &,char const *)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(char,unsigned int)const",
    "public: virtual __thiscall std::basic_stringstream,class std::allocator >::~basic_stringstream,class std::allocator >(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(char const *,unsigned int)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(void const *)",
    "public: __thiscall std::time_put > >::time_put > >(class std::_Locinfo const &,unsigned int)",
    "public: class std::basic_streambuf > * __thiscall std::basic_streambuf >::pubsetbuf(unsigned short *,int)",
    "class std::complex __cdecl std::polar(long double const &)",
    "public: class std::ios_base & __thiscall std::ios_base::copyfmt(class std::ios_base const &)",
    "private: bool __thiscall std::basic_string,class std::allocator >::_Grow(unsigned int,bool)",
    "bool __cdecl std::operator<=(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: int __thiscall std::basic_streambuf >::sgetc(void)",
    "_Getcvt",
    "protected: virtual unsigned short __thiscall std::numpunct::do_decimal_point(void)const",
    "public: struct std::char_traits & __thiscall std::char_traits::operator=(struct std::char_traits const &)",
    "protected: virtual void __thiscall std::range_error::_Doraise(void)const",
    "protected: void __thiscall std::basic_streambuf >::setp(unsigned short *,unsigned short *,unsigned short *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,char const *)",
    "public: void __thiscall std::money_put > >::`default constructor closure'(void)",
    "public: static unsigned int __cdecl std::numeric_limits::denorm_min(void)",
    "public: static short __cdecl std::numeric_limits::infinity(void)",
    "protected: virtual void __thiscall std::underflow_error::_Doraise(void)const",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::numpunct::do_truename(void)const",
    "_FNan",
    "protected: virtual unsigned short __thiscall std::basic_stringbuf,class std::allocator >::underflow(void)",
    "public: __thiscall std::locale::id::operator unsigned int(void)",
    "public: static unsigned short __cdecl std::numeric_limits::infinity(void)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "bool __cdecl std::operator>,class std::allocator >(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::basic_streambuf > *)",
    "protected: virtual void __thiscall std::out_of_range::_Doraise(void)const",
    "public: virtual __thiscall std::numpunct::~numpunct(void)",
    "public: void __thiscall std::basic_istringstream,class std::allocator >::`default constructor closure'(void)",
    "_Dtest",
    "public: virtual char const * __thiscall std::runtime_error::what(void)const",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,void const *)const",
    "public: int __thiscall std::basic_istream >::sync(void)",
    "struct std::_Smanip __cdecl std::setbase(int)",
    "private: int __thiscall std::basic_stringbuf,class std::allocator >::_Mode(int)",
    "protected: virtual int __thiscall std::basic_filebuf >::underflow(void)",
    "public: __thiscall std::basic_stringbuf,class std::allocator >::basic_stringbuf,class std::allocator >(int)",
    "unsigned short const `private: static unsigned short const * __cdecl std::basic_string,class std::allocator >::_Nullstr(void)'::`2'::_C",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::size(void)const",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::_Mpunct::do_curr_symbol(void)const",
    "public: static long __cdecl std::numeric_limits::infinity(void)",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_toupper(unsigned short *,unsigned short const *)const",
    "public: int __thiscall std::codecvt_base::encoding(void)const",
    "public: void __thiscall std::basic_ios >::clear(int,bool)",
    "const std::numpunct::`vftable'",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::seekg(long,enum std::ios_base::seekdir)",
    "protected: void __thiscall std::basic_streambuf >::setp(unsigned short *,unsigned short *)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator*=(double const &)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Iput(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,char *,unsigned int)",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,double &)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(unsigned short,unsigned int)const",
    "public: static double __cdecl std::_Ctr::exp(double)",
    "public: virtual __thiscall std::moneypunct::~moneypunct(void)",
    "const std::underflow_error::`vftable'",
    "class std::complex __cdecl std::exp(class std::complex const &)",
    "_Poly",
    "public: __thiscall std::complex::complex(double const &,double const &)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Rep(class std::ostreambuf_iterator >,char,unsigned int)",
    "public: static short __cdecl std::_Ctr::_Exp(long double *,long double,short)",
    "protected: virtual char __thiscall std::numpunct::do_decimal_point(void)const",
    "protected: __thiscall std::basic_streambuf >::basic_streambuf >(void)",
    "public: static long double __cdecl std::numeric_limits::epsilon(void)",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_year(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: static int __cdecl std::char_traits::to_int_type(char const &)",
    "public: void * & __thiscall std::ios_base::pword(int)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator-=(long double const &)",
    "void __cdecl std::_Xlen(void)",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_weekday(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(char,unsigned int)const",
    "public: void __thiscall std::basic_ios >::clear(short)",
    "public: static double __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: int __thiscall std::messages::open(class std::basic_string,class std::allocator > const &,class std::locale const &)const",
    "public: unsigned short __thiscall std::basic_streambuf >::sgetc(void)",
    "public: static bool __cdecl std::numeric_limits::min(void)",
    "class std::basic_istream > & __cdecl std::getline,class std::allocator >(class std::basic_istream > &,class std::basic_string,class std::allocator > &,char)",
    "const std::money_get > >::`vftable'",
    "protected: unsigned short * __thiscall std::basic_streambuf >::eback(void)const",
    "bool __cdecl std::operator<,class std::allocator >(char const *,class std::basic_string,class std::allocator > const &)",
    "class std::basic_istream > & __cdecl std::operator>> >(class std::basic_istream > &,unsigned short *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,class std::basic_string,class std::allocator > const &)",
    "class std::complex __cdecl std::pow(class std::complex const &,class std::complex const &)",
    "bool __cdecl std::operator>,class std::allocator >(char const *,class std::basic_string,class std::allocator > const &)",
    "protected: char * __thiscall std::basic_streambuf >::egptr(void)const",
    "private: static int std::ios_base::Init::_Init_cnt",
    "class std::basic_ostream > & __cdecl std::operator<< >(class std::basic_ostream > &,unsigned char const *)",
    "public: static unsigned long __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: int __thiscall std::basic_streambuf >::sbumpc(void)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,unsigned short)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(unsigned short const *)",
    "public: static int __cdecl std::char_traits::eof(void)",
    "bool __cdecl std::operator<(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: void __thiscall std::numpunct::`default constructor closure'(void)",
    "_Xbig",
    "public: __thiscall std::basic_ofstream >::basic_ofstream >(void)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+,class std::allocator >(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::basic_istream >::basic_istream >(class std::basic_streambuf > *,bool)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(char const *,class std::basic_string,class std::allocator > const &)",
    "public: int __thiscall std::basic_istream >::readsome(unsigned short *,int)",
    "struct _iobuf * __cdecl std::__Fiopen(char const *,int)",
    "public: static unsigned int __cdecl std::char_traits::length(char const *)",
    "public: __thiscall std::underflow_error::underflow_error(class std::basic_string,class std::allocator > const &)",
    "public: class std::reverse_iterator __thiscall std::basic_string,class std::allocator >::rbegin(void)const",
    "public: static double __cdecl std::numeric_limits::infinity(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(char)",
    "public: __thiscall std::basic_istringstream,class std::allocator >::basic_istringstream,class std::allocator >(class std::basic_string,class std::allocator > const &,int)",
    "public: static int __cdecl std::numeric_limits::quiet_NaN(void)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Fput(class std::ostreambuf_iterator >,class std::ios_base &,char,char const *,unsigned int,unsigned int)",
    "public: __thiscall std::num_put > >::num_put > >(unsigned int)",
    "long double __cdecl std::arg(class std::complex const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)",
    "public: static long double __cdecl std::_Ctr::pow(long double,long double)",
    "protected: virtual class std::fpos __thiscall std::basic_stringbuf,class std::allocator >::seekoff(long,enum std::ios_base::seekdir,int)",
    "public: __thiscall std::numpunct::numpunct(class std::_Locinfo const &,unsigned int)",
    "public: static short __cdecl std::_Ctr::_Exp(float *,float,short)",
    "class std::complex __cdecl std::pow(class std::complex const &,double const &)",
    "public: int __thiscall std::ios_base::precision(void)const",
    "public: int __thiscall std::basic_istream >::gcount(void)const",
    "public: __thiscall std::messages_base::messages_base(unsigned int)",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_string,class std::allocator >::substr(unsigned int,unsigned int)const",
    "const std::collate::`vftable'",
    "public: __thiscall std::complex::complex(long double const &,long double const &)",
    "public: void __thiscall std::time_put > >::`default constructor closure'(void)",
    "public: static double __cdecl std::_Ctr::_Infv(double)",
    "private: static unsigned short const * __cdecl std::basic_string,class std::allocator >::_Psum(unsigned short const *,unsigned int)",
    "protected: virtual void __thiscall std::runtime_error::_Doraise(void)const",
    "public: __thiscall std::money_get > >::money_get > >(unsigned int)",
    "protected: virtual unsigned short __thiscall std::basic_stringbuf,class std::allocator >::pbackfail(unsigned short)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(unsigned short const *,unsigned int,unsigned int)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::seekg(class std::fpos)",
    "protected: __thiscall std::basic_streambuf >::basic_streambuf >(enum std::_Uninitialized)",
    "bool __cdecl std::operator<(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: __thiscall std::locale::locale(class std::locale const &)",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::erase(unsigned short *)",
    "public: __thiscall std::messages::messages(class std::_Locinfo const &,unsigned int)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(void * &)",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekoff(long,short,short)",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_streambuf >::setbuf(char *,int)",
    "bool __cdecl std::operator==(long double const &,class std::complex const &)",
    "public: __thiscall std::__non_rtti_object::__non_rtti_object(class std::__non_rtti_object const &)",
    "protected: virtual unsigned short __thiscall std::_Mpunct::do_decimal_point(void)const",
    "public: void __thiscall std::basic_ostringstream,class std::allocator >::`vbase destructor'(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(class std::basic_streambuf > &,unsigned short)",
    "bool __cdecl std::operator<=,class std::allocator >(char const *,class std::basic_string,class std::allocator > const &)",
    "public: class std::fpos __thiscall std::basic_istream >::tellg(void)",
    "public: static bool __cdecl std::_Ctr::_Isnan(double)",
    "class std::complex __cdecl std::conj(class std::complex const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,unsigned short const *,unsigned int)",
    "class std::basic_istream > std::cin",
    "public: static int __cdecl std::numeric_limits::min(void)",
    "class std::complex __cdecl std::operator/(class std::complex const &,long double const &)",
    "public: static unsigned char __cdecl std::numeric_limits::min(void)",
    "_Inf",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned short const *,class std::allocator const &)",
    "public: static char * __cdecl std::char_traits::move(char *,char const *,unsigned int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator+=(unsigned short)",
    "bool __cdecl std::operator==(class std::basic_string,class std::allocator > const &,char const *)",
    "public: __thiscall std::logic_error::logic_error(class std::logic_error const &)",
    "protected: virtual unsigned short __thiscall std::_Mpunct::do_thousands_sep(void)const",
    "public: void __thiscall std::basic_string,class std::allocator >::reserve(unsigned int)",
    "_Stod",
    "protected: virtual unsigned short __thiscall std::basic_filebuf >::underflow(void)",
    "public: class std::basic_stringbuf,class std::allocator > & __thiscall std::basic_stringbuf,class std::allocator >::operator=(class std::basic_stringbuf,class std::allocator > const &)",
    "public: class std::basic_stringbuf,class std::allocator > * __thiscall std::basic_istringstream,class std::allocator >::rdbuf(void)const",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(char const *,class std::allocator const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(int)",
    "public: __thiscall std::money_base::money_base(unsigned int)",
    "public: void __thiscall std::money_get > >::`default constructor closure'(void)",
    "public: __thiscall std::basic_fstream >::basic_fstream >(class std::basic_fstream > const &)",
    "public: char const * __thiscall std::_Locinfo::_Getmonths(void)const",
    "public: long double __thiscall std::_Complex_base::imag(long double const &)",
    "public: __thiscall std::basic_stringbuf,class std::allocator >::basic_stringbuf,class std::allocator >(class std::basic_string,class std::allocator > const &,int)",
    "_Snan",
    "_LPoly",
    "class std::basic_istream > & __cdecl std::getline(class std::basic_istream > &,class std::basic_string,class std::allocator > &,char)",
    "public: char __thiscall std::basic_ios >::narrow(char,char)const",
    "public: static unsigned int __cdecl std::collate::_Getcat(void)",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Mpunct::curr_symbol(void)const",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)const",
    "public: char * __thiscall std::basic_string,class std::allocator >::insert(char *,char)",
    "public: char __thiscall std::_Mpunct::thousands_sep(void)const",
    "public: static unsigned int __cdecl std::numeric_limits::epsilon(void)",
    "public: char & __thiscall std::basic_string,class std::allocator >::at(unsigned int)",
    "public: static long double __cdecl std::_Ctr::log(long double)",
    "public: __thiscall std::collate::collate(class std::_Locinfo const &,unsigned int)",
    "bool __cdecl std::operator!=(double const &,class std::complex const &)",
    "public: static long double __cdecl std::_Ctr::_Infv(long double)",
    "bool __cdecl std::operator!=(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: class std::_Timevec & __thiscall std::_Timevec::operator=(class std::_Timevec const &)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::gptr(void)const",
    "_Stold",
    "public: __thiscall std::locale::locale(void)",
    "protected: virtual int __thiscall std::codecvt::do_out(int &,char const *,char const *,char const * &,char *,char *,char * &)const",
    "public: static float __cdecl std::numeric_limits::infinity(void)",
    "protected: void __thiscall std::strstreambuf::_Tidy(void)",
    "public: int __thiscall std::basic_streambuf >::sputc(char)",
    "public: class std::locale & __thiscall std::locale::operator=(class std::locale const &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::money_put > >::do_put(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,long double)const",
    "public: static class std::locale::id std::moneypunct::id",
    "protected: virtual int __thiscall std::strstreambuf::overflow(int)",
    "public: class std::locale __thiscall std::basic_streambuf >::getloc(void)",
    "double __cdecl std::_Fabs(class std::complex const &,int *)",
    "private: class std::basic_string,class std::allocator > __thiscall std::money_get > >::_Getmfld(class std::istreambuf_iterator > &,class std::istreambuf_iterator > &,bool,class std::ios_base &)const",
    "public: unsigned short const * __thiscall std::ctype::scan_not(short,unsigned short const *,unsigned short const *)const",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,float &)const",
    "public: char const * __thiscall std::ctype::narrow(char const *,char const *,char,char *)const",
    "double const `double __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_R2",
    "bool __cdecl std::operator==(class std::complex const &,float const &)",
    "public: static signed char __cdecl std::numeric_limits::min(void)",
    "public: unsigned short * __thiscall std::basic_string,class std::allocator >::insert(unsigned short *,unsigned short)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,unsigned short *)",
    "public: static unsigned int __cdecl std::numeric_limits::round_error(void)",
    "protected: char * __thiscall std::basic_streambuf >::eback(void)const",
    "public: virtual __thiscall std::money_base::~money_base(void)",
    "public: __thiscall std::_Mpunct::_Mpunct(unsigned int,bool)",
    "const std::length_error::`vftable'",
    "public: char * __thiscall std::basic_string,class std::allocator >::erase(char *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(class std::basic_string,class std::allocator > const &)",
    "public: struct _Cvtvec __thiscall std::_Locinfo::_Getcvt(void)const",
    "public: class std::basic_streambuf > * __thiscall std::basic_streambuf >::pubsetbuf(char *,int)",
    "class std::basic_ostream > & __cdecl std::operator<<,double>(class std::basic_ostream > &,class std::complex const &)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::seekp(long,enum std::ios_base::seekdir)",
    "public: static bool __cdecl std::numeric_limits::infinity(void)",
    "public: __thiscall std::locale::locale(char const *,int)",
    "public: __thiscall std::basic_ostringstream,class std::allocator >::basic_ostringstream,class std::allocator >(class std::basic_ostringstream,class std::allocator > const &)",
    "protected: virtual bool __thiscall std::codecvt::do_always_noconv(void)const",
    "public: static int __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: class std::locale::facet * __thiscall std::locale::facet::_Decref(void)",
    "public: static unsigned short __cdecl std::char_traits::eof(void)",
    "_Tolower",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Put(class std::ostreambuf_iterator >,unsigned short const *,unsigned int)",
    "const std::ios_base::`vftable'",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::write(unsigned short const *,int)",
    "double const `double __cdecl std::_Fabs(class std::complex const &,int *)'::`29'::_Xh",
    "public: class std::_Locinfo & __thiscall std::_Locinfo::_Addcats(int,char const *)",
    "public: __thiscall std::bad_exception::bad_exception(class std::bad_exception const &)",
    "class std::basic_istream > & __cdecl std::operator>> >(class std::basic_istream > &,unsigned char &)",
    "public: static double __cdecl std::numeric_limits::denorm_min(void)",
    "double __cdecl std::real(class std::complex const &)",
    "public: void __thiscall std::basic_ofstream >::open(char const *,short)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Putc(class std::ostreambuf_iterator >,char const *,unsigned int)",
    "public: static short __cdecl std::numeric_limits::denorm_min(void)",
    "public: static int __cdecl std::numeric_limits::denorm_min(void)",
    "private: unsigned char & __thiscall std::basic_string,class std::allocator >::_Refcnt(unsigned short const *)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::epptr(void)const",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_tolower(unsigned short *,unsigned short const *)const",
    "const std::basic_ostream >::`vftable'",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,unsigned char *)",
    "public: static signed char __cdecl std::numeric_limits::max(void)",
    "public: void __thiscall std::basic_ostream >::`vbase destructor'(void)",
    "public: unsigned short __thiscall std::basic_streambuf >::sputbackc(unsigned short)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::basic_ios > & (__cdecl*)(class std::basic_ios > &))",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::copy(char *,unsigned int,unsigned int)const",
    "public: __thiscall std::_Locinfo::_Locinfo(char const *)",
    "public: void __thiscall std::collate::`default constructor closure'(void)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(unsigned short,class std::basic_string,class std::allocator > const &)",
    "public: static long double __cdecl std::numeric_limits::denorm_min(void)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,unsigned long)const",
    "public: static long double __cdecl std::_Ctr::exp(long double)",
    "public: int __thiscall std::basic_streambuf >::pubsync(void)",
    "public: static unsigned char __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: unsigned short const & __thiscall std::basic_string,class std::allocator >::at(unsigned int)const",
    "public: static unsigned char __cdecl std::numeric_limits::max(void)",
    "public: void __thiscall std::basic_streambuf >::stossc(void)",
    "public: int __thiscall std::ios_base::precision(int)",
    "bool __cdecl std::operator<,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: char __thiscall std::ctype::toupper(char)const",
    "public: static short __cdecl std::numeric_limits::max(void)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+,class std::allocator >(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: static short __cdecl std::numeric_limits::min(void)",
    "public: unsigned short const * __thiscall std::basic_string,class std::allocator >::end(void)const",
    "public: class std::ostreambuf_iterator > __thiscall std::money_put > >::put(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,class std::basic_string,class std::allocator > const &)const",
    "class std::complex __cdecl std::sqrt(class std::complex const &)",
    "public: class std::basic_ostringstream,class std::allocator > & __thiscall std::basic_ostringstream,class std::allocator >::operator=(class std::basic_ostringstream,class std::allocator > const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "class std::complex __cdecl std::operator+(float const &,class std::complex const &)",
    "public: virtual __thiscall std::ios_base::~ios_base(void)",
    "const std::basic_iostream >::`vftable'",
    "public: static unsigned int __cdecl std::numeric_limits::infinity(void)",
    "protected: virtual int __thiscall std::basic_streambuf >::showmanyc(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::ignore(int,unsigned short)",
    "protected: void __thiscall std::basic_streambuf >::_Init(void)",
    "public: class std::ios_base::Init & __thiscall std::ios_base::Init::operator=(class std::ios_base::Init const &)",
    "public: unsigned short const & __thiscall std::basic_string,class std::allocator >::operator[](unsigned int)const",
    "public: static long __cdecl std::numeric_limits::max(void)",
    "class std::complex __cdecl std::operator+(class std::complex const &,double const &)",
    "public: static bool __cdecl std::_Ctr::_Isnan(float)",
    "public: void __thiscall std::basic_istream >::isfx(void)",
    "public: static double __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(unsigned short,unsigned int)const",
    "protected: void __thiscall std::ios_base::_Addstd(void)",
    "wcsrtombs",
    "public: void __thiscall std::ios_base::clear(int,bool)",
    "private: static class std::locale::_Locimp * __cdecl std::locale::_Init(void)",
    "protected: char * __thiscall std::basic_streambuf >::pptr(void)const",
    "public: static float __cdecl std::_Ctr::sin(float)",
    "public: struct std::_Num_float_base & __thiscall std::_Num_float_base::operator=(struct std::_Num_float_base const &)",
    "public: char __thiscall std::numpunct::thousands_sep(void)const",
    "public: static float __cdecl std::_Ctr::pow(float,float)",
    "class std::complex __cdecl std::operator+(class std::complex const &,class std::complex const &)",
    "public: virtual __thiscall std::range_error::~range_error(void)",
    "public: virtual __thiscall std::basic_fstream >::~basic_fstream >(void)",
    "public: class std::out_of_range & __thiscall std::out_of_range::operator=(class std::out_of_range const &)",
    "public: __thiscall std::time_put > >::time_put > >(unsigned int)",
    "protected: virtual int __thiscall std::basic_stringbuf,class std::allocator >::overflow(int)",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Mpunct::grouping(void)const",
    "public: static unsigned short __cdecl std::numeric_limits::max(void)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,unsigned long)const",
    "public: virtual __thiscall std::domain_error::~domain_error(void)",
    "_LNan",
    "public: virtual __thiscall std::basic_filebuf >::~basic_filebuf >(void)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::money_put > >::do_put(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,class std::basic_string,class std::allocator > const &)const",
    "public: class std::ios_base & __thiscall std::ios_base::operator=(class std::ios_base const &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,bool)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::read(char *,int)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(unsigned short *,int)",
    "public: static int __cdecl std::numeric_limits::round_error(void)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(double)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(char const *,unsigned int,unsigned int)const",
    "towctrans",
    "double __cdecl std::arg(class std::complex const &)",
    "public: __thiscall std::basic_streambuf >::basic_streambuf >(class std::basic_streambuf > const &)",
    "public: __thiscall std::basic_ifstream >::basic_ifstream >(class std::basic_ifstream > const &)",
    "public: static char __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: int __thiscall std::ios_base::rdstate(void)const",
    "public: static double __cdecl std::_Ctr::ldexp(double,int)",
    "const std::basic_stringstream,class std::allocator >::`vbtable'{for `std::basic_istream >'}",
    "protected: virtual int __thiscall std::basic_streambuf >::pbackfail(int)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(class std::allocator const &)",
    "public: class std::fpos __thiscall std::basic_streambuf >::pubseekpos(class std::fpos,short)",
    "public: static int __cdecl std::numeric_limits::infinity(void)",
    "public: void __thiscall std::locale::facet::_Incref(void)",
    "public: void __thiscall std::basic_iostream >::`vbase destructor'(void)",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_ostringstream,class std::allocator >::str(void)const",
    "bool __cdecl std::operator!=(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: static signed char __cdecl std::numeric_limits::infinity(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::ignore(int,int)",
    "public: void __thiscall std::moneypunct::`default constructor closure'(void)",
    "_Sinh",
    "const std::basic_iostream >::`vbtable'{for `std::basic_ostream >'}",
    "public: static short __cdecl std::numeric_limits::epsilon(void)",
    "protected: virtual int __thiscall std::codecvt::do_out(int &,unsigned short const *,unsigned short const *,unsigned short const * &,char *,char *,char * &)const",
    "public: class std::locale __thiscall std::ios_base::getloc(void)const",
    "public: virtual __thiscall std::money_get > >::~money_get > >(void)",
    "class std::complex __cdecl std::pow(float const &,class std::complex const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(char const *,unsigned int,unsigned int)const",
    "class std::complex __cdecl std::operator-(class std::complex const &,double const &)",
    "public: virtual __thiscall std::basic_streambuf >::~basic_streambuf >(void)",
    "public: __thiscall std::_Winit::_Winit(void)",
    "_LXbig",
    "public: void __thiscall std::ios_base::register_callback(void (__cdecl*)(enum std::ios_base::event,class std::ios_base &,int),int)",
    "bool __cdecl std::operator>=,class std::allocator >(char const *,class std::basic_string,class std::allocator > const &)",
    "long double __cdecl std::abs(class std::complex const &)",
    "public: int __thiscall std::basic_streambuf >::sputbackc(char)",
    "const std::logic_error::`vftable'",
    "bool __cdecl std::operator!=(class std::complex const &,float const &)",
    "public: unsigned short __thiscall std::basic_streambuf >::snextc(void)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,double)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(char)",
    "public: unsigned short const * __thiscall std::ctype::tolower(unsigned short *,unsigned short const *)const",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,void * &)const",
    "protected: virtual char __thiscall std::ctype::do_toupper(char)const",
    "protected: virtual long __thiscall std::collate::do_hash(char const *,char const *)const",
    "public: unsigned short __thiscall std::ctype::toupper(unsigned short)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned short const *)",
    "_LRteps",
    "class std::basic_istream > & __cdecl std::operator>> >(class std::basic_istream > &,signed char *)",
    "struct std::_Smanip __cdecl std::setiosflags(int)",
    "public: double __thiscall std::_Complex_base::imag(void)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(unsigned short &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "public: class std::runtime_error & __thiscall std::runtime_error::operator=(class std::runtime_error const &)",
    "protected: virtual int __thiscall std::basic_streambuf >::xsgetn(char *,int)",
    "private: static class std::ostreambuf_iterator > __cdecl std::money_put > >::_Rep(class std::ostreambuf_iterator >,unsigned short,unsigned int)",
    "protected: virtual int __thiscall std::basic_filebuf >::sync(void)",
    "public: static unsigned int const std::basic_string,class std::allocator >::npos",
    "_FSinh",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::money_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,bool,class std::ios_base &,int &,class std::basic_string,class std::allocator > &)const",
    "protected: virtual struct std::money_base::pattern __thiscall std::_Mpunct::do_neg_format(void)const",
    "public: unsigned short & __thiscall std::basic_string,class std::allocator >::at(unsigned int)",
    "_Getcoll",
    "public: class std::allocator & __thiscall std::allocator::operator=(class std::allocator const &)",
    "protected: static char * __cdecl std::num_put > >::_Ffmt(char *,char,int)",
    "public: static bool __cdecl std::char_traits::lt(unsigned short const &,unsigned short const &)",
    "protected: virtual class std::basic_streambuf > * __thiscall std::basic_streambuf >::setbuf(unsigned short *,int)",
    "public: void __thiscall std::messages_base::`default constructor closure'(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(unsigned int &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(unsigned short const *,unsigned int)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(char *,int)",
    "public: static float __cdecl std::_Ctr::_Sinh(float,float)",
    "public: void __thiscall std::messages::`default constructor closure'(void)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(unsigned long)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(char const *,unsigned int,unsigned int)const",
    "_LDtest",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)",
    "public: static double __cdecl std::_Ctr::sin(double)",
    "class std::complex __cdecl std::pow(long double const &,class std::complex const &)",
    "_Denorm",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::messages::do_get(int,int,int,class std::basic_string,class std::allocator > const &)const",
    "public: unsigned short const * __thiscall std::ctype::narrow(unsigned short const *,unsigned short const *,char,char *)const",
    "public: void __thiscall std::_Timevec::`default constructor closure'(void)",
    "bool __cdecl std::operator>=(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: __thiscall std::basic_filebuf >::basic_filebuf >(enum std::_Uninitialized)",
    "public: static bool __cdecl std::_Ctr::_Isinf(double)",
    "public: __thiscall std::overflow_error::overflow_error(class std::basic_string,class std::allocator > const &)",
    "public: void __thiscall std::messages::close(int)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::insert(unsigned int,unsigned short const *,unsigned int)",
    "protected: void __thiscall std::basic_filebuf >::_Initcvt(void)",
    "public: int __thiscall std::ios_base::setf(int)",
    "public: static long double __cdecl std::_Ctr::_Cosh(long double,long double)",
    "public: static bool __cdecl std::numeric_limits::denorm_min(void)",
    "public: class std::basic_string,class std::allocator > __thiscall std::locale::name(void)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(int &)",
    "public: __thiscall std::underflow_error::underflow_error(class std::underflow_error const &)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::_Mpunct::do_negative_sign(void)const",
    "public: __thiscall std::basic_ios >::basic_ios >(class std::basic_ios > const &)",
    "const std::basic_filebuf >::`vftable'",
    "double __cdecl std::imag(class std::complex const &)",
    "public: __thiscall std::runtime_error::runtime_error(class std::runtime_error const &)",
    "const std::money_put > >::`vftable'",
    "public: unsigned short __thiscall std::basic_streambuf >::sungetc(void)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator-=(float const &)",
    "public: __thiscall std::bad_alloc::bad_alloc(void)",
    "class std::complex __cdecl std::operator*(class std::complex const &,float const &)",
    "const std::basic_streambuf >::`vftable'",
    "class std::complex __cdecl std::cos(class std::complex const &)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator=(class std::_Complex_base const &)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,bool)const",
    "bool __cdecl std::operator==,class std::allocator >(char const *,class std::basic_string,class std::allocator > const &)",
    "public: char const * __thiscall std::ctype::toupper(char *,char const *)const",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,unsigned long)const",
    "public: static unsigned int __cdecl std::moneypunct::_Getcat(void)",
    "public: char __thiscall std::basic_ios >::widen(char)const",
    "protected: virtual unsigned short __thiscall std::basic_filebuf >::uflow(void)",
    "public: void __thiscall std::basic_stringbuf,class std::allocator >::`default constructor closure'(void)",
    "long double __cdecl std::imag(class std::complex const &)",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_scan_not(short,unsigned short const *,unsigned short const *)const",
    "void __cdecl std::_Nomemory(void)",
    "protected: char * __thiscall std::basic_streambuf >::_Gndec(void)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(class std::basic_string,class std::allocator > const &)const",
    "public: virtual __thiscall std::length_error::~length_error(void)",
    "public: void __thiscall std::basic_istringstream,class std::allocator >::`vbase destructor'(void)",
    "public: void __thiscall std::bad_exception::`default constructor closure'(void)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,long double)const",
    "public: __thiscall std::range_error::range_error(class std::range_error const &)",
    "public: char const * __thiscall std::basic_string,class std::allocator >::end(void)const",
    "bool __cdecl std::operator>=,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned short const *)",
    "public: static double __cdecl std::_Ctr::sqrt(double)",
    "bool __cdecl std::operator<(class std::basic_string,class std::allocator > const &,char const *)",
    "_Getctype",
    "bool __cdecl std::operator==,class std::allocator >(class std::basic_string,class std::allocator > const &,char const *)",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_istringstream,class std::allocator >::str(void)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::basic_stringbuf,class std::allocator >::str(void)const",
    "class std::complex __cdecl std::operator-(class std::complex const &,class std::complex const &)",
    "protected: virtual int __thiscall std::codecvt::do_in(int &,char const *,char const *,char const * &,unsigned short *,unsigned short *,unsigned short * &)const",
    "public: char __thiscall std::ctype::widen(char)const",
    "protected: void __thiscall std::num_put > >::_Init(class std::_Locinfo const &)",
    "public: static int __cdecl std::char_traits::not_eof(int const &)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(unsigned long &)",
    "public: bool __thiscall std::basic_string,class std::allocator >::empty(void)const",
    "public: __thiscall std::overflow_error::overflow_error(class std::overflow_error const &)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(char const *)const",
    "private: static unsigned int __cdecl std::basic_string,class std::allocator >::_Pdif(unsigned short const *,unsigned short const *)",
    "public: __thiscall std::codecvt::codecvt(class std::_Locinfo const &,unsigned int)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(unsigned short const *,unsigned short const *)",
    "public: static double __cdecl std::numeric_limits::round_error(void)",
    "public: class std::complex & __thiscall std::complex::operator=(double const &)",
    "protected: virtual int __thiscall std::codecvt::do_in(int &,char const *,char const *,char const * &,char *,char *,char * &)const",
    "public: static long double __cdecl std::_Ctr::sqrt(long double)",
    "public: class std::basic_stringbuf,class std::allocator > * __thiscall std::basic_ostringstream,class std::allocator >::rdbuf(void)const",
    "public: static float __cdecl std::_Ctr::_Cosh(float,float)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,long)const",
    "public: class std::overflow_error & __thiscall std::overflow_error::operator=(class std::overflow_error const &)",
    "public: class std::basic_ios > & __thiscall std::basic_ios >::operator=(class std::basic_ios > const &)",
    "_Dnorm",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator+=(long double const &)",
    "public: char const * __thiscall std::ctype::is(char const *,char const *,short *)const",
    "bool __cdecl std::operator!=,class std::allocator >(char const *,class std::basic_string,class std::allocator > const &)",
    "public: unsigned short const * __thiscall std::ctype::scan_is(short,unsigned short const *,unsigned short const *)const",
    "public: unsigned short __thiscall std::basic_streambuf >::sputc(unsigned short)",
    "public: __thiscall std::money_get > >::money_get > >(class std::_Locinfo const &,unsigned int)",
    "public: virtual __thiscall std::num_put > >::~num_put > >(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::rfind(unsigned short const *,unsigned int)const",
    "const std::basic_ofstream >::`vbtable'",
    "class std::basic_ostream > & __cdecl std::operator<< >(class std::basic_ostream > &,unsigned char)",
    "public: virtual __thiscall std::basic_ostringstream,class std::allocator >::~basic_ostringstream,class std::allocator >(void)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)",
    "public: __thiscall std::out_of_range::out_of_range(class std::basic_string,class std::allocator > const &)",
    "public: bool __thiscall std::ios_base::operator!(void)const",
    "protected: virtual int __thiscall std::basic_streambuf >::xsgetn(unsigned short *,int)",
    "public: class std::length_error & __thiscall std::length_error::operator=(class std::length_error const &)",
    "_FCosh",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(class std::basic_ios > & (__cdecl*)(class std::basic_ios > &))",
    "public: char * __thiscall std::basic_string,class std::allocator >::end(void)",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Locinfo::_Getname(void)const",
    "public: __thiscall std::basic_istringstream,class std::allocator >::basic_istringstream,class std::allocator >(class std::basic_istringstream,class std::allocator > const &)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,unsigned short const *)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::operator=(unsigned short)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,char &)",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,char *)",
    "public: class std::_Lockit & __thiscall std::_Lockit::operator=(class std::_Lockit const &)",
    "public: struct std::_Num_int_base & __thiscall std::_Num_int_base::operator=(struct std::_Num_int_base const &)",
    "protected: virtual bool __thiscall std::ctype::do_is(short,unsigned short)const",
    "public: virtual __thiscall std::bad_alloc::~bad_alloc(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(unsigned short const *,unsigned int,unsigned int)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(char *,int,char)",
    "public: __thiscall std::num_put > >::num_put > >(class std::_Locinfo const &,unsigned int)",
    "public: static unsigned short * __cdecl std::char_traits::move(unsigned short *,unsigned short const *,unsigned int)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::basic_ostream > & (__cdecl*)(class std::basic_ostream > &))",
    "public: static unsigned int __cdecl std::char_traits::length(unsigned short const *)",
    "public: class std::bad_typeid & __thiscall std::bad_typeid::operator=(class std::bad_typeid const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,class std::basic_string,class std::allocator > const &,unsigned int,unsigned int)",
    "class std::complex __cdecl std::operator-(class std::complex const &,float const &)",
    "public: double __thiscall std::_Complex_base::real(double const &)",
    "public: int __thiscall std::codecvt::out(int &,unsigned short const *,unsigned short const *,unsigned short const * &,char *,char *,char * &)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(double &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(char const *,unsigned int)const",
    "class std::basic_istream > & __cdecl std::operator>> >(class std::basic_istream > &,short *)",
    "class std::complex __cdecl std::operator*(long double const &,class std::complex const &)",
    "public: class std::complex & __thiscall std::complex::operator=(long double const &)",
    "public: char __thiscall std::numpunct::decimal_point(void)const",
    "public: __thiscall std::length_error::length_error(class std::length_error const &)",
    "public: virtual __thiscall std::basic_ostream >::~basic_ostream >(void)",
    "public: static float __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: __thiscall std::basic_fstream >::basic_fstream >(char const *,int)",
    "bool __cdecl std::operator<=(char const *,class std::basic_string,class std::allocator > const &)",
    "bool __cdecl std::operator==(class std::complex const &,class std::complex const &)",
    "protected: virtual unsigned short __thiscall std::ctype::do_toupper(unsigned short)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,class std::basic_string,class std::allocator > const &)",
    "public: virtual __thiscall std::codecvt::~codecvt(void)",
    "public: static double __cdecl std::_Ctr::cos(double)",
    "public: static int __cdecl std::numeric_limits::max(void)",
    "char const `private: static char const * __cdecl std::basic_string,class std::allocator >::_Nullstr(void)'::`2'::_C",
    "public: static long __cdecl std::numeric_limits::quiet_NaN(void)",
    "bool __cdecl std::operator>(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: void __thiscall std::basic_ofstream >::`vbase destructor'(void)",
    "bool __cdecl std::operator>=,class std::allocator >(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "public: void __thiscall std::ctype_base::`default constructor closure'(void)",
    "private: static char const * __cdecl std::basic_string,class std::allocator >::_Nullstr(void)",
    "protected: char * __thiscall std::basic_streambuf >::_Gninc(void)",
    "public: static double __cdecl std::_Ctr::log(double)",
    "public: virtual __thiscall std::ctype_base::~ctype_base(void)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::numpunct::do_grouping(void)const",
    "bool __cdecl std::operator<(char const *,class std::basic_string,class std::allocator > const &)",
    "public: class std::istreambuf_iterator > __thiscall std::time_get > >::get_time(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: __thiscall std::length_error::length_error(class std::basic_string,class std::allocator > const &)",
    "_Mbrtowc",
    "public: static unsigned int __cdecl std::money_put > >::_Getcat(void)",
    "const std::range_error::`vftable'",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::getline(unsigned short *,int)",
    "class std::complex __cdecl std::operator-(class std::complex const &)",
    "public: unsigned short const * __thiscall std::basic_string,class std::allocator >::data(void)const",
    "public: long double __thiscall std::_Complex_base::real(long double const &)",
    "bool __cdecl std::operator!=(long double const &,class std::complex const &)",
    "protected: static short const * __cdecl std::ctype::classic_table(void)",
    "protected: virtual void __thiscall std::bad_alloc::_Doraise(void)const",
    "public: class std::domain_error & __thiscall std::domain_error::operator=(class std::domain_error const &)",
    "public: class std::basic_string,class std::allocator > __thiscall std::collate::transform(unsigned short const *,unsigned short const *)const",
    "public: static class std::locale::id std::ctype::id",
    "protected: __thiscall std::locale::facet::facet(unsigned int)",
    "public: static unsigned char __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::basic_streambuf > *)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,char,bool)const",
    "public: int __thiscall std::ios_base::setf(int,int)",
    "public: void __thiscall std::basic_ifstream >::`vbase destructor'(void)",
    "public: struct _Ctypevec __thiscall std::_Locinfo::_Getctype(void)const",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::put(unsigned short)",
    "protected: char * __thiscall std::basic_streambuf >::gptr(void)const",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned short &)const",
    "public: static long double __cdecl std::numeric_limits::signaling_NaN(void)",
    "public: static unsigned int const std::ctype::table_size",
    "public: __thiscall std::bad_cast::bad_cast(class std::bad_cast const &)",
    "public: int __thiscall std::basic_streambuf >::sputn(unsigned short const *,int)",
    "public: bool __thiscall std::ios_base::bad(void)const",
    "public: virtual __thiscall std::basic_istringstream,class std::allocator >::~basic_istringstream,class std::allocator >(void)",
    "class std::complex __cdecl std::operator*(class std::complex const &,long double const &)",
    "protected: void __thiscall std::basic_streambuf >::gbump(int)",
    "_LDscale",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,short const *)",
    "public: virtual __thiscall std::logic_error::~logic_error(void)",
    "public: int __thiscall std::ios_base::exceptions(void)const",
    "const std::domain_error::`vftable'",
    "_Dscale",
    "protected: void __thiscall std::basic_ios >::init(class std::basic_streambuf > *,bool)",
    "public: __thiscall std::ctype::ctype(unsigned int)",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,unsigned char const *)",
    "public: class std::underflow_error & __thiscall std::underflow_error::operator=(class std::underflow_error const &)",
    "public: void __thiscall std::time_get > >::`default constructor closure'(void)",
    "bool __cdecl std::operator<=,class std::allocator >(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "protected: virtual class std::fpos __thiscall std::strstreambuf::seekoff(long,enum std::ios_base::seekdir,int)",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::uflow(void)",
    "public: __thiscall std::codecvt::codecvt(unsigned int)",
    "public: struct lconv const * __thiscall std::_Locinfo::_Getlconv(void)const",
    "public: static unsigned int __cdecl std::numeric_limits::quiet_NaN(void)",
    "private: unsigned char & __thiscall std::basic_string,class std::allocator >::_Refcnt(char const *)",
    "float __cdecl std::imag(class std::complex const &)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,long double &)const",
    "public: __thiscall std::__non_rtti_object::__non_rtti_object(char const *)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(class std::basic_string,class std::allocator > const &,unsigned int,unsigned int,class std::allocator const &)",
    "public: __thiscall std::basic_stringstream,class std::allocator >::basic_stringstream,class std::allocator >(int)",
    "public: virtual __thiscall std::out_of_range::~out_of_range(void)",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::overflow(unsigned short)",
    "class std::basic_istream > & __cdecl std::operator>> >(class std::basic_istream > &,char &)",
    "long double __cdecl std::real(class std::complex const &)",
    "public: struct std::_Num_base & __thiscall std::_Num_base::operator=(struct std::_Num_base const &)",
    "protected: void __thiscall std::basic_streambuf >::setg(unsigned short *,unsigned short *,unsigned short *)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+,class std::allocator >(char const *,class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::assign(class std::basic_string,class std::allocator > const &)",
    "public: static bool __cdecl std::_Ctr::_Isinf(float)",
    "protected: virtual class std::basic_string,class std::allocator > __thiscall std::numpunct::do_falsename(void)const",
    "public: __thiscall std::basic_ostringstream,class std::allocator >::basic_ostringstream,class std::allocator >(class std::basic_string,class std::allocator > const &,int)",
    "public: virtual __thiscall std::basic_ifstream >::~basic_ifstream >(void)",
    "public: static float __cdecl std::numeric_limits::round_error(void)",
    "_LEps",
    "public: __thiscall std::_Winit::~_Winit(void)",
    "public: int __thiscall std::time_get > >::date_order(void)const",
    "public: class std::basic_istringstream,class std::allocator > & __thiscall std::basic_istringstream,class std::allocator >::operator=(class std::basic_istringstream,class std::allocator > const &)",
    "public: __thiscall std::basic_iostream >::basic_iostream >(class std::basic_iostream > const &)",
    "_Nan",
    "public: static char __cdecl std::char_traits::to_char_type(int const &)",
    "public: unsigned short __thiscall std::basic_ios >::fill(unsigned short)",
    "public: static unsigned char __cdecl std::numeric_limits::denorm_min(void)",
    "private: static class std::locale::_Locimp * std::locale::_Locimp::_Global",
    "public: int __thiscall std::ios_base::width(int)",
    "public: __thiscall std::basic_ios >::basic_ios >(class std::basic_streambuf > *)",
    "public: static bool __cdecl std::_Ctr::_Isinf(long double)",
    "public: bool __thiscall std::ios_base::good(void)const",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_time(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "_Strcoll",
    "public: static unsigned short __cdecl std::numeric_limits::epsilon(void)",
    "public: __thiscall std::ctype::ctype(short const *,bool,unsigned int)",
    "class std::complex __cdecl std::pow(double const &,class std::complex const &)",
    "public: static class std::locale::id std::messages::id",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_of(char const *,unsigned int)const",
    "public: static char const * __cdecl std::char_traits::find(char const *,unsigned int,char const &)",
    "bool __cdecl std::operator>=(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "const std::basic_stringstream,class std::allocator >::`vbtable'{for `std::basic_ostream >'}",
    "public: virtual __thiscall std::basic_iostream >::~basic_iostream >(void)",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(bool &)",
    "public: static bool __cdecl std::numeric_limits::quiet_NaN(void)",
    "protected: static char * __cdecl std::num_put > >::_Ifmt(char *,char,int)",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::underflow(void)",
    "bool __cdecl std::operator>(class std::basic_string,class std::allocator > const &,char const *)",
    "public: static char __cdecl std::numeric_limits::infinity(void)",
    "public: __thiscall std::basic_istringstream,class std::allocator >::basic_istringstream,class std::allocator >(int)",
    "private: static char * __cdecl std::basic_string,class std::allocator >::_Psum(char *,unsigned int)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,long double)const",
    "protected: short const * __thiscall std::ctype::table(void)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(unsigned short,unsigned int)const",
    "public: class std::basic_string,class std::allocator > __thiscall std::_Mpunct::positive_sign(void)const",
    "public: void __thiscall std::basic_stringstream,class std::allocator >::`default constructor closure'(void)",
    "public: __thiscall std::bad_alloc::bad_alloc(class std::bad_alloc const &)",
    "public: void __thiscall std::ios_base::exceptions(short)",
    "protected: virtual unsigned short __thiscall std::basic_streambuf >::pbackfail(unsigned short)",
    "public: bool __thiscall std::basic_ostream >::opfx(void)",
    "public: class std::basic_ostream > & __thiscall std::basic_ostream >::operator<<(class std::ios_base & (__cdecl*)(class std::ios_base &))",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_weekday(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: float __thiscall std::_Complex_base::real(float const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,char const *,unsigned int)",
    "public: __thiscall std::money_put > >::money_put > >(class std::_Locinfo const &,unsigned int)",
    "_LCosh",
    "public: float __thiscall std::_Complex_base::real(void)const",
    "bool __cdecl std::operator!=(char const *,class std::basic_string,class std::allocator > const &)",
    "public: class std::complex & __thiscall std::complex::operator=(class std::complex const &)",
    "public: int __thiscall std::_Mpunct::frac_digits(void)const",
    "public: void __thiscall std::time_base::`default constructor closure'(void)",
    "bool __cdecl std::operator==(char const *,class std::basic_string,class std::allocator > const &)",
    "private: static unsigned short const * __cdecl std::basic_string,class std::allocator >::_Nullstr(void)",
    "protected: virtual void __thiscall std::messages::do_close(int)const",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,void const *)const",
    "protected: virtual int __thiscall std::basic_filebuf >::pbackfail(int)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::money_put > >::do_put(class std::ostreambuf_iterator >,bool,class std::ios_base &,unsigned short,class std::basic_string,class std::allocator > const &)const",
    "public: static float __cdecl std::_Ctr::_Infv(float)",
    "protected: virtual long __thiscall std::collate::do_hash(unsigned short const *,unsigned short const *)const",
    "class std::basic_ostream > std::clog",
    "public: class std::istreambuf_iterator > __thiscall std::num_get > >::get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,void * &)const",
    "public: void __thiscall std::ios_base::clear(short)",
    "private: static char const * __cdecl std::basic_string,class std::allocator >::_Psum(char const *,unsigned int)",
    "protected: virtual void __thiscall std::logic_error::_Doraise(void)const",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,class std::basic_string,class std::allocator > const &)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_date(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: static class std::locale::id std::money_get > >::id",
    "public: static long __cdecl std::numeric_limits::min(void)",
    "public: class std::reverse_iterator __thiscall std::basic_string,class std::allocator >::rbegin(void)",
    "public: class std::locale __thiscall std::ios_base::imbue(class std::locale const &)",
    "private: struct std::ios_base::_Iosarray & __thiscall std::ios_base::_Findarr(int)",
    "class std::basic_ostream > std::cerr",
    "class std::basic_ostream > & __cdecl std::operator<<(class std::basic_ostream > &,char const *)",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_scan_is(short,unsigned short const *,unsigned short const *)const",
    "public: static unsigned int __cdecl std::time_get > >::_Getcat(void)",
    "float __cdecl std::real(class std::complex const &)",
    "public: virtual __thiscall std::time_base::~time_base(void)",
    "protected: unsigned short * __thiscall std::basic_streambuf >::_Gninc(void)",
    "public: __thiscall std::_Timevec::~_Timevec(void)",
    "public: class std::reverse_iterator __thiscall std::basic_string,class std::allocator >::rend(void)const",
    "class std::basic_istream > & __cdecl std::operator>>(class std::basic_istream > &,unsigned short &)",
    "protected: virtual class std::ostreambuf_iterator > __thiscall std::num_put > >::do_put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,long)const",
    "protected: virtual int __thiscall std::collate::do_compare(char const *,char const *,char const *,char const *)const",
    "bool __cdecl std::operator==(class std::complex const &,double const &)",
    "public: __thiscall std::collate::collate(unsigned int)",
    "public: static long double __cdecl std::_Ctr::cos(long double)",
    "const std::basic_istream >::`vftable'",
    "const std::bad_exception::`vftable'",
    "protected: virtual unsigned short __thiscall std::numpunct::do_thousands_sep(void)const",
    "protected: virtual void __thiscall std::basic_streambuf >::imbue(class std::locale const &)",
    "public: bool __thiscall std::basic_filebuf >::is_open(void)const",
    "private: static int std::_Winit::_Init_cnt",
    "class std::complex __cdecl std::polar(float const &,float const &)",
    "public: char const & __thiscall std::basic_string,class std::allocator >::at(unsigned int)const",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(char *,char *,char const *,char const *)",
    "public: virtual __thiscall std::codecvt_base::~codecvt_base(void)",
    "public: int __thiscall std::codecvt::in(int &,char const *,char const *,char const * &,char *,char *,char * &)const",
    "protected: virtual class std::fpos __thiscall std::basic_filebuf >::seekpos(class std::fpos,int)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned long &)const",
    "bool __cdecl std::operator==(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: static short __cdecl std::numeric_limits::round_error(void)",
    "protected: virtual char __thiscall std::_Mpunct::do_thousands_sep(void)const",
    "public: __thiscall std::basic_ifstream >::basic_ifstream >(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(char const *,unsigned int)const",
    "public: class std::basic_filebuf > * __thiscall std::basic_filebuf >::open(char const *,short)",
    "bool __cdecl std::operator<=(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: void __thiscall std::basic_string,class std::allocator >::swap(class std::basic_string,class std::allocator > &)",
    "public: bool __thiscall std::basic_ofstream >::is_open(void)const",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator*=(long double const &)",
    "public: static unsigned int __cdecl std::codecvt::_Getcat(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(unsigned short const *,unsigned int)const",
    "const std::basic_istream >::`vbtable'",
    "public: int __thiscall std::collate::compare(char const *,char const *,char const *,char const *)const",
    "public: static class std::locale const & __cdecl std::locale::classic(void)",
    "_LInf",
    "protected: unsigned short * __thiscall std::basic_streambuf >::_Gndec(void)",
    "class std::complex __cdecl std::operator-(long double const &,class std::complex const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned int,char)",
    "protected: virtual int __thiscall std::basic_streambuf >::xsputn(char const *,int)",
    "public: static unsigned int __cdecl std::numeric_limits::max(void)",
    "protected: virtual char __thiscall std::_Mpunct::do_decimal_point(void)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::putback(char)",
    "public: class std::ostreambuf_iterator > __thiscall std::money_put > >::put(class std::ostreambuf_iterator >,bool,class std::ios_base &,char,long double)const",
    "public: void __thiscall std::basic_string,class std::allocator >::resize(unsigned int,char)",
    "public: __thiscall std::bad_typeid::bad_typeid(char const *)",
    "double const `class std::complex __cdecl std::log(class std::complex const &)'::`6'::_Cl",
    "private: static short const * const std::ctype::_Cltab",
    "public: int __thiscall std::codecvt::length(int &,unsigned short const *,unsigned short const *,unsigned int)const",
    "public: static char * __cdecl std::char_traits::assign(char *,unsigned int,char const &)",
    "public: __thiscall std::basic_istream >::basic_istream >(enum std::_Uninitialized)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "public: static long __cdecl std::numeric_limits::round_error(void)",
    "wctrans",
    "public: void __thiscall std::money_base::`default constructor closure'(void)",
    "public: void __thiscall std::basic_filebuf >::`default constructor closure'(void)",
    "private: static int __cdecl std::num_get > >::_Getffld(char *,class std::istreambuf_iterator > &,class std::istreambuf_iterator > &,class std::locale const &)",
    "public: int __thiscall std::basic_streambuf >::sungetc(void)",
    "public: unsigned short __thiscall std::ctype::widen(char)const",
    "public: virtual __thiscall std::bad_exception::~bad_exception(void)",
    "public: static class std::locale::id std::time_get > >::id",
    "const std::basic_ostringstream,class std::allocator >::`vbtable'",
    "private: static class std::locale::_Locimp * std::locale::_Locimp::_Clocptr",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,bool)const",
    "const std::basic_iostream >::`vbtable'{for `std::basic_istream >'}",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned short *,unsigned short *,unsigned short const *,unsigned short const *)",
    "public: bool __thiscall std::locale::operator==(class std::locale const &)const",
    "public: __thiscall std::_Lockit::~_Lockit(void)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator/=(double const &)",
    "_LExp",
    "class std::complex __cdecl std::operator/(class std::complex const &,class std::complex const &)",
    "const std::runtime_error::`vftable'",
    "protected: void __thiscall std::basic_streambuf >::_Init(char * *,char * *,int *,char * *,char * *,int *)",
    "public: __thiscall std::basic_string,class std::allocator >::basic_string,class std::allocator >(unsigned short const *,unsigned short const *,class std::allocator const &)",
    "protected: char * __thiscall std::basic_streambuf >::_Pninc(void)",
    "public: __thiscall std::locale::locale(enum std::_Uninitialized)",
    "_FInf",
    "public: static signed char __cdecl std::numeric_limits::round_error(void)",
    "protected: static class std::ostreambuf_iterator > __cdecl std::num_put > >::_Fput(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,char const *,unsigned int,unsigned int)",
    "public: __thiscall std::_Lockit::_Lockit(void)",
    "class std::basic_ostream > & __cdecl std::operator<< >(class std::basic_ostream > &,signed char const *)",
    "public: static long double __cdecl std::numeric_limits::min(void)",
    "public: static long __cdecl std::numeric_limits::denorm_min(void)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_of(char const *,unsigned int,unsigned int)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::operator>>(long double &)",
    "public: void __thiscall std::basic_stringstream,class std::allocator >::str(class std::basic_string,class std::allocator > const &)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::replace(unsigned int,unsigned int,unsigned int,char)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::length(void)const",
    "const std::basic_istringstream,class std::allocator >::`vftable'",
    "public: static double __cdecl std::numeric_limits::min(void)",
    "public: __thiscall std::out_of_range::out_of_range(class std::out_of_range const &)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,long &)const",
    "public: bool __thiscall std::codecvt_base::always_noconv(void)const",
    "public: void __thiscall std::ctype::`default constructor closure'(void)",
    "long double __cdecl std::_Fabs(class std::complex const &,int *)",
    "public: char * __thiscall std::basic_string,class std::allocator >::erase(char *,char *)",
    "public: static void __cdecl std::char_traits::assign(unsigned short &,unsigned short const &)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,unsigned short)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(char const *)",
    "public: virtual __thiscall std::basic_ios >::~basic_ios >(void)",
    "public: class std::basic_iostream > & __thiscall std::basic_iostream >::operator=(class std::basic_iostream > const &)",
    "public: class std::_Complex_base & __thiscall std::_Complex_base::operator-=(double const &)",
    "public: int __thiscall std::basic_istream >::peek(void)",
    "class std::basic_ostream > & __cdecl std::operator<< >(class std::basic_ostream > &,unsigned short const *)",
    "public: int __thiscall std::basic_streambuf >::in_avail(void)",
    "private: static int __cdecl std::time_get > >::_Getint(class std::istreambuf_iterator > &,class std::istreambuf_iterator > &,int,int,int &)",
    "private: void __thiscall std::ios_base::_Tidy(void)",
    "bool __cdecl std::operator!=(class std::basic_string,class std::allocator > const &,class std::basic_string,class std::allocator > const &)",
    "class std::basic_istream > & __cdecl std::operator>> >(class std::basic_istream > &,signed char &)",
    "public: __thiscall std::basic_ofstream >::basic_ofstream >(class std::basic_ofstream > const &)",
    "public: static bool __cdecl std::char_traits::eq(char const &,char const &)",
    "public: static bool __cdecl std::numeric_limits::max(void)",
    "public: static bool const std::moneypunct::intl",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(unsigned short const *,class std::basic_string,class std::allocator > const &)",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,unsigned short,long double)const",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_is(unsigned short const *,unsigned short const *,short *)const",
    "class std::complex & __cdecl std::operator+=(class std::complex &,class std::complex const &)",
    "public: __thiscall std::basic_ostringstream,class std::allocator >::basic_ostringstream,class std::allocator >(int)",
    "public: char __thiscall std::_Mpunct::decimal_point(void)const",
    "public: static bool __cdecl std::numeric_limits::round_error(void)",
    "public: int __thiscall std::basic_string,class std::allocator >::compare(unsigned int,unsigned int,unsigned short const *)const",
    "public: static char __cdecl std::numeric_limits::min(void)",
    "class std::complex __cdecl std::sin(class std::complex const &)",
    "public: __thiscall std::runtime_error::runtime_error(class std::basic_string,class std::allocator > const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::max_size(void)const",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_first_not_of(unsigned short,unsigned int)const",
    "bool __cdecl std::operator==(float const &,class std::complex const &)",
    "public: virtual __thiscall std::basic_istream >::~basic_istream >(void)",
    "public: static long double __cdecl std::numeric_limits::quiet_NaN(void)",
    "public: void __thiscall std::complex::`default constructor closure'(void)",
    "public: bool __thiscall std::ctype::is(short,unsigned short)const",
    "public: class std::ostreambuf_iterator > __thiscall std::time_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,struct tm const *,char,char)const",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_year(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: __thiscall std::bad_typeid::bad_typeid(class std::bad_typeid const &)",
    "class std::complex __cdecl std::operator-(class std::complex const &,long double const &)",
    "public: unsigned int __thiscall std::basic_string,class std::allocator >::find_last_not_of(class std::basic_string,class std::allocator > const &,unsigned int)const",
    "class std::basic_ostream > & __cdecl std::ends(class std::basic_ostream > &)",
    "const std::num_put > >::`vftable'",
    "public: char const * __thiscall std::basic_string,class std::allocator >::begin(void)const",
    "public: class std::basic_istream > & __thiscall std::basic_istream >::get(class std::basic_streambuf > &)",
    "mbsrtowcs",
    "protected: void __thiscall std::ios_base::_Init(void)",
    "bool __cdecl std::operator!=,class std::allocator >(class std::basic_string,class std::allocator > const &,char const *)",
    "public: char const * __thiscall std::ctype::scan_is(short,char const *,char const *)const",
    "public: static unsigned long __cdecl std::numeric_limits::round_error(void)",
    "public: __thiscall std::numpunct::numpunct(unsigned int)",
    "class std::complex __cdecl std::operator+(class std::complex const &,long double const &)",
    "class std::complex __cdecl std::polar(long double const &,long double const &)",
    "public: class std::basic_string,class std::allocator > __thiscall std::messages::get(int,int,int,class std::basic_string,class std::allocator > const &)const",
    "public: class std::ostreambuf_iterator > __thiscall std::num_put > >::put(class std::ostreambuf_iterator >,class std::ios_base &,char,long)const",
    "public: static double __cdecl std::_Ctr::_Sinh(double,double)",
    "public: class std::basic_string,class std::allocator > & __thiscall std::basic_string,class std::allocator >::append(unsigned int,unsigned short)",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::time_get > >::do_get_monthname(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,struct tm *)const",
    "public: class std::_Winit & __thiscall std::_Winit::operator=(class std::_Winit const &)",
    "public: __thiscall std::messages::messages(unsigned int)",
    "public: static unsigned char __cdecl std::numeric_limits::epsilon(void)",
    "public: static bool __cdecl std::char_traits::eq_int_type(unsigned short const &,unsigned short const &)",
    "const std::basic_ofstream >::`vftable'",
    "public: void __thiscall std::bad_cast::`default constructor closure'(void)",
    "private: static void __cdecl std::locale::_Tidy(void)",
    "class std::basic_string,class std::allocator > __cdecl std::operator+(class std::basic_string,class std::allocator > const &,char const *)",
    "_FDnorm",
    "const std::codecvt::`vftable'",
    "_Wcrtomb",
    "public: char const * __thiscall std::ctype::widen(char const *,char const *,unsigned short *)const",
    "public: virtual __thiscall std::ostrstream::~ostrstream(void)",
    "protected: virtual unsigned short const * __thiscall std::ctype::do_narrow(unsigned short const *,unsigned short const *,char,char *)const",
    "class std::complex __cdecl std::polar(float const &)",
    "public: class std::basic_filebuf > * __thiscall std::basic_ifstream >::rdbuf(void)const",
    "private: static bool std::ios_base::_Sync",
    "protected: virtual class std::istreambuf_iterator > __thiscall std::num_get > >::do_get(class std::istreambuf_iterator >,class std::istreambuf_iterator >,class std::ios_base &,int &,unsigned short &)const",
    "public: void __thiscall std::_Locinfo::`default constructor closure'(void)",
    "_LSinh",
    "protected: virtual class std::fpos __thiscall std::basic_stringbuf,class std::allocator >::seekpos(class std::fpos,int)"
  ],
  "msvcr70.dll": [
    "__p___winitenv",
    "_adj_fprem",
    "_mbsncat",
    "_seterrormode",
    "__p__pgmptr",
    "__iscsym",
    "public: int __thiscall type_info::operator==(class type_info const &)const",
    "_setmaxstdio",
    "_strlwr",
    "_unloaddll",
    "void (__cdecl*__cdecl set_unexpected(void (__cdecl*)(void)))(void)",
    "strcspn",
    "_heapchk",
    "strtod",
    "_osplatform",
    "__crtGetLocaleInfoW",
    "remove",
    "public: virtual __thiscall bad_typeid::~bad_typeid(void)",
    "_resetstkoflw",
    "_daylight",
    "_mkdir",
    "_controlfp",
    "_waccess",
    "_ismbbalpha",
    "localeconv",
    "_CRT_RTC_INIT",
    "fputc",
    "_wfsopen",
    "_findnexti64",
    "_rmdir",
    "setlocale",
    "_CIlog",
    "iswupper",
    "_winmajor",
    "_sopen",
    "__p__pwctype",
    "_fputwchar",
    "_tzset",
    "_fpieee_flt",
    "tanh",
    "__uncaught_exception",
    "_flsbuf",
    "wcstombs",
    "iscntrl",
    "_atodbl",
    "__CxxUnregisterExceptionObject",
    "_atoldbl",
    "_wenviron",
    "_spawnve",
    "wcscpy",
    "_setjmp3",
    "_wasctime",
    "_wstati64",
    "isgraph",
    "_splitpath",
    "isprint",
    "void (__cdecl*__cdecl _set_se_translator(void (__cdecl*)(unsigned int,struct _EXCEPTION_POINTERS *)))(unsigned int,struct _EXCEPTION_POINTERS *)",
    "void (__cdecl*__cdecl set_new_handler(void (__cdecl*)(void)))(void)",
    "_flushall",
    "rand",
    "_lsearch",
    "_tempnam",
    "_ungetwch",
    "rename",
    "_getdcwd",
    "fabs",
    "_wmkdir",
    "__DestructExceptionObject",
    "div",
    "__lc_clike",
    "_ismbbkprint",
    "cos",
    "cosh",
    "ftell",
    "swprintf",
    "_wtmpnam",
    "_wmakepath",
    "putchar",
    "_cwscanf",
    "_gcvt",
    "_wcsrev",
    "void __cdecl operator delete[](void *)",
    "_adj_fdiv_m64",
    "_ctype",
    "__crtLCMapStringW",
    "__set_buffer_overrun_handler",
    "_spawnlp",
    "_putw",
    "_ui64toa",
    "_safe_fdiv",
    "_spawnvpe",
    "_heapwalk",
    "__initenv",
    "_mbccpy",
    "_ismbstrail",
    "_mbcjmstojis",
    "_pipe",
    "difftime",
    "_chdir",
    "_wfindnext64",
    "_cscanf",
    "rewind",
    "_strupr",
    "_strtoui64",
    "_winver",
    "_CIatan2",
    "_CIpow",
    "asctime",
    "_filelengthi64",
    "fclose",
    "_wspawnve",
    "_CIsinh",
    "__pwctype_func",
    "_filbuf",
    "_mbsnicmp",
    "_strnicoll",
    "const bad_cast::`vftable'",
    "_getche",
    "_fullpath",
    "getwchar",
    "_fpreset",
    "__lconv_init",
    "_EH_prolog",
    "clock",
    "_adj_fdivr_m32",
    "putwc",
    "_wsetlocale",
    "_ismbbgraph",
    "_aligned_offset_malloc",
    "_ismbcspace",
    "_execvp",
    "_pgmptr",
    "_strncoll",
    "_CItan",
    "__iob_func",
    "_swab",
    "_mbscoll",
    "_stat",
    "__fpecode",
    "_strdate",
    "_mbsnbcnt",
    "__RTtypeid",
    "_copysign",
    "__p__iob",
    "_wgetcwd",
    "_mbslwr",
    "_wsplitpath",
    "atof",
    "wcsncpy",
    "public: __thiscall exception::exception(class exception const &)",
    "public: virtual void * __thiscall bad_cast::`vector deleting destructor'(unsigned int)",
    "iswctype",
    "_ungetch",
    "_fdopen",
    "_wctime64",
    "fgetws",
    "_chkesp",
    "__CxxExceptionFilter",
    "_mbbtombc",
    "public: int __thiscall type_info::operator!=(class type_info const &)const",
    "_cwait",
    "_popen",
    "_CIasin",
    "_memccpy",
    "_CIlog10",
    "_mbsdup",
    "free",
    "_j1",
    "_lseek",
    "_adj_fptan",
    "strtoul",
    "_cprintf",
    "_vscprintf",
    "_wtof",
    "_wctype",
    "__unguarded_readlc_active",
    "ispunct",
    "wcstoul",
    "_ctime64",
    "_endthread",
    "_fsopen",
    "_putwch",
    "_mbsncoll",
    "___setlc_active_func",
    "strcmp",
    "_aligned_malloc",
    "_kbhit",
    "_findnext64",
    "_ultoa",
    "__RTCastToVoid",
    "vwprintf",
    "_cexit",
    "_ismbckata",
    "isalpha",
    "vsprintf",
    "_heapset",
    "getc",
    "__CxxCallUnwindDtor",
    "_lrotr",
    "___lc_codepage_func",
    "_mbsnbcpy",
    "_wexecle",
    "_ismbclegal",
    "int __cdecl _query_new_mode(void)",
    "__p___argc",
    "_execvpe",
    "void * __cdecl operator new[](unsigned int)",
    "fmod",
    "void __cdecl operator delete(void *)",
    "_rotr",
    "_wspawnl",
    "_mbsicmp",
    "_mbsnbicoll",
    "_mbscspn",
    "_ismbbprint",
    "public: virtual void * __thiscall bad_typeid::`vector deleting destructor'(unsigned int)",
    "_wstat",
    "_fcvt",
    "___mb_cur_max_func",
    "acos",
    "atoi",
    "iswpunct",
    "_getpid",
    "__p___wargv",
    "_mbsninc",
    "clearerr",
    "_execve",
    "_getdiskfree",
    "wcspbrk",
    "_findfirst64",
    "_get_sbh_threshold",
    "_HUGE",
    "__p___mb_cur_max",
    "__p__acmdln",
    "_open_osfhandle",
    "public: virtual __thiscall bad_cast::~bad_cast(void)",
    "wcslen",
    "_setjmp",
    "_ismbbkalnum",
    "_snprintf",
    "sscanf",
    "_safe_fprem",
    "_strtoi64",
    "wscanf",
    "atol",
    "_adj_fdiv_r",
    "_Getdays",
    "public: virtual void * __thiscall exception::`vector deleting destructor'(unsigned int)",
    "_mbctohira",
    "_putch",
    "public: virtual void * __thiscall bad_typeid::`scalar deleting destructor'(unsigned int)",
    "_ismbcdigit",
    "_ismbcpunct",
    "_wcsnset",
    "ceil",
    "_heapused",
    "_execv",
    "_adj_fpatan",
    "__buffer_overrun",
    "_wcsnicoll",
    "_iob",
    "_statusfp",
    "_wfindnexti64",
    "public: virtual __thiscall type_info::~type_info(void)",
    "_y0",
    "_fstat64",
    "_wstrtime",
    "strtok",
    "_mbsdec",
    "is_wctype",
    "__set_app_type",
    "public: __thiscall __non_rtti_object::__non_rtti_object(class __non_rtti_object const &)",
    "_wrename",
    "__argv",
    "public: char const * __thiscall type_info::raw_name(void)const",
    "scanf",
    "public: virtual void * __thiscall __non_rtti_object::`vector deleting destructor'(unsigned int)",
    "_ltoa",
    "_snscanf",
    "_stat64",
    "_strset",
    "_getw",
    "_ismbclower",
    "_mbsspnp",
    "_mbcasemap",
    "_ftol",
    "_snwprintf",
    "public: int __thiscall type_info::before(class type_info const &)const",
    "_fstati64",
    "_getwch",
    "tan",
    "__p__osver",
    "_mktemp",
    "_mbsnicoll",
    "_inpd",
    "_wsopen",
    "_wputenv",
    "_itow",
    "_mbsupr",
    "_except_handler2",
    "_mbctombb",
    "_ui64tow",
    "public: __thiscall bad_cast::bad_cast(class bad_cast const &)",
    "_fgetchar",
    "tmpnam",
    "_vsnwprintf",
    "_CIsin",
    "__CxxFrameHandler",
    "_ismbslead",
    "wcstol",
    "_getdllprocaddr",
    "_Strftime",
    "void __cdecl terminate(void)",
    "fgetpos",
    "wctomb",
    "_ismbcprint",
    "__p__fmode",
    "_pwctype",
    "_ftime",
    "_mbsbtype",
    "strlen",
    "_set_SSE2_enable",
    "_CIatan",
    "_mbsncpy",
    "_dup2",
    "_Gettnames",
    "_fcloseall",
    "_utime64",
    "_mbsicoll",
    "int (__cdecl*__cdecl _query_new_handler(void))(unsigned int)",
    "_local_unwind2",
    "atexit",
    "_strerror",
    "__CxxQueryExceptionSize",
    "_safe_fprem1",
    "_stricoll",
    "isalnum",
    "_control87",
    "public: class bad_typeid & __thiscall bad_typeid::operator=(class bad_typeid const &)",
    "public: class bad_cast & __thiscall bad_cast::operator=(class bad_cast const &)",
    "strncpy",
    "_telli64",
    "raise",
    "_chsize",
    "_mbstok",
    "_set_error_mode",
    "_toupper",
    "_ltow",
    "int (__cdecl*__cdecl _set_new_handler(int (__cdecl*)(unsigned int)))(unsigned int)",
    "_environ",
    "_tolower",
    "_mbbtype",
    "_localtime64",
    "_strnicmp",
    "_execl",
    "_strnset",
    "public: void __thiscall bad_typeid::`default constructor closure'(void)",
    "_aexit_rtn",
    "_mbscmp",
    "_i64tow",
    "_wfindfirst",
    "_scprintf",
    "_eof",
    "_mbctype",
    "memmove",
    "__p__daylight",
    "_mbctolower",
    "_wexeclp",
    "__winitenv",
    "_mbsnbset",
    "_dup",
    "_getsystime",
    "const bad_typeid::`vftable'",
    "_fpclass",
    "_timezone",
    "islower",
    "strcat",
    "public: __thiscall __non_rtti_object::__non_rtti_object(char const *)",
    "wcsrchr",
    "__getmainargs",
    "exit",
    "time",
    "memcmp",
    "abort",
    "ctime",
    "_beginthread",
    "_seh_longjmp_unwind",
    "_execlp",
    "public: __thiscall bad_cast::bad_cast(char const *)",
    "_unlink",
    "system",
    "_XcptFilter",
    "_callnewh",
    "__badioinfo",
    "_safe_fdivr",
    "__argc",
    "getenv",
    "_execle",
    "memset",
    "_isctype",
    "_setmode",
    "public: virtual char const * __thiscall exception::what(void)const",
    "__crtCompareStringW",
    "sqrt",
    "_purecall",
    "_cgets",
    "frexp",
    "_ismbcl1",
    "_j0",
    "_getcwd",
    "fgetwc",
    "iswascii",
    "_ismbcgraph",
    "__unDNameEx",
    "_fstat",
    "_strrev",
    "_ultow",
    "fwrite",
    "_getdrive",
    "sinh",
    "_jn",
    "_ismbbpunct",
    "public: __thiscall bad_cast::bad_cast(char const * const &)",
    "_mbsstr",
    "__p__winver",
    "realloc",
    "_spawnlpe",
    "_CIfmod",
    "_CIcosh",
    "_errno",
    "_yn",
    "_msize",
    "log",
    "strncat",
    "_mbschr",
    "_cabs",
    "_cputs",
    "_getch",
    "_loaddll",
    "memcpy",
    "swscanf",
    "_mbclen",
    "_set_sbh_threshold",
    "_initterm",
    "freopen",
    "_mbscpy",
    "_wstrdate",
    "_adjust_fdiv",
    "wcsspn",
    "_wexecvpe",
    "_hypot",
    "_spawnl",
    "_wcstoui64",
    "_heapmin",
    "log10",
    "public: __thiscall bad_typeid::bad_typeid(char const *)",
    "__p__dstbias",
    "_CIsqrt",
    "_finite",
    "_wfindnext",
    "_write",
    "_gmtime64",
    "setbuf",
    "_exit",
    "_mbspbrk",
    "_findclose",
    "_ismbcalpha",
    "_memicmp",
    "_scalb",
    "_wcslwr",
    "isxdigit",
    "_pclose",
    "strtol",
    "_strtime",
    "_vscwprintf",
    "void * __cdecl operator new(unsigned int)",
    "public: __thiscall exception::exception(void)",
    "_futime64",
    "vfwprintf",
    "fscanf",
    "_endthreadex",
    "fopen",
    "strxfrm",
    "asin",
    "modf",
    "pow",
    "const __non_rtti_object::`vftable'",
    "_except_handler3",
    "_mktime64",
    "_time64",
    "_logb",
    "mbstowcs",
    "__iscsymf",
    "_wexeclpe",
    "_wfdopen",
    "_lfind",
    "_wcsicoll",
    "fprintf",
    "_mbsinc",
    "__p__winminor",
    "tmpfile",
    "_global_unwind2",
    "_wcreat",
    "ldexp",
    "__lc_codepage",
    "_sys_nerr",
    "_ismbcupper",
    "putwchar",
    "_clearfp",
    "_locking",
    "_wcsdup",
    "_wcsupr",
    "fputs",
    "_wexecve",
    "__toascii",
    "strchr",
    "malloc",
    "_itoa",
    "sin",
    "_expand",
    "_mbstrlen",
    "_pctype",
    "wcsstr",
    "public: void __thiscall bad_cast::`default constructor closure'(void)",
    "_ftime64",
    "_tell",
    "_wspawnvp",
    "_ismbblead",
    "public: class __non_rtti_object & __thiscall __non_rtti_object::operator=(class __non_rtti_object const &)",
    "_commit",
    "_makepath",
    "_stricmp",
    "_wfindfirst64",
    "sprintf",
    "_wcsicmp",
    "_mbsnset",
    "_wchdir",
    "__p__wpgmptr",
    "_wmktemp",
    "_mbsset",
    "_wsystem",
    "fflush",
    "fgetc",
    "int __cdecl _set_new_mode(int)",
    "iswspace",
    "ldiv",
    "setvbuf",
    "_wfindfirsti64",
    "wcschr",
    "_wcmdln",
    "floor",
    "_wtoi",
    "_umask",
    "strerror",
    "_osver",
    "vprintf",
    "_mbctoupper",
    "_creat",
    "_getws",
    "_isatty",
    "_rmtmp",
    "_utime",
    "_wctime",
    "const exception::`vftable'",
    "_ismbcsymbol",
    "__unDName",
    "_assert",
    "isdigit",
    "feof",
    "_mbsrev",
    "_strcmpi",
    "public: class exception & __thiscall exception::operator=(class exception const &)",
    "strrchr",
    "_filelength",
    "strftime",
    "__CxxCallUnwindVecDtor",
    "wcstod",
    "iswcntrl",
    "_findfirst",
    "_sys_errlist",
    "_mbslen",
    "__setusermatherr",
    "_longjmpex",
    "void (__cdecl*__cdecl set_terminate(void (__cdecl*)(void)))(void)",
    "__p__commode",
    "_searchenv",
    "_adj_fdiv_m32i",
    "_ecvt",
    "_fmode",
    "getwc",
    "_outpd",
    "ungetwc",
    "_Getmonths",
    "_c_exit",
    "putc",
    "isleadbyte",
    "_heapadd",
    "fseek",
    "__STRINGTOLD",
    "_CIcos",
    "_mbsnbcoll",
    "vswprintf",
    "_wtempnam",
    "__p__timezone",
    "__p__wcmdln",
    "_close",
    "__p__environ",
    "iswalpha",
    "iswgraph",
    "_execlpe",
    "_mbcjistojms",
    "__dllonexit",
    "_wfullpath",
    "_fputchar",
    "_wtol",
    "_beginthreadex",
    "_wspawnlp",
    "_commode",
    "_wspawnle",
    "toupper",
    "calloc",
    "labs",
    "_inp",
    "localtime",
    "public: virtual __thiscall exception::~exception(void)",
    "$I10_OUTPUT",
    "_mbsnbcat",
    "fwprintf",
    "_scwprintf",
    "_sleep",
    "iswprint",
    "_lrotl",
    "_wtoi64",
    "_adj_fdivr_m16i",
    "_winminor",
    "_strdup",
    "__crtLCMapStringA",
    "__isascii",
    "strcpy",
    "wcsncat",
    "_ismbchira",
    "_CIexp",
    "__pioinfo",
    "__p__mbcasemap",
    "__threadhandle",
    "_ismbcalnum",
    "isupper",
    "_ismbbtrail",
    "_open",
    "_wcsnicmp",
    "_wcsncoll",
    "signal",
    "_CxxThrowException",
    "_getmaxstdio",
    "wcscat",
    "_wsearchenv",
    "_chmod",
    "_lseeki64",
    "__crtGetStringTypeW",
    "__p__winmajor",
    "_getdrives",
    "_findfirsti64",
    "_ismbbalnum",
    "_wopen",
    "_putenv",
    "_chgsign",
    "srand",
    "___lc_handle_func",
    "iswalnum",
    "puts",
    "_adj_fprem1",
    "_wgetenv",
    "_aligned_realloc",
    "__p___initenv",
    "__pxcptinfoptrs",
    "__setlc_active",
    "_putws",
    "_setsystime",
    "__p___argv",
    "__wgetmainargs",
    "_wrmdir",
    "void __cdecl unexpected(void)",
    "strpbrk",
    "wcsxfrm",
    "_spawnv",
    "mbtowc",
    "ungetc",
    "_mbsrchr",
    "__security_error_handler",
    "_wfopen",
    "_ismbbkpunct",
    "wcsftime",
    "_fileinfo",
    "exp",
    "strstr",
    "_cwprintf",
    "_CItanh",
    "_aligned_free",
    "_unlock",
    "_futime",
    "_inpw",
    "wcscspn",
    "_lock",
    "__wcserror",
    "qsort",
    "_y1",
    "_dstbias",
    "_wperror",
    "_read",
    "_cputws",
    "_getwche",
    "_i64toa",
    "fgets",
    "perror",
    "_ismbbkana",
    "__doserrno",
    "__p__mbctype",
    "_setmbcp",
    "_wspawnlpe",
    "ferror",
    "_adj_fdivr_m32i",
    "_wspawnv",
    "_wexecl",
    "_adj_fdiv_m16i",
    "fsetpos",
    "_acmdln",
    "longjmp",
    "mblen",
    "_snwscanf",
    "strcoll",
    "_nextafter",
    "__wargv",
    "public: virtual __thiscall __non_rtti_object::~__non_rtti_object(void)",
    "_wpgmptr",
    "fputwc",
    "__p__fileinfo",
    "fputws",
    "_wgetdcwd",
    "_wcsset",
    "_wstat64",
    "public: virtual void * __thiscall __non_rtti_object::`scalar deleting destructor'(unsigned int)",
    "__RTDynamicCast",
    "_wpopen",
    "_mbscat",
    "_wspawnvpe",
    "iswdigit",
    "strncmp",
    "_isnan",
    "__crtCompareStringA",
    "__p__amblksiz",
    "___unguarded_readlc_active_add_func",
    "_wutime64",
    "tolower",
    "__p__tzname",
    "public: char const * __thiscall type_info::name(void)const",
    "_findnext",
    "_adj_fdivr_m64",
    "iswxdigit",
    "strspn",
    "bsearch",
    "wcsncmp",
    "memchr",
    "_adj_fdiv_m32",
    "_wcstoi64",
    "_wunlink",
    "public: virtual void * __thiscall exception::`scalar deleting destructor'(unsigned int)",
    "mktime",
    "_onexit",
    "_mbctokata",
    "_cgetws",
    "_wexecvp",
    "_mbsncmp",
    "_mbsspn",
    "gmtime",
    "private: __thiscall bad_cast::bad_cast(char const * const *)",
    "_wfreopen",
    "public: __thiscall exception::exception(char const * const &)",
    "_spawnle",
    "fwscanf",
    "abs",
    "fread",
    "gets",
    "isspace",
    "__lc_handle",
    "_wremove",
    "___lc_collate_cp_func",
    "_fileno",
    "atan2",
    "printf",
    "_chdrive",
    "__pctype_func",
    "towlower",
    "_fgetwchar",
    "_beep",
    "_wchmod",
    "vfprintf",
    "__mb_cur_max",
    "__p__wenviron",
    "_mbsnbcmp",
    "iswlower",
    "__p__pctype",
    "_set_security_error_handler",
    "_wexecv",
    "__CxxDetectRethrow",
    "_aligned_offset_realloc",
    "wprintf",
    "_outpw",
    "atan",
    "_tzname",
    "_mbsnccnt",
    "towupper",
    "wcscmp",
    "_rotl",
    "getchar",
    "wcstok",
    "_atoi64",
    "_mbsnextc",
    "_ismbcl0",
    "_spawnvp",
    "_wcserror",
    "_ismbcl2",
    "_mbsnbicmp",
    "_outp",
    "_getmbcp",
    "__CxxRegisterExceptionObject",
    "__threadid",
    "public: __thiscall bad_typeid::bad_typeid(class bad_typeid const &)",
    "_wutime",
    "wcscoll",
    "_abnormal_termination",
    "_amsg_exit",
    "__lc_collate_cp",
    "_get_osfhandle",
    "_stati64",
    "_CIacos",
    "__CxxLongjmpUnwind",
    "_vsnprintf",
    "public: virtual void * __thiscall bad_cast::`scalar deleting destructor'(unsigned int)",
    "_access"
  ],
  "msvcrt.dll": [
    "_seterrormode",
    "_vsnprintf_s",
    "public: int __thiscall type_info::operator==(class type_info const &)const",
    "strtod",
    "_daylight",
    "_waccess",
    "localeconv",
    "iswupper",
    "_fputwchar",
    "_fpieee_flt",
    "_CrtDbgReportV",
    "_local_unwind4",
    "_wcsupr_s",
    "__CxxUnregisterExceptionObject",
    "_wenviron",
    "_wprintf_p",
    "_mbsnbcat_l",
    "wcscpy",
    "_wstati64",
    "__libm_sse2_tan",
    "isgraph",
    "_splitpath",
    "_lsearch_s",
    "void (__cdecl*__cdecl set_new_handler(void (__cdecl*)(void)))(void)",
    "_mbsnset_l",
    "rand",
    "wcsrtombs_s",
    "_ecvt_s",
    "_mbsnlen",
    "rename",
    "btowc",
    "div",
    "_ismbbkprint",
    "swprintf",
    "_mbschr_l",
    "_mbslen_l",
    "__crtLCMapStringW",
    "bsearch_s",
    "_putw",
    "_ui64toa",
    "_safe_fdiv",
    "_spawnvpe",
    "_cscanf_s_l",
    "_memicmp_l",
    "_scwprintf_p_l",
    "_vswprintf",
    "_mbstrnlen",
    "fclose",
    "_filelengthi64",
    "_CIsinh",
    "getwchar",
    "const bad_cast::`vftable'",
    "_strtol_l",
    "_stricoll_l",
    "_mbsrev_l",
    "__libm_sse2_exp",
    "_wsetlocale",
    "wcstombs_s",
    "_wscanf_l",
    "__iob_func",
    "_swab",
    "_mbscoll",
    "_strdate",
    "__RTtypeid",
    "__CxxFrameHandler3",
    "_copysign",
    "__p__iob",
    "_strcoll_l",
    "_wsplitpath_s",
    "_mblen_l",
    "iswctype",
    "fgetws",
    "_fprintf_p_l",
    "_cwait",
    "_CIasin",
    "_ismbcpunct_l",
    "_cprintf",
    "_ctime64",
    "_atodbl_l",
    "_fsopen",
    "_wcstoi64_l",
    "_mbsncoll",
    "_aligned_malloc",
    "utime",
    "rand_s",
    "_CrtCheckMemory",
    "_cexit",
    "_wtmpnam_s",
    "_ltoa_s",
    "_vwprintf_p",
    "_ismbclegal",
    "qsort_s",
    "void * __cdecl operator new[](unsigned int)",
    "_fcvt",
    "___mb_cur_max_func",
    "_vscprintf_p_l",
    "atoi",
    "_cwprintf_l",
    "_mbsnextc",
    "wcspbrk",
    "_HUGE",
    "_CrtMemCheckpoint",
    "_iswcntrl_l",
    "_wfreopen_s",
    "__strncnt",
    "asctime_s",
    "_ismbcdigit",
    "_ismbcpunct",
    "_heapused",
    "_wfindnexti64",
    "public: virtual __thiscall type_info::~type_info(void)",
    "_wstrtime",
    "__set_app_type",
    "public: __thiscall __non_rtti_object::__non_rtti_object(class __non_rtti_object const &)",
    "memcpy_s",
    "_get_output_format",
    "public: virtual void * __thiscall __non_rtti_object::`vector deleting destructor'(unsigned int)",
    "_getw",
    "_ismbclower",
    "_fstati64",
    "tan",
    "_mbsnicoll",
    "_wputenv",
    "_mbsupr",
    "_wsearchenv_s",
    "__CxxFrameHandler",
    "_mbstowcs_l",
    "__libm_sse2_sin",
    "_ftime",
    "_mbsncat_s_l",
    "_vfwprintf_p",
    "_wputenv_s",
    "_wmakepath_s",
    "_mbsicoll",
    "_swscanf_l",
    "atexit",
    "_strerror",
    "_vcwprintf_s_l",
    "__CxxQueryExceptionSize",
    "mbsrtowcs_s",
    "__libm_sse2_atanf",
    "_mbstok",
    "_set_error_mode",
    "int (__cdecl*__cdecl _set_new_handler(int (__cdecl*)(unsigned int)))(unsigned int)",
    "_mbbtype",
    "_strnicmp",
    "public: void __thiscall bad_typeid::`default constructor closure'(void)",
    "_scanf_l",
    "_mbscmp",
    "_i64tow",
    "_eof",
    "const bad_typeid::`vftable'",
    "_timezone",
    "public: __thiscall __non_rtti_object::__non_rtti_object(char const *)",
    "time",
    "memcmp",
    "ctime",
    "_strupr_l",
    "_XcptFilter",
    "_execle",
    "__libm_sse2_log10f",
    "_ismbcgraph",
    "printf_s",
    "_getdrive",
    "_jn",
    "public: __thiscall bad_cast::bad_cast(char const * const &)",
    "realloc",
    "_mbstok_s",
    "_CrtMemDifference",
    "_mbschr",
    "public: __thiscall exception::exception(char const * const &,int)",
    "_getch",
    "_ftime64_s",
    "_fcvt_s",
    "memcpy",
    "_mbclen",
    "freopen",
    "_adjust_fdiv",
    "wcsspn",
    "_wcstoui64",
    "_initterm_e",
    "__p__dstbias",
    "_finite",
    "_wfindnext",
    "_write",
    "strtol",
    "public: __thiscall exception::exception(void)",
    "_fprintf_p",
    "fopen",
    "_ultow_s",
    "__iscsymf",
    "fprintf",
    "_get_wpgmptr",
    "_snprintf_c_l",
    "__lc_codepage",
    "_sys_nerr",
    "putwchar",
    "_wcsupr",
    "_aligned_realloc_dbg",
    "_expand",
    "_mbstrlen",
    "_vcprintf_p_l",
    "wcsstr",
    "_mbslwr_l",
    "_ismbcl2_l",
    "_mbsnbset_s_l",
    "_tell",
    "_wspawnvp",
    "_stricmp",
    "sprintf",
    "_rotr64",
    "_wsystem",
    "_wmktemp",
    "ldiv",
    "_mbsset",
    "int __cdecl _set_new_mode(int)",
    "setvbuf",
    "_wcmdln",
    "floor",
    "_wctime32",
    "_umask",
    "_cwprintf_s",
    "_ui64toa_s",
    "__unDName",
    "feof",
    "_mbsrev",
    "_strcmpi",
    "strrchr",
    "_ismbcl1_l",
    "_iswupper_l",
    "_sys_errlist",
    "_mbslen",
    "_cprintf_l",
    "__setusermatherr",
    "_longjmpex",
    "__p__commode",
    "_wcsnicmp_l",
    "_outpd",
    "putc",
    "_mbsnbcnt_l",
    "_close",
    "__p__environ",
    "_strnicmp_l",
    "_swprintf_c_l",
    "wcrtomb",
    "_commode",
    "_wspawnle",
    "_lrotl",
    "_wtoi64",
    "__crtLCMapStringA",
    "_ismbbtrail",
    "_wcsnicmp",
    "_CrtIsMemoryBlock",
    "_getmaxstdio",
    "wcscat",
    "tmpnam_s",
    "__libm_sse2_acosf",
    "srand",
    "_crtBreakAlloc",
    "_vprintf_p",
    "_wfullpath_dbg",
    "_vscwprintf_l",
    "__pxcptinfoptrs",
    "wcstok_s",
    "_mbsdec_l",
    "__p___argv",
    "__wgetmainargs",
    "getenv_s",
    "_mbclen_l",
    "mbtowc",
    "sprintf_s",
    "_mbsrchr",
    "wcsftime",
    "_fileinfo",
    "_except_handler4_common",
    "_futime",
    "_vwprintf_l",
    "clearerr_s",
    "_fwprintf_s_l",
    "_set_controlfp",
    "_set_errno",
    "_chvalidator",
    "_read",
    "__doserrno",
    "_wspawnlpe",
    "_adj_fdivr_m32i",
    "_adj_fdiv_m16i",
    "_acmdln",
    "mblen",
    "_snwscanf",
    "_nextafter",
    "__wargv",
    "_wpgmptr",
    "fputws",
    "_wgetdcwd",
    "_ismbbkpunct_l",
    "_wstat64",
    "_swprintf",
    "_wpopen",
    "public: virtual void * __thiscall __non_rtti_object::`scalar deleting destructor'(unsigned int)",
    "tolower",
    "_isnan",
    "___unguarded_readlc_active_add_func",
    "__p__tzname",
    "_adj_fdivr_m64",
    "iswxdigit",
    "_strupr_s_l",
    "_isctype_l",
    "public: virtual void * __thiscall exception::`scalar deleting destructor'(unsigned int)",
    "_mbsnicmp_l",
    "_wctomb_l",
    "_mbsnbcpy_s_l",
    "_strtoui64_l",
    "_iswalnum_l",
    "_snwscanf_l",
    "fread",
    "gets",
    "isspace",
    "__lc_handle",
    "_wcsicoll_l",
    "atan2",
    "_cscanf_l",
    "_fileno",
    "vfprintf",
    "_mbslwr_s_l",
    "__mb_cur_max",
    "_atoflt_l",
    "_CrtDbgReportWV",
    "__p__pctype",
    "_aligned_offset_realloc",
    "wprintf",
    "_mbsnccnt",
    "getchar",
    "_fwprintf_l",
    "_ismbcl0",
    "_mbsnbicmp",
    "_strerror_s",
    "_getmbcp",
    "_utime32",
    "_amsg_exit",
    "_get_osfhandle",
    "public: virtual void * __thiscall bad_cast::`scalar deleting destructor'(unsigned int)",
    "__p__pgmptr",
    "_mbsnbcmp_l",
    "_strlwr",
    "_unloaddll",
    "_atol_l",
    "public: virtual __thiscall bad_typeid::~bad_typeid(void)",
    "fputc",
    "_rmdir",
    "setlocale",
    "_CIlog",
    "_sopen",
    "_tzset",
    "_wcslwr_s_l",
    "_atodbl",
    "_i64toa_s",
    "strcat_s",
    "_setjmp3",
    "_wasctime",
    "_mbsncoll_l",
    "_mbsnbcpy_s",
    "swscanf_s",
    "_vcprintf",
    "void (__cdecl*__cdecl _set_se_translator(void (__cdecl*)(unsigned int,struct _EXCEPTION_POINTERS *)))(unsigned int,struct _EXCEPTION_POINTERS *)",
    "_flushall",
    "_ungetwch",
    "_iswprint_l",
    "cosh",
    "_vsnwprintf_s",
    "_wtmpnam",
    "_cwscanf",
    "_swprintf_c",
    "_wprintf_s_l",
    "_ismbstrail",
    "difftime",
    "_CrtSetReportHook2",
    "_mbsnset_s_l",
    "_cscanf",
    "rewind",
    "_strupr",
    "_strtoui64",
    "_CIpow",
    "asctime",
    "_filbuf",
    "_mbsnicmp",
    "_strnicoll",
    "_fullpath",
    "_fpreset",
    "__lconv_init",
    "_EH_prolog",
    "clock",
    "putwc",
    "_printf_l",
    "_ismbcspace",
    "_execvp",
    "_strnset_s",
    "_stat",
    "_CrtIsValidHeapPointer",
    "_wgetcwd",
    "_wtoi_l",
    "_scanf_s_l",
    "_wsplitpath",
    "public: __thiscall exception::exception(class exception const &)",
    "__CxxExceptionFilter",
    "public: int __thiscall type_info::operator!=(class type_info const &)const",
    "_wassert",
    "_atof_l",
    "_memccpy",
    "_mbtowc_l",
    "_ismbbpunct_l",
    "_lseek",
    "__unguarded_readlc_active",
    "vprintf_s",
    "_mbspbrk_l",
    "_putwch",
    "_wcsxfrm_l",
    "_rotl64",
    "_ismbckata",
    "_aligned_malloc_dbg",
    "_heapset",
    "__CxxCallUnwindDtor",
    "_mbsnbcpy",
    "___lc_codepage_func",
    "__p___argc",
    "_mbscat_s_l",
    "_execvpe",
    "fmod",
    "_mbsicmp",
    "_vsprintf_p_l",
    "_wspawnl",
    "_mbscspn",
    "_wstat",
    "acos",
    "iswpunct",
    "_getpid",
    "__p___wargv",
    "_mbsninc",
    "_mbsnset_s",
    "_getdiskfree",
    "__p__acmdln",
    "_mbstrlen_l",
    "public: virtual __thiscall bad_cast::~bad_cast(void)",
    "_setjmp",
    "_safe_fprem",
    "_mbsnbset_s",
    "_vfprintf_l",
    "_mbsspnp_l",
    "_Getdays",
    "public: virtual void * __thiscall exception::`vector deleting destructor'(unsigned int)",
    "_set_fileinfo",
    "public: virtual void * __thiscall bad_typeid::`scalar deleting destructor'(unsigned int)",
    "_vsnprintf_c",
    "_vswprintf_c_l",
    "_snscanf_s_l",
    "_statusfp",
    "_mkgmtime64",
    "_fstat64",
    "_y0",
    "_mbsdec",
    "public: char const * __thiscall type_info::raw_name(void)const",
    "scanf",
    "_chvalidator_l",
    "_ltoa",
    "_snscanf",
    "public: int __thiscall type_info::before(class type_info const &)const",
    "_getwch",
    "_vcwprintf_l",
    "_mktemp",
    "_cwscanf_s_l",
    "tmpnam",
    "_wcslwr_l",
    "_vsnwprintf",
    "_getdllprocaddr",
    "_free_dbg",
    "_vprintf_s_l",
    "_get_fmode",
    "fgetpos",
    "wctomb",
    "__p__fmode",
    "_sprintf_s_l",
    "strlen",
    "_mbsncpy",
    "_dup2",
    "_woutput_s",
    "_fcloseall",
    "_utime64",
    "int (__cdecl*__cdecl _query_new_handler(void))(unsigned int)",
    "_mbsupr_l",
    "_mbsncmp_l",
    "_safe_fprem1",
    "_stricoll",
    "_chsize",
    "_toupper",
    "_mbsnbcat_s",
    "__libm_sse2_logf",
    "__CppXcptFilter",
    "_CrtSetReportFile",
    "_execl",
    "wcscat_s",
    "_wfindfirst",
    "_iswdigit_l",
    "_scprintf",
    "_ismbcdigit_l",
    "mbrlen",
    "__winitenv",
    "_mbsncat_l",
    "_dup",
    "_getsystime",
    "_fpclass",
    "strcat",
    "wcsrchr",
    "__getmainargs",
    "_mbsset_s_l",
    "_seh_longjmp_unwind",
    "_callnewh",
    "_safe_fdivr",
    "getenv",
    "memset",
    "public: virtual char const * __thiscall exception::what(void)const",
    "sqrt",
    "_purecall",
    "_cgets",
    "_fstat",
    "fwrite",
    "_mbsnbset_l",
    "_mbsnbcat_s_l",
    "_ismbbpunct",
    "_searchenv_s",
    "_spawnlpe",
    "_yn",
    "_CIfmod",
    "strncat",
    "_vfprintf_p_l",
    "_cwprintf_s_l",
    "_time32",
    "_cputs",
    "_wcsdup_dbg",
    "_ismbclower_l",
    "_ismbbkprint_l",
    "_snwscanf_s_l",
    "_localtime32_s",
    "_set_sbh_threshold",
    "_mbscpy",
    "_wstrdate",
    "_wexecvpe",
    "_strlwr_s",
    "_spawnl",
    "log10",
    "_heapmin",
    "_vfprintf_p",
    "setbuf",
    "_findclose",
    "wctob",
    "_scalb",
    "isxdigit",
    "_strtime",
    "_vscwprintf",
    "vfwprintf",
    "pow",
    "__libm_sse2_asinf",
    "_logb",
    "mbstowcs",
    "_vsnprintf_l",
    "tmpfile",
    "_global_unwind2",
    "_wcreat",
    "ldexp",
    "_atoi_l",
    "_fprintf_l",
    "_ismbcupper",
    "_set_output_format",
    "_wexecve",
    "__toascii",
    "malloc",
    "_itoa",
    "_wmktemp_s",
    "sin",
    "_pctype",
    "_localtime32",
    "wcsncat_s",
    "_ftime64",
    "_wcstol_l",
    "_ismbblead",
    "_makepath",
    "_wcsicmp",
    "_waccess_s",
    "_fwscanf_s_l",
    "_mbsnset",
    "__p__wpgmptr",
    "iswspace",
    "fflush",
    "fgetc",
    "wcschr",
    "_crtAssertBusy",
    "__libm_sse2_log",
    "_wtoi",
    "_mbsnbcoll_l",
    "_wgetenv_s",
    "_aligned_offset_realloc_dbg",
    "vprintf",
    "_mbctoupper",
    "_getws",
    "_rmtmp",
    "const exception::`vftable'",
    "_strlwr_l",
    "_vcwprintf",
    "_iswlower_l",
    "public: class exception & __thiscall exception::operator=(class exception const &)",
    "iswcntrl",
    "_findfirst",
    "_isprint_l",
    "_searchenv",
    "_adj_fdiv_m32i",
    "_ecvt",
    "ungetwc",
    "_isxdigit_l",
    "isleadbyte",
    "_ismbcprint_l",
    "_CIcos",
    "_fscanf_s_l",
    "strnlen",
    "_snprintf_s_l",
    "_atoi64_l",
    "_wfullpath",
    "__dllonexit",
    "_fputchar",
    "_mbsncpy_l",
    "_wtol",
    "labs",
    "localtime",
    "_ismbbkana_l",
    "_CrtDumpMemoryLeaks",
    "strncpy_s",
    "void * __cdecl operator new[](unsigned int,int,char const *,int)",
    "_winminor",
    "wcsncat",
    "__isascii",
    "_ismbchira",
    "_mbctoupper_l",
    "__threadhandle",
    "_cwprintf_p_l",
    "__libm_sse2_expf",
    "_futime32",
    "_open",
    "_CxxThrowException",
    "mbrtowc",
    "_wcsnset_s",
    "__p__winmajor",
    "_sprintf_l",
    "_findfirsti64",
    "_get_pgmptr",
    "_itoa_s",
    "_wcsncoll_l",
    "_wgetenv",
    "__CxxFrameHandler2",
    "_wcserror_s",
    "_setsystime",
    "void __cdecl unexpected(void)",
    "_mbsncpy_s",
    "strstr",
    "_cwprintf",
    "_get_osplatform",
    "memmove_s",
    "_mbsset_s",
    "_difftime32",
    "_tempnam_dbg",
    "_y1",
    "strncat_s",
    "_setmbcp",
    "ferror",
    "_wspawnv",
    "_ctime32_s",
    "_get_heap_handle",
    "_cscanf_s",
    "public: virtual __thiscall __non_rtti_object::~__non_rtti_object(void)",
    "_wprintf_p_l",
    "_gmtime64_s",
    "_wstrtime_s",
    "__RTDynamicCast",
    "__crtCompareStringA",
    "bsearch",
    "_adj_fdiv_m32",
    "_ismbcalnum_l",
    "_mbctokata",
    "_wexecvp",
    "_stricmp_l",
    "__libm_sse2_asin",
    "_crtDbgFlag",
    "_mbsnlen_l",
    "_spawnle",
    "_strlwr_s_l",
    "_cprintf_p",
    "_mbstok_l",
    "_vwprintf_s_l",
    "_ui64tow_s",
    "_chdrive",
    "_fgetwchar",
    "__p__wenviron",
    "_mbsnbcmp",
    "iswlower",
    "_mkgmtime32",
    "_wexecv",
    "__CxxDetectRethrow",
    "_CrtDoForAllClientObjects",
    "wscanf_s",
    "_wcserror",
    "_towupper_l",
    "_get_winver",
    "_outp",
    "public: __thiscall bad_typeid::bad_typeid(class bad_typeid const &)",
    "_wutime",
    "_abnormal_termination",
    "__libm_sse2_tanf",
    "_CrtDbgBreak",
    "vfwprintf_s",
    "__p___winitenv",
    "_adj_fprem",
    "_setmaxstdio",
    "_heapchk",
    "_mbscoll_l",
    "_osplatform",
    "__crtGetLocaleInfoW",
    "sscanf_s",
    "remove",
    "_mkdir",
    "_ismbbalpha",
    "_seh_longjmp_unwind4",
    "_fscanf_l",
    "_snscanf_l",
    "_wstrdate_s",
    "_findnexti64",
    "tanh",
    "_flsbuf",
    "wcstombs",
    "_atoldbl",
    "_mbccpy_s",
    "_msize_debug",
    "_CrtSetReportMode",
    "__wcsncnt",
    "_swscanf_s_l",
    "_fseeki64",
    "_mbsninc_l",
    "_vcwprintf_p",
    "_lsearch",
    "_swprintf_s_l",
    "_strtoul_l",
    "_wmkdir",
    "fabs",
    "_wmakepath",
    "_iswalpha_l",
    "_wcsrev",
    "void __cdecl operator delete[](void *)",
    "_scprintf_p_l",
    "_islower_l",
    "_scprintf_l",
    "_heapwalk",
    "__initenv",
    "_mbccpy",
    "_towlower_l",
    "_mbcjmstojis",
    "_mbcjmstojis_l",
    "_mbctombb_l",
    "_chdir",
    "_sscanf_s_l",
    "_CrtDbgReport",
    "_CIatan2",
    "__pwctype_func",
    "_CrtMemDumpAllObjectsSince",
    "_ismbckata_l",
    "_adj_fdivr_m32",
    "_get_fileinfo",
    "_strncoll",
    "_aligned_offset_malloc",
    "_pgmptr",
    "_mbsnextc_l",
    "_ultoa_s",
    "_ctime32",
    "_wcsupr_s_l",
    "atof",
    "wcsncpy",
    "_wutime32",
    "_ungetch",
    "_fdopen",
    "_vfwprintf_p_l",
    "_popen",
    "free",
    "_CIlog10",
    "_mbsdup",
    "_vscprintf",
    "_wctype",
    "_get_doserrno",
    "_mbstrnlen_l",
    "_mbccpy_l",
    "___setlc_active_func",
    "_mbsicmp_l",
    "_cgetws_s",
    "_ismbcalpha_l",
    "_kbhit",
    "_get_environ",
    "__RTCastToVoid",
    "isalpha",
    "vsprintf",
    "getc",
    "_wexecle",
    "wprintf_s",
    "int __cdecl _query_new_mode(void)",
    "void __cdecl operator delete(void *)",
    "_rotr",
    "_controlfp_s",
    "_mbsnbicoll",
    "_ismbbprint",
    "_cprintf_p_l",
    "_wtof_l",
    "_get_sbh_threshold",
    "wcslen",
    "_ismbbkalnum",
    "sscanf",
    "_set_doserrno",
    "_printf_p",
    "atol",
    "_mbctohira_l",
    "_wcsnset",
    "_wasctime_s",
    "_adj_fpatan",
    "_wcscoll_l",
    "_fwprintf_p",
    "_wtoi64_l",
    "is_wctype",
    "_wrename",
    "_vsnwprintf_s_l",
    "_strncoll_l",
    "_stat64",
    "_strset",
    "_ftol",
    "_snwprintf",
    "_vscprintf_l",
    "__p__osver",
    "_itow",
    "_vcprintf_s",
    "_lfind_s",
    "_except_handler2",
    "public: __thiscall bad_cast::bad_cast(class bad_cast const &)",
    "_fgetchar",
    "void * __cdecl operator new(unsigned int,int,char const *,int)",
    "_vcprintf_s_l",
    "_ismbslead",
    "void __cdecl terminate(void)",
    "_mbsupr_s",
    "vswprintf_s",
    "_tolower_l",
    "_CIatan",
    "_Gettnames",
    "_mbstok_s_l",
    "isalnum",
    "_control87",
    "public: class bad_typeid & __thiscall bad_typeid::operator=(class bad_typeid const &)",
    "raise",
    "_strxfrm_l",
    "_cwprintf_p",
    "_ismbbgraph_l",
    "_localtime64",
    "_strnset",
    "__CxxCallUnwindDelDtor",
    "_vsprintf_s_l",
    "memmove",
    "__p__daylight",
    "_mbctolower",
    "_wexeclp",
    "islower",
    "exit",
    "__libm_sse2_log10",
    "_CrtSetDbgBlockType",
    "_mbsnbcpy_l",
    "__crtCompareStringW",
    "frexp",
    "_ismbcl1",
    "iswascii",
    "_CrtSetAllocHook",
    "__libm_sse2_pow",
    "_strrev",
    "_ultow",
    "_mbsncat_s",
    "_difftime64",
    "_mbsstr",
    "_expand_dbg",
    "log",
    "_errno",
    "_sscanf_l",
    "_msize",
    "_makepath_s",
    "mbsdup_dbg",
    "__dstbias",
    "_loaddll",
    "_mbstowcs_s_l",
    "_get_wenviron",
    "_snwscanf_s",
    "_wscanf_s_l",
    "_CrtReportBlockType",
    "public: __thiscall bad_typeid::bad_typeid(char const *)",
    "_CIsqrt",
    "_get_winmajor",
    "_gmtime64",
    "__libm_sse2_atan2",
    "_exit",
    "_mbspbrk",
    "_wcsnicoll_l",
    "_wcslwr",
    "_pclose",
    "_futime64",
    "_wcstoul_l",
    "_strtod_l",
    "asin",
    "modf",
    "_except_handler3",
    "_access_s",
    "_fprintf_s_l",
    "_wexeclpe",
    "_wfdopen",
    "_lfind",
    "_mbsinc",
    "__p__winminor",
    "__libm_sse2_powf",
    "_vcprintf_p",
    "vfprintf_s",
    "wcsrtombs",
    "_locking",
    "fputs",
    "_aligned_offset_malloc_dbg",
    "public: void __thiscall bad_cast::`default constructor closure'(void)",
    "_wcstombs_l",
    "_printf_p_l",
    "_mbsbtype_l",
    "vsprintf_s",
    "tmpfile_s",
    "_mbscmp_l",
    "_osver",
    "_creat",
    "isdigit",
    "_mbsncpy_s_l",
    "strftime",
    "__CxxCallUnwindVecDtor",
    "_CrtMemDumpStatistics",
    "_fmode",
    "_ismbbkalnum_l",
    "_c_exit",
    "_vsnprintf_s_l",
    "_heapadd",
    "fseek",
    "__STRINGTOLD",
    "_mbsnbcoll",
    "_isalpha_l",
    "_CrtSetDbgFlag",
    "__p__wcmdln",
    "iswgraph",
    "_ismbslead_l",
    "_execlpe",
    "_mbcjistojms",
    "__libm_sse2_sinf",
    "_umask_s",
    "_beginthreadex",
    "_wspawnlp",
    "_snwprintf_s",
    "calloc",
    "_invalid_parameter",
    "toupper",
    "public: virtual __thiscall exception::~exception(void)",
    "_inp",
    "_toupper_l",
    "$I10_OUTPUT",
    "_mbsnbcat",
    "fwprintf",
    "_strtoi64_l",
    "_sleep",
    "_adj_fdivr_m16i",
    "_strdup",
    "strcpy",
    "_ismbcalnum",
    "_ismbbalpha_l",
    "_vprintf_l",
    "_vcwprintf_p_l",
    "signal",
    "_wsearchenv",
    "_chmod",
    "_isdigit_l",
    "_getdrives",
    "_ismbbalnum",
    "_wopen",
    "_chgsign",
    "_snwprintf_l",
    "_mbsset_l",
    "___lc_handle_func",
    "_freea",
    "puts",
    "_aligned_realloc",
    "_winput_s",
    "_putws",
    "_ismbbtrail_l",
    "__libm_sse2_acos",
    "_ismbcspace_l",
    "_vprintf_p_l",
    "_spawnv",
    "_wfopen",
    "_ismbbkpunct",
    "_mbsnbicoll_l",
    "__daylight",
    "_wcslwr_s",
    "__wcserror_s",
    "_CItanh",
    "_aligned_free",
    "_vswprintf_p_l",
    "_malloc_dbg",
    "wcscspn",
    "qsort",
    "_dstbias",
    "_mbctolower_l",
    "_cputws",
    "_getwche",
    "_i64toa",
    "fgets",
    "_ismbbkana",
    "__p__mbctype",
    "_snscanf_s",
    "_vcprintf_l",
    "_isleadbyte_l",
    "fsetpos",
    "longjmp",
    "_strtime_s",
    "fputwc",
    "__p__fileinfo",
    "_ismbstrail_l",
    "_wutime64",
    "__p__amblksiz",
    "_mbbtombc_l",
    "_vfwprintf_l",
    "_vswprintf_s_l",
    "_wunlink",
    "_onexit",
    "_cgetws",
    "private: __thiscall bad_cast::bad_cast(char const * const *)",
    "fwprintf_s",
    "_set_fmode",
    "_wfreopen",
    "public: __thiscall exception::exception(char const * const &)",
    "fwscanf",
    "_wremove",
    "___lc_collate_cp_func",
    "_get_errno",
    "_CrtSetDumpClient",
    "_beep",
    "_realloc_dbg",
    "_mbctokata_l",
    "towupper",
    "_ismbbprint_l",
    "_rotl",
    "_atoi64",
    "_ismbcsymbol_l",
    "_ismbcl2",
    "_vsprintf_p",
    "wcscoll",
    "_isupper_l",
    "_stati64",
    "_vfwprintf_s_l",
    "_access",
    "fopen_s",
    "_mbsncat",
    "__iscsym",
    "_cwscanf_l",
    "void (__cdecl*__cdecl set_unexpected(void (__cdecl*)(void)))(void)",
    "strcspn",
    "_snprintf_s",
    "_resetstkoflw",
    "_controlfp",
    "_aligned_free_dbg",
    "_wfsopen",
    "_fullpath_dbg",
    "_winmajor",
    "__p__pwctype",
    "__uncaught_exception",
    "strtok_s",
    "_mbsstr_l",
    "iscntrl",
    "_spawnve",
    "_ismbblead_l",
    "isprint",
    "_mbsnicoll_l",
    "_tempnam",
    "_ftol2_sse_excpt",
    "__libm_sse2_atan",
    "_getdcwd",
    "_mbsupr_s_l",
    "__DestructExceptionObject",
    "ftell",
    "cos",
    "putchar",
    "_gcvt",
    "_adj_fdiv_m64",
    "_ctype",
    "_spawnlp",
    "_pipe",
    "_wfindnext64",
    "strerror_s",
    "_winver",
    "_ismbchira_l",
    "_wspawnve",
    "_chsize_s",
    "_getche",
    "_ismbbgraph",
    "_CItan",
    "__fpecode",
    "_mbsnbcnt",
    "_wctime32_s",
    "_mbslwr",
    "wcrtomb_s",
    "fprintf_s",
    "public: virtual void * __thiscall bad_cast::`vector deleting destructor'(unsigned int)",
    "_get_winminor",
    "_vsnprintf_c_l",
    "_mbscpy_s_l",
    "_wctime64",
    "_chkesp",
    "_mbbtombc",
    "_vfprintf_s_l",
    "__libm_sse2_cos",
    "_j1",
    "_adj_fptan",
    "strtoul",
    "_wtof",
    "wcstoul",
    "ispunct",
    "_endthread",
    "_sopen_s",
    "strcmp",
    "_findnext64",
    "_ultoa",
    "_cprintf_s",
    "vwprintf",
    "_lrotr",
    "_iswgraph_l",
    "wctomb_s",
    "_CrtSetReportHook",
    "_iswxdigit_l",
    "_wtempnam_dbg",
    "public: virtual void * __thiscall bad_typeid::`vector deleting destructor'(unsigned int)",
    "wcsnlen",
    "_cprintf_s_l",
    "clearerr",
    "_execve",
    "_findfirst64",
    "__p___mb_cur_max",
    "_open_osfhandle",
    "_wfopen_s",
    "_snprintf",
    "_mbsicoll_l",
    "_strtoi64",
    "wscanf",
    "_adj_fdiv_r",
    "_fwprintf_p_l",
    "_gmtime32",
    "fwscanf_s",
    "_mbctohira",
    "_putch",
    "ceil",
    "_execv",
    "_localtime64_s",
    "__libm_sse2_cosf",
    "_wcsset_s",
    "_wcsnicoll",
    "_iob",
    "_wcsupr_l",
    "strtok",
    "_mktemp_s",
    "_snprintf_c",
    "_cwscanf_s",
    "_strdup_dbg",
    "__argv",
    "_putenv_s",
    "_vsprintf_l",
    "_strset_s",
    "_ltow_s",
    "_mkgmtime",
    "_mbsspnp",
    "_mbcasemap",
    "_scwprintf_l",
    "_inpd",
    "_wsopen",
    "_mbctombb",
    "_ui64tow",
    "_iswpunct_l",
    "scanf_s",
    "_CIsin",
    "wcstol",
    "_Strftime",
    "_ismbcprint",
    "_pwctype",
    "_mbsbtype",
    "_wctomb_s_l",
    "_set_SSE2_enable",
    "_local_unwind2",
    "public: class bad_cast & __thiscall bad_cast::operator=(class bad_cast const &)",
    "strncpy",
    "_telli64",
    "_atoldbl_l",
    "_vscwprintf_p_l",
    "_ltow",
    "_environ",
    "_tolower",
    "_mbsnccnt_l",
    "_aexit_rtn",
    "_mbctype",
    "_mbscspn_l",
    "_wsopen_s",
    "_get_osver",
    "_swprintf_p_l",
    "_mbsnbset",
    "_ftime32",
    "abort",
    "_beginthread",
    "_execlp",
    "public: __thiscall bad_cast::bad_cast(char const *)",
    "_unlink",
    "_calloc_dbg",
    "system",
    "__badioinfo",
    "__argc",
    "_isctype",
    "_setmode",
    "_snwprintf_s_l",
    "_j0",
    "_getcwd",
    "fgetwc",
    "_strupr_s",
    "__unDNameEx",
    "sinh",
    "__p__winver",
    "_wtol_l",
    "_CIcosh",
    "_CrtDbgReportW",
    "_cabs",
    "swscanf",
    "_initterm",
    "_ismbclegal_l",
    "_hypot",
    "_mbsnbicmp_l",
    "_mbscat_s",
    "_mbccpy_s_l",
    "_ismbcalpha",
    "_memicmp",
    "_wcsicmp_l",
    "_freea_s",
    "void * __cdecl operator new(unsigned int)",
    "_ismbcl0_l",
    "fscanf",
    "_endthreadex",
    "_gcvt_s",
    "strxfrm",
    "const __non_rtti_object::`vftable'",
    "_vcwprintf_s",
    "_mktime64",
    "_time64",
    "_wcsicoll",
    "_snprintf_l",
    "_clearfp",
    "_wcsdup",
    "_ismbcgraph_l",
    "_mktime32",
    "_itow_s",
    "_ftime32_s",
    "strchr",
    "_wcsftime_l",
    "fscanf_s",
    "freopen_s",
    "_i64tow_s",
    "public: class __non_rtti_object & __thiscall __non_rtti_object::operator=(class __non_rtti_object const &)",
    "_commit",
    "_wfindfirst64",
    "_wchdir",
    "_ftol2_sse",
    "_wfindfirsti64",
    "_vwprintf_p_l",
    "_ctime64_s",
    "strerror",
    "_isatty",
    "_ismbbalnum_l",
    "_utime",
    "_wctime",
    "_ismbcsymbol",
    "_assert",
    "swprintf_s",
    "_mbsrchr_l",
    "_iswspace_l",
    "_filelength",
    "wcstod",
    "wcsncpy_s",
    "void (__cdecl*__cdecl set_terminate(void (__cdecl*)(void)))(void)",
    "getwc",
    "_Getmonths",
    "_mbsspn_l",
    "vswprintf",
    "_wtempnam",
    "__p__timezone",
    "iswalpha",
    "_isalnum_l",
    "_ftol2",
    "wcscpy_s",
    "_scwprintf",
    "strcpy_s",
    "iswprint",
    "_CIexp",
    "__pioinfo",
    "_abs64",
    "__p__mbcasemap",
    "_wprintf_l",
    "_vsnwprintf_l",
    "isupper",
    "vsnprintf",
    "_wcsncoll",
    "_wcstombs_s_l",
    "_cgets_s",
    "_lseeki64",
    "__crtGetStringTypeW",
    "_mbscpy_s",
    "_vswprintf_l",
    "_putenv",
    "_splitpath_s",
    "iswalnum",
    "_adj_fprem1",
    "__p___initenv",
    "__setlc_active",
    "_gmtime32_s",
    "_wrmdir",
    "strpbrk",
    "wcsxfrm",
    "ungetc",
    "_fwscanf_l",
    "exp",
    "_ismbcupper_l",
    "_unlock",
    "_inpw",
    "_lock",
    "__wcserror",
    "_sprintf_p_l",
    "_strdate_s",
    "_mbsinc_l",
    "_wperror",
    "perror",
    "_wexecl",
    "_CrtSetBreakAlloc",
    "mbstowcs_s",
    "_printf_s_l",
    "strcoll",
    "_iscntrl_l",
    "_wctime64_s",
    "_wcsset",
    "_mbscat",
    "_wspawnvpe",
    "iswdigit",
    "strncmp",
    "public: char const * __thiscall type_info::name(void)const",
    "_findnext",
    "strspn",
    "wcsncmp",
    "_iswctype_l",
    "memchr",
    "_wcstoi64",
    "mktime",
    "_mbsncmp",
    "_mbsspn",
    "_strnicoll_l",
    "gmtime",
    "_CrtIsValidPointer",
    "abs",
    "mbsrtowcs",
    "printf",
    "_wcstoui64_l",
    "__pctype_func",
    "_isgraph_l",
    "towlower",
    "_wchmod",
    "_isspace_l",
    "vwprintf_s",
    "_outpw",
    "atan",
    "_tzname",
    "wcscmp",
    "wcstok",
    "_spawnvp",
    "_mbslwr_s",
    "_mbcjistojms_l",
    "__CxxRegisterExceptionObject",
    "__threadid",
    "__lc_collate_cp",
    "_vswprintf_c",
    "_CIacos",
    "__CxxLongjmpUnwind",
    "_vsnprintf"
  ],
  "msvcrt20.dll": [
    "__p___winitenv",
    "public: static int const filebuf::openprot",
    "_adj_fprem",
    "_mbsncat",
    "__p__pgmptr",
    "_seterrormode",
    "public: __thiscall ostream_withassign::ostream_withassign(class streambuf *)",
    "public: virtual __thiscall stdiostream::~stdiostream(void)",
    "__iscsym",
    "_strlwr",
    "_unloaddll",
    "public: virtual void * __thiscall ifstream::`vector deleting destructor'(unsigned int)",
    "void (__cdecl*__cdecl set_unexpected(void (__cdecl*)(void)))(void)",
    "strcspn",
    "_heapchk",
    "strtod",
    "public: virtual void * __thiscall ostrstream::`scalar deleting destructor'(unsigned int)",
    "remove",
    "_daylight",
    "public: class istream & __thiscall istream::operator>>(unsigned long &)",
    "_mkdir",
    "_controlfp",
    "_tccpy",
    "_waccess",
    "_ismbbalpha",
    "public: void __thiscall stdiostream::`vbase destructor'(void)",
    "localeconv",
    "public: class istream & __thiscall istream::get(char &)",
    "public: class istream & __thiscall istream::operator>>(float &)",
    "fputc",
    "_wfsopen",
    "public: class ostream & __thiscall ostream::write(signed char const *,int)",
    "public: __thiscall istrstream::istrstream(class istrstream const &)",
    "public: virtual __thiscall ostream::~ostream(void)",
    "_rmdir",
    "public: class strstreambuf & __thiscall strstreambuf::operator=(class strstreambuf const &)",
    "public: virtual void * __thiscall fstream::`scalar deleting destructor'(unsigned int)",
    "public: class streambuf * __thiscall ofstream::setbuf(char *,int)",
    "_CIlog",
    "protected: void __thiscall ios::init(class streambuf *)",
    "iswupper",
    "public: virtual void * __thiscall stdiostream::`scalar deleting destructor'(unsigned int)",
    "setlocale",
    "_winmajor",
    "_sopen",
    "public: virtual int __thiscall strstreambuf::underflow(void)",
    "public: virtual void * __thiscall istream::`vector deleting destructor'(unsigned int)",
    "__p__pwctype",
    "_fputwchar",
    "public: class istream & __thiscall istream::read(char *,int)",
    "_tzset",
    "_fpieee_flt",
    "tanh",
    "_flsbuf",
    "public: __thiscall ofstream::ofstream(char const *,int,int)",
    "public: class ostream & __thiscall ostream::operator<<(char)",
    "private: static int ios::sunk_with_stdio",
    "public: class ostream & __thiscall ostream::write(unsigned char const *,int)",
    "wcstombs",
    "protected: char * __thiscall streambuf::pbase(void)const",
    "iscntrl",
    "public: class ostream & __thiscall ostream::operator<<(unsigned char)",
    "_atodbl",
    "_atoldbl",
    "public: virtual int __thiscall strstreambuf::sync(void)",
    "_wenviron",
    "public: class ostream & __thiscall ostream::operator<<(double)",
    "_spawnve",
    "public: int __thiscall ifstream::fd(void)const",
    "wcscpy",
    "_tcsspn",
    "_tcsncset",
    "_setjmp3",
    "_wasctime",
    "public: __thiscall streambuf::streambuf(class streambuf const &)",
    "public: virtual __thiscall istream_withassign::~istream_withassign(void)",
    "public: class strstreambuf * __thiscall strstream::rdbuf(void)const",
    "isgraph",
    "_splitpath",
    "protected: __thiscall ostream::ostream(class ostream const &)",
    "public: __thiscall istream_withassign::istream_withassign(class istream_withassign const &)",
    "isprint",
    "public: virtual void * __thiscall ifstream::`scalar deleting destructor'(unsigned int)",
    "class ostream & __cdecl flush(class ostream &)",
    "void (__cdecl*__cdecl _set_se_translator(void (__cdecl*)(unsigned int,struct _EXCEPTION_POINTERS *)))(unsigned int,struct _EXCEPTION_POINTERS *)",
    "_flushall",
    "rand",
    "public: class ofstream & __thiscall ofstream::operator=(class ofstream const &)",
    "_lsearch",
    "_tempnam",
    "rename",
    "public: class istream & __thiscall istream::operator>>(class istream & (__cdecl*)(class istream &))",
    "_getdcwd",
    "_wmkdir",
    "_tcscmp",
    "div",
    "_ismbbkprint",
    "fabs",
    "cos",
    "cosh",
    "ftell",
    "public: __thiscall istrstream::istrstream(char *)",
    "public: __thiscall stdiostream::stdiostream(struct _iobuf *)",
    "swprintf",
    "_wtmpnam",
    "_wmakepath",
    "public: class istream & __thiscall istream::get(signed char &)",
    "putchar",
    "public: __thiscall istream_withassign::istream_withassign(void)",
    "_gcvt",
    "_wcsrev",
    "public: class Iostream_init & __thiscall Iostream_init::operator=(class Iostream_init const &)",
    "_adj_fdiv_m64",
    "_ctype",
    "public: virtual void * __thiscall stdiobuf::`vector deleting destructor'(unsigned int)",
    "_spawnlp",
    "_putw",
    "public: class istream & __thiscall istream::operator>>(int &)",
    "public: virtual void * __thiscall ofstream::`vector deleting destructor'(unsigned int)",
    "_safe_fdiv",
    "_spawnvpe",
    "_mtunlock",
    "const strstream::`vbtable'{for `ostream'}",
    "public: int __thiscall ifstream::setmode(int)",
    "_heapwalk",
    "__initenv",
    "_mbccpy",
    "_ismbstrail",
    "public: virtual long __thiscall strstreambuf::seekoff(long,enum ios::seek_dir,int)",
    "_mbcjmstojis",
    "_pipe",
    "difftime",
    "_chdir",
    "_tcsrev",
    "_cscanf",
    "rewind",
    "_strupr",
    "_winver",
    "_CIatan2",
    "_CIpow",
    "asctime",
    "fclose",
    "_wspawnve",
    "_CIsinh",
    "_filbuf",
    "public: char * __thiscall istrstream::str(void)",
    "_mbsnicmp",
    "_strnicoll",
    "getwchar",
    "_getche",
    "_fullpath",
    "_fpreset",
    "__lconv_init",
    "public: class istream & __thiscall istream::operator>>(long &)",
    "clock",
    "_adj_fdivr_m32",
    "putwc",
    "_wsetlocale",
    "_ismbbgraph",
    "_strncoll",
    "_ismbcspace",
    "_execvp",
    "_pgmptr",
    "const fstream::`vbtable'{for `ostream'}",
    "protected: struct _RTL_CRITICAL_SECTION * __thiscall streambuf::lockptr(void)",
    "public: class istream & __thiscall istream::get(unsigned char *,int,char)",
    "public: int __thiscall streambuf::sbumpc(void)",
    "_CItan",
    "_swab",
    "class ostream_withassign cerr",
    "_tcsdec",
    "_mbscoll",
    "public: __thiscall fstream::fstream(int,char *,int)",
    "_stat",
    "public: int __thiscall istream::sync(void)",
    "public: virtual void * __thiscall streambuf::`scalar deleting destructor'(unsigned int)",
    "__fpecode",
    "_strdate",
    "const istream_withassign::`vbtable'",
    "_mbsnbcnt",
    "_copysign",
    "__p__iob",
    "_wgetcwd",
    "_mbslwr",
    "public: int __thiscall streambuf::out_waiting(void)const",
    "private: int __thiscall istream::getint(char *)",
    "_wsplitpath",
    "atof",
    "public: class ostream & __thiscall ostream::put(char)",
    "wcsncpy",
    "public: __thiscall ostream_withassign::ostream_withassign(void)",
    "const istream::`vbtable'",
    "public: int __thiscall ios::rdstate(void)const",
    "protected: void __thiscall streambuf::setb(char *,char *,int)",
    "iswctype",
    "_ungetch",
    "public: int __thiscall streambuf::sputn(char const *,int)",
    "protected: char * __thiscall streambuf::pptr(void)const",
    "public: virtual __thiscall istrstream::~istrstream(void)",
    "public: void __thiscall ostrstream::`vbase destructor'(void)",
    "_fdopen",
    "public: virtual void * __thiscall strstream::`scalar deleting destructor'(unsigned int)",
    "fgetws",
    "public: class filebuf * __thiscall fstream::rdbuf(void)const",
    "_mbbtombc",
    "_tcsset",
    "public: __thiscall strstreambuf::strstreambuf(int)",
    "public: void __thiscall ostream_withassign::`vbase destructor'(void)",
    "protected: char * __thiscall streambuf::epptr(void)const",
    "_cwait",
    "_tcsnccat",
    "public: int __thiscall ios::precision(int)",
    "_popen",
    "_CIasin",
    "_memccpy",
    "_CIlog10",
    "_mbsdup",
    "free",
    "_j1",
    "protected: char * __thiscall streambuf::base(void)const",
    "protected: int __thiscall streambuf::allocate(void)",
    "_lseek",
    "_adj_fptan",
    "public: class streambuf * __thiscall fstream::setbuf(char *,int)",
    "public: long & __thiscall ios::iword(int)const",
    "strtoul",
    "_cprintf",
    "wcstoul",
    "ispunct",
    "public: __thiscall ifstream::ifstream(int,char *,int)",
    "public: void __thiscall ios::clear(int)",
    "_endthread",
    "public: virtual void * __thiscall strstreambuf::`scalar deleting destructor'(unsigned int)",
    "public: void __thiscall istream::isfx(void)",
    "_fsopen",
    "_mbsncoll",
    "public: class ostream & __thiscall ostream::operator<<(class ostream & (__cdecl*)(class ostream &))",
    "private: int __thiscall istream::getdouble(char *,int)",
    "strcmp",
    "_kbhit",
    "_ultoa",
    "public: __thiscall fstream::fstream(char const *,int,int)",
    "private: static int ios::fLockcInit",
    "public: void __thiscall ifstream::close(void)",
    "public: __thiscall fstream::fstream(class fstream const &)",
    "vwprintf",
    "public: __thiscall strstreambuf::strstreambuf(class strstreambuf const &)",
    "_cexit",
    "_ismbckata",
    "isalpha",
    "public: class ostream & __thiscall ostream::operator<<(unsigned long)",
    "public: void __cdecl ios::clrlock(void)",
    "vsprintf",
    "_heapset",
    "getc",
    "_lrotr",
    "_mbsnbcpy",
    "_wexecle",
    "int __cdecl _query_new_mode(void)",
    "_ismbclegal",
    "public: class istream & __thiscall istream::operator>>(unsigned char &)",
    "__p___argc",
    "public: class ostream & __thiscall ostream::operator<<(unsigned short)",
    "const strstreambuf::`vftable'",
    "_execvpe",
    "public: __thiscall ofstream::ofstream(void)",
    "fmod",
    "public: class ostream & __thiscall ostream::operator<<(long double)",
    "void __cdecl operator delete(void *)",
    "_rotr",
    "_wspawnl",
    "_mbsicmp",
    "_mbsnbicoll",
    "public: int __thiscall ostrstream::pcount(void)const",
    "public: void __cdecl ios::lock(void)",
    "_mbscspn",
    "_ismbbprint",
    "const strstream::`vftable'",
    "public: int __thiscall ios::precision(void)const",
    "_tcsnicmp",
    "_wstat",
    "const ostream::`vbtable'",
    "protected: __thiscall ostream::ostream(void)",
    "_fcvt",
    "public: void __thiscall streambuf::dbp(void)",
    "acos",
    "atoi",
    "iswpunct",
    "public: void __thiscall streambuf::clrlock(void)",
    "public: class istream & __thiscall istream::operator>>(short &)",
    "public: class ostream * __thiscall ios::tie(void)const",
    "_getpid",
    "__p___wargv",
    "_mbsninc",
    "public: virtual void * __thiscall istream_withassign::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall istrstream::`scalar deleting destructor'(unsigned int)",
    "wcspbrk",
    "clearerr",
    "_execve",
    "_getdiskfree",
    "_mbsnextc",
    "_HUGE",
    "__p___mb_cur_max",
    "__p__acmdln",
    "_tcscspn",
    "_open_osfhandle",
    "_ismbbkalnum",
    "_setjmp",
    "_snprintf",
    "sscanf",
    "_safe_fprem",
    "wcslen",
    "public: int __thiscall ios::operator!(void)const",
    "wscanf",
    "atol",
    "_adj_fdiv_r",
    "public: virtual __thiscall iostream::~iostream(void)",
    "public: static int __cdecl ios::xalloc(void)",
    "_mbctohira",
    "_putch",
    "public: virtual int __thiscall strstreambuf::overflow(int)",
    "public: class istream & __thiscall istream::getline(char *,int,char)",
    "_tcsncpy",
    "_ismbcdigit",
    "_ismbcpunct",
    "_wcsnset",
    "ceil",
    "__seh_longjmp_unwind@4",
    "_heapused",
    "public: void __cdecl ios::unlockbuf(void)",
    "const ofstream::`vftable'",
    "protected: int __thiscall streambuf::blen(void)const",
    "protected: __thiscall ios::ios(void)",
    "_execv",
    "_adj_fpatan",
    "_wcsnicoll",
    "_iob",
    "public: virtual void * __thiscall ostrstream::`vector deleting destructor'(unsigned int)",
    "_statusfp",
    "public: virtual void * __thiscall filebuf::`scalar deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall istream::`scalar deleting destructor'(unsigned int)",
    "_tcstok",
    "_y0",
    "strtok",
    "_wstrtime",
    "_mbsdec",
    "is_wctype",
    "public: class ostream & __thiscall ostream::operator<<(signed char const *)",
    "public: int __thiscall ios::eof(void)const",
    "public: void __thiscall streambuf::unlock(void)",
    "public: void __thiscall istream_withassign::`vbase destructor'(void)",
    "_tclen",
    "_wrename",
    "__argv",
    "public: int __thiscall stdiobuf::setrwbuf(int,int)",
    "public: class istream & __thiscall istream::operator>>(unsigned short &)",
    "const iostream::`vbtable'{for `istream'}",
    "public: __thiscall Iostream_init::~Iostream_init(void)",
    "scanf",
    "_ltoa",
    "_strset",
    "_getw",
    "_ismbclower",
    "_mbsspnp",
    "_ftol",
    "protected: class ostream & __thiscall ostream::operator=(class streambuf *)",
    "_snwprintf",
    "class istream & __cdecl ws(class istream &)",
    "public: __thiscall ostrstream::ostrstream(char *,int,int)",
    "public: void __thiscall ostream::`vbase destructor'(void)",
    "public: long __thiscall ios::unsetf(long)",
    "tan",
    "public: virtual __thiscall strstream::~strstream(void)",
    "public: __thiscall ifstream::ifstream(char const *,int,int)",
    "__p__osver",
    "_mktemp",
    "public: __thiscall filebuf::filebuf(class filebuf const &)",
    "_mbsnicoll",
    "_wsopen",
    "_wputenv",
    "const fstream::`vbtable'{for `istream'}",
    "public: class streambuf & __thiscall streambuf::operator=(class streambuf const &)",
    "_itow",
    "_mbsupr",
    "_except_handler2",
    "_mbctombb",
    "_fgetchar",
    "tmpnam",
    "protected: void __thiscall streambuf::setg(char *,char *,char *)",
    "_vsnwprintf",
    "_CIsin",
    "const stdiobuf::`vftable'",
    "__CxxFrameHandler",
    "_ismbslead",
    "wcstol",
    "_getdllprocaddr",
    "public: __thiscall Iostream_init::Iostream_init(void)",
    "public: class istream & __thiscall istream::operator>>(char *)",
    "public: class strstream & __thiscall strstream::operator=(class strstream &)",
    "public: virtual long __thiscall streambuf::seekpos(long,int)",
    "void __cdecl terminate(void)",
    "fgetpos",
    "public: void __thiscall streambuf::stossc(void)",
    "const fstream::`vftable'",
    "_ismbcprint",
    "wctomb",
    "__p__fmode",
    "class istream_withassign cin",
    "_pwctype",
    "private: static int ios::x_curindex",
    "protected: __thiscall streambuf::streambuf(char *,int)",
    "public: class istream & __thiscall istream::get(char *,int,char)",
    "_ftime",
    "_mbsbtype",
    "public: class ostream & __thiscall ostream::operator<<(signed char)",
    "public: virtual void * __thiscall istrstream::`vector deleting destructor'(unsigned int)",
    "strlen",
    "_CIatan",
    "_mbsncpy",
    "public: __thiscall filebuf::filebuf(int)",
    "_dup2",
    "public: class ostream & __thiscall ostream::operator<<(unsigned char const *)",
    "_fcloseall",
    "public: __thiscall stdiobuf::stdiobuf(struct _iobuf *)",
    "_mbsicoll",
    "int (__cdecl*__cdecl _query_new_handler(void))(unsigned int)",
    "public: class ostream & __thiscall ostream_withassign::operator=(class ostream const &)",
    "public: void __cdecl ios::lockbuf(void)",
    "public: class strstreambuf * __thiscall ostrstream::rdbuf(void)const",
    "_tcsinc",
    "_local_unwind2",
    "atexit",
    "_strerror",
    "public: __thiscall strstreambuf::strstreambuf(void)",
    "_tcsspnp",
    "_safe_fprem1",
    "_stricoll",
    "isalnum",
    "_control87",
    "public: void * & __thiscall ios::pword(int)const",
    "public: class filebuf * __thiscall ofstream::rdbuf(void)const",
    "strncpy",
    "const istrstream::`vbtable'",
    "raise",
    "_chsize",
    "public: virtual __thiscall strstreambuf::~strstreambuf(void)",
    "_mbstok",
    "_toupper",
    "_ltow",
    "public: class stdiostream & __thiscall stdiostream::operator=(class stdiostream &)",
    "int (__cdecl*__cdecl _set_new_handler(int (__cdecl*)(unsigned int)))(unsigned int)",
    "_tcsncat",
    "_environ",
    "protected: static void __cdecl ios::lockc(void)",
    "_tolower",
    "_mbbtype",
    "public: __thiscall ofstream::ofstream(class ofstream const &)",
    "public: virtual __thiscall ofstream::~ofstream(void)",
    "_strnicmp",
    "_execl",
    "_strnset",
    "_aexit_rtn",
    "public: class ostream & __thiscall ostream::operator<<(long)",
    "public: class ostream_withassign & __thiscall ostream_withassign::operator=(class ostream_withassign const &)",
    "_mbscmp",
    "_wfindfirst",
    "private: class ostream & __thiscall ostream::writepad(char const *,char const *)",
    "public: class ostream & __thiscall ostream::operator<<(float)",
    "public: virtual int __thiscall filebuf::overflow(int)",
    "public: virtual void * __thiscall fstream::`vector deleting destructor'(unsigned int)",
    "_eof",
    "public: int __thiscall streambuf::in_avail(void)const",
    "_mbctype",
    "public: virtual __thiscall ostream_withassign::~ostream_withassign(void)",
    "memmove",
    "public: void __thiscall streambuf::lock(void)",
    "__p__daylight",
    "public: void __thiscall strstream::`vbase destructor'(void)",
    "protected: void __thiscall streambuf::gbump(int)",
    "_mbctolower",
    "_wexeclp",
    "__winitenv",
    "_mbsnbset",
    "_dup",
    "_getsystime",
    "islower",
    "_fpclass",
    "_timezone",
    "public: class istream_withassign & __thiscall istream_withassign::operator=(class istream_withassign const &)",
    "strcat",
    "class ios & __cdecl hex(class ios &)",
    "wcsrchr",
    "__getmainargs",
    "exit",
    "time",
    "memcmp",
    "abort",
    "class ios & __cdecl oct(class ios &)",
    "public: virtual int __thiscall streambuf::xsputn(char const *,int)",
    "ctime",
    "_beginthread",
    "_execlp",
    "_unlink",
    "system",
    "_XcptFilter",
    "public: class istream & __thiscall istream::operator>>(signed char &)",
    "_safe_fdivr",
    "__argc",
    "getenv",
    "_execle",
    "_tcsnbcnt",
    "memset",
    "_isctype",
    "_setmode",
    "sqrt",
    "public: __thiscall ofstream::ofstream(int,char *,int)",
    "public: int __thiscall ios::delbuf(void)const",
    "_purecall",
    "public: void __thiscall iostream::`vbase destructor'(void)",
    "_cgets",
    "frexp",
    "_ismbcl1",
    "public: int __thiscall ios::good(void)const",
    "public: int __thiscall ofstream::is_open(void)const",
    "_j0",
    "_getcwd",
    "fgetwc",
    "iswascii",
    "public: int __thiscall strstream::pcount(void)const",
    "public: static int const filebuf::sh_read",
    "public: int __thiscall filebuf::setmode(int)",
    "_ismbcgraph",
    "public: class istream & __thiscall istream::seekg(long)",
    "const ifstream::`vbtable'",
    "public: __thiscall ostrstream::ostrstream(void)",
    "public: __thiscall stdiostream::stdiostream(class stdiostream const &)",
    "protected: class iostream & __thiscall iostream::operator=(class iostream &)",
    "_fstat",
    "_strrev",
    "_ultow",
    "public: virtual void * __thiscall ios::`scalar deleting destructor'(unsigned int)",
    "fwrite",
    "_getdrive",
    "public: __thiscall strstream::strstream(void)",
    "public: void __thiscall streambuf::setlock(void)",
    "public: __thiscall ostream::ostream(class streambuf *)",
    "public: char * __thiscall strstreambuf::str(void)",
    "public: int __thiscall ofstream::fd(void)const",
    "sinh",
    "_jn",
    "_ismbbpunct",
    "public: int __thiscall ios::width(void)const",
    "_mbsstr",
    "__p__winver",
    "realloc",
    "public: virtual int __thiscall stdiobuf::overflow(int)",
    "public: virtual int __thiscall stdiobuf::pbackfail(int)",
    "_spawnlpe",
    "_CIfmod",
    "_CIcosh",
    "_errno",
    "_yn",
    "_msize",
    "log",
    "protected: char * __thiscall streambuf::egptr(void)const",
    "strncat",
    "_mbschr",
    "public: virtual long __thiscall streambuf::seekoff(long,enum ios::seek_dir,int)",
    "public: int __thiscall ifstream::is_open(void)const",
    "_cabs",
    "_cputs",
    "public: class istream & __thiscall istream::get(signed char *,int,char)",
    "public: virtual void * __thiscall streambuf::`vector deleting destructor'(unsigned int)",
    "const ostream_withassign::`vftable'",
    "public: __thiscall stdiobuf::stdiobuf(class stdiobuf const &)",
    "_getch",
    "_loaddll",
    "memcpy",
    "swscanf",
    "public: void __cdecl ios::unlock(void)",
    "_mbclen",
    "public: virtual void * __thiscall ostream_withassign::`vector deleting destructor'(unsigned int)",
    "_initterm",
    "public: class stdiobuf & __thiscall stdiobuf::operator=(class stdiobuf const &)",
    "freopen",
    "public: class streambuf * __thiscall ifstream::setbuf(char *,int)",
    "_mbscpy",
    "protected: virtual int __thiscall streambuf::doallocate(void)",
    "protected: __thiscall istream::istream(class istream const &)",
    "_wstrdate",
    "public: class fstream & __thiscall fstream::operator=(class fstream &)",
    "public: void __cdecl ios::setlock(void)",
    "_adjust_fdiv",
    "wcsspn",
    "_wexecvpe",
    "public: virtual int __thiscall filebuf::sync(void)",
    "_tcsncmp",
    "public: long __thiscall ostream::tellp(void)",
    "_hypot",
    "_spawnl",
    "log10",
    "_heapmin",
    "public: void __thiscall fstream::attach(int)",
    "_CIsqrt",
    "_finite",
    "protected: void __thiscall streambuf::unbuffered(int)",
    "public: void * __thiscall Iostream_init::`scalar deleting destructor'(unsigned int)",
    "_wfindnext",
    "_write",
    "public: void * __thiscall Iostream_init::`vector deleting destructor'(unsigned int)",
    "setbuf",
    "_exit",
    "_mbspbrk",
    "_findclose",
    "_ismbcalpha",
    "_memicmp",
    "_scalb",
    "_wcslwr",
    "class ios & __cdecl dec(class ios &)",
    "_pclose",
    "isxdigit",
    "protected: void __thiscall streambuf::setp(char *,char *)",
    "public: void __thiscall fstream::close(void)",
    "_strtime",
    "strtol",
    "public: void __thiscall istream::eatwhite(void)",
    "const stdiostream::`vftable'",
    "void * __cdecl operator new(unsigned int)",
    "vfwprintf",
    "fscanf",
    "_endthreadex",
    "fopen",
    "public: virtual __thiscall streambuf::~streambuf(void)",
    "strxfrm",
    "asin",
    "modf",
    "pow",
    "_except_handler3",
    "public: int __thiscall istream::gcount(void)const",
    "_logb",
    "protected: struct _RTL_CRITICAL_SECTION * __thiscall ios::lockptr(void)",
    "mbstowcs",
    "__iscsymf",
    "_wexeclpe",
    "_wfdopen",
    "_lfind",
    "_wcsicoll",
    "fprintf",
    "_mbsinc",
    "public: virtual void * __thiscall iostream::`scalar deleting destructor'(unsigned int)",
    "__p__winminor",
    "protected: int __thiscall streambuf::unbuffered(void)const",
    "public: class filebuf & __thiscall filebuf::operator=(class filebuf const &)",
    "public: void __thiscall fstream::open(char const *,int,int)",
    "tmpfile",
    "_global_unwind2",
    "_wcreat",
    "public: virtual void * __thiscall strstream::`vector deleting destructor'(unsigned int)",
    "_tcsnccnt",
    "ldexp",
    "public: virtual void * __thiscall ios::`vector deleting destructor'(unsigned int)",
    "_matherr",
    "_sys_nerr",
    "_ismbcupper",
    "public: class istream & __thiscall istream::operator>>(long double &)",
    "public: virtual class streambuf * __thiscall streambuf::setbuf(char *,int)",
    "putwchar",
    "_clearfp",
    "_locking",
    "_wcsdup",
    "_wcsupr",
    "fputs",
    "_wexecve",
    "__toascii",
    "strchr",
    "public: int __thiscall ios::fail(void)const",
    "const stdiostream::`vbtable'{for `ostream'}",
    "_itoa",
    "const strstream::`vbtable'{for `istream'}",
    "malloc",
    "sin",
    "_expand",
    "_mbstrlen",
    "_pctype",
    "wcsstr",
    "_tcschr",
    "public: void __thiscall ofstream::close(void)",
    "public: __thiscall filebuf::filebuf(int,char *,int)",
    "public: void __thiscall ifstream::open(char const *,int,int)",
    "class ostream & __cdecl ends(class ostream &)",
    "_tell",
    "public: class istream & __thiscall istream::operator>>(signed char *)",
    "_wspawnvp",
    "_ismbblead",
    "public: class filebuf * __thiscall filebuf::close(void)",
    "_makepath",
    "_commit",
    "_stricmp",
    "_tcsncicmp",
    "const istrstream::`vftable'",
    "public: class istream & __thiscall istream::seekg(long,enum ios::seek_dir)",
    "sprintf",
    "public: int __thiscall ostream::opfx(void)",
    "_wcsicmp",
    "_mbsnset",
    "_wchdir",
    "__p__wpgmptr",
    "_wmktemp",
    "_mbsset",
    "_wsystem",
    "wcschr",
    "fflush",
    "fgetc",
    "int __cdecl _set_new_mode(int)",
    "iswspace",
    "public: __thiscall strstream::strstream(class strstream const &)",
    "public: int __thiscall streambuf::sputbackc(char)",
    "public: void __thiscall ofstream::`vbase destructor'(void)",
    "_wcmdln",
    "floor",
    "public: char __thiscall ios::fill(char)",
    "setvbuf",
    "public: class ostream & __thiscall ostream::write(char const *,int)",
    "public: int __thiscall streambuf::sgetc(void)",
    "_wtoi",
    "const streambuf::`vftable'",
    "_umask",
    "public: int __thiscall fstream::fd(void)const",
    "strerror",
    "_osver",
    "_tcsstr",
    "public: __thiscall filebuf::filebuf(void)",
    "vprintf",
    "const istream::`vftable'",
    "_mbctoupper",
    "_creat",
    "_getws",
    "_isatty",
    "_rmtmp",
    "_utime",
    "_wctime",
    "public: __thiscall Iostream_init::Iostream_init(class ios &,int)",
    "public: virtual __thiscall fstream::~fstream(void)",
    "_ismbcsymbol",
    "_assert",
    "isdigit",
    "protected: char * __thiscall streambuf::gptr(void)const",
    "feof",
    "public: __thiscall ostrstream::ostrstream(class ostrstream const &)",
    "_mbsrev",
    "public: int __thiscall fstream::setmode(int)",
    "public: virtual class streambuf * __thiscall filebuf::setbuf(char *,int)",
    "_strcmpi",
    "public: int __thiscall istream::peek(void)",
    "strrchr",
    "public: class ostream & __thiscall ostream::operator<<(class streambuf *)",
    "_filelength",
    "public: class ostream & __thiscall ostream::operator<<(short)",
    "strftime",
    "class ostream_withassign clog",
    "public: virtual long __thiscall stdiobuf::seekoff(long,enum ios::seek_dir,int)",
    "wcstod",
    "public: class istream & __thiscall istream_withassign::operator=(class streambuf *)",
    "public: void __thiscall ifstream::attach(int)",
    "iswcntrl",
    "_findfirst",
    "public: char * __thiscall ostrstream::str(void)",
    "_sys_errlist",
    "_mbslen",
    "const ostrstream::`vftable'",
    "_longjmpex",
    "public: int __thiscall ios::bad(void)const",
    "void (__cdecl*__cdecl set_terminate(void (__cdecl*)(void)))(void)",
    "__p__commode",
    "const ofstream::`vbtable'",
    "_searchenv",
    "public: virtual int __thiscall streambuf::sync(void)",
    "public: __thiscall fstream::fstream(int)",
    "public: virtual void * __thiscall strstreambuf::`vector deleting destructor'(unsigned int)",
    "_adj_fdiv_m32i",
    "_ecvt",
    "_fmode",
    "getwc",
    "public: char __thiscall ios::fill(void)const",
    "public: class istream & __thiscall istream::read(signed char *,int)",
    "public: class istrstream & __thiscall istrstream::operator=(class istrstream const &)",
    "public: virtual void * __thiscall ofstream::`scalar deleting destructor'(unsigned int)",
    "ungetwc",
    "public: class ostream & __thiscall ostream::put(signed char)",
    "public: class ostream & __thiscall ostream::seekp(long,enum ios::seek_dir)",
    "_c_exit",
    "_tcslwr",
    "putc",
    "isleadbyte",
    "_heapadd",
    "fseek",
    "__STRINGTOLD",
    "_CIcos",
    "_mbsnbcoll",
    "_tcsnset",
    "vswprintf",
    "_wtempnam",
    "public: virtual void * __thiscall ostream::`vector deleting destructor'(unsigned int)",
    "__p__timezone",
    "__p__wcmdln",
    "_close",
    "__p__environ",
    "iswalpha",
    "iswgraph",
    "_execlpe",
    "_mbcjistojms",
    "__dllonexit",
    "_wfullpath",
    "_fputchar",
    "public: __thiscall fstream::fstream(void)",
    "public: int __thiscall ios::width(int)",
    "_wtol",
    "public: class ostream & __thiscall ostream::put(unsigned char)",
    "_beginthreadex",
    "_wspawnlp",
    "public: virtual __thiscall ostrstream::~ostrstream(void)",
    "_commode",
    "_wspawnle",
    "public: int __thiscall streambuf::sgetn(char *,int)",
    "calloc",
    "public: void __thiscall ios::delbuf(int)",
    "toupper",
    "labs",
    "localtime",
    "public: long __thiscall ios::setf(long)",
    "public: __thiscall istream::istream(class streambuf *)",
    "public: class ostream & __thiscall ostream::operator<<(class ios & (__cdecl*)(class ios &))",
    "public: void __thiscall ostream::osfx(void)",
    "$I10_OUTPUT",
    "_mbsnbcat",
    "public: class ostream & __thiscall ostream::operator<<(unsigned int)",
    "fwprintf",
    "public: class istream & __thiscall istream_withassign::operator=(class istream const &)",
    "protected: char * __thiscall streambuf::eback(void)const",
    "_tcsclen",
    "public: class ostream & __thiscall ostream::seekp(long)",
    "_sleep",
    "iswprint",
    "_lrotl",
    "public: class ostream * __thiscall ios::tie(class ostream *)",
    "_adj_fdivr_m16i",
    "_winminor",
    "_strdup",
    "__isascii",
    "public: long __thiscall istream::tellg(void)",
    "strcpy",
    "protected: class istream & __thiscall istream::operator=(class streambuf *)",
    "_ismbchira",
    "_CIexp",
    "wcsncat",
    "public: long __thiscall ios::flags(long)",
    "public: virtual int __thiscall streambuf::xsgetn(char *,int)",
    "protected: static void __cdecl ios::unlockc(void)",
    "public: class istream & __thiscall istream::operator>>(double &)",
    "public: class filebuf * __thiscall filebuf::attach(int)",
    "__threadhandle",
    "_ismbcalnum",
    "isupper",
    "public: struct _iobuf * __thiscall stdiobuf::stdiofile(void)",
    "public: virtual int __thiscall filebuf::underflow(void)",
    "_ismbbtrail",
    "public: virtual void * __thiscall ostream::`scalar deleting destructor'(unsigned int)",
    "public: void __thiscall istream::`vbase destructor'(void)",
    "public: static long __cdecl ios::bitalloc(void)",
    "_open",
    "public: static int const filebuf::text",
    "_tcsicmp",
    "_wcsncoll",
    "_wcsnicmp",
    "public: virtual void * __thiscall stdiobuf::`scalar deleting destructor'(unsigned int)",
    "_CxxThrowException",
    "signal",
    "wcscat",
    "_tcsupr",
    "_wsearchenv",
    "public: class filebuf * __thiscall ifstream::rdbuf(void)const",
    "private: static long ios::x_maxbit",
    "_chmod",
    "public: class istream & __thiscall istream::get(class streambuf &,char)",
    "public: class strstreambuf * __thiscall istrstream::rdbuf(void)const",
    "__p__winmajor",
    "_getdrives",
    "_ismbbalnum",
    "public: int __thiscall ofstream::setmode(int)",
    "public: void __thiscall istrstream::`vbase destructor'(void)",
    "_wopen",
    "_putenv",
    "_tcsnccmp",
    "_chgsign",
    "public: class ostream & __thiscall ostream_withassign::operator=(class streambuf *)",
    "protected: __thiscall iostream::iostream(void)",
    "public: static int const filebuf::sh_write",
    "protected: void __thiscall streambuf::pbump(int)",
    "public: __thiscall ios::operator void *(void)const",
    "srand",
    "iswalnum",
    "public: class istream & __thiscall istream::putback(char)",
    "protected: __thiscall streambuf::streambuf(void)",
    "puts",
    "_adj_fprem1",
    "_wgetenv",
    "__p___initenv",
    "__pxcptinfoptrs",
    "const iostream::`vbtable'{for `ostream'}",
    "const istream_withassign::`vftable'",
    "const ostream_withassign::`vbtable'",
    "_tcspbrk",
    "public: char * __thiscall strstream::str(void)",
    "public: class istream & __thiscall istream::get(unsigned char &)",
    "_putws",
    "_setsystime",
    "__p___argv",
    "__wgetmainargs",
    "_wrmdir",
    "public: static int const filebuf::binary",
    "public: int __thiscall filebuf::fd(void)const",
    "public: virtual void * __thiscall ostream_withassign::`scalar deleting destructor'(unsigned int)",
    "public: class ostream & __thiscall ostream::operator<<(char const *)",
    "void __cdecl unexpected(void)",
    "strpbrk",
    "_tcsninc",
    "wcsxfrm",
    "_spawnv",
    "mbtowc",
    "ungetc",
    "public: class istream & __thiscall istream::getline(unsigned char *,int,char)",
    "_mbsrchr",
    "_wfopen",
    "protected: virtual int __thiscall strstreambuf::doallocate(void)",
    "_mtlock",
    "_ismbbkpunct",
    "public: __thiscall iostream::iostream(class streambuf *)",
    "wcsftime",
    "_fileinfo",
    "_tcsrchr",
    "exp",
    "public: class istream & __thiscall istream::operator>>(unsigned char *)",
    "strstr",
    "public: __thiscall ios::ios(class streambuf *)",
    "public: class ostream & __thiscall ostream::operator<<(int)",
    "_CItanh",
    "_futime",
    "public: class ifstream & __thiscall ifstream::operator=(class ifstream const &)",
    "wcscspn",
    "protected: class ostream & __thiscall ostream::operator=(class ostream const &)",
    "const iostream::`vftable'",
    "public: long __thiscall ios::flags(void)const",
    "public: class istream & __thiscall istream::read(unsigned char *,int)",
    "qsort",
    "class ostream_withassign cout",
    "_y1",
    "const ostrstream::`vbtable'",
    "public: __thiscall ofstream::ofstream(int)",
    "public: __thiscall ostream_withassign::ostream_withassign(class ostream_withassign const &)",
    "_wperror",
    "_read",
    "fgets",
    "perror",
    "public: virtual void * __thiscall iostream::`vector deleting destructor'(unsigned int)",
    "public: int __thiscall filebuf::is_open(void)const",
    "public: long __thiscall ios::setf(long,long)",
    "public: virtual __thiscall ifstream::~ifstream(void)",
    "public: static void __cdecl ios::sync_with_stdio(void)",
    "_ismbbkana",
    "__doserrno",
    "__p__mbctype",
    "_setmbcp",
    "_wspawnlpe",
    "protected: __thiscall ios::ios(class ios const &)",
    "public: class ostream & __thiscall ostream::operator<<(void const *)",
    "ferror",
    "_adj_fdivr_m32i",
    "_wspawnv",
    "_wexecl",
    "_adj_fdiv_m16i",
    "public: class istream & __thiscall istream::ignore(int,int)",
    "fsetpos",
    "_acmdln",
    "longjmp",
    "mblen",
    "const ifstream::`vftable'",
    "public: class ostrstream & __thiscall ostrstream::operator=(class ostrstream const &)",
    "public: static long const ios::basefield",
    "public: class istream & __thiscall istream::getline(signed char *,int,char)",
    "public: int __thiscall istream::get(void)",
    "strcoll",
    "_nextafter",
    "__wargv",
    "_wpgmptr",
    "fputwc",
    "fputws",
    "public: class stdiobuf * __thiscall stdiostream::rdbuf(void)const",
    "_wgetdcwd",
    "ldiv",
    "const ostream::`vftable'",
    "_wcsset",
    "public: __thiscall istrstream::istrstream(char *,int)",
    "_wpopen",
    "tolower",
    "_mbscat",
    "_wspawnvpe",
    "iswdigit",
    "public: int __thiscall streambuf::snextc(void)",
    "_isnan",
    "__p__amblksiz",
    "public: virtual int __thiscall streambuf::pbackfail(int)",
    "public: void __thiscall ofstream::attach(int)",
    "strncmp",
    "public: static long const ios::floatfield",
    "__p__tzname",
    "_findnext",
    "protected: class iostream & __thiscall iostream::operator=(class streambuf *)",
    "_adj_fdivr_m64",
    "iswxdigit",
    "public: static int const filebuf::sh_none",
    "protected: char * __thiscall streambuf::ebuf(void)const",
    "strspn",
    "bsearch",
    "wcsncmp",
    "_tcsnextc",
    "memchr",
    "_adj_fdiv_m32",
    "private: static long * ios::x_statebuf",
    "public: virtual int __thiscall stdiobuf::sync(void)",
    "public: __thiscall strstreambuf::strstreambuf(void * (__cdecl*)(long),void (__cdecl*)(void *))",
    "public: static long const ios::adjustfield",
    "_wunlink",
    "mktime",
    "_onexit",
    "const filebuf::`vftable'",
    "_mbctokata",
    "public: virtual void * __thiscall stdiostream::`vector deleting destructor'(unsigned int)",
    "_tcsnccpy",
    "public: void __thiscall fstream::`vbase destructor'(void)",
    "_wexecvp",
    "_mbsncmp",
    "_mbsspn",
    "gmtime",
    "protected: class ios & __thiscall ios::operator=(class ios const &)",
    "_wfreopen",
    "_spawnle",
    "fwscanf",
    "abs",
    "public: void __thiscall ofstream::open(char const *,int,int)",
    "fread",
    "gets",
    "isspace",
    "public: class istream & __thiscall istream::operator>>(unsigned int &)",
    "_wremove",
    "private: static struct _RTL_CRITICAL_SECTION ios::x_lockc",
    "public: virtual void * __thiscall filebuf::`vector deleting destructor'(unsigned int)",
    "public: class filebuf * __thiscall filebuf::open(char const *,int,int)",
    "public: int __thiscall streambuf::sputc(int)",
    "public: __thiscall strstream::strstream(char *,int,int)",
    "_fileno",
    "atan2",
    "printf",
    "_chdrive",
    "towlower",
    "_fgetwchar",
    "public: __thiscall ifstream::ifstream(void)",
    "_beep",
    "_wchmod",
    "public: class istream & __thiscall istream::operator>>(char &)",
    "vfprintf",
    "public: virtual void * __thiscall istream_withassign::`scalar deleting destructor'(unsigned int)",
    "protected: __thiscall istream::istream(void)",
    "public: __thiscall ifstream::ifstream(int)",
    "__mb_cur_max",
    "__p__wenviron",
    "_mbsnbcmp",
    "public: int __thiscall istream::ipfx(int)",
    "iswlower",
    "class ostream & __cdecl endl(class ostream &)",
    "public: virtual int __thiscall stdiobuf::underflow(void)",
    "public: void __thiscall ifstream::`vbase destructor'(void)",
    "__p__pctype",
    "public: virtual __thiscall ios::~ios(void)",
    "public: __thiscall istream_withassign::istream_withassign(class streambuf *)",
    "const stdiostream::`vbtable'{for `istream'}",
    "_wexecv",
    "public: class ostream & __thiscall ostream::flush(void)",
    "public: class streambuf * __thiscall ios::rdbuf(void)const",
    "public: int __thiscall fstream::is_open(void)const",
    "public: virtual __thiscall filebuf::~filebuf(void)",
    "public: __thiscall ifstream::ifstream(class ifstream const &)",
    "public: void __thiscall strstreambuf::freeze(int)",
    "public: virtual long __thiscall filebuf::seekoff(long,enum ios::seek_dir,int)",
    "wprintf",
    "public: virtual __thiscall stdiobuf::~stdiobuf(void)",
    "atan",
    "_tzname",
    "_mbsnccnt",
    "protected: __thiscall iostream::iostream(class iostream const &)",
    "public: class istream & __thiscall istream::operator>>(class streambuf *)",
    "towupper",
    "wcscmp",
    "_rotl",
    "public: class istream & __thiscall istream::operator>>(class ios & (__cdecl*)(class ios &))",
    "public: virtual class streambuf * __thiscall strstreambuf::setbuf(char *,int)",
    "getchar",
    "wcstok",
    "protected: class istream & __thiscall istream::operator=(class istream const &)",
    "_ismbcl0",
    "_spawnvp",
    "public: __thiscall strstreambuf::strstreambuf(char *,int,char *)",
    "_ismbcl2",
    "_mbsnbicmp",
    "_getmbcp",
    "__threadid",
    "const ios::`vftable'",
    "_wutime",
    "wcscoll",
    "_abnormal_termination",
    "_amsg_exit",
    "_get_osfhandle",
    "_CIacos",
    "public: virtual __thiscall istream::~istream(void)",
    "__CxxLongjmpUnwind",
    "_vsnprintf",
    "_access"
  ],
  "msvcrt40.dll": [
    "__p___winitenv",
    "public: static int const filebuf::openprot",
    "_adj_fprem",
    "_mbsncat",
    "__p__pgmptr",
    "_seterrormode",
    "public: __thiscall ostream_withassign::ostream_withassign(class streambuf *)",
    "public: virtual __thiscall stdiostream::~stdiostream(void)",
    "__iscsym",
    "public: int __thiscall type_info::operator==(class type_info const &)const",
    "_setmaxstdio",
    "_strlwr",
    "_unloaddll",
    "public: virtual void * __thiscall ifstream::`vector deleting destructor'(unsigned int)",
    "void (__cdecl*__cdecl set_unexpected(void (__cdecl*)(void)))(void)",
    "strcspn",
    "_heapchk",
    "strtod",
    "public: virtual void * __thiscall ostrstream::`scalar deleting destructor'(unsigned int)",
    "remove",
    "public: virtual __thiscall bad_typeid::~bad_typeid(void)",
    "_daylight",
    "public: class istream & __thiscall istream::operator>>(unsigned long &)",
    "_mkdir",
    "_controlfp",
    "private: static struct _CRT_CRITICAL_SECTION ios::x_lockc",
    "_waccess",
    "_ismbbalpha",
    "public: void __thiscall stdiostream::`vbase destructor'(void)",
    "localeconv",
    "public: class istream & __thiscall istream::get(char &)",
    "public: class istream & __thiscall istream::operator>>(float &)",
    "fputc",
    "_wfsopen",
    "public: class ostream & __thiscall ostream::write(signed char const *,int)",
    "_findnexti64",
    "public: __thiscall istrstream::istrstream(class istrstream const &)",
    "_rmdir",
    "public: virtual __thiscall ostream::~ostream(void)",
    "public: class strstreambuf & __thiscall strstreambuf::operator=(class strstreambuf const &)",
    "public: virtual void * __thiscall fstream::`scalar deleting destructor'(unsigned int)",
    "public: class streambuf * __thiscall ofstream::setbuf(char *,int)",
    "_CIlog",
    "protected: void __thiscall ios::init(class streambuf *)",
    "iswupper",
    "public: virtual void * __thiscall stdiostream::`scalar deleting destructor'(unsigned int)",
    "setlocale",
    "_winmajor",
    "_sopen",
    "public: virtual int __thiscall strstreambuf::underflow(void)",
    "public: virtual void * __thiscall istream::`vector deleting destructor'(unsigned int)",
    "__p__pwctype",
    "_fputwchar",
    "public: class istream & __thiscall istream::read(char *,int)",
    "_tzset",
    "_fpieee_flt",
    "tanh",
    "_flsbuf",
    "public: __thiscall ofstream::ofstream(char const *,int,int)",
    "public: class ostream & __thiscall ostream::operator<<(char)",
    "private: static int ios::sunk_with_stdio",
    "public: class ostream & __thiscall ostream::write(unsigned char const *,int)",
    "wcstombs",
    "protected: char * __thiscall streambuf::pbase(void)const",
    "iscntrl",
    "public: class ostream & __thiscall ostream::operator<<(unsigned char)",
    "_atodbl",
    "_atoldbl",
    "public: virtual int __thiscall strstreambuf::sync(void)",
    "_wenviron",
    "public: class ostream & __thiscall ostream::operator<<(double)",
    "_spawnve",
    "public: int __thiscall ifstream::fd(void)const",
    "wcscpy",
    "_setjmp3",
    "_wasctime",
    "_wstati64",
    "public: __thiscall streambuf::streambuf(class streambuf const &)",
    "public: virtual __thiscall istream_withassign::~istream_withassign(void)",
    "public: class strstreambuf * __thiscall strstream::rdbuf(void)const",
    "isgraph",
    "_splitpath",
    "protected: __thiscall ostream::ostream(class ostream const &)",
    "public: __thiscall istream_withassign::istream_withassign(class istream_withassign const &)",
    "isprint",
    "public: virtual void * __thiscall ifstream::`scalar deleting destructor'(unsigned int)",
    "class ostream & __cdecl flush(class ostream &)",
    "void (__cdecl*__cdecl _set_se_translator(void (__cdecl*)(unsigned int,struct _EXCEPTION_POINTERS *)))(unsigned int,struct _EXCEPTION_POINTERS *)",
    "_flushall",
    "void (__cdecl*__cdecl set_new_handler(void (__cdecl*)(void)))(void)",
    "rand",
    "public: class ofstream & __thiscall ofstream::operator=(class ofstream const &)",
    "_lsearch",
    "_tempnam",
    "rename",
    "public: class istream & __thiscall istream::operator>>(class istream & (__cdecl*)(class istream &))",
    "_getdcwd",
    "_wmkdir",
    "div",
    "fabs",
    "_ismbbkprint",
    "ftell",
    "cos",
    "cosh",
    "public: __thiscall istrstream::istrstream(char *)",
    "public: __thiscall stdiostream::stdiostream(struct _iobuf *)",
    "swprintf",
    "_wtmpnam",
    "_wmakepath",
    "public: class istream & __thiscall istream::get(signed char &)",
    "putchar",
    "public: __thiscall istream_withassign::istream_withassign(void)",
    "_gcvt",
    "_wcsrev",
    "public: class Iostream_init & __thiscall Iostream_init::operator=(class Iostream_init const &)",
    "_adj_fdiv_m64",
    "_ctype",
    "public: virtual void * __thiscall stdiobuf::`vector deleting destructor'(unsigned int)",
    "_spawnlp",
    "_putw",
    "public: class istream & __thiscall istream::operator>>(int &)",
    "public: virtual void * __thiscall ofstream::`vector deleting destructor'(unsigned int)",
    "_safe_fdiv",
    "_spawnvpe",
    "_mtunlock",
    "const strstream::`vbtable'{for `ostream'}",
    "public: int __thiscall ifstream::setmode(int)",
    "_heapwalk",
    "__initenv",
    "_mbccpy",
    "_ismbstrail",
    "public: virtual long __thiscall strstreambuf::seekoff(long,enum ios::seek_dir,int)",
    "_mbcjmstojis",
    "_pipe",
    "difftime",
    "_chdir",
    "_cscanf",
    "rewind",
    "_strupr",
    "_winver",
    "_CIatan2",
    "_CIpow",
    "asctime",
    "_filelengthi64",
    "fclose",
    "_wspawnve",
    "_CIsinh",
    "_filbuf",
    "public: char * __thiscall istrstream::str(void)",
    "_mbsnicmp",
    "_strnicoll",
    "const bad_cast::`vftable'",
    "_getche",
    "_fullpath",
    "getwchar",
    "public: __thiscall logic_error::logic_error(char const * const &)",
    "_fpreset",
    "__lconv_init",
    "public: class istream & __thiscall istream::operator>>(long &)",
    "_EH_prolog",
    "clock",
    "_adj_fdivr_m32",
    "putwc",
    "_wsetlocale",
    "_ismbbgraph",
    "_strncoll",
    "_ismbcspace",
    "_execvp",
    "_pgmptr",
    "const fstream::`vbtable'{for `ostream'}",
    "public: class istream & __thiscall istream::get(unsigned char *,int,char)",
    "public: int __thiscall streambuf::sbumpc(void)",
    "_CItan",
    "_swab",
    "class ostream_withassign cerr",
    "_mbscoll",
    "public: __thiscall fstream::fstream(int,char *,int)",
    "_stat",
    "public: int __thiscall istream::sync(void)",
    "public: virtual void * __thiscall streambuf::`scalar deleting destructor'(unsigned int)",
    "__fpecode",
    "_strdate",
    "const istream_withassign::`vbtable'",
    "_mbsnbcnt",
    "__RTtypeid",
    "_copysign",
    "__p__iob",
    "_wgetcwd",
    "_mbslwr",
    "public: int __thiscall streambuf::out_waiting(void)const",
    "private: int __thiscall istream::getint(char *)",
    "_wsplitpath",
    "atof",
    "public: class ostream & __thiscall ostream::put(char)",
    "wcsncpy",
    "public: __thiscall ostream_withassign::ostream_withassign(void)",
    "const istream::`vbtable'",
    "public: __thiscall exception::exception(class exception const &)",
    "public: int __thiscall ios::rdstate(void)const",
    "public: virtual void * __thiscall bad_cast::`vector deleting destructor'(unsigned int)",
    "protected: void __thiscall streambuf::setb(char *,char *,int)",
    "iswctype",
    "_ungetch",
    "public: int __thiscall streambuf::sputn(char const *,int)",
    "protected: char * __thiscall streambuf::pptr(void)const",
    "public: virtual __thiscall istrstream::~istrstream(void)",
    "public: void __thiscall ostrstream::`vbase destructor'(void)",
    "_fdopen",
    "public: virtual void * __thiscall strstream::`scalar deleting destructor'(unsigned int)",
    "fgetws",
    "public: class filebuf * __thiscall fstream::rdbuf(void)const",
    "_mbbtombc",
    "public: __thiscall strstreambuf::strstreambuf(int)",
    "public: int __thiscall type_info::operator!=(class type_info const &)const",
    "public: void __thiscall ostream_withassign::`vbase destructor'(void)",
    "protected: char * __thiscall streambuf::epptr(void)const",
    "_cwait",
    "public: int __thiscall ios::precision(int)",
    "_popen",
    "_CIasin",
    "_memccpy",
    "_CIlog10",
    "_mbsdup",
    "free",
    "_j1",
    "protected: char * __thiscall streambuf::base(void)const",
    "protected: int __thiscall streambuf::allocate(void)",
    "_lseek",
    "_adj_fptan",
    "public: class streambuf * __thiscall fstream::setbuf(char *,int)",
    "public: long & __thiscall ios::iword(int)const",
    "strtoul",
    "_cprintf",
    "wcstoul",
    "ispunct",
    "public: __thiscall ifstream::ifstream(int,char *,int)",
    "public: void __thiscall ios::clear(int)",
    "_endthread",
    "public: virtual void * __thiscall strstreambuf::`scalar deleting destructor'(unsigned int)",
    "public: void __thiscall istream::isfx(void)",
    "_fsopen",
    "_mbsncoll",
    "public: class ostream & __thiscall ostream::operator<<(class ostream & (__cdecl*)(class ostream &))",
    "private: int __thiscall istream::getdouble(char *,int)",
    "strcmp",
    "_kbhit",
    "_ultoa",
    "__RTCastToVoid",
    "public: __thiscall fstream::fstream(char const *,int,int)",
    "private: static int ios::fLockcInit",
    "public: void __thiscall ifstream::close(void)",
    "public: __thiscall fstream::fstream(class fstream const &)",
    "vwprintf",
    "public: __thiscall strstreambuf::strstreambuf(class strstreambuf const &)",
    "_cexit",
    "_ismbckata",
    "isalpha",
    "public: class ostream & __thiscall ostream::operator<<(unsigned long)",
    "public: void __cdecl ios::clrlock(void)",
    "vsprintf",
    "_heapset",
    "getc",
    "_lrotr",
    "_mbsnbcpy",
    "_wexecle",
    "int __cdecl _query_new_mode(void)",
    "_ismbclegal",
    "public: class istream & __thiscall istream::operator>>(unsigned char &)",
    "__p___argc",
    "public: class ostream & __thiscall ostream::operator<<(unsigned short)",
    "const strstreambuf::`vftable'",
    "_execvpe",
    "public: __thiscall ofstream::ofstream(void)",
    "fmod",
    "public: class ostream & __thiscall ostream::operator<<(long double)",
    "void __cdecl operator delete(void *)",
    "_rotr",
    "_wspawnl",
    "_mbsicmp",
    "_mbsnbicoll",
    "public: int __thiscall ostrstream::pcount(void)const",
    "public: void __cdecl ios::lock(void)",
    "_mbscspn",
    "_ismbbprint",
    "const strstream::`vftable'",
    "public: int __thiscall ios::precision(void)const",
    "public: virtual void * __thiscall bad_typeid::`vector deleting destructor'(unsigned int)",
    "_wstat",
    "const ostream::`vbtable'",
    "protected: __thiscall ostream::ostream(void)",
    "public: void __thiscall streambuf::dbp(void)",
    "_fcvt",
    "acos",
    "atoi",
    "iswpunct",
    "public: void __thiscall streambuf::clrlock(void)",
    "public: class istream & __thiscall istream::operator>>(short &)",
    "const logic_error::`vftable'",
    "public: class ostream * __thiscall ios::tie(void)const",
    "_getpid",
    "__p___wargv",
    "_mbsninc",
    "public: virtual void * __thiscall istrstream::`scalar deleting destructor'(unsigned int)",
    "clearerr",
    "wcspbrk",
    "_execve",
    "_getdiskfree",
    "_mbsnextc",
    "_HUGE",
    "__p___mb_cur_max",
    "__p__acmdln",
    "public: virtual void * __thiscall istream_withassign::`vector deleting destructor'(unsigned int)",
    "_open_osfhandle",
    "public: virtual __thiscall bad_cast::~bad_cast(void)",
    "_ismbbkalnum",
    "_setjmp",
    "_snprintf",
    "sscanf",
    "_safe_fprem",
    "wcslen",
    "public: int __thiscall ios::operator!(void)const",
    "wscanf",
    "atol",
    "_adj_fdiv_r",
    "public: virtual __thiscall iostream::~iostream(void)",
    "public: virtual void * __thiscall exception::`vector deleting destructor'(unsigned int)",
    "public: virtual void * __thiscall logic_error::`vector deleting destructor'(unsigned int)",
    "public: static int __cdecl ios::xalloc(void)",
    "_mbctohira",
    "_putch",
    "public: virtual int __thiscall strstreambuf::overflow(int)",
    "public: class istream & __thiscall istream::getline(char *,int,char)",
    "public: virtual void * __thiscall bad_typeid::`scalar deleting destructor'(unsigned int)",
    "_ismbcdigit",
    "_ismbcpunct",
    "_wcsnset",
    "ceil",
    "_heapused",
    "public: void __cdecl ios::unlockbuf(void)",
    "const ofstream::`vftable'",
    "protected: int __thiscall streambuf::blen(void)const",
    "protected: __thiscall ios::ios(void)",
    "_execv",
    "_adj_fpatan",
    "_wcsnicoll",
    "_iob",
    "public: virtual void * __thiscall ostrstream::`vector deleting destructor'(unsigned int)",
    "_statusfp",
    "public: virtual void * __thiscall filebuf::`scalar deleting destructor'(unsigned int)",
    "_wfindnexti64",
    "public: virtual __thiscall type_info::~type_info(void)",
    "public: virtual void * __thiscall istream::`scalar deleting destructor'(unsigned int)",
    "_y0",
    "strtok",
    "_wstrtime",
    "_mbsdec",
    "is_wctype",
    "__set_app_type",
    "public: class ostream & __thiscall ostream::operator<<(signed char const *)",
    "public: int __thiscall ios::eof(void)const",
    "public: __thiscall __non_rtti_object::__non_rtti_object(class __non_rtti_object const &)",
    "public: void __thiscall streambuf::unlock(void)",
    "public: void __thiscall istream_withassign::`vbase destructor'(void)",
    "_wrename",
    "__argv",
    "public: int __thiscall stdiobuf::setrwbuf(int,int)",
    "public: class istream & __thiscall istream::operator>>(unsigned short &)",
    "const iostream::`vbtable'{for `istream'}",
    "public: __thiscall Iostream_init::~Iostream_init(void)",
    "public: char const * __thiscall type_info::raw_name(void)const",
    "scanf",
    "public: virtual void * __thiscall __non_rtti_object::`vector deleting destructor'(unsigned int)",
    "_ltoa",
    "_strset",
    "_getw",
    "_ismbclower",
    "_mbsspnp",
    "_ftol",
    "protected: class ostream & __thiscall ostream::operator=(class streambuf *)",
    "_snwprintf",
    "class istream & __cdecl ws(class istream &)",
    "_fstati64",
    "public: __thiscall ostrstream::ostrstream(char *,int,int)",
    "public: int __thiscall type_info::before(class type_info const &)const",
    "public: virtual void * __thiscall logic_error::`scalar deleting destructor'(unsigned int)",
    "public: void __thiscall ostream::`vbase destructor'(void)",
    "public: long __thiscall ios::unsetf(long)",
    "tan",
    "public: virtual __thiscall strstream::~strstream(void)",
    "public: __thiscall ifstream::ifstream(char const *,int,int)",
    "__p__osver",
    "_mktemp",
    "public: __thiscall filebuf::filebuf(class filebuf const &)",
    "_mbsnicoll",
    "_inpd",
    "_wsopen",
    "_wputenv",
    "const fstream::`vbtable'{for `istream'}",
    "public: class streambuf & __thiscall streambuf::operator=(class streambuf const &)",
    "_itow",
    "_mbsupr",
    "_except_handler2",
    "_mbctombb",
    "protected: class istream & __thiscall istream::get(char *,int,int)",
    "public: __thiscall bad_cast::bad_cast(class bad_cast const &)",
    "_fgetchar",
    "tmpnam",
    "protected: void __thiscall streambuf::setg(char *,char *,char *)",
    "_vsnwprintf",
    "_CIsin",
    "const stdiobuf::`vftable'",
    "__CxxFrameHandler",
    "_ismbslead",
    "wcstol",
    "_getdllprocaddr",
    "public: __thiscall Iostream_init::Iostream_init(void)",
    "public: class istream & __thiscall istream::operator>>(char *)",
    "public: class strstream & __thiscall strstream::operator=(class strstream &)",
    "public: virtual long __thiscall streambuf::seekpos(long,int)",
    "void __cdecl terminate(void)",
    "fgetpos",
    "public: void __thiscall streambuf::stossc(void)",
    "const fstream::`vftable'",
    "_ismbcprint",
    "wctomb",
    "__p__fmode",
    "class istream_withassign cin",
    "_pwctype",
    "private: static int ios::x_curindex",
    "protected: __thiscall streambuf::streambuf(char *,int)",
    "public: class istream & __thiscall istream::get(char *,int,char)",
    "_ftime",
    "_mbsbtype",
    "public: class ostream & __thiscall ostream::operator<<(signed char)",
    "public: virtual void * __thiscall istrstream::`vector deleting destructor'(unsigned int)",
    "strlen",
    "_CIatan",
    "_mbsncpy",
    "public: __thiscall filebuf::filebuf(int)",
    "_dup2",
    "public: class ostream & __thiscall ostream::operator<<(unsigned char const *)",
    "_fcloseall",
    "public: __thiscall stdiobuf::stdiobuf(struct _iobuf *)",
    "_mbsicoll",
    "int (__cdecl*__cdecl _query_new_handler(void))(unsigned int)",
    "public: class ostream & __thiscall ostream_withassign::operator=(class ostream const &)",
    "public: void __cdecl ios::lockbuf(void)",
    "public: class strstreambuf * __thiscall ostrstream::rdbuf(void)const",
    "_local_unwind2",
    "atexit",
    "_strerror",
    "public: __thiscall strstreambuf::strstreambuf(void)",
    "_safe_fprem1",
    "_stricoll",
    "isalnum",
    "_control87",
    "public: class bad_typeid & __thiscall bad_typeid::operator=(class bad_typeid const &)",
    "public: void * & __thiscall ios::pword(int)const",
    "public: class bad_cast & __thiscall bad_cast::operator=(class bad_cast const &)",
    "public: class filebuf * __thiscall ofstream::rdbuf(void)const",
    "strncpy",
    "_telli64",
    "const istrstream::`vbtable'",
    "raise",
    "_chsize",
    "public: virtual __thiscall strstreambuf::~strstreambuf(void)",
    "_mbstok",
    "_set_error_mode",
    "_toupper",
    "_ltow",
    "public: class stdiostream & __thiscall stdiostream::operator=(class stdiostream &)",
    "int (__cdecl*__cdecl _set_new_handler(int (__cdecl*)(unsigned int)))(unsigned int)",
    "_environ",
    "protected: static void __cdecl ios::lockc(void)",
    "_tolower",
    "_mbbtype",
    "public: __thiscall ofstream::ofstream(class ofstream const &)",
    "public: virtual __thiscall ofstream::~ofstream(void)",
    "_strnicmp",
    "_execl",
    "_strnset",
    "_aexit_rtn",
    "public: class ostream & __thiscall ostream::operator<<(long)",
    "public: class ostream_withassign & __thiscall ostream_withassign::operator=(class ostream_withassign const &)",
    "_mbscmp",
    "_wfindfirst",
    "private: class ostream & __thiscall ostream::writepad(char const *,char const *)",
    "public: class ostream & __thiscall ostream::operator<<(float)",
    "public: virtual int __thiscall filebuf::overflow(int)",
    "public: virtual void * __thiscall fstream::`vector deleting destructor'(unsigned int)",
    "_eof",
    "public: int __thiscall streambuf::in_avail(void)const",
    "_mbctype",
    "public: virtual __thiscall ostream_withassign::~ostream_withassign(void)",
    "memmove",
    "public: void __thiscall streambuf::lock(void)",
    "__p__daylight",
    "public: void __thiscall strstream::`vbase destructor'(void)",
    "protected: void __thiscall streambuf::gbump(int)",
    "_mbctolower",
    "_wexeclp",
    "__winitenv",
    "_mbsnbset",
    "_dup",
    "_getsystime",
    "const bad_typeid::`vftable'",
    "_fpclass",
    "_timezone",
    "islower",
    "public: class istream_withassign & __thiscall istream_withassign::operator=(class istream_withassign const &)",
    "class ios & __cdecl hex(class ios &)",
    "public: __thiscall __non_rtti_object::__non_rtti_object(char const *)",
    "strcat",
    "__getmainargs",
    "exit",
    "time",
    "wcsrchr",
    "memcmp",
    "abort",
    "class ios & __cdecl oct(class ios &)",
    "public: virtual int __thiscall streambuf::xsputn(char const *,int)",
    "ctime",
    "_beginthread",
    "_seh_longjmp_unwind",
    "_execlp",
    "_unlink",
    "system",
    "_XcptFilter",
    "public: class istream & __thiscall istream::operator>>(signed char &)",
    "_safe_fdivr",
    "__argc",
    "getenv",
    "_execle",
    "memset",
    "_isctype",
    "_setmode",
    "public: virtual char const * __thiscall exception::what(void)const",
    "public: __thiscall ofstream::ofstream(int,char *,int)",
    "public: int __thiscall ios::delbuf(void)const",
    "_purecall",
    "public: void __thiscall iostream::`vbase destructor'(void)",
    "_cgets",
    "frexp",
    "_ismbcl1",
    "public: int __thiscall ios::good(void)const",
    "public: int __thiscall ofstream::is_open(void)const",
    "_j0",
    "_getcwd",
    "fgetwc",
    "iswascii",
    "public: int __thiscall strstream::pcount(void)const",
    "public: static int const filebuf::sh_read",
    "public: int __thiscall filebuf::setmode(int)",
    "_ismbcgraph",
    "public: class istream & __thiscall istream::seekg(long)",
    "const ifstream::`vbtable'",
    "public: __thiscall ostrstream::ostrstream(void)",
    "public: __thiscall stdiostream::stdiostream(class stdiostream const &)",
    "protected: class iostream & __thiscall iostream::operator=(class iostream &)",
    "_fstat",
    "_strrev",
    "_ultow",
    "public: virtual void * __thiscall ios::`scalar deleting destructor'(unsigned int)",
    "fwrite",
    "_getdrive",
    "public: __thiscall strstream::strstream(void)",
    "public: void __thiscall streambuf::setlock(void)",
    "public: __thiscall ostream::ostream(class streambuf *)",
    "public: char * __thiscall strstreambuf::str(void)",
    "public: int __thiscall ofstream::fd(void)const",
    "sinh",
    "_jn",
    "_ismbbpunct",
    "public: __thiscall bad_cast::bad_cast(char const * const &)",
    "_mbsstr",
    "__p__winver",
    "public: int __thiscall ios::width(void)const",
    "realloc",
    "public: virtual int __thiscall stdiobuf::overflow(int)",
    "public: virtual int __thiscall stdiobuf::pbackfail(int)",
    "_spawnlpe",
    "_CIfmod",
    "_CIcosh",
    "_errno",
    "_yn",
    "_msize",
    "log",
    "protected: char * __thiscall streambuf::egptr(void)const",
    "strncat",
    "_mbschr",
    "public: virtual long __thiscall streambuf::seekoff(long,enum ios::seek_dir,int)",
    "public: int __thiscall ifstream::is_open(void)const",
    "_cabs",
    "_cputs",
    "public: class istream & __thiscall istream::get(signed char *,int,char)",
    "public: virtual void * __thiscall streambuf::`vector deleting destructor'(unsigned int)",
    "const ostream_withassign::`vftable'",
    "public: __thiscall stdiobuf::stdiobuf(class stdiobuf const &)",
    "_getch",
    "_loaddll",
    "memcpy",
    "swscanf",
    "public: void __cdecl ios::unlock(void)",
    "_mbclen",
    "public: virtual void * __thiscall ostream_withassign::`vector deleting destructor'(unsigned int)",
    "_initterm",
    "public: class stdiobuf & __thiscall stdiobuf::operator=(class stdiobuf const &)",
    "freopen",
    "public: class streambuf * __thiscall ifstream::setbuf(char *,int)",
    "_mbscpy",
    "protected: virtual int __thiscall streambuf::doallocate(void)",
    "protected: __thiscall istream::istream(class istream const &)",
    "_wstrdate",
    "public: class fstream & __thiscall fstream::operator=(class fstream &)",
    "public: void __cdecl ios::setlock(void)",
    "_adjust_fdiv",
    "wcsspn",
    "_wexecvpe",
    "public: virtual int __thiscall filebuf::sync(void)",
    "public: long __thiscall ostream::tellp(void)",
    "_hypot",
    "_spawnl",
    "log10",
    "_heapmin",
    "public: void __thiscall fstream::attach(int)",
    "public: __thiscall bad_typeid::bad_typeid(char const *)",
    "__p__dstbias",
    "_CIsqrt",
    "_finite",
    "protected: void __thiscall streambuf::unbuffered(int)",
    "public: void * __thiscall Iostream_init::`scalar deleting destructor'(unsigned int)",
    "_wfindnext",
    "_write",
    "public: void * __thiscall Iostream_init::`vector deleting destructor'(unsigned int)",
    "setbuf",
    "_exit",
    "_mbspbrk",
    "_findclose",
    "_ismbcalpha",
    "_memicmp",
    "_scalb",
    "_wcslwr",
    "class ios & __cdecl dec(class ios &)",
    "_pclose",
    "isxdigit",
    "protected: void __thiscall streambuf::setp(char *,char *)",
    "public: void __thiscall fstream::close(void)",
    "_strtime",
    "strtol",
    "public: void __thiscall istream::eatwhite(void)",
    "const stdiostream::`vftable'",
    "void * __cdecl operator new(unsigned int)",
    "public: __thiscall exception::exception(void)",
    "vfwprintf",
    "fscanf",
    "_endthreadex",
    "fopen",
    "public: virtual __thiscall streambuf::~streambuf(void)",
    "strxfrm",
    "asin",
    "modf",
    "pow",
    "const __non_rtti_object::`vftable'",
    "_except_handler3",
    "public: int __thiscall istream::gcount(void)const",
    "_logb",
    "mbstowcs",
    "__iscsymf",
    "_wexeclpe",
    "_wfdopen",
    "_lfind",
    "_wcsicoll",
    "fprintf",
    "_mbsinc",
    "public: virtual void * __thiscall iostream::`scalar deleting destructor'(unsigned int)",
    "__p__winminor",
    "protected: int __thiscall streambuf::unbuffered(void)const",
    "public: class filebuf & __thiscall filebuf::operator=(class filebuf const &)",
    "public: void __thiscall fstream::open(char const *,int,int)",
    "tmpfile",
    "_global_unwind2",
    "_wcreat",
    "public: virtual void * __thiscall strstream::`vector deleting destructor'(unsigned int)",
    "ldexp",
    "public: virtual void * __thiscall ios::`vector deleting destructor'(unsigned int)",
    "public: class istream & __thiscall istream::operator>>(long double &)",
    "_sys_nerr",
    "_ismbcupper",
    "putwchar",
    "public: virtual class streambuf * __thiscall streambuf::setbuf(char *,int)",
    "_clearfp",
    "_locking",
    "_wcsdup",
    "_wcsupr",
    "fputs",
    "_wexecve",
    "__toascii",
    "strchr",
    "public: int __thiscall ios::fail(void)const",
    "const stdiostream::`vbtable'{for `ostream'}",
    "_itoa",
    "const strstream::`vbtable'{for `istream'}",
    "malloc",
    "sin",
    "_expand",
    "_mbstrlen",
    "_pctype",
    "wcsstr",
    "public: void __thiscall ofstream::close(void)",
    "public: __thiscall filebuf::filebuf(int,char *,int)",
    "public: void __thiscall ifstream::open(char const *,int,int)",
    "class ostream & __cdecl ends(class ostream &)",
    "_tell",
    "public: class istream & __thiscall istream::operator>>(signed char *)",
    "_wspawnvp",
    "_ismbblead",
    "public: class __non_rtti_object & __thiscall __non_rtti_object::operator=(class __non_rtti_object const &)",
    "_makepath",
    "_commit",
    "_stricmp",
    "const istrstream::`vftable'",
    "public: class filebuf * __thiscall filebuf::close(void)",
    "public: class istream & __thiscall istream::seekg(long,enum ios::seek_dir)",
    "sprintf",
    "public: int __thiscall ostream::opfx(void)",
    "_wcsicmp",
    "public: __thiscall logic_error::logic_error(class logic_error const &)",
    "_mbsnset",
    "_wchdir",
    "__p__wpgmptr",
    "_wmktemp",
    "_mbsset",
    "_wsystem",
    "wcschr",
    "fflush",
    "fgetc",
    "int __cdecl _set_new_mode(int)",
    "iswspace",
    "public: __thiscall strstream::strstream(class strstream const &)",
    "_wfindfirsti64",
    "public: int __thiscall streambuf::sputbackc(char)",
    "_wcmdln",
    "floor",
    "public: char __thiscall ios::fill(char)",
    "public: void __thiscall ofstream::`vbase destructor'(void)",
    "public: class ostream & __thiscall ostream::write(char const *,int)",
    "public: int __thiscall streambuf::sgetc(void)",
    "_wtoi",
    "const streambuf::`vftable'",
    "_umask",
    "public: int __thiscall fstream::fd(void)const",
    "strerror",
    "_osver",
    "public: __thiscall filebuf::filebuf(void)",
    "public: __thiscall istream::istream(class streambuf *)",
    "vprintf",
    "const istream::`vftable'",
    "_mbctoupper",
    "_creat",
    "_getws",
    "_isatty",
    "_rmtmp",
    "_utime",
    "_wctime",
    "const exception::`vftable'",
    "public: __thiscall Iostream_init::Iostream_init(class ios &,int)",
    "_ismbcsymbol",
    "__unDName",
    "_assert",
    "isdigit",
    "protected: char * __thiscall streambuf::gptr(void)const",
    "public: virtual __thiscall fstream::~fstream(void)",
    "feof",
    "public: __thiscall ostrstream::ostrstream(class ostrstream const &)",
    "_mbsrev",
    "public: int __thiscall fstream::setmode(int)",
    "public: virtual class streambuf * __thiscall filebuf::setbuf(char *,int)",
    "_strcmpi",
    "public: class exception & __thiscall exception::operator=(class exception const &)",
    "public: int __thiscall istream::peek(void)",
    "strrchr",
    "public: class ostream & __thiscall ostream::operator<<(class streambuf *)",
    "_filelength",
    "public: class ostream & __thiscall ostream::operator<<(short)",
    "strftime",
    "class ostream_withassign clog",
    "public: virtual long __thiscall stdiobuf::seekoff(long,enum ios::seek_dir,int)",
    "wcstod",
    "public: class istream & __thiscall istream_withassign::operator=(class streambuf *)",
    "public: void __thiscall ifstream::attach(int)",
    "iswcntrl",
    "_findfirst",
    "public: char * __thiscall ostrstream::str(void)",
    "_sys_errlist",
    "_mbslen",
    "const ostrstream::`vftable'",
    "__setusermatherr",
    "_longjmpex",
    "public: int __thiscall ios::bad(void)const",
    "void (__cdecl*__cdecl set_terminate(void (__cdecl*)(void)))(void)",
    "__p__commode",
    "const ofstream::`vbtable'",
    "_searchenv",
    "public: virtual int __thiscall streambuf::sync(void)",
    "public: __thiscall fstream::fstream(int)",
    "public: virtual void * __thiscall strstreambuf::`vector deleting destructor'(unsigned int)",
    "_adj_fdiv_m32i",
    "_ecvt",
    "_fmode",
    "getwc",
    "public: char __thiscall ios::fill(void)const",
    "public: class istream & __thiscall istream::read(signed char *,int)",
    "_outpd",
    "public: class istrstream & __thiscall istrstream::operator=(class istrstream const &)",
    "public: virtual void * __thiscall ofstream::`scalar deleting destructor'(unsigned int)",
    "ungetwc",
    "public: class ostream & __thiscall ostream::put(signed char)",
    "public: class ostream & __thiscall ostream::seekp(long,enum ios::seek_dir)",
    "_c_exit",
    "putc",
    "isleadbyte",
    "_heapadd",
    "fseek",
    "__STRINGTOLD",
    "_CIcos",
    "_mbsnbcoll",
    "vswprintf",
    "_wtempnam",
    "public: virtual void * __thiscall ostream::`vector deleting destructor'(unsigned int)",
    "__p__timezone",
    "__p__wcmdln",
    "_close",
    "__p__environ",
    "iswalpha",
    "iswgraph",
    "_execlpe",
    "_mbcjistojms",
    "__dllonexit",
    "_wfullpath",
    "protected: struct _CRT_CRITICAL_SECTION * __thiscall streambuf::lockptr(void)",
    "_fputchar",
    "public: __thiscall fstream::fstream(void)",
    "public: int __thiscall ios::width(int)",
    "_wtol",
    "public: class ostream & __thiscall ostream::put(unsigned char)",
    "_beginthreadex",
    "_wspawnlp",
    "public: virtual __thiscall ostrstream::~ostrstream(void)",
    "_commode",
    "_wspawnle",
    "public: int __thiscall streambuf::sgetn(char *,int)",
    "calloc",
    "public: void __thiscall ios::delbuf(int)",
    "toupper",
    "labs",
    "_inp",
    "localtime",
    "public: virtual __thiscall exception::~exception(void)",
    "public: long __thiscall ios::setf(long)",
    "public: void __thiscall ostream::osfx(void)",
    "public: class ostream & __thiscall ostream::operator<<(class ios & (__cdecl*)(class ios &))",
    "sqrt",
    "$I10_OUTPUT",
    "_mbsnbcat",
    "public: class ostream & __thiscall ostream::operator<<(unsigned int)",
    "fwprintf",
    "public: class istream & __thiscall istream_withassign::operator=(class istream const &)",
    "protected: char * __thiscall streambuf::eback(void)const",
    "public: class ostream & __thiscall ostream::seekp(long)",
    "_sleep",
    "iswprint",
    "_lrotl",
    "public: class ostream * __thiscall ios::tie(class ostream *)",
    "_adj_fdivr_m16i",
    "_winminor",
    "_strdup",
    "__isascii",
    "public: long __thiscall istream::tellg(void)",
    "strcpy",
    "protected: class istream & __thiscall istream::operator=(class streambuf *)",
    "_ismbchira",
    "_CIexp",
    "wcsncat",
    "public: long __thiscall ios::flags(long)",
    "public: virtual int __thiscall streambuf::xsgetn(char *,int)",
    "protected: static void __cdecl ios::unlockc(void)",
    "public: class istream & __thiscall istream::operator>>(double &)",
    "public: class filebuf * __thiscall filebuf::attach(int)",
    "__threadhandle",
    "_ismbcalnum",
    "isupper",
    "public: struct _iobuf * __thiscall stdiobuf::stdiofile(void)",
    "public: virtual int __thiscall filebuf::underflow(void)",
    "_ismbbtrail",
    "public: virtual void * __thiscall ostream::`scalar deleting destructor'(unsigned int)",
    "public: void __thiscall istream::`vbase destructor'(void)",
    "public: static long __cdecl ios::bitalloc(void)",
    "_open",
    "public: static int const filebuf::text",
    "_wcsnicmp",
    "_wcsncoll",
    "public: virtual void * __thiscall stdiobuf::`scalar deleting destructor'(unsigned int)",
    "signal",
    "_CxxThrowException",
    "_getmaxstdio",
    "wcscat",
    "_wsearchenv",
    "public: class filebuf * __thiscall ifstream::rdbuf(void)const",
    "private: static long ios::x_maxbit",
    "_chmod",
    "public: class istream & __thiscall istream::get(class streambuf &,char)",
    "_lseeki64",
    "public: class strstreambuf * __thiscall istrstream::rdbuf(void)const",
    "__p__winmajor",
    "_getdrives",
    "_findfirsti64",
    "_ismbbalnum",
    "setvbuf",
    "public: int __thiscall ofstream::setmode(int)",
    "public: void __thiscall istrstream::`vbase destructor'(void)",
    "_wopen",
    "_putenv",
    "_chgsign",
    "public: class ostream & __thiscall ostream_withassign::operator=(class streambuf *)",
    "protected: __thiscall iostream::iostream(void)",
    "public: static int const filebuf::sh_write",
    "protected: void __thiscall streambuf::pbump(int)",
    "public: __thiscall ios::operator void *(void)const",
    "srand",
    "iswalnum",
    "public: class istream & __thiscall istream::putback(char)",
    "protected: __thiscall streambuf::streambuf(void)",
    "puts",
    "_adj_fprem1",
    "_wgetenv",
    "__p___initenv",
    "__pxcptinfoptrs",
    "const iostream::`vbtable'{for `ostream'}",
    "const istream_withassign::`vftable'",
    "const ostream_withassign::`vbtable'",
    "public: char * __thiscall strstream::str(void)",
    "public: class istream & __thiscall istream::get(unsigned char &)",
    "_putws",
    "_setsystime",
    "__p___argv",
    "__wgetmainargs",
    "_wrmdir",
    "public: static int const filebuf::binary",
    "public: int __thiscall filebuf::fd(void)const",
    "public: virtual void * __thiscall ostream_withassign::`scalar deleting destructor'(unsigned int)",
    "public: class ostream & __thiscall ostream::operator<<(char const *)",
    "void __cdecl unexpected(void)",
    "strpbrk",
    "wcsxfrm",
    "_spawnv",
    "mbtowc",
    "ungetc",
    "public: class istream & __thiscall istream::getline(unsigned char *,int,char)",
    "_mbsrchr",
    "_wfopen",
    "protected: virtual int __thiscall strstreambuf::doallocate(void)",
    "_mtlock",
    "_ismbbkpunct",
    "public: __thiscall iostream::iostream(class streambuf *)",
    "wcsftime",
    "_fileinfo",
    "exp",
    "public: class istream & __thiscall istream::operator>>(unsigned char *)",
    "public: virtual __thiscall logic_error::~logic_error(void)",
    "strstr",
    "public: __thiscall ios::ios(class streambuf *)",
    "public: class ostream & __thiscall ostream::operator<<(int)",
    "_CItanh",
    "_futime",
    "_inpw",
    "public: class ifstream & __thiscall ifstream::operator=(class ifstream const &)",
    "wcscspn",
    "protected: class ostream & __thiscall ostream::operator=(class ostream const &)",
    "const iostream::`vftable'",
    "public: long __thiscall ios::flags(void)const",
    "public: class istream & __thiscall istream::read(unsigned char *,int)",
    "qsort",
    "class ostream_withassign cout",
    "_y1",
    "_dstbias",
    "const ostrstream::`vbtable'",
    "public: __thiscall ofstream::ofstream(int)",
    "public: __thiscall ostream_withassign::ostream_withassign(class ostream_withassign const &)",
    "_wperror",
    "_read",
    "fgets",
    "perror",
    "public: virtual void * __thiscall iostream::`vector deleting destructor'(unsigned int)",
    "public: int __thiscall filebuf::is_open(void)const",
    "public: long __thiscall ios::setf(long,long)",
    "public: virtual __thiscall ifstream::~ifstream(void)",
    "public: static void __cdecl ios::sync_with_stdio(void)",
    "_ismbbkana",
    "__doserrno",
    "__p__mbctype",
    "_setmbcp",
    "_wspawnlpe",
    "protected: __thiscall ios::ios(class ios const &)",
    "public: class ostream & __thiscall ostream::operator<<(void const *)",
    "ferror",
    "_adj_fdivr_m32i",
    "_wspawnv",
    "_wexecl",
    "protected: struct _CRT_CRITICAL_SECTION * __thiscall ios::lockptr(void)",
    "_adj_fdiv_m16i",
    "public: class istream & __thiscall istream::ignore(int,int)",
    "fsetpos",
    "_acmdln",
    "longjmp",
    "mblen",
    "const ifstream::`vftable'",
    "public: class ostrstream & __thiscall ostrstream::operator=(class ostrstream const &)",
    "public: static long const ios::basefield",
    "public: class istream & __thiscall istream::getline(signed char *,int,char)",
    "public: int __thiscall istream::get(void)",
    "strcoll",
    "_nextafter",
    "__wargv",
    "public: virtual __thiscall __non_rtti_object::~__non_rtti_object(void)",
    "_wpgmptr",
    "fputwc",
    "fputws",
    "public: class stdiobuf * __thiscall stdiostream::rdbuf(void)const",
    "_wgetdcwd",
    "ldiv",
    "const ostream::`vftable'",
    "_wcsset",
    "public: __thiscall istrstream::istrstream(char *,int)",
    "__RTDynamicCast",
    "_wpopen",
    "public: virtual void * __thiscall __non_rtti_object::`scalar deleting destructor'(unsigned int)",
    "tolower",
    "_mbscat",
    "_wspawnvpe",
    "iswdigit",
    "public: int __thiscall streambuf::snextc(void)",
    "_isnan",
    "__p__amblksiz",
    "public: virtual int __thiscall streambuf::pbackfail(int)",
    "public: void __thiscall ofstream::attach(int)",
    "strncmp",
    "public: static long const ios::floatfield",
    "__p__tzname",
    "public: char const * __thiscall type_info::name(void)const",
    "_findnext",
    "protected: class iostream & __thiscall iostream::operator=(class streambuf *)",
    "_adj_fdivr_m64",
    "iswxdigit",
    "public: static int const filebuf::sh_none",
    "protected: char * __thiscall streambuf::ebuf(void)const",
    "strspn",
    "bsearch",
    "wcsncmp",
    "memchr",
    "_adj_fdiv_m32",
    "private: static long * ios::x_statebuf",
    "public: virtual int __thiscall stdiobuf::sync(void)",
    "public: __thiscall strstreambuf::strstreambuf(void * (__cdecl*)(long),void (__cdecl*)(void *))",
    "public: static long const ios::adjustfield",
    "_wunlink",
    "public: virtual void * __thiscall exception::`scalar deleting destructor'(unsigned int)",
    "mktime",
    "_onexit",
    "const filebuf::`vftable'",
    "_mbctokata",
    "public: virtual void * __thiscall stdiostream::`vector deleting destructor'(unsigned int)",
    "public: void __thiscall fstream::`vbase destructor'(void)",
    "_wexecvp",
    "_mbsncmp",
    "_mbsspn",
    "gmtime",
    "protected: class ios & __thiscall ios::operator=(class ios const &)",
    "_wfreopen",
    "public: __thiscall exception::exception(char const * const &)",
    "_spawnle",
    "fwscanf",
    "abs",
    "public: void __thiscall ofstream::open(char const *,int,int)",
    "fread",
    "gets",
    "isspace",
    "public: class istream & __thiscall istream::operator>>(unsigned int &)",
    "_wremove",
    "public: virtual void * __thiscall filebuf::`vector deleting destructor'(unsigned int)",
    "public: class filebuf * __thiscall filebuf::open(char const *,int,int)",
    "public: int __thiscall streambuf::sputc(int)",
    "public: __thiscall strstream::strstream(char *,int,int)",
    "_fileno",
    "atan2",
    "printf",
    "_chdrive",
    "towlower",
    "_fgetwchar",
    "public: __thiscall ifstream::ifstream(void)",
    "_beep",
    "_wchmod",
    "public: class istream & __thiscall istream::operator>>(char &)",
    "public: class logic_error & __thiscall logic_error::operator=(class logic_error const &)",
    "public: virtual void * __thiscall istream_withassign::`scalar deleting destructor'(unsigned int)",
    "vfprintf",
    "protected: __thiscall istream::istream(void)",
    "public: __thiscall ifstream::ifstream(int)",
    "__mb_cur_max",
    "__p__wenviron",
    "_mbsnbcmp",
    "public: int __thiscall istream::ipfx(int)",
    "iswlower",
    "class ostream & __cdecl endl(class ostream &)",
    "public: virtual int __thiscall stdiobuf::underflow(void)",
    "public: void __thiscall ifstream::`vbase destructor'(void)",
    "__p__pctype",
    "public: virtual __thiscall ios::~ios(void)",
    "public: __thiscall istream_withassign::istream_withassign(class streambuf *)",
    "const stdiostream::`vbtable'{for `istream'}",
    "_wexecv",
    "public: class ostream & __thiscall ostream::flush(void)",
    "public: class streambuf * __thiscall ios::rdbuf(void)const",
    "public: int __thiscall fstream::is_open(void)const",
    "public: virtual __thiscall filebuf::~filebuf(void)",
    "public: __thiscall ifstream::ifstream(class ifstream const &)",
    "public: void __thiscall strstreambuf::freeze(int)",
    "public: virtual long __thiscall filebuf::seekoff(long,enum ios::seek_dir,int)",
    "wprintf",
    "public: virtual __thiscall stdiobuf::~stdiobuf(void)",
    "_outpw",
    "atan",
    "_tzname",
    "_mbsnccnt",
    "protected: __thiscall iostream::iostream(class iostream const &)",
    "public: class istream & __thiscall istream::operator>>(class streambuf *)",
    "towupper",
    "wcscmp",
    "_rotl",
    "public: class istream & __thiscall istream::operator>>(class ios & (__cdecl*)(class ios &))",
    "public: virtual class streambuf * __thiscall strstreambuf::setbuf(char *,int)",
    "getchar",
    "wcstok",
    "protected: class istream & __thiscall istream::operator=(class istream const &)",
    "_ismbcl0",
    "_spawnvp",
    "public: __thiscall strstreambuf::strstreambuf(char *,int,char *)",
    "_ismbcl2",
    "_mbsnbicmp",
    "_outp",
    "_getmbcp",
    "__threadid",
    "const ios::`vftable'",
    "public: __thiscall bad_typeid::bad_typeid(class bad_typeid const &)",
    "_wutime",
    "wcscoll",
    "_abnormal_termination",
    "_amsg_exit",
    "_get_osfhandle",
    "_stati64",
    "_CIacos",
    "public: virtual __thiscall istream::~istream(void)",
    "__CxxLongjmpUnwind",
    "_vsnprintf",
    "public: virtual void * __thiscall bad_cast::`scalar deleting destructor'(unsigned int)",
    "_access"
  ],
  "msvfw32.dll": [
    "ICDraw",
    "MCIWndCreateW",
    "DrawDibGetPalette",
    "GetSaveFileNamePreviewW",
    "ICDrawBegin",
    "ICCompress",
    "GetOpenFileNamePreview",
    "GetOpenFileNamePreviewA",
    "ICOpen",
    "ICInfo",
    "DrawDibTime",
    "MCIWndCreate",
    "MCIWndRegisterClass",
    "MCIWndCreateA",
    "DrawDibClose",
    "ICGetDisplayFormat",
    "ICLocate",
    "ICSeqCompressFrame",
    "ICDecompress",
    "ICMThunk32",
    "DrawDibDraw",
    "GetSaveFileNamePreviewA",
    "DrawDibChangePalette",
    "ICImageCompress",
    "ICSeqCompressFrameStart",
    "ICOpenFunction",
    "GetOpenFileNamePreviewW",
    "DrawDibStop",
    "VideoForWindowsVersion",
    "DrawDibStart",
    "ICGetInfo",
    "ICImageDecompress",
    "DrawDibOpen",
    "ICSeqCompressFrameEnd",
    "DrawDibGetBuffer",
    "DrawDibRealize",
    "ICInstall",
    "StretchDIB",
    "DrawDibProfileDisplay",
    "DrawDibSetPalette",
    "ICClose",
    "DrawDibBegin",
    "ICRemove",
    "ICSendMessage",
    "DrawDibEnd",
    "ICCompressorFree",
    "ICCompressorChoose"
  ],
  "msvidc32.dll": [
    "DriverProc"
  ],
  "mswdat10.dll": "No exports",
  "mswmdm.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mswsock.dll": [
    "EnumProtocolsW",
    "GetTypeByNameA",
    "TransmitFile",
    "rcmd",
    "inet_network",
    "AcceptEx",
    "GetAddressByNameA",
    "s_perror",
    "StopWsdpService",
    "sethostname",
    "WSARecvEx",
    "NPLoadNameSpaces",
    "getnetbyname",
    "SetServiceW",
    "GetServiceA",
    "GetAcceptExSockaddrs",
    "GetNameByTypeA",
    "NSPStartup",
    "GetNameByTypeW",
    "GetServiceW",
    "rresvport",
    "WSPStartup",
    "GetTypeByNameW",
    "dn_expand",
    "GetAddressByNameW",
    "rexec",
    "SetServiceA",
    "EnumProtocolsA",
    "StartWsdpService",
    "MigrateWinsockConfiguration"
  ],
  "mswstr10.dll": "No exports",
  "msxbde40.dll": [
    "DllRegisterServer",
    "DllUnregisterServer"
  ],
  "msxml3.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "msxml3r.dll": "No exports",
  "msxml6.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllSetProperty",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "msxml6r.dll": "No exports",
  "msyuv.dll": [
    "DriverProc"
  ],
  "mtxclu.dll": [
    "MtxCluIsNetworkNameInLocalClusterW",
    "MtxCluGetSecurityRegValue",
    "MtxCluIsSameClusterW",
    "MtxCluIsSameNodeW",
    "MtxCluGetActiveClusterNode",
    "MtxCluTakeOfflineDTCW",
    "MtxCluGetDtcDiskResourceDrive",
    "MtxCluGetDTCVirtualServerNameW",
    "MtxCluIsClusterPresentExW",
    "MtxCluGetClusterResourceIdFromName",
    "MtxCluGetNameFromResourceIdString",
    "MtxCluEnumerateDtcResources",
    "MtxCluGetTmResource",
    "MtxCluGetResourceIdStringFromName",
    "MtxCluGetNameFromResourceIdStringNonAdmin",
    "MtxCluGetComputerNameW",
    "MtxCluGetDefaultClusterResource",
    "MtxCluIsClusterPresent",
    "MtxCluCreateTmInstanceForVirtualServer",
    "MtxCluSetSecurityRegValue",
    "MtxCluGetDTCResourceForResource",
    "Startup",
    "MtxCluCreateClusterTmInstance",
    "MtxCluBringOnlineDTCW",
    "MtxCluGetDefaultClusterResourceNonAdmin",
    "MtxCluGetDTCStatusW",
    "MtxCluGetResourceId",
    "MtxCluGetVirtualServerToken",
    "MtxCluVerifyLogPathInDependantDiskResource",
    "MtxCluCreateClusterProxyTmInstance",
    "MtxCluSetDefaultClusterResource"
  ],
  "mtxdm.dll": [
    "GetDispenserManager"
  ],
  "mtxex.dll": [
    "GetObjectContext",
    "SafeRef",
    "DllGetClassObject",
    "MTSCreateActivity"
  ],
  "mtxlegih.dll": [
    "TryLegInterfaceFirst"
  ],
  "mtxoci.dll": [
    "ofen",
    "ogetpi",
    "obindps",
    "odefinps",
    "Enlist",
    "MTxOciRegisterCursor",
    "ocom",
    "ocan",
    "orol",
    "oexn",
    "olog",
    "DllRegisterServer",
    "obndrv",
    "ologTransacted",
    "oerhms",
    "MTxolog",
    "obndrn",
    "ocof",
    "DllUnregisterServer",
    "ofetch",
    "odessp",
    "oflng",
    "oopen",
    "obndra",
    "oparse",
    "MTxOciInit",
    "oexfet",
    "odescr",
    "GetXaSwitch",
    "ocon",
    "obreak",
    "osetpi",
    "MTxOciGetVersion",
    "odefin",
    "opinit",
    "oexec",
    "oermsg",
    "oopt",
    "oclose",
    "ologof"
  ],
  "muifontsetup.dll": [
    "OnMachineUILanguageInit",
    "OnMachineUILanguageSwitch"
  ],
  "mycomput.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "mydocs.dll": [
    "DllCanUnloadNow",
    "PerUserInit",
    "DllGetClassObject"
  ],
  "NAPCRYPT.DLL": "No exports",
  "NAPHLPR.DLL": "No exports",
  "NAPMONTR.DLL": [
    "InitHelperDll",
    "DllMain"
  ],
  "NapiNSP.dll": [
    "NSPStartup",
    "DllMain"
  ],
  "NativeHooks.dll": "No exports",
  "NaturalLanguage6.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "NcdProp.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "NetProjW.dll": [
    "_NetworkProjectionThreadMain@12",
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "NlsData0000.dll": [
    "LangDataCall"
  ],
  "NlsData0001.dll": [
    "LangDataCall"
  ],
  "NlsData0002.dll": [
    "LangDataCall"
  ],
  "NlsData0003.dll": [
    "LangDataCall"
  ],
  "NlsData0007.dll": [
    "LangDataCall"
  ],
  "NlsData0009.dll": [
    "LangDataCall"
  ],
  "NlsData000a.dll": [
    "LangDataCall"
  ],
  "NlsData000c.dll": [
    "LangDataCall"
  ],
  "NlsData000d.dll": [
    "LangDataCall"
  ],
  "NlsData000f.dll": [
    "LangDataCall"
  ],
  "NlsData0010.dll": [
    "LangDataCall"
  ],
  "NlsData0011.dll": [
    "LangDataCall"
  ],
  "NlsData0013.dll": [
    "LangDataCall"
  ],
  "NlsData0018.dll": [
    "LangDataCall"
  ],
  "NlsData0019.dll": [
    "LangDataCall"
  ],
  "NlsData001a.dll": [
    "LangDataCall"
  ],
  "NlsData001b.dll": [
    "LangDataCall"
  ],
  "NlsData001d.dll": [
    "LangDataCall"
  ],
  "NlsData0020.dll": [
    "LangDataCall"
  ],
  "NlsData0021.dll": [
    "LangDataCall"
  ],
  "NlsData0022.dll": [
    "LangDataCall"
  ],
  "NlsData0024.dll": [
    "LangDataCall"
  ],
  "NlsData0026.dll": [
    "LangDataCall"
  ],
  "NlsData0027.dll": [
    "LangDataCall"
  ],
  "NlsData002a.dll": [
    "LangDataCall"
  ],
  "NlsData0039.dll": [
    "LangDataCall"
  ],
  "NlsData003e.dll": [
    "LangDataCall"
  ],
  "NlsData0045.dll": [
    "LangDataCall"
  ],
  "NlsData0046.dll": [
    "LangDataCall"
  ],
  "NlsData0047.dll": [
    "LangDataCall"
  ],
  "NlsData0049.dll": [
    "LangDataCall"
  ],
  "NlsData004a.dll": [
    "LangDataCall"
  ],
  "NlsData004b.dll": [
    "LangDataCall"
  ],
  "NlsData004c.dll": [
    "LangDataCall"
  ],
  "NlsData004e.dll": [
    "LangDataCall"
  ],
  "NlsData0414.dll": [
    "LangDataCall"
  ],
  "NlsData0416.dll": [
    "LangDataCall"
  ],
  "NlsData0816.dll": [
    "LangDataCall"
  ],
  "NlsData081a.dll": [
    "LangDataCall"
  ],
  "NlsData0c1a.dll": [
    "LangDataCall"
  ],
  "NlsLexicons0001.dll": "No exports",
  "NlsLexicons0002.dll": "No exports",
  "NlsLexicons0003.dll": "No exports",
  "NlsLexicons0007.dll": "No exports",
  "NlsLexicons0009.dll": "No exports",
  "NlsLexicons000a.dll": "No exports",
  "NlsLexicons000c.dll": "No exports",
  "NlsLexicons000d.dll": "No exports",
  "NlsLexicons000f.dll": "No exports",
  "NlsLexicons0010.dll": "No exports",
  "NlsLexicons0011.dll": "No exports",
  "NlsLexicons0013.dll": "No exports",
  "NlsLexicons0018.dll": "No exports",
  "NlsLexicons0019.dll": "No exports",
  "NlsLexicons001a.dll": "No exports",
  "NlsLexicons001b.dll": "No exports",
  "NlsLexicons001d.dll": "No exports",
  "NlsLexicons0020.dll": "No exports",
  "NlsLexicons0021.dll": "No exports",
  "NlsLexicons0022.dll": "No exports",
  "NlsLexicons0024.dll": "No exports",
  "NlsLexicons0026.dll": "No exports",
  "NlsLexicons0027.dll": "No exports",
  "NlsLexicons002a.dll": "No exports",
  "NlsLexicons0039.dll": "No exports",
  "NlsLexicons003e.dll": "No exports",
  "NlsLexicons0045.dll": "No exports",
  "NlsLexicons0046.dll": "No exports",
  "NlsLexicons0047.dll": "No exports",
  "NlsLexicons0049.dll": "No exports",
  "NlsLexicons004a.dll": "No exports",
  "NlsLexicons004b.dll": "No exports",
  "NlsLexicons004c.dll": "No exports",
  "NlsLexicons004e.dll": "No exports",
  "NlsLexicons0414.dll": "No exports",
  "NlsLexicons0416.dll": "No exports",
  "NlsLexicons0816.dll": "No exports",
  "NlsLexicons081a.dll": "No exports",
  "NlsLexicons0c1a.dll": "No exports",
  "NlsModels0011.dll": "No exports",
  "Nlsdl.dll": [
    "DownlevelLCIDToLocaleName",
    "DownlevelLocaleNameToLCID",
    "DownlevelGetParentLocaleLCID",
    "DownlevelGetParentLocaleName"
  ],
  "napdsnap.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "napipsec.dll": [
    "UninitializeNapIpsecRp",
    "InitializeNapIpsecRp"
  ],
  "nci.dll": [
    "NciSetConnectionName",
    "NciDeviceInstall",
    "OnMachineUILanguageInit",
    "UpdateAdvancedParameter",
    "OnMachineUILanguageSwitch",
    "NciGetConnectionName"
  ],
  "ncobjapi.dll": [
    "WmiCreateObjectWithProps",
    "WmiDestroyObject",
    "WmiEventSourceDisconnect",
    "WmiAddObjectProp",
    "WmiCommitObject",
    "WmiCreateObjectWithFormat",
    "WmiCreateObject",
    "WmiSetAndCommitObject",
    "WmiIsObjectActive",
    "WmiEventSourceConnect"
  ],
  "ncrypt.dll": [
    "BCryptEnumContexts",
    "BCryptGetProperty",
    "SslSignHash",
    "NCryptVerifySignature",
    "BCryptDestroyKey",
    "SslCreateHandshakeHash",
    "NCryptEnumAlgorithms",
    "BCryptEnumAlgorithms",
    "BCryptDuplicateHash",
    "GetSChannelInterface",
    "SslGenerateMasterKey",
    "SslCreateEphemeralKey",
    "NCryptEncrypt",
    "BCryptRemoveContextFunction",
    "BCryptDeriveKey",
    "BCryptDestroySecret",
    "BCryptSignHash",
    "BCryptUnregisterProvider",
    "NCryptIsAlgSupported",
    "SslEncryptPacket",
    "SslComputeClientAuthHash",
    "SslLookupCipherLengths",
    "BCryptDeleteContext",
    "SslFreeBuffer",
    "BCryptGenerateSymmetricKey",
    "NCryptExportKey",
    "BCryptHashData",
    "BCryptConfigureContextFunction",
    "BCryptGenRandom",
    "SslCreateClientAuthHash",
    "NCryptSignHash",
    "SslComputeEapKeyBlock",
    "BCryptDecrypt",
    "BCryptConfigureContext",
    "NCryptTranslateHandle",
    "NCryptImportKey",
    "BCryptSetAuditingInterface",
    "NCryptGetProperty",
    "SslGetKeyProperty",
    "BCryptSetContextFunctionProperty",
    "SslChangeNotify",
    "SslVerifySignature",
    "NCryptDeleteKey",
    "SslFreeObject",
    "BCryptEnumContextFunctionProviders",
    "BCryptResolveProviders",
    "BCryptUnregisterConfigChangeNotify",
    "SslExportKey",
    "NCryptSetAuditingInterface",
    "NCryptIsKeyHandle",
    "BCryptFinalizeKeyPair",
    "SslComputeFinishedHash",
    "SslOpenPrivateKey",
    "BCryptSetProperty",
    "NCryptEnumKeys",
    "BCryptDeriveKeyPBKDF2",
    "BCryptEnumProviders",
    "SslEnumCipherSuites",
    "SslGenerateSessionKeys",
    "NCryptOpenStorageProvider",
    "BCryptEnumRegisteredProviders",
    "BCryptSecretAgreement",
    "BCryptVerifySignature",
    "BCryptRegisterConfigChangeNotify",
    "BCryptAddContextFunctionProvider",
    "BCryptImportKeyPair",
    "SslImportKey",
    "NCryptFreeObject",
    "BCryptCloseAlgorithmProvider",
    "NCryptSetProperty",
    "SslImportMasterKey",
    "SslIncrementProviderReferenceCount",
    "BCryptQueryContextFunctionConfiguration",
    "SslDecrementProviderReferenceCount",
    "BCryptEnumContextFunctions",
    "BCryptFinishHash",
    "BCryptOpenAlgorithmProvider",
    "BCryptCreateHash",
    "SslEnumProtocolProviders",
    "NCryptDeriveKey",
    "BCryptQueryProviderRegistration",
    "NCryptSecretAgreement",
    "SslHashHandshake",
    "BCryptGetFipsAlgorithmMode",
    "SslOpenProvider",
    "BCryptGenerateKeyPair",
    "BCryptEncrypt",
    "BCryptRemoveContextFunctionProvider",
    "GetIsolationServerInterface",
    "BCryptExportKey",
    "SslGetProviderProperty",
    "BCryptRegisterProvider",
    "BCryptFreeBuffer",
    "NCryptEnumStorageProviders",
    "BCryptDuplicateKey",
    "NCryptNotifyChangeKey",
    "GetKeyStorageInterface",
    "NCryptFinalizeKey",
    "NCryptFreeBuffer",
    "SslDecryptPacket",
    "BCryptAddContextFunction",
    "BCryptDeriveKeyCapi",
    "BCryptDestroyHash",
    "SslLookupCipherSuiteInfo",
    "NCryptDecrypt",
    "NCryptCreatePersistedKey",
    "BCryptQueryContextConfiguration",
    "NCryptOpenKey",
    "BCryptImportKey",
    "BCryptCreateContext",
    "BCryptQueryContextFunctionProperty",
    "SslGetCipherSuitePRFHashAlgorithm"
  ],
  "ncryptui.dll": [
    "NCryptExternalPromptUser"
  ],
  "ncsi.dll": [
    "NcsiUpdateClientPresence",
    "NcsiFreeConnectivityStatusSet",
    "NcsiNotifySessionChange",
    "NcsiAllocateAndGetConnectivityStatusSet",
    "NcsiDeregisterConnectivityStatusChange",
    "NcsiPerformRefresh",
    "NcsiIdentifyUserSpecificProxies",
    "NcsiRegisterConnectivityStatusChange"
  ],
  "nddeapi.dll": [
    "NDdeIsValidAppTopicListW",
    "NDdeGetShareSecurityA",
    "NDdeShareAddA",
    "NDdeIsValidShareNameW",
    "NDdeSetShareSecurityA",
    "NDdeGetTrustedShareA",
    "NDdeShareDelW",
    "NDdeShareGetInfoW",
    "NDdeShareSetInfoA",
    "NDdeSpecialCommandW",
    "NDdeShareAddW",
    "NDdeIsValidAppTopicListA",
    "NDdeSetShareSecurityW",
    "NDdeGetErrorStringW",
    "NDdeShareSetInfoW",
    "NDdeSetTrustedShareA",
    "NDdeShareGetInfoA",
    "NDdeShareDelA",
    "NDdeTrustedShareEnumA",
    "NDdeSpecialCommandA",
    "NDdeIsValidShareNameA",
    "NDdeGetErrorStringA",
    "NDdeShareEnumW",
    "NDdeGetTrustedShareW",
    "NDdeGetShareSecurityW",
    "NDdeSetTrustedShareW",
    "NDdeShareEnumA",
    "NDdeTrustedShareEnumW"
  ],
  "ndfapi.dll": [
    "NdfCreatePnrpIncident",
    "NdfCreateIncident",
    "NdfRunDllDiagnoseWithAnswerFile",
    "NdfCreateInboundIncident",
    "DllRegisterServer",
    "NdfCreateWebIncidentEx",
    "DllUnregisterServer",
    "NdfRepairIncident",
    "NdfCloseIncident",
    "NdfCreateDNSIncident",
    "NdfRunDllDuplicateIPDefendingSystem",
    "NdfRunDllDiagnoseIncident",
    "NdfCancelIncident",
    "NdfRunDllDiagnoseNetConnectionIncident",
    "NdfRunDllHelpTopic",
    "NdfExecuteDiagnosis",
    "NdfCreateGroupingIncident",
    "NdfCreateSharingIncident",
    "NdfCreateWebIncident",
    "NdfCreateConnectivityIncident",
    "DllCanUnloadNow",
    "NdfCreateWinSockIncident",
    "NdfDiagnoseIncident",
    "DllGetClassObject",
    "NdfRunDllDuplicateIPOffendingSystem",
    "NdfGetTraceFile"
  ],
  "ndfetw.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "ndfhcdiscovery.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "ndiscapCfg.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "ndishc.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "ndproxystub.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "negoexts.dll": [
    "SpUserModeInitialize",
    "SpLsaModeInitialize"
  ],
  "netapi32.dll": [
    "I_NetServerPasswordSet",
    "NetServerTransportDel",
    "NetAccessSetInfo",
    "NetUserGetLocalGroups",
    "NetpIsRemote",
    "NetReplExportDirAdd",
    "NetDfsGetDcAddress",
    "I_NetServerSetServiceBits",
    "I_NetServerReqChallenge",
    "NetDfsAdd",
    "NetBrowserStatisticsGet",
    "NetGetDCName",
    "NlBindingRemoveServerFromCache",
    "NetpGetConfigBool",
    "NetpwPathType",
    "NetServerComputerNameDel",
    "NetSessionDel",
    "NetLocalGroupAddMembers",
    "RxNetServerEnum",
    "NetConfigSet",
    "NetUnjoinDomain",
    "I_BrowserResetNetlogonState",
    "NetReplGetInfo",
    "NetUseEnum",
    "NetUseGetInfo",
    "NetDfsRemoveFtRoot",
    "NetServiceInstall",
    "DsGetDcNameWithAccountA",
    "I_NetAccountDeltas",
    "I_NetServerGetTrustInfo",
    "NetServerAliasAdd",
    "NetpNetBiosStatusToApiStatus",
    "NetGroupGetInfo",
    "NetUserDel",
    "I_NetLogonSendToSam",
    "NetGroupDel",
    "DsAddressToSiteNamesExW",
    "NetGetJoinInformation",
    "I_BrowserDebugTrace",
    "NetApiBufferSize",
    "NlBindingAddServerToCache",
    "NetApiBufferAllocate",
    "NetRemoteTOD",
    "DsRoleAbortDownlevelServerUpgrade",
    "NetReplImportDirGetInfo",
    "NetShareDelEx",
    "NetLogonGetTimeServiceParentDomain",
    "I_BrowserQueryOtherDomains",
    "NetErrorLogClear",
    "NetAddServiceAccount",
    "NetValidatePasswordPolicyFree",
    "DsGetDcOpenA",
    "DsRoleDcAsReplica",
    "NetpOpenConfigData",
    "NetServerAliasEnum",
    "NetLocalGroupAddMember",
    "NetMessageNameEnum",
    "NetUserGetGroups",
    "NetLocalGroupAdd",
    "NetGetDisplayInformationIndex",
    "NetReplExportDirLock",
    "I_NetDatabaseSync2",
    "NetAccessDel",
    "I_NetlogonComputeServerDigest",
    "DsRoleGetDatabaseFacts",
    "I_NetServerAuthenticate",
    "NetRemoveAlternateComputerName",
    "DavGetExtendedError",
    "NetReplImportDirUnlock",
    "NetpSetFileSecurity",
    "I_NetLogonControl",
    "NetEnumerateTrustedDomains",
    "NetAuditRead",
    "NetConfigGet",
    "I_BrowserQueryStatistics",
    "NetLocalGroupSetInfo",
    "NetErrorLogWrite",
    "RxRemoteApi",
    "NetDfsSetStdContainerSecurity",
    "I_NetDatabaseDeltas",
    "NetUserGetInfo",
    "DsGetDcCloseW",
    "NetpHexDump",
    "Netbios",
    "NetScheduleJobGetInfo",
    "NetQueryServiceAccount",
    "NetShareEnumSticky",
    "NetpGetFileSecurity",
    "I_NetLogonSamLogonEx",
    "I_NetServerTrustPasswordsGet",
    "DsAddressToSiteNamesExA",
    "DsAddressToSiteNamesA",
    "NetJoinDomain",
    "NetServerTransportAddEx",
    "NetUseDel",
    "DsGetDcSiteCoverageA",
    "NetDfsSetSecurity",
    "NetpInitFtinfoContext",
    "NetpCopyFtinfoContext",
    "NetFileGetInfo",
    "NetUserSetGroups",
    "NetScheduleJobAdd",
    "DsValidateSubnetNameA",
    "NetShareDelSticky",
    "I_BrowserQueryEmulatedDomains",
    "NetLocalGroupSetMembers",
    "NetpMergeFtinfo",
    "NetReplImportDirDel",
    "NetWkstaTransportDel",
    "DsRoleFreeMemory",
    "NetAddAlternateComputerName",
    "NetDfsManagerInitialize",
    "NetDfsManagerSendSiteInfo",
    "NetpAllocFtinfoEntry",
    "I_NetDatabaseRedo",
    "NetDfsMove",
    "RxNetAccessGetInfo",
    "NetApiBufferReallocate",
    "NetReplExportDirUnlock",
    "RxNetUserPasswordSet",
    "DsGetDcNextW",
    "NetUserAdd",
    "NetDfsAddStdRootForced",
    "NetMessageNameDel",
    "NetpAssertFailed",
    "NetpwPathCompare",
    "NetReplExportDirDel",
    "NetRenameMachineInDomain",
    "NetDfsGetSecurity",
    "NetDfsRemoveStdRoot",
    "DsGetSiteNameW",
    "NetWkstaTransportAdd",
    "NetServerComputerNameAdd",
    "NetpAddTlnFtinfoEntry",
    "DsRoleDemoteDc",
    "NetUserModalsGet",
    "I_NetLogonUasLogoff",
    "DsRoleDnsNameToFlatName",
    "NetAccessAdd",
    "NetDfsAddStdRoot",
    "NetDfsAddFtRoot",
    "NetGroupGetUsers",
    "NetUseAdd",
    "NetScheduleJobDel",
    "NetpwNameCanonicalize",
    "NetAccessGetUserPerms",
    "I_NetLogonUasLogon",
    "NetAlertRaiseEx",
    "NetValidatePasswordPolicy",
    "NetDfsAddRootTarget",
    "DsGetDcOpenW",
    "NetDfsGetStdContainerSecurity",
    "NetLocalGroupDel",
    "NetServerTransportAdd",
    "I_NetGetForestTrustInformation",
    "NetWkstaSetInfo",
    "NetServerDiskEnum",
    "NetpGetConfigTStrArray",
    "NetConfigGetAll",
    "NetShareAdd",
    "NetGetJoinableOUs",
    "DsMergeForestTrustInformationW",
    "NetConnectionEnum",
    "NetMessageNameAdd",
    "NetReplImportDirLock",
    "NetDfsSetInfo",
    "I_BrowserResetStatistics",
    "DavGetUNCFromHTTPPath",
    "NetRegisterDomainNameChangeNotification",
    "NetLocalGroupDelMembers",
    "NetGroupSetInfo",
    "NetDfsGetClientInfo",
    "RxNetAccessAdd",
    "NetUserChangePassword",
    "NetUserSetInfo",
    "I_NetDfsIsThisADomainName",
    "NetpCleanFtinfoContext",
    "DsDeregisterDnsHostRecordsA",
    "NetReplImportDirAdd",
    "NetWkstaTransportEnum",
    "NetFileEnum",
    "NetShareCheck",
    "NetGroupDelUser",
    "DavDeleteConnection",
    "DsRoleUpgradeDownlevelServer",
    "NetGroupEnum",
    "NetpGetConfigValue",
    "NlBindingSetAuthInfo",
    "NetAuditWrite",
    "I_NetServerPasswordGet",
    "I_NetGetDCList",
    "I_NetServerAuthenticate2",
    "NetLocalGroupGetMembers",
    "DsRoleCancel",
    "NetQueryDisplayInformation",
    "NetAuditClear",
    "DavFlushFile",
    "I_BrowserSetNetlogonState",
    "NetReplImportDirEnum",
    "NetpDbgPrint",
    "DsGetForestTrustInformationW",
    "NetGroupSetUsers",
    "NetapipBufferAllocate",
    "NetServerEnumEx",
    "I_NetlogonComputeClientDigest",
    "DsAddressToSiteNamesW",
    "NetEnumerateServiceAccounts",
    "I_NetChainSetClientAttributes",
    "NetServerSetInfo",
    "RxNetAccessSetInfo",
    "NetDfsManagerGetConfigInfo",
    "NetpNetBiosReset",
    "DavAddConnection",
    "NetErrorLogRead",
    "NetServerTransportEnum",
    "NetLogonSetServiceBits",
    "NetAlertRaise",
    "NetServiceControl",
    "DsGetDcNextA",
    "NetApiBufferFree",
    "RxNetAccessEnum",
    "NetDfsRemoveRootTarget",
    "DsGetDcNameWithAccountW",
    "I_NetServerAuthenticate3",
    "NetDfsEnum",
    "NetValidateName",
    "NetDfsGetSupportedNamespaceVersion",
    "DsEnumerateDomainTrustsA",
    "NetServiceEnum",
    "NetpGetConfigDword",
    "RxNetAccessGetUserPerms",
    "NetDfsSetFtContainerSecurity",
    "NetDfsSetClientInfo",
    "DsGetSiteNameA",
    "NetReplExportDirSetInfo",
    "NetDfsRemove",
    "NetLocalGroupEnum",
    "DsRoleDcAsDc",
    "I_NetDatabaseSync",
    "I_NetLogonSamLogoff",
    "NetUnregisterDomainNameChangeNotification",
    "NetSessionEnum",
    "NetpIsUncComputerNameValid",
    "NetGroupAdd",
    "NetpwNameValidate",
    "DsRoleGetPrimaryDomainInformation",
    "NetReplExportDirGetInfo",
    "NetWkstaUserSetInfo",
    "I_NetServerPasswordSet2",
    "NetReplSetInfo",
    "NetShareGetInfo",
    "I_BrowserDebugCall",
    "DavGetHTTPFromUNCPath",
    "NetRequestOfflineDomainJoin",
    "NetUserModalsSet",
    "DsDeregisterDnsHostRecordsW",
    "I_BrowserServerEnum",
    "I_NetLogonSamLogon",
    "NetScheduleJobEnum",
    "NetShareEnum",
    "NetServiceGetInfo",
    "DsGetDcSiteCoverageW",
    "NetGetAnyDCName",
    "NetSessionGetInfo",
    "NetIsServiceAccount",
    "NetShareSetInfo",
    "NetRemoveServiceAccount",
    "DsGetDcNameW",
    "I_NetLogonControl2",
    "DsValidateSubnetNameW",
    "NetRemoteComputerSupports",
    "I_NetAccountSync",
    "NetLocalGroupDelMember",
    "NetUserEnum",
    "NetLocalGroupGetInfo",
    "DsRoleGetDcOperationProgress",
    "NetServerGetInfo",
    "NetReplExportDirEnum",
    "DsRoleGetDcOperationResults",
    "NetProvisionComputerAccount",
    "NetDfsRemoveFtRootForced",
    "DsRoleServerSaveStateForUpgrade",
    "RxNetAccessDel",
    "I_NetLogonSamLogonWithFlags",
    "NetSetPrimaryComputerName",
    "I_DsUpdateReadOnlyServerDnsRecords",
    "NetGroupAddUser",
    "NetpwPathCanonicalize",
    "NetShareDel",
    "NetMessageNameGetInfo",
    "NetServerAliasDel",
    "DsRoleIfmHandleFree",
    "I_NetChainSetClientAttributes2",
    "I_NetServerSetServiceBitsEx",
    "NetStatisticsGet",
    "I_NetLogonGetDomainInfo",
    "I_NetDfsGetVersion",
    "NetWkstaUserEnum",
    "NetAccessEnum",
    "NetDfsRename",
    "NetServerEnum",
    "NetFileClose",
    "NetpCloseConfigData",
    "DsGetDcNameA",
    "NetMessageBufferSend",
    "NetEnumerateComputerNames",
    "NetDfsGetInfo",
    "NetWkstaUserGetInfo",
    "NetWkstaGetInfo",
    "DsEnumerateDomainTrustsW",
    "NetpwNameCompare",
    "NetDfsGetFtContainerSecurity",
    "NetAccessGetInfo"
  ],
  "netbios.dll": [
    "Netbios"
  ],
  "netcenter.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "netcfgx.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "HrDiAddComponentToINetCfg",
    "LanaCfgFromCommandArgs",
    "NetCfgDiagFromCommandArgs",
    "DllGetClassObject",
    "NetCfgDiagRepairRegistryBindings",
    "NetClassInstaller",
    "DllRegisterServer",
    "NetPropPageProvider"
  ],
  "netcorehc.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "netdiagfx.dll": [
    "HelperTraceEvent",
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "netevent.dll": "No exports",
  "netfxperf.dll": [
    "OpenPerformanceData",
    "CollectPerformanceData",
    "ClosePerformanceData"
  ],
  "neth.dll": "No exports",
  "netid.dll": [
    "ShowDcNotFoundErrorDialog",
    "CreateNetIDPropertyPage"
  ],
  "netiohlp.dll": [
    "InitHelperDll"
  ],
  "netjoin.dll": [
    "NetpSeparateUserAndDomain",
    "NetpManageMachineAccountWithSid",
    "NetpValidateName",
    "NetpControlServices",
    "NetpStopService",
    "NetpUpgradePreNT5JoinInfo",
    "NetpQueryService",
    "NetpInitAndPickleBlobWin7",
    "NetpCheckOfflineLsaPolicyUpdate",
    "NetpDoDomainJoin",
    "NetpDoInitiateOfflineDomainJoin",
    "NetpCreateComputerObjectInDs",
    "NetpGetListOfJoinableOUs",
    "NetpGetNewMachineName",
    "NetSetuppOpenLog",
    "NetpProvisionComputerAccount",
    "NetProvisionComputerAccount",
    "NetpFreeLdapLsaDomainInfo",
    "NetpEncodeProvisioningBlob",
    "NetpManageIPCConnect",
    "NetpEncodeProvisionData",
    "NetpMachineValidToJoin",
    "NetpStoreInitialDcRecord",
    "NetpDumpDnsDomainInfoToLog",
    "NetpCompleteOfflineDomainJoin",
    "NetpDecodeProvisioningBlob",
    "NetpDumpDcInfoToLog",
    "NetpAvoidNetlogonSpnSet",
    "NetpGetJoinInformation",
    "NetSetuppCloseLog",
    "NetpIsSetupInProgress",
    "NetpLogPrintHelper",
    "NetpCrackNamesStatus2Win32Error",
    "NetpChangeMachineName",
    "NetpSetComputerAccountPassword",
    "NetpGetMachineAccountName",
    "NetpUnpickleBlobWin7",
    "NetpUnJoinDomain",
    "NetpGetLsaPrimaryDomain",
    "NetpFreeODJBlob",
    "NetpDumpBlobToLog",
    "NetpDomainJoinLicensingCheck",
    "NetpDecodeProvisioningData",
    "NetRequestOfflineDomainJoin",
    "NetpGetLogIndentPrefixString"
  ],
  "netlogon.dll": [
    "I_NetNotifyNetlogonDllHandle",
    "I_NetNotifyTrustedDomain",
    "I_NetNotifyRole",
    "I_NetLogonMixedDomain",
    "I_NetLogonCloseChangeLog",
    "I_NetLogonAddressToSiteName",
    "I_NetLogonLdapLookupEx",
    "NlNetlogonMain",
    "I_NetLogonNewChangeLog",
    "I_NetLogonAppendChangeLog",
    "I_NetLogonReadChangeLog",
    "I_NetLogonFree",
    "NetILogonSamLogon",
    "I_NetNotifyDsChange",
    "I_NetLogonSetServiceBits",
    "DsrGetDcNameEx2",
    "I_NetLogonGetAuthDataEx",
    "I_NetLogonGetSerialNumber",
    "I_NetNotifyNtdsDsaDeletion",
    "InitSecurityInterfaceW",
    "I_NetNotifyDelta",
    "I_NetLogonSendToSamOnDc",
    "I_NetNotifyMachineAccount"
  ],
  "netman.dll": [
    "HrPnpInstanceIdFromGuid",
    "DllUnregisterServer",
    "HrQueryLanMediaState",
    "ProcessQueue",
    "HrLanConnectionNameFromGuidOrPath",
    "SvchostPushServiceGlobals",
    "NetManDiagFromCommandArgs",
    "DllRegisterServer",
    "HrGetPnpDeviceStatus",
    "ServiceMain"
  ],
  "netmsg.dll": "No exports",
  "netplwiz.dll": [
    "DllCanUnloadNow",
    "SHDisconnectNetDrives",
    "NetAccessWizard",
    "DllGetClassObject",
    "ClearAutoLogon",
    "UsersRunDllW",
    "NetPlacesWizardDoModal"
  ],
  "netprof.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "netprofm.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "SvchostPushServiceGlobals",
    "DllGetClassObject",
    "DllRegisterServer",
    "ServiceMain"
  ],
  "netshell.dll": [
    "NcFreeNetconProperties",
    "HrCreateDesktopIcon",
    "DllUnregisterServer",
    "HrGetIconFromMediaType",
    "DllCanUnloadNow",
    "HrGetIconFromMediaTypeEx",
    "HrRenameConnection",
    "NcIsValidConnectionName",
    "DllGetClassObject",
    "HrLaunchConnectionEx",
    "DllRegisterServer",
    "StartNCW",
    "HrLaunchConnection"
  ],
  "nettrace.dll": [
    "InitHelperDll"
  ],
  "netutils.dll": [
    "NetpIsUserNameValid",
    "NetApiBufferAllocate",
    "NetpwListCanonicalize",
    "NetpwNameCanonicalize",
    "NetpIsComputerNameValid",
    "NetpIsRemote",
    "NetpIsGroupNameValid",
    "NetpIsUncComputerNameValid",
    "NetpwNameValidate",
    "NetApiBufferFree",
    "NetpIsShareNameValid",
    "NetapipBufferAllocate",
    "NetApiBufferReallocate",
    "NetpIsRemoteNameValid",
    "NetpwPathCanonicalize",
    "NetRemoteComputerSupports",
    "NetpIsDomainNameValid",
    "NetpwPathCompare",
    "NetpwPathType",
    "NetpwNameCompare",
    "NetApiBufferSize",
    "NetpwListTraverse"
  ],
  "networkexplorer.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "networkitemfactory.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "networkmap.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "newdev.dll": [
    "DeviceInternetSettingUiW",
    "InstallSelectedDriver",
    "DiRollbackDriver",
    "DiInstallDriverA",
    "DiShowUpdateDevice",
    "pDiDoDeviceInstallAsAdmin",
    "pDiDeviceInstallActionW",
    "DiInstallDevice",
    "DiInstallDriverW",
    "UpdateDriverForPlugAndPlayDevicesW",
    "pDiDoFinishInstallAsAdmin",
    "UpdateDriverForPlugAndPlayDevicesA",
    "pDiDeviceInstallNotificationW",
    "SetInternetPolicies",
    "pDiDoNullDriverInstall",
    "DiUninstallDevice",
    "InstallWindowsUpdateDriver",
    "InstallNewDevice"
  ],
  "nlaapi.dll": [
    "NlaRegisterQuery",
    "NlaRefreshQuery",
    "NlaQueryNetData",
    "NlaOpenQuery",
    "NlaCreatePluginRequests",
    "NlaDeleteTypeSet",
    "NlaDecomposeNetSignature",
    "NlaDeleteDataSet",
    "NlaGetInternetCapability",
    "NSPStartup",
    "NlaQueryNetDataEx",
    "NlaGetIntranetCapability",
    "NlaAddToTypeSet",
    "NlaQueryNetSignatures",
    "NlaCloseQuery",
    "NlaEqualNetSignatures",
    "NlaAddToPluginRequests",
    "NlaDeleteFilter",
    "NlaAnd",
    "NlaComposeNetSignature",
    "NlaDeletePluginRequests",
    "NlaOr",
    "NlaCreateFilter",
    "NlaCreateTypeSet",
    "NlaEqual",
    "NlaNotEqual"
  ],
  "nlahc.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "nlasvc.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "nlhtml.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "nlmgp.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "nlmsprep.dll": [
    "NetworkListManager_Generalize"
  ],
  "nlsbres.dll": "No exports",
  "normaliz.dll": [
    "IdnToAscii",
    "NormalizeString",
    "IsNormalizedString",
    "IdnToNameprepUnicode",
    "IdnToUnicode"
  ],
  "npmproxy.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "nrpsrv.dll": [
    "NrpStopRpcServer",
    "NrpStartRpcServer"
  ],
  "nshhttp.dll": [
    "InitHelperDll"
  ],
  "nshipsec.dll": [
    "InitHelperDll"
  ],
  "nshwfp.dll": [
    "IdpConfigAddPolicy",
    "IdpConfigRemovePolicy",
    "IdpConfigAllocateAndGetPolicy",
    "IdpConfigInitDefaultPolicy",
    "InitHelperDll",
    "IdpConfigFreePolicy",
    "WfpCaptureExportedW"
  ],
  "nsi.dll": [
    "NsiRegisterChangeNotification",
    "NsiEnumerateObjectsAllPersistentParametersWithMask",
    "NsiAllocateAndGetTable",
    "NsiRegisterChangeNotificationEx",
    "NsiSetAllParametersEx",
    "NsiSetAllPersistentParametersWithMask",
    "NsiAllocateAndGetPersistentDataWithMaskTable",
    "NsiCancelChangeNotification",
    "NsiGetParameter",
    "NsiEnumerateObjectsAllParametersEx",
    "NsiSetAllParameters",
    "NsiFreeTable",
    "NsiFreePersistentDataWithMaskTable",
    "NsiDeregisterChangeNotificationEx",
    "NsiGetAllParametersEx",
    "NsiGetParameterEx",
    "NsiGetAllParameters",
    "NsiDeregisterChangeNotification",
    "NsiSetParameterEx",
    "NsiGetObjectSecurity",
    "NsiGetAllPersistentParametersWithMask",
    "NsiRequestChangeNotification",
    "NsiRequestChangeNotificationEx",
    "NsiSetParameter",
    "NsiEnumerateObjectsAllParameters",
    "NsiSetObjectSecurity"
  ],
  "nsisvc.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "ntdll.dll": [
    "ZwOpenKey",
    "NtUnlockFile",
    "_vsnprintf_s",
    "RtlUpperChar",
    "NtWriteVirtualMemory",
    "ZwMapUserPhysicalPagesScatter",
    "LdrSetDllManifestProber",
    "WinSqmCommonDatapointSetDWORD",
    "RtlFindClosestEncodableLength",
    "RtlGetThreadErrorMode",
    "LdrAccessResource",
    "RtlSetProcessPreferredUILanguages",
    "RtlUlonglongByteSwap",
    "ZwOpenThreadToken",
    "DbgUserBreakPoint",
    "NtSetDefaultHardErrorPort",
    "EtwEventWrite",
    "ZwOpenThreadTokenEx",
    "NtOpenFile",
    "ZwPrivilegeObjectAuditAlarm",
    "RtlEraseUnicodeString",
    "RtlIpv6AddressToStringA",
    "NtDeleteKey",
    "ZwQueryInformationProcess",
    "RtlMultiByteToUnicodeN",
    "RtlpConvertLCIDsToCultureNames",
    "ZwSetTimer",
    "wcscpy",
    "AlpcGetCompletionListLastMessageInformation",
    "RtlCmDecodeMemIoResource",
    "ZwCreateResourceManager",
    "NtSetLowWaitHighEventPair",
    "RtlRegisterWait",
    "RtlQueryInformationActiveActivationContext",
    "isgraph",
    "_splitpath",
    "RtlCopyString",
    "ZwCreateDirectoryObject",
    "ZwDeleteValueKey",
    "RtlAbortRXact",
    "RtlDosSearchPath_Ustr",
    "ZwQueryInformationThread",
    "NtFlushVirtualMemory",
    "NtFlushInstallUILanguage",
    "DbgPrompt",
    "NtMapUserPhysicalPagesScatter",
    "ZwAreMappedFilesTheSame",
    "ZwPrePrepareComplete",
    "RtlWriteMemoryStream",
    "ShipAssertGetBufferInfo",
    "LdrQueryImageFileExecutionOptionsEx",
    "ZwSetInformationObject",
    "RtlDestroyHeap",
    "RtlpCleanupRegistryKeys",
    "NtDeleteFile",
    "ZwCreateUserProcess",
    "swprintf",
    "RtlZombifyActivationContext",
    "NtDeleteAtom",
    "NtQueryKey",
    "RtlEnlargedUnsignedDivide",
    "RtlpGetNameFromLangInfoNode",
    "RtlWow64EnableFsRedirection",
    "_ui64toa",
    "RtlCopySidAndAttributesArray",
    "ZwSaveMergedKeys",
    "RtlSubtreeSuccessor",
    "RtlDestroyMemoryBlockLookaside",
    "RtlIsCurrentThreadAttachExempt",
    "RtlGetCriticalSectionRecursionCount",
    "ZwOpenKeyEx",
    "_vswprintf",
    "RtlDeleteTimer",
    "RtlFillMemoryUlonglong",
    "NtCommitEnlistment",
    "RtlFindMostSignificantBit",
    "ExpInterlockedPopEntrySListEnd",
    "ZwSuspendThread",
    "ZwTraceControl",
    "ZwQuerySystemEnvironmentValueEx",
    "NtQueryInformationJobObject",
    "DbgUiRemoteBreakin",
    "RtlDebugPrintTimes",
    "RtlClearBits",
    "NtAssignProcessToJobObject",
    "LdrInitializeThunk",
    "MD4Final",
    "RtlIpv4StringToAddressExA",
    "NtGetTickCount",
    "VerSetConditionMask",
    "TpSimpleTryPost",
    "_wsplitpath_s",
    "NtFlushBuffersFile",
    "EtwSetMark",
    "RtlFlushSecureMemoryCache",
    "ZwContinue",
    "RtlDeleteBarrier",
    "RtlClearAllBits",
    "RtlEncodeSystemPointer",
    "NtCreateProcess",
    "ZwAllocateReserveObject",
    "RtlInitializeAtomPackage",
    "NtPrivilegeCheck",
    "DbgUiStopDebugging",
    "ZwReplyWaitReceivePort",
    "ZwMapUserPhysicalPages",
    "iswctype",
    "ZwDeviceIoControlFile",
    "WerReportSQMEvent",
    "ZwIsProcessInJob",
    "LdrEnumerateLoadedModules",
    "RtlAcquireResourceExclusive",
    "ZwDeleteDriverEntry",
    "ZwUnmapViewOfSection",
    "NtTerminateJobObject",
    "ZwTestAlert",
    "RtlIsDosDeviceName_U",
    "ShipAssert",
    "ZwFlushInstallUILanguage",
    "ZwOpenProcessTokenEx",
    "NtDuplicateObject",
    "RtlSetCurrentDirectory_U",
    "TpAllocWork",
    "ZwSetInformationKey",
    "RtlIsThreadWithinLoaderCallout",
    "ZwQueryMultipleValueKey",
    "_alldiv",
    "RtlLockMemoryBlockLookaside",
    "ZwCompareTokens",
    "SbExecuteProcedure",
    "ZwAddAtom",
    "_ltoa_s",
    "RtlEqualComputerName",
    "NtReplyWaitReceivePort",
    "ZwShutdownSystem",
    "NtSetIntervalProfile",
    "ShipAssertMsgW",
    "RtlStatMemoryStream",
    "NtMapUserPhysicalPages",
    "ZwCreateWaitablePort",
    "NtAlpcCreatePort",
    "RtlNumberOfClearBits",
    "RtlTraceDatabaseDestroy",
    "ZwPrivilegedServiceAuditAlarm",
    "NtFsControlFile",
    "TpCallbackIndependent",
    "WinSqmAddToStream",
    "NtAllocateUserPhysicalPages",
    "atoi",
    "RtlEnumerateEntryHashTable",
    "wcspbrk",
    "AlpcGetMessageAttribute",
    "RtlWalkFrameChain",
    "RtlSetSaclSecurityDescriptor",
    "NtOpenProcessToken",
    "RtlDowncaseUnicodeChar",
    "ZwAcceptConnectPort",
    "NtPowerInformation",
    "NtQueryOpenSubKeys",
    "RtlSetThreadErrorMode",
    "NtGetPlugPlayEvent",
    "RtlGetThreadPreferredUILanguages",
    "RtlIsCriticalSectionLockedByThread",
    "ZwWaitForKeyedEvent",
    "ZwSetInformationTransaction",
    "NtSetValueKey",
    "RtlAreBitsClear",
    "RtlDeleteElementGenericTable",
    "RtlDosPathNameToNtPathName_U_WithStatus",
    "RtlUpcaseUnicodeStringToCountedOemString",
    "memcpy_s",
    "NtApphelpCacheControl",
    "NtQueryVirtualMemory",
    "ZwOpenFile",
    "NtReplyWaitReplyPort",
    "NtSetDefaultLocale",
    "RtlCompactHeap",
    "WinSqmSetDWORD64",
    "TpIsTimerSet",
    "NtQueryBootOptions",
    "WinSqmSetEscalationInfo",
    "RtlGetCurrentDirectory_U",
    "tan",
    "RtlImageRvaToSection",
    "LdrUnloadAlternateResourceModule",
    "RtlGetLengthWithoutLastFullDosOrNtPathElement",
    "RtlReleasePebLock",
    "RtlCreateUnicodeStringFromAsciiz",
    "RtlInsertElementGenericTable",
    "LdrRemoveLoadAsDataTable",
    "ZwPropagationFailed",
    "NtRollbackEnlistment",
    "NtAlpcConnectPort",
    "RtlCustomCPToUnicodeN",
    "RtlProtectHeap",
    "RtlReleaseSRWLockExclusive",
    "NtOpenKey",
    "RtlUnlockMemoryZone",
    "RtlNumberGenericTableElementsAvl",
    "NtOpenResourceManager",
    "ZwModifyBootEntry",
    "ZwFreezeTransactions",
    "RtlIsGenericTableEmptyAvl",
    "_wmakepath_s",
    "RtlInitEnumerationHashTable",
    "ZwCreateFile",
    "NtCompleteConnectPort",
    "ZwAccessCheckByTypeResultList",
    "RtlBarrier",
    "TpCancelAsyncIoOperation",
    "EtwNotificationRegister",
    "NtCreateEnlistment",
    "RtlResetRtlTranslations",
    "RtlGetThreadLangIdByIndex",
    "RtlMultipleFreeHeap",
    "NlsMbCodePageTag",
    "ZwEnumerateTransactionObject",
    "ZwSetDriverEntryOrder",
    "RtlAddAccessAllowedObjectAce",
    "TpAlpcRegisterCompletionList",
    "LdrGetDllHandle",
    "RtlDnsHostNameToComputerName",
    "ZwAlpcDeleteResourceReserve",
    "ZwSetInformationToken",
    "NtCreateThread",
    "_strnicmp",
    "RtlExpandHashTable",
    "NtDebugActiveProcess",
    "ZwCreateEventPair",
    "_i64tow",
    "RtlInitAnsiStringEx",
    "LdrVerifyImageMatchesChecksum",
    "RtlWakeAllConditionVariable",
    "RtlAllocateHandle",
    "RtlImageRvaToVa",
    "EtwTraceMessage",
    "RtlQueryModuleInformation",
    "RtlGetFullPathName_UEx",
    "RtlpCreateProcessRegistryInfo",
    "memcmp",
    "ZwQueryOpenSubKeys",
    "NtRenameTransactionManager",
    "NtPlugPlayControl",
    "RtlConvertUiListToApiList",
    "ZwProtectVirtualMemory",
    "NtQueryInformationFile",
    "NtCreateThreadEx",
    "ZwEnumerateKey",
    "RtlpIsQualifiedLanguage",
    "NtCreateMutant",
    "TpDisablePoolCallbackChecks",
    "ZwPropagationComplete",
    "RtlResetMemoryZone",
    "ExpInterlockedPopEntrySListFault",
    "RtlLCIDToCultureName",
    "NtAlpcSendWaitReceivePort",
    "NtAlpcDeleteResourceReserve",
    "RtlRandomEx",
    "RtlSetDynamicTimeZoneInformation",
    "memcpy",
    "RtlSetLastWin32ErrorAndNtStatusFromNtStatus",
    "ShipAssertMsgA",
    "NtReplyPort",
    "RtlRevertMemoryStream",
    "LdrRegisterDllNotification",
    "ZwFlushInstructionCache",
    "NtReadFileScatter",
    "wcsspn",
    "RtlAddAccessDeniedAce",
    "RtlpMuiRegLoadRegistryInfo",
    "_wcstoui64",
    "NtWaitForSingleObject",
    "ZwIsUILanguageComitted",
    "EtwEventUnregister",
    "RtlAcquireResourceShared",
    "LdrShutdownThread",
    "ZwReleaseKeyedEvent",
    "NtInitializeNlsFiles",
    "NtSetBootEntryOrder",
    "RtlSetAttributesSecurityDescriptor",
    "ZwRecoverTransactionManager",
    "RtlNewSecurityGrantedAccess",
    "RtlAdjustPrivilege",
    "NtDeleteDriverEntry",
    "NtSetSystemInformation",
    "strtol",
    "ZwReleaseSemaphore",
    "RtlIsNameLegalDOS8Dot3",
    "RtlLockModuleSection",
    "ZwLoadKey2",
    "RtlQueryEnvironmentVariable",
    "RtlConvertSidToUnicodeString",
    "NtIsSystemResumeAutomatic",
    "_ultow_s",
    "ZwQueryLicenseValue",
    "__iscsymf",
    "NtQueryInformationTransaction",
    "ZwRequestWaitReplyPort",
    "RtlGetUserPreferredUILanguages",
    "RtlContractHashTable",
    "ZwUmsThreadYield",
    "NtAccessCheckAndAuditAlarm",
    "RtlWerpReportException",
    "RtlUpdateClonedCriticalSection",
    "RtlAddSIDToBoundaryDescriptor",
    "RtlRemoveVectoredContinueHandler",
    "_wcsupr",
    "RtlInitializeResource",
    "WinSqmCheckEscalationSetDWORD64",
    "NtDebugContinue",
    "RtlCommitDebugInfo",
    "wcsstr",
    "NtSetSecurityObject",
    "RtlGetNtVersionNumbers",
    "RtlSendMsgToSm",
    "NtQueryEvent",
    "_stricmp",
    "sprintf",
    "NtQueryTimerResolution",
    "floor",
    "NtCommitComplete",
    "ZwLockProductActivationKeys",
    "RtlEqualLuid",
    "_ui64toa_s",
    "ZwSetInformationResourceManager",
    "ZwFsControlFile",
    "NtQueryInstallUILanguage",
    "_strcmpi",
    "strrchr",
    "RtlPushFrame",
    "RtlGetControlSecurityDescriptor",
    "RtlLargeIntegerArithmeticShift",
    "WinSqmAddToStreamEx",
    "RtlCompressBuffer",
    "ZwAllocateLocallyUniqueId",
    "RtlReleaseMemoryStream",
    "RtlEnumerateGenericTableLikeADirectory",
    "RtlQueryDynamicTimeZoneInformation",
    "NtUmsThreadYield",
    "RtlComputeCrc32",
    "RtlAppendPathElement",
    "RtlInitBarrier",
    "ZwOpenPrivateNamespace",
    "RtlTimeToSecondsSince1980",
    "RtlEthernetStringToAddressW",
    "DbgUiIssueRemoteBreakin",
    "RtlFindLastBackwardRunClear",
    "ZwSetThreadExecutionState",
    "EtwpCreateEtwThread",
    "ZwAdjustGroupsToken",
    "ZwRemoveIoCompletion",
    "LdrResFindResourceDirectory",
    "RtlDeleteAce",
    "NtSetInformationObject",
    "RtlConvertSharedToExclusive",
    "NtAccessCheckByTypeResultListAndAuditAlarmByHandle",
    "RtlCompareString",
    "ZwRestoreKey",
    "RtlTimeToElapsedTimeFields",
    "NtSaveMergedKeys",
    "NlsMbOemCodePageTag",
    "NtFindAtom",
    "RtlAcquirePrivilege",
    "ZwSerializeBoot",
    "EtwTraceMessageVa",
    "TpSetWait",
    "AlpcGetHeaderSize",
    "NtSetInformationEnlistment",
    "ZwPrePrepareEnlistment",
    "EtwEventWriteTransfer",
    "NtCreateTransaction",
    "TpWaitForTimer",
    "ZwWriteFileGather",
    "TpCaptureCaller",
    "RtlpSetInstallLanguage",
    "RtlInitializeSRWLock",
    "LdrFindEntryForAddress",
    "RtlSidDominates",
    "NtNotifyChangeSession",
    "RtlpLoadUserUIByPolicy",
    "ZwQuerySystemEnvironmentValue",
    "ZwDeleteBootEntry",
    "MD4Init",
    "_wtoi64",
    "ZwOpenSemaphore",
    "NtFlushProcessWriteBuffers",
    "RtlLcidToLocaleName",
    "RtlAreAnyAccessesGranted",
    "RtlUpcaseUnicodeStringToOemString",
    "NtAccessCheckByTypeResultList",
    "ZwWaitForDebugEvent",
    "NtFreeUserPhysicalPages",
    "NtLockProductActivationKeys",
    "_wcsnicmp",
    "RtlReleasePrivilege",
    "NtEnumerateTransactionObject",
    "NtGetNlsSectionPtr",
    "RtlDestroyQueryDebugBuffer",
    "RtlIpv4StringToAddressExW",
    "ZwAlpcCreateResourceReserve",
    "RtlFreeUnicodeString",
    "RtlAssert",
    "NtShutdownWorkerFactory",
    "wcscat",
    "NtRecoverTransactionManager",
    "ZwDeleteKey",
    "ZwAlpcDeleteSectionView",
    "RtlReportException",
    "NtCompressKey",
    "RtlRaiseException",
    "NtQuerySystemEnvironmentValueEx",
    "ZwEnumerateBootEntries",
    "ZwQueryFullAttributesFile",
    "RtlDeregisterWaitEx",
    "RtlUniform",
    "RtlSetSecurityObjectEx",
    "ZwSetSystemPowerState",
    "RtlFindClearBitsAndSet",
    "ZwRollforwardTransactionManager",
    "NtCreateKey",
    "WinSqmAddToAverageDWORD",
    "NtUnloadDriver",
    "CsrAllocateCaptureBuffer",
    "LdrShutdownProcess",
    "sprintf_s",
    "RtlNumberOfSetBitsUlongPtr",
    "LdrInitShimEngineDynamic",
    "RtlpNtQueryValueKey",
    "RtlTryAcquireSRWLockExclusive",
    "KiFastSystemCallRet",
    "_aulldiv",
    "RtlDestroyEnvironment",
    "RtlpMuiFreeLangRegistryInfo",
    "ZwQueryPerformanceCounter",
    "RtlFreeUserStack",
    "RtlSetEnvironmentStrings",
    "NtPrivilegeObjectAuditAlarm",
    "ZwStartProfile",
    "RtlEthernetAddressToStringW",
    "EtwReplyNotification",
    "RtlDeactivateActivationContextUnsafeFast",
    "RtlpLoadMachineUIByPolicy",
    "ZwReleaseMutant",
    "NtOpenProcessTokenEx",
    "NtAreMappedFilesTheSame",
    "RtlDeleteHashTable",
    "RtlCreateBoundaryDescriptor",
    "ZwSetVolumeInformationFile",
    "NtQueryDefaultLocale",
    "EtwGetTraceEnableLevel",
    "RtlSetGroupSecurityDescriptor",
    "WinSqmSetDWORD",
    "RtlComputePrivatizedDllName_U",
    "RtlIpv4StringToAddressW",
    "NtPrePrepareComplete",
    "RtlGUIDFromString",
    "NtCreateEventPair",
    "RtlSetThreadIsCritical",
    "NtCurrentTeb",
    "RtlApplyRXact",
    "RtlUnhandledExceptionFilter2",
    "NtAddBootEntry",
    "_swprintf",
    "tolower",
    "ZwListenPort",
    "ZwCloseObjectAuditAlarm",
    "RtlAppendUnicodeStringToString",
    "NtOpenTimer",
    "RtlLocateLegacyContext",
    "iswxdigit",
    "NtOpenProcess",
    "NtReadFile",
    "_alloca_probe",
    "ZwWaitForMultipleObjects",
    "RtlRunOnceBeginInitialize",
    "WinSqmCommonDatapointSetDWORD64",
    "EtwEventProviderEnabled",
    "EtwpNotificationThread",
    "NtNotifyChangeKey",
    "RtlNumberOfSetBits",
    "RtlUpcaseUnicodeToCustomCPN",
    "ZwReadOnlyEnlistment",
    "NtCreateJobSet",
    "RtlQueryInterfaceMemoryStream",
    "RtlIdnToUnicode",
    "isspace",
    "ZwCommitEnlistment",
    "ZwWriteFile",
    "NlsAnsiCodePage",
    "RtlSetTimeZoneInformation",
    "ZwPulseEvent",
    "RtlAddAuditAccessAceEx",
    "RtlCreateUserProcess",
    "ZwQuerySymbolicLinkObject",
    "ZwNotifyChangeMultipleKeys",
    "ZwResumeProcess",
    "ZwQuerySemaphore",
    "LdrpResGetMappingSize",
    "RtlLookupElementGenericTable",
    "RtlpApplyLengthFunction",
    "ZwLockFile",
    "RtlCreateHashTable",
    "NtQueryInformationEnlistment",
    "TpSetTimer",
    "RtlGetCurrentProcessorNumber",
    "ZwSetHighWaitLowEventPair",
    "ZwGetNextThread",
    "RtlAcquirePebLock",
    "RtlFinalReleaseOutOfProcessMemoryStream",
    "NtLoadKeyEx",
    "EtwRegisterTraceGuidsA",
    "RtlAcquireSRWLockShared",
    "NtMapViewOfSection",
    "EtwTraceEventInstance",
    "RtlQueryPerformanceCounter",
    "KiUserExceptionDispatcher",
    "TpPoolFreeUnusedNodes",
    "NtQuerySymbolicLinkObject",
    "ZwOpenTimer",
    "RtlAddAccessAllowedAceEx",
    "RtlGetSecurityDescriptorRMControl",
    "ZwQueryQuotaInformationFile",
    "RtlLocateExtendedFeature",
    "RtlpNtMakeTemporaryKey",
    "RtlPopFrame",
    "_strlwr",
    "NtThawTransactions",
    "RtlFreeHeap",
    "RtlpGetLCIDFromLangInfoNode",
    "EtwRegisterSecurityProvider",
    "LdrpResGetResourceDirectory",
    "RtlSetExtendedFeaturesMask",
    "RtlInitCodePageTable",
    "TpReleaseCleanupGroup",
    "NtSetEvent",
    "TpCallbackSetEventOnCompletion",
    "RtlLockMemoryStreamRegion",
    "RtlSidEqualLevel",
    "RtlActivateActivationContext",
    "TpReleasePool",
    "_CIlog",
    "NtSetInformationTransactionManager",
    "LdrUnregisterDllNotification",
    "ZwQueryMutant",
    "ZwAlpcOpenSenderProcess",
    "ZwOpenMutant",
    "NtOpenIoCompletion",
    "NtAlpcDeleteSecurityContext",
    "RtlxUnicodeStringToAnsiSize",
    "_i64toa_s",
    "NtSetHighEventPair",
    "ZwInitializeNlsFiles",
    "RtlSetAllBits",
    "strcat_s",
    "RtlCreateQueryDebugBuffer",
    "DbgUiContinue",
    "RtlLogStackBackTrace",
    "RtlUpcaseUnicodeChar",
    "RtlSetCurrentTransaction",
    "ZwSetContextThread",
    "RtlInitializeCriticalSectionAndSpinCount",
    "swscanf_s",
    "NtInitiatePowerAction",
    "RtlAddCompoundAce",
    "ZwWaitForMultipleObjects32",
    "NtQueryMultipleValueKey",
    "NtRequestPort",
    "NtFlushKey",
    "RtlIpv4AddressToStringW",
    "RtlFindAceByType",
    "RtlResetMemoryBlockLookaside",
    "RtlInitWeakEnumerationHashTable",
    "AlpcFreeCompletionListMessage",
    "ZwCreateWorkerFactory",
    "ZwSetLdtEntries",
    "_vsnwprintf_s",
    "RtlpGetSystemDefaultUILanguage",
    "ZwSetDefaultLocale",
    "RtlUnicodeStringToCountedOemString",
    "RtlLocaleNameToLcid",
    "NtSetInformationThread",
    "LdrVerifyImageMatchesChecksumEx",
    "DbgSetDebugFilterState",
    "NtSetHighWaitLowEventPair",
    "_alldvrm",
    "RtlQueryCriticalSectionOwner",
    "NtQueryIntervalProfile",
    "ZwQueryTimerResolution",
    "RtlLockHeap",
    "NtCreateJobObject",
    "RtlAppendStringToString",
    "RtlInterlockedCompareExchange64",
    "NtGetNotificationResourceManager",
    "ZwAdjustPrivilegesToken",
    "ZwResetEvent",
    "_strupr",
    "_CIpow",
    "TpAlpcUnregisterCompletionList",
    "NtImpersonateAnonymousToken",
    "NtAccessCheckByTypeResultListAndAuditAlarm",
    "ZwImpersonateThread",
    "LdrFindResourceDirectory_U",
    "ZwEnumerateSystemEnvironmentValuesEx",
    "RtlCopyMemoryStreamTo",
    "ZwDisplayString",
    "WinSqmCommonDatapointDelete",
    "_strnset_s",
    "RtlCheckRegistryKey",
    "RtlIpv6StringToAddressExW",
    "RtlUshortByteSwap",
    "NtRemoveProcessDebug",
    "LdrSetAppCompatDllRedirectionCallback",
    "NtAllocateVirtualMemory",
    "ZwSetSystemInformation",
    "RtlpUnWaitCriticalSection",
    "ZwDeletePrivateNamespace",
    "RtlCreateBootStatusDataFile",
    "CsrClientConnectToServer",
    "RtlpVerifyAndCommitUILanguageSettings",
    "NtImpersonateClientOfPort",
    "RtlDeleteTimerQueueEx",
    "NtAccessCheck",
    "RtlMultiByteToUnicodeSize",
    "RtlSetUserValueHeap",
    "_memccpy",
    "RtlCompareUnicodeString",
    "RtlDetermineDosPathNameType_U",
    "NtOpenDirectoryObject",
    "NtAlpcAcceptConnectPort",
    "RtlInitAnsiString",
    "RtlCreateUnicodeString",
    "RtlUpdateTimer",
    "ZwSetLowEventPair",
    "ZwUnlockVirtualMemory",
    "WinSqmCheckEscalationSetString",
    "NtDuplicateToken",
    "RtlLookupAtomInAtomTable",
    "LdrDisableThreadCalloutsForDll",
    "RtlProcessFlsData",
    "NtEnumerateKey",
    "ZwVdmControl",
    "RtlSleepConditionVariableSRW",
    "RtlCancelTimer",
    "RtlInitializeCriticalSectionEx",
    "ZwGetWriteWatch",
    "NtWaitForWorkViaWorkerFactory",
    "EtwDeliverDataBlock",
    "ZwWorkerFactoryWorkerReady",
    "RtlCreateActivationContext",
    "ZwCancelTimer",
    "RtlSetThreadPoolStartFunc",
    "TpCallbackMayRunLong",
    "MD5Update",
    "RtlFindActivationContextSectionString",
    "EtwSendNotification",
    "RtlDestroyMemoryZone",
    "RtlRunOnceExecuteOnce",
    "RtlFreeHandle",
    "RtlIsNameInExpression",
    "ZwFindAtom",
    "RtlSetEnvironmentVariable",
    "RtlGetDaclSecurityDescriptor",
    "LdrFlushAlternateResourceModules",
    "RtlpGetUserOrMachineUILanguage4NLS",
    "NtExtendSection",
    "RtlRunEncodeUnicodeString",
    "ZwCreatePrivateNamespace",
    "NtWaitForKeyedEvent",
    "NtAlpcCreatePortSection",
    "ZwResetWriteWatch",
    "_ltoa",
    "RtlpWaitForCriticalSection",
    "ZwSecureConnectPort",
    "RtlCaptureStackBackTrace",
    "ZwSetTimerResolution",
    "ZwSetDefaultUILanguage",
    "RtlLocalTimeToSystemTime",
    "NtSetEventBoostPriority",
    "RtlGetSaclSecurityDescriptor",
    "NtAlpcCancelMessage",
    "NtDelayExecution",
    "DbgUiConvertStateChangeStructure",
    "RtlEqualUnicodeString",
    "_vsnwprintf",
    "LdrResGetRCConfig",
    "NtAlpcDeletePortSection",
    "RtlGetFrame",
    "TpSetPoolMaxThreads",
    "ZwCompleteConnectPort",
    "RtlGetGroupSecurityDescriptor",
    "RtlFindSetBits",
    "strlen",
    "RtlGetElementGenericTableAvl",
    "TpCallbackLeaveCriticalSectionOnCompletion",
    "ZwLoadKeyEx",
    "DbgQueryDebugFilterState",
    "RtlConvertToAutoInheritSecurityObject",
    "RtlpInitializeLangRegistryInfo",
    "RtlpSetPreferredUILanguages",
    "ZwThawRegistry",
    "NtCreateSemaphore",
    "RtlCopyLuidAndAttributesArray",
    "ZwSetInformationThread",
    "RtlRemovePrivileges",
    "NtAlpcQueryInformation",
    "RtlCreateAtomTable",
    "RtlEncodePointer",
    "ZwOpenSymbolicLinkObject",
    "NtOpenThread",
    "NtTestAlert",
    "RtlHashUnicodeString",
    "wcscat_s",
    "NtPulseEvent",
    "ZwSaveKey",
    "ZwFlushProcessWriteBuffers",
    "ZwOpenEnlistment",
    "TpReleaseWait",
    "NtWaitForMultipleObjects32",
    "RtlRemoveEntryHashTable",
    "strcat",
    "wcsrchr",
    "NtImpersonateThread",
    "RtlQueryThreadProfiling",
    "ZwAccessCheckByTypeResultListAndAuditAlarmByHandle",
    "RtlUnwind",
    "NtOpenEvent",
    "RtlUpperString",
    "NtAddAtom",
    "ZwQueueApcThreadEx",
    "memset",
    "NtQuerySecurityObject",
    "sqrt",
    "NtConnectPort",
    "NtPrepareEnlistment",
    "A_SHAFinal",
    "NtQuerySemaphore",
    "NtReadRequestData",
    "RtlQueryRegistryValues",
    "ZwQueryDefaultLocale",
    "RtlInitNlsTables",
    "RtlTraceDatabaseValidate",
    "LdrLoadDll",
    "strncat",
    "RtlDowncaseUnicodeString",
    "RtlSecondsSince1980ToTime",
    "RtlValidateHeap",
    "RtlAddAtomToAtomTable",
    "ZwStopProfile",
    "NtOpenMutant",
    "ZwAlertThread",
    "NtCreateUserProcess",
    "RtlDosPathNameToRelativeNtPathName_U_WithStatus",
    "RtlSidIsHigherLevel",
    "ZwGetNlsSectionPtr",
    "LdrUnloadAlternateResourceModuleEx",
    "RtlCreateAndSetSD",
    "KiUserCallbackDispatcher",
    "ZwAlpcCreatePort",
    "RtlEthernetAddressToStringA",
    "RtlAddActionToRXact",
    "NtSetBootOptions",
    "ZwDelayExecution",
    "RtlGetCallersAddress",
    "NtdllDefWindowProc_W",
    "ZwQueryOpenSubKeysEx",
    "NtSetTimerEx",
    "RtlCreateMemoryBlockLookaside",
    "TpAllocPool",
    "NtQueryDirectoryFile",
    "isxdigit",
    "NtClose",
    "NtQueryInformationPort",
    "_vscwprintf",
    "LdrAddLoadAsDataTable",
    "pow",
    "NtDisplayString",
    "NtCancelTimer",
    "ZwSystemDebugControl",
    "NtQueryTimer",
    "mbstowcs",
    "RtlCloneUserProcess",
    "NtSaveKey",
    "RtlSubtreePredecessor",
    "ZwFlushVirtualMemory",
    "RtlReleaseResource",
    "NtEnumerateBootEntries",
    "NtAlpcCreateSectionView",
    "RtlGetNativeSystemInformation",
    "RtlRandom",
    "RtlInitializeExceptionChain",
    "WinSqmCommonDatapointSetString",
    "ZwYieldExecution",
    "LdrLoadAlternateResourceModule",
    "RtlEqualString",
    "NtAlpcQueryInformationMessage",
    "__toascii",
    "RtlIsValidLocaleName",
    "_itoa",
    "sin",
    "RtlFreeThreadActivationContextStack",
    "NtCallbackReturn",
    "wcsncat_s",
    "RtlReleaseSRWLockShared",
    "RtlAllocateMemoryZone",
    "ZwGetDevicePowerState",
    "NtdllDialogWndProc_A",
    "_wcsicmp",
    "RtlReadOutOfProcessMemoryStream",
    "WinSqmGetEscalationRuleStatus",
    "iswspace",
    "wcschr",
    "ZwDuplicateToken",
    "RtlIsGenericTableEmpty",
    "_aulldvrm",
    "_wtoi",
    "RtlAddAuditAccessObjectAce",
    "TpReleaseTimer",
    "RtlAreAllAccessesGranted",
    "ZwCreateIoCompletion",
    "RtlInitializeRXact",
    "RtlNewInstanceSecurityObject",
    "NtCancelIoFileEx",
    "NtSecureConnectPort",
    "RtlCultureNameToLCID",
    "RtlLookupElementGenericTableFullAvl",
    "NtOpenKeyTransactedEx",
    "NtVdmControl",
    "ZwCreatePort",
    "NtQueryFullAttributesFile",
    "RtlUnicodeStringToOemSize",
    "RtlGetCurrentTransaction",
    "_allmul",
    "RtlFindClearRuns",
    "RtlSetInformationAcl",
    "NtQueryInformationResourceManager",
    "RtlCreateProcessReflection",
    "RtlExpandEnvironmentStrings",
    "ZwDeleteAtom",
    "NtCommitTransaction",
    "RtlValidateUnicodeString",
    "ZwOpenKeyTransacted",
    "RtlCreateTimer",
    "RtlImageNtHeaderEx",
    "RtlSetHeapInformation",
    "NtReplacePartitionUnit",
    "ZwSetQuotaInformationFile",
    "AlpcUnregisterCompletionList",
    "_CIcos",
    "RtlEmptyAtomTable",
    "ZwQueryBootEntryOrder",
    "strnlen",
    "RtlMapSecurityErrorToNtStatus",
    "ZwQueryInformationToken",
    "ZwGetPlugPlayEvent",
    "ZwAllocateVirtualMemory",
    "NtReleaseMutant",
    "ZwCreateKeyTransacted",
    "RtlLargeIntegerNegate",
    "NtAlpcOpenSenderThread",
    "ZwLockVirtualMemory",
    "NtMapCMFModule",
    "RtlQueryTagHeap",
    "ZwCreateProcessEx",
    "RtlGetCompressionWorkSpaceSize",
    "NtQuerySecurityAttributesToken",
    "_wtol",
    "WinSqmIsOptedInEx",
    "labs",
    "RtlGetIntegerAtom",
    "RtlpConvertCultureNamesToLCIDs",
    "strncpy_s",
    "wcsncat",
    "__isascii",
    "ZwRollbackEnlistment",
    "NtAccessCheckByType",
    "RtlInitOutOfProcessMemoryStream",
    "NtCreateResourceManager",
    "NtQueryInformationProcess",
    "PfxRemovePrefix",
    "NtModifyDriverEntry",
    "RtlUserThreadStart",
    "CsrCaptureMessageBuffer",
    "ZwQueryDefaultUILanguage",
    "NtSetIoCompletionEx",
    "RtlNormalizeString",
    "RtlCreateTimerQueue",
    "_wcsnset_s",
    "RtlUnicodeToCustomCPN",
    "ZwRequestPort",
    "ZwFlushWriteBuffer",
    "RtlRemoteCall",
    "RtlRemoveVectoredExceptionHandler",
    "AlpcGetMessageFromCompletionList",
    "NtCreateKeyedEvent",
    "ZwSetUuidSeed",
    "ZwRenameTransactionManager",
    "RtlCreateEnvironmentEx",
    "RtlDestroyHandleTable",
    "AlpcRundownCompletionList",
    "RtlIsTextUnicode",
    "_itoa_s",
    "ZwOpenSession",
    "RtlExtendMemoryZone",
    "EtwEventActivityIdControl",
    "RtlInitializeSid",
    "ZwAlertResumeThread",
    "ZwQueryTimer",
    "NtCreatePagingFile",
    "NtSetDebugFilterState",
    "RtlDelete",
    "RtlLengthRequiredSid",
    "RtlLockMemoryZone",
    "RtlReleaseActivationContext",
    "RtlWow64EnableFsRedirectionEx",
    "ZwCreateThread",
    "NtOpenEventPair",
    "NtCreateProfileEx",
    "NtSetInformationDebugObject",
    "RtlDumpResource",
    "NtFreezeTransactions",
    "ZwEnableLastKnownGood",
    "ZwQueryObject",
    "NtSetThreadExecutionState",
    "RtlCleanUpTEBLangLists",
    "RtlNumberGenericTableElements",
    "ZwCreateJobSet",
    "RtlValidRelativeSecurityDescriptor",
    "ZwSetSystemEnvironmentValueEx",
    "strstr",
    "ZwShutdownWorkerFactory",
    "_aullrem",
    "ZwSetEaFile",
    "RtlxUnicodeStringToOemSize",
    "RtlInitMemoryStream",
    "RtlInitializeNtUserPfn",
    "RtlGetLocaleFileMappingAddress",
    "CsrGetProcessId",
    "RtlGetLengthWithoutTrailingPathSeperators",
    "PfxInsertPrefix",
    "memmove_s",
    "RtlCreateSystemVolumeInformationFolder",
    "ZwOpenIoCompletion",
    "ZwEnumerateValueKey",
    "ZwAlpcSendWaitReceivePort",
    "EvtIntReportEventAndSourceAsync",
    "RtlWalkHeap",
    "RtlQueryProcessLockInformation",
    "RtlDuplicateUnicodeString",
    "ZwReadFileScatter",
    "NtFreeVirtualMemory",
    "ZwAlpcSetInformation",
    "RtlFormatMessageEx",
    "RtlHeapTrkInitialize",
    "ZwOpenTransactionManager",
    "strncat_s",
    "AlpcGetOutstandingCompletionListMessageCount",
    "LdrResFindResource",
    "RtlNtStatusToDosError",
    "NtAllocateUuids",
    "RtlFindLeastSignificantBit",
    "RtlSetOwnerSecurityDescriptor",
    "NtTerminateProcess",
    "NtCreateWaitablePort",
    "ZwNotifyChangeSession",
    "RtlCreateServiceSid",
    "RtlDeleteElementGenericTableAvl",
    "ZwSetSystemEnvironmentValue",
    "NtQueryDebugFilterState",
    "RtlMoveMemory",
    "TpReleaseWork",
    "bsearch",
    "RtlAllocateHeap",
    "TpWaitForWork",
    "NtSetTimer",
    "RtlCreateTagHeap",
    "RtlCreateUserStack",
    "NtAlertThread",
    "RtlQueryDepthSList",
    "RtlGetUnloadEventTraceEx",
    "RtlDeleteResource",
    "_ui64tow_s",
    "ZwCreateToken",
    "LdrGetFailureData",
    "TpReleaseCleanupGroupMembers",
    "RtlQueryEnvironmentVariable_U",
    "RtlGetProcessHeaps",
    "ZwSetIoCompletion",
    "NtNotifyChangeDirectoryFile",
    "iswlower",
    "RtlWakeConditionVariable",
    "RtlReportSqmEscalation",
    "_fltused",
    "AlpcRegisterCompletionListWorkerThread",
    "RtlUlongByteSwap",
    "NtSetSystemPowerState",
    "RtlDecodePointer",
    "RtlpNtCreateKey",
    "RtlPinAtomInAtomTable",
    "RtlEnlargedUnsignedMultiply",
    "NtReadVirtualMemory",
    "TpCallbackReleaseSemaphoreOnCompletion",
    "RtlSetTimer",
    "EtwNotificationUnregister",
    "RtlDeactivateActivationContext",
    "RtlIpv6AddressToStringExA",
    "RtlCompareMemory",
    "ZwReplyWaitReceivePortEx",
    "RtlQueryPerformanceFrequency",
    "NtCloseObjectAuditAlarm",
    "NtWriteRequestData",
    "RtlQueryInformationAcl",
    "RtlDisableThreadProfiling",
    "sscanf_s",
    "ZwResumeThread",
    "RtlFormatCurrentUserKeyPath",
    "NtResumeThread",
    "RtlAllocateMemoryBlockLookaside",
    "NtCompareTokens",
    "NtSetEaFile",
    "NtQuerySystemEnvironmentValue",
    "NtAlpcImpersonateClientOfPort",
    "RtlAllocateActivationContextStack",
    "ZwReplacePartitionUnit",
    "ZwFlushKey",
    "NtSystemDebugControl",
    "TpWaitForWait",
    "WinSqmCommonDatapointSetStreamEx",
    "EtwUnregisterTraceGuids",
    "wcstombs",
    "NtCreateNamedPipeFile",
    "ZwTranslateFilePath",
    "RtlInsertElementGenericTableFullAvl",
    "MD5Final",
    "RtlFlsFree",
    "ZwSetSecurityObject",
    "ZwWriteRequestData",
    "RtlOemStringToUnicodeSize",
    "KiRaiseUserExceptionDispatcher",
    "ZwQuerySection",
    "NtLockVirtualMemory",
    "ZwMakeTemporaryObject",
    "NtDisableLastKnownGood",
    "TpReleaseIoCompletion",
    "_alloca_probe_16",
    "ZwRemoveIoCompletionEx",
    "NtMakePermanentObject",
    "ZwAlpcAcceptConnectPort",
    "LdrGetProcedureAddressEx",
    "fabs",
    "ZwTerminateThread",
    "NtEnumerateSystemEnvironmentValuesEx",
    "NtSetUuidSeed",
    "ZwOpenJobObject",
    "RtlFillMemory",
    "ZwQueryInformationFile",
    "NtCreateDebugObject",
    "NtSetQuotaInformationFile",
    "NtUnmapViewOfSection",
    "ZwCreateThreadEx",
    "RtlEnumerateGenericTable",
    "ZwReplyWaitReplyPort",
    "RtlDeleteSecurityObject",
    "ZwQueryPortInformationProcess",
    "NtPropagationComplete",
    "EtwCreateTraceInstanceId",
    "NtCreateSection",
    "NtSetDefaultUILanguage",
    "LdrQueryImageFileKeyOption",
    "RtlFreeAnsiString",
    "RtlValidSecurityDescriptor",
    "RtlQueueWorkItem",
    "EtwEventWriteStartScenario",
    "RtlDosApplyFileIsolationRedirection_Ustr",
    "RtlConvertUlongToLargeInteger",
    "_ultoa_s",
    "AlpcInitializeMessageAttribute",
    "NtLockRegistryKey",
    "RtlLengthSecurityDescriptor",
    "KiFastSystemCall",
    "TpSetPoolMinThreads",
    "RtlSplay",
    "NtLoadKey2",
    "ZwRollbackComplete",
    "NtRollbackTransaction",
    "wcsncpy",
    "RtlLookupElementGenericTableFull",
    "RtlIsNormalizedString",
    "NtGetMUIRegistryInfo",
    "EtwEventEnabled",
    "NtOpenThreadToken",
    "RtlNewSecurityObject",
    "NtOpenSection",
    "ZwReleaseWorkerFactoryWorker",
    "ZwQueryDirectoryFile",
    "NtCreateProcessEx",
    "ZwQueueApcThread",
    "ZwAccessCheck",
    "RtlGetLastNtStatus",
    "RtlDestroyProcessParameters",
    "NtListenPort",
    "RtlLargeIntegerShiftRight",
    "RtlxOemStringToUnicodeSize",
    "ZwCreateTransactionManager",
    "NtdllDialogWndProc_W",
    "RtlAddAccessAllowedAce",
    "ZwReplaceKey",
    "NtOpenObjectAuditAlarm",
    "RtlRaiseStatus",
    "isalpha",
    "vsprintf",
    "RtlQuerySecurityObject",
    "ZwRegisterThreadTerminatePort",
    "RtlRunOnceComplete",
    "ZwAlpcCreatePortSection",
    "NtQueryInformationAtom",
    "ZwCreateEnlistment",
    "RtlFindLongestRunClear",
    "NtResumeProcess",
    "ZwAccessCheckByTypeAndAuditAlarm",
    "ZwPrivilegeCheck",
    "RtlFreeOemString",
    "RtlNewSecurityObjectWithMultipleInheritance",
    "LdrEnumResources",
    "NtReleaseKeyedEvent",
    "RtlMultiAppendUnicodeStringBuffer",
    "RtlLookupElementGenericTableAvl",
    "ZwQuerySecurityAttributesToken",
    "RtlUnlockHeap",
    "RtlQueryActivationContextApplicationSettings",
    "RtlAllocateAndInitializeSid",
    "RtlGetProductInfo",
    "WinSqmEndSession",
    "wcslen",
    "sscanf",
    "RtlRunOnceInitialize",
    "atol",
    "RtlpSetUserPreferredUILanguages",
    "ZwUnloadKeyEx",
    "RtlFillMemoryUlong",
    "RtlReAllocateHeap",
    "DbgUiWaitStateChange",
    "NtAlpcCreateSecurityContext",
    "RtlDecompressBuffer",
    "RtlLockCurrentThread",
    "ZwCreateEvent",
    "RtlAnsiStringToUnicodeSize",
    "WinSqmStartSession",
    "RtlNtPathNameToDosPathName",
    "RtlSubAuthoritySid",
    "ZwGetMUIRegistryInfo",
    "_allshl",
    "TpQueryPoolStackInformation",
    "ZwWaitForWorkViaWorkerFactory",
    "RtlOpenCurrentUser",
    "AlpcUnregisterCompletionListWorkerThread",
    "ZwOpenThread",
    "RtlGetUILanguageInfo",
    "ZwOpenEventPair",
    "RtlReplaceSidInSd",
    "RtlGetFullPathName_UstrEx",
    "RtlDeNormalizeProcessParams",
    "ZwReplyPort",
    "AlpcGetCompletionListMessageAttributes",
    "EtwEventWriteString",
    "_ftol",
    "_snwprintf",
    "RtlAddVectoredExceptionHandler",
    "WinSqmIsOptedIn",
    "ZwOpenTransaction",
    "ZwWaitLowEventPair",
    "DbgPrintEx",
    "EvtIntReportAuthzEventAndSourceAsync",
    "_itow",
    "NtFreezeRegistry",
    "LdrLockLoaderLock",
    "NtQueryDriverEntryOrder",
    "RtlMapGenericMask",
    "_allshr",
    "RtlCompareAltitudes",
    "ZwRaiseHardError",
    "RtlTraceDatabaseCreate",
    "RtlAppendAsciizToString",
    "NtQueueApcThreadEx",
    "RtlInitializeBitMap",
    "PfxInitialize",
    "RtlInterlockedClearBitRun",
    "RtlCreateUserThread",
    "RtlLengthSid",
    "ZwCreateMutant",
    "RtlIpv6AddressToStringExW",
    "vswprintf_s",
    "ZwCommitComplete",
    "TpAllocIoCompletion",
    "RtlpNtEnumerateSubKey",
    "RtlIdentifierAuthoritySid",
    "RtlMultipleAllocateHeap",
    "RtlAcquireReleaseSRWLockExclusive",
    "RtlWow64CallFunction64",
    "isalnum",
    "RtlCmEncodeMemIoResource",
    "NtQueryDirectoryObject",
    "RtlGetSystemPreferredUILanguages",
    "EtwGetTraceEnableFlags",
    "RtlAddAccessDeniedAceEx",
    "NtSetSystemEnvironmentValue",
    "ZwCancelSynchronousIoFile",
    "NtRecoverResourceManager",
    "RtlCopySid",
    "EtwGetTraceLoggerHandle",
    "ZwAlpcQueryInformationMessage",
    "RtlIoEncodeMemIoResource",
    "RtlIdnToAscii",
    "RtlFindActivationContextSectionGuid",
    "memmove",
    "NtIsProcessInJob",
    "NtQueryPortInformationProcess",
    "RtlZeroHeap",
    "RtlDetectHeapLeaks",
    "islower",
    "NtYieldExecution",
    "RtlCreateHeap",
    "EtwpGetCpuSpeed",
    "RtlDecompressFragment",
    "NtSetInformationProcess",
    "RtlGetExtendedContextLength",
    "RtlpCheckDynamicTimeZoneInformation",
    "ZwSetInformationFile",
    "ZwCreateKeyedEvent",
    "NtSetVolumeInformationFile",
    "ZwInitializeRegistry",
    "RtlRegisterSecureMemoryCacheCallback",
    "TpDbgSetLogRoutine",
    "ZwApphelpCacheControl",
    "EtwRegisterTraceGuidsW",
    "RtlIoDecodeMemIoResource",
    "RtlExitUserProcess",
    "NtSerializeBoot",
    "RtlApplicationVerifierStop",
    "CsrCaptureTimeout",
    "NtSetSystemEnvironmentValueEx",
    "A_SHAInit",
    "RtlLockBootStatusData",
    "ZwSetInformationEnlistment",
    "_ultow",
    "RtlSidHashInitialize",
    "RtlImpersonateSelf",
    "ZwCompactKeys",
    "log",
    "_makepath_s",
    "MD5Init",
    "RtlCreateRegistryKey",
    "RtlAppendUnicodeToString",
    "NtEnableLastKnownGood",
    "RtlGetSetBootStatusData",
    "RtlLargeIntegerSubtract",
    "RtlIsCriticalSectionLocked",
    "RtlCreateVirtualAccountSid",
    "ZwCancelIoFile",
    "ZwCreateProcess",
    "RtlQueryTimeZoneInformation",
    "NtMakeTemporaryObject",
    "RtlpNtSetValueKey",
    "ZwQueryInformationWorkerFactory",
    "_snwscanf_s",
    "NtRollbackComplete",
    "RtlUnicodeToMultiByteN",
    "ZwAlpcCancelMessage",
    "CsrAllocateMessagePointer",
    "CsrClientCallServer",
    "NtTerminateThread",
    "LdrAddRefDll",
    "RtlxAnsiStringToUnicodeSize",
    "_CIsqrt",
    "DbgUiSetThreadDebugObject",
    "NtCreateMailslotFile",
    "WinSqmGetInstrumentationProperty",
    "LdrQueryModuleServiceTags",
    "ZwRaiseException",
    "RtlEndEnumerationHashTable",
    "_wcslwr",
    "NtSetTimerResolution",
    "NtQueryInformationToken",
    "ZwMapViewOfSection",
    "NtGetContextThread",
    "NtOpenJobObject",
    "ZwAccessCheckByType",
    "RtlDoesFileExists_U",
    "NtSinglePhaseReject",
    "NtUnloadKeyEx",
    "RtlLoadString",
    "ZwOpenDirectoryObject",
    "RtlSidHashLookup",
    "RtlComputeImportTableHash",
    "RtlEnumerateGenericTableWithoutSplayingAvl",
    "RtlSetMemoryStreamSize",
    "NtOpenKeyTransacted",
    "_lfind",
    "RtlQueryElevationFlags",
    "RtlCutoverTimeToSystemTime",
    "RtlSecondsSince1970ToTime",
    "ZwLockRegistryKey",
    "ZwThawTransactions",
    "RtlEqualDomainName",
    "NtOpenTransaction",
    "RtlAnsiCharToUnicodeChar",
    "NtSuspendProcess",
    "NtRegisterThreadTerminatePort",
    "NtQueryObject",
    "RtlCaptureStackContext",
    "RtlInterlockedFlushSList",
    "SbSelectProcedure",
    "RtlSeekMemoryStream",
    "NtAlpcCreateResourceReserve",
    "RtlCopyUnicodeString",
    "NtSaveKeyEx",
    "RtlEnableThreadProfiling",
    "TpStartAsyncIoOperation",
    "ZwFreeUserPhysicalPages",
    "NtOpenSemaphore",
    "ZwAddBootEntry",
    "ZwSetLowWaitHighEventPair",
    "RtlImageDirectoryEntryToData",
    "vsprintf_s",
    "ZwSetEvent",
    "RtlInterlockedPopEntrySList",
    "RtlFirstFreeAce",
    "NtRaiseException",
    "NtWriteFileGather",
    "ExpInterlockedPopEntrySListResume",
    "NtTranslateFilePath",
    "NtThawRegistry",
    "RtlGetFileMUIPath",
    "isdigit",
    "ZwPlugPlayControl",
    "LdrFindResource_U",
    "NtSetLowEventPair",
    "NtQueryEaFile",
    "RtlStringFromGUID",
    "ZwOpenObjectAuditAlarm",
    "ZwClose",
    "LdrGetFileNameFromLoadAsDataTable",
    "RtlFirstEntrySList",
    "RtlEnumerateGenericTableAvl",
    "RtlSetBits",
    "RtlGetAce",
    "RtlFreeSid",
    "RtlAddAce",
    "NtPrepareComplete",
    "ZwReadRequestData",
    "NtSetInformationWorkerFactory",
    "RtlGetNextEntryHashTable",
    "ZwQueryInformationAtom",
    "RtlGetUnloadEventTrace",
    "_chkstk",
    "RtlUnicodeStringToAnsiString",
    "RtlSetEnvironmentVar",
    "ZwQuerySystemInformationEx",
    "ZwOpenResourceManager",
    "RtlTraceDatabaseLock",
    "NtSetInformationKey",
    "ZwSetInformationProcess",
    "RtlSetDaclSecurityDescriptor",
    "NtRenameKey",
    "RtlCompareUnicodeStrings",
    "ZwCreateJobObject",
    "_snwprintf_s",
    "toupper",
    "LdrResSearchResource",
    "RtlGetElementGenericTable",
    "NtQueryOpenSubKeysEx",
    "ZwRecoverResourceManager",
    "ZwUnloadKey2",
    "RtlFreeActivationContextStack",
    "RtlRunDecodeUnicodeString",
    "NtOpenPrivateNamespace",
    "RtlLargeIntegerToChar",
    "RtlCreateProcessParametersEx",
    "strcpy",
    "ZwRollbackTransaction",
    "RtlGetFullPathName_U",
    "ZwWaitForSingleObject",
    "ZwCreatePagingFile",
    "ZwGetNotificationResourceManager",
    "TpCheckTerminateWorker",
    "RtlGetCurrentProcessorNumberEx",
    "NtOpenKeyedEvent",
    "RtlDllShutdownInProgress",
    "NtRemoveIoCompletionEx",
    "ZwQueryKey",
    "ZwSuspendProcess",
    "RtlLeaveCriticalSection",
    "DbgUiDebugActiveProcess",
    "ZwSetValueKey",
    "RtlDeleteCriticalSection",
    "AlpcRegisterCompletionList",
    "RtlAddAccessDeniedObjectAce",
    "RtlImpersonateSelfEx",
    "RtlUpcaseUnicodeToOemN",
    "NtRollforwardTransactionManager",
    "RtlSetCriticalSectionSpinCount",
    "RtlIpv6StringToAddressW",
    "RtlAnsiStringToUnicodeString",
    "ZwSetInformationDebugObject",
    "RtlValidAcl",
    "NtQueryPerformanceCounter",
    "RtlCreateProcessParameters",
    "NtRaiseHardError",
    "ZwSetIoCompletionEx",
    "RtlEthernetStringToAddressA",
    "ZwCreateSymbolicLinkObject",
    "ZwQueryInformationJobObject",
    "NtQueryBootEntryOrder",
    "NtGetWriteWatch",
    "RtlFindCharInUnicodeString",
    "wcscspn",
    "RtlReadMemoryStream",
    "RtlGetVersion",
    "qsort",
    "RtlTestBit",
    "RtlGetActiveActivationContext",
    "RtlIdnToNameprepUnicode",
    "DbgUiGetThreadDebugObject",
    "_i64toa",
    "_snscanf_s",
    "RtlInsertElementGenericTableFull",
    "WinSqmIncrementDWORD",
    "NtQueueApcThread",
    "NtDeletePrivateNamespace",
    "ZwFreeVirtualMemory",
    "TpReleaseAlpcCompletion",
    "EtwEventRegister",
    "NtRemoveIoCompletion",
    "RtlAddIntegrityLabelToBoundaryDescriptor",
    "ZwSetIntervalProfile",
    "ZwCreateProfile",
    "RtlUnhandledExceptionFilter",
    "RtlRetrieveNtUserPfn",
    "RtlDestroyAtomTable",
    "RtlConsoleMultiByteToUnicodeN",
    "NtModifyBootEntry",
    "NtSuspendThread",
    "NtCreateTimer",
    "RtlExtendedLargeIntegerDivide",
    "RtlUnicodeStringToInteger",
    "RtlConnectToSm",
    "RtlDeleteAtomFromAtomTable",
    "RtlSetProcessDebugInformation",
    "NtQuerySystemTime",
    "RtlGetNtGlobalFlags",
    "NtCreateWorkerFactory",
    "TpAllocWait",
    "NtWaitHighEventPair",
    "ZwDuplicateObject",
    "RtlSelfRelativeToAbsoluteSD2",
    "EtwEnumerateProcessRegGuids",
    "RtlValidSid",
    "RtlUnlockModuleSection",
    "ZwDebugActiveProcess",
    "NtUnloadKey2",
    "ZwEnumerateDriverEntries",
    "CsrCaptureMessageMultiUnicodeStringsInPlace",
    "RtlAbsoluteToSelfRelativeSD",
    "NtSetIoCompletion",
    "RtlDeleteRegistryValue",
    "ZwRenameKey",
    "vDbgPrintExWithPrefix",
    "NtAlertResumeThread",
    "ZwCompressKey",
    "NtOpenSymbolicLinkObject",
    "TpSetDefaultPoolStackInformation",
    "RtlIsActivationContextActive",
    "RtlCommitMemoryStream",
    "RtlpRefreshCachedUILanguage",
    "NtQueryQuotaInformationFile",
    "ZwDisableLastKnownGood",
    "LdrGetDllHandleByName",
    "NtQueryIoCompletion",
    "RtlSetSecurityObject",
    "towupper",
    "RtlInterlockedSetBitRun",
    "ZwSetInformationJobObject",
    "ZwAlpcOpenSenderThread",
    "NtSetContextThread",
    "ZwNotifyChangeKey",
    "RtlExitUserThread",
    "RtlSetControlSecurityDescriptor",
    "_atoi64",
    "RtlUpcaseUnicodeToMultiByteN",
    "LdrHotPatchRoutine",
    "NtTraceEvent",
    "RtlpMuiRegCreateRegistryInfo",
    "RtlTryEnterCriticalSection",
    "NtDeleteValueKey",
    "RtlMakeSelfRelativeSD",
    "RtlTimeToSecondsSince1970",
    "RtlTraceDatabaseEnumerate",
    "CsrCaptureMessageString",
    "EtwEventWriteEndScenario",
    "ZwQueryAttributesFile",
    "TpAllocCleanupGroup",
    "__iscsym",
    "RtlSetUserFlagsHeap",
    "TpDbgGetFreeInfo",
    "KiUserApcDispatcher",
    "RtlEnterCriticalSection",
    "RtlInitializeCriticalSection",
    "NtQueryMutant",
    "strcspn",
    "RtlFormatMessage",
    "RtlpNotOwnerCriticalSection",
    "ZwSinglePhaseReject",
    "_snprintf_s",
    "ZwQueryIoCompletion",
    "RtlIpv4AddressToStringA",
    "ZwNotifyChangeDirectoryFile",
    "RtlStartRXact",
    "RtlQueryProcessBackTraceInformation",
    "RtlDeregisterWait",
    "NtCreatePort",
    "NtOpenSession",
    "RtlCompareMemoryUlong",
    "strtok_s",
    "RtlExpandEnvironmentStrings_U",
    "iscntrl",
    "ZwQueryIntervalProfile",
    "ZwPrepareComplete",
    "RtlUnlockCurrentThread",
    "ZwOpenKeyTransactedEx",
    "WinSqmEventWrite",
    "DbgBreakPoint",
    "ZwClearEvent",
    "NtSetInformationJobObject",
    "NtQueryInformationWorkerFactory",
    "NtEnumerateDriverEntries",
    "isprint",
    "WinSqmCheckEscalationSetDWORD",
    "EtwEventWriteEx",
    "NtReplaceKey",
    "NtAlpcDisconnectPort",
    "RtlApplyRXactNoFlush",
    "TpCallbackReleaseMutexOnCompletion",
    "RtlOemToUnicodeN",
    "ZwAddDriverEntry",
    "cos",
    "NtPrePrepareEnlistment",
    "ZwModifyDriverEntry",
    "NtCreateSymbolicLinkObject",
    "ZwDeleteFile",
    "WinSqmSetIfMinDWORD",
    "ZwAlpcCreateSectionView",
    "RtlSetCurrentEnvironment",
    "ZwAlpcDeleteSecurityContext",
    "ZwAlpcConnectPort",
    "ZwAlpcDeletePortSection",
    "NtDeviceIoControlFile",
    "ZwQueryVolumeInformationFile",
    "NtLoadDriver",
    "RtlInitializeHandleTable",
    "LdrProcessRelocationBlock",
    "NtQuerySystemInformation",
    "RtlRealPredecessor",
    "RtlTryAcquireSRWLockShared",
    "ZwQueryInformationPort",
    "RtlInterlockedPushListSList",
    "RtlDeleteTimerQueue",
    "RtlVerifyVersionInfo",
    "NtCancelIoFile",
    "LdrResRelease",
    "RtlFindMessage",
    "RtlQueryHeapInformation",
    "RtlSetLastWin32Error",
    "RtlInitUnicodeStringEx",
    "RtlOemStringToUnicodeString",
    "NtFlushInstructionCache",
    "NtQueryAttributesFile",
    "RtlDeleteNoSplay",
    "ZwCreateTransaction",
    "NtQueryVolumeInformationFile",
    "RtlEnumProcessHeaps",
    "RtlSubAuthorityCountSid",
    "ZwSetTimerEx",
    "RtlGenerate8dot3Name",
    "RtlGetParentLocaleName",
    "RtlIntegerToChar",
    "ZwCreateDebugObject",
    "RtlWeaklyEnumerateEntryHashTable",
    "NtOpenThreadTokenEx",
    "ZwDeleteObjectAuditAlarm",
    "ZwImpersonateClientOfPort",
    "RtlReadThreadProfilingData",
    "_alloca_probe_8",
    "NtDrawText",
    "RtlLargeIntegerAdd",
    "ZwGetCurrentProcessorNumber",
    "EtwEventWriteNoRegistration",
    "RtlInitUnicodeString",
    "NtQueryInformationThread",
    "NtQueryLicenseValue",
    "RtlInitString",
    "ZwSetHighEventPair",
    "ZwAlpcCreateSecurityContext",
    "strtoul",
    "RtlValidateProcessHeaps",
    "wcstoul",
    "ispunct",
    "NtUnloadKey",
    "ZwLoadKey",
    "ZwQueryInformationTransactionManager",
    "strcmp",
    "ZwAccessCheckByTypeResultListAndAuditAlarm",
    "ZwCreateMailslotFile",
    "_ultoa",
    "NtAdjustPrivilegesToken",
    "NtGetCurrentProcessorNumber",
    "RtlSetProcessIsCritical",
    "RtlQueryProcessHeapInformation",
    "ZwCreateTimer",
    "DbgPrint",
    "RtlAddMandatoryAce",
    "CsrSetPriorityClass",
    "RtlIntegerToUnicodeString",
    "A_SHAUpdate",
    "RtlExtendMemoryBlockLookaside",
    "NtPropagationFailed",
    "RtlUpcaseUnicodeString",
    "LdrGetDllHandleByMapping",
    "wcsnlen",
    "RtlGetOwnerSecurityDescriptor",
    "RtlAddAuditAccessAce",
    "RtlpNtOpenKey",
    "ZwQueryEaFile",
    "_snprintf",
    "ZwSetBootEntryOrder",
    "ZwAlpcRevokeSecurityContext",
    "NtResetEvent",
    "NtWriteFile",
    "RtlAcquireSRWLockExclusive",
    "ZwImpersonateAnonymousToken",
    "AlpcAdjustCompletionListConcurrencyCount",
    "ZwWaitHighEventPair",
    "RtlAddressInSectionTable",
    "ZwConnectPort",
    "WinSqmCheckEscalationAddToStreamEx",
    "ceil",
    "ZwCreateSection",
    "LdrQueryProcessModuleInformation",
    "NtAccessCheckByTypeAndAuditAlarm",
    "_wcsset_s",
    "ZwOpenKeyedEvent",
    "RtlReleaseRelativeName",
    "ZwTerminateJobObject",
    "NtIsUILanguageComitted",
    "RtlExtendedIntegerMultiply",
    "NtNotifyChangeMultipleKeys",
    "RtlCopySecurityDescriptor",
    "ZwCreateNamedPipeFile",
    "NtCreateFile",
    "RtlDecodeSystemPointer",
    "NtEnumerateValueKey",
    "NtAlpcDeleteSectionView",
    "RtlPcToFileHeader",
    "RtlGetEnabledExtendedFeatures",
    "_strset_s",
    "RtlConvertExclusiveToShared",
    "_ltow_s",
    "RtlSelfRelativeToAbsoluteSD",
    "NtResetWriteWatch",
    "LdrGetProcedureAddress",
    "NtAddDriverEntry",
    "ZwRecoverEnlistment",
    "RtlCheckForOrphanedCriticalSections",
    "_ui64tow",
    "RtlEndWeakEnumerationHashTable",
    "RtlFindNextForwardRunClear",
    "_CIsin",
    "wcstol",
    "RtlInsertEntryHashTable",
    "RtlAreBitsSet",
    "NtRequestWaitReplyPort",
    "ZwPowerInformation",
    "NtWaitForDebugEvent",
    "RtlDeCommitDebugInfo",
    "ZwQueryBootOptions",
    "NtQuerySection",
    "RtlDeleteBoundaryDescriptor",
    "RtlNtStatusToDosErrorNoTeb",
    "RtlUnlockBootStatusData",
    "NtGetNextProcess",
    "RtlCloneMemoryStream",
    "WinSqmEventEnabled",
    "RtlDosPathNameToNtPathName_U",
    "NtOpenTransactionManager",
    "MD4Update",
    "ZwQueryInformationResourceManager",
    "strncpy",
    "RtlSetThreadPreferredUILanguages",
    "NtShutdownSystem",
    "CsrIdentifyAlertableThread",
    "_ltow",
    "NtWorkerFactoryWorkerReady",
    "ZwTerminateProcess",
    "RtlIpv6StringToAddressExA",
    "RtlZeroMemory",
    "NtGetDevicePowerState",
    "EtwWriteUMSecurityEvent",
    "RtlDosSearchPath_U",
    "RtlpEnsureBufferSize",
    "ZwFlushBuffersFile",
    "ZwQuerySystemTime",
    "RtlFindSetBitsAndClear",
    "ZwQueryDriverEntryOrder",
    "ZwAlpcImpersonateClientOfPort",
    "ZwReadFile",
    "EtwProcessPrivateLoggerRequest",
    "ZwWriteVirtualMemory",
    "NtWaitLowEventPair",
    "NtStopProfile",
    "RtlNormalizeProcessParams",
    "KiIntSystemCall",
    "RtlPrefixString",
    "TpDisassociateCallback",
    "RtlCreateAcl",
    "NtContinue",
    "RtlUnicodeStringToAnsiSize",
    "NtTraceControl",
    "NtCreateToken",
    "NtLoadKey",
    "NtRecoverEnlistment",
    "ZwLoadDriver",
    "RtlGetProcessPreferredUILanguages",
    "RtlNewSecurityObjectEx",
    "RtlDosPathNameToRelativeNtPathName_U",
    "RtlSleepConditionVariableCS",
    "ZwAlpcQueryInformation",
    "ZwCancelIoFileEx",
    "ZwFilterToken",
    "RtlWriteRegistryValue",
    "LdrOpenImageFileOptionsKey",
    "TpAllocTimer",
    "RtlSystemTimeToLocalTime",
    "RtlUnlockMemoryBlockLookaside",
    "NtCreateKeyTransacted",
    "RtlSizeHeap",
    "NtAllocateReserveObject",
    "RtlInitializeExtendedContext",
    "NtUnlockVirtualMemory",
    "ZwAllocateUuids",
    "RtlQueryProcessDebugInformation",
    "CsrVerifyRegion",
    "NtReleaseSemaphore",
    "RtlCreateUserSecurityObject",
    "NtAlpcOpenSenderProcess",
    "TpAllocAlpcCompletion",
    "RtlLookupEntryHashTable",
    "ZwUnlockFile",
    "RtlSetUnhandledExceptionFilter",
    "ZwSetDefaultHardErrorPort",
    "RtlQueryAtomInAtomTable",
    "_memicmp",
    "NtCompactKeys",
    "RtlUTF8ToUnicodeN",
    "RtlInitializeSListHead",
    "ZwAllocateUserPhysicalPages",
    "NtDeleteObjectAuditAlarm",
    "NtSetInformationToken",
    "LdrGetDllHandleEx",
    "vDbgPrintEx",
    "ZwUnloadDriver",
    "RtlCopyExtendedContext",
    "ZwDebugContinue",
    "ZwFreezeRegistry",
    "NtCancelSynchronousIoFile",
    "NtAlpcSetInformation",
    "RtlFindClearBits",
    "RtlQueueApcWow64Thread",
    "ZwCallbackReturn",
    "RtlEnableEarlyCriticalSectionEventCreation",
    "ZwOpenSection",
    "RtlTraceDatabaseAdd",
    "NtCreateEvent",
    "RtlReportSilentProcessExit",
    "RtlLargeIntegerShiftLeft",
    "RtlIpv6StringToAddressA",
    "_itow_s",
    "RtlCreateMemoryZone",
    "strchr",
    "PfxFindPrefix",
    "RtlUnlockMemoryStreamRegion",
    "_i64tow_s",
    "ZwOpenEvent",
    "NtRegisterProtocolAddressInformation",
    "NtSetSystemTime",
    "RtlExtendedMagicDivide",
    "RtlGetExtendedFeaturesMask",
    "NtClearEvent",
    "RtlAddAttributeActionToRXact",
    "RtlAddRefMemoryStream",
    "ZwAccessCheckAndAuditAlarm",
    "ZwQueryInformationEnlistment",
    "RtlSetSecurityDescriptorRMControl",
    "NtQueryInformationTransactionManager",
    "RtlInsertElementGenericTableAvl",
    "ZwQueryDirectoryObject",
    "NtOpenEnlistment",
    "ZwIsSystemResumeAutomatic",
    "swprintf_s",
    "ZwDrawText",
    "LdrLoadAlternateResourceModuleEx",
    "RtlUnicodeToMultiByteSize",
    "NtAlpcRevokeSecurityContext",
    "ZwTraceEvent",
    "NtProtectVirtualMemory",
    "RtlGetUserInfoHeap",
    "ZwSetSystemTime",
    "TpWaitForAlpcCompletion",
    "ZwOpenProcess",
    "wcsncpy_s",
    "NtQueryValueKey",
    "NtReleaseWorkerFactoryWorker",
    "ZwAssignProcessToJobObject",
    "RtlActivateActivationContextUnsafeFast",
    "RtlTryAcquirePebLock",
    "ZwSetInformationWorkerFactory",
    "RtlBarrierForDelete",
    "NtAdjustGroupsToken",
    "EtwEventWriteFull",
    "RtlIpv4AddressToStringExW",
    "NtCreateTransactionManager",
    "RtlTraceDatabaseFind",
    "ZwInitiatePowerAction",
    "RtlEqualPrefixSid",
    "ZwQueryInstallUILanguage",
    "NtLockFile",
    "ZwCommitTransaction",
    "RtlQueryInformationActivationContext",
    "NtReadOnlyEnlistment",
    "NtAllocateLocallyUniqueId",
    "ZwPrepareEnlistment",
    "RtlTimeToTimeFields",
    "RtlGetCurrentPeb",
    "ZwCreateKey",
    "iswalpha",
    "RtlImageNtHeader",
    "RtlCopyMappedMemory",
    "ZwOpenProcessToken",
    "RtlDefaultNpAcl",
    "ZwQueryValueKey",
    "WinSqmSetString",
    "RtlGetLongestNtPathLength",
    "RtlCopyLuid",
    "wcscpy_s",
    "RtlInitializeConditionVariable",
    "RtlIsValidHandle",
    "LdrQueryImageFileExecutionOptions",
    "AlpcMaxAllowedMessageLength",
    "RtlLargeIntegerDivide",
    "strcpy_s",
    "ZwSetBootOptions",
    "RtlRealSuccessor",
    "ZwMakePermanentObject",
    "NtSetInformationTransaction",
    "NtDeleteBootEntry",
    "NtCreateProfile",
    "isupper",
    "RtlTraceDatabaseUnlock",
    "RtlTimeFieldsToTime",
    "RtlConvertLongToLargeInteger",
    "RtlInitializeGenericTableAvl",
    "ZwCreateSemaphore",
    "ZwQueryEvent",
    "_aullshr",
    "NtInitializeRegistry",
    "RtlFreeMemoryBlockLookaside",
    "ZwReadVirtualMemory",
    "RtlUnicodeStringToOemString",
    "ZwSetDebugFilterState",
    "ZwRegisterProtocolAddressInformation",
    "NtWaitForMultipleObjects",
    "NtCreatePrivateNamespace",
    "TpCallbackUnloadDllOnCompletion",
    "_splitpath_s",
    "LdrRscIsTypeExist",
    "NtSetInformationFile",
    "RtlCreateSecurityDescriptor",
    "RtlpMuiRegFreeRegistryInfo",
    "RtlIpv6AddressToStringW",
    "LdrUnloadDll",
    "DbgPrintReturnControlC",
    "NtAcceptConnectPort",
    "NtFlushWriteBuffer",
    "RtlGetNtProductType",
    "TpPostWork",
    "NtStartProfile",
    "ZwQueryDebugFilterState",
    "strpbrk",
    "RtlCaptureContext",
    "RtlEnumerateGenericTableWithoutSplaying",
    "ZwQueryInformationTransaction",
    "LdrFindResourceEx_U",
    "NtGetNextThread",
    "RtlCreateEnvironment",
    "RtlAddVectoredContinueHandler",
    "TpDbgDumpHeapUsage",
    "NtdllDefWindowProc_A",
    "ZwSetEventBoostPriority",
    "LdrSetMUICacheType",
    "RtlSetIoCompletionCallback",
    "RtlUpcaseUnicodeStringToAnsiString",
    "RtlDeregisterSecureMemoryCacheCallback",
    "NtSetLdtEntries",
    "RtlGetLastWin32Error",
    "RtlActivateActivationContextEx",
    "RtlIpv4StringToAddressA",
    "RtlUpdateClonedSRWLock",
    "NtSetInformationResourceManager",
    "NtQueryDefaultUILanguage",
    "ZwSetInformationTransactionManager",
    "DbgUiConnectToDbg",
    "NtSetDriverEntryOrder",
    "RtlRegisterThreadWithCsrss",
    "RtlConvertLCIDToString",
    "NtFilterToken",
    "RtlPrefixUnicodeString",
    "iswdigit",
    "strncmp",
    "RtlEnlargedIntegerMultiply",
    "ZwMapCMFModule",
    "ZwGetNextProcess",
    "ZwGetContextThread",
    "strspn",
    "RtlAddRefActivationContext",
    "WinSqmSetIfMaxDWORD",
    "ZwQueryVirtualMemory",
    "wcsncmp",
    "CsrFreeCaptureBuffer",
    "memchr",
    "RtlUnicodeToUTF8N",
    "TpSetPoolStackInformation",
    "ZwSaveKeyEx",
    "RtlKnownExceptionFilter",
    "ZwQuerySystemInformation",
    "RtlRestoreLastWin32Error",
    "ZwCreateProfileEx",
    "RtlEqualSid",
    "RtlCopyOutOfProcessMemoryStreamTo",
    "RtlIpv4AddressToStringExA",
    "ZwQuerySecurityObject",
    "abs",
    "NtOpenKeyEx",
    "RtlIsValidIndexHandle",
    "RtlpQueryDefaultUILanguage",
    "NtSignalAndWaitForSingleObject",
    "RtlUnicodeToOemN",
    "RtlInterlockedPushEntrySList",
    "towlower",
    "RtlInt64ToUnicodeString",
    "NtCreateIoCompletion",
    "TpWaitForIoCompletion",
    "EtwLogTraceEvent",
    "RtlOwnerAcesPresent",
    "RtlFlsAlloc",
    "LdrUnlockLoaderLock",
    "TpAllocAlpcCompletionEx",
    "RtlInitializeContext",
    "atan",
    "_allrem",
    "ZwRemoveProcessDebug",
    "wcscmp",
    "RtlInitializeGenericTable",
    "TpSetDefaultPoolMaxThreads",
    "NtRestoreKey",
    "NtQuerySystemInformationEx",
    "ZwUnloadKey",
    "NtReplyWaitReceivePortEx",
    "ZwSignalAndWaitForSingleObject",
    "ZwAlpcDisconnectPort",
    "ZwExtendSection",
    "NtCreateDirectoryObject",
    "RtlCharToInteger",
    "NtPrivilegedServiceAuditAlarm",
    "_vsnprintf"
  ],
  "ntdsapi.dll": [
    "DsBindWithSpnA",
    "DsGetSpnA",
    "DsFinishDemotionW",
    "DsFreeDomainControllerInfoA",
    "DsReplicaModifyA",
    "DsFreePasswordCredentials",
    "DsaopBindWithCred",
    "DsFreeSpnArrayA",
    "DsIsMangledDnA",
    "DsGetSpnW",
    "DsListRolesW",
    "DsaopUnBind",
    "DsBindW",
    "DsQuoteRdnValueW",
    "DsRemoveDsServerW",
    "DsListDomainsInSiteA",
    "DsQuerySitesFree",
    "DsInitDemotionW",
    "DsaopBindWithSpn",
    "DsReplicaSyncA",
    "DsCrackNamesW",
    "DsListServersForDomainInSiteA",
    "DsRemoveDsDomainA",
    "DsServerRegisterSpnA",
    "DsWriteAccountSpnA",
    "DsaopBind",
    "DsReplicaUpdateRefsA",
    "DsGetDomainControllerInfoW",
    "DsFreeDomainControllerInfoW",
    "DsBindWithSpnExA",
    "DsCrackUnquotedMangledRdnA",
    "DsBindA",
    "DsMakePasswordCredentialsA",
    "DsMakeSpnW",
    "DsIsMangledRdnValueA",
    "DsListInfoForServerW",
    "DsQuoteRdnValueA",
    "DsReplicaGetInfo2W",
    "DsCrackSpnA",
    "DsReplicaDelA",
    "DsListRolesA",
    "DsReplicaModifyW",
    "DsClientMakeSpnForTargetServerW",
    "DsCrackSpn2W",
    "DsMapSchemaGuidsA",
    "DsaopExecuteScript",
    "DsReplicaConsistencyCheck",
    "DsBindingSetTimeout",
    "DsAddSidHistoryA",
    "DsCrackSpn2A",
    "DsGetDomainControllerInfoA",
    "DsFreeSchemaGuidMapW",
    "DsRemoveDsDomainW",
    "DsReplicaAddA",
    "DsInheritSecurityIdentityA",
    "DsReplicaSyncAllA",
    "DsGetRdnW",
    "DsWriteAccountSpnW",
    "DsListInfoForServerA",
    "DsInheritSecurityIdentityW",
    "DsListServersInSiteW",
    "DsMakePasswordCredentialsW",
    "DsAddSidHistoryW",
    "DsUnquoteRdnValueW",
    "DsReplicaSyncW",
    "DsReplicaDelW",
    "DsReplicaSyncAllW",
    "DsBindToISTGW",
    "DsReplicaAddW",
    "DsUnBindA",
    "DsQuerySitesByCostA",
    "DsListServersForDomainInSiteW",
    "DsaopPrepareScript",
    "DsClientMakeSpnForTargetServerA",
    "DsReplicaGetInfoW",
    "DsUnquoteRdnValueA",
    "DsRemoveDsServerA",
    "DsCrackSpn3W",
    "DsListSitesA",
    "DsLogEntry",
    "DsReplicaVerifyObjectsA",
    "DsIsMangledDnW",
    "DsBindWithSpnExW",
    "DsCrackUnquotedMangledRdnW",
    "DsReplicaDemotionW",
    "DsBindByInstanceA",
    "DsBindWithCredA",
    "DsUnBindW",
    "DsListDomainsInSiteW",
    "DsServerRegisterSpnW",
    "DsBindByInstanceW",
    "DsCrackNamesA",
    "DsMapSchemaGuidsW",
    "DsGetBindInstGuid",
    "DsReplicaVerifyObjectsW",
    "DsReplicaUpdateRefsW",
    "DsFreeSchemaGuidMapA",
    "DsBindWithSpnW",
    "DsListSitesW",
    "DsBindWithCredW",
    "DsBindToISTGA",
    "DsCrackSpnW",
    "DsFreeNameResultA",
    "DsQuerySitesByCostW",
    "DsIsMangledRdnValueW",
    "DsMakeSpnA",
    "DsReplicaFreeInfo",
    "DsGetBindAddrW",
    "DsFreeNameResultW",
    "DsListServersInSiteA",
    "DsFreeSpnArrayW",
    "DsGetBindAnnotW",
    "DsCrackSpn4W"
  ],
  "ntlanman.dll": [
    "NPGetConnection",
    "NPGetReconnectFlags",
    "NPGetCaps",
    "DllMain",
    "NPCancelConnection",
    "NPFormatNetworkName",
    "NPGetResourceParent",
    "NPAddConnection3",
    "I_SystemFocusDialog",
    "NPCloseEnum",
    "NPGetConnection3",
    "NPGetUniversalName",
    "NPAddConnection",
    "NPGetConnectionPerformance",
    "NPEnumResource",
    "NPGetResourceInformation",
    "NPOpenEnum",
    "NPGetUser"
  ],
  "ntlanui2.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "ntmarta.dll": [
    "AccProvGetOperationResults",
    "AccProvGetTrusteesAccess",
    "AccConvertAccessMaskToActrlAccess",
    "AccProvRevokeAccessRights",
    "AccRewriteSetNamedRights",
    "GetMartaExtensionInterface",
    "AccProvHandleSetAccessRights",
    "AccProvIsAccessAudited",
    "AccProvCancelOperation",
    "AccProvGetAccessInfoPerObjectType",
    "AccConvertAccessToSD",
    "AccProvGetAllRights",
    "AccRewriteGetHandleRights",
    "AccGetAccessForTrustee",
    "AccLookupAccountName",
    "AccConvertSDToAccess",
    "AccLookupAccountTrustee",
    "EventNameFree",
    "AccProvSetAccessRights",
    "AccFreeIndexArray",
    "AccConvertAccessToSecurityDescriptor",
    "AccLookupAccountSid",
    "AccRewriteGetExplicitEntriesFromAcl",
    "AccProvGetCapabilities",
    "AccTreeResetNamedSecurityInfo",
    "AccConvertAclToAccess",
    "AccSetEntriesInAList",
    "AccRewriteSetHandleRights",
    "AccProvHandleGetAllRights",
    "AccProvHandleGetAccessInfoPerObjectType",
    "AccGetInheritanceSource",
    "AccProvHandleIsObjectAccessible",
    "AccGetExplicitEntries",
    "AccProvHandleRevokeAuditRights",
    "AccProvHandleIsAccessAudited",
    "AccProvHandleGrantAccessRights",
    "AccProvRevokeAuditRights",
    "AccRewriteGetNamedRights",
    "AccProvIsObjectAccessible",
    "AccProvGrantAccessRights",
    "AccProvHandleRevokeAccessRights",
    "AccProvHandleGetTrusteesAccess",
    "EventGuidToName",
    "AccRewriteSetEntriesInAcl"
  ],
  "ntprint.dll": [
    "PSetupBuildDriversFromPath",
    "PSetupShowBlockedDriverUI",
    "PSetupDisassociateICMProfiles",
    "PSetupGetCatalogNameFromInfW",
    "PSetupIsTheDriverFoundInInfInstalled",
    "PSetupCalculatePnPId",
    "PSetupParseInfAndCommitFileQueue",
    "PSetupDestroyDriverInfo3",
    "PSetupFindCompatibleDriverFromName",
    "PSetupElevateAndCallDriverStoreAddDriverPackage",
    "PSetupDestroySelectedDriverInfo",
    "ServerInstallW",
    "PSetupCopyDriverPackageFiles",
    "PSetupDestroyMonitorInfo",
    "PSetupInstallInboxDriverSilently",
    "PSetupSelectDeviceButtons",
    "PSetupCreateDrvSetupPage",
    "PSetupSetNonInteractiveMode",
    "PSetupDownloadAndInstallLegacyDriverW",
    "PSetupInstallMonitor",
    "PSetupIsDriverInstalled",
    "PSetupElevatedInstallPrinterDriverFromTheWebW",
    "PSetupInstallPrinterDriver",
    "PSetupElevatedLegacyPrintDriverInstallW",
    "PSetupEnumMonitor",
    "PSetupSelectDriver",
    "PSetupCreatePrinterDeviceInfoList",
    "PSetupFreeMem",
    "PSetupGetSelectedDriverInfo",
    "PSetupBuildDriverList",
    "PSetupCreateMonitorInfo",
    "PSetupDriverInfoFromDeviceID",
    "PSetupDriverStoreFindDriverPackageW",
    "PSetupDriverStoreAddDriverPackage",
    "PSetupCheckForDriversInDriverStore",
    "PSetupIsCompatibleDriver",
    "PSetupSetSelectDevTitleAndInstructions",
    "PSetupInstallICMProfiles",
    "PSetupElevatedInstallDownloadedLegacyDriverW",
    "PSetupGetLocalDataField",
    "PSetupDriverInfoFromName",
    "ClassInstall32",
    "PSetupPreSelectDriver",
    "PSetupWebPnpGenerateDownLevelInfForInboxDriver",
    "PSetupGetActualInstallSection",
    "PSetupSetCoreInboxDriverPath",
    "PSetupThisPlatform",
    "PSetupDestroyPrinterDeviceInfoList",
    "PSetupElevatedDriverStoreAddDriverPackageW",
    "PSetupAssociateICMProfiles",
    "PSetupGetDriverInfo3",
    "PSetupSetDriverPlatform",
    "PSetupFreeDrvField",
    "PSetupProcessPrinterAdded",
    "PSetupGetInfDriverStoreLocation",
    "PSetupGetPathToSearch"
  ],
  "ntshrui.dll": [
    "IsPathSharedW",
    "IsFolderPrivateForUser",
    "GetNetResourceFromLocalPath",
    "GetNetResourceFromLocalPathA",
    "IsPathSharedA",
    "DllCanUnloadNow",
    "GetNetResourceFromLocalPathW",
    "SetFolderPermissionsForSharing",
    "GetLocalPathFromNetResourceA",
    "GetLocalPathFromNetResource",
    "DllGetClassObject",
    "ShowShareFolderUI",
    "GetLocalPathFromNetResourceW",
    "CanShareFolder",
    "IsPathShared"
  ],
  "ntvdmd.dll": [
    "xxxDbgDispatch",
    "xxxDbgBPInt",
    "xxxDbgTraceEvent",
    "xxxDbgSegmentNotice",
    "xxxDbgTraceInt",
    "xxxDbgInit",
    "xxxDbgIsDebuggee",
    "xxxDbgNotifyNewTask",
    "xxxDbgDosAppStart",
    "xxxDbgNotifyDebugged",
    "xxxDbgNotifyRemoteThreadAddress",
    "xxxDbgFault"
  ],
  "OnLineIDCpl.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "OobeFldr.dll": [
    "ShowWelcomeCenter",
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "OpcServices.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "objsel.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "occache.dll": [
    "FindFirstControl",
    "RemoveControlByHandle",
    "FindControlClose",
    "FindNextControl",
    "DllCanUnloadNow",
    "GetControlInfo",
    "RemoveControlByHandle2",
    "RemoveControlByName2",
    "GetControlDependentFile",
    "DllGetClassObject",
    "IsModuleRemovable",
    "RemoveExpiredControls",
    "ReleaseControlHandle",
    "RemoveControlByName",
    "SweepControlsByLastAccessDate"
  ],
  "ocsetapi.dll": [
    "CopyMspFilesToSystemMsiCache",
    "RemoveMspFilesFromSystemMsiCache"
  ],
  "odbc32.dll": [
    "SQLDataSources",
    "SQLDisconnect",
    "PostODBCComponentError",
    "SQLBindCol",
    "SQLGetConnectAttrW",
    "SQLConnectA",
    "SQLFreeEnv",
    "SQLGetTypeInfo",
    "SQLCancelHandle",
    "SQLSetConnectOptionW",
    "SQLBrowseConnect",
    "SQLGetDescRecA",
    "SQLGetConnectOptionA",
    "SQLProcedureColumnsA",
    "SQLStatistics",
    "SQLGetDescField",
    "SQLSetCursorNameW",
    "PostComponentError",
    "SQLSetCursorNameA",
    "SQLSetStmtAttrW",
    "SQLAllocStmt",
    "SQLDescribeColW",
    "SQLFreeConnect",
    "SQLGetInfoA",
    "SQLBindParam",
    "SQLGetDiagRecA",
    "SQLSetConnectAttrA",
    "SQLSetParam",
    "SQLGetStmtAttr",
    "SQLDriversW",
    "SQLColumnPrivileges",
    "SQLMoreResults",
    "SQLGetDiagFieldW",
    "SQLForeignKeysA",
    "SQLGetDiagRecW",
    "SQLStatisticsW",
    "ODBCGetTryWaitValue",
    "SQLGetTypeInfoW",
    "SQLTransact",
    "SQLGetConnectAttr",
    "SQLGetInfo",
    "SQLGetDiagField",
    "SQLSpecialColumnsW",
    "SQLNativeSqlW",
    "SQLCloseCursor",
    "CursorLibTransact",
    "OpenODBCPerfData",
    "SQLGetStmtAttrW",
    "SQLPrimaryKeys",
    "SQLPutData",
    "SQLGetInfoW",
    "SQLColAttribute",
    "SQLSetConnectOption",
    "SQLTablesW",
    "SQLRowCount",
    "SQLExecute",
    "SQLNativeSqlA",
    "SQLGetDescFieldW",
    "SQLGetDiagRec",
    "SQLFreeStmt",
    "SQLDrivers",
    "SQLProcedureColumnsW",
    "SQLProceduresW",
    "SQLSpecialColumns",
    "SearchStatusCode",
    "VRetrieveDriverErrorsRowCol",
    "SQLGetCursorNameA",
    "SQLDriversA",
    "SQLSetEnvAttr",
    "SQLColAttributes",
    "SQLProcedures",
    "SQLForeignKeys",
    "SQLNumParams",
    "SQLGetFunctions",
    "SQLColumnsW",
    "SQLBulkOperations",
    "SQLColAttributeW",
    "SQLFetchScroll",
    "SQLExecDirectA",
    "ODBCInternalConnectW",
    "SQLAllocHandle",
    "SQLCancel",
    "SQLBrowseConnectW",
    "SQLError",
    "SQLDataSourcesW",
    "SQLPrimaryKeysW",
    "VFreeErrors",
    "SQLDescribeParam",
    "SQLPrimaryKeysA",
    "SQLConnectW",
    "SQLParamOptions",
    "SQLColAttributesW",
    "SQLSetStmtOption",
    "SQLPrepare",
    "ODBCSetTryWaitValue",
    "SQLTablePrivilegesA",
    "SQLAllocEnv",
    "CloseODBCPerfData",
    "SQLErrorA",
    "SQLProceduresA",
    "SQLSetDescRec",
    "SQLBrowseConnectA",
    "SQLColumns",
    "CursorLibLockDesc",
    "SQLGetDiagFieldA",
    "SQLColAttributeA",
    "SQLExecDirect",
    "SQLNumResultCols",
    "SQLExtendedFetch",
    "GetODBCSharedData",
    "CollectODBCPerfData",
    "LockHandle",
    "SQLSetDescFieldW",
    "SQLFetch",
    "CursorLibLockDbc",
    "SQLBindParameter",
    "SQLColAttributesA",
    "SQLForeignKeysW",
    "SQLSetPos",
    "ValidateErrorQueue",
    "SQLSetDescField",
    "SQLGetTypeInfoA",
    "SQLPrepareA",
    "SQLSetDescFieldA",
    "DllBidEntryPoint",
    "PostODBCError",
    "SQLGetDescFieldA",
    "SQLEndTran",
    "SQLStatisticsA",
    "SQLColumnPrivilegesW",
    "SQLGetCursorName",
    "SQLErrorW",
    "SQLGetData",
    "SQLGetStmtOption",
    "SQLSetConnectAttr",
    "CursorLibLockStmt",
    "SQLFreeHandle",
    "SQLColumnPrivilegesA",
    "SQLDescribeCol",
    "SQLDriverConnect",
    "SQLExecDirectW",
    "SQLGetCursorNameW",
    "SQLGetStmtAttrA",
    "SQLTables",
    "SQLDriverConnectA",
    "SQLColumnsA",
    "g_hHeapMalloc",
    "SQLAllocConnect",
    "SQLGetConnectAttrA",
    "SQLGetDescRec",
    "SQLGetEnvAttr",
    "SQLDriverConnectW",
    "SQLNativeSql",
    "SQLDataSourcesA",
    "SQLProcedureColumns",
    "SQLGetConnectOption",
    "SQLParamData",
    "SQLTablePrivileges",
    "SQLSetStmtAttrA",
    "SQLSpecialColumnsA",
    "SQLAllocHandleStd",
    "SQLPrepareW",
    "SQLDescribeColA",
    "SQLSetScrollOptions",
    "SQLTablesA",
    "SQLGetDescRecW",
    "SQLCopyDesc",
    "SQLSetStmtAttr",
    "SQLConnect",
    "SQLTablePrivilegesW",
    "SQLSetConnectAttrW",
    "ODBCQualifyFileDSNW",
    "SQLGetConnectOptionW",
    "SQLSetCursorName",
    "SQLSetConnectOptionA"
  ],
  "odbc32gt.dll": [
    "Dispatch",
    "Dispatch2"
  ],
  "odbcbcp.dll": [
    "SQLGetNextEnumeration",
    "bcp_setcolfmt",
    "bcp_writefmtA",
    "SQLLinkedServers",
    "bcp_batch",
    "bcp_readfmtA",
    "bcp_writefmtW",
    "bcp_readfmtW",
    "SQLCloseEnumServers",
    "bcp_sendrow",
    "SQLLinkedCatalogsW",
    "bcp_colptr",
    "bcp_moretext",
    "LibMain",
    "bcp_columns",
    "SQLLinkedCatalogsA",
    "bcp_collen",
    "bcp_control",
    "bcp_getcolfmt",
    "bcp_done",
    "bcp_exec",
    "dbprtypeA",
    "bcp_colfmt",
    "bcp_initA",
    "SQLInitEnumServers",
    "dbprtypeW",
    "bcp_bind",
    "bcp_initW"
  ],
  "odbcconf.dll": [
    "DllRegisterServer",
    "AppRegEnum",
    "CloseAppRegEnum",
    "RegisterApplication",
    "DllUnregisterServer",
    "OpenAppRegEnum",
    "SetActionLogFile",
    "SetActionLogModeSz",
    "QueryApplication",
    "RefreshAppRegEnum",
    "RunDLL32_RegisterApplication",
    "RunDLL32_UnregisterApplication",
    "ExecuteAction",
    "SetSilent",
    "SetActionLogMode",
    "DllCanUnloadNow",
    "SetActionName",
    "UnregisterApplication",
    "DllGetClassObject",
    "SetActionEnum"
  ],
  "odbccp32.dll": [
    "SQLGetInstalledDrivers",
    "SQLWriteDSNToIniW",
    "SQLGetConfigMode",
    "ODBCCPlApplet",
    "SQLGetAvailableDriversW",
    "SQLInstallODBCW",
    "SQLInstallTranslator",
    "SQLInstallerErrorW",
    "SQLGetPrivateProfileString",
    "SQLInstallDriverEx",
    "SQLCreateDataSource",
    "SQLReadFileDSN",
    "SQLGetTranslatorW",
    "SQLWritePrivateProfileStringW",
    "SQLInstallODBC",
    "SQLCreateDataSourceEx",
    "SQLInstallDriverManagerW",
    "SQLConfigDriverW",
    "SQLGetPrivateProfileStringW",
    "SQLReadFileDSNW",
    "SQLPostInstallerErrorW",
    "SQLRemoveDriverW",
    "SQLConfigDriver",
    "SQLWritePrivateProfileString",
    "SQLConfigDataSource",
    "SQLRemoveDefaultDataSource",
    "SQLRemoveDriverManager",
    "SQLRemoveDSNFromIni",
    "SQLRemoveTranslatorW",
    "SQLCreateDataSourceExW",
    "SQLInstallTranslatorEx",
    "SQLInstallerError",
    "SQLLoadDriverListBox",
    "SQLCreateDataSourceW",
    "SQLWriteDSNToIni",
    "SQLInstallTranslatorW",
    "SQLLoadDataSourcesListBox",
    "SQLManageDataSources",
    "SQLPostInstallerError",
    "SQLValidDSNW",
    "SQLWriteFileDSNW",
    "SQLInstallDriver",
    "SQLGetTranslator",
    "SQLInstallDriverExW",
    "SQLSetConfigMode",
    "SelectTransDlg",
    "SQLGetInstalledDriversW",
    "SQLInstallTranslatorExW",
    "SQLConfigDataSourceW",
    "SQLRemoveDriver",
    "SQLGetAvailableDrivers",
    "SQLInstallDriverManager",
    "SQLRemoveDSNFromIniW",
    "SQLInstallDriverW",
    "SQLRemoveTranslator",
    "SQLValidDSN",
    "SQLWriteFileDSN"
  ],
  "odbccr32.dll": [
    "SQLParamOptions",
    "SQLSetConnectOption",
    "SQLBindCol",
    "SQLRowCount",
    "SQLExecute",
    "SQLSetStmtOption",
    "SQLFreeStmt",
    "ReleaseCLStmtResources",
    "SQLPrepare",
    "SQLGetDescField",
    "SQLSetDescRec",
    "SQLGetDescRec",
    "SQLNativeSql",
    "SQLNumParams",
    "SQLExecDirect",
    "SQLExtendedFetch",
    "SQLParamData",
    "SQLFetch",
    "SQLBindParameter",
    "SQLBulkOperations",
    "SQLGetStmtAttr",
    "SQLSetPos",
    "SQLFetchScroll",
    "SQLSetDescField",
    "SQLSetScrollOptions",
    "SQLMoreResults",
    "SQLCancel",
    "SQLEndTran",
    "SQLSetStmtAttr",
    "SQLTransact",
    "SQLGetInfo",
    "SQLGetData",
    "SQLGetStmtOption",
    "SQLCloseCursor",
    "SQLPutData",
    "SQLSetConnectAttr",
    "SQLFreeHandle"
  ],
  "odbccu32.dll": [
    "SQLParamOptions",
    "SQLSetConnectOption",
    "SQLBindCol",
    "SQLRowCount",
    "SQLExecute",
    "SQLSetStmtOption",
    "SQLFreeStmt",
    "ReleaseCLStmtResources",
    "SQLPrepare",
    "SQLGetDescField",
    "SQLSetDescRec",
    "SQLGetDescRec",
    "SQLNativeSql",
    "SQLNumParams",
    "SQLExecDirect",
    "SQLExtendedFetch",
    "SQLParamData",
    "SQLFetch",
    "SQLBindParameter",
    "SQLBulkOperations",
    "SQLGetStmtAttr",
    "SQLSetPos",
    "SQLFetchScroll",
    "SQLSetDescField",
    "SQLSetScrollOptions",
    "SQLMoreResults",
    "SQLCancel",
    "SQLEndTran",
    "SQLSetStmtAttr",
    "SQLTransact",
    "SQLGetInfo",
    "SQLGetData",
    "SQLGetStmtOption",
    "SQLCloseCursor",
    "SQLPutData",
    "SQLSetConnectAttr",
    "SQLFreeHandle"
  ],
  "odbcint.dll": "No exports",
  "odbcji32.dll": [
    "DllMain",
    "IntlLibHinst"
  ],
  "odbcjt32.dll": [
    "SQLDisconnect",
    "AdvancedDialogProc",
    "SQLTablesW",
    "SQLBindCol",
    "SQLExecDirectW",
    "SQLExecute",
    "SQLGetConnectAttrW",
    "SQLGetCursorNameW",
    "SQLRowCount",
    "SQLGetDescFieldW",
    "SQLFreeEnv",
    "OpenDirHook",
    "InvisibleSelectDb",
    "LoadByOrdinal",
    "RepairCompactProc",
    "SQLFreeStmt",
    "SQLProcedureColumnsW",
    "SQLProceduresW",
    "SQLAllocConnect",
    "SQLSetEnvAttr",
    "SQLAllocEnv",
    "SQLSetCursorNameW",
    "SQLSetDescRec",
    "LoginDialogProc",
    "SQLDriverConnectW",
    "SQLSetStmtAttrW",
    "ConfigDialogProc",
    "SQLAllocStmt",
    "SQLDescribeColW",
    "SQLFreeConnect",
    "SQLNumParams",
    "SQLNumResultCols",
    "SQLExtendedFetch",
    "SelectIndexDlgProc",
    "ConfigDSNW",
    "SQLGetFunctions",
    "SQLParamData",
    "SQLSetDescFieldW",
    "ConfigDriverW",
    "DllMain",
    "SQLColumnsW",
    "SQLBindParameter",
    "SQLBulkOperations",
    "SQLColAttributeW",
    "SQLFetch",
    "SQLSetPos",
    "SQLFetchScroll",
    "SQLPrepareW",
    "SQLStatisticsW",
    "SQLSetScrollOptions",
    "SQLMoreResults",
    "SQLGetDiagFieldW",
    "SQLAllocHandle",
    "InitializeLoginDialog",
    "SQLGetDiagRecW",
    "SQLCancel",
    "ConfigDSNExW",
    "SQLGetDescRecW",
    "SQLEndTran",
    "SQLGetTypeInfoW",
    "SQLCopyDesc",
    "SQLSpecialColumnsW",
    "ConfigDSN",
    "SelectUIdxDlgProc",
    "SQLSetConnectAttrW",
    "SQLGetData",
    "SQLNativeSqlW",
    "SQLCloseCursor",
    "SQLPutData",
    "DefTxtFmtDlgProc",
    "SQLGetStmtAttrW",
    "SQLFreeHandle",
    "SQLGetInfoW",
    "SQLConnectW",
    "InitDialogAgain"
  ],
  "odbctrac.dll": [
    "TraceSQLBindParameter",
    "TraceSQLDataSources",
    "TraceSQLAllocHandle",
    "TraceSQLEndTran",
    "TraceSQLFreeConnect",
    "TraceSQLNumParams",
    "TraceSQLGetDescRec",
    "TraceSQLGetData",
    "TraceSQLErrorW",
    "TraceSQLSetStmtAttr",
    "TraceSQLGetCursorNameW",
    "TraceSQLGetDiagFieldW",
    "TraceSQLExecDirectW",
    "TraceSQLStatisticsW",
    "TraceSQLConnect",
    "TraceSQLNumResultCols",
    "TraceSQLColumnsW",
    "TraceSQLExecDirect",
    "TraceSQLColAttribute",
    "TraceSQLFetch",
    "TraceSQLSetDescField",
    "TraceSQLPrepareW",
    "TraceSQLGetCursorName",
    "TraceSQLProcedureColumns",
    "TraceSQLColAttributes",
    "TraceCloseLogFile",
    "TraceSQLForeignKeysW",
    "TraceSQLGetTypeInfo",
    "TraceSQLCopyDesc",
    "FireVSDebugEvent",
    "TraceSQLSetConnectOption",
    "TraceSQLFreeStmt",
    "TraceSQLConnectW",
    "TraceSQLSetParam",
    "TraceSQLGetConnectOption",
    "TraceSQLSpecialColumnsW",
    "TraceSQLProceduresW",
    "TraceVersion",
    "TraceSQLGetDiagRecW",
    "TraceSQLGetStmtAttrW",
    "TraceSQLMoreResults",
    "TraceSQLCancelHandle",
    "TraceSQLGetDescFieldW",
    "TraceSQLAllocHandleStd",
    "TraceSQLDriversW",
    "TraceSQLColumnPrivilegesW",
    "TraceSQLRowCount",
    "TraceSQLGetDescRecW",
    "TraceSQLGetInfoW",
    "TraceSQLAllocStmt",
    "TraceSQLGetConnectAttr",
    "TraceSQLGetDiagField",
    "TraceSQLDriverConnectW",
    "TraceSQLForeignKeys",
    "TraceSQLGetDescField",
    "TraceSQLGetStmtOption",
    "TraceSQLAllocHandleStdW",
    "TraceSQLParamData",
    "TraceSQLDescribeCol",
    "TraceSQLStatistics",
    "TraceSQLPutData",
    "TraceSQLNativeSqlW",
    "TraceSQLGetEnvAttr",
    "TraceSQLParamOptions",
    "TraceSQLTablePrivilegesW",
    "TraceSQLSetStmtOption",
    "TraceSQLSpecialColumns",
    "TraceSQLGetConnectOptionW",
    "TraceSQLBrowseConnect",
    "TraceSQLGetInfo",
    "TraceSQLSetCursorName",
    "TraceSQLNativeSql",
    "TraceVSControl",
    "TraceSQLAllocConnect",
    "TraceReturn",
    "TraceSQLTables",
    "TraceSQLSetStmtAttrW",
    "TraceSQLSetScrollOptions",
    "TraceSQLBindParam",
    "TraceSQLTransact",
    "TraceSQLPrimaryKeys",
    "TraceSQLColumns",
    "TraceSQLGetDiagRec",
    "TraceSQLDisconnect",
    "TraceSQLDescribeColW",
    "TraceSQLBulkOperations",
    "TraceSQLColAttributeW",
    "TraceSQLSetConnectOptionW",
    "TraceSQLGetFunctions",
    "TraceSQLColAttributesW",
    "TraceSQLFreeEnv",
    "TraceSQLExecute",
    "TraceSQLSetEnvAttr",
    "TraceSQLProcedures",
    "TraceSQLFetchScroll",
    "TraceSQLCancel",
    "TraceSQLColumnPrivileges",
    "TraceSQLProcedureColumnsW",
    "TraceSQLPrimaryKeysW",
    "TraceSQLGetStmtAttr",
    "TraceSQLTablesW",
    "TraceSQLDescribeParam",
    "TraceSQLFreeHandle",
    "TraceSQLSetDescFieldW",
    "TraceSQLGetConnectAttrW",
    "TraceSQLError",
    "TraceSQLBrowseConnectW",
    "TraceSQLSetDescRec",
    "TraceSQLExtendedFetch",
    "TraceSQLBindCol",
    "TraceSQLSetConnectAttr",
    "TraceSQLSetCursorNameW",
    "TraceSQLDataSourcesW",
    "TraceSQLDrivers",
    "TraceSQLAllocEnv",
    "TraceSQLTablePrivileges",
    "TraceSQLGetTypeInfoW",
    "TraceSQLPrepare",
    "TraceSQLCloseCursor",
    "TraceSQLSetConnectAttrW",
    "TraceSQLDriverConnect",
    "TraceSQLSetPos",
    "TraceOpenLogFile"
  ],
  "oddbse32.dll": [
    "ConfigDSNW"
  ],
  "odexl32.dll": [
    "ConfigDSNW"
  ],
  "odfox32.dll": [
    "ConfigDSNW"
  ],
  "odpdx32.dll": [
    "ConfigDSNW"
  ],
  "odtext32.dll": [
    "ConfigDSNW"
  ],
  "offfilt.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "ogldrv.dll": [
    "DrvCreateContext",
    "DrvReleaseContext",
    "DrvDescribeLayerPlane",
    "DrvCreateLayerContext",
    "DrvSwapBuffers",
    "DrvSetPixelFormat",
    "DrvRealizeLayerPalette",
    "DrvDescribePixelFormat",
    "DrvDeleteContext",
    "DrvShareLists",
    "DrvCopyContext",
    "DrvSetLayerPaletteEntries",
    "DrvValidateVersion",
    "DrvGetProcAddress",
    "DrvSwapLayerBuffers",
    "DrvSetContext",
    "DrvGetLayerPaletteEntries"
  ],
  "ole32.dll": [
    "CLIPFORMAT_UserFree",
    "GetDocumentBitStg",
    "HMETAFILE_UserUnmarshal",
    "NdrProxyForwardingFunction5",
    "ObjectStublessClient24",
    "OleCreateEx",
    "NdrProxyForwardingFunction14",
    "SNB_UserFree",
    "CoRegisterInitializeSpy",
    "CoGetStandardMarshal",
    "DcomChannelSetHResult",
    "CoGetStdMarshalEx",
    "CoIsOle1Class",
    "OleDoAutoConvert",
    "OleRegEnumVerbs",
    "ReadOleStg",
    "StringFromIID",
    "ComPs_NdrDllGetClassObject",
    "CreateDataCache",
    "DllDebugObjectRPCHook",
    "CoRevertToSelf",
    "StgOpenStorageOnHandle",
    "CoRegisterSurrogateEx",
    "HENHMETAFILE_UserSize",
    "HBITMAP_UserMarshal",
    "CoRegisterMallocSpy",
    "OleCreateFromDataEx",
    "NdrProxyForwardingFunction6",
    "NdrProxyForwardingFunction21",
    "SNB_UserSize",
    "OleConvertIStorageToOLESTREAM",
    "PropStgNameToFmtId",
    "CoCancelCall",
    "HGLOBAL_UserFree",
    "CoSetState",
    "HENHMETAFILE_UserUnmarshal",
    "NdrProxyForwardingFunction4",
    "CoCreateInstanceEx",
    "OleCreateMenuDescriptor",
    "CoFreeLibrary",
    "WdtpInterfacePointer_UserSize",
    "CoGetMalloc",
    "ObjectStublessClient9",
    "DoDragDrop",
    "PropSysFreeString",
    "OleCreateLinkToFile",
    "WdtpInterfacePointer_UserUnmarshal",
    "HACCEL_UserUnmarshal",
    "HRGN_UserUnmarshal",
    "ObjectStublessClient8",
    "OleQueryLinkFromData",
    "SNB_UserUnmarshal",
    "CreateBindCtx",
    "CoGetApartmentID",
    "OleConvertIStorageToOLESTREAMEx",
    "StringFromCLSID",
    "ReleaseStgMedium",
    "CoRegisterPSClsid",
    "HDC_UserUnmarshal",
    "HPALETTE_UserFree",
    "NdrOleInitializeExtension",
    "StgGetIFillLockBytesOnFile",
    "StgIsStorageFile",
    "CLSIDFromString",
    "OleCreateStaticFromData",
    "CoSuspendClassObjects",
    "WriteClassStm",
    "OleCreateFromFile",
    "CoSetCancelObject",
    "RegisterDragDrop",
    "CoGetCallContext",
    "UpdateProcessTracing",
    "NdrProxyForwardingFunction27",
    "OleFlushClipboard",
    "CoTaskMemFree",
    "CoVrfGetThreadState",
    "StgGetIFillLockBytesOnILockBytes",
    "STGMEDIUM_UserMarshal",
    "CoTaskMemAlloc",
    "StgOpenPropStg",
    "HBRUSH_UserSize",
    "OleCreateDefaultHandler",
    "IsEqualGUID",
    "ObjectStublessClient7",
    "ObjectStublessClient5",
    "STGMEDIUM_UserUnmarshal",
    "CoGetProcessIdentifier",
    "CoReleaseMarshalData",
    "CoTaskMemRealloc",
    "NdrProxyForwardingFunction9",
    "NdrProxyForwardingFunction10",
    "DllGetClassObjectWOW",
    "HDC_UserFree",
    "CoPushServiceDomain",
    "CoLockObjectExternal",
    "StgCreateStorageEx",
    "CoLoadLibrary",
    "HICON_UserMarshal",
    "OleCreateLinkToFileEx",
    "OleConvertOLESTREAMToIStorageEx",
    "HMETAFILEPICT_UserMarshal",
    "OleCreate",
    "StringFromGUID2",
    "OleConvertOLESTREAMToIStorage",
    "CreateClassMoniker",
    "NdrProxyForwardingFunction25",
    "ObjectStublessClient4",
    "NdrProxyForwardingFunction26",
    "NdrProxyForwardingFunction16",
    "CoFreeUnusedLibraries",
    "ComPs_NdrDllUnregisterProxy",
    "HRGN_UserMarshal",
    "ObjectStublessClient25",
    "STGMEDIUM_UserFree",
    "HMETAFILEPICT_UserSize",
    "NdrProxyForwardingFunction17",
    "ObjectStublessClient19",
    "HMETAFILE_UserMarshal",
    "OleSetAutoConvert",
    "BindMoniker",
    "ObjectStublessClient22",
    "HWND_UserFree",
    "ObjectStublessClient6",
    "HMETAFILEPICT_UserFree",
    "CoGetTreatAsClass",
    "CoRegisterMessageFilter",
    "CoRetireServer",
    "SetConvertStg",
    "StgOpenStorage",
    "GetHGlobalFromILockBytes",
    "CoCreateInstance",
    "CLIPFORMAT_UserUnmarshal",
    "OleUninitialize",
    "OleRun",
    "ObjectStublessClient23",
    "CoReactivateObject",
    "CoReleaseServerProcess",
    "PropVariantChangeType",
    "ObjectStublessClient26",
    "CoQueryReleaseObject",
    "CoCopyProxy",
    "NdrProxyForwardingFunction20",
    "SNB_UserMarshal",
    "GetHookInterface",
    "CoGetCurrentLogicalThreadId",
    "CoGetDefaultContext",
    "HBITMAP_UserUnmarshal",
    "STGMEDIUM_UserSize",
    "CoCreateGuid",
    "NdrProxyForwardingFunction23",
    "OleIsRunning",
    "OleCreateLink",
    "CoGetCurrentProcess",
    "FmtIdToPropStgName",
    "IsValidIid",
    "ObjectStublessClient11",
    "IsAccelerator",
    "UtConvertDvtd32toDvtd16",
    "CoGetCancelObject",
    "DllRegisterServer",
    "CoGetApartmentType",
    "HBRUSH_UserMarshal",
    "StgCreateDocfile",
    "HkOleRegisterObject",
    "ObjectStublessClient28",
    "OleNoteObjectVisible",
    "GetConvertStg",
    "ObjectStublessClient15",
    "ProgIDFromCLSID",
    "OleInitialize",
    "UtGetDvtd32Info",
    "CLIPFORMAT_UserMarshal",
    "CoGetContextToken",
    "HGLOBAL_UserUnmarshal",
    "CoGetComCatalog",
    "ObjectStublessClient18",
    "OleCreateLinkFromDataEx",
    "HGLOBAL_UserMarshal",
    "CoDisableCallCancellation",
    "StgOpenStorageOnILockBytes",
    "HENHMETAFILE_UserFree",
    "CreateStdProgressIndicator",
    "CoInitializeEx",
    "ReadFmtUserTypeStg",
    "PropVariantClear",
    "HDC_UserMarshal",
    "StgConvertPropertyToVariant",
    "NdrProxyForwardingFunction28",
    "HICON_UserUnmarshal",
    "NdrProxyForwardingFunction22",
    "MonikerRelativePathTo",
    "HBRUSH_UserUnmarshal",
    "ObjectStublessClient30",
    "HBRUSH_UserFree",
    "HPALETTE_UserMarshal",
    "PropVariantCopy",
    "MonikerCommonPrefixWith",
    "StgSetTimes",
    "HMENU_UserSize",
    "CoRevokeInitializeSpy",
    "CoAllowSetForegroundWindow",
    "OleIsCurrentClipboard",
    "ObjectStublessClient31",
    "MkParseDisplayName",
    "CoUnmarshalHresult",
    "CoInitializeWOW",
    "CLSIDFromProgID",
    "ReadClassStm",
    "NdrProxyForwardingFunction15",
    "UpdateDCOMSettings",
    "HPALETTE_UserSize",
    "CoRegisterClassObject",
    "HBITMAP_UserFree",
    "EnableHookObject",
    "CoGetInstanceFromFile",
    "OleGetClipboard",
    "OleGetIconOfFile",
    "CoFileTimeToDosDateTime",
    "CoFileTimeNow",
    "OpenOrCreateStream",
    "OleGetIconOfClass",
    "CoDisconnectContext",
    "CreateOleAdviseHolder",
    "CoInstall",
    "NdrProxyForwardingFunction11",
    "NdrProxyForwardingFunction3",
    "OleCreateFromFileEx",
    "OleSave",
    "SetDocumentBitStg",
    "CoGetInstanceFromIStorage",
    "IsValidPtrIn",
    "UtConvertDvtd16toDvtd32",
    "CoGetActivationState",
    "NdrProxyForwardingFunction7",
    "OleSaveToStream",
    "WriteClassStg",
    "StgConvertVariantToProperty",
    "CoFreeUnusedLibrariesEx",
    "CoGetPSClsid",
    "OleBuildVersion",
    "ObjectStublessClient13",
    "HRGN_UserSize",
    "NdrProxyForwardingFunction32",
    "CoUnmarshalInterface",
    "CreateItemMoniker",
    "ObjectStublessClient32",
    "ObjectStublessClient17",
    "NdrProxyForwardingFunction8",
    "CoImpersonateClient",
    "HMETAFILE_UserSize",
    "OleTranslateAccelerator",
    "CoGetObject",
    "ObjectStublessClient16",
    "OleLockRunning",
    "StgIsStorageILockBytes",
    "CreatePointerMoniker",
    "WdtpInterfacePointer_UserMarshal",
    "CoInvalidateRemoteMachineBindings",
    "HMENU_UserMarshal",
    "CreateFileMoniker",
    "NdrProxyForwardingFunction30",
    "CoGetObjectContext",
    "CreateDataAdviseHolder",
    "CoGetInterfaceAndReleaseStream",
    "SetErrorInfo",
    "OleRegGetMiscStatus",
    "CoAddRefServerProcess",
    "ObjectStublessClient12",
    "CoQueryClientBlanket",
    "HWND_UserSize",
    "PropSysAllocString",
    "OleCreateEmbeddingHelper",
    "CoIsHandlerConnected",
    "OleCreateLinkFromData",
    "CoUnloadingWOW",
    "StgPropertyLengthAsVariant",
    "CoRegisterSurrogate",
    "OleCreateLinkEx",
    "UtGetDvtd16Info",
    "HWND_UserUnmarshal",
    "ObjectStublessClient29",
    "ComPs_NdrDllRegisterProxy",
    "OleRegGetUserType",
    "NdrProxyForwardingFunction13",
    "CoGetModuleType",
    "CoVrfCheckThreadState",
    "OleSetClipboard",
    "CoMarshalInterThreadInterfaceInStream",
    "HRGN_UserFree",
    "CreateErrorInfo",
    "StgCreatePropStg",
    "HENHMETAFILE_UserMarshal",
    "HMETAFILE_UserFree",
    "HPALETTE_UserUnmarshal",
    "OleSetContainedObject",
    "CLSIDFromProgIDEx",
    "ObjectStublessClient10",
    "HWND_UserMarshal",
    "CreateStreamOnHGlobal",
    "ObjectStublessClient21",
    "CoCreateFreeThreadedMarshaler",
    "CoGetInterceptorFromTypeInfo",
    "HICON_UserSize",
    "OleSetMenuDescriptor",
    "CLIPFORMAT_UserSize",
    "OleQueryCreateFromData",
    "CoGetClassObject",
    "IIDFromString",
    "OleMetafilePictFromIconAndLabel",
    "CoGetCallerTID",
    "NdrProxyForwardingFunction12",
    "CoTreatAsClass",
    "HGLOBAL_UserSize",
    "CoGetInterceptor",
    "HICON_UserFree",
    "NdrProxyForwardingFunction24",
    "CoQueryAuthenticationServices",
    "CoRevokeClassObject",
    "GetHGlobalFromStream",
    "CoGetSystemSecurityPermissions",
    "OleRegEnumFormatEtc",
    "OleLoadFromStream",
    "CoFreeAllLibraries",
    "StgOpenStorageEx",
    "HACCEL_UserSize",
    "WriteFmtUserTypeStg",
    "FreePropVariantArray",
    "HBITMAP_UserSize",
    "GetErrorInfo",
    "HACCEL_UserFree",
    "CoBuildVersion",
    "ReadStringStream",
    "RevokeDragDrop",
    "CoSwitchCallContext",
    "StgCreatePropSetStg",
    "CreateGenericComposite",
    "WriteOleStg",
    "CoDosDateTimeToFileTime",
    "CreateILockBytesOnHGlobal",
    "NdrProxyForwardingFunction19",
    "CoUninitialize",
    "HDC_UserSize",
    "CoCreateObjectInContext",
    "OleDuplicateData",
    "OleCreateFromData",
    "CoRegisterChannelHook",
    "IsValidInterface",
    "DllGetClassObject",
    "NdrProxyForwardingFunction31",
    "CoTestCancel",
    "IsValidPtrOut",
    "NdrProxyForwardingFunction29",
    "CoRevokeMallocSpy",
    "OleInitializeWOW",
    "CLSIDFromOle1Class",
    "CoMarshalInterface",
    "CoGetClassVersion",
    "CoVrfReleaseThreadState",
    "HMENU_UserFree",
    "OleDestroyMenuDescriptor",
    "HACCEL_UserMarshal",
    "OleDraw",
    "CoGetCallState",
    "ComPs_NdrDllCanUnloadNow",
    "CoGetMarshalSizeMax",
    "CoInitialize",
    "GetClassFile",
    "ReadClassStg",
    "WriteStringStream",
    "CoPopServiceDomain",
    "CreateObjrefMoniker",
    "WdtpInterfacePointer_UserFree",
    "CoEnableCallCancellation",
    "ObjectStublessClient27",
    "ObjectStublessClient3",
    "HMENU_UserUnmarshal",
    "OleGetAutoConvert",
    "CoQueryProxyBlanket",
    "OleLoad",
    "GetRunningObjectTable",
    "CoWaitForMultipleHandles",
    "CoResumeClassObjects",
    "CoInitializeSecurity",
    "CoSetProxyBlanket",
    "ObjectStublessClient14",
    "StgCreateDocfileOnILockBytes",
    "NdrProxyForwardingFunction18",
    "StgOpenAsyncDocfileOnIFillLockBytes",
    "CoDeactivateObject",
    "CoDisconnectObject",
    "HMETAFILEPICT_UserUnmarshal",
    "CoMarshalHresult",
    "CreateAntiMoniker",
    "ObjectStublessClient20"
  ],
  "oleacc.dll": [
    "GetOleaccVersionInfo",
    "AccessibleObjectFromPoint",
    "GetRoleTextW",
    "DllRegisterServer",
    "LresultFromObject",
    "IID_IAccessible",
    "DllUnregisterServer",
    "WindowFromAccessibleObject",
    "LIBID_Accessibility",
    "AccessibleObjectFromWindow",
    "PropMgrClient_LookupProp",
    "AccessibleObjectFromEvent",
    "ObjectFromLresult",
    "AccessibleChildren",
    "CreateStdAccessibleProxyA",
    "GetRoleTextA",
    "GetStateTextA",
    "IID_IAccessibleHandler",
    "DllCanUnloadNow",
    "GetStateTextW",
    "GetProcessHandleFromHwnd",
    "CreateStdAccessibleObject",
    "DllGetClassObject",
    "CreateStdAccessibleProxyW"
  ],
  "oleacchooks.dll": "No exports",
  "oleaccrc.dll": "No exports",
  "oleaut32.dll": [
    "VarI1FromR8",
    "SafeArrayGetVartype",
    "OleSavePictureFile",
    "VarI8FromUI2",
    "VarBoolFromI2",
    "VarAbs",
    "VarCyFix",
    "VarUI2FromI1",
    "VarUI4FromUI2",
    "VarR4FromI1",
    "VarDateFromDisp",
    "GetVarConversionLocaleSetting",
    "VariantTimeToSystemTime",
    "VarUI1FromStr",
    "VarR4FromDec",
    "VarR8FromI2",
    "VarDateFromBool",
    "OleLoadPictureEx",
    "LoadTypeLibEx",
    "VarUI4FromDisp",
    "VarCySub",
    "VarI1FromStr",
    "VarR8FromDec",
    "VarI1FromI8",
    "VarInt",
    "VarCyFromI8",
    "VarBstrFromI2",
    "VectorFromBstr",
    "VarI4FromBool",
    "VarDateFromDec",
    "VarBstrFromDisp",
    "VarBoolFromR4",
    "VarBstrFromUI8",
    "VarBoolFromCy",
    "LPSAFEARRAY_Size",
    "RegisterActiveObject",
    "VarI2FromCy",
    "ClearCustData",
    "SafeArrayLock",
    "VarCyFromI2",
    "DispGetParam",
    "VarBoolFromDisp",
    "VarBstrFromBool",
    "OleLoadPictureFileEx",
    "VarUI8FromR8",
    "VarI1FromDate",
    "SafeArrayGetDim",
    "VarDiv",
    "VarI2FromI8",
    "VarCat",
    "VarAdd",
    "LPSAFEARRAY_Marshal",
    "VarUI8FromR4",
    "VarR8FromI1",
    "VarI4FromUI2",
    "VarUI2FromR4",
    "VarDecFix",
    "VarI2FromUI8",
    "VARIANT_UserUnmarshal",
    "VarUI1FromUI8",
    "VarR8FromI4",
    "VarI1FromDisp",
    "LHashValOfNameSysA",
    "VarBstrFromDec",
    "VarCyAdd",
    "VarDecCmpR8",
    "CreateDispTypeInfo",
    "SafeArrayCreateVector",
    "VariantChangeType",
    "VariantChangeTypeEx",
    "OleTranslateColor",
    "BstrFromVector",
    "BSTR_UserFree",
    "VarDateFromUdateEx",
    "VarCyFromR8",
    "VarUI8FromStr",
    "VarUI8FromBool",
    "VarBstrFromDate",
    "VarCyFromUI1",
    "VarR4FromStr",
    "VarUI1FromR4",
    "VarI2FromR8",
    "VarCyFromR4",
    "GetRecordInfoFromTypeInfo",
    "SafeArrayCreateEx",
    "SetVarConversionLocaleSetting",
    "CreateStdDispatch",
    "SafeArrayCreateVectorEx",
    "VarDateFromI4",
    "VarCyFromDec",
    "LPSAFEARRAY_UserUnmarshal",
    "OACleanup",
    "VarI4FromDisp",
    "SafeArrayAccessData",
    "VarCmp",
    "LoadTypeLib",
    "SysReAllocStringLen",
    "RevokeActiveObject",
    "VarDecFromI1",
    "VarUI2FromUI1",
    "VarAnd",
    "VarI4FromStr",
    "VarR4FromI4",
    "UnRegisterTypeLib",
    "VarUI2FromCy",
    "OleLoadPicturePath",
    "VarTokenizeFormatString",
    "VarUI2FromDec",
    "VarI2FromI4",
    "VarDecNeg",
    "VarPow",
    "VarDecFromI4",
    "VarR8FromDate",
    "VARIANT_UserFree",
    "OleLoadPicture",
    "VarUI8FromI1",
    "VarWeekdayName",
    "SafeArrayPtrOfIndex",
    "VarEqv",
    "VarBstrFromI4",
    "VarUdateFromDate",
    "VarUI1FromI1",
    "VarI1FromUI4",
    "VarBstrFromI1",
    "VarDecFromStr",
    "VarI8FromI2",
    "SafeArrayDestroyDescriptor",
    "SafeArrayRedim",
    "VarI4FromUI8",
    "VarR8FromR4",
    "VarBoolFromUI4",
    "VarUI1FromDisp",
    "DispCallFunc",
    "VarDateFromR8",
    "VarImp",
    "VarNot",
    "VarUI4FromR8",
    "VarCyMul",
    "VarR8FromBool",
    "VarUI4FromDate",
    "SafeArrayGetIID",
    "VarDecFromUI2",
    "SysAllocStringLen",
    "VarUI4FromBool",
    "VarR8Pow",
    "VarUI4FromDec",
    "VarDateFromCy",
    "VarBoolFromI4",
    "RegisterTypeLib",
    "VarUI1FromI8",
    "VarUI4FromI1",
    "SafeArrayGetElement",
    "VarUI1FromUI2",
    "VarCyFromI1",
    "LPSAFEARRAY_Unmarshal",
    "VarBstrFromCy",
    "VarI1FromR4",
    "VarI1FromDec",
    "VarI2FromR4",
    "VarUI4FromUI8",
    "VarUI1FromUI4",
    "SysAllocStringByteLen",
    "VarDateFromI8",
    "VarI8FromDec",
    "VarDateFromUI1",
    "VarI8FromBool",
    "VarNumFromParseNum",
    "VarUI4FromI4",
    "VarI2FromBool",
    "VarCyFromStr",
    "VarUI4FromI2",
    "VarCyFromUI4",
    "VarI1FromI2",
    "OaBuildVersion",
    "VarUI2FromDate",
    "VarCyFromI4",
    "VariantCopy",
    "SafeArrayAllocDescriptor",
    "DispInvoke",
    "DllRegisterServer",
    "VARIANT_UserSize",
    "VarBoolFromDate",
    "VarUI1FromDec",
    "VarDecFromDate",
    "VarUI8FromUI1",
    "LHashValOfNameSys",
    "SysFreeString",
    "VarBoolFromUI2",
    "BSTR_UserSize",
    "VarI2FromDisp",
    "VarR8FromUI1",
    "VarUI4FromI8",
    "SafeArrayGetLBound",
    "VarUI2FromUI8",
    "VarFormatDateTime",
    "OleCreatePropertyFrameIndirect",
    "VarCyFromDate",
    "VarUI1FromCy",
    "VarR4FromUI2",
    "VarUI8FromDate",
    "VarI4FromDate",
    "VarDateFromUdate",
    "VarBstrFromUI2",
    "VarI1FromI4",
    "VarDecAbs",
    "VarCyAbs",
    "VarR4FromI2",
    "VarDecFromBool",
    "VarI8FromDisp",
    "VarUI2FromR8",
    "BSTR_UserMarshal",
    "SafeArrayDestroy",
    "VarUI8FromDec",
    "VarI8FromUI8",
    "RegisterTypeLibForUser",
    "BSTR_UserUnmarshal",
    "VarDecFromI2",
    "VarR4FromR8",
    "VarBstrFromUI4",
    "VarSub",
    "VarI2FromUI2",
    "VariantCopyInd",
    "VarR8Round",
    "SetOaNoCache",
    "VarBstrFromR4",
    "VarDecFromUI8",
    "VarI2FromUI1",
    "SafeArrayGetUBound",
    "VarR4FromBool",
    "LPSAFEARRAY_UserMarshal",
    "VarUI8FromCy",
    "SafeArrayPutElement",
    "OACreateTypeLib2",
    "VarI2FromDec",
    "VarDecMul",
    "VarBoolFromUI1",
    "DispGetIDsOfNames",
    "OaEnablePerUserTLibRegistration",
    "VarUI2FromStr",
    "VarMod",
    "VariantInit",
    "VarDecFromCy",
    "VarUI1FromR8",
    "SafeArrayCopyData",
    "VarUI4FromUI1",
    "VarI4FromUI1",
    "DllCanUnloadNow",
    "CreateTypeLib",
    "SafeArrayAllocDescriptorEx",
    "OleLoadPictureFile",
    "VarDecFromDisp",
    "VarCyFromUI8",
    "VarMul",
    "VarI8FromR8",
    "LPSAFEARRAY_UserFree",
    "VarUI8FromI8",
    "SysStringByteLen",
    "VarDecFromUI1",
    "VarDecDiv",
    "VarUI1FromBool",
    "VarI4FromI1",
    "VarDecSub",
    "LoadRegTypeLib",
    "VarCyRound",
    "VarR8FromDisp",
    "VarUI1FromI2",
    "VarUI2FromI4",
    "SetErrorInfo",
    "VarR4FromDate",
    "SafeArrayGetElemsize",
    "VarI4FromCy",
    "VarUI8FromDisp",
    "VarUI1FromI4",
    "SysStringLen",
    "VarI4FromR8",
    "VarBstrCat",
    "VarUI2FromDisp",
    "OleIconToCursor",
    "OleCreatePropertyFrame",
    "VarR8FromUI4",
    "VarUI1FromDate",
    "SafeArrayDestroyData",
    "SafeArraySetRecordInfo",
    "VarDecRound",
    "VarI4FromDec",
    "VarR8FromUI8",
    "VarI8FromCy",
    "VarParseNumFromStr",
    "CreateErrorInfo",
    "VarDecFromR4",
    "SafeArrayUnlock",
    "VarDecFromR8",
    "VarDecFromI8",
    "VarCyFromDisp",
    "CreateTypeLib2",
    "SafeArrayAllocData",
    "VarDecAdd",
    "VarUI8FromUI4",
    "VarCyCmpR8",
    "SafeArrayGetRecordInfo",
    "VarI8FromR4",
    "VarFormat",
    "VarIdiv",
    "DosDateTimeToVariantTime",
    "VarR8FromStr",
    "VarBoolFromDec",
    "VarBoolFromUI8",
    "SafeArrayCopy",
    "VarDecFromUI4",
    "VarI4FromR4",
    "VarBoolFromI1",
    "VariantTimeToDosDateTime",
    "VarUI2FromUI4",
    "VarR4FromI8",
    "VarR4FromCy",
    "VarUI2FromBool",
    "GetAltMonthNames",
    "GetRecordInfoFromGuids",
    "VarCyFromUI2",
    "VarI1FromUI1",
    "VarI4FromUI4",
    "VarR4CmpR8",
    "SafeArraySetIID",
    "VarBoolFromR8",
    "GetErrorInfo",
    "VarDecCmp",
    "VarFix",
    "SysAllocString",
    "VarXor",
    "VarUI4FromR4",
    "VarFormatNumber",
    "VarBstrFromUI1",
    "VarDateFromI1",
    "VarDateFromI2",
    "VarCyFromBool",
    "VarR8FromI8",
    "VarCyNeg",
    "VarI8FromI1",
    "VarUI2FromI8",
    "VarUI8FromI2",
    "VarDateFromStr",
    "VarUI4FromStr",
    "VarBstrFromI8",
    "VarUI4FromCy",
    "VarI1FromCy",
    "VarDateFromR4",
    "VARIANT_UserMarshal",
    "VarFormatPercent",
    "VarI8FromDate",
    "VarR8FromCy",
    "VarR4FromUI1",
    "DllGetClassObject",
    "VarDateFromUI8",
    "VarCyMulI4",
    "LPSAFEARRAY_UserSize",
    "VarUI8FromUI2",
    "SafeArrayUnaccessData",
    "VarFormatCurrency",
    "VarR4FromDisp",
    "VarCyCmp",
    "VarI4FromI8",
    "VarI2FromUI4",
    "VarCyMulI8",
    "VarR8FromUI2",
    "VarBoolFromStr",
    "OleCreatePictureIndirect",
    "VariantClear",
    "SafeArrayCreate",
    "VarRound",
    "VarI1FromUI8",
    "VarDecInt",
    "VarDateFromUI4",
    "VarI2FromI1",
    "VarMonthName",
    "SysReAllocString",
    "VarR4FromUI8",
    "VarCyInt",
    "VarFormatFromTokens",
    "VarDateFromUI2",
    "VarI8FromUI1",
    "OleCreateFontIndirect",
    "VarNeg",
    "VarI2FromDate",
    "VarBstrCmp",
    "VarUI2FromI2",
    "VarI8FromStr",
    "DllUnregisterServer",
    "VarI4FromI2",
    "QueryPathOfRegTypeLib",
    "VarBoolFromI8",
    "UnRegisterTypeLibForUser",
    "VarI1FromUI2",
    "VarI1FromBool",
    "SystemTimeToVariantTime",
    "VarBstrFromR8",
    "VarI2FromStr",
    "VarI8FromUI4",
    "VarOr",
    "GetActiveObject",
    "VarR4FromUI4"
  ],
  "olecli32.dll": [
    "BmEnumFormat",
    "OleQueryReleaseMethod",
    "OleSetHostNames",
    "OleCreateInvisible",
    "OleSetLinkUpdateOptions",
    "OleObjectConvert",
    "LeActivate",
    "MfEqual",
    "MfClone",
    "BmEqual",
    "LeQueryType",
    "GenEqual",
    "DibSaveToStream",
    "OleCreate",
    "DibCopy",
    "WEP",
    "OleQueryReleaseStatus",
    "ErrQueryOpen",
    "LeCopyFromLink",
    "OleQueryOpen",
    "DibRelease",
    "MfCopy",
    "OleGetData",
    "ObjRename",
    "ErrReconnect",
    "DibChangeData",
    "ErrObjectLong",
    "DefCreateLinkFromFile",
    "OleReconnect",
    "OleLoadFromStream",
    "LeQueryOpen",
    "LeUpdate",
    "OleQueryCreateFromClip",
    "OleSetBounds",
    "MfDraw",
    "GenEnumFormat",
    "OleClose",
    "DibEqual",
    "OleClone",
    "LeReconnect",
    "BmChangeData",
    "ErrExecute",
    "LeDraw",
    "PbCopyToClipboard",
    "LeSaveToStream",
    "ErrQueryProtocol",
    "PbEnumFormats",
    "LeClone",
    "OleRequestData",
    "OleEqual",
    "PbLoadFromStream",
    "OleRegisterClientDoc",
    "OleCopyToClipboard",
    "MfCallbackFunc",
    "GenClone",
    "DibGetData",
    "DefLoadFromStream",
    "LeObjectConvert",
    "LeQueryBounds",
    "OleSaveToStream",
    "LeSetHostNames",
    "OleRename",
    "ErrSetUpdateOptions",
    "CheckNetDrive",
    "DibEnumFormat",
    "LeEnumFormat",
    "LeObjectLong",
    "DefCreateFromTemplate",
    "LeCreateInvisible",
    "OleCreateFromClip",
    "BmSaveToStream",
    "OleSetData",
    "GenSetData",
    "OleEnumFormats",
    "OleSavedClientDoc",
    "ErrSetHostNames",
    "ErrQueryOutOfDate",
    "DibClone",
    "ErrShow",
    "ErrSetData",
    "OleRevokeClientDoc",
    "MfRelease",
    "ObjQueryType",
    "BmRelease",
    "OleUnlockServer",
    "BmQueryBounds",
    "ErrObjectConvert",
    "GenSaveToStream",
    "OleUpdate",
    "MfEnumFormat",
    "MfGetData",
    "OleLockServer",
    "OleRenameClientDoc",
    "OleQueryClientVersion",
    "OleQueryOutOfDate",
    "DefCreate",
    "DefCreateInvisible",
    "GenChangeData",
    "OleRelease",
    "MfQueryBounds",
    "PbCreateFromClip",
    "GenDraw",
    "DibQueryBounds",
    "LeShow",
    "LeEqual",
    "PbQueryBounds",
    "OleDraw",
    "ErrClose",
    "ErrUpdate",
    "PbDraw",
    "BmCopy",
    "BmGetData",
    "ErrActivate",
    "OleCopyFromLink",
    "OleSetTargetDevice",
    "OleCreateFromFile",
    "LeSetData",
    "OleActivate",
    "OleCreateFromTemplate",
    "BmClone",
    "LeClose",
    "GenGetData",
    "GenCopy",
    "LeGetUpdateOptions",
    "LeQueryProtocol",
    "PbCreateFromTemplate",
    "SrvrWndProc",
    "GenRelease",
    "PbCreate",
    "MfSaveToStream",
    "SetNextNetDrive",
    "OleQueryBounds",
    "OleGetLinkUpdateOptions",
    "GenQueryBounds",
    "MfChangeData",
    "OleQueryProtocol",
    "LeSetBounds",
    "PbGetData",
    "DefCreateFromClip",
    "ObjQuerySize",
    "OleSetColorScheme",
    "OleEnumObjects",
    "LeRelease",
    "LeQueryOutOfDate",
    "ObjQueryName",
    "PbCreateLinkFromFile",
    "DocWndProc",
    "SetNetName",
    "DibDraw",
    "GetTaskVisibleWindow",
    "LeExecute",
    "OleQueryType",
    "OleCreateLinkFromClip",
    "PbCreateFromFile",
    "OleCreateLinkFromFile",
    "OleDelete",
    "PbCreateInvisible",
    "OleQueryReleaseError",
    "DefCreateLinkFromClip",
    "OleQueryLinkFromClip",
    "ConnectDlgProc",
    "BmDraw",
    "ErrSetBounds",
    "OleQueryName",
    "OleRevertClientDoc",
    "LeSetTargetDevice",
    "LeCopy",
    "ErrCopyFromLink",
    "DefCreateFromFile",
    "LeSetUpdateOptions",
    "OleExecute",
    "ErrGetUpdateOptions",
    "ErrSetTargetDevice",
    "LeChangeData",
    "OleIsDcMeta",
    "LeGetData",
    "OleQuerySize",
    "PbCreateLinkFromClip"
  ],
  "oledlg.dll": [
    "OleUIChangeIconW",
    "OleUIInsertObjectA",
    "OleUIConvertA",
    "OleUIUpdateLinksW",
    "OleUICanConvertOrActivateAs",
    "OleUIBusyW",
    "OleUIEditLinksA",
    "OleUIChangeSourceA",
    "OleUIAddVerbMenuW",
    "OleUIInsertObjectW",
    "OleUIConvertW",
    "OleUIObjectPropertiesA",
    "OleUIPasteSpecialW",
    "OleUIChangeIconA",
    "OleUIChangeSourceW",
    "OleUIUpdateLinksA",
    "OleUIPasteSpecialA",
    "OleUIAddVerbMenuA",
    "OleUIEditLinksW",
    "OleUIBusyA",
    "OleUIPromptUserA",
    "OleUIObjectPropertiesW",
    "OleUIPromptUserW"
  ],
  "oleprn.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "olepro32.dll": [
    "OleCreateFontIndirect",
    "OleCreatePictureIndirect",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "OleTranslateColor",
    "DllGetClassObject",
    "OleLoadPicture",
    "DllRegisterServer",
    "OleIconToCursor",
    "OleCreatePropertyFrameIndirect",
    "OleCreatePropertyFrame"
  ],
  "oleres.dll": "No exports",
  "olesvr32.dll": [
    "OleSavedServerDoc",
    "OleBlockServer",
    "ItemWndProc",
    "OleRegisterServerDoc",
    "TerminateClients",
    "OleRenameServerDoc",
    "EnumForTerminate",
    "SendDataMsg",
    "ItemCallBack",
    "DocWndProc",
    "DeleteClientInfo",
    "WEP",
    "OleRevertServerDoc",
    "TerminateDocClients",
    "OleRevokeServerDoc",
    "SendRenameMsg",
    "OleQueryServerVersion",
    "FindItemWnd",
    "OleRegisterServer",
    "OleRevokeObject",
    "OleRevokeServer",
    "OleUnblockServer",
    "SrvrWndProc"
  ],
  "olethk32.dll": [
    "IntOpUninitialize",
    "ConvertHr3216Thunk",
    "ThkMgrUninitialize",
    "InvokeOn32",
    "ConvertObjDescriptor",
    "IUnknownObj32",
    "ThkMgrInitialize",
    "CallbackProcessing_3216",
    "ConvertHr1632Thunk",
    "TransformHRESULT_1632",
    "CSm16ReleaseHandler_Release32",
    "TransformHRESULT_3216",
    "ThkAddAppCompatFlag",
    "IntOpInitialize"
  ],
  "onex.dll": [
    "OneXRestartReasonCodeToString",
    "OneXQueryAuthParams",
    "OneXSetAuthParams",
    "OneXStartAuthentication",
    "OneXQueryStatistics",
    "OneXReasonCodeToString",
    "OneXUpdatePortProfile",
    "OneXDestroySupplicantPort",
    "OneXQueryState",
    "OneXFreeMemory",
    "OneXSetRuntimeState",
    "OneXCompareAuthParams",
    "OneXForceAuthenticatedState",
    "OneXFreeAuthParams",
    "OneXInitialize",
    "OneXAddEapAttributes",
    "OneXDeInitialize",
    "OneXAddTLV",
    "OneXIndicatePacket",
    "OneXCopyAuthParams",
    "OneXCreateDefaultProfile",
    "OneXStopAuthentication",
    "OneXUpdateProfilePostDiscovery",
    "OneXQueryPendingUIRequest",
    "OneXUIResponse",
    "OneXIndicateSessionChange",
    "OneXCreateSupplicantPort",
    "OneXCreateDiscoveryProfiles"
  ],
  "onexui.dll": [
    "OneXShowUIFromEAPCreds",
    "OneXShowUI",
    "OneXGetUserFriendlyText"
  ],
  "opengl32.dll": [
    "glLineStipple",
    "glTexParameterf",
    "glVertex2sv",
    "glGetTexParameterfv",
    "glFrustum",
    "glVertex3i",
    "glTexImage2D",
    "wglSwapLayerBuffers",
    "glTexCoord3sv",
    "glRasterPos4i",
    "glRectfv",
    "wglRealizeLayerPalette",
    "glColor4us",
    "glDeleteLists",
    "glEvalCoord2d",
    "glColor3usv",
    "glNormal3d",
    "glViewport",
    "glRasterPos4dv",
    "glColor4fv",
    "glTexCoord3i",
    "GlmfBeginGlsBlock",
    "glNormal3dv",
    "glFogf",
    "glFrontFace",
    "glTexCoord1dv",
    "glGetError",
    "glVertex3s",
    "glFogfv",
    "glTexGend",
    "glColor4b",
    "glGetMapiv",
    "glColor4ui",
    "glMultMatrixd",
    "glHint",
    "glTexCoord2s",
    "glTexCoord4dv",
    "glDepthMask",
    "glNormal3s",
    "glVertex4dv",
    "glIndexd",
    "glEvalCoord1d",
    "glEvalCoord2f",
    "glIndexPointer",
    "glMatrixMode",
    "glGetFloatv",
    "glColorMaterial",
    "glGetMaterialiv",
    "glNormal3bv",
    "glBindTexture",
    "glTranslatef",
    "glGetTexGeniv",
    "wglShareLists",
    "glPixelStorei",
    "glColor3iv",
    "glTexCoordPointer",
    "glRasterPos3fv",
    "glDebugEntry",
    "glPopAttrib",
    "glMapGrid2f",
    "glRasterPos2s",
    "glEnd",
    "glVertex3dv",
    "glTexCoord1s",
    "glVertexPointer",
    "glLightfv",
    "glColorMask",
    "glGetDoublev",
    "glTexParameteri",
    "glDrawElements",
    "glEdgeFlag",
    "glRasterPos3iv",
    "glClipPlane",
    "glPolygonStipple",
    "glRecti",
    "glTexCoord4fv",
    "glEndList",
    "glRasterPos2dv",
    "glStencilMask",
    "glNewList",
    "glRotated",
    "glPopClientAttrib",
    "glColor4dv",
    "glTexCoord3iv",
    "glAreTexturesResident",
    "GlmfCloseMetaFile",
    "glTexCoord4iv",
    "glGetTexLevelParameterfv",
    "glClearIndex",
    "glPixelTransferi",
    "glPointSize",
    "glTexGeni",
    "glGetTexGenfv",
    "glRasterPos2fv",
    "glVertex4i",
    "glNormal3b",
    "glTexCoord3s",
    "wglGetDefaultProcAddress",
    "glColor3b",
    "glBitmap",
    "glIndexs",
    "glGetIntegerv",
    "glColor4bv",
    "glAccum",
    "glColor3bv",
    "glColor4ub",
    "glGetPolygonStipple",
    "glTexImage1D",
    "glColor3i",
    "glNormal3i",
    "glVertex2d",
    "glTexCoord4sv",
    "glLoadMatrixf",
    "glRectf",
    "glStencilFunc",
    "glMap1f",
    "glPushAttrib",
    "GlmfEndPlayback",
    "glVertex3d",
    "glClearDepth",
    "glCopyTexSubImage1D",
    "glPopName",
    "glVertex3fv",
    "wglSetPixelFormat",
    "glGetMapfv",
    "glColor4d",
    "glBlendFunc",
    "glPassThrough",
    "glGenTextures",
    "glGetLightfv",
    "glDepthFunc",
    "glTexCoord4s",
    "glFinish",
    "glGetMapdv",
    "glMap2d",
    "glDisableClientState",
    "glClearAccum",
    "glMaterialfv",
    "glNormal3iv",
    "glEvalCoord2fv",
    "glEnableClientState",
    "glSelectBuffer",
    "glDeleteTextures",
    "wglUseFontBitmapsW",
    "glGetPointerv",
    "glIndexiv",
    "glPixelMapuiv",
    "glTexCoord1i",
    "glColor3fv",
    "glGetTexEnviv",
    "glRects",
    "glClear",
    "GlmfPlayGlsRecord",
    "glMaterialf",
    "glPolygonOffset",
    "glTexEnviv",
    "glColor3ui",
    "GlmfInitPlayback",
    "glMateriali",
    "glLightModelf",
    "glEvalCoord1f",
    "glVertex4fv",
    "glEdgeFlagPointer",
    "glRasterPos3s",
    "glVertex2dv",
    "glEvalMesh2",
    "glEvalPoint2",
    "wglSwapBuffers",
    "glGetPixelMapuiv",
    "glListBase",
    "glAlphaFunc",
    "glTexCoord1sv",
    "glMapGrid1f",
    "glTexEnvi",
    "glPixelMapusv",
    "glRasterPos2f",
    "glColorPointer",
    "glIndexub",
    "glTexEnvfv",
    "glVertex4d",
    "glLightModelfv",
    "glMap1d",
    "glIndexfv",
    "glPixelMapfv",
    "wglUseFontBitmapsA",
    "glClearColor",
    "glTexGeniv",
    "glCopyPixels",
    "wglGetCurrentContext",
    "glGetTexImage",
    "glVertex4iv",
    "glColor4iv",
    "GlmfEndGlsBlock",
    "glIndexf",
    "glTexCoord4d",
    "glRasterPos3i",
    "wglGetLayerPaletteEntries",
    "glColor3ubv",
    "glMapGrid2d",
    "wglGetProcAddress",
    "glTexSubImage2D",
    "glVertex2iv",
    "glPushMatrix",
    "glColor3us",
    "glDrawBuffer",
    "wglGetCurrentDC",
    "glTexCoord2sv",
    "glColor4sv",
    "glInitNames",
    "glRasterPos4f",
    "glRasterPos3sv",
    "glLightiv",
    "glPixelStoref",
    "glTexGenf",
    "wglGetPixelFormat",
    "glTexCoord3fv",
    "glCopyTexImage2D",
    "glColor3sv",
    "glTranslated",
    "glTexCoord1d",
    "wglDescribePixelFormat",
    "glPolygonMode",
    "glVertex4sv",
    "glVertex3sv",
    "glEnable",
    "glGetLightiv",
    "glRasterPos4iv",
    "glVertex4f",
    "wglCreateLayerContext",
    "glVertex4s",
    "glGetMaterialfv",
    "glGetPixelMapusv",
    "glMaterialiv",
    "glRasterPos2sv",
    "glTexParameterfv",
    "glLightModeliv",
    "glIndexMask",
    "glColor4uiv",
    "glGenLists",
    "glRectiv",
    "glNormal3f",
    "glRenderMode",
    "glGetTexGendv",
    "glVertex2fv",
    "glLightModeli",
    "glRectd",
    "glTexCoord1f",
    "glTexCoord4i",
    "glColor4f",
    "glTexCoord3d",
    "glNormalPointer",
    "glColor4usv",
    "glLogicOp",
    "glTexCoord2d",
    "wglChoosePixelFormat",
    "glFlush",
    "glOrtho",
    "glTexGendv",
    "glTexCoord3f",
    "glBegin",
    "glArrayElement",
    "glLightf",
    "glCallList",
    "glDisable",
    "glGetTexLevelParameteriv",
    "glTexCoord1iv",
    "glRasterPos3d",
    "glCallLists",
    "glGetClipPlane",
    "glTexCoord3dv",
    "glTexCoord2i",
    "glPixelZoom",
    "glTexCoord2f",
    "glGetBooleanv",
    "glVertex2i",
    "glStencilOp",
    "wglMakeCurrent",
    "glIsList",
    "glPrioritizeTextures",
    "glLineWidth",
    "glFogi",
    "glColor4s",
    "glShadeModel",
    "glPixelTransferf",
    "glScalef",
    "glCullFace",
    "glRasterPos4sv",
    "glRectsv",
    "glVertex2s",
    "glDrawPixels",
    "glScissor",
    "glTexCoord2dv",
    "glMap2f",
    "glDrawArrays",
    "glRasterPos2d",
    "glRasterPos4fv",
    "glTexSubImage1D",
    "glEvalMesh1",
    "glFeedbackBuffer",
    "glCopyTexSubImage2D",
    "glCopyTexImage1D",
    "glTexEnvf",
    "glTexCoord2fv",
    "glIndexi",
    "glIndexdv",
    "glInterleavedArrays",
    "glRectdv",
    "glEvalCoord2dv",
    "glEvalCoord1fv",
    "glGetTexParameteriv",
    "glColor3ub",
    "wglDescribeLayerPlane",
    "glPopMatrix",
    "glPushName",
    "glRasterPos3dv",
    "glColor3s",
    "wglDeleteContext",
    "glTexParameteriv",
    "glColor4i",
    "glReadPixels",
    "glMultMatrixf",
    "glRotatef",
    "glTexCoord2iv",
    "wglSwapMultipleBuffers",
    "wglUseFontOutlinesA",
    "glTexCoord4f",
    "glRasterPos3f",
    "wglCreateContext",
    "glClearStencil",
    "glLighti",
    "glRasterPos2i",
    "glIndexubv",
    "wglSetLayerPaletteEntries",
    "glIndexsv",
    "glGetPixelMapfv",
    "glColor3dv",
    "glIsTexture",
    "glColor3f",
    "glFogiv",
    "glLoadIdentity",
    "glTexGenfv",
    "wglUseFontOutlinesW",
    "glGetString",
    "glTexCoord1fv",
    "glIsEnabled",
    "glVertex2f",
    "glLoadName",
    "glDepthRange",
    "glGetTexEnvfv",
    "glReadBuffer",
    "glVertex3f",
    "wglCopyContext",
    "glNormal3fv",
    "glRasterPos4d",
    "glColor4ubv",
    "glColor3uiv",
    "glMapGrid1d",
    "glNormal3sv",
    "glLoadMatrixd",
    "glRasterPos2iv",
    "glScaled",
    "glColor3d",
    "glVertex3iv",
    "glEvalCoord1dv",
    "glEdgeFlagv",
    "glEvalPoint1",
    "glRasterPos4s",
    "glPushClientAttrib"
  ],
  "osbaseln.dll": [
    "GetOsInstalledComponentInfoA",
    "pGetOsCurrentBaselineServicePack",
    "EnumOsOutOfDateComponentsA",
    "GetOsLatestBaselineServicePack",
    "OpenOsBaseline",
    "EnumOsBaselineComponentsW",
    "GetOsBaselineComponentInfoW",
    "GetOsBaselineComponentInfoA",
    "pGetOsBaselineCurrentVersion",
    "pOpenOsBaselineByVersion",
    "EnumOsOutOfDateComponentsW",
    "EnumOsBaselineComponentsA",
    "GetOsInstalledComponentInfoW",
    "CloseOsBaseline"
  ],
  "osuninst.dll": [
    "ExecuteUninstall",
    "ProvideUiAlerts",
    "GetUninstallImageSize",
    "RemoveUninstallImage",
    "IsUninstallImageValid"
  ],
  "P2P.dll": [
    "PeerCollabEnumObjects",
    "PeerCollabRegisterEvent",
    "PeerPnrpUnregister",
    "PeerIdentityExport",
    "PeerEndEnumeration",
    "PeerIdentityDelete",
    "PeerPnrpGetCloudInfo",
    "PeerPnrpStartup",
    "PeerGroupEnumRecords",
    "PeerCollabEnumApplicationRegistrationInfo",
    "PeerPnrpRegister",
    "PeerCollabUnregisterApplication",
    "PeerHostNameToPeerName",
    "PeerCollabCancelInvitation",
    "PeerFreeData",
    "PeerNameToPeerHostName",
    "PeerGroupEnumMembers",
    "PeerGroupConnect",
    "PeerGroupAddRecord",
    "PeerCollabGetAppLaunchInfo",
    "PeerIdentityGetFriendlyName",
    "PeerGroupOpen",
    "PeerIdentityGetCryptKey",
    "PeerCollabUnregisterEvent",
    "PeerEnumIdentities",
    "PeerGroupExportDatabase",
    "PeerPnrpEndResolve",
    "PeerCollabSetEndpointName",
    "PeerCollabParseContact",
    "PeerCollabDeleteObject",
    "PeerCollabInviteContact",
    "PeerGroupDeleteRecord",
    "PeerGroupResumePasswordAuthentication",
    "PeerIdentityGetCert",
    "PeerGroupUnregisterEvent",
    "PeerGroupImportConfig",
    "PeerCollabAsyncInviteContact",
    "PeerGroupDelete",
    "PeerGroupPasswordJoin",
    "PeerGroupRegisterEvent",
    "PeerCollabExportContact",
    "PeerCollabGetPresenceInfo",
    "PeerCollabRefreshEndpointData",
    "PeerGroupSendData",
    "PeerGetItemCount",
    "PeerCollabSignout",
    "PeerCollabGetContact",
    "PeerCollabRegisterApplication",
    "PeerGroupStartup",
    "PeerCollabQueryContactData",
    "PeerCollabGetSigninOptions",
    "PeerCollabUnsubscribeEndpointData",
    "PeerGroupCreateInvitation",
    "PeerGroupJoin",
    "PeerGetNextItem",
    "PeerCollabStartup",
    "PeerCollabEnumContacts",
    "PeerGroupUpdateRecord",
    "PeerCollabInviteEndpoint",
    "PeerPnrpGetEndpoint",
    "PeerCollabGetEndpointName",
    "PeerGroupOpenDirectConnection",
    "PeerIdentityGetXML",
    "PeerIdentityGetDefault",
    "PeerGroupPeerTimeToUniversalTime",
    "PeerCollabGetApplicationRegistrationInfo",
    "PeerCollabEnumEndpoints",
    "DllMain",
    "PeerGroupClose",
    "PeerPnrpStartResolve",
    "PeerGroupGetRecord",
    "PeerGroupCloseDirectConnection",
    "PeerCollabSetObject",
    "PeerCollabSignin",
    "PeerGroupSearchRecords",
    "PeerCollabDeleteContact",
    "PeerEnumGroups",
    "PeerCollabUpdateContact",
    "PeerPnrpUpdateRegistration",
    "PeerCollabAsyncInviteEndpoint",
    "PeerGroupConnectByAddress",
    "PeerCollabEnumApplications",
    "PeerGroupImportDatabase",
    "PeerGroupShutdown",
    "PeerCollabAddContact",
    "PeerCollabSubscribeEndpointData",
    "PeerCreatePeerName",
    "PeerCollabSetPresenceInfo",
    "PeerSSPAddCredentials",
    "PeerGroupGetEventData",
    "PeerCollabDeleteEndpointData",
    "PeerCollabEnumPeopleNearMe",
    "PeerCollabGetEventData",
    "PeerGroupGetProperties",
    "PeerGroupUniversalTimeToPeerTime",
    "PeerPnrpShutdown",
    "PeerGroupCreate",
    "PeerGroupGetStatus",
    "PeerIdentityImport",
    "PeerSSPRemoveCredentials",
    "PeerGroupIssueCredentials",
    "PeerGroupCreatePasswordInvitation",
    "PeerGroupExportConfig",
    "PeerIdentitySetFriendlyName",
    "PeerCollabGetInvitationResponse",
    "PeerCollabShutdown",
    "PeerGroupParseInvitation",
    "PeerCollabCloseHandle",
    "PeerGroupEnumConnections",
    "PeerGroupSetProperties",
    "PeerIdentityCreate",
    "PeerPnrpResolve"
  ],
  "P2PGraph.dll": [
    "PeerGraphRegisterEvent",
    "PeerGraphOpenDirectConnection",
    "PeerGraphUpdateRecord",
    "PeerGraphGetNodeInfo",
    "PeerGraphGetNextItem",
    "PeerGraphCloseDirectConnection",
    "PeerGraphExportDatabase",
    "PeerGraphGetItemCount",
    "PeerGraphGetEventData",
    "PeerGraphListen",
    "pMemoryHelper",
    "PeerGraphEnumConnections",
    "PeerGraphGetStatus",
    "PeerGraphUnregisterEvent",
    "PeerGraphSendData",
    "PeerGraphGetRecord",
    "PeerGraphCreate",
    "PeerGraphClose",
    "PeerGraphOpen",
    "PeerGraphEnumRecords",
    "PeerGraphValidateDeferredRecords",
    "PeerGraphImportDatabase",
    "PeerGraphEnumNodes",
    "PeerGraphDelete",
    "PeerGraphConnect",
    "PeerGraphStartup",
    "PeerGraphPeerTimeToUniversalTime",
    "PeerGraphSetProperties",
    "PeerGraphEndEnumeration",
    "PeerGraphGetProperties",
    "PeerGraphSetPresence",
    "PeerGraphSearchRecords",
    "PeerGraphDeleteRecord",
    "PeerGraphShutdown",
    "PeerGraphAddRecord",
    "PeerGraphUniversalTimeToPeerTime",
    "PeerGraphSetNodeAttributes",
    "PeerGraphFreeData"
  ],
  "PNPXAssoc.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "PNPXAssocPrx.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "PSHED.DLL": [
    "PshedGetErrorSourceInfo",
    "PshedWriteErrorRecord",
    "PshedAllocateMemory",
    "PshedRegisterPlugin",
    "PshedInitialize",
    "PshedDisableErrorSource",
    "PshedGetAllErrorSources",
    "PshedAttemptErrorRecovery",
    "PshedInjectError",
    "PshedClearErrorRecord",
    "PshedFinalizeErrorRecord",
    "PshedBugCheckSystem",
    "PshedSetErrorSourceInfo",
    "PshedEnableErrorSource",
    "PshedRetrieveErrorInfo",
    "PshedFreeMemory",
    "PshedGetInjectionCapabilities",
    "PshedSynchronizeExecution",
    "PshedIsSystemWheaEnabled",
    "PshedReadErrorRecord",
    "PshedGetBootErrorPacket"
  ],
  "PeerDist.dll": [
    "PeerDistRegisterForStatusChangeNotification",
    "PeerDistClientBlockRead",
    "PeerDistServerPublishStream",
    "PeerDistStartup",
    "PeerDistShutdown",
    "PeerDistGetStatus",
    "PeerDistServerUnpublish",
    "PeerDistClientAddData",
    "PeerDistServerCloseContentInformation",
    "PeerDistServerCancelAsyncOperation",
    "PeerDistClientFlushContent",
    "PeerDistClientOpenContent",
    "PeerDistClientAddContentInformation",
    "PeerDistServerPublishAddToStream",
    "PeerDistServerOpenContentInformation",
    "PeerDistUnregisterForStatusChangeNotification",
    "PeerDistServerCloseStreamHandle",
    "PeerDistClientStreamRead",
    "PeerDistClientCancelAsyncOperation",
    "PeerDistClientCompleteContentInformation",
    "PeerDistServerRetrieveContentInformation",
    "PeerDistServerPublishCompleteStream",
    "PeerDistClientCloseContent"
  ],
  "PeerDistHttpTrans.dll": [
    "DllMain",
    "PeerDistTransportStartup"
  ],
  "PeerDistSh.dll": [
    "InitHelperDll"
  ],
  "PeerDistSvc.dll": [
    "SVCServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "PeerDistWSDDiscoProv.dll": [
    "PeerDistDiscoProviderStartup"
  ],
  "PerfCenterCPL.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "PhotoMetadataHandler.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "PlaySndSrv.dll": [
    "DllCanUnloadNow",
    "PlaySoundServerTerminate",
    "PlaySoundServerInitialize",
    "DllGetClassObject"
  ],
  "Pnrphc.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "PortableDeviceApi.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "PortableDeviceClassExtension.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "Microsoft_WDF_UMDF_Version",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "PortableDeviceConnectApi.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "PortableDeviceStatus.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "PortableDeviceSyncProvider.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "PortableDeviceTypes.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "PortableDeviceWMDRM.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "PortableDeviceWiaCompat.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "PresentationCFFRasterizerNative_v0300.dll": [
    "AdobeGetOutline",
    "AdobeNewFont",
    "AdobeGetBitmap",
    "AdobeFreeFontInst",
    "AdobeGetMetrics"
  ],
  "PresentationHostProxy.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "PresentationNative_v0300.dll": [
    "FsFAllFootnotesAllowed",
    "LoRelievePenaltyResource",
    "FsDestroyPage",
    "LoCreateContext",
    "FsCreateSubpageBottomless",
    "NlDestroyHyphenator",
    "FsFormatSubtrackFinite",
    "FsQuerySectionBasicColumnList",
    "ums_deflate_init",
    "FsGetTableSrvNumberFootnotes",
    "FsCompareTableSrv",
    "FsFormatTableSrvBottomless",
    "FsQueryTableObjFigureCountWord",
    "FsGetNextTick",
    "NlCreateHyphenator",
    "LoSetDoc",
    "FsQueryTableSrvRowDetails",
    "FsQueryLineListComposite",
    "FsQueryFigureObjectDetails",
    "FsQuerySegmentDefinedColumnSpanAreaList",
    "FsQueryTableObjCellList",
    "FsDestroySubpage",
    "FsQuerySubpageHeightDefinedColumnSpanAreaList",
    "FsDestroySubtrackBreakRecord",
    "LoDisplayLine",
    "FsGetMaxNumberEmptySpaces",
    "FsQueryLineListSingle",
    "FsQueryFootnoteColumnTrackList",
    "LoGetPenaltyModuleInternalHandle",
    "FsQueryFootnoteColumnDetails",
    "ums_inflate_init",
    "FsGetSubtrackFootnoteInfo",
    "FsQueryTrackDetails",
    "DestroyDocContext",
    "NlLoad",
    "FsCreateSubpageFinite",
    "FsTransferDisplayInfoTableSrv",
    "FsQueryAttachedObjectList",
    "LoCreateBreaks",
    "LoCloneBreakRecord",
    "FsQueryPageSectionList",
    "FsQueryTextDetails",
    "DestroyInstalledObjectsInfo",
    "FsQueryLineCompositeElementList",
    "FsQuerySubpageSegmentDefinedColumnSpanAreaList",
    "FsClearUpdateInfoInPage",
    "FsTransformVector",
    "FsResolveOverlap",
    "LoDestroyContext",
    "FsGetIntervals",
    "FsTransformBbox",
    "FsUpdateBottomlessPage",
    "FsGetClientHandle",
    "GetTableObjHandlerInfo",
    "FsQueryEndnoteColumnDetails",
    "FsSynchronizeBottomlessSubtrack",
    "FsTransferDisplayInfoSubtrack",
    "FsClearUpdateInfoInSubpage",
    "FsDestroyPageBreakRecord",
    "FsJustifySubpage",
    "FsReleaseGeometry",
    "FsUpdateBottomlessTableSrv",
    "FsQueryPageFootnoteColumnList",
    "FsFormatTableSrvFinite",
    "FsDestroySubtrack",
    "FsDuplicateSubtrackBreakRecord",
    "LoAcquireBreakRecord",
    "ums_inflate",
    "FsCommitFilledRectangle",
    "FsQuerySubpageDetails",
    "FsGetTableObjFsimethods",
    "FsDestroySubpageBreakRecord",
    "FsQueryHeightDefinedColumnSpanAreaList",
    "FsCompareSubtrack",
    "FsQueryTableSrvTableDetails",
    "ums_deflate",
    "CreateDocContext",
    "FsQueryCompositeColumnFootnoteList",
    "FsRegisterFloatObstacle",
    "FsQueryDcpLineVariantsFromCachedTextPara",
    "FsDestroyTableSrvBreakRecord",
    "FsQuerySubtrackParaList",
    "LoEnumLine",
    "NlHyphenate",
    "FsClearUpdateInfoInTableSrv",
    "FsUpdateFinitePage",
    "FsRestoreGeometry",
    "CreateInstalledObjectsInfo",
    "FsGetSubpageFootnoteInfo",
    "FsShiftSubtrackVertical",
    "LocbkGetObjectHandlerInfo",
    "NlGetClassObject",
    "FsGetTableSrvColumnBalancingInfo",
    "FsUpdateBottomlessSubtrack",
    "FsTransformRectangle",
    "LoCreateLine",
    "FsGetShiftOffset",
    "LoSetBreaking",
    "FsCreatePageBottomless",
    "FsGetFloaterFsimethods",
    "FsDuplicateTableSrvBreakRecord",
    "FsQuerySubtrackDetails",
    "FsFFootnoteAllowed",
    "LoAcquirePenaltyModule",
    "FsQueryTableObjRowList",
    "FsQueryTableObjDetails",
    "NlUnload",
    "GetFloaterHandlerInfo",
    "FsDuplicatePageBreakRecord",
    "FsQueryPageDetails",
    "FsGetFigureObstacleData",
    "FsDuplicateSubpageBreakRecord",
    "FsClearUpdateInfoInSubtrack",
    "FsCompareSubpages",
    "FsQuerySectionEndnoteColumnList",
    "FsDestroyDocContext",
    "FsTransformPoint",
    "FsGetNumberSubtrackFootnotes",
    "FsGetPageRectangle",
    "LoDisposeLine",
    "FsQuerySubpageBasicColumnList",
    "LoDisposePenaltyModule",
    "FsCreatePageFinite",
    "FsGetEmptySpaces",
    "FsUpdateBottomlessSubpage",
    "FsGetNumberSubpageFootnotes",
    "FsGetSubtrackColumnBalancingInfo",
    "FsTransferDisplayInfoSubpage",
    "FsDestroyTableSrv",
    "LoGetEscString",
    "FsQuerySectionDetails",
    "LoQueryLineCpPpoint",
    "FsQueryTableSrvRowList",
    "LoDisposeBreakRecord",
    "FsDuplicateGeometry",
    "FsQuerySectionCompositeColumnList",
    "LoCreateParaBreakingSession",
    "FsCreateDummyFootnoteRejector",
    "LoDisposeParaBreakingSession",
    "LoSetTabs",
    "FsGetColumnRectangle",
    "FsQueryCompositeColumnDetails",
    "FsGetMaxNumberIntervals",
    "FsQueryTableObjRowDetails",
    "FsGetTableSrvFootnoteInfo",
    "MILGetClassificationTables",
    "LoQueryLinePointPcp",
    "FsGetSubpageColumnBalancingInfo",
    "FsAddFigureObstacle",
    "FsQueryTableObjTableProperDetails",
    "FsQueryTableObjFigureListWord",
    "FsFormatSubtrackBottomless",
    "FsQueryTrackParaList",
    "FsQueryFloaterDetails",
    "FsQueryTableSrvCellList",
    "FsDestroyFootnoteRejector",
    "FsCreateDocContext"
  ],
  "PrintIsolationProxy.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "p2pcollab.dll": [
    "ContactManagerCleanup",
    "CollabGetUserSettings",
    "AIApplicationUnregister",
    "CollabEnableAutoStart",
    "CollabExportScopedContact",
    "AISpecificStop",
    "SPUpdateUserPicture",
    "CollabPublicationUnpublish",
    "AISpecificStart",
    "SPQueryContactData",
    "CollabPublicationPublish",
    "CollabSetUserSettings",
    "PeopleNearMeUpdateFriendlyName",
    "PeopleNearMeUninitialize",
    "CollabUnregisterIPAddrChange",
    "CollabConvertPictureToBitmap",
    "SPGetPresenceInfo",
    "PeopleNearMeInitialize",
    "PeopleNearMeSignout",
    "CollabLoadPrivacyStmt",
    "AIStartup",
    "CollabSetSignInInfo",
    "SPGetEndpointName",
    "CollabRegisterIPAddrChange",
    "AIApplicationGetRegistrationInfo",
    "SPRequestPublishedItems",
    "CollabGetContact",
    "CollabTrimNicknameSpaces",
    "SPUpdateMeContact",
    "CollabParseContact",
    "SPGetApplications",
    "CollabSetup",
    "SPPublishObject",
    "AICancel",
    "SPUnregisterApplication",
    "AIApplicationRegister",
    "AIEnumApplicationRegistrationInfo",
    "CollabConvertPicture",
    "CollabGetScopedContact",
    "SPDeleteContact",
    "CollabUpdateContact",
    "SPGetObjects",
    "CollabPublicationShutdown",
    "CollabLayerInitialize",
    "CollabGetContactPicture",
    "CollabPublicationStopListen",
    "CollabConvertBitmapToPicture",
    "CollabPublicationListen",
    "AIGetResponse",
    "CollabCreateXMLContactBlob",
    "SPSetEndpointName",
    "SPUpdateContact",
    "AISyncSend",
    "ContactManagerInit",
    "AICloseHandle",
    "DllMain",
    "AIAsyncSend",
    "SSPRemoveCredentials",
    "SPEndRequest",
    "PeopleNearMeSignin",
    "CollabExportContact",
    "QuerySecurityPackageInfoW",
    "CollabGetSignInInfo",
    "CollabAddContact",
    "SSPAddCredentials",
    "AIGetApplicationLaunchInfo",
    "PeopleNearMeUpdateEndpointName",
    "PeopleNearMeGetEndpointsNearMe",
    "AIRespond",
    "CollabDisableAutoStart",
    "CollabLayerShutdown",
    "SPSetPresenceInfo",
    "SPSubscribeEndpoint",
    "AIShutdown",
    "CollabEnumContacts",
    "CollabPublicationInitialize",
    "SPUnsubscribeOnRundown",
    "CollabDeleteContact",
    "SPUnpublishObjects",
    "SPUnsubscribeEndpoint",
    "InitSecurityInterfaceW",
    "SPGetEndpoints",
    "SPRegisterApplication",
    "SPUpdateUserSettings"
  ],
  "p2pnetsh.dll": [
    "InitHelperDll"
  ],
  "p2psvc.dll": [
    "GroupServiceMain",
    "InitSecurityInterfaceW",
    "SvchostPushServiceGlobals"
  ],
  "packager.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "panmap.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "pautoenr.dll": [
    "DimsProvEntry",
    "CertAutoEnrollment",
    "CertAutoRemove"
  ],
  "pcadm.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "pcaevts.dll": "No exports",
  "pcasvc.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "pcaui.dll": [
    "PcaLogUnsignedDriverEvent",
    "PcaPersistSettingsAndLaunchApplication",
    "PcaDisplayUserInterfaceForScenario",
    "DisplayApphelpDialog",
    "PcaLaunchApplicationWithConsent"
  ],
  "pcwum.dll": [
    "StmReduceSize",
    "PcwSetQueryItemUserData",
    "StmCoalesceChunks",
    "PcwSendNotification",
    "PcwAddQueryItem",
    "PcwQueryCounterSetSecurity",
    "PcwRegisterCounterSet",
    "PcwSetCounterSetSecurity",
    "PcwDisconnectCounterSet",
    "PerfDecrementULongLongCounterValue",
    "PerfIncrementULongCounterValue",
    "PerfDeleteInstance",
    "StmInitialize",
    "PcwSendStatelessNotification",
    "PerfQueryInstance",
    "StmWrite",
    "PcwCollectData",
    "PerfStartProviderEx",
    "StmDeinitialize",
    "PcwEnumerateInstances",
    "PerfDecrementULongCounterValue",
    "PerfSetULongCounterValue",
    "PcwCreateNotifier",
    "PcwCompleteNotification",
    "PcwCreateQuery",
    "PerfStopProvider",
    "StmReserve",
    "PcwClearCounterSetSecurity",
    "StmAlignSize",
    "PcwIsNotifierAlive",
    "PerfCreateInstance",
    "PcwReadNotificationData",
    "PerfSetCounterSetInfo",
    "StmAllocateFlat",
    "PerfStartProvider",
    "PerfSetCounterRefValue",
    "PerfIncrementULongLongCounterValue",
    "PcwRemoveQueryItem",
    "PerfSetULongLongCounterValue"
  ],
  "pcwutl.dll": [
    "GetTempFile",
    "CreateAndRunTaskW",
    "LogAeEvent",
    "SendPcwWerReport",
    "GetMatchingInfo",
    "RetrieveFileAndProgramId"
  ],
  "pdh.dll": [
    "PdhEnumMachinesHW",
    "PdhWriteRelogSample",
    "PdhGetCounterInfoA",
    "PdhParseCounterPathA",
    "PdhConnectMachineA",
    "PdhVbOpenQuery",
    "PdhLookupPerfIndexByNameW",
    "PdhRelogW",
    "PdhVbAddCounter",
    "PdhGetDefaultPerfCounterHW",
    "PdhGetExplainText",
    "PdhGetDefaultPerfObjectA",
    "PdhLookupPerfIndexByNameA",
    "PdhParseInstanceNameA",
    "PdhGetDefaultPerfObjectHA",
    "PdhParseCounterPathW",
    "PdhEnumLogSetNamesW",
    "PdhParseInstanceNameW",
    "PdhUpdateLogFileCatalog",
    "PdhExpandCounterPathW",
    "PdhAddEnglishCounterW",
    "PdhSetDefaultRealTimeDataSource",
    "PdhGetLogFileSize",
    "PdhGetCounterInfoW",
    "PdhGetDataSourceTimeRangeH",
    "PdhOpenQueryW",
    "PdhSetQueryTimeRange",
    "PdhVbGetLogFileSize",
    "PdhAddEnglishCounterA",
    "PdhComputeCounterStatistics",
    "PdhGetRawCounterArrayA",
    "PdhEnumObjectItemsW",
    "PdhGetLogFileTypeA",
    "PdhSetCounterValue",
    "PdhTranslate009CounterA",
    "PdhExpandCounterPathA",
    "PdhVbCreateCounterPathList",
    "PdhRelogA",
    "PdhGetFormattedCounterArrayW",
    "PdhAddCounterA",
    "PdhConnectMachineW",
    "PdhOpenQueryH",
    "PdhAddCounterW",
    "PdhGetLogFileTypeW",
    "PdhGetDefaultPerfObjectHW",
    "PdhCollectQueryDataEx",
    "PdhValidatePathA",
    "PdhCollectQueryDataWithTime",
    "PdhExpandWildCardPathW",
    "PdhLookupPerfNameByIndexW",
    "PdhGetFormattedCounterArrayA",
    "PdhGetLogSetGUID",
    "PdhCloseLog",
    "PdhGetFormattedCounterValue",
    "PdhEnumObjectsA",
    "PdhCreateSQLTablesW",
    "PdhGetCounterTimeBase",
    "PdhGetDefaultPerfCounterW",
    "PdhExpandWildCardPathHW",
    "PdhCloseQuery",
    "PdhOpenLogW",
    "PdhTranslateLocaleCounterA",
    "PdhTranslateLocaleCounterW",
    "PdhOpenLogA",
    "PdhAdd009CounterA",
    "PdhBrowseCountersW",
    "PdhGetDataSourceTimeRangeA",
    "PdhCreateSQLTablesA",
    "PdhIsRealTimeQuery",
    "PdhFormatFromRawValue",
    "PdhMakeCounterPathA",
    "PdhUpdateLogA",
    "PdhVbUpdateLog",
    "PdhEnumObjectItemsA",
    "PdhEnumObjectsW",
    "PdhValidatePathExA",
    "PdhEnumObjectItemsHA",
    "PdhVbGetCounterPathElements",
    "PdhSelectDataSourceW",
    "PdhVbGetOneCounterPath",
    "PdhVbGetCounterPathFromList",
    "PdhBrowseCountersA",
    "PdhEnumMachinesHA",
    "PdhEnumObjectItemsHW",
    "PdhCollectQueryData",
    "PdhListLogFileHeaderW",
    "PdhExpandWildCardPathA",
    "PdhAdd009CounterW",
    "PdhGetRawCounterValue",
    "PdhReadRawLogRecord",
    "PdhVbIsGoodStatus",
    "PdhCalculateCounterFromRawValue",
    "PdhSetCounterScaleFactor",
    "PdhEnumObjectsHW",
    "PdhValidatePathExW",
    "PdhEnumObjectsHA",
    "PdhAddRelogCounter",
    "PdhEnumMachinesA",
    "PdhSetLogSetRunID",
    "PdhVerifySQLDBW",
    "PdhBrowseCountersHA",
    "PdhVerifySQLDBA",
    "PdhOpenQuery",
    "PdhVbGetDoubleCounterValue",
    "PdhVbOpenLog",
    "PdhMakeCounterPathW",
    "PdhTranslate009CounterW",
    "PdhGetDefaultPerfCounterA",
    "PdhLookupPerfNameByIndexA",
    "PdhBrowseCountersHW",
    "PdhBindInputDataSourceA",
    "PdhSelectDataSourceA",
    "PdhValidatePathW",
    "PdhGetDefaultPerfCounterHA",
    "PdhGetDllVersion",
    "PdhRemoveCounter",
    "PdhResetRelogCounterValues",
    "PdhListLogFileHeaderA",
    "PdhGetDefaultPerfObjectW",
    "PdhGetDataSourceTimeRangeW",
    "PdhBindInputDataSourceW",
    "PdhExpandWildCardPathHA",
    "PdhEnumLogSetNamesA",
    "PdhEnumMachinesW",
    "PdhGetRawCounterArrayW",
    "PdhOpenQueryA",
    "PdhUpdateLogW"
  ],
  "pdhui.dll": [
    "PdhUiSelectDataSourceW",
    "PdhUiSelectDataSourceA",
    "PdhUiBrowseCountersW",
    "PdhUiBrowseCountersExA",
    "PdhUiBrowseCountersExHW",
    "PdhUiBrowseCountersExHA",
    "PdhUiBrowseCountersHW",
    "PdhUiBrowseCountersA",
    "PdhUiBrowseCountersHA",
    "PdhUiBrowseCountersExW"
  ],
  "perfctrs.dll": [
    "CloseNbfPerformanceData",
    "CollectNWNBPerformanceData",
    "CollectTcpIpPerformanceData",
    "OpenNWNBPerformanceData",
    "OpenSPXPerformanceData",
    "OpenIPXPerformanceData",
    "CloseDhcpPerformanceData",
    "CloseSPXPerformanceData",
    "CloseIPXPerformanceData",
    "CloseTcpIpPerformanceData",
    "OpenTcpIpPerformanceData",
    "CloseNWNBPerformanceData",
    "CollectDhcpPerformanceData",
    "OpenDhcpPerformanceData",
    "OpenNbfPerformanceData",
    "CollectIPXPerformanceData",
    "CollectNbfPerformanceData",
    "CollectSPXPerformanceData"
  ],
  "perfdisk.dll": [
    "OpenDiskObject",
    "CollectDiskObjectData",
    "CloseDiskObject"
  ],
  "perfnet.dll": [
    "OpenNetSvcsObject",
    "CollectNetSvcsObjectData",
    "CloseNetSvcsObject"
  ],
  "perfos.dll": [
    "OpenOSObject",
    "CollectOSObjectData",
    "CloseOSObject"
  ],
  "perfproc.dll": [
    "OpenSysProcessObject",
    "CloseSysProcessObject",
    "CollectSysProcessObjectData"
  ],
  "perftrack.dll": [
    "WdiDiagnosticModuleMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "DllGetClassObject",
    "WdiHandleInstance",
    "DllRegisterServer"
  ],
  "perfts.dll": [
    "CollectTSObjectData",
    "CloseTSObject",
    "OpenTSObject"
  ],
  "photowiz.dll": [
    "DllInstall",
    "DllUnregisterServer",
    "DllMain",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "UsePPWForPrintTo"
  ],
  "pid.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "pidgenx.dll": [
    "PidGenX"
  ],
  "pifmgr.dll": "No exports",
  "pku2u.dll": [
    "SpUserModeInitialize",
    "SpLsaModeInitialize",
    "DllMain"
  ],
  "pla.dll": [
    "PlaExpandTaskArguments",
    "PlaHost",
    "PlaGetServerCapabilities",
    "DllCanUnloadNow",
    "PlaGetLegacyAlertActionsStringFromFlags",
    "PlaDeleteReport",
    "SvchostPushServiceGlobals",
    "PlaGetLegacyAlertActionsFlagsFromString",
    "DllGetClassObject",
    "PlaExtractCabinet",
    "PlaUpgrade",
    "PlaServer",
    "ServiceMain"
  ],
  "pmcsnap.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "pngfilt.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "pnidui.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "NwCategoryWiz"
  ],
  "pnpsetup.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "pnpts.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "pnpui.dll": [
    "InstallSecurityPrompt",
    "SimplifiedDINotificationW",
    "InstallSecurityPromptRunDllW"
  ],
  "pnrpauto.dll": [
    "PnrpAutoSVCServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "pnrpnsp.dll": [
    "NSPStartup"
  ],
  "pnrpsvc.dll": [
    "IMServiceMain",
    "SVCServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "polstore.dll": [
    "IPSecFreeISAKMPData",
    "IPSecCopyPolicyData",
    "IPSecCreateNegPolData",
    "IPSecFreeNegPolData",
    "IPSecSetPolicyData",
    "IPSecCreateNFAData",
    "IPSecFreeFilterSpecs",
    "IPSecAssignPolicy",
    "IPSecCreateFilterData",
    "IPSecFreePolStr",
    "IPSecEnumFilterData",
    "IPSecClosePolicyStore",
    "IPSecDeleteFilterData",
    "IPSecSetNFAData",
    "IPSecEnumISAKMPData",
    "IPSecFreeFilterData",
    "IPSecDeletePolicyData",
    "IPSecFreeMulPolicyData",
    "IPSecFreeMulNFAData",
    "IPSecGetAssignedPolicyData",
    "IPSecCopyFilterSpec",
    "IPSecSetISAKMPData",
    "IPSecIsDomainPolicyAssigned",
    "IPSecCopyNegPolData",
    "WriteDirectoryPolicyToWMI",
    "IPSecCreateISAKMPData",
    "IPSecDeleteNFAData",
    "IPSecImportPolicies",
    "IPSecDeleteNegPolData",
    "IPSecFreeMulFilterData",
    "IPSecAllocPolStr",
    "IPSecClearWMIStore",
    "IPSecEnumNegPolData",
    "IPSecExportPolicies",
    "IPSecCreatePolicyData",
    "IPSecCopyISAKMPData",
    "IPSecCopyFilterData",
    "IPSecFreeNFAData",
    "IPSecFreeMulISAKMPData",
    "IPSecCopyNFAData",
    "ProcessIPSECPolicyEx",
    "IPSecSetNegPolData",
    "IPSecDeleteISAKMPData",
    "IPSecOpenPolicyStore",
    "RegCreateNFAData",
    "IPSecEnumNFAData",
    "IPSecGetISAKMPData",
    "RegCreatePolicyData",
    "IPSecAllocPolMem",
    "IPSecGetNegPolData",
    "GenerateIPSECPolicy",
    "IPSecEnumPolicyData",
    "IPSecFreeMulNegPolData",
    "IPSecFreePolicyData",
    "IPSecUnassignPolicy",
    "IPSecCopyAuthMethod",
    "IPSecFreeFilterSpec",
    "IPSecGetFilterData",
    "IPSecSetFilterData"
  ],
  "pots.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "powercpl.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "powrprof.dll": [
    "PowerWritePossibleDescription",
    "PowerSettingRegisterNotification",
    "PowerWritePossibleFriendlyName",
    "PowerDebugDifPowerPolicies",
    "PowerReadValueMin",
    "PowerCreatePossibleSetting",
    "ReadGlobalPwrPolicy",
    "PowerReadSecurityDescriptor",
    "PowerWritePossibleValue",
    "PowerWriteSecurityDescriptor",
    "GetPwrDiskSpindownRange",
    "GetActivePwrScheme",
    "IsPwrShutdownAllowed",
    "PowerDebugDumpPowerPolicy",
    "PowerReadValueMax",
    "PowerWriteACDefaultIndex",
    "GUIDFormatToPowerPolicy",
    "PowerWriteDCValueIndex",
    "PowerRestoreIndividualDefaultPowerScheme",
    "PowerDeleteScheme",
    "PowerOpenSystemPowerKey",
    "PowerReadIconResourceSpecifier",
    "PowerDebugDumpSystemPowerPolicy",
    "WriteProcessorPwrScheme",
    "SetSuspendState",
    "PowerReplaceDefaultPowerSchemes",
    "GetPwrCapabilities",
    "PowerReadDescription",
    "PowerReadValueUnitsSpecifier",
    "PowerWriteValueMin",
    "ReadPwrScheme",
    "PowerCreateSetting",
    "IsPwrHibernateAllowed",
    "SetActivePwrScheme",
    "PowerGetActiveScheme",
    "PowerReadSettingAttributes",
    "DeletePwrScheme",
    "PowerReadPossibleFriendlyName",
    "PowerReadPossibleDescription",
    "LoadCurrentPwrScheme",
    "DevicePowerClose",
    "IsAdminOverrideActive",
    "PowerReadACValue",
    "CanUserWritePwrScheme",
    "PowerCustomizePlatformPowerSettings",
    "PowerReadACValueIndex",
    "PowerRemovePowerSetting",
    "GetCurrentPowerPolicies",
    "PowerReadACDefaultIndex",
    "PowerOpenUserPowerKey",
    "WriteGlobalPwrPolicy",
    "PowerRestoreDefaultPowerSchemes",
    "EnumPwrSchemes",
    "WritePwrScheme",
    "PowerSetAlsBrightnessOffset",
    "PowerWriteValueMax",
    "PowerWriteSettingAttributes",
    "PowerDebugDifSystemPowerPolicies",
    "PowerWriteDescription",
    "PowerReadDCValueIndex",
    "PowerSettingAccessCheck",
    "PowerWriteDCDefaultIndex",
    "PowerApplyPowerRequestOverride",
    "PowerDebugDumpPowerScheme",
    "PowerDebugDumpSystemPowerCapabilities",
    "PowerDeterminePlatformRole",
    "PowerSettingUnregisterNotification",
    "PowerSetActiveScheme",
    "PowerEnumerate",
    "PowerCanRestoreIndividualDefaultPowerScheme",
    "PowerPolicyToGUIDFormat",
    "GUIDFormatToGlobalPowerPolicy",
    "PowerReadDCValue",
    "PowerReadFriendlyName",
    "PowerImportPowerScheme",
    "DevicePowerSetDeviceState",
    "PowerDuplicateScheme",
    "PowerWriteACValueIndex",
    "PowerReadValueIncrement",
    "ValidatePowerPolicies",
    "IsPwrSuspendAllowed",
    "ReadProcessorPwrScheme",
    "PowerReadDCDefaultIndex",
    "MergeLegacyPwrScheme",
    "PowerWriteIconResourceSpecifier",
    "PowerReadPossibleValue",
    "DevicePowerEnumDevices",
    "PowerWriteFriendlyName",
    "PowerWriteValueUnitsSpecifier",
    "CallNtPowerInformation",
    "DevicePowerOpen",
    "PowerWriteValueIncrement"
  ],
  "ppcsnap.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "prflbmsg.dll": "No exports",
  "printfilterpipelineprxy.dll": [
    "EnumPrintProcessorDatatypesW",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "GetPrintProcessorCapabilities",
    "OpenPrintProcessor",
    "ControlPrintProcessor",
    "ClosePrintProcessor",
    "PrintDocumentOnPrintProcessor",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "printui.dll": [
    "ReleaseArgv",
    "vQueueCreate",
    "LaunchPlatformHelp",
    "bFolderEnumPrinters",
    "ConstructPrinterFriendlyName",
    "ConnectToPrinterDlg",
    "UnregisterPrintNotify",
    "RegisterPrintNotify",
    "DllRegisterServer",
    "bFolderRefresh",
    "DllUnregisterServer",
    "bFolderGetPrinter",
    "bPrinterSetup",
    "vServerPropPages",
    "vPrinterPropPages",
    "vDocumentDefaults",
    "DllMain",
    "ShowErrorMessageHR",
    "PrintUIEntryW",
    "PnPInterface",
    "DocumentPropertiesWrap",
    "ShowErrorMessageSC",
    "DllCanUnloadNow",
    "PrintNotifyTray_Exit",
    "PrintNotifyTray_Init",
    "PrinterPropPageProvider",
    "PrintUIDownloadAndInstallLegacyDriver",
    "StringToArgv",
    "DllGetClassObject",
    "ShowHelpLinkDialog"
  ],
  "prncache.dll": "No exports",
  "prnfldr.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "prnntfy.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "AsyncUILoaderEntryW",
    "PrintNotifyTray_Exit",
    "PrintNotifyTray_Init",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "prntvpt.dll": [
    "PTConvertPrintTicketToDevMode",
    "PTConvertDevModeToPrintTicket",
    "GetPrintCapabilitiesThunk",
    "PTQuerySchemaVersionSupport",
    "DllRegisterServer",
    "GetSchemaVersionThunk",
    "ConvertPrintTicketToDevModeThunk2",
    "DllUnregisterServer",
    "PTReleaseMemory",
    "PTMergeAndValidatePrintTicket",
    "GetPrintCapabilitiesThunk2",
    "PTOpenProviderEx",
    "DllMain",
    "MergeAndValidatePrintTicketThunk2",
    "GetDeviceDefaultPrintTicketThunk",
    "ConvertDevModeToPrintTicketThunk2",
    "PTCloseProvider",
    "UnbindPTProviderThunk",
    "PTGetPrintCapabilities",
    "MergeAndValidatePrintTicketThunk",
    "BindPTProviderThunk",
    "DllCanUnloadNow",
    "PTOpenProvider",
    "ConvertDevModeToPrintTicketThunk",
    "GetDeviceNamespacesThunk",
    "ConvertPrintTicketToDevModeThunk",
    "DllGetClassObject"
  ],
  "procinst.dll": [
    "ProcessorClassInstall"
  ],
  "profapi.dll": "No exports",
  "profprov.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "profsvc.dll": [
    "UserProfileServiceMain"
  ],
  "propsys.dll": [
    "PSRegisterPropertySchema",
    "PSPropertyBag_ReadDWORD",
    "InitPropVariantFromInt64Vector",
    "PSCreatePropertyStoreFromPropertySetStorage",
    "InitVariantFromGUIDAsString",
    "VariantToBooleanWithDefault",
    "PropVariantToUInt64Vector",
    "PropVariantToUInt16Vector",
    "PSPropertyBag_WritePOINTL",
    "PSPropertyKeyFromString",
    "PropVariantToStringAlloc",
    "PSPropertyBag_ReadPOINTL",
    "PropVariantGetInt32Elem",
    "PSRefreshPropertySchema",
    "PropVariantToFileTimeVectorAlloc",
    "PropVariantToDouble",
    "PropVariantToBoolean",
    "VariantGetUInt32Elem",
    "InitVariantFromVariantArrayElem",
    "PropVariantToStringVectorAlloc",
    "VariantToBooleanArray",
    "VariantToStringAlloc",
    "InitPropVariantFromBuffer",
    "VariantGetStringElem",
    "PSPropertyBag_WriteRECTL",
    "VariantToInt64Array",
    "PropVariantGetUInt32Elem",
    "VariantToUInt32ArrayAlloc",
    "PSGetPropertyDescriptionByName",
    "PropVariantGetFileTimeElem",
    "PSGetItemPropertyHandler",
    "InitPropVariantFromDoubleVector",
    "VariantToInt64",
    "InitVariantFromStringArray",
    "PSPropertyBag_WritePropertyKey",
    "PSGetPropertyKeyFromName",
    "PSPropertyBag_ReadStrAlloc",
    "PSPropertyBag_ReadULONGLONG",
    "PropVariantCompareEx",
    "VariantToInt32",
    "InitVariantFromUInt32Array",
    "VariantToInt32WithDefault",
    "InitPropVariantVectorFromPropVariant",
    "PSPropertyBag_ReadRECTL",
    "PSPropertyBag_ReadPropertyKey",
    "InitVariantFromBooleanArray",
    "VariantToStringArray",
    "PSPropertyBag_ReadStream",
    "VariantGetUInt16Elem",
    "VariantToStringWithDefault",
    "PSGetNamedPropertyFromPropertyStorage",
    "PSUnregisterPropertySchema",
    "PSPropertyBag_ReadBSTR",
    "PSPropertyBag_WriteGUID",
    "PropVariantGetDoubleElem",
    "PropVariantToUInt64WithDefault",
    "VariantToUInt64",
    "PropVariantToUInt32Vector",
    "VariantGetDoubleElem",
    "InitPropVariantFromUInt16Vector",
    "VariantToString",
    "VariantToUInt64ArrayAlloc",
    "VariantGetInt16Elem",
    "PropVariantToInt32Vector",
    "VariantToInt32Array",
    "PSPropertyBag_ReadUnknown",
    "VariantToUInt32Array",
    "PSPropertyBag_Delete",
    "PropVariantToDoubleWithDefault",
    "VariantToUInt16",
    "PSCreateMultiplexPropertyStore",
    "PSGetItemPropertyHandlerWithCreateObject",
    "InitPropVariantFromInt32Vector",
    "InitPropVariantFromFileTime",
    "PropVariantToFileTime",
    "VariantToPropVariant",
    "InitPropVariantFromInt16Vector",
    "VariantToStrRet",
    "VariantToInt64WithDefault",
    "VariantGetUInt64Elem",
    "InitPropVariantFromUInt64Vector",
    "PSPropertyBag_WriteStr",
    "PSCreateAdapterFromPropertyStore",
    "PSPropertyBag_WriteLONG",
    "VariantToUInt32WithDefault",
    "VariantToInt16WithDefault",
    "PSStringFromPropertyKey",
    "PSPropertyBag_WriteDWORD",
    "VariantToBooleanArrayAlloc",
    "PSPropertyBag_WritePOINTS",
    "PropVariantToFileTimeVector",
    "InitVariantFromStrRet",
    "PSFormatForDisplayAlloc",
    "VariantToDoubleWithDefault",
    "PropVariantToInt64VectorAlloc",
    "InitVariantFromInt64Array",
    "VariantToInt16",
    "PropVariantToInt64Vector",
    "VariantToDouble",
    "VariantToUInt16Array",
    "VariantToUInt32",
    "StgDeserializePropVariant",
    "InitPropVariantFromCLSID",
    "VariantToInt32ArrayAlloc",
    "VariantToFileTime",
    "VariantToStringArrayAlloc",
    "DllCanUnloadNow",
    "PSPropertyBag_ReadGUID",
    "PropVariantToInt32VectorAlloc",
    "VariantToInt16ArrayAlloc",
    "DllGetClassObject",
    "InitPropVariantFromFileTimeVector",
    "PSFormatForDisplay",
    "PSPropertyBag_WriteSHORT",
    "InitVariantFromResource",
    "InitPropVariantFromPropVariantVectorElem",
    "InitPropVariantFromGUIDAsString",
    "InitPropVariantFromUInt32Vector",
    "PropVariantChangeType",
    "PSPropertyBag_ReadType",
    "PropVariantToInt16",
    "PSGetNameFromPropertyKey",
    "VariantGetElementCount",
    "PropVariantToUInt32WithDefault",
    "InitVariantFromInt16Array",
    "PSCreatePropertyStoreFromObject",
    "PSPropertyBag_WriteStream",
    "PSGetPropertyFromPropertyStorage",
    "ClearVariantArray",
    "VariantToUInt16ArrayAlloc",
    "VariantToInt16Array",
    "VariantToUInt64WithDefault",
    "PSPropertyBag_ReadLONG",
    "PropVariantGetUInt16Elem",
    "PropVariantToBSTR",
    "InitPropVariantFromResource",
    "PropVariantToGUID",
    "GetProxyDllInfo",
    "VariantToDosDateTime",
    "PSGetPropertyValue",
    "VariantToDoubleArray",
    "PSPropertyBag_WriteInt",
    "VariantGetBooleanElem",
    "PropVariantGetStringElem",
    "PropVariantToStringVector",
    "PropVariantToUInt64VectorAlloc",
    "VariantToDoubleArrayAlloc",
    "PropVariantToString",
    "InitPropVariantFromStringAsVector",
    "PropVariantToBooleanWithDefault",
    "VariantToUInt64Array",
    "StgSerializePropVariant",
    "PropVariantToDoubleVectorAlloc",
    "PSPropertyBag_ReadBOOL",
    "PSPropertyBag_ReadPOINTS",
    "PropVariantToBooleanVector",
    "InitVariantFromFileTimeArray",
    "PropVariantToInt32WithDefault",
    "PSCreatePropertyChangeArray",
    "PropVariantToUInt32",
    "PropVariantToBuffer",
    "PSPropertyBag_ReadStr",
    "PSFormatPropertyValue",
    "PropVariantToStringWithDefault",
    "PropVariantToUInt16",
    "PSLookupPropertyHandlerCLSID",
    "InitVariantFromBuffer",
    "PropVariantGetBooleanElem",
    "PropVariantToInt64",
    "PropVariantToUInt32VectorAlloc",
    "InitVariantFromDoubleArray",
    "PropVariantToStrRet",
    "PSGetPropertyDescriptionListFromString",
    "PSSetPropertyValue",
    "PropVariantToVariant",
    "PropVariantToBooleanVectorAlloc",
    "PropVariantGetInt64Elem",
    "DllRegisterServer",
    "PropVariantToInt32",
    "PSPropertyBag_WriteULONGLONG",
    "DllUnregisterServer",
    "PropVariantToInt64WithDefault",
    "PropVariantGetElementCount",
    "InitVariantFromInt32Array",
    "PSEnumeratePropertyDescriptions",
    "InitPropVariantFromStrRet",
    "PropVariantToInt16Vector",
    "VariantToInt64ArrayAlloc",
    "PSCreateMemoryPropertyStore",
    "PropVariantGetUInt64Elem",
    "PSPropertyBag_ReadInt",
    "PSPropertyBag_WriteUnknown",
    "VariantToUInt16WithDefault",
    "PSCreateDelayedMultiplexPropertyStore",
    "PropVariantToInt16VectorAlloc",
    "PropVariantToUInt16VectorAlloc",
    "PSGetPropertyDescription",
    "PSGetImageReferenceForValue",
    "PSCoerceToCanonicalValue",
    "PropVariantGetInt16Elem",
    "VariantGetInt64Elem",
    "PSCreateSimplePropertyChange",
    "InitVariantFromFileTime",
    "InitVariantFromUInt16Array",
    "PSPropertyBag_WriteBSTR",
    "PSPropertyBag_ReadSHORT",
    "PropVariantToUInt64",
    "PSPropertyBag_WriteBOOL",
    "VariantGetInt32Elem",
    "PSGetPropertySystem",
    "ClearPropVariantArray",
    "VariantCompare",
    "InitPropVariantFromBooleanVector",
    "InitVariantFromUInt64Array",
    "PropVariantToInt16WithDefault",
    "VariantToBuffer",
    "InitPropVariantFromStringVector",
    "VariantToBoolean",
    "PropVariantToUInt16WithDefault",
    "VariantToGUID",
    "PropVariantToDoubleVector"
  ],
  "provsvc.dll": [
    "DllCanUnloadNow",
    "ProviderServiceMain",
    "DllGetClassObject"
  ],
  "provthrd.dll": [
    "public: class ProvFixedLengthDisplayStringType & __thiscall ProvFixedLengthDisplayStringType::operator=(class ProvFixedLengthDisplayStringType const &)",
    "public: __thiscall ProvOSIAddressType::ProvOSIAddressType(class ProvOSIAddressType const &)",
    "unsigned int __stdcall HashKey(unsigned short *)",
    "public: virtual class ProvInstanceType * __thiscall ProvFixedLengthDisplayStringType::Copy(void)const",
    "public: __thiscall ProvRowStatusType::ProvRowStatusType(long const &)",
    "public: long __thiscall WmiValueNode::ComparePropertyName(class WmiValueNode &)",
    "public: class ProvEnumeratedType & __thiscall ProvEnumeratedType::operator=(class ProvEnumeratedType const &)",
    "public: virtual class ProvValue * __thiscall ProvUInteger32::Copy(void)const",
    "protected: virtual int __thiscall ProvOpaque::Equivalent(class ProvValue const &)const",
    "public: __thiscall ProvIntegerType::ProvIntegerType(class ProvIntegerType const &)",
    "public: __thiscall ProvOctetStringType::ProvOctetStringType(class ProvOctetStringType const &)",
    "public: __thiscall WmiOperatorLikeNode::WmiOperatorLikeNode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: void __thiscall WmiTreeNode::GetParent(class WmiTreeNode * * &)",
    "protected: int __thiscall ProvPositiveRangedType::RangeDef(void)",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorIsANode::GetRange(void)",
    "public: virtual class ProvInstanceType * __thiscall ProvObjectIdentifierType::Copy(void)const",
    "public: class ProvFixedLengthOctetStringType & __thiscall ProvFixedLengthOctetStringType::operator=(class ProvFixedLengthOctetStringType const &)",
    "protected: virtual unsigned char * __thiscall ProvOctetString::Replicate(unsigned char const *,unsigned long)",
    "protected: int __thiscall ProvOctetStringType::Parse(unsigned short const *)",
    "public: class ProvValue & __thiscall ProvCounter::operator=(class ProvCounter const &)",
    "public: virtual unsigned short * __thiscall ProvTimeTicksType::GetStringValue(void)const",
    "public: virtual __thiscall ProvOctetString::~ProvOctetString(void)",
    "public: __thiscall ProvIpAddressType::ProvIpAddressType(class ProvIpAddress const &)",
    "public: __thiscall WmiNullRangeNode::WmiNullRangeNode(unsigned short *,unsigned long,class WmiTreeNode *,class WmiTreeNode *)",
    "public: virtual __thiscall WmiTreeNodeIterator::~WmiTreeNodeIterator(void)",
    "public: __thiscall ProvCounter64::ProvCounter64(unsigned long,unsigned long)",
    "const ProvObjectIdentifierType::`vftable'",
    "public: virtual class WmiTreeNodeIterator * __thiscall WmiTreeNodeIterator::Copy(void)",
    "public: virtual class ProvInstanceType * __thiscall ProvNullType::Copy(void)const",
    "public: void __thiscall ProvOctetString::SetValue(unsigned char const *,unsigned long)",
    "public: void __thiscall WmiOrNode::`default constructor closure'(void)",
    "public: __thiscall WmiRangeNode::WmiRangeNode(unsigned long,unsigned short *,unsigned long,int,int,int,int,class WmiTreeNode *,class WmiTreeNode *)",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorNotLikeNode::Copy(void)",
    "public: __thiscall WmiTreeNodeIterator::WmiTreeNodeIterator(class WmiTreeNodeIterator *)",
    "public: unsigned short * __thiscall WmiValueNode::GetPropertyName(void)",
    "public: __thiscall ProvUDPAddressType::ProvUDPAddressType(class ProvUDPAddressType const &)",
    "public: virtual int __thiscall ProvCounter64Type::IsProvV1Type(void)const",
    "private: __thiscall ProvValue::ProvValue(class ProvValue const &)",
    "const ProvNullType::`vftable'",
    "public: __thiscall WmiUnsignedIntegerNode::WmiUnsignedIntegerNode(class WmiUnsignedIntegerNode const &)",
    "const WmiOperatorLessNode::`vftable'",
    "public: int __thiscall ProvObjectIdentifier::operator!=(class ProvObjectIdentifier const &)const",
    "public: virtual class ProvInstanceType * __thiscall ProvPhysAddressType::Copy(void)const",
    "public: class Conjunctions * __thiscall Disjunctions::GetDisjunction(unsigned long)",
    "public: __thiscall ProvIpAddressType::ProvIpAddressType(unsigned short const *)",
    "public: virtual class ProvValue * __thiscall ProvObjectIdentifier::Copy(void)const",
    "public: int __thiscall PartitionSet::Root(void)",
    "const ProvOSIAddressType::`vftable'{for `ProvPositiveRangedType'}",
    "const ProvPositiveRangeType::`vftable'",
    "public: __thiscall ProvOSIAddressType::ProvOSIAddressType(unsigned char const *,unsigned long)",
    "const ProvFixedLengthPhysAddressType::`vftable'",
    "public: class CBString const & __thiscall CBString::operator=(unsigned short const *)",
    "protected: int __thiscall ProvIntegerType::Parse(unsigned short const *)",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorEqualOrGreaterNode::Copy(void)",
    "public: virtual __thiscall ProvAnalyser::~ProvAnalyser(void)",
    "public: int __thiscall ProvInteger::Equivalent(class ProvInteger const &)const",
    "public: __thiscall ProvCounter64Type::ProvCounter64Type(void)",
    "public: unsigned short * __thiscall WmiStringRangeNode::UpperBound(void)",
    "public: class ProvValue & __thiscall ProvTimeTicks::operator=(class ProvTimeTicks const &)",
    "protected: __thiscall ProvInstanceType::ProvInstanceType(class ProvInstanceType const &)",
    "public: void __thiscall WmiOperatorNotEqualNode::`default constructor closure'(void)",
    "public: class WmiAndNode & __thiscall WmiAndNode::operator=(class WmiAndNode const &)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::EvaluateAndExpression(class WmiTreeNode * &)",
    "public: int __thiscall ProvObjectIdentifier::Suffix(unsigned long,class ProvObjectIdentifier &)const",
    "const ProvTimeTicksType::`vftable'",
    "public: unsigned short * __thiscall ProvDisplayStringType::GetValue(void)const",
    "public: virtual __thiscall WmiOperatorNotIsANode::~WmiOperatorNotIsANode(void)",
    "const WmiStringNode::`vftable'",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::CreatePartitionSet(class Disjunctions *,class PartitionSet * &)",
    "public: class WmiOperatorNotIsANode & __thiscall WmiOperatorNotIsANode::operator=(class WmiOperatorNotIsANode const &)",
    "public: virtual __thiscall ProvGauge::~ProvGauge(void)",
    "protected: int __thiscall ProvNetworkAddressType::Parse(unsigned short const *)",
    "const ProvUDPAddressType::`vftable'{for `ProvPositiveRangedType'}",
    "public: unsigned long __thiscall WmiUnsignedIntegerRangeNode::LowerBound(void)",
    "const ProvFixedLengthOpaqueType::`vftable'{for `ProvPositiveRangedType'}",
    "public: virtual __thiscall ProvFixedLengthPhysAddressType::~ProvFixedLengthPhysAddressType(void)",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorLessNode::Copy(void)",
    "public: virtual __thiscall ProvGaugeType::~ProvGaugeType(void)",
    "public: __thiscall ProvOSIAddressType::ProvOSIAddressType(void)",
    "public: __thiscall WmiOperatorNotIsANode::WmiOperatorNotIsANode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: virtual int __thiscall ProvEventObject::Wait(void)",
    "public: virtual class ProvInstanceType * __thiscall ProvRowStatusType::Copy(void)const",
    "public: void __thiscall WmiOperatorEqualOrLessNode::`default constructor closure'(void)",
    "public: class ProvPhysAddressType & __thiscall ProvPhysAddressType::operator=(class ProvPhysAddressType const &)",
    "const ProvFixedLengthDisplayStringType::`vftable'{for `ProvPositiveRangedType'}",
    "public: class ProvRowStatusType & __thiscall ProvRowStatusType::operator=(class ProvRowStatusType const &)",
    "const WmiStringRangeNode::`vftable'",
    "public: virtual class WmiTreeNode * __thiscall WmiTreeNode::Copy(void)",
    "public: __thiscall ProvGauge::ProvGauge(class ProvGauge const &)",
    "const ProvFixedLengthOpaqueType::`vftable'",
    "public: virtual __thiscall ProvCounter::~ProvCounter(void)",
    "public: virtual __thiscall WmiOperatorEqualOrLessNode::~WmiOperatorEqualOrLessNode(void)",
    "protected: virtual int __thiscall ProvNetworkAddressType::Equivalent(class ProvInstanceType const &)const",
    "public: __thiscall WmiOperatorEqualOrLessNode::WmiOperatorEqualOrLessNode(class WmiOperatorEqualOrLessNode const &)",
    "public: unsigned long __thiscall WmiTreeNode::GetType(void)",
    "public: static char __stdcall ProvAnalyser::DecIntegerToOctChar(unsigned char)",
    "public: virtual __thiscall QueryPreprocessor::~QueryPreprocessor(void)",
    "protected: enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::RecursiveRemoveNonOverlappingRanges(class WmiTreeNode * &,class WmiTreeNode * &)",
    "const WmiUnsignedIntegerRangeNode::`vftable'",
    "public: __thiscall WmiOrNode::WmiOrNode(class WmiTreeNode *,class WmiTreeNode *,class WmiTreeNode *)",
    "const ProvOpaqueType::`vftable'{for `ProvInstanceType'}",
    "protected: int __thiscall ProvGaugeType::Parse(unsigned short const *)",
    "public: int __thiscall ProvObjectIdentifier::Prefix(unsigned long,class ProvObjectIdentifier &)const",
    "public: virtual __thiscall WmiOperatorEqualOrGreaterNode::~WmiOperatorEqualOrGreaterNode(void)",
    "const ProvOctetStringType::`vftable'{for `ProvInstanceType'}",
    "const WmiOperatorNode::`vftable'",
    "public: virtual __thiscall ProvObjectIdentifierType::~ProvObjectIdentifierType(void)",
    "public: void __thiscall ProvCounter64::SetValue(unsigned long,unsigned long)",
    "public: class ProvLexicon * __thiscall ProvAnalyser::Get(int,int,int)",
    "public: __thiscall QueryPreprocessor::QueryPreprocessor(void)",
    "protected: __thiscall ProvValue::ProvValue(void)",
    "public: __thiscall ProvInteger::ProvInteger(class ProvInteger const &)",
    "public: __thiscall WmiStringNode::WmiStringNode(unsigned short *,unsigned short *,enum WmiValueNode::WmiValueFunction,enum WmiValueNode::WmiValueFunction,unsigned long,class WmiTreeNode *)",
    "public: __thiscall WmiStringNode::WmiStringNode(class WmiStringNode const &)",
    "public: class ProvPositiveRangeType & __thiscall ProvPositiveRangeType::operator=(class ProvPositiveRangeType const &)",
    "public: void __thiscall WmiOperatorEqualNode::`default constructor closure'(void)",
    "public: virtual __thiscall ProvNull::~ProvNull(void)",
    "public: __thiscall ProvPositiveRangedType::ProvPositiveRangedType(class ProvPositiveRangedType const &)",
    "protected: class ProvLexicon * __thiscall ProvPositiveRangedType::Match(enum ProvLexicon::LexiconToken)",
    "public: __thiscall WmiOperatorLessNode::WmiOperatorLessNode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: virtual class ProvNegativeRangeType * __thiscall ProvNegativeRangeType::Copy(void)",
    "public: class ProvTimeTicksType & __thiscall ProvTimeTicksType::operator=(class ProvTimeTicksType const &)",
    "const ProvUDPAddressType::`vftable'{for `ProvInstanceType'}",
    "public: __thiscall ProvOpaqueType::ProvOpaqueType(class ProvOpaqueType const &)",
    "public: __thiscall ProvFixedLengthOctetStringType::ProvFixedLengthOctetStringType(unsigned long const &,unsigned short const *)",
    "public: __thiscall WmiUnsignedIntegerRangeNode::WmiUnsignedIntegerRangeNode(unsigned short *,unsigned long,int,int,int,int,unsigned long,unsigned long,class WmiTreeNode *,class WmiTreeNode *)",
    "public: int __thiscall WmiRangeNode::ClosedLowerBound(void)",
    "public: int __thiscall ProvUInteger32::Equivalent(class ProvUInteger32 const &)const",
    "public: static int __stdcall ProvAnalyser::IsOctal(unsigned short)",
    "public: enum WmiTriState __thiscall PartitionSet::Initialize(unsigned long)",
    "public: virtual class ProvInstanceType * __thiscall ProvEnumeratedType::Copy(void)const",
    "public: void __thiscall Conjunctions::SetRange(unsigned long,class WmiRangeNode *)",
    "public: unsigned short * __thiscall WmiStringNode::GetValue(void)",
    "public: class ProvIntegerType & __thiscall ProvIntegerType::operator=(class ProvIntegerType const &)",
    "public: void * __thiscall ProvOctetString::operator()(void)const",
    "public: __thiscall ProvGaugeType::ProvGaugeType(unsigned short const *)",
    "public: virtual __thiscall ProvUDPAddressType::~ProvUDPAddressType(void)",
    "public: void __cdecl ProvDebugLog::WriteFileAndLineA(char const *,unsigned long,char const *,...)",
    "public: virtual class WmiTreeNode * __thiscall WmiStringNode::Copy(void)",
    "protected: __thiscall ProvInstanceType::ProvInstanceType(int,int)",
    "public: class WmiSignedIntegerNode & __thiscall WmiSignedIntegerNode::operator=(class WmiSignedIntegerNode const &)",
    "protected: virtual void __thiscall ProvOctetString::UnReplicate(unsigned char *)",
    "const WmiOperatorNotIsANode::`vftable'",
    "private: int __thiscall ProvDateTimeType::Parse(unsigned short const *)",
    "public: virtual unsigned short * __thiscall ProvFixedLengthPhysAddressType::GetStringValue(void)const",
    "public: virtual void __thiscall WmiOperatorLikeNode::Print(void)",
    "public: void * __thiscall ProvIpAddress::operator()(void)const",
    "unsigned short * __stdcall DbcsToUnicodeString(char const *)",
    "const PartitionSet::`vftable'",
    "private: class ProvLexicon * __thiscall ProvDateTimeType::Match(enum ProvLexicon::LexiconToken)",
    "public: __thiscall ProvUDPAddressType::ProvUDPAddressType(class ProvOctetString const &)",
    "public: __thiscall ProvDisplayStringType::ProvDisplayStringType(unsigned short const *)",
    "public: virtual void __thiscall WmiOrNode::Print(void)",
    "public: __thiscall ProvObjectIdentifier::ProvObjectIdentifier(unsigned long const *,unsigned long)",
    "public: __thiscall WmiOperatorNode::WmiOperatorNode(unsigned long,class WmiTreeNode *,class WmiTreeNode *)",
    "public: enum WmiValueNode::WmiValueFunction __thiscall WmiValueNode::GetConstantFunction(void)",
    "public: int __thiscall ProvInstanceType::operator!=(class ProvInstanceType const &)const",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorLikeNode::Copy(void)",
    "public: __thiscall WmiOperatorNotEqualNode::WmiOperatorNotEqualNode(class WmiOperatorNotEqualNode const &)",
    "public: class WmiTreeNode * __thiscall WmiTreeNode::GetLeft(void)",
    "const ProvGaugeType::`vftable'{for `ProvInstanceType'}",
    "public: __thiscall ProvBitStringType::ProvBitStringType(unsigned short const *,unsigned short const * *,unsigned long const &)",
    "public: virtual __thiscall ProvInstanceType::~ProvInstanceType(void)",
    "public: static int __stdcall ProvAnalyser::IsEof(unsigned short)",
    "public: __thiscall WmiOperatorLessNode::WmiOperatorLessNode(class WmiOperatorLessNode const &)",
    "const ProvDateTimeType::`vftable'{for `ProvInstanceType'}",
    "public: __thiscall ProvNullType::ProvNullType(void)",
    "public: __thiscall ProvFixedLengthOpaqueType::ProvFixedLengthOpaqueType(unsigned long const &,unsigned char const *,unsigned long)",
    "public: virtual __thiscall ProvOpaqueType::~ProvOpaqueType(void)",
    "public: void __thiscall ProvPositiveRangeType::SetLowerBound(unsigned long const &)",
    "const ProvPhysAddressType::`vftable'{for `ProvPositiveRangedType'}",
    "protected: void __thiscall QueryPreprocessor::TransformAndOrExpression(class WmiTreeNode * &,class WmiTreeNode *,class WmiTreeNode *)",
    "public: __thiscall ProvOctetStringType::ProvOctetStringType(class ProvOctetString const &,unsigned short const *)",
    "public: __thiscall WmiOperatorEqualOrLessNode::WmiOperatorEqualOrLessNode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: __thiscall WmiUnsignedIntegerRangeNode::WmiUnsignedIntegerRangeNode(class WmiUnsignedIntegerRangeNode const &)",
    "public: virtual class ProvInstanceType * __thiscall ProvUDPAddressType::Copy(void)const",
    "public: char * __thiscall ProvObjectIdentifier::GetAllocatedString(void)const",
    "public: __thiscall WmiOperatorNotEqualNode::WmiOperatorNotEqualNode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorEqualNode::Copy(void)",
    "public: virtual void __thiscall ProvEventObject::Complete(void)",
    "public: void __thiscall ProvObjectIdentifier::SetValue(unsigned long const *,unsigned long)",
    "public: int __thiscall ProvObjectIdentifier::operator<(class ProvObjectIdentifier const &)const",
    "public: __thiscall Conjunctions::Conjunctions(unsigned long)",
    "public: unsigned long __thiscall WmiValueNode::GetIndex(void)",
    "public: virtual class ProvValue * __thiscall ProvTimeTicks::Copy(void)const",
    "public: virtual unsigned short * __thiscall ProvCounterType::GetStringValue(void)const",
    "protected: virtual unsigned long * __thiscall ProvObjectIdentifier::Replicate(unsigned long const *,unsigned long,unsigned long const *,unsigned long)const",
    "const ProvFixedLengthPhysAddressType::`vftable'{for `ProvPositiveRangedType'}",
    "public: virtual class WmiTreeNode * __thiscall WmiOrNode::Copy(void)",
    "public: virtual __thiscall ProvNetworkAddressType::~ProvNetworkAddressType(void)",
    "public: class WmiNullRangeNode & __thiscall WmiNullRangeNode::operator=(class WmiNullRangeNode const &)",
    "public: unsigned long * __thiscall ProvObjectIdentifier::GetValue(void)const",
    "public: void __thiscall WmiOperatorIsANode::`default constructor closure'(void)",
    "public: int __thiscall WmiRangeNode::ClosedUpperBound(void)",
    "public: virtual __thiscall ProvDateTimeType::~ProvDateTimeType(void)",
    "public: __thiscall ProvRowStatusType::ProvRowStatusType(class ProvRowStatusType const &)",
    "protected: enum ProvObjectIdentifier::Comparison __thiscall ProvObjectIdentifier::Compare(class ProvObjectIdentifier const &,class ProvObjectIdentifier const &)const",
    "public: class ProvFixedLengthOpaqueType & __thiscall ProvFixedLengthOpaqueType::operator=(class ProvFixedLengthOpaqueType const &)",
    "public: void __thiscall ProvOctetStringType::`default constructor closure'(void)",
    "const ProvFixedLengthPhysAddressType::`vftable'{for `ProvInstanceType'}",
    "public: int __thiscall ProvInstanceType::operator==(class ProvInstanceType const &)const",
    "public: __thiscall WmiOrNode::WmiOrNode(class WmiOrNode const &)",
    "public: class ProvValue & __thiscall ProvOpaque::operator=(class ProvOpaque const &)",
    "public: virtual class WmiTreeNode * __thiscall WmiTreeNode::CopyNode(void)",
    "const ProvOctetString::`vftable'",
    "public: int __thiscall ProvGauge::Equivalent(class ProvGauge const &)const",
    "public: class ProvGaugeType & __thiscall ProvGaugeType::operator=(class ProvGaugeType const &)",
    "public: class WmiRangeNode & __thiscall WmiRangeNode::operator=(class WmiRangeNode const &)",
    "public: static char __stdcall ProvAnalyser::DecIntegerToDecChar(unsigned char)",
    "const ProvFixedLengthDisplayStringType::`vftable'{for `ProvInstanceType'}",
    "public: void __thiscall WmiTreeNode::SetType(unsigned long)",
    "const WmiNullRangeNode::`vftable'",
    "public: class WmiTreeNode * __thiscall WmiTreeNode::SetRight(class WmiTreeNode *)",
    "protected: int __thiscall ProvOSIAddressType::Parse(unsigned short const *)",
    "public: class ProvAnalyser & __thiscall ProvAnalyser::operator=(class ProvAnalyser const &)",
    "const ProvNegativeRangeType::`vftable'",
    "public: virtual void __thiscall WmiStringNode::Print(void)",
    "public: class WmiOperatorLikeNode & __thiscall WmiOperatorLikeNode::operator=(class WmiOperatorLikeNode const &)",
    "public: virtual unsigned short * __thiscall ProvNullType::GetStringValue(void)const",
    "public: __thiscall ProvEnumeratedType::ProvEnumeratedType(unsigned short const *,unsigned short const *)",
    "public: __thiscall ProvEnumeratedType::ProvEnumeratedType(class ProvEnumeratedType const &)",
    "protected: enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::RemoveInvariants(void *,class WmiTreeNode * &)",
    "public: __thiscall CBString::CBString(void)",
    "public: virtual unsigned short * __thiscall ProvDateTimeType::GetStringValue(void)const",
    "public: void * __thiscall WmiTreeNode::GetData(void)",
    "protected: enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::RecursiveDisjunctiveNormalForm(class WmiTreeNode * &)",
    "public: __thiscall ProvOctetString::ProvOctetString(unsigned char const *,unsigned long)",
    "public: __thiscall ProvGaugeType::ProvGaugeType(unsigned short const *,unsigned short const *)",
    "public: virtual class ProvInstanceType * __thiscall ProvDisplayStringType::Copy(void)const",
    "public: class ProvValue & __thiscall ProvCounter64::operator=(class ProvCounter64 const &)",
    "protected: void __thiscall QueryPreprocessor::TransformOrFalseEvaluation(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: __thiscall ProvNetworkAddressType::ProvNetworkAddressType(void)",
    "public: unsigned long & __thiscall ProvObjectIdentifier::operator[](unsigned long)const",
    "public: virtual __thiscall ProvIpAddressType::~ProvIpAddressType(void)",
    "public: virtual void __thiscall WmiOperatorEqualOrLessNode::Print(void)",
    "const WmiTreeNode::`vftable'",
    "protected: virtual int __thiscall ProvNullType::Equivalent(class ProvInstanceType const &)const",
    "public: int __thiscall WmiRangeNode::InfiniteUpperBound(void)",
    "public: class WmiTreeNode & __thiscall WmiTreeNode::operator=(class WmiTreeNode const &)",
    "public: virtual void __thiscall WmiAndNode::Print(void)",
    "private: int __thiscall ProvEnumeratedType::RecursiveDef(void)",
    "public: __thiscall ProvNetworkAddressType::ProvNetworkAddressType(class ProvIpAddress const &)",
    "public: virtual __thiscall WmiSignedIntegerNode::~WmiSignedIntegerNode(void)",
    "public: virtual __thiscall ProvValue::~ProvValue(void)",
    "public: virtual unsigned short * __thiscall ProvGaugeType::GetStringValue(void)const",
    "public: virtual class ProvInstanceType * __thiscall ProvIpAddressType::Copy(void)const",
    "public: unsigned long __thiscall ProvOpaque::GetValueLength(void)const",
    "public: __thiscall ProvInteger::ProvInteger(long)",
    "public: int __thiscall WmiSignedIntegerNode::LexicographicallyAfter(long &)",
    "const WmiOrNode::`vftable'",
    "public: static unsigned long __stdcall ProvAnalyser::OctWCharToDecInteger(unsigned short)",
    "public: virtual unsigned short * __thiscall ProvFixedLengthDisplayStringType::GetStringValue(void)const",
    "public: unsigned long __thiscall ProvUInteger32::GetValue(void)const",
    "public: __thiscall ProvFixedLengthOpaqueType::ProvFixedLengthOpaqueType(unsigned long const &,unsigned short const *)",
    "public: __thiscall ProvTimeTicksType::ProvTimeTicksType(void)",
    "public: virtual unsigned short * __thiscall ProvIpAddressType::GetStringValue(void)const",
    "char * __stdcall UnicodeToDbcsString(unsigned short const *)",
    "public: virtual unsigned short * __thiscall ProvObjectIdentifierType::GetStringValue(void)const",
    "public: __thiscall ProvLexicon::ProvLexicon(void)",
    "const ProvGauge::`vftable'",
    "public: virtual class ProvValue * __thiscall ProvGauge::Copy(void)const",
    "public: int __thiscall ProvObjectIdentifier::operator>(class ProvObjectIdentifier const &)const",
    "public: static unsigned short __stdcall ProvAnalyser::DecIntegerToOctWChar(unsigned char)",
    "public: virtual unsigned short * __thiscall ProvCounter64Type::GetStringValue(void)const",
    "public: __thiscall ProvOctetStringType::ProvOctetStringType(unsigned short const *)",
    "public: __thiscall WmiTreeNode::WmiTreeNode(unsigned long,void *,class WmiTreeNode *,class WmiTreeNode *,class WmiTreeNode *)",
    "public: class ProvFixedLengthPhysAddressType & __thiscall ProvFixedLengthPhysAddressType::operator=(class ProvFixedLengthPhysAddressType const &)",
    "const WmiNotNode::`vftable'",
    "public: virtual unsigned short * __thiscall ProvUDPAddressType::GetStringValue(void)const",
    "public: void __thiscall ProvPhysAddressType::`default constructor closure'(void)",
    "public: __thiscall Conjunctions::~Conjunctions(void)",
    "public: __thiscall WmiUnsignedIntegerNode::WmiUnsignedIntegerNode(unsigned short *,unsigned long,unsigned long,class WmiTreeNode *)",
    "public: class ProvCounter64Type & __thiscall ProvCounter64Type::operator=(class ProvCounter64Type const &)",
    "public: __thiscall ProvDateTimeType::ProvDateTimeType(class ProvDateTimeType const &)",
    "const WmiOperatorIsANode::`vftable'",
    "public: virtual __thiscall WmiOrNode::~WmiOrNode(void)",
    "public: class ProvOctetStringType & __thiscall ProvOctetStringType::operator=(class ProvOctetStringType const &)",
    "public: __thiscall ProvFixedLengthDisplayStringType::ProvFixedLengthDisplayStringType(unsigned long const &)",
    "public: void __thiscall ProvGauge::SetValue(unsigned long)",
    "public: void __thiscall ProvIntegerType::`default constructor closure'(void)",
    "public: __thiscall ProvEventObject::ProvEventObject(class ProvEventObject const &)",
    "public: void __thiscall WmiTreeNode::`default constructor closure'(void)",
    "protected: int __thiscall ProvOpaqueType::Parse(unsigned short const *)",
    "public: long __thiscall WmiSignedIntegerRangeNode::LowerBound(void)",
    "public: unsigned short * __thiscall WmiStringRangeNode::LowerBound(void)",
    "public: void * __thiscall ProvObjectIdentifier::operator()(void)const",
    "public: __thiscall ProvOpaque::ProvOpaque(unsigned char const *,unsigned long)",
    "public: __thiscall ProvOSIAddressType::ProvOSIAddressType(unsigned short const *)",
    "public: virtual void __thiscall WmiOperatorNotIsANode::Print(void)",
    "public: static unsigned short __stdcall ProvAnalyser::DecIntegerToDecWChar(unsigned char)",
    "public: void __cdecl ProvDebugLog::WriteFileAndLine(char const *,unsigned long,unsigned short const *,...)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::SortConditionals(class WmiTreeNode * &)",
    "public: unsigned long __thiscall ProvCounter64::GetHighValue(void)const",
    "public: __thiscall WmiSignedIntegerNode::WmiSignedIntegerNode(unsigned short *,long,unsigned long,class WmiTreeNode *)",
    "public: __thiscall ProvMacAddressType::ProvMacAddressType(unsigned char const *)",
    "const ProvDisplayStringType::`vftable'{for `ProvPositiveRangedType'}",
    "public: __thiscall ProvFixedType::ProvFixedType(unsigned long)",
    "public: __thiscall ProvEventObject::ProvEventObject(unsigned short const *)",
    "public: virtual __thiscall ProvBitStringType::~ProvBitStringType(void)",
    "public: __thiscall ProvNullType::ProvNullType(class ProvNull const &)",
    "public: virtual __thiscall ProvIntegerType::~ProvIntegerType(void)",
    "public: __thiscall ProvIpAddress::ProvIpAddress(char const *)",
    "public: class ProvBitStringType & __thiscall ProvBitStringType::operator=(class ProvBitStringType const &)",
    "const ProvEventObject::`vftable'",
    "public: virtual class ProvValue * __thiscall ProvOpaque::Copy(void)const",
    "protected: virtual int __thiscall ProvTimeTicksType::Equivalent(class ProvInstanceType const &)const",
    "public: virtual __thiscall ProvPositiveRangedType::~ProvPositiveRangedType(void)",
    "public: class ProvDebugLog & __thiscall ProvDebugLog::operator=(class ProvDebugLog const &)",
    "public: unsigned long __thiscall ProvObjectIdentifier::GetValueLength(void)const",
    "public: unsigned long __thiscall ProvBitStringType::GetValue(unsigned short * * &)const",
    "public: enum WmiTriState __thiscall WmiStringRangeNode::GetOverlappingRange(class WmiStringRangeNode &,class WmiStringRangeNode * &)",
    "public: void __thiscall ProvGaugeType::`default constructor closure'(void)",
    "public: virtual __thiscall ProvPositiveRangedType::operator void *(void)",
    "public: __thiscall ProvDateTimeType::ProvDateTimeType(unsigned short const *)",
    "public: virtual __thiscall ProvObjectIdentifier::~ProvObjectIdentifier(void)",
    "const ProvFixedLengthDisplayStringType::`vftable'",
    "public: __thiscall WmiTreeNodeIterator::WmiTreeNodeIterator(class WmiTreeNode *)",
    "public: class PartitionSet & __thiscall PartitionSet::operator=(class PartitionSet const &)",
    "public: virtual void __thiscall WmiNullRangeNode::Print(void)",
    "public: void __thiscall ProvInstanceType::SetStatus(int)",
    "const WmiValueNode::`vftable'",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorGreaterNode::Copy(void)",
    "public: __thiscall ProvNegativeRangeType::ProvNegativeRangeType(void)",
    "public: long __thiscall ProvIntegerType::GetValue(void)const",
    "public: unsigned long __thiscall ProvOpaqueType::GetValueLength(void)const",
    "public: __thiscall ProvFixedLengthOpaqueType::ProvFixedLengthOpaqueType(unsigned long const &)",
    "const WmiAndNode::`vftable'",
    "public: __thiscall ProvDateTimeType::ProvDateTimeType(void)",
    "const WmiOperatorLikeNode::`vftable'",
    "public: int __thiscall ProvPositiveRangedType::Check(unsigned long const &)",
    "public: unsigned long __thiscall ProvObjectIdentifierType::GetValueLength(void)const",
    "public: class ProvObjectIdentifierType & __thiscall ProvObjectIdentifierType::operator=(class ProvObjectIdentifierType const &)",
    "public: enum ProvRowStatusType::ProvRowStatusEnum __thiscall ProvRowStatusType::GetRowStatus(void)const",
    "protected: virtual unsigned long * __thiscall ProvObjectIdentifier::Replicate(unsigned long const *,unsigned long)const",
    "public: __thiscall WmiRangeNode::WmiRangeNode(class WmiRangeNode const &)",
    "public: class WmiUnsignedIntegerRangeNode & __thiscall WmiUnsignedIntegerRangeNode::operator=(class WmiUnsignedIntegerRangeNode const &)",
    "public: unsigned long __thiscall PartitionSet::GetKeyIndex(void)",
    "public: virtual class WmiTreeNode * __thiscall WmiSignedIntegerNode::Copy(void)",
    "public: __thiscall ProvTimeTicks::ProvTimeTicks(unsigned long)",
    "public: class WmiOrNode & __thiscall WmiOrNode::operator=(class WmiOrNode const &)",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorLikeExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: class ProvFixedType & __thiscall ProvFixedType::operator=(class ProvFixedType const &)",
    "public: void __thiscall ProvPositiveRangeType::SetUpperBound(unsigned long const &)",
    "public: __thiscall ProvOpaqueType::ProvOpaqueType(unsigned short const *,unsigned short const *)",
    "public: __thiscall ProvMacAddressType::ProvMacAddressType(unsigned short const *)",
    "public: __thiscall WmiTreeNode::WmiTreeNode(class WmiTreeNode const &)",
    "public: __thiscall ProvDebugLog::ProvDebugLog(char)",
    "public: virtual class WmiTreeNode * __thiscall WmiNullRangeNode::Copy(void)",
    "public: void __thiscall ProvEventObject::`default constructor closure'(void)",
    "const ProvIpAddressType::`vftable'",
    "private: void __thiscall ProvObjectIdentifier::OverWrite(unsigned long const *)",
    "public: unsigned short * __thiscall WmiRangeNode::GetPropertyName(void)",
    "public: virtual __thiscall WmiOperatorNotLikeNode::~WmiOperatorNotLikeNode(void)",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorNotLikeNode::GetRange(void)",
    "const ProvIntegerType::`vftable'{for `ProvNegativeRangedType'}",
    "public: class ProvObjectIdentifier __thiscall ProvObjectIdentifier::operator+(class ProvObjectIdentifier const &)const",
    "const WmiOperatorNotLikeNode::`vftable'",
    "public: int __thiscall ProvObjectIdentifier::operator<=(class ProvObjectIdentifier const &)const",
    "public: unsigned long __thiscall WmiRangeNode::GetIndex(void)",
    "public: void __thiscall WmiNotNode::`default constructor closure'(void)",
    "const ProvPositiveRangedType::`vftable'",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::EvaluateOrExpression(class WmiTreeNode * &)",
    "public: virtual class WmiTreeNode * __thiscall WmiNotNode::Copy(void)",
    "public: __thiscall WmiTreeNodeIterator::WmiTreeNodeIterator(class WmiTreeNodeIterator const &)",
    "public: __thiscall PartitionSet::PartitionSet(class PartitionSet const &)",
    "public: class ProvValue & __thiscall ProvObjectIdentifier::operator=(class ProvObjectIdentifier const &)",
    "protected: virtual int __thiscall ProvCounter::Equivalent(class ProvValue const &)const",
    "public: int __thiscall ProvIpAddress::Equivalent(class ProvIpAddress const &)const",
    "public: int __thiscall ProvTimeTicks::Equivalent(class ProvTimeTicks const &)const",
    "public: class WmiTreeNode * __thiscall WmiTreeNode::GetParent(void)",
    "protected: int __thiscall ProvPhysAddressType::Parse(unsigned short const *)",
    "public: unsigned long __thiscall ProvGaugeType::GetValue(void)const",
    "public: virtual class ProvValue * __thiscall ProvIpAddress::Copy(void)const",
    "public: __thiscall ProvOSIAddressType::ProvOSIAddressType(class ProvOctetString const &)",
    "public: __thiscall WmiNullRangeNode::WmiNullRangeNode(class WmiNullRangeNode const &)",
    "public: int __thiscall ProvObjectIdentifier::operator==(class ProvObjectIdentifier const &)const",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorNotIsAExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: unsigned long __thiscall ProvPositiveRangeType::GetUpperBound(void)",
    "public: virtual class ProvValue * __thiscall ProvInteger::Copy(void)const",
    "public: virtual int __thiscall ProvInstanceType::IsProvV1Type(void)const",
    "public: virtual int __thiscall ProvInstanceType::IsValid(void)const",
    "public: virtual __thiscall ProvEnumeratedType::~ProvEnumeratedType(void)",
    "public: class ProvEventObject & __thiscall ProvEventObject::operator=(class ProvEventObject const &)",
    "public: virtual void __thiscall WmiOperatorNotLikeNode::Print(void)",
    "public: virtual unsigned short * __thiscall ProvOpaqueType::GetStringValue(void)const",
    "public: __thiscall ProvFixedLengthOpaqueType::ProvFixedLengthOpaqueType(unsigned long const &,class ProvOpaque const &)",
    "public: class ProvDisplayStringType & __thiscall ProvDisplayStringType::operator=(class ProvDisplayStringType const &)",
    "const WmiUnsignedIntegerNode::`vftable'",
    "public: __thiscall ProvFixedLengthPhysAddressType::ProvFixedLengthPhysAddressType(unsigned long const &,class ProvOctetString const &)",
    "public: static long ProvDebugLog::s_ReferenceCount",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorIsANode::Copy(void)",
    "protected: virtual int __thiscall ProvTimeTicks::Equivalent(class ProvValue const &)const",
    "public: virtual __thiscall ProvCounter64Type::~ProvCounter64Type(void)",
    "public: __thiscall ProvLexicon::~ProvLexicon(void)",
    "public: virtual __thiscall WmiUnsignedIntegerNode::~WmiUnsignedIntegerNode(void)",
    "public: __thiscall ProvOpaque::ProvOpaque(class ProvOpaque const &)",
    "public: void __cdecl ProvDebugLog::WriteW(unsigned short const *,...)",
    "public: class WmiTreeNode * __thiscall WmiTreeNodeIterator::SetIterator(class WmiTreeNode *)",
    "const ProvOctetStringType::`vftable'{for `ProvPositiveRangedType'}",
    "public: virtual class ProvInstanceType * __thiscall ProvFixedLengthOpaqueType::Copy(void)const",
    "public: __thiscall WmiOperatorLikeNode::WmiOperatorLikeNode(class WmiOperatorLikeNode const &)",
    "public: __thiscall WmiOperatorEqualNode::WmiOperatorEqualNode(class WmiOperatorEqualNode const &)",
    "public: virtual void __thiscall WmiOperatorEqualOrGreaterNode::Print(void)",
    "public: __thiscall ProvOctetString::ProvOctetString(class ProvOctetString const &)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::CreateDisjunctions(void *,class WmiTreeNode *,class Disjunctions *,unsigned long,unsigned short * *,unsigned long &)",
    "protected: virtual void __thiscall ProvAnalyser::Initialise(void)",
    "public: virtual __thiscall ProvTimeTicksType::~ProvTimeTicksType(void)",
    "public: unsigned long __thiscall ProvCounterType::GetValue(void)const",
    "protected: void __thiscall QueryPreprocessor::TransformNotNotExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: virtual __thiscall ProvFixedType::~ProvFixedType(void)",
    "public: __thiscall ProvMacAddressType::ProvMacAddressType(void)",
    "public: void __thiscall ProvEventObject::Set(void)",
    "public: __thiscall ProvFixedLengthOpaqueType::ProvFixedLengthOpaqueType(class ProvFixedLengthOpaqueType const &)",
    "public: __thiscall ProvIntegerType::ProvIntegerType(unsigned short const *)",
    "public: virtual class ProvValue * __thiscall ProvCounter::Copy(void)const",
    "protected: int __thiscall ProvPositiveRangedType::RecursiveDef(void)",
    "private: int __thiscall ProvEnumeratedType::Parse(unsigned short const *)",
    "protected: virtual void __thiscall ProvObjectIdentifier::UnReplicate(unsigned long *)",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorNotEqualExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: int __thiscall ProvOctetString::Equivalent(class ProvOctetString const &)const",
    "public: virtual void __thiscall WmiUnsignedIntegerRangeNode::Print(void)",
    "protected: enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::RemoveNonOverlappingRanges(class WmiTreeNode * &)",
    "public: __thiscall WmiOperatorIsANode::WmiOperatorIsANode(class WmiTreeNode *,class WmiTreeNode *)",
    "private: int __thiscall ProvBitStringType::BitStringDef(void)",
    "public: void __thiscall ProvLexicon::SetToken(enum ProvLexicon::LexiconToken)",
    "public: __thiscall ProvGauge::ProvGauge(long)",
    "const ProvValue::`vftable'",
    "public: unsigned short * __thiscall ProvDateTimeType::GetValue(void)const",
    "public: void __thiscall WmiOperatorLessNode::`default constructor closure'(void)",
    "public: virtual class WmiTreeNode * __thiscall WmiSignedIntegerRangeNode::Copy(void)",
    "private: void __thiscall ProvDateTimeType::PushBack(void)",
    "private: int __thiscall ProvDateTimeType::DateTimeDef(void)",
    "public: __thiscall ProvIpAddressType::ProvIpAddressType(class ProvIpAddressType const &)",
    "public: __thiscall ProvAnalyser::ProvAnalyser(unsigned short const *)",
    "public: virtual __thiscall ProvCounterType::~ProvCounterType(void)",
    "public: unsigned long __thiscall ProvTimeTicksType::GetValue(void)const",
    "public: virtual void __thiscall WmiTreeNode::Print(void)",
    "public: static class ProvDebugLog * __stdcall ProvDebugLog::GetProvDebugLog(char)",
    "public: unsigned long __thiscall ProvIpAddressType::GetValue(void)const",
    "public: virtual __thiscall ProvFixedLengthOpaqueType::~ProvFixedLengthOpaqueType(void)",
    "protected: int __thiscall ProvObjectIdentifier::Equivalent(class ProvObjectIdentifier const &)const",
    "public: __thiscall ProvPositiveRangeType::ProvPositiveRangeType(void)",
    "public: virtual __thiscall ProvOSIAddressType::~ProvOSIAddressType(void)",
    "public: unsigned long __thiscall ProvIpAddress::GetValue(void)const",
    "protected: virtual int __thiscall ProvOctetString::Equivalent(class ProvValue const &)const",
    "public: class ProvUDPAddressType & __thiscall ProvUDPAddressType::operator=(class ProvUDPAddressType const &)",
    "public: virtual __thiscall WmiUnsignedIntegerRangeNode::~WmiUnsignedIntegerRangeNode(void)",
    "protected: void __thiscall QueryPreprocessor::SortRanges(unsigned long,unsigned long *,class WmiRangeNode * *)",
    "public: __thiscall ProvMacAddressType::ProvMacAddressType(class ProvMacAddressType const &)",
    "public: virtual void __thiscall WmiSignedIntegerRangeNode::Print(void)",
    "public: __thiscall ProvEnumeratedType::ProvEnumeratedType(unsigned short const *)",
    "public: enum WmiTriState __thiscall Disjunctions::Initialize(void)",
    "public: class ProvOSIAddressType & __thiscall ProvOSIAddressType::operator=(class ProvOSIAddressType const &)",
    "public: virtual __thiscall WmiAndNode::~WmiAndNode(void)",
    "public: class WmiTreeNode * __thiscall WmiTreeNode::GetRight(void)",
    "public: static class ProvDebugLog * ProvDebugLog::s_ProvDebugLog",
    "public: virtual class ProvInstanceType * __thiscall ProvCounter64Type::Copy(void)const",
    "public: void __cdecl ProvDebugLog::WriteA(char const *,...)",
    "public: int __thiscall ProvPositiveRangedType::IsValid(void)",
    "public: __thiscall WmiSignedIntegerNode::WmiSignedIntegerNode(class WmiSignedIntegerNode const &)",
    "private: void __thiscall ProvDateTimeType::Encode(unsigned long const &,unsigned long const &,unsigned long const &,unsigned long const &,unsigned long const &,unsigned long const &,unsigned long const &,unsigned long const &,unsigned long const &,unsigned long const &,unsigned long const &)",
    "public: unsigned long __thiscall Disjunctions::GetDisjunctionCount(void)",
    "public: enum WmiTriState __thiscall WmiUnsignedIntegerRangeNode::GetIntersectingRange(class WmiUnsignedIntegerRangeNode &,class WmiUnsignedIntegerRangeNode * &)",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorNotEqualNode::Copy(void)",
    "public: __thiscall PartitionSet::PartitionSet(void)",
    "const ProvDisplayStringType::`vftable'{for `ProvInstanceType'}",
    "public: class WmiRangeNode * __thiscall Conjunctions::GetRange(unsigned long)",
    "public: virtual __thiscall ProvUInteger32::~ProvUInteger32(void)",
    "public: __thiscall ProvFixedLengthOctetStringType::ProvFixedLengthOctetStringType(class ProvFixedLengthOctetStringType const &)",
    "public: class WmiOperatorEqualOrGreaterNode & __thiscall WmiOperatorEqualOrGreaterNode::operator=(class WmiOperatorEqualOrGreaterNode const &)",
    "const ProvEnumeratedType::`vftable'{for `ProvNegativeRangedType'}",
    "public: virtual __thiscall WmiOperatorNotEqualNode::~WmiOperatorNotEqualNode(void)",
    "public: void __thiscall ProvEventObject::Clear(void)",
    "public: class WmiOperatorLessNode & __thiscall WmiOperatorLessNode::operator=(class WmiOperatorLessNode const &)",
    "unsigned short * __stdcall UnicodeStringAppend(unsigned short const *,unsigned short const *)",
    "public: __thiscall WmiStringRangeNode::WmiStringRangeNode(unsigned short *,unsigned long,int,int,int,int,unsigned short *,unsigned short *,class WmiTreeNode *,class WmiTreeNode *)",
    "public: void __thiscall ProvAnalyser::`default constructor closure'(void)",
    "const WmiOperatorEqualNode::`vftable'",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::EvaluateNotExpression(class WmiTreeNode * &)",
    "const ProvPhysAddressType::`vftable'{for `ProvInstanceType'}",
    "const ProvUDPAddressType::`vftable'",
    "const ProvFixedLengthOpaqueType::`vftable'{for `ProvInstanceType'}",
    "public: __thiscall ProvCounter64::ProvCounter64(class ProvCounter64 const &)",
    "public: __thiscall WmiAndNode::WmiAndNode(class WmiAndNode const &)",
    "const ProvDateTimeType::`vftable'{for `ProvPositiveRangedType'}",
    "public: __thiscall WmiSignedIntegerRangeNode::WmiSignedIntegerRangeNode(class WmiSignedIntegerRangeNode const &)",
    "const ProvFixedLengthOctetStringType::`vftable'{for `ProvPositiveRangedType'}",
    "const ProvIpAddress::`vftable'",
    "public: virtual class ProvPositiveRangeType * __thiscall ProvPositiveRangeType::Copy(void)",
    "public: __thiscall ProvCounterType::ProvCounterType(unsigned short const *)",
    "public: unsigned short * __thiscall CBString::GetString(void)",
    "public: __thiscall Disjunctions::~Disjunctions(void)",
    "public: static unsigned long __stdcall ProvAnalyser::DecCharToDecInteger(char)",
    "protected: int __thiscall ProvCounterType::Parse(unsigned short const *)",
    "public: virtual class ProvInstanceType * __thiscall ProvOpaqueType::Copy(void)const",
    "public: unsigned char * __thiscall ProvOctetStringType::GetValue(void)const",
    "public: virtual class ProvInstanceType * __thiscall ProvFixedLengthOctetStringType::Copy(void)const",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorGreaterNode::GetRange(void)",
    "protected: void __thiscall QueryPreprocessor::TransformOperatorToRange(class WmiTreeNode * &)",
    "public: virtual void __thiscall WmiNotNode::Print(void)",
    "private: class ProvLexicon * __thiscall ProvEnumeratedType::Get(void)",
    "public: __thiscall WmiOperatorNotLikeNode::WmiOperatorNotLikeNode(class WmiOperatorNotLikeNode const &)",
    "public: virtual class ProvInstanceType * __thiscall ProvBitStringType::Copy(void)const",
    "public: __thiscall ProvBitStringType::ProvBitStringType(unsigned short const *)",
    "public: __thiscall ProvDisplayStringType::ProvDisplayStringType(class ProvDisplayStringType const &)",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorNotIsANode::GetRange(void)",
    "public: __thiscall WmiSignedIntegerRangeNode::WmiSignedIntegerRangeNode(unsigned short *,unsigned long,int,int,int,int,long,long,class WmiTreeNode *,class WmiTreeNode *)",
    "public: __thiscall ProvNullType::ProvNullType(class ProvNullType const &)",
    "protected: virtual int __thiscall ProvCounter64Type::Equivalent(class ProvInstanceType const &)const",
    "const ProvNetworkAddressType::`vftable'",
    "public: __thiscall WmiOperatorNode::WmiOperatorNode(class WmiOperatorNode const &)",
    "public: enum WmiTriState __thiscall WmiSignedIntegerRangeNode::GetIntersectingRange(class WmiSignedIntegerRangeNode &,class WmiSignedIntegerRangeNode * &)",
    "protected: virtual int __thiscall ProvCounterType::Equivalent(class ProvInstanceType const &)const",
    "public: void __thiscall PartitionSet::SetKeyIndex(unsigned long)",
    "public: __thiscall ProvAnalyser::ProvAnalyser(class ProvAnalyser const &)",
    "const ProvFixedType::`vftable'",
    "const WmiNullNode::`vftable'",
    "protected: int __thiscall ProvPositiveRangedType::Parse(unsigned short const *)",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorEqualNode::GetRange(void)",
    "public: void __thiscall ProvInteger::SetValue(long)",
    "public: unsigned long __thiscall ProvOctetStringType::GetValueLength(void)const",
    "public: __thiscall ProvGaugeType::ProvGaugeType(unsigned long,unsigned short const *)",
    "public: __thiscall WmiAndNode::WmiAndNode(class WmiTreeNode *,class WmiTreeNode *,class WmiTreeNode *)",
    "public: unsigned long __thiscall PartitionSet::GetPartitionCount(void)",
    "const ProvCounter::`vftable'",
    "public: class ProvPositiveRangedType & __thiscall ProvPositiveRangedType::operator=(class ProvPositiveRangedType const &)",
    "protected: int __thiscall QueryPreprocessor::Evaluate(void *,struct SQL_LEVEL_1_RPN_EXPRESSION &,class WmiTreeNode * *)",
    "public: __thiscall CBString::CBString(unsigned short const *)",
    "public: virtual unsigned short * __thiscall ProvBitStringType::GetStringValue(void)const",
    "protected: virtual int __thiscall ProvIpAddressType::Equivalent(class ProvInstanceType const &)const",
    "public: virtual class ProvInstanceType * __thiscall ProvOctetStringType::Copy(void)const",
    "const WmiSignedIntegerRangeNode::`vftable'",
    "public: __thiscall ProvObjectIdentifierType::ProvObjectIdentifierType(unsigned long const *,unsigned long)",
    "public: unsigned char * __thiscall ProvOctetString::GetValue(void)const",
    "private: int __thiscall ProvEnumeratedType::EnumerationDef(void)",
    "public: __thiscall ProvDisplayStringType::ProvDisplayStringType(class ProvOctetString const &,unsigned short const *)",
    "public: virtual __thiscall ProvEventObject::~ProvEventObject(void)",
    "public: virtual __thiscall ProvPositiveRangeType::~ProvPositiveRangeType(void)",
    "public: __thiscall ProvCounter64Type::ProvCounter64Type(class ProvCounter64Type const &)",
    "public: class WmiStringRangeNode & __thiscall WmiStringRangeNode::operator=(class WmiStringRangeNode const &)",
    "protected: void __thiscall QueryPreprocessor::PrintTree(class WmiTreeNode *)",
    "protected: void __thiscall QueryPreprocessor::TransformNonIntersectingRange(class WmiTreeNode * &,class WmiTreeNode *)",
    "const ProvObjectIdentifier::`vftable'",
    "public: __thiscall WmiValueNode::WmiValueNode(unsigned long,unsigned short *,enum WmiValueNode::WmiValueFunction,enum WmiValueNode::WmiValueFunction,unsigned long,class WmiTreeNode *)",
    "public: unsigned long __thiscall ProvDebugLog::GetLevel(void)",
    "public: int __thiscall WmiRangeNode::InfiniteLowerBound(void)",
    "const ProvAnalyser::`vftable'",
    "public: __thiscall ProvFixedType::ProvFixedType(class ProvFixedType const &)",
    "protected: void __thiscall QueryPreprocessor::QuickSort(class WmiRangeNode * *,unsigned long *,unsigned long)",
    "public: void __thiscall ProvPositiveRangedType::SetStatus(int const &)",
    "protected: virtual int __thiscall ProvAnalyser::Analyse(class ProvLexicon *,unsigned long &,unsigned short,unsigned short const *,unsigned long &,int,int,int)",
    "public: __thiscall ProvNetworkAddressType::ProvNetworkAddressType(unsigned short const *)",
    "public: unsigned short * __thiscall ProvFixedLengthDisplayStringType::GetValue(void)const",
    "public: __thiscall ProvCounter64Type::ProvCounter64Type(unsigned short const *)",
    "const WmiSignedIntegerNode::`vftable'",
    "private: class ProvLexicon * __thiscall ProvBitStringType::Get(void)",
    "protected: enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::DisjunctiveNormalForm(class WmiTreeNode * &)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::RecursiveSortConditionals(class WmiTreeNode * &,class WmiTreeNode * &)",
    "public: __thiscall ProvRowStatusType::ProvRowStatusType(enum ProvRowStatusType::ProvRowStatusEnum const &)",
    "public: enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::Query(unsigned short *,struct SQL_LEVEL_1_RPN_EXPRESSION * &)",
    "public: void __thiscall ProvCounter64Type::GetValue(unsigned long &,unsigned long &)const",
    "public: __thiscall WmiOperatorIsANode::WmiOperatorIsANode(class WmiOperatorIsANode const &)",
    "const ProvCounter64Type::`vftable'",
    "public: class ProvMacAddressType & __thiscall ProvMacAddressType::operator=(class ProvMacAddressType const &)",
    "public: __thiscall WmiNullNode::WmiNullNode(class WmiNullNode const &)",
    "private: class ProvValue & __thiscall ProvValue::operator=(class ProvValue const &)",
    "public: virtual __thiscall WmiNotNode::~WmiNotNode(void)",
    "private: class ProvLexicon * __thiscall ProvBitStringType::Match(enum ProvLexicon::LexiconToken)",
    "public: void __thiscall ProvIpAddress::SetValue(unsigned long)",
    "public: unsigned long * __thiscall ProvObjectIdentifierType::GetValue(void)const",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::EvaluateNotEqualExpression(class WmiTreeNode * &)",
    "public: void __thiscall ProvNegativeRangeType::SetLowerBound(long const &)",
    "public: unsigned short * __thiscall ProvRowStatusType::GetValue(void)const",
    "public: virtual void __thiscall WmiOperatorNotEqualNode::Print(void)",
    "public: virtual __thiscall ProvPhysAddressType::~ProvPhysAddressType(void)",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorIsAExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: class WmiNullNode & __thiscall WmiNullNode::operator=(class WmiNullNode const &)",
    "public: virtual __thiscall ProvInteger::~ProvInteger(void)",
    "public: class WmiValueNode & __thiscall WmiValueNode::operator=(class WmiValueNode const &)",
    "public: void __thiscall ProvOpaqueType::`default constructor closure'(void)",
    "public: virtual void __thiscall WmiOperatorGreaterNode::Print(void)",
    "public: void __thiscall WmiAndNode::`default constructor closure'(void)",
    "protected: int __thiscall ProvCounter64Type::Parse(unsigned short const *)",
    "public: void __thiscall WmiOperatorNotLikeNode::`default constructor closure'(void)",
    "public: __thiscall ProvNull::ProvNull(void)",
    "public: virtual unsigned short * __thiscall ProvMacAddressType::GetStringValue(void)const",
    "public: static unsigned long __stdcall ProvAnalyser::DecWCharToDecInteger(unsigned short)",
    "public: enum ProvLexicon::LexiconToken __thiscall ProvLexicon::GetToken(void)",
    "public: class CBString & __thiscall CBString::operator=(class CBString const &)",
    "public: unsigned long __thiscall ProvPositiveRangeType::GetLowerBound(void)",
    "unsigned short * __stdcall UnicodeStringDuplicate(unsigned short const *)",
    "private: class ProvLexicon * __thiscall ProvAnalyser::GetToken(int,int,int)",
    "const ProvEnumeratedType::`vftable'{for `ProvInstanceType'}",
    "public: __thiscall WmiNotNode::WmiNotNode(class WmiNotNode const &)",
    "public: void __thiscall ProvInstanceType::SetNull(int)",
    "public: static int __stdcall ProvAnalyser::IsHex(unsigned short)",
    "public: void __thiscall ProvCounter::SetValue(unsigned long)",
    "public: class WmiOperatorNotLikeNode & __thiscall WmiOperatorNotLikeNode::operator=(class WmiOperatorNotLikeNode const &)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::RecursiveSort(class WmiTreeNode * &)",
    "protected: int __thiscall ProvFixedLengthPhysAddressType::Parse(unsigned short const *)",
    "public: __thiscall ProvCounterType::ProvCounterType(void)",
    "public: static unsigned long __stdcall ProvAnalyser::HexWCharToDecInteger(unsigned short)",
    "public: virtual unsigned short * __thiscall ProvRowStatusType::GetStringValue(void)const",
    "public: __thiscall ProvObjectIdentifier::ProvObjectIdentifier(char const *)",
    "public: unsigned long __thiscall WmiUnsignedIntegerNode::GetValue(void)",
    "public: __thiscall ProvTimeTicksType::ProvTimeTicksType(class ProvTimeTicks const &)",
    "public: __thiscall CBString::~CBString(void)",
    "public: __thiscall ProvOpaqueType::ProvOpaqueType(unsigned short const *)",
    "protected: void __thiscall QueryPreprocessor::TransformAndTrueEvaluation(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: __thiscall ProvPositiveRangedType::ProvPositiveRangedType(unsigned short const *)",
    "const ProvOSIAddressType::`vftable'{for `ProvInstanceType'}",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::RemoveOverlaps(unsigned long *,unsigned long,unsigned long *,unsigned long *,class WmiRangeNode * *)",
    "public: class ProvNetworkAddressType & __thiscall ProvNetworkAddressType::operator=(class ProvNetworkAddressType const &)",
    "public: int __thiscall ProvValue::operator!=(class ProvValue const &)const",
    "const ProvRowStatusType::`vftable'{for `ProvInstanceType'}",
    "public: __thiscall ProvFixedLengthOctetStringType::ProvFixedLengthOctetStringType(unsigned long const &)",
    "public: virtual __thiscall ProvIpAddress::~ProvIpAddress(void)",
    "public: virtual __thiscall WmiNullRangeNode::~WmiNullRangeNode(void)",
    "const ProvOpaque::`vftable'",
    "public: void __thiscall ProvDisplayStringType::`default constructor closure'(void)",
    "public: void __thiscall WmiOperatorGreaterNode::`default constructor closure'(void)",
    "public: class Conjunctions & __thiscall Conjunctions::operator=(class Conjunctions const &)",
    "public: long __thiscall ProvNegativeRangeType::GetUpperBound(void)",
    "public: unsigned long __thiscall WmiUnsignedIntegerRangeNode::UpperBound(void)",
    "public: __thiscall ProvNetworkAddressType::ProvNetworkAddressType(class ProvNetworkAddressType const &)",
    "const WmiOperatorGreaterNode::`vftable'",
    "public: void __thiscall ProvPositiveRangedType::`default constructor closure'(void)",
    "const WmiOperatorEqualOrGreaterNode::`vftable'",
    "protected: int __thiscall ProvTimeTicksType::Parse(unsigned short const *)",
    "public: virtual __thiscall ProvRowStatusType::~ProvRowStatusType(void)",
    "public: __thiscall ProvIntegerType::ProvIntegerType(unsigned short const *,unsigned short const *)",
    "const ProvMacAddressType::`vftable'",
    "protected: virtual void __thiscall ProvObjectIdentifier::Initialize(unsigned long const *,unsigned long)",
    "public: virtual class ProvInstanceType * __thiscall ProvDateTimeType::Copy(void)const",
    "const ProvBitStringType::`vftable'{for `ProvInstanceType'}",
    "public: __thiscall CBString::CBString(int)",
    "public: enum WmiTriState __thiscall WmiSignedIntegerRangeNode::GetOverlappingRange(class WmiSignedIntegerRangeNode &,class WmiSignedIntegerRangeNode * &)",
    "public: int __thiscall ProvValue::operator==(class ProvValue const &)const",
    "public: virtual __thiscall WmiTreeNode::~WmiTreeNode(void)",
    "public: virtual unsigned short * __thiscall ProvOSIAddressType::GetStringValue(void)const",
    "public: void __thiscall WmiTreeNode::GetRight(class WmiTreeNode * * &)",
    "public: void __thiscall ProvNegativeRangeType::SetUpperBound(long const &)",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorEqualExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: virtual unsigned short * __thiscall ProvNetworkAddressType::GetStringValue(void)const",
    "public: __thiscall ProvPhysAddressType::ProvPhysAddressType(class ProvOctetString const &,unsigned short const *)",
    "public: class ProvValue & __thiscall ProvNull::operator=(class ProvNull const &)",
    "public: class ProvValue & __thiscall ProvOctetString::operator=(class ProvOctetString const &)",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorLessNode::GetRange(void)",
    "const WmiTreeNodeIterator::`vftable'",
    "public: int __thiscall WmiStringNode::LexicographicallyBefore(unsigned short * &)",
    "public: __thiscall ProvOctetStringType::ProvOctetStringType(unsigned short const *,unsigned short const *)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::ConvertToRanges(class WmiTreeNode * &)",
    "public: __thiscall ProvFixedLengthDisplayStringType::ProvFixedLengthDisplayStringType(unsigned long const &,unsigned short const *)",
    "public: class ProvLexicon & __thiscall ProvLexicon::operator=(class ProvLexicon const &)",
    "public: void __thiscall WmiTreeNode::GetLeft(class WmiTreeNode * * &)",
    "public: class WmiOperatorNotEqualNode & __thiscall WmiOperatorNotEqualNode::operator=(class WmiOperatorNotEqualNode const &)",
    "protected: virtual int __thiscall ProvCounter64::Equivalent(class ProvValue const &)const",
    "protected: void __thiscall QueryPreprocessor::CountDisjunctions(class WmiTreeNode *,unsigned long &)",
    "public: __thiscall ProvDisplayStringType::ProvDisplayStringType(unsigned short const *,unsigned short const *)",
    "public: unsigned long __thiscall ProvOctetString::GetValueLength(void)const",
    "protected: virtual int __thiscall ProvOpaqueType::Equivalent(class ProvInstanceType const &)const",
    "public: int __thiscall PartitionSet::Leaf(void)",
    "public: class ProvValue & __thiscall ProvGauge::operator=(class ProvGauge const &)",
    "public: static char __stdcall ProvAnalyser::DecIntegerToHexChar(unsigned char)",
    "public: class WmiOperatorEqualOrLessNode & __thiscall WmiOperatorEqualOrLessNode::operator=(class WmiOperatorEqualOrLessNode const &)",
    "public: void __thiscall WmiOperatorEqualOrGreaterNode::`default constructor closure'(void)",
    "public: static int __stdcall ProvAnalyser::IsLeadingDecimal(unsigned short)",
    "public: void * __thiscall WmiTreeNode::SetData(void *)",
    "const ProvInstanceType::`vftable'",
    "public: __thiscall ProvPhysAddressType::ProvPhysAddressType(unsigned char const *,unsigned long,unsigned short const *)",
    "public: __thiscall ProvUDPAddressType::ProvUDPAddressType(unsigned char const *)",
    "public: __thiscall ProvCounter::ProvCounter(unsigned long)",
    "public: enum WmiValueNode::WmiValueFunction __thiscall WmiValueNode::GetPropertyFunction(void)",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorLessExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: virtual __thiscall WmiOperatorEqualNode::~WmiOperatorEqualNode(void)",
    "public: void __thiscall PartitionSet::SetPartition(unsigned long,class PartitionSet *)",
    "public: class ProvNullType & __thiscall ProvNullType::operator=(class ProvNullType const &)",
    "const ProvNull::`vftable'",
    "protected: virtual int __thiscall ProvObjectIdentifier::Equivalent(class ProvValue const &)const",
    "public: unsigned long __thiscall ProvGauge::GetValue(void)const",
    "public: virtual __thiscall WmiOperatorGreaterNode::~WmiOperatorGreaterNode(void)",
    "const ProvInteger::`vftable'",
    "public: virtual class ProvInstanceType * __thiscall ProvTimeTicksType::Copy(void)const",
    "public: __thiscall WmiStringRangeNode::WmiStringRangeNode(class WmiStringRangeNode const &)",
    "public: __thiscall ProvEnumeratedType::ProvEnumeratedType(unsigned short const *,class ProvInteger const &)",
    "public: __thiscall ProvFixedLengthOctetStringType::ProvFixedLengthOctetStringType(unsigned long const &,class ProvOctetString const &)",
    "public: enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::PreProcess(void *,struct SQL_LEVEL_1_RPN_EXPRESSION *,class WmiTreeNode *,unsigned long,unsigned short * *,class PartitionSet * &)",
    "public: class ProvCounterType & __thiscall ProvCounterType::operator=(class ProvCounterType const &)",
    "public: static class ProvDebugLog * ProvDebugLog::s_aLogs",
    "public: int __thiscall WmiStringNode::LexicographicallyAfter(unsigned short * &)",
    "public: __thiscall WmiOperatorEqualOrGreaterNode::WmiOperatorEqualOrGreaterNode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: virtual __thiscall ProvOpaque::~ProvOpaque(void)",
    "public: int __thiscall ProvOpaque::Equivalent(class ProvOpaque const &)const",
    "public: static unsigned short __stdcall ProvAnalyser::DecIntegerToHexWChar(unsigned char)",
    "const ProvCounterType::`vftable'",
    "protected: void __thiscall QueryPreprocessor::TransformIntersectingRange(class WmiTreeNode * &,class WmiTreeNode *,class WmiTreeNode *)",
    "public: unsigned char * __thiscall ProvOpaqueType::GetValue(void)const",
    "private: class ProvLexicon * __thiscall ProvEnumeratedType::Match(enum ProvLexicon::LexiconToken)",
    "public: int __thiscall ProvDebugLog::GetLogging(void)",
    "protected: void __thiscall QueryPreprocessor::RecursiveQuickSort(class WmiRangeNode * *,unsigned long *,unsigned long,unsigned long)",
    "public: virtual unsigned short * __thiscall ProvOctetStringType::GetStringValue(void)const",
    "public: virtual __thiscall WmiOperatorLikeNode::~WmiOperatorLikeNode(void)",
    "protected: void __thiscall QueryPreprocessor::TransformNotEqualExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: virtual int __thiscall ProvInstanceType::IsNull(void)const",
    "int __stdcall CompareElements(unsigned short * const *,unsigned short * const *)",
    "public: __thiscall ProvTimeTicks::ProvTimeTicks(class ProvTimeTicks const &)",
    "public: __thiscall ProvFixedLengthDisplayStringType::ProvFixedLengthDisplayStringType(class ProvFixedLengthDisplayStringType const &)",
    "public: virtual __thiscall WmiSignedIntegerRangeNode::~WmiSignedIntegerRangeNode(void)",
    "protected: int __thiscall ProvMacAddressType::Parse(unsigned short const *)",
    "public: __thiscall WmiNullNode::WmiNullNode(unsigned short *,unsigned long,class WmiTreeNode *)",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorEqualOrLessExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: virtual __thiscall ProvMacAddressType::~ProvMacAddressType(void)",
    "public: virtual void __thiscall ProvEventObject::Process(void)",
    "public: virtual class WmiTreeNode * __thiscall WmiStringRangeNode::Copy(void)",
    "protected: void __thiscall ProvPositiveRangedType::PushBack(void)",
    "public: class WmiSignedIntegerRangeNode & __thiscall WmiSignedIntegerRangeNode::operator=(class WmiSignedIntegerRangeNode const &)",
    "public: __thiscall ProvIpAddress::ProvIpAddress(unsigned long)",
    "public: virtual __thiscall ProvTimeTicks::~ProvTimeTicks(void)",
    "const ProvRowStatusType::`vftable'{for `ProvNegativeRangedType'}",
    "protected: int __thiscall QueryPreprocessor::RecursiveEvaluate(void *,struct SQL_LEVEL_1_RPN_EXPRESSION &,class WmiTreeNode *,class WmiTreeNode * *,int &)",
    "public: class ProvValue & __thiscall ProvInteger::operator=(class ProvInteger const &)",
    "public: virtual void __thiscall WmiUnsignedIntegerNode::Print(void)",
    "public: __thiscall ProvDateTimeType::ProvDateTimeType(class ProvOctetString const &)",
    "protected: int __thiscall ProvUDPAddressType::Parse(unsigned short const *)",
    "protected: virtual class ProvLexicon * __thiscall ProvAnalyser::CreateLexicon(void)",
    "protected: virtual int __thiscall ProvObjectIdentifierType::Equivalent(class ProvInstanceType const &)const",
    "const ProvFixedLengthOctetStringType::`vftable'{for `ProvInstanceType'}",
    "const ProvTimeTicks::`vftable'",
    "const ProvUInteger32::`vftable'",
    "public: virtual __thiscall PartitionSet::~PartitionSet(void)",
    "private: class ProvLexicon * __thiscall ProvDateTimeType::Get(void)",
    "public: virtual void __thiscall WmiNullNode::Print(void)",
    "public: __thiscall ProvObjectIdentifierType::ProvObjectIdentifierType(class ProvObjectIdentifier const &)",
    "public: long __thiscall WmiSignedIntegerNode::GetValue(void)",
    "public: virtual class ProvInstanceType * __thiscall ProvGaugeType::Copy(void)const",
    "public: virtual __thiscall ProvInstanceType::operator void *(void)",
    "const QueryPreprocessor::`vftable'",
    "public: unsigned short * __thiscall ProvEnumeratedType::GetValue(void)const",
    "public: __thiscall ProvIntegerType::ProvIntegerType(long,unsigned short const *)",
    "public: virtual class ProvValue * __thiscall ProvOctetString::Copy(void)const",
    "public: unsigned long __thiscall Conjunctions::GetRangeCount(void)",
    "public: void __cdecl ProvDebugLog::WriteFileAndLineW(unsigned short const *,unsigned long,unsigned short const *,...)",
    "public: __thiscall ProvRowStatusType::ProvRowStatusType(unsigned short const *)",
    "protected: virtual int __thiscall ProvUInteger32::Equivalent(class ProvValue const &)const",
    "public: class QueryPreprocessor & __thiscall QueryPreprocessor::operator=(class QueryPreprocessor const &)",
    "public: class WmiStringNode & __thiscall WmiStringNode::operator=(class WmiStringNode const &)",
    "public: virtual __thiscall ProvOctetStringType::~ProvOctetStringType(void)",
    "public: virtual class WmiTreeNode * __thiscall WmiNullNode::Copy(void)",
    "public: __thiscall ProvIpAddress::ProvIpAddress(class ProvIpAddress const &)",
    "public: unsigned long __thiscall ProvCounter64::GetLowValue(void)const",
    "public: class WmiTreeNode * __thiscall WmiTreeNode::SetParent(class WmiTreeNode *)",
    "public: void __thiscall ProvInstanceType::`default constructor closure'(void)",
    "protected: virtual int __thiscall ProvInteger::Equivalent(class ProvValue const &)const",
    "public: __thiscall WmiOperatorEqualNode::WmiOperatorEqualNode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: class WmiTreeNode * __thiscall WmiTreeNodeIterator::GetIterator(void)",
    "const ProvIntegerType::`vftable'{for `ProvInstanceType'}",
    "public: class ProvIpAddressType & __thiscall ProvIpAddressType::operator=(class ProvIpAddressType const &)",
    "public: __thiscall ProvFixedLengthPhysAddressType::ProvFixedLengthPhysAddressType(unsigned long const &,unsigned short const *)",
    "const ProvMacAddressType::`vftable'{for `ProvInstanceType'}",
    "protected: virtual int __thiscall ProvIpAddress::Equivalent(class ProvValue const &)const",
    "public: __thiscall ProvRowStatusType::ProvRowStatusType(class ProvInteger const &)",
    "public: void __thiscall ProvAnalyser::PutBack(class ProvLexicon const *)",
    "protected: void __thiscall QueryPreprocessor::TransformNotAndExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: virtual __thiscall ProvDisplayStringType::~ProvDisplayStringType(void)",
    "public: __thiscall ProvIpAddressType::ProvIpAddressType(unsigned long)",
    "public: __thiscall ProvUInteger32::ProvUInteger32(long)",
    "public: __thiscall Disjunctions::Disjunctions(unsigned long,unsigned long)",
    "public: static int __stdcall ProvDebugLog::Startup(void)",
    "public: virtual __thiscall WmiNullNode::~WmiNullNode(void)",
    "public: virtual class WmiTreeNode * __thiscall WmiAndNode::Copy(void)",
    "private: void __thiscall ProvOctetString::OverWrite(unsigned char const *)",
    "public: int __thiscall WmiSignedIntegerNode::LexicographicallyBefore(long &)",
    "private: int __thiscall ProvBitStringType::Parse(unsigned short const *)",
    "public: class Disjunctions & __thiscall Disjunctions::operator=(class Disjunctions const &)",
    "protected: void __thiscall QueryPreprocessor::TransformNotOrExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: unsigned long __thiscall ProvNetworkAddressType::GetValue(void)const",
    "public: void __thiscall ProvAnalyser::Set(unsigned short const *)",
    "public: __thiscall ProvOpaqueType::ProvOpaqueType(class ProvOpaque const &,unsigned short const *)",
    "public: class ProvNegativeRangeType & __thiscall ProvNegativeRangeType::operator=(class ProvNegativeRangeType const &)",
    "public: static unsigned long __stdcall ProvAnalyser::HexCharToDecInteger(char)",
    "protected: virtual int __thiscall ProvGauge::Equivalent(class ProvValue const &)const",
    "public: __thiscall ProvFixedLengthPhysAddressType::ProvFixedLengthPhysAddressType(class ProvFixedLengthPhysAddressType const &)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::CreateDisjunctionContainer(void *,class WmiTreeNode *,unsigned long,unsigned short * *,class Disjunctions * &)",
    "public: static unsigned long __stdcall ProvAnalyser::OctCharToDecInteger(char)",
    "public: __thiscall ProvCounterType::ProvCounterType(class ProvCounter const &)",
    "public: __thiscall ProvUDPAddressType::ProvUDPAddressType(unsigned short const *)",
    "public: __thiscall ProvObjectIdentifierType::ProvObjectIdentifierType(void)",
    "public: __thiscall WmiNotNode::WmiNotNode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: union ProvLexiconValue * __thiscall ProvLexicon::GetValue(void)",
    "public: class WmiOperatorEqualNode & __thiscall WmiOperatorEqualNode::operator=(class WmiOperatorEqualNode const &)",
    "public: __thiscall ProvObjectIdentifierType::ProvObjectIdentifierType(class ProvObjectIdentifierType const &)",
    "const ProvCounter64::`vftable'",
    "const ProvGaugeType::`vftable'{for `ProvPositiveRangedType'}",
    "public: virtual __thiscall WmiValueNode::~WmiValueNode(void)",
    "public: virtual int __thiscall ProvNullType::IsProvV2CType(void)const",
    "public: void __cdecl ProvDebugLog::WriteFileAndLine(unsigned short const *,unsigned long,unsigned short const *,...)",
    "public: virtual class ProvInstanceType * __thiscall ProvCounterType::Copy(void)const",
    "public: __thiscall ProvNegativeRangeType::ProvNegativeRangeType(long,long)",
    "public: virtual __thiscall ProvAnalyser::operator void *(void)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::RecursiveInsertNode(class WmiTreeNode * &,class WmiTreeNode * &)",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorEqualOrLessNode::Copy(void)",
    "public: virtual class WmiTreeNode * __thiscall WmiUnsignedIntegerRangeNode::Copy(void)",
    "public: virtual unsigned short * __thiscall ProvIntegerType::GetStringValue(void)const",
    "protected: virtual int __thiscall ProvIntegerType::Equivalent(class ProvInstanceType const &)const",
    "public: unsigned long __thiscall ProvTimeTicks::GetValue(void)const",
    "public: __thiscall ProvRowStatusType::ProvRowStatusType(void)",
    "public: static int __stdcall ProvAnalyser::IsAlphaNumeric(unsigned short)",
    "public: __thiscall ProvFixedLengthPhysAddressType::ProvFixedLengthPhysAddressType(unsigned long const &)",
    "public: __thiscall WmiValueNode::WmiValueNode(class WmiValueNode const &)",
    "public: virtual __thiscall WmiRangeNode::~WmiRangeNode(void)",
    "public: void __thiscall WmiOperatorNotIsANode::`default constructor closure'(void)",
    "public: __thiscall ProvCounter64Type::ProvCounter64Type(class ProvCounter64 const &)",
    "private: int __thiscall ProvBitStringType::RecursiveDef(void)",
    "protected: int __thiscall ProvObjectIdentifierType::Parse(unsigned short const *)",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorEqualOrLessNode::GetRange(void)",
    "public: unsigned char * __thiscall ProvOpaque::GetValue(void)const",
    "public: virtual void __thiscall WmiOperatorIsANode::Print(void)",
    "protected: enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::RecursiveRemoveInvariants(void *,class WmiTreeNode * &)",
    "public: class ProvValue & __thiscall ProvIpAddress::operator=(class ProvIpAddress const &)",
    "public: class WmiRangeNode * __thiscall PartitionSet::GetRange(void)",
    "public: static void __stdcall ProvDebugLog::Closedown(void)",
    "public: virtual __thiscall WmiOperatorNode::~WmiOperatorNode(void)",
    "public: __thiscall ProvPositiveRangeType::ProvPositiveRangeType(unsigned long,long)",
    "public: class WmiOperatorNode & __thiscall WmiOperatorNode::operator=(class WmiOperatorNode const &)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::RecursiveConvertToRanges(class WmiTreeNode * &)",
    "public: __thiscall ProvUDPAddressType::ProvUDPAddressType(void)",
    "public: __thiscall ProvFixedLengthDisplayStringType::ProvFixedLengthDisplayStringType(unsigned long const &,class ProvOctetString const &)",
    "public: void __thiscall PartitionSet::SetRange(class WmiRangeNode *)",
    "public: class WmiTreeNode * __thiscall WmiTreeNode::SetLeft(class WmiTreeNode *)",
    "public: virtual class WmiTreeNode * __thiscall WmiUnsignedIntegerNode::Copy(void)",
    "public: __thiscall WmiOperatorGreaterNode::WmiOperatorGreaterNode(class WmiOperatorGreaterNode const &)",
    "public: virtual void __thiscall WmiOperatorLessNode::Print(void)",
    "public: __thiscall ProvPhysAddressType::ProvPhysAddressType(class ProvPhysAddressType const &)",
    "public: long __thiscall ProvNegativeRangeType::GetLowerBound(void)",
    "public: __thiscall ProvIpAddressType::ProvIpAddressType(void)",
    "private: void __thiscall ProvEnumeratedType::PushBack(void)",
    "public: __thiscall ProvTimeTicksType::ProvTimeTicksType(unsigned long)",
    "public: __thiscall WmiOperatorNotLikeNode::WmiOperatorNotLikeNode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: virtual void __thiscall WmiStringRangeNode::Print(void)",
    "public: enum WmiTriState __thiscall Conjunctions::Initialize(void)",
    "public: class PartitionSet * __thiscall PartitionSet::GetPartition(unsigned long)",
    "public: void __thiscall ProvOpaque::SetValue(unsigned char const *,unsigned long)",
    "protected: int __thiscall ProvIpAddressType::Parse(unsigned short const *)",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorEqualOrGreaterExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: virtual class ProvValue * __thiscall ProvNull::Copy(void)const",
    "public: __thiscall ProvOctetStringType::ProvOctetStringType(unsigned char const *,unsigned long,unsigned short const *)",
    "const ProvBitStringType::`vftable'{for `ProvPositiveRangedType'}",
    "public: void __thiscall WmiTreeNode::GetData(void * *)",
    "public: __thiscall ProvTimeTicksType::ProvTimeTicksType(unsigned short const *)",
    "public: __thiscall WmiOperatorEqualOrGreaterNode::WmiOperatorEqualOrGreaterNode(class WmiOperatorEqualOrGreaterNode const &)",
    "public: class WmiUnsignedIntegerNode & __thiscall WmiUnsignedIntegerNode::operator=(class WmiUnsignedIntegerNode const &)",
    "protected: virtual int __thiscall ProvNull::Equivalent(class ProvValue const &)const",
    "const ProvFixedLengthOctetStringType::`vftable'",
    "public: __thiscall ProvBitStringType::ProvBitStringType(unsigned short const *,class ProvOctetString const &)",
    "public: virtual class ProvValue * __thiscall ProvCounter64::Copy(void)const",
    "protected: virtual void __thiscall ProvOctetString::Initialize(unsigned char const *,unsigned long)",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorGreaterExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: __thiscall ProvMacAddressType::ProvMacAddressType(class ProvOctetString const &)",
    "public: static int __stdcall ProvAnalyser::IsAlpha(unsigned short)",
    "public: virtual __thiscall ProvFixedLengthOctetStringType::~ProvFixedLengthOctetStringType(void)",
    "public: __thiscall ProvUInteger32::ProvUInteger32(class ProvUInteger32 const &)",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorNotEqualNode::GetRange(void)",
    "public: void __thiscall WmiOperatorLikeNode::`default constructor closure'(void)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::Sort(class WmiTreeNode * &)",
    "public: enum WmiTriState __thiscall WmiStringRangeNode::GetIntersectingRange(class WmiStringRangeNode &,class WmiStringRangeNode * &)",
    "protected: virtual int __thiscall ProvGaugeType::Equivalent(class ProvInstanceType const &)const",
    "public: class WmiOperatorGreaterNode & __thiscall WmiOperatorGreaterNode::operator=(class WmiOperatorGreaterNode const &)",
    "public: int __thiscall WmiUnsignedIntegerNode::LexicographicallyBefore(unsigned long &)",
    "public: virtual __thiscall WmiStringNode::~WmiStringNode(void)",
    "public: class ProvDateTimeType & __thiscall ProvDateTimeType::operator=(class ProvDateTimeType const &)",
    "public: virtual __thiscall ProvCounter64::~ProvCounter64(void)",
    "public: virtual class ProvInstanceType * __thiscall ProvNetworkAddressType::Copy(void)const",
    "public: int __thiscall ProvCounter::Equivalent(class ProvCounter const &)const",
    "public: __thiscall ProvGaugeType::ProvGaugeType(class ProvGauge const &,unsigned short const *)",
    "public: static int __stdcall ProvAnalyser::IsWhitespace(unsigned short)",
    "public: unsigned long __thiscall ProvCounter::GetValue(void)const",
    "public: __thiscall ProvPhysAddressType::ProvPhysAddressType(unsigned short const *)",
    "public: virtual class WmiTreeNode * __thiscall WmiOperatorNotIsANode::Copy(void)",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorLikeNode::GetRange(void)",
    "public: long __thiscall ProvInteger::GetValue(void)const",
    "public: __thiscall ProvNegativeRangeType::ProvNegativeRangeType(class ProvNegativeRangeType const &)",
    "public: __thiscall ProvFixedLengthOctetStringType::ProvFixedLengthOctetStringType(unsigned long const &,unsigned char const *)",
    "private: void __thiscall ProvBitStringType::PushBack(void)",
    "public: virtual __thiscall WmiOperatorLessNode::~WmiOperatorLessNode(void)",
    "public: __thiscall ProvOpaqueType::ProvOpaqueType(unsigned char const *,unsigned long,unsigned short const *)",
    "public: class WmiOperatorIsANode & __thiscall WmiOperatorIsANode::operator=(class WmiOperatorIsANode const &)",
    "public: __thiscall ProvEnumeratedType::ProvEnumeratedType(unsigned short const *,long const &)",
    "public: virtual __thiscall WmiOperatorIsANode::~WmiOperatorIsANode(void)",
    "public: __thiscall ProvCounterType::ProvCounterType(unsigned long)",
    "public: __thiscall ProvObjectIdentifierType::ProvObjectIdentifierType(unsigned short const *)",
    "public: enum WmiTriState __thiscall WmiUnsignedIntegerRangeNode::GetOverlappingRange(class WmiUnsignedIntegerRangeNode &,class WmiUnsignedIntegerRangeNode * &)",
    "public: class ProvValue & __thiscall ProvUInteger32::operator=(class ProvUInteger32 const &)",
    "public: virtual class ProvInstanceType * __thiscall ProvIntegerType::Copy(void)const",
    "const ProvMacAddressType::`vftable'{for `ProvPositiveRangedType'}",
    "const WmiOperatorNotEqualNode::`vftable'",
    "public: __thiscall ProvIntegerType::ProvIntegerType(class ProvInteger const &,unsigned short const *)",
    "public: __thiscall ProvPositiveRangeType::ProvPositiveRangeType(class ProvPositiveRangeType const &)",
    "public: __thiscall ProvTimeTicksType::ProvTimeTicksType(class ProvTimeTicksType const &)",
    "const WmiOperatorEqualOrLessNode::`vftable'",
    "public: __thiscall ProvNetworkAddressType::ProvNetworkAddressType(unsigned long)",
    "public: virtual __thiscall WmiStringRangeNode::~WmiStringRangeNode(void)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::RecursivePartitionSet(class Disjunctions *,class PartitionSet * &,unsigned long,unsigned long *,unsigned long)",
    "public: int __thiscall ProvObjectIdentifier::operator>=(class ProvObjectIdentifier const &)const",
    "public: void * __thiscall ProvOpaque::operator()(void)const",
    "public: __thiscall ProvObjectIdentifier::ProvObjectIdentifier(class ProvObjectIdentifier const &)",
    "public: class ProvOpaqueType & __thiscall ProvOpaqueType::operator=(class ProvOpaqueType const &)",
    "public: __thiscall ProvBitStringType::ProvBitStringType(class ProvBitStringType const &)",
    "protected: class ProvLexicon * __thiscall ProvPositiveRangedType::Get(void)",
    "public: __thiscall ProvCounter::ProvCounter(class ProvCounter const &)",
    "public: class ProvObjectIdentifier * __thiscall ProvObjectIdentifier::Cut(class ProvObjectIdentifier &)const",
    "public: long __thiscall WmiSignedIntegerRangeNode::UpperBound(void)",
    "public: enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::PreProcess(void *,struct SQL_LEVEL_1_RPN_EXPRESSION *,class WmiTreeNode * &)",
    "public: int __thiscall WmiUnsignedIntegerNode::LexicographicallyAfter(unsigned long &)",
    "public: virtual __thiscall ProvFixedLengthDisplayStringType::~ProvFixedLengthDisplayStringType(void)",
    "public: virtual class ProvInstanceType * __thiscall ProvMacAddressType::Copy(void)const",
    "protected: void __thiscall QueryPreprocessor::TransformNotOperatorNotLikeExpression(class WmiTreeNode * &,class WmiTreeNode *)",
    "public: void __thiscall ProvUInteger32::SetValue(unsigned long)",
    "public: __thiscall WmiOperatorGreaterNode::WmiOperatorGreaterNode(class WmiTreeNode *,class WmiTreeNode *)",
    "public: class ProvInstanceType & __thiscall ProvInstanceType::operator=(class ProvInstanceType const &)",
    "public: class WmiTreeNodeIterator & __thiscall WmiTreeNodeIterator::operator=(class WmiTreeNodeIterator const &)",
    "public: __thiscall ProvGaugeType::ProvGaugeType(class ProvGaugeType const &)",
    "const ProvOpaqueType::`vftable'{for `ProvPositiveRangedType'}",
    "public: virtual unsigned short * __thiscall ProvEnumeratedType::GetStringValue(void)const",
    "public: virtual class ProvInstanceType * __thiscall ProvFixedLengthPhysAddressType::Copy(void)const",
    "public: long __thiscall WmiRangeNode::ComparePropertyName(class WmiRangeNode &)",
    "public: virtual class ProvInstanceType * __thiscall ProvOSIAddressType::Copy(void)const",
    "public: virtual void __thiscall WmiSignedIntegerNode::Print(void)",
    "public: virtual void __thiscall WmiOperatorEqualNode::Print(void)",
    "public: int __thiscall ProvObjectIdentifier::Equivalent(class ProvObjectIdentifier const &,unsigned long)const",
    "public: void __cdecl ProvDebugLog::Write(unsigned short const *,...)",
    "public: void __thiscall ProvTimeTicks::SetValue(unsigned long)",
    "protected: virtual int __thiscall ProvOctetStringType::Equivalent(class ProvInstanceType const &)const",
    "const WmiRangeNode::`vftable'",
    "public: __thiscall ProvCounterType::ProvCounterType(class ProvCounterType const &)",
    "public: virtual class WmiRangeNode * __thiscall WmiOperatorEqualOrGreaterNode::GetRange(void)",
    "public: virtual unsigned short * __thiscall ProvPhysAddressType::GetStringValue(void)const",
    "protected: virtual class WmiTreeNode * __thiscall QueryPreprocessor::AllocTypeNode(void *,unsigned short *,struct tagVARIANT &,enum WmiValueNode::WmiValueFunction,enum WmiValueNode::WmiValueFunction,class WmiTreeNode *)",
    "public: __thiscall ProvCounter64Type::ProvCounter64Type(unsigned long,unsigned long)",
    "public: __thiscall WmiOperatorNotIsANode::WmiOperatorNotIsANode(class WmiOperatorNotIsANode const &)",
    "public: class WmiNotNode & __thiscall WmiNotNode::operator=(class WmiNotNode const &)",
    "public: void * __thiscall ProvEventObject::GetHandle(void)",
    "public: unsigned long __thiscall Disjunctions::GetConjunctionCount(void)",
    "protected: virtual class WmiRangeNode * __thiscall QueryPreprocessor::AllocInfiniteRangeNode(void *,unsigned short *)",
    "public: virtual unsigned short * __thiscall ProvDisplayStringType::GetStringValue(void)const",
    "public: __thiscall ProvPhysAddressType::ProvPhysAddressType(unsigned short const *,unsigned short const *)",
    "public: virtual __thiscall ProvNegativeRangeType::~ProvNegativeRangeType(void)",
    "public: virtual int __thiscall ProvInstanceType::IsProvV2CType(void)const",
    "public: int __thiscall ProvCounter64::Equivalent(class ProvCounter64 const &)const",
    "public: __thiscall WmiTreeNode::WmiTreeNode(class WmiTreeNode *)",
    "protected: virtual enum QueryPreprocessor::QuadState __thiscall QueryPreprocessor::InvariantEvaluate(void *,class WmiTreeNode *,class WmiTreeNode *)",
    "public: virtual __thiscall ProvNullType::~ProvNullType(void)",
    "protected: enum WmiTriState __thiscall QueryPreprocessor::InsertNode(class WmiTreeNode * &,class WmiTreeNode * &)",
    "public: static int __stdcall ProvAnalyser::IsDecimal(unsigned short)",
    "public: __thiscall QueryPreprocessor::QueryPreprocessor(class QueryPreprocessor const &)"
  ],
  "psapi.dll": [
    "GetProcessImageFileNameA",
    "QueryWorkingSetEx",
    "EmptyWorkingSet",
    "GetModuleFileNameExA",
    "EnumProcessModules",
    "InitializeProcessForWsWatch",
    "QueryWorkingSet",
    "GetModuleBaseNameW",
    "GetDeviceDriverFileNameA",
    "EnumProcessModulesEx",
    "GetWsChanges",
    "GetWsChangesEx",
    "EnumPageFilesA",
    "GetModuleFileNameExW",
    "GetProcessMemoryInfo",
    "GetDeviceDriverBaseNameA",
    "EnumDeviceDrivers",
    "GetDeviceDriverBaseNameW",
    "GetModuleBaseNameA",
    "EnumPageFilesW",
    "GetPerformanceInfo",
    "GetModuleInformation",
    "GetMappedFileNameA",
    "GetProcessImageFileNameW",
    "EnumProcesses",
    "GetDeviceDriverFileNameW",
    "GetMappedFileNameW"
  ],
  "psbase.dll": [
    "SPCreateType",
    "SPEnumSubtypes",
    "SPCreateSubtype",
    "SPEnumItems",
    "FPasswordChangeNotify",
    "SPGetProvParam",
    "SPAcquireContext",
    "SPOpenItem",
    "SPSetProvParam",
    "SPDeleteSubtype",
    "SPReadItem",
    "SPReleaseContext",
    "SPProviderInitialize",
    "SPWriteItem",
    "SPGetProvInfo",
    "SPGetSubtypeInfo",
    "SPEnumTypes",
    "SPDeleteType",
    "SPDeleteItem",
    "SPCloseItem",
    "SPGetTypeInfo"
  ],
  "psisdecd.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "pstorec.dll": [
    "PStoreEnumProviders",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "PStoreCreateInstance",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "pstorsvc.dll": [
    "Start",
    "PSTOREServiceMain",
    "ServiceEntry"
  ],
  "puiapi.dll": [
    "PUIAPI_ShowBrowseForPrinterDialog",
    "PUIAPI_IWaitNotify_RegisterTimer",
    "STRAPI_Format",
    "STRAPI_TrimString",
    "PUIAPI_IWaitNotify_UnregisterCookie",
    "STRBUF_ToLower",
    "XMLAPI_SetAttributeLong",
    "DllRegisterServer",
    "PUIAPI_GetErrorString",
    "STRBUF_TrimLeft",
    "STRBUF_Format",
    "XMLAPI_SetAttributeString",
    "STRAPI_FormatMsgV",
    "DllUnregisterServer",
    "STRAPI_LoadString",
    "STRBUF_ToUpper",
    "STRAPI_GetJobStatusString",
    "STRAPI_GetPrinterStatusString",
    "STRAPI_MultiCat",
    "PUIAPI_ShowDetailsMessageBox",
    "STRBUF_Create",
    "XMLAPI_GetAttributeDouble",
    "XMLAPI_GetAttributeLong",
    "XMLAPI_SetAttributeDouble",
    "STRAPI_String2GUID",
    "STRBUF_Destroy",
    "STRBUF_TrimRight",
    "STRAPI_XMLSafeText",
    "PUIAPI_IWaitNotify_CreateInstance",
    "XMLAPI_GetAttributeULongLong",
    "XMLAPI_SetAttributeULongLong",
    "PUIAPI_CreateInstance",
    "PUIAPI_GetPrinter",
    "STRBUF_AppendString",
    "PUIAPI_ShowDriverPackageRemovalUI",
    "STRAPI_FindAndReplace",
    "STRBUF_CreateBSTR",
    "STRAPI_CrackPrintUNCName",
    "STRAPI_GUID2String",
    "STRBUF_FindAndReplace",
    "STRBUF_MultiCat",
    "PUIAPI_IWaitNotify_RegisterWaitObject",
    "STRBUF_InsertString",
    "STRAPI_FormatMsg",
    "STRBUF_DeleteSubstring",
    "DllCanUnloadNow",
    "STRAPI_FormatV",
    "XMLAPI_GetAttributeString",
    "STRAPI_ConvertCase",
    "STRBUF_Update",
    "DllGetClassObject",
    "STRBUF_Truncate"
  ],
  "puiobj.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "pwrshplugin.dll": [
    "WSManPluginReleaseShellContext",
    "WSManPluginStartup",
    "WSManPluginShell",
    "WSManPluginReleaseCommandContext",
    "WSManPluginSend",
    "GetCLRVersionForPSVersion",
    "WSManPluginSignal",
    "WSManPluginShutdown",
    "WSManPluginCommand",
    "WSManPluginReceive"
  ],
  "QAGENT.DLL": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "QAGENTRT.DLL": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "ServiceMain"
  ],
  "QCLIPROV.DLL": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "QSHVHOST.DLL": [
    "QuarSessionGetMachineInventory",
    "DllUnregisterServer",
    "QuarSessionGetShvResultList",
    "DllCanUnloadNow",
    "QuarUninitialize",
    "QuarCreateSession",
    "QuarSessionGetId",
    "QuarFreeMemory",
    "QuarInitialize",
    "DllGetClassObject",
    "QuarSessionSetNewQuarantineStatus",
    "QuarSessionGetSoHResponse",
    "DllRegisterServer",
    "QuarSessionGetFixupServerList",
    "QuarDestroySession",
    "QuarSessionEvaluateClientMachineHealth"
  ],
  "QSVRMGMT.DLL": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "QUTIL.DLL": [
    "UninitializeNapAgentNotifier",
    "FreeFixupInfo",
    "FreeSoH",
    "DllRegisterServer",
    "AllocConnections",
    "FreeConnections",
    "DllUnregisterServer",
    "FreeCountedString",
    "FreeSystemHealthAgentState",
    "AllocFixupInfo",
    "FreeNapComponentRegistrationInfoArray",
    "FreeNetworkSoH",
    "FreeIsolationInfo",
    "FreeIsolationInfoEx",
    "FreeSoHAttributeValue",
    "DllCanUnloadNow",
    "FreePrivateData",
    "AllocCountedString",
    "DllGetClassObject",
    "InitializeNapAgentNotifier"
  ],
  "Query.dll": [
    "public: unsigned long __thiscall CRegAccess::Read(unsigned short const *,unsigned long)",
    "public: virtual long __stdcall CDbProperties::QueryInterface(struct _GUID const &,void * *)",
    "public: __thiscall CDbPropIDSet::CDbPropIDSet(void)",
    "public: unsigned long __thiscall CDriveInfo::GetSectorSize(void)",
    "public: int __thiscall CEmptyPropertyList::GetPropInfo(class CDbColId const &,unsigned short const * *,unsigned short *,unsigned int *)",
    "public: void __thiscall CValueNormalizer::PutMinValue(unsigned long,unsigned long &,enum VARENUM)",
    "public: static class CRestriction * __stdcall CRestriction::UnMarshall(class PDeSerStream &)",
    "public: __thiscall CDbSortSet::CDbSortSet(unsigned int)",
    "public: void __thiscall CScopeAdmin::SetPath(unsigned short const *)",
    "class CPropListFile * __stdcall GetGlobalPropListFile(void)",
    "CiSvcMain",
    "public: __thiscall CSdidLookupTable::~CSdidLookupTable(void)",
    "unsigned short * __stdcall wcsipattern(unsigned short *,unsigned short const *)",
    "public: void __thiscall CRcovStrmAppendTrans::Commit(void)",
    "public: __thiscall CNatLanguageRestriction::~CNatLanguageRestriction(void)",
    "public: __thiscall CDbNatLangRestriction::CDbNatLangRestriction(unsigned short const *,struct tagDBID const &,unsigned long)",
    "void __stdcall GetStackTrace(char *,unsigned long)",
    "public: int __thiscall CQueryScanner::GetNumber(unsigned long &,int &)",
    "public: virtual unsigned long __stdcall CEmptyPropertyList::AddRef(void)",
    "public: virtual void __thiscall CStaticPropertyList::InitIterator(void)",
    "public: void __thiscall CAllocStorageVariant::SetBSTR(unsigned short *,class PMemoryAllocator &)",
    "public: class CScopeAdmin * __thiscall CScopeEnum::QueryScopeAdmin(void)",
    "public: void __thiscall CValueNormalizer::PutValue(unsigned long,unsigned long &,class CStorageVariant const &)",
    "public: void __thiscall CRegAccess::EnumerateValues(unsigned short *,class CRegCallBack &)",
    "protected: void __thiscall CDbCmdTreeNode::InsertChild(class CDbCmdTreeNode *)",
    "public: int __thiscall CMachineAdmin::EnableCI(void)",
    "public: virtual long __stdcall CEnumWorkid::Next(unsigned long,unsigned long *,unsigned long *)",
    "public: int __thiscall CDynStream::MarkDirty(void)",
    "public: void __thiscall CGenericCiProxy::SetPriority(unsigned long,unsigned long)",
    "public: void __thiscall CFwAsyncWorkItem::Done(void)",
    "public: void __thiscall CMachineAdmin::AddCatalog(unsigned short const *,unsigned short const *)",
    "public: virtual long __stdcall CEnumString::Skip(unsigned long)",
    "public: class CRestriction * __thiscall CNodeRestriction::RemoveChild(unsigned int)",
    "public: __thiscall CAllocStorageVariant::CAllocStorageVariant(struct _GUID const *,class PMemoryAllocator &)",
    "public: unsigned long __thiscall CRestriction::TreeCount(void)const",
    "public: void __thiscall CStorageVariant::SetR8(double,unsigned int)",
    "public: __thiscall CAllocStorageVariant::CAllocStorageVariant(struct tagPROPVARIANT &,class PMemoryAllocator &)",
    "public: void __thiscall CCatState::SetNumberOfColumns(unsigned int)",
    "public: static struct IWordBreaker * __stdcall CCiOle::NewWordBreaker(struct _GUID const &)",
    "protected: void __thiscall CRcovStrmTrans::Write(void const *,unsigned long)",
    "public: void __thiscall CCatState::SetLocale(unsigned short const *)",
    "public: class CRestriction * __thiscall CParseCommandTree::ParseExpression(class CDbCmdTreeNode *)",
    "public: __thiscall CWin32RegAccess::~CWin32RegAccess(void)",
    "public: int __thiscall CMachineAdmin::PauseCI(void)",
    "public: int __thiscall CDbContentVector::UnMarshall(class PDeSerStream &)",
    "public: __thiscall CRangeRestriction::~CRangeRestriction(void)",
    "public: __thiscall CPidLookupTable::~CPidLookupTable(void)",
    "public: __thiscall CDbPropBaseRestriction::~CDbPropBaseRestriction(void)",
    "public: __thiscall CFullPropSpec::~CFullPropSpec(void)",
    "public: int __thiscall CMachineAdmin::IsCIServiceDisabled(void)",
    "public: virtual void __thiscall CMemDeSerStream::SkipWChar(unsigned long)",
    "public: void __thiscall CCombinedPropertyList::ClearList(void)",
    "public: int __thiscall CEmptyPropertyList::GetPropInfo(unsigned short const *,class CDbColId * *,unsigned short *,unsigned int *)",
    "long __stdcall MakeMetadataICommand(struct IUnknown * *,enum CiMetaData,unsigned short const *,unsigned short const *,struct IUnknown *)",
    "public: unsigned short * __thiscall CQueryScanner::AcqWord(void)",
    "public: long __thiscall CLocalGlobalPropertyList::CheckError(unsigned long &,unsigned short * *)",
    "public: void __thiscall CDbCmdTreeNode::SetWeight(long)",
    "protected: __thiscall CPhysStorage::CPhysStorage(class PStorage &,class PStorageObject &,unsigned long,class PMmStream *,enum PStorage::EOpenMode,int,unsigned int,int)",
    "public: int __thiscall CPropStoreManager::ReadProperty(class CCompositePropRecord &,unsigned long,struct tagPROPVARIANT &,unsigned char *,unsigned int *)",
    "public: void __thiscall CMetaDataMgr::EnumVServers(class CMetaDataVirtualServerCallBack &)",
    "public: unsigned long __thiscall CFileBuffer::fgetsw(class XGrowable &)",
    "public: unsigned long __thiscall CPidRemapper::NameToReal(class CFullPropSpec const *)",
    "public: __thiscall CMmStream::CMmStream(unsigned long,int)",
    "int __stdcall SaCreateData(class PVarAllocator &,unsigned short,struct tagSAFEARRAY &,struct tagSAFEARRAY &,int)",
    "public: __thiscall CColumnSet::CColumnSet(unsigned int)",
    "public: void __thiscall CValueNormalizer::PutMaxValue(unsigned long,unsigned long &,enum VARENUM)",
    "public: virtual __thiscall CMmStream::~CMmStream(void)",
    "private: static struct _FILETIME CGlobalPropFileRefresher::_ftFile",
    "public: void __thiscall CCatState::AddDir(class XPtrST &)",
    "public: void __thiscall CKeyDeComp::GetOffset(struct BitOffset &)",
    "public: __thiscall CVirtualString::~CVirtualString(void)",
    "public: virtual __thiscall CPhysStorage::~CPhysStorage(void)",
    "public: __thiscall CFullPath::CFullPath(unsigned short const *,unsigned int)",
    "public: class CCompositePropRecordForWrites * __thiscall CPropStoreManager::OpenRecordForWrites(unsigned long,unsigned char *)",
    "public: void __thiscall CSort::Remove(unsigned int)",
    "public: __thiscall CUnfilteredRestriction::CUnfilteredRestriction(void)",
    "public: void __thiscall CMachineAdmin::CreateSubdirs(unsigned short const *)",
    "public: int __thiscall CFullPropSpec::SetProperty(unsigned short const *)",
    "public: __thiscall CPropStoreManager::CPropStoreManager(unsigned long)",
    "long __stdcall CiNtOpenNoThrow(void * &,unsigned short const *,unsigned long,unsigned long,unsigned long)",
    "public: void __thiscall CPropStoreManager::SetBackupSize(unsigned long,unsigned long)",
    "private: void __thiscall CImpersonateClient::Impersonate(void)",
    "public: __thiscall CAllocStorageVariant::CAllocStorageVariant(enum VARENUM,unsigned long,class PMemoryAllocator &)",
    "public: void __thiscall CFileMapView::Init(void)",
    "public: __thiscall CFileBuffer::CFileBuffer(class CFileMapView &,unsigned int)",
    "public: int __thiscall CQueryScanner::GetNumber(long &,int &)",
    "public: virtual unsigned long __stdcall CDbProperties::AddRef(void)",
    "public: virtual long __stdcall CDbProperties::GetProperties(unsigned long,struct tagDBPROPIDSET const * const,unsigned long *,struct tagDBPROPSET * *)",
    "public: void __thiscall CPropStoreManager::DeleteRecord(unsigned long)",
    "public: __thiscall CImpersonateSystem::~CImpersonateSystem(void)",
    "public: void __thiscall CRegChangeEvent::Reset(void)",
    "public: virtual void __thiscall CMemDeSerStream::GetGUID(struct _GUID &)",
    "public: void __thiscall CPidRemapper::ReBuild(class CPidMapper const &)",
    "public: int __thiscall CDbParameter::Copy(struct tagDBPARAMETER const &)",
    "public: static void __stdcall CPropertyList::ParseOneLine(class CQueryScanner &,int,class XPtr &)",
    "public: int __thiscall CQueryScanner::GetNumber(__int64 &,int &)",
    "public: void __thiscall CRegChangeEvent::Init(void)",
    "public: __thiscall CCatState::CCatState(void)",
    "public: int __thiscall CKeyArray::Add(int,class CKey const &)",
    "private: void __thiscall CQueryParser::SetCurrentProperty(unsigned short const *,enum PropertyType)",
    "public: __thiscall CCatalogAdmin::~CCatalogAdmin(void)",
    "public: __thiscall CDbSelectNode::CDbSelectNode(void)",
    "public: __thiscall CRcovStrmAppendTrans::CRcovStrmAppendTrans(class PRcovStorageObj &)",
    "public: virtual class CPropEntry const * __thiscall CStaticPropertyList::Find(unsigned short const *)",
    "int __stdcall IsDirectoryWritable(unsigned short const *)",
    "public: unsigned char * __thiscall CGenericCiProxy::GetEntryBuffer(unsigned long &)",
    "public: virtual void __thiscall CMemDeSerStream::SkipChar(unsigned long)",
    "public: long __thiscall CPropStoreManager::WritePrimaryProperty(class CCompositePropRecordForWrites &,unsigned long,class CStorageVariant const &)",
    "public: class CDbColId & __thiscall CDbColId::operator=(class CDbColId const &)",
    "public: void __thiscall CPropertyRestriction::SetValue(unsigned short *)",
    "public: __thiscall CNotRestriction::~CNotRestriction(void)",
    "public: __thiscall CPathParser::CPathParser(unsigned short const *,unsigned long)",
    "public: __thiscall CMmStreamConsecBuf::CMmStreamConsecBuf(void)",
    "public: virtual unsigned short __thiscall CMemDeSerStream::GetUShort(void)",
    "public: void __thiscall CEventItem::AddArg(unsigned short const *)",
    "public: virtual void __thiscall CCombinedPropertyList::AddEntry(class CPropEntry *,int)",
    "long __stdcall ParseCatalogURL(unsigned short const *,class XPtrST &,class XPtrST &)",
    "public: static unsigned short __stdcall CEmptyPropertyList::GetPropType(unsigned int)",
    "public: __thiscall CStandardPropMapper::CStandardPropMapper(void)",
    "public: unsigned short * __thiscall CKey::GetStr(void)const",
    "public: __thiscall CScopeEnum::~CScopeEnum(void)",
    "public: __thiscall CCiAdminParams::CCiAdminParams(class CLangList *)",
    "public: __thiscall CDbCmdTreeNode::~CDbCmdTreeNode(void)",
    "public: int __thiscall CQueryScanner::GetNumber(unsigned __int64 &,int &)",
    "void __stdcall BuildRegistryScopesKey(class XArray &,unsigned short const *)",
    "public: unsigned long __thiscall CSdidLookupTable::LookupSDID(void *,unsigned long)",
    "public: unsigned long __thiscall CPropStoreManager::BeginTransaction(void)",
    "public: int __thiscall CWin32RegAccess::Get(unsigned short const *,unsigned long &)",
    "public: void __thiscall CQueryScanner::AcceptCommand(void)",
    "public: double __thiscall CAllocStorageVariant::GetR8(unsigned int)const",
    "InternalBindIFilterFromStream",
    "public: virtual void __thiscall CMemDeSerStream::SkipUShort(void)",
    "public: void __thiscall CSdidLookupTable::Empty(void)",
    "public: int __thiscall CPropStoreManager::ReadProperty(class CCompositePropRecord &,unsigned long,struct tagPROPVARIANT *,unsigned int *)",
    "public: void __thiscall CFullPath::MakePath(unsigned short const *,unsigned int)",
    "SetCatalogState",
    "public: void __thiscall CPropStoreManager::SetMappedCacheSize(unsigned long,unsigned long)",
    "public: void __thiscall CStorageVariant::SetLPSTR(char const *,unsigned int)",
    "_LoadBHIFilter@16",
    "public: void __thiscall CImpersonationTokenCache::ReInitializeIISScopes(void)",
    "public: long __thiscall CDbCmdTreeNode::GetWeight(void)const",
    "public: static void __stdcall CDbCmdTreeNode::operator delete(void *)",
    "void __stdcall URLEscapeW(unsigned short const *,class CVirtualString &,unsigned long,int)",
    "public: virtual void __thiscall CCombinedPropertyList::InitIterator(void)",
    "public: __thiscall CEventLog::~CEventLog(void)",
    "public: int __thiscall CRequestClient::NotifyWriteRead(void *,void *,unsigned long,void *,unsigned long,unsigned long &)",
    "public: __thiscall SStorageObject::~SStorageObject(void)",
    "public: void __thiscall CMmStreamConsecBuf::Init(class PMmStream *)",
    "public: int __thiscall CDbSortNode::AddSortColumn(struct tagDBID const &,int,unsigned long)",
    "public: void __thiscall CEnumString::Append(unsigned short const *)",
    "protected: int __thiscall CDbListAnchor::AppendListElement(class CDbCmdTreeNode *)",
    "public: __thiscall CPropListFile::CPropListFile(class CEmptyPropertyList *,int,unsigned short const *,unsigned long)",
    "public: unsigned long __thiscall CPropStoreManager::GetBackupSize(unsigned long)",
    "CITextToFullTree",
    "public: int __thiscall CDriveInfo::IsSameDrive(unsigned short const *)",
    "public: virtual long __stdcall CDbProperties::SetProperties(unsigned long,struct tagDBPROPSET * const)",
    "public: void __thiscall PRcovStorageObj::VerifyConsistency(void)",
    "private: static class CPropListFile * CLocalGlobalPropertyList::_pGlobalPropListFile",
    "public: __thiscall CDFA::CDFA(unsigned short const *,class CTimeLimit &,unsigned char)",
    "public: class COccRestriction * __thiscall COccRestriction::Clone(void)const",
    "public: virtual __thiscall CPropertyList::~CPropertyList(void)",
    "public: void __thiscall CDriveInfo::GetDiskSpace(__int64 &,__int64 &)",
    "class CDbCmdTreeNode * __stdcall FormQueryTree(class CDbCmdTreeNode &,class CCatState &,struct IColumnMapper *,int,int)",
    "public: static class CDbCmdTreeNode * __stdcall CDbCmdTreeNode::UnMarshallTree(class PDeSerStream &)",
    "public: void __thiscall CContentRestriction::Marshall(class PSerStream &)const",
    "public: void __thiscall CNotRestriction::Marshall(class PSerStream &)const",
    "public: void __thiscall CPhysStorage::ReturnBuffer(unsigned long,int,int)",
    "public: virtual class CPropEntry const * __thiscall CPropertyList::Find(unsigned short const *)",
    "public: __thiscall CAllocStorageVariant::CAllocStorageVariant(class PDeSerStream &,class PMemoryAllocator &)",
    "public: void __thiscall CImpersonateRemoteAccess::Release(void)",
    "public: __thiscall CFileMapView::~CFileMapView(void)",
    "public: void __thiscall CNatLanguageRestriction::SetPhrase(unsigned short const *)",
    "int __stdcall VT_VARIANT_EQ(struct tagPROPVARIANT const &,struct tagPROPVARIANT const &)",
    "SetupCache",
    "private: static unsigned long CGlobalPropFileRefresher::_dwLastCheckMoment",
    "public: __thiscall CFilterDaemon::~CFilterDaemon(void)",
    "public: __thiscall CMetaDataMgr::CMetaDataMgr(int,enum CiVRootTypeEnum,unsigned long,unsigned short const *)",
    "DoneCIISAPIPerformanceData",
    "private: class CDbRestriction * __thiscall CQueryParser::Query(class CDbNodeRestriction *)",
    "public: void __thiscall CDbParameter::Marshall(class PSerStream &)const",
    "public: __thiscall CRestriction::~CRestriction(void)",
    "public: __thiscall CPropNameArray::CPropNameArray(unsigned int)",
    "LocateCatalogsW",
    "public: void __thiscall COLEPropManager::CPropSetMap::Close(void)",
    "_StopFWCiSvcWork@16",
    "public: int __thiscall CWebServer::GetCGIVariableW(unsigned short const *,class XArray &,unsigned long &)",
    "public: int __thiscall CDbNumeric::UnMarshall(class PDeSerStream &)",
    "public: __thiscall CWordRestriction::~CWordRestriction(void)",
    "public: void __thiscall CPropStoreManager::CloseRecord(class CCompositePropRecord *)",
    "unsigned long __stdcall UpdateContentIndex(unsigned short const *,unsigned short const *,unsigned short const *,int)",
    "protected: void __thiscall CDbCmdTreeNode::AppendChild(class CDbCmdTreeNode *)",
    "public: int __thiscall COLEPropManager::ReadProperty(class CFullPropSpec const &,struct tagPROPVARIANT &)",
    "public: void __thiscall CPropStoreManager::Setup(unsigned long,unsigned long,unsigned long,unsigned long,int,unsigned long)",
    "CITextToSelectTree",
    "CICreateCommand",
    "public: void __thiscall CMachineAdmin::RemoveCatalogFiles(unsigned short const *)",
    "public: unsigned long __thiscall CPropertyStoreWids::NextWorkId(void)",
    "public: virtual unsigned long __stdcall CEnumWorkid::AddRef(void)",
    "public: __thiscall CScopeEnum::CScopeEnum(class CCatalogAdmin &)",
    "public: __thiscall CVirtualString::CVirtualString(unsigned int)",
    "public: void __thiscall CFwEventItem::ReportEventW(struct ICiCAdviseStatus &)",
    "public: void __thiscall CPidLookupTable::MakeBackupCopy(class PRcovStorageObj &,class PSaveProgressTracker &)",
    "public: unsigned long __thiscall CPropertyStore::GetTotalSizeInKB(void)",
    "public: __thiscall CFwEventItem::~CFwEventItem(void)",
    "public: __thiscall CValueNormalizer::CValueNormalizer(class PKeyRepository &)",
    "public: __thiscall CDbSortKey::~CDbSortKey(void)",
    "void * __stdcall CiNtOpen(unsigned short const *,unsigned long,unsigned long,unsigned long)",
    "public: void __thiscall CMmStreamConsecBuf::Rewind(void)",
    "public: void __thiscall CRequestClient::Disconnect(void)",
    "public: void __thiscall CPropStoreManager::LongInit(int &,unsigned long &,void (__stdcall*)(unsigned long,int,void const *),void const *)",
    "public: void __thiscall CRequestClient::DataWriteRead(void *,unsigned long,void *,unsigned long,unsigned long &)",
    "public: __thiscall CRequestClient::CRequestClient(unsigned short const *,struct IDBProperties *)",
    "public: __thiscall CDbContentRestriction::CDbContentRestriction(unsigned short const *,class CDbColumnNode const &,unsigned long,unsigned long)",
    "public: void __thiscall CCatState::SetColumn(unsigned short const *,unsigned int)",
    "public: void __thiscall CFullPath::MakePath(unsigned short const *)",
    "public: void __thiscall CNodeRestriction::AddChild(class CRestriction *,unsigned int &)",
    "public: void __thiscall CParseCommandTree::ParseTree(class CDbCmdTreeNode *)",
    "CIRestrictionToFullTree",
    "public: __thiscall CPhraseRestriction::~CPhraseRestriction(void)",
    "public: __thiscall CPidRemapper::CPidRemapper(class CPidMapper const &,class XInterface &,class CRestriction *,class CColumnSet *,class CSortSet *)",
    "public: __thiscall CSort::CSort(unsigned int)",
    "public: void __thiscall CNodeRestriction::Marshall(class PSerStream &)const",
    "void __stdcall BuildRegistryPropertiesKey(class XArray &,unsigned short const *)",
    "public: __thiscall CDbColId::CDbColId(struct _GUID const &,unsigned short const *)",
    "public: __thiscall CFullPropSpec::CFullPropSpec(class CFullPropSpec const &)",
    "void __stdcall DecodeURLEscapes(unsigned char *,unsigned long &,unsigned short *,unsigned long)",
    "long __stdcall GetScodeError(class CException &)",
    "public: __thiscall CLocalGlobalPropertyList::CLocalGlobalPropertyList(unsigned long)",
    "public: __thiscall CGetDbProps::CGetDbProps(void)",
    "public: virtual long __thiscall CPropertyList::GetAllEntries(class CPropEntry * *,unsigned long)",
    "_AbortMerges@16",
    "public: int __thiscall CMachineAdmin::DisableCI(void)",
    "public: void __thiscall CPropertyRestriction::Marshall(class PSerStream &)const",
    "public: void __thiscall CWorkQueue::Add(class PWorkItem *)",
    "private: int __thiscall CImpersonateRemoteAccess::_ImpersonateIf(unsigned short const *,unsigned short const *,unsigned long)",
    "protected: int __thiscall CDbListAnchor::AppendListElement(unsigned short,struct tagDBID const &)",
    "LocateCatalogs",
    "public: __thiscall CRcovStrmMDTrans::CRcovStrmMDTrans(class PRcovStorageObj &,enum CRcovStrmMDTrans::MDOp,unsigned long)",
    "public: int __thiscall CMetaDataMgr::ExtensionHasScriptMap(unsigned short const *)",
    "public: int __thiscall CPropStoreManager::ReadProperty(unsigned long,unsigned long,struct tagPROPVARIANT &)",
    "int __stdcall VT_VARIANT_LE(struct tagPROPVARIANT const &,struct tagPROPVARIANT const &)",
    "public: unsigned short * __thiscall CQueryScanner::AcqPhrase(void)",
    "public: int __thiscall CPropertyStore::ReadProperty(class CPropRecordNoLock &,unsigned long,struct tagPROPVARIANT *,unsigned int *)",
    "public: void __thiscall CFwEventItem::AddArg(unsigned short const *)",
    "public: void __thiscall CCatState::ChangeCurrentCatalog(unsigned short const *)",
    "public: class PRcovStorageObj * __thiscall CiStorage::QuerySdidLookupTable(unsigned long)",
    "public: int __thiscall CCatStateInfo::LokUpdate(void)",
    "public: int __thiscall CDbProp::UnMarshall(class PDeSerStream &)",
    "int __stdcall VT_VARIANT_NE(struct tagPROPVARIANT const &,struct tagPROPVARIANT const &)",
    "public: int __thiscall CCatalogAdmin::IsStarted(void)",
    "public: __thiscall CWordRestriction::CWordRestriction(class CKeyBuf const &,unsigned long,unsigned long,unsigned long,int)",
    "public: __thiscall CPropertyValueParser::CPropertyValueParser(class CQueryScanner &,unsigned short,unsigned long)",
    "public: __thiscall CLangList::~CLangList(void)",
    "public: int __thiscall CDbColId::UnMarshall(class PDeSerStream &)",
    "public: int __thiscall COccRestriction::IsValid(void)const",
    "public: __thiscall CTransaction::CTransaction(void)",
    "public: __thiscall CMemSerStream::CMemSerStream(unsigned int)",
    "public: int __thiscall CFilterDaemon::IsWaitingForDocument(void)",
    "private: class CDbSortListAnchor * __thiscall CDbSortNode::_FindOrAddAnchor(void)",
    "int __stdcall VT_VARIANT_LT(struct tagPROPVARIANT const &,struct tagPROPVARIANT const &)",
    "public: unsigned long __thiscall CMetaDataMgr::GetVPathSSLAccess(unsigned short const *)",
    "public: void __thiscall CDbNumeric::Marshall(class PSerStream &)const",
    "public: unsigned long __thiscall CMetaDataMgr::GetVPathAccess(unsigned short const *)",
    "public: static void __stdcall CDbParameter::operator delete(void *)",
    "public: __thiscall CQueryScanner::CQueryScanner(unsigned short const *,int,unsigned long,int)",
    "public: void __thiscall CCatState::AddMachine(class XPtrST &)",
    "long __stdcall MakeISearch(struct ISearchQueryHits * *,class CDbRestriction *,unsigned short const *)",
    "public: void __thiscall CDbScalarValue::Value(class CStorageVariant &)",
    "public: __thiscall CImpersonationTokenCache::CImpersonationTokenCache(unsigned short const *)",
    "public: void __thiscall CContentRestriction::SetPhrase(unsigned short const *)",
    "LoadIFilterEx",
    "public: class CScopeAdmin * __thiscall CCatalogAdmin::QueryScopeAdmin(unsigned short const *)",
    "public: virtual class CPropEntry const * __thiscall CPropertyList::Find(class CDbColId const &)",
    "public: __thiscall CPropertyStore::~CPropertyStore(void)",
    "public: __thiscall CDbPropSet::~CDbPropSet(void)",
    "public: int __thiscall CCatalogAdmin::IsStopped(void)",
    "public: void __thiscall CPidLookupTable::Empty(void)",
    "InitializeCIPerformanceData",
    "public: void __thiscall CSynRestriction::AddKey(class CKeyBuf const &)",
    "public: void __thiscall CCatalogAdmin::RemoveScope(unsigned short const *)",
    "public: void __thiscall CWorkQueue::AddRefWorkThreads(void)",
    "public: __thiscall CImpersonateClient::~CImpersonateClient(void)",
    "public: __thiscall CImpersonationTokenCache::~CImpersonationTokenCache(void)",
    "public: void __thiscall CPropertyRestriction::SetValue(struct tagBLOB &)",
    "public: void __thiscall CCatalogAdmin::DeleteRegistryParamNoThrow(unsigned short const *)",
    "void __stdcall PutWString(class PSerStream &,unsigned short const *)",
    "public: virtual __thiscall CMemSerStream::~CMemSerStream(void)",
    "protected: class CDbCmdTreeNode * __thiscall CDbCmdTreeNode::RemoveFirstChild(void)",
    "public: __thiscall CWin32RegAccess::CWin32RegAccess(struct HKEY__ *,unsigned short const *)",
    "FsCiShutdown",
    "private: void __thiscall CImpersonateSystem::MakePrivileged(void)",
    "public: void __thiscall CStorageVariant::SetUI8(union _ULARGE_INTEGER,unsigned int)",
    "DoneCIPerformanceData",
    "public: __thiscall CWorkQueue::~CWorkQueue(void)",
    "class CCoTaskAllocator CoTaskAllocator",
    "void __cdecl SystemExceptionTranslator(unsigned int,struct _EXCEPTION_POINTERS *)",
    "public: unsigned short const * __thiscall CCatState::GetCategory(unsigned int)const",
    "public: void __thiscall CPhysStorage::Reopen(int)",
    "public: void __thiscall CQueryScanner::AcceptWord(void)",
    "public: void __thiscall CStorageVariant::SetDATE(double,unsigned int)",
    "public: void __thiscall CCatState::SetDefaultProperty(unsigned short const *)",
    "public: unsigned short * __thiscall CQueryScanner::AcqPath(void)",
    "public: long __thiscall CFilterDaemon::DoUpdates(void)",
    "public: __thiscall CEventItem::~CEventItem(void)",
    "public: unsigned long __thiscall CPhysStorage::ShrinkFromFront(unsigned long,unsigned long)",
    "public: void __thiscall CMachineAdmin::TunePerformance(int,unsigned short,unsigned short)",
    "public: void __thiscall CRcovStorageHdr::Init(unsigned long)",
    "public: virtual long __stdcall CEnumString::Next(unsigned long,unsigned short * *,unsigned long *)",
    "int __stdcall ciIsValidPointer(void const *)",
    "public: void __thiscall CDbProp::Marshall(class PSerStream &)const",
    "public: unsigned short * __thiscall CRegAccess::Read(unsigned short const *,unsigned short const *)",
    "public: __thiscall CException::CException(void)",
    "public: int __thiscall CDbPropSet::UnMarshall(class PDeSerStream &)",
    "public: int __thiscall CPropStoreManager::ReadProperty(unsigned long,unsigned long,struct tagPROPVARIANT *,unsigned int *)",
    "public: virtual __thiscall CSizeSerStream::~CSizeSerStream(void)",
    "public: virtual float __thiscall CMemDeSerStream::GetFloat(void)",
    "public: __thiscall CDriveInfo::CDriveInfo(unsigned short const *,unsigned long)",
    "public: void __thiscall CWorkQueue::RefreshParams(unsigned long,unsigned long)",
    "public: __thiscall CFileMapView::CFileMapView(unsigned short const *)",
    "public: unsigned int __thiscall CCatState::NumberOfColumns(void)const",
    "public: long __thiscall CPropListFile::CheckError(unsigned long &,unsigned short * *)",
    "long __stdcall IsScopeValid(unsigned short const *,unsigned int,int)",
    "public: __thiscall CCatalogEnum::~CCatalogEnum(void)",
    "public: static int __stdcall CiStorage::CheckHasIndexTable(unsigned short const *)",
    "public: __thiscall CScopeAdmin::~CScopeAdmin(void)",
    "public: static unsigned int __stdcall CiStorage::DetermineDriveType(unsigned short const *)",
    "public: void __thiscall CCatState::SetSortProp(unsigned short const *,enum SORTDIR,unsigned int)",
    "public: __thiscall CDbContentBaseRestriction::~CDbContentBaseRestriction(void)",
    "public: union _LARGE_INTEGER __thiscall CAllocStorageVariant::GetI8(unsigned int)const",
    "public: static int __stdcall CDriveInfo::ContainsDrive(unsigned short const *)",
    "public: virtual unsigned long __stdcall CEnumWorkid::Release(void)",
    "public: void __thiscall CPropStoreManager::FastInit(class CiStorage *)",
    "public: virtual __thiscall CFwAsyncWorkItem::~CFwAsyncWorkItem(void)",
    "public: __thiscall CRegNotify::CRegNotify(unsigned short const *)",
    "public: void __thiscall CDynStream::Grow(class PStorage &,unsigned long)",
    "InternalBindIFilterFromStorage",
    "public: double __thiscall CAllocStorageVariant::GetDATE(unsigned int)const",
    "public: int __thiscall CDbProp::Copy(struct tagDBPROP const &)",
    "protected: __thiscall CRcovStrmTrans::CRcovStrmTrans(class PRcovStorageObj &,enum RcovOpType)",
    "int __stdcall ValidateScopeRestriction(class CRestriction *)",
    "public: int __thiscall CDbColId::SetProperty(unsigned short const *)",
    "public: class CCompositePropRecord * __thiscall CPropStoreManager::OpenRecord(unsigned long,unsigned char *)",
    "CiCreateSecurityDescriptor",
    "public: unsigned short const * __thiscall CCatState::GetCD(void)",
    "public: __thiscall CGenericCiProxy::CGenericCiProxy(class CSharedNameGen &,unsigned long,unsigned long)",
    "public: virtual long __stdcall CDbProperties::GetPropertyInfo(unsigned long,struct tagDBPROPIDSET const * const,unsigned long *,struct tagDBPROPINFOSET * *,unsigned short * *)",
    "public: virtual unsigned short * __thiscall CMemDeSerStream::GetWString(void)",
    "DllRegisterServer",
    "public: __thiscall CWorkQueue::CWorkQueue(unsigned int,enum CWorkQueue::WorkQueueType)",
    "public: virtual class CPropEntry const * __thiscall CStaticPropertyList::Next(void)",
    "public: void __thiscall CWorkQueue::ReleaseWorkThreads(void)",
    "public: class CRestriction * __thiscall CRestriction::Clone(void)const",
    "public: class CCatalogEnum * __thiscall CMachineAdmin::QueryCatalogEnum(void)",
    "public: int __thiscall CMachineAdmin::StartCI(void)",
    "public: virtual long __stdcall CEnumString::Clone(struct IEnumString * *)",
    "CIState",
    "public: static int __stdcall CImpersonateSystem::IsRunningAsSystem(void)",
    "public: void __thiscall CStorageVariant::SetBSTR(unsigned short *,unsigned int)",
    "public: void __thiscall CDbPropSet::Marshall(class PSerStream &)const",
    "public: void __thiscall CStorageVariant::SetI4(long,unsigned int)",
    "public: unsigned short __thiscall CQueryScanner::GetCommandChar(void)",
    "public: __thiscall XPtr::~XPtr(void)",
    "public: int __thiscall CDbPropSet::Copy(struct tagDBPROPSET const &)",
    "public: void __thiscall CDbQueryResults::Add(unsigned short *,unsigned long)",
    "public: unsigned short const * __thiscall CCatState::GetColumn(unsigned int)const",
    "public: __thiscall CMachineAdmin::~CMachineAdmin(void)",
    "public: void __thiscall CCatState::GetSortProp(unsigned int,unsigned short const * *,enum SORTDIR *)const",
    "protected: void __thiscall CDbCmdTreeNode::CleanupDataValue(void)",
    "public: void __thiscall CBaseStorageVariant::Marshall(class PSerStream &)const",
    "public: unsigned char const * __thiscall CGenericCiProxy::GetStartupData(struct _GUID &,unsigned long &)",
    "public: void __thiscall CStorageVariant::SetCY(union tagCY,unsigned int)",
    "public: static struct IStemmer * __stdcall CCiOle::NewStemmer(struct _GUID const &)",
    "public: __thiscall CMachineAdmin::CMachineAdmin(unsigned short const *,int)",
    "public: virtual class CPropEntry const * __thiscall CPropertyList::Next(void)",
    "public: void __thiscall CCiRegParams::Refresh(struct ICiAdminParams *,int)",
    "public: short __thiscall CAllocStorageVariant::GetI2(unsigned int)const",
    "public: static void __stdcall CDbCmdTreeNode::PutWString(class PSerStream &,unsigned short const *)",
    "public: virtual unsigned long __stdcall CEnumString::AddRef(void)",
    "void __stdcall DecodeHtmlNumeric(unsigned short *)",
    "public: void __thiscall CStorageVariant::SetI2(short,unsigned int)",
    "public: int __thiscall CKeyArray::Add(int,class CKeyBuf const &)",
    "public: __thiscall CSortSet::CSortSet(unsigned int)",
    "public: static void __stdcall CDbColId::operator delete(void *)",
    "public: unsigned long __thiscall CStandardPropMapper::PropertyToPropId(class CFullPropSpec const &,int)",
    "public: virtual void __thiscall CMemDeSerStream::GetChar(char *,unsigned long)",
    "public: class CDbCmdTreeNode * __thiscall CDbCmdTreeNode::Clone(int)const",
    "public: void __thiscall CIndexTable::GetUserHdrInfo(unsigned int &,int &)",
    "public: int __thiscall CPropStoreManager::ReadPrimaryProperty(unsigned long,unsigned long,struct tagPROPVARIANT &)",
    "public: int __thiscall CCatalogEnum::Next(void)",
    "public: __thiscall CRegChangeEvent::~CRegChangeEvent(void)",
    "public: void __thiscall CProcess::Resume(void)",
    "public: __thiscall CSynRestriction::~CSynRestriction(void)",
    "public: __thiscall CDbColId::CDbColId(class CDbColId const &)",
    "public: long __thiscall CPropStoreManager::WriteProperty(unsigned long,unsigned long,class CStorageVariant const &)",
    "class CDbColumns * __stdcall ParseStringColumns(unsigned short const *,struct IColumnMapper *,unsigned long,class PVariableSet *,class CDynArray *)",
    "public: virtual long __stdcall CQueryUnknown::QueryInterface(struct _GUID const &,void * *)",
    "public: long __thiscall CPropStoreManager::WritePrimaryProperty(unsigned long,unsigned long,class CStorageVariant const &)",
    "public: __thiscall CProcess::~CProcess(void)",
    "public: void __thiscall CDynStream::InitializeForRead(void)",
    "public: virtual unsigned long __stdcall CEmptyPropertyList::Release(void)",
    "public: void __thiscall CQueryScanner::Accept(void)",
    "public: void __thiscall CPropStoreManager::Flush(void)",
    "public: unsigned int __thiscall CKey::StrLen(void)const",
    "public: struct tagDBCOMMANDTREE * __thiscall CTextToTree::FormFullTree(void)",
    "public: int __thiscall CMmStreamConsecBuf::Eof(void)",
    "public: void __thiscall CMmStreamConsecBuf::Map(unsigned long)",
    "public: __thiscall CDbQueryResults::CDbQueryResults(void)",
    "public: __thiscall SStorageObject::SStorageObject(class PStorageObject *)",
    "public: void __thiscall CPropStoreManager::Empty(void)",
    "void __stdcall UnPickle(int,class XPtr &,class XPtr &,class XPtr &,class XPtr &,class CRowsetProperties &,class XPtr &,unsigned char *,unsigned long)",
    "public: int __thiscall CPropertyStore::ReadProperty(unsigned long,unsigned long,struct tagPROPVARIANT &)",
    "protected: __thiscall CAllocStorageVariant::~CAllocStorageVariant(void)",
    "public: __thiscall CAllocStorageVariant::CAllocStorageVariant(char const *,class PMemoryAllocator &)",
    "public: virtual unsigned long __thiscall CMemDeSerStream::PeekULong(void)",
    "public: __thiscall CColumns::CColumns(class CColumns const &)",
    "public: void __thiscall CRangeRestriction::SetEndKey(class CKeyBuf const &)",
    "public: class CPropEntry const * __thiscall CEmptyPropertyList::Find(class CDbColId const &)",
    "public: __thiscall CRangeKeyRepository::CRangeKeyRepository(void)",
    "public: virtual long __stdcall CEnumWorkid::Skip(unsigned long)",
    "private: void __thiscall CPropStoreInfo::ChangeDirty(int)",
    "public: __thiscall CIndexTable::CIndexTable(class CiStorage &,class CTransaction &)",
    "SvcEntry_CiSvc",
    "public: virtual long __stdcall CEmptyPropertyList::QueryInterface(struct _GUID const &,void * *)",
    "public: __thiscall CColumns::~CColumns(void)",
    "public: int __thiscall CDbSelectNode::SetRestriction(class CDbCmdTreeNode *)",
    "public: unsigned long __thiscall CRegAccess::Get(unsigned short const *)",
    "public: __thiscall CDbProp::~CDbProp(void)",
    "public: class CDbByGuid & __thiscall CDbByGuid::operator=(class CDbByGuid const &)",
    "public: unsigned int __thiscall CCatState::NumberOfSortProps(void)const",
    "public: int __thiscall CMachineAdmin::IsCIEnabled(void)",
    "long __stdcall MakeLocalICommand(struct IUnknown * *,struct ICiCDocStore *,struct IUnknown *)",
    "CIShutdown",
    "CollectCIPerformanceData",
    "BindIFilterFromStorage",
    "long __stdcall GetOleError(class CException &)",
    "CIBuildQueryNode",
    "public: int __thiscall CCatalogAdmin::IsPaused(void)",
    "public: void __thiscall CStorageVariant::SetFILETIME(struct _FILETIME,unsigned int)",
    "EndCacheTransaction",
    "void __stdcall CIShutdown(void)",
    "private: void __thiscall CPropertyStore::AcquireRead(class CReadWriteLockRecord &)",
    "private: void __thiscall CVirtualString::GrowBuffer(unsigned long)",
    "unsigned short * __stdcall AllocHeapAndGetWString(class PDeSerStream &)",
    "public: __thiscall CAllocStorageVariant::CAllocStorageVariant(unsigned short const *,class PMemoryAllocator &)",
    "public: unsigned long __thiscall CRcovStrmTrans::Read(void *,unsigned long)",
    "public: class CCatalogAdmin * __thiscall CCatalogEnum::QueryCatalogAdmin(void)",
    "public: static void __stdcall CDbPropSet::operator delete(void *)",
    "public: void __thiscall CMachineAdmin::SetDWORDParam(unsigned short const *,unsigned long)",
    "public: enum CDriveInfo::eFileSystem __thiscall CDriveInfo::GetFileSystem(int)",
    "private: unsigned int __thiscall CPropStoreInfo::Lookup(unsigned long)",
    "public: __thiscall CPropertyRestriction::CPropertyRestriction(void)",
    "unsigned short * __stdcall AllocHeapAndCopy(unsigned short const *,unsigned long &)",
    "InternalBindIFilterFromFileName",
    "private: virtual void __thiscall CPhysIndex::ReOpenStream(void)",
    "public: unsigned long __thiscall CPropStoreManager::GetTotalSizeInKB(void)",
    "public: struct _FILETIME __thiscall CAllocStorageVariant::GetFILETIME(unsigned int)const",
    "public: __thiscall CNormalizer::CNormalizer(class PNoiseList &)",
    "public: void __thiscall CDbColId::Cleanup(void)",
    "public: void __thiscall CFwAsyncWorkItem::AddToWorkQueue(void)",
    "class CStaticPropertyList * __stdcall GetGlobalStaticPropertyList(void)",
    "public: __thiscall CScopeRestriction::~CScopeRestriction(void)",
    "public: int __thiscall CSdidLookupTable::AccessCheck(unsigned long,void *,unsigned long,int &)",
    "public: void __thiscall CMetaDataMgr::EnumVPaths(class CMetaDataCallBack &)",
    "long __stdcall MakeICommand(struct IUnknown * *,unsigned short const *,unsigned short const *,struct IUnknown *)",
    "protected: void __thiscall CRcovStrmTrans::Unmap(enum CRcovStorageHdr::DataCopyNum)",
    "public: int __thiscall CPropStoreManager::ReadProperty(class CCompositePropRecord &,unsigned long,struct tagPROPVARIANT &)",
    "public: __thiscall CiStorage::CiStorage(unsigned short const *,struct ICiCAdviseStatus &,unsigned long,unsigned long,int)",
    "public: unsigned short const * __thiscall CDriveInfo::GetVolumeName(int)",
    "public: void __thiscall CRangeRestriction::SetStartKey(class CKeyBuf const &)",
    "public: __thiscall CPerfMon::~CPerfMon(void)",
    "public: void __thiscall CImpersonationTokenCache::Initialize(unsigned short const *,int,int,int,unsigned long,unsigned long,unsigned long)",
    "public: __thiscall CColumns::CColumns(unsigned int)",
    "void __stdcall GetStringFromLCID(unsigned long,unsigned short *)",
    "unsigned long __stdcall MultiByteToXArrayWideChar(unsigned char const *,unsigned long,unsigned int,class XArray &)",
    "public: __thiscall CCiRegParams::CCiRegParams(unsigned short const *)",
    "public: void __thiscall CWorkManager::AbortWorkItems(void)",
    "public: int __thiscall CCatalogAdmin::GetDWORDParam(unsigned short const *,unsigned long &)",
    "public: static void __stdcall CiStorage::EnumerateFilesInDir(unsigned short const *,class CEnumString &)",
    "public: class CDbRestriction * __thiscall CQueryParser::ParseQueryPhrase(void)",
    "public: unsigned long __thiscall CWebServer::GetPhysicalPath(unsigned short const *,unsigned short *,unsigned long,unsigned long)",
    "unsigned long __stdcall SaComputeSize(unsigned short,struct tagSAFEARRAY &)",
    "DllCanUnloadNow",
    "void __stdcall SetScopeProperties(struct ICommand *,unsigned int,unsigned short const * const *,unsigned long const *,unsigned short const * const *,unsigned short const * const *)",
    "public: int __thiscall CCatalogAdmin::Start(void)",
    "public: int __thiscall CRestriction::IsValid(void)const",
    "class CDbRestriction * __stdcall GetStringDbRestriction(unsigned short const *,unsigned long,struct IColumnMapper *,unsigned long)",
    "public: virtual unsigned char __thiscall CMemDeSerStream::GetByte(void)",
    "public: void __thiscall CQueryScanner::ResetBuffer(unsigned short const *)",
    "public: int __thiscall CMachineAdmin::IsCIStarted(void)",
    "public: void __thiscall CDynStream::Write(void *,unsigned long)",
    "public: int __thiscall CPidLookupTable::FindPropid(class CFullPropSpec const &,unsigned long &,int)",
    "public: int __thiscall CDbProjectListAnchor::AppendListElement(struct tagDBID const &,unsigned short *)",
    "public: __thiscall CSizeSerStream::CSizeSerStream(void)",
    "int __stdcall CiGetPassword(unsigned short const *,unsigned short const *,unsigned short *)",
    "public: unsigned long __thiscall CPropStoreManager::WritePropertyInNewRecord(unsigned long,class CStorageVariant const &)",
    "public: unsigned short * __thiscall CKeyBuf::GetStr(void)const",
    "public: __thiscall CQueryUnknown::~CQueryUnknown(void)",
    "public: virtual unsigned long __stdcall CFwPropertyMapper::AddRef(void)",
    "public: virtual void __thiscall CMemDeSerStream::SkipLong(void)",
    "public: void __thiscall CPhysStorage::Close(void)",
    "public: void __thiscall CStorageVariant::SetUI2(unsigned short,unsigned int)",
    "long __stdcall GetOleDBErrorInfo(struct IUnknown *,struct _GUID const &,unsigned long,unsigned int,struct tagERRORINFO *,struct IErrorInfo * *)",
    "public: __thiscall CParseCommandTree::~CParseCommandTree(void)",
    "public: __thiscall CDefColumnRegEntry::CDefColumnRegEntry(void)",
    "public: void __thiscall CPropertyList::ClearList(void)",
    "public: void __thiscall CEnumWorkid::Append(unsigned long)",
    "public: void __thiscall CDiskFreeStatus::UpdateDiskLowInfo(void)",
    "public: void __thiscall CFilterDaemon::StopFiltering(void)",
    "public: virtual void __thiscall CMemDeSerStream::SkipGUID(void)",
    "public: void __thiscall CScopeAdmin::SetExclude(int)",
    "public: class PStorage & __thiscall CPropStoreManager::GetStorage(unsigned long)",
    "public: virtual __thiscall CRangeKeyRepository::~CRangeKeyRepository(void)",
    "public: void __thiscall CPidRemapper::Set(class XArray &)",
    "unsigned __int64 __cdecl My_wcstoui64(unsigned short const *,unsigned short * *,int)",
    "unsigned short const * __stdcall GetStringFromLCID(unsigned long)",
    "int __stdcall IsNullPointerVariant(struct tagPROPVARIANT *)",
    "public: char * __thiscall CAllocStorageVariant::GetLPSTR(unsigned int)const",
    "public: void __thiscall CWorkQueue::Release(class CWorkThread *)",
    "public: unsigned short * __thiscall CQueryScanner::AcqLine(int)",
    "public: int __thiscall CDbByGuid::UnMarshall(class PDeSerStream &)",
    "public: __thiscall CLangList::CLangList(struct ICiCLangRes *,unsigned long)",
    "public: virtual unsigned long __stdcall CEnumString::Release(void)",
    "public: union tagCY __thiscall CAllocStorageVariant::GetCY(unsigned int)const",
    "public: __thiscall CTimeLimit::CTimeLimit(unsigned long,unsigned long)",
    "public: void __thiscall CDefColumnRegEntry::Refresh(int)",
    "public: virtual double __thiscall CMemDeSerStream::GetDouble(void)",
    "InitializeCIISAPIPerformanceData",
    "public: void __thiscall CPhysStorage::Flush(int)",
    "void * __stdcall ciNew(unsigned int)",
    "public: int __thiscall CRestriction::IsLeaf(void)const",
    "public: __thiscall CSynRestriction::CSynRestriction(class CKey const &,unsigned long,unsigned long,unsigned long,int)",
    "public: __thiscall CFullPath::CFullPath(unsigned short const *)",
    "CIMakeICommand",
    "public: __thiscall CEventLog::CEventLog(unsigned short const *,unsigned short const *)",
    "public: __thiscall CSvcQuery::CSvcQuery(unsigned short const *,struct IDBProperties *)",
    "protected: __thiscall CPhysStorage::CPhysStorage(class PStorage &,class PStorageObject &,unsigned long,unsigned int,class PMmStream *,int,unsigned int,int)",
    "public: __thiscall CFwAsyncWorkItem::CFwAsyncWorkItem(class CWorkManager &,class CWorkQueue &)",
    "public: int __thiscall CDbNestingNode::AddTable(class CDbCmdTreeNode *)",
    "public: virtual void __thiscall CMemDeSerStream::SkipULong(void)",
    "public: void __thiscall CWorkQueue::Shutdown(void)",
    "public: unsigned short const * __thiscall CCatalogAdmin::GetLocation(void)",
    "public: virtual long __stdcall CEnumString::QueryInterface(struct _GUID const &,void * *)",
    "public: __thiscall CCatState::~CCatState(void)",
    "public: void __thiscall CDbCmdTreeNode::TransferNode(class CDbCmdTreeNode *)",
    "public: __thiscall CDFA::~CDFA(void)",
    "public: __thiscall CPropStoreManager::~CPropStoreManager(void)",
    "public: virtual void __thiscall CPropertyList::InitIterator(void)",
    "public: __thiscall CFullPropSpec::CFullPropSpec(class PDeSerStream &)",
    "public: void __thiscall CStorageVariant::SetI8(union _LARGE_INTEGER,unsigned int)",
    "public: unsigned long * __thiscall CPhysStorage::BorrowBuffer(unsigned long,int,int)",
    "public: void __thiscall CColumns::Remove(unsigned int)",
    "public: __thiscall CDbColumnNode::CDbColumnNode(struct tagDBID const &,int)",
    "DoneFILTERPerformanceData",
    "public: int __thiscall CCatalogAdmin::Pause(void)",
    "public: static void __stdcall CImpersonateSystem::SetRunningAsSystem(void)",
    "public: void __thiscall CLocalGlobalPropertyList::Load(unsigned short const * const)",
    "public: void __thiscall CPropStoreManager::EndTransaction(unsigned long,int,unsigned long,unsigned long)",
    "public: int __thiscall CDbPropBaseRestriction::SetProperty(struct tagDBID const &)",
    "public: void __thiscall CRcovStrmWriteTrans::Empty(void)",
    "public: __thiscall CKeyArray::~CKeyArray(void)",
    "public: unsigned long * __thiscall CPhysStorage::BorrowNewBuffer(unsigned long)",
    "public: class CRangeRestriction * __thiscall CRangeKeyRepository::AcqRst(void)",
    "public: void __thiscall CDynStream::Flush(void)",
    "CollectCIISAPIPerformanceData",
    "public: void __thiscall CStorageVariant::SetUI1(unsigned char,unsigned int)",
    "public: void __thiscall CDbCmdTreeNode::Marshall(class PSerStream &)const",
    "public: void __thiscall CDbSortSet::Remove(unsigned int)",
    "public: int __thiscall CAllocStorageVariant::IsValid(void)const",
    "public: static int __stdcall CMetaDataMgr::IsIISAdminUp(int &)",
    "public: virtual long __thiscall CPidConverter::FPSToPROPID(class CFullPropSpec const &,unsigned long &)",
    "public: __thiscall CContentRestriction::~CContentRestriction(void)",
    "public: __thiscall CMemSerStream::CMemSerStream(unsigned char *,unsigned long)",
    "public: __thiscall CImpersonateRemoteAccess::CImpersonateRemoteAccess(class CImpersonationTokenCache *)",
    "public: virtual class CPropEntry const * __thiscall CCombinedPropertyList::Find(unsigned short const *)",
    "public: virtual unsigned long __stdcall CDbProperties::Release(void)",
    "public: virtual void __thiscall CMemDeSerStream::SkipDouble(void)",
    "public: void __thiscall CMmStream::Open(unsigned short const *,unsigned long,unsigned long,unsigned long,unsigned long,int)",
    "protected: void __thiscall CAllocStorageVariant::ResetType(class PMemoryAllocator &)",
    "public: virtual class CPropEntry const * __thiscall CCombinedPropertyList::Next(void)",
    "void __stdcall DoFailTest(long)",
    "public: int __thiscall CPhysStorage::RequiresFlush(unsigned long)",
    "InternalBindIFilterFromDocCLSID",
    "public: __thiscall CSort::~CSort(void)",
    "LoadIFilter",
    "CIGetGlobalPropertyList",
    "public: void __thiscall CDynStream::InitializeForWrite(unsigned long)",
    "public: void __thiscall CStorageVariant::SetBOOL(short,unsigned int)",
    "public: __thiscall CPropertyStoreWids::~CPropertyStoreWids(void)",
    "void __stdcall ciDelete(void *)",
    "public: __thiscall CDbQueryResults::~CDbQueryResults(void)",
    "public: virtual void __thiscall CMemDeSerStream::GetWChar(unsigned short *,unsigned long)",
    "public: void __thiscall CMachineAdmin::RemoveCatalog(unsigned short const *,int)",
    "void __stdcall VerifyThreadHasAdminPrivilege(void)",
    "public: __thiscall CDbColId::CDbColId(struct tagDBID const &)",
    "public: int __thiscall CDbPropBaseRestriction::SetProperty(class CDbColumnNode const &)",
    "public: int __thiscall CPropStoreManager::ReadProperty(unsigned long,unsigned long,struct tagPROPVARIANT &,unsigned char *,unsigned int *)",
    "public: int __thiscall COLEPropManager::Open(class CFunnyPath const &)",
    "public: void __thiscall CStorageVariant::SetUI4(unsigned long,unsigned int)",
    "public: virtual void __thiscall CPropertyList::AddEntry(class CPropEntry *,int)",
    "public: virtual long __stdcall CFwPropertyMapper::PropertyToPropid(struct tagFULLPROPSPEC const *,int,unsigned long *)",
    "int __stdcall GetSecret(unsigned short const *,unsigned short const *,unsigned short * *,unsigned long *)",
    "public: int __thiscall CDbSortSet::Add(class CDbColId const &,unsigned long,unsigned int)",
    "public: void __thiscall CPropNameArray::Marshall(class PSerStream &)const",
    "public: void __thiscall CGetDbProps::GetProperties(struct IDBProperties *,unsigned long)",
    "public: unsigned long __thiscall CMetaDataMgr::GetVPathAuthorization(unsigned short const *)",
    "public: void __thiscall CMmStream::OpenExclusive(unsigned short *,int)",
    "public: void __thiscall CMetaDataMgr::EnableVPathNotify(class CMetaDataVPathChangeCallBack *)",
    "public: virtual long __stdcall CEmptyPropertyList::GetPropInfoFromName(unsigned short const *,struct tagDBID * *,unsigned short *,unsigned int *)",
    "public: virtual unsigned long __thiscall CMemDeSerStream::GetULong(void)",
    "public: int __thiscall CMachineAdmin::GetDWORDParam(unsigned short const *,unsigned long &)",
    "public: void __thiscall CScopeAdmin::SetAlias(unsigned short const *)",
    "public: void __thiscall CStorageVariant::SetR4(float,unsigned int)",
    "public: virtual long __stdcall CFwPropertyMapper::QueryInterface(struct _GUID const &,void * *)",
    "public: __thiscall COccRestriction::~COccRestriction(void)",
    "long __stdcall DumpWorkId(unsigned short const *,unsigned long,unsigned char *,unsigned long &,unsigned short const *,unsigned short const *,unsigned long)",
    "public: __thiscall CInternalPropertyRestriction::~CInternalPropertyRestriction(void)",
    "public: __thiscall CPersDeComp::CPersDeComp(class PDirectory &,unsigned long,class CPhysIndex &,unsigned long,int,int)",
    "CIRevertToSelf",
    "public: __thiscall CPidRemapper::~CPidRemapper(void)",
    "public: __thiscall CFwEventItem::CFwEventItem(unsigned short,unsigned long,unsigned short,unsigned long,void *)",
    "public: unsigned long __thiscall CPidMapper::PidToRealPid(unsigned long)",
    "public: void __thiscall CDbProp::Cleanup(void)",
    "_ForceMasterMerge@16",
    "public: void __thiscall CRegNotify::DisableNotification(void)",
    "public: void __thiscall CEventLog::ReportEventW(class CEventItem &)",
    "LoadBinaryFilter",
    "public: void __thiscall CMachineAdmin::SetSZParam(unsigned short const *,unsigned short const *,unsigned long)",
    "void __stdcall HTMLEscapeW(unsigned short const *,class CVirtualString &,unsigned long)",
    "public: unsigned long __thiscall CDynStream::Read(void *,unsigned long)",
    "public: static unsigned short * __stdcall CDbCmdTreeNode::AllocAndCopyWString(unsigned short const *)",
    "public: void __thiscall CScopeAdmin::SetLogonInfo(unsigned short const *,unsigned short const *,class CCatalogAdmin &)",
    "public: int __thiscall CDbProperties::UnMarshall(class PDeSerStream &)",
    "public: virtual char * __thiscall CMemDeSerStream::GetString(void)",
    "public: void __thiscall CNatLanguageRestriction::Marshall(class PSerStream &)const",
    "public: __thiscall CRegAccess::CRegAccess(unsigned long,unsigned short const *)",
    "public: __thiscall CScopeRestriction::CScopeRestriction(unsigned short const *,int,int)",
    "public: int __thiscall CPidLookupTable::EnumerateProperty(class CFullPropSpec &,unsigned int &)",
    "BindIFilterFromStream",
    "public: __thiscall CDynStream::CDynStream(class PMmStream *)",
    "unsigned long __stdcall LocaleToCodepage(unsigned long)",
    "public: static void __stdcall CDriveInfo::GetDrive(unsigned short const *,unsigned short *)",
    "struct _iobuf * __stdcall OpenFileFromPath(unsigned short const *)",
    "public: static int __stdcall CImpersonateSystem::IsImpersonated(void)",
    "private: void __thiscall CPropertyStore::ReleaseRead(class CReadWriteLockRecord &)",
    "public: long __thiscall CCopyRcovObject::DoIt(void)",
    "public: __thiscall CRegChangeEvent::CRegChangeEvent(unsigned short const *,int)",
    "public: int __thiscall CMachineAdmin::IsCIStopped(void)",
    "public: int __thiscall CPathParser::GetFileName(unsigned short *,unsigned long &)const",
    "public: void __thiscall CCatState::ChangeCurrentMachine(unsigned short const *)",
    "public: void __thiscall CCatState::SetNumberOfSortProps(unsigned int)",
    "public: void __thiscall CCatState::AddCatalog(class XPtrST &)",
    "public: void __thiscall CDynStream::Shrink(class PStorage &,unsigned long)",
    "public: void __thiscall CQueryUnknown::ReInit(unsigned long,class CRowset * *)",
    "public: unsigned long __thiscall CDbQueryResults::Size(void)",
    "public: __thiscall CDbPropIDSet::~CDbPropIDSet(void)",
    "protected: void __thiscall CPipeClient::Close(void)",
    "public: void __thiscall CDbQueryResults::Serialize(class PSerStream &)const",
    "unsigned long __stdcall WideCharToXArrayMultiByte(unsigned short const *,unsigned long,unsigned int,class XArray &)",
    "InitializeFILTERPerformanceData",
    "public: __thiscall CRequestQueue::CRequestQueue(unsigned int,unsigned int,unsigned int,int,unsigned int,unsigned int,struct _GUID const &)",
    "public: __thiscall CDbColumns::CDbColumns(unsigned int)",
    "public: __thiscall CLocalGlobalPropertyList::CLocalGlobalPropertyList(class CEmptyPropertyList *,int,unsigned short const *,unsigned long)",
    "public: int __thiscall CMachineAdmin::IsCIPaused(void)",
    "public: __thiscall CNodeRestriction::~CNodeRestriction(void)",
    "public: long __thiscall CPropStoreManager::WriteProperty(class CCompositePropRecordForWrites &,unsigned long,class CStorageVariant const &)",
    "public: short __thiscall CAllocStorageVariant::GetBOOL(unsigned int)const",
    "private: static unsigned short * CGlobalPropFileRefresher::_wcsFileName",
    "public: void __thiscall CCatState::SetCatalog(unsigned short const *)",
    "public: int __thiscall CBufferCache::MinPageInUse(unsigned long &)",
    "public: int __thiscall CDbColId::operator==(class CDbColId const &)const",
    "public: unsigned int __thiscall CKeyBuf::StrLen(void)const",
    "unsigned __int64 __cdecl _wcstoui64(unsigned short const *,unsigned short * *,int)",
    "public: int __thiscall CDbCmdTreeNode::UnMarshall(class PDeSerStream &)",
    "public: float __thiscall CAllocStorageVariant::GetR4(unsigned int)const",
    "public: __thiscall CNatLanguageRestriction::CNatLanguageRestriction(unsigned short const *,class CFullPropSpec const &,unsigned long)",
    "public: __thiscall CKeyArray::CKeyArray(int,int)",
    "public: __thiscall CNodeRestriction::CNodeRestriction(unsigned long,unsigned int)",
    "public: __thiscall CRangeRestriction::CRangeRestriction(void)",
    "public: int __thiscall CDbParameter::UnMarshall(class PDeSerStream &)",
    "public: int __thiscall CDbPropertyRestriction::IsCIDialect(void)",
    "public: int __thiscall CMachineAdmin::GetSZParam(unsigned short const *,unsigned short *,unsigned long)",
    "public: int __thiscall CDbColumns::Add(class CDbColId const &,unsigned int)",
    "public: class CCatalogAdmin * __thiscall CMachineAdmin::QueryCatalogAdmin(unsigned short const *)",
    "void __stdcall SetSecret(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long)",
    "public: void __thiscall CEventItem::AddArg(unsigned long)",
    "public: void __thiscall CDbContentVector::Marshall(class PSerStream &)const",
    "public: __thiscall CSdidLookupTable::CSdidLookupTable(void)",
    "int __stdcall SaCreateAndCopy(class PMemoryAllocator &,struct tagSAFEARRAY *,struct tagSAFEARRAY * *)",
    "DllGetClassObject",
    "private: class CDbScalarValue * __thiscall CDbPropertyRestriction::_FindOrAddValueNode(void)",
    "public: class PRcovStorageObj * __thiscall CiStorage::QueryPidLookupTable(unsigned long)",
    "public: __thiscall CDynStream::~CDynStream(void)",
    "public: void __thiscall CWorkManager::AddToWorkList(class CFwAsyncWorkItem *)",
    "public: void __thiscall CRcovStrmMDTrans::Commit(void)",
    "_StartFWCiSvcWork@12",
    "CITextToSelectTreeEx",
    "public: __thiscall CPerfMon::CPerfMon(unsigned short const *)",
    "public: int __thiscall CMachineAdmin::StopCI(void)",
    "public: void __thiscall CRestriction::Marshall(class PSerStream &)const",
    "unsigned long __stdcall GetBrowserCodepage(class CWebServer &,unsigned long)",
    "public: int __thiscall CCatalogAdmin::Stop(void)",
    "public: void __thiscall CFullPropSpec::Marshall(class PSerStream &)const",
    "CollectFILTERPerformanceData",
    "long __stdcall SetScopePropertiesNoThrow(struct ICommand *,unsigned int,unsigned short const * const *,unsigned long const *,unsigned short const * const *,unsigned short const * const *)",
    "public: virtual void __thiscall CMemDeSerStream::SkipFloat(void)",
    "CITextToFullTreeEx",
    "public: void __thiscall CEventItem::AddError(unsigned long)",
    "public: __thiscall CPropertyStoreWids::CPropertyStoreWids(class CPropStoreManager &)",
    "public: void __thiscall CPropStoreManager::MakeBackupCopy(struct IProgressNotify *,int &,class CiStorage &,struct ICiEnumWorkids *,struct IEnumString * *)",
    "public: virtual void __thiscall CMemDeSerStream::GetBlob(unsigned char *,unsigned long)",
    "public: void __thiscall CFwEventItem::AddArg(unsigned long)",
    "public: __thiscall CFilterDaemon::CFilterDaemon(class CiProxy &,class CCiFrameworkParams &,class CLangList &,unsigned char *,unsigned long,struct ICiCFilterClient *)",
    "public: void __thiscall CPhysStorage::ShrinkToFit(void)",
    "LocateCatalogsA",
    "public: __thiscall CCategorizationSet::CCategorizationSet(unsigned int)",
    "BeginCacheTransaction",
    "public: __thiscall CWorkManager::~CWorkManager(void)",
    "public: int __thiscall CWin32RegAccess::Get(unsigned short const *,unsigned short *,unsigned int,int)",
    "public: virtual unsigned long __stdcall CFwPropertyMapper::Release(void)",
    "public: int __thiscall CWebServer::GetCGIVariable(char const *,class XArray &,unsigned long &)",
    "public: void __thiscall CCatalogAdmin::AddCachedProperty(class CFullPropSpec const &,unsigned long,unsigned long,unsigned long,int)",
    "public: void __thiscall CPropStoreManager::Shutdown(void)",
    "public: __thiscall CPropertyRestriction::~CPropertyRestriction(void)",
    "public: int __thiscall CCatalogAdmin::IsCatalogInactive(void)",
    "public: virtual long __stdcall CEnumWorkid::QueryInterface(struct _GUID const &,void * *)",
    "public: __thiscall CCategorizationSet::CCategorizationSet(class CCategorizationSet const &)",
    "public: __thiscall CDbNatLangRestriction::CDbNatLangRestriction(unsigned short const *,class CDbColumnNode const &,unsigned long)",
    "public: class PRcovStorageObj * __thiscall CiStorage::QueryVirtualScopeList(unsigned long)",
    "public: void __thiscall CVectorRestriction::Marshall(class PSerStream &)const",
    "public: void __thiscall CWorkQueue::Remove(class PWorkItem *)",
    "CIBuildQueryTree",
    "public: __thiscall CPropNameArray::CPropNameArray(class PDeSerStream &)",
    "int __stdcall VT_VARIANT_GE(struct tagPROPVARIANT const &,struct tagPROPVARIANT const &)",
    "public: void __thiscall CRegAccess::Get(unsigned short const *,unsigned short *,unsigned int)",
    "public: long __thiscall CAllocStorageVariant::GetI4(unsigned int)const",
    "public: virtual long __thiscall CMemDeSerStream::GetLong(void)",
    "private: class CDbProjectListAnchor * __thiscall CDbProjectNode::_FindOrAddAnchor(void)",
    "public: __thiscall CDbContentRestriction::CDbContentRestriction(unsigned short const *,struct tagDBID const &,unsigned long,unsigned long)",
    "public: int __thiscall CDbSortSet::Add(class CDbSortKey const &,unsigned int)",
    "public: unsigned short * __thiscall CAllocStorageVariant::GetLPWSTR(unsigned int)const",
    "public: void __thiscall CCatalogAdmin::SetDWORDParam(unsigned short const *,unsigned long)",
    "public: class PRcovStorageObj * __thiscall CiStorage::QueryScopeList(unsigned long)",
    "public: int __thiscall CRcovStrmTrans::Seek(unsigned long)",
    "private: unsigned long __thiscall CPropertyStore::LokNewWorkId(unsigned long,int,int)",
    "public: __thiscall CDbSortSet::~CDbSortSet(void)",
    "public: int __thiscall CPhysStorage::MinPageInUse(unsigned long &)",
    "public: void __thiscall CStorageVariant::SetLPWSTR(unsigned short const *,unsigned int)",
    "public: __thiscall CDbColumns::~CDbColumns(void)",
    "public: void __thiscall CCatState::ChangeCurrentScope(unsigned short const *)",
    "public: void __thiscall COLEPropManager::FetchProperty(struct _GUID const &,struct tagPROPSPEC const &,struct tagPROPVARIANT *,unsigned int *)",
    "public: int __thiscall CWin32RegAccess::Enum(unsigned short *,unsigned long)",
    "public: void __thiscall CCatState::SetCD(unsigned short const *)",
    "public: __thiscall CInternalPropertyRestriction::CInternalPropertyRestriction(unsigned long,unsigned long,class CStorageVariant const &,class CRestriction *)",
    "public: int __thiscall CScopeEnum::Next(void)",
    "public: void __thiscall CDbByGuid::Marshall(class PSerStream &)const",
    "public: __thiscall CEventItem::CEventItem(unsigned short,unsigned short,unsigned long,unsigned short,unsigned long,void const *)",
    "public: void __thiscall CCatalogAdmin::AddScope(unsigned short const *,unsigned short const *,int,unsigned short const *,unsigned short const *)",
    "public: int __thiscall CKeyArray::FillMax(int)",
    "DllUnregisterServer",
    "public: virtual unsigned long __stdcall CQueryUnknown::Release(void)",
    "public: virtual void __thiscall CMemDeSerStream::SkipBlob(unsigned long)",
    "public: __thiscall CPidLookupTable::CPidLookupTable(void)",
    "public: void __thiscall CPhysStorage::MakeBackupCopy(class CPhysStorage &,class PSaveProgressTracker &)",
    "public: void __thiscall CPropertyRestriction::SetValue(struct _GUID *)",
    "public: __thiscall CMetaDataMgr::~CMetaDataMgr(void)",
    "public: void __thiscall CCatState::ChangeCurrentDepth(int)",
    "public: virtual void __thiscall CMemDeSerStream::SkipByte(void)",
    "public: class CNodeRestriction * __thiscall CNodeRestriction::Clone(void)const",
    "private: class CDbProjectListAnchor * __thiscall CDbNestingNode::_FindGroupListAnchor(void)",
    "public: struct _GUID __thiscall CAllocStorageVariant::GetCLSID(unsigned int)const",
    "public: static unsigned int __stdcall CEmptyPropertyList::GetPropTypeCount(void)",
    "public: virtual long __stdcall CEmptyPropertyList::EnumPropInfo(unsigned long,unsigned short const * *,struct tagDBID * *,unsigned short *,unsigned int *)",
    "public: static unsigned short const * __stdcall CEmptyPropertyList::GetPropTypeName(unsigned int)",
    "public: void __thiscall CFullPropSpec::SetProperty(unsigned long)",
    "public: void __thiscall CPropStoreManager::CloseRecord(class CCompositePropRecordForWrites *)",
    "public: static void __stdcall CDbContent::operator delete(void *)",
    "SetupCacheEx",
    "LoadTextFilter",
    "public: __thiscall CPropertyRestriction::CPropertyRestriction(unsigned long,class CFullPropSpec const &,class CStorageVariant const &)",
    "public: virtual long __stdcall CEmptyPropertyList::GetPropInfoFromId(struct tagDBID const *,unsigned short * *,unsigned short *,unsigned int *)",
    "public: int __thiscall CDriveInfo::IsWriteProtected(void)",
    "protected: virtual __thiscall CRegNotify::~CRegNotify(void)",
    "public: void __thiscall CDbColId::Marshall(class PSerStream &)const",
    "int __stdcall VT_VARIANT_GT(struct tagPROPVARIANT const &,struct tagPROPVARIANT const &)",
    "public: void __thiscall CRcovStrmWriteTrans::Commit(void)",
    "public: int __thiscall CPidLookupTable::Init(class PRcovStorageObj *)",
    "unsigned long __stdcall GetLCIDFromString(unsigned short *)",
    "public: virtual __thiscall CGenericCiProxy::~CGenericCiProxy(void)",
    "public: unsigned char __thiscall CDFA::Recognize(unsigned short const *)",
    "public: int __thiscall CNodeRestriction::IsValid(void)const",
    "public: virtual unsigned long __stdcall CQueryUnknown::AddRef(void)",
    "public: __thiscall CDbColId::CDbColId(void)",
    "public: int __thiscall CSdidLookupTable::Init(class CiStorage *)",
    "public: void __thiscall CMetaDataMgr::DisableVPathNotify(void)"
  ],
  "qasf.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "qcap.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "qdv.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "qdvd.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "qedit.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "qedwipes.dll": "No exports",
  "qmgr.dll": [
    "public: __thiscall CNestedImpersonation::CNestedImpersonation(void)",
    "class std::auto_ptr __stdcall HostFromProxyDescription(unsigned short *)",
    "BITSServiceMain",
    "public: __thiscall CNestedImpersonation::CNestedImpersonation(void *,bool)",
    "public: long * __thiscall CPerfMon::GetCounter32(struct CPerfMon::__COUNTER_ID *,struct CPerfMon::__INSTANCE_ID *)",
    "unsigned long __stdcall GetNetworkRouteInfo(unsigned short const *,struct sockaddr_storage *)",
    "private: int __thiscall CPerfMon::IsValidObjOrd(struct CPerfMon::__OBJECT_ORD *)const",
    "private: struct CPerfMon::_PERF_ITEM * __thiscall CPerfMon::CounterIdToPerfItem(struct CPerfMon::__COUNTER_ID *)const",
    "protected: bool __thiscall CRangeCollection::CalculateBytesTotal(void)",
    "public: long __thiscall CRangeCollection::GetSubRanges(unsigned __int64,unsigned __int64,unsigned long,unsigned int,class CRangeCollection * *)const",
    "private: int __thiscall CPerfMon::IsValidInstId(struct CPerfMon::__OBJECT_ORD *,struct CPerfMon::__INSTANCE_ID *)const",
    "public: unsigned __int64 __thiscall CRangeCollection::BytesRemainingInCurrentRange(void)const",
    "public: __thiscall CNestedImpersonation::CNestedImpersonation(class TokenHandle const &)",
    "void __stdcall BITSFree(void *)",
    "public: long __thiscall CCredentialsContainer::Find(enum __MIDL_IBackgroundCopyJob2_0001,enum __MIDL_IBackgroundCopyJob2_0002,struct __MIDL_IBackgroundCopyJob2_0005 * *)const",
    "public: __thiscall CNestedImpersonation::CNestedImpersonation(void *)",
    "public: __thiscall PROXY_SETTINGS_CONTAINER::PROXY_SETTINGS_CONTAINER(class GenericStringHandle const &,class TokenHandle const &,class TokenHandle const &,struct PROXY_SETTINGS const *)",
    "public: __int64 * __thiscall CPerfMon::GetCounter64(struct CPerfMon::__COUNTER_ID *,struct CPerfMon::__INSTANCE_ID *)",
    "void * __stdcall BITSAlloc(unsigned int)",
    "public: class CPerfMon & __thiscall CPerfMon::operator=(class CPerfMon const &)",
    "private: static struct GenericStringHandle::StringData GenericStringHandle::s_EmptyString",
    "private: int __thiscall CPerfMon::ObjectIdToPerfItemIndex(struct CPerfMon::__OBJECT_ID *)const",
    "private: struct CPerfMon::_PERF_ITEM * __thiscall CPerfMon::ObjectIdToPerfItem(struct CPerfMon::__OBJECT_ID *)const",
    "ServiceMain"
  ],
  "qmgrprxy.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "quartz.dll": [
    "DllUnregisterServer",
    "AmpFactorToDB",
    "DllCanUnloadNow",
    "DBToAmpFactor",
    "AMGetErrorTextW",
    "DllGetClassObject",
    "AMGetErrorTextA",
    "DllRegisterServer"
  ],
  "qwave.dll": [
    "QDLHStartDiagnosingPath",
    "QOSQueryFlow",
    "QOSCreateHandle",
    "QOSCloseHandle",
    "QDLHPathDiagnostics",
    "QOSAddSocketToFlow",
    "QOSEnumerateFlows",
    "QOSCancel",
    "QOSNotifyFlow",
    "QOSStopTrackingClient",
    "QOSSetFlow",
    "QOSRemoveSocketFromFlow",
    "QOSStartTrackingClient",
    "ServiceMain"
  ],
  "RASMM.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "RDPENCDD.dll": "No exports",
  "RDPREFDD.dll": "No exports",
  "RESAMPLEDMO.DLL": [
    "CreateInstance",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "RPCNDFP.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "RacEngn.dll": [
    "RacSysprepGeneralize",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "RacSysprepSpecialize",
    "DllRegisterServer"
  ],
  "ReAgent.dll": [
    "WinReGetConfig",
    "WinReGetLogFile",
    "WinReGetWIMInfo",
    "WinReCreateLogInstance",
    "WinReUpdateLogInstance",
    "WinReRestoreLogFiles",
    "WinReDeleteLogFiles",
    "WinReGetGroupPolicies",
    "WinReCreateLogInstanceEx",
    "winreGetBinaryArch",
    "winreFindInstallMedia",
    "WinReInstall",
    "WinReUnInstall",
    "WinReSetRecoveryAction",
    "WinReCompleteRecovery",
    "WinReIsInstallMedia",
    "WinReOpenLogInstance",
    "WinReSetConfig",
    "WinReAddLogFile",
    "WinReSetRecoveryActionEx",
    "WinReCopySetupFiles",
    "WinRePostRecovery",
    "WinReCopyLogFilesToRamdisk",
    "WinRE_Generalize"
  ],
  "RegCtrl.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "RpcDiag.dll": [
    "RpcDiagnoseError",
    "I_RpcSetupDiagCallback"
  ],
  "RpcEpMap.dll": [
    "ServiceMain"
  ],
  "RpcNs4.dll": [
    "RpcNsMgmtHandleSetExpAge",
    "RpcNsMgmtEntryInqIfIdsA",
    "I_RpcNsGetBuffer",
    "RpcNsMgmtEntryCreateA",
    "RpcNsProfileEltAddA",
    "RpcNsProfileEltRemoveW",
    "RpcNsEntryExpandNameA",
    "RpcNsProfileEltAddW",
    "RpcNsProfileEltRemoveA",
    "RpcNsEntryExpandNameW",
    "RpcNsMgmtBindingUnexportA",
    "RpcNsGroupMbrRemoveW",
    "I_RpcReBindBuffer",
    "RpcNsBindingImportBeginW",
    "I_RpcNsSendReceive",
    "RpcNsMgmtEntryDeleteA",
    "RpcNsBindingLookupNext",
    "RpcNsBindingExportA",
    "RpcNsProfileEltInqNextA",
    "RpcNsMgmtEntryInqIfIdsW",
    "RpcNsEntryObjectInqDone",
    "RpcNsProfileEltInqNextW",
    "RpcNsBindingUnexportA",
    "RpcNsProfileEltInqDone",
    "RpcNsBindingUnexportPnPA",
    "RpcNsGroupMbrRemoveA",
    "RpcNsProfileDeleteW",
    "RpcNsBindingImportBeginA",
    "RpcNsBindingImportNext",
    "RpcNsMgmtBindingUnexportW",
    "RpcNsGroupMbrInqDone",
    "RpcNsBindingSelect",
    "RpcNsMgmtSetExpAge",
    "I_RpcNsRaiseException",
    "RpcNsMgmtInqExpAge",
    "RpcNsProfileEltInqBeginA",
    "RpcIfIdVectorFree",
    "RpcNsBindingLookupDone",
    "RpcNsProfileDeleteA",
    "RpcNsEntryObjectInqBeginA",
    "RpcNsGroupMbrInqBeginW",
    "RpcNsBindingExportPnPW",
    "I_RpcNsNegotiateTransferSyntax",
    "RpcNsMgmtEntryCreateW",
    "RpcNsBindingExportW",
    "RpcNsGroupDeleteA",
    "RpcNsEntryObjectInqBeginW",
    "RpcNsBindingUnexportPnPW",
    "RpcNsGroupMbrInqBeginA",
    "RpcNsGroupMbrAddA",
    "RpcNsBindingImportDone",
    "RpcNsBindingLookupBeginW",
    "RpcNsGroupMbrInqNextW",
    "RpcNsProfileEltInqBeginW",
    "RpcNsGroupMbrAddW",
    "RpcNsGroupDeleteW",
    "RpcNsBindingLookupBeginA",
    "RpcNsEntryObjectInqNext",
    "RpcNsMgmtEntryDeleteW",
    "RpcNsGroupMbrInqNextA",
    "RpcNsBindingExportPnPA",
    "RpcNsBindingUnexportW"
  ],
  "RpcRtRemote.dll": [
    "I_RpcExtInitializeExtensionPoint",
    "DllGetContractDescription"
  ],
  "RstrtMgr.dll": [
    "RmEndSession",
    "RmStartSession",
    "RmReserveHeap",
    "RmCancelCurrentTask",
    "RmRegisterResources",
    "RmGetList",
    "RmShutdown",
    "RmGetFilterList",
    "RmAddFilter",
    "RmJoinSession",
    "RmRestart",
    "RmRemoveFilter"
  ],
  "racpldlg.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "ShowPasswordDialog",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "radardt.dll": [
    "RdrSysprepSpecialize",
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "radarrs.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "rasadhlp.dll": [
    "WSAttemptAutodialName",
    "WSNoteSuccessfulHostentLookup",
    "WSAttemptAutodialAddr",
    "AcsHlpNbConnection"
  ],
  "rasapi32.dll": [
    "RasSetAutodialAddressA",
    "RasGetAutodialEnableW",
    "RasSetSubEntryPropertiesA",
    "RasEnumAutodialAddressesW",
    "RasGetConnectStatusA",
    "RasAutodialAddressToNetwork",
    "RasGetConnectStatusW",
    "RasDeleteEntryA",
    "RasDeleteEntryW",
    "RasSetAutodialParamW",
    "RasGetCredentialsA",
    "RasGetCustomAuthDataW",
    "RasGetAutodialParamA",
    "RasGetAutodialEnableA",
    "RasSetCredentialsA",
    "RasGetSubEntryPropertiesW",
    "RasGetHport",
    "RasEnumConnectionsA",
    "RasAutodialEntryToNetwork",
    "RasGetLinkStatistics",
    "RasScriptInit",
    "RasClearLinkStatistics",
    "RasGetEntryPropertiesW",
    "RasScriptGetIpAddress",
    "RasGetEntryPropertiesA",
    "RasGetAutodialParamW",
    "RasGetConnectionStatistics",
    "RasGetNapStatus",
    "RasEnumEntriesA",
    "RasSetAutodialEnableW",
    "RasFreeEapUserIdentityW",
    "RasDeleteSubEntryA",
    "RasHangUpA",
    "RasSetAutodialAddressW",
    "RasGetCountryInfoA",
    "RasSetSharedAutoDial",
    "RasQuerySharedAutoDial",
    "RasSetCustomAuthDataA",
    "RasRenameEntryA",
    "RasEnumDevicesW",
    "RasSetAutodialParamA",
    "RasSetEntryPropertiesW",
    "RasSetCredentialsW",
    "RasUpdateConnection",
    "RasGetEntryHrasconnW",
    "RasGetEntryDialParamsA",
    "RasEditPhonebookEntryW",
    "RasQueryRedialOnLinkFailure",
    "RasSetEapUserDataA",
    "RasConnectionNotificationA",
    "RasEnumConnectionsW",
    "RasGetAutodialAddressW",
    "RasGetProjectionInfoA",
    "RasGetEapUserDataA",
    "RasConnectionNotificationW",
    "DwEnumEntryDetails",
    "DwRasUninitialize",
    "RasQuerySharedConnection",
    "RasGetEapUserIdentityW",
    "RasAutoDialSharedConnection",
    "RasGetAutodialAddressA",
    "RasDialA",
    "RasDeleteSubEntryW",
    "RasSetEapUserDataW",
    "RasRenameEntryW",
    "RasGetSubEntryPropertiesA",
    "RasValidateEntryNameA",
    "RasGetErrorStringW",
    "RasGetSubEntryHandleW",
    "RasGetCustomAuthDataA",
    "DwCloneEntry",
    "RasCreatePhonebookEntryW",
    "RasGetEapUserDataW",
    "RasClearConnectionStatistics",
    "RasIsSharedConnection",
    "RasHangUpW",
    "RasGetCountryInfoW",
    "RasCreatePhonebookEntryA",
    "DDMGetPhonebookInfo",
    "RasSetEntryDialParamsW",
    "RasSetEntryDialParamsA",
    "RasGetProjectionInfoEx",
    "RasIsPublicPhonebook",
    "RasScriptSend",
    "RasSetOldPassword",
    "RasScriptTerm",
    "RasFreeEapUserIdentityA",
    "RasWriteSharedPbkOptions",
    "DDMFreePhonebookContext",
    "RasEnumDevicesA",
    "RasDialW",
    "RasGetErrorStringA",
    "RasGetSubEntryHandleA",
    "RasGetEapUserIdentityA",
    "RasGetEntryDialParamsW",
    "RasSetAutodialEnableA",
    "RasEnumAutodialAddressesA",
    "RasGetProjectionInfoW",
    "RasValidateEntryNameW",
    "RasEnumEntriesW",
    "RasSetEntryPropertiesA",
    "RasEditPhonebookEntryA",
    "RasScriptReceive",
    "RasGetCredentialsW",
    "RasInvokeEapUI",
    "UnInitializeRAS",
    "RasSetCustomAuthDataW",
    "RasSetSubEntryPropertiesW"
  ],
  "rasauto.dll": [
    "SetAddressDisabledEx",
    "ServiceMain"
  ],
  "rascfg.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "ModemClassCoInstaller"
  ],
  "raschap.dll": [
    "RasEapFreeMemory",
    "RasEapCreateConnectionPropertiesXml",
    "RasCpEnumProtocolIds",
    "DllRegisterServer",
    "RasEapGetCredentials",
    "RasEapGetInfo",
    "RasEapQueryUIBlobFromInteractiveUIInputFields",
    "DllUnregisterServer",
    "RasEapCreateConnectionProperties",
    "RasEapGetIdentity",
    "RasEapCreateConnectionProperties2",
    "RasEapQueryInteractiveUIInputFields",
    "RasEapCreateUserProperties2",
    "RasEapQueryCredentialInputFields",
    "RasEapGetMethodProperties",
    "RasEapInvokeConfigUI",
    "DllCanUnloadNow",
    "RasCpGetInfo",
    "RasEapCreateUserProperties",
    "RasEapQueryUserBlobFromCredentialInputFields",
    "DllGetClassObject",
    "RasEapInvokeInteractiveUI"
  ],
  "rasctrs.dll": [
    "CloseRasPerformanceData",
    "CollectRasPerformanceData",
    "OpenRasPerformanceData"
  ],
  "rasdiag.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "rasdlg.dll": [
    "RasSrvHangupConnection",
    "RouterEntryDlgA",
    "RasSrvCleanupService",
    "RasDialDlgW",
    "DwTerminalDlg",
    "RasDialDlgA",
    "RasSrvAddPropPages",
    "RasPhonebookDlgA",
    "RouterEntryDlgW",
    "RasSrvEnumConnections",
    "RasSrvAllowConnectionsConfig",
    "RasSrvInitializeService",
    "RasEntryDlgW",
    "RasAutodialQueryDlgW",
    "RasPhonebookDlgW",
    "RasEntryDlgA",
    "GetRasDialOutProtocols",
    "RasUserPrefsDlg",
    "RasUserEnableManualDial",
    "RasUserGetManualDial",
    "RasAutodialQueryDlgA",
    "RasHandleDiagnostics",
    "DllCanUnloadNow",
    "RasSrvIsServiceRunning",
    "RasSrvIsConnectionConnected",
    "DllGetClassObject",
    "RasSrvIsICConfigured"
  ],
  "rasgcw.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "rasman.dll": [
    "RasBundleGetStatistics",
    "RasPortReceiveEx",
    "RasFindPrerequisiteEntry",
    "RasProtocolStarted",
    "RasGetNumPortOpen",
    "RasRpcRemoteGetUserPreferences",
    "RasSetCommSettings",
    "RasProtocolUpdateConnection",
    "RasCompressionGetInfo",
    "RasIsTrustedCustomDll",
    "RasProtocolGetInfo",
    "RasPortClose",
    "RasActivateRoute",
    "RasRpcRemoteSetUserPreferences",
    "RasPortListen",
    "RasAllocateRoute",
    "RasFreeInterfaceLuidIndex",
    "RasGetCalledIdInfo",
    "RasProtocolEnum",
    "RasSetEapUIData",
    "RasPortGetProtocolCompression",
    "RasGetDeviceNameW",
    "RasInitialize",
    "RasCompressionSetInfo",
    "RasRegisterRedialCallback",
    "RasSetRouterUsage",
    "RasStartRasAutoIfRequired",
    "RasRpcConnect",
    "RasApplyPostConnectActions",
    "RasGetDeviceName",
    "RasSecurityDialogSend",
    "RasDeviceConnect",
    "RasSignalMonitorThreadExit",
    "RasAllocInterfaceLuidIndex",
    "RasGetDialParams",
    "RasSetPortUserData",
    "RasFreeBuffer",
    "RasProtocolRetry",
    "RasDeAllocateRoute",
    "RasRpcUnloadDll",
    "RasSetCachedCredentials",
    "RasPortDisconnect",
    "RasProtocolStart",
    "RasSetDialParams",
    "RasGetDevConfigEx",
    "RasProtocolStop",
    "RasSetEapInfo",
    "RasSetCalledIdInfo",
    "RasRpcSetUserPreferences",
    "RasSetEapUserInfo",
    "RasRpcPortEnum",
    "RasEnableIpSec",
    "RasPortGetInfo",
    "RasRefConnection",
    "RasGetHportFromConnection",
    "RasRegisterPnPHandler",
    "RasGetUnicodeDeviceName",
    "RasSecurityDialogReceive",
    "RasGetDeviceConfigInfo",
    "RasRpcDisconnect",
    "RasGetEapUserInfo",
    "RasRpcRemoteGetSystemDirectory",
    "RasPortClearStatistics",
    "RasSendCreds",
    "RasPortOpen",
    "RasRpcGetCountryInfo",
    "RasRpcPortGetInfo",
    "RasIsPulseDial",
    "RasReferenceRasman",
    "RasUpdateDefaultRouteSettings",
    "RasPortSetInfo",
    "RasRpcGetInstalledProtocols",
    "RasPortEnumProtocols",
    "RasEnumLanNets",
    "RasSetDialMachineEventHandle",
    "RasSignalNewConnection",
    "RasGetInfoEx",
    "RasPortOpenEx",
    "RasRpcConnectServer",
    "RasSetupSstpServerConfig",
    "RasStartProtocolRenegotiation",
    "RasRpcGetVersion",
    "RasmanUninitialize",
    "RasPortConnectComplete",
    "RasRegisterPnPEvent",
    "RasServerPortClose",
    "RasRequestNotification",
    "RasBundleClearStatistics",
    "RasPortRetrieveUserData",
    "RasGetBuffer",
    "RasPortBundle",
    "RasGetCompartmentInfo",
    "RasGetNotificationEntry",
    "RasCreateConnection",
    "RasPortSend",
    "RasAddNotification",
    "RasInitializeNoWait",
    "RasPortSetProtocolCompression",
    "RasSetConnectionUserData",
    "RasRPCBind",
    "RasBundleGetStatisticsEx",
    "RasGetFramingCapabilities",
    "RasSetKey",
    "RasDestroyConnection",
    "RasDeviceSetInfo",
    "RasGetNdiswanDriverCaps",
    "RasGetPortUserData",
    "RasPortGetFramingEx",
    "RasRpcDisconnectServer",
    "RasSetDeviceConfigInfo",
    "RasSetNetworkInfo",
    "RasPortReceive",
    "RasAddConnectionPort",
    "RasDeviceEnum",
    "RasPortStoreUserData",
    "RasPortGetBundle",
    "RasProtocolCallback",
    "RasGetConnectInfo",
    "RasRemoveNotificationEx",
    "RasDeviceSetInfoSafe",
    "RasPortReserve",
    "RasRpcGetSystemDirectory",
    "RasPortEnum",
    "RasPortGetStatisticsEx",
    "RasEnumConnectionPorts",
    "RasAddNotificationEx",
    "RasGetInfo",
    "RasGetKey",
    "RasGetDialMachineEventContext",
    "RasPortCancelReceive",
    "RasRpcEnumConnections",
    "RasRpcGetUserPreferences",
    "RasRpcGetErrorString",
    "RasConnectionGetStatistics",
    "RasPortGetStatistics",
    "RasGetCustomScriptDll",
    "RasSetDevConfig",
    "RasSetTunnelEndPoints",
    "RasBundleClearStatisticsEx",
    "RasReferenceCustomCount",
    "RasGetTimeSinceLastActivity",
    "RasGetDevConfig",
    "RasLinkGetStatistics",
    "RasPortSetFraming",
    "RasSendNotification",
    "RasGetUserCredentials",
    "RasPortSetFramingEx",
    "RasRpcDeviceEnum",
    "RasActivateRouteEx",
    "RasGetConnectionParams",
    "RasPortFree",
    "RasRpcRemoteRasDeleteEntry",
    "RasRpcGetDevConfig",
    "RasDoIke",
    "RasGetProtocolInfo",
    "RasGetConnectionUserData",
    "RasDeviceGetInfo",
    "RasProtocolChangePassword",
    "RasRpcGetInstalledProtocolsEx",
    "IsRasmanProcess",
    "RasSecurityDialogGetInfo",
    "RasGetEapUIData",
    "RasBundleGetPort",
    "RasSetAddressDisable",
    "RasRpcDeleteEntry",
    "RasConnectionEnum",
    "RasPortGetBundledPort",
    "RasGetHConnFromEntry",
    "RasSendProtocolResultToRasman",
    "RasSetConnectionParams"
  ],
  "rasmans.dll": [
    "ServiceRequestInProcess",
    "SetEntryDialParams",
    "ServiceMain"
  ],
  "rasmbmgr.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "rasmontr.dll": [
    "RutlAssignmentFromTokenAndDword",
    "RutlGetOsVersion",
    "RutlAssignmentFromTokens",
    "GetDiagnosticFunctions",
    "RutlCreateDumpFile",
    "RutlFree",
    "RutlGetTagToken",
    "RutlStrDup",
    "RutlAlloc",
    "RutlDwordDup",
    "InitHelperDll",
    "RutlParse",
    "RutlIsHelpToken",
    "RutlCloseDumpFile"
  ],
  "rasmxs.dll": [
    "DeviceListen",
    "DeviceConnect",
    "DeviceEnum",
    "DeviceSetInfo",
    "DeviceWork",
    "DeviceGetInfo",
    "DeviceDone"
  ],
  "rasplap.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "rasppp.dll": [
    "InitializeProtocolEngine",
    "UninitializeServerProtocolEngine",
    "UninitializeProtocolEngine",
    "RasCpGetInfo",
    "PppStop",
    "RasCpEnumProtocolIds",
    "InitializeServerProtocolEngine",
    "SendMessageToProtocolEngine"
  ],
  "rasser.dll": [
    "PortGetInfo",
    "PortConnect",
    "PortTestSignalState",
    "PortCompressionSetInfo",
    "PortSetInfo",
    "PortClose",
    "PortReceiveComplete",
    "PortChangeCallback",
    "PortSetINetCfg",
    "PortDisconnect",
    "PortEnum",
    "PortOpen",
    "PortSetFraming",
    "PortReceive",
    "PortInit",
    "PortGetPortState",
    "PortSend",
    "PortClearStatistics",
    "PortGetStatistics"
  ],
  "rastapi.dll": [
    "PortGetInfo",
    "PortConnect",
    "PortTestSignalState",
    "PortCompressionSetInfo",
    "PortSetInfo",
    "PortClose",
    "PortReceiveComplete",
    "DeviceSetDevConfig",
    "RastapiSetCalledID",
    "RastapiGetCalledID",
    "DeviceListen",
    "PortChangeCallback",
    "RemovePort",
    "RefreshDevices",
    "DeviceEnum",
    "PortOpenExternal",
    "GetConnectInfo",
    "RasTapiIsPulseDial",
    "PortDisconnect",
    "PortEnum",
    "PortOpen",
    "PortSetFraming",
    "DeviceConnect",
    "UnloadRastapiDll",
    "EnableDeviceForDialIn",
    "DeviceSetInfo",
    "DeviceWork",
    "PortReceive",
    "PortInit",
    "AddPorts",
    "PortGetIOHandle",
    "PortSetIoCompletionPort",
    "PortGetPortState",
    "PortSend",
    "SetCommSettings",
    "DeviceGetDevConfig",
    "PortClearStatistics",
    "PortGetStatistics",
    "GetZeroDeviceInfo",
    "DeviceGetDevConfigEx",
    "DeviceGetInfo",
    "DeviceDone"
  ],
  "rastls.dll": [
    "RasEapFreeMemory",
    "RasEapCreateConnectionPropertiesXml",
    "DllRegisterServer",
    "RasEapGetCredentials",
    "RasEapGetInfo",
    "RasEapQueryUIBlobFromInteractiveUIInputFields",
    "RasEapCreateConnectionProperties",
    "DllUnregisterServer",
    "RasEapGetIdentity",
    "RasEapCreateConnectionProperties2",
    "RasEapQueryInteractiveUIInputFields",
    "RasEapCreateUserProperties2",
    "RasEapUpdateServerConfig",
    "RasEapQueryCredentialInputFields",
    "RasEapGetMethodProperties",
    "RasEapInvokeConfigUI",
    "DllCanUnloadNow",
    "RasEapCreateUserProperties",
    "RasEapQueryUserBlobFromCredentialInputFields",
    "DllGetClassObject",
    "RasEapInvokeInteractiveUI"
  ],
  "rdpcfgex.dll": [
    "ExtSecurityLayers",
    "ExtEncryptionLevels",
    "ExtEnd",
    "ExtGetEncryptionLevelDescr",
    "ExGetCfgVersionInfo",
    "ExtStart",
    "ExtGetCapabilities",
    "ExtGetEncryptionLevelAndDescrEx",
    "ExtGetSecurityLayerName",
    "ExtGetSecurityLayerDescrString"
  ],
  "rdpcore.dll": [
    "RDPAPI_CreateInstance"
  ],
  "rdpcorekmts.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "rdpd3d.dll": [
    "CreateDXGIFactory1",
    "D3D10CreateDevice1"
  ],
  "rdpdd.dll": "No exports",
  "rdpencom.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "rdpendp.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "GetTSAudioEndpointEnumeratorForSession",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "rdprefdrvapi.dll": [
    "ReflectorDriver_CreateInstance"
  ],
  "rdpwsx.dll": [
    "WsxSendAutoReconnectStatus",
    "WsxIcaStackIoControl",
    "WsxWinStationInitialize",
    "WsxDestroy",
    "WsxWinStationRundown",
    "WsxGetConnectionProperty",
    "WsxSetErrorInfo",
    "WsxAutomationVerification",
    "WsxInitializeClientData",
    "WsxBrokenConnection",
    "WsxConvertPublishedApp",
    "WsxVirtualChannelSecurity",
    "WsxEscape",
    "WsxLogonNotify",
    "WsxVerify",
    "WsxInitialize",
    "WsxQueryGatewayPolicies",
    "WsxDisconnect",
    "WsxConnect",
    "WsxExchangeStackConfig",
    "WsxCanLogonProceed",
    "WsxOpenVirtualChannel"
  ],
  "recovery.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "regapi.dll": [
    "RegIsTimeZoneRedirectionEnabled",
    "RegWinStationQueryNumValueW",
    "RegWdCreateW",
    "RegCdQueryW",
    "RegWinStationDeleteA",
    "RegWdQueryW",
    "RegPdQueryA",
    "UsrPropSetString",
    "RegCdCreateA",
    "RegWinStationQueryW",
    "RegGetMachinePolicy",
    "RegCdQueryA",
    "RegWinStationEnumerateW",
    "RegBuildNumberQuery",
    "RegWinStationQueryExNew",
    "RegWinStationSetSecurityA",
    "RegDefaultUserConfigQueryA",
    "RegDefaultUserConfigQueryW",
    "RegOpenServerA",
    "RegCdDeleteW",
    "RegWinStationAccessCheck",
    "RegWinStationQueryA",
    "RegGetLicensePolicyID",
    "RegQueryConnectionSettings",
    "RegDenyTSConnectionsPolicy",
    "RegUserConfigQuery",
    "RegWinStationEnumerateA",
    "RegCreateUserConfigW",
    "RegQueryOEMId",
    "RegQuerySessionSettings",
    "RegWinstationQuerySecurityConfig_Merged",
    "RegGetLicensingModePolicy",
    "RegQueryMonitorSettings",
    "QueryUserProperty",
    "RegIsMachineInHelpMode",
    "RegCdEnumerateA",
    "RegWdEnumerateW",
    "WaitForTSConnectionsPolicyChanges",
    "RegSetWinStationAllowDWM",
    "UsrPropGetString",
    "RegWdQueryA",
    "RegWdDeleteA",
    "RegWinstationSetSecurityConfig",
    "RegWdCreateA",
    "RegCdCreateW",
    "RegGetMachinePolicyEx",
    "RegWinStationQuerySecurityW",
    "RegMergeUserConfigWithUserParameters",
    "SetUserProperty",
    "RegWinStationQueryEx",
    "RegSAMUserConfig",
    "RegCdDeleteA",
    "RegQueryAllowDWM",
    "RegWinStationQueryDefaultSecurity",
    "RegWinStationSetNumValueW",
    "RegPdEnumerateA",
    "RegCreateMonitorConfigW",
    "RegSetLicensePolicyID",
    "RegConsoleShadowQueryA",
    "GetDomainName",
    "RegUserConfigRename",
    "RegConsoleShadowQueryW",
    "RegUserConfigDelete",
    "RegPdCreateA",
    "RegPdCreateW",
    "RegGetTServerVersion",
    "RegIsSrcAcceptingConnections",
    "RegWdEnumerateA",
    "RegIsMachinePolicyAllowHelp",
    "RegWinStationSetSecurityW",
    "UsrPropSetValue",
    "RegWinstationQuerySecurityConfig_Machine",
    "RegQueryListenerStart",
    "RegUserConfigSet",
    "RegWinStationQuerySecurityA",
    "RegGetUserConfigFromUserParameters",
    "RegGetUserPolicy",
    "RegWinStationSetExtendedSettingsW",
    "RegCdEnumerateW",
    "RegOpenServerW",
    "RegSetSrcAcceptConnections",
    "UsrPropGetValue",
    "RegCloseServer",
    "RegWdDeleteW",
    "RegWinStationCreateW",
    "RegPdQueryW",
    "RegQueryUtilityCommandList",
    "RegWinStationDeleteW",
    "RegWinStationQueryValueW",
    "RegPdDeleteW",
    "RegFreeUtilityCommandList",
    "RegPdEnumerateW",
    "RegPdDeleteA",
    "RegWinStationQueryExtendedSettingsW",
    "RegGetMachinePolicyNew",
    "RegIsTServer",
    "RegWinStationCreateA"
  ],
  "regidle.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "regsvc.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "remotepg.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "resutils.dll": [
    "ResUtilGetFileTimeProperty",
    "ResUtilSetMultiSzValue",
    "ResUtilGetClusterRoleState",
    "ResUtilFindLongProperty",
    "ClusWorkerTerminate",
    "ResUtilGetBinaryProperty",
    "ResUtilStopService",
    "ResUtilStopResourceService",
    "ResUtilPropertyListFromParameterBlock",
    "ResUtilSetExpandSzValue",
    "ResUtilGetBinaryValue",
    "ResUtilFindMultiSzProperty",
    "ResUtilGetResourceNameDependency",
    "ResUtilVerifyPrivatePropertyList",
    "ResUtilSetPropertyTableEx",
    "ResUtilGetDwordValue",
    "ResUtilSetResourceServiceStartParameters",
    "ResUtilAddUnknownProperties",
    "ResUtilSetPropertyParameterBlock",
    "ResUtilGetProperty",
    "ResUtilGetProperties",
    "ResUtilGetDwordProperty",
    "ResUtilGetPropertySize",
    "ResUtilGetPropertyFormats",
    "ResUtilExpandEnvironmentStrings",
    "ResUtilFreeEnvironment",
    "ResUtilSetQwordValue",
    "ClusWorkerCheckTerminate",
    "ClusterClearBackupStateForSharedVolume",
    "ClusWorkerCreate",
    "ResUtilRemoveResourceServiceEnvironment",
    "ResUtilGetPrivateProperties",
    "ResUtilDupString",
    "ResUtilEnumResources",
    "ResUtilSetBinaryValue",
    "ResUtilFindFileTimeProperty",
    "ResUtilFindBinaryProperty",
    "ResUtilEnumProperties",
    "ResUtilEnumResourcesEx",
    "ResUtilGetResourceDependencyByClass",
    "ClusterPrepareSharedVolumeForBackup",
    "ResUtilSetPropertyParameterBlockEx",
    "ResUtilGetSzValue",
    "ClusWorkerStart",
    "ResUtilGetSzProperty",
    "ResUtilResourceTypesEqual",
    "ResUtilCreateDirectoryTree",
    "ResUtilGetAllProperties",
    "ResUtilGetCoreClusterResources",
    "ResUtilIsResourceClassEqual",
    "ResUtilStartResourceService",
    "ResUtilGetResourceDependency",
    "ResUtilGetMultiSzProperty",
    "ClusterGetVolumeNameForVolumeMountPoint",
    "ResUtilGetQwordValue",
    "ResUtilGetResourceDependentIPAddressProps",
    "ResUtilSetDwordValue",
    "ResUtilEnumPrivateProperties",
    "ResUtilTerminateServiceProcessFromResDll",
    "ResUtilIsPathValid",
    "ResUtilFindDwordProperty",
    "ResUtilSetSzValue",
    "ClusterIsPathOnSharedVolume",
    "ResUtilGetResourceName",
    "ResUtilResourcesEqual",
    "ResUtilGetResourceDependencyByName",
    "ResUtilSetPropertyTable",
    "ResUtilSetResourceServiceEnvironment",
    "ResUtilDupParameterBlock",
    "ResUtilGetLongProperty",
    "ResUtilFindExpandedSzProperty",
    "ResUtilFindDependentDiskResourceDriveLetter",
    "ResUtilGetPropertiesToParameterBlock",
    "ResUtilFreeParameterBlock",
    "ResUtilSetUnknownProperties",
    "ResUtilVerifyResourceService",
    "ResUtilFindExpandSzProperty",
    "ClusterGetVolumePathName",
    "ResUtilGetEnvironmentWithNetName",
    "ResUtilSetPrivatePropertyList",
    "ResUtilFindSzProperty",
    "ResUtilVerifyPropertyTable",
    "ResUtilVerifyService"
  ],
  "rgb9rast.dll": [
    "public: long __thiscall PrimProcessor::Tri(struct _D3DTLVERTEX *,struct _D3DTLVERTEX *,struct _D3DTLVERTEX *)",
    "public: void __thiscall PrimProcessor::FreeSpans(unsigned int)",
    "D3D9GetSWInfo",
    "public: long __thiscall PrimProcessor::Initialize(void)",
    "private: void __thiscall PrimProcessor::NormalizeTriRHW(struct _D3DTLVERTEX *,struct _D3DTLVERTEX *,struct _D3DTLVERTEX *)",
    "private: void __thiscall PrimProcessor::ResetBuffer(void)",
    "private: int __thiscall PrimProcessor::LineSetup(struct _D3DTLVERTEX *,struct _D3DTLVERTEX *)",
    "private: long __thiscall PrimProcessor::FlushPartial(void)",
    "public: void __thiscall PrimProcessor::Begin(void)",
    "private: int __thiscall PrimProcessor::TriSetup(struct _D3DTLVERTEX *,struct _D3DTLVERTEX *,struct _D3DTLVERTEX *)",
    "private: void __thiscall PrimProcessor::SetTriFunctions(void)",
    "public: void __thiscall PrimProcessor::ClrFlags(unsigned int)",
    "public: void __thiscall PrimProcessor::StateChanged(void)",
    "public: __thiscall PrimProcessor::PrimProcessor(void)",
    "private: void __thiscall PrimProcessor::NormalizePointRHW(struct _D3DTLVERTEX *)",
    "public: long __thiscall PrimProcessor::AllocSpans(unsigned int *,struct tagD3DI_RASTSPAN * *)",
    "public: long __thiscall PrimProcessor::End(void)",
    "public: long __thiscall PrimProcessor::Line(struct _D3DTLVERTEX *,struct _D3DTLVERTEX *,struct _D3DTLVERTEX *)",
    "public: void __thiscall PrimProcessor::BeginPrimSet(enum _D3DPRIMITIVETYPE,enum _RAST_VERTEX_TYPE)",
    "private: void __thiscall PrimProcessor::FillPointSpan(struct _D3DTLVERTEX *,struct tagD3DI_RASTSPAN *)",
    "private: long __thiscall PrimProcessor::AppendPrim(void)",
    "private: void __thiscall PrimProcessor::NormalizeLineRHW(struct _D3DTLVERTEX *,struct _D3DTLVERTEX *)",
    "public: __thiscall PrimProcessor::~PrimProcessor(void)",
    "private: long __thiscall PrimProcessor::Flush(void)",
    "public: void __thiscall PrimProcessor::SetCtx(struct tagD3DI_RASTCTX *)",
    "public: void __thiscall PrimProcessor::SetFlags(unsigned int)",
    "public: unsigned int __thiscall PrimProcessor::GetFlags(void)",
    "private: int __thiscall PrimProcessor::PointDiamondCheck(int,int,int,int)",
    "public: long __thiscall PrimProcessor::Point(struct _D3DTLVERTEX *,struct _D3DTLVERTEX *)"
  ],
  "riched20.dll": [
    "RichEditANSIWndProc",
    "IID_ITextHost",
    "IID_ITextHost2",
    "RichEdit10ANSIWndProc",
    "CreateTextServices",
    "IID_IRichEditOleCallback",
    "IID_IRichEditOle",
    "REExtendedRegisterClass",
    "IID_ITextServices"
  ],
  "riched32.dll": "No exports",
  "rnr20.dll": [
    "NSPStartup"
  ],
  "rpchttp.dll": [
    "HttpSendIdentifyResponse",
    "HTTP2ProcessComplexTSend",
    "I_RpcTransGetHttpCredentials",
    "CompareHttpTransportCredentials",
    "HttpParseNetworkOptions",
    "HTTP2GetRpcConnectionTransport",
    "HTTP2ProcessComplexTReceive",
    "I_RpcTransFreeHttpCredentials",
    "FreeHttpTransportCredentials",
    "HTTP2ProcessRuntimePostedEvent",
    "DuplicateHttpTransportCredentials",
    "I_RpcProxyNewConnection",
    "I_RpcReplyToClientWithStatus",
    "I_RpcGetRpcProxy",
    "WS_HTTP2_INITIAL_CONNECTION__new",
    "ConvertToUnicodeHttpTransportCredentials",
    "WS_HTTP2_CONNECTION__Initialize",
    "HTTP2TestHook"
  ],
  "rpcnsh.dll": [
    "InitHelperDll"
  ],
  "rpcrt4.dll": [
    "I_RpcNsBindingSetEntryName",
    "RpcServerYield",
    "NdrPartialIgnoreServerInitialize",
    "RpcStringBindingComposeA",
    "SimpleTypeBufferSize",
    "RpcSmSetThreadHandle",
    "I_UuidCreate",
    "I_RpcTransGetThreadEvent",
    "NdrServerInitializeUnmarshall",
    "RpcEpRegisterNoReplaceW",
    "RpcServerTestCancel",
    "NdrClientInitializeNew",
    "NdrServerInitializeNew",
    "RpcExceptionFilter",
    "I_RpcSessionStrictContextHandle",
    "I_RpcLogEvent",
    "NdrMesTypeDecode",
    "NdrFixedArrayFree",
    "I_RpcBindingCreateNP",
    "RpcServerUseProtseqExW",
    "NdrFixedArrayMemorySize",
    "NDRCContextBinding",
    "NdrClientContextUnmarshall",
    "tree_size_ndr",
    "I_RpcRecordCalloutFailure",
    "NdrPointerFree",
    "NdrSimpleTypeMarshall",
    "NdrFixedArrayUnmarshall",
    "I_RpcSystemFunction001",
    "RpcMgmtStopServerListening",
    "NdrVaryingArrayUnmarshall",
    "RpcServerListen",
    "UuidCompare",
    "IUnknown_QueryInterface_Proxy",
    "NdrStubCall2",
    "NdrGetBaseInterfaceFromStub",
    "NdrpCreateStub",
    "NdrTypeSize",
    "NdrMapCommAndFaultStatus",
    "NdrPointerBufferSize",
    "NdrUserMarshalMarshall",
    "MesDecodeBufferHandleCreate",
    "char_from_ndr",
    "I_RpcNDRCGetWireRepresentation",
    "I_RpcCertProcessAndProvision",
    "RpcMgmtSetComTimeout",
    "NDRCContextUnmarshall",
    "float_array_from_ndr",
    "NdrEncapsulatedUnionMemorySize",
    "RpcSmDestroyClientContext",
    "RpcServerUseProtseqIfA",
    "RpcEpRegisterW",
    "NdrConformantVaryingStructMemorySize",
    "I_RpcDeleteMutex",
    "RpcServerUseProtseqW",
    "NdrGetDcomProtocolVersion",
    "enum_from_ndr",
    "NdrTypeMarshall",
    "NdrRpcSsDefaultAllocate",
    "MesDecodeIncrementalHandleCreate",
    "NdrStubForwardingFunction",
    "I_RpcServerInqRemoteConnAddress",
    "IUnknown_Release_Proxy",
    "RpcNetworkInqProtseqsA",
    "NdrRpcSmClientAllocate",
    "NdrOutInit",
    "NdrpGetProcFormatString",
    "RpcSsDestroyClientContext",
    "NdrGetUserMarshalInfo",
    "NdrNonEncapsulatedUnionFree",
    "NdrNonConformantStringMarshall",
    "NdrCorrelationPass",
    "float_from_ndr",
    "NdrConformantStringBufferSize",
    "RpcIfIdVectorFree",
    "I_RpcServerInqLocalConnAddress",
    "I_RpcInitImports",
    "I_RpcNsBindingSetEntryNameA",
    "NdrConformantVaryingStructMarshall",
    "NdrDllGetClassObject",
    "I_RpcReallocPipeBuffer",
    "RpcFreeAuthorizationContext",
    "NdrComplexArrayMarshall",
    "I_RpcConnectionInqSockBuffSize",
    "NdrCStdStubBuffer_Release",
    "I_RpcTransGetThreadEventThreadOptional",
    "RpcAsyncGetCallStatus",
    "UuidEqual",
    "NdrRpcSmClientFree",
    "RpcCertMatchPrincipalName",
    "NdrConvert2",
    "I_RpcServerAllocateIpPort",
    "I_RpcBindingInqWireIdForSnego",
    "NdrVaryingArrayBufferSize",
    "I_RpcServerSetAddressChangeFn",
    "NdrInterfacePointerMemorySize",
    "NdrMesTypeFree2",
    "RpcAsyncRegisterInfo",
    "NdrContextHandleSize",
    "MIDL_wchar_strlen",
    "NdrProxyErrorHandler",
    "RpcBindingSetAuthInfoExA",
    "MIDL_wchar_strcpy",
    "NdrFullPointerXlatFree",
    "NdrRangeUnmarshall",
    "NdrNonEncapsulatedUnionMarshall",
    "RpcSmGetThreadHandle",
    "RpcTestCancel",
    "data_size_ndr",
    "I_RpcOpenClientThread",
    "RpcUserFree",
    "UuidCreateNil",
    "NdrClientCall2",
    "I_RpcGetCurrentCallHandle",
    "I_RpcMapWin32Status",
    "RpcBindingServerFromClient",
    "RpcObjectSetInqFn",
    "NdrDcomAsyncClientCall",
    "RpcServerUseAllProtseqsIfEx",
    "NdrProxyInitialize",
    "NdrInterfacePointerBufferSize",
    "RpcMgmtIsServerListening",
    "NdrConformantStructUnmarshall",
    "DceErrorInqTextW",
    "RpcEpRegisterNoReplaceA",
    "I_RpcConnectionSetSockBuffSize",
    "I_RpcOpenClientProcess",
    "I_RpcServerInqAddressChangeFn",
    "I_RpcBindingInqTransportType",
    "I_RpcGetPortAllocationData",
    "I_RpcMarshalBindingHandleAndInterfaceForNDF",
    "NdrEncapsulatedUnionBufferSize",
    "I_RpcNegotiateTransferSyntax",
    "NdrVaryingArrayMarshall",
    "NdrConformantVaryingArrayMemorySize",
    "I_RpcServerRegisterForwardFunction",
    "RpcMgmtInqDefaultProtectLevel",
    "NdrRpcSsEnableAllocate",
    "RpcServerSubscribeForNotification",
    "NdrConformantArrayMemorySize",
    "RpcServerInqIf",
    "CStdStubBuffer_IsIIDSupported",
    "RpcCancelThreadEx",
    "I_RpcBindingInqMarshalledTargetInfo",
    "RpcBindingToStringBindingW",
    "NdrOleFree",
    "RpcIfInqId",
    "RpcSsDontSerializeContext",
    "NdrpGetTypeGenCookie",
    "RpcErrorStartEnumeration",
    "I_RpcSsDontSerializeContext",
    "NdrInterfacePointerMarshall",
    "RpcServerInqCallAttributesA",
    "NdrConformantArrayMarshall",
    "I_RpcInitFwImports",
    "NdrPartialIgnoreClientMarshall",
    "NdrConformantVaryingStructUnmarshall",
    "data_into_ndr",
    "long_from_ndr",
    "RpcSmSetClientAllocFree",
    "NdrPointerUnmarshall",
    "RpcErrorGetNumberOfRecords",
    "NdrComplexStructMemorySize",
    "RpcRaiseException",
    "RpcErrorAddRecord",
    "I_RpcServerUseProtseqEp2A",
    "RpcSmEnableAllocate",
    "RpcSsEnableAllocate",
    "UuidIsNil",
    "RpcMgmtInqServerPrincNameW",
    "NdrGetSimpleTypeMemorySize",
    "NdrTypeUnmarshall",
    "NdrFixedArrayMarshall",
    "pfnSizeRoutines",
    "NDRSContextUnmarshall2",
    "RpcBindingSetAuthInfoA",
    "I_RpcBindingInqDynamicEndpoint",
    "RpcStringFreeW",
    "SimpleTypeMemorySize",
    "I_RpcFilterDCOMActivation",
    "I_RpcServerStartService",
    "I_RpcBindingInqSecurityContextKeyInfo",
    "RpcErrorSaveErrorInfo",
    "RpcNsBindingInqEntryNameA",
    "I_RpcAsyncAbortCall",
    "NdrMesTypeEncode",
    "NdrCreateServerInterfaceFromStub",
    "NdrConformantVaryingStructBufferSize",
    "RpcBindingInqAuthInfoW",
    "I_RpcAsyncSetHandle",
    "RpcMgmtSetAuthorizationFn",
    "RpcBindingInqAuthInfoExW",
    "I_RpcNsInterfaceExported",
    "NdrProxyGetBuffer",
    "NdrMesSimpleTypeEncode",
    "long_array_from_ndr",
    "I_RpcServerTurnOnOffKeepalives",
    "RpcStringFreeA",
    "RpcSmFree",
    "NdrDllRegisterProxy",
    "RpcSsSetClientAllocFree",
    "NdrConformantStructMarshall",
    "I_RpcSend",
    "I_RpcTransConnectionAllocatePacket",
    "NdrSendReceive",
    "RpcNetworkIsProtseqValidA",
    "NdrNonEncapsulatedUnionBufferSize",
    "NdrClientContextMarshall",
    "TowerExplode",
    "NdrConformantStructMemorySize",
    "NdrGetSimpleTypeBufferAlignment",
    "RpcServerRegisterIfEx",
    "NDRSContextMarshall2",
    "NdrUnmarshallBasetypeInline",
    "NdrConvert",
    "NdrNonEncapsulatedUnionUnmarshall",
    "I_RpcRequestMutex",
    "NdrConformantArrayFree",
    "NdrConformantStringMemorySize",
    "NdrConformantVaryingArrayFree",
    "RpcImpersonateClient",
    "NdrComplexArrayFree",
    "RpcCertGeneratePrincipalNameA",
    "RpcMgmtInqIfIds",
    "RpcServerUnregisterIfEx",
    "NdrCStdStubBuffer2_Release",
    "I_RpcPauseExecution",
    "RpcBindingBind",
    "NdrConformantStructBufferSize",
    "NdrStubInitialize",
    "NdrpVarVtOfTypeDesc",
    "NdrPointerMemorySize",
    "NdrNonConformantStringUnmarshall",
    "RpcServerRegisterIf",
    "RpcSsContextLockExclusive",
    "NdrFullPointerXlatInit",
    "tree_peek_ndr",
    "RpcSsSwapClientAllocFree",
    "NdrCorrelationFree",
    "NdrMesSimpleTypeDecode",
    "double_from_ndr",
    "tree_into_ndr",
    "DllRegisterServer",
    "NdrOleAllocate",
    "NdrComplexArrayUnmarshall",
    "NdrAsyncServerCall",
    "NdrGetSimpleTypeBufferSize",
    "RpcCertGeneratePrincipalNameW",
    "NdrClearOutParameters",
    "pfnMarshallRoutines",
    "RpcMgmtEpEltInqBegin",
    "IUnknown_AddRef_Proxy",
    "MesEncodeDynBufferHandleCreate",
    "NdrConformantStringMarshall",
    "NdrDllUnregisterProxy",
    "NdrSimpleStructBufferSize",
    "NdrSimpleStructUnmarshall",
    "NdrMesTypeEncode2",
    "RpcBindingCreateA",
    "NdrConformantArrayBufferSize",
    "NdrNonConformantStringMemorySize",
    "CStdStubBuffer_Invoke",
    "RpcServerUseProtseqEpA",
    "NdrPointerMarshall",
    "NDRSContextUnmarshallEx",
    "RpcMgmtEpUnregister",
    "RpcMgmtEpEltInqNextA",
    "data_from_ndr",
    "RpcServerUseProtseqIfExA",
    "RpcErrorLoadErrorInfo",
    "RpcServerUnsubscribeForNotification",
    "RpcMgmtEnableIdleCleanup",
    "RpcCancelThread",
    "MesIncrementalHandleReset",
    "NDRSContextUnmarshall",
    "RpcAsyncCancelCall",
    "NdrGetTypeFlags",
    "RpcObjectSetType",
    "NdrSimpleTypeUnmarshall",
    "RpcServerUseProtseqExA",
    "NdrTypeFree",
    "RpcProtseqVectorFreeW",
    "RpcServerUnregisterIf",
    "UuidFromStringA",
    "NdrComplexStructUnmarshall",
    "I_RpcTransDatagramAllocate",
    "NdrComplexStructFree",
    "UuidToStringW",
    "RpcSmClientFree",
    "NdrConformantStringUnmarshall",
    "NdrEncapsulatedUnionUnmarshall",
    "RpcEpResolveBinding",
    "I_RpcTransDatagramFree",
    "I_RpcGetBufferWithObject",
    "short_from_ndr",
    "I_RpcClearMutex",
    "NdrNsGetBuffer",
    "NdrpReleaseTypeGenCookie",
    "RpcErrorResetEnumeration",
    "I_RpcSNCHOption",
    "RpcServerUseAllProtseqsEx",
    "double_array_from_ndr",
    "I_RpcBindingIsClientLocal",
    "CStdStubBuffer_DebugServerRelease",
    "RpcSmAllocate",
    "RpcServerInqDefaultPrincNameA",
    "UuidFromStringW",
    "NdrConformantVaryingArrayUnmarshall",
    "RpcBindingFromStringBindingA",
    "RpcStringBindingComposeW",
    "NdrServerContextNewUnmarshall",
    "NdrByteCountPointerUnmarshall",
    "I_RpcBindingInqSecurityContext",
    "NdrAsyncClientCall",
    "NdrGetBuffer",
    "NdrServerContextUnmarshall",
    "RpcBindingInqAuthInfoExA",
    "NdrXmitOrRepAsBufferSize",
    "NdrByteCountPointerBufferSize",
    "NdrServerMarshall",
    "I_RpcBindingInqLocalClientPID",
    "RpcBindingFromStringBindingW",
    "RpcServerUseAllProtseqsIf",
    "NdrEncapsulatedUnionFree",
    "I_RpcAllocate",
    "NdrConformantVaryingStructFree",
    "NdrByteCountPointerFree",
    "RpcMgmtEpEltInqDone",
    "I_RpcIfInqTransferSyntaxes",
    "SimpleTypeAlignment",
    "RpcMgmtInqServerPrincNameA",
    "NDRcopy",
    "NdrMesProcEncodeDecode",
    "UuidCreateSequential",
    "NdrProxyFreeBuffer",
    "I_RpcServerInqTransportType",
    "NdrSimpleStructMemorySize",
    "NdrFixedArrayBufferSize",
    "RpcBindingInqObject",
    "RpcSsDisableAllocate",
    "NdrpMemoryIncrement",
    "UuidCreate",
    "NdrDcomAsyncStubCall",
    "NdrXmitOrRepAsMemorySize",
    "NdrConformantVaryingArrayBufferSize",
    "RpcMgmtSetServerStackSize",
    "I_RpcTransDatagramAllocate2",
    "RpcBindingCopy",
    "RpcErrorClearInformation",
    "RpcBindingFree",
    "I_RpcGetBuffer",
    "NdrConformantVaryingArrayMarshall",
    "NdrUserMarshalBufferSize",
    "I_RpcMgmtEnableDedicatedThreadPool",
    "RpcStringBindingParseA",
    "NdrPartialIgnoreServerUnmarshall",
    "I_RpcReceive",
    "I_RpcServerIsClientDisconnected",
    "RpcNetworkIsProtseqValidW",
    "NdrComplexArrayBufferSize",
    "NdrSimpleStructFree",
    "RpcGetAuthorizationContextForClient",
    "NdrComplexArrayMemorySize",
    "UuidHash",
    "UuidToStringA",
    "RpcSmSwapClientAllocFree",
    "I_RpcTransConnectionFreePacket",
    "RpcBindingReset",
    "I_RpcFwThisIsTheManager",
    "NdrServerInitializePartial",
    "RpcMgmtInqComTimeout",
    "RpcEpUnregister",
    "RpcMgmtWaitServerListen",
    "NdrServerInitialize",
    "RpcBindingInqOption",
    "RpcBindingSetObject",
    "char_array_from_ndr",
    "NdrProxySendReceive",
    "NdrMesTypeDecode2",
    "I_RpcFreePipeBuffer",
    "NdrEncapsulatedUnionMarshall",
    "I_RpcBindingToStaticStringBindingW",
    "DceErrorInqTextA",
    "NdrNsSendReceive",
    "I_RpcInitHttpImports",
    "MesHandleFree",
    "NDRSContextMarshall",
    "NdrDllCanUnloadNow",
    "RpcSsSetThreadHandle",
    "NdrMesSimpleTypeAlignSize",
    "I_RpcInitNdrImports",
    "NdrUserMarshalSimpleTypeConvert",
    "RpcBindingUnbind",
    "NdrPartialIgnoreClientBufferSize",
    "NdrpCreateProxy",
    "NdrStubGetBuffer",
    "I_RpcCompleteAndFree",
    "I_RpcVerifierCorruptionExpected",
    "I_RpcSetDCOMAppId",
    "NdrAllocate",
    "NdrMesTypeAlignSize",
    "RpcBindingToStringBindingA",
    "RpcSsAllocate",
    "I_RpcExceptionFilter",
    "RpcMgmtEpEltInqNextW",
    "NdrFullPointerQueryRefId",
    "NdrVaryingArrayFree",
    "RpcAsyncInitializeHandle",
    "NdrXmitOrRepAsUnmarshall",
    "RpcBindingInqAuthClientExA",
    "RpcObjectInqType",
    "I_RpcNsBindingSetEntryNameW",
    "NdrSimpleStructMarshall",
    "I_RpcParseSecurity",
    "RpcServerUseAllProtseqs",
    "NdrFullPointerQueryPointer",
    "I_RpcGetExtendedError",
    "I_RpcTransServerNewConnection",
    "I_RpcServerUseProtseqEp2W",
    "NdrRpcSsDefaultFree",
    "TowerConstruct",
    "NdrContextHandleInitialize",
    "RpcServerRegisterIf2",
    "NdrpGetTypeFormatString",
    "NdrFullPointerInsertRefId",
    "RpcAsyncCompleteCall",
    "NdrInterfacePointerUnmarshall",
    "RpcRevertToSelfEx",
    "RpcServerCompleteSecurityCallback",
    "NdrStubCall",
    "RpcBindingSetAuthInfoExW",
    "I_RpcServerCheckClientRestriction",
    "pfnUnmarshallRoutines",
    "CStdStubBuffer_CountRefs",
    "I_RpcTransConnectionReallocPacket",
    "I_RpcBindingInqDynamicEndpointW",
    "NdrUserMarshalFree",
    "RpcBindingInqAuthClientA",
    "I_RpcServerUseProtseq2W",
    "RpcErrorGetNextRecord",
    "short_from_ndr_temp",
    "RpcServerUseProtseqEpExA",
    "RpcStringBindingParseW",
    "CStdStubBuffer_AddRef",
    "CreateStubFromTypeInfo",
    "I_RpcFreeBuffer",
    "I_RpcEnableWmiTrace",
    "RpcProtseqVectorFreeA",
    "NdrConformantStructFree",
    "RpcSmDisableAllocate",
    "MesEncodeIncrementalHandleCreate",
    "RpcServerRegisterAuthInfoA",
    "RpcServerUseProtseqEpExW",
    "RpcBindingInqAuthInfoA",
    "pfnFreeRoutines",
    "RpcMgmtSetCancelTimeout",
    "NdrInterfacePointerFree",
    "NdrFreeBuffer",
    "NdrNonConformantStringBufferSize",
    "NdrpReleaseTypeFormatString",
    "RpcNsBindingInqEntryNameW",
    "RpcBindingCreateW",
    "I_RpcMgmtQueryDedicatedThreadPool",
    "RpcServerInqBindings",
    "RpcSsGetThreadHandle",
    "CStdStubBuffer_QueryInterface",
    "NdrServerCall",
    "NdrServerContextMarshall",
    "NdrNonEncapsulatedUnionMemorySize",
    "RpcNetworkInqProtseqsW",
    "RpcServerUseProtseqEpW",
    "NdrXmitOrRepAsFree",
    "NdrConformantArrayUnmarshall",
    "I_RpcBindingInqCurrentModifiedId",
    "I_RpcNsInterfaceUnexported",
    "NdrTypeFlags",
    "RpcServerRegisterAuthInfoW",
    "RpcSsContextLockShared",
    "NdrUserMarshalUnmarshall",
    "I_RpcNDRSContextEmergencyCleanup",
    "RpcBindingInqAuthClientExW",
    "NdrFullPointerFree",
    "RpcBindingInqAuthClientW",
    "I_RpcSendReceive",
    "RpcServerInqBindingHandle",
    "NdrComplexStructBufferSize",
    "RpcServerUseProtseqA",
    "RpcServerUseProtseqIfW",
    "I_RpcBindingInqDynamicEndpointA",
    "I_RpcBCacheAllocate",
    "NdrXmitOrRepAsMarshall",
    "NdrServerUnmarshall",
    "I_RpcBindingHandleToAsyncHandle",
    "NdrMesProcEncodeDecode2",
    "RpcBindingSetAuthInfoW",
    "DllGetClassObject",
    "I_RpcServerUseProtseq2A",
    "RpcServerUseProtseqIfExW",
    "RpcMgmtStatsVectorFree",
    "RpcBindingSetOption",
    "NdrRpcSsDisableAllocate",
    "CStdStubBuffer_Disconnect",
    "NdrClientCall",
    "RpcAsyncAbortCall",
    "RpcMgmtInqStats",
    "I_RpcTransIoCancelled",
    "NdrByteCountPointerMarshall",
    "NdrServerContextNewMarshall",
    "RpcBindingVectorFree",
    "RpcRevertToSelf",
    "RpcSsGetContextBinding",
    "NdrVaryingArrayMemorySize",
    "I_RpcFree",
    "RpcEpRegisterA",
    "I_RpcTurnOnEEInfoPropagation",
    "NdrClientInitialize",
    "NdrCorrelationInitialize",
    "NdrServerInitializeMarshall",
    "MesBufferHandleReset",
    "RpcServerInqCallAttributesW",
    "long_from_ndr_temp",
    "NDRCContextMarshall",
    "CStdStubBuffer_Connect",
    "NdrMesTypeAlignSize2",
    "CreateProxyFromTypeInfo",
    "CStdStubBuffer_DebugServerQueryInterface",
    "NdrServerCall2",
    "NdrRpcSmSetClientToOsf",
    "RpcSsFree",
    "I_RpcBindingCopy",
    "MesEncodeFixedBufferHandleCreate",
    "RpcErrorEndEnumeration",
    "NDRSContextMarshallEx",
    "RpcServerInqDefaultPrincNameW",
    "I_RpcBCacheFree",
    "NdrComplexStructMarshall",
    "MesInqProcEncodingId",
    "NdrStubInitializeMarshall",
    "short_array_from_ndr",
    "NdrUserMarshalMemorySize"
  ],
  "rpcss.dll": [
    "CoGetComCatalog",
    "GetRPCSSInfo",
    "WhichService",
    "ServiceMain"
  ],
  "rsaenh.dll": [
    "CPDeriveKey",
    "CPImportKey",
    "CPDestroyHash",
    "CPSetKeyParam",
    "CPGetHashParam",
    "CPSignHash",
    "CPDecrypt",
    "DllRegisterServer",
    "CPGetProvParam",
    "CPGetKeyParam",
    "CPDestroyKey",
    "CPEncrypt",
    "DllUnregisterServer",
    "CPSetHashParam",
    "CPHashSessionKey",
    "CPSetProvParam",
    "CPAcquireContext",
    "CPReleaseContext",
    "CPHashData",
    "CPCreateHash",
    "CPGenKey",
    "CPDuplicateKey",
    "CPVerifySignature",
    "CPGenRandom",
    "CPExportKey",
    "CPGetUserKey",
    "CPDuplicateHash"
  ],
  "rshx32.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "rtffilt.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "rtm.dll": [
    "RtmDequeueRouteChangeMessage",
    "DestroyTable",
    "MgmGetFirstMfeStats",
    "MgmGetMfe",
    "RtmConvertNetAddressToIpv6AddressAndLength",
    "RtmBlockMethods",
    "RtmDeregisterEntity",
    "RtmIsBestRoute",
    "RtmMarkDestForChangeNotification",
    "RtmReadInstanceConfig",
    "CheckTable",
    "MgmReleaseInterfaceOwnership",
    "RtmDeleteRoute",
    "RtmDeleteEnumHandle",
    "RtmGetOpaqueInformationPointer",
    "RtmGetExactMatchRoute",
    "MgmGetNextMfe",
    "RtmCreateRouteListEnum",
    "MgmGroupEnumerationEnd",
    "RtmRegisterEntity",
    "RtmBlockDeleteRoutes",
    "RtmReleaseEntities",
    "RtmGetNextHopInfo",
    "RtmCreateRouteEnum",
    "NextMatchInTable",
    "RtmDeregisterClient",
    "RtmGetNextRoute",
    "RtmAddRouteToDest",
    "RtmDeregisterFromChangeNotification",
    "RtmBlockSetRouteEnable",
    "RtmCreateDestEnum",
    "RtmIsRoute",
    "RtmInsertInRouteList",
    "CreateTable",
    "RtmAddNextHop",
    "RtmIgnoreChangedDests",
    "RtmGetMostSpecificDestination",
    "RtmCreateRouteList",
    "RtmGetRouteAge",
    "MgmDeInitialize",
    "RtmGetNetworkCount",
    "RtmCreateEnumerationHandle",
    "RtmGetFirstRoute",
    "RtmGetListEnumRoutes",
    "RtmDeleteRouteTable",
    "RtmAddRoute",
    "RtmCreateNextHopEnum",
    "RtmDeleteNextHop",
    "RtmLookupIPDestination",
    "RtmGetChangeStatus",
    "EnumOverTable",
    "RtmGetRouteInfo",
    "MgmInitialize",
    "RtmReleaseNextHopInfo",
    "RtmGetEnumDests",
    "RtmGetEnumNextHops",
    "RtmLockRoute",
    "MgmGetNextMfeStats",
    "SearchInTable",
    "RtmWriteAddressFamilyConfig",
    "RtmDeleteRouteToDest",
    "RtmReleaseRoutes",
    "RtmReleaseDestInfo",
    "RtmReleaseRouteInfo",
    "RtmRegisterClient",
    "RtmBlockConvertRoutesToStatic",
    "RtmRegisterForChangeNotification",
    "RtmReleaseNextHops",
    "MgmGetFirstMfe",
    "RtmLockDestination",
    "BestMatchInTable",
    "MgmAddGroupMembershipEntry",
    "RtmGetExactMatchDestination",
    "RtmReleaseDests",
    "RtmLockNextHop",
    "RtmConvertIpv6AddressAndLengthToNetAddress",
    "MgmRegisterMProtocol",
    "RtmGetLessSpecificDestination",
    "MgmGetMfeStats",
    "RtmFindNextHop",
    "MgmGroupEnumerationGetNext",
    "RtmGetChangedDests",
    "RtmGetEntityMethods",
    "RtmHoldDestination",
    "RtmReferenceHandles",
    "DeleteFromTable",
    "RtmGetEnumRoutes",
    "RtmIsMarkedForChangeNotification",
    "RtmUpdateAndUnlockRoute",
    "RtmGetEntityInfo",
    "RtmReadAddressFamilyConfig",
    "RtmGetRoutePointer",
    "MgmDeRegisterMProtocol",
    "RtmWriteInstanceConfig",
    "MgmDeleteGroupMembershipEntry",
    "RtmReleaseEntityInfo",
    "RtmGetInstanceInfo",
    "RtmReleaseChangedDests",
    "RtmCloseEnumerationHandle",
    "RtmGetNextHopPointer",
    "InsertIntoTable",
    "RtmEnumerateGetNextRoute",
    "MgmTakeInterfaceOwnership",
    "RtmGetRegisteredEntities",
    "RtmGetInstances",
    "RtmDereferenceHandles",
    "RtmDeleteRouteList",
    "MgmGetProtocolOnInterface",
    "RtmInvokeMethod",
    "MgmGroupEnumerationStart",
    "RtmGetAddressFamilyInfo",
    "RtmGetDestInfo",
    "DumpTable"
  ],
  "rtutils.dll": [
    "TraceVprintfExW",
    "RouterLogEventValistExA",
    "TraceDumpExA",
    "TraceVprintfExA",
    "TraceRegisterExW",
    "RouterLogEventValistExW",
    "RouterLogEventA",
    "RouterLogEventStringA",
    "TraceDeregisterExA",
    "RouterAssert",
    "RouterLogEventExA",
    "TraceGetConsoleW",
    "TraceDeregisterA",
    "MprSetupProtocolEnum",
    "TracePrintfW",
    "TraceRegisterExA",
    "RouterLogRegisterA",
    "TraceDeregisterW",
    "TracePutsExA",
    "RouterLogDeregisterA",
    "RouterLogDeregisterW",
    "RouterLogRegisterW",
    "TraceDeregisterExW",
    "TracePrintfA",
    "RouterLogEventDataW",
    "RouterGetErrorStringA",
    "RouterGetErrorStringW",
    "TracePrintfExA",
    "RouterLogEventDataA",
    "TraceDumpExW",
    "LogErrorA",
    "RouterLogEventExW",
    "TraceGetConsoleA",
    "TracePrintfExW",
    "LogErrorW",
    "TracePutsExW",
    "RouterLogEventStringW",
    "LogEventW",
    "LogEventA",
    "MprSetupProtocolFree",
    "RouterLogEventW"
  ],
  "SCardDlg.dll": [
    "SCardUIDlgSelectCardW",
    "GetOpenCardNameA",
    "SCardUIDlgSelectCardA",
    "GetOpenCardNameW",
    "SCardDlgExtendedError"
  ],
  "SCardSvr.dll": [
    "CalaisMain"
  ],
  "SMBHelperClass.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "SNTSearch.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "SPInf.dll": [
    "SpInfFindFirstLine",
    "SpInfGetInfLineNumber",
    "SpInfSectionNameFromLineContext",
    "SpInfQueryInfVersionInformation",
    "SpInfGetDriverVer",
    "SpInfGetLineTextWithKey",
    "SpInfGetInfInformation",
    "SpInfLocateLine",
    "SpInfGetInfStyle",
    "SpInfLineFromContext",
    "SpInfGetLogToken",
    "SpInfGetNextInf",
    "SpInfIsIndirectString",
    "SpInfGetInfSections",
    "SpInfGetTargetPath",
    "SpInfGetPathFromDirId",
    "SpInfGetLineFieldCount",
    "SpInfGetLineByIndex",
    "SpInfGetIndirectString",
    "SpInfFindValueInSectionList",
    "SpInfLineIsSearchable",
    "SpInfQueryInfFileInformation",
    "SpInfGetDirIdHandler",
    "SpInfGetPrevInf",
    "SpInfGetStringField",
    "SpInfFreeInfFile",
    "SpInfGetOriginalInfName",
    "SpInfDoesInfContainString",
    "SpInfFindNextMatchLine",
    "SpInfGetLineCount",
    "SpInfGetVersionDatum",
    "SpInfUnlockInf",
    "SpInfGetLanguageId",
    "SpInfSetDirectoryId",
    "SpInfGetBestModelsSection",
    "SpInfVersionNodeFromInfInformation",
    "SpInfDetermineInfStyle",
    "SpInfEnumInfSections",
    "SpInfLocateSection",
    "SpInfFileFullPathFromLineContext",
    "SpInfLockInf",
    "SpInfSourcePathFromHandle",
    "SpInfGetVersionNode",
    "SpInfGetBestInstallSection",
    "SpInfLoadInfFile",
    "SpInfGetField",
    "SpInfSetDirIdHandler",
    "SpInfGetLineCountFromSection",
    "SpInfGetStringsSection"
  ],
  "SSShim.dll": [
    "SssGetServicingStackFilePathLength",
    "SssReleaseServicingStack",
    "SssBindServicingStack",
    "SssGetServicingStackFilePath"
  ],
  "SampleRes.dll": "No exports",
  "SearchFolder.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "Sens.dll": [
    "SensNotifyRasEvent",
    "SvchostPushServiceGlobals",
    "SensNotifyWinlogonEvent",
    "SensNotifyNetconEvent",
    "ServiceMain"
  ],
  "SensApi.dll": [
    "IsNetworkAlive",
    "IsDestinationReachableA",
    "IsDestinationReachableW"
  ],
  "SensorsApi.dll": [
    "SensorPermissionsHandler",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "SensorPermissionsHandlerW",
    "SensorPermissionsHandlerA",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "SensorsClassExtension.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "Microsoft_WDF_UMDF_Version",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "SensorsCpl.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "RequestPermissionsInternalA",
    "RequestPermissionsInternalW",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "SessEnv.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "SmartcardCredentialProvider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "SmiEngine.dll": [
    "CreateLalInstance",
    "ConstructHiveLocation",
    "DeleteCompilerObject",
    "CreateSettingsEnginePriv",
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "ConstructRegLocation",
    "GetCompilerObject",
    "GetItemFromCoreObject",
    "SetLalCreator",
    "DllGetClassObject",
    "DllRegisterServer",
    "CreateWcmEngineCore"
  ],
  "SndVolSSO.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllMain"
  ],
  "SortServer2003Compat.dll": [
    "SortGetHandle",
    "SortCloseHandle"
  ],
  "SortWindows6Compat.dll": [
    "SortGetHandle",
    "SortCloseHandle"
  ],
  "SrpUxNativeSnapIn.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "StorageContextHandler.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "Storprop.dll": [
    "VolumePropPageProvider",
    "DiskClassInstaller",
    "CdromIsDigitalPlaybackEnabled",
    "AtaPropPageProvider",
    "CdromDisableDigitalPlayback",
    "DvdClassInstaller",
    "HdcCoInstaller",
    "CdromKnownGoodDigitalPlayback",
    "DvdLauncher",
    "DvdPropPageProvider",
    "CdromEnableDigitalPlayback"
  ],
  "StructuredQuery.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "SyncCenter.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "SyncHostps.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "SyncInfrastructure.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "SyncInfrastructureps.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "Syncreg.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "SysFxUI.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "samcli.dll": [
    "NetLocalGroupAddMembers",
    "NetLocalGroupSetMembers",
    "NetLocalGroupGetInfo",
    "NetUserChangePassword",
    "NetGroupGetUsers",
    "NetUserSetInfo",
    "NetLocalGroupEnum",
    "NetLocalGroupGetMembers",
    "NetQueryDisplayInformation",
    "NetUserGetLocalGroups",
    "NetGroupAdd",
    "NetLocalGroupSetInfo",
    "NetValidatePasswordPolicy",
    "NetGroupGetInfo",
    "NetUserDel",
    "NetValidatePasswordPolicyFree",
    "NetGroupSetUsers",
    "NetGroupDelUser",
    "NetLocalGroupDel",
    "NetLocalGroupAddMember",
    "NetUserGetInfo",
    "NetGroupEnum",
    "NetUserGetGroups",
    "NetLocalGroupDelMembers",
    "NetLocalGroupAdd",
    "NetGroupSetInfo",
    "NetGetDisplayInformationIndex",
    "NetUserAdd",
    "NetUserSetGroups",
    "NetGroupAddUser",
    "NetUserModalsGet",
    "NetLocalGroupDelMember",
    "NetGroupDel",
    "NetUserEnum",
    "NetUserModalsSet"
  ],
  "samlib.dll": [
    "SamChangePasswordUser",
    "SamLookupIdsInDomain",
    "SamUnregisterObjectChangeNotification",
    "SamGetAliasMembership",
    "SamGetGroupsForUser",
    "SamQueryInformationGroup",
    "SamSetMemberAttributesOfGroup",
    "SamSetSecurityObject",
    "SamCreateGroupInDomain",
    "SamTestPrivateFunctionsUser",
    "SamTestPrivateFunctionsDomain",
    "SamQueryDisplayInformation",
    "SamAddMultipleMembersToAlias",
    "SamiSyncDSRMPasswordFromAccount",
    "SamDeleteAlias",
    "SamCloseHandle",
    "SamRemoveMemberFromGroup",
    "SamQuerySecurityObject",
    "SamShutdownSamServer",
    "SamSetInformationUser",
    "SamValidatePassword",
    "SamGetDisplayEnumerationIndex",
    "SamiChangePasswordUser3",
    "SamLookupDomainInSamServer",
    "SamOpenDomain",
    "SamOpenAlias",
    "SamQueryInformationUser",
    "OnMachineUILanguageInit",
    "SamOpenUser",
    "SamConnect",
    "SamiChangeKeys",
    "SamLookupNamesInDomain",
    "SamOpenGroup",
    "SamQueryInformationAlias",
    "SamEnumerateUsersInDomain",
    "SamChangePasswordUser2",
    "SamSetInformationGroup",
    "SamiSetDSRMPassword",
    "SamCreateUser2InDomain",
    "SamiSetDSRMPasswordOWF",
    "SamQueryInformationDomain",
    "SamCreateUserInDomain",
    "SamConnectWithCreds",
    "SamRegisterObjectChangeNotification",
    "SamDeleteUser",
    "SamGetCompatibilityMode",
    "SamRidToSid",
    "SamiSetBootKeyInformation",
    "SamGetMembersInGroup",
    "SamiOemChangePasswordUser2WithTransport",
    "SamCreateAliasInDomain",
    "SamiEncryptPasswords",
    "SamGetMembersInAlias",
    "SamAddMemberToAlias",
    "SamiChangePasswordUser2",
    "SamiOemChangePasswordUser2",
    "SamEnumerateDomainsInSamServer",
    "SamRemoveMemberFromForeignDomain",
    "SamChangePasswordUser3",
    "SamRemoveMultipleMembersFromAlias",
    "SamDeleteGroup",
    "SamSetInformationAlias",
    "SamiLmChangePasswordUser",
    "SamiChangePasswordUser",
    "SamEnumerateGroupsInDomain",
    "SamQueryLocalizableAccountsInDomain",
    "SamAddMemberToGroup",
    "SamPerformGenericOperation",
    "SamRemoveMemberFromAlias",
    "SamEnumerateAliasesInDomain",
    "SamSetInformationDomain",
    "SamFreeMemory"
  ],
  "samsrv.dll": [
    "SamIAmIGC",
    "SamrOpenDomain",
    "SamINotifyServerDelta",
    "SamIFreeSidAndAttributesList",
    "SamIAccountRestrictions",
    "SampLogCannotLinkOidToGroupEvent",
    "SamIRetrievePrimaryCredentials",
    "SamrLookupIdsInDomain",
    "SamISetPasswordInfoOnDc",
    "SamrDeleteGroup",
    "SamrOpenAlias",
    "SamIDemoteUndo",
    "SamISameSite",
    "SamIFree_SAMPR_RETURNED_USTRING_ARRAY",
    "SamIImpersonateNullSession",
    "SamIMixedDomain",
    "SamICopyCurrentDomainAccountSettings",
    "SamIHandleObjectUpdate",
    "SamIGCLookupSids",
    "SamrSetInformationUser",
    "SamILoopbackConnect",
    "SamrDeleteUser",
    "SamIConnect",
    "SampGetUserAccountControlComputed",
    "SamIIsRebootAfterPromotion",
    "SamrQueryDisplayInformation",
    "SamIMixedDomain2",
    "SampCommitBufferedWrites",
    "SamILoadDownlevelDatabase",
    "SampInvalidateDomainCache",
    "SampAccountControlToFlags",
    "SamIFree_UserInternal6Information",
    "SamIDoFSMORoleChange",
    "SamIFree_SAMPR_USER_INFO_BUFFER",
    "SamrCloseHandle",
    "SamIFree_SAMPR_ENUMERATION_BUFFER",
    "SamIFree_SAMPR_ULONG_ARRAY",
    "SamIQueryCapabilities",
    "SamIDemote",
    "SamISetAuditingInformation",
    "SamIFloatingSingleMasterOpEx",
    "SamIIsSetupInProgress",
    "SampProcessSingleLoopbackTask",
    "SamrOpenGroup",
    "SamIOpenUserByAlternateId",
    "SampIsAuditingEnabled",
    "SamrQueryInformationUser",
    "SamrRidToSid",
    "SamINotifyRoleChange",
    "SamISetMachinePassword",
    "SampNotifyReplicatedInChange",
    "SamIQueryServerRole2",
    "SampUsingDsData",
    "SampGetPasswordMustChangeWithUF_UAC",
    "SamrDeleteAlias",
    "SamINT4UpgradeInProgress",
    "SampInvalidateRidRange",
    "SamICreateKrbTgt",
    "SamIApplyDomainUpdates",
    "SamIChangePasswordForeignUser",
    "SampDsChangePasswordUser",
    "SampEnforceMappedGroupChecks",
    "SamIRetrieveMultiplePrimaryCredentials",
    "SamIUnLoadDownlevelDatabase",
    "SampAbortSingleLoopbackTask",
    "SamINetLogonPing",
    "SamIGetDefaultAdministratorName",
    "SamIReplaceDownlevelDatabase",
    "SamIGCLookupNames",
    "SampSetSerialNumberDomain2",
    "SamISetPasswordForeignUser2",
    "SamIGetUserLogonInformation",
    "SamIUpdateLogonStatistics",
    "SampReleaseWriteLock",
    "SamIQueryServerRole",
    "SamIInitialize",
    "SamrOpenUser",
    "SamrQueryInformationDomain",
    "SamIIsDownlevelDcUpgrade",
    "SamrCreateUser2InDomain",
    "SamIPurgeSecrets",
    "SamIFree_SAMPR_DOMAIN_INFO_BUFFER",
    "SamIQueryAccountSecretsCachability",
    "SamIFreeVoid",
    "SamIResetBadPwdCountOnPdc",
    "SamIFree_SAMPR_DISPLAY_INFO_BUFFER",
    "SampNetLogonNotificationRequired",
    "SamIIsAttributeProtected",
    "SamIGetResourceGroupMembershipsTransitive",
    "SampNotifyAuditChange",
    "SampAcquireSamLockExclusive",
    "SamIFreeSidArray",
    "SampFlagsToAccountControl",
    "SampGetSerialNumberDomain2",
    "SamIPromoteUndo",
    "SamIFree_SAMPR_GET_GROUPS_BUFFER",
    "SamIRevertNullSession",
    "SamIDsCreateObjectInDomain",
    "SampDsIsRunning",
    "SamIUPNFromUserHandle",
    "SamrEnumerateUsersInDomain",
    "SamIGetUserLogonInformationEx",
    "SamrGetAliasMembership",
    "SampReleaseSamLockExclusive",
    "SamIIsExtendedSidMode",
    "SamIPromote",
    "SamIGetUserLogonInformation2",
    "SamrLookupNamesInDomain",
    "SampAcquireWriteLock",
    "SamrGetGroupsForUser",
    "SamIGetAliasMembership",
    "SamIStorePrimaryCredentials",
    "SamIDsSetObjectInformation"
  ],
  "sas.dll": [
    "SendSAS"
  ],
  "sbe.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "sbeio.dll": [
    "DVRCreateDVRFileSource",
    "DVRCreateDVRFileSink"
  ],
  "sberes.dll": "No exports",
  "scansetting.dll": [
    "DllMain",
    "GetImageDialog",
    "DllCanUnloadNow",
    "ProfilesDialog",
    "ProgDlgTakeFgIfShowing",
    "GetDefaultProfileScan"
  ],
  "sccls.dll": [
    "ScClassInstaller"
  ],
  "scecli.dll": [
    "SceDcPromoCreateGPOsInSysvolEx",
    "SceBrowseDatabaseTable",
    "SceSetupUpdateSecurityKey",
    "SceCopyBaseProfile",
    "SceOpenProfile",
    "SceDcPromoteSecurity",
    "SceSetupGenerateTemplate",
    "SceWriteSecurityProfileInfo",
    "SceSetupUnwindSecurityFile",
    "SceSvcSetInformationTemplate",
    "SceSetupBackupSecurity",
    "SceGetDatabaseSetting",
    "SceGetSecurityProfileInfo",
    "SceUpdateSecurityProfile",
    "DllRegisterServer",
    "SceIsSystemDatabase",
    "SceDcPromoteSecurityEx",
    "SceCloseProfile",
    "SceProcessSecurityPolicyGPO",
    "SceCompareNameList",
    "SceConfigureSystem",
    "DllUnregisterServer",
    "SceSetupRootSecurity",
    "SceAnalyzeSystem",
    "SceCommitTransaction",
    "SceAddToNameStatusList",
    "SceGetObjectSecurity",
    "SceSvcUpdateInfo",
    "SceStartTransaction",
    "SceNotifyPolicyDelta",
    "SceGetObjectChildren",
    "SceSvcGetInformationTemplate",
    "SceAppendSecurityProfileInfo",
    "SceGetDbTime",
    "SceSysPrep",
    "SceSetupUpdateSecurityFile",
    "SceSvcConvertSDToText",
    "SceSvcQueryInfo",
    "SceRollbackTransaction",
    "SceEnforceSecurityPolicyPropagation",
    "SceCreateDirectory",
    "SceSetupMoveSecurityFile",
    "SceConfigureConvertedFileSecurity",
    "SceSetupConfigureServices",
    "SceFreeProfileMemory",
    "SceGetTimeStamp",
    "SceGetAnalysisAreaSummary",
    "SceAddToNameList",
    "SceSetupUpdateSecurityService",
    "SceSvcConvertTextToSD",
    "SceGenerateGroupPolicy",
    "SceEnumerateServices",
    "SceOpenPolicy",
    "SceFreeMemory",
    "SceGetScpProfileDescription",
    "SceGetAreas",
    "SceSvcSetInfo",
    "SceGenerateRollback",
    "SceSvcFree",
    "SceSetDatabaseSetting",
    "SceSetupSystemByInfName",
    "SceCompareSecurityDescriptors",
    "SceLookupPrivRightName",
    "DeltaNotify",
    "InitializeChangeNotify",
    "SceAddToObjectList",
    "SceDcPromoCreateGPOsInSysvol",
    "SceUpdateObjectInfo",
    "SceGetServerProductType",
    "SceProcessSecurityPolicyGPOEx",
    "SceRegisterRegValues"
  ],
  "scesrv.dll": [
    "ScesrvInitializeServer",
    "ScesrvTerminateServer"
  ],
  "scext.dll": [
    "ScExtInitialize"
  ],
  "schannel.dll": [
    "VerifySignature",
    "FreeContextBuffer",
    "SslCrackCertificate",
    "SslGenerateRandomBits",
    "EnumerateSecurityPackagesW",
    "SpUserModeInitialize",
    "SslEmptyCacheW",
    "AcquireCredentialsHandleW",
    "InitializeSecurityContextW",
    "InitSecurityInterfaceA",
    "EnumerateSecurityPackagesA",
    "RevertSecurityContext",
    "SealMessage",
    "ApplyControlToken",
    "ImpersonateSecurityContext",
    "SpLsaModeInitialize",
    "SslFreeCertificate",
    "SslGetMaximumKeySize",
    "SslEmptyCacheA",
    "AcquireCredentialsHandleA",
    "FreeCredentialsHandle",
    "QueryContextAttributesA",
    "QueryContextAttributesW",
    "QuerySecurityPackageInfoA",
    "DeleteSecurityContext",
    "SslLoadCertificate",
    "SslFreeCustomBuffer",
    "CompleteAuthToken",
    "InitializeSecurityContextA",
    "MakeSignature",
    "InitSecurityInterfaceW",
    "QuerySecurityPackageInfoW",
    "AcceptSecurityContext",
    "UnsealMessage"
  ],
  "schedcli.dll": [
    "NetScheduleJobEnum",
    "NetScheduleJobGetInfo",
    "NetScheduleJobAdd",
    "NetScheduleJobDel"
  ],
  "schedsvc.dll": [
    "ServiceMain"
  ],
  "scksp.dll": [
    "GetKeyStorageInterface",
    "DllMain"
  ],
  "scripto.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "scrobj.dll": [
    "DllInstall",
    "DllUnregisterServer",
    "DllRegisterServerExW",
    "DllCanUnloadNow",
    "DllRegisterServerExA",
    "GenerateTypeLibW",
    "DllRegisterServerEx",
    "DllGetClassObject",
    "DllUnregisterServerEx",
    "DllRegisterServer",
    "GenerateTypeLib"
  ],
  "scrptadm.dll": [
    "DllCanUnloadNow",
    "CreateParserObject",
    "DllGetClassObject"
  ],
  "scrrun.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DoOpenPipeStream",
    "DllGetClassObject",
    "DllRegisterServer",
    "DLLGetDocumentation"
  ],
  "sdautoplay.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "sdcpl.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "sdengin2.dll": [
    "SdCheck",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "ExecuteScheduledBackup",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "sdhcinst.dll": [
    "SdClassCoInstaller",
    "SdClassInstall"
  ],
  "sdiageng.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "sdiagprv.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "sdiagschd.dll": [
    "GetScheduledDiagnosticsExecutionLevel",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "EnableScheduledDiagnostics"
  ],
  "sdohlp.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "sdrsvc.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "ServiceMain"
  ],
  "sdshext.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "sechost.dll": [
    "I_ScSendPnPMessage",
    "RegisterServiceCtrlHandlerW",
    "ChangeServiceConfigA",
    "LookupAccountNameLocalA",
    "ControlServiceExA",
    "QueryServiceConfig2A",
    "CreateServiceW",
    "OpenServiceW",
    "I_ScRpcBindA",
    "QueryServiceConfigW",
    "OpenSCManagerW",
    "DeleteService",
    "CreateServiceA",
    "ConvertStringSecurityDescriptorToSecurityDescriptorW",
    "LookupAccountNameLocalW",
    "StartServiceCtrlDispatcherW",
    "LsaLookupFreeMemory",
    "SetServiceStatus",
    "I_ScQueryServiceConfig",
    "ControlServiceExW",
    "QueryServiceObjectSecurity",
    "StartServiceA",
    "ChangeServiceConfigW",
    "QueryServiceStatusEx",
    "ConvertStringSidToSidW",
    "OpenServiceA",
    "RegisterServiceCtrlHandlerA",
    "StartServiceCtrlDispatcherA",
    "I_ScValidatePnPService",
    "LsaLookupClose",
    "RegisterServiceCtrlHandlerExW",
    "LsaLookupGetDomainInfo",
    "LookupAccountSidLocalA",
    "SetServiceObjectSecurity",
    "ChangeServiceConfig2W",
    "I_ScRpcBindW",
    "LsaLookupOpenLocalPolicy",
    "ConvertSecurityDescriptorToStringSecurityDescriptorW",
    "RegisterServiceCtrlHandlerExA",
    "I_ScPnPGetServiceName",
    "I_QueryTagInformation",
    "I_ScBroadcastServiceControlMessage",
    "ConvertSidToStringSidW",
    "ControlService",
    "OpenSCManagerA",
    "NotifyServiceStatusChangeW",
    "LookupAccountSidLocalW",
    "QueryServiceConfigA",
    "ChangeServiceConfig2A",
    "NotifyServiceStatusChangeA",
    "LsaLookupManageSidNameMapping",
    "StartServiceW",
    "I_ScSendTSMessage",
    "I_ScIsSecurityProcess",
    "LsaLookupTranslateSids",
    "LsaLookupTranslateNames",
    "CloseServiceHandle",
    "QueryServiceConfig2W",
    "NotifyServiceStatusChange",
    "QueryServiceStatus"
  ],
  "seclogon.dll": [
    "SvchostPushServiceGlobals",
    "SvcEntry_Seclogon"
  ],
  "secproc.dll": [
    "SPCreateSecurityProcessor",
    "SPEnableAndEncrypt",
    "SPGetLicenseObject",
    "SPAttest",
    "SPCreatePCE",
    "SPBindLicense",
    "SPEncryptFinal",
    "SPCreateEnablingPrincipal",
    "SPDecrypt",
    "SPCheckEnvironmentSecurity",
    "SPEnablePublishingLicense",
    "SPDecryptFinal",
    "SPGetInfo",
    "SPLoadLibrary",
    "SPCreateDecryptor",
    "SPEncrypt",
    "SPCreateEncryptor",
    "SPEncryptUpdate",
    "SPGetCurrentTime",
    "SPCommit",
    "SPGetLicenseAttributeCount",
    "SPGetProcAddress",
    "SPRegisterRevocationList",
    "SPGetLicenseObjectCount",
    "SPDecryptUpdate",
    "SPGetBoundRightKey",
    "SPIsActivated",
    "SPGetLicenseAttribute",
    "SPCloseHandle",
    "SPSign"
  ],
  "secproc_isv.dll": [
    "SPCreateSecurityProcessor",
    "SPEnableAndEncrypt",
    "SPGetLicenseObject",
    "SPAttest",
    "SPCreatePCE",
    "SPBindLicense",
    "SPEncryptFinal",
    "SPCreateEnablingPrincipal",
    "SPDecrypt",
    "SPCheckEnvironmentSecurity",
    "SPEnablePublishingLicense",
    "SPDecryptFinal",
    "SPGetInfo",
    "SPLoadLibrary",
    "SPCreateDecryptor",
    "SPEncrypt",
    "SPCreateEncryptor",
    "SPEncryptUpdate",
    "SPGetCurrentTime",
    "SPCommit",
    "SPGetLicenseAttributeCount",
    "SPGetProcAddress",
    "SPRegisterRevocationList",
    "SPGetLicenseObjectCount",
    "SPDecryptUpdate",
    "SPGetBoundRightKey",
    "SPIsActivated",
    "SPGetLicenseAttribute",
    "SPCloseHandle",
    "SPSign"
  ],
  "secproc_ssp.dll": [
    "SPCreateSecurityProcessor",
    "SPEnableAndEncrypt",
    "SPGetLicenseObject",
    "SPAttest",
    "SPCreatePCE",
    "SPBindLicense",
    "SPEncryptFinal",
    "SPCreateEnablingPrincipal",
    "SPDecrypt",
    "SPCheckEnvironmentSecurity",
    "SPEnablePublishingLicense",
    "SPDecryptFinal",
    "SPGetInfo",
    "SPLoadLibrary",
    "SPCreateDecryptor",
    "SPEncrypt",
    "SPCreateEncryptor",
    "SPEncryptUpdate",
    "SPGetCurrentTime",
    "SPCommit",
    "SPGetLicenseAttributeCount",
    "SPGetProcAddress",
    "SPRegisterRevocationList",
    "SPGetLicenseObjectCount",
    "SPDecryptUpdate",
    "SPGetBoundRightKey",
    "SPIsActivated",
    "SPGetLicenseAttribute",
    "SPCloseHandle",
    "SPSign"
  ],
  "secproc_ssp_isv.dll": [
    "SPCreateSecurityProcessor",
    "SPEnableAndEncrypt",
    "SPGetLicenseObject",
    "SPAttest",
    "SPCreatePCE",
    "SPBindLicense",
    "SPEncryptFinal",
    "SPCreateEnablingPrincipal",
    "SPDecrypt",
    "SPCheckEnvironmentSecurity",
    "SPEnablePublishingLicense",
    "SPDecryptFinal",
    "SPGetInfo",
    "SPLoadLibrary",
    "SPCreateDecryptor",
    "SPEncrypt",
    "SPCreateEncryptor",
    "SPEncryptUpdate",
    "SPGetCurrentTime",
    "SPCommit",
    "SPGetLicenseAttributeCount",
    "SPGetProcAddress",
    "SPRegisterRevocationList",
    "SPGetLicenseObjectCount",
    "SPDecryptUpdate",
    "SPGetBoundRightKey",
    "SPIsActivated",
    "SPGetLicenseAttribute",
    "SPCloseHandle",
    "SPSign"
  ],
  "secur32.dll": [
    "CollectLsaPerformanceData",
    "CloseLsaPerformanceData",
    "SeciAllocateAndSetIPAddress",
    "InitializeSecurityContextW",
    "SaslInitializeSecurityContextA",
    "EnumerateSecurityPackagesA",
    "LsaGetLogonSessionData",
    "ImpersonateSecurityContext",
    "SecpTranslateName",
    "ImportSecurityContextA",
    "QueryContextAttributesA",
    "DecryptMessage",
    "SetCredentialsAttributesA",
    "DeleteSecurityContext",
    "GetComputerObjectNameW",
    "LsaLookupAuthenticationPackage",
    "LsaUnregisterPolicyChangeNotification",
    "OpenLsaPerformanceData",
    "AcceptSecurityContext",
    "FreeContextBuffer",
    "SetContextAttributesW",
    "EnumerateSecurityPackagesW",
    "GetUserNameExA",
    "ChangeAccountPasswordA",
    "RevertSecurityContext",
    "SaslEnumerateProfilesA",
    "SeciAllocateAndSetCallFlags",
    "FreeCredentialsHandle",
    "GetSecurityUserInfo",
    "LsaRegisterPolicyChangeNotification",
    "SecpTranslateNameEx",
    "LsaLogonUser",
    "ExportSecurityContext",
    "SaslAcceptSecurityContext",
    "SaslIdentifyPackageW",
    "CredUnmarshalTargetInfo",
    "CredMarshalTargetInfo",
    "TranslateNameW",
    "SaslInitializeSecurityContextW",
    "LsaRegisterLogonProcess",
    "SealMessage",
    "SetContextAttributesA",
    "AddCredentialsW",
    "LsaFreeReturnBuffer",
    "LsaCallAuthenticationPackage",
    "CredParseUserNameWithType",
    "QueryCredentialsAttributesA",
    "AcquireCredentialsHandleA",
    "LsaDeregisterLogonProcess",
    "LsaEnumerateLogonSessions",
    "CompleteAuthToken",
    "InitializeSecurityContextA",
    "QuerySecurityPackageInfoW",
    "SaslIdentifyPackageA",
    "EncryptMessage",
    "UnsealMessage",
    "QuerySecurityContextToken",
    "VerifySignature",
    "QueryCredentialsAttributesW",
    "SaslGetProfilePackageA",
    "GetComputerObjectNameA",
    "SaslGetContextOption",
    "DeleteSecurityPackageA",
    "AddSecurityPackageA",
    "AcquireCredentialsHandleW",
    "InitSecurityInterfaceA",
    "TranslateNameA",
    "ChangeAccountPasswordW",
    "ApplyControlToken",
    "AddSecurityPackageW",
    "SaslSetContextOption",
    "SetCredentialsAttributesW",
    "AddCredentialsA",
    "SaslGetProfilePackageW",
    "SaslEnumerateProfilesW",
    "SecpFreeMemory",
    "LsaConnectUntrusted",
    "SeciFreeCallContext",
    "QueryContextAttributesW",
    "ImportSecurityContextW",
    "QuerySecurityPackageInfoA",
    "DeleteSecurityPackageW",
    "GetUserNameExW",
    "MakeSignature",
    "InitSecurityInterfaceW"
  ],
  "security.dll": [
    "VerifySignature",
    "QueryCredentialsAttributesW",
    "FreeContextBuffer",
    "ExportSecurityContext",
    "DeleteSecurityPackageA",
    "EnumerateSecurityPackagesW",
    "InitSecurityInterfaceA",
    "AcquireCredentialsHandleW",
    "InitializeSecurityContextW",
    "AddSecurityPackageA",
    "EnumerateSecurityPackagesA",
    "RevertSecurityContext",
    "SealMessage",
    "ApplyControlToken",
    "ImpersonateSecurityContext",
    "AddSecurityPackageW",
    "ImportSecurityContextA",
    "QueryCredentialsAttributesA",
    "AcquireCredentialsHandleA",
    "FreeCredentialsHandle",
    "QueryContextAttributesA",
    "DecryptMessage",
    "QueryContextAttributesW",
    "ImportSecurityContextW",
    "QuerySecurityPackageInfoA",
    "DeleteSecurityPackageW",
    "DeleteSecurityContext",
    "CompleteAuthToken",
    "InitializeSecurityContextA",
    "MakeSignature",
    "InitSecurityInterfaceW",
    "QuerySecurityPackageInfoW",
    "AcceptSecurityContext",
    "EncryptMessage",
    "UnsealMessage",
    "QuerySecurityContextToken"
  ],
  "sendmail.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "sensrsvc.dll": [
    "ServiceCtrlHandler",
    "ServiceMain"
  ],
  "serialui.dll": [
    "drvGetDefaultCommConfigA",
    "drvCommConfigDialogA",
    "drvSetDefaultCommConfigW",
    "drvSetDefaultCommConfigA",
    "drvCommConfigDialogW",
    "drvGetDefaultCommConfigW"
  ],
  "serwvdrv.dll": [
    "DriverProc",
    "widMessage",
    "wodMessage"
  ],
  "setbcdlocale.dll": [
    "OnMachineUILanguageSwitch"
  ],
  "setupapi.dll": [
    "SetupDiGetSelectedDriverA",
    "CM_Get_Resource_Conflict_Count",
    "pSetupQueryMultiSzValueToArray",
    "CM_Setup_DevNode_Ex",
    "SetupDiGetDeviceInstallParamsA",
    "SetupDiGetINFClassA",
    "SetupAddSectionToDiskSpaceListW",
    "CM_Create_DevNodeW",
    "SetupDiGetDeviceInterfacePropertyW",
    "SetupDiInstallClassA",
    "SetupDiOpenDeviceInterfaceA",
    "SetupAddSectionToDiskSpaceListA",
    "InstallHinfSection",
    "SetupOpenMasterInf",
    "pGetDriverPackageHash",
    "SetupDiGetActualSectionToInstallW",
    "CM_Get_Device_Interface_Alias_ExA",
    "SetupDiGetDriverInstallParamsA",
    "SetupOpenLog",
    "pSetupStringTableLookUpString",
    "SetupAddInstallSectionToDiskSpaceListA",
    "SetupDiGetClassDevsExA",
    "SetupEnumInfSectionsW",
    "SetupGetTargetPathA",
    "SetupDiReportAdditionalSoftwareRequested",
    "SetupDiClassGuidsFromNameExA",
    "SetupSetDirectoryIdW",
    "CM_Reenumerate_DevNode",
    "SetupDiGetSelectedDevice",
    "CM_Add_Res_Des",
    "SetupDiGetDeviceRegistryPropertyW",
    "SetupDiDeleteDeviceInterfaceRegKey",
    "SetupDiGetClassBitmapIndex",
    "pSetupStringTableStringFromId",
    "pSetupSetDriverPackageRestorePoint",
    "SetupDiClassNameFromGuidExA",
    "pSetupHandleFailedVerification",
    "pSetupEnablePrivilege",
    "SetupDiOpenDeviceInterfaceRegKey",
    "SetupRemoveInstallSectionFromDiskSpaceListA",
    "SetupDiDestroyClassImageList",
    "SetupGetInfDriverStoreLocationW",
    "pSetupOutOfMemory",
    "SetupIterateCabinetA",
    "SetupScanFileQueueA",
    "pSetupGetGlobalFlags",
    "SetupDiGetClassDevPropertySheetsA",
    "CM_Get_Device_ID_List_ExA",
    "SetupDiGetActualSectionToInstallExW",
    "CM_Request_Eject_PC_Ex",
    "pSetupDestroyRunOnceNodeList",
    "SetupDiGetHwProfileFriendlyNameA",
    "SetupDiGetClassDevsExW",
    "CM_Enumerate_Classes",
    "SetupDiUnremoveDevice",
    "SetupDiGetHwProfileListExA",
    "pSetupInfGetDigitalSignatureInfo",
    "SetupDiOpenClassRegKey",
    "CM_Unregister_Device_InterfaceW",
    "SetupDiSetDeviceInterfaceDefault",
    "pSetupCreateTextLogSectionW",
    "CM_Free_Range_List",
    "SetupDiSetDriverInstallParamsW",
    "CM_Get_Child",
    "SetupQueryDrivesInDiskSpaceListW",
    "SetupSetNonInteractiveMode",
    "SetupDiGetClassPropertyKeys",
    "SetupDiSetDeviceInstallParamsA",
    "SetupUninstallNewlyCopiedInfs",
    "SetupQueueRenameSectionW",
    "CM_Register_Device_Driver_Ex",
    "pSetupVerifyCatalogFile",
    "CM_Get_Device_IDA",
    "CM_Get_Class_Registry_PropertyA",
    "pSetupAppendPath",
    "CM_Run_Detection",
    "CM_Set_ActiveScheme",
    "pSetupAddTagToGroupOrderListEntry",
    "CM_Delete_Driver_PackageW",
    "SetupGetInfFileListA",
    "SetupDiSetSelectedDriverW",
    "SetupDiLoadDeviceIcon",
    "ExtensionPropSheetPageProc",
    "CM_Install_DevNode_ExW",
    "SetupEnumPublishedInfA",
    "CM_Delete_Device_Interface_KeyW",
    "SetupCommitFileQueueW",
    "SetupDiGetDevicePropertyW",
    "SetupFindNextMatchLineW",
    "CM_Get_Class_Name_ExA",
    "SetupQueueDeleteSectionW",
    "pSetupGetFileTitle",
    "CM_Get_Device_ID_ListW",
    "SetupInstallFileExA",
    "InstallHinfSectionA",
    "SetupDiCreateDevRegKeyA",
    "CM_Unregister_Device_Interface_ExA",
    "SetupInstallFileExW",
    "CM_Get_First_Log_Conf_Ex",
    "SetupDiCreateDeviceInfoA",
    "pSetupCenterWindowRelativeToParent",
    "CM_Enumerate_Enumerators_ExW",
    "SetupFreeSourceListA",
    "SetupAddInstallSectionToDiskSpaceListW",
    "SetupDiReportDeviceInstallError",
    "SetupGetFileCompressionInfoA",
    "CM_Remove_SubTree",
    "CM_Register_Device_InterfaceW",
    "pSetupStringTableAddStringEx",
    "SetupCopyOEMInfW",
    "CM_Set_Class_Registry_PropertyA",
    "SetupDiGetHwProfileFriendlyNameExW",
    "CM_Create_Range_List",
    "SetupDiCreateDeviceInfoListExA",
    "SetupDiGetClassDevPropertySheetsW",
    "MyRealloc",
    "SetupOpenAppendInfFileW",
    "CM_Get_Next_Log_Conf_Ex",
    "CM_Detect_Resource_Conflict_Ex",
    "CM_Set_DevNode_Problem_Ex",
    "pSetupStringTableAddString",
    "CM_Invert_Range_List",
    "SetupInitDefaultQueueCallbackEx",
    "DriverStoreEnumDriverPackageA",
    "SetupUninstallOEMInfA",
    "SetupDiGetClassRegistryPropertyA",
    "CM_Next_Range",
    "SetupQueueDeleteW",
    "SetupSetFileQueueFlags",
    "CMP_Init_Detection",
    "SetupDiGetDeviceRegistryPropertyA",
    "CM_Open_Device_Interface_KeyW",
    "DriverStoreDeleteDriverPackageA",
    "pSetupConcatenatePaths",
    "pSetupOpenAndMapFileForRead",
    "SetupSetDirectoryIdExA",
    "SetupDuplicateDiskSpaceListW",
    "SetupDiSelectDevice",
    "SetupDiSetSelectedDevice",
    "SetupBackupErrorW",
    "SetupGetLineTextW",
    "SetupQueryFileLogA",
    "pSetupStringTableDestroy",
    "CM_Open_DevNode_Key",
    "SetupDiClassGuidsFromNameW",
    "pSetupGetIndirectStringsFromDriverInfo",
    "SetupQueueDeleteA",
    "pSetupDiInvalidateHelperModules",
    "CM_Unregister_Device_Interface_ExW",
    "SetupDiReportDriverNotFoundError",
    "CM_Add_ID_ExW",
    "SetupGetSourceInfoW",
    "CM_Get_Device_ID_List_SizeA",
    "pSetupInfSetDigitalSignatureInfo",
    "SetupQueryInfFileInformationW",
    "CM_Query_Arbitrator_Free_Data_Ex",
    "CM_Delete_PowerScheme",
    "CM_Get_Next_Res_Des_Ex",
    "CM_Write_UserPowerKey",
    "DriverStoreFindDriverPackageA",
    "CM_Get_Version_Ex",
    "pSetupStringFromGuid",
    "CM_Get_Class_Key_NameA",
    "CM_Get_HW_Prof_Flags_ExW",
    "CM_Request_Device_Eject_ExA",
    "CM_Create_DevNode_ExW",
    "CM_Request_Device_Eject_ExW",
    "CM_Get_DevNode_Custom_Property_ExW",
    "SetupQueryFileLogW",
    "CM_Add_Res_Des_Ex",
    "SetupDiSetDeviceInterfacePropertyW",
    "CM_Query_And_Remove_SubTree_ExA",
    "CM_Get_Class_NameA",
    "CM_Get_Device_ID_ExA",
    "CM_Set_HW_Prof",
    "SetupDiInstallDriverFiles",
    "SetupDiSetClassPropertyW",
    "SetupDiChangeState",
    "SetupSetDirectoryIdA",
    "SetupRemoveFileLogEntryA",
    "SetupDiReportGenericDriverInstalled",
    "pSetupRetrieveServiceConfig",
    "SetupGetFileCompressionInfoExA",
    "CM_Free_Log_Conf_Handle",
    "CM_Locate_DevNodeA",
    "CM_Get_Next_Res_Des",
    "SetupFindFirstLineA",
    "CM_Open_Class_Key_ExA",
    "CM_Query_Resource_Conflict_List",
    "SetupQueueDefaultCopyA",
    "SetupDiGetClassDevsW",
    "SetupCreateDiskSpaceListA",
    "SetupDiGetHwProfileListExW",
    "DriverStoreFindDriverPackageW",
    "SetupLogFileW",
    "pSetupIsGuidNull",
    "CM_Reenumerate_DevNode_Ex",
    "SetupDiGetClassPropertyExW",
    "CM_Delete_Class_Key",
    "SetupGetStringFieldA",
    "CM_Set_HW_Prof_FlagsA",
    "UnicodeToMultiByte",
    "SetupDiCancelDriverInfoSearch",
    "CM_Get_Class_Key_Name_ExW",
    "CM_Delete_Device_Interface_Key_ExW",
    "SetupCreateDiskSpaceListW",
    "SetupGetFileQueueFlags",
    "SetupQuerySpaceRequiredOnDriveA",
    "SetupAdjustDiskSpaceListW",
    "pSetupMultiByteToUnicode",
    "CM_Query_Arbitrator_Free_Size_Ex",
    "SetupGetBinaryField",
    "SetupDiGetINFClassW",
    "CM_Get_Device_ID_List_ExW",
    "SetupDiSetSelectedDriverA",
    "SetupQueueRenameSectionA",
    "CM_Get_DevNode_Registry_Property_ExA",
    "CM_Get_Device_Interface_AliasW",
    "pSetupIsBiDiLocalizedSystemEx",
    "pSetupCloseTextLogSection",
    "CM_Delete_Device_Interface_Key_ExA",
    "SetupDiDeleteDeviceInterfaceData",
    "SetupDiGetClassDescriptionExA",
    "SetupScanFileQueueW",
    "SetupQuerySourceListA",
    "pSetupGetQueueFlags",
    "CM_Setup_DevNode",
    "SetupDiSetClassInstallParamsA",
    "SetupInstallLogCloseEventGroup",
    "CM_Set_DevNode_Registry_PropertyW",
    "SetupAddToSourceListA",
    "SetupSetSourceListA",
    "SetupDiClassNameFromGuidExW",
    "SetupDiDeleteDeviceInfo",
    "SetupRemoveFromDiskSpaceListW",
    "CM_Get_Device_ID_Size_Ex",
    "SetupDiGetDevicePropertyKeys",
    "pSetupLoadIndirectString",
    "SetupSetDirectoryIdExW",
    "SetupDiBuildClassInfoListExA",
    "pSetupDiGetStrongNameForDriverNode",
    "SetupDefaultQueueCallbackW",
    "CM_Get_Global_State_Ex",
    "SetupInstallFromInfSectionA",
    "pSetupValidateDriverPackage",
    "pSetupInfIsInbox",
    "CM_Get_Device_Interface_List_ExA",
    "SetupCopyErrorA",
    "CM_Enable_DevNode_Ex",
    "SetupDiGetDeviceInterfaceDetailA",
    "SetupPrepareQueueForRestoreW",
    "CM_Get_Class_Key_Name_ExA",
    "SetupGetLineCountW",
    "CM_Disable_DevNode",
    "SetupDecompressOrCopyFileA",
    "SetupInstallFileA",
    "SetupDiCreateDevRegKeyW",
    "CM_Get_Device_ID_ExW",
    "SetupLogErrorA",
    "pSetupStringTableGetExtraData",
    "SetupDiGetClassPropertyKeysExW",
    "pSetupStringTableLookUpStringEx",
    "SetupTerminateFileLog",
    "SetupOpenInfFileW",
    "SetupDiApplyPowerScheme",
    "CMP_WaitServicesAvailable",
    "SetupDiGetClassDescriptionW",
    "SetupRenameErrorW",
    "SetupCloseLog",
    "SetupDiGetCustomDevicePropertyW",
    "SetupDiLoadClassIcon",
    "SetupQueueRenameW",
    "SetupQueueDefaultCopyW",
    "SetupDiGetDeviceInstanceIdA",
    "SetupGetSourceInfoA",
    "pSetupCaptureAndConvertAnsiArg",
    "CM_Get_Hardware_Profile_Info_ExA",
    "SetupRemoveSectionFromDiskSpaceListA",
    "CM_Add_Empty_Log_Conf",
    "MyFree",
    "CM_Get_Next_Log_Conf",
    "pSetupSetQueueFlags",
    "SetupInitDefaultQueueCallback",
    "CM_Is_Dock_Station_Present_Ex",
    "CM_Is_Version_Available_Ex",
    "SetupDiGetDeviceInfoListDetailA",
    "SetupGetFileCompressionInfoW",
    "SetupVerifyInfFileA",
    "pSetupDiBuildInfoDataFromStrongName",
    "SetupDeleteErrorW",
    "pSetupDuplicateString",
    "CM_Is_Version_Available",
    "pSetupGetInfSections",
    "SetupDiGetDriverInstallParamsW",
    "SetupFreeSourceListW",
    "CM_Get_Device_Interface_ListW",
    "SetupInstallServicesFromInfSectionW",
    "SetupDiGetClassImageListExW",
    "CM_Get_First_Log_Conf",
    "CM_Get_Parent",
    "pSetupModifyGlobalFlags",
    "SetupGetStringFieldW",
    "SetupDiGetActualModelsSectionW",
    "SetupDiSetDeviceRegistryPropertyA",
    "CM_Query_Arbitrator_Free_Size",
    "pSetupAccessRunOnceNodeList",
    "CM_Get_DevNode_Registry_PropertyA",
    "CM_Get_Device_ID_ListA",
    "CM_Get_Res_Des_Data_Ex",
    "pSetupAddMiniIconToList",
    "SetupInitializeFileLogW",
    "SetupDiOpenDeviceInfoA",
    "CM_Register_Device_Interface_ExW",
    "SetupDiSetClassRegistryPropertyW",
    "CM_Open_DevNode_Key_Ex",
    "SetupQueryInfVersionInformationW",
    "pSetupStringTableStringFromIdEx",
    "CM_Add_IDW",
    "CM_Find_Range",
    "CM_Free_Log_Conf_Ex",
    "SetupInstallFileW",
    "CM_Open_Class_KeyA",
    "SetupDiAskForOEMDisk",
    "pSetupStringTableSetExtraData",
    "CM_Delete_Range",
    "SetupDiGetClassDevsA",
    "SetupDiReportPnPDeviceProblem",
    "pSetupStringTableInitialize",
    "SetupGetInfPublishedNameW",
    "SetupDiBuildClassInfoListExW",
    "SetupDiGetDeviceInfoListDetailW",
    "CMP_UnregisterNotification",
    "SetupDiGetHwProfileFriendlyNameExA",
    "CM_Get_Hardware_Profile_Info_ExW",
    "SetupInstallFromInfSectionW",
    "SetupGetIntField",
    "SetupInstallFilesFromInfSectionW",
    "SetupIterateCabinetW",
    "CM_Delete_DevNode_Key_Ex",
    "SetupDiBuildClassInfoList",
    "SetupDiInstallClassExA",
    "SetupSetSourceListW",
    "SetupRemoveSectionFromDiskSpaceListW",
    "CM_Set_HW_Prof_Flags_ExW",
    "SetupGetInfInformationA",
    "SetupDiMoveDuplicateDevice",
    "CMP_GetServerSideDeviceInstallFlags",
    "CM_Duplicate_PowerScheme",
    "CM_Remove_SubTree_Ex",
    "SetupQuerySourceListW",
    "CM_Get_Device_Interface_List_ExW",
    "SetupCommitFileQueue",
    "SetupOpenAppendInfFileA",
    "SetupScanFileQueue",
    "SetupDiCreateDeviceInfoW",
    "SetupAddToSourceListW",
    "pSetupWriteLogEntry",
    "CM_Install_DevNodeW",
    "CM_Enumerate_EnumeratorsA",
    "CM_Intersect_Range_List",
    "CM_Set_DevNode_Problem",
    "SetupDiGetDeviceInstanceIdW",
    "SetupDiSetClassPropertyExW",
    "SetupGetMultiSzFieldA",
    "SetupTermDefaultQueueCallback",
    "pSetupFree",
    "pSetupGuidFromString",
    "pSetupDiCrimsonLogDeviceInstall",
    "SetupDiOpenDevRegKey",
    "SetupRemoveFromSourceListA",
    "SetupWriteTextLogInfLine",
    "SetupGetSourceFileSizeA",
    "SetupDiEnumDriverInfoW",
    "SetupPromptReboot",
    "CM_Delete_DevNode_Key",
    "CM_Unregister_Device_InterfaceA",
    "CM_Get_Depth_Ex",
    "SetupGetInfInformationW",
    "SetupDiOpenClassRegKeyExA",
    "pSetupCreateTextLogSectionA",
    "CM_Create_DevNodeA",
    "SetupInstallServicesFromInfSectionExA",
    "CM_Register_Device_InterfaceA",
    "pSetupSetArrayToMultiSzValue",
    "pSetupVerifyQueuedCatalogs",
    "SetupGetBackupInformationW",
    "CM_Get_Res_Des_Data",
    "SetupDiGetDeviceInterfacePropertyKeys",
    "PnpIsFilePnpDriver",
    "CM_Get_Device_ID_List_Size_ExA",
    "SetupGetFileCompressionInfoExW",
    "pSetupStringTableEnum",
    "SetupDiGetCustomDevicePropertyA",
    "SetupDiGetDeviceInfoListClass",
    "CM_Open_Class_KeyW",
    "SetupDiGetWizardPage",
    "CM_Set_HW_Prof_Ex",
    "CM_Query_Arbitrator_Free_Data",
    "CM_Query_Remove_SubTree",
    "DoesUserHavePrivilege",
    "CM_Get_Device_Interface_List_Size_ExA",
    "MyMalloc",
    "SetupDiInstallClassExW",
    "SetupInstallServicesFromInfSectionA",
    "CM_Get_DevNode_Status",
    "SetupEnumInfSectionsA",
    "SetupDiSelectOEMDrv",
    "CM_Modify_Res_Des",
    "CM_Request_Device_EjectA",
    "CM_Get_Device_Interface_AliasA",
    "SetupDiGetActualModelsSectionA",
    "CM_Create_DevNode_ExA",
    "PnpIsFileAclIntact",
    "SetupDiGetClassPropertyW",
    "CM_Connect_MachineW",
    "SetupDiEnumDeviceInterfaces",
    "pSetupUnmapAndCloseFile",
    "SetupQueueRenameA",
    "SetupPromptForDiskA",
    "SetupDiRemoveDeviceInterface",
    "SetupVerifyInfFileW",
    "CM_Get_Resource_Conflict_DetailsA",
    "SetupDecompressOrCopyFileW",
    "SetupRemoveInstallSectionFromDiskSpaceListW",
    "CM_Get_Device_Interface_Alias_ExW",
    "CM_Get_Log_Conf_Priority",
    "SetupDiClassGuidsFromNameA",
    "SetupDiGetClassDescriptionA",
    "CM_Open_Device_Interface_Key_ExA",
    "CM_Uninstall_DevNode",
    "CM_Open_Device_Interface_KeyA",
    "SetupGetInfPublishedNameA",
    "CM_Get_HW_Prof_Flags_ExA",
    "SetupPrepareQueueForRestoreA",
    "CMP_WaitNoPendingInstallEvents",
    "SetupCommitFileQueueA",
    "CM_Get_Hardware_Profile_InfoW",
    "SetupDiSetDevicePropertyW",
    "CM_Delete_Class_Key_Ex",
    "CM_Move_DevNode",
    "CM_Disable_DevNode_Ex",
    "SetupWriteTextLog",
    "pSetupRegistryDelnode",
    "SetupSetPlatformPathOverrideA",
    "SetupGetMultiSzFieldW",
    "CM_Import_PowerScheme",
    "pSetupWriteLogError",
    "SetupQueueCopyIndirectA",
    "CM_Add_Range",
    "CM_Set_HW_Prof_Flags_ExA",
    "SetupRemoveFromDiskSpaceListA",
    "CM_Set_DevNode_Registry_Property_ExW",
    "VerifyCatalogFile",
    "SetupCopyErrorW",
    "CM_Uninstall_DevNode_Ex",
    "SetupDiRestartDevices",
    "DriverStoreDeleteDriverPackageW",
    "pSetupMakeSurePathExists",
    "SetupDefaultQueueCallback",
    "SetupAddToDiskSpaceListA",
    "pSetupDoesUserHavePrivilege",
    "SetupDiClassGuidsFromNameExW",
    "CM_Apply_PowerScheme",
    "SetupDiGetActualSectionToInstallExA",
    "SetupDiInstallDeviceInterfaces",
    "SetupDiDrawMiniIcon",
    "CM_Get_Log_Conf_Priority_Ex",
    "SetupDiOpenDeviceInfoW",
    "SetupGetNonInteractiveMode",
    "CM_Get_DevNode_Custom_Property_ExA",
    "SetupDiInstallDevice",
    "SetupQueueCopySectionW",
    "CM_Set_Class_Registry_PropertyW",
    "pSetupGetCurrentDriverSigningPolicy",
    "CM_Get_Res_Des_Data_Size",
    "CM_Get_Resource_Conflict_DetailsW",
    "CM_Test_Range_Available",
    "SetupDiGetClassImageListExA",
    "InstallCatalog",
    "SetupDiSetClassRegistryPropertyA",
    "SetupOpenFileQueue",
    "CMP_Report_LogOn",
    "SetupQueryInfOriginalFileInformationA",
    "SetupCloseInfFile",
    "CM_Open_Class_Key_ExW",
    "CM_Get_HW_Prof_FlagsW",
    "PnpIsFileContentIntact",
    "CM_Get_Hardware_Profile_InfoA",
    "SetupQueueDeleteSectionA",
    "SetupFindNextLine",
    "CM_Get_Device_Interface_List_SizeA",
    "CM_Query_And_Remove_SubTree_ExW",
    "CM_Get_DevNode_Custom_PropertyW",
    "CM_Merge_Range_List",
    "CM_Dup_Range_List",
    "CM_Get_Class_Key_NameW",
    "SetupDiCreateDeviceInterfaceRegKeyA",
    "SetupAddToDiskSpaceListW",
    "SetupDiClassNameFromGuidW",
    "SetupGetFileQueueCount",
    "SetupDiOpenDeviceInterfaceW",
    "pSetupGetField",
    "pSetupSetGlobalFlags",
    "CM_Get_Device_ID_Size",
    "SetupDiDeleteDevRegKey",
    "SetupDeleteErrorA",
    "CM_Connect_MachineA",
    "SetupCloseFileQueue",
    "SetupDiSelectBestCompatDrv",
    "SetupDiEnumDriverInfoA",
    "pSetupIsUserTrustedInstaller",
    "CM_Request_Eject_PC",
    "SetupQueryInfFileInformationA",
    "CM_Get_Device_IDW",
    "CM_Enumerate_Classes_Ex",
    "CM_Get_DevNode_Registry_PropertyW",
    "SetupAdjustDiskSpaceListA",
    "SetupDestroyDiskSpaceList",
    "SetupGetSourceFileLocationA",
    "CM_Get_Sibling_Ex",
    "SetupGetSourceFileSizeW",
    "SetupQueueCopyW",
    "SetupRenameErrorA",
    "CM_Query_Remove_SubTree_Ex",
    "CM_Get_Class_Registry_PropertyW",
    "CM_Free_Resource_Conflict_Handle",
    "SetupConfigureWmiFromInfSectionA",
    "CM_Query_And_Remove_SubTreeA",
    "SetupWriteTextLogError",
    "CM_Restore_DefaultPowerScheme",
    "IsUserAdmin",
    "SetupConfigureWmiFromInfSectionW",
    "SetupQueryInfOriginalFileInformationW",
    "SetupUninstallOEMInfW",
    "pSetupRealloc",
    "CM_Get_Sibling",
    "CM_Locate_DevNodeW",
    "CM_Request_Device_EjectW",
    "CM_Locate_DevNode_ExA",
    "CM_Register_Device_Driver",
    "SetupDiGetClassInstallParamsW",
    "CM_Detect_Resource_Conflict",
    "CM_Disconnect_Machine",
    "SetupDiGetDriverInfoDetailA",
    "CM_Enable_DevNode",
    "SetupGetBackupInformationA",
    "CM_Free_Log_Conf",
    "SetupDuplicateDiskSpaceListA",
    "CM_Get_DevNode_Registry_Property_ExW",
    "CM_Get_Device_Interface_ListA",
    "CM_Set_DevNode_Registry_Property_ExA",
    "SetupDiGetHwProfileFriendlyNameW",
    "SetupDiInstallClassW",
    "CM_Is_Dock_Station_Present",
    "SetupDiGetDeviceInterfaceDetailW",
    "CM_Move_DevNode_Ex",
    "CM_Get_Parent_Ex",
    "CM_Get_Child_Ex",
    "CM_First_Range",
    "CM_Get_Res_Des_Data_Size_Ex",
    "CM_Enumerate_Enumerators_ExA",
    "SetupInstallLogCreateEventGroup",
    "SetupQueryInfVersionInformationA",
    "SetupRemoveFromSourceListW",
    "DriverStoreEnumDriverPackageW",
    "CM_Free_Res_Des_Ex",
    "CM_Free_Res_Des",
    "CM_RestoreAll_DefaultPowerSchemes",
    "SetupDiCreateDeviceInfoListExW",
    "CM_Get_Device_Interface_List_SizeW",
    "SetupDiGetDeviceInstallParamsW",
    "SetupInstallServicesFromInfSectionExW",
    "pSetupInstallCatalog",
    "SetupDiGetClassRegistryPropertyW",
    "SetupDiReportDriverPackageImportationError",
    "SetupGetFieldCount",
    "CM_Locate_DevNode_ExW",
    "CM_Get_Version",
    "SetupSetFileQueueAlternatePlatformW",
    "CM_Add_Driver_PackageW",
    "CM_Add_Empty_Log_Conf_Ex",
    "SetupDiGetDeviceInterfaceAlias",
    "SetupDiGetHwProfileList",
    "CM_Get_Depth",
    "SetupDiGetClassDescriptionExW",
    "CM_Modify_Res_Des_Ex",
    "SetupGetThreadLogToken",
    "SetupDiRegisterDeviceInfo",
    "SetupGetTargetPathW",
    "CM_Get_Class_NameW",
    "DriverStoreAddDriverPackageW",
    "SetupInstallFilesFromInfSectionA",
    "pSetupGetDriverDate",
    "SetupGetSourceFileLocationW",
    "pSetupIsLocalSystem",
    "SetupFindFirstLineW",
    "SetupGetInfDriverStoreLocationA",
    "SetupDiCallClassInstaller",
    "CM_Get_Device_ID_List_SizeW",
    "SetupDiOpenClassRegKeyExW",
    "SetupDiSetClassInstallParamsW",
    "CM_Free_Res_Des_Handle",
    "SetupDiClassNameFromGuidA",
    "CM_Get_HW_Prof_FlagsA",
    "CM_Get_Device_Interface_List_Size_ExW",
    "SetupDefaultQueueCallbackA",
    "CMP_RegisterNotification",
    "SetupDiGetClassInstallParamsA",
    "SetupDiSetDeviceRegistryPropertyW",
    "CM_Get_Global_State",
    "CM_Delete_Device_Interface_KeyA",
    "SetupGetLineByIndexA",
    "SetupGetLineTextA",
    "SetupLogErrorW",
    "InstallHinfSectionW",
    "SetupDiRemoveDevice",
    "SetupDiGetDriverInfoDetailW",
    "SetupDiCreateDeviceInfoList",
    "CM_Get_DevNode_Custom_PropertyA",
    "SetupDiBuildDriverInfoList",
    "CM_Set_DevNode_Registry_PropertyA",
    "PnpEnumDrpFile",
    "SetupQueryDrivesInDiskSpaceListA",
    "SetupCancelTemporarySourceList",
    "SetupDiCreateDeviceInterfaceRegKeyW",
    "SetupSetPlatformPathOverrideW",
    "CM_Open_Device_Interface_Key_ExW",
    "SetupDiGetClassImageList",
    "pSetupGetDriverVersion",
    "SetupPromptForDiskW",
    "SetupQueueCopySectionA",
    "SetupBackupErrorA",
    "SetupDiGetSelectedDriverW",
    "CM_Get_DevNode_Status_Ex",
    "CM_Get_Device_ID_List_Size_ExW",
    "SetupDiEnumDeviceInfo",
    "CMP_GetBlockedDriverInfo",
    "pSetupIsUserAdmin",
    "pSetupStringTableInitializeEx",
    "pSetupDoLastKnownGoodBackup",
    "SetupDiRegisterCoDeviceInstallers",
    "pSetupMalloc",
    "SetupDiCreateDeviceInterfaceW",
    "SetupGetInfFileListW",
    "SetupEnumPublishedInfW",
    "SetupInitializeFileLogA",
    "SetupSetFileQueueAlternatePlatformA",
    "SetupLogFileA",
    "pSetupGetRealSystemTime",
    "SetupDiSetDeviceInstallParamsW",
    "SetupQueueCopyIndirectW",
    "SetupGetInfSections",
    "CM_Add_IDA",
    "SetupRemoveFileLogEntryW",
    "CM_Enumerate_EnumeratorsW",
    "PnpRepairWindowsProtectedDriver",
    "SetupDiDestroyDeviceInfoList",
    "SetupCopyOEMInfA",
    "SetupGetLineCountA",
    "CM_Get_Class_Name_ExW",
    "CM_Query_And_Remove_SubTreeW",
    "SetupDiGetActualSectionToInstallA",
    "SetupQueueCopyA",
    "CM_Set_HW_Prof_FlagsW",
    "DriverStoreAddDriverPackageA",
    "SetupDiSetDriverInstallParamsA",
    "SetupQuerySpaceRequiredOnDriveW",
    "CM_Run_Detection_Ex",
    "SetupGetLineByIndexW",
    "pSetupUnicodeToMultiByte",
    "pSetupShouldDeviceBeExcluded",
    "SetupSetThreadLogToken",
    "CM_Register_Device_Interface_ExA",
    "SetupDiCreateDeviceInterfaceA",
    "SetupDiGetClassImageIndex",
    "SetupFindNextMatchLineA",
    "pSetupStringTableDuplicate",
    "SetupDiDestroyDriverInfoList",
    "CM_Add_ID_ExA",
    "SetupOpenInfFileA"
  ],
  "setupcln.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "setupetw.dll": "No exports",
  "sfc.dll": [
    "SRSetRestorePointW",
    "SfcIsFileProtected",
    "SRSetRestorePointA",
    "SRSetRestorePoint",
    "SfcGetNextProtectedFile",
    "SfpVerifyFile",
    "SfcIsKeyProtected"
  ],
  "sfc_os.dll": [
    "BeginFileMapEnumeration",
    "SfcInitiateScan",
    "SRSetRestorePointW",
    "SfcClose",
    "SfpDeleteCatalog",
    "SfcIsFileProtected",
    "CloseFileMapEnumeration",
    "SfcConnectToServer",
    "SfcInitProt",
    "GetNextFileMapContent",
    "SRSetRestorePointA",
    "SfcInstallProtectedFiles",
    "SfcTerminateWatcherThread",
    "SfcFileException",
    "SfpInstallCatalog",
    "SfcGetNextProtectedFile",
    "SfpVerifyFile",
    "SfcIsKeyProtected"
  ],
  "shacct.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "sharemediacpl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "shdocvw.dll": [
    "DoPrivacyDlg",
    "DoFileDownload",
    "HlinkFrameNavigateNHL",
    "URLQualifyW",
    "SetQueryNetSessionCount",
    "HlinkFrameNavigate",
    "URLQualifyA",
    "DoOrganizeFavDlg",
    "SHAddSubscribeFavorite",
    "OpenURL",
    "HlinkFindFrame",
    "AddUrlToFavorites",
    "DoAddToFavDlg",
    "DoOrganizeFavDlgW",
    "DoAddToFavDlgW",
    "ImportPrivacySettings",
    "DllGetVersion",
    "DllRegisterWindowClasses",
    "SHGetIDispatchForFolder",
    "DoFileDownloadEx",
    "DllCanUnloadNow",
    "SetShellOfflineState",
    "SoftwareUpdateMessageBox",
    "DllGetClassObject"
  ],
  "shell32.dll": [
    "SHGetSetFolderCustomSettings",
    "SHGetFolderPathW",
    "PathYetAnotherMakeUniqueName",
    "SHLimitInputEdit",
    "SHReplaceFromPropSheetExtArray",
    "ShellExecuteW",
    "SHCreateDefaultExtractIcon",
    "SHILCreateFromPath",
    "SHChangeNotifyDeregister",
    "SHHandleUpdateImage",
    "SHGetFolderLocation",
    "SHCreateItemWithParent",
    "SHOpenPropSheetW",
    "SHFileOperationA",
    "SHGetDesktopFolder",
    "SHAddDefaultPropertiesByExt",
    "IsLFNDriveW",
    "ShellExecuteExW",
    "CDefFolderMenu_Create2",
    "SHGetItemFromObject",
    "SHCloneSpecialIDList",
    "SHGetAttributesFromDataObject",
    "StrRChrIW",
    "SHGetNewLinkInfoA",
    "SHGetDiskFreeSpaceExA",
    "ShellExecuteA",
    "SHGetFolderPathAndSubDirW",
    "SheGetDirA",
    "SHUpdateImageW",
    "ILFindLastID",
    "SHGetDataFromIDListA",
    "DAD_DragMove",
    "SHRestricted",
    "Control_RunDLLA",
    "ShellExec_RunDLL",
    "SHCreatePropSheetExtArray",
    "StrChrA",
    "SHFlushSFCache",
    "SHHelpShortcuts_RunDLL",
    "SHCreateShellItem",
    "SHGetFileInfoW",
    "ShellMessageBoxA",
    "ShellExec_RunDLLA",
    "ILFree",
    "Shell_GetCachedImageIndexA",
    "ILLoadFromStreamEx",
    "SHCreateDirectory",
    "SHGetDiskFreeSpaceA",
    "DAD_SetDragImage",
    "SHObjectProperties",
    "SHPropStgCreate",
    "ExtractAssociatedIconA",
    "SHCreateShellItemArrayFromDataObject",
    "StrCmpNW",
    "RestartDialogEx",
    "ILCloneFirst",
    "DoEnvironmentSubstA",
    "SHTestTokenMembership",
    "SHSetTemporaryPropertyForItem",
    "DriveType",
    "CommandLineToArgvW",
    "SHStartNetConnectionDialogW",
    "SHGetPathFromIDListEx",
    "RegenerateUserEnvironment",
    "SHGetFileInfo",
    "IsLFNDrive",
    "SHAddToRecentDocs",
    "DoEnvironmentSubstW",
    "SHGetNewLinkInfo",
    "Shell_MergeMenus",
    "StrNCmpW",
    "DAD_ShowDragImage",
    "SHChangeNotification_Unlock",
    "SHCreateShellItemArray",
    "DAD_DragEnterEx",
    "RealShellExecuteExA",
    "DAD_DragEnterEx2",
    "DragQueryPoint",
    "SHOpenWithDialog",
    "SHSetInstanceExplorer",
    "RealShellExecuteW",
    "Win32DeleteFile",
    "Control_RunDLL",
    "StrCmpNIA",
    "SHGetLocalizedName",
    "SHCreateDirectoryExA",
    "RunAsNewUser_RunDLLW",
    "IsLFNDriveA",
    "SHFind_InitMenuPopup",
    "RealShellExecuteA",
    "IsNetDrive",
    "SHCreateShellFolderView",
    "SHFormatDrive",
    "SHSetUnreadMailCountW",
    "PifMgr_SetProperties",
    "PrintersGetCommand_RunDLLA",
    "SHAppBarMessage",
    "SHGetPathFromIDList",
    "DragQueryFileW",
    "Options_RunDLLA",
    "SHIsFileAvailableOffline",
    "PickIconDlg",
    "FreeIconList",
    "ShellAboutA",
    "ILGetNext",
    "SHGetSettings",
    "StrRChrW",
    "PathIsSlowA",
    "Options_RunDLLW",
    "SHSetFolderPathA",
    "SHCreateQueryCancelAutoPlayMoniker",
    "SHEnableServiceObject",
    "SHResolveLibrary",
    "ILGetSize",
    "CIDLData_CreateFromIDArray",
    "SHCreateDataObject",
    "SHInvokePrinterCommandW",
    "SHChangeNotifySuspendResume",
    "ILIsParent",
    "SHBrowseForFolderW",
    "StrRChrIA",
    "InitNetworkAddressControl",
    "Control_RunDLLW",
    "SHCoCreateInstance",
    "IsUserAnAdmin",
    "SetCurrentProcessExplicitAppUserModelID",
    "SHHelpShortcuts_RunDLLA",
    "SHGetSpecialFolderLocation",
    "SHGetUnreadMailCountW",
    "InternalExtractIconListA",
    "SHCreateAssociationRegistration",
    "SHGetImageList",
    "SHGetSpecialFolderPathA",
    "ReadCabinetState",
    "SHPropStgWriteMultiple",
    "StrRChrA",
    "PathIsExe",
    "ILCreateFromPathA",
    "SHGetInstanceExplorer",
    "DragAcceptFiles",
    "SHGetPathFromIDListA",
    "PathGetShortPath",
    "WOWShellExecute",
    "SHCreateLocalServerRunDll",
    "PrintersGetCommand_RunDLLW",
    "OpenAs_RunDLL",
    "StrChrW",
    "DragQueryFileA",
    "DllRegisterServer",
    "FindExecutableA",
    "SHGetFileInfoA",
    "SHGetKnownFolderPath",
    "SHCreateDefaultPropertiesOp",
    "SHEmptyRecycleBinW",
    "SHFileOperationW",
    "SHEnumerateUnreadMailAccountsW",
    "OpenAs_RunDLLW",
    "SHInvokePrinterCommandA",
    "SHChangeNotification_Lock",
    "SHAlloc",
    "ILIsEqual",
    "SHShowManageLibraryUI",
    "DllInstall",
    "SHRemoveLocalizedName",
    "ShellExecuteEx",
    "SHBrowseForFolder",
    "StrStrIW",
    "PathQualify",
    "GetFileNameFromBrowse",
    "ExtractIconW",
    "RealShellExecuteExW",
    "StrNCmpIW",
    "PathCleanupSpec",
    "Shell_NotifyIcon",
    "SHPathPrepareForWriteW",
    "ShellExecuteExA",
    "SHGetIDListFromObject",
    "SHLoadNonloadedIconOverlayIdentifiers",
    "SHEmptyRecycleBinA",
    "SHGetKnownFolderItem",
    "SHGetPropertyStoreFromParsingName",
    "SHCLSIDFromString",
    "DAD_DragLeave",
    "ILFindChild",
    "ExtractAssociatedIconExW",
    "StrNCmpA",
    "PifMgr_OpenProperties",
    "ILClone",
    "SHGetFolderPathA",
    "SHCreateDirectoryExW",
    "SHFindFiles",
    "StgMakeUniqueName",
    "DragFinish",
    "SHGetNameFromIDList",
    "SignalFileOpen",
    "SHCreateStdEnumFmtEtc",
    "SHCreateItemFromParsingName",
    "StrStrA",
    "AssocCreateForClasses",
    "StrChrIW",
    "SHValidateUNC",
    "Control_RunDLLAsUserW",
    "RestartDialog",
    "SHSetLocalizedName",
    "StrStrW",
    "ExtractIconExA",
    "DllCanUnloadNow",
    "ILCreateFromPathW",
    "Shell_NotifyIconGetRect",
    "ILSaveToStream",
    "SHGetItemFromDataObject",
    "SHGetPathFromIDListW",
    "SHMapPIDLToSystemImageListIndex",
    "ILAppendID",
    "SHCreateShellItemArrayFromIDLists",
    "RealDriveType",
    "SHLoadInProc",
    "SHGetDriveMedia",
    "WaitForExplorerRestartW",
    "SHBindToParent",
    "SHMultiFileProperties",
    "StrStrIA",
    "Shell_GetCachedImageIndexW",
    "PrintersGetCommand_RunDLL",
    "DllGetVersion",
    "DuplicateIcon",
    "StrRStrA",
    "StrCmpNA",
    "SHGetKnownFolderIDList",
    "StrRStrIA",
    "SHQueryRecycleBinA",
    "StrCmpNIW",
    "PrepareDiscForBurnRunDllW",
    "ShellAboutW",
    "SHBindToFolderIDListParent",
    "ExtractIconExW",
    "ILCombine",
    "SHFreeNameMappings",
    "SHGetSpecialFolderPathW",
    "SHChangeNotifyRegister",
    "ShellHookProc",
    "SHAddFromPropSheetExtArray",
    "SHSimpleIDListFromPath",
    "SHCreateItemFromIDList",
    "SheChangeDirExW",
    "StrChrIA",
    "SHGetPropertyStoreForWindow",
    "AssocGetDetailsOfPropKey",
    "SheSetCurDrive",
    "SHDefExtractIconW",
    "SHQueryUserNotificationState",
    "ShellMessageBoxW",
    "SHHelpShortcuts_RunDLLW",
    "SHGetRealIDL",
    "SHGetSetSettings",
    "PifMgr_GetProperties",
    "ExtractAssociatedIconW",
    "SHGetDataFromIDListW",
    "SHDefExtractIconA",
    "SHGetTemporaryPropertyForItem",
    "Shell_NotifyIconA",
    "StrNCmpIA",
    "SheChangeDirA",
    "StrRStrIW",
    "DAD_AutoScroll",
    "Shell_GetImageLists",
    "SHCreateItemFromRelativeName",
    "SHOpenFolderAndSelectItems",
    "OpenAs_RunDLLA",
    "SHFileOperation",
    "PathResolve",
    "Options_RunDLL",
    "OpenRegStream",
    "SHAssocEnumHandlers",
    "DragQueryFileAorW",
    "SHPathPrepareForWriteA",
    "GetCurrentProcessExplicitAppUserModelID",
    "SHGetNewLinkInfoW",
    "SHChangeNotifyRegisterThread",
    "PathMakeUniqueName",
    "LaunchMSHelp_RunDLLW",
    "SHGetMalloc",
    "SHGetIconOverlayIndexA",
    "SHGetDiskFreeSpaceExW",
    "WriteCabinetState",
    "SHUpdateImageA",
    "SHCreateDefaultContextMenu",
    "SHFree",
    "PathIsSlowW",
    "SHCreateItemInKnownFolder",
    "SHParseDisplayName",
    "SHDoDragDrop",
    "SHGetStockIconInfo",
    "ShellExec_RunDLLW",
    "ILCreateFromPath",
    "SHGetPropertyStoreFromIDList",
    "Shell_GetCachedImageIndex",
    "AppCompat_RunDLLW",
    "DragQueryFile",
    "DllGetClassObject",
    "ExtractIconEx",
    "InternalExtractIconListW",
    "SHBrowseForFolderA",
    "SHCreateShellFolderViewEx",
    "SHAssocEnumHandlersForProtocolByApplication",
    "SHUpdateRecycleBinIcon",
    "SHExtractIconsW",
    "SHDestroyPropSheetExtArray",
    "SHPropStgReadMultiple",
    "SHCreateProcessAsUserW",
    "ExtractIconA",
    "SHCreateShellItemArrayFromShellItem",
    "SHShellFolderView_Message",
    "DllUnregisterServer",
    "SHBindToObject",
    "SHSetFolderPathW",
    "ILRemoveLastID",
    "SHGetIconOverlayIndexW",
    "SHGetFolderPathEx",
    "SHSetDefaultProperties",
    "StrRStrW",
    "SHQueryRecycleBinW",
    "CheckEscapesW",
    "SHEvaluateSystemCommandTemplate",
    "SHSetKnownFolderPath",
    "FindExecutableW",
    "SHChangeNotify",
    "SHGetFolderPathAndSubDirA",
    "PifMgr_CloseProperties",
    "SHCreateFileExtractIconW",
    "Shell_NotifyIconW",
    "SHBindToFolderIDListParentEx",
    "ExtractAssociatedIconExA"
  ],
  "shellstyle.dll": "No exports",
  "shfolder.dll": [
    "SHGetFolderPathW",
    "SHGetFolderPathA"
  ],
  "shgina.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "shimeng.dll": [
    "SE_GetHookAPIs",
    "SE_GetProcAddressIgnoreIncExc",
    "SE_DynamicShim",
    "SE_GetMaxShimCount",
    "SE_IsShimDll",
    "SE_InstallBeforeInit",
    "SE_ProcessDying",
    "SE_InstallAfterInit",
    "SE_DllUnloaded",
    "SE_DllLoaded",
    "SE_GetShimCount"
  ],
  "shimgvw.dll": [
    "ImageView_PrintToW",
    "DllCanUnloadNow",
    "ImageView_PrintToA",
    "ImageView_FullscreenW",
    "ImageView_FullscreenA",
    "ImageView_Fullscreen",
    "DllGetClassObject",
    "ImageView_PrintTo",
    "imageview_fullscreenW"
  ],
  "shlwapi.dll": [
    "SHAnsiToUnicode",
    "PathGetDriveNumberW",
    "ColorAdjustLuma",
    "PathRemoveFileSpecA",
    "IUnknown_Set",
    "SHRegGetUSValueA",
    "PathSetDlgItemPathW",
    "SHRegQueryInfoUSKeyA",
    "AssocQueryStringA",
    "StrDupA",
    "IStream_Read",
    "SHRegGetIntW",
    "SHCreateStreamOnFileEx",
    "SHCreateStreamOnFileA",
    "PathCanonicalizeW",
    "PathIsUNCServerW",
    "PathIsDirectoryA",
    "SHRegWriteUSValueW",
    "PathIsContentTypeA",
    "UrlHashW",
    "AssocGetPerceivedType",
    "StrRChrIW",
    "StrDupW",
    "SHRegDeleteEmptyUSKeyW",
    "StrIsIntlEqualA",
    "PathIsLFNFileSpecW",
    "SHRegEnumUSKeyW",
    "UrlEscapeA",
    "PathMatchSpecA",
    "SHUnicodeToAnsi",
    "PathCompactPathA",
    "PathAddExtensionA",
    "IsInternetESCEnabled",
    "SHCopyKeyA",
    "PathRelativePathToW",
    "PathIsUNCServerShareW",
    "SHUnlockShared",
    "StrChrA",
    "PathGetCharTypeA",
    "IStream_Write",
    "PathAppendW",
    "PathMakeSystemFolderW",
    "ShellMessageBoxA",
    "SHFormatDateTimeA",
    "UrlCanonicalizeW",
    "SHOpenRegStream2A",
    "PathIsDirectoryW",
    "PathFindFileNameW",
    "SHSetThreadRef",
    "SHStripMneumonicA",
    "SHLoadIndirectString",
    "SHQueryValueExA",
    "SHRegGetUSValueW",
    "PathSearchAndQualifyA",
    "PathSearchAndQualifyW",
    "StrCmpNICW",
    "SHSkipJunction",
    "SHStrDupA",
    "StrCmpNW",
    "PathIsRootW",
    "StrSpnW",
    "PathStripPathA",
    "wvnsprintfW",
    "SHFormatDateTimeW",
    "SHRegGetPathA",
    "SHReleaseThreadRef",
    "PathFindExtensionA",
    "SHRegSetUSValueA",
    "SHMessageBoxCheckA",
    "SHRegSetPathA",
    "UrlCompareW",
    "IsCharSpaceW",
    "PathIsLFNFileSpecA",
    "StrToIntW",
    "StrCatW",
    "UrlCombineW",
    "IStream_WriteStr",
    "PathSetDlgItemPathA",
    "IStream_Copy",
    "StrCpyNW",
    "UrlGetPartW",
    "SHStripMneumonicW",
    "StrCSpnA",
    "UrlGetLocationW",
    "GetAcceptLanguagesW",
    "PathCreateFromUrlW",
    "UrlIsA",
    "PathMatchSpecExA",
    "StrCmpNIA",
    "StrStrNW",
    "StrPBrkW",
    "wnsprintfW",
    "PathFindNextComponentA",
    "SHSetValueA",
    "SHDeleteValueW",
    "PathAddBackslashW",
    "StrRetToStrA",
    "HashData",
    "SHDeleteOrphanKeyW",
    "SHRegQueryInfoUSKeyW",
    "StrToInt64ExA",
    "UrlApplySchemeA",
    "UrlIsOpaqueA",
    "IUnknown_GetSite",
    "PathIsURLA",
    "UrlGetLocationA",
    "DelayLoadFailureHook",
    "PathUnquoteSpacesA",
    "PathRemoveBlanksW",
    "PathParseIconLocationA",
    "SHSendMessageBroadcastA",
    "StrRChrW",
    "SHEnumKeyExA",
    "UrlCreateFromPathW",
    "StrTrimA",
    "AssocQueryKeyA",
    "PathCreateFromUrlA",
    "ParseURLA",
    "SHQueryInfoKeyA",
    "PathFindSuffixArrayW",
    "StrFromTimeIntervalW",
    "AssocIsDangerous",
    "IUnknown_SetSite",
    "IStream_WritePidl",
    "PathGetArgsA",
    "SHAutoComplete",
    "UrlCanonicalizeA",
    "PathGetCharTypeW",
    "PathFindNextComponentW",
    "StrNCatA",
    "StrCmpICA",
    "UrlCompareA",
    "StrFormatByteSizeA",
    "PathMakePrettyA",
    "wnsprintfA",
    "PathRenameExtensionA",
    "PathIsUNCServerA",
    "UrlIsOpaqueW",
    "SHCreateStreamOnFileW",
    "StrRChrIA",
    "StrCmpLogicalW",
    "PathRemoveBlanksA",
    "StrFormatByteSizeW",
    "SHRegQueryUSValueW",
    "PathIsNetworkPathA",
    "PathMatchSpecW",
    "SHRegGetBoolUSValueW",
    "PathIsSystemFolderA",
    "UrlApplySchemeW",
    "SHRegSetPathW",
    "StrTrimW",
    "SHOpenRegStreamW",
    "SHRegDeleteUSValueA",
    "SHRegEnumUSValueA",
    "ColorRGBToHLS",
    "StrCatChainW",
    "StrRChrA",
    "PathIsFileSpecW",
    "UrlGetPartA",
    "UrlCreateFromPathA",
    "ConnectToConnectionPoint",
    "IStream_Size",
    "SHUnicodeToUnicode",
    "PathIsSystemFolderW",
    "wvnsprintfA",
    "IStream_ReadPidl",
    "PathIsUNCA",
    "PathIsRelativeW",
    "SHEnumValueA",
    "GetMenuPosFromID",
    "QISearch",
    "PathUnmakeSystemFolderW",
    "SHDeleteValueA",
    "StrChrW",
    "SHQueryValueExW",
    "SHMessageBoxCheckW",
    "SHCreateShellPalette",
    "StrCSpnIA",
    "MLLoadLibraryA",
    "PathRemoveBackslashA",
    "PathRemoveExtensionA",
    "StrFormatKBSizeW",
    "UrlIsW",
    "PathIsUNCServerShareA",
    "IUnknown_GetWindow",
    "PathIsPrefixW",
    "SHOpenRegStream2W",
    "SHAllocShared",
    "SHRegGetValueA",
    "SHCreateMemStream",
    "StrStrIW",
    "PathCanonicalizeA",
    "SHStrDupW",
    "StrIsIntlEqualW",
    "IsOS",
    "PathRemoveArgsW",
    "SHRegGetPathW",
    "PathUnquoteSpacesW",
    "SHEnumKeyExW",
    "StrSpnA",
    "PathFindFileNameA",
    "PathSkipRootA",
    "PathIsUNCW",
    "SHRegOpenUSKeyW",
    "StrCSpnW",
    "SHQueryInfoKeyW",
    "SHGetValueW",
    "PathCompactPathExW",
    "StrRetToBufW",
    "StrStrNIW",
    "PathStripToRootW",
    "SHRegWriteUSValueA",
    "PathCommonPrefixW",
    "PathIsRootA",
    "PathUndecorateW",
    "PathBuildRootW",
    "StrStrA",
    "StrChrIW",
    "PathFileExistsW",
    "SHCreateThread",
    "SHDeleteKeyW",
    "PathCompactPathW",
    "SHDeleteKeyA",
    "PathIsDirectoryEmptyW",
    "SHDeleteOrphanKeyA",
    "PathCreateFromUrlAlloc",
    "StrStrW",
    "SHRegGetValueW",
    "StrNCatW",
    "PathGetArgsW",
    "StrRetToStrW",
    "StrChrNIW",
    "PathMakeSystemFolderA",
    "StrFormatByteSize64A",
    "PathIsPrefixA",
    "PathIsSameRootA",
    "StrStrIA",
    "SHIsChildOrSelf",
    "DllGetVersion",
    "StrFromTimeIntervalA",
    "SHRegisterValidateTemplate",
    "PathSkipRootW",
    "StrCmpNA",
    "StrRStrIA",
    "StrFormatKBSizeA",
    "StrCmpNIW",
    "SHGetThreadRef",
    "PathBuildRootA",
    "PathIsFileSpecA",
    "StrCmpCW",
    "StrPBrkA",
    "PathAddExtensionW",
    "MLFreeLibrary",
    "SHRunIndirectRegClientCommand",
    "StrCmpW",
    "PathCombineW",
    "SHRegDeleteEmptyUSKeyA",
    "SHRegGetBoolUSValueA",
    "StrRetToBSTR",
    "ChrCmpIW",
    "PathIsSameRootW",
    "SHGetInverseCMAP",
    "SHDeleteEmptyKeyA",
    "StrChrIA",
    "PathFindOnPathW",
    "PathRemoveBackslashW",
    "StrToInt64ExW",
    "SHOpenRegStreamA",
    "ShellMessageBoxW",
    "ParseURLW",
    "PathFindSuffixArrayA",
    "UrlIsNoHistoryA",
    "StrCSpnIW",
    "StrCatBuffW",
    "UrlUnescapeW",
    "SHSendMessageBroadcastW",
    "PathStripToRootA",
    "SHDeleteEmptyKeyW",
    "SHGetViewStatePropertyBag",
    "IsCharSpaceA",
    "UrlCombineA",
    "SHEnumValueW",
    "PathFindOnPathA",
    "StrCmpNCW",
    "StrRStrIW",
    "StrCmpNCA",
    "IUnknown_QueryService",
    "PathIsContentTypeW",
    "GetAcceptLanguagesA",
    "SHLockShared",
    "StrRetToBufA",
    "PathFileExistsA",
    "SHRegCreateUSKeyA",
    "SHSetValueW",
    "SHRegCloseUSKey",
    "PathMakePrettyW",
    "PathUndecorateA",
    "PathRemoveExtensionW",
    "StrFormatByteSizeEx",
    "IStream_ReadStr",
    "PathUnExpandEnvStringsA",
    "StrCpyW",
    "StrToIntExW",
    "PathGetDriveNumberA",
    "PathUnmakeSystemFolderA",
    "SHRegCreateUSKeyW",
    "StrCmpIW",
    "ColorHLSToRGB",
    "PathIsURLW",
    "StrChrNW",
    "PathStripPathW",
    "PathCombineA",
    "SHRegEnumUSKeyA",
    "PathFindExtensionW",
    "PathAddBackslashA",
    "PathCompactPathExA",
    "SHRegEnumUSValueW",
    "PathParseIconLocationW",
    "PathQuoteSpacesW",
    "PathRelativePathToA",
    "StrCatBuffA",
    "StrCmpNICA",
    "StrToIntExA",
    "StrCmpICW",
    "SHCreateThreadRef",
    "SHRegSetUSValueW",
    "PathRemoveFileSpecW",
    "SHCreateThreadWithHandle",
    "SHRegDeleteUSValueW",
    "StrCmpCA",
    "PathRenameExtensionW",
    "MLLoadLibraryW",
    "SHGetValueA",
    "SHRegQueryUSValueA",
    "WhichPlatform",
    "AssocQueryStringW",
    "SHRegOpenUSKeyA",
    "AssocCreate",
    "PathQuoteSpacesA",
    "SHCopyKeyW",
    "PathIsRelativeA",
    "PathIsNetworkPathW",
    "ChrCmpIA",
    "SHAnsiToAnsi",
    "SHPropertyBag_WriteBSTR",
    "PathMatchSpecExW",
    "UrlHashA",
    "UrlEscapeW",
    "SHRegDuplicateHKey",
    "AssocQueryStringByKeyW",
    "AssocQueryKeyW",
    "AssocQueryStringByKeyA",
    "UrlIsNoHistoryW",
    "PathCommonPrefixA",
    "PathIsDirectoryEmptyA",
    "PathAppendA",
    "StrToIntA",
    "PathRemoveArgsA",
    "SHPropertyBag_ReadStrAlloc",
    "PathUnExpandEnvStringsW",
    "IntlStrEqWorkerA",
    "SHCreateStreamWrapper",
    "SHFreeShared",
    "IStream_Reset",
    "IntlStrEqWorkerW",
    "SHIsLowMemoryMachine",
    "UrlUnescapeA",
    "UrlFixupW",
    "IUnknown_AtomicRelease"
  ],
  "shpafact.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "shsetup.dll": [
    "Sysprep_Cleanup_Shell",
    "SHUnattendedSetupA",
    "SHUnattendedSetup",
    "SHUnattendedSetupW",
    "Sysprep_Generalize_Shell",
    "Sysprep_Specialize_Shell"
  ],
  "shsvcs.dll": [
    "CreateHardwareEventMoniker",
    "HardwareDetectionServiceMain"
  ],
  "shunimpl.dll": "No exports",
  "shwebsvc.dll": [
    "AddNetPlaceRunDll",
    "PublishRunDll",
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "signdrv.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "sisbkup.dll": [
    "SisCSFilesToBackupForLink",
    "SisFreeAllocatedMemory",
    "SisCreateRestoreStructure",
    "SisFreeRestoreStructure",
    "SisFreeBackupStructure",
    "SisCreateBackupStructure",
    "SisRestoredCommonStoreFile",
    "SisRestoredLink"
  ],
  "slc.dll": [
    "SLGetPolicyInformationDWORD",
    "SLSetGenuineInformation",
    "SLUninstallSAMLicense",
    "SLGetLicenseFileId",
    "SLGetSLIDList",
    "SLGetApplicationInformation",
    "SLGetSAMLicense",
    "SLGenerateOfflineInstallationId",
    "SLGetInstalledSAMLicenseApplications",
    "SLGetPolicyInformation",
    "SLGetPKeyId",
    "SLpUpdateComponentTokens",
    "SLInstallProofOfPurchase",
    "SLOpen",
    "SLClose",
    "SLGetPKeyInformation",
    "SLUninstallProofOfPurchase",
    "SLpGetGenuineLocal",
    "SLGetLicensingStatusInformation",
    "SLGetWindowsInformation",
    "SLUnregisterEvent",
    "SLDepositOfflineConfirmationId",
    "SLGetProductSkuInformation",
    "SLpCheckProductKey",
    "SLGetLicense",
    "SLUnregisterWindowsEvent",
    "SLRegisterEvent",
    "SLInstallSAMLicense",
    "SLIsWindowsGenuineLocal",
    "SLRegisterWindowsEvent",
    "SLConsumeRight",
    "SLGetServiceInformation",
    "SLGetWindowsInformationDWORD",
    "SLGetInstalledProductKeyIds",
    "SLSetCurrentProductKey",
    "SLReArmWindows",
    "SLConsumeWindowsRight",
    "SLGetLicenseInformation",
    "SLUninstallLicense",
    "SLGetGenuineInformation",
    "SLFireEvent",
    "SLInstallLicense"
  ],
  "slcext.dll": [
    "SLActivateProduct",
    "SLUninstallPackage",
    "SLGetReferralInformation",
    "SLGetPackageProductKey",
    "SLGetPackageToken",
    "SLGetPackageProperties",
    "SLInstallPackage",
    "SLAcquireGenuineTicket",
    "SLGetServerStatus"
  ],
  "slwga.dll": [
    "SLIsGenuineLocal"
  ],
  "snmpapi.dll": [
    "SnmpSvcAddrIsIpx",
    "SnmpSvcSetLogLevel",
    "SnmpUtilOidFree",
    "SnmpUtilDbgPrint",
    "SnmpUtilOidCmp",
    "SnmpUtilOidToA",
    "SnmpUtilOidNCmp",
    "SnmpUtilAsnAnyFree",
    "SnmpUtilIdsToA",
    "SnmpUtilMemReAlloc",
    "SnmpUtilPrintAsnAny",
    "SnmpSvcGetEnterpriseOID",
    "SnmpTfxClose",
    "SnmpUtilVarBindFree",
    "SnmpUtilVarBindCpy",
    "SnmpUtilVarBindListCpy",
    "SnmpUtilAnsiToUnicode",
    "SnmpSvcSetLogType",
    "SnmpUtilUTF8ToUnicode",
    "SnmpTfxQuery",
    "SnmpUtilAsnAnyCpy",
    "SnmpSvcAddrToSocket",
    "SnmpUtilMemFree",
    "SnmpSvcGetUptime",
    "SnmpUtilOctetsFree",
    "SnmpUtilOidCpy",
    "SnmpSvcGetUptimeFromTime",
    "SnmpUtilOidAppend",
    "SnmpUtilVarBindListFree",
    "SnmpSvcInitUptime",
    "SnmpUtilMemAlloc",
    "SnmpUtilUnicodeToUTF8",
    "SnmpUtilOctetsCpy",
    "SnmpUtilPrintOid",
    "SnmpUtilOctetsNCmp",
    "SnmpUtilUnicodeToAnsi",
    "SnmpTfxOpen",
    "SnmpUtilOctetsCmp"
  ],
  "softkbd.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "softpub.dll": [
    "OfficeCleanupPolicy",
    "SoftpubCleanup",
    "OfficeInitializePolicy",
    "SoftpubLoadDefUsageCallData",
    "DllRegisterServer",
    "SoftpubAuthenticode",
    "HTTPSFinalProv",
    "DllUnregisterServer",
    "AddPersonalTrustDBPages",
    "SoftpubFreeDefUsageCallData",
    "SoftpubDumpStructure",
    "DriverFinalPolicy",
    "SoftpubInitialize",
    "FindCertsByIssuer",
    "GenericChainFinalProv",
    "OpenPersonalTrustDBDialog",
    "GenericChainCertificateTrust",
    "SoftpubCheckCert",
    "DriverInitializePolicy",
    "SoftpubLoadSignature",
    "HTTPSCertificateTrust",
    "DriverCleanupPolicy",
    "SoftpubDefCertInit",
    "SoftpubLoadMessage"
  ],
  "spbcd.dll": [
    "Sysprep_Specialize_Bcd",
    "Sysprep_Generalize_Bcd"
  ],
  "spcmsg.dll": "No exports",
  "sperror.dll": [
    "GetErrorDescription"
  ],
  "spfileq.dll": [
    "SpFileQueueClose",
    "SpFileQueueOpen",
    "SpFileQueueNodeGetStyleFlags",
    "SpFileQueueGetQueueCount",
    "SpFileQueueDelete",
    "SpFileQueueFileInUse",
    "SpFileQueueNodeGetSourceFilename",
    "SpFileQueueNodeRemove",
    "SpFileQueueNodeGetSourceRootPath",
    "SpFileQueueNodeGetTargetFilename",
    "SpFileQueueNodeGetSourcePath",
    "SpFileQueueSetFlags",
    "SpFileQueueRename",
    "SpFileQueueNodeGetTargetDirectory",
    "SpFileQueueCommit",
    "SpFileQueueCopy",
    "SpFileQueueNodeGetSecurityDescriptor",
    "SpFileQueueGetFlags"
  ],
  "spnet.dll": [
    "Sysprep_Clean_Net",
    "Sysprep_Generalize_Net"
  ],
  "spoolss.dll": [
    "CallDrvDevModeConversion",
    "PlayGdiScriptOnPrinterIC",
    "AddFormW",
    "FormatRegistryKeyForPrinter",
    "AddPrinterConnectionW",
    "RouterGetCorePrinterDrivers",
    "MarshallDownStructure",
    "RouterAddPrinterConnection2",
    "ProvidorFindClosePrinterChangeNotification",
    "DeletePrinterDataExW",
    "RouterAllocPrinterNotifyInfo",
    "AdjustPointersInStructuresArray",
    "SplPowerEvent",
    "bSetDevModePerUser",
    "EndPagePrinter",
    "ProvidorFindFirstPrinterChangeNotification",
    "SplShutDownRouter",
    "AddPortExW",
    "SpoolerFreePrinterNotifyInfo",
    "DeletePrinter",
    "EnumPrinterDataExW",
    "ReplyPrinterChangeNotificationEx",
    "MakePTR",
    "SplUnregisterForDeviceEvents",
    "ReallocSplStr",
    "ResetPrinterW",
    "RouterInternalGetPrinterDriver",
    "EnumMonitorsW",
    "DeletePrinterIC",
    "PackStringToEOB",
    "SpoolerFindClosePrinterChangeNotification",
    "GetFormW",
    "IsNameTheLocalMachineOrAClusterSpooler",
    "SplRegisterForSessionEvents",
    "SplProcessPnPEvent",
    "EnumFormsW",
    "WaitForPrinterChange",
    "SplGetUserSidStringFromToken",
    "UndoAlignKMPtr",
    "RouterDeletePrinterDriverPackage",
    "GetJobW",
    "RouterFindNextPrinterChangeNotification",
    "MIDL_user_free1",
    "AddJobW",
    "SplCloseSpoolFileHandle",
    "CallRouterFindFirstPrinterChangeNotification",
    "AppendPrinterNotifyInfoData",
    "GetPrinterDriverDirectoryW",
    "IsNamedPipeRpcCall",
    "SplInitializeWinSpoolDrv",
    "UpdatePrinterRegAll",
    "EnumPerMachineConnectionsW",
    "RouterAllocBidiMem",
    "StartDocPrinterW",
    "DeletePrinterDriverExW",
    "DeletePrintProcessorW",
    "DeletePrinterKeyW",
    "DllReallocSplMem",
    "GetPrinterDriverW",
    "SpoolerHasInitialized",
    "DllFreeSplStr",
    "EnumPrintProcessorDatatypesW",
    "ScheduleJob",
    "CreatePrinterIC",
    "GetJobAttributesEx",
    "ReplyClosePrinter",
    "ClusterSplOpen",
    "EnumPortsW",
    "AddPrinterW",
    "EnumPrinterKeyW",
    "OldGetPrinterDriverW",
    "GetPrinterDataExW",
    "AlignRpcPtr",
    "ClusterSplClose",
    "SendRecvBidiData",
    "DeletePortW",
    "EnumPrinterDriversW",
    "SplReadPrinter",
    "DeletePerMachineConnectionW",
    "EnumJobsW",
    "CacheCreateAndAddNodeWithIPAddresses",
    "DeletePrintProvidorW",
    "RouterFreePrinterNotifyInfo",
    "RouterGetPrinterDriverPackagePath",
    "SetPrinterDataW",
    "SetPrinterW",
    "ConfigurePortW",
    "DllAllocSplStr",
    "BuildOtherNamesFromMachineName",
    "SplIsSessionZero",
    "AbortPrinter",
    "EnumPrinterDataW",
    "GetServerPolicy",
    "bGetDevModePerUser",
    "SetFormW",
    "DeletePrinterConnectionW",
    "ReportJobProcessingProgress",
    "UpdateBufferSize",
    "StartPagePrinter",
    "SplQueryUserInfo",
    "DeleteFormW",
    "DllAllocSplMem",
    "MarshallUpStructuresArray",
    "CacheCreateAndAddNode",
    "FreeOtherNames",
    "GetPrinterW",
    "OpenPrinterPort2W",
    "RevertToPrinterSelf",
    "SpoolerFindNextPrinterChangeNotification",
    "GetShrinkedSize",
    "AddMonitorW",
    "AdjustPointers",
    "RouterFindFirstPrinterChangeNotification",
    "AddPortW",
    "WritePrinter",
    "InitializeRouter",
    "XcvDataW",
    "AddPrinterDriverW",
    "ClusterSplIsAlive",
    "RouterCorePrinterDriverInstalled",
    "CacheDeleteNode",
    "RouterSpoolerSetPolicy",
    "DeletePrinterDriverW",
    "SplPromptUIInUsersSession",
    "OpenPrinterExW",
    "RouterUnregisterForPrintAsyncNotifications",
    "CacheAddName",
    "CacheIsNameCluster",
    "DeleteMonitorW",
    "RouterFreeBidiMem",
    "RouterInstallPrinterDriverFromPackage",
    "SplGetSpoolFileInfo",
    "AddPrintProcessorW",
    "CacheIsNameInNodeList",
    "PackStrings",
    "DllMain",
    "SplIsUpgrade",
    "PrinterMessageBoxW",
    "SplProcessSessionEvent",
    "FormatPrinterForRegistryKey",
    "GetJobAttributes",
    "GetSpoolerTlsIndexes",
    "RouterFreeBidiResponseContainer",
    "ReallocSplMem",
    "EnumPrintersW",
    "DllFreeSplMem",
    "GetPrintProcessorDirectoryW",
    "ReplyPrinterChangeNotification",
    "OpenPrinter2W",
    "AlignKMPtr",
    "AddPrintProvidorW",
    "SplCommitSpoolData",
    "SplDriverUnloadComplete",
    "SplRegisterForDeviceEvents",
    "AllocSplStr",
    "FlushPrinter",
    "MakeOffset",
    "RouterRefreshPrinterChangeNotification",
    "UpdatePrinterRegUser",
    "ClosePrinter",
    "AllowRemoteCalls",
    "SetJobW",
    "ImpersonatePrinterClient",
    "SplUnregisterForSessionEvents",
    "RouterRegisterForPrintAsyncNotifications",
    "CheckLocalCall",
    "PartialReplyPrinterChangeNotification",
    "SeekPrinter",
    "RouterGetPrintClassObject",
    "UndoAlignRpcPtr",
    "AddPerMachineConnectionW",
    "FindClosePrinterChangeNotification",
    "MarshallDownStructuresArray",
    "EnumPrintProcessorsW",
    "RouterUploadPrinterDriverPackage",
    "RouterAllocBidiResponseContainer",
    "SetPrinterDataExW",
    "ReadPrinter",
    "OpenPrinterW",
    "RouterFindCompatibleDriver",
    "RouterBroadcastMessage",
    "DllReallocSplStr",
    "AddPrinterDriverExW",
    "MarshallUpStructure",
    "WaitForSpoolerInitialization",
    "PrinterHandleRundown",
    "SetPortW",
    "GetNetworkId",
    "GetPrinterDataW",
    "SpoolerInit",
    "AddPrinterExW",
    "GetPrinterDriverExW",
    "DeletePrinterDataW",
    "MIDL_user_allocate1",
    "RemoteFindFirstPrinterChangeNotification",
    "RouterCreatePrintAsyncNotificationChannel",
    "EndDocPrinter",
    "SpoolerFindFirstPrinterChangeNotification",
    "SpoolerRefreshPrinterChangeNotification",
    "ReplyOpenPrinter",
    "RouterReplyPrinter",
    "SplGetClientUserHandle"
  ],
  "spopk.dll": [
    "Sysprep_Clean_Opk",
    "Sysprep_Generalize_Opk",
    "Sysprep_Specialize_Opk"
  ],
  "spp.dll": [
    "SxTracerDebuggerBreak",
    "SxTracerShouldTrackFailure",
    "SxTracerGetThreadContextDebug",
    "SppFreeExternalGroupPropArray",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "SppFreeClientPropArray",
    "SxTracerGetThreadContextRetail",
    "SppFreeMetadataProp",
    "DllGetClassObject",
    "DllRegisterServer",
    "SppFreeGroupPropArray"
  ],
  "sppc.dll": [
    "SLGetPolicyInformationDWORD",
    "SLpGetInstalledSAMLicenseApplications",
    "SLIsGenuineLocalEx",
    "SLSetGenuineInformation",
    "SLPersistRTSPayloadOverride",
    "SLpGenerateTokenActivationChallenge",
    "SLGetLicenseFileId",
    "SLGetAuthenticationResult",
    "SLGetSLIDList",
    "SLGetApplicationInformation",
    "SLGenerateOfflineInstallationId",
    "SLInstallLicense",
    "SLpUninstallSAMLicense",
    "SLpBeginGenuineTicketTransaction",
    "SLGetPolicyInformation",
    "SLGetPKeyId",
    "SLpDepositTokenActivationResponse",
    "SLpGetMachineUGUID",
    "SLInstallProofOfPurchase",
    "SLOpen",
    "SLClose",
    "SLGetPKeyInformation",
    "SLUninstallProofOfPurchase",
    "SLpGetGenuineLocal",
    "SLCallServer",
    "SLSetAuthenticationData",
    "SLpGetTokenActivationGrantInfo",
    "SLGetLicensingStatusInformation",
    "SLUnregisterEvent",
    "SLPersistApplicationPolicies",
    "SLDepositOfflineConfirmationId",
    "SLpInstallSAMLicense",
    "SLGetProductSkuInformation",
    "SLGetLicense",
    "SLRegisterEvent",
    "SLConsumeRight",
    "SLGetEncryptedPIDEx",
    "SLInstallProofOfPurchaseEx",
    "SLUnloadApplicationPolicies",
    "SLUnregisterPlugin",
    "SLGetServiceInformation",
    "SLpGetLicenseAcquisitionInfo",
    "SLpGetSAMLicense",
    "SLpGetMSPidInformation",
    "SLRegisterPlugin",
    "SLGetInstalledProductKeyIds",
    "SLSetCurrentProductKey",
    "SLGetApplicationPolicy",
    "SLGetLicenseInformation",
    "SLUninstallLicense",
    "SLpAuthenticateGenuineTicketResponse",
    "SLLoadApplicationPolicies",
    "SLGetGenuineInformation",
    "SLFireEvent",
    "SLpGetGenuineBlob",
    "SLReArm",
    "SLpVLActivateProduct"
  ],
  "sppcc.dll": [
    "DllCanUnloadNow",
    "OpenPackageW",
    "DllGetClassObject"
  ],
  "sppcext.dll": [
    "SLInitialize",
    "SLActivateProduct",
    "SLSignTokenActivationChallenge",
    "SLUninstallPackage",
    "SLDepositTokenActivationResponse",
    "SLGetTokenActivationGrants",
    "SLGetReferralInformation",
    "SLFreeTokenActivationGrants",
    "SLGetPackageProductKey",
    "SLGenerateTokenActivationChallenge",
    "SLGetPackageProperties",
    "SLGetPackageToken",
    "SLGetTokenActivationCertificates",
    "SLInstallPackage",
    "SLFreeTokenActivationCertificates",
    "SLAcquireGenuineTicket",
    "SLGetServerStatus"
  ],
  "sppcomapi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "sppcommdlg.dll": [
    "SLUXActivationWizard"
  ],
  "sppinst.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "sppnp.dll": [
    "Sysprep_Generalize_Pnp",
    "Sysprep_Specialize_Pnp"
  ],
  "sppobjs.dll": [
    "SppPluginShutdown",
    "SppPluginInitialize",
    "SppPluginCreateInstance",
    "SppPluginCanUnloadNow"
  ],
  "sppuinotify.dll": [
    "ServiceCtrlHandler",
    "ServiceMain"
  ],
  "sppwinob.dll": [
    "SppPluginShutdown",
    "SppPluginInitialize",
    "SppPluginCreateInstance",
    "SppPluginCanUnloadNow"
  ],
  "sppwmi.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "spwinsat.dll": [
    "Sysprep_Clean_WinSAT"
  ],
  "spwizeng.dll": [
    "private: int __thiscall CWndObj::v_DlgCreate(void)",
    "const ScrWindow::`vftable'{for `IWndProp'}",
    "const CCustomGraphicEx::`vftable'",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char,int)",
    "public: int __thiscall ATL::CSimpleArray >::RemoveAt(int)",
    "private: void __thiscall WizardUI::CenterApp(struct HWND__ *,struct tagRECT)",
    "public: virtual struct tagPOINT * __stdcall CWndObj::get_Position(void)",
    "public: virtual __thiscall CCritSec::~CCritSec(void)",
    "private: void __thiscall ScrWindow::v_SetWindowTitle(void)",
    "const WizardRoot::`vftable'",
    "private: int __thiscall PIDStringView::v_MakePidString(void)",
    "protected: virtual long __stdcall CWndObj::OnMouseLeave(unsigned int,long)",
    "public: virtual class WizardPage * __stdcall Navigator::Cancel(void)",
    "public: void __thiscall CCursor::SetCursorWait(void)",
    "public: void __thiscall WizardUI::RepositionAllWindows(unsigned int,long)",
    "public: class PIDStringView & __thiscall PIDStringView::operator=(class PIDStringView const &)",
    "public: long __thiscall CGenericNavWindow::OnDisplayChange(unsigned int,unsigned int,long,int &)",
    "public: long __thiscall CWndObj::WMHandler(unsigned int,unsigned int,long)",
    "public: int __stdcall NavigationStack::GetSize(void)",
    "public: virtual class WizardPage * __stdcall Navigator::Back(class WizardNode *)",
    "public: __thiscall CCustomGraphicEx::CCustomGraphicEx(class CCustomGraphicEx const &)",
    "public: static class CCustomButtonEx * __stdcall CCustomButtonEx::CreateIndirect(struct HINSTANCE__ *,struct HINSTANCE__ *,struct HWND__ *,struct _Button_Data * const)",
    "public: void __stdcall WizardRoot::MyPropSheet_SetWizButtons(unsigned long)",
    "public: virtual int __stdcall CWndObj::Post(unsigned int,unsigned int,long)",
    "public: void __thiscall WizardUI::SetAppWindow(class AppWindow *)",
    "public: __thiscall WizardVariation::WizardVariation(class WizardVariation const &)",
    "public: virtual void __thiscall WizardRoot::OnResourceChanged(void)",
    "public: class WizardStrategy * __stdcall WizardEx::GetStrategy(void)",
    "public: __thiscall SimpleSize::SimpleSize(void)",
    "private: void __thiscall WizardUI::CreateWindows(void)",
    "public: virtual void __stdcall Win32Navigator::RequestGoBack(void)",
    "protected: virtual long __stdcall CWndObj::OnRenderFormat(unsigned int,long)",
    "public: int __thiscall ATL::CStringT > >::Compare(unsigned short const *)const",
    "public: struct HINSTANCE__ * __thiscall WizardUI::GetResourceInstanceLoc(void)",
    "public: __thiscall CAttachDataDlg::~CAttachDataDlg(void)",
    "const CWndObj::`vftable'{for `IWndProp'}",
    "public: virtual unsigned long __stdcall CWndObj::get_ClsStyle(void)",
    "public: virtual void __stdcall CWndObj::set_BackColor(unsigned long)",
    "public: class CAnimationControl & __thiscall CAnimationControl::operator=(class CAnimationControl const &)",
    "private: int __thiscall LanguageSelectionDialogBase::PopulateLocaleList(void)",
    "public: __thiscall ATL::CSimpleStringT::CSimpleStringT(class ATL::CSimpleStringT const &)",
    "int __stdcall PaintWindowRegion(struct HWND__ *)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::MakeReverse(void)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,struct KEYBOARD * const &)",
    "public: static unsigned short __stdcall WizardUI::GetAppBitmap(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::Trim(unsigned short const *)",
    "public: virtual class WizardPage * __stdcall WizardPage::GetPage(void)",
    "public: int __thiscall CResourceModuleFactory::ResetLanguage(void)",
    "private: int __thiscall CDIB::Load32FromOther(class CDIB *)",
    "public: long __thiscall LanguageSelectionDialogBase::OnLanguageChange(unsigned short,unsigned short,struct HWND__ *,int &)",
    "public: static void __cdecl ATL::CSimpleStringT::CopyChars(unsigned short *,unsigned int,unsigned short const *,int)",
    "public: virtual __thiscall CDrawItem::~CDrawItem(void)",
    "public: int __thiscall ATL::CStringT > >::FindOneOf(unsigned short const *)const",
    "public: struct HINSTANCE__ * __thiscall CResourceModuleFactory::GetResourceInstance(void)",
    "public: __thiscall VariationWizStrategy::VariationWizStrategy(class VariationWizStrategy const &)",
    "public: __thiscall WizardHandler::WizardHandler(void)",
    "public: __thiscall CGenericNavWindow::CGenericNavWindow(class AppWindow *)",
    "public: int __thiscall ATL::CStringT > >::LoadStringW(struct HINSTANCE__ *,unsigned int)",
    "public: __thiscall ATL::CSimpleArray >::CSimpleArray >(class ATL::CSimpleArray > const &)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(char)",
    "public: virtual int __thiscall WizardRoot::CanPageBeActivated(enum Direction,int *)",
    "private: int __thiscall CDIB::DrawCore(struct HDC__ *,int,int,struct tagRECT,int)",
    "public: virtual __thiscall CWndObj::~CWndObj(void)",
    "protected: virtual long __stdcall AppWindow::OnBack(unsigned int,unsigned int,long)",
    "private: unsigned long __thiscall CDIB::StorageWidthBytes(void)const",
    "protected: virtual long __stdcall CWndObj::OnRButtonUp(unsigned int,long)",
    "public: __thiscall CDrawItemComposite::CDrawItemComposite(class CDrawItemComposite const &)",
    "public: unsigned short const * __thiscall WizardUI::GetFontName(void)",
    "private: static struct ATL::CStringData * __cdecl ATL::CSimpleStringT::CloneData(struct ATL::CStringData *)",
    "public: int __stdcall WizardRoot::SetTextStyle(int,float,int,int,int)",
    "const SimpleWizStrategy::`vftable'",
    "private: void __thiscall CResourceModule::LoadLibraryW(void)",
    "private: __thiscall CCursor::CCursor(void)",
    "protected: virtual long __stdcall CWndObj::OnNCDestroy(unsigned int,long)",
    "private: void __thiscall CResourceModule::v_ReleaseResource(struct HINSTANCE__ *)",
    "public: __thiscall BranchWizStrategy::BranchWizStrategy(class WizardEx *)",
    "public: void __thiscall CDrawItem::SetPosition(unsigned long,unsigned long)",
    "public: int __thiscall CDIB::Draw(struct HDC__ *,int,int,struct tagRECT)",
    "protected: virtual long __stdcall ScrWindow::OnClose(unsigned int,long)",
    "public: void __stdcall PageContainer::AddPage(class WizardPage *)",
    "public: void __stdcall PageContainer::ShowUI(struct HWND__ *,class WizardPage *)",
    "public: __thiscall CGenericNavWindow::CGenericNavWindow(class CGenericNavWindow const &)",
    "public: __thiscall CCtlText::CCtlText(void)",
    "private: void __thiscall ScrWindow::v_InitSurface(void)",
    "public: class Navigator & __thiscall Navigator::operator=(class Navigator const &)",
    "public: static class CHighContrast * __stdcall CHighContrast::GetInstance(void)",
    "long __stdcall wndProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: class WizardNode * __stdcall NavigationStack::GetElement(int)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::Trim(void)",
    "public: __thiscall ICreateProgressWnd::ICreateProgressWnd(void)",
    "public: long __thiscall LanguageNeutralSelectionDialogBase::OnLanguageSelect(int,struct tagNMHDR *,int &)",
    "public: struct SimpleSize __thiscall ProtoPageDimensions::GetScreenBitmapSize(void)",
    "protected: virtual long __stdcall CWndObj::OnMouseActivate(unsigned int,long)",
    "public: void __thiscall CResourceModuleFactory::Init(struct HINSTANCE__ *,unsigned short const *)",
    "int __stdcall MessageBoxFromMessageWithTimeout(struct HINSTANCE__ *,struct HWND__ *,unsigned short const *,unsigned int,unsigned int,unsigned int,int)",
    "public: class CResourceModule * __thiscall CResourceModuleFactory::GetResourceModule(void)",
    "public: long __thiscall CGenericNavWindow::OnSetCaption(unsigned int,unsigned int,long,int &)",
    "public: unsigned long __thiscall CDIB::GetTransparentColor(void)",
    "public: virtual int __thiscall WizardHandler::NotifyWizNext(int &)",
    "void __stdcall SetControlFonts(struct HWND__ *)",
    "public: int __thiscall CScreenText::Init(void)",
    "protected: virtual long __stdcall CWndObj::OnGetDlgCode(unsigned int,long)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(unsigned short const *)",
    "public: struct IResourceModuleEvent * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "protected: virtual long __stdcall ScrWindow::OnDeviceChange(unsigned int,long)",
    "public: static unsigned short __stdcall WizardUI::GetScreenBitmap(void)",
    "private: static class WizardUI * WizardUI::s_pWizardUI",
    "public: virtual __thiscall CScreenText::~CScreenText(void)",
    "public: virtual class WizardHandler * __thiscall WizardRoot::GetPageHandler(void)",
    "public: virtual class WizardNode * __thiscall Wizard_PageDesciption::CreateNode(unsigned int,class WizardEx *,class WizardUI *)",
    "const WizardEx::`vftable'{for `INavigationNode'}",
    "public: __thiscall ATL::CStringT > >::CStringT > >(struct tagVARIANT const &)",
    "public: long __thiscall WizardUI::SetUserSelectedLDId(unsigned short *)",
    "protected: virtual long __stdcall CWndObj::OnCtlColorListbox(unsigned int,long)",
    "public: int __thiscall CScreenText::SetText(struct HWND__ *,unsigned short const *)",
    "public: static class CCustomButtonEx * __stdcall CCustomButtonEx::Create(struct HINSTANCE__ *,struct HINSTANCE__ *,struct HWND__ *)",
    "public: virtual __thiscall CAnimation::~CAnimation(void)",
    "const CAttachDataDlg::`vftable'",
    "private: void __thiscall WizardUI::CalcAppSize(void)",
    "public: void __stdcall CRichEditControl::Initialize(struct HWND__ *)",
    "public: class WizardBranch & __thiscall WizardBranch::operator=(class WizardBranch const &)",
    "private: virtual int __thiscall WizardHandler::CanPageBeActivated(enum Direction,int *)",
    "public: class ChoiceWizStrategy & __thiscall ChoiceWizStrategy::operator=(class ChoiceWizStrategy const &)",
    "public: struct HDC__ * __thiscall CDIB::GetHdc(void)const",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(unsigned char const *)",
    "protected: virtual long __stdcall CWndObj::OnQueryOpen(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnSysChar(unsigned int,long)",
    "const ICreateNavbarWnd::`vftable'",
    "public: int __thiscall WizardUI::GetShowScreenWindow(void)",
    "const WizardDialogPost::`vftable'",
    "private: virtual __thiscall CHighContrast::~CHighContrast(void)",
    "public: void __stdcall WizardNode::SetType(unsigned int)",
    "public: class SimpleWizStrategy & __thiscall SimpleWizStrategy::operator=(class SimpleWizStrategy const &)",
    "public: __thiscall Navigator::Navigator(class Navigator const &)",
    "public: __thiscall WizardNode::WizardNode(class WizardNode const &)",
    "private: static int WizardVariation::m_CurrentVariation",
    "public: class NavigationStack & __thiscall NavigationStack::operator=(class NavigationStack const &)",
    "public: int __thiscall CAnimation::Load(struct HINSTANCE__ *,unsigned int,unsigned long,int,long,long)",
    "public: long __thiscall LanguageNeutralSelectionDialogBase::OnKeyUp(unsigned int,unsigned int,long,int &)",
    "public: virtual void __stdcall CWndObj::set_Size(struct tagSIZE *)",
    "public: virtual void __thiscall CCritSec::Enter(void)",
    "public: unsigned short const * __stdcall Wizard_PageDesciption::GetResourceLocName(void)",
    "public: virtual void __stdcall CWndObj::clr_WexStyle(unsigned long)",
    "public: __thiscall ICreateNavbarWnd::ICreateNavbarWnd(void)",
    "const WizardNode::`vftable'",
    "public: int __thiscall CAnimation::Stop(void)",
    "public: void __thiscall WizardUI::SetCancelNoShow(int)",
    "public: __thiscall CDrawItemComposite::CDrawItemComposite(void)",
    "public: int __thiscall ATL::CStringT > >::CompareNoCase(unsigned short const *)const",
    "public: unsigned short * __thiscall ATL::CStringT > >::SetSysString(unsigned short * *)const",
    "protected: static int VariationWizStrategy::m_CurrentVariation",
    "public: int __stdcall AppWindow::Init(unsigned int,unsigned int,unsigned int)",
    "public: int __thiscall ATL::CSimpleStringT::GetAllocLength(void)const",
    "public: void __stdcall WizardRoot::DestroyStandardButton(class CCustomButtonEx *)",
    "public: void __stdcall WizardRoot::ReloadAllStandardButtons(void)",
    "public: void __thiscall CDIB::MirrorImage(void)",
    "void __stdcall StretchControlToWindow(struct HWND__ *,unsigned int,unsigned int)",
    "protected: virtual long __stdcall CWndObj::OnNull(unsigned int,long)",
    "public: class WizardRoot * (__stdcall*__stdcall Wizard_PageDesciption::GetCreateWizardDialog(void))(class WizardPage *)",
    "public: int __stdcall AppWindow::ResetLanguage(void)",
    "public: virtual __thiscall CGenericNavWindow::~CGenericNavWindow(void)",
    "public: void __stdcall CAnimationControl::SetTransparentColor(unsigned long)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::SpanExcluding(unsigned short const *)const",
    "protected: virtual long __stdcall AppWindow::OnCancel(unsigned int,unsigned int,long)",
    "private: virtual __thiscall Win32Navigator::~Win32Navigator(void)",
    "private: void __thiscall WizardUI::HideSplashScreen(void)",
    "public: int __thiscall WizardUI::GetCancelNoShow(void)",
    "public: virtual __thiscall NavigationStack::~NavigationStack(void)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(struct LANGUAGE * const &)",
    "protected: virtual long __stdcall CWndObj::OnNCHitTest(unsigned int,long)",
    "public: int __thiscall ATL::CStringT > >::Find(unsigned short,int)const",
    "public: __thiscall CHighContrast::CHighContrast(class CHighContrast const &)",
    "public: int __stdcall AppWindow::IsAppMirrored(void)",
    "public: virtual int (__stdcall*__thiscall WizardRoot::GetWindowProc(void))(struct HWND__ *,unsigned int,unsigned int,long)",
    "struct HFONT__ * __stdcall CreateModifiedFont(struct HDC__ *,struct tagLOGFONTW *,int,int,int,int)",
    "protected: virtual void __thiscall WizardVariation::GetCurrentVariation(void)",
    "public: long __thiscall WizardUI::SetUserSelectedUILanguage(unsigned short *)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(struct KEYBOARD * const &)",
    "public: void __thiscall ATL::CSimpleStringT::Append(unsigned short const *)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(unsigned short)",
    "public: virtual class WizardPage * __stdcall WizardEx::Back(class WizardNode *)",
    "public: static class CCursor * __stdcall CCursor::GetInstance(void)",
    "public: virtual void __thiscall CDrawItem::ComposeOffscreen(struct HWND__ *)",
    "protected: virtual long __stdcall ScrWindow::OnUser(unsigned int,unsigned int,long)",
    "public: __thiscall WizardEx::WizardEx(void)",
    "public: static void __stdcall CCursor::FreeInstance(void)",
    "private: int __thiscall CRichEditControl::v_IsRtf(void)",
    "public: void __stdcall ScrWindow::GetScrRect(struct tagRECT *)",
    "public: int __thiscall CDIB::CreateFromHwnd(struct HWND__ *)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(unsigned short const *)",
    "protected: virtual long __stdcall CWndObj::OnKeyUp(unsigned int,long)",
    "public: int __thiscall MyString::InsertString(int,unsigned short const *)",
    "public: __thiscall BranchWizStrategy::BranchWizStrategy(class BranchWizStrategy const &)",
    "public: long __thiscall LanguageNeutralSelectionDialogBase::OnMouseOver(int,struct tagNMHDR *,int &)",
    "public: struct HINSTANCE__ * __thiscall CResourceModule::GetResourceInstance(void)",
    "public: __thiscall ScrWindow::ScrWindow(class WizardUI *,unsigned int)",
    "public: virtual void __stdcall CWndObj::set_Cursor(struct HICON__ *)",
    "const NavWindow::`vftable'",
    "public: virtual void __thiscall WizardHandler::OnResourceChanged(int &)",
    "protected: virtual long __stdcall CWndObj::OnLButtonDown(unsigned int,long)",
    "public: void __stdcall WizardNode::SetParent(class WizardEx *)",
    "private: void __thiscall LanguageNeutralSelectionDialogBase::InitLangNeutralLV(void)",
    "public: static int __cdecl ATL::CSimpleStringT::StringLength(unsigned short const *)",
    "private: void __thiscall WizardUI::RepositionProgressWindow(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnMouseMove(unsigned int,long)",
    "public: unsigned int __thiscall WizardUI::GetFontSize(void)",
    "public: struct HWND__ * __thiscall WizardHandler::Hdlg(void)",
    "const Win32Navigator::`vftable'",
    "public: virtual __thiscall CDrawItemComposite::~CDrawItemComposite(void)",
    "public: int __thiscall ATL::CSimpleArray >::Find(struct KEYBOARD * const &)const",
    "public: __thiscall NavigationStack::NavigationStack(void)",
    "protected: virtual long __stdcall CWndObj::OnSettingChange(unsigned int,long)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(char)",
    "private: static struct INavigator * Navigator::instance",
    "public: __thiscall CCtlText::CCtlText(class CCtlText const &)",
    "public: __thiscall WizardDialogPre::WizardDialogPre(void)",
    "public: class CDrawItemComposite & __thiscall CDrawItemComposite::operator=(class CDrawItemComposite const &)",
    "public: virtual int __stdcall WizardEx::Reset(void)",
    "public: __thiscall CWndObj::CWndObj(class CWndObj const &)",
    "public: virtual void __stdcall CWndObj::set_Alpha(unsigned long)",
    "public: void __thiscall ATL::CSimpleStringT::Preallocate(int)",
    "public: long __thiscall LanguageNeutralSelectionDialogBase::OnCustomDraw(int,struct tagNMHDR *,int &)",
    "public: int __stdcall PageContainer::IsDialogMessageW(struct tagMSG *)",
    "private: void __thiscall CAnimationControl::v_Set(unsigned long)",
    "public: __thiscall NavWindow::NavWindow(class AppWindow *)",
    "struct HFONT__ * __stdcall GetHwndFont(struct HWND__ *,struct tagLOGFONTW *)",
    "protected: virtual long __stdcall CWndObj::OnDeviceChange(unsigned int,long)",
    "public: __thiscall WizardPage::WizardPage(unsigned int,unsigned int,class WizardEx *,class WizardUI *)",
    "private: int __thiscall CDIB::DrawColorKey(struct HDC__ *,int,int,struct tagRECT)",
    "public: class CRichEditControl & __thiscall CRichEditControl::operator=(class CRichEditControl const &)",
    "public: int __thiscall ATL::CSimpleArray >::Find(struct LOCALE * const &)const",
    "public: unsigned short * __thiscall WizardUI::GetUserSelectedTargetLanguage(void)",
    "private: void __thiscall WizardUI::ShowWindows(void)",
    "private: int __thiscall WizardUI::InitFonts(struct HINSTANCE__ *)",
    "public: virtual __thiscall WizardSummary::~WizardSummary(void)",
    "protected: virtual long __stdcall CWndObj::OnEnterSizeMove(unsigned int,long)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimRight(unsigned short)",
    "public: static int __cdecl ATL::CSimpleStringT::StringLength(char const *)",
    "public: __thiscall CScreenDIB::CScreenDIB(class CScreenDIB const &)",
    "public: struct HDC__ * __stdcall ScrWindow::GetScrImage(void)",
    "public: unsigned short const * __thiscall PIDStringView::GetPidStr(void)",
    "public: void __thiscall ATL::CSimpleStringT::ReleaseBuffer(int)",
    "public: class WizardSummary & __thiscall WizardSummary::operator=(class WizardSummary const &)",
    "public: class WizardPage * __thiscall WizardUI::GetCancelPage(void)",
    "public: virtual void __stdcall CWndObj::set_TextColor(unsigned long)",
    "public: void __cdecl ATL::CStringT > >::Format(unsigned short const *,...)",
    "int __stdcall CenterRelativeToWindow(struct HWND__ *,struct HWND__ *,unsigned int)",
    "protected: virtual long __stdcall CWndObj::OnVScroll(unsigned int,long)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(unsigned char)",
    "public: void __thiscall ProtoPageDimensions::ScreenToPseudoCoordinate(int &,int &)",
    "public: void __thiscall ATL::CSimpleStringT::SetManager(struct ATL::IAtlStringMgr *)",
    "public: __thiscall CRichEditControl::CRichEditControl(void)",
    "public: int __thiscall ATL::CStringT > >::Find(unsigned short const *,int)const",
    "public: virtual int __stdcall CWndObj::IsDlgMsg(struct tagMSG *)",
    "public: class CDIB const & __thiscall CScreenDIB::GetDib(void)",
    "public: void __stdcall WizardNode::SetWizUI(class WizardUI *)",
    "struct HBITMAP__ * __stdcall SpwLoadBitmap(struct HINSTANCE__ *,unsigned int,int,int,unsigned int)",
    "int __stdcall MyDynamicSetWindowText(struct HWND__ *,unsigned int,class ATL::CStringT > >)",
    "public: unsigned short const * __stdcall Wizard_PageDesciption::GetResourceNonLocName(void)",
    "public: virtual int __thiscall LanguageSelectionDialogBase::ProcessWindowMessage(struct HWND__ *,unsigned int,unsigned int,long,long &,unsigned long)",
    "const CDrawItemComposite::`vftable'",
    "public: __thiscall ATL::CStringT > >::CStringT > >(class ATL::CStringT > > const &)",
    "public: struct HWND__ * __stdcall PageContainer::GetPageHwndFromPageIndex(int)",
    "public: virtual struct HWND__ * __stdcall CWndObj::get_hWnd(void)",
    "const CAnimationControl::`vftable'",
    "public: unsigned short const * __stdcall WizardPage::GetResourceStringLoc(void)",
    "const WizardSummary::`vftable'",
    "public: int __thiscall CAnimation::Start(void)",
    "public: virtual __thiscall CCtlText::~CCtlText(void)",
    "protected: virtual long __stdcall CWndObj::OnQuit(unsigned int,long)",
    "public: int __thiscall CScreenText::SetFont(struct HFONT__ *)",
    "public: virtual __thiscall Wizard_PageDesciption::~Wizard_PageDesciption(void)",
    "public: __thiscall WizardCollection::WizardCollection(unsigned int,unsigned int,class Wiz_Node * *)",
    "public: void __thiscall CAttachDataDlg::DestroyDialog(unsigned int,unsigned int,long)",
    "public: int __thiscall ATL::CStringT > >::Insert(int,unsigned short)",
    "int __stdcall SmartSetWindowText(struct HWND__ *,unsigned int,class ATL::CStringT > >)",
    "public: void __thiscall ProtoPageDimensions::PseudoToScreenCoordinate(int &,int &)",
    "protected: virtual long __stdcall CWndObj::OnClose(unsigned int,long)",
    "public: class WizardEx * __thiscall WizardCollection::CreateNodeHelper(unsigned int,class WizardEx *,class WizardUI *)",
    "const CScreenText::`vftable'",
    "public: virtual __thiscall Wiz_Node::~Wiz_Node(void)",
    "private: int __thiscall PageContainer::v_Chk(unsigned long)",
    "private: void __thiscall CResourceModule::v_NotifyObservers(void)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::SpanIncluding(unsigned short const *)const",
    "public: __thiscall WizardHandler::WizardHandler(class WizardHandler const &)",
    "public: static class WizardUI * __stdcall WizardUI::GetWizUI(void)",
    "public: virtual __thiscall WizardNode::~WizardNode(void)",
    "public: virtual void __stdcall CWndObj::add_WexStyle(unsigned long)",
    "public: void __stdcall WizardRoot::DestroyAllStandardButtons(void)",
    "public: virtual int __thiscall WizardRoot::NotifyWizCancel(void)",
    "public: virtual long __stdcall CWndObj::QueryInterface(struct _GUID const &,void * *)",
    "public: void __thiscall CDIB::ConvertColorKeyToAlpha(void)",
    "const CGenericNavWindow::`vftable'",
    "protected: virtual long __stdcall CWndObj::OnCtlColorDlg(unsigned int,long)",
    "public: void __stdcall PageContainer::SetFontSize(int)",
    "const WizardDesciption::`vftable'",
    "protected: virtual long __stdcall AppWindow::OnGetDefID(unsigned int,unsigned int,long)",
    "public: int __thiscall ATL::CStringT > >::Remove(unsigned short)",
    "public: void __thiscall CResourceModuleFactory::Uninit(void)",
    "const CCritSec::`vftable'",
    "protected: virtual long __stdcall CWndObj::OnShowWindow(unsigned int,long)",
    "public: virtual __thiscall CDrawBackground::~CDrawBackground(void)",
    "protected: virtual long __stdcall CWndObj::OnCompareItem(unsigned int,long)",
    "public: int __thiscall ATL::CStringT > >::Delete(int,int)",
    "public: int __thiscall ATL::CStringT > >::LoadStringW(unsigned int)",
    "public: long __thiscall WizardDialogPost::OnCommandBack(unsigned short,unsigned short,struct HWND__ *,int &)",
    "public: struct IResourceModuleEvent * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: virtual class WizardPage * __stdcall Navigator::Next(int,class WizardNode *)",
    "class ATL::CStringT > > __stdcall CStringGetModuleFileName(struct HINSTANCE__ *)",
    "public: class WizardUI & __thiscall WizardUI::operator=(class WizardUI const &)",
    "public: virtual int __thiscall LanguageNeutralSelectionDialogBase::ProcessWindowMessage(struct HWND__ *,unsigned int,unsigned int,long,long &,unsigned long)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(char const *)",
    "public: int __thiscall CDrawItem::Draw(struct HWND__ *)",
    "public: void __thiscall ATL::CSimpleStringT::Append(class ATL::CSimpleStringT const &)",
    "private: unsigned short * __thiscall ATL::CSimpleStringT::PrepareWrite(int)",
    "class ATL::CStringT > > __stdcall CStringGetWindowText(struct HWND__ *)",
    "private: long __thiscall LanguageNeutralSelectionDialogBase::DrawLVItem(struct tagNMLVCUSTOMDRAW *)",
    "public: int __thiscall ATL::CStringT > >::Replace(unsigned short const *,unsigned short const *)",
    "private: __thiscall CCustomButtonEx::CCustomButtonEx(void)",
    "public: static void __stdcall CCustomButtonEx::Destroy(class CCustomButtonEx *)",
    "private: int __thiscall WizardUI::CreateNavWindow(void)",
    "public: int __thiscall PIDStringView::RemoveString(int,int,int)",
    "public: static class CCustomButtonEx * __stdcall CCustomButtonEx::CreateEx(struct HINSTANCE__ *,struct HINSTANCE__ *,struct HWND__ *,unsigned int,struct _Button_Data * const,struct HDC__ *,struct HWND__ *)",
    "private: static int LanguageSelectionDialogBase::bLangUiShown",
    "private: void __thiscall CGenericNavWindow::DestroyDialog(void)",
    "protected: virtual long __stdcall CWndObj::OnDrawItem(unsigned int,long)",
    "public: long __thiscall CGenericNavWindow::OnPaint(unsigned int,unsigned int,long,int &)",
    "public: unsigned short * __thiscall ATL::CStringT > >::AllocSysString(void)const",
    "public: virtual void __stdcall CWndObj::add_WndStyle(unsigned long)",
    "public: int __thiscall CDIB::IsInitialized(void)",
    "public: virtual void __stdcall CWndObj::set_Parent(struct HWND__ *)",
    "public: __thiscall ProtoPageDimensions::ProtoPageDimensions(struct SimpleRect,struct SimpleSize,int,int,struct SimpleSize,struct SimpleSize,float,float)",
    "public: int __stdcall CCustomGraphicEx::Init(struct HWND__ *,unsigned int)",
    "private: int __thiscall NavigationStack::v_ChkStack(void)",
    "private: void __thiscall WizardUI::RepositionAppWindow(void)",
    "protected: virtual long __stdcall AppWindow::OnActivate(unsigned int,long)",
    "public: int __thiscall ProtoPageDimensions::GetBottomMargin(void)",
    "public: class CDrawBackground & __thiscall CDrawBackground::operator=(class CDrawBackground const &)",
    "public: class CDrawItem & __thiscall CDrawItem::operator=(class CDrawItem const &)",
    "protected: virtual long __stdcall CWndObj::OnKeyDown(unsigned int,long)",
    "public: virtual __thiscall WizardCollection::~WizardCollection(void)",
    "public: long __thiscall LanguageSelectionDialogBase::OnInitDialog(unsigned int,unsigned int,long,int &)",
    "const CCtlText::`vftable'",
    "public: void __thiscall CAnimation::SetAllowMirror(int)",
    "public: class WizardNode * __stdcall NavigationStack::Pop(void)",
    "public: unsigned short * __thiscall ATL::CSimpleStringT::GetBufferSetLength(int)",
    "public: void __thiscall CDIB::Unload(void)",
    "const SimpleDialogBase::`vftable'",
    "protected: virtual long __stdcall CWndObj::OnPaint(unsigned int,long)",
    "public: __thiscall CScreenDIB::CScreenDIB(void)",
    "private: int __thiscall WizardUI::IsControlKeys(struct HWND__ *,struct tagMSG *)",
    "public: unsigned int __stdcall WizardEx::GetMaxCount(void)",
    "public: virtual void __stdcall CWndObj::set_Instance(struct HINSTANCE__ *)",
    "public: struct IResourceModuleEvent & __thiscall IResourceModuleEvent::operator=(struct IResourceModuleEvent const &)",
    "public: void __stdcall AppWindow::SetActiveAppWnd(struct HWND__ *)",
    "public: unsigned long __stdcall Wizard_PageDesciption::GetTemplate(void)",
    "public: int __thiscall CDIB::Load(struct HINSTANCE__ *,unsigned int,unsigned long,int)",
    "private: void __thiscall WizardUI::DestroyScrWindow(void)",
    "public: void __stdcall CCtlText::SetText(struct HWND__ *,struct HFONT__ *,unsigned long,unsigned short const *)",
    "private: void __thiscall NavigationStack::v_Clr(unsigned long)",
    "public: void __stdcall CRichEditControl::SetTextMode(unsigned int)",
    "public: __thiscall CResourceModule::~CResourceModule(void)",
    "public: __thiscall SimpleRect::SimpleRect(void)",
    "public: __thiscall ATL::CSimpleStringT::CSimpleStringT(unsigned short const *,int,struct ATL::IAtlStringMgr *)",
    "protected: virtual long __stdcall CWndObj::OnSysCommand(unsigned int,long)",
    "public: class ICreateNavbarWnd & __thiscall ICreateNavbarWnd::operator=(class ICreateNavbarWnd const &)",
    "public: class CHighContrast & __thiscall CHighContrast::operator=(class CHighContrast const &)",
    "protected: virtual long __stdcall CWndObj::OnNCCalcSize(unsigned int,long)",
    "public: int __thiscall ProtoPageDimensions::GetNavBarHeight(void)",
    "public: class CResourceModule & __thiscall CResourceModule::operator=(class CResourceModule const &)",
    "public: struct HWND__ * __thiscall CAttachDataDlg::Hdlg(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char const *,int)",
    "public: virtual int __thiscall CDrawItemComposite::Draw(struct HDC__ *)",
    "private: void __thiscall ATL::CSimpleStringT::PrepareWrite2(int)",
    "public: virtual void __stdcall CWndObj::set_Type(unsigned long)",
    "protected: virtual long __stdcall CWndObj::OnHelp(unsigned int,long)",
    "public: class ICreateProgressWnd & __thiscall ICreateProgressWnd::operator=(class ICreateProgressWnd const &)",
    "private: void __thiscall PageContainer::v_Clr(unsigned long)",
    "public: unsigned int __stdcall WizardEx::GetPageIndex(void)",
    "public: __thiscall CCustomButtonEx::CCustomButtonEx(class CCustomButtonEx const &)",
    "class ATL::CStringT > > __stdcall CStringGetWindowsDirectory(void)",
    "public: class WizardPage * __thiscall WizardUI::GetWizardPageWithPageIndex(int)",
    "public: struct SimpleSize __thiscall ProtoPageDimensions::GetScaledBackgroundBitmapSize(void)",
    "public: virtual __thiscall VariationWizStrategy::~VariationWizStrategy(void)",
    "public: virtual void __thiscall CDrawItemComposite::ComposeOffscreen(struct HWND__ *)",
    "private: static void __stdcall WizardUI::SetWizUI(class WizardUI *)",
    "protected: virtual long __stdcall CWndObj::OnExitSizeMove(unsigned int,long)",
    "protected: virtual long __stdcall AppWindow::OnSetButtons(unsigned int,unsigned int,long)",
    "public: virtual void __stdcall CWndObj::set_ClsStyle(unsigned long)",
    "public: __thiscall Win32Navigator::Win32Navigator(class Win32Navigator const &)",
    "public: __thiscall WizardRoot::WizardRoot(class WizardRoot const &)",
    "public: class ProtoPageList & __thiscall ProtoPageList::operator=(class ProtoPageList const &)",
    "public: virtual __thiscall WizardVariation::~WizardVariation(void)",
    "public: __thiscall SimpleSize::SimpleSize(int,int)",
    "protected: virtual long __stdcall CWndObj::OnNCCreate(unsigned int,long)",
    "public: virtual int __thiscall LanguageNeutralSelectionDialogBase::CanPageBeActivated(enum Direction,int *)",
    "protected: virtual long __stdcall ScrWindow::OnDestroy(unsigned int,long)",
    "public: class CCustomButtonEx * & __thiscall WizardRoot::ButtonFinish(void)",
    "public: unsigned long __stdcall WizardPage::GetTitle(void)",
    "public: __thiscall LanguageSelectionDialogBase::LanguageSelectionDialogBase(void)",
    "public: virtual class WizardPage * __thiscall SummaryWizStrategy::NextPage(int,class WizardNode *)",
    "private: struct ATL::CStringData * __thiscall ATL::CSimpleStringT::GetData(void)const",
    "public: __thiscall CCritSec::CCritSec(void)",
    "public: struct HDC__ * __stdcall AppWindow::GetAppImage(void)",
    "void __stdcall MoveControl(struct HWND__ *,unsigned int,long,long)",
    "public: struct HWND__ * & __thiscall CGenericNavWindow::Hdlg(void)",
    "public: __thiscall NavWindow::NavWindow(class NavWindow const &)",
    "public: class WizardUI * __stdcall WizardNode::GetWizUI(void)",
    "public: class Wizard_PageDesciption & __thiscall Wizard_PageDesciption::operator=(class Wizard_PageDesciption const &)",
    "protected: virtual long __stdcall CWndObj::OnGetText(unsigned int,long)",
    "public: int __stdcall PageContainer::GetCurrentPageIndex(void)",
    "public: __thiscall NavigationStack::NavigationStack(class NavigationStack const &)",
    "public: unsigned long __stdcall CHighContrast::GetTextColor(unsigned long)",
    "private: void __thiscall ATL::CSimpleStringT::SetLength(int)",
    "protected: virtual long __stdcall CWndObj::OnMenuChar(unsigned int,long)",
    "public: virtual void __stdcall CWndObj::set_Class(unsigned short const *)",
    "public: void __stdcall CAnimationControl::SetAllowMirror(int)",
    "const WizardStrategy::`vftable'",
    "public: int __thiscall ATL::CSimpleArray >::Find(unsigned short * const &)const",
    "public: long __thiscall WizardDialogPre::OnEraseBkGnd(unsigned int,unsigned int,long,int &)",
    "protected: static void __cdecl ATL::CSimpleStringT::ThrowMemoryException(void)",
    "public: static class Win32Navigator * __stdcall Win32Navigator::getInstance(void)",
    "public: __thiscall ScrWindow::ScrWindow(class ScrWindow const &)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(class ATL::CSimpleStringT const &)",
    "private: long __thiscall WizardUI::SetLanguageString(unsigned short * *,unsigned short *)",
    "public: class CWndObj & __thiscall CWndObj::operator=(class CWndObj const &)",
    "public: virtual __thiscall WizardStrategy::~WizardStrategy(void)",
    "public: virtual unsigned long __stdcall CWndObj::get_WndID(void)",
    "private: void __thiscall ATL::CSimpleStringT::Reallocate(int)",
    "public: virtual void __thiscall LanguageSelectionDialogBase::OnResourceChanged(int &)",
    "const ScrWindow::`vftable'{for `IWndObj'}",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short,int)",
    "public: void __thiscall CCursor::SetCursorStateForButton(unsigned int)",
    "const CScreenDIB::`vftable'",
    "private: void __thiscall CCtlText::v_Set(unsigned long)",
    "protected: virtual long __stdcall CWndObj::OnPowerBroadcast(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnTimer(unsigned int,long)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char const *,struct ATL::IAtlStringMgr *)",
    "private: void __thiscall WizardUI::DestroyPropertySheet(void)",
    "public: struct SimpleSize __thiscall ProtoPageDimensions::GetAppWindowSize(void)",
    "public: __thiscall Wiz_Node::Wiz_Node(class Wiz_Node const &)",
    "public: virtual void __stdcall Win32Navigator::RequestFinish(void)",
    "public: __thiscall WizardNode::WizardNode(void)",
    "public: __thiscall SimpleRect::SimpleRect(int,int,int,int)",
    "public: void __thiscall ATL::CSimpleStringT::UnlockBuffer(void)",
    "public: __thiscall CCustomGraphicEx::CCustomGraphicEx(void)",
    "public: static int __stdcall LanguageSelectionDialogBase::IsLanguageSelectionUiShown(void)",
    "const WizardCollection::`vftable'",
    "public: void __stdcall WizardEx::SetPageListItem(int,class WizardNode *)",
    "public: __thiscall WizardStrategy::WizardStrategy(class WizardEx *)",
    "public: __thiscall ProtoPageDimensions::ProtoPageDimensions(void)",
    "public: int __thiscall ATL::CStringT > >::Collate(unsigned short const *)const",
    "public: virtual int __thiscall CGenericNavWindow::ProcessWindowMessage(struct HWND__ *,unsigned int,unsigned int,long,long &,unsigned long)",
    "protected: virtual long __stdcall CWndObj::OnParentNotify(unsigned int,long)",
    "public: __thiscall ProtoPageList::ProtoPageList(class WizardDesciption *,unsigned long,unsigned long,unsigned long,int,class ICreateProgressWnd *,int,struct tagSIZE *,class ICreateNavbarWnd *,struct ProtoPageDimensions,unsigned long,unsigned long,int)",
    "public: __thiscall ATL::CSimpleStringT::operator class ATL::CSimpleStringT &(void)",
    "public: virtual void __thiscall SimpleDialogBase::SetActive(int &)",
    "public: long __thiscall LanguageSelectionDialogBase::OnCommandContinue(unsigned short,unsigned short,struct HWND__ *,int &)",
    "public: void __stdcall WizardEx::SetPageList(class WizardNode * *)",
    "public: class CCustomButtonEx * __thiscall WizardHandler::ButtonFinish(void)",
    "protected: virtual long __stdcall CWndObj::OnFontChange(unsigned int,long)",
    "const Navigator::`vftable'",
    "public: struct HWND__ * __thiscall WizardUI::GetAppHWnd(void)",
    "public: long __thiscall CDIB::DibWidth(void)const",
    "private: int __thiscall LanguageSelectionDialogBase::ShowError(struct HINSTANCE__ *,unsigned long)",
    "private: long __thiscall CWndObj::v_DefWndProc(unsigned int,unsigned int,long)",
    "const Wiz_Node::`vftable'",
    "public: struct HINSTANCE__ * __thiscall WizardUI::GetResourceInstanceNonLoc(void)",
    "public: unsigned long __stdcall WizardPage::GetTemplate(void)",
    "public: virtual __thiscall WizardRoot::~WizardRoot(void)",
    "public: virtual int __thiscall CScreenDIB::Draw(struct HDC__ *)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(struct ATL::IAtlStringMgr *)",
    "public: __thiscall CAnimationControl::CAnimationControl(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(unsigned short)",
    "public: long __thiscall LanguageSelectionDialogBase::OnLocaleChange(unsigned short,unsigned short,struct HWND__ *,int &)",
    "public: void __stdcall CRichEditControl::SetTextNoFormat(unsigned short const *)",
    "public: __thiscall WizardEx::WizardEx(class WizardEx const &)",
    "public: void __stdcall AppWindow::GetAppRect(struct tagRECT *)",
    "public: virtual int __thiscall CDrawBackground::Draw(struct HDC__ *)",
    "private: void __thiscall CAnimationControl::v_Clr(unsigned long)",
    "public: struct HWND__ * & __thiscall WizardRoot::Hdlg(void)",
    "int __stdcall ShowReadMoreWnd(struct HINSTANCE__ *,struct HWND__ *,unsigned int,unsigned short const *,unsigned int)",
    "private: void __thiscall WizardUI::RepositionNavWindow(unsigned int,long)",
    "public: __thiscall CAnimationControl::CAnimationControl(class CAnimationControl const &)",
    "const WizardPage::`vftable'",
    "private: unsigned long __thiscall CHighContrast::v_GetHCBkColor(void)",
    "public: static class CCustomButtonEx * __stdcall CCustomButtonEx::CreateIndirect(struct HINSTANCE__ *,struct HINSTANCE__ *,struct HWND__ *,unsigned int,struct _Button_Data * const)",
    "protected: virtual long __stdcall CWndObj::OnQueryEndSession(unsigned int,long)",
    "public: class WizardDialogPre & __thiscall WizardDialogPre::operator=(class WizardDialogPre const &)",
    "public: void __thiscall CWndObj::WMInit(struct HWND__ *)",
    "protected: virtual long __stdcall CWndObj::OnDropFiles(unsigned int,long)",
    "public: long __thiscall CGenericNavWindow::OnCtlColor(unsigned int,unsigned int,long,int &)",
    "private: __thiscall CHighContrast::CHighContrast(void)",
    "public: __thiscall WizardCollection::WizardCollection(class WizardCollection const &)",
    "private: void __thiscall PageContainer::v_CreatePage(int,int)",
    "public: int __thiscall MyString::RemoveChar(int)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(class ATL::CSimpleStringT const &)",
    "public: virtual __thiscall SummaryWizStrategy::~SummaryWizStrategy(void)",
    "public: virtual unsigned long __stdcall CWndObj::AddRef(void)",
    "public: unsigned long __thiscall WizardUI::WaitForMultipleObjectsMessageSafeEx(unsigned long,void * const *,int,unsigned long,int)",
    "public: virtual int __thiscall WizardRoot::NotifyWizNext(void)",
    "private: void __thiscall CCtlText::v_Clr(unsigned long)",
    "public: int __stdcall PageContainer::Reset(int)",
    "public: int __thiscall ATL::CSimpleArray >::GetSize(void)const",
    "public: int __thiscall WizardUI::StartUI(class ProtoPageList const *)",
    "public: void __stdcall PageContainer::SetCurrentPage(int)",
    "private: int __thiscall WizardUI::InstallFont(struct HINSTANCE__ *)",
    "protected: virtual long __stdcall CWndObj::OnCtlColorEdit(unsigned int,long)",
    "public: void __thiscall CDrawItem::SetHdcDest(struct HDC__ *)",
    "public: int __thiscall ATL::CStringT > >::GetEnvironmentVariableW(unsigned short const *)",
    "public: static long __stdcall CAttachDataDlg::WindowProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "private: int __thiscall WizardUI::IsFunctionKeys(struct HWND__ *,struct tagMSG *)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(char const *)",
    "public: void __stdcall CRichEditControl::SetBackGroundColor(unsigned long)",
    "private: static void __stdcall WizardUI::DeleteBackground(void)",
    "public: void __thiscall WizardUI::SleepMessageSafe(unsigned long)",
    "void __stdcall ShowReadMoreWndHtmlFromResource(struct HINSTANCE__ *,struct HWND__ *,unsigned int,unsigned short const *,unsigned short const *,unsigned int)",
    "public: virtual class WizardPage * __stdcall WizardEx::Next(int,class WizardNode *)",
    "private: int __thiscall CAnimationControl::v_Chk(unsigned long)",
    "protected: virtual long __stdcall CWndObj::OnActivate(unsigned int,long)",
    "public: int & __thiscall WizardRoot::CommandHandled(void)",
    "public: struct HBRUSH__ * __stdcall CHighContrast::GetBkBrush(struct HBRUSH__ *)",
    "public: __thiscall CScreenText::CScreenText(void)",
    "public: __thiscall ATL::CSimpleStringT::CSimpleStringT(unsigned short const *,struct ATL::IAtlStringMgr *)",
    "private: void __thiscall WizardUI::CreateScrWindow(void)",
    "public: void __thiscall WizardUI::EnableInput(int)",
    "protected: virtual long __stdcall ScrWindow::OnActivate(unsigned int,long)",
    "public: class BranchWizStrategy & __thiscall BranchWizStrategy::operator=(class BranchWizStrategy const &)",
    "public: int __thiscall MyString::InsertChar(int,unsigned short)",
    "public: virtual void __stdcall CWndObj::set_Position(struct tagPOINT *)",
    "public: __thiscall ProtoPageList::ProtoPageList(void)",
    "public: unsigned short * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: void __stdcall AppWindow::GetWizardRect(struct tagRECT *)",
    "private: void __thiscall LanguageSelectionDialogBase::ReadSelectedKeyboardType(void)",
    "public: unsigned short * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "private: void __thiscall CDIB::MakeFullyOpaque(void)",
    "public: class CAttachDataDlg & __thiscall CAttachDataDlg::operator=(class CAttachDataDlg const &)",
    "public: __thiscall WizardDesciption::WizardDesciption(unsigned int,class Wiz_Node * *)",
    "public: class LanguageSelectionDialogBase & __thiscall LanguageSelectionDialogBase::operator=(class LanguageSelectionDialogBase const &)",
    "public: long __thiscall WizardDialogPost::OnCommandCancel(unsigned short,unsigned short,struct HWND__ *,int &)",
    "public: void __thiscall CCustomButtonEx::SetBackgroundHDC(struct HDC__ *)",
    "public: __thiscall CScreenText::CScreenText(class CScreenText const &)",
    "public: static class CCustomButtonEx * __stdcall CCustomButtonEx::Create(struct HINSTANCE__ *,struct HINSTANCE__ *,struct HWND__ *,unsigned int)",
    "private: class ATL::CStringT > > __thiscall PIDStringView::v_MakeValidString(unsigned short const *)",
    "protected: virtual long __stdcall CWndObj::OnChar(unsigned int,long)",
    "public: __thiscall PIDStringView::PIDStringView(void)",
    "public: struct LOCALE * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: virtual class WizardNode * __thiscall WizardVariation::CreateNode(unsigned int,class WizardEx *,class WizardUI *)",
    "public: class CCritSec & __thiscall CCritSec::operator=(class CCritSec const &)",
    "public: void __thiscall ATL::CSimpleStringT::SetAt(int,unsigned short)",
    "public: struct LOCALE * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: __thiscall ATL::CStringT > >::CStringT > >(struct tagVARIANT const &,struct ATL::IAtlStringMgr *)",
    "public: virtual void __stdcall Win32Navigator::RequestCancel(void)",
    "protected: virtual long __stdcall CWndObj::OnApp(unsigned int,unsigned int,long)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator=(class ATL::CSimpleStringT const &)",
    "protected: virtual long __stdcall AppWindow::OnGetButtons(unsigned int,unsigned int,long)",
    "public: __thiscall ATL::CSimpleStringT::operator unsigned short const *(void)const",
    "public: __thiscall CResourceModule::CResourceModule(struct HINSTANCE__ *)",
    "public: struct SimpleRect & __thiscall SimpleRect::operator=(struct SimpleRect const &)",
    "const NavigationStack::`vftable'",
    "public: virtual void __stdcall Win32Navigator::DoGoToPageIndex(int)",
    "private: void __thiscall CGenericNavWindow::InitSurface(void)",
    "public: static void __stdcall Navigator::FreeInstance(void)",
    "public: static int __stdcall CResourceModule::ChangeUiLanguage(unsigned short const *)",
    "void __stdcall SetDlgItemTextFromResID(struct HWND__ *,unsigned int,struct HINSTANCE__ *,unsigned int)",
    "const CHighContrast::`vftable'",
    "const WizardVariation::`vftable'",
    "public: long __thiscall WizardUI::SetUserSelectedLocale(unsigned short *)",
    "public: unsigned short * __thiscall WizardUI::GetUserSelectedUILanguage(void)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Right(int)const",
    "public: int __thiscall CResourceModule::ResetLanguage(void)",
    "public: __thiscall CWndObj::CWndObj(void)",
    "public: __thiscall LanguageNeutralSelectionDialogBase::LanguageNeutralSelectionDialogBase(void)",
    "public: class NavigationStack * __thiscall WizardUI::Stack(void)",
    "public: virtual struct HICON__ * __stdcall CWndObj::get_Cursor(void)",
    "public: __thiscall ATL::CStringT > >::operator class ATL::CSimpleStringT &(void)",
    "public: class WizardNode * * __stdcall WizardEx::GetPageList(void)",
    "public: virtual struct tagSIZE * __stdcall CWndObj::get_Size(void)",
    "public: __thiscall ProtoPageList::ProtoPageList(class ProtoPageList const &)",
    "public: class Wiz_Node & __thiscall Wiz_Node::operator=(class Wiz_Node const &)",
    "public: virtual int __thiscall WizardRoot::NotifyWizFinish(void)",
    "public: __thiscall WizardUI::WizardUI(void)",
    "public: class CCtlText & __thiscall CCtlText::operator=(class CCtlText const &)",
    "public: void __thiscall ATL::CStringT > >::FormatMessageV(unsigned short const *,char * *)",
    "public: int __thiscall CDIB::Draw(struct HDC__ *,int,int)",
    "public: void __thiscall ATL::CStringT > >::AppendFormatV(unsigned short const *,char *)",
    "protected: virtual long __stdcall CWndObj::OnVScrollClipboard(unsigned int,long)",
    "private: void __thiscall WizardUI::CreateAppWindow(void)",
    "protected: virtual long __stdcall CWndObj::OnSetText(unsigned int,long)",
    "public: __thiscall ATL::CSimpleStringT::~CSimpleStringT(void)",
    "public: unsigned long __stdcall WizardPage::GetButtons(void)",
    "public: int __thiscall CCursor::EnteringTrackedWnd(struct HWND__ *)",
    "public: virtual unsigned short const * __stdcall CWndObj::get_Title(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(void)",
    "private: void __thiscall WizardUI::DestroyNavWindow(void)",
    "public: struct LANGUAGE * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,struct LOCALE * const &)",
    "public: __thiscall Wizard_PageDesciption::Wizard_PageDesciption(unsigned long,unsigned short const *,unsigned short const *,unsigned long,class WizardRoot * (__stdcall*)(class WizardPage *),unsigned long)",
    "public: class CScreenDIB & __thiscall CScreenDIB::operator=(class CScreenDIB const &)",
    "public: int __thiscall ProtoPageDimensions::Init(void)",
    "private: static unsigned short * CResourceModule::s_szUiLanguage",
    "public: __thiscall ChoiceWizStrategy::ChoiceWizStrategy(class WizardEx *)",
    "public: virtual __thiscall CCustomGraphicEx::~CCustomGraphicEx(void)",
    "public: void __thiscall CDIB::SetAllowMirror(int)",
    "public: void __thiscall WizardUI::SetScrWindow(class ScrWindow *)",
    "public: int __thiscall CDIB::Resize(long,long)",
    "public: __thiscall WizardStrategy::WizardStrategy(class WizardStrategy const &)",
    "public: unsigned short * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: unsigned short * __thiscall WizardUI::GetUserSelectedHideOOBELang(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimLeft(unsigned short const *)",
    "protected: virtual long __stdcall ScrWindow::OnPaint(unsigned int,long)",
    "public: virtual unsigned long __stdcall CWndObj::get_WndStyle(void)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,struct IResourceModuleEvent * const &)",
    "public: __thiscall ATL::CSimpleArray >::CSimpleArray >(void)",
    "public: virtual void __thiscall WizardHandler::InitPage(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimLeft(void)",
    "public: virtual int __thiscall CScreenText::Draw(struct HDC__ *)",
    "private: void __thiscall CGenericNavWindow::InitDialog(struct HWND__ *)",
    "public: __thiscall CAnimation::CAnimation(void)",
    "public: virtual __thiscall ICreateNavbarWnd::~ICreateNavbarWnd(void)",
    "public: __thiscall MyString::MyString(void)",
    "public: class WizardEx * __stdcall WizardNode::GetParent(void)",
    "private: void __thiscall AppWindow::v_InitSurface(unsigned int)",
    "public: bool __thiscall ATL::CSimpleStringT::IsEmpty(void)const",
    "public: int __thiscall ATL::CSimpleArray >::Find(struct LANGUAGE * const &)const",
    "public: virtual __thiscall SimpleWizStrategy::~SimpleWizStrategy(void)",
    "protected: virtual long __stdcall CWndObj::OnInitDialog(unsigned int,long)",
    "public: __thiscall IResourceModuleEvent::IResourceModuleEvent(void)",
    "public: unsigned int __stdcall WizardNode::GetType(void)",
    "public: virtual unsigned long __stdcall CWndObj::get_Alpha(void)",
    "public: int __thiscall CDrawBackground::Load(struct HWND__ *,struct HDC__ *,struct HWND__ *)",
    "protected: virtual long __stdcall CWndObj::OnLButtonUp(unsigned int,long)",
    "public: virtual void __thiscall CScreenText::ComposeOffscreen(struct HWND__ *)",
    "public: class MyString & __thiscall MyString::operator=(class MyString const &)",
    "public: int __thiscall WizardUI::WaitForUIEnd(void)",
    "protected: virtual long __stdcall CWndObj::OnCtlColorMsgbox(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnMoving(unsigned int,long)",
    "public: __thiscall CDrawBackground::CDrawBackground(class CDrawBackground const &)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::Trim(unsigned short)",
    "public: void __stdcall WizardNode::SetIndex(unsigned int)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short const *,int)",
    "public: class CScreenText & __thiscall CScreenText::operator=(class CScreenText const &)",
    "public: struct KEYBOARD * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: virtual void __stdcall CWndObj::set_WndID(unsigned long)",
    "public: class CCustomButtonEx & __thiscall CCustomButtonEx::operator=(class CCustomButtonEx const &)",
    "const CAnimation::`vftable'",
    "public: __thiscall SimpleWizStrategy::SimpleWizStrategy(class SimpleWizStrategy const &)",
    "public: __thiscall WizardSummary::WizardSummary(unsigned int,class Wiz_Node * *)",
    "public: __thiscall VariationWizStrategy::VariationWizStrategy(class WizardEx *,class ATL::CSimpleMap > const &,int)",
    "protected: virtual long __stdcall CWndObj::OnChangeCBChain(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnEndSession(unsigned int,long)",
    "public: class SimpleDialogBase & __thiscall SimpleDialogBase::operator=(class SimpleDialogBase const &)",
    "const AppWindow::`vftable'{for `IWndObj'}",
    "public: class WizardCollection & __thiscall WizardCollection::operator=(class WizardCollection const &)",
    "public: int __thiscall CDIB::LoadScaledFromOther(class CDIB *,long,long,int)",
    "public: __thiscall CAttachDataDlg::CAttachDataDlg(class CAttachDataDlg const &)",
    "public: virtual unsigned long __stdcall CWndObj::get_TextColor(void)",
    "public: unsigned long __thiscall WizardUI::WaitForMultipleObjectsMessageSafe(unsigned long,void * const *,int,unsigned long)",
    "protected: virtual long __stdcall CWndObj::OnRButtonDown(unsigned int,long)",
    "public: unsigned short * __thiscall WizardUI::GetUserSelectedLocale(void)",
    "protected: virtual long __stdcall AppWindow::OnSetBitmap(unsigned int,unsigned int,long)",
    "protected: virtual long __stdcall AppWindow::OnCommand(unsigned int,long)",
    "public: class CCustomButtonEx * __stdcall WizardRoot::InitStandardButton(unsigned int)",
    "private: void __thiscall CWndObj::v_Clr(unsigned long)",
    "protected: virtual long __stdcall CWndObj::OnSetCursor(unsigned int,long)",
    "protected: virtual long __stdcall ScrWindow::OnRegistered(unsigned int,unsigned int,long)",
    "public: virtual int __thiscall CAnimation::Draw(struct HDC__ *)",
    "public: virtual void __stdcall CWndObj::set_WexStyle(unsigned long)",
    "protected: virtual long __stdcall CWndObj::OnDestroyClipboard(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnGetTextLength(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnMeasureItem(unsigned int,long)",
    "public: __thiscall CDrawBackground::CDrawBackground(void)",
    "public: unsigned short * __thiscall ATL::CSimpleStringT::LockBuffer(void)",
    "public: virtual void __stdcall CWndObj::Hide(void)",
    "public: void __stdcall WizardEx::SetMaxCount(unsigned int)",
    "public: __thiscall SimpleDialogBase::SimpleDialogBase(class SimpleDialogBase const &)",
    "public: __thiscall Wiz_Node::Wiz_Node(unsigned int)",
    "private: int __thiscall WizardUI::CreateProgressWindow(void)",
    "public: virtual void __thiscall WizardHandler::KillActive(int &)",
    "public: unsigned short __thiscall ATL::CSimpleStringT::GetAt(int)const",
    "protected: virtual long __stdcall CWndObj::OnHScroll(unsigned int,long)",
    "public: void __thiscall ATL::CStringT > >::CharToOemA(void)",
    "public: int __thiscall WizardUI::Initialize(class CResourceModule *,class CResourceModule *)",
    "public: void __stdcall PageContainer::TearDown(void)",
    "protected: virtual long __stdcall CWndObj::OnNotify(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnNCPaint(unsigned int,long)",
    "public: void __thiscall ATL::CSimpleArray >::RemoveAll(void)",
    "protected: virtual long __stdcall CWndObj::OnRenderAllFormats(unsigned int,long)",
    "void __stdcall ShowReadMoreWndHtml(struct HINSTANCE__ *,struct HWND__ *,unsigned int,unsigned short const *,unsigned int)",
    "public: unsigned int __thiscall Wiz_Node::GetWizNodeType(void)",
    "public: class WizardNode & __thiscall WizardNode::operator=(class WizardNode const &)",
    "public: virtual class WizardPage * __thiscall SimpleWizStrategy::NextPage(int,class WizardNode *)",
    "public: class ScrWindow & __thiscall ScrWindow::operator=(class ScrWindow const &)",
    "public: void __thiscall CCursor::ClearCursorWait(void)",
    "public: int __thiscall WizardHandler::CanPageBeActivatedWrapper(enum Direction,int *)",
    "public: __thiscall Wizard_PageDesciption::Wizard_PageDesciption(class Wizard_PageDesciption const &)",
    "public: struct ProgressCreateStruct & __thiscall ProgressCreateStruct::operator=(struct ProgressCreateStruct const &)",
    "protected: virtual long __stdcall CWndObj::OnCancelMode(unsigned int,long)",
    "const PIDStringView::`vftable'",
    "public: virtual void __stdcall CWndObj::set_Icon(struct HICON__ *)",
    "private: void __thiscall ATL::CSimpleStringT::Attach(struct ATL::CStringData *)",
    "public: class WizardDesciption & __thiscall WizardDesciption::operator=(class WizardDesciption const &)",
    "int __stdcall dlgProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: void __thiscall ATL::CSimpleStringT::SetString(unsigned short const *,int)",
    "public: static void __cdecl ATL::CStringT > >::Construct(class ATL::CStringT > > *)",
    "public: void __thiscall CAnimation::Pulse(void)",
    "public: void __thiscall WizardHandler::Init(class WizardRoot *)",
    "public: __thiscall WizardDesciption::WizardDesciption(class WizardDesciption const &)",
    "private: void __thiscall WizardUI::DestroyProgressWindow(void)",
    "const ICreateProgressWnd::`vftable'",
    "private: static struct HBITMAP__ * WizardUI::s_hbmpScreenBackgroundOld",
    "protected: virtual long __stdcall CWndObj::OnWindowPosChanging(unsigned int,long)",
    "public: __thiscall ATL::CSimpleStringT::CSimpleStringT(struct ATL::IAtlStringMgr *)",
    "public: unsigned short * __thiscall ATL::CSimpleStringT::GetBuffer(void)",
    "public: virtual int __thiscall WizardHandler::NotifyWizCancel(int &)",
    "public: void __stdcall WizardPage::SetData(void *)",
    "public: virtual class WizardPage * __stdcall Navigator::Next(class WizardNode *)",
    "public: long __thiscall CGenericNavWindow::OnSetBitmap(unsigned int,unsigned int,long,int &)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,unsigned short * const &)",
    "private: static class CHighContrast * CHighContrast::m_hcInstance",
    "public: class WizardRoot * __stdcall WizardPage::GetDialog(void)",
    "public: int __thiscall ATL::CSimpleArray >::Add(struct IResourceModuleEvent * const &)",
    "public: int __thiscall MyString::RemoveString(int,int)",
    "private: class ATL::CStringT > > __thiscall LanguageSelectionDialogBase::GetSelectedLanguage(void)",
    "public: long __thiscall CGenericNavWindow::OnCancel(unsigned short,unsigned short,struct HWND__ *,int &)",
    "public: void __thiscall CDrawItem::SetHwndDest(struct HWND__ *)",
    "private: __thiscall Navigator::Navigator(void)",
    "private: static class Win32Navigator * Win32Navigator::m_instance",
    "public: int __thiscall ATL::CStringT > >::LoadStringW(struct HINSTANCE__ *,unsigned int,unsigned short)",
    "protected: virtual long __stdcall CWndObj::OnPaintClipboard(unsigned int,long)",
    "class ATL::CStringT > > __stdcall CStringExpandEnvironmentStrings(class ATL::CStringT > >)",
    "protected: virtual long __stdcall CWndObj::OnAskCBFormatName(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnDisplayChange(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnWindowPosChanged(unsigned int,long)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Mid(int)const",
    "public: unsigned long __stdcall CHighContrast::GetBkColor(unsigned long)",
    "public: virtual int __thiscall SimpleDialogBase::ProcessWindowMessage(struct HWND__ *,unsigned int,unsigned int,long,long &,unsigned long)",
    "public: struct KEYBOARD * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: virtual void __stdcall CWndObj::set_Template(unsigned long)",
    "public: void * __thiscall WizardUI::GetUiMutex(void)",
    "public: __thiscall CDIB::~CDIB(void)",
    "public: void __thiscall CDIB::SetTransparentColor(unsigned long)",
    "const CDrawItem::`vftable'",
    "public: virtual int __thiscall LanguageSelectionDialogBase::ProcessLanguageSelection(int &)",
    "public: void __thiscall ATL::CSimpleStringT::Truncate(int)",
    "long __stdcall TextFitsInWindow(struct HWND__ *,class ATL::CStringT > >)",
    "public: unsigned int __stdcall WizardNode::GetIndex(void)",
    "public: virtual __thiscall CScreenDIB::~CScreenDIB(void)",
    "public: void __thiscall ATL::CSimpleStringT::FreeExtra(void)",
    "private: void __thiscall WizardUI::DestroyAppWindow(void)",
    "public: int __thiscall CDrawItem::Refresh(void)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,struct KEYBOARD * const &)",
    "public: struct ProtoPageDimensions & __thiscall ProtoPageDimensions::operator=(struct ProtoPageDimensions const &)",
    "public: virtual __thiscall CAnimationControl::~CAnimationControl(void)",
    "public: long __thiscall CGenericNavWindow::OnInitDialog(unsigned int,unsigned int,long,int &)",
    "private: unsigned int __thiscall LanguageSelectionDialogBase::PopulateLayeredDriverList(void)",
    "public: virtual class WizardNode * __thiscall WizardSummary::CreateNode(unsigned int,class WizardEx *,class WizardUI *)",
    "protected: virtual long __stdcall CWndObj::OnHotKey(unsigned int,long)",
    "public: int __thiscall ATL::CStringT > >::Insert(int,unsigned short const *)",
    "public: virtual void __stdcall CWndObj::Size(struct tagSIZE *)",
    "public: struct LANGUAGE * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: virtual void __stdcall CWndObj::set_WndStyle(unsigned long)",
    "public: struct HBITMAP__ * __stdcall CHighContrast::LoadBitmapW(struct HINSTANCE__ *,unsigned int,int,int,unsigned int)",
    "public: virtual __thiscall WizardPage::~WizardPage(void)",
    "private: static void __stdcall WizardUI::ResetWizUI(void)",
    "protected: virtual long __stdcall CWndObj::OnCreate(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnSysColorChange(unsigned int,long)",
    "public: __thiscall CCursor::CCursor(class CCursor const &)",
    "public: virtual __thiscall WizardEx::~WizardEx(void)",
    "protected: virtual long __stdcall CWndObj::OnCtlColorStatic(unsigned int,long)",
    "public: int __thiscall PIDStringView::ReplaceString(int,int,unsigned short const *)",
    "public: struct LANGUAGE * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "private: void __thiscall CDrawBackground::v_Unload(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(struct tagVARIANT const &)",
    "public: int __thiscall ATL::CStringT > >::Replace(unsigned short,unsigned short)",
    "public: virtual __thiscall ScrWindow::~ScrWindow(void)",
    "private: void __thiscall LanguageSelectionDialogBase::ReadSelectedLayeredDriver(void)",
    "public: struct HWND__ * __thiscall WizardUI::GetScrHWnd(void)",
    "public: struct HWND__ * __stdcall PageContainer::GetContainerHwnd(void)",
    "protected: virtual long __stdcall ScrWindow::OnCreate(unsigned int,long)",
    "private: void __thiscall CWndObj::v_ClrProps(void)",
    "public: __thiscall CDIB::CDIB(void)",
    "public: int __stdcall PageContainer::GetMaxPageIndex(void)",
    "public: __thiscall WizardBranch::WizardBranch(class WizardBranch const &)",
    "public: class CCustomButtonEx * __thiscall WizardHandler::ButtonContinue(void)",
    "void __stdcall SPWE_CloseCurrentMessageBox(void)",
    "const WizardDialogPre::`vftable'",
    "public: int __stdcall CHighContrast::Initialize(void)",
    "const CCursor::`vftable'",
    "public: int __thiscall WizardUI::AddPage(class WizardPage *)",
    "public: virtual void __stdcall CWndObj::set_Menu(struct HMENU__ *)",
    "protected: virtual long __stdcall CWndObj::OnDeadChar(unsigned int,long)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Tokenize(unsigned short const *,int &)const",
    "public: void __stdcall AppWindow::LoadBackground(void)",
    "public: void __stdcall PageContainer::ReinstantiatePages(void)",
    "public: class WizardNode * __stdcall NavigationStack::GetTop(void)",
    "protected: virtual long __stdcall ScrWindow::OnSetCursor(unsigned int,long)",
    "const WizardEx::`vftable'{for `WizardNode'}",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short const *)",
    "public: __thiscall SummaryWizStrategy::SummaryWizStrategy(class WizardEx *)",
    "public: __thiscall SimpleDialogBase::SimpleDialogBase(void)",
    "public: class AppWindow & __thiscall AppWindow::operator=(class AppWindow const &)",
    "class ATL::CStringT > > __stdcall CStringGetPrivateProfileString(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "protected: virtual long __stdcall CWndObj::OnRButtonDblClk(unsigned int,long)",
    "public: __thiscall LanguageNeutralSelectionDialogBase::~LanguageNeutralSelectionDialogBase(void)",
    "public: __thiscall WizardNode::WizardNode(unsigned int,unsigned int,class WizardEx *,class WizardUI *)",
    "public: int __thiscall ATL::CSimpleArray >::Add(struct LOCALE * const &)",
    "public: unsigned short * __thiscall WizardUI::GetUserSelectedLDId(void)",
    "public: int __stdcall CAnimationControl::Init(struct HWND__ *,unsigned int,struct HINSTANCE__ *,unsigned int,unsigned long,int,int)",
    "public: class WizardRoot * __thiscall WizardHandler::GetRoot(void)",
    "public: void __cdecl ATL::CStringT > >::AppendFormat(unsigned short const *,...)",
    "public: struct SimpleRect __thiscall ProtoPageDimensions::GetAppWindowInBackgroundBitmap(void)",
    "public: static class CCustomButtonEx * __stdcall CCustomButtonEx::Create(struct HINSTANCE__ *,struct HINSTANCE__ *,struct HWND__ *,unsigned int,struct HDC__ *,struct HWND__ *)",
    "public: __thiscall AppWindow::AppWindow(class WizardUI *,unsigned int)",
    "public: int __thiscall ATL::CSimpleArray >::Add(struct LANGUAGE * const &)",
    "public: static void __stdcall Navigator::setInstance(struct INavigator *)",
    "protected: virtual void __thiscall CGenericNavWindow::InitButtons(void)",
    "public: int __thiscall CDIB::DrawOpaque(struct HDC__ *,int,int)",
    "public: class WizardStrategy & __thiscall WizardStrategy::operator=(class WizardStrategy const &)",
    "public: void __thiscall ATL::CSimpleStringT::Empty(void)",
    "public: int __thiscall CScreenText::SetColor(unsigned long)",
    "private: void __thiscall Win32Navigator::v_DoPageChange(enum Direction,class WizardPage *)",
    "private: void __thiscall LanguageSelectionDialogBase::ReadSelectedLanguage(void)",
    "public: unsigned short * __thiscall ATL::CSimpleStringT::GetBuffer(int)",
    "public: void __thiscall MyString::ClearString(void)",
    "public: __thiscall WizardDialogPost::WizardDialogPost(void)",
    "public: class CDIB & __thiscall CDIB::operator=(class CDIB const &)",
    "public: class ATL::CSimpleArray > & __thiscall ATL::CSimpleArray >::operator=(class ATL::CSimpleArray > const &)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(struct tagVARIANT const &)",
    "public: unsigned long __stdcall Wizard_PageDesciption::GetButtons(void)",
    "public: virtual void __stdcall Win32Navigator::RequestGoNext(void)",
    "public: int __thiscall PIDStringView::InsertString(int,unsigned short const *)",
    "private: void __thiscall NavigationStack::v_Set(unsigned long)",
    "protected: virtual long __stdcall CWndObj::OnContextMenu(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnPower(unsigned int,long)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned char const *)",
    "private: static void __stdcall CDIB::BlendNormal32(class CDIB *,class CDIB *)",
    "public: __thiscall IResourceModuleEvent::IResourceModuleEvent(struct IResourceModuleEvent const &)",
    "public: int __thiscall ATL::CSimpleStringT::GetLength(void)const",
    "public: static struct HWND__ * __stdcall WizardUI::HwndBackground(void)",
    "public: struct HINSTANCE__ * __stdcall WizardPage::GetResourceInstanceLoc(void)",
    "public: virtual void __thiscall WizardRoot::KillActive(void)",
    "public: static void __stdcall Win32Navigator::FreeInstance(void)",
    "public: virtual __thiscall PageContainer::~PageContainer(void)",
    "public: virtual struct HWND__ * __stdcall CWndObj::get_Parent(void)",
    "protected: virtual long __stdcall CWndObj::OnRegistered(unsigned int,unsigned int,long)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::MakeUpper(void)",
    "public: int __thiscall CResourceModule::UnregisterObserver(struct IResourceModuleEvent *)",
    "public: virtual int __thiscall WizardDialogPost::ProcessWindowMessage(struct HWND__ *,unsigned int,unsigned int,long,long &,unsigned long)",
    "private: virtual __thiscall CCursor::~CCursor(void)",
    "public: class AppWindow * __thiscall WizardUI::GetAppWindow(void)",
    "protected: virtual long __stdcall CWndObj::OnSizeClipboard(unsigned int,long)",
    "public: virtual __thiscall AppWindow::~AppWindow(void)",
    "public: class PageContainer * __thiscall WizardUI::GetPageContainer(void)",
    "private: int __thiscall CWndObj::v_Chk(unsigned long)",
    "public: virtual void __stdcall CWndObj::Move(struct tagPOINT *)",
    "public: long __thiscall CGenericNavWindow::OnSetButtons(unsigned int,unsigned int,long,int &)",
    "int __stdcall MessageBoxFromMessageWithTimeout(struct HINSTANCE__ *,struct HWND__ *,unsigned int,unsigned int,unsigned int,unsigned int,int)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(unsigned char)",
    "private: static int Navigator::bWeAllocatedInstance",
    "public: int __stdcall CCustomGraphicEx::SetGraphic(class CDrawItem *)",
    "public: virtual __thiscall WizardBranch::~WizardBranch(void)",
    "public: __thiscall PIDStringView::PIDStringView(class PIDStringView const &)",
    "protected: virtual long __stdcall CWndObj::OnEnterMenuLoop(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnMove(unsigned int,long)",
    "private: class ATL::CStringT > > __thiscall LanguageSelectionDialogBase::GetSelectedLocale(void)",
    "private: virtual __thiscall CCustomButtonEx::~CCustomButtonEx(void)",
    "private: int __thiscall WizardUI::IsCancelRequest(struct tagMSG *)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(class ATL::CStringT > > const &)",
    "int __stdcall MessageBoxFromMessage(struct HINSTANCE__ *,struct HWND__ *,unsigned int,unsigned int,unsigned int)",
    "protected: virtual long __stdcall ScrWindow::OnWmxClose(unsigned int,unsigned int,long)",
    "const CDrawBackground::`vftable'",
    "public: __thiscall WizardDialogPost::WizardDialogPost(class WizardDialogPost const &)",
    "public: virtual __thiscall BranchWizStrategy::~BranchWizStrategy(void)",
    "public: virtual int __thiscall WizardHandler::NotifyWizFinish(int &)",
    "protected: virtual long __stdcall AppWindow::OnSetCursor(unsigned int,long)",
    "public: long __thiscall WizardDialogPre::OnDestroy(unsigned int,unsigned int,long,int &)",
    "public: int __thiscall ATL::CSimpleArray >::Add(struct KEYBOARD * const &)",
    "public: void __thiscall ATL::CSimpleStringT::Append(unsigned short const *,int)",
    "protected: virtual long __stdcall CWndObj::OnUser(unsigned int,unsigned int,long)",
    "public: virtual int __stdcall CWndObj::Init(struct IWndObj *)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimLeft(unsigned short)",
    "public: void __thiscall CCursor::SetCursorState(unsigned int)",
    "const Wizard_PageDesciption::`vftable'",
    "private: void __thiscall CWndObj::v_Set(unsigned long)",
    "public: void __thiscall CWndObj::WMFree(void)",
    "private: static long (__stdcall* LanguageNeutralSelectionDialogBase::s_OldLangNeutralLVProc)(struct HWND__ *,unsigned int,unsigned int,long)",
    "private: int __thiscall CDIB::DrawAlphaBlended(struct HDC__ *,int,int,struct tagRECT)",
    "private: static class CCursor * CCursor::s_pCursor",
    "public: unsigned long __thiscall WizardUI::WaitForSingleObjectMessageSafe(void *,unsigned long)",
    "public: class CDIB * __stdcall AppWindow::GetAppDib(void)",
    "public: long __thiscall WizardDialogPost::OnCtlColorStatic(unsigned int,unsigned int,long,int &)",
    "public: class CCustomGraphicEx & __thiscall CCustomGraphicEx::operator=(class CCustomGraphicEx const &)",
    "protected: virtual long __stdcall AppWindow::OnCreate(unsigned int,long)",
    "protected: virtual long __stdcall ScrWindow::OnCommand(unsigned int,long)",
    "public: class WizardPage * __thiscall WizardHandler::PageData(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char const *,int,struct ATL::IAtlStringMgr *)",
    "public: void __thiscall WizardUI::SetAppHWnd(struct HWND__ *)",
    "public: int __thiscall ProtoPageDimensions::IsStandardSizing(void)",
    "public: static void __cdecl ATL::CSimpleStringT::CopyCharsOverlapped(unsigned short *,unsigned int,unsigned short const *,int)",
    "protected: virtual long __stdcall CWndObj::OnGetMinMaxInfo(unsigned int,long)",
    "public: struct HINSTANCE__ * __stdcall WizardPage::GetResourceInstanceNonLoc(void)",
    "public: __thiscall CResourceModule::CResourceModule(unsigned short const *)",
    "public: class WizardPage * __stdcall WizardEx::GetFirstPage(void)",
    "const BranchWizStrategy::`vftable'",
    "public: int __thiscall CDIB::DrawOpaque(struct HDC__ *,int,int,struct tagRECT)",
    "public: struct HWND__ * __stdcall PageContainer::GetCurrentPageHwnd(void)",
    "const LanguageSelectionDialogBase::`vftable'",
    "protected: virtual long __stdcall AppWindow::OnDestroy(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnEnterIdle(unsigned int,long)",
    "private: virtual void __thiscall WizardHandler::FirstVisit(void)",
    "protected: virtual long __stdcall CWndObj::OnDevmodeChange(unsigned int,long)",
    "protected: virtual long __stdcall ScrWindow::OnEraseBkGnd(unsigned int,long)",
    "public: __thiscall LanguageSelectionDialogBase::LanguageSelectionDialogBase(class LanguageSelectionDialogBase const &)",
    "public: virtual struct HICON__ * __stdcall CWndObj::get_Icon(void)",
    "public: void __stdcall WizardNode::SetPageIndex(unsigned int)",
    "public: void __thiscall ATL::CStringT > >::OemToCharA(void)",
    "private: void __thiscall AppWindow::v_SetWindowTitle(void)",
    "public: long __thiscall SimpleDialogBase::OnCtlColorStatic(unsigned int,unsigned int,long,int &)",
    "public: static class CCustomButtonEx * __stdcall CCustomButtonEx::Create(struct HINSTANCE__ *,struct HINSTANCE__ *,struct HWND__ *,struct HDC__ *,struct HWND__ *)",
    "public: static void __stdcall CHighContrast::FreeInstance(void)",
    "public: void __stdcall PageContainer::ShowWindow(int)",
    "private: static long CCursor::s_lInitialized",
    "public: void __stdcall WizardPage::Initialize(unsigned long,unsigned long,unsigned long,class WizardRoot *,unsigned short const *,unsigned short const *)",
    "protected: virtual long __stdcall CWndObj::OnDrawClipboard(unsigned int,long)",
    "public: __thiscall PageContainer::PageContainer(class PageContainer const &)",
    "public: virtual void __thiscall WizardDialogPre::SetActive(int &)",
    "public: virtual int __stdcall WizardPage::Reset(void)",
    "public: void __thiscall CCustomButtonEx::ReloadCaptions(struct HINSTANCE__ *)",
    "void __stdcall ShowMigrationReport(struct HINSTANCE__ *,struct HWND__ *,unsigned int,unsigned short const *,unsigned int)",
    "public: struct ATL::IAtlStringMgr * __thiscall ATL::CSimpleStringT::GetManager(void)const",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned char const *,struct ATL::IAtlStringMgr *)",
    "public: __thiscall LanguageNeutralSelectionDialogBase::LanguageNeutralSelectionDialogBase(class LanguageNeutralSelectionDialogBase const &)",
    "protected: virtual long __stdcall CWndObj::OnCaptureChanged(unsigned int,long)",
    "public: unsigned long __stdcall Wizard_PageDesciption::GetTitle(void)",
    "private: int __thiscall WizardUI::IsMinimizeRequest(struct tagMSG *)",
    "protected: virtual long __stdcall AppWindow::OnSetCaption(unsigned int,unsigned int,long)",
    "public: int __stdcall NavigationStack::Push(class WizardNode *)",
    "public: class LanguageNeutralSelectionDialogBase & __thiscall LanguageNeutralSelectionDialogBase::operator=(class LanguageNeutralSelectionDialogBase const &)",
    "public: __thiscall LanguageSelectionDialogBase::~LanguageSelectionDialogBase(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short const *,struct ATL::IAtlStringMgr *)",
    "protected: virtual long __stdcall CWndObj::OnCtlColorScrollbar(unsigned int,long)",
    "unsigned long __cdecl FormatVarMessage(unsigned long,void const *,unsigned long,unsigned long,unsigned short *,unsigned long,...)",
    "public: void __stdcall WizardRoot::InitAllStandardButtons(void)",
    "const PageContainer::`vftable'",
    "private: void __thiscall ATL::CSimpleStringT::Fork(int)",
    "public: __thiscall ICreateProgressWnd::ICreateProgressWnd(class ICreateProgressWnd const &)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(unsigned short const *)",
    "public: __thiscall WizardPage::WizardPage(class WizardPage const &)",
    "protected: virtual long __stdcall CWndObj::OnSetFocus(unsigned int,long)",
    "public: class ATL::CStringT > > __stdcall WizardRoot::GetPageName(void)",
    "public: int __thiscall CDIB::GetAllowMirror(void)",
    "public: int __thiscall ProtoPageDimensions::IsInitialized(void)",
    "private: unsigned int __thiscall LanguageSelectionDialogBase::PopulateLanguageList(void)",
    "public: int __thiscall WizardUI::EndUI(void)",
    "public: virtual int __thiscall WizardHandler::NotifyWizBack(int &)",
    "public: __thiscall CCritSec::CCritSec(class CCritSec const &)",
    "public: void __cdecl ATL::CStringT > >::FormatMessageW(unsigned int,...)",
    "private: int __thiscall CCtlText::v_Chk(unsigned long)",
    "private: static struct HDC__ * WizardUI::s_hdcScreenBackground",
    "public: struct SimpleSize & __thiscall SimpleSize::operator=(struct SimpleSize const &)",
    "protected: virtual long __stdcall CWndObj::OnSize(unsigned int,long)",
    "public: virtual struct HMENU__ * __stdcall CWndObj::get_Menu(void)",
    "public: virtual void __stdcall CWndObj::SetMdi(struct IWndObj *)",
    "private: static unsigned long __stdcall CRichEditControl::EditStreamCallbackUnicode(unsigned long,unsigned char *,long,long *)",
    "public: void __stdcall CRichEditControl::SetTextColor(unsigned long)",
    "public: __thiscall CResourceModule::CResourceModule(struct HINSTANCE__ *,unsigned short const *)",
    "public: int __thiscall CScreenDIB::Load(struct HINSTANCE__ *,unsigned int,unsigned long)",
    "public: virtual void __stdcall Win32Navigator::SetFirstPage(class WizardPage *)",
    "public: void __stdcall CRichEditControl::SetText(unsigned short const *)",
    "private: void __thiscall WizardUI::DestroyWindows(void)",
    "public: int __stdcall CHighContrast::IsHighContrast(void)",
    "protected: class WizardPage * __thiscall ChoiceWizStrategy::NextPageHelper(int,class WizardNode *)",
    "public: virtual unsigned short const * __stdcall CWndObj::get_Class(void)",
    "protected: virtual long __stdcall AppWindow::OnRegistered(unsigned int,unsigned int,long)",
    "int __stdcall SetTextStyle(struct HWND__ *,int,int,int,int,int)",
    "public: struct SimpleSize __thiscall ProtoPageDimensions::GetAppWindowOffset(void)",
    "public: long __thiscall WizardUI::SetUserSelectedHideOOBELang(unsigned short *)",
    "public: virtual class WizardPage * __stdcall WizardEx::GetPage(void)",
    "public: virtual void __stdcall CWndObj::clr_WndStyle(unsigned long)",
    "public: void __thiscall ATL::CSimpleStringT::ReleaseBufferSetLength(int)",
    "private: int __thiscall CWndObj::v_Unregister(void)",
    "public: int __thiscall CDIB::LoadScaled(struct HINSTANCE__ *,unsigned int,long,long,unsigned long,int)",
    "private: void __thiscall WizardUI::CreatePropertySheet(void)",
    "public: virtual __thiscall ChoiceWizStrategy::~ChoiceWizStrategy(void)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,struct LOCALE * const &)",
    "public: void __thiscall ATL::CSimpleStringT::SetString(unsigned short const *)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Left(int)const",
    "public: int __stdcall CCtlText::Init(struct HWND__ *,unsigned int)",
    "int __stdcall GetHwndLogFont(struct HWND__ *,struct tagLOGFONTW *)",
    "public: virtual int __thiscall CAttachDataDlg::ProcessWindowMessage(struct HWND__ *,unsigned int,unsigned int,long,long &,unsigned long)",
    "public: int __thiscall CDrawItem::Draw(void)",
    "public: virtual unsigned long __stdcall CWndObj::Release(void)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Mid(int,int)const",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator=(unsigned short const *)",
    "public: class SummaryWizStrategy & __thiscall SummaryWizStrategy::operator=(class SummaryWizStrategy const &)",
    "public: virtual int __thiscall LanguageNeutralSelectionDialogBase::IsWDS(void)",
    "public: class WizardRoot & __thiscall WizardRoot::operator=(class WizardRoot const &)",
    "protected: virtual long __stdcall AppWindow::OnDeviceChange(unsigned int,long)",
    "public: void __stdcall AppWindow::GetNavRect(struct tagRECT *)",
    "public: long __thiscall WizardDialogPost::OnCommandFinish(unsigned short,unsigned short,struct HWND__ *,int &)",
    "const CCustomButtonEx::`vftable'",
    "int __stdcall MySetWindowText(struct HWND__ *,unsigned int,class ATL::CStringT > >)",
    "protected: virtual long __stdcall AppWindow::OnEraseBkGnd(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnActivateApp(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnCommand(unsigned int,long)",
    "public: struct KEYBOARD * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: virtual void __stdcall CWndObj::Show(void)",
    "public: __thiscall CDrawItem::CDrawItem(class CDrawItem const &)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimRight(void)",
    "public: struct PageDef & __thiscall PageDef::operator=(struct PageDef const &)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(struct LOCALE * const &)",
    "public: unsigned long __thiscall WizardUI::GetFontCharSet(void)",
    "public: int __thiscall ATL::CStringT > >::ReverseFind(unsigned short)const",
    "public: long __thiscall CGenericNavWindow::OnBack(unsigned short,unsigned short,struct HWND__ *,int &)",
    "public: __thiscall WizardBranch::WizardBranch(unsigned int,class Wiz_Node * *)",
    "public: __thiscall WizardVariation::WizardVariation(unsigned int,class Wiz_Node * *,class ATL::CSimpleMap > const &,unsigned short const *)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short const *,int,struct ATL::IAtlStringMgr *)",
    "public: virtual unsigned long __stdcall CWndObj::get_BackColor(void)",
    "public: class NavWindow & __thiscall NavWindow::operator=(class NavWindow const &)",
    "protected: virtual long __stdcall CWndObj::OnGetIcon(unsigned int,long)",
    "public: static struct HWND__ * __stdcall WizardUI::HwndProgress(void)",
    "public: long __thiscall WizardDialogPre::OnInitDialog(unsigned int,unsigned int,long,int &)",
    "protected: virtual long __stdcall CWndObj::OnSizing(unsigned int,long)",
    "public: class ScrWindow * __thiscall WizardUI::GetScrWindow(void)",
    "public: virtual __thiscall NavWindow::~NavWindow(void)",
    "private: void __thiscall WizardUI::RemoveFonts(void)",
    "void __stdcall ShowReadMoreWnd(struct HINSTANCE__ *,struct HWND__ *,unsigned int,unsigned int,unsigned int)",
    "protected: virtual long __stdcall AppWindow::OnUser(unsigned int,unsigned int,long)",
    "public: virtual int __stdcall CWndObj::Send(unsigned int,unsigned int,long)",
    "public: int __thiscall WizardUI::GetCanceled(void)",
    "const WizardBranch::`vftable'",
    "public: void __thiscall WizardUI::ShowScreenWindow(int)",
    "public: void __cdecl ATL::CStringT > >::FormatMessageW(unsigned short const *,...)",
    "public: __thiscall SimpleWizStrategy::SimpleWizStrategy(class WizardEx *)",
    "public: unsigned int __thiscall CDIB::GetBitsPerPixel(void)",
    "public: long __thiscall WizardDialogPost::OnCommandContinue(unsigned short,unsigned short,struct HWND__ *,int &)",
    "public: unsigned long __thiscall WizardUI::WaitForSingleObjectMessageSafeEx(void *,unsigned long,int)",
    "protected: virtual long __stdcall AppWindow::OnClose(unsigned int,long)",
    "public: static struct ProtoPageDimensions * __stdcall WizardUI::GetAppDimensions(void)",
    "public: __thiscall CAnimation::CAnimation(class CAnimation const &)",
    "public: __thiscall CAttachDataDlg::CAttachDataDlg(struct HINSTANCE__ *,struct HINSTANCE__ *)",
    "public: struct IResourceModuleEvent * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: void __thiscall WizardUI::SetNavHWnd(struct HWND__ *)",
    "public: class CGenericNavWindow & __thiscall CGenericNavWindow::operator=(class CGenericNavWindow const &)",
    "public: int (__stdcall*__stdcall WizardPage::GetWindowProc(void))(struct HWND__ *,unsigned int,unsigned int,long)",
    "private: void __thiscall WizardUI::PumpMessage(struct tagMSG)",
    "public: virtual void __thiscall CCritSec::Leave(void)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,struct IResourceModuleEvent * const &)",
    "private: bool __thiscall ATL::CStringT > >::CheckImplicitLoad(void const *)",
    "const CWndObj::`vftable'{for `IWndObj'}",
    "public: virtual class WizardPage * __thiscall VariationWizStrategy::NextPage(int,class WizardNode *)",
    "public: virtual void __thiscall WizardHandler::SetActive(int &)",
    "protected: virtual long __stdcall CWndObj::OnCancelJournal(unsigned int,long)",
    "public: class CCursor & __thiscall CCursor::operator=(class CCursor const &)",
    "public: class PageContainer & __thiscall PageContainer::operator=(class PageContainer const &)",
    "const LanguageNeutralSelectionDialogBase::`vftable'",
    "public: int __thiscall ATL::CSimpleArray >::Remove(struct IResourceModuleEvent * const &)",
    "public: __thiscall PageContainer::PageContainer(void)",
    "public: static void __stdcall CAttachDataDlg::InitDialog(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: void __thiscall CDrawItemComposite::AddItem(class CDrawItem *)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,struct LANGUAGE * const &)",
    "private: void __thiscall PageContainer::v_SetCurrentPageInternal(int,int)",
    "public: int __thiscall ATL::CSimpleArray >::Find(struct IResourceModuleEvent * const &)const",
    "public: static struct INavigator * __stdcall Navigator::getInstance(void)",
    "public: virtual class WizardPage * __stdcall WizardEx::Next(class WizardNode *)",
    "private: void __thiscall LanguageSelectionDialogBase::ReadSelectedLocale(void)",
    "protected: virtual long __stdcall AppWindow::OnWmxClose(unsigned int,unsigned int,long)",
    "public: static class CCustomButtonEx * __stdcall CCustomButtonEx::CreateEx(struct HINSTANCE__ *,struct HINSTANCE__ *,struct HWND__ *,struct _Button_Data * const,struct HDC__ *,struct HWND__ *)",
    "public: class WizardEx & __thiscall WizardEx::operator=(class WizardEx const &)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char const *)",
    "public: class WizardNode * __stdcall WizardEx::GetPageListItem(int)",
    "protected: static void __cdecl ATL::CSimpleStringT::Concatenate(class ATL::CSimpleStringT &,unsigned short const *,int,unsigned short const *,int)",
    "public: void __thiscall PIDStringView::ClearString(void)",
    "public: int __thiscall CResourceModule::RegisterObserver(struct IResourceModuleEvent *)",
    "public: long __thiscall CDIB::DibHeight(void)const",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(char)",
    "protected: virtual long __stdcall CWndObj::OnCopyData(unsigned int,long)",
    "public: __thiscall WizardUI::~WizardUI(void)",
    "public: long __thiscall WizardUI::SetUserSelectedKeyboardType(unsigned short *)",
    "public: class WizardPage * __thiscall WizardUI::GetCurrentPage(void)",
    "public: long __thiscall LanguageNeutralSelectionDialogBase::OnInitDialog(unsigned int,unsigned int,long,int &)",
    "private: void __thiscall PageContainer::v_DestroyAllCachedPages(void)",
    "public: virtual void __stdcall CWndObj::Update(void)",
    "const SummaryWizStrategy::`vftable'",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,unsigned short * const &)",
    "public: __thiscall AppWindow::AppWindow(class AppWindow const &)",
    "public: virtual void __stdcall Win32Navigator::DoCancel(void)",
    "protected: virtual long __stdcall CWndObj::OnExitMenuLoop(unsigned int,long)",
    "public: long __thiscall CGenericNavWindow::OnDestroy(unsigned int,unsigned int,long,int &)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(unsigned short)",
    "private: int __thiscall PIDStringView::v_IsValid(unsigned short)",
    "const IResourceModuleEvent::`vftable'",
    "public: void __thiscall CAnimation::SetTransparentColor(unsigned long)",
    "private: int __thiscall WizardUI::NeedToRedrawNavWindow(void)",
    "public: virtual unsigned long __stdcall CWndObj::get_WexStyle(void)",
    "public: struct tagRECT & __thiscall CGenericNavWindow::RectDest(void)",
    "private: int __thiscall CWndObj::v_Register(void)",
    "private: __thiscall Win32Navigator::Win32Navigator(void)",
    "private: static long __stdcall LanguageNeutralSelectionDialogBase::LangNeutralLVSubProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: int __thiscall CDIB::DumpToFile(unsigned short const *)",
    "public: unsigned short const * __thiscall ATL::CSimpleStringT::GetString(void)const",
    "public: virtual class WizardNode * __thiscall WizardBranch::CreateNode(unsigned int,class WizardEx *,class WizardUI *)",
    "public: __thiscall WizardSummary::WizardSummary(class WizardSummary const &)",
    "protected: virtual long __stdcall CWndObj::OnEnable(unsigned int,long)",
    "public: long __thiscall CGenericNavWindow::OnGetButtons(unsigned int,unsigned int,long,int &)",
    "protected: virtual long __stdcall AppWindow::OnPaint(unsigned int,long)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(unsigned short * const &)",
    "public: virtual void __stdcall CWndObj::Show(unsigned long)",
    "protected: virtual long __stdcall CWndObj::OnMenuSelect(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnEraseBkGnd(unsigned int,long)",
    "public: unsigned short * __thiscall WizardUI::GetUserSelectedKeyboardType(void)",
    "struct HICON__ * __stdcall CreateMirroredIcon(struct HICON__ *)",
    "public: __thiscall ICreateNavbarWnd::ICreateNavbarWnd(class ICreateNavbarWnd const &)",
    "public: void __cdecl ATL::CStringT > >::AppendFormat(unsigned int,...)",
    "int __stdcall SPWE_MessageBox(struct HWND__ *,struct HINSTANCE__ *,unsigned short const *,unsigned short const *,unsigned int,int (__stdcall*)(struct HWND__ *,unsigned int,unsigned int,long),unsigned int,int)",
    "protected: virtual long __stdcall CWndObj::OnDeleteItem(unsigned int,long)",
    "public: struct LOCALE * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: unsigned short const * __thiscall MyString::GetString(void)",
    "public: virtual int __thiscall WizardDialogPre::ProcessWindowMessage(struct HWND__ *,unsigned int,unsigned int,long,long &,unsigned long)",
    "public: static void __cdecl ATL::CSimpleStringT::CopyChars(unsigned short *,unsigned short const *,int)",
    "public: virtual __thiscall PIDStringView::~PIDStringView(void)",
    "public: __thiscall WizardRoot::WizardRoot(void)",
    "public: unsigned long __stdcall WizardRoot::MyPropSheet_GetWizButtons(void)",
    "protected: virtual long __stdcall CWndObj::OnLButtonDblClk(unsigned int,long)",
    "private: void __thiscall WizardUI::LoadFontInfo(void)",
    "protected: virtual long __stdcall ScrWindow::OnDisplayChange(unsigned int,long)",
    "public: __thiscall CResourceModule::CResourceModule(class CResourceModule const &)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimRight(unsigned short const *)",
    "public: class CAnimation & __thiscall CAnimation::operator=(class CAnimation const &)",
    "int __stdcall utlGetCtlRect(struct HWND__ *,struct HWND__ *,struct tagRECT *)",
    "public: int __stdcall ScrWindow::Init(unsigned int)",
    "public: int __thiscall WizardUI::ResetLanguage(unsigned short const *)",
    "public: void __stdcall WizardRoot::Reload(void)",
    "private: void __thiscall LanguageNeutralSelectionDialogBase::ProcessSelectedLanguage(void)",
    "public: int __thiscall ATL::CStringT > >::CollateNoCase(unsigned short const *)const",
    "public: virtual struct HINSTANCE__ * __stdcall CWndObj::get_Instance(void)",
    "private: void __thiscall PageContainer::v_Set(unsigned long)",
    "public: virtual void __thiscall WizardDialogPost::SetActive(int &)",
    "public: void __stdcall WizardPage::SetHWnd(struct HWND__ *)",
    "private: virtual __thiscall Navigator::~Navigator(void)",
    "public: struct HWND__ * __thiscall WizardUI::GetNavHWnd(void)",
    "public: class WizardDialogPost & __thiscall WizardDialogPost::operator=(class WizardDialogPost const &)",
    "public: int __thiscall CCursor::LeavingTrackedWnd(struct HWND__ *)",
    "public: void * __stdcall WizardPage::GetData(void)",
    "public: static void __cdecl ATL::CSimpleStringT::CopyCharsOverlapped(unsigned short *,unsigned short const *,int)",
    "public: class WizardPage * & __thiscall WizardRoot::PageData(void)",
    "const AppWindow::`vftable'{for `IWndProp'}",
    "public: class CCustomButtonEx * & __thiscall WizardRoot::ButtonContinue(void)",
    "public: virtual __thiscall ICreateProgressWnd::~ICreateProgressWnd(void)",
    "public: void __thiscall ATL::CSimpleStringT::AppendChar(unsigned short)",
    "public: int __thiscall ATL::CSimpleArray >::Add(unsigned short * const &)",
    "public: virtual class WizardPage * __thiscall BranchWizStrategy::NextPage(int,class WizardNode *)",
    "public: virtual void __stdcall CWndObj::set_Title(unsigned short const *)",
    "public: struct HWND__ * __stdcall WizardPage::GetHWnd(void)",
    "public: virtual void __stdcall Win32Navigator::RequestGoNext(int)",
    "public: static struct HDC__ * __stdcall WizardUI::HdcBackground(void)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,struct LANGUAGE * const &)",
    "public: __thiscall WizardDialogPre::WizardDialogPre(class WizardDialogPre const &)",
    "private: int __thiscall CWndObj::v_WndCreate(void)",
    "public: class CResourceModuleFactory & __thiscall CResourceModuleFactory::operator=(class CResourceModuleFactory const &)",
    "public: void __thiscall WizardUI::SetCanceled(int)",
    "protected: virtual long __stdcall CWndObj::OnCompacting(unsigned int,long)",
    "public: class Win32Navigator & __thiscall Win32Navigator::operator=(class Win32Navigator const &)",
    "public: void __stdcall WizardEx::SetStrategy(class WizardStrategy *)",
    "protected: virtual long __stdcall CWndObj::OnDestroy(unsigned int,long)",
    "protected: virtual long __stdcall CWndObj::OnSetRedraw(unsigned int,long)",
    "public: struct ATL::IAtlStringMgr * __thiscall ATL::CStringT > >::GetManager(void)const",
    "private: void __thiscall WizardUI::MessagePump(void)",
    "public: long __thiscall WizardDialogPre::OnDrawItem(unsigned int,unsigned int,long,int &)",
    "int __stdcall MessageBoxFromMessage(struct HINSTANCE__ *,struct HWND__ *,unsigned short const *,unsigned int,unsigned int)",
    "protected: virtual long __stdcall CWndObj::OnChildActivate(unsigned int,long)",
    "public: virtual class WizardNode * __thiscall WizardDesciption::CreateNode(unsigned int,class WizardEx *,class WizardUI *)",
    "public: __thiscall ChoiceWizStrategy::ChoiceWizStrategy(class ChoiceWizStrategy const &)",
    "public: long __thiscall CGenericNavWindow::OnDrawItem(unsigned int,unsigned int,long,int &)",
    "public: unsigned int __stdcall WizardNode::GetPageIndex(void)",
    "public: virtual int __thiscall LanguageNeutralSelectionDialogBase::ShowLanguageNeutralSelectionUI(void)",
    "protected: virtual long __stdcall CWndObj::OnKillFocus(unsigned int,long)",
    "private: struct HINSTANCE__ * __thiscall CResourceModule::v_LoadLibrary(unsigned short const *,unsigned short const *)",
    "public: static long __stdcall CGenericNavWindow::WindowProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: virtual __thiscall WizardDesciption::~WizardDesciption(void)",
    "public: __thiscall ATL::CStringT > >::~CStringT > >(void)",
    "public: void __thiscall WizardUI::SetFontSize(unsigned int)",
    "public: void __thiscall ATL::CStringT > >::FormatV(unsigned short const *,char *)",
    "const VariationWizStrategy::`vftable'",
    "public: __thiscall SummaryWizStrategy::SummaryWizStrategy(class SummaryWizStrategy const &)",
    "public: void __thiscall LanguageSelectionDialogBase::LoadStringResources(void)",
    "const WizardHandler::`vftable'",
    "public: __thiscall ATL::CSimpleArray >::~CSimpleArray >(void)",
    "public: void __thiscall CResourceModuleFactory::Init(struct HINSTANCE__ *)",
    "public: class WizardPage * __stdcall PageContainer::GetWizardPageWithIndex(int)",
    "public: class WizardPage & __thiscall WizardPage::operator=(class WizardPage const &)",
    "const ChoiceWizStrategy::`vftable'",
    "public: virtual int __thiscall LanguageSelectionDialogBase::ShowLanguageSelectionUI(void)",
    "public: void __stdcall CRichEditControl::SetRichTextAnsi(char const *,unsigned long *)",
    "public: virtual void __thiscall WizardRoot::SetActive(void)",
    "public: void __cdecl ATL::CStringT > >::Format(unsigned int,...)",
    "private: int __thiscall NavigationStack::v_Chk(unsigned long)",
    "protected: virtual long __stdcall CWndObj::OnCharToItem(unsigned int,long)",
    "private: static unsigned long __stdcall WizardUI::WizardThreadProc(void *)",
    "public: long __thiscall WizardUI::SetUserSelectedTargetLanguage(unsigned short *)",
    "void * __stdcall LoadHtmlResource(struct HINSTANCE__ *,unsigned short const *,unsigned long *)",
    "public: virtual int __thiscall LanguageSelectionDialogBase::CanPageBeActivated(enum Direction,int *)",
    "public: void __stdcall CHighContrast::TestHighcontrast(int)",
    "public: class WizardHandler & __thiscall WizardHandler::operator=(class WizardHandler const &)",
    "protected: virtual long __stdcall CWndObj::OnCtlColorBtn(unsigned int,long)",
    "private: static unsigned long __stdcall CRichEditControl::EditStreamCallbackAnsi(unsigned long,unsigned char *,long,long *)",
    "public: unsigned short __thiscall ATL::CSimpleStringT::operator[](int)const",
    "public: __thiscall CDrawItem::CDrawItem(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::MakeLower(void)",
    "private: unsigned int __thiscall LanguageSelectionDialogBase::PopulateKeyboardList(void)",
    "public: virtual int __thiscall LanguageSelectionDialogBase::IsWDS(void)",
    "public: virtual int __thiscall WizardRoot::NotifyWizBack(void)"
  ],
  "spwizimg.dll": "No exports",
  "spwizres.dll": "No exports",
  "spwizui.dll": [
    "StartInstallUI",
    "SPInstallFailed",
    "StartInstallUILite",
    "SPInstallSucceeded"
  ],
  "spwmp.dll": [
    "Sysprep_Generalize_WMP",
    "Sysprep_Clean_WMP"
  ],
  "sqlceoledb30.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "sqlceqp30.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllMain"
  ],
  "sqlcese30.dll": [
    "SqlCeReadRecordProps",
    "InitSerialization",
    "SqlCeDeleteRecord",
    "SqlCeTrackDatabase",
    "SqlCeEnumDBVolumes",
    "SqlCeTrackProperty",
    "SqlCeFlushDBVol",
    "SqlCeFreeNotification",
    "SqlCeStreamWrite",
    "EnableStorePlayback",
    "SqlCeAddSyncPartner",
    "SqlCeAttachCustomTrackingData",
    "SqlCeAddDatabaseProps",
    "SqlCeGetRecordChangeInfo",
    "SqlCeOpenDatabaseEx",
    "SqlCeWriteRecordProps",
    "SqlCeSetSessionOption",
    "SqlCeUninitialize",
    "SqlCeStreamSetSize",
    "SqlCeRemoveDatabaseProps",
    "SqlCeBeginTransaction",
    "SqlCeRemoveSyncPartner",
    "SqlCeStreamSeek",
    "EnableCedbFailpoint",
    "SqlCeGetDBInformationByHandle",
    "SqlCeGetDatabaseSession",
    "SqlCeCreateSession",
    "SqlCeGetDatabaseProps",
    "SqlCeMountDBVol",
    "SqlCeChangeDatabaseLCID",
    "SqlCeOidGetInfo",
    "SqlCeSetDatabaseInfo",
    "SqlCeGetCustomTrackingData",
    "SqlCeUnmountDBVol",
    "SqlCeFindFirstDatabase",
    "SqlCeStreamSaveChanges",
    "SqlCeGetPropChangeInfo",
    "SqlCeCreateDatabase",
    "SqlCeOpenStream",
    "SqlCeEndSyncSession",
    "SqlCeSeekDatabase",
    "SqlCeEndTransaction",
    "SqlCeOpenDatabase",
    "SqlCeMarkRecord",
    "SqlCeOnServerLoad",
    "SqlCeCloseHandle",
    "SqlCeFindNextChangedRecord",
    "SqlCeDeleteDatabase",
    "EnableStoreTracing",
    "DllCanUnloadNow",
    "SqlCeGetChangedRecordCnt",
    "SqlCeGetChangedRecords",
    "SqlCeBeginSyncSession",
    "SqlCeRemoveDatabaseTracking",
    "SqlCePurgeTrackingData",
    "SuspendStoreOperation",
    "SqlCePurgeTrackingGenerations",
    "DllGetClassObject",
    "SqlCeStreamRead",
    "SqlCeFindNextDatabase"
  ],
  "sqlsrv32.dll": [
    "SQLDisconnect",
    "SQLGetConnectAttrW",
    "SQLBindCol",
    "SQLSetConnectOptionW",
    "SQLSetCursorNameW",
    "SQLSetStmtAttrW",
    "SQLDescribeColW",
    "ConfigDSNW",
    "SQLStatisticsW",
    "SQLMoreResults",
    "SQLGetDiagFieldW",
    "SQLGetDiagRecW",
    "BCP_collen",
    "FinishDlgProc",
    "WizIntSecurityDlgProc",
    "SQLGetTypeInfoW",
    "SQLSpecialColumnsW",
    "WizDatabaseDlgProc",
    "SQLNativeSqlW",
    "SQLCloseCursor",
    "SQLPutData",
    "SQLGetStmtAttrW",
    "SQLGetInfoW",
    "BCP_colfmt",
    "SQLTablesW",
    "BCP_getcolfmt",
    "SQLRowCount",
    "SQLExecute",
    "SQLGetDescFieldW",
    "SQLFreeStmt",
    "SQLProcedureColumnsW",
    "SQLProceduresW",
    "SQLSetEnvAttr",
    "SQLDebug",
    "SQLNumParams",
    "BCP_control",
    "LibMain",
    "SQLGetFunctions",
    "SQLColumnsW",
    "SQLBulkOperations",
    "SQLColAttributeW",
    "SQLFetchScroll",
    "SQLAllocHandle",
    "SQLCancel",
    "SQLBrowseConnectW",
    "SQLPrimaryKeysW",
    "BCP_init",
    "SQLDescribeParam",
    "SQLConnectW",
    "SQLParamOptions",
    "TestDlgProc",
    "BCP_readfmt",
    "WizDSNDlgProc",
    "SQLSetDescRec",
    "BCP_sendrow",
    "SQLNumResultCols",
    "SQLExtendedFetch",
    "SQLSetDescFieldW",
    "SQLFetch",
    "SQLBindParameter",
    "SQLForeignKeysW",
    "SQLSetPos",
    "BCP_columns",
    "BCP_bind",
    "SQLEndTran",
    "BCP_exec",
    "BCP_batch",
    "SQLColumnPrivilegesW",
    "SQLGetData",
    "BCP_colptr",
    "SQLFreeHandle",
    "SQLExecDirectW",
    "SQLGetCursorNameW",
    "BCP_setcolfmt",
    "BCP_done",
    "SQLGetEnvAttr",
    "SQLDriverConnectW",
    "BCP_moretext",
    "SQLParamData",
    "ConfigDriverW",
    "ConnectDlgProc",
    "SQLPrepareW",
    "SQLSetScrollOptions",
    "SQLGetDescRecW",
    "SQLCopyDesc",
    "BCP_writefmt",
    "WizLanguageDlgProc",
    "SQLTablePrivilegesW",
    "SQLSetConnectAttrW",
    "SQLGetConnectOptionW"
  ],
  "sqlunirl.dll": [
    "_OpenWaitableTimer_@12",
    "_DlgDirList_@20",
    "_GetLogicalDriveStrings_@8",
    "_GetCharWidthFloat_@16",
    "_CreateMDIWindow_@40",
    "_GetFileVersionInfo_@16",
    "_ObjectCloseAuditAlarm_@12",
    "_GetPrivateProfileSectionNames_@12",
    "_RegSetValueEx_@24",
    "_TabbedTextOut_@32",
    "_WritePrivateProfileString_@16",
    "_LoadIcon@8",
    "_SetProp@12",
    "_SendDlgItemMessage@20",
    "_TranslateAccelerator@12",
    "_EnumWindowStations_@8",
    "_LoadCursor@8",
    "_CreateScalableFontResource_@16",
    "_CreateProcess_@40",
    "_PropertySheet_@4",
    "_CreateFile@28",
    "_LookupAccountName_@28",
    "_BroadcastSystemMessage_@20",
    "_SendNotifyMessage_@16",
    "_OpenService_@12",
    "_FindResourceEx_@16",
    "_CreateColorSpace_@4",
    "_LoadImage_@24",
    "_WriteProfileString_@12",
    "_ObjectPrivilegeAuditAlarm_@24",
    "_ExtTextOut@32",
    "_RegCreateKey_@12",
    "_CharToOemBuff_@12",
    "_DefDlgProc_@16",
    "_LoadString@16",
    "_UnregisterClass_@8",
    "_NDdeGetShareSecurity_@24",
    "_ChooseFont_@4",
    "_LoadKeyboardLayout_@8",
    "_EnumResourceLanguages_@20",
    "_SHGetFileInfo_@20",
    "_GetTextExtentPoint@16",
    "_LookupPrivilegeName_@16",
    "_RegRestoreKey_@12",
    "_GetTabbedTextExtent_@20",
    "_PeekMessage@20",
    "_CopyAcceleratorTable_@12",
    "_RegisterClass_@4",
    "_WaitNamedPipe_@8",
    "_GetDlgItemText@16",
    "_CallWindowProc@20",
    "_tsystem",
    "_BackupEventLog_@8",
    "_FormatMessage@28",
    "_lstrcmpi_@8",
    "_GetDiskFreeSpaceEx_@16",
    "_ttof",
    "_OutputDebugString_@4",
    "_PostMessage@16",
    "_OpenFile_@12",
    "_ChangeServiceConfig_@44",
    "_GetClipboardFormatName_@12",
    "_RegCreateKeyEx_@36",
    "_NDdeSetShareSecurity_@16",
    "_ChooseColor_@4",
    "_NDdeSetTrustedShare_@12",
    "_BuildCommDCB_@8",
    "_CharUpperBuff_@8",
    "_RegisterEventSource_@8",
    "_StartDoc@8",
    "_LoadMenuIndirect_@4",
    "_GetCharacterPlacement_@24",
    "_GetProfileSection_@12",
    "_GetTextExtentExPoint_@28",
    "_ExtractIcon_@12",
    "_GetFileVersionInfoSize_@8",
    "_CreateMetaFile_@4",
    "_RegEnumValue_@32",
    "_RegisterClipboardFormat_@4",
    "_GetOutlineTextMetrics_@12",
    "_DefineDosDevice_@12",
    "_OpenWindowStation_@12",
    "_EnumICMProfiles_@12",
    "_GetSystemDirectory_@8",
    "_GetTempFileName_@16",
    "_GetProcAddress_@8",
    "_WritePrivateProfileSection_@12",
    "_StartServiceCtrlDispatcher_@4",
    "_MoveFile@8",
    "_CharLowerBuff_@8",
    "_OemToChar_@8",
    "_SystemParametersInfo_@16",
    "AllocConvertMultiSZNameToAEx",
    "_DefWindowProc@16",
    "wsprintf_",
    "_FindFirstFile_@8",
    "_GetServiceKeyName_@16",
    "_FindNextFile_@8",
    "_CreateDC_@16",
    "AbortSystemShutdown_",
    "_RegDeleteKey_@8",
    "_GetToolsFilePath@16",
    "_QueryServiceConfig_@16",
    "_FindFirstFileEx_@24",
    "_CreateDialogIndirectParam@20",
    "_CharPrev_@8",
    "_RemoveFontResource_@4",
    "_GetEnvironmentVariable_@12",
    "_GetCurrentDirectory_@8",
    "_MapVirtualKey_@8",
    "_NDdeGetErrorString_@12",
    "_NDdeIsValidAppTopicList_@4",
    "_CallMsgFilter_@8",
    "_ChangeDisplaySettings_@8",
    "_DeviceCapabilities_@20",
    "_CreateDesktop_@24",
    "_ClearEventLog_@8",
    "_QueryServiceLockStatus_@16",
    "_SetWindowText@8",
    "_GetPrivateProfileInt_@16",
    "_lstrcat_@8",
    "_GetKeyboardLayoutName_@4",
    "_FindResource@12",
    "_EnumFontFamiliesEx_@20",
    "_DrawState_@40",
    "_SetVolumeLabel_@8",
    "_GetFileAttributesEx_@12",
    "_ReadConsoleInput_@16",
    "_IsCharLower_@4",
    "_NDdeIsValidShareName_@4",
    "_GetEnhMetaFileDescription_@12",
    "_GetFileSecurity_@20",
    "_InitiateSystemShutdown_@20",
    "_SetUserObjectInformation_@16",
    "_RegQueryValue_@16",
    "_StartService_@12",
    "AllocConvertMultiSZNameToA",
    "_GetObject@12",
    "_SendMessageTimeout_@28",
    "_RegQueryMultipleValues_@20",
    "_GetGlyphOutline_@28",
    "_GlobalFindAtom_@4",
    "_IsCharAlpha_@4",
    "_FreeEnvironmentStrings@4",
    "_ChangeMenu_@20",
    "_LoadAccelerators_@8",
    "_ResetDC_@8",
    "_CopyEnhMetaFile_@8",
    "_SearchPath_@24",
    "_CreateFontIndirect@4",
    "_CharNext_@4",
    "_NDdeShareSetInfo_@24",
    "_GetFullPathName_@16",
    "_CreateSemaphore_@16",
    "_GetClassName_@12",
    "_PageSetupDlg_@4",
    "_SHFileOperation_@4",
    "_IsCharUpper_@4",
    "_IsDialogMessage@8",
    "_DlgDirSelectEx_@16",
    "_GetPrivateProfileStruct_@20",
    "_GetCharABCWidthsFloat_@16",
    "_RegUnLoadKey_@8",
    "_GetServiceDisplayName_@16",
    "_SetDlgItemText@12",
    "_ReportEvent_@36",
    "_FatalAppExit_@8",
    "_FindExecutable_@12",
    "_CreateEnhMetaFile_@16",
    "_AddAtom_@4",
    "_OpenEventLog_@8",
    "_TextOut@20",
    "_GetDefaultCommConfig_@12",
    "_GetCharABCWidths_@16",
    "_GetCharWidth32_@16",
    "_GetShortPathName_@12",
    "_FindText_@4",
    "_GetNamedPipeHandleState_@28",
    "_ShellExecute_@24",
    "_UpdateResource_@24",
    "_GetWindowText@12",
    "_FindWindow_@8",
    "_ObjectOpenAuditAlarm_@48",
    "_RemoveDirectory_@4",
    "_AppendMenu_@16",
    "_lstrcpy_@8",
    "_MoveFileEx_@12",
    "_GlobalGetAtomName_@12",
    "_RegQueryValueEx_@24",
    "_EnumDependentServices_@24",
    "_EnumPropsEx_@12",
    "_EnumResourceTypes_@12",
    "_ModifyMenu_@20",
    "_CreateProcessAsUser_@44",
    "_GetSaveFileName@4",
    "_DispatchMessage_@4",
    "_RegLoadKey_@12",
    "_GetPrivateProfileString_@24",
    "_LookupPrivilegeDisplayName_@20",
    "_MessageBox@16",
    "_GetFileAttributes_@4",
    "_GetModuleFileName@12",
    "_strerror_@4",
    "_ExtractAssociatedIcon_@12",
    "_RegOpenKey_@12",
    "_SetWindowLong@12",
    "_RegDeleteValue_@8",
    "_SetFileSecurity_@12",
    "_SHBrowseForFolder_@4",
    "_FindWindowEx_@16",
    "_GetTextFace_@12",
    "_ReplaceText_@4",
    "_GetEnhMetaFile_@4",
    "_RegEnumKeyEx_@32",
    "newWideCharFromMultiByte",
    "_WritePrivateProfileStruct_@20",
    "_lstrcpyn_@12",
    "_GetUserName@8",
    "_RegQueryInfoKey_@48",
    "_GetLocaleInfo_@16",
    "_GetProfileInt_@12",
    "_GetTempPath_@8",
    "_PolyTextOut_@12",
    "_LoadLibrary@4",
    "_PrivilegedServiceAuditAlarm_@20",
    "newMultiByteFromWideCharEx",
    "_CommDlg_OpenSave_GetFolderPath@12",
    "_CreateAcceleratorTable_@8",
    "_EndUpdateResource_@8",
    "_WriteConsoleInput_@16",
    "_CommDlg_OpenSave_GetSpec@12",
    "_GetICMProfile_@12",
    "_SetComputerName_@4",
    "ConvertMultiSZNameToW",
    "_WriteProfileSection_@8",
    "__hwrite_@12",
    "_NDdeShareAdd_@20",
    "_SetICMProfile_@8",
    "_MessageBoxEx_@20",
    "_CreateWindowStation_@16",
    "_GetWindowLong@8",
    "_SetCurrentDirectory_@4",
    "_CreateEvent_@16",
    "_CharToOem_@8",
    "_GetModuleHandle_@4",
    "_ObjectDeleteAuditAlarm_@12",
    "_CreatePropertySheetPage_@4",
    "_CreateStatusWindow_@16",
    "_RegSetValue_@20",
    "_GetDiskFreeSpaceEx@16",
    "_GetVersionEx@4",
    "_SetDefaultCommConfig_@12",
    "_CopyFile_@12",
    "_EnumFonts_@16",
    "_OpenSemaphore_@12",
    "_GetClassInfo@12",
    "_LoadMenu@8",
    "_RegReplaceKey_@16",
    "_GetAtomName_@12",
    "_LookupPrivilegeValue_@12",
    "_VkKeyScanEx_@8",
    "_LoadLibraryEx_@12",
    "_CopyMetaFile_@8",
    "_OpenSCManager_@12",
    "_RegisterServiceCtrlHandler_@8",
    "_PrintDlg_@4",
    "__lopen_@8",
    "_CommDlg_OpenSave_GetFilePath@12",
    "_GetCurrentHwProfile_@4",
    "_EnumDesktops_@12",
    "_GetFileTitle@12",
    "_SetFileAttributes_@8",
    "_SendMessageCallback_@24",
    "_EnumResourceNames_@16",
    "_WinHelp@16",
    "_RegConnectRegistry_@12",
    "_EnumFontFamilies_@16",
    "_IsCharAlphaNumeric_@4",
    "_PostThreadMessage_@16",
    "_DeleteFile@4",
    "_CharUpper@4",
    "_MapVirtualKeyEx_@12",
    "_CreateIC_@16",
    "_OpenMutex_@12",
    "_QueryDosDevice_@12",
    "_SetClassLong_@12",
    "_SetWindowsHook_@8",
    "_ExpandEnvironmentStrings_@12",
    "_GetDriveType_@4",
    "_ReadEventLog_@28",
    "_GetCharWidth_@16",
    "_NDdeShareEnum_@24",
    "_DlgDirListComboBox_@20",
    "_SetWindowsHookEx_@16",
    "_RegOpenKeyEx_@20",
    "_ExtractIconEx_@20",
    "_GetCompressedFileSize_@8",
    "_GetWindowsDirectory_@8",
    "_NDdeGetTrustedShare_@20",
    "newMultiByteFromWideChar",
    "_GetMenuString_@20",
    "_AddFontResource_@4",
    "_GetMetaFile_@4",
    "_GetBinaryType_@8",
    "_VerQueryValue_@16",
    "_EnumDisplaySettings_@12",
    "_EnumServicesStatus_@32",
    "_IsBadStringPtr_@8",
    "_CompareString_@24",
    "_GetDateFormat_@24",
    "_trename",
    "_CopyFileEx_@24",
    "_BuildCommDCBAndTimeouts_@12",
    "_RegisterClassEx_@4",
    "_SHGetPathFromIDList_@8",
    "_LoadBitmap@8",
    "_CreateFont@56",
    "_BeginUpdateResource_@8",
    "_CreateMailslot_@16",
    "_GetKerningPairs_@12",
    "_tfopen",
    "_GetOpenFileName@4",
    "_CommConfigDialog_@12",
    "_SendMessage@16",
    "_GetVolumeInformation_@32",
    "_GetMessage_@16",
    "_CreateDirectory_@8",
    "_RegSaveKey_@12",
    "newMultiByteFromWideCharSize",
    "_CreateWaitableTimer_@12",
    "_SetEnvironmentVariable_@8",
    "_GetKeyNameText_@12",
    "_GetClassInfoEx_@12",
    "_OpenFileMapping_@12",
    "_LookupAccountSid_@28",
    "_GetPrivateProfileSection_@16",
    "_GetTimeFormat_@24",
    "_GetProp@8",
    "_LoadCursorFromFile_@4",
    "_GetCommandLine_@0",
    "_VkKeyScan_@4",
    "_GetEnvironmentStrings_@4",
    "_CreateNamedPipe_@32",
    "_GetClassLong_@8",
    "_DefMDIChildProc_@16",
    "__lwrite_@12",
    "_CreateFileMapping_@24",
    "_AccessCheckAndAuditAlarm_@44",
    "_DialogBoxParam_@20",
    "_GetWindowTextLength@4",
    "_OpenBackupEventLog_@8",
    "_GetLogColorSpace_@12",
    "_GetUnicodeRedirectionLayer@0",
    "_RegEnumKey_@16",
    "_FindFirstChangeNotification_@12",
    "_ShellExecuteEx_@4",
    "_InsertMenu_@20",
    "_DrawTextEx_@24",
    "_DialogBoxIndirectParam_@20",
    "_EnumProps_@8",
    "_MAKEINTRESOURCE@4",
    "_OemToCharBuff_@12",
    "_GetTextExtentPoint32@16",
    "_CreateService_@52",
    "_CallNamedPipe_@28",
    "_DefFrameProc_@20",
    "_NDdeShareDel_@12",
    "_OpenDesktop_@16",
    "_LogonUser_@24",
    "_GetUserObjectInformation_@20",
    "_wvsprintf_@12",
    "_FindAtom_@4",
    "_GrayString_@36",
    "_GlobalAddAtom_@4",
    "_ShellAbout_@16",
    "_OpenEvent_@12",
    "_CreateDialogParam_@20",
    "_GetProfileString_@20",
    "_MessageBoxIndirect_@4",
    "_CreateDirectoryEx_@12",
    "_NDdeShareGetInfo_@28",
    "_GetMenuItemInfo_@16",
    "_DragQueryFile_@16",
    "_CreateWindowEx@48",
    "_GetComputerName@8",
    "_RegisterWindowMessage_@4",
    "_SetMenuItemInfo_@16",
    "_DrawText@20",
    "_DlgDirSelectComboBoxEx_@16",
    "_NDdeTrustedShareEnum_@24",
    "_InsertMenuItem_@16",
    "_GetDiskFreeSpace_@20",
    "__lcreat_@8",
    "_CharLower@4",
    "_GetTextMetrics@8",
    "_RemoveProp@8",
    "_CreateMutex_@12",
    "_Shell_NotifyIcon_@8",
    "_lstrcmp_@8"
  ],
  "sqlwid.dll": [
    "_lwrite_",
    "GetEnvironmentStrings_",
    "wstrlen",
    "_hwrite_",
    "GetProcAddress_",
    "_ttof",
    "strerror_",
    "_lopen_",
    "OpenFile_",
    "_lcreat_"
  ],
  "sqlwoa.dll": [
    "_PeekMessage@20",
    "_MessageBox@16",
    "_GetModuleFileName@12",
    "AllocConvertMultiSZNameToA",
    "_GetDlgItemText@16",
    "_GetObject@12",
    "_GetProp@8",
    "_SetDlgItemText@12",
    "_SetWindowLong@12",
    "_WinHelp@16",
    "_trename",
    "_GetWindowLong@8",
    "_DefWindowProc@16",
    "_CallWindowProc@20",
    "_tsystem",
    "_GetClassInfo@12",
    "_TextOut@20",
    "_DeleteFile@4",
    "_FormatMessage@28",
    "_CharUpper@4",
    "_CreateWindowEx@48",
    "_FreeEnvironmentStrings@4",
    "_LoadBitmap@8",
    "_MAKEINTRESOURCE@4",
    "_LoadMenu@8",
    "_CreateFont@56",
    "_ExtTextOut@32",
    "newWideCharFromMultiByte",
    "_GetTextExtentPoint32@16",
    "_LoadIcon@8",
    "_GetWindowText@12",
    "_GetComputerName@8",
    "_SetWindowText@8",
    "_PostMessage@16",
    "_SetProp@12",
    "_GetOpenFileName@4",
    "_tfopen",
    "_CreateFontIndirect@4",
    "_GetUserName@8",
    "_SendMessage@16",
    "_LoadString@16",
    "_DrawText@20",
    "_SendDlgItemMessage@20",
    "_LoadLibrary@4",
    "_TranslateAccelerator@12",
    "newMultiByteFromWideCharEx",
    "_CommDlg_OpenSave_GetFolderPath@12",
    "_FindResource@12",
    "_GetWindowTextLength@4",
    "_MoveFile@8",
    "_LoadCursor@8",
    "newMultiByteFromWideCharSize",
    "_CreateFile@28",
    "_GetDiskFreeSpaceEx@16",
    "_CharLower@4",
    "_CommDlg_OpenSave_GetFilePath@12",
    "_CommDlg_OpenSave_GetSpec@12",
    "_CreateDialogIndirectParam@20",
    "_GetFileTitle@12",
    "_GetSaveFileName@4",
    "_GetTextMetrics@8",
    "_GetTextExtentPoint@16",
    "_IsDialogMessage@8",
    "_RemoveProp@8",
    "_StartDoc@8",
    "newMultiByteFromWideChar",
    "ConvertMultiSZNameToW",
    "_GetVersionEx@4"
  ],
  "sqmapi.dll": [
    "SqmCleanup",
    "SqmLoadEscalationManifest",
    "SqmCheckEscalationSetString",
    "SqmAddToStreamDWord64",
    "SqmCheckEscalationAddToStreamDWord64",
    "SqmCheckEscalationAddToStreamString",
    "SqmWriteSharedMachineId",
    "SqmGetUserId",
    "SqmIsWindowsOptedIn",
    "SqmSetFlags",
    "SqmSetAppVersion",
    "SqmUnattendedSetup",
    "SqmTimerStart",
    "SqmSetAppId",
    "SqmWriteSharedUserId",
    "SqmSetIfMin",
    "SqmSysprepCleanup",
    "SqmSysprepSpecialize",
    "SqmGetInstrumentationProperty",
    "SqmReadSharedMachineId",
    "SqmSetCurrentTimeAsUploadTime",
    "SqmWaitForUploadComplete",
    "SqmGetEscalationRuleStatus",
    "SqmSetBool",
    "SqmTimerAccumulate",
    "SqmCreateNewId",
    "SqmAddToAverage",
    "SqmSetString",
    "SqmStartUpload",
    "SqmSetEscalationInfo",
    "SqmTimerRecord",
    "SqmAddToStreamV",
    "SqmFlushSession",
    "SqmGetFlags",
    "SqmCheckEscalationAddToStreamDWord",
    "SqmCheckEscalationSetDWord64",
    "SqmStartSession",
    "SqmUnloadEscalationManifest",
    "SqmGetSessionStartTime",
    "SqmReadSharedUserId",
    "SqmSetMachineId",
    "SqmGetMachineId",
    "SqmGetEnabled",
    "SqmSysprepGeneralize",
    "SqmGetSession",
    "SqmSet",
    "SqmIncrement",
    "SqmSetBits",
    "SqmClearFlags",
    "SqmCheckEscalationSetDWord",
    "SqmSetUserId",
    "SqmTimerAddToAverage",
    "SqmAddToStreamString",
    "SqmSetEnabled",
    "SqmAddToStreamDWord",
    "SqmSetIfMax",
    "SqmSetDWord64",
    "SqmEndSession",
    "SqmAddToStream"
  ],
  "srchadmin.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "CPlApplet",
    "ProcessGroupPolicy"
  ],
  "srclient.dll": [
    "SRSetRestorePointW",
    "EnableSRInternal",
    "SetSRStateAfterSetup",
    "SRSetRestorePointInternal",
    "SRRemoveRestorePoint",
    "DisableSRInternal",
    "SRSetRestorePointA",
    "SRNewSystemId",
    "DisableSR",
    "EnableSREx",
    "EnableSR"
  ],
  "srcore.dll": [
    "SrFreeRestoreStatus",
    "ShutdownContinuation",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "SysprepGeneralize",
    "SrFreeRpPropArray",
    "DllGetClassObject",
    "SysprepCleanup",
    "DllRegisterServer"
  ],
  "srhelper.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "srrstr.dll": [
    "ExecuteScheduledSPPCreationW",
    "SRGetCplPropPage"
  ],
  "srvcli.dll": [
    "NetShareAdd",
    "NetServerTransportDel",
    "NetRemoteTOD",
    "NetpsNameCompare",
    "NetShareEnum",
    "NetServerTransportEnum",
    "I_NetDfsGetVersion",
    "NetServerTransportAddEx",
    "NetServerGetInfo",
    "NetSessionEnum",
    "NetpsPathCompare",
    "NetpsPathCanonicalize",
    "NetpsNameValidate",
    "NetConnectionEnum",
    "NetServerStatisticsGet",
    "NetShareDelEx",
    "I_NetServerSetServiceBits",
    "NetServerAliasAdd",
    "NetFileEnum",
    "NetFileClose",
    "NetShareCheck",
    "NetServerComputerNameAdd",
    "NetSessionGetInfo",
    "NetServerAliasEnum",
    "NetpsNameCanonicalize",
    "NetShareSetInfo",
    "NetFileGetInfo",
    "NetServerTransportAdd",
    "NetpsPathType",
    "NetServerSetInfo",
    "NetServerDiskEnum",
    "NetShareDel",
    "NetShareDelSticky",
    "NetShareGetInfo",
    "NetServerAliasDel",
    "NetServerComputerNameDel",
    "NetShareEnumSticky",
    "NetSessionDel",
    "I_NetServerSetServiceBitsEx"
  ],
  "srvsvc.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "srwmi.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "sscore.dll": [
    "SsCoreShareCleanup",
    "SsCoreShareAdd",
    "SsCoreInitialize",
    "SsCoreUninitialize",
    "SsCoreShareSetInfo",
    "SsCoreShareDel"
  ],
  "ssdpapi.dll": [
    "CleanupCache",
    "RegisterService",
    "DHSetICSOff",
    "RegisterNotification",
    "GetNextService",
    "GetFirstServiceEx",
    "RegisterNotificationEx",
    "DeregisterNotification",
    "FindServicesCallbackEx",
    "FreeSsdpMessage",
    "FindServicesEx",
    "GetNextServiceEx",
    "FreeSsdpMessageEx",
    "FindServicesClose",
    "GetFirstService",
    "RegisterServiceEx",
    "SsdpCleanup",
    "FindServicesCancel",
    "FindServicesCallback",
    "SsdpStartup",
    "DeregisterService",
    "FindServices",
    "DHSetICSInterfaces"
  ],
  "ssdpsrv.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "sspicli.dll": [
    "SeciAllocateAndSetIPAddress",
    "InitializeSecurityContextW",
    "SaslInitializeSecurityContextA",
    "EnumerateSecurityPackagesA",
    "LsaGetLogonSessionData",
    "ImpersonateSecurityContext",
    "SspiDecryptAuthIdentity",
    "ImportSecurityContextA",
    "QueryContextAttributesA",
    "DecryptMessage",
    "SspiIsAuthIdentityEncrypted",
    "SetCredentialsAttributesA",
    "LogonUserExExW",
    "SspiCompareAuthIdentities",
    "DeleteSecurityContext",
    "LsaLookupAuthenticationPackage",
    "LsaUnregisterPolicyChangeNotification",
    "AcceptSecurityContext",
    "FreeContextBuffer",
    "SetContextAttributesW",
    "SspiPrepareForCredWrite",
    "SecCacheSspiPackages",
    "EnumerateSecurityPackagesW",
    "GetUserNameExA",
    "ChangeAccountPasswordA",
    "RevertSecurityContext",
    "SspiEncodeAuthIdentityAsStrings",
    "SaslEnumerateProfilesA",
    "SeciAllocateAndSetCallFlags",
    "FreeCredentialsHandle",
    "SspiZeroAuthIdentity",
    "GetSecurityUserInfo",
    "LsaRegisterPolicyChangeNotification",
    "LsaLogonUser",
    "ExportSecurityContext",
    "SaslAcceptSecurityContext",
    "SaslIdentifyPackageW",
    "SspiMarshalAuthIdentity",
    "SspiEncodeStringsAsAuthIdentity",
    "SspiCopyAuthIdentity",
    "CredUnmarshalTargetInfo",
    "CredMarshalTargetInfo",
    "SetContextAttributesA",
    "SspiEncryptAuthIdentity",
    "SaslInitializeSecurityContextW",
    "LsaRegisterLogonProcess",
    "SealMessage",
    "AddCredentialsW",
    "LsaFreeReturnBuffer",
    "LsaCallAuthenticationPackage",
    "QueryCredentialsAttributesA",
    "SspiUnmarshalAuthIdentityInternal",
    "AcquireCredentialsHandleA",
    "SspiPrepareForCredRead",
    "SspiGetComputerNameForSPN",
    "LsaDeregisterLogonProcess",
    "SspiFreeAuthIdentity",
    "LsaEnumerateLogonSessions",
    "SspiGetTargetHostName",
    "CompleteAuthToken",
    "InitializeSecurityContextA",
    "QuerySecurityPackageInfoW",
    "SaslIdentifyPackageA",
    "EncryptMessage",
    "UnsealMessage",
    "QuerySecurityContextToken",
    "VerifySignature",
    "QueryCredentialsAttributesW",
    "SaslGetProfilePackageA",
    "SaslGetContextOption",
    "DeleteSecurityPackageA",
    "SecInitUserModeContext",
    "SspiExcludePackage",
    "AddSecurityPackageA",
    "AcquireCredentialsHandleW",
    "InitSecurityInterfaceA",
    "SspiUnmarshalAuthIdentity",
    "ChangeAccountPasswordW",
    "ApplyControlToken",
    "AddSecurityPackageW",
    "SaslSetContextOption",
    "SetCredentialsAttributesW",
    "AddCredentialsA",
    "SaslGetProfilePackageW",
    "SaslEnumerateProfilesW",
    "LsaConnectUntrusted",
    "SeciFreeCallContext",
    "SspiLocalFree",
    "QueryContextAttributesW",
    "ImportSecurityContextW",
    "QuerySecurityPackageInfoA",
    "DeleteSecurityPackageW",
    "GetUserNameExW",
    "MakeSignature",
    "InitSecurityInterfaceW",
    "SecDeleteUserModeContext",
    "SspiValidateAuthIdentity"
  ],
  "sspisrv.dll": [
    "SspiSrvClientCallback",
    "SspiSrvInitialize"
  ],
  "sstpsvc.dll": [
    "ServiceMain"
  ],
  "stclient.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "sti.dll": [
    "public: void __thiscall BUFFER_CHAIN_ITEM::SetUsed(unsigned long)",
    "SelectDeviceDialog2",
    "DllRegisterServer",
    "public: __thiscall BUFFER::BUFFER(unsigned int)",
    "public: __thiscall BUFFER_CHAIN::BUFFER_CHAIN(void)",
    "DllUnregisterServer",
    "MigrateRegisteredSTIAppsForWIAEvents",
    "public: __thiscall BUFFER_CHAIN_ITEM::~BUFFER_CHAIN_ITEM(void)",
    "GetProxyDllInfo",
    "public: __thiscall BUFFER_CHAIN::~BUFFER_CHAIN(void)",
    "public: unsigned long __thiscall BUFFER_CHAIN_ITEM::QueryUsed(void)const",
    "public: void * __thiscall BUFFER::QueryPtr(void)const",
    "public: __thiscall BUFFER_CHAIN_ITEM::BUFFER_CHAIN_ITEM(unsigned int)",
    "StiCreateInstanceW",
    "public: unsigned int __thiscall BUFFER::QuerySize(void)const",
    "public: __thiscall BUFFER::~BUFFER(void)",
    "public: void __thiscall BUFFER_CHAIN_ITEM::`default constructor closure'(void)",
    "StiCreateInstance",
    "DllCanUnloadNow",
    "public: void __thiscall BUFFER::`default constructor closure'(void)",
    "DllGetClassObject"
  ],
  "sti_ci.dll": [
    "int __stdcall WiaDeviceEnum(void)",
    "InstallWiaService",
    "WiaRemoveDevice",
    "UninstallWiaDevice",
    "CoinstallerEntry",
    "CreateWiaDeviceList",
    "ClassInstall",
    "EnableWiaDevice",
    "DisableWiaDevice",
    "WiaCreatePortList",
    "WiaAddDevice",
    "InstallWiaDevice",
    "AddDevice",
    "SetWiaDeviceProperty",
    "GetWiaDeviceProperty",
    "WiaDestroyPortList",
    "DestroyWiaDeviceList"
  ],
  "stobject.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "streamci.dll": [
    "StreamingDeviceRemoveW",
    "StreamingDeviceClassInstaller",
    "StreamingDeviceRemove",
    "StreamingDeviceSetupA",
    "StreamingDeviceRemoveA",
    "StreamingDeviceSetupW",
    "StreamingDeviceSetup",
    "SwEnumCoInstaller"
  ],
  "sud.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "swprv.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "ServiceMain"
  ],
  "sxproxy.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "sxs.dll": [
    "SxsProbeAssemblyInstallation",
    "SxsEndAssemblyInstall",
    "SxsOleAut32RedirectTypeLibrary",
    "SxsOleAut32MapIIDToTLBPath",
    "SxsUninstallW",
    "SxsRunDllInstallAssembly",
    "SxspGenerateManifestPathOnAssemblyIdentity",
    "SxsOleAut32MapIIDToProxyStubCLSID",
    "SxsFindClrClassInformation",
    "SxsGenerateActivationContext",
    "SxsBeginAssemblyInstall",
    "SxsOleAut32MapIIDOrCLSIDToTypeLibrary",
    "SxsInstallW",
    "SxsOleAut32MapConfiguredClsidToReferenceClsid",
    "SxsRunDllInstallAssemblyW",
    "SxsQueryManifestInformation",
    "SxsLookupClrGuid",
    "SxsOleAut32MapReferenceClsidToConfiguredClsid",
    "CreateAssemblyNameObject",
    "CreateAssemblyCache",
    "SxsFindClrSurrogateInformation"
  ],
  "sxshared.dll": [
    "SxTracerDebuggerBreak",
    "SxTracerShouldTrackFailure",
    "SxTracerGetThreadContextDebug",
    "DllUnregisterServer",
    "HRESULTFromNTSTATUS",
    "DllCanUnloadNow",
    "SxTracerGetThreadContextRetail",
    "Win32FromNTSTATUS",
    "Win32FromHRESULT",
    "DllGetClassObject",
    "DllRegisterServer",
    "GetLastFailureAsHRESULT"
  ],
  "sxssrv.dll": [
    "ServerDllInitialization"
  ],
  "sxsstore.dll": [
    "SxsStoreInitialize",
    "SxsStoreFinalize",
    "DllGetClassObject",
    "DllMain"
  ],
  "synceng.dll": [
    "AddObjectTwin",
    "DestroyRecList",
    "RemoveAllTwinsFromTwinList",
    "GetObjectTwinHandle",
    "GetFolderTwinStatus",
    "BeginReconciliation",
    "GetVolumeDescription",
    "DeleteBriefcase",
    "ReleaseTwinHandle",
    "CompareFileStamps",
    "ClearBriefcaseCache",
    "IsFolderTwin",
    "DeleteTwin",
    "IsPathOnVolume",
    "EndReconciliation",
    "CountSourceFolderTwins",
    "OpenBriefcase",
    "GetFileStamp",
    "FindBriefcaseClose",
    "AddTwinToTwinList",
    "ReconcileItem",
    "IsOrphanObjectTwin",
    "AnyTwins",
    "SaveBriefcase",
    "CloseBriefcase",
    "FindNextBriefcase",
    "FindFirstBriefcase",
    "CreateFolderTwinList",
    "DestroyTwinList",
    "AddAllTwinsToTwinList",
    "CreateRecList",
    "DestroyFolderTwinList",
    "RemoveTwinFromTwinList",
    "GetOpenBriefcaseInfo",
    "CreateTwinList",
    "AddFolderTwin"
  ],
  "syncui.dll": [
    "DllCanUnloadNow",
    "Briefcase_IntroW",
    "DllGetClassObject"
  ],
  "sysclass.dll": [
    "ComputerClassInstaller",
    "HdcClassInstaller",
    "CriticalDeviceCoInstaller",
    "KeyboardClassInstaller",
    "StorageCoInstaller",
    "DiskPropPageProvider",
    "TapePropPageProvider",
    "ScsiClassInstaller",
    "PS2MousePropPageProvider",
    "VolumeClassInstaller",
    "TapeClassInstaller",
    "LegacyDriverPropPageProvider",
    "MouseClassInstaller"
  ],
  "sysmain.dll": [
    "CollectReadyBoostPerfData",
    "AgPdLoad",
    "CloseReadyBoostPerfData",
    "AgTwLoad",
    "DllCanUnloadNow",
    "DllUnregisterServer",
    "AgGlLoad",
    "RDBMgmtLaunchPropertiesW",
    "PfSvUnattendCallback",
    "DllGetClassObject",
    "OpenReadyBoostPerfData",
    "PfSvSysprepCleanup",
    "DllRegisterServer",
    "SysMtServiceMain"
  ],
  "sysntfy.dll": [
    "SysNotifyStartServer",
    "SysNotifyStopServer"
  ],
  "sysprepMCE.dll": [
    "Sysprep_Generalize_MCE"
  ],
  "syssetup.dll": [
    "AsrAddSifEntryA",
    "SetupChangeFontSize",
    "AsrCreateStateFileA",
    "SetupInfObjectInstallActionW",
    "AsrFreeContext",
    "AsrCreateStateFileW",
    "SetupSetDisplay",
    "AsrRestorePlugPlayRegistryData",
    "AsrAddSifEntryW",
    "WaitForSamService",
    "GetAnswerFileSetting"
  ],
  "systemcpl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "TRAPI.dll": "No exports",
  "TSChannel.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "TSErrRedir.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "TSWorkspace.dll": [
    "WorkspaceStatusNotify",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "TaskUpdateWorkspaces",
    "WorkspaceSilentSetupW",
    "DllGetClassObject",
    "TaskUpdateWorkspacesIfNeeded",
    "DllRegisterServer"
  ],
  "TSpkg.dll": [
    "SpUserModeInitialize",
    "SpLsaModeInitialize"
  ],
  "TabSvc.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "Tabbtn.dll": [
    "public: __thiscall CButtonSettings::CButtonSettings(void)",
    "private: long __thiscall CButtonMonitor::OnActionTouchGateHardwareButton(class CButtonAction *,int,int)",
    "public: int __thiscall CBacklight::GetRangeHigh(void)const",
    "public: long __thiscall CButtonConfig::UpdateButtonRates(void)",
    "public: unsigned long __thiscall COrientation::GetMode(void)",
    "public: int __thiscall ATL::CSimpleArray >::RemoveAt(int)",
    "public: unsigned short const * __thiscall CButtonSetting::GetAllowedActions(void)",
    "public: __thiscall CButtonMonitor::CButtonMonitor(void)",
    "public: __thiscall CButtonSetting::CButtonSetting(class CButtonSetting const &)",
    "public: __thiscall CActions::CActions(void)",
    "public: int __thiscall ATL::CSimpleArray >::Find(class CButtonSetting * const &)const",
    "private: void __thiscall CButtonMonitor::OnHoldTimer(void)",
    "public: int __thiscall CButtonAction::IsSameAction(class CButtonAction const *)const",
    "public: static long __stdcall CFunctionNotification::WindowProc(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: int __thiscall CBacklight::SetBrightness(unsigned char,int,int)",
    "public: unsigned long __thiscall CButtonSetting::GetId(void)",
    "public: class CButtonAction * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: int __thiscall ATL::CSimpleMap >::Remove(unsigned long const &)",
    "private: long __thiscall CButtonMonitor::NotifyFnMode(int)",
    "private: long __thiscall CButtonMonitor::OnActionMouseWheel(class CButtonAction *,int,int)",
    "public: int __thiscall CActions::GetCount(void)",
    "public: __thiscall ATL::CSimpleMap >::~CSimpleMap >(void)",
    "public: long __thiscall CButtonConfig::Init(int)",
    "public: class CButtonSetting * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: long __thiscall CButtonSettings::GetButtonFromId(unsigned long,class CButtonSetting * *)",
    "public: void __thiscall CButtonConfig::UpdateCurrentDisplayOrientation(void)",
    "public: __thiscall CButtonSettings::CButtonSettings(class CButtonSettings const &)",
    "ResumeTabletButtonInput",
    "private: static void __stdcall CButtonMonitor::SendModKeys(unsigned char,int)",
    "public: struct ACTION * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: void __thiscall ATL::CSimpleMap >::RemoveAll(void)",
    "public: long __thiscall CFunctionNotification::Hide(void)",
    "public: static unsigned long CButtonMonitor::sm_dwPopupCount",
    "public: __thiscall CButtonAction::~CButtonAction(void)",
    "public: long __thiscall CActions::Init(void)",
    "public: struct _hidbtndev * __thiscall CHidButton::RegisterHidBtnDevice(void *,unsigned long *)",
    "public: long __thiscall CButtonConfig::RegReadDisplayOrientations(void)",
    "public: static void __stdcall CButtonMonitor::WinEventProc(struct HWINEVENTHOOK__ *,unsigned long,struct HWND__ *,long,long,unsigned long,unsigned long)",
    "private: long __thiscall CButtonMonitor::OnActionAppCommand(class CButtonAction *,int,int)",
    "public: void __thiscall ATL::CSimpleMap >::InternalSetAtIndex(int,unsigned long const &,class CButtonImages * const &)",
    "public: int __thiscall ATL::CSimpleArray >::Find(class CButtonAction * const &)const",
    "public: class CButtonConfig * __thiscall CButtonMonitor::GetButtonConfig(void)",
    "public: unsigned long __thiscall CButtonAction::GetSize(void)const",
    "public: __thiscall CFunctionNotification::~CFunctionNotification(void)",
    "public: struct _hidbtndev * __thiscall CHidButton::FindDeviceByHandle(void *)",
    "private: int __thiscall CButtonSettings::LoadImageDLL(void)",
    "public: int __thiscall ATL::CSimpleMap >::FindKey(unsigned long const &)const",
    "private: void __thiscall CButtonMonitor::OnRepeatTimer(void)",
    "private: long __thiscall CButtonMonitor::OnActionAdjustBrightness(class CButtonAction *,int,int)",
    "public: int __thiscall ATL::CSimpleMap >::RemoveAt(int)",
    "public: long __thiscall CButtonMonitor::RegisterButtonDevices(void)",
    "public: unsigned short const * __thiscall CButtonSetting::GetButtonName(void)",
    "private: int __thiscall CButtonMonitor::ShouldSendEscapeForBack(void)",
    "public: __thiscall ATL::CSimpleArray >::CSimpleArray >(class ATL::CSimpleArray > const &)",
    "public: void __thiscall ATL::CSimpleArray >::RemoveAll(void)",
    "InitializeTabletButtons",
    "public: __thiscall CButtonConfig::CButtonConfig(void)",
    "private: int __thiscall CHidButton::GetHidBtnUsages(struct _hidbtndev *,struct tagRAWINPUT *,unsigned short,unsigned short,struct _USAGE_AND_PAGE *,unsigned long *)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(class CButtonSetting * const &)",
    "private: long __thiscall CButtonMonitor::OnActionSetOrientation(class CButtonAction *,int,int)",
    "public: __thiscall CHidButton::~CHidButton(void)",
    "SuspendTabletButtonInput",
    "private: void __thiscall CButtonMonitor::SetDisplayPower(int)",
    "HandleTabletButtonMessages",
    "public: long __thiscall CButtonSetting::GetActionFromOrientation(unsigned long,class CButtonAction * *,class CButtonAction * *,class CButtonAction * *)",
    "private: long __thiscall CButtonMonitor::SendAppCommand(unsigned short)",
    "private: long __thiscall CButtonMonitor::OnActionWindowsFlip3d(class CButtonAction *,int,int)",
    "private: long __thiscall CFunctionNotification::CreateTrayWindow(void)",
    "public: int __thiscall ATL::CSimpleMap >::FindVal(class CButtonImages * const &)const",
    "public: unsigned long __thiscall CButtonAction::GetId(void)const",
    "public: unsigned short const * __thiscall COrientation::GetKeyName(void)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,class CButtonSetting * const &)",
    "public: class CButtonConfig & __thiscall CButtonConfig::operator=(class CButtonConfig const &)",
    "private: void __thiscall CButtonMonitor::OnButtonDown(unsigned int,long)",
    "public: int __thiscall CBacklight::AdjustBrightness(int)",
    "public: enum BUTTONACTION_TYPE const __thiscall CButtonAction::GetButtonActionType(void)const",
    "public: class CButtonAction & __thiscall CButtonAction::operator=(class CButtonAction const &)",
    "public: __thiscall CActions::~CActions(void)",
    "private: long __thiscall CButtonMonitor::OnActionSendKey(class CButtonAction *,int,int)",
    "public: __thiscall CButtonConfig::~CButtonConfig(void)",
    "public: class CActions & __thiscall CActions::operator=(class CActions const &)",
    "private: void __thiscall CButtonMonitor::OnSuspendInput(void)",
    "public: unsigned long const __thiscall CButtonAction::GetDataDWORD(void)const",
    "public: int __thiscall CBacklight::GetBrightness(unsigned char *,int *,int *)",
    "public: long __thiscall CButtonAction::SetDataDWORD(unsigned long)",
    "public: int __thiscall ATL::CSimpleArray >::Add(class CButtonAction * const &)",
    "public: long __thiscall CButtonConfig::RegReadButtonsSettings(void)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(class COrientation * const &)",
    "public: class CButtonSetting * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: long __thiscall CButtonAction::Clone(class CButtonAction * *)const",
    "public: class CButtonSetting * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: long __thiscall CButtonConfig::RegReadButtonSetting(struct HKEY__ *,int,int)",
    "private: long __thiscall CButtonMonitor::ExecuteObject(unsigned short const *,unsigned short const *)",
    "public: int __thiscall ATL::CSimpleArray >::Find(class COrientation * const &)const",
    "public: struct HBITMAP__ * __thiscall CButtonSettings::GetDetailImage(unsigned long,unsigned long)",
    "private: long __thiscall CButtonMonitor::OnActionDisplayOff(class CButtonAction *,int,int)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,class COrientation * const &)",
    "public: __thiscall CButtonSetting::CButtonSetting(void)",
    "public: class CButtonMonitor & __thiscall CButtonMonitor::operator=(class CButtonMonitor const &)",
    "public: unsigned short const * __thiscall CButtonSetting::GetDisallowedActions(void)",
    "public: long __thiscall CButtonMonitor::UnregisterButtonDevices(void)",
    "public: void __thiscall CHidButton::OnSuspendInput(void)",
    "private: long __thiscall CButtonMonitor::ReleaseRepeatOrHoldButton(void)",
    "private: void __thiscall CButtonMonitor::OnFnKeyTimer(void)",
    "public: class CButtonAction * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: unsigned long __thiscall CButtonAction::GetOrientationMode(void)const",
    "public: long __thiscall CFunctionNotification::Show(void)",
    "public: __thiscall CButtonMonitor::CButtonMonitor(class CButtonMonitor const &)",
    "public: class CBacklight & __thiscall CBacklight::operator=(class CBacklight const &)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(struct ACTION * const &)",
    "public: long __thiscall CButtonAction::Set(class CButtonAction const *)",
    "private: long __thiscall CButtonMonitor::OnActionUnknown(class CButtonAction *,int,int)",
    "public: __thiscall CBacklight::CBacklight(void)",
    "public: unsigned long __thiscall CButtonAction::GetRegType(void)const",
    "public: int __thiscall ATL::CSimpleArray >::Add(class CButtonSetting * const &)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,class CButtonAction * const &)",
    "public: __thiscall CButtonMonitor::~CButtonMonitor(void)",
    "public: class CFunctionNotification & __thiscall CFunctionNotification::operator=(class CFunctionNotification const &)",
    "public: int __thiscall ATL::CSimpleMap >::SetAt(unsigned long const &,class CButtonImages * const &)",
    "public: long __thiscall CButtonConfig::RegReadOrientationSeq(void)",
    "public: __thiscall CBacklight::~CBacklight(void)",
    "public: static int __stdcall CButtonAction::IsActionRepeatable(unsigned long)",
    "public: class COrientation * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "private: long __thiscall CButtonMonitor::OnActionWindowsFlip(class CButtonAction *,int,int)",
    "public: long __thiscall CButtonSettings::GetButtonIds(unsigned long *,int)const",
    "public: long __thiscall CHidButton::DispatchHidBtnEvents(struct HRAWINPUT__ *)",
    "private: long __thiscall CButtonMonitor::DoButtonAction(class CButtonAction *,unsigned long,int,int)",
    "public: class CButtonImages * & __thiscall ATL::CSimpleMap >::GetValueAt(int)const",
    "private: long __thiscall CButtonMonitor::OnActionTouchUIHardwareButton(class CButtonAction *,int,int)",
    "private: int __thiscall CButtonMonitor::InSession0(void)",
    "public: static long __stdcall CButtonConfig::RegReadAndAllocate(struct HKEY__ *,unsigned short const *,unsigned long *,unsigned char * *,unsigned long *)",
    "private: static long __stdcall CButtonMonitor::ShowWindowSwitchWindow(void)",
    "public: long __thiscall COrientation::Init(struct HKEY__ *)",
    "private: long __thiscall CButtonMonitor::OnActionContextMenu(class CButtonAction *,int,int)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,class COrientation * const &)",
    "public: __thiscall CButtonSettings::~CButtonSettings(void)",
    "public: int __thiscall ATL::CSimpleMap >::Add(unsigned long const &,class CButtonImages * const &)",
    "public: int __thiscall CBacklight::GetRangeLow(void)const",
    "public: long __thiscall CButtonSetting::MakeAllUserActionsEqual(unsigned long)",
    "public: struct ACTION * __thiscall CActions::GetActionAt(int)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,struct ACTION * const &)",
    "public: unsigned long __thiscall CButtonConfig::GetOrientSeqCount(void)const",
    "public: __thiscall CButtonConfig::CButtonConfig(class CButtonConfig const &)",
    "public: unsigned char * __thiscall CButtonAction::GetData(void)const",
    "public: int __thiscall ATL::CSimpleArray >::GetSize(void)const",
    "public: __thiscall ATL::CSimpleMap >::CSimpleMap >(void)",
    "public: struct ACTION * __thiscall CActions::FindActionById(unsigned long)",
    "public: unsigned short const * __thiscall CButtonConfig::GetDisplayOrientationName(unsigned long)",
    "private: void __thiscall CButtonConfig::ResetDeprecatedAction(class CButtonAction *)",
    "public: int __thiscall CBacklight::CloseDevice(void)",
    "public: struct HBITMAP__ * __thiscall CButtonSettings::GetLocationImage(unsigned long,unsigned long)",
    "private: long __thiscall CButtonMonitor::OnActionLaunchApp(class CButtonAction *,int,int)",
    "public: __thiscall CFunctionNotification::CFunctionNotification(void)",
    "private: void __thiscall CButtonMonitor::OnTimer(unsigned int,long)",
    "public: struct ACTION * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,struct ACTION * const &)",
    "private: void __thiscall CButtonMonitor::OnDisplayChange(unsigned int,long)",
    "public: void __thiscall CButtonAction::SetId(unsigned long)",
    "public: long __thiscall CButtonConfig::LoadSettings(void)",
    "public: class CButtonSetting & __thiscall CButtonSetting::operator=(class CButtonSetting const &)",
    "public: int __thiscall CBacklight::OpenDevice(void)",
    "public: int __thiscall CButtonSettings::GetButtonCount(void)const",
    "public: static long __stdcall CButtonMonitor::CreateExtendedActionObject(struct IUnknown * *)",
    "public: unsigned long __thiscall ATL::CSimpleMap >::ReverseLookup(class CButtonImages * const &)const",
    "public: unsigned long __thiscall CButtonSettings::GetFnKeyButtonId(void)",
    "private: long __thiscall CButtonMonitor::ProcessEvent(unsigned long,int)",
    "public: static int __stdcall CButtonMonitor::IsActionUnsupported(unsigned long)",
    "public: __thiscall CButtonSetting::~CButtonSetting(void)",
    "public: class ATL::CSimpleArray > & __thiscall ATL::CSimpleArray >::operator=(class ATL::CSimpleArray > const &)",
    "public: long __thiscall CButtonMonitor::Init(struct HWND__ *,int,struct IUnknown *)",
    "public: class CButtonImages * __thiscall ATL::CSimpleMap >::Lookup(unsigned long const &)const",
    "public: int __thiscall ATL::CSimpleArray >::Add(struct ACTION * const &)",
    "public: __thiscall CActions::CActions(class CActions const &)",
    "public: int __thiscall ATL::CSimpleArray >::Add(class COrientation * const &)",
    "public: int __thiscall ATL::CSimpleMap >::GetSize(void)const",
    "private: void __thiscall CButtonMonitor::OnButtonUp(unsigned int,long)",
    "public: class CHidButton & __thiscall CHidButton::operator=(class CHidButton const &)",
    "public: void __thiscall CButtonMonitor::OnMessage(unsigned int,unsigned int,long)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,class CButtonSetting * const &)",
    "private: long __thiscall CButtonMonitor::AdjustDisplayBrightness(int)",
    "private: void __thiscall CButtonMonitor::OnInput(unsigned int,long)",
    "private: void __thiscall CButtonMonitor::OnSettingChange(unsigned int,long)",
    "public: int __thiscall CButtonSettings::ShouldButtonShowUI(int)const",
    "public: long __thiscall CButtonAction::SetData(unsigned char * const,unsigned long)",
    "public: class COrientation * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: int __thiscall ATL::CSimpleMap >::SetAtIndex(int,unsigned long const &,class CButtonImages * const &)",
    "public: unsigned long __thiscall CButtonSetting::GetFlags(void)",
    "public: unsigned short const * __thiscall CButtonSettings::GetButtonName(int)const",
    "private: long __thiscall CButtonMonitor::RegisterForPopups(void)",
    "public: struct ACTION * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: unsigned long __thiscall CButtonConfig::GetCurrentDisplayOrientation(void)",
    "public: int __thiscall CButtonAction::CanRepeat(void)const",
    "public: class COrientation * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: class COrientation & __thiscall COrientation::operator=(class COrientation const &)",
    "private: static void __stdcall CButtonMonitor::SendVKey(unsigned char,unsigned char,int)",
    "public: class ATL::CSimpleMap > & __thiscall ATL::CSimpleMap >::operator=(class ATL::CSimpleMap > const &)",
    "public: unsigned long & __thiscall ATL::CSimpleMap >::GetKeyAt(int)const",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,class CButtonAction * const &)",
    "public: int __thiscall ATL::CSimpleArray >::Find(struct ACTION * const &)const",
    "UninitializeTabletButtons",
    "public: class CButtonAction * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: void __thiscall CButtonAction::FreeData(void)",
    "private: int __thiscall CBacklight::BrightnessIndex(unsigned char)",
    "public: class CButtonSettings & __thiscall CButtonSettings::operator=(class CButtonSettings const &)",
    "public: __thiscall CButtonAction::CButtonAction(enum BUTTONACTION_TYPE)",
    "public: __thiscall COrientation::COrientation(void)",
    "public: long __thiscall CButtonConfig::SaveSettings(void)",
    "public: unsigned long __thiscall CButtonSettings::GetButtonIdFromIndex(unsigned long)",
    "public: unsigned short const * __thiscall COrientation::GetDescription(void)",
    "public: void __thiscall CButtonConfig::RegReadActions(struct HKEY__ *,class CButtonSetting *,int)",
    "private: long __thiscall CButtonMonitor::SetDisplayOrientation(int)",
    "public: __thiscall ATL::CSimpleArray >::~CSimpleArray >(void)",
    "public: unsigned long __thiscall CButtonConfig::GetOrientSeq(unsigned int)const",
    "private: long __thiscall CButtonMonitor::ProcessAction(unsigned long,int)",
    "public: unsigned long __thiscall COrientation::GetDefSeq(void)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(class CButtonAction * const &)",
    "public: __thiscall CHidButton::CHidButton(struct HWND__ *,unsigned int,unsigned int)",
    "public: int __thiscall CHidButton::UnregisterHidBtnDevice(struct _hidbtndev *,unsigned long *)",
    "public: __thiscall ATL::CSimpleArray >::CSimpleArray >(void)",
    "private: long __thiscall CButtonMonitor::DoBuiltInAction(class CButtonAction *,int,int)",
    "public: __thiscall COrientation::~COrientation(void)",
    "private: int __thiscall CHidButton::FindUsage(struct _USAGE_AND_PAGE *,unsigned long,unsigned short,unsigned short)",
    "private: long __thiscall CButtonMonitor::ReleaseDownButtons(void)"
  ],
  "TabbtnEx.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "TapiMigPlugin.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "TapiSysprep.dll": [
    "TapiSysPrepClean"
  ],
  "TaskSchdPS.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "TimeDateMUICallback.dll": [
    "OnMachineUILanguageSwitch"
  ],
  "TsPnPRdrCoInstaller.dll": [
    "TsPnPRdrCoInstaller"
  ],
  "t2embed.dll": [
    "_TTIsEmbeddingEnabled@8",
    "_TTGetEmbeddedFontInfo@28",
    "_TTRunValidationTests@8",
    "TTIsEmbeddingEnabled",
    "TTEnableEmbeddingForFacename",
    "_TTGetEmbeddingType@8",
    "TTDeleteEmbeddedFont",
    "TTRunValidationTestsEx",
    "_TTDeleteEmbeddedFont@12",
    "TTGetNewFontName",
    "TTLoadEmbeddedFont",
    "_TTEmbedFont@44",
    "TTEmbedFontFromFileA",
    "TTIsEmbeddingEnabledForFacename",
    "TTEmbedFont",
    "_TTIsEmbeddingEnabledForFacename@8",
    "_TTEnableEmbeddingForFacename@8",
    "_TTCharToUnicode@24",
    "_TTEmbedFontFromFileA@52",
    "TTGetEmbeddedFontInfo",
    "TTGetEmbeddingType",
    "_TTLoadEmbeddedFont@40",
    "TTCharToUnicode",
    "TTEmbedFontEx",
    "TTRunValidationTests"
  ],
  "tapi3.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "tapi32.dll": [
    "lineSetAgentSessionState",
    "lineConfigDialogEditW",
    "lineGetAddressIDA",
    "lineGetAddressID",
    "lineGetAddressStatusA",
    "phoneSetGain",
    "lineGetAgentActivityListA",
    "lineDrop",
    "lineTranslateAddressW",
    "lineSetupConferenceW",
    "lineGetDevCapsA",
    "lineProxyResponse",
    "phoneNegotiateExtVersion",
    "phoneGetIDA",
    "lineUnhold",
    "lineGetDevCaps",
    "LAddrParamsInited",
    "GetTapi16CallbackMsg",
    "tapiRequestMakeCallA",
    "lineConfigDialog",
    "MMCSetPhoneInfo",
    "lineInitializeExA",
    "lineGetDevCapsW",
    "phoneInitializeExA",
    "phoneConfigDialogA",
    "lineReleaseUserUserInfo",
    "lineGetNewCalls",
    "phoneGetDisplay",
    "lineDevSpecific",
    "phoneInitialize",
    "lineGetCountryW",
    "lineGetIconA",
    "MMCSetServerConfig",
    "lineSetTollList",
    "lineGatherDigitsA",
    "phoneGetButtonInfo",
    "tapiRequestMediaCallA",
    "lineBlindTransfer",
    "phoneSetVolume",
    "lineAddProviderA",
    "linePark",
    "phoneSetButtonInfoW",
    "MMCAddProvider",
    "lineAgentSpecific",
    "lineCompleteTransfer",
    "lineGenerateDigitsW",
    "lineSetAgentGroup",
    "lineUnparkA",
    "lineMonitorTones",
    "lineSetupConferenceA",
    "tapiRequestMakeCall",
    "lineSetCallTreatment",
    "lineGetQueueListW",
    "linePickupW",
    "lineDialA",
    "lineGenerateDigitsA",
    "lineSetMediaControl",
    "lineGetIconW",
    "lineCreateAgentA",
    "linePrepareAddToConferenceA",
    "phoneSetButtonInfoA",
    "lineSetAgentStateEx",
    "lineSetLineDevStatus",
    "phoneShutdown",
    "lineGetCallInfo",
    "phoneGetButtonInfoA",
    "linePrepareAddToConferenceW",
    "MMCInitialize",
    "lineTranslateDialogA",
    "phoneGetDevCapsA",
    "lineSetCallParams",
    "tapiRequestMediaCall",
    "lineNegotiateAPIVersion",
    "lineGetAgentCapsW",
    "lineGetRequestA",
    "MMCConfigProvider",
    "lineTranslateDialog",
    "lineAccept",
    "lineCreateAgentSessionA",
    "linePickup",
    "lineGetAgentStatusA",
    "lineSetupConference",
    "internalRenameLocationW",
    "lineGetAddressStatusW",
    "lineHandoffW",
    "lineRemoveProvider",
    "phoneSetRing",
    "phoneSetHookSwitch",
    "MMCGetServerConfig",
    "lineSetQueueMeasurementPeriod",
    "internalPerformance",
    "lineHold",
    "MMCSetLineInfo",
    "lineGetAgentGroupListW",
    "lineGetAddressStatus",
    "NonAsyncEventThread",
    "lineGetTranslateCapsW",
    "lineGetCountry",
    "lineOpenA",
    "linePrepareAddToConference",
    "lineShutdown",
    "lineSetupTransferW",
    "phoneSetButtonInfo",
    "lineDevSpecificFeature",
    "lineOpenW",
    "lineSetMediaMode",
    "phoneGetMessage",
    "lineGetAgentInfo",
    "lineBlindTransferA",
    "lineSetupTransferA",
    "lineGetAddressIDW",
    "lineGetLineDevStatus",
    "MMCGetDeviceFlags",
    "TUISPIDLLCallback",
    "lineUnpark",
    "lineGetLineDevStatusW",
    "lineSetAppPriorityW",
    "lineCompleteCall",
    "lineGetDevConfig",
    "lineGetID",
    "internalNewLocationW",
    "MMCGetLineStatus",
    "lineGetAddressCapsW",
    "lineGetConfRelatedCalls",
    "lineGetProviderListW",
    "lineGetRequest",
    "linePickupA",
    "phoneGetIDW",
    "lineGetAgentSessionInfo",
    "lineSetNumRings",
    "lineSetupTransfer",
    "lineGetAgentCapsA",
    "phoneGetStatusMessages",
    "phoneGetData",
    "lineGetQueueInfo",
    "phoneNegotiateAPIVersion",
    "tapiGetLocationInfo",
    "lineRedirectA",
    "lineGetAddressCapsA",
    "phoneSetStatusMessages",
    "lineGetCallStatus",
    "lineGetLineDevStatusA",
    "lineGetAgentActivityListW",
    "lineGetRequestW",
    "MMCGetPhoneInfo",
    "lineSetAgentActivity",
    "lineAddToConference",
    "phoneInitializeExW",
    "lineDial",
    "MMCGetAvailableProviders",
    "lineDeallocateCall",
    "lineInitialize",
    "phoneGetLamp",
    "lineGetGroupListA",
    "lineGetProviderList",
    "lineSetTollListA",
    "lineCreateAgentSessionW",
    "lineGatherDigits",
    "tapiRequestMediaCallW",
    "LOpenDialAsst",
    "phoneGetID",
    "lineForwardW",
    "lineCreateAgentW",
    "internalRemoveLocation",
    "tapiRequestMakeCallW",
    "lineConfigDialogEditA",
    "lineGetAppPriorityA",
    "lineGenerateTone",
    "lineForward",
    "lineGetStatusMessages",
    "phoneGetDevCapsW",
    "lineSetStatusMessages",
    "phoneGetVolume",
    "lineParkA",
    "lineGetCountryA",
    "lineDialW",
    "lineConfigDialogA",
    "phoneGetHookSwitch",
    "phoneSetLamp",
    "lineAddProvider",
    "phoneGetButtonInfoW",
    "lineRegisterRequestRecipient",
    "lineSetAppPriority",
    "lineTranslateDialogW",
    "phoneDevSpecific",
    "tapiRequestDrop",
    "phoneGetRing",
    "lineSetCallData",
    "lineSetDevConfigW",
    "lineGetCallInfoA",
    "lineGenerateDigits",
    "phoneGetDevCaps",
    "lineGetAgentSessionList",
    "lineSecureCall",
    "phoneOpen",
    "phoneSetDisplay",
    "phoneSetData",
    "lineSwapHold",
    "lineMakeCallW",
    "lineGetNumRings",
    "lineUnparkW",
    "lineRemoveFromConference",
    "lineBlindTransferW",
    "phoneGetGain",
    "lineSetTollListW",
    "internalCreateDefLocation",
    "phoneConfigDialog",
    "lineClose",
    "phoneConfigDialogW",
    "lineProxyMessage",
    "lineSetCurrentLocation",
    "lineRedirectW",
    "lineGetGroupListW",
    "phoneGetStatusW",
    "lineUncompleteCall",
    "lineGetTranslateCapsA",
    "lineRedirect",
    "internalConfig",
    "lineGetMessage",
    "lineConfigDialogEdit",
    "lineGetDevConfigW",
    "lineGetProxyStatus",
    "lineMakeCallA",
    "lineMonitorDigits",
    "lineGetIcon",
    "lineGetIDW",
    "lineConfigDialogW",
    "phoneGetIconA",
    "lineGetQueueListA",
    "lineSetDevConfig",
    "lineTranslateAddressA",
    "phoneGetStatus",
    "lineAnswer",
    "lineGetAgentGroupListA",
    "lineHandoff",
    "MMCGetPhoneStatus",
    "lineSetTerminal",
    "lineAddProviderW",
    "lineGetAppPriorityW",
    "lineSetAgentState",
    "LocWizardDlgProc",
    "lineSetAgentMeasurementPeriod",
    "lineTranslateAddress",
    "lineGetAppPriority",
    "lineGetAgentStatusW",
    "lineParkW",
    "MMCGetProviderList",
    "MMCShutdown",
    "lineHandoffA",
    "lineNegotiateExtVersion",
    "tapiGetLocationInfoW",
    "lineSetAppPriorityA",
    "lineInitializeExW",
    "lineMakeCall",
    "lineGatherDigitsW",
    "MMCGetLineInfo",
    "lineGetProviderListA",
    "lineSetAppSpecific",
    "lineSetCallPrivilege",
    "phoneGetStatusA",
    "phoneGetIconW",
    "tapiGetLocationInfoA",
    "phoneGetIcon",
    "lineSetDevConfigA",
    "lineGetTranslateCaps",
    "lineGetCallInfoW",
    "MMCRemoveProvider",
    "lineOpen",
    "lineGetAddressCaps",
    "lineGetDevConfigA",
    "lineConfigProvider",
    "TAPIWndProc",
    "lineMonitorMedia",
    "lineSetCallQualityOfService",
    "lineGetIDA",
    "lineForwardA",
    "lineSendUserUserInfo",
    "phoneClose"
  ],
  "tapilua.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "tapiperf.dll": [
    "CollectTapiPerformanceData",
    "CloseTapiPerformanceData",
    "OpenTapiPerformanceData"
  ],
  "tapisrv.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "tapiui.dll": "No exports",
  "taskbarcpl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "taskcomp.dll": [
    "ShutdownAdapter",
    "SetSdNotification",
    "DeleteTaskNotification",
    "InitializeAdapter",
    "IsRegistering",
    "RegisterTaskNotification",
    "UpdateJobStatus"
  ],
  "taskschd.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "tbs.dll": [
    "Tbsi_Physical_Presence_Command",
    "Tbsi_Context_Create",
    "Tbsip_Context_Close",
    "Tbsi_Get_TCG_Log",
    "Tbsip_Cancel_Commands",
    "Tbsip_Submit_Command"
  ],
  "tbssvc.dll": [
    "ServiceMain"
  ],
  "tcpipcfg.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "tcpmib.dll": [
    "public: class CTcpMibABC & __thiscall CTcpMibABC::operator=(class CTcpMibABC const &)",
    "private: static unsigned long __stdcall CTcpMib::SnmpCallback(void *,struct HWND__ *,unsigned int,unsigned int,long,void *)",
    "public: unsigned long __thiscall CTcpMib::SnmpGetNext(char const *,char const *,struct SnmpVarBindList *)",
    "public: virtual unsigned long __thiscall CTcpMib::SnmpGet(char const *,char const *,struct AsnObjectIdentifier *,struct SnmpVarBindList *)",
    "public: virtual unsigned long __thiscall CTcpMib::RequestDeviceStatus(void *,unsigned long,unsigned short const *,unsigned short const *,unsigned long)",
    "private: long __thiscall CTcpMib::GetDeviceIdFromMib(unsigned short const *,unsigned long,unsigned short *,unsigned long,unsigned long *)",
    "public: __thiscall CTcpMibABC::CTcpMibABC(void)",
    "public: int __thiscall CTcpMib::IsValid(void)const",
    "public: virtual unsigned long __thiscall CTcpMib::RegisterDeviceStatusCallback(unsigned long (__stdcall*)(int,char const *,char const *,unsigned long,unsigned long,unsigned long),void * *)",
    "GetTcpMibPtr",
    "public: __thiscall CTcpMib::CTcpMib(void)",
    "public: virtual unsigned long __thiscall CTcpMib::GetDeviceDescription(char const *,char const *,unsigned long,unsigned short *,unsigned long)",
    "public: virtual long __thiscall CTcpMib::GetDeviceId(unsigned short const *,unsigned long,unsigned short *,unsigned long,unsigned long *)",
    "public: virtual unsigned long __thiscall CTcpMib::InitSnmp(void)",
    "public: virtual unsigned long __thiscall CTcpMib::SnmpGet(char const *,char const *,char const *,struct SnmpVarBindList *)",
    "public: __thiscall CTcpMibABC::CTcpMibABC(class CTcpMibABC const &)",
    "private: long __thiscall CTcpMib::GetPortListFromMib(unsigned short const *,unsigned char *,unsigned long,unsigned long *)",
    "const CTcpMibABC::`vftable'",
    "private: static int __stdcall CTcpMib::MapAsynchToPortStatus(unsigned long,struct _PORT_INFO_3W *)",
    "private: long __thiscall CTcpMib::GetDeviceIdFromIni(unsigned short const *,unsigned long,unsigned short *,unsigned long,unsigned long *)",
    "private: long __thiscall CTcpMib::SupportsPortMonMib(unsigned short const *,int *)",
    "public: unsigned long __thiscall CTcpMib::SnmpGet(char const *,char const *,struct SnmpVarBindList *)",
    "public: virtual int __thiscall CTcpMib::SupportsPrinterMib(char const *,char const *,unsigned long,int *)",
    "public: virtual long __thiscall CTcpMib::GetPortList(unsigned short const *,unsigned char *,unsigned long,unsigned long *)",
    "public: virtual unsigned long __thiscall CTcpMib::GetNextRequestId(unsigned long *)",
    "private: long __thiscall CTcpMib::GetPortListFromIni(unsigned short const *,unsigned char *,unsigned long,unsigned long *)",
    "public: virtual unsigned long __thiscall CTcpMib::SnmpGetNext(char const *,char const *,struct AsnObjectIdentifier *,struct SnmpVarBindList *)",
    "private: static unsigned long __stdcall CTcpMib::GetStatusFromVBL(void *,struct smiVALUE *,struct smiVALUE *,struct smiVALUE *)",
    "public: virtual int __thiscall CTcpMib::RFC1157ToString(struct SnmpVarBind *,unsigned short *,unsigned long,unsigned long *)",
    "public: virtual void __thiscall CTcpMib::UnInitSnmp(void)",
    "public: __thiscall CTcpMib::CTcpMib(class CTcpMib const &)",
    "const CTcpMib::`vftable'",
    "public: class CTcpMib & __thiscall CTcpMib::operator=(class CTcpMib const &)",
    "private: void __thiscall CTcpMib::ExitCSection(void)",
    "public: virtual __thiscall CTcpMib::~CTcpMib(void)",
    "private: void __thiscall CTcpMib::EnterCSection(void)",
    "public: virtual __thiscall CTcpMibABC::~CTcpMibABC(void)"
  ],
  "tcpmon.dll": [
    "const CTcpMibABC::`vftable'",
    "InitializePrintMonitor2",
    "const CPortABC::`vftable'",
    "public: class CTcpMibABC & __thiscall CTcpMibABC::operator=(class CTcpMibABC const &)",
    "public: __thiscall CPortABC::CPortABC(class CPortABC const &)",
    "public: virtual __thiscall CPortABC::~CPortABC(void)",
    "public: virtual unsigned long __thiscall CPortABC::Read(void * const,unsigned char *,unsigned long,unsigned long *)",
    "public: __thiscall CPortABC::CPortABC(void)",
    "public: __thiscall CTcpMibABC::CTcpMibABC(void)",
    "public: virtual __thiscall CTcpMibABC::~CTcpMibABC(void)",
    "public: __thiscall CTcpMibABC::CTcpMibABC(class CTcpMibABC const &)",
    "public: class CPortABC & __thiscall CPortABC::operator=(class CPortABC const &)"
  ],
  "tcpmonui.dll": [
    "const CTcpMibABC::`vftable'",
    "const CPortABC::`vftable'",
    "public: class CTcpMibABC & __thiscall CTcpMibABC::operator=(class CTcpMibABC const &)",
    "public: __thiscall CPortABC::CPortABC(class CPortABC const &)",
    "InitializePrintMonitorUI2",
    "public: virtual __thiscall CPortABC::~CPortABC(void)",
    "public: virtual unsigned long __thiscall CPortABC::Read(void * const,unsigned char *,unsigned long,unsigned long *)",
    "public: __thiscall CPortABC::CPortABC(void)",
    "LocalConfigurePortUI",
    "public: __thiscall CTcpMibABC::CTcpMibABC(void)",
    "public: virtual __thiscall CTcpMibABC::~CTcpMibABC(void)",
    "public: __thiscall CTcpMibABC::CTcpMibABC(class CTcpMibABC const &)",
    "LocalAddPortUI",
    "InitializePrintMonitorUI",
    "public: class CPortABC & __thiscall CPortABC::operator=(class CPortABC const &)"
  ],
  "tdh.dll": [
    "TdhEnumerateProviders",
    "TdhGetProperty",
    "TdhQueryProviderFieldInformation",
    "TdhGetEventMapInformation",
    "TdhEnumerateProviderFilters",
    "TdhFormatProperty",
    "TdhGetEventInformation",
    "TdhGetPropertySize",
    "TdhEnumerateRemoteWBEMProviders",
    "TdhQueryRemoteWBEMProviderFieldInformation",
    "TdhUnloadManifest",
    "TdhLoadManifest",
    "TdhEnumerateProviderFieldInformation",
    "TdhGetAllEventsInformation",
    "TdhGetPropertyOffsetAndSize",
    "TdhEnumerateRemoteWBEMProviderFieldInformation"
  ],
  "termmgr.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "termsrv.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "thawbrkr.dll": [
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "themecpl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "themeservice.dll": [
    "ThemeServiceMain"
  ],
  "themeui.dll": [
    "DllInstall",
    "DisplaySaveSettingsEx",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "AdvancedSettingSheetHelper"
  ],
  "thumbcache.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "tlscsp.dll": [
    "TLSFreeTSCertificate",
    "TLSCspShutdown",
    "TLSCspStartInstallCertificateThread",
    "TLSGetTSCertificate",
    "LsCsp_DecryptEnvelopedData",
    "TLSCspInit",
    "LsCsp_RetrieveSecret",
    "LsCsp_StoreSecret",
    "LsCsp_GetServerData",
    "LsCsp_EncryptHwid"
  ],
  "tpmcompc.dll": [
    "CHOOSER2_PickTargetComputer",
    "DllMain"
  ],
  "tquery.dll": [
    "public: void __thiscall CDriveInfo::GetDiskSpace(__int64 &,__int64 &)",
    "PerfmonCollect",
    "public: virtual void __thiscall CMemSerStream::PutWChar(unsigned short const *,unsigned long)",
    "public: virtual unsigned long __thiscall CKeyDeComp::Occurrence(void)",
    "public: void __thiscall CPhysStorage::ReturnBuffer(unsigned long,int,int)",
    "public: virtual unsigned long __thiscall CPersScopeDeComp::NextWorkId(void)",
    "public: virtual __thiscall CPersScopeDeComp::~CPersScopeDeComp(void)",
    "public: virtual void __thiscall CPersDeComp::GetRankingInfo(unsigned long &,unsigned long &,float &,float &)const",
    "public: unsigned long __thiscall CDriveInfo::GetSectorSize(void)",
    "public: virtual unsigned long __thiscall CMemDeSerStream::GetULong(void)",
    "public: void __thiscall CSmartBuffer::Refill(unsigned long)",
    "CreateSecurityStoreStorage",
    "CreatePropMapperStorage",
    "public: __thiscall CPersScopeDeComp::CPersScopeDeComp(class CPhysIndex &,class CDiskIndex *,unsigned long,int,int)",
    "public: virtual void __thiscall CMemSerStream::PutUShort(unsigned short)",
    "public: virtual unsigned long __thiscall CPersDeComp::NextWorkId(void)",
    "public: virtual void __thiscall CMemSerStream::PutWString(unsigned short const *)",
    "PerfmonOpen",
    "protected: void __thiscall CPersDeComp::SeekToRankIndex(void)",
    "public: void __thiscall CCiFile::Read(void)",
    "_ForceMasterMerge@16",
    "public: virtual unsigned long __thiscall CPersScopeDeComp::SeekWorkId(unsigned long)",
    "UseLowFragmentationHeap",
    "public: virtual unsigned long __thiscall CPersDeComp::CurWorkId(void)",
    "public: virtual void __thiscall CPersDeComp::WorkIdCountEstimate(struct tag_WIDCOUNT_ESTIMATE &)",
    "public: virtual unsigned long __thiscall CMemDeSerStream::PeekULong(void)",
    "public: virtual char * __thiscall CMemDeSerStream::GetString(void)",
    "public: virtual class CKeyBuf const * __thiscall CKeyDeComp::GetKey(struct BitOffset *)",
    "public: virtual unsigned long __thiscall CKeyDeComp::HitCount(void)",
    "void __stdcall GetStackTrace(char *,unsigned long)",
    "public: virtual unsigned long __thiscall CKeyDeComp::OccurrenceCount(void)",
    "public: static void __stdcall CDriveInfo::GetDrive(unsigned short const *,unsigned short *)",
    "public: virtual void __thiscall CMemSerStream::PutULong(unsigned long)",
    "public: virtual unsigned long __thiscall CCursor::GetRankVector(long *,unsigned long)",
    "PerfmonIDXOpen",
    "public: void __thiscall CUnNormalizer::UnNormalizeKey(class CKeyBuf const &,struct tagPROPVARIANT &,unsigned short *,unsigned long)",
    "public: void __thiscall CFullPath::MakePath(unsigned short const *)",
    "public: __thiscall CFullPropSpec::CFullPropSpec(class CFullPropSpec const &)",
    "public: __thiscall CPersDeCompLatest::CPersDeCompLatest(class CPersIndex *,unsigned long,int,int)",
    "ExternPropagateEventToOpenQueries",
    "AccessRetailTracer",
    "public: __thiscall CPersIndex::CPersIndex(class PStorage &,unsigned long,unsigned long,enum CDiskIndex::EDiskIndexType,enum PStorage::EOpenMode,int,class CWidSet *,unsigned long,class CMergeLog *,class CStringNormalizer const *,class CResManager *)",
    "private: virtual void __thiscall CPhysIndex::ReOpenStream(void)",
    "AccessDebugTracer",
    "private: virtual void __thiscall CPersDeCompLatest::FinishKeyLoad(void)",
    "public: __thiscall CPidLookupTable::~CPidLookupTable(void)",
    "public: virtual void __thiscall CMemSerStream::PutString(char const *)",
    "public: virtual void __thiscall CMemDeSerStream::SkipWChar(unsigned long)",
    "public: void __thiscall CBitStream::SetPosition(unsigned long)",
    "public: void __thiscall CiDirSearchPageSmart::MapPage(unsigned long,int)",
    "public: virtual unsigned long __thiscall CKeyDeComp::EOFileOcc(void)",
    "protected: unsigned long __thiscall CiDirectory::DoWriteModeSeek(class CKeyBuf const &,unsigned long,unsigned long,class CiDirSearchPageSmart &)",
    "public: __thiscall CPersDeCompLatest::CPersDeCompLatest(class CPersIndex *,struct BitOffset &,class CKeyBuf const &,class CKey const *,unsigned long,int,int)",
    "public: virtual unsigned long __thiscall CPersScopeDeComp::WorkIdCount(void)",
    "public: virtual class CKeyBuf const * __thiscall CPersScopeDeComp::GetNextKey(struct BitOffset *)",
    "public: virtual unsigned long __thiscall CPersDeComp::SeekWorkId(unsigned long)",
    "ChangeToInitialDirectory",
    "DllCanUnloadNow",
    "SetInitialDirectory",
    "public: virtual unsigned char __thiscall CMemDeSerStream::GetByte(void)",
    "public: __thiscall CPersScopeDeComp::CPersScopeDeComp(class CPhysIndex &,class CDiskIndex *,struct BitOffset &,class CKeyBuf const &,class CKey const *,unsigned long,int,int)",
    "public: virtual unsigned long __thiscall CPersDeComp::Occurrence(void)",
    "public: virtual void __thiscall CMemSerStream::PutLong(long)",
    "DllGetClassObject",
    "public: __thiscall XAct::XAct(void)",
    "public: virtual void __thiscall CMemSerStream::PutChar(char const *,unsigned long)",
    "public: class PRcovStorageObj * __thiscall CiStorage::QueryPidLookupTable(unsigned long)",
    "public: virtual unsigned long __thiscall CPersDeComp::NextOccurrence(void)",
    "public: virtual void __thiscall CMemDeSerStream::SkipLong(void)",
    "public: void __thiscall CKeyDeComp::GetOffset(struct BitOffset &)",
    "public: __thiscall CiStorage::CiStorage(unsigned short const *,unsigned long,struct ICiCAdviseStatus *,unsigned long,int)",
    "public: virtual __thiscall CPhysStorage::~CPhysStorage(void)",
    "public: virtual unsigned long __thiscall CKeyDeComp::MaxOccurrence(void)",
    "public: virtual unsigned long __thiscall CPersDeComp::Next(void)",
    "public: virtual class CKeyBuf const * __thiscall CPersDeComp::GetNextKey(struct BitOffset *)",
    "RetailTracerDisable",
    "public: virtual void __thiscall CMemDeSerStream::SkipGUID(void)",
    "public: int __thiscall CFullPropSpec::SetProperty(unsigned short const *)",
    "protected: void __thiscall CPersDeComp::LoadKey(void)",
    "public: virtual __thiscall CMemSerStream::~CMemSerStream(void)",
    "public: virtual void __thiscall CMemDeSerStream::SkipFloat(void)",
    "_NtQuerySystemInformation@16",
    "ExceptInitialize",
    "class CCoTaskAllocator CoTaskAllocator",
    "public: virtual void __thiscall CMemDeSerStream::GetBlob(unsigned char *,unsigned long)",
    "public: virtual class CKeyBuf const * __thiscall CKeyDeComp::GetKey(void)",
    "public: virtual void __thiscall CMemSerStream::PutGUID(struct _GUID const &)",
    "public: virtual void __thiscall CPersScopeDeComp::WorkIdCountEstimate(struct tag_WIDCOUNT_ESTIMATE &)",
    "public: virtual class CRankCursor * __thiscall CPersDeComp::GetRankCursor(float,float,class XRefPtr &,unsigned long,int &)",
    "public: virtual double __thiscall CMemDeSerStream::GetDouble(void)",
    "public: virtual void __thiscall CMemDeSerStream::GetGUID(struct _GUID &)",
    "public: virtual void __thiscall CPersDeComp::RatioFinished(unsigned long &,unsigned long &)",
    "public: virtual float __thiscall CMemDeSerStream::GetFloat(void)",
    "void * __stdcall ciNew(unsigned int)",
    "public: __thiscall CDriveInfo::CDriveInfo(unsigned short const *,unsigned long)",
    "public: __thiscall CFullPath::CFullPath(unsigned short const *)",
    "public: __thiscall CMergeLog::CMergeLog(int,class PRcovStorageObj &)",
    "public: virtual void __thiscall CMemDeSerStream::SkipULong(void)",
    "public: virtual long __thiscall CMemDeSerStream::GetLong(void)",
    "public: static int __stdcall CDriveInfo::ContainsDrive(unsigned short const *)",
    "public: virtual void __thiscall CMemSerStream::PutBlob(unsigned char const *,unsigned long)",
    "public: virtual void __thiscall CMemDeSerStream::SkipChar(unsigned long)",
    "RetailTracerEnable",
    "public: virtual unsigned short __thiscall CMemDeSerStream::GetUShort(void)",
    "RetailTracerReleaseAll",
    "public: void __thiscall CStorageVariant::SetLPWSTR(unsigned short const *,unsigned int)",
    "PerfmonIDXClose",
    "public: virtual unsigned long __thiscall CKeyDeComp::NextOccurrence(void)",
    "public: static class CWidSet * __stdcall CWidSet::OpenExistingWidSet(class PStorage &,unsigned long,unsigned int,int,class CResManager *)",
    "public: virtual void __thiscall CMemSerStream::PutDouble(double)",
    "PerfmonClose",
    "public: virtual __thiscall CPersDeComp::~CPersDeComp(void)",
    "public: virtual unsigned short * __thiscall CMemDeSerStream::GetWString(void)",
    "DllRegisterServer",
    "public: virtual __thiscall CiStorage::~CiStorage(void)",
    "PerfmonIDXCollect",
    "DllUnregisterServer",
    "public: virtual void __thiscall CMemDeSerStream::SkipBlob(unsigned long)",
    "public: __thiscall CPidLookupTable::CPidLookupTable(void)",
    "public: virtual void __thiscall CMemDeSerStream::SkipUShort(void)",
    "CIState",
    "public: virtual void __thiscall CMemDeSerStream::SkipByte(void)",
    "public: virtual void __thiscall CMemDeSerStream::SkipDouble(void)",
    "public: __thiscall CMemSerStream::CMemSerStream(unsigned char *,unsigned long)",
    "public: void __thiscall CFullPropSpec::SetProperty(unsigned long)",
    "protected: void __thiscall CAllocStorageVariant::ResetType(class PMemoryAllocator &)",
    "public: void __thiscall CSmartBuffer::Free(void)",
    "public: virtual unsigned long __thiscall CPersDeComp::OccurrenceCount(void)",
    "public: int __thiscall CDriveInfo::IsWriteProtected(void)",
    "void * __stdcall ciNewNoThrow(unsigned int)",
    "void __stdcall ciDelete(void *)",
    "public: __thiscall CUnNormalizer::CUnNormalizer(void)",
    "public: int __thiscall CPidLookupTable::Init(class PRcovStorageObj *)",
    "public: unsigned long __thiscall CPidLookupTable::EnumerateProperty(class CFullPropSpec &,unsigned int &)",
    "public: virtual void __thiscall CMemSerStream::PutFloat(float)",
    "void __stdcall GetStackTraceW(unsigned short *,unsigned long)",
    "public: virtual void __thiscall CMemDeSerStream::GetWChar(unsigned short *,unsigned long)",
    "public: virtual unsigned long __thiscall CPersDeComp::WorkIdCount(void)",
    "public: virtual void __thiscall CMemDeSerStream::GetChar(char *,unsigned long)",
    "public: int __thiscall CDriveInfo::IsSameDrive(unsigned short const *)",
    "public: virtual void __thiscall CMemSerStream::PutByte(unsigned char)",
    "public: virtual class CKeyBuf const * __thiscall CPersDeComp::GetNextKey(void)"
  ],
  "traffic.dll": [
    "TcQueryFlowA",
    "TcRegisterClient",
    "TcGetFlowNameW",
    "TcSetFlowA",
    "TcDeleteFilter",
    "TcEnumerateInterfaces",
    "TcSetInterface",
    "TcCloseInterface",
    "TcOpenInterfaceW",
    "TcGetFlowNameA",
    "TcDeleteFlow",
    "TcQueryFlowW",
    "TcGetInterfaceList",
    "TcAddFlow",
    "TcAddFilter",
    "TcQueryInterface",
    "TcEnumerateFlows",
    "TcSetSocketFlow",
    "TcModifyFlow",
    "TcSetFlowW",
    "TcDeregisterClient",
    "TcOpenInterfaceA"
  ],
  "trkwks.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "tsbyuv.dll": [
    "DriverProc"
  ],
  "tscfgwmi.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "tsddd.dll": "No exports",
  "tsgqec.dll": [
    "InitializeQec",
    "UninitializeQec"
  ],
  "tsmf.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "tspubwmi.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "tvratings.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "twext.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "txflog.dll": [
    "DllGetClassObject"
  ],
  "txfw32.dll": [
    "TxfSetThreadMiniVersionForCreate",
    "TxfLogRecordGetFileName",
    "TxfLogDestroyReadContext",
    "TxfLogCreateRangeReadContext",
    "TxfGetThreadMiniVersionForCreate",
    "TxfLogReadRecords",
    "TxfLogRecordGetGenericType",
    "TxfReadMetadataInfo",
    "TxfLogCreateFileReadContext"
  ],
  "tzres.dll": "No exports",
  "UIAnimation.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "UIAutomationCore.dll": [
    "WindowPattern_SetWindowVisualState",
    "UiaHasServerSideProvider",
    "TextRange_GetAttributeValue",
    "SynchronizedInputPattern_Cancel",
    "TextRange_CompareEndpoints",
    "UiaSetFocus",
    "TextRange_FindText",
    "TextRange_RemoveFromSelection",
    "GridPattern_GetItem",
    "DockPattern_SetDockPosition",
    "UiaEventRemoveWindow",
    "UiaHUiaNodeFromVariant",
    "UiaTextRangeRelease",
    "UiaGetErrorDescription",
    "TextPattern_GetVisibleRanges",
    "ScrollPattern_Scroll",
    "TextRange_Select",
    "UiaRaiseStructureChangedEvent",
    "TextPattern_GetSelection",
    "UiaReturnRawElementProvider",
    "TextRange_ExpandToEnclosingUnit",
    "TransformPattern_Move",
    "UiaRegisterProviderCallback",
    "UiaRemoveEvent",
    "UiaNodeFromPoint",
    "UiaHTextRangeFromVariant",
    "UiaNodeRelease",
    "TextPattern_get_SupportedTextSelection",
    "TextPattern_RangeFromPoint",
    "UiaRaiseAutomationPropertyChangedEvent",
    "TextRange_GetEnclosingElement",
    "InvokePattern_Invoke",
    "LegacyIAccessiblePattern_DoDefaultAction",
    "UiaLookupId",
    "TextRange_GetBoundingRectangles",
    "ValuePattern_SetValue",
    "WindowPattern_WaitForInputIdle",
    "ExpandCollapsePattern_Collapse",
    "TextRange_AddToSelection",
    "DllCanUnloadNow",
    "LegacyIAccessiblePattern_GetIAccessible",
    "DllGetClassObject",
    "UiaGetPropertyValue",
    "TextRange_FindAttribute",
    "ScrollItemPattern_ScrollIntoView",
    "UiaClientsAreListening",
    "LegacyIAccessiblePattern_SetValue",
    "TextRange_MoveEndpointByUnit",
    "SelectionItemPattern_AddToSelection",
    "UiaNodeFromHandle",
    "UiaFind",
    "UiaHostProviderFromHwnd",
    "TextRange_ScrollIntoView",
    "UiaNavigate",
    "TogglePattern_Toggle",
    "RangeValuePattern_SetValue",
    "TextRange_Clone",
    "VirtualizedItemPattern_Realize",
    "TextPattern_RangeFromChild",
    "ExpandCollapsePattern_Expand",
    "TransformPattern_Resize",
    "SelectionItemPattern_RemoveFromSelection",
    "SynchronizedInputPattern_StartListening",
    "UiaHPatternObjectFromVariant",
    "UiaGetRuntimeId",
    "UiaGetRootNode",
    "WindowPattern_Close",
    "UiaGetUpdatedCache",
    "UiaNodeFromFocus",
    "UiaPatternRelease",
    "TextRange_MoveEndpointByRange",
    "UiaAddEvent",
    "UiaGetPatternProvider",
    "UiaGetReservedMixedAttributeValue",
    "MultipleViewPattern_SetCurrentView",
    "TransformPattern_Rotate",
    "MultipleViewPattern_GetViewName",
    "ItemContainerPattern_FindItemByProperty",
    "UiaRaiseAutomationEvent",
    "UiaRaiseAsyncContentLoadedEvent",
    "DllRegisterServer",
    "DllUnregisterServer",
    "SelectionItemPattern_Select",
    "TextPattern_get_DocumentRange",
    "TextRange_GetChildren",
    "LegacyIAccessiblePattern_Select",
    "UiaEventAddWindow",
    "TextRange_Compare",
    "UiaNodeFromProvider",
    "TextRange_Move",
    "TextRange_GetText",
    "ScrollPattern_SetScrollPercent",
    "UiaGetReservedNotSupportedValue"
  ],
  "UIHub.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "UIRibbon.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllMain"
  ],
  "UIRibbonRes.dll": "No exports",
  "UXInit.dll": "No exports",
  "UserAccountControlSettings.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "uDWM.dll": "No exports",
  "ubpm.dll": [
    "UbpmConfigureTriggerConsumer",
    "UbpmQueryTriggerConsumerStatus",
    "UbpmGenerateTrigger",
    "UbpmControlTriggerConsumer",
    "UbpmUnregisterTriggerProvider",
    "UbpmApiBufferFree",
    "UbpmInitialize",
    "UbpmGenerateNotification",
    "UbpmOpenTriggerConsumerHandle",
    "UbpmRegisterTriggerConsumer",
    "UbpmOpenRootHandle",
    "UbpmCloseTriggerProviderHandle",
    "UbpmCloseRootHandle",
    "UbpmCloseTriggerConsumerHandle",
    "UbpmTerminate",
    "UbpmUnregisterTriggerConsumer",
    "UbpmRegisterTriggerProvider",
    "UbpmOpenTriggerProviderHandle"
  ],
  "ucmhc.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "udhisapi.dll": [
    "TerminateExtension",
    "GetExtensionVersion",
    "HttpExtensionProc"
  ],
  "uexfat.dll": [
    "public: __thiscall EXFAT_VOL::EXFAT_VOL(void)",
    "public: enum FORMAT_ERROR_CODE __thiscall EXFAT_VOL::Initialize(class WSTRING const *,class MESSAGE *,unsigned char,unsigned char,enum _MEDIA_TYPE,unsigned char,unsigned char)",
    "public: virtual unsigned char __thiscall CLUSTER_CHAIN::Write(void)",
    "public: unsigned long __thiscall EXFAT_DIRENT::QueryStartingCluster(void)",
    "public: void __thiscall FAT::FreeChain(class EXFATBITMAP *,unsigned long)",
    "public: unsigned char __thiscall CLUSTER_CHAIN::WriteAndSkipBadSectors(void)",
    "public: __thiscall EXFAT_DIRENT::EXFAT_DIRENT(void)",
    "public: virtual __thiscall EXFAT_DIRENT::~EXFAT_DIRENT(void)",
    "public: unsigned char __thiscall EXFAT_DIRENT::Initialize(class EXFAT_SA *,void *,class EXFATDIR *,unsigned long)",
    "public: virtual unsigned char __thiscall CLUSTER_CHAIN::Read(void)",
    "public: __thiscall EXFAT_SA::EXFAT_SA(void)",
    "GetFilesystemInformation",
    "public: virtual __thiscall EXFATDIR::~EXFATDIR(void)",
    "public: unsigned char __thiscall EXFAT_DIRENT::SetStartingCluster(unsigned long)",
    "ChkdskEx",
    "public: virtual __thiscall CLUSTER_CHAIN::~CLUSTER_CHAIN(void)",
    "public: unsigned char __thiscall CLUSTER_CHAIN::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class EXFAT_SA *,class FAT const *,unsigned long,unsigned long,unsigned char)",
    "public: __int64 __thiscall EXFAT_DIRENT::QueryFileSize(void)",
    "public: unsigned long __thiscall FAT::QueryNthCluster(unsigned long,unsigned long)const",
    "public: unsigned long __thiscall FAT::AllocChain(class EXFATBITMAP *,unsigned long,unsigned long *)",
    "public: unsigned long __thiscall FAT::QueryLengthOfChain(unsigned long,unsigned long *)const",
    "Format",
    "public: virtual __thiscall EXFAT_SA::~EXFAT_SA(void)",
    "FormatEx",
    "Chkdsk",
    "public: unsigned char __thiscall EXFAT_DIRENT::SetFileSize(__int64)",
    "public: unsigned char __thiscall EXFATDIR::Initialize(class HMEM *,class LOG_IO_DP_DRIVE *,class EXFAT_SA *,class FAT const *,unsigned long,unsigned long,unsigned char)",
    "public: unsigned char __thiscall EXFAT_DIRENT::VerifyAndFixPhase2(class EXFATBITMAP *,class EXFATBITMAP *,class WSTRING *,unsigned char,unsigned char,unsigned char,enum FIX_LEVEL,unsigned char *,class MESSAGE *)",
    "public: virtual __thiscall EXFAT_VOL::~EXFAT_VOL(void)",
    "public: unsigned char __thiscall CLUSTER_CHAIN::ReadAndRecordBadSectors(class EXFATSECRUNBITMAP *)",
    "Recover",
    "public: __thiscall EXFATDIR::EXFATDIR(void)",
    "public: unsigned long __thiscall FAT::QueryAllocatedClusters(void)const",
    "public: unsigned char __thiscall EXFAT_SA::Initialize(class LOG_IO_DP_DRIVE *,class MESSAGE *)",
    "public: __thiscall CLUSTER_CHAIN::CLUSTER_CHAIN(void)"
  ],
  "ufat.dll": [
    "public: unsigned char __thiscall FAT_DIRENT::IsValidLastAccessTime(void)const",
    "public: virtual unsigned char __thiscall CLUSTER_CHAIN::Write(void)",
    "public: unsigned long __thiscall REAL_FAT_SA::QueryFreeSectors(void)const",
    "public: virtual __thiscall FAT_DIRENT::~FAT_DIRENT(void)",
    "public: unsigned char __thiscall FAT_DIRENT::IsValidLastWriteTime(void)const",
    "public: unsigned char __thiscall FAT_DIRENT::QueryLastAccessTime(union _LARGE_INTEGER *)const",
    "public: virtual __thiscall FILEDIR::~FILEDIR(void)",
    "private: void __thiscall FAT::Set12(unsigned long,unsigned long)",
    "public: unsigned char __thiscall FATDIR::QueryLongName(long,class WSTRING *)",
    "public: unsigned char __thiscall FAT_DIRENT::IsValidCreationTime(void)const",
    "public: virtual unsigned char __thiscall CLUSTER_CHAIN::Read(void)",
    "public: void __thiscall FAT::FreeChain(unsigned long)",
    "GetFilesystemInformation",
    "public: struct _EA * __thiscall EA_SET::GetEa(unsigned long,long *,unsigned char *)",
    "ChkdskEx",
    "private: unsigned long __thiscall FAT::Index12(unsigned long)const",
    "public: virtual __thiscall CLUSTER_CHAIN::~CLUSTER_CHAIN(void)",
    "public: unsigned long __thiscall FAT::QueryNthCluster(unsigned long,unsigned long)const",
    "public: __thiscall REAL_FAT_SA::REAL_FAT_SA(void)",
    "public: virtual __thiscall EA_SET::~EA_SET(void)",
    "public: unsigned short __thiscall EA_HEADER::QueryEaSetClusterNumber(unsigned short)const",
    "public: __thiscall FAT_SA::FAT_SA(void)",
    "public: unsigned long __thiscall FAT::QueryLengthOfChain(unsigned long,unsigned long *)const",
    "public: virtual __thiscall ROOTDIR::~ROOTDIR(void)",
    "public: unsigned char __thiscall FAT_DIRENT::QueryCreationTime(union _LARGE_INTEGER *)const",
    "public: __thiscall ROOTDIR::ROOTDIR(void)",
    "public: unsigned char __thiscall CLUSTER_CHAIN::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class FAT_SA *,class FAT const *,unsigned long,unsigned long)",
    "public: __thiscall FAT_DIRENT::FAT_DIRENT(void)",
    "Format",
    "public: virtual __thiscall FAT_SA::~FAT_SA(void)",
    "public: unsigned char __thiscall FAT_DIRENT::QueryName(class WSTRING *)const",
    "FormatEx",
    "public: __thiscall EA_SET::EA_SET(void)",
    "public: virtual unsigned char __thiscall EA_SET::Read(void)",
    "public: void * __thiscall FATDIR::SearchForDirEntry(class WSTRING const *)",
    "public: unsigned char __thiscall FAT_DIRENT::Initialize(void *)",
    "Chkdsk",
    "public: virtual __thiscall REAL_FAT_SA::~REAL_FAT_SA(void)",
    "public: unsigned long __thiscall FAT::AllocChain(unsigned long,unsigned long *)",
    "public: __thiscall CLUSTER_CHAIN::CLUSTER_CHAIN(void)",
    "public: virtual __thiscall EA_HEADER::~EA_HEADER(void)",
    "public: unsigned char __thiscall EA_HEADER::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class FAT_SA *,class FAT const *,unsigned long,unsigned long)",
    "public: __thiscall FILEDIR::FILEDIR(void)",
    "public: virtual unsigned char __thiscall REAL_FAT_SA::Initialize(class LOG_IO_DP_DRIVE *,class MESSAGE *,unsigned char)",
    "public: unsigned char __thiscall FAT_SA::QueryCensusAndRelocate(struct _CENSUS_REPORT *,class INTSTACK *,unsigned char *)",
    "Recover",
    "public: unsigned char __thiscall FAT_DIRENT::Initialize(void *,unsigned char)",
    "public: unsigned char __thiscall ROOTDIR::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,unsigned long,long)",
    "public: unsigned long __thiscall FAT_SA::QueryFileStartingCluster(class WSTRING const *,class HMEM *,class FATDIR * *,unsigned char *,class FAT_DIRENT *)",
    "public: unsigned char __thiscall EA_SET::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class FAT_SA *,class FAT const *,unsigned long,unsigned long)",
    "public: virtual unsigned char __thiscall REAL_FAT_SA::Read(class MESSAGE *)",
    "public: __thiscall EA_HEADER::EA_HEADER(void)",
    "public: unsigned long __thiscall FAT::QueryAllocatedClusters(void)const",
    "public: unsigned char __thiscall FILEDIR::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class FAT_SA *,class FAT const *,unsigned long)",
    "public: unsigned char __thiscall FAT_DIRENT::QueryLastWriteTime(union _LARGE_INTEGER *)const",
    "public: unsigned char __thiscall REAL_FAT_SA::InitFATChkDirty(class LOG_IO_DP_DRIVE *,class MESSAGE *)"
  ],
  "uicom.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "ulib.dll": [
    "public: class FSTRING & __thiscall FSTRING::operator=(class FSTRING const &)",
    "public: void __thiscall WSTRING::DeleteChAt(unsigned long,unsigned long)",
    "public: virtual unsigned char __thiscall DSTRING::Resize(unsigned long)",
    "private: static unsigned char WSTRING::_UseAnsiConversionsPrev",
    "protected: void __thiscall OBJECT::Construct(void)",
    "const WSTRING::`vftable'",
    "public: unsigned char __thiscall PATH::IsDrive(void)const",
    "public: virtual unsigned char __thiscall STRING_ARRAY::Sort(unsigned char)",
    "void * __stdcall FindFirstFileW(class PATH const *,struct _WIN32_FIND_DATAW *)",
    "public: unsigned char __thiscall WSTRING::Initialize(char const *,unsigned long)",
    "public: static void __stdcall WSTRING::SetAnsiConversions(void)",
    "public: __thiscall MESSAGE::MESSAGE(void)",
    "public: static void __stdcall SYSTEM::FreeLibraryHandle(void *)",
    "public: unsigned char __thiscall FSN_FILTER::SetAttributes(unsigned long,unsigned long,unsigned long)",
    "public: unsigned short __thiscall WSTRING::SetChAt(unsigned short,unsigned long)",
    "public: unsigned char __thiscall KEYBOARD::IsKeyAvailable(unsigned char *)const",
    "public: static void __stdcall WSTRING::SetOemConversions(void)",
    "public: __thiscall MEM_ALLOCATOR::MEM_ALLOCATOR(void)",
    "public: __thiscall LIST::LIST(void)",
    "public: unsigned char __thiscall PATH::HasWildCard(void)const",
    "public: unsigned char __thiscall TIMEINFO::ConvertToLocal(void)",
    "public: class PATH * __thiscall PATH::QueryMountPointPath(void)",
    "public: void __thiscall ARGUMENT_LEXEMIZER::PutMultipleSwitch(char const *)",
    "public: virtual unsigned char __cdecl PROGRAM::DisplayMessage(unsigned long,enum MESSAGE_TYPE,char *,...)const",
    "public: unsigned char __thiscall OBJECT::IsSameClass(class OBJECT const *)const",
    "public: unsigned char __thiscall WSTRING::operator<(class WSTRING const &)const",
    "public: void __thiscall ARGUMENT_LEXEMIZER::SetAllowSwitchGlomming(unsigned char)",
    "public: virtual unsigned char __thiscall DSTRING::NewBuf(unsigned long)",
    "public: unsigned char __thiscall FSN_FILTER::SetFileName(char const *)",
    "public: __thiscall STRING_ARGUMENT::STRING_ARGUMENT(void)",
    "public: unsigned char __thiscall WSTRING::Initialize(long)",
    "public: void __thiscall MESSAGE::Unlock(void)",
    "public: void __thiscall SCREEN::QueryScreenSize(unsigned short *,unsigned short *,unsigned short *,unsigned short *)const",
    "protected: __thiscall OBJECT::OBJECT(void)",
    "public: unsigned char __cdecl MESSAGE::DisplayMsg(unsigned long,enum MESSAGE_TYPE,unsigned long,char const *,...)",
    "public: unsigned char __thiscall BSTRING::Initialize(char const *,unsigned long)",
    "public: virtual __thiscall FSN_FILTER::~FSN_FILTER(void)",
    "protected: void __thiscall BSTRING::PutString(char *,unsigned long)",
    "public: unsigned char __thiscall ARGUMENT_LEXEMIZER::PrepareToParse(class WSTRING *)",
    "public: unsigned long __thiscall WSTRING::Strstr(class WSTRING const *)const",
    "public: unsigned char __thiscall SVILOGFILES::GetHandleNewLogFile(void * *)",
    "public: virtual class ITERATOR * __thiscall ARRAY::QueryIterator(void)const",
    "public: virtual unsigned char __thiscall FSTRING::Resize(unsigned long)",
    "public: class WSTRING * __thiscall WSTRING::QueryString(unsigned long,unsigned long)const",
    "public: unsigned char __thiscall SCREEN::EraseScreenAndResetAttribute(void)",
    "public: unsigned char __thiscall COMM_DEVICE::SetIdsr(unsigned char)",
    "public: unsigned char __thiscall ARRAY::Initialize(unsigned long,unsigned long)",
    "public: unsigned char __thiscall SVILOGFILES::NewLogFileName(class WSTRING *)",
    "public: unsigned char __thiscall STREAM::ReadWLine(unsigned short *,unsigned long,unsigned long *,unsigned char,unsigned long)",
    "unsigned char __stdcall Export(class ARRAY *,unsigned char (__cdecl*)(void *,unsigned long,unsigned char,char *,...),void *)",
    "public: virtual __thiscall MESSAGE_ID_COUNT::~MESSAGE_ID_COUNT(void)",
    "public: unsigned char __thiscall COMM_DEVICE::SetBaudRate(unsigned long)",
    "public: unsigned char __thiscall WSTRING::operator!=(class WSTRING const &)const",
    "public: unsigned char __thiscall WSTRING::operator<=(class WSTRING const &)const",
    "public: __thiscall ARGUMENT_LEXEMIZER::ARGUMENT_LEXEMIZER(void)",
    "public: unsigned char __thiscall LIST::Initialize(void)",
    "public: unsigned char __cdecl MESSAGE::DisplayMsg(unsigned long,char const *,...)",
    "public: virtual __thiscall SCREEN::~SCREEN(void)",
    "public: unsigned char __thiscall BITVECTOR::Initialize(unsigned long,enum BIT,unsigned long *)",
    "public: __thiscall TIMEINFO::TIMEINFO(void)",
    "public: virtual unsigned char __thiscall SORTED_LIST::DeleteAllMembers(void)",
    "public: virtual unsigned char __thiscall MESSAGE::WaitForUserSignal(void)",
    "public: unsigned char __thiscall WSTRING::operator>=(class WSTRING const &)const",
    "public: __thiscall FSN_FILTER::FSN_FILTER(void)",
    "public: void __thiscall ARGUMENT_LEXEMIZER::PutSeparators(char const *)",
    "public: char * __thiscall WSTRING::QuerySTR(unsigned long,unsigned long,char *,unsigned long,unsigned char)const",
    "public: static class FSN_FILE * __stdcall SYSTEM::MakeTemporaryFile(class WSTRING const *,class PATH const *)",
    "public: unsigned long __thiscall OBJECT::QueryClassId(void)const",
    "public: static unsigned char __stdcall SQMEXPORT::UploadSqmFromFile(void *)",
    "public: unsigned char __thiscall LONG_ARGUMENT::Initialize(char *)",
    "public: static class SCREEN * __stdcall SCREEN::Cast(class OBJECT const *)",
    "public: static char * __stdcall MBSTR::CharNextW(char *)",
    "public: __thiscall COMM_DEVICE::COMM_DEVICE(void)",
    "public: unsigned char __thiscall COMM_DEVICE::SetXon(unsigned char)",
    "public: unsigned char __thiscall WSTRING::operator>(class WSTRING const &)const",
    "private: static int __stdcall WSTRING::CheckSpace(unsigned short *)",
    "public: unsigned char __thiscall PATH::EndsWithDelimiter(void)const",
    "public: unsigned char __thiscall ARRAY::Insert(class OBJECT *,unsigned long)",
    "public: class PATH * __thiscall PATH::QueryFullPath(void)const",
    "public: virtual __thiscall ARRAY::~ARRAY(void)",
    "public: unsigned long __thiscall BITVECTOR::SetSize(unsigned long,enum BIT)",
    "public: void __thiscall ARGUMENT_LEXEMIZER::PutMultipleSwitch(class WSTRING const *)",
    "public: unsigned char __thiscall COMM_DEVICE::Initialize(class PATH const *,unsigned char *)",
    "public: static class FSN_DIRECTORY * __stdcall SYSTEM::MakeDirectory(class PATH const *,class PATH const *,enum _COPY_ERROR *,unsigned long (__stdcall*)(union _LARGE_INTEGER,union _LARGE_INTEGER,union _LARGE_INTEGER,union _LARGE_INTEGER,unsigned long,unsigned long,void *,void *,void *),void *,int *,unsigned long)",
    "public: virtual unsigned char __thiscall SEQUENTIAL_CONTAINER::DeleteAllMembers(void)",
    "public: unsigned char __thiscall WSTRING::InsertString(unsigned long,class WSTRING const *,unsigned long,unsigned long)",
    "public: unsigned char __thiscall WSTRING::operator==(class WSTRING const &)const",
    "public: virtual __thiscall COMM_DEVICE::~COMM_DEVICE(void)",
    "public: unsigned char __thiscall MESSAGE::QueryNextLoggedMessage(class FSTRING *)",
    "public: unsigned char __thiscall PATH::ModifyName(class WSTRING const *)",
    "public: __thiscall OBJECT::OBJECT(class OBJECT const &)",
    "public: __thiscall FSTRING::FSTRING(void)",
    "public: virtual unsigned char __cdecl DSTRING::SPrintf(unsigned short const *,...)",
    "public: virtual unsigned char __thiscall BDSTRING::Resize(unsigned long)",
    "public: void __thiscall ARGUMENT_LEXEMIZER::SetCaseSensitive(unsigned char)",
    "public: static unsigned char __stdcall KEYBOARD::EnableBreakHandling(void)",
    "public: unsigned char __thiscall MEM_ALLOCATOR::Initialize(unsigned __int64,unsigned long)",
    "public: unsigned char __thiscall SCREEN::EraseScreen(void)",
    "public: unsigned char __thiscall PATH::AppendDelimiter(void)",
    "class MACHINE MachinePlatform",
    "public: virtual class OBJECT * __thiscall ARRAY::GetAt(unsigned long)const",
    "public: unsigned char __thiscall PATH::AppendString(class WSTRING const *)",
    "public: unsigned long __thiscall WSTRING::QueryByteCount(void)const",
    "public: virtual unsigned char __thiscall CHKDSK_MESSAGE::IsYesResponse(unsigned char)",
    "public: static int __stdcall WSTRING::Strcmps(unsigned short *,unsigned short *)",
    "public: static class WSTRING * __stdcall SYSTEM::QueryEnvironmentVariable(class WSTRING const *)",
    "public: unsigned char __thiscall PATH::AppendBase(class WSTRING const *,unsigned char)",
    "public: __thiscall MESSAGE_ID_COUNT::MESSAGE_ID_COUNT(void)",
    "public: virtual __thiscall MESSAGE::~MESSAGE(void)",
    "public: __thiscall BDSTRING::BDSTRING(class BDSTRING const &)",
    "public: void __thiscall MESSAGE::ResetLoggingIterator(void)",
    "public: unsigned char __thiscall FLAG_ARGUMENT::Initialize(class WSTRING *)",
    "public: virtual class ITERATOR * __thiscall LIST::QueryIterator(void)const",
    "public: __thiscall STRING_ARRAY::STRING_ARRAY(void)",
    "public: __thiscall CHKDSK_MESSAGE::CHKDSK_MESSAGE(void)",
    "public: virtual class STREAM * __thiscall PROGRAM::GetStandardInput(void)",
    "public: virtual __thiscall PATH_ARGUMENT::~PATH_ARGUMENT(void)",
    "void __stdcall TrackMsgId(class ARRAY *,unsigned long)",
    "public: class ARRAY * __thiscall PATH::QueryComponentArray(class ARRAY *)const",
    "public: virtual unsigned long __cdecl MESSAGE::SelectResponse(unsigned long,...)",
    "public: static unsigned char __stdcall SYSTEM::QueryLocalTimeFromUTime(class TIMEINFO const *,class TIMEINFO *)",
    "public: virtual unsigned char __thiscall FSTRING::NewBuf(unsigned long)",
    "public: long __thiscall WSTRING::Strcmp(class WSTRING const *)const",
    "public: unsigned char __thiscall BYTE_STREAM::Initialize(class STREAM *,unsigned long)",
    "public: unsigned char __thiscall WSTRING::QueryNumber(long *,unsigned long,unsigned long)const",
    "public: virtual unsigned char __thiscall MESSAGE::IsYesResponse(unsigned char)",
    "public: unsigned char __thiscall PATH::Initialize(class WSTRING const *,unsigned char)",
    "public: static class OBJECT * __stdcall ARRAY::GetCompareArgument(void *)",
    "protected: __thiscall PROGRAM::PROGRAM(void)",
    "public: unsigned char __thiscall PROGRAM::Initialize(unsigned long,unsigned long,unsigned long)",
    "public: unsigned char __thiscall ARGUMENT_LEXEMIZER::DoParsing(class ARRAY *)",
    "public: unsigned short __thiscall WSTRING::QueryChAt(unsigned long)const",
    "protected: __thiscall ITERATOR::ITERATOR(void)",
    "public: class ARRAY * __thiscall FSN_DIRECTORY::QueryFsnodeArray(class FSN_FILTER *)const",
    "public: void __thiscall BITVECTOR::ResetBit(unsigned long,unsigned long)",
    "public: virtual __thiscall TIMEINFO_ARGUMENT::~TIMEINFO_ARGUMENT(void)",
    "public: class WSTRING * __thiscall WSTRING::Strlwr(void)",
    "public: static unsigned char __stdcall KEYBOARD::DisableBreakHandling(void)",
    "public: unsigned char __thiscall SCREEN::SetOutputCodePage(unsigned long)",
    "private: void __thiscall DSTRING::Construct(void)",
    "public: virtual __thiscall BYTE_STREAM::~BYTE_STREAM(void)",
    "public: unsigned char __thiscall MACHINE::IsFMR(void)",
    "public: unsigned short const * __thiscall WSTRING::GetWSTR(void)const",
    "public: virtual class OBJECT * __thiscall ARRAY::Remove(class ITERATOR *)",
    "public: virtual void __thiscall KEYBOARD::DoNotRestoreConsoleMode(void)",
    "public: class FSNODE * __thiscall FSN_DIRECTORY::GetNext(void * *,unsigned long *)",
    "public: virtual void __thiscall PROGRAM::ValidateVersion(unsigned long,unsigned long)const",
    "public: unsigned char __thiscall WSTRING::Split(class ARRAY *,class WSTRING const *,unsigned char)const",
    "public: virtual __thiscall WSTRING::~WSTRING(void)",
    "public: __thiscall PRINT_STREAM::PRINT_STREAM(void)",
    "public: unsigned char __thiscall BSTRING::ReplaceWithChars(unsigned long,unsigned long,char,unsigned long)",
    "public: unsigned char __thiscall MESSAGE::DisplayMsg(unsigned long)",
    "public: static int (__stdcall*__stdcall SYSTEM::QueryNextLibraryEntryPoint(void *,class WSTRING const *))(void)",
    "public: __thiscall PATH_ARGUMENT::PATH_ARGUMENT(void)",
    "public: unsigned char __thiscall STRING_ARRAY::Initialize(unsigned long,unsigned long,unsigned long)",
    "public: unsigned char __thiscall FSNODE::SetAttributes(unsigned long,unsigned long *)",
    "public: unsigned char __thiscall BSTRING::Initialize(void)",
    "public: unsigned char __thiscall LIST::Insert(class OBJECT *,class ITERATOR *)",
    "public: virtual unsigned char __thiscall CHKDSK_MESSAGE::SqmExport(unsigned char (__cdecl*)(void *,unsigned long,unsigned char,char *,...),void *)",
    "private: static unsigned char __stdcall WSTRING::ConvertOemToUnicodeN(unsigned short *,unsigned long,unsigned long *,char *,unsigned long)",
    "public: long __thiscall WSTRING::Stricmp(class WSTRING const *)const",
    "public: static unsigned __int64 __stdcall MESSAGE::MakeFileToken(char const *)",
    "public: virtual __thiscall STRING_ARGUMENT::~STRING_ARGUMENT(void)",
    "public: virtual unsigned char __thiscall MESSAGE::IsSuppressedMessage(unsigned char)",
    "public: virtual unsigned char __thiscall ARRAY::DeleteAllMembers(void)",
    "public: unsigned char __thiscall TIMEINFO::ConvertToUTC(void)",
    "public: __thiscall TIMEINFO_ARGUMENT::TIMEINFO_ARGUMENT(void)",
    "public: unsigned long __thiscall WSTRING::Strcspn(class WSTRING const *,unsigned long)const",
    "public: virtual unsigned char __cdecl DSTRING::SPrintfAppend(unsigned short const *,...)",
    "public: unsigned char __thiscall ARGUMENT::IsValueSet(void)",
    "public: void __thiscall ARGUMENT_LEXEMIZER::PutSwitches(char const *)",
    "public: class WSTRING & __thiscall WSTRING::operator=(class WSTRING const &)",
    "public: enum PATH_ANALYZE_CODE __thiscall PATH::AnalyzePath(class WSTRING *,class PATH *,class WSTRING *)",
    "public: __thiscall FSTRING::FSTRING(class FSTRING const &)",
    "public: class BSTRING & __thiscall BSTRING::operator=(class BSTRING const &)",
    "public: unsigned char __thiscall COMM_DEVICE::CommitState(void)",
    "public: virtual void * __thiscall HMEM::Acquire(unsigned long,unsigned long)",
    "public: class WSTRING * __thiscall ARGUMENT_LEXEMIZER::QueryInvalidArgument(void)",
    "const FSTRING::`vftable'",
    "public: unsigned char __thiscall ARRAY::OrderedInsert(class OBJECT *,void * *)",
    "public: unsigned char __thiscall COMM_DEVICE::SetTimeOut(unsigned char)",
    "void * __stdcall UlibRealloc(void *,unsigned long)",
    "public: void __thiscall BSTRING::DeleteChAt(unsigned long,unsigned long)",
    "public: virtual unsigned long __thiscall SORTED_LIST::QueryMemberCount(void)const",
    "public: class WSTRING * __thiscall PATH::QueryFullPathString(void)const",
    "public: static class KEYBOARD * __stdcall KEYBOARD::Cast(class OBJECT const *)",
    "public: long __thiscall WSTRING::Strcmp(class WSTRING const *,unsigned long,unsigned long,unsigned long,unsigned long)const",
    "class STREAM * __stdcall Get_Standard_Output_Stream(void)",
    "public: long __thiscall WSTRING::Stricmp(class WSTRING const *,unsigned long,unsigned long,unsigned long,unsigned long)const",
    "public: unsigned char __thiscall FSN_FILE::Copy(class PATH *,enum _COPY_ERROR *,unsigned long,unsigned long (__stdcall*)(union _LARGE_INTEGER,union _LARGE_INTEGER,union _LARGE_INTEGER,union _LARGE_INTEGER,unsigned long,unsigned long,void *,void *,void *),void *,int *)const",
    "public: virtual unsigned char __thiscall MESSAGE::SetDotsOnly(unsigned char)",
    "public: unsigned char __thiscall MULTIPLE_PATH_ARGUMENT::Initialize(char *,unsigned char,unsigned char)",
    "public: unsigned long __thiscall WSTRING::SyncLength(void)",
    "public: unsigned long __thiscall WSTRING::Strspn(class WSTRING const *,unsigned long)const",
    "public: virtual __thiscall BITVECTOR::~BITVECTOR(void)",
    "public: unsigned char __thiscall FSN_FILTER::Initialize(void)",
    "public: static void __stdcall WSTRING::SetConsoleConversions(void)",
    "public: virtual class STREAM * __thiscall PROGRAM::GetStandardError(void)",
    "public: unsigned char __thiscall STREAM::WriteByte(unsigned char)",
    "public: static unsigned char __stdcall BASE_SYSTEM::QueryResourceStringV(class WSTRING *,unsigned long,char const *,char *)",
    "public: virtual __thiscall STREAM_MESSAGE::~STREAM_MESSAGE(void)",
    "public: unsigned char __thiscall SORTED_LIST::Initialize(unsigned char)",
    "public: unsigned char __thiscall PATH::IsGuidVolName(void)",
    "public: static int __stdcall MBSTR::Strcmpis(char *,char *)",
    "public: static unsigned char __stdcall SYSTEM::RemoveNode(class FSNODE * *,unsigned char)",
    "public: void * __thiscall MEM_BLOCK_MGR::Alloc(void)",
    "public: unsigned char __thiscall FSN_DIRECTORY::DeleteDirectory(void)",
    "public: unsigned char __thiscall FSNODE::WorkOnReparsePoint(unsigned char)",
    "public: virtual void __thiscall PROGRAM::Fatal(void)const",
    "public: __thiscall MACHINE::MACHINE(void)",
    "private: static unsigned char WSTRING::_UseConsoleConversionsPrev",
    "public: void __thiscall ARGUMENT_LEXEMIZER::SetNoSpcBetweenDstAndSwitch(unsigned char)",
    "public: unsigned char __thiscall MESSAGE::DumpDataToLog(void *,unsigned long)",
    "protected: void __thiscall WSTRING::Construct(void)",
    "public: static unsigned char __cdecl BASE_SYSTEM::QueryResourceString(class WSTRING *,unsigned long,char const *,...)",
    "public: unsigned char __thiscall TIMEINFO::Initialize(struct _FILETIME *)",
    "public: virtual __thiscall CHKDSK_MESSAGE::~CHKDSK_MESSAGE(void)",
    "public: unsigned char __thiscall HMEM::Initialize(void)",
    "public: unsigned char __thiscall KEYBOARD::Flush(void)",
    "public: virtual __thiscall MULTIPLE_PATH_ARGUMENT::~MULTIPLE_PATH_ARGUMENT(void)",
    "public: virtual unsigned char __thiscall MESSAGE::IsInSetup(void)",
    "public: unsigned long __thiscall BSTRING::NextChar(unsigned long)",
    "public: virtual __thiscall LIST::~LIST(void)",
    "public: unsigned char __thiscall WSTRING::Strcat(unsigned short const *)",
    "public: virtual __thiscall HMEM::~HMEM(void)",
    "public: __thiscall ARRAY::ARRAY(void)",
    "public: virtual __thiscall ITERATOR::~ITERATOR(void)",
    "public: __thiscall BITVECTOR::BITVECTOR(void)",
    "public: unsigned char __thiscall STREAM::ReadMbLine(char *,unsigned long,unsigned long *,unsigned char,unsigned long)",
    "public: void __thiscall BITVECTOR::SetBit(unsigned long,unsigned long)",
    "public: static int __stdcall MBSTR::Strcmps(char *,char *)",
    "public: class WSTRING * __thiscall PATH::QueryRoot(void)",
    "public: unsigned char __thiscall TIMEINFO_ARGUMENT::Initialize(char *)",
    "public: unsigned char __thiscall COMM_DEVICE::QueryTimeOut(void)const",
    "public: __thiscall MEM_BLOCK_MGR::MEM_BLOCK_MGR(void)",
    "public: virtual unsigned char __thiscall MESSAGE::QueryStringInput(class WSTRING *)",
    "public: class WSTRING * __thiscall ARGUMENT_LEXEMIZER::GetLexemeAt(unsigned long)",
    "public: class WSTRING * __thiscall WSTRING::Strupr(unsigned long,unsigned long)",
    "protected: void __thiscall OBJECT::SetClassDescriptor(class CLASS_DESCRIPTOR const *)",
    "public: virtual unsigned char __thiscall SORTED_LIST::Put(class OBJECT *)",
    "public: unsigned char __thiscall COMM_DEVICE::SetDtrControl(enum DTR_CONTROL)",
    "public: class BDSTRING & __thiscall BDSTRING::operator=(class BDSTRING const &)",
    "public: __thiscall HMEM::HMEM(void)",
    "const OBJECT::`vftable'",
    "public: unsigned char __thiscall STREAM::ReadLine(class WSTRING *,unsigned char)",
    "public: virtual __thiscall DSTRING::~DSTRING(void)",
    "public: static void __stdcall WSTRING::ResetConversions(void)",
    "public: unsigned char __thiscall PATH::Initialize(unsigned short const *,unsigned char)",
    "public: __thiscall FLAG_ARGUMENT::FLAG_ARGUMENT(void)",
    "public: unsigned char __thiscall STRING_ARGUMENT::Initialize(char *)",
    "public: __thiscall STREAM_MESSAGE::STREAM_MESSAGE(void)",
    "public: class WSTRING * __thiscall WSTRING::Strlwr(unsigned long,unsigned long)",
    "public: unsigned char __thiscall FSN_DIRECTORY::IsEmpty(void)const",
    "public: unsigned char __thiscall FSN_FILTER::SetFileName(class WSTRING const *)",
    "public: __thiscall BYTE_STREAM::BYTE_STREAM(void)",
    "public: virtual __thiscall SORTED_LIST::~SORTED_LIST(void)",
    "public: unsigned char __thiscall MESSAGE::DisplayMsg(unsigned long,enum MESSAGE_TYPE,unsigned long)",
    "public: __thiscall WSTRING::WSTRING(class WSTRING const &)",
    "protected: void __thiscall WSTRING::PutString(unsigned short *,unsigned long)",
    "public: static class WSTRING * __stdcall SYSTEM::QueryVolumeLabel(class PATH *,struct _VOL_SERIAL_NUMBER *)",
    "public: virtual __thiscall OBJECT::~OBJECT(void)",
    "public: int * __thiscall KEYBOARD::GetPFlagBreak(void)const",
    "public: static unsigned char __cdecl SQMEXPORT::FileExport(void *,unsigned long,unsigned char,char *,...)",
    "private: unsigned long __thiscall BITVECTOR::ComputeCountSet(void)const",
    "public: unsigned char __thiscall TIMEINFO::QueryDate(class WSTRING *)const",
    "public: unsigned char __thiscall FSN_DIRECTORY::Traverse(void *,class FSN_FILTER *,class PATH *,unsigned char (__stdcall*)(void *,class FSNODE *,class PATH *))const",
    "public: virtual unsigned long __thiscall LIST::QueryMemberCount(void)const",
    "public: static int __stdcall WSTRING::Strcmpis(unsigned short *,unsigned short *)",
    "public: static class FSN_FILE * __stdcall SYSTEM::MakeFile(class PATH const *)",
    "public: static class PATH * __stdcall SYSTEM::SearchPathW(class WSTRING *,class WSTRING *)",
    "public: void __thiscall MESSAGE::Lock(void)",
    "public: __thiscall CONT_MEM::CONT_MEM(void)",
    "public: long __thiscall WSTRING::Stricmp(class WSTRING const *,unsigned long)const",
    "public: class WSTRING * __thiscall ARGUMENT::GetPattern(void)",
    "public: unsigned char __thiscall CHKDSK_MESSAGE::Initialize(class STREAM *,class STREAM *,class STREAM *)",
    "public: virtual unsigned char __thiscall STREAM_MESSAGE::Set(unsigned long,enum MESSAGE_TYPE,unsigned long)",
    "public: static int __stdcall WSTRING::Stricmp(unsigned short *,unsigned short *)",
    "public: unsigned char __thiscall MESSAGE::IsLoggingEnabled(void)",
    "private: unsigned char __thiscall DSTRING::SPrintfWorker(unsigned short const *,char *)",
    "public: class OBJECT * __thiscall ARRAY::OrderedSearch(class OBJECT *,void * *)",
    "public: unsigned char __thiscall REST_OF_LINE_ARGUMENT::Initialize(void)",
    "public: virtual unsigned char __thiscall MESSAGE::IsKeyPressed(unsigned long,unsigned long)",
    "private: static unsigned char WSTRING::_UseAnsiConversions",
    "public: static void __stdcall SYSTEM::DisplaySystemError(unsigned long,int)",
    "public: static unsigned char __stdcall SYSTEM::GetFileSecurityBackup(class PATH const *,unsigned long,struct _SECURITY_ATTRIBUTES *,unsigned long *)",
    "public: unsigned long __thiscall WSTRING::Strchr(unsigned short,unsigned long)const",
    "public: virtual class OBJECT * __thiscall ITERATOR::FindNext(class OBJECT const *)",
    "public: static unsigned char __stdcall SYSTEM::QueryCurrentDosDriveName(class WSTRING *)",
    "public: unsigned char __thiscall TIMEINFO::QueryTime(class WSTRING *)const",
    "public: unsigned char __thiscall PATH::SetDevice(class WSTRING const *)",
    "public: class WSTRING * __thiscall FSTRING::Initialize(unsigned short *,unsigned long)",
    "public: unsigned char __thiscall WSTRING::Replace(unsigned long,unsigned long,class WSTRING const *,unsigned long,unsigned long)",
    "class STREAM * __stdcall Get_Standard_Input_Stream(void)",
    "public: unsigned char __thiscall COMM_DEVICE::SetParity(enum PARITY)",
    "public: unsigned char __thiscall KEYBOARD::DisableLineMode(void)",
    "public: unsigned char __thiscall MACHINE::Initialize(void)",
    "private: void __thiscall BDSTRING::Construct(void)",
    "public: unsigned char __thiscall SCREEN::Initialize(void)",
    "public: unsigned char __thiscall WSTRING::Initialize(class WSTRING const *,unsigned long,unsigned long)",
    "protected: void __thiscall WSTRING::PutString(unsigned short *)",
    "public: static class FSN_FILE * __stdcall SYSTEM::QueryFile(class PATH const *,unsigned char,unsigned char *)",
    "public: unsigned long __thiscall BSTRING::Strchr(char,unsigned long)const",
    "public: class ITERATOR & __thiscall ITERATOR::operator=(class ITERATOR const &)",
    "public: unsigned char __thiscall HMEM::Resize(unsigned long,unsigned long)",
    "const ITERATOR::`vftable'",
    "public: unsigned long __thiscall WSTRING::Truncate(unsigned long)",
    "public: unsigned char __cdecl MESSAGE::LogMsg(unsigned long,char const *,...)",
    "public: unsigned long __thiscall WSTRING::Strrchr(unsigned short,unsigned long)const",
    "public: void __thiscall PATH::TruncateNameAtColon(void)",
    "public: void __thiscall MESSAGE::SetLoggingEnabled(unsigned char)",
    "public: virtual unsigned char __thiscall ARRAY::Sort(int (__cdecl*)(void *,void *))",
    "public: class PATH * __thiscall PATH::QueryPath(void)const",
    "public: unsigned char __thiscall COMM_DEVICE::SetOdsr(unsigned char)",
    "const BDSTRING::`vftable'",
    "public: unsigned char __thiscall SVILOGFILES::Initialize(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long)",
    "public: static void __stdcall PROGRAM::ExitProgram(unsigned long)",
    "public: static unsigned short * __stdcall WSTRING::SkipWhite(unsigned short *)",
    "public: virtual __thiscall PATH::~PATH(void)",
    "public: unsigned char __thiscall KEYBOARD::EnableLineMode(void)",
    "public: virtual unsigned char __thiscall ARRAY::Put(class OBJECT *)",
    "public: virtual unsigned char __thiscall BDSTRING::NewBuf(unsigned long)",
    "public: unsigned char __thiscall TIMEINFO::Initialize(void)",
    "public: virtual unsigned char __thiscall LIST::Put(class OBJECT *)",
    "public: unsigned char __thiscall WSTRING::Initialize(void)",
    "public: static unsigned char __cdecl SQMEXPORT::SqmExport(void *,unsigned long,unsigned char,char *,...)",
    "public: virtual __thiscall BDSTRING::~BDSTRING(void)",
    "public: virtual unsigned long __thiscall ARRAY::QueryMemberCount(void)const",
    "public: virtual __thiscall PROGRAM::~PROGRAM(void)",
    "public: static char * __stdcall MBSTR::Strstr(char *,char *)",
    "public: unsigned char __thiscall MACHINE::IsPCAT(void)",
    "public: __thiscall DSTRING::DSTRING(void)",
    "private: static unsigned char __stdcall WSTRING::ConvertUnicodeToOemN(char *,unsigned long,unsigned long *,unsigned short *,unsigned long)",
    "public: unsigned char __thiscall COMM_DEVICE::SetRtsControl(enum RTS_CONTROL)",
    "public: unsigned char __thiscall FSN_FILTER::SetTimeInfo(class TIMEINFO const *,enum FSN_TIME,unsigned short)",
    "public: static int __stdcall WSTRING::Strcmp(unsigned short *,unsigned short *)",
    "public: unsigned char __thiscall MEM_BLOCK_MGR::Free(void *)",
    "public: __thiscall CLASS_DESCRIPTOR::CLASS_DESCRIPTOR(void)",
    "public: unsigned char __thiscall PATH_ARGUMENT::Initialize(char *,unsigned char)",
    "public: virtual unsigned char __thiscall ARRAY::Sort(unsigned char)",
    "public: unsigned char __thiscall FLAG_ARGUMENT::Initialize(char *)",
    "public: void * __thiscall MEM_ALLOCATOR::Allocate(unsigned long)",
    "public: unsigned char __thiscall PRINT_STREAM::Initialize(class PATH const *)",
    "public: virtual unsigned char __thiscall MESSAGE::IsInAutoChk(void)",
    "public: static enum FILE_TYPE __stdcall SYSTEM::QueryFileType(class WSTRING const *)",
    "public: unsigned long __thiscall SCREEN::QueryCodePage(void)",
    "public: unsigned char __thiscall COMM_DEVICE::SetStopBits(enum STOPBITS)",
    "public: unsigned char __thiscall MESSAGE::LogMessage(class WSTRING const *)",
    "public: unsigned long __thiscall BSTRING::QueryChCount(void)const",
    "public: class OBJECT & __thiscall OBJECT::operator=(class OBJECT const &)",
    "public: __thiscall PATH::PATH(void)",
    "public: __thiscall BSTRING::BSTRING(class BSTRING const &)",
    "public: unsigned char __thiscall PATH::TruncateBase(void)",
    "public: virtual class OBJECT * __thiscall ARRAY::RemoveAt(unsigned long)",
    "public: virtual __thiscall MEM_BLOCK_MGR::~MEM_BLOCK_MGR(void)",
    "public: unsigned char __thiscall CLASS_DESCRIPTOR::Initialize(void)",
    "public: long __thiscall WSTRING::Strcmp(class WSTRING const *,unsigned long)const",
    "public: static class FILE_STREAM * __stdcall FILE_STREAM::Cast(class OBJECT const *)",
    "public: __thiscall KEYBOARD::KEYBOARD(void)",
    "public: virtual unsigned char __cdecl FSTRING::SPrintf(unsigned short const *,...)",
    "public: static class PATH * __stdcall SYSTEM::QuerySystemDirectory(void)",
    "public: virtual __thiscall FSTRING::~FSTRING(void)",
    "protected: __thiscall BSTRING::BSTRING(void)",
    "public: virtual unsigned char __thiscall CHKDSK_MESSAGE::Set(unsigned long,enum MESSAGE_TYPE,unsigned long)",
    "public: unsigned char __thiscall CONT_MEM::Initialize(void *,unsigned long)",
    "public: virtual __thiscall BSTRING::~BSTRING(void)",
    "public: unsigned char __thiscall FSN_FILTER::DoesNodeMatch(class FSNODE *)",
    "public: virtual unsigned char __thiscall PROGRAM::DisplayMessage(unsigned long,enum MESSAGE_TYPE)const",
    "public: __thiscall SORTED_LIST::SORTED_LIST(void)",
    "public: static enum DRIVE_TYPE __stdcall SYSTEM::QueryDriveType(class WSTRING const *)",
    "public: unsigned char __thiscall OBJECT::IsSameObject(class OBJECT const *)const",
    "public: unsigned short * __thiscall WSTRING::QueryWSTR(unsigned long,unsigned long,unsigned short *,unsigned long,unsigned char)const",
    "public: __thiscall BDSTRING::BDSTRING(void)",
    "protected: void __thiscall BSTRING::Construct(void)",
    "public: __thiscall SCREEN::SCREEN(void)",
    "public: unsigned char __thiscall ARGUMENT_LEXEMIZER::Initialize(class ARRAY *)",
    "public: static int (__stdcall*__stdcall SYSTEM::QueryLibraryEntryPoint(class WSTRING const *,class WSTRING const *,void * *))(void)",
    "public: unsigned char __thiscall MESSAGE::LogMsg(unsigned long)",
    "public: void __thiscall TIMEINFO::Initialize(class TIMEINFO const *)",
    "public: virtual __thiscall MEM_ALLOCATOR::~MEM_ALLOCATOR(void)",
    "public: class WSTRING * __thiscall WSTRING::Strupr(void)",
    "public: class WSTRING * __thiscall ARGUMENT::GetLexeme(void)",
    "public: virtual long __thiscall OBJECT::Compare(class OBJECT const *)const",
    "public: unsigned char __cdecl MESSAGE::Log(char const *,...)",
    "public: unsigned char __thiscall SVILOGFILES::ShiftLogs(unsigned short const *)",
    "public: __thiscall DSTRING::DSTRING(class DSTRING const &)",
    "public: unsigned char __thiscall COMM_DEVICE::SetOcts(unsigned char)",
    "protected: __thiscall WSTRING::WSTRING(void)",
    "public: unsigned char __thiscall TIMEINFO::operator<(class TIMEINFO)const",
    "public: virtual class STREAM * __thiscall PROGRAM::GetStandardOutput(void)",
    "public: static unsigned char __stdcall SYSTEM::IsCorrectVersion(void)",
    "public: unsigned long __thiscall WSTRING::QueryChCount(void)const",
    "public: void __thiscall ARGUMENT_LEXEMIZER::PutSwitches(class WSTRING const *)",
    "public: virtual void __thiscall PROGRAM::Usage(void)const",
    "public: unsigned char __thiscall SCREEN::SetCodePage(unsigned long)",
    "public: char * __thiscall BSTRING::QuerySTR(unsigned long,unsigned long,char *,unsigned long,unsigned char)const",
    "public: unsigned char __thiscall WSTRING::Strcat(class WSTRING const *)",
    "public: virtual class ITERATOR * __thiscall SORTED_LIST::QueryIterator(void)const",
    "public: static unsigned char __stdcall KEYBOARD::GotABreak(void)",
    "public: class PATH * __thiscall PATH::QueryWCExpansion(class PATH *)",
    "public: class FSN_DIRECTORY * __thiscall FSN_DIRECTORY::CreateDirectoryPath(class PATH const *)const",
    "public: static int __stdcall MBSTR::Stricmp(char *,char *)",
    "public: unsigned char __thiscall SVILOGFILES::DeleteOldest(void)",
    "public: virtual void __cdecl PROGRAM::Fatal(unsigned long,unsigned long,char *,...)const",
    "public: class FILE_STREAM * __thiscall FSN_FILE::QueryStream(enum STREAMACCESS,unsigned long)",
    "public: class DSTRING & __thiscall DSTRING::operator=(class DSTRING const &)",
    "public: virtual __thiscall PRINT_STREAM::~PRINT_STREAM(void)",
    "public: __thiscall MULTIPLE_PATH_ARGUMENT::MULTIPLE_PATH_ARGUMENT(void)",
    "public: unsigned char __thiscall COMM_DEVICE::SetDataBits(unsigned long)",
    "public: void __thiscall PATH::TruncateDelimiter(void)",
    "public: __thiscall REST_OF_LINE_ARGUMENT::REST_OF_LINE_ARGUMENT(void)",
    "public: static class FSN_DIRECTORY * __stdcall SYSTEM::QueryDirectory(class PATH const *,unsigned char)",
    "public: unsigned char __thiscall SCREEN::MoveCursorTo(unsigned short,unsigned short)",
    "public: unsigned char __thiscall PATH::SetName(class WSTRING const *)",
    "public: virtual __thiscall ARGUMENT_LEXEMIZER::~ARGUMENT_LEXEMIZER(void)",
    "private: static unsigned char WSTRING::_UseConsoleConversions",
    "public: __thiscall LONG_ARGUMENT::LONG_ARGUMENT(void)",
    "public: unsigned char __thiscall WSTRING::Initialize(unsigned short const *,unsigned long)",
    "public: virtual void * __thiscall CONT_MEM::Acquire(unsigned long,unsigned long)",
    "public: unsigned char __thiscall FSNODE::UseAlternateName(void)",
    "public: class WSTRING * __thiscall PATH::QueryGuidString(class WSTRING *,unsigned char *,class WSTRING *)",
    "const BSTRING::`vftable'",
    "public: unsigned char __thiscall MESSAGE::QueryPackedLog(class HMEM *,unsigned long *)",
    "public: unsigned char __cdecl MESSAGE::Display(char const *,...)",
    "public: unsigned char __thiscall STREAM_MESSAGE::Initialize(class STREAM *,class STREAM *,class STREAM *)",
    "public: __thiscall ITERATOR::ITERATOR(class ITERATOR const &)",
    "public: unsigned char __thiscall FILE_STREAM::ReadAt(unsigned char *,unsigned long,__int64,enum SEEKORIGIN,unsigned long *)",
    "private: unsigned char __thiscall BYTE_STREAM::FillAndReadByte(unsigned char *)",
    "public: static unsigned char __stdcall SYSTEM::QueryWindowsErrorMessage(unsigned long,class WSTRING *)",
    "class STREAM * __stdcall Get_Standard_Error_Stream(void)",
    "public: unsigned char __thiscall SCREEN::ChangeScreenSize(unsigned short,unsigned short,unsigned char *)",
    "public: unsigned char __thiscall WSTRING::ReplaceWithChars(unsigned long,unsigned long,unsigned short,unsigned long)",
    "public: class CLASS_DESCRIPTOR const * __thiscall OBJECT::GetClassDescriptor(void)const",
    "const DSTRING::`vftable'",
    "public: unsigned char __thiscall KEYBOARD::Initialize(unsigned char,unsigned char)",
    "public: unsigned char __thiscall TIMEINFO::operator>(class TIMEINFO)const",
    "public: unsigned char __thiscall PATH::Initialize(class PATH const *,unsigned char)",
    "public: unsigned char __thiscall MESSAGE::Initialize(void)",
    "public: unsigned char __thiscall MEM_BLOCK_MGR::Initialize(unsigned long,unsigned long)",
    "public: virtual unsigned char __cdecl FSTRING::SPrintfAppend(unsigned short const *,...)",
    "public: virtual unsigned char __thiscall STREAM_MESSAGE::IsYesResponse(unsigned char)"
  ],
  "umb.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "umdmxfrm.dll": [
    "GetXformInfo"
  ],
  "umpnpmgr.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "umpo.dll": [
    "UmpoMain"
  ],
  "umrdp.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "unattend.dll": [
    "UnattendFindFileFromCmdLine",
    "UnattendFreeResults",
    "UnattendEnumFree",
    "UnattendCtxDeserializeBuffer",
    "UnattendCtxGetLong",
    "UnattendCtxBeginModify",
    "UnattendCtxSerializeToStream",
    "UnattendAddResults",
    "UnattendCtxSerialize",
    "UnattendFormatPath",
    "UnattendIsNodeValid",
    "UnattendCtxOpenNodeByNode",
    "UnattendCtxGetStringByNode",
    "UnattendCtxGetUlongByNode",
    "UnattendCtxRemoveNode",
    "UnattendFreeSetting",
    "UnattendCtxAddOrModifyNodeText",
    "UnattendGetFirstFailingSetting",
    "UnattendCtxSpliceTrees",
    "UnattendCtxEnumGet",
    "UnattendDeserializeWithResults",
    "UnattendCtxGetFlag",
    "UnattendGetImplicitContext",
    "UnattendCtxCompareNodes",
    "UnattendCtxEnumOrderedSubNodes",
    "UnattendGetCount",
    "UnattendCtxGetFlagByNode",
    "UnattendCtxDeserialize",
    "UnattendCtxGetNodeAttr",
    "UnattendCtxSetString",
    "UnattendIsPassUnusedInCtx",
    "UnattendGetString",
    "UnattendGetFlag",
    "UnattendCtxCleanup",
    "UnattendFindAnswerFileWithResults",
    "UnattendFreeNode",
    "UnattendMarkPassUsedInCtx",
    "UnattendCtxReplaceMatchedNodesWithText",
    "UnattendCtxDeserializeString",
    "UnattendCtxGetShowUIFromNode",
    "UnattendCtxSerializeToBuffer",
    "UnattendCtxGetCount",
    "DllMain",
    "UnattendCtxCancelModify",
    "UnattendCtxReplaceNode",
    "UnattendCtxSetStringByNode",
    "UnattendUsedPassesExistInCtx",
    "UnattendCtxGetCountByNode",
    "UnattendCtxCommitModify",
    "UnattendCtxSerializeToStreamFromNode",
    "UnattendCtxGetShowUI",
    "UnattendCtxGetLongByNode",
    "UnattendCtxSetNodeName",
    "UnattendCleanup",
    "UnattendCtxGetExpandedString",
    "UnattendCtxOpenNode",
    "UnattendCtxSerializeSettingsStream",
    "UnattendCtxGetRootNode",
    "DllCanUnloadNow",
    "UnattendCtxGetEnumValue",
    "UnattendCtxGetUlong",
    "UnattendCtxPrettyPrint",
    "UnattendCtxGetEnumValueByNode",
    "UnattendCtxGetNodeValue",
    "UnattendCtxDeserializeWithResults",
    "UnattendCtxSerializeToBufferFromNode",
    "UnattendCtxDeserializeFile",
    "UnattendCtxGetExpandedStringByNode",
    "UnattendCtxRemoveAttr",
    "UnattendCtxGetString",
    "UnattendFindAnswerFile",
    "UnattendCtxGetNodeChild"
  ],
  "unimdmat.dll": [
    "UmLogStringA",
    "UmDialModem",
    "UmDeinitializeModemDriver",
    "UmIssueCommand",
    "UmSetSpeakerPhoneState",
    "UmCloseModem",
    "UmGetDiagnostics",
    "UmWaveAction",
    "UmAbortCurrentModemCommand",
    "UmGenerateDigit",
    "UmLogDiagnostics",
    "UmAnswerModem",
    "UmInitModem",
    "UmOpenModem",
    "UmSetPassthroughMode",
    "UmInitializeModemDriver",
    "UmMonitorModem",
    "UmHangupModem",
    "UmDuplicateDeviceHandle"
  ],
  "uniplat.dll": [
    "MonitorHandle",
    "FreeOverStruct",
    "StartMonitorThread",
    "AllocateOverStructEx",
    "DestroyOverStructPool",
    "UnimodemNotifyTSP",
    "ResetCallCount",
    "WinntIsWorkstation",
    "UnimodemDeviceIoControlEx",
    "SetUnimodemTimer",
    "UnimodemWaitCommEventEx",
    "CancelUnimodemTimer",
    "UnimodemReadFileEx",
    "StopMonitorThread",
    "CallEnding",
    "CreateOverStructPool",
    "UmPlatformInitialize",
    "UnimodemWriteFileEx",
    "SyncDeviceIoControl",
    "CallBeginning",
    "UmPlatformDeinitialize",
    "StopMonitoringHandle",
    "FreeUnimodemTimer",
    "CreateUnimodemTimer",
    "UnimodemQueueUserAPC",
    "ReinitOverStruct"
  ],
  "untfs.dll": [
    "public: unsigned long __thiscall NTFS_EXTENT_LIST::QueryNumberOfExtents(void)const",
    "public: __thiscall NTFS_BOOT_FILE::NTFS_BOOT_FILE(void)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE::Read(void *,class BIG_INT,unsigned long,unsigned long *)",
    "public: unsigned char __thiscall NTFS_MFT_INFO::Initialize(class BIG_INT,class NTFS_UPCASE_TABLE *,unsigned char,unsigned char,unsigned __int64)",
    "public: unsigned char __thiscall NTFS_BITMAP::IsFree(class BIG_INT,class BIG_INT)const",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::InsertEntry(unsigned long,void *,struct _MFT_SEGMENT_REFERENCE,unsigned char)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::SafeQueryAttribute(unsigned long,class NTFS_ATTRIBUTE *,class NTFS_ATTRIBUTE *)",
    "public: unsigned char __thiscall NTFS_VOLUME_FILE::Initialize(class LOG_IO_DP_DRIVE *,class NTFS_MASTER_FILE_TABLE *,class NTFS_FILE_RECORD_SEGMENT *,class NTFS_INDEX_TREE *,struct _VOLUME_INFORMATION *,class WSTRING *,enum FIX_LEVEL)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Initialize(class BIG_INT,class NTFS_MASTER_FILE_TABLE *)",
    "public: static unsigned char __stdcall NTFS_MFT_INFO::CompareFileName(void *,unsigned long,struct _FILE_NAME *,unsigned short *)",
    "private: static void __stdcall NTFS_MFT_INFO::ComputeFileNameSignature(unsigned long,struct _FILE_NAME *,unsigned char * const)",
    "public: __thiscall NTFS_LOG_FILE::NTFS_LOG_FILE(void)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Initialize(void)",
    "public: __thiscall NTFS_MFT_INFO::NTFS_MFT_INFO(void)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE::Prefetch(class BIG_INT,unsigned long)",
    "public: unsigned char __thiscall NTFS_EXTENT_LIST::QueryExtent(unsigned long,class BIG_INT *,class BIG_INT *,class BIG_INT *)const",
    "public: virtual __thiscall NTFS_ATTRIBUTE_DEFINITION_TABLE::~NTFS_ATTRIBUTE_DEFINITION_TABLE(void)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE::Initialize(class LOG_IO_DP_DRIVE *,unsigned long,class NTFS_EXTENT_LIST const *,class BIG_INT,class BIG_INT,unsigned long,class WSTRING const *,unsigned short)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::IsAttributePresent(unsigned long,class WSTRING const *,unsigned char)",
    "public: unsigned char __thiscall NTFS_BITMAP::IsAllocated(class BIG_INT,class BIG_INT)const",
    "public: virtual __thiscall NTFS_ATTRIBUTE_RECORD::~NTFS_ATTRIBUTE_RECORD(void)",
    "public: virtual __thiscall NTFS_CLUSTER_RUN::~NTFS_CLUSTER_RUN(void)",
    "public: virtual __thiscall NTFS_INDEX_TREE::~NTFS_INDEX_TREE(void)",
    "public: virtual __thiscall NTFS_MFT_FILE::~NTFS_MFT_FILE(void)",
    "public: __thiscall NTFS_FRS_STRUCTURE::NTFS_FRS_STRUCTURE(void)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::Write(void)",
    "public: unsigned char __thiscall NTFS_EXTENT_LIST::Initialize(class BIG_INT,class BIG_INT)",
    "public: __thiscall NTFS_ATTRIBUTE_RECORD::NTFS_ATTRIBUTE_RECORD(void)",
    "public: virtual __thiscall NTFS_BITMAP::~NTFS_BITMAP(void)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::Prefetch(class BIG_INT,class BIG_INT)",
    "long __stdcall NtfsUpcaseCompare(unsigned short const *,unsigned long,unsigned short const *,unsigned long,class NTFS_UPCASE_TABLE const *,unsigned char)",
    "public: static unsigned char __stdcall NTFS_SA::IsDosName(struct _FILE_NAME const *)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::QueryAttributeList(class NTFS_ATTRIBUTE_LIST *)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::CopyIterator(class NTFS_INDEX_TREE *)",
    "public: unsigned char __thiscall NTFS_SA::QueryFrsFromPath(class WSTRING const *,class NTFS_MASTER_FILE_TABLE *,class NTFS_BITMAP *,class NTFS_FILE_RECORD_SEGMENT *,unsigned char *,unsigned char *)",
    "public: virtual __thiscall NTFS_VOLUME_FILE::~NTFS_VOLUME_FILE(void)",
    "public: virtual __thiscall NTFS_UPCASE_TABLE::~NTFS_UPCASE_TABLE(void)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::AddSecurityDescriptor(enum _CANNED_SECURITY_TYPE,class NTFS_BITMAP *)",
    "public: __thiscall NTFS_BITMAP::NTFS_BITMAP(void)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::Initialize(class MEM *,class NTFS_ATTRIBUTE *,class BIG_INT,unsigned long,unsigned long,class BIG_INT,unsigned long,class NTFS_UPCASE_TABLE *)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::Initialize(class LOG_IO_DP_DRIVE *,unsigned long,class NTFS_BITMAP *,class NTFS_UPCASE_TABLE *,unsigned long,class NTFS_FILE_RECORD_SEGMENT *,class WSTRING const *)",
    "public: struct _ATTRIBUTE_LIST_ENTRY const * __thiscall NTFS_ATTRIBUTE_LIST::GetNextAttributeListEntry(struct _ATTRIBUTE_LIST_ENTRY const *)const",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE_LIST::QueryNextEntry(struct _ATTR_LIST_CURR_ENTRY *,unsigned long *,class BIG_INT *,struct _MFT_SEGMENT_REFERENCE *,unsigned short *,class WSTRING *)const",
    "public: virtual __thiscall NTFS_FRS_STRUCTURE::~NTFS_FRS_STRUCTURE(void)",
    "public: virtual __thiscall NTFS_SA::~NTFS_SA(void)",
    "public: __thiscall NTFS_ATTRIBUTE_LIST::NTFS_ATTRIBUTE_LIST(void)",
    "public: unsigned char __thiscall NTFS_UPCASE_TABLE::Initialize(class NTFS_ATTRIBUTE *)",
    "public: unsigned char __thiscall NTFS_SA::SetVolumeFlag(unsigned short,unsigned char *)",
    "GetFilesystemInformation",
    "public: virtual __thiscall NTFS_FILE_RECORD_SEGMENT::~NTFS_FILE_RECORD_SEGMENT(void)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Create(struct _STANDARD_INFORMATION const *,unsigned short)",
    "public: unsigned char __thiscall NTFS_BITMAP::Initialize(class BIG_INT,unsigned char,class LOG_IO_DP_DRIVE *,unsigned long)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::QueryAttribute(class NTFS_ATTRIBUTE *,unsigned char *,unsigned long,class WSTRING const *)",
    "public: virtual __thiscall NTFS_ATTRIBUTE_LIST::~NTFS_ATTRIBUTE_LIST(void)",
    "public: virtual __thiscall NTFS_BOOT_FILE::~NTFS_BOOT_FILE(void)",
    "public: void __thiscall NTFS_INDEX_TREE::ResetIterator(void)",
    "public: static unsigned long __stdcall NTFS_SA::QueryDefaultClustersPerIndexBuffer(class DP_DRIVE const *,unsigned long)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::QueryEntry(unsigned long,void *,unsigned long,struct _INDEX_ENTRY * *,class NTFS_INDEX_BUFFER * *,unsigned char *)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE_RECORD::QueryExtentList(class NTFS_EXTENT_LIST *)const",
    "public: __thiscall NTFS_FILE_RECORD_SEGMENT::NTFS_FILE_RECORD_SEGMENT(void)",
    "public: virtual __thiscall NTFS_REFLECTED_MASTER_FILE_TABLE::~NTFS_REFLECTED_MASTER_FILE_TABLE(void)",
    "public: virtual __thiscall NTFS_ATTRIBUTE::~NTFS_ATTRIBUTE(void)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::ReadAt(class BIG_INT)",
    "public: __thiscall NTFS_VOLUME_FILE::NTFS_VOLUME_FILE(void)",
    "private: static void __stdcall NTFS_MFT_INFO::ComputeDupInfoSignature(struct _DUPLICATED_INFORMATION *,unsigned char * const)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::Save(class NTFS_FILE_RECORD_SEGMENT *)",
    "public: unsigned char __thiscall NTFS_SA::Initialize(class LOG_IO_DP_DRIVE *,class MESSAGE *,class BIG_INT,class BIG_INT)",
    "public: __thiscall NTFS_BITMAP_FILE::NTFS_BITMAP_FILE(void)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::Initialize(class MEM *,class NTFS_ATTRIBUTE *,class BIG_INT,unsigned long,class BIG_INT,unsigned long,class NTFS_UPCASE_TABLE *)",
    "public: unsigned char __thiscall NTFS_MFT_INFO::Initialize(void)",
    "public: unsigned char __thiscall NTFS_LOG_FILE::CreateDataAttribute(class BIG_INT,unsigned long,class NTFS_BITMAP *)",
    "public: virtual unsigned char __thiscall NTFS_FRS_STRUCTURE::Read(void)",
    "public: unsigned char __thiscall NTFS_SA::WriteRemainingBootCode(void)",
    "Recover",
    "public: virtual unsigned char __thiscall NTFS_ATTRIBUTE::SetSparse(class BIG_INT,class NTFS_BITMAP *,unsigned char)",
    "public: static unsigned char __stdcall NTFS_MFT_INFO::QueryFlags(void *,unsigned short)",
    "public: __thiscall NTFS_INDEX_TREE::NTFS_INDEX_TREE(void)",
    "public: unsigned char __thiscall NTFS_MFT_FILE::Flush(void)",
    "public: unsigned short __thiscall NTFS_SA::QueryVolumeFlagsAndLabel(unsigned char *,unsigned char *,unsigned char *,class WSTRING *)",
    "public: unsigned char __thiscall NTFS_MASTER_FILE_TABLE::Extend(unsigned long)",
    "public: unsigned char __thiscall NTFS_BITMAP_FILE::Initialize(class NTFS_MASTER_FILE_TABLE *)",
    "public: static unsigned char __stdcall NTFS_SA::IsNtfsName(struct _FILE_NAME const *)",
    "public: unsigned char __thiscall NTFS_REFLECTED_MASTER_FILE_TABLE::Initialize(class NTFS_MASTER_FILE_TABLE *)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::QueryAttributeListAttribute(class NTFS_ATTRIBUTE *,unsigned char *)",
    "public: __thiscall NTFS_ATTRIBUTE::NTFS_ATTRIBUTE(void)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE_LIST::ReadList(void)",
    "public: void * __thiscall NTFS_FRS_STRUCTURE::GetNextAttributeRecord(void const *,class MESSAGE *,unsigned char *)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::ReadNext(class BIG_INT)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::Initialize(unsigned long,class LOG_IO_DP_DRIVE *,unsigned long,class NTFS_BITMAP *,class NTFS_UPCASE_TABLE *,unsigned long,unsigned long,unsigned long,class WSTRING const *)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE_RECORD::QueryName(class WSTRING *)const",
    "public: unsigned char __thiscall NTFS_UPCASE_FILE::Initialize(class NTFS_MASTER_FILE_TABLE *)",
    "Extend",
    "public: unsigned char __thiscall NTFS_EXTENT_LIST::QueryLcnFromVcn(class BIG_INT,class BIG_INT *,class BIG_INT *)const",
    "public: unsigned char __thiscall NTFS_SA::QueryClusterFactor(void)const",
    "public: virtual unsigned char __thiscall NTFS_ATTRIBUTE::MakeNonresident(class NTFS_BITMAP *)",
    "public: void __thiscall NTFS_CLUSTER_RUN::Relocate(class BIG_INT)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Initialize(class BIG_INT,unsigned long,class NTFS_MASTER_FILE_TABLE *)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::AddFileNameAttribute(struct _FILE_NAME *)",
    "public: __thiscall NTFS_REFLECTED_MASTER_FILE_TABLE::NTFS_REFLECTED_MASTER_FILE_TABLE(void)",
    "public: unsigned char __thiscall NTFS_MASTER_FILE_TABLE::AllocateFileRecordSegment(class BIG_INT *,unsigned char)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::QueryDuplicatedInformation(struct _DUPLICATED_INFORMATION *)",
    "Format",
    "public: virtual unsigned char __thiscall NTFS_ATTRIBUTE::Resize(class BIG_INT,class NTFS_BITMAP *)",
    "public: unsigned char __thiscall NTFS_BAD_CLUSTER_FILE::Initialize(class NTFS_MASTER_FILE_TABLE *)",
    "public: virtual unsigned char __thiscall NTFS_MFT_FILE::Read(void)",
    "public: virtual __thiscall NTFS_UPCASE_FILE::~NTFS_UPCASE_FILE(void)",
    "FormatEx",
    "public: unsigned char __thiscall NTFS_EXTENT_LIST::AddExtent(class BIG_INT,class BIG_INT,class BIG_INT)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::AddSecurityDescriptorData(class NTFS_ATTRIBUTE *,void *,struct _SECURITY_ENTRY * *,unsigned long,enum _CANNED_SECURITY_TYPE,class NTFS_BITMAP *,unsigned char)",
    "public: virtual unsigned char __thiscall NTFS_SA::Read(void)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::ReadAgain(class BIG_INT)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE::Initialize(class LOG_IO_DP_DRIVE *,unsigned long,void const *,unsigned long,unsigned long,class WSTRING const *,unsigned short)",
    "public: virtual __thiscall NTFS_LOG_FILE::~NTFS_LOG_FILE(void)",
    "public: unsigned char __thiscall NTFS_CLUSTER_RUN::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class BIG_INT,unsigned long,unsigned long)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::Read(class BIG_INT)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE_RECORD::Initialize(class IO_DP_DRIVE *,void *)",
    "public: unsigned char __thiscall NTFS_INDEX_TREE::QueryFileReference(unsigned long,void *,unsigned long,struct _MFT_SEGMENT_REFERENCE *,unsigned char *)",
    "public: __thiscall NTFS_MFT_FILE::NTFS_MFT_FILE(void)",
    "public: __thiscall NTFS_CLUSTER_RUN::NTFS_CLUSTER_RUN(void)",
    "public: __thiscall NTFS_ATTRIBUTE_DEFINITION_TABLE::NTFS_ATTRIBUTE_DEFINITION_TABLE(void)",
    "public: virtual __thiscall NTFS_BAD_CLUSTER_FILE::~NTFS_BAD_CLUSTER_FILE(void)",
    "public: virtual __thiscall NTFS_MFT_INFO::~NTFS_MFT_INFO(void)",
    "public: virtual __thiscall NTFS_EXTENT_LIST::~NTFS_EXTENT_LIST(void)",
    "public: struct _INDEX_ENTRY const * __thiscall NTFS_INDEX_TREE::GetNext(unsigned long *,unsigned char *,unsigned char)",
    "public: __thiscall NTFS_SA::NTFS_SA(void)",
    "public: __thiscall NTFS_BAD_CLUSTER_FILE::NTFS_BAD_CLUSTER_FILE(void)",
    "public: __thiscall NTFS_UPCASE_TABLE::NTFS_UPCASE_TABLE(void)",
    "public: unsigned char __thiscall NTFS_LOG_FILE::Initialize(class NTFS_MASTER_FILE_TABLE *)",
    "public: unsigned char __thiscall NTFS_MFT_FILE::Initialize(class LOG_IO_DP_DRIVE *,class BIG_INT,unsigned long,unsigned long,class BIG_INT,class NTFS_BITMAP *,class NTFS_UPCASE_TABLE *)",
    "public: virtual unsigned char __thiscall NTFS_ATTRIBUTE::Write(void const *,class BIG_INT,unsigned long,unsigned long *,class NTFS_BITMAP *)",
    "public: static unsigned char __stdcall NTFS_MFT_INFO::CompareDupInfo(void *,struct _FILE_NAME *)",
    "ChkdskEx",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::Initialize(class MEM *,class LOG_IO_DP_DRIVE *,class BIG_INT,unsigned long,class BIG_INT,unsigned long,class NTFS_UPCASE_TABLE *,unsigned long)",
    "public: unsigned char __thiscall NTFS_BITMAP::Write(class NTFS_ATTRIBUTE *,class NTFS_BITMAP *)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Flush(class NTFS_BITMAP *,class NTFS_INDEX_TREE *,unsigned char)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::QueryAttributeByOrdinal(class NTFS_ATTRIBUTE *,unsigned char *,unsigned long,unsigned long)",
    "Chkdsk",
    "public: virtual unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Write(void)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::Initialize(class BIG_INT,class NTFS_MFT_FILE *)",
    "public: static struct _MFT_SEGMENT_REFERENCE __stdcall NTFS_MFT_INFO::QuerySegmentReference(void *)",
    "public: static unsigned char __stdcall NTFS_SA::GetRootFrsIndex(class NTFS_MFT_FILE *,class NTFS_FILE_RECORD_SEGMENT *,class NTFS_INDEX_TREE *)",
    "public: unsigned char __thiscall NTFS_BOOT_FILE::Initialize(class NTFS_MASTER_FILE_TABLE *)",
    "public: unsigned char __thiscall NTFS_FRS_STRUCTURE::ReadSet(class TLINK *)",
    "public: __thiscall NTFS_EXTENT_LIST::NTFS_EXTENT_LIST(void)",
    "public: unsigned char __thiscall NTFS_SA::CreateElementaryStructures(class NTFS_BITMAP *,unsigned long,unsigned long,unsigned long,unsigned long,class NUMBER_SET const *,unsigned char,unsigned char,unsigned char,class MESSAGE *,struct BIOS_PARAMETER_BLOCK *,class WSTRING const *)",
    "SetOriginalVolumeName",
    "public: __thiscall NTFS_UPCASE_FILE::NTFS_UPCASE_FILE(void)",
    "public: virtual unsigned char __thiscall NTFS_ATTRIBUTE::InsertIntoFile(class NTFS_FILE_RECORD_SEGMENT *,class NTFS_BITMAP *)",
    "public: unsigned char __thiscall NTFS_SA::Read(class MESSAGE *)",
    "public: unsigned char __thiscall NTFS_SA::TakeCensus(class NTFS_MASTER_FILE_TABLE *,unsigned long,struct NTFS_CENSUS_INFO *)",
    "public: unsigned char __thiscall NTFS_ATTRIBUTE_DEFINITION_TABLE::Initialize(class NTFS_MASTER_FILE_TABLE *,unsigned char)",
    "public: virtual __thiscall NTFS_BITMAP_FILE::~NTFS_BITMAP_FILE(void)",
    "public: static unsigned long __stdcall NTFS_SA::QuerySectorsInElementaryStructures(class DP_DRIVE *,unsigned long,unsigned long,unsigned long,unsigned long)",
    "public: unsigned char __thiscall NTFS_FILE_RECORD_SEGMENT::QueryFileSizes(class BIG_INT *,class BIG_INT *,unsigned char *)"
  ],
  "upnp.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "HrRehydratorCreateServiceObject",
    "HrRehydratorInvokeServiceAction",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "upnphost.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "SvchostPushServiceGlobals",
    "DllGetClassObject",
    "DllRegisterServer",
    "ServiceMain"
  ],
  "ureg.dll": [
    "public: unsigned char __thiscall REGISTRY::QueryKeyInfo(enum _PREDEFINED_KEY,class WSTRING const *,class WSTRING const *,class REGISTRY_KEY_INFO *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::SaveKeyToFile(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class WSTRING const *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::Initialize(class WSTRING const *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::UnLoadHive(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::UpdateKeyInfo(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::SetKeySecurity(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,unsigned long,void *,unsigned long *,unsigned char)",
    "public: unsigned char __thiscall REGISTRY::AddValueEntry(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class REGISTRY_VALUE_ENTRY const *,unsigned char,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::QueryKeySecurity(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO const *,unsigned long,void * *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::DeleteValueEntry(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class WSTRING const *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::DoesKeyExist(enum _PREDEFINED_KEY,class WSTRING const *,class WSTRING const *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY_VALUE_ENTRY::Initialize(class WSTRING const *,unsigned long,enum _REG_TYPE,unsigned char const *,unsigned long)",
    "public: __thiscall REGISTRY_KEY_INFO::REGISTRY_KEY_INFO(void)",
    "public: unsigned char __thiscall REGISTRY::CreateKey(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class REGISTRY_KEY_INFO *,unsigned long *,unsigned char)",
    "public: __thiscall REGISTRY_VALUE_ENTRY::REGISTRY_VALUE_ENTRY(void)",
    "public: unsigned char __thiscall REGISTRY::IsAccessAllowed(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,unsigned long,unsigned long *)",
    "public: __thiscall REGISTRY::REGISTRY(void)",
    "public: unsigned char __thiscall REGISTRY::QuerySubKeysInfo(enum _PREDEFINED_KEY,class WSTRING const *,class WSTRING const *,class ARRAY *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY_KEY_INFO::Initialize(class WSTRING const *,class WSTRING const *,unsigned long,class WSTRING const *,struct _SECURITY_ATTRIBUTES *)",
    "public: virtual __thiscall REGISTRY::~REGISTRY(void)",
    "public: unsigned char __thiscall REGISTRY::LoadHive(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class WSTRING const *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::DoesValueExist(enum _PREDEFINED_KEY,class WSTRING const *,class WSTRING const *,class WSTRING const *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::RestoreKeyFromFile(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class WSTRING const *,unsigned char,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::QueryValues(enum _PREDEFINED_KEY,class WSTRING const *,class WSTRING const *,class ARRAY *,unsigned long *)",
    "public: unsigned char __thiscall REGISTRY::EnableRootNotification(enum _PREDEFINED_KEY,void *,unsigned long,unsigned char)",
    "public: unsigned char __thiscall REGISTRY::DeleteKey(enum _PREDEFINED_KEY,class REGISTRY_KEY_INFO *,class WSTRING const *,unsigned long *)"
  ],
  "url.dll": [
    "MIMEAssociationDialogA",
    "FileProtocolHandlerA",
    "AutodialHookCallback",
    "TranslateURLA",
    "URLAssociationDialogA",
    "FileProtocolHandler",
    "AddMIMEFileTypesPS",
    "MailToProtocolHandler",
    "OpenURL",
    "TelnetProtocolHandler",
    "TranslateURLW",
    "URLAssociationDialogW",
    "InetIsOffline",
    "OpenURLA",
    "TelnetProtocolHandlerA",
    "MailToProtocolHandlerA",
    "MIMEAssociationDialogW"
  ],
  "urlmon.dll": [
    "CoInternetIsFeatureZoneElevationEnabled",
    "FindMediaType",
    "CDLGetLongPathNameW",
    "CreateFormatEnumerator",
    "GetSoftwareUpdateInfo",
    "HlinkGoForward",
    "GetPropertyName",
    "CreateUriWithFragment",
    "ShouldShowIntranetWarningSecband",
    "ZonesReInit",
    "GetLabelsFromNamedHost",
    "IsLoggingEnabledA",
    "HlinkNavigateString",
    "CoInternetIsFeatureEnabled",
    "IsValidURL",
    "IsJITInProgress",
    "CoInternetIsFeatureEnabledForUrl",
    "GetPropertyFromName",
    "CoInternetQueryInfo",
    "CoInternetSetFeatureEnabled",
    "IsLoggingEnabledW",
    "CreateUri",
    "IsDWORDProperty",
    "CoInternetGetSecurityUrl",
    "GetAddSitesFileUrl",
    "URLOpenPullStreamA",
    "URLOpenStreamW",
    "GetUrlmonThreadNotificationHwnd",
    "URLOpenBlockingStreamA",
    "CreateUriFromMultiByteString",
    "ObtainUserAgentString",
    "RegisterMediaTypes",
    "RevokeFormatEnumerator",
    "HlinkSimpleNavigateToString",
    "CoInternetCombineIUri",
    "CoInternetParseUrl",
    "IEInstallScope",
    "CoGetClassObjectFromURL",
    "CoInternetCanonicalizeIUri",
    "CompareSecurityIds",
    "URLOpenStreamA",
    "GetMarkOfTheWeb",
    "HlinkSimpleNavigateToMoniker",
    "CreateAsyncBindCtxEx",
    "CreateURLMonikerEx2",
    "CoInternetCombineUrl",
    "URLDownloadW",
    "URLOpenBlockingStreamW",
    "CoInstall",
    "IntlPercentEncodeNormalize",
    "ShouldDisplayPunycodeForUri",
    "CDLGetLongPathNameA",
    "GetClassURL",
    "UrlMkSetSessionOption",
    "CoInternetParseIUri",
    "CoInternetGetSession",
    "DllCanUnloadNow",
    "ResetUrlmonLanguageData",
    "Extract",
    "GetComponentIDFromCLSSPEC",
    "IsIntranetAvailable",
    "CoInternetCreateZoneManager",
    "DllGetClassObject",
    "DllRegisterServerEx",
    "FaultInIEFeature",
    "CoInternetCompareUrl",
    "BindAsyncMoniker",
    "CreateIUriBuilder",
    "CopyStgMedium",
    "GetPortFromUrlScheme",
    "HlinkGoBack",
    "GetIUriPriv",
    "URLDownloadToFileW",
    "UrlMkGetSessionOption",
    "AsyncInstallDistributionUnit",
    "RevokeBindStatusCallback",
    "RegisterFormatEnumerator",
    "PrivateCoInstall",
    "FindMimeFromData",
    "CoInternetCombineUrlEx",
    "SetSoftwareUpdateAdvertisementState",
    "CreateUriPriv",
    "CoInternetCreateSecurityManager",
    "CoInternetGetSecurityUrlEx",
    "URLDownloadToFileA",
    "CreateURLMoniker",
    "InstallFlash",
    "MkParseDisplayNameEx",
    "CreateURLMonikerEx",
    "FindMediaTypeClass",
    "WriteHitLogging",
    "HlinkNavigateMoniker",
    "CoInternetGetProtocolFlags",
    "GetClassFileOrMime",
    "ReleaseBindInfo",
    "CopyBindInfo",
    "DllRegisterServer",
    "UrlMkBuildVersion",
    "IsStringProperty",
    "DllUnregisterServer",
    "QueryClsidAssociation",
    "ShowTrustAlertDialog",
    "URLOpenPullStreamW",
    "RegisterBindStatusCallback",
    "AsyncGetClassBits",
    "RegisterMediaTypeClass",
    "CompatFlagsFromClsid",
    "CoInternetFeatureSettingsChanged",
    "URLDownloadToCacheFileW",
    "CoInternetIsFeatureEnabledForIUri",
    "DllInstall",
    "GetIDNFlagsForUri",
    "URLDownloadToCacheFileA",
    "CreateAsyncBindCtx",
    "IsAsyncMoniker",
    "URLDownloadA",
    "QueryAssociations"
  ],
  "usbceip.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "usbmon.dll": [
    "InitializePrintMonitor",
    "DllMain"
  ],
  "usbperf.dll": [
    "CollectUsbPerformanceData",
    "CloseUsbPerformanceData",
    "OpenUsbPerformanceData"
  ],
  "usbui.dll": [
    "USBControllerPropPageProvider",
    "CPlApplet",
    "USBControllerBandwidthPage",
    "UsbControlPanelApplet",
    "USBErrorHandler",
    "USBDevicePropPageProvider",
    "USBHubPowerPage",
    "USBHubPropPageProvider"
  ],
  "user32.dll": [
    "GetTaskmanWindow",
    "DlgDirListComboBoxW",
    "MB_GetString",
    "UnregisterTouchWindow",
    "SetMenuDefaultItem",
    "GetMenuItemInfoA",
    "SwapMouseButton",
    "BroadcastSystemMessageW",
    "ValidateRgn",
    "PeekMessageW",
    "keybd_event",
    "InsertMenuItemA",
    "DestroyIcon",
    "LoadCursorFromFileA",
    "CallWindowProcW",
    "LoadStringW",
    "RegisterDeviceNotificationA",
    "WCSToMBEx",
    "SetCursorPos",
    "BuildReasonArray",
    "ModifyMenuW",
    "SetWindowRgn",
    "GetWindow",
    "IsDlgButtonChecked",
    "GetSysColor",
    "GetPriorityClipboardFormat",
    "SendMessageTimeoutA",
    "WINNLSGetIMEHotkey",
    "GetWindowDisplayAffinity",
    "ScrollWindow",
    "SetWindowRgnEx",
    "SetUserObjectInformationA",
    "CharNextExA",
    "IsTopLevelWindow",
    "MapVirtualKeyExA",
    "RegisterShellHookWindow",
    "GetClassInfoExA",
    "ClientThreadSetup",
    "IsDialogMessageA",
    "SetWindowsHookA",
    "MapWindowPoints",
    "GetAltTabInfo",
    "UnhookWindowsHookEx",
    "GetDoubleClickTime",
    "GetWindowContextHelpId",
    "DlgDirListComboBoxA",
    "DdeGetLastError",
    "EnumWindows",
    "LoadMenuIndirectA",
    "GetListBoxInfo",
    "SetWindowLongW",
    "InSendMessageEx",
    "DrawMenuBar",
    "ShowCursor",
    "DwmStartRedirection",
    "WINNLSGetEnableStatus",
    "SetSystemCursor",
    "DdeDisconnect",
    "RegisterErrorReportingDialog",
    "DrawEdge",
    "UnhookWinEvent",
    "CreateAcceleratorTableW",
    "EnumDesktopWindows",
    "IsCharAlphaA",
    "SetCaretPos",
    "InsertMenuW",
    "GetWindowRgn",
    "IsWindowUnicode",
    "LoadIconW",
    "PostMessageA",
    "MessageBoxTimeoutA",
    "SetWindowPlacement",
    "DdeGetQualityOfService",
    "TrackMouseEvent",
    "GetClassInfoW",
    "CreatePopupMenu",
    "ReasonCodeNeedsComment",
    "GrayStringW",
    "DrawStateW",
    "BringWindowToTop",
    "GetCapture",
    "ValidateRect",
    "SetDlgItemTextA",
    "RegisterHotKey",
    "GetScrollBarInfo",
    "DlgDirSelectComboBoxExA",
    "CreateCursor",
    "SetActiveWindow",
    "CreateIconFromResourceEx",
    "CallMsgFilterA",
    "SetScrollInfo",
    "GetSendMessageReceiver",
    "TranslateMessage",
    "LockWindowUpdate",
    "TabbedTextOutW",
    "IsCharUpperW",
    "GetDlgItemTextA",
    "SetScrollRange",
    "DrawCaption",
    "MsgWaitForMultipleObjectsEx",
    "IsCharAlphaW",
    "IsDialogMessage",
    "DdeKeepStringHandle",
    "MessageBoxExA",
    "RegisterClassExA",
    "UnregisterUserApiHook",
    "GhostWindowFromHungWindow",
    "GetClassNameA",
    "GetWindowTextLengthA",
    "CallMsgFilter",
    "SoftModalMessageBox",
    "DdeCmpStringHandles",
    "SetWindowPos",
    "IsChild",
    "PrivateExtractIconExA",
    "PaintMonitor",
    "IsCharAlphaNumericA",
    "DlgDirListA",
    "GetNextDlgTabItem",
    "SetCaretBlinkTime",
    "SoundSentry",
    "CloseGestureInfoHandle",
    "CharLowerW",
    "SetShellWindowEx",
    "EnableScrollBar",
    "SetWindowDisplayAffinity",
    "ControlMagnification",
    "GetKeyNameTextA",
    "PrivateExtractIconExW",
    "GetClipboardSequenceNumber",
    "SetScrollPos",
    "ShowScrollBar",
    "IMPQueryIMEA",
    "FindWindowA",
    "SfmDxSetSwapChainBindingStatus",
    "GetPropA",
    "LockWindowStation",
    "GetWindowCompositionAttribute",
    "GetMessageExtraInfo",
    "ChangeWindowMessageFilterEx",
    "CreateIconIndirect",
    "NotifyWinEvent",
    "RegisterSystemThread",
    "ReleaseCapture",
    "DrawMenuBarTemp",
    "UnregisterHotKey",
    "CreateDialogParamW",
    "DdeQueryConvInfo",
    "DrawStateA",
    "GetFocus",
    "wsprintfA",
    "AppendMenuA",
    "UserLpkTabbedTextOut",
    "SetProgmanWindow",
    "GetInputDesktop",
    "DdeInitializeW",
    "SetWindowCompositionAttribute",
    "GetClassNameW",
    "GetKeyboardLayout",
    "SetMessageExtraInfo",
    "RegisterUserApiHook",
    "SetMenuItemInfoW",
    "GetKeyboardLayoutList",
    "BroadcastSystemMessage",
    "DefFrameProcA",
    "DrawTextExW",
    "MonitorFromPoint",
    "OpenInputDesktop",
    "GetDlgItem",
    "CreateAcceleratorTableA",
    "VkKeyScanExA",
    "SendMessageW",
    "TranslateAccelerator",
    "UpdateLayeredWindow",
    "UnpackDDElParam",
    "WindowFromDC",
    "CreateMenu",
    "SetClassLongW",
    "EnumDisplaySettingsA",
    "ArrangeIconicWindows",
    "WinHelpW",
    "GetClipboardFormatNameA",
    "SetWindowsHookW",
    "GetClassInfoExW",
    "DialogBoxIndirectParamAorW",
    "SetRectEmpty",
    "MoveWindow",
    "FrameRect",
    "wsprintfW",
    "wvsprintfA",
    "GetLastInputInfo",
    "DisplayConfigSetDeviceInfo",
    "DoSoundConnect",
    "GetKeyboardLayoutNameW",
    "IsRectEmpty",
    "IsWindowEnabled",
    "GetMenuItemCount",
    "EmptyClipboard",
    "DialogBoxIndirectParamA",
    "GetMenuItemID",
    "DoSoundDisconnect",
    "IsMenu",
    "PostQuitMessage",
    "OpenThreadDesktop",
    "DrawFocusRect",
    "OemToCharA",
    "GetMessageA",
    "GetAsyncKeyState",
    "GetPhysicalCursorPos",
    "ChildWindowFromPointEx",
    "DeferWindowPos",
    "EnumPropsA",
    "SetMenuItemBitmaps",
    "TrackPopupMenuEx",
    "TileWindows",
    "DefWindowProcA",
    "LogicalToPhysicalPoint",
    "EnterReaderModeHelper",
    "SetUserObjectSecurity",
    "CopyImage",
    "CreateMDIWindowA",
    "ActivateKeyboardLayout",
    "SetGestureConfig",
    "RegisterSessionPort",
    "SetWindowContextHelpId",
    "LoadStringA",
    "PostMessageW",
    "IsWindowInDestroy",
    "PaintDesktop",
    "PtInRect",
    "SetFocus",
    "InvalidateRgn",
    "GetInternalWindowPos",
    "GetCaretBlinkTime",
    "SendIMEMessageExW",
    "PrivateRegisterICSProc",
    "CharToOemBuffA",
    "GetClassLongW",
    "GetIconInfoExW",
    "DrawTextExA",
    "CreateDesktopA",
    "GetIconInfo",
    "FindWindowExA",
    "RemovePropW",
    "IsCharUpperA",
    "CallNextHookEx",
    "IsWindowVisible",
    "GetGUIThreadInfo",
    "GetPropW",
    "SendMessageCallbackA",
    "IntersectRect",
    "SetTaskmanWindow",
    "PackDDElParam",
    "SfmDxBindSwapChain",
    "MessageBoxW",
    "RedrawWindow",
    "BroadcastSystemMessageExW",
    "GetMagnificationLensCtxInformation",
    "OpenWindowStationW",
    "InSendMessage",
    "RegisterMessagePumpHook",
    "WaitMessage",
    "GetGestureConfig",
    "GetUpdatedClipboardFormats",
    "ToUnicodeEx",
    "CheckMenuItem",
    "IsSETEnabled",
    "ReuseDDElParam",
    "CreateDesktopExW",
    "ChangeMenuA",
    "GetWinStationInfo",
    "GetInputLocaleInfo",
    "UserRegisterWowHandlers",
    "GetKeyState",
    "GetClassWord",
    "PeekMessageA",
    "GetTopLevelWindow",
    "LoadRemoteFonts",
    "DdeReconnect",
    "DrawCaptionTempA",
    "OpenDesktopW",
    "GetMessageTime",
    "SetMagnificationDesktopColorEffect",
    "ToUnicode",
    "GetKeyNameTextW",
    "GetTabbedTextExtentW",
    "DestroyWindow",
    "EndTask",
    "GetIconInfoExA",
    "ModifyMenuA",
    "ClipCursor",
    "BroadcastSystemMessageA",
    "DdeCreateStringHandleA",
    "CreateWindowStationW",
    "DdeDisconnectList",
    "LoadBitmapW",
    "ReasonCodeNeedsBugID",
    "IsIconic",
    "RegisterClassA",
    "RegisterWindowMessageA",
    "User32InitializeImmEntryTable",
    "LoadMenuW",
    "AnyPopup",
    "GetTouchInputInfo",
    "OffsetRect",
    "IsWinEventHookInstalled",
    "UnlockWindowStation",
    "GetReasonTitleFromReasonCode",
    "WindowFromPhysicalPoint",
    "GetActiveWindow",
    "GetClipboardFormatNameW",
    "GetClassLongA",
    "DdeAccessData",
    "EnumDisplaySettingsW",
    "SetPropW",
    "VTagOutput",
    "GetMenuBarInfo",
    "SetMenuInfo",
    "MonitorFromWindow",
    "CopyAcceleratorTableW",
    "CopyIcon",
    "DdeNameService",
    "InternalGetWindowText",
    "SetWindowStationUser",
    "GetTabbedTextExtentA",
    "AddClipboardFormatListener",
    "CalculatePopupWindowPosition",
    "RegisterClipboardFormatA",
    "DestroyReasons",
    "InflateRect",
    "InsertMenuA",
    "MapDialogRect",
    "HiliteMenuItem",
    "DdeEnableCallback",
    "SetWindowTextW",
    "FindWindowExW",
    "EndDeferWindowPos",
    "EnumWindowStationsA",
    "RegisterDeviceNotificationW",
    "SetDisplayConfig",
    "ChildWindowFromPoint",
    "EnumPropsExW",
    "GetMessageW",
    "GetKeyboardType",
    "OemToCharBuffA",
    "CheckDlgButton",
    "SetMessageQueue",
    "GetRawInputDeviceInfoW",
    "CloseTouchInputHandle",
    "wvsprintfW",
    "CheckRadioButton",
    "GetClipCursor",
    "ChangeDisplaySettingsW",
    "SfmDxGetSwapChainStats",
    "SwitchDesktopWithFade",
    "DrawTextW",
    "RegisterPowerSettingNotification",
    "GetMonitorInfoA",
    "PrivateExtractIconsW",
    "LoadMenuA",
    "SetCursor",
    "OpenIcon",
    "PostThreadMessageW",
    "RegisterClassW",
    "CreateWindowExW",
    "SetKeyboardState",
    "DdePostAdvise",
    "IMPSetIMEW",
    "GetWindowInfo",
    "CharLowerA",
    "CreateIconFromResource",
    "GetMenuItemRect",
    "WinHelpA",
    "SetWinEventHook",
    "LoadKeyboardLayoutEx",
    "GetMenuInfo",
    "CloseClipboard",
    "SetLayeredWindowAttributes",
    "CheckWindowThreadDesktop",
    "DefMDIChildProcW",
    "EnumThreadWindows",
    "MessageBoxIndirectW",
    "ChangeWindowMessageFilter",
    "SetMenu",
    "IsHungAppWindow",
    "SendNotifyMessageA",
    "SetSysColorsTemp",
    "EnumDisplayDevicesA",
    "AdjustWindowRect",
    "TranslateMDISysAccel",
    "SetPropA",
    "UnregisterSessionPort",
    "DeviceEventWorker",
    "CliImmSetHotKey",
    "CharPrevW",
    "BeginDeferWindowPos",
    "DwmGetDxSharedSurface",
    "CreateDesktopExA",
    "GetWindowThreadProcessId",
    "SetClipboardViewer",
    "CharUpperBuffW",
    "PhysicalToLogicalPoint",
    "EnableMenuItem",
    "RegisterFrostWindow",
    "GetClipboardData",
    "GetWindowRgnEx",
    "GetMenuState",
    "DrawTextA",
    "RegisterRawInputDevices",
    "CheckDesktopByThreadId",
    "GetSysColorBrush",
    "SendInput",
    "GetUserObjectSecurity",
    "RealGetWindowClassA",
    "TabbedTextOutA",
    "SetRect",
    "ChangeMenuW",
    "DeleteMenu",
    "WaitForInputIdle",
    "GetAppCompatFlags2",
    "QuerySendMessage",
    "ShutdownBlockReasonCreate",
    "RemoveClipboardFormatListener",
    "GetRawInputDeviceInfoA",
    "AlignRects",
    "SetCapture",
    "TrackPopupMenu",
    "IsCharLowerW",
    "SendIMEMessageExA",
    "InsertMenuItemW",
    "MenuItemFromPoint",
    "VRipOutput",
    "MessageBoxA",
    "InvertRect",
    "RealChildWindowFromPoint",
    "GetDlgItemTextW",
    "GetCursor",
    "SetMenuContextHelpId",
    "SetWindowsHookExA",
    "UpdatePerUserSystemParameters",
    "DlgDirSelectComboBoxExW",
    "CharPrevA",
    "GetMenuStringA",
    "DdeImpersonateClient",
    "DefFrameProcW",
    "GetParent",
    "GetSystemMenu",
    "IsCharAlphaNumericW",
    "DdeQueryStringA",
    "ExitWindowsEx",
    "KillTimer",
    "DeregisterShellHookWindow",
    "ShowStartGlass",
    "ClientToScreen",
    "GetAltTabInfoW",
    "MessageBoxTimeoutW",
    "EndDialog",
    "VkKeyScanExW",
    "GetClassInfoA",
    "EnumDisplaySettingsExW",
    "GetRegisteredRawInputDevices",
    "DisplayConfigGetDeviceInfo",
    "SendDlgItemMessageA",
    "SfmDxOpenSwapChain",
    "GetGuiResources",
    "BroadcastSystemMessageExA",
    "GetProcessWindowStation",
    "DdeGetData",
    "GetUpdateRgn",
    "ReleaseDC",
    "SetShellWindow",
    "CascadeWindows",
    "DwmStopRedirection",
    "EndMenu",
    "GetDisplayConfigBufferSizes",
    "GetKeyboardLayoutNameA",
    "ChangeClipboardChain",
    "SetDeskWallpaper",
    "GetThreadDesktop",
    "SetCursorContents",
    "OemToCharBuffW",
    "RegisterTouchWindow",
    "SetUserObjectInformationW",
    "IsServerSideWindow",
    "MBToWCSEx",
    "SetWindowsHookExW",
    "EqualRect",
    "GetClientRect",
    "PrintWindow",
    "CloseWindowStation",
    "UserHandleGrantAccess",
    "DefMDIChildProcA",
    "RegisterLogonProcess",
    "OpenWindowStationA",
    "RegisterClassExW",
    "IsTouchWindow",
    "VkKeyScanW",
    "gSharedInfo",
    "RemoveMenu",
    "CharToOemBuffW",
    "CallMsgFilterW",
    "DdeFreeDataHandle",
    "SetTimer",
    "GetUserObjectInformationW",
    "SendMessageCallbackW",
    "GetMagnificationDesktopMagnification",
    "SetMenuItemInfoA",
    "DialogBoxIndirectParamW",
    "MessageBoxIndirectA",
    "GetMenuCheckMarkDimensions",
    "CharUpperA",
    "ScrollChildren",
    "DialogBoxParamW",
    "GetWindowRgnBox",
    "ShowSystemCursor",
    "SystemParametersInfoA",
    "GetDCEx",
    "GetAncestor",
    "WindowFromPoint",
    "LoadCursorFromFileW",
    "DdeQueryNextServer",
    "GetUserObjectInformationA",
    "MonitorFromRect",
    "GetDC",
    "CreateWindowExA",
    "GetWindowModuleFileNameW",
    "GetDlgCtrlID",
    "SystemParametersInfoW",
    "GetMenuStringW",
    "DestroyAcceleratorTable",
    "DefWindowProcW",
    "DefRawInputProc",
    "SetClassLongA",
    "OemToCharW",
    "VkKeyScanA",
    "IsThreadDesktopComposited",
    "GetMouseMovePointsEx",
    "DdeInitializeA",
    "LoadAcceleratorsW",
    "CreateDialogIndirectParamW",
    "AllowForegroundActivation",
    "LoadIconA",
    "DdeSetUserHandle",
    "FlashWindow",
    "DlgDirListW",
    "GetWindowMinimizeRect",
    "RecordShutdownReason",
    "GetSystemMetrics",
    "ToAscii",
    "SetSysColors",
    "CheckMenuRadioItem",
    "GetClipboardViewer",
    "CloseDesktop",
    "SetInternalWindowPos",
    "CountClipboardFormats",
    "GetKBCodePage",
    "ImpersonateDdeClientWindow",
    "GetMenuDefaultItem",
    "ReplyMessage",
    "SwitchToThisWindow",
    "IsZoomed",
    "CtxInitUser32",
    "DdeConnect",
    "UnregisterDeviceNotification",
    "UserLpkPSMTextOut",
    "TranslateMessageEx",
    "_UserTestTokenForInteractive",
    "IMPQueryIMEW",
    "SetWindowLongA",
    "DragObject",
    "CreateDialogIndirectParamA",
    "CharPrevExA",
    "DragDetect",
    "DdeCreateStringHandleW",
    "ShowWindowAsync",
    "UpdateWindow",
    "CharToOemA",
    "SetMagnificationLensCtxInformation",
    "SetDlgItemInt",
    "DestroyMenu",
    "MsgWaitForMultipleObjects",
    "DdeUninitialize",
    "LoadImageA",
    "DdeAddData",
    "CascadeChildWindows",
    "IsClipboardFormatAvailable",
    "RegisterTasklist",
    "DisableProcessWindowsGhosting",
    "ScrollDC",
    "SendMessageTimeoutW",
    "DestroyCaret",
    "GetCursorPos",
    "GetInputState",
    "GetKeyboardState",
    "IMPGetIMEA",
    "UnregisterClassA",
    "CalcMenuBar",
    "EnumDesktopsW",
    "CopyAcceleratorTableA",
    "InvalidateRect",
    "ChangeDisplaySettingsExW",
    "DestroyCursor",
    "AttachThreadInput",
    "UserClientDllInitialize",
    "CreateCaret",
    "RealGetWindowClass",
    "DdeSetQualityOfService",
    "DdeConnectList",
    "GetCaretPos",
    "DispatchMessageA",
    "GetDesktopWindow",
    "CharUpperW",
    "LoadCursorW",
    "CharToOemW",
    "GetOpenClipboardWindow",
    "RemovePropA",
    "IMPGetIMEW",
    "GetComboBoxInfo",
    "SetForegroundWindow",
    "GetWindowRect",
    "SetMirrorRendering",
    "EnumPropsExA",
    "AppendMenuW",
    "DrawFrame",
    "GetUpdateRect",
    "ResolveDesktopForWOW",
    "MessageBeep",
    "SetWindowTextA",
    "SubtractRect",
    "SetClassWord",
    "MapVirtualKeyW",
    "MessageBoxExW",
    "GetWindowTextA",
    "SwitchDesktop",
    "CharUpperBuffA",
    "DrawFrameControl",
    "EnumDisplaySettingsExA",
    "GetMessagePos",
    "UpdateLayeredWindowIndirect",
    "SfmDxReleaseSwapChain",
    "SendNotifyMessageW",
    "GetTopWindow",
    "CharNextW",
    "GetWindowPlacement",
    "CopyRect",
    "RealGetWindowClassW",
    "GetWindowTextW",
    "TranslateAcceleratorA",
    "DlgDirSelectExA",
    "DispatchMessageW",
    "NotifyOverlayWindow",
    "MapVirtualKeyA",
    "AllowSetForegroundWindow",
    "InitializeLpkHooks",
    "SetLastErrorEx",
    "UnhookWindowsHook",
    "TileChildWindows",
    "GetForegroundWindow",
    "SfmDxSetSwapChainStats",
    "ShutdownBlockReasonDestroy",
    "SetProcessWindowStation",
    "GetWindowModuleFileName",
    "LoadAcceleratorsA",
    "DrawIcon",
    "EnumDisplayDevicesW",
    "GetMagnificationDesktopColorEffect",
    "ShowCaret",
    "CsrBroadcastSystemMessageExW",
    "FreeDDElParam",
    "SetParent",
    "GetWindowLongW",
    "LoadCursorA",
    "DefDlgProcA",
    "CallWindowProcA",
    "GetRawInputBuffer",
    "SendDlgItemMessageW",
    "GetWindowWord",
    "DisplayExitWindowsWarnings",
    "SetDoubleClickTime",
    "GetMonitorInfoW",
    "LoadKeyboardLayoutW",
    "FindWindowW",
    "EnableWindow",
    "UserRealizePalette",
    "IsWindow",
    "DrawCaptionTempW",
    "CharNextA",
    "GetNextDlgGroupItem",
    "MenuWindowProcW",
    "DdeFreeStringHandle",
    "PostThreadMessageA",
    "IsWow64Message",
    "DdeUnaccessData",
    "GetWindowModuleFileNameA",
    "GetAppCompatFlags",
    "GetDialogBaseUnits",
    "ChangeDisplaySettingsExA",
    "GetRawInputDeviceList",
    "gapfnScSendMessage",
    "GetProgmanWindow",
    "GetQueueStatus",
    "GetProcessDefaultLayout",
    "LoadMenuIndirectW",
    "CancelShutdown",
    "GetGestureExtraArgs",
    "IMPSetIMEA",
    "ToAsciiEx",
    "OpenDesktopA",
    "LockWorkStation",
    "UpdateWindowTransform",
    "TranslateAcceleratorW",
    "ConsoleControl",
    "GetAltTabInfoA",
    "LoadBitmapA",
    "DlgDirSelectExW",
    "LoadLocalFonts",
    "EndPaint",
    "SetWindowWord",
    "GetGestureInfo",
    "LockSetForegroundWindow",
    "UnregisterClassW",
    "DrawIconEx",
    "CreateSystemThreads",
    "GrayStringA",
    "IsGUIThread",
    "LoadImageW",
    "FlashWindowEx",
    "CharLowerBuffA",
    "ExcludeUpdateRgn",
    "BeginPaint",
    "BlockInput",
    "SetMagnificationDesktopMagnification",
    "SetPhysicalCursorPos",
    "UnloadKeyboardLayout",
    "CreateIcon",
    "LoadKeyboardLayoutA",
    "GetCursorFrameInfo",
    "GetScrollPos",
    "GetMenu",
    "DrawAnimatedRects",
    "GetTitleBarInfo",
    "IsDialogMessageW",
    "LookupIconIdFromDirectory",
    "SetDebugErrorLevel",
    "DdeClientTransaction",
    "SetThreadDesktop",
    "QueryDisplayConfig",
    "EditWndProc",
    "EnumPropsW",
    "mouse_event",
    "ScrollWindowEx",
    "WINNLSEnableIME",
    "MenuWindowProcA",
    "DdeQueryStringW",
    "GetMenuItemInfoW",
    "SfmDxQuerySwapChainBindingStatus",
    "DdeAbandonTransaction",
    "UnregisterPowerSettingNotification",
    "IsProcessDPIAware",
    "GetScrollRange",
    "RegisterGhostWindow",
    "CloseWindow",
    "ShowOwnedPopups",
    "DefDlgProcW",
    "IsCharLowerA",
    "EnumDesktopsA",
    "EnumClipboardFormats",
    "GetWindowCompositionInfo",
    "GetWindowTextLengthW",
    "InternalGetWindowIcon",
    "RegisterWindowMessageW",
    "OpenClipboard",
    "EnumDisplayMonitors",
    "FrostCrashedWindow",
    "EnumChildWindows",
    "UnregisterMessagePumpHook",
    "GetLayeredWindowAttributes",
    "UnionRect",
    "ShutdownBlockReasonQuery",
    "GetShellWindow",
    "GetSubMenu",
    "ScreenToClient",
    "OemKeyScan",
    "DdeCreateDataHandle",
    "GetDlgItemInt",
    "GetWindowDC",
    "SetProcessDefaultLayout",
    "GetMenuContextHelpId",
    "SetDlgItemTextW",
    "CharLowerBuffW",
    "CreateDialogParamA",
    "CreateDialogIndirectParamAorW",
    "SendMessageA",
    "GetClipboardOwner",
    "GetLastActivePopup",
    "PrivateExtractIconsA",
    "SetSystemMenu",
    "SfmDxReportPendingBindingsToDwm",
    "CreateDesktopW",
    "EnumWindowStationsW",
    "GetRawInputData",
    "PaintMenuBar",
    "AnimateWindow",
    "ShowWindow",
    "CreateMDIWindowW",
    "RegisterClipboardFormatW",
    "AdjustWindowRectEx",
    "HungWindowFromGhostWindow",
    "DialogBoxParamA",
    "ChangeDisplaySettingsA",
    "GetScrollInfo",
    "SetProcessDPIAware",
    "CreateWindowStationA",
    "SetClipboardData",
    "HideCaret",
    "GetWindowLongA",
    "GetCursorInfo",
    "IsWindowRedirectedForPrint",
    "MapVirtualKeyExW",
    "FillRect",
    "RegisterServicesProcess",
    "LookupIconIdFromDirectoryEx"
  ],
  "usercpl.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "userenv.dll": [
    "EnterCriticalPolicySection",
    "ExpandEnvironmentStringsForUserW",
    "FreeGPOListW",
    "DllRegisterServer",
    "DestroyEnvironmentBlock",
    "ForceSyncFgPolicy",
    "RsopLoggingEnabled",
    "UnloadUserProfile",
    "WaitForMachinePolicyForegroundProcessing",
    "CreateProfile",
    "UnregisterGPNotification",
    "DllUnregisterServer",
    "DeleteProfileW",
    "GetDefaultUserProfileDirectoryW",
    "LoadUserProfileW",
    "CreateEnvironmentBlock",
    "GetAllUsersProfileDirectoryW",
    "GetDefaultUserProfileDirectoryA",
    "ProcessGroupPolicyCompletedEx",
    "LeaveCriticalPolicySection",
    "GetUserProfileDirectoryA",
    "ProcessGroupPolicyCompleted",
    "RsopFileAccessCheck",
    "DeleteProfileA",
    "GetGPOListA",
    "GetProfilesDirectoryW",
    "GetPreviousFgPolicyRefreshInfo",
    "RefreshPolicy",
    "GetAppliedGPOListW",
    "WaitForUserPolicyForegroundProcessing",
    "GetUserProfileDirectoryW",
    "DllGetContractDescription",
    "GetAppliedGPOListA",
    "RsopResetPolicySettingStatus",
    "RefreshPolicyEx",
    "GetNextFgPolicyRefreshInfo",
    "RsopAccessCheckByType",
    "RsopSetPolicySettingStatus",
    "GetProfileType",
    "ExpandEnvironmentStringsForUserA",
    "GetGPOListW",
    "LoadUserProfileA",
    "FreeGPOListA",
    "RegisterGPNotification",
    "DllCanUnloadNow",
    "GetAllUsersProfileDirectoryA",
    "DllGetClassObject",
    "GetProfilesDirectoryA"
  ],
  "usp10.dll": [
    "LpkPresent",
    "ScriptGetFontScriptTags",
    "ScriptStringCPtoX",
    "ScriptBreak",
    "ScriptStringFree",
    "ScriptItemizeOpenType",
    "UspFreeMem",
    "ScriptRecordDigitSubstitution",
    "ScriptStringGetLogicalWidths",
    "ScriptIsComplex",
    "ScriptGetLogicalWidths",
    "ScriptJustify",
    "ScriptCacheGetHeight",
    "ScriptGetFontFeatureTags",
    "ScriptGetFontProperties",
    "ScriptStringOut",
    "UspAllocCache",
    "ScriptGetFontLanguageTags",
    "ScriptPositionSingleGlyph",
    "ScriptGetGlyphABCWidth",
    "ScriptApplyDigitSubstitution",
    "ScriptShape",
    "ScriptStringXtoCP",
    "ScriptString_pLogAttr",
    "ScriptXtoCP",
    "ScriptGetCMap",
    "ScriptString_pSize",
    "ScriptStringValidate",
    "ScriptCPtoX",
    "ScriptFreeCache",
    "ScriptGetProperties",
    "ScriptLayout",
    "ScriptString_pcOutChars",
    "ScriptGetFontAlternateGlyphs",
    "ScriptTextOut",
    "ScriptSubstituteSingleGlyph",
    "ScriptStringGetOrder",
    "ScriptPlaceOpenType",
    "ScriptItemize",
    "ScriptApplyLogicalWidth",
    "ScriptPlace",
    "ScriptStringAnalyse",
    "ScriptShapeOpenType",
    "UspAllocTemp"
  ],
  "utildll.dll": [
    "QueryCurrentWinStation",
    "AsyncDeviceEnumerate",
    "CalculateDiffTime",
    "CurrentDateTimeString",
    "ParseDecoratedAsyncDeviceName",
    "CachedGetUserFromSid",
    "RegGetNetworkDeviceName",
    "StrAsyncConnectState",
    "FormDecoratedAsyncDeviceName",
    "DateTimeString",
    "GetAssociatedPortName",
    "StrSystemWaitReason",
    "CalculateElapsedTime",
    "SetupAsyncCdConfig",
    "GetSystemMessageA",
    "TestUserForAdmin",
    "StandardErrorMessage",
    "GetSystemMessageW",
    "WinEnumerateDevices",
    "ElapsedTimeString",
    "NetBIOSDeviceEnumerate",
    "GetUnknownString",
    "CtxGetAnyDCName",
    "InitializeAnonymousUserCompareList",
    "StrConnectState",
    "NetworkDeviceEnumerate",
    "HaveAnonymousUsersChanged",
    "ConfigureModem",
    "EnumerateMultiUserServers",
    "StrProcessState",
    "GetUserFromSid",
    "StrSdClass",
    "RegGetNetworkServiceName",
    "InstallModem",
    "IsPartOfDomain",
    "CompareElapsedTime"
  ],
  "uudf.dll": [
    "FormatEx",
    "public: __thiscall METADATA_PARTITION::METADATA_PARTITION(void)",
    "ChkdskEx",
    "Recover",
    "Chkdsk",
    "public: __thiscall UDF_LVOL::UDF_LVOL(void)",
    "public: unsigned char __thiscall UDF_LVOL::CreateOnDisk(class UDF_SA *,class MESSAGE *,class VDS *,struct EXTENTAD *,unsigned long,struct EXTENTAD *)",
    "public: virtual __thiscall METADATA_PARTITION::~METADATA_PARTITION(void)",
    "public: virtual __thiscall UDF_LVOL::~UDF_LVOL(void)",
    "public: unsigned char __thiscall UDF_SA::Initialize(class LOG_IO_DP_DRIVE *,class MESSAGE *,unsigned short)",
    "public: __thiscall UDF_SA::UDF_SA(void)",
    "public: enum FORMAT_ERROR_CODE __thiscall UDF_VOL::Initialize(class WSTRING const *,class MESSAGE *,unsigned char,unsigned short,unsigned char,unsigned char,unsigned char)",
    "public: virtual __thiscall UDF_SA::~UDF_SA(void)",
    "public: unsigned char __thiscall UDF_LVOL::ReadFromDisk(class UDF_SA *,class MESSAGE *,class VDS *)",
    "Format",
    "GetFilesystemInformation",
    "public: __thiscall UDF_VOL::UDF_VOL(void)",
    "public: virtual __thiscall UDF_VOL::~UDF_VOL(void)"
  ],
  "uxlib.dll": [
    "public: __thiscall ATL::CStringT > >::CStringT > >(char,int)",
    "public: int __thiscall ATL::CSimpleArray >::RemoveAt(int)",
    "public: virtual class CLocale __thiscall CLocales::GetLocale(int)",
    "public: class CLocale * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: int __thiscall ATL::CStringT > >::Compare(unsigned short const *)const",
    "private: __thiscall CImageData::CImageData(void)",
    "const CKeyboardLayouts::`vftable'",
    "public: __thiscall ATL::CSimpleStringT::CSimpleStringT(class ATL::CSimpleStringT const &)",
    "public: __thiscall CInternationalUtils::~CInternationalUtils(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::MakeReverse(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::Trim(unsigned short const *)",
    "public: static int __stdcall CInternationalUtils::GetShowLangKeyboard(void)",
    "public: static void __cdecl ATL::CSimpleStringT::CopyChars(unsigned short *,unsigned int,unsigned short const *,int)",
    "public: virtual int __thiscall CLayeredDrivers::GetLayeredDriverCount(void)",
    "public: int __thiscall ATL::CStringT > >::FindOneOf(unsigned short const *)const",
    "public: int __thiscall ATL::CStringT > >::LoadStringW(struct HINSTANCE__ *,unsigned int)",
    "public: __thiscall ATL::CSimpleArray >::CSimpleArray >(class ATL::CSimpleArray > const &)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(char)",
    "private: class CLanguage * __thiscall CLanguages::v_InitLanguage(class ATL::CStringT > >)",
    "private: static struct ATL::CStringData * __cdecl ATL::CSimpleStringT::CloneData(struct ATL::CStringData *)",
    "private: int __thiscall CKeyboardLayouts::v_InitInputProcs(void)",
    "public: virtual int __thiscall CKeyboardLayouts::GetLayoutCount(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::Trim(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(unsigned short const *)",
    "private: __thiscall CLoadDriver::CLoadDriver(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(struct tagVARIANT const &)",
    "private: virtual __thiscall CImageData::~CImageData(void)",
    "public: __thiscall CLanguage::CLanguage(class CLanguage const &)",
    "public: class CLocales & __thiscall CLocales::operator=(class CLocales const &)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(unsigned char const *)",
    "public: virtual int __thiscall CLoadDriver::InstallDriver(long,void (__stdcall*)(void *,int),void *)",
    "public: virtual int __thiscall CLoadDriver::GetHardwareFilter(void)",
    "public: int __thiscall CLanguages::GetLanguageNativeDisplayNameCount(void)",
    "public: __thiscall CLanguage::CLanguage(class ATL::CStringT > >,class ATL::CStringT > >,class ATL::CStringT > >,class ATL::CStringT > >)",
    "private: void __thiscall CImageData::v_GetAvailableLanguages(unsigned short const *)",
    "public: int __thiscall ATL::CStringT > >::CompareNoCase(unsigned short const *)const",
    "public: unsigned short * __thiscall ATL::CStringT > >::SetSysString(unsigned short * *)const",
    "public: int __thiscall ATL::CSimpleStringT::GetAllocLength(void)const",
    "private: static class ILoadDriver * CLoadDriver::s_Instance",
    "public: static class ATL::CStringT > > __stdcall CInternationalUtils::GetLanguage(void)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::SpanExcluding(unsigned short const *)const",
    "public: class CLanguage & __thiscall CLanguage::operator=(class CLanguage const &)",
    "public: int __thiscall ATL::CStringT > >::Find(unsigned short,int)const",
    "public: __thiscall CLayeredDrivers::CLayeredDrivers(class CLayeredDrivers const &)",
    "public: class ATL::CStringT > > __thiscall CLanguage::GetNativeName(void)",
    "public: void __thiscall ATL::CSimpleStringT::Append(unsigned short const *)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(unsigned short)",
    "public: class CDriverItem * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(unsigned short const *)",
    "private: void __thiscall CImageData::v_AddLanguage(unsigned short const *,unsigned short const *,int)",
    "public: static int __cdecl ATL::CSimpleStringT::StringLength(unsigned short const *)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(char)",
    "public: static int __stdcall CInternationalUtils::SetTargetKeyboard(class ATL::CStringT > >)",
    "public: virtual unsigned int __thiscall CImageData::GetCount(void)",
    "public: virtual class CLocale __thiscall CLocales::GetLocale(class ATL::CStringT > >)",
    "private: virtual __thiscall CLoadDriver::~CLoadDriver(void)",
    "public: void __thiscall ATL::CSimpleStringT::Preallocate(int)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimRight(unsigned short)",
    "public: static int __cdecl ATL::CSimpleStringT::StringLength(char const *)",
    "public: void __thiscall ATL::CSimpleStringT::ReleaseBuffer(int)",
    "public: void __cdecl ATL::CStringT > >::Format(unsigned short const *,...)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(unsigned char)",
    "public: virtual int __thiscall CKeyboardLayouts::SetUILanguage(class ATL::CStringT > >)",
    "public: void __thiscall ATL::CSimpleStringT::SetManager(struct ATL::IAtlStringMgr *)",
    "public: int __thiscall ATL::CStringT > >::Find(unsigned short const *,int)const",
    "private: unsigned short * __thiscall CImageData::v_CopyStr(unsigned short const *)",
    "private: unsigned short * __thiscall CImageData::v_GetArchitectureName(struct HINSTANCE__ *,unsigned long)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(class ATL::CStringT > > const &)",
    "public: class CLayeredDriver & __thiscall CLayeredDriver::operator=(class CLayeredDriver const &)",
    "public: __thiscall CLocales::~CLocales(void)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,class CLanguageItem const &)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,class CLocale * const &)",
    "public: static int __stdcall CInternationalUtils::GetShowLangNeutral(void)",
    "public: int __thiscall ATL::CStringT > >::Insert(int,unsigned short)",
    "public: __thiscall CKeyboardLayout::~CKeyboardLayout(void)",
    "public: static int __stdcall CInternationalUtils::SetTargetLanguage(class ATL::CStringT > >)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::SpanIncluding(unsigned short const *)const",
    "public: class CDriverItem & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: int __thiscall ATL::CStringT > >::Remove(unsigned short)",
    "public: virtual int __thiscall CLoadDriver::GetDefault(void)",
    "const CImageData::`vftable'",
    "public: virtual class CLayeredDriver __thiscall CLayeredDrivers::operator[](int)",
    "public: __thiscall CLocale::CLocale(class ATL::CStringT > >,class ATL::CStringT > >)",
    "public: int __thiscall ATL::CStringT > >::Delete(int,int)",
    "public: int __thiscall ATL::CStringT > >::LoadStringW(unsigned int)",
    "public: void __thiscall ATL::CSimpleStringT::Append(class ATL::CSimpleStringT const &)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(char const *)",
    "public: __thiscall CLayeredDrivers::~CLayeredDrivers(void)",
    "private: unsigned short * __thiscall ATL::CSimpleStringT::PrepareWrite(int)",
    "public: int __thiscall ATL::CStringT > >::Replace(unsigned short const *,unsigned short const *)",
    "public: virtual int __thiscall CLayeredDrivers::SetLocale(class ATL::CStringT > >)",
    "public: unsigned short * __thiscall ATL::CStringT > >::AllocSysString(void)const",
    "public: class ATL::CStringT > > __thiscall CLocale::GetLocaleName(void)",
    "public: virtual int __thiscall CLayeredDrivers::Initialize(class ATL::CStringT > >,class ATL::CStringT > >)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,class CDriverItem const &)",
    "public: virtual int __thiscall CKeyboardLayouts::Initialize(class ATL::CStringT > >,class ATL::CStringT > >)",
    "public: virtual unsigned short * __thiscall CImageData::GetDescription(void)",
    "const CLayeredDrivers::`vftable'",
    "public: unsigned short * __thiscall ATL::CSimpleStringT::GetBufferSetLength(int)",
    "public: virtual class CLocale __thiscall CLocales::operator[](int)",
    "public: class CLocale & __thiscall CLocale::operator=(class CLocale const &)",
    "public: virtual class CKeyboardLayout __thiscall CKeyboardLayouts::GetLayout(int)",
    "public: __thiscall CKeyboardLayout::CKeyboardLayout(class ATL::CStringT > >,class ATL::CStringT > >)",
    "public: __thiscall ATL::CSimpleStringT::CSimpleStringT(unsigned short const *,int,struct ATL::IAtlStringMgr *)",
    "public: static int __stdcall CInternationalUtils::SetTargetLayeredDriver(class ATL::CStringT > >)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char const *,int)",
    "private: void __thiscall ATL::CSimpleStringT::PrepareWrite2(int)",
    "public: __thiscall IImageData::IImageData(class IImageData const &)",
    "public: virtual class CLanguage __thiscall CLanguages::GetLanguageFromNativeDisplayName(class ATL::CStringT > >)",
    "private: void __thiscall CKeyboardLayouts::v_DeleteKeyboardLayouts(void)",
    "private: struct ATL::CStringData * __thiscall ATL::CSimpleStringT::GetData(void)const",
    "public: int __thiscall ATL::CSimpleArray >::Add(class CLanguageItem const &)",
    "public: static int __stdcall CInternationalUtils::SetHideOOBELang(class ATL::CStringT > >)",
    "private: void __thiscall ATL::CSimpleStringT::SetLength(int)",
    "private: void __thiscall CLayeredDrivers::v_DeleteLayeredDrivers(void)",
    "protected: static void __cdecl ATL::CSimpleStringT::ThrowMemoryException(void)",
    "public: struct _BLOCKED_REASON * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "private: int __thiscall CLoadDriver::PopulateDriverList(void)",
    "private: static class IImageData * CImageData::s_Instance",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(class ATL::CSimpleStringT const &)",
    "private: void __thiscall ATL::CSimpleStringT::Reallocate(int)",
    "public: class CInternationalUtils & __thiscall CInternationalUtils::operator=(class CInternationalUtils const &)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short,int)",
    "public: virtual int __thiscall CLanguages::Initialize(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char const *,struct ATL::IAtlStringMgr *)",
    "public: __thiscall CLayeredDriver::CLayeredDriver(class CLayeredDriver const &)",
    "public: class CDriverItem const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: void __thiscall ATL::CSimpleStringT::UnlockBuffer(void)",
    "public: int __thiscall ATL::CSimpleArray >::Find(class CLocale * const &)const",
    "public: int __thiscall ATL::CStringT > >::Collate(unsigned short const *)const",
    "public: __thiscall ATL::CSimpleStringT::operator class ATL::CSimpleStringT &(void)",
    "public: virtual int __thiscall CImageData::GetFoundationFlag(void)",
    "public: __thiscall CLocales::CLocales(class CLocales const &)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(struct ATL::IAtlStringMgr *)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(unsigned short)",
    "public: class IImageData & __thiscall IImageData::operator=(class IImageData const &)",
    "public: struct _BLOCKED_REASON * & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: virtual unsigned int __thiscall CLoadDriver::GetCount(void)",
    "public: struct _BLOCKED_REASON * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(class ATL::CSimpleStringT const &)",
    "public: int __thiscall ATL::CSimpleArray >::Add(class CLocale * const &)",
    "const CLocales::`vftable'",
    "public: int __thiscall ATL::CSimpleArray >::GetSize(void)const",
    "public: virtual void __thiscall CImageData::SetEditionName(unsigned short *)",
    "public: int __thiscall ATL::CStringT > >::GetEnvironmentVariableW(unsigned short const *)",
    "private: void __thiscall CImageData::v_AddBlockedReason(unsigned short const *,unsigned short const *)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(char const *)",
    "public: static class ATL::CStringT > > __stdcall CInternationalUtils::GetLocale(void)",
    "public: class CLocale * const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "private: unsigned long __thiscall CImageData::v_GetBBVal(unsigned short const *,unsigned short const *,unsigned long)",
    "public: __thiscall CLocale::CLocale(class CLocale const &)",
    "public: __thiscall ATL::CSimpleStringT::CSimpleStringT(unsigned short const *,struct ATL::IAtlStringMgr *)",
    "public: class ATL::CStringT > > __thiscall CLanguage::GetAbbrevName(void)",
    "public: __thiscall CLayeredDriver::~CLayeredDriver(void)",
    "public: class ATL::CStringT > > __thiscall CLocale::GetAbbrevName(void)",
    "public: __thiscall CLanguages::~CLanguages(void)",
    "public: class ATL::CStringT > > __thiscall CKeyboardLayout::GetLayoutName(void)",
    "const CLanguages::`vftable'",
    "public: virtual int __thiscall CImageData::Initialize(void *)",
    "public: void __thiscall ATL::CSimpleStringT::SetAt(int,unsigned short)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(struct tagVARIANT const &,struct ATL::IAtlStringMgr *)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator=(class ATL::CSimpleStringT const &)",
    "public: __thiscall ATL::CSimpleStringT::operator unsigned short const *(void)const",
    "public: static void __stdcall CImageData::SetInstance(class IImageData *)",
    "const CLoadDriver::`vftable'",
    "public: __thiscall CKeyboardLayouts::CKeyboardLayouts(class CKeyboardLayouts const &)",
    "public: virtual int __thiscall CLoadDriver::SetHardwareFilter(int)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Right(int)const",
    "public: __thiscall ATL::CStringT > >::operator class ATL::CSimpleStringT &(void)",
    "public: void __thiscall ATL::CStringT > >::FormatMessageV(unsigned short const *,char * *)",
    "private: unsigned short * __thiscall CImageData::v_BuildKey(unsigned short const *,unsigned short const *)",
    "public: void __thiscall ATL::CStringT > >::AppendFormatV(unsigned short const *,char *)",
    "public: virtual int __thiscall CLocales::GetLocaleCount(void)",
    "public: __thiscall ATL::CSimpleStringT::~CSimpleStringT(void)",
    "public: virtual unsigned short * __thiscall CImageData::GetEditionName(void)",
    "public: virtual int __thiscall CLoadDriver::GetDriverListAsync(class ATL::CStringT > >,int,void (__stdcall*)(void *,int),void *)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(void)",
    "public: virtual class CLanguage __thiscall CLanguages::GetDefaultFallbackLanguage(void)",
    "private: void __thiscall CImageData::v_FreeLanguages(void)",
    "public: __thiscall CLayeredDrivers::CLayeredDrivers(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimLeft(unsigned short const *)",
    "public: __thiscall ATL::CSimpleArray >::CSimpleArray >(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimLeft(void)",
    "public: class CLanguageItem const & __thiscall ATL::CSimpleArray >::operator[](int)const",
    "public: virtual void __thiscall CImageData::SetFoundationFlag(int)",
    "public: virtual class CLanguage __thiscall CLanguages::GetLanguageFromLocalizedName(class ATL::CStringT > >)",
    "public: static class ILoadDriver * __stdcall CLoadDriver::GetInstance(void)",
    "public: virtual class CDriverItem & __thiscall CLoadDriver::operator[](unsigned int)",
    "public: bool __thiscall ATL::CSimpleStringT::IsEmpty(void)const",
    "private: void __thiscall CLanguages::v_DeleteLanguages(void)",
    "public: virtual void __thiscall CLoadDriver::ClearDriverList(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::Trim(unsigned short)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short const *,int)",
    "public: static long __stdcall CInternationalUtils::PublishLanguageGatherEvent(void *)",
    "public: virtual int __thiscall CLoadDriver::Initialize(void *)",
    "public: virtual class CKeyboardLayout __thiscall CKeyboardLayouts::operator[](int)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,class CDriverItem const &)",
    "public: class CImageData & __thiscall CImageData::operator=(class CImageData const &)",
    "public: class ATL::CStringT > > __thiscall CLayeredDriver::GetName(void)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,class CLocale * const &)",
    "public: class CLoadDriver & __thiscall CLoadDriver::operator=(class CLoadDriver const &)",
    "public: unsigned short * __thiscall ATL::CSimpleStringT::LockBuffer(void)",
    "public: static int __stdcall CInternationalUtils::SetTargetLocale(class ATL::CStringT > >)",
    "public: virtual class CKeyboardLayout __thiscall CKeyboardLayouts::GetLayout(class ATL::CStringT > >)",
    "public: unsigned short __thiscall ATL::CSimpleStringT::GetAt(int)const",
    "public: void __thiscall ATL::CStringT > >::CharToOemA(void)",
    "private: static void __stdcall CLoadDriver::StaticInstallCallback(enum WDS_EVENT_RESULT,struct WDS_DATA const *,void *)",
    "public: virtual int __thiscall CLayeredDrivers::SetUILanguage(class ATL::CStringT > >)",
    "public: void __thiscall ATL::CSimpleArray >::RemoveAll(void)",
    "private: void __thiscall CImageData::v_GetBlockedReasons(unsigned short const *)",
    "private: void __thiscall ATL::CSimpleStringT::Attach(struct ATL::CStringData *)",
    "public: void __thiscall ATL::CSimpleStringT::SetString(unsigned short const *,int)",
    "public: static void __cdecl ATL::CStringT > >::Construct(class ATL::CStringT > > *)",
    "public: __thiscall CLayeredDriver::CLayeredDriver(class ATL::CStringT > >,class ATL::CStringT > >)",
    "public: __thiscall ATL::CSimpleStringT::CSimpleStringT(struct ATL::IAtlStringMgr *)",
    "public: class ATL::CStringT > > __thiscall CLayeredDriver::GetID(void)",
    "public: unsigned short * __thiscall ATL::CSimpleStringT::GetBuffer(void)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(class CLocale * const &)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,struct _BLOCKED_REASON * const &)",
    "public: virtual int __thiscall CLocales::SetUILanguage(class ATL::CStringT > >)",
    "public: int __thiscall ATL::CStringT > >::LoadStringW(struct HINSTANCE__ *,unsigned int,unsigned short)",
    "public: static class ATL::CStringT > > __stdcall CInternationalUtils::GetKeyboard(void)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Mid(int)const",
    "public: int __thiscall ATL::CSimpleArray >::Find(class CLanguageItem const &)const",
    "public: void __thiscall ATL::CSimpleStringT::Truncate(int)",
    "public: virtual int __thiscall CLoadDriver::GetShowFlagEarlyF6(void)",
    "public: void __thiscall ATL::CSimpleStringT::FreeExtra(void)",
    "public: __thiscall CLocales::CLocales(void)",
    "public: int __thiscall ATL::CStringT > >::Insert(int,unsigned short const *)",
    "private: int __thiscall CKeyboardLayouts::v_PopulateKeyboardLayouts(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(struct tagVARIANT const &)",
    "public: int __thiscall ATL::CStringT > >::Replace(unsigned short,unsigned short)",
    "public: class CLanguageItem * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: class CKeyboardLayout __thiscall CKeyboardLayouts::GetDefaultLayout(void)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Tokenize(unsigned short const *,int &)const",
    "public: class CKeyboardLayout & __thiscall CKeyboardLayout::operator=(class CKeyboardLayout const &)",
    "public: class ATL::CStringT > > __thiscall CKeyboardLayout::GetLayoutID(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short const *)",
    "public: void __cdecl ATL::CStringT > >::AppendFormat(unsigned short const *,...)",
    "public: __thiscall CLanguages::CLanguages(class CLanguages const &)",
    "public: void __thiscall ATL::CSimpleStringT::Empty(void)",
    "public: unsigned short * __thiscall ATL::CSimpleStringT::GetBuffer(int)",
    "public: virtual class CLayeredDriver __thiscall CLayeredDrivers::GetLayeredDriver(int)",
    "public: class ATL::CSimpleArray > & __thiscall ATL::CSimpleArray >::operator=(class ATL::CSimpleArray > const &)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(struct tagVARIANT const &)",
    "private: void __thiscall CImageData::v_FreeReasons(void)",
    "public: int __thiscall ATL::CSimpleStringT::GetLength(void)const",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned char const *)",
    "public: virtual class CLayeredDriver __thiscall CLayeredDrivers::GetLayeredDriver(class ATL::CStringT > >)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::MakeUpper(void)",
    "public: class CLanguages & __thiscall CLanguages::operator=(class CLanguages const &)",
    "public: __thiscall IImageData::IImageData(void)",
    "public: class ATL::CStringT > > __thiscall CLanguage::GetLocalizedName(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(unsigned char)",
    "public: static int __stdcall CInternationalUtils::SetUILanguage(class ATL::CStringT > >)",
    "public: class CLayeredDrivers & __thiscall CLayeredDrivers::operator=(class CLayeredDrivers const &)",
    "public: virtual int __thiscall CLocales::Initialize(class ATL::CStringT > >)",
    "public: __thiscall CLoadDriver::CLoadDriver(class CLoadDriver const &)",
    "public: class ATL::CStringT > > __thiscall CLanguage::GetNativeDisplayName(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(class ATL::CStringT > > const &)",
    "public: virtual class CLanguage __thiscall CLanguages::operator[](int)",
    "public: void __thiscall ATL::CSimpleArray >::InternalSetAtIndex(int,struct _BLOCKED_REASON * const &)",
    "public: void __thiscall ATL::CSimpleStringT::Append(unsigned short const *,int)",
    "public: class CLanguageItem & __thiscall ATL::CSimpleArray >::operator[](int)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimLeft(unsigned short)",
    "public: static void __stdcall CLoadDriver::SetInstance(class ILoadDriver *)",
    "private: class ATL::CStringT > > __thiscall CLanguages::v_GetLangIniPath(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char const *,int,struct ATL::IAtlStringMgr *)",
    "public: static void __cdecl ATL::CSimpleStringT::CopyCharsOverlapped(unsigned short *,unsigned int,unsigned short const *,int)",
    "public: __thiscall CLanguages::CLanguages(void)",
    "public: void __thiscall ATL::CStringT > >::OemToCharA(void)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(struct _BLOCKED_REASON * const &)",
    "public: virtual unsigned short * __thiscall CImageData::GetImageIdentifier(void)",
    "public: struct ATL::IAtlStringMgr * __thiscall ATL::CSimpleStringT::GetManager(void)const",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned char const *,struct ATL::IAtlStringMgr *)",
    "public: __thiscall CInternationalUtils::CInternationalUtils(void)",
    "private: int __thiscall CLocales::v_PopulateLocales(void)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short const *,struct ATL::IAtlStringMgr *)",
    "const IImageData::`vftable'",
    "private: void __thiscall ATL::CSimpleStringT::Fork(int)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator+=(unsigned short const *)",
    "public: void __cdecl ATL::CStringT > >::FormatMessageW(unsigned int,...)",
    "public: virtual class CLanguageItem & __thiscall CImageData::operator[](unsigned int)",
    "public: class CLocale * * __thiscall ATL::CSimpleArray >::GetData(void)const",
    "public: void __thiscall ATL::CSimpleStringT::ReleaseBufferSetLength(int)",
    "private: int __thiscall CKeyboardLayouts::v_LoadInputProcs(void)",
    "public: void __thiscall ATL::CSimpleStringT::SetString(unsigned short const *)",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Left(int)const",
    "public: class ATL::CStringT > > __thiscall ATL::CStringT > >::Mid(int,int)const",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator=(unsigned short const *)",
    "private: int __thiscall CLanguages::v_PopulateLanguages(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimRight(void)",
    "public: static class IImageData * __stdcall CImageData::GetInstance(void)",
    "public: int __thiscall ATL::CStringT > >::ReverseFind(unsigned short)const",
    "public: __thiscall ATL::CStringT > >::CStringT > >(unsigned short const *,int,struct ATL::IAtlStringMgr *)",
    "public: int __thiscall ATL::CSimpleArray >::Find(class CDriverItem const &)const",
    "public: void __cdecl ATL::CStringT > >::FormatMessageW(unsigned short const *,...)",
    "private: int __thiscall CLayeredDrivers::v_PopulateLayeredDrivers(void)",
    "private: bool __thiscall ATL::CStringT > >::CheckImplicitLoad(void const *)",
    "public: virtual int __thiscall CLanguages::GetLanguageCount(void)",
    "public: int __thiscall ATL::CSimpleArray >::Find(struct _BLOCKED_REASON * const &)const",
    "public: virtual int __thiscall CLoadDriver::CanReadMedia(void)",
    "public: virtual unsigned short * __thiscall CImageData::GetDefaultLanguage(void)",
    "public: virtual int __thiscall CLanguages::SetUILanguage(class ATL::CStringT > >)",
    "public: virtual void __thiscall CImageData::FreeInstance(void)",
    "public: __thiscall CLanguage::~CLanguage(void)",
    "public: __thiscall CImageData::CImageData(class CImageData const &)",
    "public: __thiscall ATL::CStringT > >::CStringT > >(char const *)",
    "protected: static void __cdecl ATL::CSimpleStringT::Concatenate(class ATL::CSimpleStringT &,unsigned short const *,int,unsigned short const *,int)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::operator=(char)",
    "private: unsigned short * __thiscall CImageData::v_GetBBStr(unsigned short const *,unsigned short const *)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(class CLanguageItem const &)",
    "public: class ATL::CSimpleStringT & __thiscall ATL::CSimpleStringT::operator+=(unsigned short)",
    "public: virtual class CLanguage __thiscall CLanguages::GetLanguageFromNativeName(class ATL::CStringT > >)",
    "public: __thiscall CKeyboardLayout::CKeyboardLayout(class CKeyboardLayout const &)",
    "public: virtual class CLanguage __thiscall CLanguages::GetLanguage(int)",
    "public: unsigned short const * __thiscall ATL::CSimpleStringT::GetString(void)const",
    "private: static void __stdcall CLoadDriver::StaticScanCallback(enum WDS_EVENT_RESULT,struct WDS_DATA const *,void *)",
    "public: void __cdecl ATL::CStringT > >::AppendFormat(unsigned int,...)",
    "public: __thiscall CKeyboardLayouts::CKeyboardLayouts(void)",
    "public: static void __cdecl ATL::CSimpleStringT::CopyChars(unsigned short *,unsigned short const *,int)",
    "public: __thiscall CLocale::~CLocale(void)",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::TrimRight(unsigned short const *)",
    "public: int __thiscall ATL::CSimpleArray >::Add(class CDriverItem const &)",
    "public: int __thiscall ATL::CStringT > >::CollateNoCase(unsigned short const *)const",
    "public: virtual int __thiscall CImageData::PopulateImageData(unsigned short const *,unsigned short *,int,struct HINSTANCE__ *)",
    "public: static void __cdecl ATL::CSimpleStringT::CopyCharsOverlapped(unsigned short *,unsigned short const *,int)",
    "public: void __thiscall ATL::CSimpleStringT::AppendChar(unsigned short)",
    "public: class CKeyboardLayouts & __thiscall CKeyboardLayouts::operator=(class CKeyboardLayouts const &)",
    "public: __thiscall CKeyboardLayouts::~CKeyboardLayouts(void)",
    "private: static int __stdcall CLocales::v_EnumLocalesProc(unsigned short *,unsigned long,long)",
    "public: static int __stdcall CInternationalUtils::IsLanguageEnabled(class ATL::CStringT > >,class ATL::CStringT > >)",
    "public: int __thiscall ATL::CSimpleArray >::SetAtIndex(int,class CLanguageItem const &)",
    "public: struct ATL::IAtlStringMgr * __thiscall ATL::CStringT > >::GetManager(void)const",
    "public: int __thiscall ATL::CSimpleArray >::Add(struct _BLOCKED_REASON * const &)",
    "public: __thiscall ATL::CStringT > >::~CStringT > >(void)",
    "public: void __thiscall ATL::CStringT > >::FormatV(unsigned short const *,char *)",
    "public: int __thiscall ATL::CSimpleArray >::Remove(class CDriverItem const &)",
    "public: __thiscall ATL::CSimpleArray >::~CSimpleArray >(void)",
    "public: void __cdecl ATL::CStringT > >::Format(unsigned int,...)",
    "public: unsigned short __thiscall ATL::CSimpleStringT::operator[](int)const",
    "public: class ATL::CStringT > > & __thiscall ATL::CStringT > >::MakeLower(void)",
    "public: virtual unsigned short * __thiscall CImageData::GetColumnDataAtIndex(unsigned int)"
  ],
  "uxlibres.dll": "No exports",
  "uxsms.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "uxtheme.dll": [
    "ThemeInitApiHook",
    "GetThemeSysColor",
    "GetThemeBitmap",
    "GetThemePosition",
    "EnableTheming",
    "SetWindowThemeAttribute",
    "BufferedPaintClear",
    "GetThemeMetric",
    "IsCompositionActive",
    "IsThemeBackgroundPartiallyTransparent",
    "GetThemeBackgroundRegion",
    "GetThemeDocumentationProperty",
    "GetThemeTextExtent",
    "GetWindowTheme",
    "GetThemePartSize",
    "BufferedPaintSetAlpha",
    "GetThemeSysBool",
    "BufferedPaintRenderAnimation",
    "DrawThemeParentBackground",
    "GetThemeInt",
    "GetBufferedPaintDC",
    "OpenThemeData",
    "BufferedPaintStopAllAnimations",
    "BufferedPaintUnInit",
    "DrawThemeParentBackgroundEx",
    "IsAppThemed",
    "BufferedPaintInit",
    "EndBufferedAnimation",
    "GetThemeEnumValue",
    "UpdatePanningFeedback",
    "GetThemeStream",
    "GetThemeTransitionDuration",
    "BeginBufferedPaint",
    "DrawThemeTextEx",
    "GetThemeSysFont",
    "SetWindowTheme",
    "GetThemeBackgroundExtent",
    "GetThemeFilename",
    "GetThemeString",
    "DrawThemeBackground",
    "IsThemeActive",
    "OpenThemeDataEx",
    "GetThemeSysSize",
    "GetThemePropertyOrigin",
    "EndBufferedPaint",
    "GetCurrentThemeName",
    "GetBufferedPaintBits",
    "EndPanningFeedback",
    "SetThemeAppProperties",
    "EnableThemeDialogTexture",
    "CloseThemeData",
    "DrawThemeEdge",
    "BeginBufferedAnimation",
    "IsThemeDialogTextureEnabled",
    "BeginPanningFeedback",
    "IsThemePartDefined",
    "DrawThemeBackgroundEx",
    "GetThemeColor",
    "GetBufferedPaintTargetRect",
    "GetBufferedPaintTargetDC",
    "DrawThemeIcon",
    "GetThemeSysColorBrush",
    "GetThemeTextMetrics",
    "GetThemeAppProperties",
    "GetThemeSysInt",
    "GetThemeBool",
    "GetThemeMargins",
    "GetThemeSysString",
    "GetThemeBackgroundContentRect",
    "HitTestThemeBackground",
    "GetThemeFont",
    "DrawThemeText",
    "GetThemeRect",
    "GetThemeIntList"
  ],
  "VAN.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "RunVANUI",
    "RunVANW",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "VBoxOGLarrayspu.dll": [
    "crStateMergeExtensions",
    "_crStateGetPixelMapusv@8",
    "_crStateProgramNamedParameter4dNV@44",
    "_crStateRotated@32",
    "_crStateTexGenf@12",
    "_crStateDrawBuffer@4",
    "_crStateGetProgramLocalParameterfvARB@12",
    "_crStateMultMatrixf@4",
    "_crStatePixelMapuiv@12",
    "crStateProgramDestroy",
    "_crStateLightiv@12",
    "_crStateDeleteTextures@8",
    "_crStateFogiv@8",
    "crStateInit",
    "_crStateBindProgramNV@8",
    "crStatePointInit",
    "crStateViewportSwitch",
    "crStateFogInit",
    "_crStateBlendColorEXT@16",
    "_crStateProgramParameters4fvNV@16",
    "_crStateGetClipPlane@8",
    "_crStateStencilOp@12",
    "_crStateRotatef@16",
    "_crStateGetChromiumParametervCR@20",
    "crStateClientDestroy",
    "crStateRegCombinerSwitch",
    "crStateCreateContextEx",
    "_crStateClientActiveTextureARB@4",
    "_crStateGetFinalCombinerInputParameterivNV@12",
    "crStateDiffAllPrograms",
    "crStateResetCurrentPointers",
    "_crStateHint@8",
    "_crStateGetVertexAttribfvNV@12",
    "_crStateGetProgramNamedParameterdvNV@16",
    "crStateLineSwitch",
    "_crStateColorMaterial@8",
    "_crStateStencilMask@4",
    "_crStateGetTexEnvfv@12",
    "_crStatePointParameterfARB@8",
    "crStateComputeVersion",
    "crStateTransformXformPointMatrixd",
    "crStateMultisampleSwitch",
    "_crStatePointParameteri@8",
    "_crStateGetMapfv@12",
    "_crStateBitmap@28",
    "_crStatePixelMapusv@12",
    "_crStateLoadTransposeMatrixfARB@4",
    "crStateStencilDiff",
    "_crStateTexGeniv@12",
    "_crStateEndList@0",
    "_crStateGetCombinerOutputParameterivNV@16",
    "_crStateCompressedTexImage2DARB@32",
    "crStateLightingInit",
    "crStateUpdateColorBits",
    "_crStateMaterialfv@12",
    "crStateCurrentInit",
    "_crStateGetMapdv@12",
    "crStateAttribSwitch",
    "crStateTextureCheckDirtyImages",
    "_crStateLoadTransposeMatrixdARB@4",
    "crStateSwitchContext",
    "crStateDestroyContext",
    "crStateViewportDiff",
    "crStateMakeCurrent",
    "_crStateIsProgramARB@4",
    "_crStateGetProgramivARB@12",
    "crSPUInitDispatchTable",
    "_crStateFogi@8",
    "_crStateFrustum@48",
    "crStateEvaluatorSwitch",
    "crStateOcclusionInit",
    "_crStateTexCoordPointer@16",
    "crStateViewportInit",
    "_crStateMap1d@32",
    "_crStateGetCombinerInputParameterivNV@20",
    "_crStateMapGrid2d@40",
    "_crStateGetVertexAttribivNV@12",
    "_crStatePolygonOffset@8",
    "_crStateBindProgramARB@8",
    "crStateBufferInit",
    "crStateBufferDiff",
    "crStateTransformXformPoint",
    "_crStateCombinerInputNV@24",
    "_crStateGetQueryivARB@12",
    "_crStateTexSubImage2D@36",
    "crStateLimitsDestroy",
    "crStateViewportApply",
    "_crStateMultMatrixd@4",
    "crStateSetCurrent",
    "crStateHintInit",
    "_crStateColorMask@16",
    "_crStateIsList@4",
    "crStateDeleteTextureObject",
    "crStateExtensionsInit",
    "crStateLineDiff",
    "_crStateGenBuffersARB@8",
    "_crStateLoadIdentity@0",
    "crStateSetExtensionString",
    "_crStateDeleteBuffersARB@8",
    "_crStateVertexPointer@16",
    "_crStateClearIndex@4",
    "_crStateColor4f@16",
    "crStateDiffContext",
    "_crStateGetCombinerStageParameterfvNV@12",
    "_crStateProgramParameter4fNV@24",
    "crStateFlushArg",
    "crStateTransformSwitch",
    "crStateFlushFunc",
    "_crStateGetVertexAttribdvNV@12",
    "crStateTransformUpdateTransform",
    "_crStateFogCoordPointerEXT@12",
    "_crStateChromiumParametervCR@16",
    "crStateTransformDestroy",
    "_crStateGetProgramEnvParameterdvARB@12",
    "_crStateGetProgramivNV@12",
    "crStateTextureInit",
    "_crStateTexEnviv@12",
    "crStatePixelSwitch",
    "_crStatePointParameteriv@8",
    "_crStateLogicOp@4",
    "_crStatePointSize@4",
    "crStateCurrentSwitch",
    "crStateFogSwitch",
    "_crStateActiveTextureARB@4",
    "_crStateTexImage3D@40",
    "_crStatePrioritizeTextures@12",
    "crStateEvaluatorDestroy",
    "_crStateIndexMask@4",
    "_crStatePopAttrib@0",
    "_crStateLighti@12",
    "_crStateProgramLocalParameter4fARB@24",
    "_crStateTexParameterfv@12",
    "_crStateProgramEnvParameter4fARB@24",
    "_crStateGetProgramStringARB@12",
    "crSPUCopyDispatchTable",
    "_crStateClearStencil@4",
    "_crStateGenQueriesARB@8",
    "_crStateGetTexImage@20",
    "_crStateGetProgramEnvParameterfvARB@12",
    "_crStateCombinerParameterfNV@8",
    "_crStateGetTexLevelParameteriv@16",
    "_crStatePixelTransferi@8",
    "_crStateTexEnvf@12",
    "_crStateGetQueryObjectuivARB@12",
    "_crStateGetTexGenfv@12",
    "_crStateClearColor@16",
    "_crStateLightf@12",
    "_crStateScissor@16",
    "crStateCurrentRecover",
    "_crStateColor4fv@4",
    "crStateError",
    "crStateLimitsInit",
    "_crStateProgramNamedParameter4dvNV@16",
    "_crStateGetBufferSubDataARB@16",
    "_crStateProgramStringARB@16",
    "_crStateTexGenfv@12",
    "_crStateFrontFace@4",
    "_crStateGetPolygonStipple@4",
    "_crStateGetVertexAttribPointervNV@12",
    "_crStatePixelStorei@8",
    "_crStateProgramEnvParameter4dARB@40",
    "_crStateBlendEquationEXT@4",
    "_crStateListBase@4",
    "_crStatePushAttrib@4",
    "_crStateFogf@8",
    "_crStateGetProgramLocalParameterdvARB@12",
    "_crStateMap1f@24",
    "crStateCurrentDiff",
    "_crStateClearAccum@16",
    "crStateLineInit",
    "_crStateAreTexturesResident@12",
    "_crStateProgramLocalParameter4dARB@40",
    "_crStateGenTextures@8",
    "_crStateGetVertexAttribfvARB@12",
    "crStateListsInit",
    "crStateUseServerArrays",
    "_crStateShadeModel@4",
    "_crStateEnableVertexAttribArrayARB@4",
    "crStatePixelDiff",
    "crStateRegCombinerInit",
    "_crStateTexParameteriv@12",
    "_crStateGenProgramsNV@8",
    "_crStateGetCompressedTexImageARB@12",
    "_crStateGetMaterialiv@12",
    "crStateCreateContext",
    "_crStateVertexAttribPointerARB@24",
    "_crStateDisableVertexAttribArrayARB@4",
    "_crStateCompressedTexImage3DARB@36",
    "crStateSetCurrentPointers",
    "_crStateClearDepth@8",
    "_crStateChromiumParameteriCR@8",
    "_crStateNormalPointer@12",
    "_crStateTexSubImage3D@44",
    "crStateColorMaterialRecover",
    "_crStateBufferDataARB@16",
    "crStateEvaluatorDiff",
    "_crStateGetMapiv@12",
    "_crStatePopClientAttrib@0",
    "crStateClientInitBits",
    "_crStateProgramEnvParameter4fvARB@12",
    "_crStateSampleCoverageARB@8",
    "_crStateMap2d@56",
    "_crStateColor3f@12",
    "_crStateCompressedTexSubImage1DARB@28",
    "_crStateGetTrackMatrixivNV@16",
    "_crStateGetTexParameterfv@12",
    "crStateAttribInit",
    "_crStateProgramNamedParameter4fvNV@16",
    "_crStateTexEnvfv@12",
    "_crStateStencilFunc@12",
    "_crStateBlendFuncSeparateEXT@16",
    "_crStateCompressedTexSubImage2DARB@36",
    "_crStateTexSubImage1D@28",
    "_crStateCombinerParameteriNV@8",
    "_crStateFinalCombinerInputNV@16",
    "_crStateEnableClientState@4",
    "_crStateMaterialiv@12",
    "crStateLimitsPrint",
    "_crStateGetProgramNamedParameterfvNV@16",
    "_crStateDisableClientState@4",
    "_crStateGetVertexAttribPointervARB@12",
    "crStatePolygonDiff",
    "_crStateTexParameterf@12",
    "crStateTextureDestroy",
    "_crStateClipPlane@8",
    "crStateProgramInit",
    "_crStatePolygonMode@8",
    "_crStateBindTexture@8",
    "_crStateDepthFunc@4",
    "_crStateGetProgramStringNV@12",
    "_crStateGetBufferParameterivARB@12",
    "_crStateMultTransposeMatrixdARB@4",
    "_crStateUnmapBufferARB@4",
    "crStateMultisampleDiff",
    "_crStateColorPointer@16",
    "_crStateGenLists@4",
    "_crStateGetCombinerOutputParameterfvNV@16",
    "_crStateEdgeFlagPointer@8",
    "crStateTextureGet",
    "_crStateDepthMask@4",
    "_crStateBegin@4",
    "_crStatePushMatrix@0",
    "_crStateLightfv@12",
    "_crStateProgramParameter4fvNV@12",
    "_crStateLoadProgramNV@16",
    "_crStateGetPointerv@8",
    "_crStateRequestResidentProgramsNV@8",
    "_crStateGetBufferPointervARB@12",
    "_crStateInterleavedArrays@12",
    "_crStateProgramNamedParameter4fNV@28",
    "_crStateTranslated@24",
    "_crStateLightModeli@8",
    "_crStateTranslatef@12",
    "_crStateBufferSubDataARB@16",
    "crStatePointDiff",
    "_crStatePixelTransferf@8",
    "_crStateCombinerStageParameterfvNV@12",
    "crStateGetCurrent",
    "crStatePixelInit",
    "_crStateViewport@16",
    "crStatePolygonInit",
    "_crStateGetPixelMapuiv@8",
    "crSPUSetDefaultParams",
    "_crStateProgramParameter4dNV@40",
    "crStateInitMatrixStack",
    "_crStateProgramParameters4dvNV@16",
    "crStateTextureObjectDiff",
    "crStateHintSwitch",
    "crStateDiffAllTextureObjects",
    "_crStateFlushVertexArrayRangeNV@0",
    "_crStateLineWidth@4",
    "_crStateIsBufferARB@4",
    "_crStateAreProgramsResidentNV@12",
    "_crStatePixelMapfv@12",
    "_crStateTexEnvi@12",
    "_crStateLoadMatrixf@4",
    "_crStateCombinerParameterivNV@8",
    "_crStatePolygonStipple@4",
    "_crStatePushClientAttrib@4",
    "_crStateColor3fv@4",
    "_crStateTexParameteri@12",
    "_crStateGenProgramsARB@8",
    "_crStateTexGendv@12",
    "_crStateFogfv@8",
    "crStateUseServerArrayElements",
    "_crStateGetLightfv@12",
    "crStateLightingDiff",
    "_crStateScaled@24",
    "_crStateOrtho@48",
    "_crStateMapGrid1f@12",
    "_crStateIsQueryARB@4",
    "crStateTransformInit",
    "_crStateBlendFunc@8",
    "_crStateGetVertexAttribdvARB@12",
    "_crStateReadPixels@28",
    "crStateLightingDestroy",
    "crStateLoadMatrix",
    "crStatePolygonSwitch",
    "crStateEvaluatorInit",
    "_crStateGetVertexAttribivARB@12",
    "_crStateDeleteQueriesARB@8",
    "_crStateCombinerParameterfvNV@8",
    "_crStateProgramLocalParameter4fvARB@12",
    "_crStatePointParameterfvARB@8",
    "_crStateTrackMatrixNV@16",
    "_crStateAlphaFunc@8",
    "_crStateCompressedTexSubImage3DARB@44",
    "_crStateIsTexture@4",
    "_crStateSecondaryColorPointerEXT@16",
    "_crStateReadBuffer@4",
    "crStateStencilInit",
    "_crStateMaterialf@12",
    "crStateListsDestroy",
    "_crStateMap2f@40",
    "crStateOcclusionSwitch",
    "_crStateNewList@8",
    "_crStateLightModelfv@8",
    "crStateOcclusionDestroy",
    "crStateClientInit",
    "crStateStencilSwitch",
    "_crStateGetLightiv@12",
    "_crStateLoadMatrixd@4",
    "_crStatePixelZoom@8",
    "_crStateGetTexLevelParameterfv@16",
    "_crStateGetProgramParameterfvNV@16",
    "_crStateGetTexParameteriv@12",
    "_crStateGetPixelMapfv@8",
    "_crStateMapGrid1d@20",
    "_crStateGetTexGendv@12",
    "crStateTransformDiff",
    "_crStateTexImage1D@32",
    "crSPUGetEnumIndex",
    "crStateListsDiff",
    "_crStateLightModeliv@8",
    "_crStateTexImage2D@36",
    "_crStateTexGeni@12",
    "_crStatePopMatrix@0",
    "_crStateTexImage3DEXT@40",
    "_crStateMateriali@12",
    "_crStateLightModelf@8",
    "_crStateBindBufferARB@8",
    "_crStateVertexAttribPointerNV@20",
    "_crStateTexGend@16",
    "_crStateEndQueryARB@4",
    "crStateMultisampleInit",
    "crStateTextureSwitch",
    "crStateFogDiff",
    "_crStateDeleteLists@8",
    "_crStateEnd@0",
    "_crStateCullFace@4",
    "crStateListsSwitch",
    "crStateTextureDiff",
    "crStateLightingInitBits",
    "_crStateGetError@0",
    "_crStateDepthRange@16",
    "crStateDiffAPI",
    "_crStatePixelStoref@8",
    "_crStateProgramEnvParameter4dvARB@12",
    "_crStateVertexArrayRangeNV@8",
    "_crStateMultTransposeMatrixfARB@4",
    "_crStateGetTexGeniv@12",
    "crStateOcclusionDiff",
    "crStateBufferSwitch",
    "_crStateGetCombinerInputParameterfvNV@20",
    "_crStateCombinerOutputNV@40",
    "crStateTransformXformPointMatrixf",
    "_crStateProgramLocalParameter4dvARB@12",
    "_crStateScalef@12",
    "_crStateMatrixMode@4",
    "_crStateMapGrid2f@24",
    "_crStateProgramParameter4dvNV@12",
    "crStateProgramDiff",
    "_crStateCompressedTexImage1DARB@28",
    "_crStateGetProgramParameterdvNV@16",
    "_crStateGetTexEnviv@12",
    "_crStateChromiumParameterfCR@8",
    "crStateDeleteTextureObjectData",
    "_crStateGetQueryObjectivARB@12",
    "_crStateMapBufferARB@8",
    "_crStateExecuteProgramNV@12",
    "_crStateIndexPointer@12",
    "crStateHintDiff",
    "crStatePointSwitch",
    "crStateLightingSwitch",
    "_crStateGetFinalCombinerInputParameterfvNV@12",
    "crStateRegCombinerDiff",
    "_crStateDeleteProgramsARB@8",
    "crStateProgramSwitch",
    "SPULoad",
    "_crStateLineStipple@8",
    "_crStateGetMaterialfv@12",
    "_crStateBeginQueryARB@8"
  ],
  "VBoxOGLcrutil.dll": [
    "crNetTearDown",
    "crPixelCopy3D",
    "crMemZero",
    "crNetDispatchMessage",
    "crBufferPoolPush",
    "crNetGetMessage",
    "crMatrixTranslate",
    "crSetenv",
    "crNetFreeConnection",
    "crNetSetNodeRange",
    "crStrstr",
    "crStrndup",
    "crMatrixIsOrthographic",
    "crParseURL",
    "crTransformBBox",
    "crHashtableDeleteBlock",
    "crStartTimer",
    "crCalloc",
    "crHashtableGetDataKey",
    "crTextureSize",
    "crMatrixRotate",
    "crMatrixInvertTranspose",
    "crNetSetKey",
    "crStrIntersect",
    "crMatrixCopy",
    "crHashtableDelete",
    "crHashtableReplace",
    "crStrcasecmp",
    "crMatrixInitFromFloats",
    "crDLLClose",
    "crWarpPoint",
    "crNetFree",
    "crRandSeed",
    "crSignalSemaphore",
    "crNetSendExact",
    "crListPrev",
    "crFree",
    "crNetDisconnect",
    "crMatrixScale",
    "crHashtableSearch",
    "crInfo",
    "crNetInit",
    "crBitmapCopy",
    "crStrSplit",
    "crMsleep",
    "crInitTSD",
    "crStrjoin3",
    "crRandAutoSeed",
    "crStrcpy",
    "crHashtableWalk",
    "crEnqueueMessage",
    "crInitMutex",
    "crBufferPoolFree",
    "crRectiUnion",
    "crUnlockMutex",
    "crExpandCallListsWithData",
    "crListFront",
    "crError",
    "crGetTSD",
    "crMatrixGetFloats",
    "crNetSingleRecv",
    "crPixelCopy2D",
    "crDestroyTimer",
    "crWarning",
    "crRandInt",
    "crMatrixPrint",
    "crRandFloat",
    "crMatrixMultiply",
    "crListBegin",
    "crAllocHashtable",
    "crLockMutex",
    "crMemcpy",
    "crProjectBBox",
    "crStopTimer",
    "crStrchr",
    "crDLLGetNoError",
    "crAllocDebug",
    "crFreeCondition",
    "crSpawn",
    "crMatrixTransformPointf",
    "crMatrixFrustum",
    "crStrncpy",
    "crStrToFloat",
    "crStrlen",
    "crMatrixInitFromString",
    "crBufferPoolPop",
    "crSetTSD",
    "crListBack",
    "crListClear",
    "crHashtableAdd",
    "crNetDefaultRecv",
    "crStrcmp",
    "crNetPeekMessage",
    "crThreadID",
    "crListElement",
    "crMatrixIsEqual",
    "crStrdup",
    "crAlloc",
    "crHashtableAllocKeys",
    "crInitSemaphore",
    "crListEnd",
    "crAllocList",
    "crMemset",
    "crGetenv",
    "crNetRecv",
    "crListPushFront",
    "crCallocDebug",
    "crNetReadline",
    "crCloseSocket",
    "crBytesToString",
    "crStrncmp",
    "crListSize",
    "crNetConnectToServer",
    "crHashtableNumElements",
    "crStrrchr",
    "SWAPDOUBLE",
    "crFreeStrings",
    "crNetAccept",
    "crResetTimer",
    "crWaitSemaphore",
    "crFreeList",
    "crListErase",
    "crNetNewClient",
    "crMatrixTranspose",
    "crStrSplitn",
    "crRegisterSocketCallback",
    "crNetSend",
    "crTimerTime",
    "crWaitBarrier",
    "crImageSize",
    "crNetDump",
    "crInitMessageList",
    "crTimerNewTimer",
    "crStrToInt",
    "crStrcat",
    "crDebug",
    "crSleep",
    "crBufferPoolInit",
    "crEnableWarnings",
    "crMatrixInit",
    "crNetRecvReadPixels",
    "crPixelSize",
    "crMatrixIsIdentity",
    "crBufferPoolCallbackFree",
    "crInitTSDF",
    "crNetSetRank",
    "crStrjoin",
    "crWordsToString",
    "crDetermineEndianness",
    "crMemcmp",
    "crNetNumMessages",
    "crNetAlloc",
    "crListInsert",
    "crRealloc",
    "crWaitCondition",
    "crBufferPoolGetMaxBuffers",
    "crDLLGet",
    "crIsDigit",
    "crHashtableIsKeyUsed",
    "crFreeBarrier",
    "crDequeueMessage",
    "crGetCurrentDir",
    "crNetConnect",
    "crHullInteriorBox",
    "crListPopFront",
    "crDLLOpen",
    "crMatrixTransformPointd",
    "crGetHostname",
    "crMatrixOrtho",
    "crNetSetContextRange",
    "crFreeTSD",
    "crMatrixInitFromDoubles",
    "crNetAcceptClient",
    "crFreeMutex",
    "crBufferPoolGetNumBuffers",
    "crGetProcName",
    "crListApply",
    "crListPopBack",
    "crExpandCallLists",
    "crGetPID",
    "crKill",
    "crInitBarrier",
    "crPixelCopy1D",
    "crInitCondition",
    "crListPushBack",
    "crListNext",
    "crNetBarf",
    "crListIsEmpty",
    "crListFind",
    "crNetServerConnect",
    "crFreeHashtable",
    "crSignalCondition"
  ],
  "VBoxOGLerrorspu.dll": [
    "SPULoad"
  ],
  "VBoxOGLfeedbackspu.dll": [
    "crStateMergeExtensions",
    "_crStateRasterPos3d@24",
    "_crStateGetPixelMapusv@8",
    "_crStateProgramNamedParameter4dNV@44",
    "_crStateRotated@32",
    "_crStateTexGenf@12",
    "_crStateDrawBuffer@4",
    "_crStateRenderMode@4",
    "_crStateSelectVertex2s@8",
    "_crStateGetProgramLocalParameterfvARB@12",
    "_crStateMultMatrixf@4",
    "_crStateSelectRasterPos4iv@4",
    "_crStatePixelMapuiv@12",
    "crStateProgramDestroy",
    "_crStateFeedbackVertex3f@12",
    "_crStateLightiv@12",
    "_crStateDeleteTextures@8",
    "_crStateFogiv@8",
    "_crStateGetIntegerv@8",
    "crStateInit",
    "_crStateFeedbackBitmap@28",
    "_crStateBindProgramNV@8",
    "crStatePointInit",
    "crStateViewportSwitch",
    "_crStateSelectDrawPixels@20",
    "_crStateSelectRasterPos3i@12",
    "_crStateFeedbackTexCoord4fv@4",
    "_crStateSelectRectiv@8",
    "_crStateWindowPos2iARB@8",
    "_crStateBlendColorEXT@16",
    "_crStateProgramParameters4fvNV@16",
    "crStateFogInit",
    "_crStateFeedbackTexCoord1sv@4",
    "_crStateGetClipPlane@8",
    "_crStateSelectRasterPos2d@16",
    "_crStateFeedbackTexCoord4s@16",
    "_crStateStencilOp@12",
    "_crStateRotatef@16",
    "_crStateGetChromiumParametervCR@20",
    "crStateClientDestroy",
    "_crStateRasterPos2fv@4",
    "crStateRegCombinerSwitch",
    "_crStateInitNames@0",
    "_crStateSelectVertex2fv@4",
    "_crStateWindowPos2dvARB@4",
    "crStateCreateContextEx",
    "_crStateClientActiveTextureARB@4",
    "_crStateGetFinalCombinerInputParameterivNV@12",
    "_crStateSelectRasterPos3fv@4",
    "_crStateSelectRasterPos3iv@4",
    "crStateDiffAllPrograms",
    "crStateResetCurrentPointers",
    "_crStateHint@8",
    "_crStateFeedbackRecti@16",
    "_crStateGetVertexAttribfvNV@12",
    "_crStateSelectBitmap@28",
    "_crStateGetProgramNamedParameterdvNV@16",
    "crStateLineSwitch",
    "_crStateColorMaterial@8",
    "_crStateStencilMask@4",
    "_crStateGetTexEnvfv@12",
    "_crStatePointParameterfARB@8",
    "crStateComputeVersion",
    "crStateTransformXformPointMatrixd",
    "crStateMultisampleSwitch",
    "_crStatePointParameteri@8",
    "_crStateSelectRasterPos4sv@4",
    "_crStateGetMapfv@12",
    "_crStateBitmap@28",
    "_crStatePixelMapusv@12",
    "_crStateLoadTransposeMatrixfARB@4",
    "_crStateSelectVertex3fv@4",
    "crStateStencilDiff",
    "_crStateTexGeniv@12",
    "_crStateFeedbackVertex2s@8",
    "_crStateFeedbackRectiv@8",
    "_crStateEndList@0",
    "_crStateGetCombinerOutputParameterivNV@16",
    "_crStateCompressedTexImage2DARB@32",
    "crStateLightingInit",
    "crStateUpdateColorBits",
    "_crStateFeedbackVertex2f@8",
    "_crStateMaterialfv@12",
    "crStateCurrentInit",
    "_crStateFeedbackVertex2dv@4",
    "_crStateGetMapdv@12",
    "_crStateSelectVertex2f@8",
    "_crStateSelectRectfv@8",
    "crStateAttribSwitch",
    "crStateTextureCheckDirtyImages",
    "_crStateLoadTransposeMatrixdARB@4",
    "crSPUChangeInterface",
    "crStateSwitchContext",
    "crStateDestroyContext",
    "crStateViewportDiff",
    "crStateMakeCurrent",
    "_crStateIsProgramARB@4",
    "_crStateSelectVertex4i@16",
    "_crStateGetProgramivARB@12",
    "crSPUInitDispatchTable",
    "_crStateFogi@8",
    "_crStateFrustum@48",
    "crStateEvaluatorSwitch",
    "crStateOcclusionInit",
    "_crStateTexCoordPointer@16",
    "crStateViewportInit",
    "_crStateFeedbackTexCoord3d@24",
    "_crStateMap1d@32",
    "_crStateRasterPos2dv@4",
    "_crStateGetCombinerInputParameterivNV@20",
    "_crStateMapGrid2d@40",
    "_crStateGetVertexAttribivNV@12",
    "_crStatePolygonOffset@8",
    "_crStateFeedbackTexCoord3i@12",
    "_crStateBindProgramARB@8",
    "crStateBufferInit",
    "_crStateFeedbackTexCoord1s@4",
    "_crStateRasterPos3i@12",
    "crStateBufferDiff",
    "crStateTransformXformPoint",
    "_crStateCombinerInputNV@24",
    "_crStateGetQueryivARB@12",
    "_crStateTexSubImage2D@36",
    "crStateLimitsDestroy",
    "_crStateFeedbackRectf@16",
    "crStateViewportApply",
    "_crStateMultMatrixd@4",
    "crStateSetCurrent",
    "crStateHintInit",
    "_crStateColorMask@16",
    "_crStateIsList@4",
    "_crStateWindowPos2ivARB@4",
    "crStateDeleteTextureObject",
    "_crStateSelectVertex3d@24",
    "_crStateFeedbackRectfv@8",
    "_crStateFeedbackTexCoord1iv@4",
    "crStateExtensionsInit",
    "_crStateFeedbackTexCoord2f@8",
    "crStateLineDiff",
    "_crStateGenBuffersARB@8",
    "_crStateLoadIdentity@0",
    "_crStateFeedbackRectd@32",
    "crStateSetExtensionString",
    "_crStatePopName@0",
    "_crStateDeleteBuffersARB@8",
    "_crStateVertexPointer@16",
    "_crStateClearIndex@4",
    "_crStateColor4f@16",
    "crStateDiffContext",
    "_crStateGetCombinerStageParameterfvNV@12",
    "_crStateSelectVertex3sv@4",
    "_crStateProgramParameter4fNV@24",
    "_crStateSelectRasterPos2f@8",
    "crStateFlushArg",
    "crStateTransformSwitch",
    "_crStateFeedbackBegin@4",
    "crStateFlushFunc",
    "_crStateGetVertexAttribdvNV@12",
    "crStateTransformUpdateTransform",
    "_crStateFogCoordPointerEXT@12",
    "_crStateSelectRects@16",
    "_crStateChromiumParametervCR@16",
    "_crStateFeedbackVertex4sv@4",
    "_crStateFeedbackGetBooleanv@8",
    "_crStateSelectRasterPos3sv@4",
    "crStateTransformDestroy",
    "_crStateFeedbackVertex4iv@4",
    "_crStateFeedbackGetIntegerv@8",
    "_crStateGetProgramEnvParameterdvARB@12",
    "_crStateRasterPos4fv@4",
    "_crStateGetProgramivNV@12",
    "_crStateRasterPos4s@16",
    "_crStateRasterPos4iv@4",
    "crStateTextureInit",
    "_crStateTexEnviv@12",
    "crStatePixelSwitch",
    "_crStatePointParameteriv@8",
    "_crStateRasterPos2f@8",
    "_crStateSelectRasterPos2fv@4",
    "_crStateLogicOp@4",
    "_crStatePointSize@4",
    "crStateCurrentSwitch",
    "crStateFogSwitch",
    "_crStateActiveTextureARB@4",
    "_crStateTexImage3D@40",
    "_crStatePrioritizeTextures@12",
    "crStateEvaluatorDestroy",
    "_crStatePopAttrib@0",
    "_crStateIndexMask@4",
    "_crStateRasterPos3sv@4",
    "_crStateLighti@12",
    "_crStateSelectVertex4iv@4",
    "_crStateProgramLocalParameter4fARB@24",
    "_crStateTexParameterfv@12",
    "_crStateProgramEnvParameter4fARB@24",
    "_crStateSelectRasterPos3d@24",
    "_crStateFeedbackVertex2iv@4",
    "_crStateGetProgramStringARB@12",
    "crSPUCopyDispatchTable",
    "_crStateClearStencil@4",
    "_crStateFeedbackEnd@0",
    "_crStateGenQueriesARB@8",
    "_crStateGetTexImage@20",
    "_crStateGetProgramEnvParameterfvARB@12",
    "_crStateCombinerParameterfNV@8",
    "_crStateGetTexLevelParameteriv@16",
    "_crStateFeedbackTexCoord4iv@4",
    "_crStateSelectRectf@16",
    "_crStateSelectVertex3dv@4",
    "_crStateFeedbackBuffer@12",
    "_crStatePixelTransferi@8",
    "_crStateTexEnvf@12",
    "_crStateGetQueryObjectuivARB@12",
    "_crStateWindowPos3sARB@12",
    "_crStateSelectRasterPos2iv@4",
    "_crStateRasterPos3f@12",
    "_crStateSelectRasterPos4s@16",
    "_crStateGetTexGenfv@12",
    "_crStateWindowPos3svARB@4",
    "_crStateClearColor@16",
    "_crStateLightf@12",
    "_crStateFeedbackVertex4fv@4",
    "_crStateSelectRecti@16",
    "_crStateRasterPos4sv@4",
    "_crStateScissor@16",
    "crStateCurrentRecover",
    "_crStateColor4fv@4",
    "_crStateSelectBegin@4",
    "crStateError",
    "crStateLimitsInit",
    "_crStateProgramNamedParameter4dvNV@16",
    "_crStateGetBufferSubDataARB@16",
    "_crStateProgramStringARB@16",
    "_crStateTexGenfv@12",
    "_crStateWindowPos2fvARB@4",
    "_crStateFeedbackVertex3d@24",
    "_crStateFrontFace@4",
    "_crStateSelectVertex4fv@4",
    "_crStateGetDoublev@8",
    "_crStateGetPolygonStipple@4",
    "_crStateGetVertexAttribPointervNV@12",
    "_crStatePixelStorei@8",
    "_crStateFeedbackVertex3i@12",
    "_crStateFeedbackVertex3iv@4",
    "_crStateProgramEnvParameter4dARB@40",
    "_crStateBlendEquationEXT@4",
    "_crStateListBase@4",
    "_crStatePushAttrib@4",
    "_crStateFeedbackTexCoord1f@4",
    "_crStateFogf@8",
    "_crStateWindowPos2sARB@8",
    "_crStateGetProgramLocalParameterdvARB@12",
    "_crStateFeedbackTexCoord3s@12",
    "_crStateMap1f@24",
    "_crStateFeedbackTexCoord3iv@4",
    "crStateCurrentDiff",
    "_crStateClearAccum@16",
    "crStateLineInit",
    "_crStateAreTexturesResident@12",
    "_crStateProgramLocalParameter4dARB@40",
    "_crStateGenTextures@8",
    "_crStateGetVertexAttribfvARB@12",
    "_crStateRasterPos4i@16",
    "_crStateFeedbackVertex2fv@4",
    "crStateListsInit",
    "_crStateFeedbackTexCoord3sv@4",
    "crStateUseServerArrays",
    "_crStateShadeModel@4",
    "_crStateGetBooleanv@8",
    "_crStateEnableVertexAttribArrayARB@4",
    "_crStateSelectVertex2sv@4",
    "crStatePixelDiff",
    "crStateRegCombinerInit",
    "_crStateTexParameteriv@12",
    "_crStateGenProgramsNV@8",
    "_crStateGetCompressedTexImageARB@12",
    "_crStateGetMaterialiv@12",
    "crStateCreateContext",
    "_crStateVertexAttribPointerARB@24",
    "_crStateDisableVertexAttribArrayARB@4",
    "_crStateCompressedTexImage3DARB@36",
    "_crStateSelectRasterPos3f@12",
    "crStateSetCurrentPointers",
    "_crStateClearDepth@8",
    "_crStateChromiumParameteriCR@8",
    "_crStateSelectRasterPos2dv@4",
    "_crStateFeedbackTexCoord1i@4",
    "_crStateNormalPointer@12",
    "_crStateTexSubImage3D@44",
    "_crStateFeedbackVertex4d@32",
    "_crStateSelectVertex4s@16",
    "_crStateFeedbackVertex2i@8",
    "crStateColorMaterialRecover",
    "_crStateBufferDataARB@16",
    "crStateEvaluatorDiff",
    "_crStateGetMapiv@12",
    "_crStatePopClientAttrib@0",
    "_crStateWindowPos3iARB@12",
    "_crStateSelectRectdv@8",
    "_crStateFeedbackTexCoord1dv@4",
    "crStateClientInitBits",
    "_crStateProgramEnvParameter4fvARB@12",
    "_crStateSampleCoverageARB@8",
    "_crStateMap2d@56",
    "_crStateColor3f@12",
    "_crStateCompressedTexSubImage1DARB@28",
    "_crStateLoadName@4",
    "_crStateFeedbackTexCoord2dv@4",
    "_crStateGetTexParameterfv@12",
    "_crStateGetTrackMatrixivNV@16",
    "_crStateSelectRectd@32",
    "_crStateSelectRasterPos4f@16",
    "crStateAttribInit",
    "_crStateFeedbackRectsv@8",
    "_crStateProgramNamedParameter4fvNV@16",
    "_crStateTexEnvfv@12",
    "_crStateStencilFunc@12",
    "_crStateFeedbackTexCoord1fv@4",
    "_crStateBlendFuncSeparateEXT@16",
    "_crStateCompressedTexSubImage2DARB@36",
    "_crStateTexSubImage1D@28",
    "_crStateCombinerParameteriNV@8",
    "_crStateRasterPos4d@32",
    "_crStateFinalCombinerInputNV@16",
    "_crStateEnableClientState@4",
    "_crStateMaterialiv@12",
    "crStateLimitsPrint",
    "_crStateGetProgramNamedParameterfvNV@16",
    "_crStateDisableClientState@4",
    "_crStateGetVertexAttribPointervARB@12",
    "crStatePolygonDiff",
    "_crStateTexParameterf@12",
    "crStateTextureDestroy",
    "_crStateClipPlane@8",
    "crStateProgramInit",
    "_crStateFeedbackTexCoord2fv@4",
    "_crStatePolygonMode@8",
    "_crStateBindTexture@8",
    "_crStateDepthFunc@4",
    "_crStateGetProgramStringNV@12",
    "_crStateGetBufferParameterivARB@12",
    "_crStateMultTransposeMatrixdARB@4",
    "_crStateUnmapBufferARB@4",
    "crStateMultisampleDiff",
    "_crStateWindowPos2fARB@8",
    "_crStateSelectEnd@0",
    "_crStateColorPointer@16",
    "_crStateGenLists@4",
    "_crStateGetCombinerOutputParameterfvNV@16",
    "_crStateEdgeFlagPointer@8",
    "crStateTextureGet",
    "_crStateDepthMask@4",
    "_crStateFeedbackTexCoord3fv@4",
    "_crStateRasterPos3dv@4",
    "_crStateBegin@4",
    "_crStatePushMatrix@0",
    "_crStateLightfv@12",
    "_crStateFeedbackVertex4dv@4",
    "_crStateProgramParameter4fvNV@12",
    "_crStateRasterPos3fv@4",
    "_crStateRasterPos3s@12",
    "_crStateLoadProgramNV@16",
    "_crStateGetPointerv@8",
    "_crStateRequestResidentProgramsNV@8",
    "_crStateGetBufferPointervARB@12",
    "_crStateFeedbackRects@16",
    "_crStateRasterPos2sv@4",
    "_crStateFeedbackTexCoord2d@16",
    "_crStateInterleavedArrays@12",
    "_crStateProgramNamedParameter4fNV@28",
    "_crStateTranslated@24",
    "_crStateLightModeli@8",
    "_crStateTranslatef@12",
    "_crStateBufferSubDataARB@16",
    "_crStateWindowPos2dARB@16",
    "_crStateRasterPos4dv@4",
    "crStatePointDiff",
    "_crStateSelectVertex4sv@4",
    "_crStateFeedbackVertex2d@16",
    "_crStatePixelTransferf@8",
    "_crStateCombinerStageParameterfvNV@12",
    "_crStateSelectRasterPos3dv@4",
    "_crStateFeedbackTexCoord4sv@4",
    "crStateGetCurrent",
    "crStatePixelInit",
    "_crStateViewport@16",
    "crStatePolygonInit",
    "_crStateRasterPos2iv@4",
    "_crStateGetPixelMapuiv@8",
    "crSPUSetDefaultParams",
    "_crStateProgramParameter4dNV@40",
    "crStateInitMatrixStack",
    "_crStateProgramParameters4dvNV@16",
    "_crStateSelectVertex3s@12",
    "crStateTextureObjectDiff",
    "crStateHintSwitch",
    "crStateDiffAllTextureObjects",
    "_crStateSelectRasterPos2sv@4",
    "_crStateFeedbackGetDoublev@8",
    "_crStateSelectRasterPos3s@12",
    "_crStateFlushVertexArrayRangeNV@0",
    "_crStateLineWidth@4",
    "_crStateIsBufferARB@4",
    "_crStateAreProgramsResidentNV@12",
    "_crStatePixelMapfv@12",
    "_crStateTexEnvi@12",
    "_crStateLoadMatrixf@4",
    "_crStateCombinerParameterivNV@8",
    "_crStatePolygonStipple@4",
    "_crStateSelectVertex2d@16",
    "_crStatePushClientAttrib@4",
    "_crStateColor3fv@4",
    "_crStateTexParameteri@12",
    "_crStateGenProgramsARB@8",
    "_crStateRasterPos2d@16",
    "_crStateRasterPos4f@16",
    "_crStateTexGendv@12",
    "_crStateFogfv@8",
    "crStateUseServerArrayElements",
    "_crStateGetLightfv@12",
    "crStateLightingDiff",
    "_crStateSelectVertex4d@32",
    "_crStateSelectVertex3i@12",
    "_crStateScaled@24",
    "_crStateOrtho@48",
    "_crStateSelectRasterPos2i@8",
    "_crStateFeedbackTexCoord2iv@4",
    "_crStateRasterPos3iv@4",
    "_crStateMapGrid1f@12",
    "_crStateFeedbackTexCoord2i@8",
    "_crStateSelectRasterPos4fv@4",
    "_crStateIsQueryARB@4",
    "crStateTransformInit",
    "_crStateBlendFunc@8",
    "_crStateFeedbackTexCoord3dv@4",
    "_crStateSelectVertex3iv@4",
    "_crStateGetVertexAttribdvARB@12",
    "_crStateReadPixels@28",
    "_crStateFeedbackTexCoord4i@16",
    "crStateLightingDestroy",
    "crStateLoadMatrix",
    "crStatePolygonSwitch",
    "crStateEvaluatorInit",
    "_crStateGetVertexAttribivARB@12",
    "_crStateDeleteQueriesARB@8",
    "_crStateCombinerParameterfvNV@8",
    "_crStateProgramLocalParameter4fvARB@12",
    "_crStatePointParameterfvARB@8",
    "_crStateTrackMatrixNV@16",
    "_crStatePushName@4",
    "_crStateAlphaFunc@8",
    "_crStateCompressedTexSubImage3DARB@44",
    "_crStateFeedbackTexCoord4f@16",
    "_crStateFeedbackVertex2sv@4",
    "_crStateIsTexture@4",
    "_crStateSecondaryColorPointerEXT@16",
    "_crStateReadBuffer@4",
    "crStateStencilInit",
    "_crStateWindowPos3fvARB@4",
    "_crStateMaterialf@12",
    "_crStateFeedbackTexCoord3f@12",
    "crStateListsDestroy",
    "_crStateMap2f@40",
    "_crStateFeedbackRectdv@8",
    "_crStateFeedbackVertex3dv@4",
    "crStateOcclusionSwitch",
    "_crStateNewList@8",
    "_crStateWindowPos3fARB@12",
    "_crStateLightModelfv@8",
    "crStateOcclusionDestroy",
    "crStateClientInit",
    "_crStateSelectVertex2i@8",
    "crStateStencilSwitch",
    "_crStateSelectVertex4dv@4",
    "_crStateWindowPos2svARB@4",
    "_crStateFeedbackDrawPixels@20",
    "_crStateFeedbackGetFloatv@8",
    "_crStateGetLightiv@12",
    "_crStateLoadMatrixd@4",
    "_crStatePixelZoom@8",
    "_crStateGetTexLevelParameterfv@16",
    "_crStateGetProgramParameterfvNV@16",
    "_crStateGetTexParameteriv@12",
    "_crStateGetPixelMapfv@8",
    "_crStateMapGrid1d@20",
    "_crStateGetTexGendv@12",
    "crStateTransformDiff",
    "_crStateTexImage1D@32",
    "crSPUGetEnumIndex",
    "crStateListsDiff",
    "_crStateFeedbackVertex3s@12",
    "_crStateWindowPos3ivARB@4",
    "_crStateLightModeliv@8",
    "_crStateGetFloatv@8",
    "_crStateTexImage2D@36",
    "_crStateFeedbackTexCoord4dv@4",
    "_crStateTexGeni@12",
    "_crStatePopMatrix@0",
    "_crStateTexImage3DEXT@40",
    "_crStateMateriali@12",
    "_crStateLightModelf@8",
    "_crStateFeedbackCopyPixels@20",
    "_crStateBindBufferARB@8",
    "_crStateFeedbackTexCoord4d@32",
    "_crStateVertexAttribPointerNV@20",
    "_crStateTexGend@16",
    "_crStateEndQueryARB@4",
    "crStateRasterPosUpdate",
    "_crStateFeedbackVertex3sv@4",
    "_crStateFeedbackTexCoord2sv@4",
    "crStateMultisampleInit",
    "crStateTextureSwitch",
    "crStateFogDiff",
    "_crStateFeedbackVertex4s@16",
    "_crStateDeleteLists@8",
    "_crStateEnd@0",
    "_crStateCullFace@4",
    "crStateListsSwitch",
    "crStateTextureDiff",
    "crStateLightingInitBits",
    "_crStateGetError@0",
    "_crStateDepthRange@16",
    "crStateDiffAPI",
    "_crStatePixelStoref@8",
    "_crStateProgramEnvParameter4dvARB@12",
    "_crStateSelectBuffer@8",
    "_crStateSelectRasterPos4i@16",
    "_crStatePassThrough@4",
    "_crStateSelectRasterPos2s@8",
    "_crStateVertexArrayRangeNV@8",
    "_crStateMultTransposeMatrixfARB@4",
    "_crStateGetTexGeniv@12",
    "crStateOcclusionDiff",
    "crStateBufferSwitch",
    "_crStateSelectVertex2iv@4",
    "_crStateGetCombinerInputParameterfvNV@20",
    "_crStateBeginQueryARB@8",
    "_crStateSelectVertex4f@16",
    "_crStateCombinerOutputNV@40",
    "crStateTransformXformPointMatrixf",
    "_crStateProgramLocalParameter4dvARB@12",
    "_crStateScalef@12",
    "_crStateRasterPos2s@8",
    "_crStateFeedbackTexCoord1d@8",
    "_crStateFeedbackVertex4f@16",
    "_crStateMatrixMode@4",
    "_crStateMapGrid2f@24",
    "_crStateProgramParameter4dvNV@12",
    "crStateProgramDiff",
    "_crStateSelectCopyPixels@20",
    "_crStateCompressedTexImage1DARB@28",
    "_crStateRasterPos2i@8",
    "_crStateGetProgramParameterdvNV@16",
    "_crStateSelectRectsv@8",
    "_crStateGetTexEnviv@12",
    "_crStateSelectVertex2dv@4",
    "_crStateChromiumParameterfCR@8",
    "_crStateGetQueryObjectivARB@12",
    "_crStateMapBufferARB@8",
    "_crStateExecuteProgramNV@12",
    "_crStateFeedbackVertex3fv@4",
    "_crStateIndexPointer@12",
    "_crStateWindowPos3dARB@24",
    "crStateHintDiff",
    "_crStateFeedbackVertex4i@16",
    "crStatePointSwitch",
    "_crStateFeedbackTexCoord2s@8",
    "_crStateWindowPos3dvARB@4",
    "crStateLightingSwitch",
    "_crStateGetFinalCombinerInputParameterfvNV@12",
    "crStateRegCombinerDiff",
    "_crStateSelectRasterPos4d@32",
    "_crStateSelectVertex3f@12",
    "_crStateDeleteProgramsARB@8",
    "crStateProgramSwitch",
    "SPULoad",
    "_crStateLineStipple@8",
    "_crStateGetMaterialfv@12",
    "_crStateSelectRasterPos4dv@4",
    "crStateDeleteTextureObjectData"
  ],
  "VBoxOGLpackspu.dll": [
    "crStateMergeExtensions",
    "_crStateGetPixelMapusv@8",
    "_crStateProgramNamedParameter4dNV@44",
    "_crStateRotated@32",
    "_crStateTexGenf@12",
    "_crStateDrawBuffer@4",
    "_crStateGetProgramLocalParameterfvARB@12",
    "_crStateMultMatrixf@4",
    "_crStatePixelMapuiv@12",
    "crStateProgramDestroy",
    "_crStateLightiv@12",
    "_crStateDeleteTextures@8",
    "_crStateFogiv@8",
    "crPackUnrollDrawElements",
    "_crStateGetIntegerv@8",
    "crStateInit",
    "_crStateBindProgramNV@8",
    "crPackExpandDrawArraysSWAP",
    "crStatePointInit",
    "crStateViewportSwitch",
    "crStateFogInit",
    "crNetworkPointerWrite",
    "_crStateBlendColorEXT@16",
    "_crStateProgramParameters4fvNV@16",
    "_crStateGetClipPlane@8",
    "_crStateStencilOp@12",
    "_crStateRotatef@16",
    "_crStateGetChromiumParametervCR@20",
    "crPackExpandArrayElementSWAP",
    "crStateClientDestroy",
    "crStateRegCombinerSwitch",
    "crStateCreateContextEx",
    "_crStateClientActiveTextureARB@4",
    "_crStateGetFinalCombinerInputParameterivNV@12",
    "crPackExpandDrawRangeElementsSWAP",
    "crStateDiffAllPrograms",
    "crStateResetCurrentPointers",
    "_crStateHint@8",
    "_crStateGetVertexAttribfvNV@12",
    "crPackAlloc",
    "_crStateGetProgramNamedParameterdvNV@16",
    "crStateLineSwitch",
    "_crStateColorMaterial@8",
    "_crStateStencilMask@4",
    "_crStateGetTexEnvfv@12",
    "_crStatePointParameterfARB@8",
    "crStateComputeVersion",
    "crStateTransformXformPointMatrixd",
    "crStateMultisampleSwitch",
    "_crStatePointParameteri@8",
    "_crStateGetMapfv@12",
    "_crStateBitmap@28",
    "_crStatePixelMapusv@12",
    "crPackSetBufferDEBUG",
    "_crStateLoadTransposeMatrixfARB@4",
    "crPackSetContext",
    "crStateStencilDiff",
    "_crStateTexGeniv@12",
    "_crStateEndList@0",
    "_crStateGetCombinerOutputParameterivNV@16",
    "_crStateCompressedTexImage2DARB@32",
    "crStateLightingInit",
    "crStateUpdateColorBits",
    "_crStateMaterialfv@12",
    "crStateCurrentInit",
    "_crStateGetMapdv@12",
    "crStateAttribSwitch",
    "crStateTextureCheckDirtyImages",
    "_crStateLoadTransposeMatrixdARB@4",
    "crStateSwitchContext",
    "crStateDestroyContext",
    "crStateViewportDiff",
    "crStateMakeCurrent",
    "_crStateIsProgramARB@4",
    "_crStateGetProgramivARB@12",
    "crSPUInitDispatchTable",
    "_crStateFogi@8",
    "crPackFlushFunc",
    "_crStateFrustum@48",
    "crStateEvaluatorSwitch",
    "crStateOcclusionInit",
    "_crStateTexCoordPointer@16",
    "crStateViewportInit",
    "_crStateMap1d@32",
    "_crStateGetCombinerInputParameterivNV@20",
    "_crStateMapGrid2d@40",
    "_crStateGetVertexAttribivNV@12",
    "_crStatePolygonOffset@8",
    "crPackExpandDrawArrays",
    "_crStateBindProgramARB@8",
    "crStateBufferInit",
    "crStateBufferDiff",
    "crStateTransformXformPoint",
    "_crStateCombinerInputNV@24",
    "_crStateGetQueryivARB@12",
    "_crStateTexSubImage2D@36",
    "crStateLimitsDestroy",
    "crStateViewportApply",
    "_crStateMultMatrixd@4",
    "crStateSetCurrent",
    "crStateHintInit",
    "_crStateColorMask@16",
    "_crStateIsList@4",
    "crStateDeleteTextureObject",
    "crStateExtensionsInit",
    "crStateLineDiff",
    "_crStateGenBuffersARB@8",
    "_crStateLoadIdentity@0",
    "crStateSetExtensionString",
    "_crStateDeleteBuffersARB@8",
    "_crStateVertexPointer@16",
    "_crStateClearIndex@4",
    "_crStateColor4f@16",
    "crStateDiffContext",
    "_crStateGetCombinerStageParameterfvNV@12",
    "_crStateProgramParameter4fNV@24",
    "crStateFlushArg",
    "crStateTransformSwitch",
    "crStateFlushFunc",
    "_crStateGetVertexAttribdvNV@12",
    "crStateTransformUpdateTransform",
    "_crStateFogCoordPointerEXT@12",
    "crPackExpandDrawElementsSWAP",
    "_crStateChromiumParametervCR@16",
    "crStateTransformDestroy",
    "_crStateGetProgramEnvParameterdvARB@12",
    "_crStateGetProgramivNV@12",
    "crStateTextureInit",
    "_crStateTexEnviv@12",
    "crStatePixelSwitch",
    "_crStatePointParameteriv@8",
    "_crStateLogicOp@4",
    "_crStatePointSize@4",
    "crStateCurrentSwitch",
    "crPackAppendBoundedBuffer",
    "crStateFogSwitch",
    "_crStateActiveTextureARB@4",
    "_crStateTexImage3D@40",
    "crPackResetBoundingBox",
    "_crStatePrioritizeTextures@12",
    "crStateEvaluatorDestroy",
    "_crStateIndexMask@4",
    "_crStatePopAttrib@0",
    "_crStateLighti@12",
    "_crStateProgramLocalParameter4fARB@24",
    "crPackExpandArrayElement",
    "_crStateTexParameterfv@12",
    "_crStateProgramEnvParameter4fARB@24",
    "crPackMaxOpcodes",
    "_crStateGetProgramStringARB@12",
    "crSPUCopyDispatchTable",
    "_crStateClearStencil@4",
    "_crStateGenQueriesARB@8",
    "_crStateGetTexImage@20",
    "crHugePacket",
    "_crStateGetProgramEnvParameterfvARB@12",
    "_crStateCombinerParameterfNV@8",
    "_crStateGetTexLevelParameteriv@16",
    "_crStatePixelTransferi@8",
    "_crStateTexEnvf@12",
    "_crStateGetQueryObjectuivARB@12",
    "_crStateGetTexGenfv@12",
    "_crStateClearColor@16",
    "_crStateLightf@12",
    "_crStateScissor@16",
    "crStateCurrentRecover",
    "_crStateColor4fv@4",
    "crStateError",
    "crStateLimitsInit",
    "_crStateProgramNamedParameter4dvNV@16",
    "_crStateGetBufferSubDataARB@16",
    "_crStateProgramStringARB@16",
    "_crStateTexGenfv@12",
    "_crStateFrontFace@4",
    "_crStateGetDoublev@8",
    "_crStateGetPolygonStipple@4",
    "_crStateGetVertexAttribPointervNV@12",
    "_crStatePixelStorei@8",
    "crReadUnalignedDouble",
    "crPackMaxData",
    "_crStateProgramEnvParameter4dARB@40",
    "crPackInitBuffer",
    "crWriteUnalignedDouble",
    "_crStateBlendEquationEXT@4",
    "_crStateListBase@4",
    "_crStatePushAttrib@4",
    "_crStateFogf@8",
    "_crStateGetProgramLocalParameterdvARB@12",
    "_crStateMap1f@24",
    "crStateCurrentDiff",
    "_crStateClearAccum@16",
    "crStateLineInit",
    "_crStateAreTexturesResident@12",
    "_crStateProgramLocalParameter4dARB@40",
    "_crStateGenTextures@8",
    "_crStateGetVertexAttribfvARB@12",
    "crStateListsInit",
    "crStateUseServerArrays",
    "_crStateShadeModel@4",
    "_crStateGetBooleanv@8",
    "_crStateEnableVertexAttribArrayARB@4",
    "crStatePixelDiff",
    "crStateRegCombinerInit",
    "_crStateTexParameteriv@12",
    "_crStateGenProgramsNV@8",
    "crPackErrorFunction",
    "_crStateGetString@4",
    "_crStateGetCompressedTexImageARB@12",
    "_crStateGetMaterialiv@12",
    "crStateCreateContext",
    "_crStateVertexAttribPointerARB@24",
    "_crStateDisableVertexAttribArrayARB@4",
    "_crStateCompressedTexImage3DARB@36",
    "crStateSetCurrentPointers",
    "_crStateClearDepth@8",
    "crPackSetBuffer",
    "_crStateChromiumParameteriCR@8",
    "_crStateNormalPointer@12",
    "_crStateTexSubImage3D@44",
    "crPackNewContext",
    "crPackExpandMultiDrawArraysEXT",
    "crStateColorMaterialRecover",
    "_crStateBufferDataARB@16",
    "crStateEvaluatorDiff",
    "_crStateGetMapiv@12",
    "_crStatePopClientAttrib@0",
    "crStateClientInitBits",
    "_crStateProgramEnvParameter4fvARB@12",
    "_crStateSampleCoverageARB@8",
    "_crStateMap2d@56",
    "_crStateColor3f@12",
    "_crStateCompressedTexSubImage1DARB@28",
    "crPackFlushArg",
    "_crStateGetTrackMatrixivNV@16",
    "_crStateGetTexParameterfv@12",
    "crStateAttribInit",
    "crPackExpandDrawRangeElements",
    "crPackUnrollDrawElementsSWAP",
    "_crStateProgramNamedParameter4fvNV@16",
    "_crStateTexEnvfv@12",
    "_crStateStencilFunc@12",
    "_crStateBlendFuncSeparateEXT@16",
    "_crStateCompressedTexSubImage2DARB@36",
    "_crStateTexSubImage1D@28",
    "_crStateCombinerParameteriNV@8",
    "_crStateFinalCombinerInputNV@16",
    "_crStateEnableClientState@4",
    "_crStateMaterialiv@12",
    "crPackCanHoldBuffer",
    "crStateLimitsPrint",
    "_crStateGetProgramNamedParameterfvNV@16",
    "_crStateDisableClientState@4",
    "_crStateGetVertexAttribPointervARB@12",
    "crStatePolygonDiff",
    "_crStateTexParameterf@12",
    "crStateTextureDestroy",
    "_crStateClipPlane@8",
    "crStateProgramInit",
    "_crStatePolygonMode@8",
    "_crStateBindTexture@8",
    "_crStateDepthFunc@4",
    "_crStateGetProgramStringNV@12",
    "_crStateGetBufferParameterivARB@12",
    "_crStateMultTransposeMatrixdARB@4",
    "_crStateUnmapBufferARB@4",
    "crStateMultisampleDiff",
    "_crStateColorPointer@16",
    "_crStateGenLists@4",
    "_crStateGetCombinerOutputParameterfvNV@16",
    "_crStateEdgeFlagPointer@8",
    "crStateTextureGet",
    "_crStateDepthMask@4",
    "_crStateBegin@4",
    "_crStatePushMatrix@0",
    "_crStateLightfv@12",
    "_crStateProgramParameter4fvNV@12",
    "_crStateLoadProgramNV@16",
    "_crStateGetPointerv@8",
    "_crStateRequestResidentProgramsNV@8",
    "_crStateGetBufferPointervARB@12",
    "_crStateInterleavedArrays@12",
    "_crStateProgramNamedParameter4fNV@28",
    "_crStateTranslated@24",
    "crPackAppendBuffer",
    "_crStateLightModeli@8",
    "_crStateTranslatef@12",
    "_crStateBufferSubDataARB@16",
    "crStatePointDiff",
    "_crStatePixelTransferf@8",
    "_crStateCombinerStageParameterfvNV@12",
    "crStateGetCurrent",
    "crStatePixelInit",
    "_crStateViewport@16",
    "crStatePolygonInit",
    "_crStateGetPixelMapuiv@8",
    "crSPUSetDefaultParams",
    "_crStateProgramParameter4dNV@40",
    "crStateInitMatrixStack",
    "_crStateProgramParameters4dvNV@16",
    "crStateTextureObjectDiff",
    "crStateHintSwitch",
    "crStateDiffAllTextureObjects",
    "_crStateFlushVertexArrayRangeNV@0",
    "_crStateLineWidth@4",
    "_crStateIsBufferARB@4",
    "crPackExpandMultiDrawElementsEXT",
    "_crStateAreProgramsResidentNV@12",
    "_crStatePixelMapfv@12",
    "_crStateTexEnvi@12",
    "_crStateLoadMatrixf@4",
    "_crStateCombinerParameterivNV@8",
    "crPackExpandDrawElements",
    "_crStatePolygonStipple@4",
    "_crStatePushClientAttrib@4",
    "_crStateColor3fv@4",
    "_crStateTexParameteri@12",
    "_crStateGenProgramsARB@8",
    "_crStateTexGendv@12",
    "_crStateFogfv@8",
    "crStateUseServerArrayElements",
    "_crStateGetLightfv@12",
    "crStateLightingDiff",
    "crPackResetPointers",
    "_crStateScaled@24",
    "_crStateOrtho@48",
    "_crStateMapGrid1f@12",
    "crPackGetContext",
    "_crStateIsQueryARB@4",
    "crStateTransformInit",
    "_crStateBlendFunc@8",
    "_crStateGetVertexAttribdvARB@12",
    "crWriteSwappedDouble",
    "_crStateReadPixels@28",
    "crStateLightingDestroy",
    "crStateLoadMatrix",
    "crStatePolygonSwitch",
    "crStateEvaluatorInit",
    "_crStateGetVertexAttribivARB@12",
    "_crStateDeleteQueriesARB@8",
    "_crStateCombinerParameterfvNV@8",
    "_crStateProgramLocalParameter4fvARB@12",
    "_crStatePointParameterfvARB@8",
    "_crStateTrackMatrixNV@16",
    "crPackReleaseBuffer",
    "_crStateAlphaFunc@8",
    "_crStateCompressedTexSubImage3DARB@44",
    "_crStateIsTexture@4",
    "_crStateSecondaryColorPointerEXT@16",
    "_crStateReadBuffer@4",
    "crStateStencilInit",
    "crPackFree",
    "_crStateMaterialf@12",
    "crPackSendHugeFunc",
    "crStateListsDestroy",
    "_crStateMap2f@40",
    "crStateOcclusionSwitch",
    "_crStateNewList@8",
    "_crStateLightModelfv@8",
    "crStateOcclusionDestroy",
    "crStateClientInit",
    "crStateStencilSwitch",
    "_crStateGetLightiv@12",
    "_crStateLoadMatrixd@4",
    "_crStatePixelZoom@8",
    "_crStateGetTexLevelParameterfv@16",
    "_crStateGetProgramParameterfvNV@16",
    "_crStateGetTexParameteriv@12",
    "_crStateGetPixelMapfv@8",
    "_crStateMapGrid1d@20",
    "_crStateGetTexGendv@12",
    "crStateTransformDiff",
    "_crStateTexImage1D@32",
    "crSPUGetEnumIndex",
    "crStateListsDiff",
    "_crStateLightModeliv@8",
    "_crStateGetFloatv@8",
    "_crStateTexImage2D@36",
    "_crStateTexGeni@12",
    "_crStatePopMatrix@0",
    "_crStateTexImage3DEXT@40",
    "_crStateMateriali@12",
    "_crStateLightModelf@8",
    "_crStateBindBufferARB@8",
    "_crStateVertexAttribPointerNV@20",
    "_crStateTexGend@16",
    "_crStateEndQueryARB@4",
    "crStateMultisampleInit",
    "crStateTextureSwitch",
    "crStateFogDiff",
    "_crStateDeleteLists@8",
    "_crStateEnd@0",
    "_crStateCullFace@4",
    "crStateListsSwitch",
    "crStateTextureDiff",
    "crStateLightingInitBits",
    "_crStateGetError@0",
    "_crStateDepthRange@16",
    "crStateDiffAPI",
    "_crStatePixelStoref@8",
    "_crStateProgramEnvParameter4dvARB@12",
    "crPackCanHoldBoundedBuffer",
    "_crStateVertexArrayRangeNV@8",
    "_crStateMultTransposeMatrixfARB@4",
    "_crStateGetTexGeniv@12",
    "crStateOcclusionDiff",
    "crStateBufferSwitch",
    "_crStateGetCombinerInputParameterfvNV@20",
    "_crStateBeginQueryARB@8",
    "_crStateCombinerOutputNV@40",
    "crStateTransformXformPointMatrixf",
    "_crStateProgramLocalParameter4dvARB@12",
    "_crStateScalef@12",
    "_crStateMatrixMode@4",
    "_crStateMapGrid2f@24",
    "_crStateProgramParameter4dvNV@12",
    "crStateProgramDiff",
    "_crStateCompressedTexImage1DARB@28",
    "crPackExpandMultiDrawArraysEXTSWAP",
    "_crStateGetProgramParameterdvNV@16",
    "_crStateGetTexEnviv@12",
    "_crStateChromiumParameterfCR@8",
    "_crStateGetQueryObjectivARB@12",
    "_crStateMapBufferARB@8",
    "_crStateExecuteProgramNV@12",
    "_crStateIndexPointer@12",
    "crStateHintDiff",
    "crStatePointSwitch",
    "crStateLightingSwitch",
    "_crStateGetFinalCombinerInputParameterfvNV@12",
    "crPackGetBoundingBox",
    "crStateRegCombinerDiff",
    "_crStateDeleteProgramsARB@8",
    "crStateProgramSwitch",
    "crPackExpandMultiDrawElementsEXTSWAP",
    "SPULoad",
    "_crStateLineStipple@8",
    "_crStateGetMaterialfv@12",
    "crStateDeleteTextureObjectData"
  ],
  "VBoxOGLpassthroughspu.dll": [
    "SPULoad"
  ],
  "VIDRESZR.DLL": [
    "CreateInstance",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "Vault.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "VaultCredProvider.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "VmbusCoinstaller.dll": [
    "VmbusCoinstaller"
  ],
  "VmdCoinstall.dll": [
    "VmdCoinstaller"
  ],
  "vaultcli.dll": [
    "VaultCloseVault",
    "VaultEnumerateItems",
    "VaultFindItems",
    "VaultEnumerateItemTypes",
    "VaultRemoveItem",
    "VaultMoveItem",
    "VaultGetItem",
    "VaultUnloadVaults",
    "VaultDeleteItemType",
    "VaultOpenVault",
    "VaultSetInformation",
    "VaultCopyVault",
    "VaultUnlockVault",
    "VaultCopyItem",
    "VaultGetItemType",
    "VaultAddItem",
    "VaultLockVault",
    "VaultCreateItemType",
    "VaultLoadVaults",
    "VaultCreateVault",
    "VaultEnumerateVaults",
    "VaultUnRegisterNotification",
    "VaultGetInformation",
    "VaultDeleteVault",
    "VaultConfirmVaultAccess",
    "VaultRegisterNotification",
    "VaultFree"
  ],
  "vaultsvc.dll": [
    "VaultSvcStopCallback",
    "ServiceMain"
  ],
  "vbajet32.dll": [
    "VBAGetExprSrv",
    "LoadExprSrvDll"
  ],
  "vbscript.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "vdmdbg.dll": [
    "VDMSetDbgFlags",
    "VDMIsModuleLoaded",
    "VDMGlobalNext",
    "VDMSetThreadContext",
    "VDMBreakThread",
    "VDMSetContext",
    "VDMModuleNext",
    "VDMGetThreadSelectorEntry",
    "VDMGetDbgFlags",
    "VDMDetectWOW",
    "VDMGetSelectorModule",
    "VDMKillWOW",
    "VDMGetSegtablePointer",
    "VDMModuleFirst",
    "VDMStartTaskInWOW",
    "VDMGetSegmentInfo",
    "VDMEnumTaskWOW",
    "VDMGetAddrExpression",
    "VDMGetModuleSelector",
    "VDMGetThreadContext",
    "VDMGetPointer",
    "VDMTerminateTaskWOW",
    "VDMEnumProcessWOW",
    "VDMEnumTaskWOWEx",
    "VDMGetContext",
    "VDMProcessException",
    "VDMGetSymbol",
    "VDMGlobalFirst"
  ],
  "vds_ps.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "vdsbas.dll": [
    "public: int __thiscall CVdsDebugLog::m_NoDebuggerLogging(void)",
    "public: void __thiscall CVdsAsyncObjectBase::SetOutputType(enum _VDS_ASYNC_OUTPUT_TYPE)",
    "private: void __thiscall CRtlSharedLock::AcquireWrite(void)",
    "public: __thiscall CVdsHandleImpl<0>::~CVdsHandleImpl<0>(void)",
    "public: __thiscall CVdsPtr::~CVdsPtr(void)",
    "public: bool __thiscall CVdsPtr::operator==(struct _AUCTION_THREAD_PARAMETER *)const",
    "public: unsigned short * __thiscall CVdsHeapPtr::operator=(unsigned short *)",
    "public: void __thiscall CVdsAsyncObjectBase::AllowCancel(void)",
    "public: __thiscall CVdsPtr::CVdsPtr(void)",
    "public: void __thiscall CVdsAsyncObjectBase::SetOutput(struct _VDS_ASYNC_OUTPUT)",
    "public: __thiscall CVdsHandleImpl<4294967295>::CVdsHandleImpl<4294967295>(void)",
    "public: struct _DRIVE_LAYOUT_INFORMATION_EX * __thiscall CVdsPtr::operator->(void)const",
    "public: __thiscall CVdsHeapPtr::~CVdsHeapPtr(void)",
    "public: __thiscall CVdsHandleImpl<4294967295>::~CVdsHandleImpl<4294967295>(void)",
    "public: void __thiscall CVdsPtr::Attach(struct _VDS_DRIVE_LAYOUT_INFORMATION_EX *)",
    "public: int __thiscall CVdsDebugLog::m_TracingLogEnabled(void)",
    "DllRegisterServer",
    "public: void __thiscall CVdsHandleImpl<4294967295>::Close(void)",
    "public: __thiscall CVdsHandleImpl<4294967295>::operator void *(void)",
    "public: bool __thiscall CVdsPtr::operator==(unsigned short *)const",
    "public: struct _AUCTION_THREAD_PARAMETER * __thiscall CVdsPtr::operator->(void)const",
    "public: void * * __thiscall CVdsHandleImpl<4294967295>::operator&(void)",
    "public: void __thiscall CPrvEnumObject::SetPositionToLast(void)",
    "public: void __thiscall CVdsPtr::Attach(struct _DRIVE_LAYOUT_INFORMATION_EX *)",
    "public: __thiscall CVdsPnPNotificationBase::CVdsPnPNotificationBase(void)",
    "public: enum _VDS_ASYNC_OUTPUT_TYPE __thiscall CVdsAsyncObjectBase::GetOutputType(void)",
    "public: unsigned short * __thiscall CVdsPtr::Detach(void)",
    "DllUnregisterServer",
    "void __stdcall StopReferenceHistory(void)",
    "public: int __thiscall CRtlSharedLock::CurrentThreadIsWriter(void)",
    "public: bool __thiscall CVdsPtr::operator==(unsigned char *)const",
    "public: __thiscall CPrvEnumObject::CPrvEnumObject(void)",
    "public: __thiscall CVdsPtr::operator struct _VDS_DRIVE_LAYOUT_INFORMATION_EX *(void)const",
    "private: void __thiscall CRtlSharedLock::Release(void)",
    "unsigned long __stdcall StartReferenceHistory(void)",
    "public: __thiscall CRtlSharedLock::CRtlSharedLock(void)",
    "public: void __thiscall CVdsAsyncObjectBase::DisallowCancel(void)",
    "private: void __thiscall CRtlSharedLock::Upgrade(void)",
    "public: __thiscall CPrvEnumObject::~CPrvEnumObject(void)",
    "public: void __thiscall CVdsAsyncObjectBase::ZeroAsyncOut(void)",
    "public: __thiscall CRtlSharedLock::~CRtlSharedLock(void)",
    "public: bool __thiscall CVdsHandleImpl<0>::operator==(void *)const",
    "public: __thiscall CVdsHeapPtr::CVdsHeapPtr(void)",
    "public: void __thiscall CVdsPtr::Attach(unsigned short *)",
    "public: struct _DRIVE_LAYOUT_INFORMATION_EX * __thiscall CVdsPtr::Detach(void)",
    "public: __thiscall CVdsPtr::operator struct _AUCTION_THREAD_PARAMETER *(void)const",
    "public: struct _VDS_DRIVE_LAYOUT_INFORMATION_EX * __thiscall CVdsPtr::operator->(void)const",
    "public: struct _VDS_DRIVE_LAYOUT_INFORMATION_EX * __thiscall CVdsPtr::Detach(void)",
    "private: void __thiscall CRtlSharedLock::Downgrade(void)",
    "private: void __thiscall CRtlSharedLock::AcquireRead(void)",
    "public: struct _AUCTION_THREAD_PARAMETER * __thiscall CVdsPtr::Detach(void)",
    "public: __thiscall CVdsPtr::operator unsigned char *(void)const",
    "public: __thiscall CVdsUnlockIt::CVdsUnlockIt(long &)",
    "public: struct _VDS_DRIVE_LAYOUT_INFORMATION_EX * __thiscall CVdsHeapPtr::operator=(struct _VDS_DRIVE_LAYOUT_INFORMATION_EX *)",
    "DllCanUnloadNow",
    "public: int __thiscall CVdsAsyncObjectBase::IsCancelRequested(void)",
    "public: bool __thiscall CVdsPtr::operator!=(unsigned char *)const",
    "public: __thiscall CVdsDebugLog::~CVdsDebugLog(void)",
    "public: struct _DRIVE_LAYOUT_INFORMATION_EX * * __thiscall CVdsPtr::operator&(void)",
    "public: __thiscall CVdsCriticalSection::~CVdsCriticalSection(void)",
    "public: void __thiscall CRtlList::`default constructor closure'(void)",
    "public: void * __thiscall CVdsHandleImpl<0>::operator=(void *)",
    "public: unsigned char * __thiscall CVdsHeapPtr::operator=(unsigned char *)",
    "public: __thiscall CVdsPtr::operator unsigned short *(void)const",
    "public: __thiscall CVdsHandleImpl<0>::CVdsHandleImpl<0>(void)",
    "DllGetClassObject",
    "public: __thiscall CVdsCriticalSection::CVdsCriticalSection(struct _RTL_CRITICAL_SECTION *)",
    "public: struct _VDS_DRIVE_LAYOUT_INFORMATION_EX * * __thiscall CVdsPtr::operator&(void)",
    "public: __thiscall CVdsUnlockIt::~CVdsUnlockIt(void)",
    "public: struct _AUCTION_THREAD_PARAMETER * __thiscall CVdsHeapPtr::operator=(struct _AUCTION_THREAD_PARAMETER *)",
    "public: void __thiscall CRtlMap::`default constructor closure'(void)",
    "public: void * __thiscall CVdsHandleImpl<4294967295>::Detach(void)",
    "public: __thiscall CVdsPtr::operator struct _DRIVE_LAYOUT_INFORMATION_EX *(void)const",
    "public: __thiscall CVdsPnPNotificationBase::~CVdsPnPNotificationBase(void)"
  ],
  "vdsdyn.dll": [
    "public: int __thiscall CVdsDebugLog::m_NoDebuggerLogging(void)",
    "public: __thiscall CVdsPnPNotificationBase::~CVdsPnPNotificationBase(void)",
    "public: void __thiscall CVdsAsyncObjectBase::SetOutputType(enum _VDS_ASYNC_OUTPUT_TYPE)",
    "public: void __thiscall CVdsAsyncObjectBase::AllowCancel(void)",
    "private: void __thiscall CRtlSharedLock::AcquireWrite(void)",
    "public: void __thiscall CVdsAsyncObjectBase::SetOutput(struct _VDS_ASYNC_OUTPUT)",
    "public: int __thiscall CVdsDebugLog::m_TracingLogEnabled(void)",
    "DllRegisterServer",
    "public: void __thiscall CPrvEnumObject::SetPositionToLast(void)",
    "public: __thiscall CVdsPnPNotificationBase::CVdsPnPNotificationBase(void)",
    "public: enum _VDS_ASYNC_OUTPUT_TYPE __thiscall CVdsAsyncObjectBase::GetOutputType(void)",
    "DllUnregisterServer",
    "void __stdcall StopReferenceHistory(void)",
    "public: int __thiscall CRtlSharedLock::CurrentThreadIsWriter(void)",
    "public: __thiscall CPrvEnumObject::CPrvEnumObject(void)",
    "unsigned long __stdcall StartReferenceHistory(void)",
    "private: void __thiscall CRtlSharedLock::Release(void)",
    "public: void __thiscall CVdsAsyncObjectBase::DisallowCancel(void)",
    "public: __thiscall CRtlSharedLock::CRtlSharedLock(void)",
    "private: void __thiscall CRtlSharedLock::Upgrade(void)",
    "public: __thiscall CPrvEnumObject::~CPrvEnumObject(void)",
    "public: void __thiscall CVdsAsyncObjectBase::ZeroAsyncOut(void)",
    "public: __thiscall CRtlSharedLock::~CRtlSharedLock(void)",
    "private: void __thiscall CRtlSharedLock::Downgrade(void)",
    "private: void __thiscall CRtlSharedLock::AcquireRead(void)",
    "public: void __thiscall CRtlList::`default constructor closure'(void)",
    "DllCanUnloadNow",
    "public: int __thiscall CVdsAsyncObjectBase::IsCancelRequested(void)",
    "public: __thiscall CVdsDebugLog::~CVdsDebugLog(void)",
    "public: __thiscall CVdsCriticalSection::~CVdsCriticalSection(void)",
    "public: __thiscall CVdsUnlockIt::~CVdsUnlockIt(void)",
    "DllGetClassObject",
    "public: __thiscall CVdsCriticalSection::CVdsCriticalSection(struct _RTL_CRITICAL_SECTION *)",
    "public: void __thiscall CRtlMap::`default constructor closure'(void)",
    "public: __thiscall CVdsUnlockIt::CVdsUnlockIt(long &)"
  ],
  "vdsutil.dll": [
    "public: unsigned long __thiscall CVdsPnPNotificationBase::RegisterHandle(void *,void * *)",
    "long __stdcall IoctlMountmgrQueryPointsDevicePath(unsigned short *,struct _MOUNTMGR_MOUNT_POINTS * *)",
    "long __stdcall VdsWmiSetObjectInInstance(struct IWbemClassObject *,unsigned short *,struct IWbemClassObject *)",
    "long __stdcall AllocateAndGetVolumePathName(unsigned short const *,unsigned short * *)",
    "public: unsigned long __thiscall CVdsPnPNotificationBase::Initialize(void)",
    "public: int __thiscall CRtlList::InsertPointer(class CRtlListIter &,void *)",
    "private: static long __stdcall CVdsPnPNotificationBase::WindowProcEntry(struct HWND__ *,unsigned int,unsigned int,long)",
    "public: class CRtlListIter __thiscall CRtlList::Begin(void)",
    "private: unsigned long __thiscall CVdsPnPNotificationBase::NotificationThread(void *)",
    "unsigned long __stdcall GetDeviceRegistryProperty(void *,struct _SP_DEVINFO_DATA *,unsigned long,unsigned char * *,unsigned long)",
    "unsigned long __stdcall GetPartitionInformation(void *,struct _PARTITION_INFORMATION_EX *)",
    "unsigned char __stdcall AcquireRundownProtection(struct _RUNDOWN_REF *)",
    "long __stdcall VdsWmiSetByteInInstance(struct IWbemClassObject *,unsigned short *,unsigned char)",
    "unsigned long __stdcall LockVolume(void *,unsigned char)",
    "public: __thiscall CVdsHandleImpl<4294967295>::~CVdsHandleImpl<4294967295>(void)",
    "long __stdcall IsLocalComputer(unsigned short *)",
    "void __cdecl VdsTraceW(unsigned long,unsigned short *,...)",
    "public: void __thiscall CPrvEnumObject::SetPositionToLast(void)",
    "long __stdcall GetFileSystemRecognitionName(void *,unsigned short * *)",
    "int __stdcall DeleteNetworkShare(unsigned short *)",
    "public: long __thiscall CVdsWmiVariantObjectArrayEnum::Next(struct IWbemClassObject * *)",
    "unsigned char __stdcall IsLoggingEnabledW(void)",
    "void __stdcall StopReferenceHistory(void)",
    "long __stdcall VdsWmiGetByteFromInstance(struct IWbemClassObject *,unsigned short *,unsigned char *)",
    "unsigned long __stdcall GetDeviceNumber(void *,struct _STORAGE_DEVICE_NUMBER *)",
    "long __stdcall VdsWmiGetByteInVariantByteArray(struct IWbemClassObject *,unsigned short *,long,unsigned char *)",
    "public: static void __stdcall CVdsAsyncObjectBase::Uninitialize(void)",
    "long __stdcall VdsIscsiIpsecIdToIpAddress(unsigned char,unsigned long,unsigned char *,struct _VDS_IPADDRESS *)",
    "public: void __thiscall CRtlList::Remove(class CRtlListIter &)",
    "unsigned short * __stdcall VdsAllocateEmptyString(void)",
    "unsigned long __stdcall StartReferenceHistory(void)",
    "int __stdcall IsMediaPresent(void *)",
    "public: void __thiscall CVdsPnPNotificationBase::Uninitialize(void)",
    "unsigned long __stdcall GetVolumeUniqueId(struct _VDS_VOLUME_PROP2 *)",
    "public: class CRtlEntry * __thiscall CRtlListIter::GetEntry(void)",
    "public: int __thiscall CRtlListIter::IsDone(void)",
    "long __stdcall QueryObjects(struct IUnknown *,struct IEnumVdsObject * *)",
    "public: void __thiscall CVdsAsyncObjectBase::ZeroAsyncOut(void)",
    "void __cdecl VdsTraceEx(unsigned long,unsigned long,char *,...)",
    "long __stdcall VdsWmiFindInstanceOfClass(struct IWbemServices *,unsigned short *,unsigned short *,struct IWbemClassObject * *)",
    "unsigned long __stdcall GetDeviceName(void *,int,unsigned long,unsigned short *)",
    "unsigned long __stdcall IsDiskCurrentStateReadOnly(void *,unsigned char *)",
    "public: virtual long __stdcall CPrvEnumObject::Next(unsigned long,struct IUnknown * *,unsigned long *)",
    "unsigned long __stdcall RemoveEventSource(unsigned short *)",
    "public: int __thiscall CRtlList::Insert(class CRtlListIter &,class CRtlEntry &)",
    "long __stdcall VdsWmiCopyFromVariantByteArray(struct IWbemClassObject *,unsigned short *,long,unsigned char *)",
    "long __stdcall GetBootDiskNumber(unsigned long *,unsigned long * *)",
    "private: void __thiscall CRtlSharedLock::Downgrade(void)",
    "unsigned char __stdcall IsRamDrive(unsigned short *)",
    "public: void __thiscall CRtlList::`default constructor closure'(void)",
    "public: class CRtlListIter __thiscall CRtlList::End(void)",
    "public: class CRtlMapIter & __thiscall CRtlMapIter::Next(void)",
    "unsigned long __stdcall OpenDevice(unsigned short *,unsigned long,void * *)",
    "public: long __thiscall CVdsAsyncObjectBase::WaitImpl(long *)",
    "int __stdcall IsEfiFirmware(void)",
    "unsigned long __stdcall GetMediaGeometry(void *,unsigned long,struct _DISK_GEOMETRY_EX * *)",
    "public: long __thiscall CPrvEnumObject::Append(struct IUnknown *)",
    "long __stdcall VdsWmiCreateClassInstance(struct IWbemServices *,unsigned short *,struct IWbemClassObject * *)",
    "long __stdcall VdsWmiCreateVariantArray(unsigned short,long,struct tagVARIANT *)",
    "unsigned long __stdcall GetVolumeDiskExtentInfo(void *,struct _VOLUME_DISK_EXTENTS * *)",
    "public: void __thiscall CVdsAsyncObjectBase::SetCompletionStatus(long,unsigned long)",
    "int __stdcall IsDriveLetter(unsigned short *)",
    "public: __thiscall CVdsHandleImpl<4294967295>::CVdsHandleImpl<4294967295>(void)",
    "long __stdcall VdsIscsiCacheSessionDevices(struct IEnumWbemClassObject *,struct _VDSISCSI_SESSION_DEVICES_CACHE * *)",
    "long __stdcall VdsAllocateString(unsigned short *,unsigned short * *)",
    "unsigned long __stdcall GetDeviceLocationPath(enum _VDS_STORAGE_BUS_TYPE,unsigned long,struct _SCSI_ADDRESS,unsigned short * *)",
    "public: __thiscall CVdsCallTracer::CVdsCallTracer(unsigned long,char const *)",
    "long __stdcall VdsWmiSetUlongInInstance(struct IWbemClassObject *,unsigned short *,unsigned long)",
    "public: void __thiscall CVdsAsyncObjectBase::SetOutput(struct _VDS_ASYNC_OUTPUT)",
    "public: int __thiscall CRtlMap::Insert(class CRtlEntry &,class CRtlEntry &)",
    "unsigned long __stdcall GetInterfaceDetailData(void *,struct _SP_DEVICE_INTERFACE_DATA *,struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W * *)",
    "unsigned long __stdcall MountVolume(unsigned short *)",
    "unsigned long __stdcall GetStorageAccessAlignmentProperty(void *,struct _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR *)",
    "long __stdcall RegisterProvider(struct _GUID,struct _GUID,unsigned short *,enum _VDS_PROVIDER_TYPE,unsigned short *,unsigned short *,struct _GUID)",
    "public: int __thiscall CVdsDebugLog::m_TracingLogEnabled(void)",
    "long __stdcall GetVolumePath(struct _MOUNTMGR_MOUNT_POINT *,struct _MOUNTMGR_MOUNT_POINTS *,unsigned short * *)",
    "public: long __thiscall CGlobalResource::Initialize(void)",
    "unsigned long __stdcall CreateDeviceInfoSet(unsigned short *,void * *,struct _SP_DEVINFO_DATA *)",
    "long __stdcall GetDefaultAlignment(unsigned long *,unsigned __int64,enum _VDS_PARTITION_STYLE,unsigned long,unsigned long,unsigned char *)",
    "public: virtual long __stdcall CVdsAsyncObjectBase::Cancel(void)",
    "long __stdcall VdsWmiSetUlonglongInInstance(struct IWbemClassObject *,unsigned short *,unsigned __int64)",
    "public: enum _VDS_ASYNC_OUTPUT_TYPE __thiscall CVdsAsyncObjectBase::GetOutputType(void)",
    "unsigned long __stdcall GetDeviceRegistryProperty(unsigned long,unsigned long,unsigned char * *,unsigned long)",
    "void __stdcall VdsTraceExWHelper(unsigned long,unsigned long,unsigned short *,char *)",
    "long __stdcall InvalidateDiskCache(unsigned short *)",
    "public: __thiscall CVdsAsyncObjectBase::CVdsAsyncObjectBase(void)",
    "public: void __thiscall CVdsAsyncObjectBase::Signal(void)",
    "unsigned long __stdcall GetDiskFlags(void *,unsigned char *,unsigned char *,unsigned char *)",
    "long __stdcall VdsWmiSetBoolInInstance(struct IWbemClassObject *,unsigned short *,int)",
    "long __stdcall GetBootFromDiskNumber(unsigned long *)",
    "public: virtual long __stdcall CPrvEnumObject::Clone(struct IEnumVdsObject * *)",
    "unsigned long __stdcall WriteBootCode(void *)",
    "long __stdcall GuidToString(struct _GUID *,unsigned short *,unsigned long)",
    "public: __thiscall CPrvEnumObject::CPrvEnumObject(void)",
    "unsigned char (__stdcall*__stdcall GetFMIFSGetDefaultFilesystemRoutine(void))(struct FMIFS_DEF_FS_PARAM *,struct FMIFS_DEF_FS_OUT *,unsigned long *)",
    "unsigned long __stdcall GetDeviceLocationEx(void *,unsigned long,struct _VDS_DISK_PROP2 *)",
    "long __stdcall VdsWmiGetObjectFromInstance(struct IWbemClassObject *,unsigned short *,struct IWbemClassObject * *)",
    "long __stdcall MirrorBcdObjects(struct _VDS_PARTITION_IDENTITY *,struct _VDS_PARTITION_IDENTITY *)",
    "long __stdcall VdsIscsiIpAddressToString(struct _VDS_IPADDRESS *,unsigned long,unsigned short *)",
    "private: void __thiscall CRtlSharedLock::Release(void)",
    "public: __thiscall CRtlSharedLock::CRtlSharedLock(void)",
    "public: long __thiscall CVdsWmiVariantObjectArrayEnum::Reset(void)",
    "public: __thiscall CGlobalResource::CGlobalResource(void)",
    "void __stdcall VdsAssert(char const *,unsigned int,char const *)",
    "public: __thiscall CPrvEnumObject::~CPrvEnumObject(void)",
    "long __stdcall VdsWmiConnectToNamespace(unsigned short *,struct IWbemLocator * *,struct IWbemServices * *)",
    "void (__stdcall*__stdcall GetFMIFSFormatEx2Routine(void))(unsigned short *,enum _FMIFS_MEDIA_TYPE,unsigned short *,struct FMIFS_FORMATEX2_PARAM *,unsigned char (__stdcall*)(enum _FMIFS_PACKET_TYPE,unsigned long,void *))",
    "public: struct HWND__ * __thiscall CVdsPnPNotificationBase::GetWindowHandle(void)",
    "unsigned long __stdcall GetIsRemovable(void *,int *)",
    "public: class CRtlListEntry * __thiscall CRtlListIter::GetNode(void)",
    "public: class CRtlListIter & __thiscall CRtlListIter::Next(void)",
    "void __stdcall GarbageCollectDriveLetters(void)",
    "public: void __thiscall CRtlList::RemoveAll(void)",
    "long __stdcall VdsIscsiIpAddressToIpsecId(struct _VDS_IPADDRESS *,unsigned char *,unsigned long *,unsigned char * *)",
    "public: bool __thiscall CVdsHandleImpl<4294967295>::operator==(void *)const",
    "void __stdcall LogEvent(unsigned short *,unsigned long,unsigned short,unsigned long,void *,unsigned long,unsigned short * * const)",
    "public: void __thiscall CRtlMap::RemoveAll(int)",
    "unsigned long __stdcall VdsRegKeyGetDWord(unsigned short const *,unsigned short const *,unsigned long *)",
    "long __stdcall VdsIscsiSetIpAddressInInstance(struct IWbemServices *,struct IWbemClassObject *,unsigned short *,struct _VDS_IPADDRESS *)",
    "public: __thiscall CGlobalResource::~CGlobalResource(void)",
    "public: __thiscall CVdsAsyncObjectBase::~CVdsAsyncObjectBase(void)",
    "public: virtual __thiscall CRtlMap::~CRtlMap(void)",
    "public: void * __thiscall CVdsHandleImpl<4294967295>::operator=(void *)",
    "public: __thiscall CVdsCriticalSection::~CVdsCriticalSection(void)",
    "unsigned long __stdcall IsDiskReadOnly(void *,unsigned char *)",
    "unsigned long __stdcall VdsDoesDiskHaveArcPath(unsigned long,unsigned char *)",
    "void __stdcall RemoveTempVolumeName(unsigned short *,unsigned short *)",
    "unsigned long __stdcall LockDismountVolume(void *,int,unsigned char)",
    "public: __thiscall CVdsCriticalSection::CVdsCriticalSection(struct _RTL_CRITICAL_SECTION *)",
    "public: int __thiscall CVdsAsyncObjectBase::IsFinished(void)",
    "long __stdcall VdsWmiGetUlongFromInstance(struct IWbemClassObject *,unsigned short *,unsigned long *)",
    "int __stdcall IsNoAutoMount(void)",
    "public: long __thiscall CVdsWmiVariantObjectArrayEnum::Attach(struct tagVARIANT *)",
    "public: virtual long __stdcall CVdsAsyncObjectBase::QueryStatus(long *,unsigned long *)",
    "long __stdcall GetSystemVolumeHandle(void * *)",
    "public: __thiscall CVdsPnPNotificationBase::~CVdsPnPNotificationBase(void)",
    "int __stdcall VdsHeapFree(void *,unsigned long,void *)",
    "void __stdcall LogInfo(unsigned short *,unsigned long,unsigned long,void *,unsigned long,unsigned short *,char *)",
    "private: void __thiscall CRtlSharedLock::AcquireWrite(void)",
    "void __stdcall InitializeRundownProtection(struct _RUNDOWN_REF *)",
    "unsigned long __stdcall AddEventSource(unsigned short *,struct HINSTANCE__ *)",
    "void __stdcall ReInitializeRundownProtection(struct _RUNDOWN_REF *)",
    "long __stdcall VdsWmiSetStringInInstance(struct IWbemClassObject *,unsigned short *,unsigned short *)",
    "unsigned long __stdcall GetDiskLayout(void *,struct _DRIVE_LAYOUT_INFORMATION_EX * *)",
    "public: int __thiscall CRtlList::InsertTailPointer(void *)",
    "void __stdcall CoFreeStringArray(unsigned short * *,long)",
    "long __stdcall UnregisterProvider(struct _GUID)",
    "long __stdcall VdsWmiGetObjectInVariantObjectArray(struct IWbemClassObject *,unsigned short *,long,struct IWbemClassObject * *)",
    "public: void __cdecl CVdsDebugLog::Log(unsigned long,unsigned long,int,char *,...)",
    "public: __thiscall CVdsHandleImpl<4294967295>::operator void *(void)",
    "public: int __thiscall CRtlList::InsertTail(class CRtlEntry &)",
    "long __stdcall VdsIscsiIsIscsiLun(struct IWbemClassObject *,struct _VDSISCSI_SESSION_DEVICES_CACHE *,int *)",
    "public: __thiscall CVdsPnPNotificationBase::CVdsPnPNotificationBase(void)",
    "void * __stdcall VdsHeapAlloc(void *,unsigned long,unsigned long)",
    "unsigned long __stdcall SetDiskLayout(void *,struct _DRIVE_LAYOUT_INFORMATION_EX *)",
    "public: int __thiscall CRtlMap::Find(class CRtlEntry &,class CRtlEntry *)",
    "void __stdcall LogWarning(unsigned short *,unsigned long,unsigned long,void *,unsigned long,unsigned long,unsigned short *,char *)",
    "long __stdcall GetBootVolumeHandle(void * *)",
    "public: __thiscall CRtlList::CRtlList(void (__stdcall*)(class CRtlEntry *))",
    "public: __thiscall CVdsWmiVariantObjectArrayEnum::~CVdsWmiVariantObjectArrayEnum(void)",
    "unsigned long __stdcall InitializeSecurityDescriptor(unsigned long,void *,struct _ACL * *,void * *,void * *,void * *)",
    "public: virtual long __stdcall CPrvEnumObject::Skip(unsigned long)",
    "long __stdcall VdsWmiCopyToVariantByteArray(struct IWbemClassObject *,unsigned short *,long,unsigned char *)",
    "private: void __thiscall CRtlSharedLock::Upgrade(void)",
    "public: __thiscall CVdsWmiVariantObjectArrayEnum::CVdsWmiVariantObjectArrayEnum(void)",
    "unsigned long __stdcall GetMediaGeometryEx(void *,struct _VDS_DISK_PROP2 *)",
    "public: void __thiscall CPrvEnumObject::Clear(void)",
    "public: __thiscall CRtlSharedLock::~CRtlSharedLock(void)",
    "_DllMain@12",
    "public: long __thiscall CVdsWmiVariantObjectArrayEnum::Detach(void)",
    "void __stdcall RundownCompleted(struct _RUNDOWN_REF *)",
    "long __stdcall AssignTempVolumeName(unsigned short *,unsigned short * const)",
    "void __stdcall WaitForRundownProtectionRelease(struct _RUNDOWN_REF *)",
    "private: static unsigned long __stdcall CVdsPnPNotificationBase::NotificationThreadEntry(void *)",
    "unsigned long __stdcall GetMediaGeometry(void *,struct _VDS_DISK_PROP *)",
    "long __stdcall VdsWmiGetBoolFromInstance(struct IWbemClassObject *,unsigned short *,int *)",
    "unsigned long __stdcall VdsInitializeCriticalSection(struct _RTL_CRITICAL_SECTION *)",
    "private: void __thiscall CRtlSharedLock::AcquireRead(void)",
    "long __stdcall QueryObjects(struct IUnknown *,struct IEnumVdsObject * *,struct _RTL_CRITICAL_SECTION &)",
    "int __stdcall IsWinPE(void)",
    "public: void __thiscall CVdsPnPNotificationBase::UnregisterHandle(void *)",
    "public: int __thiscall CRtlMap::FindPtr(class CRtlEntry &,class CRtlEntry * *)",
    "public: unsigned long __thiscall CVdsPnPNotificationBase::Register(struct _NotificationListeningRequest *,unsigned long)",
    "unsigned long __stdcall GetVolumeSize(unsigned short *,unsigned __int64 *)",
    "public: __thiscall CVdsUnlockIt::~CVdsUnlockIt(void)",
    "int __stdcall VdsIscsiCheckEqualIpAddress(struct _VDS_IPADDRESS,struct _VDS_IPADDRESS)",
    "public: void __thiscall CRtlMap::`default constructor closure'(void)",
    "public: void __thiscall CVdsPnPNotificationBase::Unregister(struct _NotificationListeningRequest *)",
    "public: __thiscall CVdsUnlockIt::CVdsUnlockIt(long &)",
    "public: int __thiscall CVdsDebugLog::m_NoDebuggerLogging(void)",
    "public: int __thiscall CRtlMap::Remove(class CRtlEntry &)",
    "void __cdecl VdsTraceExW(unsigned long,unsigned long,unsigned short *,...)",
    "public: void __thiscall CVdsAsyncObjectBase::SetOutputType(enum _VDS_ASYNC_OUTPUT_TYPE)",
    "public: void __thiscall CVdsAsyncObjectBase::AllowCancel(void)",
    "long __stdcall DeleteBcdObjects(struct _VDS_PARTITION_IDENTITY *)",
    "void __cdecl VdsTrace(unsigned long,char *,...)",
    "long __stdcall GetVolumeName(unsigned short *,unsigned long,unsigned short *)",
    "unsigned long __stdcall GetDeviceAndMediaType(unsigned short *,void *,unsigned long *,unsigned long *)",
    "unsigned char (__stdcall*__stdcall GetFMIFSEnableCompressionRoutine(void))(unsigned short *,unsigned short)",
    "void __stdcall VdsTraceExHelper(unsigned long,unsigned long,char *,char *)",
    "unsigned char (__stdcall*__stdcall GetFMIFSQueryDeviceInfoByHandle(void))(void *,struct _FMIFS_DEVICE_INFORMATION *,unsigned long)",
    "public: static unsigned long __stdcall CVdsAsyncObjectBase::Initialize(void)",
    "long __stdcall VdsWmiGetMethodArgumentObject(struct IWbemServices *,unsigned short *,unsigned short *,struct IWbemClassObject * *)",
    "long __stdcall GetVolumeGuidPathnames(unsigned short *,unsigned long *,unsigned short * * *)",
    "long __stdcall VdsWmiGetUlonglongFromInstance(struct IWbemClassObject *,unsigned short *,unsigned __int64 *)",
    "unsigned long __stdcall GetDiskOfflineReason(void *,enum _VDS_DISK_OFFLINE_REASON *)",
    "long __stdcall UnInitializeGlobalResouce(void)",
    "public: int __thiscall CRtlSharedLock::CurrentThreadIsWriter(void)",
    "public: void * __thiscall CRtlListIter::GetEntryPointer(void)",
    "void __stdcall ReleaseRundownProtection(struct _RUNDOWN_REF *)",
    "public: int __thiscall CRtlList::InsertHeadPointer(void *)",
    "_VdsDisableCOMFatalExceptionHandling@0",
    "unsigned long __stdcall GetRegistryValue(struct HKEY__ *,unsigned short *,unsigned short *,void * *,unsigned long &)",
    "public: class CRtlListIter & __thiscall CRtlListIter::Prev(void)",
    "public: __thiscall CRtlList::~CRtlList(void)",
    "public: void __thiscall CVdsAsyncObjectBase::DisallowCancel(void)",
    "public: int __thiscall CRtlList::InsertHead(class CRtlEntry &)",
    "public: class CRtlMapIter __thiscall CRtlMap::Begin(void)",
    "long __stdcall VdsWmiCallMethod(struct IWbemServices *,struct IWbemClassObject *,unsigned short *,struct IWbemClassObject *,struct IWbemClassObject * *)",
    "long __stdcall VdsIscsiGetIpAddressFromInstance(struct IWbemClassObject *,unsigned short *,struct _VDS_IPADDRESS *)",
    "public: void __thiscall CVdsDebugLog::Log(unsigned long,unsigned long,int,char *,char *)",
    "int __stdcall IsDeviceFullyInstalled(unsigned short *)",
    "public: class CRtlList & __thiscall CRtlList::operator=(class CRtlList &)",
    "void __stdcall LogError(unsigned short *,unsigned long,unsigned long,void *,unsigned long,unsigned long,unsigned short *,char *)",
    "unsigned long __stdcall IsDiskClustered(void *,unsigned char *,unsigned char *)",
    "public: __thiscall CRtlMap::CRtlMap(unsigned long,void (__stdcall*)(class CRtlEntry *),void (__stdcall*)(class CRtlEntry *))",
    "public: int __thiscall CVdsAsyncObjectBase::IsCancelRequested(void)",
    "private: unsigned long __thiscall CVdsPnPNotificationBase::CreateListenThread(void)",
    "public: __thiscall CVdsDebugLog::~CVdsDebugLog(void)",
    "public: __thiscall CVdsCallTracer::~CVdsCallTracer(void)",
    "public: __thiscall CVdsDebugLog::CVdsDebugLog(int)",
    "public: virtual long __stdcall CPrvEnumObject::Reset(void)",
    "unsigned char (__stdcall*__stdcall GetFMIFSQueryDeviceInfo(void))(unsigned short *,struct _FMIFS_DEVICE_INFORMATION *,unsigned long)",
    "unsigned long __stdcall GetDeviceLocation(void *,struct _VDS_DISK_PROP *)",
    "public: int __thiscall CRtlMap::InsertUnique(class CRtlEntry &,class CRtlEntry &)"
  ],
  "vdsvd.dll": [
    "public: int __thiscall CVdsDebugLog::m_NoDebuggerLogging(void)",
    "public: __thiscall CVdsPnPNotificationBase::~CVdsPnPNotificationBase(void)",
    "public: void __thiscall CVdsAsyncObjectBase::SetOutputType(enum _VDS_ASYNC_OUTPUT_TYPE)",
    "public: void __thiscall CVdsAsyncObjectBase::AllowCancel(void)",
    "private: void __thiscall CRtlSharedLock::AcquireWrite(void)",
    "public: void __thiscall CVdsAsyncObjectBase::SetOutput(struct _VDS_ASYNC_OUTPUT)",
    "public: int __thiscall CVdsDebugLog::m_TracingLogEnabled(void)",
    "DllRegisterServer",
    "public: void __thiscall CPrvEnumObject::SetPositionToLast(void)",
    "public: __thiscall CVdsPnPNotificationBase::CVdsPnPNotificationBase(void)",
    "public: enum _VDS_ASYNC_OUTPUT_TYPE __thiscall CVdsAsyncObjectBase::GetOutputType(void)",
    "DllUnregisterServer",
    "void __stdcall StopReferenceHistory(void)",
    "public: int __thiscall CRtlSharedLock::CurrentThreadIsWriter(void)",
    "public: __thiscall CPrvEnumObject::CPrvEnumObject(void)",
    "unsigned long __stdcall StartReferenceHistory(void)",
    "private: void __thiscall CRtlSharedLock::Release(void)",
    "public: void __thiscall CVdsAsyncObjectBase::DisallowCancel(void)",
    "public: __thiscall CRtlSharedLock::CRtlSharedLock(void)",
    "private: void __thiscall CRtlSharedLock::Upgrade(void)",
    "public: __thiscall CPrvEnumObject::~CPrvEnumObject(void)",
    "public: void __thiscall CVdsAsyncObjectBase::ZeroAsyncOut(void)",
    "public: __thiscall CRtlSharedLock::~CRtlSharedLock(void)",
    "private: void __thiscall CRtlSharedLock::Downgrade(void)",
    "private: void __thiscall CRtlSharedLock::AcquireRead(void)",
    "public: void __thiscall CRtlList::`default constructor closure'(void)",
    "DllCanUnloadNow",
    "public: int __thiscall CVdsAsyncObjectBase::IsCancelRequested(void)",
    "public: __thiscall CVdsDebugLog::~CVdsDebugLog(void)",
    "public: __thiscall CVdsCriticalSection::~CVdsCriticalSection(void)",
    "public: __thiscall CVdsUnlockIt::~CVdsUnlockIt(void)",
    "DllGetClassObject",
    "public: __thiscall CVdsCriticalSection::CVdsCriticalSection(struct _RTL_CRITICAL_SECTION *)",
    "public: void __thiscall CRtlMap::`default constructor closure'(void)",
    "public: __thiscall CVdsUnlockIt::CVdsUnlockIt(long &)"
  ],
  "verifier.dll": [
    "VerifierAddFreeMemoryCallback",
    "VerifierGetMemoryForDump",
    "VerifierEnableFaultInjectionTargetRange",
    "VerifierStopMessage",
    "VerifierSetRuntimeFlags",
    "VerifierForceNormalHeap",
    "VerifierEnumerateResource",
    "VerifierCheckPageHeapAllocation",
    "VerifierQueryRuntimeFlags",
    "VerifierIsPerUserSettingsEnabled",
    "VerifierEnableFaultInjectionExclusionRange",
    "VerifierGetProviderHelper",
    "VerifierDisableFaultInjectionExclusionRange",
    "VerifierIsCurrentThreadHoldingLocks",
    "VerifierSetFaultInjectionProbability",
    "VerifierCreateRpcPageHeap",
    "VerifierDestroyRpcPageHeap",
    "VerifierSetFlags",
    "VerifierDisableFaultInjectionTargetRange",
    "VerifierDeleteFreeMemoryCallback",
    "VerifierGetInfoForException",
    "VerifierIsDllEntryActive"
  ],
  "version.dll": [
    "GetFileVersionInfoW",
    "VerQueryValueW",
    "VerInstallFileW",
    "GetFileVersionInfoSizeA",
    "VerLanguageNameW",
    "VerFindFileA",
    "VerInstallFileA",
    "GetFileVersionInfoExW",
    "VerFindFileW",
    "GetFileVersionInfoSizeExW",
    "VerQueryValueA",
    "GetFileVersionInfoSizeW",
    "GetFileVersionInfoByHandle",
    "GetFileVersionInfoA",
    "VerLanguageNameA"
  ],
  "vfpodbc.dll": [
    "LibMain",
    "SQLSetConnectOption",
    "public: class CVfpodbc & __thiscall CVfpodbc::operator=(class CVfpodbc const &)",
    "ConfigDSN",
    "fnVfpodbc",
    "ConfigDSNEx"
  ],
  "vfwwdm32.dll": [
    "DriverProc",
    "DllMain",
    "VfwWdm"
  ],
  "vga.dll": "No exports",
  "vga256.dll": "No exports",
  "vga64k.dll": "No exports",
  "virtdisk.dll": [
    "GetStorageDependencyInformation",
    "CompactVirtualDisk",
    "DetachVirtualDisk",
    "ExpandVirtualDisk",
    "GetVirtualDiskPhysicalPath",
    "MergeVirtualDisk",
    "OpenVirtualDisk",
    "CreateVirtualDisk",
    "GetVirtualDiskOperationProgress",
    "GetVirtualDiskInformation",
    "SetVirtualDiskInformation",
    "AttachVirtualDisk"
  ],
  "vmbuspipe.dll": [
    "VmbusPipeClientEnumeratePipes",
    "VmbusPipeServerResume",
    "VmbusPipeServerConnectPipe",
    "VmbusPipeGetPipeMode",
    "VmbusPipeServerPause",
    "VmbusPipeClientWaitChannel",
    "VmbusPipeServerOfferChannel",
    "VmbusPipeClientOpenChannel"
  ],
  "vmbusres.dll": "No exports",
  "vmicres.dll": "No exports",
  "vmictimeprovider.dll": [
    "TimeProvOpen",
    "TimeProvCommand",
    "TimeProvClose"
  ],
  "vmstorfltres.dll": "No exports",
  "vpnike.dll": [
    "UninitializeServerProtocolEngine",
    "InitializeServerProtocolEngine",
    "UninitializeProtocolEngine",
    "InitializeProtocolEngine",
    "SendMessageToProtocolEngine"
  ],
  "vpnikeapi.dll": [
    "GetNewTunnelID",
    "UpdateTunnel",
    "ProcessEapAuthPacket",
    "ProcessTrafficSelectorsReply",
    "CancelProcessEapAuthPacket",
    "FreeEapAuthPacket",
    "ProcessTrafficSelectorsRequest",
    "GetConfigurationPayloadRequest",
    "CreateTunnel",
    "FreeTrafficSelectors",
    "GetServerEapAuthRequestPacket",
    "FreeEapAuthAttributes",
    "NewRasIncomingCall",
    "ProcessConfigurationPayloadRequest",
    "QueryEapAuthAttributes",
    "RemoveTrafficSelectors",
    "ProcessAdditionalAddressNotification",
    "CloseTunnel",
    "ProcessConfigurationPayloadReply",
    "GetTrafficSelectorsRequest",
    "FreeConfigurationPayloadBuffer"
  ],
  "vss_ps.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "vssapi.dll": [
    "protected: bool __stdcall CVssWriter::AreComponentsSelected(void)const",
    "protected: struct _GUID __stdcall CVssJetWriter::GetCurrentSnapshotSetId(void)const",
    "public: virtual bool __stdcall CVssJetWriter::OnPrepareSnapshotBegin(void)",
    "public: virtual bool __stdcall CVssWriter::OnPrepareBackup(class IVssWriterComponents *)",
    "protected: bool __stdcall CVssJetWriter::IsBootableSystemStateBackedUp(void)const",
    "public: long __stdcall CVssWriter::Initialize(struct _GUID,unsigned short const *,enum VSS_USAGE_TYPE,enum VSS_SOURCE_TYPE,enum _VSS_APPLICATION_LEVEL,unsigned long,enum VSS_ALTERNATE_WRITER_STATE,bool,unsigned short const *)",
    "public: virtual __thiscall CVssJetWriter::~CVssJetWriter(void)",
    "protected: long __stdcall CVssWriter::GetContext(void)const",
    "public: virtual bool __stdcall CVssJetWriter::OnPreRestoreBegin(class IVssWriterComponents *)",
    "public: virtual void __stdcall CVssJetWriter::OnAbortBegin(void)",
    "public: virtual bool __stdcall CVssJetWriter::OnPrepareSnapshotEnd(bool)",
    "public: virtual bool __stdcall CVssJetWriter::OnPostSnapshot(class IVssWriterComponents *)",
    "public: virtual bool __stdcall CVssJetWriter::OnPostRestoreBegin(class IVssWriterComponents *)",
    "public: virtual bool __stdcall CVssWriter::OnPreRestore(class IVssWriterComponents *)",
    "protected: enum _VSS_BACKUP_TYPE __stdcall CVssWriter::GetBackupType(void)const",
    "ShouldBlockRevert",
    "public: virtual bool __stdcall CVssJetWriter::OnThawEnd(bool)",
    "VssFreeSnapshotPropertiesInternal",
    "CreateVssExpressWriterInternal",
    "protected: long __stdcall CVssJetWriter::GetContext(void)const",
    "protected: struct _GUID __stdcall CVssWriter::GetCurrentSnapshotSetId(void)const",
    "protected: long __stdcall CVssWriter::GetSnapshotDeviceName(unsigned short const *,unsigned short const * *)const",
    "public: virtual bool __stdcall CVssWriter::OnVSSShutdown(void)",
    "long __stdcall CreateVssSnapshotSetDescription(struct _GUID,long,class IVssSnapshotSetDescription * *)",
    "protected: enum _VSS_APPLICATION_LEVEL __stdcall CVssJetWriter::GetCurrentLevel(void)const",
    "protected: bool __stdcall CVssWriter::IsPathAffected(unsigned short const *)const",
    "protected: bool __stdcall CVssJetWriter::IsPathAffected(unsigned short const *)const",
    "protected: unsigned int __stdcall CVssWriter::GetCurrentVolumeCount(void)const",
    "protected: enum _VSS_RESTORE_TYPE __stdcall CVssWriter::GetRestoreType(void)const",
    "public: virtual bool __stdcall CVssJetWriter::OnThawBegin(void)",
    "public: long __stdcall CVssWriter::Unsubscribe(void)",
    "public: void __stdcall CVssJetWriter::Uninitialize(void)",
    "IsVolumeSnapshotted",
    "public: virtual bool __stdcall CVssWriter::OnPostRestore(class IVssWriterComponents *)",
    "DllCanUnloadNow",
    "CreateVssExamineWriterMetadataInternal",
    "protected: long __stdcall CVssJetWriter::SetWriterFailure(long)",
    "public: virtual bool __stdcall CVssWriter::OnBackupShutdown(struct _GUID)",
    "DllGetClassObject",
    "public: virtual bool __stdcall CVssJetWriter::OnPreRestoreEnd(class IVssWriterComponents *,bool)",
    "public: virtual bool __stdcall CVssJetWriter::OnFreezeEnd(bool)",
    "public: virtual bool __stdcall CVssJetWriter::OnPrepareBackupBegin(class IVssWriterComponents *)",
    "public: __thiscall CVssWriter::CVssWriter(void)",
    "public: __thiscall CVssJetWriter::CVssJetWriter(void)",
    "protected: unsigned short const * * __stdcall CVssWriter::GetCurrentVolumeArray(void)const",
    "protected: unsigned short const * * __stdcall CVssJetWriter::GetCurrentVolumeArray(void)const",
    "public: virtual bool __stdcall CVssWriter::OnPostSnapshot(class IVssWriterComponents *)",
    "public: virtual bool __stdcall CVssWriter::OnIdentify(class IVssCreateWriterMetadata *)",
    "VssFreeSnapshotProperties",
    "public: virtual bool __stdcall CVssJetWriter::OnPrepareBackupEnd(class IVssWriterComponents *,bool)",
    "protected: bool __stdcall CVssJetWriter::IsPartialFileSupportEnabled(void)const",
    "public: long __stdcall CVssWriter::InstallAlternateWriter(struct _GUID,struct _GUID)",
    "long __stdcall LoadVssSnapshotSetDescription(unsigned short const *,class IVssSnapshotSetDescription * *,struct _GUID)",
    "public: virtual bool __stdcall CVssJetWriter::OnIdentify(class IVssCreateWriterMetadata *)",
    "public: virtual bool __stdcall CVssJetWriter::OnBackupCompleteEnd(class IVssWriterComponents *,bool)",
    "protected: long __stdcall CVssJetWriter::GetSnapshotDeviceName(unsigned short const *,unsigned short const * *)const",
    "public: virtual bool __stdcall CVssJetWriter::OnFreezeBegin(void)",
    "public: virtual bool __stdcall CVssWriter::OnBackupComplete(class IVssWriterComponents *)",
    "long __stdcall CreateVssExamineWriterMetadata(unsigned short *,class IVssExamineWriterMetadata * *)",
    "protected: bool __stdcall CVssWriter::IsBootableSystemStateBackedUp(void)const",
    "long __stdcall CreateVssBackupComponents(class IVssBackupComponents * *)",
    "protected: long __stdcall CVssWriter::SetWriterFailure(long)",
    "protected: enum _VSS_RESTORE_TYPE __stdcall CVssJetWriter::GetRestoreType(void)const",
    "protected: enum _VSS_APPLICATION_LEVEL __stdcall CVssWriter::GetCurrentLevel(void)const",
    "protected: enum _VSS_BACKUP_TYPE __stdcall CVssJetWriter::GetBackupType(void)const",
    "public: virtual bool __stdcall CVssWriter::OnVSSApplicationStartup(void)",
    "protected: bool __stdcall CVssWriter::IsPartialFileSupportEnabled(void)const",
    "CreateWriterEx",
    "GetProviderMgmtInterfaceInternal",
    "public: long __stdcall CVssJetWriter::Initialize(struct _GUID,unsigned short const *,bool,bool,unsigned short const *,unsigned short const *,unsigned long)",
    "public: virtual bool __stdcall CVssJetWriter::OnBackupCompleteBegin(class IVssWriterComponents *)",
    "CreateWriter",
    "public: virtual bool __stdcall CVssWriter::OnBackOffIOOnVolume(unsigned short *,struct _GUID,struct _GUID)",
    "public: virtual bool __stdcall CVssWriter::OnContinueIOOnVolume(unsigned short *,struct _GUID,struct _GUID)",
    "public: virtual bool __stdcall CVssJetWriter::OnPostRestoreEnd(class IVssWriterComponents *,bool)",
    "CreateVssBackupComponentsInternal",
    "ShouldBlockRevertInternal",
    "public: long __stdcall CVssWriter::Subscribe(unsigned long)",
    "public: virtual __thiscall CVssWriter::~CVssWriter(void)",
    "public: virtual void __stdcall CVssJetWriter::OnAbortEnd(void)",
    "GetProviderMgmtInterface",
    "IsVolumeSnapshottedInternal",
    "protected: unsigned int __stdcall CVssJetWriter::GetCurrentVolumeCount(void)const",
    "protected: bool __stdcall CVssJetWriter::AreComponentsSelected(void)const"
  ],
  "vsstrace.dll": [
    "VssTraceInitialize",
    "VssTraceUninitialize",
    "VssIsTracingEnabledPerThread",
    "VssTraceMessage",
    "VssIsKernelDebuggerAttached",
    "VssGetTracingModuleInfo",
    "VssTraceBinary",
    "VssIsTracingEnabledOnModule",
    "VssGetTracingSequenceNumber",
    "VssGetTracingContextPerThread",
    "AssertFail",
    "VssIsTracingEnabled",
    "VssSetTracingContextPerThread",
    "VssIsTracingEnabledOnFunction",
    "VssSetDebugReport"
  ],
  "WABSyncProvider.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WFSR.dll": "No exports",
  "WINSRPC.DLL": [
    "WinsDoScavengingNew",
    "WinsGetBrowserNames",
    "WinsDelDbRecs",
    "WinsRecordAction",
    "WinsRestore",
    "WinsTerm",
    "WinsUBind",
    "WinsSyncUp",
    "WinsPullRange",
    "WinsStatusWHdl",
    "WinsTrigger",
    "WinsWorkerThdUpd",
    "WinsDeleteWins",
    "WinsGetDbRecs",
    "WinsGetDbRecsByName",
    "WinsBackup",
    "WinsFreeMem",
    "WinsStatusNew",
    "WinsTombstoneDbRecs",
    "WinsDoScavenging",
    "WinsSetPriorityClass",
    "WinsUnbind",
    "WinsABind",
    "WinsDoStaticInit",
    "WinsResetCounters",
    "WinsAllocMem",
    "WinsCheckAccess",
    "WinsRestoreEx",
    "WinsSetFlags",
    "WinsGetNameAndAdd",
    "WinsStatus"
  ],
  "WLanConn.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "WLanHC.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WMADMOD.DLL": [
    "CreateInstance",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "WMADMOE.DLL": [
    "CreateInstance",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "WMALFXGFXDSP.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WMASF.DLL": [
    "ASFSendTimeToTime",
    "ASFGetDataUnitInfo",
    "ASFSendTimeToPresTime",
    "ASFPresTimeToSendTime",
    "ASFReadHeaderFromFileHandle",
    "ASFGetHeaderObject",
    "ASFGUIDToCodecID",
    "ASFCreateMediaObjectIndexMaker",
    "ASFWriteHeaderToFile",
    "ASFFindStreamPropertiesObject",
    "ASFGUIDFromCodecID",
    "ASFPresTimeToTime",
    "ASFReadHeaderFromFile",
    "ASFCreateIOMonitor",
    "ASFAddPresDelta",
    "ASFCreateIndexMakerFileSink",
    "ASFGetTimeBase",
    "ASFCreateIndexMaker",
    "ASFTimeToPresDeltaTime",
    "ASFFindRootObject",
    "ASFPresDeltaToFull",
    "ASFSetDataUnitInfo",
    "ASFCreateLibrary",
    "ASFTimeToPresTime",
    "CreateAsfCellPoolAllocator",
    "ASFPresDeltaTimeToTime",
    "ASFCreateStreamSelector",
    "ASFCreateBitrateTracker",
    "ASFAddSendDelta",
    "ASFPresFullToDelta",
    "ASFCalculatePresDelta",
    "ASFGetStreamPropertiesObject",
    "ASFGetRootObject",
    "ASFTimeToSendTime",
    "ASFFindHeaderObject"
  ],
  "WMNetMgr.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WMPEncEn.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WMPhoto.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "WMSPDMOD.DLL": [
    "CreateInstance",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "WMSPDMOE.DLL": [
    "CreateInstance",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "WMVCORE.DLL": [
    "WMCheckURLExtension",
    "WMCreateProfileManager",
    "WMCreateReader",
    "DllRegisterServer",
    "WMCreateLicenseRevocationAgentPrivate",
    "WMCreateBackupRestorer",
    "WMCreateWriter",
    "WMValidateData",
    "WMCreateWriterFileSink",
    "WMCreateSyncReaderPriv",
    "WMCreateReaderPriv",
    "WMIsAvailableOffline",
    "WMCreateEditor",
    "WMIsContentProtected",
    "WMCheckURLScheme",
    "WMCreateIndexer",
    "WMCreateWriterPushSink",
    "WMCreateSyncReader",
    "WMCreateWriterNetworkSink",
    "WMCreateWriterPriv",
    "WMCreateBackupRestorerPrivate"
  ],
  "WMVDECOD.DLL": [
    "CreateInstance",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "WMVENCOD.DLL": [
    "CreateInstance",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "WMVSDECD.DLL": [
    "CreateInstance",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "WMVSENCD.DLL": [
    "CreateInstance",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "WMVXENCD.DLL": [
    "CreateInstance",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "WPDShServiceObj.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WPDSp.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WSDApi.dll": [
    "WSDGetConfigurationOption",
    "WSDXMLBuildAnyForSingleElement",
    "WSDCreateDiscoveryPublisher2",
    "WSDCreateOutboundAttachment",
    "WSDCreateMetadataAgent",
    "WSDXMLGetValueFromAny",
    "WSDGenerateFaultEx",
    "WSDDetachLinkedMemory",
    "WSDCreateUdpMessageParameters",
    "WSDProcessFault",
    "WSDCreateHttpTransport",
    "WSDCreateDeviceHost2",
    "WSDAttachLinkedMemory",
    "WSDCreateHttpMessageParameters",
    "WSDAllocateLinkedMemory",
    "WSDCreateDeviceProxyAdvanced",
    "WSDCreateDeviceHost",
    "WSDAddFirewallCheck",
    "WSDCreateDiscoveryPublisher",
    "WSDFreeLinkedMemory",
    "WSDCreateDeviceProxy2",
    "WSDCreateUdpTransport",
    "WSDCreateDiscoveryProvider2",
    "WSDCopyEndpoint",
    "WSDXMLCreateContext",
    "WSDCreateHttpAddress",
    "WSDCancelNetworkChangeNotify",
    "WSDUriEncode",
    "WSDXMLAddSibling",
    "WSDGenerateRandomDelay",
    "WSDCreateDeviceProxy",
    "WSDCopyNameList",
    "WSDXMLCompareNames",
    "WSDUriDecode",
    "WSDXMLGetNameFromBuiltinNamespace",
    "WSDCreateDeviceHostAdvanced",
    "WSDCompareEndpoints",
    "WSDCreateUdpAddress",
    "WSDSetConfigurationOption",
    "WSDCreateDiscoveryProvider",
    "WSDRemoveFirewallCheck",
    "WSDXMLAddChild",
    "WSDXMLCleanupElement",
    "WSDGenerateFault",
    "WSDNotifyNetworkChange"
  ],
  "WSDMon.dll": [
    "InitializePrintMonitor2"
  ],
  "WSDPrintProxy.DLL": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WSDScanProxy.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WSHTCPIP.DLL": [
    "WSHGetProviderGuid",
    "WSHOpenSocket",
    "WSHEnumProtocols",
    "WSHOpenSocket2",
    "WSHGetWildcardSockaddr",
    "WSHGetBroadcastSockaddr",
    "WSHJoinLeaf",
    "WSHGetWSAProtocolInfo",
    "WSHSetSocketInformation",
    "WSHIoctl",
    "WSHGetSocketInformation",
    "WSHGetSockaddrType",
    "WSHGetWinsockMapping",
    "WSHAddressToString",
    "WSHNotify",
    "WSHStringToAddress"
  ],
  "WSManMigrationPlugin.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "WUDFCoinstaller.dll": [
    "CoDeviceInstall"
  ],
  "WUDFPlatform.dll": [
    "PlatformUnhandledExceptionFilter",
    "WudfIsKernelDebuggerPresent",
    "DllMain",
    "GetAndInitializePlatformObject",
    "WudfWaitForDebugger",
    "WudfDebugBreakPoint",
    "ClearPlatformTestingCallbacks",
    "InitializePlatformLibrary",
    "ShutdownPlatformLibrary",
    "WdfGetLpcInterface",
    "WudfIsUserDebuggerPresent",
    "WudfIsAnyDebuggerPresent",
    "DllGetClassObject",
    "GetPlatformObject",
    "SetPlatformTestingCallbacks"
  ],
  "WUDFSvc.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "WUDFx.dll": [
    "DllCanUnloadNow",
    "Microsoft_WDF_UMDF_Version",
    "DllGetClassObject"
  ],
  "WWanAPI.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "WWanHC.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "WavDest.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "WcnApi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "WcnEapAuthProxy.dll": [
    "WcnEapPluginGetInfo"
  ],
  "WcnEapPeerProxy.dll": [
    "EapPeerFreeErrorMemory",
    "EapPeerFreeMemory",
    "EapPeerGetMethodProperties",
    "EapPeerGetInfo"
  ],
  "WcnNetsh.dll": [
    "GetResourceString",
    "InitHelperDll"
  ],
  "WcsPlugInService.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "ServiceMain"
  ],
  "WebClnt.dll": [
    "DavInit",
    "DavClose",
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "WfHC.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "WinFax.dll": [
    "FaxGetPageData",
    "FaxEnumGlobalRoutingInfoA",
    "FaxFreeBuffer",
    "FaxConnectFaxServerA",
    "FaxStartPrintJobW",
    "FaxPrintCoverPageA",
    "FaxSetRoutingInfoW",
    "FaxGetLoggingCategoriesW",
    "FaxSendDocumentA",
    "FaxEnableRoutingMethodW",
    "FaxSetLoggingCategoriesW",
    "FaxGetConfigurationA",
    "FaxEnableRoutingMethodA",
    "FaxAccessCheck",
    "FaxSetRoutingInfoA",
    "FaxGetJobW",
    "FaxAbort",
    "FaxGetRoutingInfoW",
    "FaxCompleteJobParamsA",
    "FaxRegisterServiceProviderW",
    "FaxClose",
    "FaxEnumPortsW",
    "FaxSetGlobalRoutingInfoA",
    "FaxUnregisterServiceProviderW",
    "FaxOpenPort",
    "FaxEnumRoutingMethodsW",
    "FaxEnumJobsW",
    "FaxEnumPortsA",
    "FaxGetConfigurationW",
    "FaxSetGlobalRoutingInfoW",
    "FaxConnectFaxServerW",
    "FaxGetRoutingInfoA",
    "FaxSetJobA",
    "FaxStartPrintJobA",
    "FaxGetDeviceStatusW",
    "FaxGetLoggingCategoriesA",
    "FaxGetPortW",
    "FaxPrintCoverPageW",
    "FaxSendDocumentForBroadcastW",
    "FaxSetConfigurationW",
    "FaxSetJobW",
    "FaxCompleteJobParamsW",
    "FaxSetConfigurationA",
    "FaxEnumGlobalRoutingInfoW",
    "FaxSetPortW",
    "FaxRegisterRoutingExtensionW",
    "FaxSetPortA",
    "FaxSendDocumentForBroadcastA",
    "FaxEnumRoutingMethodsA",
    "FaxGetJobA",
    "FaxEnumJobsA",
    "FaxSendDocumentW",
    "FaxInitializeEventQueue",
    "FaxGetDeviceStatusA",
    "FaxGetPortA",
    "FaxSetLoggingCategoriesA"
  ],
  "WinSATAPI.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WinSCard.dll": [
    "SCardCancel",
    "SCardIntroduceReaderA",
    "SCardEndTransaction",
    "SCardListInterfacesA",
    "SCardLocateCardsW",
    "SCardSetCardTypeProviderNameW",
    "SCardConnectW",
    "SCardSetCardTypeProviderNameA",
    "SCardTransmit",
    "SCardIsValidContext",
    "SCardListReaderGroupsA",
    "SCardRemoveReaderFromGroupA",
    "SCardForgetCardTypeA",
    "SCardReadCacheW",
    "SCardGetCardTypeProviderNameA",
    "SCardEstablishContext",
    "SCardIntroduceCardTypeW",
    "SCardGetProviderIdA",
    "SCardWriteCacheW",
    "SCardAddReaderToGroupW",
    "SCardSetAttrib",
    "SCardGetCardTypeProviderNameW",
    "SCardListInterfacesW",
    "SCardListCardsA",
    "SCardStatusW",
    "SCardAccessNewReaderEvent",
    "SCardLocateCardsByATRA",
    "SCardReleaseNewReaderEvent",
    "SCardLocateCardsByATRW",
    "SCardGetStatusChangeA",
    "SCardListCardsW",
    "SCardIntroduceReaderGroupW",
    "SCardReleaseStartedEvent",
    "SCardLocateCardsA",
    "SCardIntroduceReaderW",
    "SCardIntroduceCardTypeA",
    "SCardIntroduceReaderGroupA",
    "SCardForgetReaderA",
    "SCardWriteCacheA",
    "SCardForgetReaderGroupA",
    "SCardReleaseAllEvents",
    "SCardAccessStartedEvent",
    "SCardForgetCardTypeW",
    "SCardListReadersW",
    "ClassInstall32",
    "g_rgSCardT0Pci",
    "g_rgSCardT1Pci",
    "SCardConnectA",
    "SCardAddReaderToGroupA",
    "SCardGetProviderIdW",
    "SCardControl",
    "SCardListReaderGroupsW",
    "SCardForgetReaderGroupW",
    "g_rgSCardRawPci",
    "SCardForgetReaderW",
    "SCardDisconnect",
    "SCardGetStatusChangeW",
    "SCardFreeMemory",
    "SCardReadCacheA",
    "SCardGetAttrib",
    "SCardStatusA",
    "SCardGetTransmitCount",
    "SCardBeginTransaction",
    "SCardReconnect",
    "SCardListReadersA",
    "SCardRemoveReaderFromGroupW",
    "SCardReleaseContext",
    "SCardState"
  ],
  "WinSync.dll": "No exports",
  "WinSyncMetastore.dll": "No exports",
  "WinSyncProviders.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WindowsCodecs.dll": [
    "IWICBitmapFrameEncode_SetThumbnail_Proxy",
    "IWICPixelFormatInfo_GetChannelMask_Proxy",
    "IWICBitmapSource_GetPixelFormat_Proxy",
    "IWICBitmapFlipRotator_Initialize_Proxy",
    "IWICBitmapFrameEncode_SetResolution_Proxy",
    "IWICBitmap_SetPalette_Proxy",
    "IWICMetadataQueryWriter_RemoveMetadataByName_Proxy",
    "IWICBitmapCodecInfo_DoesSupportAnimation_Proxy",
    "IWICMetadataQueryReader_GetLocation_Proxy",
    "IWICMetadataBlockReader_GetReaderByIndex_Proxy",
    "IWICBitmapFrameDecode_GetThumbnail_Proxy",
    "IWICBitmapDecoder_GetMetadataQueryReader_Proxy",
    "IWICImagingFactory_CreateEncoder_Proxy",
    "IWICBitmapDecoder_GetFrameCount_Proxy",
    "IWICMetadataQueryReader_GetEnumerator_Proxy",
    "IWICPalette_InitializeFromBitmap_Proxy",
    "IEnumString_Reset_WIC_Proxy",
    "IWICBitmapCodecInfo_GetContainerFormat_Proxy",
    "IWICBitmapSource_CopyPalette_Proxy",
    "IWICBitmapEncoder_GetMetadataQueryWriter_Proxy",
    "IWICImagingFactory_CreateDecoderFromFilename_Proxy",
    "IWICImagingFactory_CreateComponentInfo_Proxy",
    "IWICImagingFactory_CreateBitmapFromMemory_Proxy",
    "IWICBitmapCodecInfo_GetDeviceManufacturer_Proxy",
    "IWICBitmapDecoder_GetThumbnail_Proxy",
    "IWICPixelFormatInfo_GetChannelCount_Proxy",
    "IWICImagingFactory_CreateFormatConverter_Proxy",
    "IWICBitmapFrameEncode_Initialize_Proxy",
    "WICSetEncoderFormat_Proxy",
    "IWICBitmapFrameDecode_GetMetadataQueryReader_Proxy",
    "IWICComponentInfo_GetCLSID_Proxy",
    "IWICFastMetadataEncoder_GetMetadataQueryWriter_Proxy",
    "IWICStream_InitializeFromMemory_Proxy",
    "IWICImagingFactory_CreateBitmapFromHBITMAP_Proxy",
    "IWICBitmapSource_GetResolution_Proxy",
    "IWICBitmapLock_GetDataPointer_STA_Proxy",
    "IWICBitmapEncoder_SetThumbnail_Proxy",
    "IWICBitmapCodecInfo_GetDeviceModels_Proxy",
    "IWICPalette_GetType_Proxy",
    "WICSerializeMetadataContent",
    "IWICBitmapScaler_Initialize_Proxy",
    "IWICBitmapCodecInfo_GetFileExtensions_Proxy",
    "IWICBitmap_SetResolution_Proxy",
    "IWICComponentFactory_CreateMetadataWriterFromReader_Proxy",
    "IWICComponentInfo_GetVersion_Proxy",
    "IWICImagingFactory_CreatePalette_Proxy",
    "IWICBitmapFrameEncode_GetMetadataQueryWriter_Proxy",
    "IWICFormatConverter_Initialize_Proxy",
    "IWICMetadataQueryReader_GetContainerFormat_Proxy",
    "DllGetClassObject",
    "IWICColorContext_InitializeFromMemory_Proxy",
    "IWICPalette_InitializePredefined_Proxy",
    "IWICBitmapEncoder_CreateNewFrame_Proxy",
    "IWICBitmapDecoder_GetDecoderInfo_Proxy",
    "IWICPalette_HasAlpha_Proxy",
    "IWICBitmapCodecInfo_DoesSupportMultiframe_Proxy",
    "IWICBitmapFrameEncode_WriteSource_Proxy",
    "IWICMetadataBlockReader_GetCount_Proxy",
    "IWICPalette_InitializeCustom_Proxy",
    "IWICStream_InitializeFromIStream_Proxy",
    "IWICBitmapEncoder_SetPalette_Proxy",
    "IWICBitmap_Lock_Proxy",
    "IEnumString_Next_WIC_Proxy",
    "IWICBitmapEncoder_Commit_Proxy",
    "IWICComponentInfo_GetAuthor_Proxy",
    "IWICBitmapFrameDecode_GetColorContexts_Proxy",
    "IWICBitmapDecoder_GetFrame_Proxy",
    "IWICPalette_GetColors_Proxy",
    "IWICImagingFactory_CreateBitmapFromSource_Proxy",
    "IWICBitmapFrameEncode_Commit_Proxy",
    "IWICBitmapCodecInfo_GetMimeTypes_Proxy",
    "IWICBitmapFrameEncode_SetSize_Proxy",
    "WICMatchMetadataContent",
    "IWICBitmapFrameEncode_SetColorContexts_Proxy",
    "IWICImagingFactory_CreateQueryWriterFromReader_Proxy",
    "IWICBitmapLock_GetStride_Proxy",
    "IWICBitmapCodecInfo_DoesSupportLossless_Proxy",
    "IWICComponentFactory_CreateQueryWriterFromBlockWriter_Proxy",
    "WICMapShortNameToGuid",
    "IWICPalette_InitializeFromPalette_Proxy",
    "IWICImagingFactory_CreateBitmapFromHICON_Proxy",
    "WICMapSchemaToName",
    "IWICImagingFactory_CreateBitmapFlipRotator_Proxy",
    "IWICMetadataQueryReader_GetMetadataByName_Proxy",
    "WICMapGuidToShortName",
    "IPropertyBag2_Write_Proxy",
    "IWICImagingFactory_CreateFastMetadataEncoderFromDecoder_Proxy",
    "IWICImagingFactory_CreateBitmapScaler_Proxy",
    "WICCreateBitmapFromSection",
    "WICConvertBitmapSource",
    "IWICBitmapEncoder_Initialize_Proxy",
    "IWICFastMetadataEncoder_Commit_Proxy",
    "IWICBitmapDecoder_GetPreview_Proxy",
    "IWICImagingFactory_CreateDecoderFromFileHandle_Proxy",
    "IWICBitmapClipper_Initialize_Proxy",
    "IWICBitmapDecoder_GetColorContexts_Proxy",
    "IWICImagingFactory_CreateStream_Proxy",
    "IWICBitmapSource_CopyPixels_Proxy",
    "IWICImagingFactory_CreateBitmapClipper_Proxy",
    "IWICImagingFactory_CreateBitmap_Proxy",
    "IWICComponentInfo_GetSpecVersion_Proxy",
    "WICCreateBitmapFromSectionEx",
    "WICCreateColorContext_Proxy",
    "WICGetMetadataContentSize",
    "IWICMetadataQueryWriter_SetMetadataByName_Proxy",
    "IWICComponentInfo_GetFriendlyName_Proxy",
    "IWICImagingFactory_CreateQueryWriter_Proxy",
    "IWICImagingFactory_CreateDecoderFromStream_Proxy",
    "WICCreateImagingFactory_Proxy",
    "IWICBitmapDecoder_CopyPalette_Proxy",
    "IWICBitmapSource_GetSize_Proxy",
    "IWICPixelFormatInfo_GetBitsPerPixel_Proxy",
    "IWICPalette_GetColorCount_Proxy",
    "IWICBitmapEncoder_GetEncoderInfo_Proxy",
    "IWICImagingFactory_CreateFastMetadataEncoderFromFrameDecode_Proxy"
  ],
  "WindowsCodecsExt.dll": [
    "WICCreateColorTransform_Proxy",
    "DllGetClassObject",
    "IWICColorTransform_Initialize_Proxy"
  ],
  "WlS0WndH.dll": [
    "Session0ViewerWindowProcHook"
  ],
  "WlanMM.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "StartDiagnosticsW",
    "DllRegisterServer"
  ],
  "Wldap32.dll": [
    "ldap_count_values_len",
    "ldap_get_next_page",
    "ldap_explode_dnA",
    "ldap_delete_ext_sA",
    "ldap_rename_extW",
    "ldap_search_init_pageA",
    "ldap_parse_vlv_controlW",
    "ldap_controls_freeA",
    "ldap_extended_operation",
    "ldap_first_entry",
    "ldap_rename_extA",
    "ldap_compare_extA",
    "ldap_search_ext_sW",
    "ldap_search_ext",
    "ldap_compare_sW",
    "ldap_check_filterA",
    "ldap_parse_page_controlA",
    "ber_bvdup",
    "ldap_bind",
    "ldap_get_valuesW",
    "ldap_modify_extW",
    "ldap_rename_ext_s",
    "ldap_search_extW",
    "ldap_escape_filter_elementA",
    "ldap_delete_s",
    "ldap_set_dbg_flags",
    "ldap_init",
    "ldap_abandon",
    "ldap_delete_ext_sW",
    "ldap_first_reference",
    "ldap_modrdn2_s",
    "ldap_get_paged_count",
    "ldap_add_extA",
    "ldap_parse_result",
    "ldap_extended_operation_sA",
    "ldap_add_s",
    "ldap_parse_referenceA",
    "ldap_err2string",
    "ldap_extended_operation_sW",
    "ldap_add_ext_s",
    "ldap_modifyA",
    "ldap_compare_ext",
    "ldap_add_sA",
    "ldap_modrdn_sA",
    "ldap_modify_s",
    "ldap_bindW",
    "ldap_modify_ext",
    "ldap_add_extW",
    "ldap_rename_ext",
    "ldap_count_entries",
    "ldap_rename_ext_sA",
    "ldap_search_ext_s",
    "ldap_bindA",
    "ldap_simple_bind_sA",
    "ldap_modrdnA",
    "ldap_compare_extW",
    "ldap_memfreeW",
    "ldap_stop_tls_s",
    "ldap_value_freeW",
    "ldap_modrdn",
    "LdapUTF8ToUnicode",
    "ldap_cleanup",
    "ldap_conn_from_msg",
    "ldap_result2error",
    "ldap_search",
    "LdapUnicodeToUTF8",
    "ldap_get_dnA",
    "ldap_modrdn_sW",
    "ldap_count_valuesW",
    "ldap_get_values_lenW",
    "ldap_search_abandon_page",
    "ldap_compare_s",
    "ldap_delete_sA",
    "ldap_simple_bind_sW",
    "ldap_value_free",
    "ldap_dn2ufn",
    "ldap_bind_s",
    "ldap_modrdn_s",
    "ldap_search_sA",
    "ldap_start_tls_sA",
    "ldap_deleteW",
    "ldap_initW",
    "ldap_create_page_control",
    "ldap_modify_sW",
    "ldap_start_tls_sW",
    "ldap_value_freeA",
    "ldap_next_attribute",
    "ldap_modrdn2A",
    "ldap_modrdn2W",
    "ldap_sslinit",
    "ldap_msgfree",
    "ldap_set_dbg_routine",
    "ldap_search_stW",
    "ldap_count_valuesA",
    "ldap_create_page_controlW",
    "ldap_search_st",
    "ldap_check_filterW",
    "ldap_memfreeA",
    "ldap_extended_operationA",
    "ldap_free_controlsA",
    "ldap_dn2ufnW",
    "ldap_delete",
    "ldap_add_sW",
    "ber_init",
    "ldap_count_values",
    "ldap_ufn2dn",
    "ldap_create_sort_control",
    "ldap_sasl_bindA",
    "ldap_ufn2dnA",
    "ber_flatten",
    "ldap_compare_ext_sW",
    "ldap_search_s",
    "ldap_get_values_lenA",
    "ldap_add_ext_sA",
    "ldap_create_sort_controlW",
    "ldap_add_ext",
    "ldap_addA",
    "ldap_sasl_bindW",
    "ldap_compare_ext_sA",
    "ldap_searchA",
    "ldap_parse_resultW",
    "ldap_modrdn2_sW",
    "ldap_parse_resultA",
    "ldap_search_init_page",
    "ldap_modifyW",
    "ber_peek_tag",
    "ldap_delete_sW",
    "ldap_ufn2dnW",
    "ldap_parse_sort_controlA",
    "ldap_unbind",
    "ldap_set_option",
    "ldap_startup",
    "ldap_parse_vlv_controlA",
    "ldap_modify_ext_sA",
    "ldap_unbind_s",
    "ldap_control_freeA",
    "ldap_bind_sW",
    "ldap_first_attributeA",
    "ldap_explode_dnW",
    "ldap_sslinitW",
    "ber_scanf",
    "ldap_err2stringW",
    "ldap_create_sort_controlA",
    "ldap_search_stA",
    "ldap_parse_page_control",
    "ldap_control_free",
    "ldap_delete_extA",
    "ber_free",
    "ldap_compare_ext_s",
    "ldap_add_ext_sW",
    "ldap_count_references",
    "ldap_connect",
    "cldap_openW",
    "ldap_free_controlsW",
    "ber_bvecfree",
    "ldap_rename_ext_sW",
    "ldap_result",
    "ber_alloc_t",
    "ldap_compareW",
    "ldap_simple_bindW",
    "ldap_controls_freeW",
    "ldap_set_optionW",
    "ldap_parse_extended_resultW",
    "ldap_modify_extA",
    "ldap_first_attribute",
    "ldap_search_sW",
    "cldap_openA",
    "ldap_parse_sort_control",
    "ldap_bind_sA",
    "ldap_get_option",
    "ldap_parse_sort_controlW",
    "ldap_parse_page_controlW",
    "ldap_get_dnW",
    "ldap_parse_referenceW",
    "ber_printf",
    "ldap_searchW",
    "ldap_delete_ext",
    "ldap_get_next_page_s",
    "ldap_search_init_pageW",
    "ldap_escape_filter_element",
    "ldap_openA",
    "ldap_explode_dn",
    "ldap_simple_bind_s",
    "ldap_free_controls",
    "ldap_set_optionA",
    "ldap_addW",
    "ldap_create_vlv_controlW",
    "ldap_get_dn",
    "ldap_compareA",
    "ldap_add",
    "ldap_modrdn2_sA",
    "ldap_sasl_bind_sW",
    "ldap_compare_sA",
    "ldap_get_values_len",
    "ldap_extended_operationW",
    "ldap_perror",
    "ldap_modrdnW",
    "ldap_value_free_len",
    "ldap_modify",
    "ldap_parse_extended_resultA",
    "ldap_get_valuesA",
    "ldap_search_extA",
    "ber_skip_tag",
    "ldap_next_attributeA",
    "ldap_err2stringA",
    "ldap_open",
    "ldap_next_reference",
    "ldap_modify_ext_s",
    "ldap_sslinitA",
    "ldap_delete_ext_s",
    "ldap_modify_sA",
    "ber_next_element",
    "ldap_encode_sort_controlW",
    "ldap_escape_filter_elementW",
    "ldap_modify_ext_sW",
    "ber_bvfree",
    "ldap_controls_free",
    "LdapGetLastError",
    "ldap_create_vlv_controlA",
    "ldap_close_extended_op",
    "cldap_open",
    "ldap_next_attributeW",
    "ldap_parse_reference",
    "ldap_initA",
    "ldap_control_freeW",
    "ldap_delete_extW",
    "ldap_next_entry",
    "ldap_get_values",
    "LdapMapErrorToWin32",
    "ldap_memfree",
    "ldap_compare",
    "ldap_first_attributeW",
    "ldap_get_optionA",
    "ldap_dn2ufnA",
    "ldap_openW",
    "ldap_simple_bind",
    "ldap_get_optionW",
    "ldap_sasl_bind_sA",
    "ldap_encode_sort_controlA",
    "ldap_deleteA",
    "ber_first_element",
    "ldap_modrdn2",
    "ldap_simple_bindA",
    "ldap_search_ext_sA",
    "ldap_create_page_controlA"
  ],
  "WmpDui.dll": [
    "RegisterGadgetMessage",
    "DUserBuildGadget",
    "GetGadgetProperty",
    "SetGadgetFocusEx",
    "AutoTrace",
    "DUserFindClass",
    "GetStdColorF",
    "SetGadgetFillF",
    "SetGadgetRect",
    "RemoveGadgetMessageHandler",
    "DUserSendMethod",
    "DUserGetScalePRID",
    "GetGadgetBufferInfo",
    "SetGadgetRotation",
    "GetDUserModule",
    "FindGadgetFromPoint",
    "SetGadgetStyle",
    "DUserGetAlphaPRID",
    "SetGadgetMessageFilter",
    "SetGadgetScale",
    "RegisterGadgetProperty",
    "UtilGetColor",
    "GetGadgetSize",
    "SetGadgetFillI",
    "GetGadgetRotation",
    "GetStdColorI",
    "IsInsideContext",
    "BuildAnimation",
    "WaitMessageEx",
    "DUserPostMethod",
    "DUserCastHandle",
    "GetGadget",
    "BuildInterpolation",
    "GetGadgetFocus",
    "UnregisterGadgetMessage",
    "GetActionTimeslice",
    "DeleteHandle",
    "GetGadgetRgn",
    "SetGadgetFocus",
    "DUserCastClass",
    "DisableContainerHwnd",
    "SetActionTimeslice",
    "IsGadgetParentChainStyle",
    "GetGadgetRect",
    "MapGadgetPoints",
    "GetStdColorPenF",
    "DUserRegisterStub",
    "UtilDrawBlendRect",
    "RemoveGadgetProperty",
    "GetStdColorBrushI",
    "PeekMessageExA",
    "SetGadgetParent",
    "SetGadgetBufferInfo",
    "GetGadgetScale",
    "GetMessageExA",
    "DUserPostEvent",
    "LookupGadgetTicket",
    "InitGadgetComponent",
    "ForwardGadgetMessage",
    "GetDebug",
    "GetGadgetCenterPoint",
    "UnregisterGadgetMessageString",
    "AddGadgetMessageHandler",
    "DUserGetRectPRID",
    "GetStdColorName",
    "FindGadgetMessages",
    "UtilBuildFont",
    "GetMessageExW",
    "DllMain",
    "InvalidateGadget",
    "SetGadgetCenterPoint",
    "DUserSendEvent",
    "DUserFlushDeferredMessages",
    "DUserFlushMessages",
    "DUserGetRotatePRID",
    "AttachWndProcA",
    "GetStdPalette",
    "GetGadgetTicket",
    "SetGadgetProperty",
    "UnregisterGadgetProperty",
    "DUserDeleteGadget",
    "GetStdColorBrushF",
    "IsStartDelete",
    "BuildDropTarget",
    "InitGadgets",
    "DUserRegisterSuper",
    "GetGadgetStyle",
    "PeekMessageExW",
    "AttachWndProcW",
    "EnumGadgets",
    "UtilDrawOutlineRect",
    "GetGadgetMessageFilter",
    "CreateAction",
    "DUserStopAnimation",
    "DUserCastDirect",
    "DrawGadgetTree",
    "GetGadgetRootInfo",
    "SetGadgetRootInfo",
    "DUserGetGutsData",
    "RegisterGadgetMessageString",
    "DUserInstanceOf",
    "GetGadgetAnimation",
    "FireGadgetMessages",
    "GetStdColorPenI",
    "CreateGadget",
    "DUserRegisterGuts",
    "UtilSetBackground",
    "FindStdColor",
    "SetGadgetOrder",
    "DetachWndProc"
  ],
  "Wpc.dll": [
    "ApplyParentalControlsW",
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "WsmAuto.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "WsmRes.dll": "No exports",
  "WsmSvc.dll": [
    "FwXmlCompareName",
    "FwXmlIsEmpty",
    "WSManGetInternalEx",
    "WSManCloseOperation",
    "WSManPluginObjectAndBookmarkResult",
    "WSManGetInternal",
    "FwXmlFindChildElement",
    "WSManProvInvoke",
    "WSManGetErrorMessage",
    "WSManInitialize",
    "public: static unsigned short * __stdcall WSManMemory::AllocBstr(unsigned short const *,int,class TestSystem::CallSite const &)",
    "WSManGetSessionOptionAsDword",
    "FwXmlGetSimpleContentEx",
    "FwXmlGetBooleanValue",
    "WSManPluginStartup",
    "WSManPutInternalEx",
    "WSManEncodeObjectEx",
    "public: static void * __stdcall WSManMemory::GetHeap(void)",
    "FwXmlNumChildrenWithName",
    "WSManCloseEnumeratorHandle",
    "WSManConstructError",
    "FwXmlGetElementNamespacePrefix",
    "public: unsigned long __thiscall CWSManEnumerator::AddObject(struct WSMAN_OBJECT *,struct WSMAN_OBJECT *)",
    "FwXmlGetNamespaceForPrefix",
    "WSManProvEnumerate",
    "public: unsigned long __thiscall CWSManEnumerator::GetNext(struct WSMAN_OBJECT * *,int)",
    "FwXmlUpdatePrefixes",
    "FwXmlGetEntryNameEx",
    "FwXmlIsSimpleContent",
    "WSManProvCreate",
    "WSManDeleteInternal",
    "SetServiceSecurity",
    "WSManEnumerateInternalEx",
    "FwXmlGetAttributeValueDWord",
    "WSManAddSubscriptionManagerInternal",
    "WSManEnumeratorNextObject",
    "FwXmlGetAttributeValue",
    "WSManPullEvents",
    "StartSoapProcessor",
    "WSManRemoveSubscriptionManagerInternal",
    "CreateProvHost",
    "public: int __thiscall CWSManEnumerator::GetTotalObjectByteSize(unsigned long *)",
    "public: unsigned long __thiscall CWSManEnumerator::AddEvent(struct WSMAN_OBJECT *,struct WSMAN_OBJECT *)",
    "WSManEncodeObject",
    "public: unsigned long __thiscall CWSManEnumerator::Close(void)",
    "FwGetParsedDocument",
    "public: static void * __stdcall WSManMemory::ReAlloc(void *,unsigned int,class TestSystem::CallSite const &,enum TestSystem::Mode)",
    "FwXmlParseText",
    "WSManCloseSession",
    "WSManPluginShutdown",
    "FwIsXmlEscapedProperly",
    "FwGetRootElement",
    "FwXmlIsNull",
    "WSManCreateSessionInternal",
    "WSManDeliverEndSubscriptionNotification",
    "FwXmlNumAttributes",
    "FwXmlCompareAttributeName",
    "FwXmlFindChildElementEx",
    "WSManAckEvents",
    "FwXmlGetAttribute",
    "FwXmlIsMustUnderstand",
    "FwXmlCompareElementNameSpace",
    "WSManGetSessionOptionAsString",
    "WSManPluginOperationComplete",
    "FwXmlGetBuffer",
    "WSManCloseEnumerationHandle",
    "WSManEnumeratorObjectCount",
    "WSManProvGet",
    "WSManCreatePullSubscription",
    "FwXmlIsSimpleContentOrEmpty",
    "WSManRunShellCommand",
    "WSManShellProvEndEnumerate",
    "EnumServiceUserResources",
    "WSManEnumeratorAddObject",
    "WSManCloseSessionHandle",
    "WSManCreateSession",
    "FwXmlGetElementNameEx",
    "WSManShellProvPullEnumerate",
    "ServiceMain",
    "public: static unsigned short * __stdcall WSManMemory::AllocBstrLen(unsigned short const *,unsigned int,int,class TestSystem::CallSite const &)",
    "public: unsigned long __thiscall CWSManEnumerator::Initialize(void *)",
    "FwXmlCompareAttributeNameEx",
    "SvchostPushServiceGlobals",
    "WSManPluginReportContext",
    "public: unsigned long __thiscall CWSManEnumerator::Initialize(unsigned long,unsigned long,unsigned long,unsigned long)",
    "FwXmlCompareElementNameEx",
    "FwXmlGetElementNamespaceUrl",
    "FwXmlGetChild",
    "WSManInvokeInternalEx",
    "WSManPluginGetOperationParameters",
    "FwXmlGetReferenceXmlFromElement",
    "FwXmlGetElementName",
    "WSManDecodeObject",
    "WSManCreateShell",
    "FwXmlGetAttributeNamespacePrefix",
    "StopSoapProcessor",
    "FwXmlHasText",
    "FwXmlIsTrueValue",
    "WSManCloseSubscriptionHandle",
    "WSManEncodeObjectInternal",
    "FwXmlDecodeXmlEscapes",
    "WSManDeinitialize",
    "WSManIdentifyInternal",
    "WSManPutInternal",
    "WSManDeleteInternalEx",
    "FwXmlGetSimpleContent",
    "FwXmlCompareElementName",
    "WSManPluginObjectAndEprResult",
    "SubscriptionsProvPullEnumerate",
    "WSManReceiveShellOutput",
    "SubscriptionsProvEnumerate",
    "WSManDeliverEvent",
    "WSManCreateInternalEx",
    "WSManPluginAuthzUserComplete",
    "FwXmlCompareElementNameLen",
    "FwXmlGetAttributeNameEx",
    "WSManSetSessionOption",
    "WSManClosePublisherHandle",
    "WSManSignalShell",
    "WSManCloseObjectHandle",
    "FwXmlGetNormalizedString",
    "WSManPluginFreeRequestDetails",
    "FwXmlParsePrefixedXML",
    "public: __thiscall CWSManEnumerator::CWSManEnumerator(void)",
    "WSManPluginAuthzQueryQuotaComplete",
    "WSManEnumeratorBatchPolicyViolated",
    "FwXmlParserCreate",
    "WSManEnumerateInternal",
    "WSManPluginObjectResult",
    "WSManProvDelete",
    "WSManProvEndEnumerate",
    "public: virtual __thiscall CWSManEnumerator::~CWSManEnumerator(void)",
    "WSManCloseShell",
    "WSManPluginAuthzOperationComplete",
    "SubscriptionsProvEndEnumerate",
    "public: static void __stdcall WSManMemory::Free(void *,class TestSystem::CallSite const &)",
    "WSManSendShellInput",
    "WSManCloseCommand",
    "WSManCreateInternal",
    "WSManInvokeInternal",
    "GetServiceSecurity",
    "FwXmlEncodeXmlEscapes",
    "WSManPull",
    "FwXmlFindAttributeEx",
    "FwXmlGetSimpleContentEx2",
    "FwXmlNumChildren",
    "WSManEnumeratorAddEvent",
    "RegisterModule",
    "WSManCreatePushSubscription",
    "FwXmlCloseParser",
    "public: void __thiscall CWSManEnumerator::Freeze(void)",
    "FwXmlCreateXmlFromElement",
    "FwXmlFindAttribute",
    "FwXmlNumConsecutiveChildrenWithName",
    "WSManCreateEnumeratorInternal",
    "WSManProvPullEnumerate",
    "WSManProvPut",
    "WSManPluginReceiveResult",
    "public: static void __stdcall WSManMemory::FreeBstr(unsigned short *,int,class TestSystem::CallSite const &)",
    "public: static void * __stdcall WSManMemory::Alloc(unsigned int,class TestSystem::CallSite const &,enum TestSystem::Mode)"
  ],
  "WsmWmiPl.dll": [
    "WSManProvEnumerate",
    "WSManPluginStartup",
    "WSManProvInvoke",
    "WSManProvEndEnumerate",
    "WSManProvGet",
    "WSManPluginShutdown",
    "WSManProvPullEnumerate",
    "WSManProvPut"
  ],
  "Wwanadvui.dll": [
    "DllCanUnloadNow",
    "DllMain",
    "DllGetClassObject",
    "DoModalPropSheet"
  ],
  "Wwanpref.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllMain"
  ],
  "w32time.dll": [
    "W32TimeQueryConfig",
    "W32TimeQueryNtpProviderConfiguration",
    "SvchostPushServiceGlobals",
    "W32TimeVerifyUnjoinConfig",
    "DllRegisterServer",
    "TimeProvCommand",
    "TimeProvClose",
    "DllUnregisterServer",
    "SvchostEntry_W32Time",
    "W32TimeQueryNTPProviderStatus",
    "W32TimeSetConfig",
    "W32TimeDeleteConfig",
    "W32TimeVerifyJoinConfig",
    "fnW32TmRegisterServiceCtrlHandlerEx",
    "W32TimeQueryHardwareProviderStatus",
    "W32TmServiceMain",
    "W32TimeLog",
    "W32TimeGetNetlogonServiceBits",
    "DllInstall",
    "TimeProvOpen",
    "W32TimeQueryConfiguration",
    "W32TimeQueryStatus",
    "fnW32TmSetServiceStatus",
    "W32TimeQuerySource",
    "W32TimeDcPromo",
    "W32TimeSyncNow",
    "fnW32TmI_ScSetServiceBits",
    "W32TimeBufferFree"
  ],
  "w32topl.dll": [
    "ToplEdgeDestroy",
    "ToplHeapInsert",
    "ToplGraphFree",
    "ToplVertexNumberOfOutEdges",
    "ToplAddEdgeToGraph",
    "ToplVertexGetOutEdge",
    "ToplEdgeAssociate",
    "ToplSTHeapCostReduced",
    "ToplVertexGetInEdge",
    "ToplGraphAddVertex",
    "ToplMakeGraphState",
    "ToplListCreate",
    "ToplFree",
    "ToplScheduleExportReadonly",
    "ToplListSetIter",
    "ToplDeleteGraphState",
    "ToplGraphFindEdgesForMST",
    "ToplGraphInit",
    "ToplScheduleMaxUnavailable",
    "ToplGraphMakeRing",
    "ToplScheduleCreate",
    "ToplScheduleValid",
    "ToplScheduleMerge",
    "ToplPScheduleValid",
    "ToplSetAllocator",
    "ToplDeleteSpanningTreeEdges",
    "ToplEdgeFree",
    "ToplListRemoveElem",
    "ToplDeleteComponents",
    "ToplScheduleIsEqual",
    "ToplGetSpanningTreeEdgesForVtx",
    "ToplIterGetObject",
    "ToplGraphSetVertexIter",
    "ToplScheduleImport",
    "ToplVertexNumberOfInEdges",
    "ToplEdgeSetVtx",
    "ToplListNumberOfElements",
    "ToplListFree",
    "ToplVertexSetParent",
    "ToplEdgeGetFromVertex",
    "ToplGraphCreate",
    "ToplHeapCreate",
    "ToplAddEdgeSetToGraph",
    "ToplListAddElem",
    "ToplIsToplException",
    "ToplGraphDestroy",
    "ToplEdgeSetFromVertex",
    "ToplScheduleCacheDestroy",
    "ToplVertexGetParent",
    "ToplEdgeSetToVertex",
    "ToplVertexCreate",
    "ToplSTHeapExtractMin",
    "ToplScheduleNumEntries",
    "ToplIterFree",
    "ToplEdgeSetWeight",
    "ToplEdgeCreate",
    "ToplVertexInit",
    "ToplScheduleCacheCreate",
    "ToplVertexSetId",
    "ToplSTHeapAdd",
    "ToplEdgeInit",
    "ToplSTHeapInit",
    "ToplEdgeGetWeight",
    "ToplIterCreate",
    "ToplGetAlwaysSchedule",
    "ToplVertexDestroy",
    "ToplGraphNumberOfVertices",
    "ToplHeapDestroy",
    "ToplHeapIsElementOf",
    "ToplVertexGetId",
    "ToplHeapExtractMin",
    "ToplSTHeapDestroy",
    "ToplEdgeGetToVertex",
    "ToplScheduleDuration",
    "ToplVertexFree",
    "ToplIterAdvance",
    "ToplHeapIsEmpty",
    "ToplEdgeDisassociate",
    "ToplGraphRemoveVertex"
  ],
  "wavemsp.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wbemcomn.dll": [
    "public: static int __stdcall CWin32DefaultArena::WbemSysReAllocStringLen(unsigned short * *,unsigned short const *,unsigned int)",
    "public: __thiscall CDateTimeParser::CDateTimeParser(unsigned short const *)",
    "public: class C9XAce & __thiscall C9XAce::operator=(class C9XAce const &)",
    "public: int __thiscall CVar::ToSingleChar(void)",
    "protected: virtual class CExecRequest * __thiscall CExecQueue::SearchForSuitableRequest(class CExecQueue::CThreadRecord *)",
    "protected: int __thiscall CDateTimeParser::DateFormat3(unsigned short const *,int)",
    "public: void __thiscall CTextTemplate::SetTemplate(unsigned short const *)",
    "public: class CNtAcl * __thiscall CNtSecurityDescriptor::GetSacl(void)",
    "public: long __thiscall CVarVector::AccessRawArray(void * *)",
    "public: virtual long __stdcall CBuffer::Seek(union _LARGE_INTEGER,unsigned long,union _ULARGE_INTEGER *)",
    "public: struct tagVARIANT * __thiscall CVar::GetNewVariant(void)",
    "public: int __thiscall CWbemTime::SetDMTF(unsigned short const *)",
    "public: static void __stdcall CWbemInstallObject::SetRepositoryFolder(unsigned short const *)",
    "public: int __thiscall CWQLScanner::GetReferencedTables(class CWStringArray &)",
    "public: __thiscall CVar::CVar(short,int)",
    "public: class CQl1ParseSink & __thiscall CQl1ParseSink::operator=(class CQl1ParseSink const &)",
    "public: __thiscall CWQLScanner::~CWQLScanner(void)",
    "const CInstructionTest::`vftable'",
    "public: __thiscall CPropertyName::CPropertyName(void)",
    "public: static long __stdcall CMUILocale::_SetThreadPreferredUILanguages(unsigned long,unsigned short const *,unsigned long *)",
    "public: void __thiscall CExecQueue::Leave(void)",
    "public: __thiscall CHaltable::CHaltable(void)",
    "public: int __thiscall CNtAce::GetSid(class CNtSid &)",
    "public: virtual int __thiscall CWin32DefaultArena::Free(void *)",
    "public: int __thiscall CSafeArray::AddShort(short)",
    "private: long __thiscall CMUILocaleList::AddCulture(unsigned short const *,enum CMUILocale::LocaleType,unsigned long)",
    "protected: __thiscall CWbemInterval::CWbemInterval(unsigned long)",
    "protected: int __thiscall CAbstractQl1Parser::rel_operator(void)",
    "private: static class CCritSec CClientOpsNode::m_csGlobal",
    "protected: int __thiscall CDateTimeParser::DateFormat7(unsigned short const *,int)",
    "public: unsigned int __thiscall CDateTimeParser::GetMicroseconds(void)",
    "public: void __thiscall CMemoryLog::SetLogingEnabled(bool)",
    "public: int __thiscall CVar::Status(void)",
    "public: int __thiscall CNtAcl::ContainsSid(class CNtSid &,unsigned char &)",
    "public: __thiscall CExecRequest::CExecRequest(void)",
    "public: class CWbemCriticalSection & __thiscall CWbemCriticalSection::operator=(class CWbemCriticalSection const &)",
    "public: __thiscall CIdentityTest::~CIdentityTest(void)",
    "public: virtual __thiscall CExecRequest::~CExecRequest(void)",
    "public: static unsigned short const * __stdcall CWbemInstallObject::GetRepositoryFolder(void)",
    "public: int __thiscall CSafeArray::SetFloatAt(int,float)",
    "public: static void * __stdcall CMUILocale::_Alloc(unsigned int)",
    "int __stdcall WbemSetMachineShutdown(int)",
    "private: long __thiscall CMUILocaleList::AddLocale(unsigned short const *,enum CMUILocale::LocaleType,unsigned long)",
    "protected: int __thiscall CDateTimeParser::DateFormat4(unsigned short const *,int)",
    "private: unsigned short * __thiscall CTextTemplate::ReturnEscapedReturns(unsigned short *)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::SetCountQuery(void)",
    "public: int __thiscall CWbemTime::IsZero(void)const",
    "public: void __thiscall CExecQueue::Enter(void)",
    "protected: int __thiscall CAbstractQl1Parser::trailing_prop_expr(void)",
    "public: void __thiscall CLockableFlexArray::Lock(void)",
    "public: virtual unsigned long __thiscall C9XAce::GetSerializedSize(void)",
    "public: int __thiscall CWQLScanner::GetReferencedAliases(class CWStringArray &)",
    "public: __thiscall WString::WString(unsigned short *,int)",
    "public: static void __stdcall CWStringArray::Intersection(class CWStringArray &,class CWStringArray &,class CWStringArray &)",
    "public: void * __thiscall CClientOpsNode::GetInfo(void)",
    "public: int __thiscall CNtAcl::GetNumAces(void)",
    "public: unsigned short * __thiscall CSafeArray::GetBSTRAt(int)",
    "public: class CFlexArray const * __thiscall CWQLScanner::GetSelectedColumns(void)",
    "public: static unsigned short * __stdcall CWin32DefaultArena::WbemSysAllocStringLen(unsigned short const *,unsigned int)",
    "public: __thiscall WString::WString(class WString const &)",
    "public: int __thiscall CVarVector::Size(void)",
    "public: class CMRCIControl & __thiscall CMRCIControl::operator=(class CMRCIControl const &)",
    "protected: int __thiscall CAbstractQl1Parser::is_operator(void)",
    "public: class CVar & __thiscall CVarVector::operator[](int)",
    "protected: int __thiscall CEventLog::SearchForRecord(class CEventLogRecord *)",
    "long __stdcall RemoveFileFromAutoRecoverFolder(unsigned short const *)",
    "protected: int __thiscall CDateTimeParser::TimeFormat6(unsigned short const *,int)",
    "void __stdcall _DoTraceHRFailure_(long)",
    "public: static unsigned short * __stdcall CVar::TypeToText(int)",
    "public: static void __stdcall CWbemInstallObject::SetBinaryPath(unsigned short const *)",
    "public: short __thiscall CSafeArray::GetShortAt(int)",
    "public: static int __stdcall CWin32DefaultArena::WbemOutOfMemory(void)",
    "public: __thiscall WString::operator unsigned short *(void)",
    "public: __thiscall CQl1ParseSink::CQl1ParseSink(class CQl1ParseSink const &)",
    "public: struct IDispatch * __thiscall CVar::GetDispatch(void)",
    "public: int __thiscall CWStringArray::Add(unsigned short const *)",
    "public: unsigned char __thiscall CSafeArray::GetByteAt(int)",
    "public: __thiscall CVar::CVar(char)",
    "int __stdcall _IsValidElementName(unsigned short const *,unsigned long,unsigned short const *)",
    "public: static long __stdcall CMUILocale::ms_XXX_Locale_To_LCID(unsigned short const *,unsigned long *)",
    "public: void * & __thiscall CFlexArray::operator[](int)",
    "public: __thiscall CInsertionString::CInsertionString(char const *)",
    "public: void __thiscall CUnk::`default constructor closure'(void)",
    "protected: void __thiscall CDateTimeParser::ResetDateTime(int)",
    "public: void * const * __thiscall CSmallArrayBlob::GetArrayPtr(void)const",
    "unsigned short * __stdcall ExtractMachineName(unsigned short *)",
    "public: int __thiscall CNtSecurityDescriptor::IsValid(void)",
    "protected: int __thiscall CDateTimeParser::IsValidSecondNumber(unsigned short *,unsigned short const *)",
    "public: long __thiscall CWbemCriticalSection::GetLockCount(void)",
    "public: int __thiscall CVar::GetOleType(void)",
    "public: void __thiscall CClientOpsNode::Lock(void)",
    "public: short __thiscall CVar::GetBool(void)",
    "public: class CNtAce * __thiscall CNtAcl::GetAce(int)",
    "public: class CDMTFParser & __thiscall CDMTFParser::operator=(class CDMTFParser const &)",
    "private: void __thiscall CVar::Init(void)",
    "public: int __thiscall CWbemTime::operator>(class CWbemTime const &)const",
    "public: __thiscall CSafeArray::CSafeArray(struct tagSAFEARRAY *,int,int,int)",
    "public: static void __stdcall MD5::ContinueTransform(void *,unsigned int,unsigned char * const)",
    "private: static class CCritSec CMUILocale::m_csFunctionPointers",
    "public: int __thiscall CSafeArray::AddFloat(float)",
    "public: virtual void __thiscall CContainerControl::Release(struct IUnknown *)",
    "public: __thiscall CCritSec::CCritSec(void)",
    "public: unsigned long __thiscall CWbemInterval::GetMilliseconds(void)const",
    "struct tagBLOB __stdcall BlobCopy(struct tagBLOB const *)",
    "public: void __thiscall CBuffer::Reset(void)",
    "public: __thiscall CVar::CVar(struct tagBLOB *,int)",
    "public: int __thiscall CWbemTime::SetFileTime(struct _FILETIME const &)",
    "public: int __thiscall CNtSecurityDescriptor::SetDacl(class CNtAcl *)",
    "public: virtual __thiscall CAbstractQl1Parser::~CAbstractQl1Parser(void)",
    "public: __thiscall Registry::Registry(unsigned short const *,unsigned long)",
    "public: void __thiscall CStaticCritSec::Enter(void)",
    "public: int __thiscall CVarVector::Add(class CVar &)",
    "public: class CEnterWbemCriticalSection & __thiscall CEnterWbemCriticalSection::operator=(class CEnterWbemCriticalSection const &)",
    "public: __thiscall CStaticCritSec::~CStaticCritSec(void)",
    "public: static long __stdcall CPublishWMIOperationEvent::PublishProviderInfo(unsigned long,unsigned short *,unsigned short *,unsigned short *,unsigned short *)",
    "public: long __thiscall CInstructionQueue::WaitAndPeek(class CTimerInstruction * &,class CWbemTime &)",
    "public: static long __stdcall CMUILocale::LCID_To_ms_XXX_Format(unsigned long,unsigned short *,unsigned int)",
    "protected: int __thiscall CDateTimeParser::IsValidMonthString(unsigned short *,unsigned short const *,unsigned short * * const,unsigned short * * const)",
    "public: static long __stdcall CMUILocale::GetPreferredLanguages(unsigned short * *,unsigned long *)",
    "long __stdcall RegisterDllAppid(struct HINSTANCE__ *,struct _GUID,unsigned short *,unsigned short *,unsigned short *,unsigned short *)",
    "public: __thiscall CHaltable::CHaltable(class CHaltable const &)",
    "protected: void __thiscall CAbstractQl1Parser::AddAppropriateToken(struct _tag_WbemQl1Token const &)",
    "public: struct SZLess & __thiscall SZLess::operator=(struct SZLess const &)",
    "public: __thiscall CIdentityTest::CIdentityTest(class CIdentityTest const &)",
    "private: void __thiscall CBaseMrciCompression::mrci2outsingle(unsigned int)",
    "protected: class CSmallArrayBlob * __thiscall CSmallArrayBlob::ShrinkIfNeeded(void)",
    "public: class CSmallArrayBlob * __thiscall CSmallArrayBlob::SetAt(int,void *,void * *)",
    "public: virtual void __thiscall CExecRequest::DumpError(void)",
    "protected: virtual void __thiscall CExecQueue::LogError(class CExecRequest *,int)",
    "public: void __thiscall CVar::SetFileTime(struct _FILETIME *)",
    "public: int __thiscall CWbemInterval::operator>(class CWbemInterval)",
    "public: __thiscall CContainerControl::CContainerControl(class CContainerControl const &)",
    "protected: static unsigned long __stdcall CAbstractQl1Parser::TranslateIntrinsic(unsigned short const *)",
    "private: void __thiscall CBaseMrciCompression::mrci1outstring(unsigned int,unsigned int)",
    "public: __thiscall CBasicUnloadInstruction::CBasicUnloadInstruction(class CBasicUnloadInstruction const &)",
    "long __stdcall ComposeName(unsigned short *,unsigned short * *)",
    "void __stdcall SetWMITraceSession(void *)",
    "public: unsigned long __thiscall CNtSid::GetStatus(void)",
    "public: __thiscall C9XAce::C9XAce(unsigned long,unsigned long,unsigned long,unsigned short *)",
    "public: class CNtSid * __thiscall CNtSecurityDescriptor::GetGroup(void)",
    "public: class CNtSid & __thiscall CNtSid::operator=(class CNtSid const &)",
    "protected: int __thiscall CDateTimeParser::IsValidAmPmString(unsigned short *,unsigned short const *,unsigned short * * const)",
    "protected: virtual int __thiscall CExecQueue::Execute(class CExecQueue::CThreadRecord *)",
    "public: unsigned long __thiscall CExecQueue::GetSitoutPenalty(void)",
    "protected: int __thiscall CAbstractQl1Parser::opt_aggregation(void)",
    "public: double __thiscall CVar::GetDouble(void)",
    "public: static unsigned long __cdecl CWin32DefaultArena::WbemMemSize(void *)",
    "public: long __thiscall CSafeArray::GetLongAt(int)",
    "public: long __thiscall CHaltable::Halt(void)",
    "public: class CClientOpsNode * __thiscall CClientOpsNode::GetPrevious(void)",
    "protected: int __thiscall CDateTimeParser::TimeFormat9(unsigned short const *,int)",
    "public: class CCritSec & __thiscall CCritSec::operator=(class CCritSec const &)",
    "const CTimerGenerator::`vftable'",
    "public: virtual long __stdcall CBuffer::Clone(struct IStream * *)",
    "protected: int __thiscall CDateTimeParser::TimeFormat5(unsigned short const *,int)",
    "public: int __thiscall CFlexArray::Add(void *)",
    "private: void __thiscall CWQLScanner::ClearTokens(void)",
    "public: int __thiscall Registry::GetBinary(unsigned short const *,unsigned char * *,unsigned long *)",
    "public: class CMUILocale & __thiscall CMUILocale::operator=(class CMUILocale const &)",
    "public: class CLifeControl & __thiscall CLifeControl::operator=(class CLifeControl const &)",
    "public: int __thiscall CVar::SetBSTR(unsigned short *)",
    "protected: int __thiscall CAbstractQl1Parser::simple_expr(void)",
    "public: virtual unsigned long __stdcall CBuffer::AddRef(void)",
    "int __stdcall IsNetworkService(void *)",
    "public: class CAbstractQl1Parser & __thiscall CAbstractQl1Parser::operator=(class CAbstractQl1Parser const &)",
    "public: __thiscall CAbstractQl1Parser::CAbstractQl1Parser(class CGenLexSource *)",
    "public: __thiscall CNtSid::~CNtSid(void)",
    "public: static class CWbemTime __stdcall CWbemTime::GetZero(void)",
    "public: int __thiscall CAbstractQl1Parser::CurrentLine(void)",
    "public: unsigned short * __thiscall QL_LEVEL_1_TOKEN::GetText(void)",
    "public: virtual long __stdcall CBuffer::QueryInterface(struct _GUID const &,void * *)",
    "int __stdcall WinPEKey(void)",
    "public: int __thiscall Registry::SetMultiStr(unsigned short const *,unsigned short *,unsigned long)",
    "public: long __thiscall CMUILocaleList::Initialize(unsigned short *,bool)",
    "public: void __thiscall CVar::SetBool(short)",
    "public: int __thiscall CWbemTime::IsFinite(void)const",
    "public: class CInsertionString & __thiscall CInsertionString::operator=(class CInsertionString const &)",
    "public: void __thiscall CCheckedInCritSec::Enter(void)",
    "public: short __thiscall CSafeArray::GetBoolAt(int)",
    "protected: virtual int __thiscall CExecQueue::IsSuitableThread(class CExecQueue::CThreadRecord *,class CExecRequest *)",
    "private: void __thiscall CWQLScanner::ClearTableRefs(void)",
    "const CNtAce::`vftable'",
    "public: __thiscall CVar::operator unsigned long(void)",
    "protected: int __thiscall CAbstractQl1Parser::expr2(void)",
    "public: int __thiscall CWQLScanner::CountQuery(void)",
    "public: bool __thiscall CTraceSessionControl::IsEnabled(void)",
    "long __stdcall EnableAllPrivileges(unsigned long)",
    "public: __thiscall CTextTemplate::~CTextTemplate(void)",
    "public: unsigned long __thiscall CNtAce::GetSize(void)",
    "public: int __thiscall CSafeArray::SetShortAt(int,short)",
    "public: struct tagVARIANT __thiscall CSafeArray::GetVariantAt(int)",
    "public: static unsigned short const * __stdcall CWbemInstallObject::GetRegistryPathCIMOM(void)",
    "public: unsigned long __thiscall CTraceSessionControl::Enable(void)",
    "public: class CHaltable & __thiscall CHaltable::operator=(class CHaltable const &)",
    "private: static void * CMUILocale::m_fGetSystemDefaultLocaleName",
    "protected: int __thiscall CDateTimeParser::DateFormat13(unsigned short const *,unsigned short const *,int)",
    "private: void __thiscall WString::DeleteString(unsigned short *)",
    "private: union SA_ArrayScalar __thiscall CSafeArray::GetScalarAt(int)",
    "public: __thiscall CWStringArray::CWStringArray(int,int)",
    "protected: int __thiscall CDateTimeParser::DateFormat9(unsigned short const *,unsigned short const *,int)",
    "protected: virtual int __thiscall CExecQueue::IsSTA(void)",
    "public: virtual long __thiscall CLimitControl::AddMember(void)",
    "public: static void __stdcall CWbemInstallObject::SetOffline(bool)",
    "long __stdcall TestDirExistAndCreateWithSDIfNotThere(unsigned short *,unsigned short *)",
    "public: class CNtSecurity & __thiscall CNtSecurity::operator=(class CNtSecurity const &)",
    "public: void __thiscall CFlexQueue::`default constructor closure'(void)",
    "public: int __thiscall CWStringArray::FindStr(unsigned short const *,int)",
    "const CLimitControl::`vftable'",
    "public: unsigned long __thiscall CBuffer::GetSize(void)",
    "public: int __thiscall Registry::SetExpandStr(unsigned short const *,unsigned short const *)",
    "public: __thiscall CEventLog::CEventLog(class CEventLog const &)",
    "public: long __thiscall CWbemCriticalSection::GetRecursionCount(void)",
    "public: static long __stdcall CMUILocale::CheckLangNeutral(unsigned short const *,bool *)",
    "private: unsigned int __thiscall CBaseMrciCompression::getbits(unsigned int)",
    "public: long __thiscall CInstructionQueue::Change(class CTimerInstruction *,class CWbemTime)",
    "public: int __thiscall CVarVector::MakeOptimized(int,int,int)",
    "public: struct tagSAFEARRAY * __thiscall CSafeArray::GetArray(void)",
    "public: void __thiscall CVar::Empty(void)",
    "public: void __thiscall CMinMaxLimitControl::SetSleepAtMax(unsigned long)",
    "public: void __thiscall CVarVector::SetRawArrayBinding(int)",
    "public: void __thiscall CVar::SetVarVector(class CVarVector *,int)",
    "public: void __thiscall CExecRequest::SetPriority(long)",
    "public: void * __thiscall CVar::GetRawData(void)",
    "public: int __thiscall CSafeArray::GetActualVarType(unsigned short *)",
    "public: void __thiscall CWbemInterval::operator+=(class CWbemInterval)",
    "private: static void * CMUILocale::m_fSetThreadPreferredUILanguages",
    "public: class WString & __thiscall WString::operator=(unsigned short const *)",
    "public: __thiscall CLimitControl::CLimitControl(void)",
    "public: virtual int __thiscall CIdentityTest::operator()(class CTimerInstruction *)",
    "public: int __thiscall CVar::IsNull(void)",
    "public: __thiscall CVarVector::CVarVector(void)",
    "public: struct IUnknown * __thiscall CUnk::GetUnknown(void)",
    "public: __thiscall CInsertionString::CInsertionString(class CHex)",
    "public: void __thiscall CExecQueue::Shutdown(void)",
    "int __stdcall isunialpha(unsigned short)",
    "public: static void __stdcall CWbemInstallObject::Shutdown(void)",
    "unsigned long __stdcall WMIControlClientOpsCallback(unsigned __int64,unsigned char *,unsigned long *)",
    "protected: void __thiscall CPropertyName::EnsureAllocated(long)",
    "public: int __thiscall Registry::SetBinary(unsigned short const *,unsigned char *,unsigned long)",
    "public: virtual long __stdcall CBuffer::Commit(unsigned long)",
    "public: class CStaticCritSec & __thiscall CStaticCritSec::operator=(class CStaticCritSec const &)",
    "public: __thiscall CWbemCriticalSection::CWbemCriticalSection(void)",
    "public: int __thiscall CPersistentConfig::SetPersistentCfgValue(unsigned long,unsigned long)",
    "public: int __thiscall CVar::ChangeTypeTo(unsigned short)",
    "public: static unsigned long __stdcall CWbemInstallObject::ExpandEnvironmentStringsW(unsigned short const *,unsigned short *,unsigned long)",
    "public: unsigned long __thiscall CWMITraceSettings::GetAreaFlags(void)",
    "private: static void * CMUILocale::m_fGetLocaleInfoEx",
    "public: int __thiscall CFlexArray::EnsureExtent(int)",
    "public: __thiscall CDateTimeParser::~CDateTimeParser(void)",
    "public: __thiscall CLike::CLike(unsigned short const *,unsigned short)",
    "public: void __thiscall CVar::SetChar(char)",
    "public: long __thiscall CNtSecurityDescriptor::GetDacl(class CNtAcl * *)",
    "public: void __thiscall QL_LEVEL_1_RPN_EXPRESSION::AddToken(struct QL_LEVEL_1_TOKEN const &)",
    "public: class CVarVector & __thiscall CVarVector::operator=(class CVarVector &)",
    "public: void __thiscall CClientOpsNode::AddChild(class CClientOpsNode *)",
    "public: unsigned short * __thiscall CVar::GetBSTR(void)",
    "public: double __thiscall CSafeArray::GetDoubleAt(int)",
    "public: virtual unsigned long __thiscall CNtAce::GetSerializedSize(void)",
    "public: unsigned long __thiscall CWbemInterval::GetSeconds(void)const",
    "public: unsigned long __thiscall CNtAcl::GetStatus(void)",
    "public: static void __stdcall CWbemInstallObject::InitMap(void)",
    "public: void __thiscall CVar::FillVariant(struct tagVARIANT *,int)",
    "public: __thiscall CHex::operator long(void)",
    "public: virtual void __thiscall CContainerControl::AddRef(struct IUnknown *)",
    "protected: int __thiscall CAbstractQl1Parser::opt_where(void)",
    "public: int __thiscall CSafeArray::ElementSize(void)",
    "protected: int __thiscall CDateTimeParser::IsValidMinuteNumber(unsigned short *,unsigned short const *)",
    "int __stdcall IsLocalConnection(struct IUnknown *)",
    "const CContainerControl::`vftable'",
    "public: void * __thiscall CFlexArray::operator[](int)const",
    "public: class CVar & __thiscall CVar::operator=(class CVar const &)",
    "public: char * __thiscall CVar::GetLPSTR(void)",
    "public: virtual __thiscall CUnk::~CUnk(void)",
    "public: class WString & __thiscall WString::operator+=(class WString const &)",
    "public: long __thiscall CInstructionQueue::GetNumInstructions(void)",
    "public: class CLockableFlexArray & __thiscall CLockableFlexArray::operator=(class CLockableFlexArray &)",
    "public: unsigned char __thiscall CDateTimeParser::GetDay(void)",
    "public: virtual unsigned long __thiscall C9XAce::GetStatus(void)",
    "public: void __thiscall CFlexArray::Bind(class CFlexArray &)",
    "public: int __thiscall Registry::GetDWORDStr(unsigned short const *,unsigned long *)",
    "protected: int __thiscall CAbstractQl1Parser::aggregation_params(void)",
    "public: __thiscall CWQLScanner::CWQLScanner(class CGenLexSource *)",
    "protected: __thiscall CWbemTime::CWbemTime(__int64)",
    "public: static unsigned short const * __stdcall CWbemInstallObject::GetAutoRecoverFolder(void)",
    "public: __thiscall CTimerInstruction::CTimerInstruction(class CTimerInstruction const &)",
    "public: int __thiscall CWbemTime::SetSystemTime(struct _SYSTEMTIME const &)",
    "public: __thiscall CVar::operator struct _GUID *(void)",
    "public: struct QL_LEVEL_1_TOKEN & __thiscall QL_LEVEL_1_TOKEN::operator=(struct QL_LEVEL_1_TOKEN const &)",
    "public: int __thiscall WString::ExtractToken(unsigned short,class WString &)",
    "private: static class std::map,class wbem_allocator > * CWbemInstallObject::m_pEnvironmentMap",
    "public: __thiscall CVar::CVar(char *,int)",
    "public: void __thiscall CVar::SetShort(short)",
    "public: int __thiscall CWStringArray::DeleteStr(int)",
    "private: int __thiscall CWQLScanner::StripWhereClause(void)",
    "public: virtual void __thiscall CContainerControl::ObjectDestroyed(struct IUnknown *)",
    "protected: void __thiscall CDateTimeParser::GetPreferedDateFormat(void)",
    "public: unsigned short const * const & __thiscall WString::GetStringPointerByRef(void)const",
    "public: virtual __thiscall CBaseAce::~CBaseAce(void)",
    "const CBuffer::`vftable'",
    "private: static unsigned short const * const CWbemInstallObject::m_pwszRegistryPathWbem",
    "private: int __thiscall CTextTemplate::IsEmbeddedObjectProperty(unsigned short *)",
    "public: virtual unsigned long __stdcall CUnk::Release(void)",
    "public: void __thiscall CVar::SetClsId(struct _GUID *,int)",
    "public: int __thiscall CSafeArray::SetLongAt(int,long)",
    "public: void __thiscall CPropertyName::operator=(struct _tag_WbemPropertyName const &)",
    "protected: unsigned short * __thiscall CDateTimeParser::AllocAmPm(void)",
    "public: __thiscall CEnterWbemCriticalSection::~CEnterWbemCriticalSection(void)",
    "public: void __thiscall WString::Unquote(void)",
    "public: class CWbemInstallObject & __thiscall CWbemInstallObject::operator=(class CWbemInstallObject const &)",
    "private: void __thiscall CClientOpsNode::Insert(class CClientOpsNode *)",
    "public: __thiscall CIdentitySecurity::CIdentitySecurity(bool)",
    "public: unsigned char __thiscall CVar::GetByte(void)",
    "public: virtual unsigned long __thiscall CWbemCallSecurity::GetAuthenticationId(struct _LUID &)",
    "public: static void * __stdcall CWin32DefaultArena::WbemMemReAlloc(void *,unsigned long)",
    "public: __thiscall CVar::CVar(class CVarVector *,int)",
    "public: __thiscall CCritSec::~CCritSec(void)",
    "unsigned short * __stdcall GetWMIADAPCmdLine(int)",
    "public: struct tagBLOB * __thiscall CVar::GetBlob(void)",
    "public: __thiscall CUnkInternal::CUnkInternal(class CUnkInternal const &)",
    "public: __thiscall CNtAce::CNtAce(class CNtAce const &)",
    "public: class CWbemTimeSpan & __thiscall CWbemTimeSpan::operator=(class CWbemTimeSpan const &)",
    "protected: int __thiscall CAbstractQl1Parser::aggregate_by(void)",
    "public: virtual long __stdcall CBuffer::SetSize(union _ULARGE_INTEGER)",
    "public: unsigned long __thiscall CNtSecurityDescriptor::GetStatus(void)",
    "public: __thiscall CNtSid::CNtSid(unsigned short *,unsigned short *)",
    "public: __thiscall CArena::CArena(void)",
    "public: int __thiscall CVar::ToUI4(void)",
    "public: __thiscall CNtAcl::CNtAcl(unsigned long)",
    "int __cdecl DebugTrace(char,char const *,...)",
    "public: __thiscall CWin32DefaultArena::CWin32DefaultArena(void)",
    "public: int __thiscall CWbemTime::operator<(class CWbemTime const &)const",
    "public: virtual __thiscall CBasicUnloadInstruction::~CBasicUnloadInstruction(void)",
    "protected: virtual int __thiscall CExecQueue::DoesNeedNewThread(class CExecRequest *)",
    "public: __thiscall CLike::~CLike(void)",
    "public: static void __stdcall CWbemInstallObject::FreeMap(void)",
    "public: int __thiscall CSafeArray::AddBSTR(unsigned short *)",
    "public: virtual long __stdcall CWbemCallSecurity::RevertToSelf(void)",
    "public: __thiscall CVar::~CVar(void)",
    "public: class CMUILocaleList & __thiscall CMUILocaleList::operator=(class CMUILocaleList const &)",
    "public: void __thiscall CExecQueue::SetIdleTimeout(unsigned long)",
    "public: static void * __cdecl CWin32DefaultArena::WbemMemAlloc(unsigned long)",
    "public: __thiscall CFlexArray::~CFlexArray(void)",
    "public: __thiscall CNtSecurityDescriptor::CNtSecurityDescriptor(void)",
    "long __stdcall RetrieveSidFromToken(void *,class CNtSid &)",
    "protected: virtual void __thiscall CExecQueue::ThreadMain(class CExecQueue::CThreadRecord *)",
    "public: void __thiscall CVar::SetUnknown(struct IUnknown *)",
    "public: __thiscall CTextTemplate::CTextTemplate(unsigned short const *)",
    "public: void __thiscall CFlexArray::SetAt(int,void *)",
    "public: virtual void * __thiscall CWin32DefaultArena::Realloc(void *,unsigned long)",
    "public: int __thiscall CWbemInterval::IsZero(void)const",
    "protected: int __thiscall CAbstractQl1Parser::class_name(void)",
    "public: static void __stdcall CWbemInstallObject::SetRegistryPathCIMOM(unsigned short const *)",
    "protected: int __thiscall CAbstractQl1Parser::finalize(void)",
    "public: class MD5 & __thiscall MD5::operator=(class MD5 const &)",
    "long __stdcall Throttle(unsigned long,unsigned long,unsigned long,unsigned long,unsigned long)",
    "private: __thiscall CWbemCallSecurity::~CWbemCallSecurity(void)",
    "private: static unsigned short const * const CWbemInstallObject::m_pwszRegistryPathCIMOM",
    "public: class CNtSid * __thiscall CNtAce::GetSid(void)",
    "public: int __thiscall CNtAcl::AddAce(class CNtAce *)",
    "public: virtual unsigned long __stdcall CBuffer::Release(void)",
    "public: __thiscall CEventLogRecord::CEventLogRecord(unsigned short,unsigned long,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString)",
    "public: __thiscall CVar::CVar(struct _GUID *,int)",
    "void __stdcall AdjustPrivIfLocalSystem(void *)",
    "public: int __thiscall CVarVector::IsOptimized(void)",
    "public: void __thiscall CVar::SetDispatch(struct IDispatch *)",
    "protected: void __thiscall CSmallArrayBlob::CopyData(class CSmallArrayBlob *)",
    "private: int __thiscall CWbemTime::GetDMTF(int,unsigned long,unsigned short *)",
    "public: bool __thiscall SZLess::operator()(unsigned short const * const &,unsigned short const * const &)const",
    "public: static int __stdcall CStaticCritSec::anyFailure(void)",
    "private: unsigned short * __thiscall CTextTemplate::GetPropertyFromIUnknown(unsigned short *,struct IUnknown *)",
    "protected: int __thiscall CDateTimeParser::DateFormat8(unsigned short const *,int)",
    "public: __thiscall CArena::CArena(class CArena const &)",
    "public: class CPublishWMIOperationEvent & __thiscall CPublishWMIOperationEvent::operator=(class CPublishWMIOperationEvent const &)",
    "public: unsigned char __thiscall CDateTimeParser::GetMinutes(void)",
    "public: void __thiscall QL_LEVEL_1_RPN_EXPRESSION::AddRef(void)",
    "public: struct SNtAbsoluteSD * __thiscall CNtSecurityDescriptor::GetAbsoluteCopy(void)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::AddAggregationProperty(class CPropertyName const &)",
    "public: __thiscall Registry::~Registry(void)",
    "public: __thiscall CVar::CVar(float)",
    "public: float __thiscall CVar::GetFloat(void)",
    "public: __thiscall CLimitControl::CLimitControl(class CLimitControl const &)",
    "public: float __thiscall CSafeArray::GetFloatAt(int)",
    "public: int __thiscall QL1_Parser::GetQueryClass(unsigned short *,int)",
    "private: static bool __stdcall CWbemInstallObject::IsInitialized(void)",
    "public: unsigned long __thiscall CWMITraceSettings::SetDefaultValues(void)",
    "public: __thiscall CVar::operator double(void)",
    "public: void __thiscall CSafeArray::SetGrowGranularity(int)",
    "public: __thiscall CStaticCritSec::CStaticCritSec(void)",
    "struct hostent * __stdcall GetFQDN_Ipv4(unsigned short *)",
    "public: virtual unsigned long __stdcall CWbemCallSecurity::Release(void)",
    "public: __thiscall CWbemTimeSpan::CWbemTimeSpan(int,int,int,int,int,int,int)",
    "public: __thiscall CEventLog::CEventLog(unsigned short const *,unsigned short const *,unsigned long)",
    "public: unsigned int __thiscall CBaseMrciCompression::Mrci2MaxCompress(unsigned char *,unsigned int,unsigned char *,unsigned int)",
    "private: void __thiscall CBaseMrciCompression::inithash(void)",
    "const CIdentityTest::`vftable'",
    "public: class CWMITraceSettings & __thiscall CWMITraceSettings::operator=(class CWMITraceSettings const &)",
    "public: __thiscall CVar::operator struct _FILETIME(void)",
    "const CBasicUnloadInstruction::`vftable'",
    "public: int __thiscall CPropertyName::operator==(struct _tag_WbemPropertyName const &)",
    "public: void __thiscall CExecQueue::SetOverflowIdleTimeout(unsigned long)",
    "public: int __thiscall CNtSid::IsValid(void)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::AddToken(struct _tag_WbemQl1Token const &)",
    "public: __thiscall CFlexArray::CFlexArray(int,int)",
    "protected: void __thiscall CInstructionQueue::TouchHead(void)",
    "public: static int __stdcall CMRCICompression::GetCompressedFileInfo(unsigned short const *,enum CMRCICompression::CompressionLevel &,unsigned long &,struct _FILETIME &,__int64 &)",
    "public: __thiscall CLifeControl::CLifeControl(class CLifeControl const &)",
    "public: __thiscall CVar::CVar(class CVar const &)",
    "public: __thiscall QL_LEVEL_1_TOKEN::QL_LEVEL_1_TOKEN(struct QL_LEVEL_1_TOKEN const &)",
    "public: static class IWbemCallSecurity * __stdcall CWbemCallSecurity::CreateInst(void)",
    "public: bool __thiscall CTraceSessionControl::HasToBeEnabled(void)",
    "public: __thiscall CWbemInstallObject::~CWbemInstallObject(void)",
    "public: unsigned short const * __thiscall CEventLogRecord::GetStringAt(int)",
    "public: static unsigned long __stdcall CExecQueue::QueueUnblockedWaitForSingleObject(void *,unsigned long)",
    "public: unsigned short __thiscall CVar::GetWord(void)",
    "protected: int __thiscall CAbstractQl1Parser::term2(void)",
    "public: static class CWbemCallSecurity * __stdcall CWbemCallSecurity::MakeInternalCopyOfThread(void)",
    "public: int __thiscall CDateTimeParser::FillDMTF(unsigned short *,unsigned int)",
    "public: static long __stdcall CMUILocale::LCID_To_Culture_Format(unsigned long,unsigned short *,unsigned int)",
    "public: struct _ACL * __thiscall CNtAcl::GetPtr(void)",
    "public: unsigned long __thiscall CUnkInternal::InternalRelease(void)",
    "public: virtual long __stdcall CBuffer::Write(void const *,unsigned long,unsigned long *)",
    "public: int __thiscall Registry::Open(struct HKEY__ *,unsigned short const *,unsigned long)",
    "public: class CPersistentConfig & __thiscall CPersistentConfig::operator=(class CPersistentConfig const &)",
    "public: static void __stdcall CWin32DefaultArena::WbemSysFreeString(unsigned short *)",
    "public: class CNtSecurityDescriptor & __thiscall CNtSecurityDescriptor::operator=(class CNtSecurityDescriptor &)",
    "public: unsigned long __thiscall CNtSid::GetSize(void)",
    "protected: bool __thiscall CFlexQueue::Grow(void)",
    "public: __thiscall WString::WString(void)",
    "public: class CWbemTime __thiscall CWbemTime::operator-(class CWbemTimeSpan const &)const",
    "public: int __thiscall CSafeArray::AddLong(long)",
    "public: long __thiscall CUnkInternal::InternalQueryInterface(struct _GUID const &,void * *)",
    "public: void __thiscall CWbemInterval::SetMilliseconds(unsigned long)",
    "public: struct _ACCESS_ALLOWED_ACE * __thiscall CNtAce::GetPtr(void)",
    "private: void __thiscall CBaseMrciCompression::mrci1outsingle(unsigned int)",
    "public: class CNtSid * __thiscall CNtSecurityDescriptor::GetOwner(void)",
    "public: int __thiscall CVarVector::GetElementSize(void)",
    "public: int __thiscall CSafeArray::Size(void)",
    "public: bool __thiscall CDMTFParser::IsUsed(int)",
    "public: class CClientOpsNode & __thiscall CClientOpsNode::operator=(class CClientOpsNode const &)",
    "const CHaltable::`vftable'",
    "public: class CDateTimeParser & __thiscall CDateTimeParser::operator=(class CDateTimeParser const &)",
    "protected: void __thiscall CDMTFParser::ParseDate(unsigned short const *)",
    "public: void __thiscall CFlexArray::DebugDump(void)",
    "public: void * __thiscall CFlexArray::GetAt(int)const",
    "private: static long __stdcall CWbemInstallObject::ExpandVariableValue(unsigned short const *,unsigned short *,unsigned int,unsigned int *)",
    "public: __thiscall CVar::CVar(int,unsigned short *)",
    "protected: int __thiscall CDateTimeParser::DateFormat1(unsigned short const *,int)",
    "public: int __thiscall CNtSecurityDescriptor::SetFromAbsoluteCopy(struct SNtAbsoluteSD *)",
    "protected: virtual long __thiscall CExecQueue::InitializeThread(void)",
    "protected: int __thiscall CAbstractQl1Parser::leading_ident_expr(void)",
    "public: unsigned long __thiscall CNtSecurityDescriptor::GetSize(void)",
    "public: int __thiscall Registry::SetDWORDStr(unsigned short const *,unsigned long)",
    "public: virtual void __thiscall CBasicUnloadInstruction::Release(void)",
    "const C9XAce::`vftable'",
    "public: __thiscall CInstructionTest::CInstructionTest(class CInstructionTest const &)",
    "public: class CTextTemplate & __thiscall CTextTemplate::operator=(class CTextTemplate const &)",
    "public: static class CWbemTime __stdcall CWbemTime::GetInfinity(void)",
    "public: struct _FILETIME __thiscall CVar::GetFileTime(void)",
    "public: class CVar & __thiscall CVarVector::GetAt(int)",
    "protected: int __thiscall CDateTimeParser::DateFormat15(unsigned short const *,int)",
    "public: static unsigned short * __stdcall CWin32DefaultArena::WbemSysAllocString(unsigned short const *)",
    "public: __thiscall CLifeControl::CLifeControl(void)",
    "public: __thiscall Registry::Registry(struct HKEY__ *,unsigned long,unsigned long,unsigned short const *)",
    "public: class CTimerInstruction & __thiscall CTimerInstruction::operator=(class CTimerInstruction const &)",
    "public: int __thiscall CSafeArray::Status(void)",
    "private: long __thiscall CIdentitySecurity::GetSidFromThreadOrProcess(class CNtSid &)",
    "public: void __thiscall CVar::SetEmbeddedObject(struct IUnknown *)",
    "protected: int __thiscall CDateTimeParser::TimeFormat1(unsigned short const *,int)",
    "public: static int __stdcall CWin32DefaultArena::WbemHeapInitialize(void *)",
    "protected: class CSmallArrayBlob * __thiscall CSmallArrayBlob::Shrink(void)",
    "public: class QL1_Parser & __thiscall QL1_Parser::operator=(class QL1_Parser const &)",
    "public: long __thiscall CInstructionQueue::Enqueue(class CWbemTime,class CTimerInstruction *)",
    "private: static unsigned short const * const CWbemInstallObject::m_pwszAutoRecoverPath",
    "public: void __thiscall CCritSec::Enter(void)",
    "public: unsigned short * __thiscall CTextTemplate::Apply(struct IWbemClassObject *)",
    "public: class CLike & __thiscall CLike::operator=(class CLike const &)",
    "public: static unsigned long __stdcall CTraceSessionControl::Query(unsigned __int64,unsigned short *,class CWMITraceSettings * *)",
    "public: __thiscall CPublishWMIOperationEvent::~CPublishWMIOperationEvent(void)",
    "protected: int __thiscall CMRCICompression::CompressFileV1(int,int,unsigned long,enum CMRCICompression::CompressionLevel,class CMRCIControl *)",
    "public: void * __thiscall CFlexQueue::Unqueue(void)",
    "protected: static void __stdcall CAbstractQl1Parser::InitToken(struct _tag_WbemQl1Token *)",
    "public: long __thiscall CDatePart::SetDate(char const *)",
    "public: virtual long __thiscall CTimerInstruction::MarkForRemoval(void)",
    "public: virtual long __thiscall CMinMaxLimitControl::Add(unsigned long,unsigned long,unsigned long *)",
    "public: int __thiscall CVarVector::InsertAt(int,class CVar &)",
    "public: int __thiscall CVar::GetType(void)",
    "public: __thiscall CEventLogRecord::~CEventLogRecord(void)",
    "public: unsigned short * __thiscall CVar::GetText(long,long,unsigned short const *)",
    "long __stdcall GetAccessToken(void * &)",
    "public: virtual class CWbemTime __thiscall CBasicUnloadInstruction::GetNextFiringTime(class CWbemTime,long *)const",
    "protected: int __thiscall CMRCICompression::UncompressFileV1(int,int)",
    "public: static unsigned short const * __stdcall CWbemInstallObject::GetRegistryPathWbem(void)",
    "protected: static long CExecQueue::mstatic_lNumInits",
    "public: bool __thiscall CFlexQueue::Enqueue(void *)",
    "private: void __thiscall CBuffer::EnsureSize(unsigned long)",
    "public: __thiscall CWbemTime::CWbemTime(void)",
    "public: int __thiscall Registry::SetStr(unsigned short const *,unsigned short const *)",
    "public: static bool __stdcall CWbemInstallObject::IsOffline(void)",
    "public: __thiscall CDMTFParser::CDMTFParser(unsigned short const *)",
    "public: long __thiscall CVarVector::GetRawArrayData(void *,int)",
    "public: void __thiscall WString::Empty(void)",
    "const CMinMaxLimitControl::`vftable'",
    "bool __stdcall IsPrivilegePresent(void *,long)",
    "public: int __thiscall CNtAcl::IsValid(void)",
    "public: unsigned short const * __thiscall CMUILocaleList::GetCultures(void)",
    "public: virtual long __stdcall CBuffer::Stat(struct tagSTATSTG *,unsigned long)",
    "protected: int __thiscall CAbstractQl1Parser::property_name(void)",
    "protected: int __thiscall CAbstractQl1Parser::trailing_or_null(void)",
    "public: __thiscall CVar::CVar(long)",
    "public: int __thiscall CVar::SetVariant(struct tagVARIANT *,int)",
    "public: void __thiscall CVar::SetDWORD(unsigned long)",
    "public: __thiscall CVar::CVar(unsigned long)",
    "public: __thiscall CVar::operator char(void)",
    "public: void __thiscall CExecQueue::AddRef(void)",
    "public: struct QL_LEVEL_1_RPN_EXPRESSION & __thiscall QL_LEVEL_1_RPN_EXPRESSION::operator=(struct QL_LEVEL_1_RPN_EXPRESSION const &)",
    "private: static unsigned long (__stdcall* CPublishWMIOperationEvent::m_fEventUnregister)(unsigned __int64)",
    "public: int __thiscall CPersistentConfig::GetPersistentCfgValue(unsigned long,unsigned long &)",
    "public: class CTraceSessionControl & __thiscall CTraceSessionControl::operator=(class CTraceSessionControl const &)",
    "public: bool __thiscall CClientOpsNode::HasChildren(void)",
    "public: class WString & __thiscall WString::StripToToken(unsigned short,int)",
    "public: bool __thiscall CDMTFParser::IsInterval(void)",
    "public: virtual __thiscall CRegistryMinMaxLimitControl::~CRegistryMinMaxLimitControl(void)",
    "public: int __thiscall CSmallArrayBlob::Size(void)const",
    "public: __thiscall CVar::CVar(double)",
    "public: struct IUnknown * __thiscall CSafeArray::GetUnknownAt(int)",
    "public: void __thiscall CExecQueue::SetRequestLimits(long,long,long)",
    "public: long __thiscall CInstructionQueue::Remove(class CInstructionTest *,class CTimerInstruction * *)",
    "public: int __thiscall QL1_Parser::Parse(struct QL_LEVEL_1_RPN_EXPRESSION * *)",
    "public: static void __stdcall SHA256::Transform(void *,unsigned int,unsigned char * const)",
    "public: virtual unsigned long __stdcall CUnkInternal::Release(void)",
    "protected: __thiscall CBasicUnloadInstruction::CBasicUnloadInstruction(void)",
    "public: void __thiscall CFlexArray::Empty(void)",
    "public: __thiscall CNtSecurityDescriptor::CNtSecurityDescriptor(void *)",
    "public: int __thiscall CVar::SetLPSTR(char *,int)",
    "public: static long __stdcall CMUILocale::_LCIDToLocaleName(unsigned long,unsigned short *,int,unsigned long)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::SetClassName(unsigned short const *)",
    "public: class CBuffer & __thiscall CBuffer::operator=(class CBuffer const &)",
    "public: int __thiscall CVarVector::DoesVectorTypeMatchArrayType(void)",
    "public: __thiscall CInstructionQueue::CInstructionQueue(void)",
    "private: __thiscall CWbemCallSecurity::CWbemCallSecurity(class CWbemCallSecurity const &)",
    "protected: int __thiscall CDateTimeParser::CheckDMTFDateTimeFormatInternal(unsigned short const *)",
    "public: long __thiscall CDatePart::GetPart(int,int *)",
    "private: static void * CMUILocale::m_fGetThreadPreferredUILanguages",
    "void __stdcall UnRegisterDLL(struct _GUID,unsigned short *)",
    "long __stdcall ChangeVariantToCIMTYPE(struct tagVARIANT *,struct tagVARIANT *,long)",
    "public: __thiscall CMUILocaleList::~CMUILocaleList(void)",
    "public: virtual long __stdcall CBuffer::LockRegion(union _ULARGE_INTEGER,union _ULARGE_INTEGER,unsigned long)",
    "public: void __thiscall CWStringArray::Empty(void)",
    "public: __thiscall CInCritSec::~CInCritSec(void)",
    "public: static unsigned short * __stdcall QL1_Parser::ReplaceClassName(struct QL_LEVEL_1_RPN_EXPRESSION *,unsigned short const *)",
    "public: static long __stdcall CMUILocale::_LocaleNameToLCID(unsigned short *,unsigned long,unsigned long *)",
    "int __stdcall IsNT(void)",
    "public: void * __thiscall CSmallArrayBlob::operator[](int)const",
    "public: bool __thiscall CFlexQueue::Requeue(void *)",
    "public: __thiscall CTimerGenerator::CTimerGenerator(void)",
    "private: static struct HINSTANCE__ * CMUILocale::m_hKernel32",
    "public: void __thiscall CVar::SetWord(unsigned short)",
    "public: unsigned short const * __thiscall CWbemCallSecurity::GetCallerIdentity(void)",
    "public: int __thiscall Registry::MoveToSubkey(unsigned short const *)",
    "public: __thiscall CInsertionString::~CInsertionString(void)",
    "public: class CCheckedInCritSec & __thiscall CCheckedInCritSec::operator=(class CCheckedInCritSec const &)",
    "public: int __thiscall CInstructionQueue::IsEmpty(void)",
    "public: int __thiscall CSafeArray::RemoveAt(int)",
    "protected: int __thiscall CDateTimeParser::TimeFormat8(unsigned short const *,int)",
    "public: __thiscall CNtSecurityDescriptor::CNtSecurityDescriptor(class CNtSecurityDescriptor &)",
    "public: __thiscall CWMITraceSettings::CWMITraceSettings(void)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::AddHavingToken(struct _tag_WbemQl1Token const &)",
    "public: int __thiscall WString::operator<(unsigned short const *)const",
    "const CRegistryMinMaxLimitControl::`vftable'",
    "public: __thiscall CQl1ParseSink::CQl1ParseSink(void)",
    "public: long __thiscall CSafeArray::Access(void * *)",
    "public: static class CWbemTime __stdcall CWbemTime::GetTickCount(void)",
    "public: __thiscall CExecQueue::CExecQueue(void)",
    "public: int __thiscall CWQLScanner::Parse(void)",
    "public: unsigned short * __thiscall CVar::GetLPWSTR(void)",
    "public: virtual long __stdcall CBuffer::CopyTo(struct IStream *,union _ULARGE_INTEGER,union _ULARGE_INTEGER *,union _ULARGE_INTEGER *)",
    "protected: virtual void __thiscall CTimerGenerator::NotifyStartingThread(void)",
    "public: __thiscall CInstructionQueue::~CInstructionQueue(void)",
    "public: __thiscall C9XAce::C9XAce(void)",
    "public: virtual long __stdcall CWbemCallSecurity::QueryInterface(struct _GUID const &,void * *)",
    "public: static unsigned long __stdcall CTraceSessionControl::Start(struct _GUID const *,class CWMITraceSettings *)",
    "public: __thiscall CIdentityTest::CIdentityTest(class CTimerInstruction *)",
    "protected: void __thiscall CFlexQueue::DecrementIndex(int &)",
    "public: virtual int __thiscall C9XAce::GetType(void)",
    "public: static void __stdcall CWin32DefaultArena::WbemHeapFree(void)",
    "public: int __thiscall CVar::DumpText(struct _iobuf *)",
    "protected: virtual void __thiscall CExecQueue::AdjustInitialPriority(class CExecRequest *)",
    "public: virtual int __thiscall CUnk::Initialize(void)",
    "public: __thiscall QL_LEVEL_1_TOKEN::~QL_LEVEL_1_TOKEN(void)",
    "public: int __thiscall CDateTimeParser::IsValidDateTime(void)",
    "public: class CFlexArray & __thiscall CFlexArray::operator=(class CFlexArray &)",
    "protected: int __thiscall CDateTimeParser::DateFormat12(unsigned short const *,unsigned short const *,int)",
    "public: class CNtAcl * __thiscall CNtAcl::OrderAces(void)",
    "public: int __thiscall WString::operator<=(unsigned short const *)const",
    "public: virtual long __thiscall CWbemCallSecurity::GetPotentialImpersonation(void)",
    "public: void __thiscall CVar::SetLong(long)",
    "protected: void __thiscall CDateTimeParser::GetLocalInfoAndAlloc(unsigned long,unsigned short * &)",
    "public: unsigned int __thiscall CBaseMrciCompression::Mrci1Decompress(unsigned char *,unsigned int,unsigned char *,unsigned int)",
    "public: void __thiscall CVar::SetBlob(struct tagBLOB *,int)",
    "public: int __thiscall CVarVector::SetRawArraySize(int)",
    "protected: virtual unsigned long __thiscall CExecQueue::GetIdleTimeout(class CExecQueue::CThreadRecord *)",
    "protected: int __thiscall CAbstractQl1Parser::expr(void)",
    "public: void * __thiscall CExecRequest::GetWhenDoneHandle(void)",
    "int __stdcall bAreWeLocal(unsigned short *)",
    "public: __thiscall CWQLScanner::CWQLScanner(class CWQLScanner &)",
    "public: int __thiscall CSafeArray::AddByte(unsigned char)",
    "public: int __thiscall CFlexArray::Size(void)const",
    "public: unsigned short * __thiscall CWQLScanner::AliasToTable(unsigned short *)",
    "public: virtual int __thiscall CNtAce::GetFlags(void)",
    "public: unsigned short * __thiscall CVar::GetTypeText(void)",
    "public: void __thiscall CBuffer::`default constructor closure'(void)",
    "public: unsigned short * __thiscall WString::GetLToken(unsigned short)const",
    "public: int __thiscall CVarVector::ToUI4(void)",
    "public: void * * __thiscall CFlexArray::GetArrayPtr(void)",
    "public: void __thiscall CExecRequest::SetNext(class CExecRequest *)",
    "public: int __thiscall CNtSecurityDescriptor::GetDacl(class CNtAcl &)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::AddAllAggregationProperties(void)",
    "public: void __thiscall CFlexArray::Sort(void)",
    "public: __thiscall CIdentitySecurity::~CIdentitySecurity(void)",
    "public: __thiscall CTimerGenerator::CTimerGenerator(class CTimerGenerator const &)",
    "protected: int __thiscall CAbstractQl1Parser::comp_operator(void)",
    "public: int __thiscall CSafeArray::AddDispatch(struct IDispatch *)",
    "unsigned long __stdcall WMIControlCallback(unsigned __int64,unsigned char *,unsigned long *)",
    "public: __thiscall CVarVector::~CVarVector(void)",
    "public: __thiscall CLike::CLike(void)",
    "protected: static void __stdcall CExecQueue::InitTls(void)",
    "public: __thiscall CNtSid::CNtSid(void)",
    "public: __thiscall WString::WString(char const *)",
    "public: virtual __thiscall CMinMaxLimitControl::~CMinMaxLimitControl(void)",
    "public: __thiscall CBuffer::~CBuffer(void)",
    "public: class CInstructionTest & __thiscall CInstructionTest::operator=(class CInstructionTest const &)",
    "public: void __thiscall CClientOpsNode::RemoveSelf(void)",
    "public: unsigned short const * __thiscall CInsertionString::GetString(void)",
    "public: class CExecQueue & __thiscall CExecQueue::operator=(class CExecQueue &)",
    "public: __thiscall CFlexQueue::~CFlexQueue(void)",
    "protected: int __thiscall CAbstractQl1Parser::opt_having(void)",
    "public: long __thiscall CExecRequest::GetPriority(void)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::AddAllProperties(void)",
    "long __stdcall BuildOperationInfo(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short * *)",
    "public: __thiscall CSafeArray::~CSafeArray(void)",
    "public: void __thiscall CCheckedInCritSec::Leave(void)",
    "public: void __thiscall CTimerGenerator::ScheduleFreeUnusedLibraries(void)",
    "public: void __thiscall CSafeArray::Empty(void)",
    "public: virtual long __stdcall CUnk::QueryInterface(struct _GUID const &,void * *)",
    "public: virtual long __thiscall CTimerGenerator::Shutdown(void)",
    "public: int __thiscall CVar::SetLPWSTR(unsigned short *,int)",
    "public: int __thiscall CNtSecurityDescriptor::SetOwner(class CNtSid *)",
    "public: void * const * __thiscall CFlexArray::GetArrayPtr(void)const",
    "public: __thiscall CBaseAce::CBaseAce(void)",
    "public: __thiscall CLike::CLike(class CLike const &)",
    "public: unsigned char __thiscall CDateTimeParser::GetMonth(void)",
    "public: void * __thiscall CFlexQueue::Dequeue(void)",
    "public: class WString & __thiscall WString::operator+=(unsigned short)",
    "public: unsigned char __thiscall CDateTimeParser::GetSeconds(void)",
    "public: class CExecRequest & __thiscall CExecRequest::operator=(class CExecRequest const &)",
    "public: static int __stdcall CWin32DefaultArena::WbemSysReAllocString(unsigned short * *,unsigned short const *)",
    "public: __thiscall QL1_Parser::QL1_Parser(class CGenLexSource *)",
    "public: static void __stdcall CWbemInstallObject::SetRegistryPathWbem(unsigned short const *)",
    "public: void * __thiscall CSmallArrayBlob::GetAt(int)const",
    "public: class WString & __thiscall WString::TruncAtLToken(unsigned short)",
    "public: unsigned long __thiscall CWbemCriticalSection::GetOwningThreadId(void)",
    "public: __thiscall CNtAcl::CNtAcl(struct _ACL *)",
    "public: unsigned long __thiscall CTraceSessionControl::Initialize(unsigned short const *)",
    "protected: virtual int __thiscall CAbstractQl1Parser::Next(int)",
    "public: __int64 __thiscall CWbemTime::Get100nss(void)const",
    "public: virtual unsigned long __stdcall CUnkInternal::AddRef(void)",
    "public: int __thiscall CSafeArray::SetBSTRAt(int,unsigned short *)",
    "public: void __thiscall CExecQueue::Release(void)",
    "public: int __thiscall CVar::IsDataNull(void)",
    "public: void __thiscall CPropertyName::Init(void)",
    "public: __thiscall CSafeArray::CSafeArray(class CSafeArray &)",
    "protected: virtual void __thiscall CTimerGenerator::NotifyStoppingThread(void)",
    "public: __thiscall C9XAce::C9XAce(class C9XAce const &)",
    "public: int __thiscall Registry::SetDWORD(unsigned short const *,unsigned long)",
    "public: void __thiscall CMRCIControl::Reset(void)",
    "public: virtual bool __thiscall C9XAce::Deserialize(unsigned char *)",
    "public: class CBaseAce & __thiscall CBaseAce::operator=(class CBaseAce const &)",
    "public: bool __thiscall CHaltable::isValid(void)",
    "public: long __thiscall CVar::GetLong(void)",
    "protected: virtual unsigned long __thiscall CExecQueue::WaitForSingleObjectWhileBusy(void *,unsigned long,class CExecQueue::CThreadRecord *)",
    "public: __thiscall CInCritSec::CInCritSec(struct _RTL_CRITICAL_SECTION *)",
    "public: class CTimerGenerator & __thiscall CTimerGenerator::operator=(class CTimerGenerator const &)",
    "protected: virtual void __thiscall CExecQueue::UninitializeThread(void)",
    "public: static int __stdcall CDateTimeParser::CheckDMTFDateTimeInterval(unsigned short const *)",
    "public: unsigned long __thiscall CCircularQueue::GetNextElement(struct LOG_ELEMENT * *)",
    "public: __thiscall CWbemCriticalSection::~CWbemCriticalSection(void)",
    "public: __thiscall CInsertionString::CInsertionString(unsigned short const *)",
    "public: int __thiscall CSafeArray::AddDouble(double)",
    "public: __thiscall WString::operator unsigned short const *(void)const",
    "public: class CNtAcl * __thiscall CNtSecurityDescriptor::GetDacl(void)",
    "public: virtual void __thiscall CNtAce::SetFlags(long)",
    "public: __thiscall CVarVector::CVarVector(int,int,int)",
    "public: int __thiscall CWStringArray::RemoveAt(int)",
    "public: int __thiscall CVarVector::CompareTo(class CVarVector &,int)",
    "private: long __thiscall CMUILocaleList::AppendCulture(unsigned short const *)",
    "public: static int __stdcall CExecQueue::IsSTAThread(void)",
    "public: int __thiscall CDateTimeParser::GetUTC(void)",
    "public: unsigned long __thiscall CWMITraceSettings::ReadFromRegistry(unsigned short const *)",
    "const CExecQueue::`vftable'",
    "public: int __thiscall CWbemCriticalSection::Enter(unsigned long)",
    "public: virtual __thiscall CHaltable::~CHaltable(void)",
    "public: static long __stdcall CMUILocale::SetPreferredLanguages(unsigned long,unsigned short const *,unsigned long *)",
    "public: short __thiscall CVar::GetShort(void)",
    "private: void __thiscall CClientOpsNode::UpdateChildren(class CClientOpsNode *)",
    "public: class CWbemInterval __thiscall CWbemInterval::operator*(double)const",
    "public: void __thiscall CVar::SetSafeArray(int,struct tagSAFEARRAY *)",
    "protected: int __thiscall CDateTimeParser::DateFormat14(unsigned short const *,unsigned short const *,int)",
    "public: long __thiscall CHaltable::ResumeAll(void)",
    "public: virtual unsigned long __stdcall CUnk::AddRef(void)",
    "private: class CWbemCallSecurity & __thiscall CWbemCallSecurity::operator=(class CWbemCallSecurity const &)",
    "private: int __thiscall CSafeArray::SetScalarAt(int,union SA_ArrayScalar)",
    "public: static void __stdcall CWStringArray::Difference(class CWStringArray &,class CWStringArray &,class CWStringArray &)",
    "public: __thiscall QL_LEVEL_1_RPN_EXPRESSION::QL_LEVEL_1_RPN_EXPRESSION(void)",
    "public: virtual long __stdcall CUnkInternal::QueryInterface(struct _GUID const &,void * *)",
    "public: static void __stdcall CStaticCritSec::SetFailure(void)",
    "public: __thiscall CMinMaxLimitControl::CMinMaxLimitControl(class CMinMaxLimitControl const &)",
    "public: __thiscall CNtAce::CNtAce(void)",
    "public: __thiscall CCircularQueue::CCircularQueue(void)",
    "protected: int __thiscall CAbstractQl1Parser::parse(int)",
    "public: int __thiscall CFlexQueue::GetQueueSize(void)const",
    "public: __thiscall CEventLog::~CEventLog(void)",
    "private: static class CCritSec CPublishWMIOperationEvent::m_csFunctionPointers",
    "public: __thiscall CWin32DefaultArena::~CWin32DefaultArena(void)",
    "public: static unsigned long __stdcall CExecQueue::GetTlsIndex(void)",
    "public: void __thiscall QL_LEVEL_1_RPN_EXPRESSION::Dump(char const *)",
    "protected: int __thiscall CAbstractQl1Parser::trailing_const_expr(void)",
    "public: class CHex & __thiscall CHex::operator=(class CHex const &)",
    "private: static unsigned long __stdcall CTimerGenerator::SchedulerThread(void *)",
    "public: static long __stdcall CMUILocale::_GetThreadPreferredUILanguages(unsigned long,unsigned long *,unsigned short *,unsigned long *)",
    "public: void * __thiscall CFlexQueue::Peek(void)",
    "public: int __thiscall CSafeArray::GetType(void)",
    "public: void __thiscall CMinMaxLimitControl::SetMax(unsigned long)",
    "public: virtual long __stdcall CBuffer::UnlockRegion(union _ULARGE_INTEGER,union _ULARGE_INTEGER,unsigned long)",
    "public: class CClientOpsNode * __thiscall CClientOpsNode::GetNext(void)",
    "public: __thiscall CWbemInterval::CWbemInterval(void)",
    "public: __thiscall CVar::CVar(unsigned short *,int)",
    "public: virtual long __thiscall C9XAce::GetFullUserName2(unsigned short * *)",
    "protected: int __thiscall CDateTimeParser::IsValidDotMillisecond(unsigned short *,unsigned short const *)",
    "private: void __thiscall CMemoryLog::CaptureStackTrace(void * * const)",
    "public: int __thiscall CSafeArray::AddBool(short)",
    "public: virtual bool __thiscall CNtAce::Deserialize(unsigned char *)",
    "private: static struct HINSTANCE__ * CPublishWMIOperationEvent::m_hAdvAPI32",
    "protected: int __thiscall CDateTimeParser::DateFormat6(unsigned short const *,int)",
    "public: __thiscall CClientOpsNode::CClientOpsNode(void)",
    "void __stdcall Set_WPP_INIT_TRACING_Call_State(bool)",
    "public: virtual __thiscall CTimerInstruction::~CTimerInstruction(void)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::SetAggregated(void)",
    "private: static unsigned long (__stdcall* CPublishWMIOperationEvent::m_fEventRegister)(struct _GUID const *,void (__stdcall*)(struct _GUID const *,unsigned long,unsigned char,unsigned __int64,unsigned __int64,struct _EVENT_FILTER_DESCRIPTOR *,void *),void *,unsigned __int64 *)",
    "unsigned long mstatic_dwTlsIndex",
    "public: class CCircularQueue & __thiscall CCircularQueue::operator=(class CCircularQueue const &)",
    "public: virtual int __stdcall CWbemCallSecurity::IsImpersonating(void)",
    "protected: int __thiscall CAbstractQl1Parser::term(void)",
    "public: __thiscall CDMTFParser::~CDMTFParser(void)",
    "protected: unsigned short const * __thiscall CAbstractQl1Parser::GetSinglePropertyName(void)",
    "public: int __thiscall Registry::GetDWORD(unsigned short const *,unsigned long *)",
    "public: class CNtAce & __thiscall CNtAce::operator=(class CNtAce const &)",
    "public: struct IUnknown * __thiscall CUnk::GetInnerUnknown(void)",
    "protected: int __thiscall CDMTFParser::ParsePart(unsigned short const *,int,int,int *,int,int)",
    "public: __thiscall CInsertionString::CInsertionString(class CInsertionString const &)",
    "public: class CClientOpsNode * __thiscall CClientOpsNode::GetChildren(void)",
    "protected: int __thiscall CAbstractQl1Parser::parse_property_name(class CPropertyName &)",
    "public: int __thiscall CSafeArray::SetBoolAt(int,short)",
    "public: long __thiscall CBuffer::ReadLPWSTR(unsigned short const * &)",
    "public: struct tagSAFEARRAY * __thiscall CVar::GetNewSafeArray(void)",
    "public: unsigned char __thiscall CDateTimeParser::GetHours(void)",
    "public: virtual long __stdcall CBuffer::Revert(void)",
    "private: unsigned int __thiscall CBaseMrciCompression::getbit(void)",
    "const SZLess::`vftable'",
    "public: __thiscall CLockableFlexArray::CLockableFlexArray(class CLockableFlexArray &)",
    "protected: static void __stdcall CExecQueue::Register(class CExecQueue::CThreadRecord *)",
    "public: int __thiscall CEventLogRecord::operator==(class CEventLogRecord const &)",
    "public: struct _EVENT_TRACE_PROPERTIES * __thiscall CWMITraceSettings::GetEventTraceProperties(void)",
    "public: virtual class CWbemTime __thiscall CBasicUnloadInstruction::GetFirstFiringTime(void)const",
    "public: class CWin32DefaultArena & __thiscall CWin32DefaultArena::operator=(class CWin32DefaultArena const &)",
    "public: static int __stdcall CVarVector::IsValidVectorArray(int,struct tagSAFEARRAY *)",
    "public: __thiscall CVar::operator char *(void)",
    "protected: class CWbemInterval __thiscall CInstructionQueue::TimeToWait(void)",
    "public: __thiscall CNtSid::CNtSid(void *)",
    "public: long __thiscall CBuffer::Advance(unsigned long)",
    "bool __stdcall Get_WPP_INIT_TRACING_Call_State(void)",
    "public: void __thiscall CVar::SetAsNull(void)",
    "public: void __thiscall CSafeArray::SetRawArrayMaxElement(int)",
    "int __stdcall LoggingLevelEnabled(unsigned long)",
    "protected: int __thiscall CAbstractQl1Parser::typed_constant(void)",
    "int __stdcall IsLocalService(void *)",
    "public: static int __stdcall CMUILocale::_Free(void *)",
    "public: __thiscall CNtAce::CNtAce(struct _ACCESS_ALLOWED_ACE *)",
    "public: int __thiscall CInsertionString::IsEmpty(void)",
    "private: int __thiscall CWQLScanner::ExtractSelectType(void)",
    "public: void __thiscall CClientOpsNode::Unlock(void)",
    "public: virtual long __stdcall CBuffer::Read(void *,unsigned long,unsigned long *)",
    "class CClientOpsNode * __stdcall GetGlobalClientOps(void)",
    "public: void __thiscall CBasicUnloadInstruction::Terminate(void)",
    "public: class CRegistryMinMaxLimitControl & __thiscall CRegistryMinMaxLimitControl::operator=(class CRegistryMinMaxLimitControl const &)",
    "protected: int __thiscall CDateTimeParser::DateFormat10(unsigned short const *,unsigned short const *,int)",
    "public: long __thiscall CBuffer::WriteLPWSTR(unsigned short const *)",
    "public: class CIdentitySecurity & __thiscall CIdentitySecurity::operator=(class CIdentitySecurity const &)",
    "public: __thiscall QL_LEVEL_1_RPN_EXPRESSION::~QL_LEVEL_1_RPN_EXPRESSION(void)",
    "public: __thiscall CWbemTime::CWbemTime(class CWbemTime const &)",
    "public: static long __stdcall CMUILocale::_GetSystemDefaultLocaleName(unsigned short * *)",
    "public: int __thiscall CFlexArray::InsertAt(int,void *)",
    "public: void __thiscall CVar::SetFloat(float)",
    "public: int __thiscall CSafeArray::SetRawData(void *,int,int)",
    "public: static long __stdcall CWbemInstallObject::CoCreateInstance(struct _GUID const &,struct IUnknown *,unsigned long,struct _GUID const &,void * *)",
    "public: long __thiscall CNtSecurityDescriptor::DeleteSacl(void)",
    "public: __thiscall CPropertyName::CPropertyName(class CPropertyName const &)",
    "const QL_LEVEL_1_RPN_EXPRESSION::`vftable'",
    "public: __thiscall CMUILocaleList::CMUILocaleList(void)",
    "public: int __thiscall CWStringArray::ReplaceAt(int,unsigned short *)",
    "protected: int __thiscall CAbstractQl1Parser::tolerance(void)",
    "protected: long __thiscall CMinMaxLimitControl::ComputePenalty(unsigned long,unsigned long,unsigned long *,int *)",
    "public: void * __thiscall CNtSid::GetPtr(void)",
    "public: __thiscall CNtAce::CNtAce(unsigned long,unsigned long,unsigned long,class CNtSid &)",
    "public: __thiscall CVar::operator float(void)",
    "public: unsigned int __thiscall CMRCICompression::CompressBuffer(unsigned char *,unsigned long,unsigned char *,unsigned long,enum CMRCICompression::CompressionLevel)",
    "public: class SHA256 & __thiscall SHA256::operator=(class SHA256 const &)",
    "public: void __thiscall CSmallArrayBlob::Sort(void)",
    "public: unsigned long __thiscall CUnkInternal::InternalAddRef(void)",
    "public: void __thiscall CSafeArray::SetDestructorPolicy(int)",
    "public: int __thiscall WString::Equal(unsigned short const *)const",
    "public: long __thiscall CDatePart::SetDate(unsigned short const *)",
    "public: __thiscall CVar::operator unsigned char(void)",
    "public: virtual int __thiscall CNtAce::GetType(void)",
    "protected: void __thiscall CDateTimeParser::ResetDate(int)",
    "public: static long __stdcall CWbemInstallObject::AddEnvironmentValue(unsigned short const *,unsigned short const *)",
    "public: int __thiscall CNtSid::operator==(class CNtSid &)",
    "protected: void __thiscall CDMTFParser::ParseAbsolute(unsigned short const *)",
    "public: unsigned long __thiscall CVar::GetDWORD(void)",
    "public: int __thiscall CFlexArray::CopyDataFrom(class CFlexArray const &)",
    "public: void __thiscall CLockableFlexArray::Unlock(void)",
    "public: __thiscall CRegistryMinMaxLimitControl::CRegistryMinMaxLimitControl(int,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *)",
    "long __stdcall WbemVariantChangeType(struct tagVARIANT *,struct tagVARIANT *,unsigned short)",
    "public: unsigned long __thiscall CWMITraceSettings::WriteToRegistry(unsigned short const *)",
    "public: void __thiscall CMemoryLog::Write(void *,unsigned long)",
    "public: static int __cdecl CWin32DefaultArena::WbemMemFree(void *)",
    "public: void __thiscall CWbemCriticalSection::Leave(void)",
    "public: void * * __thiscall CSmallArrayBlob::CloneData(void)",
    "public: long __thiscall CExecQueue::EnqueueWithoutSleep(class CExecRequest *,void * *)",
    "public: int __thiscall WString::EqualNoCase(unsigned short const *)const",
    "public: class CWbemTime __thiscall CWbemTime::operator+(class CWbemInterval const &)const",
    "public: int __thiscall CVarVector::ToSingleChar(void)",
    "public: __thiscall CVar::CVar(unsigned short)",
    "int __stdcall IsW2KOrMore(void)",
    "public: void __thiscall CWStringArray::`default constructor closure'(void)",
    "public: void __thiscall CNtAcl::`default constructor closure'(void)",
    "public: int __thiscall CIdentitySecurity::AccessCheck(void)",
    "public: void __thiscall CVar::SetCanDelete(int)",
    "public: __thiscall CBasicUnloadInstruction::CBasicUnloadInstruction(class CWbemInterval)",
    "protected: virtual int __thiscall CExecQueue::CreateNewThread(void)",
    "public: __thiscall CMinMaxLimitControl::CMinMaxLimitControl(int,unsigned short const *)",
    "public: static long __stdcall CWbemInstallObject::CoGetClassObject(struct _GUID const &,unsigned long,struct _COSERVERINFO *,struct _GUID const &,void * *)",
    "public: void __thiscall CPropertyName::Empty(void)",
    "protected: virtual int __thiscall CExecQueue::IsAppropriateThread(void)",
    "protected: int __thiscall CDateTimeParser::IsValidYearMonthDayNumber(unsigned short *)",
    "public: class CSafeArray & __thiscall CSafeArray::operator=(class CSafeArray &)",
    "public: int __thiscall WString::WildcardTest(unsigned short const *)const",
    "public: void __thiscall CWStringArray::Sort(void)",
    "public: void * * __thiscall CFlexArray::UnbindPtr(void)",
    "public: __thiscall CEnterWbemCriticalSection::CEnterWbemCriticalSection(class CWbemCriticalSection *,unsigned long)",
    "public: virtual void __thiscall CBasicUnloadInstruction::AddRef(void)",
    "public: void __thiscall CBasicUnloadInstruction::SetInterval(class CWbemInterval &)",
    "public: __thiscall CTraceSessionControl::CTraceSessionControl(void)",
    "public: __thiscall QL1_Parser::QL1_Parser(class QL1_Parser const &)",
    "protected: void __thiscall CDMTFParser::ParseInterval(unsigned short const *)",
    "private: long __thiscall CIdentitySecurity::RetrieveSidFromCall(class CNtSid &)",
    "public: int __thiscall CVarVector::operator==(class CVarVector &)",
    "public: long __thiscall CTimerGenerator::Set(class CTimerInstruction *,class CWbemTime)",
    "public: virtual __thiscall SZLess::~SZLess(void)",
    "protected: class CSmallArrayBlob * __thiscall CSmallArrayBlob::EnsureExtent(int)",
    "public: __thiscall CDatePart::CDatePart(void)",
    "public: __thiscall CVar::CVar(void)",
    "protected: int __thiscall CDateTimeParser::IsValidYearNumber(unsigned short *,unsigned short const *,int)",
    "private: void __thiscall CBaseMrciCompression::outlength(unsigned int)",
    "public: void __thiscall CFlexArray::Compress(void)",
    "public: virtual long __thiscall CNtAce::GetFullUserName2(unsigned short * *)",
    "public: static long __stdcall CPublishWMIOperationEvent::PublishStop(unsigned long)",
    "public: virtual void __thiscall CQl1ParseSink::InOrder(long)",
    "long __stdcall CopyFileToAutorecover(unsigned short *,unsigned short *,int)",
    "public: static int __stdcall CVarVector::IsValidVectorType(int)",
    "public: __thiscall CVar::CVar(unsigned char)",
    "public: void __thiscall CPropertyName::AddElement(unsigned short const *)",
    "protected: static int __cdecl CFlexArray::CompareEls(void const *,void const *)",
    "public: static long __stdcall CPublishWMIOperationEvent::Init(void)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::SetAggregationTolerance(struct _tag_WbemQl1Tolerance const &)",
    "public: class CBaseMrciCompression & __thiscall CBaseMrciCompression::operator=(class CBaseMrciCompression const &)",
    "public: class CUnk & __thiscall CUnk::operator=(class CUnk const &)",
    "void __stdcall RegisterDLL(struct HINSTANCE__ *,struct _GUID,unsigned short *,unsigned short *,unsigned short *)",
    "protected: bool __thiscall CLike::MatchSet(unsigned short const *,unsigned short const *,int &)",
    "public: void __thiscall CFlexArray::Trim(void)",
    "public: class CContainerControl & __thiscall CContainerControl::operator=(class CContainerControl const &)",
    "public: __thiscall WString::WString(unsigned short const *)",
    "protected: int __thiscall CDateTimeParser::IsValidDayNumber(unsigned short *,unsigned short const *)",
    "public: void __thiscall CWStringArray::Compress(void)",
    "public: __thiscall CVar::operator unsigned short(void)",
    "public: __thiscall QL_LEVEL_1_TOKEN::QL_LEVEL_1_TOKEN(void)",
    "public: static long __stdcall CMUILocale::LocaleName_To_LCID(unsigned short const *,bool *,unsigned long *)",
    "int __stdcall NormalizeCimDateTime(unsigned short const *,unsigned short * *)",
    "public: int __thiscall CDateTimeParser::SetDateTime(unsigned short const *)",
    "public: long __thiscall CTimerGenerator::Remove(class CInstructionTest *)",
    "void __stdcall _ThrowMemoryException_(void)",
    "public: unsigned short __thiscall WString::operator[](int)const",
    "public: __thiscall CIdentitySecurity::CIdentitySecurity(class CIdentitySecurity const &)",
    "public: int __thiscall CSafeArray::SetUnknownAt(int,struct IUnknown *)",
    "public: void __thiscall CVarVector::Empty(void)",
    "public: class CMemoryLog & __thiscall CMemoryLog::operator=(class CMemoryLog const &)",
    "public: static long __stdcall CWbemTime::GetLocalOffsetForDate(struct _SYSTEMTIME const *)",
    "public: class WString & __thiscall WString::operator+=(unsigned short const *)",
    "public: void __thiscall CWQLScanner::Dump(void)",
    "public: __thiscall CNtAce::CNtAce(unsigned long,unsigned long,unsigned long,unsigned short *,unsigned short *)",
    "protected: virtual void __thiscall CExecQueue::AdjustPriorityForPassing(class CExecRequest *)",
    "public: int __thiscall CWStringArray::SetAt(int,unsigned short const *)",
    "public: static void __stdcall CWStringArray::Union(class CWStringArray &,class CWStringArray &,class CWStringArray &)",
    "public: __thiscall QL_LEVEL_1_RPN_EXPRESSION::QL_LEVEL_1_RPN_EXPRESSION(struct QL_LEVEL_1_RPN_EXPRESSION const &)",
    "public: class CArena & __thiscall CArena::operator=(class CArena const &)",
    "long __stdcall BuildSecurityDescriptorParameter(struct IWbemServices *,struct IWbemContext *,class CNtSecurityDescriptor *,struct IWbemClassObject *)",
    "public: int __thiscall CSafeArray::SetDoubleAt(int,double)",
    "public: virtual __thiscall CTimerGenerator::~CTimerGenerator(void)",
    "public: int __thiscall CVar::CompareTo(class CVar &,int)",
    "public: long __thiscall CVarVector::SetRawArrayData(void *,int,int)",
    "public: virtual bool __thiscall C9XAce::Serialize(unsigned char *,unsigned int)",
    "public: int __thiscall CNtAcl::DeleteAce(int)",
    "public: __thiscall CBaseAce::CBaseAce(class CBaseAce const &)",
    "const CUnk::`vftable'",
    "protected: int __thiscall CDateTimeParser::TimeFormat3(unsigned short const *,int)",
    "public: class CIdentityTest & __thiscall CIdentityTest::operator=(class CIdentityTest const &)",
    "private: static void * CMUILocale::m_fLCIDToLocaleName",
    "public: unsigned short * __thiscall CWStringArray::operator[](int)const",
    "public: __thiscall CPropertyName::~CPropertyName(void)",
    "public: virtual unsigned long __stdcall CWbemCallSecurity::AddRef(void)",
    "long __stdcall WbemSetDynamicCloaking(struct IUnknown *,unsigned long,unsigned long)",
    "public: unsigned int __thiscall CBaseMrciCompression::Mrci1MaxCompress(unsigned char *,unsigned int,unsigned char *,unsigned int)",
    "public: virtual long __thiscall CLimitControl::RemoveMember(void)",
    "protected: bool __thiscall CLike::DoLike(unsigned short const *,unsigned short const *,unsigned short)",
    "public: void __thiscall CVar::SetDouble(double)",
    "public: virtual bool __thiscall CNtAce::Serialize(unsigned char *,unsigned int)",
    "public: __thiscall CVarVector::CVarVector(class CVarVector &)",
    "public: __thiscall CVar::CVar(int,struct tagSAFEARRAY *)",
    "public: int __thiscall CNtSid::CopyTo(void *)",
    "protected: int __thiscall CAbstractQl1Parser::prop_list(void)",
    "public: struct IUnknown * __thiscall CUnkInternal::GetUnknown(void)",
    "int __stdcall IsValidElementName2(unsigned short const *,unsigned long,int)",
    "public: __thiscall CUnkInternal::CUnkInternal(class CLifeControl *)",
    "private: int __thiscall CWQLScanner::BuildSWQLColRef(class CFlexArray &,struct SWQLColRef &)",
    "public: __thiscall CEventLogRecord::CEventLogRecord(class CEventLogRecord &)",
    "public: __thiscall CVar::operator class CVarVector *(void)",
    "public: unsigned int __thiscall CBaseMrciCompression::Mrci2Decompress(unsigned char *,unsigned int,unsigned char *,unsigned int)",
    "const CUnkInternal::`vftable'",
    "public: int __thiscall CNtAcl::Resize(unsigned long)",
    "public: struct IUnknown * __thiscall CVar::GetUnknown(void)",
    "public: void __thiscall CFlexArray::SetSize(int)",
    "public: __thiscall CCheckedInCritSec::CCheckedInCritSec(class CCritSec *)",
    "public: class CWQLScanner & __thiscall CWQLScanner::operator=(class CWQLScanner &)",
    "private: static unsigned short const * const CWbemInstallObject::m_pwszRepositoryPath",
    "public: struct tagSAFEARRAY * __thiscall CVarVector::GetSafeArray(int)",
    "public: virtual int __thiscall C9XAce::GetFlags(void)",
    "void * __stdcall GetWMITraceSession(void)",
    "public: struct tagSAFEARRAY * __thiscall CVarVector::GetNewSafeArray(void)",
    "public: int __thiscall CSafeArray::SetVariantAt(int,struct tagVARIANT *)",
    "protected: int __thiscall CEventLog::AddRecord(class CEventLogRecord *)",
    "public: struct IUnknown * __thiscall CVar::GetEmbeddedObject(void)",
    "public: unsigned short * __thiscall Registry::GetMultiStr(unsigned short const *,unsigned long &)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::SetTolerance(struct _tag_WbemQl1Tolerance const &)",
    "private: void __thiscall CWQLScanner::ClearPropRefs(void)",
    "protected: virtual unsigned long __thiscall CExecQueue::UnblockedWaitForSingleObject(void *,unsigned long,class CExecQueue::CThreadRecord *)",
    "public: unsigned long __thiscall CTraceSessionControl::Disable(void)",
    "const CWbemCallSecurity::`vftable'",
    "protected: int __thiscall CDateTimeParser::DateFormat11(unsigned short const *,unsigned short const *,int)",
    "private: void __thiscall CTextTemplate::ConcatWithoutQuotes(class WString &,unsigned short * &)",
    "public: unsigned short * __thiscall CWMITraceSettings::GetSessionName(void)",
    "public: void * * __thiscall CSmallArrayBlob::GetArrayPtr(void)",
    "public: void __thiscall CFlexArray::`default constructor closure'(void)",
    "protected: virtual int __thiscall CExecQueue::IsIdleTooLong(class CExecQueue::CThreadRecord *,unsigned long)",
    "public: static void __stdcall CWbemInstallObject::SetAutoRecoverFolder(unsigned short const *)",
    "public: __thiscall CExecQueue::~CExecQueue(void)",
    "public: void __thiscall CExecQueue::SetThreadLimits(long,long,long)",
    "const CQl1ParseSink::`vftable'",
    "private: int __thiscall CWQLScanner::Pushback(struct WSLexToken *)",
    "public: int __thiscall CEventLog::Open(void)",
    "public: __thiscall CClientOpsNode::~CClientOpsNode(void)",
    "public: __thiscall CVar::CVar(short)",
    "public: static void * __stdcall CWin32DefaultArena::GetArenaHeap(void)",
    "public: struct tagSAFEARRAY * __thiscall CSafeArray::GetArrayCopy(void)",
    "public: struct QL_LEVEL_1_TOKEN & __thiscall QL_LEVEL_1_TOKEN::operator=(struct _tag_WbemQl1Token const &)",
    "public: class CWbemInterval __thiscall CWbemTime::operator-(class CWbemTime const &)const",
    "public: __thiscall CInsertionString::CInsertionString(void)",
    "public: long __thiscall CMUILocaleList::GetFirst_ms_XXX_Locale(unsigned short * *)",
    "public: static void __stdcall CWbemInstallObject::CleanUp(void)",
    "public: __thiscall CBuffer::CBuffer(unsigned char *,unsigned long,int)",
    "public: class CBasicUnloadInstruction & __thiscall CBasicUnloadInstruction::operator=(class CBasicUnloadInstruction const &)",
    "public: __thiscall CMRCIControl::CMRCIControl(void)",
    "public: __thiscall WString::~WString(void)",
    "public: int __thiscall Registry::SetQWORD(unsigned short const *,unsigned __int64)",
    "class CMemoryLog * __stdcall GetMemLogObject(void)",
    "public: __thiscall CUnk::CUnk(class CUnk const &)",
    "public: int __thiscall CEventLog::Close(void)",
    "public: static long __stdcall CWbemInstallObject::FlushRepository(void)",
    "private: static long __stdcall CPublishWMIOperationEvent::GetFunctionPointers(void)",
    "private: void __thiscall CSafeArray::Fatal(char const *)",
    "public: __thiscall Registry::Registry(void)",
    "private: void __thiscall CBaseMrciCompression::mrci2outstring(unsigned int,unsigned int)",
    "public: __thiscall CVar::CVar(struct tagVARIANT *)",
    "public: static void __stdcall CWbemInstallObject::RegisterCMIFlushRepositoryCacheHook(long (__stdcall*)(int))",
    "public: int __thiscall Registry::GetQWORD(unsigned short const *,unsigned __int64 *)",
    "public: int __thiscall CVarVector::GetType(void)",
    "public: static long __stdcall CMUILocale::ms_XXX_Locale_From_LCID(unsigned long,unsigned short * *)",
    "int __stdcall IsValidElementName(unsigned short const *,unsigned long)",
    "public: int __thiscall Registry::DeleteValue(unsigned short const *)",
    "public: int __thiscall CHaltable::IsHalted(void)",
    "public: __thiscall CExecRequest::CExecRequest(class CExecRequest const &)",
    "public: unsigned short * __thiscall CWStringArray::GetAt(int)const",
    "public: __thiscall CNtAcl::~CNtAcl(void)",
    "public: int __thiscall CWbemInterval::operator<(class CWbemInterval)",
    "private: int __thiscall CWQLScanner::ReduceSql92Joins(void)",
    "public: bool __thiscall CLike::Match(unsigned short const *)",
    "const CTimerInstruction::`vftable'",
    "public: int __thiscall WString::operator>(unsigned short const *)const",
    "public: long __thiscall CPropertyName::GetNumElements(void)const",
    "long __stdcall UnregisterDllAppid(struct _GUID)",
    "protected: int __thiscall CAbstractQl1Parser::equiv_operator(void)",
    "private: static long (__stdcall* CWbemInstallObject::m_pfFlushCache)(int)",
    "private: void __thiscall CTimerGenerator::EnsureRunning(void)",
    "public: class CMinMaxLimitControl & __thiscall CMinMaxLimitControl::operator=(class CMinMaxLimitControl const &)",
    "public: class CMRCICompression & __thiscall CMRCICompression::operator=(class CMRCICompression const &)",
    "private: static unsigned short const * const CWbemInstallObject::m_pwszBinaryPath",
    "public: int __thiscall CEnterWbemCriticalSection::IsEntered(void)",
    "public: void * __thiscall CNtSecurityDescriptor::GetPtr(void)",
    "protected: int __thiscall CDateTimeParser::DateFormat5(unsigned short const *,int)",
    "protected: virtual unsigned long __thiscall CExecQueue::CalcSitOutPenalty(long)",
    "public: __thiscall CInstructionTest::CInstructionTest(void)",
    "public: void __thiscall CCritSec::Leave(void)",
    "public: int __thiscall WString::Length(void)const",
    "public: __thiscall CSafeArray::CSafeArray(int,int,int,int)",
    "public: virtual void __thiscall C9XAce::SetFlags(long)",
    "public: static unsigned long __stdcall CExecQueue::QueueWaitForSingleObject(void *,unsigned long)",
    "public: long __thiscall CInstructionQueue::Dequeue(class CTimerInstruction * &,class CWbemTime &)",
    "public: long __thiscall Registry::GetLastError(void)",
    "protected: void __thiscall CFlexQueue::IncrementIndex(int &)",
    "unsigned long __stdcall BreakOnDbgAndRenterLoop(void)",
    "public: void __thiscall CMinMaxLimitControl::SetMin(unsigned long)",
    "private: void __thiscall CBaseMrciCompression::putbits(unsigned int,unsigned int)",
    "private: int __thiscall CWQLScanner::Next(void)",
    "public: __thiscall CTimerInstruction::CTimerInstruction(void)",
    "protected: virtual void __thiscall CExecQueue::SitOutPenalty(long)",
    "public: void __thiscall CWMITraceSettings::SetAreaFlags(unsigned long)",
    "public: static void __stdcall MD5::Transform(void *,unsigned int,unsigned char * const)",
    "public: long __thiscall CHaltable::Resume(void)",
    "protected: void __thiscall CDateTimeParser::ResetTime(int)",
    "public: __thiscall CMemoryLog::CMemoryLog(void)",
    "public: void __thiscall CWMITraceSettings::SetTraceLevel(unsigned char)",
    "public: static class CSmallArrayBlob * __stdcall CSmallArrayBlob::CreateBlob(int)",
    "public: void __thiscall CMemoryLog::Write(long)",
    "public: __thiscall CWbemInstallObject::CWbemInstallObject(void)",
    "private: void __thiscall CSafeArray::CheckType(int)",
    "public: __thiscall CLockableFlexArray::CLockableFlexArray(void)",
    "public: int __thiscall CNtAcl::GetAce(int,class CNtAce &)",
    "public: int __thiscall CWStringArray::Size(void)const",
    "public: class CInCritSec & __thiscall CInCritSec::operator=(class CInCritSec const &)",
    "public: int __thiscall CFlexArray::RemoveAt(int)",
    "public: unsigned short __thiscall CEventLogRecord::GetNumStrings(void)",
    "int __stdcall ReadUI64(unsigned short const *,unsigned __int64 &)",
    "private: static bool CWbemInstallObject::m_bOffline",
    "public: long __thiscall CVarVector::InternalRawArrayAccess(void)",
    "public: unsigned short const * __thiscall CMUILocaleList::GetLocales(void)",
    "public: __thiscall CNtSid::CNtSid(class CNtSid const &)",
    "public: virtual void __thiscall QL_LEVEL_1_RPN_EXPRESSION::AddProperty(class CPropertyName const &)",
    "public: __thiscall CWStringArray::~CWStringArray(void)",
    "public: bool __thiscall CDMTFParser::IsValid(void)",
    "private: long __thiscall CWbemCallSecurity::CloneThreadToken(unsigned long)",
    "void __stdcall BlobClear(struct tagBLOB *)",
    "public: void __thiscall CMRCIControl::AbortCompression(void)",
    "public: unsigned short * __thiscall CPropertyName::GetText(void)",
    "public: class CDatePart & __thiscall CDatePart::operator=(class CDatePart const &)",
    "public: virtual unsigned long __thiscall CNtAce::GetAccessMask(void)",
    "public: unsigned short * __thiscall CAbstractQl1Parser::CurrentToken(void)",
    "public: virtual __thiscall QL1_Parser::~QL1_Parser(void)",
    "private: unsigned short * __thiscall CTextTemplate::ProcessArray(struct tagVARIANT const &,unsigned short *)",
    "protected: int __thiscall CDateTimeParser::IsValidHourNumber(unsigned short *,unsigned short const *)",
    "public: void __thiscall CLike::SetExpression(unsigned short const *,unsigned short)",
    "public: void __thiscall CPropertyName::operator=(class CPropertyName const &)",
    "public: class WString & __thiscall WString::StripWs(int)",
    "public: void __thiscall CSmallArrayBlob::Trim(void)",
    "public: class CUnkInternal & __thiscall CUnkInternal::operator=(class CUnkInternal const &)",
    "public: class CWbemTime __thiscall CEventLogRecord::GetCreationTime(void)",
    "public: unsigned short const * __thiscall CLike::GetExpression(void)",
    "public: int __thiscall CNtSid::GetTextSid(unsigned short *,unsigned long *)",
    "public: virtual int __thiscall CContainerControl::ObjectCreated(struct IUnknown *)",
    "public: __thiscall CVar::operator unsigned short *(void)",
    "public: unsigned short const * * __thiscall CWStringArray::GetArrayPtr(void)",
    "public: void __thiscall CClientOpsNode::SetInfo(void *)",
    "protected: int __thiscall CDateTimeParser::CheckDateFormat(unsigned short const *,int)",
    "public: void __thiscall CPropertyName::SetHandle(void *)",
    "public: int __thiscall CSafeArray::SetByteAt(int,unsigned char)",
    "public: long __thiscall CNtSid::GetTextSid(unsigned short * *)",
    "public: static long __stdcall CPublishWMIOperationEvent::Publish(unsigned long,unsigned long,unsigned short *,unsigned short *,unsigned short *,unsigned long,unsigned short *)",
    "public: class CVarVector * __thiscall CVar::GetVarVector(void)",
    "public: virtual long __stdcall CWbemCallSecurity::QueryBlanket(unsigned long *,unsigned long *,unsigned short * *,unsigned long *,unsigned long *,void * *,unsigned long *)",
    "public: __thiscall CVar::CVar(int,class auto_bstr)",
    "public: virtual unsigned short const * __thiscall CExecQueue::GetType(void)",
    "const CAbstractQl1Parser::`vftable'",
    "public: __thiscall CExecQueue::CExecQueue(class CExecQueue &)",
    "public: int __thiscall CSafeArray::SetDispatchAt(int,struct IDispatch *)",
    "public: __thiscall CVar::operator long(void)",
    "public: int __thiscall CSafeArray::Trim(void)",
    "public: __thiscall CFlexArray::CFlexArray(class CFlexArray &)",
    "int __stdcall EnablePrivilege(unsigned long,long)",
    "public: int __thiscall CWbemTime::GetSYSTEMTIME(struct _SYSTEMTIME *)const",
    "public: int __thiscall CNtSecurityDescriptor::HasOwner(void)",
    "public: unsigned int __thiscall CMRCICompression::UncompressBuffer(unsigned char *,unsigned long,unsigned char *,unsigned long,enum CMRCICompression::CompressionLevel)",
    "public: static int __stdcall CWin32DefaultArena::ValidateMemSize(int)",
    "public: unsigned char __thiscall CWMITraceSettings::GetTraceLevel(void)",
    "public: int __thiscall CVarVector::Status(void)",
    "public: void __thiscall CStaticCritSec::Leave(void)",
    "public: struct IDispatch * __thiscall CSafeArray::GetDispatchAt(int)",
    "public: virtual int __thiscall CBasicUnloadInstruction::GetInstructionType(void)",
    "public: long __thiscall CSafeArray::Unaccess(void)",
    "private: __thiscall CWbemCallSecurity::CWbemCallSecurity(void)",
    "public: __thiscall CHex::CHex(long)",
    "public: static int __stdcall CDateTimeParser::CheckDMTFDateTimeFormat(unsigned short const *,int,int)",
    "protected: void __thiscall CEventLogRecord::AddInsertionString(class CInsertionString &)",
    "public: __thiscall SZLess::SZLess(void)",
    "public: int __thiscall CVarVector::Add(class CVar *)",
    "protected: int __thiscall CDateTimeParser::CheckTimeFormat(unsigned short const *,int)",
    "int __stdcall isunialphanum(unsigned short)",
    "public: unsigned short * __thiscall QL_LEVEL_1_RPN_EXPRESSION::GetText(void)",
    "public: void __thiscall CVar::SetByte(unsigned char)",
    "public: void __thiscall WString::BindPtr(unsigned short *)",
    "public: void __thiscall QL_LEVEL_1_TOKEN::Dump(struct _iobuf *)",
    "public: __thiscall CVar::CVar(struct _FILETIME *)",
    "public: __thiscall CVar::operator struct tagBLOB *(void)",
    "private: long __thiscall CMUILocaleList::AppendLocale(unsigned short const *)",
    "public: struct _GUID * __thiscall CVar::GetClsId(void)",
    "public: int __thiscall CWbemInterval::IsFinite(void)const",
    "public: bool __thiscall CExecRequest::IsOk(void)",
    "public: __thiscall CBuffer::CBuffer(class CBuffer const &)",
    "int __stdcall SetObjectAccess2(void *)",
    "public: unsigned long __thiscall CBuffer::GetIndex(void)",
    "public: int __thiscall CVar::ChangeTypeToEx(unsigned short,unsigned long)",
    "protected: static int __cdecl CSmallArrayBlob::CompareEls(void const *,void const *)",
    "public: class CWbemInterval __thiscall CWbemInterval::operator+(class CWbemInterval)const",
    "public: static void __stdcall CWbemInstallObject::UnregisterCMIFlushRepositoryCacheHook(void)",
    "public: class CExecRequest * __thiscall CExecRequest::GetNext(void)",
    "int __stdcall ReadI64(unsigned short const *,__int64 &)",
    "public: unsigned char * __thiscall CBuffer::GetRawData(void)",
    "public: int __thiscall CSafeArray::AddUnknown(struct IUnknown *)",
    "public: class CWbemTime __thiscall CWbemTime::operator+(class CWbemTimeSpan const &)const",
    "public: int __thiscall CVar::operator==(class CVar &)",
    "public: void __thiscall CExecRequest::SetWhenDoneHandle(void *)",
    "private: static long __stdcall CWbemInstallObject::GetEnvironmentValue(unsigned short const *,unsigned short const * *)",
    "private: int __thiscall CWQLScanner::ReduceSql89Joins(void)",
    "public: virtual void * __thiscall CWin32DefaultArena::Alloc(unsigned long)",
    "public: __thiscall CMRCICompression::CMRCICompression(void)",
    "public: __thiscall CContainerControl::CContainerControl(struct IUnknown *)",
    "public: unsigned short * __thiscall WString::UnbindPtr(void)",
    "public: virtual __thiscall CNtAce::~CNtAce(void)",
    "public: __thiscall CNtSid::CNtSid(enum CNtSid::SidType)",
    "protected: void __thiscall CSmallArrayBlob::Initialize(int)",
    "public: int __thiscall CVar::CanDelete(void)",
    "public: unsigned long __thiscall CNtAcl::GetSize(void)",
    "public: class WString __thiscall WString::operator()(int,int)const",
    "private: static struct ClsidDllMapping * CWbemInstallObject::m_rgClsidDllMap",
    "public: int __thiscall CNtSid::GetInfo(unsigned short * *,unsigned short * *,unsigned long *)",
    "public: __thiscall CDatePart::~CDatePart(void)",
    "public: int __thiscall CWbemTime::operator>=(class CWbemTime const &)const",
    "public: long __thiscall CBuffer::SetSize(unsigned long)",
    "unsigned long __stdcall GetQFDN_Ipv6(unsigned short *,unsigned short *,int,int)",
    "private: static int CStaticCritSec::anyFailed_",
    "public: __thiscall CFlexQueue::CFlexQueue(int)",
    "public: unsigned int __thiscall CDateTimeParser::GetYear(void)",
    "protected: int __thiscall CDateTimeParser::TimeFormat2(unsigned short const *,int)",
    "public: bool __thiscall CDMTFParser::IsWildcard(int)",
    "public: int __thiscall CVarVector::RemoveAt(int)",
    "private: int __thiscall CWQLScanner::SelectList(void)",
    "protected: int __thiscall CDateTimeParser::TimeFormat7(unsigned short const *,int)",
    "private: static unsigned long (__stdcall* CPublishWMIOperationEvent::m_fEventWrite)(unsigned __int64,struct _EVENT_DESCRIPTOR *,unsigned long,struct _EVENT_DATA_DESCRIPTOR *)",
    "public: class CSmallArrayBlob * __thiscall CSmallArrayBlob::InsertAt(int,void *)",
    "public: virtual long __thiscall CMinMaxLimitControl::Remove(unsigned long)",
    "public: class CEventLog & __thiscall CEventLog::operator=(class CEventLog const &)",
    "public: class CInstructionQueue & __thiscall CInstructionQueue::operator=(class CInstructionQueue const &)",
    "public: __thiscall SZLess::SZLess(struct SZLess const &)",
    "public: class WString & __thiscall WString::TruncAtRToken(unsigned short)",
    "public: __thiscall CNtSecurityDescriptor::~CNtSecurityDescriptor(void)",
    "private: static unsigned __int64 CPublishWMIOperationEvent::m_publisher",
    "private: void __thiscall CBaseMrciCompression::charbuf(unsigned int)",
    "private: int __thiscall CSafeArray::AddScalar(union SA_ArrayScalar)",
    "long __stdcall RetrieveSidFromCall(class CNtSid &)",
    "public: __thiscall CWin32DefaultArena::CWin32DefaultArena(class CWin32DefaultArena const &)",
    "public: virtual long __stdcall CWbemCallSecurity::ImpersonateClient(void)",
    "public: void __thiscall CTextTemplate::`default constructor closure'(void)",
    "const QL1_Parser::`vftable'",
    "private: bool __thiscall CIdentitySecurity::EncryptedCall(void)",
    "public: int __thiscall CMRCICompression::UncompressFile(unsigned short const *,unsigned short const *)",
    "public: class CWbemInterval __thiscall CWbemTime::RemainsUntil(class CWbemTime const &)const",
    "int __stdcall CriticalFailADAPTrace(char const *)",
    "public: static class CWbemInterval __stdcall CBasicUnloadInstruction::staticRead(struct IWbemServices *,struct IWbemContext *,unsigned short const *)",
    "public: __thiscall CVar::operator short(void)",
    "const CExecRequest::`vftable'",
    "long __stdcall GetSecurityDescriptorFromParameters(class CNtSecurityDescriptor *,struct IWbemClassObject *,bool *,class CNtSecurityDescriptor * *,unsigned long *)",
    "private: static void * CMUILocale::m_fLocaleNameToLCID",
    "public: int __thiscall WString::operator>=(unsigned short const *)const",
    "public: class WString __thiscall WString::EscapeQuotes(void)const",
    "public: class CLimitControl & __thiscall CLimitControl::operator=(class CLimitControl const &)",
    "public: int __thiscall CAbstractQl1Parser::Parse(class CQl1ParseSink *,int)",
    "int __stdcall IsInAdminGroup(void)",
    "public: int __thiscall CSafeArray::GetRawData(void *,int)",
    "public: __thiscall CNtAcl::CNtAcl(class CNtAcl const &)",
    "public: void __thiscall CEventLog::`default constructor closure'(void)",
    "public: __thiscall CInsertionString::CInsertionString(long)",
    "public: int __thiscall CMRCIControl::AbortRequested(void)",
    "protected: class CSmallArrayBlob * __thiscall CSmallArrayBlob::Grow(void)",
    "public: class CSmallArrayBlob & __thiscall CSmallArrayBlob::operator=(class CSmallArrayBlob const &)",
    "protected: void __thiscall CAbstractQl1Parser::DeletePropertyName(void)",
    "public: virtual __thiscall C9XAce::~C9XAce(void)",
    "public: __thiscall CTextTemplate::CTextTemplate(class CTextTemplate const &)",
    "private: unsigned short * __thiscall CTextTemplate::HandleEmbeddedObjectProperties(unsigned short *,struct IWbemClassObject *)",
    "const CArena::`vftable'",
    "public: long __thiscall CExecQueue::EnqueueAndWait(class CExecRequest *)",
    "private: static long __stdcall CMUILocale::GetFunctionPointers(void)",
    "protected: int __thiscall CAbstractQl1Parser::prop_list_2(void)",
    "protected: int __thiscall CDateTimeParser::DateFormat2(unsigned short const *,int)",
    "public: bool __thiscall CNtSid::IsUser(void)",
    "public: unsigned short const * __thiscall CPropertyName::GetStringAt(long)const",
    "int __cdecl ErrorTrace(char,char const *,...)",
    "public: int __thiscall CVar::SetBSTR(class auto_bstr)",
    "public: long __thiscall CNtSecurityDescriptor::GetSacl(class CNtAcl * *)",
    "public: __thiscall CVarVector::CVarVector(int,struct tagSAFEARRAY *,int)",
    "public: virtual unsigned long __thiscall CNtAce::GetStatus(void)",
    "public: static class CWbemInterval __stdcall CWbemInterval::GetInfinity(void)",
    "const CBaseAce::`vftable'",
    "public: virtual void * __thiscall CWbemCallSecurity::GetToken(void)",
    "public: static long __stdcall CMUILocale::_GetSystemDefaultLocale(unsigned short * *,unsigned long)",
    "public: void __thiscall CFlexQueue::ResetQueue(void)",
    "public: void __thiscall CVar::SetRaw(int,void *,int)",
    "public: __thiscall CMRCICompression::~CMRCICompression(void)",
    "public: int __thiscall CDMTFParser::GetValue(int)",
    "public: int __thiscall CNtSecurityDescriptor::SetSacl(class CNtAcl *)",
    "public: class CFlexQueue & __thiscall CFlexQueue::operator=(class CFlexQueue const &)",
    "public: void __thiscall QL_LEVEL_1_RPN_EXPRESSION::Release(void)",
    "public: void __thiscall CWbemTime::Set100nss(__int64)",
    "protected: virtual void __thiscall CExecQueue::ShutdownThread(class CExecQueue::CThreadRecord *)",
    "protected: __thiscall CDateTimeParser::CDateTimeParser(void)",
    "public: void __thiscall CWbemTime::operator=(class CWbemTime const &)",
    "public: __thiscall CRegistryMinMaxLimitControl::CRegistryMinMaxLimitControl(class CRegistryMinMaxLimitControl const &)",
    "public: class CNtAcl & __thiscall CNtAcl::operator=(class CNtAcl const &)",
    "int __stdcall WbemGetMachineShutdown(void)",
    "const CWin32DefaultArena::`vftable'",
    "void __stdcall BlobAssign(struct tagBLOB *,void *,unsigned long,int)",
    "public: void * __thiscall CPropertyName::GetHandle(void)",
    "public: class CWbemInterval & __thiscall CWbemInterval::operator=(class CWbemInterval const &)",
    "public: __thiscall CCheckedInCritSec::~CCheckedInCritSec(void)",
    "private: struct WSLexToken * __thiscall CWQLScanner::ExtractNext(int)",
    "public: class CSmallArrayBlob * __thiscall CSmallArrayBlob::RemoveAt(int,void * *)",
    "unsigned long __stdcall GetLoggingLevelEnabled(void)",
    "public: virtual long __thiscall CExecQueue::Enqueue(class CExecRequest *,void * *)",
    "public: int __thiscall Registry::GetType(unsigned short const *,unsigned long *)",
    "protected: int __thiscall CDateTimeParser::IsValidMonthNumber(unsigned short *,unsigned short const *)",
    "protected: int __thiscall CAbstractQl1Parser::FlipOperator(int)",
    "public: static int __stdcall CNtSecurity::IsUserInGroup(void *,class CNtSid &,int *)",
    "public: void __thiscall CInstructionQueue::BreakWait(void)",
    "int __stdcall IsNtSetupRunning(void)",
    "private: static struct DllModuleHandle * CWbemInstallObject::m_rgDllModules",
    "public: __thiscall CWStringArray::CWStringArray(class CWStringArray &)",
    "public: virtual long __thiscall CWbemCallSecurity::GetActiveImpersonation(void)",
    "public: long __thiscall CVarVector::UnaccessRawArray(void)",
    "public: __thiscall CAbstractQl1Parser::CAbstractQl1Parser(class CAbstractQl1Parser const &)",
    "public: class CEventLogRecord & __thiscall CEventLogRecord::operator=(class CEventLogRecord &)",
    "protected: int __thiscall CAbstractQl1Parser::aggregate_within(void)",
    "public: virtual long __thiscall CWbemCallSecurity::CloneThreadContext(int)",
    "public: char * __thiscall WString::GetLPSTR(void)const",
    "int __stdcall IsAdmin(void *)",
    "public: virtual __thiscall CUnkInternal::~CUnkInternal(void)",
    "public: int __thiscall CWbemTime::operator<=(class CWbemTime const &)const",
    "public: long __thiscall CHaltable::WaitForResumption(void)",
    "public: __thiscall WString::WString(unsigned long,struct HINSTANCE__ *)",
    "public: static unsigned short * __stdcall CWin32DefaultArena::WbemSysAllocStringByteLen(char const *,unsigned int)",
    "public: int __thiscall CNtAcl::GetAclSizeInfo(unsigned long *,unsigned long *)",
    "public: void __thiscall CVarVector::FillCVarAt(int,class CVar &)",
    "const CLifeControl::`vftable'",
    "public: __thiscall Registry::Registry(struct HKEY__ *,unsigned long,unsigned short const *)",
    "public: int __thiscall Registry::GetStr(unsigned short const *,unsigned short * *)",
    "public: __thiscall CLockableFlexArray::~CLockableFlexArray(void)",
    "public: int __thiscall CEventLog::Report(unsigned short,unsigned long,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString,class CInsertionString)",
    "public: long __thiscall CRegistryMinMaxLimitControl::Reread(void)",
    "public: class WString & __thiscall WString::operator=(class WString const &)",
    "public: int __thiscall CNtSecurityDescriptor::SetGroup(class CNtSid *)",
    "protected: static unsigned long __stdcall CExecQueue::_ThreadEntry(void *)",
    "public: virtual unsigned long __thiscall C9XAce::GetAccessMask(void)",
    "public: class Registry & __thiscall Registry::operator=(class Registry const &)",
    "public: virtual int __thiscall CUnk::OnInitialize(void)",
    "public: char __thiscall CVar::GetChar(void)",
    "public: int __thiscall CWbemTime::GetFILETIME(struct _FILETIME *)const",
    "protected: int __thiscall CAbstractQl1Parser::trailing_ident_expr(void)",
    "void __stdcall DumpClientOps(class CClientOpsNode *)",
    "public: class CWStringArray & __thiscall CWStringArray::operator=(class CWStringArray &)",
    "public: static unsigned short const * __stdcall CWbemInstallObject::GetBinaryPath(void)",
    "public: int __thiscall CWStringArray::InsertAt(int,unsigned short const *)",
    "public: int __thiscall CCheckedInCritSec::IsEntered(void)",
    "public: unsigned short * __thiscall CSafeArray::GetBSTRAtThrow(int)",
    "public: unsigned short * __thiscall CVarVector::GetText(long,long)",
    "public: __thiscall CUnk::CUnk(class CLifeControl *,struct IUnknown *)",
    "public: int __thiscall CMRCICompression::CompressFile(unsigned short const *,unsigned short const *,unsigned long,enum CMRCICompression::CompressionLevel,class CMRCIControl *)",
    "public: int __thiscall CSafeArray::AddVariant(struct tagVARIANT *)",
    "protected: int __thiscall CDateTimeParser::TimeFormat4(unsigned short const *,int)",
    "private: void __thiscall CBaseMrciCompression::expandstring(unsigned char * *,unsigned int,unsigned int)",
    "protected: int __thiscall CDateTimeParser::IsValidColonMillisecond(unsigned short *,unsigned short const *)",
    "public: virtual __thiscall CLimitControl::~CLimitControl(void)",
    "public: int __thiscall WString::ExtractToken(unsigned short const *,class WString &)"
  ],
  "wbiosrvc.dll": [
    "ServiceMain"
  ],
  "wcncsvc.dll": [
    "WcnServiceMain",
    "SvchostPushServiceGlobals"
  ],
  "wcnwiz.dll": [
    "DllCanUnloadNow",
    "LaunchWriteToUSBWizard",
    "DllGetClassObject",
    "RunWcnWizardForDeviceW"
  ],
  "wdc.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "WdcParseLegacyFile",
    "DllGetClassObject",
    "DllRegisterServer",
    "WdcRunTaskAsInteractiveUser"
  ],
  "wdi.dll": [
    "WdiSetFeedback",
    "WdiGetQueuedResolutionExpirationDate",
    "WdiCloseInstance",
    "WdiGetQueuedResolutionId",
    "WdiGetScenarioInstanceFilePath",
    "WdiGetScenarioSourceName",
    "WdiGetResult",
    "WdiGetScenarioTypeName",
    "WdiGetScenarioInstanceId",
    "WdiGetInstanceId",
    "WdiGetParameterByIndex",
    "WdiAddFileToInstance",
    "WdiSetProgress",
    "WdiQueueCurrentResolution",
    "WdipLaunchRunDLLUserHost",
    "WdiGetLoggerSnapshotPath",
    "WdiGetScenarioInfo",
    "WdiLaunchQueuedResolution",
    "WdipLaunchLocalHost",
    "WdiGetQueuedResolutionName",
    "WdiGetParameterName",
    "WdiGetProgress",
    "WdiGetQueuedResolutionPriority",
    "WdiGetEvent",
    "WdiCreateInstance",
    "WdiGetParameterDiagnosticModuleId",
    "WdiGetScenarioIcon",
    "WdiGetInstanceFilePath",
    "WdiGetParameterCount",
    "WdiImpersonateClient",
    "WdiGetParameterByName",
    "WdiGetParameterData",
    "WdiGetQueuedResolutionAudience",
    "WdiGetScenarioInstanceCreatedDate",
    "WdiOpenInstance",
    "WdiGetParameterFlags",
    "WdiCancel",
    "WdiSetResolution",
    "WdiSetProblemDetectionResult",
    "WdiIsQueuedResolutionAdmin",
    "DllCanUnloadNow",
    "WdiDeleteQueuedResolution",
    "WdiDiagnose",
    "WdiAddParameter",
    "WdiGetScenarioInstances",
    "WdiGetClientActivityId",
    "WdiGetClientLCID",
    "WdiGetParameterDataLength",
    "DllGetClassObject",
    "WdiRevertToSelf",
    "WdiResolve",
    "WdiGetDiagnosticModuleId",
    "ServiceMain"
  ],
  "wdiasqmmodule.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "wdigest.dll": [
    "CredentialUpdateNotify",
    "SsiCredentialsUpdateNotify",
    "CredentialUpdateRegister",
    "SpInstanceInit",
    "SpLsaModeInitialize",
    "CredentialUpdateFree",
    "SpInitialize",
    "SpUserModeInitialize",
    "SsiCredentialsUpdateFree"
  ],
  "wdscore.dll": [
    "GetMajorTask",
    "WdsInitializeDataUInt32",
    "protected: void __thiscall CDynamicArray::Init(unsigned int)",
    "WdsSetupLogMessageA",
    "public: __thiscall CDynamicArray::operator struct SKey *(void)const",
    "WdsSetAssertFlags",
    "WdsLogDestroy",
    "WdsEnableExitEx",
    "WdsGetBlackboardUintPtr",
    "WdsInitializeDataBinary",
    "WdsGetSetupLog",
    "g_bEnableDiagnosticMode",
    "WdsIsDiagnosticModeEnabled",
    "WdsDestroyBlackboard",
    "WdsPackCollection",
    "WdsInitializeDataUInt64",
    "WdsExecuteWorkQueueEx",
    "public: struct SEnumBinContext * & __thiscall CDynamicArray::operator[](unsigned int)",
    "ConstructPartialMsgIfW",
    "WdsDeleteBlackboardValue",
    "public: __thiscall CDynamicArray::CDynamicArray(unsigned int)",
    "public: int __thiscall CDynamicArray::SetSize(unsigned long)",
    "WdsExitImmediately",
    "WdsGetAssertFlags",
    "public: class CDynamicArray & __thiscall CDynamicArray::operator=(class CDynamicArray const &)",
    "WdsSetUILanguage",
    "WdsAllocCollection",
    "WdsGetBlackboardValue",
    "public: unsigned __int64 & __thiscall CDynamicArray::operator[](unsigned int)",
    "ConstructPartialMsgVW",
    "WdsSetupLogMessageW",
    "public: struct SValue * __thiscall CDynamicArray::operator->(void)const",
    "WdsLogUnRegisterProvider",
    "public: int __thiscall CDynamicArray::Add(struct SEnumBinContext * &)",
    "WdsSetBlackboardValue",
    "WdsEnableExit",
    "WdsGetBlackboardStringW",
    "WdsEnumFirstCollectionValue",
    "WdsCollectionGetValue",
    "public: unsigned int __thiscall CDynamicArray::GetSize(void)const",
    "WdsPublishImmediateAsync",
    "WdsIterateQueue",
    "public: unsigned short * __thiscall CDynamicArray::GetBuffer(unsigned int)",
    "WdsAbortBlackboardItemEnum",
    "WdsGetCurrentExecutionGroup",
    "WdsInitializeDataStringW",
    "public: struct CBlackboardFactory::SKeeperEntry & __thiscall CDynamicArray::ElementAt(unsigned int)",
    "WdsLogUnRegStockProviders",
    "WdsUnsubscribe",
    "WdsAddModule",
    "public: int __thiscall CDynamicArray::Add(struct CBlackboardFactory::SKeeperEntry &)",
    "WdsCopyBlackboardItemsEx",
    "WdsLogRegisterProvider",
    "GetMinorTaskA",
    "WdsLogCreate",
    "WdsEnumFirstBlackboardItem",
    "CurrentIP",
    "WdsUnpackCollection",
    "WdsSetupLogInit",
    "WdsSeqAlloc",
    "WdsGetTempDir",
    "public: int __thiscall CDynamicArray::Add(unsigned __int64 &)",
    "WdsUnsubscribeEx",
    "WdsPublishEx",
    "WdsLockExecutionGroup",
    "WdsAddUsmtLogStack",
    "WdsInitialize",
    "public: int __thiscall CDynamicArray::Add(struct CBlackboardFactory::SKeeperEntry &,unsigned int &)",
    "WdsUnlockExecutionGroup",
    "public: struct SKey * __thiscall CDynamicArray::operator->(void)const",
    "WdsLogRegStockProviders",
    "EndMajorTask",
    "StartMajorTask",
    "WdsCollectionAddValue",
    "WdsSetupLogDestroy",
    "ConstructPartialMsgVA",
    "WdsDuplicateData",
    "WdsSubscribeEx",
    "WdsGetBlackboardStringA",
    "public: struct SValue * __thiscall CDynamicArray::GetBuffer(unsigned int)",
    "WdsValidBlackboard",
    "public: void __thiscall CDynamicArray::`default constructor closure'(void)",
    "WdsPublishImmediateEx",
    "WdsInitializeCallbackArray",
    "public: __thiscall CDynamicArray::~CDynamicArray(void)",
    "WdsExecuteWorkQueue",
    "public: __thiscall CDynamicArray::operator struct SValue *(void)const",
    "ConstructPartialMsgIfA",
    "WdsCreateBlackboard",
    "WdsCopyBlackboardItems",
    "StartMinorTask",
    "WdsInitializeDataStringA",
    "WdsGenericSetupLogInit",
    "WdsExecuteWorkQueue2",
    "WdsSetNextExecutionGroup",
    "WdsFreeData",
    "WdsEnumNextBlackboardItem",
    "WdsPublish",
    "WdsEnumNextCollectionValue",
    "WdsExitImmediatelyEx",
    "WdsLockBlackboardValue",
    "WdsIterateOfflineQueue",
    "public: __thiscall CDynamicArray::operator unsigned short *(void)const",
    "public: unsigned short & __thiscall CDynamicArray::ElementAt(unsigned int)",
    "GetMinorTask",
    "WdsFreeCollection",
    "WdsGetBlackboardBinaryData",
    "public: void __thiscall CDynamicArray::RemoveAll(void)",
    "public: unsigned char * __thiscall CDynamicArray::GetBuffer(unsigned int)",
    "EndMinorTask",
    "WdsEnableDiagnosticMode",
    "WdsLogStructuredException",
    "WdsSeqFree",
    "g_Kernel32",
    "WdsPublishOffline",
    "public: void __thiscall CDynamicArray::RemoveItemFromTail(void)",
    "WdsGetPointer",
    "WdsTerminate",
    "GetMajorTaskA",
    "WdsDeleteEvent"
  ],
  "webcheck.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "webio.dll": "No exports",
  "webservices.dll": [
    "WsSetListenerProperty",
    "WsStartReaderCanonicalization",
    "WsCreateMessageForChannel",
    "WsCreateMetadata",
    "WsResetChannel",
    "WsResetServiceProxy",
    "WsRemoveMappedHeader",
    "WsReadArray",
    "WsReadQualifiedName",
    "WsCreateReader",
    "WsFlushBody",
    "WsGetReaderProperty",
    "WsGetSecurityTokenProperty",
    "WsGetHeader",
    "WsWriteType",
    "WsRegisterOperationForCancel",
    "WsWriteChars",
    "WsSendFaultMessageForError",
    "WsGetHeapProperty",
    "WsCreateServiceProxyFromTemplate",
    "WsSetReaderPosition",
    "WsFillBody",
    "WsResetMetadata",
    "WsWriteEndAttribute",
    "WsResetListener",
    "WsPushBytes",
    "WsDateTimeToFileTime",
    "WsWriteEnvelopeStart",
    "WsInitializeMessage",
    "WsWriteArray",
    "WsWriteNode",
    "WsSetFaultErrorDetail",
    "WsStartWriterCanonicalization",
    "WsReadEndAttribute",
    "WsReadMetadata",
    "WsAbortServiceHost",
    "WsOpenServiceProxy",
    "WsReadBody",
    "WsWriteXmlnsAttribute",
    "WsGetPolicyProperty",
    "WsFreeError",
    "WsCreateFaultFromError",
    "WsGetXmlAttribute",
    "WsOpenListener",
    "WsGetSecurityContextProperty",
    "WsEndReaderCanonicalization",
    "WsGetMessageProperty",
    "WsCopyError",
    "WsAsyncExecute",
    "WsFreeMetadata",
    "WsReceiveMessage",
    "WsWriteEndCData",
    "WsCreateChannel",
    "WsGetErrorProperty",
    "WsReadCharsUtf8",
    "WsXmlStringEquals",
    "WsFreeServiceProxy",
    "WsReadToStartElement",
    "WsOpenChannel",
    "WsCombineUrl",
    "WsWriteAttribute",
    "WsGetPrefixFromNamespace",
    "WsFreeHeap",
    "WsRemoveHeader",
    "WsCreateXmlSecurityToken",
    "WsReadBytes",
    "WsCreateServiceEndpointFromTemplate",
    "WsFreeServiceHost",
    "WsWriteQualifiedName",
    "WsGetServiceProxyProperty",
    "WsVerifyXmlNCName",
    "WsCopyNode",
    "WsDecodeUrl",
    "WsCloseListener",
    "WsCreateServiceHost",
    "WsCreateMessage",
    "WsCreateServiceProxy",
    "WsResetError",
    "WsWriteText",
    "WsAddMappedHeader",
    "WsAddErrorString",
    "WsCreateHeap",
    "WsMoveWriter",
    "WsRequestSecurityToken",
    "WsCreateChannelForListener",
    "WsWriteStartElement",
    "WsWriteMessageStart",
    "WsGetFaultErrorDetail",
    "WsRemoveNode",
    "WsAbortChannel",
    "WsReadValue",
    "WsResetMessage",
    "WsWriteValue",
    "WsAbandonMessage",
    "WsAddressMessage",
    "WsGetListenerProperty",
    "WsFreeChannel",
    "WsFreeListener",
    "WsTrimXmlWhitespace",
    "WsGetPolicyAlternativeCount",
    "WsFillReader",
    "WsSetChannelProperty",
    "WsFlushWriter",
    "WsEncodeUrl",
    "WsGetMetadataProperty",
    "WsOpenServiceHost",
    "WsSetHeader",
    "WsAlloc",
    "WsCloseServiceHost",
    "WsCreateWriter",
    "WsWriteXmlBuffer",
    "WsGetServiceHostProperty",
    "WsGetCustomHeader",
    "WsRevokeSecurityContext",
    "WsReadStartElement",
    "WsWriteStartAttribute",
    "WsGetFaultErrorProperty",
    "WsSetErrorProperty",
    "WsWriteEnvelopeEnd",
    "WsCloseChannel",
    "WsWriteMessageEnd",
    "WsWriteStartCData",
    "WsGetDictionary",
    "WsGetHeaderAttributes",
    "WsWriteEndElement",
    "WsMarkHeaderAsUnderstood",
    "WsGetMappedHeader",
    "WsReadXmlBufferFromBytes",
    "WsSetInputToBuffer",
    "WsReadXmlBuffer",
    "WsCreateXmlBuffer",
    "WsGetMissingMetadataDocumentAddress",
    "WsAddCustomHeader",
    "WsPullBytes",
    "WsGetChannelProperty",
    "WsGetWriterProperty",
    "WsReadMessageStart",
    "WsSetOutputToBuffer",
    "WsReadAttribute",
    "WsGetMetadataEndpoints",
    "WsSetWriterPosition",
    "WsWriteElement",
    "WsRequestReply",
    "WsSetFaultErrorProperty",
    "WsFreeMessage",
    "WsReadEnvelopeEnd",
    "WsMatchPolicyAlternative",
    "WsFileTimeToDateTime",
    "WsWriteCharsUtf8",
    "WsSkipNode",
    "WsRemoveCustomHeader",
    "WsSendMessage",
    "WsReadChars",
    "WsReadEnvelopeStart",
    "WsCreateListener",
    "WsAcceptChannel",
    "WsAbortServiceProxy",
    "WsCheckMustUnderstandHeaders",
    "WsReadEndElement",
    "WsGetReaderPosition",
    "WsResetHeap",
    "WsReadMessageEnd",
    "WsReadStartAttribute",
    "WsWriteEndStartElement",
    "WsGetNamespaceFromPrefix",
    "WsGetErrorString",
    "WsReadElement",
    "WsAbortListener",
    "WsFreeReader",
    "WsReadEndpointAddressExtension",
    "WsAbandonCall",
    "WsMoveReader",
    "WsEndWriterCanonicalization",
    "WsCreateError",
    "WsGetWriterPosition",
    "WsGetReaderNode",
    "WsReadType",
    "WsSetOutput",
    "WsSetInput",
    "WsGetOperationContextProperty",
    "WsWriteXmlBufferToBytes",
    "WsCall",
    "WsSendReplyMessage",
    "WsShutdownSessionChannel",
    "WsFindAttribute",
    "WsWriteBody",
    "WsWriteBytes",
    "WsReadNode",
    "WsFreeWriter",
    "WsCloseServiceProxy",
    "WsSetMessageProperty",
    "WsResetServiceHost",
    "WsFreeSecurityToken"
  ],
  "wecapi.dll": [
    "EcDeleteSubscription",
    "EcIsConfigRequired",
    "EcQuickConfig",
    "EcEnumNextSubscription",
    "EcSetSubscriptionProperty",
    "EcRemoveObjectArrayElement",
    "EcOpenSubscription",
    "EcGetSubscriptionRunTimeStatus",
    "EcInsertObjectArrayElement",
    "EcGetObjectArraySize",
    "EcGetObjectArrayProperty",
    "EcClose",
    "EcSetObjectArrayProperty",
    "EcGetSubscriptionProperty",
    "EcSaveSubscription",
    "EcOpenSubscriptionEnum",
    "EcRetrySubscription"
  ],
  "wecsvc.dll": [
    "DllRegisterServer",
    "DllUnregisterServer",
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "wer.dll": [
    "WerpGetDynamicParameter",
    "WerpDestroyWerString",
    "WerpAddFile",
    "WerpSetIntegratorReportId",
    "WerpAddMemoryBlock",
    "WerReportSetParameter",
    "WerpShowUpsellUI",
    "WerpPromtUser",
    "WerpGetReportSettings",
    "WerpGetSigParamByIndex",
    "WerpCancelUpload",
    "WerpGetReportType",
    "WerpGetStoreLocation",
    "WerpReportCancel",
    "WerpCreateMachineStore",
    "WerReportCloseHandle",
    "WerpGetStorePath",
    "WerpSetReportInformation",
    "WerpGetWow64Process",
    "WerpDownloadResponseTemplate",
    "WerpAddTextToReport",
    "WerReportAddFile",
    "WerpGetEventType",
    "WerpGetReportFlags",
    "WerpGetResponseId",
    "WerpEnumerateStoreStart",
    "WerpOpenMachineArchive",
    "WerpExtractReportFiles",
    "WerpIsDisabled",
    "WerpOpenUserArchive",
    "WerpLaunchResponse",
    "WerpGetUIParamByIndex",
    "WerpGetUploadTime",
    "WerpGetStoreType",
    "WerReportAddDump",
    "WerSysprepGeneralize",
    "WerpLoadReport",
    "WerpGetNumSecParams",
    "WerpGetReportInformation",
    "WerpSubmitReportFromStore",
    "WerpCloseStore",
    "WerpSetReportFlags",
    "WerpSetReportTime",
    "WerpOpenMachineQueue",
    "WerAddExcludedApplication",
    "WerpEnumerateStoreNext",
    "WerpSetCallBack",
    "WerpSvcReportFromMachineQueue",
    "WerReportSetUIOption",
    "WerpGetNumLoadedModules",
    "WerpSetReportUploadContextToken",
    "WerpFreeString",
    "WerReportSubmit",
    "WerpGetSecParamByIndex",
    "WerpGetReportConsent",
    "WerpGetFileByIndex",
    "WerpDownloadResponse",
    "WerpGetBucketString",
    "WerpGetFilePathByIndex",
    "WerReportCreate",
    "WerpAddAppCompatData",
    "WerpGetReportFinalConsent",
    "WerpAddSecondaryParameter",
    "WerUnattendedSetup",
    "WerpRestartApplication",
    "WerSysprepSpecialize",
    "WerpGetNumSigParams",
    "WerRemoveExcludedApplication",
    "WerpSetDefaultUserConsent",
    "WerpGetNumFiles",
    "WerpCreateIntegratorReportId",
    "WerpIsTransportAvailable",
    "WerpGetLoadedModuleByIndex",
    "WerpGetResponseUrl",
    "WerpGetReportTime",
    "WerpDeleteReport",
    "WerpAddRegisteredDataToReport",
    "WerpGetIntegratorReportId",
    "WerpArchiveReport",
    "WerSysprepCleanup",
    "WerpGetWerStringData",
    "WerpGetBucketId",
    "WerpUpdateReportResponse",
    "WerpGetTextFromReport",
    "WerpOpenUserQueue",
    "WerpSetEventName",
    "WerpCancelResponseDownload",
    "WerpSetDynamicParameter"
  ],
  "werconcpl.dll": [
    "LaunchErcAppW",
    "DllCanUnloadNow",
    "ShowCEIPDialogW",
    "DllGetClassObject",
    "WerpIsResponseApplicable"
  ],
  "wercplsupport.dll": [
    "WerComGetUserStores",
    "DllCanUnloadNow",
    "SvchostPushServiceGlobals",
    "DllGetClassObject",
    "WerComGetAdminStores",
    "ServiceMain"
  ],
  "werdiagcontroller.dll": [
    "StartFDR",
    "StartAppRecorder"
  ],
  "wersvc.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "werui.dll": [
    "WerUIUpdateUIForState",
    "WerUIDelete",
    "WerUIPromptForSecondLevel",
    "WerUIShowUpsell",
    "WerUICreate",
    "WerUIWaitForUserAction",
    "WerUIStart",
    "WerUITerminate",
    "WerUIUpdateStateProgress",
    "WerUIPromptUser",
    "WerUIGetUserSelection"
  ],
  "wevtapi.dll": [
    "EvtIntCreateLocalLogfile",
    "EvtArchiveExportedLog",
    "EvtCancel",
    "EvtIntRetractConfig",
    "EvtNext",
    "EvtOpenChannelEnum",
    "EvtRender",
    "EvtClose",
    "EvtGetLogInfo",
    "EvtOpenSession",
    "EvtIntSysprepCleanup",
    "EvtGetEventMetadataProperty",
    "EvtIntAssertConfig",
    "EvtOpenPublisherMetadata",
    "EvtSaveChannelConfig",
    "EvtClearLog",
    "EvtExportLog",
    "EvtCreateRenderContext",
    "EvtQuery",
    "EvtSetObjectArrayProperty",
    "EvtIntRenderResourceEventTemplate",
    "EvtIntWriteXmlEventToLocalLogfile",
    "EvtSubscribe",
    "EvtSeek",
    "EvtNextChannelPath",
    "EvtIntCreateBinXMLFromCustomXML",
    "EvtOpenEventMetadataEnum",
    "EvtNextPublisherId",
    "EvtUpdateBookmark",
    "EvtGetPublisherMetadataProperty",
    "EvtGetQueryInfo",
    "EvtIntReportEventAndSourceAsync",
    "EvtGetEventInfo",
    "EvtIntReportAuthzEventAndSourceAsync",
    "EvtNextEventMetadata",
    "EvtGetChannelConfigProperty",
    "EvtOpenPublisherEnum",
    "EvtOpenLog",
    "EvtFormatMessage",
    "EvtGetObjectArrayProperty",
    "EvtCreateBookmark",
    "EvtSetChannelConfigProperty",
    "EvtIntGetClassicLogDisplayName",
    "EvtGetObjectArraySize",
    "EvtOpenChannelConfig",
    "EvtGetExtendedStatus"
  ],
  "wevtfwd.dll": [
    "WSManProvPullEvents",
    "WSManProvUnsubscribe",
    "WSManPluginStartup",
    "WSManProvSubscribe",
    "WSManPluginShutdown"
  ],
  "wevtsvc.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "wfapigp.dll": "No exports",
  "whealogr.dll": [
    "WdiDiagnosticModuleMain",
    "WdiGetDiagnosticModuleInterfaceVersion",
    "WdiHandleInstance"
  ],
  "whhelper.dll": [
    "InitHelperDll"
  ],
  "wiaaut.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wiadefui.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wiadss.dll": [
    "GetLoaderStatus",
    "FindFirstImportDS",
    "LoadImportDS",
    "CloseFindContext",
    "UnloadImportDS",
    "FindNextImportDS",
    "FindImportDSByDeviceName"
  ],
  "wiarpc.dll": [
    "public: __thiscall BUFFER_CHAIN::BUFFER_CHAIN(void)",
    "WiaEventsInitialize",
    "public: void __thiscall BUFFER_CHAIN_ITEM::SetUsed(unsigned long)",
    "public: void __thiscall BUFFER::`default constructor closure'(void)",
    "public: __thiscall BUFFER_CHAIN_ITEM::~BUFFER_CHAIN_ITEM(void)",
    "public: __thiscall BUFFER::BUFFER(unsigned int)",
    "WiaEventsTerminate",
    "public: unsigned long __thiscall BUFFER_CHAIN_ITEM::QueryUsed(void)const",
    "public: void * __thiscall BUFFER::QueryPtr(void)const",
    "public: __thiscall BUFFER_CHAIN_ITEM::BUFFER_CHAIN_ITEM(unsigned int)",
    "public: __thiscall BUFFER_CHAIN::~BUFFER_CHAIN(void)",
    "public: unsigned int __thiscall BUFFER::QuerySize(void)const",
    "public: __thiscall BUFFER::~BUFFER(void)",
    "public: void __thiscall BUFFER_CHAIN_ITEM::`default constructor closure'(void)"
  ],
  "wiascanprofiles.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wiaservc.dll": [
    "wiasQueueEvent",
    "wiasDownSampleBuffer",
    "wiasGetRootItem",
    "wiasWritePageBufToFile",
    "wiasDebugError",
    "wiasReadPropGuid",
    "wiasSetValidRangeLong",
    "wiasSetValidListGuid",
    "wiasWritePageBufToStream",
    "ServiceMain",
    "wiasValidateItemProperties",
    "DllRegisterServer",
    "wiasWritePropStr",
    "wiasDebugTrace",
    "wiasSetValidListStr",
    "wiasCreateLogInstance",
    "DllUnregisterServer",
    "wiasSendEndOfPage",
    "wiasFreePropContext",
    "wiasSetValidListFloat",
    "wiasWritePropLong",
    "wiasWriteBufToFile",
    "wiasGetItemType",
    "wiasReadPropFloat",
    "wiasGetPropertyAttributes",
    "wiasSetValidListLong",
    "wiasWritePropGuid",
    "wiasSetPropChanged",
    "wiasReadPropStr",
    "wiasIsPropChanged",
    "wiasGetChildrenContexts",
    "wiasUpdateScanRect",
    "wiasGetContextFromName",
    "wiasCreatePropContext",
    "wiasCreateDrvItem",
    "wiasUpdateValidFormat",
    "wiasWritePropFloat",
    "wiasGetDrvItem",
    "wiasPrintDebugHResult",
    "wiasGetChangedValueStr",
    "wiasReadPropBin",
    "wiasFormatArgs",
    "wiasCreateChildAppItem",
    "wiasSetItemPropNames",
    "wiasSetValidFlag",
    "wiasWriteMultiple",
    "wiasGetImageInformation",
    "wiasGetChangedValueGuid",
    "wiasParseEndorserString",
    "wiasSetValidRangeFloat",
    "wiasSetItemPropAttribs",
    "wiasGetChangedValueLong",
    "wiasSetPropertyAttributes",
    "wiasGetChangedValueFloat",
    "wiasReadMultiple",
    "wiasWritePropBin",
    "wiasReadPropLong"
  ],
  "wiashext.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "AddDeviceWasChosenA",
    "MakeFullPidlForDevice",
    "AddDeviceWasChosenW",
    "DllGetClassObject",
    "DoDeleteAllItems",
    "DllRegisterServer",
    "AddDeviceWasChosen"
  ],
  "wiatrace.dll": [
    "WIATRACE_Term",
    "WIATRACE_OutputString",
    "WIATRACE_IncrementIndentLevel",
    "WIATRACE_GetIndentLevel",
    "WIATRACE_Init",
    "WIATRACE_SetTraceSettings",
    "WIATRACE_GetTraceSettings",
    "WIATRACE_DecrementIndentLevel"
  ],
  "wiavideo.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wimgapi.dll": [
    "WIMGetMountedImageInfoFromHandle",
    "WIMSplitFile",
    "WIMGetMountedImageHandle",
    "WIMUnmountImageHandle",
    "WIMSetReferenceFile",
    "WIMMountImageHandle",
    "WIMUnregisterMessageCallback",
    "WIMCreateFile",
    "WIMGetMountedImages",
    "WIMGetMountedImageInfo",
    "WIMUnregisterLogFile",
    "WIMSetFileIOCallbackTemporaryPath",
    "WIMCloseHandle",
    "WIMMountImage",
    "WIMGetImageInformation",
    "DllMain",
    "WIMSetImageInformation",
    "WIMInitFileIOCallbacks",
    "WIMGetImageCount",
    "WIMApplyImage",
    "WIMCopyFile",
    "WIMExportImage",
    "WIMCommitImageHandle",
    "WIMGetAttributes",
    "WIMDeleteImage",
    "WIMExtractImagePath",
    "WIMGetMessageCallbackCount",
    "WIMRemountImage",
    "WIMSetTemporaryPath",
    "WIMUnmountImage",
    "DllCanUnloadNow",
    "WIMRegisterMessageCallback",
    "WIMLoadImage",
    "WIMDeleteImageMounts",
    "WIMRegisterLogFile",
    "WIMCaptureImage",
    "WIMSetBootImage"
  ],
  "win32spl.dll": [
    "InitializePrintMonitor2",
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "ProviderEntryW",
    "InitializePrintProvidor",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "winbio.dll": [
    "WinBioRemoveAllDomainCredentials",
    "WinBioUnlockUnit",
    "WinBioWait",
    "WinBioLogonIdentifiedUser",
    "WinBioUnregisterEventMonitor",
    "WinBioCancel",
    "WinBioIdentifyWithCallback",
    "WinBioEnumEnrollments",
    "WinBioSetCredential",
    "WinBioAcquireFocus",
    "_BioLogonIdentifiedUser",
    "WinBioGetDomainLogonSetting",
    "WinBioEnrollCommit",
    "WinBioRemoveCredential",
    "WinBioDeleteTemplate",
    "WinBioControlUnitPrivileged",
    "WinBioEnumBiometricUnits",
    "WinBioGetProperty",
    "WinBioGetCredentialState",
    "WinBioGetEnabledSetting",
    "WinBioEnrollBegin",
    "WinBioControlUnit",
    "WinBioEnrollDiscard",
    "WinBioRemoveAllCredentials",
    "WinBioOpenSession",
    "WinBioUnregisterServiceMonitor",
    "WinBioRegisterEventMonitor",
    "WinBioVerify",
    "WinBioEnrollCapture",
    "WinBioRegisterServiceMonitor",
    "WinBioCloseSession",
    "WinBioVerifyWithCallback",
    "WinBioLocateSensor",
    "WinBioIdentify",
    "WinBioCaptureSampleWithCallback",
    "WinBioGetLogonSetting",
    "WinBioEnumServiceProviders",
    "WinBioLocateSensorWithCallback",
    "WinBioEnrollCaptureWithCallback",
    "WinBioFree",
    "WinBioCaptureSample",
    "WinBioReleaseFocus",
    "WinBioLockUnit",
    "WinBioEnumDatabases"
  ],
  "winbrand.dll": [
    "BrandingLoadString",
    "BrandingLoadCursor",
    "BrandingLoadBitmap",
    "GetHinstanceByNameSpace",
    "BrandingLoadIcon",
    "BrandingFormatString",
    "BrandingLoadImage"
  ],
  "wincredprovider.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "winethc.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "winhttp.dll": [
    "WinHttpQueryOption",
    "WinHttpCrackUrl",
    "SvchostPushServiceGlobals",
    "WinHttpDetectAutoProxyConfigUrl",
    "WinHttpCheckPlatform",
    "WinHttpTimeToSystemTime",
    "WinHttpWriteData",
    "WinHttpSetTimeouts",
    "WinHttpGetDefaultProxyConfiguration",
    "WinHttpOpenRequest",
    "WinHttpConnect",
    "WinHttpAddRequestHeaders",
    "WinHttpQueryAuthSchemes",
    "WinHttpQueryDataAvailable",
    "WinHttpGetProxyForUrl",
    "WinHttpOpen",
    "WinHttpSetOption",
    "Private1",
    "WinHttpAutoProxySvcMain",
    "WinHttpReadData",
    "WinHttpSendRequest",
    "WinHttpTimeFromSystemTime",
    "WinHttpCreateUrl",
    "WinHttpGetIEProxyConfigForCurrentUser",
    "DllCanUnloadNow",
    "WinHttpQueryHeaders",
    "WinHttpReceiveResponse",
    "WinHttpSetStatusCallback",
    "DllGetClassObject",
    "WinHttpSetDefaultProxyConfiguration",
    "WinHttpSetCredentials",
    "WinHttpCloseHandle"
  ],
  "wininet - Copy.dll": [
    "InternetWriteFileExW",
    "FindNextUrlCacheGroup",
    "FindCloseUrlCache",
    "FtpCommandW",
    "InternetGetCookieExA",
    "GopherOpenFileA",
    "FtpPutFileEx",
    "InternetSecurityProtocolToStringW",
    "HttpOpenRequestW",
    "InternetDialW",
    "InternetAutodialHangup",
    "InternetConfirmZoneCrossingW",
    "FtpGetFileSize",
    "InternetGetCookieW",
    "InternetGetLastResponseInfoW",
    "InternetSetCookieA",
    "InternetGetPerSiteCookieDecisionW",
    "InternetSetDialState",
    "FtpCreateDirectoryA",
    "FtpFindFirstFileA",
    "InternetSetStatusCallback",
    "ForceNexusLookupExW",
    "InternetInitializeAutoProxyDll",
    "InternetSetOptionA",
    "InternetCanonicalizeUrlW",
    "SetUrlCacheEntryInfoA",
    "FtpCreateDirectoryW",
    "PrivacyGetZonePreferenceW",
    "FtpRenameFileA",
    "GetUrlCacheEntryInfoW",
    "InternetEnumPerSiteCookieDecisionW",
    "DeleteUrlCacheGroup",
    "InternetCreateUrlW",
    "HttpSendRequestW",
    "InternetWriteFileExA",
    "SetUrlCacheGroupAttributeW",
    "InternetDialA",
    "FtpRenameFileW",
    "InternetSetDialStateW",
    "ReadUrlCacheEntryStreamEx",
    "SetUrlCacheEntryInfoW",
    "InternetAutodialCallback",
    "HttpAddRequestHeadersW",
    "FtpOpenFileA",
    "ShowClientAuthCerts",
    "FindFirstUrlCacheEntryExA",
    "DeleteUrlCacheEntryA",
    "InternetCanonicalizeUrlA",
    "InternetSetDialStateA",
    "InternetSetFilePointer",
    "FindFirstUrlCacheEntryA",
    "FreeUrlCacheSpaceW",
    "InternetGoOnlineA",
    "ParseX509EncodedCertificateForListBoxEntry",
    "DispatchAPICall",
    "RetrieveUrlCacheEntryStreamA",
    "InternetAlgIdToStringA",
    "HttpSendRequestExW",
    "SetUrlCacheConfigInfoW",
    "IsUrlCacheEntryExpiredA",
    "InternetAttemptConnect",
    "GopherOpenFileW",
    "FindNextUrlCacheContainerA",
    "FtpGetFileW",
    "SetUrlCacheHeaderData",
    "InternetOpenUrlW",
    "InternetConnectA",
    "InternetGetConnectedStateExA",
    "InternetAlgIdToStringW",
    "GetUrlCacheHeaderData",
    "InternetGoOnlineW",
    "GetUrlCacheEntryInfoExA",
    "FindFirstUrlCacheGroup",
    "InternetGetPerSiteCookieDecisionA",
    "IncrementUrlCacheHeaderData",
    "FindNextUrlCacheEntryExA",
    "ShowX509EncodedCertificate",
    "InternetEnumPerSiteCookieDecisionA",
    "InternetSetOptionW",
    "InternetSetCookieExA",
    "InternetLockRequestFile",
    "InternetOpenUrlA",
    "SetUrlCacheConfigInfoA",
    "HttpQueryInfoW",
    "InternetReadFileExA",
    "SetUrlCacheEntryGroupA",
    "CreateMD5SSOHash",
    "HttpSendRequestA",
    "InternetDial",
    "GetUrlCacheConfigInfoA",
    "CommitUrlCacheEntryW",
    "RunOnceUrlCache",
    "InternetOpenW",
    "InternetSetStatusCallbackW",
    "SetUrlCacheEntryGroup",
    "GopherGetLocatorTypeW",
    "InternetQueryFortezzaStatus",
    "InternetTimeToSystemTimeA",
    "FtpPutFileA",
    "HttpAddRequestHeadersA",
    "GetUrlCacheGroupAttributeA",
    "InternetFortezzaCommand",
    "InternetTimeFromSystemTime",
    "PrivacySetZonePreferenceW",
    "InternetCloseHandle",
    "HttpCheckDavCompliance",
    "SetUrlCacheGroupAttributeA",
    "UpdateUrlCacheContentPath",
    "UnlockUrlCacheEntryStream",
    "HttpEndRequestW",
    "ReadUrlCacheEntryStream",
    "InternetAutodial",
    "InternetShowSecurityInfoByURLW",
    "InternetGoOnline",
    "FtpGetFileEx",
    "InternetGetSecurityInfoByURLA",
    "InternetFindNextFileW",
    "FindFirstUrlCacheContainerA",
    "InternetSetOptionExA",
    "InternetTimeToSystemTime",
    "RetrieveUrlCacheEntryFileW",
    "FindFirstUrlCacheEntryExW",
    "_GetFileExtensionFromUrl",
    "FtpSetCurrentDirectoryW",
    "UnlockUrlCacheEntryFileA",
    "CreateUrlCacheEntryA",
    "InternetUnlockRequestFile",
    "FtpFindFirstFileW",
    "CreateUrlCacheContainerW",
    "InternetErrorDlg",
    "InternetCheckConnectionW",
    "HttpEndRequestA",
    "FtpGetCurrentDirectoryW",
    "HttpQueryInfoA",
    "InternetGetConnectedStateEx",
    "InternetGetSecurityInfoByURL",
    "SetUrlCacheEntryGroupW",
    "InternetGetConnectedState",
    "InternetSetStatusCallbackA",
    "UnlockUrlCacheEntryFile",
    "DetectAutoProxyUrl",
    "GopherGetAttributeW",
    "InternetReadFile",
    "DeleteUrlCacheEntryW",
    "GopherGetAttributeA",
    "HttpSendRequestExA",
    "InternetTimeToSystemTimeW",
    "UrlZonesDetach",
    "InternetCombineUrlW",
    "InternetFindNextFileA",
    "InternetReadFileExW",
    "InternetCreateUrlA",
    "InternetGetCertByURLA",
    "InternetQueryOptionA",
    "InternetHangUp",
    "FindNextUrlCacheContainerW",
    "InternetQueryDataAvailable",
    "DeleteUrlCacheEntry",
    "InternetSecurityProtocolToStringA",
    "ResumeSuspendedDownload",
    "CreateUrlCacheGroup",
    "FindNextUrlCacheEntryExW",
    "InternetCombineUrlA",
    "FindFirstUrlCacheEntryW",
    "GetUrlCacheEntryInfoExW",
    "FindFirstUrlCacheContainerW",
    "InternetCheckConnectionA",
    "RetrieveUrlCacheEntryFileA",
    "CommitUrlCacheEntryA",
    "DeleteUrlCacheContainerW",
    "GopherGetLocatorTypeA",
    "InternetGetConnectedStateExW",
    "InternetConfirmZoneCrossing",
    "InternetSetOptionExW",
    "FtpGetCurrentDirectoryA",
    "InternetQueryOptionW",
    "FreeUrlCacheSpaceA",
    "DeleteWpadCacheForNetworks",
    "InternetGetLastResponseInfoA",
    "InternetGetCertByURL",
    "InternetGetCookieA",
    "GopherCreateLocatorW",
    "InternetShowSecurityInfoByURL",
    "CreateUrlCacheEntryW",
    "FtpGetFileA",
    "FindNextUrlCacheEntryA",
    "InternetConnectW",
    "RetrieveUrlCacheEntryStreamW",
    "LoadUrlCacheContent",
    "DeleteUrlCacheContainerA",
    "GetUrlCacheEntryInfoA",
    "ShowSecurityInfo",
    "InternetSetCookieW",
    "InternetGetCookieExW",
    "FtpPutFileW",
    "InternetTimeFromSystemTimeA",
    "FtpDeleteFileA",
    "FtpDeleteFileW",
    "GopherCreateLocatorA",
    "InternetConfirmZoneCrossingA",
    "IsHostInProxyBypassList",
    "IsUrlCacheEntryExpiredW",
    "InternetSetPerSiteCookieDecisionA",
    "ShowCertificate",
    "InternetCrackUrlA",
    "GopherFindFirstFileW",
    "FindNextUrlCacheEntryW",
    "FtpOpenFileW",
    "FtpRemoveDirectoryA",
    "RegisterUrlCacheNotification",
    "InternetOpenA",
    "InternetWriteFile",
    "CreateUrlCacheContainerA",
    "FtpRemoveDirectoryW",
    "InternetCrackUrlW",
    "InternetSetPerSiteCookieDecisionW",
    "ForceNexusLookup",
    "GopherFindFirstFileA",
    "InternetSetCookieExW",
    "UnlockUrlCacheEntryFileW",
    "InternetClearAllPerSiteCookieDecisions",
    "DllInstall",
    "DeleteIE3Cache",
    "InternetTimeFromSystemTimeW",
    "HttpOpenRequestA",
    "GetUrlCacheConfigInfoW",
    "FtpCommandA",
    "InternetGetSecurityInfoByURLW",
    "InternetShowSecurityInfoByURLA",
    "FtpSetCurrentDirectoryA",
    "GetUrlCacheGroupAttributeW"
  ],
  "wininet.dll": [
    "InternetWriteFileExW",
    "FindNextUrlCacheGroup",
    "FindCloseUrlCache",
    "FtpCommandW",
    "InternetGetCookieExA",
    "GopherOpenFileA",
    "FtpPutFileEx",
    "InternetSecurityProtocolToStringW",
    "HttpOpenRequestW",
    "InternetDialW",
    "InternetAutodialHangup",
    "InternetConfirmZoneCrossingW",
    "FtpGetFileSize",
    "InternetGetCookieW",
    "InternetGetLastResponseInfoW",
    "InternetSetCookieA",
    "InternetGetPerSiteCookieDecisionW",
    "InternetSetDialState",
    "FtpCreateDirectoryA",
    "FtpFindFirstFileA",
    "InternetSetStatusCallback",
    "ForceNexusLookupExW",
    "InternetInitializeAutoProxyDll",
    "InternetSetOptionA",
    "InternetCanonicalizeUrlW",
    "SetUrlCacheEntryInfoA",
    "FtpCreateDirectoryW",
    "PrivacyGetZonePreferenceW",
    "FtpRenameFileA",
    "GetUrlCacheEntryInfoW",
    "InternetEnumPerSiteCookieDecisionW",
    "DeleteUrlCacheGroup",
    "InternetCreateUrlW",
    "HttpSendRequestW",
    "InternetWriteFileExA",
    "SetUrlCacheGroupAttributeW",
    "InternetDialA",
    "FtpRenameFileW",
    "InternetSetDialStateW",
    "ReadUrlCacheEntryStreamEx",
    "SetUrlCacheEntryInfoW",
    "InternetAutodialCallback",
    "HttpAddRequestHeadersW",
    "FtpOpenFileA",
    "ShowClientAuthCerts",
    "FindFirstUrlCacheEntryExA",
    "DeleteUrlCacheEntryA",
    "InternetCanonicalizeUrlA",
    "InternetSetDialStateA",
    "InternetSetFilePointer",
    "FindFirstUrlCacheEntryA",
    "FreeUrlCacheSpaceW",
    "InternetGoOnlineA",
    "ParseX509EncodedCertificateForListBoxEntry",
    "DispatchAPICall",
    "RetrieveUrlCacheEntryStreamA",
    "InternetAlgIdToStringA",
    "HttpSendRequestExW",
    "SetUrlCacheConfigInfoW",
    "IsUrlCacheEntryExpiredA",
    "InternetAttemptConnect",
    "GopherOpenFileW",
    "FindNextUrlCacheContainerA",
    "FtpGetFileW",
    "SetUrlCacheHeaderData",
    "InternetOpenUrlW",
    "InternetConnectA",
    "InternetGetConnectedStateExA",
    "InternetAlgIdToStringW",
    "GetUrlCacheHeaderData",
    "InternetGoOnlineW",
    "GetUrlCacheEntryInfoExA",
    "FindFirstUrlCacheGroup",
    "InternetGetPerSiteCookieDecisionA",
    "IncrementUrlCacheHeaderData",
    "FindNextUrlCacheEntryExA",
    "ShowX509EncodedCertificate",
    "InternetEnumPerSiteCookieDecisionA",
    "InternetSetOptionW",
    "InternetSetCookieExA",
    "InternetLockRequestFile",
    "InternetOpenUrlA",
    "SetUrlCacheConfigInfoA",
    "HttpQueryInfoW",
    "InternetReadFileExA",
    "SetUrlCacheEntryGroupA",
    "CreateMD5SSOHash",
    "HttpSendRequestA",
    "InternetDial",
    "GetUrlCacheConfigInfoA",
    "CommitUrlCacheEntryW",
    "RunOnceUrlCache",
    "InternetOpenW",
    "InternetSetStatusCallbackW",
    "SetUrlCacheEntryGroup",
    "GopherGetLocatorTypeW",
    "InternetQueryFortezzaStatus",
    "InternetTimeToSystemTimeA",
    "FtpPutFileA",
    "HttpAddRequestHeadersA",
    "GetUrlCacheGroupAttributeA",
    "InternetFortezzaCommand",
    "InternetTimeFromSystemTime",
    "PrivacySetZonePreferenceW",
    "InternetCloseHandle",
    "HttpCheckDavCompliance",
    "SetUrlCacheGroupAttributeA",
    "UpdateUrlCacheContentPath",
    "UnlockUrlCacheEntryStream",
    "HttpEndRequestW",
    "ReadUrlCacheEntryStream",
    "InternetAutodial",
    "InternetShowSecurityInfoByURLW",
    "InternetGoOnline",
    "FtpGetFileEx",
    "InternetGetSecurityInfoByURLA",
    "InternetFindNextFileW",
    "FindFirstUrlCacheContainerA",
    "InternetSetOptionExA",
    "InternetTimeToSystemTime",
    "RetrieveUrlCacheEntryFileW",
    "FindFirstUrlCacheEntryExW",
    "_GetFileExtensionFromUrl",
    "FtpSetCurrentDirectoryW",
    "UnlockUrlCacheEntryFileA",
    "CreateUrlCacheEntryA",
    "InternetUnlockRequestFile",
    "FtpFindFirstFileW",
    "CreateUrlCacheContainerW",
    "InternetErrorDlg",
    "InternetCheckConnectionW",
    "HttpEndRequestA",
    "FtpGetCurrentDirectoryW",
    "HttpQueryInfoA",
    "InternetGetConnectedStateEx",
    "InternetGetSecurityInfoByURL",
    "SetUrlCacheEntryGroupW",
    "InternetGetConnectedState",
    "InternetSetStatusCallbackA",
    "UnlockUrlCacheEntryFile",
    "DetectAutoProxyUrl",
    "GopherGetAttributeW",
    "InternetReadFile",
    "DeleteUrlCacheEntryW",
    "GopherGetAttributeA",
    "HttpSendRequestExA",
    "InternetTimeToSystemTimeW",
    "UrlZonesDetach",
    "InternetCombineUrlW",
    "InternetFindNextFileA",
    "InternetReadFileExW",
    "InternetCreateUrlA",
    "InternetGetCertByURLA",
    "InternetQueryOptionA",
    "InternetHangUp",
    "FindNextUrlCacheContainerW",
    "InternetQueryDataAvailable",
    "DeleteUrlCacheEntry",
    "InternetSecurityProtocolToStringA",
    "ResumeSuspendedDownload",
    "CreateUrlCacheGroup",
    "FindNextUrlCacheEntryExW",
    "InternetCombineUrlA",
    "FindFirstUrlCacheEntryW",
    "GetUrlCacheEntryInfoExW",
    "FindFirstUrlCacheContainerW",
    "InternetCheckConnectionA",
    "RetrieveUrlCacheEntryFileA",
    "CommitUrlCacheEntryA",
    "DeleteUrlCacheContainerW",
    "GopherGetLocatorTypeA",
    "InternetGetConnectedStateExW",
    "InternetConfirmZoneCrossing",
    "InternetSetOptionExW",
    "FtpGetCurrentDirectoryA",
    "InternetQueryOptionW",
    "FreeUrlCacheSpaceA",
    "DeleteWpadCacheForNetworks",
    "InternetGetLastResponseInfoA",
    "InternetGetCertByURL",
    "InternetGetCookieA",
    "GopherCreateLocatorW",
    "InternetShowSecurityInfoByURL",
    "CreateUrlCacheEntryW",
    "FtpGetFileA",
    "FindNextUrlCacheEntryA",
    "InternetConnectW",
    "RetrieveUrlCacheEntryStreamW",
    "LoadUrlCacheContent",
    "DeleteUrlCacheContainerA",
    "GetUrlCacheEntryInfoA",
    "ShowSecurityInfo",
    "InternetSetCookieW",
    "InternetGetCookieExW",
    "FtpPutFileW",
    "InternetTimeFromSystemTimeA",
    "FtpDeleteFileA",
    "FtpDeleteFileW",
    "GopherCreateLocatorA",
    "InternetConfirmZoneCrossingA",
    "IsHostInProxyBypassList",
    "IsUrlCacheEntryExpiredW",
    "InternetSetPerSiteCookieDecisionA",
    "ShowCertificate",
    "InternetCrackUrlA",
    "GopherFindFirstFileW",
    "FindNextUrlCacheEntryW",
    "FtpOpenFileW",
    "FtpRemoveDirectoryA",
    "RegisterUrlCacheNotification",
    "InternetOpenA",
    "InternetWriteFile",
    "CreateUrlCacheContainerA",
    "FtpRemoveDirectoryW",
    "InternetCrackUrlW",
    "InternetSetPerSiteCookieDecisionW",
    "ForceNexusLookup",
    "GopherFindFirstFileA",
    "InternetSetCookieExW",
    "UnlockUrlCacheEntryFileW",
    "InternetClearAllPerSiteCookieDecisions",
    "DllInstall",
    "DeleteIE3Cache",
    "InternetTimeFromSystemTimeW",
    "HttpOpenRequestA",
    "GetUrlCacheConfigInfoW",
    "FtpCommandA",
    "InternetGetSecurityInfoByURLW",
    "InternetShowSecurityInfoByURLA",
    "FtpSetCurrentDirectoryA",
    "GetUrlCacheGroupAttributeW"
  ],
  "winipsec.dll": [
    "DeleteQMSAs",
    "EnumTransportFilters",
    "SetMMAuthMethods",
    "EnumMMPolicies",
    "AddTransportFilterEx",
    "MatchTransportFilterEx",
    "MatchMMFilter",
    "DeleteMMPolicy",
    "SetConfigurationVariables",
    "GetMMFilterEx",
    "AddTransportFilter",
    "AddSAs",
    "EnumIPSecInterfaces",
    "SPDApiBufferAllocate",
    "CloseIKENegotiationHandle",
    "GetTunnelFilter",
    "EnumMMFilters",
    "OpenTunnelFilterHandle",
    "DeleteTransportFilter",
    "AddMMFilterEx",
    "QueryIKENotifyData",
    "AddMMAuthMethods",
    "GetMMPolicyByID",
    "GetQMPolicy",
    "MatchTransportFilter",
    "SetTransportFilter",
    "SetTransportFilterEx",
    "CloseIKENotifyHandle",
    "GetTransportFilter",
    "DeleteMMAuthMethods",
    "AddMMPolicy",
    "QueryIKEStatistics",
    "OpenTransportFilterHandle",
    "QuerySpdPolicyState",
    "DeleteMMFilter",
    "QueryIPSecStatistics",
    "SetMMFilter",
    "DeleteMMSAs",
    "AddTunnelFilter",
    "DllMain",
    "EnumMMAuthMethods",
    "EnumTunnelFilters",
    "GetMMFilter",
    "SPDApiBufferFree",
    "AddQMPolicy",
    "EnumQMSAs",
    "OpenMMFilterHandleEx",
    "DeleteQMPolicy",
    "GetConfigurationVariables",
    "SetTunnelFilter",
    "EnumTransportFiltersEx",
    "MatchTunnelFilter",
    "CloseMMFilterHandle",
    "RegisterIKENotifyClient",
    "EnumMMFiltersEx",
    "GetTransportFilterEx",
    "QueryIKENegotiationStatus",
    "CloseTunnelFilterHandle",
    "MatchMMFilterEx",
    "OpenTransportFilterHandleEx",
    "AddMMFilter",
    "EnumQMPolicies",
    "GetMMAuthMethods",
    "SetMMPolicy",
    "SetQMPolicy",
    "DeleteTunnelFilter",
    "OpenMMFilterHandle",
    "SetMMFilterEx",
    "CloseTransportFilterHandle",
    "EnumMMSAs",
    "InitiateIKENegotiation",
    "GetQMPolicyByID",
    "GetMMPolicy"
  ],
  "winmm.dll": [
    "auxOutMessage",
    "waveOutReset",
    "midiOutUnprepareHeader",
    "mmioRead",
    "joyGetDevCapsW",
    "mmioSetBuffer",
    "mciExecute",
    "sndPlaySoundA",
    "mmioRenameA",
    "waveInAddBuffer",
    "waveOutSetVolume",
    "DriverCallback",
    "midiInPrepareHeader",
    "waveOutGetNumDevs",
    "mixerGetLineControlsA",
    "mmDrvInstall",
    "mciSendCommandW",
    "WOW32DriverCallback",
    "mmTaskBlock",
    "mciSendStringW",
    "midiStreamProperty",
    "mmioStringToFOURCCA",
    "mci32Message",
    "waveInClose",
    "midiStreamPause",
    "joyReleaseCapture",
    "mmioSendMessage",
    "waveInGetErrorTextA",
    "midiOutOpen",
    "midiOutGetNumDevs",
    "mixerMessage",
    "mmioWrite",
    "mxd32Message",
    "timeGetDevCaps",
    "mixerGetNumDevs",
    "waveOutGetDevCapsW",
    "mixerGetControlDetailsW",
    "waveOutBreakLoop",
    "OpenDriver",
    "waveInGetDevCapsW",
    "WOW32ResolveMultiMediaHandle",
    "mmioInstallIOProcW",
    "joyGetDevCapsA",
    "midiInMessage",
    "mixerGetLineInfoA",
    "timeBeginPeriod",
    "waveOutGetPosition",
    "mciGetCreatorTask",
    "joyGetNumDevs",
    "midiInGetErrorTextW",
    "mixerGetLineInfoW",
    "midiInGetNumDevs",
    "waveInStop",
    "waveInReset",
    "sndPlaySoundW",
    "tid32Message",
    "midiStreamPosition",
    "waveOutGetPitch",
    "mmioAdvance",
    "mixerGetControlDetailsA",
    "mmsystemGetVersion",
    "mixerClose",
    "waveOutClose",
    "mmioCreateChunk",
    "midiOutLongMsg",
    "midiOutSetVolume",
    "mmioSetInfo",
    "midiOutReset",
    "midiOutCacheDrumPatches",
    "joySetThreshold",
    "mciDriverNotify",
    "midiOutClose",
    "mid32Message",
    "waveOutRestart",
    "wod32Message",
    "DrvGetModuleHandle",
    "mciGetDeviceIDFromElementIDA",
    "joyGetPosEx",
    "mmioInstallIOProcA",
    "midiInUnprepareHeader",
    "midiOutGetID",
    "DefDriverProc",
    "midiOutPrepareHeader",
    "joySetCapture",
    "mciSetDriverData",
    "midiInGetID",
    "auxSetVolume",
    "midiDisconnect",
    "mciGetYieldProc",
    "mciGetDeviceIDW",
    "mmioClose",
    "waveOutGetPlaybackRate",
    "GetDriverModuleHandle",
    "joyGetPos",
    "mciGetDriverData",
    "mmioSeek",
    "midiInStart",
    "auxGetNumDevs",
    "mciGetDeviceIDA",
    "auxGetDevCapsW",
    "auxGetVolume",
    "waveOutOpen",
    "timeEndPeriod",
    "timeGetSystemTime",
    "midiOutGetDevCapsW",
    "mciGetErrorStringA",
    "waveOutGetErrorTextW",
    "midiOutGetErrorTextA",
    "midiInReset",
    "waveOutGetID",
    "mmioRenameW",
    "waveOutPrepareHeader",
    "mmioAscend",
    "waveInGetDevCapsA",
    "waveOutSetPitch",
    "mciSendStringA",
    "midiOutShortMsg",
    "mixerGetID",
    "waveInGetNumDevs",
    "wid32Message",
    "waveOutGetDevCapsA",
    "mixerGetDevCapsA",
    "mmioOpenA",
    "midiStreamRestart",
    "waveOutSetPlaybackRate",
    "midiInOpen",
    "midiOutGetVolume",
    "mixerSetControlDetails",
    "mmGetCurrentTask",
    "mciSetYieldProc",
    "mciSendCommandA",
    "mod32Message",
    "mmioGetInfo",
    "joy32Message",
    "aux32Message",
    "mixerGetDevCapsW",
    "mmTaskCreate",
    "midiStreamOut",
    "mmTaskSignal",
    "timeSetEvent",
    "waveInGetErrorTextW",
    "midiOutGetDevCapsA",
    "midiInAddBuffer",
    "waveInOpen",
    "waveInPrepareHeader",
    "waveInStart",
    "waveInGetPosition",
    "NotifyCallbackData",
    "SendDriverMessage",
    "waveOutUnprepareHeader",
    "mmioDescend",
    "waveInGetID",
    "midiOutCachePatches",
    "midiInGetDevCapsA",
    "mmTaskYield",
    "timeGetTime",
    "mmioOpenW",
    "midiOutMessage",
    "waveOutMessage",
    "midiInGetErrorTextA",
    "midiStreamClose",
    "CloseDriver",
    "PlaySoundW",
    "auxGetDevCapsA",
    "waveOutWrite",
    "mciLoadCommandResource",
    "waveOutGetErrorTextA",
    "midiInGetDevCapsW",
    "midiInStop",
    "midiStreamStop",
    "midiStreamOpen",
    "waveOutPause",
    "timeKillEvent",
    "mciGetDeviceIDFromElementIDW",
    "joyConfigChanged",
    "mmioStringToFOURCCW",
    "PlaySound",
    "joyGetThreshold",
    "waveOutGetVolume",
    "mixerOpen",
    "midiInClose",
    "mciFreeCommandResource",
    "PlaySoundA",
    "waveInMessage",
    "mciGetErrorStringW",
    "mmioFlush",
    "midiConnect",
    "mciDriverYield",
    "mixerGetLineControlsW",
    "WOWAppExit",
    "midiOutGetErrorTextW",
    "waveInUnprepareHeader"
  ],
  "winnsi.dll": [
    "NsiRpcDeregisterChangeNotificationEx",
    "NsiRpcGetAllParametersEx",
    "NsiRpcRegisterChangeNotificationEx",
    "NsiRpcRegisterChangeNotification",
    "NsiRpcSetParameter",
    "NsiRpcGetParameter",
    "NsiRpcSetAllParameters",
    "NsiConnectToServer",
    "NsiRpcSetParameterEx",
    "NsiRpcDeregisterChangeNotification",
    "NsiRpcSetAllParametersEx",
    "NsiDisconnectFromServer",
    "NsiRpcGetParameterEx",
    "NsiRpcEnumerateObjectsAllParameters",
    "NsiRpcGetAllParameters"
  ],
  "winrnr.dll": [
    "InstallNTDSProvider",
    "NSPStartup",
    "RemoveNTDSProvider"
  ],
  "winrscmd.dll": [
    "WSManPluginReleaseShellContext",
    "WSManPluginStartup",
    "WSManPluginShell",
    "WSManPluginReleaseCommandContext",
    "WSManPluginSend",
    "WSManPluginSignal",
    "WSManPluginShutdown",
    "WSManPluginCommand",
    "WSManPluginReceive"
  ],
  "winrsmgr.dll": "No exports",
  "winrssrv.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "winshfhc.dll": [
    "MRTComponent_Generalize"
  ],
  "winsockhc.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "winsrv.dll": [
    "ConServerDllInitialization",
    "UserServerDllInitialization"
  ],
  "winsta.dll": [
    "WinStationGetDeviceId",
    "_WinStationBeepOpen",
    "WinStationOpenServerExW",
    "ServerGetInternetConnectorStatus",
    "WinStationGetUserCertificates",
    "WinStationRedirectLogonBeginPainting",
    "ServerLicensingOpenA",
    "ServerQueryInetConnectorInformationW",
    "WinStationGetProcessSid",
    "_WinStationCallback",
    "WinStationRedirectLogonError",
    "WinStationVirtualOpen",
    "WinStationSetInformationW",
    "WinStationGetAllProcesses",
    "WinStationSendMessageW",
    "WinStationEnumerateW",
    "WinStationReset",
    "ServerLicensingGetPolicyInformationA",
    "WinStationRedirectLogonMessage",
    "WinStationTerminateProcess",
    "WinStationFreeMemory",
    "ServerLicensingGetPolicyInformationW",
    "WinStationNtsdDebug",
    "WinStationConnectCallback",
    "WinStationOpenServerW",
    "WinStationRedirectErrorMessage",
    "WinStationRenameA",
    "WinStationSystemShutdownStarted",
    "WinStationFreeUserCredentials",
    "ServerLicensingUnloadPolicy",
    "WinStationSendWindowMessage",
    "WinStationEnumerate_IndexedW",
    "WinStationGenerateLicense",
    "_WinStationNotifyLogon",
    "WinStationOpenServerA",
    "WinStationGetSessionIds",
    "WinStationNameFromLogonIdA",
    "_WinStationReInitializeSecurity",
    "_WinStationCheckForApplicationName",
    "WinStationConnectW",
    "WinStationSwitchToServicesSession",
    "_WinStationWaitForConnect",
    "WinStationEnumerateA",
    "WinStationUnRegisterNotificationEvent",
    "WinStationShutdownSystem",
    "WinStationNegotiateSession",
    "_WinStationFUSCanRemoteUserDisconnect",
    "WinStationIsSessionRemoteable",
    "WinStationAutoReconnect",
    "WinStationGetAllSessionsW",
    "WinStationRegisterConsoleNotification",
    "_NWLogonQueryAdmin",
    "WinStationShadow",
    "ServerLicensingGetPolicy",
    "WinStationInstallLicense",
    "RemoteAssistancePrepareSystemRestore",
    "_WinStationReadRegistry",
    "ServerLicensingGetAvailablePolicyIds",
    "WinStationUnRegisterConsoleNotification",
    "WinStationIsHelpAssistantSession",
    "WinStationNameFromLogonIdW",
    "WinStationReportUIResult",
    "WinStationGetLanAdapterNameA",
    "WinStationSystemShutdownWait",
    "WinStationRenameW",
    "_NWLogonSetAdmin",
    "WinStationRedirectLogonStatus",
    "WinStationVirtualOpenEx",
    "WinStationQuerySessionVirtualIP",
    "WinStationFreePropertyValue",
    "WinStationServerPing",
    "_WinStationOpenSessionDirectory",
    "WinStationGetConnectionProperty",
    "WinStationConnectEx",
    "WinStationRegisterNotificationEvent",
    "WinStationOpenServerExA",
    "WinStationEnumerate_IndexedA",
    "WinStationSetPoolCount",
    "ServerLicensingLoadPolicy",
    "ServerLicensingClose",
    "ServerQueryInetConnectorInformationA",
    "_WinStationNotifyLogoff",
    "WinStationQueryUpdateRequired",
    "WinStationGetTermSrvCountersValue",
    "WinStationGetLanAdapterNameW",
    "WinStationGetUserProfile",
    "LogonIdFromWinStationNameA",
    "ServerLicensingOpenW",
    "_WinStationUpdateClientCachedCredentials",
    "_WinStationShadowTargetSetup",
    "WinStationCheckLoopBack",
    "WinStationCheckAccess",
    "WinStationGetUserCredentials",
    "WinStationFreeConsoleNotification",
    "_WinStationUpdateUserConfig",
    "WinStationEnumerateProcesses",
    "WinStationConnectA",
    "WinStationQueryEnforcementCore",
    "_WinStationBreakPoint",
    "WinStationBroadcastSystemMessage",
    "WinStationGetMachinePolicy",
    "WinStationSetAutologonPassword",
    "_WinStationGetApplicationInfo",
    "WinStationShadowStop",
    "_WinStationUpdateSettings",
    "WinStationCloseServer",
    "_WinStationShadowTarget",
    "ServerLicensingSetPolicy",
    "ServerSetInternetConnectorStatus",
    "WinStationQueryInformationW",
    "WinStationQueryAllowConcurrentConnections",
    "WinStationEnumerateLicenses",
    "WinStationQueryInformationA",
    "WinStationSetInformationA",
    "_WinStationNotifyNewSession",
    "_WinStationNotifyDisconnectPipe",
    "WinStationUserLoginAccessCheck",
    "WinStationActivateLicense",
    "WinStationGetInitialApplication",
    "WinStationQueryLicense",
    "WinStationVerify",
    "WinStationSendMessageA",
    "WinStationQueryLogonCredentialsW",
    "ServerLicensingDeactivateCurrentPolicy",
    "WinStationRegisterConsoleNotificationEx",
    "WinStationRevertFromServicesSession",
    "WinStationWaitSystemEvent",
    "ServerLicensingFreePolicyInformation",
    "_WinStationAnnoyancePopup",
    "WinStationRemoveLicense",
    "WinStationEnumerateExW",
    "LogonIdFromWinStationNameW",
    "WinStationFreeGAPMemory",
    "WinStationFreeUserCertificates",
    "WinStationGetLoggedOnCount",
    "WinStationDisconnect",
    "_WinStationSessionInitialized",
    "WinStationIsSessionPermitted",
    "_WinStationShadowTarget2"
  ],
  "wintrust.dll": [
    "CryptCATClose",
    "WTHelperCertIsSelfSigned",
    "CryptCATCatalogInfoFromContext",
    "WintrustAddActionID",
    "CryptSIPPutSignedDataMsg",
    "HTTPSFinalProv",
    "MsCatConstructHashTag",
    "CryptCATAdminReleaseCatalogContext",
    "SoftpubFreeDefUsageCallData",
    "CryptSIPGetSignedDataMsg",
    "CryptCATAllocSortedMemberInfo",
    "WTHelperOpenKnownStores",
    "WVTAsn1SpcSpOpusInfoEncode",
    "CryptSIPGetRegWorkingFlags",
    "TrustFindIssuerCertificate",
    "WTHelperGetFileHandle",
    "FindCertsByIssuer",
    "WVTAsn1SpcStatementTypeEncode",
    "CryptCATPersistStore",
    "WVTAsn1SpcFinancialCriteriaInfoEncode",
    "GenericChainCertificateTrust",
    "WVTAsn1SpcPeImageDataEncode",
    "mssip32DllUnregisterServer",
    "SoftpubLoadSignature",
    "CryptSIPRemoveSignedDataMsg",
    "WintrustGetRegPolicyFlags",
    "WVTAsn1SpcIndirectDataContentEncode",
    "IsCatalogFile",
    "OpenPersonalTrustDBDialogEx",
    "SoftpubLoadMessage",
    "CryptCATAdminEnumCatalogFromHash",
    "WintrustLoadFunctionPointers",
    "CryptCATAdminAcquireContext",
    "OfficeCleanupPolicy",
    "SoftpubCleanup",
    "WTHelperCertFindIssuerCertificate",
    "WTHelperGetFileHash",
    "WintrustGetDefaultForUsage",
    "WintrustAddDefaultForUsage",
    "SoftpubLoadDefUsageCallData",
    "WintrustRemoveActionID",
    "CatalogCompactHashDatabase",
    "WintrustCertificateTrust",
    "WVTAsn1SpcSpAgencyInfoEncode",
    "mssip32DllRegisterServer",
    "CryptCATPutMemberInfo",
    "CryptCATEnumerateMember",
    "CryptCATCDFEnumAttributesWithCDFTag",
    "CryptCATCDFEnumMembersByCDFTagEx",
    "WVTAsn1SpcFinancialCriteriaInfoDecode",
    "CryptCATStoreFromHandle",
    "CryptCATAdminRemoveCatalog",
    "WVTAsn1SpcPeImageDataDecode",
    "TrustOpenStores",
    "CryptSIPCreateIndirectData",
    "TrustIsCertificateSelfSigned",
    "SoftpubCheckCert",
    "CryptCATAdminResolveCatalogPath",
    "CryptCATCDFEnumMembersByCDFTag",
    "SoftpubDllRegisterServer",
    "DriverInitializePolicy",
    "WVTAsn1SpcIndirectDataContentDecode",
    "WVTAsn1SpcLinkEncode",
    "WVTAsn1SpcMinimalCriteriaInfoEncode",
    "DriverCleanupPolicy",
    "SoftpubDefCertInit",
    "WVTAsn1SpcSpAgencyInfoDecode",
    "TrustFreeDecode",
    "CryptCATGetMemberInfo",
    "WVTAsn1CatNameValueEncode",
    "CryptSIPVerifyIndirectData",
    "OfficeInitializePolicy",
    "WTHelperGetKnownUsages",
    "CryptCATCDFEnumMembers",
    "WVTAsn1SpcMinimalCriteriaInfoDecode",
    "WVTAsn1CatNameValueDecode",
    "WinVerifyTrust",
    "WVTAsn1CatMemberInfoDecode",
    "WTHelperCertCheckValidSignature",
    "WTHelperCheckCertUsage",
    "AddPersonalTrustDBPages",
    "SoftpubDumpStructure",
    "mscat32DllRegisterServer",
    "TrustDecode",
    "CryptCATGetAttrInfo",
    "CryptCATEnumerateCatAttr",
    "WTHelperGetAgencyInfo",
    "SoftpubInitialize",
    "WVTAsn1CatMemberInfoEncode",
    "CryptCATPutAttrInfo",
    "GenericChainFinalProv",
    "CryptCATCDFClose",
    "WTHelperGetProvCertFromChain",
    "WTHelperGetProvSignerFromChain",
    "OpenPersonalTrustDBDialog",
    "CryptSIPGetInfo",
    "CryptCATOpen",
    "SoftpubDllUnregisterServer",
    "WinVerifyTrustEx",
    "CryptCATVerifyMember",
    "CryptCATAdminAddCatalog",
    "CryptCATCDFEnumAttributes",
    "CryptCATCDFOpen",
    "HTTPSCertificateTrust",
    "WVTAsn1SpcSpOpusInfoDecode",
    "MsCatFreeHashTag",
    "mscat32DllUnregisterServer",
    "WVTAsn1SpcStatementTypeDecode",
    "DllRegisterServer",
    "WintrustSetDefaultIncludePEPageHashes",
    "WVTAsn1SpcSigInfoDecode",
    "SoftpubAuthenticode",
    "DllUnregisterServer",
    "WTHelperProvDataFromStateData",
    "CryptCATFreeSortedMemberInfo",
    "DriverFinalPolicy",
    "WTHelperGetFileName",
    "CryptCATAdminCalcHashFromFileHandle",
    "CryptCATAdminReleaseContext",
    "WTHelperIsInRootStore",
    "CryptCATPutCatAttrInfo",
    "CryptCATGetCatAttrInfo",
    "WVTAsn1SpcSigInfoEncode",
    "WVTAsn1SpcLinkDecode",
    "WintrustSetRegPolicyFlags",
    "CryptCATAdminPauseServiceForBackup",
    "CryptCATHandleFromStore",
    "CryptCATEnumerateAttr",
    "WTHelperGetProvPrivateDataFromChain",
    "CryptCATCDFEnumCatAttributes"
  ],
  "winusb.dll": [
    "WinUsb_SetCurrentAlternateSetting",
    "WinUsb_GetPipePolicy",
    "WinUsb_ParseConfigurationDescriptor",
    "WinUsb_GetOverlappedResult",
    "WinUsb_ParseDescriptors",
    "WinUsb_FlushPipe",
    "WinUsb_QueryInterfaceSettings",
    "WinUsb_AbortPipe",
    "WinUsb_SetPipePolicy",
    "WinUsb_GetPowerPolicy",
    "WinUsb_GetAssociatedInterface",
    "WinUsb_QueryPipe",
    "WinUsb_QueryDeviceInformation",
    "WinUsb_Initialize",
    "WinUsb_WritePipe",
    "WinUsb_ResetPipe",
    "WinUsb_ReadPipe",
    "WinUsb_ControlTransfer",
    "WinUsb_GetDescriptor",
    "WinUsb_Free",
    "WinUsb_SetPowerPolicy",
    "WinUsb_GetCurrentAlternateSetting"
  ],
  "wkscli.dll": [
    "NetRemoveAlternateComputerName",
    "NetWkstaStatisticsGet",
    "NetRenameMachineInDomain",
    "NetUnjoinDomain",
    "NetUseAdd",
    "NetWkstaTransportDel",
    "NetJoinDomain",
    "NetAddAlternateComputerName",
    "NetUseEnum",
    "NetUseDel",
    "NetUseGetInfo",
    "NetWkstaUserEnum",
    "NetGetJoinableOUs",
    "NetWkstaTransportEnum",
    "NetWkstaTransportAdd",
    "NetWkstaUserSetInfo",
    "NetSetPrimaryComputerName",
    "NetEnumerateComputerNames",
    "NetWkstaUserGetInfo",
    "NetValidateName",
    "NetWkstaGetInfo",
    "NetWkstaSetInfo",
    "NetGetJoinInformation"
  ],
  "wksprtPS.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "wkssvc.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "wlanapi.dll": [
    "WlanHostedNetworkQueryProperty",
    "WlanGetProfileList",
    "WlanGetNetworkBssList",
    "WlanHostedNetworkForceStop",
    "WlanGetAvailableNetworkList",
    "WlanAllocateMemory",
    "WlanGetInterfaceCapability",
    "WlanSetAutoConfigParameter",
    "WlanGetProfile",
    "WlanSetSecuritySettings",
    "WlanSetProfileEapXmlUserData",
    "WlanQueryInterface",
    "WlanFreeMemory",
    "WlanGetFilterList",
    "WlanScan",
    "WlanHostedNetworkSetSecondaryKey",
    "WlanHostedNetworkForceStart",
    "WlanSaveTemporaryProfile",
    "WlanRenameProfile",
    "WlanHostedNetworkSetProperty",
    "WlanQueryAutoConfigParameter",
    "WlanSetProfileCustomUserData",
    "WlanDeleteProfile",
    "WlanDisconnect",
    "WlanRegisterNotification",
    "WlanRegisterVirtualStationNotification",
    "WlanSetPsdIEDataList",
    "WlanReasonCodeToString",
    "WlanSetProfilePosition",
    "WlanExtractPsdIEDataList",
    "WlanHostedNetworkRefreshSecuritySettings",
    "WlanHostedNetworkStartUsing",
    "WlanSetInterface",
    "WlanConnect",
    "WlanOpenHandle",
    "WlanIhvControl",
    "WlanHostedNetworkQuerySecondaryKey",
    "WlanGetSecuritySettings",
    "WlanCloseHandle",
    "WlanSetFilterList",
    "WlanGetProfileCustomUserData",
    "WlanSetProfileList",
    "WlanEnumInterfaces",
    "WlanHostedNetworkStopUsing",
    "WlanSetProfile",
    "WlanHostedNetworkInitSettings",
    "WlanSetProfileEapUserData",
    "WlanHostedNetworkQueryStatus"
  ],
  "wlancfg.dll": [
    "GetResourceString",
    "InitHelperDll"
  ],
  "wlandlg.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wlangpui.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "GetAdPolicyAsXML",
    "DllGetClassObject",
    "GetWmiPolicyAsXML",
    "DllRegisterServer"
  ],
  "wlanhlp.dll": [
    "WlanRefreshConnections",
    "WlanGenerateProfileXmlBasicSettings",
    "WlanParseProfileXmlBasicSettings",
    "WlanQueryVirtualInterfaceType",
    "WlanHostedNetworkSetWCNSettings",
    "WlanInitPlapParams",
    "WlanHostedNetworkFreeWCNSettings",
    "WlanEnumAllInterfaces",
    "WlanGetProfileEapUserDataInfo",
    "WlanIsNetworkSuppressed",
    "WlanQueryPlapCredentials",
    "QueryNetconStatus",
    "WlanInternalScan",
    "WlanHostedNetworkHlpQueryEverUsed",
    "WlanDoPlap",
    "WlanConnectWithInput",
    "WlanQueryPreConnectInput",
    "WlanQueryCreateAllUserProfileRestricted",
    "WlanDeinitPlapParams",
    "WlanGetProfileKeyInfo",
    "WlanCancelPlap",
    "WlanSendUIResponse",
    "WlanSetAllUserProfileRestricted",
    "WlanIsUIRequestPending",
    "WlanPrivateGetAvailableNetworkList",
    "WlanRemoveUIForwardingNetworkList",
    "WlanSetUIForwardingNetworkList",
    "WlanHostedNetworkQueryWCNSettings",
    "QueryNetconVirtualCharacteristic"
  ],
  "wlaninst.dll": [
    "WlanDeviceClassCoInstaller"
  ],
  "wlanmsm.dll": [
    "InitializeDll",
    "FatMsmInit",
    "Dot11MsmInit",
    "Dot11MsmDeInit",
    "FatMsmDeInit"
  ],
  "wlanpref.dll": [
    "DllMain",
    "Dot11CleanupAdhocW",
    "DllCanUnloadNow",
    "Dot11CleanupOnLogonW",
    "DllUnregisterServer",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wlansec.dll": [
    "MSMSecFreeMemory",
    "MSMSecQueryIntfState",
    "MSMSecSendPktCompletion",
    "MSMSecRecvIndication",
    "MSMSecIsUIRequestPending",
    "MSMSecSetRuntimeState",
    "MSMSecRedoSecurity",
    "MSMSecInitialize",
    "MSMSecSetWcnOneXEnable",
    "MSMSecPerformPreAssociateSecurity",
    "MSMSecDeinitializeAdapter",
    "MSMSecStopSecurity",
    "MSMSecProcessSessionChange",
    "MSMSecFreeProfile",
    "MSMSecFreeIntfState",
    "MSMSecFreePeerState",
    "MSMSecPerformCapabilityMatch",
    "MSMSecDeinitialize",
    "MSMSecCreateDiscoveryProfiles",
    "MSMSecPerformPostAssociateSecurity",
    "MSMSecQueryPeerState",
    "MSMSecStopPostAssociateSecurity",
    "MSMSecQueryAPPeerPSKIndex",
    "MSMSecInitializeAdapter",
    "MSMSecRecvPacket",
    "MSMSecConnectionHealthCheck",
    "MSMSecSetAPSecondaryPSK",
    "MSMSecUIResponse"
  ],
  "wlansvc.dll": [
    "WLNotifyOnLogon",
    "WlanSvcMain",
    "WLNotifyOnLogoff",
    "SvchostPushServiceGlobals"
  ],
  "wlanui.dll": [
    "WLInvokeProfileUI",
    "WLFreeProfile",
    "DllGetClassObject",
    "WLInvokeProfileUIFromXMLFile",
    "WLFreeProfileXml",
    "WlanUIEditProfile"
  ],
  "wlanutil.dll": [
    "WlanIsActiveConsoleUser",
    "WlanSsidToDisplayName",
    "WlanStringToSsid"
  ],
  "wlgpclnt.dll": [
    "WLGPAInit",
    "GenerateWLANPolicy",
    "ProcessWLANPolicyEx",
    "WLGPADeInit"
  ],
  "wmcodecdspps.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wmdmlog.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wmdmps.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "GetProxyDllInfo",
    "DllRegisterServer"
  ],
  "wmdrmdev.dll": [
    "WMCreateDeviceRegistrationPriv",
    "DllRegisterServer"
  ],
  "wmdrmnet.dll": [
    "DllRegisterServer",
    "WMCreateDRMTranscryptionManagerPriv",
    "WMCreateDRMTranscryptorPriv"
  ],
  "wmdrmsdk.dll": [
    "WMDRMShutdown",
    "WMDRMCreateProvider",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "WMDRMStartup",
    "_WMDRMCreateProvider",
    "DllGetClassObject",
    "DllRegisterServer",
    "MFWMDRMOutputTrustAuthority_CreateInstance"
  ],
  "wmerror.dll": "No exports",
  "wmi.dll": [
    "RemoveTraceCallback",
    "WmiExecuteMethodW",
    "OpenTraceA",
    "WmiSetSingleInstanceA",
    "WmiMofEnumerateResourcesW",
    "WmiOpenBlock",
    "RegisterTraceGuidsW",
    "ControlTraceW",
    "QueryAllTracesA",
    "WmiFileHandleToInstanceNameW",
    "WmiQueryAllDataW",
    "TraceEventInstance",
    "TraceEvent",
    "SetTraceCallback",
    "QueryAllTracesW",
    "GetTraceLoggerHandle",
    "WmiCloseBlock",
    "WmiFileHandleToInstanceNameA",
    "WmiSetSingleInstanceW",
    "GetTraceEnableLevel",
    "WmiExecuteMethodA",
    "WmiFreeBuffer",
    "StartTraceA",
    "WmiQueryAllDataA",
    "GetTraceEnableFlags",
    "WmiQueryGuidInformation",
    "WmiQuerySingleInstanceW",
    "WmiQuerySingleInstanceA",
    "CloseTrace",
    "CreateTraceInstanceId",
    "EnableTrace",
    "StartTraceW",
    "ProcessTrace",
    "WmiNotificationRegistrationA",
    "WmiSetSingleItemA",
    "WmiDevInstToInstanceNameA",
    "WmiDevInstToInstanceNameW",
    "OpenTraceW",
    "WmiMofEnumerateResourcesA",
    "WmiSetSingleItemW",
    "WmiNotificationRegistrationW",
    "ControlTraceA",
    "WmiEnumerateGuids",
    "UnregisterTraceGuids",
    "RegisterTraceGuidsA"
  ],
  "wmicmiplugin.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wmidx.dll": [
    "WMCreateASFChopper"
  ],
  "wmiprop.dll": [
    "WmiPropCoInstaller"
  ],
  "wmp.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wmpcm.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wmpdxm.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wmpeffects.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wmploc.DLL": "No exports",
  "wmpmde.dll": [
    "DllUnregisterServer",
    "MFCreateNetVRoot",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "MFCreateWMPMDEOpCenter"
  ],
  "wmpps.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wmpshell.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wmpsrcwp.dll": [
    "ShowStreamTransformPropertyPage",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "ShowSourcePropertyPage"
  ],
  "wmsgapi.dll": [
    "WmsgBroadcastNotifyMessage",
    "WmsgPostMessage",
    "WmsgBroadcastMessage",
    "WmsgPostNotifyMessage",
    "WmsgSendMessage",
    "WmsgSendPSPMessage"
  ],
  "wmvdspa.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wow32.dll": [
    "WOWGlobalLock16",
    "WOW32ResolveHandle",
    "CopyDropFilesFrom16",
    "WOWDirectedYield16",
    "W32Init",
    "W32Dispatch",
    "WOWHandle32",
    "GetCommHandle",
    "WOW32DriverCallback",
    "WOWGetVDMPointer",
    "WOWGlobalAlloc16",
    "WOWGlobalUnlockFree16",
    "WOWGlobalAllocLock16",
    "WOWGetVDMPointerFix",
    "CopyDropFilesFrom32",
    "WOWFreeMetafile",
    "WOW32ResolveMemory",
    "GetCommShadowMSR",
    "WOWCallback16Ex",
    "WOWGetVDMPointerUnfix",
    "W32HungAppNotifyThread",
    "WOWUseMciavi16",
    "WOWCallback16",
    "WOWGlobalLockSize16",
    "WOWGlobalUnlock16",
    "WOWYield16",
    "WOWGlobalFree16",
    "WOWHandle16"
  ],
  "wpcao.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wpccpl.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wpcmig.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wpcsvc.dll": [
    "ServiceMain"
  ],
  "wpcumi.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wpd_ci.dll": [
    "DoCmd",
    "WpdClassInstaller",
    "CoDeviceInstall",
    "RescanBus",
    "MigrateMTPDevicesInstalledAsMSC"
  ],
  "wpdbusenum.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "wpdshext.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "_SHBindToFolderIDListParentEx@24",
    "_SHBindToFolderIDListParent@20",
    "_CDefFolderMenu_MergeMenu@16",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wpdwcn.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "ws2_32.dll": [
    "WahWriteLSPEvent",
    "WahCloseNotificationHandleHelper",
    "WSCGetProviderInfo",
    "inet_ntoa",
    "WSCUpdateProvider",
    "FreeAddrInfoW",
    "WSAIsBlocking",
    "WSAEnumProtocolsA",
    "WSAProviderConfigChange",
    "getsockname",
    "WSAGetServiceClassNameByClassIdA",
    "FreeAddrInfoEx",
    "WSAAddressToStringA",
    "gethostname",
    "WSAGetQOSByName",
    "WSAWaitForMultipleEvents",
    "WahCloseHandleHelper",
    "WSAConnectByList",
    "WSAAsyncGetHostByName",
    "WSASetEvent",
    "WSCUnInstallNameSpace",
    "WSAInstallServiceClassA",
    "WSALookupServiceNextA",
    "accept",
    "WSAAsyncGetServByName",
    "WSAAsyncGetProtoByNumber",
    "WEP",
    "getservbyport",
    "WSAResetEvent",
    "WSANtohl",
    "WSASetLastError",
    "WSAEnumNetworkEvents",
    "inet_pton",
    "WSAGetLastError",
    "WSAConnectByNameA",
    "WSAEventSelect",
    "htonl",
    "send",
    "WahReferenceContextByHandle",
    "WahCreateSocketHandle",
    "ntohs",
    "WSAInstallServiceClassW",
    "WSCGetApplicationCategory",
    "inet_addr",
    "WSANSPIoctl",
    "WSACancelBlockingCall",
    "WahCreateNotificationHandle",
    "inet_ntop",
    "WSAEnumProtocolsW",
    "WSAHtonl",
    "getsockopt",
    "WahEnableNonIFSHandleSupport",
    "WSAAccept",
    "WSAAsyncSelect",
    "WahCompleteRequest",
    "connect",
    "WSACancelAsyncRequest",
    "gethostbyname",
    "WSAEnumNameSpaceProvidersExA",
    "freeaddrinfo",
    "WahOpenNotificationHandleHelper",
    "FreeAddrInfoExW",
    "WSAProviderCompleteAsyncCall",
    "WSAConnectByNameW",
    "WSCEnableNSProvider",
    "WSAConnect",
    "WSASetServiceA",
    "WSARecvFrom",
    "WSACloseEvent",
    "gethostbyaddr",
    "WSAAdvertiseProvider",
    "WSALookupServiceEnd",
    "WahDisableNonIFSHandleSupport",
    "WSApSetPostRoutine",
    "WSARemoveServiceClass",
    "getservbyname",
    "WSCInstallProviderAndChains",
    "WahCreateHandleContextTable",
    "closesocket",
    "WSAGetServiceClassInfoW",
    "listen",
    "WSASendDisconnect",
    "getpeername",
    "InetNtopW",
    "WPUCompleteOverlappedRequest",
    "GetAddrInfoExA",
    "WSACleanup",
    "WSANtohs",
    "getprotobynumber",
    "sendto",
    "WahDestroyHandleContextTable",
    "WSADuplicateSocketW",
    "WSAJoinLeaf",
    "WahEnumerateHandleContexts",
    "WSALookupServiceBeginA",
    "WSCInstallNameSpace",
    "WahOpenCurrentThread",
    "recvfrom",
    "SetAddrInfoExA",
    "WSASocketA",
    "WSCDeinstallProvider",
    "__WSAFDIsSet",
    "WahCloseThread",
    "WSASetServiceW",
    "select",
    "WahQueueUserApc",
    "ntohl",
    "WSCSetApplicationCategory",
    "WSAGetOverlappedResult",
    "getnameinfo",
    "WSAAddressToStringW",
    "WahCloseApcHelper",
    "WSAAsyncGetProtoByName",
    "WSAGetServiceClassInfoA",
    "InetPtonW",
    "socket",
    "WSAEnumNameSpaceProvidersExW",
    "shutdown",
    "WSALookupServiceNextW",
    "WSAIoctl",
    "WSARecv",
    "WSAAsyncGetServByPort",
    "WSAGetServiceClassNameByClassIdW",
    "WahOpenHandleHelper",
    "WSAStartup",
    "setsockopt",
    "WSCSetProviderInfo",
    "WSCInstallProvider",
    "getaddrinfo",
    "GetNameInfoW",
    "WahWaitForNotification",
    "GetAddrInfoW",
    "recv",
    "WSASocketW",
    "WahInsertHandleContext",
    "WSAEnumNameSpaceProvidersA",
    "WSALookupServiceBeginW",
    "WSASendTo",
    "WSAStringToAddressW",
    "SetAddrInfoExW",
    "WahOpenApcHelper",
    "ioctlsocket",
    "WSAUnadvertiseProvider",
    "getprotobyname",
    "bind",
    "WSACreateEvent",
    "htons",
    "WSCEnumProtocols",
    "WSADuplicateSocketA",
    "WSAHtons",
    "WahCloseSocketHandle",
    "WSASend",
    "WSAPoll",
    "WahNotifyAllProcesses",
    "WSCInstallNameSpaceEx",
    "WSARecvDisconnect",
    "WSCWriteNameSpaceOrder",
    "WSAStringToAddressA",
    "WSAAsyncGetHostByAddr",
    "WSASetBlockingHook",
    "WSASendMsg",
    "GetAddrInfoExW",
    "WSCWriteProviderOrder",
    "WahRemoveHandleContext",
    "WSAEnumNameSpaceProvidersW",
    "WSCGetProviderPath",
    "WSAUnhookBlockingHook"
  ],
  "ws2help.dll": [
    "WahCreateNotificationHandle",
    "WahWriteLSPEvent",
    "WahCloseNotificationHandleHelper",
    "WahWaitForNotification",
    "WahDestroyHandleContextTable",
    "WahEnumerateHandleContexts",
    "WahInsertHandleContext",
    "WahEnableNonIFSHandleSupport",
    "WahOpenCurrentThread",
    "WahCompleteRequest",
    "WahCloseHandleHelper",
    "WahOpenApcHelper",
    "WahOpenNotificationHandleHelper",
    "WahCloseThread",
    "WahCloseSocketHandle",
    "WahNotifyAllProcesses",
    "WahQueueUserApc",
    "WahDisableNonIFSHandleSupport",
    "WahCloseApcHelper",
    "WahCreateHandleContextTable",
    "WahReferenceContextByHandle",
    "WahCreateSocketHandle",
    "WahRemoveHandleContext",
    "WahOpenHandleHelper"
  ],
  "wscapi.dll": [
    "wscAutoUpdatesGetStatus",
    "wscRegisterChangeNotification",
    "wscPing",
    "wscProductInfoFree",
    "wscAutoUpdatesEnableScheduledMode",
    "wscGetAlertStatus",
    "wscLuaSettingsFix",
    "wscUnregisterSecurityProduct",
    "WscGetSecurityProviderHealth",
    "wscGeneralSecurityGetStatus",
    "wscUnRegisterChangeNotification",
    "wscIcfEnable",
    "wscAntiVirusGetStatus",
    "WscRegisterForChanges",
    "wscAntiSpywareGetStatus",
    "wscUpdateProductStatus",
    "wscIeSettingsFix",
    "WscUnRegisterChanges",
    "wscRegisterSecurityProduct",
    "wscOverrideComponentStatus",
    "wscFirewallGetStatus"
  ],
  "wscinterop.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wscisvif.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wscmisetup.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wscproxystub.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wscsvc.dll": [
    "SvchostPushServiceGlobals",
    "ServiceMain"
  ],
  "wsdchngr.dll": [
    "WSDCHNGRInitialize",
    "WSDCHNGRChallengeDeviceClass",
    "WSDCHNGRShutdown",
    "WSDCHNGRRegisterDeviceToChallenge"
  ],
  "wsecedit.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wsepno.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "wshbth.dll": [
    "WSHGetProviderGuid",
    "WSHOpenSocket",
    "WSHEnumProtocols",
    "WSHOpenSocket2",
    "WSHGetWildcardSockaddr",
    "WSHGetBroadcastSockaddr",
    "WSHJoinLeaf",
    "WSHGetWSAProtocolInfo",
    "WSHSetSocketInformation",
    "WSHIoctl",
    "WSHGetSocketInformation",
    "WSHGetSockaddrType",
    "NSPStartup",
    "WSHAddressToString",
    "WSHGetWinsockMapping",
    "WSHNotify",
    "WSHStringToAddress"
  ],
  "wshcon.dll": [
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer",
    "DLLGetDocumentation"
  ],
  "wshelper.dll": [
    "InitHelperDll"
  ],
  "wshext.dll": [
    "GetSignedDataMsg",
    "IsFileSupportedName",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "RemoveSignedDataMsg",
    "VerifyIndirectData",
    "PutSignedDataMsg",
    "DllGetClassObject",
    "CreateIndirectData",
    "DllRegisterServer"
  ],
  "wship6.dll": [
    "WSHGetProviderGuid",
    "WSHOpenSocket",
    "WSHEnumProtocols",
    "WSHOpenSocket2",
    "WSHGetWildcardSockaddr",
    "WSHJoinLeaf",
    "WSHGetWSAProtocolInfo",
    "WSHSetSocketInformation",
    "WSHIoctl",
    "WSHGetSocketInformation",
    "WSHGetSockaddrType",
    "WSHGetWinsockMapping",
    "WSHAddressToString",
    "WSHNotify",
    "WSHStringToAddress"
  ],
  "wshirda.dll": [
    "WSHGetProviderGuid",
    "WSHOpenSocket",
    "WSHEnumProtocols",
    "WSHGetWildcardSockaddr",
    "WSHGetWSAProtocolInfo",
    "WSHSetSocketInformation",
    "WSHIoctl",
    "WSHGetSocketInformation",
    "WSHGetSockaddrType",
    "WSHGetWinsockMapping",
    "WSHNotify"
  ],
  "wshnetbs.dll": [
    "WSHGetProviderGuid",
    "WSHOpenSocket",
    "WSHEnumProtocols",
    "WSHGetWildcardSockaddr",
    "WSHSetSocketInformation",
    "WSHNotify",
    "WSHGetSocketInformation",
    "WSHGetSockaddrType",
    "WSHGetWinsockMapping"
  ],
  "wshqos.dll": [
    "WSHGetProviderGuid",
    "WSHOpenSocket",
    "WSHEnumProtocols",
    "WSHOpenSocket2",
    "WSHGetWildcardSockaddr",
    "WSHJoinLeaf",
    "WSHGetWSAProtocolInfo",
    "WSHSetSocketInformation",
    "WSHIoctl",
    "WSHGetSocketInformation",
    "WSHGetSockaddrType",
    "WSHGetWinsockMapping",
    "WSHAddressToString",
    "WSHNotify",
    "WSHStringToAddress"
  ],
  "wshrm.dll": [
    "WSHGetProviderGuid",
    "WSHOpenSocket",
    "WSHEnumProtocols",
    "WSHOpenSocket2",
    "WSHGetWildcardSockaddr",
    "WSHGetBroadcastSockaddr",
    "WSHJoinLeaf",
    "WSHGetWSAProtocolInfo",
    "WSHSetSocketInformation",
    "WSHIoctl",
    "WSHGetSocketInformation",
    "WSHGetSockaddrType",
    "WSHGetWinsockMapping",
    "WSHAddressToString",
    "WSHNotify",
    "WSHStringToAddress"
  ],
  "wsmplpxy.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wsnmp32.dll": [
    "SnmpGetRetransmitMode",
    "SnmpCreateVbl",
    "SnmpOidCompare",
    "SnmpSetPort",
    "SnmpSetTimeout",
    "SnmpStrToContext",
    "SnmpDuplicatePdu",
    "SnmpDuplicateVbl",
    "SnmpSendMsg",
    "SnmpCleanupEx",
    "SnmpRecvMsg",
    "SnmpCancelMsg",
    "SnmpClose",
    "SnmpGetTranslateMode",
    "SnmpCreateSession",
    "SnmpOidCopy",
    "SnmpStrToOid",
    "SnmpFreeContext",
    "SnmpDecodeMsg",
    "_SnmpSetAgentAddress@4",
    "SnmpFreeVbl",
    "SnmpDeleteVb",
    "SnmpSetPduData",
    "_SnmpConveyAgentAddress@4",
    "SnmpStrToEntity",
    "SnmpEntityToStr",
    "SnmpGetRetry",
    "SnmpRegister",
    "SnmpSetTranslateMode",
    "SnmpOidToStr",
    "SnmpCleanup",
    "SnmpCreatePdu",
    "SnmpContextToStr",
    "SnmpGetVendorInfo",
    "SnmpSetVb",
    "SnmpFreeDescriptor",
    "SnmpGetTimeout",
    "SnmpFreeEntity",
    "SnmpSetRetransmitMode",
    "SnmpStartupEx",
    "SnmpFreePdu",
    "SnmpGetLastError",
    "SnmpCountVbl",
    "SnmpGetPduData",
    "SnmpListen",
    "SnmpOpen",
    "SnmpGetVb",
    "SnmpEncodeMsg",
    "SnmpStartup",
    "SnmpListenEx",
    "SnmpSetRetry"
  ],
  "wsock32.dll": [
    "WSACancelBlockingCall",
    "EnumProtocolsW",
    "sendto",
    "GetTypeByNameA",
    "inet_ntoa",
    "TransmitFile",
    "rcmd",
    "inet_network",
    "recv",
    "EnumProtocolsA",
    "WSAIsBlocking",
    "AcceptEx",
    "GetAddressByNameA",
    "getsockopt",
    "getsockname",
    "WSAAsyncSelect",
    "s_perror",
    "recvfrom",
    "WSARecvEx",
    "sethostname",
    "connect",
    "MigrateWinsockConfiguration",
    "gethostname",
    "NPLoadNameSpaces",
    "WSACancelAsyncRequest",
    "ioctlsocket",
    "__WSAFDIsSet",
    "WSAAsyncGetHostByName",
    "SetServiceW",
    "GetServiceA",
    "bind",
    "gethostbyname",
    "getnetbyname",
    "getprotobyname",
    "GetAcceptExSockaddrs",
    "htons",
    "GetNameByTypeA",
    "accept",
    "WSAAsyncGetServByName",
    "select",
    "WSAAsyncGetProtoByNumber",
    "WEP",
    "GetNameByTypeW",
    "getservbyport",
    "gethostbyaddr",
    "ntohl",
    "GetServiceW",
    "rresvport",
    "WSASetLastError",
    "WSApSetPostRoutine",
    "WSAAsyncGetProtoByName",
    "getservbyname",
    "socket",
    "WSAGetLastError",
    "GetTypeByNameW",
    "closesocket",
    "dn_expand",
    "listen",
    "htonl",
    "send",
    "shutdown",
    "WSAAsyncGetHostByAddr",
    "WSASetBlockingHook",
    "getpeername",
    "ntohs",
    "WSAAsyncGetServByPort",
    "inet_addr",
    "GetAddressByNameW",
    "rexec",
    "SetServiceA",
    "WSACleanup",
    "WSAStartup",
    "setsockopt",
    "getprotobynumber",
    "WSAUnhookBlockingHook"
  ],
  "wtsapi32.dll": [
    "WTSEnumerateProcessesW",
    "WTSCreateListenerW",
    "WTSVirtualChannelPurgeInput",
    "WTSQuerySessionInformationA",
    "WTSFreeMemory",
    "WTSShutdownSystem",
    "WTSEnumerateSessionsExA",
    "WTSEnumerateListenersW",
    "WTSGetListenerSecurityA",
    "WTSConnectSessionA",
    "WTSSendMessageW",
    "WTSSetUserConfigW",
    "WTSEnumerateServersA",
    "WTSVirtualChannelRead",
    "WTSFreeMemoryExW",
    "WTSQueryUserToken",
    "WTSEnumerateProcessesA",
    "WTSConnectSessionW",
    "WTSSetSessionInformationW",
    "WTSVirtualChannelClose",
    "WTSGetListenerSecurityW",
    "WTSVirtualChannelOpenEx",
    "WTSEnumerateServersW",
    "WTSFreeMemoryExA",
    "WTSLogoffSession",
    "WTSOpenServerExW",
    "WTSQuerySessionInformationW",
    "WTSStopRemoteControlSession",
    "WTSTerminateProcess",
    "WTSEnumerateSessionsA",
    "WTSSendMessageA",
    "WTSSetUserConfigA",
    "WTSQueryListenerConfigW",
    "WTSQueryUserConfigW",
    "WTSStartRemoteControlSessionA",
    "WTSVirtualChannelQuery",
    "WTSUnRegisterSessionNotification",
    "WTSRegisterSessionNotification",
    "WTSCreateListenerA",
    "WTSUnRegisterSessionNotificationEx",
    "WTSDisconnectSession",
    "WTSStartRemoteControlSessionW",
    "WTSVirtualChannelWrite",
    "WTSEnumerateProcessesExA",
    "WTSSetListenerSecurityW",
    "WTSEnumerateSessionsExW",
    "WTSOpenServerA",
    "WTSVirtualChannelPurgeOutput",
    "WTSRegisterSessionNotificationEx",
    "WTSOpenServerExA",
    "WTSSetListenerSecurityA",
    "WTSSetSessionInformationA",
    "WTSEnumerateListenersA",
    "WTSCloseServer",
    "WTSQueryUserConfigA",
    "WTSEnumerateProcessesExW",
    "WTSEnumerateSessionsW",
    "WTSVirtualChannelOpen",
    "WTSWaitSystemEvent",
    "WTSQueryListenerConfigA",
    "WTSOpenServerW"
  ],
  "wuapi.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wuaueng.dll": [
    "DllInstall",
    "GeneralizeForImaging",
    "GetEngineStatusInfo",
    "WUServiceMain",
    "DllUnregisterServer",
    "DllMain",
    "ServiceHandler",
    "WUAutoUpdateAtShutdown",
    "RegisterServiceVersion",
    "DllRegisterServer",
    "GetAUOptionsEx",
    "WUCheckForUpdatesAtShutdown",
    "ServiceMain"
  ],
  "wucltux.dll": [
    "public: unsigned long __thiscall CUpdateInfoSet::GetCheckedUpdateCount(void)const",
    "private: static class CFeaturedUpdateNotificationReporting CUpdateInfoSet::ms_FeaturedUpdateReporting",
    "private: void __thiscall CUpdateInfoSet::CopySelectedUpdateList(class CUpdateInfoSet const *)",
    "public: long __thiscall CUpdateInfoSet::GetCheckedUpdateIds(int,unsigned long *,struct tagDSGlobalUpdateId * *)const",
    "private: int __thiscall CUpdateInfoSet::IsUpdateMissingInfo(unsigned long)const",
    "public: struct tagDSUpdateMetadata_V2 const * __thiscall CUpdateInfoSet::GetUpdateMetadata(unsigned long)const",
    "public: __thiscall CUpdateInfoSet::~CUpdateInfoSet(void)",
    "public: int __thiscall CUpdateInfoSet::GetFeaturedUpdateInfo(unsigned long,unsigned short *,unsigned int,unsigned short *,unsigned int)const",
    "public: int __thiscall CUpdateInfoSet::SetUpdateHidden(struct tagDSGlobalUpdateId const &,int)",
    "public: struct tagDSDeployment_V3 const * __thiscall CUpdateInfoSet::GetUpdateDeployment(unsigned long)const",
    "public: void __thiscall CUpdateInfoSet::ClearSelectedUpdateList(void)",
    "private: void __thiscall CUpdateInfoSet::ZeroMemoryPopulatedData(void)",
    "private: static long __stdcall CWUAppSqmHelper::SqmThisUpdate(class CWUSqmSession *,unsigned short * const,int,int,int,enum WUAppPageId)",
    "DllRegisterServer",
    "public: unsigned long __thiscall CUpdateInfoSet::GetOptedOutUpdateCount(void)const",
    "private: void __thiscall CUpdateInfoSet::ComputeAllUpdateInfo(void)",
    "public: unsigned long __thiscall CUpdateInfoSet::GetNonHiddenUpdateCount(void)const",
    "public: int __thiscall CUpdateInfoSet::IsUpdateChecked(unsigned long)const",
    "public: int __thiscall CUpdateInfoSet::IsUpdateRecommended(unsigned long)const",
    "public: long __thiscall CUpdateInfoSet::Populate(struct IAutoUpdateClient *,struct AUOptionsEx_V3 const &,enum tagAUServerType,int)",
    "public: int __thiscall CUpdateInfoSet::IsUpdateExtra(unsigned long)const",
    "public: int __thiscall CUpdateInfoSet::IsUpdateImportant(unsigned long)const",
    "public: int __thiscall CUpdateInfoSet::SetUpdateChecked(unsigned long,int)",
    "public: unsigned long __thiscall CUpdateInfoSet::GetFeaturedUpdateCount(void)const",
    "DllUnregisterServer",
    "public: int __thiscall CUpdateInfoSet::IsPopulated(void)const",
    "public: unsigned long __thiscall CUpdateInfoSet::GetUpdateCount(enum UpdateGetCheckedType,enum UpdateGetFeaturedType,int)const",
    "public: void __thiscall CUpdateInfoSet::ReportFeaturedUpdateEvent(enum tagFeaturedUpdateNotificationEvent,unsigned int,unsigned long const *,struct IAutoUpdateClient *)const",
    "public: class CUpdateInfoSet & __thiscall CUpdateInfoSet::operator=(class CUpdateInfoSet const &)",
    "public: unsigned long __thiscall CUpdateInfoSet::GetUpdateIndex(struct tagDSGlobalUpdateId const &)const",
    "public: enum UpdateImportance __thiscall CUpdateInfoSet::GetUpdateImportance(unsigned long)const",
    "public: unsigned long __thiscall CUpdateInfoSet::GetFeaturedUpdateIndex(struct _GUID const &)const",
    "public: __thiscall CFeaturedUpdateNotificationReporting::CFeaturedUpdateNotificationReporting(void)",
    "public: long __thiscall CUpdateInfoSet::GetPeerUpdateIdsByIndex(unsigned long,unsigned long *,struct tagDSGlobalUpdateId const * *)const",
    "public: int __thiscall CUpdateInfoSet::IsUpdateHidden(unsigned long)const",
    "private: static long __stdcall CWUAppSqmHelper::SqmSetClientVersion(class CWUSqmSession *)",
    "public: class CFeaturedUpdateNotificationReporting & __thiscall CFeaturedUpdateNotificationReporting::operator=(class CFeaturedUpdateNotificationReporting const &)",
    "public: int __thiscall CUpdateInfoSet::IsUpdateFeatured(unsigned long)const",
    "private: void __thiscall CUpdateInfoSet::PurgeUpdate(unsigned long)",
    "private: int __thiscall CUpdateInfoSet::IsCategoryMissingInfo(struct tagDSUpdateMetadata_V2 const &)const",
    "public: int __thiscall CUpdateInfoSet::CanUpdateBeUnchecked(unsigned long)const",
    "public: unsigned long __thiscall CUpdateInfoSet::GetHiddenUpdateCount(void)const",
    "public: unsigned long __thiscall CUpdateInfoSet::GetUpdateCountByImportance(enum UpdateImportance,enum UpdateGetCheckedType,enum UpdateGetFeaturedType,int)const",
    "public: void __thiscall CUpdateInfoSet::Reset(void)",
    "public: unsigned long __thiscall CUpdateInfoSet::GetCategoryCount(void)const",
    "public: __thiscall CUpdateInfoSet::CUpdateInfoSet(unsigned long)",
    "public: int __thiscall CUpdateInfoSet::CanSupportForcedInstall(void)const",
    "public: int __thiscall CUpdateInfoSet::CanUpdateBeChecked(unsigned long)const",
    "public: int __thiscall CUpdateInfoSet::IsUpdateAutoselected(unsigned long)const",
    "public: static long __stdcall CWUAppSqmHelper::SqmSetUacData(class CWUAppCore *,struct AUOptionsEx_V3 const &,enum tagElevatedOperation)",
    "private: long __thiscall CUpdateInfoSet::MergeUpdateInfo(unsigned long,unsigned long)",
    "public: void __thiscall CUpdateInfoSet::RestoreSelectedUpdateListToDefault(void)",
    "public: __thiscall CFeaturedUpdateNotificationReporting::~CFeaturedUpdateNotificationReporting(void)",
    "private: static long __stdcall CWUAppSqmHelper::SqmSetUserType(class CWUSqmSession *)",
    "public: class CWUAppSqmHelper & __thiscall CWUAppSqmHelper::operator=(class CWUAppSqmHelper const &)",
    "public: int __thiscall CUpdateInfoSet::IsUpdateOptional(unsigned long)const",
    "public: int __thiscall CUpdateInfoSet::SetUpdateChecked(struct tagDSGlobalUpdateId const &,int)",
    "DllCanUnloadNow",
    "private: int __thiscall CUpdateInfoSet::IsExclusiveUpdateHandlingEnabled(void)const",
    "public: int __thiscall CUpdateInfoSet::CanUpdateCheckedStateBeToggled(unsigned long)const",
    "public: long __thiscall CUpdateInfoSet::SetCheckedUpdateIds(unsigned long,struct tagDSGlobalUpdateId *)",
    "public: struct _tagUpdateInfo const * __thiscall CUpdateInfoSet::GetUpdateInfo(unsigned long)const",
    "private: static long __stdcall CWUAppSqmHelper::SqmIfThisUpdateIsSelectedOrHidden(class CWUSqmSession *,class CUpdateInfoSet const *,unsigned long,int,enum WUAppPageId,int &)",
    "public: void __thiscall CFeaturedUpdateNotificationReporting::ReportFeaturedUpdateEvent(enum tagFeaturedUpdateNotificationEvent,unsigned int,struct tagDSGlobalUpdateId const *,struct IAutoUpdateClient *)",
    "public: int __thiscall CUpdateInfoSet::IsUpdateDownloaded(unsigned long)const",
    "public: static long __stdcall CWUAppSqmHelper::SqmAllSelectedAndHiddenUpdates(class CWUSqmSession *,class CUpdateInfoSet const *,int,enum WUAppPageId,int)",
    "public: static long __stdcall CWUAppSqmHelper::SqmOnWUAppLaunch(class CWUSqmSession *)",
    "public: int __thiscall CUpdateInfoSet::CanUpdateBeHidden(unsigned long)const",
    "DllGetClassObject",
    "public: long __thiscall CUpdateInfoSet::GetPendingEulaIdsByIndex(unsigned long,unsigned long *,struct _GUID const * *)const",
    "public: struct tagDSUpdateMetadata_V2 const * __thiscall CUpdateInfoSet::GetCategoryMetadata(unsigned long)const",
    "public: int __thiscall CUpdateInfoSet::SetUpdateHidden(unsigned long,int)",
    "public: int __thiscall CUpdateInfoSet::HasNonAutoSelectedUpdates(void)const",
    "private: void __thiscall CUpdateInfoSet::RemoveUnwantedUpdates(void)"
  ],
  "wudriver.dll": [
    "DownloadUpdatedFiles",
    "CloseCDMContext",
    "CancelCDMOperation",
    "OpenCDMContext",
    "OpenCDMContextEx",
    "FindMatchingDriver",
    "DetFilesDownloaded",
    "DownloadIsInternetAvailable",
    "LogDriverNotFound",
    "QueryDetectionFiles"
  ],
  "wups.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wups2.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wuwebv.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "wvc.dll": [
    "DllMain",
    "DllUnregisterServer",
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllRegisterServer"
  ],
  "wwancfg.dll": [
    "GetResourceString",
    "InitHelperDll"
  ],
  "wwanconn.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "DllMain"
  ],
  "wwaninst.dll": [
    "WwanDeviceClassCoInstaller"
  ],
  "wwanmm.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject",
    "StartDiagnosticsW"
  ],
  "wwanprotdim.dll": [
    "DimInitialize"
  ],
  "wwansvc.dll": [
    "WwanSvcMain",
    "SvchostPushServiceGlobals"
  ],
  "wwapi.dll": [
    "WwanGetProfile",
    "WwanCloseHandle",
    "WwanFreeMemory",
    "WwanSmsDelete",
    "WwanEnumerateInterfaces",
    "WwanQueryInterface",
    "WwanSmsRead",
    "WwanConnect",
    "WwanScan",
    "WwanConnectByActivityId",
    "WwanSetProfile",
    "WwanDeleteProfile",
    "WwanConvertToInterfaceObject",
    "WwanSetSmsConfiguration",
    "WwanAllocateMemory",
    "WwanGetProfileIstream",
    "WwanGetProfileList",
    "WwanSetInterface",
    "WwanOpenHandle",
    "WwanRegister",
    "WwanRegisterNotification",
    "WwanSmsSend",
    "WwanDisconnect"
  ],
  "wzcdlg.dll": [
    "ImportFlashProfileW",
    "DllCanUnloadNow",
    "FlashConfigGetWLanXmlProfileW",
    "DllGetClassObject",
    "FlashConfigCreateNetworkW"
  ],
  "XInput9_1_0.dll": [
    "DllMain",
    "XInputSetState",
    "XInputGetState",
    "XInputGetCapabilities",
    "XInputGetDSoundAudioDeviceGuids"
  ],
  "XPSSHHDR.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "XpsFilt.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "XpsGdiConverter.dll": "No exports",
  "XpsPrint.dll": [
    "StartXpsPrintJob",
    "DllMain"
  ],
  "XpsRasterService.dll": [
    "DllCanUnloadNow",
    "DrvPopulateFilterServices"
  ],
  "xmlfilter.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "xmllite.dll": [
    "CreateXmlReaderInputWithEncodingName",
    "CreateXmlWriterOutputWithEncodingCodePage",
    "CreateXmlReaderInputWithEncodingCodePage",
    "CreateXmlWriterOutputWithEncodingName",
    "CreateXmlWriter",
    "CreateXmlReader"
  ],
  "xmlprovi.dll": [
    "DllCanUnloadNow",
    "DllRegisterServer",
    "DllGetClassObject",
    "DllUnregisterServer"
  ],
  "xolehlp.dll": [
    "DtcGetTransactionManager",
    "ThawLocalTransactionManagers",
    "GetDtcLocaleResourceHandle",
    "DtcGetTransactionManagerC",
    "FreezeLocalTransactionManagers",
    "DtcGetTransactionManagerExW",
    "DtcGetTransactionManagerExA",
    "DtcGetTransactionManagerEx"
  ],
  "xpsservices.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "xpssvcs.dll": [
    "CreateReachPackageSender",
    "CreateContainerProducer",
    "CreateStreamReceiverOnFileHandle",
    "CreateStreamSenderOnIStream",
    "CreateSeekableBuffer",
    "DDLogHelper",
    "CreateContainerConsumer",
    "CreateReachPackageReceiver",
    "CreateStreamSenderOnFileHandle"
  ],
  "xwizards.dll": [
    "ProcessXMLFileW",
    "ResetRegistrationA",
    "XWUnregisterTask",
    "XWProcessXMLFile",
    "RunPropertySheetW",
    "RunPropertySheetA",
    "XWUnregisterPage",
    "XWUnregisterPagesLink",
    "RunWizardW",
    "ProcessXMLFileA",
    "XWRegisterTaskWithHost",
    "XWRegisterPageWithPage",
    "XWUnregisterHostTaskLink",
    "XWUnregisterHost",
    "ResetRegistrationW",
    "DllCanUnloadNow",
    "XWRegisterPageWithTask",
    "XWRegisterHost",
    "RunWizardA",
    "XWUnregisterTaskPageLink",
    "DllGetClassObject"
  ],
  "xwreg.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "xwtpdui.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "xwtpw32.dll": [
    "DllCanUnloadNow",
    "DllGetClassObject"
  ],
  "zgmprxy.dll": [
    "CreateGameFrameWork"
  ],
  "zipfldr.dll": [
    "DllCanUnloadNow",
    "RouteTheCall",
    "DllGetClassObject"
  ]
}